{
  "article_text": [
    "this document has been produced by the grid and web service working group .",
    "it follows the previous working draft .",
    "we wish to thank the members of the ivoa grid and web services working group for the discussions around pdl it has hosted during the interop meetings ( starting from naples , may 2011 ) .",
    "a special thanks are due to andr schaaff for his advice , useful discussions and feedback on every version of this work .",
    "before going into technical details and explanations about pdl , we would like to suggest what are the categories of users potentially interested in this description language and underline in what field pdl has a strategic impact .",
    "+ pdl is particularly addressed to scientists or engineers    * wishing to expose their research codes ( without limits or compromise on the complexity of the exposed code ) online as public services , * wishing to interconnect their codes into workflows .",
    "we will continue this preface by a quick ` theoretical ' overview of pdl . for a practice - oriented introduction",
    ", reader should refer to the annex paragraph [ divepdl ] . + * the online code aspect - * usually , people who are about to publish their codes as online services are wondering if user will be able to correctly use the new services : the code may have many parameters ( usually with obscure names , due to historical reasons ) .",
    "these parameters can be intercorrelated and/or have forbidden ranges , according to the configuration or validity domain of the implemented model .",
    "in other words the use of the code may be reserved to experts .",
    "+ how can the service provider ensure that the users will be aware of all the subtleties ( units , physical meaning , value ranges of parameters ) ?",
    "the natural answer is to provide a good code documentation to the community .",
    "however , our experience as service providers showed that rarely users read carefully the documentation . and",
    "even if they read it entirely , they are not safe from making gross and/or distraction errors .",
    "two commons consequences of this situation are the abandonment of the service by users , after few inconclusive tests and the abandonment of the service by the provider him(her)self , buried by e - mails from users containing question whose answer are ... in the provided documentation .",
    "+ pdl is a powerful tool for improving both the user and the provider experiences : it may be seen as a way for hardcoding all the subtleties and constraints of the code into the software components used by the provider for exposing the code and by users for interacting with it .",
    "+ the fine expertise on the code to expose is fixed into the pdl description .",
    "the pdl software framework is able to automatically generate client interfaces ( for assisting the user in interacting with the service ) and checking algorithms ( for verifying that the data submitted by users are compliant with the description ) .",
    "moreover the softwares composing the pdl framework are generic elements which are automatically configured by the description into ad - hoc components ( cf .",
    "paragraph [ softwareimplementation ] for further details and explanation about these concepts ) .",
    "the work for people wishing to expose code is indeed essentially restricted to redaction of the description .",
    "for these reasons pdl is particularly indicated for people wishing to expose their code but do nt have much time or the technical skills for building web services . + * the workflow aspect - * scientists or engineers wishing to integrate their code into workflow engines have to write ad hoc artifacts : ( in the case of the _ taverna _ engine @xcite ) these could be _ java beans _ , _ shell _ and _ python _ artefacts .",
    "normally one has to write a specific artefact for every code to integrate .",
    "this could be extremely time consuming and , from the technical point of view , this is not an ` out of the box ' procedure for people starting using workflows engine .",
    "+ pdl is indicated to facilitate the integration of code into workflow engines : the integration phase is reduced to the redaction of the description .",
    "+ moreover pdl introduce a new feature into the workflow domain : since every description embeds fine grained details and metadata on parameters ( also with their related constraints ) , the physical sense ( meaning and integrity ) of a workflow could be automatically verified .",
    "+ the pdl application domain is not limited only to online code or workflows .",
    "we are now going to detail all the technical aspects of this description grammar .",
    "in the context of the _ international virtual observatory alliance _ researchers would like to provide astronomical services to the community .",
    "+ these services could be    * access to an existing catalogue of images and/or data , * access to smaller sub - products images , spectra and/or data generated on the fly , * the entry point to a database listing the results of complex and compute - intensive numerical simulations , * a computation code exposed online , etc ...    in the following we will ignore any specific feature and will use the term _ generic service _ to refer to any kind of process that receives input parameters and produces output ones .",
    "+ interoperability with other services and the immediacy of use are two key factors in the success of a service : in general , a service will not be used by the community if users do not know how to call it , the inputs it needs , or what it does and how .",
    "however , other issues may have influence in the user decision e.g. who has implemented it ? who is the service provider ?",
    "does it implement a well known technique ?",
    "is there a paper to support the research behind the service ? can it be used as a standalone application and can it be used together with other services ? a new service will be more useful for some users if it can be released easily as an interactive and standalone application whereas for other users the interoperability with other services and applications is more important .",
    "this standard is focused on the needs of the second group , as the ease of the distribution of web services is the primary concern of service providers",
    ". indeed , service description and interoperability are two key points for building efficient and useful ecosystem of services .",
    "pdl aims to provide a solution to the problems of description and interoperability of services . with pdl",
    ", service providers will be able to share with users ( either as humans or as computer systems ) the knowledge of what the service does ( and how )",
    ". moreover this new service will be immediately interactive and well integrated with other services .",
    "+ * service description * and * interoperability * are indeed two key points for building efficient and useful services .      for a client starting to interact with an unknown service ,",
    "its description is fundamental : in a sense it is this description that puts the service from the _ unknown _ to the _ known _ state .",
    "+ since the client could be a computer system , a generic description should be machine - readable .",
    "+ there are several pre - existing service description languages .",
    "the most well known for their high expression level and their wide use are the _",
    "w3c _ _ wsdl _ and _ wadl _",
    "@xcite , @xcite .",
    "+ since both _ wsdl _ and _ wadl _ support _ xml - schema _ , one could include in these descriptions complex and highly specialized xml objects for expressing conditions and/or restrictions .",
    "however , the process for building these ad - hoc xml extension types is not standard : a service provider could only describe , using the native standard feature of wadl or wsdl , primitive - typed parameters .",
    "it thus serves a roughly similar purpose as a method - signature in a programming language , with no possibility for defining restrictions , semantics and criteria to satisfy .",
    "pdl proposes a way for expressing these features in a unified way .",
    "+ in the case of _ generic services _ for science , the description needs are very specific : since we have to deal with complex formalisms and models , one should be able to describe for each parameter ; its physical meaning , its unit and precision and a range ( or set ) of admissible values ( according to a model ) .",
    "+ in many cases , especially for theoretical simulations , parameters could be linked by complex conditions or have to satisfy , under given conditions , a set of constraints ( that could involve mathematical properties and formulas ) .",
    "two examples of this high level description we would be able to provide are the following :    @xmath0    @xmath10,\\pi/2]$ then $ p_2 \\in \\{2;4;6\\}$,}\\\\ \\ \\mbox{$p_3 \\in [ -1,+1]$ and $ \\displaystyle \\left ( \\left|   \\sin(p_1)^{p_2 } -p_3 \\right| \\right)^{1/2}<3/2 $ } \\\\ \\ \\bullet \\mbox { if $ p_1 \\in ] \\pi/2,\\pi]$ then $ 0<p_2 < 10$,}\\\\ \\ \\mbox{$p_3>\\log(p_2)$ and $ ( p_1 \\cdot p_2)$ must belong to $ \\mathbb n$ } \\\\ \\end{array } \\right . \\\\ \\\\ \\",
    "\\mbox{\\hspace{1 cm } output } \\left\\ { \\begin{array}{l }   \\mbox{$\\vec p_4 , \\ , \\vec p_5 \\in \\mathbb r^3 $ } \\\\   \\",
    "\\mbox{always $ \\displaystyle \\frac{\\| \\vec p_5\\|}{\\|\\vec p_4 \\| } \\leq 0.01 $ } \\\\",
    "\\end{array } \\right.\\\\ \\end{array } \\right.\\ ] ]    to our knowledge , no existing description language meets these exacting requirements of scientific services .",
    "this leads us naturally to work on a new solution and consider developing a new description language . +",
    "* remark : * the pdl descriptions for the two examples above are provided respectively in paragraphs [ exemplum1xml ] and [ exemplum2xml ] .      nowadays , with the massive spread and popularity of _ cloud _ services , interoperability has become an important element for the success and usability of services .",
    "this remains true in the context of astronomy .",
    "for the astronomical community , the ability of systems to work together without restrictions ( and without further _ ad hoc _ implementations ) is of high value : this is the ultimate goal that guides the _",
    "ivoa_. + computer scientists have developed different tools for setting up service interoperability and orchestration . the most well known are    * _ babel _ @xcite , @xcite , @xcite ( https://computation.llnl.gov/casc/components/ ) , * _ taverna _",
    "@xcite , @xcite ( http://www.taverna.org.uk ) , * _ osgi _ and _ d - osgi _",
    "@xcite ( http://www.osgi.org/ ) , * _ opalm _",
    "@xcite , @xcite , @xcite ( http://www.cerfacs.fr/globc/palm_web/ ) , * _ gumtree _",
    "@xcite , @xcite ( http://docs.codehaus.org/display/gumtree/ ) .    in general , with those tools one could coordinate only the services written with given languages .",
    "moreover the interoperability is achieved only in a basic ` computer ' way : if the input of the @xmath2 service is a double and the output of the @xmath3 service is a double too , thus the two services could interact .",
    "+ our needs are more complex than this : let us consider a service @xmath4 whose inputs are a density and a temperature and a service @xmath5 whose outputs are density and temperature too .",
    "+ the interoperability is not so straightforward : the interaction of the two services has a sense only if the two densities ( likewise the two temperatures )    * have the same ` computer ' type ( ex .",
    "double ) , * are expressed in the same system of units , * correspond to the same physical concepts ( for example , in the service @xmath5 density could be an electronic density whereas in the service @xmath4 the density could be a mass density )    but things could be more complicated , even if all the previous items are satisfied : the model behind the service @xmath4 could implement an equation of state which is valid only if the product ( density@xmath6temperature ) is smaller than a given value .",
    "thus the interoperability with @xmath5 could be achieved only if the outputs of this last satisfy the condition on product .",
    "+ again , as in case of descriptions no existing solutions could meet our needs and we are oriented towards building our own solution . + * remark * : we will present further considerations on the workflows aspects in paragraph [ pdlwf ] , once we have exposed some basic concepts about pdl in the following paragraph .",
    "pdl was originally designed for meeting requirements coming from the community members wishing to expose their code online as public services .",
    "one of the difficulty they often mentioned is that online codes are often complex to use and users may do mistake with online simulations .",
    "for example , they could use them outside of their validity domain .",
    "the description of parameters with pdl allows to constrain those ones in validity domains , and so pdl answers this fear of the theorist community . + in order to build a grammar like pdl , we could go two ways : in the first we would have built a monolithic solution for meeting the vast majority of astronomical and astrophysical needs . in the other",
    "we would have to provide community with a flexible enough tool ( modular and extensible ) to fit the majority of use - cases : if the parameters ( of a given service ) are decomposed with the finest granularity , pdl is a good tool for performing _ a priori verification _ , notifying errors to user before submitting jobs to a server system .",
    "this has , for example , an immediate consequence on how we deal , in pdl , with sky coordinates : we do nt have particular fields / entries for ascensions and declinations . for us",
    "this parameters could be stored in _",
    "double _ parameters .",
    "the associated unit will precise if the angle will be considered in degrees or radians and the associated _ skos _ concepts @xcite , @xcite ( http://www.w3.org/tr/skos-reference/ ) will provide further information . if a service provider has to define particular conditions on the angular distance between two coordinates @xmath7 and @xmath8 ( e.g. @xmath9 ) he / she may use the expression capabilities of pdl ( cf .",
    "paragraph [ par02 ] ) + during the pdl development , close cooperation naturally born with the workflow community .",
    "pdl indeed allow the real _ scientific _ interoperability ( not only based on computer types ) required by the astronomy and astrophysics workflow community .",
    "+ the following sections of this document could seems complex at first reading .",
    "this is because we present all the features and the descriptive richness of pdl .",
    "nevertheless this does not mean that all pdl descriptions are necessarily complex .",
    "they could be complex in case of services with many parameters linked by many constraints .",
    "but pdl description could be very simple in case of simple services .",
    "for example the pdl description associated with a common cone search service is very simple .",
    "it could be consulted at the following url : +    http://www.myexperiment.org/files/999/versions/4/download/amiga-pdl-description.xml [ http://www.myexperiment.org/files/999/versions/4/ + download / amiga - pdl - description.xml ] .",
    "to overcome the lack of a solution to our description and interoperability needs , it is proposed to introduce a new language .",
    "our aim is to finely describe the set of parameters ( inputs and outputs of a given generic services ) in a way that    * could be _ interpreted _ by human beings ( we could say _ understood _ for the simpler description cases ) , * could be parsed and handled by a computer , * complex relations and constraints involving parameters could be formulated unambiguously .",
    "indeed we would like to express * * mathematical laws / formulas , * * conditional relationships ( provided they have a logical sense ) + involving parameters .    the new language is based on a generic data model ( dm ) .",
    "each object of the dm corresponds to a syntactic element .",
    "sentences are made by building object - structures .",
    "each sentence can be interpreted by a computer by parsing the object structure .",
    "+ with pdl one could build a mathematical expression ( respectively conditional sentences ) assembling the base - element described in section [ par02 ] ( resp .",
    "section [ complexrelations ] ) .",
    "if a particular expression ( or condition ) could not be expressed using the existing features , this modular grammar could be extended by introducing an ad hoc syntactic element into the object dm .",
    "+ for describing the physical scientific concept or model behind a given parameter , the idea is to use _ skos _ concepts and , if more complexity is required by the use case , a richer ontology @xcite . +",
    "since the inputs and outputs of every service ( including their constraints and complex conditions ) could be described with this fine grained granularity , interoperability becomes possible in the _ smart _ and _ intelligent _ sense we really need : services should be able to work out if they can reasonably use their output as input for another one , by simply looking at its description .",
    "+ with no loss of generality and to ensure that the model could work with the largest possible number of programming languages , we decided to fix it under the form of an xml schema ( cf paragraph [ pdlschema]).this choice is also convenient because there are many libraries and tools for handling and parsing xml documents . + * remark : * we recall that pdl is a syntactic framework for describing parameters ( with related constraints ) of generic services .",
    "since a pdl description is rigorous and unambiguous , it is possible to verify if the instance of a given parameter ( i.e. the value of the parameter that a user sends to the service ) is consistent with the description .",
    "+ in what follows in this document , we will often use the terms _ evaluate _ and _ interpret _ with reference to an expression and/or condition composed with pdl . by this",
    "we mean that one must replace the referenced parameters ( in the pdl expressions / conditions ) by the set of values provided to the service by the user . the replacement mechanisms will be explained in detail , case by case .",
    ", the domains and scopes of pdl and uws are well separated : one can be used without the other without infringing any rules of those standards .",
    "of course they could work in synergy .",
    "in this case pdl could be seen a supplementary layer ( explaining the physical / computational meaning of every parameter ) , whereas uws has only a description of the values of parameters._,scaledwidth=100.0% ]    within the ivoa architecture of figure [ pic - arch ] , pdl is a vo standard for richly describing parameters with a fine grained granularity , allowing to introduce constraints and mathematical formulae .",
    "+ if pdl describes the nature , the hierarchy of parameters and their constraints , * it does not describe * how this parameters are transmitted to a service , nor how these parameters will be processed by the described service . for example , pdl does not prescribe whether to transfer parameters through a soap envelope or through a rest post , nor what will be the phases that the submitted job will pass through . in the context of the ivoa , this means that the separation between pdl and uws @xcite is clear and one can be used without the other without infringing any rules of those standards .",
    "+ indeed , pdl could be seen a supplementary layer , for explaining in a unified way the physical / computational meaning of every parameter , whereas uws has only a description of the values of parameters .",
    "+ pdl could be plugged as an additional layer to every existing ivoa service and is suitable for solving issues not covered by other ivoa standards and is particularly indicated for workflows .",
    "the orchestration of services defines a scientific workflow , and services interoperability is key in the process of designing and building workflows .",
    "an important consideration in this process of orchestration is the control of parameters constraints at the moment of the workflow execution . even if interoperability is assured at the phase of workflow design , a control at the execution phase has to be implemented by workflow engines as service clients .",
    "as we suggested in the remark of the previous paragraph , testing for valid parameters provided to a service could be automatically generated starting from the pdl description .",
    "this automation facility could be used to perform the verification on both client side and on server side :    * verifications made on client - side will avoid sending the wrong set of parameters to a server , reducing the load on the latter , * verifications made on server - side will avoid running jobs with wrong set of parameters .",
    "indeed a server does not know if the job is sent by a client implementing the verifications or not .",
    "therefore it must behave as if the data had never been checked .",
    "verification of non - standard errors ( e.g. network issues ) are out of the scope of pdl . +          as recalled at the end of the paragraph [ anewpdl ] , we decided to fix the pdl grammar into an xml schema .",
    "the graphical diagrams proposed into this document are a simple rendering of every xml element contained into the schema , obtained following the graphical convention of the figure [ figschema ] .",
    "+ indeed , a list with the defined schema components ( elements , attributes , simple and complex types , groups and attribute groups ) is presented into the graphical representation : every complex element described is linked with segments to the contained sub - elements .",
    "a bold segment indicates that the sub - element is required and a thin segment indicates that the sub - element is optional .",
    "moreover , the cardinality of the contained sub - elements could be expressed on the segments .",
    "the root element of the pdl description of a generic service is the object _ service _ ( see figure [ pic - service ] ) .",
    "this * must contain *    * a single _",
    "servicename_. this field is a string containing the name of the service . *",
    "a _ serviceid_. this field is a string containing the ivoa i d of the service .",
    "it is introduced for a future integration of pdl into the registries : each service in the registry will be marked with its own unique i d . * a _",
    "description_. this field is a string and contains a human readable description of the service .",
    "this description is not intended to be understood / parsed by a machine . * a _ parameters _ field which is a list of _ singleparameter _ object types ( cf .",
    "paragraph [ par01 ] ) .",
    "this list contains the definition of all parameters ( both inputs and outputs ) of the service .",
    "the two following fields specify if a given parameter is a input or an output one .",
    "* an _ inputs _ field of type _ parametergroup _ ( cf .",
    "paragraph [ par - group ] ) .",
    "this object contains the detailed description ( with constraints and conditions ) of all the input parameters .",
    "* an _ outputs _ field of type _ parametergroup_. this object contains the detailed description ( with constraints and conditions ) of all the output parameters .",
    "the _ singleparameter _ class ( see figure [ pic - parameter ] ) is the core element for describing jobs .",
    "every object of this type must be characterized by :    * a name , which is the i d of the parameter . in a given pdl description instance",
    ", two parameters can not have the same name ; * a single parameter type , which explains the nature of the current parameter .",
    "the allowed types are : boolean , string , integer , real , date ; * a dimension .",
    "a @xmath10-dimension corresponds to a scalar parameter whereas a dimension equal to n corresponds to a n - size vector .",
    "the dimension is expressed using an _ expression _ ( cf . paragraph [ par02 ] ) .",
    "the result of the expression that appears in this _",
    "singleparameter_-field object * must be integer*.    * remark on the vector aspect : * it could seem unnecessarily complex to have the parameter dimension into an _ expression_. this feature has been introduced for meeting some particular needs : consider for example a service computing polynomial interpolations .",
    "let the first parameter @xmath11 ( an integer ) be the degree of the interpolation and the second parameter @xmath12 be the vector containing the set of points to interpolate . for basic mathematical reasons ,",
    "these two parameters are linked by the condition @xmath13 . by defining dimensions as _ expressions",
    "_ we can easily include this kind of constraints into pdl descriptions .",
    "+ vectors in pdl are intended as one dimensional arrays of values .",
    "further significations should be documented using the ucd , utype or the skos concept fields . moreover , if one wish to define an _ expression _ using the scalar product of two vectors ( cf .",
    "paragraph [ par02 ] ) he / she has to pay attention that the involved vectors are expressed in the same orthonormal basis . + the attribute _ dependency _ can take one of the two values * required * or * optional*. if required the parameter * must be * provided to the service .",
    "if optional , the service could work even without the current parameter and the values will be considered for processing only if provided .",
    "+ optional fields for the _ singleparameter _ class are :    * a ucd : which is a text reference to an existing ucd for characterizing the parameter @xcite ; * a utype : which is a reference to an existing utype for characterizing the parameter @xcite ( ) ; * a skos concept ( containing the valid url of a skos concept ) . * a unit ( ) . * a precision .",
    "this field must be specified only for parameter types where the concept of precision makes sense .",
    "it has indeed no meaning for integer , rational or string .",
    "it is valid , for instance , for a real type . to understand the meaning of this field ,",
    "let the function @xmath14 be a model of a given service . if @xmath15 denotes the input parameter , @xmath16 denotes the output .",
    "the precision @xmath17 is the smaller value such that @xmath18 . + the precision is expressed using an _ expression _ ( cf . paragraph [ par02 ] ) .",
    "the result of the expression that appears in this _",
    "precision_-field * must be * of the same type as ( or could be naturally cast to ) the type appearing in the field _ parameter type_.",
    "* nb : * the name of every _ singleparameter",
    "_ is unique .",
    "this class , as it name suggests , is used to reference an existing parameter defined in the _ service _ context ( cf .",
    "paragraph [ par - service ] ) .",
    "it contains only an attribute _ parametername _ of type string which must corresponds to the _ name _ field of an existing _ singleparameter _ ( cf . paragraph [ par01 ] ) .",
    "this class is used to explain the type of a parameter ( cf .",
    "paragraph [ par01 ] ) or an expression ( cf .",
    "paragraph [ par02_03 ] ) .",
    "the allowed types are :    * boolean .",
    "the allowed values for parameters of this type are _ true / false _ , non case sensitive . *",
    "any string ( utf8 encoding recommend ) .",
    "* integer .",
    "numbers ( positive and negatives ) composed of [ 0 - 9 ] characters . *",
    "two formats are allowed for parameters of this type : * * numbers ( positives and negatives ) composed of [ 0 - 9 ] characters , with dot as decimal separator , * * scientific notation : number composed of [ 0 - 9 ] characters , with dot as decimal separator , followed by the _ e _",
    "character ( non case sensitive ) , followed by an integer . * date .",
    "parameters of this type are dates in iso8601 format .    * remark * there is a lot of complexity in expressing date / time values in astronomy",
    ". a first solution for covering all the cases would be to include all the possibility into the data model .",
    "however , this hardcoded approach does not fit with the pdl modular approach .",
    "for example , if a service provider wish to indicate to users that they have to provide a gmt date , he can use two parameters : the first will contain the date itself and the second ( e.g. _ datetype _ ) will specify the nature of the first parameter .",
    "the service provider may then use all the richness of the pdl grammar for expressing conditions on / between these two parameters .",
    "the _ parametergroup _ class ( see figure [ pic - parametergroup ] ) is used for grouping parameters according to a criterion of relevancy arbitrarily chosen by service provider ( for instance parameters may be grouped according to the physics : position - group , speed - group ; thermodynamic - group ) . however , the parametergroup is not only a kind of parameter set , but also can be used for defining complex relations and/or constraints involving the contained parameters ( cf .",
    "paragraph [ par - constraintsongroup ] ) .",
    "+ this class * must contain * a single name .",
    "this name is a string and is the identification label of the parametergroup , and two groups can not have the same name in a given pdl description instance .",
    "+ optional fields are    * the references to the parameters ( cf .",
    "paragraph [ par - parref ] ) one want to include into the group ; * a _ constraintongroup _ object ( cf . paragraph [ par - constraintsongroup ] ) .",
    "this object is used for expressing the complex relations and constraints involving parameters . *",
    "an _ active _ field of type _ whenconditionalstatement _ ( cf .",
    "paragraph [ par - whenconditionalstatment ] ) . if there is no _ active _ element the group will be considered active by default ( e.g. in case of a graphical representation it will be displayed ) . otherwise , the activations depends on the result of the evaluation of the criterion contained into the when conditional statement ( cf .",
    "paragraphs [ par - whenconditionalstatment ] and [ par - evalcriteria ] ) . *",
    "the _ parametergroup _ object contained within the current root group .",
    "indeed the _ parametersgroup _ is a recursive object which can contain other sub - groups .",
    "* nb : * the name of every _ parametergroup _ is unique . + * nb : * for any practical use , the number on the parameter referenced into a given group summed to the number of sub - groups of the same group must be greater than one .",
    "otherwise the group would be a hollow shell .",
    "the _ expression _ is the most versatile component of the pdl .",
    "it occurs almost everywhere : in defining fields for _ singleparameters _ ( cf . paragraph [ par01 ] ) or in defining conditions and criteria ) .",
    "+ expression itself is an abstract class . in this section",
    "we are going to review all the concrete class extending and specializing expressions . + * n.b . * in what follows , we will call a * numerical expression * every _ expression _ involving only numerical types .",
    "this means that the evaluation of such expressions should lead to a number ( or a vector number if the dimension of the expression is greater than one ) .",
    "+          the _ atomicparameterexpression _ ( extending _ expression _ , see figure [ pic - atomicparameter ] ) is the simplest expression that could be built involving a defined parameter .",
    "this class * must contain * unique reference to a given parameter .",
    "+ optional fields , valid only for numerical types , are :    * a * numerical * power _ expression _ object ; * an _ operation _ object ( cf . paragraph [ par02_02 ] ) .",
    "+    let @xmath19 and @xmath20 be respectively the parameter and the power expression we want to encapsulate .",
    "the composite object could be presented as follows : @xmath21    to evaluate a given _ atomicparameterexpression _ , one proceeds as follows : let @xmath22 , @xmath23 be respectively the dimension of the parameter @xmath19 referenced , the dimension of the power expression and the dimension of the expression contained within the operation object .",
    "+ the exponent part of the expression is legal if and only if :    * @xmath24 . in this case",
    "@xmath25 is a @xmath22-size vector expression and @xmath26 @xmath27 the @xmath15 component of this vector is equal to @xmath28 , where @xmath29 is the value of the @xmath15 component of vector parameter @xmath19 and @xmath30 is the value obtained by interpreting the @xmath15 component of vector expression @xmath20 . * or @xmath31 . in this case , @xmath26 @xmath27 the @xmath15 component of the vector result is equal to @xmath32 , where @xmath29 is the same as defined above .",
    "+    whatever the method used , let us note @xmath33 the result of this first step .",
    "we recall that the dimension of @xmath33 is always equal to @xmath22 .",
    "in order to complete the evaluation of the expression , one should proceed as shown in paragraph [ par02_02 ] , by setting there @xmath34 .",
    "the _ atomicconstantexpression _ ( extending _ expression _ , see figure [ pic - atomicconstant ] ) is the simplest expression that could be built involving constants .",
    "since this class could be used for defining a constant vector expression , it * must contain *    * a single list of string which expresses the value of each component of the expression .",
    "let @xmath35 be the size of the string list . if @xmath36 the expression is scalar and it is a vector expression if @xmath37 . * an attribute _ constanttype _ of type _ parametertype _ ( cf .",
    "paragraph [ par - parametertype ] ) which defines the nature of the constant expression .",
    "the allowed types are the same as in the field _ parametertype _ of the class _",
    "singleparameter_.    the class * is legal if and only if * every element of the string list could be cast into the type expressed by the attribute _",
    "constanttype_. + optional fields , valid only for numerical types , are :    * a * numerical * power _ expression _ object ; * an _ operation _ object ( cf . paragraph [ par02_02 ] ) .",
    "let @xmath38 ( @xmath39 ) and @xmath20 be respectively the @xmath15 component of the string list and the power expression we want to encapsulate .",
    "the composite class could be presented as follows : @xmath40 to evaluate a given _ atomicconstantexpression _ , one proceeds as follows : let @xmath35 , @xmath23 be respectively the dimension of the vector constant ( @xmath35 is equal to one in case of scalar constant ) , the dimension of the power expression and the dimension of the expression contained within the operation object .",
    "+ the exponent part of the expression is legal if and only if :    * @xmath41 . in this case",
    "@xmath42 is a @xmath35 size vector expression and @xmath43 the @xmath15-th component of this vector is equal to @xmath44 , where @xmath30 is the value obtained by interpreting the @xmath15 component of vector @xmath20 . * or @xmath31 . in this case , @xmath43 the @xmath15 component of the vector result is equal to @xmath45 .",
    "+    whatever the method used , let us note @xmath33 ( whose dimension is always equal to @xmath35 ) is the result of this first step . in order to complete the evaluation of the expression",
    ", one should proceed as exposed in paragraph [ par02_02 ] , by substituting there @xmath34 .",
    "the _ parenthesiscontent _ class ( extending _ expression _ , see [ pic - parenthesiscontent ] ) is used to explicitly denote precedence by grouping the expressions that should be evaluated first .",
    "this class * must contain * a single * numerical * object @xmath46 ( referred to hereafter as @xmath47 ) .",
    "+ optional fields are    * a * numerical * power _ expression _ object ( referred to hereafter as @xmath48 ) ; * an _ operation _ object ( cf . paragraph [ par02_02 ] ) . +    this composite class",
    "could be presented as follows : @xmath49 in order to evaluate this object expression , one proceeds as follows : first one evaluates the expression @xmath47 that has the main priority .",
    "then one proceeds exactly as in paragraph [ par02_01 ] ( after the equation ( [ eq01 ] ) ) by substituting @xmath50 and @xmath51 .          the _ operation _",
    "class ( see figure [ pic - operation ] ) is used for expressing operations involving two * numerical * expressions .",
    "this class * must contain * :    * an _ operationtype _ attribute .",
    "this attribute could take the following values : plus for the sum , minus for the difference , multiply for the standard product , scalarproduct for the scalar product and divide for the standard division .",
    "hereafter these operators will be respectively denoted @xmath52 . *",
    "an _ expression _ class .",
    "@xmath53    the _ operation _ class is always contained within a * numerical * _ expression _ ( cf . paragraph [ par02 ] ) and could not exist alone . let @xmath54 be the result of the evaluation of the expression object containing the operation ) , from the evaluation of constant field in the case of a _ atomicconstantexpression _ ( cf .",
    "paragraph [ par02_03 ] ) , from the evaluation of the expression field in case of an _ parenthesiscontentexpression _ ( cf . paragraph [ par02_04 ] ) and from the evaluation of the function object in case of a _ functionexpression _",
    "( cf . par .",
    "[ functionexpressionpar ] ) ] let @xmath55 the result of the evaluation of the * numerical * expression contained within the operation . as usual , we note @xmath56 and @xmath57 the dimensions of @xmath54 and @xmath55 . + the operation evaluation is legal if and only if :    * @xmath58 and operation type ( i.e. the operator ) @xmath59 . in this case",
    "@xmath60 is a vector expression of size @xmath56 and @xmath26 @xmath61 the @xmath15 component of this vector is equal to @xmath62 ( i.e. a term by term operation ) . * or @xmath63 and operation type @xmath64 is ` @xmath65 ' . in this case",
    "@xmath66 is the result of the scalar product @xmath67 .",
    "it is obvious that the dimension of this result is equal to @xmath10 . * or @xmath68 and operation type ( i.e. the operator ) @xmath59 . in this case",
    "@xmath60 is a vector expression of size @xmath56 and @xmath26 @xmath61 the @xmath15 component of this vector is equal to @xmath69 . * or @xmath70 and operation type ( i.e. the operator ) @xmath59 .",
    "this case in symmetric to the previous one .",
    "the type of the result is automatically induced by a standard cast operation performed during the evaluations ( for example a double vector added to an integer vector is a double vector ) .",
    "this class is used for specifying the mathematical nature of the function contained within a _ function _ object ( cf .",
    "paragraph [ par02_05 ] ) . the unique string field this class contains could take one of these values : size , abs , sin , cos , tan , asin , acos , atan , exp , log , sum , product . in paragraph",
    "[ par02_05 ] it is explained how these different function types are used and handled .",
    "the _ function _ class ( extending _ expression _ , see figure [ pic - function ] ) is used for expressing a mathematical function on expressions .",
    "this class * must contain *    * a _ functionname _ attribute ( of type _ functiontype _ ( cf . paragraph [ par - functiontype ] ) ) which specifies the nature of the function . * an _ expression _ object ( which is the function argument ) .",
    "+    let @xmath71 be the result of the evaluation of the function argument expression and @xmath72 its dimension .",
    "the _ function _ class evaluation * is legal if and only if * :    * @xmath73 and the function argument is a * numerical * expression . in this case",
    "the result is a @xmath72-size vector and each component @xmath74 ) , @xmath75 . * or @xmath76sum ( likewise @xmath76product ) and",
    "the argument is a * numerical * expression . in this case",
    "the result is a scalar value equal to @xmath77 ( likewise @xmath78 ) , where @xmath79 is the value obtained by interpreting the @xmath15 component of vector expression @xmath71 . * or @xmath76size . in this case",
    "the result is the scalar integer value @xmath72 .    from what we saw above",
    ", the result of the interpretation of a function class * is always a number*.          the _ functionexpression _ class ( extending _ expression _ , see figure [ pic - functionexpression ] ) is used for building mathematical expressions involving functions .",
    "+ this class * must contains * a single _ function _ object ( cf . paragraph [ par02_05 ] ) .",
    "+ optional fields , valid only for numerical types , are :    * a * numerical * power _ expression _ object ; * an _ operation _ object ( cf . paragraph [ par02_02 ] ) . +    this composite class could be presented as follows : @xmath80 in order to evaluate this class expression , one proceed as follows : first one evaluate the funtion expression as explained in paragraph [ par02_05 ] .",
    "then one proceed exactly as in paragraph [ par02_01 ] ( after the equation ( [ eq01 ] ) ) by taking @xmath81function .",
    "in this part of the document we will explain how pdl objects could be used for building complex constraints and conditions involving input and/or output parameters .",
    "the _ constraintongroup _ object ( see figure [ pic - constraintongroup ] ) is always contained within a _ parametergroup _ object and could not exist alone .",
    "this object * must contain * the _ conditionalstatement _ objects .",
    "the latter are used , as is shown in paragraph [ par - conditionalstatement ] , for expressing the complex relations and constraints involving parameters .",
    "the _ conditionalstatement _ object is abstract and , as its name suggests , is used for defining conditional statements . in this section",
    "we are going to review the two concrete objects extending and specializing _ conditionalstatement_.",
    "this object ( see figure [ pic - alwaysconditionalstatement ] ) , as it name suggests , is used for expressing statement that must always be valid .",
    "it * must contain * a single _ always _ object ( which extends _ conditionalclause _ , cf . paragraph [ par - conditionalclause ] ) .",
    "this object ( see figure [ pic - ifthenconditionalstatement ] ) , as it name suggests , is used for expressing statements that are valid only if a previous condition is verified .",
    "it * must contain * :    * an _ if _ object ( which extends _ conditionalclause _ , cf .",
    "paragraph [ par - conditionalclause ] ) .",
    "* a _ then _ object ( which extends _ conditionalclause _ , cf .",
    "paragraph [ par - conditionalclause ] ) .",
    "if the condition contained within the _ if _ object is valid , the condition contained within the _ then _ object * must be * valid too .",
    "the when conditional statement is valid when the enclosed _",
    "conditional clause evaluates to true ( cf .",
    "paragraph [ par - evalcriteria ] ) .",
    "it contains a unique field of _ when _ type ( cf .",
    "paragraph [ par - conditionalclause ] ) .",
    "it was introduced for the purpose of dealing with the case of activating a parametergroup ( cf paragraph [ par - group ] ) : thus when has the advantage of having a restricted form of conditionalstatement that could have no _ side effects _ in the then part .",
    "the _ conditionalclause _ object ( see figure [ pic - conditionalclause ] ) is abstract .",
    "it * must contain * a single _ criterion _ object of type _ abstractcriterion _ ( cf . paragraph [ par - abstractcriterion ] ) .",
    "+ the four concrete objects extending the abstract _ conditionalclause _ are ( see figure [ pic - concreteclause ] ) :    * _ always _ ; * _ if _ ; * _ then _ ; * _ when_.        the criterion contained within a _ always _ object must always evaluates to _ true _ ( we will hereafter say it is valid , cf paragraph [ par - alwaysconditionalstatement ] ) . with other words , this means that _ it is good _ only when the evaluation of the criterion contained into the _ always _",
    "object evaluates to _ true_. what if it is not good ?",
    "it is wrong . _",
    "wrong _ evaluation is typically cached for notifying errors to users . + the criterion contained within a _ when _ object will be valid only when the enclosed expression evaluates to true ( cf . paragraphs [ par - whenconditionalstatment ] and [ par - evalcriteria ] ) .",
    "the _ if _ and _ then _ objects work as a tuple by composing the _ ifthenconditionalstatement _ ( cf .",
    "paragraph [ par - ifthenconditionalstatement ] ) .          the objects extending _ abstractcriterion _ ( see figure [ pic - abstractcriterion ] ) are essentials for building",
    "_ conditionalstatemets _",
    "( cf . paragraph [ par - conditionalstatement ] ) since they are contained within the _ always , if _ and _ then _ objects ( cf .",
    "paragraph [ par - conditionalclause ] ) .",
    "an _ abstractcriterion",
    "_ object * must contain * :    * an _ expression _ object ( cf . paragraph [ par02 ] ) ; * a _ conditiontype _ which is an object of type _ abstractcondition _ ( cf . paragraph [ par - conditiontype ] ) .",
    "this object specify which condition must be satisfied by the previous _",
    "expression_.    an optional field is the single _ logicalconnector _ object ( cf . paragraph [ par - logicalconnector ] ) used for building logical expressions .",
    "+ the two concrete objects extending _ abstractcriterion _ are _ criterion _ and _ parenthesiscriterion_. the latter of these two objects allows for assigning priority when interpreting and linking the criteria ( cf .",
    "paragraph [ par - evalcriteria ] ) .",
    "this object ( see figure [ pic - criterion ] ) extends the _ abstractcriterion _ without specializing it .",
    "it is indeed just a concrete version of the abstract type .",
    "this object ( see figure [ pic - parenthesiscriterion ] ) extends and specialize the _ abstractcriterion_. it is used for defining arbitrary priority in interpreting boolean expression based on criteria .",
    "the optional field of _ parenthesiscriterion _ is an _ externallogicalconnector _ object of type _",
    "logicalconnector_. it is used for linking other criteria , out of the priority perimeter defined by the parenthesis ( cf .",
    "paragraph [ par - evalcriteria ] ) .",
    "the _ logicalconnector _ object ( see figure [ pic - logicalconnector ] ) is used for building complex logical expressions .",
    "it is an abstract object and it * must * contain a criterion of type _ abstractcriterion _ ( cf .",
    "paragraph [ par - abstractcriterion ] ) .",
    "+ the two concrete objects extending _ logicalconnector _ are :    * the _ and _ object used for introducing the logical and operator between two criteria ; * the _ or",
    "_ object used for introducing the logical or operator between two criteria .",
    "_ abstractcondition _ is an abstract object .",
    "the objects extending it always belong to an _ abstractcriterion _ ( cf . [ par - abstractcriterion ] ) . in this context , they are used combined with an _ expression _ object , for expressing the condition that the expression must satisfy .",
    "+ let us consider a given criterion object @xmath82 ( extending_abstractcriterion _ ) and let us note @xmath83 and @xmath84 the expression and the condition contained within @xmath82 . in what follows we are going to explain the different objects specializing _ abstractcondition _ and their behavior .",
    "this object is used for specifying that the expression @xmath83 has no assigned value ( this is exactly the same concept as the null value in java or the none value in python ) . indeed , if and only if @xmath83 has no assigned value , the evaluation of the tuple @xmath85 leads to a true boolean value . thus , in the case @xmath82 has no _ logicalconnector _ , the criterion is true .",
    "these objects are used for specifying that the result of the evaluation of the expression @xmath86 is of a given numerical type .",
    "the tuple @xmath87 is legal if and only if @xmath83 is a * numerical * expression .",
    "+ the ` numerical - type ' objects extending _ abstractcondition _ are :    * _ isinteger _ , in this case the evaluation of the tuple @xmath87 leads to a true boolean value if and only if the evaluation of the numerical expression @xmath83 is an integer .",
    "* _ isreal _ , in this case the evaluation of the tuple @xmath87 leads to a true boolean value if and only if the evaluation of the numerical expression @xmath83 is a real number .",
    "this object ( see figure [ pic - belongtoset ] ) is used for specifying that the expression @xmath86 could take only a finite set of values .",
    "it * must contain * the _ values _ ( which are objects of type _ expression _ ) defining the set of legal values .",
    "the number of _ values _ must be greater than one .",
    "+ this object is legal only if all the _ expressions _ of the set are of the same type ( e.g. they are all numerical , or all boolean or all string expressions ) .",
    "+ the tuple @xmath87 leads to a true boolean value if and only if :    * the expression @xmath83 and the expressions composing the set are of the same type * and an element @xmath88 exists in the set such that @xmath89 .",
    "+ this last equality is to be understood in the following sense : let @xmath90 be the equality operator induced by the type ( for numerical type the equality is in the real number sense , for string type the equality is case sensitive and for boolean the equality is in the classic boolean sense ) .",
    "+ two expressions are equal if and only if * * the expressions have the same size @xmath91 , * * and @xmath92 , @xmath93 , where @xmath94 and @xmath95 are respectively the result of the evaluation of the @xmath15 component of expressions @xmath88 and @xmath83 .",
    "this object ( see figure [ pic - valuelargerthan ] ) is used for expressing that the result of the evaluation of the expression @xmath83 must be greater than a given value . + it *",
    "must contain *    * a * numerical * _ expression _ @xmath96 . * a _ reached _ attribute , which is a boolean type .",
    "the tuple @xmath87 is legal only if @xmath83 is a numerical expression . +",
    "this tuple leads to a true boolean value if and only if the result of the evaluation of the expression @xmath83 is greater than the result of the evaluation of the expression @xmath96 and the attribute _ reached _ is false .",
    "otherwise if the _ reached _ attribute is true the expression @xmath83 may be greater than or equal to the result .",
    "this object ( see figure [ pic - valuesmallerthan ] ) is used for expressing that the result of the evaluation of the expression @xmath83 must be smaller than a given value . + it *",
    "must contain *    * a * numerical * _ expression _ @xmath96 . * a _ reached _ attribute which is a boolean type .",
    "the tuple @xmath87 is legal only if @xmath83 is a numerical expression .",
    "+ this tuple leads to a true boolean value if and only if the result of the evaluation of the expression @xmath83 is smaller ( otherwise smaller or equal when the attribute _ reached _ is true ) than the result of the evaluation of the expression @xmath96 .",
    "this object ( see figure [ pic - valueinrange ] ) is used for expressing that the result of the evaluation of the expression @xmath83 must belong to a given interval .",
    "the definition of the interval is made using the _ valuelargerthan _ _ valuesmallerthan _ objects .",
    "indeed , the _ valueinrange _ object * must contain * :    * an object inf of type _ valuelargerthan _ for specifying the inferior limit of the interval , * an object sup of type _ valuesmallerthan _ for specifying the superior limit of the interval .",
    "the tuple @xmath87 is legal only if @xmath83 is a numerical expression . +",
    "this tuple leads to a true boolean value if and only if the evaluation of both tuples @xmath97 and @xmath98 lead to true boolean values .",
    "this object ( see figure [ pic - valuedifferentfrom ] ) is used for specifying that the expression @xmath83 must be different from a given value .",
    "it * must contain * an _ expression _",
    "+ in order to be compared , the two expressions @xmath83 and @xmath96 must have the same type .",
    "the evaluation of the tuple @xmath87 leads to a true boolean value only if @xmath99 .",
    "this inequality has to be understood in the sense explained in paragraph [ par - belongtoset ] ( in the second point of the list ) .",
    "this object ( see figure [ pic - defaultvalue ] ) is used for specifying the default value of a parameter .",
    "+ it * must contain * an _ expression _",
    "+ since the default value of an expression involving functions , multiple parameters , etc .",
    "has no particular sense , in the case of the present object the tuple @xmath87 is legal only if    * @xmath83 is an _ atomicparameterexpression _",
    "[ par02_01 ] ) * and the dimension and the type of the expression @xmath96 are equal to the dimension and type expressed in the _ singleparameter _ object referenced into the _ atomicparameterexpression_.    moreover , for having a legal _ defaultvalue _ object , the criterion @xmath82 containing it must be contained within the _ always _ or _ then _ objects ( cf .",
    "paragraph [ par - conditionalclause ] ) .",
    "the evaluation of the criterion type objects ( cf .",
    "paragraph [ par - abstractcriterion ] ) always leads to a boolean value ( the only exception is what we saw in paragraph [ par - defaultvalue ] , where the criterion contains a _ defaultvalue _ condition ) . + we use hereafter the same notation introduced in [ par - conditiontype ] : let us consider a given criterion ( extending_abstractcriterion _ ) @xmath82 and let us note @xmath83 and @xmath84 the expression and the condition contained within @xmath82 .",
    "+ when @xmath82 contains no _ logicalconnector _ objects , the evaluation of the criterion is straightforward : the result is equal to the boolean - evaluation of the tuple @xmath87 .",
    "this tuple is evaluated according to the concrete class involved , as explained in paragraphs [ par - isnull ] to [ par - defaultvalue ] + it is a bit more complex when criteria contain _ logicalconnectors_.",
    "let us see how to proceed .",
    "+ to begin with , let us consider only _ criterion _ concrete objects : + as we saw in the previous paragraphs , criteria object are ( with the help of _ logicalconnectors _ object ) recursive and hierarchical objects .",
    "+ this hierarchical structure composing a complex criterion could be graphically represented as follows .",
    "@xmath100{lc_1 }   ( \\mathcal e_2 , \\mathcal c_2 ) \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_2 } \\cdots   ( \\mathcal e_i , \\mathcal c_i ) \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_i } \\cdots   ( \\mathcal e_{n-1 } , \\mathcal c_{n-1 } ) \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_{n-1 } } ( \\mathcal e_n , \\mathcal c_n)\\ ] ] where the index @xmath10 , @xmath15 and @xmath101 are respectively for the root , the @xmath15 and the leaf criterion composing the structure . the term @xmath102 denotes the _ logicalconnector _ contained within the criterion @xmath103 .",
    "+ as we saw in paragraphs [ par - isnull ] to [ par - defaultvalue ] every tuple @xmath104 , @xmath105 could be evaluated ( according to the concrete object involved ) and leads to a boolean value @xmath106 .",
    "thus the expression ( [ eq - criterionstructure01 ] ) become @xmath107{lc_1 }   \\mathcal b_2 \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_2 } \\cdots   \\mathcal b_i \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_i } \\cdots   \\mathcal b_{n-1 } \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_{n-1 } } \\mathcal b_n\\ ] ] this last is a classic sequential boolean expression .",
    "it is evaluated from left to right and the operator and takes precedence over the or operator .",
    "+ let us now consider _ parenthesiscriterion _ criteria . a representation of such a criterion @xmath82 could be the following : @xmath108 where @xmath83 , @xmath84 , @xmath109 , @xmath110 are respectively the _ expression _ , the condition , the _ logicalconnector _ and the criterion contained within @xmath109 .",
    "the term @xmath111 is the _ externallogicalconnector _ of @xmath82 .",
    "+ the criterion structure contained within @xmath112 has the highest priority and has to be evaluate , before the _ externallogicalconnector _ evaluation .",
    "+ in the case where @xmath110 is composed only of _ criterion _ objects ( so with no _ parenthesiscriterion _ ) , the evaluation of the content of @xmath113 is performed as shown before in ( [ eq - criterionstructure01 ] ) and ( [ eq - criterionstructure02 ] ) .    in the case where @xmath110 contains at least one _ parenthesiscriterion _",
    ", one has to go deeper in the criterion structure to find the deepest criterion @xmath114 such that @xmath115 contains only criteria of type _ criterion_.thus one can simply evaluate the content of @xmath116 as already shown .",
    "+ for illustrating how to proceed , let us consider the following complex - criterion structure : @xmath117    from what we saw above , the expression ( [ eq - criterionstructure03 ] ) becomes @xmath118 and finally @xmath119{lc_1 }   \\mathcal b_2 \\big ) \\xrightarrow[{\\mbox{\\tiny and / or}}]{elc_1 }   \\cdots \\\\ \\displaystyle \\hspace{2.5 cm } \\big ( \\mathcal b_{i-1 } \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_{i-1 } } \\big ( \\mathcal b_i \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_i } \\mathcal b_{i+1 } \\big ) \\big )   \\xrightarrow[{\\mbox{\\tiny and / or}}]{elc_{i-1 } }   \\\\",
    "\\displaystyle   \\hspace{7.5 cm }   \\cdots \\big (    b_{n-1 }    \\xrightarrow[{\\mbox{\\tiny and / or}}]{lc_{n-1 } } \\mathcal b_n \\big ) \\ , .",
    "\\\\ \\end{array}\\ ] ] this last is a classical sequential boolean expression .",
    "it is evaluated from the left to the right .",
    "the sub - expression between the parenthesis must be evaluated with the highest priority and the operator and takes precedence over the or operator .",
    "we recall that pdl is a grammar and syntax framework for describing parameters and their constraints .",
    "since the description is rigorous and unambiguous , pdl could verify if the instance of a given parameter is consistent with the provided description and related constraints .",
    "for example , consider the description @xmath120 according to the description , the pdl framework could automatically verify the validity of the parameter provided by the user .",
    "if he / she provides @xmath121 , then this value will be rejected .",
    "+ in any case pdl is not a formal - logic calculation tool .",
    "one could build the following description with no problem : @xmath122 the pdl language grammar is not a tool with capabilities to perceive logical contradictions which may be contained within statements .",
    "this kind of consideration is outside of the scope of the present standard .",
    "for this reason , a validation system for pdl definitions is not required to implement the detection of contradictions , but may do if the services within its description realm make this feasible .",
    "the current pdl reference implementation does not perform such contradiction detection and thus any parameter @xmath123 provided by user would be rejected for this example . + in other words * people providing descriptions of services must pay great attention to their contents .",
    "throughout this document we have described pdl as a _",
    "grammar_. if we consider it just as a grammar , then a specific description should be considered as an implementation .",
    "+ we remember that , since a pdl description is detailed , it is a priori possible to write once for all generic software components .",
    "these components will be automatically _ configured _ by a pdl description thus becoming _ ad hoc _ implementation software for the described service .",
    "moreover checking algorithms could also be generated automatically starting from a description instance . in our implementations",
    "we wanted to check practically that these concepts implied in the definition of pdl really works .",
    "the development of operational services ( as the paris - durham shock code ) also permits to ensure the coherence of the core grammar and to verify if the pdl s capabilities could meet the description needs of state of the art simulation codes .    at the present ( fall 2013 )",
    "four software elements are implemented around pdl :    * the standalone dynamic client .",
    "it embeds the automatic generation of the verification layer ( google code repository at https://code.google.com/p/vo-param/ ) .",
    "this development shows that a pdl description instance can be used for generating the checking algorithms and for generating a client with a dynamic - intelligent behavior helping the user in interacting with a service .",
    "this client could be used for interacting with services exposed using different job systems ; * a server for exposing any exiting code as a web services .",
    "it embeds the verification layer .",
    "this development was done for showing that a pdl description instance can be used for generating the _ ad hoc _ server , exposing the described service .",
    "a particular feature of this server is that it can generates grids of model starting from a single job submission , which indicates ranges for parameters ( github repository at https://github.com/cmzwolf ) ; * the taverna plugin @xcite . from one point of view",
    "this plugin could be seen as an alternate client to the standalone one . from another point of view",
    "it is strongly oriented towards general physical and scientific interoperability ( discussed in paragraph [ parinteropissues ] ) since it uses pdl description for validating the chaining of jobs composing a workflow . as the dynamic client",
    ", the taverna plugin can be used for interacting with services exposed different job systems ( github repository for stable version at https://github.com/wf4ever/astrotaverna ) . * the description editor , for editing pdl description from a graphical user interface . since the key point for using pdl and take advantage of the software tools we have just described is a pdl description , we decided to provide the community with a tool for easily composing pdl description . in some sense",
    "this is the entry - point of the pdl software farmework ( google code repository at https://code.google.com/p/pdl-editor/ ) .",
    "all these developments validate the concepts of automatic generation of algorithms and the possibility of configuring , with highly specialized individual behaviors , generic software components .",
    "this is very important since it reduces drastically the development time for building services based on the pdl grammar .",
    "this is essential in a scientific context where only few scientists have access to software engineer for their ivoa developments .",
    "+ in further developments , pdl - client implementations will include a formal - logic module .",
    "this will permit finding contradictions inside the descriptions .",
    "+ such a module will also be required for implementing the automatic computation of _ a priori interoperability graphs_. it will also permit checking interoperability in terms of semantic annotations : for example , let a be the concept that describes an input parameter of a service @xmath124 and b the concept that describes an output parameter of a service @xmath125 .",
    "if a and b are the same concept , then both services match the interoperability criterion .",
    "however , if a and b are not the same concept we need , for piping the result of @xmath125 to @xmath124 , to ask if the concept b is more specific than the concept a , in other words , if the concept b is generalized or subsumed by the concept a. if this happens then both services match again the interoperability criterion .",
    "interoperability only makes sense when there is an application or infrastructure that allows communication and connection of different services .",
    "an example is the applications for orchestrating services by designing workflows ( as described in section 2.2 ) .",
    "further developments for pdl include the implementation of interoperability mechanisms in taverna .",
    "in this section we present a practice approach to pdl .",
    "it is inspired by one of the first services we deployed using the pdl framework : the meudon stark - h broadening computation service for hydrogen ( http://atomsonline.obspm.fr ) .",
    "+ the exposed code take as input four parameters :    * a quantum number @xmath126 , which corresponds to the upper energy level . * a quantum number @xmath127 , which corresponds to the lower energy level .",
    "* a temperature @xmath128 , which is the temperature of the simulated medium . * a density @xmath129 , which is an electron density .    with the existing exposure systems ( mostly soap @xcite , rest @xcite , servlet web services ) the information about parameters is more or less limited to a basic _ function signature _",
    ": the two first parameters are _ integer _ , while the two last are _ double_. but",
    "this information is not sufficient for a user wishing to use the service without knowing a priori the code : what are the unit of these parameters ?",
    "what are their physical meaning ?",
    "pdl is a unified way for providing user with this information by hardcoding it directly in the software composing the service .",
    "with pdl service provider can easily express that    * @xmath126 is _ integer _ , it corresponds to the principal quantum number of the upper energy level and , as a quantum number , it has no dimension .",
    "the pdl _ translation _ of this sentence is : + .... < parameter dependency=\"required \" >      < name > initiallevel</name >      < parametertype > integer</parametertype >      < skosconcept > http://example.edu / skos / initiallevel</skosconcept >       < unit > none</unit >",
    "< dimension xsi : type=\"atomicconstantexpression \" constanttype=\"integer \" >          < constant>1</constant >      < /dimension > < /parameter > .... + the pdl description points to the skos uri containing the definition of the physical concept",
    ". moreover it says that the current parameter has @xmath10 as dimension .",
    "this means that the parameter is scalar ( a dimensions greater than one is for vector parameters ) .",
    "the required attribute indicate that the user must submit this parameter to the service , and it is not optional .",
    "* @xmath127 is _ integer _ , it corresponds to the principal quantum number of the lower energy level and , as a quantum number , it has no dimension .",
    "the pdl _ translation _ of this sentence is : + .... < parameter dependency=\"required \" >      < name > finallevel</name >      < parametertype > integer</parametertype >        < skosconcept > http://example.edu / skos / finallevell</skosconcept >        < unit > none</unit >      < dimension xsi : type=\"atomicconstantexpression \" constanttype=\"integer \" >          < constant>1</constant >      < /dimension > <",
    "/parameter > .... * @xmath128 is the thermodynamic temperature of the simulated medium and is expressed in kelvin .",
    "the pdl _ translation _ for this sentence is : + .... < parameter dependency=\"required \" >      < name > temperature</name >      < parametertype > real</parametertype >      < skosconcept > http://example.edu / skos / temperaturel</skosconcept >      < unit > k</unit >      < dimension xsi : type=\"atomicconstantexpression \" constanttype=\"integer \" >          < constant>1</constant >      < /dimension > <",
    "/parameter > .... * @xmath129 is an electron density in @xmath130 .",
    "the pdl version is : + .... < parameter dependency=\"required \" >      < name > density</name >      < parametertype > real</parametertype >      < skosconcept > http://example.edu / skos / denisty</skosconcept >      < unit > cm^-3</unit >      < dimension xsi : type=\"atomicconstantexpression \" constanttype=\"integer \" >          < constant>1</constant >",
    "< /dimension > < /parameter > ....    even with this information , it is not guaranteed that users will be able to correctly use the service .",
    "indeed , two constraints involve parameters .",
    "the first comes from the definition of @xmath126 and @xmath127 : the condition @xmath131 must always be satisfied .",
    "the second comes from the physical model implemented into the exposed code .",
    "the result has a physical meaning",
    "only if the debey approximation hypothesis holds : @xmath132 how to alert the user of these two constraints ?",
    "a first solution consists in writing explanation ( e.g. a code documentation ) but it is not sure that users will read it .",
    "a more secure approach consists in writing checking algorithms . but this solution is time consuming , since you have to write _ ad hoc _ tests for every specific code .",
    "pdl answer this issues by providing a unified way for expressing the constraints .",
    "the pdl formulation of ( [ energydifference ] ) is    .... < always >      < criterion xsi : type=\"criterion \" >          < expression xsi : type=\"atomicparameterexpression \" >",
    "< parameterref parametername=\"finallevel\"/ >              < operation operationtype=\"minus \" >                  < expression xsi : type=\"atomicparameterexpression \" >                          < parameterref parametername=\"initiallevel\"/ >                  < /expression >                          < /operation",
    ">          < /expression >                      < conditiontype xsi : type=\"valuelargerthan \" reached=\"true \" >                          < value xsi : type=\"atomicconstantexpression \" constanttype=\"real \" >                  < constant>1</constant >                              < /value",
    ">                      < /conditiontype",
    ">       < /criterion > < /always > ....      .... < always >    < criterion xsi : type=\"criterion \" >       < expression xsi : type=\"atomicconstantexpression \" constanttype=\"real \" >             < constant>0.09</constant >             < operation operationtype=\"multiply \" >                  < expression xsi : type=\"atomicparameterexpression \" >                       < parameterref parametername=\"density\"/ >                       < power xsi : type=\"atomicconstantexpression \" constanttype=\"real \" >                         < constant>0.16666666</constant >                       < /power >                       < operation operationtype=\"divide \" >                              < expression xsi : type=\"atomicparameterexpression \" >                                  < parameterref parametername=\"temperature\"/ >                                   < power xsi : type=\"atomicconstantexpression \" constanttype=\"real \" >                                          < constant>0.5</constant >                                   <",
    "/power >                             < /expression >                       < /operation >                 < /expression >           < /operation >        < /expression >        < conditiontype xsi :",
    "type=\"valuesmallerthan \" reached=\"false \" >      < value xsi : type=\"atomicconstantexpression \" constanttype=\"real \" >          < constant>1</constant >      < /value >        < /conditiontype",
    "/criterion > < /always > ....    these two last pieces of xml ( composing a wider pdl description ) are not intended for humans .",
    "they are parsed by the pdl framework for automatically generate the checking algorithms associated with the described constraints .",
    "+ the key point to retain is that pdl is simple for simple services is flexible and powerful enough for meeting description requirements coming with the most complex scientific codes ( of course the associated description wo nt be simple ) .",
    "the reader will find the xml file related to this example at the following url : + http://vo-param.googlecode.com/svn/trunk/model/documentation/pdl-description_example01.xml[http://vo-param.googlecode.com/svn/trunk/model/documentation/ + pdl - description_example01.xml ]      the reader will find the xml file related to this example at the following url : + http://vo-param.googlecode.com/svn/trunk/model/documentation/pdl-description_example02.xml[http://vo-param.googlecode.com/svn/trunk/model/documentation/ + pdl - description_example02.xml ] .      ....",
    "xml version=\"1.0 \" encoding=\"utf-8 \" ?",
    "> < xs : schema xmlns : xs=\"http://www.w3.org/2001/xmlschema \" xmlns : pm=\"http://www.ivoa.net / xml / pdl / v1.0 \"     elementformdefault=\"qualified \" targetnamespace=\"http://www.ivoa.net / xml / pdl / v1.0 \" >     < ! -- needs isactive property on group - need to be able to reference a group -- >",
    "< xs : annotation >        < xs : documentation > ivoa description of the set of parameters for a service</xs : documentation >     < /xs : annotation >     < xs : element name=\"service \" >",
    "< xs : annotation >           < xs : documentation > the base service description .",
    "a              service in this context is simply some sort of process              that has input parameters and produces output parameters .",
    "< /xs : documentation >        < /xs : annotation >        < xs : complextype >           < xs : sequence >              < xs : element name=\"serviceid \" type=\"xs : string \" minoccurs=\"1 \" maxoccurs=\"1 \" >                 < xs : annotation >                    < xs : documentation > the ivoa identifier for the service</xs : documentation >                 < /xs : annotation >              < /xs : element >",
    "< xs : element name=\"servicename \" type=\"xs : string \" minoccurs=\"1 \" maxoccurs=\"1\"/ >              < xs : element name=\"description \" type=\"xs : string \" minoccurs=\"1 \" maxoccurs=\"1\"/ >              < xs : element name=\"parameters \" type=\"pm : parameters \" minoccurs=\"1 \" maxoccurs=\"1 \" >                 < xs : annotation >                    < xs : documentation > the list of all possible parameters both input and output parameters</xs : documentation >                 < /xs : annotation >              < /xs : element >              < xs : element name=\"inputs \" type=\"pm : parametergroup \" minoccurs=\"1 \" maxoccurs=\"1 \" >                 < xs : annotation >                    < xs : documentation > the input parameters for a service.</xs : documentation >                 < /xs : annotation >              < /xs : element >              < xs : element name=\"outputs \" type=\"pm : parametergroup \" minoccurs=\"1 \" maxoccurs=\"1 \" >                 < xs : annotation >                    < xs : documentation > the parameters output from a service.</xs : documentation >                 < /xs : annotation >              < /xs : element >           < /xs : sequence >        < /xs : complextype >        < ! -- keys to ensure that parameter names are unique -- >        < xs : unique name=\"keyname \" >           <",
    "xs : selector xpath=\"./pm : parameterlist / pm : parameter\"/ >",
    "< xs : field xpath=\"pm : name\"/ >        < /xs : unique >        < xs : keyref name=\"expressionkeyref \" refer=\"pm : keyname \" >           < xs : selector xpath=\".//pm : parameterref\"/ >",
    "< xs : field xpath=\"pm : parametername\"/ >        < /xs : keyref >       < /xs : element >     < xs : complextype name=\"parameters \" >        < xs : annotation >           < xs :",
    "documentation > the list of possible parameters both input and output.</xs : documentation >        < /xs : annotation >        < xs : sequence >           < xs : element name=\"parameter \" type=\"pm : singleparameter \" minoccurs=\"1 \" maxoccurs=\"unbounded \" >           < /xs : element >        < /xs : sequence >     < /xs : complextype >     < xs : complextype name=\"parameterreference \" >        < xs : annotation >           < xs : documentation > a reference to a parameter</xs : documentation >        < /xs : annotation >        < xs : attribute name=\"parametername \" type=\"xs : string \" >           < xs : annotation >",
    "< xs : documentation > the name of the parameter being referred to.</xs : documentation >           < /xs : annotation >        < /xs : attribute >     < /xs : complextype >     < xs : complextype name=\"description \" >        < xs : sequence >           < xs : element name=\"humanreadabledescription \" type=\"xs : string\"/ >",
    "< /xs : sequence >     < /xs : complextype >       < xs : simpletype name=\"parameterdependency \" >        < xs : annotation >           < xs : documentation > the types that a parameter may have.</xs : documentation >           < xs : documentation >              flag for saying if a parameter is required or optional              < /xs : documentation >        < /xs : annotation >        < xs : restriction base=\"xs : string \" >           < xs : enumeration value=\"required \" >              < xs : annotation >",
    "< xs : documentation > the parameter must be provided by user.</xs : documentation >",
    "< /xs : annotation >           < /xs : enumeration >           < xs : enumeration value=\"optional \" >              <",
    "xs : annotation >                 < xs : documentation > the parameter is optional.</xs : documentation >              < /xs : annotation >           < /xs : enumeration >        < /xs : restriction >     < /xs : simpletype >       < xs : simpletype name=\"parametertype \" >        < xs : annotation >           < xs : documentation > the types that a parameter may have.</xs : documentation >           < xs : documentation >              note that the types are made more specific by using the ucd attribute of the parameter definition .",
    "in particular it is expected that a parameter model library would be able to recognise the more specific types associated with the following ucds              < ul >                < li > pos - to provide a suitable widget for positions</li >",
    "< li > time - to provide suitable widgets for times and durations</li >              < /ul",
    ">           < /xs : documentation >        < /xs : annotation >        < xs : restriction base=\"xs : string \" >           < xs : enumeration value=\"boolean \" >              < xs : annotation >",
    "< xs : documentation > a representation of a boolean - e.g. true / false</xs : documentation >              < /xs : annotation >           < /xs : enumeration >           < xs : enumeration value=\"string \" >",
    "< xs : annotation >                 < xs : documentation > data that can be interpreted as text.</xs : documentation >",
    "< /xs : annotation >           < /xs : enumeration >           < xs : enumeration value=\"integer\"/ >           < xs : enumeration value=\"real\"/ >           < xs : enumeration value=\"date\"/ >        < /xs : restriction >",
    "< /xs : simpletype >       < xs : simpletype name=\"functiontype \" >        < xs : restriction base=\"xs : string \" >",
    "< xs : enumeration value=\"size\"/ >           < xs : enumeration value=\"abs\"/ >           < xs : enumeration value=\"sin\"/ >           < xs : enumeration value=\"cos\"/ >",
    "< xs : enumeration value=\"tan\"/ >           < xs : enumeration value=\"asin\"/ >           < xs : enumeration value=\"acos\"/ >           < xs : enumeration value=\"atan\"/ >           < xs : enumeration value=\"exp\"/ >           < xs : enumeration value=\"log\"/ >           < xs : enumeration value=\"sum\"/ >           < xs : enumeration value=\"product\"/ >        < /xs : restriction >     < /xs : simpletype >",
    "< xs : simpletype name=\"operationtype \" >        < xs : restriction base=\"xs : string \" >",
    "< xs : enumeration value=\"plus\"/ >           < xs : enumeration value=\"minus\"/ >           < xs : enumeration value=\"multiply\"/ >           < xs : enumeration value=\"divide\"/ >           < xs : enumeration value=\"scalar\"/ >        < /xs : restriction >",
    "< /xs : simpletype >       < xs : complextype name=\"singleparameter \" >",
    "< xs : sequence >           < xs : element name=\"name \" type=\"xs : string \" minoccurs=\"1 \" maxoccurs=\"1 \" > < /xs : element >           < xs : element name=\"parametertype \" type=\"pm : parametertype \" minoccurs=\"1 \" maxoccurs=\"1 \" > < /xs : element >           < xs : element name=\"ucd \" type=\"xs : string \" maxoccurs=\"1 \" minoccurs=\"0 \" > < /xs : element >           < xs : element name=\"utype \" type=\"xs : string \" maxoccurs=\"1 \" minoccurs=\"0\"/ >           < xs : element name=\"skosconcept \" type=\"xs : string \" minoccurs=\"0 \" maxoccurs=\"1\"/ >           < xs : element name=\"unit \" type=\"xs : string \" minoccurs=\"0 \" maxoccurs=\"1\"/ >           < xs : element name=\"precision \" type=\"pm : expression \" minoccurs=\"0 \" maxoccurs=\"1\"/ >",
    "< xs : element name=\"dimension \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"1\"/ >",
    "< /xs : sequence >        < xs : attribute name=\"dependency \" type=\"pm : parameterdependency \" > < /xs : attribute >",
    "< /xs : complextype >       < xs : complextype name=\"parametergroup \" >",
    "< xs : annotation >           < xs : documentation > a logical grouping of parameters</xs : documentation >",
    "< /xs : annotation >        < xs : sequence >           < xs : element name=\"name \" type=\"xs : string \" maxoccurs=\"1 \" minoccurs=\"1 \" >              < xs : annotation >                 < xs : documentation > the name of the parameter group which can be used for display</xs : documentation >              < /xs : annotation >           < /xs : element >           < xs : element name=\"parameterref \" type=\"pm : parameterreference \" minoccurs=\"0 \"              maxoccurs=\"unbounded \" >              < xs : annotation >                 < xs : documentation > the list of parameters that are in the group</xs : documentation >              < /xs : annotation >           < /xs : element >           < xs : element name=\"constraintongroup \" type=\"pm : constraintongroup \" maxoccurs=\"1 \"              minoccurs=\"0 \" >              < xs : annotation >",
    "< xs : documentation > the constraints on parameters in the group</xs : documentation >              < /xs : annotation >           < /xs : element >",
    "< xs : element name=\"parametergroup \" type=\"pm : parametergroup \" minoccurs=\"0 \"              maxoccurs=\"unbounded \" >              < xs : annotation >                 <",
    "xs : documentation > possibly nested parameter groups</xs : documentation >",
    "< /xs : annotation >           < /xs : element >           < xs : element name=\"active \" type=\"pm : whenconditionalstatement \" maxoccurs=\"1 \" minoccurs=\"0 \" >              < xs : annotation >                 < xs : documentation > it the goup active ?",
    "i.e. should it be displayed - the default is yes if there is no active element , otherwise it is the result of the evaluation of the when conditional statement.</xs : documentation >              < /xs : annotation >           < /xs : element >        < /xs : sequence >",
    "< /xs : complextype >       < xs : complextype name=\"constraintongroup \" >        < xs : annotation >           < xs : documentation > the possible constraints on the parameters in a group</xs : documentation >",
    "< /xs : annotation >        < xs : sequence >           < xs : element name=\"conditionalstatement \" type=\"pm : conditionalstatement \" minoccurs=\"0 \"              maxoccurs=\"unbounded\"/ >",
    "< /xs : sequence >     < /xs : complextype >       < xs : complextype abstract=\"true \" name=\"conditionalstatement \" >",
    "< xs : sequence >           <",
    "xs : element name=\"comment \" type=\"xs :",
    "string \" minoccurs=\"1 \" maxoccurs=\"1\"/ >        < /xs : sequence >     < /xs : complextype >       < xs : complextype name=\"ifthenconditionalstatement \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : conditionalstatement \" >              < xs : sequence >                 < xs : element name=\"if \" type=\"pm : if \" minoccurs=\"1 \" maxoccurs=\"1\"/ >                 < xs : element name=\"then \" type=\"pm : then \" minoccurs=\"1 \" maxoccurs=\"1\"/ >",
    "< /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"alwaysconditionalstatement \" >        < xs : complexcontent >           < xs : extension base=\"pm : conditionalstatement \" >              < xs : sequence >                 < xs : element name=\"always \" type=\"pm : always \" minoccurs=\"1 \" maxoccurs=\"1\"/ >              < /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >       < xs : complextype name=\"whenconditionalstatement \" >        < xs : annotation >           < xs : documentation >              a statement that has only a true or a false value           < /xs : documentation >        < /xs : annotation >        < xs : complexcontent >",
    "< xs : extension base=\"pm : conditionalstatement \" >              < xs : sequence >                 < xs : element name=\"when \" type=\"pm : when\"/ >",
    "< /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype abstract=\"true \" name=\"logicalconnector \" >",
    "< xs : sequence >           < xs : element name=\"criterion \" type=\"pm : abstractcriterion \" minoccurs=\"1 \" maxoccurs=\"1\"/ >",
    "< /xs : sequence >     < /xs : complextype >           < xs : complextype abstract=\"true \" name=\"conditionalclause \" >",
    "< xs : sequence >           < xs : element name=\"criterion \" type=\"pm : abstractcriterion \" minoccurs=\"1 \" maxoccurs=\"1 \" >           < /xs : element >",
    "< /xs : sequence >     < /xs : complextype >         < xs : complextype name=\"if \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : conditionalclause\"/ >        < /xs : complexcontent >     < /xs : complextype >",
    "< xs : complextype name=\"then \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : conditionalclause\"/ >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"when \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : conditionalclause\"/ >        < /xs : complexcontent >",
    "< /xs : complextype >     < xs : complextype abstract=\"true \" name=\"abstractcondition\"/ >     < xs : complextype name=\"isnull \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition\"/ >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"isinteger \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition \" >",
    "< /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"isreal \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition \" > < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"belongtoset \" >        < xs : annotation >",
    "< xs : documentation > the value must belong to a set</xs : documentation >        < /xs : annotation >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition \" >              < xs : sequence >                 < xs : element name=\"value \" type=\"pm : expression \" minoccurs=\"1 \" maxoccurs=\"unbounded\"/ >",
    "< /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"valuelargerthan \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition \" >              < xs : sequence >                 < xs : element name=\"value \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"1\"/ >",
    "< /xs : sequence >              < xs : attribute name=\"reached \" type=\"xs : boolean\"/ >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"valuesmallerthan \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition \" >              < xs : sequence >                 < xs : element name=\"value \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"1\"/ >",
    "< /xs : sequence >              < xs : attribute name=\"reached \" type=\"xs : boolean\"/ >           < /xs : extension >",
    "< /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"valueinrange \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition \" >              < xs : sequence >                 < xs : element name=\"sup \" type=\"pm : valuesmallerthan \" maxoccurs=\"1 \" minoccurs=\"1\"/ >                 < xs : element name=\"inf \" type=\"pm : valuelargerthan \" maxoccurs=\"1 \" minoccurs=\"1\"/ >",
    "< /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"valuedifferentfrom \" >        < xs : complexcontent >           < xs : extension base=\"pm : abstractcondition \" >",
    "< xs : sequence >                 < xs : element name=\"value \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"1\"/ >",
    "< /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"defaultvalue \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcondition \" >",
    "< xs : sequence >                 < xs : element name=\"value \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"1\"/ >              < /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >       < xs : complextype abstract=\"true \" name=\"abstractcriterion \" >",
    "< xs : sequence >           < xs : element name=\"expression \" type=\"pm : expression \" minoccurs=\"1 \" maxoccurs=\"1 \" > < /xs : element >           < xs : element name=\"conditiontype \" type=\"pm : abstractcondition \" minoccurs=\"1 \" maxoccurs=\"1\"/ >           < xs : element name=\"logicalconnector \" type=\"pm : logicalconnector \" maxoccurs=\"1 \" minoccurs=\"0 \"           / >",
    "< /xs : sequence >     < /xs : complextype >         < xs : complextype name=\"parenthesiscriterion \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : abstractcriterion \" >              < xs : sequence >                 < xs : element name=\"externallogicalconnector \" type=\"pm : logicalconnector \" maxoccurs=\"1 \"                    minoccurs=\"0\"/ >",
    "< /xs : sequence >           < /xs : extension >",
    "< /xs : complexcontent >     < /xs : complextype >       < xs : complextype name=\"function \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : expression \" >              < xs : sequence >                 < xs : element name=\"expression \" type=\"pm : expression\"/ >",
    "< /xs : sequence >              < xs : attribute name=\"functionname \" type=\"pm : functiontype\"/ >           < /xs : extension >",
    "< /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"operation \" >",
    "< xs : sequence >           < xs : element name=\"expression \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"1\"/ >",
    "< /xs : sequence >        < xs : attribute name=\"operationtype \" type=\"pm : operationtype \" > < /xs : attribute >     < /xs : complextype >     < xs : complextype abstract=\"true \" name=\"expression \" > < /xs : complextype >     < xs : complextype name=\"parenthesiscontent \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : expression \" >              < xs : sequence >                 < xs : element name=\"expression \" type=\"pm : expression \" minoccurs=\"1 \" maxoccurs=\"1\"/ >                 < xs : element name=\"power \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"0\"/ >                 < xs : element name=\"operation \" type=\"pm : operation \" maxoccurs=\"1 \" minoccurs=\"0\"/ >",
    "< /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"atomicparameterexpression \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : expression \" >              < xs : sequence >                 < xs : element name=\"parameterref \" type=\"pm : parameterreference \" maxoccurs=\"1 \"                    minoccurs=\"1 \" > < /xs : element >                 < xs : element name=\"power \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"0\"/ >                 < xs : element name=\"operation \" type=\"pm : operation \" maxoccurs=\"1 \" minoccurs=\"0\"/ >              < /xs : sequence >           < /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"atomicconstantexpression \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : expression \" >              < xs : sequence >                 < xs : element name=\"constant \" type=\"xs : string \" maxoccurs=\"unbounded \" minoccurs=\"1\"/ >                 < xs : element name=\"power \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"0\"/ >                 < xs : element name=\"operation \" type=\"pm : operation \" maxoccurs=\"1 \" minoccurs=\"0\"/ >",
    "< /xs : sequence >              < xs : attribute name=\"constanttype \" type=\"pm : parametertype\"/ >",
    "< /xs : extension >        < /xs : complexcontent >     < /xs : complextype >     < xs : complextype name=\"functionexpression \" >        < xs : complexcontent >",
    "< xs : extension base=\"pm : expression \" >              < xs : sequence >                 < xs : element name=\"function \" type=\"pm : function \" maxoccurs=\"1 \" minoccurs=\"1\"/ >                 < xs : element name=\"power \" type=\"pm : expression \" maxoccurs=\"1 \" minoccurs=\"0\"/ >                 < xs : element name=\"operation \" type=\"pm : operation \" maxoccurs=\"1 \" minoccurs=\"0\"/ >",
    "< /xs : sequence >           < /xs : extension >",
    "< /xs : complexcontent >     < /xs : complextype > < /xs : schema > ...."
  ],
  "abstract_text": [
    "<S> this document discusses the definition of the _ parameter description language _ ( pdl ) . in this language parameters </S>",
    "<S> are described in a rigorous data model . with no loss of generality </S>",
    "<S> , we will represent this data model using xml . </S>",
    "<S> + it intends to be a expressive language for self - descriptive web services exposing the semantic nature of input and output parameters , as well as all necessary complex constraints . </S>",
    "<S> pdl is a step forward towards true web services interoperability . </S>"
  ]
}