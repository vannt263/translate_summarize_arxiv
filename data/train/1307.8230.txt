{
  "article_text": [
    "the advancements in the physical layer technology has enabled cellular networks ( e.g. , 3 g and 4 g deployments like mobile wimax , lte advanced ) and wlans ( e.g. , ieee 802.11n ) support hundreds of megabits per second . however , with more and more users now accessing the internet using wireless as the last mile , there is a continuous necessity to judiciously use the available network resources .",
    "cross - layer strategies have become extremely helpful in supporting the ever increasing demand for bandwidth and stringent qos .",
    "opportunistic scheduling and multiuser diversity ( see @xcite ) is one such popular cross - layer technique recommended in current cellular standards and in ad hoc deployments for increasing the available network capacity . unlike the wired channel , the wireless channel",
    "will always be constrained by fading and interference .",
    "multiuser diversity enhances the network performance by wisely scheduling the users when their relative channel conditions are better .",
    "opportunistic scheduling is known to significantly improve the network performance , especially for elastic traffic with loose delay constraints .",
    "opportunistic scheduling involves learning the channel state information of the contending users and scheduling the user with a relatively better channel .",
    "centralized schemes like polling incur a lot of overhead and may not scale well with the number of users . for such schemes , the rate region of the channel and the set of feasible qos",
    "are well known ( see e.g. , @xcite ) .",
    "the performance of the system with partial channel state information was studied in @xcite .",
    "there is a lot of interest in developing distributed and semi - distributed algorithms for opportunistic scheduling .",
    "one popular technique has been to adjust the backoff parameters of the nodes based on their instantaneous channel gain .",
    "a number of works have studied the optimal performance and the achievable throughput of such strategies ( see e.g. , @xcite ) . in @xcite ,",
    "the authors propose a splitting algorithm that resolves contention with feedback from the base station .",
    "the distributed strategies incur losses due to collisions but are known to very efficient especially for networks with a large number of users .",
    "in this work , we are interested in the contention resolution problem of resolving the identity of the user with the highest channel gain .",
    "we formulate the contention resolution problem for opportunistic scheduling as identifying a random threshold ( channel gain ) that separates the best channel from the other samples .",
    "we show that the average delay to resolve contention is related to the entropy of the threshold random variable .",
    "we illustrate our formulation by studying the opportunistic splitting algorithm @xcite .",
    "we show that osa is a maximal probability allocation scheme and we conjecture that mpa is an entropy minimizing strategy and a delay minimizing strategy as well . in this work",
    ", we have studied opportunistic scheduling for @xmath0 users with i.i.d .",
    "channel gains .",
    "we believe that our formulation of contention resolution as a source code can help develop optimal strategies for a variety of other network scenarios as well .",
    "the idea of splitting with ternary feedback was originally proposed for scheduling users in aloha type networks ( see @xcite ) . in @xcite ,",
    "arrow et al . , study a problem of resolving the user with the highest sample value with binary type questions .",
    "the optimal strategy was studied when accurate feedback of the number of contending users involved in every slot was available .",
    "the near optimality of greedy strategies ( like mpa studied in section  [ sec : osa_source_coding ] ) was also discussed in @xcite . in @xcite , anantharam and varaiya",
    "prove the optimality of binary type questions to minimize the average delay in @xcite .",
    "the performance of binary type questions in the presence of ternary feedback was first reported in @xcite .",
    "the optimal thresholds were obtained and the relevance to opportunistic scheduling was discussed . in @xcite ,",
    "qin and berry study splitting with ternary feedback for opportunistic scheduling for i.i.d . wireless channel .",
    "we have briefly described the algorithm in section  [ sec : osa ] ; we motivate our formulation of contention resolution as a source coding problem by studying the opportunistic splitting algorithm presented in @xcite .",
    "splitting algorithms have been studied for other network and channel scenarios as well . in @xcite ,",
    "kessler and sidi study splitting algorithms for noisy channel feedback . in @xcite ,",
    "qin and berry report the performance of splitting for different notions of fairness . in @xcite , yu and giannakis",
    "study the performance of splitting with successive interference cancellation in a tree algorithm . in this work ,",
    "we restrict to i.i.d .",
    "wireless channel under ideal channel assumptions ; our aim is to present an alternate formulation for contention resolution using a source coding framework .",
    "there are number of works concerning distributed opportunistic feedback schemes for wireless systems ( see e.g. , @xcite ) . in @xcite , qin and berry proposes a channel aware aloha and characterizes its performance . in @xcite , patil and de veciana discuss about reducing feedback for opportunistic scheduling to support best effort and real time traffic . in this work ,",
    "we consider a semi - distributed framework where the base station helps resolve contention with feedback .      in section  [ sec : network_model ]",
    ", we describe the network model and the opportunistic resolution problem . in section  [ sec : osa ] , we briefly describe the opportunistic splitting algorithm from @xcite and motivate our formulation . in section  [ sec : source_coding ] , we present contention resolution problem for opportunistic scheduling as a source coding problem . in section  [ sec : osa_source_coding ] , we characterize osa using a maximal probability allocation scheme and study its performance . in section  [ sec : two_examples ] , we discuss the applicability of our framework for other network scenarios and in section  [ sec : conclusion ] , we conclude the paper and discuss future work .",
    "we consider the downlink wireless channel of a single cell of a cellular data network ( or of a single cell wlan in an infrastructure setup ) . a fixed number of users , @xmath0 , share the slotted wireless channel over time .",
    "we assume that the channel gain between the base station and the wireless users is independent and identically distributed with a common continuous distribution @xmath1 .",
    "we also assume that the users have knowledge of the common channel distribution @xmath1 and the number of users in the network , @xmath0 .",
    "let @xmath2 represent the vector channel gain of the users in slot @xmath3 .",
    "we assume that every user @xmath4 would know its instantaneous channel gain @xmath5 at the beginning of every slot , but that information is not available with other users in the network , including the base station .",
    "the channel state information @xmath5 can be made available to the user @xmath4 by the transmission of a pilot signal by the base station at the beginning of the slot .",
    "the base station seeks to identify and schedule the user with the highest channel gain in every slot ( opportunistic scheduling ) , i.e. , the base station seeks to schedule @xmath6 in slot @xmath3 . define @xmath7 , the cumulative distribution value in the slot @xmath3 .",
    "then , the vector @xmath8 is i.i.d .",
    "uniform in @xmath9 $ ] for any channel distribution @xmath1 .",
    "further , the contention resolution problem can equivalently be described as @xmath10 hence , without loss of generality , we will assume that @xmath1 is uniform in @xmath9 $ ] and consider @xmath8 as the channel gain variables .",
    "the base station resolves the identity of the user with the highest channel gain by coordinating the contention resolution process and by providing necessary feedback to aid in the resolution .",
    "we assume that a time slot comprises of @xmath11 mini slots , where the mini slots are used to resolve the contention .",
    "for example , the users can transmit mac packets ( like rts / cts in ieee 802.11 dcf ) , possibly with some channel information , to the base station in a minislot and the base station can feed back the state of the contention in that slot .",
    "we assume that the base station feeds back the result of the contention within the minislot and the feedback of the base station is received by all the nodes in the network without any error . at the end of the contention process",
    ", the user that succeeded in the contention is permitted to transmit data in the remainder of the slot . in this setup , an objective of the base station would be to minimize the average number of minislots required to identify the user with the highest channel gain .",
    "in this section , we briefly describe a contention resolution strategy , opportunistic splitting algorithm ( osa ) from @xcite , for a fixed number of users @xmath0 and for i.i.d .",
    "block fading wireless channel .",
    "polling for opportunistic scheduling requires @xmath0 minislots to identify the user with the highest channel gain .",
    "osa is a distributed medium access control protocol that uses ternary feedback to identify the user with the best channel with a constant overhead .",
    "a time slot is assumed to comprise of a maximum of @xmath11 minislots which are used for contention resolution . in every minislot",
    ", osa describes a continuous range in @xmath9 $ ] ( the sample space of the uniform random variable ) , @xmath12 \\subset [ 0,1]$ ] ; only the user(s ) whose channel gain values fall within the range will transmit contention resolution packets in the minislot . at the end of the minislot , every user receives a feedback from the base station of @xmath13 or @xmath14 or @xmath15 , indicating if the minislot was idle ( no transmission ) , contained a successful packet transmission or involved an error due to collision , respectively . if the feedback is @xmath14 , the lone transmitter is declared the winner of the contention and is permitted to transmit data for the remaining duration of the slot . if the feedback is @xmath13 or @xmath15 , then the range is suitably adjusted and the contention resolution process continues until either a success occurs or the time - slot ends .",
    "the following pseudo - code describes the osa algorithm for a fixed number of users @xmath0 and for i.i.d .",
    "channel gain ( see @xcite for more details ) . in the pseudo - code",
    ", @xmath16 denotes the feedback in a minislot and @xmath17 is the count of the number of minislots used for contention resolution .",
    "initialize : @xmath18 initialize : @xmath19 and @xmath20 @xmath21 feedback from @xmath12 $ ] @xmath22 @xmath23 @xmath24 @xmath25 @xmath26 @xmath27    [ rem : osa ] the key features of the opportunistic splitting algorithm are the following .    1 .   osa aims to maximize the chances of success in every minislot .",
    "for example , with @xmath0 users independently and uniformly distributed in @xmath9 $ ] , the probability of success ( identifying the user with the best channel ) in a minislot with the range @xmath28 $ ] , @xmath29 , is maximized at @xmath30 .",
    "in fact , osa begins contention resolution with the range @xmath31 $ ] .",
    "when a collision occurs , osa assumes that the most likely scenario is that two users are involved in the collision , and hence , it updates the threshold from @xmath12 $ ] to @xmath32 $ ] ( the optimal strategy if there are only two contending users ) .",
    "osa is an effective contention resolution strategy with the average number of minislots required to resolve contention known to be less than 2.5070 slots , independent of the number of users and channel gain distribution .      in this section",
    ", we will discuss in detail the opportunistic splitting algorithm for the two user case .",
    "the example will help us motivate the source coding framework described in the section  [ sec : source_coding ] .",
    "let @xmath33 and let @xmath34 correspond to the vector channel gain of the two users in a slot .",
    "define @xmath35 and @xmath36 .",
    "then , @xmath37 is the ordered pair of the channel gain values where @xmath38 .",
    "osa initializes with @xmath39 and @xmath40 . in the first minislot , only the user(s ) with @xmath41 transmit a control packet .",
    "a success ( a single transmission ) happens in the first minislot iff ( @xmath42 ) or ( @xmath43 ) , i.e. , a success happens iff @xmath44 .",
    "the probability of the event can easily be computed and is equal to @xmath45 . * thus , contention is resolved in the first minislot whenever @xmath46 and the probability of the event is @xmath45 ; the threshold that resolves the contention successfully for the set @xmath47 is @xmath45 and the base station feeds back a @xmath14 in this case*. in the first minislot , an error due to collision occurs iff @xmath48 and the slot is left idle iff @xmath49 .",
    "suppose that the feedback in the first minislot is @xmath15 .",
    "then , osa updates the variables as @xmath50 and @xmath40 . in the second minislot , only the user(s ) with @xmath51 transmit a control packet .",
    "a success happens now iff @xmath52 and the conditional probability of the event ( conditioned upon a collision in the first minislot ) is @xmath45 . *",
    "thus , contention is resolved in the second minislot whenever @xmath53 and the probability of the event is @xmath54 ; the threshold that resolves the contention successfully for the set @xmath55 is @xmath56 and the base station feeds back a @xmath57 in the first two minislots*.    .the probability distribution on the threshold / feedback corresponding to osa for @xmath33 users . [ cols=\"^,^,^,^,^\",options=\"header \" , ]     in table  [ tab : osa_two_users ] , we have listed sets of ordered two tuples along with the threshold ( @xmath58 ) for osa that resolves the set . the feedback from the base station corresponding to the threshold ( equivalently , the set ) and the probability of the threshold ( equivalently , the feedback ) is also listed in the table .",
    "[ rem : osa_2 ] we make the following observations from the table  [ tab : osa_two_users ] .    1 .",
    "the threshold ( @xmath58 ) that resolves @xmath59 is always such that @xmath60 , i.e. , osa resolves contention by identifying a threshold between the user channel gains .",
    "the threshold is fed back to the users in ternary alphabet @xmath61 .",
    "the lone user with a channel gain strictly greater than the threshold value fed back by the base station would learn about its successful contention resolution and the other users would refrain from transmitting any further in the slot",
    "the feedback for a threshold @xmath58 is , in fact , the binary expansion of @xmath58 ( when feedback @xmath15 and feedback @xmath14 is mapped to @xmath14 and feedback @xmath13 is mapped to @xmath13 ) .",
    "the feedback @xmath14 is equivalent to feedback @xmath15 followed by an eoc ( end of contention ) in this case .",
    "3 .   the thresholds that resolve contention for osa form a countable set with a valid probability distribution ( the probabilities sum up to @xmath14 ) .",
    "the average delay to resolve contention is equal to the average length of the feedback , which is a function of the probability distribution of the threshold random variable .",
    "the probability distribution is a function only of the contention resolution algorithm ( for the i.i.d .",
    "an optimal choice of the thresholds can minimize the average description length of the feedback and the delay to resolve contention .    in section  [ sec : source_coding ]",
    ", we will propose a general framework for contention resolution for opportunistic scheduling motivated by the above observations .",
    "in this section , we will formulate contention resolution for opportunistic scheduling with ternary feedback as identifying a random threshold ( channel gain ) that separates the best channel from the other samples .",
    "let @xmath62 correspond to the vector of i.i.d .",
    "channel gain values in a slot and let @xmath63 be the ordered n - tuple of channel gain values of the @xmath0 users such that @xmath64 .",
    "the base station seeks to identify @xmath65 , or , equivalently , @xmath66 in the slot .",
    "we aim to resolve the contention by identifying a threshold @xmath67 such that @xmath68 ; the base station will feedback the threshold @xmath67 using ternary alphabet of @xmath69 and @xmath15 which aids in resolving the contention . @xmath70 and @xmath71 are random variables , and hence , the threshold @xmath67 will also be a random variable . obviously , the uncertainty in @xmath67 would be a measure of the average description length of the threshold / feedback .",
    "let @xmath72 \\times [ 0,1 ] \\rightarrow [ 0,1]$ ] be a code ( an allocation ) , which assigns for every 2-tuple @xmath73 an element @xmath74 $ ] , such that @xmath68 .",
    "let @xmath67 have a discrete distribution , i.e. , let there exist a set @xmath75 and a set of probabilities @xmath76 such that @xmath77 , and @xmath78 . then , the entropy of the random variable @xmath67 ( equivalently , the code @xmath79 ) is defined as @xmath80 clearly , the entropy would approximate the average length of the feedback required for a contention resolution algorithm that resolves a two tuple @xmath73 with threshold @xmath81 .",
    "the code @xmath82 can , in general , take a continuous sample space , all of @xmath9 $ ] and a useful description of entropy may not be possible in such cases . for continuous distribution @xmath1 , @xmath83 , and for every @xmath84 such that @xmath85 , there is some rational @xmath86 such that @xmath87 .",
    "hence , we can always identify a code with a countable sample space for any continuous @xmath1 and define its entropy .",
    "further , the feedback from the base station for any contention resolution algorithm is a finite sequence in ternary alphabet .",
    "hence , we will always seek a code with a discrete distribution for @xmath67 .",
    "in such a framework , our objective could be to identify the code with the minimum entropy .    1",
    ".   the maximal probability allocation scheme of osa ( see section  [ sec : osa_source_coding ] ) provides us a discrete distribution for the random threshold @xmath67 with a finite entropy .",
    "2 .   the ternary description of the threshold does not use all the alphabets completely .",
    "for example , the alphabet @xmath14 appears only at the end of every code word ( eoc ) .",
    "further , the code is non - singular but need not be uniquely decodable as the codes are decoded one at a time .",
    "hence , the entropy of the threshold need not exactly measure the average feedback length ( and the average delay ) .",
    "we have assumed that the code @xmath79 is a function only of the two tuple @xmath84 .",
    "for correlated wireless channels and for arbitrary feedback schemes , we may need to consider @xmath79 as a function of the n - tuple @xmath88 .",
    "the opportunistic splitting algorithm with ternary feedback identifies a threshold @xmath67 for every @xmath0 tuple ( @xmath89 such that @xmath68 .",
    "osa chooses the thresholds in a minislot such that the probability of success is maximized in the minislot .",
    "the following pseudo - code describes the code @xmath90 corresponding to osa .",
    "@xmath91 initialize @xmath20 a ) define @xmath92 as @xmath93 } { \\mathsf pr}(y_{n-1 } \\leq y <",
    "y_n | ( y_{n-1 } , y_n ) \\in \\omega_{()})\\ ] ] b ) define @xmath94 as @xmath95 c ) update @xmath96 as @xmath97 @xmath27    we define @xmath96 as the set of all @xmath98 tuples @xmath73 .",
    "the code begins with identifying a threshold @xmath99 that maximizes the probability of success in @xmath96 .",
    "every two tuple in @xmath96 that contains the threshold @xmath99 is assigned to be resolved by the threshold ; we define the above set as @xmath100 , the set resolved by the threshold @xmath99 .",
    "the set @xmath100 is now removed from @xmath96 and the procedure continues . define @xmath101 as the set of all thresholds defined by the above pseudo - code . from the construction of the above code , we see that , @xmath102 for this reason , we call osa as the maximal probability allocation code ( mpa ) .",
    "the following theorem from @xcite identifies the exact threshold of osa for a given range @xmath103 $ ] .",
    "given @xmath0 users and thresholds @xmath12 $ ] ( i.e. , @xmath104 ) , the @xmath105 that maximizes the probability of success in the interval @xmath12 $ ] is the unique stationary point of @xmath106 .    * remarks *    1 .   for any @xmath0 , and with @xmath107 ,",
    "the above expression becomes , @xmath108 .",
    "the expression is maximized at @xmath109 .",
    "hence , for any @xmath0 , @xmath110 .",
    "2 .   as an example , for @xmath33 , repeating the above procedure will yield us @xmath111 .",
    "note that the above values are in fact the thresholds reported in table  [ tab : osa_two_users ] .",
    "3 .   in remark",
    "[ rem : osa_2 ] , for the @xmath33 case , we noticed that the feedback from the base station corresponding to a threshold can be viewed as the binary representation of the threshold itself .",
    "for general @xmath0 , the feedback from the base station can still be viewed as the binary representation of the threshold , however , with the weights corresponding to a position computed from the thresholds @xmath112 obtained from the pseudo - code .",
    "for example , the weight of the first position will be equal to @xmath99 .    .",
    "we have also plotted the entropy of the threshold random variable corresponding to mpa . ]    in figure  [ fig : osa_vs_mpa ] , we plot the average delay performance of osa ( as described in section  [ sec : osa ] ) and the maximal probability allocation code .",
    "as expected , the performance of osa and mpa are similar and in fact , mpa performs better than osa as it identifies the optimal thresholds without any approximations ( see remark  [ rem : osa ] ) .",
    "we have also plotted in the figure  [ fig : osa_vs_mpa ] , the entropy of the maximal probability allocation code in bits . as expected , the entropy of the random variable reflects the average delay performance of the contention resolution algorithm as a function of @xmath0 very well .",
    "entropy is a concave function of the distribution .",
    "the maximal probability allocation code identifies a local minima in the space of probability distributions . from limited numerical work (",
    "not reported in this paper ) , we conjecture that the maximal probability allocation code is a globally entropy minimizing strategy as well . the following theorem proves the optimality of mpa for the @xmath33 case .",
    "mpa is a delay minimizing strategy and an entropy minimizing strategy for @xmath33 case .",
    "let @xmath113 $ ] be the contention range in the first minislot for the delay minimizing strategy .",
    "conditioning on the first minislot , the optimal average delay @xmath114 can be written as @xmath115 the optimal solution of @xmath114 is @xmath98 and is obtained at @xmath116 .",
    "we note from figure  [ fig : osa_vs_mpa ] that the average delay of mpa is @xmath98 and hence , mpa is a delay optimal strategy .",
    "let @xmath117 be the discrete distribution that minimizes the entropy of the code for @xmath33 case .",
    "we will define @xmath118 as the minimum entropy .",
    "then , conditioning on the first minislot ( as before ) , we have , @xmath119 where , @xmath120 substituting in the above expression and simplifying it , we have , @xmath121 the above expression is minimized at @xmath116 and the minimum entropy is @xmath122 . from figure",
    "[ fig : osa_vs_mpa ] , we note that the entropy of the threshold random variable for mpa is @xmath122 and hence , mpa is an entropy minimizing strategy as well .",
    "in this section , we discuss contention resolution for two different channel scenarios , a constant channel and a correlated channel .",
    "we compare the performance of osa / mpa with the source - coding framework and illustrate the generality of our proposed technique .",
    "we consider a downlink wireless channel with @xmath122 users .",
    "we assume that the channel gain is a constant , say @xmath14 unit , for all users and for all time slots .",
    "the objective of the contention resolution algorithm is to identify a user from the set of @xmath122 users ( akin to a distributed medium access problem ) .",
    "suppose that the users pick a uniform random variable , @xmath123 , in @xmath9 $ ] independent of the other users .",
    "then , osa can be used to resolve contention among the @xmath122 users by identifying the user with the largest value of @xmath123 ; this is a popular strategy to apply osa for discrete channel distributions .",
    "the average number of slots required to resolve contention using osa is then @xmath124 slots ( obtained from simulations ) .",
    "the osa , in every slot , attempts to identify a @xmath105 such that the probability of a unique user in the interval @xmath125 $ ] is maximized . here , in this example , we note that it is more appropriate to identify a @xmath105 that maximizes the probability of success either in @xmath125 $ ] or in @xmath126 .",
    "the following algorithm is a contention resolution strategy optimized for this problem .",
    "initialize : @xmath127 initialize : @xmath128 @xmath21 feedback for interval @xmath103 $ ] @xmath27 @xmath21 feedback from interval @xmath129 @xmath22 @xmath130 @xmath24 @xmath131 @xmath27 ( @xmath132 )    using simulations , we observe that the average effort needed to resolve contention is @xmath133 slots much less than the @xmath124 slots required by osa .",
    "the proposed algorithm makes use of the fact that , in the event of a collision , the probability that two users are involved is significantly higher than the probability that three users are involved in the collision .",
    "the contention resolution problem was formulated as identifying a random threshold @xmath67 between @xmath134 and @xmath135 ( @xmath136 ) or between @xmath135 and @xmath137 ( @xmath138 ) .",
    "the entropy of the proposed strategy was observed to be strictly smaller than the entropy of the maximal probability allocation scheme of osa .",
    "we consider a wireless downlink channel with @xmath33 users .",
    "we assume that the wireless channel of the two users is correlated with the sample space , @xmath139 and with the joint probabilities @xmath140 , where @xmath141 .",
    "osa would maximize the probability of success in every minislot and hence , would consider the thresholds in the following sequence ( if we restrict to integer thresholds ) @xmath142 and @xmath122 .",
    "the average number of minislots required to resolve contention with osa / mpa is @xmath143 . in general ,",
    "if there are @xmath17 channel states , then the average number of slots required to resolve contention is approximately @xmath144 .    consider the following alternative strategy in resolving contention .",
    "in the first minislot , we consider the threshold value @xmath145 to resolve contention .",
    "if a collision occurs in the first minislot , then the next threshold would be @xmath146 for the second minislot and in the event of an idle first minislot , the next threshold would be set to @xmath147 for the second minislot .",
    "similarly , if there is collision in the first two minislots , then , the threshold would be set to @xmath148 for the third minislot and so on .",
    "if there is a unique user attempting in a minislot , the contention resolution algorithm stops .",
    "the average number of minislots required to resolve contention with this strategy is approximately @xmath122 ; in general , if there are @xmath17 channel states , then the average number of minislots required would be @xmath149 .",
    "we note that , for large @xmath17 , the above strategy is strictly optimal than the osa .",
    "the contention resolution problem can be formulated as identifying a random threshold @xmath67 such that @xmath150 .",
    "clearly , the minimum entropy for the wireless channel is approximately @xmath149 and is equal to the average number of minislots required to resolve contention .",
    "the two examples clearly illustrate that a maximal probability strategy like the osa is not optimal for all channel scenarios .",
    "also , the source - coding technique could provide us a way to identify the optimal contention resolution strategy under general channel scenarios as well .",
    "in this paper , we have modeled contention resolution for opportunistic scheduling as a source - coding problem . the entropy of a certain random variable is seen to approximate the average number of slots required to resolve contention .",
    "we characterized osa as a maximal probability allocation scheme and obtained the thresholds for contention resolution ( in osa ) from its source code .",
    "we note that mpa provides us a local optima , and we conjecture that mpa is globally optimal as well ( for i.i.d .",
    "channel conditions ) .",
    "we believe that the information theoretic view point can be used to develop contention resolution algorithms for a variety of other network scenarios as well ( e.g. , partial network information , limited channel feedback ) ."
  ],
  "abstract_text": [
    "<S> we consider a slotted wireless network in an infrastructure setup with a base station ( or an access point ) and @xmath0 users . the wireless channel gain between the base station and the users is assumed to be i.i.d . , </S>",
    "<S> and the base station seeks to schedule the user with the highest channel gain in every slot ( opportunistic scheduling ) . </S>",
    "<S> we assume that the identity of the user with the highest channel gain is resolved using a series of contention slots and with feedback from the base station . in this setup </S>",
    "<S> , we formulate the contention resolution problem for opportunistic scheduling as identifying a random threshold ( channel gain ) that separates the best channel from the other samples . </S>",
    "<S> we show that the average delay to resolve contention is related to the entropy of the random threshold .    </S>",
    "<S> we illustrate our formulation by studying the opportunistic splitting algorithm ( osa ) for i.i.d . </S>",
    "<S> wireless channel @xcite . </S>",
    "<S> we note that the thresholds of osa correspond to a maximal probability allocation scheme . </S>",
    "<S> we conjecture that maximal probability allocation is an entropy minimizing strategy and a delay minimizing strategy for i.i.d . wireless channel . </S>",
    "<S> finally , we discuss the applicability of this framework for few other network scenarios . </S>"
  ]
}