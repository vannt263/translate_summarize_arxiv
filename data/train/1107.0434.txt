{
  "article_text": [
    "the logic of induction , the process by which we obtain predictive laws , theories , or models of the world , has been a long standing concern of philosophy , science , statistics and artifical intelligence .",
    "theories typically have two aspects : structural or qualitative ( corresponding to concepts or variables and their relationships , or , in philosophical parlance , _ ontology _ ) and numeric or quantitative ( corresponding to parameters e.g. , probabilities ) .",
    "once the qualitative aspect of a certain law is fixed , the quantitative aspect becomes the subject of experimental science and statistics .",
    "induction is the process of inferring predictive laws , theories , or models of the world from a stream of observations . in general",
    ", the observations may be passive , or may be the outcomes of interventions by the learning agent . here , we limit ourselves to induction from passive observation alone .    under the _ computationalistic assumption _ ( i.e. , the church - turing thesis , which asserts that any theory can be described by a turing machine @xcite ) , one way to solve the induction problem is to enumerate all the turing machines ( dovetailing in order to cope with the countably infinite number of them ) and pick one that strikes a good balance between the predictability ( of the finite experience stream ) and size ( complexity ) @xcite , @xcite , @xcite or within a bayesian setting , using a weighted vote among the predictions of the various models @xcite ( see@xcite and references therein ) .",
    "in the general setting , a priori the number of types of possible structural laws that can be postulated is infinite .",
    "this makes it difficult to design general purpose induction strategy .",
    "we ask whether a finite and minimalistic set of fundamental structural operations suffice to construct _ any _ set of laws .",
    "if such a set will render induction more tractable because at any step the learner will have to pick from a small _ finite _ set of possible operations as opposed to an infinite one .    because turing machines are rather opaque from a structural standpoint , we use the alternative , yet equivalent , mechanism of generative grammars .",
    "this allows us to work with theories that can be built recursively by applying structural operations drawn from a finite set .",
    "the intuition behind this approach is that induction involves incrementally constructing complex structures using simpler structures ( e.g. , using super - structuring , also called _ chunking _ ) , and simplifying complex structures when possible ( e.g. , using abstraction ) .",
    "such a compositional approach to induction offers the advantage of increased transparency over the enumerate - and - select approach pioneered by solomonoff @xcite , @xcite .",
    "it also offers the possibility of reusing intermediate structures as opposed to starting afresh with a new turing machine at each iteration , thereby replacing enumeration by a process akin to dynamic programming or its heuristic variants such as the a * algorithm .",
    "we seek laws or patterns that explain a stream of observations through successive applications of operations drawn from a small finite set .",
    "the induced patterns are not necessarily described solely in terms of the input observations , but may also use ( a finite number of ) additional internal or hidden ( i.e. , not directly observable ) entities .",
    "the role of these internal variables is to simplify explanation .",
    "the introduction of internal variables to aid the explanation process is not without perils@xcite .",
    "one way to preclude the introduction of internal variables is to apply the following _ demarcation criterion _ : if the agent can not distinguish possible streams of observations based on the values of an internal variable , then the variable is non - sensical ( i.e. , independent of the data or `` senses '' ) .",
    "the direct connection requirement restricts the no - nonsense theories to those formed out empirical laws @xcite ( i.e , laws that relate only measurable quantities ) .",
    "however several scientists , including albert einstein , while being sympathetic to the positivists ideas , have successfully used in their theories , hidden variables that have at best indirect connection to observables .",
    "this has led to a series of revisions of the positivists doctrine culminating in carnap s attempt to accommodate hidden variables in scientific explanations@xcite .",
    "the observables and the internal variables in terms of which the explanation is offered can be seen as the ontology - i.e. , the set of concepts and their interrelationships found useful by the agent in theorizing about its experience . in this setting , structural induction is tantamount to ontology construction .",
    "the rest of the paper is organized as follows : section 2 introduces abstraction super - structuring normal forms that correspond to a general class of turing - equivalent generative grammars that can be used to express theories about the world ; and shows that : _ abstraction _ ( grouping _ similar _ entities ) and super - structuring ( combining topologically e.g. , spatio - temporally close entities ) as the essential structural operations in the induction process ; only two more structural operations , namely , _ reverse abstraction _ and _ reverse super - structuring _ ( the duals of abstraction and super - structuring respectively , suffice in order to exploit the full power of turing - equivalent generative grammars in induction .",
    "section 3 interprets the theoretical results in a larger context the nature of hidden variables , radical positivism and the 2-century old claim of david hume about the principles of _ connexion _ among ideas .",
    "section 4 concludes with a summary .",
    "we start by recapitulating the definitions and notations for generative grammars and the theorem that claims the equivalence between generative grammars and turing machines .",
    "we then draw the connections between the process of induction and the formalism of generative grammars and motivate the quest for a minimalistic set of fundamental structural operations .",
    "we then get to the main results of the paper : a series of characterization theorems of two important classes of generative grammars : context - free and general grammars , in terms of a small set of fundamental structural operations .",
    "* definitions ( grammar ) * a ( generative ) grammar is a quadruple @xmath0 where @xmath1 and @xmath2 are disjoint finite sets called nonterminals and terminals , respectively , @xmath3 is a distinguished element from @xmath1 called the start symbol and @xmath4 is a set of rewrite rules ( a.k.a .",
    "production rules ) of the form @xmath5 where @xmath6 and @xmath7 .",
    "additionally , we call @xmath8 the left hand side ( lhs ) and @xmath9 the right hand side ( rhs ) of the rule @xmath5 . the language generated by a grammar",
    "is defined by @xmath10 where @xmath11 stands for the reflexive transitive closure of the rules from @xmath4 .",
    "furthermore @xmath12 stands for the transitive ( but not reflexive ) closure of the rules from @xmath4 .",
    "we say that two grammars @xmath13,@xmath14 are equivalent if @xmath15 . the steps contained in a set of transitions @xmath16",
    "is called a derivation .",
    "if we want to distinguish between derivations in different grammars we will write @xmath17 or mention it explicitly .",
    "we denote by @xmath18 the empty string in the language .",
    "we will sometimes use the shorthand notation @xmath19 * * to stand for the set of rules @xmath20 .",
    "see e.g. , @xcite for more details and examples .",
    "* definition ( grammar types ) * let @xmath21 be a grammar",
    ". then    1 .",
    "g is a * regular grammar ( reg ) * if all the rules @xmath22 have the property that @xmath23 and @xmath24 .",
    "g is * context - free grammar ( cfg ) * if all the rules @xmath22 have the property that @xmath23 .",
    "g is * context - sensitive grammar ( csg ) * if all the rules @xmath22 have the property that they are of the form @xmath25 where @xmath26 and @xmath27 and @xmath28 .",
    "furthermore if @xmath18 is an element of the language one rule of the form @xmath29 is allowed and furthermore the restriction that @xmath3 does not appear in the right hand side of any rule is imposed .",
    "we will call such a sentence an @xmath30 .",
    "g is * general grammar ( gg ) * if all the rules @xmath22 have no additional restrictions .",
    "* theorem 1 . *",
    "_ the set of general grammars are equivalent in power with the set of turing machines .",
    "that is , for every turing machine @xmath2 there exists a general grammar @xmath13 such that @xmath31 and vice versa .",
    "_    _ proof .",
    "_ this theorem is a well known result .",
    "see for example @xcite for a proof .",
    "@xmath32      before proceeding with the main results of the paper we examine the connections between the setting of generative grammars and the problem of structural induction .",
    "the terminals in the grammar formalism denote the set of observables in our induction problem .",
    "the nonterminals stand for internal variables in terms of which the observations ( terminals ) are explained .",
    "the `` explanation '' is given by a derivation of the stream of observations from the initial symbol @xmath33 .",
    "the nonterminals that appear in the derivation are the internal variables in terms of which the surface structure given by the stream of observations @xmath34 is explained .",
    "given this correspondence , structural induction aims to find an appropriate set of nonterminals @xmath1 and a set of rewrite rules @xmath4 that will allow us to derive ( explain ) the input stream of observations @xmath34 from the initial symbol @xmath3 .",
    "the process of structural induction may invent a new rewrite rule @xmath35 under certain conditions and this new rule may contain in turn new nonterminals ( internal variables ) which are added to the already existing ones .",
    "the common intuition is that @xmath8 is a simpler version of @xmath9 , as the final goal is to reduce @xmath34 to @xmath3 .",
    "the terminals constitute the input symbols ( standing for observables ) , the nonterminals constitute whatever additional `` internal '' variables that are needed , the rewrite rules describe their interrelationship and altogether they constitute the ontology .",
    "the correspondence between the terms used in structural induction and generative grammars is summarized in table [ tab : correspondence - between - structural ] .",
    ".[tab : correspondence - between - structural]correspondence between structural induction and generative grammars [ cols=\"^,^\",options=\"header \" , ]     thus , in general , structural induction may invent any rewrite rule of the form @xmath35 , potentially introducing new nonterminals , the problem is that there are infinitely many such rules that we could invent at any point in time . in order to make the process more well defined we ask whether it is possible to find a set of fundamental structural operations which is finite and minimalistic , such that all the rules ( or more precisely sets of rules ) can be expressed in terms of these operations",
    "this would establish a normal form in terms of a finite set of operations and then the problem of generating laws will be reduced to making appropriate choices from this set without sacrificing completeness . in the next subsection",
    "we will attempt to decompose the rules @xmath35 into a small finite set of fundamental structural elements which will allow us to design better structure search mechanisms .",
    "* issue * ( @xmath36 ) . in the rest of the paper we will prove some theorems that impose various sets of conditions on a grammar @xmath13 in order for the grammar to be considered in a certain normal form .",
    "if _ @xmath37 _",
    "however , _ _ we will allow two specific rules of the grammar @xmath13 to be exempted from these constraints and still consider the grammar in the normal form .",
    "more exactly if _",
    "@xmath37 _ and given a grammar @xmath14 such that @xmath38 and @xmath39 is in a certain normal form then the grammar @xmath40 where @xmath41 will also be considered in that certain normal form despite the fact that the two productions @xmath42 may violate the conditions of the normal form .",
    "these are the only productions that will be allowed to violate the normal form conditions .",
    "note that @xmath3 is a brand new nonterminal and does not appear in any other productions aside from these two . without loss of generality we will assume in the rest of the paper that @xmath43 .",
    "this is because if @xmath37 we can always produce using the above - mentioned construction a grammar @xmath44 that is in a certain normal form and @xmath45 from a grammar @xmath14 that is in that normal form and satisfies @xmath38 .",
    "we will call the procedure just outlined the @xmath36 .",
    "we will call the following statement the @xmath30 : let _ @xmath21 _ be a grammar , if @xmath18 is an element of the language @xmath46 one rule of the form @xmath29 is allowed and furthermore the restriction that @xmath3 does not appear in the right hand side of any rule is imposed .",
    "first we state a weak form of the abstraction superstructuring normal form for context free grammars .",
    "* theorem 2 ( weak - cfg - asnf ) . *",
    "_ let @xmath21 , _",
    "@xmath43 _ be a context free grammar .",
    "then there exists a context free grammar @xmath14 such that @xmath15 and @xmath14 contains only rules of the following type : _    1 .   _",
    "@xmath47 _ 2 .",
    "_ @xmath48 _ 3 .   _",
    "@xmath49 _",
    "_ since @xmath13 is a cfg it can be written in the chomsky normal form @xcite .",
    "that is , such that it contains only productions of the forms 2 and 3 .",
    "if @xmath37 a rule of the form @xmath29 is allowed and @xmath3 does not appear in the rhs of any other rule _ _",
    "( @xmath30 ) . since we have assumed that @xmath43 we do not need to deal with @xmath30 and hence the proof",
    ".    @xmath32    * remarks . *    1",
    ".   we will call the rules of type 1 renamings ( ren ) .",
    "2 .   we will call the rules of type 2 superstructures ( ss ) or compositions .",
    "3 .   the rules of the type 3 are just convenience renamings of observables into internal variables in order to uniformize the notation and we will call them terminal ( terminal ) .",
    "we are now ready to state the the weak asnf theorem for the general case",
    ".    * theorem 3 ( weak - gen - asnf ) . * _ let @xmath21 , _ @xmath43 _ be a general ( unrestricted ) grammar .",
    "then there exists a grammar @xmath14 such that @xmath15 and @xmath14 contains only rules of the following type : _    1 .   _",
    "@xmath47 _ 2 .",
    "_ @xmath48 _ 3 .",
    "_ @xmath49 _ 4 .",
    "_ @xmath50 _    _ proof .",
    "_ see appendix .",
    "* we will call the rules of type 4 reverse super - structuring ( rss ) .    in the next theorem",
    "we will strengthen our results by allowing only the renamings ( ren ) to be non unique .",
    "first we define what we mean by uniqueness and then we proceed to state and prove a lemma that will allow us to strengthen the weak - gen - asnf by imposing uniqueness on all the productions safe renamings .",
    "* definition ( _ strong - uniqueness _ ) .",
    "* we will say that a production @xmath51 respects _ strong - uniqueness _",
    "if this is the only production that has the property that it has @xmath52 in the lhs and also this is the only production that has @xmath53 on the rhs .",
    "* lemma 2 . *",
    "_ let @xmath21 , @xmath54 a grammar such that all its productions are of the form : _    1 .",
    "@xmath47 2 .",
    "@xmath55 , @xmath56 3 .",
    "@xmath57 , @xmath56    _ modify the the grammar g to obtain @xmath39 as follows : _    1 .",
    "_ introduce a new start symbol @xmath58 and the production @xmath59 .",
    "_ for each @xmath56 that appears in the rhs of one production in @xmath13 let @xmath60 all the the productions that contain @xmath61 in the rhs of a production .",
    "introduce a new nonterminal @xmath62 and the productions @xmath63 and @xmath64 and eliminate the old productions @xmath60 .",
    "_ for each @xmath56 that appears in the lhs of one production in @xmath13 let @xmath65 all the the productions that contain @xmath61 the lhs of a production .",
    "introduce a new nonterminal @xmath66 and the productions @xmath67 and @xmath68 and eliminate the old productions @xmath65 .",
    "_    _ then the new grammar @xmath14 generates the same language as the initial grammar @xmath13 and all the productions of the form @xmath55 and @xmath57 , @xmath56 respect strong - uniqueness .",
    "furthermore , if the initial grammar has some restrictions on the composition of the @xmath56 that appears in the productions of type 2 and 3 , they are respected since @xmath61 is left unchanged in the productions of the new grammar and the only other types of productions introduced are renamings that are of neither type 2 nor type 3 . _",
    "_ proof_. see appendix @xcite .    by applying lemma 2 to the previous two weak - asnf theorems we obtain strong versions of these theorems which enforce _ strong - uniqueness _ in all the productions safe the renamings .",
    "* theorem 4 ( strong - cfg - asnf ) . *",
    "_ let @xmath21 , _",
    "@xmath43 _ be a context free grammar .",
    "then there exists a context free grammar @xmath14 such that @xmath15 and @xmath14 contains only rules of the following type : _    1 .   _",
    "@xmath47 _ 2 .   _",
    "@xmath48 - and this is the only rule that has @xmath69 in the rhs and this is the only rule that has @xmath70 in the lhs ( strong - uniqueness ) . _ 3 .   _",
    "@xmath49 - and this is the only rule that has @xmath71 in the rhs and this is the only rule that has @xmath70 in the lhs ( strong - uniqueness ) . _    _ proof_. apply lemma 2 to the grammar converted into weak - cfg - asnf@xmath32    * theorem 5 ( strong - gen - asnf ) . *",
    "_ let @xmath21 , _",
    "@xmath43 _ be a general ( unrestricted ) grammar .",
    "then there exists a grammar @xmath14 such that @xmath15 and @xmath14 contains only rules of the following type : _    1 .   _",
    "@xmath47 _ 2 .   _",
    "@xmath48 - and this is the only rule that has @xmath69 in the rhs and this is the only rule that has @xmath70 in the lhs ( strong - uniqueness ) . _",
    "@xmath49 - and this is the only rule that has @xmath71 in the rhs and this is the only rule that has @xmath70 in the lhs ( strong - uniqueness ) . _ 4 .",
    "_ @xmath50 - and this is the only rule that has @xmath72 in the rhs and this is the only rule that has @xmath73 in the lhs ( strong - uniqueness ) . _    _ proof_. apply lemma 2 to the grammar converted into weak - gen - asnf@xmath32    * remark . * after enforcing strong uniqueness the only productions that contain choice are those of type 1 - renamings ( ren ) .    in the light of this theorem",
    "we proceed to introduce the concept of abstraction and prove some additional results .",
    "* definitions ( abstractions graph ) . * given a grammar @xmath21 which is in an asnf from any of the theorems 1 - 4 we call an _ abstractions graph of the grammar @xmath13 _ and denote it by @xmath74 a directed graph @xmath75 whose nodes are the nonterminals of the grammar @xmath13 and whose edges are constructed as follows : we put a directed edge starting from @xmath70 and ending in @xmath76 iff @xmath47 is a production that occurs in the grammar . without loss of generality , we can assume that the graph has no self loops , i.e. , edges of the form @xmath77 ; if such self - loops exist , the corresponding productions can be eliminated from the grammar without altering the language .",
    "in such a directed graph a node @xmath70 has a set of outgoing edges and a set of incoming edges which we refer to as out - edges and in - edges respectively .",
    "we will call a node @xmath70 along with its out - edges the _ abstraction at a _ and denote it @xmath78 .",
    "similarly , we will call a node @xmath70 along with its in - edges the _ reverse abstraction at a _ and denote it @xmath79 .",
    "* theorem 6 . *",
    "_ let @xmath21 , _",
    "@xmath43 _ be a general grammar .",
    "then we can convert such a grammar into the strong - gen - asnf i.e. , such that all the productions are of the following form : _    1 .   _",
    "@xmath47 _ 2 .   _",
    "@xmath48 - and this is the only rule that has @xmath69 in the rhs and this is the only rule that has @xmath70 in the lhs .",
    "( strong - uniqueness ) _ 3 .   _",
    "@xmath49 - and this is the only rule that has @xmath70 on the lhs and there is no other rule that has @xmath71 on the rhs .",
    "( strong uniqueness ) _ 4 .   _",
    "@xmath50 - and this is the only rule that has @xmath72 in the rhs and this is the only rule that has @xmath73 in the lhs .",
    "( strong - uniqueness ) _    _ and furthermore for any derivation @xmath34 such that @xmath80 , in @xmath13 , @xmath81 there exists a derivation @xmath82 such that @xmath83 , @xmath84 and @xmath85 contains only rules of type 1 and 2 ( ren , ss ) , @xmath86 contains only rules of the type 1 , more particularly only reverse abstractions and type 4 ( ren(rabs ) , rss ) and @xmath87 contains only rules of type 3 ( terminal ) . _",
    "_ proof_. see appendix .",
    "we have therefore proved that for each general grammar @xmath13 we can transform it in a strong - gen - asnf such that the derivation ( explanation in structural induction terminology ) of any terminal string @xmath34 can be organized in three phases such that : phase 1 uses only productions that grow ( or leave unchanged ) the size of the intermediate string ; phase 2 uses only productions that shrink ( or leave unchanged ) the size of the intermediate string ; and phase 3 uses only terminal productions . in the case of grammars that are not in the normal form as defined above , the situation is a little more complicated because of successive applications of grow and shrink phases .",
    "however , we have shown that we can always transform an arbitrary grammar into one that in the normal form .",
    "note further that the grow phase in both theorems use only context free productions .",
    "we now proceed to examine the implications of the preceeding results in the larger context including the nature of hidden variables , radical positivism and the david hume s principles of _ connexion _ among ideas .",
    "recall that our notion of structural induction entails : given a sequence of observations @xmath34 we attempt to find a theory ( grammar ) that explains @xmath34 and simultaneously also the explanation ( derivation ) @xmath33 . in a local way we may think that whenever we have a production rule @xmath35 that @xmath8 explains @xmath9 . in a bottom",
    "up - data driven way we may proceed as follows : first introduce for every observable @xmath71 a production @xmath49 .",
    "the role of these productions is simply to bring the observables into the realm of internal variables .",
    "the resulting association is between the observables and the corresponding internal variables unique ( one to one and onto ) and hence , once this association is established , we can forget about the existence of bbservables ( terminals ) .",
    "since establishing these associations is the only role of the terminal productions , they are not true structural operations . with this in mind ,",
    "if we are to construct a theory in the gen - asnf we can postulate laws of the following form :    1 .",
    "@xmath48 - super - structuring ( ss ) which takes two internal variables @xmath76 and @xmath72 that occur within proximity of each other ( adjacent ) and labels the compound .",
    "henceforth , the shorter name @xmath70 can be used instead for @xmath69 .",
    "this is the sole role of super - structuring - to give a name to a composite structure to facilitate shorter explanations at latter stages .",
    "@xmath88 - abstraction ( abs ) . introduces a name for the occurrence of either of the variables @xmath76 or @xmath72 .",
    "this allows for compactly representing two productions that are identical except that one uses @xmath76 and the uses @xmath72 by a single production using @xmath70 .",
    "the role of abstraction is to give a name to a group of entities ( we have chosen two only for simplicity ) in order to facilitate more general explanations at latter stages which in turn will produce more compact theories .",
    "@xmath50 - reverse super - structuring ( rss ) which introduces up to two existing or new internal variables that are close to each other ( with respect to a specified topology ) that together `` explain '' the internal variable @xmath72 .",
    "4 .   @xmath89 , @xmath90 - reverse abstraction ( rabs ) which uses existing or new internal variables _",
    "@xmath70 _ and @xmath76 as alternative explanations of the internal variable @xmath72 ( we have chosen two variables only for simplicity ) .",
    "recall that are at least two types of reasons for creating hidden variables :    1 .",
    "( * or * type ) - [ multiple alternative hidden causes ] the or type corresponds to the case when some visible effect can have multiple hidden causes @xmath91 , @xmath92 . in our setting , this case corresponds to reverse abstraction .",
    "one typical example of this is : the grass is wet , and hence either it rained last night or the sprinkler was on . in the statistical and machine learning literature",
    "the models that use this type of hidden variables are called mixture models @xcite .",
    "( * t - and * type ) - [ multiple concurrent hidden causes ] the t - and type , i.e. , topological and type , of which the and is a sepcial case .",
    "this corresponds to the case when one visible effect has two hidden causes both of which have to occur within proximity of each other ( with respect to a specified topology ) in order to produce the visible effect . @xmath93 . in our setting",
    ", this corresponds reverse super - structuring . in the statistical / graphical models",
    "literature the particular case of and hidden explanations is the one that introduces edges between hidden variables in the depedence graph @xcite , @xcite , @xcite .",
    "the preceeding discussion shows that we can associate with two possible reasons for creating hidden variables , the structural operations of reverse abstraction and reverse super structuring respectively . because these are the only two types of productions that introduce hidden variables in the gen - asnf this provides a characterization of the rationales for introducing hidden variables .      if we rule out the use of rss and rabs , the only operations that involve the postulation of hidden variables , we are left with only ss and abs which corresponds to the radical positivist @xcite stance under the computationalist assumption .",
    "an explanation of a stream of observations @xmath34 in the radical positivist theory of the world is mainly a theory of how the observables in the world are grouped into classes ( abstractions ) and how smaller chunks of observations are tied together into bigger ones ( super - structures ) .",
    "the laws of the radical positivist theory are truly empirical laws as they only address relations among observations .",
    "however , structural induction , if it is constrained to using only abs and ss , the class of theories that can be induced is necessarily a subset of the set of theories that can be described by turing machines .",
    "more precisely , the resulting grammars will be a strict subset of context free grammars , ( since cfg contain ss , and ren(abs+rabs ) ) . next we will examine how any theory of the world may look like from the most general perspective when we do allow hidden variables .",
    "if structural induction is allowed to take advantage of rss and rabs in addition to ss and abs , the resulting theories can make use of hidden variables .",
    "observations are a derivative byproduct obtained from a richer hidden variable state description by a reduction : either of size - performed by reverse superstructuring or of information - performed by reverse abstraction .",
    "note that , while in general , structural induction can alternate several times between ren+ss and rabs+rss , we have shown that three phases suffice : a growth phase ( ren+ss ) ; a shrink phase ( rabs+rss ) ; and a terminal phase . whether we can push all the rabs from the first phase into the second phase and make the first phase look like the one in the radical positivist stance ( only abs+ss ) remains an open question ( see appendix for a conjecture to this effect ) .",
    "we now examine , against the backdrop of gen - asnf theorem , a statement made by philosopher david hume more that 2 centuries ago : _",
    "`` i do not find that any philosopher has attempted to enumerate or class all the principles of association [ of ideas ] . ... to me , there appear to be only three principles of connexion among ideas , namely , resemblance , contiguity in time or place , and cause and effect '' @xcite_. if we substitute resemblance with abstraction ( since abstraction is triggered by resemblance or similarity ) , contiguity in time or place with super - structuring ( since proximity , e.g. , spatio - temporal proximity drives super - structuring ) and cause and effect with the two types of explanations that utilize hidden variables , it is easy to see that the gen - asnf theorem is simply a precise restatement of hume s claim under the computationalist assumption .",
    "we have shown that _ abstraction _ ( grouping _ similar _ entities ) and super - structuring ( combining topologically e.g. , spatio - temporally close entities ) as the essential structural operations in the induction process . a structural induction process that relies only on abstraction and super - structuring corresponds to the radical positivist stance .",
    "we have shown that only two more structural operations , namely , _ reverse abstraction _ and _ reverse super - structuring _ ( the duals of abstraction and super - structuring respectively ) ( a ) suffice in order to exploit the full power of turing - equivalent generative grammars in induction ; and ( b ) operationalize two rationales for the introduction of hidden variables into theories of the world .",
    "the gen - asnf theorem can be seen as simply a restatement , under the computationalist assumption , of hume s 2-century old claim regarding the principles of connexion among ideas .",
    "ayer , _ language , truth , and logic_. london : gollancz .",
    "( 2nd edition , 1946 ) , 1936 .",
    "m. burgin .",
    "_ super - recursive algorithms_. springer , 2005 .",
    "r. carnap . _ an introduction to the philosophy of science_. 1966 .",
    "n. chomsky .",
    "_ syntactic structures_. the hague : mouton .",
    "g. elidan and n. friedman . learning hidden variable networks : the information bottleneck approach",
    ". _ journal of machine learning research ( jmlr ) _",
    ", 6:81 - 127 , 2005 .",
    "_ an enquiry concerning human understanding _ .",
    "hackett publ co. 1993 .",
    "m. hutter .",
    "_ universal artificial intelligence : sequential decisions based on algorithmic probability .",
    "_ eatcs , springer , 2005 .",
    "classes of languages and linear - bounded automata . _ information and control _ , 7(2 ) : 207223 , 1964 .",
    "s. l. lauritzen .",
    "_ graphical models_. clarendon press , oxford , 1996 .",
    "t. oates , t. armstrong , j. harris and m. nejman . on the relationship between lexical semantics and syntax for the inference of context - free grammars .",
    "_ proceedings of the 19th national conference on artificial intelligence ( \\{aaai } ) _ , 431436 , 2004 .",
    "_ probabilistic reasoning in intelligent systems .",
    "_ morgan kaufmann publishers , 1988",
    ".    k. r. popper . _ the logic of scientific discovery , _ basic books ( english ed .",
    "1959 ) , 1934 .",
    "a. salomaa .",
    "_ computation and automata . _ cambridge university press , 1985 .",
    "w. savitch .",
    "how to make arbitrary grammars look like context - free grammars .",
    "_ siam journal on computing , _ 2:174 - 182 , 1973 .",
    "j. schmidhuber , j. zhao and m. wiering shifting bias with success story algorithm . _ machine learning , _ 28:105 - 130 , 1997 .",
    "r. solomonoff . a formal theory of inductive inference , part i. _ information and control _ , 7(1):1 - 22 , 1964 .",
    "r. solomonoff . a formal theory of inductive inference , part ii . _ information and control _ , 7(2):224 - 254 , 1964 .",
    "a. turing .",
    "on computable numbers with an application to the entscheuidungs - problem , _ proc .",
    "ser.2 , 42:230 - 265 , 1936 .",
    "a. silvescu and v. honavar .",
    "abstraction super - structuring normal forms : towards a computationalist theory of structural induction . technical report .",
    "department of computer science .",
    "iowa state university .",
    "* theorem 3 ( weak - gen - asnf ) . * _ let @xmath21 , _",
    "@xmath43 _ be a general ( unrestricted ) grammar .",
    "then there exists a grammar @xmath14 such that @xmath15 and @xmath14 contains only rules of the following type : _            * * . for each @xmath96",
    "we introduce a new nonterminal @xmath97 and the following production rules @xmath98 and @xmath99 and eliminate the old @xmath96 production rules . in this way",
    "we ensure that all the rules of type 2 in gknf have been rewritten into rules of types 2 and 4 in the gen - asnf .",
    "the new grammar generates the same language . to see this",
    "let @xmath100 denote the old grammar and @xmath101 denote the new grammar .",
    "@xmath102 _ and @xmath80 be a derivation in _",
    "@xmath103_. in this derivation we can replace all the uses of the production @xmath95 with the sequence @xmath104 and get a derivation that is valid in @xmath105 , since all the other productions are common between the two grammars . thus we have proved that for all _ @xmath102 _ we can convert a valid derivation from @xmath103 , @xmath80 into a valid derivation in @xmath105 and in particular this is true also for @xmath33",
    ". therefore @xmath106 .",
    "conversely , let _",
    "@xmath102 _ and @xmath80 be a valid derivation in @xmath105 then whenever we use the rule @xmath107 in this derivation @xmath108 let @xmath109 be the place where the @xmath97 that occurs between @xmath52 and @xmath53 is rewritten ( used in the lhs of a production , even if it rewrites to the same symbol ) for the first time .",
    "then necessarily the @xmath110 rule is the one that applies since it is the only one that has @xmath97 in the lhs .",
    "furthermore , as a consequence of lemma 1 we have that @xmath111 and @xmath112 are valid derivations in @xmath105 . therefore we can bring the production @xmath110 right before the use of @xmath107 as follows @xmath113 and still have a valid derivation in @xmath105 .",
    "we can repeat this procedure for all places where rules of the form @xmath107 appear . in this modified derivation",
    "we can replace all the uses of the sequence @xmath104 with the production @xmath95 and obtain a derivation that is valid in @xmath103 since all the other productions are common between the two grammars .",
    "thus we have proved that for all _ @xmath102 _ we can convert a valid derivation from @xmath105 , @xmath80 into a valid derivation in @xmath103 and in particular this is true also for @xmath33 since @xmath114 , and therefore @xmath115 .",
    "therefore we have proved that the grammars are equivalent , i.e. , @xmath116 .    * * .",
    "returning to the main argument , so far our grammar has only rules from weak - gen - asnf safe for the @xmath18-productions @xmath94 .",
    "next we will eliminate @xmath18-productions @xmath94 in two steps .",
    "first for each @xmath94 we introduce a new nonterminal @xmath117 and the productions @xmath118 and @xmath119 and eliminate @xmath94 , where @xmath120 is a distinguished new nonterminal ( that will basically stand for @xmath18 internally ) .",
    "this insures that we have only one @xmath18-production , namely @xmath119 and @xmath120 does not appear on the lhs of any other production and also that all the rules that rewrite to @xmath120 are of the form @xmath121 .",
    "the new grammar generates the same language .",
    "we will use a similar proof technique as in the previous step .",
    "let @xmath100 denote the old grammar and @xmath101 denote the new grammar .",
    "@xmath102 _ and @xmath80 be a derivation in _",
    "@xmath103_. in this derivation we can replace all the uses of the production @xmath94 with the sequence @xmath122 and get a derivation that is valid in @xmath105 , since all the other productions are common between the two grammars .",
    "thus we have proved that for all _ @xmath102 _ we can convert a valid derivation from @xmath103 , @xmath80 into a valid derivation in @xmath105 and in particular this is true also for @xmath33 , therefore @xmath106 .",
    "conversely , let _",
    "@xmath102 _ and @xmath80 be a valid derivation in @xmath105 then whenever we use the rule @xmath118 in this derivation @xmath123 let @xmath124 be the place where the @xmath120 that occurs between @xmath52 and @xmath53 is rewritten(used in the lhs of a production , even if it rewrites to the same symbol ) for the first time .",
    "then necessarily the @xmath119 rule is the one that applies since it is the only one that has @xmath120 in the lhs .",
    "furthermore , as consequence of lemma 1 we have that @xmath111 and @xmath112 are valid derivations in @xmath105 .",
    "therefore we can bring the production @xmath119 right before the use of @xmath118 as follows @xmath125 and still have a valid derivations in @xmath105 .",
    "we can repeat this procedure for all places where rules of the form @xmath118 appear . in this modified derivation",
    "we can replace all the uses of the sequence @xmath122 with the production @xmath94 and obtain a derivation that is valid in @xmath103 since all the other productions are common between the two grammars .",
    "thus we have proved that for all _ @xmath102 _ we can convert a valid derivation from @xmath105 , @xmath80 into a valid derivation in @xmath103 and in particular this is true also for @xmath33 since @xmath114 , and therefore @xmath115 .",
    "therefore we have proved that the grammars are equivalent , i.e. , @xmath116 .    * * .",
    "to summarize : the new grammar has only rules of the weak - gen - asnf type , safe for the production @xmath119 which is the only production that has @xmath120 in the lhs _ _ and there is no other rule that has @xmath18 on the rhs ( _ strong - uniqueness _ ) and furthermore the only rules that contain @xmath120 in the rhs are of the form _ @xmath121 _",
    "( _ only renamings to e _ ) .",
    "we will eliminate the @xmath18-production @xmath119 as follows : let @xmath126 be all the productions that have _ @xmath120 _ on the rhs .",
    "for all nonterminals @xmath127 introduce productions @xmath128 and @xmath129 and eliminate @xmath126 , furthermore we also eliminate @xmath119 .",
    "the new grammar generates the same language .",
    "we will use a similar proof technique as in the previous step .",
    "let @xmath100 denote the old grammar and @xmath101 denote the new grammar .",
    "@xmath102 _ and @xmath80 be a derivation in _",
    "@xmath103_. then whenever we use a rule of the form @xmath130 in this derivation @xmath131 let @xmath132 be the place where the @xmath120 that occurs between @xmath52 and @xmath53 is rewritten(used in the lhs of a production , even if it rewrites to the same symbol ) for the first time .",
    "then necessarily the @xmath119 rule is the one that applies since it is the only one that has @xmath120 in the lhs .",
    "furthermore , as a consequence of lemma 1 we have that @xmath111 and @xmath112 are valid derivations in @xmath103 . therefore we can bring the production @xmath119 right before the use of @xmath130 as follows @xmath133 and still have a valid derivations in @xmath103 .",
    "we can repeat this procedure for all places where rules of the form @xmath130 appear . in this modified derivation",
    "we can replace all the uses of the sequence @xmath134 with the production @xmath135 if @xmath136 and @xmath135 if @xmath137 and obtain a derivation that is valid in @xmath105 since all the other productions are common between the two grammars , ( e.g. , if @xmath136 , @xmath138 replace @xmath139 which is valid in @xmath103 with @xmath140 which is valid in @xmath105 and similarly for @xmath137 ) .",
    "in this way since all the other productions are common between the two grammars we can convert a derivation @xmath141 into a derivation @xmath142 .",
    "note that it is not possible for both @xmath52 and @xmath53 to be equal to @xmath18 because this will imply that the derivation @xmath80 is @xmath143 which contradicts the hypothesis that @xmath144 .",
    "thus we have proved that for all _ @xmath102 _ we can convert a valid derivation from @xmath103 , @xmath80 into a valid derivation in @xmath105 and in particular this is true also for @xmath33 since @xmath114 , and therefore @xmath106 .",
    "conversely , let _",
    "@xmath102 _ and @xmath80 be a derivation in _",
    "@xmath105 _ . in this derivation",
    "we can replace all the uses of the production @xmath135 with the sequence @xmath134 and get a derivation that is valid in @xmath103 since all the other productions are common between the two grammars ( e.g. , we replace @xmath140 which is valid in @xmath105 with @xmath139 which is valid in @xmath103 ) .",
    "we proceed similarly with the productions of the form @xmath145 and replace them with the sequence @xmath134 and get a derivation that is valid in @xmath103 .",
    "thus we have proved that for all _ @xmath102 _ we can convert a valid derivation from @xmath105 , @xmath80 into a valid derivation in @xmath103 and in particular this is true also for @xmath33 , therefore @xmath115 .",
    "hence we have proved that the grammars are equivalent , i.e. , @xmath116 .",
    "* lemma 1 . *",
    "_ let @xmath21 be a grammar and let @xmath146 , @xmath147 a valid derivation in @xmath13 that does not rewrites the @xmath148 ( uses productions whose lhs match any part of @xmath148 even if it rewrites to itself ) , occurring between @xmath52 and @xmath53 , then _",
    "@xmath111 , @xmath112 _ are valid derivations in @xmath13 . _    _ proof .",
    "_ because @xmath146 does not rewrites any part of @xmath148 ( even to itself ) it follows that the lhs of any production rule that is used in this derivation either matches a string to the left of @xmath148 or to the right of @xmath148 .",
    "if we start from @xmath52 and use the productions that match to the left in the same order as in @xmath149 then we necessarily get @xmath111 , a valid derivation in @xmath13 .",
    "similarly , by using the productions that match to the right of @xmath148 we get @xmath112 valid in @xmath13 .            1 .   _ introduce a new start symbol @xmath58 and the production @xmath59 .",
    "_ for each @xmath56 that appears in the rhs of one production in @xmath13 let @xmath60 all the the productions that contain @xmath61 in the rhs of a production .",
    "introduce a new nonterminal @xmath62 and the productions @xmath63 and @xmath64 and eliminate the old productions @xmath60 .",
    "_ for each @xmath56 that appears in the lhs of one production in @xmath13 let @xmath65 all the the productions that contain @xmath61 the lhs of a production .",
    "introduce a new nonterminal @xmath66 and the productions @xmath67 and @xmath68 and eliminate the old productions @xmath65 . _    _ then the new grammar @xmath14 generates the same language as the initial grammar @xmath13 and all the productions of the form @xmath55 and @xmath57 , @xmath56 respect strong - uniqueness .",
    "furthermore if the initial grammar has some restrictions on the composition of the @xmath56 that appears in the productions of type 2 and 3 , they are still maintained since @xmath61 is left unchanged in the productions of the new grammar and the only other types of productions introduced are renamings which do not belong to either type 2 or 3 .",
    "_    _ proof_. to show that the two grammars are equivalent we will use a similar proof technique as in the previous theorem .",
    "@xmath81 _ and @xmath80 be a derivation in _",
    "@xmath13_. in this derivation we can replace all the uses of the production @xmath150 with the sequence @xmath151 and the uses of the production @xmath152 with the sequence @xmath153 and get a derivation that is valid in @xmath13 , since all the other productions are common between the two grammars . thus we have proved that for all _ @xmath81 _ we can convert a valid derivation from @xmath13 , @xmath80 into a valid derivation in @xmath14 and in particular this is true also for @xmath154 , which can be converted into @xmath155 and which furthermore can be converted into @xmath156 and therefore @xmath157 .",
    "conversely , let _",
    "@xmath81 _ and @xmath80 be a valid derivation in @xmath14 then whenever we use the rule @xmath158 in this derivation @xmath159 let @xmath160 be the place where the @xmath62 that occurs between @xmath52 and @xmath53 is rewritten ( used in the lhs of a production , even if it rewrites to the same symbol ) for the first time .",
    "then necessarily the @xmath63 rule is the one that applies since it is the only one that has @xmath62 in the lhs .",
    "furthermore , as consequence of lemma 1 we have that @xmath111 and @xmath112 are valid derivations in @xmath14 .",
    "therefore we can bring the production @xmath63 right before the use of @xmath158 as follows @xmath161 and still have a valid derivation in @xmath14 .",
    "we can repeat this procedure for all places where rules of the form @xmath158 appear .",
    "similarly for the uses of the productions of the type @xmath67 in a derivation @xmath80 we can bring the production that rewrites @xmath62 ( @xmath162 ) right after as follows : change @xmath163 into @xmath164 , because from lemma 1 we have that @xmath111 and @xmath112 .",
    "we can repeat this procedure for all places where rules of the form @xmath165 appear . in the new modified derivation we can replace all the uses of the sequence @xmath151 with the production @xmath150 and the sequence @xmath153 with the production @xmath152 and obtain a derivation that is valid in @xmath13 since all the other productions are common between the two grammars .",
    "thus , we have proved that for all _ @xmath81 _ we can convert a valid derivation from @xmath14 , @xmath80 into a valid derivation in @xmath13 . for a derivation and @xmath166",
    "we have that necessarily @xmath167 since @xmath59 is the only production that rewrites @xmath58 but since @xmath168 , it follows that we can use the previous procedure in order to convert @xmath169 into a derivation @xmath170 which proves that @xmath171 .",
    "hence , we have proved that the grammars are equivalent , i.e. , @xmath15 .",
    "it is obvious that all the productions of the form @xmath55 and @xmath57 , @xmath56 respect _",
    "strong - uniqueness_. furthermore if the initial grammar has some restrictions on the composition of the @xmath56 that appear in the productions of type 2 and 3 they are still maintained since @xmath61 is left unchanged in the productions of the new grammar and the only other types of productions introduced are renamings which do not belong to either type 2 or 3 .",
    "we can ask the question whether we can find even simpler types of structural elements that can generate the full power of turing machines .",
    "two of our operators , rss and ss require that the size of the production ( _ @xmath172 _ ) is 3 .",
    "we can ask whether we can do it with size 2 .",
    "this is answered negatively by the following proposition .",
    "* proposition ( minimality ) * _ if we impose the restriction that @xmath173 for all the productions then we can only generate languages that are finite sets terminals , with the possible addition of the empty string @xmath18 . _        all the derivations that start from @xmath3 , either keep on rewriting the current nonterminal , because there is no production which increases the size , or rewrite the current nonterminal into a terminal or @xmath18 .        *",
    "theorem 7 ( strong - cfg - asnf - savitch ) . * _ ( savitch 1973 @xcite ) let @xmath21 , _",
    "@xmath43 _ be a general grammar then there exists a grammar @xmath14 such that @xmath15 and @xmath14 contains only rules of the following type : _      the savitch theorem has three types of rules terminal ( type 3 ) , ss ( type 2 ) and annihilate2 ( type 1 ) .",
    "however no _ strong - uniqueness _ has been enforced ; it it were it to be enforced , then one more type of rule , ren will be needed .",
    "furthermore if we would not insist on uniqueness all the renamings in the asnf could be eliminated too ( renamings elimination is a well known technique in the theory of formal languages @xcite ) .",
    "however this will make it very difficult to make explicit the abstractions .",
    "therefore it can be argued that asnf and the savitch normal form have the same number of fundamental structural operations with the crucial difference between the two being the replacement of the rss with annihilate2 .",
    "the reverse superstructuring seems a more intuitive structural operation however , at least from the point of view of this paper .. next we present for completeness the version of savitch theorem where _ strong - uniqueness _",
    "is enforced for rules of type 2 and 3 .      1 .   _",
    "@xmath47 _ 2 .   _",
    "@xmath48 - and this is the only rule that has @xmath69 in the rhs and this is the only rule that has @xmath70 in the lhs .",
    "( strong - uniqueness ) _ 3 .   _",
    "@xmath49 - and this is the only rule that has @xmath71 in the rhs and this is the only rule that has @xmath70 in the lhs .",
    "( strong - uniqueness ) _ 4 .",
    "_ @xmath174 - and this is the only rule that has @xmath73 on the lhs .",
    "( uniqueness ) _",
    "then we can use the constructions in lemma 2 on this grammar in order to enforce _ strong - uniqueness _ for superstructuring ( ss ) _",
    "@xmath48 _ and terminals ( terminal ) @xmath49 at the potential expense of introducing renamings ( ren ) .          1 .",
    "_ @xmath47 _ 2 .   _",
    "@xmath48 - and this is the only rule that has @xmath69 in the rhs and this is the only rule that has @xmath70 in the lhs .",
    "( strong - uniqueness ) _ 3 .   _",
    "@xmath49 - and this is the only rule that has @xmath70 on the lhs and there is no other rule that has @xmath71 on the rhs .",
    "( strong uniqueness ) _ 4 .   _",
    "@xmath174 - and this is the only rule that has @xmath73 on the lhs . ( uniqueness ) _    _ then for any derivation @xmath34 such that @xmath80 , in @xmath13 , @xmath81 there exists a derivation @xmath82 such that @xmath83 , @xmath84 and @xmath85 contains only rules of type 1 and 2 ( ren , ss ) , @xmath86 contains only rules of the type 4 ( annihilate2 ) and @xmath87 contains only rules of type 3 ( terminal ) . _",
    "_ based on lemma 3 ( presented next ) we can change the derivation _ @xmath80 _ into a derivation _ @xmath176 _ such that the segment _",
    "@xmath87 _ contains only rules of type 3 ( terminal ) and _ @xmath177 _ contains only rules of type 1 , 2 or 4 ( ren , ss , annihilate2 ) .",
    "therefore the only thing we still have to prove is that we can rearrange _",
    "@xmath177 _ into _ @xmath178 _ such that @xmath85 contains only rules of type 1 or 2 ( ren , ss ) and @xmath179 contains only rules of the type 4 ( annihilate2 ) .",
    "@xmath81 _ , and @xmath34 such that _ @xmath176 _ is a derivation in _",
    "@xmath13 _ , the segment _",
    "@xmath87 _ contains only rules of type 3 ( terminal ) and _ @xmath180 _ contains only rules of type 1 , 2 or 4 ( ren , ss , annihilate2 ) .",
    "if the derivation already satisfies the condition of the lemma then we are done .",
    "otherwise examine in order the productions in @xmath177 from end to the beginning until we encounter the first rule of type 4 : @xmath174 that violates the condition required by the theorem and at least one production of the type 1 or 2 has been used after it ( otherwise we have no violation ) .",
    "more exactly , prior to it only rules of type 1 or 2 were used and at least one such rule was used .",
    "that is @xmath181 and only rules of the type 1 or 2 have been used in @xmath182 , and only rules of the type 4 have been used in @xmath183 .",
    "because only rules of the type 1 or 2 ( which never have more than one symbol in the lhs ) have been used in @xmath182 it follows that there exists @xmath184such that @xmath185 and @xmath186 and @xmath187 .",
    "therefore we can rearrange the rewriting @xmath188 into @xmath189 . in this way we have obtained a derivation for @xmath148 in @xmath13 that violates the conclusion of the lemma in one place less than the initial derivation . since there is a finite number of steps in a derivation and therefore a finite number of places where",
    "the constraints can be violated it can be inferred that after a finite number of applications of the above - described `` swapping '' procedure we will obtain a derivation which satisfies the rules of the theorem .          _ then for any derivation @xmath34 such that @xmath80 , in @xmath13 , @xmath81 there exists a derivation @xmath176 such that @xmath192 and @xmath177 contains only rules of type 1 and @xmath87 contains only rules of type 2 ( terminal ) .",
    "_    _ proof .",
    "_ let @xmath34 such that @xmath80 _ in @xmath13 , @xmath81_. if the derivation already satisfies the condition of the lemma then we are done",
    ". otherwise examine in order the productions @xmath80 until we encounter a rule of type , say it is @xmath49 , such that there are still rules of type 1 used after it @xmath193 .",
    "because none of the rules in the grammar contain terminals in their lhs it follows that there exists @xmath194 such that @xmath195 and @xmath196 and @xmath197 .",
    "therefore we can rearrange the rewriting @xmath193 into @xmath198 . in this way we have obtained a derivation for @xmath34 in @xmath13 that violates the conclusion of the lemma in one place less than the initial derivation . since there is a finite number of steps in a derivation and therefore a finite number of places where",
    "the constraints can be violated it can be inferred that after finite number of application of the above - described `` swapping '' procedure we will obtain a derivation which satisfies the rules of the lemma .        1 .   _",
    "@xmath47 _ 2 .   _",
    "@xmath48 - and this is the only rule that has @xmath69 in the rhs and this is the only rule that has @xmath70 in the lhs .",
    "( strong - uniqueness ) _ 3 .   _",
    "@xmath49 - and this is the only rule that has @xmath70 on the lhs and there is no other rule that has @xmath71 on the rhs .",
    "( strong uniqueness ) _ 4 .   _",
    "@xmath50 - and this is the only rule that has @xmath72 in the rhs and this is the only rule that has @xmath73 in the lhs .",
    "( strong - uniqueness ) _    _ and furthermore for any derivation @xmath34 such that @xmath80 , in @xmath13 , @xmath81 there exists a derivation @xmath82 such that @xmath83 , @xmath84 and @xmath85 contains only rules of type 1 and 2 ( ren , ss ) , @xmath86 contains only rules of the type 1 , more particularly only reverse abstractions and type 4 ( ren(rabs ) , rss ) and @xmath87 contains only rules of type 3 ( terminal ) . _    _ proof sketch .",
    "_ by theorem 6 we can convert the grammar @xmath13 into a grammar @xmath14 in strong - gen - asnf - savitch .",
    "then we can convert such a grammar into a grammar @xmath44 in strong - gen - asnf as follows : for all @xmath199 introduce new nonterminals @xmath200 and add @xmath201 and @xmath202 and eliminate the original productions @xmath199 .",
    "furthermore , for all nonterminals @xmath203 in the new grammar , add new nonterminals @xmath204 , @xmath205 and @xmath206 and the production rules @xmath207 , @xmath208 , @xmath209 , @xmath210 , @xmath211 and @xmath212",
    ". we can easily show using techniques already developed that the new grammar will generate the same language as the previous one and that it respects the _ strong - uniqueness _ for rules of type 2 , 3 and 4 .",
    "furthermore if we take a derivation for a string @xmath34 in the grammar @xmath14 in the strong - gen - asnf - savitch @xmath169 then from theorem 7 we know that we can convert it into a derivation that uses first only ren and ss in the phase 1 , then only annihilate2 in phase 2 and finally only terminal in phase 3 .",
    "we can take such a derivation and replace the usage of the annihilate2 productions in phase 2 with productions as above in order to get a derivation in @xmath44 .",
    "note that the productions introduced above are meant to transform the annihilate2 into rules that follow the strong - gen - asnf , and the only types of rules that we have introduced are rss with strong - uniqueness holding and ren of the rabs type .",
    "this proves the theorem .",
    "we have therefore proved that for each general grammar @xmath13 we can transform it both in a strong - gen - asnf - savitch and a strong - gen - asnf such that the derivation ( explanation in structural induction terminology ) of any terminal string @xmath34 can be organized in three phases such that : in phase 1 we use only productions that grow ( or leave the same ) the size of the intermediate string ; in phase 2 we use only productions that shrink ( or leave the same ) the size of the intermediate string and in phase 3 we use only terminal productions .",
    "naively , at first sight , it may seem that this is a way to solve the halting problem and therefore maybe some mistake has been made in the argument .",
    "however this is not the case , as the key question is when to stop expanding the current string and start shrinking and this problem still remains . in a certain sense",
    "these two theorems are a way to give a clear characterization of the issue associated with solving the halting problem : namely that of knowing when to stop expanding . in the case of grammars in arbitrary forms",
    "the issue is a little bit more muddled as we can have a succession of grow and shrink phases but we have shown that if the form is constrained in a certain ways then we only need one grow and one shrink . note also that during the grow phase in both theorems we are only using context free productions .      in this section we will review the structural induction process in the light of the concepts and results obtained for generative grammars and discuss the role of each of the operators .",
    "then we move on to make some more connections with already existing concepts in statistics and philosophy and show how the asnf affords for very precise characterizations of these concepts .    in the context of generative grammars structural induction",
    "is concerned with the following question : given a sequence of observations @xmath34 we attempt to find a theory ( grammar ) that explains @xmath34 and simultaneously also the explanation ( derivation ) @xmath33 . in a local way",
    "we may think that whenever we have a production rule @xmath35 that @xmath8 explains @xmath9 . in a bottom",
    "up - data driven way we may proceed as follows : first introduce for every observable @xmath71 a production @xmath49 .",
    "these are just convenience productions that bring the observables into the realm of internal variables in order to make everything more uniform .",
    "the association is unique ( one to one and onto ) and once we have done it we can forget about the existence of observables ( terminals ) .",
    "this is only the role of the the terminal productions , and for this reason we will not mention them in future discussions as they are not true structural operations . with this in mind if we are to construct a theory in the gen - asnf we can postulate any of the following laws :    1 .",
    "ss - @xmath48 - superstructuring . takes two internal variables @xmath76 and @xmath72 that occur within proximity of each other ( adjacent ) and labels the compound . from now on the shorter name @xmath70 can be used instead on the compound .",
    "this is the sole role of superstructuring - to give a name to a bigger compound in order to facilitate shorter explanations at latter stages .",
    "abs - @xmath88 - abstraction .",
    "makes a name for the occurrence of either of the variables @xmath76or @xmath72 .",
    "this may allow for the potential bundling of two productions , the first one involving @xmath76 and the other one involving @xmath72 while otherwise being the same , into a production involving only @xmath70 .",
    "the role of abstraction is to give a name to a group of entities ( we have chosen two for simplicity ) in order to facilitate more general explanations at latter stages which in turn will produce more compact theories .",
    "rss - @xmath50 - reverse superstructuring - invent up to two new internal variables ( may also use already existing ones ) which if they occur within proximity of each other together they `` explain '' the internal variable @xmath72 .",
    "rabs - @xmath89 , @xmath90 - reverse abstraction - invent new internal variables ( may also use already existing ones ) such that either of them can `` explain '' the internal variable @xmath72 ( we have chosen two variables for simplicity ) .    in the next subsection",
    "we review two possible reasons for creating hidden variables and we identify them with reverse abstraction and reverse superstructuring . because in our gen - asnf we do not have other types of reasons for creating hidden variables as all the other production introduce convenience renamings only we can infer under the computationalistic assumption that these two are the essential reasons for postulating hidden variables and any other reasons must be derivative .",
    "this produces a definite structural characterization of the rationales behind inventing hidden variables .        1 .   ( * or * type ) - [ multiple alternative hidden causes ] the or type corresponds to the case when some visible effect can have multiple hidden causes @xmath91 , @xmath92 .",
    "this case corresponds in our formalism to the notion of reverse abstraction .",
    "one typical example of this is : the grass is wet , hence either it rained last night or the sprinkler was on . in the statistical literature the models that use these types of hidden variables are known as mixture models @xcite .",
    "( * t - and * type ) - [ multiple concurrent hidden causes ] the t - and type , i.e. , topological and type , of which the and is a particular case .",
    "this corresponds to the case when one visible effect has two hidden causes that both have to occur within proximity ( hence the topological prefix ) of each other in order for the visible effect to be produced .",
    "this corresponds in our formalism to the case of reverse superstructuring .",
    "one example of this case is the annihilation of an electron and a positron into a photon . @xmath213 as illustrated by the following feynman diagram . in the diagram",
    "the annihilation is followed by a disintegration which in our formalism will be represented by a superstructure @xmath214 .",
    "note that the electron positron annihilation is a rss and not an annihilate2 as in the savitch type of theorems . in a certain sense one of the arguments for using rss versus annihilate2 is also the fact that physical processes always have a byproduct despite carrying potentially misleading names such as annihilation , or the byproduct being energetic rather than material .",
    "nevertheless , since our reasons for preferring gen - asnf versus gen - asnf - savitch alternative are at best aesthetic / intuitive reasons it should always be kept in mind as a possible alternative . in the statistical / graphical models",
    "literature the particular case of and hidden explanations is the one that introduces edges between hidden variables in the depedence graph @xcite , @xcite , @xcite .        our analysis of the turing equivalent formalism of generative grammars written in the asnf has evidenced them as the only needed types and we can infer under the computationalistic assumption that these are the only two essential reasons for postulating hidden variables and any other reasons must be derivative .      since rss and",
    "rabs involve the postulation of hidden variables , and we have discussed the perils associated with it , one alternative is to choose to use only abstraction and superstructuring . we propose that this in fact this characterizes the radical positivist @xcite stance which allows for empirical laws only . after we rule out rss and rabs",
    "since they may introduce hidden variables we are left with abs and ss and this produces our proposed characterization of the radical positivist position and what we mean by empirical laws under the computationalistic assumption .",
    "the internal variables created by abstraction and superstructuring are going to be just convenient notations for aggregates of input data but nothing else : superstructuring is just convenient labeling of already existing structures for the sake of brevity and abstraction on the other hand aggregates a group of variables into a more general type so that we can produce more encompassing laws but with coarser granularity .",
    "an explanation of a stream of observations @xmath34 in the radical positivist theory of the world ( or least a piece of it ) will look like the picture in figure [ fig : theory - of - the ] - top . in this picture",
    "the atoms are the observations and the theory of the universe is mainly a theory of how the observables are grouped into classes ( abstractions ) and how smaller chunks of observations are tied together into bigger ones ( superstructures )",
    ". the laws of the radical positivist theory are truly empirical laws as they only address relations among observations .    however using only these two operators we can not attain the power of turing machines .",
    "more precisely , the resulting types of grammars will be a strict subset of context free grammars , ( since cfg contain ss , and ren(abs+rabs ) ) . next we will examine how any theory of the world may look like from the most general perspective when we do allow hidden variables .",
    "an explanation of a stream of observations @xmath33 in the more general hidden variable theory of the world is illustrated in figure [ fig : theory - of - the ] - bottom .",
    "the atoms are the hidden variables and their organization is again in turn addressed by the abstraction and superstructuring but also reverse abstraction .",
    "this part is basically a context free part since all the productions are context free .",
    "observations are a derivative byproduct obtained from a richer hidden variable state description by a reduction : either of size - performed by reverse superstructuring or of information - performed by reverse abstraction .",
    "the hidden variables theory of the world picture is an oversimplification of the true story , in general we may have a set of alternations of ren+ss and rabs+rss rather than just one .",
    "however as we have shown in theorem 8 we can turn any grammar into a grammar in strong - gen - asnf such that any explanation done in three phases only ( as illustrated in figure [ fig : theory - of - the ] ) :      whether additional separations can be made , e.g. , if we can push all the rabs from the first phase into the second phase and make the first phase look like the one in the radical positivist story ( i.e. , using only abs+ss ) is a topic of further investigation .",
    "we take this opportunity to proposed it as a conjecture .      1 .   _",
    "@xmath47 _ 2 .   _",
    "@xmath48 - and this is the only rule that has @xmath69 in the rhs and this is the only rule that has @xmath70 in the lhs ( strong - uniqueness ) . _",
    "@xmath49 - and this is the only rule that has @xmath70 on the lhs and there is no other rule that has @xmath71 on the rhs .",
    "( strong uniqueness ) _ 4 .   _",
    "@xmath50 - and this is the only rule that has @xmath72 in the rhs and this is the only rule that has @xmath73 in the lhs ( strong - uniqueness ) . _    _ and furthermore for any derivation @xmath34 such that @xmath80 , in @xmath13 , @xmath81 there exists a derivation @xmath82 such that @xmath83,@xmath84 and @xmath85 contains only rules of type 1 , more particularly only abstractions , and type 2 ( abs , ss ) , @xmath86 contains only rules of the type 1 , more particularly only reverse abstractions , and type 4 ( rabs , rss ) and @xmath87 contains only rules of type 3 ( terminal ) . _        in a certain sense the conjecture can be seen as way to try to salvage as much as we can from the radical positivist position by saying that in principle it is right with the caveat that the atoms should be internal(hidden ) variables rather than observations .",
    "if we were god ( here used in the scientifico - philosophical sense - i.e. , somebody which knows the laws of the universe and has access to the full hidden state of it ) then we would be able to stop our explanation of the current state after phase 1 , which would use only abstractions and superstructures ( the radical positivist position ) .",
    "however since we are mere mortals and all we are able to perceive are observables which are just a simplified small reflection of the current hidden state of the world there is a the need for reduction operations : reduction in size - performed by reverse superstructuring and reduction of information - performed by reverse abstraction .",
    "this is then followed by the one to one correspondence between some internal variable and observables ( terminals in grammar terminlogy ) .    our main claim",
    "so far is that we can rewrite any general grammar in gen - asnf , that is using only abs , ss , rabs and rss . in the next section",
    "we will examine a statement that was made by the philosopher david hume more that 200 years ago in the light of the gen - asnf theorem and propose that they are more or less equivalent under the computationalistic assumption .",
    "we then examine the developments that occured in the meantime in order to facilitate our proof of hume s claim .      _",
    " i do not find that any philosopher has attempted to enumerate or class all the principles of association [ of ideas ] . ... to me , there appear to be only three principles of connexion among ideas , namely , _ * * _ resemblance _ * * _ _ , _ _ * _ contiguity _ * _ in time or place , and _ * _ cause _ * _ and _ * _ effect  _ * _ - david hume , enquiry concerning human understanding , iii(19 ) , 1748 .",
    "@xcite _",
    "if we are to substitute resemblance for abstraction ( as resemblance / similarity is the main criterion for abstraction ) , contiguity in time or place for superstructuring ( as the requirement for superstructuring is proximity - in particular spatial or temporal ) and cause and effect for the two types of hidden variable explanations then the gen - asnf theorem is the proof of a more the two hundred years old claim .",
    "the main developments that have facilitated this result are :    1 .",
    "the church - turing thesis -1936 @xcite ( i.e. , the computationalistic assumption ) which allowed us to characterize what a theory of the world is , i.e. , an entity expressed in a turing equivalent formalism",
    ". 2 .   the generative grammars - 1957 @xcite the development of the compositional formalism of generative grammars which is turing equivalent .",
    "3 .   developments in understanding the structure of generative grammars - the kuroda normal form 1964 @xcite and general kuroda normal form @xcite .",
    "4 .   the gen - asnf theorems proved in this paper .",
    "furthermore the elucidation of the two types of causal explanation ( alternative - reverse abstraction ( rabs ) and topological conjunctive - reverse superstructuring ( rss ) ) is an additional merit of gen - asnf theorem .",
    "it should be mentioned also that we became aware of hume s claim after we have already stated the gen - asnf theorem but prior to it s proof in the full generality .",
    "we were led to it in a certain sense by similar intuitions and investigations into the nature of the structural induction process as david hume s .",
    "once aware of it , this became an additional supporting argument for the fact that the proof may be a feasible enterprise ."
  ],
  "abstract_text": [
    "<S> induction is the process by which we obtain predictive laws or theories or models of the world . </S>",
    "<S> we consider the structural aspect of induction . </S>",
    "<S> we answer the question as to whether we can find a finite and minmalistic set of operations on structural elements in terms of which any theory can be expressed . </S>",
    "<S> we identify _ abstraction _ ( grouping _ similar _ entities ) and super - structuring ( combining topologically e.g. , spatio - temporally close entities ) as the essential structural operations in the induction process . </S>",
    "<S> we show that only two more structural operations , namely , _ reverse abstraction _ and _ reverse super - structuring _ ( the duals of abstraction and super - structuring respectively ) suffice in order to exploit the full power of turing - equivalent generative grammars in induction . </S>",
    "<S> we explore the implications of this theorem with respect to the nature of hidden variables , radical positivism and the 2-century old claim of david hume about the principles of _ connexion _ among ideas .    * technical report *    department of computer science , iowa state university , ames , ia , usa </S>"
  ]
}