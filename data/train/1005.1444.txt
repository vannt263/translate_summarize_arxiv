{
  "article_text": [
    "the self - avoiding walk ( saw ) model is an important model in statistical physics  @xcite .",
    "it models the excluded - volume effect observed in real polymers , and exactly captures universal features such as critical exponents and amplitude ratios .",
    "it is also an important model in the study of critical phenomena , as it is the @xmath4 limit of the @xmath5-vector model , which includes the ising model ( @xmath6 ) as another instance .",
    "indeed , one can straightforwardly simulate saws in the infinite volume limit , which makes this model particularly favorable for the calculation of critical parameters .",
    "exact results are known for self - avoiding walks in two dimensions  @xcite and for @xmath7 ( mean - field behavior has been proved for @xmath8  @xcite ) , but not for the most physically interesting case of @xmath9 .",
    "the pivot algorithm is a powerful and oft - used approach to the study of self - avoiding walks , invented by lal  @xcite and later elucidated and popularized by madras and sokal  @xcite .",
    "the pivot algorithm uses pivot moves as the transitions in a markov chain which proceeds as follows . from an initial saw of length @xmath0 , such as a straight rod ,",
    "new @xmath0-step walks are successively generated by choosing a site of the walk at random , and attempting to apply a lattice symmetry operation , or pivot , to one of the parts of the walk ; if the resulting walk is self - avoiding the move is accepted , otherwise the move is rejected and the original walk is retained . thus a markov chain is formed in the ensemble of saws of fixed length ; this chain satisfies detailed balance and is ergodic , ensuring that saws are sampled uniformly at random .",
    "one typical use of the pivot algorithm is to calculate observables which characterize the size of the saws : the squared end - to - end distance @xmath10 , the squared radius of gyration @xmath11 , and the mean - square distance of a monomer from its endpoints @xmath12 . to leading order",
    "we expect the mean values of these observables over all saws of @xmath0 steps , with each saw is given equal weight , to be @xmath13 ( @xmath14 ) , with @xmath15 a universal critical exponent .",
    "for @xmath0-step saws , the implementation of the pivot algorithm due to madras and sokal has estimated mean time per attempted pivot of @xmath16 on @xmath17 and @xmath18 on @xmath19 ; performance was significantly improved by kennedy  @xcite to @xmath20 and @xmath21 respectively .    in this article",
    ", we give a detailed description of a new data structure we call the saw - tree .",
    "this data structure allows us to implement the pivot algorithm in a highly efficient manner : we present a heuristic argument that the mean time per attempted pivot is @xmath1 on @xmath17 and @xmath19 , and numerical experiments which show that for walks of up to @xmath22 steps the algorithmic complexity is well approximated by @xmath3 .",
    "this improvement enables the rapid simulation of walks with many millions of steps .    in a companion article  @xcite",
    ", we describe the algorithm in general terms , and demonstrate the power of the method by applying it to the problem of calculating the critical exponent @xmath15 for three - dimensional self - avoiding walks .    thus far",
    "the saw - tree has been implemented for @xmath17 , @xmath19 , and @xmath23 , but it can be straightforwardly adapted to other lattices and the continuum , as well as polymer models with short - range interactions .",
    "other possible extensions would be to allow for branched polymers , confined polymers , or simulation of polymers in solution .",
    "we intend to implement the saw - tree and associated methods as an open source software library for use by researchers in the field of polymer simulation .",
    "madras and sokal  @xcite demonstrated , through strong heuristic arguments and numerical experiments , that the pivot algorithm results in a markov chain with short integrated autocorrelation time for global observables .",
    "the pivot algorithm is far more efficient than markov chains which utilize local moves ; see @xcite for detailed discussion .    the implementation of the pivot algorithm by madras and sokal utilized a hash table to record the location of each site of the walk .",
    "they showed that for @xmath0-step saws the probability of a pivot move being accepted is @xmath24 , with @xmath25 dimension - dependent but close to zero ( @xmath26 ) .",
    "as accepted pivots typically result in a large change in global observables such as @xmath10 , this leads to the conclusion that the pivot algorithm has integrated autocorrelation time @xmath27 , with possible logarithmic corrections .",
    "in addition , they argued convincingly that the cpu time per successful pivot is @xmath28 for their implementation . throughout this article we work with the mean time per attempted pivot , @xmath29 , which for the madras and sokal implementation is @xmath30 .",
    "madras and sokal argued that @xmath28 per successful pivot is best possible because it takes time @xmath28 to merely write down an @xmath0-step saw .",
    "kennedy  @xcite , however , recognized that it is _ not _ necessary to write down the saw for each successful pivot , and developed a data structure and algorithm which cleverly utilized geometric constraints to break the @xmath28 barrier . in this paper",
    ", we develop methods which further improve the use of geometric constraints to obtain a highly efficient implementation of the pivot algorithm .",
    "we have efficiently implemented the pivot algorithm via a data structure we call the saw - tree , which allows rapid monte carlo simulation of saws with millions of steps .",
    "this new implementation can also be adapted to other models of polymers with short - range interactions , on the lattice and in the continuum , and hence promises to be widely useful .",
    "the heart of our implementation of the algorithm involves performing intersection tests between `` bounding boxes '' of different sub - walks when a pivot is attempted . in @xcite",
    "we generated large samples of walks with up to @xmath31 steps , but for the purpose of determining the complexity of our algorithm we have also generated smaller samples of walks of up to @xmath32 steps . for @xmath33 , the mean number of intersection tests needed per attempted pivot is remarkably low : 39 for @xmath17 , 158 for @xmath19 , and 449 for @xmath23 .    in sec .",
    "[ sec : complexity ] we present heuristic arguments for the asymptotic behavior of the mean time per attempted pivot for @xmath0-step saws , @xmath29 , and test these predictions with computer experiments for @xmath34 .",
    "we summarize our results in table  [ tab : performance ] ; note that @xmath35 indicates @xmath36 is bounded above by @xmath37 asymptotically , @xmath38 indicates @xmath37 dominates @xmath36 , @xmath39 indicates @xmath36 dominates @xmath37 , and @xmath40 indicates @xmath37 bounds @xmath36 both above and below . for comparison , we also give the algorithmic complexity of the implementations of madras and sokal  @xcite , and kennedy  @xcite . in sec .",
    "[ sec : complexityhighdim ] , we develop an argument for the complexity of our algorithm on @xmath23 ; this same argument leads to an estimate for the performance of the implementation of madras and sokal on @xmath23 .",
    "we do not know the complexity of kennedy s implementation for @xmath23 and @xmath41 with @xmath42 , but we suspect it is @xmath43 with @xmath44 , with possible logarithmic corrections .",
    "ccccc lattice & madras and sokal & kennedy & + & & & predicted & observed    ' '' ''",
    "+ @xmath17 & @xmath16 & @xmath20 & @xmath1 & @xmath2    ' '' ''     + @xmath19 & @xmath18 & @xmath21 & @xmath1 & @xmath3 + @xmath23 & @xmath45 & ? & @xmath2 & @xmath46 + @xmath41 , @xmath42 & @xmath28 & ? &",
    "@xmath47 & ?    ' '' ''     +    our implementation is also fast in practice : for simulations of walks of length @xmath48 on @xmath19 , our implementation is almost 400 times faster when compared with kennedy s , and close to four thousand times faster when compared with that of madras and sokal .",
    "we have measured @xmath29 for each implementation over a wide range of @xmath0 on @xmath17 , @xmath19 , and @xmath23 , and report these results in sec .",
    "[ sec : comparison ] .      in sec .",
    "[ sec : implementation ] , we give a detailed description of the saw - tree data structure and associated methods which are required for implementing the pivot algorithm .    in sec .",
    "[ sec : complexity ] we present heuristic arguments that @xmath29 for self - avoiding walks on @xmath17 and @xmath19 is @xmath1 , and numerical evidence which shows that for walks of up to @xmath22 steps @xmath29 is @xmath2 for @xmath17 and @xmath3 for @xmath19 .",
    "we also discuss the behavior of our implementation for higher dimensions .    in sec .",
    "[ sec : initialization ] we discuss initialization of the markov chain , including details of how many data points are discarded .",
    "we also explain why it is highly desirable to have a procedure such as * pseudo_dimerize * for initialization ( pseudo - code in sec .",
    "[ sec : implementationhigh ] ) when studying very long walks , and show that the expected running time of * pseudo_dimerize * is @xmath49 .    in sec .",
    "[ sec : autocorrelation ] we discuss the autocorrelation function for the pivot algorithm , and show that the batch method for estimating confidence intervals is accurate , provided the batch size is large enough .",
    "this confirms the accuracy of the confidence intervals for our data published in @xcite .    finally , in sec .",
    "[ sec : comparison ] we compare the performance of our implementation with previous implementations of the pivot algorithm  @xcite .",
    "we show that the saw - tree implementation is not only dramatically faster for long walks , it is also faster than the other implementations for walks with as few as 63 steps .",
    "self - avoiding walks ( saws ) are represented as binary trees ( see e.g. @xcite ) via a recursive definition ; we describe here the saw - tree data structure and associated methods using pseudo - code .",
    "these methods can be extended to include translations , splitting of walks , joining of walks , and testing for intersection with surfaces . indeed , for saw - like models ( those with short range interactions )",
    ", it should be possible to implement a wide variety of global moves and tests for saws of @xmath0 steps in time @xmath3 or better .",
    "it is also possible to parallelize code by , for example , performing intersection testing for a variety of proposed pivot moves simultaneously .",
    "parallelization of the basic operations is also possible , but would be considerably more difficult to implement .",
    "in this section we give precise pseudo - code definitions of the data structure and algorithms . for reference , r - trees  @xcite and bounding volume hierarchies ( see e.g. @xcite ) are data structures which arise in the field of computational geometry which are related to the saw - tree .      for self - avoiding walks ,",
    "the self - avoidance condition is enforced on sites rather than bonds , and this means that the saw - tree is naturally defined in terms of sites .",
    "this representation also has the advantage that the basic objects , sites , have physical significance as they correspond to the monomers in a polymer .",
    "the only consequences of this choice are notational : a saw - tree of @xmath5 sites has @xmath50 steps .",
    "we adopt this notation for the remainder of this section . when discussing the complexity of various algorithms we will still use @xmath0 rather than @xmath5 in order to be consistent with the companion article and other sections of the present work .",
    "an @xmath5-site saw on @xmath41 is a mapping @xmath51 with @xmath52 for each @xmath53 ( @xmath54 denotes the euclidean norm of @xmath55 ) , and with @xmath56 for all @xmath57 .",
    "saws may be either rooted or unrooted ; our convention is that the saws are rooted at the site which is at @xmath58 ( unit vector in the first coordinate direction ) , i.e @xmath59 .",
    "this convention simplifies some of the algebra involved in merging sub - walks , and is represented visually , e.g. in fig .",
    "[ fig : example ] , by indicating a dashed bond from the origin to the first site of the walk .",
    "( 0,0 ) circle ( 3pt ) ; ( 1,0 ) circle ( 3pt ) ; ( 1,1 ) circle ( 3pt ) ; ( 2,1 ) circle ( 3pt ) ; ( 3,1 ) circle ( 3pt ) ; ( 3,0 ) circle ( 3pt ) ; ( 0,0 )  ( 1,0 ) ; ( 1,0 )  ( 1,1 )  ( 2,1 )  ( 3,1 )  ( 3,0 ) ;    we denote the group of symmetries of @xmath41 as @xmath60 , which corresponds to the dihedral group for @xmath61 , and the octahedral group for @xmath9 .",
    "this group acts on coordinates by permuting any of the @xmath62 coordinate directions ( @xmath63 choices ) , and independently choosing the orientation of each of these coordinates ( @xmath64 choices ) ; thus @xmath60 has @xmath65 elements .",
    "the group of lattice symmetries for @xmath19 therefore has 48 elements , and we use all of them except the identity as potential pivot operations ; other choices are possible",
    ". we can represent the symmetry group elements as @xmath66 orthogonal matrices , and the symmetry group elements act on the coordinates written as column vectors .",
    "we also define the ( non - unique ) pivot sequence representation of a self - avoiding random walk on @xmath41 as a mapping from the integers to @xmath60 , @xmath67 .",
    "the sequence elements @xmath68 represent changes in the symmetry operator from site @xmath69 to site @xmath53 , while @xmath70 represent absolute symmetry operations , i.e. relative to the first site of the walk",
    ". we can relate this to the previous definition of a self - avoiding walk in terms of sites via the recurrence relations @xmath71 with @xmath72 , and initial conditions @xmath73 , @xmath74 , and @xmath59 .    as noted by madras and sokal ( footnote 10 , p132 in @xcite ) , for the pivot sequence representation it is possible to perform a pivot of the walk in time @xmath1 by choosing a site @xmath53 uniformly at random , and multiplying @xmath68 by a ( random ) symmetry group element .",
    "however , the pivot sequence representation does no better than the hash table implementation of madras and sokal if we wish to determine if this change results in a self - intersection , or if we wish to calculate global observables such as @xmath10 for the updated walk .",
    "forgetting for the moment the self - avoidance condition , and using the fact that @xmath60 has @xmath75 elements , we see that for random walks of @xmath5 sites there are @xmath76 possible pivot sequences , while there are only @xmath77 random walks .",
    "this suggests that each random walk is represented by @xmath78 pivot sequences .",
    "this can be derived directly by noting that given a pivot sequence @xmath79 , we can insert a pivot @xmath80 which preserves the vector @xmath58 , between two elements @xmath81 and @xmath82 as follows @xmath83 without altering the walk .",
    "the number of symmetry group elements which preserve @xmath58 is @xmath84 , and there are @xmath50 locations where these symmetry group elements can be inserted , leading to @xmath78 equivalent pivot representations for a random walk of @xmath5 sites . for @xmath61 , given @xmath85 the recurrence relations in eqs .",
    "[ eq : qrecurrence ] and [ eq : omegarecurrence ] only fix one of the two non - zero elements in @xmath68 , leaving the choice of sign for the other non - zero element free . for our example walk @xmath86 we have @xmath87 we give three of the 16 equivalent choices for the pivot representation of @xmath86 , the first involving only proper rotations , the second with improper rotations for @xmath68 with @xmath88 , and the third with proper and improper rotations alternating : @xmath89    the non - uniqueness of the pivot representation for saws is due to the fact that the monomers ( occupied sites ) are invariant under the symmetry group @xmath60 , i.e. it is not possible to distinguish the different orientations of a single site .",
    "the non - uniqueness is of no practical concern , but perhaps hints that it may be possible to derive a more succinct and elegant representation of walks than the mapping to @xmath60 defined here .",
    "the merge operation is the fundamental operation on saws which allows for the binary tree data structure we call the saw - tree .",
    "this is related to the concatenation operation defined , for example , in sec .",
    "1.2 of @xcite ; for concatenation the number of bonds is conserved , whereas for the merge operation the number of sites is preserved . merging two saws with @xmath5 and @xmath90 sites",
    "respectively results in a saw with @xmath91 sites .",
    "it is convenient to also include a pivot operation , @xmath80 , when merging the walks , and the result of merging two walks @xmath92 and @xmath93 is @xmath94    the merge operation is represented visually in fig .",
    "[ fig : merge ] . to merge two sub - walks ,",
    "pin the open circle of the left - hand sub - walk to the origin , and then pin the open circle of the right - hand sub - walk to the tail end of the left - hand sub - walk .",
    "finally , apply the symmetry @xmath80 to the right - hand sub - walk , using the second pin as the pivot .",
    "( 0,0 ) circle ( 3pt ) ; ( 1,0 ) circle ( 3pt ) ; ( 1,1 ) circle ( 3pt ) ; ( 0,0 )  ( 1,0 ) ; ( 1,0 )  ( 1,1 ) ;    ( 1.5,0 ) node[q ] @xmath95 ;    ( 2,0 ) circle ( 3pt ) ; ( 3,0 ) circle ( 3pt ) ; ( 3,-1 ) circle ( 3pt ) ; ( 2,0 ) ",
    "( 3,0 ) ; ( 3,0 ) ",
    "( 3,-1 ) ;    ( 3.5,0.0 ) node @xmath96 ;    ( 4,0 ) circle ( 3pt ) ; ( 5,0 ) circle ( 3pt ) ; ( 5,1 ) circle ( 3pt ) ; ( 6,1 ) circle ( 3pt ) ; ( 6,0 ) circle ( 3pt ) ; ( 4,0 )  ( 5,0 ) ; ( 5,0 ) ",
    "( 6,1 )  ( 6,0 ) ;    ( 0,0 ) circle ( 3pt ) ; ( 1,0 ) circle ( 3pt ) ; ( 1,1 ) circle ( 3pt ) ; ( 0,1 ) circle ( 3pt ) ; ( 0,0 )  ( 1,0 ) ; ( 1,0 )  ( 1,1 )  ( 0,1 ) ;    ( 1.5,0.5 ) node[q ] @xmath97 ; ( 1.5,0.58 ) node @xmath98 ;    ( 2,0 ) circle ( 3pt ) ; ( 3,0 ) circle ( 3pt ) ; ( 3,1 ) circle ( 3pt ) ; ( 3,2 ) circle ( 3pt ) ; ( 2,0 ) ",
    "( 3,0 ) ; ( 3,0 ) ",
    "( 3,2 ) ;    ( 3.5,0.5 ) node @xmath96 ;    ( 5,0 ) circle ( 3pt ) ; ( 6,0 ) circle ( 3pt ) ; ( 6,1 ) circle ( 3pt ) ; ( 5,1 ) circle ( 3pt ) ; ( 4,1 ) circle ( 3pt ) ; ( 4,0 ) circle ( 3pt ) ; ( 4,-1 ) circle ( 3pt ) ; ( 5,0 ) ",
    "( 6,0 ) ; ( 6,0 ) ",
    "( 4,-1 ) ;      here we define various quantities which are necessary for implementing our data structure and for calculating observables such as the mean - square end - to - end distance , @xmath10 .",
    "we first define various quantities which will be used to calculate observables which measure the size of a walk : @xmath99    a bounding box of a walk is a convex shape which completely contains the walk .",
    "the obvious choice of shape for @xmath41 is the rectangular prism with faces formed from the coordinate planes @xmath100 , @xmath101 , with the constants chosen so that the faces of the prism touch the walk , i.e. the bounding box has minimum extent .",
    "other choices are possible , e.g. other planes can be used such as @xmath102 , @xmath103 , and have the advantage of matching the shape of the walk more closely , but at the expense of more computational overhead and memory consumption . with closer fitting bounding boxes ,",
    "fewer intersection tests need to be performed to ascertain whether two walks intersect . however , in practice , the coordinate plane rectangular prism implementation was fastest on our computer hardware ( by a narrow margin ) , and has the benefit that it is straightforward to implement .",
    "the choice of bounding box for continuum models is not as obvious ; possibilities include spheres and oriented rectangular prisms .",
    "we note that the choice of bounding box shape determines the maximum number of sites , @xmath104 , a saw can have so that it is guaranteed that its bounding box contains the sites of the saw and no others .",
    "suppose we are given two saws for which the bounding boxes overlap : if each of the walks has @xmath104 or fewer sites , we can be certain that the two walks intersect , while if at least one of the walks has more than @xmath104 sites , it may be that the walks do not intersect .",
    "the value of @xmath104 determines the cut - off for intersection testing for the function * intersect * in sec .",
    "[ sec : implementationuser ] . for @xmath41 with @xmath105 ,",
    "the bounding box with faces formed from the coordinate planes leads to the maximum number of sites being two , as there are counter - examples with three sites ( e.g. the bounding box of @xmath106 also contains @xmath107 ) . for the bounding box with the faces being the coordinate planes and @xmath102 ,",
    "the maximum number of sites is three ( as the bounding box of @xmath108 also contains @xmath109 ) .",
    "it is possible to push this one step further so that the maximum number of sites is four , but five is not possible as we can see that @xmath86 in fig .",
    "[ fig : example ] has five sites , and an unvisited site on its convex hull , which must also therefore be interior to any bounding box .",
    "we write bounding boxes as a product of closed intervals , in the form @xmath110 $ ] , where the product is taken over @xmath111 . consider a walk @xmath112 , with bounding box @xmath113 , which is split into left- and right - hand sub - walks , @xmath114 and @xmath115 , with bounding boxes @xmath116 $ ] , and @xmath117 $ ] respectively .",
    "we can then define the union operation on bounding boxes , @xmath118\\cup[c_i , d_i]\\right ) \\nonumber \\\\ & = \\times [ \\inf\\{a_i , c_i\\},\\sup\\{b_i , d_i\\}].\\end{aligned}\\ ] ] the intersection operation is defined as @xmath119\\cap[c_i , d_i]\\right ) \\nonumber \\\\ & = \\times [ \\sup\\{a_i , c_i\\},\\inf\\{b_i , d_i\\}].\\end{aligned}\\ ] ] there is no guarantee that @xmath120 , and we adopt the convention that an interval @xmath121 $ ] is considered empty if @xmath122 . if any interval is empty , then the corresponding bounding box is also empty as it contains no interior sites .",
    "a quantity associated with the bounding box which we will find useful is the sum of the dimensions of the bounding box , * perim*. if @xmath123 $ ] , then we define @xmath124    for @xmath86 ( in fig .",
    "[ fig : example ] ) we have the following values for the various parameters : @xmath125\\times[0,1 ] ; \\\\",
    "\\mathbf{x}_{\\mathrm{e}}(\\omega_a ) & = ( 3,0 ) ; \\\\ \\mathbf{x}(\\omega_a ) & = ( 1,0 ) + ( 1,1 ) + ( 2,1 ) + ( 3,1 ) + ( 3,0 ) \\nonumber \\\\ & = ( 10,3);\\\\ x_2(\\omega_a ) & = ( 1,0)\\cdot(1,0 ) + ( 1,1)\\cdot(1,1 ) + ( 2,1)\\cdot(2,1 ) \\nonumber \\\\ & \\mathrel{\\phantom{= } } + ( 3,1)\\cdot(3,1 ) + ( 3,0)\\cdot(3,0 ) \\nonumber \\\\ & = 1 + 2 + 5 + 10 + 9 \\nonumber \\\\ & = 27.\\end{aligned}\\ ] ]    the observables @xmath126 , with @xmath127 , may be straightforwardly calculated from @xmath128 , @xmath129 , and @xmath130 .",
    "we give expressions for @xmath131 with @xmath132 , and note that higher euclidean - invariant moments can be obtained via @xmath133 ( @xmath134 ) ( these moments are calculated for @xmath17 in @xcite and for @xmath19 in @xcite ) .",
    "in addition we introduce another observable , @xmath135 , which measures the mean - square deviation of the walk from the endpoint @xmath136 .",
    "@xmath137 \\nonumber \\\\ & = \\frac{1}{2 } + \\frac{1}{2}\\mathbf{x}_{\\mathrm{e } } \\cdot \\mathbf{x}_{\\mathrm{e } }   - \\frac{1}{n } \\hat{\\mathbf{x}}_1 \\cdot \\mathbf{x }   - \\frac{1}{n } \\mathbf{x}_{\\mathrm{e } } \\cdot \\mathbf{x }   + \\frac{1}{n } x_2 \\\\ \\mathcal{r}_{\\mathrm{m}}^2 & = \\frac{1}{n}\\sum_{i=0}^{n-1 }    |\\omega(i)-\\omega(n-1)|^2 \\nonumber \\\\   & = \\mathbf{x}_{\\mathrm{e } } \\cdot \\mathbf{x}_{\\mathrm{e } }   - \\frac{2}{n } \\mathbf{x}_{\\mathrm{e } } \\cdot \\mathbf{x }   + \\frac{1}{n } x_2 \\label{eq : calrm}\\end{aligned}\\ ] ] in  @xcite , we chose to calculate @xmath135 rather than @xmath12 , as it has a slightly simpler expression , and relied on the identity @xmath138 . compared with @xmath12",
    ", @xmath135 has larger variance but smaller integrated autocorrelation time ( for the pivot algorithm ) . before performing the computational experiment in  @xcite",
    ", we believed that given the same number of pivot attempts the confidence intervals for @xmath139 and @xmath140 would be comparable .",
    "we have since confirmed that working directly with @xmath12 results in a standard error which is of the order of 17% smaller for @xmath9 , an amount which is not negligible ; in future experiments we will calculate @xmath12 directly .      here",
    "follow some comments to aid in the interpretation of the pseudo - code description of the saw - tree data structure and associated algorithms .",
    "* all calls are by value , following the c programming language convention .",
    "data structures are passed to methods via pointers .",
    "* pointers : the walk @xmath141 is a data structure whose member variables can be accessed via pointers , e.g. the vector for the end - to - end distance for the walk @xmath141 is @xmath142 .",
    "the left - hand sub - walk of @xmath141 is indicated by @xmath143 , and the right - hand sub - walk by @xmath144 .",
    "this notation is further extended by indicating @xmath145 for the left - hand sub - walk of @xmath143 , @xmath146 for the right - hand sub - walk of @xmath143 , etc .. * suggestive notation for member variables used to improve readability ; all quantities , such as `` @xmath128 '' ( the end - to - end vector ) must correspond to a particular walk @xmath141 .",
    "e.g. @xmath147 , @xmath148 ( i.e. , superscript @xmath149 indicates that @xmath150 is the end - to - end vector for the left sub - walk ) , @xmath151 , @xmath152 . *",
    "variables with subscript @xmath153 are used for temporary storage only .",
    "* comments are enclosed between the symbols / * and * / following the c convention .",
    "* boolean negation is indicated via the symbol `` ! '' , e.g. ! true = false .",
    "the key insight which has enabled a dramatic improvement in the implementation of the pivot algorithm is the recognition that _ sequences _ of sites and pivots can be replaced by _",
    "binary trees_. the @xmath5 leaves of the tree are individual sites of the walk , and thus encode no information , while each of the @xmath50 ( internal ) nodes of the tree contain aggregate information about all sites which are below them in the tree .",
    "we call this data structure the saw - tree , which may be defined recursively : a saw - tree of @xmath5 sites either has @xmath154 and is a leaf , or has a left child saw - tree with @xmath155 sites , and a right child saw - tree with the remaining @xmath156 sites .",
    "our implementation of the saw - tree node is introduced in table  [ tab : definition ] .",
    "a saw - tree consists of one or more saw - tree nodes in a binary tree structure ; the pointers @xmath143 and @xmath144 allow traversal from the root of the tree to the leaves , while @xmath157 allows for traversal from the leaves of the tree to the root .",
    "saw - trees are created by merging other saw - trees , with a symmetry operation acting on the right - hand walk . in particular ,",
    "any _ internal node _ @xmath141 may be expressed in terms of its left child @xmath143 , a symmetry operation @xmath158 , and its right child @xmath144 via a merge operation : @xmath159    lll + type & name & description    ' '' ''     + _ integer _ & @xmath5 & number of sites    ' '' ''     + _ saw - tree ptr _ & @xmath157 & parent + _ saw - tree ptr _ & @xmath143 & left - hand sub - walk + _ saw - tree ptr _ & @xmath144 & right - hand sub - walk + _ matrix _ & q & symmetry group element + _ vector _ & @xmath128 & @xmath136 + _ vector _ & @xmath129 & @xmath160 + _ integer _ & @xmath130 & @xmath161 + _ bounding box _ & @xmath162 & convex region    ' '' ''     +    the leaves of the saw - tree correspond to sites in a saw , and are thus labeled from 0 to @xmath50 .",
    "a binary tree with @xmath5 leaves has @xmath50 internal nodes , and we label these nodes from 1 to @xmath50 , so that the symmetry @xmath68 is to the left of @xmath163 . the symmetry @xmath164 is not part of the saw - tree as it is applied to the whole walk , and thus can not be used in a merge operation . for",
    "some applications it may be necessary to keep track of @xmath164 , e.g. when studying polymers in a confined region , but in @xcite this was not necessary .    assume that the end - to - end vectors , @xmath128 , and symmetry group elements , @xmath68 , for a saw - tree and its left and right children are given .",
    "if we know the location of the anchor site of the parent node , @xmath165 , along with the overall _ absolute _ symmetry group element @xmath166 being applied to the walk , we can then find the same information for the left and right children as follows : @xmath167 thus @xmath85 can be determined for any site @xmath53 by iteratively performing this calculation while following the ( unique ) path from the root of the saw - tree to the appropriate leaf . n.b .",
    ": @xmath165 must be updated before @xmath166 .",
    "we give explicit examples of saw - trees in appendix  [ sec : examplesawtrees ] . in fig .",
    "[ fig : sawtree_sequence ] , we give a saw - tree representation of a saw with @xmath5 sites which is precisely equivalent to the pivot sequence representation .",
    "we also give two equivalent representations of @xmath86 ( shown in fig .",
    "[ fig : example ] ) in figs .",
    "[ fig : sawtree_exampleaa ] and [ fig : sawtree_exampleab ] .",
    "conceptually we distinguish single - site walks ( individual sites ) , which reside in the leaves of the tree , from multi - site walks .",
    "in particular , the symmetry group element of a single site has no effect , and in the case where all monomers are identical then all single sites are identical .    if the saw - tree structure remains fixed it is not possible to rotate part of the walk by updating a single symmetry group element , in contrast to the pivot sequence representation .",
    "this is because when we change a symmetry group element in a given node , it only alters the position of sites which are in the right child of the node . to rotate the part of the walk with sites labeled @xmath168 and greater , we choose the @xmath169 internal node of the saw - tree from the left .",
    "we then need to alter the symmetry group element of this node , and also all nodes which are above and to the right of it in the saw - tree . if we select a random node then it will likely be near the leaves of the tree , and assuming that the saw - tree is balanced this means that on average @xmath3 symmetry group elements will need to be altered .    however , we note that the root node at the top of the tree has no parents , and therefore only one symmetry group element needs to be altered to rotate the right - hand part of the walk in this case . by utilizing tree - rotation operations , which alter the structure of the tree",
    "while preserving node ordering , it is possible to move the @xmath169 node to the root of the saw - tree .",
    "once this has been done , it _ is _ then possible to implement a rotation of part of the walk by updating a single symmetry group element . on average ,",
    "@xmath3 of these tree - rotation operations are required .",
    "binary trees are a standard data structure in computer science . by requiring trees to be balanced , i.e. so that the height of a tree with @xmath0 nodes is bounded by a constant times @xmath170",
    ", optimal bounds can be derived for operations such as insertion and deletion of nodes from the tree .",
    "we refer the interested reader to sedgewick  @xcite for various implementations of balanced trees , such as red - black balanced trees .",
    "we have the advantage that our saw - tree is , essentially , static , which means that we can make it perfectly balanced without the additional overhead of maintaining a balanced tree .",
    "included in this subsection are the primitive operations , which would generally not be called from the main program .",
    "left and right tree - rotations are modified versions of standard tree operations ; for binary trees , only ordering needs to be preserved , while for saw - trees the sequence of sites needs to be preserved , which means that symmetry group elements and other variables need to be modified .",
    "* procedure : *    [ cols=\"<,^ , < \" , ]     child node[leaf ] @xmath171 child node[leaf ] @xmath172    ;",
    "0    * acknowledgments * i thank ian enting , tony guttmann , gordon slade , alan sokal , and two anonymous referees for useful comments on the manuscript .",
    "i would also like to thank an anonymous referee for comments on an earlier version of this article which led to deeper consideration of the algorithmic complexity of * shuffle_intersect*. i am grateful to tom kennedy for releasing his implementation of the pivot algorithm under the gnu gplv2 licence .",
    "computations were performed using the resources of the victorian partnership for advanced computing ( vpac ) . financial support from the australian research council is gratefully acknowledged .",
    "0                                    lawler , g.f . ,",
    "schramm , o. , werner , w. : on the scaling limit of planar self - avoiding walk . in : fractal geometry and applications : a jubilee of benoit mandelbrot , part 2 .",
    "pure math .",
    "339364 . am .",
    ", providence ( 2004 )                            sergio caracciolo , anthony  j. guttmann , iwan jensen , andrea pelissetto , andrew  n. rogers , and alan  d. sokal , _ correction - to - scaling exponents for two - dimensional self - avoiding walks _ , j. stat .",
    "* 120 * ( 2005 ) , 10371100 .",
    "james  t. klosowski , martin held , joseph s.  b. mitchell , henry sowizral , and karel zikan , _ efficient collision detection using bounding volume hierarchies of @xmath173-dops _ , ieee t. vis .",
    "gr . * 4 * ( 1998 ) ,",
    "2136 .",
    "gregory  f. lawler , oded schramm , and wendelin werner , _ on the scaling limit of planar self - avoiding walk _",
    ", fractal geometry and applications : a jubilee of benoit mandelbrot , part 2 .",
    "pure math .",
    "soc . , providence , 2004 , pp ."
  ],
  "abstract_text": [
    "<S> the pivot algorithm for self - avoiding walks has been implemented in a manner which is dramatically faster than previous implementations , enabling extremely long walks to be efficiently simulated . </S>",
    "<S> we explicitly describe the data structures and algorithms used , and provide a heuristic argument that the mean time per attempted pivot for @xmath0-step self - avoiding walks is @xmath1 for the square and simple cubic lattices . </S>",
    "<S> numerical experiments conducted for self - avoiding walks with up to 268 million steps are consistent with @xmath2 behavior for the square lattice and @xmath3 behavior for the simple cubic lattice . </S>",
    "<S> our method can be adapted to other models of polymers with short - range interactions , on the lattice or in the continuum , and hence promises to be widely useful . 0 +   + * keywords * self - avoiding walk ; polymer ; monte carlo ; pivot algorithm    0    0 </S>"
  ]
}