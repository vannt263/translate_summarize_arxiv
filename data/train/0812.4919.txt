{
  "article_text": [
    "planar graphs are subject of wide research interest in graph theory .",
    "there are many generally hard problems which can be solved in polynomial time when considering planar graphs , e.g. , maximum clique , maximum cut , and subgraph isomorphism @xcite . for problems that remain np - hard on planar graphs , we often have efficient approximation algorithms .",
    "for example , the problems independent set , vertex cover , and dominating set admit an efficient linear time approximation scheme @xcite . the research for efficient algorithms for problems on planar graphs is still very intensive .",
    "many results on planar graphs can be extended to almost planar graphs , which can be defined in various ways .",
    "for example , we can consider possible embeddings of a graph in a surface other than the plane .",
    "the genus of a graph is the minimum number of handles that must be added to the plane to embed the graph without any crossings .",
    "although determining the genus of a graph is np - hard @xcite , the graphs with bounded genus are subjects of wide research .",
    "a similar property of graphs is their crossing number , i.e. , the minimum possible number of crossings with which the graph can be drawn in the plane . determining crossing number is also np - hard @xcite .    in @xcite cai",
    "introduced another notation to capture the distance of a graph @xmath2 from a graph class @xmath3 , based on the number of certain elementary modification steps .",
    "he defines the distance of @xmath2 from @xmath3 as the minimum number of modifying steps needed to make @xmath2 a member of @xmath3 . here , modification can mean the deletion or addition of edges or vertices .",
    "in this paper we consider the following question : given a graph @xmath2 and an integer @xmath0 , is there a set of at most @xmath0 vertices in @xmath2 , whose deletion makes @xmath2 planar ?",
    "it was proven by lewis and yannakakis in @xcite that the node - deletion problem is np - complete for every non - trivial hereditary graph property decidable in polynomial time .",
    "as planarity is such a property , the problem of finding a maximum induced planar subgraph is np - complete , so we can not hope to find a polynomial - time algorithm that answers the above question .",
    "therefore , following cai , we study the problem in the framework of parameterized complexity developed by downey and fellows @xcite .",
    "this approach deals with problems in which besides the input @xmath4 an integer @xmath0 is also given .",
    "the integer @xmath0 is referred to as the parameter . in many cases we can solve the problem in time @xmath5 . clearly , this is also true for the problem we consider .",
    "although this is polynomial time for each fixed @xmath0 , these algorithms are practically too slow for large inputs , even if @xmath0 is relatively small .",
    "therefore , the standard goal of parameterized analysis is to take the parameter out of the exponent in the running time .",
    "a problem is called _ fixed - parameter tractable _ ( fpt ) if it can be solved in time @xmath6 , where @xmath7 is a polynomial not depending on @xmath0 , and @xmath8 is an arbitrary function .",
    "an algorithm with such a running time is also called fpt . for more on fixed - parameter tractability",
    "see e.g. @xcite , @xcite or @xcite .",
    "the standard parameterized version of our problem is the following : given a graph @xmath2 and a parameter @xmath0 , the task is to decide whether deleting at most @xmath0 vertices from @xmath2 can result in a planar graph .",
    "such a set of vertices is sometimes called a set of _ apex vertices _ or _ apices _ , so we will denote the class of graphs for which the answer is ` yes ' by @xmath9 .",
    "we note that cai @xcite used the notation @xmath10 to denote this class .    in the parameterized complexity literature ,",
    "numerous similar node - deletion problems have been studied . a classical result of this type by bodlaender @xcite and downey and fellows @xcite states that the feedback vertex set problem , asking whether a graph can be made acyclic by the deletion of at most @xmath0 vertices , is fpt .",
    "the parameterized complexity of the directed version of this problem has been a long - standing open question , and it has only been proved recently that it is fpt as well @xcite .",
    "fixed - parameter tractability has also been proved for the problem of finding @xmath0 vertices whose deletion results in a bipartite graph @xcite , or in a chordal graph @xcite . on the negative side , the corresponding node - deletion problem for wheel - free graphs",
    "was proved to be w[2]-hard @xcite .",
    "considering the graph class @xmath9 , we can observe that this family of graphs is closed under taking minors .",
    "the celebrated graph minor theorem by robertson and seymour states that such families can be characterized by a set of excluded minors @xcite .",
    "they also showed that for each graph @xmath11 it can be tested in cubic time whether a graph contains @xmath11 as a minor @xcite .",
    "as a consequence , membership for such graph classes can be decided in cubic time .",
    "in particular , we know that there exists an algorithm with running time @xmath12 that can decide whether a graph belongs to @xmath9 . however , the proof of the graph minor theorem is non - constructive in the following sense .",
    "it proves the existence of an algorithm for the membership test that uses the excluded minor characterization of the given graph class , but does not provide any algorithm for determining this characterization .",
    "recently , an algorithm was presented in @xcite for constructing the set of excluded minors for a given graph class closed under taking minors , which yields a way to explicitly construct the algorithm whose existence was proved by robertson and seymour .",
    "we remark that it follows also from @xcite that an algorithm for testing membership in @xmath9 can be constructed explicitly .",
    "although these results provide a general tool that can be applied to our specific problem , no direct fpt algorithm has been proposed for it so far . in this paper",
    "we present an algorithm which decides membership for @xmath9 in @xmath13 time .",
    "note that the presented algorithm runs in quadratic time , and hence yields a better running time than any algorithm using the minor testing algorithm that is applied in the above mentioned approaches .",
    "moreover , if @xmath14 then our algorithm also returns a solution , i.e. , a set @xmath15 , @xmath16 such that @xmath17 is planar .",
    "the presented algorithm is strongly based on the ideas used by grohe in @xcite for computing crossing number .",
    "grohe uses the fact that the crossing number of a graph is an upper bound for its genus .",
    "since the genus of a graph in @xmath9 can not be bounded by a function of @xmath0 , we need some other ideas . as in @xcite , we exploit the fact that in a graph with large treewidth we can always find a large grid minor @xcite . examining the structure of the graph with such a grid minor , we can reduce our problem to a smaller instance . applying this reduction",
    "several times , we finally get an instance with bounded treewidth",
    ". then we make use of courcelle s theorem @xcite , which states that every graph property that is expressible in monadic second - order logic can be decided in linear time on graphs of bounded treewidth .",
    "the paper is organized as follows .",
    "section [ notation ] summarizes our notation , sect .",
    "[ algo_sketch ] outlines the algorithm , sect .",
    "[ phase_i ] and [ phase_ii ] describe the two phases of the algorithm .",
    "graphs in this paper are assumed to be simple , since both loops and multiple edges are irrelevant in the @xmath0-apex problem .",
    "the vertex set and edge set of a graph @xmath2 are denoted by @xmath18 and @xmath19 , respectively .",
    "the edges of a graph are unordered pairs of its vertices .",
    "if @xmath20 is a subgraph of @xmath2 then @xmath21 denotes the graph obtained by deleting @xmath20 from @xmath2 . for a set of vertices",
    "@xmath22 in @xmath2 , we will also use @xmath17 to denote the graph obtained by deleting @xmath22 from @xmath2 .",
    "a graph @xmath11 is a _ minor _ of a graph @xmath2 if it can be obtained from a subgraph of @xmath2 by contracting some of its edges . here _ contracting an edge _ @xmath23 with endpoints @xmath24 and @xmath25 means deleting @xmath23 , and then identifying vertices @xmath24 and @xmath25 .",
    "a graph @xmath11 is a _ subdivision _ of a graph @xmath2 if @xmath2 can be obtained from @xmath11 by contracting some of its edges that have at least one endpoint of degree two .",
    "or , equivalently , @xmath11 is a subdivision of @xmath2 if @xmath11 can be obtained from @xmath2 by replacing some of its edges with newly introduced paths such that the inner vertices of these paths have degree two in @xmath11 .",
    "we refer to these paths in @xmath11 corresponding to edges of @xmath2 as _ edge - paths_. a graph @xmath11 is a _ topological minor _ of @xmath2 if @xmath2 has a subgraph that is a subdivision of @xmath11 .",
    "we say that @xmath2 and @xmath20 are _ topologically isomorphic _ if they both are subdivisions of a graph @xmath11 .",
    "the @xmath26 _ grid _ is the graph @xmath27 where @xmath28 and @xmath29 . instead of giving a formal definition for the _ hexagonal grid _ of radius @xmath30 , which we will denote by @xmath31 , we refer to the illustration shown in fig .",
    "[ fig_hexa ] .",
    "a _ cell _ of a hexagonal grid is one of its cycles of length @xmath32 .    , @xmath33 , and @xmath34 .",
    "]    a _ tree decomposition _ of a graph @xmath2 is a pair @xmath35 where @xmath36 is a tree , @xmath37 for all @xmath38 , and the following are true :    * for all @xmath39 there exists a @xmath38 such that @xmath40 , * for all @xmath41 there exists a @xmath38 such that @xmath42 , * if @xmath43 lies on the path connecting @xmath44 and @xmath45 in @xmath36 , then @xmath46 .",
    "the _ width _ of such a tree decomposition is the maximum of @xmath47 taken over all @xmath38 .",
    "the _ treewidth _ of a graph @xmath2 , denoted by @xmath48 , is the smallest possible width of a tree decomposition of @xmath2 . for an introduction to treewidth see e.g. @xcite",
    "we are looking for the solution of the following problem :    here we give an algorithm @xmath49 which solves this problem in time @xmath13 for some function @xmath8 , where @xmath50 is the number of vertices in the input graph .",
    "algorithm @xmath49 works in two phases . in the first phase ( sect .",
    "[ phase_i ] ) we compress the given graph repeatedly , and finally either conclude that there is no solution for our problem or construct an equivalent problem instance with a graph having bounded treewidth . in the latter case",
    "we solve the problem in the second phase of the algorithm ( sect .",
    "[ phase_ii ] ) by applying courcelle s theorem which gives a linear time algorithm for the evaluation of mso - formulas on bounded treewidth graphs .    to describe the first step of our algorithm",
    ", we need some deep results from graph minor theory . the following result states that every graph having large treewidth must contain a large grid as a minor .",
    "[ thm_egt ] for every fixed integer @xmath30 there exists an integer @xmath51 such that if @xmath52 then @xmath2 contains @xmath53 as a minor .",
    "the grid minor guaranteed by this theorem in the case when the treewidth of the graph @xmath2 is large can be found in cubic time .",
    "however , we need a linear - time algorithm for finding a large grid minor , so we have to make use of the following result , which states that if the graph is planar , then the bound on @xmath51 is linear :    [ thm_egt_planar ] for every integer @xmath30 and every planar graph @xmath2 , if @xmath54 then @xmath2 contains @xmath53 as a minor .    also , we will use the following algorithmic results :    [ thm_treedecomp ] for every fixed integer @xmath55 there exists a linear - time algorithm that , given a graph @xmath2 , does the following :    * either produces a tree decomposition of @xmath2 of width at most @xmath55 , or * outputs a subgraph @xmath20 of @xmath2 with @xmath56 , together with a tree decomposition of @xmath20 of width at most @xmath57 .    [ thm_minortest ] for every fixed graph @xmath11 and integer @xmath55 there",
    "exists a linear - time algorithm that , given a graph @xmath2 and a tree decomposition for @xmath2 of width @xmath55 , returns a minor of @xmath2 isomorphic to @xmath11 , if this is possible .",
    "now , we are ready to state our first lemma , which provides the key structures for the mechanism of our algorithm . in this lemma",
    ", we focus on hexagonal grids instead of rectangular grids .",
    "the reason for this is the well - known fact that if a graph of maximum degree three is a minor of another graph , then it is also contained in it as a topological minor .",
    "this property of the hexagonal grid will be very useful later on .",
    "[ alg_b ] for every pair of fixed integers @xmath30 and @xmath0 there is a linear - time algorithm @xmath58 , that , given an input graph @xmath2 , does the following :    * either produces a tree decomposition of @xmath2 of width @xmath59 , or * finds a subdivision of @xmath31 in @xmath2 , or * correctly concludes that @xmath60 .",
    "let @xmath30 and @xmath0 be arbitrary fixed integers .",
    "let us run the algorithm provided by theorem  [ thm_treedecomp ] for @xmath61 on graph @xmath2 .",
    "if it produces a tree decomposition of width @xmath62 for @xmath2 , then we output it .",
    "otherwise let @xmath20 be the subgraph of @xmath2 with @xmath63 that has been provided together with a tree decomposition @xmath64 for it having width at most @xmath65 .    clearly , if @xmath66 , then @xmath60 also holds as @xmath20 is a subgraph of @xmath2 . on the other hand , if @xmath67 , then there exists a set @xmath68 with @xmath16 such that @xmath69 is planar .",
    "deleting a vertex of a graph can only decrease its treewidth by at most one , so @xmath70 .",
    "now , theorem  [ thm_egt_planar ] implies that @xmath69 contains @xmath71 as a minor .",
    "since the hexagonal grid with radius @xmath30 is a subgraph of the @xmath72 grid , we get that @xmath69 must also contain @xmath31 as a minor , and hence as a topological minor .",
    "thus , we get that either @xmath60 , or @xmath20 ( and hence @xmath2 ) contains @xmath31 as a ( topological ) minor .",
    "now , using the algorithm of theorem  [ thm_minortest ] for @xmath20 and @xmath64 , we can find a subgraph of @xmath20 isomorphic to a subdivision of @xmath31 in linear time , if possible .",
    "if the algorithm produces such a subgraph , then we output it , otherwise we can correctly conclude that @xmath60 .    in algorithm @xmath49 we will run @xmath58 several times . as long as the result is a hexagonal grid of radius @xmath30 as topological minor , we will run phase i of algorithm @xmath49 , which compresses the graph @xmath2 . if at some step algorithm @xmath58 gives us a tree decomposition of width @xmath62 , we run phase ii .",
    "( the constant @xmath30 will be fixed later . ) and of course if at some step @xmath58 finds out that @xmath60 , then algorithm @xmath49 can stop with the output `` no solution . ''    clearly , we can assume without loss of generality that the input graph is simple , and it has at least @xmath73 vertices .",
    "so if @xmath14 , then deleting @xmath0 vertices from @xmath2 ( which means the deletion of at most @xmath74 edges ) results in a planar graph , which has at most @xmath75 edges .",
    "therefore , if @xmath76 then surely @xmath60 .",
    "since this can be detected in linear time , we can assume that @xmath77 .",
    "in phase i we assume that after running @xmath58 on @xmath2 we get a subgraph @xmath78 that is a subdivision of @xmath31 . our goal is to find a set of vertices @xmath79 such that @xmath80 is planar , and @xmath81 .",
    "let @xmath82 denote the family of sets of vertices that have these properties , i.e. , let @xmath83 and @xmath80 is planar@xmath84 .",
    "since the case @xmath85 is very simple we can assume that @xmath86 .",
    "* reduction a : flat zones . * in the following we regard the grid @xmath78 as a fixed subgraph of @xmath2 .",
    "let us define @xmath87 zones in it . here",
    "@xmath87 is a constant depending only on @xmath0 , which we will determine later .",
    "zone _ is a subgraph of @xmath78 which is topologically isomorphic to the hexagonal grid @xmath88 .",
    "we place such zones next to each other in the well - known radial manner with radius @xmath89 , i.e. , we replace each hexagon of @xmath90 with a subdivision of @xmath88 .",
    "it is easy to show that in a hexagonal grid with radius @xmath91 we can define this way @xmath92 zones that only intersect in their outer circles .",
    "so let @xmath93 , where we choose @xmath89 big enough to get at least @xmath87 zones , i.e. , @xmath89 is the smallest integer such that @xmath94 .",
    "let the set of these innerly disjoint zones be @xmath95 , and the subgraph of these zones in @xmath78 be @xmath96 .",
    "let us define two types of _ grid - components_. an edge which is not contained in @xmath96 is a grid - component if it connects two vertices of @xmath96 .",
    "a subgraph of @xmath2 is a grid - component if it is a ( maximal ) connected component of @xmath97 .",
    "a grid - component @xmath98 is _ attached _ to a vertex @xmath99 of the grid @xmath96 if it has a vertex adjacent to @xmath99 , or ( if @xmath98 is an edge ) one of its endpoints is @xmath99 .",
    "the _ core _ of a zone is the ( unique ) subgraph of the zone which is topologically isomorphic to @xmath100 and lies in the middle of the zone .",
    "let us call a zone @xmath101 _ open _ if there is a vertex in its core that is connected to a vertex @xmath99 of another zone in @xmath95 , @xmath102 , through a grid - component .",
    "a zone is _ closed _ if it is not open .",
    "of @xmath103 . ]    for a subgraph @xmath11 of @xmath96 we let @xmath104 denote the subgraph of @xmath2 induced by the vertices of @xmath11 and the vertices of the grid - components which are only attached to @xmath11 .",
    "let us call a zone @xmath103 _ flat _ if it is closed and @xmath105 is planar .",
    "let @xmath103 be such a flat zone .",
    "see fig .",
    "[ fig_comp_ring ] ( a ) for an illustration of a flat zone together with its grid - components .",
    "a grid - component is an _ edge - component _ if it is either only attached to one edge - path of @xmath103 or only to one vertex of @xmath103 . otherwise , it is a _ cell - component _ if it is only attached to vertices of one cell . as a consequence of the fact that all embeddings of a 3-connected graph are equivalent ( see e.g. @xcite ) , and @xmath103 is a subdivision of such a graph ,",
    "every grid - component attached to some vertex in the core of @xmath103 must be one of these two types .",
    "note that we can assume that in an embedding of @xmath105 in the plane , all edge - components are embedded in an arbitrarily small neighborhood of the edge - path ( or vertex ) which they belong to .",
    "let us define the _ ring _",
    "@xmath106 ( @xmath107 ) as the union of those cells in @xmath103 that have common vertices both with the @xmath108-th and the @xmath109-th concentrical circle of @xmath103 .",
    "let @xmath110 be the cell of @xmath103 that lies in its center .",
    "the zone @xmath103 can be viewed as the union of @xmath111 concentrical rings , i.e. , the union of the subgraphs @xmath106 for @xmath112 .",
    "figure  [ fig_comp_ring ] ( b ) depicts the ring @xmath113 .",
    "[ equivalence ] let @xmath103 be a flat zone in @xmath96 , and let @xmath20 denote the graph @xmath114",
    ". then @xmath115 implies @xmath116 .",
    "suppose @xmath115 .",
    "since @xmath117 is planar , we can fix a planar embedding @xmath118 of it .",
    "if @xmath119 for some @xmath108 ( @xmath120 ) then let @xmath121 denote the maximal subgraph of @xmath117 for which @xmath122 is in the region determined by @xmath123 ( including @xmath106 ) . if @xmath124 is not empty then let @xmath121 be the empty graph .",
    "note that if @xmath125 then @xmath121 and @xmath126 are disjoint",
    ". therefore , there exists an index @xmath108 for which @xmath127 and @xmath121 is not empty .",
    "let us fix this @xmath108 .",
    "let @xmath128 denote @xmath129 .",
    "we prove the lemma by giving an embedding for @xmath130 where @xmath131 .",
    "the region @xmath123 divides the plane in two other regions .",
    "as @xmath103 is flat , vertices of @xmath132 can only be adjacent to vertices of @xmath128 .",
    "thus we can assume that in the finite region only vertices of @xmath132 are embedded , so @xmath133 is entirely embedded in the infinite region .",
    "let @xmath134 denote those vertices in @xmath132 which are adjacent to some vertex in @xmath135 .",
    "observe that the vertices of @xmath134 lie on the @xmath108-th concentrical circle of @xmath103 , hence , the restriction of @xmath118 to @xmath136 has a face whose boundary contains @xmath134 .",
    "now let @xmath137 be a planar embedding of @xmath105 , and let us restrict @xmath137 to @xmath132 .",
    "note that @xmath134 only contains vertices which are either adjacent to some vertex in @xmath106 or are adjacent to cell - components belonging to a cell of @xmath106 .",
    "but @xmath137 embeds @xmath106 and its cell - components also , and therefore the restriction of @xmath137 to @xmath132 results in a face whose boundary contains @xmath134 . here",
    "we used also that @xmath106 is a subdivision of a 3-connected graph whose embeddings are equivalent .",
    "now it is easy to see that we can combine @xmath137 and @xmath118 in such a way that we embed @xmath136 according to @xmath118 and , similarly , @xmath132 according to @xmath137 , and then `` connect '' them by identifying @xmath138 and @xmath139 for all @xmath140 .",
    "this gives the desired embedding of @xmath130 .",
    "finally , we have to observe that @xmath141 implies @xmath116 , since @xmath142 and @xmath81 .",
    "this lemma has a trivial but crucial consequence : @xmath116 if and only if @xmath143 , so deleting @xmath144 reduces our problem to an equivalent instance .",
    "let us denote this deletion as _ reduction a_.    note that the closedness of a zone @xmath103 can be decided by a simple breadth first search , which can also produce the graph @xmath105 .",
    "planarity can also be tested in linear time @xcite .",
    "therefore we can test whether a zone is flat , and if so , we can apply reduction a on it in linear time .    later we will see that unless there are some easily recognizable vertices in our graph which must be included in every solution , a flat zone can always be found ( lemma [ zones ] ) .",
    "this yields an easy way to handle graphs with large treewidth : compressing our graph by repeatedly applying reduction a we can reduce the problem to an instance with bounded treewidth .",
    "* reduction b : well - attached vertices .",
    "* a subgraph of @xmath96 is a _ block _ if it is topologically isomorphic to @xmath145 .",
    "a vertex of a given block is called _ inner vertex _ if it is not on the outer circle of the block .    .",
    "the edges of @xmath146 and @xmath147 are shown in bold . ]",
    "[ blocks ] let @xmath116 .",
    "let @xmath148 and @xmath149 be inner vertices of the disjoint blocks @xmath150 and @xmath151 , respectively .",
    "if @xmath152 is an @xmath153 path that ( except for its endpoints ) does nt contain any vertex from @xmath150 or @xmath151 , then @xmath79 must contain a vertex from @xmath150 , @xmath151 or @xmath152 .",
    "see fig .",
    "[ fig_blocks ] for the illustration of this proof .",
    "let @xmath146 and @xmath147 denote the outer circle of @xmath150 and @xmath151 , respectively .",
    "let us notice that since @xmath150 and @xmath151 are disjoint blocks , there exist at least @xmath73 vertex disjoint paths between their outer circles , which  apart from their endpoints  do not contain vertices from @xmath150 and @xmath151 .",
    "moreover , it is easy to see that these paths can be defined in a way such that their endpoints that lie on @xmath146 are on the border of different cells of @xmath150 . to see this , note that the number of cells which lie on the border of a given block is @xmath154 .",
    "at least three of these paths must be in @xmath80 also .",
    "since @xmath148 can lie only on the border of at most two cells having common vertices with @xmath146 , we get that there is a path @xmath155 in @xmath80 whose endpoints are @xmath156 and @xmath157 ( lying on @xmath146 and @xmath147 , resp . ) , and there exist no cell of @xmath150 whose border contains both @xmath156 and @xmath148 .    let us suppose that @xmath158 is a subgraph of @xmath80 .",
    "since all embeddings of a 3-connected planar graph are equivalent , we know that if we restrict an arbitrary planar embedding of @xmath80 to @xmath150 , then all faces having @xmath148 on their border correspond to a cell in @xmath150 . since @xmath148 and @xmath149 are connected through @xmath152 and @xmath159 , we get that @xmath149 must be embedded in a region @xmath160 corresponding to a cell @xmath161 of @xmath150 . but this implies that @xmath151 must entirely be embedded also in @xmath160 .",
    "since @xmath162 and @xmath155 connects @xmath163 and @xmath164 we have that @xmath157 must lie on the border of @xmath160 .",
    "but then @xmath161 is a cell of @xmath150 containing both @xmath156 and @xmath148 on its border , which yields the contradiction .    using this lemma",
    "we can identify certain vertices that have to be deleted .",
    "let @xmath148 be a _",
    "well - attached _ vertex in @xmath2 if there exist paths @xmath165 and disjoint blocks @xmath166 such that @xmath167 connects @xmath148 with an inner vertex of @xmath168 ( @xmath169 ) , the inner vertices of @xmath167 are not in @xmath96 , and if @xmath170 then the only common vertex of @xmath167 and @xmath171 is @xmath148 .",
    "[ well - attached ] let @xmath116 . if @xmath148 is well - attached then @xmath172 .    if @xmath173 , then after deleting @xmath79 from @xmath2 ( which means deleting at most @xmath0 vertices ) there would exist indices @xmath170 such that no vertex from @xmath167 , @xmath171 , @xmath168 , and @xmath174 was deleted .",
    "but then the disjoint blocks @xmath168 and @xmath174 were connected by the path @xmath175 , and by the previous lemma , this is a contradiction",
    ".    we can decide whether a vertex @xmath99 is well - attached in time @xmath176 using standard flow techniques , where @xmath177 .",
    "this can be done by simply testing for each possible set of @xmath178 disjoint blocks whether there exist the required disjoint paths that lead from @xmath148 to these blocks .",
    "since the number of blocks in @xmath96 depends only on @xmath0 , and we can find @xmath7 disjoint paths starting from a given vertex of a graph @xmath2 in time @xmath179 , we can observe that this can be done indeed in time @xmath176 .",
    "* finding flat zones .",
    "* now we show that if there are no well - attached vertices in the graph @xmath2 , then a flat zone exists in our grid .",
    "[ comp_block ] let @xmath116 , and let @xmath2 not include any well - attached vertices .",
    "if @xmath98 is a grid - component , then there can not exist @xmath180 disjoint blocks such that @xmath98 is attached to an inner vertex of each block .",
    "let us assume for contradiction that there exist @xmath180 such blocks .",
    "since @xmath181 , at least @xmath182 of these blocks do not contain any vertex of @xmath79 .",
    "so let @xmath183 , @xmath184 , ",
    "@xmath185 be adjacent to @xmath98 and let @xmath186 be disjoint blocks of @xmath80 such that @xmath187 is an inner vertex of @xmath168 .",
    "since @xmath80 is planar , it follows from lemma [ blocks ] that a component of @xmath188 can not be adjacent to different vertices from @xmath189 .",
    "so let @xmath190 be the connected component of @xmath188 that is attached to @xmath187 in @xmath80 .",
    "@xmath98 is connected in g , hence for every @xmath190 there is a vertex of @xmath191 that is adjacent to it in @xmath2 . since there are no well - attached vertices in @xmath2 , every vertex of @xmath36 can be adjacent to at most @xmath192 of these subgraphs .",
    "but then @xmath193 which is a contradiction since @xmath194 .",
    "let us now fix the constant @xmath195 .    [ comp_block2 ] let @xmath116 , let @xmath2 not include any well - attached vertices , and let @xmath148 be a vertex of the grid @xmath96 .",
    "then there can not exist @xmath196 disjoint blocks such that for all @xmath108 @xmath197 an inner vertex of @xmath168 and @xmath148 are both attached to some grid - component @xmath190 .    as a consequence of lemma [ comp_block",
    "] , each of the grid - components @xmath190 can be attached to at most @xmath198 disjoint blocks .",
    "but since @xmath148 is not a well - attached vertex , there can be only at most @xmath192 different grid - components among the grid - components @xmath190 , @xmath199 .",
    "so the total number of disjoint blocks that are attached to @xmath148 through a grid - component is at most @xmath200 .",
    "[ zones ] let @xmath116 , and let @xmath2 not include any well - attached vertices .",
    "then there exists a flat zone @xmath103 in @xmath2 .",
    "let @xmath101 be an open zone which has a vertex @xmath55 in its core that is attached to a vertex @xmath99 of another zone in @xmath95 ( @xmath102 ) through a grid - component @xmath98 . by the choice of the size of the zones and their cores",
    ", we have disjoint blocks @xmath201 and @xmath202 containing @xmath55 and @xmath99 respectively as inner points .",
    "we can also assume that @xmath201 is a subgraph of @xmath103 which does not intersect the outer circle of @xmath103 .    by lemma [ blocks ]",
    "we know that @xmath201 , @xmath202 or @xmath98 contains a vertex from @xmath79 .",
    "let @xmath203 denote the set of zones in @xmath95 with an inner vertex in @xmath79 , let @xmath204 denote the set of open zones in @xmath95 with a core vertex to which a grid - component , having a common vertex with @xmath79 , is attached , and finally let @xmath205 be the set of the remaining open zones in @xmath95 . since @xmath81 and a grid - component can be attached to inner vertices of at most @xmath180 disjoint blocks by lemma [ comp_block ] , we have that @xmath206 and @xmath207 .",
    "let us count the number of zones in @xmath205 . to each zone @xmath103 in @xmath205 we assign a vertex @xmath208 of the grid not in @xmath103 , which is connected to the core of @xmath103 by a grid - component .",
    "first , let us bound the number of zones @xmath103 in @xmath205 for which @xmath209 .",
    "lemma [ comp_block2 ] implies that any @xmath210 can be connected this way to at most @xmath211 zones , so we can have only at most @xmath212 such zones .",
    "now let @xmath213 .",
    "let @xmath24 and @xmath25 be different members of @xmath134 , and let @xmath24 be connected through the grid - component @xmath214 with the core vertex @xmath215 of @xmath216 .",
    "let @xmath217 denote a block which only contains vertices that are inner vertices of @xmath218 , and contains @xmath215 as inner vertex .",
    "such a block can be given due to the size of a zone and its core .",
    "let us define @xmath219 , @xmath220 , @xmath221 , and @xmath222 similarly .",
    "note that @xmath223 by @xmath224 .",
    "now let us assume that @xmath24 and @xmath25 are in the same component of @xmath225 .",
    "let @xmath152 be a path connecting them in @xmath225 .",
    "if @xmath152 has common vertices with @xmath217 ( or @xmath222 ) then we modify @xmath152 the following way . if the first and last vertices reached by @xmath152 in @xmath218 ( or @xmath221 , resp . )",
    "are @xmath55 and @xmath226 , then we swap the @xmath227 section of @xmath152 using the outer circle of @xmath218 ( or @xmath221 , resp . ) .",
    "this way we can fix a path in @xmath225 that connects @xmath24 and @xmath25 , and does not include any vertex from @xmath217 and @xmath222 . but this path together with @xmath214 and @xmath219 would yield a path in @xmath80 that connects two inner vertices of @xmath217 and @xmath222 , contradicting lemma [ blocks ] .",
    "therefore , each vertex of @xmath134 lies in a different component of @xmath225 .",
    "but we can only delete at most @xmath0 vertices , and each vertex in a hexagonal grid has at most 3 neighbors , thus we can conclude that @xmath228 . as for different zones",
    "@xmath229 and @xmath230 in @xmath95 we can not have @xmath231 ( which is also a consequence of lemma [ blocks ] ) we have that @xmath232 .",
    "so if we choose the number of zones in @xmath95 to be @xmath233 we have that there are at least @xmath234 zones in @xmath95 which are not contained in @xmath235 , indicating that they are closed .",
    "since a vertex can be contained by at most 3 zones , @xmath81 implies that there exist a closed zone @xmath236 , which does not contain any vertex from @xmath79 , and all grid - components attached to @xmath237 are also disjoint from @xmath79 .",
    "this immediately implies that @xmath238 is a subgraph of @xmath80 , and thus @xmath238 is planar .    *",
    "algorithm for phase i. * the exact steps of phase i of the algorithm @xmath49 are shown in fig .",
    "[ alg_phase_i ] .",
    "it starts with running algorithm @xmath58 on the graph @xmath2 and integers @xmath62 and @xmath30 .",
    "if @xmath58 returns a hexagonal grid as a topological minor , then the algorithm proceeds with the next step . if @xmath58 returns a tree decomposition @xmath239 of width @xmath62 , then phase i returns the triple @xmath240 .",
    "otherwise @xmath2 does not have @xmath31 as minor and its treewidth is larger than @xmath62 , so by lemma [ alg_b ] we can conclude that @xmath60 .",
    "in the next step the algorithm tries to find a flat zone @xmath103 .",
    "if such a zone is found , then the algorithm executes a deletion , whose correctness is implied by lemma [ equivalence ] . note that after altering the graph , the algorithm must find the hexagonal grid again and thus has to run @xmath58 several times .",
    "if no flat zone was found in step 2 , the algorithm removes well - attached vertices from the graph in step 3 .",
    "the vertices already removed this way are stored in @xmath241 , and @xmath134 is the set of vertices to be removed in the actual step . by lemma",
    "[ well - attached ] , if @xmath116 then @xmath242 , so @xmath243 means that there is no solution . by lemma [ zones ] , the case @xmath244 also implies @xmath60 . in these cases",
    "the algorithm stops with the output `` no solution . ''",
    "otherwise it proceeds with updating the variables @xmath241 and @xmath2 , and continues with step 1 .",
    "the output of the algorithm can be of two types : it either refuses the instance ( outputting `` no solution . '' ) or it returns an instance for phase ii . for the above",
    "mentioned purposes the new instance is equivalent with the original problem instance in the following sense :    [ kernel ] let @xmath245 be the triple returned by @xmath49 at the end of phase i. then for all @xmath246 it is true that @xmath116 if and only if @xmath247 and @xmath248 .",
    "now let us examine the running time of this phase .",
    "the first step can be done in time @xmath249 according to @xcite where @xmath250 .",
    "since the algorithm only runs algorithm @xmath58 again after reducing the number of the vertices in @xmath2 , we have that @xmath58 runs at most @xmath50 times .",
    "this takes @xmath251 time .",
    "the second step requires only linear time ( a breadth first search and a planarity test ) .",
    "deciding whether a vertex is well - attached can be done in time @xmath176 ( where @xmath177 ) , so we need @xmath252 time to check every vertex at a given iteration in step 3 .",
    "note that the third step is executed at most @xmath192 times , since at each iteration @xmath253 increases .",
    "hence , this phase of algorithm @xmath49 uses total time @xmath254 , as the number of edges is @xmath255 .",
    "at the end of phase i of algorithm @xmath49 we either conclude that @xmath60 , or we have a triple @xmath245 for which theorem [ kernel ] holds . here",
    "@xmath239 is a tree decomposition for @xmath20 of width at most @xmath62 .",
    "this bound only depends on @xmath30 which is a function of @xmath0 . from the choice of the constants @xmath256 , and",
    "@xmath211 we can derive by a straightforward calculation that @xmath257 .      a theorem by courcelle states that every graph property defined by a formula in monadic second - order logic ( mso ) can be evaluated in linear time if the input graph has bounded treewidth .",
    "here we consider graphs as relational structures of vocabulary @xmath261 , where @xmath262 and @xmath263 denote unary relations interpreted as the vertex set and the edge set of the graph , and @xmath4 is a binary relation interpreted as the incidence relation .",
    "for instance , a formula stating that @xmath148 and @xmath149 are neighboring vertices is the following : @xmath264 .",
    "we will denote by @xmath265 the universe of the graph @xmath2 , i.e. , @xmath266 .",
    "variables in monadic second - order logic can be element or set variables , and the containment relation between an element variable @xmath148 and a set variable @xmath79 is simply expressed by the formula @xmath267 . for a survey on mso logic on graphs",
    "see @xcite .      _",
    "( @xcite ) _ [ mso ] let @xmath268 denote an mso - formula and let @xmath269 . then there is a linear - time algorithm that , given a graph @xmath2 with _ @xmath270 _ and @xmath271 , decides whether there exist @xmath272 such that        it is well - known that there is an mso - formula @xmath276 that describes the planarity of graphs , i.e. , for every graph @xmath2 the statement @xmath277 holds if and only if @xmath2 is planar .",
    "the following simple claim shows that we can also create a formula describing the @xmath9 graph class .",
    "we will use the simple characterization of planar graphs by kuratowski s theorem : a graph is planar if and only if it does not contain any subgraph topologically isomorphic to @xmath281 or @xmath282 . to formulate the existence of these subgraphs as an mso - formula , we need some more simple formulas .",
    "first , it is easy to see that the following formula expresses the property that @xmath283 is a partition of the set @xmath103 : @xmath284 using this , we can express that the vertex set @xmath103 contains a path connecting @xmath24 and @xmath25 , by saying that every partition of @xmath103 that separates @xmath24 and @xmath25 has to separate two neighboring vertices : @xmath285 the following two formulas express that two sets are disjoint , or their intersection is some given unique vertex .",
    "@xmath286    now , we can state formulas expressing that a given subgraph has @xmath281 or @xmath282 as a topological minor . for brevity",
    ", we only give the formula which states that there is a subdivision of @xmath281 in the graph such that the vertices @xmath287 correspond to the vertices of the @xmath281 , and the vertex sets @xmath288 contain the subdivisions of the corresponding edges of @xmath281 .",
    "@xmath289 the formula @xmath290 can be similarly created .",
    "now , we are ready to give the @xmath291 formula , which uses the fact that @xmath80 is planar if and only if every subdivision of @xmath281 or @xmath282 in @xmath2 must involve at least one vertex from @xmath79 .",
    "@xmath292    now let us apply theorem [ mso ] .",
    "let @xmath293 be the algorithm which , given a graph @xmath2 of bounded treewidth , decides whether there exist @xmath294 such that @xmath279 is true , and if possible , also produces such variables . by theorem [ planar_mso ] , running @xmath293 on @xmath20 either returns a set of vertices @xmath295 , or reports that this is not possible .",
    "hence , we can finish algorithm @xmath49 in the following way : if @xmath293 returns @xmath134 then output(@xmath296 ) , otherwise output(``no solution '' ) .",
    "phase ii of the algorithm can also be done by applying dynamic programming , using the tree decomposition @xmath239 returned by @xmath58 .",
    "this also yields a linear - time algorithm , with a double exponential dependence on @xmath299 ( and hence on @xmath0 ) .",
    "since the proof is quite technical and detailed , we omit it .",
    "b. courcelle : _ the expression of graph properties and graph transformations in monadic second - order logic .",
    "handbook of graph grammars and computing by graph transformations _ ,",
    "world scientific , new - jersey , vol .",
    "1 , chapter 5 , 313400 , 1997 ."
  ],
  "abstract_text": [
    "<S> in the @xmath0-apex problem the task is to find at most @xmath0 vertices whose deletion makes the given graph planar . the graphs for which there exists a solution form a minor closed class of graphs , hence by the deep results of robertson and seymour @xcite , there is an @xmath1 time algorithm for every fixed value of @xmath0 . </S>",
    "<S> however , the proof is extremely complicated and the constants hidden by the big - o notation are huge . </S>",
    "<S> here we give a much simpler algorithm for this problem with quadratic running time , by iteratively reducing the input graph and then applying techniques for graphs of bounded treewidth .    </S>",
    "<S> * keywords : * planar graph , apex graph , fpt algorithm , vertex deletion . </S>"
  ]
}