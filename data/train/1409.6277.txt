{
  "article_text": [
    "let @xmath7 be a directed graph ( digraph ) , with @xmath5 edges and @xmath4 vertices .",
    "@xmath8 is _ strongly connected _ if there is a directed path from each vertex to every other vertex .",
    "the _ strongly connected components _ of @xmath8 are its maximal strongly connected subgraphs .",
    "two vertices @xmath9 are _ strongly connected _ if they belong to the same strongly connected component of @xmath8 .",
    "a vertex ( resp .",
    ", an edge ) of @xmath8 is a _ strong articulation point _ ( resp . , a _ strong bridge _ ) if its removal increases the number of strongly connected components .",
    "a digraph @xmath8 is @xmath2-vertex - connected if it has at least three vertices and no strong articulation points ; @xmath8 is @xmath2-edge - connected if it has no strong bridges . the @xmath2-vertex- ( resp . , @xmath2-edge- )",
    "connected components of @xmath8 are its maximal @xmath2-vertex- ( resp . , @xmath2-edge- ) connected subgraphs .    , with strong articulation points and strong bridges shown in red ( better viewed in color ) .",
    "( b ) the @xmath2-vertex - connected components of @xmath8 .",
    "( c ) the @xmath2-vertex - connected blocks of @xmath8 .",
    "( d ) the @xmath2-edge - connected components of @xmath8 .",
    "( e ) the @xmath2-edge - connected blocks of @xmath8 . ]    c0.0c0.10c0.25c0.15c0.20c0.15c0.20 + & ( a ) @xmath8 & ( b ) @xmath10 & ( c ) @xmath11 & ( d ) @xmath12 & ( e ) @xmath13 &    differently from undirected graphs , in digraphs @xmath2-vertex and @xmath2-edge connectivity have a much richer and more complicated structure .",
    "to see an example of this , let @xmath0 and @xmath1 be two distinct vertices and consider the following natural @xmath2-vertex and @xmath2-edge connectivity relations , defined in  @xcite .",
    "vertices @xmath0 and @xmath1 are said to be _",
    "@xmath2-vertex - connected _ ( resp . , _",
    "@xmath2-edge - connected _ ) , and we denote this relation by @xmath14 ( resp . , @xmath15 ) , if there are two internally vertex - disjoint ( resp . , two edge - disjoint ) directed paths from @xmath0 to @xmath1 and two internally vertex - disjoint ( resp .",
    ", two edge - disjoint ) directed paths from @xmath1 to @xmath0 ( note that a path from @xmath0 to @xmath1 and a path from @xmath1 to @xmath0 need not be edge- or vertex - disjoint ) .",
    "@xmath2-vertex - connected block _",
    "( resp . , _",
    "@xmath2-edge - connected block _ ) of a digraph @xmath7 is defined as a maximal subset @xmath16 such that @xmath17 ( resp .",
    ", @xmath18 ) for all @xmath19 . in undirected graphs , the @xmath2-vertex- ( resp . ,",
    "@xmath2-edge- ) connected blocks are identical to the @xmath2-vertex- ( resp . , @xmath2-edge- )",
    "connected components .",
    "as shown in figure  [ fig : example ] , this is not the case for digraphs .",
    "put in other words , differently from the undirected case , in digraphs @xmath2-vertex- ( resp . ,",
    "@xmath2-edge- ) connected components do not encompass the notion of pairwise @xmath2-vertex ( resp .",
    ", @xmath2-edge ) connectivity among its vertices .",
    "we note that pairwise @xmath2-connectivity is relevant in several applications , where one is often interested in local properties , e.g. , checking whether two vertices are @xmath2-connected , rather than in global properties .",
    "it is thus not surprising that @xmath2-connectivity problems on directed graphs appear to be more difficult than on undirected graphs . for undirected graphs",
    "it has been known for over 40 years how to compute all bridges , articulation points , @xmath2-edge- and @xmath2-vertex - connected components in linear time , by simply using depth first search  @xcite . in the case of digraphs , however , the very same problems have been much more challenging . indeed",
    ", it has been shown only few years ago that all strong bridges and strong articulation points of a digraph can be computed in linear time  @xcite .",
    "furthermore , the best current bound for computing the @xmath2-edge- and the @xmath2-vertex - connected components in digraphs is not even linear , but it is @xmath20 , and it was achieved only very recently by henzinger et al .",
    "@xcite , improving previous @xmath21 time bounds  @xcite .",
    "finally , it was shown also very recently how to compute the @xmath2-edge - connected blocks of digraphs in linear time @xcite . in this paper",
    ", we complete the picture on @xmath2-connectivity for digraphs by presenting the first algorithm for computing the @xmath2-vertex - connected blocks in @xmath3 time .",
    "our bound is asymptotically optimal and it improves sharply over a previous @xmath21 time bound by jaberi @xcite . as a side result , our algorithm constructs an @xmath6-space data structure that reports in constant time if two vertices are @xmath2-vertex - connected .",
    "additionally , when two query vertices @xmath0 and @xmath1 are not @xmath2-vertex - connected , our data structure can produce , in constant time , a `` witness '' by exhibiting a vertex ( i.e. , a strong articulation point ) or an edge ( i.e. , a strong bridge ) that separates them .",
    "we are also able to compute in linear time a sparse certificate for @xmath2-vertex connectivity , i.e. , a subgraph of the input graph that has @xmath6 edges and maintains the same @xmath2-vertex connectivity properties .",
    "our algorithm follows the high - level approach of @xcite for computing the @xmath2-edge - connected blocks .",
    "however , the algorithm for computing the @xmath2-vertex - connected blocks is much more involved and requires several novel ideas and non - trivial techniques to achieve the claimed bounds . in particular , the main technical difficulties that need to be tackled when following the approach of @xcite",
    "are the following :    * first , the algorithm in @xcite maintains a partition of the vertices into approximate blocks , and refines this partition as the algorithm progresses .",
    "unlike @xmath2-edge - connected blocks , however , @xmath2-vertex - connected blocks do not partition the vertices of a digraph , and therefore it is harder to maintain approximate blocks throughout the algorithm s execution . to cope with this problem ,",
    "we show that these blocks can be maintained using a more complicated forest representation , and we define a set of suitable operations on this representation in order to refine and split blocks .",
    "we believe that our forest representation of the @xmath2-vertex - connected blocks of a digraph can be of independent interest . * second , in @xcite we used a properly defined _ canonical decomposition _ of the input digraph @xmath8 , in order to obtain smaller _ auxiliary _ digraphs ( not necessarily subgraphs of @xmath8 ) that maintain the original @xmath2-edge - connected blocks of @xmath8 .",
    "a key property of this decomposition was the fact that any vertex in an auxiliary graph @xmath22 is reachable from a vertex outside @xmath22 only through a single strong bridge . in the computation of the @xmath2-vertex - connected blocks , we have to decompose the graph according to strong articulation points , and so the above crucial property is completely lost . to overcome this problematic issue",
    ", we need to design and to implement efficiently a different and more sophisticated decomposition . *",
    "third , differently from @xmath2-edge connectivity , @xmath2-vertex connectivity in digraphs is plagued with several degenerate special cases , which are not only more tedious but also more cumbersome to deal with .",
    "for instance , the algorithm in @xcite exploits implicitly the property that two vertices @xmath0 and @xmath1 are @xmath2-edge - connected if and only if the removal of any edge leaves @xmath0 and @xmath1 in the same strongly connected component .",
    "unfortunately , this property no longer holds for @xmath2-vertex connectivity , as for instance two mutually adjacent vertices are always left in the same strongly connected component by the removal of any other vertex , but they are not necessarily @xmath2-vertex - connected . to handle this more complicated situation ,",
    "we introduce the notion of _ vertex - resilient blocks _ and prove some useful properties about the vertex - resilient and @xmath2-vertex - connected blocks of a digraph .    another difference with @xcite",
    "is that now we are able to provide a witness for two vertices not being @xmath2-vertex - connected .",
    "this approach can be applied to provide a witness for two vertices not being @xmath2-edge - connected , thus extending the result in @xcite . as in @xcite ,",
    "some basic components of our algorithms are flow graphs and dominator trees , that we review in section [ sec : dominators ] . in section [ sec : blocks ] we prove some useful properties of the vertex - resilient and @xmath2-vertex - connected blocks that allow us to represent them by a forest .",
    "our linear - time algorithms for computing the vertex - resilient blocks and the @xmath2-vertex - connected blocks are described in sections [ section : vertex - resilient - blocks ] and [ section:2vc - blocks ] .",
    "we describe the computation of the sparse certificate in section [ section : sparse - certificate ] .",
    "a _ flow graph _ is a digraph such that every vertex is reachable from a distinguished start vertex .",
    "let @xmath7 be the input digraph , which we assume to be strongly connected .",
    "( if not , we simply treat each strongly connected component separately . ) for any vertex @xmath23 , we denote by @xmath24 the corresponding flow graph with start vertex @xmath25 ; all vertices in @xmath26 are reachable from @xmath25 since @xmath8 is strongly connected .",
    "the _ dominator relation _ in @xmath27 is defined as follows : a vertex @xmath28 is a _",
    "dominator _ of a vertex @xmath1 ( @xmath28 _ dominates _",
    "@xmath1 ) if every path from @xmath25 to @xmath1 contains @xmath28 ; @xmath28 is a _ proper dominator _ of @xmath1 if @xmath28 dominates @xmath1 and @xmath29 .",
    "the dominator relation is reflexive and transitive .",
    "its transitive reduction is a rooted tree , the _ dominator tree _",
    "@xmath30 : @xmath28 dominates @xmath1 if and only if @xmath28 is an ancestor of @xmath1 in @xmath30 . if @xmath31 , @xmath32 , the parent of @xmath1 in @xmath30 , is the _ immediate dominator _ of @xmath1 : it is the unique proper dominator of @xmath1 that is dominated by all proper dominators of @xmath1 .",
    "an edge @xmath33 is a _ bridge _ in @xmath27 if all paths from @xmath25 to @xmath1 include @xmath33 .",
    "lengauer and tarjan  @xcite presented an algorithm for computing dominators in @xmath34 time for a flow graph with @xmath4 vertices and @xmath5 edges , where @xmath35 is a functional inverse of ackermann s function  @xcite .",
    "subsequently , several linear - time algorithms were discovered  @xcite .",
    "italiano et al .",
    "@xcite showed that the strong articulation points of @xmath8 can be computed from the dominator trees of @xmath27 and @xmath36 , where @xmath25 is an arbitrary start vertex and @xmath37 is the digraph that results from @xmath8 after reversing edge directions ; similarly , the strong bridges of @xmath8 correspond to the bridges of @xmath27 and @xmath36 .",
    "let @xmath38 be a rooted tree whose vertex set is @xmath26 .",
    "tree @xmath38 has the _ parent property _",
    "if for all @xmath39 , @xmath0 is a descendant of the parent of @xmath1 in @xmath38 .",
    "tree @xmath38 has the _ sibling property _ if @xmath0 does not dominate @xmath1 for all siblings @xmath0 and @xmath1 .",
    "the parent and sibling properties are necessary and sufficient for a tree to be the dominator tree  @xcite .",
    "let @xmath0 and @xmath1 be two distinct vertices in a digraph . by menger s theorem  @xcite , @xmath15 if and only if the removal of any edge leaves @xmath0 and @xmath1 in the same strongly connected component , i.e. , two vertices are @xmath2-edge - connected if and only if they are resilient to the deletion of a single edge .",
    "the situation for @xmath2-vertex connectivity is more complicated .",
    "indeed , menger s theorem implies that @xmath14 only if the removal of any vertex different from @xmath0 and @xmath1 leaves them in the same strongly connected component , while the converse holds only when @xmath0 and @xmath1 are not adjacent .",
    "for instance , two mutually adjacent vertices are left in the same strongly connected component by the removal of any other vertex , although they are not necessarily @xmath2-vertex - connected .",
    "to handle this situation , we use the following notation , which was also considered in  @xcite . vertices @xmath0 and @xmath1 are said to be _ vertex - resilient _ , denoted by @xmath40 if the removal of any vertex different from @xmath0 and @xmath1 leaves @xmath0 and @xmath1 in the same strongly connected component . we define a _ vertex - resilient block _ of a digraph @xmath7 as a maximal subset @xmath16 such that @xmath41 for all @xmath19 . see figure [ fig : vrb - example ] .",
    "note that , as a ( degenerate ) special case , a vertex - resilient block might consist of a singleton vertex only : we denote this as a _ trivial vertex - resilient block_. in the following , we will consider only non - trivial vertex - resilient blocks . since there is no danger of ambiguity",
    ", we will call them simply vertex - resilient blocks .",
    "we remark that two vertices @xmath0 and @xmath1 that are vertex - resilient are not necessarily @xmath2-vertex - connected : this is indeed the case for vertices @xmath42 and @xmath43 in the digraph of figure [ fig : example](a ) . if , however , @xmath0 and @xmath1 are not adjacent then @xmath14 if and only if @xmath40 .",
    ".,scaledwidth=22.0% ]    we next provide some basic properties of the vertex - resilient blocks and the @xmath2-vertex - connected blocks .",
    "in particular , we show that any digraph has at most @xmath44 vertex - resilient ( resp .",
    ", @xmath2-vertex - connected ) blocks and , moreover , that there is a forest representation of these blocks that enables us to test vertex - resilience ( resp .",
    ", @xmath2-vertex - connectivity ) between any two vertices in constant time .",
    "this structure is reminiscent of the representation used in @xcite for the biconnected components of an undirected graph .",
    "[ lemma : vr ] let @xmath28 , @xmath0 , @xmath45 , and @xmath46 be distinct vertices such that @xmath47 , @xmath48 , @xmath49 and @xmath50",
    ". then also @xmath51 and @xmath52 .",
    "assume , for contradiction , that @xmath45 and @xmath46 are not vertex - resilient .",
    "then there is a strong articulation point @xmath1 such that every path from @xmath46 to @xmath45 contains @xmath1 , or every path from @xmath45 to @xmath46 contains @xmath1 ( or both ) . without loss of generality ,",
    "suppose that @xmath1 is contained in every path from @xmath46 to @xmath45 .",
    "since @xmath28 and @xmath0 are distinct , we can assume that @xmath53 .",
    "( if @xmath54 then we swap the role of @xmath28 and @xmath0 . )",
    "then , @xmath55 implies that there is a path @xmath56 from @xmath46 to @xmath28 that avoids @xmath1 , and similarly , @xmath57 implies that there is a path @xmath58 from @xmath28 to @xmath45 that avoids @xmath1 .",
    "so , @xmath56 followed by @xmath58 gives a path from @xmath46 to @xmath45 that does not contain @xmath1 , a contradiction .",
    "hence @xmath51 .",
    "the fact that @xmath52 follows by repeating the same argument for @xmath28 and @xmath0 .",
    "[ corollary : vrb ] let @xmath59 and @xmath60 be two distinct vertex - resilient blocks of a digraph @xmath7",
    ". then @xmath61 .    follows immediately from lemma [ lemma : vr ] .",
    "we denote by @xmath62 the vertex - resilient blocks that contain @xmath28 .",
    "define the _ block graph _",
    "@xmath63 of @xmath8 as follows .",
    "the vertex set @xmath64 consists of the vertices in @xmath26 and also contains one _ block node _ for each vertex - resilient block of @xmath8 .",
    "the edge set @xmath65 consists of the edges @xmath66 where @xmath67 .",
    "thus , @xmath43 is an undirected bipartite graph .",
    "next we show that it is also acyclic .",
    "[ lemma : vb - graph - path ] let @xmath28 and @xmath0 be any vertices that are connected by a path @xmath56 in @xmath43 .",
    "then , for any vertex @xmath68 not on @xmath56 , @xmath28 and @xmath0 are strongly connected in digraph @xmath69",
    ".    it suffices to show that @xmath8 contains a path @xmath58 from @xmath28 to @xmath0 that avoids @xmath1 .",
    "the same argument shows that @xmath8 contains a path from @xmath0 to @xmath28 that avoids @xmath1 .",
    "let @xmath70 .",
    "then @xmath71 , for @xmath72 , so there is a path @xmath73 in @xmath8 from @xmath74 to @xmath75 that avoids @xmath1 .",
    "then the catenation of paths @xmath76 gives a path in @xmath8 from @xmath28 to @xmath0 that avoids @xmath1 .",
    "[ lemma : vb - graph ] graph @xmath43 is acyclic .",
    "suppose , for contradiction , that @xmath43 contains a cycle @xmath77 .",
    "we show that all vertices @xmath78 belong to the same vertex - resilient block @xmath59 .",
    "let @xmath79 be two vertices on a minimal cycle @xmath77 of @xmath43 that are adjacent to a block node @xmath59 .",
    "( such @xmath28 , @xmath0 , and @xmath59 exist since @xmath43 is bipartite . )",
    "then , @xmath28 and @xmath0 can not be the only vertices in @xmath26 that are on @xmath77 , since otherwise they would be adjacent to another block @xmath60 on @xmath77 , violating corollary [ corollary : vrb ] .",
    "therefore , @xmath77 contains a vertex @xmath80 .",
    "clearly , @xmath81 , otherwise the edge @xmath82 would exist contradicting the minimality of @xmath77 .",
    "hence , there is a vertex @xmath83 such that all paths from @xmath84 to @xmath1 contain a common strong articulation point or all paths from @xmath1 to @xmath84 contain a common strong articulation point .",
    "suppose , without loss of generality , that a vertex @xmath45 is contained in every path from @xmath84 to @xmath1 .",
    "let @xmath56 be the path that results from @xmath77 by removing @xmath59 .",
    "let @xmath85 and @xmath86 be the subpaths of @xmath56 from @xmath28 to @xmath1 and from @xmath0 to @xmath1 , respectively . then @xmath87 or @xmath88 ( or both ) .",
    "suppose @xmath87 ; if not then swap the role of @xmath28 and @xmath0",
    ". then , by lemma [ lemma : vb - graph - path ] there is a path @xmath58 in @xmath8 from @xmath28 to @xmath1 that avoids @xmath45 .",
    "also , since @xmath89 , there is a path @xmath90 in @xmath8 from @xmath84 to @xmath28 that avoids @xmath45 .",
    "then the catenation of @xmath90 and @xmath58 gives a path in @xmath8 from @xmath84 to @xmath1 that avoids @xmath45 , a contradiction .",
    "[ lemma : blocks - number ] the number of vertex - resilient blocks in a digraph @xmath8 is at most @xmath44 .",
    "we prove the lemma by showing that forest @xmath43 contains at most @xmath44 block nodes . since @xmath43 is a forest we can root each tree @xmath38 of @xmath43 at some arbitrary vertex @xmath91 .",
    "every level of @xmath38 contains either only vertices of @xmath26 or only block nodes , because @xmath43 is bipartite .",
    "moreover , every block node is adjacent to at least two vertices of @xmath26 , due to the fact that each ( non - trivial ) vertex - resilient block in @xmath8 contains at least @xmath2 vertices .",
    "hence , every leaf of @xmath38 is a vertex in @xmath26 .",
    "now consider a partition of @xmath38 into vertex disjoint paths @xmath92 , such that each @xmath73 leads from some vertex or block node to a leaf descendant .",
    "the number of block nodes in each @xmath73 is at most equal to @xmath93 . also , in the path @xmath73 starting at @xmath91 the number of block nodes in @xmath73 is less than @xmath93 .",
    "we conclude that there at most @xmath44 block nodes in @xmath43 .",
    "[ lemma : blocks - size ] the total number of vertices in all vertex - resilient blocks is at most @xmath94 .    by lemmas [ lemma : vb - graph ] and",
    "[ lemma : blocks - number ] , the block graph @xmath43 is a forest with at most @xmath95 vertices .",
    "each occurrence of a vertex @xmath0 in a block @xmath59 corresponds to an edge @xmath96 of @xmath43 .",
    "therefore , the total number of vertices in all vertex - resilient blocks equals the number of edges in @xmath43 , and the lemma follows .     and its vertex - resilient block forest @xmath43 .",
    "the strong articulation points and the strong bridges of @xmath8 are shown in red .",
    "( better viewed in color.)[fig : vrb - forest],title=\"fig:\",scaledwidth=43.0% ]   and its vertex - resilient block forest @xmath43 . the strong articulation points and the strong bridges of @xmath8",
    "are shown in red .",
    "( better viewed in color.)[fig : vrb - forest],title=\"fig:\",scaledwidth=55.0% ]    [ lemma : vb - graph - path-2 ] let @xmath28 and @xmath0 be any vertices that are not vertex - resilient but are connected by a path @xmath56 in @xmath43 .",
    "then , for any vertex @xmath97 on @xmath56 , @xmath28 and @xmath0 are not strongly connected in digraph @xmath69 .",
    "we prove the lemma by contradiction .",
    "let @xmath56 be a path that connects @xmath28 and @xmath0 in @xmath43 .",
    "by lemma [ lemma : vb - graph ] , this path is unique for @xmath28 and @xmath0 .",
    "first suppose that @xmath56 contains only one other vertex @xmath98 , so @xmath99 .",
    "then @xmath100 and @xmath101 .",
    "now suppose that @xmath28 and @xmath0 are strongly connected in @xmath69 .",
    "this fact , together with lemma [ lemma : vb - graph - path ] , imply that @xmath28 and @xmath0 are strongly connected in @xmath102 for all @xmath103 .",
    "but this contradicts the assumption that @xmath28 and @xmath0 are not vertex - resilient .",
    "now suppose that path @xmath56 contains more than one vertex in @xmath104 .",
    "let @xmath105 , where @xmath106 . by the argument above , @xmath107 and @xmath108",
    "are not strongly connected in @xmath109 for all @xmath110 .",
    "suppose that @xmath28 and @xmath0 are strongly connected in @xmath111 for a fixed @xmath110 .",
    "by lemma [ lemma : vb - graph - path ] , @xmath28 and @xmath107 , and @xmath108 and @xmath0 , are strongly connected in @xmath111 .",
    "but then , @xmath107 and @xmath108 are also strongly connected in @xmath111 , a contradiction .",
    "we consider @xmath43 as a forest of rooted trees by choosing an arbitrary vertex as the root of each tree .",
    "then @xmath100 if and only if @xmath28 and @xmath1 are siblings or one the grandparent of the other .",
    "see figure [ fig : vrb - forest ] .",
    "we can perform both tests in constant time simply by storing the parent of each vertex in @xmath43 .",
    "thus , we can test in constant time if two vertices are vertex - resilient .",
    "note that we can not always apply lemma [ lemma : vb - graph - path-2 ] to find a strong articulation point that separates two vertices @xmath28 and @xmath1 that are not vertex - resilient .",
    "indeed , two vertices that are strongly connected but not vertex - resilient may not even be connected by a path in the forest @xmath43 ( see , e.g. , vertices @xmath112 and @xmath113 in figure [ fig : vrb - forest ] ) .",
    "so if we wish to return a witness that @xmath28 and @xmath1 are not vertex - resilient , we can not rely on @xmath43 .",
    "we deal with this problem in section [ sec : queries ] .",
    "now we turn to @xmath2-vertex - connected blocks and provide some properties that enable us to compute them via the vertex - resilient blocks .",
    "[ lemma:2vc - resilient - sb ] let @xmath0 and @xmath1 be two distinct vertices of @xmath8 such that @xmath40 . then , @xmath0 and @xmath1 are not @xmath2-vertex connected if and only if at least one of the edges @xmath114 and @xmath115 is a strong bridge in @xmath8 .",
    "menger s theorem  @xcite implies that if @xmath0 and @xmath1 are not adjacent then @xmath14 if and only if @xmath40 .",
    "if , on the other hand , @xmath40 but @xmath0 and @xmath1 are not @xmath2-vertex - connected , then at least one of the edges @xmath114 and @xmath115 exists in @xmath8 and is a strong bridge .    the following corollary , which relates @xmath2-vertex - connected , @xmath2-edge - connected and vertex - resilient blocks , is an immediate consequence of lemma [ lemma:2vc - resilient - sb ] .",
    "[ cor:2vc - resilient ] for any two distinct vertices @xmath0 and @xmath1 , @xmath14 if and only if @xmath40 and @xmath15 .    by corollary [ cor:2vc - resilient ]",
    "we have that the @xmath2-vertex - connected blocks are refinements of the vertex - resilient blocks , formed by the intersections of the vertex - resilient blocks and the @xmath2-edge - connected blocks of the digraph @xmath8 . since the @xmath2-edge - connected blocks are a partition of the vertices of @xmath8 , these intersections partition each vertex - resilient block . from this property",
    "we conclude that lemmas [ lemma : vr ] , [ lemma : vb - graph ] , and [ lemma : blocks - number ] and corollary [ corollary : vrb ] also hold for the @xmath2-vertex - connected blocks .",
    "in this section we present new algorithms for computing the vertex - resilient blocks of a digraph @xmath8 .",
    "we can assume that @xmath8 is strongly connected , so @xmath116 . if not , then we process each strongly connected component separately ; if @xmath41 then @xmath28 and @xmath0 are in the same strongly connected component @xmath117 of @xmath8 , and moreover , any vertex on a path from @xmath28 to @xmath0 or from @xmath0 to @xmath28 also belongs in @xmath117 .",
    "we begin with a simple algorithm that removes a single strong articulation point at a time . in order to get a more efficient solution , we need to consider simultaneously how different strong articulation points divide the vertices into blocks , which we do with the help of dominator trees .",
    "we achieve linear running time by combining the simple algorithm with the dominator - tree - based division , and by applying suitable operations on the block forest structure .",
    "algorithm , illustrated in figure [ fig : simplevrb ] , is an immediate application of the characterization of the vertex - resilient blocks in terms of strong articulation points .",
    "let @xmath28 and @xmath0 be two distinct vertices .",
    "we say that a strong articulation point @xmath45 _ separates @xmath28 from @xmath0 _ if all paths from @xmath28 to @xmath0 contain @xmath45 . in this case @xmath28 and @xmath0 belong to different strongly connected components of @xmath118 .",
    "this observation implies that we can compute the vertex - resilient blocks by computing the strongly connected components of @xmath118 for every strong articulation point @xmath45 . to do this",
    "efficiently we define an operation that refines the currently computed blocks .",
    "let @xmath119 be a set of blocks , let @xmath120 be a partition of a set @xmath121 , and let @xmath45 be a vertex not in @xmath122 .    for each block @xmath123 , substitute @xmath59 by the sets @xmath124 of size at least two , for all @xmath125 .    in section [ section:2vc - blocks ] , where we will compute the @xmath2-vertex - connected blocks from the vertex - resilient blocks and the @xmath2-edge - connected blocks",
    ", we will use the notation @xmath126 as a shorthand for @xmath127 with @xmath128 .",
    "[ lemma : refine ] let @xmath129 be the total number of elements in all sets of @xmath119 ( @xmath130 ) , and let @xmath131 be the number of elements in @xmath122 . then , the operation @xmath127 can be executed in @xmath132 time .",
    "a simple way to achieve the claimed bound is to number the sets of the partition @xmath120 , each with a distinct integer i d in the interval @xmath133 $ ] .",
    "consider a block @xmath59 .",
    "each element @xmath134 is assigned a label that is equal to the i d of the set @xmath125 that contains @xmath0 if @xmath135 , and zero otherwise .",
    "then , the computation of the sets @xmath124 for all @xmath125 can be done in @xmath136 time with bucket sorting .",
    "[ lemma : simplevrb ] algorithm runs in @xmath137 time , where @xmath138 is the number of strong articulation points of @xmath8 .",
    "this is @xmath139 in the worst case .",
    "the strong articulation points of @xmath8 can be computed in linear time by @xcite . in each iteration of step 3",
    ", we can compute the strongly connected components of @xmath118 in linear time @xcite . as we discover the @xmath140-th strongly connected component",
    ", we assign label @xmath140 ( @xmath141 ) to the vertices in @xmath142 . by lemma [ lemma : blocks - number ] ,",
    "the number of vertex - resilient blocks of @xmath8 is at most @xmath44 .",
    "therefore , since the total number of blocks ( trivial and non - trivial ) can not decrease during any iteration , @xmath119 contains at most @xmath44 blocks in each execution of step 3 . by induction on the number of iterations",
    ", it follows that the algorithm maintains the invariant that any two distinct blocks in @xmath119 have at most one element in common , and that the corresponding block graph is a forest .",
    "therefore , by lemma [ lemma : blocks - number ] , the total number of elements in all blocks is at most @xmath94 .",
    "so , by lemma [ lemma : refine ] , each iteration of step 3 takes @xmath6 time .",
    "this yields the desired @xmath137 running time , where @xmath143 is the number of strong articulation points of @xmath8 .",
    "since a digraph may have up to @xmath4 strong articulation points , this is @xmath139 in the worst case .",
    "we will show how to obtain a faster algorithm by applying the framework developed in @xcite for the computation of the @xmath2-edge - connected blocks , namely by using dominator trees and auxiliary graphs .",
    "as already mentioned , auxiliary graphs need to be defined in a substantially different way , which complicates several technical details . as a warm up ,",
    "first consider the computation of @xmath144 , i.e. , the vertex - resilient blocks that contain a specific vertex @xmath0 .",
    "consider the flow graph @xmath145 with start vertex @xmath0 and its reverse digraph @xmath146 , obtained after reversing edge directions .",
    "let @xmath1 be a vertex other than @xmath0 .",
    "clearly , @xmath0 and @xmath1 are vertex - resilient if and only if @xmath0 is the only proper dominator of @xmath1 in both @xmath145 and @xmath146 , i.e. , @xmath147 and @xmath148 .",
    "now let @xmath28 be a sibling of @xmath1 in both @xmath149 and @xmath150 .",
    "the fact that @xmath148 and @xmath151 implies that for any vertex @xmath152 there is path from @xmath1 to @xmath28 through @xmath0 that avoids @xmath45 .",
    "so @xmath1 and @xmath28 are in a common vertex - resilient block that contains @xmath0 if and only if they lie in the same strongly connected component of @xmath153 .",
    "this observation implies the following linear - time algorithm to compute the vertex - resilient blocks that contain @xmath0 .",
    "compute the dominator trees @xmath149 and @xmath150 of @xmath145 and @xmath146 respectively .",
    "let @xmath154 ( resp . ,",
    "@xmath155 ) be the set of children of @xmath0 in @xmath145 ( resp . , @xmath146 ) .",
    "set @xmath156 and initialize the set of blocks @xmath157 . compute the strongly connected blocks @xmath158 of @xmath153 .",
    "let @xmath120 be the set that contains the nonempty restrictions of the @xmath142 sets to @xmath122 , i.e. , @xmath120 contains the nonempty sets @xmath159 .",
    "finally , execute @xmath160 .",
    "note that all the vertex - resilient blocks can be computed in @xmath21 time by applying the above algorithm to all vertices @xmath0 .",
    "to avoid the repeated applications of this algorithm we develop a new concept of _ auxiliary graphs _ for @xmath2-vertex connectivity . before doing that",
    ", we state two properties regarding information that a dominator tree can provide about vertex - resilient blocks and paths .    [",
    "lemma : vertex - resilient - necessary ] let @xmath7 be a strongly connected graph , and let @xmath23 be an arbitrary start vertex .",
    "any two vertices @xmath45 and @xmath46 are vertex - resilient only if they are siblings in @xmath30 or one is the immediate dominator of the other in @xmath27 .    immediate .",
    "[ lemma : blocks - paths ] let @xmath91 be a vertex , and let @xmath0 be any vertex that is not a descendant of @xmath91 in @xmath30 .",
    "then there is a path from @xmath0 to @xmath91 that does not contain any proper descendants of @xmath91 in @xmath30 .",
    "moreover , all simple paths from @xmath0 to any descendant of @xmath91 in @xmath30 contain @xmath91 .",
    "let @xmath56 be any path from @xmath0 to @xmath91 .",
    "( such a path exists since graph @xmath8 is strongly connected . )",
    "let @xmath28 be the first vertex on @xmath56 such that @xmath28 is a descendant of @xmath91 .",
    "then either @xmath161 or @xmath28 is a proper descendant of @xmath91 . in the first case the lemma holds .",
    "suppose @xmath28 is a proper descendant of @xmath91 . since @xmath0 is not a descendant of @xmath91 in @xmath30 ,",
    "there is a path @xmath58 from @xmath25 to @xmath0 in @xmath8 that does not contain @xmath91",
    ". then @xmath58 followed by the part of @xmath56 from @xmath0 to @xmath28 is a path from @xmath25 to @xmath28 that avoids @xmath91 , a contradiction .",
    "as in @xcite , _ auxiliary graphs _ are a key concept in our algorithm that provides a decomposition of the input digraph @xmath8 into smaller digraphs ( not necessarily subgraphs of @xmath8 ) that maintain the original vertex - resilient blocks . in @xcite we used a _ canonical decomposition _ of the input digraph , in order to obtain auxiliary graphs that maintain the @xmath2-edge - connected blocks .",
    "a key property of this decomposition was the fact that any vertex in an auxiliary graph @xmath22 is reachable from a vertex outside @xmath22 only though a single strong bridge . in the computation of the vertex - resilient blocks , however , we have to decompose the input digraph according to strong articulation points , and thus the above property is completely lost . to overcome this critical issue",
    ", we apply a different and more involved decomposition .",
    "let @xmath25 be an arbitrarily chosen start vertex in @xmath8 . recall that we denote by @xmath27 the flow graph with start vertex @xmath25 , by @xmath36 the flow graph obtained from @xmath27 after reversing edge directions , by @xmath30 and @xmath162 the dominator trees of @xmath27 and @xmath36 respectively , and by @xmath154 and @xmath155 the set of children of @xmath0 in @xmath30 and @xmath162 respectively .    for each vertex @xmath91 ,",
    "let @xmath163 denote the level @xmath164 descendants of @xmath91 , i.e. , @xmath165 , @xmath166 , etc .",
    "for each vertex @xmath167 that is not a leaf in @xmath30 we build the _ auxiliary graph @xmath168 of @xmath91 _ as follows . the vertex set of @xmath22 is @xmath169 and it is partitioned into a set of _ ordinary _ vertices @xmath170 and a set of _ auxiliary _ vertices @xmath171 .",
    "the auxiliary graph @xmath22 results from @xmath8 by contracting the vertices in @xmath172 as follows .",
    "all vertices that are not descendants of @xmath91 in @xmath30 are contracted into @xmath91 . for each vertex @xmath173",
    ", we contract all descendants of @xmath1 in @xmath30 into @xmath1",
    ". see figure  [ fig : auxiliary ] .",
    "we use the same definition for the auxiliary graph @xmath174 of @xmath25 , with the only difference that we let @xmath25 be an ordinary vertex . also note that when we form @xmath174 from @xmath8 , no vertex is contracted into @xmath25 . in order to bound the size of all auxiliary graphs",
    ", we eliminate parallel edges during those contractions .",
    "[ lemma : auxiliary - graphs - size ] the auxiliary graphs @xmath22 have at most @xmath175 vertices and @xmath176 edges in total .",
    "a vertex of @xmath8 may appear in at most four auxiliary graphs .",
    "therefore , the total number of edges in all auxiliary graphs excluding type-(b ) shortcut edges @xmath177 with @xmath178 is at most @xmath179 .",
    "a type-(b ) shortcut edge @xmath177 with @xmath178 of @xmath22 corresponds to a unique vertex in @xmath180 , so there are at most @xmath4 such edges .",
    "cc , the dominator tree @xmath30 of flow graph @xmath27 , the auxiliary graph @xmath181 and the dominator tree @xmath182 of the flow graph @xmath183 .",
    "( the edges of the dominator tree @xmath182 are shown directed from child to parent . ) the auxiliary vertices of @xmath42 are shown gray . [",
    "fig : auxiliary],title=\"fig:\",scaledwidth=50.0% ] & , the dominator tree @xmath30 of flow graph @xmath27 , the auxiliary graph @xmath181 and the dominator tree @xmath182 of the flow graph @xmath183 .",
    "( the edges of the dominator tree @xmath182 are shown directed from child to parent . )",
    "the auxiliary vertices of @xmath42 are shown gray .",
    "[ fig : auxiliary],title=\"fig:\",scaledwidth=50.0% ] + @xmath8 & @xmath30 +   + , the dominator tree @xmath30 of flow graph @xmath27 , the auxiliary graph @xmath181 and the dominator tree @xmath182 of the flow graph @xmath183 .",
    "( the edges of the dominator tree @xmath182 are shown directed from child to parent . )",
    "the auxiliary vertices of @xmath42 are shown gray .",
    "[ fig : auxiliary],title=\"fig:\",scaledwidth=50.0% ] & , the dominator tree @xmath30 of flow graph @xmath27 , the auxiliary graph @xmath181 and the dominator tree @xmath182 of the flow graph @xmath183 .",
    "( the edges of the dominator tree @xmath182 are shown directed from child to parent . )",
    "the auxiliary vertices of @xmath42 are shown gray .",
    "[ fig : auxiliary],title=\"fig:\",scaledwidth=23.0% ] + @xmath181 & @xmath182    [ lemma : blocks - auxiliary - paths ] let @xmath0 and @xmath1 be two vertices in @xmath184 .",
    "any path @xmath56 from @xmath0 to @xmath1 in @xmath8 has a corresponding path @xmath185 from @xmath0 to @xmath1 in @xmath22 , and vice versa .",
    "moreover , if @xmath0 and @xmath1 are both ordinary vertices in @xmath22 , then @xmath185 contains a strong articulation point if and only if @xmath56 does .",
    "the correspondence between paths in @xmath8 and paths in @xmath22 follows from the definition of the auxiliary graph .",
    "next we prove the second part of the lemma .",
    "let @xmath185 be the path in @xmath22 that corresponds to a path @xmath56 from @xmath0 to @xmath1 in @xmath8 , where both @xmath0 and @xmath1 are ordinary vertices in @xmath22 . by the construction of the auxiliary graph",
    ", we have that if @xmath185 contains a strong articulation point then so does @xmath56 . for the contraposition , suppose @xmath56 contains a strong articulation point @xmath45 .",
    "consider the following cases :    * @xmath186 .",
    "then , by the construction of the auxiliary graph , we have @xmath187 .",
    "* @xmath45 is a descendant of a vertex @xmath188 .",
    "vertex @xmath84 is a strong articulation point since it is either @xmath45 or a proper descendant of @xmath45 .",
    "then , by lemma [ lemma : blocks - paths ] , the part of @xmath56 from @xmath0 to @xmath45 contains @xmath84 .",
    "so , @xmath185 also contains @xmath84 by the construction of the auxiliary graph .",
    "* @xmath45 is not a descendant of @xmath91 . in this case",
    ", we have @xmath189 .",
    "since @xmath0 and @xmath1 are ordinary vertices of @xmath22 , @xmath190 is not empty and therefore @xmath91 is a strong articulation point . by lemma [ lemma : blocks - paths ] , the part of @xmath56 from @xmath45 to @xmath1 contains @xmath91 .",
    "so , @xmath185 also contains @xmath91 by the construction of the auxiliary graph .",
    "hence , in every case @xmath185 contains a strong articulation point and the lemma follows .    [ corollary : auxialiry - graphs ] each auxiliary graph @xmath22 is strongly connected",
    ".    follows from the construction of @xmath22 , lemma [ lemma : blocks - auxiliary - paths ] , and the fact that @xmath8 is strongly connected .",
    "the next lemma shows that auxiliary graphs maintain the vertex - resilient relation of the original digraph .",
    "[ lemma : vertex - resilient - auxiliary ] let @xmath0 and @xmath1 be any two distinct vertices of @xmath8 .",
    "then @xmath0 and @xmath1 are vertex - resilient in @xmath8 if and only if they are both ordinary vertices in an auxiliary graph @xmath22 and they are vertex - resilient in @xmath22 .",
    "suppose first that @xmath0 or @xmath1 is @xmath25 . without loss of generality",
    "assume @xmath191 .",
    "then by lemma [ lemma : vertex - resilient - necessary ] we have that @xmath192 , so @xmath0 and @xmath1 are both ordinary vertices of @xmath174 .",
    "now consider that @xmath193 . from lemma",
    "[ lemma : vertex - resilient - necessary ] we have that @xmath0 and @xmath1 belong in a set @xmath194 so they are both ordinary vertices of @xmath22 .",
    "clearly if all paths from @xmath0 to @xmath1 in @xmath22 contain a common vertex ( strong articulation point ) , then so do all paths from @xmath0 to @xmath1 in @xmath8 by lemma [ lemma : blocks - auxiliary - paths ] .",
    "now we prove the converse .",
    "suppose all paths from @xmath0 to @xmath1 in @xmath8 contain a common vertex @xmath28 .",
    "if @xmath195 then also all paths from @xmath0 to @xmath1 in @xmath22 contain @xmath28 by the proof of lemma [ lemma : blocks - auxiliary - paths ] .",
    "so suppose @xmath178 .",
    "then @xmath0 is not an ancestor of @xmath1 in @xmath30 , since otherwise there would be a path from @xmath0 to @xmath1 that avoids @xmath28 .",
    "first consider that @xmath28 is a ( proper ) descendant of @xmath91 in @xmath30 . since @xmath0 is not an ancestor of @xmath1 in @xmath30 ,",
    "there is a vertex @xmath196 that is an ancestor of @xmath28 . by lemma [ lemma : blocks - paths ] , all paths from @xmath0",
    "to @xmath28 in @xmath8 , and thus all paths from @xmath0 to @xmath1 , contain @xmath45 . by lemma [ lemma : blocks - auxiliary - paths ]",
    "this is also true for all paths from @xmath0 to @xmath1 in @xmath22 .    finally , if @xmath28 is not a descendant of @xmath91 , lemma [ lemma : blocks - paths ] implies that all paths from @xmath28 to @xmath1 in @xmath8 contain vertex @xmath91 .",
    "hence , all paths from @xmath0 to @xmath1 in @xmath8 contain @xmath91 , and so do all paths from @xmath0 to @xmath1 in @xmath22 by lemma [ lemma : blocks - auxiliary - paths ] .",
    "now we specify how to compute all the auxiliary graphs @xmath197 in @xmath3 time .",
    "observe that the edge set @xmath198 contains all edges in @xmath7 induced by the vertices in @xmath184 ( i.e. , edges @xmath199 such that @xmath195 and @xmath200 ) .",
    "we also add in @xmath198 the following types of _ shortcut _ edges that correspond to paths in @xmath8 .",
    "( a ) if @xmath8 contains an edge @xmath177 such that @xmath201 is a descendant of @xmath91 in @xmath30 and @xmath200 then we add the shortcut edge @xmath202 where @xmath84 the is an ancestor of @xmath28 in @xmath30 such that @xmath188 .",
    "( b ) if @xmath8 contains an edge @xmath177 such that @xmath28 but not @xmath0 is a descendant of @xmath91 in @xmath30 then we add the shortcut edge @xmath203 where @xmath84 the nearest ancestor of @xmath28 in @xmath30 such that @xmath204 ( @xmath205 if @xmath195 ) .",
    "we note that we do not keep multiple ( parallel ) shortcut edges .",
    "see figure  [ fig : auxiliary ] .",
    "we use the same definition for the auxiliary graph @xmath174 of @xmath25 , with the only difference that we let @xmath25 be an ordinary vertex .",
    "we also note that @xmath174 does not contain type-(b ) shortcut edges .    to construct the auxiliary graphs @xmath168 we need to specify how to compute the shortcut edges of type ( a ) and ( b ) .",
    "to do this efficiently we need to test ancestor - descendant relations in @xmath30 .",
    "there are several simple @xmath206-time tests of this relation  @xcite .",
    "the most convenient one for us is to number the vertices of @xmath30 from @xmath207 to @xmath4 in preorder , and to compute the number of descendants of each vertex .",
    "then , vertex @xmath0 is a descendant of @xmath91 if and only if @xmath208 , where , for any vertex @xmath45 , @xmath209 and @xmath210 are , respectively , the preorder number and the number of descendants of @xmath45 in @xmath30 .",
    "suppose @xmath177 is an edge of type ( a ) .",
    "we need to find the ancestor @xmath84 of @xmath28 in @xmath30 such that @xmath188 .",
    "we process all such arcs of @xmath22 as follows .",
    "we create a list @xmath211 that contains the edges @xmath177 of type ( a ) , and sort @xmath211 in increasing preorder of @xmath28 .",
    "we create a second list @xmath212 that contains the vertices in @xmath180 , and sort @xmath212 in increasing preorder .",
    "then , the shortcut edge of @xmath177 is @xmath202 , where @xmath84 is the last vertex in the sorted list @xmath212 such that @xmath213 .",
    "thus the shortcut edges of type ( a ) can be computed in linear time by bucket sorting and merging .",
    "now we consider the edges of type ( b ) . for each vertex",
    "@xmath173 we need to test if there is an edge @xmath177 in @xmath8 such that @xmath28 is a proper descendant of @xmath1 and @xmath0 is not a descendant of @xmath91 in @xmath30 . in this case , we add in @xmath22 the edge @xmath214 . to do this test efficiently",
    ", we assign to each edge @xmath177 a tag @xmath215 which we set equal to the preorder number of the nearest common ancestor of @xmath28 and @xmath0 in @xmath30 .",
    "we can do this easily by using the parent property and the @xmath206-time test of the ancestor - descendant relation as follows : @xmath216 if @xmath28 is an ancestor of @xmath0 in @xmath30 , @xmath217 if @xmath0 is an ancestor of @xmath28 in @xmath30 , and @xmath218 otherwise . at each vertex @xmath31 in @xmath30",
    "we store a label @xmath219 which is the minimum tag of among the edges @xmath115 . using these labels we compute for each @xmath31 in @xmath30 the values @xmath220 .",
    "these computations can be done in @xmath221 time by processing the tree @xmath30 in a bottom - up order . now consider the auxiliary graph @xmath22 .",
    "we process the vertices in @xmath180 . for each such vertex @xmath1",
    "we add the shortcut edge @xmath214 if @xmath222 .",
    "[ lemma : auxiliary - graphs - construction ] we can compute all auxiliary graphs @xmath22 in @xmath221 time .      our linear - time algorithm is illustrated in figure [ fig : fastvrb ] .",
    "it uses two levels of auxiliary graphs and applies one iteration of algorithm for each auxiliary graph of the second level .",
    "the algorithm uses different dominator trees , and applies lemma [ lemma : vertex - resilient - necessary ] in order to identify the vertex - resilient blocks .",
    "since different dominator trees may define different blocks ( which by lemma [ lemma : vertex - resilient - necessary ] are supersets of the vertex - resilient blocks ) , we will use an operation that we call @xmath223 to combine the different blocks .",
    "we begin by computing the dominator tree @xmath30 for an arbitrary start vertex @xmath25 . for any vertex @xmath0",
    ", we let @xmath224 denote the set containing @xmath0 and the children of @xmath0 in @xmath30 , i.e. , @xmath225 .",
    "lemma [ lemma : vertex - resilient - necessary ] gives an initial division of the vertices into blocks that are supersets of the vertex - resilient blocks .",
    "specifically , the vertex - resilient blocks that contain @xmath0 are subsets of @xmath224 or @xmath226 ( for @xmath227 ) .    during the course of the algorithm , each vertex @xmath0 becomes associated with a set of blocks @xmath228 that contain @xmath0 , which are subsets of @xmath224 and @xmath226 if @xmath227 .",
    "the blocks are refined by applying the @xmath229 operation of section [ section : vr - simple ] and operation @xmath223 that we define next , and at the end of the algorithm each set of blocks @xmath228 will be equal to @xmath144 .",
    "let @xmath59 be a block and @xmath38 be a tree with vertex set @xmath230 .",
    "for any vertex @xmath231 , let @xmath232 be the set containing @xmath0 and the children of @xmath0 in @xmath38 .",
    "return the set that consists of the blocks @xmath233 of size at least two , for all @xmath231 .",
    "[ lemma : split ] let @xmath129 be the number of vertices in @xmath234 . then",
    ", the operation @xmath235 can be executed in @xmath236 time .",
    "we number the vertices of @xmath38 in preorder .",
    "let @xmath237 be the preorder number of @xmath231 .",
    "let @xmath238 be the parent of @xmath239 in @xmath38 , where @xmath91 is the root of @xmath38 .",
    "we associate each vertex @xmath239 in @xmath59 with two labels @xmath240 and @xmath241 , and create two corresponding pairs @xmath242 and @xmath243 .",
    "also , if @xmath244 , we associate @xmath91 with one label @xmath245 , and create a corresponding pair @xmath246 . each block created by the @xmath223 operation",
    "consists of a set of at least two vertices @xmath134 that are associated with a specific label .",
    "we can find these blocks by sorting the pairs @xmath247 by label , which can be done in @xmath236 time with bucket sort .    at a high level",
    ", the algorithm begins with a `` coarse '' block tree , induced by the @xmath224 sets of @xmath30 , which is then refined by the blocks defined from the dominator trees of the auxiliary graphs .",
    "the final vertex - resilient block forest is then computed by considering the strongly connected components of the second level auxiliary graphs , after removing their designated start vertex .",
    "the algorithms needs to keep track of the blocks that contain a specific vertex , and , conversely , of the vertices that are contained in a specific block . to facilitate this search",
    "we explicitly store the adjacency lists of the current block forest @xmath43 .",
    "recall that @xmath43 is bipartite , so the adjacency list of a vertex @xmath0 stores the blocks that contain @xmath0 , and the adjacency list of a block node @xmath59 stores the vertices in @xmath59 .",
    "initially @xmath43 contains one block for each set @xmath224 , for all vertices @xmath0 that are not leaves in @xmath30 .",
    "these blocks are later refined by executing the @xmath223 and @xmath229 operations , which maintain the invariant that @xmath43 is a forest , and that any two distinct blocks have at most two vertices in common .",
    "when we execute a @xmath223 or a @xmath229 operation we can update the adjacency lists of @xmath43 , while maintaining the bounds given in lemmas [ lemma : refine ] and [ lemma : split ] . also , since during the execution of the algorithm the number of blocks can only increase , @xmath43 contains at most @xmath44 blocks at any given time .",
    "this fact implies that lemma [ lemma : blocks - number ] holds , so the total number of vertices and edges in @xmath43 is @xmath6 .",
    "[ lemma : fastvrb - correctness ] algorithm is correct .",
    "let @xmath28 and @xmath0 be any vertices . if @xmath28 and @xmath0 are vertex - resilient in @xmath8 , then by lemma [ lemma : vertex - resilient - auxiliary ] they are vertex - resilient in both auxiliary graphs of @xmath8 and @xmath22 that contain them as ordinary vertices .",
    "this implies that the algorithm will correctly include them in the same block in step 1 and will not separate them in steps 3.3 and 3.5 .",
    "so suppose that @xmath28 and @xmath0 are not vertex - resilient .",
    "then , without loss of generality , we can assume that all paths from @xmath28 to @xmath0 contain a common strong articulation point .",
    "thus , @xmath248 . we argue that all the blocks that contain @xmath28 and all the blocks that contain @xmath0 will be separated in some step of the algorithm .",
    "first we observe that @xmath28 and @xmath0 can appear together in at most one of the blocks constructed in step 1 .",
    "also , @xmath28 and @xmath0 can remain in at most one block after each @xmath223 operation ( @xmath28 and @xmath0 can have at most one identical label @xmath249 ) .",
    "so suppose that @xmath28 and @xmath0 are still contained in one common block just before the execution of step 3.5 .",
    "we will show that @xmath28 and @xmath0 will be separated after the @xmath229 operation executed in step 3.5.3 . since @xmath28 and @xmath0 were not separated by a @xmath223 operation , they are either siblings or one is the parent of the other in @xmath250 . also , since @xmath248 we have the following cases .",
    "\\(a ) @xmath251 .",
    "then @xmath28 and @xmath0 are both ordinary vertices of the auxiliary graph @xmath181 with @xmath252 .",
    "lemma [ lemma : vertex - resilient - auxiliary ] implies that @xmath22 contains a strong articulation point @xmath45 that separates @xmath28 from @xmath0 .",
    "we argue that @xmath45 is a proper ancestor of @xmath28 in @xmath250 . if not",
    ", then @xmath253 contains a path @xmath254 from @xmath28 to @xmath91 that avoids @xmath45 .",
    "since @xmath255 , @xmath42 contains a path @xmath58 from @xmath91 to @xmath0 that avoids @xmath45 .",
    "thus @xmath256 is a path in @xmath42 from @xmath28 to @xmath0 that avoids @xmath45 , a contradiction .",
    "now we claim that @xmath257 is also a strong articulation point that separates @xmath28 from @xmath0 .",
    "suppose the claim is false .",
    "then @xmath258 , so @xmath45 is a proper ancestor of @xmath259 in @xmath250 .",
    "let @xmath56 be a path from @xmath28 to @xmath0 that avoids @xmath259 .",
    "then @xmath45 is on @xmath56 since @xmath45 separates @xmath28 from @xmath0 .",
    "let @xmath260 be the part of @xmath56 from @xmath28 to @xmath45 .",
    "also , since @xmath45 is a proper ancestor of @xmath259 in @xmath250 , @xmath253 has a path @xmath261 from @xmath91 to @xmath45 that avoids @xmath259 .",
    "then @xmath256 is a path in @xmath42 from @xmath28 to @xmath91 that avoids @xmath259 , a contradiction .",
    "the claim implies that @xmath28 and @xmath0 are located in different strongly connected components of @xmath262 , so they are contained in different blocks computed in step 3.5.3 .",
    "\\(b ) @xmath263 .",
    "then @xmath28 and @xmath0 are both ordinary vertices of the auxiliary graph @xmath181 .",
    "lemma [ lemma : vertex - resilient - auxiliary ] implies that @xmath22 contains a strong articulation point @xmath45 that separates @xmath28 from @xmath0 . by the same arguments as in case ( a ) , it follows that @xmath257 is a strong articulation point that separates @xmath28 from @xmath0 .",
    "so again @xmath28 and @xmath0 will be located in different blocks after step 3.5.3 .",
    "[ lemma : fastvrb - time ] algorithm runs in @xmath221 time .",
    "we account for the total time spent on each step that algorithm executes .",
    "step 1 takes @xmath221 time by @xcite , and step 2 takes @xmath221 time by lemma [ lemma : auxiliary - graphs - construction ] . from lemma [ lemma : auxiliary - graphs - size ]",
    "we have that the total number of vertices and the total number of edges in all auxiliary graphs @xmath42 of @xmath8 are @xmath6 and @xmath221 respectively .",
    "then , again by lemma [ lemma : auxiliary - graphs - size ] , the total size ( number of vertices and edges ) of all auxiliary graphs @xmath264 for all @xmath42 , computed in step 3.4 , is still @xmath221 and they are also computed in @xmath221 total time by lemma [ lemma : auxiliary - graphs - construction ] . now consider the @xmath223 operations .",
    "all these operations that occur during step 3.3 for a specific auxiliary graph @xmath22 operate on the same tree @xmath38 , which can be preprocessed once , as in lemma [ lemma : split ] , for all @xmath223 operations .",
    "therefore , the total preprocessing time for all @xmath223 operations is @xmath6 . excluding the preprocessing time for @xmath38 , a @xmath265 operation takes time proportional to the number of vertices in @xmath59 .",
    "therefore all @xmath223 operations take @xmath6 time in total by lemmas [ lemma : blocks - size ] and [ lemma : split ] . in step 3.5.1",
    "we examine the adjacency lists of the ordinary vertices @xmath266 and find the corresponding blocks that contain at least such two ordinary vertices .",
    "then we examine the adjacency lists of each such block .",
    "so , the adjacency lists of each vertex @xmath0 and each block that contains @xmath0 can be examined at most three times .",
    "hence , step 3.5.1 takes @xmath6 time in total .",
    "finally , steps 3.5.2 and 3.5.3 take @xmath221 time in total by @xcite and lemmas [ lemma : blocks - size ] and [ lemma : refine ] .",
    "algorithm computes the vertex - resilient blocks of the input digraph @xmath8 and stores them in the block forest @xmath43 of section [ sec : blocks ] , which makes it straightforward to test in constant time if two query vertices @xmath0 and @xmath1 are vertex - resilient .",
    "here we show that if @xmath0 and @xmath1 are not vertex - resilient , then we can report a witness of this fact , that is , a strong articulation point @xmath45 such that @xmath0 and @xmath1 are not in the same strongly connected component of @xmath102 . using this witness , it is straightforward to verify in @xmath221 time that @xmath0 and @xmath1 are not vertex - resilient ; it suffices to check that @xmath0 is not reachable from @xmath1 in @xmath102 or vice versa .    to obtain this witness ,",
    "we would like to apply lemma [ lemma : vb - graph - path-2 ] , but this requires @xmath0 and @xmath1 to be in the same tree of the block forest .",
    "fortunately , we can find the witness fast by applying lemmas [ lemma : vertex - resilient - necessary ] and [ lemma : blocks - paths ] , which use information computed during the execution of .",
    "we do that as follows .",
    "first consider the simpler case where @xmath191 .",
    "if lemma [ lemma : vertex - resilient - necessary ] does not hold for @xmath25 and @xmath1 in @xmath30 then @xmath267 is a strong articulation point that separates @xmath25 from @xmath1 .",
    "otherwise , @xmath268 , and @xmath25 and @xmath1 are both ordinary vertices in the auxiliary graph @xmath269 .",
    "then @xmath25 and @xmath1 can not satisfy lemma [ lemma : vertex - resilient - necessary ] in @xmath270 , so @xmath271 is a strong articulation point that separates @xmath1 from @xmath25 .",
    "now consider the case where @xmath272 .",
    "suppose first that @xmath0 and @xmath1 do not satisfy lemma [ lemma : vertex - resilient - necessary ] in @xmath30 .",
    "then @xmath32 is not an ancestor of @xmath0 or @xmath273 is not an ancestor of @xmath1 ( or both ) .",
    "assume , without loss of generality , that @xmath32 is not an ancestor of @xmath0 .",
    "by lemma [ lemma : blocks - paths ] , all paths from @xmath0 to @xmath1 pass through @xmath32 , so @xmath32 is a strong articulation point that separates @xmath0 from @xmath1 .",
    "on the other hand , if lemma [ lemma : vertex - resilient - necessary ] holds for @xmath0 and @xmath1 in @xmath30 , then @xmath0 and @xmath1 are both ordinary vertices in an auxiliary graph @xmath181 , where @xmath274 if @xmath275 , @xmath276 if @xmath277 , and @xmath278 otherwise . by lemma [ lemma : vertex - resilient - auxiliary ] ,",
    "@xmath0 and @xmath1 are not vertex - resilient in @xmath42 .",
    "if they violate lemma [ lemma : vertex - resilient - necessary ] for @xmath182 then we can find a strong articulation point that separates them as above .",
    "finally , assume that lemma [ lemma : vertex - resilient - necessary ] holds for @xmath0 and @xmath1 in @xmath182 .",
    "now @xmath0 and @xmath1 are both ordinary vertices in an auxiliary graph @xmath279 . from the proof of lemma [ lemma : fastvrb - correctness ] we have that @xmath280 or @xmath281 and that @xmath259 is a strong articulation point that separates @xmath0 and @xmath1 .",
    "all the above tests can be performed in constant time .",
    "it suffices to store the dominator tree @xmath30 of @xmath27 , and the dominator trees @xmath182 of all auxiliary graphs @xmath282 .",
    "the space required for these data structures is @xmath6 by lemma [ lemma : auxiliary - graphs - size ] .",
    "[ theorem : vrb ] let @xmath8 be a digraph with @xmath4 vertices and @xmath5 edges .",
    "we can compute the vertex - resilient blocks of @xmath8 in @xmath3 time and store them in a data structure of @xmath6 space . given this data structure ,",
    "we can test in @xmath206 time if any two vertices are vertex - resilient .",
    "moreover , if the two vertices are not vertex - resilient , then we can report in @xmath206 time a strong articulation point that separates them .",
    "we can compute the @xmath2-vertex - connected blocks of the input digraph @xmath7 by applying corollary [ cor:2vc - resilient ] as follows . given the vertex - resilient blocks @xmath119 and the @xmath2-edge - connected blocks @xmath120 of @xmath8 , we simply execute @xmath126 .",
    "this takes @xmath6 time by lemma [ lemma : refine ] . also ,",
    "since the @xmath2-vertex - connected blocks have a block forest representation , we can test if two given vertices are @xmath2-vertex - connected in @xmath206 time as described in section [ sec : blocks ] .",
    "if we only wish to answer queries of whether two vertices @xmath0 and @xmath1 are @xmath2-vertex - connected , without computing explicitly the @xmath2-vertex and the @xmath2-edge - connected blocks , then we can use a simpler alternative , as suggested by lemma [ lemma:2vc - resilient - sb ] .",
    "first , we test if @xmath0 and @xmath1 are vertex - resilient in @xmath206-time as in section [ sec : queries ] , and if they are not , then we can report a strong articulation point that separates them . if , on the other hand , @xmath0 and @xmath1 are vertex - resilient then we need to check if @xmath8 contains @xmath114 or @xmath115 as a strong bridge",
    ". we can do this easily using the same information as in section [ sec : queries ] , namely the dominator tree @xmath30 of @xmath27 , and the dominator trees @xmath182 of all auxiliary graphs @xmath282 . for instance , if @xmath114 is a strong bridge in @xmath8 , then it will appear as an edge in one of the dominator trees .",
    "therefore , it suffices to mark the edges of dominator trees that are strong bridges , and then check if @xmath0 is the parent of @xmath1 or @xmath1 is the parent of @xmath0 in @xmath30 or in @xmath250 , where @xmath181 is the auxiliary graph of @xmath8 such that @xmath274 if @xmath275 , @xmath276 if @xmath277 , and @xmath278 otherwise .    [ theorem:2vcb ]",
    "let @xmath8 be a digraph with @xmath4 vertices and @xmath5 edges .",
    "we can compute the @xmath2-vertex - connected blocks of @xmath8 in @xmath3 time and store them in a data structure of @xmath6 space .",
    "given this data structure , we can test in @xmath206 time if any two vertices are @xmath2-vertex - connected .",
    "moreover , if the two vertices are not @xmath2-vertex - connected , then we can report in @xmath206 time a strong articulation point or a strong bridge that separates them .",
    "here we show how to extend algorithm so that it also computes in linear time a sparse certificate for the vertex - resilient and the @xmath2-vertex - connected relations .",
    "that is , we compute a subgraph @xmath283 of the input graph @xmath8 that has @xmath6 edges and maintains the same vertex - resilient and @xmath2-vertex - connected blocks as the input graph .",
    "we can achieve this by applying the same approach we used in @xcite for computing a sparse certificate for the @xmath2-edge - connected blocks .    as in section [ section : vertex - resilient - blocks ] we can assume without loss of generality that @xmath8 is strongly connected , in which case subgraph @xmath283 will also be strongly connected .",
    "the certificate uses the concept of _ independent spanning trees _ @xcite .",
    "a spanning tree @xmath38 of a flow graph @xmath27 is a tree with root @xmath25 that contains a path from @xmath25 to @xmath0 for all vertices @xmath0 .",
    "two spanning trees @xmath59 and @xmath284 rooted at @xmath25 are _ independent _ if for all @xmath0 , the paths from @xmath25 to @xmath0 in @xmath59 and @xmath284 share only the dominators of @xmath0 .",
    "every flow graph @xmath27 has two such spanning trees , computable in linear time @xcite . moreover , the computed spanning trees are _ maximally edge - disjoint _ , meaning that the only edges they have in common are the bridges of @xmath27 .    during the execution of algorithm , we maintain a list ( multiset ) @xmath285 of the edges to be added in @xmath283 . the same edge may be inserted into @xmath285 multiple times , but the total number of insertions will be @xmath6",
    ". then we can use radix sort to remove duplicate edges in @xmath6 time .",
    "we initialize @xmath285 to be empty .",
    "during step 1 of algorithm we compute two independent spanning trees , @xmath286 and @xmath287 of @xmath27 and insert their edges into @xmath285 .",
    "next , in step 3.1 we compute two independent spanning trees @xmath288 and @xmath289 for each auxiliary graph @xmath183 . for each edge",
    "@xmath177 of these spanning trees , we insert a corresponding edge into @xmath285 as follows .",
    "if both @xmath28 and @xmath0 are ordinary vertices in @xmath183 , we insert @xmath177 into @xmath285 since it is an original edge of @xmath8 .",
    "otherwise , @xmath28 or @xmath0 is an auxiliary vertex and we insert into @xmath285 a corresponding original edge of @xmath8 .",
    "such an original edge can be easily found during the construction of the auxiliary graphs . finally , in step 3.5 , we compute two spanning trees for every connected component @xmath142 of each auxiliary graph @xmath262 as follows .",
    "let @xmath290 be the subgraph of @xmath291 that is induced by the vertices in @xmath142 .",
    "we choose an arbitrary vertex @xmath292 and compute a spanning tree of @xmath293 and a spanning tree of @xmath294 .",
    "we insert in @xmath285 the original edges that correspond to the edges of these spanning trees .",
    "the sparse certificate @xmath283 has the same vertex - resilient blocks and @xmath2-vertex - connected blocks as the input digraph @xmath8 .",
    "we first argue that the execution of algorithm on @xmath283 and produces the same vertex - resilient blocks as the execution of algorithm on @xmath8 .",
    "the correctness of algorithm implies that it produces the same result regardless of the choice of start vertex @xmath25 .",
    "so we assume that both executions choose the same start vertex @xmath25 .",
    "we will refer to the execution of algorithm with input @xmath8 ( resp .",
    "@xmath283 ) as @xmath295 ( resp .",
    "@xmath296 ) .",
    "first we note that @xmath283 is strongly connected since it contains a spanning tree of @xmath27 and a spanning tree for the reverse of each auxiliary graph @xmath22 .",
    "moreover , the fact that @xmath283 contains two independent spanning trees of @xmath8 implies that @xmath8 and @xmath283 have the same dominator tree with respect to the start vertex @xmath25 that are computed in step 1 .",
    "hence , the auxiliary graphs computed in step 2 of algorithm have the same sets of ordinary and auxiliary vertices in both executions @xmath295 and @xmath296 . hence , step 3.1 computes the same dominator trees @xmath297 and @xmath250 in both executions , and therefore steps 3.2 and 3.3 compute the same blocks",
    ". the same argument as in steps 1 and 2 implies that both executions @xmath295 and @xmath296 compute in step 3.4 auxiliary graphs @xmath264 with the same sets of ordinary and auxiliary vertices . finally , by construction",
    ", the strongly connected components of each auxiliary graph @xmath262 are the same in both executions of @xmath295 and @xmath296 .",
    "we conclude that @xmath295 and @xmath296 compute the same vertex - resilient blocks as claimed .",
    "next , observe that since the independent spanning trees computed in steps 1 and 3.1 of the extended version of are maximally edge - disjoint , @xmath283 maintains the same strong bridges as @xmath8 .",
    "then , by corollary [ cor:2vc - resilient ] , @xmath283 also has the same @xmath2-vertex - connected blocks as @xmath8 .",
    "we presented the first linear - time algorithms for computing the vertex - resilient and the @xmath2-vertex - connected relations among the vertices of a digraph .",
    "we showed how to represent these relations with a data structure of @xmath6 size , so that it is straightforward to check in constant time if any two vertices are vertex - resilient or @xmath2-vertex - connected .",
    "moreover , if the answer to such a query is negative , then we can provide a witness of this fact in constant time , i.e. , a vertex ( strong articulation point ) or an edge ( strong bridge ) of @xmath8 that separates the two query vertices .",
    "an experimental study of the algorithms described in this paper is presented in @xcite , where it is shown that they perform very well in practice on very large graphs ( with millions of vertices and edges ) .",
    "we leave as an open question if the @xmath2-edge - connected or the @xmath2-vertex - connected components of a digraph can be computed faster than @xmath20 .",
    "w.  di luigi , l.  georgiadis , g.  f. italiano , l.  laura , and n.  parotsidis .",
    "2-connectivity in directed graphs : an experimental study . in _ proc .",
    "17th wks . on algorithm engineering and experiments _ , pages 173187 , 2015 ."
  ],
  "abstract_text": [
    "<S> given a directed graph , two vertices @xmath0 and @xmath1 are @xmath2-_vertex - connected _ if there are two internally vertex - disjoint paths from @xmath0 to @xmath1 and two internally vertex - disjoint paths from @xmath1 to @xmath0 . in this paper , we show how to compute this relation in @xmath3 time , where @xmath4 is the number of vertices and @xmath5 is the number of edges of the graph . </S>",
    "<S> as a side result , we show how to build in linear time an @xmath6-space data structure , which can answer in constant time queries on whether any two vertices are @xmath2-vertex - connected . additionally , </S>",
    "<S> when two query vertices @xmath0 and @xmath1 are not @xmath2-vertex - connected , our data structure can produce in constant time a `` witness '' of this property , by exhibiting a vertex or an edge that is contained in all paths from @xmath0 to @xmath1 or in all paths from @xmath1 to @xmath0 . </S>",
    "<S> we are also able to compute in linear time a sparse certificate for @xmath2-vertex connectivity , i.e. , a subgraph of the input graph that has @xmath6 edges and maintains the same @xmath2-vertex connectivity properties as the input graph . </S>"
  ]
}