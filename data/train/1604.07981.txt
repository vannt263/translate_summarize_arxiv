{
  "article_text": [
    "the _ constraint satisfaction problem _ ( csp ) provides a common framework for many theoretical problems in computer science as well as for many real - life applications .",
    "a csp instance consists of a number of variables , a domain , and constraints imposed on the variables with the goal to determine whether the instance is satisfiable , that is , whether there is an assignment of domain values to all the variables in such a way that all the constraints are satisfied .",
    "the general csp is np - complete and thus a major research direction is to identify restrictions on the csp that render the problem _ tractable _ , that is , solvable in polynomial time .",
    "a substantial body of work exists from the past two decades on applications of universal algebra in the computational complexity of and the applicability of algorithmic paradigms to csps .",
    "moreover , a number of celebrated results have been obtained through this method ; see  @xcite for a recent survey . however , the algebraic approach to csps is only applicable to _ language - based _ csps , that is , classes of csps defined by the set of allowed constraint relations but with arbitrary interactions of the constraint scopes .",
    "for instance , the well - known 2-sat problem is a class of language - based csps on the boolean domain @xmath1 with all constraint relations being _ binary _ , that is , of arity at most two .",
    "on the other side of the spectrum are _ structure - based _ csps , that is , classes of csps defined by the allowed interactions of the constraint scopes but with arbitrary constraint relations . here",
    "the methods that have been successfully used to establish complete complexity classifications come from graph theory  @xcite .",
    "the complexity of csps that are neither language - based nor structure - based , and thus are often called _ hybrid _ csps , is much less understood ; see  @xcite for a recent survey .",
    "one approach to hybrid csps that has been rather successful studies the classes of csps defined by _ forbidden patterns _ ; that is , by forbidding certain generic subinstances .",
    "the focus of this paper is on such csps .",
    "we remark that we deal with _ binary _ csps but , unlike in most papers on ( the algebraic approach to ) language - based csps , the domain is _ not _ fixed and is part of the input .",
    "an example of a pattern is given in figure  [ fig : btpmc](a ) .",
    "this is the so - called _ broken triangle _ pattern ( btp )  @xcite ( a formal definition is given in section  [ sec : prelim ] ) .",
    "btp is an example of a _",
    "tractable _ pattern , which means that any binary csp instance in which btp does not occur is solvable in polynomial time .",
    "the class of csp instances defined by forbidding btp includes , for instance , all tree - structured binary csps  @xcite .",
    "there are several generalisations of btp , for instance , to quantified csps  @xcite , to existential patterns  @xcite , to patterns on more variables  @xcite , and other classes  @xcite .",
    "the framework of forbidden patterns is general enough to capture language - based csps in terms of their polymorphisms .",
    "for instance , the pattern in figure  [ fig : btpmc](b ) captures the notion of binary relations that are max - closed  @xcite . surprisingly , there are essentially only two classes of algorithms ( and their combinations ) known for establishing tractability of csps .",
    "these are , firstly , a generalisation of gaussian elimination  @xcite , whose applicability for language - based csps is known  @xcite , and , secondly , problems solvable by _ local consistency methods _ , which originated in artificial intelligence ; see references in  @xcite .",
    "the latter can be defined in many equivalent ways including pebble games , datalog , treewidth , and proof complexity  @xcite .",
    "intuitively , a class of csp instances is solvable by @xmath2-consistency if unsatisfiable instances can always be refuted while only keeping partial solutions of size @xmath2 `` in memory '' .",
    "for instance , the 2-sat problem is solvable by local consistency methods .    for structure - based csps ,",
    "the power of consistency methods is well understood : a class of structures can be solved by @xmath2-consistency if and only if the treewidth ( modulo homomorphic equivalence ) is at most @xmath2  @xcite .",
    "consequently , consistency methods solve all tractable cases of structurally - restricted bounded - arity csps  @xcite . for language - restricted csps",
    ", the power of consistency methods has only recently been characterised  @xcite .",
    "our ultimate goal is to understand the power of local consistency methods for hybrid csps . on this quest , we focus in this article on the power of the first level of local consistency , known as _ arc consistency _ ( ac ) , for classes of binary hybrid csps defined by forbidden ( partially - ordered ) patterns .",
    "the class of csps defined by forbidding btp from figure  [ fig : btpmc](a ) is in fact solvable by ac .",
    "but as it turns out , btp is not the only pattern with this property .    as our main contribution , we give , in theorem  [ thm : order ] , a _",
    "complete characterisation _ of so - called simple partially - ordered forbidden patterns which have this ac - solvability property . here",
    "the partial orders are on variables and domain values .",
    "it turns out that btp is just one of five such ac - solvable patterns .",
    "the four other patterns allow us to exhibit new tractable classes , one of which in particular we expect to lead to new applications since it defines a strict generalisation of binary max - closed constraints which have already found applications in computer vision  @xcite and temporal reasoning  @xcite .",
    "we also provide results on the associated meta problem of deciding whether a csp instance falls into one of these new tractable classes .",
    "given that ac is the first level of local consistency methods and is implemented in _ all _ constraint solvers , an understanding of the power of ac is paramount .",
    "we note that focusing on classes of csps defined by forbidden patterns is very natural as ac _ can not _ introduce forbidden patterns .",
    "while simple patterns do not cover all partially - ordered patterns it is a natural , interesting , and broad enough concept that covers btp and four other novel and non - trivial tractable classes .",
    "we expect our results and techniques to be used in future work on the power of ac .      computational complexity classifications have been obtained for binary csps defined by forbidden negative patterns ( i.e. , only pairwise incompatible assignments are specified )  @xcite and for binary csps defined by patterns on 2 constraints  @xcite",
    ". moreover , ( generalisations of ) forbidden patterns have been studied in the context of variable and value elimination rules  @xcite .",
    "finally , the idea of forbidding patterns as topological minors has recently been investigated  @xcite .",
    "@xcite recently considered the possible extensions of the algebraic approach from the language to the hybrid setting .",
    "the power of the valued version of ac  @xcite has recently been characterised  @xcite .",
    "moreover , the valued version of ac is known to solve all tractable finite - valued language - based csps  @xcite .",
    "a pattern can be seen as a generalisation of the concept of a binary csp instance that leaves the consistency of some assignments to pairs of variables undefined .",
    "a _ pattern _ is a four - tuple @xmath3 where :    * @xmath4 is a finite set of _ variables _ ; * @xmath5 is a finite set of _ values _ ; * @xmath6 is the set of possible variable - value assignments called _ points _ ; the _ domain _ of @xmath7 is its non - empty set @xmath8 of possible values : @xmath9 ; * @xmath10 is a partial _ compatibility function _ from the set of unordered pairs of points @xmath11 to @xmath12 . if @xmath13 @xmath14 true ( resp . ,",
    "false ) we say that @xmath15 and @xmath16 are _ compatible _ ( resp . , _",
    "incompatible _ ) . for simplicity , we write @xmath17 for @xmath18",
    ".    we will use a simple figurative drawing for patterns .",
    "each variable will be drawn as an oval containing dots for each of its possible points .",
    "pairs in the domain of the function @xmath10 will be represented by lines between points : solid lines ( called _ positive _ ) for compatibility and dashed lines ( called _ negative _ ) for incompatibility .    the pattern in figure  [ fig : lx ] is called lx .",
    "it consists of three variables , five points , six positive edges , and two negative edges .",
    "we refine patterns to give a definition of a csp instance .    a _ binary csp instance _",
    "@xmath19 is a pattern @xmath3 where @xmath20  is a total function , _",
    "i.e. _ the domain of @xmath20  is precisely @xmath21 , @xmath22 , @xmath23 .    *",
    "the _ relation _ @xmath24 on @xmath25 is @xmath26 .",
    "* a _ partial solution _ to @xmath19 on @xmath27 is a mapping @xmath28 where , for all @xmath29 we have @xmath30 . * a _ solution _ to @xmath19 is a partial solution on @xmath4 .    for notational simplicity",
    "we have assumed that there is _ exactly one _ binary constraint between each pair of variables . in particular",
    ", this means that the absence of a constraint between variables @xmath31 is modelled by a complete relation @xmath32 allowing every possible pair of assignments to @xmath33 and @xmath34 .",
    "we say that there is a _ non - trivial _",
    "constraint on variables @xmath31 if @xmath35 .",
    "we also use the simpler notation @xmath36 for @xmath37 .",
    "the main focus of this paper is on ordered patterns , which additionally allow for variable and value orders .",
    "an _ ordered pattern _ is a six - tuple @xmath38 where :    * @xmath39 is a pattern ; * @xmath40 is a ( possibly partial ) strict order on @xmath4 ; and * @xmath41 is a ( possibly partial ) strict order on @xmath5 .",
    "a pattern @xmath42 can be seen as an ordered pattern with empty variable and value orders , i.e. @xmath43 .    throughout the paper when we say `` pattern '' we implicitly mean `` ordered pattern '' and use the word `` unordered '' to emphasize , if needed , that the pattern in question is not ordered .",
    "we do not consider patterns with structure ( such as equality or order ) between elements in the domains of _ distinct _ variables .",
    "a pattern @xmath44 is called _ basic _ if ( 1 ) @xmath8 and @xmath45 do not intersect for distinct @xmath46 , and ( 2 ) @xmath41 only contains pairs of elements @xmath47 from the domain of the same variable , i.e. , @xmath48 for some @xmath49 .",
    "the pattern shown in figure  [ fig : btpmc](a ) is known as the _ broken triangle _ pattern ( btp )  @xcite .",
    "btp consists of three variables , four points , three positive edges , two negative edges , @xmath50 , and @xmath51 .",
    "given a basic pattern , we can refer to a point @xmath52 in the pattern as simply @xmath53 when the variable is clear from the context or a figure .",
    "for instance , the point @xmath54 in figure  [ fig : btpmc](a ) can be referred to as @xmath55 .    the pattern in figure  [ fig : btpmc](b )",
    "is the ( binary ) _ max - closed _ pattern ( mc ) .",
    "the pattern mc consists of two variables , four points , two positive edges , one negative edge , @xmath56 , and @xmath57 .",
    "mc ( figure  [ fig : btpmc](b ) ) together with the extra structure @xmath58 is an example of a pattern that is not basic .",
    "( 400,100)(0,0 )    ( 0,0 )    ( 170,100)(0,0 ) ( 10,60 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath33 ( 20,58)(0,0)@xmath34 ( 100,42)(0,0)@xmath59 ( 140,60 ) ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 15,10)(0,0)(a )    ( 220,0 )    ( 180,100)(0,0 ) ( 10,50 ) ( 90,50 ) ( 20,80)(100,80 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,42)(0,0)@xmath33 ( 100,42)(0,0)@xmath34 ( 140,60 ) ( 5,80)(0,0)@xmath61 ( 5,60)(0,0)@xmath62 ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 15,10)(0,0)(b )    for some of the proofs we will require patterns with additional structure , namely , the ability to enforce certain points to be distinct .",
    "a pattern with a disequality structure is a seven - tuple @xmath63 where :    * @xmath64 is a pattern ; and * @xmath65 is a set of pairs of domain values that are distinct .",
    "an example of such a pattern is given in figure  [ fig : badpatterns](b ) .",
    "some points in a pattern are indistinguishable with respect to the rest of the pattern .",
    "two points @xmath66 are _ mergeable _ in a pattern @xmath64 if there is no point @xmath67 for which @xmath68 , @xmath69 are both defined and @xmath70 .",
    "a pattern is called _ unmergeable _ if it does not contain any mergeable points .    the points @xmath55 and @xmath60 in btp ( figure  [ fig : btpmc](a ) ) are not mergeable since they have different compatibility with , for instance , the point in variable @xmath33 . the pattern lx ( figure  [ fig : lx ] ) is unmergeable",
    ".    some points in a pattern ( known as dangling points ) are redundant in arc - consistent csp instances and hence can be removed .",
    "let @xmath44 be a pattern .",
    "a point @xmath71 is called _ dangling _ if it is not ordered by @xmath41 and if there is at most one point @xmath72 for which @xmath17 is defined , and furthermore ( if defined ) @xmath73 .",
    "the point @xmath62 in the pattern mc ( figure  [ fig : btpmc](b ) ) is not dangling since it is ordered .    in order to use ( the absence of ) patterns for ac - solvability we need to define what we mean when we say that a pattern _ occurs _ in a csp instance .",
    "we define the slightly more general notion of occurrence of a pattern in another pattern , thus extending the definitions for unordered patterns  @xcite .",
    "recall that a csp instance corresponds to the special case of a pattern whose compatibility function is total .",
    "essentially pattern @xmath19 occurs in pattern @xmath74 if @xmath19 is homomorphic to a subpattern of @xmath74 via an injective renaming of variables and a ( possibly non - injective ) renaming of points  @xcite .",
    "we first make the observation that dangling points in a pattern provide no useful information since we assume that all csp instances are arc consistent , which explains why dangling points can be eliminated from patterns .",
    "[ def : simple ] a pattern is _ simple _ if it is ( i ) basic , ( ii ) has no mergeable points , and ( iii ) has no dangling points .    from a given pattern it is possible to create an infinite number of equivalent patterns by adding dangling points or by duplicating points .",
    "by restricting our attention to simple patterns we avoid having to consider such patterns .",
    "let @xmath75 and @xmath76 be two patterns .",
    "a _ homomorphism _ from @xmath77 to @xmath19 is a mapping @xmath78 which satisfies :    * if @xmath79 is defined , then @xmath80 . *",
    "the mapping @xmath81 , given by @xmath82 if @xmath83 such that @xmath84 , is well - defined and injective . * if @xmath85 then @xmath86 . *",
    "if @xmath87 , @xmath88 , @xmath89 and @xmath90 then @xmath91 .",
    "a _ consistent linear extension _ of a pattern @xmath92 is a pattern @xmath93 obtained from @xmath19 by first identifying any number of pairs of points @xmath94 which are both mergeable and incomparable ( according to @xmath41 ) and then extending the orders on the variables and the domain values to total orders .",
    "let @xmath75 and @xmath76 be two patterns .",
    "@xmath77 _ occurs _ in @xmath19 if for all consistent linear extensions @xmath93 of @xmath19 , there is a homomorphism from @xmath77 to @xmath93 .",
    "we use the notation csp@xmath95 to represent the set of binary csp instances in which the pattern @xmath19 does _ not _ occur .",
    "this definition extends in a natural way to patterns with a disequality structure .",
    "we can add @xmath96 to a pattern , without changing its semantics , when @xmath97 or @xmath52 and @xmath98 are joined by negative and positive edges to some point @xmath99 .",
    "furthermore , all domain values @xmath100 in an _ instance _ are distinct so there is an implicit @xmath96 .",
    "the pattern mc ( figure  [ fig : btpmc](b ) ) occurs in pattern emc ( figure  [ fig : emc ] ) but not in patterns btp ( figure  [ fig : btpmc](a ) ) or btx ( figure  [ fig : btx ] ) .    for a pattern @xmath19 ,",
    "we denote by unordered(@xmath19 ) the underlying unordered pattern , that is , @xmath101 for instance , the pattern unordered(btp ) is the pattern from figure  [ fig : btpmc](a ) _ without _ the structure @xmath102 .",
    "( 400,110)(0,0 )    ( 0,0 )    ( 170,100)(0,0 ) ( 10,60 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath33 ( 20,58)(0,0)@xmath34 ( 100,42)(0,0)@xmath59 ( 140,60 ) ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 15,10)(0,0)(a )    ( 220,0 )    ( 170,100)(0,0 ) ( 10,60 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath33 ( 20,58)(0,0)@xmath34 ( 100,42)(0,0)@xmath59 ( 140,60 ) ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 15,10)(0,0)(b )    the following three simple lemmas follow from the definitions .",
    "[ lem : occ - transitive ] if @xmath19 occurs in @xmath74 and @xmath74 occurs in @xmath103 , then @xmath19 occurs in @xmath103 .",
    "[ lem : occ - sup ] if @xmath19 occurs in @xmath74 and @xmath19 does not occur in @xmath104 , then @xmath74 does not occur in @xmath104 , i.e. csp@xmath105 @xmath106 csp@xmath107 .",
    "[ lem : occ - unordered ] for any pattern @xmath19 , unordered(@xmath19 ) occurs in @xmath19 .",
    "arc consistency ( ac ) is a fundamental concept for csps .",
    "let @xmath108 be a csp instance .",
    "a point @xmath109 is called _ arc consistent _ if , for all variables @xmath110 in @xmath4 there is some point @xmath111 compatible with @xmath15 .    the csp instance @xmath39 is called _ arc consistent _ if @xmath112 and every point in @xmath113 is arc consistent .",
    "points that are not arc - consistent can not be part of a solution so can safely be removed .",
    "there are optimal @xmath114 algorithms for establishing arc consistency which repeatedly remove such points  @xcite , where @xmath115 is the number of non - trivial constraints and @xmath116 the maximum domain size .",
    "algorithms establishing arc consistency are implemented in all constraint solvers .",
    "ac is a _ decision procedure _ for a csp instance if , after establishing arc consistency , non - empty domains for all variables guarantee the existence of a solution .",
    "( note that a solution can then be found without backtrack by maintaining ac during search ) .",
    "ac is a decision procedure for a class of csp instances if ac is a decision procedure for every instance from the class .",
    "a pattern @xmath19 is called _ ac - solvable _ if ac is a decision procedure for csp@xmath105 .",
    "the following lemma is a straightforward consequence of the definitions .",
    "[ lem : not - ac ] a pattern @xmath19 is not ac - solvable if and only if there is an instance @xmath117 csp@xmath105 that is arc consistent and has no solution .    the following lemma follows directly from lemmas  [ lem : occ - sup ] and [ lem : not - ac ] .",
    "[ lem : hered ] if @xmath19 occurs in @xmath74 and @xmath19 is not ac - solvable , then @xmath74 is not ac - solvable .    as our main result we will , in theorem  [ thm : order ] , characterise all simple patterns that are ac - solvable .      for an ordered pattern @xmath19 ,",
    "we denote by invdom(@xmath19 ) , invvar(@xmath19 ) the patterns obtained from @xmath19 by inversing the domain order or the variable order , respectively .",
    "[ lem : inv ] if @xmath19 is not ac - solvable , then neither is any of invdom(@xmath19 ) , invvar(@xmath19 ) or invdom(invvar(@xmath19 ) ) .",
    "the claims follow from inversing the respective orders in the instance @xmath104 of lemma  [ lem : not - ac ] proving that @xmath19 is not ac - solvable .",
    "some patterns define the same classes of csp instances .",
    "patterns @xmath19 and @xmath77 are _ equivalent _ if @xmath118    if @xmath19 occurs in @xmath77 and @xmath77 occurs in @xmath19 , then @xmath119 are equivalent .",
    "[ ex : lx < ] let lx@xmath120 be the pattern obtained from lx ( figure  [ fig : lx ] ) by adding the partial variable order @xmath121 . due to the symmetry of lx , observe that lx and lx@xmath120 are equivalent .",
    "the two patterns shown in figure  [ fig : btp ] are also equivalent : ( a ) btp@xmath122 with structure @xmath123 and @xmath124 , and ( b ) btp@xmath125 with variable order @xmath126 .",
    "we will call these the _ variable - ordered _ and _ domain - ordered _ versions of btp , respectively , when it is necessary to make the distinction between the two .",
    "btp ( figure  [ fig : btpmc](a ) ) will refer to the same pattern with the only structure @xmath102 which again , by symmetry , is equivalent to both btp@xmath122 and btp@xmath125 .",
    "our search for a characterisation of all simple patterns decided by arc consistency surprisingly uncovered four new tractable patterns , which we describe in this section .",
    "the first pattern we study is shown in figure  [ fig : emc ] .",
    "it is a proper generalisation of the mc pattern ( figure  [ fig : btpmc](b ) ) since it has an extra variable and three extra edges .",
    "( 180,100)(0,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath33 ( 20,42)(0,0)@xmath34 ( 100,42)(0,0)@xmath59 ( 160,60 ) ( 5,80)(0,0)@xmath61 ( 5,60)(0,0)@xmath62 ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 75,30)(0,0)@xmath127    [ thm : emc ] ac is a decision procedure for csp@xmath128 where emc is the pattern shown in figure  [ fig : emc ] .",
    "since establishing arc consistency only eliminates domain elements , and hence can not introduce the pattern , it suffices to show that every arc - consistent instance @xmath129 @xmath130 csp@xmath128 has a solution .",
    "we give a constructive proof .",
    "let @xmath131 be an ordering of @xmath4 such that emc does not occur in @xmath104 .",
    "define an assignment @xmath132 to the variables @xmath133 recursively as follows : @xmath134 and , for @xmath135 , @xmath136 for @xmath135 , we denote by @xmath137 a value of @xmath138 such that @xmath139 .",
    "arc consistency guarantees that @xmath140 exists and hence that @xmath141 and @xmath137 are well defined .",
    "we claim that @xmath132 is a solution .",
    "suppose , for a contradiction , that @xmath142 for some @xmath143 .",
    "if there is more than one such pair @xmath144 , then choose @xmath2 to be minimal and then for this value of @xmath2 choose @xmath145 to be minimal .",
    "we prove our claim that @xmath132 is a solution to @xmath104 by induction on @xmath146 .",
    "the claim trivially holds for @xmath147 since @xmath148 .",
    "it remains to show that if the claim holds for instances of size less than @xmath146 then it holds for instances of size @xmath146 .",
    "let @xmath149 and @xmath150 for @xmath151 if @xmath152 .",
    "let @xmath153 be such that @xmath154 . by definition of @xmath155",
    ", we have @xmath156 which implies that this series is finite and hence that @xmath153 is well - defined .",
    "we distinguish two cases : ( 1 ) @xmath157 , and ( 2 ) @xmath158 . since @xmath142 and @xmath159 we know that @xmath160 .",
    "[ [ case-1-j - m_1 ] ] case ( 1 ) @xmath157 : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    define @xmath161 . by definition of @xmath162 , we know that @xmath163 . since @xmath142 and @xmath164",
    ", we have @xmath165 .    by our choice of @xmath145 to be minimal , and since @xmath157 we know that @xmath166 for @xmath167 . indeed , by minimality of @xmath2 , we already had @xmath168 for @xmath169 .",
    "thus , since @xmath170 , we have @xmath171    ( 180,100)(0,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,8)(0,0)@xmath172 ( 20,42)(0,0)@xmath173 ( 100,42)(0,0)@xmath174 ( 160,60 ) ( 3,80)(0,0)@xmath175 ( 5,60)(0,0)@xmath176 ( 116,80)(0,0)@xmath177 ( 116,60)(0,0)@xmath162 ( 75,30)(0,0)@xmath178    by arc consistency , @xmath179 such that @xmath180 .",
    "we have @xmath181 by minimality of @xmath2 and since @xmath182 . since @xmath183 and hence @xmath184 , we have @xmath185 and @xmath186 by the maximality of @xmath187 in equation  ( [ eq : defai ] ) .",
    "we thus have the situation illustrated in figure  [ fig : almostemc ] for @xmath188 .",
    "since the pattern emc does not occur in @xmath104 , we must have @xmath189 .",
    "( 180,100)(0,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,60)(100,80 ) ( 60,30)(100,60 ) ( 20,60)(1,0)80 ( 20,80)(1,0)80 ( 20,60)(4,-3)40 ( 60,30)(4,5)40 ( 60,8)(0,0)@xmath190 ( 20,42)(0,0)@xmath191 ( 100,42)(0,0)@xmath192 ( 157,60 ) ( 5,80)(0,0)@xmath193 ( 2,60)(0,0)@xmath194 ( 120,80)(0,0)@xmath195 ( 123,60)(0,0)@xmath196 ( 80,30)(0,0)@xmath197    for @xmath198 , let @xmath199 be the following hypothesis .",
    "@xmath199 : :    @xmath200 ,    @xmath201 ,    @xmath202 , with @xmath203 , such that we have the situation shown in    figure  [ fig : hremc ] .",
    "we have just shown that @xmath204 holds ( with @xmath205 and @xmath206 ) .",
    "we now show , for @xmath207 , that @xmath208 .    we know",
    "that @xmath209 and @xmath210 , since @xmath211 and by maximality of @xmath212 in equation  ( [ eq : defai ] ) .",
    "let @xmath213 be minimal such that @xmath214 .",
    "we distinguish two cases : ( a ) @xmath215 , and ( b ) @xmath216 .",
    "if @xmath215 , then we have @xmath217 ( from equation  ( [ eq : posedges ] ) , since @xmath170 ) , @xmath218 ( since @xmath215 ) , @xmath219 ( by minimality of @xmath2 , since @xmath220 ) . by arc consistency , @xmath221 such that @xmath222 .",
    "we then have the situation illustrated in figure  [ fig : almostemc ] for @xmath223 .",
    "as above , from the absence of pattern emc , we can deduce that @xmath224 .",
    "we thus have @xmath225 ( with @xmath226 and @xmath227 ) .",
    "( 190,100)(-10,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,8)(0,0)@xmath228 ( 20,42)(0,0)@xmath229 ( 100,42)(0,0)@xmath230 ( 150,60 ) ( -2,80)(0,0)@xmath231 ( 1,60)(0,0)@xmath232 ( 116,80)(0,0)@xmath233 ( 119,60)(0,0)@xmath234 ( 81,30)(0,0)@xmath235    if @xmath216 , then @xmath236 implies that @xmath237 holds . by minimality of @xmath238 , we know that @xmath239 since @xmath240 . we know that @xmath241 from equation  ( [ eq : posedges ] ) , and that @xmath242 by definition of @xmath238 . we know",
    "that @xmath243 and @xmath244 from @xmath237 . by arc consistency , @xmath245 such that @xmath246 .",
    "we then have the situation illustrated in figure  [ fig : almostemc2 ] . as",
    "above , from the absence of pattern emc , we can deduce that @xmath247 .",
    "we thus have @xmath225 ( with @xmath248 and @xmath249 ) .",
    "[ [ case-2-j - m_1 ] ] case ( 2 ) @xmath158 : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    consider the subproblem @xmath250 of @xmath104 on variables @xmath251 . since @xmath252 does not belong to the set of variables of @xmath250 , this instance has size strictly less than @xmath146 , and hence by our inductive hypothesis has a solution .",
    "the values of @xmath141 may differ between @xmath104 and @xmath250 .",
    "however , we can see from its definition given in equation  ( [ eq : defai ] ) , that the value of @xmath141 depends uniquely on the subproblem on previous variables @xmath253",
    ". showing the dependence on the instance by a superscript , we thus have @xmath254 ( @xmath255 ) although @xmath256 may ( and , in fact , does ) differ from @xmath257 . by our inductive hypothesis ,",
    "@xmath258 is a solution to @xmath250 . setting @xmath259",
    ", it follows that @xmath260 for @xmath261 .",
    "in particular , since @xmath158 , we have @xmath262",
    ". now @xmath263 , since @xmath250 is a subinstance of @xmath104 ( and so , from equation  ( [ eq : defai ] ) , @xmath257 is the minimum of a superset over which @xmath256 is a minimum ) .",
    "thus @xmath264 , since @xmath265 and @xmath142 .",
    "by arc consistency , @xmath179 such that @xmath266 .",
    "as in case ( 1 ) , we have the situation illustrated in figure  [ fig : almostemc ] for @xmath188 . since the pattern emc does not occur in @xmath104 , we must have @xmath189 .",
    "consider the hypothesis @xmath199 stated in case ( 1 ) and illustrated in figure  [ fig : hremc ] .",
    "we have just shown that @xmath204 holds ( with @xmath205 and @xmath206 ) .",
    "we now show , for @xmath207 , that @xmath267 .    as in case",
    "( 1 ) , we know that @xmath268 and @xmath210 .",
    "let @xmath269 be minimal such that @xmath242 .",
    "we have seen above that @xmath270 ( since @xmath229 , @xmath271 are assigned , respectively , the values @xmath231 , @xmath177 in a solution to @xmath250 ) .",
    "therefore , we can deduce that @xmath216 .",
    "therefore @xmath272 implies that @xmath237 holds . by minimality of @xmath2 , and since @xmath273 , we know that @xmath274 . as in case ( 1 ) , by minimality of @xmath238 , we know that @xmath275 . by arc consistency , @xmath221 such that @xmath246 .",
    "we thus have the situation illustrated in figure  [ fig : almostemc2 ] .",
    "again , from the absence of pattern emc , we can deduce that @xmath247 .",
    "we thus again have @xmath225 with @xmath248 and @xmath249 .",
    "thus , by induction on @xmath276 , we have shown in both cases that @xmath277 holds . but recall that @xmath154 and that @xmath278 was chosen to the maximal element of @xmath279 and hence @xmath280 such that @xmath281 .",
    "this contradiction shows that @xmath132 is a solution , as claimed .",
    "the next two patterns we study in this section , shown in figure  [ fig : btx ] and figure  [ fig : bti ] , are similar to emc but the three patterns are incomparable ( in the sense that none occurs in another ) due to the different orders on the three variables .",
    "( 180,100)(0,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath33 ( 20,42)(0,0)@xmath34 ( 100,42)(0,0)@xmath59 ( 160,60 ) ( 5,80)(0,0)@xmath61 ( 5,60)(0,0)@xmath62 ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 75,30)(0,0)@xmath127    ( 180,100)(0,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath33 ( 20,42)(0,0)@xmath34 ( 100,42)(0,0)@xmath59 ( 160,60 ) ( 5,80)(0,0)@xmath61 ( 5,60)(0,0)@xmath62 ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 75,30)(0,0)@xmath127    [ thm : btx ] ac is a decision procedure for csp@xmath282 where btx is the pattern shown in figure  [ fig : btx ] .",
    "since establishing arc consistency only eliminates domain elements , and hence can not introduce the pattern , we only need to show that every arc - consistent instance @xmath283 csp@xmath282 has a solution .",
    "let @xmath284 be an ordering of @xmath4 such that btx does not occur in @xmath104 .",
    "in fact we will show a stronger result by proving that the hypothesis @xmath285 , below , holds for all @xmath286 .",
    "@xmath285 : :    for all arc - consistent instances    @xmath287    from csp@xmath282 with @xmath288 , if @xmath289 , then @xmath104 has a    solution @xmath290 with @xmath291 .",
    "trivially , @xmath204 holds .",
    "suppose that @xmath292 holds where @xmath293 .",
    "we will show that this implies @xmath285 , which will complete the proof by induction .",
    "let @xmath294 ( @xmath295 ) .",
    "denote by @xmath250 the subproblem of @xmath104 on variables @xmath296 and domains @xmath297 ( @xmath295 ) . to complete the inductive proof ,",
    "it is sufficient to show that @xmath250 is arc consistent : since @xmath298 csp@xmath282 and has @xmath299 variables , by @xmath292 , if @xmath250 is arc consistent it has a solution which can clearly be extended to a solution to @xmath104 by adding the assignment @xmath300 .",
    "consider any two variables @xmath301 such that @xmath302 .",
    "we know by arc consistency of @xmath104 that @xmath297 is non - empty .",
    "let @xmath303 ( i.e. @xmath304 ) . to complete the proof , it suffices to show that @xmath305 has a support in @xmath306 . by arc consistency of @xmath104",
    ", we can deduce the existence of @xmath307 such that @xmath308 , and then @xmath309 such that @xmath310 , as well as @xmath311 such that @xmath312 ( i.e. @xmath313 ) .",
    "if @xmath305 has no support in @xmath306 , then we must have @xmath314 ( i.e. @xmath315 ) and @xmath316 . since @xmath53 is the maximum element of @xmath279 , we know that @xmath317 .",
    "indeed , since @xmath315 and @xmath310 , we have that @xmath318 .",
    "but then the pattern btx occurs in @xmath104 , as shown in figure  [ fig : occurrencebtx ] .",
    "this contradiction shows that @xmath305 does have a support in @xmath306 and hence that @xmath250 is arc consistent , as required .",
    "( 180,100)(0,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath319 ( 20,42)(0,0)@xmath320 ( 100,42)(0,0)@xmath172 ( 160,60 ) ( 5,80)(0,0)@xmath53 ( 5,60)(0,0)@xmath321 ( 115,80)(0,0)@xmath115 ( 115,60)(0,0)@xmath116 ( 75,30)(0,0)@xmath305    ( 360,220)(0,0 )    ( 0,120 )    ( 180,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,7)(0,0)@xmath172 ( 20,42)(0,0)@xmath322 ( 100,42)(0,0)@xmath319 ( 110,10 ) ( -3,80)(0,0)@xmath323 ( 5,60)(0,0)@xmath115 ( 115,80)(0,0)@xmath305 ( 115,60)(0,0)@xmath53 ( 83,30)(0,0)@xmath324 ( 10,10)(0,0)(a )    ( 220,120 )    ( 180,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,7)(0,0)@xmath322 ( 20,42)(0,0)@xmath172 ( 100,42)(0,0)@xmath319 ( 110,10 ) ( -3,80)(0,0)@xmath324 ( 5,60)(0,0)@xmath116 ( 115,80)(0,0)@xmath53 ( 115,60)(0,0)@xmath305 ( 83,30)(0,0)@xmath323 ( 10,10)(0,0)(b )    ( 0,0 )    ( 180,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,7)(0,0)@xmath174 ( 20,42)(0,0)@xmath319 ( 100,42)(0,0)@xmath172 ( 110,10 ) ( 5,80)(0,0)@xmath53 ( 5,60)(0,0)@xmath305 ( 123,80)(0,0)@xmath324 ( 115,60)(0,0)@xmath116 ( 83,30)(0,0)@xmath325 ( 10,10)(0,0)(c )    ( 220,0 )    ( 180,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,7)(0,0)@xmath326 ( 20,42)(0,0)@xmath319 ( 100,42)(0,0)@xmath322 ( 110,10 ) ( 5,80)(0,0)@xmath305 ( 5,60)(0,0)@xmath53 ( 123,80)(0,0)@xmath323 ( 115,60)(0,0)@xmath115 ( 83,30)(0,0)@xmath327 ( 10,10)(0,0)(d )    [ thm : bti ] ac is a decision procedure for csp@xmath328 where bti is the pattern shown in figure  [ fig : bti ] .    since establishing arc consistency only eliminates domain elements , and hence can not introduce the pattern , we only need to show that every arc - consistent instance @xmath283 csp@xmath328 has a solution",
    "let @xmath131 be an ordering of @xmath4 such that bti does not occur in @xmath104 .",
    "in fact , we will show a stronger result by proving that , for all arc - consistent instances @xmath283 csp@xmath328 , @xmath104 has a solution @xmath290 defined recursively by : @xmath329 is the maximum value in @xmath330 compatible with all previous assignments @xmath331 .",
    "let @xmath332 denote the set of values in @xmath330 compatible with the assignments @xmath331 ( defined recursively as above ) .",
    "if each @xmath332 ( @xmath333 ) is non - empty , then @xmath334 is a solution to @xmath104 .",
    "let @xmath335 denote the subinstance of @xmath104 on the first @xmath336 variables @xmath337 .",
    "@xmath338 and is non - empty since @xmath104 is arc consistent , and hence @xmath339 is a solution to @xmath340 .",
    "suppose that @xmath331 , as defined above , is a solution to @xmath341 .",
    "we will show that @xmath329 exists and hence that @xmath342 is a solution to @xmath343 , which by a simple induction will complete the proof .",
    "suppose for a contradiction that @xmath329 does not exist , i.e. that @xmath344 .",
    "let @xmath345 denote the subset of @xmath330 which is compatible with the assignment of @xmath346 to @xmath172 , i.e. @xmath347 . for @xmath348 , let @xmath349 be the intersection of the sets @xmath350 ( @xmath351 ) . by our hypothesis that @xmath344 , we know that @xmath352 . by arc consistency , @xmath353 .",
    "let @xmath354 be minimal such that @xmath355 .",
    "thus @xmath356 by arc consistency , @xmath357 such that @xmath358 ( i.e. @xmath359 ) . by equation ( [ eq : rtj ] ) and definition of @xmath360",
    ", there is some @xmath361 such that @xmath362 .",
    "choose @xmath276 to be minimal .",
    "consider @xmath363 ( which is non - empty since @xmath145 was chosen to be minimal ) .",
    "then @xmath364 , by definition of @xmath360 , since @xmath365 . but",
    "@xmath366 by ( [ eq : rtj ] ) . by arc consistency , @xmath367 such that @xmath368 and @xmath369 such that @xmath370 . by our inductive hypothesis that @xmath331 is a solution to @xmath341 , we know that @xmath371 since @xmath372 .",
    "because of their different compatibilities with , respectively , @xmath305 and @xmath53 , we know that @xmath373 and @xmath374 . if @xmath375 , then , since @xmath376 , the pattern bti occurs in @xmath104 , as shown in figure  [ fig : occurrencesbti](a ) ; so we can deduce that @xmath377 .",
    "similarly , if @xmath378 , then , since @xmath138 , the pattern bti occurs in @xmath104 , as shown in figure  [ fig : occurrencesbti](b ) ; so we can deduce that @xmath379 .",
    "but , by definition of @xmath290 , @xmath323 is the maximal element of @xmath380 .",
    "so , since @xmath377 , there must be some @xmath381 such that @xmath382 . by minimality of @xmath276",
    ", we know that @xmath383 . similarly , there must be some @xmath384 such that @xmath385 since @xmath379 and @xmath324 is the maximal element of @xmath386 .",
    "since @xmath387 and @xmath384 , we know that @xmath388 . by our inductive hypothesis that @xmath331 is a solution to @xmath341 , we know that @xmath389 and @xmath390 since @xmath391 . we know that @xmath392 because they have different compatibilities with @xmath324 .",
    "if @xmath393 , then , since @xmath384 , the pattern bti occurs in @xmath104 , as shown in figure  [ fig : occurrencesbti](c ) . and ,",
    "if @xmath394 , then the pattern bti occurs in @xmath104 , as shown in figure  [ fig : occurrencesbti](d ) .",
    "this contradiction shows that @xmath395 ( for each @xmath333 ) and hence that @xmath104 has a solution @xmath290 .",
    "we conclude this section with a pattern which is essentially different from the patterns emc , btx , and bti , since it includes two negative edges that meet but has no domain or variable order .",
    "the tractability of this pattern was previously unknown  @xcite .",
    "( 120,100)(0,0 )    ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,60)(60,30 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,8)(0,0)@xmath33 ( 20,42)(0,0)@xmath34 ( 100,42)(0,0)@xmath59 ( 5,80)(0,0)@xmath61 ( 5,60)(0,0)@xmath62 ( 115,80)(0,0)@xmath55 ( 115,60)(0,0)@xmath60 ( 75,30)(0,0)@xmath127    [ thm : lx ] ac is a decision procedure for csp@xmath396 where lx is the pattern shown in figure  [ fig : lx ] .    since establishing arc consistency only eliminates domain elements , and hence can not introduce the pattern , we only need to show that every arc - consistent instance @xmath117 csp@xmath396 has a solution .",
    "in fact we will show a stronger result by proving that the hypothesis @xmath285 , below , holds for all @xmath397 .",
    "@xmath285 : :    for all arc - consistent instances    @xmath398 csp@xmath396 with    @xmath399 , @xmath400 ,    @xmath401 , @xmath104 has a solution    @xmath290 such that @xmath402 .",
    "trivially , @xmath204 holds .",
    "suppose that @xmath292 holds where @xmath293 .",
    "we will show that this implies @xmath285 , which will complete the proof by induction .",
    "consider an arc - consistent instance @xmath129 from csp@xmath396 with @xmath403 and let @xmath404 where @xmath405 .",
    "let @xmath406 denote the subproblem of @xmath104 on variables @xmath407 .",
    "for any solution @xmath290 of @xmath406 , we denote by @xmath408 the set of variables in @xmath407 on which @xmath290 is compatible with the unary assignment @xmath409 , i.e. @xmath410 consider two distinct solutions @xmath411 to @xmath406 . if we have @xmath412 and @xmath413 , then the pattern lx occurs in @xmath104 under the mapping @xmath414 , @xmath415 , @xmath416 , @xmath417 , @xmath418 , @xmath419 , @xmath420 , @xmath421 ( see figure  [ fig : lx ] ) . since lx does not occur in @xmath104 , we can deduce that the sets @xmath408 , as @xmath290 varies over all solutions to @xmath406 , form a nested family of sets .",
    "let @xmath422 be a solution to @xmath406 such that @xmath423 is maximal for inclusion .",
    "consider any @xmath424 . by arc consistency , @xmath425 such that @xmath426 . by our inductive hypothesis @xmath292",
    ", there is a solution @xmath290 to @xmath406 such that @xmath427 . since @xmath428",
    ", we have @xmath429 . by maximality of @xmath422 , this implies @xmath430 , i.e. @xmath431 . since this is true for any @xmath424 , we can deduce that @xmath422 can be extended to a solution to @xmath104 ( which assigns @xmath53 to @xmath319 ) by simply adding the assignment @xmath409 to @xmath422 .",
    "for an unordered pattern @xmath19 of size @xmath2 , checking for ( the non - occurrence of ) @xmath19 in a csp instance @xmath104 is solvable in time @xmath432 by simple exhaustive search .",
    "consequently , checking for ( the non - occurrence of ) unordered patterns of constant size is solvable in polynomial time .",
    "however , the situation is less obvious for ordered patterns since we have to test all possible orderings of @xmath104 .",
    "the following result was shown in  @xcite .",
    "[ thm : recog - btp ] given a binary csp instance @xmath104 with a fixed total order on the domain , there is a polynomial - time algorithm to find a total variable ordering such that btp does not occur in @xmath104 ( or to determine that no such ordering exists ) .",
    "we show that the same result holds for the other three ordered patterns studied in this paper , namely bti , btx , and emc .",
    "[ thm : recog - bti ] given a binary csp instance @xmath104 with a fixed total order on the domain and a pattern @xmath433bti , btx , emc@xmath434 , there is a polynomial - time algorithm to find a total variable ordering such that @xmath19 does not occur in @xmath104 ( or to determine that no such ordering exists ) .",
    "we give a proof only for btx as the same idea works for the other two patterns as well . given a binary csp instance @xmath104 with @xmath146 variables @xmath435 , we define an associated csp instance @xmath436 that has a solution precisely when there exists a suitable variable ordering for @xmath104 .",
    "to construct @xmath436 , let @xmath437 be variables taking values in @xmath438 representing positions in the ordering .",
    "we impose the ternary constraint @xmath439 for all triples of variables @xmath440 in @xmath104 such that the btx pattern occurs for some @xmath441 with @xmath442 , @xmath443 , and @xmath444 when the variables are ordered @xmath445 .",
    "the instance @xmath436 has a solution precisely if there is an ordering of the variables @xmath435 of @xmath104 for which btx does not occur .",
    "note that if the solution obtained represents a partial order ( i.e. if @xmath446 and @xmath447 are assigned the same value for some @xmath448 ) , then it can be extended to a total order which still satisfies all the constraints by arbitrarily choosing the order of those @xmath446 s that are assigned the same value .",
    "this reduction is polynomial in the size of @xmath104 .",
    "we now show that all constraints in @xmath436 are ternary max - closed and thus @xmath436 can be solved in polynomial time  @xcite .",
    "let @xmath449 and @xmath450 satisfy any constraint in @xmath436",
    ". then @xmath451 and @xmath452 , and thus @xmath453 @xmath14 @xmath454 .",
    "consequently , @xmath455 , @xmath456 , @xmath457 also satisfies the constraint .",
    "we can deduce that all constraints in @xmath436 are max - closed .    using the same technique",
    ", we can also show the following .",
    "[ thm : recog - dom - bti ] given a binary csp instance @xmath104 with a fixed total variable order and a pattern @xmath433bti , btx@xmath434 , there is a polynomial - time algorithm to find a total domain ordering such that @xmath19 does not occur in @xmath104 ( or determine that no such ordering exists ) .",
    "it is known that determining a domain order for which mc does not occur is np - hard  @xcite .",
    "not surprisingly , for emc when the domain order is not known , detection becomes np - hard .",
    "for the case of btx and bti , if neither the domain nor variable order is known , finding orders for which the pattern does not occur is again np - hard .",
    "[ thm : hardness ] for the pattern emc , even for a fixed total variable order of an arc - consistent binary csp instance @xmath104 , it is np - hard to find a total domain ordering of @xmath104 such that the pattern does not occur in @xmath104 . for patterns btx and bti ,",
    "it is np - hard to find total variable and domain orderings of an arc - consistent binary csp instance @xmath104 such that the pattern does not occur in @xmath104 .    to show this",
    ", we exhibit a polynomial reduction from 3sat . given an @xmath146-variable instance @xmath458 of 3sat",
    ", we create a domain of size @xmath459 with a value @xmath141 for each variable @xmath460 in @xmath458 and another @xmath461 for its negation @xmath462 .",
    "this is the domain of each variable @xmath319 in a binary csp instance @xmath463 . for each total ordering @xmath464 of the domain",
    "there is a corresponding assignment to the variables of @xmath458 given by @xmath465 true if and only if @xmath466 . to complete the reduction we have to show how to impose a clause , e.g. @xmath467 .",
    "the basic construction of @xmath463 is composed of the following elements : @xmath468 variables linked by equality constraints @xmath469 ( @xmath470 ) . consider first the case of emc . to impose a clause",
    "we can construct a gadget on any three variables @xmath471 which are not linked by any other constraints in our construction ( in particular , not consecutive variables linked by equality constraints ) .",
    "we add four extra values @xmath472 ( of which @xmath473 depend on the clause ) in the domain of each of these three variables @xmath471 .",
    "the value @xmath474 is compatible with all values in the domains of the other variables .",
    "this ensures arc consistency for all domain values , and if @xmath475 for all domain values @xmath476 , then the pattern can not occur on @xmath474 .",
    "we then place negative edges between all pairs of values other than @xmath474 except for three positive edges in each constraint . in the constraint between @xmath477 and @xmath478",
    "we add the three positive edges : @xmath479 , @xmath480 , @xmath481 .",
    "if @xmath482 in @xmath483 and @xmath484 in @xmath485 , then the pattern emc occurs in @xmath463 .",
    "the third variable of the pattern is @xmath486 or @xmath487 which is linked by an equality constraint to @xmath478 .",
    "thus , to avoid the pattern occurring in @xmath463 the domain order must respect @xmath488 by adding similar constraints between @xmath489 and @xmath490 , we can also impose @xmath491 by imposing these three inequalities , we impose @xmath492 ( since we can not simultaneously have @xmath493 ) which corresponds to the clause @xmath494 in @xmath458 . by inversing the roles of @xmath141 and @xmath495 we can clearly impose clauses involving negative literals .",
    "this completes the reduction from @xmath458 to the problem of finding a domain ordering of a binary csp instance so that emc does not occur .",
    "since this reduction is clearly polynomial , we can conclude that the problem of testing the existence of a domain order so that emc does not occur is np - hard .",
    "now consider the case of the pattern btx .",
    "we use a similar construction to the case of emc , above . again , to simulate a clause @xmath496 in @xmath458 we need to impose @xmath497 .",
    "this can achieved by imposing : @xmath498 for example , to impose @xmath499 we place the same gadget as above ( i.e. positive edges @xmath479 , @xmath480 , @xmath481 ) on each of the three pairs of variables @xmath500 , @xmath501 and @xmath502 . to avoid btx on variables @xmath503 , on variables @xmath504 and on variables @xmath505 , we must have @xmath506 since there is a total strict ordering on the variables , this is logically equivalent to imposing @xmath499 , as required ( provided none of the variables @xmath507 are used in other gadgets ) .    finally , we consider the pattern bti .",
    "but this is an easier case than btx .",
    "we just need to place the gadget on @xmath500 to impose @xmath508 to avoid the pattern bti .    thus , emc is np - hard to detect when the domain order of the instance is not fixed , and btx , bti are np - hard to detect when neither the domain order nor the variable order of the instance is fixed .",
    "the results from this section are summarised in table  [ tab : summary ] .",
    "we use the star to denote uninteresting cases .",
    "note that since lx is an unordered pattern the questions of determining variable and/or domain orders are not interesting .",
    "similarly , since pattern btp only orders variables the question of determining a domain order is not interesting .",
    ".summary of recognition problems . [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]",
    "we first give a set of instances , each of which is arc consistent and has no solution .",
    "if for any of these instances @xmath104 , we have @xmath117 csp@xmath105 , then this constitutes a proof , by lemma  [ lem : not - ac ] , that pattern @xmath19 is not solved by arc consistency . for simplicity of presentation , in each of the following instances , we suppose the variable order given by @xmath509 if @xmath510 .",
    "( 160,160)(10,10 )    ( 30,90)(18,58 ) ( 30,70)(0,0)@xmath0 ( 30,90)(0,0)@xmath0 ( 30,110)(0,0)@xmath0 ( 150,90)(18,58 ) ( 150,70)(0,0)@xmath0 ( 150,90)(0,0)@xmath0 ( 150,110)(0,0)@xmath0 ( 90,30)(58,18 ) ( 70,30)(0,0)@xmath0 ( 90,30)(0,0)@xmath0 ( 110,30)(0,0)@xmath0 ( 90,150)(58,18 ) ( 70,150)(0,0)@xmath0 ( 90,150)(0,0)@xmath0 ( 110,150)(0,0)@xmath0    ( 53,150)(0,0)@xmath320 ( 150,127)(0,0)@xmath511 ( 53,30)(0,0)@xmath512 ( 30,127)(0,0)@xmath513    ( 30,110)(70,150 ) ( 30,110)(90,150 ) ( 30,90)(70,150 ) ( 30,90)(90,150 ) ( 30,70)(150,70 ) ( 30,70)(150,110 ) ( 30,110)(150,70 ) ( 30,110)(150,110 ) ( 70,30)(70,150 ) ( 70,30)(110,150 ) ( 110,30)(70,150 ) ( 110,30)(110,150 ) ( 90,150)(150,90 ) ( 90,150)(150,110 ) ( 110,150)(150,90 ) ( 110,150)(150,110 ) ( 30,70)(70,30 ) ( 30,70)(90,30 ) ( 30,90)(70,30 ) ( 30,90)(90,30 ) ( 90,30)(150,90 ) ( 90,30)(150,70 ) ( 110,30)(150,90 ) ( 110,30)(150,70 )    ( 30,90)(1,0)120 ( 30,90)(6,1)120 ( 30,90)(6,-1)120 ( 150,90)(-6,1)120 ( 150,90)(-6,-1)120 ( 90,30)(0,1)120 ( 90,30)(1,6)20 ( 90,30)(-1,6)20 ( 90,150)(1,-6)20 ( 90,150)(-1,-6)20 ( 30,70)(1,2)40 ( 30,70)(3,4)60 ( 30,70)(1,1)80 ( 110,150)(-2,-1)80 ( 110,150)(-4,-3)80 ( 30,110)(1,-2)40 ( 30,110)(3,-4)60 ( 30,110)(1,-1)80 ( 110,30)(-2,1)80 ( 110,30)(-4,3)80 ( 70,150)(2,-1)80 ( 70,150)(4,-3)80 ( 70,150)(1,-1)80 ( 150,70)(-1,2)40 ( 150,70)(-3,4)60 ( 70,30)(2,1)80 ( 70,30)(4,3)80 ( 70,30)(1,1)80 ( 150,110)(-1,-2)40 ( 150,110)(-3,-4)60    ( 70,164)(0,0)1 ( 90,164)(0,0)2 ( 110,164)(0,0)3 ( 70,16)(0,0)3 ( 90,16)(0,0)2 ( 110,16)(0,0)1 ( 16,70)(0,0)1 ( 16,90)(0,0)2 ( 16,110)(0,0)3 ( 164,70)(0,0)3 ( 164,90)(0,0)2 ( 164,110)(0,0)1    ( 170,160)(10,10 )    ( 30,90)(18,58 ) ( 30,70)(0,0)@xmath0 ( 30,90)(0,0)@xmath0 ( 30,110)(0,0)@xmath0 ( 150,100)(18,38 ) ( 150,90)(0,0)@xmath0 ( 150,110)(0,0)@xmath0 ( 80,30)(38,18 ) ( 70,30)(0,0)@xmath0 ( 90,30)(0,0)@xmath0 ( 80,150)(38,18 ) ( 70,150)(0,0)@xmath0 ( 90,150)(0,0)@xmath0    ( 55,150)(0,0)@xmath320 ( 150,125)(0,0)@xmath512 ( 55,30)(0,0)@xmath511 ( 30,125)(0,0)@xmath513    ( 30,110)(70,150 ) ( 30,90)(70,150 ) ( 30,70)(70,30 ) ( 30,110)(70,30 ) ( 30,70)(150,110 ) ( 30,90)(150,110 ) ( 90,150)(150,90 ) ( 90,30)(150,90 ) ( 90,30)(90,150 )    ( 30,90)(1,0)120 ( 30,110)(1,0)120 ( 150,90)(-6,1)120 ( 150,90)(-6,-1)120    ( 30,90)(1,1)60 ( 30,70)(1,2)40 ( 30,110)(3,2)60 ( 30,70)(3,4)60    ( 30,90)(1,-1)60 ( 30,90)(2,-3)40 ( 30,110)(3,-4)60 ( 30,70)(3,-2)60    ( 70,30)(0,1)120 ( 70,30)(1,6)20 ( 90,30)(-1,6)20 ( 70,150)(2,-1)80 ( 70,150)(4,-3)80 ( 90,150)(3,-2)60 ( 70,30)(1,1)80 ( 70,30)(4,3)80 ( 90,30)(3,4)60    ( 70,164)(0,0)1 ( 90,164)(0,0)0 ( 70,16)(0,0)1 ( 90,16)(0,0)0 ( 16,70)(0,0)1 ( 16,90)(0,0)2 ( 16,110)(0,0)3 ( 164,90)(0,0)0 ( 164,110)(0,0)1    ( 20,40 )    ( 20,40)(0,0 ) ( 10,20)(18,38 ) ( 10,10)(0,0)@xmath0 ( 10,30)(0,0)@xmath0    ( 280,220)(0,0 )    ( 0,0 )    ( 120,220)(0,-20 ) ( 10,30 ) ( 50,-10 ) ( 90,70 ) ( 10,110 ) ( 50,150 ) ( 20,120)(60,160 ) ( 20,140)(100,80 ) ( 60,180)(100,80 ) ( 20,60)(100,100 ) ( 20,40)(60,0 ) ( 60,20)(100,100 ) ( 20,140)(1,1)40 ( 20,140)(2,1)40 ( 20,120)(2,3)40 ( 20,140)(2,-1)80 ( 20,120)(2,-1)80 ( 20,120)(4,-1)80 ( 60,180)(1,-2)40 ( 60,160)(1,-2)40 ( 60,160)(2,-3)40 ( 20,60)(4,1)80 ( 20,40)(4,3)80 ( 20,40)(2,1)80 ( 20,60)(2,-3)40 ( 20,60)(1,-1)40 ( 20,40)(2,-1)40 ( 60,20)(2,3)40 ( 60,0)(1,2)40 ( 60,0)(2,5)40 ( 6,140)(0,0)1 ( 6,120)(0,0)0 ( 6,60)(0,0)1 ( 6,40)(0,0)0 ( 75,180)(0,0)1 ( 75,160)(0,0)0 ( 75,20)(0,0)1 ( 75,0)(0,0)0 ( 114,100)(0,0)1 ( 114,80)(0,0)0 ( 20,103)(0,0)@xmath320 ( 60,143)(0,0)@xmath511 ( 20,23)(0,0)@xmath512 ( 60,-17)(0,0)@xmath513 ( 102,63)(0,0)@xmath514    ( 15,-15)(0,0)(a )    ( 160,60 )    ( 280,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,60)(100,60 ) ( 20,80)(60,40 ) ( 60,20)(100,60 ) ( 20,80)(100,80 ) ( 20,60)(60,20 ) ( 60,40)(100,80 )    ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(2,-3)40 ( 20,60)(2,-1)40 ( 60,40)(2,1)40 ( 60,20)(2,3)40    ( 60,2)(0,0)@xmath511 ( 20,42)(0,0)@xmath320 ( 100,42)(0,0)@xmath512    ( 15,80)(0,0)1 ( 15,60)(0,0)0 ( 60,35)(0,0)1 ( 60,15)(0,0)0 ( 105,80)(0,0)1 ( 105,60)(0,0)0    ( 15,4)(0,0)(b )    ( 200,170)(10,10 )    ( 30,110)(18,58 ) ( 30,90)(0,0)@xmath0 ( 30,110)(0,0)@xmath0 ( 30,130)(0,0)@xmath0 ( 110,40)(18,38 ) ( 110,30)(0,0)@xmath0 ( 110,50)(0,0)@xmath0 ( 110,100)(18,38 ) ( 110,90)(0,0)@xmath0 ( 110,110)(0,0)@xmath0 ( 110,160)(18,38 ) ( 110,150)(0,0)@xmath0 ( 110,170)(0,0)@xmath0 ( 190,110)(18,58 ) ( 190,90)(0,0)@xmath0 ( 190,110)(0,0)@xmath0 ( 190,130)(0,0)@xmath0    ( 16,90)(0,0)3 ( 16,110)(0,0)2 ( 16,130)(0,0)1 ( 204,90)(0,0)3 ( 204,110)(0,0)2 ( 204,130)(0,0)1 ( 110,165)(0,0)1 ( 110,145)(0,0)0 ( 110,105)(0,0)1 ( 110,85)(0,0)0 ( 110,45)(0,0)1 ( 110,25)(0,0)0    ( 30,145)(0,0)@xmath320 ( 190,145)(0,0)@xmath511 ( 110,134)(0,0)@xmath515 ( 110,74)(0,0)@xmath516 ( 110,14)(0,0)@xmath517    ( 30,90)(110,170 ) ( 30,110)(110,170 ) ( 30,90)(110,110 ) ( 30,130)(110,110 ) ( 30,110)(110,50 ) ( 30,130)(110,50 ) ( 190,110)(110,150 ) ( 190,90)(110,150 ) ( 190,130)(110,90 ) ( 190,90)(110,90 ) ( 190,110)(110,30 ) ( 190,130)(110,30 )    ( 30,130)(2,1)80 ( 30,130)(4,1)80 ( 30,130)(2,-1)80 ( 30,130)(4,-5)80 ( 30,110)(2,1)80 ( 30,110)(1,0)80 ( 30,110)(4,-1)80 ( 30,110)(1,-1)80 ( 30,90)(4,3)80 ( 30,90)(1,0)80 ( 30,90)(2,-1)80 ( 30,90)(4,-3)80    ( 190,130)(-2,1)80 ( 190,130)(-4,1)80 ( 190,130)(-4,-1)80 ( 190,130)(-1,-1)80 ( 190,110)(-4,3)80 ( 190,110)(-1,0)80 ( 190,110)(-4,-1)80 ( 190,110)(-4,-3)80 ( 190,90)(-1,1)80 ( 190,90)(-4,1)80 ( 190,90)(-2,-1)80 ( 190,90)(-4,-3)80    ( 20,40 )    ( 20,40)(0,0 ) ( 10,20)(18,38 ) ( 10,10)(0,0)@xmath0 ( 10,30)(0,0)@xmath0    ( 280,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 170,50 ) ( 210,10 ) ( 250,50 ) ( 20,60)(100,60 ) ( 20,80)(60,40 ) ( 60,20)(100,60 ) ( 100,80)(180,80 ) ( 180,60)(260,60 ) ( 180,60)(220,20 ) ( 220,40)(260,80 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(1,0)80 ( 20,80)(2,-3)40 ( 20,60)(2,-1)40 ( 20,60)(1,-1)40 ( 60,40)(1,1)40 ( 60,40)(2,1)40 ( 60,20)(2,3)40 ( 180,80)(2,-3)40 ( 180,80)(1,-1)40 ( 180,60)(2,-1)40 ( 220,40)(2,1)40 ( 220,20)(1,1)40 ( 220,20)(2,3)40 ( 100,80)(4,-1)80 ( 100,60)(4,1)80 ( 100,60)(1,0)80 ( 180,80)(4,-1)80 ( 180,60)(4,1)80 ( 180,80)(1,0)80 ( 60,2)(0,0)@xmath511 ( 20,42)(0,0)@xmath320 ( 100,42)(0,0)@xmath512 ( 220,2)(0,0)@xmath514 ( 180,42)(0,0)@xmath513 ( 260,42)(0,0)@xmath518    ( 15,80)(0,0)1 ( 15,60)(0,0)0 ( 60,35)(0,0)1 ( 60,15)(0,0)0 ( 102,75)(0,0)1 ( 102,55)(0,0)0 ( 178,75)(0,0)1 ( 178,55)(0,0)0 ( 220,35)(0,0)1 ( 220,15)(0,0)0 ( 265,80)(0,0)1 ( 265,60)(0,0)0    ( 160,120)(0,0 ) ( 20,90)(18,38 ) ( 20,80)(0,0)@xmath0 ( 20,100)(0,0)@xmath0 ( 40,30)(18,38 ) ( 40,20)(0,0)@xmath0 ( 40,40)(0,0)@xmath0 ( 120,30)(18,38 ) ( 120,20)(0,0)@xmath0 ( 120,40)(0,0)@xmath0 ( 140,90)(18,38 ) ( 140,80)(0,0)@xmath0 ( 140,100)(0,0)@xmath0    ( 16,100)(0,0)1 ( 16,80)(0,0)0 ( 40,35)(0,0)1 ( 40,15)(0,0)0 ( 120,35)(0,0)1 ( 120,16)(0,0)0 ( 144,100)(0,0)1 ( 144,80)(0,0)0    ( 10,65)(0,0)@xmath320 ( 40,5)(0,0)@xmath511 ( 120,5)(0,0)@xmath512 ( 150,65)(0,0)@xmath513    ( 20,80)(140,100 ) ( 20,80)(120,40 ) ( 20,100)(40,40 ) ( 40,20)(140,100 ) ( 40,20)(120,40 ) ( 120,20)(140,80 )    ( 20,100)(6,-1)120 ( 20,100)(1,0)120 ( 20,100)(5,-3)100 ( 20,100)(5,-4)100 ( 20,100)(1,-4)20 ( 20,80)(1,0)120 ( 20,80)(5,-3)100 ( 20,80)(1,-2)20 ( 20,80)(1,-3)20 ( 40,40)(5,3)100 ( 40,40)(5,2)100 ( 40,40)(1,0)80 ( 40,40)(4,-1)80 ( 40,20)(5,3)100 ( 40,20)(1,0)80 ( 120,40)(1,3)20 ( 120,40)(1,2)20 ( 120,20)(1,4)20    * @xmath519 ( shown in figure  [ fig : ik4 ] ) is composed of four variables with domains @xmath520 ( @xmath521 ) , and the following constraints : @xmath522 ( @xmath523 ) and @xmath524 ( @xmath525 ) . *",
    "@xmath526 ( shown in figure  [ fig : i4 ] ) is composed of four variables with domains @xmath527 , @xmath528 ( @xmath529 ) , and the following constraints : @xmath530 ( @xmath531 ) and @xmath532 ( @xmath533 ) .",
    "* @xmath534 ( shown in figure  [ fig : isat2delta](a ) ) is composed of five boolean variables and the following constraints : @xmath535 , @xmath536 , @xmath537 , @xmath538 , @xmath539 , @xmath540 .",
    "* @xmath541 ( shown in figure  [ fig : i5 ] ) is composed of five variables with domains @xmath542 ( @xmath529 ) , @xmath520 , and the constraints : @xmath543 ( @xmath529 ) and @xmath544 ( @xmath529 ) . in this instance",
    "the variable order is @xmath545 .",
    "* @xmath546 ( shown in figure  [ fig : isat6 ] ) is composed of six boolean variables and the following constraints : @xmath547 , @xmath548 , @xmath549 , @xmath550 , @xmath551 , @xmath552 , @xmath553 . *",
    "@xmath554 ( shown in figure  [ fig : isatk4 ] ) is composed of four boolean variables and the following constraints : @xmath547 , @xmath536 and @xmath555 ( for @xmath556 , @xmath557 , @xmath558 , @xmath559 ) .",
    "* @xmath560 ( shown in figure  [ fig : isat2delta](b ) ) is composed of three boolean variables and the three inequality constraints : @xmath561 ( @xmath531 ) .",
    "( 500,620)(0,-20 )    ( 0,500 )    ( 160,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,60)(4,-3)40 ( 60,30)(4,3)40 ( 5,10)(0,0)(a )    ( 165,500 )    ( 160,90)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 20,60)(4,1)80 ( 60,20)(1,1)40 ( 60,20)(-1,1)40 ( 60,40)(100,60 ) ( 4,80)(0,0)@xmath53 ( 4,60)(0,0)@xmath305 ( 116,80)(0,0)@xmath115 ( 116,60)(0,0)@xmath116 ( 74,40)(0,0)@xmath562 ( 74,20)(0,0)@xmath563 ( 90,10 ) ( 5,10)(0,0)(b )    ( 330,500 )    ( 150,90)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(60,30 ) ( 4,80)(0,0)@xmath53 ( 4,60)(0,0)@xmath305 ( 20,43)(0,0)@xmath336 ( 100,47)(0,0)@xmath2 ( 60,7)(0,0)@xmath145 ( 90,15 ) ( 5,10)(0,0)(c )    ( 0,400 )    ( 160,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,70)(60,40 ) ( 60,40)(100,70 ) ( 20,70)(4,-5)40 ( 60,20)(4,5)40 ( 5,10)(0,0)(d )    ( 165,400 )    ( 160,80)(0,0 ) ( 10,50 ) ( 50,20 ) ( 90,50 ) ( 20,70)(60,40 ) ( 60,15 ) ( 100,45 ) ( 60,40)(100,70 ) ( 90,20 ) ( 5,10)(0,0)(e )    ( 330,400 )    ( 160,80)(0,0 ) ( 10,50 ) ( 50,20 ) ( 90,50 ) ( 20,70)(60,50 ) ( 20,45 ) ( 60,13 ) ( 100,45 ) ( 60,30)(100,70 ) ( 44,50)(0,0)@xmath562 ( 44,30)(0,0)@xmath563 ( 90,15 ) ( 5,10)(0,0)(f )    ( 0,300 )    ( 160,70)(0,0 ) ( 10,30 ) ( 90,30 ) ( 20,40)(100,40 ) ( 20,60)(100,60 ) ( 4,60)(0,0)@xmath53 ( 4,40)(0,0)@xmath305 ( 80,15 ) ( 5,10)(0,0)(g )    ( 165,300 )    ( 160,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,70 ) ( 60,30)(100,70 ) ( 4,80)(0,0)@xmath53 ( 4,60)(0,0)@xmath305 ( 90,20 ) ( 5,10)(0,0)(h )    ( 330,300 )    ( 160,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,70)(100,80 ) ( 60,30)(100,80 ) ( 116,80)(0,0)@xmath115 ( 116,60)(0,0)@xmath116 ( 90,20 ) ( 5,10)(0,0)(i )    ( 0,200 )    ( 150,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,70 ) ( 4,80)(0,0)@xmath53 ( 4,60)(0,0)@xmath305 ( 20,42)(0,0)@xmath336 ( 60,7)(0,0)@xmath145 ( 100,47)(0,0)@xmath2 ( 90,15 ) ( 5,10)(0,0)(j )    ( 165,200 )    ( 150,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 4,80)(0,0)@xmath53 ( 4,60)(0,0)@xmath305 ( 116,80)(0,0)@xmath115 ( 116,60)(0,0)@xmath116 ( 100,44)(0,0)@xmath2 ( 60,7)(0,0)@xmath145 ( 90,8 ) ( 5,10)(0,0)(k )    ( 330,200 )    ( 150,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,70)(100,60 ) ( 60,30)(100,80 ) ( 116,80)(0,0)@xmath115 ( 116,60)(0,0)@xmath116 ( 20,47)(0,0)@xmath336 ( 60,7)(0,0)@xmath145 ( 90,15 ) ( 5,10)(0,0)(l )    ( 0,90 )    ( 150,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,20)(100,60 ) ( 4,80)(0,0)@xmath53 ( 4,60)(0,0)@xmath305 ( 44,40)(0,0)@xmath562 ( 44,20)(0,0)@xmath563 ( 90,15 ) ( 5,10)(0,0)(m )    ( 165,90 )    ( 150,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,70)(100,80 ) ( 60,30)(-1,1)40 ( 60,30)(4,3)40 ( 116,80)(0,0)@xmath115 ( 116,60)(0,0)@xmath116 ( 90,20 ) ( 5,10)(0,0)(n )    ( 330,120 )    ( 150,60)(0,-10 ) ( 10,10 ) ( 90,10 ) ( 4,40)(0,0)@xmath53 ( 4,20)(0,0)@xmath305 ( 116,40)(0,0)@xmath115 ( 116,20)(0,0)@xmath116 ( 20,20)(100,40 ) ( 125,22 ) ( 5,0)(0,0)(o )    ( 0,-10 )    ( 150,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 60,30)(-1,1)40 ( 20,70)(1,0)80 ( 60,30)(1,1)40 ( 5,10)(0,0)(p )    ( 165,-10 )    ( 150,80)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 60,30)(-1,1)40 ( 20,70)(100,70 ) ( 60,30)(100,70 ) ( 5,10)(0,0)(q )    ( 330,50 )    ( 150,60)(0,-10 ) ( 10,10 ) ( 90,10 ) ( 20,20)(1,0)80 ( 20,40)(100,40 ) ( 4,40)(0,0)@xmath53 ( 4,20)(0,0)@xmath305 ( 116,40)(0,0)@xmath115 ( 116,20)(0,0)@xmath116 ( 125,22 ) ( 5,0)(0,0)(r )    ( 330,-20 )    ( 150,60)(0,-10 ) ( 10,10 ) ( 90,20 ) ( 20,20)(4,1)80 ( 20,40)(1,0)80 ( 4,40)(0,0)@xmath53 ( 4,20)(0,0)@xmath305 ( 120,25 ) ( 5,0)(0,0)(s )    we illustrate four of these instances in figure  [ fig : ik4 ] , figure  [ fig : i4 ] , figure  [ fig : i5 ] and figure  [ fig : isatk4 ] . in figures representing csp instances , similarly to patterns , ovals represent variables , the set of points inside an oval the elements of the variable s domain , a dashed ( respectively , solid ) line joining two points represents the incompatibility ( respectively , compatibility ) of the two points . in order not to clutter up",
    "figures representing instances , trivial constraints containing only positive edges ( i.e. corresponding to complete relations ) are not shown .",
    "figure  [ fig : badpatterns](a ) is a pattern which does not occur in the instance @xmath519 ( figure  [ fig : ik4 ] ) .",
    "similarly , figure  [ fig : badpatterns](b ) is a pattern which does not occur in the instance @xmath564 ( figure  [ fig : i4 ] ) , and the pattern in figure  [ fig : badpatterns](c ) does not occur in instance @xmath534 .",
    "figure  [ fig : badpatterns](d ) , ( e ) and ( f ) are three patterns which do not occur in the instance @xmath541 ( figure  [ fig : i5 ] ) .",
    "the pattern ( known as @xmath565 ) shown in figure  [ fig : badpatterns](d ) is , in fact , a tractable pattern  @xcite , but the fact that it does not occur in @xmath541 ( an arc - consistent instance which has no solution ) shows that arc consistency is not a decision procedure for csp@xmath566 .",
    "this instance was constructed using certain known properties of the pattern @xmath565  @xcite .",
    "it can easily be verified that the three patterns figure  [ fig : badpatterns](g ) , ( h ) , ( i ) do not occur in @xmath567 .",
    "similarly , the four patterns in figure  [ fig : badpatterns](j),(k),(l),(m ) do not occur in the instance @xmath554 ( figure  [ fig : isatk4 ] ) .    the instance @xmath568 is the problem of colouring a complete graph on three vertices with only two colours",
    "it is arc consistent but clearly has no solution .",
    "it is easy to verify that none of the six patterns in figure  [ fig : badpatterns](n),(o),(p),(q),(r),(s ) occur in @xmath568 .",
    "furthermore , trivially , no pattern on four or more variables occurs in @xmath568 and no pattern with three or more distinct values in the same domain occurs in @xmath568 .    by lemma  [ lem : not - ac ] , we know that if a pattern @xmath19 does not occur in any of the instances @xmath519 , @xmath526 , @xmath534 , @xmath569 , @xmath546 , @xmath554 , @xmath560 , then it is not ac - solvable",
    ". let @xmath19 be any of the patterns shown in figure  [ fig : badpatterns ] .",
    "by lemma  [ lem : hered ] , any pattern @xmath74 in which @xmath19 occurs is not ac - solvable .    by the pattern in figure  [ fig : badpatterns](g ) ,",
    "a simple ac - solvable pattern can not contain two negative edges between the same pair of variables .",
    "since instance @xmath568 contains only three variables and instance @xmath541 contains no triple of variables which have a negative edge between each pair of variables , an ac - solvable pattern can contain _ at most three variables and at most two negative edges_. thus to identify simple ac - solvable patterns we only need to consider patterns on at most three variables , at most two points per variable and with none , one or two negative edges .",
    "furthermore , in the case of two negative edges these negative edges can not be between the same pair of variables .      in this subsection",
    ", we consider only patterns @xmath19 that have no associated structure ( i.e. with @xmath570 ) .",
    "we prove the following characterisation of unstructured ac - solvable patterns .",
    "[ thm : noorder ] if @xmath19 is a simple unordered pattern , then @xmath19 is ac - solvable if and only if @xmath19 occurs in the pattern lx ( figure  [ fig : lx ] ) or in the pattern unordered(btp ) .    by the discussion in section  [ sec:5.1 ] , we only need to consider patterns @xmath19 with at most three variable , at most two points per variable and at most two negative edges ( with these edges not being between the same pair of variables ) .",
    "we consider separately the cases of a pattern with 0 , 1 or 2 negative edges .",
    "the only simple unordered pattern with no negative edges is the triangle of positive edges shown in figure  [ fig : badpatterns](p ) and this pattern is not ac - solvable since it does not occur in @xmath568 .",
    "let @xmath19 be a simple pattern with one negative edge @xmath571 ( between variables @xmath34 and @xmath59 ) and at most two points per variable .",
    "if the domain of @xmath34 ( respectively , @xmath59 ) contains another point @xmath305 ( respectively , @xmath116 ) , then for @xmath100 ( respectively , @xmath572 ) to be non - mergeable , there must be a positive edge @xmath573 ( respectively , @xmath574 ) .",
    "furthermore , for @xmath305 ( respectively , @xmath116 ) not to be a dangling point , it must belong to another positive edge .",
    "any two distinct points in the domain of a third variable @xmath33 would be mergeable , so we can assume that @xmath19 has at most one point in the domain of @xmath33 . since this point is not a dangling point , it must be connected by positive edges to at least two points . by a simple exhaustive search",
    "we can easily deduce that _ either _ @xmath19 is ( a subpattern of ) a triangle on three variables composed of one negative edge and two positive edges ( in which case @xmath19 occurs in the pattern lx shown in figure  [ fig : lx ] ) , _ or _",
    "one of the patterns shown in figure  [ fig : badpatterns](a ) , figure  [ fig : badpatterns](p ) or figure  [ fig : badpatterns](s ) occurs in @xmath19 , in which case , by lemma  [ lem : hered ] , @xmath19 is not ac - solvable .",
    "let @xmath19 be a simple pattern containing exactly two negative edges @xmath575 ( between variables @xmath31 ) and @xmath571 ( between variables @xmath576 ) that meet at the point @xmath53 of variable @xmath33 .",
    "suppose first that @xmath33 has no other point .",
    "if @xmath19 does not occur in lx , then @xmath19 must have a positive edge between variables @xmath34 and @xmath59 which is either @xmath573 or @xmath577 where @xmath578 and @xmath579 . in the latter case , to avoid points @xmath580 ( respectively , @xmath581 ) being mergeable , @xmath19 must have the positive edge @xmath574 ( respectively , @xmath582 ) .",
    "we can deduce that , if @xmath19 does not occur in lx , then one of the patterns figure  [ fig : badpatterns](p ) or figure  [ fig : badpatterns](q ) occurs in @xmath19 .",
    "suppose now that @xmath19 has two points @xmath583 in the domain of variable @xmath33 . for @xmath583 not to be mergeable",
    ", @xmath19 must have either the positive edge @xmath584 or the positive edge @xmath585 .",
    "if it has both , then the pattern figure  [ fig : badpatterns](d ) occurs in @xmath19 . if @xmath19 has just one , which without loss of generality we can suppose is the positive edge @xmath584 , then for @xmath563 not to be a dangling point , @xmath563 must belong to another positive edge @xmath586 ( where @xmath578 ) or @xmath587 ( where @xmath588 ) . in the latter case , for @xmath589 not to be mergeable , @xmath19 must also have the positive edge @xmath582 . in both cases ,",
    "the pattern figure  [ fig : badpatterns](s ) occurs in @xmath19 .",
    "thus , if @xmath19 does not occur in lx , then , by lemma  [ lem : hered ] , @xmath19 is not ac - solvable .",
    "finally , let @xmath19 be a simple pattern containing exactly two negative edges @xmath575 ( between variables @xmath31 ) and @xmath590 ( between variables @xmath576 ) with two distinct points @xmath591 in the domain of variable @xmath33 . to avoid @xmath592 being mergeable",
    ", @xmath19 must have a positive edge @xmath573 or @xmath574 .",
    "without loss of generality , suppose @xmath19 has the positive edge @xmath573 .",
    "if @xmath19 does not occur in unordered(btp ) , then at least one of the variables @xmath593 must have two distinct points .",
    "if @xmath34 has a point @xmath594 , then for @xmath595 not to be mergeable , @xmath19 must have the positive edge @xmath582 .",
    "similarly , if @xmath59 has a point @xmath596 , then @xmath19 must have the positive edge @xmath597 .",
    "but then , to avoid dangling points , we have to add other positive edges to @xmath19 and we find that one of the patterns figure  [ fig : badpatterns](a ) , figure  [ fig : badpatterns](n ) , figure  [ fig : badpatterns](p ) or figure  [ fig : badpatterns](s ) occurs in @xmath19 , and so , by lemma  [ lem : hered ] , @xmath19 is not ac - solvable . by lemma  [ lem : occ - unordered ] , if @xmath19 occurs in unordered(btp",
    ") , then @xmath19 occurs in btp , and thus is ac - solvable  @xcite .      in this subsection",
    "we consider simple patterns @xmath19 which have no domain order , ( i.e. @xmath598 ) , but do have a partial order on the variables . we first require the following lemma .    [ lem : p < ] if @xmath599 is a pattern whose only structure is a partial order on its variables and @xmath600 , then    1 .",
    "@xmath599 is simple if and only if @xmath601 is simple .",
    "@xmath599 is ac - solvable only if @xmath601 is ac - solvable .",
    "the property of being simple is ( definition  [ def : simple ] ) independent of any variable order , hence @xmath599 is simple if and only if @xmath601 is simple . by lemma  [ lem : occ - unordered ]",
    ", @xmath601 occurs in @xmath602 .",
    "the fact that @xmath599 is ac - solvable only if @xmath601 is ac - solvable then follows from lemma  [ lem : hered ] .",
    "recall pattern lx@xmath603 from example  [ ex : lx < ] that is obtained from the pattern lx ( figure  [ fig : lx ] ) by adding the partial variable order @xmath121 .",
    "lemma  [ lem : p < ] allows us to give the following characterisation of variable - ordered ac - solvable patterns .",
    "[ thm : varorder ] if @xmath19 is a simple pattern whose only structure is a partial order on its variables , then @xmath19 is ac - solvable if and only if @xmath19 occurs in the pattern lx@xmath603 ( example  [ ex : lx < ] ) , the pattern btp@xmath125 ( figure  [ fig : btp ] ) or the pattern invvar(btp@xmath125 ) .    by lemma  [ lem : p < ] and theorem  [ thm : noorder ] , we only need to consider patterns @xmath601 occurring in lx or unordered(btp ) to which we add a partial order on the variables to produce a pattern @xmath19 .",
    "we first consider the case of a pattern @xmath19 in which two negative edges that meet . by lemma  [ lem : p < ] and theorem  [ thm : noorder ] , for @xmath19 to be ac - solvable , @xmath601 must occur in lx . by theorem  [ thm : lx ] and",
    "example  [ ex : lx < ] , we have that lx@xmath120 is ac - solvable .",
    "let @xmath604 be the pattern composed of three variables @xmath605 and two negative edges which meet at a point @xmath606 ( i.e. @xmath604 is the pattern lx without its positive edges )",
    ". then figure  [ fig : badpatterns](e ) and lemma  [ lem : inv ] tell us that placing any order between @xmath33 and @xmath34 or between @xmath33 and @xmath59 turns @xmath604 into a pattern which is not ac - solvable .",
    "it follows from lemma  [ lem : hered ] that an ordered pattern @xmath19 containing two negative edges that meet is ac - solvable if and only if @xmath19 occurs in @xmath607 .",
    "now consider simple patterns @xmath19 which contain two negative edges that do not meet . by lemma  [ lem : p < ] and",
    "theorem  [ thm : noorder ] , for @xmath19 to be ac - solvable , @xmath601 must occur in unordered(btp ) .",
    "adding almost any partial variable order to unordered(btp ) produces a pattern which occurs in btp@xmath125 ( figure  [ fig : btp](b ) ) or invvar(btp@xmath125 ) .",
    "the only order for which this is not the case , is the total order @xmath608 ( or its inverse ) , where the variables @xmath605 are as shown in figure  [ fig : btp](b ) .",
    "let @xmath19 be any simple pattern on three variables @xmath605 , containing two negative edges ( between @xmath576 and @xmath593 ) that do not meet and with the variable order @xmath608 .",
    "then the pattern shown in figure  [ fig : badpatterns](f ) occurs in @xmath19 and hence , by lemma  [ lem : hered ] , @xmath19 is not ac - solvable .",
    "if @xmath19 is any simple pattern such that @xmath601 occurs in lx or unordered(btp ) and contains at most one negative edge , then @xmath19 occurs in the three - variable triangle pattern composed of one negative and two positive edges ; it is then easy to check that , whatever the ordering of is variables , @xmath19 occurs in btp@xmath125 or invvar(btp@xmath125 ) .      in this subsection",
    "we consider simple patterns @xmath19 with a partial order on domains but no ordering on the variables .",
    "let emc@xmath609 be the no - variable - order version of the pattern emc depicted in figure  [ fig : emc ] .",
    "we prove the following characterisation of domain - ordered ac - solvable patterns .",
    "[ thm : domorder ] if @xmath19 is a simple pattern whose only structure is a partial order on its domains , then @xmath19 is ac - solvable if and only if @xmath19 occurs in the pattern lx ( figure  [ fig : lx ] ) , or the pattern emc@xmath609 , or the pattern invdom(emc@xmath609 ) .    as in the proofs of theorem  [ thm : noorder ] and  [ thm : varorder ] , we only need to consider patterns on at most three variables , with at most two points per variable and with either no negative edges , one negative edge , two negative edges that meet or two negative edges that do not meet . however , we have more cases to consider than in theorem  [ thm : noorder ] since patterns may now contain points , such as @xmath62 in the pattern emc shown in figure  [ fig : emc ] , which would be a dangling point without the domain order @xmath610 .    the only pattern with no negative edges and no mergeable points is the triangle of positive edges shown in figure  [ fig : badpatterns](p ) which is not ac - solvable .",
    "let @xmath19 be a simple pattern with one negative edge , at most two points per variable and just two variables .",
    "if neither of the patterns shown in figure  [ fig : badpatterns](o ) and figure  [ fig : badpatterns](r ) occur in @xmath19 , then @xmath19 occurs in the pattern emc@xmath609 or in invdom(emc@xmath609 ) .",
    "let @xmath19 be a simple pattern on three variables @xmath605 , with one negative edge @xmath571 ( between variables @xmath34 and @xmath59 ) and at most two points per variable .",
    "if the domain of @xmath34 ( respectively , @xmath59 ) contains another point @xmath305 ( respectively , @xmath116 ) , then for @xmath100 ( respectively , @xmath572 ) to be non - mergeable , there must be a positive edge @xmath573 ( respectively , @xmath574 ) .",
    "any two distinct points in the domain of variable @xmath33 would be mergeable , so we can assume that @xmath19 has exactly one point in the domain of @xmath33 . since this point @xmath562 is not a dangling point , it must be connected by positive edges to at least two points .",
    "if none of the patterns in figure  [ fig : badpatterns](a ) , figure  [ fig : badpatterns](p ) and figure  [ fig : badpatterns](s ) occurs in @xmath19 , then @xmath562 must belong to the two positive edges @xmath582 and @xmath611 , and no others . if neither of the patterns in figure  [ fig : badpatterns](o ) or figure  [ fig : badpatterns](r ) occurs in @xmath19 , then we can deduce that @xmath19 occurs in the pattern emc@xmath609 or in invdom(emc@xmath609 ) .",
    "let @xmath19 be a simple pattern on three variables with at most two points per variable and with two negative edges that meet .",
    "if @xmath19 has two points @xmath100 in the domain of the same variable together with an ordering @xmath612 , then one of the patterns in figure  [ fig : badpatterns](h ) and figure  [ fig : badpatterns](i ) ( or their domain - inversed version ) occurs in @xmath19 , and hence @xmath19 can not be ac - solvable .",
    "this leaves only the case of unordered patterns @xmath19 . by the proof ( and in particular the part that deals with patterns containing exactly two negative edges that meet ) of theorem  [ thm : noorder ]",
    ", we can deduce that if @xmath19 is ac - solvable then it occurs in the pattern lx .",
    "let @xmath19 be a simple pattern on three variables @xmath605 with at most two points per variable and with two negative edges @xmath571 ( between variables @xmath33 and @xmath34 ) and @xmath586 ( between variables @xmath34 and @xmath59 ) that do not meet ( i.e. @xmath613 ) .",
    "if @xmath19 contains only these four points @xmath614 , then it necessarily occurs in emc@xmath609 .",
    "if @xmath19 contains exactly five points , then without loss of generality , we can assume that there is a point @xmath615 in the domain of @xmath33 .",
    "since @xmath100 are not mergeable , there must be a positive edge @xmath573 in @xmath19 .",
    "if @xmath19 has a positive edge @xmath584 , then the pattern in figure  [ fig : badpatterns](n ) occurs in @xmath19 ; if @xmath19 has a positive edge @xmath616 then the pattern in figure  [ fig : badpatterns](s ) occurs in @xmath19 .",
    "now , if the pattern in figure  [ fig : badpatterns](o ) does not occur in @xmath19 , then whatever ordering is placed on @xmath100 and @xmath572 , @xmath19 occurs in the pattern emc@xmath609 or in invdom(emc@xmath609 ) .",
    "if @xmath19 contains exactly six points , then there must be points @xmath617 in the domain of @xmath33 and @xmath618 in the domain of @xmath59 .",
    "since both @xmath100 and @xmath619 , are not mergeable , there must be positive edges @xmath573 and @xmath620 .",
    "if @xmath19 has a positive edge @xmath621 , then the pattern in figure  [ fig : badpatterns](b ) occurs in @xmath19 ; if @xmath19 has a positive edge @xmath584 or @xmath582 , then the pattern in figure  [ fig : badpatterns](n ) occurs in @xmath19 ; if @xmath19 has a positive edge @xmath616 or @xmath622 , then the pattern in figure  [ fig : badpatterns](s ) occurs in @xmath19 .",
    "but then in all other cases one of @xmath305 and @xmath562 is a dangling point unless @xmath19 has an order on both @xmath100 and @xmath619 .",
    "but this then implies that at least one of the patterns in figure  [ fig : badpatterns](m ) and figure  [ fig : badpatterns](o ) occur in @xmath19 . in all these cases , by lemma  [ lem : hered ] , @xmath19 is not ac - solvable .      in this subsection",
    "we consider the most general case of simple patterns @xmath19 which have a partial domain order and a partial variable order .",
    "we prove the following characterisation of ac - solvable patterns with partial orders on domains and variables .",
    "[ thm : order ] if @xmath19 is a simple pattern with a partial order on its domains and/or variables , then @xmath19 is ac - solvable if and only if @xmath19 occurs in one of the patterns lx@xmath603 , emc ( figure  [ fig : emc ] ) , btp@xmath125 , btp@xmath122 ( figure  [ fig : btp ] ) , btx ( figure  [ fig : btx ] ) or bti ( figure  [ fig : bti ] ) ( or versions of these patterns with inversed domain - order and/or variable - order ) .",
    "let @xmath601 be the same pattern as @xmath19 but without the partial order on its variables .",
    "if @xmath19 is ac - solvable , then , by lemma  [ lem : occ - unordered ] , @xmath601 occurs in @xmath19 , and hence , by lemmas  [ lem : occ - sup ] and  [ lem : not - ac ] , @xmath623 is also ac - solvable .",
    "thus , by theorem  [ thm : domorder ] , @xmath19 must occur in either lx , emc@xmath609 or invdom(emc@xmath609 ) .",
    "we consider the four cases : no negative edges , one negative edge , two negative edges that meet , two negative edges that do not meet in @xmath19 .",
    "we have already seen in the proofs of theorems  [ thm : noorder ] and  [ thm : domorder ] that there are no simple ac - solvable patterns with only positive edges , so there remain three cases to consider .",
    "( 380,100)(0,0 )    ( 0,0 )    ( 180,100)(0,0 ) ( 10,60 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 20,80)(4,-1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath145 ( 20,57)(0,0)@xmath336 ( 100,42)(0,0)@xmath2 ( 130,65 ) ( 5,80)(0,0)@xmath53 ( 115,80)(0,0)@xmath115 ( 115,60)(0,0)@xmath116 ( 15,5)(0,0)(a )    ( 200,0 )    ( 180,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath145 ( 20,42)(0,0)@xmath336 ( 100,42)(0,0)@xmath2 ( 130,60 ) ( 5,80)(0,0)@xmath53 ( 5,60)(0,0)@xmath305 ( 115,80)(0,0)@xmath115 ( 115,60)(0,0)@xmath116 ( 15,5)(0,0)(b )    ( 380,100)(0,0 )    ( 0,0 )    ( 180,100)(0,0 ) ( 10,60 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath145 ( 20,57)(0,0)@xmath336 ( 100,42)(0,0)@xmath2 ( 130,65 ) ( 5,80)(0,0)@xmath53 ( 115,80)(0,0)@xmath115 ( 115,60)(0,0)@xmath116 ( 15,5)(0,0)(a )    ( 200,0 )    ( 180,100)(0,0 ) ( 10,50 ) ( 50,10 ) ( 90,50 ) ( 20,80)(100,80 ) ( 60,30)(100,60 ) ( 20,80)(4,-1)80 ( 20,60)(4,1)80 ( 20,80)(4,-5)40 ( 60,30)(4,5)40 ( 60,10)(0,0)@xmath145 ( 20,42)(0,0)@xmath336 ( 100,42)(0,0)@xmath2 ( 130,60 ) ( 5,80)(0,0)@xmath53 ( 5,60)(0,0)@xmath305 ( 115,80)(0,0)@xmath115 ( 115,60)(0,0)@xmath116 ( 15,5)(0,0)(b )    let @xmath19 be a simple pattern with exactly one negative edge .",
    "if @xmath623 ( which also has one negative edge ) occurs in lx and is simple ( and hence has no dangling points ) then it must occur in a triangle @xmath624 consisting of one negative and two positive edges .",
    "this triangle pattern @xmath624 occurs in btp or in invvar(btp ) whatever ordering we place on its three variables and hence the same is true of @xmath19 . if @xmath623 ( which has one negative edge and is unmergeable ) occurs in emc@xmath609 but not in the triangle @xmath624 , then @xmath623 occurs in one of the two patterns shown in figure  [ fig : sub1emc ] ( or the domain - inversed versions of these patterns ) and includes the point @xmath116 ( in the case corresponding to figure  [ fig : sub1emc](a ) ) or the points @xmath305 and @xmath116 ( in the case corresponding to figure  [ fig : sub1emc](b ) ) . for @xmath116 ( respectively , @xmath305 ) not to be a dangling point in @xmath19 , we must have the order @xmath625 ( respectively @xmath626 ) in @xmath19 . if @xmath623 occurs in the pattern in figure  [ fig : sub1emc](a ) and @xmath19 has the variable order @xmath627 ( or @xmath628 or @xmath629 )",
    ", then @xmath19 occurs in btp@xmath122 .",
    "if @xmath623 occurs in the pattern in figure  [ fig : sub1emc](a ) and @xmath19 has the variable order @xmath630 , then @xmath19 occurs in invvar(bti ) . if @xmath623 occurs in the pattern in figure  [ fig : sub1emc](a ) and @xmath19 includes the variable order @xmath631 and domain order @xmath625 , then the pattern in figure  [ fig : badpatterns](j ) occurs in invvar(@xmath19 ) .",
    "if @xmath623 occurs in the pattern in figure  [ fig : sub1emc](a ) and @xmath19 includes the variable order @xmath632 and domain order @xmath625 , then the pattern in figure  [ fig : badpatterns](c ) occurs in @xmath19 .",
    "this covers all variable orderings of @xmath19 ( after taking into account the variable - inversed versions of each case ) when @xmath623 occurs in the pattern in figure  [ fig : sub1emc](a ) .",
    "now consider the case in which @xmath623 occurs in the pattern in figure  [ fig : sub1emc](b ) .",
    "if @xmath19 includes the variable order @xmath629 ( or @xmath138 ) together with the domain order @xmath626 and @xmath625 , then the pattern in figure  [ fig : badpatterns](k ) occurs in @xmath19 .",
    "if @xmath19 has the variable order @xmath628 then @xmath19 occurs in emc .",
    "thus all one - negative - edge ac - solvable patterns occur in btp , bti or emc ( or their domain and/or variable - inversed versions ) .",
    "let @xmath19 be a simple pattern with two negative edges that meet at a point .",
    "@xmath623 necessarily occurs in the pattern lx .",
    "let @xmath145 be the variable of @xmath19 where the two negative edges meet , and let @xmath633 be the other two variables . if @xmath19 includes the variable order @xmath629 ( or , by symmetry , the order @xmath138 ) , then the pattern in figure  [ fig : badpatterns](e ) occurs in @xmath19 and hence @xmath19 is not ac - solvable .",
    "if @xmath19 has the variable order @xmath628 , then @xmath19 occurs in the pattern @xmath607 ( the version of lx shown in figure  [ fig : lx ] together with the variable order @xmath121 ) . by symmetry",
    ", we have covered all possible cases .",
    "finally , let @xmath19 be a simple pattern with two negative edges that do not meet at a point .",
    "@xmath623 necessarily occurs in the pattern emc .",
    "we distinguish two distinct cases : ( 1 ) @xmath19 occurs in the pattern in figure  [ fig : sub2emc](a ) or ( 2 ) @xmath19 occurs in the pattern in figure  [ fig : sub2emc](b ) and includes the point @xmath305 together with the order @xmath626 ( otherwise @xmath305 would be a dangling point ) .",
    "we first consider case ( 1 ) .",
    "if @xmath19 includes the order @xmath625 and @xmath630 , then the ( inversed domain - order version of the ) pattern in figure  [ fig : badpatterns](l ) occurs in @xmath19 and hence @xmath19 is not ac - solvable .",
    "if @xmath19 includes the order @xmath634 , then the pattern in figure  [ fig : badpatterns](f ) occurs in @xmath19 .",
    "if @xmath19 has the variable order @xmath635 and no domain order , then @xmath19 occurs in btp@xmath125 .",
    "if @xmath19 has the variable order @xmath627 and the domain order @xmath625 , then @xmath19 occurs in btp@xmath122 .",
    "all other patterns which fall in case ( 1 ) are covered by symmetry .",
    "now we consider the case ( 2 ) .",
    "first suppose that @xmath19 includes the domain order @xmath625 ( as well as @xmath626 ) .",
    "if @xmath19 includes the variable order @xmath630 , then the ( domain - inversed version of the ) pattern in figure  [ fig : badpatterns](l ) occurs in @xmath19 . if @xmath19 includes the variable order @xmath629 , then the pattern in figure  [ fig : badpatterns](k ) occurs in @xmath19 .",
    "if @xmath19 has the variable order @xmath628 , then @xmath19 occurs in emc . now",
    ", suppose that @xmath19 does not include the domain order @xmath625 .",
    "if @xmath19 includes the variable order @xmath627 , then the pattern in figure  [ fig : badpatterns](j ) occurs in @xmath19 .",
    "if @xmath19 includes the variable order @xmath632 , then the pattern in figure  [ fig : badpatterns](c ) occurs in @xmath19 .",
    "if @xmath19 has the variable order @xmath631 ( or @xmath630 or @xmath628 ) then @xmath19 occurs in btx .",
    "if @xmath19 has the variable order @xmath629 then @xmath19 occurs in bti . by symmetry",
    "we have covered all possible variable orderings of @xmath19 in case ( 2 ) .",
    "we have identified 4 new tractable classes of binary csps . moreover , we have given a characterisation of all simple partially - ordered patterns decided by ac .",
    "we finish with open problems .    for future work",
    ", we plan to study the wider class of unmergeable ordered patterns in which two points @xmath100 may be non - mergeable simply because there is an order @xmath612 on them . in the present paper ,",
    "@xmath100 are mergeable unless they have different compatibilities with a third point @xmath115 .",
    "is there a way of combining emc , btx and bti , since to find a solution after establishing arc consistency we use basically the same algorithm ?",
    "any such generalisation will not be a simple forbidden pattern by theorem  [ thm : order ] , but there is possibly some other way of combining these patterns .",
    "are there interesting generalisations of these patterns to constraints of arbitrary arity , valued constraints , infinite domains or qcsp ?",
    "btp has been generalised to constraints of arbitrary arity  @xcite as well as to qcsps  @xcite .",
    "max - closed constraints have been generalised to vcsps  @xcite .",
    "infinite domains is an interesting avenue of future research because simple temporal constraints are binary max - closed  @xcite .    in this paper",
    ", we only focused on classes of csp instances with totally ordered domains ( but defined by partially - ordered patterns ) .",
    "however , the framework of forbidden patterns captures language - based csps with partially - ordered domains , such as csps with a semi - lattice polymorphism . in the future",
    ", we plan to investigate classes of csp instances with partially - ordered domains .",
    "d.  a. cohen , m.  c. cooper , g.  escamocher , and s.  ivn .",
    "variable and value elimination in binary constraint satisfaction via forbidden patterns .",
    "_ journal of computer and system sciences _ , 810 ( 7):0 11271143 , 2015 .                        t.  feder and m.  y. vardi . the computational structure of monotone monadic snp and constraint satisfaction : a study through datalog and group theory . _ siam journal on computing _ , 280 ( 1):0 57104 , 1998 ."
  ],
  "abstract_text": [
    "<S> characterising tractable fragments of the constraint satisfaction problem ( csp ) is an important challenge in theoretical computer science and artificial intelligence . </S>",
    "<S> forbidding patterns ( generic sub - instances ) provides a means of defining csp fragments which are neither exclusively language - based nor exclusively structure - based . </S>",
    "<S> it is known that the class of binary csp instances in which the broken - triangle pattern ( btp ) does not occur , a class which includes all tree - structured instances , are decided by arc consistency ( ac ) , a ubiquitous reduction operation in constraint solvers . we provide a characterisation of simple partially - ordered forbidden patterns which have this ac - solvability property . </S>",
    "<S> it turns out that btp is just one of five such ac - solvable patterns . </S>",
    "<S> the four other patterns allow us to exhibit new tractable classes .    </S>",
    "<S> [ defn]definition [ exmp]example        supported by epsrc grant ep / l021226/1 ]    supported by epsrc grant ep / l021226/1 and a royal society university research fellowship . </S>",
    "<S> part of this work was done while the second author was visiting the simons institute for the theory of computing at uc berkeley ]    ( 20,40 )    ( 20,40)(0,0 ) ( 10,20)(18,38 ) ( 10,10)(0,0)@xmath0 ( 10,30)(0,0)@xmath0    ( 20,40 )    ( 20,40)(0,0 ) ( 10,20)(18,28 ) ( 10,20)(0,0)@xmath0 </S>"
  ]
}