{
  "article_text": [
    "in 1966 , forney introduced the concept of concatenated codes @xcite .",
    "it was generalized in 1976 by blokh and zyablov to generalized concatenated ( gc ) codes @xcite .",
    "the gc approach allows to design powerful codes with large block lengths using short , and thus easily decodable , component codes . the designed distance and the performance of gc codes",
    "can be easily estimated theoretically .",
    "this allows to design gc codes for applications like e.g. optical lines , where block error rates in the order of @xmath2 are required , a region , where simulations are not feasible .",
    "gc codes can be decoded up to half their minimum distance using a sufficiently large number of decoding attempts for each outer code in the blokh ",
    "zyablov  dumer algorithm ( bzda ) @xcite ,",
    "see also dumer @xcite .",
    "we should also mention papers by sorger @xcite , and ktter @xcite who suggested interesting modifications of a bmd decoder in such a way that multi - attempt decoding of the outer code can be made  in one step  .",
    "nielsen suggested in @xcite to use the guruswami ",
    "sudan list decoding algorithm @xcite for decoding the outer codes and has shown that in this case also one decoding attempt is sufficient to allow decoding up to half the minimum distance of the gc code . in this paper",
    ", we employ another idea , which allows to decrease the number of outer decodings , but also to skip many decodings of the inner code .",
    "this idea is based on interleaved reed  solomon ( irs ) codes @xcite .",
    "other aspects of using irs codes in concatenated codes were considered in @xcite .",
    "the rest of our paper is organized as follows : in section [ section : gcc ] we explain gc codes as well as the required notations and assumptions . section [ section : irs ] explains irs codes and where they appear within gc codes .",
    "section [ section : bzouterrs ] gives an overview of the bzda as introduced in @xcite .",
    "a generalization of this is given in section [ section : bzouterirs ] , leading to a new algorithm which maintains the error - correcting performance of gc codes while reducing the number of outer decodings and skipping many inner decodings . in section [ section :",
    "example ] we illustrate our results by means of some examples .",
    "encoding of a gc code @xmath3 of order @xmath4 is as follows , where we restrict ourselves to outer rs codes @xmath5 , @xmath6 , over the binary extension field @xmath7 and an inner binary block code @xmath8 with dimension @xmath9 .",
    "the first step is outer encoding . for this",
    "we take @xmath4 codewords @xmath10 of the outer codes @xmath11 and put them as rows into an @xmath12 matrix @xmath13 over @xmath7 .",
    "the second step is inner encoding , where the binary counterparts of the columns @xmath14 of @xmath15 are encoded by the inner code to obtain code word columns @xmath16 .",
    "the result of this procedure is a binary @xmath17 matrix @xmath18 , which in turn is a code word of the gc code @xmath19 .",
    "the inner code @xmath20 has the following nested structure : the code words are obtained by encoding an arbitrary binary information vector @xmath21 .",
    "if we fix @xmath22 groups of @xmath23 information bits starting from @xmath24 and encode , we obtain a subcode @xmath25 with distance @xmath26 .",
    "note that @xmath27 due to the special choice of encoders for the subcodes @xmath28 .",
    "obviously , @xmath29",
    ". the minimum distance of the gc code @xmath19 is then lower bounded by its designed distance @xmath30 the channel adds a binary error matrix @xmath31 of weight @xmath32 to the transmitted concatenated code matrix @xmath33 , resulting in a received matrix @xmath34 at the receiver .    as output of gc decoding with the bzda we want to obtain a matrix @xmath35 over @xmath7 , which is an estimate of the matrix @xmath15 .",
    "decoding consists of @xmath4 iterations , where iteration @xmath36 is as follows :    a.   decoding of all columns @xmath37 , @xmath38 , of the received matrix @xmath39 by bmd decoders for the nested subcodes @xmath40 , correcting up to @xmath41 errors and altogether yielding a new estimate @xmath42 for the @xmath43-th row of @xmath44 .",
    "b.   execution of @xmath45 attempts of decoding @xmath42 with @xmath46 and a different number of erased symbols in each attempt , which yields a candidate list of at most size @xmath45 . finally , the  best ",
    "candidate @xmath47 from this list has to be selected using some criterion and inserted into @xmath44 .    note that because of this recurrent structure it is sufficient to consider the bzda only for ordinary concatenated codes , as decoding of gc codes simply means repeated application of this special case for the sequence @xmath48 of the nested inner subcodes , @xmath14 , and the corresponding outer codes @xcite .",
    "the details of the bzda for ordinary concatenated codes are described in section [ section : bzouterrs ] . in @xcite",
    "it is shown that if @xmath49 for even @xmath50 , the bzda can decode up to @xmath51 errors in the @xmath43-th iteration and thus by ( [ eqn : designeddistance ] ) also up to @xmath52 errors in a gc code word .",
    "observe that the matrix @xmath15 is just an interleaved set of @xmath4 different rs codes , hence an irs code .",
    "for irs codes an efficient decoding algorithm was suggested in @xcite , which has only @xmath4 times the complexity of the berlekamp ",
    "massey algorithm for decoding one single rs code .",
    "the algorithm allows to correct at most @xmath53 erroneous columns of @xmath15 , where @xmath54 is the average minimum distance of the interleaved set of rs codes and @xmath55 the irs decoding algorithm from @xcite yields a decoding failure with some probability .",
    "however , this probability can be made small and is neglected here .",
    "if the complete matrix @xmath15 does not satisfy ( [ eqn : l1 ] ) , we can split it into a number of submatrices with the same length as @xmath15 , which all fulfill ( [ eqn : l1 ] ) and thus can be decoded by the irs decoding algorithm from @xcite .",
    "assume that @xmath56 is such a submatrix of @xmath15 and forms an irs code with average minimum distance @xmath57 , that satisfies both constraint ( [ eqn : l1 ] ) and @xmath58 .",
    "the main idea of applying the irs decoding algorithm from @xcite to gc codes is as follows : we can replace @xmath59 iterations @xmath60 of the bzda by the following single iteration :    a.   decoding of all columns @xmath37 , @xmath38 , of the received matrix @xmath39 by bmd decoders for the subcodes @xmath61 , correcting up to @xmath62 errors and yielding an estimate @xmath63 for the submatrix @xmath64 .",
    "b.   execution of @xmath65 attempts of irs decoding @xmath63 with a different number of erased columns in each attempt , which yields a candidate list of at most size @xmath65 .",
    "finally , the  best ",
    "candidate @xmath66 from this list has to be selected using some criterion and inserted into @xmath44 .    as a result of this method , we skipped @xmath67 inner decodings and",
    "we will show that the number of required decoding attempts for the outer code to guarantee decoding up to @xmath68 channel errors is much smaller than in the original bzda , which in practice means @xmath69 .",
    "eventually , our modified algorithm corrects up to half the minimum distance of the gc code .",
    "in this section , we consider decoding of a _ simple _ concatenated code @xmath19 , which consists of the outer rs code @xmath70 and the inner binary code @xmath20 .",
    "this corresponds to the iteration of the refined bzda from @xcite for a gc code where it holds w.l.o.g @xmath71 , @xmath72 and @xmath73 .",
    "first ( step ( i ) of the bzda ) , we decode the columns @xmath37 of the received matrix @xmath39 by a bmd decoder for @xmath20 , correcting up to @xmath74 errors and yielding code word estimates @xmath75 or decoding failures .",
    "decoding of the outer code @xmath70 is performed with respect to the ordered set of thresholds @xmath76 with @xmath77 . for each decoding attempt",
    "@xmath78 the decoding results of the inner decoder depend on the threshold @xmath79 in the following manner : the symbols @xmath80 delivered to the outer decoder at position @xmath81 are @xmath82 where @xmath37 is the received word in the @xmath81-th column , @xmath75 is the result of inner decoding , @xmath83 maps code words of @xmath20 to the corresponding @xmath84-ary information symbols , and @xmath85 is the symbol for an erasure . as result from outer decoding @xmath86 we obtain the outer code word estimate @xmath87 . from ( [ eqn : rtilde ] ) follows that thresholds with equal integers parts yield equal decoding attempts , so the number of @xmath88 actual attempts may be smaller than the number @xmath89 of thresholds , i.e. @xmath90 .    the numbers of decoding errors and erasures occurring at decoding @xmath91 are denoted by @xmath92 and @xmath93 , respectively .",
    "the outer rs code @xmath70 can successfully decode as long as @xmath94 , since we assume outer bmd decoding in this section . for a fixed number @xmath89 of thresholds , the following theorem fixes the optimum values of the thresholds such that the decoding bound of the bzda is maximized .",
    "[ theorem : thresholdsind ] for a concatenated code with outer bmd - decoded rs code and inner bmd - decoded code @xmath8 , the set of thresholds @xmath76 which maximizes the decoding bound is determined by @xmath95 @xmath96 .",
    "if the thresholds are chosen according to ( [ eqn : thresholdsind ] ) , the decoding bound is given by the following theorem in a sense that the transmitted code word is among the elements of the result list @xmath97 .",
    "[ theorem : boundind ] for a concatenated code with outer bmd - decoded rs code @xmath98 and inner bmd - decoded code @xmath8 , the decoding bound is @xmath99    in figure [ fig : outer_irs_even ] , the decoding bound ( [ eqn : boundind ] ) is plotted with circles versus the number of thresholds @xmath89 for an example with @xmath100 , @xmath101 .",
    "it can clearly be seen that the bound reaches @xmath102 , i.e. half the minimum distance of the concatenated code with increasing number of thresholds .",
    "the bound obviously only depends on the greatest threshold @xmath103 .",
    "if we hypothesize that the number of thresholds tends to infinity , we can see that for the greatest threshold @xmath104 but as @xmath105 , we know that the greatest possible integer threshold @xmath106 is @xmath107 if @xmath50 is even , and @xmath108 if @xmath50 is odd .",
    "this allows to state the following theorem , which confirms our observation from figure [ fig : outer_irs_even ] .",
    "[ theorem : maxboundind ] if the number of thresholds @xmath89 tends to infinity , the decoding bound of the bzda for a concatenated code @xmath19 with outer bmd - decoded rs code @xmath98 and inner bmd - decoded code @xmath8 is @xmath109    the decoding bound ( [ eqn : boundind ] ) is non - decreasing in @xmath89 , hence it assumes its maximum at @xmath110 .",
    "consider two cases :    a.   @xmath50 is even , thus the greatest possible integer threshold is @xmath107 and @xmath111 .",
    "b.   @xmath50 is odd , hence the greatest possible integer threshold is @xmath108 and @xmath112 .    in the following ,",
    "we restrict ourselves to binary error matrices @xmath31 meeting ( [ eqn : maxboundind ] ) .    to obtain decoding bound ( [ eqn : maxboundind ] ) , the greatest possible integer threshold needs to be among the threshold set . for even @xmath50",
    "this greatest integer threshold is @xmath113 , which is strictly smaller than the limit @xmath114 . by the following lemma",
    "it can be reached already for a rather small value of @xmath89 .",
    "[ lemma : indeven ] for a concatenated code with inner bmd - decoded code @xmath8 and outer bmd - decoded rs code @xmath70 the greatest possible integer threshold @xmath115 is reached if @xmath116 .",
    "solve @xmath117 for @xmath89 .",
    "we can thus obtain ( [ eqn : maxboundind ] ) with only @xmath118 thresholds according to ( [ eqn : thresholdsind ] ) if @xmath50 is even .",
    "if however @xmath50 is odd , the greatest possible integer threshold is @xmath119 , i.e. the limit @xmath114 itself .",
    "it can obviously only be reached for an infinte number of thresholds .",
    "but the number of integers below @xmath120 is @xmath108 , hence the number of actual decoding attempts is upper bounded by @xmath108 .",
    "it follows that even though in the @xmath50 odd case the number of required thresholds is infinite , only @xmath121 outer decoding attempts are sufficient to achieve decoding bound ( [ eqn : maxboundind ] ) .    up to now , we only know that the transmitted outer code word @xmath122 is _ somewhere _ within the result list @xmath123 of the bzda if ( [ eqn : maxboundind ] ) is fulfilled . the following lemma provides a means of exactly determining its position among the elements of @xmath123 .",
    "[ lemma : selection ] let @xmath124 with @xmath125 and @xmath126 .",
    "assume @xmath127 and that @xmath128 is a threshold with @xmath129 .",
    "then @xmath130 and @xmath131    the lemma guarantees that only the transmitted outer code word @xmath132 fulfills ( [ eqn : selection ] ) , i.e. that no further decoding attempts have to be executed as soon as ( [ eqn : selection ] ) is fulfilled for the smallest threshold index @xmath96 .",
    "then , we set @xmath133 and choose @xmath134 .",
    "now we consider the case where @xmath70 is an irs code , i.e. a row - wise arrangement of @xmath135 rs codes of equal length but potentially different dimensions , which are decoded collaboratively as described in section [ section : irs ] .",
    "this allows @xmath70 to correct a larger number of errors leading to a decoding success whilst @xmath136 , where @xmath137 .",
    "this means bounded distance ( bd ) decoding .",
    "our aim now is to derive formulae corresponding to ( [ eqn : thresholdsind ] ) and ( [ eqn : boundind ] ) for this specific case . in doing so",
    ", we generalize the approach for outer bmd decoding from @xcite .",
    "the procedure is as follows : let @xmath138 be the smallest number of channel errors for a given set of thresholds @xmath139 , such that all decoding attempts @xmath140 fail , i.e. such that @xmath141 we determine @xmath142 under the condition that ( [ eqn : errorforall ] ) is fulfilled .",
    "then , we find the set @xmath139 of thresholds which maximizes this minimum , i.e. the set of thresholds , which maximizes the decoding bound .",
    "this set is determined by the expression @xmath143    the detailed derivation is too involved to be presented here , so we confine ourselves to the results in form of the following theorems .    [",
    "theorem : thresholds ] for a concatenated code @xmath19 with outer collaboratively decoded irs code @xmath70 consisting of @xmath4 rs codes and inner bmd - decoded code @xmath8 , the set of thresholds @xmath76 which maximizes the decoding bound is defined by @xmath144 with @xmath145 @xmath140 , where @xmath89 is the number of thresholds and @xmath146 .",
    "[ theorem : boundcol ] for a concatenated code @xmath19 with outer collaboratively decoded irs code @xmath98 consisting of @xmath4 rs codes and @xmath89 thresholds chosen as in ( [ eqn : thresholdscol ] ) , the decoding bound is given by @xmath147    by theorem [ theorem : boundcol ] the decoding bound only depends on threshold @xmath103 , the greatest one among the ordered threshold set @xmath76 . hence to maximize the decoding bound ( [ eqn : boundcol ] ) we have to maximize @xmath103 . since the threshold location function ( [ eqn : thresholdscol ] )",
    "is non - decreasing , the greatest threshold occurs for @xmath110 , and is @xmath148 .",
    "the following theorem states the decoding bound for this greatest possible threshold .",
    "[ theorem : irshd ] let @xmath19 be a concatenated code with inner bmd - decoded code @xmath8 and outer irs code @xmath70 with @xmath149 . if the maximum possible integer threshold is among the threshold set , the decoding bound is given by @xmath150    inserting the the integer parts @xmath151 and @xmath152 , respectively , of the greatest possible thresholds into bound ( [ eqn : boundcol ] ) proves the statement .    for even @xmath50",
    ", the greatest possible integer threshold @xmath153 already is reached considering a finite number of thresholds , i.e. if @xmath154 .",
    "thus for even @xmath50 the finite threshold set @xmath155 is sufficient to obtain the maximum of ( [ eqn : boundcol ] ) .    if on the other hand @xmath50 is odd , the greatest possible integer threshold @xmath156 is @xmath114 itself , hence the number of required thresholds in fact is infinite .",
    "but since we know that decoding attempts corresponding to thresholds with equal integer parts coincide , we can skip all thresholds within the interval @xmath157 by the following lemma .",
    "[ lemma : neededthresholds ] for a concatenated code with inner bmd - decoded code @xmath8 and and outer irs code @xmath70 with @xmath4 collaboratively decoded rs codes @xmath158 is reached if @xmath159 .",
    "if @xmath160 , then the threshold location function ( [ eqn : thresholdscol ] ) becomes @xmath161 .",
    "but @xmath162 .    by lemma [ lemma : neededthresholds ]",
    "we know that all thresholds @xmath163 in the range @xmath164 have equal integer parts and therefore can be omitted .",
    "thus , instead of the infinite threshold set @xmath165 it is equivalent to consider the finite set @xmath166 with only @xmath167 elements .    we know",
    "that if we utilize the sets @xmath168 and @xmath169 of thresholds according to ( [ eqn : thresholdscol ] ) for even and odd inner minimum distance @xmath50 , respectively , we can decode up to half the minimum distance of the concatenated code @xmath19 .",
    "however , the integer parts not of all the thresholds among the sets are necessarily pairwise different . since decoding attempts in respect to thresholds with equal integer parts coincide , the number @xmath88 of actual decoding attempts which need to be executed to decode up to half the minimum distance of @xmath19 may be smaller than the number of thresholds .",
    "we can calculate it explicitly by @xmath170",
    "our results are subsumed using the following examples . we assume a concatenated code @xmath19 consisting of an inner code @xmath8 and an outer code @xmath98 consisting of @xmath4 rows containing code words of the rs code @xmath171 .    for _",
    "even _ inner minimum distance @xmath101 the decoding bounds ( [ eqn : boundind ] ) for independent outer decoding and ( [ eqn : boundcol ] ) for collaborative outer decoding , respectively , depending on the number @xmath89 of thresholds are shown in figure [ fig : outer_irs_even ] . according to lemma [ lemma : indeven ] , for independent outer decoding @xmath172 thresholds are sufficient to decode up to half the minimum distance of @xmath19 .",
    "if collaborative decoding of @xmath173 outer rs codes is applied , we can calculate the number of required thresholds by @xmath174 and get @xmath175 .",
    "both values are confirmed by the bounds in figure [ fig : outer_irs_even ] .",
    "if the rs codes are outer codes @xmath176 of a gc code as described in section [ section : gcc ] , which fulfill ( [ eqn : l1 ] ) , the saving in terms of operations is even greater .",
    "besides the @xmath177 saved outer decoding attempts , the number of inner decodings can then be cut down by @xmath178 .    note that decoding one irs code with @xmath4 interleaved rs codes with the algorithm from @xcite has the same complexity as decoding the @xmath4 rs codes independently .",
    "thus , our comparison of both constructions is fair in terms of complexity .",
    "figure [ fig : attempts ] shows the number of actual decoding attempts @xmath88 as well as the number @xmath180 of thresholds for some reasonable _ odd _ inner minimum distances @xmath50 .",
    "collaborative decoding of @xmath173 and @xmath181 outer rs codes is considered . for independent outer decoding",
    "as described in section [ section : bzouterrs ] , @xmath88 grows linearly with @xmath50 .",
    "it diminishes to at most @xmath182 already for an outer irs code with @xmath173 . for an outer irs code with @xmath181 already @xmath183 decoding attempts are sufficient to decode up to half the minimum distance of @xmath19 over the full range of all considered odd inner minimum distances @xmath184 $ ] .",
    "g.  schmidt , v.  r. sidorenko , and m.  bossert , `` interleaved reed ",
    "solomon codes in concatenated code designs , '' in _ proc .",
    "ieee itsoc inform .",
    "theory workshop _ , ( rotorua , new zealand ) , pp .  187191 , august 2005 .",
    "g.  schmidt , v.  r. sidorenko , and m.  bossert , `` collaborative decoding of interleaved reed  solomon codes and concatenated code designs . ''",
    "preprint , available online at arxiv , arxiv : cs.it/0610074 , 2006 ."
  ],
  "abstract_text": [
    "<S> generalized concatenated codes are a code construction consisting of a number of outer codes whose code symbols are protected by an inner code . as outer codes , we assume the most frequently used reed  solomon codes ; as inner code , we assume some linear block code which can be decoded up to half its minimum distance . decoding up to half the minimum distance of generalized concatenated codes </S>",
    "<S> is classically achieved by the blokh  zyablov  </S>",
    "<S> dumer algorithm , which iteratively decodes by first using the inner decoder to get an estimate of the outer code words and then using an outer error / erasure decoder with a varying number of erasures determined by a set of pre - calculated thresholds . in this paper , a modified version of the blokh  </S>",
    "<S> zyablov  </S>",
    "<S> dumer algorithm is proposed , which exploits the fact that a number of outer reed  </S>",
    "<S> solomon codes with average minimum distance @xmath0 can be grouped into one single interleaved reed  </S>",
    "<S> solomon code which can be decoded beyond @xmath1 . </S>",
    "<S> this allows to skip a number of decoding iterations on the one hand and to reduce the complexity of each decoding iteration significantly  while maintaining the decoding performance  on the other . </S>"
  ]
}