{
  "article_text": [
    "the spallation neutron source ( sns ) is a high intensity pulsed accelerator for neutron production . to commission and",
    "run the sns efficiently , high level physics application software for modeling , integrated operation and accelerator physics studies is required ; in particular , construction of an object - oriented , accelerator - hierarchy programming framework .",
    "java is chosen as the core programming language because it provides object - oriented scope and existing interfaces to the controls software ( _ e.g. _ java channel access ) and database information ( jdbc , xml ) .",
    "the sns physics application software environment includes the sns global database , a java - based software infrastructure ( xal ) , and existing lattice tools such as trace-3d and mad .",
    "the core part of this environment is the xal infrastructure , which includes links to the sns database , epics channel access signals , shared extensible markup language ( xml ) files among applications and external modeling tools , as well as built - in accelerator physics algorithms .",
    "the present plan for quick on - line modeling during the sns commissioning is to use trace-3d for the linac and mad for the ring .",
    "data synchronization at the epics level for the sns pulsed nature is also in progress , and will be included in the xal infrastructure later .",
    "the sns global database contains static information about beam line devices ( magnets , diagnostics , etc . ) , power supplies , magnet measurement , global coordinates , as well as other accelerator equipment .",
    "the table schemas , entities and relationships are described in @xcite .",
    "the basic accelerator hierarchy is constructed from the database information .",
    "for example information for constructing representative beamline sequences , their constituent lattice and diagnostic components , and the mapping of beamline components to their respective epics process variables ( pvs ) all comes from the global database .",
    "although it is possible to directly query the database from the java based xal framework , an intermediate xml file containing the accelerator hierarchy is created instead .",
    "the structure of the xml files is based on the xal class view .",
    "the global database to local xml file translation is a stand - alone program outside the xal , which obviates the need for each xal based applications to query the database for initialization .",
    "the xal infrastructure is a java class structure providing a programming interface with an accelerator hierarchy view .",
    "xal is a variant of ual 2.0@xcite , and detailed api information for the xal can be found on - line@xcite . a schematic diagram depicting the xal infrastructure relationship to other accelerator components is shown in fig .  [ xal_cs ] .",
    "the xal provides application programs with connections to the static data via xml files and the run - time data via java channel access .    the xal class hierarchy is shown in fig .  [ xal_cs ] .",
    "at the top of the xal class hierarchy is the sns accelerator .",
    "the accelerator is composed of different accelerator sequences , _",
    "e.g. _ medium energy beam transport ( mebt ) , drift tube linac ( dtl ) , ring .",
    "the sequences are composed of nodes , _",
    "e.g. _ quadrupoles , bpms , correctors .",
    "there is a built - in capability to include algorithms in xal , but initially we are using an external model ( trace-3d ) for the linac applications . regarding scripting possibilities , xal class objects directly with jython are being tested , without the need for interface code .",
    "all the run - time information for the applications will be obtained through epics channel access .",
    "the xal provides the connectivity to the epics channel access via the channel access ( ca ) classes as shown in fig .",
    "[ xal_cs ] .",
    "because the sns is a pulsed machine , for many applications the data correlation among pulses is vital .",
    "the ca classes provide both synchronized and non - synchronized methods for data taking .",
    "the data synchronization will be described in detail in section  [ sync ] .",
    "most of the existing accelerator modeling software packages are written in languages other than java . in order to run applications from java - based xal",
    ", the software packages must be compiled as shared libraries , then connected to the shared libraries via the java native interface ( jni ) .",
    "the file i / o is done through xml parsing provided by xal , for example , storing the calculated result in xml files .",
    "thus the information is portable , share - able , and can be accessed remotely .",
    "the jni calls also require arranging the running threads carefully because programs normally tend to execute its own threads before starting the non - java threads .",
    "data synchronization is an important feature for a pulsed accelerator ( 1 ms beam pulses at 60 hz ) .",
    "the sns real time data link will synchronize the clocks of all iocs across the accelerator at 60  hz rate , ensuring a good synchronization of the time - stamps being applied to pvs@xcite .",
    "however , it may be difficult for high level applications to reliably gather sets of data from across the accelerator , all from the same pulse . to facilitate this ,",
    "a data - silo data time correlator is being written .",
    "the data - silo method is shown schematically in fig .",
    "[ silo ] . for a requested pv set",
    ", the correlator returns the most recent collection of time - correlated data .",
    "the behavior of the datasilo class is configurable by three parameters : the maximum time to wait since start of request , maximum width of the time bin , and the maximum number of channels allowed to be missing from the synchronized data set .",
    "the correlator is implemented as the c++ datasilo class which allows the application s programmer to :    * add and remove epics process variables from the datasilo set ; * dynamically define the maximum wait time , maximum bin number , and maximum missing bins allowed ; * obtain the most recent synchronized set ( no waiting ) ; wait up to the maximum time to obtain a synchronized set ( blocking ) * choose the earliest , latest , or mean time stamp from a synchronized set .",
    "the sns global database is close to the end of design phase and has been tested with sns mebt data .",
    "the xal infrastructure is constructed and tested with a modeling tool , trace-3d .",
    "the channel access part of the xal will be tested with simulated ioc signals .",
    "scripting tools such as matlab and python will be used in the mebt commissioning this spring .",
    "the authors would like to thank the sns controls and diagnostics groups for kindly providing us all the epics , database and other support .",
    "we would also like to thank dr .",
    "n. malitsky for his help on the early xal development .      .",
    "n.malitsky , _ et al .",
    "_ , `` a prototype of the ual 2.0 application toolkit '' , icalepcs 2001 , san jose , ca , usa , november , 2001 , physics/0111096 . .",
    "b.oerter , _ et al .",
    "_ , `` sns timing system '' , icalepcs 2001 , san jose , ca , usa , november , 2001 , cs.ar/0111032 ."
  ],
  "abstract_text": [
    "<S> the architecture for spallation neutron source accelerator physics application programs is presented . </S>",
    "<S> these high level applications involve processing and managing information from the diagnostic instruments , the machine control system , models and static databases ; they will be used to investigate and control beam behavior . </S>",
    "<S> primary components include an sns global database and java - based application toolkit , called xal . </S>",
    "<S> a key element in the sns application programs is time synchronization of data used in these applications , due to the short pulse length ( 1 ms ) , pulsed ( 60 hz ) nature of the device . </S>",
    "<S> the data synchronization progress is also presented . </S>"
  ]
}