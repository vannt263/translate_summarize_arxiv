{
  "article_text": [
    "computational science is emerging as the third pillar of research and development in academia and in industry across all science and engineering disciplines .",
    "computational studies complement experimental and theoretical studies , and are at times the only feasible way to address research challenges , effective industrial design and engineering of various products and systems .    in the field of magnetism ,",
    "micromagnetic simulations have become well established and are often the only possible technique for the exploration of different magnetic phenomena .",
    "@xcite their use becomes more widespread and reliable as the micromagnetic models , simulation techniques , and the processing power of computers advance .",
    "computational science brings its own challenges : results based on computer simulation should be reproducible ,  @xcite ideally by the whole ( computational micromagnetic ) community but at the very least by the authors of the publication .",
    "this requires , amongst other things , tracking of all input parameters for a simulation , and all post - processing steps , often for very many simulation runs .",
    "@xcite    in this work , we provide an overview of different approaches to configuring simulations in sec .",
    "[ sec : simulation - user - interfaces ] : code re - compilation , the use of configuration scripts , graphical user interfaces , as well as the use of domain specific languages to specify the computational problem .",
    "we discuss advantages and disadvantages with particular focus on the reproducibility associated with these approaches . in sec .",
    "[ sec : python - interface ] , we use the most flexible approach identified and describe the design of a python  @xcite interface for the widely used object oriented micromagnetic framework ( oommf ) simulation tool .",
    "@xcite finally , we illustrate the use of this interface by solving the micromagnetic standard problem  @xcite 4 in sec .",
    "[ sec : example ] , before closing with a summary .",
    "micromagnetic simulations , as with simulations in many other fields , need to simulate the behaviour of particular materials with their specific material constants , under particular circumstances ( for example with an applied field ) and specific geometries .",
    "we refer to this parameter set as the _ simulation input parameters_. despite changing input parameters , the computational framework ( here the micromagnetic model ) stays roughly the same for all possible parameter sets ( although sometimes extra terms need to be added ) .",
    "the challenges for the researcher using simulations include : ( i ) communicating the input parameters to the simulation , and ( ii ) keeping track of the input parameters that were used for particular simulation results ( for publication , and to be able to repeat the exact simulation in the future ) .",
    "we describe 4 approaches that have emerged over time .",
    "[ [ approach-1-code - re - compilation . ] ] approach 1 : code re - compilation .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the first approach for providing input parameters to a computer simulation is to hard - code the simulation parameters in the source code of the simulation , and re - compile the simulation tool source code for each set of input parameters . while easy to implement , it makes it difficult to store the input parameters in an efficient way ( unless the full copy of the source code is archived for every simulation run ) .",
    "[ [ approach-2-configuration - files . ] ] approach 2 : configuration files .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the second approach is the writing of the input parameters to a configuration file , which is then read by the simulation tool at run time .",
    "there are several advantages of this over the re - compilation approach .",
    "first , multiple simulations can be run using the same simulation executable by providing multiple configuration files , each describing material properties and geometry for one simulation . secondly",
    ", if simulation configuration files as well as the simulation software version are kept , all simulations can be repeated at a later stage .",
    "this is important for reproducibility of the results ; a topic receiving increasing ( and well deserved ) attention in computational science .",
    "@xcite a disadvantage of the configuration - file based simulation configuration approach is that the simulation software developers may have to define a syntax for the configuration files and implement a parser for it .",
    "depending on the complexity of the syntax , the number of different operations the simulation tool can be configured to perform is limited .",
    "experience shows that this syntax ( and parser ) is often extended as the simulation tool s capabilities grow and demand more flexibility .",
    "magpar  @xcite is a micromagnetic simulation tool using this approach .",
    "oommf  @xcite also uses configuration files , but is using an existing language and parser ( tcl ) .    [",
    "[ approach-3-graphical - user - interface . ] ] approach 3 : graphical user interface .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    simulation tools for which input parameters are set through graphical user interfaces are often perceived as particularly user friendly . if the completed configuration can be saved to a file and reloaded later , this is similar to the configuration file based approaches . where the configuration can not be saved , it is difficult to reliably record all configuration options as this would have to be done manually , and tedious to re - execute a particular simulation as all input parameters need to be entered again manually .",
    "[ [ approach-4-domain - specific - language - dsl - embedded - in - general - purpose - language .",
    "] ] approach 4 : domain specific language ( dsl ) embedded in general purpose language .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    it is also possible to embed all input parameter definition and high - level simulation commands in an executable file which fully defines the simulation , using the syntax of an existing programming language .",
    "the simulation is carried out by executing this file with the appropriate interpreter or compiler .",
    "the one file contains all the information that needs to be preserved for reproducibility .",
    "examples of embedding micromagnetic simulation tools into existing programming language include nmag ,  @xcite micromagnum ,  @xcite magnum.fe ,  @xcite and fidimag .",
    "@xcite an important advantages of this method over the configuration file based approach is the increased flexibility : as the simulation script contains a sequence of normal commands in a given programming language , these can be used and combined as required to , for example , create complicated spatial field distributions , fetch data from a file or a connected experimental kit , and do parameter sweeps automatically _ within the same file_. it is possible to carry out postprocessing within the same simulation file ; thus keeping input data , simulation process and extraction of results closely together ( supporting tracking of the provenance  @xcite ) .",
    "if the chosen programming language is an interpreted one ( such as python  @xcite ) , this embedded approach may also allow _ interactive execution _ of simulations ( sometimes referred to as `` computational steering '' ) , interactive analysis , and visualisation ( for instance , in jupyter notebooks  @xcite ) .",
    "eventually , by using an existing language , both code developers and users can benefit from using existing and well tested modules for the selected programming language .",
    "a disadvantage of this approach is that it requires more planning on the coding side to provide the described framework that can be used flexibly .",
    "[ [ discussion . ] ] discussion .",
    "+ + + + + + + + + + +    it is known from software engineering that there are significant advantages of separating ( configuration ) metadata from ( simulation ) software code to obtain programs that are more flexible and robust , easier to maintain and test , and more versatile in their use.@xcite in our context , this separation of metadata from the simulation code is given in the configuration - file approach and in the embedded language approach ; the latter providing more flexibility in driving the simulation and integrating other steps of the computational work flow .",
    "[ [ introduction . ] ] introduction .",
    "+ + + + + + + + + + + + +    in what follows , we describe a design for a domain specific language ( dsl ) for micromagnetic simulations that is embedded in the python language .",
    "this allows scientists from the domain of micromagnetics to express their simulation requirements using this language , and the language is valid python .",
    "we show an example in sec .",
    "[ sec : example ] .",
    "we have implemented a tool  @xcite that can understand this domain specific language and carry out the required simulation using oommf .",
    "this allows to express the micromagnetic simulation requirements in python and to postprocess and analyse data with great flexibility in python , while the computation is done by oommf .",
    "[ [ choice - of - python - to - embed - the - micromagnetic - specification - language . ] ] choice of python to embed the micromagnetic specification language .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    here we explain the choice of python as the implementation language for the interface . python  @xcite has been gaining popularity in computational science since soon after its inception in 1991 .",
    "python has been identified as a language that is easy to learn  @xcite by computational scientists and engineers .",
    "the value of python for computational science is its flexibility and readability  both attributes that reduce the time required to express algorithms ( including post - processing and plotting instructions ) and debugging them .",
    "while python code ",
    "if used natively and naively  can be orders of magnitude slower than c or fortran code , it is possible to develop and drive high performance computing projects in python.@xcite finally , python has a rich variety of high quality and well tested modules providing algorithms for performing common operations in computational science and engineering , such as scipy ,  @xcite numpy ,  @xcite pandas ,  @xcite matplotlib ,  @xcite that we use in this work .    [ [ the - choice - of - oommf - as - the - computational - backend . ] ] the choice of oommf as the computational backend .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the object oriented micromagnetic framework ( oommf )  @xcite developed at the information technology laboratory at the national institute of standards and technology by michael j. donahue and donald g. porter is widely used .",
    "its discretisation scheme is based on the finite difference method .",
    "the computational core is written in c++ , and combined with tcl / tk for high level interfaces and graphical user interfaces ; combining tools in a clever way and using state - of - the art technology at the time of oommf s inception .",
    "oommf uses predefined simulation modes ( for instance , hysteresis or dynamics ) , and does not allow the user to carry out micromagnetic operations in an arbitrary order .",
    "oommf s configuration files use the tcl syntax , and thus allow a convenient way to compute spatially distributed fields from equations within that configuration file .",
    "however , oommf is not embedded into an existing programming language which means , for example , that no single configuration file can carry out a parameter sweep , or host multiple simulation objects , and any post - processing and visualisation must be carried out separately .",
    "we believe that oommf s computational capabilities are highly valued by the community , and it is likely to be the most widely used micromagnetic simulation code .    [ [ low - level - oommf - interface - implementation - choice . ] ] low level oommf interface implementation choice .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    here , we describe how the implementation communicates with oommf .",
    "this is transparent to the scientists using the specification language and targeting a more technical audience of simulation tool developers .",
    "the core computational routines of oommf are implemented in c++ but important higher level functionality is written in tcl , including platform specific installation .",
    "we have researched and considered a variety of technical solutions for interfacing tcl and c++ code with python , including handcoding an interface , using swig ,  @xcite boost ,  @xcite and cython .",
    "@xcite eventually , we have opted for communication with oommf via ` mif ` configuration and output data files .",
    "the main advantage of this approach is the robustness .",
    "for example , we do not need to adopt this interface code depending on the platform ( operating system and compiler ) on which the oommf code was compiled .",
    "we can deploy the python interface code on a system where there is no c++ compiler ( but only the oommf executable ) .",
    "furthermore , the coupling between the tool and the oommf executable is relatively loose ( the oommf implementation internals can change without affecting the python interface ) and transparent ( developers and users can inspect ` mif ` files for debugging purposes if required ) .",
    "a disadvantage of this approach is that there are situations in which cpu cycles are needed that could have been avoided through a more tightly coupled interface that connects more directly to the oommf internals .",
    "[ [ micromagnetic - model - description - language .",
    "] ] micromagnetic model description language . + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    here , we summarise the design of the micromagnetic model language that is exposed to the user at the python level .",
    "there is not sufficient space to detail our design and reasoning in this article .",
    "the full code and growing documentation is available .",
    "@xcite in summary , we base the micromagnetic model around a `` system '' which is defined by providing : ( i ) mesh , ( ii ) hamiltonian @xmath0 , ( iii ) optional dynamics equation @xmath1 , and ( iv ) the current magnetisation configuration @xmath2 .",
    "the mesh contains the geometry and discretisation information , the hamiltonian captures the relevant interactions contributing to the energy , and for time dependent problems there is an equation of motion . to change the magnetisation , we use `` drivers '' ( following terminology introduced by the oommf team  @xcite ) . drivers",
    "`` drive '' the system in phase space by changing its magnetisation .",
    "this can be either energy minimisation ( e.g. conjugate gradient ) or time evolution through integration of the landau - lifshitz - gilbert ( llg)@xcite equation .",
    "we show the schematic representation of our micromagnetic model in fig .",
    "[ fig : micromagneticmodel ] .     a schematic representation of our micromagnetic model .",
    "the system object is completely defined with : ( i )  mesh , ( ii )  hamiltonian @xmath0 , ( iii ) dynamics equation @xmath1 , and ( iv ) magnetisation configuration @xmath2 .",
    "the driver is `` driving '' ( moving ) the system through phase space by changing its magnetisation from @xmath3 to @xmath4 . ]    based on this micromagnetic model , we have implemented the `` oommf calculator '' ( ` oommfc ` ) which can carry out the required micromagnetic computations .",
    "when required , the oommf calculator writes a mif file , calls oommf to execute it , extracts the required information from the output files , and makes the results available within the python environment .",
    "in order to illustrate the use of the python interface for oommf , we solve standard problem  @xcite 4 by computing the magnetisation evolution in the thin film with @xmath5 thickness of length @xmath6 and width @xmath7 . the material is permalloy with magnetisation saturation @xmath8 and exchange energy constant @xmath9 .    as the first step , we need to import the python module ` oommfc ` ( the name standing for oommf calculator ) which provides the commands for defining the micromagnetic system and running oommf simulations , as well as the ` discretisedfield ` module that we use for defining the finite difference mesh and fields .    ....",
    "import oommfc as oc import discretisedfield as df ....    in our micromagnetic model , a system is defined completely by providing its mesh , hamiltonian , dynamics equation , and magnetisation configuration .",
    "we specify the geometry through coordinates of two points between which the cuboidal domain spans and the size of a discretisation cell ( @xmath10 ) .    ....",
    "l , d , th = 500e-9 , 125e-9 , 3e-9    # ( m ) cellsize = ( 2.5e-9 , 2.5e-9 , 3e-9 )   # ( m ) mesh = df.mesh((0 , 0 , 0 ) , ( l , d , th ) , cellsize ) ....    we create a system object and provide a mesh .",
    "the optional ` name ` , here ` stdprob4 ` , is used to name output files containing computed data .",
    ".... system = oc.system(name=\"stdprob4 \" ) system.mesh = mesh ....    according to the standard problem 4 specification , the system s hamiltonian contains ferromagnetic exchange and demagnetisation energy terms @xmath11}_\\texttt{exchange(a ) } + \\underbrace{w_\\text{d}}_\\texttt{demag()},\\ ] ] where @xmath12 , @xmath13 , and @xmath14 are cartesian coordinates of unit magnetisation vector @xmath15 .",
    "we provide this hamiltonian to the system object .    ....",
    "a = 1.3e-11   # ( j / m ) system.hamiltonian = oc.exchange(a ) + oc.demag ( ) ....    next , we define the dynamics of the system , which is governed by the landau - lifshitz and gilbert  @xcite equation which consists of two ( precession and damping ) terms @xmath16 where @xmath17 is the effective field computed from the system s hamiltonian .",
    "we specify the equation of motion :    .... gamma = 2.211e5   # ( m / as ) alpha = 0.02 system.dynamics = oc.precession(gamma ) + \\",
    "oc.damping(alpha ) ....    in order to complete the definition of our micromagnetic model , we specify the initial magnetisation configuration @xmath2 , which is uniform in direction @xmath18 , normalised to the value of @xmath19 .",
    ".... ms = 8e5   # ( a / m ) system.m = df.field(mesh , value=(1 , 0.25 , 0.1 ) ,                        normalisedto = ms ) ....    in the first stage of standard problem 4 , we need to relax the system , and we use an energy minimisation driver .",
    "first we create the ` mindriver ` object and then pass the system object to the ` drive ` method .",
    ".... md = oc.mindriver ( ) md.drive(system )   # updates system.m in - place ....    after having called the minimisation driver , the system object now contains the ( equilibrium ) magnetisation configuration for which the system s energy is minimised .",
    "so far , our micromagnetic system was at zero external magnetic field . in the second stage",
    "we need to add the external magnetic field @xmath20 .",
    "therefore , we add the zeeman energy density term @xmath21 to the system s hamiltonian , where @xmath22 , with @xmath23 being the magnetic constant .",
    "we carry on using the same micromagnetic system as used in the relaxation step , but modify it by adding the zeeman term to its hamiltonian .",
    "nothing else changes , and in particular the magnetisation @xmath2 is still the same as after the relaxation stage .    ....",
    "h = ( -24.6/oc.mu0 , 4.3/oc.mu0 , 0 ) system.hamiltonian + = oc.zeeman(h ) ....    now , we drive the system using a ` timedriver ` for @xmath24 and instruct the system to remember its magnetisation evolution at 200 points during the nanosecond .",
    ".... td = oc.timedriver ( ) td.drive(system , t=1e-9 , n=200 ) ....    finally , we can plot and save the time evolution of the average @xmath25 component of magnetisation as shown in fig .",
    "[ fig : stdprob4 ] .",
    ".... myplot = system.dt.plot(\"t \" , \" my \" ) myplot.figure.savefig(\"stdprob4-t-my.pdf \" ) ....     the average @xmath25 component of magnetisation time evolution for the first @xmath24 computed with oommf simulation tool via our python interface . ]",
    "we summarise and discuss approaches to simulation user interface design with computational micromagnetics as a case study .",
    "we argue that embedding both the high level simulation commands and input parameters as a domain specific language in an existing programming language is the approach with most benefits .",
    "consequently , we implement such an interface that allows to drive oommf through the python programming language , and make it available as open source.@xcite we illustrated its use by solving the micromagnetic standard problem  4 .",
    "we hope this interface can improve the micromagnetic simulation workflows , supporting more reproducible and effective computational science .",
    "the design of the python interface for oommf is a prototype for a generic ( python - based ) specification language for micromagnetic simulation problems , which in the future can be extended to use other computational backends in addition to oommf .",
    "this work was financially supported by the opendreamkit ",
    "horizon 2020 european research infrastructure project ( 676541 ) and by the epsrc s centre for doctoral training in next generation computational modelling grant ep / l015382/1 .",
    "27ifxundefined [ 1 ] ifx#1 ifnum [ 1 ] # 1firstoftwo secondoftwo ifx [ 1 ] # 1firstoftwo secondoftwo `` `` # 1''''@noop [ 0]secondoftwosanitize@url [ 0 ]  + 12$12  & 12#1212_12%12@startlink[1]@endlink[0]@bib@innerbibempty link:\\doibase 10.1063/1.3126702 [ * * ,   ( ) ] link:\\doibase 10.1109/tmag.2012.2206820 [ * * ,   ( ) ] link:\\doibase 10.1016/j.jmmm.2016.08.009 [ * * ,   ( ) ] link:\\doibase 10.1038/533452a [ * * ,   ( ) ] link:\\doibase    10.1126/science.1213847 [ * * ,   ( ) ] link:\\doibase 10.1109/mcse.2008.79 [ * * , ( ) ] https://www.python.org/ @noop ( ) http://www.ctcms.nist.gov/{~}rdm/mumag.org.html [ `` ''  ] http://www.ctcms.nist.gov/~rdm/mumag.org.html link:\\doibase 10.1016/s0927 - 0256(03)00119 - 8 [ * * ,   ( ) ] link:\\doibase 10.1109/tmag.2007.893843 [ * * , ( ) ] http://nmag.soton.ac.uk http://micromagnum.informatik.uni-hamburg.de [ `` ''  ] http://micromagnum.informatik.uni-hamburg.de link:\\doibase 10.1016/j.jmmm.2013.05.051 [ * * ,   ( ) ]   http://computationalmodelling.github.io/fidimag [ `` , ''  ] ( ) https://github.com/computationalmodelling/fidimag link:\\doibase    10.1109/mcse.2007.53 [ * * ,   ( ) ] https://ipython.org/ @noop _ _ ,  ed .",
    "( , ) https://github.com/joommf/oommfc [ `` '' ] https://github.com/joommf/oommfc link:\\doibase 10.1007/b98005 [ _ _ ] ,  edited by  , , ,  and  ,  , vol .",
    "( ,  ,  )  pp .",
    "@noop _ _ ,  ed .",
    "( ,  ) http://www.scipy.org/ [ `` ''  ] https://www.scipy.org link:\\doibase    10.1109/mcse.2011.37 [ * * ,   ( ) ] http://pandas.pydata.org [ `` '' ] ( ) https://pandas.pydata.org link:\\doibase 10.1109/mcse.2007.55 [ * * ,   ( ) ] in @noop _ _  ( )  p.   http://www.swig.org http://www.boost.org/doc/libs/1_61_0/libs/python/doc/html/article.html [ `` '' ] ( ) https://www.boost.org link:\\doibase    10.1109/mcse.2010.118 [ * * ,   ( ) ] link:\\doibase 10.1109/tmag.2004.836740 [ * * ,   ( ) ]"
  ],
  "abstract_text": [
    "<S> computer simulations are used widely across the engineering and science disciplines , including in the research and development of magnetic devices using computational micromagnetics . in this work , </S>",
    "<S> we identify and review different approaches to configuring simulation runs : ( i ) the re - compilation of source code , ( ii ) the use of configuration files , ( iii ) the graphical user interface , and ( iv ) embedding the simulation specification in an existing programming language to express the computational problem . </S>",
    "<S> we identify the advantages and disadvantages of different approaches and discuss their implications on effectiveness and reproducibility of computational studies and results . </S>",
    "<S> following on from this , we design and describe a domain specific language for micromagnetics that is embedded in the python language , and allows users to define the micromagnetic simulations they want to carry out in a flexible way . we have implemented this micromagnetic simulation description language together with a computational backend that executes the simulation task using the object oriented micromagnetic framework ( oommf ) . </S>",
    "<S> we illustrate the use of this python interface for oommf by solving the micromagnetic standard problem 4 . </S>",
    "<S> all the code is publicly available and is open source . </S>"
  ]
}