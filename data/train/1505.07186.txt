{
  "article_text": [
    "a 2-color coloring of a complete graph is a ramsey ( k , j ) coloring if it contains no monochromatic 0-color cliques of order k and no monochromatic 1-color cliques of order j. 2-color ramsey number r(k , j ) is defined as the smallest number n for which no ( k , j ) colorings of order n exist .",
    "( therefore , to establish a lower bound of @xmath0 , one can exhibit a ( k , j ) coloring of a graph of order x-1 . )    for the purposes of this article , let s define a `` distance 2-color coloring '' of a complete n - graph , with vertices labeled with numbers 1 to n ( henceforth , `` n - coloring '' ) , as an assignment of a color ( represented as a bit 0 or 1 ) c(a , b ) to each link in the graph in such a way that c(a , b)=c(a+k , b+k ) for any @xmath1 .",
    "it may be conveniently represented by a computer as a bit mask with n-1 bits , with each bit corresponding to colors of link ( 1,2 ) , ( 1,3 ) , ...",
    "( 1,n ) .",
    "distance colorings are interesting because they include cyclic colorings as a subset ( a cyclic , or circulant , coloring is a coloring that is invariant under the rotation of vertex labels ) , and cyclic colorings represent many largest known ramsey graphs : for example , both the largest r(4,4 ) graph and the largest known r(6,6 ) graph are cyclic .",
    "( it s not hard to see that a distance coloring is a cyclic coloring iff its bit mask is symmetric : @xmath2 for @xmath3 . )",
    "however , cyclic colorings are difficult to enumerate directly .",
    "a convenient property of distance colorings is that any m - subset of the first m vertices of a n - coloring is itself a distance coloring , and , conversely , adding vertices to the end of a distance coloring , with proper assignments of newly created links , creates new distance colorings .",
    "this permits us to `` grow '' colorings , starting with a short coloring and recursively enumerating its possible extensions . in a search for large ( k , j ) graphs",
    ", we d skip colorings with observed complete k / j - cliques , thus having to analyze fewer than @xmath4 colorings at each n.    algorithms described in this paper fall into two main categories . for lower ( k , j ) we can do full enumeration and to find all ramsey cyclic and distance colorings . with these algorithms and on present - day computer hardware , this is feasible up to r(3,21 ) , r(4,13 ) , r(5,8 ) and r(6,7 ) . for higher ( k , j ) ,",
    "two complementary methods are discussed which permit us to locate many if not all cyclic colorings in reasonable amounts of time ( though without making any guarantees that resulting lists are complete . )",
    "it s convenient to divide the search space into parts corresponding to `` signatures '' .",
    "an @xmath5-signature is a fully colored distance graph on @xmath5 vertices ( represented as a s-1 bit mask . ) for example , there are @xmath6 35-signatures ( @xmath7 if we re working with a diagonal ramsey number . ) any distance coloring with more than 35 verticles is a descendant of one of them .",
    "to enumerate graphs , depth - first search is optimal , since it is generally faster than breadth - first and its memory footprint is low , allowing us to keep all necessary lists of cliques in system memory and minimize copying . at each step of the process , we color a link , review the graph for newly created cliques ( appendix a ) , continue if no problems were detected ( no complete color-0 k - cliques or color-1 j - cliques ) , try the next color or backtrack otherwise .    to improve performance of the search",
    ", we define a parameter @xmath8 , which specifies the minimum size of the colorings we re interested in , and , for colorings with less than @xmath8 vertices , add the following operations ( in essence , trying to look ahead and to eliminate dead - end colorings as early as possible . )",
    "* forced link search ( appendix b ) . at each pass ,",
    "review the graph for k / j - cliques which are short one link of completion .",
    "finding such a clique forces us to color the missing link in the color that is opposite to the clique . at each step",
    "it is sufficient to consider only cliques containing the link that has just been colored .",
    "this in turn would possibly create 1-short k / j - cliques of the opposite color , etc . at larger",
    "n this process would frequently result in complete k - cliques , allowing us to exclude the entire set of descendants of this coloring from consideration .",
    "* forced link group search ( appendix c ) .",
    "this involves looking for k - cliques which are short 2 ( or , optionally , 3 ) links of completion ( such a clique would mean a prohibition to color all links the same color as the clique . ) this process is more costly in terms of complexity vs. benefit ( whereas a 1-short clique cuts the search space in half , a 2-short clique only reduces it by 1/4 and a 3-short clique reduces it by 1/8 ) , but it occasionally results in forced links as well , and can provide input for the next method :    * out of order coloring . rather than coloring all links in increasing order , we can pick links that cut the search space the most , by looking at the numbers of known link pairs ( generated during the previous step ) associated with each potential link .",
    "* graph rebuild .",
    "this is needed , because , unless links are colored in increasing order , the algorithm in appendix a misses some cliques .",
    "for example , if we have a coloring with links 10 , 60 and 70 set to 1 and link 50 unset , setting 50 to 1 creates a clique ( 0,10,60,70 ) .",
    "detecting such cliques is expensive , and it s preferable to do an ordered rebuild once in a while instead .",
    "the first of these four operations is performed each time a link is colored , and then recursively until no more changes can be detected .",
    "the other three are relatively expensive and it is sufficient to perform them once every 5 depth levels .",
    "it is necessary to keep lists of k / j-2 and k / j-1 cliques ; shorter cliques may be discarded .",
    "this algorithm was implemented in c / c++ and used to estimate graph population dynamics for r(k , j ) for a number of combinations of small k and j ( see table 1 ) , using a dual - socket intel xeon e5 - 2697 v2 ( 24 cores at 2.7 ghz . )",
    "( principal elements of the source code used in this analysis are available at https://github.com/ekuznetsov139/ramsey . )",
    "time needed for complete enumeration grows extremely rapidly with k and j. for example , there are so few r(6,5 ) distance colorings that they can be fully enumerated in a fraction of a second .",
    "r(6,6 ) takes 30 seconds with this system and algorithm , r(6,7 ) takes several hours , and r(6,9 ) would take thousands of years . among @xmath9 pairs",
    "not listed in the table , only ( 5,9 ) could be covered in less than a year .",
    "longest distance colorings ( full enumeration )    [ cols=\"^,^,^\",options=\"header \" , ]     [ h]|c|c|c|c|c|c|c|c|n & @xmath10 & @xmath11 & @xmath12 & @xmath13 & @xmath14 + 180 & 0 & 227 & & 415 & + 181 & 0 & 0 & 7366 & 738 & + 182 & 0 & 19 & 43167 & 197 & + 183 & 0 & 8 & 4219 & 3896 & + 184 & 0 & 705 & 7565 & 351 & + 185 & 0 & 0 & 1241 & 47 & + 186 & 0 & 6 & 14696 & 168 & + 187 & 0 & 0 & 810 & 1 & + 188 & 0 & 0 & 2209 & 11 & + 189 & 0 & 0 & 139 & 531 & + 190 & 0 & 0 & 1274 & 3 & + 191 & 0 & 0 & 41 & 98 & + 192 & 0 & 4 & 171 & 1 & + 193 & 0 & 0 & 116 & 164 & + 194 & 0 & 0 & 555 & 0 & + 195 & 0 & 0 & 1 & 129 & 933 + 196 & 0 & 0 & 21 & 0 & 5177 + 197 & 0 & 0 & 2 & 2 & 48 + 198 & 0 & 0 & 102 & 0 & 42 + 199 & 0 & 0 & 0 & 4 & 0 + 200 & 0 & 0 & 0 & 0 & 16 + 201 & 0 & 0 & 0 & 1 & 1 + 202 & 1 & 2 & 8 & 0 & 3 + 203 & & & & 1 & 1453 + 204 & & & & & 5 + 205 & & & & & 0 + 206 & & & & & 1 + 207 & & & & & 0 + 208 & & & & & 0 + 209 & & & & & 0 + 210 & & & & & 0 + 211 & & & & & 0 + 212 & & & & & 0 + 213 & & & & & 0 + 214 & & & & & 0 + n & @xmath10 & @xmath11 & @xmath12 & @xmath13 & @xmath14 +    [ h]|c|c|c|c|c|c|c|c|n & @xmath14 & @xmath15 & @xmath16 & @xmath17 & @xmath18 & @xmath19 + 215 & 0 & 13783 & & & & + 216 & 0 & 40736 & & & & + 217 & 0 & 7893 & & & & + 218 & 0 & 6199 & & & & + 219 & 0 & 3915 & & & & + 220 & 130 & 2270 & 6379 & & & + 221 & & 1183 & 1694 & & & + 222 & & 3516 & 257 & & & + 223 & & 786 & 135 & & & + 224 & & 473 & 3075 & & & + 225 & & 182 & 5 & 83669 & & + 226 & & 198 & 5491 & 98477 & & + 227 & & 68 & 61 & 23198 & & + 228 & & 137 & 73 & 126830 & & + 229 & & 7 & 40 & 18185 & & + 230 & & 34 & 95 & 48831 & & + 231 & & 3 & 41 & 5319 & & + 232 & & 10 & 83 & 12247 & & + 233 & & & 7 & 13166 & & + 234 & & & 10 & 15888 & & + 235 & & & 2 & 1584 & & + 236 & & & 19 & 2593 & & + 237 & & & 15 & 2825 & & + 238 & & & 12 & 1266 & & + 239 & & & 0 & 444 & & + 240 & & & 5 & 464 & & + 241 & & & 0 & 574 & & + 242 & & & 17 & 223 & & + 243 & & & 0 & 217 & & + 244 & & & 0 & 20 & & + 245 & & & 0 & 33 & & 7687 + 246 & & & 8 & 1 & & 10582 + 247 & & & 0 & 0 & & 1742 + 248 & & & 3 & 0 & & 2859 + 249 & & & 0 & 0 & & 622 + 250 & & & 4 & 0 & & 728 + 251 & & & 0 & 1 & & 79 + 252 & & & 0 & & & 308 + 253 & & & 0 & & & 38 + 254 & & & 0 & & & 515 + 255 & & & 10 & & & 25 + 256 & & & & & & 28 + 257 & & & & & & 1 + 258 & & & & & & 600 + 259 & & & & & & 0 + 260 & & & & & 4 & 2 + 261 & & & & & 797 & 0 + 262 & & & & & 445 & 0 + 263 & & & & & 286 & 4 + 264 & & & & & 86 & 0 + 265 & & & & & 159 & 0 + 266 & & & & & 0 & 32 + 267 & & & & & 0 & + 268 & & & & & 58 & + 269 & & & & & 218 & + n & @xmath14 & @xmath15 & @xmath16 & @xmath17 & @xmath18 & @xmath19 +    [ h]|c|c|c|c|c|c|c|c|n & @xmath20 & @xmath18 + 270 & 6572 & 0 + 271 & 49934 & 250 + 272 & 119670 & 2 + 273 & 0 & 0 + 274 & 378931 & 13 + 275 & 14602 & 78 + 276 & 123 & 19 + 277 & 13315 & 94 + 278 & 3137 & 0 + 279 & 0 & 0 + 280 & 350 & 0 + 281 & 4361 & 0 + 282 & 1228 & 0 + 283 & 90 & 0 + 284 & 0 & 0 + 285 & 38 & 7 + 286 & 0 & 0 + 287 & 10 & 0 + 288 & 35 & 0 + 289 & 336 & 0 + 290 & 0 & 0 + 291 & 141 & 0 + 292 & & 0 + 293 & & 1 + n & @xmath20 & @xmath18 +    [ h]|c|c|c|c|c|    n & @xmath21 & @xmath22 & @xmath23 & @xmath24 + 310 & 10814 & 293 & & + 311 & 989 & 167 & & + 312 & 3727 & 8327 & & + 313 & 832 & 0 & & + 314 & 2845 & 11898 & & + 315 & 5 & 91 & & + 316 & 870 & 58 & & + 317 & 992 & 0 & & + 318 & 96 & 54 & & + 319 & 4401 & 12 & & + 320 & 14 & 0 & 19638 & + 321 & 312 & 26 & 77825 & + 322 & 0 & 0 & 4406 & + 323 & 67 & 0 & 4454 & + 324 & 2 & 0 & 5848 & + 325 & 0 & 0 & 14 & 97 + 326 & 77 & 0 & 561 & 2481 + 327 & 2 & 0 & 0 & 4379 + 328 & 15 & 13 & 3683 & 1100 + 329 & 0 & & 0 & 504 + 330 & 0 & & 41 & 22 + 331 & 0 & & 0 & 17 + 332 & 0 & & 16 & 14 + 333 & 7 & & 0 & 71 + 334 & & & 0 & 85 + 335 & & & 0 & 1 + 336 & & & 1 & 49 + 337 & & & 172 & 2 + 338 & & & 0 & 202 + 339 & & & 0 & 0 + 340 & & & 0 & 1 + 341 & & & 0 & 0 + 342 & & & 14 & 0 + 343 & & & & 0 + 344 & & & & 0 + 345 & & & & 0 + 346 & & & & 2 + @xmath25 & & & & 0 + 364 & & & &",
    "8866 + n & @xmath21 & @xmath22 & @xmath23 & @xmath24 +    [ h]|c|c|c|c|n & @xmath26 & @xmath27 & @xmath28 + 400 & 0 & & 21564 + 401 & 0 & 6 & 115 + 402 & 0 & 21 & 240 + 403 & 58 & 3722 & 14138 + 404 & 0 & 425192 & 8 + 405 & 0 & 605 & 301 + 406 & 0 & 0 & 790 + 407 & 988 & 0 & 0 + 408 & & 698593 & 36007 + 409 & & 4003 & 2407 + 410 & & 44884 & 33531 + 411 & & 0 & 2 + 412 & & 22151 & 12 + 413 & & 0 & 0 + 414 & & 0 & 0 + 415 & & 0 & 0 + 416 & & 6 & 0 + 417 & & 2102 & 0 + 418 & & 0 & 0 + 419 & & 0 & 4 + 420 & & 35 & 0 + 421 & & 2 & 0 + 422 & & & 0 + 423 & & & 19 +    table 5 .",
    "doubling connections    [ h]|c|c|c|c|c|c|c|k , j & new & @xmath29 & @xmath30 & 4x repeat & others + 6,11 & & & @xmath31 & & + 6,12 & & & @xmath32 & & + 6,13 & & & @xmath33 & @xmath34 & + 6,14 & & & @xmath35 & & + 7,7 & & @xmath36 & & & + 7,8 & 192 & ( 4,8 ) : @xmath37 & & & + 7,9 & & @xmath38 & & & @xmath39 + 7,10 & & @xmath40 & & @xmath41 & @xmath42 + 7,11 & & @xmath43 & @xmath44 & @xmath45 & @xmath46 + 7,12 & & @xmath47 & @xmath48 & @xmath49 & @xmath50 + 8,8 & 220 & & & & + 8,9 & & & @xmath51 & @xmath52 & + 8,10 & & @xmath53 & & & + 8,11 & & @xmath54 & @xmath55 & & + 9,9 & & @xmath56 & & @xmath57 & + 9,10 & & @xmath58 & & & @xmath59 +",
    "in all cases , we ca nt be sure that true maximal colorings are not isolated ( with no large `` nearby '' colorings ) .",
    "we can cover connected components of the solution set but we ca nt find isolated colorings without full enumeration .",
    "one could reasonably expect that most maximal colorings are inside connected components , but this is not always the case .",
    "the ones most easily missed are colorings that may be called `` degenerate '' .",
    "though a general cyclic coloring would appear in the solution set as many distinct versions and therefore many distinct signatures ( see `` relabeling '' above ) , making it relatively hard to miss ( all we need is for one of those relabelings to be in a cluster ) , for some colorings , different relabelings are not just isomorphic but equal .",
    "( one example is the paley graph of order 101 : all its relabelings are identical , up to color reflection . ) to address this limitation , we can directly construct and review colorings with fewest distinct relabelings .    the set of relabelings of a coloring of order n is isomorphic to the multiplicative group of integers modulo n. therefore , to construct these colorings , we need to examine the structure of this group .    for prime n ,",
    "the situation is easiest .",
    "the group is cyclic and has n-1 elements .",
    "there is a family of degenerate colorings for each subgroup of @xmath60 ( in other words , for each factor of @xmath61 . )",
    "we can construct a fully degenerate coloring , with only one unique relabeling , by setting @xmath62 where @xmath63 is any generator of the group .",
    "( it is easy to see that , if n is a pythagorean prime , this coloring is none other than the paley coloring of order n. ) if @xmath61 is divisible by 3 , there are 6 nontrivial colorings with 3 distinct relabelings each , distinguished by colors of @xmath64 ( coloring @xmath65 is trivial , and coloring @xmath66 is fully degenerate . )    for @xmath67 with @xmath68 prime , the group is also cyclic and links of the coloring form three orbits : links with numbers coprime with @xmath69 ; links with even numbers ; and link @xmath68 .",
    "link @xmath68 is fixed under group action .",
    "suppose that @xmath63 is a generator of the group .",
    "there are 16 colorings with either 1 or 2 distinct relabelings , one for each combination of colors of links @xmath70 , @xmath63 , @xmath71 , and @xmath68 .",
    "( link 1 is held fixed .",
    "values of @xmath63 and @xmath71 indicate whether links 1 and 2 are held constant or flipped under action of the generator . )    more generally , take any k - element subgroup @xmath72 of @xmath73 , and construct a quotient @xmath74 that contains @xmath61 ( in essence , breaking relabeling symmetry under @xmath72 . )",
    "action of @xmath75 induces a number of orbits among links .",
    "pick an arbitrary initial link in each orbit .",
    "suppose there are @xmath76 orbits and @xmath77 generators in @xmath75 .",
    "we can construct @xmath78 partially degenerate colorings , for each combination of value assigned to each initial link and to each action of the generator .    for @xmath79 and @xmath72 generated by each element of @xmath73 , colorings with up to 22 orbits and fixed action of generators , and colorings with up to @xmath80 , were constructed .",
    "in addition , first two basic classes above were constructed for @xmath81 . for off - diagonal ramsey numbers ,",
    "no notable colorings were found ( largest observed colorings were : for r(5,10 ) , n=140 ; for r(6,8 ) , n=116 ; for r(6,9 ) , n=156 ; for r(6,10 ) , n=174 . )",
    "however , for r(7,7 ) , @xmath67 class yielded a cyclic coloring of order 202 .",
    "it is degenerate ( with only 2 distinct relabelings differing by a single bit ) as well as deeply isolated ( with no neighbor signatures extending even to 100 ) , making it virtually impossible to find via nearest - neighbor search .",
    "( the same coloring also works as the largest cyclic coloring for r(7,8 ) . )",
    "this coloring is isomorphic to a block- coloring with adjacency matrix @xmath82 where @xmath83 is the paley coloring of order 101 , and , therefore , is a subset of the order 204 coloring found by shearer ( 1986 )  @xcite / mathon ( 1987 ) which is the largest currently known r(7,7 ) coloring .",
    "@xcite for r(8,8 ) , r(9,9 ) , and r(10,10 ) , cyclic colorings of order 281 , 562 , and 797 respectively were produced .",
    "these are likewise either paley colorings ( for ( 8,8 ) and ( 10,10 ) ) or shearer / mathon subsets ( for ( 9,9 ) . )",
    "objective : given a distance coloring and a new link b ( from vertex 0 to vertex b ) with color c , compile a list of monochromatic cliques containing this link",
    ".    the most straightforward approach would be to keep a list of all known cliques and to check if the new link extends any of them .",
    "however , this is costly memory - wise and , for large k , most cliques are not extensible by any given link ( e.g. , a k=6 clique has , on average , only a 1/32 chance of being extensible to k=7 with a link of the same color . )",
    "the following approach avoids this at the cost of some bit arithmetic , which can be accelerated using native x86 cpu instructions .",
    "it is in a sense a variation of the classic bron - kerbosch maximal clique algorithm  @xcite , adapted to take advantage of symmetries of graphs in question .",
    "the algorithm employs a type bigint with several methods ( len ( ) , set ( ) , etc ) whose functions should be self - evident .",
    "start with a bitmask x containing bits for each link that is colored with color c. create a copy with link b set :    .... bigint x ;   bigint y = x ; y.set(b-1 ) ; ....    \\2 .",
    "define an operation    .... bigint invert(bigint x , int n ) {     bigint y = 0 ;     for(int i=0 ; i < x.len ( ) ; i++ )     {          if(x.bit(i ) )      {          if(n - i-1>=0 )              y.set(n-i-1 ) ;          if(n+i+1<y.max_len ( ) )              y.set(n+i+1 ) ;      }     } } ....    ( for a bigint with fixed maximum length , this can be optimized , eliminating an explicit loop over all bits in favor of shifts and bitwise or s / and s )    \\3 . define a stack of bigint variables .    .... int depth=0 ; bigint stack[max_k ] ;   ....    \\4 .",
    "set the first entry in the stack :    .... stack[depth ] = x & invert(y , b-1 ) ; ....    \\5 . at this point ,",
    "every bit n set in stack[0 ] corresponds to a 3-clique ( 0,n+1,b ) .",
    "scan through bits using x86 cpu instructions bsr / bsf ( exposed by under various names by different c compilers , e.g. as @xmath84 / @xmath85 by gcc ) . for",
    "each found bit , report a clique if necessary and move on to the next step :    6 .    ....",
    "stack[depth].unset(n ) ;      stack[depth+1 ] = stack[depth ] & invert(y ,",
    "n ) ; ....    check that the newly created bigint is not zero . if it is not , increment depth and continue the process in steps 4 - 6 recursively .",
    "if it is , go back down one level .",
    "it is preferable to compute invert ( ) values for all bits set in y in advance and simply to load them from memory instead of executing invert ( ) every time .",
    "if we re only interested in cliques which have at least @xmath86 nodes for some value of @xmath86 , there are additional optimizations that can be employed .",
    "first , we can check the number of bits in @xmath87 $ ] ( also accelerated with x86 cpu instruction popcnt ) at the end of step 6 . if there are nt enough bits left in @xmath88 to construct such a clique , we can bypass the recursion and go back to the previous level .",
    "in addition , it s possible to utilize symmetries of the underlying coloring to reduce the number of operations .    in a distance coloring , a monochromatic clique with elements @xmath89 , where @xmath90 , always has a counterpart , a monochromatic clique @xmath91 . only one of the two needs to be constructed via this process ( the other can be imputed ) . therefore ,",
    "if @xmath92 , bits are always set in increasing order ( or if any coloring is going to be checked at some later point by doing an ordered rebuild ) , step 5 scan in performed in decreasing bit order , and , at any point , we encounter the situation where @xmath93 and the largest remaining set bit in @xmath94 $ ] is less than @xmath95 , we can likewise stop the recursion and go back one level immediately .",
    "if the coloring is cyclic , rotation symmetry means that , for each monochromatic clique @xmath89 , there are monochromatic cliques @xmath96 for @xmath97 , and @xmath98 .",
    "one way to utilize this symmetry is to note that we can always rotate node labels to put the widest gap between any two adjacent node indices in the clique at the end .",
    "therefore we can restrict the search to cliques that satisfy @xmath99 , @xmath100 for @xmath101 ( and , therefore , @xmath102 . )",
    "objective : given an incompletely colored distance graph , a new link @xmath77 with color @xmath103 , and a number @xmath104 representing maximum allowed color @xmath103 clique size , compile a list of link - color assignments implied by this assignment .",
    "this is straightforward with a double - loop over all monochromatic order @xmath105 cliques containing @xmath77 and all uncolored links in the graph .",
    "the following method is somewhat more efficient because it only requires the inner loop to perform @xmath105 iterations .",
    "execute appendix a algorithm to construct the list @xmath106 monochromatic order @xmath105 cliques containing @xmath77 .",
    "define a bigint variable @xmath107 . for each yet uncolored link in the graph , set the corresponding bit in @xmath107 .",
    "define a bigint variable @xmath108 . for each color @xmath103 link in the graph , set the corresponding bit in @xmath108 .",
    "construct a list @xmath109 of inverted bitmasks by executing invert from appendix a on @xmath108 for values of @xmath110 corresponding to all links colored to @xmath103 .",
    "iterate over all cliques from step 1 :    .... bigint new_mask ; new_mask.clear ( ) ; for(int i=0 ; i < v.size ( ) ; i++ ) {    bigint y = v[i ] ;    bigint cand = m ;    while(!y.zero ( ) )    {        int pos = y.trailing_bit ( ) ;        cand & = shifted_masks[pos ] ] ;        if(cand.zero ( ) )          break ;       y.unset(pos ) ;     }    new_mask|=cand ;    m & = ~cand ; } ....    at the end of the loop , bits set in @xmath111 correspond to links that have to be colored @xmath112 to prevent formation of order @xmath104 monochromatic cliques .",
    "objective : given an incomplete coloring , numbers @xmath8 and k , attempt to determine if the coloring is extensible to a r(k , k ) coloring of order @xmath8 , without actually enumerating all its descendants .",
    "compile a list of 2-incomplete and 3-incomplete k - cliques .",
    "this list does not have to be comprehensive ; though the comprehensive list would cut down on the search space by terminating branches as early as possible , actually constructing one for every invocation of this algorithm is substantially more expensive than simply enumerating descendants in conjunction with some fast generation method .",
    "record colors of cliques and missing links .",
    "* for each clique , iterate over yet - uncolored links under @xmath8 .",
    "for a clique @xmath113 and an uncolored link m , check if all links @xmath114 , @xmath115 , etc . are colored the same color as the clique .",
    "make a list of links satisfying the requirement .",
    "define an array of bits @xmath121[4][d]$ ] ( convenient to group as @xmath122 bigints ) . initially set all of them to 0 except for v[i][0][i ] and v[i][3][i ] ,",
    "( v[i][0 ] and v[i][1 ] correspond to valid extensions of the coloring with bit i set to 0 .",
    "v[i][2 ] and v[i][3 ] correspond to extensions with i set to 1 . )",
    "for(int p=0 ; p < d_min ; p++ ) {     if(mask0.set(p ) || mask1.set(p ) )        continue ;     for(int i=0 ; i < d_min ; i++ )     {         if(i==p )          continue ;       if(v[p][0].bit(i ) )        {         v[p][0 ] |= v[i][0 ] ;         v[p][1 ] |= v[i][1 ] ;       }       if(v[p][1].bit(i ) )        {         v[p][0 ] |= v[i][2 ] ;         v[p][1 ] |= v[i][3 ] ;       }       if(v[p][2].bit(i ) )        {         v[p][2 ] |= v[i][0 ] ;         v[p][3 ] |= v[i][1 ] ;       }       if(v[p][3].bit(i ) )        {         v[p][2 ] |= v[i][2 ] ;         v[p][3 ] |= v[i][3 ] ;       }     } } ....    \\5 . if , for any p , any bit is set simultaneously in v[p][0 ] and v[p][1 ] , link p ca nt be colored to 0 .",
    "color it to 1 and recursively apply all known rules ( for any 2-incomplete 1 , p , q , color q to 0 , etc . )",
    "if any bit is set in v[p][2 ] and v[p][3 ] , color link p to 0 and apply rules .",
    "if this process results in an attempt to color any link in both colors at once , the coloring is not extensible to @xmath8 .",
    "abort the process .",
    "xiaodong , xie zheng , g. exoo and s.p .",
    "radziszowski , `` constructive lower bounds on classical multicolor ramsey numbers '' , electronic journal of combinatorics 11 ( 2004 ) , http://scholarworks.rit.edu/cgi/viewcontent.cgi?article=1668&context=article"
  ],
  "abstract_text": [
    "<S> computer - based attempts to construct lower bounds for small ramsey numbers are discussed . </S>",
    "<S> a systematic review of cyclic ramsey graphs is attempted . </S>",
    "<S> many known lower bounds are reproduced . </S>",
    "<S> several new bounds are reported .    2.0 cm    * computational lower limits on small ramsey numbers *    eugene kuznetsov    nameless@fastmail.fm </S>"
  ]
}