{
  "article_text": [
    "parallel discrete - event simulations ( pdes ) are a technical tool to uncover the dynamics of information - driven complex systems .",
    "their wide range of applications in contemporary sciences and technology @xcite has made them an active area of research in recent years .",
    "parallel and distributed simulation systems constitute a complex system of their own , whose properties can be uncovered with the well - established tools of statistical physics .    in pdes physical processes",
    "are mapped to logical processes ( assigned to processors ) .",
    "each logical process manages the state of the assigned physical subsystem and progresses in its _ local virtual time _ ( lvt ) .",
    "the main challenge arises because logical processes are not synchronized by a global clock .",
    "consequently , to preserve causality in pdes the algorithms should incorporate the so - called local causality constraint @xcite whereby each logical process processes the received messages from other processes in non - decreasing time - stamp order . depending on the way the local causality constraint",
    "is implemented , there are two broadly defined classes of update protocols @xcite : conservative algorithms @xcite and optimistic algorithms @xcite . in conservative pdes ,",
    "an algorithm does not allow a logical process to advance its lvt until it is certain that no causality violation can occur .",
    "in the conservative update protocol a logical process may have to wait to ensure that no message with a lower time stamp is received later .",
    "in optimistic pdes , an algorithm allows a logical process to advance its lvt regardless of the possibility of a causality error .",
    "the optimistic update protocol detects causality errors and provides a recovery procedure from the violation of the local causality constraint by rolling back the events that have been processed prematurely .",
    "there are several aspects of pdes algorithms that should be considered in systematic efficiency studies .",
    "some important aspects are : the synchronization procedures , the utilization of the parallel environment as measured by the fraction of working processors , memory requirements which may be assessed by measuring the statistical spread in lvts ( i.e. , the desynchronization ) , inter - processor communication handling , scalability as measured by evaluating the performance when the number of computing processors becomes large , and the speedup as measured by comparing the performance with sequential simulations . in routinely performed studies to date , the efficiency is investigated in a heuristic fashion by testing the performance of a selected application in a chosen pdes environment , i.e. , in a parallel simulator .",
    "only recently a new approach in performance studies has been introduced @xcite in which the properties of the algorithm are examined in an abstract way , without a reference to a particular application platform . in this approach",
    "the main concept is the simulated _ virtual time horizon _ ( vth ) defined as the collection of lvts of all logical processes .",
    "the evolution rule of this vth is defined by the communication topology among processors and by the way in which the algorithm handles the advances in lvts .",
    "the key assumption here is that the properties of the algorithm are encoded in its representative vth in analogy with the way in which the properties of a complex system are encoded in some representative non - equilibrium interface . in this way",
    ", fundamental properties of the algorithm can be deduced by analyzing its corresponding simulated vth .    in this chapter",
    "we give an overview of how the methods of non - equilibrium surface growth ( physics of complex systems ) can be applied to uncover some properties of state update algorithms used in pdes .",
    "in particular , we focus on the asynchronous conservative pdes algorithm in a ring communication topology , where each processor communicates only with its immediate neighbors .",
    "the time evolution of its vth is simulated numerically as an asynchronous cellular automaton whose update rule corresponds to the update rule followed by this algorithm .",
    "the purpose of this study is to uncover generic properties of this class of algorithms .    in modeling of the conservative update mode in pdes",
    ", we represent sequential events on processors in terms of their corresponding lvts . a system of processors or _ processing elements _ ( pe ) is represented as a one - dimensional grid .",
    "the column height that rises above the @xmath1-th grid point is a building block of the simulated vth and represents the total time of operations performed by the @xmath1-th processor .",
    "these operations can be seen as a sequence of update cycles , where each cycle has two phases .",
    "the first phase is the processing of the assigned set of discrete events ( e.g. , spin flipping on the assigned sublattice for dynamic monte carlo simulation of lattice systems ) .",
    "this phase is followed by a messaging phase that closes the cycle , when a processor broadcasts its findings to other processors .",
    "but the messages broadcasted by other processors may arrive any time during the cycle .",
    "processing related to these messages ( e.g. , memory allocations / deallocations , sorting and/or other related operations ) are handled by other algorithms that carry their own virtual times .",
    "in fact , in actual simulations , this messaging phase may take an enormous amount of time , depending on the hardware configuration and the message processing algorithms . in our modeling the time extent of the messaging phase",
    "is ignored as though communications among processors were taking place instantaneously . in this sense",
    "we model an ideal system of processors .",
    "the lvt of a cycle represents only the time that logical processes require to complete the first phase of a cycle .",
    "therefore , the spread in lvts represents only the desynchronisation that arises due to the asynchronous conservative algorithm alone . by the same token , all other performance indicators such as , e.g. , the overall efficiency or the utilization of the parallel processing environment , that are read out of the simulated vth are the intrinsic properties of this algorithm .",
    "this chapter is organized as follows .",
    "the simulation model of asynchronous conservative updates and the mapping between the logical processes and the physical processes considered in this study are explained in sec .",
    "[ model ] .",
    "section  [ physics ] outlines the selected ideas taken from non - equilibrium surface science that are used in the interpretation of simulation results ; in particular , the concepts of universality and a non - universal microscopic structure that are relevant in deducing algorithmic properties from the simulated vth . one group of these properties includes the utilization and the speedup , which is provided in sec .",
    "another group includes the desynchronization and the memory request per processor , required for past state savings , which is presented in sec .",
    "[ dynamics ] .",
    "performance of the conservative and the optimistic pdes algorithms is discussed in sec .  [",
    "compare ] . the new approach to performance studies , outlined in this chapter ,",
    "can be a very convenient design tool in the engineering of algorithms .",
    "this issue and directions for future research are discussed in sec .",
    "[ conclude ] .",
    "in simulations a system of @xmath0 processors is represented as a set of equally spaced lattice points @xmath1 , @xmath2 .",
    "each processor performs a number of operations and enters a communication phase to exchange information with its immediate neighbors .",
    "this communication phase , called an update attempt , takes no time in our simulations . in this sense",
    "we simulate an ideal system of processors , as explained in sec .",
    "[ intro ] .",
    "an update attempt is assigned an integer index @xmath3 that has the meaning of a wall - clock time ( in arbitrary units , which may be thought of as a fixed number of ticks of the cpu clock ) .",
    "the local virtual time @xmath4 at the @xmath1-th processor site represents the cumulative local time of all operations on the @xmath1-th processor from the beginning at @xmath5 to time @xmath3 .",
    "these local processor times are not synchronized by a global clock .",
    "= 0.42truecm the mapping between physical processes and logical processes .",
    "the nearest - neighbor physical interactions on a lattice with periodic boundary conditions ( the right part ) are mapped to the ring communication topology of logical processes ( two - sided arrows in the left part ) .",
    "each pe carries a sublattice of @xmath6 sites .",
    "communications take place only at border sites .",
    "each pe has at most two effective border sites , i.e. , neighboring pes that it communicates with.,width=453 ]    there is a two - way correspondence between the physical system being simulated in pdes and the system of pes that are to perform these pdes in a manner _ consistent with and faithful to _ the underlying stochastic dynamics of the physical system , as depicted in fig.[kol-01 ] . on the one hand , by spatially distributing a physical lattice with the nearest - neighbor interactions and periodic boundaries among @xmath0 processors , the asynchronous nature of physical dynamics is carried over to the asynchronous nature of logical processes in the ring communication topology of the computing system . on the other hand ,",
    "the ring communication topology among processors is mapped onto a lattice arrangement with periodic boundary conditions , @xmath7 , and asynchronous update events in the system of pes can be modeled as an asynchronous cellular automaton on this lattice .",
    "the set of local virtual times @xmath4 forms the vth at @xmath3 ( see fig .",
    "[ kol-02 ] ) .",
    "the time - evolution of the vth is simulated by an update rule , where local height increments @xmath8 are sampled from the poisson distribution of unit mean @xmath9 .",
    "the form of the deposition rule depends on the processor load @xmath6 , as explained later in this section .    a general principle that governs the conservative update protocol requires a processor to idle if at update attempt @xmath3 the local causality constraint may be violated .",
    "this happens when at @xmath3 the @xmath1-th processor does not receive the information from its neighboring processor ( or processors ) if such information is required to proceed in its computation .",
    "this corresponds to a situation when the local virtual time @xmath4 of the @xmath1-th processor is ahead of either one of the local virtual times @xmath10 or @xmath11 of its left and right neighbors , respectively . in this unsuccessful update attempt",
    "the local virtual time @xmath4 is not incremented , i.e. , the @xmath1th processor waits : @xmath12 . in another case , for example",
    ", when at @xmath3 the @xmath1th processor does not need information from its neighbors it performs an update regardless of the relation between its local virtual time and the local virtual times on neighboring processors . at every successful update attempt ,",
    "the simulated local virtual time at the @xmath1-th pe - site is incremented for the next update attempt : @xmath13 , where @xmath14 , and @xmath15 $ ] is a uniform random deviate .",
    "the simulations start from the _ flat - substrate condition _ at @xmath5 : @xmath16 .",
    "one example of computations that follow the above model is a _ dynamic monte carlo _ simulation for ising spins @xcite . in a parallel environment ,",
    "a spin lattice is spatially distributed among @xmath0 processors in such a way that each processor carries an equal load of one contiguous sublattice that consists of @xmath6 spin sites ( i.e. , each processor has a load of @xmath6 volumes ) .",
    "some of these @xmath6 spin - lattice sites belong to border slices , i.e. , at least one of their immediate neighbors resides on the sublattice of a neighboring processor .",
    "processors perform concurrent spin - flip operations ( i.e. , increment their lvts ) as long as a randomly selected spin - site is not a border site .",
    "if a border spin - site is selected , to perform a state update a processor needs to know the current spin - state of the corresponding border slice of its neighbor .",
    "if this information is not available at the @xmath3 update attempt ( because the neighbor s local time is behind ) , by the conservative update rule the processor waits until this information becomes available , i.e. , until the neighbor s local virtual time catches up with or passes its own local virtual time .",
    "the least favorable parallelization is when each processor carries the minimal load of @xmath17 .",
    "computationally , this system can be identified with a closed spin chain where each processor carries one spin - site . at each update attempt each processor must compare its lvt with the local times on both of its neighbors .",
    "the second least favorable arrangement is when @xmath18 .",
    "as before , at each update attempt every processor must compare its local time with the local time of one of its neighbors . when @xmath19 , at update attempt @xmath3 , the comparison of the local virtual times between neighbors is required only if the randomly selected volume site is from a border slice .",
    "the above three cases are realized in simulations by the following three update rules .",
    "when @xmath17 , the update attempt at @xmath3 is successful iff @xmath20 when @xmath18 , at any site @xmath1 where the update attempt was successful at @xmath21 , at @xmath3 we first randomly select a neighbor ( left or right ) .",
    "this is equivalent to selecting either the left or the right border slice on the @xmath1th processor .",
    "the update attempt is successful iff @xmath22 where @xmath23 is the randomly selected neighbor ( @xmath24 for the left , @xmath25 for the right ) . at any site @xmath1 where the update attempt was not successful at @xmath21 , at @xmath3 we keep the last @xmath23 value .",
    "when @xmath19 , at any site @xmath1 where the update attempt was successful at @xmath21 , at @xmath3 we first randomly select any of the @xmath6 volume sites ( indexed by @xmath26 ) assigned to a processor",
    ". the selected site can be either from the border sites ( either @xmath27 or @xmath28 ) or from the interior .",
    "the attempt is successful if the selected site is the interior site . when the border site is selected , the attempt is successful if condition  ( [ rule2 ] ) is satisfied . as for @xmath18 , at any site @xmath1 where the update attempt was not successful at @xmath21 , at @xmath3 we keep the last @xmath26 value .",
    "= 0.42truecm the growth and roughening of the simulated vth interface : snapshots at @xmath29 and at a later time @xmath30 .",
    "local heights @xmath31 are in arbitrary units .",
    "here , @xmath32 and @xmath17.,width=453 ]    in this way the simulated vth , corresponding to the conservative update rule followed by the pdes algorithm , emerges as a one - dimensional non - equilibrium surface grown by depositions of poisson - random time increments that model waiting times .",
    "two sample vth surfaces are presented in fig .",
    "[ kol-02 ] .",
    "major properties of the corresponding algorithm are encoded in these interfaces . in principle , with the help of statistical physics , one should be able to obtain from vth such properties as the utilization , the ideal speedup , the desynchronization , the memory request per processor , the overall efficiency and the scalability .",
    "one basic property is the _",
    "mean utilization _",
    "@xmath33 , which can be assessed as the fraction of sites in the vth interface that performed an update at @xmath3 , averaged over many independent simulations . for the minimal load per processor @xmath17",
    ", @xmath34 is simply the mean density of local minima of the interface ( fig .",
    "[ kol-02 ] ) .",
    "another basic property is the _",
    "mean desynchronization _",
    "@xmath35 in operation times , which can be estimated from simulations as the mean statistical spread ( roughness ) of the vth interface . in the following section we review some useful concepts from surface physics relevant to our study .",
    "the roughness of a surface that grows on a one dimensional substrate of @xmath0 sites can be expressed by its interface width @xmath37 at time @xmath3 @xmath38 where @xmath4 is the height of the column at site @xmath1 and @xmath39 is the average height over @xmath0 sites , @xmath40 .",
    "the angular brackets denote the average over many interface configurations that are obtained in many independent simulations . in our study",
    "these configurational averages were computed over 800 simulations , unless noted otherwise .",
    "based on the time - evolution of @xmath37 , interfaces can be classified in various _ universality classes _ ( for an overview see ref .",
    "the idea behind the concept of universality is that , in a statistical description , the growth of the surface depends only on the underlying mechanism that generates correlations among time - evolving columns @xmath4 and _ not _ on the physical particulars of physical ( or other ) interactions that cause the growth .",
    "for instance , two completely different physical interactions among deposited constituents ( e.g. , one of a magnetic nature and the other of a social nature ) may generate two equivalent surfaces of one universality class , depending on the observed evolution of @xmath37 .",
    "the simplest case of surface growth is _ random deposition _ ( rd ) , when the column heights @xmath4 grow independently of each other .",
    "the rd interface is totally uncorrelated .",
    "the time - evolution of its width is characterized by a never - ending growth in accordance to the power law @xmath41 , with the _ growth exponent _ @xmath42 .",
    "such growth defines the rd universality class .",
    "the self - affined roughness of the interface manifests itself by the existence of family - vicsek scaling @xcite : @xmath43 where the scaling function @xmath44 describes two regimes of the width evolution : @xmath45 the _ dynamic exponent _ @xmath46 gives the time - evolution of the lateral correlation length @xmath47 , i.e. , at a given @xmath3 the largest distance along the substrate between two correlated columns .",
    "when @xmath48 exceeds the system size @xmath0 the width saturates and does not grow any more . at saturation , for @xmath49 , for a given @xmath0 the width remains constant and obeys the power law @xmath50 , where @xmath51 is the _ roughness exponent_. the growth phase is the initial phase for @xmath52 before the _ cross - over time _ @xmath53 at which saturation sets in .",
    "the growth phase is characterized by the single growth exponent @xmath54 .",
    "the roughness , growth and dynamic exponents are universal , i.e. , their values depend only on the underlying mechanism that generates correlations .    a simple continuum model of non - equilibrium growth that leads to scaling is provided by the kardar - parisi - zhang ( kpz ) equation @xcite : @xmath55 where @xmath56 is the height field ( subscripts denote partial derivatives ) , @xmath57 is the mean interface velocity , @xmath58 , and @xmath59 is the uncorrelated gaussian noise .",
    "the coefficients @xmath60 and @xmath61 give the strength of the linear damping and the coupling with the nonlinear growth , respectively . a renormalization group analysis",
    "@xcite can provide a connection between the stochastic growth equation and scaling exponents .",
    "the _ kpz universality class _ , governed by the dynamics of eq.([kpz ] ) , is characterized by @xmath62 and @xmath63 , and the exponent identity @xmath64 .",
    "when @xmath65 in eq.([kpz ] ) , the growth is governed by the linear edwards - wilkinson ( ew ) equation @xcite .",
    "the _ ew universality class _ is characterized by @xmath62 and @xmath66 , and the ew exponent identity is @xmath67 . when @xmath65 and @xmath68 in eq.([kpz ] ) , the growth belongs to the rd universality class . unlike the kpz and ew interfaces , the rd interface is not self - affined .    the origins of scale invariance , as in eq.([family1 ] ) , and",
    "the universal properties of time - evolving surfaces are well understood @xcite . in this study",
    ", we use the universal properties of the simulated vth to investigate the scalability of the corresponding pdes algorithm . however , there are many instances where non - universal properties , i.e. , those pertaining to the _ microscopic structure _ of the interface , are of importance . in this study ,",
    "one example is the density of local minima or the density of update sites of the vth interface .",
    "it is safe to say that there is no general silver - bullet - type of approach to these problems . for the case study of vth interfaces",
    ", we were able to develop a discrete - event analytic technique that provides a means for calculating a probability distribution for events that take place on the surface @xcite .",
    "for the closed linear chain of @xmath0 processors carrying minimal load , when the vth is simulated by poisson - random depositions at local interface minima , the probability distribution @xmath69 of the update events on the corresponding vth surface is @xcite : @xmath70 where @xmath71 is the number of updates at the @xmath3-th update attempt after the simulations reach a steady state .",
    "this distribution can be used to derive approximate closed formulas for mean quantities measured in simulations , e.g. , for @xmath33 .",
    "also , it is a starting point in the derivation of analogous distributions @xmath72 for the cases when each processor carries a larger load of @xmath18 or @xmath19 @xcite . the advantage of knowing @xmath72 is that it enables one to compute analytically quantities that otherwise can be only estimated qualitatively in simulations .",
    "= 0.42truecm simulated time evolutions of characteristic densities and the scaled vth interface velocity during simulations with the minimal load @xmath17 per processor ( @xmath73 ) .",
    "time @xmath74 marks the transition to steady - state simulations and @xmath75 is the saturation time , as explained in the text . for times later than @xmath74 , both the utilization @xmath76 ( diamonds ) and the velocity @xmath77 ( filled circles ) are constant.,width=377 ]     = 0.42truecm simulated time evolutions of characteristic densities and the scaled vth interface velocity during simulations with the load @xmath78 per processor ( @xmath73 ) . as in fig .  [ kol-03 ] , for times later than @xmath74 both the utilization @xmath76 ( diamonds ) and the velocity @xmath77 ( filled circles ) are constant , but their values are significantly higher than in the worst - case performance scenario presented in fig .",
    "[ kol-03].,width=377 ]    for a real system , the mean utilization @xmath33 is defined either as the number or as the fraction of processors that on average work simultaneously at a time . in our model",
    ", @xmath33 is the mean fraction ( i.e. , the density ) of update sites in the simulated vth . the simulated time evolution of @xmath33 is presented in fig .  [ kol-03 ] ( for @xmath17 ) and in fig .  [ kol-04 ] ( for @xmath78 ) that illustrate the following observations .",
    "first , @xmath33 is not constant as the simulations evolve but abruptly decreases from its initial value at @xmath5 and very quickly , after a few hundred steps , settles down at its steady value when it no longer depends on time .",
    "both the utilization and the transition period @xmath74 to the _ steady state _",
    "depend strongly on the processor load @xmath6 .",
    "second , the vth velocity @xmath57 must be related to @xmath33 by a simple linear scaling relation .",
    "third , the transition time @xmath74 to the steady state can be estimated from simple statistics of the interface .",
    "let us elaborate on these issues .",
    "the characteristic densities @xmath79 and @xmath80 , plotted in figs .",
    "[ kol-03][kol-04 ] , are the fractions of the interface sites ( processors ) that have their lvt larger and equal - or - smaller , respectively , than the mean virtual time @xmath39 .",
    "their relation to each other is a simple indicator of the skewness of the distribution of the lvts about the mean virtual time . for the times when they approximately coincide this distribution is approximately symmetric .",
    "the reason for a non - zero skewness for the early times @xmath81 is the flat - substrate initial condition , i.e. , the initial null lvt on all processors ( the detailed analysis of this issue can be found in @xcite ) . in the worst - case performance scenario , when each processor has the minimal load of @xmath17 ( fig .",
    "[ kol-03 ] ) , the duration of this initial transition time @xmath74 to the steady state is a non - universal property of the vth interface .",
    "this means that in real applications the time @xmath74 will depend on the application platform , i.e. , the hardware configuration and parameters .",
    "but , for a real application @xmath74 can be determined in a non - expensive way by monitoring @xmath79 and @xmath80 in a trial simulation with a fixed @xmath82 .",
    "then , the results can be scaled either up or down for an arbitrary load @xmath6 .",
    "the existence of such scaling is the universal property of the vth interface , which is discussed in sec.[dynamics ] where the explicit scaling relations are given .",
    "= 0.42truecm the steady - state mean utilization vs the number of processors @xmath0 for the minimal load per processor : the analytical result ( continuous curve ) , its asymptotic limit @xmath83 ( horizontal line ) and simulation results ( symbols ) .",
    "the error bars are smaller than the symbol size.,width=377 ]    the overall progress of pdes can be estimated from the time rate of the _ global virtual time _ ( gvt ) that is the smallest lvt from all processors at @xmath3 .",
    "the gvt determines the fossil collection , i.e. , the memory that can be re / de - allocated from past - saved events . in our model , the mean gvt is the mean global minimum @xmath84 of the simulated vth : @xmath85 . on the average ,",
    "the time rate of @xmath84 is not larger than the vth interface velocity @xmath57 and after cross - over time @xmath75 to saturation ( indicated in figs .",
    "[ kol-03][kol-04 ] and figs .",
    "[ kol-08][kol-10 ] ) these two rates are equal .",
    "thus , @xmath57 is the measure of progress .",
    "it is shown analytically @xcite that @xmath86 , where @xmath87 is a constant .",
    "for the simulated vth @xmath88 , as can be seen in figs .",
    "[ kol-03][kol-04 ] . in a real application @xmath87 is a hardware dependent parameter .",
    "the steady - state mean utilization vs the number of processors @xmath0 for loads @xmath89 per processor : analytical results ( continuous curves ) and simulation results ( symbols ) .",
    "the error bars are smaller than the symbol size.,width=377 ]    since the overall progress in pdes connects linearly to @xmath33 , the mean utilization is the most important property of this algorithm .",
    "the steady - state utilization @xmath90 for the worst - case performance as a function of the number @xmath0 of processors is presented in fig .",
    "[ kol-05 ] . for brevity of notation , from now on we omit the index @xmath3 because for @xmath91 the utilization is constant . considering the simulation data alone ( symbols in fig .",
    "[ kol-05 ] ) it is easily seen that even at the infinite limit of @xmath0 the mean utilization has a non - zero value .",
    "in fact , this asymptotic value is approached very closely with less than a thousand processors .",
    "the existence of this limit guarantees a non - zero progress of pdes for any value of @xmath0 and for any processor load @xmath6 , since the curve @xmath90 is the lower bound for the steady - state utilization @xmath92 ( compare with fig .",
    "[ kol-06 ] ) .",
    "the presence of this non - zero limit for @xmath93 as @xmath94 and the global behavior of the simulation data , observed in fig .",
    "[ kol-05 ] , suggest the existence of some underlying scaling law for @xmath93 .",
    "it appears that , indeed , the underlying scaling law can be obtained analytically from the first moment of the probability distribution @xmath69 given by eq.([distr ] ) and the result is @xcite @xmath95 and @xmath96 .",
    "this function is plotted in fig .",
    "[ kol-05 ] for @xmath97 .",
    "similarly for any @xmath89 , starting with @xmath69 , one can construct the probability distribution @xmath72 of updates in the system of @xmath0 processors , each having a load of @xmath6 ( i.e. , the distribution of updates on the corresponding vth interface ) .",
    "the mean utilization @xmath98 can then be obtained from the first moment of @xmath72 @xcite : @xmath99 where @xmath100 , and @xmath101 and @xmath102 .",
    "relation  ( [ util-3 ] ) is exact .",
    "relation  ( [ util-2 ] ) is presented in fig .",
    "[ kol-06 ] . as @xmath94",
    "the asymptotic limit is @xmath103 .",
    "the computational speedup @xmath104 of a parallel algorithm is defined as the ratio of the time required to perform a computation in serial processing to the time the same computation takes in concurrent processing on @xmath0 processors .",
    "it is easy to derive from the above definition that for an _ ideal system of processors _ , that is for the particular update _",
    "algorithm _ considered in this work , the mean speedup is @xmath105 in other words , @xmath106 is measured by the average number of pes that work concurrently between two successive update attempts .",
    "we observe that for ideal pes the speedup as a function @xmath107 must be such that the equation @xmath108 has a unique solution , where @xmath104 is a fixed positive number .",
    "this requirement follows naturally from the logical argument that distributing the computations over @xmath0 ideal pes gives a unique speedup , i.e. , two ideal systems having sizes @xmath109 and @xmath110 , respectively , may not give the same @xmath104 .",
    "this means that @xmath107 must be a monotonically increasing function of @xmath0 .    combining eq.([speedup-1 ] ) and eq.([util-1 ] ) , in the worst - case performance when the load per processor is minimal , the mean speedup is @xmath111 and @xmath112 .",
    "the latter relation says that this algorithm produces no speedup when the computations are distributed over @xmath113 or @xmath114 processors . in this case , although the utilization is @xmath115 , the processors do not work concurrently but _ alternately _",
    ", i.e. , one is working while the other is idling .",
    "for a real system of pes performing pdes , in such a situation the communication overhead will produce an actual slowdown , i.e. , the parallel execution time will be longer than the sequential execution time on one processor .",
    "when @xmath116 , to take an advantage of concurrent processing the average number of pes working in parallel between two successive update attempts must satisfy @xmath117 , which gives @xmath118 .",
    "still , depending on the implementation platform , the actual speedup of pdes may be negligible or not present at all for small @xmath0 .    for a general load per processor , combining eq.([speedup-1 ] ) and eq.([util-2 ] ) gives a linear relation with respect to @xmath0 : @xmath119   \\left ( 1 - \\frac{q(n)}{2 } \\right).\\ ] ] equation  ( [ speedup-2 ] ) can be rearranged to @xmath120 where @xmath121 is the probability that a processor performs an update without the need of communicating with other processors @xcite .",
    "this probability sharply increases with the processor load . since the mean speedup increases quadratically with @xmath122 and only linearly with @xmath0 , for some pdes that perform the updates in accordance to this algorithm it may be more advantageous to assign more load per processor than to distribute the computations over a large number of processors . in any case , either of the above relations , eq.([speedup-2 ] ) or  ( [ speedup-3 ] ) ,",
    "can be used to assess the upper bound for the speedup in actual applications .",
    "= 0.42truecm simulated time evolution of the vth width in the worst - case performance scenario @xmath17 .",
    "time @xmath74 , common for all @xmath0 , marks the transition to the steady - state simulations of fig .",
    "[ kol-03].,width=377 ]     = 0.42truecm the scaled time evolution of the simulated vth widths of fig .",
    "[ kol-07 ] for all times @xmath123 .",
    "the insert shows the full data collapse for @xmath91 , with the growth exponent @xmath63.,width=377 ]    in pdes the memory request per processor , required for past - state savings , depends on the extent to which processors get desynchronized during simulations . in our model , the statistical spread @xmath37 of the simulated vth , as illustrated in fig .",
    "[ kol-02 ] , provides the measure of this desynchronization . in simulations",
    "the width of the vth interface is computed using eq .",
    "( [ width ] ) .",
    "the representative results of simulations for the case of the minimal load per processor are presented in fig .",
    "[ kol-07 ] . for any number @xmath0 of processors the time evolution of the vth width has two phases .",
    "the first phase , for @xmath52 , is the growth regime , where for @xmath91 the width @xmath37 follows a power law in @xmath3 with the growth exponent @xmath63 . the second phase , after the cross - over time @xmath75 , is the saturation regime , where @xmath37 has a constant value that depends only on the system size and follows a power law in @xmath0 with the roughness exponent @xmath62 .",
    "the values of these exponents are characteristic of the kpz universality class .",
    "explicitly , the evolution can be written as @xmath124 where @xmath74 is the initial regime where the family - vicsek scaling law , eqs.([family1][family2 ] ) , does not hold .",
    "this can be seen directly when the scaling is performed for all @xmath123 , as illustrated in fig .",
    "[ kol-08 ] .",
    "the whisker - like structures that appear after data collapse in the growth phase , clearly observed in fig .  [ kol-08 ] , indicate that in the initial start - up time @xmath81 the curves in fig .",
    "[ kol-07 ] before scaling follow one evolution for all @xmath0 .",
    "the insert shows the universal family - vicsek scaling function , eq.([family2 ] ) , for @xmath91 . here , the cross - over time scales as @xmath53 , where @xmath125 .",
    "the presence of the initial non - scaling growth regime is an artifact of the flat - substrate initial condition .",
    "its duration @xmath74 is a non - universal parameter that can be determined in pdes by monitoring characteristic densities and the utilization , as discussed in sec .",
    "[ util ] .",
    "= 0.42truecm simulated time evolution of the vth width for loads @xmath126 .",
    "there are two growth regimes , characterized by two exponents @xmath127 and @xmath128 .",
    "the duration of the early phase depends on @xmath6 . in this early phase ,",
    "simulations are not in the steady - state : the squared width increases linearly with time.,width=377 ]     = 0.42truecm the scaled time evolution of the simulated vth widths for general values of @xmath6 and @xmath0 .",
    "this scaling function is valid only for steady - state simulations . in the scaling regime",
    "the growth exponent is @xmath63 , as in fig .",
    "[ kol-08 ] .",
    "the time to saturation , when the width is constant , depends on both @xmath6 and @xmath0.,width=377 ]    when the simulations are performed for the case when each processor carries a load @xmath6 , the evolution of the vth width changes . now , as illustrated in fig .",
    "[ kol-09 ] for @xmath73 , there are two distinct phases in the initial growth regime .",
    "the early phase evolves in the rd fashion , having the growth exponent @xmath129 , and the later phase has signatures of the kpz scaling : @xmath130 where both @xmath74 and @xmath75 depend on the processor load .",
    "the initial rd - like growth does not scale with @xmath0 .",
    "this lack of scaling extends to approximately @xmath131 , where @xmath74 marks the end of the initial relaxation period when @xmath17 or @xmath18 .",
    "the physical justification for the presence of the rd growth is that when @xmath19 there is a non - zero probability of having some processors performing state updates without the need of communicating with other processors .",
    "this probability of  uncorrelated \" updates increases when the processor load increases .",
    "however , even for a large but finite @xmath6 there are some processors that may not complete an update without communication with another processor , thus , correlations are build among the processors and propagate throughout the system .",
    "eventually these  correlated \" updates cause the vth interface to saturate .",
    "the net effect of having a large load per processor is the noticeable elongation of the time scale over which the correlations are build , but the dynamics of building these correlations belongs to the same universality class as in the case of the minimal load per processor .",
    "therefore , it is expected that the simulated vth should exhibit kpz universality in this case as well , as soon as the correlations become apparent .",
    "indeed , after the initial transition time @xmath132 the vth widths can be collapsed onto the following scaling function @xcite : @xmath133 where @xmath44 satisfies eq.([family2 ] ) , and @xmath134 with @xmath135 .",
    "this scaling function is presented in fig .",
    "[ kol-10 ] .",
    "accordingly , the vth interfaces belong to the kpz universality class . in the scaling regime ,",
    "the evolution can be written explicitly as @xmath136 where @xmath137 , @xmath138 , @xmath139 and @xmath140 . for @xmath141 , for all @xmath0 the width follows the power low @xmath142 , where @xmath129 .",
    "the consequence of eq.([evol-4 ] ) is that the memory request per processor does not grow without limit but varies as the computations evolve .",
    "the fastest growth characterizes the initial start - up phase .",
    "the length of the start - up phase depends on the load per processor .",
    "the start - up phase is characterized by decreasing values of the utilization . in the steady - state simulations ,",
    "when the utilization has already stabilized at a mean constant value the memory request grows slower , at a decreasing rate @xmath143 . in this phase",
    ", the mean request can be estimated globally from eq.([evol-4 ] ) . the important consequence of scaling , expressed by eq.([evol-3 ] ) , is the existence of the upper bound for the memory request for any finite number of processors and for any load per processor . on the average ,",
    "this upper bound increases proportionally to @xmath144 with the size of conservative pdes .",
    "the characteristic time scale @xmath132 from the first step to the steady - state simulations can be estimated by monitoring the utilization for the minimal processor load ( to determine @xmath74 ) and , subsequently , scaling this time with @xmath6 .",
    "similarly , the characteristic time scale to @xmath145 , when the desynchronization reaches its steady state , can be scaled with the processor load to determine an approximate number of simulation steps to the point when the mean memory request does not grow anymore .",
    "while the conservative algorithm strictly avoids the violation of the local causality constraint , the optimistic algorithm may process the events that are out of the time - stamp order which might violate this constraint . at times",
    "when the conservative algorithm forces the processors to idle the optimistic algorithm enforces the computations and state - updates , thus , according to our adopted definition , the theoretical utilization of the optimistic update scheme is always at its maximum value of one because the processors never idle .",
    "however , some of the events in the thus processed stream of events on a processor must be processed prematurely , judging by the random nature of the optimistic scheme that takes a risk of guessing whenever the next event is not certain .",
    "when in the course of an update cycle a processor receives a _ straggler message _",
    ", i.e. , a message  from the past \" that has its time - stamp smaller than the clock value , all the later events that have been processed incorrectly must be cancelled .",
    "the processor must then send out cancellation messages ( called _ anti - messages _ ) to other processors to _ roll back _ all the events that have been processed prematurely .",
    "thus , in the optimistic update scheme , although the processors never idle , the computation time of the update cycle is not utilized fully efficiently because some part of this time is used for the meaningless operations ( i.e. , creation and processing of the rollbacks ) and only part of a cycle represents the computations that assure the progress of pdes .",
    "there are many variations of optimistic update schemes , e.g. , refs .",
    "@xcite and references in @xcite , oriented to building implementations with better efficiencies and memory management . the key feature of the update mechanism , as described above , and main concepts such as rollback and gvt , first introduced in jefferson s time warp @xcite , can be treated as the generic properties of the optimistic algorithm . in its generic form , the algorithm keeps the already processed events in the memory in case of the necessary re - processing required by the rollbacks .    for the ring communication topology ,",
    "we simulate the growth of the vth corresponding to the optimistic update procedure as poison - random depositions to the lattice sites in analogy to the model described in sec .",
    "[ model ] .",
    "however , in the optimistic model the deposition rule is modified to mimic key features of the optimistic algorithm .",
    "we assume that each update cycle on each processor consists of processing @xmath146 events , only some of which can be eventually committed . with each of these events",
    "there is the associated random time increment @xmath147 . now the integer index @xmath3 represents the update cycle .",
    "the main difference between the optimistic and the conservative simulation models is that any time the conservative would wait the optimistic is allowed to perform a random guess . in the simplest case of totally unbiased guesses , in each cycle",
    "the number of correctly guessed events is obtained from a uniform distribution .",
    "the cumulative simulated lvts that correspond to processing all events form the simulated _ optimistic _ vth .",
    "the cumulative simulated lvts that correspond to processing only the correctly guessed events form the simulated _ progress _ vth , which is embedded in the optimistic vth .",
    "the difference between the optimistic vth and the progress vth represents the cumulative time that has been wasted by generating and processing erroneously guessed events and their associated rollback operations .",
    "we define the overall efficiency of the optimistic algorithm as the ratio of _ the total progress time _ to _ the total computation time_. at @xmath3 , the total progress time and the total computation time are obtained by integrating the progress vth and the optimistic vth , respectively , and are represented by the areas under these vth interfaces . in analogy with the above definition",
    ", we define the overall efficiency of the conservative algorithm as the ratio of the total computation time ( i.e. , the area under the conservative vth ) to the total time that the processors spend on computations and idling .",
    "these efficiencies are presented in fig .",
    "[ kol-11 ] for the worst - case scenario of the minimal load per processor and @xmath148 .",
    "= 0.42truecm simulated time - evolution of overall efficiencies in an optimistic ( upper curve ) and a conservative ( lower curve ) pdes when processors carry minimal loads ( @xmath149).,width=377 ]    our simulations ( fig .",
    "[ kol-11 ] ) confirm the common conception that , in the ideal setting , the optimistic algorithm should outperform the conservative algorithm @xcite .",
    "[ kol-11 ] shows , the lower bound for the steady - state conservative efficiency is about @xmath150 and coincides with the lower bound obtained for the utilization ( fig .",
    "[ kol-03 ] ) . for the same case ,",
    "the steady - state optimistic efficiency is about @xmath151 ; accordingly , the optimistic algorithm has a better utilization of the parallelism . in actual applications",
    "the conservative efficiency can be improved by exploiting in programming a concept of lookahead , based on actual properties of the distributed pdes physical model under consideration .",
    "the statistical spread of the simulated optimistic vth is presented in fig .",
    "[ kol-12 ] ( note , this figure presents the results obtained in only one simulation ) .",
    "the simulated optimistic vth belongs to the rd universality class and the spread in local virtual times grows without limit in accordance to the power law @xmath152 .",
    "intuitively , this result should be expected because , by analyzing the operation mode of optimistic updates , one notices that the processors work totally independently , progressing their lvts in an uncorrelated fashion .",
    "thus , it should be expected that the memory request per processor required to execute generic optimistic pdes grows without bounds as @xmath153 when the simulations are progressing in @xmath3 .",
    "= 0.42truecm simulated time - evolution of desynchronizations in an optimistic pdes when processors carry minimal loads ( @xmath149 ) : the widths of the optimistic vth ( upper curve ,  plus \" symbol ) and of the progress vth ( lower curve , diamonds).,width=377 ]    the unboundedness of the memory request in a generic optimistic scheme can be also justified using quite different arguments @xcite , however , the power - law growth for this request , illustrated in fig .",
    "[ kol-12 ] , has been never reported before .",
    "the adverse ways in which such an unbounded desynchronization affects the performance and standard remedies that can be taken to improve on the use of computing resources by optimizing the optimistic memory management , are well - known issues ( a comprehensive discussion can be found in ref .",
    "@xcite ) . in general ,",
    "the generic optimistic update scheme requires some kind of explicit synchronization procedure that would limit the lengths of rollbacks .",
    "the actual performance of the pdes application may depend on the particulars of the underlying physical dynamics of the physical system being simulated and the best choice of the algorithm may be uncertain in advance without some heuristic trial studies .",
    "for example , recently , overeiner _",
    "@xcite reported the first observation of self - organized critical behavior in the performance of the optimistic time warp algorithm when applied to dynamic monte carlo simulations for ising spins on a regular two - dimensional lattice .",
    "they found that when this pdes approaches a point when the physical ising - spin phase transition is being simulated ( i.e. , the critical point of the physical dynamics ) , the average rollback length increases dramatically and simulation runtimes increase nonlinearly . in ising - spins simulations , increases in rollback lengths are to be expected since around the ising critical temperature the physical system is characterized by the presence of long - range spin - spin correlations and collective behavior , where large - scale spin - domains may be overturned simultaneously .",
    "consequently , approaching the critical point of physical dynamics should produce a decreased number of committed events .",
    "however , the simultaneous nonlinear increase of the simulation runtime when pdes approaches this critical point seems to be a property of the optimistic algorithm since a similar problem is not observed when the same physical system is being simulated using the conservative algorithm @xcite .",
    "one possible explanation for this nonlinear deterioration in runtime may be a nonlinear cache behavior when rollback lengths increase beyond a certain critical value and memory requests increase .",
    "the role of the cache behavior , in particular , the nonlinear performance degradation with the number of cache misses , has been recently discussed in regard with the efficient implementation of an asynchronous conservative protocol for a different physical system @xcite .",
    "another possible explanation , as conjectured in ref .",
    "@xcite , may be the onset of self - organized criticality in the time warp simulation systems , unrelated to the physical critical state .",
    "further studies are required to extract universal properties of optimistic protocols to identify a class of simulation problems that would show in computations a similar behavior to that encountered in pdes for ising spins .",
    "the performance of the distributed pdes algorithms depends in general on three main factors : the partitioning of the simulated system among processors , the communication topology among the processors , and the update protocol being adopted . in a heuristic approach to performance studies ( e.g. , as in ref .",
    "@xcite ) the application algorithm often utilizes physical properties of the model to be simulated ; thus , the conclusions of such studies , as being application specific , may have a limited scope of generalization . in this chapter",
    ", we presented a new way to study the performance of pdes algorithms , which makes no explicit reference to any particular application . in this new approach ,",
    "the system of processors that perform concurrent update operations in a chosen communication topology is seen as a complex system of statistical physics .",
    "first , based on the update and the communication patterns of the algorithm , we construct a simulation model for its representative virtual time horizon .",
    "the statistical properties of this virtual time interface correspond to the properties of the algorithm , that is , to the properties of the pattern in which the correlations are formed and propagate in the computing system .",
    "second , we extract the properties of the algorithm from the statistical properties of its simulated virtual time horizon .    in this chapter ,",
    "we demonstrated how this approach can be used to elucidate the key generic properties of the asynchronous conservative parallel update protocol in the ring communication topology among processors .",
    "for a finite pdes size , i.e. , a finite load @xmath6 per processor and a finite number @xmath0 of processors , our findings can be summarized as follows .",
    "both the utilization of the parallel processing environment and its desynchronization can be derived explicitly as theoretical functions of @xmath0 and @xmath6 ( these are eqs.([util-1]-[util-3 ] ) and eqs.([evol-2]-[evol-4 ] ) , respectively ) .",
    "these functions express the existence of the underlying scaling laws for the corresponding virtual time horizon and are understood as approximate relations in the sense of statistical averages .",
    "the existence of these scaling laws presents one aspect of scalability of this type of pdes algorithm .",
    "the other aspect of algorithmic scalability is the behavior of these functions when @xmath6 and @xmath0 increase . in the limit of large @xmath0",
    "there is a theoretical non - zero lower bound for the utilization , for any @xmath6 , and the value of this bound increases with @xmath6 . on the other hand , for any @xmath6 and @xmath0",
    "there is a finite upper bound for the desynchronization , thus , for the mean memory request per processor during steady - state simulations .",
    "therefore , this kind of conservative pdes algorithm is generally scalable .",
    "the model simulation of the virtual time horizon for the generic optimistic update protocol in the ring communication topology ( sec .",
    "[ compare ] ) showed that the optimistic algorithm lacks the algorithmic scalability .",
    "as the optimistic simulations evolve in the steady state , the width of the optimistic virtual time horizon grows without limit for any finite pdes system .",
    "in other words , even for the minimal load per processor , the memory request per processor ever increases as the square root of the performed number of time - stamped update cycles , as the simulations evolve in time .",
    "therefore , the generic version of this algorithm demands some form of explicit periodic synchronization .",
    "one advantage of studying the pdes algorithms in terms of their corresponding virtual time interfaces is the possibility of deriving explicit diagnostic formulas for the performance evaluation , such as , e.g. , the evaluation of the speedup given by eqs.([speedup-2]-[speedup-3 ] ) or the estimate of the memory request given by eq.([evol-4 ] ) for the conservative algorithm considered in this study .",
    "these theoretical estimates should be treated as the ideal upper bounds for the performance when pdes are implemented on the real computing systems .",
    "a real implementation will produce a deviation from the theoretical prediction , depending on the computing platform and on other components of simulation algorithms .",
    "the extend to which the performance of the implementation scales down from the ideal performance should provide important information about possible bottlenecks of the real implementation and should be a guide to improving the efficiencies .    the other benefit that comes from the modeling of virtual - time interfaces is a relatively inexpensive design tool for new - generation algorithms , without a prior need for heuristic studies .",
    "for example , knowing that in the ring communication topology the maximal conservative memory request per processor for past state savings gets larger as the simulation model gets larger , it is easy to predict the maximum model size that would fit the available memory in the system . however , the available memory resources vary across implementation platforms , so it may happen that one size simulation model may fit on one platform and may be too large for the other , having the same number of available processors .",
    "the question then is : how to modify the update algorithm to allow for the tunable memory request ? obviously , the question concerns the control of the extent to which the processors get desynchronized in the course of simulations , i.e. , the control of the vth width",
    ". one can think about a suitable update pattern that would model the virtual - time interface of the desired properties and then translate this pattern to a new update procedure of the modified algorithm .",
    "this approach has been used to design a constrained conservative update algorithm @xcite , where the desynchronization is controlled by the width of a moving virtual update window and the ring communication topology is modified to accommodate multiple connections between a processor that carries gvt at given update attempt and other processors . in another group of conservative algorithms an implicit autonomous synchronization may be achieved by modifying the ring communication pattern to accommodate connections with the build - in small - world type of communication network @xcite . in both of these modifications , the additional communication network imposed on",
    "the original ring communication topology serves the sole purpose of reducing the desynchronization .",
    "further studies are required in this matter to identify best efficient ways of tuning the desynchronization and the memory request .    in summary ,",
    "the new approach to performance studies , outlined in this chapter , that utilizes simulation modeling of virtual - time interfaces as a tool in algorithm design , opens new interdisciplinary research methodologies in the physics of complex systems in application to computer science .",
    "promising avenues where this kind of approach to complex systems of computer science should lead to useful practical solutions may include the criticality issues in distributed pdes algorithms , their scalability , prognostication , the design of efficient communication networks as well as the development of new diagnostic tools for the evaluation of hardware performance .",
    "this work is supported by the erc center for computational sciences at msu .",
    "this research used resources of the national energy research scientific computing center , which is supported by the office of science of the us department of energy under contract no .",
    "de - ac03 - 76sf00098 . partially supported by nsf grants dmr-0113049 and dmr-0426488 .",
    "dickens p.m. and reynolds p.f . , _ srads with local rollback _ , in _ proceedings of the scs multiconference on distributed simulation , san diego _ , edited by nicol d. and fujimoto r. , simulation series , 22 ( 1990 ) , pp.161164 .",
    "prakash a. and subramanian r. , _ an efficient optimistic distributed scheme based on conditional knowledge _ , in _ proceedings of the sixth parallel and distributed simulation workshop , 1992 scs western multiconference _",
    "( ieee press , new york , 1992 ) , pp.8596 .    steinman j.s . ,",
    "_ breathing time warp _ , in _ proceedings of the seventh workshop on parallel and distributed simulation _ , edited by bagrodia r. and jefferson d. ( ieee computer society press , los alamitos , ca , 1993 ) , pp.109118 .",
    "ferscha , a. and chiola g. , _ self adaptive logical processes : the probabilistic distributed simulation protocol _ , in proceedings of the 27th annual simulation symposium , lajolla , 1994 ( ieee computer society press , los alamitos , ca , 1994 ) , pp.7888 .",
    "korniss g. , toroczkai z. , novotny m.a . , and rikvold p.a .",
    ", _ from massively parallel algorithms and fluctuating time horizons to non - equilibrium surface growth _ , physical review letters , 84 ( 2000 ) , pp.13511354 .    korniss g. , novotny m.a . , toroczkai z. , and rikvold p.a . ,",
    "_ non - equilibrium surface growth and scalability of parallel algorithms for large asynchronous systems _ , in _",
    "computer simulation studies in condensed matter physics xiii _ ed . by landau d.p . ,",
    "lewis s.p . , and schuettler h .- b . , springer proceedings in physics , 86 ( springer - verlag , 2001 ) , pp.183188 .",
    "korniss g. , novotny m.a .",
    ", rikvold p.a . ,",
    "guclu h. , and toroczkai z. , _ going through rough times : from non - equilibrium surface growth to algorithmic scalability _ , materials research society symposium proceedings series , 700 ( 2001 ) , pp.297308 .    korniss g. , novotny m.a . , kolakowska a. , and guclu h. , _ statistical properties of the simulated time horizon in conservative parallel discrete - event simulations _",
    ", in _ proceedings of the 2002 acm symposium on applied computing , sac 2002 _ , ( 2002 ) , pp.132138 .",
    "kolakowska a. , novotny m.a . , and korniss g. , _ algorithmic scalability in globally constrained conservative parallel discrete - event simulations of asynchronous systems _",
    ", physical review e , 67 ( 2003 ) , article no 046703 , 13 pages .",
    "kolakowska a. , novotny m.a . , and rikvold p.a . ,",
    "_ update statistics in conservative parallel - discrete - event simulations of asynchronous systems _ , physical review a , 68 ( 2003 ) , article no 046705 , 14 pages .",
    "toroczkai z. , korniss g. , novotny m.a . , and guclu h. , _ virtual time horizon control via communication network design _ , in _ computational complexity and statistical physics _ ed . by percus a. , istrate g. , and moore c. , santa fe institute studies in the sciences of complexity series ( oxford university press , 2003 ) , in press , arxiv : cond - mat/0304617 .",
    "guclu h. , korniss g. , toroczkai z. , and novotny m.a .",
    ", _ small - world synchronized computing networks for scalable parallel discrete - event simulations _ , in _ complex networks _ ed . by ben - naim e. , frauenfelder h. , and toroczkai z. , _ lecture notes in physics",
    "( springer , 2004 ) , in press .",
    "korniss g. , toroczkai z. , novotny m.a . , and rikvold p.a .",
    ", _ parallelization of a dynamic monte carlo algorithm : a partially rejection - free conservative approach _ ,",
    "journal of computational physics , 153 ( 1999 ) , pp.488508 .",
    "novotny m.a .",
    ", kolakowska a. , and korniss g. , _ algorithms for faster and larger dynamic metropolis simulations _ , in _ the monte carlo method in the physical sciences _ , ed . by gubernatis",
    "j.e , aip conference proceedings , vol .",
    "690 ( american institute of physics , new york , 2003 ) , pp .",
    "240247 .",
    "kolakowska a. , novotny m.a . , and verma p.s .",
    ", _ roughening of the interfaces in @xmath36 dimansional two - component surface growth with an admixture of random deposition _ , physical review e , in press ( 2004 ) , 16 pages , arxiv : cond - mat/0403341 .    overeiner b. j. , schoneveld a. , and sloot p. m. a. , _ self - organized criticality in optimistic simulations of correlated systems _ ,",
    "in _ parallel and distributed discrete event simulation _ , edited by tropper c. ( nova science publishers , new york , 2002 ) , pp.79 - 98 .",
    "p . and turner , s. j. , _ an asynchronous protocol for virtual factory simulation on shared memory multiprocessor systems _ , journal of operational research society , special issue on progress in simulation research , vol .",
    "51 , no . 4 ( 2000 ) , pp.413 - 422"
  ],
  "abstract_text": [
    "<S> * abstract *    = 0.42truecm in a state - update protocol for a system of @xmath0 asynchronous parallel processes that communicate only with nearest neighbors , global desynchronization in operation times can be deduced from kinetic roughening of the corresponding virtual - time horizon ( vth ) . </S>",
    "<S> the utilization of the parallel processing environment can be deduced by analyzing the microscopic structure of the vth . in this chapter </S>",
    "<S> we give an overview of how the methods of non - equilibrium surface growth ( physics of complex systems ) can be applied to uncover some properties of state update algorithms used in distributed parallel discrete - event simulations ( pdes ) . </S>",
    "<S> in particular , we focus on the asynchronous conservative pdes algorithm in a ring communication topology . </S>",
    "<S> the time evolution of its vth is simulated numerically as asynchronous cellular automaton whose update rule corresponds to the update rule followed by this algorithm . </S>",
    "<S> there are two cases of a balanced load considered : ( 1 ) the case of the minimal load per processor , which is expected to produce the lowest utilization ( the so - called worst - case performance scenario ) ; and , ( 2 ) the case of a general finite load per processor . in both cases , we give theoretical estimates of the performance as a function of @xmath0 and the load per processor , i.e. , approximate formulas for the utilization ( thus , the mean speedup ) and for the desynchronization ( thus , the mean memory request per processor ) . it is established that the memory request per processor , required for state savings , does not grow without limit for a finite number of processors and a finite load per processor but varies as the conservative pdes evolve . for a given simulation size , there is a theoretical upper bound for the desynchronization and a theoretical non - zero lower bound for the utilization . </S>",
    "<S> we show that the conservative pdes are generally scalable in the ring communication topology . </S>",
    "<S> the new approach to performance studies , outlined in this chapter , is particularly useful in the search for the design of a new - generation of algorithms that would efficiently carry out an autonomous or tunable synchronization .    </S>",
    "<S> * keywords : * distributed parallel discrete - event simulations , virtual time , desynchronization , asynchronous cellular automata </S>"
  ]
}