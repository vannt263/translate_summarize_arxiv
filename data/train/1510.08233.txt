{
  "article_text": [
    "in socially - aware navigation , like in the case where a robot assists , informs and guides passengers in large and busy airports @xcite , the motion planner deals with non - static scenarios where crowds of pedestrians and dynamic obstacles regularly invalidate paths generated by using standard approaches ( e.g. a * @xcite , rrt @xcite , prm @xcite ) .",
    "each time a path is invalidated , a new motion planning problem has to be solved or in the case of replanning algorithm like d * @xcite a repairing phase should recompute a new path by first updating costs over a grid map .",
    "having a set of @xmath0 precomputed distinct paths , that may be checked for validity in case of the appearance of unexpected obstacles , is a more reasonable approach than solving from scratch the motion planning problem or to replan for each environment s change . moreover",
    "a more rational approach would be to generate @xmath0 distinct paths from @xmath0 different homotopy classes .",
    "a homotopy class is defined by the set of paths with the same start and goal points which can be continuously deformed into one another without intersecting obstacles .",
    "different approaches have been already introduced to generate a set of paths belonging to different homotopy classes .",
    "demeyen and buro @xcite introduce a method for efficient path planning that searches on a graph built using constrained delaunay triangulations .",
    "the obstacles are described via polygonal representation .",
    "the paths , found in the graph , represent different homotopy classes .",
    "eriksson _ et",
    "al _ @xcite find @xmath0 homotopy classes solving the @xmath0 shortest paths problem in a two - dimensional environment with polygonal obstacles .",
    "they introduce the @xmath1 shortest path map : a map of the entire free workspace , partitioned into equivalence class regions such that the @xmath2 shortest path from a start vertex @xmath3 to any point in a single region has the same structure .",
    "moreover they introduce a simple visibility - based algorithm , based on yen s algorithm @xcite , for computing the @xmath0 shortest paths between two fixed points .",
    "_ @xcite propose a method to find different homotopy classes based on a * search over an augmented graph .",
    "the graph represents the topological information via the h - signature , a complex analysis value that characterizes a homotopy class , the graph may contain multiple paths to the goal within the same homotopy class .",
    "et al _ in @xcite select _ k _ best homotopy classes by generating _ k _ shortest paths using katoh s algorithm @xcite . during navigation",
    "the paths feed an optimization algorithm used to generate homotopically distinct kinodynamic trajectories . among those the best one",
    "is selected for the navigation .",
    "they show the method is one order of magnitude faster than @xcite .",
    "best homotopy classes in the voronoi diagram .",
    "the robot is enclosed in the * black circle * , in * red * the path selected to reach the goal position * g*. the * black * voronoi diagram describes the possible ways to go through a crowd by implicitly encoding different homotopy classes . ]    vela _ et al _ @xcite detail a decision support tool to aid air traffic controllers and managers in re - routing traffic : they generate a set of homotopy classes for a given pair of start and goal poses , by computing the @xmath0 shortest paths via the dijkstra algorithm on a voronoi graph .",
    "the latter is generated from a map that encodes weather conditions . a final step",
    "optimize the set of @xmath0-shortest paths with respect to path length and weather avoidance .",
    "et al _ @xcite introduce an algorithm that seeks to find a set of diverse , short paths through a roadmap graph .",
    "the algorithm finds diverse homotopy classes by finding diverse shortest paths avoiding a collection of balls imposed on the graph as simulated obstacles .",
    "the authors compare their approach to the eppstein algorithm @xcite that finds the optimal set of @xmath4 shortest paths with loops and show that , with tolerable loss in shortness , they produce equally diverse path sets orders of magnitude more quickly .",
    "et al _ @xcite propose and compare three different path planning algorithms that exploit the set of homotopy classes generated for any 2d workspace : homotopic a * , homotopic rrt and homotopic bug . their method to generate homotopy classes",
    "modifies the one introduced by jenkins @xcite : it first builds a reference frame in the workspace which is used to identify the homotopy classes and afterwards it builds a topological graph which allows an easy and systematic computation of homotopy classes .",
    "the homotopy classes are sorted according to a lower bound heuristic estimator , then they are used to guide and to constrain topologically the path search .    instead of solving the @xmath0 shortest paths problem with deterministic graph search algorithms like in @xcite , we introduce and show preliminary results of a fast randomized method based on random walks that finds a set of @xmath0 homotopically distinct paths , according to a social cost . as in @xcite",
    "we build a navigation graph from the voronoi diagram .",
    "each path found in the voronoi diagram represents a distinct homotopy class .",
    "differently from @xcite we compare our method to yen s algorithm , a fast algorithm that finds loopless paths . in @xcite",
    "the authors compare their approach to eppstein s algorithm which finds paths with loops therefore having a lower chance to find a more diverse set of paths . in @xcite",
    "the authors use katoh s algorithm , however , it was shown by brander and sinclair @xcite that for small size graphs and paths of small number of vertices , like in the case we consider , yen s is faster than katoh s . furthermore in our approach , instead of using a polygonal representation of the obstacles as in @xcite , we use occupancy grids where obstacles are represented by blocked cells , therefore permitting an easier integration with existing mapping frameworks . we assume in our work that the pedestrians poses are given by a people ( or group ) tracker @xcite .",
    "the contribution of our paper is as follows :    * we introduce a fast , and easy to implement , randomized approach to find a set of @xmath0 paths belonging to @xmath0 different homotopy classes .",
    "* we perform an extensive evaluation and compare our method to yen s algorithm .",
    "our approach is faster than yen s to find a subset of homotopy classes in a voronoi diagram ; * moreover our approach generates more diverse paths than yen s ( the robot has a more diverse set from where to choose the path to follow ) , while obtaining a negligible loss in path quality .    the paper is structured as follows : we detail our new approach and its analysis in section [ sec : approach ] .",
    "we present the experiments in section [ sec : experiments ] and discuss the results in section [ sec : results ] .",
    "section [ sec : conclusions ] concludes the paper .",
    "we introduce a probabilistic approach to find paths belonging to different homotopy classes for socially - aware robot motion planning .",
    "our approach is complete , it can find all the possible paths , namely all the homotopy classes implicitly encoded in the navigation graph built from a voronoi diagram that describes the scenario . having a set of possible paths , we choose the best one according to a cost that considers social interactions between humans .",
    "our method could be used with discrete information received from a people tracker , however , it is equally well suited for use on general occupancy grids . in our case",
    "the input scenario is given as a collection of discrete people poses , @xmath5 , in the 2d workspace , see fig.[fig : graphbuilding ] ( left ) . to frame the motion planning task as a graph search problem",
    ", we build the navigation graph _",
    "g _ of the scenario from the voronoi diagram _ vd _ , generated considering as obstacles also the people poses , see fig.[fig : graphbuilding ] ( middle ) .",
    "we create two additional vertices for the initial robot position and goal position , and connect them to the closest point of the voronoi diagram , see fig.[fig : graphbuilding ] ( right ) . in the navigation graph , built in this way",
    ", different paths from the initial robot position to the goal position belong to different homotopy classes .",
    "the graph _",
    "g(v , e ) _ consists of a set of nodes ( or vertices ) _ v _ and a set of edges _",
    "e_. in this work , _",
    "n _ is the number of nodes in the graph and _ m _ the number of edges .",
    "we associate to each edge @xmath6 , connecting the node @xmath7 to its neighbor @xmath8 , an attribute or cost @xmath9 .",
    "@xmath10 denotes the set of incoming and outgoing edges of @xmath11 .",
    "we compute the set of homotopy classes by running our random walk based algorithm on _",
    "g_.  a walk _ w _ of length @xmath12 in a graph is a sequence of nodes @xmath13 , where each pair of nodes is connected by an edge , @xmath14 for @xmath15 .",
    "the adjacency matrix @xmath16 of @xmath17 expresses the topology of the graph and is defined as    @xmath18_{ij } =    \\begin{cases }      1       & \\quad \\text{if } ( v_{i } , v_j ) \\in e , i \\neq j\\\\      0   & \\quad otherwise\\\\    \\end{cases}\\ ] ] _ walks _ are usually referred to as _ paths_.       +      to find different homotopy classes we introduce the randomized homotopy classes finder ( * rhcf * ) , detailed in alg.[alg : rhcf ] .",
    "we iteratively run the random walk algorithm , see alg.[alg : randomwalk ] , on the weighted undirected graph until @xmath0 distinct paths are found .    given the weighted graph @xmath17 , we start at the initial node @xmath19 , the one where the robot position is mapped to .    at each step of the random walk",
    "we choose a random neighbor of the current node @xmath11 ( see randomneighbor(@xmath11 ) in alg.[alg : rhcf ] ) with probability @xmath20 inversely proportional to the cost @xmath9 associated to the edge @xmath6 @xmath21    where @xmath22 is an element of the adjacency matrix @xmath16",
    ".    the transition matrix @xmath23 of the graph @xmath17 is defined as the @xmath24 matrix where each of its elements is defined as in eq.[transitionprob ] .",
    "each time we leave a node , we mark it as visited ( by removing it from the local copy of the graph @xmath25 ) and do not allow the algorithm to walk through it again in the current run of the random walk .",
    "the walk stops when the goal node is found or when we reach a node with all neighbors marked as visited .",
    "each time a path * p * is generated , we compare it to the ones already found . if the same path was not generated before and it is a valid path , we save it in our homotopy classes set @xmath26 .",
    "a path is valid if its last node is @xmath27 .",
    "all the visited nodes are then marked unvisited .",
    "after the @xmath0 paths have been found , the robot chooses the best one to follow in terms of the social cost function . in the case that the followed path is invalidated by an unexpected obstacle , the planner selects the best path from the set of available paths , given the current status of the robot and of the environment .",
    "* function rhcf(@xmath28 ) @xmath29 *    @xmath30    @xmath31    * function randomwalk(@xmath32 ) @xmath33",
    "@xmath34 @xmath35 *    @xmath36",
    "@xmath37 @xmath38 @xmath39    @xmath40      several state of the art approaches focus on finding the @xmath0-shortest paths @xcite",
    ". here we are interested in finding the @xmath0 best homotopy classes for socially - aware motion planning , therefore we compute the edges weights @xmath9 by using a cost function derived from the social force model introduced by helbing @xcite .",
    "the cost @xmath9 is defined by the line integral of the pedestrians interaction forces on the planar curve @xmath41 described by the edge @xmath42 and the edge length @xmath43 .",
    "@xmath44    the force @xmath45 represents the force generated from the interactions of all the pedestrians @xmath46 with the robot , defined as pedestrian @xmath47 ,    @xmath48    with @xmath49 being the set of @xmath50 pedestrians .",
    "the forces @xmath51 decrease proportional to the distance of their sources to the robot , and are modelled as @xmath52 where @xmath53 specifies the magnitude and @xmath54 the range of the force .",
    "the distance @xmath55 is given by the euclidean distance between the pedestrian @xmath46 and robot , @xmath56 is the sum of their radii ( we approximate each pedestrian with a circle ) .",
    "the term @xmath57 is the normalized vector pointing from @xmath46 to the robot which describes the direction of the force .    to better describe the limited field of view of the pedestrian ,",
    "the forces are scaled with an anisotropic factor ( see fig.[fig : anisoforcemodel ] ) @xmath58 where @xmath59 defines the strength of the anisotropic factor and @xmath60 with @xmath61 representing the direction of the pedestrian @xmath46 .    , @xmath62 , @xmath63 , @xmath64 generated by the social force @xmath65 for a single pedestrian .",
    "* red * regions denote higher cost regions . ]    notice that our approach is not limited to a single definition of cost , different definitions from the social navigation literature could be used @xcite .",
    "to evaluate our approach in terms of planning performance and quality of the solutions , we design a set of experiments by choosing proper environments and metrics .",
    "we compare our approach to yen s algorithm . in both algorithms",
    "we adopt the cost defined in sec.[subsec : costdef ] .",
    "the algorithms are implemented in c++ .",
    "all experiments were running on an ordinary pc with 2.3 ghz intel core i5 and 8 gb of ram .",
    "in @xcite yen introduces an algorithm to find @xmath0-shortest loopless paths for a given pair of start and goal poses . the algorithm computational upper bound increases linearly with the value of @xmath0 : with modern data structure it can be implemented in @xmath66 worst - case time .",
    "we use the c++ implementation introduced by martins and pascoal in @xcite , which is reported to have better performance than the straightforward implementation .",
    "we compare our approach to the yen s algorithm , because it finds a set of @xmath67 best paths with an higher diversity than the ones found by eppstein s and it was shown by brander and sinclair @xcite that for small size graphs and paths of small length ( like the graphs generated from a voronoi diagram ) , it is faster than katoh s .",
    "we design four different environments ( shown in fig [ fig : environments ] ) , to stress different properties of the planner and to study how the algorithm behaves in environments of varying complexity .",
    "we choose scenarios resembling potential situations that could occur while a robot is navigating into an airport . in the _ wall of people _",
    "scenario , the robot needs to find different ways to the goal through a queue of standing people , this scenario has 33 possible homotopy classes . in the _ crowd a _ ( 670 homotopy classes ) and in the _ crowd b _ ( 576 homotopy classes ) scenarios ,",
    "the people are placed in a sparser way forming different groups . in the scenario _ surrounded _ , that has 1826 possible homotopy classes , the robot is placed in the crowd , surrounded by several people .",
    "+        to quantify planning performance and difference in quality with respect to yen s search method we compute the averages of the following metrics : @xmath68 time to get @xmath0 different homotopy classes , @xmath69 normalized cumulative gain , @xmath70 robust diversity of a set @xmath71 of k paths returned by the algorithms .",
    "the _ robust diversity _",
    "measures how large are the intra - set distances between pairs of paths in the set @xmath71 .",
    "let us consider @xmath72 to be the frchet distance between two paths @xmath73 and @xmath74 evaluated at the vertices , as in @xcite .",
    "we define @xmath70 as @xmath75    the normalized cumulative gain @xmath69 is often used to measure the goodness of the ranking results returned by a web search engine algorithm .",
    "it computes how far is the candidate ranking set from the ideal ranking set .",
    "it is based on the definition of relevance ( @xmath76 ) of a single path . in our case",
    "the relevance is defined as the inverse of the path cost .",
    "@xmath77 @xmath78 to paths with smaller costs correspond higher values of cumulative gain .",
    "@xmath69 is normalized by the maximum cumulative gain of @xmath67 best paths generated by yen s .      in the algorithm",
    "only one parameter need to be set : the number of homotopy classes to find . for yen and rhcf algorithms",
    "we find the first 5 paths or homotopy classes ( k=5 ) .",
    "the parameters of the cost function after several informal validations have been set to ( see fig.[fig : anisoforcemodel ] ) : magnitude of social force to pedestrians @xmath79 to 2 , range of social force to pedestrians @xmath80 to 1 , strength of the anisotropic factor @xmath59 to 0.1 , @xmath81 equal to 0.4 @xmath82 .",
    "table [ table : diversityresultsp ] , table [ table : comulativegainresultsp ] and table [ table : timeresultsp ] collect the results generated for all the described scenarios , considering the number of homotopy classes to find equal to five ( @xmath83 ) . table [ table : timeresultsp ] shows the planning time results : our approach is at least five times faster than yen s approach .",
    "table [ table : comulativegainresultsp ] details the results related to the cumulative gain , _ rhcf _ while being faster than yen s it also finds homotopy classes with a gain close the optimal one ( i.e 1 ) : the costs of the solutions generated by the two approaches are only slightly different , the solutions quality of the two approaches are very similar .",
    "table [ table : diversityresultsp ] details the diversity of the paths generated by both approaches : our method outperforms yen s in three environments of the four . only in one scenario , _ wall of people _ , yen s finds more diverse paths .",
    "fig.[fig : crowdacg]-[fig : crowdaplanningtime ] show the metrics trends for different values of @xmath0 in the _ crowd a _ scenario ( the same trends are visible in the other scenarios too ) . for small values of @xmath0 ,",
    "our approach is faster than yen s algorithm in very complex scenarios ( with hundreds of different homotopy classes ) , as it is showed in fig.[fig : crowdaplanningtime ] . in average ,",
    "when @xmath0 is greater than one fourth of the total possible homotopy classes in the scenario , the algorithm is slower than yen s .",
    "our approach has a better robust diversity @xmath84 , considering @xmath0 up to 25 see fig.[fig : crowdadiversity ] : the paths produced are more diverse than the one generated by yen s for small values of @xmath0 . with a higher value for @xmath0 ,",
    "see fig.[fig : crowdacg ] , our approach converges to the optimal value of the normalized cumulative gain @xmath85 values , the one associated to yen s rankings .",
    "in this paper , we introduce the randomized homotopy classes finder , that finds homotopy classes in an undirected weighted graph built from a voronoi diagram .",
    "we use the algorithm to find a set of @xmath67 distinct socially - aware paths from which the robot chooses the best one to follow in terms of a social cost function .",
    "our experimental evaluation shows that our approach is faster than yen s approach .",
    "moreover , as the cumulative gains results show , the paths produced by our approach are not far from the ones generated by yen s that finds the true @xmath67 best paths .",
    "a key property is that our approach computes a set of more diverse paths respect to the baseline : usually different paths share few edges which make them robust to invalidation due to unexpected obstacles . in future work , we intend to further improve the time performance of the _ rhcf _ by introducing a discounting factor that biases the search towards a not frequently visited subset of the state space , therefore increasing the probability to generate paths not yet found .",
    "moreover we are interested to couple our approach with an informed ( weighted ) voronoi diagram that implicitly encodes the social context of the scene .",
    "finally , we plan to integrate our algorithm in a hierarchical framework where an optimal sampling - based motion planner generates ( locally ) optimal kinodynamic trajectories in the best homotopy class found by _",
    "the authors thank markus kuderer and christoph sprunk for valuable discussions and feedback . this work has partly been supported by the european commission under contract number fp7-ict-600877 ( spencer )"
  ],
  "abstract_text": [
    "<S> we introduce and show preliminary results of a fast randomized method that finds a set of @xmath0 paths lying in distinct homotopy classes . </S>",
    "<S> we frame the path planning task as a graph search problem , where the navigation graph is based on a voronoi diagram . </S>",
    "<S> the search is biased by a cost function derived from the social force model that is used to generate and select the paths . </S>",
    "<S> we compare our method to yen s algorithm , and empirically show that our approach is faster to find a subset of homotopy classes . </S>",
    "<S> furthermore our approach computes a set of more diverse paths with respect to the baseline while obtaining a negligible loss in path quality . </S>"
  ]
}