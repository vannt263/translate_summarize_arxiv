{
  "article_text": [
    "cross - layer design of congestion control , routing and scheduling algorithms with quality of service ( qos ) guarantees is one of the most challenging topics in wireless networking .",
    "the back - pressure algorithm first proposed in @xcite and its extensions have been widely employed in developing throughput optimal dynamic resource allocation and scheduling algorithms for wireless systems .",
    "back - pressure - based scheduling algorithms have also been employed in wireless networks with time - varying channels @xcite@xcite@xcite .",
    "congestion controllers at the transport layer have assisted the cross - layer design of scheduling algorithms in @xcite@xcite@xcite , so that the admitted arrival rate is guaranteed to lie within the network capacity region .",
    "low - complexity distributed algorithms have been proposed in @xcite@xcite@xcite@xcite .",
    "algorithms adapted to clustered networks have been proposed in @xcite to reduce the number of queues maintained in the network .",
    "however , delay - related investigations are not included in these works .    in this paper",
    ", we propose a cross - layer algorithm to achieve _ guaranteed throughput _ while satisfying network qos requirements .",
    "specifically , we construct two virtual queues , i.e. , a _ virtual queue at transport layer _ and a _ virtual delay queue _ , to _ guarantee average end - to - end delay bounds_. moreover , we construct a _ virtual service queue _ to _ guarantee the minimum data rate required by individual network flows_. our cross - layer design includes a congestion controller for the input rate to the virtual queue at transport layer , as well as a joint policy for packet admission , routing , and resource scheduling .",
    "we show that our algorithm can achieve a throughput arbitrarily close to the optimal .",
    "in addition , the algorithm exhibits a tradeoff of @xmath1 in the delay bound , where @xmath0 denotes the distance from the optimal throughput .",
    "our main algorithm is further extended : @xmath2 to a set of low - complexity suboptimal algorithms ; @xmath3 from a model with constantly - backlogged sources to a model with sources of arbitrary input rates at transport layer ; @xmath4 to an algorithm employing delayed queue information ; and @xmath5 from a node - exclusive model with constant link capacities to a model with arbitrary link capacities and interference models over fading channels .",
    "the rest of the paper is organized as follows : section ii discusses the related work . in section iii",
    ", the network model is presented , followed by corresponding approaches for the considered multi - hop wireless networks . in section iv",
    ", the optimal cross - layer control and scheduling algorithm is described , and its performance analyzed . in section v , we provide a class of feasible suboptimal algorithms , consider sources with arbitrary arrival rates at transport layer , employ delayed queue information in the scheduling algorithm , and extend the model to arbitrary link capacities and interference models over fading channels .",
    "we present numerical results in section vi .",
    "finally , we conclude our work in section vii .",
    "delay issues in single - hop wireless networks have been addressed in @xcite-@xcite .",
    "especially , the scheduling algorithm in @xcite provides a throughput - utility that is inversely proportional to the delay guarantee .",
    "authors of @xcite have obtained delay bounds for two classes of scheduling policies .",
    "a random access algorithm is proposed in @xcite for lattice and torus interference graphs , which is shown to achieve order - optimal delay in a distributed manner with optimal throughput .",
    "but these works are not readily extendable to multi - hop wireless networks , where additional arrivals from neighboring nodes and routing must be considered .",
    "delay analysis for multi - hop networks with fixed - routing is provided in @xcite .",
    "delay - related scheduling in multi - hop wireless networks have been proposed in @xcite@xcite@xcite@xcite@xcite . however , none of the above - mentioned works provide explicit end - to - end delay guarantees .",
    "there are several works aiming to address end - to - end delay or buffer occupancy guarantees in multi - hop wireless networks .",
    "worst - case delay is guaranteed in @xcite with a packet dropping mechanism .",
    "however , dropped packets are not compensated or retransmitted with the algorithm of @xcite , which may lead to restrictions in its practical implementations .",
    "a low - complexity cross - layer fixed - routing algorithm is developed in @xcite to guarantee order - optimal average end - to - end delay , but only for half of the capacity region .",
    "a scheduling algorithm for finite - buffer multi - hop wireless networks with fixed routing is proposed in @xcite and is extended to adaptive - routing with congestion controller in @xcite .",
    "specifically , the algorithm in @xcite guarantees @xmath1-scaling in buffer size with a @xmath0-loss in throughput - utility , but this is achieved at the expense of the buffer occupancy of the source nodes , where _ an infinite buffer size _ in the network layer is assumed in each source node .",
    "this leads to large average end - to - end delay since the network stability is achieved based on queue backlogs at these source nodes .",
    "compared to the above works , the algorithm presented in this paper develops and incorporates novel virtual queue structures .",
    "different from traditional back - pressure - based algorithms , where the network stability is achieved at the expense of large packet queue backlogs , in our algorithm , `` the burden '' of actual packet queue backlogs is shared by our proposed virtual queues , in an attempt to guarantee specific delay performances .",
    "specifically , we design a congestion controller for _ a virtual input rate _ and assign weights in the scheduling policy as a product of actual packet queue backlog and the weighted backlog of a designed virtual queue , which will be introduced in detail in section iv . as such , the network stabilization is achieved with the help of virtual queue structures that do not contribute to delay in the network . since _ all packet queues _ in the network , including those in source nodes , have finite sizes , all average end - to - end delays are bounded independent of length or multiplicity of paths .",
    "we consider a time - slotted multi - hop wireless network consisting of @xmath6 nodes and @xmath7 flows .",
    "denote by @xmath8 a link from node @xmath9 to node @xmath10 , where @xmath11 is the set of directed links in the network . denoting the set of flows by @xmath12 and the set of nodes by @xmath13",
    ", we formulate the network topology @xmath14 .",
    "note that we consider adaptive routing scenario , i.e. , the routes of each flow are not determined _ a priori _ , which is more general than fixed - routing scenario . in addition , we denote the source node and the destination node of a flow @xmath15 as @xmath16 and @xmath17 , respectively .",
    "we assume that the source node for flow @xmath18 is always backlogged at the transport layer .",
    "let the scheduling parameter @xmath19 denote the link rate assignment of flow @xmath18 for link @xmath20 at time slot @xmath21 according to scheduling decisions and let @xmath22 denote the admitted rate of flow @xmath18 from the transport layer of flow to the source node , where @xmath23 denotes the source at the transport layer of flow @xmath18 .",
    "it is clear that in any time slot @xmath21 , @xmath24 @xmath25 . for simplicity of analysis",
    ", we assume only one packet can be transmitted over a link in one slot , so @xmath26 takes values in @xmath27 @xmath28 .",
    "we also assume that @xmath29 is bounded above by a constant @xmath30 : @xmath31 i.e. , a source node can receive at most @xmath32 packets from the transport layer in any time slot . to simplify the analysis ,",
    "we prevent looping back to the source , i.e. , we impose the following constraints @xmath33 we employ the node - exclusive model in our analysis , i.e. , each node can communicate with at most one other node in a time slot . note that our model is extended to arbitrary interference models with arbitrary link capacities and fading channels in section v.d .",
    "we now specify the qos requirements associated with each flow .",
    "the network imposes an _ average end - to - end delay threshold _",
    "@xmath34 for each flow @xmath18 .",
    "the end - to - end delay period of a packet starts when the packet is admitted to the source node from the transport layer and ends when it reaches its destination .",
    "note that the delay threshold is a time - averaged upper - bound , not a deterministic one .",
    "in addition , each flow @xmath18 requires a minimum data rate of @xmath35 packets per time slot .      for convenience of analysis , we define @xmath36 , where the pair @xmath37 can be considered as a virtual link from transport layer to the source node .",
    "we now model queue dynamics and network constraints in the multi - hop network .",
    "let @xmath38 be the backlog of the total amount of flow @xmath18 packets waiting for transmission at node @xmath10 .",
    "for a flow @xmath18 , if @xmath39 then @xmath40 @xmath41 ; otherwise , the queue dynamics is as follows : @xmath42^+&\\\\ + & \\sum_{j : ( j , n)\\in \\mathcal{l}^c}\\mu_{jn}^{c}(t ) , \\mbox { if } n\\in \\mathcal{n}\\backslash d(c),&\\\\ \\end{aligned}\\end{aligned}\\ ] ] where the operator @xmath43^+$ ] is defined as @xmath43^+=\\max\\{x,0\\}$ ] . note that in ( [ eq:1 ] ) , we ensure that the actual number of packets transmitted for flow @xmath18 from node @xmath10 does not exceed its queue backlog , since a feasible scheduling algorithm may not depend on the information on queue backlogs .",
    "the terms @xmath44 and @xmath45 represent , respectively , the scheduled departure rate from node @xmath10 and the scheduled arrival rate into node @xmath10 by the scheduling algorithm with respect to flow @xmath18 .",
    "note that ( [ eq:1 ] ) is an inequality since the arrival rates from neighbor nodes may be less than @xmath46 if some neighbor node does not have sufficient number of packets to transmit .",
    "since we employ the node - exclusive model , we have @xmath47\\leq 1 \\mbox { , } \\forall n\\in\\mathcal{n}.\\ ] ] from ( [ e:3])([e:10 ] ) , we also have @xmath48 if it is ensured that no packets will be looped back to the source .",
    "now we construct three kinds of virtual queues , namely , virtual queue @xmath49 at transport layer , virtual service queue @xmath50 at sources , and virtual delay queue @xmath51 , to later assist the development of our algorithm : + @xmath2 for each flow @xmath18 at transport layer , we construct a virtual queue @xmath49 which will be employed in the algorithm proposed in the next section .",
    "we denote the virtual input rate to the queue as @xmath52 at the end of time slot @xmath21 and we upper - bound @xmath52 by @xmath32 .",
    "let @xmath53 denote the time - average of @xmath52 .",
    "we update the virtual queue as follows : @xmath54^+ + r_c(t),\\end{aligned}\\ ] ] where the initial @xmath55 . considering the admitted rate @xmath22 as the service rate ,",
    "if the virtual queue @xmath49 is stable , then the time - average admitted rate @xmath56 of flow @xmath18 satisfies : @xmath57 + @xmath3 to satisfy the minimum data rate constraints , we construct a virtual queue @xmath50 associated with flow @xmath18 as follows : @xmath58^+ + a_c,\\ ] ] where the initial @xmath59 .",
    "considering @xmath35 as the arrival rate and @xmath52 as the service rate , if queue @xmath50 is stable , we have : @xmath60 . additionally ,",
    "if @xmath49 is stable , then according to ( [ e:0 ] ) , the minimum data rate for flow @xmath18 is achieved .",
    "+ @xmath4 to satisfy the end - to - end delay constraints , we construct a virtual delay queue @xmath51 for any given flow @xmath18 as follows : @xmath61^++\\sum_{n\\in \\mathcal{n}}u_{n}^c(t)\\ ] ] where the initial @xmath62 .",
    "considering the packets kept in the network in time slot @xmath21 , i.e. , @xmath63 , as the arrival rate and @xmath64 as the service rate , and according to queueing theory , if queue @xmath51 is stable , we have @xmath65 furthermore , if @xmath49 is stable , then according to ( [ e:0 ] ) , we have : @xmath66 in addition , by little s theorem , ( [ eq:3 ] ) ensures that the average end - to - end delay of flow @xmath18 is less than or equal to the threshold @xmath34 with probability ( w.p . )",
    "@xmath67 . from the above description , we know that the network is _ stable _",
    "( i.e. , each queue at all nodes is stable ) and the average end - to - end delay constraint and minimum data rate requirement are achieved if queues @xmath38 and the three virtual queues are stable for any node and flow , i.e. ,    @xmath68    @xmath69    @xmath70    now we define the capacity region of the considered multi - hop network .",
    "an arrival rate vector @xmath71 is called _ admissible _ if there exists some scheduling algorithm ( without congestion control ) under which the node queue backlogs ( not including virtual queues ) are stable .",
    "we denote @xmath72 to be the capacity region consisting of all admissible @xmath71 , i.e. , @xmath72 consists of all feasible rates stabilizable by some scheduling algorithm _ without _ considering qos requirements ( i.e. , delay constraints and minimum data rate constraints ) . to assist the analysis in the following sections , we let @xmath73 denote the solutions to the following optimization problem : @xmath74 @xmath75 where @xmath0 is a positive number which can be chosen arbitrarily small . for simplicity of analysis , we assume that @xmath76 is in the interior of @xmath72 and without loss of generality , we assume that there exists @xmath77 such that @xmath78 @xmath79 . according to @xcite , we have @xmath80 where @xmath81 is the solution to the following optimization : @xmath82",
    "now we propose a control and scheduling algorithm _ * alg * _ for the introduced multi - hop model so that _ * alg * _ stabilizes the network and satisfies the delay constraint and minimum data rate constraint . given @xmath0 , the proposed _ * alg * _ can achieve a throughput arbitrarily close to @xmath83 , under certain conditions related to delay constraints which will be later given in theorem 1 .    the optimal algorithm _ * alg * _ consists of two parts : a congestion controller of @xmath52 , and a joint packet admission , routing and scheduling policy .",
    "we propose and analyze the algorithm in the following subsections .",
    "let @xmath84 be a control parameter for queue length .",
    "we first propose a congestion controller for the input rate of virtual queues at transport layer :    * 1 ) congestion controller of @xmath52 * : @xmath85 where @xmath86 is a control parameter . specifically , when @xmath87 , @xmath52 is set to zero ; otherwise , @xmath88 .",
    "after performing the congestion control , we perform the following joint policy for packet admission , routing and scheduling ( abbreviated as _ scheduling policy _ ) :    * 2 ) scheduling policy * : in each time slot , with the constraints of the underlying interference model as described in section iii including ( [ e:3])([e:10])([e:4 ] ) , the network solves the following optimization problem :    @xmath89    @xmath90    @xmath91    where @xmath92 and @xmath93 are defined as follows : @xmath94 @xmath95^+,\\ ] ] with weight assignment as follows @xmath96,\\mbox { if } ( m , n)\\in \\mathcal{l } , & \\\\ & \\frac{u_{s(c)}^c(t)}{q_m}[q_m-\\mu_m - u_{b(c)}^c(t)],&\\\\ & \\qquad\\qquad\\qquad\\mbox { if } ( m , n)=(s(c),b(c ) ) , & \\\\ & 0 , \\qquad\\qquad\\quad\\mbox { otherwise . } & \\\\ \\end{aligned } \\right.\\end{aligned}\\ ] ] in addition , when @xmath97 , without loss of optimality , we set @xmath98 @xmath79 to maximize ( [ eq:11 ] ) .    note that @xmath99 forms the @xmath20 pairs in @xmath26 over which the optimization ( [ eq:11 ] ) is performed .",
    "thus , the optimization is a typical maximum weight matching ( mwm ) problem .",
    "we first decouple flow scheduling from the mwm .",
    "specifically , for each pair @xmath20 , the flow @xmath92 is fixed as the candidate for transmission .",
    "we then assign the weight as @xmath93 .",
    "note also that although similar product form of the weight assignment ( [ e:6 ] ) have been utilized in @xcite@xcite , no virtual queues are involved there .",
    "whereas in _ * alg * _ , we assign weights as a product of weighted virtual queue backlog ( @xmath100 ) and the actual back - pressure , in an aim to shift the burden of the actual queue backlog to the virtual backlog .    to analyze the performance of the algorithm",
    ", we first introduce the following proposition .    employing _ * alg * _ , each queue backlog in the network has a deterministic worst - case bound : @xmath101    now we present our main results in theorem 1 .    _",
    "remark 1 ( network stability ) _ : the inequalities ( [ eq:26 ] ) from proposition 1 and ( [ eq:14 ] ) from theorem 1 indicate that _ * alg * _ stabilizes the actual and virtual queues . as an immediate result , _ * alg * _ stabilizes the network and satisfies the average end - to - end delay constraint and the minimum data rate requirement .",
    "in addition , proposition 1 states that the actual queues are _ deterministically _ bounded by @xmath102 , which ensures finite buffer sizes for all queues in the network , including those in source nodes .    _ remark 2 ( optimal utility and delay analysis ) : _ since @xmath103 are stable , the inequality ( [ eq:16 ] ) gives a lower - bound on the throughput that _ * alg * _ can achieve . given some @xmath104 , since @xmath105 is independent of @xmath106 , ( [ eq:16 ] ) also ensures that _ * alg * _ can achieve a throughput arbitrarily close to @xmath83 . when @xmath0 tends to @xmath107 ,",
    "_ * alg * _ can achieve a throughput arbitrarily close to the optimal value @xmath108 with the tradeoff in queue backlog upper - bound @xmath102 and the delay constraints @xmath109 , both of which are lower - bounded by the reciprocal terms of @xmath0 as shown in ( [ eq:7 ] ) in theorem 1 .",
    "_ in other words , the average end - to - end delay bound is of order @xmath1_. we note that in _ * alg * _ , the control parameter @xmath106 , which is typically chosen to be large , does not affect the actual queue backlog upper - bound or the average end - to - end delay bound , but only affects the upper - bound of the virtual queue backlogs ( shown in ( [ eq:14 ] ) ) . in comparison , in the algorithm proposed in @xcite , the authors show that the internal buffer size is deterministically bounded with order @xmath1 , but _ at the expense of _ the buffer occupancy at source nodes which is of order @xmath110 , where @xmath106 has to be large enough for their algorithm to approach @xmath83 .",
    "this design assumes an _ infinite buffer size _ at source nodes and typically results in congestion at the source nodes as shown in the simulation results in @xcite , which further induces an unguaranteed and large average end - to - end delay .",
    "moreover , one can expect that there are no buffer - size guarantees for single - hop flows by employing the algorithm in @xcite .",
    "in contrast , in our proposed _ * alg * _ , we shift `` the burden of @xmath106 '' from actual queues to virtual queues and ensure that the average end - to - end delay constraints are satisfied with finite buffer sizes for all actual _ packet _ queues .    _ remark 3 ( implementation issues ) _ : to update the virtual queue @xmath51 and perform the @xmath52 congestion controller at the transport layer , the queue backlog information of flow @xmath18 is crucial .",
    "this information can be collected back to the source node by piggy - backing it on ack from each node . in order to account for such delay of queue backlog information ,",
    "the @xmath52 congestion controller ( [ eq:25 ] ) of the algorithm can employ delayed queue backlog of @xmath51 .",
    "similarly , delayed queue backlog information of @xmath49 can be employed at the weight assignment ( [ e:6 ] ) of the scheduling policy . the modified algorithm and its validity",
    "are further discussed in section v.c . by employing delayed queue backlog information , we can extend the algorithm to distributed implementation in much the same way as in @xcite@xcite to achieve _ a fraction _ of the optimal throughput . in order to achieve a throughput arbitrarily close to the optimal value with distributed implementation",
    ", we can employ random access techniques @xcite@xcite in the scheduling policy with fugacities @xcite chosen as exp@xmath111^+}{q_m}\\}$ ] for each link @xmath112 , where @xmath113 is a local estimate ( e.g. , delayed information ) of @xmath49 and @xmath114 a positive weight .",
    "it can be shown that the distributed algorithm can still achieve an average end - to - end delay of order @xmath1 with the time - scale separation assumption @xcite@xcite@xcite .",
    "a variation of such distributed implementation in single - hop networks can be found in our recent work @xcite .",
    "we prove theorem 1 in the following subsection .",
    "before we proceed , we present the following lemmas which will assist us in proving theorem 1 .    the proof of lemma 1 is trivial and omitted .",
    "we will later use lemma 1 to simplify virtual queue dynamics .",
    "note that it is not necessary for the randomized algorithm stat to satisfy the average end - to - end delay constraints .",
    "similar formulations of stat and their proofs have been given in @xcite and @xcite , so we omit the proof of lemma 2 for brevity .    _ remark 4 _ : according to the stat algorithm in lemma 2 , we assign the input rates of the virtual queues at transport layer as @xmath115 .",
    "thus , we also have @xmath116 . according to the update equation ( [ eq:4 ] ) ,",
    "it is easy to show that the virtual queues under stat are bounded above by @xmath32 and the time - average of @xmath117 satisfies : @xmath118 . note that @xmath119 can take values as @xmath73 or @xmath120 or @xmath121 , where we recall @xmath122 and @xmath123 @xmath79 .",
    "to prove theorem 1 , we first let @xmath124 and define the lyapunov function @xmath125 as follows : @xmath126 it is obvious that @xmath127 .",
    "we denote the lyapunov drift by @xmath128 where we recall that @xmath129 and we employ lemma 1 to deduce the second inequality .    from ( [ e:16 ] ) , we have @xmath130 where we employ the fact deduced from ( [ e:4])([e:5 ] ) that @xmath131 and @xmath132 when @xmath133 and @xmath134 when @xmath135 .",
    "note that we use the summation index @xmath136 and @xmath137 interchangeably for convenience of analysis .    from the queue length dynamics ( [ eq:4 ] ) and by employing lemma 1 , we have : @xmath138 from the virtual queue dynamics ( [ eq:2 ] ) , we have : @xmath139 from the virtual queue dynamics ( [ e:1 ] ) , we have : @xmath140 substituting ( [ e:11])([eq:6])([e:12])([e:13 ] ) into the lyapunov drift ( [ eq:12 ] ) and subtracting @xmath141 from both sides , we then have : @xmath142 we can rewrite the last term of rhs of ( [ e:14 ] ) by simple algebra as @xmath143    then , the second term and the last term of the rhs of ( [ e:14 ] ) are minimized by the congestion controller ( [ eq:25 ] ) and the scheduling policy ( [ eq:11 ] ) , respectively , over a set of feasible algorithms including the stationary randomized algorithm stat introduced in lemma 2 and remark 4 .",
    "we can substitute into the second term of rhs of ( [ e:14 ] ) a stationary randomized algorithm with admitted arrival rate vector @xmath73 and into the last term with a stationary randomized algorithm with admitted arrival rate vector @xmath120 .",
    "thus , we have :    @xmath144    when ( [ eq:7 ] ) holds , we can find @xmath145 such that @xmath146 @xmath147 and @xmath148 .",
    "recall that @xmath149 is defined such that @xmath123 @xmath79 .",
    "thus , we have : @xmath150 where @xmath151 .",
    "we take the expectation with respect to the distribution of @xmath152 on both sides of ( [ eq:10 ] ) and take the time average on @xmath153 , which leads to @xmath154    since @xmath155 is bounded above ( say , by a constant @xmath156 with @xmath157 ) and @xmath158 is nonnegative , by taking limsup of @xmath21 on both sides of ( [ eq:13 ] ) , we have : @xmath159&\\\\ \\leq&\\frac{b'}{\\delta},&\\\\ \\end{aligned}\\end{aligned}\\ ] ] which proves ( [ eq:14 ] ) .    by taking liminf of @xmath21 on both sides of ( [ eq:13 ] )",
    ", we have @xmath160 which proves ( [ eq:16 ] ) since the first term of the rhs of ( [ eq:17 ] ) is nonnegative .",
    "solving mwm optimization problem can be np - hard depending on the underlying interference model as indicated in @xcite . in this section",
    ", we introduce a group of suboptimal algorithms that aim to achieve at least a @xmath161 fraction of the optimal throughput .",
    "we denote the scheduling parameters of suboptimal algorithms by @xmath162 . for convenience",
    ", we also denote the scheduling parameters of _ * alg * _ by @xmath163 .",
    "algorithms are called _ suboptimal _ if the scheduling parameters @xmath162 satisfy the following : @xmath164 where @xmath165 is constant and we recall that @xmath92 and @xmath93 are defined in section iv.a . in addition , the congestion controller of suboptimal algorithms is the same as that of _ * alg * _ ( [ eq:25 ] ) .",
    "following the same analysis of _ * alg * _ , proposition 1 holds for suboptimal algorithms , i.e. , the queue backlogs are bounded above by @xmath102 , and we derive the following theorem :    _ remark 5 _ : from theorem 2 , given an arbitrarily small @xmath0 , we show that a suboptimal algorithm can _ at least _ achieve a throughput arbitrarily close to a fraction @xmath161 of the optimal results @xmath83 .",
    "suboptimal algorithms include the well - known greedy maximal matching ( gmm ) algorithm @xcite with @xmath166 as well as the solutions to the maximum weighted independent set ( mwis ) optimization problem such as gwmax and gwmin proposed in @xcite with @xmath167 , where @xmath168 is the maximum degree of the network topology @xmath169 .",
    "the delay bound and throughput tradeoff in theorem 1 still hold in theorem 2 .      note that in the previous model description , we assumed that the flow sources are constantly backlogged , that is , the congestion controller ( [ eq:25 ] ) can always guarantee @xmath88 when @xmath170 . in this subsection",
    ", we present an optimal algorithm when the flows have arbitrary arrival rates at the transport layer .",
    "let @xmath171 denote the arrival rate of flow @xmath18 packets at the beginning of the time slot @xmath21 at the transport layer .",
    "we assume that @xmath171 is i.i.d .",
    "with respect to @xmath21 with mean @xmath172 .",
    "for simplicity of analysis , we assume @xmath173 to be in the exterior of the capacity region @xmath72 so that a congestion controller is needed and we assume that @xmath171 is bounded above by @xmath32 @xmath79 . is bounded above by some constant @xmath174 @xmath79 , where @xmath175 .",
    "] let @xmath176 denote the backlog of flow @xmath18 data at the transport layer which is updated as follows : @xmath177^+,l_m\\},\\ ] ] where @xmath178 is the buffer size for flow @xmath18 at the transport layer .",
    "note that we have @xmath179 and @xmath180 if there is no buffer for flow @xmath18 at the transport layer .",
    "following the idea introduced in @xcite , we construct a virtual queue @xmath181 and an auxiliary variable @xmath182 for each virtual input rate @xmath52 , with queue dynamics for @xmath181 as follows @xmath183^+ + v_c(t),\\ ] ] where initially we have @xmath184 .",
    "the intuition is that @xmath182 serves as the function of @xmath52 in congestion controller ( [ eq:25 ] ) and we note that when @xmath181 is stable , we have @xmath185 , where @xmath186 is the time average rate for @xmath182 , recalling that @xmath53 is the time average rate for @xmath52 .",
    "thus , when @xmath181 and @xmath49 are stable , if we can ensure the value @xmath187 is arbitrarily close to the optimal value @xmath188 , then so is the throughput @xmath189 since @xmath190 .",
    "now we provide the optimal algorithm for arbitrary arrival rates at the transport layer :    * 1 ) congestion controller * : @xmath191 @xmath192 @xmath193 where @xmath194 is a weight associated with the virtual queue @xmath181 .",
    "note that ( [ eq:22 ] ) and ( [ eq:23 ] ) can be solved independently . specifically ,",
    "when @xmath195 , @xmath182 is set to zero ; otherwise , @xmath196 . when @xmath197 , @xmath52 is set to zero ; otherwise , @xmath198 .",
    "* 2 ) scheduling policy * : the scheduling algorithm is the same as that of _ * alg * _ provided in section iv.b , except for the updated constraints : @xmath199 .",
    "since the scheduling policy is not changed , proposition 1 still holds .",
    "and we present a theorem below for the performance of the algorithm :    theorem 3 shows that optimality is preserved and @xmath1 delay scaling is kept .      recall that in _ * alg * _ , congestion controller ( [ eq:25 ] ) is performed at the transport layer and link weight assignment in ( [ e:6 ] ) is performed locally at each link .",
    "thus , in order to account for the propagation delay of queue information , we employ delayed queue backlog of @xmath200 in ( [ eq:25 ] ) and employ delayed queue backlog of @xmath103 for links in @xmath11 in ( [ e:6 ] ) .",
    "specifically , we rewrite ( [ eq:25 ] ) in _ * alg * _ as : @xmath201 where @xmath202 is an integer number that is larger than the maximum propagation delay from a source to a node , and we rewrite ( [ e:6 ] ) as : @xmath203,&\\\\ & \\qquad\\qquad\\qquad\\mbox { if } ( m , n)\\in \\mathcal{l } , & \\\\ & \\frac{u_{s(c)}^c(t)}{q_m}[q_m-\\mu_m - u_{b(c)}^c(t)],&\\\\ & \\qquad\\qquad\\qquad\\mbox { if } ( m , n)=(s(c),b(c ) ) , & \\\\ & 0 , \\qquad\\qquad\\quad\\mbox { otherwise . } & \\\\ \\end{aligned } \\right.\\end{aligned}\\ ] ]    proposition 1 still holds and we present a theorem for the scheduling algorithm using delayed queue backlog information , which maintains the throughput optimality and @xmath1 scaling in delay bound :    on employing delayed queue backlogs , we can extend the centralized optimization problem ( [ eq:11 ] ) to distributed implementations with methods introduced in remark 3 .",
    "recall that in the model description in section iii , the link capacity is assumed constant ( one packet per slot ) and node - exclusive model is employed . in this subsection , we extend the model to arbitrary link capacities and arbitrary interference models with fading channels of finite channel states .",
    "thus , instead of ( [ e:4 ] ) , we have @xmath204 , where @xmath205 is the feasible activation set for time slot @xmath21 determined by the underlying interference model and current channel states , with link capacity constraints @xmath206 , where @xmath207 is the arbitrarily chosen link capacity for a link @xmath112 .",
    "we define @xmath208 .",
    "note that it is clear that @xmath209 .",
    "then we can update the optimization ( [ eq:11 ] ) and weight assignment ( [ e:6 ] ) , respectively , as follows : @xmath210 @xmath211,\\mbox { if } ( m , n)\\in \\mathcal{l } , & \\\\ & \\frac{u_{s(c)}^c(t)}{q_m}[q_m-\\mu_m - u_{b(c)}^c(t)],&\\\\ & \\qquad\\qquad\\qquad\\mbox { if } ( m , n)=(s(c),b(c ) ) , & \\\\ & 0 , \\qquad\\qquad\\quad\\mbox { otherwise . } & \\\\ \\end{aligned } \\right.\\ ] ]    it is not difficult to check that proposition 1 still holds with @xmath212 and theorem 1 holds with a different definition of constant @xmath105 .",
    "the above modified algorithm can be further extended to solve power allocation problems , where we refer interested readers to our recent work @xcite .",
    "in this section , we present the simulation results for the proposed optimal algorithm _ * alg*_. simulations are run in matlab 2009a with results averaged over @xmath213 time slots . in the network topology",
    "illustrated in figure [ fig1 ] , there are three source - destination pairs @xmath214 , @xmath215 and @xmath216 with same poisson arrival rates and @xmath217 . the required minimum data rate for the three flows are all set to @xmath218 .",
    "we denote by _ bp _ the back - pressure scheduling algorithm in @xcite with a congestion controller in @xcite , and denote by _ finite buffer _ the cross - layer algorithm developed in @xcite with buffer size equal to the queue length limit @xmath102 .",
    "note that it is shown in simulation results in @xcite that finite buffer algorithm ensures much smaller internal queue length ( of nodes excluding the source node ) than bp algorithm ( and queue length is related to delay performance ) .",
    "we set the control parameter @xmath219 , where in simulations we find that a higher @xmath106 can not further improve the throughput .    [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     we first illustrate in table [ tab1 ] the throughput optimality of _ * alg * _ when the sources are constantly backlogged .",
    "we loosen the delay constraint as @xmath220 .",
    "as we increase the control parameter @xmath102 , the _ * alg * _ achieves a throughput approaching the throughput of bp algorithm which is known to be optimal .",
    "we also note that this approximation in throughput results in worse average end - to - end delay performance , which complies with remark 1 .",
    "we then illustrate the throughput and delay tradeoff for both the * _ alg _ * and its corresponding suboptimal gmm algorithm in figure [ fig2 ] for the case of arbitrary arrival rates at transport layer with @xmath179 , where we set @xmath221 and @xmath222 for each flow @xmath18 .",
    "note that this pair of @xmath102 and @xmath34 shows that the bound in ( [ eq:7 ] ) is actually quite loose , and thus our algorithm can achieve better delay performance than stated in ( [ eq:7 ] ) .",
    "figure [ fig2 ] shows that the average end - to - end delay under _ * alg * _ is well below the constraint ( @xmath222 ) and lower than that under bp and finite buffer algorithms .",
    "the throughput of _ * alg * _ is close to ( although lower than ) that of the optimal bp algorithm when arrival rates are small ( @xmath223 ) .",
    "specifically , when the arrival rate is @xmath224 , _ * alg * _ achieves a throughput @xmath225 more than the gmm algorithm and @xmath226 less than bp algorithm , with an average end - to - end delay @xmath227 less than the bp algorithm . in the large - input - rate - region ( @xmath228 )",
    ", we also observe that the delay in both the bp and finite buffer algorithm violates the delay constraints .",
    "in addition , in the above illustrated scenarios with backlogged and arbitrary arrival rates , the minimum arrival rates and average end - to - end delay requirements are satisfied for _ individual _ flows under _ * alg*_. as a side note , the average end - to - end delay in all four algorithms in figure [ fig2 ] first decreases , which can be explained by the intuition that all the algorithms are based on back - pressure of links ( i.e. , queue backlog difference of links ) and the queue backlog difference tends to be larger for each hop with a larger arrival rate . when arrival rate further increases , congestion level becomes higher since more packets are admitted into the network",
    "in this paper , we proposed a cross - layer framework which approaches the optimal throughput arbitrarily close for a general multi - hop wireless network .",
    "we show a tradeoff between the throughput and average end - to - end delay bound while satisfying the minimum data rate requirements for individual flows .",
    "our work aims at a better understanding of the fundamental properties and performance limits of qos - constrained multi - hop wireless networks .",
    "while we show an @xmath1 delay bound with @xmath0-loss in throughput , how small the actual delay can become still remains elusive , which is dependent on specific network topologies . in our future work",
    ", we will investigate the capacity region under end - to - end delay constraints applied to different network topologies .",
    "our future work will also involve power management in the scheduling policies .",
    "1    l. tassiulas and a. ephremides , `` stability properties of constrained queueing systems and scheduling policies for maximum throughput in multihop radio networks , '' in _ ieee trans .",
    "1936 - 1948 , dec . 1992 .",
    "m. neely and e. modiano ,  dynamic power allocation and routing for time varying wireless networks \" , in _ ieee journal on selected area in communications _ , vol.23 , no.1 , pp .",
    "89 - 103 , march 2005 .",
    "a. eryilmaz , r. srikant and j. perkins , `` stable scheduling policies for fading wireless channels '' , in _ ieee / acm transactions on networking _ , vol .",
    "2 , pp . 411 - 424 , april 2005 .",
    "m. lotfinezhad , b. liang and e. sousa , `` on stability region and delay performance of linear - memory randomized scheduling for time - varing networks '' , in _ ieee / acm transactions on networking _ , vol .",
    "17 , no . 6 , pp . 1860 - 1873 , december 2009 .",
    "l. georgiadis , m. neely and l.tassiulas ,  resource allocation and cross - layer control in wireless networks \" , in _ foundations and trends in networking _ ,",
    "pp . 1 - 149 , 2006 .",
    "m. neely ,  energy optimal control for time varying wireless networks \" , in _ ieee transactions on information theory _",
    "52 , no . 7 , pp . 2915 - 2934 , july 2006 .",
    "a. eryilmaz and r. srikant , `` joint congestion control , routing and mac for stability and fairness in wireless networks '' , in _ ieee journal on selected areas in communications _ , vol .",
    "24 , no . 8 , pp .",
    "1514 - 1524 , august 2006 .",
    "x. wu , r. srikant and j. perkins , `` scheduling efficiency of distributed greedy scheduling algorithms in wireless networks '' , in _ ieee trans .",
    "mobile comput .",
    "_ , vol . 6 , no . 6 , pp .",
    "595 - 605 , june 2007 .",
    "p. chaporkar , k. kar and s. sarkar , `` throughput guarantees through maximal scheduling in wireless networks '' , in _ proc .",
    "43rd annual allerton conference on communicastions , control and computing _ , 2005 .",
    "a. eryilmaz , a. ozdaglar , d. shah and e. modiano , `` distributed cross - layer algorithms for the optimal control of multi - hop wireless networks '' , to appear in _",
    "ieee / acm transactions on networking_.    x. lin and s. rasool,``a distributed joint channel - assignment , scheduling and routing algorithm for multi - channel ad hoc wireless networks '' , in _ proc .",
    "ieee infocom07 _ , may 2007 .",
    "l. ying , r. srikant and d. towsley , ",
    "cluster - based back - pressure routing algorithm \" , in _ proc .",
    "ieee infocom08 _ , april 2008 .",
    "g. gupta and n. shroff , `` delay analysis for wireless networks with single hop traffic and general interference constraints '' , in _ ieee / acm transactions on networking _",
    ", 2010 .",
    "i. hou and p. kumar , `` utility maximization for delay constrainted qos in wireless '' , in _ proc .",
    "ieee infocom 2010 _ , march 2010 .",
    "i. hou and p. kumar , `` scheduling heterogeneous real - time traffic over fading wireless channels '' , in _ proc .",
    "ieee infocom 2010 _ , march 2010 .",
    "i. hou and p. kumar , `` a theory of qos for wireless '' , in _ proc .",
    "ieee infocom09 _ , april 2009 .",
    "i. hou and p. kumar , `` admission control and scheduling for qos guarantees for variable - bit - rate applications on wireless channels '' , in _ proc .",
    "acm mobihoc _ , pp .",
    "175 - 184 , 2009 .",
    "m. neely , `` delay - based network utility maximization '' , in _ proc .",
    "ieee infocom 2010 _ , march 2010 .",
    "k. kar , x. luo , and s. sarkar , `` delay guarantees for throughput - optimal wireless link scheduling '' , in _ proc .",
    "ieee infocom09 _ , april 2009 .",
    "m. lotfinezhad and p. marbach , `` throughput - optimal random access with order - optimal delay '' , _ to appear in ieee infocom11_.",
    "h. xiong , r. li , a. eryilmaz , and e. ekici , `` delay - aware cross - layer design for network utility maximization in multi - hop networks '' , _ to appear in ieee journal on selected areas in communications _ , 2011 .",
    "g. gupta and n. shroff , `` delay analysis for multi - hop wireless networks '' , in _ proc .",
    "ieee infocom09 _ , april 2009 .",
    "v. venkataramanan , x. lin , l. ying and s. shakkottai , `` on scheduling for minimizing end - to - end buffer usage over multihop wireless networks '' , in _ proc .",
    "ieee infocom2010 _ , march 2010 .",
    "j. ryu , l. ying and s. shakkottai , `` back - pressure routing for intermittently connected networks '' , in _",
    "ieee infocom2010 mini - conference _ , march 2010 .",
    "l. bui , r. srikant and a. stolyar , `` novel architectures and algorithms for delay reduction in back - pressure scheduling and routing '' , in _ ieee infocom 2009 mini - conference _ , april 2009 .",
    "l. ying , s. shakkottai , and a. reddy , `` on combining shortest - path and back - pressure routing over mult - hop wireless networks '' , in _ proc .",
    "ieee infocom09 _ , april 2009 .",
    "k. jung and d. shah , `` low delay scheduling in wireless networks '' , in _ ieee international symposium on information theory ( isit ) _ , june 2007 .",
    "m. neely , `` opportunistic scheduling with worst case delay guarantees in single and multi - hop networks '' , in _ proc .",
    "ieee infocom 2011 _ , april 2011 .",
    "p. huang , x. lin , and c. wang , `` a low - complexity congestion control and scheduling algorithm for multi - hop wireless networks with order - optimal per - flow delay '' , technical report , purdue university , available : http://cobweb.ecn.purdue.edu/@xmath229linx/paper/infocom11-window-tech.pdf .",
    "p. giaccone , e. leonardi , and d. shah , `` throughtput region of finite - buffered networks '' , in _ ieee transactions on parallel and distributed systems _",
    "2 , pp . 251 - 263 , feb . 2007 .",
    "l. le , e. modiano , and n. shroff , `` optimal control of wireless networks with finite buffers '' , in _ proc .",
    "ieee infocom2010 _ , april 2010 .",
    "m. neely , ",
    "dynamic power allocation and routing for satellite and wireless networks with time varing channels \" , ph.d .",
    "dissertation , mass .",
    "( mit ) , cambridge , ma , 2003 .",
    "g. sharma , r. mazumdar and n. shroff , `` on the complexity of scheduling in wireless neworks '' , in _ proc .",
    "of the 12th annual international conference on mobile computing and networking ( mobicom06 ) _ , 2006 , pp .",
    "227 - 238 .",
    "c. joo , x. lin and n. shroff , `` greedy maximal matching : performance limits for arbitrary network graphs under the node - exclusive interference model '' , in _ ieee transactions on automatic control _ , vol .",
    "2734 - 2744 , december 2009 .",
    "s. sakai , m. togasaki and k. yamazaki , `` a note on greedy algorithms for the maximum weighted independent set problem '' , in _",
    "discrete applied mathematics _",
    "313 - 322 , 2003 .",
    "l. jiang and j. walrand,``a distributed algorithm for throughput and utility maximization in wireless networks '' , _ to appear in transactions on networking _ , 2010 .",
    "j. ni , b. tan , and r. srikant , `` q - csma : queue - length based csma / ca algorithms for achieving maximum throughput and low delay in wireless networks '' , in _",
    "ieee infocom10 _ , april 2010 .",
    "s. rajagopalan , d. shah , and j. shin , `` network adiabatic theorem : an efficient randomized protocol for contention resolution '' , in _",
    "acm sigmetrics09 _ , pp .",
    "133 - 144 , 2009 .",
    "l. jiang , m. leconte , j. ni , r. srikant , and j. walrand , `` fast mixing of parallel glauber dynamics and low - delay csma scheduling '' , arxiv.org:1008.0227v1 , august 2010 .",
    "d. xue , r. murawski , and e. ekici , `` distributed throughput - optimal scheduling with order - optimal delay '' , technical report , ohio state university , available : http://www.ece.osu.edu/@xmath229xued/distributed.pdf    d. xue and e. ekici , `` optimal power allocation in multi - hop wireless networks with finite buffers '' , in _ proc .",
    "of ieee international conference on communications ( icc 2011 ) _ , june 2011 .",
    "before we proceed to the proof , we extend the stationary randomized algorithm stat introduced in lemma 2 and remark 4 . given @xmath119 introduced in lemma 2 and given flow @xmath18 at node @xmath10 , recall that @xmath230 is i.i.d . with mean @xmath173 and @xmath231 element - wise .",
    "the flow control for stat can be given as : admit @xmath232 w.p .",
    "@xmath233 ; otherwise , @xmath234 .",
    "then @xmath235 , @xmath41 .",
    "now take @xmath236 @xmath79 .",
    "then we also have @xmath237 .",
    "note that @xmath238 and @xmath239 .",
    "now we present the proof ."
  ],
  "abstract_text": [
    "<S> in this paper , we propose a cross - layer scheduling algorithm that achieves a throughput `` @xmath0-close '' to the optimal throughput in multi - hop wireless networks with a tradeoff of @xmath1 in delay guarantees . </S>",
    "<S> the algorithm aims to solve a joint congestion control , routing , and scheduling problem in a multi - hop wireless network while satisfying per - flow average end - to - end delay guarantees and minimum data rate requirements . </S>",
    "<S> this problem has been solved for both backlogged as well as arbitrary arrival rate systems . </S>",
    "<S> moreover , we discuss the design of a class of low - complexity suboptimal algorithms , effects of delayed feedback on the optimal algorithm , and extensions of the proposed algorithm to different interference models with arbitrary link capacities . </S>"
  ]
}