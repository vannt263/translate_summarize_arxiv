{
  "article_text": [
    "given an eulerian graph ( a connected graph in which all the vertices have even degree ) , it is well known that an eulerian circuit , that is , a circuit that traverses each edge exactly once , can be found in polynomial time .",
    "here we have the additional information of a cost associated with each of the possible routes that a circuit can take through a vertex ( the turnings ) , and we seek a lowest cost eulerian circuit . we show that finding an eulerian circuit using a best possible set of turnings is in general np - hard .",
    "this question arose as a design strategy problem for dna self - assembly via origami folding , which involves finding an optimal route for the scaffolding strand of dna through the targeted structure .",
    "self - assembly is the physical process by which structures form from disordered components , without outside direction , based on the local chemical and physical properties of the materials used .",
    "dna naturally possesses properties conducive to self - assembly since dna strands bond through base pairs within the strands following well - understood rules . for dna self - assembly , dna strands",
    "are designed so that when base pairing occurs , a molecule forms with the desired geometric structure .",
    "several methods of dna self - assembly have been implemented , such as those using branched junction molecules pioneered by seeman , @xcite , and those using dna origami methods pioneered by rothmund , @xcite .",
    "a wide range of possible applications have been proposed for dna self - assembly such as nanoscale circuitry and robotics , drug delivery systems , and biomolecular computing .",
    "dna self - assembly methods and their applications are surveyed in , for example , @xcite , @xcite , and @xcite .    in dna origami methods of nanoscale self - assembly ,",
    "a single scaffolding strand of dna traces the construct exactly once , and then short helper strands , called staples , bond to this strand to fold and lock it into the desired configuration ( see , for example , @xcite , @xcite , and @xcite ) .",
    "the design process for dna origami assembly involves finding a route for a scaffolding strand through the desired structure .",
    "while originally applied to 2-complexes ( solid 2d ) structures , and later to 3-complexes ( solid 3d structures ) , that are ` filled ' by the strands of dna , a logical next step is adapting this technique to 1-complexes , or graph - theoretical structures , such the skeletons of polyhedra .",
    "such graph - theoretical structures ( cubes @xcite ; truncated octahedra @xcite ; rigid octahedra @xcite ; tetrahedra , dodecahedra , and buckyballs @xcite ; and a 3d crystalline lattice @xcite ) have already been assembled via branched junction molecules .",
    "it is now reasonable to try to assemble these and similar structures from dna origami .",
    "however , the design strategies for ` filled ' constructions , such as the stars and smiley faces of @xcite , or the 3d solid bricks , honeycombs and modularly assembled icosahedra of @xcite , are different from those needed for open , graph - theoretical structures such as 1-complexes .",
    "if the structure is a 1-complex or graph embedded in 3-space , for example a polyhedral skeleton , then , since the scaffolding strand is usually a single circular strand of dna , its route must correspond to an eulerian circuit through the graph or through some augmentation of the graph ( if it is not eulerian , for example ) .",
    "we focus here on these structures that require an eulerian circuit as the route for the scaffolding strand .    in general ,",
    "since dna bonding of complementary base pairs is energetically favourable , a system will tend to maximise the number of matches naturally , according to the laws of thermodynamics .",
    "however , other physical properties and behaviours of dna strands may influence the shapes it forms .",
    "thus , in a dna origami construction of a 1-complex there may be preferred ways for the scaffolding strand to pass through each vertex , for example , following a face of the structure rather than weaving through the vertex .",
    "this leads to the associated the graph theoretic problem of finding an eulerian circuit with minimum turning costs .",
    "for example , a turning in an euler circuit would have low cost if it corresponds to a configuration the scaffolding strand would readily adopt , a medium cost if the strand can be made to conform to the configuration albeit perhaps with some difficulty , and a high cost if the dna strand is physically constrained from the configuration .",
    "ideally , the route for the scaffolding strand would only require turns that the strand follows readily , i.e. , those that correspond to the turnings in an euler circuit with minimum turning costs .",
    "we show below that finding an eulerian circuit with minimum turning cost is in general np - hard by proving that it implies a solution to the 3-sat problem , which is well - known to be np - hard .",
    "this result has significant ramifications for using dna origami as a basis for biomolecular computing of graph invariants .",
    "( graph invariants are properties of graphs that remain unchanged under isomorphism . )",
    "many graph invariants ( for example , the existence of a hamilton cycle , graph colorability , etc . ) are known to be np - hard .",
    "however , biomolecular computing strategies have been proposed for them ( see , for example , @xcite for hamilton cycles , and @xcite for 3-sat and vertex 3-colorability ) . in order to compute a graph invariant via a biological process",
    ", the graph must first be encoded in molecular structures .",
    "the results here show that assembling a graph from dna origami as a first step in the computation must be approached with caution , as finding a good self - assembly strategy may be a priori intractable .",
    "however , there is good news from a more pragmatic view point .",
    "we also show that the minimum cost eulerian circuit problem may be transformed in polynomial time into a traveling salesman problem ( tsp ) .",
    "while the tsp is also in general np - hard , extensive work has been done on this problem ( see @xcite for a comprehensive overview ) , and the results here mean that machinery developed for the tsp may now be brought to bear on finding optimal routes for a scaffolding strand for dna origami assembly of reasonably - sized graph - theoretical structures for practical applications .",
    "we also give the complexity of some special cases of the turning cost problem , showing for example that if the eulerian graph is 8-regular , then the problem remains intractable , but that there is a polynomial time algorithm for certain classes of 4-regular graphs .",
    "we also discuss some implications of the results here for biomolecular computing , and for the mill routing problem as given in @xcite .",
    "the following conventions are used throughout this paper . further details and a full formalization of these concepts , including the transitions discussed below , may be found , for example , in  @xcite .",
    "graphs are finite and may have loops and multiple edges .",
    "thus , a graph @xmath0 consists of a finite set of _ vertices _ denoted @xmath1 , and a finite multiset of _ edges _ , denoted @xmath2 , that are unordered pairs @xmath3 of vertices , with @xmath4 in the case of a loop .",
    "we generally use @xmath5 to denote @xmath6 and call it the _ size _ of @xmath0 . as usual , indices may be used as needed to distinguish among multiple edges : if @xmath3 has multiplicity @xmath7 then we index the @xmath7 copies with @xmath8 . however , following standard convention , we will typically suppress the index and just write @xmath3 for an edge and refer to the edge multiset @xmath2 simply as the edge set .",
    "equivalently , a multigraph may be defined as a triple @xmath9 , where @xmath10 and @xmath11 are disjoint sets of vertices and edges respectively , and @xmath12 is a function from @xmath11 to the set of unordered pairs of vertices that specifies the endpoints of each edge . in either case , all edges are distinguishable .",
    "a graph is _ planar _ if it may be drawn in the plane without any edges crossing .",
    "plane graph _ is a planar graph drawn in the plane .",
    "intuitively , if an edge is thought of as a line segment between two vertices @xmath13 and @xmath14 , and @xmath15 is the midpoint , then the two half - edges are the line segments @xmath16 and @xmath17 .",
    "if @xmath18 is an edge , then the half - edge incident with @xmath13 is formally denoted by @xmath19 .",
    "the two half - edges incident with a loop may be arbitrarily assigned indices to distinguish them if necessary , but as with multiple edges , when there is no danger of confusion we typically suppress the index . note",
    "that , using indices as needed for loops and multiple edges , all half - edges are distinguishable , and the edge set of a graph is uniquely determined by its half - edges .",
    "the _ degree _ , @xmath20 , of a vertex @xmath14 is the number of half - edges incident with it .",
    "the _ maximum degree _ of a graph @xmath0 is @xmath21 .",
    "the application we consider here involves eulerian graphs , which are connected graphs wherein the degree of every vertex is even .",
    "a _ walk _ traverses consecutive edges in a graph , allowing repeated edges and vertices ; a _ trail _ allows repeated vertices but not edges ; and a _ path _ repeats neither .",
    "a _ circuit _ is a closed trail , and a _ cycle _ is a closed path .",
    "given a connected graph @xmath0 , an _ augmented graph _",
    "results from drawing an edge between any two vertices of odd degree , and continuing the process until no vertex of odd degree remains ( a graph necessarily has an even number of odd degree vertices ) .",
    "the resulting augmented graph is then eulerian .",
    "the dna self - assembly application discussed in the introduction now motivates the following definition and problem formulation , with the turning costs corresponding to the prioritized set of preferred routes through each vertex for the scaffolding strand .",
    "we use the convention that the more preferable a turning , the lower its turning cost .",
    "[ defn : turning costs ] let @xmath0 be an eulerian graph and @xmath14 be a vertex of @xmath0 .",
    "a _ pairing _ at @xmath14 is a set @xmath22 , where @xmath23 and @xmath24 are distinct half - edges incident with @xmath14 . to every pairing @xmath22",
    "we associate a non - negative rational number , called the _ turning cost _ of the pairing , denoted by @xmath25 .",
    "( the turning costs at @xmath14 can be thought of as a function @xmath26 from the set of all pairings at @xmath14 to the non - negative rational numbers . )",
    "when the half - edges involved in a turning is clear from the common vertex we will usually refer to the pairing and turning cost of the two edges rather than specifying the half - edges , e.g. simply say @xmath27 is a pairing at @xmath14 .",
    "we call the set of costs at a vertex @xmath14 the _ turning costs _ at @xmath14 .    a _ transition system _ , @xmath28 , at @xmath14 is a set @xmath29 of pairings at @xmath14 such that every half - edge incident with @xmath14 appears in exactly one pairing in @xmath29 .",
    "the cost of a transition system at @xmath14 is the sum of the turning costs over all pairings in the transition system , and is denoted @xmath30 .",
    "note that an eulerian circuit @xmath31 determines a transition system at each vertex by pairing half - edges at a vertex @xmath14 if they appear consecutively in @xmath31 .",
    "( the converse is not true : a set of transition systems at each vertex determines a disjoint set of circuits in a graph , but not necessarily an eulerian circuit . )",
    "we denote the transition system at @xmath14 determined by an eulerian circuit @xmath31 by @xmath32 .",
    "if @xmath31 is an eulerian circuit of a graph @xmath0 , then the _ cost _ of @xmath31 , denoted @xmath33 , is the sum of the turning costs of all pairings that it determines : @xmath34    the optimization problem arising from our dna origami application may now be stated as follows :    [ prob : eulerian costs ] given an eulerian graph with turning costs , find an eulerian circuit @xmath31 with minimum cost @xmath33 .",
    "we recall that , informally , a decision problem is one for which there is a yes or no answer , such as , can graph @xmath0 be colored using @xmath35 colors ?",
    "p is the set of decision problems for which it is possible to determine the answer in polynomial time in the size of the input , and np is the set of decision problems for which it is possible to determine if a given answer is correct in polynomial time in the size of the input .",
    "whether or not @xmath36 remains a famous open question , but there is a large class of problems , referred to as np - hard , for which finding a polynomial time algorithm for any one of them would automatically lead to polynomial time algorithms for all problems in np .",
    "a decision problem is np - complete if it is both np - hard and in np .",
    "see @xcite for additional background .    here",
    ", the decision problem corresponding to problem  [ prob : eulerian costs ] is the following :    [ prob : eulerian decision ] given an eulerian graph @xmath0 equipped with a set of turning costs at each vertex , and a non - negative constant @xmath37 , determine if there is an eulerian circuit @xmath31 with the minimum cost @xmath38 .    note that if there were a polynomial time algorithm for problem [ prob : eulerian costs ] , then problem [ prob : eulerian decision ] would be in p , since we could simply find a minimum cost eulerian circuit and compare its cost to the given constant @xmath37 .",
    "however , we will show in the next section that these two problems are in general intractable by using the following special case of problem [ prob : eulerian decision ] .",
    "[ prob : zero one decision ] given an eulerian graph @xmath0 equipped with turning costs in @xmath39 at each vertex , determine if there is a zero - cost eulerian circuit @xmath31 .",
    "we will demonstrate that finding an eulerian circuit with minimum turning cost is np - hard by showing that 3-sat is polynomial time reducible to this problem .",
    "in particular , we note that if problem [ prob : eulerian decision ] can be solved in polynomial time , then the special case problem [ prob : zero one decision ] can be solved in polynomial time .",
    "however , we show that 3-sat can be reformulated in polynomial time to the problem of finding such a zero - cost eulerian circuit in an associated eulerian graph with turning costs of zero or one .",
    "this would imply that 3-sat could be solved in polynomial time . from this",
    "we conclude that problem [ prob : eulerian decision ] is np - complete , and hence problem [ prob : eulerian costs ] is np - hard .",
    "the 3-sat problem involves a boolean logic conjunctive normal form expression such as @xmath40 in a 3-sat problem , each clause in such an expression has exactly three distinct variables from a set @xmath41 of boolean variables , that is , each variable may be assigned a value of true or false .",
    "the symbols @xmath42 , @xmath43 , @xmath44 represent the logic operations ` and ' , ` or ' , and ` not ' , respectively .",
    "literal _ is a variable @xmath45 or its negation @xmath46 , with the former referred to as a _ positive literal _ and the latter as a _ negative literal_. for the 3-sat problem , only the logic operations @xmath47 and @xmath44 may appear inside the clauses , and only @xmath48 may join clauses .",
    "the decision problem asks whether there is an assignment of true or false to each of the variables such that the whole expression evaluates to true ( see for example , @xcite pg .",
    "459 ) .",
    "we begin with an arbitrary 3-sat instance , and construct an associated eulerian graph . for expositional clarity",
    ", we will describe this graph via an embedding in 3-space , but since the objective is an abstract eulerian graph , the choice of specific embedding is irrelevant .",
    "the given embedding simply facilities our description of which pairs of half - edges should receive which turning costs .    for each boolean variable @xmath45 in the 3-sat expression",
    ", we draw a vertex @xmath45 in the plane .",
    "we read the 3-sat expression from left to right , and for each clause we create a triangle on the vertices @xmath45 , @xmath49 and @xmath50 , where @xmath51 and @xmath50 are the variables in the clause .",
    "the edges of the triangle may cross in the plane , but we require each of the three pairings of half - edges @xmath52 , @xmath53 and @xmath54 in the triangle to appear consecutively in the cyclic orders of the vertices at their common end points , i.e. the edges are neighbors in the plane drawing .",
    "which of the two possible orders for two consecutive half - edges does not matter , provided they are consecutive .",
    "the order of the pairs in the cyclic order about a vertex also does not matter . at each vertex , we shade a small region between the half - edges in the same triangle to record this property , as in figure [ f.tri1 ] .",
    "again we emphasize that the shading of regions and the embedding into 3-space are simply expository conveniences for describing the construction ; they are not necessary for the implementation .",
    "we label each triangle with the clause it represents .",
    "observe that each vertex has even degree , with a neighbourhood consisting of alternating shaded and unshaded regions , where the shaded regions are parts of triangles labelled by clauses containing the literal ( either positive or negative ) that labels the vertex .",
    "see figure  [ f.tri2 ] .",
    "we now add an extra _ apex _ vertex , @xmath13 , above the plane .",
    "we will draw edges ( in general , there will be multiple edges ) between @xmath13 and a vertex @xmath45 so that the half - edge incident with @xmath45 lies in the plane in a small neighbourhood of @xmath45 before rising above the plane to meet the other half of the edge ( the half - edge incident with @xmath13 )",
    ". see figure  [ f.aug2 ] .",
    "these half - edges incident with @xmath45 are drawn in the unshaded regions about @xmath45 , according to the following scheme .",
    "for each unshaded region at @xmath45 , if the literal corresponding to @xmath45 is positive in both clauses labelling the shaded regions bounding the white region , or is negative in both , then we place two edges from @xmath45 to @xmath13 emerging from this unshaded region .",
    "if , however , the literal is positive in one clause , and negative in the other , we then place one edge emerging from the unshaded region , as in figure  [ f.aug1 ] .",
    "if we consider the sequence of literals corresponding to the variable @xmath45 in the triangles labelling the shaded regions about the vertex @xmath45 , we notice that sequences of consecutive positive literals alternate with sequences of negative literals .",
    "each time there is a switch from positive to negative , or vice versa , we add a single edge , hence we have added an even number of single edges . each time there is no switch , we add two edges",
    "thus , in total , we will have added an even number of edges , preserving the even degree of every vertex @xmath45 , and ensuring that @xmath13 is also of even degree .",
    "since every vertex is connected to @xmath13 , the graph is connected .",
    "in addition every vertex has even degree , so the graph is eulerian .",
    "we now assign turning costs to the half - edge pairings on each vertex as follows .",
    "we assign a cost of zero to every pairing of half - edges incident with the apex vertex @xmath13 .",
    "we also assign a cost of zero to any consecutive pairing of half - edges in the clockwise orientation about each vertex @xmath45 .",
    "all other pairings of half - edges have cost one .",
    "thus we have associated an eulerian graph with turning costs to the given 3-sat instance . for a 3-sat instance @xmath55",
    ", we denote this graph by @xmath56 and call it the _ eulerian graph with turning costs of @xmath55_.      [ p.polyt ] given a 3-sat expression @xmath55 where @xmath5 is the number of distinct literals and @xmath57 is the number of clauses in the expression , then @xmath56 , the eulerian graph with turning costs of @xmath55 , may be constructed in @xmath58 time .    since the vertices except @xmath13",
    "are labeled by the literals , which are indexed from 1 to @xmath5 , only @xmath5 needs to be known to create the vertex list , and @xmath5 may be found simply by recording the highest index appearing in the clauses as they are read one at a time .",
    "furthermore , each clause contributes three edges , the three half - edge pairings of which may added ( in consecutive order ) to the cyclic orders of the corresponding vertex .",
    "since the order of the pairs about the vertex does not matter , they may be added to the cyclic order as they are read in .",
    "thus , again , each clause need only be read once to create the list of these edges .",
    "adding the half - edges for the edges from each vertex @xmath45 to the apex vertex @xmath13 involves reading through the cyclic order about each vertex once .",
    "since each clause can contribute at most two half - edges incident with a given vertex , there are at most @xmath59 half - edges in the sequence for each vertex .",
    "furthermore , we have to insert no more than @xmath59 half - edges corresponding to edges from the vertex to @xmath13 .",
    "thus , since there are @xmath5 vertices , this process takes @xmath60 steps .",
    "turning costs are assigned by reading the list of half - edges at each vertex , and recording a zero for consecutive half - edges on the list , and a one for all other pairs . since no vertex may have degree greater than @xmath61 , there are at most @xmath62 pairs of edges to assign turning costs for at each vertex except for @xmath13 .",
    "there is no need to record turning costs for pairs of edges incident with @xmath13 as these are all zero and hence can not contribute to the total cost of the eulerian circuit .",
    "thus , listing all the turning costs requires @xmath58 steps .    since listing the turning costs for each pair is the most time consuming step , the overall complexity of constructing the associated eulerian graph with turning costs is @xmath58 .",
    "@xmath63      we use the construction of subsection [ sec : associated graph ] to show that the 3-sat problem is polynomial time reducible to problem [ prob : eulerian decision ] .    [ thrm:3sat equiv ] given a 3-sat instance @xmath55 and the eulerian graph with turning costs of @xmath55 , there is a solution to the 3-sat instance if and only if there is a zero - cost solution to the corresponding turning cost instance .",
    "suppose there is a zero - cost solution to the associated turning cost problem .",
    "then , at each vertex @xmath45 , only neighbouring pairs of edges can appear consecutively in the eulerian circuit as these are the only pairs with turning cost zero .",
    "thus , for each @xmath45 , because of the parity of the interspersed @xmath64 edges , there are only two possible configurations for the eulerian circuit to follow through the vertex @xmath45 : one where it joins half - edges of the triangles with positive literal @xmath45 s in their labelling clauses , and one where it joins half - edges of triangles with negative literals @xmath46 in their labelling clauses , as in figure  [ f.st ] .    in the cases where the triangles with @xmath45 in their labelled clauses are followed ,",
    "we assign a value of  false \" to @xmath45 . in the case that the edges in the @xmath46 labelled triangles are followed , we assign a value of  true \" to @xmath45 , again as in figure [ f.st ] .",
    "we claim that this is a solution to the given 3-sat problem . if not , then one of the clauses is false , and we examine the triangle labelled by that clause .",
    "there are four cases , depending on how many positive and negative literals are in the clause . in each case , since the clause is false , the positive literals must be set to false , and the negative literals set to true",
    ". however , a positive literal set to false corresponds to the eulerian circuit following the shaded region of a triangle , as does a negative literal set to true .",
    "thus , in all cases , a disjoint 3-cycle results , and since this can not occur in an eulerian circuit , we have contradicted the fact that we have a solution to the associated turning cost problem .    for the converse , we need to show that if there is a solution to the 3-sat problem , then the associated turning cost problem has a zero - cost solution .",
    "this follows from construction , since we can examine each variable @xmath45 in the 3-sat expression , and assign the vertex @xmath45 one of the two transition systems as shown in figure [ f.st ] according to whether the variable is assigned a value of true or false in the given solution to the 3-sat problem .",
    "both of these transitions systems have cost zero .",
    "we then just need to check that these transition systems may always be extended to an eulerian circuit .",
    "this follows since , as in the previous argument , any closed triangle would correspond to an unsatisfied clause , of which there are none .",
    "thus , each set of edges in any triangle must form a set of paths , each of which continues to edges incident with @xmath13 ( see figure  [ f.pat ] ) .",
    "since all the paths begin and end at @xmath13 , where every pairing of half - edges has cost zero , we can simply concatenate these paths in any order through @xmath13 to get a zero - cost solution to the associated turning cost problem . @xmath63        [ c1 ] problem  [ prob : eulerian decision ] is np - complete .    by theorem  [ thrm:3sat equiv ]",
    ", 3-sat is polynomial time reducible to problem [ prob : eulerian decision ] , and 3-sat is well - known to be np - hard .",
    "furthermore , problem [ prob : eulerian decision ] is clearly contained in np since the turning cost of a given solution may be computed in polynomial time .",
    "[ c2 ] problem [ prob : eulerian costs ] is np - hard .",
    "if an optimization problem has a corresponding decision problem that is np - complete , the optimization problem must be np - hard .",
    "@xmath63    it is convenient at this point make the following technical observation which we will use in section  [ low ] .",
    "[ l.deg ] given a 3-sat instance @xmath55 , we may assume without loss of generality that any vertex @xmath45 in the @xmath56 , eulerian graph with turning costs of @xmath55 that is used in the proof of theorem  [ thrm:3sat equiv ] , has a degree that is not divisible by 4 .    if the degree of @xmath45 is divisible by 4 , then modify the graph by taking two parallel copies of any edge @xmath65 from @xmath45 to the apex vertex and making the region between them in the neighborhood of @xmath45 unshaded .",
    "this increases the degree by two , without changing the parity of the number of edges in any unshaded region .",
    "thus , we are still able to distinguish between the two possible transitions at the vertex @xmath45 ( consider figure  [ f.st ] with the two additional edges added ) , so the additional edges do not affect the ways in which a zero - cost eulerian circuit can follow the triangles corresponding to the clauses , and the construction of the graph is still polynomial time .",
    "thus the proofs of proposition  [ p.polyt ] , theorem  [ thrm:3sat equiv ] , and corollaries  [ c1 ] and  [ c2 ] still hold with the modified graph . @xmath63",
    "recall that traveling salesman problem ( tsp ) seeks a minimum cost hamilton cycle in a graph with edge weights , that is , a cycle that visits each vertex of the graph with a minimum sum of the edge weights of the edges used in the cycle .",
    "the best - known algorithm for the general version of the tsp is the @xmath66 dynamic program described by held and karp in 1962 @xcite . because of the practical importance of the tsp",
    ", there is a rich history of computational work , including heuristics , integer programming solutions , genetic algorithms , and simulated annealing algorithms ( see @xcite for a survey ) .",
    "there are good approximations for special cases of the tsp .",
    "for example , in the case of the metric tsp ( where costs are non - negative , symmetric , and obey the triangle inequality ) , there is a simple @xmath67-approximation algorithm , i.e. , an algorithm guaranteed to find a solution , in polynomial time , with cost at most @xmath67 times the optimal cost @xcite . unfortunately finding a good approximation algorithm for the general tsp is ( provably ) challenging , since such an algorithm would lead to a solution for the np - hard hamiltonian cycle problem .",
    "the relevance of all these results for the tsp here is that the problem of finding a minimum turning cost eulerian circuit can be reformulated as a tsp .",
    "this means that the tsp machinery may be brought to bear on solving problem  [ prob : eulerian costs ] , and hence on finding optimal threading routes for the scaffolding strand in dna origami methods of self - assembly .",
    "while the cost data is unlikely to be metric in the case of a turning cost problem , in small instances , such as those likely to arise in practice from dna self - assembly problems , should be tractable using the held - karp algorithm @xcite or an integer programming solution .",
    "we will use line graphs to give the connection between problem [ prob : eulerian costs ] and the tsp .",
    "let @xmath0 be a graph , and @xmath68 be the edges of @xmath0 .",
    "the _ line graph _",
    ", @xmath69 , of @xmath0 has vertex set @xmath70 , and edge set @xmath71 .",
    "clearly , @xmath69 may be constructed in polynomial time from @xmath0 .",
    "we now solve problem  [ prob : eulerian costs ] , by reducing it to the tsp .",
    "[ th : tsp solve ] given a graph @xmath0 with turning costs , there is an associated edge weighted graph that may be constructed in polynomial time such that applying the tsp to this graph yields an optimal eulerian circuit for @xmath0 .",
    "given an eulerian graph @xmath0 equipped with a set of turning costs at each vertex , we first form another graph @xmath72 by subdividing all of the edges of @xmath0 twice , that is , adding two vertices to each edge of @xmath0 , as in figure  [ f.descb ] .",
    "note that even if @xmath0 has loops or multiple edges , @xmath72 has none .",
    "we assign pair costs to @xmath72 as follows .",
    "each edge @xmath18 of @xmath0 gives rise to three edges in @xmath72 .",
    "call these @xmath73 , where @xmath74 is incident with @xmath13 and @xmath75 is incident with @xmath14 ( if @xmath76 denote these two edges by @xmath77 and @xmath78 ) , and @xmath79 is the remaining edge in the center .",
    "let the turning cost of the pair @xmath80 in @xmath72 equal the turning cost @xmath25 in @xmath0 .",
    "set the turning cost of all other pairs of edges in @xmath72 ( these are the edges of the form @xmath81 for some @xmath14 ) to zero .",
    "note that there is a one - to - one correspondence between the eulerian circuits of @xmath0 and those of @xmath72 , and , moreover , the corresponding eulerian circuits have the same turning costs . clearly @xmath72 with its edge costs may be constructed from @xmath0 in polynomial , even linear , time .",
    "we now form the line graph , @xmath82 , again in polynomial time .",
    "as @xmath72 has no loops or multiple edges , each pair of edges @xmath83 at @xmath14 corresponds to a unique edge @xmath80 in @xmath82 .",
    "assign weights to the edges of @xmath82 as follows .",
    "if @xmath84 and @xmath12 are adjacent edges in @xmath72 , then they have an associated turning cost @xmath25 .",
    "we give the corresponding edge @xmath85 in @xmath82 weight @xmath86 .",
    "see figure  [ f.lg ] .",
    "every walk in @xmath72 is uniquely determined by its sequence of edges , and , as @xmath82 has no multiple edges , every walk in @xmath82 is determined by a sequence of vertices . if @xmath31 is an eulerian circuit in @xmath72 then it is well - known ( or see @xcite ) that @xmath31 defines a hamiltonian cycle @xmath87 in @xmath82 . by construction ,",
    "the costs of @xmath31 in @xmath72 , and the weights of @xmath87 in @xmath82 are equal .",
    "conversely , let @xmath87 be a hamiltonian cycle in @xmath82 .",
    "since each vertex @xmath79 of @xmath82 is of degree 2 , @xmath87 is of the form @xmath88 , where @xmath89 and the indices are taken modulo @xmath7 . from this",
    ", it is easily seen that the corresponding walk in @xmath72 is an eulerian circuit of @xmath72 of cost equal to the weight of @xmath87 .",
    "thus , there is a bijection between hamiltonian cycles in @xmath82 and eulerian circuits in @xmath72 , and hence also the eulerian circuits in @xmath0 . as this bijection maps costs to weights directly ,",
    "if @xmath87 is a solution to the tsp in @xmath82 , then the corresponding eulerian circuit in @xmath72 gives a minimum turning cost eulerian circuit of @xmath72 and hence of @xmath0 .",
    "@xmath63    thus we have formulated the problem of finding a minimum turning cost eulerian circuit , problem  [ prob : eulerian costs ] , as a tsp .",
    "note that the above argument does not reduce the tsp to problem  [ prob : eulerian costs ] since not every hamiltonian graph is a line graph .",
    "often special instances of intractable problems may be solved efficiently , and that is true here as well .",
    "we see below that an optimal eulerian circuit may be found in polynomial time for 4-regular plane graphs with no crossing transitions .",
    "it is fortuitous that this case is tractable , as many likely graph structured targets for dna origami assembly , for example lattice subsets and cages , are planar , while requiring that a scaffolding strand and staples follow faces without crossing over one another respects the physical constraints of dna . on the other hand however , we will also see that the problem remains np - hard even if we restrict to the class of graphs with maximum degree 8 .      if @xmath14 is a vertex in a 4-regular plane graph , then it has three transition systems , determined by the embedding in the plane , as in figure  [ 4trans ] . in this section",
    ", we will assume the crossing transition systems are prohibited .",
    "( this can be done by assigning the pairs that comprise them large turning costs , in particular , larger than the sum of all the turning costs of other non - crossing transition systems . )    [ cols=\"^,^,^,^,^,^,^ \" , ]     more generally , if @xmath0 is an eulerian graph embedded in some surface , then an _ a - trail _ ( or a _ non - intersecting eulerian circuit _ ) of @xmath0 is an eulerian circuit in which consecutive edges in the circuit , @xmath90 and @xmath91 say , are adjacent in the cyclic ordering of the edges incident to @xmath92 .",
    "( thus an eulerian circuit of a 4-regular plane graph that has no crossing transitions is an a - trail . ) in @xcite , kotzig proved that every 4-regular plane graph contains an a - trail .",
    "however , bent and manber , in @xcite , showed that dropping the 4-regularity requirement results in a problem that is np - complete , i.e. , the problem of deciding if an eulerian plane graph contains an a - trail is np - complete .",
    "this remains the case even when restricted to simple , 3-connected graphs with only 3-cycles and 4-cycles as face boundaries ( see @xcite ) , although a polynomial - time algorithm for finding a - trails in simple 2-connected outerplane eulerian graph was given in @xcite .",
    "andersen , bouchet and jackson @xcite characterised all 4-regular plane graphs that have two orthogonal a - trails , where two a - trails of @xmath0 are _ orthogonal _ if the two trails have different transitions at each vertex of @xmath0 .",
    "furthermore the complexity of the related problem of finding eulerian circuits on 4-regular graphs in which only crossing transitions are allowed ( which corresponds to finding eulerian petrie walks in an underlying graph ) has been studied by itnik in @xcite .    in light of these results , it is in general non - trivial to determine the minimal cost a - trail when turning costs are assigned to the graph .",
    "however , we demonstrate below that it can be accomplished in polynomial time for all 4-regular plane graphs .    if @xmath0 is a 4-regular plane graph with a set of turning costs such that the crossing transitions are prohibited , then an optimal eulerian circuit may be found in polynomial time .",
    "we recall that every 4-regular plane graph @xmath0 is the medial graph of its tait graph ( or blackface graph ) , as in figure [ taitgraph ] ( see , for example , @xcite for details ) .",
    "the tait graph , @xmath93 , is constructed by face 2-colouring @xmath0 using the colors black and white such that the unbounded region is colored white , and placing a vertex of @xmath93 in the interior of each black face .",
    "( note that @xmath0 is face 2-colourable as it is plane and 4-regular .",
    ") there is an edge between two vertices in @xmath93 whenever the two regions corresponding to the vertices have a shared vertex of @xmath0 on their boundary .",
    "the edge is drawn between the two vertices of @xmath93 , passing through this shared vertex of @xmath0 .",
    "thus , there is a one - to - one correspondence between the edges of @xmath93 and the vertices of @xmath0 , and if @xmath14 is a vertex of @xmath0 , we label the corresponding edges of @xmath93 by @xmath75 .",
    "the face 2-coloring of @xmath0 allows us to distinguish the two non - crossing transition systems at each vertex as either a black smoothing or a white smoothing , as in figure [ 4trans ] .",
    "( the term smoothing derives from standard terminology in knot theory . )",
    "it is well - known that for plane graphs there is a one - to - one correspondence between the spanning trees of @xmath93 and the eulerian circuits of @xmath0 ( see e.g. @xcite or @xcite ) .",
    "the correspondence identifies an edge @xmath75 in a spanning tree of @xmath93 with a white smoothing at @xmath14 in the eulerian circuit of @xmath0 , and an edge @xmath74 not in the spanning tree with a black smoothing at @xmath13 in the eulerian circuit .",
    "again , see figures [ 4trans ] and [ taitgraph ] .",
    "suppose for each vertex @xmath14 in @xmath0 , the cost for the white smoothing is @xmath94 , while the cost for the black smoothing is @xmath95 .",
    "then we assign the value @xmath96 to the edge @xmath75 in @xmath93 .",
    "now suppose @xmath31 is an eulerian circuit without crossing in @xmath0 , and let @xmath55 be the vertices of @xmath0 which have a white smoothing in @xmath31 .",
    "we can see that the total cost of the eulerian circuit will be , @xmath97    however , because of the correspondence between eulerian circuits of @xmath0 and the spanning trees of @xmath93 , the set of edges @xmath98 is a spanning tree of @xmath93 .",
    "since we have assigned the value of @xmath96 to the edge @xmath75 in @xmath93 , the summand @xmath99 on the right - hand side is the weight of this spanning tree .",
    "thus , a minimum weight spanning tree in @xmath93 corresponds to a minimum cost eulerian circuit in @xmath0 .",
    "since it is well known that minimum weight spanning trees may be found in polynomial time ( for example , by kruskal s algorithm ) , it follows that optimal eulerian circuits without crossings may be found for 4-regular plane graphs in polynomial time .",
    "@xmath63      the associated graphs @xmath56 used to prove theorem [ thrm:3sat equiv ] may have vertices of very high degree , but we show that restricting ourselves to graphs with low degree vertices , does not , in general , change the complexity of problem  [ prob : eulerian costs ] .    for the proof of theorem  [ lo ] we will need the cartesian product of graphs .",
    "let @xmath0 and @xmath87 be simple graphs ( i.e. , with no loops or multiple edges ) . then the _ cartesian product _",
    "@xmath100 is the graph with vertex set @xmath101 and whose edge set is the set of all unordered pairs @xmath102 such that either @xmath103 and @xmath104 , or @xmath105 and @xmath106 .",
    "[ lo ] solving problem  [ prob : eulerian costs ] remains np - hard even restricted to the class of graphs of maximum degree 8 .",
    "let @xmath107 be the eulerian graph with turning costs associated with a 3-sat instance @xmath55 as constructed in section  [ sec : associated graph ] . by observation  [ l.deg ] , we may assume , without loss of generality , that if a non - apex vertex of @xmath0 has degree greater than 8 , then its degree is not divisible by 4 . to prove the theorem , we will construct , in polynomial time , a eulerian graph with turning costs , @xmath108 , that has maximum degree @xmath109 .",
    "furthermore , @xmath108 will have a zero - cost eulerian circuit if and only if @xmath0 does . to construct @xmath108 ,",
    "we ` blow - up ' each high degree vertex of @xmath0 , replacing it with a special graph that has maximum degree  8 .",
    "we will need two types of blow - ups : one for the vertices @xmath45 arising from the variables of @xmath55 , and one for the apex vertex @xmath13 .",
    "we denote the edges incident with a non - apex vertex @xmath45 of @xmath0 by @xmath110 and we assume that they appear in that cyclic order ( with respect the orientation of the plane , as in the construction of @xmath0 ) .",
    "furthermore , if @xmath111 , we let @xmath112 denote the edges of @xmath0 that are incident with @xmath13 .",
    "see figures  [ f.b1 ] and  [ f.b4 ] .    for the first type of blow - up , for a vertex @xmath45",
    ", we note that since @xmath113 is even and not divisible by 4 , then @xmath114 for some @xmath35 .",
    "we then form a graph @xmath115 as follows .",
    "start with a plane @xmath116-cycle . at each vertex ,",
    "place two nugatory edges ( i.e. , edges with a degree one vertex ) such that one lies in the bounded region , and one in the unbounded region . add two parallel copies of each non - nugatory edge to the @xmath116-cycle .",
    "label the nugatory edges by labelling an arbitrary edge @xmath117 .",
    "then , if @xmath118 has been assigned to some nugatory edge in the unbounded ( respectively , bounded ) face , travel round the outer face following the orientation of the plane and at the next vertex label the nugatory edge in the bounded ( respectively , unbounded ) face @xmath119 .",
    "continue until all nugatory edges have been labelled , which happens since @xmath120 is odd .",
    "see figure  [ f.b2 ] .",
    "assign pair costs to this graph as follows .",
    "give a cost of zero to any consecutive pairing of half - edges with respect to the ( plane ) orientation about each vertex in @xmath115 .",
    "all other pairings of half - edges have cost one .",
    "the resulting graph with turning costs is @xmath115 .",
    "to _ blow - up _ a vertex @xmath45 in @xmath0 , we replace it with @xmath115 as follows .",
    "suppose an edge @xmath118 of @xmath0 has endpoints @xmath45 and @xmath121 .",
    "then we identify the degree one vertex of @xmath118 in @xmath115 with the vertex @xmath121 .",
    "we do this for each @xmath118 , and then delete the vertex @xmath45 and its incident edges .",
    "for the blow - up of the apex vertex @xmath13 , which has degree @xmath122 , we begin by taking the cartesian product @xmath123 of a @xmath122-cycle and a @xmath124-path .",
    "consider the @xmath122-cycles in @xmath123 that correspond to the original copy of @xmath125 .",
    "exactly two of these cycles contain degree 3 vertices .",
    "denote these two cycles by @xmath126 and @xmath127 . for each vertex in @xmath126 attach a nugatory edge , and label these nugatory edges @xmath112 .",
    "next take a parallel copy of @xmath124 distinct non - adjacent edges in the cycle @xmath127 .",
    "denote the resulting graph by @xmath128 .",
    "see figure  [ f.b5 ] .",
    "note that @xmath128 contains exactly @xmath122 degree one vertices , which are ends of the edges labelled @xmath112 , and every other vertex is of degree 4 .",
    "assign pair costs to the degree 4 vertices of @xmath128 by giving each pairing cost zero .",
    "observe , for later , that for every partition of @xmath129 into pairs , there exists @xmath124 edge - disjoint paths in @xmath128 such that @xmath130 and @xmath131 are in the same path if and only if they are paired in the partition , in other words , edge - disjoint paths can be found such that each path contains the @xmath132 from exactly one pair .",
    "one way of doing this is to assign a copy of @xmath125 to each pair @xmath133 .",
    "the path for a pair @xmath133 begins by following the copy of @xmath134 that @xmath130 is incident to until it intersects the copy of @xmath125 assigned to @xmath133 .",
    "then follow @xmath125 in either direction until it copy of @xmath134 that @xmath131 is incident to , and follow that @xmath134 to @xmath131 .",
    "the vertex @xmath13 is blown - up similarly to the @xmath45 s by identifying each degree 1 vertex labeled @xmath130 in @xmath128 with the non-@xmath13 endpoint of the edge labeled @xmath130 in @xmath0 , and then deleting @xmath13 and its incident edges .",
    "now , let @xmath108 be the graph obtained from @xmath0 by blowing - up each vertex @xmath45 that has @xmath135 using @xmath115 , and , if @xmath136 , blowing - up @xmath13 using @xmath128 .",
    "the turning costs of @xmath108 are inherited from those of the @xmath115 , @xmath128 , and those of the vertices of @xmath0 with degree at most 8 .",
    "observe that @xmath108 is constructed from @xmath0 in polynomial time in the number of edges and vertices .",
    "it remains to show that @xmath0 has a zero - cost eulerian circuit if and only if @xmath108 does .",
    "suppose that @xmath137 is a zero - cost eulerian circuit of @xmath108 , specified by the edges @xmath138 of @xmath108 .",
    "( we read all circuits here cyclically so that we regard , for example , @xmath139 as a subtrail of @xmath140 . )",
    "consider a subtrail in @xmath140 of the form @xmath141 , where @xmath121 is a trail contained entirely in @xmath115 . by examining figure",
    "[ f.b2 ] , observe that @xmath142 or @xmath143 ( otherwise there is a cost greater than zero , or @xmath140 contains more than one closed walk and hence is not an eulerian circuit ) .",
    "thus any subtrail in @xmath140 contained in any @xmath115 is of the form @xmath144 , and we can obtain a zero - cost pairing at the vertex @xmath45 of @xmath0 by deleting the subtrail @xmath121 .",
    "now given @xmath140 , construct a subsequence @xmath31 by reading through @xmath140 ( cyclically ) .",
    "whenever there is a subtrail @xmath144 with @xmath121 contained entirely in @xmath115 , delete @xmath121 ; whenever there is a subtrail of the form @xmath145 with @xmath121 contained entirely in @xmath128 , delete @xmath121 .",
    "then @xmath31 defines an eulerian circuit in @xmath0 ( since the edges contained in @xmath31 are exactly the edges of @xmath0 ; and since each @xmath146 , and each @xmath147 define valid pairings in @xmath0 ) .",
    "moreover , @xmath31 is of cost zero since each pairing @xmath146 , and @xmath147 in @xmath0 is of cost zero .",
    "thus if there is a zero - cost eulerian circuit in @xmath108 , there is a zero - cost eulerian circuit in @xmath0 .",
    "conversely , let @xmath148 be a zero - cost eulerian circuit of @xmath0 , where the @xmath138 are edges and the @xmath149 are vertices .",
    "any subtrail @xmath150 in @xmath31 determines a unique zero - cost trail @xmath151 through @xmath115 ( see figures  [ f.b1][f.b3 ] ) .",
    "also , @xmath31 determines a partition of @xmath129 into pairs where the pairs correspond to the subtrails @xmath152 .",
    "as observed above , there exist @xmath153 disjoint paths in @xmath128 such that @xmath130 and @xmath131 are in the same path if and only if they are paired in the partition .",
    "for such a set of disjoint paths , let @xmath154 denote the one that contains @xmath130 and @xmath131 .",
    "now read through @xmath31 ( cyclically ) , replace each pair @xmath146 with @xmath151 , and replace each pair @xmath152 with @xmath154 . denote the resulting sequence by @xmath155 .",
    "we have that @xmath155 determines a circuit in @xmath108 .",
    "moreover , all turning costs in this circuit are zero .",
    "however , @xmath155 may not be an eulerian circuit .",
    "this is since there may be edges in @xmath128 that are not in @xmath155 . by construction ,",
    "any edges of @xmath108 that are not in @xmath155 must be unlabelled edges of @xmath128 .",
    "we extend @xmath155 to include these edges as follows .",
    "as @xmath108 is eulerian , each component of @xmath156 is even , and therefore contains an eulerian circuit .",
    "denote these eulerian circuits by @xmath157 .",
    "extend @xmath155 to an eulerian circuit @xmath140 of @xmath108 by following @xmath155 until we meet a vertex in one of the @xmath158 , detour round this circuit and remove it from the list of circuits , then continue along @xmath155 , repeating this process until each @xmath158 has been used .",
    "as @xmath0 is connected , this results in an eulerian circuit .",
    "moreover , as all transitions in @xmath128 have zero - cost , @xmath140 is a zero - cost eulerian circuit .",
    "thus if there is a zero - cost eulerian circuit in @xmath0 there is a to a zero - cost eulerian circuit in @xmath0 , completing the proof of the theorem @xmath63",
    "our results have immediate ramifications for biomolecular computing . in addition there are other closely related problems in the literature , for example mill routing , about which the results here also inform .    our primary motivation for this investigation was finding design strategies for self - assembling structures ( see @xcite , for example ) .",
    "one of the measures of the goodness of a design strategy , particularly one that is to be used as part of a biomolecular computing process , is how efficiently it may be found .",
    "finding an optimal threading for the scaffolding strand of a dna origami construction of a graph theoretical structure corresponds to finding an optimal eulerian circuit with turning costs , and we have shown here that this problem is intractable .",
    "this is an important first step in determining the complexity of the _ input _ to biomolecular computing problems .",
    "a consequence is that single strand dna origami methods may not be suitable as a generic starting point for efficient biomolecular computation of graph invariants . while there are some provably optimal design strategies for other construction methods , for example for branched junction molecules methods of dna self - assembly of a few common classes of graphs ( see @xcite ) , the computational complexity of the general problem for these other methods has not yet been studied .    while we have addressed here a computational question arising from origami folding , an earlier assembly method of dna self - assembly uses a design strategy of tracing each edge of the graph twice , once in each direction , while prohibiting double - backs ( hairpin turns ) and other disconnections at the vertices ( see @xcite ) . to our knowledge",
    ", the computational complexity of this method has not yet been addressed beyond its correspondence with graph genus .",
    "while it is possible that the techniques presented here could be adapted to this earlier method , it is not immediate , since simply doubling the edges of the graph and forbidding only double - backs gives a very special case of the turning cost problem , and might conceivably be tractable .",
    "furthermore , simply doubling the edges does not guarantee a solution where each original edge is traversed in opposite directions . also , finding a route for the scaffolding strand and placing the staples , then removing the nicks between the staples , while it does cover each edge twice in opposite directions , generally results in covering the graph with multiple circular strands , not just one .",
    "nonetheless , the methods presented here offer a possible approach to analysing open questions arising from this earlier assembly method .",
    "mill routing is another problem very closely related to problem [ prob : eulerian costs ] .",
    "in discrete thin mill routing , a router needs to cover all the edges of a graph , which , in the case of orthogonal discrete thin mill routing , is a subset of a grid ( see @xcite ) .",
    "it is fastest for a router to go straight across when encountering a grid point , more time consuming for it to turn left or right , and quite slow for it to go back the way it came .",
    "thus , this is a turning cost problem .",
    "while problem [ prob : eulerian costs ] is closely related to the mill routing problem , it differs in that the mill routing problem allows edges to be repeated , and even to `` double back '' on an edge , while we prohibit this as it should be avoided with dna origami .",
    "such subtle differences can have a profound effect on the computational complexity of a problem , as can be seen for example among the variations of the chinese postman problem , where the original problem may be solved in polynomial time , but even minor modifications such as directing some subset of the edges lead to np - hardness ( see @xcite and @xcite for overviews ) .",
    "the mill routing problem was shown in @xcite to be np - hard in the general case of any underlying graph , but again allowing edges to be traversed more than once .",
    "thus , the results of @xcite , which show that the mill routing problem is np - hard , do not apply here . the results here ,",
    "however , show that the discrete thin mill routing problem remains np - hard , even in the special case that the desired tour must be an eulerian circuit .",
    "thus , even if a set of repeated edges is specified ahead of time ( this corresponds to doubling an edge ) , or if , in general , augmenting edges are added to make the graph eulerian , then the general discrete thin mill routing problem remains intractable if the desired tour must be an eulerian circuit .",
    "we thank ned seeman for specific design problems leading to this research and for many related discussions .",
    "dietz , h. , douglas , s. , shih , w. ( 2009 ) folding dna into twisted and curved nanoscale shapes .",
    "science 325:725730 .",
    "douglas , m. , marblestone , a. , teerapittayanon , s. , et al ( 2009 ) rapid prototyping of 3d dna - origami shapes with cadnano .",
    "nucleic acids res 37(15):50015006 eiselt , h. , gendreau , m. , laporte , g. ( 1995 ) arc routing problems , part i : the chinese postman problem . oper res 43(2):231242 ellis - monaghan , j. ( 2004 ) transition polynomials , double covers , and biomolecular computing .",
    "congr numer 166:181192      ellis - monaghan , j. , pangborn , g. , et al .",
    "( 2013 ) minimal tile and bond - edge types for self - assembling dna graphs , in : jonoska , n. , saito , m. ( eds ) .",
    "discrete and topological models in molecular biology , springer , berlin heidelberg new york                                    las vergnas , m. ( 1981 ) eulerian circuits of 4-valent graphs embedded in surfaces , in : algebraic methods in graph theory , szeged , 1978 , colloquia mathematics societatis janos bolyai vol .",
    "25 north holland , amsterdam , 451477 .",
    "pevzner , p. , tang , h. , waterman , m. ( 2001 ) a new approach to fragment assembly in dna sequencing .",
    "recomb 01 proceedings of the fifth annual international conference on computational biology , acm , new york , pp.256267      rothemund , p. ( 2006 ) folding dna to create nanoscale shapes and patterns .",
    "nature 440:297302 sanderson , k. ( 2010 ) bioengineering : what to make with dna origami .",
    "nature 464:158159 seeman , n. ( 2004 ) nanotechnology and the double helix .",
    "sci am 290(6):6475 .",
    "seeman , n. ( 2007 ) an overview of structural dna nanotechnology .",
    "mol biotechnol 37(3):246257 shih , w. , quispe , j. , joyce , g. ( 2004 ) a 1.7 kilobase single - stranded dna that folds into a nanoscale octahedron .",
    "nature 427:618621 yan , h. , park , s. , finkelstein , g. , reif , j. , labean , t. ( 2003 ) dna - templated self - assembly of protein arrays and highly conductive nanowires .",
    "science 301:18821884      zheng , j. , birktoft , j. , chen , y. , wang , t. , sha , r. , constantinou , p. , ginell , s. , mao , c. , seeman , n. ( 2009 ) from molecular to macroscopic via the rational design of a self - assembled 3d dna crystal ."
  ],
  "abstract_text": [
    "<S> building a structure using self - assembly of dna molecules by origami folding requires finding a route for the scaffolding strand through the desired structure . </S>",
    "<S> when the target structure is a 1-complex ( or the geometric realization of a graph ) , an optimal route corresponds to an eulerian circuit through the graph with minimum turning cost . by showing that it leads to a solution to the 3-sat problem </S>",
    "<S> , we prove that the general problem of finding an optimal route for a scaffolding strand for such structures is np - hard . </S>",
    "<S> we then show that the problem may readily be transformed into a traveling salesman problem ( tsp ) , so that machinery that has been developed for the tsp may be applied to find optimal routes for the scaffolding strand in a dna origami self - assembly process . </S>",
    "<S> we give results for a few special cases , showing for example that the problem remains intractable for graphs with maximum degree 8 , but is polynomial time for 4-regular plane graphs if the circuit is restricted to following faces . </S>",
    "<S> we conclude with some implications of these results for related problems , such as biomolecular computing and mill routing problems . </S>"
  ]
}