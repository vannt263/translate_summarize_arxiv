{
  "article_text": [
    "in this paper , we give some quantum circuits for calculating the probability @xmath0 of a graph @xmath1 given data @xmath2 .",
    "@xmath1 together with a transition probability matrix for each node of the graph , constitutes a classical bayesian network , or cb net for short .",
    "bayesian methods for calculating @xmath0 have been given before ( the so called structural modular and ordered modular models ) , but these earlier methods were designed to work on a classical computer .",
    "the goal of this paper is to  quantum computerize \" those earlier methods .    often in the literature , the word",
    " model \" is used synonymously with  cb net \" and the word  structure \" is used synonymously with the bare ",
    "graph \" @xmath1 , which is the cb net without the associated transition probabilities .",
    "the bayesian methods for calculating @xmath0 that we will discuss in this paper assume a  meta \" cb net to predict @xmath0 for a cb net with graph @xmath1 .",
    "the meta cb nets usually assumed have a  modular \" pattern . two types of modular meta cb nets have been studied in the literature .",
    "we will call them in this paper unordered modular and ordered modular models although unordered modular models are more commonly called structural modular models .",
    "calculations with unordered modular models require that sums @xmath3 over graphs @xmath1 be performed .",
    "calculations with ordered modular models require that , besides sums @xmath3 , sums @xmath4 over  orders \" @xmath5 be performed . in some methods these two types of sums are performed deterministically ; in others , they are both performed by doing mcmc sampling of a probability distribution .",
    "some hybrid methods perform some of those sums deterministically and others by sampling .",
    "one of the first papers to propose unordered modular models appears to be ref.@xcite by cooper and herskovits .",
    "their paper proposed performing the @xmath3 by sampling .",
    "one of the first papers to propose ordered modular models appears to be ref.@xcite by friedman and koller .",
    "their paper proposed performing both @xmath3 and @xmath4 by sampling .    later on , refs.@xcite by koivisto and sood",
    "proposed a way of doing @xmath3 deterministically using a technique they call fast mobius transform , and performing @xmath4 also deterministically by using a technique they call dp ( dynamic programming ) .",
    "since the initial work of koivisto and sood , several workers ( see , for example , refs.@xcite ) have proposed hybrid methods that use both sampling and the deterministic methods of koivisto and sood .",
    "so how can one quantum computerize to some extent the earlier classical computer methods for calculating @xmath0 ?",
    "one partial way is to replace sampling with classical computers by sampling with quantum computers ( qcs ) .",
    "an algorithm for sampling cb nets on a qc has been proposed by tucci in ref.@xcite .",
    "a second possibility is to replace the deterministic summing of @xmath3 or @xmath4 by quantum summing of the style discussed in refs.@xcite , wherein one uses a grover - like algorithm and the technique of targeting two hypotheses .",
    "this second possibility is what will be discussed in this paper , for both types of modular models .",
    "finally , let us mention that some earlier papers ( see , for example , refs.@xcite ) have proposed using a quantum computer to do ai related calculations reminiscent of the ones being tackled in this paper .",
    "however , the methods proposed in those papers differ greatly from the one in this paper . those papers either do nt use grover s algorithm , or if they do , they do nt use our techniques of targeting two hypotheses and blind targeting .",
    "this paper assumes that the reader has already read most of refs.@xcite and @xcite . by tucci .",
    "reading those previous 2 papers is essential to understanding this one because this paper applies techniques described in those 2 previous papers .",
    "[ sec - intro ]",
    "most of the notation that will be used in this paper has already been explained in previous papers by tucci .",
    "see , in particular , sec.2 ( entitled  notation and preliminaries \" ) of refs.@xcite and @xcite . in this section",
    ", we will discuss some notation and definitions that will be used in this paper but which were not discussed in those two earlier papers .",
    "we will underline random variables .",
    "for example , we will say that the random variable @xmath6 has probability distribution @xmath7 and takes on values in the set @xmath8 .",
    "we will sometimes also use @xmath9 .    throughout this paper , the symbol",
    "@xmath10 , if used as a scalar , will always denote the number of nodes of a graph .",
    "however , @xmath10 will sometimes stand for the operator @xmath11 that measures the number of particles , either 0 or 1 , in a single qubit state .",
    "it will usually be clear from context whether @xmath10 refers to the number of nodes or the number operator . in cases where we are using both meanings at the same time",
    ", we will indicate the number operator by @xmath12 or @xmath13 or @xmath14 and the number of nodes simply by @xmath10 .    as usual , an ordered set or n - tuple ( resp .",
    ", unordered set ) will be indicated by enclosing its elements with parentheses ( resp . , braces )",
    "we will use two dots between two integers to denote all intervening integers .",
    "for example , @xmath15 , @xmath16 , @xmath17 .",
    "we will use a backslash to denote the exclusion of the elements following the backslash in an ordered or unordered set .",
    "for example , @xmath18 , @xmath19 , and @xmath20 .",
    "we will use the symbols @xmath21 inside ordered or unordered sets to denote various bounded sequences of integers .",
    "for example , @xmath22 , @xmath23 , @xmath24 , @xmath25 , @xmath26 , etc .    on occasion , we will use stirling s approximation :    n ! ( 2 n)^ ( ) ^n . note that @xmath27 .",
    "in this section , we will review some previous theory by other workers ( references already cited in sec.[sec - intro ] ) .",
    "this previous theory is the foundation of some algorithms for using _ classical computers _ to discover the structure of cb nets from data .",
    "the theory defines two types of  modular models \" , either unordered or ordered .      the main goal of the theory of modular models is to give a  meta \" cb net that helps us to discover the graph of a specific cb net . before embarking on a detailed discussion of modular models , it is convenient to discuss various sets of graphs .",
    "the structure of an @xmath10-node  bi - directed \" graph @xmath1 is fully specified by giving , for each node @xmath29 of graph @xmath1 , the set @xmath30 of parents of node @xmath31 .",
    "hence , we will make the following identification : g=(pa_n-1,  ,pa_1,pa_0 ) _ n , where    _ n = _ n=(2^)^n .",
    "note that @xmath32 .",
    ". then we will write @xmath34 if @xmath35 for all @xmath31 .",
    "as is customary in the literature , we will abbreviate the phrase  directed acyclic graph \" by dag .",
    "define    _ n & = & \\{g_n : g } + & = & 2^ ",
    "note that @xmath36 .",
    "a special element of @xmath37 is the fully connected graph with @xmath10 nodes , defined by    fcg_n & = & ( ,  , , , ) + & = & ( ,  , , , ) .",
    "note that @xmath38 .",
    "as an example , consider @xmath37 for @xmath39 .",
    "one has @xmath40 . to list the elements of @xmath41 ,",
    "one begins by noticing that any @xmath42 must have    r pa_0 + pa_1 + pa_2    .",
    "thus , we get the following list of elements of @xmath41 :        c @r=1pc & 1 & + 2 & & 0     + g_1= ( , , ) &    c @r=1pc & 1 & + 2 & & 0     + g_2= ( , , ) &    c @r=1pc & 1 & + 2 & & 0     + g_3= ( , , ) &    c @r=1pc & 1 & + 2 & & 0     + g_4= ( , , ) &    c @r=1pc & 1 & + 2 & & 0     + g_5= ( , , ) &    c @r=1pc & 1 & + 2 & & 0     + g_6= ( , , ) &    c @r=1pc & 1 & + 2 & & 0     + g_7= ( , , ) &    c @r=1pc & 1 & + 2 & & 0     +    note that @xmath43 .",
    "most of the previous literature speaks about an order or , more precisely , a linear order among the graphs of @xmath37 . in this paper , instead of using the language of linear orderings , we chose to speak in the totally equivalent language of permutations @xmath44 .    let @xmath45 be the unique fully connected graph with @xmath10 nodes , where @xmath46 is the root node , @xmath47 is the child of @xmath46 , @xmath48 is the child of @xmath47 and @xmath46 , and so on . given any @xmath49 , its nodes can be ordered topologically .",
    "this is tantamount to finding a permutation @xmath44 mapping the nodes of @xmath50 to the nodes of @xmath1 .",
    "let @xmath51 .",
    "see fig.[fig - fcg - g - map ] for an example with @xmath52 . in that figure",
    "= (    cccc _ 0 & _ 1 & _ 2 & _ 3 + _ 2 & _ 1 & _ 3 & _ 0    ) so @xmath53 , etc .",
    "note that in that figure , the parent sets of each node of @xmath1 are related to those of @xmath54 as follows :    l|l pa(3,g)= & pa(3^ , fcg_4)= + pa(2,g)=\\{1,3 } & pa(2^ , fcg_4)=\\{0,1,2 } \\{3,1,0 } + pa(1,g)=\\{3 } & pa(1^ , fcg_4)=\\{0 } \\{3 } + pa(0,g)=\\{1 } & pa(0^ , fcg_4)=\\{0,1 } \\{3,1 }    .",
    "[ eq - pa - sets - eg ] eq.([eq - pa - sets - eg ] ) implies that    pa_j = pa(j , g ) ^= ^.    for each @xmath44 , define the graph @xmath55 by    fcg_n^= ( pa_j)_j pa_j = ^ henceforth , we will say that a graph @xmath49 is consistent with permutation @xmath44 if @xmath1 can be obtained by erasing some arrows from @xmath55 .",
    "equivalently @xmath1 consistent with @xmath5 if @xmath56 .",
    "define    ( _ n)_&= & \\ { g_n : gfcg_n^ } + & = & 2^^ ",
    "2^^ 2^^ 2^^ .",
    "note @xmath57 .",
    "another useful set to consider is    ( sym_n)_g= \\ { sym_n : gfcg_n^ } .",
    "note that whereas @xmath58 , @xmath59 is much harder to calculate for large @xmath10 .    as an example , let us calculate @xmath55 for @xmath39 and all @xmath60 .",
    "one finds     _ 0= (    ccc 0&1&2 + 0&1&2    ) & (    ccc 0&1&2 + 0&1&2    ) & ( , , ) &    l ( ^,^,^ ) + = ( , , )    &    c @r=.5pc@c=.5pc & 1 & + 2 & & 0     + _ 1= (    ccc 0&1&2 + 0&2&1    ) & (    ccc 0&1&2 + 0&2&1    ) & ( , , ) &    l ( ^,^,^ ) + = ( , , )    &    c @r=.5pc@c=.5pc & 1 & + 2 & & 0     + _ 2= (    ccc 0&1&2 + 1&0&2    ) & (    ccc 0&1&2 + 1&0&2    ) & ( , , ) &",
    "l ( ^,^,^ ) + = ( , , )    &    c @r=.5pc@c=.5pc & 1 & + 2 & & 0     + _ 3= (    ccc 0&1&2 + 2&0&1    ) & (    ccc 0&1&2 + 1&2&0    ) & ( , , ) &    l ( ^,^,^ ) + = ( , , )    &    c @r=.5pc@c=.5pc & 1 & + 2 & & 0     + _ 4= (    ccc 0&1&2 + 1&2&0    ) & (    ccc 0&1&2 + 2&0&1    ) & ( , , ) &    l ( ^,^,^ ) + = ( , , )    &    c @r=.5pc@c=.5pc & 1 & + 2 & & 0     + _ 5= (    ccc 0&1&2 + 2&1&0    ) & (    ccc 0&1&2 + 2&1&0    ) & ( , , ) &    l ( ^,^,^ ) + = ( , , )    &    c @r=.5pc@c=.5pc & 1 & + 2 & & 0     +    .",
    "[ eq - fcg-3-sig ]    note that for each @xmath60 , @xmath61 are all graphs @xmath1 such that @xmath62 where @xmath63 is given by last column of eq.([eq - fcg-3-sig ] ) .",
    "henceforth , whenever we write a sum over @xmath1 without specifying the range of the sum , we will mean over the range @xmath28 .",
    "likewise , a sum over permutations @xmath5 without specifying the range should be interpreted as being over the range @xmath64 .",
    "thus ,    _ g_= _ g_n_sym_n .",
    "any set @xmath65 will be called a * feature set*. given any probability distribution @xmath66 for @xmath67 , define @xmath68 by    p()=_gp(g)= _",
    "g_n i_(g ) p(g ) , where @xmath69 is an indicator function .",
    "a set @xmath70 is said to be a * modular feature set * if it equals a cartesian product    =",
    "_ n-1  _1_0 _ n .",
    "we will sometimes denote such a set by @xmath71 .",
    "note that for a modular feature set ,    1_(g)= _ j 1__j(pa_j ) . as an example , for any two nodes @xmath72 , the feature set for the edge @xmath73 is @xmath71 , where    l _ j_2= + jj_2 , _ j=    .      in this section , we will discuss the meta cb net which defines unordered modular models .",
    "the meta cb net for unordered modular models is illustrated by fig.[fig - unord - modular ] for the case of 3 nodes , @xmath39 .",
    "we will assume that the random variable @xmath74 takes on values :    g=(pa_j)_j_n .",
    "let index @xmath75 label measurements and index @xmath29 label nodes .",
    "let @xmath76\\in s_{\\rvx_j}$ ] for all @xmath31 and @xmath77 .",
    "let @xmath78\\}_{\\forall m}$ ] , @xmath79\\}_{\\forall j , m}$ ] .",
    "we will assume that the random variable @xmath80 takes on values    d = x^ns__0^ms__1^m  s__n-1^m .",
    "@xmath80 is the data from which we intend to infer the structure @xmath74 of a cb net .",
    "we will assume that @xmath81 is proportional to @xmath82 ( in other words , that its support is inside @xmath83 ) so that    _ pa_jp(pa_j)=1 .",
    "let p(g ) = _ j \\ { ( pa_j)p(pa_j ) } .",
    "[ eq - pg - prod ] note that this implies that @xmath66 is proportional to @xmath84 . in light of our assumption about the support of @xmath81 ,",
    "there is no need to write down the @xmath82 in eq.([eq - pg - prod ] ) , but we will write it as a reminder .    let p(d|g)= _ j p(x_j|pa_j ) where    p(x_j|pa_j)= _",
    "tm_j p(x_j|pa_j , tm_j)p(tm_j|pa_j ) .",
    "[ eq - xj - paj ] let @xmath85 .",
    "the role of the variable @xmath86 is to parameterize the transition matrix for node @xmath31 .",
    "thus , summing over @xmath86 is equivalent to summing over all possible transition matrices for node @xmath31 .",
    "the @xmath87 can be modelled by a reasonable probability distribution .",
    "for example , under some reasonable assumptions , cooper and herskovits find in ref.@xcite that    p(x_j|pa_j)= _",
    "x_js__j \\{n(j , x_j , pa_j ) ! } , where    n(j , x_j , pa_j)= _ m=0^m-1 ( x_j[m]=x_j)(pa_j[m]=pa_j ) , and @xmath88 .",
    "this is a special case of the dirichlet probability distribution .",
    "now that our meta cb net for unordered modular models is fully defined , we can calculate the @xmath0 it predicts .",
    "j(pa_j)=p(x_j|pa_j)p(pa_j ) .",
    "then    p(g|d ) & = & + & = & , where @xmath89 means the numerator summed over @xmath1 . if @xmath90 is a modular feature set ,    p(|d ) = , [ eq - p - f - d - unord ] where @xmath91 means the numerator with @xmath92 replaced by @xmath28 .      in this section",
    ", we will discuss the meta cb net which defines ordered modular models .",
    "the meta cb net for ordered modular models is illustrated by fig.[fig - ord - modular ] for the case of 3 nodes , @xmath39 .",
    "comparing figs.[fig - unord - modular ] and [ fig - ord - modular ] , we see that unordered modular models presume that the different nodes of the graph @xmath1 we are trying to discover , are uncorrelated , an unwarranted assumption in some cases ( for example , if two nodes have a common parent ) . ordered modular models permit us to model some of the correlation between the nodes .",
    "as for the unordered case described in sec.[sec - class - unord ] , we will assume that the random variable @xmath74 takes on values :    g=(pa_j)_j_n , and the random variable @xmath80 takes on values    d = x^ns__0^ms__1^m  s__n-1^m .",
    "we will put a line over the @xmath93 as in @xmath94 for probability distributions referring to the ordered modular case to distinguish them from those referring to the unordered modular case , which we will continue to represent by @xmath95 without the overline .",
    "we will assume that @xmath96 is proportional to @xmath97 so that    _ pa_j ^ ( pa_j|)=1 .",
    "let    ( g|)= _ j ( pa_j|)= _ j\\ { ( pa_j^)(pa_j| ) } .",
    "note that this implies that @xmath98 is proportional to @xmath99 .",
    "let ( d|g)= _ j ( x_j|pa_j ) , where    ( x_j|pa_j ) = _ tm_j ( x_j|pa_j , tm_j ) ( tm_j|pa_j ) . as in the unordered case described in sec.[sec - class - unord ]",
    ", @xmath100 can be modelled by using a dirichlet or some other reasonable probability distribution .",
    "now that our meta cb net for ordered modular models is fully defined , we can calculate the @xmath101 it predicts .",
    "j(pa_j|)=(x_j|pa_j)(pa_j| ) .",
    "then    ( g|d ) & = & + & = & .    note that if    ( x_j|pa_j)= p(x_j|pa_j ) ,    ( pa_j|id)=p(pa_j)(pa_j ) , and    ( ) = ( , i d ) ,    where @xmath102 is the identity permutation , then    ( g|d ) = p(g|d ) .",
    "[ eq - pp - to - p-1 ]    if @xmath103 is a modular feature set ,    ( |d ) = .",
    "next we will assume that    ( pa_j| ) = ( pa_j|^ ) , _",
    "j(pa_j|^ ) when this is true , it is convenient to define the following @xmath104 functions for all @xmath105 and @xmath44 :    h(j^|^)= _ pa_j^1__j^(pa_j^ ) ( pa_j^^)_j^(pa_j^|^ ) .",
    "@xmath106 can be expressed in terms of the @xmath104 functions as follows :    ( |d ) = .",
    "[ eq - p - f - d - ord - long ]    suppose that for any @xmath107 ,    ( ) = [ eq - special - p - sigma ] where @xmath108 is some non - negative function defined for all @xmath105 and @xmath109 .",
    "a completely general @xmath110 has @xmath111 real degrees of freedom . on the other hand , the special @xmath110 given by eq.([eq - special - p - sigma ] )",
    "has @xmath112 degrees of freedom so it is just a poor facsimile of the full @xmath110 .",
    "nevertheless , this special @xmath110 is a nice bridge function between two interesting extremes : if @xmath113 is a constant function , then @xmath110 is too .",
    "furthermore , if @xmath114 , then it is easy to see that @xmath115 , where @xmath102 is the identity permutation .",
    "but @xmath115 is just the unordered modular model .",
    "we conclude that eq.([eq - special - p - sigma ] ) includes the uniform distribution and the unordered modular model as special cases .",
    "another nice feature of the special @xmath110 of eq.([eq - special - p - sigma ] ) is that for each @xmath31 , we can redefine @xmath116 so that it absorbs the corresponding @xmath117 function .",
    "thus , if we assume the special @xmath110 , then , without further loss of generality , eq.([eq - p - f - d - ord - long ] ) becomes    ( |d ) = .",
    "[ eq - p - f - d - ord ]    for instance , when @xmath39 , we have    ( | d)= . hence    .",
    "c h_2|\\{1,0}h_1|0h_0 + h_2|\\{0,1}h_0|1h_1    } a = h_2|\\{1,0 } ( h_1|0h_0 + h_0|1h_1 ) + .",
    "c h_1|\\{0,2}h_0|2h_2 + h_1|\\{2,0}h_2|0h_0    } b = h_1|\\{0,2 } ( h_0|2h_2 + h_2|0h_0 ) + .",
    "c h_0|\\{2,1}h_2|1h_1 + h_0|\\{1,2}h_1|2h_2    } c = h_0|\\{2,1 } ( h_2|1h_1 + h_1|2h_2 )    } ( |d)= .",
    "in this section , we will give quantum circuits for calculating @xmath118 for both unordered and ordered modular models .",
    "two types of sums , sums @xmath3 over graphs , and sums @xmath4 over permutations , need to be performed to calculate @xmath118 .",
    "the methods proposed in this section perform both of these sums using a grover - like algorithm in conjunction with the techniques of blind targeting and targeting two hypotheses , in the style discussed in refs.@xcite            in this section , we present one possible method for calculating @xmath106 for ordered modular models , where @xmath106 is given by eq.([eq - p - f - d - ord ] ) .",
    "eq.([eq - p - f - d - ord ] ) is just a sum over all permutations in @xmath64 .",
    "we have already shown how to do sums over permutations in ref.@xcite .",
    "so we could consider our job already done .",
    "however , using the method of ref.@xcite would entail the non - trivial task of finding a way of compiling the argument under the sum over permutations , a complicated @xmath10-fold product of @xmath104 functions . in this section",
    ", we will give a method for calculating eq.([eq - p - f - d - ord ] ) that does not require compiling this @xmath10-fold product of @xmath104 functions .                                          our method for calculating @xmath106 consists of applying the algorithm afga to a target state @xmath133 .",
    "] of ref.@xcite in the way that was described in ref.@xcite , using the techniques of targeting two hypotheses and blind targeting . as in ref.@xcite , when we apply afga in this section , we will use a sufficient target @xmath134 .",
    "all that remains for us to do to fully specify our circuit for calculating @xmath106 is to give a circuit for generating @xmath135 .",
    "see fig.[fig - halfmoon ] where a halfmoon vertex that we will use in the next figure is defined",
    ". controlled gates with one of these halfmoon vertices at the bottom should be interpreted as two gates , one with a @xmath136 control replacing the halfmoon , and one with a @xmath137 control replacing it .",
    "the one with the @xmath137 control should have at the top a @xmath138 rotation and the one with the @xmath136 control should have at the top a hadamard matrix .",
    "all controls acting on qubits other than the qubits at the very top and very bottom are kept the same .",
    "note that @xmath146 is a sum of @xmath147 terms , which is more than @xmath148 terms , but the controls in those @xmath147 terms together with the act of taking the matrix element between @xmath149 and @xmath150 , reduces the number of summed over terms to @xmath148 :              to draw the circuit of fig.[fig - qjen - ckt ] , especially for @xmath10 much larger than 3 , requires that one know how to enumerate all possible combinations of @xmath151 elements from a set of @xmath10 elements .",
    "a simple algorithm for doing this is known ( ref.@xcite ) .",
    "it s based on a careful study of the pattern in simple examples such as this one :        a more serious problem with using the circuit of fig.[fig - qjen - ckt ] for large @xmath10 is that as eq.([eq - exp - n2b ] ) indicates , the number of @xmath142 qubits grows exponentially with @xmath10 so the circuit fig.[fig - qjen - ckt ] is too expensive for large @xmath10 s .",
    "however , one can make an assumption which does nt seem too restrictive , namely that the in - degree ( number of parent nodes ) @xmath151 of all nodes of the graph @xmath1 is @xmath153 , where the bound @xmath154 does not grow with @xmath10 .",
    "define        for example , consider fig.[fig - qjen - ckt ] .",
    "if @xmath156 for that figure , then we can omit all the @xmath157 qubits , and the @xmath158 rotations for @xmath159 .",
    "in other words , fig.[fig - qjen - ckt ] can be simplified to fig.[fig - qjen - ckt - restrict ] .",
    "claim [ cl - qjen - ckt ] still holds if we replace @xmath160 by 1 and @xmath161 by @xmath162 in eqs.([eq - z0-z1-claim ] ) ."
  ],
  "abstract_text": [
    "<S> we give some quantum circuits for calculating the probability @xmath0 of a graph @xmath1 given data @xmath2 . </S>",
    "<S> @xmath1 together with a transition probability matrix for each node of the graph , constitutes a classical bayesian network , or cb net for short . </S>",
    "<S> bayesian methods for calculating @xmath0 have been given before ( the so called structural modular and ordered modular models ) , but these earlier methods were designed to work on a classical computer . </S>",
    "<S> the goal of this paper is to  quantum computerize \" those earlier methods . </S>"
  ]
}