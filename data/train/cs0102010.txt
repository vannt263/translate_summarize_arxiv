{
  "article_text": [
    "the physical mapping of dna is a key problem in computational biology @xcite .",
    "a _ map _ of a dna sequence consists of the locations of some given small sequences like e.g. gaattc .",
    "biologists use such maps in a preparatory step to determine the target dna sequence @xcite .",
    "a common technique of constructing maps uses restriction enzymes to cut a dna sequence at the positions where a particular short dna sequence appears .",
    "these positions are called _",
    "restriction sites_. one approach to modeling map construction is the _",
    "double digest _",
    "( dd ) problem . given two restriction enzymes @xmath0 and @xmath1",
    ", this approach cuts a target dna sequence using enzyme @xmath0 , enzyme @xmath1 , and both enzymes , separately .",
    "it is a biology fact that the restriction sites for enzymes @xmath0 and @xmath1 do not coincide . throughout this paper ,",
    "we make use of this fact .",
    "let @xmath2 , @xmath3 and @xmath4 be the three multisets of the lengths of the fragments formed after applying enzyme @xmath5 , enzyme @xmath6 and both enzymes to the target dna sequence , respectively . given @xmath2 , @xmath3 and @xmath4 , the dd problem asks for permutations of the lengths in @xmath2 and @xmath3 such that if these sets of lengths are plotted on top of one another , the lengths of all the resulting subintervals formed due to overlapping match exactly the lengths in @xmath4 .",
    "see figure  [ fig - dd - example ] for an example .",
    "many algorithms @xcite have been proposed for the dd problem .",
    "stefik @xcite gave the first algorithm using artificial intelligence .",
    "fitch , smith and ralph @xcite reduced the dd problem to the set partition problem .",
    "goldstein and waterman @xcite approached this problem with a stochastic annealing heuristic for the traveling salesman problem .",
    "they also showed that the dd problem is np - hard by reducing the set partition problem to it .",
    "this paper suggests a new approach , called the _",
    "enhanced double digest _",
    "( edd ) problem .",
    "the edd problem uses @xmath2 , @xmath3 , @xmath4 and some additional length information ; see section  [ sec - definition ] for the details of the approach .",
    "although the edd problem is still np - hard , we show that if the lengths in @xmath4 are all distinct , it can be solved in linear time .",
    "we also generalize the algorithm for the case where the number of duplicates in @xmath4 is bounded by a constant .",
    "the time complexity of this generalized algorithm remains linear .",
    "section  [ sec - definition ] details the new approach to define the edd problem formally .",
    "section  [ sec - linear ] gives the linear - time algorithm for the case where @xmath4 is duplicate - free .",
    "also , it generalizes the algorithm to handle a small number of duplicate lengths .",
    "section  [ sec - np ] proves that the edd problem is np - hard .",
    "section  [ sec - conclusion ] concludes with some directions for further work .",
    "consider a target dna sequence and two restriction enzymes @xmath0 and @xmath1 .",
    "* by applying enzyme @xmath0 ( respectively , @xmath1 ) to the target dna sequence , we obtain @xmath7 ( respectively , @xmath8 ) fragments .",
    "let @xmath9 ( respectively , @xmath10 ) be the multiset of the lengths of these @xmath7 ( respectively , @xmath8 ) fragments .",
    "* for @xmath11 , let @xmath12 be the fragment corresponding to @xmath13 . we apply enzyme @xmath1 to the fragment @xmath12 and obtain a set of subfragments .",
    "let @xmath14 be the multiset of the lengths of these subfragments .",
    "* for @xmath15 , let @xmath16 be the fragment corresponding to @xmath17 . we apply enzyme @xmath0 to the fragment @xmath16 and obtain a set of subfragments .",
    "let @xmath18 be the multiset of the lengths of these subfragments .",
    "for the example in figure  [ fig - dd - example ] , the following length information is gathered : @xmath19 it is easily verified that the data found in this way has the following properties :    [ fact - g ]    1 .   for @xmath11 , @xmath20 . for @xmath15 , @xmath21 .",
    "2 .   @xmath22 .",
    "3 .   @xmath23 .",
    "straightforward .",
    "given @xmath24 , the _ enhanced double digest problem _ @xmath25 asks for a _ valid permutation _",
    "@xmath26 of the elements in @xmath2 and @xmath3 such that the following can be achieved . when the fragments @xmath12 for @xmath27 and @xmath16 for @xmath28 are plotted on the same line according to the order given by @xmath29 and @xmath30 , a set of subfragments is formed due to overlapping .",
    "the multiset @xmath4 of the lengths of these subfragments is required to be equal to @xmath31 .",
    "in addition ,    * for every @xmath27 ( respectively , @xmath28 ) , @xmath14 ( respectively , @xmath18 ) is equal to the multiset of the lengths of the subfragments which overlap with @xmath12 ( respectively , @xmath16 ) .    note that an instance of this problem may have no solution or more than one valid permutation .",
    "the algorithms given in section  [ sec - linear ] can recover all valid permutations , if any exists .",
    "unless otherwise stated , this section assumes that @xmath4 has no duplicates .",
    "let @xmath32 .",
    "this section shows that the edd problem @xmath33 can be solved in @xmath34 time .",
    "section  [ sec - graph - represent ] formulates the edd problem as a graph problem .",
    "section  [ sec - distinct ] describes the linear - time algorithm .",
    "section  [ sec - general ] discusses how to generalize this linear - time algorithm to the case where @xmath4 may contain a small number of duplicates .",
    "given @xmath24 , we construct an undirected graph @xmath35 as follows .",
    "* the node set of @xmath36 .",
    "* for every @xmath27 and every @xmath37 , @xmath38 if @xmath39 .",
    "* for every @xmath28 and every @xmath37 , @xmath40 if @xmath41 .    from the definition",
    ", we can observe that @xmath35 satisfies the following lemma .",
    "[ lem - simple - prop ] @xmath35 is connected . for each node in @xmath42 ,",
    "its degree is at least @xmath43 and it is adjacent to nodes in @xmath4 only .",
    "also , every node in @xmath4 connects to exactly one node in @xmath2 and one node in @xmath3 .",
    "straightforward based on the assumption that @xmath4 has no duplicates .",
    "if @xmath33 has a valid permutation , @xmath35 has two more properties as stated in lemma  [ lem - property ] .",
    "figure  [ fig - eg - tree ] illustrates an example .",
    "diameter _ of a tree is a path with the largest number of edges .",
    "a _ dangler _ is a @xmath44-node - long path .",
    "given a tree @xmath45 , a subtree @xmath46 of @xmath45 is said to be _ hanged on _ a path @xmath47 in @xmath45 if @xmath46 is a tree in the forest @xmath48 .",
    "[ lem - property ] if @xmath33 has a valid permutation , then the following statements hold .    1 .",
    "[ item2 ] @xmath35 is a tree .",
    "[ item3 ] for any diameter @xmath49 of @xmath35 , the subtrees hanged on @xmath49 must be danglers .",
    "statement [ item2 ] . to prove by contradiction ,",
    "suppose that @xmath35 contains a cycle @xmath50 . by the construction of @xmath35 , @xmath50 must be of the form @xmath51 where @xmath52 ; @xmath53 ; @xmath54 ; and @xmath55 .    by definition , if @xmath56 is a path in @xmath35 , then @xmath12 and @xmath16 overlap by @xmath57 in any valid permutation of @xmath33 .",
    "thus , for @xmath58 , the existence of the subpath @xmath59 of @xmath50 in @xmath35 means that @xmath60 overlaps with @xmath61 and @xmath62 and @xmath63 overlaps with @xmath62 and @xmath64 . to enable both @xmath60 and @xmath63 overlap with @xmath62 , @xmath62 must be in the middle of @xmath61 and @xmath64 for @xmath58 .",
    "consequently , for @xmath58 , @xmath61 is in the middle of @xmath65 and @xmath66 , which is impossible .",
    "statement [ item3 ] . for any diameter @xmath49 of @xmath35",
    ", we show that every subtree @xmath46 hanged on @xmath49 must be a dangler .",
    "first , @xmath46 must be hanged on @xmath49 at a node in @xmath42 . otherwise , if @xmath46 is hanged on @xmath49 at a node @xmath67 , @xmath68 has degree greater than @xmath44 , contradicting lemma  [ lem - simple - prop ] .",
    "then , @xmath46 has more than one node because the root of @xmath46 is a node in @xmath4 and must be of degree @xmath44 .",
    "if @xmath46 can not have more than @xmath44 nodes , statement  [ item3 ] follows .",
    "to prove by contradiction , suppose that @xmath46 has more than two nodes . without lost of generality , assume that @xmath46 is hanged on @xmath49 at a node @xmath69 and the root of @xmath46 is a node @xmath70 .",
    "note that @xmath71 has another neighbour , say @xmath72 , from @xmath3 . if @xmath46 contains more than two nodes",
    ", @xmath72 must has a child , say @xmath73 , from @xmath4 and @xmath73 must has a child , say @xmath74 , from @xmath2 .",
    "thus , @xmath46 must have a root - to - leaf path of length more than @xmath75 .",
    "then , the two paths from @xmath76 to both ends of @xmath49 must be of length more than @xmath75 .",
    "otherwise , @xmath49 can not be a diameter of @xmath35 . from those observations",
    ", @xmath35 has the pattern shown in figure  [ fig - invalid - eg ] . according to the pattern , @xmath77 and @xmath78 overlap with @xmath79 .",
    "therefore , in any valid permutation , one of @xmath77 and @xmath78 , say @xmath80 , must be in the middle of the other two fragments and @xmath80 can only overlap with @xmath79 .",
    "however , according to the pattern in figure  [ fig - invalid - eg ] , for @xmath81 , @xmath82 overlaps with another fragment @xmath61 , reaching a contradiction .",
    "now , we know that if @xmath33 has a valid permutation , @xmath35 satisfies the two properties of lemma  [ lem - property ] . the remainder of this section show that the converse of this statement is also true .",
    "suppose that @xmath35 is a tree with a diameter @xmath49 such that all the subtrees hanged on @xmath49 are danglers .",
    "we define @xmath83 to be a permutation on @xmath4 formed by a search defined below .",
    "_ dangler - first search : _ : :    traverse @xmath35 starting from one end of @xmath49 to    the other end of @xmath49 ; read off the nodes in    @xmath4 on @xmath49 ; whenever meet any node    @xmath84 with degree greater than @xmath44 , read off the    nodes in @xmath4 in the danglers hanged on @xmath49 at    @xmath84 in any order and continue to traverse @xmath49 .",
    "[ lem - read - c ] the elements in each @xmath14 form a consecutive subsequence in @xmath83 .",
    "similarly , the elements in each @xmath18 form a consecutive subsequence in @xmath83 .    for each @xmath85 ,",
    "if @xmath14 contains only one element , then the lemma follows .",
    "otherwise , @xmath13 is of degree at least @xmath44 .",
    "then , @xmath13 must be on the diameter @xmath49 .",
    "let @xmath68 and @xmath86 be elements in @xmath14 which are the two neighbours of @xmath13 on @xmath49 . the remaining nodes in @xmath14 must be located in the danglers hanged on @xmath49 at @xmath13 . by dangler - first search , all the elements in @xmath14 must form a consecutive subsequence in @xmath83 . by symmetry , for each @xmath87 , the elements in @xmath18 must form a consecutive subsequence in @xmath83 .    by lemma  [ lem - read - c ] , @xmath83 can be partitioned into @xmath7 subintervals such that the @xmath88th interval contains the elements in @xmath89 for @xmath90 .",
    "let @xmath29 be the permutation @xmath91 .",
    "similarly , @xmath83 can be partitioned into @xmath8 intervals such that the @xmath92th interval contains the elements in @xmath93 for @xmath94 .",
    "let @xmath30 be the permutation @xmath95 .",
    "we call @xmath26 the _ induced permutation _ of @xmath83 .",
    "[ lem - valid - solution ] the induced permutation @xmath26 of @xmath83 is a valid permutation of @xmath33 .",
    "suppose the lengths from @xmath96 and @xmath4 are plotted on the same line according to the order given by @xmath29 , @xmath30 and @xmath83 , respectively .",
    "consider the stripes formed from @xmath2 and @xmath4 . by fact",
    "[ fact - g ] and lemma  [ lem - read - c ] , for each @xmath85 , @xmath12 overlaps with @xmath97 for all @xmath98 . by symmetry , for each @xmath87 , @xmath16 overlaps with @xmath97 for all @xmath99 .",
    "then , by the definition of the edd problem , @xmath26 is a valid permutation .",
    "[ corol - summary ] given the enhanced double digest problem @xmath33 and its corresponding graph @xmath35 , @xmath33 has a valid permutation if and only if @xmath35 satisfies the two properties in lemma  [ lem - property ] .",
    "the only - if part follows from lemma  [ lem - property ] .",
    "the if part follows from lemma  [ lem - valid - solution ] .",
    "this section describes how to compute a valid permutation of @xmath33 in @xmath34 time .",
    "the algorithm is as follows .",
    "* algorithm * enhanced - double - digest    1 .",
    "construct the graph @xmath35 corresponding to @xmath33 .",
    "2 .   if @xmath35 does not satisfy the two properties in lemma  [ lem - property ] , then return `` no valid permutation '' .",
    "3 .   find the permutation @xmath83 using dangler - first search .",
    "4 .   find the induced permutation @xmath26 of @xmath83 .",
    "return @xmath26 .",
    "algorithm enhanced - double - digest can correctly find a valid permutation in @xmath34 time .",
    "first , by lemma  [ lem - valid - solution ] and theorem  [ corol - summary ] , enhanced - double - digest is correct . as for its time complexity",
    ", step 1 requires @xmath34 time as @xmath35 contains @xmath100 edges and we can find each edge in @xmath101 time .",
    "step 2 checks whether @xmath35 satisfies the two properties in lemma  [ lem - property ] . for property [ item2",
    "] , we can determine whether a graph is a tree in @xmath34 time .",
    "for property [ item3 ] , we can compute a diameter of a tree in linear time first , then , we verify whether @xmath35 satisfies property [ item3 ] by detecting whether the subtrees hanged on the diameter are danglers .",
    "thus , step 2 requires @xmath34 time .",
    "step 3 finds @xmath83 using dangler - first search . since the search scans every node in @xmath35 once , it runs in @xmath34 time .",
    "step 4 finds the induced permutation @xmath26 of @xmath83 in @xmath34 time . in summary , a valid permutation of @xmath33",
    "can be computed in @xmath34 time .    by modifying algorithm enhanced - double - digest slightly",
    ", we can report all valid permutations of @xmath33 .",
    "first , observe that the valid permutations of @xmath33 depend on the possible permutations @xmath83 .",
    "there are three cases .",
    "case 1 : @xmath35 does not have any dangler .",
    "then , there is a unique @xmath83 .",
    "thus , the current algorithm reports all valid permutations of @xmath33 .",
    "case 2 : @xmath35 has one set of danglers hanged on one node of its diameter .",
    "then , the possible permutations @xmath83 depend on the permutation of the set of nodes in the danglers which belong to @xmath4 . for the example in figure  [ fig - eg - tree ] ,",
    "the possible permutations @xmath83 can be represented by @xmath102 all valid permutations @xmath29 and @xmath30 can be represented by @xmath103 and @xmath104 , respectively .",
    "these valid permutations can be reported by modifying steps 3 and 4 of the algorithm .",
    "the time complexity of the modified algorithm is still @xmath34 .",
    "case 3 : @xmath35 has @xmath105 sets of danglers hanged on @xmath105 respective nodes of its diameter .",
    "then , the possible permutations @xmath83 can be represented similarly , except that each @xmath83 contains @xmath105 permutation blocks .",
    "the above modified algorithm is sufficient to report all valid permutations of @xmath33 .",
    "the algorithm enchanced - double - digest in section  [ sec - distinct ] can solve the edd problem if @xmath4 contains no duplicates . here , we give an algorithm which works without this assumption .",
    "first , we consider the following example .",
    "@xmath106    in this example , there are two @xmath107 s in @xmath108 .",
    "these two @xmath107 s in fact represent two different subfragments in the target dna sequence . to distinguish them ,",
    "let the copy of @xmath107 in @xmath109 be @xmath110 and that in @xmath111 be @xmath112 . since @xmath107 also belongs to @xmath113 and @xmath114 , there are two possible combinations , namely , ( a ) @xmath115 and @xmath116 and ( b ) @xmath117 and @xmath118 .",
    "figure  [ fig - general - eg](a ) and [ fig - general - eg](b ) illustrate the graph @xmath35 for both cases ; from these two graphs @xmath35 , we can obtain a valid permutation from combination ( a ) .",
    "therefore , we can handle duplicates in @xmath4 by giving them different subscripts .",
    "then , all the elements in @xmath4 are different and we can solve the enhanced double digest problem using the algorithm enhanced - double - digest in section  [ sec - distinct ] .",
    "more precisely , we have the following algorithm .    1 .",
    "if @xmath4 contains duplicates , then we assign a unique subscript to each duplicate .",
    "2 .   for each possible combinations of the subscripts in the duplicates",
    ", we execute enhanced - double - digest to compute a valid permutation .",
    "let @xmath119 be the number of duplicates in @xmath4 .",
    "the above algorithm execute enhanced - double - digest for at most @xmath120 time .",
    "therefore , a valid permutation can be computed in @xmath121 time .",
    "thus , if @xmath119 is constant , the generalized algorithm still runs in linear time .",
    "this section proves the np - hardness of the enhanced double digest problem by a reduction from the hamiltonian path problem @xcite .    given an undirected graph @xmath122 , we show that in polynomial time , we can construct an edd instance @xmath123 so that @xmath122 contains a hamiltonian path if and only if @xmath123 has a valid permutation . for ease of prove ,",
    "we augment @xmath122 with two new nodes @xmath124 and @xmath125 .",
    "all nodes originally in @xmath122 have edges to @xmath124 .",
    "in addition , we add an edge @xmath126 to @xmath122 . note that the original @xmath122 contains a hamiltonian path if and only if the amended @xmath122 has a hamiltonian path .",
    "let @xmath119 be the number of nodes in @xmath122 .",
    "assume that the nodes in @xmath122 are labeled by @xmath127 .",
    "for each node @xmath128 , let @xmath129 be the number of neighbours of @xmath128 .",
    "let @xmath130 .",
    "the edd instance @xmath123 is given the following length information .",
    "note that this length information can be constructed from @xmath122 in polynomial time .",
    "* @xmath131 where @xmath132 , @xmath133 and @xmath134 for @xmath135 .",
    "also , @xmath136 ; @xmath137 ; and @xmath138 for @xmath139 . * @xmath140 where @xmath141 and @xmath142 for all @xmath143 and all @xmath144 .",
    "also , @xmath145 and @xmath146 .",
    "@xmath122 has a hamiltonian path if and only if there is a valid permutation for @xmath123 .",
    "the two directions are proved as follows .",
    "( @xmath147 ) let @xmath148 be a hamiltonian path in @xmath122 .",
    "let @xmath29 and @xmath30 be permutations of @xmath2 and @xmath3 as shown in figure  [ fig - permut ] .",
    "it is easy to check that @xmath26 is a valid permutation to @xmath123 .",
    "( @xmath149 ) let @xmath26 be a valid permutation of @xmath123 .",
    "the remainder of this proof shows that the ordering of the lengths in @xmath29 defines a hamiltonian path in @xmath122 .",
    "assume the lengths from @xmath2 are plotted on a line according to the order given by @xmath29 and similarly , the lengths from @xmath3 are also plotted on this line according to @xmath30 . for each @xmath150 ,",
    "the line fragment corresponds to @xmath151 is called @xmath152 . for each @xmath153 ,",
    "the line fragment corresponds to @xmath154 , is called @xmath155 .    for every @xmath153 , since @xmath156 , @xmath155 overlaps with two consecutive line fragments from @xmath2 ; in addition , the overlapping regions between @xmath155 and these two line fragments must be of length @xmath128 and @xmath157 , respectively .",
    "observe that @xmath158 and @xmath159 for all @xmath160 .",
    "one of these two fragments , which overlaps with @xmath155 , must be @xmath152 .",
    "the other line fragment can be @xmath161 for any @xmath162 with @xmath163 , i.e. , @xmath164 .",
    "let @xmath165 .",
    "> from the above argument , we know that , for every two consecutive line fragments @xmath12 and @xmath166 , there exists a fragment @xmath155 ( where @xmath128 is either @xmath167 or @xmath168 ) which overlaps with both @xmath169 and @xmath170 .",
    "the above argument also implies that @xmath171 .",
    "thus , @xmath172 forms a path in @xmath122 . as @xmath172 contains all the @xmath119 nodes of @xmath122 ,",
    "this path is a hamiltonian path .",
    "this highly theoretical work can be extended in several directions .",
    "one direction is to design a series of laboratory procedures that can actually produce the input length information in the required form .",
    "another direction is to consider the problem of more than @xmath44 digesting enzymes .",
    "using multiple enzymes could help resolve the issue of multiple solutions that arise when there are danglers or duplicate subfragment lengths .",
    "also , the extra input may actually make the problem solvable in a shorter period of time .",
    "the third direction is to have a probabilistic analysis of the number of duplicates in @xmath4 , when the length of the target dna sequence is given",
    ". it would be the most meaningful to conduct such analysis under a probabilistic model that is derived specifically for feasible laboratory procedures .",
    "lastly , this paper does not address the issue of noise in the length data . from the practical point of view",
    ", handling noise effectively is very important .",
    "we wish to thank the anonymous referees for many helpful suggestions .                p.  a. pevzner . physical mapping , flows in networks and minimum cycles mean in graphs . in s.",
    "g. gindikin , editor , _ dimacs series in discrete mathematics and theoretical computer science 8 : mathematical methods of analysis of biopolymer sequences _ , pages 99112 .",
    "american mathematical society , providence , ri , 1992 ."
  ],
  "abstract_text": [
    "<S> the _ double digest problem _ is a common np - hard approach to constructing physical maps of dna sequences . </S>",
    "<S> this paper presents a new approach called the _ enhanced double digest problem_. although this new problem is also np - hard , it can be solved in linear time in certain theoretically interesting cases </S>",
    "<S> .    dna physical mapping , fast algorithms , graph - theoretic techniques , np - hardness </S>"
  ]
}