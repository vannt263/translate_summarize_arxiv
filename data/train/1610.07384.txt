{
  "article_text": [
    "the communication buses in modern vehicles are an essential part of advanced driver assistants .",
    "those systems depend on the data gather by sensors , such as lidar , cameras , and radars .",
    "the data about the surrounding environment are communicated through communication buses to ecus ( _ electronic control units _ ) where they are processed , and appropriate actions are taken .",
    "for example , if an obstacle is detected in front of the vehicle , the car starts break automatically .",
    "not only driver assistants rely on the communication .",
    "different ecus are responsible for running car as a whole .",
    "the fuel is injected accordingly to the current combustion and outside conditions , mod- ern cars with drive - by - wire system steer via electronic signals , even the windows are controlled by the central infotainment system .    the modern vehicle is considered as a fault - tolerant and dependable system . if one part of it breaks or does not work as expected , the human life is threatened .",
    "since the intra - vehicular communication is the key element of the car , it is subject to safety certification .",
    "safety certification is a process , where the manufacturer proves that his safety - critical systems such as autonomous driving are working correctly to a high degree of assurance .",
    "if they are not able to demonstrate the correct behavior of the central communication bus , then the whole certification process breaks down .    traditionally",
    ", event - triggered communication protocols such as can ( _ controller area network _ ) are commonly used . in the event - triggered environment , the actions",
    "are performed _ on - demand _ ,",
    "i.e. triggered by some event .",
    "the communication is governed by scheduling policies that react to the observed situations during the run time execution .",
    "the capabilities of driver assistance systems are rapidly improving ; hence the amount of data transferred through the network in a vehicle is growing .",
    "traditional event - triggered protocols like can were not designed for a high data throughput ; therefore their usage in modern cars is limited .",
    "moreover , the response time analysis ( i.e. the analysis of the behavior of the system ) in real - life event - triggered communication systems including gateways and precedence relations is a very complex problem , therefore the safety certification of systems utilizing event - triggered environment is a difficult task .",
    "messages in time - triggered communication are transferred through the network at specific times prescribed by a static pre - computed static schedule .",
    "when constructing the schedule , a designer imposes a set of constraints the communication that is met in every feasible solution to the scheduling problem .",
    "therefore , the certification of the system is be achieved via showing the feasibility of the produced communication schedule .",
    "this advantage of time - triggered environments leads to the design of new protocols that includes time - triggered communication for safety - critical systems .",
    "for example , flexray bus is used nowadays in the automotive industry ( e.g. porsche panamera , nissan infinity q50 ) .",
    "the scheduling of flexray static segment can be solved very efficiently due to @xcite . moreover , the modern time - triggered buses such as _ time - triggered ethernet _",
    "@xcite offer a high throughput and determinism guarantees and enable applications like valet parking and autonomous driving .",
    "one of the disadvantages of time - triggered protocols is their non - flexibility .",
    "for example , the static schedule does not take into consideration the message retransmission .",
    "the retransmission occurs when a highly critical message is not delivered e.g. due to electromagnetic noise .",
    "typically in the complex systems functionalities with different criticality co - exists on a single bus .",
    "suppose a typical case in a car with messages with three different levels of criticality :    * messages with high criticality ( criticality level 3 ) are used for safety - related functionalities ( their failure may result in death or serious injury to people ) , such as steering and braking ; * messages with medium criticality ( criticality level 2 ) are used for mission - related functionalities ( their failure may prevent a goal - directed activity from being successfully completed ) , such as combustion engine control ; * messages with low criticality ( criticality level 1 ) are used for infotainment functionalities , such as audio playback .",
    "possible solution how to enable message retransmissions in static time - triggered schedules is to allocate more processing time for each message to account for possible retransmissions . if no retransmission occurs during an actual execution , then the resource is idle until the start time of the next message .",
    "however , since retransmissions are not that frequent , the average resource utilization is low .",
    "we use a different strategy .",
    "we build static schedules that allow message retransmission to some degree . extra time needed for retransmissions",
    "is compensated by skipping less critical messages ( e.g. in our example , breaking versus audio playback ) . even though this is a very elegant solution that achieves efficient resource utilization ,",
    "the price we pay for it is that it modifies traditional scheduling problem into the challenging one  the schedule has to assume alternative schedules based on the observed runtime scenario .",
    "there is an exponential number of possible runtime scenarios , and for each of them , the static schedule needs to be well - defined .    for this automotive application , the criticality of a message corresponds to its maximum number of possible ( re)transmissions .",
    "see an example of a static schedule that accounts for retransmissions in fig .",
    "[ fig : feasible ] . there @xmath1 and @xmath2 have low criticality , and no retransmissions are allowed . @xmath3 and",
    "@xmath4 correspond to messages with medium criticality ; thus they can be re- transmitted once .",
    "the most critical message is @xmath5 , that can be retransmitted twice .",
    "the retransmission of the messages causes a prolongation of the processing time that depicted in levels on the vertical axis .",
    "the top level of each message represents its wcet ( _ the worst case execution time _ ) , so this is the time that it takes to transmit the message under the most pessimistic conditions .",
    "the prolongations are compensated by skipping less critical messages . with this mechanism ,",
    "the successful transmission of highly critical messages is guaranteed while in the average case runtime scenario the resource ( i.e. communication bus ) is efficiently utilized .",
    "schedules with three criticality levels arise from the application in the automotive domain .",
    "the adaptation of iec 61508 safety standard @xcite , the _ asil _ , defines the application levels with a hazard assessment corresponding to three _ safety integrity levels_.",
    "scheduling of safety - critical messages on this time - triggered network can be modeled as a scheduling problem where tasks having a set of different processing times represent messages , and the resource is a communication channel in the network .",
    "a solution of the scheduling problem is given by a schedule that switches to the higher criticality level when a prolongation of a task occurs .",
    "after its successful completion , it matches - up with the original schedule . the trade - off between the safe and efficient schedules",
    "is achieved by skipping less critical messages when the prolongation of a more critical one takes place .",
    "the problem of mixed - criticality message retransmission in time - triggered environments leads to an interesting combinatorial problem , where we are given a set of shapes that are aligned on the left side with the right side that is jagged ( see an example in fig .  [",
    "fig : feasible ] ) .",
    "the goal is to pack these shapes as tight as possible so that they do not overlap .      in this paper",
    ", we solve the scheduling problem of message retransmission in time - triggered environments .",
    "the objective is to find a static schedule that accounts for unforeseen message retransmissions while minimizing the length occupied by time - triggered communication .",
    "the uncertainty about the processing time is modeled using an abstraction that considers f - shaped tasks .",
    "we show the relation be- tween f - shaped tasks and the underlying probability distribution functions .",
    "furthermore , we show a new complexity result that establishes the membership of the considered problem into @xmath6 complexity class , and we provide an approximation algorithm .",
    "we study the characterization of the set of optimal solutions for the problem with two criticality levels .",
    "finally , we propose efficient exact algorithms for problems with two and three criticality levels , which solve instances with up to 200 tasks , beating the best - known method by a large margin .",
    "the rest of the paper is organized as follows . in sec .",
    "[ sec : relwork ] we survey the related work . in sec .",
    "[ sec : mcproblem ] we show the relation between f - shaped tasks and discretization of cumulative probability distribution functions . in sec .",
    "[ sec : genprop ] we prove approximability of the problem . in sec .",
    "[ sec : two ] and [ sec : three ] we show properties of the problem with two and three criticality levels and we propose efficient exact algorithms . finally , in sec .",
    "[ sec : results ] we present computational results on sythetic data demonstrating the efficiency of the proposed approach .",
    "the exhaustive survey on mixed - criticality in real - time systems is presented by @xcite .",
    "this research is traditionally concentrated around event - triggered approach to scheduling . in the seminal paper @xcite vestal",
    "proposed a method that assumes different wcets ( _ the worst case execution time _ ) obtained for discrete levels of assurance .",
    "apart from this proposition , the paper presents modified preemptive fixed priority schedulability analysis algorithms .",
    "however , the preemptive model is not suitable for communication protocols , and it significantly changes the scheduling problem .",
    "@xcite formulated the basic model of mixed - criticality systems .",
    "they study mc schedulability problem with two criticality levels under special restrictive cases in the event - triggered environment .",
    "@xcite argued that mixed - criticality shall be pursued in time - triggered systems .",
    "baruah s approach @xcite in the time - triggered environment assumed preemptive tasks with up to two criticality levels .",
    "it makes it unsuitable for communication protocols since the preemption would be costly . @xcite",
    "proposed the problem of non - preemptive mixed - criticality match - up scheduling motivated by scheduling messages on a highly used communication channel .",
    "they showed how a schedule with f - shaped tasks can be used to deal with a task disruption by skipping less critical tasks .",
    "they provide the relative order milp model for @xmath7 scheduling problem , but it can deal with instances with only about 20 messages .",
    "the concept of match - up scheduling was introduced by @xcite . in a case of a disruption ,",
    "the goal is to construct a new schedule that matches the original one at some point in the future .",
    "this concept is mostly studied in the context of manufacturing problems @xcite .",
    "taking broader perspective , the problem can be viewed as a case of robust and stochastic optimization due to uncertainty about transmission times while satisfying safety requirements .",
    "@xcite surveys robust versions of various optimization problems , but rather continuous than discrete ones .",
    "the field of stochastic optimization is reviewed by @xcite .",
    "they state that integer variables introduced to stochastic programming complicate its solution , yielding suboptimal results even for small - sized problems .    as in our problem , some of the less critical messages are allowed to be skipped , the problem is related to the scheduling with a job rejection .",
    "@xcite reviews offline scheduling with a job rejection .",
    "these approaches consider two criteria , a measure associated with schedule quality and the cost incurred by rejected jobs .",
    "the solution to this problem is a set of accepted jobs and a set of rejected jobs .",
    "however , rejected jobs can not be executed in any execution scenario ; thus this model is not suitable for communication protocols mentioned in our motivation .",
    "our problem also embeds scheduling with setup times .",
    "@xcite shows that problems with _ sequence - dependent _",
    "( i.e. where a setup time is given for a pair of consecutive tasks ) setup times are mostly studied .",
    "however , in our problem the feasible start time of a task depends on a permutation of _ all _ preceding tasks , not just the immediate predecessor ; therefore it represents a more general problem .    to the best of our knowledge ,",
    "the problem of offline non - preemptive mixed - criticality match - up scheduling was addressed by @xcite only , but it lacks an efficient solution method which is suggested in this paper .",
    "0.42     0.42     0.42     0.42     we assume that a set of communication messages is given to be scheduled on a single communication bus segment . for each message @xmath8",
    ", the criticality @xmath9 is specified .",
    "it denotes the number of allowed transmissions .",
    "each message ( task ) is specified by its _",
    "criticality levels_. for each _ criticality level _",
    "@xmath10 , we define the associated processing time with this level .",
    "see an example in fig .  [",
    "fig : feasible ] . here",
    ", @xmath3 has criticality @xmath11 ; therefore it can be retransmitted once .",
    "the processing time at the first level is given by its bcet ( _ the best case execution time _ ) while the processing time at the second level is its wcet ( _ the worst case execution time _ ) . during the run time execution , exactly one processing time of the message",
    "is realized ; however , it is not known in advance which it will be .",
    "we can view processing time prolongations as a retransmission of the whole message content . however , this mixed - criticality scheduling model is useful also for scheduling of computational tasks , where the exact computational time is not known in advance , but only a probability distribution is known .",
    "let us consider the processing time of task @xmath8 to be a random variable @xmath12 .",
    "let us assume an arbitrary probability distribution over a discrete set of processing times from @xmath13 for a particular task stating @xmath14 $ ] .",
    "the same information given by the probability distribution is captured by the cdf ( _ cumulative distribution function _ ) @xmath15 giving the probability that processing time @xmath12 is at most @xmath16 .",
    "see figs .",
    "[ fig : pst_pdf ] and [ fig : pst_cdf ] for such an example .",
    "corresponding processing times @xmath17 for each criticality level @xmath18 are taken from @xmath15 as @xmath19 , where @xmath20 is the quantile function .",
    "the criticality of a task is a user - defined parameter .",
    "for example , if we identify criticality levels with a safety standard iec 61508 sil ( _ safety integrity levels _ ) @xcite , then the task criticality @xmath21 is given by the sil of the functionality carried out by the content and @xmath22 is defined as @xmath23__probability of failure _ _ defined by sil @xmath18 .",
    "processing times obtained according to criticality levels then form a single task like the one depicted in fig .",
    "[ fig : fshape ] . since cdfs are non - decreasing functions , a set of processing times @xmath24 yields shapes like the f letter rather than ordinary rectangles , hence the name f - shape .",
    "see an example in fig  [ fig : disretization ] .",
    "there we see discretization for a task with criticality three at corresponding levels @xmath25 , @xmath26 and @xmath27 with the vertical axis on the logarithmic scale .",
    "the solution to the scheduling is a feasible static schedule of the given set of f - shaped tasks .",
    "consider a particular example of the schedule with tasks having up to three levels of criticality that is shown in fig .",
    "[ fig : feasible ] .",
    "a feasible schedule with f - shaped tasks describes alternative schedules for any realization of the processing time of messages .",
    "observed prolongations of more critical messages are compensated by skipping execution of less critical messages .",
    "the black line denotes a scenario , where @xmath3 was disrupted once .",
    "the actual processing time of @xmath3 was @xmath28 instead of @xmath29 due to a disturbance .",
    "when the disruption occurred , execution switched to the next higher criticality level .",
    "there , by the assumption , the execution was successful with a probability given by the @xmath30 criticality level .",
    "after upon @xmath3 finished , the execution matched - up back with the lowest criticality level . in general , if a task @xmath8 is prolonged to level @xmath18 , then all tasks @xmath31 for which @xmath32 are not executed .",
    "therefore , in this execution scenario , after @xmath3 finished , @xmath5 was up next . moreover , if we unify the f - shape from fig .",
    "[ fig : fshape ] with task @xmath5 in fig .",
    "[ fig : feasible ] , then we can say that @xmath4 will be executed with very high probability of @xmath33 , but in rare cases , it wo nt be executed since @xmath5 is more critical and needs more time to complete .",
    "we assume a set of non - preemptive f - shaped tasks @xmath34 to be processed on a single machine .",
    "we define an f - shaped task and its criticality as follows :    the f - shape @xmath8 is a pair @xmath35 where @xmath36 , @xmath37 is the task criticality and @xmath38 , @xmath39 is the vector of processing times such that @xmath40    the f - shape is an abstraction for non - preemptive tasks with multiple different processing times . see for example @xmath5 in fig .",
    "[ fig : feasible ] .",
    "it is f - shaped task with criticality @xmath41 ; therefore it has 3 different processing times .",
    "having a set @xmath42 of f - shaped tasks , we define the feasible schedule as follows :    by the schedule for a set of f - shaped tasks @xmath43 we refer to an assignment @xmath44 .",
    "we say that schedule @xmath45 for @xmath42 is feasible if and only if @xmath46 @xmath47    feasibility of a schedule with f - shaped tasks requires that tasks do not overlap on any criticality level .",
    "for example in fig .",
    "[ fig : feasible ] , since @xmath4 follows after @xmath5 , it can not start earlier than @xmath48 , since @xmath49 is the highest common criticality level of @xmath5 and @xmath4 .",
    "we deal with the problem of finding a feasible schedule for a set of f - shaped tasks with criticality at most @xmath50 such that the makespan ( i.e. @xmath51 ) is minimized . in the three - field graham - blazewicz notation",
    "it is denoted as @xmath52 , where @xmath53 stands for the mixed - criticality aspect of tasks of maximal criticality @xmath50 and @xmath54 stands for the match - up .",
    "this problem is known to be @xmath55-hard in the strong sense even for @xmath56 ( two criticality levels ) as shown by reduction from 3-partition problem in @xcite .",
    "since the problem @xmath57 is strongly @xmath55-hard , it does not admit fptas unless @xmath58 . however , we show that the problem is polynomial - time approximable within a constant multiplicative factor .    [ prop : approx ] for any given fixed @xmath50 , the problem @xmath52 is contained in @xmath6 complexity class .",
    "suppose the algorithm _ lcf ( least criticality first ) _ that takes an input instance @xmath42 and schedules tasks in a non - decreasing sequence by their criticalities without waiting .",
    "then the makespan of resulting schedule is @xmath59 a sum of processing times on a given criticality level over a set of tasks is a lower bound on the makespan .",
    "therefore we have @xmath60 where @xmath61 denotes the optimal makespan of @xmath42 problem instance .",
    "in fact , this result shows more than that there exists a polynomial - time algorithm producing schedules with a constant bounded quality .",
    "for example , for the problem with @xmath62 criticality levels , actually any left - shifted schedule will be at most twice as worse as the optimal makespan since @xmath63 actually produces the worst ordering of tasks in terms of the makespan .    in the following sections , we present exact algorithms for the problem with @xmath26 and @xmath27 criticality levels .",
    "due to the @xmath64 criterion , it can be shown that the search for an optimal solution can be reduced to finding a permutation of tasks .",
    "therefore , any optimal schedule is given by a permutation of tasks @xmath65 .",
    "hence we denote the makespan of the left - shifted schedule of permutation @xmath65 by @xmath66 . in section  [ sec : two ] we give a characterization of the set of optimal permutations for problem @xmath57 and we introduce a milp model utilizing it . in section  [ sec : three ] , we introduce an operator acting on f - shapes , and we show how the optimal solutions for problems with two and three criticality levels are related .",
    "we showed that optimal solutions to @xmath52 are given by a permutation @xmath65 of tasks . for the problem with two criticality levels ,",
    "the optimal permutations can be characterized more precisely .",
    "let us refer to tasks with criticality @xmath67 as hi - tasks and tasks with criticality @xmath68 as lo - tasks .",
    "the key structure of the optimal permutations are _ covering blocks _ :    for any given feasible schedule @xmath69 , a hi - task @xmath8 and a lo - task @xmath31 we say that @xmath31 is covered by @xmath8 , denoted as @xmath70 , if and only if @xmath71 . the covering block @xmath72 is then the hi - task @xmath8 and the set of all lo - tasks covered by @xmath8 .",
    "see an example in fig .",
    "[ fig : feasible ] .",
    "there @xmath73 is covering @xmath1 and @xmath2 .",
    "all these tasks form a covering block .",
    "although the definition of covering block given above is meant for the problem with two criticality levels , the notion of _ covering _ can be generalized for more criticality levels .",
    "we assign a _ length _ to each covering block .",
    "the length is given as the maximum between the processing time @xmath74 of the hi - task @xmath8 and the sum of processing times of tasks covered by @xmath8 plus the processing time of @xmath8 at the first level @xmath75 .",
    "[ prop : lo - comm ] given the covering block @xmath72 , its length defined as @xmath76 is invariant with respect to the ordering of lo - tasks @xmath31 for which @xmath70 .    clearly , the ordering of lo - tasks @xmath31 for which @xmath70 does not affect the block length since all lo - tasks are running without waiting .",
    "furthermore , we say that task @xmath31 is _ fully covered _ by the block @xmath72 , if @xmath77 and @xmath70 .",
    "if exists a task covered by the block @xmath72 that is not fully covered , then we say that @xmath72 is _",
    "saturated_. the makespan @xmath78 of the schedule is given by a permutation of covering blocks .",
    "however , actually any permutation of covering blocks contributes to the makespan by the same amount ; hence it is not subject to optimization .",
    "[ prop : blocks - comm ] for every instance of the problem @xmath57 there exists an optimal solution that is given by an arbitrary permutation of covering blocks .",
    "a characterization of optimal solutions for @xmath57 directly follows from proposition [ prop : lo - comm ] and [ prop : blocks - comm ] :    [ cor : mc2 ] the optimal solution for @xmath57 is given by an assignment of lo - tasks to hi - tasks .",
    "the following milp model relies on corollary  [ cor : mc2 ] .",
    "the model assigns lo - tasks to the hi - tasks in order to form covering blocks such that the sum of their lengths is the minimal one .",
    "the decision variable @xmath79 indicates whether the lo - task @xmath31 is covered by the hi - task @xmath8 ; therefore if @xmath70 , then @xmath80 .",
    "the makespan is then given by the sum of lengths of covering blocks and the sum of processing times of all lo - tasks that are not covered .",
    "@xmath81    the main advantage of this model over the model proposed by @xcite is that it has much stronger linear relaxation . in section  [ sec : results ] we show that it can solve instances with about the order of magnitude more tasks .",
    "although two criticality levels are often sufficient for safety - critical application and this case is frequently studied in the field of mixed - critical systems @xcite , sometimes the application naturally contains three or more criticality levels .",
    "we capture the direct relation between problems with different maximum criticality levels by introducing a transformation given bellow .",
    "it is based on the observation that omitting some criticality levels provides an instance of the problem with less criticality level while maintaining a lower bound property .",
    "furthermore , we introduce the _ bottom - up _ algorithm that uses this observation .",
    "the algorithm is used then together with covering milp model for three criticality levels ( @xmath82 ) shown in section  [ milp : mc3 ] to form an efficient solution method .",
    "the transformation is defined as @xmath83 restrictions :    given the mixed - criticality instance @xmath42 and a positive integer @xmath84 , let @xmath85 and @xmath86 be sets defined as @xmath87 we refer to @xmath85 ( @xmath86 ) as @xmath88 ( @xmath89 ) restriction of the instance @xmath42 .",
    "the @xmath88 restriction takes an f - shape and cuts off all criticality levels above level @xmath90 .",
    "similarly , given the set of f - shaped tasks , @xmath89 restriction drops all tasks with criticality below @xmath90 , and for the rest , it cuts off criticality levels less than @xmath90 .",
    "restricting an @xmath42 instance yields to a mixed - criticality instance since omitting some of the criticality levels for an f - shape gives us an f - shape .",
    "the application of the restriction can be viewed as a relaxation the problem .",
    "[ prop : lb ] for the problem + @xmath91 expressions @xmath92 , @xmath93 defined as @xmath94 are lower bounds on the makespan , where @xmath95 and @xmath96 denote the set of all permutations of elements @xmath97 , @xmath98 respectively .",
    "the @xmath92 is a lower bound on the makespan of @xmath99 since it relaxes on the overlapping condition at the third criticality level .",
    "similarly , @xmath93 is a lower bound on the makespan since it relaxes on the overlapping condition at the first criticality level .",
    "we introduce a heuristic algorithm for the problem @xmath99 .",
    "let us refer to tasks with @xmath100 ( i.e. criticality 3 ) as to great - tasks .",
    "the _ bottom - up _ algorithm is based on the idea of constructing the schedule in two stages . in the first stage , the relaxed problem is solved up to the optimality , which minimizes a lower bound on the optimal makespan of the original problem .",
    "the second stage takes the relaxed solution and constructs a locally optimal solution for the original problem .",
    "the first stage of the algorithm solves @xmath101 restriction of the given problem instance ; hence it is an instance of @xmath57 problem that can be solved with the model described in section  [ sec : two ] .",
    "it assigns lo - tasks to hi - tasks and great - tasks ; therefore it forms covering blocks . in the second stage , the algorithm defines a new problem instance @xmath102 of the problem @xmath57 .",
    "the instance is constructed as follows .",
    "it contains lo - tasks with processing time equal to the length of covering blocks from the stage one .",
    "lo - tasks that are not part of any covering block are assigned to an arbitrary covering block .",
    "the assignment of lo - tasks to @xmath101 restricted great - tasks from the first stage defines hi - tasks in the new instance @xmath102 .",
    "then , the @xmath102 instance is solved once again as an instance of @xmath57 problem .",
    "see the complete description of the _ bottom - up _ algorithm in alg .",
    "[ alg : botup ] .    in general , the _",
    "bottom - up _ algorithm produces suboptimal solutions even though they are provably bounded by a factor of @xmath27 from the optimal solution , as stated by proposition  [ prop : approx ] . however , there are cases when we can verify if the produced schedule is optimal .",
    "this is achieved by the concept of _ critical paths _ that captures the cause of achieved makespan .",
    "@xmath103 restriction by covering milp  [ milp : mc2 ] @xmath104 @xmath105 @xmath106 @xmath107 @xmath108 @xmath109 solve @xmath102 by covering milp  [ milp : mc2 ]    given the left - shifted schedule @xmath69 of the permutation @xmath65 , the critical path is @xmath110 for some @xmath111 such that @xmath112 where @xmath113 .    essentially , for any given left - shifted schedule , the critical path is a subset of tasks and their criticality levels such that @xmath114 holds that if the processing time @xmath115 is increased by some @xmath116 , then the makespan of the same schedule is also increased by @xmath117 .",
    "[ prop : opt ] if one of following conditions holds , then the schedule produced by the bottom - up algorithm is optimal for problem @xmath99 .    1 .",
    "there exists a critical path going through the first and the second levels only . 2 .",
    "every lo - task is fully covered by the second criticality level .",
    "when none of the optimality conditions is satisfied , e.g. a critical path is coming through every criticality level , we fallback to the milp model  [ milp : mc3 ] for the problem @xmath99 in order to find an optimal solution or for the proof that the current solution is the optimal one .",
    "the solver is supplied with the initial solution and a lower bound obtained by the _ bottom - up _ algorithm .",
    "the covering milp model for three criticality levels uses a similar idea as the model for @xmath57 .",
    "it assigns lo - tasks to covering blocks and covering blocks to the great - tasks .",
    "the model utilizes the idea that optimal solutions are made of blocks ( in this case formed by great - tasks that cover less critical tasks ) whose order is interchangeable within a solution .",
    "it assigns lo - tasks to the hi - tasks and to @xmath101 restriction of great - tasks to form covering blocks .",
    "blocks are assigned to the great - tasks in order to create a solution .",
    "the big @xmath118 constant is as large as the number of lo - tasks contained in the problem instance.@xmath119    when _ bottom - up _ fails to prove optimality , it fallbacks to this model while supplying the @xmath92 lower bound and the initial solution . the reason for executing _ bottom - up _",
    "ahead solving milp model  [ milp : mc3 ] is two - fold .",
    "first , we have observed the solver struggles to prove optimality when the solution is clearly optimal regarding the critical path .",
    "the other observation is that if the problem instance contains the majority of tasks with criticality one and two , then solving its @xmath101 restriction frequently yields optimal solution since the highest criticality levels are not likely to be utilized .",
    "similar holds for the instances with a large number of tasks with higher criticality .",
    "furthermore , solving @xmath120 restrictions of @xmath42 is cheap compared to the solving the whole milp model  [ milp : mc3 ] as it can be seen in tab .",
    "[ tab : mc2 ] .",
    "for the problem @xmath57 we have randomly generated sets of @xmath121 instances with @xmath122 tasks for each @xmath123 .",
    "criticalities of tasks were distributed uniformly .",
    "the processing time of a task at level @xmath25 is sampled from the uniform distribution @xmath124 . for tasks with the criticality of @xmath26 , the prolongation at level @xmath26 is sampled from uniform distribution @xmath125 . for the problem @xmath99",
    "we have randomly generated sets of @xmath121 instances with @xmath122 tasks for each @xmath126 . for each @xmath122 ,",
    "the set contains instances with different splits of tasks criticalities and different distributions for prolongation ( e.g. @xmath125 and @xmath127 for the second level , @xmath125 and @xmath128 for the third level , etc . ) in order to generate instances of various properties .    the column _ avg _ @xmath16 ( _ max _",
    "@xmath16 ) in tab .",
    "[ tab : mc2 ] and [ tab : mc3 ] denotes the average ( maximal ) computational time for instances that were solved within the time limit of @xmath129 .",
    "the column _ unsl _ contains the percentage of instances that were not solved within the time limit and _ avg gap _ denotes average optimality gap proven by the solver for the unsolved instances .",
    "results were obtained with two intel xeon e5 - 2620 v2 @ @xmath130 processors using gurobi optimizer @xmath131 with the algorithms implemented in python 3.4 .    in tab .  [",
    "tab : mc2 ] it can be seen that our model is able to solve about an order of the magnitude larger problem instances .",
    "the _ relative order _ model proposed by @xcite consistently fails to narrow optimality gap for instances with more than 40 tasks . in tab .",
    "[ tab : mc3 ] it is shown that the combination of _ bottom - up _ heuristic and milp  [ milp : mc3 ] is able to solve reliably instances with 60 tasks up to the optimality and almost all instances with 80 tasks . moreover ,",
    "the proven gap is much smaller than for the _ relative order _ model ; therefore it shows that our model has stronger linear relaxation .",
    "in this paper , we have proposed two exact approaches for the problem of non - preemptive mixed - criticality match - up scheduling for solving the problem of message retransmission in time - triggered communication protocols .",
    "the algorithms outperform the approach recently proposed by a large margin .",
    "furthermore , we showed the membership of @xmath52 problem in @xmath6 complexity class for an arbitrary fixed @xmath50 ."
  ],
  "abstract_text": [
    "<S> in this paper , we study an problem of a single machine scheduling minimizing the makespan , where the mixed - critical tasks with uncertain processing time are scheduled . </S>",
    "<S> we show the derivation of tasks from the probability distribution function of the processing time , then we study the structure of problems with two and three criticality levels for which we propose efficient exact algorithms and we present computational experiments for instances with up to @xmath0 tasks . </S>",
    "<S> moreover , we show that the considered problem is approximable within a constant multiplicative factor . </S>"
  ]
}