{
  "article_text": [
    "in network modeling problems  @xcite , one often needs to generate ensembles of graphs obeying a given constraint .",
    "a typical constraint is the case when the only information available is the degrees of the nodes , and not the actual connectivity matrix .",
    "note that the node degrees by themselves , that is the _ degree sequence _ in general does not determine a graph uniquely : there can be a very large number of graphs having the same degree sequence  @xcite .",
    "full graph connectivity is uniquely determined by the degree sequence only for a special class of sequences ( see ref .",
    "@xcite for the case of undirected graphs ) .",
    "often , the interest lies in the study of network observables , _ as determined _ by the given sequence of degrees , and unbiased by anything else .",
    "these can be graph theoretical measures , or properties of processes happening on the network ( e.g. , spreading processes , such as of opinion or disease ) . the problem of creating and sampling graphs with a given degree sequence , i.e. , _ degree - based graph construction _",
    "@xcite , is a well - known and challenging problem that has attracted considerable interest amongst researchers @xcite .",
    "there are two main classes of algorithms that are used today to achieve the construction of graphs with given degree sequences .",
    "one of them is typically referred to as  switching \" or edge - swap based  @xcite , while the other one is usually called `` matching '' or stub - matching based  @xcite .",
    "switching methods repeatedly swap the ends of two randomly chosen edges within a markov chain monte - carlo ( mcmc ) scheme until a new , quasi - independent , sample is produced .",
    "unfortunately , the mixing time of mcmc schemes for arbitrary sequences is not known in the general case .",
    "the other class consists of direct construction methods , which perform pairwise matchings of the half - edges emanating from randomly chosen nodes until all edges are realized .",
    "unfortunately , this method can easily generate multiple edges and self - loops , i.e. , edges starting and ending on the same node , after which the sample must be rejected in order to avoid biases  @xcite . for a comparison of the two classes of methods",
    "see ref .",
    "@xcite .",
    "recently , a novel degree - based construction  @xcite and sampling method  @xcite was introduced for undirected graphs , which has a worst - case scaling of @xmath0 , where @xmath1 is the number of edges ( @xmath2 is the sum of the degrees , which are given ) .",
    "a similar method was obtained independently in ref .",
    "@xcite , but that method is less efficient , with a worst - case scaling of @xmath3 . although the algorithm in ref .",
    "@xcite is a direct construction method using stub - matchings , it is rejection free , the samples are statistically independent and the algorithm also provides a weight for every realization .    in many systems",
    "the interaction between two entities is not mutual but has a direction from one to the other , such as in the cases of human relationships in social networks @xcite , gene interactions in regulatory networks , trophic interactions in food webs @xcite , etc .",
    "such systems require a representation by directed graphs ( digraphs ) .",
    "in fact , undirected graphs can be interpreted as digraphs in which there are two , oppositely directed edges for each connected pair of nodes . here",
    "we present a generalization of the degree - based graph construction problem to directed graphs .",
    "some of the necessary mathematical foundations , laid down in ref .",
    "@xcite , are here used and expanded to introduce a digraph construction and sampling algorithm .",
    "although the approach follows closely the one introduced by us for the undirected case  @xcite , the generalization is not at all straightforward , and there are significant differences that the directed nature of the links induces .",
    "before we present our algorithm , we introduce some notations , based on ref  @xcite .",
    "let us denote by @xmath4 and @xmath5 the in-  and out - degrees of a node @xmath6 .",
    "given the sequence @xmath7 of non - negative integer pairs , we want to construct a _ simple _ directed graph @xmath8 such that node @xmath9 has @xmath10 for its in- and out - degrees , respectively , for all @xmath11 .",
    "a simple directed graph is a graph that has no self - loops , nor multiple directed edges in the same direction between two nodes .",
    "there can be at most two edges between a pair of nodes , oppositely directed .",
    "we call the sequence @xmath12 a bi - degree sequence ( bds for short ) .",
    "when there is a simple digraph with a given bds @xmath12 for its degrees , we say that the bds is _ graphical _ and that the digraph realizes @xmath12 .",
    "equivalently , we will also talk about `` graphicality '' as a property .",
    "we distinguish realizations as _ labeled _ digraphs , and do not deal here with isomorphism questions .",
    "that is , if two realizations are identical up to a permutation of their indices , i.e. , they are isomorphic , we will still consider them distinctly . in order to avoid isolated nodes , in the following",
    "we will assume that @xmath13 , for all @xmath14 .",
    "as examples , figs .",
    "[ fig : bds1]a ) and  [ fig : bds1]b ) show two realizations of the bds @xmath15 , and fig .",
    "[ fig : bds1]c ) shows a realization of @xmath16 .",
    "examples of non - graphical bds are the sequences @xmath17 and @xmath18 .",
    "notice that even if a bds is graphical , not all connection sequences are guaranteed to end up with a simple digraph .",
    "for example , fig .",
    "[ fig : bds1]d ) shows a simple digraph realization of @xmath19 .",
    "however , if we were to place the first four edges as in fig .",
    "[ fig : bds1]e ) , we would break graphicality : from there on , we would not be able to complete the realization of the bds without creating either self - loops or multiple edges .",
    "hence , it is important to find an algorithm that builds digraphs with a given bds .",
    "as we will see , this is a challenging problem in itself .",
    "an algorithm that builds a digraph from a given bds sequentially connects the out - links of a node to the in - links of others .",
    "we can think of these out- and in - links as `` out - stubs '' and `` in - stubs '' emanating from a node , that are paired up with the corresponding stubs of other nodes .",
    "an intuitive representation of this is shown in fig .",
    "[ fig : stubs ] .",
    "as the graph construction algorithm proceeds , the number of stubs of the nodes decreases . at any time during this process we will call the number of remaining in - stubs and out - stubs of a node its _ residual _ in- and out - degrees , and the corresponding bi - degree sequence @xmath20 the _ residual bds_.    finally , another concept we will need to use in what follows is the notion of _ normal order _",
    "@xcite , which is essentially the lexicographic order on the bds .",
    "that is , we say that a bds is in normal order , if for all @xmath21 , we have either @xmath22 or , if @xmath23 , then @xmath24 .",
    "thus , the bds @xmath25 shown in fig .",
    "[ fig : stubs ] , is arranged in normal order .",
    "once a bds is in normal order , we will use the words ` left ' or ` right ' to describe the directions towards lower or higher index values in the sequence .",
    "the remainder of this paper is organized as follows : section  [ mathf ] introduces the fundamental mathematical notions and algorithmic considerations that are at the basis of our digraph construction algorithm .",
    "section  [ thealg ] presents the algorithm and its derivation details .",
    "readers interested only in the algorithm itself may skip subsection  [ derivations ] and proceed to the summary described in the beginning of section  [ thealg ] and in subsection  [ summary ] . section  [ samprob ] deals in detail with the digraph sampling problem , provides the derivation of the sample weights and presents a simple example .",
    "section  [ algcomp ] is dedicated to the complexity of the algorithm , and section  [ discussion ] concludes the paper .",
    "as seen from the examples above , not all sequences of non - negative integer pairs can be realized by simple digraphs .",
    "the sufficient and necessary conditions for the realizability of a bds are given by the `` fr '' theorem  @xcite :    [ fr ] a sequence of non - negative integer pairs @xmath26 with @xmath27 is graphical iff @xmath28    given a bds , we can easily test if it is graphical using this theorem , and thus we will also refer to it as the `` fr test '' . condition  ( [ ladegs ] ) states that both the number of in- and out - degrees for all nodes must be no larger than the number of other nodes it could connect to , or receive connections from .",
    "condition  ( [ stubeq ] ) is a consequence of the requirement that every out - stub must join an in - stub somewhere else ; the sequence @xmath29 given in one of the above examples is not graphical because it fails this condition .",
    "condition  ( [ freq ] ) is less intuitive .",
    "its left hand side is the total number of in - stubs that the group of @xmath30 highest in - degree nodes can receive . _ within this group _ , a node s out - stubs can absorb no more of those in - stubs from the same group than its out - degree or @xmath31 ( it can not absorb from itself ) , whichever is smaller ( giving the first sum on the rhs of ( [ freq ] ) ) . _ outside of this group _ , a node can not absorb more of those in - stubs than its out - degree or @xmath30 , whichever is smaller ( the second sum on the rhs of ( [ freq ] ) ) .",
    "hence , the necessity of  ( [ freq ] ) . for the complete proof see refs .",
    "note that the example sequence @xmath32 above fails condition  [ freq ] for @xmath33 .",
    "the fr test is the directed version of the erds - gallai ( eg ) theorem ( test ) for undirected graphs .",
    "an important note is that bi - degree sequences are _ less constraining _ than undirected ones",
    ". the out - stub of a node is always connected to an in - stub of another , not affecting that node s out - stubs , whereas such distinction does not exist for the undirected case . alternatively ,",
    "if we disregard for a moment the directionality of the links and consider the degree of the node to be the sum of its in- and out - degrees , then the corresponding graph realizing the bds can have two edges running between the same pair of nodes , whereas this is not allowed in the undirected case .",
    "the fr theorem only tests for graphicality , but it does not provide an algorithm for constructing the digraph(s ) realizing the given bds . at first sight this might not seem an issue . however , the sequence @xmath34 in figs .",
    "[ fig : bds1]d and  [ fig : bds1]e ) reminds us that graphicality can easily be broken by a careless connection of stubs .",
    "clearly , for the purposes of digraph construction , it should not matter which edges we create first , as long as we make sure that every connection made does not break graphicality .",
    "in other words , the possibility to create the rest of the edges , so that a simple digraph results in the end , must always be preserved .",
    "thus , the key for the creation of an algorithm that builds simple digraphs realizing a given bds without rejections is in a theorem that allows us to check if we would break graphicality by placing a specific connection . indeed ,",
    "such theorems exist , and they will be discussed below .",
    "however , interestingly , they require that connections be made from the _ same node _ , until all its stubs are used away into edges . that is , assuming that we already made some connections from a given node @xmath6 , preserving graphicality , these theorems give necessary and sufficient conditions for keeping graphicality by the next connection _ still _ involving node @xmath6 .",
    "simply put , they wo nt work in general , if we would attempt a new connection from @xmath35 to @xmath30 , where @xmath36 , while node @xmath6 still has dangling stubs .",
    "the connections already made from @xmath6 to some set of nodes @xmath37 represent a _ constraint _ for the new connections from @xmath6 , as these novel connections must avoid the set @xmath37 .",
    "we call such a constraint associated to a node a _ star constraint _ on that node .",
    "once all the stubs of node @xmath6 are connected into edges while preserving graphicality , we obtain a graphical residual sequence @xmath38 on at most @xmath39 nodes .",
    "clearly , the new connections we make from this point on will not be constrained in any way by the connections we made from node @xmath6 . for the purposes of realizing the sequence @xmath38 we can just simply remove node @xmath6 with its fully completed connections , create a realization by a simple graph of @xmath38 , then , in the end , add back node @xmath6 with its connections to this graph in order to obtain a realization of @xmath12 .",
    "the comments above hold both for the undirected and directed cases .",
    "one might think of using the eg test for the undirected case and the fr test for the directed case on a residual degree sequence to decide if graphicality was broken after attempting a new connection from the same node .",
    "for the _ undirected case _",
    ", we have shown in ref .",
    "@xcite that the passing of the eg test by the residual sequence is only a _",
    "necessary condition _ , if there is already a star constraint on a node .",
    "for example , consider the graphical degree sequence @xmath40 , and assume that we made connections from node @xmath41 to nodes @xmath42 .",
    "the residual sequence after these connections is @xmath43 .",
    "it is easy to check that it passes the eg test .",
    "however , we will break graphicality with _ every _ realization of @xmath44 , because it will form a double edge with one of the existing connections from node @xmath41 to @xmath45 .",
    "thus , additional considerations have to be made to ensure the graphicality of the residual sequence for the undirected case , as described in @xcite . for the directed case here we use the sufficient and necessary conditions for graphicality under star constraints as provided by theorem  [ star ] below , proven in ref .",
    "@xcite .    from now on",
    ", we will always talk about algorithms that first finish all the out - stubs of a node before moving onto another node with non - zero out - degree . in the case of a graphical bds , once all the out - degrees of all the nodes have been connected into directed edges , we are guaranteed to have completed a digraph , because the total number of in - stubs equals the total number of out - stubs , according to property  ( [ stubeq ] ) .",
    "an algorithm that builds graphical realizations of degree sequences of simple _ undirected _ graphs is the havel - hakimi ( hh ) algorithm  @xcite : we choose any node with non - zero residual degree , then we connect all its stubs to nodes with the largest residual degrees avoiding self and multiple connections .",
    "this process is repeated with other nodes until all stubs of all nodes are used .",
    "there is a corresponding version of the hh algorithm for bi - degree sequences as well , introduced first in ref .",
    "@xcite , then rediscovered independently in ref .",
    "@xcite , the latter providing an alternative proof .",
    "the hh algorithm for bds proceeds as follows : given a normal - ordered bds , choose any node with non - zero residual out - degree , then connect all its out - stubs to nodes with the largest residual in - degrees , without creating multiple edges running in the same direction , nor self - loops .",
    "reorder in normal order the residual sequence and repeat this process until all stubs of all nodes are used . while for any given bds , the hh algorithm will construct a set of digraphs",
    ", it can not construct _ all possible _ digraphs realizing the same sequence , as shown in ref .  @xcite .",
    "for example , the hh algorithm can never result in the digraph shown in fig .",
    "[ fig : bds1]c ) realizing the example sequence @xmath46 above .",
    "it is easy to see why : there are two kinds of nodes in this example , with bi - degrees @xmath47 and @xmath48 .",
    "the only nodes with non - zero out - degrees are the @xmath48 types . using the hh algorithm",
    ", we would have to connect both out - stubs of such a node to the nodes with the largest in - degrees , that is to the two @xmath47 types .",
    "however , the digraph in fig .",
    "[ fig : bds1]c ) does not have a @xmath48 node being connected to both @xmath47 nodes , yet it realizes the sequence .",
    "the limitation of the hh algorithm comes from the fact that it prescribes to connect the out - stub of a node @xmath6 to an in - stub of the node with the _ largest _ residual in - degree that does not yet receive a connection from node @xmath6 .",
    "however , there can be other nodes whose in - stubs can form a connection with an out - stub of @xmath6 without breaking graphicality .",
    "this shows the importance of finding a method able to build not just _ a _ realization of a bds , but _ all _ the possible realizations of any given bds .    in the remainder ,",
    "given a residual bds @xmath49 ,",
    "we denote by @xmath50 the _ allowed set _ of @xmath6 , i.e. , the set of all nodes to which an out - stub of @xmath6 can be connected without breaking graphicality .",
    "also , let us denote by @xmath51 the set of nodes to which connections were already made from @xmath6 , thus representing the star constraint at that stage .",
    "the graphicality test under a star constraint on node @xmath6 is provided as theorem  [ star ] below . in order to announce it , however , we need to introduce one more definition .",
    "consider a bds @xmath12 and a given node @xmath6 with out - degree @xmath52 from this bds .",
    "let us also consider a subset of nodes @xmath53 such that @xmath54 , where @xmath55 denotes the number of nodes in @xmath56 , i.e. , its size , and for every node @xmath57 .",
    "next , we take @xmath12 and reduce by unity the in - degrees of all its nodes in @xmath56 , then reduce by @xmath55 the out - degree of node @xmath6 .",
    "the bds @xmath38 thus obtained will be called the bds",
    "_ reduced by @xmath56 about node @xmath6 from bds @xmath12_. equivalently , @xmath38 is the residual sequence obtained from @xmath12 after connecting an out - stub from @xmath6 to an in - stub of every node from @xmath56 .    [ star ]",
    "let @xmath12 be a bds in normal order on @xmath58 nodes , and let @xmath37 , @xmath59 , be a set of nodes whose in - stubs are forbidden to be connected to the out - stubs of node @xmath6 ( including @xmath6 ) .",
    "define @xmath60 as the set of the first ( `` leftmost '' ) @xmath5 nodes in @xmath12 but not from @xmath37 .",
    "then , there exists a simple digraph which realizes @xmath12 and avoids connections from @xmath6 to @xmath37 , if and only if the bds @xmath38 reduced by @xmath60 about node @xmath6 from @xmath12 is graphical .",
    "the proof of this theorem is found in ref .",
    "@xcite . what this theorem does is to turn a star - constrained graphicality problem for bds @xmath12 into an _ unconstrained one _ on the reduced bds @xmath38 .",
    "the graphicality of @xmath38 is then easily tested via the fr theorem .",
    "the set @xmath60 as defined above will be called the _ leftmost _ set for node @xmath6 .",
    "although announced in its full generality , as @xmath37 could be any predefined subset of nodes with @xmath59 , this theorem applies directly to the digraph construction process when @xmath37 represents the set of nodes to which connections were already made in previous steps from the same node @xmath6 , hence forbidding us to make further connections from @xmath6 to these very same nodes . in this case",
    ", the bds @xmath12 represents the residual sequence @xmath49 at that stage of the construction process .    as discussed above , in order for us to be able to construct all the simple digraphs that realize a given bds , we need to find the allowed set @xmath50 for the next out - stub of @xmath6 . clearly , after every connection from the same node @xmath6 , the residual sequence changes , and along with it the allowed set may change as well . in order to find @xmath50 for the next out - stub of node @xmath6 , we could just simply attempt connections sequentially to every node with non - zero in - degree _ not in _",
    "@xmath61 , and test for graphicality after each attempt using th .  [ star ] .",
    "the set of nodes for which graphicality would have been preserved would form @xmath50 .    however , this would be inefficient and , actually , not needed .",
    "in fact , we can exploit a result which states that , if graphicality is broken by a connection , it will be broken by all other connections to the right of the previous one , in the normal order sense .",
    "this is expressed in the following :    [ max ] let @xmath12 be a graphical bds in normal order and let @xmath62 be a forbidden set for node @xmath6 , with @xmath63 .",
    "let @xmath64 be two nodes such that @xmath65 . if the residual bds @xmath66 obtained from @xmath12 after forming an edge directed from @xmath6 to @xmath35 is not graphical , then the bi - degree sequence @xmath67 obtained from @xmath12 by forming a directed edge from @xmath6 to @xmath30 is also not graphical .",
    "this theorem follows from the direct contraposition of lemma 6 in ref .",
    "thus , what we need to do is to find efficiently the _ leftmost node _ @xmath68 in the residual sequence in normal order , a connection to which would break graphicality .",
    "we will refer to this node @xmath68 as the _ leftmost fail - node_. all connections to this node and to nodes to its right are guaranteed to break ( star - constrained ) graphicality , whereas all connections to its left ( with the exception of forbidden nodes and self ) are guaranteed to preserve the graphical character .",
    "note that both theorems  [ star ] and  [ max ] are based on the hh theorem for bi - degree sequences .",
    "in fact theorem  [ star ] is a generalization of the hh theorem to include star constraints .",
    "also note that , while for the fr theorem only the in - degrees must be ordered non - increasingly , for the hh theorem and hence for both theorems [ star ] and [ max ] , the bds must be in normal order , as ordering by in - degrees only is not sufficient .",
    "this is easily seen from the following example of graphical bds ( not in normal order ) @xmath69 . using the hh theorem ,",
    "if we do not worry about normal ordering , but just order by in - degree , we could choose to connect the out - stub of node @xmath70 to an in - stub of node @xmath71 , then the out - stub of node @xmath72 to the remaining in - stub of @xmath71 ( connecting to the largest residual allowed residual in - degree ) , after which we have clearly broken graphicality : both out - stubs of @xmath73 now must be connected to the two in - stubs of @xmath72 .",
    "we are now ready to present our digraph construction algorithm , which produces random samples from the set of all _ possible _ simple digraphs realizing a given bds .",
    "given a graphical bi - degree sequence @xmath49 in _ normal order _",
    "( initially @xmath74 ) :    define as _ work - node _ the lowest - index node @xmath6 with non - zero ( residual ) out - degree .",
    "let @xmath37 be the set of forbidden nodes for the work - node , which includes @xmath6 , nodes with zero in - degrees and nodes to which connections were made from @xmath6 , previously . in the beginning",
    ", @xmath75 includes only the work - node and zero in - degree nodes .",
    "find the set of nodes , @xmath76 that can be connected to the work - node without breaking graphicality .",
    "choose a node @xmath77 uniformly at random and connect an out - stub of @xmath6 to an in - stub of @xmath78 .",
    "after this connection add node @xmath78 to @xmath37 .",
    "if node @xmath6 still has out - stubs , bring the residual sequence in normal order , then repeat the procedure from 3 ) until all out - stubs of the work node are connected away into edges .",
    "if there are other nodes left with out - stubs , reorder the residual degree sequence in normal order , and repeat from 1 ) .",
    "the most involved step of the algorithm is finding the allowed set ( step 3 ) ) , which is described next .",
    "let @xmath6 be the work - node chosen as in 1 ) and let @xmath49 denote the _ normal ordered _ , residual sequence obtained after having connected some of the out - stubs of @xmath6 to in - stubs of other nodes , such that graphicality is still preserved .",
    "these previous connections from node @xmath6 form the set of forbidden nodes @xmath37 for the next out - stub @xmath79 of @xmath6 .",
    "@xmath75 also contains the work - node @xmath6 itself @xmath63 and all other nodes with zero in - degrees .",
    "let @xmath60 be the set of the first ( lowest index ) @xmath80 nodes from @xmath49 , _ not in _ @xmath37 .",
    "as @xmath49 is ( star constrained ) graphical , we can connect @xmath79 to any of the nodes in @xmath60 without breaking graphicality ( due to theorem [ star ] ) , hence @xmath81 .",
    "let @xmath78 be the last element of @xmath60 in the normal ordered bds @xmath49 and let us `` color '' ( label ) red all the non - forbidden nodes , i.e. , all the nodes not in @xmath37 , to the right of node @xmath78 .",
    "please note that these color labels are associated with the nodes , defined by their bi - degrees , and not with their indices of location in the sequence .",
    "this set of red nodes @xmath82 forms the set of candidates for the leftmost fail - node @xmath68 .",
    "all other nodes are colored ( labelled ) black . to find the leftmost fail - node we could simply connect out - stub @xmath79 to an in - stub of a red node @xmath83 ,",
    "add the new connection temporarily to the set of forbidden nodes , bring the new residual sequence into normal order , then test for graphicality using theorem  [ star ] .",
    "this procedure could then be repeated sequentially , with @xmath83 going over all the red nodes from left to right , until graphicality would fail for the first time at @xmath84 .",
    "however , the considerations in the following paragraphs allow us define a better method .    for the sake of argument let us perform the sequential testing as explained above .",
    "it would imply the following steps for a given red node @xmath83 :    reduce the out - degree at the work - node @xmath6 and the in - degree at @xmath83 by unity , that is @xmath85 and @xmath86 , resulting in a new residual bds @xmath87 .",
    "bring @xmath87 into normal order ( required by theorem 2 ) .",
    "note that @xmath83 is the only node whose in - degree has changed and only the work - node had its out - degree changed ( its in - degree was not affected ) .",
    "thus , when bringing @xmath87 into normal order , the relative positioning of all the other nodes does not change .",
    "the work - node might have shifted to the right to a new position @xmath88 within the block of nodes with the _ same _ in - degree ( @xmath89 ) , and the red node s new position @xmath90 might have also moved to the right in the normal ordered sequence ( @xmath91 ) .    add @xmath90 to the forbidden set for the work - node .",
    "now , as required by theorem  [ star ] , reduce by unity the in - degrees of the nodes in the left - most adjacency set @xmath92 , and reduce the out - degree of the work - node @xmath88 to zero .",
    "this results in the new sequence @xmath93 .",
    "order the bds @xmath93 by in - degrees , non - increasingly .",
    "apply the fr theorem to test for graphicality .    thus , whether the connection of the work - node @xmath6 to @xmath83 breaks graphicality , ultimately depends on whether the residual bds @xmath93 fails ( or passes ) the fr test .",
    "however , as we noted before , for the fr test we do not need to have the bds @xmath93 in normal order , we only need to have it ordered non - increasingly by the in - degrees .",
    "additionally , observe that in step ( d ) the reduction of the in - degrees always happens on the _ same _ set of nodes , independently of the red node @xmath83 , that is the left - most adjacency set @xmath92 is the same for all @xmath83 .",
    "thus , in this particular case of theorem 2 s application , ultimately we do not need to bring @xmath87 into normal order ( step ( b ) ) , only non - increasingly by in - degrees , which would be done anyway in step ( e ) .",
    "that means we can just skip step ( b ) , we do not need to move around any of the nodes at that stage .",
    "thus , the only difference between the sequences @xmath93 for different @xmath83-s is at the position of this node after the reordering in ( e ) , _ with respect to the rest of the sequence_.    these observations suggest that we should define a bds @xmath94 obtained from the bds @xmath49 by reducing by unity the in - degrees of all nodes in the set @xmath95 and by @xmath96 the out - degree of the work - node @xmath6 , leaving only one out - stub ( out - stub @xmath79 ) at @xmath6 .",
    "clearly , the bds @xmath94 is graphical ( connecting out - stub @xmath79 to an in - stub of node @xmath78 surely preserves graphicality , by theorem [ star ] ) .",
    "let us now order @xmath94 non - increasingly by its in - degrees , _ in a specific way _",
    ", described as follows .",
    "shift only the reduced in - degree nodes in @xmath49 to the right with respect to the rest of the sequence such as to restore non - increasing ordering by the in - degrees ( if needed ) . since only the in - degrees of the nodes in the set @xmath95",
    "have been reduced , _ keep _ the relative ordering of all other nodes in @xmath94 exactly the same as in @xmath49 .",
    "thus the _ relative ordering _ of the red nodes and of the work node have been preserved as well .",
    "let us denote the new location of the work node in @xmath94 by @xmath35 ( @xmath97 ) .",
    "connecting now @xmath79 to an in - stub of a red node @xmath83 in this sequence will produce the same set of residual bi - degrees as in step ( d ) above . to be able apply the fr theorem ,",
    "then all we need to do is to shift to the right node @xmath83 in the sequence ( if needed ) to make sure that it is non - increasingly ordered by in - degrees . since only the in - degree at @xmath83",
    "was modified ( reduced by unity ) , this reordering is very simple : if @xmath98 denotes the location of the last node of the block of nodes with the same in - degree as node @xmath83 in @xmath94 ( @xmath99 ) , then we simply swap the node at @xmath83 with the node at @xmath98 after the reduction of the in - degree at @xmath83 .",
    "let us denote the obtained sequence by @xmath100 .",
    "clearly , it is non - increasingly ordered by in - degrees , and thus we can apply the fr theorem to see if it is graphical .",
    "note : it could happen that @xmath101 ( e.g. , there are many nodes with zero out - degree but larger in - degree than the work - node as defined in 1 ) ) , however , the steps below can be applied just the same .",
    "next , we show how to identify the leftmost red fail - node @xmath68 by investigating how the inequalities in  ( [ freq ] ) break down .",
    "since @xmath94 is graphical , we have for all @xmath102 ( @xmath103 is the last element of @xmath94 ) that @xmath104 , where @xmath105 and @xmath106 are the left hand side ( lhs ) and the right hand side ( rhs ) of inequalities  ( [ freq ] ) written for @xmath94 : @xmath107 let us denote by @xmath108 and @xmath109 the lhs and rhs of the inequality  ( [ freq ] ) corresponding to @xmath100 . since the rhs of  ( [ freq ] ) involves only out - degrees , and we only reduced the out - degree of the work - node from 1 to 0 , we will always have @xmath110 , _ except _ when @xmath111 and the work - node is at @xmath112 , in which case @xmath113 .",
    "however , in this case , @xmath114 , because only the in - degree of @xmath112 appears , which does not get changed .",
    "thus , since @xmath115 ( @xmath94 is graphical ) , graphicality can not be broken at @xmath111 when @xmath112 .",
    "let us now consider that the work - node is still at position @xmath112 , but @xmath116 .",
    "for @xmath117 , the in - degrees in @xmath100 are the same as those in @xmath94 , hence @xmath118 . for @xmath119 , however , we have @xmath120 . now consider @xmath121 . for @xmath122 , we have @xmath118 and for @xmath123 , @xmath120 .",
    "the following summarizes the relationships above :    @xmath112 :    @xmath111 : @xmath124    @xmath117 : @xmath125    @xmath126 : @xmath127    @xmath128 :    @xmath122 : @xmath125    @xmath126 : @xmath127    since @xmath129 for all @xmath30 , graphicality for @xmath100 can only be broken ( that is to have @xmath130 for some @xmath30 ) , if @xmath131 , namely in cases ( a.2 ) and ( b.1 ) above .",
    "observe that @xmath132 and @xmath133 are computed from @xmath94 , hence they are independent from @xmath83 or @xmath98 .",
    "this gives us the following simple procedure for finding the leftmost fail - node , if it exists .",
    "starting from @xmath134 for @xmath112 , and @xmath111 for @xmath121 , find the smallest @xmath135 for which @xmath136 . if no such @xmath135 exists , then there are no fail - nodes and all non - forbidden nodes are to be included in the allowed set .",
    "if there is such a @xmath135 , the first red node @xmath137 to the right of @xmath135 ( @xmath138 ) is the leftmost fail - node of @xmath100 , which when identified in the original bds @xmath49 will give the leftmost fail - node @xmath68 .",
    "all non - forbidden nodes to the left of @xmath68 are to be included in the allowed set .",
    "what we discussed in detail in the previous subsection corresponds to step ( 3 ) of the main algorithm described in the beginning of section  [ thealg ] .",
    "given the normal - ordered bds @xmath49 at the end of step 2 ) of the main algorithm :    identify @xmath60 from the first @xmath80 nodes not in @xmath37 .",
    "identify the `` red '' set @xmath82 as those nodes that are neither in @xmath60 nor in @xmath37 .",
    "note , the color label is associated with the node , not its index .",
    "build @xmath139 as follows : @xmath140 and @xmath141 where @xmath78 is the last node in @xmath142 .",
    "shift nodes from @xmath143 to the right in the sequence ( and only these ) such as to restore ordering non - increasingly by in - degrees ( if needed ) , preserving the color labels of the nodes in the process .",
    "the work - node may have shifted to a new location @xmath35 after this step .",
    "this is the updated sequence @xmath139 .",
    "starting from @xmath144 if @xmath145 or from @xmath146 if @xmath147 , find @xmath135 as the smallest @xmath30 such that @xmath131 , where @xmath132 and @xmath133 are computed from _ the reordered _ ( after step ( 3.4 ) ) @xmath94 using ( [ insl ] ) and ( [ insr ] ) .",
    "if there is no such @xmath135 , then the allowed set @xmath76 is all the nodes in @xmath49 except nodes from the forbidden set @xmath37 .",
    "otherwise find the leftmost red node @xmath137 in the updated bds @xmath94 to the right of @xmath135 , that is with @xmath148 .",
    "then the corresponding node @xmath68 in @xmath49 , will be the leftmost fail node .",
    "note that @xmath137 is the new position of the node at @xmath68 in @xmath49 after the reordering in ( 3.4 ) .",
    "the allowed set @xmath76 is formed by all nodes in @xmath49 not in @xmath37 , and to the left of @xmath68 .",
    "the algorithm generates an independent sample digraph every time it runs , _ without restarts or rejections , _ and it guarantees that _ every possible _ realization of a graphical bds by simple digraphs can be generated with a non - zero probability .",
    "however , the algorithm realizes the digraphs with non - uniform probability .",
    "nevertheless , knowing the relative probability for every digraph s occurrence allows us to calculate network observable averages as if they were obtained from a uniform sampling .",
    "in particular , the following expression , which is a well - known result in biased sampling  @xcite , provides these averages as : @xmath149 where @xmath150 is an observable measured from the samples @xmath151 generated by an algorithm .",
    "the @xmath152 sample weight is the inverse of the relative probability of the occurrence of @xmath151 and @xmath1 is the number of the samples generated . in subsection",
    "[ sec : bclass ] we give a detailed derivation of this formula , specialized to our graph construction problem .",
    "the weights of the samples generated by our algorithm are given by @xmath153 where @xmath6 runs over all the nodes with non - zero out - degree as they are picked by the algorithm to become work - nodes , and @xmath154 is the size of the allowed sets @xmath155 just before connecting the @xmath35-th out - stub of @xmath6 . note that @xmath156 since there always exists at least one digraph realizing the bds . subsection  [ sec : weights ] gives a derivation of  ( [ weight ] ) .",
    "our algorithm sequentially connects all stubs from a series of work nodes and finishes with a simple , labeled digraph .",
    "this process can be uniquely described by a _ path _ of connection sequences .",
    "having chosen a work node @xmath157 for the first time , it determines the allowed set @xmath158 .",
    "we next choose uniformly at random a node @xmath159 and connect a stub of @xmath157 to a stub at @xmath160 .",
    "we could have chosen @xmath160 following any other criterion , but in that case the expression  ( [ weight ] ) of the weights would have to be modified accordingly .",
    "after this connection we recompute the new allowed set @xmath161 , then connect another stub of @xmath157 , and so on until all the stubs have been used up at @xmath157 .",
    "let us denote by @xmath162 such a path of connection sequences : @xmath163 where @xmath164 denotes the residual out - degree of node @xmath6 .",
    "a path @xmath162 uniquely defines the digraph @xmath165 created , as the collection of all connections in  ( [ path ] ) forms the edge set of the created graph @xmath165 .",
    "however , several paths may lead to the same digraph .",
    "also note that the order of the connections in  ( [ path ] ) matters in the calculation of the weight , as the corresponding allowed sets in general depend on history of connections up to that point . for a finite bi - degree sequence",
    "the number of distinct samples ( paths ) is also finite .",
    "let us denote this set of paths by : @xmath166 let us now assume that we built with our algorithm a sequence of samples @xmath167 , and that the sample number @xmath1 is large enough for us to see all elements of @xmath168 sufficiently many times .",
    "given some path @xmath162 we compute a quantity @xmath169 , and we are interested in calculating the average of @xmath150 over path ensembles . in our case",
    "@xmath150 is defined on the final graph itself @xmath170 , but for now we will not consider that , explicitly .",
    "if we were just simply computing the average of @xmath150 over the set of samples , we would obtain an average _ biased _ by the way the algorithm builds the paths from @xmath168 : @xmath171 where @xmath172 is the number of times we have seen path @xmath173 appear in the sequence of samples .",
    "clearly , @xmath174 is the probability by which path @xmath173 is generated via the algorithm .",
    "we now assume that we can compute analytically the path probabilities @xmath175 , from knowing how the algorithm works .",
    "instead of  ( [ direct ] ) we want to compute the average as if it was measured over the uniform ensemble of paths , that is : @xmath176 if we form : @xmath177 we have @xmath178 , due to  ( [ rhos ] ) .",
    "thus , the weighted average  ( [ biasedw ] ) should be used in order to obtain averages according to uniform sampling in the @xmath179 limit .",
    "let us assume that there is an equivalence relation `` @xmath180 '' between paths , hence inducing a partitioning of @xmath168 into @xmath181 equivalence classes : @xmath182 , where @xmath183 .",
    "the size of class @xmath184 is denoted by @xmath185 .",
    "we have @xmath186 .",
    "alternatively , for some given path @xmath187 , we will denote by @xmath188 the equivalence class of @xmath187 and by @xmath189 its size .",
    "let us also assume that if @xmath190 , that is @xmath191 , then @xmath192 .",
    "for example , in our case distinct paths may lead to the same digraph .",
    "we introduce the equivalence relation `` @xmath180 '' and say that two paths @xmath162 and @xmath193 are equivalent , @xmath191 if they produce the same labeled digraph , @xmath194 .",
    "clearly , if @xmath150 depends only on the constructed graph , i.e. , @xmath195 for all @xmath196 , then @xmath192 whenever @xmath191 .",
    "our goal is to obtain the average of @xmath150 uniformly over the equivalence classes , that is : @xmath197 where we chose to write the first element of @xmath184 in the argument of @xmath150 , but of course , any other element could have been chosen from the same class , as @xmath150 is constant within a class . in general , ( [ biasedw ] ) will not produce @xmath198 , but a sum weighted by class sizes . instead ,",
    "let us consider : @xmath199 it is then easy to see that : @xmath200 in order for ( [ biasedcw ] ) to be useful in practice , one has to be able to compute the size of the equivalence class @xmath201 from seeing @xmath162 and knowing how the algorithm works .",
    "fortunately this is possible in our case , as shown next .      first , let us note that when connecting the out - stubs of a work - node we are not affecting the out - stubs of any other nodes , but only in - stubs .",
    "hence , all nodes with non - zero out - degrees will eventually be picked as work - nodes by the algorithm . since normal ordering",
    "is first by in - degrees , the _ order _ in which nodes will become work - nodes depends on the sequence of connections .",
    "let us now calculate the probability of the path @xmath162 in ( [ path ] ) .",
    "given a residual sequence , the work - node @xmath157 is uniquely determined by the algorithm as described before .",
    "since the next connection is picked uniformly at random , the probability of the link from @xmath157 to @xmath202 is @xmath203 .",
    "let @xmath204 denote the number of nodes in @xmath205 .",
    "then , it is easy to see that the probability of a path @xmath162 is given by : @xmath206^{-1 } \\label{pathprob}\\ ] ] where @xmath207 denote the work - nodes in the order in which they are picked by the algorithm .",
    "this expression can be computed readily in a computer as the algorithm progresses . in order for us to use ( [ biasedcw ] )",
    "it seems that we would need also to obtain the size @xmath201 of the class to which path @xmath162 belongs .",
    "clearly , two different paths @xmath162 and @xmath208 will result in the same graph ( @xmath209 ) if and only if the sequence of connections in one path is a permutation of the connections in the other path .",
    "hence , the class size @xmath201 is nothing but the number of permutations of the connections , which is the same for all paths , that is , all classes have the same size @xmath210 .",
    "since all connections are made from a node first before moving on to another , we have @xmath211 .",
    "however , we actually do nt need to use this number : one can simply multiply by @xmath210 both the numerator and the denominator of  ( [ biasedcw ] ) to obtain  ( [ two]-[weight ] ) .      in this subsection",
    "we illustrate the algorithm on a simple sequence : @xmath212 .",
    "there are 11 distinct labeled digraphs realizing this sequence and there are @xmath213 paths in a class , leading to the same graph .",
    "two paths that lead to different graphs are for example @xmath214 ( connect an out - stub of node 1 to an in - stub of node 4 , etc . ) and @xmath215 . for the former , @xmath216^{-1 } = 8 $ ] and for the latter it is @xmath217^{-1 } = 54 $ ] .",
    "let us now consider the pearson coefficient @xmath218 of degree - degree correlations , or the assortativity coefficient defined for directed graphs  @xcite as our network observable @xmath219 .    .",
    "the measure monitored is newman s assortativity coefficient @xmath218  @xcite . in b )",
    "the ensemble average was taken over 50 runs.,scaledwidth=100.0% ]    for each one of the 11 graphical realizations of @xmath220 can be calculated exactly , as can the uniform average over this ensemble , obtaining @xmath221 .",
    "we will refer to @xmath222 as the  theoretical value \" .",
    "we then let our algorithm run on this sequence to produce @xmath1 samples and using  ( [ two]-[weight ] ) to obtain the corresponding coefficient @xmath223 .",
    "fig  [ fig : simpex]a ) shows a few runs with different seeds and their convergence to the theoretical value . fig  [ fig : simpex]b ) shows the standard deviation @xmath224 ^ 2 } ) ^{1/2}$ ] where the overline denotes an ensemble average over runs .",
    "to determine the theoretical upper bound for the complexity of the algorithm , that is the worst - case complexity , notice that there are only three steps in the algorithm that require more than @xmath225 computational operations , or steps , to complete .",
    "first , after each connection is placed , one must bring the residual sequence into normal order , steps 6 ) or 7 ) . to accomplish this , both the work - node @xmath6 and the target",
    "node @xmath78 will have to move to the right , but the relative positions of all other nodes will remain unchanged . in other words , if we were to remove nodes @xmath6 and @xmath78 , the rest of the bds would already be sorted .",
    "thus , in order to complete these steps , one only has to find the new positions of nodes @xmath6 and @xmath78 and insert them into the already sorted bds .",
    "therefore , the complexity of either one of step 6 ) and step 7 ) is simply @xmath226 , where @xmath58 is the number of the nodes in the sequence being ordered .",
    "second , the allowed set @xmath227 must be built before placing each connection ( step 3 ) .",
    "following the summary of this step , given in subsection  [ summary ] , notice that steps  3.1 to  3.4 can be all finished during a single scan of the residual bds .",
    "this is clearly so for the creation of the leftmost set @xmath60 and for setting the `` red '' color labels ( or flags ) ( steps  ( 3.1 ) and  ( 3.4 ) ) .",
    "concerning the ordering of the bds @xmath228 , it is possible to create it already sorted by simply scanning the bds @xmath229 while keeping track of the in - degree @xmath230 of the nodes currently being copied and the index @xmath231 in @xmath228 of the first node with that in - degree .",
    "then , because @xmath232 is in normal order , the only possibility for a node in @xmath228 to break the order is if its in - degree equals @xmath233 . in this case , it can be simply swapped with the node at @xmath231 , because , as argued in subsection  [ derivations ] , the mechanism to build the allowed set is entirely based on the fr theorem , which does not require the bds to be in normal order , but to be simply ordered non - increasingly by its in - degrees .",
    "thus , steps  ( 3.1 ) to  ( 3.4 ) can be completed in @xmath234 steps .",
    "third , the computation of the sums @xmath105 , @xmath106 and their comparison must be conducted , which is the same step as ( [ freq ] ) in an fr test . to determine the complexity of an fr test note that computing the repeated sums for each one of the inequalities  ( [ freq ] ) is quite inefficient . instead , below we derive recurrence relations that allow us to complete the fr test in a linear , @xmath234 number of steps .",
    "the steps of the main algorithm are done sequentially , and thus can all be completed in a total of @xmath234 steps .",
    "they must , however , be repeated for each edge in the digraph .",
    "thus , the maximum complexity of the algorithm is @xmath235 where @xmath236 is the number of edges . since @xmath237 the maximum complexity of the algorithm is @xmath238 .",
    "it is important to note though , that for a given bds the complexity of the algorithm can be substantially smaller , similar to the case for our undirected graph sampling algorithm  @xcite .",
    "the most complex part of the fulkerson - ryser test is to compute the lhs and the rhs of inequalities  ( [ freq ] ) , which we rewrite here for the sake of readability : @xmath239    our goal is to find recursion relations for @xmath240 and @xmath241 . for the lhs",
    "the relation is simply @xmath242 with @xmath243 .    for the rhs , first note that one can write it as @xmath244 where @xmath245 is the family of integer sequences defined as @xmath246 now , let us introduce @xmath247 , that is , the number of indices @xmath6 for which @xmath248 .",
    "then , from   follows that @xmath249 hence @xmath250 where we used the fact that @xmath251 .",
    "furthermore , let us introduce the following notations : @xmath252 then , after some simple manipulations , from   it follows that @xmath253 finally , notice that @xmath254 . substituting it into",
    ", we obtain : @xmath255     of the logarithm of weights for an ensemble of bi - degree sequences on @xmath256 nodes .",
    "the in - degrees were drawn from a normalized power - law distribution @xmath257 with @xmath258 and the out - degrees were drawn from a poisson distribution @xmath259 , with the same average as the average _ in - degree _ , @xmath260 .",
    "the black circles are the simulation data and the red continuous line is a gaussian fit .",
    ", scaledwidth=70.0% ]    thus , we have turned the problem of finding a recursion relation for @xmath241 into the problem of finding @xmath261 . to solve this , first note that @xmath262 with @xmath263 .",
    "the above equation constitutes a recursion relation for @xmath264 .",
    "such a relation can be rewritten as @xmath265 where @xmath266 observe that @xmath267 and @xmath268 can be easily computed while scanning the bds , and then calculating @xmath240 and @xmath241 for each @xmath30 requires a single operation .",
    "thus , the entire fr test can be completed in @xmath269 steps .",
    "in summary , we have developed a graph construction and sampling algorithm to construct simple directed graphs realizing a given sequence of in- and out - degrees .",
    "such constructions are needed in practical modeling situations , ranging from epidemics and sociology through food - webs to transcriptional regulatory networks , where we are interested in learning about the statistical properties of the network observables as determined _ only by the bi - degree sequence _ and nothing else .",
    "( black circles ) and standard deviation @xmath79 ( red squares ) of the distributions of the logarithm of the weights vs.  number of nodes @xmath58 of samples . in - degrees and out - degrees",
    "are both drawn from a power - law distribution @xmath270 , with @xmath271 .",
    "the solid black line and the dashed red line are data fit results , showing that @xmath78 and @xmath79 follow power - law scaling laws @xmath272 and @xmath273 .",
    "the values of the exponents , given by the slopes of the lines are @xmath274 and @xmath275.,scaledwidth=70.0% ]    unlike existing algorithms such as the configuration model , which is affected by uncontrolled biases and unacceptably long running times except for a very restricted class of sequences , our algorithm is rejection - free .",
    "also , it guarantees the independence of the produced samples , unlike mcmc methods , which have unknown mixing times .",
    "while its mathematical underpinnings are nontrivial , the algorithm itself is straightforward to implement . in principle",
    ", our approach can be extended to include more complex constraints , such as a given sequence of motifs frequencies , but we have only concentrated on degree sequences since they are , arguably , the most fundamental of constraints .",
    "the algorithm can also be used to sample from given in- and out - degree distributions , not just sequences : given such distributions , one first samples a graphical bds from these , then one applies our algorithm to generate digraphs . in this case , however , the sample weights ( [ weight ] ) must be modified to reflect the probability of the occurrence of the given graphical bds when drawn from the distributions .",
    "just as in the case of undirected graphs , we can expect the distributions of the weights for large graphs to be log - normal , as shown in ref .",
    "@xcite . as an example",
    ", figure  [ fig : logweight ] shows the distribution for bi - degree sequences in which the in - degrees follow a power law with exponent @xmath271 and the out - degrees a poisson distribution whose mean matches the average in - degree .",
    "indeed , the distribution of the weight logarithms is well approximated by a gaussian .",
    "similarly the undirected case , we find for all the examples we studied numerically , that the standard deviation @xmath79 of the distributions of weight logarithms grows slower than the mean @xmath78 with the number of nodes @xmath58 ; see figure  [ fig5 ] showing the scaling of @xmath78 and @xmath79 for bi - degree sequences in which both in - degrees and out - degrees follow a power law distribution with exponent @xmath271 .",
    "thus , we may expect that typically , in the @xmath276 limit , the rescaled weight distribution becomes a delta function , making the sampling asymptotically uniform .",
    "bounds on the complexity of the algorithm could easily be obtained by inspecting the algorithm , showing a maximum complexity on the order of @xmath277 where @xmath1 is the total number of edges , @xmath278 .    in developing our results",
    ", we also provided an efficient way of implementing the fulkerson - ryser test , whose scope of application goes beyond our present algorithm , as it can be used in any context to determine whether a bi - degree sequence is graphical .",
    "hk was supported in part by the us national science foundation ( nsf ) through grant dmr-1005417 and keb by the nsf grant dmr-0908286 .",
    "zt and hk were supported in part by the nsf bcs-0826958 , hdtra 201473 - 35045 and by the army research laboratory under cooperative agreement number w911nf-09 - 2 - 0053 . the views and conclusions contained in this document",
    "are those of the authors and should not be interpreted as representing the official policies , either expressed or implied , of the army research laboratory or the u.s .",
    "government is authorized to reproduce and distribute reprints for government purposes notwithstanding any copyright notation here on .",
    "99 newman m e j 2010 _ networks : an introduction _ ( oxford : oxford university press ) easley d and kleinberg j 2010 _ networks , crowds , and markets : reasoning about a highly connected world _",
    "( cambridge : cambridge university press ) barrat a , barthlemy m and vespignani a 2008 _ dynamical processes on complex networks _ ( cambridge : cambridge university press ) newman m e j , barabsi a l and watts d j 2006 _ the structure and dynamics of networks ( princeton studies in complexity _ ( princeton , nj : princeton university press ) boccaletti s , latora v , moreno y , chavez m and hwang d - u 2006 _ phys . rep . _ * 424 * 175 ben - naim e , frauenfelder f and toroczkai z 2004 _ complex networks ( lecture notes in physics ) _ ( berlin : springer verlag ) dorogovtsev s n and mendes j f f 2002 _ evolution of networks : from biological nets to the internet and www _ ( oxford : oxford university press ) bender e a and canfield e r 1978 _ j. comb .",
    "a _ * 24 * 296 koren m 1976 _ j. comb .",
    "b _ * 21 * 235 kim h , toroczkai z , erds p l , mikls i and szkely l a 2009 _ j. phys . a : math . theor .",
    "_ * 42 * 392001 del  genio c i , kim h , toroczkai z and bassler k e 2010 _ plos one _ * 5 * ( 4 ) e10012 bollobs b 1980 _ eur . j. comb . _",
    "* 1 * 311 taylor r 1982 _ siam j. alg .",
    ". meth . _ * 3 * 114 molloy m and reed b 1995 _ rand .",
    "alg . _ * 6 * 161 rao a r , jana r and bandyopadhya s 1996 _ indian j. of statistics _ * 58 * 225 kannan r , tetali p and vempala s 1999 _ random struct",
    "_ * 14 * 293 newman m e j , strogatz s h and watts d j 2001 _ phys .",
    "e _ * 64 * 026118 chung f and lu l 2002 _ ann .",
    "combinatorics _ * 6 * 125 maslov s and sneppen k 2002 _ science _ * 296 * 910 milo r , shen - orr s , itzkovitz s , kashtan n and chklovskii d 2002 _ science _ * 298 * 824 morelli l g 2003 _ phys rev e _ * 67 * 066107 itzkovitz s , milo r , kashtan n , ziv g and alon u 2003 _ phys",
    "e _ * 68 * 026127 milo r , kashtan n , itzkovitz s , newman m e j and alon u 2003 ` arxiv : cond - mat/0312028v2 ` park j and newman m e j 2003 _ phys .",
    "e _ * 68 * 026112 viger f and latapy m 2005 _ lect . notes comp .",
    "sci . _ * 3595 * 4409 britton t , deijfen m and martin - lf a 2006 _ j. stat . phys . _ * 124 * 137797 cooper c , dyer m and greenhill c 2007 _ comb .",
    "_ * 16 * 55793 bianconi g , coolen a c c and perez  vicente c j 2008 _ phys .",
    "e _ * 78 * 016114 bianconi g 2009 _ phys rev e _ * 79 *",
    "036114 erds p l , mikls i and toroczkai z 2010 _ elec . j. comb . _",
    "* 17 * r66 bogu m , pastor - satorras r and vespignani a 2004 _ eur .",
    "j. b _ * 38 * 205 catanzaro m , bogu m and pastor - satorras r 2005 _ phys .",
    "e _ * 71 * 027103 ngeles serrano",
    "m and bogu m 2005 _ proc .",
    "cnet2004 am .",
    "_ blitzstein j and diaconis p 2011 _ internet mathematics _ * 6 * ( 4 ) 489 hartmann a k 1999 _ practical guide to computer simulations _ ( world scientific ) wasserman s and faust k 1994 _ social network analysis : methods and applications _ ( cambridge : cambridge university press ) chartrand g and lesniak l 1986 _ graphs & digraphs _ ( 2nd edition , wadsworth , inc . )",
    "fulkerson d r 1960 _ pacific j. math .",
    "_ * 10 * ( 3 ) 831 h. ryser .",
    "_ combinatorial mathematics .",
    "_ carus mathematical monographs , maa , 1963 .",
    "havel v 1955 _ asopis pst .",
    "mat . _ * 80 * 477 ( in czech ) hakimi s l 1962 _ j. siam appl .",
    "math . _ * 10 * 496 kleitman d j and wang d l 1973 _ discrete math . _",
    "* 6 * 79 cochran w g 1977 _ sampling techniques @xmath279 edition _ ( wiley )",
    "newman m e j and barkema g t 1999 _ monte - carlo methods in statistical physics _",
    "( oxford : oxford university press ) newman m e j 2003 _ phys .",
    "e _ * 67 * 026126"
  ],
  "abstract_text": [
    "<S> the interactions between the components of complex networks are often directed . </S>",
    "<S> proper modeling of such systems frequently requires the construction of ensembles of digraphs with a given sequence of in- and out - degrees . as the number of simple labeled graphs with a given degree sequence </S>",
    "<S> is typically very large even for short sequences , sampling methods are needed for statistical studies . currently , there are two main classes of methods that generate samples . </S>",
    "<S> one of the existing methods first generates a restricted class of graphs , then uses a markov chain monte - carlo algorithm based on edge swaps to generate other realizations . as the mixing time of this process </S>",
    "<S> is still unknown , the independence of the samples is not well controlled . </S>",
    "<S> the other class of methods is based on the configuration model that may lead to unacceptably many sample rejections due to self - loops and multiple edges . </S>",
    "<S> here we present an algorithm that can directly construct all possible realizations of a given bi - degree sequence by simple digraphs . </S>",
    "<S> our method is rejection free , guarantees the independence of the constructed samples , and provides their weight . </S>",
    "<S> the weights can then be used to compute statistical averages of network observables as if they were obtained from uniformly distributed sampling , or from any other chosen distribution . </S>"
  ]
}