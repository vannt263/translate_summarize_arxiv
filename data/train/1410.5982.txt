{
  "article_text": [
    "in this paper , we discuss an algorithm for the rapid numerical solution of smooth , nonlinear , non - autonomous , time - periodic , dissipative differential equations , with reference to a particular example , known as the spin - orbit equation .",
    "the spin - orbit ordinary differential equation ( ode ) describes the coupling , in the presence of tidal friction , between the orbital and rotational motion of an ellipsoidal satellite orbiting a primary , and many authors have studied it since the original work of  @xcite and  @xcite ; see also  @xcite ,  @xcite and  @xcite . in cases of interest , both the nonlinear and the dissipative terms",
    "are multiplied by small parameters , and as the dissipation parameter decreases , the ode possesses an ever - increasing number of co - existing periodic orbits , with the initial conditions selecting which one is observed .",
    "in this sense , the problem is not simple , despite the fact that the nonlinearity is small : small dissipation coupled with small nonlinearity leads here to non - trivial dynamics .",
    "one interesting application of the spin - orbit equation is as a model of the orbit of mercury , whose primary is considered to be the sun ; other applications come to mind with the discovery of extra - solar planetary systems .",
    "the orbit of mercury appears to be unique in the solar system , since it rotates three times on its own axis for every two orbits of the sun : all other regular satellites for which we have data are in a one - to - one resonance with their primaries .",
    "see for instance  @xcite for a recent survey offering a new perspective on the problem .    in order to estimate numerically the probability of capture of a satellite in a given orbit ,",
    "one possibility is to use a monte carlo approach , in which the spin - orbit ode is integrated forward in time , starting from many uniformly - distributed random initial conditions .",
    "the time - asymptotic behaviour , that is , the solution after any transient has decayed , is determined for each of these initial conditions , and the probability of capture by each of the possible attractors is thereby estimated .",
    "the challenges of this approach are ( a ) that realistic values of the dissipation parameter @xmath0 are small , so transient times , which are @xmath1  see  @xcite for an argument in a similar case  are long ; and ( b ) , in order to obtain low - error estimates of capture probabilities , a large number @xmath2 of initial conditions must be considered : in fact , the width of the 95% confidence interval for the probabilities is proportional to @xmath3  see equation  ( [ conf ] ) . in interesting cases , that is when @xmath0 is small , ( a ) and ( b ) force one to carry out a large number of simulations of orbit dynamics , each one over a long time interval , which , using traditional numerical ode solvers , requires prohibitively long computation times . for a problem such as this ,",
    "we therefore conclude that a fast ode solving algorithm is a necessity and not a luxury .",
    "many problems in mathematical physics boil down to solving an ode for which no closed - form solution exists . for simulations in such cases , there is no alternative but to approximate solutions numerically .",
    "also , the solutions to nonlinear problems can display sensitive dependence to initial conditions .",
    "this raises questions as to how good a representation of what we casually refer to as ` the solution ' to an initial value problem , is actually obtainable numerically .",
    "contrast a finite precision numerical solution to the notional ` true solution '  one which is computed to infinitely high precision , but the computation of which can be done in a finite time . clearly the latter is unattainable with real computing hardware , with its finite memory and speed .",
    "hence , in practice , the best we can do is to use finite - precision , usually double precision ( typically 1617 significant figures ) algorithms , to model , approximately , the true solution .",
    "although software for arbitrary - precision arithmetic is available , we want to show here what can be achieved using only double precision ( with one exception ) .",
    "the question then becomes : how might we construct a practical algorithm to approximate the true solution , using standard double precision arithmetic , while also bearing in mind the need to obtain solutions quickly ?",
    "we describe in this paper an algorithm that speeds up the solution process by a factor of at least 7 compared to ` traditional ' numerical ode solvers , such as standard algorithms like runge - kutta  @xcite and symplectic numerical methods , for instance the yoshida algorithm  ( * ? ? ?",
    "* ; * ? ? ?",
    "* appendix f ) .",
    "the latter has been used to solve the spin - orbit problem in the past , for example in  @xcite .",
    "these algorithms and many more like them are general - purpose methods that work for a wide variety of problems .",
    "by contrast , our algorithm is specific to a particular problem , but , since it is set up by computer algebra , only small changes need to be made to the set - up code in order to modify it for a different problem ; with this proviso , our algorithm is also general - purpose .",
    "our algorithm works well for problems like the spin - orbit ode , for which we carry out a careful comparison of our numerical results with those obtained analytically , via perturbation theory , as well as published results on attractor probabilities , in order to validate our work . setting up the algorithm relies on computer algebra , and running the algorithm at speed requires a low - level computer language ; the interplay between these two forms of computation is a theme in the paper .",
    "the rest of the paper is organised as follows .",
    "the spin - orbit ode is given and a fast solution algorithm is described in sect .",
    "[ alg_sec ] .",
    "details on setting up the algorithm and some practical data are given in sect .",
    "[ setup_sec ] , and verification is reported in sect .",
    "[ ver_sec ] . in sect .",
    "[ perf_sec ] , we give details of the speed and the robustness of the algorithm , and in sect .",
    "[ conc_sec ] we draw some conclusions .",
    "the perturbation theory calculations which underpin the verifications are carried out in the appendix , which also contains some further supplementary material .",
    "we consider the spin - orbit ode : @xmath4 where @xmath5 and @xmath6 , so that the phase space is @xmath7 . here",
    "@xmath8 is a small parameter , related to the asymmetry of the equatorial moments of inertia of the satellite , and @xmath9 is the eccentricity of the orbit  @xcite . from here",
    "onwards we set @xmath10 .",
    "we follow  @xcite in setting @xmath11 ; we also write @xmath12 , where @xmath13 furthermore , @xmath14 and @xmath15 the expressions for @xmath16 and @xmath17 have been obtained by averaging , and those for @xmath18 have been derived by solving the kepler relations up to @xmath19  @xcite , truncation at this order leading to the neglect of all harmonics outside the set @xmath20 .    the dissipation model in equation  ( [ ode ] ) is known as macdonald s tidal torque  @xcite .",
    "it has been widely studied since the pioneering work of goldreich and peale  @xcite , even though its validity has recently been questioned ; see for instance  @xcite and references therein , and also the comments at the end of sect .",
    "[ conc_sec ] .",
    "it should be noted that the probability of capture will be affected by the choice of dissipation model .",
    "the algorithm to solve  ( [ ode ] ) that we propose in this paper is essentially the usual euler method , extended so that the series solution is computed to @xmath21 , where @xmath22 is the timestep and @xmath23 .",
    "that is , we advance a solution by one timestep via the truncated taylor expansion @xmath24 where @xmath25 , @xmath26 and the functions @xmath27 can be computed explicitly from the differential equation , which allows one to compute , recursively , the derivatives of @xmath28 and @xmath29 of all orders at @xmath30 , in terms of the initial conditions , @xmath31 , @xmath32 .",
    "the standard euler method can be recovered by setting @xmath33 .    with a judicious choice of @xmath34 and @xmath35 ,",
    "we demonstrate that for our problem , one can use  ( [ eul ] ) to compute solutions to the ode in relatively large , equal timesteps .",
    "furthermore , the size of the timestep used is fixed throughout , so the algorithm is not even adaptive .",
    "such an approach might be thought to be of limited practical use , but it is one purpose of this paper to show that , for some problems , this is not the case . in particular , the computational cost of solving an ode using the proposed method turns out to be lower than all other algorithms against which it was compared .",
    "we draw a parallel here between this work and that of , for instance ,  @xcite , in which a series approach is also used to solve odes .",
    "there are however important differences between the approach of chang and corliss and ours : first , the series used by them are computed , numerically , at each timestep ; and second , they use appropriate variations on the standard ratio test for convergence , to estimate the size of each timestep  so their method is adaptive .",
    "by contrast , in this work , the timesteps are fixed and all series required are pre - computed and stored : this approach can significantly speed up the algorithm by reducing the computational overheads .",
    "both methods are , however , essentially numerical analytical continuation .    in setting up our algorithm , we use computer algebra ( ca ) to generate code in a low - level language ( ll ) , once only for each set of parameters , which computes the functions appearing on the right - hand side of equation  ( [ eul ] ) .",
    "this ll code is in turn compiled and executed in order to produce results .",
    "it might be thought that the ll step can be omitted , and the ca program can be used to carry out the whole task .",
    "it can ; this approach would lead to a significant decrease in speed however , since ca software is generally designed for algebraic manipulation and is not optimised for numerical computation . as an example , consider the sum @xmath36 whose evaluation requires @xmath37 addition and @xmath38 multiplication / division operations , and which we use later for timing purposes .",
    ": it happens to be the case that the evaluation of @xmath39 takes 1 second of cpu time on the computer used to do most of the computations in this paper . of course , simply by timing the evaluation of @xmath39 on another computer , one can scale times given in this paper to correspond to times for that computer . ]",
    "the obvious experiment shows that numerical evaluation of @xmath40 , for @xmath41 , say , @xmath42 , using 17 significant figures , takes about 260 times longer using ca compared with ll .",
    "this increase in speed comes at a cost however : standard ll codes using in - built mathematical operations , although relatively fast , will always carry out arithmetic to fixed precision  double precision is standard , which equates to about 1617 s.f . on the other hand , ca can in principle be used to evaluate numerical expressions to any specified precision , the upper limit being set only by memory and time constraints .",
    "this implied trade - off between accuracy and speed guides us in setting up the algorithm in practice .",
    "the compromise we have to make is encapsulated infind the smallest integer @xmath34 and the largest fixed timestep @xmath22 , such that the pair of power series of degree @xmath34 , which advance the solution @xmath43 of  ( [ ode ] ) from @xmath44 to @xmath45 , using  ( [ eul ] ) , for all @xmath46 , both do so to within a given tolerance .",
increasing @xmath22 increases speed , since larger timesteps are used , and increasing @xmath34 and/or decreasing @xmath22 both increase accuracy in principle , but the exact relationship between these parameters is not straightforward , since rounding errors come into play .",
    "it is clear , though , that since the differential equation  ( [ ode ] ) is @xmath47-periodic in @xmath48 , we need to find the smallest integer @xmath49 , where @xmath50 , such that a suitable error criterion is met for the finite set @xmath51 , for all initial conditions @xmath52 in some subset @xmath53 of @xmath54 , in order for it to be met for all @xmath46 .    in order to quantify numerical error",
    ", we compare estimates of the state vector @xmath55 at a time @xmath56 , computed from the state vector at @xmath57 , where @xmath58 , with the computation being carried out in two ways : using a high - precision numerical ode solver ( which we denote with the subscript ` num ' ) , and our high - order euler method ( which we label ` hem ' ) .",
    "hence , the requirements of the computer algebra software are :    1 .   efficient series manipulation ; 2 .",
    "ability to translate arbitrary algebraic expressions into a low - level language ; 3 .",
    "ability to carry out floating point arithmetic to any given precision ; [ ap ] 4 .",
    "a selection of algorithms for purely numerical solution of differential equations .",
    "[ bs ]    items  ( [ ap ] ) and  ( [ bs ] ) above are necessary for making error estimates .",
    "the numerical algorithm chosen was a gear single - step extrapolation method using bulirsch - stoer rational extrapolation  @xcite , which is good for computing high - accuracy solutions to smooth problems .",
    "we make the assumption that results produced by this algorithm , for @xmath59 $ ] , @xmath60 $ ] and initial conditions in @xmath53 , are both accurate ( that is , close to the true solution ) and precise ( that is , correct to a large number of significant figures ) .",
    "in fact , using 30 significant figures for computation , and relative and absolute error parameters of @xmath61 , we believe that numerical solutions accurate to about 20 s.f .  can be obtained , and it is against these that our algorithm is compared .",
    "the computer algebra software maple has all the necessary attributes and was used for this work ; the low - level language used was c.    the approach we adopt is partly experimental , in that we show that the power series we obtain meet the error criterion described in sect .",
    "[ setup_sec ] , by comparing high - accuracy numerical solutions from ca with those produced by our algorithm , implemented in ll , and then using the results to choose optimal values of @xmath34 , the series truncation order , and @xmath49 , the number of timesteps per period of @xmath47 .    in more detail",
    ", the computation of @xmath62 in  ( [ eul ] ) is carried out as follows .",
    "the method of frobenius assumes that the solution to an ode , expanded about the point @xmath63 , can be written as an infinite series , so that @xmath64 .",
    "substituting this into  ( [ ode ] ) gives a recursion formula for @xmath65 in terms of @xmath66 .",
    "hence , given @xmath67 and @xmath68 , which correspond to the two initial conditions @xmath69 and @xmath70 , we can find @xmath71 for @xmath72 , where @xmath34 can in principle be as large as desired .",
    "since the ode  ( [ ode ] ) is nonlinear , so is the recursion formula , and the closed - form expressions for @xmath73 , as polynomials in the six arguments , quickly become large as @xmath74 increases .",
    "hence , practical considerations , principally memory and computer time constraints , ( a ) force us to minimise the number of unevaluated parameters  we use the minimum , just two , @xmath75 and @xmath76 , substituting numerical values for the others  and ( b ) bound the value of @xmath34 . for the specific case of the spin - orbit problem , it has been found to be feasible to use @xmath34 up to at least 20 .",
    "this part of the computation is carried out by ca .",
    "our ultimate goal is to estimate the relative areas of the basins of attraction of each of the attractive periodic solutions to equation  ( [ ode ] ) , for given values of the parameters @xmath77 and @xmath0 .",
    "a monte carlo approach is one possible way to do this . for the case at hand",
    ", this approach requires us first to compute @xmath78 , @xmath79 for a sufficiently large @xmath80 that any transient behaviour has effectively decayed away , and for a large number @xmath2 of uniformly - distributed random initial conditions @xmath81 in a given set @xmath53 . from now on ,",
    "we drop the subscript 0 on the initial conditions where this does not lead to confusion .",
    "clearly we need an efficient means for computing the poincar map @xmath82 generated by  ( [ ode ] ) , which is defined by @xmath83 . in practice , @xmath84 can not be computed from the series solution in @xmath85 step : this would require @xmath86 in the series for @xmath28 and @xmath29 , and this is certainly too large .",
    "moveable singularities of the solution in complex - time would prevent the series from converging for such a timestep .",
    "hence , we split @xmath84 into @xmath49 ` sub - maps ' so that @xmath87 , where @xmath88 , with @xmath89 advancing @xmath90 from @xmath91 to @xmath44 and @xmath92 advancing @xmath93 over the same interval . in terms of the function @xmath94 in equation  ( [ eul ] )",
    ", we set @xmath95 and @xmath96 , from which @xmath97 .    with @xmath98 , we have @xmath99 where @xmath51 . also , @xmath100 is the solution and its derivative at @xmath101 ; and @xmath102 are polynomials in @xmath103 if @xmath104 , with an additional linear term in @xmath90 if @xmath105 .",
    "we designate this algorithm the high - order euler method ( hem ) .    in practice ,",
    "the expressions for @xmath106 and @xmath107 , @xmath51 , are computed for particular numerical values of @xmath9 , @xmath108 and @xmath22 .",
    "the fact that the spin - orbit equation  ( [ ode ] ) is also @xmath109-periodic in @xmath90 implies that the functions @xmath110 and @xmath111 , for fixed @xmath49 and @xmath34 and with numerical values for @xmath9 , @xmath112 and @xmath22 , can be written in one of two forms .",
    "the first of these is the fourier form @xmath113,\\nonumber\\\\ y_i(\\v{x } ) & = & c_{i , 0}(y ) + \\sum_{j = 1}^f { \\varepsilon}^j\\left[c_{i , j}(y)\\cos 2jx + d_{i , j}(y)\\sin 2jx\\right ] , \\label{fourform}\\end{aligned}\\ ] ] where @xmath114 is a positive integer and @xmath115 are polynomials in @xmath93 , @xmath35 and the parameters of the problem .",
    "both @xmath114 and the degree of the polynomials depend on our accuracy requirements and on @xmath34 ; typically , we find @xmath116 for @xmath117 . the fact that @xmath118 always have a common factor of @xmath119 is explained in appendix d. the second ( polynomial ) form is equivalent to the fourier form and is @xmath120 where @xmath121 are constants , and from here onwards , we set @xmath122 , @xmath123 . in practice , we use ca to compute @xmath89 and @xmath124 in the polynomial form , to convert these into horner form  @xcite for efficient evaluation , and then to translate the result into ll",
    ". there turns out to be very little difference in the computational effort required to evaluate these expressions in the fourier and polynomial forms , and in this work we choose the latter .",
    "we now study a pair of cases in more detail . throughout this section ,",
    "we let @xmath125\\times [ 0 , { y_{\\mathrm{max}}}]$ ] be the set of initial conditions , with @xmath126 .",
    "the first component of the initial condition need only be in the range @xmath127  @xmath109 because the spin - orbit equation is @xmath109-periodic in @xmath90 .",
    "we also follow  @xcite in fixing @xmath128 , the value appropriate to mercury , so that @xmath129 ; @xmath130 ; and @xmath131 and @xmath132 , giving @xmath133 and @xmath134 respectively . all numerical computations in ca",
    "are carried out to 30 s.f .",
    "we refer to these parameter values , with @xmath135 excluded , as the default parameters .",
    "the default value of @xmath9 and the other parameter values are chosen because we can then compare our results using hem directly with results published in  @xcite , which were obtained using a yoshida symplectic integrator  @xcite ,  ( * ? ? ?",
    "* appendix f ) .        ' '' ''    @xmath34 & @xmath49 & total no .  of & total @xmath136 ops . &",
    "( max @xmath137 , max @xmath138 ) , @xmath139 & ( max @xmath137 , max @xmath138 ) , @xmath139 + & & terms in @xmath140 & ( horner form ) & @xmath131 & @xmath141 + 18 & 18 & 6698 & 4597/4650 & 2582.6 , 464.1 & 2586.9 , 464.2 + & 19 & 6914 & 4821/4866 & 734.2 , 55.6 & 734.2 , 55.7 + & 20 & 7109 & 4994/5112 & 267.0 , 21.1 & 267.0 , 21.1 + & 22 & 7433 & 5314/5400 & 46.0 , 3.7 & 46.0 , 3.6 + & 25 & 7994 & 5872/5949 & 5.9 , 0.54 & 5.4 , 0.56 + & * 28 * & * 8396 * & * 6359/6455 * & * 4.1 , 0.45 * & * 4.4 , 0.52 * + & 31 & 8780 & 6780/6807 & 3.8 , 0.54 & 4.2 , 0.45 + 19 & 22 & 7992 & 5685/5779 & 11.7 , 0.98 & 10.0 , 0.86 + & 25 & 8526 & 6270/6350 & 3.8 , 0.47 & 4.1 , 0.46 + & 28 & 8906 & 6750/6870 & 3.5 , 0.51 & 4.4 , 0.60 + 20 & 19 & 7967 & 5492/5608 & 44.6 , 2.5 & 43.0 , 2.8 + & 20 & 8153 & 5715/5824 & 16.3 , 1.0 & 14.0 , 1.1 + & 21 & 8346 & 5888/6067 & 6.9 , 0.56 & 6.6 , 0.63 + & 22 & 8512 & 6042/6170 & 4.6 , 0.45 & 3.8 , 0.50 + & 25 & 9042 & 6666/6741 & 4.3 , 0.47 & 5.0 , 0.50 +    we first use ca to set up the functions @xmath142 and then translate them into ll . _ a priori _ , we have no idea what values of @xmath49 and @xmath34 to choose , and a compromise between high accuracy , which tends to increase @xmath49 and @xmath34 , and speed of the hem , which increases with decreasing @xmath49 , must be found .",
    "additionally , finite computer memory puts a bound on @xmath34 , since the expressions for @xmath102 in equation  ( [ xydef ] ) grow rapidly in size with @xmath143 .",
    "furthermore , the fact that these expressions will eventually be evaluated using finite - precision arithmetic means that increasing @xmath34 and @xmath49 too much can result in a _",
    "less _ accurate approximation to the poincar map , owing to the fact that more operations are required to evaluate the expressions , potentially leading to increased rounding errors .",
    "we define our measure of error as follows .",
    "letting @xmath144 , we define the error vector @xmath145 by @xmath146    in practice , we estimate the maximum values of @xmath147 and @xmath148 , with @xmath95 , as @xmath149 ranges over a grid of uniformly - spaced points in @xmath53 .",
    "the points used are @xmath150 with @xmath151 and @xmath152 , and @xmath153 .",
    "we now establish good values of @xmath49 and @xmath34 .",
    "table  [ table1 ] gives data to guide the choice of values that represents a compromise between accuracy and speed .",
    "the total number of terms and operation count data , which are almost the same for both @xmath131 and @xmath132 , are given to enable us to judge the relative speed , and the @xmath154 values indicate the accuracy .",
    "the main point to note is that for fixed @xmath34 , the maximum error varies little with @xmath49 for @xmath155 , but for @xmath156 , the error increases rapidly : there is a ` knee ' in the error curve at @xmath157 . from several possible candidates ,",
    "we choose @xmath158 and @xmath159 , which represents a good speed / accuracy compromise both for @xmath131 and @xmath132 .",
    ".data on the computer algebra set - up of the low - level language code to compute the poincar map .",
    "[ cols= \" < , < , < \" , ]     therefore , for the system sun - mercury with @xmath160 , if @xmath161 the existing resonances are : 1:2 , 1:1 , 5:4 , 3:2 , 2:1 , 5:2 and 3:1 ; if @xmath162 the existing resonances are the same plus the further resonances 7:2 , 3:4 and 7:4 .",
    "we also look for a quasi - periodic solution of the form @xmath163 where @xmath164 close to @xmath165 is to be determined .    the idea is to fix @xmath164 and look for a solution of the form ( [ eq:3.1 ] ) to ( [ ode ] ) with @xmath166 for a suitable @xmath167 .",
    "however , in ( [ ode ] ) @xmath165 is a fixed parameter .",
    "so , one should find the function @xmath168 and then try to solve the implicit function problem @xmath169 .",
    "unfortunately , the function @xmath170 is not smooth : a careful analysis shows that the function is defined only for @xmath164 satisfying a diophantine condition .",
    "nevertheless we do not address this problem here ; we confine ourselves to a third order analysis , neglecting any convergence problems ; see sect .",
    "[ subsec:3.4 ] for further comments .      as in sect .",
    "[ sec:2 ] we write the differential equation  ( [ ode ] ) , with @xmath171 and @xmath172 , as an integral equation @xmath173 , \\ ] ] we look for a solution of the form ( [ eq:3.1 ] ) and set @xmath174 for @xmath175 .",
    "then to first order we obtain @xmath176 which , after integration , gives @xmath177 where @xmath178 provided that @xmath179 is fixed so as to satisfy @xmath180      to second order ( [ eq:3.2 ] ) becomes @xmath181 by using ( [ eq:2.9 ] ) and ( [ eq:3.4 ] ) we can write in ( [ eq:3.6 ] ) @xmath182 then , writing @xmath183 we find @xmath184 and hence in  ( [ eq:3.6 ] ) @xmath185 furthermore in  ( [ eq:3.6 ] ) @xmath186 where ( [ eq:3.4 ] ) has been used .",
    "the coefficient @xmath187 in ( [ eq:3.6 ] ) has to be fixed so as to cancel out any term linear in @xmath188 produced by the @xmath189-integration , if such a term exists .",
    "since there is no such term , we set @xmath190 . therefore , if we also set @xmath191 we obtain @xmath192 where we have defined @xmath193      to third order we have @xmath194 where once more @xmath195 has to be fixed in such a way that the @xmath189-integration does not produce any term linear in @xmath188 .",
    "if we only want to determine @xmath196 to second order , then we do not need to compute @xmath197  which would be needed to compute @xmath198  and we have only to single out the terms linear in @xmath188 arising from @xmath199 where we have also used the fact that no term linear in @xmath188 is produced by the integration of @xmath200 .",
    "we have in  ( [ eq:3.9 ] ) @xmath201 where both ( [ eq:3.4 ] ) and ( [ eq:3.7 ] ) have been used .    if we use the trigonometric identities @xmath202 we realise immediately that only the second and sixth lines in ( [ eq:3.11 ] ) produce terms linear in @xmath188 after integration .",
    "indeed one has in  ( [ eq:3.11 ] ) @xmath203 so that the term with @xmath204 in the second sum in  ( [ eq:3.11bis ] ) gives @xmath205 and , analogously , in  ( [ eq:3.11 ] ) , one has @xmath206 so that the term with @xmath204 in the first sum in  ( [ eq:3.12bis ] ) gives @xmath207 by collecting together the contributions ( [ eq:3.12 ] ) and ( [ eq:3.13 ] ) with that arising from the term in @xmath195 in ( [ eq:3.9 ] ) , we find @xmath208 by ( [ eq:3.8 ] ) we have @xmath209 so that one has to fix @xmath210 an explicit computation gives , in the case of mercury , @xmath211 and , in the case of the moon , @xmath212 .      by requiring @xmath213 to satisfy a diophantine condition such as @xmath214 where @xmath215 and @xmath216 are integers , and with @xmath217 and @xmath218 , the analysis can be pushed to any perturbation order .",
    "the series for @xmath219 can then be proved to converge to a function @xmath220 depending analytically on @xmath8 .",
    "in fact , this has been proved in @xcite  it could also be proved directly , by using diagrammatic techniques ( see for instance  @xcite for a review ) to show that , to any perturbation order @xmath221 , the functions @xmath222 and the coefficients @xmath223 are bounded above proportionally to a constant to the power @xmath221 . moreover ,",
    "both the solution ( [ eq:3.1 ] ) and the function @xmath219 are not smooth in @xmath164 : in fact they are defined on a cantor set @xmath224 . however , the function admits a whitney extension @xcite to a @xmath225 function , so that one can consider the implicit function problem @xmath226 such an equation admits a solution @xmath227 so that , if for a fixed @xmath8 the corresponding @xmath164 is diophantine , then we have a quasi - periodic attractor of the form ( [ eq:3.1 ] ) .    for @xmath228 and @xmath165 diophantine , the set of values @xmath229 $ ] such that @xmath164 is diophantine has full measure in @xmath230 $ ] .",
    "however the convergence of the series requires for @xmath231 to be small , so that the set of values of @xmath8 for which the quasi - periodic attractor exists has large , but not full measure .",
    "so , for fixed @xmath165 , it is a non - trivial problem to understand whether a smooth quasi - periodic attractor can exist .",
    "indeed , for fixed @xmath165 and @xmath8 one has first to compute the solution @xmath213 to the implicit equation ( [ eq:3.16 ] ) and then to check whether such a solution satisfies the diophantine condition ( [ eq:3.15 ] ) .",
    "for @xmath232 , double precision arithmetic is inadequate to estimate @xmath233 : in this case , we are after all attempting to find a difference of order @xmath234 between two numbers , @xmath165 and @xmath164 , both of order unity .",
    "furthermore , this difference can only be estimated by iterating many times a ( hem - approximated ) poincar map , in which the error per iteration is @xmath235 .",
    "in fact , we estimate @xmath236 using double precision arithmetic and @xmath237 iterations . thus , use of a higher - accuracy computation is indicated .",
    "we therefore use a hem with @xmath238 , for which the maximum value of @xmath239 when we iterate it using ca with 35 significant figures .",
    "since this accurate ca implementation is about 8000 times slower that the equivalent ll computation , we reduce the number of iterations @xmath41 to @xmath42 in equation  ( [ omp_comp ] ) .",
    "also , convergence to @xmath164 is quite slow , so we extrapolate to estimate the limit as @xmath240 .    in order to illustrate this convergence and extrapolation",
    ", we include fig .",
    "[ interp ] , which is a plot of @xmath241/(2\\pi i b)$ ] against @xmath74 with @xmath242 . superimposed on the plot",
    "are the peak and trough values , shown as filled circles , and a least squares fit curve ( dashed line ) through just these values .",
    "the curve is of the form @xmath243 and for the peak values , @xmath244 ; for the trough values , @xmath245",
    ". we therefore estimate @xmath246 for @xmath232 . this value should be compared with that given by perturbation theory , which is @xmath247 .    ,",
    "defined in the text , against @xmath74 , showing convergence to the asymptotic value , @xmath233 .",
    "the dashed lines show the least squares fit curves through the peaks and troughs of the plot of @xmath248.,width=288 ]",
    "we start by expanding the sine terms in @xmath249 in equation  ( [ gdef ] ) in the spin - orbit ode to obtain @xmath250 -\\gamma\\alpha\\left(y - \\omega\\right ) \\end{cases}\\ ] ] where @xmath251 are fourier polynomials in @xmath48 .",
    "we wish to show that , formally , we can write @xmath252 \\label{eff}\\ ] ] where @xmath69 , @xmath253 and @xmath254 are polynomials in @xmath76 , @xmath35 and the parameters in the ode , but not @xmath75 .",
    "we refer to this as the fourier series form .",
    "the point we wish to make here is that the @xmath143-th coefficient in the expansion of @xmath255 in this form always has a factor of @xmath119 .",
    "that is not to say that , for small @xmath8 , the fourier coefficients themselves decrease exponentially with increasing @xmath143 , because we do not prove that @xmath254 grow more slowly than exponentially .    to show that @xmath255 can be written in the form  ( [ eff ] ) , we start with the taylor series expansion @xmath256 where @xmath257 is the @xmath74-th derivative of @xmath258 at @xmath259 .",
    "using the fact that the ode  ( [ ode_spec ] ) supplies us with a means for substituting for the first  and hence , recursively , for all  derivatives of @xmath93 , then @xmath260 can be written as a sum of terms each of which is a product of the form @xmath261 where @xmath262 is a numerical constant ; @xmath263 is a combination of @xmath264 and @xmath265 and their derivatives ; integer @xmath266 ; @xmath267 ; and @xmath268 .",
    "we wish to prove that all terms have a factor of @xmath269 , so that we can always write @xmath270 , where @xmath271 is another constant ; from this , equation  ( [ eff ] ) will follow .",
    "differentiating @xmath272 with respect to @xmath48 , we obtain @xmath276 +   k py^{k-1}\\dot{y }",
    "c^{d - l } s^l.\\ ] ] as it stands , this expression consists of four terms each of degree @xmath273 , but using  ( [ ode_spec ] ) to replace @xmath277 , the last term becomes @xmath278c^{d - l } s^l =   -{\\varepsilon}kpy^{k-1}\\left[a c^{d - l+1}s^l + b c^{d - l } s^{l+1}\\right ] + kp y^{k-1}\\gamma\\alpha(-y+\\omega)c^{d - l } s^l.\\ ] ] this expression consists of two terms of degree @xmath279 , both of which are multiplied by @xmath8 , and two terms of degree @xmath273 , neither of which are multiplied by @xmath8 .",
    "hence , differentiation of a term of degree @xmath273 , followed by substitution of @xmath277 , if present , leads to an expression of the form @xmath280 + [ \\mbox{sum of terms of degree $ d$}]$ ] . since differentiation and substitution are the only processes by which @xmath281 is generated , by induction all terms in @xmath281 of degree @xmath273 have a factor of @xmath269 .",
    "furthermore , any expression @xmath282 is equal to a sum of terms of the form @xmath283 , @xmath284 , with @xmath285 ; and from this , the form  ( [ eff ] ) follows .      ,",
    "@xmath289 and @xmath290 , against @xmath93 , where the polynomials @xmath286 and @xmath287 are defined in equation  ( [ eff ] ) .",
    "only the first three fourier coefficients are needed to meet the error criterion explained in sect .",
    "[ setup_sec ] .",
    "the polynomials were computed for @xmath291 , @xmath292 and @xmath128 .",
    "the figure shows that , for these parameters at least , @xmath286 and @xmath287 decrease faster than than @xmath119 for all @xmath74 . , width=288 ]"
  ],
  "abstract_text": [
    "<S> we present an algorithm for the rapid numerical integration of smooth , time - periodic differential equations with small nonlinearity , particularly suited to problems with small dissipation . </S>",
    "<S> the emphasis is on speed without compromising accuracy and we envisage applications in problems where integration over long time scales is required ; for instance , orbit probability estimation via monte carlo simulation . </S>",
    "<S> we demonstrate the effectiveness of our algorithm by applying it to the spin - orbit problem , for which we have derived analytical results for comparison with those that we obtain numerically . among other tests , we carry out a careful comparison of our numerical results with the analytically predicted set of periodic orbits that exists for given parameters . </S>",
    "<S> further tests concern the long - term behaviour of solutions moving towards the quasi - periodic attractor , and capture probabilities for the periodic attractors computed from the formula of goldreich and peale . </S>",
    "<S> we implement the algorithm in standard double precision arithmetic and show that this is adequate to obtain an excellent measure of agreement between analytical predictions and the proposed fast algorithm . </S>"
  ]
}