{
  "article_text": [
    "given a finite set @xmath11 , and a distinguished point @xmath0 , the _ convex hull membership problem _ ( or _ convex hull decision problem _ ) is to test if @xmath12 , the convex hull of @xmath1 . given a desired tolerance @xmath13 , we call a point @xmath14 an @xmath15-approximate solution if @xmath16 , where @xmath17 .",
    "the convex hull membership problem is the most basic of the convex hull problems , see @xcite for general convex hull problems .",
    "nevertheless , it is a fundamental problem in computational geometry and linear programming and finds applications in statistics , approximation theory , and machine learning .",
    "problems related to the convex hull membership include , computing the distance from a point to the convex hull of a finite point set , support vector machines ( svm ) , approximating functions as convex combinations of other functions , see e.g. clarkson @xcite and zhang @xcite , and @xcite . from the theoretical point of view",
    "the problem is solvable in polynomial time via the pioneering algorithm of khachiyan @xcite , or karmarkar @xcite . for large - scale problems greedy algorithms",
    "are preferable to polynomial - time algorithms .",
    "the best known such algorithms are , frank - wolfe algorithm @xcite , gilbert s algorithm @xcite , and _ sparse greedy approximation_. for connections between these and analysis see clarkson @xcite , grtner and jaggi @xcite .",
    "a recent algorithm for the convex hull membership problem is the _ triangle algorithm _ @xcite .",
    "it can either compute an @xmath15-approximate solution , or when @xmath10 a separating hyperplane and a point that approximates the distance from @xmath9 to @xmath18 to within a factor of @xmath19 . based on preliminary experiments",
    ", the triangle algorithm performs quite well on reasonably large size problem , see @xcite .",
    "it can also be applied to solving linear systems , see @xcite and @xcite ( for experimental results ) .",
    "additionally , it can be applied to linear programming , see @xcite .",
    "some variations of the triangle algorithm are given in @xcite and @xcite .",
    "the performance of the triangle algorithm is quite fast in detecting the cases when @xmath9 is not near a boundary point of @xmath18 .",
    "when @xmath9 is a near - boundary point of @xmath18 the triangle algorithm may experience zig - zagging in achieving high accuracy approximations . in @xcite",
    "we have described several strategies to remedy this , such as adding new auxiliary points to @xmath1 . in this article",
    "we propose two randomized versions of the triangle algorithm .",
    "the randomized algorithms are also applicable to solving linear systems and linear programming .",
    "the article is organized as follows . in section [ sec2 ] ,",
    "we review the triangle algorithm , its relevant properties as well as bounds on its worst - case time complexities . in section [ sec3 ] ,",
    "we describe a randomized version , called _ greedy - randomized triangle algorithm_. in section [ sec4 ] , we describe a second randomized triangle algorithm inspired by the chaos game , see barnsley @xcite and devaney @xcite , known to give rise to the well - known sierpinski triangle .",
    "we call this algorithm _ sierpinski - randomized triangle algorithm_. we conclude with some remarks .",
    "here we review the terminology and some results from @xcite . the euclidean distance is denoted by @xmath20 .    given @xmath4 ,",
    "we say @xmath5 is a _ pivot _ relative to @xmath9 at @xmath7 ( or @xmath9-pivot , or simply pivot ) if @xmath6 ( see figure [ fig1 ] ) .    given @xmath4 ,",
    "we say @xmath5 is a _ strict pivot _ relative to @xmath9 at @xmath7 ( or _ strict _",
    "@xmath9-pivot , or simply _ strict _ pivot ) if @xmath21 ( see figure [ fig1 ] )",
    ".    [ defn4 ] we call a point @xmath4 a @xmath9-_witness _ ( or simply a _ witness _ ) if @xmath22 , for all @xmath23",
    ".    a witness has the property that the orthogonal bisecting hyperplane to the line @xmath24 separates @xmath9 from @xmath18 .",
    "furthermore , @xmath25    [ thm1 ] * ( distance duality @xcite ) * @xmath12 if and only if given any @xmath4 , there exists a pivot .",
    "[ thm2 ] * ( strict distance duality @xcite ) * assume @xmath26 .",
    "then @xmath12 if and only if given any @xmath4 , there exists a strict pivot .",
    "given three points @xmath27 such that @xmath6 .",
    "let @xmath28 be the nearest point to @xmath9 on the line segment joining @xmath7 to @xmath29 .",
    "specifically , let @xmath30 then @xmath31$;}\\\\ v , & \\text{otherwise . } \\end{cases}\\ ] ]    by squaring the distances we have @xmath32 thus to search for a pivot does not require taking square - roots .",
    "neither does the computation of @xmath33 .",
    "it requires @xmath34 arithmetic operations .",
    "the triangle algorithm is summarized in the box .",
    "* triangle algorithm * @xmath35 output @xmath7    [ thm3 ] ( @xcite ) given @xmath13 , if @xmath12 , the number of arithmetic operations of the triangle algorithm to compute @xmath36 so that @xmath37 is @xmath38    ( 0.0,0.0 )  ( 7.0,0.0 )  ( -2.0,-4.0 )  cycle ; ( 0,0 )  ( 7,0 ) node[pos=0.5 , above ] ; ( -2,-4 )  ( 0,0 ) node[pos=0.5 , above ] ; ( 0,0 )  ( 1.15,-2.6 ) node[pos=0.5 , right ] ; ( 1.15,-2.6 ) node[below ] @xmath39 ; ( 1.15,-2.6 ) circle ( 2pt ) ; ( 0,0 ) node[left ] @xmath9 ; ( 7,0 ) node[right ] @xmath29 ; ( -2,-4 ) node[below ] @xmath7 ; ( -1.5,-3.5 ) node[above ] @xmath40 ; ( 0,0 ) circle ( 2pt ) ; ( 7,0 ) circle ( 2pt ) ; ( -2,-4 ) circle ( 2pt ) ;    [ thm4 ] ( @xcite ) assume @xmath9 lies in the relative interior of @xmath18 .",
    "let @xmath41 be the supremum of radii of the balls centered at @xmath9 in this relative interior .",
    "given @xmath13 , suppose the triangle algorithm uses a strict pivot in each iteration .",
    "the number of arithmetic operations to compute @xmath14 so that @xmath42 is @xmath43",
    "in this section we describe a randomized algorithm we call _ greedy - randomized triangle algorithm_. it is designed to avoid possible zig - zagging in the triangle algorithm . given an iterate @xmath7 , it computes a pivot @xmath29 , if it exists .",
    "then it randomly selects the new iterate as the midpoint of @xmath7 and @xmath29 , or @xmath28 .",
    "it records the closest known point to @xmath9 as @xmath44 , the _ current incumbent candidate _ , and updates it whenever necessary .    *",
    "greedy - randomized triangle algorithm * @xmath35 , @xmath45 output @xmath46    figure [ fig2 ] describes a case where given an iterate @xmath7 and pivot @xmath47 , we can get closer to @xmath9 by selecting the closest point @xmath39 on @xmath48 .",
    "however , selecting instead @xmath49 , the midpoint of @xmath7 and @xmath47 , we create the chance to select a better approximation using @xmath49 as iterate .",
    "( 0.0,0.0 ) ",
    "( 7.0,0.0 ) ",
    "( 5.0,-4.0 )  cycle ; ( 0,0 )  ( 7,0 ) node[pos=0.5 , above ] ; ( 5,-4 )  ( 0,0 ) node[pos=0.5 , above ] ; ( 4,-.7 ) node[above ] @xmath9 ; ( 0,0 ) node[left ] @xmath47 ; ( 7,0 ) node[right ] @xmath50 ; ( 5,-4 ) node[below ] @xmath51 ; ( 5,-2 ) node[below ] @xmath7 ; ( 0,0 ) circle ( 2pt ) ; ( 7,0 ) circle ( 2pt ) ; ( 5,-4 ) circle ( 2pt ) ; ( 0,0 ) circle ( 2pt ) ; ( 4,-.7 ) circle ( 2pt ) ; ( 5,-2 ) circle ( 2pt ) ; ( 5,-2 )  ( 0,0 ) node[pos=0.5 , above ] ; ( 2.5,-1 ) circle ( 2pt ) ; ( 3.71,-1.45 ) circle ( 2pt ) ; ( 3.71,-1.45 )  ( 4,-.7 ) node[pos=0.5 , above ] ; ( 3.71,-1.45 ) node[below ] @xmath39 ; ( 2.5,-1 ) node[below ] @xmath49 ;    from properties of the triangle algorithm reviewed in the previous section we have ,    if @xmath12 , bound on the expected number of arithmetic operations of the greedy - randomized triangle algorithm to compute an @xmath15-approximate solution is @xmath52 moreover , if it is known that @xmath9 is the center of ball of radius @xmath41 contained in the relative interior of @xmath18 , and if each times it computes a pivot for an iterate the pivot is a strict pivot , then bound on the expected number of arithmetic operations to compute an @xmath15-approximate solution is @xmath53",
    "as described by devaney @xcite :    _ the _ chaos game _ and its multitude of variations provides a wonderful opportunity to combine elementary ideas from geometry , linear algebra , probability , and topology with some quite contemporary mathematics . the easiest chaos game to understand is played as follows .",
    "start with three points at the vertices of an equilateral triangle .",
    "color one vertex red , one green , and one blue .",
    "take a die and color two sides red , two sides green , and two sides blue .",
    "then pick any point whatsoever in the triangle , this is the seed .",
    "now roll the die . depending upon",
    "which color comes up , move the seed half the distance to the similarly colored vertex . then repeat this procedure , each time moving the previous point half the distance to the vertex whose color turns up when the die is rolled . after a dozen rolls , start marking where these points land . _",
    "devaney goes on to say , when this process is repeated thousands of times , the pattern that emerges is one of the most famous fractals of all , the _ sierpinski triangle_. the sierpinski triangle consists of three self - similar pieces , each of which is exactly one half the size of the original triangle in terms of the lengths of the sides .",
    "consider the convex hull problem for the very simple case where @xmath1 consists of three points as the vertices of an equilateral triangle and @xmath9 is a point inside the triangle .",
    "we make the following claim on the sierpinski triangle , see figure [ sier ] which is visually evident and provable from its topological properties .",
    "we refer to the convex hull of the dots as enclosing sierpinski triangle . +    given any dense subset of the sierpinski triangle , @xmath54 ,",
    "no matter where @xmath9 is located inside the enclosing sierpinski triangle , and no matter which of the three vertices is chosen as @xmath29 , we can select a sierpinski dot , say @xmath7 , for which the line segment @xmath8 either contains @xmath9 , or comes as close to it as desired .",
    "( general chaos game ) given a set of points @xmath11 , let @xmath55 correspond to the dots generated via the following generalization of sierpinski chaos game : start with a seed @xmath4 , and with probability @xmath56 randomly select @xmath5 , then record @xmath57 as a new point and place it in @xmath55 .",
    "replace @xmath7 with @xmath57 and repeat the process indefinitely .",
    "regardless of the validity of the above hypothesis , we prove that bounds on the expected complexity of the sierpinski - randomized triangle algorithm is no worse than bounds on the worst - case complexity of the triangle algorithm itself .",
    "the algorithm is inspired by the chaos game , however it keeps track of the current incumbent candidate , @xmath44 , the closest known point to @xmath9 .",
    "given an iterate @xmath7 , it randomly ( with equal probability ) selects @xmath62 .",
    "if @xmath29 is a pivot , it randomly either replaces @xmath7 with @xmath57 , or with @xmath33 .",
    "otherwise , if @xmath63 , the next iterate is @xmath57 , or else @xmath64 and not a pivot . in this case",
    "@xmath44 will be taken to be the iterate and the algorithm searches for a pivot @xmath65 at @xmath44 .",
    "when such a pivot exists , the next iterate will be @xmath66 . except for this case ,",
    "the other cases take @xmath67 operations .",
    "the probability that in each iteration the randomly selected @xmath29 coincides with @xmath44 is @xmath68 . then if @xmath69 is not a @xmath9-pivot then @xmath44 becomes the new iterate and the number of operations to compute a pivot @xmath65 at @xmath44 is @xmath34 .",
    "if the randomly selected @xmath29 is not @xmath44 , the number of operations to get the next iterate @xmath7 is @xmath67 .",
    "thus the expected number or operations in each iteration is @xmath70    if @xmath12 , bound on the expected number of arithmetic operations to compute an @xmath15-approximate solution is @xmath52 moreover , if it is known that @xmath9 is the center of ball of radius @xmath41 contained in the relative interior of @xmath18 , and if each times it computes a pivot @xmath65 for @xmath44 it is a strict pivot , bound on the expected number of arithmetic operations to compute an @xmath15-approximate solution is @xmath43    the expected number of times a random @xmath29 is selected before it equals @xmath44 is @xmath71 .",
    "when @xmath44 is not a pivot at the current iterate @xmath7 , @xmath7 is replaced with @xmath44 and a pivot @xmath65 is computed .",
    "applying the existence results on pivot and strict pivot , theorem [ thm1 ] and theorem [ thm2 ] , as well as the complexity bounds on the triangle algorithm , theorems [ thm3 ] and [ thm4 ] , the proof follows .",
    "suppose we consider a relaxed version of the above algorithm where each time @xmath44 is selected and is not a pivot at the current iterate , thus becoming a new iterate , we select @xmath65 randomly and not necessarily as a pivot at @xmath44 , thus economizing in computation . referring to this as the _ relaxed sierpinski - randomized triangle algorithm _ we have .",
    "if @xmath12 , bound on the expected number of arithmetic operations of the relaxed sierpinski - randomized triangle algorithm to compute an @xmath15-approximate solution is @xmath72 moreover , if it is known that @xmath9 is the center of ball of radius @xmath41 contained in the relative interior of @xmath18 , and if each times it computes a pivot @xmath65 for @xmath44 it is a strict pivot , bound on the expected number of arithmetic operations to compute an @xmath15-approximate solution is @xmath73    each iteration takes @xmath67 operations .",
    "given an iterate @xmath7 , the probability that a randomly selected @xmath29 in @xmath74 is a @xmath9-pivot ( strict @xmath9-pivot ) at @xmath7 is @xmath68 .",
    "this is because the voronoi cell of @xmath9 with respect to the two - point set @xmath75 must contain a @xmath9-point in @xmath74 ( otherwise , @xmath10 ) .",
    "thus the probability that at an iterate @xmath44 is randomly selected and that at @xmath44 a pivot ( strict pivot ) is randomly selected is @xmath76 . from these and analogous arguments as in the previous theorem , the expected complexities follow .",
    "there is yet another relaxation : we treat @xmath44 as any other point in @xmath1 , that is if an iterate @xmath7 selects @xmath44 randomly , we do not jump to @xmath44 as the next iterate .",
    "the expected complexity of this may remain to be the same as the relaxed version analyzed above . + * concluding remarks . * in this article we have described randomized versions of the triangle algorithm . based on our previous theoretical and experimental results ,",
    "see @xcite , @xcite and @xcite , the triangle algorithm appears to be a promising algorithm with wide range of applications .",
    "the randomized algorithms suggest variations that could help its performance in practice or in the worst - case .",
    "both allow exploring the the convex hull from different view points , thus increasing the chance to get better and better approximations to @xmath9 by choosing more effective pivots .",
    "also , in the sierpinski - randomized triangle algorithm as @xmath44 gets close to @xmath9 , the chances are good that when an iterate @xmath7 randomly selects @xmath69 that @xmath44 is actually a pivot at @xmath7 .",
    "hence with probability @xmath77 the next iteration will get closer to @xmath9 .",
    "to check if @xmath44 is a pivot at @xmath7 takes @xmath67 time as opposed to @xmath34 time .",
    "additionally , it is likely that the randomized algorithms will help improve the performance of the triangle algorithm as a function of @xmath15 . some theoretical questions thus arise .",
    "computational experimentations are needed to assess practical values .",
    "we plan to do so in future work .",
    "+ * acknowledgements * i like to thank mike saks for a discussion regarding randomization .",
    "k. l. clarkson , coresets , sparse greedy approximation , and the frank - wolfe algorithm . in soda 08 : proceedings of the nineteenth annual acm - siam symposium on discrete algorithms , 922 - 931 .",
    "society for industrial and applied mathematics , 2008 .",
    "m. li and b. kalantari , experimental study of the convex hull decision problem via a new geometric algorithm , 2-page extended abstract , 23nd annual fall workshop on computational geometry , city college of new york , 2013 ."
  ],
  "abstract_text": [
    "<S> we present randomized versions of the _ triangle algorithm _ introduced in @xcite . </S>",
    "<S> the triangle algorithm tests membership of a distinguished point @xmath0 in the convex hull of a given set @xmath1 of @xmath2 points in @xmath3 . </S>",
    "<S> given any _ </S>",
    "<S> iterate _ </S>",
    "<S> @xmath4 , it searches for a _ pivot _ , a point @xmath5 so that @xmath6 . </S>",
    "<S> it replaces @xmath7 with the point on the line segment @xmath8 closest to @xmath9 and repeats this process . </S>",
    "<S> if a pivot does not exist , @xmath7 certifies that @xmath10 . </S>",
    "<S> here we propose two random variations of the triangle algorithm that allow relaxed steps so as to take more effective steps possible in subsequent iterations . </S>",
    "<S> one is inspired by the _ chaos game _ known to result in the sierpinski triangle . </S>",
    "<S> the incentive is that randomized iterates together with a property of sierpinski triangle would result in effective pivots . </S>",
    "<S> bounds on their expected complexity coincides with those of the deterministic version derived in @xcite .    </S>",
    "<S> * keywords : * convex hull , linear programming , approximation algorithms , randomized algorithms , triangle algorithm , chaos game , sierpinski triangle . </S>"
  ]
}