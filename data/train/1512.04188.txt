{
  "article_text": [
    "a hypergraph @xmath1 is a set system @xmath20 defined on a finite universe @xmath21 ( called the vertex set ) .",
    "the sets in the set system are called _",
    "hyperedges_. we consider @xmath0-uniform hypergraphs , that is , hypergraphs whose hyperedges all have @xmath0 elements .",
    "we say that a hypergraph is two - colorable , or has property b , if there is an assignment of colors @xmath22 to the vertex set @xmath21 such that every hyperedge @xmath23 has a vertex colored red and a vertex colored blue , that is , no hyperedge is _",
    "monochromatic_. note that the hypergraph two - coloring problem can be viewed as a constraint satisfaction problem where the clauses are of a specific kind ( the ) .    in the special case of graphs ( which we may view as two - uniform hypergraphs )",
    "two - colorability is easy to characterize and establish : the graph is two - colorable if and only if it does not have an odd cycle ; one can find a two - coloring in linear time and @xmath24 space with random access to the input ; if the edges are streamed one at a time , a two - coloring can be constructed with @xmath25 space and @xmath26 bit operations .    for the case of hypergraphs , the situation is not as simple . using the probabilistic method , erds  @xcite showed that any @xmath0-uniform hypergraph with fewer than @xmath27 hyperedges is two - colorable : a random two - coloring is valid with positive probability ; furthermore , this randomized method can be derandomized using the method of conditional probabilities .",
    "erds  @xcite later showed that there are @xmath0-uniform hypergraphs with @xmath28 vertices and @xmath29 hyperedges that are _ not _ two - colorable .",
    "both these bounds remained unchanged for some time , until it was first improved by beck  @xcite , and further improved by radhakrishnan and srinivasan  @xcite , who showed that any hypergraph with fewer than @xmath30 hyperedges is two - colorable .",
    "they also provided a polynomial - time randomized algorithm ( and its derandomization ) for coloring such hypergraphs .",
    "the algorithm has _",
    "one - sided _ error , i.e. , with some small probability @xmath31 that can be made arbitrarily small , it declares failure , but otherwise it always outputs a valid two - coloring .",
    "recently , cherkashin and kozik  @xcite showed that a remarkably simple randomized algorithm achieves this bound .",
    "erds and lovsz @xcite have conjectured that any hypergraph with fewer than @xmath32 hyperedges is two - colorable . in",
    "related work , achlioptas et al .",
    "@xcite studied when , in terms of the number of hyperedges , does a _ randomly _",
    "chosen @xmath0-uniform hypergraph stop being two - colorable , and relate this to similar questions for random @xmath0-sat .",
    "the above results are formally stated in terms of bounds on the number @xmath15 , the minimum number of hyperedges in a _ non - two - colorable _ hypergraph .    in its original description",
    ", the delayed recoloring algorithm of radhakrishnan and srinivasan @xcite assumes that the entire hypergraph is available in memory , its vertices and hyperedges and may be accessed quickly .",
    "unfortunately , the number of hyperedges can be exponentially larger than the number of vertices .",
    "for example , the number of hyperedges can be as high as @xmath33 even when there are just @xmath34 vertices , and it may be unrealistic to expect the entire hypergraph to be available in the main memory . in this paper , we ask if the performance of the delayed recoloring algorithm can be replicated when the work space of the algorithms is limited to ( say ) a polynomial in the size of vertex set .",
    "to study this question , we consider the hypergraph two - coloring problem in the streaming model , where the data arrives as a stream or is stored in external memory , and an algorithm with limited local work space analyzes it by making a small number of sequentially passes over it .",
    "the resources whose use one tries to minimize in this model are : the number of passes over the data , the amount of local memory required , and the maximum processing time for any data item . on receiving the complete data set , the algorithm must decide as fast as possible either to start another pass or stop with an output",
    ". the algorithm could be either deterministic or randomized , and in the latter case , its output needs to be accurate with high probability over the algorithm s internal coin tosses .",
    "a number of important algorithms have been developed in the streaming model of computation , e.g. , estimating frequency moments @xcite and heavy hitters @xcite of a data stream .",
    "these algorithms find applications in the context of network routing , where large amount of data flows through a router but each of them has limited memory .",
    "further motivation for our work comes from the _ semi - streaming model _ for graphs that has recently been considered widely in the literature .",
    "proposed by muthukrishnan  @xcite , this model looks at solving fundamental problems on graphs such as max - cut , @xmath35-connectivity , shortest paths , etc .",
    "( see , for e.g. the works @xcite and references therein ) when the edges are streamed in one at a time .",
    "the algorithm only has @xmath36 bits of workspace , and limited number of passes over the edge - stream , which means that it can not store the entire graph in memory .",
    "our model for hypergraphs is an extension of this setting , when we have a stream of _ hyperedges _ coming in .",
    "the parameter of interest to us is the _ uniformity _ @xmath0 of the hypergraph , and we assume the number of vertices is @xmath37 : this is the natural regime in which all the results known for two - coloring hypergraphs are stated .",
    "the hyperedges are made available one at a time as a list of @xmath0 vertices each , where every vertex is represented using @xmath38 bits .",
    "furthermore , we assume that @xmath37 bits ( equivalently , @xmath39 bits are available in the algorithm s work space .",
    "notice that the number of hyperedges could now be _ exponential _ in @xmath0 ( or subexponential in @xmath40 ) , and hence we allow for a space that is @xmath39 , rather than close to linear in the number of vertices like in the semi - streaming model for graphs .",
    "in the first part of the paper , we investigate the space requirements of _ deterministic _ streaming algorithms for the hypergraph two - coloring problem .",
    "it seems reasonable to conjecture that any deterministic two - coloring one - pass algorithm must essentially store all the hyperedges before it can arrive at a valid coloring .",
    "let @xmath3 be the minimum space used by a deterministic ( one - pass ) streaming algorithm that on receiving an @xmath41-uniform hypergraph @xmath4 on @xmath5 vertices and @xmath6 hyperedges produces a proper two - coloring of @xmath4 .",
    "[ thm : result1 ] @xmath8 .",
    "note that when @xmath42 , the graph is guaranteed to have a two - coloring .",
    "however , the above theorem shows if the number of hyperedges is large , a two - coloring ( though it is guaranteed to exist ) can not be found efficiently by a deterministic streaming algoirithm .",
    "lower bounds for space bounded computations often follow from lower bounds for associated communication complexity problems .",
    "the above result is also obtained using this strategy .",
    "however , the communication complexity problem turns out to be somewhat subtle ; in particular , we are not able to directly reduce it to a well - known problem and refer to an existing lower bound .",
    "we conjecture that no deterministic algorithm can do substantially better if it is allowed only a constant number of passes over the input .",
    "note , however , that proving this might be non - trivial , because the corresponding two - round deterministic communication problem has an efficient protocol ; see section  [ sec : detub ] for details .",
    "we show that a version of the delayed recoloring algorithm can be implemented in the streaming model , and provides essentially the same guarantees as the original algorithm .",
    "let @xmath9 be the minimum space used by a randomized ( one - pass ) streaming algorithm that on receiving an @xmath0-uniform hypergraph @xmath4 on @xmath5 vertices and @xmath6 hyperdges with probability at least @xmath43 ( say ) produces a proper two - coloring of @xmath4 ( or declares failure ) .",
    "we suppose that each vertex is represented using @xmath38 bits , and each edge is represented as an @xmath0-tuple of vertices .    [",
    "thm : randomizedonepass ] @xmath44 .",
    "furthermore , the corresponding randomized algorithm maintains a coloring of the vertices encountered , and updates this coloring in time @xmath45 per hyperedge .",
    "if the hypergraph has at most @xmath46 hyperedges , then with high probability the two - coloring is valid . if the two - coloring being maintained valid",
    ", the algorithm declares failure ( the algorithm never outputs an invalid coloring ) .",
    "the upper bound for property b , @xmath47 , was shown by erds by exhibiting a hypergraph with @xmath48 hyperedges that is not two - colorable ; this hypergraph needed @xmath19 vertices .",
    "we ask if there are such non - two - colorable hypergraphs with @xmath49 vertices .",
    "[ thm : verticesnontwocolorable ]    1 .",
    "let @xmath50 be such that @xmath11 .",
    "an @xmath0-uniform hypergraph with at most @xmath51 vertices and at most @xmath52 hyperedges is two - colorable .",
    "the corresponding two - coloring can be found using an efficient randomized streaming algorithm : @xmath53 .",
    "if @xmath54 , there is a graph with @xmath51 vertices and @xmath55 hyperedges that is not two - colorable .",
    "setting @xmath56 in theorem  [ thm : verticesnontwocolorable](a ) above implies that for any @xmath0-uniform hypergraph with @xmath57 vertices and @xmath58 hyperedges , there is a randomized one - pass streaming algorithm that outputs a two - coloring with high probability .",
    "this algorithm requires @xmath59 space at any instant and @xmath34 processing time after reading each hyperedge .",
    "a comparison of this to the result of erds  @xcite , which gave a construction of a non - two - colorable hypergraph with the same @xmath60 hyperedges , but on @xmath28 vertices shows that the number of vertices being @xmath61 was crucial , and anything significantly smaller would not have worked .",
    "furthermore , theorem  [ thm : verticesnontwocolorable ] ( b ) recovers erds bound when @xmath62 , and generalizes it to make explicit the dependence of the erds upper bound on @xmath15 on the vertex - set size .    [",
    "[ organisation - of - the - rest - of - the - paper ] ] organisation of the rest of the paper : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in section  [ sec : notation ] we introduce the notation . in section  [ sec : deterministiclower ] , we establish theorem  [ thm : result1 ] , showing the limitation of deterministic streaming algorithms . in section  [ sec : streaming - alg ] , we prove theorem  [ thm : randomizedonepass ] by showing how a version of the off - line delayed recoloring algorithm of @xcite ( see section  [ sec : off - line - delayed - recoloring ] ) can , in fact , be implemented efficiently in the streaming model . in section  [ boundeduniverse ] ,",
    "we prove the results in theorem  [ thm : verticesnontwocolorable ] regarding non - two - colorability .",
    "we conclude with some remarks and open problems .",
    "our @xmath0-uniform hypergraphs will be denoted by @xmath63 , where @xmath21 is the set of vertices , and @xmath64 is the set of hyperedges of @xmath4 . for a hypergraph @xmath1",
    ", we use @xmath5 for @xmath40 , and @xmath6 for @xmath65 . in our setting",
    ", @xmath5 will typically be a small polynomial in @xmath0 and @xmath6 will be exponential in @xmath0 . for any @xmath66",
    ", we use the notation @xmath67",
    "\\coloneqq \\{1 , \\ldots , k\\}$ ] .",
    "a valid _ two - coloring _ of the hypergraph @xmath4 is an assignment @xmath68 that leaves no edge monochromatic , i.e. , @xmath69 , @xmath70 such that @xmath71 .",
    "a hypergraph that admits a valid two - coloring is said to be _ two - colorable , _ or equivalently , to have _",
    "property b_.    we will be interested in space - efficient streaming algorithms for finding two - colorings of hypergraphs . consider a hypergraph with edge set @xmath72 .",
    "the hyperedges are made available to the algorithm one at a time in some order @xmath73 . to keep the problem general",
    ", we will not assume that the vertex set is fixed in advance .",
    "the algorithm will become aware of the vertices as they arrive as part of the stream of hyperedges .",
    "we will assume that each vertex is encoded using @xmath38 bits .",
    "the goal is to design a space - efficient algorithm ( deterministic or randomized ) that can output a valid coloring for the entire hypergraph once all the hyperedges have _",
    "passed_. we may allow multiple passes over the input data .",
    "we call the algorithm a @xmath74-pass streaming algorithm , if it outputs a valid coloring after making @xmath74 passes over the input stream . by space",
    "- efficient , we mean that the algorithm uses @xmath37 internal workspace .",
    "we will assume that @xmath0 is large , say at least 100 .",
    "denote by @xmath75 the minimum space used by a deterministic @xmath74-pass streaming algorithm that on receiving an @xmath0-uniform hypergraph @xmath4 on @xmath5 vertices and @xmath6 hyperedges produces a proper two - coloring of @xmath4 .",
    "similarly , @xmath76 is the minimum space used by a randomized @xmath74-pass streaming algorithm that on receiving an @xmath0-uniform hypergraph @xmath4 on @xmath5 vertices and @xmath6 hyperedges with probability at least @xmath43(say ) produces a proper two - coloring of @xmath4 ( or declares failure ) .",
    "when @xmath74 is omitted from the subscript , it is assumed @xmath77 .",
    "we first show lower bounds in the deterministic setting .",
    "we recall the routine translation of an efficient streaming algorithm to a communication complexity protocol  @xcite , with a view to proving lower bounds .",
    "there are two computationally unbounded players alice and bob , who both know of a relation @xmath78 .",
    "alice receives an input @xmath79 and bob gets @xmath80 ; in the beginning , neither player is aware of the other s input .",
    "their goal is to exchange bits according to a fixed _ protocol _ and find a @xmath81 so that @xmath82 .",
    "the communication complexity of @xmath83 is the minimum number of bits that alice and bob exchange in any valid protocol for the worst case input pair @xmath84 .",
    "several generalizations of this model can be defined with @xmath85 players , we will define our specific model below . for more details on communication complexity in general , please consult the book by kushilevitz and nisan  @xcite .    to show lower bounds for hypergraph two - coloring",
    ", we define the class of communication problems @xmath86.-uniform , we will not explicitly state @xmath0 as a parameter ]    [ defn : hyper - comm - game ]    for @xmath87 , an instance @xmath88 has @xmath89 players @xmath90 .",
    "each player @xmath91 has a subset @xmath92 of some hypergraph @xmath93 , with @xmath94 and @xmath95 .",
    "the communication is done in sequential order : starting with @xmath96 , @xmath91 sends a message to @xmath97 for @xmath98 .",
    "this sequence of communication constitutes a round . in a multiple - round protocol",
    ", @xmath99 may start a new round by sending back a message to @xmath100 , who would continue communication in the above order . in a valid @xmath74-round protocol @xmath101 , some @xmath102",
    "in the course of the @xmath74-th round will output a coloring @xmath103 that is valid for @xmath4 .",
    "denote by @xmath104 the communication sent by @xmath102 in round @xmath105 on instance @xmath106 .",
    "we define the @xmath74-round communication complexity of @xmath86 as follows :    @xmath107 , l\\in[r ] } }   \\quad \\left\\vert \\pi(i , p_i , l )   \\right\\vert\\ ] ]    in this definition , we consider the maximum communication by any single player instead of total communication because this quantity is related more closely to the space requirement of streaming protcols ( see proposition  [ prop : streamingtocommunication ] below ) . if the maximum communication by any player is @xmath108 bits , then the total communication is bounded above by @xmath109 bits for an @xmath74 round protocol . besides , for the values of @xmath89 and @xmath74 that we consider , this @xmath110 blowup is immaterial .",
    "note that when @xmath111 and @xmath77 , we get the two - player one - round model ( where we traditionally call @xmath100 as alice and @xmath112 as bob ) : alice sends a message @xmath113 to bob depending on her input and bob outputs a coloring looking at @xmath113 and his input .",
    "our lower bound for hypergraph coloring in the streaming model will rely on the following well - known connection between streaming and communication complexity introduced in @xcite .",
    "[ prop : streamingtocommunication ] for any @xmath114 , we have : @xmath115    thus , to establish theorem  [ thm : result1 ] , it is enough to show an appropriate lower bound on @xmath116 .",
    "we start with the two - player case , which already introduces most of the ideas .",
    "[ thm : oneroundlowerbound ] @xmath117 .",
    "note that the above theorem gives a non - trivial lower bound only when @xmath118 .",
    "ideally , we would expect a lower bound that is linear in @xmath6 , for all values of @xmath6 .    consider a valid one - round protocol for the two - player problem where alice sends a message @xmath113 from a set @xmath119 of possible messages .",
    "let the input to the protocol be @xmath120 , where @xmath121 and @xmath122 are hypergraphs , each with @xmath6 hyperedges on a common vertex set @xmath123 $ ] .",
    "for every hypergraph @xmath124 that bob receives , he must output a coloring @xmath125 based on some deterministic function @xmath126 . for @xmath127 , define @xmath128 it is easy to see that bob may identify the message @xmath113 with the list @xmath129 ; on receiving @xmath113 , he must find a proper coloring for @xmath122 from @xmath129 .",
    "thus , for every @xmath130 , we have the following .",
    "completeness for bob : : :    every possible input hypergraph to bob ( i.e. all hypergraphs on    @xmath6 hyperedges ) should have a valid coloring in    @xmath129 . soundness for alice",
    ": : :    let    @xmath131 . then every @xmath132 should be    valid for every hypergraph @xmath133 .",
    "we will show that these two conditions imply the claimed lower bound on @xmath134 .    given a coloring @xmath103 ,",
    "we define its _ shadow _ @xmath135 to be the set of all possible hyperedges that are monochromatic under @xmath103 .",
    "the shadow of a list @xmath136 of colorings is @xmath137    note that in the above definition , the shadow @xmath135 collects _ all possible _ monochromatic hyperedges under @xmath103 , so it depends only on the coloring @xmath103 , and not on any hypergraph .",
    "similarly , @xmath138 is also a collection of hyperedges and does not depend on any hypergraph ; in particular , if a hypergraph @xmath121 is monochromatic under every coloring in @xmath136 , then none of @xmath121 s hyperedges can appear in @xmath138 .    in the following ,",
    "assume that @xmath0 is large .",
    "for every coloring @xmath103 , we have @xmath139    : one of the two color classes @xmath103 has at least @xmath140 vertices .",
    "it follows that @xmath141    we next observe that the _ completeness condition _ for bob imposes a lower bound on @xmath142 .    for every @xmath127 , [ cl : shadowunion ] @xmath143",
    ": suppose the claim does not hold , that is , @xmath144 choose a random hypergraph @xmath124 by choosing @xmath6 hyperedges randomly from @xmath142 .",
    "we will say that the hypergraph _ hits _",
    "@xmath145 , if at least one of its hyperedges falls in @xmath135 , otherwise we say it _ misses _ @xmath103 .",
    "for each @xmath132 , we have , using the bounds ( [ eq : oneshadow ] ) and ( [ eq : shadowassumption ] ) , that @xmath146 & \\leq   \\left(1-\\frac{|\\delta(\\chi)|}{|\\delta(l(m))|}\\right)^{q}\\\\                  & \\leq \\left(1-\\frac{{n}^2}{{q}}\\right)^{q}\\\\                  & \\leq \\exp(-{n}^2)\\end{aligned}\\ ] ] since there are at most @xmath147 colorings , the union bound yields : @xmath148 \\leq 2^{{n}^2 }    \\exp(-10 { n}^2 ) \\ll   1\\ ] ] thus there exists a hypergraph @xmath4 with @xmath6 hyperedges that hits every coloring @xmath132 , that is every coloring in @xmath129 is invalid for @xmath4 .",
    "this , however , violates completeness for bob , proving the claim .",
    "we can now complete the proof of the theorem .",
    "consider a random hypergraph @xmath4 for alice , obtained by choosing each of its hyperedges uniformly at random from the set of all hyperedges .",
    "since alice sends some @xmath130 for _ every _ hypergraph , the _ soundness condition _ for alice implies that @xmath149 \\leq     where we used claim  [ cl : shadowunion ] to justify the first inequality .",
    "taking logarithms on both sides yields the desired lower bound latexmath:[$\\log      as remarked earlier , the above communication lower bound implies that the space required by a deterministic streaming algorithm to find a valid coloring is exponential in @xmath0 even for hypergraphs that have very simple randomized coloring strategies ; it does not yield any such lower bound for hypergraphs that have fewer than @xmath151 hyperedges . in order to overcome this limitation ,",
    "we generalize the analysis above to the @xmath89-player hypergraph coloring problem .",
    "we will see later that for @xmath152 there do exist efficient two - player one - round protocols , so we could not have proved our lower bounds while restricting our attention to the two - player setting .",
    "theorem  [ thm : result1 ] will follow from the following theorem :    let @xmath153 . @xmath154^\\frac{1}{k}\\right)\\ ] ]    recall that the protocol has @xmath155 players , @xmath156 .",
    "player @xmath102 receives a hypergraph @xmath157 with @xmath6 hyperedges over the vertex set @xmath158 $ ] .",
    "the communication starts with @xmath100 , who sends a message @xmath159 of length @xmath160 to player @xmath112 ; in the @xmath161-th step , @xmath102 sends a message of length @xmath162 to @xmath97 . in the end , @xmath163 produces a coloring for the hypergraph @xmath164",
    ". it will be convenient to view this coloring as a message sent by player @xmath163 , and set @xmath165 ( the number of bits needed to describe a coloring ) .    in a @xmath166-player protocol ,",
    "after the messages sent by the first @xmath161 players have been fixed , we have a list of colorings that may still be output at the end ; we use the following notation to refer to this list ( recall that @xmath167 is a coloring ) :    @xmath168    in particular , by considering the situation at the beginning of the protocol ( when no messages have yet been generated ) , we let @xmath169 .",
    "let @xmath170 , and for @xmath171 , let @xmath172 and    @xmath173    here the minimum is taken over all possible sequences of first @xmath161 messages that arise in the protocol .",
    "in particular , @xmath174 corresponds to the union of shadows of all colorings ever output by the protocol , and @xmath175 corresponds to the shadow of the output corresponding to the transcript ( that is , the shadow of the last message , which is a coloring ) .",
    "[ claim : generalshadow ] @xmath176    inequality ( [ cl : a ] ) is immediate from the definition of @xmath174 .    for claim ( [ cl : b ] ) , we use ideas similar to those used in the proof of claim  [ cl : shadowunion ] for two - player protocols . fix @xmath177 .",
    "we will show that @xmath178 is at least the right hand side of ( [ cl : b ] ) .",
    "pick a random hypergraph @xmath4 ( which we will consider as a possible input to @xmath97 ) as follows : choose @xmath6 hyperedges independently and uniformly from the set @xmath179 .",
    "when @xmath4 is presented to @xmath97 , it must respond with a message @xmath180 .",
    "none of the colorings that @xmath163 produces after that can include any edge of @xmath4 in its shadow , that is , @xmath181 .",
    "for each valid choice @xmath113 for @xmath180 , we have @xmath182 and @xmath183 \\leq   \\left(1-\\frac{s_{i+1}(m_1,\\ldots , m_i , m)}{s_{i}(m_1 , \\ldots , m_i))}\\right)^{{q } } \\leq \\left(1-\\frac{s_{i+1}}{s_{i}(m_1 , \\ldots , m_i))}\\right)^{{q}}.\\ ] ] thus , @xmath184 \\leq 2^{\\ell_{i+1}}\\left(1-\\frac{s_{i+1}}{s_{i}(m_1 ,     \\ldots , m_i))}\\right)^{{q}}\\ ] ] this yields @xmath185 , giving @xmath186 . by minimizing over valid sequences @xmath187 , we justify our claim .",
    "claim [ cl : c ] follows from the fact the shadow of every coloring has at least @xmath188 hyperedges .    by combining parts ( [ cl : a ] ) and ( [ cl : b ] )",
    ", we obtain @xmath189 the theorem follows from this by using ( [ cl : c ] ) , noting that @xmath190 , and for @xmath191 : @xmath192 } \\ell_i$ ] .    [ restatement of theorem  [ thm : result1 ] ] every one - pass deterministic streaming algorithm to two - color an @xmath0-uniform hypergraph with at most @xmath6 hyperedges requires @xmath193 bits of space .    setting @xmath194 in the previous result",
    "immediately yields that for hypergraphs on @xmath195 vertices and at most @xmath196 hyperedges , the communication required is @xmath197 .",
    "the lower bound for streaming algorithms then follows from proposition  [ prop : streamingtocommunication ] .      in the previous section",
    ", we derived our lower bound for the deterministic streaming algorithms by invoking _",
    "multi - player _ communication complexity , because the two - player lower bound did not give us a non - trivial lower bound for hypergraphs with fewer than @xmath151 hyperedges .",
    "in this section , we first show an upper bound in the two - player setting , which shows that it was essential to consider the multi - player setting in order to get the stronger lower bound .",
    "next , we consider two - round protocols , for they are related to two - pass streaming algorithms .",
    "we show below , perhaps surprisingly , that the two - round two - player deterministic communication complexity for the problem is _",
    "@xmath37_. however , we do not have a streaming algorithm with a matching performance .",
    "@xmath198    alice and bob will base their protocol on a special collection of lists of colorings @xmath199 , with @xmath200 .",
    "suppose alice s hypergraph is @xmath121 and bob s hypergraph is @xmath122 .",
    "the protocol will have the following form .",
    "alice : :    alice sends an index @xmath161 of a list    @xmath201 such that every coloring in    @xmath202 is valid for @xmath121 .",
    "bob : :    bob outputs a coloring @xmath203 that is valid for    @xmath122 .",
    "we next identify some properties on the collection of lists that easily imply that the protocol above produces a valid two - coloring .    1 .",
    "a collection of lists @xmath204 is good for bob , if for every hypergraph @xmath122 , in list @xmath136 in @xmath204 there is a valid coloring for @xmath122 in @xmath136 .",
    "a collection of lists @xmath204 is good for alice , if for every hypergraph @xmath121 , there is list @xmath136 in @xmath204 , such that coloring in @xmath136 is valid for @xmath121 .",
    "note that good collections are defined differently for alice and bob . with this definition ,",
    "the existence of a collection of lists that is good for both alice and bob would furnish a one - way communication protocol with @xmath205 bits of communication , and establish the theorem .",
    "such a _ good _ collection is shown to exist in lemma  [ goodlistsexist ] below .",
    "[ goodlistsexist ] suppose @xmath121 and @xmath122 are restricted to have at most @xmath151 hyperedges .",
    "then , there exists a collection of @xmath206 of @xmath200 lists , each with @xmath207 colorings , which is good for alice and bob .",
    "we pick @xmath204 by picking @xmath74 lists randomly : list @xmath202 will be of the form @xmath208 , where each coloring is chosen independently and randomly from the set of all colorings .",
    "we will show that with positive probability @xmath204 is a good collection of lists .",
    "we will separately bound the probability that @xmath204 fails to satisfy conditions ( a ) and ( b ) above .",
    "we may restrict attention to hypergraphs that have exactly @xmath209 hyperedges .    1 .",
    "we first bound the probability that @xmath204 is not good for bob .",
    "consider one list @xmath201 .",
    "@xmath210 & = & \\pr[\\exists h_b \\text { such that none of   the } k \\text { colorings are valid for } h_b ] \\\\   &",
    "\\leq &   { { { v}\\choose { n } } \\choose   { q}}\\left(\\frac{{q}}{2^{{n}-1}}\\right)^{k}.\\end{aligned}\\ ] ] since @xmath204 is a collection of @xmath74 lists , we have @xmath211 & = & \\pr[\\exists l_i \\in \\mathcal{l } \\text { is not good for bob } ]   \\nonumber \\\\ & \\leq & r { { { v}\\choose { n } } \\choose { q}}\\left(\\frac{{q}}{2^{{n}-1}}\\right)^{k } \\\\",
    "& \\leq & 2^ { ( { n}{q}\\log { v}+ \\log r ) -k ( { n}- \\log { q}-1 ) } .",
    "\\label{ineq : notgoodforbob}\\end{aligned}\\ ] ] to make the right hand side of ( [ ineq : notgoodforbob ] ) small , we will later choose @xmath89 such that @xmath212 2 .",
    "we next bound the probability that @xmath204 is not good for alice .",
    "fix a hypergraph @xmath121 for alice , and consider @xmath213 .",
    "@xmath214 & \\geq &    \\left(1-\\frac{{q}}{2^{{n}-1}}\\right)^{k}\\\\   & \\geq &   \\exp\\left(-\\frac{{q}k}{2^{{n}-1}-{q}}\\right ) . \\quad   \\mbox{(using $ 1-x \\geq \\exp\\left(-\\frac{x}{1-x}\\right)$)}\\end{aligned}\\ ] ] since @xmath204 is a collection of @xmath74 such lists chosen independently and there are @xmath215 choices for @xmath121 , we have @xmath216 & \\leq &   { { { v}\\choose { n } } \\choose { q } } \\left(1- \\exp\\left(-\\frac{{q}k}{2^{{n}-1}-{q}}\\right)\\right)^r   \\nonumber \\\\ & \\leq & \\exp\\left ( { q}n \\ln { v}- r \\exp\\left(-\\frac{{q}k}{2^{{n}-1}- { q}}\\right)\\right ) .",
    "\\label{ineq : notgoodforalice}\\end{aligned}\\ ] ] to make the right hand side of ( [ ineq : notgoodforalice ] ) small , we will choose @xmath74 such that @xmath217    now , suppose @xmath218 .",
    "then one can verify that if we set @xmath219 and @xmath200 , then ( [ eq : boundonk ] ) and ( [ eq : boundonr ] ) both hold for all large @xmath0 .",
    "it follows that the required collection of lists exists .",
    "next we present our efficient two - player , two - round communication protocol for hypergraph two - coloring .",
    "[ thm : two - round - ub ] @xmath221    we will prove theorem  [ thm : two - round - ub ] by exploiting the connection between circuit complexity and _ karchmer - wigderson games _ @xcite .    given a monotone boolean function @xmath222 , the karchmer - wigderson communication game @xmath223 between two players alice and bob is the following : alice gets an input @xmath224 , and bob gets an input @xmath225 , and they both know @xmath126 .",
    "the goal is to communicate and find an index @xmath226 $ ] such that @xmath227 and @xmath228 ( such an index exists since @xmath126 is monotone ) .",
    "the communication complexity of this game is denoted by @xmath229 ( or specifically @xmath230 for an optimal @xmath74-round protocol ) .",
    "karchmer and wigderson make the following connection :    [ thm : kw - game ] if a monotone boolean function @xmath126 has a depth-@xmath231 , size @xmath108 circuit , then @xmath232 .",
    "the proof of theorem  [ thm : two - round - ub ] will be based on the circuit complexity of _ approximate majority functions_. define the partial function @xmath233 on a subset of @xmath234 as follows : @xmath235 when @xmath236 , and @xmath237 when @xmath238 .",
    "a function @xmath222 is an approximate majority function if it satisfies : @xmath239 when @xmath240 , and @xmath241 when @xmath242 .",
    "we need the following lemma .",
    "[ lem : reduction - to - maj ] for any approximate majority function @xmath243 , we have : @xmath244    we will prove this by reducing @xmath245 to @xmath223 , for any approximate majority function @xmath126 . for convenience , let @xmath246 .",
    "suppose alice receives @xmath247 , and bob receives @xmath248 .",
    "let @xmath249 be an indicator vector for alice that marks which of the @xmath250 possible two - colorings of @xmath21 ( arranged in some canonical order ) are valid for @xmath121 , and let @xmath251 be the corresponding indicator vector for bob . since we know that both @xmath252 have @xmath253 hyperedges , a randomly chosen coloring will color either hypergraph with probability @xmath254 , which implies @xmath255 and @xmath256 . to find a coloring valid for both @xmath121 and @xmath122 , alice and bob",
    "just have to find an index @xmath257 $ ] such that @xmath258 .",
    "alice now complements her input to consider @xmath259 . since @xmath260 , @xmath261 , whereas @xmath262 . clearly , playing the karchmer - wigderson game for any approximate majority function @xmath126 on @xmath250 bits , @xmath263 would find a index @xmath161 where @xmath264 , and consequently yield a valid coloring for @xmath265 .",
    "hence , a small depth-3 monotone circuit that computes @xmath266 on its domain would yield an efficient 2-round protocol for @xmath245 , using theorem  [ thm : kw - game ] .",
    "ajtai  @xcite showed that such a circuit exists , and viola  @xcite further showed uniform constructions of such circuits .",
    "[ thm : appmaj - circuit]@xcite there exist monotone , uniform @xmath267-sized depth-3 circuits for @xmath233 on @xmath250 input bits .",
    "the proof of theorem  [ thm : two - round - ub ] is now immediate from theorems  [ thm : kw - game ] , [ thm : appmaj - circuit ] and lemma  [ lem : reduction - to - maj ] , since @xmath5 is polynomial in @xmath0 .",
    "in this section , we present streaming algorithms that come close to the performance of the randomized off - line algorithm of radhakrishnan and srinivasan  @xcite .",
    "we first point out why this algorithm , as stated , can not be implemented with limited memory .",
    "next , we show how an alternative version can be implemented using a small amount of memory .",
    "this modified version , however , does return colorings that are not valid ( though it does this with small probability ) ; we show how by maintaining a small amount of additional information , we can derive an algorithm that returns and valid coloring with high probability or returns failure , but never returns an invalid coloring .    in order to describe our algorithms , it will be convenient to use @xmath268 to denote vertices in the hypergraph . also , in this section , we will explicitly use @xmath40 to denote the size of the vertex set @xmath21 , and @xmath65 to denote the number of hyperedges in the hypergraph .",
    "the vertex set of the hypergraph will be identified with @xmath269 $ ] , and @xmath38 will denote the number of bits required to represent a single vertex in @xmath21 .",
    "radhakrishnan and srinivasan  @xcite showed that by introducing delays in the recoloring step of an algorithm originally proposed by beck  @xcite one can two - color hypergraphs with more hyperedges than it was possible before .",
    "[ thm : radhakrishnan - srinivasan ] let @xmath1 be an @xmath0-uniform hypergraph with at most @xmath270 hyperedges .",
    "then @xmath4 is two - colorable ; also a proper two - coloring can be found with high probability in time @xmath271 .    input @xmath1 . for all @xmath272 ,",
    "independently set @xmath273 to @xmath274 or @xmath275 with probability @xmath276 .",
    "let @xmath277 be the set of hyperedges of @xmath4 , that are monochromatic under @xmath278",
    ".    for all @xmath272 , independently set @xmath279 to be @xmath280 with probability @xmath281 , and @xmath282 with probability @xmath283 .",
    "let @xmath284 be one of the @xmath285 permutations of @xmath21 , chosen uniformly at random .",
    "@xmath286 is obtained from @xmath287 by retaining the colors of all vertices except perhaps @xmath288 .",
    "if @xmath289 , and some hyperedge containing @xmath288 was monochromatic under @xmath278 and all its vertices still have the same color in @xmath287 , then @xmath290 is flipped to obtain @xmath291 .",
    "output @xmath292 .",
    "the term _ off - line _ refers to the fact that we expect all hyperedges to remain accessible throughout the algorithm .",
    "the term _ delayed recoloring _ refers to the fact that vertices are considered one after another , and are recolored only if the initially monochromatic edge they belonged to has not been set right by a vertex recolored earlier .    for a coloring @xmath103 ,",
    "let @xmath293 be the set of hyperedges that are colored entirely blue under @xmath103 , and let @xmath294 be the set of hyperedges colored entirely red under @xmath103 . in @xcite ,",
    "the following claims are established for this algorithm under the assumption that @xmath295 . in the following ,",
    "the parameter @xmath281 denotes the probability that the bit @xmath296 is set to @xmath280 in algorithm [ alg : off - line ] .",
    "@xmath297 & \\leq & \\frac{2}{10 } \\sqrt \\frac{{n}}{\\ln { n } } ( 1-p)^{n}\\label{ineq : staysmono } \\\\ \\pr[{\\cal b}(\\chi_f ) \\setminus { \\cal b}(\\chi_0 )   \\neq \\emptyset ]   & \\leq & \\frac{2{n}p}{100 \\ln { n } } ; \\label{ineq : becomesblue } \\\\ \\pr[{\\cal r}(\\chi_f )   \\setminus { \\cal r}(\\chi_0 ) \\neq \\emptyset ]   & \\leq & \\frac{2{n}p}{100 \\ln { n}}. \\label{ineq : becomesred}\\end{aligned}\\ ] ] the first inequality ( [ ineq : staysmono ] ) helps bound the probability that an initially monochromatic hyperedge does not change our attempts at recoloring ; the second inequality ( [ ineq : becomesblue ] ) considers the event where an initially non - blue hyperedge become blue because of recoloring ; the third inequality ( [ ineq : becomesred ] ) similarly refers to the event where an initially non - red hyperedge becomes red because of recoloring .",
    "these events together cover all situations where @xmath298 turns out to be invalid for @xmath4 .",
    "now , set @xmath299 so that we have @xmath300 thus , the above algorithm produces a valid two - coloring with probability at least @xmath276 .",
    "furthermore , since the entire graph is available in this off - line version , we can efficiently verify that the final coloring is valid . by repeating the algorithm @xmath301 times",
    ", we can ensure that the algorithm produces a valid coloring with probability at least @xmath302 , and declares failure otherwise ( but never produces an invalid coloring ) .",
    "[ [ implementation - in - the - streaming - model ] ] implementation in the streaming model : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now , suppose the hyperedges arrive one at a time , each hyperedge is a sequence of @xmath0 vertices , each represented using @xmath38 bits . in time @xmath303 per edge , we may extract all the vertices .",
    "the corresponding colors and bits for recoloring can be generated in constant time per vertex .",
    "generating the random permutation @xmath284 is a routine matter , we maintain a random permutation of the vertices received so far by inserting each new vertex at a uniformly chosen position in the current permutation ; using specialized data structure , the total time taken for generating @xmath284 is @xmath304 .",
    "overall , the the algorithms can be implemented in time @xmath305 ( the @xmath306 hides some @xmath307 factors ) .",
    "the space required is rather large because we explicitly store the hyperedges .",
    "observe , however , that we need store only the hyperedges that are monochromatic after the initial random coloring .",
    "thus , the algorithm can be implemented using @xmath308 bits of space on the average .",
    "the space and time requirements may then be considered acceptable , but this implementation does not allow us to determine if the coloring produced at the end is valid ; moreover , it is not clear how we may reduce the error probability by repetition . in the next section",
    ", we give an implementation that does not suffer from this deficiency .      in this section ,",
    "we modify the randomized streaming algorithm of the previous section so that it uses @xmath309 bits of space and takes time comparable to the off - line algorithm .",
    "this version maintains a running list of vertices as suggested above , but it assigns them colors immediately , and with the arrival of each edge decides if some of its vertices must be recolored .",
    "the algorithm is derived from the off - line algorithm .",
    "it maintains enough information to ensure that the actions of this streaming algorithm can somehow be placed in one - to - one correspondence with the actions of the off - line algorithm .",
    "input : the hypergraph @xmath1 as a sequence of hyperedges @xmath310 .",
    "read @xmath311 .",
    "set @xmath312 to @xmath274 or @xmath275 with probability @xmath276 . set @xmath279 to @xmath280 with probability @xmath281 and @xmath282 with probability @xmath283 .",
    "insert @xmath313 at a random position in @xmath284 .",
    "[ linegeneratechi ]",
    "let @xmath313 be the first vertex ( according to the current @xmath284 ) such that @xmath314 .",
    "flip @xmath315 .",
    "output @xmath292 .",
    "we wish to show that algorithm  [ alg : streaming ] succeeds in constructing a valid coloring with probability at least @xmath276 . to justify this",
    ", we compare the actions of this algorithm and the off - line delayed recoloring algorithm stated earlier , and observe that their outputs have the same distribution .",
    "recall that @xmath278 was the initial coloring generated in the algorithm  [ alg : off - line ] .",
    "let @xmath316 be the corresponding coloring for algorithm  [ alg : streaming ] : that is , let @xmath317 be the color @xmath313 was first assigned when the first hyperedge containing @xmath313 appeared in the input .",
    "similarly , let @xmath318 be the sequence of bits generated by the above algorithm , and @xmath319 be the final permutation of vertices that results .",
    "notice @xmath320 and @xmath321 have the same distribution .    in algorithm",
    "[ alg : off - line ] , once @xmath278 , @xmath322 and @xmath284 are fixed , the remaining actions are deterministic .",
    "that is , @xmath323 is a function of @xmath320 .",
    "similarly , once we fix ( i.e. , condition on ) @xmath321 , the final coloring @xmath324 is fixed .",
    "[ samecoloring ] for all @xmath103 , @xmath322 and @xmath284 , we have @xmath325 .",
    "suppose @xmath326 for some vertex @xmath313 .",
    "one of them must equal @xmath273 .",
    "we have two cases .",
    "suppose @xmath327 : : :    let us also assume that @xmath328 is a hyperedge that    necessitated @xmath313 s recoloring in the off - line algorithm .",
    "this implies that @xmath314 , and @xmath329 for    the vertices @xmath330 of @xmath328 that appeared before    @xmath313 in @xmath284 . now in the streaming algorithm    above , when @xmath328 is considered , we would find that    @xmath328 is monochromatic in @xmath278 , and flip    @xmath315 unless it is already flipped .",
    "once flipped , the    color of @xmath313 will not change again .",
    "thus ,    @xmath331a contradiction .",
    "suppose @xmath332 : : :    let @xmath328 be the hyperedge that necessitated the recoloring    of @xmath313 in the above streaming algorithm .",
    "this implies that    @xmath314 , and all vertices @xmath330 of    @xmath328 that appear before @xmath313 in permutation    @xmath284 have @xmath329 .",
    "but in such a situation ,    the original off - line algorithm will find @xmath328    monochromatic when @xmath313 is considered , and will flip its    color .",
    "thus , @xmath333a contradiction .",
    "we conclude that ( [ eq : offlineerror ] ) applies to algorithm  [ alg : streaming ] as well .",
    "let @xmath1 be an @xmath0-uniform hypergraph with at most @xmath334 hyperedges .",
    "then , with probability at least @xmath276 algorithm  [ alg : streaming ] produces a valid two - coloring for @xmath4 .",
    "note , however , algorithm  [ alg : streaming ] lacks the desirable property that it outputs only valid colorings . a straight - forward check does not seem possible using @xmath335 ram space .",
    "we show below that with carefully storing some vertices of a few hyperedges , we can in fact achieve this using only @xmath336 ram space .      as remarked before the events considered in inequalities ( [ ineq : staysmono ] )",
    ", ( [ ineq : becomesblue ] ) and ( [ ineq : becomesred ] ) cover all situations when the algorithm might return an invalid coloring .",
    "so , in order never to return an invalid coloring , it suffices to guard against these events .    1 .   to ensure that some vertex in every initially monochromatic hyperedge @xmath328 does change its color",
    ", we just need to verify that @xmath314 for some @xmath337 .",
    "this we can ensure by examining @xmath278 and @xmath322 just after they are generated in line  [ linegeneratechi ] of algorithm  [ alg : streaming ] .",
    "2 .   to ensure that no initially non - blue hyperedge @xmath328 has turned blue",
    ", we will will save the red vertices of @xmath328 whenever there is potential for them all turning blue , and guard against their turning blue .",
    "consider the hypergraph @xmath338 with hyperedges @xmath339 we will then verify that no hyperedge in @xmath338 is entirely blue in the end .",
    "3 .   to ensure that no initially non - red hyperedge @xmath328 has turned red , we consider the corresponding hypergraph @xmath340 with hyperedges @xmath341 and verify in the end that no hyperedge in @xmath340 is entirely red in the end .    it remains to show how @xmath338 and @xmath340 can be stored efficiently .",
    "each hyperedge will be stored separately by listing all its vertices .",
    "thus , the expected sum of the sizes of the hyperedges in @xmath338 is    @xmath342 & = &   \\sum_{h \\in e(h ) } 2^{-{n } } \\sum_{i=1}^{n}i { { n}\\choose i } { p}^i   \\\\ & \\leq &   |e|~ { n}p 2^{-{n } } \\sum_{i=0}^{{n}-1 } { { { n}-1 } \\choose { i-1 } } { p}^{i-1 } \\\\ & \\leq &   |e|~{n}p 2^{-{n } } ( 1+p)^{{n}-1}.\\end{aligned}\\ ] ]    clearly , the same bound applies to @xmath340 .",
    "we will choose the value of @xmath281 , so that with high probability @xmath343 and @xmath343 are both at most @xmath0 ( if either of them exceeds @xmath0 , the algorithm terminates with failure ) , while also ensuring that the right hand sides of ( [ ineq : staysmono ] ) , ( [ ineq : becomesblue ] ) and ( [ ineq : becomesred ] ) stay small .",
    "as before set @xmath344 . to the failures accounted for in ( [ eq : offlineerror ] ) , we must account for @xmath343 or @xmath343 exceeding @xmath0 .",
    "now , @xmath345",
    "\\leq \\frac{1}{10 } \\sqrt    \\frac{{n}}{\\ln { n } } \\frac{\\ln { n}}{2 } \\sqrt{\\frac{{n}}{\\ln { n } } } \\leq    \\frac{{n}}{20}$ ] , and by markov s inequality @xmath346 \\leq \\frac{1}{20}$ ] .",
    "similarly , @xmath347",
    "\\leq    \\frac{1}{20}$ ] .",
    "thus , the revised algorithm fails to deliver a valid coloring with probability at most @xmath348 , while it uses at most @xmath349 bits of space .",
    "the above results deal with the cases when a upper bound on the number of hyperedges of @xmath4 guarantees that it has a valid two - coloring . using the lovsz local lemma",
    "one can show that @xmath0-uniform hypergraphs where no hyperedge intersects more than @xmath350 others has a two - coloring  @xcite .",
    "note that this does not require a bound on the number of hyperedges of @xmath4 , but only one on the number of intersections of any one hyperedge with others .",
    "the algorithms of moser and tardos  @xcite can now be used to recover a valid two - coloring of @xmath4 . as in the previous case , though the algorithm a - priori requires access to the entire hypergraph in an offline fashion , we can modify it to adapt it to the streaming setting .",
    "the details are straightforward , and we omit them here to state only the result that derives from the parallel algorithm in @xcite .",
    "if each hyperedge of a hypergraph @xmath4 intersects at most @xmath351 other hyperedges , then a two - coloring of the hypergraph can be found by a streaming algorithm that makes at most @xmath352 passes over the input stream and uses space @xmath335 .",
    "compared to the moser - tardos algorithm , which works when the number of intersections is @xmath353 , this works only until intersections of up to @xmath354 .",
    "furthermore , note that it requires @xmath355 passes over the input stream , in contrast to previous algorithms that required just one pass .",
    "the upper bound @xmath47 was shown by erds by considering a random graph on @xmath19 vertices .",
    "we ask if hypergraphs with a comparable number of hyperedges but supported on fewer vertices ( perhaps @xmath356 ) can be non - two - colorable .",
    "we show that that the choice of @xmath19 above is essentially optimal .",
    "[ thm : fewvertices ] let @xmath357 be a parameter , and @xmath4 be an @xmath0-uniform hypergraph on @xmath5 vertices and @xmath6 hyperedges with @xmath358 vertices .",
    "then , a random two - coloring that partitions the vertex set into two almost equal color classes is a valid coloring with probability at least @xmath359 .",
    "the following corollary is obtained by setting @xmath360 .",
    "every @xmath0-uniform hypergraph with at most @xmath361 vertices and at most @xmath362 hyperedges is two - colorable .",
    "the corollary shows that erds construction of non - two - colorable hypergraphs having @xmath363 hyperedges on a vertex set of size @xmath364 is nearly optimal in terms of the number of vertices .",
    "suppose @xmath365 $ ] .",
    "consider the coloring @xmath103 obtained by partitioning @xmath366 $ ] into two roughly equal parts and coloring one part @xmath274 and the other part @xmath275 .",
    "every hyperedge has the same probability @xmath281 of being monochromatic under this coloring .",
    "the theorem will follow immediately from the claim below using a union bound .",
    "@xmath367 .",
    "proof of claim : if @xmath368 , then this probability is @xmath282 . in general , the probability that a hyperedge is monochromatic is @xmath369 we then have @xmath370 now , @xmath371 this shows that @xmath367 and concludes the proof of the claim .    to recover the statement of theorem  [ thm : fewvertices ] , we union - bound over the set of hyperedges , and observe that @xmath372 .    [",
    "[ a - streaming - algorithm ] ] a streaming algorithm : + + + + + + + + + + + + + + + + + + + + + +    theorem  [ thm : fewvertices ] ( more generally , proposition  [ prop : fewvertices ] at the end of this section for @xmath89-coloring ) gives rise to a straightforward randomized streaming algorithm for two - coloring ( @xmath89-coloring ) assuming that the number of vertices in the hypergraph is known in advance .",
    "for example , suppose we are given an @xmath0-uniform hypergraph on @xmath373 vertices and at most @xmath374 hyperedges .",
    "we just pick a random coloring @xmath103 that assigns colors red and blue to roughly the same number of vertices , and verify that no edge is monochromatic under @xmath103 .",
    "the algorithm uses @xmath375 bits of space , and returns a valid coloring with probability @xmath276 and fails otherwise .",
    "the probability of failure can be reduced to @xmath31 by running the algorithm @xmath376 times in parallel .",
    "we further examine the trade - off between the number of vertices and the number of hyperedges .",
    "let @xmath377 be the minimum number of hyperedges in a non - two - colorable hypergraph with @xmath13 vertices .",
    "note that when the number of vertices @xmath378 , _ every _",
    "@xmath0-uniform hypergraph is trivially two - colorable by any coloring that colors @xmath379 vertices blue and the rest red , and so we will take @xmath380 . the above proof ( of theorem  [ thm : verticesnontwocolorable](a ) ) shows : @xmath381    using arguments similar to those used by erds  @xcite , we will now obtain a comparable upper bound on @xmath377 .",
    "this makes the dependence of two - colorability on the vertex set - size explicit .",
    "suppose @xmath382 is an integer that is at least @xmath383 .",
    "then , there is an @xmath0-uniform hypergraph with @xmath250 vertices and @xmath384 hyperedges that is not two - colorable .",
    "thus , @xmath385",
    ".    our non - two - colorable @xmath0-uniform hypergraph will be obtained by picking the required number of hyperedges at random from @xmath386 $ ] .",
    "fix a coloring @xmath103 .",
    "then , a randomly drawn hyperedge is monochromatic with probability at least @xmath387    let @xmath4 be the hypergraph obtained by picking @xmath6 hyperedges uniformly and independently from @xmath388 \\choose { n}}$ ] . the probability that @xmath103 is valid for @xmath4 ( i.e. , none of its hyperedges is monochromatic under @xmath103 ) is at most @xmath389 since there are at most @xmath390 colorings , the probability that some coloring @xmath103 is valid for @xmath4 is at most @xmath391 if @xmath392 this quantity is less than @xmath280 .",
    "our claim follows from this .",
    "the above results can be generalized easily to @xmath89-colorings .",
    "let @xmath393 be the minimum number of hyperedges in a non-@xmath89-colorable hypergraph with at most @xmath13 ( @xmath394 ) vertices .",
    "we then have the following bounds ( we omit the proofs ) .",
    "[ prop : fewvertices ] @xmath395 .",
    "the lower bound we obtain on the space requirements of one - pass streaming algorithms is optimal ( up to @xmath37 ) factors .",
    "we present an efficient two - player two - round deterministic communication protocol for two - coloring @xmath0-uniform hypergraphs with up to @xmath396 hyperedges , but we do not know if there is a corresponding streaming algorithm . as mentioned in the introduction , it is easy to come up with a deterministic streaming algorithm that works in @xmath40 passes using the method of conditional expectations . even in the two - player communication setting",
    "it would be interesting to determine if the protocol can accommodate up @xmath397 hyperedges , perhaps even @xmath398 hyperedges .",
    "our two - coloring algorithm for hypergraphs with @xmath399 vertices does not improve on the bound provided via the delayed recoloring algorithm when @xmath50 is small , say , @xmath400 . we believe it should be possible to combine our argument and the delayed recoloring algorithm to show that if the number of vertices is @xmath49 then we can two - color hypegraphs with strictly more than @xmath46 hyperedges .",
    "s. shannigrahi .",
    "coloring , embedding , compression and data structure problems on uniform hypergraphs _ ph.d .",
    "thesis , school of technology and computer science , tata institute of fundamental research , 2011_.        n. alon , y. matias and m. szegedy .",
    "the space complexity of approximating the frequency moments . _ proceedings of the twenty - eighth annual acm symposium on theory of computing ( stoc 96 ) pages 20 - 29 , 1996 .",
    "_                      joan feigenbaum , sampath kannan , andrew mcgregor , siddharth suri , jian zhang .",
    "_ on graph problems in a semi - streaming model _ , proc .",
    "31st international colloquium on automata , languages and programming , ( icalp ) , v. 3182 : 531 - 543 , 2004 ."
  ],
  "abstract_text": [
    "<S> we consider space - efficient algorithms for two - coloring @xmath0-uniform hypergraphs @xmath1 in the streaming model , when the hyperedges arrive one at a time . </S>",
    "<S> it is known that any such hypergraph with at most @xmath2 hyperedges has a two - coloring  @xcite , which can be found deterministically in polynomial time , if allowed full access to the input .    </S>",
    "<S> * let @xmath3 be the minimum space used by a deterministic ( one - pass ) streaming algorithm that on receiving an @xmath0-uniform hypergraph @xmath4 on @xmath5 vertices and @xmath6 hyperedges @xmath7 , produces a proper two - coloring of @xmath4 . we show that @xmath8 . </S>",
    "<S> * let @xmath9 be the minimum space used by a randomized ( one - pass ) streaming algorithm that on receiving an @xmath0-uniform hypergraph @xmath4 on @xmath5 vertices and @xmath6 hyperedges with high probability produces a proper two - coloring of @xmath4 ( or declares failure ) . </S>",
    "<S> we show that @xmath10 . * </S>",
    "<S> we show that for any @xmath11 , @xmath12 ; in particular , this shows that every @xmath0-uniform hypergraph with at most @xmath13 vertices and @xmath14 hyperedges is two - colorable .    </S>",
    "<S> the above results are inspired by the study of the number @xmath15 , the minimum possible number of hyperedges in a @xmath0-uniform hypergraph that is _ not _ two - colorable . </S>",
    "<S> it is known that @xmath16 and @xmath17 . </S>",
    "<S> the lower bound ( due to radhakrishnan and srinivasan  @xcite ) has a corresponding algorithm to deterministically produce the two - coloring ; the upper bound due to erds is obtained by picking about @xmath18 hyperedges randomly from a vertex set of @xmath19 vertices . </S>",
    "<S> our first result shows that no efficient deterministic streaming algorithm can match the performance of the algorithm in  @xcite ; the second result shows that there is , however , an efficient randomized algorithm for the task ; the third result shows that that if the number of vertices is substantially smaller than @xmath19 , then every non - two - colorable hypergraph has significantly more than @xmath18 hyperedges . </S>"
  ]
}