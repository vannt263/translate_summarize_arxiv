{
  "article_text": [
    "the backpressure routing and scheduling paradigm has emerged from the pioneering work @xcite , @xcite , which showed that , in wireless networks where nodes route and schedule packets based on queue backlog differences , one can stabilize the queues for any feasible traffic .",
    "this seminal idea has generated a lot of research interest .",
    "moreover , it has been shown that backpressure can be combined with flow control to provide utility - optimal operation @xcite .",
    "the strengths of these techniques have recently increased the interest in practical implementation of the backpressure framework over wireless networks as summarized in section  [ sec : related ] .",
    "one important practical problem that remains open , and is the focus of this paper , is the performance of backpressure with transmission control protocol ( tcp ) flows .",
    "tcp is the dominant transport protocol in the internet today and is likely to remain so for the foreseeable future .",
    "therefore , it is crucial to exploit throughput improvement potential of backpressure routing and scheduling for tcp flows .",
    "however , tcp flows are not compatible with backpressure .",
    "their joint behavior is so detrimental that some flows may never get a chance to transmit . to better illustrate this point",
    ", we first discuss the operation of backpressure in the following example .",
    "[ fig : intro_example ]    [ ex1 ] let us consider fig .",
    "[ fig : intro_example ] , which shows an example one - hop downlink topology consisting of a transmitter node @xmath0 , and two receiver nodes ; @xmath1 and @xmath2 .",
    "the two flows ; @xmath3 and @xmath4 are destined to @xmath1 and @xmath2 , respectively . @xmath5 and @xmath6 are per - flow queue sizes at time @xmath7 .",
    "let us focus on fig .",
    "[ fig : intro_example](a ) . at time @xmath7",
    ", packets from the two flows arrive according to random arrival rates ; @xmath8 and @xmath9 , respectively .",
    "the packets are stored in per - flow queues .",
    "the backpressure scheduling algorithm , also known as max - weight scheduling , determines the queue ( hence the flow ) from which packets should be transmitted at time @xmath7 .",
    "the decision is based on queue backlog differences , _",
    "@xmath10 and @xmath11 , where @xmath12 and @xmath13 are per - flow queue sizes at @xmath1 and @xmath2 , respectively . since @xmath1 and @xmath2 are the destination nodes , the received packets are immediately passed to the higher layers , so @xmath14 , @xmath15 .",
    "therefore , the scheduling algorithm makes the scheduling decision based on @xmath5 and @xmath6 .",
    "in particular , the scheduling decision is @xmath16 such that @xmath17 . note that a packet(s ) from flow @xmath18 is transmitted at time @xmath7 .",
    "it was shown in @xcite , @xcite that if the arrivals rates @xmath8 and @xmath9 are inside the stability region , the scheduling algorithm stabilizes the queues .",
    "note that the arrival rates @xmath8 and @xmath9 are independent from the scheduling decisions , _",
    "i.e. , _ the scheduling decisions do not affect @xmath8 and @xmath9 . however , this is not true if the flows are regulated by tcp as explained next.@xmath19    the fundamental goal of tcp , which applies to all tcp variants , is to achieve as much bandwidth as possible while maintaining some level of long - term rate fairness across competing flows . by their very design ,",
    "all tcp algorithms ( both the widely employed loss - based versions and the delay - based ones ) have their own `` clock '' , which relies on end - to - end acknowledgement ( ack ) packets .",
    "based on the received acks , tcp determines whether and how many packets should be injected into the network by updating its window size .",
    "_ example 1 - continued : _ let us consider fig .",
    "[ fig : intro_example](b ) to illustrate the interaction of backpressure and tcp . in fig .",
    "[ fig : intro_example](b ) , packet arrivals are controlled by tcp .",
    "let us consider that loss - based tcp flavor , _",
    "e.g. , _ tcp - reno or tcp - sack , is employed .",
    "assume that at time @xmath7 , the tcp congestion window size of the first flow , _",
    "@xmath20 , is small , _",
    "e.g. , _ @xmath21 segment , ( note that 1-segment window size may be seen at the beginning of a connection or after a re - transmit timeout ) ,",
    "while the tcp congestion window size of the second flow is @xmath22 ( _ e.g. , _ it may be the case that flow 2 has been transmitting for some time until @xmath7 , and it has already increased its window size ) . as depicted in the figure , the example queue occupancies at time @xmath7 are @xmath23 and @xmath24 .",
    "since , @xmath25 , a packet(s ) from the second flow is transmitted .",
    "@xmath2 receives the transmitted packet , and passes it to tcp .",
    "tcp generates an ack , and transmits it back to node @xmath0 .",
    "tcp source of flow @xmath4 at node @xmath0 increases window size after receiving an ack .",
    "therefore , more packets are passed to @xmath6 . on the other hand ,",
    "since @xmath26 , no packets are transmitted from flow @xmath3 .",
    "thus , tcp does not receive any acks for the @xmath3st flow , does not increase its window size , and no ( or sporadic ) new packets are passed to @xmath5 .",
    "eventually , the size of @xmath5 almost never increases , so no packets are transmitted from flow @xmath3 .",
    "possible sample paths showing the evolution of @xmath27 and @xmath28 as well as @xmath29 and @xmath30 over time are shown in fig .",
    "[ fig : window_queue_evolution ] . as can be seen , the joint behavior of tcp and backpressure is so detrimental that flow @xmath3 does not get any chance to transmit .",
    "we confirm this observation via simulations in section  [ sec : performance].@xmath19    the incompatibility of backpressure is not limited to the loss - based versions of tcp .",
    "the delay - based tcp flavors , _",
    "e.g. , _ tcp vegas is also incompatible with backpressure , as tcp - vegas has its own clock , which relies on end - to - end ack packets to calculate round - trip - times ( rtts ) .",
    "if some packets are trapped in buffers due to backpressure as in the above example , sporadic or no ack packets are received .",
    "this increases rtts , and reduces end - to - end rate of tcp vegas as there is inverse relationship between rtt and rate .",
    "furthermore , backpressure leads to timeouts which reduce the end - to - end rate in both loss - based and delay - based tcp versions , including new tcp versions ; tcp - compound @xcite and tcp - cubic @xcite .    in this paper ,",
    "we propose `` tcp - aware backpressure '' that helps tcp and backpressure operate in harmony .",
    "in particular , tcp - aware backpressure takes into account the behavior of tcp flows , and gives transmission opportunity to flows with short queues .",
    "this makes all tcp flows transmit their packets , so the tcp clock , which relies on packet transmissions and end - to - end acks , continues to operate .",
    "furthermore , the throughput of tcp flows improves by exploiting the performance of the backpressure routing and scheduling .",
    "we note that backpressure introduces additional challenges when combined with tcp such as out of order delivery , high jitter rtts , and packet losses due to corruption over wireless links .",
    "however , these challenges are not specific to backpressure , and exist when a multiple path routing scheme over wireless networks is combined with tcp .",
    "we address these challenges by employing network coding ( in section  [ sec : algs ] ) .",
    "yet , the main focus of this paper is the incompatibility of tcp and backpressure and developing a tcp - aware backpressure framework .",
    "the following are the key contributions of this work :    * we identify the mismatch between tcp and the backpressure framework ; _ i.e. , _ their joint behavior is so detrimental that some flows may never get a chance to transmit . in order to address the mismatch between tcp and backpressure",
    ", we develop `` tcp - aware backpressure routing and scheduling '' . *",
    "we show that ( i ) tcp - aware backpressure routing and scheduling stabilizes queues for any feasible traffic as the classical backpressure @xcite , @xcite , ( ii ) tcp - aware backpressure routing and scheduling provides the same utility - optimal operation guarantee when combined with a flow control algorithm as the classical backpressure @xcite . *",
    "we provide implementation details and explain how to tune tcp - aware backpressure in practice so that it complies with tcp .",
    "moreover , we combine network coding and tcp - aware backpressure to address the additional challenges such as out of order delivery , packet loss , and jitter .",
    "thanks to employing network coding , which makes tcp flows sequence agnostic ( with respect to packet ids ) , tcp - aware backpressure fully complies with tcp .",
    "* we evaluate our schemes in a multi - hop setting , using ns-2 @xcite .",
    "the simulation results ( i ) confirm the mismatch of tcp and backpressure , ( ii ) show that tcp - aware backpressure is compatible with tcp , and significantly improves throughput as compared to existing adaptive routing schemes , ( iii ) demonstrate that tcp - aware backpressure provides fairness across competing tcp flows .",
    "the structure of the rest of the paper is as follows .",
    "section  [ sec : system ] gives an overview of the system model .",
    "section  [ sec : opt ] presents tcp - aware backpressure design and analysis .",
    "section  [ sec : algs ] presents the implementation details of tcp - aware backpressure as well as its interaction with tcp .",
    "section  [ sec : performance ] presents simulation results .",
    "section  [ sec : related ] presents related work .",
    "section  [ sec : conclusion ] concludes the paper .",
    "we consider a general network model presented in fig .",
    "[ fig : main - example ] , where flows may originate from a source in the internet and traverse multiple hops to reach their destination in a wireless network . an end - to - end tcp connection is set up for each flow .",
    "our goal in this paper is to develop tcp - aware backpressure routing and scheduling algorithms that operate in the wireless network . in this direction , we first develop our algorithms using the lyapunov optimization framework ( which is presented in section  [ sec : opt ] ) by taking into account the incompatibility of tcp and classical backpressure . in this section , we provide an overview of the system model and assumptions that we use to develop the tcp - aware backpressure .",
    "note that the interaction and implementation of tcp - aware backpressure routing and scheduling with actual tcp flows are presented in section  [ sec : algs ] .",
    "_ wireless network setup : _ the wireless network consists of @xmath31 nodes and @xmath32 links , where @xmath33 is the set of nodes and @xmath34 is the set of links in the network . in this setup , each wireless node is able to perform routing and scheduling .",
    "let @xmath35 be the set of unicast flows between source - destination pairs in the network.we consider in our formulation and analysis that time is slotted , and @xmath7 refers to the beginning of slot @xmath7 .    _ channel model : _ at slot @xmath7 , @xmath36 @xmath37 @xmath38 @xmath39 @xmath40 is the channel state vector , where @xmath41 represents the edges such that @xmath42 , @xmath43 and @xmath44 . for the sake of analysis",
    ", we assume that @xmath45 is the state of link @xmath41 at time @xmath7 and takes values from the set @xmath46 according to a probability distribution which is i.i.d . over time slots . if @xmath47 , packets can be transmitted with rate @xmath48 .",
    "otherwise ; ( _ i.e. , _ if @xmath49 ) , no packets are transmitted .",
    "note that our analysis can be extended to more general channel state models @xcite .",
    "we also consider a rayleigh fading model in our simulations .",
    "let @xmath50 denote the set of the link transmission rates feasible at time slot @xmath7 and for channel state @xmath36 and interference among wireless links .",
    "in particular , at every time slot @xmath7 , the link transmission vector @xmath51 should be constrained such that @xmath52 @xmath53 .",
    "hence , @xmath54 takes a value from the set @xmath55 depending on the channel state and interference among multiple wireless nodes .",
    "also note that @xmath52 is determined by the scheduling algorithm .",
    "_ stability region : _ let @xmath56 be the vector of arrival rates @xmath57 .",
    "the network stability region @xmath58 is defined as the closure of all arrival rate vectors that can be stably transmitted in the network , considering all possible routing and scheduling policies @xcite , @xcite , @xcite .",
    "@xmath58 is fixed and depends only on channel statistics and interference .    _",
    "flow rates and queue evolution : _ each flow @xmath59 is generated at its source node according to an arrival process @xmath60 , @xmath57 at time slot @xmath7 .",
    "the arrivals are i.i.d . over the slots and @xmath61",
    "$ ] , @xmath57 .",
    "we assume that @xmath62 $ ] and @xmath63 $ ] are finite .",
    "note that we make i.i.d .",
    "arrivals assumption for the purpose of designing and analyzing our algorithms in the lyapunov optimization framework .",
    "this assumption is relaxed in the practical setup when we combine our algorithms with tcp flows in section  [ sec : algs ] .",
    "each node @xmath64 constructs a per - flow queue @xmath65 for each flow @xmath59 .",
    "the size of the per - flow queue @xmath65 at time @xmath7 is @xmath66 .",
    "let @xmath67 be the source node of flow @xmath68 .",
    "the packets generated according to the arrival process @xmath60 are inserted in the per - flow queue at node @xmath67 , _",
    "i.e. , _ in @xmath69 . these queues only store packets from flow @xmath59 . each node @xmath64",
    "such that @xmath70 and @xmath71 , may receive packets from its neighboring nodes and insert them in @xmath65 .",
    "the transmission rate of flow @xmath68 from node @xmath64 to node @xmath72 is @xmath73 .",
    "since the link transmission rate over link @xmath74 is @xmath75 at time @xmath7 , multiple flows could share the available rate , _ i.e. , _ @xmath76 . accordingly , at every time slot @xmath7 , the size of per - flow queues , _",
    "i.e. , _ @xmath66 evolves according to the following dynamics .",
    "@xmath77 + \\sum_{j \\in { \\mathcal{n } } } f_{j , i}^{s}(t ) \\nonumber \\\\ & + a_{s}(t)1_{[i = o(s)]},\\end{aligned}\\ ] ] where @xmath78}$ ] is an indicator function , which is @xmath3 if @xmath79 , and @xmath80 , otherwise .",
    "note that eq .",
    "( [ eq : queue_u ] ) is inequality , because the number of packets in the queue @xmath81 may be less than @xmath82 .",
    "in this section , we design and analyze the tcp - aware backpressure scheme . in particular , we provide a stochastic control strategy including routing and scheduling to address the incompatibility between tcp and classical backpressure .    * *    * * routing & intra - node scheduling . * the routing & intra - node scheduling part of tcp - aware backpressure determines a flow @xmath68 from which packets should be transmitted at slot @xmath7 from node @xmath64 , as well as the next hop node @xmath72 to which packets from flow @xmath68 should be forwarded .",
    "the algorithm works as follows",
    ". + node @xmath64 observes per - flow queue backlogs in all neighboring nodes at time @xmath7 , and determines queue backlog difference according to : @xmath83 where @xmath84 is a non - negative finite constant .",
    "let @xmath42 s.t .",
    "@xmath85 and @xmath86 . the maximum queue backlog difference among all flows over link @xmath87 is ; @xmath88 } \\ { d_{l}^{s}(t ) \\}.    \\end{aligned}\\ ] ] the flow that maximizes the queue backlog differences over link @xmath41 is @xmath89 and expressed as ; @xmath90 } \\ { d_{l}^{s}(t ) \\}.    \\end{aligned}\\ ] ] at time slot @xmath7 , one or more packets are selected from the queue @xmath91 if @xmath92 @xmath93 @xmath80 and @xmath91 has enough packets for transmission .",
    "the transmission of the selected packets depends on the channel conditions and interference constraints , and determined by inter - node scheduling .",
    "+ note that tcp - aware backpressure uses queue backlog difference @xmath94 in eq .",
    "( [ eq : per_flow_difference ] ) instead of @xmath95 in the classical backpressure . the advantage of using eq .",
    "( [ eq : per_flow_difference ] ) in tcp - aware backpressure is that node @xmath64 may select packets from flow @xmath68 even if queue size @xmath66 is small . instead of",
    "@xmath66 has been considered in the literature @xcite .",
    "although place - holder algorithms are beneficial to improve end - to - end delay , they do not solve the problem we consider in this paper as they do not give transmission opportunity to small queues .",
    "] this advantage is clarified through an illustrative example later in this section . *",
    "* inter - node scheduling .",
    "* the inter - node scheduling ( as also called resource allocation @xcite ) part of tcp - aware backpressure determines link transmission rates considering the link state information and interference constraints .",
    "+ each node @xmath64 observes the channel state @xmath36 at time @xmath7 , and determines a transmission vector @xmath96 @xmath97 by maximizing @xmath98 .",
    "note that @xmath52 should be constrained such that @xmath99 , _",
    "i.e. , _ interference among multiple nodes should be taken into account .",
    "the resulting transmission rate @xmath100 is used to transmit packets of flow @xmath89 over link @xmath41 .",
    "[ theorem1 ] if channel states are i.i.d . over time slots ,",
    "the arrival rates @xmath101 , @xmath57 are interior to the stability region @xmath58 , and @xmath84 is a non - negative finite constant , then tcp - aware backpressure stabilizes the network and the total average queue size is bounded .    _",
    "proof : _ the proof is provided in appendix a. @xmath19    [ ex2 ] let us consider again fig .  [",
    "fig : intro_example](b ) for the operation of tcp - aware backpressure .",
    "the example queue occupancies at time @xmath7 are @xmath23 and @xmath24 .",
    "assume that @xmath84 in eq .",
    "( [ eq : per_flow_difference ] ) is chosen as @xmath102 . according to tcp - aware backpressure",
    ", the scheduling algorithm makes a decision based on the rule @xmath103 @xmath104 such that @xmath17 . since @xmath105 @xmath106 @xmath107 @xmath108 , @xmath109 , both flows get equal chance for transmission .",
    "thus , congestion window sizes of both tcp flows evolve in time , and the tcp flows can transmit their packets .",
    "we note that one can extend this example for the case ; @xmath110 and @xmath111 . in this case , as @xmath102 , packets from the first flow may not get any chance for transmission .",
    "therefore , it is crucial to determine @xmath84 in practice , which we explain in section  [ sec : algs ] .",
    "@xmath19    note that we propose tcp - aware backpressure ; its routing , intra - node scheduling , and inter - node scheduling parts to work with tcp and tcp s end - to - end flow control mechanism . in the next section ,",
    "we provide implementation details .",
    "however , tcp - aware backpressure can also be combined with flow control schemes other than tcp s , which is important for two reasons : ( i ) it may be possible or preferable to use personalized flow control mechanisms instead of tcp s in some systems , ( ii ) there may be both tcp and non - tcp flows in some systems , where a tcp - friendly flow control mechanism combined with non - tcp flows is crucial to accommodate both tcp and non - tcp flows .",
    "we consider the following flow control algorithm , developed in @xcite , to complement tcp - aware backpressure for non - tcp flows .",
    "the flow control algorithm at node @xmath64 determines the number of packets from flow @xmath68 that should be passed to the per - flow queues ; @xmath65 at every time slot @xmath7 according to ;    @xmath112 } [ mg_{s}(x_s(t ) ) -   u_{i}^{s}(t ) x_{s}(t ) ] \\nonumber \\\\ \\mbox{s.t . } &   \\sum_{[s \\in { \\mathcal{s}}| i = o(s ) ] } x_{s}(t ) \\leq r_{i}^{max}\\end{aligned}\\ ] ]    where @xmath113 is a constant larger than the maximum outgoing rate from node @xmath64 , @xmath114 is a positive constant , @xmath115 is the rate of packets that will be inserted to the per - flow queue @xmath65 , and @xmath116 is the utility function of flow @xmath68 .",
    "[ theorem2 ] if there are only non - tcp flows in the system and they employ the flow control algorithm in eq .",
    "( [ eq : flow_control ] ) and tcp - aware backpressure ( with non - negative finite value of @xmath84 in eq .",
    "( [ eq : per_flow_difference ] ) ) , then the admitted flow rates converges to the utility optimal operating point ( as the classical backpressure ) in the stability region @xmath58 with increasing @xmath114 .",
    "_ proof : _ the proof of theorem  [ theorem2 ] directly follows when appendix a and drif+penalty approach @xcite are combined .",
    "we present practical implementation details of tcp - aware backpressure as well as its interaction with different layers in the protocol stack ( summarized in fig .  [",
    "fig : protocol_stack ] ) .",
    "[ fig : protocol_stack ]        the inter - node scheduling part of tcp - aware backpressure determines which links should be activated at time @xmath7 .",
    "the inter - node scheduling is a hard problem , @xcite , @xcite , so its practical implementation is challenging .",
    "therefore , we implement its low complexity version in our system on top of ieee 802.11 mac as seen in fig .  [",
    "fig : protocol_stack ] .",
    "the implementation details are as follows .",
    "each node uses 802.11 mac to access the wireless medium .",
    "when a node @xmath64 is assigned a channel by the mac protocol , inter - node scheduling determines the neighboring node to which a selected packet should be forwarded .",
    "let us assume that a packet is selected from flow @xmath117 to be forwarded to node @xmath72 by the routing and intra - node scheduling algorithm , which we explain later in this section .",
    "the next hop that the selected packet should be forwarded is @xmath118 and determined by @xmath119 , where @xmath120 and @xmath121 are the estimated values of @xmath122 ( loss probability ) and @xmath48 ( link transmission rate ) over link @xmath123 , respectively .",
    "is calculated as one minus the ratio of successfully transmitted packets over all transmitted packets during a time interval @xmath124 on link @xmath41 .",
    "@xmath121 is calculated as the average of the recent ( over an interval ) link rates over link @xmath41 . ]",
    "then , a packet from flow @xmath125 , _",
    "i.e. , _ from the network layer queue @xmath126 , is removed and passed to the mac layer for transmission .",
    "the mac layer transmits the packet to node @xmath118 .",
    "this algorithm determines the next hop(s ) to which packets should be forwarded , and the packets that should be transmitted .",
    "we construct per - flow queues , _",
    "i.e. , _ @xmath65 , at the network layer , where the routing and intra - node scheduling algorithm operates as seen in fig .",
    "[ fig : protocol_stack ] .",
    "the algorithm requires each node to know the queue size of their neighbors . to achieve this ,",
    "each node @xmath64 transmits a message containing the size of its per - flow queue sizes ; @xmath127 at time @xmath7 .",
    "these messages are piggy - backed to data packets .",
    "if there is no data transmission for some time duration , our algorithm uses independent control packets to exchange the queue size information .",
    "the transmitted message is overheard by all nodes in the neighborhood .",
    "the queue size information is extracted from the overheard messages and recorded for future decisions .    at node @xmath64 at time @xmath7 , the queue backlog difference is calculated according to eq .",
    "( [ eq : per_flow_difference ] ) .",
    "note that , although the algorithm exactly knows @xmath66 at time @xmath7 , it is difficult to exactly know @xmath81 at time @xmath7 .",
    "therefore , the most recent report ( until time @xmath7 ) of the size of @xmath128 is used instead of @xmath81 . when a transmission opportunity for link @xmath74 arises using inter - node scheduling algorithm , a packet from flow @xmath117 is selected and passed to the mac layer for transmission .      out of order delivery ,",
    "high jitter in rtts , and packet losses over wireless links are among the challenges when backpressure and tcp are combined .",
    "we address these challenges by employing network coding @xcite , @xcite , @xcite .",
    "this is an effective solution thanks to the properties of network coding such as masking wireless losses and making packets sequence agnostic in terms of packet ids .",
    "we summarize our implementation in the following .",
    "we implement the generation based network coding @xcite at the edge points of the wireless network ( _ e.g. , _ access point , base station , proxy , or tcp source itself ) as a slim network coding layer ( nc layer ) above the network layer as shown in fig .",
    "[ fig : protocol_stack ] . note that we do not make any updates to tcp , which makes our approach amenable to practical deployment .",
    "the nc layer at the edge point receives and packetizes the data stream into packets @xmath129 of flow @xmath59 .",
    "the stream of packets are divided into blocks of size @xmath130 , which is set to tcp congestion window size ( or its average ) .",
    "the packets within the same block are linearly combined ( assuming large enough field size ) to generate @xmath130 network coded packets ; @xmath131 , @xmath132 , @xmath133 , @xmath134 , where @xmath135 , @xmath136 are network coding coefficients from a finite field .",
    "note that network coded packets are generated incrementally to avoid coding delay @xcite , @xcite .",
    "the nc layer adds network coding header including block i d , packet i d , block size , and coding coefficients . the network coded packets are routed and scheduled by tcp - aware backpressure .    at the receiver node ,",
    "when the nc layer receives a packet from a new block , it considers the received packet as the first packet in the block .",
    "it generates an ack , sends the ack back to the nc layer at the edge point , which matches this ack to packet @xmath137 , converts this ack to @xmath137 s ack , and transmits the ack information to the tcp source .",
    "similarly , acks are generated at the receiver side for the second , third , etc .",
    "received packets .",
    "as long as the nc layer at the receiver transmits acks , the tcp clock moves , and the window continues to advance .",
    "the nc layer stores the received network coded packets in a buffer .",
    "when the last packet from a block is received , packets are decoded and passed to the application layer . if some packets are lost in the wireless network , the receiver side nc layer makes a request with the block i d and the number of missing packets , and the edge point side nc layer generates additional network coded packets from the requested block , and sends to the receiver .",
    "note that the missing packet ids are not mentioned in the request , since the network coding makes the packets sequence agnostic in terms of packet ids .",
    "network coding makes packets sequence agnostic , which solves out of order delivery problem and eliminates jitter .",
    "network coding also corrects packet losses in the wireless network as explained above .",
    "we explain how our system and nc layer reacts to congestion - based losses later in this section .",
    "now , let us consider the interaction of tcp congestion control and tcp - aware backpressure using well - known classical tcp analysis @xcite , @xcite . using the similar approach as in @xcite , @xcite , and",
    "as detailed in @xcite , we find the steady state tcp throughput for flow @xmath68 as ; @xmath138 , where @xmath139 is the buffer overflow probability at the tcp source / edge node @xmath67 , and @xmath140 is constant rtt .",
    "note that the steady state tcp throughput depends on the buffer overflow probability only at the source / edge node different from @xcite , @xcite , where tcp throughput depends on the buffer overflow probability over all nodes over the path of tcp flow . ) .",
    "this does not hold for classical backpressure , because some packets may be trapped in buffers , which reduces tcp throughput , and should be taken into account in the steady state tcp throughput analysis . ]",
    "the reason is that congestion in the wireless network is controlled by tcp - aware backpressure , and we do not expect losses due to congestion ( buffer overflow ) at the intermediate nodes .",
    "in particular , as tcp - aware backpressure makes transmission decisions based on queue backlog differences according to eq .",
    "( [ eq : per_flow_difference ] ) , it would not transmit packets if the next hop queue is congested .",
    "therefore , congestion - based losses only occur at the source / edge node . in our implementation , if the buffer at the source / edge node is congested , than a packet from the flow which has the largest queue size is dropped .",
    "this congestion - based loss information is passed to the nc layer .",
    "the nc layer creates a loss event by not masking the dropped packet so that tcp can detect the congestion - based loss event and back - off .",
    "tcp - aware backpressure uses queue backlog difference in eq .",
    "( [ eq : per_flow_difference ] ) , which depends on @xmath84 , to make routing and scheduling decisions . as noted in section  [ sec : opt ] ,",
    "the selection of @xmath84 is crucial in practice to make tcp and backpressure fully comply .    in particular , if @xmath84 is selected too small , the number of packets that are trapped in the buffers , _",
    "i.e. , _ the number of packets that do not get transmission opportunity , increases .",
    "this reduces tcp throughput . on the other hand ,",
    "if @xmath84 is too large , tcp - aware backpressure may not exploit the throughput improvement benefit of backpressure routing and scheduling as the ability of identifying good routing and scheduling policies reduces with large @xmath84 values .",
    "our intuition is that flows passing through node @xmath64 , _",
    "@xmath141 , should share the available buffer fairly .",
    "assume that @xmath142 is the available buffer size at node @xmath64 . in order to give transmission opportunity to all tcp flows and",
    "provide some level of fairness across the competing tcp flows , we set @xmath143 at node @xmath64 . in this",
    "setting , if per - flow queue sizes are smaller than @xmath84 , it is highly possible that packets from all tcp flows are transmitted . on the other hand ,",
    "if some per - flow queue sizes are larger than @xmath84 , packets from the flows with smaller queue sizes may still be trapped in the buffers . however , in this case , since the total buffer occupancy is large , buffer overflow probability at the source / edge node increases . upon buffer overflow",
    ", the tcp flow with larger queue size reduces its rate ( since upon congestion a packet from the largest per - flow queue is dropped ) .",
    "this reduces the queue sizes , and packets from all flows could be transmitted again .",
    "_ example 2 - continued : _ let us consider again fig .",
    "[ fig : intro_example](b ) . if the queue occupancies are @xmath110 , @xmath111 , and @xmath102 , packets only from the second flow are transmitted . since @xmath102 and",
    "we set @xmath144 , and @xmath145 , the buffer size is @xmath146 .",
    "the total queue occupancy is @xmath147 .",
    "this means that the buffer at node @xmath0 is about to overflow , which will lead to back - off for the second flow ( since a packet from the largest queue will be dropped ) .",
    "thus , the tcp rate and queue size of the second flow will reduce , and the first flow will get transmission opportunity .",
    "we have observed through simulations that tcp - aware backpressure , when @xmath84 is set to @xmath148 , significantly reduces the number of the trapped packets in the buffers .",
    "yet , very few packets may still be trapped .",
    "such packets are easily masked thanks to error correction capabilities of network coding .",
    "note that network coding does not help if large number of packets are trapped in the buffers ( _ e.g. , _ when @xmath84 is selected too small ) , as large number of trapped packets increases end - to - end delay too much , which leads to multiple timeouts and reduces tcp throughput .",
    "we simulate our scheme , tcp - aware backpressure ( tcp - aware bp ) as well as classical backpressure ( classical bp ) , in ns-2 @xcite .",
    "the simulation results ; ( i ) confirm the mismatch of tcp and classical bp , ( ii ) show that tcp - aware bp is compatible with tcp , and significantly improves throughput as compared to existing routing schemes such as ad - hoc on - demand distance vector ( aodv ) @xcite , ( iii ) demonstrate that tcp - aware bp provides fairness across competing tcp flows .",
    "next , we present the simulator setup and results in detail .    [",
    "fig : topologies ]      we consider three topologies : a tree topology , a diamond topology , and a grid topology shown in fig .",
    "[ fig : topologies ] .",
    "the nodes are placed over @xmath149 terrain , and @xmath150 , @xmath151 and @xmath1 , @xmath2 are possible source - receiver pairs in the tree and diamond topologies . in the grid topology ,",
    "@xmath152 cells are placed over a @xmath153 terrain .",
    "a gateway , which is connected to the internet , passes flows to nodes .",
    "each node communicates with other nodes in its cell or neighboring cells , and there are @xmath154 nodes randomly placed to the cells .",
    "we consider ftp / tcp traffic , and employ tcp - sack and tcp - vegas in our simulations .",
    "tcp flows start at random times within the first @xmath155 of the simulation and are on until the end of the simulation which is @xmath156 .",
    "ieee 802.11b is used in the mac layer . in terms of wireless channel",
    ", we simulated the two - ray path loss model and a rayleigh fading channel with average loss rates @xmath157.channel capacity is @xmath158 , the buffer size at each node is set to @xmath159 packets , packet sizes are set to @xmath160 .",
    "we have repeated each @xmath156 simulation for 10 seeds .",
    "we compare our scheme , tcp - aware bp , to the classical bp and aodv . for fair comparison",
    ", we employ the network coding mechanism explained in section  [ sec : algs ] in the classical bp as well as in aodv .",
    "the comparisons are in terms of per - flow and total transport level throughput ( added over all flows ) as well as fairness . for the fairness calculation",
    ", we use jain s fairness index @xcite : @xmath161 , where @xmath35 is the set of flows and @xmath162 is the average throughput of flow @xmath68 .      fig .",
    "[ fig : tree_thrpt_time_results ] shows throughput vs. time graphs for tcp - aware bp and classical bp .",
    "there are two flows ; flow 1 is transmitted from node @xmath163 to node @xmath164 , and flow 2 is transmitted from node @xmath163 to node @xmath165 .",
    "the links are not lossy .",
    "[ fig : tree_thrpt_time_results](a ) and ( b ) are the results for tcp - sack , while fig .",
    "[ fig : tree_thrpt_time_results](c ) and ( d ) are for tcp - vegas .",
    "[ fig : tree_thrpt_time_results](b ) shows that while flow 1 is able to transmit , flow 2 does not get any chance for transmission in classical bp due to the mismatch between congestion window size update mechanism of tcp and queue size - based routing and scheduling of backpressure . on the other hand , in tcp - aware bp ,",
    "both flows get chance for transmission",
    ". in particular , flow 1 and flow 2 achieves average throughput of @xmath166 and @xmath167 , respectively .",
    "[ fig : tree_thrpt_time_results](c ) and ( d ) show throughput vs. time graphs of tcp - aware bp and classical bp for tcp - vegas .",
    "although classical bp performs better in tcp - vegas than in tcp - sack due to the delay based mechanism of tcp - vegas , its performance is still quite poor as the throughput of flow 2 frequently goes to 0 as seen in fig .",
    "[ fig : tree_thrpt_time_results](d ) .",
    "on the other hand , tcp - aware bp improves throughput of both flows as seen in fig .",
    "[ fig : tree_thrpt_time_results](c ) , where flow 1 and flow 2 achieve @xmath168 and @xmath169 , respectively .",
    "the similar results are presented in fig .",
    "[ fig : diamond_thrpt_time_results ] for the diamond topology .     +    fig .",
    "[ fig : diamond_thrpt_vs_loss_sack ] demonstrates throughput and fairness vs. average loss rate results of tcp - aware bp and aodv in the diamond topology .",
    "there are two flows transmitted from node @xmath163 to @xmath164 ( flow 1 ) and @xmath163 to @xmath165 ( flow 2 ) .",
    "the link @xmath170 is a lossy link .",
    "the version of tcp is tcp - sack .",
    "[ fig : diamond_thrpt_vs_loss_sack](a ) shows that tcp - aware bp improves throughput significantly as compared to aodv thanks to adaptive routing and scheduling .",
    "the throughput improvement of tcp - aware bp as compared to aodv increases as loss probability increases thanks to loss - aware routing and scheduling mechanism of tcp - aware bp",
    ". moreover , fig .",
    "[ fig : diamond_thrpt_vs_loss_sack](b ) shows that the fairness index is close to @xmath171 ( note that @xmath171 is the highest possible fairness index ) when tcp - aware bp is employed .",
    "this means that both tcp flows are able to survive in tcp - aware bp .",
    "note that the fairness index of tcp - aware bp is 0.94 , while the fairness index of aodv is 0.98 when the packet loss probability is 0.5 .",
    "this is due to the fact that tcp - aware bp exploits loss - free links better , and slightly favors the flows transmitted over such links .",
    "however , the throughput improvement of both flows as compared to aodv is higher . in particular",
    ", tcp - aware bp improves throughput as compared to aodv by % 10 and % 40 for the first and second flows , respectively .",
    "these results confirm the compatibility of tcp and tcp - aware bp .",
    "+    let us consider the grid topology shown in fig .",
    "[ fig : topologies ] .",
    "four flows are transmitted from the gateway to four distinct nodes , which are randomly chosen .",
    "half of the links , chosen at random , are lossy with loss probability ranging between @xmath172 .",
    "[ fig : grid_thrpt_time_results ] shows throughput vs. time graphs for tcp - aware bp and classical bp .",
    "it is seen that all four flows could survive in tcp - aware bp for both tcp - sack and tcp - vegas , while one or more flows do not survive in classical bp .",
    "[ fig : grid_thrpt_vs_loss_sack ] shows throughput and fairness vs. average loss probability results for tcp - aware bp and aodv for tcp - sack .",
    "tcp - aware bp improves throughput significantly as compared to aodv without violating fairness .",
    "[ fig : grid_thrpt_vs_loss_vegas ] shows that tcp - aware bp improves throughput significantly as compared to aodv when tcp - vegas is employed .",
    "this shows the effectiveness of our scheme in delay - based tcp versions .",
    "+    as mentioned in section  [ sec : opt ] , there may be both tcp and non - tcp flows in the system , and non - tcp flows should be controlled in a tcp - friendly manner so that tcp flows could survive when non - tcp flows are on .",
    "therefore , a flow control algorithm is presented in eq .",
    "( [ eq : flow_control ] ) for non - tcp flows .",
    "now , we evaluate this scenario in the diamond topology with two flows .",
    "flow 1 is a tcp flow ( tcp - sack ) transmitted from node @xmath163 to node @xmath164 , and flow 2 is a non - tcp flow transmitted from node @xmath163 to node @xmath165 . in our tcp - aware bp framework ,",
    "the non - tcp flow is regulated by eq .",
    "( [ eq : flow_control ] ) .",
    "the parameters in eq .",
    "( [ eq : flow_control ] ) are set as ; @xmath173 , @xmath174 , @xmath175 .",
    "the implementation details including tcp - friendly parameter selection are provided in @xcite .",
    "[ fig : diamond_thrpt_time_results_tcp_udp ] shows throughput vs. time graph of tcp - aware bp , classical bp , and aodv .",
    "the tcp flow does not survive in classical bp as packets are trapped in the buffers .",
    "it does not survive with aodv as well , because uncontrolled non - tcp flows ( _ i.e. , _ udp flows ) occupy buffers and tcp packets are constantly dropped from the buffers , which reduces tcp throughput . yet",
    ", both tcp and non - tcp flows survive together in in tcp - aware bp thanks to tcp - aware routing and scheduling , and tcp - friendly flow control for non - tcp flows .",
    "[ fig : diamond_thrpt_vs_loss_sack_udp_tcp ] shows the throughput improvement performance of tcp - aware bp as compared to aodv in the same setup for different packet loss probabilities . at low loss probabilities , although the throughput of aodv is better than tcp - aware bp , the fairness graph ( and fig .",
    "[ fig : diamond_thrpt_time_results_tcp_udp ] for no - loss ) shows that the fairness of aodv is very low , which means that the tcp flow does not survive . at higher loss probabilities , tcp - aware bp is better than aodv thanks to choosing better routes and schedules as compared to aodv .",
    "backpressure , a routing and scheduling framework over communication networks @xcite , @xcite has generated a lot of research interest @xcite , mainly in wireless ad - hoc networks .",
    "it has also been shown that backpressure can be combined with flow control to provide utility - optimal operation guarantee @xcite , @xcite .",
    "the strengths of backpressure have recently increased the interest on practical implementation of backpressure over wireless networks .",
    "backpressure has been implemented over sensor networks @xcite and wireless multi - hop networks @xcite .",
    "the multi - receiver diversity has been explored in wireless networks using backpressure in @xcite .",
    "the 802.11 compliant version of enhanced backpressure is evaluated in @xcite .",
    "backpressure routing and rate control for intermittently connected networks was developed in @xcite .",
    "backpressure routing and ( max - weight ) scheduling with tcp over wireless has been considered in the literature . at the link layer , @xcite , @xcite , propose ,",
    "analyze , and evaluate link layer backpressure - based implementations with queue prioritization and congestion window size adjustment .",
    "the interaction of tcp with backpressure in @xcite and @xcite is handled by updating the tcp congestion window evolution mechanism .",
    "in particular , if the queue size ( at the tcp source ) increases , the window size is reduced , otherwise , the window size is increased .",
    "multi - path tcp scheme is implemented over wireless mesh networks @xcite for routing and scheduling packets using a backpressure based heuristic , which avoids incompatibility with tcp .",
    "max - weight scheduling is updated in @xcite to make decisions based only on mac level queue size information .",
    "although @xcite considers window based flow control mechanism similar to tcp , it does not consider existing tcp flavors .",
    "the main differences in our work are : ( i ) we consider the incompatibility of tcp with backpressure , and develop tcp - aware backpressure framework to address the incompatibilities , ( ii ) tcp - aware backpressure provides the same stability and utility - optimal operation guarantees as classical backpressure , ( iii ) we do not make any changes at the tcp source , ( iv ) we employ network coding to gracefully combine tcp and tcp - aware backpressure .",
    "maximum weight matching ( mwm ) is a switch scheduling algorithm and has similar properties as the max - weight scheduling algorithm and backpressure .",
    "similar to the backpressure , there is incompatibility between tcp and mwm @xcite , @xcite .",
    "yet , we consider backpressure routing and scheduling over wireless networks rather than switch scheduling , and we take a holistic approach to address this problem ; _ i.e. , _ we propose tcp - aware backpressure to make tcp and backpressure compatible .",
    "we proposed tcp - aware backpressure routing and scheduling to address the incompatibility of tcp and backpressure while exploiting the performance of backpressure routing and scheduling over wireless networks .",
    "tcp - aware backpressure is developed by taking into account the behavior of tcp flows , and gracefully combines tcp and backpressure without making any changes to the tcp protocol .",
    "simulations in ns-2 demonstrate that tcp - aware backpressure improves throughput of tcp flows significantly and provides fairness across competing tcp flows .",
    "l. tassiulas , a. ephremides , `` stability properties of constrained queueing systems and scheduling policies for maximum throughput in multihop radio networks , '' _ in ieee trans . on auto .",
    "37(12 ) , dec .",
    "l. tassiulas , a. ephremides , `` dynamic server allocation to parallel queues with randomly varying connectivity , '' _ in ieee toit _ , vol .",
    "39(2 ) , march 1993 .",
    "m. j. neely , e. modiano , c. li , `` fairness and optimal stochastic control for heterogeneous networks , '' _ in ieee / acm ton _",
    "16(2 ) , april 2008 .",
    "k.  tan , j .",
    "song , q.  zhang , m.  sridharan , `` a compound tcp approach for high - speed and long distance networks , '' _ in proc . of ieee infocom _ , barcelona , spain , april 2006 .",
    "s.  ha , i.  rhee , l.  xu , `` cubic : a new tcp - friendly high - speed tcp variant , '' _ in sigops oper .",
    "syst . rev .",
    "_ , vol .",
    "42(5 ) , july 2008 .    the network simulator - ns-2 , version 2.35 , _ available at www.isi.edu / nsnam / ns/_.    m. j. neely , `` stochastic network optimization with application to communication and queueing systems , '' morgan & claypool , 2010 .",
    "h.  seferoglu , e.  modiano , `` tcp - aware backpressure routing and scheduling , '' tech .",
    "report , available at _ newport.eecs.uci.edu/hseferog/ , http://www.mit.edu / hseferog/_.    m. chiang , s. t. low , a. r. calderbank , j. c. doyle , `` layering as optimization decomposition : a mathematical theory of network architectures , '' _ in proceedings of the ieee _ , vol .",
    "95(1 ) , jan .",
    "x. lin , n. b. schroff , r. srikant , `` a tutorial on cross - layer optimization in wireless networks , '' _ in ieee jsac _ ,",
    "24(8 ) , aug . 2006 .",
    "h.  seferoglu , e.  modiano , `` diff - max : separation of routing and scheduling in backpressure - based wireless networks , '' _ in proc . of ieee infofocm _ , turin ,",
    "italy , april , 2013 .",
    "l.  x.  bui , r.  srikant , a.  stolyar , `` a novel architecture for reduction of delay and queueing structure complexity in the back - pressure algorithm , '' _ in ieee / acm transactions on networking _ , vol .",
    "19(6 ) , dec . 2011 .",
    "j. k. sundararajan , d. shah , m. medard , m. mitzenmacher , j. barros , `` network coding meets tcp , '' _ in proc .",
    "of ieee infocom _ , rio de janeiro , brazil , april 2009 .",
    "s. gheorghiu , a. l. toledo , p. rodriguez , `` multi - path tcp with network coding for wireless mesh networks , '' _ in proc . of ieee icc _ , cape town , south",
    "africa , may 2010 .",
    "h. seferoglu , a. markopoulou , k. k. ramakrishnan , `` i@xmath176nc : intra- and inter - session network coding for unicast flows in wireless networks , '' _ in proc . of ieee infocom _ ,",
    "shanghai , china , april 2011 .",
    "p. a. chou , y. wu,``network coding for the internet and wireless networks , '' _ in ieee signal proc . magazine _ , vol .",
    "24(5 ) , sept . 2007 .",
    "j.  padhye , v.  firoiu , d.  towsley , j.  kurose , `` modeling tcp throughput : a simple model and its empirical validation , '' _ in proc . of acm sigcomm _ , vancouver , canada , sep .",
    "s.  low , `` a duality model of tcp and queue management algorithms , '' _ in ieee / acm transactions on networking _ , vol .",
    "11(4 ) , aug .",
    "2003 .    c. perkins , e. belding - royer , s. das , `` ad hoc on - demand distance vector ( aodv ) routing , '' _ rfc 3561 , ietf _ , july 2003 .",
    "r. k. jain , `` the art of computer systems performance analysis : techniques for experimental design , measurement , simulation , and modeling , '' john wiley & sons , april 1991 .",
    "a. l. stolyar , `` greedy primal dual algorithm for dynamic resource allocation in complex networks , '' _ in queuing systems _ , vol .",
    "54 , 2006 .",
    "s. moeller , a. sridharan , b. krishnamachari , o. gnawali , `` routing without routes : the backpressure collection protocol , '' _ in proc . of acm ipsn _ ,",
    "stockholm , sweden , april 2010 .",
    "r. laufer , t. salonidis , h. lundgren , p. l. guyadec , `` xpress : a cross - layer backpressure architecture for wireless multi - hop networks , '' _ in proc . of acm mobicom _ , las vegas , nv , sep . 2011 .",
    "a. a. bhorkar , t. javidi , a. c. snoereny , `` achieving congestion diversity in wireless ad - hoc networks , '' _ in proc . of ieee infocom _ ,",
    "shanghai , china , april 2011 .",
    "k. choumas , t. korakis , i. koutsopoulos , l. tassiulas , `` implementation and end - to - end throughput evaluation of an ieee 802.11 compliant version of the enhanced - backpressure algorithm , '' _ in proc .",
    "of tridentcom _ , thessaloniki , greece , june 2012 .",
    "j. ryu , v. bhargava , n. paine , s. shakkottai , `` backpressure routing and rate control for icns , '' _ in proc . of acm mobicom _ , chicago , il , sep .",
    "a. warrier , s. janakiraman , s. ha , i. rhee , `` diffq : practical differential backlog congestion control for wireless networks , '' _ in proc . of ieee infocom _ ,",
    "rio de janerio , brazil , april 2009 .",
    "u. akyol , m. andrews , p. gupta , j. hobby , i. saniee , a. stolyar , `` joint scheduling and congestion control in mobile ad - hoc networks , '' _ in proc . of ieee infocom _ , phoenix , az , april 2008 .",
    "b. radunovic , c. gkantsidis , d. gunawardena , p. key , `` horizon : balancing tcp over multiple paths in wireless mesh network , '' _ in proc . of acm mobicom _",
    ", san francisco , ca , sep . 2008 .",
    "j. ghaderi , t. ji , r. srikant , `` connection - level scheduling in wireless networks using only mac - layer information , '' _ in proc . of ieee infocom _ , orlando , fl , march 2012 .",
    "a. shpiner , i. keslassy , `` modeling the interactions of congestion control and switch scheduling , '' _ in computer networks _ ,",
    "55(6 ) , april 2011 .",
    "p. giaccone , e. leonardi , f. neri , `` on the interaction between tcp - like sources and throughput - efficient scheduling policies , '' _ in elsevier _ , 2013 .    y. yi , a. proutire , and m. chiang , `` complexity in wireless scheduling : impact and tradeoffs , '' _ in proc . of acm mobihoc",
    "_ , hong kong , china , may 2008 .",
    "the proof of theorem  [ theorem1 ] directly follows from @xmath177 ( or @xmath178- ) approximation in @xcite , @xcite .",
    "we provide the proof in this section for completeness .",
    "let @xmath179 be the optimal decision when @xmath180 in eq .",
    "( [ eq : per_flow_difference ] ) ( note that this is the classical backpressure ) , while @xmath73 be the decision when @xmath181 . if the following inequality holds , the policy that makes decision based on @xmath181 stabilizes the queues .",
    "@xmath182 where @xmath183 is a finite constant .",
    "let us first show that eq .",
    "( [ eq : app_1 ] ) holds .",
    "consider the inequality ; @xmath184 .",
    "this inequality holds , because @xmath185 @xmath186 @xmath187 . also , considering that @xmath73 is the optimal decision when the backlog difference is @xmath188 , the term @xmath189",
    "@xmath190 @xmath191 should be greater than @xmath192 @xmath193 @xmath179 .",
    "therefore , the inequality is expressed as ; @xmath194 @xmath195 . by adding and removing terms , and noting that @xmath196 and @xmath197 such that @xmath198 , the following holds ; @xmath199 eq .",
    "( [ eq : app_7 ] ) verifies that eq .",
    "( [ eq : app_1 ] ) holds considering that @xmath200 @xmath201 @xmath202 @xmath84 @xmath203 .",
    "note that eq .",
    "( [ eq : app_7 ] ) is equivalent to ; @xmath204 now , let us define the lyapunov function as ; @xmath205 , where @xmath206 and @xmath66 evolves according to eq .",
    "( [ eq : queue_u ] ) .",
    "let the lyapunov drift be @xmath207 $ ] , which is equal to @xmath208 @xmath209 $ ] .",
    "using the fact that @xmath210 , we have ; @xmath211 @xmath212})^{2}$ ] @xmath213 @xmath214 } | \\boldsymbol u(t ) ] $ ] . noting that there always exist a finite constant @xmath164 such that @xmath215 @xmath216 @xmath217})^{2 } | \\boldsymbol u(t)]$ ] , we have ; @xmath218 } | \\boldsymbol u(t ) ] \\end{aligned}\\ ] ] when we insert eq .",
    "( [ eq : app_8 ] ) in eq .",
    "( [ eq : lyap_6 ] ) , we have @xmath219 + 2|{\\mathcal{l}}| |{\\mathcal{s}}| k f_{\\max}\\end{aligned}\\ ] ] if the vector of arrival rates are interior to the stability region , there always exist @xmath220 such that @xmath221 @xmath222 \\leq - ( \\lambda_{s } 1_{[i = o(s ) ] } + \\epsilon)$ ] . substituting this into eq .",
    "( [ eq : lyap_7 ] ) ; @xmath223 the time average of eq .",
    "( [ eq : lyap_8 ] ) yields ; @xmath224 which shows that the time average of @xmath66 is bounded . thus , tcp - aware backpressure stabilizes the network and the total average backlog is bounded ."
  ],
  "abstract_text": [
    "<S> in this work , we explore the performance of backpressure routing and scheduling for tcp flows over wireless networks . </S>",
    "<S> tcp and backpressure are not compatible due to a mismatch between the congestion control mechanism of tcp and the queue size based routing and scheduling of the backpressure framework . </S>",
    "<S> we propose a tcp - aware backpressure routing and scheduling that takes into account the behavior of tcp flows . </S>",
    "<S> tcp - aware backpressure ( i ) provides throughput optimality guarantees in the lyapunov optimization framework , ( ii ) gracefully combines tcp and backpressure without making any changes to the tcp protocol , ( iii ) improves the throughput of tcp flows significantly , and ( iv ) provides fairness across competing tcp flows . </S>"
  ]
}