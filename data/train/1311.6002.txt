{
  "article_text": [
    "pseudorandom number generators aim to produce random numbers using a deterministic process .",
    "no wonder they suffer from many defects . the most usual ones  linear congruential generators  are known to produce periodic sequences with a defect called the lattice structure .",
    "guimond et al .",
    "@xcite proved that when two linear congruential generators are combined using infinite words coding certain classes of quasicrystals or , equivalently , of cut - and - project sets , the resulting sequence is aperiodic and has no lattice structure . for some other related results concerning aperiodic pseudorandom generators we refer to @xcite .",
    "we mention that although the lattice structure is considered as a defect of a random number generator , it can be useful in some applications for approximation of the uniform distribution @xcite .",
    "we have found a combinatorial condition  _ well distributed occurrences _ , or welldoc for short  that also guarantees absence of the lattice structure in related pseudorandom generators .",
    "the welldoc property for an infinite word @xmath0 over an alphabet @xmath9 means that for any integer @xmath3 and any factor @xmath2 of @xmath0 , the set of parikh vectors modulo @xmath3 of prefixes of @xmath0 preceding the occurrences of @xmath2 coincides with @xmath10 ( see definition  [ comb_cond ] ) . in other words , among parikh vectors modulo @xmath3 of such prefixes one has all possible vectors . besides giving generators without lattice structure , the welldoc property is an interesting combinatorial property of infinite words itself .",
    "we prove that the welldoc property holds for the family of sturmian words , and more generally for arnoux - rauzy words .",
    "sturmian words constitute a well studied family of infinite aperiodic words .",
    "let @xmath0 be an infinite word , i. e. , an infinite sequence of elements from a finite set called an alphabet .",
    "the _ ( factor ) complexity _ function counts the number of distinct factors of @xmath0 of length @xmath11 a fundamental result of morse and hedlund @xcite states that a word @xmath0 is eventually periodic if and only if for some @xmath12 its complexity is less than or equal to @xmath12 . infinite words of complexity @xmath13 for all @xmath12 are called _ sturmian words , _ and hence they are aperiodic words of the smallest complexity .",
    "the most studied sturmian word is the so - called fibonacci word @xmath14 fixed by the morphism @xmath15 and @xmath16 .",
    "( see section  [ cow ] for formal definitions . )",
    "the first systematic study of sturmian words was given by morse and hedlund in  @xcite .",
    "such sequences arise naturally in many contexts , and admit various types of characterizations of geometric and combinatorial nature ( see , e.g. , @xcite ) .",
    "arnoux - rauzy words were introduced in @xcite as natural extensions of sturmian words to multiliteral alphabets ( see definition [ defar ] ) . despite the fact that they were introduced as generalizations of sturmian words , arnoux - rauzy words display a much more complex behavior . in particular , we have two different proofs of the welldoc property for sturmian words , and only one of them can be generalized to arnoux - rauzy words . in the sequel we provide both of them .    an infinite word with the welldoc property",
    "is then used to combine two linear congruential generators and form an infinite aperiodic sequence with good statistical behavior . using the testu01  @xcite and practrand  @xcite statistical tests",
    ", we have moreover shown that not only the lattice structure is absent , but also other important properties of prngs are improved when linear congruential generators are combined using infinite words having the welldoc property .",
    "the paper is organized as follows . in the next section ,",
    "we give some background on pseudorandom number generation .",
    "next , in section  2 , we give the basic combinatorial definitions needed for our main results , including the welldoc property , and we prove that the welldoc property of @xmath0 guarantees absence of the lattice structure of the prng based on @xmath0 . in sections  3 and  4 , we prove that the property holds for sturmian and arnoux - rauzy words . finally , in section 5",
    ", we present results of empirical tests of prngs based on words having the welldoc property .",
    "a preliminary version of this paper  @xcite , using the acronym _ wdo _ instead of welldoc , was presented at the words 2013 conference .",
    "for the sake of our discussion , any infinite sequence of integers can be understood as a _ pseudorandom number generator ( prng ) _ ; see also  @xcite .",
    "the generators the most widely used in the past  linear congruential generators  are known to suffer from a  defect called the lattice structure ( they possess it already from dimension @xmath17 as shown in  @xcite ) .",
    "let @xmath18 be a prng whose output is a  finite set @xmath19 .",
    "we say that @xmath20 has the _ lattice structure _ if there exists @xmath21 such that the set @xmath22 is covered by a  family of parallel equidistant hyperplanes and at the same time , this family does not cover the whole lattice @xmath23    recall that a  _ linear congruential generator _ ( lcg ) @xmath24 is given by parameters @xmath25 and defined by the recurrence relation @xmath26 .",
    "let us mention a  famous example of a  lcg whose lattice structure is striking . for @xmath27 , the set of triples of randu , i.e.",
    ", @xmath28 is covered by only @xmath29 parallel equidistant hyperplanes , see figure  [ randu ] .    in the paper of guimond",
    "@xcite , a  restricted version of the following sufficient condition for the absence of the lattice structure is formulated .",
    "[ za_zb ] let @xmath20 be a  prng whose output is a  finite set @xmath19 containing at least two elements .",
    "assume there exists for any @xmath30 and for any @xmath31 an @xmath32-tuple @xmath33 such that both @xmath34 and @xmath35 are @xmath36-tuples of the generator @xmath20 .",
    "then @xmath20 does not have the lattice structure .",
    "proposition  [ za_zb ] can be reformulated in terms of combinatorics on words ( see section  [ cow ] ) as follows : let @xmath20 be a  prng whose output is a  finite set @xmath19 containing at least two elements . if for any @xmath37 and any length @xmath32 @xmath20 has a  right special factor of length @xmath32 with right extensions @xmath38 and @xmath39 , then @xmath20 does not have the lattice structure .",
    "since proposition  [ za_zb ] is formulated for a  restricted class of generators in  @xcite ( see lemma 2.3 ibidem ) , we will provide its proof .",
    "however , we point out that all ideas of the proof are taken from  @xcite .",
    "we start with an auxiliary lemma .",
    "let us denote @xmath40    [ skok_smer_i ] let @xmath20 be a  prng satisfying all assumptions of proposition  [ za_zb ] .",
    "let @xmath41 be the unit normal vector of a  family of parallel equidistant hyperplanes covering all @xmath42-tuples of @xmath20 .",
    "assume @xmath43 ( the @xmath8-th vector of the canonical basis of the euclidean space @xmath44 ) is not orthogonal to @xmath41 .",
    "then the distance @xmath45 of adjacent hyperplanes in the family along @xmath43 is of the form @xmath46 for some @xmath47 .",
    "the distance @xmath45 of adjacent hyperplanes @xmath48 along @xmath43 means @xmath49 for any @xmath50 and @xmath51 , where the @xmath52-th components of @xmath53 and @xmath54 satisfy @xmath55 for all @xmath56 .",
    "this is a  well defined term because the hyperplanes in the family are of the form @xmath57 , where @xmath1 is the distance of adjacent hyperplanes in the family and @xmath58 denotes the standard scalar product .",
    "thus , without loss of generality , consider the adjacent hyperplanes @xmath59 then for any @xmath50 and @xmath60 from @xmath61 , we have @xmath62 where @xmath63 is the @xmath8-th component of @xmath41 .",
    "consequently , @xmath64 and is the same for any choice of @xmath53 and @xmath54 which differ only in their @xmath8-th component and belong to adjacent hyperplanes .",
    "let us start with a useful observation .",
    "let @xmath65 belong to a  hyperplane @xmath66 of the family in question .    1 .",
    "if @xmath67 is orthogonal to @xmath41 , then we may change the @xmath52-th component of @xmath65 in an arbitrary way and the resulting vector will belong to the same hyperplane , i.e. , if @xmath68 , then clearly @xmath69 for any @xmath70 , thus @xmath71 belongs to @xmath66 .",
    "2 .   if @xmath67 is not orthogonal to @xmath41 and the distance @xmath72 of adjacent hyperplanes along @xmath43 in the family is of the form @xmath46 for some @xmath47 , then @xmath73 belongs to the family for any @xmath74 .",
    "this follows from a  repeated application of the fact that if @xmath65 belongs to a  hyperplane @xmath66 , then @xmath75 belongs to an adjacent hyperplane of @xmath66 .",
    "let us proceed by contradiction , i.e. , we assume that there exists @xmath76 such that @xmath43 is not orthogonal to @xmath41 and the distance along @xmath43 of adjacent hyperplanes of the family in question is not of the form @xmath77 .",
    "take the largest of such indices and denote it by @xmath32 .",
    "choose @xmath30 arbitrarily . according to assumptions",
    ", there exists an @xmath78-tuple @xmath79 such that both @xmath80 and @xmath81 are @xmath32-tuples of @xmath20 .",
    "it is therefore possible to find two @xmath42-tuples of @xmath20 such that the first one is of the form @xmath82 and the second one of the form @xmath83 .",
    "these two @xmath42-tuples  considered as vectors in @xmath44 ",
    "belong by the assumption of lemma  [ skok_smer_i ] to some hyperplanes in the family .",
    "since all vectors @xmath84 are either orthogonal to @xmath41 or the distance of adjacent hyperplanes along @xmath67 is of the form @xmath46 for some @xmath47 , we can change the last @xmath85 coordinates @xmath86 of the second vector to arbitrary values from @xmath87 ( we transform them into @xmath88 ) and it will still belong to a  hyperplane in the family . this is a  consequence of the observation at the beginning of this proof .",
    "hence , both vectors @xmath89 and @xmath90 belong to some hyperplanes of the family .",
    "their distance along @xmath91 equals @xmath92 , i.e. , @xmath93 divides @xmath94 . since @xmath95 have been chosen arbitrarily , it follows that @xmath93 divides @xmath96 , i.e. , @xmath97 for some @xmath47 , which is a  contradiction with the choice of @xmath98 .",
    "let @xmath41 be the unit normal vector of a  family of parallel equidistant hyperplanes covering all @xmath42-tuples of @xmath20 .",
    "suppose without loss of generality that @xmath99 are not orthogonal to @xmath41 and @xmath100 are orthogonal to @xmath41 .",
    "let @xmath101 be a  @xmath42-tuple of @xmath20 , thus @xmath65 belongs to one of the hyperplanes . take any vector @xmath102 and",
    "let us show that it belongs to a  hyperplane in the family .    1",
    ".   any vector from @xmath103 which differs from @xmath65 only in the first @xmath104 components belongs to a  hyperplane of the family .",
    "this comes from lemma  [ skok_smer_i ] because when we change for @xmath105 the @xmath8-th component of @xmath65 by @xmath106 , then we jump on the adjacent parallel hyperplane .",
    "so , any transformation of the @xmath8-th component of @xmath65 into another value from @xmath87 means a  finite number of jumps from one hyperplane onto another .",
    "hence , we may transform @xmath65 so that it has the first @xmath32 components equal to @xmath54 and the obtained vector @xmath53 belongs to a  hyperplane in the family .",
    "any vector from @xmath103 which differs from @xmath53 only in the last @xmath107 components belongs to the same hyperplane as @xmath53 .",
    "this comes from the orthogonality @xmath108 for @xmath109 ( the argument is the same as in the proof of lemma  [ skok_smer_i ] ) .",
    "since @xmath54 differs from @xmath53 only in the last @xmath107 components , @xmath54 belongs to a  hyperplane in the family .",
    "in the following , @xmath110 denotes a  finite set of symbols called _ letters _ ; the set @xmath110 is therefore called an _",
    "alphabet_. a  _ finite word _ is a finite string @xmath111 of letters from @xmath110 ; its length is denoted by @xmath112 and @xmath113 denotes the number of occurrences of @xmath114 in @xmath2 .",
    "the empty word , a neutral element for concatenation of finite words , is denoted @xmath115 and it is of zero length .",
    "the set of all finite words over the alphabet @xmath110 is denoted by @xmath116 .    under an _ infinite word _",
    "we understand an infinite sequence @xmath117 of letters from @xmath110 .",
    "a  finite word @xmath2 is a  _ factor _ of a  word @xmath6 ( finite or infinite ) if there exist words @xmath118 and @xmath119 such that @xmath120 . if @xmath121 , then @xmath2 is said to be a  _ prefix _ of @xmath6 ; if @xmath122 , then @xmath2 is a  _ suffix _ of  @xmath6 .",
    "the set of factors and prefixes of @xmath6 are denoted by @xmath123 and @xmath124 , respectively . if @xmath125 for finite words @xmath126 , then we write @xmath127 and @xmath128 .",
    "an infinite word @xmath129 over the alphabet @xmath130 is called _ eventually periodic _ if it is of the form @xmath131 , where @xmath6 , @xmath2 are finite words over @xmath130 and @xmath132 denotes an infinite repetition .",
    "an infinite word is called _ aperiodic _ if it is not eventually periodic .    for any factor @xmath2 of an infinite word @xmath133 ,",
    "every index @xmath8 such that @xmath2 is a prefix of the infinite word @xmath134 is called an _ occurrence _ of @xmath2 in @xmath133 .",
    "an infinite word @xmath0 is _ recurrent _ if each of its factors has infinitely many occurrences in @xmath0 .",
    "the _ factor complexity _ of an infinite word @xmath133 is a  map @xmath135 defined by @xmath136 .",
    "the factor complexity of eventually periodic words is bounded , while the factor complexity of an aperiodic word @xmath129 satisfies @xmath137 for all @xmath138 .",
    "a  _ right extension _ of a  factor @xmath2 of @xmath129 over the alphabet @xmath130 is any letter @xmath139 such that @xmath140 is a  factor of @xmath0 . of course , any factor of @xmath133 has at least one right extension .",
    "a  factor @xmath2 is called _ right special _ if @xmath2 has at least two right extensions .",
    "similarly , one can define a  _ left extension _ and a  _ left special _ factor .",
    "a factor is _ bispecial _ if it is both right and left special .",
    "an aperiodic word contains right special factors of any length .",
    "the _ parikh vector _ of a finite word @xmath2 over an alphabet @xmath141 is defined as @xmath142 , @xmath143 will denote the prefix of length @xmath12 of @xmath0 , i.e. , @xmath144 .",
    "in some of the examples we consider are morphic words .",
    "a _ morphism _ is a function @xmath145 such that @xmath146 and @xmath147 , for all @xmath148 .",
    "clearly , a morphism is completely defined by the images of the letters in the domain .",
    "a morphism is _ prolongable _ on @xmath149 , if @xmath150 and @xmath151 is a prefix of @xmath152 . if @xmath153 is prolongable on @xmath151 , then @xmath154 is a proper prefix of @xmath155 , for all @xmath156",
    "therefore , the sequence @xmath157 of words defines an infinite word @xmath0 that is a fixed point of @xmath158 .",
    "such a word @xmath0 is a ( pure ) _ morphic _ word .",
    "let us introduce a  combinatorial condition on infinite words that  as we will see later  guarantees no lattice structure for the associated prngs .",
    "[ comb_cond ] we say that an aperiodic infinite word @xmath0 over the alphabet @xmath159 has _",
    "well distributed occurrences _ ( or has _ the welldoc property _ ) if for any @xmath160 and any factor @xmath2 of @xmath129 the word @xmath129 satisfies the following condition .",
    "if @xmath161 denote the occurrences of @xmath2 in @xmath162 , then @xmath163 that is , the parikh vectors of @xmath164 for @xmath165 , when reduced modulo @xmath3 , give the whole set @xmath166 .",
    "we define the welldoc property for aperiodic words since it clearly never holds for periodic ones .",
    "it is easy to see that if a recurrent infinite word @xmath0 has the welldoc property , then for every vector @xmath167 there are infinitely many values of @xmath52 such that the parikh vector of @xmath168 is congruent to @xmath5 modulo  @xmath3 .",
    "the thue - morse word @xmath169 which is a fixed point of the morphism @xmath15 , @xmath170 , does not satisfy the welldoc property . indeed , take @xmath171 and @xmath172 ,",
    "then @xmath2 occurs only in odd positions @xmath173 so that @xmath174 is odd .",
    "thus , e.g. , @xmath175 and hence @xmath176    we say that an infinite word @xmath0 over an alphabet @xmath110 , @xmath177 , is _ universal _ if it contains all finite words over @xmath110 as its factors .",
    "it is easy to see that any universal word satisfies the welldoc property .",
    "indeed , for any word @xmath178 and any @xmath3 there exists a finite word @xmath6 such that if @xmath179 denote the occurrences of @xmath2 in @xmath6 , then @xmath180 since @xmath0 is universal , @xmath6 is a factor of @xmath0 .",
    "denoting by @xmath8 an occurrence of @xmath6 in @xmath0 , one gets that the positions @xmath181 are occurrences of @xmath2 in @xmath0 .",
    "hence latexmath:[\\[\\begin{aligned } & & \\left\\{\\left(|{\\rm pref}_{i+i_j } u|_0 , \\ldots ,    \\bmod m \\mid j \\in \\{0,1,\\dots , k\\}\\right\\}=\\\\ & & = \\left(|{\\rm pref}_{i } u|_0 , \\ldots , |{\\rm pref}_{i } u|_{d-1}\\right)+\\\\&&+\\left\\{\\left(|{\\rm pref}_{i_j } v|_0 , \\ldots ,     therefore , @xmath0 satisfies the welldoc property .      in order to eliminate the lattice structure",
    ", it helps to combine prngs in a  smart way .",
    "such a  method was introduced in  @xcite .",
    "let @xmath183 and @xmath184 be two prngs with the same output @xmath19 and the same period @xmath160 , and let @xmath117 be a  binary infinite word over the alphabet @xmath185 .",
    "_ the prng @xmath18 based on @xmath0 _ is obtained by the following algorithm :    1 .   read step by step the letters of @xmath0 .",
    "2 .   when you read @xmath186 for the @xmath8-th time , copy the @xmath8-th symbol from @xmath187 to the end of the constructed sequence @xmath20 .",
    "3 .   when you read @xmath188 for the @xmath8-th time , copy the @xmath8-th symbol from @xmath189 to the end of the constructed sequence @xmath20 .",
    "this construction can be generalized for non - binary alphabets : using infinite words over a multiliteral alphabet , one can combine more than two prngs . remark that following terminology from @xcite , the sequence @xmath20 is obtained as a _ shuffle _ of the sequences @xmath187 and @xmath189 with the steering word @xmath0 .    in order to distinguish between generators and infinite words used for their combination",
    ", we always denote generators with capital letters @xmath190 and words with lower - case letters @xmath191 ( the same convention is applied for their outputs : @xmath192 for output values of generators ( elements of @xmath87 ) , @xmath193 for letters of words ) .",
    "finite sequences of successive elements @xmath194 of a  prng @xmath187 are called @xmath42-tuples , or vectors , while in the case of an infinite word @xmath0 , we call @xmath195 a  factor of length @xmath42",
    ".      guimond et al . in  @xcite",
    "have shown that prngs based on infinite words coding a  certain class of cut - and - project sets have no lattice structure . in the sequel , we will generalize their result and find larger classes of words guaranteeing no lattice structure for associated generators .",
    "we focus on the binary alphabet , although everything works for multiliteral words as well ( and for combination of more generators therefore ) , since the proofs become more technical in non - binary case .",
    "[ my ] let @xmath20 be the prng based on a  binary infinite word @xmath0 with the welldoc property .",
    "then @xmath20 has no lattice structure .    according to proposition  [ za_zb ]",
    ", it suffices to check that its assumptions are met .",
    "let @xmath30 and @xmath31 .",
    "assume @xmath196 and @xmath197 , where @xmath183 and @xmath198 are the two combined prngs with the same output @xmath199 and the same period @xmath160 .",
    "consider a  right special factor @xmath2 of @xmath0 of length @xmath32 , i.e. , both words @xmath200 and @xmath201 are factors of @xmath0 ( such a  factor @xmath2 exists since @xmath0 is an aperiodic word because of the welldoc property ) . by definition  [ comb_cond ] , it is possible to find an occurrence @xmath202 of @xmath200 in @xmath0 such that @xmath203 reading the word @xmath200 at the occurrence @xmath202 , the corresponding @xmath32-tuple @xmath33 of the generator @xmath20 consists of symbols @xmath204 when reading @xmath186 after @xmath2 , the symbol @xmath205 from the first generator follows @xmath33 .",
    "again , by definition  [ comb_cond ] , there exists an occurrence @xmath206 of @xmath201 in @xmath0 such that @xmath207 when reading the word @xmath2 at the occurrence @xmath206 , the same @xmath32-tuple @xmath33 of @xmath20 as previously occurs .",
    "this time , however , @xmath33 is followed by @xmath39 because we read @xmath201 and @xmath208 .",
    "thus , we have found an @xmath32-tuple @xmath33 of @xmath20 followed in @xmath20 by both @xmath38 and @xmath39 .",
    "[ modifiedfib ] the welldoc property is sufficient , but not necessary for absence of the lattice structure .",
    "for example , consider a  modified fibonacci word @xmath209 where the letter @xmath17 is inserted after each letter , i.e. , @xmath210 .",
    "it is easy to verify that @xmath209 does not have well distributed occurrences .",
    "however , we will show the following : let @xmath20 be the prng combining three generators @xmath211 and @xmath212 with the same output @xmath19 and the same period @xmath160 according to the modified fibonacci word @xmath209 .",
    "then @xmath20 has no lattice structure .",
    "it suffices to verify assumptions of proposition  [ za_zb ] .",
    "let @xmath30 and @xmath31 , @xmath32 an even number ( the proof is analogous for odd @xmath32 ) .",
    "assume @xmath196 and @xmath197 .",
    "consider a  right special factor @xmath2 of the fibonacci word @xmath0 of length @xmath213 .",
    "since @xmath0 has the welldoc property , there exists an occurrence @xmath202 of @xmath200 in @xmath0 such that @xmath203 then if we insert the letter @xmath17 after each letter of @xmath2 , we obtain a  right special factor @xmath214 of the modified fibonacci word @xmath209 of length @xmath32 .",
    "it holds then that @xmath215    when reading the word @xmath216 at the occurrence @xmath217 , the corresponding @xmath32-tuple @xmath33 of the generator @xmath20 is followed by the symbol @xmath205 from the first generator .",
    "again , by the welldoc property of @xmath0 , there exists an occurrence @xmath206 of @xmath201 in @xmath0 such that @xmath207 it holds then that @xmath218    when reading the word @xmath214 at the occurrence @xmath219 , the same @xmath32-tuple @xmath33 of @xmath20 as previously occurs . this time ,",
    "however , @xmath33 is followed by @xmath39 because we read @xmath220 and @xmath208 .",
    "thus , we have found an @xmath32-tuple @xmath33 of @xmath20 followed in @xmath20 by both @xmath38 and @xmath39 .",
    "therefore @xmath20 has no lattice structure .    in the proof of theorem  [ my ] , the modulus @xmath3 from the welldoc property is set to be equal to the period of the combined generators .",
    "therefore , if we require absence of the lattice structure for a  prng obtained when combining prngs with a fixed period @xmath221 , then it is sufficient to use an infinite word @xmath0 that satisfies the welldoc property for the modulus @xmath222 .",
    "this means for instance that the thue - morse word is not completely out of the game , but it can not be used to combine periodic prngs with the period being a  power of @xmath17 .",
    "we have formulated a  combinatorial condition ",
    "well distributed occurrences  guaranteeing no lattice structure of the associated generator .",
    "it is now important to find classes of words satisfying such a condition .",
    "in this section we show that sturmian words have well distributed occurrences .",
    "an aperiodic infinite word @xmath0 is called _ sturmian _ if its factor complexity satisfies @xmath223 for all @xmath138 .",
    "so , sturmian words are by definition binary and they have the lowest possible factor complexity among aperiodic infinite words .",
    "sturmian words admit various types of characterizations of geometric and combinatorial nature .",
    "one of such characterizations is via irrational rotations on the unit circle . in @xcite hedlund and",
    "morse showed that each sturmian word may be realized measure - theoretically by an irrational rotation on the circle .",
    "that is , every sturmian word is obtained by coding the symbolic orbit of a point on the circle of circumference one under a rotation @xmath224 by an irrational angle radians ) . ]",
    "@xmath225 , @xmath226 , where the circle is partitioned into two complementary intervals , one of length @xmath227 and the other of length @xmath228 conversely , each such coding gives rise to a sturmian word .    [ rotation ] the _ rotation _ by angle @xmath225 is the mapping @xmath224 from @xmath229 ( identified with the unit circle ) to itself defined by @xmath230 , where @xmath231 is the fractional part of @xmath232 .",
    "considering a partition of @xmath229 into @xmath233 , @xmath234 , define a word @xmath235 one can also define @xmath236 $ ] , @xmath237 $ ] , the corresponding word is denoted by @xmath238 .",
    "remark that some but not all sturmian words are morphic .",
    "in fact , it is known that a characteristic sturmian word ( i.e. , @xmath239 ) is morphic if and only if the continuous fraction expansion of @xmath225 is periodic . for more information on sturmian words",
    "we refer to ( * ? ? ?",
    "* chapter  2 ) .",
    "[ sturmian ] let @xmath0 be a sturmian word .",
    "then @xmath0 has the welldoc property .    in the proof we use the definition of sturmian word via rotation .",
    "the main idea is controlling the number of @xmath188 s modulo @xmath3 by taking circle of length @xmath3 , and controlling the length taking the rotation by @xmath240 .",
    "for the proof we will use an equivalent reformulation of the theorem :    let @xmath0 be a sturmian word on @xmath185 , for any natural number @xmath3 and any factor @xmath2 of @xmath0 let us denote @xmath241 the occurrences of @xmath2 in @xmath0 .",
    "then @xmath242    that is , we control the number of @xmath188 s and the length instead of the number of @xmath186 s .",
    "since a sturmian word can be defined via rotations by an irrational angle on a unit circle , without loss of generality we may assume that @xmath243 for some @xmath226 , @xmath244 , @xmath225 irrational ( see definition [ rotation ] ) .",
    "equivalently , we can consider @xmath3 copies of the circle connected into one circle of length @xmath3 with @xmath3 intervals @xmath245 of length @xmath225 corresponding to @xmath188 .",
    "the sturmian word is obtained by rotation by @xmath225 on this circle of length @xmath3 ( see fig .",
    "[ sturmian_fig ] ) .",
    "namely , we define the rotation @xmath246 as the mapping from @xmath247 ( identified with the circle of length @xmath3 ) to itself defined by @xmath248 , where @xmath249 and for @xmath250 coincides with the fractional part of @xmath232 . a  partition of @xmath247 into @xmath251 intervals @xmath252 , @xmath253 , @xmath254 defines the sturmian word @xmath243 : @xmath255    it is well known that any factor @xmath256 of @xmath0 corresponds to an interval @xmath257 in @xmath229 , so that whenever you start rotating from the interval @xmath257 , you obtain @xmath2 .",
    "namely , @xmath258 if and only if @xmath259 .",
    "similarly , we can define @xmath3 intervals corresponding to @xmath2 in @xmath247 ( circle of length @xmath3 ) , so that if @xmath260 , then @xmath261 , @xmath254 .    fix a factor @xmath2 of @xmath0 ,",
    "take arbitrary @xmath262 .",
    "now let us organize @xmath263 among the occurrences of @xmath2 , i.e. , find @xmath264 such that @xmath265 , @xmath266 and @xmath267 :    consider rotation @xmath268 by @xmath240 instead of rotation by @xmath225 , and start @xmath3-rotating from @xmath269 .",
    "formally , @xmath270 , where , as above , @xmath271m$ ] .",
    "this rotation will put us to positions @xmath272 , @xmath273 , in the sturmian word : for @xmath274 one has @xmath275 if @xmath276 for some @xmath277 .",
    "remark that the points in the orbit of an @xmath3-rotation of a point on the @xmath3-circle are dense , and hence the rotation comes infinitely often to each interval .",
    "so pick @xmath278 when @xmath279 ( and actually there exist infinitely many such @xmath278 ) .",
    "then the length @xmath264 of the corresponding prefix is equal to @xmath280 , and the number of @xmath188 s in it is @xmath281 , where @xmath118 is the number of complete circles you made , i.e. , @xmath282 $ ] .",
    "in this section we show that arnoux - rauzy words  @xcite , which are natural extensions of sturmian words to larger alphabets , also satisfy the welldoc property .",
    "note that the proof for sturmian words can not be generalized to arnoux - rauzy words , because it is based on the geometric interpretation of sturmian words via rotations , while this interpretation does not extend to arnoux - rauzy words .      the definitions and results we remind in this subsection are well - known and mostly taken from  @xcite and generalize the ones given for binary words in  @xcite .",
    "let @xmath110 be a finite alphabet .",
    "the _ reversal operator _ is the operator @xmath283 defined by recurrence in the following way : @xmath284 for all @xmath285 and @xmath286 .",
    "the fixed points of the reversal operator are called _",
    "palindromes_.    let @xmath285 be a finite word over the alphabet @xmath110 .",
    "right palindromic closure _ of @xmath6 , denoted by @xmath287 , is the shortest palindrome that has @xmath6 as a prefix .",
    "it is readily verified that if @xmath118 is the longest palindromic suffix of @xmath288 , then @xmath289 .",
    "we call the _ iterated ( right ) palindromic closure operator _ the operator @xmath290 recurrently defined by the following rules : @xmath291 for all @xmath285 and @xmath286 .",
    "the definition of @xmath290 may be extended to infinite words @xmath0 over @xmath110 as @xmath292 , i.e. , @xmath293 is the infinite word having @xmath294 as its prefix for every @xmath138 .",
    "[ defar ] let @xmath295 be an infinite word on the alphabet @xmath110 such that every letter occurs infinitely often in @xmath295 .",
    "the word @xmath296 is then called a _ characteristic ( or standard ) arnoux - rauzy word _ and @xmath295",
    "is called the _ directive sequence _ of @xmath297 .",
    "an infinite word @xmath0 is called an arnoux - rauzy word if it has the same set of factors as a ( unique ) characteristic arnoux - rauzy word , which is called the characteristic word of @xmath0 .",
    "the directive sequence of an arnoux - rauzy word is the directive sequence of its characteristic word .",
    "let us also recall the following well - known characterization ( see e.g.  @xcite ) :    [ charar ] let @xmath0 be an aperiodic infinite word over the alphabet @xmath110 .",
    "then @xmath0 is a standard arnoux - rauzy word if and only if the following hold :    1 .",
    "@xmath298 is closed under reversal ( that is , if @xmath6 is a factor of @xmath0 so is @xmath299 ) .",
    "every left special factor of @xmath0 is also a prefix .",
    "if @xmath6 is a right special factor of @xmath0 then @xmath300 is a factor of @xmath0 for every @xmath286 .    from the preceding theorem",
    ", it can be easily verified that the bispecial factors of a standard arnoux - rauzy correspond to its palindromic prefixes ( including the empty word ) , and hence to the iterated palindromic closure of the prefixes of its directive sequence .",
    "that is , if @xmath301 is the sequence , ordered by length , of bispecial factors of the standard arnoux - rauzy word @xmath0 , @xmath302 its directive sequence ( with @xmath303 for every @xmath8 ) , we have @xmath304 .",
    "a direct consequence of this , together with the preceding definitions , is the following statement , which will be used in the sequel .",
    "[ lemmabispecials ] let @xmath0 be a characteristic arnoux - rauzy word and let @xmath295 and @xmath305 be defined as above . if @xmath306 does not occur in @xmath307 , then @xmath308 .",
    "otherwise let @xmath309 be the largest integer such that @xmath310 .",
    "then @xmath311 .",
    "where no confusion arises , given an arnoux - rauzy word @xmath0 , we will denote by @xmath312 the sequence of bispecial factors of @xmath0 ordered by length and we will denote for any @xmath313 , @xmath314 the parikh vector of @xmath307 .    by the pigeonhole principle , it is clear that for every @xmath315 there exists an integer @xmath316 such that , for every @xmath317 , the set @xmath318 is infinite . where no confusion arises and with a slight abuse of notation , fixed @xmath3 , we will always denote by @xmath319 the smallest of such integers .    [ zerocombination ]",
    "let @xmath0 be a characteristic arnoux - rauzy word and let @xmath315 .",
    "let @xmath320 be a linear combination of parikh vectors such that @xmath321 , with @xmath322 and @xmath323 for all @xmath324 .",
    "then , for any @xmath325 , there exists a prefix @xmath6 of @xmath0 such that the parikh vector of @xmath6 is congruent to @xmath326 modulo @xmath3 and @xmath327 is also a prefix of @xmath0 .    without loss of generality",
    ", we can assume @xmath328 , hence there exists @xmath329 such that @xmath330 we will prove the result by induction on @xmath331 . if @xmath332 , trivially , we can take @xmath333 and the statement is clearly verified .",
    "let us assume the statement true for all @xmath334 and let us prove it for @xmath335 .",
    "by the remark preceding this lemma , for every @xmath32 we can choose @xmath336 such that @xmath337 and @xmath338 . since every bispecial factor is a prefix and suffix of all the bigger ones , in particular we have that @xmath339 is a suffix of @xmath340 , and @xmath341 is a prefix of @xmath339 ; this implies that @xmath342 is actually a prefix of @xmath340 . by assumption ,",
    "the parikh vector of @xmath343 is clearly @xmath344 .",
    "since @xmath345 implies @xmath346 , we have , by induction hypothesis , that there exists a prefix @xmath2 of @xmath0 such that the parikh vector of @xmath2 is congruent modulo @xmath3 to @xmath347 and @xmath348 is a prefix of @xmath0 .",
    "hence @xmath349 is also a prefix of @xmath0 and , by simple computation , the parikh vector of @xmath350 is congruent modulo @xmath3 to @xmath351 .",
    "let @xmath352 .",
    "we will say that an integer linear combination of integer vectors is a _ @xmath12-combination _ if the sum of all the coefficients equals @xmath12 .",
    "[ keylemma ] let @xmath0 be a characteristic arnoux - rauzy word and let @xmath353 .",
    "every @xmath12-combination of parikh vectors of bispecial factors can be expressed as an @xmath12-combination of parikh vectors of arbitrarily large bispecials . in particular , for every @xmath354 , it is possible to find a finite number of integers @xmath355 such that @xmath356 with @xmath357 for every @xmath8 and @xmath358 .",
    "a direct consequence of lemma [ lemmabispecials ] is that for every @xmath8 such that @xmath306 appears in @xmath307 , we have @xmath359 , where @xmath309 is the largest such that @xmath310 .",
    "this in turn ( since every letter in @xmath295 appears infinitely many times from the definition of arnoux - rauzy word ) implies that _ for every _ non - negative integer @xmath52 , there exists a positive @xmath278 such that @xmath360 , that is , we can substitute each parikh vector of a bispecial with a @xmath188-combination of parikh vectors of strictly larger bispecials . simply iterating the process , we obtain the statement .    in the following",
    "we will assume the set @xmath110 to be a finite alphabet of cardinality @xmath1 .",
    "for every set @xmath361 of finite words , we will denote by @xmath362 the set of parikh vectors of elements of @xmath187 and for every @xmath315 we will denote by @xmath363 the set of elements of @xmath364 reduced modulo @xmath3 .",
    "for an infinite word @xmath0 over @xmath110 , and a factor @xmath6 of @xmath129 , let @xmath365 denote the set of all prefixes of @xmath129 followed by an occurrence of @xmath6 .",
    "in other words , @xmath366    for any set of finite words @xmath361 , we will say that @xmath129 _ has the property _",
    "@xmath367 ( or , for short , that @xmath129 has @xmath367 ) if , for every @xmath315 and for every @xmath368 we have that @xmath369 that is to say , for every vector @xmath370 there exists a word @xmath371 such that the parikh vector of @xmath2 is congruent to @xmath372 modulo @xmath3 .    with this notation , an infinite word @xmath0 has the welldoc property if and only if it has the property @xmath373 .",
    "[ prefresult ] let @xmath0 be a characteristic arnoux - rauzy word over the @xmath1-letter alphabet @xmath110 .",
    "then @xmath0 has the property @xmath374 .",
    "let us fix an arbitrary @xmath315 .",
    "we want to show that , for every @xmath375 , @xmath376 .",
    "let then @xmath377 and @xmath32 be the smallest number such that @xmath6 is a prefix of @xmath378 .",
    "let @xmath379 be such that @xmath380 does not appear in @xmath381 , where @xmath295 is the directive word of @xmath0 .",
    "without loss of generality , we can rearrange the letters so that each @xmath380 is lexicographically smaller than @xmath382 . with this assumption",
    "if , for every @xmath52 , we set @xmath383 , i.e. , equal to the parikh vector of @xmath384 , which , by the first part of lemma [ lemmabispecials ] , equals @xmath385 , we can find @xmath386 positive integers @xmath387 such that @xmath388 .",
    "it is easy to show , then , that the set @xmath389 generates @xmath390 , hence there exists an integer @xmath12 such that @xmath326 can be expressed as an @xmath12-combination of elements of @xmath391 ( which are parikh vectors of bispecial factors of @xmath0 ) .",
    "trivially , then , @xmath392 ; thus , it is possible to express @xmath326 as a @xmath186-combination of parikh vectors of ( by the previous lemma [ keylemma ] ) arbitrarily large bispecial factors of @xmath0 . by lemma [ zerocombination ]",
    ", then there exists a prefix @xmath118 of @xmath0 whose parikh vector @xmath393 satisfies @xmath394 and @xmath395 is a prefix of @xmath0 . since we picked @xmath32 such that @xmath6 is a prefix of @xmath378 , we have that @xmath396 . from the arbitrariness of @xmath6 , @xmath326 and @xmath3",
    ", we obtain the statement .    as a corollary of proposition  [ prefresult ]",
    ", we obtain the main result of this section .",
    "[ ar ] let @xmath0 be an arnoux - rauzy word over the @xmath1-letter alphabet @xmath110",
    ". then @xmath0 has the property @xmath373 , or equivalently , @xmath0 has the welldoc property .",
    "let @xmath3 be a positive integer and let @xmath297 be the characteristic word of @xmath0 .",
    "let @xmath6 be a factor of @xmath0 and @xmath397 be the shortest bispecial containing @xmath6 .",
    "by proposition [ prefresult ] , we have that @xmath398 and , since the set is finite , we can find a prefix @xmath118 of @xmath297 such that @xmath399 .",
    "let @xmath2 be a prefix of @xmath0 such that @xmath400 is a prefix of @xmath0 . if @xmath53 and @xmath372 are the parikh vectors of , respectively , @xmath232 and @xmath2 , it is easy to see that @xmath401 since we have chosen @xmath118 such that @xmath399 , we clearly obtain that @xmath376 and hence , by the arbitrariness of @xmath6 and @xmath3 , the statement",
    ".    now we introduce a  simple method of obtaining words satisfying the welldoc property .",
    "take a word @xmath0 with the welldoc property over an alphabet @xmath402 , @xmath403 , apply a morphism @xmath404 for @xmath405 , i.e. , @xmath158 joins two letters into one .",
    "it is straightforward that @xmath406 has the welldoc property .",
    "so , taking arnoux - rauzy words and joining some letters , we obtain other words than sturmian and arnoux - rauzy satisfying the welldoc property .",
    "now we introduce another class of morphisms preserving the welldoc property .",
    "recall that the _ adjacency matrix _ @xmath407 of a morphism @xmath408 , with @xmath409 , is defined by @xmath410 for @xmath411 . by definition",
    ", it follows that if @xmath326 is the parikh vector of @xmath412 , then @xmath413 is the parikh vector of @xmath414 .",
    "let us show that if @xmath415 and @xmath0 has the welldoc property , then so does @xmath406 .",
    "indeed , let @xmath2 be any factor of @xmath406 , and suppose @xmath416 for some @xmath417 and @xmath418 .",
    "we then have @xmath419 , so that , writing @xmath53 for the parikh vector of @xmath232 , we have for any @xmath420 @xmath421 since @xmath0 has the welldoc property , @xmath422 . as @xmath415 , @xmath407 is invertible ( even modulo @xmath3 ) , so that @xmath423 . hence @xmath424 , showing that @xmath406 has the welldoc property by the arbitrariness of @xmath2 and @xmath3 .",
    "in the previous part , we have explained that prngs based on infinite words with well distributed occurrences have no lattice structure . in this sequel",
    "we demonstrate this by empirical statistical tests .",
    "we have chosen to use lcgs as underlying generators _ explicitly _ for their known weaknesses .",
    "we will show how mixing based on aperiodic infinite words will cope with these weaknesses and whether statistical tests will show any significant improvements .",
    "any real computer is a  finite state machine and hence it can generate only finite prefixes of infinite words . from practical point of view",
    "it is important to find algorithms that are efficient both in memory footprint and cpu time . in",
    "@xcite an efficient algorithm for generating the fibonacci word was introduced : the prefix of length @xmath12 is generated in @xmath425 space and @xmath426 time .",
    "we generalize this method for any sturmian and arnoux - rauzy word being a  fixed point of a  morphism @xmath158 .",
    "the main ingredient is that we consider @xmath427 instead of @xmath158 ; we precompute and store in the memory @xmath154 for any @xmath286 . the runtime to generate @xmath428 letters of the fibonacci and the tribonacci word",
    "is summarized in table  [ table : speed ] .",
    "there are the following observations we would like to point out :    1 .",
    "there is no need to store the first @xmath12 letters in memory to generate the @xmath429-th letter .",
    "letters are generated on the fly and only nodes of the traversal tree are kept in the memory .",
    "memory consumption needed to generate the first @xmath428 letters is shown in table  [ table : speed ] .",
    "the algorithm also supports leap frogging , generation can be started at any position in the word .",
    "the consequence is that the algorithm can be easily parallelized to produce multiple streams  @xcite .",
    "2 .   using the method from  @xcite together with our improvement for generation of sturmian and arnoux - rauzy words",
    ", the speed of generation of their prefixes is much higher than the speed of generation of lcgs output values .",
    "for example , generation of @xmath428 @xmath430-bit values using a  lcg modulo @xmath431 takes @xmath432 seconds on our machine .",
    "compare it to @xmath433 seconds for generation of @xmath428 letters of a  fixed point of a  morphism with the same hardware .",
    "thus , using a  fixed point to combine lcgs causes only a  negligible runtime penalty .",
    "the speed of generation can be further improved by using a  higher initial memory footprint and cpu that can effectively copy such larger chunks of memory ( size of l1 data cache is a limiting factor ) .",
    "thus the new method scales nicely and can benefit form the future cpus with higher l1 caches .",
    "the only requirement is to precompute @xmath154 , @xmath286 , for larger @xmath12 .",
    "our program does this automatically based on the limit on the initial memory consumption provided by the user .",
    ".the comparison of time in seconds and memory consumption to hold the traversal tree state needed to generate the first @xmath428 letters of the fibonacci and the tribonacci word using the original  @xcite ( @xmath188st line ) and the new algorithm ( @xmath17nd line ) .",
    "the iteration @xmath12  in  the @xmath427 rule was chosen so that the length of @xmath154 does not exceed @xmath434 bytes for any @xmath286 .",
    "the measurement was done on intel core i7 - 3520 m cpu running at 2.90ghz . [ cols=\"^,^,^\",options=\"header \" , ]      we will present results for prngs based on :    * the fibonacci word ( as an example of a sturmian word ) , i.e. , the fixed point of the morphism @xmath435 , * the modified fibonacci word ",
    "fibonacci2  with the letter @xmath17 inserted after each letter ( see remark  [ modifiedfib ] ) , * the tribonacci word ( as the simplest example of a ternary arnoux - rauzy word ) , i.e. , the fixed point of @xmath436 .",
    "we have implemented prngs for more morphic sturmian words and ternary arnoux - rauzy words .",
    "since the results are similar , we present in the sequel only the above three representatives .",
    "our program generating prngs based on morphic words is available online , together with a  description @xcite .",
    "remark that we included the modified fibonacci word that does not have the welldoc property , but at the same time it guarantees no lattice structure for the arising generator .",
    "the reason for including it is that we would like to illustrate that such a  word leads to worse results in testing than the fibonacci word .      instead of combining plain lcgs",
    ", we will execute some modifications before their combination .",
    "those modifications turn out to be useful according to the known weaknesses of lcgs .",
    "we have chosen lcgs with the period @xmath3 in range from @xmath437 to @xmath431 , but we use only their upper @xmath430 bits as the output since the statistical tests require @xmath430-bit sequences as the input .",
    "their output is thus in all cases @xmath438 .",
    "we use two batteries of random tests ",
    "testu01 bigcrush and practrand .",
    "they operate differently .",
    "the first one includes @xmath439 statistical tests , many of them tailored to the specific classes of prngs .",
    "it is a  reputable test , however its drawback is that it works with a fixed amount of data and discards the least significant bit ( for some tests even two bits ) of the @xmath430-bit numbers being tested .",
    "the second battery consists of three different tests where one is adapted on short range correlations , one reveals long range violations , and the last one is a  variation on the classical gap test .",
    "details can be found in  @xcite .",
    "moreover , the practrand battery applies automatically various filters on the input data . for our purpose",
    "the lowbit filter is interesting ",
    "it is passing various number of the least significant bits to the statistical tests .",
    "as we have already mentioned , the lcgs with @xmath440 have a  much shorter period than the lcg itself .",
    "therefore the lowbit filter is useful to check whether this weakness disappears when lcgs are combined according to an infinite word .",
    "the practrand tests are able to treat very long input sequences , up to a few exabytes . to control the runtime we have limited the length of input sequences to @xmath441 tb .",
    "the first column of table  [ table : lcg ] shows the list of tested lcgs .",
    "the bigcrush column shows how many tests of the testu01 bigcrush battery failed .",
    "the practrand column gives the @xmath442 of sample datasize in bytes for which the results of the practrand tests started to be `` very suspicious '' ( @xmath118-values smaller than @xmath443 ) .",
    "one lcg did not show any failures in the practrand tests which is denoted as @xmath444  the meaning is that the practrand test has passed successfully @xmath441 tb of input data and the test was stopped there .",
    "the last column provides time in seconds to generate the first @xmath428 @xmath430-bit sequences of output on intel i7 - 3520 m cpu running at 2.90ghz .",
    "from table  [ table : lcg ] it can be seen that the lcgs with @xmath445 have the best statistical properties from the chosen lcgs .",
    "at the same time , these lcgs are @xmath446 times slower than the other lcgs used .",
    "this is because we have used @xmath447-bit integer arithmetic to compute their internal state and because explicit modulo operation can not be avoided .",
    "as the cpu used does not have the @xmath447-bit integer arithmetic , it has to be implemented in software ( in this case via gcc s _ _ int128 type ) which is much slower than the @xmath448-bit arithmetic wired on cpu .",
    "we will present results for the prngs based on the fibonacci , fibonacci2 and tribonacci word using the different combinations of lcgs from table  [ table : lcg ] .",
    "it includes also the situations where the instances of the same lcg are used .",
    "each instance has its own state .",
    "the lcgs were seeded with the value @xmath188 .",
    "the prngs were warmed up by generating @xmath449 values before statistical tests started .",
    "since the relative frequency of the letters in the aperiodic words differ a lot ( for example for the fibonacci word the ratio of zeroes to ones is given by @xmath450 ) , the warming procedure will guarantee that the state of instances of lcgs will differ even when the same lcgs are used .",
    "even more importantly , the distance between the lcgs is growing as the new output of prngs is generated .",
    "summary of results is in table  [ table : aprng_table ] .",
    "the bigcrush column is using the following notation : the first number indicates how many tests from the bigcrush battery have clearly failed and the optional second number in parenthesis denotes how many tests have suspiciously low @xmath118-value in the range from @xmath451 to @xmath452 .",
    "the practrand column gives the @xmath442 of sample datasize in bytes for which the results of the practrand tests started to be `` very suspicious '' ( @xmath118-values smaller than @xmath443 ) .",
    "the maximum sample data size used was @xmath441 tb @xmath453b .",
    "the time column gives runtime in seconds to generate the first @xmath428 @xmath430-bit words of output on intel i7 - 3520 m cpu running at 2.90ghz .",
    "the source code of the testing programs is in  @xcite .",
    "=        & & & & & bigcrush & practrand & time @xmath428 +      continued from the previous page + & & & & & bigcrush & practrand & time @xmath428 +     +    & & l64_28 & l64_28 & & 0 & 41 & 30.2 + & & l64_32 & l64_28 & & 0(1 ) & 41 & 29.3 + & & l64_39 & l64_28 & & 0 ( 2 ) & 41 & 31 + & & l64_28 & l64_32 & & 0 & 41 & 30.2 + & & l64_32 & l64_32 & & 0 & 41 & 30.1 + & & l64_39 & l64_32 & & 0 & 41 & 30.1 + & & l64_28 & l64_39 & & 0 & 42 & 30.2 + & & l64_32 & l64_39 & & 0 & 40 & 30.5 + & & l64_39 & l64_39 & & 0 & 42 & 30.1 + & & l47 - 115 & l47 - 115 & & 1(1 ) & @xmath45444 & 302 + & & l63 - 25 & l63 - 25 & & 0(1 ) & @xmath45444 & 299 + & & l59 & l59 & & 0(1 ) & 34 & 28.7 + & & l63 & l63 & & 0 & 40 & 29.8 + & & l63 - 25 & l59 & & 0 & 38 & 198 + & & l59 & l63 - 25 & & 0(1 ) & 35 & 134 + & & l63 - 25 & l64_39 & & 0 & @xmath45444 & 199 + & & l64_39 & l63 - 25 & & 0 & 41 & 135 + & & l59 & l64_39 & & 0 & 35 & 30.4 + & & l64_39 & l59 & & 0 & 37 & 31.3 + & & l64_28 & l64_28 & l64_28 & 0 & 40 & 28.4 + & & l64_39 & l64_28 & l64_28 & 0(2 ) & 40 & 27.9 + & & l64_39 & l64_32 & l64_28 & 0 & 39 & 27.5 + & & l64_28 & l64_39 & l64_28 & 0 & 40 & 27.3 + & & l64_32 & l64_39 & l64_28 & 0 & 40 & 27.5 + & & l64_39 & l64_39 & l64_28 & 0 & 40 & 27.4 + & & l64_39 & l64_28 & l64_32 & 0 & 40 & 27.3 + & & l64_28 & l64_39 & l64_32 & 0 & 40 & 27.9 + & & l64_28 & l64_28 & l64_39 & 0(1 ) & 40 & 27.4 + & & l64_32 & l64_28 & l64_39 & 0 & 39 & 27.7 + & & l64_39 & l64_28 & l64_39 & 0 & 40 & 27.3 + & & l64_28 & l64_32 & l64_39 & 0 & 40 & 27.3 + & & l64_28 & l64_39 & l64_39 & 0 & 40 & 27.3 + & & l64_39 & l64_39 & l64_39 & 0 & 40 & 27.4 + & & l47 - 115 & l47 - 115 & l47 - 115 & 0(2 ) & @xmath45444 & 297.0 + & & l63 - 25 & l63 - 25 & l63 - 25 & 0(2 ) & @xmath45444 & 293.0 + & & l59 & l59 & l59 & 0(1 ) & 32 & 27.4 + & & l63 & l63 & l63 & 0 & 38 & 27.3 + & & l63 - 25 & l59 & l64_39 & 0(1 ) & 39 & 113.0 + & & l63 - 25 & l64_39 & l59 & 0 & 32 & 113.0 + & & l59 & l63 - 25 & l64_39 & 0 & 38 & 81.1 + & & l59 & l64_39 & l63 - 25 & 0 & 39 & 158.3 + & & l64_39 & l63 - 25 & l59 & 0 & 31 & 81.0 + & & l64_39 & l59 & l63 - 25 & 0 & 42 & 159.0 + & & l64_28 & l64_28 & l64_28 & 0(2 ) & 42 & 27.2 + & & l64_39 & l64_28 & l64_28 & 0 & 43 & 27.1 + & & l64_39 & l64_32 & l64_28 & 0(1 ) & 42 & 28.0 + & & l64_28 & l64_39 & l64_28 & 0(1 ) & 42 & 28.1 + & & l64_32 & l64_39 & l64_28 & 0 & 42 & 27.1 + & & l64_39 & l64_39 & l64_28 & 0(1 ) & 42 & 27.2 + & & l64_39 & l64_28 & l64_32 & 0 & 43 & 27.1 + & & l64_28 & l64_39 & l64_32 & 0(1 ) & 42 & 27.1 + & & l64_28 & l64_28 & l64_39 & 0 & 42 & 28.0 + & & l64_32 & l64_28 & l64_39 & 0 & 42 & 27.2 + & & l64_39 & l64_28 & l64_39 & 0(1 ) & 43 & 27.1 + & & l64_28 & l64_32 & l64_39 & 0 & 43 & 27.1 + & & l64_28 & l64_39 & l64_39 & 0(2 ) & 42 & 27.3 + & & l64_39 & l64_39 & l64_39 & 0 & 43 & 27.1 + & & l47 - 115 & l47 - 115 & l47 - 115 & 1 & @xmath45444 & 299.0 + & & l63 - 25 & l63 - 25 & l63 - 25 & 0(1 ) & @xmath45444 & 298.0 + & & l59 & l59 & l59 & 0 & 35 & 27.2 + & & l63 & l63 & l63 & 0(1 ) & 41 & 27.2 + & & l63 - 25 & l59 & l64_39 & 0(1 ) & 39 & 172.0 + & & l63 - 25 & l64_39 & l59 & 0(1 ) & 41 & 173.0 + & & l59 & l63 - 25 & l64_39 & 0 & 35 & 106.0 + & & l59 & l64_39 & l63 - 25 & 0 & 34 & 70.5 + & & l64_39 & l63 - 25 & l59 & 0 & 41 & 107.0 + & & l64_39 & l59 & l63 - 25 & 0(1 ) & 40 & 74.3 +    we can make the following observations based on the results in statistical tests :    1 .   the quality of lcgs has improved substantially when we combined them according to infinite words with the welldoc property . this can be seen in the testu01 bigcrush results . while for lcgs @xmath455 to @xmath456 tests have clearly failed ( the only exception is the generator l63 - 25 with two failures",
    " see table  [ table : lcg ] ) , almost all of the bigcrush tests passed .",
    "the worst result was to have one bigcrush test failed for the tribonacci combination and one for the fibonacci combination of l47 - 115 generators .",
    "the likely reason is that the generator l47 - 115 has the shortest period of all tested lcgs .",
    "2 .   the results of the practrand battery",
    "confirm the above findings .",
    "for instance , in the case of lcgs with modulo @xmath431 , the test started to find irregularities in the distribution of the least significant bit of tested prngs output at around @xmath17 tb sample size .",
    "compare it with the sample size of @xmath457 gb to @xmath430 gb when fast plain lcgs started to fail the test .",
    "the practrand battery applies different filters on the input stream and all failures appeared for low1/32 filter where only the least significant bit of the prng output is used .",
    "it corresponds to a known weakness of power - of-2 modulo lcgs : lower bits of the output have significantly smaller period than the lcg itself .",
    "the quality of the prngs can be therefore further improved by combining lcgs that do not show flaws for the least significant bits or by using for example just @xmath441 upper bits of the lcgs output .",
    "the quality of the prng is linked to the quality of the underlying lcg . when looking at the group b in table  [ table : aprng_table ] , we observe that the practrand results of the arising prngs are closely related to the succes of lcgs from table  [ table : lcg ] in the practrand tests .",
    "another interesting observation is that using the instances of the same lcg ( with only sufficiently distinct seeds ) produces as good results as combination of different lcgs ( multipliers and shifts are different , but the modulus is the same ) .",
    "it is just important to make sure that starting states of the lcgs are far apart enough .",
    "refer to the group a in table  [ table : aprng_table ] .",
    "the lower quality lcg dictates the quality of resulting prng .",
    "when mixing lcgs with different quality , use better ones as replacement for more frequent letters in the aperiodic word .",
    "please refer to the group c in table  [ table : aprng_table ] .",
    "for example for the fibonacci word compare first two rows in the group c - the order of lcgs is merely swapped but the difference in the sample size for which practrand starts to fail is @xmath458 .",
    "this is even more significant for the tribonacci based generators where the difference between the worst and best practrand results when reordering the underlying lcgs is given by factor @xmath459 .",
    "on the other hand , results from the group a in table  [ table : aprng_table ] demonstrate that when using generators of similar quality ( same modulus , similar deficiencies ) , the order in which generators are used to substitute the letters of the infinite word does not influence the quality of the resulting generator .",
    "we can also see that the modified fibonacci word ( see remark  [ modifiedfib ] ) does not produce better results than the fibonacci word .",
    "clearly , a regular structure of @xmath17 s on every other position does not help to produce a  better random sequence even if we mix now three lcgs instead of two as in the case of the fibonacci word .",
    "results for the tribonacci word are better than for the fibonacci word .",
    "( we have observed this fact for all ternary arnoux - rauzy words in comparison to sturmian words . )",
    "it seems therefore that mixing three lcgs is better than using just two lcgs , assuming that an infinite word with the welldoc property is used for mixing .",
    "we expect naturally that the better chosen lcgs ( or even some other modern fast linear prngs , e.g. _ mt19937 _ or nonlinear prngs based on the aes cipher ) we combine according to an infinite word with the welldoc property , the better their results in statistical tests will be . 9 .",
    "we have also tested lcgs with @xmath460 .",
    "it has revealed that if the underlying generators have poor statistical properties , then the prng will not be able to mask it . in particular",
    ", you can not expect that prngs  despite their infinite aperiodic nature  will fix the short period problem . once the period of the underlying lcg is exhausted , statistical tests will find irregularities in the output of the prng .    in conclusion , we summarize the main results from the user point of view :    * using different instances of the same lcg to form a  new generator based on the infinite word with the welldoc property gives a generator with improved statistical properties .",
    "* the introduced method of generation of morphic words is very fast and supports parallel processing . *",
    "the period of underlying generators has to be large enough  much larger than the number of needed values . *",
    "when using different types of the underlying lcgs to form a  prng , close attention has to be paid to the right order of the combined lcgs .",
    "the generator with the worst properties should be used to replace the least frequent letter of the aperiodic word . moreover ,",
    "statistical properties of the resulting prng are ruled by the deficiencies of the worst used generator .",
    "* we have used the lcgs only for study reasons . instead of lcgs , the modern generators ( of user choice )",
    "could be used as underlying prng to obtain better results .",
    "we have done testing with two instances ( respectively three for the tribonacci and other arnoux - rauzy words ) of mersenne twister @xmath461 as the underlying generator .",
    "the newly constructed generator has passed all the empirical tests on randomness we have executed ( in contrary to mersenne twister @xmath461 itself which is failing two tests from testu01 s bigcrush battery ) . for the practical usage arnoux - rauzy ( ar ) words",
    "are very appealing since there is an infinite number of ar words and we have implementation in place to create the ar words based on user input ( it can be sought of as the seed ) .",
    "thus , we recommend to create new prngs based on one s favorite modern prngs and the custom ar word .",
    "concerning the combinatorial part of our paper , one of the interesting open questions there is finding large families of infinite words satisfying the welldoc property .",
    "for example , which morphic words have the welldoc property ? also , it seems to be meaningful to study a weaker welldoc property where in definition  [ comb_cond ] instead of every @xmath160 we consider only a particular @xmath3 .",
    "for instance , one can search for words satisfying such a modified welldoc condition for @xmath171 , @xmath440 etc .",
    "another question to be asked is how to construct words with the welldoc property over larger alphabets using words with such a property over smaller alphabets .",
    "regarding statistical tests , it remains to explain why prngs based on infinite words with the welldoc property succeed in tests and to compare their results with other comparably fast generators .",
    "the first author was supported by the czech science foundation grant gar 13 - 03538s , and thanks loral czech republic for the fellowship women in science .",
    "the third author was partially supported by the italian ministry of education ( miur ) , under the prin 201011 project `` automi e linguaggi formali : aspetti matematici e applicativi '' .",
    "the fifth author was supported in part by the academy of finland under grant 251371 and by russian foundation of basic research ( grants 12 - 01 - 00089 and 12 - 01 - 00448 ) .",
    "99 p.  arnoux , g.  rauzy , _ reprsentation gomtrique de suites de complexit @xmath462 _ , bull .",
    "france * 119 * ( 1991 ) , 199215 .",
    "l.  balkov , m.  bucci , a.  de luca , s.  puzynina , _ infinite words with well distributed occurrences_. in : j.  karhumki , a.  lepist , l.  zamboni ( eds . ) , _ combinatorics on words _ , lncs  * 8079 * ( 2013 ) , 4657 , springer",
    ".    e. charlier , t. kamae , s. puzynina , l. zamboni , _ self - shuffling infinite words _",
    ", in preraration .",
    "preliminary version : _ self - shuffling words , _ icalp 2013 , part ii , lncs * 7966 * ( 2013 ) , 113124 , arxiv:1302.3844",
    ". j. hladk , _ random number generators based on the aperiodic infinite words _ , https://github.com/jirka-h/aprng a. de luca , _ sturmian words : structure , combinatorics , and their arithmetics _ , theoret .",
    "* 183 * ( 1997 ) , 4582 .",
    "doty - humphrey , _ practically random : c++ library of statistical tests for rngs _ , https://sourceforge.net/projects/pracrand ch .",
    "doty - humphrey , _ practically random : specific tests in practrand _ , http://pracrand.sourceforge.net/tests_engines.txt ch .",
    "doty - humphrey , j. hladk _ practically random : discussion of testing results _ , http://sourceforge.net/p/pracrand/discussion/366935/thread/a2eaad12 x.  droubay , j.  justin , g.  pirillo , _ episturmian words and some constructions by de luca and rauzy _ , theoret .",
    "sci .  * 255 * ( 2001 ) , 539553 .",
    "p. lecuyer .",
    "_ random number generation . _ in j. e. gentle , w. haerdle , and y. mori , editors , handbook of computational statistics , 3571 .",
    "springer - verlag , berlin , second edition , 2012 .",
    "p. lecuyer , b. oreshkin , and r. simard , _ random numbers for parallel computers : requirements and methods _",
    "( 2014 ) http://www.iro.umontreal.ca/  lecuyer / myftp / papers / parallel - rng - imacs.pdf p. lecuyer , r. simard , _ testu01 : a c library for empirical testing of random number generators _ , acm trans .",
    "* 33(4 ) * ( 2007 ) .",
    "guimond , ji patera , _ proving the deterministic period breaking of linear congruential generators using two tile quasicrystals _ , math . comput .",
    "* 71(237 ) * ( 2002 ) , 319332 .",
    "guimond , jan patera , ji patera , _ combining random number generators using cut - and - project sequences _ , czechoslovak journal of physics * 51 * ( 2001 ) , 305311 .",
    "guimond , jan patera , ji patera , _ statistical properties and implementation of aperiodic pseudorandom number generators _ , applied numerical mathematics * 46(3 - 4 ) * ( 2003 ) , 295318 .",
    "m. lothaire , _ algebraic combinatorics on words _ , encyclopedia of mathematics and its applications 90 , cambridge university press , 2002 .",
    "g. marsaglia , _ random numbers fall mainly in the planes_,proc .",
    "* 61 ( 1 ) * ( 1968 ) , 2528 .",
    "m. morse , g. a. hedlund , _ symbolic dynamics _ ,",
    "j. math . * 60 * ( 1938 ) , 815866 .",
    "m.  morse , g. a. hedlund , _ symbolic dynamics ii : sturmian trajectories _ ,",
    "amer . j. math . *",
    "62 ( 1 ) * ( 1940 ) , 142 ."
  ],
  "abstract_text": [
    "<S> in this paper we study how certain families of aperiodic infinite words can be used to produce aperiodic pseudorandom number generators ( prngs ) with good statistical behavior . </S>",
    "<S> we introduce the _ </S>",
    "<S> well distributed occurrences _ ( welldoc ) combinatorial property for infinite words , which guarantees absence of the lattice structure defect in related pseudorandom number generators . </S>",
    "<S> an infinite word @xmath0 on a @xmath1-ary alphabet has the welldoc property if , for each factor @xmath2 of @xmath0 , positive integer @xmath3 , and vector @xmath4 , there is an occurrence of @xmath2 such that the parikh vector of the prefix of @xmath0 preceding such occurrence is congruent to @xmath5 modulo @xmath3 . </S>",
    "<S> ( the parikh vector of a  finite word @xmath6 over an alphabet @xmath7 has its @xmath8-th component equal to the number of occurrences of the @xmath8-th letter of @xmath7 in @xmath6 . ) </S>",
    "<S> we prove that sturmian words , and more generally arnoux - rauzy words and some morphic images of them , have the welldoc property . using the testu01  @xcite and practrand  @xcite statistical tests </S>",
    "<S> , we moreover show that not only the lattice structure is absent , but also other important properties of prngs are improved when linear congruential generators are combined using infinite words having the welldoc property .    </S>",
    "<S> [ multiblock footnote omitted ]    [ multiblock footnote omitted ]    [ multiblock footnote omitted ]    [ multiblock footnote omitted ] </S>"
  ]
}