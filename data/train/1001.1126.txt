{
  "article_text": [
    "let @xmath1 be a two - dimensional projective toric variety , and let @xmath2 be a generically finite rational map .",
    "hence , @xmath3 is a hypersurface . in @xcite and @xcite",
    "we showed how to compute an implicit equation for @xmath4 , assuming that the base locus @xmath5 of @xmath6 is finite and locally an almost complete intersection .",
    "the work in @xcite and @xcite is a further generalization of the results in @xcite on implicitization of rational hypersurfaces via approximation complexes .",
    "we showed in @xcite how to compute a symbolic matrix of linear syzygies @xmath7 , called _ representation matrix _ of @xmath4 , with the property that , given a point @xmath8 , the rank of @xmath9 drops if @xmath10 lies in the surface @xmath4 .",
    "when the base locus @xmath5 is locally a complete intersection , we get that the rank of @xmath9 drops if and only if @xmath10 lies in the surface @xmath11 .",
    "we begin by recalling the notion of a representation matrix .",
    "let @xmath12 be a hypersurface .",
    "a matrix @xmath7 with entries in the polynomial ring @xmath13 $ ] is called a _ representation matrix _ of @xmath4 if it is generically of full rank and if the rank of @xmath7 evaluated in a point @xmath10 of @xmath14 drops if and only if the point @xmath10 lies on @xmath4 .",
    "it follows immediately that a matrix @xmath7 represents @xmath4 if and only if the greatest common divisor @xmath15 of all its minors of maximal size is a power of a homogeneous implicit equation @xmath16 $ ] of @xmath4 .",
    "when the base locus is locally an almost complete intersection , we can construct a a matrix @xmath7 such that @xmath15 factors as @xmath17 where @xmath18 and @xmath19 $ ] . in (",
    "3.2 ) , we gave a description of the surface @xmath20 in this paper we present an implementation of our results in the computer aided software macaulay2 @xcite.from a practical point of view our results are a major improvement , as it makes the method applicable for a wider range of parametrizations ( for example , by avoiding unnecessary base points with bad properties ) and leads to significantly smaller representation matrices .",
    "there are several advantages of this perspective .",
    "the method works in a very general setting and makes only minimal assumptions on the parametrization .",
    "in particular , as we have mentioned , it works well in the presence of `` nice '' base points . unlike the method of toric resultants ( cf .",
    "for example @xcite ) , we do not have to extract a maximal minor of unknown size , since the matrices are generically of full rank .",
    "the monomial structure of the parametrization is exploited , in @xcite we defined    [ defnf ] given a list of polynomials @xmath21 , we define @xmath22 the convex hull of the union of the newton polytopes of @xmath23 , and we will refer to this polytope as the _ newton polytope _ of the list @xmath21 . when @xmath6 denotes the rational map defining @xmath4 , we will write @xmath24 , and we will refer to it as the newton polytope of @xmath6 .    in this terms , in our algorithm we fully exploit the structure of @xmath25 , so one obtains much better results for sparse parametrizations , both in terms of computation time and in terms of the size of the representation matrix .",
    "moreover , it subsumes the known method of approximation complexes in the case of dense homogeneous parametrizations .",
    "one important point is that representation matrices can be efficiently constructed by solving a linear system of relatively small size ( in our case @xmath26 equations in @xmath27 variables ) .",
    "this means that their computation is much faster than the computation of the implicit equation and they are thus an interesting alternative as an implicit representation of the surface .    on the other hand , there are a few disadvantages . unlike with the toric resultant or the method of moving planes and surfaces , the matrix representations are not square and the matrices involved are generally bigger than with the method of moving planes and surfaces .",
    "it is important to remark that those disadvantages are inherent to the choice of the method : a square matrix built from linear syzygies does not exist in general and it is an automatic consequence that if one only uses linear syzygies to construct the matrix , it has to be bigger than a matrix which also uses entries of higher degree ( see @xcite ) .",
    "the choice of the method to use depends very much on the given parametrization and on what one needs to do with the matrix representation .",
    "[ interestingexample ] here we give an example , where we fully exploit the structure of @xmath25 .",
    "take @xmath28 .",
    "this is a very sparse parametrization , and we have in this case , there is no smaller lattice homothety of @xmath25 ( cf .",
    "@xcite for a wider discussion on this subject ) .",
    "the coordinate ring is @xmath29/j$ ] , where @xmath30 and the new base - point - free parametrization @xmath31 is given by @xmath32 .",
    "the newton polytope looks as follows .        for @xmath33 we can compute the matrix of the first map of the graded piece of degree @xmath34 of the approximation complex of cycles @xmath35",
    "( see for example ( * ? ? ? * sec 3.1 ) ) , which is a @xmath36-matrix .",
    "the greatest common divisor of the @xmath37-minors of this matrix is the homogeneous implicit equation of the surface ; it is of degree 6 in the variables @xmath38    in this example we could have considered the parametrization as a bihomogeneous map either of bidegree @xmath39 or of bidegree @xmath40 , i.e. we could have chosen the corresponding rectangles instead of @xmath25 .",
    "this leads to a more complicated coordinate ring in @xmath41 ( resp .",
    "@xmath42 ) variables and @xmath43 ( resp .",
    "@xmath44 ) generators of @xmath45 and to bigger matrices ( of size @xmath46 in both cases ) .",
    "even more importantly , the parametrizations will have a non - lci base point and the matrices do not represent the implicit equation but a multiple of it ( of degree @xmath47 ) . instead , if we consider the map as a homogeneous map of degree @xmath48 , the results are even worse : for @xmath49 , the @xmath50-matrix @xmath51 represents a multiple of the implicit equation of degree @xmath52 .",
    "to sum up , in this example the toric version of the method of approximation complexes works well , whereas it fails over @xmath53 and @xmath54 .",
    "this shows that the extension of the method to toric varieties really is a generalization and makes the method applicable to a larger class of parametrizations .",
    "interestingly , we can even do better than with @xmath25 by choosing a smaller polytope .",
    "the philosophy is that the choice of the optimal polytope is a compromise between two criteria : keep the simplicity of the polytope in order not to make the the ring @xmath55 too complicated , and respect the sparseness of the parametrization ( i.e. keep the polytope close to the newton polytope ) so that no base points appear which are not local complete intersections .",
    "so let us repeat the same example with another polytope @xmath56 , which is small enough to reduce the size of the matrix but which only adds well - behaved ( i.e. local complete intersection ) base points :        the newton polytope @xmath25 is contained in @xmath57 , so the parametrization will factor through the toric variety associated to @xmath56 , more precisely we obtain a new parametrization defined by @xmath58 over the coordinate ring @xmath59/j$ ] with @xmath60 .",
    "the optimal bound is @xmath61 and in this degree the implicit equation is represented directly without extraneous factors by a @xmath62-matrix , which is smaller than the @xmath36 we had before .",
    "in this section we show how to compute a matrix representation and the implicit equation with the method developed in @xcite and @xcite , using the computer algebra system macaulay2 @xcite . as it is probably the most interesting case from a practical point of view , we restrict our computations to parametrizations of a toric surface .",
    "however , the method can be adapted to the @xmath63-dimensional toric case .",
    "moreover , we are not claiming that our implementation is optimized for efficiency ; anyone trying to implement the method to solve computationally involved examples is well - advised to give more ample consideration to this issue .",
    "for example , in the toric case there are better suited software systems to compute the generators of the toric ideal @xmath45 , see @xcite .          .... i2 : s = qq[s , u , t , v ] ; i3 : e1=2 ; i4 : e2=6 ; i5 : f1=s*u*t^6 + 2*u^2*v^6            6      2 6 o5 = s*u*t   + 2u v i6 : f2=s*u*t^5*v-3*s*u*t^3*v^3            5           3 3 o6 = s*u*t v - 3s*u*t v i7 : f3=s*u*t^4*v^2 + 5*s^2*t^6         2 6         4 2 o7 = 5s t   + s*u*t v i8 : f4=2*u^2*v^6+s^2*t^6        2 6      2 6 o8 = s t   + 2u v ....                  the reader can experiment with the implementation simply by changing the definition of the polynomials and their degrees , the rest of the code being identical .",
    "we first set up the list @xmath69 of monomials @xmath70 of bidegree @xmath71 . in the toric case ,",
    "this list should only contain the monomials corresponding to points in the newton polytope @xmath72 .",
    "we compute the ideal @xmath45 and the quotient ring @xmath55 .",
    "this is done by a grbner basis computation which works well for examples of small degree , but which should be replaced by a matrix formula in more complicated examples . in the toric case ,",
    "there exist specialized software systems such as @xcite to compute the ideal @xmath45 .    ....",
    "i24 : sx = qq[s , u , t , v , w , x_0 .. x_l , monomialorder=>eliminate 5 ] o24 = sx o24 : polynomialring i25 : x= { } ; i26 : st = matrix { st } ;                1        8 o26 : matrix s   < --- s i27 : f = sub(f , sx ) o27 = | sut6 + 2u2v6 sut5v-3sut3v3 5s2t6+sut4v2 s2t6 + 2u2v6 |                 1         4 o27 : matrix sx   <",
    "--- sx i28 : st = sub(st , sx ) o28 = | sut6 u2v6 sut5v sut3v3 s2t6 sut4v2 s2t6 u2v6 |                 1         8 o28 : matrix sx   < --- sx i29 : te=1 ; i30 : for i from 0 to l do ( te = te*x_i ) i31 : j = ideal(1-w*te ) o31 = ideal(- w*x x x x x x x x   + 1 )                   0 1 2 3 4 5 6 7 o31 : ideal of sx i32 : for i from 0 to l do (            j = j+ideal ( x_i - st_(0,i ) )            ) i33 : j= selectinsubring(1,gens gb j ) o33 = | x_4-x_6 x_1-x_7 x_3 ^ 2-x_6x_7 x_2x_3-x_5 ^ 2 x_0x_3-x_2x_5         ---------------------------------------------------------        x_2 ^ 2-x_0x_5 x_5 ^ 3-x_0x_6x_7 x_3x_5 ^ 2-x_2x_6x_7 |                 1         8 o33 : matrix sx   < --- sx i34 : r = qq[x_0 .. x_l ] o34 = r o34 : polynomialring i35 : j = sub(j , r ) o35 = | x_4-x_6 x_1-x_7 x_3 ^ 2-x_6x_7 x_2x_3-x_5 ^ 2 x_0x_3-x_2x_5         ---------------------------------------------------------        x_2 ^ 2-x_0x_5 x_5 ^ 3-x_0x_6x_7 x_3x_5 ^ 2-x_2x_6x_7 |                1        8 o35 : matrix r   < --- r i36 : a = r / ideal(j )    o36 = a o36 : quotientring ....    next , we set up the list @xmath73 of monomials @xmath70 of bidegree @xmath74 and the list @xmath5 of the corresponding elements of the quotient ring @xmath55 . in the toric case",
    ", this list should only contain the monomials corresponding to points in the newton polytope @xmath25 .",
    ".... i41 : x = matrix { x } ;                 1         8 o41 : matrix sx   < --- sx i42 : x = sub(x , sx ) o42 = | x_0 x_1 x_2 x_3 x_4 x_5 x_6 x_7 |                 1         8 o42 : matrix sx   < --- sxx = matrix { x } ; i43 : ( m , c)=coefficients(f , variables=>{s_sx , u_sx , t_sx , v_sx},monomials=>st ) o43 = ( | sut6 u2v6 sut5v sut3v3 s2t6 sut4v2 s2t6 u2v6 | , { 8 } | 1 0   0 0 | )                                                           { 8 } | 0 0   0 0 |                                                           { 8 } | 0 1   0 0 |                                                           { 8 } | 0 -3 0 0 |                                                           { 8 }",
    "| 0 0   0 0 |                                                           { 8 } | 0 0   1 0 |                                                           { 8 } | 0 0   5 1 |                                                           { 8 } | 2 0   0 2 | o43 : sequence i44 : g = x*c o44 = | x_0 + 2x_7 x_2 - 3x_3 x_5 + 5x_6 x_6 + 2x_7 |                 1         4 o44 : matrix sx   < --- sx i45",
    ": g = matrix{{g_(0,0),g_(0,1),g_(0,2),g_(0,3 ) } } o45 = | x_0 + 2x_7 x_2 - 3x_3 x_5 + 5x_6 x_6 + 2x_7 |                 1         4 o45 : matrix sx",
    "i46 : g = sub(g , a ) o46 = | x_0 + 2x_7 x_2 - 3x_3 x_5 + 5x_6 x_6 + 2x_7 |                1        4 o46 : matrix a   < --- a ....    in the following , we construct the matrix representation @xmath7 . for simplicity , we compute the whole module @xmath76 , which is not necessary as we only need the graded part @xmath77 . in complicated examples , one should compute only this graded part by directly solving a linear system in degree @xmath34 .",
    "remark that the best bound @xmath78 depends on the parametrization .",
    ".... i47 : use a o47 = a o47 : quotientring i48 : z0=a^1 ; i49 : z1=kernel koszul(1,g ) ; i50 : z2=kernel koszul(2,g ) ; i51 : z3=kernel koszul(3,g ) ; i52 : nu=-1 o52 = -1 i53 : d=1 o53 = 1 i54 : hfnu = 1 o54 = 1 i55 : while hfnu !",
    "= 0 do (        nu = nu+1 ;        hfz0nu = hilbertfunction(nu , z0 ) ;        hfz1nu = hilbertfunction(nu+d , z1 ) ;        hfz2nu = hilbertfunction(nu+2*d , z2 ) ;        hfz3nu = hilbertfunction(nu+3*d , z3 ) ;        hfnu = hfz0nu - hfz1nu+hfz2nu - hfz3nu ;         ) ; i56 : nu o56 = 2 i57 : hfz0nu o57 = 17 i58 : hfz1nu o58 = 34 i59 : hfz2nu o59 = 23 i60 : hfz3nu o60 = 6 i61 : hfnu o61 = 0    i62 : hilbertfunction(nu+d , z1)-2*hilbertfunction(nu+2*d , z2)+        3*hilbertfunction(nu+3*d , z3 ) o62 = 6 i63 : gg = ideal g o63 = ideal ( x   + 2x , x   - 3x , x   + 5x , x   + 2x )                0      7    2      3    5      6    6      7 o63 : ideal of a i64 : ggsat = saturate(gg , ideal ( x_0 .. x_l ) ) o64 = ideal 1 o64 : ideal of a i65 : degrees gens ggsat o65 = { { { 0 } } , { { 0 } } } o65 : list i66 : h = ggsat / gg o66 = subquotient ( | 1 | , | x_0 + 2x_7 x_2 - 3x_3 x_5 + 5x_6 x_6 + 2x_7",
    "| )                                  1 o66 : a - module , subquotient of a i67 : degrees gens h o67 = { { { 0 } } , { { 0 } } } o67 : list i68 : s = a[t1,t2,t3,t4 ] o68 = s o68 : polynomialring i69 : g = sub(g , s ) ;                1        4 o69 : matrix s   < --- s i70 : z1nu = super basis(nu+d , z1 ) ;                 4        34 o70 : matrix a   < --- a i71 : tnu = matrix{{t1,t2,t3,t4}}*substitute(z1nu , s ) ;                1        34 o71 : matrix s   < --- s i72 :         lll = matrix { { x_0 .. x_l } } o72 = | x_0 x_7 x_2 x_3 x_6 x_5 x_6 x_7 |                1        8 o72 : matrix a   < --- a i73 : lll = sub(lll , s ) o73 = | x_0 x_7 x_2 x_3 x_6 x_5 x_6 x_7 |                1        8 o73 : matrix s   < --- s i74 : ll= { } o74 = { } o74 : list i75 : for i from 0 to l do { ll = append(ll , lll_(0,i ) ) } i76 : ( m , m)=coefficients(tnu , variables=>ll , monomials=>substitute(basis(nu , a),s ) ) ; i77 : m ;                  17        34 o77 : matrix s    < --- s ....        ....    i78 : t = qq[t1,t2,t3,t4 ] o78 = t o78 : polynomialring i79 : listoftand0 = { t1,t2,t3,t4 } o79 = { t1 , t2 , t3 , t4 } o79 : list i80",
    ": for i from 0 to l do { listoftand0=append(listoftand0,0 ) } ; i81 : p = map(t , s , listoftand0 )   o81 = map(t , s,{t1 , t2 , t3 , t4 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ) o81 : ringmap t < --- s i82 : n = maxcol(p(m ) ) ;                 17        17 o82 : matrix t    < --- t i83 : eq = det(n ) ; factor eq ...."
  ],
  "abstract_text": [
    "<S> in this paper we present an algorithm for computing a _ matrix representation _ for a surface in @xmath0 parametrized over a 2-dimensional toric variety @xmath1 . </S>",
    "<S> this algorithm follows the ideas of @xcite and it was implemented in macaulay2 @xcite . </S>",
    "<S> we showed in @xcite that such a surface can be represented by a matrix of linear syzygies if the base points are finite in number and form locally a complete intersection , and in @xcite we generalized this to the case where the base locus is not necessarily a local complete intersection . </S>",
    "<S> the key point consists in exploiting the sparse structure of the parametrization , which allows us to obtain significantly smaller matrices than in the homogeneous case . </S>"
  ]
}