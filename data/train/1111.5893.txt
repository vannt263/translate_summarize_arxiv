{
  "article_text": [
    "nearest neighbor searching has applications in knowledge discovery , data mining , pattern classification , machine learning , data compression , multimedia databases , and document retrieval .    from the perspective of worst - case performance , an ideal solution for",
    "the nearest neighbor search would be to preprocess the points in @xmath22 time , into a data structure requiring @xmath23 space so that any query can be answered in @xmath24 time . in @xmath25 ,",
    "this is possible by sorting @xmath0 , and then using binary search to answer queries . in @xmath26 ,",
    "this is possible by computing the voronoi diagram for @xmath0 and then using an algorithm for planar point location to find the cell containing the query point .",
    "however , in higher dimensions , the worst - case complexity of the voronoi diagram grows as @xmath27 .",
    "specifically , no known method achieves the simultaneous goals of roughly linear space and logarithmic query time in higher dimensional spaces .",
    "this is the primary reason in resorting to approximation algorithms .",
    "given a set @xmath0 of @xmath1 points , a point @xmath28 is an @xmath4-approximate nearest neighbor ( ann ) of a point @xmath29 , if the distance between @xmath16 and @xmath12 is at most @xmath4-times the euclidean distance between @xmath16 and its nearest neighbor in @xmath0 .",
    "however , even in approximation schemes , usually the space , time , and query time complexities grow exponential in @xmath4 .",
    "netanyahu et al .",
    ", @xcite presents an algorithm to find an ann of a query point @xmath16 in time @xmath30 ( @xmath31 relies on @xmath2 and @xmath4 ) , with a data structure of size @xmath32 constructed in @xmath33 time .",
    "their data structure , bbd tree , is based on the hierarchical decomposition of space : subdivide space into a collection of cells , each of which is either a d - dimensional rectangle or a set - theoretic difference of two rectangles , one enclosed within another .",
    "the bbd - tree is based on a spatial decomposition that achieves both exponential cardinality decrease ( like kd - trees ) and the geometric size reduction ( like quadtrees ) as one descends the tree . after finding the leaf cell containing the query point @xmath16 in @xmath24 time by a simple descend through the tree",
    ", one can find @xmath16 s approximate nearest neighbors : enumerate the leaf cells in increasing order of distance from @xmath16 until distance to the point @xmath12 associated with a cell exceeds @xmath34 where @xmath35 is the closest point to @xmath16 in the output so far .",
    "the algorithm from arya et al .",
    ", @xcite minimizes the number and complexity of cells by constructing an approximate voronoi diagram of @xmath0 during the preprocessing phase .",
    "this yields a data structure of @xmath36 space that can answer @xmath4-ann queries in time @xmath37 for a space - query time trade - off parameter @xmath38 , where @xmath39 . the principal reduction in space arises from a form of deterministic sampling over bbd - tree .",
    "the approach also creates cells more economically using well - separated pair decomposition ( wspd ) of the points by generating them along the bisector between well - separated pairs . in the case",
    "@xmath40 , the additional @xmath41 factor in space complexity can be avoided to have a data structure that answers queries in @xmath42 time with @xmath43 space ( refer arya et al . ,",
    "@xcite and chan @xcite ) .",
    "har - peled @xcite and sabharwal et al .",
    ", @xcite suggests an approach to reduce the query version of ann problem to point location in balls .    in this paper",
    ", we are interested in querying for @xmath4-anns but the definition of @xmath4-ann is bit varied from the literature .",
    "to our knowledge , this seems to be the first paper to give an algorithm for the following variant definition of @xmath4-ann . for a query point @xmath16 ,",
    "the output of our algorithm is a set @xmath5 wherein : @xmath8 , @xmath9 a point @xmath12 in @xmath44 such that @xmath11 and the nearest neighbor of @xmath12 is @xmath13 , and @xmath9 a @xmath14 such that @xmath15 is a nearest neighbor of @xmath16 .    as shown in fig .",
    "[ fig : def ] , let @xmath45 be the set @xmath0 . consider a query point @xmath16 that belongs to the voronoi region of @xmath46 .",
    "suppose @xmath47 . the site @xmath48 is in @xmath7 as there exists a point @xmath49 such that @xmath50 and @xmath48 is the nearest neighbor of @xmath49 . similarly , the site @xmath46 is in @xmath7 becuase of @xmath51 and @xmath46 is the nearest neighbor of @xmath16 .",
    "consistent with the definition of @xmath4-ann , not all sites that correspond to regions intersecting with the @xmath4-radius ball centered at @xmath16 are in @xmath7 ( for example , @xmath52 ) .",
    "we first construct the voronoi diagram @xmath53 of @xmath0 .",
    "we do this by space partitioning @xmath53 ( contained in a large bounding hyperbox ) with smaller hyperboxes and organizing hyperboxes into a box tree data structure , termed as _",
    "main box tree_. we also cover specific regions of @xmath53 with hyperboxes whose bounding planes are not parallel to coordinate - planes and construct a set of corresponding box tree data structures , each of which is termed as an _ auxiliary box tree_. the advantage is that the query phase does not require data structures corresponding to @xmath53 .",
    "it only requires main and auxiliary box tree data structures .",
    "although our algorithm does not improve time or space bounds of previous algorithms , it seems to provide another direction ( detailed in the section [ sect : conclu ] ) for approaching query version of ann finding problem .",
    "this is the main motivation in listing this result .",
    "our algorithm first constructs the voronoi diagram @xmath53 corresponding to the input set @xmath0 of points in @xmath2-dimensional euclidean metric space . before deleting data structures corresponding to @xmath53",
    ", we construct a set of box trees from @xmath53 .",
    "we enclose a sufficiently large space of @xmath53 in a bounding hyperbox @xmath54 so that every site in @xmath0 is an ann to any point exterior to @xmath54 .",
    "we spatially partition @xmath54 into hyperboxes of volume @xmath19 ( a real number that relies on @xmath4 ) , and with each such hyperbox @xmath55 we associate sites corresponding to voronoi cells with which @xmath55 intersects .",
    "we organize these hyperboxes into a box tree , termed as the _ main box tree _ ( refer fig . [",
    "fig : datastr ] ) .",
    "whenever the hyperbox @xmath55 stored at any leaf of main box tree is associated with multiple sites , we cover the region enclosed by @xmath55 with multiple hyperboxes , termed as _",
    "auxiliary hyperboxes_. every such hyperbox is obtained by rotating @xmath55 w.r.t .",
    "its center by a distinct discrete angle . by partitioning the region enclosed by each of these auxiliary hyperboxes",
    ", we construct a box tree , termed as an _ auxiliary box tree _ ( refer fig . [",
    "fig : datastr ] ) . like in the main box tree ,",
    "leaf node @xmath56 of every auxiliary box tree is associated with voronoi sites corresponding to voronoi cells that intersect with the hyperbox at @xmath56 .",
    "each internal / leaf node of main / auxiliary box tree implicitly associated with the hyperbox that corresponds to union of hyperboxes that are associated with its children . also , every internal node @xmath57 has information necessary to locate @xmath16 in the hyperbox associated with a specific child of @xmath57 .",
    "given a query point @xmath16 for which the user is interested in finding anns , we descend through the height of the main box tree in finding the leaf node @xmath56 whose hyperbox @xmath55 contains @xmath16 . if @xmath55 is associated with one and only one voronoi site , we have determined the exact neighbor of @xmath16 .",
    "otherwise , similar to traversing the main box tree , we traverse each of the auxiliary box trees associated with leaf node @xmath56 so as to confine the cardinality of set @xmath7 output by the algorithm , as detailed below . essentially , during the query phase we rely on main and auxiliary box trees rather than on data structures that store voronoi structure .",
    "the preprocessing phase starts by constructing a voronoi diagram .",
    "the box tree data structure is a trivial generalization of quadtree data structure to higher dimensions .",
    "it is a rooted tree in which every internal node has @xmath58 children .",
    "the root node of the main box tree corresponds to a hyperbox that is the union of all the hyperboxes into which @xmath54 is partitioned .",
    "the children of any internal node @xmath57 are obtained by subdividing hyperbox @xmath55 corresponding to @xmath57 with the hyperplanes parallel to coordinate planes , which bisect each dimension of @xmath55 . in other words ,",
    "every internal node @xmath57 is partitioned into hyperboxes , and each of them is implicitly stored at a distinct child of @xmath57 .",
    "note that since the box is symmetric the direction of rotation is not important .",
    "each leaf node @xmath56 of the main box tree stores the sites corresponding to voronoi cells that intersect with the hyperbox at @xmath56 as satellite data .",
    "a point in @xmath0 belongs to which half - space defined by a hyperplane is decided by trivial means .",
    "this elementary operation assists in associating sites with the leaf nodes .",
    "the recursive definition of the box tree immediately translates into a recursive algorithm : partition the hyperbox associated with a node @xmath57 into @xmath58 hyperboxes using hyperplanes parallel to coordinate - planes .",
    "the recursion stops at a leaf node @xmath56 of the main box tree whenever the volume of hyperbox @xmath55 at @xmath56 is less than a real number @xmath19 ( which is defined in terms of @xmath4 ) .",
    "consider the case in which the hyperbox @xmath55 at a leaf node @xmath56 is associated with multiple sites but the volume of @xmath55 is less than @xmath19 . in this case , we associate a linked list of auxiliary box trees to leaf node @xmath56 .",
    "the root of each of these auxiliary box trees correspond to an auxiliary hyperbox which is constructed by rotating @xmath55 by a solid angle @xmath4 w.r.t .",
    "its center .",
    "however , since a query point that belongs to @xmath55 does not necessarily contain in any such auxiliary hyperbox , we double the size of @xmath55 before orienting it .",
    "let @xmath59 be the hyperbox that is obtained by scaling @xmath55 by two w.r.t . its center ( refer fig . [",
    "fig : algo ] ) .",
    "the root of the first auxiliary box tree in the linked list is associated with a hyperbox @xmath60 , that is obtained by rotating @xmath59 w.r.t its center by @xmath4 solid angle .",
    "the next auxiliary box tree in the linked list is obtained by rotating @xmath60 by @xmath4 etc .",
    ", so that no two of the auxiliary hyperboxes corresponding to two distinct auxiliary box trees are oriented with the same angle . in other words ,",
    "the length of the linked list associated with @xmath56 is @xmath61 .",
    "each of the auxiliary box trees are defined similarly as in main box tree : partition the hyperbox associated with a node @xmath57 into @xmath58 hyperboxes using hyperplanes parallel to coordinate axes .",
    "the recursion stops at a leaf node @xmath56 whenever the volume of a hyperbox corresponding to a node is less than @xmath19 .",
    "given a query point @xmath16 in @xmath2-dimensional euclidean space , we intend to find its anns .",
    "first , we find the leaf node in main box tree that contains @xmath16 .",
    "this is accomplished by traversing one node at each level of the main box tree .",
    "the satellite data associated with internal nodes assists in branching to a particular child of @xmath57 . the same could be accomplished in @xmath62 time using hashing i.e. , by maintaining a hash table rather than a box tree .",
    "however , to maintain the consistency between primary and secondary level data structures , we organize primary level data structure as a box tree .",
    "let @xmath16 belongs to a hyperbox @xmath55 associated with a leaf node @xmath56 of the main box tree .",
    "if @xmath55 is associated with a single site @xmath13 , then it is immediate to conclude that the exact neighbor of @xmath16 is @xmath13 .",
    "otherwise , we traverse through the linked list @xmath63 referred by node @xmath56 .",
    "as mentioned earlier , each node of the linked list refers to an auxiliary box tree .",
    "similar to the traversal of main box tree , we traverse each of the auxiliary box trees referred by @xmath63 , say @xmath64 .",
    "let @xmath65 be the set that comprises of hyperboxes that contain @xmath16 .",
    "also , let @xmath66 be the sets of sites respectively associated with hyperboxes in @xmath67 .",
    "the algorithm returns the set @xmath68 as the set of anns to @xmath16 .",
    "from the analysis mentioned in section [ sect : analysis ] , it is immediate that in both the preprocessing phase and in the query phase algorithm always terminates .",
    "we have chosen the size of bounding box @xmath54 so that the algorithm is correct for all the query points exterior to @xmath54",
    ".    let @xmath16 belongs to a hyperbox @xmath55 that corresponds to a leaf node @xmath56 of the main box tree . if @xmath55 is associated with a single site , according to the definition of voronoi diagram , the algorithm outputs the nearest neighbor of @xmath16 .",
    "otherwise , the proof of correctness follows .",
    "we are ensuring that the hyperbox corresponding to the root of every auxiliary box tree contains @xmath16 by doubling the size of @xmath55 .",
    "the intersection of all the auxiliary hyperboxes associated with any leaf node @xmath56 together yield a ( approximate ) hypersphere @xmath69 whose boundary consists of hyperboxes of size @xmath4 in @xmath70 .",
    "given the volume of the byperbox is @xmath19 , the length of the main diagonal of a hyperbox is @xmath71 .",
    "hence , the diameter of hyperball @xmath69 is less than or equal to @xmath72 .",
    "let @xmath7 be the set of sites whose voronoi regions intersect with the hyperball @xmath69 .",
    "suppose @xmath16 lies in @xmath69 . in this case",
    ", though the output of the query algorithm does not have any site from the set @xmath73 , no auxiliary box tree eliminates any site in @xmath7 . by choosing the diameter of @xmath69 as @xmath4",
    ", every site in @xmath7 is an ann of @xmath16 .",
    "hence , we choose @xmath19 as @xmath20 .",
    "consider the other case in which @xmath16 does not lie in @xmath69 . in this case ,",
    "set intersection of sites associated to multiple auxiliary hyperboxes together define the anns of @xmath16 .",
    "since the main diagonal lengths of every hyperbox that is implicitly stored at any leaf node is upper bounded by @xmath4 , the correctness is ensured again .",
    "[ ] assuming uniform distribution of @xmath0 in @xmath44 euclidean metric space , the expected cardinality of set @xmath7 is @xmath74 . here , @xmath75 is the radius of the smallest hyperball that contains @xmath0 .",
    "first note that the hyperball of radius @xmath75 has volume @xmath76 , where @xmath77 . due to uniform distribution of @xmath0 ,",
    "the expected number of sites per unit volume are @xmath78 . since the diameter of the hyperball @xmath69 is @xmath4 , the number of sites in @xmath69 are @xmath79 .",
    "[ depthmainboxtree ] the depth of the main box tree is at most @xmath80 , where @xmath21 is the volume of the initial bounding box and @xmath19 is the volume tolerance of the smallest possible box .",
    "the box volume goes down by @xmath58 for every level , therefore the volume of the box at depth @xmath81 is @xmath82 .",
    "we know that the volume @xmath19 is possible at one less than the maximum depth . therefore , the smallest possible box volume is , @xmath83 .",
    "hence , for any hyperbox in the main box tree @xmath84 .",
    "[ maxmb - nodes ] the maximum possible number of nodes in the main box tree are @xmath85    if we consider the complete box tree , the number of boxes in the box tree at the @xmath81th level are @xmath86 .",
    "therefore , the total number of nodes in the main box tree are @xmath87(@xmath88 terms ) , summing over this geometric progression yields the result .",
    "[ reordepth ] the maximum depth of any auxiliary box tree is @xmath62 .",
    "we know that the volume of any hyperbox @xmath55 at a leaf node of main box tree is @xmath19 . since we scale @xmath55 by two , the volume of the resultant hyperbox at the root of auxiliary box tree is @xmath89 .",
    "then from lemma [ depthmainboxtree ] , the depth of the auxiliary box tree is at most @xmath90 , which is @xmath62 .",
    "[ reorspace ] the maximum number of nodes in any auxiliary box tree are @xmath91 .",
    "this is immediate by substituting @xmath92 in the statment of lemma [ maxmb - nodes ] .",
    "given the voronoi diagram of @xmath0 , the space complexity in constructing all box trees together is @xmath17 .",
    "the main box tree is a complete tree and the number of leaf nodes are @xmath93 .",
    "also , each leaf may have a list of length @xmath61 . from lemma [ reorspace ]",
    ", the space complexity is as stated .",
    "the preprocessing time in constructing all the box trees is @xmath94 .",
    "since only constant time is spent in creating each node of every box tree , the time complexity is same as the space complexity except that we need to consider the following .",
    "the cost in associating sites to main box tree leaves involve @xmath95 point location searches per each level of the main box tree .",
    "the same is applicable to auxiliary box trees .",
    "including the time complexity of constructing the voronoi diagram of @xmath0 yields the stated .",
    "the query time complexity is @xmath96 .    from lemma [ depthmainboxtree ] , the worst - case depth of the main box tree is @xmath97 .",
    "the worst - case length of any list at a leaf node of the main box tree is @xmath61 . from lemma [ reordepth ] ,",
    "the worst - case height of the auxiliary box tree is o(1 ) .",
    "therefore , the worst - case query time is @xmath98 .",
    "note that each occurrence of @xmath19 in the above analysis can be expressed in terms of @xmath4 , as @xmath99 .",
    "arrows indicate the direction of expansion of hyperboxes into voronoi cell so that they together cover that cell .",
    "this paper proposed an algorithm that builds data structures of size @xmath17 during the preprocessing phase which facilitate in querying anns of an input query point in @xmath100 time . here",
    "@xmath19 equals to @xmath20 , and @xmath21 is the volume of the large bounding box that contains set @xmath0 of points .",
    "the expected cardinality of output set @xmath7 corresponding to a given query point is shown to rely on @xmath0 and @xmath4 .",
    "although this algorithm does not improve either space or query - time complexity of existing algorithms , it suggests an approach to explore the problem under the following setting : independently cover each voronoi cell with @xmath101 hyperboxes ( refer fig .",
    "[ fig : conclu1 ] ) ; this leads to a space complexity of @xmath102 ( given that there are at most @xmath1 voronoi cells ) .",
    "organize all the hyperboxes covering the entire voronoi diagram into a data structure , similar to the one proposed herewith , to achieve query time efficiency ."
  ],
  "abstract_text": [
    "<S> given a set @xmath0 of @xmath1 points in @xmath2-dimensional euclidean metric space @xmath3 and a small positive real number @xmath4 , we present an algorithm to preprocess @xmath0 and answer queries that require finding a set @xmath5 of @xmath4-approximate nearest neighbors ( anns ) to a given query point @xmath6 . </S>",
    "<S> the following are the characteristics of points belonging to set @xmath7 :    * @xmath8 , @xmath9 a point @xmath10 such that @xmath11 and the nearest neighbor of @xmath12 is @xmath13 , and * @xmath9 a @xmath14 such that @xmath15 is a nearest neighbor of @xmath16 .    during the preprocessing phase , from the voronoi diagram of @xmath0 </S>",
    "<S> we construct a set of box trees of size @xmath17 which facilitate in querying anns of any input query point in @xmath18 time . here </S>",
    "<S> @xmath19 equals to @xmath20 , and @xmath21 is the volume of a large bounding box that contains all the points of set @xmath0 . </S>",
    "<S> the average case cardinality of @xmath7 is shown to rely on @xmath0 and @xmath4 . </S>"
  ]
}