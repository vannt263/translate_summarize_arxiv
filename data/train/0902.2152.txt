{
  "article_text": [
    "the precise complexity of bchi  complementation is an intriguing problem for two reasons : first , the quest for optimal algorithms is a much researched problem ( c.f .",
    ",  @xcite ) that has defied numerous approaches to solving it . and",
    "second , bchi  complementation is a valuable tool in formal verification ( c.f . ,  @xcite ) , in particular when studying language inclusion problems of @xmath6-regular languages .",
    "in addition to this , complementation is useful to check the correctness of other translation techniques  @xcite .",
    "the goal tool  @xcite , for example , provides such a test suite and incorporates four of the more recent algorithms  @xcite for bchi  complementation .    while devising optimal complementation algorithms for nondeterministic finite automata is simple ",
    "finite _ automata can be determinized using a simple subset construction , and deterministic finite automata can be complemented by complementing the set of final states  @xcite  devising optimal complementation algorithms for nondeterministic bchi  automata is hard , because simple subset constructions are not sufficient to determinize or complement them  @xcite .",
    "given the hardness and importance of the problem , bchi  complementation enjoyed much attention  @xcite , resulting in a continuous improvement of the upper and lower bounds .",
    "the first complementation algorithm dates back to the introduction of bchi  automata in 1962 . in his seminal paper",
    "`` on a decision method in restricted second order arithmetic '' @xcite , bchi  develops a complementation procedure that comprises a doubly exponential blow - up .",
    "while bchi s result shows that nondeterministic bchi  automata ( and thus expressions ) are closed under complementation , complementing an automaton with @xmath2 states may , when using bchi s complementation procedure , result in an automaton with @xmath7 states , while an @xmath8 lower bound  @xcite is inherited from finite automata .    in the late 80s ,",
    "these bounds have been improved in a first sequence of results , starting with establishing an exptime upper bound  @xcite , which matches the exptime lower bound  @xcite inherited from finite automata .",
    "however , the early exptime complementation techniques produce automata with up to @xmath9 states  @xcite ; hence , these upper bounds are still exponential in the lower bounds .",
    "this situation changed in 1988 , when safra introduced his famous determinization procedure for nondeterministic bchi  automata  @xcite , resulting in an @xmath10 bound for bchi  complementation , while michel  @xcite established a seemingly matching @xmath11 lower bound in the same year .",
    "together , these results imply that bchi  complementation is in @xmath12 , leaving again the impression of a tight bound .    as pointed our by vardi  @xcite ,",
    "this impression is misleading , because the @xmath13 notation hides an @xmath12 gap between both bounds .",
    "this gap has been narrowed down in 2001 to @xmath14 by the introduction of an alternative complementation technique that builds on level rankings and a cut - point construction  @xcite .",
    "( level rankings are functions from the states @xmath15 of a nondeterministc bchi  automaton to @xmath16 . )",
    "the complexity of the plain method is approximately @xmath17  @xcite , leaving a @xmath1 gap to michel s lower bound  @xcite .",
    "recently , tight level rankings  @xcite  a special class of level rankings that is onto a predefined subset  have been exploited by friedgut , kupferman , and vardi  @xcite to improved the upper complexity bound to @xmath18 , and by yan  @xcite to improve the lower complexity bound to @xmath19 .    in the remainder of this paper , we first recapitulate the basic complementation technique of kupferman and vardi  @xcite , and discuss the core ideas of the improved complexity analysis of friedgut , kupferman , and vardi  @xcite and yan  @xcite .",
    "we then show how to improve the complementation technique of friedgut , kupferman , and vardi  @xcite such that the resulting complementation algorithm meets the known lower bound  @xcite modulo a small polynomial factor ( quadratic in the size of the automaton that is to be complemented ) , and show that , different to older constructions  @xcite , we can achieve an equivalent bound on the number of edges .",
    "nondeterministic bchi  automata  @xcite are used to represent @xmath6-regular languages @xmath20 over a finite alphabet @xmath21 .",
    "a nondeterministic bchi  automaton @xmath22 is a five tuple , consisting of a finite alphabet @xmath21 , a finite set @xmath15 of states with a non - empty subset @xmath23 of initial states , a transition function @xmath24 that maps states and input letters to sets of successor states , and a set @xmath25 of final states .",
    "nondeterministic bchi  automata are interpreted over infinite sequences @xmath26 of input letters .",
    "an infinite sequence @xmath27 of states of @xmath28 is called a _ run _ of @xmath28 on an input word @xmath29 if the first letter @xmath30 of @xmath31 is an initial state , and if , for all @xmath32 , @xmath33 is a successor state of @xmath34 for the input letter @xmath35 .    a run @xmath27 is called _ accepting _ if some finite state appears infinitely often in  @xmath31 ( @xmath36 for @xmath37 ) .",
    "a word @xmath26 is _ accepted _ by @xmath28 if @xmath28 has an accepting run on @xmath29 , and the set @xmath38 of words accepted by @xmath28 is called its _ language_.    for technical convenience we also allow for finite runs @xmath39 with @xmath40 .",
    "naturally , no finite run satisfies the bchi  condition ; all finite runs are therefore rejecting , and have no influence on the language of an automaton .",
    "the two natural complexity measures for a bchi  automaton are the size @xmath41 of its state space , and its size @xmath42 , measured in the size of its transition function .      in  @xcite , kupferman and vardi",
    "introduce a bchi  complementation algorithm that uses level rankings as witnesses for the absence of an accepting run .",
    "the set of all runs of a nondeterministic bchi  automaton @xmath43 on a word @xmath26 can be represented by a directed acyclic graph ( dag ) @xmath44 with    * vertices @xmath45 such that @xmath46 is in the set @xmath47 of vertices if and only if there is a run @xmath31 of @xmath28 on @xmath29 with @xmath48 , and * edges @xmath49 such that @xmath50 if and only if @xmath51 and @xmath52 is a successor of @xmath53 for the input letter @xmath54 .",
    "we call @xmath44 the _ run dag _ of @xmath28 for @xmath29 , and the vertices @xmath55 of @xmath44 that refer to the @xmath56 position of runs the _ @xmath56 level _ of @xmath44",
    ".    the run dag @xmath57 is called _ rejecting _ if no path in @xmath57 satisfies the bchi  condition",
    ". that is , @xmath57 is rejecting if and only if @xmath28 rejects @xmath29 .",
    "@xmath28 can therefore be complemented to a nondeterministc bchi  automaton @xmath58 that checks if @xmath57 is rejecting .",
    "the property that @xmath57 is rejecting can be expressed in terms of ranks .",
    "we call a vertex @xmath46 of a dag @xmath59 _ finite _ , if the set of vertices reachable from @xmath60 in @xmath61 is finite , and _ endangered _ , if no vertex reachable from @xmath60 is accepting ( that is , in @xmath62 ) .",
    "based on these definitions , _ ranks _ can be assigned to the vertices of a rejecting run dag .",
    "we set @xmath63 , and repeat the following procedure until a fixed point is reached , starting with @xmath64 :    * assign all finite vertices of @xmath65 the rank @xmath66 , and set @xmath67 to @xmath65 minus the states with rank @xmath66 ( that is , minus the states finite in @xmath65 ) .",
    "* assign all endangered vertices of @xmath67 the rank @xmath68 , and set @xmath69 to @xmath67 minus the states with rank @xmath68 ( that is , minus the states endangered in @xmath67 ) .",
    "* increase @xmath66 by @xmath70 .",
    "a fixed point is reached in @xmath71 steps , and the ranks can be used to characterize the complement language of a nondeterministic bchi  automaton :    @xcite [ prop : dag ] a nondeterministic bchi  automaton @xmath28 with @xmath2 states rejects a word @xmath26 if and only if @xmath72 is empty .    to see that a fixed point is reached after @xmath71 iterations , note that deleting all finite or endangered vertices leaves a dag without finite or endangered vertices , respectively . hence a fixed point is reached as soon as we do not assign a rank @xmath66 to any vertex . by construction , no dag @xmath73 contains finite vertices .",
    "if it contains an endangered vertex  @xmath74 , then all vertices reachable from @xmath74 are endangered , too .",
    "this implies that some vertex of almost all levels is assigned the rank @xmath75 .",
    "hence , if no fixed point is reached earlier , some rank is assigned to all vertices of almost all levels after @xmath2 iterations ( there can not be more than @xmath2 vertices in a level ) , and all vertices in @xmath76 must be finite .",
    "if the reached fixed point @xmath77 is non - empty , then it contains only infinite and non - endangered vertices , and constructing an accepting run from @xmath77 is simple .",
    "vice versa , an accepting run @xmath31 on an @xmath6-word @xmath29 can be viewed as an infinite sub - graph of @xmath57 that does not contain finite or endangered nodes . by a simple inductive argument",
    ", the sub - graph identified by @xmath31 is therefore a sub - graph of @xmath65 for all @xmath32 , and hence of @xmath77 .",
    "the connection between bchi  complementation , run dags and ranks leads to an elegant complementation technique .",
    "we call the maximal rank of a vertex in a level the rank of this level , the rank of almost all vertices @xmath78 , @xmath79 of a run @xmath31 ( or : path in @xmath61 ) the rank of @xmath31 , and the rank of almost all levels of a dag @xmath61 the rank of @xmath61 .",
    "( note that level ranks can only go down , and that vertex ranks can only go down along a path . )    for a given nondeterministic bchi  automaton @xmath43 with @xmath2 states , we call a function @xmath80 that maps all accepting states to odd numbers ( @xmath81 ) a _ level ranking_.    @xcite [ prop : basic ] for a given nondeterministic bchi  automaton @xmath43 , the nondeterministic bchi  automaton @xmath82 with    * @xmath83 , * @xmath84 , * @xmath85 @xmath86 , and * @xmath87 ,    where    * @xmath88 is the set of all level rankings of @xmath28 , * @xmath89 , and * @xmath90 ,    accepts the complement @xmath91 of the language of @xmath28",
    ".    the first element @xmath92 of a triple @xmath93 reflects the set of states of @xmath28 reachable upon the input seen so far ( the states in the respective level of the run dag ) , and the third element @xmath94 is a mapping that intuitively maps reachable states to their rank .",
    "the condition @xmath95 ensures that the rank of the vertices ( or rather : the value assigned to them ) is decreasing along every path of the run dag .",
    "the second element is used for a standard cut - point construction , comparable to the cut - point constructions in the determinization of co - bchi  automata or the nondeterminization of alternating bchi  automata .",
    "it contains the positions whose rank ( or rather : the value assigned to them ) has been even ever since the last cut - point ( @xmath96 ) was reached ; it intuitively ensures that the respective vertices are finite .",
    "friedgut , kupferman , and vardi  @xcite improved this complementation technique by exploiting the observation that the true ranks of the run dag @xmath57 of a rejected @xmath6-word  @xmath29 are eventually always tight .",
    "a level ranking @xmath97 is called _ tight _ , if it has an odd rank  @xmath98 , and is onto the odd numbers @xmath99 up to its rank @xmath98 , and _ @xmath92-tight _ , if its restriction to @xmath92 is tight and if it maps all states not in @xmath92 to @xmath100 ( @xmath101 ) .",
    "@xcite [ prop : tight ] for every run dag @xmath57 with finite rank @xmath98 , it holds that    * @xmath98 is odd , and * there is a level @xmath102 such that , for all levels @xmath103 and all odd ranks @xmath104 , there is a node @xmath105 with rank @xmath106 in @xmath57 .",
    "this immediately follows from what was said in subsection  [ ssec : dag ] on reaching a fixed point after @xmath71 iterations : if the rank @xmath57 is @xmath98 then , for every odd number @xmath107 , almost all levels contain a vertex with rank @xmath106 , and assuming that @xmath98 is even implies that all vertices of @xmath108 are finite , which in turn implies that only finitely many levels contain a vertex with rank @xmath98 and hence leads to a contradiction .",
    "using this observation , the construction from proposition  [ prop : basic ] can be improved by essentially replacing @xmath88 by the set @xmath109 of tight level rankings . while the size @xmath110 of @xmath88 is in @xmath111 , the size of @xmath112 , @xmath113 is much smaller .",
    "building on an approximation of stirling numbers of the second kind by temme  @xcite , yan and friedgut , kupferman , and vardi  @xcite showed that @xmath114 can be approximated by @xmath115 for a constant @xmath116 , that is , they showed @xmath117{{\\mathit{tight}}(n)}}{n}\\approx 0.76.\\ ] ]    friedgut , kupferman , and vardi  @xcite use this observation  together with other improvements  for an improved complementation algorithm that produces a complement automaton with approximately @xmath118 states  @xcite .",
    "yan  @xcite showed for full automata  a family of automata that has exactly one accepting state , and an alphabet that encodes the possible transitions between the states of the automaton  that every nondeterministic bchi  automaton that accepts the complement language of a full automaton with @xmath71 states must have @xmath119 states .",
    "@xcite [ prop : lower ] a nondeterministic bchi  automaton that accepts the complement language of a full bchi  automaton with @xmath2 states has @xmath120 states .",
    "to optimize the construction from proposition  [ prop : basic ] , we turn not only to tight functions ( c.f .",
    "@xcite ) , but also refine the cut - point construction . while the cut - point construction of proposition  [ prop : basic ] tests _ concurrently _ for all even ranks",
    "if a path has finite even rank , we argue that it is much cheaper to test this property _ turn wise _ for all even ranks individually . as a result ,",
    "the overall construction becomes more efficient and meets , modulo a small polynomial factor in @xmath5 , the lower bound recently established by yan  @xcite .",
    "the obtained state space reduction of the proposed construction compared to  @xcite is due to an efficient cut - point construction in combination with the restriction to tight rankings .",
    "the improved cut - point construction is inspired by the efficient translation from generalized to ordinary bchi  automata .",
    "indeed , the acceptance condition that no trace has an _ arbitrary _ even rank , which is reflected by the straight - forward acceptance condition of previous algorithms  @xcite , can be replaced by an acceptance condition , which  only rules out that some trace has a particular even rank , but does so for all potential even ranks .",
    "checking the condition for a particular even rank allows for focusing on exactly this rank in the cut - point construction , which led to a significant cut in the size of the resulting state space . while this approach can not be taken if we literally use a generalized bchi  condition , the idea of cyclically considering the relevant even ranks proves to be feasible .    for a given nondeterministic bchi  automaton @xmath43 with @xmath121 states , let @xmath122 denote the nondeterministic bchi  automaton with    * @xmath123 with * * @xmath124 and * * @xmath125 , * @xmath126 , * @xmath127 for * * @xmath128 with @xmath129 , * *   * * @xmath130 with @xmath131 @xmath132 , @xmath133 , @xmath134 , and * * * @xmath135 and @xmath136 if @xmath137 or * * * @xmath138 and @xmath139 if @xmath140 , respectively , and * @xmath141 .",
    "the complement automaton @xmath142 operates in two phases . in a first phase it only traces the states reachable in @xmath28 upon a finite input sequence . in this phase ,",
    "only the states in @xmath143 and the transition function @xmath144 are used . in the special case",
    "that @xmath28 rejects an @xmath6-word @xmath29 because @xmath28 has no run on @xmath29 , @xmath142 accepts by staying forever in phase one , because @xmath145 is final .",
    "@xmath142 intuitively uses its nondeterministic power to guess a point in time where all successive levels are tight and have the same rank . at such a point",
    ", @xmath142 traverses from @xmath143 to @xmath146 , using a transition from @xmath147 . staying henceforth in @xmath146 ( using the transitions from @xmath148 )",
    ", @xmath142 intuitively verifies turn wise for all potential even ranks @xmath149 that no path has this particular even rank  @xmath149 . for a particular rank  @xmath149 , it suffices to trace the positions on traces with unchanged rank  @xmath149 ( hence @xmath150 ) , and to cyclically update the designated even rank after every cut - point .      to show that the automaton @xmath142 from the construction introduced in the previous subsection recognises the complement language of @xmath28",
    ", we first show that the complement language of @xmath142 contains the language of @xmath28 ( @xmath151 ) , and then that the complement language of @xmath28 is contained in the language of @xmath142 ( @xmath152 ) .",
    "[ lem : incl1 ] if a given nondeterministic bchi  automaton @xmath43 accepts an @xmath6-word @xmath26 , then @xmath29 is rejected by the automaton @xmath122 .",
    "( @xmath151 )    let @xmath153 be an accepting run of @xmath28 on @xmath29 .",
    "first , @xmath154 with @xmath155 and @xmath156 for all @xmath32 is no accepting run of @xmath142 , because @xmath157 and hence no state of @xmath158 is accepting ( @xmath159 for all @xmath32 ) .",
    "let now @xmath160 be a run of @xmath142 on @xmath29 .",
    "again , we have that @xmath161 for all @xmath162 .",
    "furthermore , the construction guarantees that @xmath163 holds for all @xmath164 .",
    "the sequence @xmath165 is therefore decreasing , and stabilizes eventually .",
    "that is , there is a @xmath166 and a @xmath167 such that @xmath168 for all @xmath169 .",
    "since @xmath31 is accepting , there is a position @xmath169 with @xmath170 .",
    "taking into account that @xmath171 is a level ranking , this implies that @xmath172and hence @xmath74is even . assuming that @xmath158 is accepting",
    ", we can infer that , for some position @xmath173 which follows one of the first @xmath2 accepting states of @xmath158 after position @xmath174 , @xmath175 and @xmath176 .",
    "it is now easy to show by induction that , for all @xmath177 , @xmath178 and ( using @xmath179 ) @xmath180 hold true , which contradicts the assumption that @xmath158 is accepting .    to proof the second lemma , @xmath152 , we use propositions  [ prop : dag ] and  [ prop : tight ] to infer that the run dag @xmath57 of an @xmath6-word rejected by @xmath28 is either finite or has odd bounded rank and only finitely many non - tight level rankings .",
    "we use this to build an accepting run of @xmath142 on  @xmath29 .",
    "[ lem : incl2 ] for a nondeterministic bchi  automaton @xmath43 , the automaton @xmath122 accepts an @xmath6-word @xmath26 if @xmath29 is rejected by @xmath28 .",
    "( @xmath152 )    if @xmath26 is rejected by @xmath28 , then the run dag @xmath57 has bounded rank by proposition  [ prop : dag ] , and by proposition  [ prop : tight ] almost all levels of @xmath57 have tight level rankings with the same rank @xmath98 .",
    "for the special case that the rank of all vertices of @xmath57 is @xmath181 , that is , if all vertices of @xmath57 are finite , @xmath154 with @xmath155 and @xmath156 for all @xmath32 is an accepting run of @xmath142 on @xmath29 .    if @xmath57 contains an infinite vertex , then we fix a position @xmath182 such that the rank of all levels @xmath183 of @xmath57 is @xmath98 and tight for some ( odd ) @xmath184 .",
    "we now consider a run @xmath185    * @xmath155 , @xmath186 , and @xmath187 , * @xmath188 for all @xmath162 , and * @xmath189 if @xmath190 or @xmath191 if @xmath192 , respectively , for all @xmath164 , * @xmath193 is the @xmath194-tight level ranking that maps each state @xmath195 to the rank of @xmath196  @xmath197 , * @xmath198 if @xmath192 or @xmath199 if @xmath190 , respectively , for all @xmath164 .",
    "@xmath158 is obviously a run of @xmath142 on @xmath29 . to show that @xmath158 is accepting",
    ", we have to show that @xmath200 is empty infinitely many times .",
    "let us assume that this is not the case ; that is , let us assume that there is a last element @xmath201 with @xmath202 and @xmath203 for all @xmath204 .",
    "( note that @xmath186 is empty . )",
    "then we have that @xmath205 for all @xmath204 , and it is easy to show by induction for all @xmath206 that @xmath207 is the set of states reachable in @xmath208 from some state in @xmath209 .",
    "but since the rank of all states in @xmath209 is @xmath210 ( and thus even ) , all of these states are finite in @xmath208 , which implies that there are only finitely many states reachable in @xmath208 from @xmath209 , and thus contradicts the assumption that @xmath211 is non - empty for all @xmath204 .",
    "the two lemmata of this subsection immediately imply the claimed language complementation :    for a given nondeterministic bchi  automaton @xmath43 , the automaton @xmath142 resulting from the construction introduced in subsection  [ ssec : comp ] recognises the complement language of @xmath28 .",
    "( @xmath212 )      the costly part in previous approaches  @xcite that the proposed method avoids ( de facto , although not technically ) , is a subset construction in addition to the level rankings . avoiding the subset construction results in a state space reduction by a factor exponential in the size of the automaton @xmath28 , and even to upper bounds comparable to the established lower bounds  @xcite .",
    "the subset construction is de facto avoided , because it can be encoded into the ranking function once we allow for a slightly enlarged set of output values .",
    "for example , we could map all states not in @xmath92 to @xmath213 , and all states in @xmath214 to @xmath215 . following this convention ,",
    "the first two elements of every tuple in @xmath146 could be pruned .",
    "( they remain explicit in the construction because this representation is more comprehensible , and outlines the connection to the older constructions of friedgut , kupferman , and vardi  @xcite .",
    "[ theo : upper ] for a given nondeterministic bchi  automaton @xmath28 with @xmath2 states , the automaton @xmath142 has @xmath216 states .",
    "@xmath143 is obtained by a simple subset construction , and hence @xmath217 , which is a small subset of @xmath216 . for a fixed @xmath66 , a state @xmath218 with an @xmath92-tight level ranking @xmath94 of rank @xmath98",
    "can be represented by a function @xmath219 that maps every state @xmath220 to @xmath221 , every state @xmath222 not in @xmath92 to @xmath223 , and every other state @xmath224 to @xmath225 .",
    "every such function @xmath226 either has a domain @xmath227 and is onto @xmath99 , or is a function to @xmath228 and onto @xmath229 or @xmath230 .",
    "the size of all three groups of functions is hence in @xmath231 ( for a fixed @xmath66 ) , which results in an overall size in @xmath232 .    together with proposition  [ prop : lower ] , this establishes tight bounds for bchi  complementation :    the minimal size of the state space of a nondeterministic bchi  automaton that accept the complement language of a nondeterministic bchi  automaton with @xmath2 states is in @xmath120 and @xmath216 .",
    "a flaw in the construction presented in section  [ sec : efficient ] is that it is optimal only with respect to the state space of the automata . in  @xcite , kupferman and vardi",
    "discuss how to reduce the number of edges such that the bound on the number of edges becomes trilinear in the alphabet size , the bound on the number of states , and the rank of the resulting automaton ( see also  @xcite ) . in this section",
    "we improve the construction from the previous section such that the bound on the number of edges is merely bilinear in the bound on the number of states and the size of the input alphabet .",
    "the technique can be adapted to generally restrict the outdegree to @xmath233 when level rankings are not required to be tight .",
    "the automaton @xmath142 obtained from the construction described in section  [ sec : efficient ] operates in two phases . in a first phase , it stays in @xmath143 and only tracks the reachable states of the bchi  automata @xmath28 it complements .",
    "it then guesses a point @xmath182 such that all levels @xmath164 of @xmath57 have a tight level ranking to transfer to @xmath146 .",
    "we improve over the construction of section  [ sec : efficient ] by restricting the number of entry points to @xmath146 from @xmath231 to @xmath234 , and by restricting the number of outgoing transitions @xmath235 for all states @xmath236 and input letters @xmath237 to two .",
    "the latter is achieved by allowing only the successor @xmath238 with a point wise maximal function @xmath94 ( the @xmath239-transitions ) or with a function @xmath94 that is maximal among the final states @xmath240 among them ( the @xmath241-transitions ) .",
    "if such elements exist , then they are unique .",
    "the first restriction is achieved by restricting @xmath147 to states @xmath218 for which @xmath94 is maximal with respect to @xmath92 .",
    "we call an @xmath92-tight level ranking @xmath94 with rank @xmath98 _ maximal with respect to @xmath92 _ if it maps all final states @xmath242 in @xmath92 to @xmath243 , exactly one state to every odd number @xmath244 smaller than @xmath98 ( @xmath245 ) and all remaining states of @xmath92 to @xmath98 , and denote the set of tight rankings that are maximal with respect to @xmath92 by @xmath246 .    as there are only @xmath247 states in @xmath143 , the impact of their high outdegree is outweighed by the small outdegree ( @xmath235 ) of the remaining @xmath248 states .    for a given nondeterministic bchi  automaton @xmath43 with @xmath121 states , let @xmath249 denote the nondeterministic bchi  automaton with  @xmath250 , @xmath251 , @xmath252 , @xmath143 , @xmath146 , and @xmath144 as in the construction from section  [ sec : efficient ] , and with @xmath253  for    * @xmath254 with @xmath255 and @xmath256 , * @xmath257 with @xmath258 , * @xmath259 with @xmath260 if @xmath261 , @xmath262 , @xmath263 , and @xmath264 for all @xmath265 and @xmath266 otherwise ,    where @xmath267 selects the unique element with a ( point wise ) maximal function @xmath226 .",
    "the supremum over all function obviously exists , but it is not necessarily tight .",
    "( in this case , @xmath268 returns the empty set . ) since @xmath148 is strict with respect to the selection of the other three elements @xmath269 , @xmath270 and @xmath271 for a fixed ranking function , the mapping of @xmath239 consists only of singletons and the empty set .",
    "while @xmath239 selects a maximal successor , @xmath241 selects a maximal final successor , which only requires to decrease the value assigned to the states in @xmath270 by the ranking function @xmath226 by one .",
    "( which can not be done if their value is already @xmath181 , hence the restriction @xmath272 or @xmath273 . )",
    "the tightness of @xmath274 is then inherited from the tightness of @xmath226 .      while it is clear that the language of @xmath275 is contained in the language of @xmath142 , the converse is less obvious . to prove @xmath276 ,",
    "we show that any @xmath6-word @xmath29 rejected by @xmath28 will be accepted by @xmath275 by exploiting the `` standard '' run @xmath158 of @xmath142 on @xmath29 from the proof of lemma [ lem : incl2 ] to build an accepting run @xmath277 of @xmath275 on @xmath29 .",
    "[ prop : trans ] for a given nondeterministic bchi  automaton @xmath43 , the automaton @xmath275 resulting from the construction introduced in subsection  [ subs : cond ] accepts an @xmath6-word @xmath26 if and only if @xmath29 is rejected by @xmath28 .",
    "( @xmath278 )    we show @xmath278 by demonstrating @xmath279 , where the second inclusion is implied by the fact that every ( accepting ) run of @xmath275 is also an ( accepting ) run of @xmath142 , and the third inclusion is shown in lemma  [ lem : incl1 ] .",
    "to demonstrate @xmath280 , we reuse the proof of lemma  [ lem : incl2 ] to obtain an accepting run @xmath281 for @xmath142 , where @xmath282 is the rank of @xmath196 in @xmath57 for all @xmath164 and @xmath283 .",
    "( if @xmath28 has no run on @xmath29 , then @xmath275 has the same accepting standard run on @xmath29 that stays in @xmath143 as @xmath142 . )",
    "let us pick an @xmath284-tight ranking function @xmath285 with the same rank as @xmath286 that is maximal with respect to @xmath284 .",
    "we show that we then can construct the run @xmath287 of @xmath275 on @xmath29 that satisfies @xmath186 , and @xmath187 and , for all @xmath164 ,    * @xmath288 if @xmath289 and @xmath290 ( note that @xmath291 does not depend on taking the transition from @xmath239 or @xmath241 ) , and * @xmath292 otherwise .    to show by induction that @xmath293 holds true for all @xmath164 ( where @xmath294 is the point wise comparison ) , we strengthen the claim by claiming additionally that if , for some position @xmath295 , @xmath296 is a final state , @xmath297 holds true , and @xmath298 is the next position for which @xmath299 is final , then @xmath300 implies @xmath301 for all @xmath302 .    for @xmath303",
    "this holds trivially ( basis ) . for the induction step ,",
    "let us first consider the case of @xmath239-transitions",
    ". then @xmath304 is implied , because @xmath305 is maximal among the @xmath306-tight level rankings @xmath307 , and @xmath308 holds by induction hypothesis . if @xmath201 is a final state and @xmath309 holds true , then @xmath310 , and hence @xmath300 implies @xmath311 , which implies @xmath312 ( using @xmath304 ) .",
    "if a @xmath241-transition is taken , then taking a @xmath239-transition implied @xmath304 and @xmath313 ( note that @xmath314 is empty ) by the previous argument .",
    "this immediately implies @xmath304 for the @xmath241-transition .",
    "consequently , @xmath310 ( which holds as @xmath201 is final ) entails that @xmath300 implies @xmath312 .",
    "it remains to show that all functions @xmath315 are @xmath194-tight level rankings . to demonstrate this ,",
    "let @xmath316 be a state of the automaton @xmath28 such that @xmath317 is the rank of @xmath318 in @xmath57 for an odd number @xmath104 .",
    "( such a state exists for every odd number @xmath104 by construction . )",
    "since @xmath318 is endangered but not finite in @xmath319 , all nodes @xmath320 with @xmath321 reachable from @xmath318 in @xmath319 form an infinite connected sub - dag of @xmath319 , all of whose nodes have rank @xmath106 .",
    "( which , by the proof in lemma  [ lem : incl2 ] , entails that @xmath322 holds for every vertex @xmath320 of this sub - dag . )",
    "by definition of @xmath277 , it is easy to show by induction that @xmath323 holds for all of these nodes @xmath320 .",
    "as we have just demonstrated @xmath324 , this entails @xmath325 . since @xmath106 can be any odd number less or equal to the rank @xmath98 of @xmath57 , and since there is , for every @xmath164 , some vertex @xmath320 reachable from @xmath318 in @xmath319",
    ", @xmath315 is an @xmath194-tight level ranking for all @xmath164 .",
    "finally , the assumption that @xmath326 is empty only finitely many times implied that there was a last position @xmath174 such that @xmath327 is empty . but",
    "this implies that @xmath328 is stable for all @xmath329 , and within the next @xmath2 visited fixed points in @xmath158 there is one that refers to this @xmath330 . by construction of @xmath277 ,",
    "this position is a final state in @xmath277 , too .",
    "@xmath331      extending the tight bound of section  [ sec : efficient ] for the state space to a tight bound on the size of the complement automaton is simple : the mappings of @xmath144 , @xmath239 , and @xmath241 consist of singletons or the empty set , such that only the size of @xmath332 needs to be considered more closely .",
    "[ theo : uppersize ] for a given nondeterministic bchi  automaton @xmath28 with @xmath2 states and an alphabet of size @xmath333 , the automaton @xmath275 has size @xmath334 .    for all @xmath335 and @xmath237",
    ", we have that @xmath336 for @xmath337 .",
    "thus , @xmath338 , which can be estimated by @xmath339 for @xmath340 , which is in @xmath234 .",
    "thus @xmath341 holds true .",
    "( @xmath342 , whereas @xmath343 . )",
    "the claim thus follows with theorem  [ theo : upper ] , and @xmath344 and @xmath345 for all @xmath346 , @xmath347 and @xmath237 .    together with proposition  [ prop : lower ] , this establishes tight complexity bounds for bchi  complementation :    the complexity of complementing nondeterministic bchi  automata with @xmath2  states is in @xmath120 and @xmath216 .",
    "the discussed complementation technique is therefore optimal modulo a small polynomial factor in @xmath5 .",
    "this paper marks the end of the long quest for the precise complexity of the bchi  complementation problem .",
    "it shows that the previously known lower bound is sharp , which is on one hand surprising , because finding tight lower bounds is generally considered the harder problem , and seems on the other hand natural , because yan s lower bound builds on the concept of tight level rankings alone  @xcite , while the previously known upper bound  @xcite incorporates an additional subset construction and builds on estimations on top of this , leaving the estimations of the lower bound the simpler concept of the two .",
    "similar to the complexity gap in bchi  complementation twenty years ago , the complexity of bchi  determinization is known to be in @xmath12 , but there is also an @xmath12 gap between the upper  @xcite and lower  @xcite bound .",
    "tightening the bounds for bchi  determinization appears to be the natural next step after the introduction of an optimal bchi  complementation algorithm .",
    "j.  richard bchi . on a decision method in restricted second order arithmetic . in _ proceedings of the international congress on logic , methodology , and philosophy of science , 1960 , berkeley , california , usa _ , pages 111 .",
    "stanford university press , 1962 .",
    "sankar gurumurthy , orna kupferman , fabio somenzi , and moshe  y. vardi . on complementing nondeterministic bchi automata .",
    "in _ proceedings of the 12th advanced research working conference on correct hardware design and verification methods ( charme 2003 ) , 2124 october , laquila , italy _ , volume 2860 of _ lecture notes in computer science _ , pages 96110 .",
    "springer - verlag , 2003 .",
    "christof lding .",
    "optimal bounds for transformations of @xmath6-automata . in _ proceedings of the 19th conference on foundations of software technology and theoretical computer science ( fsttcs 1999 ) , 1315 december , chennai , india _ , volume 1738 of _ lecture notes in computer science _ , pages 110121 .",
    "springer - verlag , 1999 .",
    "shmuel safra .",
    "on the complexity of @xmath6-automata . in _ proceedings of the 29th annual symposium on foundations of computer science ( focs 1988 ) , 2426 october _ ,",
    "pages 319327 , white plains , new york , usa , 1988 .",
    "ieee computer society press .",
    "sven schewe .",
    "tighter bounds for the determinization of bchi automata . in _ proceedings of the twelfth international conference on foundations of software science and computation structures ( fossacs 2009 )",
    ", 2229 march , york , england , uk_. ( to appear ) , 2009 .",
    "william  j. sakoda and michael sipser .",
    "non - determinism and the size of two - way automata . in _ proceedings of the 10th annual acm symposium on theory of computing ( stoc 1978 ) , 13 may , san diego , california , usa _ , pages 274286 .",
    "acm press , 1978 .",
    "yih - kuen tsay , yu - fang che , ming - hsien tsai , wen - chin chan , and chi - jian luo .",
    "extended : towards a research tool for omega automata and temporal logic . in _ proceedings of the 14th international conference on tools and algorithms for the construction and analysis of systems ( tacas 2008 ) , 31 march3 april , budapest , hungary _ , volume 4963 of _ lecture notes in computer science _ , pages 346350 .",
    "springer - verlag , 2008 .",
    "moshe  y. vardi . the bchi complementation saga . in _ proceedings of the 24th annual symposium on theoretical aspects of computer science ( stacs 2007 ) , 22 - 24 february , aachen , germany _ , volume 4393 of _ lecture notes in computer science _ , pages 1222 .",
    "springer - verlag , 2007 ."
  ],
  "abstract_text": [
    "<S> the precise complexity of complementing bchi  automata is an intriguing and long standing problem . </S>",
    "<S> while optimal complementation techniques for finite automata are simple  it suffices to determinize them using a simple subset construction and to dualize the acceptance condition of the resulting automaton  </S>",
    "<S> bchi  complementation is more involved . </S>",
    "<S> indeed , the construction of an exptime complementation procedure took a quarter of a century from the introduction of bchi  automata in the early @xmath0s , and stepwise narrowing the gap between the upper and lower bound to a simple exponent ( of @xmath1 for bchi  automata with @xmath2 states ) took four decades . while the distance between the known upper ( @xmath3 ) and lower ( @xmath4 ) bound on the required number of states has meanwhile been significantly reduced , an exponential factor remains between them . also , the upper bound on the size of the complement automaton is not linear in the bound of its state space . </S>",
    "<S> these gaps are unsatisfactory from a theoretical point of view , but also because bchi  complementation is a useful tool in formal verification , in particular for the language containment problem . </S>",
    "<S> this paper proposes a bchi  complementation algorithm whose complexity meets , modulo a quadratic ( @xmath5 ) factor , the known lower bound for bchi  complementation . </S>",
    "<S> it thus improves over previous constructions by an exponential factor and concludes the quest for optimal bchi  complementation algorithms .    </S>",
    "<S> sven schewe        = 10000 = 10000 </S>"
  ]
}