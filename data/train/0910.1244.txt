{
  "article_text": [
    "selman , kautz and mcallester posed an intriguing challenge in 1997 to use local search to prove unsatisfiability rather than satisfiability @xcite . in 2006 and 2007 , two different approaches were proposed in response to that challenge @xcite . these two algorithms ",
    "ranger  @xcite and gunsat  @xcite  use local search to prove unsatisfiability instead of satisfiability , still being incomplete algorithms .",
    "they can , however , prove that a formula is satisfiable under certain conditions .",
    "previous work has addressed the use of hybrid algorithms combining clause learning with local search to prove either satisfiability or unsatisfiability  @xcite at the cost of having worst - case exponential space complexity .",
    "alternative approaches combined unit clause elimination and local search  @xcite .",
    "we should note , however , that the algorithms just mentioned clearly differ from ranger and gunsat , which were built with the main goal of proving unsatisfiability by ( directly or indirectly ) deriving the empty clause .",
    "the main idea is to apply a sequence of resolution steps and other satisfiability preserving techniques to conclude that the formula has no solution .    although based on the same ideas , ranger and gunsat differ .",
    "ranger is a lightweight algorithm that performs many moves per second , while gunsat applies more powerful reasoning techniques .",
    "this paper presents for the first time a detailed comparison of these two algorithms and further integrates some of gunsat techniques into ranger .",
    "this paper is organised as follows .",
    "the next section provides the required background .",
    "section  [ ranger+gunsat ] describes and compares ranger and gunsat .",
    "afterwards , we describe the integration of gunsat s techniques into ranger",
    ". section  [ sec : results ] provides the experimental evaluation of the new techniques . finally , the paper concludes .",
    "we assume the basic definitions in the context of propositional satisfiability . a propositional formula @xmath0 is a conjunction of clauses , where a clause @xmath1 is a disjunction of literals and a literal @xmath2 is either a variable or its negation , being either a positive or a negative literal , respectively .",
    "each variable @xmath3 can be assigned a truth value ( true or false , also often referred to as 1 or 0 , respectively ) .",
    "a positive literal @xmath2 is said to be satisfied ( unsatisfied ) if the corresponding variable is assigned value true ( false ) .",
    "a negative literal @xmath2 is said to be satisfied ( unsatisfied ) if the corresponding variable is assigned value false ( true ) .",
    "a clause is said to be satisfied if at least one of its literals is satisfied , unsatisfied if all of its literals are unsatisfied and unresolved otherwise .",
    "unresolved clauses with only one unassigned literal are said to be unit .",
    "a formula is satisfied if all of its clauses are satisfied .",
    "the propositional satisfiability ( sat ) problem consists in deciding whether there exists a truth assignment to the variables such that the formula becomes satisfiable .",
    "such an assignment is called a solution .",
    "two of the most well - known complete algorithms for sat , which both still inspire current state of the art algorithms , are the davis - putnam ( dp )  @xcite and the davis - logemann - loveland ( dll )  @xcite algorithms .",
    "the first one is based on the resolution principle  @xcite , whereas the second one is based on backtrack search . an important feature on a backtrack search algorithm for sat is the use of unit propagation .",
    "clearly , a unit clause has only one way to be satisfied , which implies satisfying its unassigned literal .",
    "this rule may be iteratively applied until no unit clauses remain in the formula .",
    "local search algorithms , in contrast , are incomplete as they are not able to prove unsatisfiability : either they find a solution or the answer is _ unknown _ , which means that either the formula has no solution or the solver was not able to find a solution in the allowed cpu time .",
    "local search algorithms start at some location in the given problem s search space and then move from the start location to a neighbouring location in the search space which is determined by a decision based on local knowledge only .",
    "these local search algorithms are typically incomplete , that is , there is no guarantee that an existing solution will be found , and if no solution exists that fact can never be determined with certainty . furthermore , these search methods can visit the same location in the search space more than once , and they can become trapped in a small number of locations from which they can not escape : these are called _ local minima _ , which will be discussed shortly , and require special _",
    "escape strategies_.    many widely known and high - performance local search algorithms make use of randomized choices when generating and/or selecting candidate solutions for a given problem @xcite .",
    "these algorithms are called _ stochastic local search _ ( sls ) algorithms , and they belong to the most powerful methods for practically solving large and hard satisfiable instances of sat , and outperform the best systematic search methods on a number of domains . in sls algorithms , the initial position in the search space is chosen randomly , as are the decisions to move from a position to another . two early but influential stepping stones in sls algorithm development are gsat @xcite and walksat @xcite .",
    "ranger and gunsat are two stochastic local search algorithms which resemble the skeleton of sls algorithms , but on the other hand aim at deriving the empty clause to prove unsatisfiability .",
    "ranger @xcite stands for randomized general resolution and was presented in 2006 as the first sls algorithm that can prove unsatisfiability rather than satisfiability .",
    "it explores a space of multisets of resolvents using general resolution and aims at deriving the empty clause non - systematically but greedily , thus proving unsatisfiability .",
    "ranger will eventually refute any unsatisfiable instance while using only bounded memory .",
    "a theoretical result behind the exploration of local search on multisets of resolvents can be found in @xcite .",
    "the authors show that the space needed for a resolution proof is no more than @xmath4 resolvents , where @xmath5 is the number of variables in the problem .    given an unsatisfiable sat formula @xmath0 with _ n _ variables and _ m _ clauses , a general resolution refutation can be represented by a series of formulae @xmath6, ... ,@xmath7 where @xmath6 consists of some or all of the clauses in @xmath0 , and @xmath7 contains the empty clause . each @xmath8 is obtained from @xmath9 by ( optionally ) deleting some clauses in @xmath9 , adding the resolvent of two clauses in @xmath9 , and ( optionally ) adding clauses from @xmath0 .",
    "the _ space _ of a proof is defined as the minimum _ k _ such that each @xmath8 contains no more than _ k _ clauses .",
    "intuitively , each @xmath8 represents the set of _ active _ clauses at step _",
    "i _ of the proof .",
    "inactive clauses are not required for future resolutions , and after they have been used as needed they can be deleted ( for example clauses that are subsumed by others ) .    the _ width _ of a proof is the length ( in literals ) of the largest clause in the proof .",
    "any non - tautologous clause must have length no greater than _ n _ , so this is a trivial upper bound for the _ width _ used in ranger .",
    "however , in practice , it may succeed even if the resolvent length is restricted to a smaller value , which will save memory on large problems .",
    "each @xmath8 will be of the same constant size , and derived from @xmath9 by the application of resolution or the replacement of a clause by one taken from @xmath0 .",
    "the architecture of ranger is shown in algorithm [ alg : ranger ] .",
    "it has six parameters : the formula @xmath0 , three probabilities @xmath10 , @xmath11 and @xmath12 , the width @xmath13 and the size @xmath14 of the formula @xmath8 .",
    "the ranger algorithm begins by choosing any @xmath14 clauses from the formula @xmath0 into @xmath6 .",
    "it then performs @xmath15 iterations , either replacing a @xmath8 clause with a @xmath0 clause ( with probability @xmath10 ) or resolving two @xmath8 clauses and placing the result @xmath16 into @xmath8 . in the latter case ,",
    "if @xmath16 is a tautology or contains more than @xmath13 literals then it is discarded and @xmath17 .",
    "otherwise a @xmath8 clause must be removed to make room for @xmath16 : either ( with probability @xmath12 ) the removed clause is the longer of the two parents of @xmath16 or it is randomly chosen . in the former case , if @xmath16 is longer than the parent then @xmath16 is discarded and @xmath17 . with probability",
    "@xmath11 any satisfiability - preserving transformation may be applied to @xmath0 , @xmath8 or both .",
    "one can apply subsumption and the pure literal rule in several ways as satisfiability - preserving transformations .",
    "if the empty clause has been derived then the algorithm returns unsatisfiable , otherwise it may not terminate .",
    "a time - out condition may be added to restrict the cpu time that the algorithm is allowed to run .    in this algorithm",
    "the goal is to derive the empty clause , and as such @xmath8 must contain some small clauses .",
    "this is controlled by the level of greediness ( probability @xmath12 ) .",
    "a greedy local move is one that does not increase the number of literals in @xmath8 .",
    "so , increasing @xmath12 will increase the greediness of the search , reducing the proliferation of large resolvents .",
    "ranger has a useful convergence property : for any unsatisfiable sat problem with _",
    "n _ variables and _ m _ clauses , it finds a refutation if @xmath18 , @xmath19 , @xmath20 and @xmath21 . for a proof , see @xcite .",
    "the space complexity of ranger is @xmath22 . to guarantee convergence",
    ", it requires @xmath20 and @xmath23 so the space complexity becomes at least @xmath24 . in practice",
    ", it may require _ k _ to be several times larger , but a smaller value of _ w _ is usually sufficient .",
    "it should be noted that ranger performs very poorly on unsatisfiable random 3-sat problems .",
    "this is an interesting asymmetry , given that local search performs well on satisfiable random problems .",
    "this may be because such refutations are almost certainly exponentially long @xcite .",
    "gunsat @xcite proposes to make a greedy walk through the resolution search space in which , at each iteration of the algorithm , it tries to compute a better neighbouring set of clauses , i.e. a set of clauses similar to the previous one , differing from the previous one by at most two clauses : one added by resolution and one that may have been removed .",
    "intuitively , it will add new clauses and remove existing ones to the formula , trying to derive the empty clause by using the resolution rule .",
    "gunsat is depicted in algorithm [ alg : gunsat ] .",
    "it either proves that a problem instance is unsatisfiable or , if it does not derive an empty clause within _ maxtries _ then it returns unknown .",
    "also , if gunsat fails to derive the empty clause after @xmath25 a restart is performed . by then all clauses , except vital and binary clauses , are removed .",
    "_ vital clauses _ are initial clauses , or any clause that previously subsumed another vital clause .",
    "they ensure that the unsatisfiability of the formula is preserved .",
    "gunsat operates on an initial formula @xmath0 through a few operations : _",
    "2-saturation , remove - one - clause , add - one - clause , add - extended - variables _ and _ simplify - look - ahead_. some of these operations depend on a powerful scoring scheme .",
    "a score is given to all pairs of literals based on their frequency appearance in the formula .",
    "let us consider a clause @xmath26 of length @xmath27 .",
    "each pair @xmath28 appearing in @xmath26 is credited a weight of @xmath29 .",
    "the score of a pair of literals @xmath28 is defined as the sum of its weights in all clauses and noted @xmath30 .",
    "the score @xmath31 of a clause _",
    "c _ is the sum of the scores of all the pairs of literals it contains .",
    "the 2-saturation step ensures that , each time a new binary clause is added to @xmath0 , all resolution operations between the set of binary clauses are performed to saturate @xmath0 . in order to exploit their full power ,",
    "an equivalency literal search is performed . while performing the binary clause saturation , the algorithm may find new unit clauses ( note that in a resolution step between two binary clauses the resolvent can have either one or two literals ) .",
    "the literal @xmath2 of the unit clause is then propagated in the whole formula by unit propagation .",
    "an inconsistency may be identified at this step and the algorithm returns unsatisfiable , proving the unsatisfiability of the formula . refer to @xcite for the use of binary clause saturation for preprocessing purposes .",
    "in addition , if the size of the current formula is greater than a fixed @xmath32 then a non - vital clause is removed by _ remove - one - clause_. in each iteration there is also a call to _ add - one - clause _ , which adds one clause to the current formula according to the scoring scheme . both _",
    "add - extended - variables _ and _ simplify - look - ahead _ use reasoning mechanisms ( extended resolution in the former , unit propagation look - ahead in the latter ) to improve the chances of deriving an empty clause in the next iteration .",
    "_ add - extended - variables _ adds the three clauses generated through extended resolution to the formula . _ simplify - look - ahead _ applies unit propagation look - ahead to the formula  @xcite , which may eventually conclude the formula is unsatisfiable .",
    "extended resolution is applied when the algorithm has tried to increase the score of a given pair of literals too many times without success , and it uses extended resolution to artificially increase that score .",
    "the application of the extended rule implies adding a new variable @xmath33 and three clauses to the formula . in practice ,",
    "@xmath34 is encoded by the three clauses @xmath35 , @xmath36 and @xmath37 .",
    "look - ahead techniques are used to detect equivalences between literals until an inconsistency is found .",
    "gunsat uses look - ahead unit propagation on pairs of literals , such that the four possible pairs of values are propagated in @xmath0 , potentially implying more propagations .",
    "there are some few important differences between these two local search algorithms for proving unsatisfiability .",
    "ranger generates a large number of the shortest possible clauses as fast as possible , using unintelligent local moves , whereas gunsat takes longer to make more intelligent moves based on a more complex objective function .",
    "gunsat also uses higher reasoning techniques like extended resolution and unit propagation look - ahead ( ranger uses only general resolution ) .",
    "also , unlike gunsat , ranger uses a mechanism to ensure bounded memory .",
    "this section describes the implementation of unit propagation look - ahead and extended resolution in ranger .",
    "we should note that before starting to implement new features into the solver we made a series of modifications to the original tool in terms of data structures to better accommodate our needs .",
    "for the new techniques , it is required to have a complete knowledge of a clause status , namely to identify whether it is satisfied , unsatisfied or unresolved , in which case is important to distinguish unit clauses .",
    "the solver gunsat successfully uses a method dubbed unit propagation look - ahead @xcite to improve its basic algorithm .",
    "the literals of the formula under consideration are extensively checked to see if there are any conflicts arising from hypothetical assignments .",
    "gunsat implements a version of the unit propagation look - ahead which uses two variables .",
    "these two variables are then assigned a value such that the four possible combinations are covered .",
    "if @xmath38 and @xmath39 are our variables , then the four possible combinations are : ( 1 ) @xmath40 and @xmath41 , ( 2 ) @xmath40 and @xmath42 , ( 3 ) @xmath43 and @xmath41 , and ( 4 ) @xmath43 and @xmath42 .",
    "given an assignment to a pair of variables , a _ conflict _ is identified when one of the clauses becomes unsatisfied as a result of unit propagation .",
    "for each iteration of this look - ahead method , i.e. , for each combination of variable assignments , we store the value of each variable in the formula , only if that variable is forced to be assigned as a result of unit propagation ( note that these assignments are only temporary , done for each iteration of the look - ahead and stored only for the duration of the look - ahead for the two variables ) .",
    "but in ranger we have further extended this technique .",
    "let us consider the assignments which were implied by unit propagation after assigning a pair of variables .",
    "we may further consider _ intersections _ of implications when taking into account different assignments made to the variables in that pair .",
    "we should now focus on the number of conflicts after the application of the unit propagation look - ahead technique after assigning a pair of variables . in the worst case",
    ", we may end up with four conflicts , one for each of the four different assignments for a given pair of variables .",
    "( note that the method to be applied resembles the stlmark s method @xcite and has been applied to cnf formulas in the past  @xcite . )",
    "overall , we have five possible scenarios :    * * zero conflicts * : if there are no conflicts , we will consider all four combinations when computing the intersection .",
    "if a variable is assigned the same value through all combinations , then that value will be assigned and the unit clause rule will be applied . * * one conflict * : * * the intersections will be calculated , but now only considering the combinations that did not yield a conflict ( three in this case ) . again ,",
    "if a variable is assigned the same value through the three combinations , then that value will be assigned and the unit clause rule will be applied . * * a binary clause is added to the formula : this clause results from the negation of the assignments that yield a conflict . * * two conflicts * : * * as above , the intersections will be calculated , but only considering the combinations that did not yield a conflict ( two in this case ) .",
    "this may result in new unit clauses .",
    "* * two binary clauses are added to the formula , resulting each one from the negation of the assignments that yield a conflict .",
    "there is a special case where only one unit clause is added , which happens when a variable assignment is repeated in both conflicts ( the two binary clauses are resolved to generate the unit clause ) . * * three conflicts * : * * the values that were assigned in the only combination that did not yield a conflict will be propagated as a result of the two unit clauses being added , each one with each the variable assignment that did not yield a conflict . * * four conflicts * : the formula yields a conflict for all combinations , which means that the formula is unsatisfiable .    to illustrate the look - ahead behaviour of gunsat",
    "suppose we have the following formula @xmath0 with the clauses :    @xmath44 + @xmath45 + @xmath46 + @xmath47    clearly , for any of the possible assignments to @xmath38 and @xmath39 the value of @xmath48 must be 1 .",
    "thus , we have that @xmath48 must be assigned value 1 , regardless of the assignments made to other variables , and the clause @xmath49 can be added to the formula as a unit clause .",
    "we can then perform unit propagation .",
    "the unit propagation look - ahead can also be used to derive an empty clause .",
    "suppose we have the following formula @xmath0 :    @xmath50 + @xmath51 + @xmath52 + @xmath53    if we consider @xmath42 , then either clause @xmath54 or @xmath55 becomes unsatisfied .",
    "on the other hand , if we consider @xmath41 , then either clause @xmath56 or @xmath57 becomes unsatisfied .",
    "therefore , there is no assignments to variable @xmath38 to make the formula satisfied and as such we conclude that it is unsatisfiable .",
    "( in this case , there was no need to consider pairs of assignments to reach such a conclusion . )",
    "one of the objectives of this paper is to successfully integrate features of the gunsat algorithm into the ranger algorithm .",
    "we do not want , however , to modify the most important properties of the original ranger , nor alter its flow .",
    "the unit propagation look - ahead was , thus , added to the step of satisfiability - preserving transformations .",
    "the probability , @xmath58 , to execute these transformations is 90% , and like the other transformations , unit propagation will be executed , on average , in 90% of the iterations of the algorithm .",
    "this procedure has been divided into two parts : unit propagation look - ahead with pairs of literals and unit propagation look - ahead with only one literal .",
    "the first one is only executed once , the first time that satisfiability - transformations are executed , due to the overhead it has on the performance of the solver .",
    "the second part of this procedure , which is less expensive , is executed in every satisfiability - preserving transformation .",
    "finally , note that these methods can prove the unsatisfiability of a formula themselves : if all possible assignments to a pair of variables result in conflicts then the formula is unsatisfiable ; likewise , if for both possible assignments to a variable a conflict is detected , the algorithm also returns unsatisfiable .",
    "it is also possible to find a solution during this step , though this occurs less frequently .",
    "the way extended resolution is used in gunsat is intrinsically related to the algorithm itself , built to take advantage of its scoring scheme .",
    "note that extended resolution is only used when the algorithm has tried to increase the score of a pair of literals too many times without success .",
    "it is very different from the way ranger operates , where no scoring scheme for literals is used .",
    "thus , we had to add gunsat s scoring scheme to ranger to implement extended resolution in the same way it was successfully used in gunsat .",
    "but there is a problem with this approach .",
    "gunsat s scoring system for pairs of literals is part of the main heuristic of the solver .",
    "it was developed to be the backbone of the algorithm and to be a highly refined heuristic of scoring for choosing the best literals and clauses to resolve .",
    "methods like extended resolution , unit propagation look - ahead or binary clause saturation are only meant to improve this heuristic .    in the previous section",
    ", we described the way in which unit propagation look - ahead , a method also used in gunsat and which proved to yield successful results , was added to the original ranger . but this method was not intrinsically linked to the base of gunsat , as extended resolution is .",
    "one could simply add it as a preprocessing technique , or run it as a satisfiability preserving transformation to ranger without loss of identity .    even though adding extended resolution to ranger seemed to be neither more efficient nor an easy task , and although it did not promise to integrate well with the already implemented algorithm and methods , we tried to integrate it with ranger and to improve its performance on unsatisfiable instances .",
    "as said above , ranger does not have a scoring scheme for literals like gunsat does , so that extended resolution could be applied directly to that scheme and be integrated seamlessly in the algorithm .",
    "instead , we chose to adapt the scoring method of gunsat to ranger and thus apply the extended resolution in the same way gunsat does .",
    "extended resolution is executed only during the satisfiability - preserving transformations phase of the ranger algorithm , in the same way as unit propagation look - ahead with one variable is , and for the same reason : we did not want to alter ranger s base concept and program flow . furthermore , besides the probability @xmath58 of this phase of the algorithm , we inserted another probability @xmath59 , and the steps of extended resolution will only be executed according to this probability .",
    "we had some trouble finding an appropriate number for this probability , mostly because , in the gunsat paper @xcite the authors write that extended resolution is used after the algorithm has tried to increase the score of a given pair of literals `` too many times '' , but do not provide details .",
    "we chose @xmath60 which means it will be executed in about 4.5% of the iterations ( calculated by multiplying the 90% chance that the satisfiability - preserving transformations phase will be run and the 5% chance that extended resolution will be executed within that phase ) .    at the start of each phase of extended resolution",
    ", our algorithm will compute the scores for all the pairs of literals in the working formula , in the same way that gunsat calculates its scores : each pair of literals ( @xmath61 ) appearing in the formula is credited a score computed by adding the score of each literal in each clause @xmath26 according to the following formula : @xmath62 .",
    "we compute the score of each variable in each clause and add them for each pair of literals .",
    "the score of a clause is then computed by summing the scores of all the pairs of literals it contains .",
    "finally , we calculate the score of each quadruplet by adding the sum of the squares of the scores of its pairs of literals .",
    "after the scores have been computed , we continue to follow gunsat s heuristic to improve the score of a pair of literals ( note that extended resolution will only be applied if we can not improve the score of a pair of literals after too many times ) .",
    "the best scored quadruplet in the formula is computed and found , containing the literals @xmath63 and @xmath64 .",
    "we then try to find a new clause with both @xmath63 and @xmath64 by searching the working formula for two clauses : one containing @xmath63 and a pivot literal @xmath65 , and the other containing @xmath64 and the complement of the pivot literal , @xmath66 , such that the resolution rule can be performed and the needed clause with @xmath63 and @xmath64 is generated .",
    "we only try to generate the new clause @xmath1 from the two clauses having the lowest scores . because of this restriction , it is not always possible to generate a new clause according to the specified conditions ( the cause could simply be that the new clause may be subsumed by an already existing clause , or it may be a tautology ) .",
    "if the score of one pair of the highest scored quadruplet can not be improved , the other scores of the same quadruplet are iteratively tried .",
    "if no pairs of literals in this quadruplet can be improved , the second best scored quadruplet is tried and so on .",
    "finally , the algorithm checks , for all pairs of literals , whether their score has been increased too many times without any success or not .",
    "we set this value to 20 , i.e. , we consider the score of a pair of literals to be increased too many times when that value reaches 20 . if this occurs for literals @xmath63 and",
    "@xmath64 then three new clauses will be added along with a new variable @xmath33 :    @xmath67 + @xmath68 + @xmath69    as we can see , there is a lot of implementation work needed to add this method to ranger , especially if we apply it in the same way gunsat does .",
    "computing the scores and looking for the new clause is very demanding for the algorithm , and we are adding an additional layer of complexity to ranger , whereas in gunsat this computation was already part of the algorithm itself .",
    "this section illustrates the behaviour of ranger on a set of problem instances .",
    "the instances consist of two benchmarks  :    * the aim benchmark instances are all generated with a particular random 3-sat instance generator  @xcite .",
    "its primary role is to provide instances that the conventional random generation can not generate .",
    "the generator runs in a randomized fashion , so that it is essentially different from those generated deterministically , or those translated from other problems such as graph colouring .",
    "we utilized three sets of unsatisfiable aim problem instances .",
    "each set has either 50 , 100 or 200 variables , and within each set we have two groups : four instances where the ratio clause / variable is 1.6 , and another group of four instances for which the ratio is 2 . *",
    "the uuf50 - 218 benchmark consists of unsatisfiable uniform random 3-sat instances . for an instance with @xmath5 variables and @xmath14 clauses ,",
    "each of the @xmath14 clauses has three literals which are randomly picked from the @xmath70 possible literals ( the @xmath5 variables and their negations ) such that each possible literal is selected with the same probability .",
    "clauses are discarded either if they contain repeated literals or a literal and its negation ( i.e. tautologous clauses ) .",
    "we considered the data set of 100 unsatisfiable instances with 50 variables and 218 clauses , dubbed data set uuf50 - 218 .",
    "table  [ instances ] illustrates the characteristics of each set of problem instances , providing for each of them the number of instances , variables and clauses .",
    ".characteristics of each set of problem instances [ cols=\"^,^,^,^\",options=\"header \" , ]     [ iterations ]    from these tables , we conclude that the best solver for solving easier instances with few variables and a low ratio of variables / clauses is the original ranger due to its simplicity . for all the other instances of the aim family , ranger with",
    "unit propagation look - ahead beats the other two ranger variants in terms of percentage of instances solved , required time and number of iterations , and is comparable with gunsat . for the uuf50 - 218 set of instances , gunsat is far superior to ranger in any of its forms .    not surprisingly , extended resolution proved to be too heavy for ranger s rather simple algorithm , and did not produce good results .",
    "the strength of ranger lies in being simple enough to perform many moves per second and that makes up for the rather simple and somehow unintelligent but fast heuristics used . on the other hand ,",
    "extended resolution , while being a simple technique to implement , is used in gunsat to improve its scoring scheme , which is a heavy feature of the algorithm and is finely adjusted for optimum performance . by implementing part of this scoring scheme in ranger with the only goal of adding extended resolution to the algorithm , we actually went against ranger s principles of simplicity , and thus the results achieved suggest not to use extended resolution when ranger is concerned .",
    "thus we can conclude that adding simple and fast techniques to ranger is a viable option when trying to improve its base algorithm .",
    "these methods should not rely on scoring schemes , nor depend too much on certain conditions to be met : they must be independent and simple .",
    "this is based on the fact that they will be added to ranger on its satisfiability - preserving transformation phase , and will not alter the basic algorithm significantly .",
    "this paper evaluates the usefulness of integrating native techniques to gunsat into ranger , another sls solver able to prove unsatisfiability .",
    "we first tested both the original ranger and gunsat in a number of unsatisfiable instance sets , in which gunsat proved to be faster in the harder instances by systematically beating ranger .",
    "this is mostly due to the fact that gunsat has a more powerful reasoning mechanism and a finer heuristic to guide moves , whereas ranger is simpler .",
    "because of the use of powerful high reasoning techniques like unit propagation look - ahead and extended resolution , and a finer heuristic , gunsat s moves are slower but more intelligent and pondered , in contrast to ranger s rather faster but blinder moves .",
    "the integration of gunsat s techniques into ranger , namely unit propagation look - ahead and extended resolution resulted in improving ranger s performance overall with the first technique , whereas the second one has degraded ranger s performance .",
    "future work includes further investigating why extended resolution impede the basic version of ranger and using automatic methods to tune parameters , namely @xmath59 , such as the f - race proposed by birattari _",
    "et al . _",
    "@xcite .",
    "this material is based in part upon works supported by the science foundation ireland under grant no .",
    "05/in / i886 , and partially supported by fundao para a cincia e tecnologia under research project ptdc / eia/64164/2006 ."
  ],
  "abstract_text": [
    "<S> stochastic local search ( sls ) has been an active field of research in the last few years , with new techniques and procedures being developed at an astonishing rate . </S>",
    "<S> sls has been traditionally associated with satisfiability solving , that is , finding a solution for a given problem instance , as their intrinsic nature does not address unsatisfiable problems . </S>",
    "<S> unsatisfiable instances were therefore commonly solved using backtrack search solvers . </S>",
    "<S> for this reason , in the late 90s selman , kautz and mcallester proposed a challenge to use local search instead to prove unsatisfiability . </S>",
    "<S> more recently , two sls solvers  ranger and gunsat  have been developed , which are able to prove unsatisfiability albeit being sls solvers . in this paper , we first compare ranger with gunsat and then propose to improve ranger performance using some of gunsat s techniques , namely unit propagation look - ahead and extended resolution . </S>"
  ]
}