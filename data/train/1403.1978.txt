{
  "article_text": [
    "micromagnetic simulation of ferromagnetic nanostructures is a widespread tool to support research and device design in a variety of fields , including magnetic data storage and sensing .",
    "the micromagnetic theory is based on partial differential equations proposed in @xcite combined with an equation of motion that can be solved to determine the time - development of the magnetization vector function .      numerical simulations in micromagnetics",
    "commonly solve the landau - lifshitz - gilbert and the associated partial differential equations using a finite difference discretization of space ( including oommf , llg micromagnetics simulator , micromagus , mumax , micromagnum  @xcite ) . in the finite difference method",
    ", space is discretized using a regular grid with cuboidal cells , and the magnetization and other scalar and vector fields involved in the computation are assumed to be constant within each of these cubiodal cells .",
    "the magnetization vector field @xmath0 is the primary degree of freedom . as a function of @xmath0 , which is represented by a constant within every cell ,",
    "various fields such as the exchange , anisotropy , zeeman , and demagnetizing fields are computed .",
    "these are added together , and enter the equation of motion for @xmath0 as the effective field .",
    "the most demanding part of the calculation is to determine the demagnetizing field : to compute the demagnetizing field for one of the discretization cells , an integral over the whole magnetic domain has to be carried out , which translates into a ( triple ) sum ( in a 3d system ) over all cells in the finite difference discretization .    for a finite difference discretization of a three - dimensional sample with @xmath1 discretization points in the x - direction ,",
    "@xmath2 points in the y - direction and @xmath3 points in the z - direction , there are @xmath4 cuboidal cells in total . to compute the demagnetizing field in each one of these cells , we need to consider the total contribution of all @xmath5 cells .",
    "thus , to work out the demagnetizing field for all @xmath5 cells requires @xmath6 operations using a naive approach . for",
    "realistic mesh sizes this is infeasible . instead ,",
    "usually the demagnetizing field @xmath7 is expressed as a discrete convolution of the so - called demagnetizing tensor @xmath8 and the representation of the magnetization @xmath0 @xmath9 the triple indices @xmath10 are used to index cells in the 3d - discretization , i.e. @xmath11 counting cells in the x - direction , and correspondingly @xmath12 and @xmath13 in y- and z- direction .",
    "the vector @xmath14 points to the centre of the cell @xmath10 and @xmath15 is the magnetization in that cell , and @xmath16 is the demagnetizing field in that cell .",
    "the discrete convolution ( [ eq : discreteconvolution ] ) is typically carried out as a product in fourier space as the regular spacing of the finite difference cells allows straightforward use of the fast fourier transform and its inverse .",
    "the demagnetizing tensor  @xmath17 needs to be computed once for given geometry and discretization , normally at the setup stage of the simulation . in this work we propose a new procedure for the accurate computation of entries in the demagnetizing tensor .",
    "the tensor @xmath18 describes the energy of the demagnetizing interaction between two uniformly magnetized cuboids  @xmath19 and  @xmath20 of volume  @xmath21 separated by the translation vector @xmath22 .",
    "it is a symmetric tensor of rank 2 , which we write in the dimensionless form following the convention from  @xcite @xmath23    the computation of the demagnetizing field using the formula   follows the commonly used energy - based approach to the discretization of the landau - lifshitz - gilbert equation  @xcite . in this approach ( used in oommf  @xcite and in our work ) , the components of the effective field in each cuboidal cell are obtained via a minimization procedure applied to the discretized total energy  @xmath24 . in contrast , in the field - based approach the discretized fields are obtained from the corresponding continuous fields by e.g. sampling at the cell center  @xcite , and the demagnetizing tensor   is not used .",
    "the components of the demagnetizing tensor can be computed via an analytical formula  @xcite . however , when @xmath25 is large compared to the size of the mesh cells ( i.e. when the interacting mesh cells at @xmath26 and @xmath27 are far apart on the grid ) , evaluation of this expression on a computer can result in a loss of significant digits , to a point where the computed answer contains no significant digits at all  @xcite .",
    "the loss of accuracy is caused by catastrophic cancellation : the terms of the analytical expression correspond to indefinite integrals with @xmath28 order of growth , while the demagnetizing tensor itself ( the definite integral ) is of the order @xmath29 .",
    "on modern cpus , double - precision floating numbers contain approximately 15 significant digits , therefore the relative error in the computation of the demagnetizing tensor using the analytical formula is of the order @xmath30 .",
    "one can therefore expect that for cell separations greater than @xmath31 the analytical computation will contain no significant digits at all ( i.e. , the relative error will be greater than 1 ) .",
    "indeed , the above estimate is confirmed if the result of the computation using the analytical formula is compared to the exact ( up to machine precision ) value of the demagnetizing tensor .",
    "the exact value is computed using specialized high - precision libraries ( see sec . [",
    "sec : error - estimation ] and [ sec : other - high - accuracy ] ) . as seen in fig .",
    "[ fig - final - comparison ] , the relative error @xmath32 of the analytical computation grows as @xmath33 and crosses the @xmath34 threshold at a separation of about 300 cells .",
    "the micromagnetic simulation package oommf counteracts this inaccuracy problem by utilizing an asymptotic expansion of the demagnetizing tensor @xcite in terms of powers of @xmath35 up to 6th order . in this paper",
    "we investigate an alternative approach to deal with the catastrophic cancellation problem , which is to compute the integral ( [ eq - n ] ) directly using numerical integration .",
    "as outlined in section  [ sec : introduction ] , the 6-d integral described in   can be computed using    * an analytical formula  @xcite , * an asymptotic expansion  @xcite , * numerical integration .    for computing integrals in one dimension ,",
    "multiple highly - accurate methods are available .",
    "however , the computation of multidimensional integrals is hindered by the so - called curse of dimensionality , where the number of integration points increases exponentially with the increase in dimension . since the demagnetizing tensor  @xmath18 has to be computed for all possible grid offsets  @xmath22 , the integration method for this six - dimensional integral needs to be both accurate and fast .",
    "the tradeoff between accuracy and computational effort can be achieved using the sparse grid family of methods , also known as smolyak quadrature  @xcite ( for a brief review of other alternatives see  @xcite ) .",
    "the sparse grid method is used to extend one - dimensional integration rules to integration formulas in multiple dimensions .",
    "below we summarize the key ideas of the method  @xcite . starting with a one - dimension family of integration formulas @xmath36 for computing the 1d integral @xmath37 = \\sum_{i=1}^{n_k } a_{ki } f(x_{ki } ) \\label{eq-1drule}\\ ] ] we can write the formal identity @xmath38 + ( i_1[f ] - i_0[f ] ) + \\ldots \\\\   & = \\delta_0[f ] + \\delta_1[f ] + \\ldots\\end{aligned}\\ ] ] where @xmath39 and @xmath40 .",
    "an example for a family of integration formulas @xmath36 are gaussian integration formulae with @xmath41 points .",
    "now , we apply the above formal identity @xmath42 times to obtain a @xmath42-dimensional integration rule @xmath43^d } f(\\mathbf x ) d\\mathbf x = \\big ( \\prod_{j=1}^d ( \\delta_0^{(j ) } + \\delta_1^{(j ) } + \\ldots ) \\big)[f ] \\label{eq - ndrule}\\ ] ] here the @xmath44 operator applies the approximation   to the @xmath45-th argument of the function @xmath46 , and the @xmath47 symbol represents the operator product , i.e. repeated application of @xmath48 in all @xmath42 dimensions .",
    "the formal expansion   is infinite ; to obtain a practical integration formula we need to truncate it .",
    "smolyak quadrature achieves this by expanding the product   and grouping together terms @xmath49 with the same term order @xmath50 : @xmath51^d } f(\\mathbf x ) d\\mathbf x       & = q_0[f ] + q_1[f ] + \\ldots \\\\      & \\approx q_0[f ] + q_1[f ] + \\ldots + q_k[f ] \\label{eq - smolyak}\\end{aligned}\\ ] ] where @xmath52 = \\sum_{i_1 + \\ldots + i_d = k } \\delta_{i_1}^{(1 ) } \\delta_{i_2}^{(2 ) } \\cdots \\delta_{i_d}^{(d)}[f]\\ ] ] compared to the evaluation of the @xmath42-dimensional integral using a naive @xmath42-fold product ( which required @xmath53 integration points for rule @xmath36 ) , the smolyak formula   greatly reduces the number of integration points required to achieve a certain level of accuracy , as long as the integrand is reasonably smooth .",
    "different one - dimensional families   will result in different multidimensional formulas  ; in our testing for the demagnetizing integrand   we obtained the best results when using the `` delayed kronrod - patterson sequence '' developed by petras  @xcite .",
    "the delayed sequence is based on the kronrod - patterson family of 1d integration formulas @xmath54  @xcite , however some of the formulas are repeated to lower the rank of approximation ( and the required number of integration points ) , determined by the  delay sequence ",
    "@xmath55 : @xmath56 for the maximum delay sequence  @xcite the formulas are repeated so that the 1-d rule @xmath57 is accurate for polynomials up to rank  @xmath58 : @xmath59        a straightforward way to compute the demagnetizing tensor numerically would be to apply the sparse grid formulas to the 6-d integral  .      due to the high dimensionality of the 6d integral , the number of required integration points will be quite high . to reduce the dimensionality , we can transform the 6-d volume integral  @xmath60 to a 4-d surface integral using a variant of gauss s theorem .",
    "the procedure is described in  @xcite and results in the following formulas for the components of the demagnetizing tensor where we have used the notation of  @xcite @xmath61\\ ] ] @xmath62\\ ] ] with @xmath63 and @xmath64 where @xmath65 is the vector between the two interacting cells , and @xmath66 , @xmath67 , @xmath68 are the edge lengths of the cuboidal cells .",
    "to simplify the application of numerical integration formulas , we transform the above expressions so that integration is performed over the unit cube @xmath69 ^ 4 $ ] .",
    "@xmath70 \\ ,   dz\\ , dy \\ ,",
    "dz ' \\ , dy '   \\label{eq - nxx-4d}\\ ] ] @xmath71 \\label{eq - nxy-4d}\\end{gathered}\\ ] ] with @xmath72 @xmath73 the remaining components of the tensor can be obtained by variable substitution ( for example , @xmath74 ) .    in this approach",
    ", we are essentially computing two dimensions of the 6-d integral analytically , and the remaining four numerically .",
    "as we shall see , the two analytical steps introduce a small amount of cancellation , but the required number of integration points is significantly reduced .      to determine the accuracy of the computed demagnetizing tensor @xmath17 , we compute its exact ( to machine precision ) value @xmath75 via the analytical formula using the gnu mpfr high - precision floating point library  @xcite , and evaluate the relative error @xmath32 : @xmath76 where the matrix norm is defined as @xmath77 .",
    "in the computation of the demagnetizing tensor as a function of the distance between the interacting cuboids , @xmath78 cell size , kronrod - patterson sparse grid integration with full delay , order @xmath79  @xcite , double precision arithmetic ( precision @xmath80 ) . , width=377 ]      figure  [ fig - final - comparison ] shows the comparison of the accuracy of the analytical formula , the asymptotic expansion , and the numerical sparse grid integration methods as a function of the distance between cells using ( 8 byte ) double floating point .",
    "for the numerical sparse grid integration , the 4d method ( sec .",
    "[ sec:4d - method ] ) has been used .",
    "while the aspect ratio of the cuboidal cell with edge lengths @xmath81 and @xmath82 affects the results somewhat , they are independent of the absolute size of the cuboidal cell .",
    "we have chosen @xmath81 and @xmath83 so that the distance @xmath84 between interacting cuboids is expressed in the number of cells between the interacting cuboids .",
    "for example , for a micromagnetic simulation with a @xmath85 cell size , the distance of 10 on the plot in figure  [ fig - final - comparison ] corresponds to a @xmath86 distance on the mesh .",
    "we start by discussing the analytical formula shown as a red solid line in fig .",
    "[ fig - final - comparison ] .",
    "its relative error @xmath32 for very short distances is @xmath87 .",
    "we can not expect an error below @xmath88 as this is the precision of the double floating point numbers used .",
    "as the distance between interacting cells increases , the analytical formula becomes less accurate . at a separation of 100 cells , it is about @xmath89 , meaning that only the first 4 digits are correct .",
    "in fact , beyond a distance of about 300 cells the relative error becomes greater than 1 , indicating that no digits of the double float can be expected to be correct and that not considering the demagnetizing tensor beyond that point would be more accurate than computing it analytically .",
    "the asymptotic expansion ( blue dash - dotted line in fig .",
    "[ fig - final - comparison ] ) starts with a large relative error @xmath90 for short distances , which decreases as the distance increases . at about 200 cells distance ,",
    "the relative error is @xmath91 and remains of that magnitude for larger distances .",
    "the smooth reduction of the error with distance reflects the way the high - order moments of the cuboid interaction decay with increasing distance , thus making the asymptotic approximation increasingly more accurate .",
    "the asymptotic expansion is more accurate than the exact analytical expression for distances greater than about 11 cells .    the precise number of cells for which this crossover occurs depends on the aspect ratio of the discretization cell as well as the direction of the separation vector between the two interacting cuboids . in practical implementations of finite difference micromagnetic codes",
    "a crossover point needs to be identified . in oommf , by default",
    "the asympotic formula is used for distances above 32 cells , which for this example corresponds to an error of @xmath92 .",
    "the numerical sparse grid integration error ( black dotted line in fig .  [ fig - final - comparison ] ) also starts around @xmath93 for short distances and decays to @xmath94 for a cell distance of about 7 .",
    "for very short distances , the integrand varies quickly ( it diverges for @xmath95 ) and numerical integration is inaccurate . for cell distances between 7 and 70 ,",
    "numerical integration is more accurate than the analytical expression , and more accurate than the asymptotic expansion . beyond radius 70 ,",
    "the asymptotic expansion is more accurate than numerical integration .",
    "the slight inrease in the relative error of the numerical formula with increasing distance is caused by the cancellation introduced by gauss s theorem ( see  [ sec:4d - method ] ) .    in summary ,",
    "the numerical evaluation of the analytical formula is most accurate for short distances , and the asymptotic expansion is most accurate for long distances .",
    "the new sparse grid integration method introduced here is most accurate for intermediate distances .      :",
    "the rule s order of approximation ; ( @xmath96 ) : the number of integration points .",
    ", width=377 ]    in the sparse grid method , the order of approximation is a parameter that can be adjusted to reach the desired level of accuracy or performance . for lower orders of approximation , one can also use fixed - order integration formulas that usually provide the same accuracy with fewer integration points .",
    "an extensive library of such formulas is available  @xcite .    since the computation of the demagnetizing tensor is a one - off cost , higher order , more accurate integration formulas would be preferable . in figure",
    "[ fig - number - of - points ] we show the results for a number of sparse grid formulas as well as for a 145-point fixed - order formula from  @xcite .",
    "the most accurate method considered here is the 641-point 7th order sparse grid method based on the 1d kronron - patterson sequence with full delay  @xcite .",
    "the delayed kronrod - patterson methods with orders 6 and  5 have fewer points and decreased accuracy .",
    "formulas based on gauss or kronrod - patterson sequences with medium delay require extra integration points to achieve the same level of accuracy and are thus suboptimal compared to the kronrod - patterson family with full delay .    the 145-point fixed order formula is more accurate than the 193-point 5th order kronrod - patterson formula , but slightly less accurate than the 385-point 6th order formula .    based on these results , we recommend using either the 145-point fixed order formula or the kronrod - patterson fully delayed formula with order 6 or 7 , depending on required accuracy and performance .",
    "cells.,width=377 ]    as an alternative to computing the 4d integral ( method  [ sec:4d - method ] ) , we can also compute all of the 6 integrations numerically ( method  [ sec:6d - method ] ) .",
    "the results for the 6d integration method are shown in figure  [ fig-4d - vs-6d ] .",
    "all red dashed curves show results for the 6d method , and all black solid lines show results for the 4d method .    both for the three 4d data sets and the three 6d data sets",
    ", we can see that the decrease in the error with increasing distance is faster for higher order methods .",
    "the 4d lines show minimal error between 8 and 11 cells distance , and for larger distances the error increases a little  this reflects the numerical cancellation from subtracting large terms that increase with distance and originate from the analytical integration that has been carried out over 2 dimensions . on the contrary , the 6d data sets  where",
    "the whole 6d integral has been computed numerically  does not suffer from this and the error remains small ( @xmath97 ) for larger distances .",
    "however , the number of evaluation points is higher compared to the 4d method .",
    "as seen in figure [ fig - number - of - points ] , even the lowest order quadrature formula gives a sufficient accuracy gain in the intermediate range to be better than the analytic and the asymptotic expression .",
    "however , in time - dependent micromagnetic simulations the computation of the demagnetizing tensor is a one - time setup cost , and the setup cost is only slightly influenced by the order of the integration formula  one might as well choose the higher order , more accurate formula .    comparing the 4d and 6d method , we suggest the 4d method as it is faster to compute .",
    "the 4d method is less accurate than the 6d for the largest distances but this is of little practical concern  for those distances , the asymptotic expansion can be used instead .      in table  [ table - performance ] , we show performance measurements for computing the entries in the demagnetizing tensor . for the fixed order ( k=9 )",
    "145-point integration rule , the computational cost is comparable to the analytical formula , while the kp full delay ( k=7 ) 641-point rule is approximately 5 times slower . the total cost of evaluating the demagnetizing tensor on a @xmath98 mesh was @xmath99 ( table  [ table - performance2 ] ) for the 145-point rule and @xmath100 for the 641-point rule .",
    "since a typical dynamical micromagnetic simulation usually requires 10,000 or more time steps , the one - time cost of setting up the demagnetizing tensor is minor even for the 641-point rule . for the sample system studied here , evaluating the effective field and",
    "dm / dt once takes @xmath101 .",
    "we also note that as the mesh grows larger , more of the entries can be computed using the extremely fast asymptotic formula , resulting in sublinear scaling of the total cost with mesh size @xmath5 .",
    ".per - cell cost of computing the entries of the demagnetizing tensor , workstation : dual cpu intel e5506 2.13 ghz ( 8 threads ) , compiler : gcc 4.7.2 .",
    "[ table - performance ] [ cols=\"<,^\",options=\"header \" , ]       of computing the demagnetizing tensor using single precision arithmetic ( precision @xmath102 ) , @xmath78 cell size , kronrod - patterson sparse grid integration with full delay , order @xmath79.,width=377 ]    the recent rise of general purpose computing on graphical processing units ( gpgpu ) has re - invigorated single - precision floating point operations : on these architectures single precision floating point operations are generally much faster , and on cheaper cards the only type of floating point operations provided .",
    "additionally , the available ram on the gpu card is limited , providing another incentive to use single rather than double precision floating point numbers .",
    "we repeat the study presented in figure [ fig - final - comparison ] but use single precision numbers for all methods and show the results in figure [ fig - single - precision ] .",
    "the qualitative findings are the same as for double precision numbers : the most accurate methods are as a function of increasing distance : ( i ) the analytical formula , ( ii ) the sparse grid numerical integration technique and ( iii ) the asymptotic expression .",
    "however , the relevant cross - over points have moved to shorter distances .",
    "the analytical expression becomes less accurate than numerical integration for more than 2 cells distance , and the asymptotic expression is more accurate than numerical integration for spacings greater than 8 cells .    as mentioned in [ sec : overview ] we find that the analytical expression for double precision ( figure [ fig - final - comparison ] ) provides only 4 significant digits ( i.e. a relative error of @xmath89 ) for a distance of 100 cells .",
    "for single precision ( figure [ fig - single - precision ] ) we find that the analytical expression provides the same level of accuracy ( i.e. 4 significant digits ) only for distances up to 3 cells .",
    "correspondingly , the distance for which the relative error exceeds 1 , moves from over 300 cells with double precision to 11 cells with single precision .",
    "the accurate calculation of the demagnetizing tensor entries using single precision floating point numbers only is challenging  using the best methods currently known and combining the three methods shown in figure [ fig - single - precision ] , the relative error can be kept around or below @xmath89 .    for practical use of gpgpu single precision calculations for micromagnetic simulation , we recommend to compute the demagnetizing tensor using double - precision ",
    "either on the gpu with some reduction in speed if the gpu hardware supports this , or on the cpu with a more significant time penalty . as the computation of the demagnetizing tensor only needs to be done once and subsequent computations of the demagnetizing field as required for energy minimisation or time stepping only require to carry out the convolution , it should be acceptable to increase the accuracy of the demagnetizing tensor for a one - off time penalty in the setup phase .",
    "our tests showed that the forward and inverse fast fourier transforms required to compute the convolution did not introduce any significant numerical error in the calculation of the demagnetizing field ( either single or double precision ) .",
    "we note for completeness that there are other options to compute the demagnetizing tensor more accurately than any of the methods outlined above if high accuracy is of utmost importance .",
    "there are high precision arithmetic libraries available which provide software implementations of floating point operations : the library user can choose the number of significant digits used in the calculations ( where 8 would approximately correspond to single precision accuracy and 16 to double precision floating point numbers ) .",
    "the larger the number of significant digits to be used , the slower is the execution of these operations .",
    "we have used this technique to obtain the reference data @xmath103 required to compute the error @xmath32 .",
    "using such libraries requires significant changes to source code , and execution is extremely slow .",
    "it is impractical to use such libraries for micromagnetic simulation .",
    "we have compared the accuracy of computing the demagnetizing tensor using the analytical formula , the asymptotic expansion , and numerical integration . we obtain and provide quantitative data on the relative error of demagnetizing tensor entries computed using all three methods .",
    "we propose a new method using numerical integration to compute the entries of the demagnetizing tensor which allows to increase the accuracy from an error of @xmath104 to an error of only @xmath105 for intermediate distances of between 4 and 80 simulation cells for the commonly used double precision floating point numbers . in the context of micromagnetic simulations",
    ", we find that the 7th order 641-point kronrod - patterson sparse grid formula with full delay  @xcite and the fixed - order 145-point rule  @xcite provide a reasonable tradeoff between accuracy and performance .",
    "the integration points and weights for those formulas are included in the supplementary information for this paper .",
    "we thank prof .",
    "ronald cools for providing access to the online encyclopaedia of cubature formulas  @xcite .",
    "we acknowledge financial support from the epsrc centre for doctoral training grant ep / g03690x/1 ."
  ],
  "abstract_text": [
    "<S> in the finite difference method which is commonly used in computational micromagnetics , the demagnetizing field is usually computed as a convolution of the magnetization vector field with the demagnetizing tensor that describes the magnetostatic field of a cuboidal cell with constant magnetization . an analytical expression for </S>",
    "<S> the demagnetizing tensor is available , however at distances far from the cuboidal cell , the numerical evaluation of the analytical expression can be very inaccurate .    due to this </S>",
    "<S> large - distance inaccuracy numerical packages such as oommf compute the demagnetizing tensor using the explicit formula at distances close to the originating cell , but at distances far from the originating cell a formula based on an asymptotic expansion has to be used . in this work , </S>",
    "<S> we describe a method to calculate the demagnetizing field by _ numerical evaluation of the multidimensional integral _ in the demagnetizing tensor terms using a sparse grid integration scheme . </S>",
    "<S> this method improves the accuracy of computation at intermediate distances from the origin .    </S>",
    "<S> we compute and report the accuracy of ( i ) the numerical evaluation of the exact tensor expression which is best for short distances , ( ii ) the asymptotic expansion best suited for large distances , and ( iii ) the new method based on numerical integration , which is superior to methods ( i ) and ( ii ) for intermediate distances . for all three methods , we show the measurements of accuracy and execution time as a function of distance , for calculations using single precision ( 4-byte ) and double precision ( 8-byte ) floating point arithmetic . </S>",
    "<S> we make recommendations for the choice of scheme order and integrating coefficients for the numerical integration method ( iii ) . </S>"
  ]
}