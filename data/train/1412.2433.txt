{
  "article_text": [
    "the ability to learn the social path lengthto other social network users can often help individuals make informed trust and access control decisions . for instance , if attendees at a large convention could easily find other attendees with whom they share social links ( e.g. , a linkedin connection ) , this could help them decide who to chat or meet up with .",
    "similarly , travelers and commuters could more consciously decide with whom to interact , share rides , etc . in general , discovering the social path lengthbetween users is beneficial in many interesting scenarios , such as estimating the _ familiarity _ to a location ( which can in turn be used for context - based security  @xcite ) , as well as for routing in delay - tolerant ad - hoc mobile networks  @xcite and anonymous communications  @xcite",
    ".    * problem statement . *",
    "the widespread adoption of online social networks ( osns ) makes it appealing to measure the length of a path between two nodes , e.g. , to use this information as a signal of reciprocal trust and/or social interest .",
    "today , a facebook user can see the number of common friends with another user , while linkedin also displays the social path length .",
    "however , as popular osns are centralized systems , so are the features they offer to discover social paths . as such , they do not particularly adapt well to mobile environments where social interactions are tied to physical proximity , thus severely limiting the feasibility of many applications scenarios  users may not always be able to connect to the internet or willing to reveal their location and/or interests to the provider .",
    "relying on centralized systems to learn social path lengths implies that , whenever alice queries a server for the social path lengthto bob , the server learns that alice is interested in bob , their frequency of interactions , and their locations .",
    "this prompts the need for decentralized and privacy - preserving techniques for social path lengthestimation .",
    "users should only learn if they have any common friends , without having to reciprocally reveal the identities of friends that they do not share , and discover the length of the social path between them ( for paths longer than two ) , without learning which users are in the path .",
    "* technical roadmap . *",
    "our work builds on common  friends  @xcite , a system supporting privacy - preserving common friend discovery on mobile devices : building on a cryptographic primitive called private set intersection ( psi )  @xcite , it allows mutual friends to be discovered by securely computing the intersection of friendship _ capabilities _ , which are periodically distributed from a common  friendsuser to all the friends who are also using it .",
    "however , besides being limited to social paths of length two , common  friendsonly discovers the subset of the mutual friends who are _ already _ in the system , thus suffering from an inherent bootstrapping problem .",
    "this paper introduces social  pal , the first system that supports the privacy - preserving estimation of the social path lengthbetween any two social network users .",
    "we introduce the notion of _ ersatz nodes _ , created for users that are direct friends of one or more users of social  palbut are not part of the system .",
    "we guarantee that two users of social  palwill be able to discover _ all _ their common friends in the osn ( i.e. , all paths of length two ) .",
    "we then present a hash chain - based protocol that supports the ( private ) discovery of social paths longer than two , and demonstrate its effectiveness by means of extensive simulations .",
    "our work is not limited to designing protocols : we also fully implement social  paland deploy a scalable server architecture and an android client library enabling developers to seamlessly integrate it into their applications .",
    "* contributions . * in summary",
    ", we make the following contributions :    1 .",
    "we present an efficient privacy - preserving estimation of social paths of arbitrary length ( section  [ sec : social ] ) .",
    "2 .   we state and prove several properties of social  palincluding the fact that , for two users and : ( i ) social  palwill find all common friends of and , including those who are not using it , and ( ii ) for each discovered path between and , social  palallows each party to compute the _",
    "exact _ length of the path ( section [ sec : analysis ] ) .",
    "3 .   using samples of the facebook graph ,",
    "we empirically show that even when only 40% of users use the system , social  palwill discover more than 70% of all paths , and over 40% with just 20% of the users",
    "( section  [ sec : evaluation ] ) .",
    "4 .   we support facebook and linkedin integration and release the implementation of a scalable server - side architecture and a modular android client library , allowing developers to easily integrate social  palin their applications ( section [ sec : implementation ] ) .",
    "we build two android apps : a friend radar displaying the social path lengthto nearby users , and a tethering app enabling users to securely share their internet connection with people with whom they share mutual friends ( see section  [ sec : apps ] ) .",
    "we start by discussing the problem of privately discovering common friends , i.e. , social paths of length two .",
    "we argue that minimal security properties for this problem include both _ privacy _ and _ authenticity _ , as users should neither learn the identity of non - shared friends nor claim non - existent friendships . *",
    "private set intersection ( psi )  @xcite . *",
    "a straightforward approach for privately discovering common friends is to rely on psi , a primitive allowing two parties to learn the intersection of their respective sets ( and nothing else ) .",
    "if friend lists are encoded as sets , then psi could be used to privately find common friends as the set intersection .",
    "one could also limit disclosure to the _ number _ , but not the identity , of shared friends , using private set intersection cardinality ( psi - ca )  @xcite , which only reveals the size of the intersection .",
    "however , using psi ( or psi - ca ) guarantees privacy but not authenticity , as one can not prevent users from inserting arbitrary users in their sets and claim non - existent relationships . *",
    "bearer capabilities . * in order to guarantee authenticity , nagy et al .",
    "@xcite combine bearer capabilities  @xcite ( aka bearer tokens ) with psi , proposing the common  friendsservice , whereby users generate ( and periodically refresh ) a random number  the `` capability ''  and distribute it to their friends via an authentic and confidential channel . as possession of",
    "a capability serves as a proof of friendship , users can input it into the psi / psi - ca protocol , thereby only learning the identity / number of common and authentic friends .",
    "since capabilities are large random values , a simpler variant of psi for private common friend discovery that only relies on cryptographic hash functions and does not involve public - key operations can be used .",
    "parties can hash each item in their set and transfer the hash outputs : since the hash is one - way , parties can not invert it , thus they only learn the set intersection upon finding matching hashes .",
    "this can be further optimized using the * _ bloom filter based psi ( bfpsi ) _ * primitive ( for high - entropy items ) outlined in  @xcite . on the other hand ,",
    "it is not clear whether it is possible to do so for psi - ca , i.e. , to only count the number of common friends",
    ".    * bloom filters . *",
    "a bloom filter ( bf ) is a compact data structure for probabilistic set membership testing  @xcite .",
    "specifically , a bf is an array of @xmath0 bits that can be used to represent a set of @xmath1 elements in a space - efficient way .",
    "bfs introduce no false negatives but can have false positives , even though the probability of a false positive can be estimated ( and bounded ) as a function of @xmath1 and @xmath0 .",
    "formally , let @xmath2 be a set of @xmath1 elements , and bf be an array of @xmath0 bits initialized to 0 .",
    "bf@xmath3 denotes the @xmath4-th item in bf .",
    "then , let @xmath5\\}_{i=1}^\\gamma$ ] be @xmath6 independent cryptographic hash functions , salted with random periodically refreshed nonces .",
    "for each element @xmath7 , set @xmath8 for @xmath9 . to test if @xmath10 , check if bf@xmath11 .",
    "an item appears to be in a set even though it was never inserted in the bf ( i.e. , a false positive occurs ) with probability @xmath12 .",
    "the optimal size of the filter , for a desired probability @xmath13 , can be estimated as : @xmath14 .",
    "[ [ subsec : system - model ] ]    in figure  [ fig : architecture ] , we illustrate the common  friends  @xcite system : it involves a server , a set of osn servers ( such as facebook or linkedin ) , and a set of mobile users , members of one or more of these osns . is implemented as a social network app ( i.e. , a third - party server ) , which stores the bearer capabilities uploaded by the common  friendsapplication running on users devices .",
    "it also allows a user s common  friendsapplication to download bearer capabilities uploaded by that user s friends in the osns .",
    "common  friendsconsists of three protocols : ( 1 ) user authentication , ( 2 ) capability distribution , and ( 3 ) common friend discovery .",
    "[ fig : architecture ]    * osn user authentication * enables the osn server to authenticate a user , provide s osn identifier ( @xmath15 ) to , and to authorize to access information about s friends in the osn , which can be done using standard mechanisms , such as oauth  @xcite .",
    "* capability distribution * involves and , communicating over a secure channel with server authentication provided by certificate @xmath16 , and client authentication based on the previous osn user authentication process .",
    "user generates a random capability @xmath17 ( taken from a large space ) and uploads it to over the established channel .",
    "stores @xmath17 along with the social network user identifier @xmath15 , and sends back @xmath18 , which contains pairs of identifiers and corresponding capabilities of each friend that has already uploaded his capability .",
    "the protocol needs to be run periodically to keep @xmath19 up - to - date , as capabilities are periodically refreshed .    *",
    "common friend discovery * is a protocol run between two users , and , illustrated it in figure  [ fig : bffof ] , allowing and to privately discover their common ( authentic ) friends , based on bfpsi .",
    "first , and exchange their public keys ( @xmath20 and @xmath21 , respectively ) and generate a shared key ( @xmath22 ) used to encrypt messages exchanged as part of the protocol . to prevent man - in - the - middle attacks , ( resp .",
    ", ) cryptographically binds the dh channel to the protocol instance : ( resp . , ) extends each item in the capability set @xmath23 ( resp . , @xmath24 ) by appending dh public keys @xmath20 , @xmath21 , building effectively a new set @xmath25 ( resp . , @xmath26 )",
    ". inserts every element of the @xmath25 set into a bloom filter @xmath27 and sends it to .",
    "discovers the set of friends ( @xmath28 ) in common with by verifying whether each item of his input set @xmath26 is in @xmath27 .",
    "since bloom filters introduce false positives , the set @xmath28 may contain non - common friends .",
    "thus a simple challenge - response protocol is run , where requires to prove knowledge of items available in @xmath28 . at the end of the protocol , and output the set of their common friends @xmath29 .",
    "[ fig : bffof ]",
    "we now present the design and the instantiation of the social  pal , the system to compute the social path lengthbetween two osn users in a decentralized and privacy - preserving way .",
    "* limitations of  @xcite . * before introducing social  pal s requirements , we discuss two main limitations of common  friends  @xcite , as addressing them constitute our starting point :    1 .",
    "_ bootstrapping _ : users and can discover a mutual friend ( say ) , only if has joined the common  friendssystem and uploaded his capability to .",
    "that is , common  friendswill only discover a subset of the mutual friends between and until all of them start using it .",
    "longer social paths _ :",
    "common  friendsonly allows its users to learn whether they are friends or have mutual friends .",
    "if two users have a longer social path between them , common friendscannot detect it .    to illustrate common  friends s bootstrapping problem , we plot , in figure  [ fig : bootstrapping ] , a simple social network with 27 nodes ( i.e. , users ) and 34 edges ( i.e. , friendship relationships ) .",
    "black circles represent users who are using common  friends , and white circles  those who are not .",
    "purple / solid edges represent direct friend relationships ( i.e. , social paths of length 1 ) that are discoverable by common  friends .",
    "when the user base is only 40% of all osn users ( figure  [ subfig:0.25-users ] ) , only 7 out of the 34 direct friend relationships are discoverable ( i.e. , coverage is approximately @xmath30 ) .",
    "when it increases to 60% , coverage increases to about 50% ( figure  [ subfig:0.5-users ] ) .",
    "0.35   and @xmath31 of users using the system .",
    "black ( resp .",
    ", white ) nodes denote users ( resp . , non - users ) of the system .",
    "purple / solid edges denote a direct friendship discoverable by common  friends.,title=\"fig:\",scaledwidth=85.0% ]    0.35   and @xmath31 of users using the system .",
    "black ( resp .",
    ", white ) nodes denote users ( resp . , non - users ) of the system .",
    "purple / solid edges denote a direct friendship discoverable by common  friends.,title=\"fig:\",scaledwidth=85.0% ]    * system model .",
    "* social  pal s system model is the same as that of common  friends(presented in section  [ subsec : system - model ] ) .",
    "it involves a server ( which we design as a social network app ) , a set of osn servers ( such as facebook or linkedin ) , and a set of mobile users members of one or more of these osns ( cf .",
    "figure  [ fig : architecture ] ) .",
    "* functional requirements . *",
    "ideally , social  palshould allow any two users to always compute the exact length of the social path between them , even when social  palis being used only by a fraction of osn users . in order to characterize how well social  palmeets this requirement",
    ", we use a measure of the likelihood that any two users would discover , using social  pal , an existing social path of a given length between them .",
    "we denote this measure as social  pal s _ coverage_. we define social  pal s functional requirements as follows :    * _ ( correctness ) . _",
    "users and can determine the exact length of a social path between them ( if any ) .",
    "* _ ( coverage maximization ) .",
    "_ social  palshould maximize coverage , in other words , the ratio between the number of social paths ( of length @xmath32 ) between and _  discovered _ by social  paland the number of _ all _ social paths ( of length @xmath32 ) between and .    * privacy requirements .",
    "* from a privacy point of view , social  palshould satisfy the following requirements .",
    "let and be two social  palusers willing to discover the length of the social path existing between them :    1 .   and discover the set of their common friends but learn nothing about their non - mutual friends ; 2 .   and do not learn any more information other than what it is already available from standard osn interfaces .    in other words , social  palshould allow two users to learn the social path length between them ( if any ) , but not the nodes on the path , without reciprocally revealing their social link .",
    "if a path between the users exists that is of length two ( i.e. , users have some common friends ) , then they learn the identity of the common friends ( and nothing else ) .",
    "this only pertains to interacting users , as ensuring that no eavesdropping party learn any information about users friends can be achieved by letting users communicate via confidential and authentic channels .",
    "* threat model .",
    "* we assume that the participants in social  palare honest - but - curious .",
    "the osn server is trusted to correctly authenticate osn users and not to attempt posing as any osn user .",
    "the social  palserver is trusted to distribute social  palcapabilities only to those social  palusers authorized to receive them .",
    "social  palusers use the legitimate social  palclient , but they might attempt to learn as much information as possible about friends of other social  palusers with whom they interact .",
    "we aim to guarantee the privacy requirements discussed above in this setting , and prevent the osn server or the server to learn any information about interactions between social  palusers .      before presenting the details of the system , in table  [ tab : fofprotocol - notation ] , we introduce some notation used throughout the rest of the paper .    [",
    "tab : fofprotocol - notation ]    * ersatz nodes . * one fundamental building block of social  palare ersatz nodes , which we introduce to overcome the bootstrapping problem faced by services like common  friends .",
    "recall from section  [ subsec : system - model ] that , in the original common  friendsdesign , the server stores bearer capability @xmath17 , uploaded by a user , together with his social network identifier @xmath15 .",
    "the pair @xmath33 constitutes s _ user node _ in the social graph maintained by .",
    "the set of s friends @xmath34 is the set of edges incident in the user node . in social  pal , we let create an _",
    "ersatz node _ for all users who have not joined the system but who are friends with a user who has .",
    "an ersatz node is identical to a standard user node , but its capability is generated by , instead of the user .",
    "figures  [ subfig:0.25-users - ersatz ] and  [ subfig:0.5-users - ersatz ] show how coverage improves when ersatz nodes are added , e.g. ,  with only @xmath35 joining the system , coverage reaches @xmath36 .",
    "0.38   and @xmath31 of users using the system and with the addition of ersatz nodes ( in grey ) .",
    "purple / solid edges here denote a direct friendship discoverable by social  pal.,title=\"fig:\",scaledwidth=83.0% ]    0.37   and @xmath31 of users using the system and with the addition of ersatz nodes ( in grey ) .",
    "purple / solid edges here denote a direct friendship discoverable by social  pal.,title=\"fig:\",scaledwidth=83.0% ]    * ersatz node creation .",
    "* adding ersatz nodes requires a few changes in the capability distribution protocol , compared to that from section  [ subsec : system - model ] .",
    "we highlight these changes in figure  [ fig : ersatz - capability - updates ] , specifically , in the blue - shaded box . before returning @xmath19 to",
    ", first computes the set @xmath37 which contains the social network identifier of each `` missing user '' @xmath38",
    ".    then , @xmath39 , it creates @xmath38 s an ersatz node as follows :    1 .",
    "create an _ ersatz capability _",
    "@xmath40 ( where @xmath41 is the length of a capability ) for @xmath38and store @xmath42 .",
    "2 .   create an initial friend set @xmath43 , which at this stage contains only @xmath15 .    after the successful creation of all needed ersatz nodes , returns @xmath19 , which includes the capabilities from the nodes of all of s friends , including the ersatz nodes .",
    "[ fig : ersatz - capability - updates ]    * active social graph updates . *",
    "users of social  palexplicitly authorize the server to retrieve their friend lists from the osns . since an ersatz node @xmath38is not a user of social  pal , can not learn the full set of @xmath38 s friends @xmath43 .",
    "instead , it maintains an estimate of @xmath43 based on the events it can observe from users of social  pal . for example , when a user adds @xmath38as a friend , learns that @xmath44 is added to @xmath34 and can infer that @xmath15 should be added to @xmath43 .",
    "each @xmath45 corresponds to a real user who has explicitly authorized to learn about the edge -@xmath38 in the social graph .    *",
    "turning ersatz nodes into `` standard '' nodes .",
    "* if a user @xmath38for whom has created an ersatz node later joins social  pal , he can simply upload his capability @xmath46 to , who ( 1 ) overwrites the old ersatz capability with @xmath46 , ( 2 ) queries the osn for @xmath38 s friend list @xmath47 , and ( 3 ) updates the existing , possibly incomplete , list of @xmath38 s friends with @xmath47 , turning an ersatz node into a standard node .",
    "note that this operation is transparent to all users .",
    "we now present the full details of our social  palinstantiation : besides addressing the bootstrapping problem ( using ersatz nodes ) , it also allows two arbitrary users to calculate the social path lengthbetween them .",
    "we denote with @xmath48 the social path lengthbetween two users and , i.e. , the minimum number of hops in the social network graph that separates and .    * intuition . * we set to allow social  palto discover the social path lengthbetween users in the osn by extending the capability distribution to include further relationships beyond friendship ( e.g. , friend - of - a - friend ) and rely on capability matches for estimating the social path length . by using cryptographic hash functions , we can generate and distribute capabilities of higher order that serve as a proof of a social path between users .",
    "* notation . * in the rest of the paper , we use the following notation :    the hash chain @xmath49 of item @xmath50 ( of length @xmath51 ) corresponds to the evaluation of a cryptographic hash function @xmath52 performed @xmath51 times on @xmath50 .",
    "when @xmath53 , @xmath54 .",
    "specifically : @xmath55    @xmath56is a @xmath57-degree capability and is defined as @xmath58    @xmath59 denotes the set of social contacts that are @xmath57-hops from user @xmath60 .    * capability distribution : * in figure  [ fig : distance - capability - protocol ] , we detail social pal s protocol for capability distribution .",
    "interaction between and is identical to the capability distribution protocol from figure  [ fig : ersatz - capability - updates ] , up until the creation of missing ersatz nodes is completed . in the updated protocol returns",
    "two sets , namely @xmath61and @xmath62 , where @xmath62denotes the set of higher order capabilities provided to by other osn members that are at least @xmath63-hops from .",
    "it is composed of a number of subsets @xmath64 with each subset @xmath65containing @xmath66 order capabilities of users in @xmath67 .",
    "formally , @xmath68 { \\ensuremath{\\mathit{c_{i}}}\\xspace}=\\ { ( i-1,c^{i-1}_{j } ) : \\exists ( { \\ensuremath{id_{j}}\\xspace } , { \\ensuremath{\\mathit{c_{j}}}\\xspace } ) \\land { \\ensuremath{id_{j}}\\xspace}\\in { \\ensuremath{\\mathit{f^{i}}}\\xspace}({\\ensuremath{id_{{\\textsf{u}\\xspace}}}\\xspace } ) \\}\\vspace{-0.1 cm } \\end{array}\\ ] ] consequently , the total cardinality of @xmath62and @xmath61is : @xmath69 finally , generates missing higher order capabilities . for every received capability @xmath70of degree @xmath51 , hashes it @xmath71 times to generate a sequence of higher order capabilities of the form : @xmath72 all elements of such sequences are combined into one set of derived higher order capabilities @xmath73 .",
    "finally all capability sets are combined to form @xmath74 : @xmath75 the resulting set @xmath76 will be used to derive the input sets for psi during the social path lengthdiscovery protocol as explained below .",
    "the cardinality of the input set to psi is therefore : @xmath77        [ fig : distance - capability - protocol ]    to construct @xmath78 of user , tracks changes in friend lists of users by using the following logical implication : if @xmath79 represents a friend of @xmath80 and @xmath80 is @xmath81 hops from @xmath60 and @xmath79 was not previously identified at less than @xmath57 hops from @xmath60 , then @xmath79 is @xmath57 hops from @xmath60 .",
    "formally : @xmath82 finally , as capabilities are meant to be short - lived ( i.e. , they should expire within a couple of days ) , the protocol needs to be run periodically in order to keep @xmath83 up - to - date .    *",
    "social path discovery : * in figure  [ fig : distance - client - protocol ] , we illustrate the social  paldiscovery protocol .",
    "the protocol involves two users and , who are members of the same osn .",
    "it begins with establishing a secure channel ( via diffie - hellman key exchange ) , followed by cryptographic binding of the diffie - hellman channel to the protocol instance , which is needed to avoid man - in - the - middle attacks .",
    ", ) appends both public keys to each capability @xmath84 in @xmath85 ( resp .",
    ", @xmath86 ) set to form @xmath87 .",
    "the resulting sets are : @xmath88 @xmath89 note that the @xmath90 symbol in the above equations indicate that , while constructing @xmath91 and @xmath92 , the first element of each pair contained in @xmath85 and @xmath86 is ignored .",
    "next , both users execute the steps of common  friends s discovery protocol , on the above input sets .",
    "specifically , they interact in a bloom - filter based psi execution and run the challenge - response part of the protocol needed to remove potential false positives ( as discussed in section  [ subsec : system - model ] ) .",
    "the interactive protocol ends with parties outputting the intersection of the sets . from this point on",
    ", both users perform identical actions to calculate the social path length between them .",
    "all operations are done locally , i.e. , with no need to exchange data .",
    "this process consists of two phases : ( 1 ) calculating the social path length input set @xmath93 ( i.e. , the set containing lengths for all discovered paths between and ) , and ( 2 ) selecting the shortest length among all lengths contained in @xmath93 . to this end ,",
    "( ) builds set @xmath93 by performing following actions on every item @xmath7 :    1 .",
    "finding a capability @xmath94 such that @xmath95 2 .   calculating path length @xmath96 via matching capability",
    "@xmath50 ( which was obtained from some user , say ) and inserting it into @xmath93 : @xmath97 l.insert(l_{x})\\vspace{-0.1cm } \\end{array}\\ ] ]    at the end , and learn the final path length @xmath98 between them by finding the lowest value of items included in @xmath93 : @xmath99 if @xmath100 , then and have common friends between them , thus social  palreturns identifiers of all these common friends as in the original common  friendsservice . while we could use social  palto reveal the first hop identifiers for @xmath101 , we do not due to the privacy requirements outlined in section  [ subsec : privacy - consideration ] .",
    "this section presents the analysis of social  pal , showing that it fulfills functional and privacy requirements from section  [ subsec : requirements ] .",
    "lemma 1 .    _",
    "if @xmath102 , then : _    1 .",
    "there exists a path @xmath103 , for @xmath104 , between and , in the social graph .",
    "2 .   receives the @xmath105 order capability @xmath106 from every @xmath107 in @xmath29 .    proof . when @xmath102 , by using the logical implication for the social graph building ( see section  [ sec : distance ] ) , it must hold that , in order to include @xmath108 in @xmath109 , @xmath110",
    "must be included in @xmath111 .",
    "therefore , we can recursively argue : + note that , for every @xmath112 , there exists a connection to @xmath113 and @xmath114 , thus , @xmath115 form a path @xmath29 between and . considering @xmath116 , since @xmath117 , then receives @xmath106 .",
    "theorem 1 .",
    "_ let there be a path @xmath118 between and in the social graph .",
    "if path @xmath29 is discovered by the social  paldiscovery protocol , then both and can estimate the exact length @xmath119 of path @xmath29 . _    proof .",
    "let @xmath32 denote the highest degree of capabilities .",
    "+ if @xmath120 :    * the set of capabilities of and are @xmath121 , and @xmath122 , respectively .",
    "( see figure  [ subfig : proof-1 ] for a graphic illustration of the distribution of capabilities for and . ) * if gets a matching capability for @xmath123 , then it must corresponds to @xmath124 for .",
    "* substitutes @xmath125 in @xmath48 and receives : @xmath126 * gets multiple capability matches , and sets @xmath48 to be the minimum @xmath127 , which is for @xmath53 , and @xmath128 .",
    "( similar argument holds for . )",
    "if @xmath129 :    * the set of capabilities of and are @xmath130 and @xmath131 , respectively  see figure  [ subfig : proof-2 ] .",
    "( capabilities for which and obtains matches are marked in green . ) * if gets a capability match for : @xmath132 , substitutes @xmath133 in @xmath48 and receives : @xmath134 * gets multiple capability matches , and sets @xmath48 to be the minimum @xmath127 , which is for @xmath135 , and @xmath128 .",
    "( similar argument holds for . )",
    "0.75    0.75    [ fig : proofs ]      as discussed in section  [ subsec : requirements ] , our social  palinstantiation needs to provide users with strong privacy guarantees , i.e. , interaction between two users and does not reveal any information about their non - mutual friends or any other information than they could discover by gathering information from the standard osn interface .    *",
    "capability intersection . *",
    "first , we review the security of the common friends discovery protocol from common  friends  @xcite , since it constitutes the basis of our work . its security , in the honest - but - curious model , reduces to the privacy - preserving computation of set intersection .",
    "that is , privacy stems from the security of the underlying private set intersection ( psi ) protocol that common  friendsinstantiates to privately intersect capabilities and discover common friends .",
    "this is proven by means of indistinguishability between a real - world execution and an ideal - world execution where a trusted third party receives the inputs of both parties and outputs the set intersection .",
    "@xcite uses bloom filter based psi ( bfpsi ) and , as discussed in section  [ subsec : pcd ] , this does not impact security since sets to be intersected are random capabilities , thus , high - entropy , non - enumerable items",
    ".    * discovery .",
    "* now observe that the interactive part of the social  pal s ( social path ) discovery protocol ",
    "i.e. , the part where information leakage might occur  mirrors that of common  friends s discovery protocol . during the protocol execution , users and",
    "engage in a bfpsi interaction , on input , respectively , @xmath91 and @xmath92 , i.e. , the sets of their capabilities , and obtain @xmath29 , which is used to reconstruct the social path between and .",
    "if and are friends with each other ( or have mutual friends ) , they can find out the identity of the user(s ) corresponding to matching capabilities , thus , learning that there exists a social path of length 1 ( or 2 ) _ and _ the identity of their mutual friends , but nothing else .",
    "in fact , if an adversary could learn the identity of non - mutual friends , then , we could build an adversary breaking the common friends discovery protocol from  @xcite based on bfpsi . similarly ,",
    "if there exists no social path between and , then the bfpsi interaction does not reveal any information to each other .    on the other hand ,",
    "if there exists a social path between and of length @xmath136 , then the matching capabilities are for user nodes for which has removed identifiers @xmath137 . therefore , and do not learn the identity of the users yielding a social path between them , but only how many .",
    "* trust in server .",
    "* each user explicitly authorizes social  palto retrieve the set @xmath138of s friends . requesting users to disclose their friend lists",
    "is a common practice in social network and smartphone applications .",
    "social  paluses this information to have the server maintain , distribute , and , in the case of ersatz nodes , create capabilities attesting to the authenticity of friendships .",
    "this implies that gradually learns the social graph from social  palusers , however , what learns is a small subset of what the osn already knows .",
    "neither nor the osn learn any additional information , e.g. , as opposed to centralized solutions , user locations or interactions between users .",
    "* authenticity of capabilities . * in section  [ subsec : requirements ] , we assumed the use of legitimate social  palclient applications : as all mobile platforms provide application - private storage , it is reasonable to assume that an adversary on a client device can not steal the capabilities downloaded on that device by the legitimate client application or otherwise manipulate the input to the protocol .",
    "alternatively , the integrity of the bloom filter could be ensured by letting sign the bloom filter along with the public key of the corresponding social  palclient .",
    "the bfpsi protocol would then need to be modified accordingly so that each party checks the signature on the other party s bloom filter is valid and that the same keypair is used to establish the secure channel .",
    "we now present an empirical evaluation of social  pal s coverage , using three publicly available facebook sample datasets . specifically ,",
    "we analyze how _ coverage _ attained by the social path discovery depends on the fraction of osn users who join the system , i.e. , the probability that two users discover an existing path between them in the social network .",
    "we use three datasets derived from a single dataset , created by gjoka et al .",
    "@xcite , using three different sampling techniques :    \\(1 ) the * social filter dataset *  @xcite is our primary dataset .",
    "it contains @xmath139 users , a connected component derived using the  forest fire \" sampling method  @xcite from the original dataset  @xcite . as forest fire sampling",
    "does not preserve node degree , each node in this dataset has an average node degree of @xmath140 , which is significantly less than in the original dataset .",
    "to investigate the effect of the reduced node degree on coverage , we also use the two more datasets .",
    "( 2 ) the * mhrw dataset *  @xcite is built using the _ metropolis - hastings random walk _ ( mhrw ) method with @xmath141 independent random walks .",
    "it contains the friend lists of @xmath142 users .",
    "we call this the set of _ sampled users_. each of them has an average of @xmath143 friends , including both other sampled users and those who were part of the original dataset but that were not sampled  we call them _",
    "outside users_. the mhrw datasetcontains a total of @xmath144 million _ outside users _ ( who are friends of one or more _ sampled users _ ) .",
    "because of the nature of the mhrw sampling , the average number of connections between two _ sampled users _ in this set is only 3 , thus it is used to evaluate social  pal s coverage among poorly connected users .",
    "\\(3 ) the * bfs dataset *  @xcite is built using _",
    "breadth first search _ ( bfs ) from @xmath141 independent bfs traversals .",
    "it consists of @xmath145 million _ sampled users _",
    ", with an average of @xmath146 friends .",
    "the number of _ outside users _ is @xmath147 million .",
    "bfs sampling results in highly connected subgraphs , and the average number of connections among _ sampled users _ is @xmath148 .",
    "thus , we use the bfs datasetto measure social  pal s coverage among well connected users",
    ".      * procedure . * to evaluate social  pal s coverage on each of the three datasets , we used the following simulation procedure . first , we chose , at random , a subset of _ sampled users _ , which we call the _",
    "test set_. for the social filter dataset , we used the whole set as the _ sampled users _ set .",
    "we chose four different sizes for the _ test set _ : @xmath149 of the _ sampled users_. note that the _ test set _ represents the fraction of the users of an osn who use social  pal .",
    "then , for a given social path length @xmath32 ( @xmath150 ) , we randomly selected @xmath151 pairs of users from the _ test set _ in such a way that at least one path of length @xmath32 exists .",
    "finally , we computed the fraction of user pairs for which social paldiscovers an existing path between them .",
    "we did this for two cases : social  palwith support for ersatz nodes , and without it .",
    "each simulation was repeated 10 times . in total",
    ", we conducted 720 different simulations .",
    "* results . *",
    "we now present the results of our simulations for each of the three datasets .",
    "social  pal s discovery coverage is presented in figure  [ fig : user - coverage-1 ] andtable  [ tab : user - coverage-1 ] for the the social filter dataset , figure  [ fig : user - coverage-2 ] and table  [ tab : user - coverage-2 ] for the mhrw dataset , and figure  [ fig : user - coverage-3 ] andtable  [ tab : user - coverage-3 ] for the bfs dataset .",
    "additional graphs on coverage results are available from the full version of the paper  @xcite .",
    "each graph shows how the coverage ( for paths of different length ) of social  palrelates to fraction of osn users who use social  pal .",
    "red dotted lines indicate the performance of social  palwithout ersatz node support , while black solid lines correspond to the user of ersatz nodes .    without ersatz nodes ,",
    "coverage increases linearly as more users start using social  pal .",
    "the rate of growth is highest for the social filter datasetand lowest for the mhrw dataset . in general , the coverage figures are low . for instance , even if 80% of osn users have social  pal , the coverage for paths of length 4 ranges between 0.19% ( the mhrw dataset ) and 68.71% ( the social filter dataset ) . the introduction of ersatz nodes results in a remarkable improvement across the board in all datasets .",
    "as expected , the coverage for paths of length 2 is 100% .",
    "when 80% of osn users are in the social  palsystem , the coverage is well above 80% in all cases . even when only 20% of users have social  pal , coverage is still above 40% in all cases , except for the mhrw dataset .    [",
    "tab : user - coverage-1 ]    [ tab : user - coverage-2 ]    [ tab : user - coverage-3 ]      * ersatz nodes dramatically improve coverage . * with ersatz nodes , social  paldiscovers 100% of social paths of length 2 , thus addressing one of the major limitations of the common  friendssystem  @xcite .",
    "the coverage for paths of length 3 and 4 always increases , between @xmath152 and @xmath153 , depending on the fraction of osn users in social  paland the dataset used for the simulations .",
    "* variation of coverage across different datasets .",
    "* we observe better coverage results with the bfs datasetthan with the mhrw dataset .",
    "as the bfs datasetrepresents coverage among well connected users , the density of ersatz nodes between random users is higher than in the mhrw dataset , thus yielding better overall coverage .",
    "the bfs datasetmodels societies , such as most of the western societies , where the penetration of osns is high .",
    "the high coverage results with the bfs datasetsuggests that social  palwill do well in this context . on the other hand ,",
    "the mhrw datasetmodels societies where osn connectivity is poor and , although social  palis not as effective here , it may still perform reasonably well , detecting the majority of social paths even before the number of users joining social  palreaches 50% .",
    "in this section , we present our full - blown implementation of the social  palsystem .",
    "we aim to support scalability for increasing number of users ( in terms of cpu performance and memory ) and to enable developers to easily integrate it into their applications",
    ".      * server components . * on the server side , the social  palsystem extends the ` peershare`server  @xcite , which allows two or more users to share sensitive data among social contacts , e.g. , friends in a social network .",
    "we use the following basic functions of ` peershare ` : ( 1 ) osn interfaces to retrieve social graph information , ( 2 ) the oauth  @xcite component for user authentication , and ( 3 ) the data distribution mechanism . on top of these components , we develop a new server architecture that supports the addition of server - based applications via an extension mechanism .",
    "this design choice allows us to implement the social  palfunctionality in such a way that the system can efficiently scale ( in terms of memory and cpu performance ) to support an increasingly large number of users .",
    "as illustrated in figure  [ fig : server - arch ] , the server architecture consists of the following components : the _ common apps server _ , a group of applications ( e.g. , the social  palapp ) , the _ osn communicator module _ , and the _ bindings database _ ( bindings db ) . the common apps serverprovides the basic functionality that is common for all applications : ( 1 ) storage of data uploaded by users in the bindings db , ( 2 ) distribution of users data to other authorized users , and ( 3 ) retrieval of basic social graph information , which is needed for enforcing the appropriate data distribution policy . the osn communicator module is a plugin - based service responsible for querying osns for social graph information . its plugin - based structure allows us to easily add support for new osns .",
    "the bindings db stores data uploaded by users and information on how to distribute them among social contacts .",
    "the components interact with each other using a number of different interfaces : _ server - osn query _",
    ", _ bindings protocol _ , _ app event _ , _ app - db updates _ and _ app - osn query _",
    "( cf . fig  [ fig : server - arch ] ) .",
    "the server - osn query interface is used by the common apps serverto retrieve social graph information from the osn .",
    "the bindings protocol interface specifies communication between the common apps serverand the bindings db .",
    "these two interfaces provide basic data distribution functionality to all applications .",
    "the other three interfaces are used only by applications that need to perform specific modifications on distributed data on the server side .    each application that requires logic on the server side",
    "has to be registered in the common apps servervia a uniform resource identifier ( uri ) .",
    "this uri is used by the app eventcallback interface to notify the application about incoming application - specific events ( e.g. , an upload of new data items ) .",
    "in addition , this interface may be used to modify data read from the bindings db before returning them via the common apps serverto the user ( e.g. , generation of higher order capabilities ) .",
    "the server application itself has access to the two remaining interfaces .",
    "it uses the app - db updatesto modify data stored in the bindings db or to create new data items .",
    "the app - osn query interface is used when the application needs to obtain social graph information from the osn .",
    "[ fig : server - arch ]        * social  palserver implementation . *",
    "the social  palserver application is notified via a the app eventcallback interface about new capabilities uploaded by users .",
    "it uses a the app - db updatesinterface to create any required ersatz nodes and properly update the recipient sets of capabilities during the social graph building process .",
    "the social  palapplication also uses the app eventinterface to handle capability download requests .",
    "the common apps server , instead of immediately returning data it has read from the bindings db , passes them to the social  palapplication that generates any missing higher order capabilities . finally , the social  palapplication returns the complete set of capabilities back to the common apps server , which completes the request handling .",
    "note that our implementation of the osn communicator module supports interactions with both linkedin and facebook .",
    "* implementation details . *",
    "our core social  palserver is written in php .",
    "we support capabilities of @xmath154 and @xmath155 order , allowing to discover social paths between users that are up to @xmath156 hops from one another . based on relevant prior work  @xcite ,",
    "a @xmath156-hop distance is enough for most practical use cases . as the bindings db needs to store the capabilities of users and information about how to share those , the necessary amount of persistent storage will substantially grow if social  palbecomes widely used .",
    "thus , to limit the data storage overhead , social  palserver does not store any higher order capabilities in the bindings db , but generates them when requested by the requesting client",
    ". tests on our server show that generating higher order capabilities has a negligible impact on the social  pal__capability distribution protocol _ _ performance ( i.e. , the server generates 1 million higher order capabilities in about 500ms using the hardware described in section  [ sec : server - eval ] ) . finally , in order to implement the linkedin oauth module for the osn communicator module , we use the oauth pecl extension for php , while , for the bindings db , postgresql database server .",
    "* system scaling . * since social  palmay generate a large number of server requests if used by a large number of users , we can take following steps to ensure that the system can scale .",
    "our proposed scaling architecture is illustrated in figure  [ fig : server - scaling ] .",
    "it includes a powerful http front - end server ( such as nginx ) acting as load balancer , which terminates incoming secure https connections and forwards server requests upstream to @xmath32 instances of social  palservers acting as request handlers .",
    "each social  palserver instance will run the _ hiphop virtual machine _ ( hhvm ) daemon that handles http requests .",
    "hhvm usage can massively improve server performance , as it uses just - in - time compilation to take advantage of the native code execution instead of the interpreted one  @xcite .",
    "each instance of social  palserver runs , locally , a database query router ( pgpool ) providing access to the actual database cluster including multiple postgresql servers .",
    "the query router enhances the overall database access performance by keeping open connections to the database cluster , load - balancing the stored data among multiple instances of the database servers , and temporarily queuing requests for database access in case of cluster overload .",
    "note that there are no cross - dependencies between the social  palserver instances for the database read access , thus , no complex control mechanism is needed to support this parallelism .",
    "* server code . *",
    "the source code of the server implementation is available from https://github.com/secures-aalto/sopal .",
    "* performance testbed .",
    "* we evaluated our server implementation in a testbed consisting of two machines : the first played the role of a single social  palserver instance ( cf .",
    "figure  [ fig : server - arch ] ) , while the second simulated a group of client devices .",
    "the server ran on a 4-core machine with a 2.93ghz cpu on each core and 128 gb of ram .",
    "it hosted nginx ( version 1.1.19 ) , postgresql server ( version 9.1 ) , and php5-fpm for the php 5.6 engine . to improve the overall server performance , we adjusted the default settings for nginx , postgresql and php5-fpm ( see table  [ tab : server - settings ] ) .",
    ".details of server implementation settings . [ cols=\"^,^ \" , ]     inter - process communication was implemented via unix sockets .",
    "the machine running the clients had 8 cpu cores ( at 2.93 ghz ) and 64 gb of ram .    to eliminate the unpredictability of network latency , we modified the server implementation by replacing the osn communicator module with the local service that provided social graph information based on the mhrw dataset .",
    "we populated the bindings db with capabilities generated for the 120,000 _ sampled users _ from the mhrw dataset .",
    "the capabilities of _ sampled users _ together with capabilities generated for ersatz nodes constituted about 10 million data items that were stored in the bindings db .",
    "finally , to minimize impact of the client - server transmission delay , we kept the server and client machines in the same network and connected them using a 1 gbit / s ethernet link via the single switch .    * experiments . *",
    "we evaluated server performance by sending bursts of @xmath32 requests per second , for @xmath157 , from the client machine to fetch capabilities from the server ( i.e. , download of @xmath61and @xmath73 in figure  [ fig : distance - capability - protocol ] ) for @xmath158 seconds .",
    "fetching capabilities involves many read operations on the bindings db , thus yielding the highest load on the server among all operations of the social  palcapability distribution protocol . in each experiment , which we repeated ten times",
    ", we measured the number of received responses per second together with the latency of each response on the client machine , and cpu usage together with memory consumption on the server machine .",
    "[ fig : server - eval ]    * results .",
    "* figure  [ fig : server - eval ] illustrates the results of our experiments .",
    "we observe that @xmath159 requests per second yields a saturation point for the server .",
    "below @xmath159 requests / second , the number of responses per second and the response latency grow linearly .",
    "whereas , as depicted in figure  [ subfig : recv - latency ] , above @xmath159 , we observe an exponential growth of the response latency and the constant number of received responses per second .",
    "figure  [ subfig : cpu - ram ] also shows that cpu usage reaches more than @xmath160 above @xmath159 requests / second . peak memory consumption is about @xmath161 mb , which also shoots up significantly when the number of requests crosses the saturation point .",
    "the @xmath159 requests / second saturation point shows that the performance of our server implementation is in line with that emerging from studies of systems equipped with similar hardware  @xcite .",
    "we also looked at the server performance when only handling @xmath162 request per second and observed that the average response latency is about @xmath163ms , and the average bindings db interaction time is around @xmath164ms .",
    "since client - server network latency is negligible , the vast majority of request handling takes place in the php interpreter , which highlights that php is the server s bottleneck .",
    "therefore , in order to improve the server performance , php5-fpm should be replaced with hhvm , which is reported to be significantly more performant  @xcite .",
    "further gains could also be obtained by migrating the postgresql server to a separate machine connected over a fast link ( cf . fig .",
    "[ fig : server - scaling ] ) .",
    "we leave these as part of future work .    assuming that the server handles @xmath159 requests per second , a total of @xmath165 million requests can be processed daily by a single instance of social  palserver with comparable hardware capabilities . assuming that each user executes the social  palcapability distribution protocol around @xmath156 times a day , about @xmath166 million social  palusers can be handled by one social  palserver instance . since user requests are independent of each other , and because the scalable architecture of the social  palserver allows adding further instances easily ( as described in section  [ sec : server - arch ] ) , the total capacity of social  palsystem amounts to the cumulative number of users that can be handled across all social  palserver instances . finally in order to avoid making postgresql become the bottleneck of the system ( which may be caused if many social  palserver instances are added ) , the bindings db should be turned into a database cluster with data sharding and replication enabled .",
    "this guarantees that the data kept in the bindings db is synchronized and accessible with high enough availability .      *",
    "client architecture . * the client - side architecture of social  palis depicted in figure  [ fig : client - arch ] .",
    "it consists of the _ common apps client _ , the set of osn plugins , and the _ social  palclient_. the first two components are responsible for the communication with the social  palserver , while the last one provides the interface for the applications . together ,",
    "these components form a mobile platform library that can be easily imported by developers into their applications . to facilitate support for multiple osns ,",
    "similar to our server design , we have decoupled osn - specific functionality from the common apps client and made it a plugin - based solution .    we have considered two possible design choices for the client architecture : ( 1 ) designing it as a stand - alone service with applications connecting to it , using available inter - process communication mechanisms , or ( 2 ) as a service integrated into the application .",
    "we choose the latter as it supports application - private storage for capabilities ( i.e. , not accessible by other applications ) and enables each application to have its own social  palserver .",
    "this choice provides additional protection against capability leakage to a malicious application and removes the requirement to deploy the global social  palserver . on the other hand ,",
    "if multiple instances of social  palapplication runs on the same device , we would incur increased network traffic and require more storage space in comparison to the stand - alone service approach .",
    "we argue that this tradeoff is acceptable , as the social  palcapability distribution is run no more than a few times a day .",
    "also , the amount of data to store is likely to be limited in the order of tens of megabytes , which is justifiable given the clear usability and deployability advantages .    * implementation details and performance .",
    "* we have implemented the client library on android , operating as an android lightweight service . to evaluate the performance on the client , we measured running times of the social  paldiscovery protocolon a samsung galaxy tablet gt - p3100 running android 4.1.2 api 16 and a zte blade s6 running android 5.0 api 21 connected via bluetooth .",
    "we assumed that both parties have the same number of input items , ranging from 1000 to 35000 ( with 5000 increments ) .",
    "we also fixed the intersection of the sets to be @xmath167 of the set size .",
    "table  [ tab : perf ] shows average computation and communication times .        * social  palclient api . *",
    "the social  palapplication interface is used by applications to run the social  paldiscovery protocol .",
    "it has been designed to be readily usable by application developers that are not cryptography experts , but are nonetheless interested in implementing privacy - preserving discovery of social paths .",
    "this allows developers to delegate the responsibility of this process to the social  palclient , and requires them to integrate only four basic methods into the application code , which we present below .",
    "applications running the social  paldiscovery protocol act as social  palmessage relays between the two social  palclient instances .",
    "the application starting the social  paldiscovery session calls the ` startsopalsession ` method .",
    "this returns an opaque social  palobject , which is forwarded to the remote party .",
    "from this point onward , both parties invoke ` handlesopalmessage ` for every message received .",
    "this method processes the received message , and if needed , creates a response .",
    "it also returns a flag indicating if the protocol execution is completed .",
    "if so , the application uses the ` getresult ` method to get the social path length it has to a remote party . finally , the application must call ` endsopalsession ` to let the social  palclient release all resources from the session .",
    "besides these four basic methods , the social  palclient also provides three advanced methods : ( 1 ) ` rejectsopalsession ` creates a social  palmessage that can be sent by the application to the remote party if it does not want to run the discovery protocol ; ( 2 ) ` updatecapabilities ` and ( 3 ) ` renewcapability ` can be used by the application to force fetching the most recent capabilities from the server , and to generate and upload a new capability to the server , respectively .",
    "table  [ tab : sopal - iface ] summarizes all the methods available in social  palclient .",
    "[ fig : apps ]    to illustrate social  pal s relevance and practicality , we integrate it into two android apps , ` spotshare`and ` nearbypeople ` , supporting both facebook and linkedin .",
    "* ` spotshare ` * is an extension of tetheringapp , presented in  @xcite .",
    "it allows a user to provide tethered internet access to other ` spotshare`users ( where access to the tethering hotspot is protected by a password ) so that access control policies can be based on social relationships .",
    "for instance , the user can decide to allow tethered access only to friends of friends : to this end , ` spotshare`uses social  palin order to determine , in a privacy - preserving way , if the specified social relationship holds .",
    "if so , the password is securely and automatically sent to the requesting device .",
    "in the current version of ` spotshare ` , we do not enable discovery of social paths beyond two hops , as we assume that most users would not want to allow people with whom they have no common friends to tether off their smartphone , but removing this constraint is trivial . in figure  [ subfig :",
    "spotshare ] , we present two screenshots of the app .",
    "* ` nearbypeople ` * is a `` friend radar '' app allowing users to interact with people around them and discovering common friends shared with users of nearby devices , as well as social path lengths , without having to broadcast their social profiles or rely on a central server .",
    "it relies on the privacy guarantees of social  paland the scampi opportunistic router  @xcite for device - to - device communication . a preliminary version of the app was successfully tested at the acm ccs workshop on smart energy grid security workshop . in figure",
    "[ subfig : nearbypeople ] , we also show two screenshots .",
    "* privately discovering social relationships .",
    "* nagy et al .",
    "@xcite introduce common  friends , reviewed in section  [ subsec : system - model ] , combining bearer capabilities with bfpsi / psi - ca to allow osn users to discover , respectively , the identity or the number of their common friends in a private , authentic , and decentralized way . while we build on the concept of capabilities and rely on bfpsi , recall that common  friendssuffers from an inherent bootstrapping problem and is limited to the discovery of social paths to osn users that are two hops away .",
    "our work does not only address common  friends s limitations via a novel methodology , but also presents the full - blown implementation of a scalable server architecture and a modular android client library enabling developers to easily integrate social  palinto their applications .",
    "mezzour et al .",
    "@xcite also describe techniques for decentralized path discovery in social networks .",
    "they use a notion similar to capabilities to represent friendships and hashing to derive higher - order capabilities , however , their scheme distributes a _ different _ capability on behalf of a given user to every other user , while social  paldistributes the same capability to all users at a given distance .",
    "@xcite s computational / communication overhead is significantly higher than that of social  pal : the former requires two psi runs , with sets of size equal to the total number of paths from a node up to the maximum supported path length , whereas , the latter only requires a single bfpsi run , with input sets as big as the number of paths that have length equal to half the maximum supported path length .. ] length .",
    "table  [ tab : input - study ] compares the expected number of input items for social  paland  @xcite based on the datasets introduced in section  [ sec : evaluation ] .",
    "furthermore ,  @xcite incurs the same bootstrapping problem as  @xcite : if a friend of user does not participate in the system , can not detect paths to some other user that go through .",
    "finally , @xcite aims to build a decentralized social network , while we aim to bootstrap the system based on existing centralized social networks .",
    "[ tab : input - study ]    liao et al .",
    "@xcite present a privacy - preserving social matching protocol based on property - preserving encryption ( ppe ) , which however relies on a centralized approach .",
    "li et al .",
    "@xcite then propose a set of protocols for privacy - preserving matching of attribute sets of different osn users .",
    "similar work include  @xcite ,  @xcite , and  @xcite .",
    "private friend discovery has also been investigated in  @xcite and  @xcite , which do not provide authenticity as they are vulnerable to malicious users claiming non - existent friendships .",
    "while  @xcite addresses the authenticity problem , it unfortunately comes at the cost of relying on relatively expensive cryptographic techniques ( specifically , a number of modular exponentiations linear in the size of friend lists and a quadratic number of modular multiplications ) .",
    "smokescreen  @xcite , smile  @xcite , and pike  @xcite support secure / private device - to - device handshake and proximity - based communication .",
    "lentz et al .",
    "introduce sddr  @xcite , which allows a device to establish a _ secure encounter _ ",
    "i.e. , a secret key  with every device in short radio range , and can be used to recognize previously encountered users , while providing strong unlinkability guarantees . the encore platform  @xcite builds on sddr to provide privacy - preserving interaction between nearby devices , as well as event - based communication for mobile social applications .    * building on social relationships . *",
    "prior work has also focused on building services on top of existing social relationships .",
    "cici et al .",
    "@xcite use osns to assess the potential of ride - sharing services , showing that these would be very successful if users shared rides with friends of their friends",
    ". sirivianos et al .",
    "@xcite propose a collaborative spam mitigation system leveraging social networks of administrators , while  @xcite and  @xcite use osns to verify the veracity of online assertions .",
    "freedman and nicolosi  @xcite describe a system using social network for trust establishment in the context of email white - listing , by verifying the existence of common friends .",
    "besides not discovering paths longer than two , @xcite also does not address the issue of friendships authenticity ",
    "unlike social  pal .",
    "daly et al .",
    "@xcite present a routing protocol ( called simbet ) for dtn networks based on social network data .",
    "their protocol attempts to identify a routing bridge node based on the concept of centrality and transitivity of social networks .",
    "li et al .",
    "@xcite design another dtn routing protocol ( called social selfishness aware routing ) which takes into account user s social selfishness and willingness to forward data only to nodes with sufficiently strong social ties .",
    "other work  @xcite also propose adjusting message forwarding based on some social metrics .",
    "* osn properties . *",
    "another line of work has studied properties of osns .",
    "ugander et al .",
    "@xcite and backstrom et al .",
    "@xcite study the structure of facebook social graph , revealing that the average social path length suggested by the ",
    "small world experiment \"  @xcite ( i.e. , six ) does not apply for facebook , as the majority of people are separated by a 4-hop path .",
    "gilbert et al .",
    "@xcite define the relationship between tie strengths ( i.e. , the importance of a social relationship between two users ) and various variables retrieved from the osn social graph . in  @xcite , arnaboldi et al .",
    "investigate the link between the tie strength definition ( given by granovotter  @xcite ) and a composition of factors describing the emotional closeness in online relationships .",
    "they demonstrate the existence of the _ dunbar number _",
    "( i.e. , the maximum number of people a user can actively interact with ) for facebook . in follow - up work",
    "@xcite , they also show the existence of four hierarchical layers of social relationships inside ego networks .",
    "existence of the dunbar number is also shown for twitter in  @xcite .",
    "finally , saramki et al .",
    "@xcite find an uneven distribution of tie strengths within ego networks that is characterized by the presence of a few strong and a majority of weak ties .",
    "this paper presented social  pal   a system geared to privately estimate the social path length between two social network users .",
    "we demonstrated its effectiveness both analytically and empirically , showing that , for any two osn users , social  paldiscovers all social paths of length two and a significant portion of longer paths . using different samples of the facebook graph",
    ", we showed that even when only 20% of the osn users use the system , we discover more than 40% of all paths between any two users , and 70% with 40% of users .",
    "we also implemented a scalable server - side architecture and a modular client library bringing social  palto the real world .",
    "our deployment supports facebook and linkedin integration and allows developers to easily incorporate it in their projects .",
    "social  palcan be used in a number of applications where , by relying on the ( privacy - preserving ) estimation of social path length , users can make informed trust and access control decisions .",
    "* acknowledgments . *",
    "we thank minas gjoka and michael sirivianos for sharing the facebook datasets , swapnil udar for helping with the ` spotshare`implementation , and jussi kangasharju , pasi sarolahti , cecilia mascolo , panos papadimitratos , and narges yousefnezhad for providing feedback on the paper .",
    "simon eberz suggested the idea of signed bloom filters discussed in section  [ subsec : privacy - consideration ] .",
    "this work was partially supported by the academy of finland s `` contextual security '' project ( 274951 ) , the ec fp7 precious project ( 611366 ) , and the eit ict labs ."
  ],
  "abstract_text": [
    "<S> social relationships are a natural basis on which humans make trust decisions . </S>",
    "<S> online social networks ( osns ) are increasingly often used to let users base trust decisions on the existence and the strength of social relationships . </S>",
    "<S> while most osns allow users to discover the length of the social path to other users , they do so in a centralized way , thus requiring them to rely on the service provider and reveal their interest in each other .    </S>",
    "<S> this paper presents social  pal , a system supporting the privacy - preserving discovery of arbitrary - length social paths between any two social network users . </S>",
    "<S> we overcome the bootstrapping problem encountered in all related prior work , demonstrating that social  palallows its users to find all paths of length two and to discover a significant fraction of longer paths , even when only a small fraction of osn users is in the social  palsystem  </S>",
    "<S> e.g. , discovering  70% of all paths with only 40% of the users . </S>",
    "<S> we implement social  palusing a scalable server - side architecture and a modular android client library , allowing developers to seamlessly integrate it into their apps .    </S>",
    "<S> [ distributed applications ] </S>"
  ]
}