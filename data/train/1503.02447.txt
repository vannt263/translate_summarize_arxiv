{
  "article_text": [
    "the combination of algebraic structure and observable behaviour is fundamental in computer science .",
    "examples include the operational models of structural operational semantics  @xcite , denotational models of programming languages  @xcite , finite stream circuits  @xcite , linear and context - free systems of behavioural differential equations  @xcite , and many types of automata such as nondeterministic and weighted automata  @xcite .    in the categorical treatment of these examples ,",
    "the algebraic structure is encoded by a monad @xmath2 , and the system behaviour by coalgebras for a functor @xmath1 .",
    "often it is desirable that the algebraic and coalgebraic structure are compatible in some way .",
    "a general approach to specifying such algebra - coalgebra interaction is via a distributive law .",
    "there are several advantages of this structured approach .",
    "a distributive law @xmath3 of the monad @xmath0 over @xmath1 induces a @xmath0-algebra on the final @xmath1-coalgebra of behaviours , yields solutions to corecursive equations @xmath4",
    "@xcite , and ensures that bisimulation is a congruence  @xcite .",
    "moreover , it yields the soundness of techniques such as bisimulation - up - to - context  @xcite and extensions thereof  @xcite .    describing a distributive law explicitly and proving that it is one can ,",
    "however , be rather complicated .",
    "therefore , general methods for constructing distributive laws from simpler ingredients are very useful .",
    "an important example of this is given by abstract gsos  @xcite where distributive laws of a free monad @xmath0 over a ( copointed ) functor @xmath1 are shown to correspond to plain natural transformations , called _",
    "abstract gsos - rules _ as they can be seen as specification formats . in @xcite",
    "it was shown how an abstract gsos - rule for a free monad @xmath0 and functor @xmath1 can be lifted to one for the functor @xmath5 which describes @xmath1-systems with input in @xmath6 .",
    "another method which works for all monads @xmath0 , but only for certain polynomial behaviour functors @xmath1 , produces a distributive law inducing a `` pointwise lifting '' of @xmath0-algebra structure to @xmath1-behaviours , cf .",
    "@xcite .",
    "but many examples do not fit into the abovementioned settings .",
    "an important motivating example for this paper is that of context - free grammars , where sequential composition is not a pointwise operation and whose formal semantics satisfies the axioms of idempotent semirings , i.e. , the algebraic structure is not free .",
    "more generally , one may be interested in a monad arising from a free one by adding equations which one knows to hold in the final coalgebra .",
    "the main contribution of this paper is to give a general approach for constructing a distributive law @xmath7 for a monad @xmath8 with an equational presentation , from a distributive law @xmath3 for the underlying free monad @xmath0 .",
    "we have no constraints on the behaviour functor @xmath1 .",
    "this @xmath7 is obtained as a certain quotient of @xmath3 by the equations @xmath9 of @xmath8 , hence we say that _",
    "@xmath7 is presented by a @xmath3 for the free monad and the equations @xmath9_. we show that such quotients exist precisely when the distributive law _ preserves the equations @xmath9 _ , which roughly means that congruences generated by the equations are bisimulations .",
    "we also discuss how these quotients of distributive laws give rise to quotients of bialgebras , thereby giving a concrete operational interpretation , and a correspondence between solutions to corecursive equations with and without equations . as an illustration and application of our theory",
    ", we show the existence of a distributive law of the monad for idempotent semirings over the deterministic automata functor .",
    "this result yields the equivalence betweeen the greibach normal form representation of context - free languages and the coalgebraic representation via context - free expressions given in  @xcite .    _",
    "_ in section  [ sec : quot - monad ] , we recall the notions of monads and algebras , and give a concrete description of monad quotients . in section",
    "[ sec : dls ] , we recall distributive laws and their application to solving systems of equations .",
    "then , in section  [ sec : quotients - of - dls ] , we prove our main results on quotients of distributive laws . in section  [ sec : quotients - of - bialgebras ] , we show that such quotients give rise to quotients of bialgebras",
    ". finally , in section  [ sec : conc ] , we discuss related work , and provide some directions for future work .",
    "this paper is an extended version of  @xcite .",
    "it contains all proofs and generalises the main results of  @xcite from monads on the category of @xmath10 to monads on arbitrary categories ( with the appropriate structure in the category of algebras ) .",
    "furthermore , this paper includes the treatment of distributive laws of a monad over a comonad , allowing more general specification formats that involve look - ahead in the premises .",
    "* acknowledgements . *",
    "we thank neil ghani , bart jacobs , jan rutten , ji velebil and joost winter for helpful discussions and suggestions .",
    "we are indebted to the referees for their constructive comments , which greatly helped us improving the paper .",
    "we start by recalling some basic definitions on monads , algebras , term equations and congruences ( see , e.g. ,  @xcite for a detailed introduction ) .",
    "we will then proceed to give a concrete description of the quotient monad arising from a free monad and a set of equations .",
    "let @xmath11 be a category .",
    "a _ monad _ is a triple @xmath12 where @xmath13 is an endofunctor on @xmath11 , and @xmath14 and @xmath15 are natural transformations such that @xmath16 and @xmath17 .",
    "@xmath0-algebra _ is a pair @xmath18 where @xmath6 is a @xmath11-object and @xmath19 is an arrow such that @xmath20 and @xmath21 .",
    "( @xmath0-algebra ) homomorphism _ from @xmath18 to @xmath22 is an arrow @xmath23 such that @xmath24 .",
    "free @xmath0-algebra _ over a @xmath11-object @xmath25 is @xmath26 . given any @xmath0-algebra @xmath18 and any arrow @xmath27 , there is a unique algebra homomorphism @xmath28 such that @xmath29 , given by @xmath30 .",
    "we denote the category of @xmath0-algebras and their homomorphisms by @xmath31 , and the associated forgetful functor by @xmath32 .",
    "let @xmath33 and @xmath34 be monads .",
    "morphism of monads _ is a natural transformation @xmath35 such that the following diagram commutes : @xmath36 ^ -{\\eta } \\ar[dr]_-{\\theta }   & t \\ar[d]^-{\\sigma }   & tt \\ar[l]_\\mu \\ar[d]^{\\sigma \\sigma } \\\\   & k   & kk \\ar[l]_{\\nu } } \\ ] ] where @xmath37 .",
    "assume we are given a monad @xmath12 on some category @xmath11 .",
    "we define _ @xmath0-equations _ as a 3-tuple @xmath38 where @xmath39 is an endofunctor on @xmath11 and @xmath40 are natural transformations .",
    "the intuition is that @xmath39 models the arity of the equations , and @xmath41 and @xmath42 give the left and right - hand side , respectively .",
    "this is illustrated below by an example .",
    "[ ex : equations ] consider the @xmath10 functor @xmath43 , modelling a binary operation and a constant , which we call @xmath44 and @xmath45 respectively .",
    "the ( underlying functor of the ) free monad @xmath46 for @xmath47 sends a set @xmath25 to the terms over @xmath25 built from @xmath44 and @xmath45 .",
    "the equations @xmath48 , @xmath49 and @xmath50 can be modelled as follows .",
    "the functor @xmath39 is defined as @xmath51 .",
    "the natural transformations @xmath52 are given by @xmath53 and @xmath54 for all @xmath55 ; @xmath56 and @xmath57 for all @xmath58 ; @xmath59 and @xmath60 for all @xmath61 .    throughout this paper we will need assumptions on @xmath11 , @xmath0 , and @xmath9 . for this section we only need the following .    [ assumps ]",
    "we assume that @xmath0 is a monad on @xmath11 , and @xmath62 is a functor such that :    1 .",
    "@xmath31 has coequalizers .",
    "2 .   @xmath63 and @xmath64 map regular epis in @xmath31 to epis in @xmath11 .",
    "3 .   @xmath65 maps regular epis in @xmath31 to epis in @xmath11 .",
    "the first condition is needed to construct quotients of free algebras modulo equations .",
    "the second condition relates quotients of algebras ( regular epis ) with quotients in the base category ( epis ) .",
    "it is satisfied if either @xmath63 preserves regular epis or if @xmath63 preserves epis . finally , the last condition is satisfied if @xmath39 preserves epimorphisms in @xmath11 .",
    "[ exle : assumptions ]    1 .   if @xmath66 the conditions are satisfied for any monad @xmath0 and endofunctor @xmath39 .",
    "2 .   if @xmath11 is the category @xmath67 of posets with monotone maps the second condition may fail , see example  6 in @xcite , which can be adapted to show that the monad induced by the adjunction @xmath68 does map some regular epis to non - epis .",
    "[ exle : assumptions:3 ] if @xmath11 is abelian groups and @xmath13 is the identity , the well - known fact that torsion - free abelian groups are not monadic over @xmath10 @xcite can be adapted to give an example of equations @xmath39 that fail condition 3 .",
    "let @xmath69 denote the group of integers with addition modulo @xmath70 .",
    "define @xmath71 as the coproduct of abelian groups @xmath72 and define @xmath73 by @xmath74 and @xmath75 .",
    "note that there is @xmath76 only if @xmath77 , that is , only if @xmath78 ` has torsion ' .",
    "the equations then force the quotient of @xmath6 to be torsion - free ( i.e. , no element different than 0 has torsion ) .",
    "since @xmath79 and @xmath80 is infinite , the epi @xmath81 is not preserved .",
    "@xmath82 is the category of torsion - free abelian groups .",
    "let @xmath83 be a @xmath0-algebra .",
    "we denote by @xmath84 the coequalizer of @xmath85 and @xmath86 in @xmath31 depicted in the following diagram ( we suppress the forgetful functor and denote by the same symbol both an algebra morphism and its underlying @xmath11-arrow ) @xmath87 ^ -{{l}_a^\\sharp } \\ar@<-2px>[r]_-{{r}_a^\\sharp } & { \\langle ta,\\alpha \\rangle } \\ar[r]^-{\\alpha } & { \\langle a,\\alpha \\rangle } \\ar[r]^-{s_{{\\mathbb{a } } } } & { \\langle a/{\\mathcal{e}},{{\\alpha}_{\\mathcal{e } } } \\rangle}\\ , . } \\ ] ] in the case @xmath66 , this entails that @xmath88 is the _ congruence _ generated by the set @xmath89 , i.e. , by the least equivalence relation on @xmath6 that includes @xmath90 and is a subalgebra of @xmath91 . in this sense",
    ", the kernel pair of a morphism always yields a congruence , and conversely , every congruence relation on an algebra @xmath92 is the kernel of the corresponding quotient homomorphism . in general , the coequaliser   in @xmath31 differs from the one obtained by applying the forgetful functor @xmath63 and then computing the coequaliser of @xmath93 and @xmath94 in @xmath10 .",
    "the coequalisers in @xmath95 and @xmath10 coincide if the equations are reflexive in the sense that the two parallel arrows @xmath96 and @xmath97 from @xmath98 to @xmath6 have a common section , and the forgetful functor @xmath63 preserves reflexive coequalisers .",
    "if @xmath13 is finitary , then @xmath63 preserves reflexive coequalisers .",
    "moreover , we note that if @xmath63 preserves reflexive coequalisers then @xmath13 preserves them too , but not every @xmath10-functor preserves reflexive coequalisers , cf .",
    "* example 4.3 ) .",
    "a @xmath0-algebra @xmath83 is said to _ satisfy _",
    "@xmath9 if the following diagram commutes : @xmath99 ^ -{{l}_a } \\ar@<-2px>[r]_-{{r}_a } & ta \\ar[r]^{\\alpha } & a \\ , . }",
    "\\ ] ] by @xmath100 we denote the full subcategory of @xmath0-algebras that satisfy @xmath9 . as coequalisers are unique only up to isomorphism , we will choose @xmath101 such that for all @xmath102 , @xmath103 .",
    "[ lm : adj ] the inclusion @xmath104 has a left - adjoint @xmath105 with unit @xmath106 for all @xmath107 , and counit @xmath108 the identity for all @xmath109 . in particular , @xmath100 is a full , reflective subcategory of @xmath31 .",
    "we first show that for any @xmath83 in @xmath31 , @xmath110 is an object in @xmath100 .",
    "consider the following diagram : @xmath111^{{l}_{a}^\\sharp } \\ar@(r , u)@<-2px>[dr]_{{r}_{a}^\\sharp } & & \\\\ ea \\ar[d]_-{es_{{\\mathbb{a } } } } \\ar[u]^{\\eta_{ea}}\\ar@<2px>[r]^{{l}_{a } } \\ar@<-2px>[r]_-{{r}_{a } } & ta \\ar[d]^{ts_{{\\mathbb{a}}}}\\ar[r]^{\\alpha } & a \\ar[d]^{s_{{\\mathbb{a } } } } \\\\ ea/{\\mathcal{e}}\\ar@<2px>[r]^-{{l}_{a/{\\mathcal{e } } } } \\ar@<-2px>[r]_-{{r}_{a/{\\mathcal{e } } } } & ta/{\\mathcal{e}}\\ar[r]^{{{\\alpha}_{\\mathcal{e } } } } & a/{\\mathcal{e}}}\\ ] ] the right - hand square commutes by the definition of @xmath84 , cf .  .",
    "the left squares ( for @xmath41 and @xmath42 respectively ) commute by naturality of @xmath41 and @xmath42 .",
    "the upper two paths from @xmath112 to @xmath113 commute by definition of @xmath84 . from the above diagram we obtain @xmath114 which implies @xmath115 since @xmath116 is epic ( cf .  assumption  [ assumps ] ) .",
    "it remains to show that for @xmath117 in @xmath100 and an algebra morphism @xmath118 there is a unique algebra morphism @xmath119 such that @xmath120 . since @xmath121 satisfies the equations we know @xmath122 , hence @xmath123 . since @xmath124 is the coequalizer of @xmath125 the claim follows .",
    "the situation is illustrated here : @xmath126 ^ -{~~{l}_{a } } \\ar@<-2px>[r]_-{{r}_{a } } \\ar[d]_-{ef } & ta \\ar[d]_-{tf}\\ar[r]^{\\alpha } & a \\ar[d]_-{f } \\ar[r]^-{s_{\\mathbb{a } } } & a/{\\mathcal{e}}\\ar@{-->}[dl]^-{g}\\\\ eb \\ar@<2px>[r]^-{{l}_{b } } \\ar@<-2px>[r]_-{{r}_{b } } & tb \\ar[r]^{\\beta } & b } \\ ] ] we have shown that @xmath127 is an @xmath100-reflection arrow for @xmath92 . by defining @xmath105 as @xmath128 ,",
    "then @xmath129 is left adjoint to @xmath130 , and the unit of the adjunction is @xmath131 .",
    "now , since the unit and counit must satisfy @xmath132 , for all @xmath109 , it follows from @xmath133 and @xmath134 that @xmath135 , and hence @xmath136 .    by composition of adjoints ,",
    "the functor @xmath137 has a left adjoint given by @xmath138 . in what follows",
    ", we will write @xmath139 for @xmath140 . this allows the following definition .",
    "[ defi : quot - monad ] given a monad @xmath2 on @xmath11 and @xmath0-equations @xmath9 , we define the _ quotient monad _ @xmath141 as the monad on @xmath11 arising from the composition of the adjunction @xmath142 of lemma  [ lm : adj ] and the eilenberg - moore adjunction @xmath143 of @xmath0 : + @xmath144^v \\ar@{}[r]|{\\top } & { { \\mathsf{alg}}({\\mathcal{t } } ) } \\ar@/^1.5pc/[r]^u \\ar@/^1.5pc/[l]^h \\ar@{}[r]|{\\top } & { { \\mathsf{c}}}\\ar@/^1.5pc/[l]^g \\ar@(ur , dr)^-{{\\mathcal{t } } ' } } \\ ] ]    we define @xmath145 as the family of underlying @xmath11-arrows of reflection arrows for free algebras , i.e. , @xmath146 naturality of @xmath147 is clear , since @xmath101 is natural .",
    "next , we show that @xmath147 is a monad morphism from @xmath0 to @xmath8 .",
    "one way of doing so is to show that @xmath147 is a coequaliser in the category of monads and monad morphisms .",
    "kelly studied colimits in categories of monads , and proved their existence in the context of some adjunction  ( * ? ? ?",
    "* proposition 26.4 ) ; with a bit of effort one can instantiate this to the adjunction constructed above . for a self - contained presentation in this section",
    ", we do not invoke kelly s results but instead prove directly the part that shows the existence of a monad morphism .",
    "this is instantiated below to the adjunction of the quotient monad .",
    "[ lm : mm - general ] let @xmath148 be any subcategory of @xmath31 , and suppose the forgetful functor @xmath149 has a left adjoint @xmath1 , with unit and counit denoted by @xmath150 and @xmath151 respectively . then    1 .",
    "@xmath1 induces a natural transformation @xmath152 so that @xmath153 is a monad morphism .",
    "2 .   precomposing the functor @xmath154 induced by this monad morphism with the comparison functor @xmath155 yields the inclusion @xmath156 .",
    "the functor @xmath1 sends any @xmath11-object @xmath25 to a @xmath13-algebra structure on @xmath157 ; we define @xmath158 to be that algebra structure .",
    "naturality of @xmath159 is immediate since @xmath160 is a @xmath0-algebra homomorphism for any @xmath11-arrow @xmath161 . to see that @xmath162 is a monad morphism , consider : @xmath163^{tt\\eta ' } \\ar[d]^{\\mu }        & ttuf \\ar[r]^{t\\kappa } \\ar[d]^{\\mu_{uf } }        & tuf \\ar[r]^{t\\eta'_{uf } } \\ar[d]^\\kappa        & tufuf \\ar[d]^{\\kappa_{uf}}\\\\      t \\ar[r]^{t\\eta ' }        & tuf \\ar[r]^{\\kappa }        & uf        & ufuf \\ar[l]_{u\\epsilon'_f } \\\\      { \\mathrm{id}}\\ar[u]^{\\eta } \\ar[r]_{\\eta ' }        & uf \\ar[u]^{\\eta_{uf } } \\ar@{=}[ur ]        & &    } \\ ] ] the top left square commutes by naturality and the middle square since any component of @xmath159 is an @xmath0-algebra . for the right square we have @xmath164 where the first equality follows from the triangle identity @xmath165 ( and functoriality ) , and the second from the fact that @xmath166 is a @xmath0-algebra homomorphism from @xmath167 to @xmath168 .",
    "the bottom left square commutes by naturality , and the triangle since @xmath159 is an @xmath0-algebra .    for ( 2 )",
    ", we first note that the composite functor under consideration maps any @xmath13-algebra @xmath92 in @xmath148 to @xmath169 .",
    "but we have @xmath170 where the first equality is a triangle identity and the second is the fact that @xmath171 is an algebra morphism .",
    "lemma  [ lm : mm - general ] is a special case of what is known as the structure - semantics adjointness , which establishes an adjunction between ( algebraic theories or ) monads over @xmath11 ( the structure ) and ` forgetful ' functors @xmath172 ( the semantics ) , see",
    "@xcite , @xcite , @xcite and , in particular , ( * ? ? ?",
    "* theorem ii.1.1 ) .",
    "@xmath173 is a monad morphism .    by lemma",
    "[ lm : mm - general ] , we only need to show that @xmath147 coincides with @xmath162 , where @xmath150 is the unit of the quotient monad . to this end",
    "consider the following diagram : @xmath174^{t\\eta ' } \\ar[dr]_{t\\eta }        & tuf \\ar[r]^\\kappa        & uf \\\\      &      tt \\ar[r]^{\\mu } \\ar[u]_{tq }        & t \\ar[u]_q    } \\ ] ] commutativity of the triangle follows from the definition of the quotient monad .",
    "for the square , notice that the components of @xmath159 are simply the quotient algebras as constructed in the proof of lemma  [ lm : adj ] , and @xmath147 is an algebra morphism by construction .    as always , the monad morphism @xmath175 induces a functor @xmath176 by lemma  [ lm : mm - general ] ( 2 ) , the comparison @xmath177 followed by @xmath178 coincides with the inclusion @xmath179 .",
    "the above construction yields a monad @xmath8 given a set of operations and equations .",
    "intuitively , any monad which is isomorphic to @xmath8 is presented by these same operations and equations ; this is captured by the following definition .",
    "[ def : monad - pres ] let @xmath47 be an endofunctor on @xmath11 , @xmath180 the free monad over @xmath181 , and @xmath8 the quotient monad of @xmath180 with respect to some @xmath180-equations @xmath9 .",
    "a monad @xmath182 is _ presented by @xmath47 and @xmath9 _ if there is a monad isomorphism @xmath183 .",
    "[ ex : ism ] the _ idempotent semiring monad _ is defined by the functor mapping a set @xmath25 to the set @xmath185 of finite languages over @xmath25 and , for morphisms @xmath186 in @xmath10 we define @xmath187 .",
    "furthermore , @xmath188 and @xmath189 are given by @xmath190   \\mu_x(\\mathcal{l } ) & = & \\bigcup_{l_1\\cdots l_n \\in \\mathcal{l } } \\",
    "{ w_1\\cdots w_n \\mid w_i \\in l_i \\}. \\end{array}\\ ] ] the idempotent semiring monad is presented by two constants @xmath191 and @xmath192 , two binary operations @xmath44 and @xmath193 , and the idempotent semiring axioms .",
    "the witnessing isomorphism can easily be given based on the observation that every semiring term is equivalent with respect to the idempotent semiring equations to a sum of products of variables .",
    "@xmath184    finally , we discuss conditions under which @xmath100 is isomorphic to @xmath194 . in general",
    "this need not be the case due to the fact that despite both @xmath179 and @xmath195 being monadic , their composition need not be monadic .",
    "this situation occurs in example  [ exle : assumptions]([exle : assumptions:3 ] ) , where @xmath100 is torsion - free abelian groups but @xmath196 is abelian groups @xcite .",
    "a general remark in this situation is that , due to beck s theorem , @xmath197 is monadic if @xmath179 is closed under regular epis , that is , if @xmath198 implies @xmath199 for regular epis @xmath118 in @xmath31 .",
    "but we can do better in a situation of special interest .",
    "we say that @xmath11 is a finitary variety if @xmath11 is the category of algebras for a finitary signature and equations , or , equivalently , if @xmath11 is the category of algebras for a finitary monad on @xmath10 .",
    "in particular , we have an adjoint situation @xmath200 .",
    "a signature is a functor @xmath201 , assigning to each ` arity ' @xmath70 a set of operation symbols .",
    "an endofunctor on @xmath11 is said to be generated by a signature @xmath202 if it is the left - kan extension of @xmath203 along @xmath204 , that is , if it is of the form @xmath205 .",
    "( note that we can not use such endofunctors to imitate example  [ exle : assumptions]([exle : assumptions:3 ] ) which relies on the @xmath69 not being free algebras of the form @xmath206 . )",
    "if in the situation described in definition  [ def : monad - pres ] the category @xmath11 is a finitary variety , and @xmath47 and @xmath39 are endofunctors on @xmath11 generated by signatures , then @xmath100 is isomorphic to @xmath194 .",
    "this is an instance of theorem  4.4 of @xcite .",
    "we briefly recall the basic definitions of distributive laws and bialgebras ; for a more thorough introduction we refer to @xcite .",
    "let @xmath2 be a monad on a category @xmath11 , and @xmath1 an endofunctor on @xmath11 .",
    "a _ distributive law _",
    "@xmath3 of the monad @xmath0 over the functor @xmath1 is a natural transformation @xmath207 which is compatible with the monad structure , meaning that @xmath208 and @xmath209 , i.e. , for all @xmath25 the following diagrams commute : @xmath210 ^ -{\\eta_{fx } } \\ar[ddrr]_-{f\\eta_{x } } & & tfx \\ar[dd]^-{\\lambda_x } \\\\ &   \\ar@{}[r]^(.4){(\\text{unit.})\\lambda } & & & & \\\\ & & ftx & & } \\xymatrix@c=4em@r=3em { t^2fx \\ar[d]_-{\\mu_{fx } } \\ar[r]^-{t\\lambda_x } \\ar@{}[drr]|{(\\text{mult.})\\lambda } & tftx \\ar[r]^-{\\lambda_{tx } } & ft^2 x \\ar[d]^-{f\\mu_x } \\\\ tfx \\ar[rr]^-{\\lambda_x } & & ftx } \\ ] ] we recall that every distributive law @xmath211 corresponds to a _ lifting _ @xmath212 of @xmath1 to the category of @xmath0-algebras ( see , e.g. ,  @xcite ) , defined as @xmath213 note that the compatibility of @xmath214 with @xmath215 means precisely that @xmath214 is a @xmath0-algebra homomorphism from @xmath216 to @xmath217 .",
    "an _ @xmath1-coalgebra _ is a pair @xmath218 where @xmath25 is a @xmath11-object and @xmath219 is a @xmath11-arrow .",
    "@xmath1-coalgebra morphism _ from @xmath218 to @xmath220 is an arrow @xmath221 such that @xmath222 .",
    "given a distributive law @xmath3 of @xmath0 over @xmath1 , a _",
    "@xmath223 consists of a carrier @xmath25 , a @xmath0-algebra @xmath224 and an @xmath1-coalgebra @xmath225 such that @xmath226 .",
    "a  _ morphism of @xmath3-bialgebras _ from @xmath227 to @xmath228 is an arrow @xmath229 which is both a @xmath0-algebra homomorphism and an @xmath1-coalgebra morphism .",
    "the following results are well known ( see , e.g. ,  @xcite ) .",
    "if @xmath230 is a final @xmath1-coalgebra , then a distributive law @xmath211 yields a final @xmath3-bialgebra @xmath231 where @xmath232 is defined by coinduction from the @xmath1-coalgebra @xmath233 .    we will need the notion of distributive laws of monads over _ copointed",
    "_ functors .",
    "a  copointed functor is a pair @xmath234 where @xmath1 is an endofunctor and @xmath235 a natural transformation .",
    "a distributive law of @xmath0 over @xmath234 is a distributive law of @xmath0 over @xmath1 additionally satisfying @xmath236 . for any endofunctor @xmath1 on a category @xmath11 with products ,",
    "the _ cofree copointed functor generated by @xmath1 _ is the pair @xmath237 where @xmath238 is the natural left - projection .",
    "when @xmath239 is the free monad generated by a ( signature ) functor @xmath181 , then distributive laws involving @xmath0 can be reduced to `` plain '' natural transformations using recursion , namely , there is a 1 - 1 correspondence between distributive laws @xmath240 of @xmath180 over @xmath1 and natural transformations @xmath241 ( cf .",
    "such a @xmath242 corresponds to a specification format of operational rules , and is sometimes referred to as a _ simple sos specification_. similarly , for cofree copointed functors , if @xmath180 is freely generated by @xmath181 , then there is a 1 - 1 correspondence between distributive laws @xmath243 of @xmath180 over @xmath244 and natural transformations @xmath245 ( cf .",
    "such a natural transformation @xmath242 is also referred to as an _ abstract gsos specification _ since it generalises the gsos - format for labelled transition systems where @xmath246 , cf .",
    "@xcite . in",
    "what follows , we will generally omit @xmath47-subscripts on free monads in order to keep notation uncluttered .",
    "an important application of distributive laws is in solving _ corecursive equations _ which are arrows of the type @xmath4 where @xmath1 is a functor and @xmath13 is ( the functor component of ) a monad .",
    "these include many interesting and useful structures such as linear and context - free systems of behavioural differential equations  @xcite , as well as linear , nondeterministic and weighted automata cf .",
    "these are all instances of _ @xmath0-automata _  @xcite ( where @xmath0 is a monad on @xmath10 ) which have the type @xmath247 where @xmath6 is a set and @xmath248 carries a @xmath0-algebra @xmath249 , i.e. , in particular , @xmath250 whose final coalgebra carrier is @xmath251 .    in the presence of a distributive law @xmath211 one obtains a _ @xmath3-coinduction principle _",
    "@xcite which provides unique solutions in the final @xmath3-bialgebra @xmath231 to corecursive equations of the form @xmath4 .",
    "ordinary coinduction is the special case where @xmath0 is the identity monad .",
    "formally , a solution to @xmath4 in a @xmath3-bialgebra @xmath252 is an arrow @xmath253 such that @xmath254_-{\\phi } \\ar[rr]^{f } & & a\\ar[d]^{\\beta } \\\\ ftx \\ar[r]^-{ftf } & fta \\ar[r]^{f\\alpha } & fa } } \\ ] ] commutes .",
    "more precisely , @xmath3-coinduction is coinduction in the category of @xmath3-bialgebras , and we have the following fact .    [ prop : solution ] let @xmath4 be a corecursive equation .",
    "taking @xmath255 then @xmath256 is a @xmath3-bialgebra , and @xmath257 is a solution of @xmath258 .",
    "moreover , for any @xmath3-bialgebra @xmath252 , there is a 1 - 1 correspondence between solutions of @xmath258 in @xmath252 and @xmath3-bialgebra morphisms from @xmath256 to @xmath252 .",
    "a `` pointwise distributive law '' @xmath3 for @xmath0-automata can be obtained ( cf .",
    "@xcite ) by taking @xmath259 where @xmath260 is the strength natural transformation .",
    "this @xmath3 is called `` pointwise '' , since the algebra structure induced on the carrier @xmath251 of the final @xmath261-coalgebra is the pointwise extension of @xmath249 . in the context - free and streams examples below , however , the desired algebraic structure on @xmath251 uses the convolution product which is not the pointwise extension of the semiring product of @xmath248 .",
    "so for these examples a different @xmath3 must be given .",
    "in section  [ sec : quot - monad ] we saw how equations give rise to quotients of algebras , and we gave a construction of the resulting quotient monad . in this section , we investigate conditions under which distributive laws and equations give rise to quotients of distributive laws .    as before ,",
    "let @xmath181 be a functor generating the free monad @xmath2 , and let @xmath262 be @xmath0-equations with the associated quotient monad @xmath141 .      in this subsection , we assume that @xmath263 is a distributive law of a monad @xmath0 over a plain behaviour functor @xmath1",
    ". we will provide a condition on @xmath3 and the equations @xmath9 that ensures that we get a distributive law @xmath264 for the quotient monad . to this end , it is convenient to use the notion of a morphism of distributive laws from  @xcite .",
    "[ defi : morphism - of - dl ] let @xmath33 and @xmath34 be monads , and let @xmath211 and @xmath265 be distributive laws .",
    "a natural transformation @xmath266 is a _ morphism of distributive laws _ from @xmath3 to @xmath159 ( notation @xmath267 ) if @xmath268 is a monad morphism and the following square commutes : @xmath269_-{\\lambda }   \\ar@{=>}[r]^-{\\tau{f } } & kf \\ar@{=>}[d]^-{\\kappa } \\\\",
    "ft \\ar@{=>}[r]^-{f\\tau } & fk } \\ ] ] @xmath184    we note that there are generalisations of the above definition that allow natural transformations between behaviour functors , cf",
    ".  @xcite . for our purposes , we do not need to change the behaviour type .",
    "[ defi : lambda ] we say that _ @xmath263 preserves ( equations in ) @xmath9 _ if for all @xmath25 in @xmath11 : @xmath270 ^ -{{l}_{fx } } \\ar@<-2px>[r]_-{{r}_{fx } } & tfx \\ar[r]^{\\lambda_x } & ftx \\ar[r]^{fq_{x } } & ft'x } \\ ] ] commutes .",
    "@xmath184    in @xmath10 , preservation of equations can be conveniently formulated in terms of relation lifting .",
    "the @xmath1-lifting of a relation @xmath271 is defined as @xmath272 for any set @xmath25 , we denote by @xmath273 the congruence @xmath274 on @xmath275 generated by the equations . if the lifting @xmath276 preserves inverse images , then it preserves kernel relations . under the assumption of preservation of inverse images , since for any @xmath1 , the lifting @xmath276 preserves diagonals . in particular , @xmath276 preserves inverse images if @xmath1 preserves weak pullbacks ( see e.g. ,  ( * ? ? ?",
    "* proposition 4.4.3 ) ) .",
    "] this means that @xmath277 , and hence equation   is satisfied if for every set @xmath25 and every @xmath278 : @xmath279    we now come to our main result .",
    "on the one hand , item ( 2 ) of theorem  [ thm : lambda-dlaw ] below gives us a distributive law for the quotient monad and the useful consequences that follow from it such as , e.g. , the solution of recursive equations as discussed in sections [ ssec : corecursive - eqs ] and [ sec : quotients - of - bialgebras ] .",
    "on the other hand , condition ( 1 ) in the form of is amenable to explicit calculations as shown in examples  [ ex : stream - calc ] , [ exle : not - preserve ] , and [ ex : cfg - lambda ] .",
    "[ thm : lambda-dlaw ]    the following are equivalent .    1",
    ".   @xmath211 preserves equations in @xmath9 .",
    "there is a ( unique ) distributive law @xmath280 such that @xmath281 is a morphism of distributive laws from @xmath3 to @xmath7 .",
    "we first show that extends to the following : @xmath282^{{l}_{fx}^\\sharp } \\ar@<-2px>[r]_{{r}_{fx}^\\sharp } &   tfx \\ar[r]^{\\lambda_x } & ftx \\ar[r]^{fq_{x } } & ft'x    } \\ ] ] to obtain it suffices to show that @xmath283 is a @xmath0-algebra homomorphism , since then @xmath284 and @xmath285 are @xmath0-algebra homorphisms extending @xmath286 and @xmath287 , respectively .",
    "since these latter two are equal due to , and homomorphic extensions are unique , we then get .",
    "we now show that @xmath288 is a @xmath0-algebra homomorphism .",
    "let @xmath212 be the lifting of @xmath1 to the category of @xmath0-algebras , and recall that @xmath214 is a @xmath0-algebra homomorphism from @xmath216 to @xmath217 ( cf .  section  [ ssec : dls - basic ] ) . since also @xmath289 is a @xmath0-algebra homomorphism , by applying the lifting @xmath212 we obtain a @xmath0-algebra homomorphism @xmath290 ^ -{fq_{x } } & f_\\lambda { \\langle t'x , \\mu'_x \\circ q_{t'x } \\rangle } } \\ , .\\ ] ] thus @xmath288 is a @xmath0-algebra homomorphism from the free @xmath0-algebra @xmath291 .",
    "this proves that   commutes .",
    "now , by the universal property of the coequalizer @xmath292 there is a ( unique ) algebra homomorphism @xmath293 such that @xmath294 : @xmath295^{{l}_{fx}^\\sharp } \\ar@<-2px>[r]_{{r}_{fx}^\\sharp }   & tfx \\ar[d]_-{\\lambda_x }   \\ar[r]^-{q_{fx } }   & t'fx \\ar@{-->}[d]^-{\\lambda'_x } \\\\ & ftx \\ar[r]^-{fq_{x } } & ft'x } \\ ] ] the naturality of @xmath7 follows from , and the naturality of @xmath3 and @xmath147 . due to the commutativity of the square in , @xmath147 is a morphism of distributive laws from @xmath3 to @xmath7 once we show that @xmath7 is , in fact , a distributive law .",
    "the unit law for @xmath7 holds due to the unit law for @xmath3 and : @xmath296 ^ -{\\eta_{fx } } \\ar[dr]_-{f\\eta_{x } } & tfx \\ar[r]^-{q_{fx } } \\ar[d]^-{\\lambda_x } & t'fx \\ar[d]^-{\\lambda'_x } \\ar@{}[dl]|{\\eqref{eq : lambda'-square } } \\\\ & ftx \\ar[r]_-{fq_{x } } & ft'x } \\ ] ] multiplication law for @xmath7 : @xmath297 ^ -{\\lambda_x }      \\ar@/_5pc/[dddd]_-{q_{fx } }      \\ar@{}[drr]|{(\\text{mult.})\\lambda } & & ftx   \\ar@/^5pc/[dddd]^-{fq_{x } } \\\\",
    "t^2fx \\ar[u]_-{\\mu_{fx } } \\ar[d]^-{q_{tfx } }        \\ar[r]^-{t\\lambda_x }        \\ar@{}[dr]|{(\\text{nat.})q } & tftx\\ar[r]^-{\\lambda_{tx } } \\ar@{->>}[d]^-{q_{ftx } } \\ar@{}[dr]|{\\eqref{eq : lambda'-square}_{tx } } & ft^2x \\ar[u]_-{f\\mu_x } \\ar@{->>}[d]^-{fq_{tx } } \\\\",
    "t'tfx \\ar[d]^-{t'q_{fx } }        \\ar[r]^-{t'\\lambda_x }        \\ar@{}[dr]|{t'\\eqref{eq : lambda'-square } } & t'ftx \\ar[r]^-{\\lambda'_{tx } }        \\ar@{->>}[d]^-{t'fq_{x } }        \\ar@{}[dr]|{\\text{(nat.)}\\lambda ' } & ft'tx   \\ar@{->>}[d]^-{ft'q_{x } } \\\\ t't'fx        \\ar[r]^-{t'\\lambda'_x }        \\ar[d]_-{\\mu'_{fx } } & t'ft'x \\ar[r]^-{\\lambda'_{t'x } } & ft't'x   \\ar[d]^-{f\\mu'_x } \\\\",
    "t'fx \\ar[rr]^-{\\lambda'_x } & & ft'x } \\ ] ] the small upper - left square commutes by naturality of @xmath147 . the small lower - left square commutes by applying @xmath298 to . the outer crescents commute since @xmath147 is a monad morphism , and the outermost part does due to .",
    "finally , use that by naturality of @xmath147 , @xmath299 , which by assumption  [ assumps ] is an epi , and hence can be right - cancelled to yield commutativity of the lower rectangle as desired .",
    "the implication from 2 to 1 follows from the fact that implies .",
    "street  @xcite investigates the 2-category where monads are objects and distributive laws @xmath300 , called monad functors , are the 1-cells @xmath301 .",
    "given a monad @xmath13 , the right kan - extension @xmath302 of @xmath303 along @xmath1 is again a monad .",
    "morever , distributive laws @xmath304 are in 1 - 1 correspondence to monad morphisms @xmath305 , cf .",
    "* theorem 5 ) .    in this setting ,",
    "if the free monad @xmath306 over @xmath39 exists , then the equations can be expressed more abstractly as a parallel pair of monad morphisms @xmath307!<0ex,0.35ex>;[r]!<0ex,0.35ex > \\ar[]!<0ex,-0.35ex>;[r]!<0ex,-0.35ex>&t}$ ] , and the distributive law @xmath308 satisfies the equations iff its transpose @xmath309 does , that is , iff @xmath307!<0ex,0.35ex>;[r]!<0ex,0.35ex > \\ar[]!<0ex,-0.35ex>;[r]!<0ex,-0.35ex>&t \\ar[r ] & { \\mathsf{ran}}_f ft \\ar[r ] & { \\mathsf{ran}}_f ft ' } $ ] commutes .",
    "since @xmath298 is a coequaliser of monads , this induces a monad morphism @xmath310 , which , after transposing , gives a distributive law @xmath311 .",
    "we thank neil ghani for this conceptually elegant argument of the equivalence stated in theorem  [ thm : lambda-dlaw ] .",
    "we note that the above elementary proof does not require the existence of the free monad over @xmath39 , and moreover , it avoids introducing more abstract definitions .    using that distributive laws correspond to functor liftings on @xmath0-algebras ( cf .  ) , the distributive law @xmath7 in theorem  [ thm : lambda-dlaw ] exists if and only if the functor @xmath212 restricts to @xmath8-algebras . a similar statement for the case when @xmath1 is a monad is made in ( * ?",
    "* corollary  3.4.2 ) .    as a corollary",
    "we obtain the analogue of theorem  [ thm : lambda-dlaw ] for monads presented by operations and equations .",
    "[ cor : pres - dl ] suppose @xmath312 is presented by operations @xmath47 and equations @xmath9 with natural isomorphism @xmath313 , and suppose we have a distributive law @xmath314 of @xmath0 over @xmath1",
    ". then there exists a unique distributive law @xmath315 of @xmath316 over @xmath1 such that @xmath317 is a morphism of distributive laws .",
    "the distributive law @xmath318 is defined as @xmath319 .",
    "the proof proceeds by checking that @xmath159 indeed satisfies the defining axioms of a distributive law , which is an easy but tedious exercise .",
    "theorem  [ thm : lambda-dlaw ] says that if @xmath3 preserves the equations @xmath9 , then we can _",
    "present @xmath7 as `` @xmath3 modulo equations''_. we illustrate this with an example .    [ ex : stream - calc ] behavioural differential equations are used extensively in @xcite to define streams and stream operations . here ,",
    "the behaviour functor is @xmath320 whose final coalgebra @xmath321 consists of streams over the real numbers together with the map @xmath322 which maps a stream @xmath323 to its initial value @xmath324 and derivative @xmath325 .    consider the following system of behavioural differential equations where @xmath326 $ ] , @xmath327 , @xmath328 and @xmath268 denote streams over the real numbers .",
    "@xmath329(0 ) & = & a , & \\quad & [ a ] ' & = & [ 0 ] , \\qquad\\qquad\\qquad\\qquad \\forall a \\in { \\mathbb{r}}\\\\ { \\mathtt{x}}(0 ) & = & 0 , & & { \\mathtt{x } } ' & = & [ 1],\\\\ ( { \\sigma}+\\tau)(0 ) & = & { \\sigma}(0)+\\tau(0 ) , & & ( { \\sigma}+\\tau ) ' & = & { \\sigma}'+\\tau',\\\\ ( { \\sigma}\\times\\tau)(0 ) & = & { \\sigma}(0)\\cdot\\tau(0 ) , & & ( { \\sigma}\\times\\tau ) ' & = & ( { \\sigma}'\\times [ \\tau(0 ) ] ) + ( ( { \\sigma}'\\times ( { \\mathtt{x}}\\times \\tau ' ) ) + \\\\ & & & & & & \\hfill ( [ { \\sigma}(0)]\\times\\tau ' ) ) \\end{array}\\ ] ] the behavioural differential equations in define the constant streams @xmath326 = ( a,0,0,\\ldots)$ ] for all @xmath330 , @xmath331 , pointwise addition and convolution product of streams . note that the convolution product is here defined differently than in @xcite .",
    "we explain this choice at the end of the example .    since we are defining @xmath332 many streams @xmath326 $ ] , one constant stream @xmath327 and two binary operations ( @xmath44 and @xmath333 , the signature functor is @xmath334 , and corresponds to a natural transformation @xmath335 where @xmath13 is the functor part of the free monad @xmath0 over @xmath181 ( that is , @xmath275 is the set of all @xmath181-terms over variables in @xmath25 ) .",
    "the components of @xmath242 are given by : @xmath336}_x & = &   \\langle a , [ 0 ] \\rangle\\\\[.3em ] \\rho^{{\\mathtt{x}}}_x & = &   \\langle 0 , [ 1 ]",
    "\\rangle\\\\[.3em ] \\rho^{+}_x(\\langle a , x \\rangle,\\langle b , y \\rangle ) & = &    \\langle a+b , x+y \\rangle\\\\[.3em ] \\rho^{\\times}_x(\\langle a , x \\rangle,\\langle b , y \\rangle ) & = &    \\langle a \\cdot b , ( x \\times [ b ] ) + ( ( x \\times ( { \\mathtt{x}}\\times y ) ) + ( [ a ] \\times y ) ) \\rangle \\end{array}\\ ] ] as described at the end of section  [ ssec : dls - basic ] , such a @xmath242 is a simple sos specification , and it uniquely induces a distributive law @xmath263 .",
    "this @xmath3 is essentially the inductive extension of @xmath242 from terms of depth 1 to arbitrary terms .",
    "let @xmath9 be given by the following axioms where @xmath337 and @xmath338 ( see example  [ ex : equations ] for an explanation of how this corresponds to a functor with two natural transformations ) : @xmath339+v = v   & v+u = u+v \\\\ ( v\\times u)\\times w = v\\times(u\\times w ) & [ 1 ] \\times v = v \\qquad & v \\times u = u \\times v \\\\ v\\times ( u + w ) = ( v \\times u ) + ( v\\times w ) \\qquad & [ 0 ] \\times v = [ 0 ] \\\\ { [ a+b ] = [ a]+[b ] } \\quad & [ a \\cdot b ] = [ a ] \\times [ b ] \\quad \\end{array}\\ ] ] @xmath9 consists of the _ commutative _ semiring axioms together with axioms stating the inclusion of the underlying semiring of the reals .",
    "we would like to apply theorem  [ thm : lambda-dlaw ] to obtain a distributive law @xmath7 for the quotient monad @xmath8 arising from @xmath0 and @xmath9 .",
    "we show that @xmath3 preserves @xmath9 .",
    "let @xmath340 for some set @xmath25 .",
    "first note that for @xmath341 , @xmath342 iff @xmath343 and @xmath344 .",
    "it is straightforward to check preservation of the axioms that only concern addition , as well as of @xmath345 \\times v = v$ ] , @xmath346 \\times v = [ 0]$ ] and @xmath347 .",
    "we show that @xmath348 = [ a ] \\times [ b]$ ] is preserved : @xmath349\\times [ b ] ) & = & { \\langle a\\cdot b , [ 0]\\times [ b ] + [ 0 ] \\times { \\mathtt{x}}\\times [ 0 ] + [ a ] \\times [ 0 ] \\rangle } \\\\ & { \\overline{f}}({\\equiv_{x } } ) & { \\langle a\\cdot b , [ 0 ] \\rangle } = \\lambda_x([a \\cdot b ] ) \\end{array}\\ ] ] we check that @xmath3 preserves the distribution axiom : @xmath350 ) + ( x \\times x \\times ( y+z ) ) + [ a]\\times ( y+z ) \\rangle } \\\\",
    "\\quad & { \\overline{f}}({\\equiv_{x } } ) & { \\langle a \\cdot ( b+c ) , ( x \\times [ b+c ] ) + ( x \\times x \\times y ) + ( x \\times x \\times z ) + \\\\ & & \\qquad\\qquad\\qquad   \\qquad\\qquad\\qquad \\hfill([a]\\times y ) + ( [ a]\\times z ) \\rangle } \\\\ & { \\overline{f}}({\\equiv_{x } } ) & { \\langle ( a\\cdot c ) + ( b \\cdot c ) ,      ( x \\times [ b ] ) + ( x \\times x \\times y ) + ( [ a]\\times y ) + \\\\ & & \\qquad\\qquad\\qquad   \\qquad\\qquad\\qquad    ( x \\times[c ] ) + ( x \\times x \\times z ) + ( [ a]\\times z ) \\rangle } \\\\",
    "& = & \\\\ \\multicolumn{3}{l}{\\lambda_x(({\\langle a , x \\rangle } \\times { \\langle b , y \\rangle } ) + ( { \\langle a , x \\rangle } \\times { \\langle c , z \\rangle } ) ) } \\end{array}\\ ] ] note that we used @xmath351 = [ a]+[b]$ ] .",
    "similarly , preservation of @xmath352-associativity can be verified , and it uses the axiom @xmath348 = [ a ] \\times [ b]$ ] .",
    "we have thus shown that @xmath3 preserves @xmath9 , and it follows , in particular , that @xmath353,[1 ] \\rangle}$ ] is a commutative semiring .",
    "this was shown directly in @xcite , but the proof uses bisimulation - up - to as well as the fundamental theorem of stream calculus , which can not be added as an equation . in our approach we construct a distributive law , and obtain not only this result but also the soundness of the bisimulation - up - to technique  @xcite , and the existence of unique solutions to corecursive equations @xmath354 ( see section  [ ssec : corecursive - eqs ] ) .",
    "the derivative of the convolution product is usually ( cf .",
    "@xcite ) specified as : @xmath355\\times\\tau')\\ ] ] which corresponds to a stream gsos - rule @xmath356 , and thus to a distributive law over the cofree copointed functor .",
    "however , with this definition , we could not show that the commutativity of @xmath352 is preserved although all other axioms remain preserved .",
    "hence a given @xmath3 does not necessarily satisfy all equations that are valid on the final @xmath1-coalgebra .",
    "@xmath184    in the above example the monad under consideration is defined by operations and equations .",
    "in example  [ ex : cfg - lambda ] below we will see an example of a monad that has an independent definition , but where a presentation by operations and equations simplifies the construction of a distributive law considerably .",
    "the concrete proof method for preservation of equations bears a close resemblance to _ bisimulation up to congruence _",
    "@xcite , in that one must show that for every pair in the ( image of the ) equations , its derivatives are related by the least _ congruence _ @xmath273 instead of just the equivalence relation induced by the equations .",
    "[ exle : not - preserve ] as we discussed at the end of example  [ ex : stream - calc ] ( regarding the definition of the convolution product ) , it is not always possible to show that a given @xmath3 preserves all equations that hold in the final coalgebra .",
    "now we give another concrete example of this fact .",
    "this example again concerns stream systems , i.e. , coalgebras for the functor @xmath320 .",
    "we define the constant stream of zeros by three different constants @xmath357 and @xmath358 by the following behavioural differential equations : @xmath359 the corresponding signature functor is thus @xmath360 , and the above specification gives rise to a distributive law @xmath263 where @xmath13 is ( the functorial component of ) the free monad over @xmath47 .",
    "now consider the equation @xmath361 ; this clearly holds when interpreted in the final coalgebra .",
    "however , this equation is not preserved by @xmath3 . to see this , notice that @xmath362 and @xmath363 , but @xmath364 ,",
    "so @xmath365 and @xmath366 are not related by @xmath367 .",
    "@xmath184      we now show that our main results hold as well for distributive laws of monads over _ copointed _ functors .",
    "this extends our method to deal with operations specified in the abstract gsos format , such as language concatenation .",
    "[ prop : dl - copointed ] theorem  [ thm : lambda-dlaw ] and corollary  [ cor : pres - dl ] hold as well for any distributive law of a monad over a copointed functor .",
    "let @xmath368 be a copointed functor and @xmath369 a distributive law of @xmath0 over @xmath368 .",
    "suppose @xmath3 preserves equations @xmath39 . by theorem  [ thm : lambda-dlaw ] then there is a distributive law @xmath7 of @xmath8 over @xmath129 such that @xmath281 is a morphism of distributive laws .",
    "in order to show that @xmath7 is a distributive law of @xmath8 over @xmath368 we only need to prove that @xmath7 satisfies the additional axiom , i.e. , that the right crescent in the following diagram commutes : @xmath370^{q_{hx } } \\ar[d]^{\\lambda_x } \\ar@/_2pc/[dd]_{t\\epsilon_x } & t'hx \\ar[d]_{\\lambda'_x } \\ar@/^2pc/[dd]^{t'\\epsilon_x } \\\\      htx \\ar[r]^{hq_{x } } \\ar[d]^{\\epsilon_{tx } }   & ht'x \\ar[d]_{\\epsilon_{t'x } } \\\\",
    "tx \\ar[r]^{q_{x } }                            & t'x    } \\ ] ] the outermost part commutes by naturality of @xmath147 , the upper square commutes since @xmath3 is a morphism of distributive laws , and the lower square commutes by naturality of @xmath371 , and the left crescent commutes by the fact that @xmath3 is a distributive law of @xmath0 over @xmath372 .",
    "consequently we have @xmath373 , and since @xmath374 is an epi we obtain @xmath375 as desired .",
    "for corollary  [ cor : pres - dl ] one needs to add to its proof a check that the distributive law satisfies the additional axiom as well , which is again rather easy to do .",
    "[ ex : cfg - lambda ] a context free grammar ( in greibach normal form ) consists of a finite set @xmath6 of terminal symbols , a ( finite ) set @xmath25 of non - terminal symbols , and a map @xmath376 , i.e. , it is a coalgebra for the behavior functor @xmath377 composed with the idempotent semiring monad @xmath378 from example  [ ex : ism ] .",
    "intuitively , @xmath379 means that the variable @xmath380 can generate the empty word , whereas @xmath381 if and only if @xmath380 can generate @xmath382 , cf .",
    "@xcite .",
    "it is a rather difficult task to describe concretely a distributive law of @xmath383 over @xmath1 ( or @xmath384 ) defining the sum @xmath44 and sequential composition @xmath193 of context - free grammars . more conveniently , since we have seen in example  [ ex : ism ] that the monad @xmath378 can be presented by the operations and axioms of idempotent semirings , we proceed by defining a distributive law @xmath3 of the free monad @xmath180 generated by the semiring signature functor @xmath385 over the cofree copointed functor @xmath386 , and show that @xmath3 preserves the semiring axioms .",
    "we define @xmath3 as the distributive law that corresponds to the natural transformation @xmath387 whose components are given by : @xmath388 \\rho^{{\\mathtt{1}}}_x & = &   \\langle 1 , a \\mapsto \\emptyset \\rangle\\\\[.3em ] \\rho^{+}_x(\\langle x , o , f \\rangle,\\langle y , p , g \\rangle ) & = &    \\langle \\text{max}\\ { o , p \\ } , a \\mapsto f(a ) + g(a ) \\rangle\\\\[.3em ] \\rho^{\\cdot}_x(\\langle x , o , f \\rangle,\\langle y , p , g \\rangle ) & = &    \\left \\langle \\text{min}\\ { o , p \\ } , a \\mapsto   \\begin{cases }                          f(a ) \\cdot y         & \\mbox{if $ p = 0$}\\\\[.3em ]                          f(a ) \\cdot y + g(a ) & \\mbox{if $ p=1 $ }                          \\end{cases }    \\right \\rangle \\end{array}\\ ] ] we proceed to show that @xmath3 preserves the defining equations of idempotent semirings .",
    "we treat here only the case of distributivity , i.e. , @xmath389 . to this end , let @xmath25 be arbitrary and suppose @xmath390 .",
    "notice that either @xmath391 or @xmath392 ; we treat both cases separately : @xmath393 in a similar way one can show that @xmath3 preserves the other idempotent semiring equations .",
    "thus , from proposition  [ prop : dl - copointed ] and corollary  [ cor : pres - dl ] we obtain a distributive law @xmath159 of @xmath378 over @xmath384 such that @xmath394 is a morphism of distributive laws , i.e. , @xmath159 is presented by @xmath3 and the equations of idempotent semirings .",
    "@xmath184      a further type of distributive law , which generalizes all of the above , is that of a distributive law of a monad over a comonad . these arise from gsos laws as well as from _ cogsos _ laws , which allow to model operational rules which involve look - ahead in the premises",
    "we refer to  @xcite for technical details and an example of a cogsos format on streams . in this subsection",
    ", we prove for future reference that when constructing the quotient distributive law as above for a distributive law over a comonad , the axioms are preserved , i.e. , the quotient is again a distributive law over the comonad .",
    "[ prop : dl - comonad ] theorem  [ thm : lambda-dlaw ] and corollary  [ cor : pres - dl ] hold as well for any distributive law of a monad over a comonad .",
    "let @xmath395 be a comonad and @xmath396 a distributive law of the monad @xmath33 over the comonad @xmath397 .",
    "suppose @xmath3 preserves equations @xmath9 . by proposition",
    "[ prop : dl - copointed ] there is a distributive law @xmath7 of @xmath8 over the copointed functor @xmath398 . to show that @xmath7 is a distributive law over the comonad @xmath395",
    ", we need to check that the corresponding axiom holds .",
    "@xmath399^{t\\delta } \\ar@/_3.5pc/[ddd]_{q_{d } } \\ar[rr]^\\lambda & & dt \\ar[d]^{\\delta_t } \\ar@/^3.5pc/[ddd]^{dq } \\\\      tdd \\ar[r]^{\\lambda_d } \\ar[d]^{q_{dd } } & dtd \\ar[r]^{d\\lambda } \\ar[d]^{dq_{d } } & ddt \\ar[d]^-{ddq } \\\\      t'dd \\ar[r]^{\\lambda'_d } & dt'd \\ar[r]^{d\\lambda ' } & ddt ' \\\\      t'd \\ar[u]_{t'\\delta } \\ar[rr ] ^{\\lambda ' } & & dt ' \\ar[u]_{\\delta_{t ' } }    } \\ ] ] the outer square as well as the two small inner squares commute by the fact that @xmath147 is a morphism of distributive laws .",
    "the outer crescents commute since @xmath147 and @xmath400 are natural .",
    "the upper rectangle commutes by the assumption that @xmath3 is a distributive law over the comonad .",
    "checking that the lower rectangle commutes , which is what we need to prove , is now an easy diagram chase , using that @xmath401 is epic .",
    "in this section , we show that morphisms of distributive laws commute with solving corecursive equations . in the case of monads with equations",
    ", this means that first solving equations @xmath258 with respect to @xmath0 and then forming the quotient of the solution bialgebra is the same as first forming the quotient of @xmath0 and solving with respect to the quotient monad @xmath8 .",
    "we first describe some functors that link the relevant categories of bialgebras and corecursive equations . throughout this section ,",
    "we let @xmath402 and @xmath312 be monads ; and @xmath211 and @xmath265 be distributive laws of @xmath0 and @xmath316 over @xmath1 , respectively .",
    "if @xmath403 is a morphism of distributive laws , then precomposing with @xmath268 yields a functor : @xmath404 ^ -{\\alpha } & x \\ar[r]^-{\\beta } & fx }   & \\quad\\mapsto\\quad   & \\xymatrix@1{tx \\ar[r]^-{\\alpha\\circ\\tau_x } & x \\ar[r]^-{\\beta } & fx } \\end{array}\\ ] ]    it follows from the naturality of @xmath268 and @xmath405 that @xmath406 takes a @xmath159-bialgebra to a @xmath3-bialgebra .",
    "similarly , postcomposing with @xmath407 yields a functor between corecursive equations : @xmath408 & \\phi\\colon x { \\rightarrow}ftx & \\quad \\mapsto \\quad & f\\tau_x\\circ\\phi\\colon x { \\rightarrow}fkx \\end{array}\\ ] ] recall from section  [ ssec : corecursive - eqs ] , that given a distributive law @xmath211 , the solutions of a corecursive equation @xmath4 are characterised by morphisms from the @xmath3-bialgebra @xmath256 whose @xmath1-coalgebra structure given by @xmath409 this yields a functor ( see , e.g. , ( * ? ? ?",
    "5.4.11 ) ) : @xmath410 & { \\langle x,\\phi \\rangle } & \\quad\\mapsto\\quad   & { \\langle tx,\\mu_x,{\\phi^{\\lambda } } \\rangle } \\end{array}\\ ] ] we can go in the opposite direction by using the monad unit , @xmath411 &   { \\langle x,\\alpha,\\beta \\rangle } & \\quad \\mapsto\\quad   & { \\langle x , f\\eta_x\\circ\\beta \\rangle } \\end{array}\\ ] ] which decomposes into the functor @xmath412 that forgets algebra structure , and @xmath413 &   { \\langle x,\\beta \\rangle } & \\quad\\mapsto\\quad   & { \\langle x , f\\eta_x\\circ\\beta \\rangle } \\end{array}\\ ] ] the following diagram summarises the situation : @xmath414 ^ -{v_\\eta } \\ar@/^5pc/[drr]_-{u } \\ar@{}[r]| { } & { \\mathsf{coalg}}(ft ) \\ar@/^1.2pc/[l]^-{g_\\lambda }   \\ar[dd]^-{q } & \\\\ & & { \\mathsf{coalg}}(f ) \\ar[ul]_-{j_\\eta}\\ar[dl]^-{j_\\theta } \\\\ { \\mathsf{bialg}}(\\kappa ) \\ar@/^1.2pc/[r]^-{v_\\theta } \\ar[uu]_-{i } \\ar@{}[r]| { } \\ar@/_5pc/[urr]^-{u } & { \\mathsf{coalg}}(fk ) \\ar@/^1.2pc/^-{g_\\kappa}[l ] } \\ ] ] we mention that @xmath415 since @xmath268 is compatible with the units of @xmath0 and @xmath316 .",
    "morphisms of distributive laws are defined to be monad maps , and hence respect the algebraic structure .",
    "the next proposition shows that , as one might expect , they also respect the coalgebraic structure , and hence morphisms of distributive laws induce morphisms between bialgebras .",
    "[ prop : tau - bialgebra - morphism ] if @xmath267 is a morphism of distributive laws , then for all @xmath416 we have that @xmath417 is a @xmath3-bialgebra morphism @xmath418 or , equivalently , an @xmath1-coalgebra morphism @xmath419 .    we show that @xmath419 is an @xmath1-coalgebra morphism : @xmath420_-{t\\phi } \\ar[r]^-{\\tau_x } \\ar@{}[dr]|{(\\text{nat.}\\tau ) } & kx \\ar[d]^-{k\\phi } \\ar@/^1.5pc/[dr]^-{kq\\phi } \\ar@{}[dr]|{(\\text{def.}q\\phi ) } \\\\ tftx \\ar[d]_-{\\lambda_{tx } } \\ar[r]^-{\\tau_{ftx } } \\ar@{}[dr]|{\\eqref{eq : morphism - dl - square } } & kftx \\ar[d]^-{\\kappa_{tx } } \\ar[r]^-{kf\\tau_x } \\ar@{}[dr]|{(\\text{nat.}\\lambda ) } & kfkx \\ar[d]^-{\\kappa_{kx } } \\\\",
    "ft^2x \\ar[d]_-{f\\mu_x } \\ar[r]^-{f\\tau_{tx } }   \\ar@{}[drr]|{f(\\tau~\\text{monad morph . } ) } & fktx   \\ar[r]^-{fk\\tau_x } & fkkx \\ar[d]^-{f\\nu_x } \\\\",
    "ftx \\ar[rr]_-{f\\tau_x } & & fkx } \\ ] ]    it follows that the unique @xmath3-bialgebra morphism @xmath421 into the final @xmath3-bialgebra @xmath231 factors as @xmath422 , where @xmath423 is the final @xmath3-bialgebra morphism from @xmath424 , as shown here : @xmath425",
    "^ -{t\\tau_x } \\ar[d]^-{\\mu_x } & & tkx \\ar[rr]^-{tg ' }   \\ar[d]^-{\\nu_x\\circ \\tau_{kx } } & & tz \\ar[d]^-{\\alpha } \\\\ x \\ar[r]^-{\\eta_x } \\ar[dr]_-{\\phi } & tx \\ar[rr]^-{\\tau_x } \\ar[d]^-{{\\phi^{\\lambda } } } & & kx \\ar[rr]^-{g ' }   \\ar[d]^-{{(q\\phi)^{\\kappa } } } & & z \\ar[d]^-{\\zeta } \\\\ & ftx \\ar[rr]^-{f\\tau_x } & & fkx \\ar[rr]^-{fg ' } & & fz } \\ ] ] hence by proposition  [ prop : solution ] , every solution of @xmath258 in the final @xmath3-bialgebra yields a solution of @xmath426 , and vice versa .",
    "when @xmath403 arises from a set of preserved equations @xmath9 as in section  [ sec : quotients - of - dls ] ( with @xmath427 ) , then proposition  [ prop : tau - bialgebra - morphism ] says that @xmath428 is a quotient of the `` free '' @xmath3-bialgebra @xmath256 , and in particular , the congruence @xmath273 is an @xmath1-behavioural equivalence . in this case , @xmath426 is the corecursive equation obtained by reading the right - hand side of @xmath258 modulo equations in @xmath39 .",
    "in other words , forming the quotient of the solution of the equation @xmath258 is the same as solving the quotiented equation @xmath426 .",
    "[ ex : cfg - lambda-2 ] recall from example  [ ex : cfg - lambda ] that @xmath429 is a morphism of distributive laws . by proposition  [ prop : tau - bialgebra - morphism ]",
    "we have the following commuting diagram for any corecursive equation @xmath430 : @xmath431 ^ -{\\eta_x } \\ar[dr]_-{\\phi } & tx \\ar[rr]^-{(i \\circ q)_x } \\ar[d]^-{{\\phi^{\\lambda } } } & & { \\mathcal{p}}_\\omega(x^ * ) \\ar[rr ]   \\ar[d]^-{{(q\\phi)^{\\kappa } } } & & { \\mathcal{p}}(a^ * ) \\ar[d]^-{\\zeta } \\\\ & 2 \\times ( tx)^a \\ar[rr]^-{~~{\\mathrm{id}}\\times ( ( i \\circ q)_x)^a } & & 2 \\times ( { \\mathcal{p}}_\\omega(x^*))^a \\ar[rr ] & & 2 \\times { \\mathcal{p}}(a^*)^a } \\ ] ] notice that a context - free grammar @xmath432 can be represented by a @xmath433 such that @xmath434 , since @xmath435 is surjective .",
    "this gives the expected correspondence between two of the three different coalgebraic approaches to context - free languages introduced in  @xcite ( the third approach is about fixed - point expressions and as such is outside the scope of this paper ) .",
    "@xmath184    similarly , the algebraic structure induced by @xmath3 on the final @xmath1-coalgebra factors uniquely through the algebraic structure induced by @xmath159 .",
    "[ prop : algs - final ] let @xmath267 be a morphism of distributive laws , and let @xmath436 and @xmath437 be the algebras induced by @xmath3 and @xmath159 respectively on the final coalgebra @xmath438 .",
    "then @xmath439 .",
    "consider the following diagram : @xmath440^{\\tau_z } \\ar[d]^{t\\zeta }          & kz \\ar[r]^{\\alpha ' } \\ar[d]^{k\\zeta }    & z \\ar[dd]^{\\zeta }    & tz \\ar[d]^{t\\zeta } \\ar[l]_{\\alpha}\\\\      tfz \\ar[r]^{\\tau_{fz } } \\ar[d]^{\\lambda_z }   & kfz \\ar[d]^{\\kappa_z }              &                      & tfz \\ar[d]^{\\lambda_z } \\\\",
    "ftz \\ar[r]^{f\\tau_z }                        & fkz \\ar[r]^{f\\kappa }               & fz                   & ftz \\ar[l]_{f\\alpha }    } \\ ] ] the upper left square commutes by naturality of @xmath268 , whereas the lower left square commutes since @xmath268 is a morphism of distributive laws .",
    "the two rectangles commute by definition of @xmath441 and @xmath442 ( see section  [ sec : dls ] ) .",
    "thus @xmath443 and @xmath441 are both coalgebra homomorphisms from @xmath444 to @xmath438 and consequently @xmath445 by finality .",
    "[ ex : cfg - lambda-3 ] continuing example  [ ex : cfg - lambda-2 ] , it follows from proposition  [ prop : algs - final ] that the algebra @xmath446 induced by the distributive law for @xmath0 can be decomposed as @xmath447 , where @xmath442 is the algebra on @xmath448 induced by the distributive law for @xmath449 .",
    "it can be shown by induction that @xmath441 is the algebra on languages given by union and concatenation product .",
    "now @xmath450 can be given by selecting a representative term and applying @xmath441 , and it follows that @xmath451 . @xmath184",
    "we have presented a preservation condition that is necessary and sufficient for the existence of a distributive law @xmath7 for a monad with equations given a distributive law @xmath3 for the underlying free monad .",
    "this condition consists of checking that the base equations are preserved by @xmath3 .",
    "example [ ex : cfg - lambda ] shows that presenting a monad by operations and equations and then checking that @xmath3 preserves the equations can be much easier than describing and verifying the distributive law requirements directly .",
    "we demonstrated our method by applying it to obtain distributive laws for stream calculus over commutative semirings , and for context - free grammars which use the monad of idempotent semirings .    in  @xcite",
    "the notion of morphisms of distributive laws is studied as a general approach to translations between operational semantics . in this paper",
    "we investigate in detail the case of quotients of distributive laws .",
    "distributive laws for monad quotients and equations are also studied in @xcite .",
    "the setting and motivation of @xcite is different as they study distributive laws of one monad over another with the aim to compose these monads .",
    "we study distributive laws of a monad over a plain functor , a copointed functor or a comonad .",
    "the approach in @xcite differs from ours in that the desired distributive law is contingent on two given distributive laws and the existence of the coequaliser ( in the category of monads ) which encodes equations .",
    "we have given a more direct analysis for monads in @xmath10 and a practical proof principle , which covers many known examples .",
    "we leave as future work to find out precisely how their theorem  31 relates to our theorem  [ thm : lambda-dlaw ] . in  @xcite effects with equations",
    "are added to the syntax generated by a free monad @xmath13 , using as semantic domain a suitable final @xmath248-coalgebra in the kleisli category of @xmath13 ( assumed to be enriched over @xmath452-complete pointed partial - orders ) . to prove adequacy of the semantics with respect to a given operational model , the authors use a result similar to our theorem  [ thm : lambda-dlaw ] .",
    "their result , however , is limited to coalgebras for the functor @xmath453 . moreover , since we work in eilenberg - moore categories of algebras rather than kleisli categories of free algebras , we do not need to require the monad ( and the quotient map ) to be strong .    while in this work we have focused on adding equations which already hold in the final bialgebra , it is often useful to use equations to _ induce _ behaviour , next to a behavioural specification in terms of a distributive law .",
    "in process theory this idea is captured by the notion of structural congruences  @xcite . at the more general level of distributive laws",
    "there is work on adding recursive equations  @xcite .",
    "a study of structural congruences for distributive laws on free monads was given recently in  @xcite .",
    "while that work focuses only on free monads , we believe that it can possibly be combined with the present work to give a more general account of equations and structural congruences for different monads .    in the case of gsos on labelled transition systems , proving equations to hold at the level of a specification was considered in  @xcite , based on _ rule - matching bisimulations _ , a refinement of de simone s notion of fh - bisimulation .",
    "rule - matching bisimulations are based on the syntactic notion of _ ruloids _ , while our technique is based on preservation of equations at the level of distributive laws .",
    "it is currently not clear what the precise relation between these two approaches is ; one difference is that preserving equations naturally incorporates reasoning up to congruence .",
    "more technically , it remains an open problem whether a converse of proposition  [ prop : tau - bialgebra - morphism ] holds . for the special case of @xmath66 ,",
    "such a converse has been proved by joost winter ( in personal communication ) .",
    "we intend to investigate the general case in future work .",
    "f.  abou - saleh and d.  pattinson .",
    "comodels and effects in mathematical operational semantics . in f.",
    "pfenning , editor , _ proceedings of fossacs 2013 _ , volume 7794 of _ lecture notes in computer science _ ,",
    "pages 129144 .",
    "springer , 2013 .                  m.m .",
    "bonsangue , h.h .",
    "hansen , a.  kurz , and j.  rot . presenting distributive laws . in r.",
    "heckel and s.  milius , editors , _ proceedings of calco 2013 _ , volume 8089 of _ lecture notes in computer science _ , pages 95109 .",
    "springer , 2013 .",
    "b.  jacobs . a bialgebraic review of deterministic automata , regular expressions and languages . in k.",
    "futatsugi , j .-",
    "jouannaud , and j.  meseguer , editors , _ algebra , meaning and computation _ , volume 4060 of _ lecture notes in computer science _ , pages 375404 .",
    "springer , 2006 .",
    "an outline of functorial semantics . in b.",
    "eckmann and m.  tierny , editors , _ seminar on triples and categorical homology theory _ , volume  80 of _ lecture notes in mathematics_. springer - verlag , 1969 .",
    "available as _ reprints in theory and applications of categories _ , no .",
    "18 .",
    "mousavi and m.a . reniers .",
    "congruence for structural congruences . in v.",
    "sassone , editor , _ proceedings of fossacs 2005 _ , volume 3441 of _ lecture notes in computer science _ , pages 4762 .",
    "springer , 2005 .",
    "j.  rot and m.  m. bonsangue . combining bialgebraic semantics and equations .",
    "in a.  muscholl , editor , _ proceedings of fossacs 2014 _ , volume 8412 of _ lecture notes in computer science _ , pages 381395 .",
    "springer , 2014 .",
    "j.  rot , m.m .",
    "bonsangue , and j.j.m.m .",
    "coalgebraic bisimulation - up - to . in p.",
    "van emde  boas , f.c.a .",
    "groen , g.f .",
    "italiano , j.r .",
    "nawrocki , and h.  sack , editors , _ proceedings of sofsem 2013 _ , volume 7741 of _ lecture notes in computer science _ , pages 369381 .",
    "springer , 2013 .",
    "a.  silva , f.  bonchi , m.m .",
    "bonsangue , and j.j.m.m .",
    "generalizing the powerset construction , coalgebraically . in k.",
    "lodaya and m.  mahajan , editors , _ proceedings of fsttcs 2010 _ , volume  8 of _ lipics _ , pages 272283 .",
    "schloss dagstuhl - leibniz - zentrum fuer informatik , 2010 .",
    "j.  winter , m.  bonsangue , and j.  rutten .",
    "context - free languages , coalgebraically . in a.",
    "corradini , b.  klin , and c.  cirstea , editors , _ proceedings of calco 2011 _ , volume 6859 of _ lecture notes in computer science _ , pages 359376 .",
    "springer , 2011 ."
  ],
  "abstract_text": [
    "<S> distributive laws of a monad @xmath0 over a functor @xmath1 are categorical tools for specifying algebra - coalgebra interaction . </S>",
    "<S> they proved to be important for solving systems of corecursive equations , for the specification of well - behaved structural operational semantics and , more recently , also for enhancements of the bisimulation proof method . </S>",
    "<S> if @xmath0 is a free monad , then such distributive laws correspond to simple natural transformations . </S>",
    "<S> however , when @xmath0 is not free it can be rather difficult to prove the defining axioms of a distributive law . in this paper we describe how to obtain a distributive law for a monad with an equational presentation from a distributive law for the underlying free monad . </S>",
    "<S> we apply this result to show the equivalence between two different representations of context - free languages .    </S>",
    "<S> 18bibtex lmcs </S>"
  ]
}