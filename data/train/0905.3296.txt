{
  "article_text": [
    "large software systems can be analysed as graphs so huge and intricate that can be studied using complex network theory .",
    "+ in the case of object oriented ( oo ) software systems nodes are the classes or the interfaces , and oriented edges are the various kinds of relationships between them , inheritance , composition , dependence",
    ". for oo systems there exist also some consolidated software metrics , also associated to the graph , usually computed at class level , the most used being the chidamber and kemerer ( ck ) suite of metrics @xcite .",
    "the relationship between metrics and software quality is fuzzy , and is still the subject of ongoing research .",
    "related to software quality are software bugs .",
    "several researchers analysed software evolution in order to understand the relationship between software management and bug issues .",
    "purushothaman et al .",
    "@xcite analyzed software development process to identify what are the relationships between small changes to the code and bug growth .",
    "kim et al . @xcite analyzed micro - pattern evolution in java classes to identify which of them is more bug - prone .",
    "liwerski et al .",
    "@xcite analyzed the fix - inducing changes , i.e. software updates that trigger the appearance of bugs . in their work , the revision history",
    "associated to compilation units ( cus ) was examined to understand where bugs issues are introduced during cu evolution .",
    "compilation units , the basic blocks examined in this paper , are files containing one or more classes , for which it is possible to compute software metrics similar to those used for classes .    a complete analysis of the relationships between graph properties of large software systems , statistic of software metrics , and the introduction and distribution of bugs in such graphs is , to our knowledge , completely missing .",
    "zimmerman et al . considered a network analysis on dependences graphs , built on binary files @xcite , and how dependencies correlate with , and predict , defects .",
    "andersson et al .",
    "@xcite discussed the pareto distribution of bugs in classes , without entering into the details of the statistical properties of software which determine such distribution .",
    "zhang found that the bug distribution across compilation packages in eclipse java system seems to follow a weibull distribution @xcite .",
    "+ the aim of this paper is study oo systems using complex network theory , to improve the knowledge of bugs causes and to statistically determine their distribution into the system . we extend the definitions of ck software metrics to cus to understand the evolution of faultness , i.e. how a metric variation affects the number of bugs hitting a cu . a deeper understanding of the dynamics of software development could be useful for software engineers to identify which system components will be more prone to bugs , thus focusing testing and code reviews on these components .",
    "+ we also study the time evolution of software systems and of the related graphs and metrics , analysing both the source code and the bugs of various releases of two large java systems , eclipse @xcite and netbeans @xcite . for each release we computed the associated software graph and the ck metrics for each class .",
    "furthermore , we study the number of defects associated to cus , as found in the bug - tracking system used for development .",
    "we computed the correlation between oo metrics and bugs and analyzed the evolution of these metrics between one release and the next , correlating metrics changes with the number of defects .",
    "we present a scheme of classification of cus into categories which allows us to identify which parts of the software are the most fault - prone , and how these are correlated to ck software metrics",
    ". we support our findings with significance tests .",
    "we analyze the source code of object - oriented systems written in java . both use cvs as version control system .",
    "eclipse uses bugzilla as issue tracker system , while netbeans uses issuezilla .",
    "the cvs keeps track of the source code history , bugzilla and issuezilla keep track of the bugs history .",
    "an oriented graph is associated to oo software systems , where the nodes are the classes and the interfaces , and the edges are the relationships between classes , namely inheritance , composition and dependence .",
    "+ the number and orientation of edges allow to study the coupling between nodes . in this graph",
    "the in - degree of a class is the number of edges directed toward the class , and measures how much this class is used by other classes of the system .",
    "the out - degree of a class is the number of edges leaving the class , and represents the level of usage the class makes of other classes in the system . in this context ck suite",
    "is a common metrics employed in classes analysis .",
    "we calculated for each node the values of the four most relevant ck metrics of the associated class :    * weighted methods per class ( wmc ) . a weighted sum of all the methods defined in a class .",
    "we set the weighting factor to one to simplify our analysis . * coupling between objects ( cbo ) .",
    "the counting of the number of classes which a given class is coupled to .",
    "* response for a class ( rfc ) .",
    "the sum of the number of methods defined in the class , and the cardinality of the set of methods called by them and belonging to external classes . * lack of cohesion of methods ( lcom ) .",
    "the difference between the number of non cohesive method pairs and the number of cohesive pairs .",
    "we also computed the lines of code of the class ( loc ) , excluding blanks and comment lines .",
    "this is useful to keep track of cu dimension because it is known that a `` long '' class is more difficult to menage than a short class .",
    "every system class resides inside a java file , called cu .",
    "while most files include just one class , there are files including more than one class . in eclipse 10% of cus host more than one class , whereas in netbeans this percentage is 30% . in commit messages issues and issue",
    "fixing always refer to cus . to make consistent issue tracking with source code",
    ", we decided to extend ck metrics from classes to cus .",
    "cus represent therefore the main element of our study .",
    "so , we defined a cu graph whose nodes are the cus of the system .",
    "two nodes are connected with a directed edge if at least one class inside the cu associated with the first node has a dependency relationship with one class inside the cu associated with the second node .",
    "we refer to this graph for computing in - links and out - links of a cu - node .",
    "we reinterpreted ck metrics onto this cu - graph :    * cu locs is the sum of the locs of classes contained in the cu ; * cu cbo is the number of out - links of each node , excluding those representing inheritance .",
    "this definition is consistent with that of cbo metrics for classes ; * cu lcom and cu wmc are the sum of lcom and wmc metrics of the classes contained in the cu , respectively ; * cu rfc is the sum of weighted out - links of each node , each out - link being multiplied by the number of specific distinct relationships between classes belonging to the cus connected to the related edge .    for each cu",
    "we have thus a set of 6 metrics : in - links , out - links , cu - locs , cu - lcom , cu - wmc , cu - rfc and cu - cbo .",
    "this was made for all versions of eclipse and netbeans .      onto the cu graph",
    "we look for nodes hit by issues .",
    "to obtain this information it is necessary to check the cvs log file , and the data contained in the its .",
    "+ we consider a cu as affected by an issue when it is modified for issue fixing .",
    "developers record on the cvs log all fixing activities .",
    "all commit operations are tracked in the cvs log as single entries .",
    "each entry contains various data , among which the date , the developer who made the changes , an annotation referring to the reasons of the commit , and the list of cus interested by the commit . in case of commits associated to an issue fixing activity ,",
    "this is written in the annotation , though not in a standardized way .",
    "it is not simple to obtain a correct mapping between issue(s ) and the related cu(s ) @xcite @xcite .    in our approach",
    ", we first analyzed the cvs log , to locate commit messages associated to fixing activities .",
    "then , the extracted data are matched with information found in the its .",
    "each issue is identified by a whole positive number ( i d ) . in commit messages it can appear a string such as",
    "`` fixed 141181 '' or `` bug # 141181 '' , but sometimes only the i d is reported .",
    "every positive integer number is a potential issue . to discern among issues and simple numbers we applied the following strategies :    1 .",
    "we considered only positive integer numbers present in the issue tracker as valid issue ids related to the same release ; 2 .",
    "we did not consider some numeric intervals particularly prone to be a false positive issue i d .",
    "the latter condition is not particularly restrictive in our study , because we do not consider the first releases of the studied projects , where issues with `` low '' i d appear .",
    "+ all ids not filtered out are considered issues and associated to the addition or modification of one ore more cus , as reported in the commit logs .",
    "the total number of issues hitting a cu in each release constitutes the issue metric we consider in this study .",
    "note that an issue reported in an issue management system has a broad sense .",
    "it may denote an error in the code , but also an enhancement of the system , or a features request , or fixing a requirement error .",
    "moreover , when many cus are affected by a single bug , it is possible that some of them are modified not because they have the issue , but as a side - effect of modifications made in other cus .",
    "the subjects of our study were eclipse and netbeans projects , both open source , object oriented , java based systems .",
    "table [ tabella3.0.1 ] and [ tabella3.0.2 ] show the number of cus involved in the main releases of eclipse and netbeans , respectively .",
    "+    [ tabella3.0.1 ]    .number of cus of eclipse for each main release [ cols=\"<,^,^,^,^,^\",options=\"header \" , ]     all data in tables [ tabella3.2.8 ] and [ tabella3.2.9 ] , show positive correlations .",
    "correlation values are quite similar for the same pair of subsequent releases , whereas they show larger fluctuations for different metrics .",
    "a comparison of tables [ tabella3.2.8 ] and [ tabella3.2.9 ] shows that correlation values in netbeans are often lower than in eclipse .",
    "this result can be partially due to the less clear subdivision between main and patching releases in netbeans project . + according to tables [ tabella3.2.3 ] , [ tabella3.2.6 ] , [ tabella3.2.8 ] and [ tabella3.2.9 ] , bug introduction is mainly due to updating and adding cus .",
    "this is valid for each metric considered .",
    "a statistical description of large software systems as directed graphs can provide much additional information on the system features with respect to more traditional approaches , from the software engineering perspective . adopting a graph as a model for the software system , we used the compilation units as the basic software module in order to build a software graph , and redefined the ck suite of metrics to cope with cus .",
    "these metrics were then used to investigate , with a statistical analysis , how and where bugs were introduced into two big , oo software projects like eclipse and netbeans .",
    "we wrote two different parsers to analyze the cvs log file and the issue tracker repositories in order to automatically associate bugs and cus . in this paper , we introduced the concept of compilation unit graph , and of oo metrics related to compilation units , with the purpose of analyzing software projects managed using a configuration management system and a corresponding bug tracking system . + the picture of the software system as a graph allowed us to detect fat - tail distributions , well described by power - laws , for different features of the system , suggesting the same general underlying framework of many other complex networks .",
    "in particular , we found that bugs distribution among cus , number of cus affected by bugs , metrics distributions ( namely locs , number of in - links and out - links of the class graph , ck metrics wmc , cbo , rfc and lcom ) , all exhibit power - laws fat - tails .",
    "+ inside this framework it is possible to identify strong correlations among bugs and those metrics related to the number of external dependencies which , in the graph representation , are easily described as directed links . all these findings together indicate a possible strategy to optimize resources and efforts in software engineering for finding , forecasting , and fixing software defects . once the software graph reveals the fat - tail in the relationships between bug and cus , one may identify which parts of the software are the most fault - prone and focus fixing efforts on them .",
    "following @xcite , if one ranks cus according to these power - laws , the review of a small fraction among the highest ranked may have an exponential impact on the overall amount of software defects detectable and fixable .",
    "+ our analysis goes one step further , examining software evolution across many releases .",
    "this study identifies how metric evolution is related to bug introduction .",
    "the change of some particular metrics may result in a higher probability of introducing a bug .",
    "in particular , we identify different families of cus , related to ck metrics , showing different robustness with respect to bug affection .",
    "our categorization into families is related to the software evolution and it is useful to investigate correlations among bugs and software metrics changes .",
    "this classification may be particularly useful to software engineers in order to decide onto which parts of a big software project it is better to concentrate efforts and resources .",
    "99 chidamber s. r , darcy d. p , kemerer c.f , _ managerial use of metrics for object oriented software : an exploratory analysis _ , ieee trans .",
    "software eng . ,",
    "vol 24 , no . 8 , pp .",
    "629 - 639 , 1998 .",
    "purushothaman r , dewayne e.p .",
    "_ toward understanding the rhetoric of small source code changes _ , ieee trans.software eng . , vol . 31 , no . 6 , june 2005 kim s. , pan k. , whitehead e.j.jr . _ micro pattern evolution _",
    "( msr06 ) , may 22 - 23 , 2006 , shanghai , china .",
    "liwerski j , zimmermann t , zeller a. _ when do changes induce fixes?_. proc .",
    "international workshop on mining software repositories ( msr05 ) , st .",
    "louis , missouri , u.s .",
    ", may 2005 .",
    "zimmermann t , nagappan n. _ predicting defects using network analysis on dependency graphs _ , icse08 , may 10 - 18 , 2008,leipzig , germany .",
    "andersson c , runeson p. _ a replicated quantitative analysis of fault distributions in complex software systems _ , ieee trans.software eng .",
    "5 , may 2007 , pp . 273 - 286 .",
    "zhang h. _ on the distribution of software faults _ , ieee trans.software eng .",
    "2 , march / april 2008 , pp .",
    "301 - 302 .",
    "fischer m , pinzger m , gall h. _ analyzing and relating bug report data for feature tracking_. in proc .",
    "10th working conference on reverse engineering ( wcre03 ) , victoria , british columbia , canada , nov .",
    "concas g , marchesi m , pinna s , serra n. _ power - laws in a large object - oriented software system_. ieee trans.software eng .",
    "33 , no . 10",
    "687 - 708 , 2007 .",
    "juran j.m , gryna f.m .",
    "jr . _ quality control handbook _",
    ", fourth ed .",
    "mcgraw - hill , 1988 .",
    "barabasi a , albert r. _ emergence of scaling in random networks_. science , vol .",
    "509 - 512 , 1999 .",
    "louridas p , spinellis d , vlachos v. _ power laws in software _",
    ", acm transactions on software engineering and methodology , vol . 18 , no.1 , september 2008 .",
    "newman m. e. j. _ power laws , pareto distributions and zipf s law _ , contemporary physics , vol .",
    "323 - 351 , 2005 ."
  ],
  "abstract_text": [
    "<S> we introduced a new approach to describe java software as graph , where nodes represent a java file - called compilation unit ( cu ) - and an edges represent a relations between them . </S>",
    "<S> the software system is characterized by the degree distribution of the graph properties , like in - or - out links , as well as by the distribution of chidamber and kemerer metrics computed on its cus . </S>",
    "<S> every cu can be related to one or more bugs during its life . </S>",
    "<S> we find a relationship among the software system and the bugs hitting its nodes . </S>",
    "<S> we found that the distribution of some metrics , and the number of bugs per cu , exhibit a power - law behavior in their tails , as well as the number of cus influenced by a specific bug . </S>",
    "<S> we examine the evolution of software metrics across different releases to understand how relationships among cus metrics and cus faultness change with time .    </S>",
    "<S> an analysis of bug distribution in object oriented systems </S>"
  ]
}