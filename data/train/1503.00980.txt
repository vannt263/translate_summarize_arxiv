{
  "article_text": [
    "given a weighted complete graph @xmath4 , where @xmath0 is the set of @xmath1 vertices , @xmath5 is the set of @xmath6 edges , and @xmath7 represents the set of edge weights @xmath8 ( @xmath9 ) , the generic equitable dispersion problem consists in selecting a subset @xmath3 from @xmath0 such that some objective function @xmath10 defined on the subgraph induced by @xmath3 is optimized @xcite . in the related literature , a vertex @xmath11 is also called an element , and the edge weight @xmath12 is called the distance ( or diversity ) between elements @xmath13 and @xmath14 .    according to the objective function to be optimized as well as the constraints on the cardinality of subset @xmath3 , several specific equitable dispersion problem can be defined . at first ,",
    "if the cardinality of @xmath3 is fixed to a given number @xmath15 , the related equitable dispersion problems include the following four classic variants : ( 1 ) the max - sum diversity problem , also known as the maximum diversity problem ( mdp ) , which is to maximize the sum of distances among the selected elements @xcite ; ( 2 ) the max - min diversity problem that aims to maximize the minimum distance among the selected elements @xcite ; ( 3 ) the maximum minsum dispersion problem ( maxminsumdp ) that aims to maximize the minimum aggregate dispersion among the selected elements @xcite ; ( 4 ) the minimum differential dispersion problem ( mindiffdp ) whose goal is to minimize the difference between the maximum and minimum aggregate dispersion among the selected elements to guarantee that each selected element has the approximately same total distance from the other selected elements @xcite .",
    "in addition , when the cardinality of subset @xmath3 is not fixed , i.e. , the size of @xmath3 is allowed to vary from 2 to @xmath1 , the related equitable dispersion problems include the max - mean dispersion problem ( maxmeandp ) and the weighted maxmeandp @xcite .    in this study , we focus on maxmeandp which can be described as follows @xcite . given a set @xmath0 of @xmath1 elements and a distance matrix @xmath16 where @xmath8 represents the distance between elements @xmath13 and @xmath14 and can take a positive or negative value , the max - mean dispersion problem consists in selecting a subset @xmath3 ( @xmath17 is not fixed ) from @xmath0 such that the mean dispersion among the selected elements , i.e. , @xmath18 , is maximized .",
    "maxmeandp can be naturally expressed as a quadratic integer program with binary variables @xmath19 that takes 1 if element @xmath13 is selected and 0 otherwise @xcite , i.e. , @xmath20 @xmath21 @xmath22 where the constraint ( [ size constraint ] ) guarantees that at least two elements are selected .",
    "in addition to its theoretical signification as a strongly np - hard problem @xcite , maxmeandp is notable for its ability to model a variety of real - world applications , such as web pages ranks @xcite , community mining @xcite , and others mentioned in @xcite .    given the interest of maxmeandp , several useful solution approaches have been proposed in the literature to deal with this hard combinatorial optimization problem .",
    "first of all , prokopyev et al . presented a mixed - integer 0 - 1 linear programming formulation and solved small instances with up to 100 elements with the cplex solver @xcite .",
    "in the same work , they also introduced a grasp method and made a comparison between the grasp method and the milp method to show the superiority of grasp .",
    "subsequently , mart and sandoya proposed a grasp with the path relinking method ( grasp - pr ) @xcite , and the computational results show that grasp - pr outperforms the previously reported methods .",
    "very recently , della et al . reported a hybrid heuristic approach based on a quadratic knapsack formulation @xcite , and their computational experiment shows that the hybrid approach is superior to the grasp - pr method . in another very recent work , carrasco et al .",
    "proposed a diversified tabu search algorithm by combining a short - term tabu search procedure and a long - term tabu search procedure @xcite , and the computational results show that this algorithm clearly dominates the previous grasp - pr method .    in this paper",
    ", we propose the first population - based memetic algorithm for solving maxmeandp ( called mammdp ) .",
    "the proposed algorithm combines a random crossover operator to generate new offspring solutions and a tabu search method to find good local optima .",
    "the performance of our algorithm is assessed on a set of 160 benchmark instances ( @xmath23 ) commonly used in the literature and a set of additional 40 large - sized instances that we generate ( @xmath24 ) . for the first set of existing benchmarks ,",
    "the experimental results show that the proposed algorithm is able to attain , in a short or very short computing time , all current best known results established by any existing algorithms , except for one instance .",
    "furthermore , it can even improve the previous best known result for a number of these instances .",
    "the effectiveness of the proposed algorithm is also verified on much larger instances of the second set with 3000 and 5000 elements .",
    "the remaining part of the paper is organized as follows . in section [ method ] , we describe in detail the general scheme and the ingredients of the proposed algorithm . in section [ results ] , we present the computational results based on the 200 benchmark instances and compare them with those of the existing state - of - the - art algorithms from the literature . in section [ discussion ] , some important ingredients of the proposed algorithm are analyzed and discussed . finally , we conclude the paper in the last section .",
    "memetic search is a well - known metaheuristic framework which aims to provide the search with a desirable trade - off between intensification and diversification through the combined use of a crossover operator ( to generate new promising solutions ) and a local optimization procedure ( to locally improve the generated solutions ) @xcite .",
    "the proposed memetic algorithm ( denoted by mammdp ) adopts the principles and guidelines of designing effective ma for discrete combinatorial problems @xcite .",
    "indeed , the overall performance of a memetic algorithm depends largely on the implementation of these two key components that need to be carefully designed according to the specific problem structure .",
    "additionally , the proposed mammdp algorithm uses a population scheme which borrows from the path relinking method @xcite to ensure a strong intensification search .",
    "the general procedure of our mammdp algorithm is shown in algorithm [ algo_ma_maxmeandp ] , where @xmath25 and @xmath26 respectively represent the best solution found so far and the worst solution in the population in terms of the objective value , and @xmath27 is the set of solution pairs @xmath28 , which is initially composed of all the possible solution pairs @xmath28 in the population and is dynamically updated as the search progresses .",
    "our mammdp algorithm starts with an initial population @xmath29 ( line 4 ) which includes @xmath30 different solutions , where each of them is randomly generated and then improved by the tabu search procedure .",
    "after the initialization of population ( section [ subsec_initialization_population ] ) , the algorithm enters a while loop ( lines 11 to 25 ) to make a number of generations . at each generation , a solution pair @xmath31 is randomly selected from @xmath27 and then the crossover operator ( line 14 ) is applied to the selected solution pair @xmath31 to generate a new solution @xmath32 ( section [ subset_crossover ] ) .",
    "subsequently , @xmath32 is improved by the tabu search procedure ( line 15 ) ( section [ subsec_ls ] ) .",
    "after that , a population updating rule is used to update the population ( lines 20 to 24 ) ( section [ subsec_pool_updating ] ) .",
    "meanwhile , the @xmath27 is accordingly updated as follows : first , the solution pair @xmath28 is removed from @xmath27 ( line 13 ) ; then , if an offspring solution @xmath32 replaces the worst solution @xmath26 in the population , all the solution pairs containing @xmath26 are removed from @xmath27 and all the solution pairs that can be generated by combining @xmath32 with other solutions in the population are added into @xmath27 ( lines 23 to 24 ) . the while loop ends",
    "when @xmath27 becomes empty , then the population is recreated , while preserving the best solution ( @xmath33 ) found so for in the new population ( lines 4 to 8) , and the above while loop is repeated if the timeout limit is not reached .",
    "it is worth noting that compared with the traditional random selection scheme , the proposed mammdp algorithm uses the set @xmath27 to contain the solution pairs of the population for crossover operations .",
    "this strategy ensures that every pair of solutions in the population is combined exactly once , favoring an more intensified search .",
    "* input * : the set @xmath34 of @xmath1 elements and the distance matrix @xmath35_{n \\times n}$ ] , the population size @xmath30 , the timeout limit @xmath36 . * output * : the best solution @xmath33 found @xmath37 @xmath38 population_initialization(@xmath0 )  /@xmath39 section [ subsec_initialization_population ] @xmath39/",
    "@xmath40 @xmath41 @xmath42  /@xmath39 @xmath33 keeps the best solution found @xmath39/ @xmath43 randomly pick a solution pair @xmath44 @xmath45 @xmath46  /@xmath39 section [ subset_crossover ] @xmath39/ @xmath32 @xmath38 @xmath47  /@xmath39 section [ subsec_ls ] @xmath39/ @xmath48 @xmath40 @xmath49 @xmath50 @xmath51  /@xmath39 section [ subsec_pool_updating ] @xmath39/      given a maxmeandp instance denoted by a set @xmath0 of @xmath1 elements as well as its distance matrix @xmath52_{n \\times n}$ ] , the search space @xmath53 explored by our mammdp algorithm is composed of all possible subsets of @xmath0 , i.e , @xmath54 . formally , a subset @xmath3 of @xmath0 can be expressed by a @xmath1-dimensional binary vector , @xmath55 , where @xmath19 takes 1 if element @xmath13 belongs to @xmath3 , and 0 otherwise . in other words ,",
    "the search space @xmath53 is composed of all possible @xmath1-dimensional binary vectors , i.e. ,    @xmath56    clearly , the size of the search space @xmath53 is bounded by @xmath57 .    for any candidate solution @xmath58 ,",
    "its quality is given by the objective value ( @xmath59 , formula ( [ fmax ] ) ) of the max - mean dispersion problem .      in our memetic algorithm ,",
    "the initial population of @xmath30 solutions is generated as follows .",
    "first , we generate @xmath30 random solutions , where each component @xmath19 ( @xmath60 ) of a solution @xmath61 is randomly assigned a value from @xmath62 using a uniform probability distribution .",
    "then , the tabu search method ( see section [ subsec_ls ] ) is applied to each of the generated solutions to optimize them to a local optimum solution , and the resulting solutions are used to form the initial population .",
    "local optimization is a key component of a memetic algorithm and ensures generally the role of an intensified search to locate high quality local optimum . in this study",
    ", we devise a tabu search ( ts ) method as the local optimization procedure which proves to be highly effective when when it is applied alone .    given a neighborhood structure ( @xmath63 ) and a starting solution ( @xmath64 ) , our tabu search procedure iteratively replaces the incumbent solution @xmath65 by a best eligible neighboring solution ( @xmath66 ) until the stopping condition is met , i.e. , the best solution ( @xmath67 ) is not improved for @xmath68 consecutive iterations ( called the depth of ts ) . at each iteration of ts ,",
    "the performed move is recorded in the tabu list to prevent the reverse move from being performed for the next @xmath69 iterations . here",
    ", @xmath69 is called the tabu tenure and controlled by a special tabu list management strategy .",
    "note that in this tabu search method a move is identified to be eligible if it is not forbidden by the tabu list or it leads to a solution better than the best solution found so far in terms of the objective function value ( aspiration criterion ) .",
    "the general scheme of our ts method is described in algorithm [ algo_ts ] , and the neighborhood structure employed by our ts method and the tabu list management strategy are described in the following subsections .",
    "* input * : input solution @xmath64 , neighborhood @xmath63 , search depth @xmath68 * output * : the best solution @xmath67 found during the tabu search process @xmath70 / * @xmath65 is the current solution * / @xmath71 / * @xmath67 is the best solution found so far * / @xmath72  / * @xmath73 counts the consecutive iterations where @xmath67 is not updated * / choose a best eligible neighboring solution @xmath74 @xmath75 update tabu list @xmath71 , @xmath72",
    "@xmath76 @xmath67      the neighborhood @xmath77 of our tabu search algorithm is defined by the one - flip move operator which consists of changing the value of a single variable @xmath19 to its complementary vale @xmath78 . as such ,",
    "given a solution @xmath65 , the one - flip neighborhood @xmath79 of @xmath65 is composed of all possible solutions that can be obtained by applying the one - flip move to @xmath65 .",
    "the size of the neighborhood @xmath79 is thus bounded by @xmath80 , where @xmath1 is the number of components in @xmath65 .      in our ts method , we employ a fast neighborhood evaluation technique to examine the neighborhood @xmath77 . for this purpose ,",
    "we maintain a @xmath1-dimensional vector @xmath81 to effectively calculate the move value ( i.e. , the change of objective value ) of each possible move applicable to the current solution , where the entry @xmath82 represents the sum of distances between the element @xmath13 and the selected elements for the current solution , i.e. , @xmath83 , where @xmath3 is the set of selected elements .",
    "given the current solution @xmath65 , if an one - flip move is performed , i.e. , a variable @xmath19 is flipped as @xmath84 , then the move value @xmath85 can be rapidly computed as follows :    _ i = + , & for @xmath86 ; + - , & for @xmath87 ;    where @xmath59 is the objective value of the current solution @xmath65 and @xmath17 is the number of selected elements in @xmath65 .",
    "subsequently , the vector @xmath88 is accordingly updated as :    p_j= p_j + d_ij , & for @xmath89 ; + p_j - d_ij , & for @xmath90 ; + p_j , & for @xmath91 ;    note that the vector @xmath88 is initialized at the beginning of each call of ts with the complexity of @xmath92 , and is updated in @xmath80 after each move .",
    "in our ts procedure , we use a tabu list management strategy to dynamically tune the tabu tenure @xmath69 , which is adapted according to a technique proposed in @xcite where the tabu tenure is given by a periodic step function . if the current iteration is @xmath93 , then the tabu tenure of a move is denoted by @xmath94 .",
    "precisely , our tabu tenure function is defined , for each period , by a sequence of values @xmath95 and a sequence of interval margins @xmath96 such that for each @xmath93 in @xmath97 $ ] , @xmath98 , where @xmath99 denotes a random integer between 0 to 2 . here",
    ", @xmath100 is fixed to 15 , @xmath101 , where @xmath102 is a parameter which represents the maximum tabu tenure .",
    "finally , the interval margins are defined by @xmath103 , @xmath104 ( @xmath105 ) .",
    "thus , this function varies periodically and for each period , 15 tabu tenures are used dynamically , each being kept for a number of consecutive iterations . in principle , this function helps the tabu search procedure reach a desirable tradeoff between intensification and diversification during its search .      * input * : two parent solutions @xmath106 and @xmath107 .",
    "* output * : offspring solution @xmath108 + @xmath109 @xmath38 @xmath110  / * rand[0,1 ) denotes a random number between 0 and 1 * / @xmath111 @xmath112 @xmath108    * input * : two parent solutions @xmath113 and @xmath114 , and their subsets of selected elements are respectively denoted by @xmath115 and @xmath116 * output * : offspring solution @xmath117 whose subset of selected elements is denoted by @xmath118 + @xmath119  / * determine approximately the size of the set @xmath118 * / + /*generate a partial solution by preserving the common elements of @xmath115 and @xmath116 * / @xmath120 @xmath121 , @xmath122 @xmath123 + / * @xmath124 represents the move value of adding element @xmath125 to @xmath118 * / @xmath126 , @xmath127 @xmath128 @xmath129 , @xmath130 @xmath117(i.e.,@xmath118 )    in a memetic algorithm , the crossover operator is another essential ingredient whose main goal is to bring the search process to new promising search regions to diversify the search . in this work ,",
    "we investigate two crossover operators for maxmeandp ; the first one is the standard uniform crossover ( denoted by uc ) operator , and the other is a specific greedy crossover ( denoted by gc ) operator .",
    "uc is very simple and is described in algorithm [ algo_random_crossover ] .",
    "given two parent solutions @xmath106 and @xmath107 , the value of each component @xmath131 ( @xmath60 ) of the offspring solution @xmath117 is randomly chosen from the set @xmath132 with the same probability of 0.5 . in spite of its simplicity , uc has shown to be quite robust and effective in many settings .    the dedicated gc operator is shown in algorithm [ algo_greedy_crossover ] .",
    "given two parent solutions @xmath113 and @xmath114 whose subsets of selected elements are respectively represented by @xmath115 and @xmath116 , we first estimate the size of the set @xmath118 of selected elements for the offspring solution @xmath117 such that the hamming distances of @xmath117 to @xmath113 as well as @xmath114 are approximately the same , i.e. , @xmath133",
    ". then a partial solution is generated by preserving the common elements of @xmath115 and @xmath116 , i.e. , @xmath134 .",
    "after that , we complete the offspring solution @xmath117 in a step by step way by choosing in turn a best element from @xmath135 or @xmath136 and adding it to @xmath118 .",
    "more specifically , we first choose an element ( @xmath137 ) that yields the largest move value from @xmath138 and add it to @xmath118 , then we choose another element ( @xmath139 ) that yields the largest move value from @xmath140 and add it to @xmath118 .",
    "we repeat these two steps until the size of @xmath118 reaches @xmath15 .    intuitively , uc is more disruptive than gc and thus is suitable for the purpose of diversifying the search .",
    "on the other hand , gc is more conservative and computationally more expensive .",
    "based on the computational outcomes presented in section [ comparison_co ] , we adopt in this study the uc operator as the main crossover operator of our memetic algorithm , while using gc as a reference operator for our analysis on crossovers .",
    "when a new offspring solution is generated by the crossover operator , it is first improved the tabu search procedure and then used to update the population according to the following rule .",
    "if the offspring solution is distinct from any existing solution in the population and is better than the worst solution in the population in terms of objective value , then the offspring solution replaces the worst solution of the population . otherwise , the population is kept unchanged .",
    "in this section , we run extensive computational experiments to assess the performance of our memetic algorithm based on a large number of maxmeandp benchmark instances .",
    "our computational experiments are carried out on two types of instances , namely type i and type ii .",
    "the distances of type i instances are randomly generated in the interval @xmath141 $ ] with a uniform probability distribution , while the distances of type ii instances are generated from @xmath142 \\cup [ 5,10]$ ] with the same probability distribution .",
    "additionally , the set of benchmark instances used in our experiments is composed of two subsets .",
    "the first subset consists of 80 type i instances and 80 type ii instances with the number of elements @xmath1 ranging from 20 to 1000 .",
    "these 160 instances were extensively adopted by the previous studies @xcite and are available online at http://www.optsicom.es .",
    "the second subset consists of 20 type i and 20 type ii large instances with @xmath143 or 5000 .",
    "the source code of the generator used to obtain these 40 large instances will be available .",
    "our memetic algorithm relies on only three parameters : the population size @xmath30 , the depth of tabu search @xmath68 and the maximum tabu tenure @xmath102 . for @xmath30 and @xmath68",
    ", we follow @xcite and set @xmath144 while setting @xmath145 empirically .",
    "this parameter setting is used for all the experiments reported in the paper . even if fine - tuning these parameters would lead to better results , as we show below",
    ", our algorithm with this fixed setting is able to attain a high performance with respect to the state of the art results .",
    "our memetic algorithm is programmed in c++ and compiled using g++ compiler with the -o2 flag .",
    "all experiments are carried out on a computer with an intel xeon e5440 processor ( 2.83 ghz cpu and 2 gb ram ) , running the linux operating system . following the dimacs machine benchmark procedure ,",
    "our machine requires respectively 0.23 , 1.42 , and 5.42 seconds for the graphs r300.5 , r400.5 , r500.5 .",
    "given the stochastic nature of our algorithm , we solve each tested problem instance 20 times , where the stopping condition is given by a cutoff time limit which depends on the size of the instances .",
    "specifically , the cutoff limit @xmath36 is set to be 10 seconds for @xmath146 , 100 seconds for @xmath147 $ ] , 1000 seconds for @xmath143 , and 2000 seconds for @xmath148 . as we discuss in section [ resutls_small_instances ] , these time limits are significantly shorter than those used by the reference algorithms of the literature .",
    ".computational results of the proposed mammdp algorithm on the set of 60 representative instances with @xmath149 .",
    "each instance is independently solved 20 times , and improved results are indicated in bold compared to the previous best known results @xmath150 of the literature reported in @xcite . [ cols= \" < , < , < , < , < , < , < , < , < \" , ]"
  ],
  "abstract_text": [
    "<S> given a set @xmath0 of @xmath1 elements and a distance matrix @xmath2_{n\\times n}$ ] among elements , the max - mean dispersion problem ( maxmeandp ) consists in selecting a subset @xmath3 from @xmath0 such that the mean dispersion ( or distance ) among the selected elements is maximized . </S>",
    "<S> being a useful model to formulate several relevant applications , maxmeandp is known to be np - hard and thus computationally difficult . in this paper </S>",
    "<S> , we present a highly effective memetic algorithm for maxmeandp which relies on solution recombination and local optimization to find high quality solutions . </S>",
    "<S> computational experiments on the set of 160 benchmark instances with up to 1000 elements commonly used in the literature show that the proposed algorithm improves or matches the published best known results for all instances in a short computing time , with only one exception , while achieving a high success rate of 100% . in particular , we improve 59 previous best results out of the 60 most challenging instances . results on a set of 40 new large instances with 3000 and 5000 elements are also presented . </S>",
    "<S> the key ingredients of the proposed algorithm are investigated to shed light on how they affect the performance of the algorithm .    </S>",
    "<S> _ keywords _ : dispersion problem ; memetic algorithm ; tabu search ; heuristics . </S>"
  ]
}