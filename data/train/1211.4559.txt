{
  "article_text": [
    "geometric pattern matching and recognition has many applications in geographic information systems , computer aided design , molecular biology , computer vision , traffic control , medical imaging etc .",
    "usually these patterns consist of line segments and polygonal curves .",
    "frchet metric is one of the most popular ways to measure the similarity of two curves .",
    "an intuitive way to illustrate the frchet distance is as follows .",
    "imagine a person walking his / her dog , where the person and the dog , each travels a pre - specified curve , from beginning to the end , without ever letting go off the leash or backtracking .",
    "the frchet distance between the two curves is the minimal length of a leash which is necessary .",
    "the leash length determines how similar the two curves are to each other : a short leash means the curves are similar , and a long leash means that the curves are different from each other .",
    "two problem instances naturally arise : decision and optimization . in the _ decision problem _ , one wants to decide whether two polygonal curves @xmath0 and @xmath3 are within @xmath4 frchet distance to each other , i.e. , if a leash of given length @xmath4 suffices . in the _ optimization problem _ , one wants to determine the minimum such @xmath4 . in  @xcite , alt and",
    "godau gave an @xmath5 algorithm for the decision problem , where @xmath6 is the total number of segments in the curves .",
    "they also solved the corresponding optimization problem in @xmath7 time .    in this paper , we address the following variant of the frchet distance problem . consider a point set @xmath8 and a polygonal curve @xmath0 in @xmath9 , for @xmath10 being a fixed dimension .",
    "the objective is to decide whether there exists a polygonal curve @xmath3 within an @xmath4-frchet distance to @xmath0 such that the vertices of @xmath3 are all chosen from the pointset @xmath1 .",
    "curve @xmath3 has to visit every point of @xmath1 and it can reuse points . we show that this problem is np - complete .",
    "we then present a polynomial time decision algorithm for a special case of the problem where the input curve @xmath0 is a convex polygon .",
    "this paper is organized as follows : in section [ sec : npcomp ] , we establish our np - complete proof for the general case of the problem . in section",
    "[ sec : specialcase ] , we investigate the special case of the problem .",
    "finally , we conclude in section [ sec : conc ] with some open problems .",
    "given two curves @xmath11 \\rightarrow { \\ensuremath{\\mathbb{r}}}^d$ ] , the _ frchet distance _ between @xmath12 and @xmath13 is defined as @xmath14 } \\| \\alpha(\\sigma(t ) ) , \\beta(\\tau(t ) ) \\| , $ ] where @xmath15 and @xmath16 range over all strictly monotone increasing continuous functions .",
    "the following two observations are immediate .",
    "[ obs : concat ] let @xmath21 , @xmath22 , @xmath23 , and @xmath24 be four curves such that @xmath25 and @xmath26 .",
    "if the ending point of @xmath21 ( resp . , @xmath23 ) , is the same as the starting point of @xmath22 ( resp . , @xmath24 ) , then @xmath27 , where @xmath28 denotes the concatenation of two curves .",
    "we denote by @xmath29 , a polygonal curve @xmath0 with vertices @xmath30 in order and by @xmath31 and @xmath32 , we denote the starting and ending point of @xmath0 , respectively . for a curve @xmath0 and a point @xmath33 , by @xmath34 , we mean connecting @xmath32 to point @xmath33 ( we use the same notation @xmath35 to show the concatenation of two curves @xmath0 and @xmath3 ) .",
    "let @xmath36 denote the midpoint of the line segment @xmath37 .",
    "for a point @xmath38 in the plane , let @xmath39 and @xmath40 denote the @xmath33 and @xmath41 coordinate of @xmath38 , respectively .    for two line segments",
    "@xmath37 and @xmath42 , with @xmath43 , we denote the intersection point of them .",
    "also , for a point @xmath44 and a line segment @xmath45 , @xmath46 denotes the point on @xmath45 located on the perpendicular from @xmath44 to @xmath45 .",
    "also , @xmath47 denotes the distance between @xmath44 and segment @xmath45 .",
    "we show that the problem of deciding whether a feasible curve exists or not is np - complete .",
    "it is easy to see that this problem is in np , since one can polynomially check whether @xmath52 and also @xmath54 , using the algorithm in @xcite .",
    "we reduce in algorithm  [ alg : reduction ] , an instance of 3cnf - sat formula @xmath55 to an instance of our problem .",
    "the input is a boolean formula @xmath55 with @xmath56 clauses @xmath57 and @xmath6 variables @xmath58 and the output is a pointset @xmath1 , a polygonal curve @xmath0 in the plane and a distance @xmath59 .",
    "we construct the pointset @xmath60 as follows . for each clause @xmath61 , @xmath62 , in the formula @xmath55 , we place three points @xmath63 , refereed by @xmath64 points , in the plane , which are computed in the @xmath65-th iteration of algorithm [ alg : reduction ] ( from line [ l : makesloop ] to line [ l : endlooppointset ] ) .",
    "we define @xmath66 to be @xmath67 .",
    "by @xmath68 , @xmath69 , we denote a square in the plane , centered at @xmath66 , with diagonal @xmath70 .",
    "we refer to @xmath68 , @xmath69 , as _ c - squares_. for an example of a pointset @xmath60 corresponding to a formula , see figure [ fig : pathaexample ] .",
    "our reduction algorithm constructs the polygonal curve @xmath0 through @xmath6 iterations . in the @xmath65-th iteration",
    ", @xmath71 , it builds a subcurve @xmath72 corresponding to a variable @xmath73 in the formula @xmath55 and appends that curve to @xmath0 .",
    "in addition to those @xmath6 subcurves , two curves @xmath74 and @xmath75 are appended to @xmath0 .",
    "we will later discus the reason we add those two curves to @xmath0 .",
    "every subcurve @xmath72 of @xmath0 starts at point @xmath76 and ends at point @xmath77 .",
    "furthermore , every @xmath72 goes through c - squares @xmath78 to @xmath79 in order , enters each @xmath80 from the side @xmath81 and exists that square from the side @xmath82 ( for an illustration , see figure [ fig : pathaexample ] ) .",
    "curve @xmath72 itself is built incrementally through iterations of the loop at line [ l : looptomakel ] of algorithm [ alg : reduction ] . in the @xmath83-th iteration , when @xmath72 goes through @xmath80 , three points , which are within @xmath80 , are added to @xmath72 ( these three points are computed through lines [ l : makeclausestart ] to [ l : makeclauseend ] ) .",
    "next , before @xmath72 reaches to @xmath84 , two points , denoted by @xmath85 and @xmath86 , are added to that curve ( these two points are computed in lines [ l : alpha ] and [ l : beta ] ) . since each @xmath72 corresponds to variable @xmath73 in our approach ,",
    "this is how we simulate @xmath87 or @xmath88 values of @xmath73 : consider a point object @xmath89 traversing @xmath72 , from starting point @xmath76 to ending point @xmath77 .",
    "consider another point object @xmath90 which wants to walk from @xmath76 to @xmath77 on a path whose vertices are from points in @xmath60 and it wants to stay in distance one to @xmath89 .",
    "we will show that by our construction , object @xmath90 has two options , either taking the path @xmath91 or the path @xmath92 ( see figure [ fig : pathaexample ] and [ fig : pathbexample ] for an illustration ) . choosing path @xmath93 by @xmath90 means @xmath94 and choosing path @xmath95 means @xmath96 .",
    "we first prove in lemma [ lemma : patha ] that @xmath97 and in lemma [ lemma : pathb ] that @xmath98 .",
    "furthermore , by lemma [ lemma : noswitchfromatob ] , we prove that that as soon as @xmath90 chooses the path @xmath93 at point @xmath76 to walk towards @xmath77 , it can not switch to any vertex on path @xmath95 .",
    "in addition , in lemmas [ lemma : abcanseec ] and [ lemma : notabcanseec ] , we prove that if @xmath73 appears in the clause @xmath99 , @xmath90 could visit point @xmath100 via the path @xmath93 and not @xmath95 . in contrast ,",
    "when @xmath101 appears in the clause @xmath99 , @xmath90 could visit point @xmath100 via the path @xmath95 and not @xmath93 . however , when both of @xmath73 and @xmath101 does not appear in @xmath99 , @xmath90 can not take @xmath93 or @xmath95 to visit @xmath100 .",
    "[ lemma : patha ] consider any subcurve @xmath136 , @xmath137 , which is built through lines [ l : mainstart ] to [ l : subcurve ] of algorithm [ alg : reduction ] .",
    "let @xmath93 be the polygonal curve @xmath138 .",
    "then , @xmath139 .",
    "we prove the lemma by induction on the number of segments along @xmath93 .",
    "consider two point objects @xmath89 and @xmath140 traversing @xmath72 and @xmath93 , respectively ( figure [ fig : pathaexample ] depicts an instance of @xmath72 and @xmath93 ) .",
    "we show that @xmath89 and @xmath140 can walk their respective curve , from the beginning to end , while keeping distance @xmath87 to each other .",
    "the base case of induction trivially holds as follows ( see figure [ fig : pathaclause1 ] for an illustration ) : table [ tab : basecasepatha ] lists pairwise location of @xmath89 and @xmath140 , where the distance of each pair is at most @xmath87 . hence , @xmath140 can walk from @xmath76 to @xmath141 on the first segment of @xmath93 ( segment @xmath142 ) , while keeping distance @xmath143 to @xmath89 .",
    "assume inductively that @xmath89 and @xmath140 have feasibly walked along their respective curves , until @xmath140 reached @xmath144 .",
    "then , as the induction step , we show that @xmath140 can walk to @xmath145 and then to @xmath146 , while keeping distance @xmath87 to @xmath89 .",
    "table [ tab : patha ] lists pairwise location of @xmath140 and @xmath89 such that @xmath140 could reach @xmath146 .",
    "one can easily check that the distance between pair of points in that table is at most one .",
    "( for an illustration , see figure [ fig : patha ] ) .",
    "we prove the lemma by induction on the number of edges in @xmath147 .",
    "let @xmath148 be the edges of @xmath149 , numbered after an arbitrary vertex of @xmath149 in clockwise order . obviously , to have a feasible curve , every point of @xmath1 must be located within some cylinder @xmath150 . to establish the lemma",
    ", we show that when a feasible curve exists through @xmath1 , the condition holds .",
    "imagine a point object @xmath151 which cycles @xmath147 , starting from a vertex of @xmath152 , say point @xmath76 , and ending at the same point .",
    "let @xmath153 be a point on the boundary of @xmath149 such that @xmath154 .",
    "imagine another point object @xmath155 which starts from @xmath153 , walks on the boundary of @xmath149 until it reaches the same point @xmath153 .",
    "both of the objects walk clockwise .    to handle the base case of the induction ,",
    "assume that the convex hull has an additional edge consist of only point @xmath76 . since the distance between @xmath151 and @xmath155 is less than @xmath4 at the start , the base case of the induction holds .",
    "assume inductively that @xmath151 and @xmath155 walk along their path , keeping distance @xmath4 to each other , until @xmath151 reaches to vertex @xmath77 in @xmath152 and @xmath155 reaches to point @xmath156 on the boundary of @xmath149 where @xmath157 .",
    "let @xmath158 be the next vertex on @xmath152 after @xmath77 .",
    "if @xmath158 is located within the same cylinder @xmath150 as @xmath77 , then by observation [ obs : concat ] , the lemma holds .",
    "otherwise , assume that @xmath158 is in @xmath159 , @xmath160 and @xmath161 is a point in @xmath162 where @xmath163 .",
    "consider the @xmath4-ball around each of the vertices of the polygon between points @xmath164 and @xmath161 .",
    "it suffices to show that edge @xmath165 crosses each of those balls .",
    "assume , for the sake of contradiction , that edge @xmath166 does not cross one of those balls , say the one around vertex @xmath167 .",
    "assume w.l.o.g .",
    "that all points in @xmath1 lie to the right of @xmath166 .",
    "then , two cases occur as illustrated in figure [ fig : convexhull ] : case ( a ) , where @xmath168 lies to the right of @xmath169 , which contradict the fact that the polygon is convex ; or case ( b ) , where @xmath168 lies to the left of @xmath169 , which contradicts our assumption that a feasible curve exists , because no point in @xmath1 is in @xmath4-distance to vertex @xmath167 ."
  ],
  "abstract_text": [
    "<S> given a polygonal curve @xmath0 , a pointset @xmath1 , and an @xmath2 , we study the problem of finding a polygonal curve @xmath3 whose vertices are from @xmath1 and has a frchet distance less or equal to @xmath4 to curve @xmath0 . in this problem , @xmath3 must visit every point in @xmath1 and we are allowed to reuse points of pointset in building @xmath3 . </S>",
    "<S> first , we show that this problem in np - complete . </S>",
    "<S> then , we present a polynomial time algorithm for a special cases of this problem , when @xmath0 is a convex polygon . </S>"
  ]
}