{
  "article_text": [
    "the concept of an efficient dominating set in a graph was introduced by biggs  @xcite as a generalization of the notion of a perfect error - correcting code in coding theory .",
    "given a ( simple , finite , undirected ) graph @xmath0 , we say that a vertex _ dominates _ itself and each of its neighbors . an _ efficient dominating set _ in @xmath1 is a subset of vertices @xmath2 such that every vertex @xmath3 is dominated by precisely one vertex from @xmath4 .",
    "efficient domination has several interesting applications in coding theory and resource allocation of parallel processing systems  @xcite . the notion of an efficient dominating set appeared in the literature under various other names such as : _ perfect code _ , _ @xmath5-perfect code _ , _ independent perfect dominating set _ , and _ perfect dominating set_. note , however , that the name _ perfect dominating set _ has also been used in the literature to denote a subset of vertices @xmath2 such that every vertex @xmath6 is dominated by precisely one vertex from @xmath4 .",
    "see  @xcite for a nice historical overview of the notion of efficient dominating set .",
    "a graph is _ efficiently dominatable _ if it contains an efficient dominating set .",
    "all paths are efficiently dominatable , and a cycle @xmath7 on @xmath8 vertices is efficiently dominatable if and only if @xmath8 is a multiple of @xmath9 .",
    "et al . _",
    "@xcite showed that if a graph @xmath1 has an efficient dominating set , then all efficient dominating sets of @xmath1 have the same cardinality , which equals the minimum cardinality of a dominating set of @xmath1 .",
    "the efficient domination ( ed ) problem consists in determining whether the input graph is efficiently dominatable .",
    "the ed problem is -complete even for restricted graph classes such as planar cubic graphs  @xcite , bipartite graphs  @xcite , planar bipartite graphs  @xcite , chordal bipartite graphs  @xcite , chordal graphs  @xcite , and line graphs of planar bipartite graphs of maximum degree three  @xcite . on the other hand ,",
    "the ed problem is polynomial for several graph classes , including trees  @xcite , block graphs  @xcite , interval graphs  @xcite , circular - arc graphs  @xcite , cocomparability graphs  @xcite , bipartite permutation graphs  @xcite , permutation graphs  @xcite , distance - hereditary graphs  @xcite , trapezoid graphs  @xcite , split graphs  @xcite , dually chordal graphs  @xcite , at - free graphs  @xcite , and hereditary efficiently dominatable graphs  @xcite . the efficient domination problem has also been studied from a parameterized point of view , see , e.g. ,  @xcite .    in this paper , we consider two weighted versions of the ed problem . in its decision form ,",
    "the minimization version of problems can be stated as follows :    the maximization version of problem ( maximum weight efficient dominating set ) , can be defined analogously , replacing the condition @xmath10 with @xmath11 .    clearly , a graph @xmath0 contains an efficient dominating set if and only if @xmath12 is a yes instance to the problem , where @xmath13 for all @xmath14 .",
    "consequently , the problem is -complete in every class of graphs where the ed problem is -complete . on the other hand ,",
    "the problem is solvable in polynomial time for trees  @xcite , cocomparability graphs  @xcite , split graphs  @xcite , interval graphs  @xcite , circular - arc graphs  @xcite , permutation graphs  @xcite , trapezoid graphs  @xcite , bipartite permutation graphs  @xcite , convex bipartite graphs  @xcite and their superclass interval bigraphs  @xcite , distance - hereditary graphs  @xcite , block graphs  @xcite and hereditary efficiently dominatable graphs  @xcite .",
    "since negative weights are allowed , the problem is equivalent to the problem .",
    "we develop a framework for solving the and problems based on a reduction to the maximum weight independent set problem in the square of the input graph ( this is done in section  [ sec : wed - mwis ] ) .",
    "we then apply this framework , together with some existing results from the literature , to derive new polynomial cases of the problems , namely the classes of dually chordal graphs and at - free graphs ( in sections  [ sec : dually - chordal ] and  [ sec : at - free ] , respectively ) .",
    "the class of dually chordal graphs contains the class of strongly chordal graphs , for which the existence of a polynomial - time algorithm for the problem was posed as an open problem by lu and tang in  @xcite .",
    "we give a linear - time algorithm for the and problems in the class of dually chordal graphs .",
    "our algorithm for the problem in the class of at - free graphs is of complexity @xmath15 , where @xmath16 is the matrix multiplication exponent  @xcite , and @xmath17 and @xmath18 denote the number of vertices and edges of the input graph , respectively .",
    "this improves on the existing polynomial - time algorithms for the ed problem in at - free graphs  , both of which run in time @xmath19 .    in fig .",
    "[ fig : classes ] below , we show the hasse diagram of the poset of most of the graph classes mentioned above , ordered with respect to inclusion . for each class , we state the complexity of the problem , denoting by -c the fact that the problem is -complete in the corresponding class , while in the case of polynomial - time solvability , we state the running times of the fastest known algorithms .",
    "the inclusion relations in the figure were verified with help of the information system on graph classes and their inclusions  @xcite .    , it is assumed that a graph is given by a trapezoid diagram ( in the case of trapezoid graphs ) , by a permutation ( in the case of permutation and bipartite permutation graphs ) , or by a one - vertex - extension ordering ( in the case of distance - hereditary graphs ) . ]",
    "we only consider finite , simple and undirected graphs . as usual , the _ neighborhood _ of a vertex @xmath20 in a graph @xmath21 is denoted by @xmath22 ( or simply @xmath23 , if the graph is clear from the context ) , and the closed neighborhood of @xmath20 is @xmath24:= n_g(v)\\cup \\{v\\}$ ] ( or simply @xmath25 $ ] ) .",
    "the _ degree _ of a vertex @xmath20 in a graph @xmath1 is @xmath26 .",
    "the _ square _ of a graph @xmath21 is the graph @xmath27 such that @xmath28 if and only if either @xmath29 or @xmath30 and @xmath20 are distinct and have a common neighbor in @xmath1 .",
    "the _ complement _ of a graph @xmath21 is the graph @xmath31 such that two distinct vertices @xmath30 and @xmath20 of @xmath1 are adjacent in @xmath32 if and only if they are non - adjacent in @xmath1 . an _ independent set _ in a graph is a set of pairwise non - adjacent vertices , and a _ clique _ is a set of pairwise adjacent vertices . given a graph @xmath1 and a total ordering @xmath33 of its vertex set , we will denote by @xmath34 the subgraph of @xmath1 induced by @xmath35 , and by @xmath36 ( resp .",
    "@xmath37 $ ] ) , the neighborhood ( resp . , the closed neighborhood ) of a vertex @xmath38 in @xmath34 .",
    "_ chordal graphs _ are graphs in which every cycle on at least @xmath39 vertices has a chord ( an edge connecting two non - consecutive vertices on the cycle ) .",
    "it is well known that chordal graphs are precisely the graphs that admit a perfect elimination ordering .",
    "a _ perfect elimination ordering _ of a graph @xmath1 is a total ordering @xmath40 of its vertex set such that for every @xmath41 , vertex @xmath42 is simplicial in @xmath34 , that is , the set @xmath43 is a clique in @xmath34 ( equivalently : in @xmath1 ) .",
    "_ dually chordal graphs _ were introduced in  @xcite as graphs that admit a certain vertex ordering called a maximum neighborhood ordering .",
    "given two vertices @xmath30 and @xmath20 in a graph @xmath21 , vertex @xmath44 $ ] is a _ maximum neighbor _ of vertex @xmath20 if @xmath45 \\subseteq n[u]$ ] holds for all @xmath46 $ ] .",
    "a linear ordering @xmath33 of @xmath47 is a _ maximum neighborhood ordering _ of @xmath1 if for all @xmath41 , vertex @xmath42 has a maximum neighbor in the graph @xmath34 .",
    "dually chordal graphs admit several equivalent characterizations and form a generalization of _ strongly chordal graphs _ , a well - known subclass of chordal graphs properly containing the classes of trees and interval graphs .",
    "in fact , strongly chordal graphs are exactly the hereditary dually chordal graphs , that is , graphs for which each induced subgraph is a dually chordal graph .",
    "algorithmic aspects of dually chordal graphs were treated systematically in  @xcite .",
    "a partial order may be viewed as a transitive directed acyclic graph .",
    "comparability graph _ is the graph obtained by ignoring the edge directions of a transitive directed acyclic graph .",
    "a graph is _ cocomparability _ if its complement is a comparability graph .",
    "an _ asteroidal triple _ in a graph @xmath1 is a subset @xmath48 of three pairwise non - adjacent vertices such that for every vertex @xmath49 , the two vertices in @xmath50 are contained in the same connected component of the graph @xmath51 $ ] .",
    "a graph @xmath1 is said to be _ at - free _",
    "@xcite if it contains no asteroidal triples . at -",
    "free graphs form a large class of graphs containing cographs , interval graphs , permutation graphs , trapezoid graphs , and cocomparability graphs . for further details on graph classes , see  @xcite .",
    "the decision version of the problem can be stated as follows :    this problem , together with its unweighted version , is a classical -complete problem , which remains hard even for several restricted graph classes such as triangle - free graphs  @xcite , @xmath52-free graphs @xcite and planar graphs of maximum degree at most three  @xcite . on the other hand ,",
    "the mwis problem has been shown to admit polynomial solutions in several graph classes , such as claw - free graphs  @xcite , and their generalization fork - free graphs  @xcite , perfect graphs  @xcite , and at - free graphs  @xcite .",
    "the following simple but useful observation from  @xcite establishes a connection between efficient dominating sets in a graph @xmath1 and independent sets in its square .",
    "[ lem : eds - wis ] let @xmath0 be a graph , and let @xmath53 be a vertex weight function for @xmath1 defined by @xmath54|$ ] for all @xmath14 .",
    "then , the following statements are equivalent for every @xmath55 :    1 .",
    "@xmath56 is an efficient dominating set in @xmath1 .",
    "2 .   @xmath56 is a maximum - weight independent set in @xmath57 such that @xmath58 .",
    "the above observation ( as well as a slightly more general observation from  @xcite ) has an immediate algorithmic corollary , reducing the ed problem to the mwis problem in the square of the input graph . in  @xcite ,",
    "the exact time complexity of such a reduction was not specified ; we do this in the following proposition . given a graph @xmath1 , we denote by @xmath59 its encoding length .    [ prop:1 ]",
    "let @xmath60 be a graph class for which the problem is solvable in time @xmath61 on squares of graphs from @xmath60 .",
    "then , the ed problem for @xmath62 is solvable in time .",
    "it is easy to see that the square @xmath57 can be computed in time @xmath63 using matrix multiplication . alternatively , assuming that @xmath1 is given by adjacency lists , computing @xmath57 can be done in time @xmath64 , as follows .",
    "first , we fix an ordering @xmath40 of @xmath47 and order the adjacency lists with respect to @xmath65 .",
    "this can be done in linear time , see , e.g. ,  @xcite .",
    "then , we create a new copy of these lists . for every vertex @xmath66 , we process its neighbors in order and for each of them , say @xmath53",
    ", we merge the current adjacency list of @xmath20 with the adjacency list of @xmath53 ( removing duplicates ) .",
    "since the lists are ordered , each such merging step can be done in @xmath67 time .",
    "hence , the overall time complexity of computing @xmath57 is @xmath68 where the last equality holds since @xmath69 .",
    "this justifies the time complexities given in proposition  [ prop:1 ] .",
    "we extend the approach of brandstdt _ et al . _",
    "@xcite and milani  @xcite to the weighted versions of the ed problem based on a suggestion made in  @xcite .",
    "we have the following    [ thm : wed - mwis ] let @xmath60 be a graph class for which the problem is solvable in time @xmath61 on squares of graphs from @xmath60 .",
    "then , the and problems are solvable on graphs in @xmath62 in time @xmath70 .",
    "the proof of this theorem will rely on two auxiliary lemmas .",
    "the first one shows how the problem can be reduced to the case of non - negative weights .",
    "[ lem : wed - mwis ] let @xmath71 be an instance to the problem such that @xmath72 .",
    "suppose that @xmath1 has an efficient dominating set , and let @xmath73 be the common cardinality of all efficient dominating sets of @xmath1 .",
    "for all @xmath14 , let @xmath74 , and let @xmath75 .",
    "then , @xmath76 is a yes instance to the problem if and only if @xmath77 is a yes instance to the problem .",
    "in addition , @xmath78 .    recall that if a graph @xmath1 has an efficient dominating set , then all efficient dominating sets of @xmath1 have the same cardinality , which equals the minimum cardinality of a dominating set of @xmath1 .",
    "this implies that if we replace each @xmath79 with @xmath74 , then the weight of each efficient dominating set will increase by exactly @xmath80 , where @xmath73 is the common cardinality of all efficient dominating sets of @xmath1 .",
    "consequently , @xmath81 is a yes instance if and only if @xmath82 is a yes instance .",
    "the fact that @xmath83 is clear .    the second lemma deals with the case of non - negative weights .    [",
    "lem : wed - mwis-2 ]",
    "let @xmath71 be an instance to the problem such that @xmath84 .",
    "let @xmath85 , let @xmath86| - w(x)$ ] , for all @xmath14 , and @xmath87 .",
    "then , @xmath76 is a yes instance to the problem if and only if @xmath88 is a yes instance to the problem .",
    "on the one hand , if @xmath4 is an efficient dominating set in @xmath1 such that @xmath89 , then , by observation  [ lem : eds - wis ] , @xmath4 is an independent set in @xmath57 such that @xmath90| = |v|$ ] .",
    "therefore , @xmath91| - \\sum_{x\\in d}w(x)\\ge m\\cdot |v|-k = k'\\,,\\ ] ] and @xmath88 is a yes instance to the problem .    on the other hand ,",
    "let @xmath56 be an independent set in @xmath57 with @xmath92 .",
    "we claim that @xmath93| = |v|$ ] and @xmath94 .",
    "since @xmath56 is an independent set in @xmath57 , it is an independent set in @xmath1 such that the closed neighborhoods ( in @xmath1 ) of its elements are pairwise disjoint .",
    "therefore , @xmath93| \\le |v|\\,.$ ] conversely , @xmath95 implies @xmath93|\\geq \\frac{k'}{m}=|v|-\\frac{k}{m}>|v|-1,$ ] since @xmath96 .",
    "we thus have @xmath93| = |v|$ ] . by observation  [ lem : eds - wis ]",
    ", @xmath56 is an efficient dominating set in @xmath1 .",
    "the inequality @xmath97 is equivalent to @xmath98| - \\sum_{x\\in i}w(x ) \\ge m\\cdot |v|-k\\,,\\ ] ] which implies @xmath99 .",
    "thus , @xmath76 is a yes instance to the problem , as claimed .",
    "consider an instance @xmath71 with @xmath100 and @xmath101 to the problem .",
    "let @xmath102 . if @xmath103 , we transform the instance , using lemma  [ lem : wed - mwis ] to an equivalent instance @xmath77 to the problem with non - negative weights and @xmath104 .",
    "the time complexity of this step is dominated by solving the ed problem in @xmath1 , which , by proposition  [ prop:1 ] , is of the order .    to solve the problem on @xmath77 ,",
    "we apply lemma  [ lem : wed - mwis-2 ] .",
    "the corresponding instance @xmath88 to the problem can be computed in time @xmath105 .    summarizing , in order to solve the problem , we only need to compute @xmath57 and solve at most two instances of the problem on @xmath57 .    the problem can be reduced in time @xmath106 to the problem , since a tuple @xmath81 is a yes instance to the problem if and only if @xmath107 is a yes instance to the problem . thus the result follows .",
    "in this section , we exploit the approach developed in section  [ sec : wed - mwis ] and develop new polynomial results for the and problems .      in  @xcite ,",
    "lu and tang wrote that _  @xmath108 it would be of interest to know whether or not there is a polynomial - time algorithm to solve the weighted efficient domination problem on _ ( @xmath109 ) _ strongly chordal graphs .  _ recently , brandstdt _ et al . _",
    "@xcite gave a linear - time algorithm for the efficient domination problem in the class of dually chordal graphs .",
    "the algorithm is a modification of frank s algorithm ( algorithm  [ algo : mwischordal ] below ) , which solves the problem for chordal graphs in linear time  @xcite .",
    "the modification allows to find a maximum weight independent set of  @xmath57 in linear time if @xmath1 is dually chordal , without computing its square .",
    "we will make a similar modification of frank s algorithm so that the obtained algorithm ( algorithm  [ algo : eddc ] below ) solves the problem for dually chordal graphs .",
    "the modification contains two major changes .",
    "first , we add a preprocessing step , transforming the given instance ( with possibly negative weights ) to an instance of the problem .",
    "second , we rewrite algorithm  [ algo : mwischordal ] to find a maximum weight independent set of the square of the given graph . by lemma  [ lem : wed - mwis-2 ] , this will be a solution to the problem .        additionally to finding a maximum neighborhood ordering @xmath112 ,",
    "the algorithm in @xcite also computes a maximum neighbor @xmath113 for each vertex @xmath42 such that for all @xmath114 no vertex @xmath42 is its own maximum neighbor ( @xmath115 ) .",
    "this is necessary for the next lemma .",
    "[ lem : ijine_iff_mjine2 ] let @xmath0 be a graph with @xmath116 and a maximum neighborhood ordering @xmath117 where for all @xmath118 , @xmath113 is a maximum neighbor of @xmath42 with @xmath115 . if @xmath119 and @xmath120 , then @xmath121 .",
    "@xmath122 vertex @xmath123 is adjacent in @xmath1 to @xmath113 ( @xmath124 ) .",
    "thus , the distance between @xmath42 and @xmath123 is at most @xmath125 .",
    "so @xmath42 and @xmath123 are also adjacent in @xmath57 ( @xmath126 ) .",
    "@xmath127 vertices @xmath42 and @xmath123 are adjacent in @xmath57 ( @xmath126 ) . if @xmath128 , then @xmath129 .",
    "now assume that @xmath130",
    ". then vertices @xmath42 and @xmath123 have a common neighbor @xmath131 in @xmath1 , choose the rightmost such vertex ( that is , the one maximizing the value of @xmath8 ) .",
    "we distinguish between two cases :    a.   @xmath132 . if @xmath133 , then @xmath124 so we may assume that @xmath134 . by definition @xmath113",
    "is adjacent to all neighbors of @xmath131 in @xmath34 .",
    "this includes @xmath123 .",
    "b.   @xmath135 . in this case",
    "any maximum neighbor @xmath136 of @xmath131 satisfies @xmath137 ( since @xmath138 but @xmath139 ) , @xmath140 and @xmath141 . in particular",
    ", @xmath136 is a common neighbor of @xmath42 and @xmath123 .",
    "since @xmath142 for some @xmath143 , this contradicts the choice of @xmath131 .        to get algorithm  [ algo : eddc ] we extended the algorithm  [ algo : mwischordal ] by lines  [ line : posweightsstart][line : posweightsend ] to ensure non - negative weights",
    "additionally , we added the calculation for  @xmath144 and  @xmath145 ( line  [ line : compmk ] ) , and defined @xmath146 now as @xmath147| - w(v)$ ] instead of @xmath148|$ ] ( line  [ line : compomega ] ) .",
    "therefore , based on lemma  [ lem : wed - mwis ] , we first created an instance @xmath81 for the problem with non - negative weights , and then by lemma  [ lem : wed - mwis-2 ] an instance @xmath149 for the problem on @xmath57 ( with @xmath150 ) .",
    "next , the instance is solved in the lines  [ line : compmno][line : compmwisend ] in linear time . to achieve this , we rewrite algorithm  [ algo : mwischordal ] to work on the dually chordal graph instead of its chordal square .",
    "let @xmath42 and @xmath123 be adjacent in @xmath57 and @xmath151",
    ". now lemma  [ lem : ijine_iff_mjine2 ] allows to modify the two loops .",
    "for the first loop ( line  [ line6 ] ) , there is an extra vertex weight @xmath152 .",
    "when @xmath42 is marked , instead of decrementing the weights @xmath153 of the neighbors of @xmath42 ( and their neighbors ) , @xmath152 of @xmath42 s maximum neighbour  @xmath113 is incremented by @xmath154 .",
    "now before comparing @xmath155 to @xmath156 , @xmath155 is decremented by @xmath157 for all @xmath158 $ ] .",
    "because @xmath113 is adjacent to @xmath123 ( lemma  [ lem : ijine_iff_mjine2 ] ) , this ensures that each time the weight  @xmath155 is compared to @xmath156 , it has the same value as it would have in algorithm  [ algo : mwischordal ] .    for the second loop ( line  [ line10 ] ) the argumentation works similarly . after selecting a vertex  @xmath123 ( i.e. , @xmath159 )",
    ", all its neighbors in @xmath57 are blocked .",
    "thus by lemma  [ lem : ijine_iff_mjine2 ] , if a vertex  @xmath42 is adjacent in @xmath57 to a selected vertex , then the maximum neighbor @xmath113 is blocked .",
    "solving the efficient domination problem ( line  [ line : compgamma ] ) and finding a maximum neighborhood ordering ( line  [ line : compmno ] ) can be done in linear time @xcite .",
    "also the overall runtime of lines  [ line6][line : compmwisend ] is bounded by the number of vertices and edges in @xmath1 .",
    "thus , algorithm  [ algo : eddc ] runs in linear time .    as explained at the end of the proof of theorem  [ thm : wed - mwis ]",
    ", the problem can be reduced in time @xmath106 to the problem by negating the weights .",
    "therefore , the problem can also be solved in linear time on dually chordal graphs .          therefore , by theorem  [ thm : wed - mwis ] , a polynomial time algorithm for the and problems in at - free graphs will follow if the problem is solvable in polynomial time in the class of cocomparability graphs .",
    "the problem in the class of cocomparability graphs is equivalent to the maximum weight clique problem in the class of comparability graphs , for which the following result is known .",
    "the algorithm given by golumbic  @xcite requires a transitive orientation of a comparability graph @xmath1 as input .",
    "such an orientation can be found in linear time using methods of mcconnell and spinrad  @xcite .",
    "consequently :          let @xmath62 be the class of at - free graphs , and let @xmath162 with @xmath163 . by theorem  [ atgk ] , the square of @xmath1 is cocomparability . by theorem  [ mwis :",
    "cocomp ] , the problem is solvable on @xmath57 in time @xmath164 .",
    "thus , theorem  [ thm : wed - mwis ] implies that in the class of at - free graphs , the and problems are solvable in time @xmath165 .",
    "theorem  [ thm : at - free ] generalizes the polynomial - time algorithms for the efficient dominating set problem in the class of at - free graphs by brandstdt _",
    "et al . _",
    "@xcite and by broersma _",
    "et al . _",
    "both papers  @xcite solve the unweighted version of the problem in time @xmath19 , while we give an algorithm of complexity @xmath15 to solve the more general , weighted versions of the problem .",
    "the polynomial time solvability implied by theorem  [ thm : at - free ] can also be seen as a common extension of the polynomial - time solvability of the problem on interval graphs  @xcite , cocomparability graphs  @xcite , and permutation graphs  @xcite , all subclasses of at - free graphs .",
    "we are grateful to the two anonymous referees for their helpful comments .",
    "is supported in part by `` agencija za raziskovalno dejavnost republike slovenije '' , research program p@xmath5@xmath166 and research projects j@xmath5-@xmath167 , j@xmath5-@xmath168 , and j@xmath5-@xmath169 .",
    "10 d. w. bange , a. e. barkauskas and p. j. slater , efficient dominating sets in graphs , in r. d. ringeisen and f. s. roberts ( eds . ) : applications of discrete mathematics , pages 189199 , siam , philadelphia , pa , 1988 .",
    "a.  brandstdt , c.  hundt and r.  nevries , efficient edge domination on hole - free graphs in polynomial time , in a.  lpez - ortiz ( ed . ) : proceedings latin 2010 : theoretical informatics , 9th latin american symposium , lecture notes in computer science 6034 , pp .  650661 , 2010 .",
    "a.  brandstdt , a.  leitert and d.  rautenbach , efficient dominating and edge dominating sets for graphs and hypergraphs . in proceedings of isaac 2012 , lecture notes in computer science 7676 ( 2012 ) 267277 .",
    "j. guo and r. niedermeier , linear problem kernels for np - hard problems on planar graphs , in : l. arge et al .",
    "( eds . ) : proceedings of icalp 2007 , lecture notes in computer science 4596 , pp . 375386 , 2007 .",
    "y. d. liang , c .-",
    "lu and c .- y .",
    "efficient domination on permutation graphs and trapezoid graphs . in : t. jiang and d. t. lee",
    "( eds . ) : proceedings of the third cocoon conference , lecture notes in computer science 1276 , pp .  232241 , 1997 .",
    "y. l. lin , fast algorithms for independent domination and efficient domination in trapezoid graphs , in : k .- y .",
    "chwa and o. h. ibarra ( eds . ) : proceedings of isaac98 , lecture notes in computer science 1533 , pp .",
    "267275 , 1998 ."
  ],
  "abstract_text": [
    "<S> an efficient dominating set ( or perfect code ) in a graph is a set of vertices the closed neighborhoods of which partition the vertex set of the graph . </S>",
    "<S> the minimum weight efficient domination problem is the problem of finding an efficient dominating set of minimum weight in a given vertex - weighted graph ; the maximum weight efficient domination problem is defined similarly . </S>",
    "<S> we develop a framework for solving the weighted efficient domination problems based on a reduction to the maximum weight independent set problem in the square of the input graph . using this approach </S>",
    "<S> , we improve on several previous results from the literature by deriving polynomial - time algorithms for the weighted efficient domination problems in the classes of dually chordal and at - free graphs . </S>",
    "<S> in particular , this answers a question by lu and tang regarding the complexity of the minimum weight efficient domination problem in strongly chordal graphs .    </S>",
    "<S> perfect code , efficient domination , weighted efficient domination , maximum weight independent set problem , dually chordal graph , cocomparability graph , at - free graph , polynomial - time algorithm    * notice : * this is the author s version of a work that was accepted for publication in information processing letters . </S>",
    "<S> changes resulting from the publishing process , such as peer review , editing , corrections , structural formatting , and other quality control mechanisms may not be reflected in this document . </S>",
    "<S> changes may have been made to this work since it was submitted for publication . </S>",
    "<S> a definitive version was subsequently published in information processing letters 115 ( 2015 ) 256 - 262 , doi : 10.1016/j.ipl.2014.09.024 . </S>"
  ]
}