{
  "article_text": [
    "the test set problem is np - hard .",
    "the polynomial time approximation algorithms using in practice includes `` greedy '' heuristics implemented by set cover criterion or by information criterion@xcite .",
    "test set can not be approximated within @xmath3 for any @xmath4 unless @xmath5@xcite .",
    "recently , the authors of @xcite designed a new information type greedy algorithm , information content heuristic ( ich for short ) , and proved its performance guarantee @xmath6 , which almost matches the inapproximability results .",
    "the setcover greedy algorithm ( sga for short ) is a natural approximation algorithm for test set . in practice ,",
    "its average performance is virtually the same as information type greedy algorithms@xcite .",
    "the performance ratio guarantee @xmath0 of sga is obtained by transforming the test set problem as a set cover problem .",
    "the authors of @xcite give the tight performance guarantee @xmath7 of sga on instances with the size of tests no greater than 2 .",
    "oblivious rounding , a derandomization technique to obtain simple greedy algorithm for set cover problems by conditional probabilities was introduced in @xcite .",
    "young observed the number of elements uncovered is an `` potential function '' and the approximation algorithm only need to drive down the potential function at each step , thus he showed another proof of the well - known performance guarantee @xmath8 .",
    "in this paper , the author presents a tighter analysis of sga .",
    "we uses the potential function technique of @xcite to improve the performance guarantee @xmath0 which derives from set cover problem to @xmath1 , and construct instances to give a nontrivial lower bound @xmath2 of the performance guarantee .",
    "the latter result confirms the fact ich is slightly better than sga in worst case . in this analysis",
    ", the author refers to the tight analysis of the greedy algorithm for set cover problem in @xcite .    in section 2 ,",
    "the author show the two main theorems , and some definitions , notations and facts are given . in section 3 , the author analyzes differentiation distribution of item pairs and uses the potential function method to prove the improved performance guarantee . in section 4 ,",
    "the author shows the nontrivial lower bound by constructing certain test set instances .",
    "section 5 is some discussions .",
    "the input of test set problem consists of @xmath9 , a set of items ( called universe ) , and @xmath10 , a collection of subsets ( called tests ) of @xmath9 .",
    "a test @xmath11 differentiates item pair @xmath12 if @xmath13 .",
    "@xmath10 is a test set of @xmath9 , that is , any item pair of @xmath9 is differentiated by one test in @xmath10 .",
    "the objective is to find @xmath14 with minimum cardinality which is also a test set of @xmath9 .",
    "we use @xmath15 to represent the optimal test set .",
    "let @xmath16 , and @xmath17 . in this paper , we assume @xmath18 .    in an instance of test set problem , there are @xmath19 different item pairs .",
    "let @xmath20 be two different items , and @xmath21 are two disjoint sets . if @xmath22 , we say @xmath12 is an item pair inside of @xmath23 , and if @xmath24 and @xmath25 , we say @xmath12 is an item pair between @xmath23 and @xmath26 .",
    "we use @xmath27 to represent that @xmath11 differentiates @xmath12 and @xmath28 to represent that @xmath11 does not differentiate @xmath12 .",
    "we use @xmath29 to represent that at least one test in @xmath10 differentiates @xmath12 , @xmath30 to represent that any test in @xmath10 does not differentiate @xmath31 , and @xmath32 to represent the number of tests in @xmath33 that differentiate @xmath12 .",
    "* fact 1 . *",
    "_ for three different items @xmath34 , @xmath35 and @xmath36 , if @xmath30 and @xmath37 , then @xmath38 .",
    "_    * fact 2 . * _ for three different items @xmath34 , @xmath35 and @xmath36 , if @xmath29 and @xmath39 , then @xmath38 . _",
    "given @xmath14 , we define a binary relation @xmath40 on @xmath9 : for two item @xmath20 , @xmath41 iff @xmath42 .",
    "by fact 1 , @xmath40 is an equivalent relation .",
    "the equivalent classes containing @xmath34 is denoted as @xmath43 $ ] .",
    "* fact 3 . *",
    "_ if @xmath10 is a minimal test set , then @xmath44 . _    * fact 4 .",
    "* _ if @xmath10 is a test set , then @xmath45 .",
    "_    test set @xmath10 with @xmath46 is called a compact test set . if @xmath10 is a compact test set , then @xmath47 .    in set cover problem , we are given @xmath48 , the universe , and @xmath49 , a collection of subsets of @xmath48 .",
    "@xmath50 is a set cover of @xmath48 , that is , @xmath51 .",
    "the objective is to find @xmath52 with minimum cardinality which is also a set cover of @xmath9 .",
    "the greedy algorithm for set cover runs like that . in each iteration , simply select a subset covering most uncovered elements , repeat this process until all elements are covered , and return the set of selected subsets .",
    "let @xmath53 be the size of the universe , and @xmath54 be the size of the optimal set cover .",
    "the greedy algorithm for set cover has performance guarantee @xmath55 by @xcite .",
    "we give two lemmas about the greedy algorithm for set cover .",
    "lemma 1 is a corollary of lemma 2 in @xcite and lemma 2 is a corollary of lemma 1 and lemma 4 in @xcite .",
    "* lemma 1 . * _ the size of set cover returned by the greedy algorithm is at most @xmath56 .",
    "_    * lemma 2 . *",
    "_ given @xmath53 and @xmath54 , there are instance of set cover problem such that the size of set cover returned by the greedy algorithm is at least @xmath57 .",
    "_    test set problem can be transformed to set cover problem in a natural way .",
    "let @xmath58 be an instance of test set , we construct an instance @xmath59 of set cover , where @xmath60 , and @xmath61    clearly , @xmath62 is a test set of @xmath9 iff @xmath63 is a set cover of @xmath48 .",
    "sga can be described as : + input : @xmath9,@xmath10 ; + output : a test set of @xmath9 ; + begin + @xmath64 ; + while @xmath65 do + select @xmath11 in @xmath66 minimizing @xmath67 ; + @xmath68 ; + endwhile + return @xmath69 ; + end + in sga , we call @xmath69 the partial test set .",
    "the differentiation measure of @xmath69 , @xmath70 , is defined as the number of item pairs not differentiated by @xmath69 . the differentiation measure of @xmath11 ( related to @xmath69 )",
    "is defined as @xmath71 .",
    "sga is in fact isomorphic to the greedy algorithm for set cover under the natural transformation .",
    "thus we immediately obtain the performance guarantee @xmath0 of sga .",
    "this paper shows better performance guarantee and a nontrivial lower bound of performance guarantee .",
    "the two main theorems are :    * theorem 1 . *",
    "_ the performance guarantee of sga can be @xmath1 .",
    "_    * theorem 2 . *",
    "_ there are arbitrarily large instances of test set problem such that the performance ratio of sga on these instances is at least @xmath2 .",
    "_    the harmonious number is defined as @xmath72 .",
    "two inequalities are listed here for convenience of proof in section 3 .",
    "* fact 5 . *",
    "_ for any @xmath73 , @xmath74 .",
    "_    denote @xmath75 .",
    "* fact 6 . *",
    "_ for any @xmath76 , @xmath77 .",
    "in this subsection , the author analyzes the distribution of times for which item pairs are differentiated in instances of test set , especially the relationship between the differentiation distribution and the size of the optimal test set .",
    "* lemma 3 . *",
    "_ given @xmath78 , @xmath79 , suppose @xmath10 is a test set of @xmath80 and a test set of @xmath81 , then at most @xmath82 item pairs between @xmath80 and @xmath81 are not differentiated by any test in @xmath10 . + proof .",
    "suppose @xmath83 .",
    "we claim for any item @xmath84 , there exist at most one item @xmath35 in @xmath81 satisfying @xmath30 .",
    "otherwise there exist two different items @xmath85 in @xmath81 such that @xmath86 and @xmath37 , then by fact 1 , @xmath38 , which contradicts @xmath10 is a test set of @xmath81 .",
    "_    * lemma 4 . *",
    "_ at most @xmath88 item pairs are differentiated by exactly one test in @xmath15 .",
    "let @xmath89 be the set of item pairs that are differentiated by exactly one test in @xmath15 .",
    "we prove @xmath90 by induction . when @xmath91 , @xmath92 .",
    "suppose the proposition holds for any @xmath93 , we prove the proposition holds for @xmath94 .",
    "_    select @xmath95 such that @xmath96 and @xmath97 , then @xmath98 , @xmath99 .",
    "since @xmath15 is a test set of @xmath11 , by induction hypothesis , at most @xmath100 item pairs inside of @xmath11 are differentiated by exactly one test in @xmath15 .",
    "similarly , at most @xmath101 item pairs inside of @xmath102 are differentiated by exactly one test in @xmath103 .    by lemma 3 , at most @xmath104 item pairs between @xmath11 and @xmath102",
    "are not differentiated by any test in @xmath105 .",
    "therefore at most @xmath104 item pairs between @xmath11 and @xmath102 are differentiated by exactly one test in @xmath15 .",
    "w.l.o.g , suppose @xmath106 , then @xmath107 @xmath87        * lemma 5 . * _ given @xmath108 , suppose @xmath10 is a test set of @xmath109 and a test set of @xmath110 , then at most @xmath111 item pairs between @xmath109 and @xmath110 are differentiated by exactly one test in @xmath10 . + proof .",
    "let @xmath89 be the set of item pairs between @xmath109 and @xmath110 which are differentiated by exactly one test in @xmath33 .",
    "we prove that @xmath112 by induction .",
    "when @xmath113 and @xmath114 , the lemma holds clearly .",
    "suppose the lemma holds for any @xmath115 , @xmath116 , we prove the lemma holds for @xmath117 .",
    "_    select @xmath118 such that @xmath96 and @xmath119 , then @xmath98 , @xmath120 .",
    "since @xmath121 is a test set of @xmath122 and a test set of @xmath123 , by induction hypothesis , at most @xmath124 item pairs between @xmath122 and @xmath123 are differentiated by exactly one test in @xmath10 .",
    "similarly , at most @xmath125 item pairs between @xmath126 and @xmath127 are differentiated by exactly one test in @xmath10 .    since @xmath121 is a test set of @xmath122 and a test set of @xmath127 , by lemma 3 , at most @xmath128 item pairs between @xmath122 and @xmath127 are not differentiated by any test in @xmath121 .",
    "hence at most @xmath129 item pairs between @xmath122 and @xmath127 are differentiated by exactly one test in @xmath10 .",
    "similarly , at most @xmath130 item pairs between @xmath123 and @xmath126 are differentiated by exactly one test in @xmath10    clearly , @xmath131",
    "w.l.o.g , suppose @xmath132 , then @xmath133 @xmath87    * lemma 6 .",
    "* _ at most @xmath134 item pairs are differentiated by exactly @xmath135 test in @xmath15 , where @xmath136 .",
    "let @xmath137 be the set of item pairs that are differentiated by exactly @xmath135 test in @xmath15 .",
    "for any combination @xmath138 of @xmath139 tests in @xmath15 , let @xmath140 be the subset of @xmath137 such that each item pair in @xmath140 is differentiated by any test in @xmath138 .",
    "_    let @xmath141 be the equivalent relation induced by @xmath138 .",
    "for any equivalent class @xmath43 $ ] , there is exactly one equivalent class @xmath142 $ ] , such that each item pair between @xmath43 $ ] and @xmath142 $ ] is differentiated by any test in @xmath138 ( fact 2 ) .",
    "since @xmath143 is a test set of @xmath43 $ ] and a test set of @xmath142 $ ] , by lemma 5 , at most @xmath144\\cup[j]|)\\log_2{|[i]\\cup[j]|}$ ] item pairs between @xmath43 $ ] and @xmath142 $ ] are differentiated by exactly one test in @xmath143 . in another word , at most @xmath144\\cup[j]|)\\log_2{|[i]\\cup[j]|}$ ] item pairs between @xmath43 $ ] and @xmath142 $ ] are differentiated by exactly @xmath135 tests in @xmath15 .",
    "hence @xmath145,[j]}{|[i]\\cup[j]|\\log_2{|[i]\\cup[j]|}}\\le n\\log_2{n}.\\end{aligned}\\ ] ]    therefore , @xmath146 @xmath87    * lemma 7 . *",
    "_ at most @xmath147 item pairs are differentiated by at most @xmath135 test in @xmath15 , where @xmath148 .",
    "let @xmath89 be the set of item pairs that are differentiated by at most @xmath135 test in @xmath15 , and @xmath137 be the set of item pairs that are differentiated by exactly @xmath135 test in @xmath15 . by lemma 6 , @xmath149 gu @xmath87 _      in this subsection",
    ", the author uses the potential function technique to derive improved performance guarantee of sga for test set .",
    "our proof is based on the trick to `` balance '' the potential function by appending a negative term to the differentiation measure .",
    "let @xmath150 , then @xmath151 .",
    "let @xmath152 , @xmath153 , @xmath154 , and @xmath155 .",
    "let @xmath156 , @xmath157 .    denote by @xmath158 the probability distribution on tests in @xmath15 drawing one test uniformly from @xmath103 . for any @xmath95 ,",
    "the probability of drawing @xmath11 is @xmath159 .",
    "we divide a run of the algorithm into @xmath160 phases , from phase @xmath160 to phase @xmath161 . in phase @xmath135 ,",
    "@xmath162 , the algorithm runs until @xmath163 .",
    "let the set of selected tests in phase @xmath135 is @xmath164 , and the partial test set when phase @xmath135 stops is @xmath165 , @xmath166 .",
    "then @xmath167 , @xmath168 , and the returned test set is @xmath169 .",
    "set @xmath170 .",
    "if @xmath171 , let the last selected test in phase @xmath135 is @xmath172 .    in phase @xmath135 , @xmath173 , define the potential function as @xmath174    by the definition of @xmath175 and fact 5 , @xmath176    by the definition of @xmath177 and the facts @xmath178 and @xmath179 , @xmath180 and by lemma 4 and lemma 7 , @xmath181 therefore , @xmath182    during phase @xmath135 , the algorithm selects @xmath11 in @xmath10 to minimize @xmath183 ) .",
    "therefore , @xmath184 .    on the other hand , @xmath185 by definition of phase @xmath135 .",
    "hence @xmath186    therefore , @xmath187 , thus @xmath188 , and @xmath189 .    to sum up , @xmath190    when all phase @xmath135 , @xmath173 , end , consider the instance of set cover @xmath59 , where @xmath191 and @xmath192 .",
    "clearly , @xmath193 .",
    "let @xmath54 be the size of the optimal set cover of this instance",
    ". then @xmath194 .",
    "consider the following two cases : ( a)@xmath195 ; ( b)@xmath196 .    in case ( a ) ,",
    "@xmath197    and @xmath198    hence @xmath199    in case ( b ) , by lemma 1 , @xmath200    and @xmath201    hence @xmath202    by fact 6 , @xmath203",
    "in this section , we discuss on a variation of test set problem . given disjoint sets @xmath204 and @xmath10 , set of subsets of the universe @xmath205 , we seek @xmath14 with minimum cardinality which is a test set of any @xmath206 for @xmath207 .",
    "denote the instance by @xmath208 .    in our construction , we could use the split trick similar to that used in @xcite to split @xmath204 by @xmath209 tests .",
    "the splitting overhead could be ignored , provided that the size of the optimal solution is @xmath210 for some constant @xmath211 .",
    "let @xmath212 is a compact test set of @xmath213 .",
    "for example , we can let @xmath214 , where @xmath215 contains integer @xmath216 between @xmath161 and @xmath217 such that the @xmath36-th bit of @xmath216 s binary representation is @xmath161 .",
    "firstly , we give the level-@xmath135 atom instances .",
    "let the instance be @xmath218 .",
    "the universe @xmath219 includes integral points in @xmath220-dimension euclid space .",
    "@xmath221 , @xmath222 , @xmath223 .",
    "@xmath227 , @xmath228 .",
    "@xmath229 contains points in @xmath230 with @xmath231 .",
    "@xmath232 contains points in @xmath233 with @xmath234 in one of the @xmath235 tests in @xmath212 .",
    "we assign an order to tests @xmath232 in @xmath236 , called natural order , as the lexical order of @xmath237 .     and @xmath238,scaledwidth=80.0% ]",
    "we claim sga could return @xmath236 according to their natural order on atom instances .    at the beginning of the algorithm ,",
    "the differentiation measure of tests in @xmath236 is @xmath239 , and the differentiation measure of tests in @xmath240 is @xmath241    the algorithm could first select tests in @xmath242 according to their natural order .",
    "after that , the differentiation measure of tests in @xmath243 decreases by a factor @xmath244 , and the differentiation measure of tests in @xmath245 decreases by a factor at least @xmath244 .",
    "hence , the algorithm could subsequently select tests in @xmath246 according to their natural order .",
    "secondly , we construct a series of level-@xmath135 instances @xmath247 , @xmath248 based on the atom instances .",
    "atom instances are `` stretched '' in @xmath249 dimension and `` cloned '' in @xmath250 dimension .",
    "we select @xmath53 and @xmath54 such that @xmath251 and @xmath252 , where @xmath253 , @xmath254 for some @xmath255 .",
    "the universe @xmath219 includes @xmath53 integral points in @xmath256-dimension euclid space .",
    "@xmath257 , @xmath258 , @xmath259 .",
    "@xmath261 , and @xmath262 .",
    "@xmath227 , @xmath265 .",
    "@xmath266 contains points in @xmath267 with @xmath231 .",
    "@xmath268 contains points in @xmath269 with @xmath234 in one of the @xmath235 tests in @xmath212 .",
    "we assign an order to tests @xmath268 in @xmath236 , called natural order , as the lexical order of @xmath270 .",
    "we claim sga could select all tests in @xmath242 according to their natural order on @xmath271 in the beginning phase of the algorithm .    at the beginning of the algorithm ,",
    "the differentiation measure of tests in @xmath242 is @xmath272 , and the differentiation measure of tests in @xmath240 is @xmath273 .",
    "the algorithm could select tests in @xmath242 according to their natural order while the differentiation measure of selected test is kept equal to the differentiation measures of tests in @xmath274 for @xmath275 and no less than the differentiation measure of any test in @xmath240 .",
    "when the algorithm select the last test in @xmath242 , its differentiation measure is @xmath276 .",
    "let @xmath59 be the instance in lemma 2 , @xmath277 , @xmath278 be the optimal set cover , and @xmath279 be the set cover returned by the greedy algorithm .",
    "construct instance of test set @xmath280 .",
    "@xmath281 , @xmath282 , @xmath283 .",
    "@xmath284 .    on @xmath280 ,",
    "the algorithm could select all the tests in @xmath285 , the the differentiation measure of selected tests ranges from @xmath286 to @xmath287 by the proof of lemma 1 in @xcite .",
    "consequently , we construct a series of level-@xmath135 instances @xmath247 , @xmath248 , and combine them and @xmath280 into the complete instance .",
    "we intend to prove the performance ratio of sga on this instance is at least @xmath288 , for fixed @xmath289 .",
    "when @xmath290 , this performance ratio is at least @xmath291 .",
    "let @xmath292 , @xmath293 .",
    "then @xmath294 .",
    "we join tests in @xmath295 for @xmath296 one - by - one to obtain one test set @xmath15 .",
    "suppose @xmath297 , @xmath298 , then @xmath299 .",
    "clearly , @xmath15 is an optimal test set , and @xmath300 .",
    "we modify tests in @xmath242 by two operations : enlargement and merging . in the enlargement operation ,",
    "tests in @xmath242 are enlarged by a factor @xmath244 . in the merging operation",
    ", tests in @xmath274 for @xmath301 are merged to tests in @xmath302 for @xmath303 .",
    "let @xmath304 after the two operations are performed .",
    "* enlargement .",
    "* let @xmath305 .",
    "@xmath306 contains points in @xmath307 and @xmath308 with @xmath309 in one of the @xmath235 tests in @xmath212 . as a result , @xmath310 .    *",
    "* by the decreasing order of @xmath135 for @xmath311 , merge tests in @xmath312 by their natural order one - by - one to tests in @xmath302 for @xmath303 by the decreasing order of @xmath313 ( primarily ) and their natural order in @xmath302 until tests in @xmath314 are exhausted .    for any @xmath311 ,",
    "tests in @xmath302 suffice in the merging operation , provided that @xmath315    to finish the proof , we analysis the behavior of sga on the complete instance .",
    "before the algorithm selects a test , let @xmath316 be the maximum differentiation measure of tests in @xmath242 for @xmath317 , and @xmath318 to the maximum differentiation measure of tests in @xmath15 .    for @xmath319 ,",
    "let @xmath320 be the number of item pairs inside of @xmath321 contributing to @xmath316 , @xmath322 be the number of item pairs inside of @xmath321 contributing to @xmath323 , @xmath324 be the number of item pairs inside of @xmath321 contributing to @xmath318 , and @xmath325 be the number of item pairs inside of @xmath326 contributing to @xmath318",
    ". then @xmath327 , @xmath328 , and @xmath329 .",
    "since @xmath330 for @xmath331 and @xmath332    it follows that @xmath333 .",
    "hence @xmath334 , for any @xmath319 .    since @xmath335 for @xmath331 and @xmath336    it follows that @xmath337 .",
    "we conclude the algorithm could select all tests in @xmath338 in their natural order , for @xmath317 , and select all tests in @xmath285 , finally return @xmath62 .    in the condition @xmath289",
    "is fixed , the size of returned test set is @xmath339",
    "the author notes this is the first time to distinguish precisely the worst case performance guarantees of two types of `` greedy algorithms '' implemented by set cover criterion and by information criterion .",
    "in fact , the author definitely shows the pattern of instances on which ich performs better than sga .    in a preceding paper@xcite",
    ", we proved the performance guarantee of sga can be @xmath340 , and the proof can be extended to weighted case , where each test is assigned a positive weight , and the objective is modified as to find a test set with minimum total weight .    in the minimum cost probe set problem@xcite of bioinformatics ,",
    "tests are replaced with partitions of items .",
    "the objective is to find a set of partitions with smallest cardinality to differentiate all item pairs .",
    "it is easily observed that the improved performance guarantee in this paper is still applicable to this generalized case . +",
    "* acknowledgements .",
    "* the author would like to thank tao jiang and tian liu for their helpful comments .",
    "de bontridder k. m. j. , halldrsson b. v. , halldrsson m. m. , hurkens c. a. j. , lenstra j. k. , ravi r. , stougie l. : approximation algorithm for the test cover problems .",
    "mathematical programming - b * 98 * ( 2003 ) 477491"
  ],
  "abstract_text": [
    "<S> setcover greedy algorithm is a natural approximation algorithm for test set problem . </S>",
    "<S> this paper gives a precise and tighter analysis of approximation guarantee of this algorithm . </S>",
    "<S> the author improves the performance guarantee @xmath0 which derives from set cover problem to @xmath1 by applying the potential function technique . </S>",
    "<S> in addition , the author gives a nontrivial lower bound @xmath2 of performance guarantee of this algorithm . </S>",
    "<S> this lower bound , together with the matching bound of information content heuristic , confirms the fact information content heuristic is slightly better than setcover greedy algorithm in worst case . </S>"
  ]
}