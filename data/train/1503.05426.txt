{
  "article_text": [
    "youtube is one of the most popular and demanding internet video services .",
    "it accounts for 1 billion users distributed world - wide , who watch 6 billion hours of videos per month . due to its popularity and the nature of the content that it distributes",
    ", it is very challenging for both google to maintain the youtube infrastructure , and for internet service providers ( isps ) to manage the underlying network .",
    "they both have to optimize the video delivery to improve customers quality of experience ( qoe ) .",
    "youtube leverages a massive , globally distributed content delivery network ( cdn ) , the google cdn  @xcite , to handle such a demanding load .",
    "indeed , it consists of hundreds of _ edge - nodes _ scattered in the internet . each edge - nodehosts hundreds of video servers , or _",
    "caches _ , which can each potentially serve any video a user may request  @xcite . once a user starts a video playback ,",
    "the cdn load balancing algorithm directs the request to one of the caches .",
    "there is no known way to determine in advance which cache , or which edge - nodewill be used . and",
    "sadly , isps have no way to influence this choice  @xcite .",
    "youtube cdn is in continuous evolution , and its proprietary and never disclosed design makes it one of the most challenging cdns to monitor and measure .",
    "unsurprisingly , this spurred a lot of interest in the research community which investigated and disclosed some of the design secrets behind youtube infrastructure ",
    "see sec .",
    "[ sec : related ] for details .",
    "while understanding youtube cdn internals is interesting , it is even more challenging to design a system that monitors and automatically identifies changes in the cdn that could ultimately affect the qoe that the users perceive .",
    "changes may involve modification in the infrastructure , e.g. , the activation of a new edge - node , or in the load balancing algorithm decision , e.g. , a sudden switch of caches to serve requests .    in this paper , we present _ youlighter _ , a novel methodology to automatically monitor and pinpoint changes in the youtube cdn . _",
    "youlighter_relies on an unsupervised learning approach that , as such , does not require any knowledge of the youtube infrastructure . instead , it only assumes that the isp has deployed passive probes , which expose tcp flow level logs summarizing video requests from users . considering a given observation window of ,",
    "say one day , _ youlighter_aggregates these flow logs to constitute a _ snapshot _ of the traffic exchanged with youtube servers . based on dbscan  @xcite clustering , which is a well - established unsupervised machine learning algorithm , _",
    "youlighter_is able to automatically group thousands of caches into less than 10 edge - nodesusing simple features that characterize the network distance of caches from the vantage point .    _ youlighter_runs the clustering algorithm as soon as a new snapshot is available .",
    "the challenge then is to compare the two results obtained considering two consecutive snapshots , i.e. , compare two different datasets with the ultimate goal of highlighting changes in the cdn .",
    "unfortunately , no standard methodology is available to compare clusters obtained from different datasets .",
    "hence , we propose a generic framework that solves this problem .",
    "we transform each snapshot into a _ constellation _ , and we compare two constellations using the notion of _ constellation distance_. the bigger the distance between two snapshots , the more different the sets of caches youtube uses to serve isp customers during the two corresponding periods of time . _ youlighter_thus highlights changes in the edge - nodesused by youtube to serve isps customers . moreover , _",
    "youlighter_can also pinpoint deviations from the typical behavior of the youtube edge - nodes , e.g. , due to congestion arising in the network which makes the same edge - nodeslook different .",
    "thus , _ youlighter_has the potential to unveil sudden changes caused by the youtube cdn infrastructure and unveil possible qoe issues for isp customers .",
    "we validate our methodology over different datasets we collect from the different vantage points that we have deployed in two isps in two different countries for 10 months .",
    "first , we demonstrate that the clustering algorithm _",
    "youlighter_adopts is effective at identifying and grouping youtube caches belonging to different edge - nodeswhen considering a snapshot .",
    "second , and more importantly , we run _",
    "youlighter_over different collected snapshots considering the longitudinal dataset .",
    "we pinpoint several examples of sudden and previously undiscovered changes in the youtube cdn policies .",
    "for some of them , we drill down showing the impact on the qoe of isp customers , revealing the sudden drop of average video download throughput to less than 250  kb / s which hampers even the possibility of watching a video .",
    "we believe indeed that _",
    "youlighter_may serve as a promising tool for isps , network administrators , developers and researchers to monitor the youtube cdn and the traffic it generates .",
    "moreover , thanks to its design , _ youlighter_allows to quickly pinpoint the edge - nodesinvolved in the changes , thus accelerating the troubleshooting procedures .",
    "for instance , isps may rely on _ youlighter_to quickly react when they observe changes in youtube cdn which may impair the qoe of their customers , or to design traffic engineering algorithms to automatically adapt the network routing to the changes _",
    "youlighter_points out .    while we engineer _",
    "youlighter_to target youtube cdn monitoring , we believe that the _ constellation distance_notion we introduce in this paper constitutes a more general framework that has the potential to open the usage of unsupervised algorithms for anomaly detection problems in general .    the remainder of this paper is structured as follows : sec .",
    "[ sec : related ] discusses the related work .",
    "[ sec : dataset ] describes the details of the datasets we use to validate _",
    "youlighter _ , and shows the dynamicity of youtube cache selection policies .",
    "[ sec : method ] presents our methodology and introduces the _ constellation distance_. sec .",
    "[ sec : results ] presents our results : first , we evaluate the sensitivity of _ youlighter _ s parameters , and , second , we show how effective _",
    "youlighter_is at pinpointing changes in youtube cdn employing our traces . finally , sec .",
    "[ sec : conclu ] concludes the paper .",
    "youtube had been the subject of study in many papers from different perspectives : from users behavior  @xcite to the social network  @xcite , from video popularity dynamics  @xcite to protocols aspects  @xcite .",
    "considering the youtube delivery infrastructure , a large body of work verified its evolution over time  @xcite .",
    "they show a highly dynamic system which keeps changing over time due to continuous upgrades in the infrastructure  @xcite or due to the dynamicity of the cache selection policies  @xcite . some of the findings are already outdated .",
    "for instance , the load - balancing policy based on http redirections which is described in  @xcite is no longer in place , and youtube dismissed the naming scheme described in  @xcite at the end of 2011 . in this work",
    ", we do not aim to offer an updated view of youtube .",
    "we rather aim at offering a methodology that allows to automatically identify changes in both the infrastructure , e.g. , the appearance of new edge - nodes , and in the day to day management of the infrastructure , e.g. , a change in the load - balancing algorithm that may affect millions of customers .    in some sense , our contribution is in line with the body of works focusing on anomaly detection , for which  @xcite offer good surveys .",
    "most of the works in this area target anomalies in a security context , e.g. , the design of intrusion detection systems .",
    "most of them fall in the `` supervised '' category , i.e. , given a baseline is built , the proposed methodologies highlight deviations from it . to the best of our knowledge , only  @xcite targets large scale anomaly detection in operational networks",
    ". however , it presents a supervised system , which relies on data from passive probes , topology information and routing tables to feed a classic forecasting system , which finally compares its predictions to the actual measurements to pinpoint deviations .",
    "_ youlighter _ , on the other hand does not assume any knowledge of a baseline , and leverages unsupervised algorithms to automatically unveil changes .",
    "we specifically design it to target the youtube cdn , for which the ground truth is a moving target that is very difficult to know .",
    "the application of unsupervised learning techniques to get insights about the network traffic is not new .",
    "@xcite is one of the first works in the context of traffic classification , while @xcite compare the accuracy of different and standard unsupervised algorithms .",
    "@xcite proposes a flow - based anomaly detection algorithm based on k - means , while  @xcite uses dbscan to identify anomalous clusters .",
    "in all the cases , clustering is used to study the same given dataset .",
    "to the best of our knowledge , no approaches have been proposed to identify anomalies by comparing the results of clustering applied to different data sources ( e.g. , different datasets , different time snapshots , etc . ) .",
    "only  @xcite aims at measuring similarity between sets of overlapping clusters from complex networks , in which groups of nodes form tightly connected units that are linked to each other .",
    "since points are not embedded in a metric space , they define ad - hoc distances .",
    "_ youlighter_operates in a geometric space where we can exploit the concepts of density and centroid of a cluster to simplify the comparison among two different datasets .    _",
    "youlighter_differs also from techniques for the tracking of moving clusters and objects as  @xcite . indeed ,",
    "their goal is to track the movements of the same clustered objects over time , e.g. , a group of migrating animals . on the contrary , _ youlighter_has no insights about the cdn infrastructure and it can not track single objects , which may disappear and reappear freely .    finally , other approaches as  @xcite aim at measuring the distance among different time snapshots by considering the sample distributions obtained from them .",
    "however , directly relying on distributions to perform the comparison considerably complicates the detection of the edge - nodesbehind the changes . instead , _",
    "youlighter_extracts and compares clustering patterns , which are simpler to process in an automatic manner , and allow to immediately pinpoint the edge - nodes(i.e .",
    ", the clusters ) responsible for possible deviations .",
    "we assume the isp has instrumented the network with passive probes , which collect statistics from flows carrying youtube videos . in this work ,",
    "we rely on passive probes running acmesniff   that we install in points - of - presences ( pops ) of operational networks , as depicted in fig.[fig : tstat ] .",
    "clients are located in one pop , and connect to the backbone via a router , where acmesniffmonitors the traffic .",
    "acmesniffobserves packets , rebuilds each tcp flow , tracks it , and at the end of flow , logs detailed statistics .",
    "acmesniffcan classify tcp flows that carry youtube videos . for each request ,",
    "it logs i ) the anonymized client ip address , ii ) the server ip address , iii ) the hostname of the server , iv ) the tcp minimum round trip time ( rtt ) , v ) the ip time - to - live ( ttl ) of packets received by the client in the pop , vi ) the amount of bytes the clients send and receive , vii ) the average download throughput , and viii ) the time at which the tcp connection starts .",
    "note that acmesniffcan compute all these metrics considering only tcp segments , and do not require access to application payload .",
    "this avoids any privacy issues .",
    "we have been collecting traffic logs since april 2013 by monitoring the traffic users generate when accessing the internet .",
    "we instrument four different pops .",
    "three of them are located in pops of the same isp and in two different cities of the same country .",
    "we install the fourth one in a pop of a different isp in a second country . tab .",
    "[ tab : desc - traces ] describes , for each trace ( or dataset ) , the time period , the total downloaded volume , the number of unique videos and the number of youtube servers we observe .",
    "notice that in total we monitor the activity of more than 32,000 customers , and the maximum number of caches that isp1 customers used at least once is @xmath09,000 .",
    "we find that the youtube infrastructure described in  @xcite is no longer in use .",
    "since 2012 , youtube server hostnames are in the form ` rxabcxxtxx.c.youtube.com ` , where ` x ` are numbers , while ` abc ` is a three - letter code reporting the iata code of the closest airport .",
    "for instance ` r7fra07t16.c.youtube.com ` identifies a single cache , in frankfurt .",
    "the hostname resolves to a single ip address , 74.125.218.182 in the example .",
    "thus , we can uniquely identify a cache by its hostname .",
    "all caches co - located in the same edge - nodeshare the same iata code .",
    "this allows us to get coarse ground truth about the location of servers .",
    "however , as we will see , several edge - nodescan be located in apparently different areas , but share the same iata code .",
    "we run some active experiments to cross - check if youtube specializes caches to serve some particular content , and we verify that every cache can serve any video , at any resolution , in any format , e.g. , mpg4 or flash , to any device , e.g. , pc , smartphones or tablets .",
    "every time a user starts a video playback , the player starts a progressive download of the video content from the specific cache the system provides in the html page .",
    "we are interested in seeing which are the policies governing the server allocation , such as ( i ) is there any `` preferred '' group of caches ? or ( ii ) are those stable over time ?",
    "[ fig : ip_rank ] reports the rank of youtube caches based on the number of flows they handle .",
    "we consider february 2014 from the _ isp1-a_dataset .",
    "first , notice that we observe more than 3,200 caches during one month .",
    "second , the load each cache handles is very heterogeneous ; few servers handle lots of requests , but there is a not negligible number of caches that serves a significant portion of flows .",
    "for instance , more than 400 caches serve more than 100 videos , and in order to to observe 95% of requests , one should monitor about 330 caches .",
    "we also notice that the rank is extremely dynamic over time .",
    "for instance , we pick the four most active caches during the 1st of february 2014 and we report in fig .  [ fig : tren4 ] the amount of traffic they generate over time for the following seven days . as shown , the amount of traffic a single cache handles changes widely over time , and none of the monitored caches keeps a constant leading position for a long period of time .",
    "as one may expect this dynamicity to disappear when reducing the focus , we monitor a larger pool of caches as those in the rank in fig .",
    "[ fig : ip_rank ] , and we recompute the same rank on a daily basis . then , we represent it using different colors in fig .  [",
    "fig : ip_monitoring ] .",
    "each row represents the rank of the same cache for different days in february . in case",
    "the rank is stable , one would expect a row ( a cache ) to always assume the same color ( rank ) .",
    "[ fig : ip_monitoring ] shows exactly the opposite . indeed the top daily cache ( red square , highlighted by the white dot ) randomly changes every day ( white line ) .",
    "sometimes , the most used cache in a day is not among the top-10 cache of the month ( line jumps outside ) .",
    "the top-10 caches in the monthly rank drops below the 50th place during some days ( gray color ) . similarly , in the first 19 days of february",
    ", the top-10 caches are concentrated in the first 20 rankings ; however , starting from february 20th they fall around the 30th position ( notice the concentration of yellow and orange ) .",
    "this shows that the server allocation policies adopted by youtube spread the load over several hundreds of caches , and the choices are extremely dynamic over time if we observe with the fine grained granularity of a single cache .        since caches inside the same edge - nodeare all equivalent , the intuition is to observe the system using the coarse granularity offered by edge - nodes . however , edge - nodesare unknown",
    ", they can change over time due to system upgrade or redesign , and information that could be available ( e.g. , the iata code ) may be not reliable , or may be removed by youtube . in the following , we design an unsupervised clustering algorithm to automatically identify edge - nodesfrom just the observation of traffic flows .",
    "intuitively , the path between two caches in the same edge - nodeand clients in the same pop exhibits the same properties , e.g. , same rtt .",
    "conversely , the path between two caches in different edge - nodesshould present different rtt .",
    "this intuition is corroborated in fig .",
    "[ fig : perc1 ] which depicts the 5th , 20th , 50th , 80th , and 95th percentiles of the per - cache rtt distribution .",
    "we identify caches with their ip address , and then we order and group them into edge - nodesusing the iata code as ground truth so that caches belonging to the same edge - nodeappear one close the other .",
    "five edge - nodeare present , e-1 to e5 .",
    "each hosts a variable number of caches , with e-3 being the largest . as shown ,",
    "the caches in the same edge - nodeexhibits very similar rtt percentiles , suggesting that we can identify clusters of caches by considering the rtt as a feature .",
    "we leverage above intuition to design a clustering algorithm to automatically find homogeneous groups of caches .",
    "we use some ingenuity to characterize the path from client to each cache , and then to cluster caches that exhibits similar paths . we can split the process of our methodology into the following steps :    * step 1 - passive monitoring of youtube video flows * : as described in sec .",
    "[ sec : dataset ] , a passive probe provides the continuous collection of youtube traffic logs .",
    "we log each the metadata of each tcp connection , and we store logs in a database for further processing . + * step 2 - measurement consolidation and filtering * : to ease the monitoring procedure , we use a batch processing approach that considers time windows of size @xmath1 .",
    "thus , every @xmath1 we generate a `` snapshot '' , and we aggregate and process measurements in it . in the following ,",
    "we indicate the @xmath2-th snapshot as a superscript when needed , e.g. , @xmath3 indicates the metric @xmath4 at snapshot @xmath2 .",
    "we identify each cache @xmath5 by its ip address .",
    "we then group all flows in the same snapshot with the same server ip address to obtain a table where columns correspond to the metric ( e.g. , rtt , ttl , transmitted packets , etc . ) , and each row corresponds to a sample , i.e. , the tuple of measured values observed within a tcp flow .",
    "since we are interested in the active caches , we discard those with less than @xmath6 samples .",
    "we define the whole measurement snapshot @xmath2 as @xmath7 .",
    "+ * step 3 - feature selection and data normalization * : next , we apply a feature selection driven by domain knowledge to select the set @xmath8 of _ metrics_. in particular , as we are interested in grouping caches according to the path properties , we choose @xmath9 .",
    "then , for each cache @xmath5 in the snapshot @xmath10 , and for each metric @xmath11 , we generate an empirical distribution . from the distribution , we extract the vector @xmath12 containing @xmath13 percentiles of @xmath14 for cache @xmath5 .",
    "we thus standardize percentiles following a simple normalization : @xmath15 intuitively , eq.([eq : norm ] ) normalizes the percentiles of metric @xmath14 so that @xmath16 $ ] . at last",
    ", @xmath17 represents the standardized vector of _ features _ for the metric @xmath14 for server @xmath5 . recalling that @xmath18",
    ", we identify each cache @xmath19 with a @xmath20-dimensional space of edge 1 by features : @xmath21 and we transform the original set of caches @xmath10 into a set of points @xmath22 . + * step 4 - clustering * : we employ the density - based dbscan algorithm  @xcite to group together servers based on their multi - dimensional features .",
    "we choose dbscan because ( i ) it is able to handle clusters of arbitrary shapes and sizes ; ( ii ) it is relatively resistant to noise and outliers ; and ( iii ) it does not require the specification of the number of desired clusters .",
    "dbscan requires two parameters : @xmath23 and @xmath24 .",
    "@xmath23 determines the maximum allowed distance between any given point in a cluster and its closest neighbor belonging to the same cluster , and @xmath24 the minimum number of points required to form a cluster .",
    "based on that , it classifies all points as being ( i ) core points , i.e. , in the interior of a dense region ; ( ii ) border points , i.e. , on the edge of a dense region ; or ( iii ) noise points , i.e. , in a sparsely occupied region .",
    "noise points do not form any cluster , while the algorithm puts in the same cluster any two core points that are within @xmath23 of each other . similarly ,",
    "any border point that is close enough to a core point is put in the same cluster as the core point .",
    "the result of this process is a collection @xmath25 of clusters @xmath26 , also named as _ clustering _ : @xmath27      we are now interested in tracking the evolution of clusters over time , for which , as we discuss in sec .",
    "[ sec : related ] , no known solution is present in the literature .",
    "indeed , it is not obvious how to compare two clusterings @xmath28 and @xmath29 obtained considering two _ different _ datasets , i.e. , snapshots in our case .",
    "for instance , i ) points that were present in @xmath28 may not be present in @xmath29 , and vice versa ; ii ) points clustered into the same cluster in @xmath28 can now belong to two or more clusters in @xmath29 ; and iii ) the same points that form a cluster in @xmath28 can still form the same cluster , but can be placed in another region in the clustering space in @xmath29 . in our case , this corresponds to i ) popular caches at snapshot @xmath2 that are not anymore used at snapshot @xmath30 , or ii ) some caches at snapshot @xmath2 that were part of the noise are instead clustered at snapshot @xmath30 , or iii ) the path to caches suddenly changes at snapshot @xmath30 , altering rtt and ttl .    to evaluate the difference among the clustering , we propose a novel methodology that is based on the notion of _ constellation distance_.      we first map each cluster into a single _ star _ that summarizes it .",
    "given a cluster @xmath31 , we consider the centroid , or geometric center , @xmath32 whose components @xmath33 in the @xmath34 percentile of feature @xmath14 are : @xmath35 all stars then form a _ constellation _ @xmath36 .",
    "the @xmath37 function eventually considers the re - normalization of features that can be needed if points in @xmath28 and @xmath29 went through different standardization processes . in our case , assuming @xmath38 , from eq.([eq : norm ] ) for each @xmath11 we have : @xmath39      given a star @xmath32 and a constellation @xmath40 , we define the _ astral distance _ ( @xmath41 ) as the distance between @xmath32 and its closest star in @xmath40 .",
    "specifically , we compute the closest star @xmath42 such that @xmath43 . @xmath44 can be any distance metric that is valid in the feature space . in this work ,",
    "we use the classic euclidean distance .",
    "thus , the astral distance @xmath41 of the star @xmath32 from stars in @xmath40 is @xmath45    hence , the astral distance couples stars according to a nearest neighbor principle .      at last , we define the _ constellation distance _  - @xmath46 - as the sum of the astral distances among every star in the clusterings .",
    "since the number of clusters in @xmath47 and @xmath48 may be different , we need to symmetrize the definition : @xmath49    fig .",
    "[ fig : distance ] depicts the _ constellation distance_computation considering a 2-dimensional space . from left to right , dbscan first clusters the points ( grey dots for the first snapshot , white for the second ) .",
    "then , stars emerge to form the constellations , and we compute the astral distance for each star . finally , the _ constellation distance_is the sum of all astral distances .    in the following ,",
    "we consider two subsequent snapshots @xmath2 , and @xmath30 , compute the clustering @xmath50 and @xmath51 , then extract the constellations @xmath52 and @xmath53 , and finally compute their distance @xmath54 .    as we discuss in sec .",
    "[ sec : related ] , to the best of our knowledge we are the first to propose an approach to quantify the similarity among different clustering results .",
    "we note that we can base the _ constellation distance_on other similarity metrics different from the euclidean distance , e.g. , the well known cosine similarity .",
    "however , as we show in sec .",
    "[ sec : observation ] using the euclidean distance lets the _",
    "constellation distance_to inherit linear properties , and therefore to vary proportionally with size of the changes .",
    "observe also that the design of the _ constellation distance_offers a nice property that is particularly desirable for troubleshooting purposes .",
    "in particular , the _ constellation distance _ , which is a simple sum of euclidean distances , lets us immediately pinpoint the stars responsible for changes in the constellation . as we show in sec .",
    "[ sec : highlight ] , this aspect is crucial , as it allows us to design an automatic procedure that i ) captures changes in youtube cdn infrastructure , and ii ) highlights the edge - nodesinvolved in these changes .",
    "we run some numerical evaluation to gauge how the _ constellation distance_changes with respect to changes in the input data .",
    "we consider two main sources of changes : i ) stars that simply move from their position , and ii ) the birth of new star reflecting the generation of a new cluster in the data .",
    "for the first scenario , we generate a random constellation @xmath47 of @xmath55 stars .",
    "we randomly place stars in the unitary hypercube of edge 1 in @xmath56 according to a uniform distribution .",
    "then , we generate constellation @xmath48 by taking the centroids in @xmath47 , and repositioning them in a random sphere of radius @xmath57 centered in the centroid original position .",
    "finally , we compute @xmath58 .",
    "we repeat the experiment for @xmath59 times , and average the obtained values .",
    "[ fig : equal ] reports the average _ constellation distance_for increasing values of @xmath57 , and for different values of @xmath60 .",
    "as expected , curves pass through the origin , and linearly grow with @xmath57 .",
    "the larger is @xmath60 , the higher is the average _",
    "constellation distance_.    for the second case ,",
    "we run the same experiment while also increasing the number of stars .",
    "thus @xmath61 .",
    "[ fig : extra ] shows the results .",
    "notice the nice property of the _ constellation distance_for which the birth of new stars causes the _",
    "constellation distance_to grow by a factor that is proportional to the number of new stars .",
    "this is due to definition in eq.([eq : constdist ] ) in which no normalization is present .",
    "this property is important , as it lets the _",
    "constellation distance_nicely highlight the sudden birth ( or death ) of stars .",
    "in this section we first assess and tune the performance of dbscan in order to identify edge - nodes .",
    "we next run _ youlighter_over a longitudinal dataset to show its ability to highlight sudden changes in the youtube cdn .",
    "we first evaluate the impact of the parameter settings on the dbscan clustering results .",
    "in particular , we aim to understand how good is the matching between the clustering dbscan returns and the edge - nodeswe observe in the measurements . to perform this analysis",
    ", we consider the snapshot @xmath10 from november 4th to november 10th , 2013 , in trace _",
    "isp1-a_. we manually inspect the dataset , and , guided by the iata codes , we assign each cache a label corresponding to the edge - nodein the youtube cdn .",
    "we manually cross - check labels by inspecting server ip addresses and subnets , rtt and ttl distributions to verify the accuracy of the labels .",
    "the result is a ground truth label , gt - label , that we assign to each cache . in total",
    "we find @xmath62 caches serving more than @xmath6 flows , and belonging to 6 edge - nodes , each identified by a different gt - label .",
    "hence , the number of gt - labels is @xmath63 .",
    "we then run dbscan as described in sec .",
    "[ sec : clust ] , obtaining the clustering @xmath25 .",
    "let @xmath64 be the number of clusters .",
    "we next use the gt - labels to assign a label to caches by using a majority - voting scheme : for each cluster @xmath65 , we assign all caches @xmath66 the most frequent gt - label observed in @xmath67 .",
    "caches whose assigned label matches the gt - label are the so called true positives ( tp ) , whose number is @xmath68 .",
    "conversely , caches whose assigned label is different from their gt - label are false positives ( fp ) , whose number is @xmath69 .",
    "we compute the set of distinct labels assigned to clusters in @xmath71 , whose number is @xmath72 .",
    "we do not assign any label to the caches which dbscan classifies as noise points .    to validate the clustering we obtain with dbscan , we compute the followings indices : @xmath73[eq : tp_measure ]    1 .",
    "the true positive rate ( @xmath74 ) is the ratio between tp and the number of samples in the experiment .",
    "@xmath75 means that all labels are identical to the gt - label .",
    "@xmath76 indicates the presence of i ) mislabelled caches ( or fp ) , or ii ) noise points ( unlabeled points ) . leftmost sub - figure in fig .",
    "[ fig : indexes ] reports a simple example where the clustering algorithm mislabels a cache for both the gt - labels e-1 and e-2 , thus leading to @xmath77 .",
    "colors represent the gt - label .",
    "2 .   the _ fragmentation index _ ( @xmath78 ) captures the case when more clusters share the same gt - label . when @xmath79 , the number of clusters is identical to the number of gt - labels and dbscan assigns each cluster a different gt - label .",
    "when @xmath80 instead , we have more clusters which share the same gt - label , i.e. , dbscan splits an edge - nodeinto two or more clusters .",
    "second sub - figure in fig .",
    "[ fig : indexes ] reports an example where the clustering algorithm splits edge - nodee-1 in two different clusters , c-1 and c-2 , thus leading to @xmath81 .",
    "3 .   _ pureness index _ ( @xmath82 ) instead measures the ability to identify all edge - nodes .",
    "when @xmath83 , dbscan assigns each gt - label to at least one cluster , i.e. , it correctly identifies all edge - nodes .",
    "@xmath84 indicates that some edge - nodesdisappear into other clusters ( i.e. , their gt - label is not the majority label for any cluster ) .",
    "third sub - figure of fig .",
    "[ fig : indexes ] reports an example where the clustering algorithm groups together edge - nodeswith gt - labels e-2 and e-3 in cluster c-2 , thus leading to @xmath84 .",
    "rightmost sub - figure in fig .",
    "[ fig : indexes ] also depicts the ideal clustering result in which dbscan groups correctly the caches for all the edge - nodes , i.e. , one cluster for each gt - label ( edge - node ) , leading to the case in which all the clustering performance indices , @xmath85 , @xmath86 and @xmath87 , are equal to 1 .    finally , we use also the number of noise points as an index of bad clustering results , i.e. , the inability of dbscan to group caches into edge - nodes .",
    "we run experiments to evaluate the impact of dbscan parameters , i.e. , the choice of the features , @xmath24 and @xmath23 . for now , we set features as the 20th , 35th , 50th , 65th , 80th percentiles for both the rtt and ttl distributions .",
    "@xmath24 is typically not critical since it defines the minimum number of caches in an edge - nodedbscan needs to form a cluster .",
    "we set it to 5 .",
    "instead , we must choose @xmath23 carefully : if too small , a lot of fragmented clusters will emerge , or a large number of points will not be able to form dense areas , increasing the number of noise points ; conversely , large values tend to create few , very large clusters , that aggregates caches from different edge - nodes .    fig .  [",
    "fig : performance_perc ] reports the clustering indices when varying @xmath88 $ ] .",
    "as shown , we achieve the best performance with values between @xmath89 and @xmath90 ( in between the vertical solid lines ) . for such values , all the three indices are equal or very close to 1 .",
    "smaller values of @xmath23 increase the number of noise points and artificially fragment edge - nodesinto multiple clusters .",
    "tpr decreases , while @xmath86 first increases , then decreases due to caches dbscan labels as noise ( more than 300 caches fall in the noise for @xmath91 ) . for @xmath23 larger than 0.052 dbscan merges edge - nodesinto too few clusters , and both @xmath87 and the @xmath85 considerably decrease .",
    "we repeat this analysis for other traces and for different snapshots . we find @xmath92 $ ] to give consistent results . in the following we choose @xmath93 .",
    "we also run a set of experiments to choose which features to use to capture the rtt and ttl distributions .",
    "we replace the vector of percentiles @xmath94 in eq.([eq : norm ] ) with simple statistics , e.g. , the mean and the standard deviation .",
    "the goal of this experiment is to verify whether we can replace the percentiles with some measure which does not require us to build an empirical distribution , a task which requires to collect a fairly large number of flows per cache .",
    "[ fig : performance_std ] depicts results for varying @xmath23 .",
    "unfortunately , dbscan shows a good clustering for a tiny interval of values of @xmath23 , e.g. , @xmath95 . for @xmath96 , dbscan merges edge - nodestogether , so that @xmath80 and @xmath97 . by investigating further",
    ", we observe that the mean and standard deviation vary widely among caches in the same edge - node .",
    "this variability is due to the tails of the distributions which include outliers , e.g. , very large rtt samples which bias the mean and standard deviation , but have little or no impact on the percentiles .",
    "indeed , the percentiles of caches in the same edge - nodeare very similar , except those that gauge the tail ( see the 95th percentiles in fig.[fig : perc1 ] ) .",
    "this suggests that the choice of the percentiles to populate the vector @xmath94 is more robust with respect to other simpler statistics .",
    "we run other experiments with different percentile choices that we do not report for the sake of brevity .",
    "we observe no significant differences if we avoid considering percentiles in the tail .",
    "similarly , we observe that using both rtt and ttl gives better results than considering rtt or ttl alone .",
    "in this section we run _ youlighter_over the four traces in tab .",
    "[ tab : desc - traces ] to validate its capability of highlighting changes in the youtube cdn .",
    "the rationale is to let the isp observe macroscopic changes that may affect a large number of users , and which may last for moderate time periods .",
    "we consider @xmath98  days , and we start a new snapshot at midnight of every day .",
    "snapshots form a sliding window that moves forward every day , and aggregates statistics for the past seven days .",
    "@xmath98  days guarantees to collect large enough number of samples for the large subset of the most used caches .",
    "[ fig : costelation_values ] shows the evolution of the",
    "_ constellation distance_(red solid curve , left y - axes ) over time .",
    "it also depicts the evolution over time of the number of caches that remain in the noise after clustering ( black dashed curve , right y - axes ) . from top to bottom , plots refer to _ isp1-b _ , _ isp1-a_and _ isp1-c_. x - axes reports daily snapshots , starting from april 1st , 2013 .",
    "as shown , the _ constellation distance_is very good at highlighting events . indeed , according to sec .",
    "[ sec : observation ] , a @xmath99 suggests that the clustering at time @xmath100 is very different to the one at time @xmath101 .",
    "thanks to the data aggregation we obtain with the clustering , we can easily analyze the highlighted events , and quickly identify the edge - nodes involved in the changes .",
    "we investigate these events , and verify that they all correspond to sudden changes in the edge - nodesused by youtube in serving isp customers . in the following ,",
    "we illustrate the most relevant ones , i.e. , those with a @xmath102 .",
    "we first investigate an event _ youlighter_highlights in three different datasets .",
    "it starts on may 2nd ( snapshot 27 ) , may 7th ( snapshot 32 ) , and may 13th ( snapshot 38 ) for _ isp1-b _ , _ isp1-a_and _ isp1-c _ , respectively . _",
    "constellation distance_peaks above 60 . starting from then ,",
    "both @xmath46 and the number of noise points are very large .",
    "this indicates an unstable behavior , with many caches that dbscan can not successfully group together , and the clustering pattern that keeps changing day by day , for more than 40 days .        to give the intuition of what happened , fig .  [ fig : percanom ] shows the per - cache percentiles of the rtt that we measure in _ isp1-a_before , during , and after the anomalous event .",
    "first , we notice that most of the edge - nodessuddenly change : e-1 , e-4 , e-5and e-6actually `` disappear '' from the clustering pattern , and during the event , many previously unseen caches in edge - nodee-2start serving lots of customers ( observe the center plot ) .",
    "second , and more surprisingly , the path properties to these new caches is by far different from paths to other caches in e-2 : the rtt percentiles are much larger ( @xmath103ms versus @xmath104ms for the 50th percentile ) and much more variable . despite these caches",
    "share the same iata code ( e-2 ) , the path to reach them is different from the path of other caches in e-2 , with the former possibly being severely congested .",
    "some of these caches form new clusters , but most of them become part of the noise : indeed , their features do not correspond to the ones dbscan s tuning is expecting , i.e. , the distance between points is higher then @xmath93 .",
    "we call these caches bad - e-2 , in opposition to the small share of caches still belonging to e-2 , but showing small rtt , i.e. , good - e-2 .",
    "we now analyze the impact of such change on the quality of experience the isp customers perceive .",
    "we report in fig .",
    "[ fig : thru ] the distributions of the download throughput obtained by video retrieved by caches in e-3 , the best edge - nodeto isp customers , good - e-2and bad - e-2 .",
    "the difference is striking : while videos served by e-3and good - e-2have throughput that allows to enjoy youtube with no major impact on the qoe ( @xmath1051,000  kb / s in 63% of the cases ) , the throughput for bad - e-2caches is below 500  kb / s ( 250  kb / s ) in 75% ( 40% ) of the cases , clearly not enough to enjoy a video with a satisfiable qoe .",
    "[ tab : formats ] corroborates above observation reporting the fractions of video ( and audio ) formats seen in flows handled by both good - e-2and bad - e-2 .",
    "for this analysis we consider only dash formats , as for these formats the cache delivering the video automatically adapts the quality of the video stream depending on the congestion it measures on the path to the client .",
    "as shown , good - e-2serves larger fractions of high - definition videos .",
    "conversely , the share of videos encoded with low - definition ( 144p and 240p ) increases for bad - e-2 .",
    "this confirms that bad - e-2experienced possible congestion during the monitored period , severely impairing the qoe of the users .        by double checking this event with the isp network support team ,",
    "we confirm the incident involved most of their customers , increasing dramatically the complaining at their customer support .",
    "this confirms the pervasiveness of this event upon isp customers .",
    "we manually cross check other events , and find that some of those affected only part of the isp customers .",
    "this shows that youtube cdn allocates customers to edge - nodesusing a fine grained granularity , i.e. , the load - balancing allows to identify small groups of clients by using the client ip address ( or network ) .",
    "for instance , on october 2nd ( snapshot 180 ) and october 9th ( snapshot 187 ) _ youlighter_highlights two sudden changes in the _ isp1-a_and _",
    "isp1-c _ , as the _ constellation distance_peaks over @xmath106 .",
    "inspecting the astral distances one by one , we observe that the changes are due to 3 edge - nodes(e-4 , e-5and e-6 ) out of 7 that suddenly `` appear '' in snapshot 180 and `` disappear '' in snapshot 187 .",
    "the remaining four edge - nodesthen serve the videos for customers in _ isp1-a_and _",
    "isp1-c_. we analyze the impact of the presence of such caches on the qoe by measuring the aggregate download throughput before , during and after their permanence , but we do not appreciate any significant change . also in this case we double check the event with the isp support team and we confirm that the change had no influence on the qoe as the customer support did not receive any meaningful complaining in the considered period .    finally , observe that for _ isp1-b _ , we do not detect any change ( @xmath107 ) in the same period , as youtube s cdn keeps serving customers with the same group of edge - nodes , and we do not notice any impact on the qoe for this event too .          as a last set of experiments , we run _",
    "youlighter_on the _ isp2_dataset , which we recall we collect in isp2 , a different isp in a different country .",
    "we run _ youlighter_with the same parameters we tune for isp1 , i.e. , without going through @xmath23 optimization .",
    "indeed we aim to check whether if the edge - nodemodel that dbscan creates is general and robust enough to work in a completely different scenario .",
    "we repeat the experiment of fig .  [",
    "fig : costelation_values ] for _ isp2_dataset , and we analyze the evolution of the _",
    "constellation distance_and number of noise points .",
    "we report the results in fig .",
    "[ fig : costelation_polonia ] . to check",
    "if the clustering correctly identifies the edge - nodes , we select five different snapshots at random among the ones where _",
    "youlighter_highlights no events .",
    "again , we use the iata codes as ground truth , and we manually check ip address subnets , rtts and ttls to see if some suspicious cache is present in a cluster . the clustering results in perfect",
    "match with the ( possible ) edge - nodesin the ground truth .",
    "this despite edge - nodes , path , and isp in this dataset are completely different .",
    "we then check two suspicious events .",
    "the first one occurs from march 7th to march 10th , 2014 ( snapshots 1 - 4 , @xmath108 ) , and the second one happens on march 18th , 2014 ( snapshot 12 , @xmath109 ) .",
    "we observe that the first anomaly is due to a change in the network path to reach a small group of caches in e-2 .",
    "we observe that this deviation does not influence the qoe perceived by the users .",
    "for the second event , by comparing the clustering at snapshot 12 with the following snapshot , i.e. , snapshot 13 ( march 19th ) , we observe a notable change in the infrastructure of the youtube cdn : as depicted in fig .",
    "[ fig : cd_poland ] which compares the per - cache rtt percentiles , all caches belonging to edge - nodee-7disappear .",
    "also in this case , the change has no evident impact on users qoe , as the average download throughput does not vary",
    ". however , we notice that the edge - nodee-7represents a much more expensive route for the isp2 , since it is located in an remote isp for which no peering agreements are in place .",
    "in this paper we proposed a novel system , named _ youlighter _ , that leverages passive observation of network traffic and unsupervised machine learning techniques to automatically monitor and identify changes in the youtube cdn .",
    "based on the well known dbscan clustering algorithm , _",
    "youlighter_is able to automatically group thousands of caches into few edge - nodes . to then compare the results of clustering obtained considering different snapshots collected in consecutive time intervals , we propose the _ constellation distance _ , a novel framework that , for the first time to the best of our knowledge , allows to easily pinpoint changes in clusters .",
    "_ youlighter_is validated using a large dataset of traces reporting the activity of users regularly accessing youtube .",
    "our results are excellent : we show that after a short and simple tuning procedure to find the best setup for dbscan , _",
    "youlighter_can detect anomalous events that happened in youtube cdn .",
    "for instance , we could notice a large transformation in a crucial edge - nodeof youtube cdn which notably impaired the qoe perceived by the monitored isp customers for more than 40 days .",
    "we believe that _ youlighter_may represent a promising opportunity for isps , network administrators , developers and researchers to monitor the traffic generated by youtube cdn .",
    "isps , for instance , may employ _",
    "youlighter_to design automatic traffic engineering policies or to promptly react when changes in youtube cdn impair the qoe of their customers .",
    "our ongoing efforts are focused on three directions : first , we are working to automate the tuning of _ youlighter _ s parameters , and , thus , its whole operation process .",
    "second , we are developing an online deployment of _ youlighter _ , capable of detecting changes in youtube cdn in real time .",
    "third , we are adapting it to consider other use cases .",
    "t.  hossfeld , r.  schatz , e.  biersack , and l.  plissonneau .",
    "internet video delivery in youtube : from traffic measurements to quality of experience . in _",
    "data traffic monitoring and analysis _ ,",
    "volume 7754 , pages 264301 .",
    "springer , 2013 .",
    "h.  yan , a.  flavel , z.  ge , a.  gerber , d.  massey , c.  papadopoulos , h.  shah , and j.  yates .",
    "argus : end - to - end service anomaly detection and localization from an isp s point of view . in _",
    "ieee infocom _ , 2012 .",
    "y.  wang , y.  xiang , and s .- z .",
    "an automatic application signature construction system for unknown traffic . in _",
    "concurrency and computation : practice and experience _ ,",
    "volume  22 , pages 1927  1944 .",
    "wiley online library , 2010 .",
    "r.  d. torres , m.  y. hajjat , s.  g. rao , m.  mellia , and m.  m. munafo . inferring undesirable behavior from p2p traffic analysis .",
    "in _ sigmetrics performance evaluation review _ , volume  37 , pages 25  36 .",
    "acm , 2009 ."
  ],
  "abstract_text": [
    "<S> youtube relies on a massively distributed content delivery network ( cdn ) to stream the billions of videos in its catalogue . </S>",
    "<S> unfortunately , very little information about the design of such cdn is available . </S>",
    "<S> this , combined with the pervasiveness of youtube , poses a big challenge for internet service providers ( isps ) , which are compelled to optimize end - users quality of experience ( qoe ) while having no control on the cdn decisions .    </S>",
    "<S> this paper presents _ youlighter _ , an unsupervised technique to identify changes in the youtube cdn . </S>",
    "<S> _ youlighter_leverages only passive measurements to cluster co - located identical caches into _ edge - nodes_. this automatically unveils the structure of youtube s cdn . </S>",
    "<S> further , we propose a new metric , called _ _ constellation distance _ _ , that compares the clustering obtained from two different time snapshots , to pinpoint sudden changes . while several approaches allow comparison between the clustering results from the _ same _ dataset , no technique allows to measure the similarity of clusters from _ different _ datasets . </S>",
    "<S> hence , we develop a novel methodology , based on the _ constellation distance _ , to solve this problem .    by running _ </S>",
    "<S> youlighter_over 10-month long traces obtained from two isps in different countries , we pinpoint both sudden changes in edge - nodeallocation , and small alterations to the cache allocation policies which actually impair the qoe that the end - users perceive . </S>"
  ]
}