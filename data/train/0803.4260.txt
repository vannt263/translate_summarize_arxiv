{
  "article_text": [
    "in this paper we study the two - dimensional generalization for _ knapsack _ : we are given a set of squares , each of which is associated with a profit .",
    "the goal is to pack a subset of the squares ( items ) into a rectangle ( bin ) to maximize the total profit packed .",
    "the problem is np - hard in the strong sense even if each item is an unweighted square ( i.e. , its profit is equal to its area ) @xcite .",
    "a little surprisingly , the research for approximation algorithm has started quite recently : jansen and zhang @xcite , caprara and monaci @xcite , harren @xcite etc .    *",
    "related work * there are many literatures on rectangle packing and square packing .",
    "for a two dimensional knapsack problem in which a subset of a given set of rectangles are packed into a given rectangular bin to maximize the total profits in the bin .",
    "jansen and zhang proposed @xmath1 approximation algorithm @xcite . when all items are squares and their profits are equal to their areas , fishkin , gerber , jansen and solis - oba @xcite presented a ptas , which was also obtained by han , iwama and zhang independently @xcite .",
    "jansen and zhang @xcite proposed a ptas for packing squares into a rectangular bin to maximize the number of squares packed in the bin @xcite .",
    "harren @xcite proposed @xmath2 approximation algorithm for packing squares into a _ unit square _ bin .",
    "but his algorithm is not applicable to pack squares into a _",
    "rectangular _ bin since his algorithm requires that every side of the bin must have the same length .",
    "fishkin , gerber and jansen @xcite obtained a @xmath3-approximation algorithm for packing a set of rectangles with profits into a large resource bin with width 1 and height larger than @xmath4 .",
    "another related work is 2 dimensional bin packing problem in which all rectangles have to be packed into a unit square bin to minimize the number of bins required . when all items are squares , ferreira et al .",
    "@xcite gave an approximation algorithm with asymptotic worst - case ratio bounded above by 1.988 .",
    "kohayakawa et al .",
    "@xcite and seiden and van stee @xcite independently obtained approximation algorithms with asymptotic worst - case ratio of at most @xmath5 ( for any @xmath6 ) .",
    "these results were recently improved by bansal , correa , kenyon and sviridenko @xcite .",
    "they proposed an asymptotic ptas for packing @xmath7-dimensional cubes into the minimum number of unit cubes .",
    "for the online case , if the number of bins is unbounded , the best known asymptotic worst case ratio is 2.1439 @xcite .",
    "there are also some research on the multiple knapsack problem .",
    "kellerer @xcite , first gave a ptas for a special case of this problem in which all the knapsacks have identical capacity @xcite .",
    "chekuri and khanna @xcite obtained a ptas for the general multiple knapsack problem . for packing rectangles into multiple identical rectangular bins , fishkin et al .",
    "@xcite gave a @xmath1 approximation algorithm .",
    "* main results and techniques : * we first observe that the techniques used in mutilple knapsack problem @xcite are useful for the problem of packing weighted squares into rectangular bins ( the bins may have different dimensions ) with large resources , where _ large resource _ means that the height of a bin is much larger than the width , and give a polynomial time approximation scheme ( ptas ) for the above problem , then apply the ptas to the problem of packing squares with profits into a rectangular bin and get a @xmath0 approximation algorithm . for packing squaures into a rectangular bin ,",
    "we first introduce a simple algorithm by the techniques used in 2d bin packing @xcite problems and show that if there are too many large squares packed or the rest area for packing squares is not small , the algorithm has a nice performance , then we focus on the case in which there are a few large squares packed and the rest area for small squares is also few . we propose a novel approach of packing a few large items such that the packing does not affect the future small items packing too much , and call it _ corner _ packing . for packing small squares into the rectilinear polygons which is generated after packing large squares into the bin ,    *",
    "we first dissect the polygons into rectangular blocks such that the optimal value of packing small squares into the blocks is near the optimal value of packing small squares into the polygons , * then call the method used in multiple knapsack problem @xcite , to guess one sublist which has a feasible packing and profit at least @xmath8 , where @xmath9 is the optimal value for packing small squares into the blocks , *",
    "lastly , we exploit the techniques used in strip packing @xcite to pack items in each block",
    ".    * worst case ratio : * we adopt the standard measure _ worst case ratio _ to evaluate approximation algorithms . for any input list @xmath10 ,",
    "let @xmath11 be the total profit packed by approximation algorithm @xmath12 and @xmath13 be the optimal value .",
    "the _ worst case ratio _ of algorithm @xmath12 is thus defined as @xmath14    * _ p(@xmath15 ) , w(@xmath15 ) _ * : given a square @xmath16 , we use @xmath17 and @xmath18 to denote its profit and area respectively . and given a list of squares @xmath19 , we define @xmath20 and @xmath21 .",
    "instance : given an input list @xmath22 of @xmath23 squares with profits and a set of rectangular bins @xmath24 where @xmath25 and @xmath26 for all @xmath27 , @xmath28 , @xmath29 are constants .",
    "objective : maximize the total profit packed in @xmath30 .    based on the ideas from the seminal papers @xcite , we give a ptas for the above problem .",
    "there are three steps in the ptas .",
    "we first guess a subset of squares which can be packed into @xmath30 and whose total profit is near the optimal value through the technique of rounding the input instance into @xmath31 classes .",
    "then for each bin , we guess the number of items packed in that bin from each class such that our guess is also near the optimal solution , i.e.,we do not lose too much profit . after matching items into bins , we use the strip packing algorithm to pack items in each bin .",
    "* rounding and guessing : * here , we consider square packing .",
    "since there is an natural order relation between any two squares , the techniques used in multiple knapsack problem @xcite are useful for square packing too .",
    "we first round the instance into a well structured instance which has @xmath32 distinct profits , and more items in each profit class have at most @xmath33 distinct sizes ( side length ) .",
    "then we select a subset items which can be packed into the bins and has the profit as least @xmath3 time the optimal solution .",
    "but , if the items are rectangles , we do not have the above result , since there is not an order relation between any two rectangles .",
    "given an above instance @xmath34 with @xmath23 items , in polynomial time @xmath35 , we can obtain instances @xmath36 such that    * @xmath37 for @xmath38 , where @xmath39 is a sublist of list @xmath22 . * for @xmath38",
    ", items in @xmath39 have @xmath32 distinct profits , and more items in each profit class have at most @xmath33 distinct sizes ( side length ) .",
    "* there is an index @xmath40 , @xmath38 , such that @xmath39 has a feasible packing in @xmath30 and @xmath41 .",
    "[ lemma : guessing ]    we show how to construct instance @xmath36 from @xmath34 such that one of them satisfies the conditions .",
    "there are four steps , which are basically from @xcite .",
    "* guess a value @xmath42 such that @xmath43 . * round down the profits of items into @xmath32 classes such that @xmath44 , where @xmath45 is the @xmath40th item s profit and @xmath46 is the one after rounding down , where @xmath23 is the number of items .",
    "* guess a set of sublists based the value @xmath42 and the rounded profits of items such that one of them is feasible to pack into the set of bins ( blocks ) @xmath30 and its total profit is at least @xmath47 . * using the techniques in bin packing @xcite , in each distinct profit class ,",
    "reduce the number of distinct sizes into @xmath48 such that we lose the profit at most @xmath49 .",
    "hence , totally , each of sublists has @xmath31 distinct size values and profits .",
    "next , we give the details for the above four steps .",
    "first , we show how to guess @xmath42 . given a sufficiently small constant @xmath50 ,",
    "let @xmath51 denote the largest value among item profits .",
    "we know the optimal solution is bounded by @xmath52 .",
    "so we guess @xmath42 from the set @xmath53 ( @xmath54 follows from @xmath55 . )",
    "therefore , one of the values in the above set is guaranteed to satisfy the desired property for @xmath42 .    given a value @xmath42 such that @xmath56",
    ", then we show how to massage the given instance into a more structured one has few distinct profits .    1 .",
    "discard all items with profits at most @xmath57 .",
    "2 .   consider the other items and divide all profits by @xmath57 such that after scaling each profit is at most @xmath58 .",
    "3 .   round _ down _ the profits of item to the nearest power of @xmath59 .",
    "it is easily seen that only an @xmath60 fraction of the optimal profit lost by the above transformation . since @xmath61",
    ", we have @xmath62 the last inequality follows from @xmath63 .",
    "therefore , we can transform the instance into a new instance with @xmath32 distinct profits such that only an @xmath60 fraction of the optimal profit is lost .",
    "next we show how to guess the items to pack on the instance with @xmath32 distinct profits .",
    "let @xmath64 be the number of distinct profits in our new instance .",
    "we partition the input set of squares @xmath65 into @xmath66 set @xmath67 with items in each set having the same profit .",
    "let @xmath68 be the items chosen in some optimal solution and let @xmath69 .",
    "recall that we have an estimate @xmath42 of the optimal value .",
    "if @xmath70 , we ignore the set @xmath71 ; no significant profit is lost .",
    "hence we can assume that @xmath72 and approximately guess the value @xmath73 for @xmath74 , where @xmath75 is the total profit in @xmath76 .",
    "more precisely , for each @xmath27 we guess a value @xmath77 $ ] such that @xmath78 where @xmath79 $ ] stands for the set of integers 0 , 1 , .... , @xmath80 .",
    "we show how the numbers @xmath81 enable us to identify the items to pack and then show how the values @xmath82 can be guessed in polynomial time .",
    "given the value @xmath81 we order the items in @xmath71 in increasing size values ( side length ) .",
    "let @xmath83 denote the profit of an item in @xmath71 .",
    "if @xmath84 , pick the largest number of item from this ordered set whose cumulative profit does not exceed @xmath85 . if @xmath86 we pick the smallest number of items , again in increasing order of side lengths , whose cumulative profits exceeds @xmath85 .",
    "the choice of items is thus completely determined by the choice of the @xmath81 . for a tuple of values @xmath82 ,",
    "let @xmath87 denote the set of items packed as described above .    from the above selection",
    ", there exists a valid tuple @xmath88 with each @xmath77 $ ] such that @xmath87 has a feasible packing in @xmath30 and @xmath89 .",
    "now we show that the values @xmath82 can be guessed in polynomial time . before that",
    ", we introduce a useful claim .",
    "@xcite let @xmath90 be the number of @xmath91-tuples of non - negative integers such that the sum of tuple coordinates is equal to @xmath7 .",
    "then @xmath92 . if @xmath93 then @xmath94",
    "[ claim : counting ]    by claim [ claim : counting ] , the number of @xmath66-tuples @xmath88 with @xmath77 $ ] and @xmath95 is @xmath96 .",
    "next we show how to reduce the number of distinct sizes ( side length ) in each profit class .",
    "the basic idea is the one used in approximation schemes for bin packing @xcite .",
    "let @xmath12 be a set of @xmath91 items with identical profit .",
    "we order items in @xmath12 in non - decreasing sizes and divide them into @xmath97 groups @xmath98 with @xmath99 containing @xmath100 items each and @xmath101 containing @xmath102 items .",
    "we discard the items in @xmath103 and for @xmath104 we increase the size of every item in @xmath105 to the size of the smallest item in @xmath106 . since @xmath12 is ordered by size , no item in @xmath105 is larger than the smallest item in @xmath106 for each @xmath107 .",
    "it is easy to see that if @xmath12 has a feasible packing then the modified instance also has a feasible packing .",
    "we discard at most an @xmath29 fraction of the profit and the modified sizes have at most @xmath108 distinct values . applying this to each profit class we obtain an instance with @xmath31 distinct size values .    hence , we have this lemma .    * distributing the selected items into each bin *    after guessing a polynomial number of sublists ,",
    "next we consider how to distribute the selected items in each sublist into bins . easily to see , the possibilities to assign the selected items into bins is bounded by @xmath109 , which is an exponential size of @xmath23 , where @xmath28 is the number of bins and @xmath23 is the number of items to be packed . but we can guess a subset from the selected items in a polynomial time such that the total profit in the subset is near the optimal solution .",
    "after step 1 , we have @xmath110 classes in the input instance .",
    "let @xmath81 be the number of items of the @xmath27th class and let @xmath111 be the number of items of the @xmath27th class packed in the @xmath40th bins , where @xmath112 .",
    "[ lemma : mapping ] we can guess a set of numbers @xmath113 in polynomial time such that @xmath114 , where @xmath115 and @xmath116 and @xmath28 is the number of bins .    for the @xmath40th bin , we guess @xmath113 items from the @xmath27th class . if @xmath117 then we can guess a number @xmath113 such that @xmath118 in @xmath119 time .",
    "else , we guess a number @xmath113 from the set @xmath120 such that @xmath114 . since @xmath121 ,",
    "the number of guesses required to obtain a single @xmath113 is bounded by @xmath122 , for each class , the total number of guesses for all @xmath113 is bounded by @xmath123 , where @xmath116 . therefore for all the @xmath124 size classes",
    "the total number of guesses for is bounded by @xmath125 , which is a polynomial of @xmath23 , where @xmath28 and @xmath29 are constants .",
    "since all the items in each size class have the same profit and by lemma [ lemma : mapping ] we have @xmath126 , there exists one assignment which is feasible to @xmath30 and keeps at least @xmath3 times the profits .",
    "next we consider how to packing items into each bin .",
    "* packing each sublist into each bin * : in each bin , we have the following property @xmath127 then the techniques used in @xcite are helpful to pack all squares into the bins .",
    "first , we first give an important lemma for packing squares into a bin with large resource , called _",
    "cutting technique_.    given an input list @xmath10 of squares with sides at most @xmath29 and two rectangular bins @xmath128 , @xmath129 , then @xmath130 where @xmath131 is the optimal value for packing list @xmath10 into bin @xmath30 .",
    "[ lemma : cutting ]    now we construct a packing in bin @xmath132 from an optimal packing in bin @xmath133 and prove its profit is at least @xmath134 .",
    "consider an optimal packing in bin @xmath133 , we cut @xmath133 into @xmath135 pieces of slices , say @xmath136 respectively , such that every slice has an exact width @xmath137 ( except the last one ) , shown as fig .",
    "[ fig : strips ] .",
    "( note that some squares may be cut into two parts , one part in @xmath71 and another part in @xmath138 ) .     into slices ]    then we find a slice @xmath71 such that @xmath139 and remove all squares _ completely _ contained in slice @xmath71 if any .",
    "observe that after the above removal , all squares remaining in bin @xmath133 can be packed into @xmath132 .",
    "hence , @xmath140 .",
    "@xcite there is an algorithm @xmath12 which , given a list @xmath10 of @xmath23 square and a positive @xmath29 , produces a packing of @xmath10 in a strip of width 1 and height @xmath11 such that @xmath141 .",
    "[ lemma : stripptas ]    for packing small squares into a constant number of bins , for each bin , if @xmath142 , then there is a polynomial time algorithm with an output at least @xmath143 , where @xmath144 is the optimal value .",
    "[ lemma : manyresource ]    given an instance @xmath34 , where @xmath22 is the set of small squares with profits and @xmath24 is the set of rectangular bins , by the method in lemma [ lemma : guessing ] , we guess a subset @xmath145 such that @xmath39 has a feasible packing in @xmath30 and @xmath41 .    in an instance @xmath146 ,",
    "we first guess @xmath147 by lemma [ lemma : mapping ] . then according to @xmath113 value we assign the items to each bin and",
    "use the aptas in lemma [ lemma : stripptas ] to pack items in each bin , where @xmath116 .",
    "if in each bin @xmath148 the height used by the aptas in lemma [ lemma : stripptas ] is bounded by @xmath149 , then we keep the assignment otherwise reject the assignment . since there is a @xmath150 such that @xmath150 has a feasible packing in @xmath30 .",
    "after all the guesses , there is at least one assignment remained . for the assignment",
    ", we apply the aptas in lemma [ lemma : stripptas ] and the cutting techniques in lemma [ lemma : cutting ] such that in each bin , the profit keeps at least @xmath3 times the optimal value .",
    "hence we have this lemma .",
    "based on previous techniques used for 2d packing problem @xcite and the _ greedy _ packing ( which is given in appendix ) , we introduce a simple algorithm @xmath151 which is implied in @xcite for packing a set of squares into a bin @xmath152 , where @xmath153 .",
    "there are two steps in @xmath151 : first group all squares by their sizes and guess one group which does not significantly affect the optimal packing and delete it from the input list , then pack large items by enumeration , lastly append small items in the `` gap '' of the bin .",
    "next , we give the details of the two steps .",
    "* grouping * : for an integer @xmath154 , where @xmath155 is sufficiently small and @xmath153 is the bin height , we select @xmath156 points in the region ( 0,1 ] , @xmath157 as follows @xmath158 then the interval ( 0,1 ] is divided into @xmath159 intervals , @xmath160 , where @xmath161 $ ] , @xmath162 , @xmath163 $ ] and @xmath164 $ ] .",
    "* notation : * in the following , given a list @xmath10 of squares , @xmath165 denotes the list in which all square s sides are in interval @xmath166 , @xmath167 denotes the total area of @xmath165 , @xmath168 the total profits of @xmath165 , @xmath169 the number of squares in @xmath165 , where @xmath170 .     *",
    "packing : *    1 .",
    "guess an index @xmath27 such that @xmath171 .",
    "2 .   get all feasible packing for @xmath172 , pack each of them into the bin , then partition the uncovered space into rectangular bins(blocks ) in the method @xcite and append @xmath173 into these bins by the _",
    "greedy _ algorithm .",
    "3 .   output the one with the largest profit .",
    "since there are @xmath159 sublists @xmath174 in @xmath10 , then the guess in step 1 of @xmath151 is always feasible , where @xmath175 . after selecting an index @xmath27",
    ", we define all items in @xmath172 as _ large _ items and all items in @xmath173 as _ small _ items .",
    "note that if @xmath176 then there are no _ large _ items , and if @xmath177 then there are no _ small _ items .",
    "@xmath151 s worst case ratio is related to the number of _ large _ items in @xmath178 and the rest area for small items , where @xmath178 is a sublist of @xmath10 to produce an optimal solution .    @xcite given _ large _ items with sides larger than @xmath179 which can be packed in the bin @xmath152 , and _ small _ items with sides at most @xmath180 , where @xmath181 , if the total area of all the squares is at most @xmath182 , where @xmath183 , then all can be packed in the bin .",
    "[ fact : append ]    @xcite after packing large items , if the rest area in the bin is at least @xmath184 , then @xmath185 , where @xmath186 .",
    "[ lemma : restarea ]    @xcite let @xmath187 be the number of _ large _ items in @xmath178 .",
    "i ) @xmath188 if @xmath189 ; ii ) else @xmath190 .",
    "[ lemma : m+1 ]    @xcite algorithm @xmath151 is ran in polynomial time of @xmath23 .",
    "[ lemma : time ]",
    "to pack squares into a rectangular bin , there are a lot of approaches , the most two studies are _ nfdh _ @xcite and _ bl_. in this section , we first give a new approach , called _ corner _ packing , which includes the above two approaches . then we analyze the _ corner _ packing later and show that it is one of the key points for improving the worse case ratio .    during packing squares into the rectangular bin",
    ", the uncovered space of the bin may get into the rectilinear polygons . the _ corner _ packing ( shown as in fig .",
    "[ fig : nfdhdeco](b ) ) can be regarded as a sequence of packing .",
    "every time when one square is packed into the bin , we obey the following rules :    * select one vertex of the current rectilinear polygons at which the interior angle is 90 degrees , * place the square such that one of its corners coincides with the vertex we selected . after packing ,",
    "we get the new rectilinear polygons .",
    "note that both nfdh and bl @xcite belong to _ corner _",
    "packing , where bl packing is to pack squares in the bin as bottom as possible then as left as possible .",
    "[ lemma : vertex ] assume @xmath23 squares are packed in the bin by corner packing , then + i ) there are at most @xmath191 vertices of all the rectilinear polygons , + ii ) there are at most @xmath192 possibilities to pack these @xmath23 squares in the bin by corner packing .",
    "( refer to the proof in the appendix ) .",
    "let @xmath187 be the number of _ large _ items in @xmath178 , where @xmath178 is a sublist of @xmath10 to get the optimal solution .",
    "by lemma [ lemma : m+1 ] , if @xmath193 is very large , then algorithm @xmath151 has a good performance .",
    "so , to improve algorithm @xmath151 , we have to study the case in which @xmath193 is very small .",
    "note that when the bin is a unit square , the situation becomes a relatively simple .",
    "since when @xmath194 we can transform the original packing into a special strip packing ; when @xmath195 we can estimate there must be much more space left for small squares than the wasted area .",
    "this is the main idea in harren s paper@xcite . if the bin is not longer a unit square , his algorithm does not work very well . to improve algorithm @xmath151 ,",
    "we are faced with two problems :    * how to pack a few large items such that the packing does not affect too much the future small items packing ?",
    "( how to allocate large items in the bin . )",
    "* how to pack small items in the gaps ( rectilinear polygons ) generated after packing large items ?",
    "next , we give our solutions for the above questions and propose a refined algorithm called @xmath196 with the worst case ratio @xmath197 .",
    "recall that , given an @xmath198 , if a square s side length is at least @xmath199 then it is called _ large _ , else its side length is at most @xmath200 then it is called _ small_. and there is a gap between large items and small items , which is very important for packing large items .",
    "next we show that _ corner _ packing is a good packing which does not significantly affect future small square packing when there are a few large items .",
    "let @xmath187 be the number of _ large _ items in @xmath178 . if @xmath201 , then @xmath202 , where @xmath203 is the optimal value of packing @xmath10 into the bin and @xmath204 is the optimal value of packing @xmath10 into the bin such that all large squares are packed by _",
    "corner packing_. [ lemma : corner ]    here , we just give the proof when @xmath205 , since the proof for @xmath206 is involved .",
    "let @xmath207 be the four large squares in an optimal packing @xmath178 .",
    "without loss of generality assume @xmath207 are placed in the bin as fig .  [",
    "fig : optimal1](1 ) .",
    "note that a large item has side at least @xmath199 and a small item has side at most @xmath200 , where @xmath181 .",
    "we cut the bin into three parts , two rectangular blocks @xmath208 , @xmath209 and a rectilinear polygon @xmath210 as shown as fig .",
    "[ fig : optimal1](2 ) .",
    "now we define two new rectangular blocks @xmath211 and @xmath212",
    ". then we have @xmath213 where @xmath131 is the optimal value of packing @xmath10 into the bin @xmath30 and @xmath214 is the optimal value of packing @xmath10 into three rectilinear polygons @xmath215 .",
    "this can be seen as follows , all squares packed into the bin @xmath30 as shown in fig .",
    "[ fig : optimal1](1 ) can be packed into three rectilinear polygons @xmath215 . by lemma [ lemma :",
    "cutting ] , for any list @xmath10 of small squares , we have @xmath216 then @xmath217",
    "so , by ( [ eqn : expending ] ) , ( [ eqn : upperbound ] ) , @xmath218 and we have @xmath219 , where @xmath220 is the optimal value of packing @xmath10 into the bin with @xmath221 at one corner , shown as in fig .",
    "[ fig : optimal1](3 )",
    ". hence @xmath222 by the similar proof , we have @xmath223 and @xmath224 where @xmath225 is the optimal value of packing a set @xmath226 into the bin with all the items in @xmath226 at corners of the bin .",
    "therefore , we have @xmath227 the last inequality follows from @xmath228 .",
    "hence , this lemma holds .      after packing large items , the uncovered space in the bin",
    "may be a set of rectilinear polygons .",
    "our strategy for packing small squares into the polygons are below :    * dissect the polygons into rectangular blocks such that the optimal value of packing small squares into the blocks is at least @xmath229 , where @xmath230 is the optimal value for packing small squares into the polygons . *",
    "to pack small items into blocks , we use the ptas in section [ sec : resources ] of packing squares into rectangular bins with large resources .",
    "* dissection : * after packing few large squares into the bin by _ corner _",
    "packing , we dissect the rectilinear polygons into rectangular blocks , such that the dissection does not affect the optimal packing insignificantly",
    ".    if there are at most 4 large squares packed , and the total area of the large squares packed is at least @xmath231 , then there exist a dissection of the polygons ( the uncovered space of the bin ) into blocks such that @xmath232 where @xmath9 ( @xmath230 ) is the optimal value of packing small squares into blocks ( polygons ) .",
    "[ lemma : dissect ]    in this proof , we just give our dissection for four large squares packed , shown as in fig .",
    "[ fig : our4 ] and [ fig:2cases ] ( by dotted lines ) , since the number of large squares is less than 4 , we have the similar dissection .            except for case ( d ) , if the rectilinear polygons are dissected into blocks as shown in fig .",
    "[ fig : our4 ] , then we have a set of five rectangular blocks @xmath233 , where @xmath25 and @xmath234 for @xmath235 .",
    "( otherwise we can exchange @xmath236 and @xmath237 ) using the same techniques in lemma [ lemma : corner ] , we define a new set of five blocks @xmath238 , where @xmath239 for @xmath235",
    ". let @xmath210 be the polygon(s ) after packing large squares in the bin , and @xmath10 be a list of small squares .",
    "since each small square has side length at most @xmath240 , we have @xmath241 where opt(l , x ) is the optimal value for packing @xmath10 into @xmath226 .",
    "since each large square has side length at least @xmath199 and @xmath242 , we have @xmath243 . by lemma [ lemma : cutting ] , we have @xmath244 hence we have @xmath245 .",
    "next , we study the case ( d ) of fig .",
    "[ fig : our4 ] and prove that our strategy shown in fig .",
    "[ fig:2cases ] still works .",
    "there are two possibilities for the case ( d ) .",
    "we assign @xmath246 to the four large squares as shown in fig .",
    "[ fig:2cases ] , where @xmath247 . and",
    "the polygon is dissected into 5 blocks @xmath248 , where @xmath249 .    from our dissections in fig .",
    "[ fig:2cases ] , ( by dotted lines ) , we have @xmath250 and since the total area of the large items in the bin is at least @xmath231 , i.e. , the total area of the blocks is at most @xmath251 .",
    "we have @xmath252 the last inequality follows from @xmath253 .",
    "let @xmath254 , next we prove that @xmath255 in the cases ( d1 ) and ( d2 ) .",
    "it is trivial to see @xmath255 in the case ( d1 ) , since @xmath256 .",
    "now , we consider the case ( d2 ) , since @xmath257 and @xmath258 , we have @xmath259 since @xmath260 and @xmath261 , we have @xmath262 so , @xmath263    therefore , we have in the cases ( d1 ) and ( d2 ) , @xmath264 and @xmath265 , i.e. , to compare with block @xmath266 , block @xmath267 is sufficiently small and can be ignored .",
    "so @xmath268 where @xmath22 is the set of small squares , @xmath269 , @xmath270 .",
    "hence when we pack small squares into blocks @xmath271 , we just consider @xmath272 .",
    "then by the similar proof for other cases , we have @xmath273 .",
    "hence , this lemma holds .",
    "next , we give the details of algorithm @xmath196 which is similar to @xmath151 .    *",
    "description of algorithm @xmath196 *    1 .   group items and guess an index @xmath27 such that @xmath171 and divide the remaining into two classes , say _ large _ and _ small _ , 2 .",
    "get all feasible packing of @xmath172 , for each of them , 1 .   if there are at least 4 items or the total area of items is at most @xmath231 , then pack large and small squares by algorithm @xmath151 .",
    "locate large items as fig .",
    "[ fig : our4 ] and divide the gaps into blocks as fig .  [",
    "fig : our4 ] and [ fig:2cases ] ,",
    "lastly apply the method in lemma [ lemma : manyresource ] for _ small _ items .",
    "3 .   output the one with the largest profit .    for any input list @xmath10 , @xmath274 , where @xmath29 is sufficiently small .",
    "[ theorem : m<=4 ]    to consider an optimal packing solution @xmath178 , if there are at least 5 large items in @xmath178 or the total area of large items in @xmath178 at most @xmath231 , by fact [ fact : append ] , lemmas [ lemma : restarea ] and [ lemma : m+1 ] , @xmath275 else , the total area of the large items in the bin is at least @xmath231 and there are at most 4 packed . by the dissection of the polygons into rectangular blocks , shown as in fig .",
    "[ fig : our4 ] and [ fig:2cases ] , in each block @xmath148 , we make sure that @xmath276 .",
    "so , @xmath277 the last inequality follows from @xmath278 .",
    "( remember when @xmath176 , there is no large item . ) by lemmas [ lemma : corner ] , [ lemma : manyresource ]",
    ", we have @xmath279    by lemma [ lemma : time ] , the time complexity of algorithm @xmath196 is a polynomial time of @xmath23 .",
    "hence , this theorem holds .",
    "note that algorithm @xmath196 can be expended to multi - dimensional cube packing .",
    "99    n. bansal , j.r .",
    "correa , c. kenyon m. sviridenko , bin packing in multiple dimensions : inapproximability results and approximation schemes , _ mathematics of operations research _",
    "31(1 ) , 3149 , 2006 ( soda 2004 ) .    a. caprara and m. monaci , on the two - dimensional knapsack problem , _ operations research letters _ 32:5 - 14 , 2004 .    c. chekuri and s. khanna , a polynomial time approximation scheme for the multiple knapsack problem , _",
    "siam j. comput_. 35(3 ) : 713 - 728 , 2005 .",
    "l. epstein and r. van stee , optimal online bounded space multidimensional packing , _ soda _ 207 - 216 , 2004 .",
    "w.fernandez de la vega and g.s .",
    "lueker , bin packing can be solved within @xmath280 in linear time .",
    "_ combinatorica _ , 1(4):349 - 355 , 1981    c.e .",
    "ferreira , e.k .",
    "miyazawa , and y. wakabayashi , packing squares into squares , _ pesquisa operacional _ 19:223 - 237 , 1999 .",
    "a. v. fishkin , o. gerber and k. jansen , on weighted rectangle packing with big resources , _ proceedings of the 3rd ifip international conference on theoretical computer science _ , 237 - 250 , 2004 .",
    "a. v. fishkin , o. gerber and k. jansen , r. solis - oba , packing weighted rectangles into a square , _ mfcs _ pp.352 - 363 , 2005 .",
    "xin han , deshi ye and yong zhou , improved online hypercube packing , _ proc . the fourth workshop on approximation and online algorithms _ ,",
    "lncs 4368:226 - 239 , 2006 .",
    "x. han , k. iwama and g. zhang , online removable square packing , _ proc .",
    "the third workshop on approximation and online algorithms _ , 2005 .",
    "r. harren , approximating the orthogonal knapsack problem for hypercubes , _ icalp ( 1 ) 2006 _ , 238 - 249 .",
    "k. jansen and g. zhang , on rectangle packing : maximizing benefits , _ soda _ , 204 - 213 , 2004 .",
    "k. jansen and g. zhang , maximizing the number of packed rectangles , _ swat _ , 362 - 371 , 2004 .",
    "h.  kellerer . a polynomial time approximation scheme for the multiple knapsack problem .",
    "_ random - approx _ 51 - 62 , 1999 .",
    "c. kenyon , e. rmila , a near - optimal solution to a two - dimensional cutting stock problem , _ mathematics of operations research _ , 25(4 ) : 645 - 656 , 2000 .",
    "y. kohayakawa , f.k .",
    "miyazawa , p. raghavan , and y. wakabayashi , multidimensional cube packing , _ algorithmica _ , 40(3 ) 173 - 187,2004 .",
    "leung , t.w .",
    "tam , c.s .",
    "wong , g.h .",
    "young , and f.y.l .",
    "chin , packing squares into a square , _ j. parallel distrib .",
    "_ , 10:271 - 275 , 1990 .",
    "a.meir and l. moser , on packing of squares and cubes , _ journal of combinatorial theory _ , 5:126 - 134 , 1968 .",
    "seiden and r. van stee , new bounds for multidimensional packing , _ algorithmica _ 36:261 - 293 , 2003 .",
    "we use induction to prove part i ) .",
    "when @xmath281 , there are 4 vertices in the bin . when @xmath282 , there are at most 6 vertices in the rectilinear polygon .",
    "so , we assume that when @xmath283 , part i ) holds , i.e. , after packing @xmath156 items in the bin , there are at most @xmath284 vertices in the rectilinear polygons .",
    "when @xmath285 , we use one of @xmath284 vertices and generate at most 3 vertices , hence the total number of vertices is at most @xmath286 then we can see there are at most @xmath287 ways to pack the @xmath27-th square , where @xmath181 . hence to pack @xmath23 items in the bin , there are at most @xmath288 possibilities .",
    "_ nfdh _ ( next fit decreasing height ) @xcite .",
    "_ nfdh _ packing behaves as follows : first sort all squares by their heights , then pack them in the bin from the largest one level by level as shown in fig .",
    "[ fig : nfdhdeco](a ) . in each level , pack them by next fit , namely , if the current level can not accommodate the next item , then open a new with height equal to the current item s height .",
    "we repeat this procedure , until there is no space for a new level in the bin . here",
    "is a key property of _",
    "nfdh_.          1 .   sort the input list @xmath10 such that @xmath289 .",
    "2 .   for @xmath27 from 1 to n do + if @xmath290 and @xmath291 then 1 .   find a maximal index @xmath193 such that @xmath292 can be packed into the current bin by _ nfdh _ and pack @xmath292 into @xmath293 .",
    "2 .   then update list @xmath10 and re - index @xmath10 .",
    "if @xmath10 becomes empty then finish packing ."
  ],
  "abstract_text": [
    "<S> in this paper , we study the following knapsack problem : given a list of squares with profits , we are requested to pack a sublist of them into a rectangular bin ( not a unit square bin ) to make profits in the bin as large as possible . </S>",
    "<S> we first observe there is a polynomial time approximation scheme ( ptas ) for the problem of packing weighted squares into rectangular bins with large resources , then apply the ptas to the problem of packing squares with profits into a rectangular bin and get a @xmath0 approximation algorithm . </S>"
  ]
}