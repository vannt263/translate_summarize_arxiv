{
  "article_text": [
    "in the _ maximum weight internal spanning tree _ ( mwist for short ) problem , we are given a vertex - weighted connected graph @xmath0 , where each vertex @xmath8 of @xmath9 has a nonnegative weight @xmath10 , with the objective to compute a spanning tree @xmath1 of @xmath2 such that the total weight of the internal vertices in @xmath1 , denoted as @xmath11 , is maximized .",
    "mwist has applications in the network design for cost - efficient communication  @xcite and water supply  @xcite .    when the vertex weights are uniform , or simply vertex - unweighted , the problem is referred to as the _ maximum internal spanning tree _",
    "( mist for short ) problem .",
    "mist is clearly np - hard because it includes the np - hard hamiltonian - path  @xcite problem as a special case .",
    "furthermore , mist has been proven apx - hard  @xcite , suggesting that it does not admit a polynomial - time approximation scheme ( ptas ) . in the literature ,",
    "much research is done on designing ( polynomial - time , if not specified ) approximation algorithms for mist to achieve the worst - case performance ratio as close to @xmath12 as possible .",
    "the probably first approximation for mist is a local search algorithm , which achieves a ratio of @xmath6 and is due to prieto and sliper  @xcite .",
    "salamon and wiener  @xcite later modified slightly prieto and sliper s algorithm to make it run faster ( in linear - time ) while achieving the same ratio of @xmath6 .",
    "besides , two special cases of mist were considered by salamon and wiener  @xcite : when restricted to claw - free graphs , they designed a @xmath13-approximation algorithm ; when restricted to cubic graphs , they designed a @xmath14-approximation algorithm .",
    "later , salamon  @xcite proved that the @xmath6-approximation algorithm in @xcite actually achieves a performance ratio of @xmath15 for the mist problem on @xmath16-regular graphs ( @xmath17 ) .",
    "based on local optimization , salamon  @xcite presented an @xmath18-time @xmath19-approximation algorithm for mist restricted to graphs without leaves .",
    "the algorithm was subsequently simplified and re - analyzed by knauer and spoerhase  @xcite to run faster ( in cubic time ) , and it becomes the first improved @xmath20-approximation for the general mist . via a deeper local search strategy",
    "than those in @xcite and @xcite , li _ et al . _",
    "@xcite presented a further improved approximation algorithm for mist with ratio @xmath13 . at the same time ,",
    "li and zhu  @xcite presented another @xmath13-approximation algorithm for mist .    unlike the other previously known approximation algorithms for mist , the @xmath13-approximation by li and zhu  @xcite is based on a simple but crucial observation that the maximum number of internal vertices in a spanning tree of a graph @xmath2 can be upper bounded by the maximum number of edges in a triangle - free @xmath21-matching ( a.k.a .",
    "path - cycle cover ) of @xmath2 .",
    "the time complexity of this approximation algorithm is dominated by computing the maximum triangle - free @xmath21-matching , @xmath22 , where @xmath23 and @xmath24 are the numbers of vertices and edges in @xmath2 , respectively .",
    "li and zhu  @xcite claimed that they are able to further improve their design to achieve a @xmath25-approximation algorithm for mist , of the same time complexity .",
    "recently , chen _ et al . _",
    "@xcite gave another @xmath25-approximation algorithm for mist , which is simpler than the one in @xcite ; and they showed that by applying three more new ideas , the algorithm can be refined into a @xmath3-approximation algorithm for mist of the same time complexity .",
    "this is currently the best approximation algorithm for mist .    the parameterized mist by the number of internal vertices @xmath26 , and its special cases and variants , have also been extensively studied in the literature  @xcite .",
    "the best known kernel for the general problem has a size @xmath27 , which leads to the fastest known algorithm with running time @xmath28  @xcite .    for the vertex - weighted version , mwist ,",
    "salamon  @xcite designed the first @xmath18-time @xmath29-approximation algorithm , based on local search , where @xmath30 is the maximum degree of a vertex in the input graph .",
    "for mwist on claw - free graphs without leaves , salamon  @xcite also designed an @xmath18-time @xmath6-approximation algorithm .",
    "subsequently , knauer and spoerhase  @xcite proposed the first constant - ratio @xmath31-approximation algorithm for the general mwist , for any constant @xmath5 .",
    "the algorithm is based on a new pseudo - polynomial time local search algorithm , that starts with a depth - first - search tree and applies six rules to reach a local optimum .",
    "it yields a @xmath32-approximation for mwist and then is extended to a polynomial time @xmath31-approximation scheme .",
    "the authors also showed that the ratio of @xmath32 is asymptotically tight .    in this paper",
    ", we deal with the mwist problem .",
    "we first prove a novel relationship between the total weight of the internal vertices in a spanning tree of the given vertex - weighted graph and the maximum weight matching of an edge - weighted graph , that is constructed out of the given vertex - weighted graph . based on this relationship",
    ", we present a simple @xmath6-approximation algorithm for mwist ; this ratio @xmath6 significantly improves upon the previous known ratio of @xmath32 .",
    "when restricted to claw - free graphs , a special case previously studied in @xcite , we design a @xmath7-approximation algorithm , improving the previous best ratio of @xmath6 .",
    "recall that in the mwist problem , we are given a connected graph @xmath0 , where each vertex @xmath8 of @xmath9 has a nonnegative weight @xmath10 , with the objective to compute a spanning tree @xmath1 of @xmath2 such that the total weight of the internal vertices in @xmath1 , denoted as @xmath11 , is maximized .",
    "we note that for such an objective function , we may assume without loss of generality that every leaf in the given graph @xmath2 has weight @xmath33 .",
    "we construct an edge - weighted graph based on @xmath0 .",
    "in fact , the structure of new graph is identical to that of @xmath2 : the vertex set is still @xmath9 , but instead the vertices have no weights ; the edge set is still @xmath34 , where the weight of each edge @xmath35 is @xmath36 , i.e. , the weight of an edge is the total weight of its two ending vertices . since there is no ambiguity when we discuss the edge weights or the vertex weights , the new edge - weighted graph is still referred to as @xmath2 .",
    "the weight of an edge subset refers to the total weight of the edges therein ; while the weight of an acyclic subgraph refers to the total weight of the internal ( and those surely will be internal ) vertices therein .",
    "let @xmath37 denote the maximum weight matching of ( the edge - weighted graph ) @xmath2 , which can be computed in @xmath38-time , where @xmath39 and @xmath40 .",
    "[ lemma01 ] given a spanning tree @xmath1 of @xmath2 , we can construct a matching @xmath41 of @xmath2 such that @xmath42 .",
    "we construct @xmath41 iteratively by including an edge @xmath35 of @xmath1 such that both @xmath43 and @xmath8 are non - leaves in the original tree of @xmath1 , followed by removing all edges incident at @xmath43 or @xmath8 , as well as @xmath43 and @xmath8 , from @xmath1 .",
    "this way , the total weight of the two internal vertices @xmath43 and @xmath8 in the original tree is transferred to @xmath41 by adding the edge @xmath44 to @xmath41 .",
    "therefore , at the time this iterative procedure stops , the total weight of the internal vertices removed from @xmath1 equals to the weight of the current partial matching @xmath41 .",
    "next , we iteratively include a remaining edge @xmath35 of @xmath1 into @xmath41 , followed by removing all edges incident at @xmath43 or @xmath8 , as well as @xmath43 and @xmath8 , from @xmath1",
    ". note that exactly one of @xmath43 and @xmath8 is a non - leaf in the original tree of @xmath1 , the weight of which , counted into @xmath11 , is no more than @xmath45 , counted into @xmath46 .    at the end of this procedure",
    ", @xmath1 contains no edges but possibly some isolated vertices , all of which are leaves in the original tree of @xmath1 .",
    "since leaves in the original tree of @xmath1 count nothing towards @xmath11 , we conclude that @xmath42 .",
    "this proves the lemma .",
    "the following corollary directly follows from lemma  [ lemma01 ] , stating an upper bound on the total weight of an optimal solution to the mwist problem .",
    "[ coro01 ] let @xmath47 denote an optimal ( maximum weight internal ) spanning tree of @xmath2 .",
    "then , @xmath48 .",
    "we next start with @xmath37 to construct a spanning tree @xmath1 .",
    "let the edges of @xmath37 be @xmath49 ; let @xmath50 , such that @xmath51 , for all @xmath52 . note that there could be vertices of degree @xmath33 in the spanning subgraph @xmath53 $ ] with the edge set @xmath37 , and there could be edges of weight @xmath33 in @xmath37 ; let @xmath54 denote the set of such degree-@xmath33 vertices and the end - vertices of such weight-@xmath33 edges .",
    "essentially we do not worry about the degree of any vertex of @xmath54 in our final tree @xmath1 , since their weights ( if any ) are not counted towards @xmath55 .",
    "this way , we assume without loss of generality that @xmath56 for each edge @xmath57 of @xmath37 , and consequently the degree of @xmath58 is @xmath59 , that is , @xmath58 is adjacent to at least one other vertex than @xmath60 in the graph @xmath2 .",
    "let @xmath61 , and @xmath62 ; note that @xmath63 .",
    "let @xmath64 , i.e. , the set of edges each connecting a vertex of @xmath65 and a vertex of @xmath66 , and @xmath67 , i.e. , the set of edges each connecting a vertex of @xmath65 and a vertex of @xmath68 .",
    "our construction algorithm first computes a maximal acyclic subgraph of @xmath2 , denoted as @xmath69 , by adding a subset of edges of @xmath70 to @xmath37 .",
    "this subset of edges is a maximum spanning forest on @xmath66 , and it can be done in @xmath71-time via a linear scan . in the achieved subgraph @xmath69 ,",
    "if one connected component @xmath72 contains more than one edge , then the vertex @xmath58 of each edge @xmath50 in @xmath72 has degree at least @xmath21 , i.e. is internal .",
    "therefore , the total weight of the internal vertices in the component is at least half of @xmath73 , and it is called _ settled _ and left alone by the algorithm .",
    "our algorithm next considers an arbitrary edge of @xmath37 that is not yet in any settled component , say @xmath50 . in other words ,",
    "the edge @xmath57 is an _ isolated _ component in the subgraph @xmath69 .",
    "this implies that the vertex @xmath58 is not incident to any edge of @xmath70 , and thus it has to be adjacent to some vertex in @xmath74 .",
    "if @xmath58 is adjacent to some vertex @xmath75 in a settled component , then this edge @xmath76 is added to the subgraph @xmath69 ( the edge @xmath57 is said _ merged _ into a settled component ) and the iteration ends .",
    "the updated component remains settled , as @xmath77 is saved towards the weight of the final tree @xmath1 .    in the other case ,",
    "the vertex @xmath58 is adjacent to a vertex @xmath75 , such that the edge @xmath78 is also an isolated component in the current subgraph . after adding the edge @xmath76 to the subgraph",
    ", the algorithm works with the vertex @xmath79 exactly the same as with @xmath58 at the beginning .",
    "that is , if @xmath79 is adjacent to some vertex @xmath80 in a settled component , then this edge @xmath81 is added to the subgraph ( the component that @xmath79 belongs to is _ merged _ into a settled component ) and the iteration ends ; if @xmath79 is adjacent to a vertex @xmath80 , such that the edge @xmath82 is also an isolated component in the current subgraph , then the edge @xmath81 is added to the subgraph , the algorithm works with the vertex @xmath83 exactly the same as with @xmath58 at the beginning ; in the last case , @xmath79 is adjacent to a vertex @xmath80 inside the current component that @xmath79 belongs to , then the edge @xmath81 is added to the current component to create a cycle , subsequently the lightest edge of @xmath37 in the cycle is removed , the iteration ends , and the current component becomes settled .",
    "we note that in the above last case , the formed cycle in the current component contains at least @xmath21 edges of @xmath37 ; breaking the cycle by removing the lightest edge ensures that at least half of the total weight of the edges of @xmath37 in this cycle ( and thus in this component ) is saved towards the weight of the final tree @xmath1 .",
    "therefore , when the iteration ends , the resultant component is settled .",
    "when the second step of the algorithm terminates , there is no isolated edge of @xmath37 in the current subgraph , denoted as @xmath84 , and each component is acyclic and settled . in the last step ,",
    "the algorithm connects the components of @xmath84 into a spanning tree using any possible edges of @xmath34 .",
    "we denote the entire algorithm as approx .",
    "[ lemma02 ] at the end of the second step of the algorithm approx , every component of the achieved subgraph @xmath84 is acyclic and settled .",
    "let @xmath72 denote a component ; @xmath85 is the subset of @xmath37 , each edge of which has both end - vertices in @xmath72 .",
    "if @xmath72 is obtained at the end of the first step , then @xmath72 is acyclic and for every edge @xmath86 , the vertex @xmath58 has degree at least @xmath21 , and thus @xmath87 .",
    "if a subgraph of @xmath72 is obtained at the end of the first step but @xmath72 is finalized in the second step , then @xmath72 is also acyclic and for every edge @xmath86 , the vertex @xmath58 has degree at least @xmath21 , and thus @xmath87 .",
    "if @xmath72 is newly formed and finalized in the second step , then at the time @xmath72 was formed , there was a cycle containing at least @xmath21 edges of @xmath37 of which the lightest one is removed to ensure the acyclicity , and thus the total weight of the internal vertices on this path is at least half of the total weight of the edges of @xmath37 on this cycle . also , the vertex @xmath58 of every edge @xmath57 not on the cycle has degree at least @xmath21 .",
    "thus , @xmath87 .",
    "[ thm01 ] the algorithm approx is a @xmath21-approximation for the mwist problem .",
    "one clearly sees that approx runs in polynomial time , and in fact the running time is dominated by computing the maximum weight matching @xmath37 .    from lemma  [ lemma02 ] , at the end of the second step of the algorithm approx ,",
    "every component @xmath72 of the achieved subgraph @xmath84 is acyclic and satisfies @xmath87 .",
    "since there is no edge of @xmath37 connecting different components of the subgraph @xmath84 , the total weight of the internal vertices in @xmath84 is already at least @xmath88 , i.e. @xmath89 . the last step of the algorithm may only increase the total weight .",
    "this proves that the total weight of the internal vertices of the tree @xmath1 produced by approx is @xmath90 where the last inequality is by corollary  [ coro01 ] , which states that @xmath55 is an upper bound on the optimum .",
    "thus , approx is a @xmath21-approximation for the mwist problem .",
    "we present a better approximation algorithm for the mwist problem on claw - free graphs . a graph @xmath0 is called _ claw - free _ if , for every vertex , at least two of its arbitrary three neighbors are adjacent .",
    "we again assume without loss of generality that every leaf in the graph @xmath2 has weight @xmath33 .",
    "besides , we also assume that @xmath91 .",
    "we first present a reduction rule , which is a subcase of operation 4 in @xcite , that excludes certain induced subgraphs of the given graph @xmath2 from consideration .",
    "[ op1 ] if @xmath2 has a cut - vertex @xmath8 such that one connected component @xmath72 of @xmath92 has two , three or four vertices , then obtain @xmath93 from @xmath94 by adding a new vertex @xmath43 of weight @xmath33 and a new edge @xmath95 .",
    "let @xmath96 denote the maximum total weight of the internal vertices in a spanning tree of the subgraph induced on @xmath97 , in which @xmath10 is revised to @xmath33 . then there is an optimal spanning tree @xmath98 of @xmath93 of weight @xmath99 if and only if there is an optimal spanning tree @xmath1 of @xmath2 of weight @xmath100 .",
    "let @xmath101 denote the subgraph induced on @xmath97 , that is , @xmath102 $ ] ; and let @xmath103 denote the spanning tree of @xmath101 achieving the maximum total weight of the internal vertices , that is , @xmath104 ( @xmath103 can be computed in @xmath105-time ) .",
    "note that in @xmath98 , the leaf @xmath43 must be adjacent to @xmath8 and thus @xmath10 is counted towards @xmath99 .",
    "we can remove the edge @xmath95 and @xmath43 from @xmath98 while attach the tree @xmath103 to @xmath98 by collapsing the two copies of @xmath8 .",
    "this way , we obtain a spanning tree @xmath1 of @xmath2 , of weight @xmath106 since @xmath10 is not counted towards @xmath107 .",
    "conversely , for any spanning tree @xmath1 of @xmath2 , the vertex @xmath8 is internal due to the existence of @xmath72 .",
    "we may duplicate @xmath8 and separate out a subtree @xmath103 on the set of vertices @xmath97 , in which the weight of @xmath8 is revised to @xmath33 .",
    "this subtree @xmath103 is thus a spanning tree of @xmath101 , and every vertex of @xmath108 is internal in @xmath1 if and only if it is internal in @xmath103 .",
    "we attach the @xmath33-weight vertex @xmath43 to the vertex @xmath8 in the remainder tree via the edge @xmath95 , which is denoted as @xmath98 and becomes a spanning tree of @xmath93 ; note that the vertex @xmath8 is internal in @xmath98 .",
    "it follows that @xmath109 .",
    "see figure  [ fig01 ] for an illustration of the local configurations specified in operation  [ op1 ] .",
    "when @xmath110 and @xmath101 is a triangle , we refer the configuration as a _ hanging triangle _ ;",
    "when @xmath111 and @xmath101 contains a length-@xmath112 cycle , we refer the configuration as a _ hanging diamond _ ; when @xmath113 and @xmath101 contains a length-@xmath114 cycle , we refer the configuration as a _ hanging pentagon_. applying operation  [ op1 ] , we assume in the sequel that there is no hanging triangle , or hanging diamond , or hanging pentagon in the given graph @xmath2 .    0.25 , where the dotted edges could be in or not in the graph.[fig01],title=\"fig:\",scaledwidth=70.0% ]    0.25 , where the dotted edges could be in or not in the graph.[fig01],title=\"fig:\",scaledwidth=65.0% ]    0.25 , where the dotted edges could be in or not in the graph.[fig01],title=\"fig:\",scaledwidth=80.0% ]    let @xmath37 denote the maximum weight matching of @xmath2 , which is computed in @xmath38-time , where @xmath39 and @xmath40 .",
    "let the edges of @xmath37 be @xmath49 ; let @xmath50 , such that @xmath51 , for all @xmath52 . for convenience , @xmath58 and @xmath60",
    "are referred to as the _ head _ and the _ tail _ vertices of the edge @xmath57 , respectively . the same as in the last section , we assume without loss of generality that @xmath56 for each @xmath115 , and consequently the degree of @xmath58 is @xmath59 , that is , @xmath58 is adjacent to at least one vertex other than @xmath60 in the graph @xmath2 .",
    "let @xmath61 , @xmath62 , and @xmath116 .",
    "let @xmath117 , i.e. , the set of edges each connecting two vertices of @xmath65 , @xmath118 , i.e. , the set of edges each connecting a vertex of @xmath65 and a vertex of @xmath54 , and @xmath67 , i.e. , the set of edges each connecting a vertex of @xmath65 and a vertex of @xmath68 , respectively .    let @xmath119 be the maximum cardinality matching within the edge set @xmath70 .",
    "we next prove a structure property of the spanning subgraph @xmath120 $ ] , which has the edge set @xmath121 .",
    "for an edge @xmath50 of @xmath37 , if @xmath58 is not incident to any edge of @xmath122 , then @xmath57 is called _ isolated _ in @xmath120 $ ] .",
    "[ lemma03 ] assume that two edges @xmath123 and @xmath124 of @xmath37 are connected by the edge @xmath125 in @xmath120 $ ] .",
    "then there is at most one isolated edge @xmath126 whose head @xmath127 can be adjacent to @xmath128 or @xmath129 .    by contradiction , assume that there are two isolated edges @xmath126 and @xmath130 such that both the vertices @xmath127 and @xmath131 are adjacent to @xmath128 or @xmath129 . then from the maximum cardinality of @xmath122 , @xmath127 and @xmath131 must be both adjacent to @xmath128 or both adjacent to @xmath129 .",
    "suppose they are both adjacent to @xmath128 ; from the claw - free property , at least two of @xmath129 , @xmath127 and @xmath131 are adjacent , which again contradicts the maximum cardinality of @xmath122 .",
    "this proves the lemma .    for an isolated edge",
    "@xmath126 whose head is adjacent an edge @xmath125 ( i.e. , satisfying lemma  [ lemma03 ] ) , and assuming that @xmath132 , we add the edge @xmath133 to @xmath120 $ ] ; consequently the edge @xmath134 is no longer isolated .",
    "let @xmath135 denote the set of such added edges associated with @xmath122 . at the end ,",
    "the achieved subgraph is denoted as @xmath136 $ ] .",
    "[ lemma04 ] in the subgraph @xmath136 $ ] ,    * every connected component containing more than one edge has either two or three edges from @xmath37 , with their head vertices connected ( by the edges of @xmath137 ) into a path ; it is called a _ type - i _ component ( see _ figure  [ fig02a ] _ ) and a _ type - ii _ component ( see _ figure  [ fig02b ]",
    "_ ) , respectively ; * for every isolated edge @xmath50 , the head vertex is incident with at least one edge of @xmath138 , but to no edge of @xmath70 .",
    "the proof directly follows the definition of the subgraph @xmath69 and lemma  [ lemma03 ] .",
    "0.33 , title=\"fig:\",scaledwidth=55.0% ]    0.33 , title=\"fig:\",scaledwidth=70.0% ]    the following lemma is analogous to lemma  [ lemma03 ] .",
    "[ lemma05 ] any vertex of @xmath54 can be adjacent to the head vertices of at most two isolated edges in the subgraph @xmath136 $ ] .    by contradiction , assume that @xmath139 and there are three isolated edges @xmath140 , @xmath141 , in the subgraph @xmath136 $ ] , such that the edge @xmath142 . from the claw - free property , at least two of @xmath128 , @xmath129 and @xmath127 are adjacent , which contradicts lemma  [ lemma04 ] .",
    "this proves the lemma .    for an isolated edge @xmath50 in the subgraph",
    "@xmath136 $ ] whose head is adjacent to a vertex @xmath139 ( i.e. , satisfying lemma  [ lemma05 ] ) , we add the edge @xmath143 to @xmath69 ; consequently the edge @xmath57 is no longer isolated .",
    "let @xmath144 denote the set of such added edges associated with @xmath54 . at the end ,",
    "the achieved subgraph is denoted as @xmath145 $ ] .",
    "[ lemma06 ] in the subgraph @xmath145 $ ] ,    * every connected component of @xmath69 containing more than one edge remains unchanged in @xmath84 ; * every connected component containing more than one vertex @xmath146 of @xmath54 has either one or two edges from @xmath37 , with their head vertices connected ( by the edges of @xmath144 ) to the vertex @xmath146 ; it is called a _ type - iii _ component ( see _ figure  [ fig03a ] _ ) and a _ type - iv _ component ( see _ figure  [ fig03b ] _ ) , respectively ; * for every isolated edge @xmath50 , the head vertex is incident with at least one edge of @xmath147 , but to no edge of @xmath148 .",
    "the proof directly follows the definition of the subgraph @xmath84 and lemmas  [ lemma04 ] and [ lemma05 ] .    0.3 , title=\"fig:\",scaledwidth=45.0% ]    0.3 , title=\"fig:\",scaledwidth=75.0% ]",
    "let @xmath149 denote the subset of @xmath147 , to include all the edges @xmath150 where both the edges @xmath50 and @xmath82 are isolated in the subgraph @xmath145 $ ] .",
    "let @xmath151 be the maximum cardinality matching within the edge set @xmath149 .",
    "let @xmath152 $ ] , the resultant subgraph by adding all the edges of @xmath153 to the subgraph @xmath84 .",
    "one clearly sees that all the isolated edges in the subgraph @xmath84 are connected by the edges of @xmath153 into disjoint paths and cycles ; while a path may contain any number of isolated edges , a cycle contains at least two isolated edges .",
    "such a path and a cycle component are called a _ type - v _ component ( see figure  [ fig04a ] ) and a _ type - vi _ component ( see figure  [ fig04b ] ) , respectively .    0.35 , title=\"fig:\",scaledwidth=90.0% ]    0.35 , title=\"fig:\",scaledwidth=80.0% ]    note that in a type - v component , there is exactly one head vertex of degree @xmath12 and there is exactly one tail vertex of degree @xmath12 .",
    "we assume that for the tail vertex in a type - v component , it is not adjacent to the head of any other edge ( via an edge of @xmath147 ) in the same component ; otherwise , through an edge exchange , the component is decomposed into a smaller type - v component and a new type - vi component .",
    "[ lemma07 ] in the subgraph @xmath152 $ ] , for every type - v component , the degree-@xmath12 head vertex is adjacent ( via an edge of @xmath147 ) to the tail vertex of an edge in a type - i , -ii , -iii , or -iv component ; on the other hand , the tail vertex of every edge in a type - i , -ii , -iii , or -iv component is adjacent to at most one such head vertex .",
    "we first show that the degree-@xmath12 head vertex in a type - v component @xmath72 , denoted as @xmath58 , can not be adjacent to the tail of any edge in another type - v or a type - vi component @xmath154 . by contradiction ,",
    "assume @xmath155 and @xmath156 is in @xmath154 .",
    "if the tail @xmath80 is already incident to some edge of @xmath153 , say @xmath157 , then by the claw - free property at least two of @xmath158 must be adjacent , contradicting the fact that they are all isolated in the subgraph @xmath84 . in the other case ,",
    "the tail @xmath80 is the tail vertex of @xmath154 ( which is a type - v component too ) , then it violates the maximum cardinality of @xmath153 since @xmath155 can be added to increase the size of @xmath153 .",
    "this proves the first half of the lemma .",
    "the second half can be proven by a simple contradiction using the claw - free property of the graph .",
    "subsequently , every type - v component @xmath72 is connected to a type - i , -ii , -iii , or -iv component @xmath154 , via the edge between the degree-@xmath12 head vertex of @xmath72 and the tail vertex of an edge in @xmath159 .",
    "this way , the degree-@xmath12 tail vertex of @xmath72 takes up the role of `` the tail vertex '' of the edge in @xmath159 , to become a tail vertex in the newly formed bigger component .",
    "for simplicity , the type of the component @xmath154 is passed to the newly formed bigger component .",
    "denote this set of newly added edges as @xmath160 , which is a subset of @xmath161 .",
    "the achieved subgraph is denoted as @xmath162 $ ] .",
    "[ lemma08 ] in the subgraph @xmath162 $ ] ,    * there is no isolated type - v component ; * the head vertex of every edge of @xmath37 has degree at least @xmath21 .    the first half of the lemma follows from lemma  [ lemma07 ] ; the second half holds since there is no more isolated type - v component , which is the only one containing a degree-@xmath12 head vertex .",
    "we next create a set @xmath163 of edges that are used to interconnect the components in the subgraph @xmath164 .",
    "@xmath163 is initialized to be empty . by lemma  [ lemma08 ] , for every type - i ,",
    "-ii , -iii , or -iv component @xmath72 in the subgraph @xmath164 , of weight @xmath73 , it is a tree and the total weight of the internal vertices therein is at least @xmath165 ; for every type - vi component @xmath72 , which is a cycle , by deleting the lightest edge of @xmath85 from @xmath72 we obtain a path and the total weight of the internal vertices in this path is also at least @xmath165 . in the next five lemmas , we show that every component @xmath72 in the subgraph @xmath164 can be converted into a tree on the same set of vertices , possibly with one edge specified for connecting a leaf of this tree outwards , such that the total weight of the internal vertices ( and the leaf , if specified ) in the tree is at least @xmath166 . the specified edge for the interconnection purpose ,",
    "is added to @xmath163 . at the end of the process ,",
    "the component @xmath72 is called _",
    "settled_. a settled component @xmath72 can be expressed in multiple equivalent ways , for example , that the total weight of the internal vertices ( and the leaf , if specified ) in the resultant tree is at least @xmath166 , or that the total weight of the internal ( and the leaf , if specified ) vertices in the resultant tree is at least twice the total weight of the leaves ( excluding the specified leaf , if any ) .    in the sequel , we abuse the vertex notation to also denote its weight in math formulae ; this simplifies the presentation and the meaning of the notation is easily distinguishable .",
    "for estimating the total weight of the internal vertices in a tree in the sequel , we frequently use the following inequality : @xmath167    [ lemma09 ] a type - i component in the subgraph @xmath164 can be settled .",
    "consider a type - i component @xmath72 in the subgraph @xmath164 .",
    "let the two original edges of @xmath37 in @xmath72 be @xmath168 and @xmath169 and the two tail vertices be @xmath170 and @xmath171 ( which replace @xmath172 and @xmath173 to be the tail vertices , respectively ) with @xmath174 .",
    "the corresponding two head vertices to the tails @xmath170 and @xmath171 are denoted as @xmath175 and @xmath176 , respectively .",
    "see figure  [ fig05 ] for the general configuration of such a component .",
    "we assume that @xmath177 , since otherwise @xmath72 is settled automatically .    ,",
    "scaledwidth=50.0% ]    [ [ case-1 . ] ] case 1 . + + + + + + +    if @xmath170 is adjacent to a vertex @xmath8 outside @xmath72 , then we add the edge @xmath178 to @xmath163",
    "; this settles @xmath72 , since the total weight of the internal vertices in @xmath72 is at least @xmath179 ( recall that a vertex notation here represents the weight of the vertex ) .",
    "we next consider the case where @xmath170 is not adjacent to any vertex outside @xmath72 , and thus it has to be adjacent to some vertex inside @xmath72 .",
    "note that @xmath72 is a path with @xmath170 and @xmath171 being its two ending vertices .",
    "let @xmath8 denote the vertex adjacent to @xmath170 that is the to @xmath170 on @xmath72 .",
    "we distinguish this distance @xmath180 and where @xmath8 locates .",
    "[ [ case-2 . ] ] case 2 .",
    "+ + + + + + +    if @xmath181 and @xmath8 is in the type - v component containing @xmath170 , then by the construction of a type - v component we know that @xmath8 must be a tail of an edge of @xmath37 ( figures  [ fig06a ] and [ fig06b ] ) , and thus @xmath182 is even .",
    "denote this edge as @xmath126 , that is @xmath183 .",
    "0.45   is inside the type - v component adjacent to @xmath172.[fig06],title=\"fig : \" ]    0.45   is inside the type - v component adjacent to @xmath172.[fig06],title=\"fig : \" ]    * case 2.1 . *",
    "if @xmath184 , then denote the head vertex other than @xmath127 that @xmath185 is adjacent to as @xmath131 ( see figure  [ fig06a ] ) .",
    "we conclude from the claw - free property that there must be at least an edge among @xmath186 , which contradicts the identity of the type - v component .",
    "therefore , it is impossible to have @xmath184 .    *",
    "case 2.2 . *",
    "if @xmath187 , then we conclude that @xmath188 and thus @xmath189 by operation  [ op1 ] ( see figure  [ fig06b ] ) , i.e. there is at least another edge incident at @xmath175 besides @xmath190 and @xmath191 .",
    "denote this neighbor of @xmath175 as @xmath43 .",
    "if @xmath43 is inside @xmath72 , then @xmath192 ; in this case , add the edges @xmath193 and @xmath194 to @xmath72 while delete the edge @xmath190 and the lightest among the edges of @xmath85 from @xmath72 . this way , the component becomes a tree and thus @xmath72 is settled . if @xmath43 is outside @xmath72 , then we add the edge @xmath193 to @xmath72 while delete the edge @xmath190 from @xmath72 , and add the edge @xmath195 to @xmath163 ; this way , the component becomes a tree and thus @xmath72 is settled .",
    "[ [ case-3 . ] ] case 3 .",
    "+ + + + + + +    if @xmath181 and @xmath196 , we consider the size of the type - v component containing @xmath170 ( see figure  [ fig07 ] ) .",
    ".[fig07],scaledwidth=45.0% ]    * case 3.1 .",
    "* if this type - v component contains more than one edge of @xmath37 , then by the claw - free property @xmath128 must be adjacent to @xmath170 , which violates the definition of @xmath8 being the farthest and thus it is impossible .",
    "* case 3.2 . *",
    "if the type - v component containing @xmath170 has only one edge of @xmath37 , which is @xmath191 , then we have @xmath188 , and thus @xmath189 by operation  [ op1 ] , i.e. there is at least another edge incident at @xmath175 besides @xmath197 and @xmath191 .",
    "( the following is the same as in case 2.2 . )",
    "denote this neighbor of @xmath175 as @xmath43 .",
    "if @xmath43 is inside @xmath72 , then @xmath192 ; in this case , add the edges @xmath198 and @xmath194 to @xmath72 while delete the edge @xmath197 and the lightest among the edges of @xmath85 from @xmath72 .",
    "this way , the component becomes a tree and thus @xmath72 is settled .",
    "if @xmath43 is outside @xmath72 , then we add the edge @xmath198 to @xmath72 while delete the edge @xmath197 from @xmath72 , and add the edge @xmath195 to @xmath163 ; this way , the component becomes a tree and thus @xmath72 is settled .",
    "[ [ case-4 . ] ] case 4 . + + + + + + +    if @xmath181 and @xmath199 ( see figure  [ fig08 ] ) , then we leave @xmath72 as it is when @xmath200 , or we add the edge @xmath201 to @xmath72 while delete the edge @xmath202 from @xmath72 .",
    "the total weight of the internal vertices in the resultant path is at least @xmath203 , and thus @xmath72 is settled .",
    ".[fig08],scaledwidth=45.0% ]    [ [ case-5 . ] ] case 5 .",
    "+ + + + + + +    if @xmath181 and @xmath204 ( see figure  [ fig09 ] ) , then by the claw - free property there is at least an edge among @xmath205 .",
    "note that @xmath173 and @xmath170 can not be adjacent due to the definition of the vertex @xmath8 ( being the farthest ) . if @xmath128 and @xmath170 are adjacent , then it has been proven in case 4 that @xmath72 can be settled . if @xmath173 and @xmath128 are adjacent , then similarly as in case 4 we either leave @xmath72 as it is when @xmath200 , or add the edges @xmath206 and @xmath207 to @xmath72 while delete the edges @xmath202 and @xmath208 from @xmath72 ; the total weight of the internal vertices in the resultant path is at least @xmath203 , and thus @xmath72 is settled .",
    ".[fig09],scaledwidth=45.0% ]    [ [ case-6 . ] ] case 6 . + + + + + + +    if @xmath181 and @xmath209 ( see figure  [ fig10 ] ) , then by the claw - free property @xmath129 and @xmath170 must be adjacent .",
    ".[fig10],scaledwidth=45.0% ]    * case 6.1 . * if @xmath210 , then we have three ways to convert @xmath72 into a path ending at @xmath171 : 1 ) doing nothing to leave @xmath170 as a leaf ; 2 ) adding the edge @xmath206 to @xmath72 while deleting the edge @xmath211 to leave @xmath128 as a leaf ; 3 ) adding the edge @xmath212 to @xmath72 while deleting the edge @xmath208 to leave @xmath129 as a leaf . then , the maximum total weight of the internal vertices among these three paths is at least @xmath213 .",
    "thus , @xmath72 is settled .",
    "* case 6.2 . *",
    "if @xmath214 , that is , there is no type - v component adjacent to @xmath173 , then we add the edge @xmath212 to @xmath72 while delete the lightest edge of @xmath85 from @xmath72 to settle @xmath72 , because @xmath85 contains at least three edges .",
    "[ [ case-7 . ] ] case 7 . + + + + + + +    if @xmath181 , @xmath210 , and @xmath8 is in the type - v component containing @xmath171 , we distinguish whether @xmath8 is a head or a tail ( see figure  [ fig11 ] ) .",
    "0.32   is inside the type - v component adjacent to @xmath173.[fig11],title=\"fig : \" ]    0.32   is inside the type - v component adjacent to @xmath173.[fig11],title=\"fig : \" ]    0.32   is inside the type - v component adjacent to @xmath173.[fig11],title=\"fig:\",scaledwidth=95.0% ]    * case 7.1 . *",
    "if @xmath8 is a head , say @xmath127 of the edge @xmath134 ( see figure  [ fig11a ] ) , and assume that @xmath127 is also adjacent to @xmath215 , then we do nothing to @xmath72 to leave @xmath170 as a leaf when @xmath216 , or add the edge @xmath217 to @xmath72 while delete the edge @xmath218 from @xmath72 to leave @xmath215 as a leaf .",
    "then , the total weight of the internal vertices in the resultant path is at least @xmath219 .",
    "thus , @xmath72 is settled .",
    "* case 7.2 . *",
    "if @xmath8 is a tail , say @xmath185 of the edge @xmath134 ( see figures  [ fig11b ] and [ fig11c ] ) . if @xmath220 ( see figure  [ fig11b ] ) , then we add the edge @xmath221 to @xmath72 makes it a cycle while delete the lightest edge of @xmath85 to settle @xmath72 since there are at least four edges in @xmath85 ; if @xmath222 ( see figure  [ fig11c ] ) , then by the claw - free property and the definition of @xmath8 we conclude that @xmath170 is adjacent to @xmath127 too , and thus the argument in case 7.1 applies to settle @xmath72 .    in summary ,",
    "cases 2 - 7 together prove that when @xmath181 , the component @xmath72 can be settled .",
    "we next consider the situation where @xmath223 , that is , there is no type - v component adjacent to @xmath172 ( see figure  [ fig12 ] ) .",
    ", i.e. @xmath224.[fig12],scaledwidth=35.0% ]    [ [ case-8 . ] ] case 8 .",
    "+ + + + + + +    if @xmath223 and @xmath204 , then we conclude that @xmath188 and thus @xmath189 by operation  [ op1 ] ( see figure  [ fig13 ] ) .",
    ".[fig13],scaledwidth=35.0% ]    * case 8.1 .",
    "* if there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath175 , then we add the edge @xmath195 to @xmath163 , add the edge @xmath206 to @xmath72 while delete the edge @xmath225 from @xmath72 ; this way , @xmath72 is settled .    *",
    "case 8.2 . * otherwise by the claw - free property @xmath175 must be adjacent either to @xmath171 or to @xmath173 .",
    "* case 8.2.1 . * assuming @xmath210 , in the former case , we add the edges @xmath206 and @xmath194 to @xmath72 while delete the edge @xmath225 and the lightest edge of @xmath85 from @xmath72 ; this way , @xmath72 is settled since there were at least three edges in @xmath85 . in the latter case , we conclude that @xmath226 by operation  [ op1 ] .",
    "recursively , if there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath129 , then we add the edge @xmath227 to @xmath163 , add the edges @xmath206 and @xmath228 to @xmath72 while delete the edges @xmath225 and @xmath208 from @xmath72 ; this way , @xmath72 is settled .",
    "otherwise by the claw - free property @xmath129 must be adjacent to @xmath171 ; we add three edges @xmath206 , @xmath228 and @xmath229 to @xmath72 while delete the edges @xmath225 and @xmath208 , and the lightest edge of @xmath85 from @xmath72 ; this way , @xmath72 is settled .",
    "* case 8.2.2 .",
    "* assuming @xmath214 , that is , there is no type - v component adjacent to @xmath173 .",
    "we conclude that @xmath230 and there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath176 by operation  [ op1 ] .",
    "thus , we add the edge @xmath231 to @xmath163 , add the edges @xmath232 and @xmath194 to @xmath72 while delete the edges @xmath233 and @xmath234 from @xmath72 ; this way , @xmath72 is settled .",
    "[ [ case-9 . ] ] case 9 .",
    "+ + + + + + +    if @xmath223 and @xmath209 ( see figure  [ fig14 ] ) , we consider two possible scenarios .",
    "0.4 .[fig14],title=\"fig:\",scaledwidth=85.0% ]    0.4 .[fig14],title=\"fig:\",scaledwidth=45.0% ]    * case 9.1 . * if @xmath210 ( see figure  [ fig14a ] ) , then we conclude from the claw - free property and the definition of @xmath8 that @xmath170 is also adjacent to @xmath129 . by operation",
    "[ op1 ] , at least one of @xmath175 and @xmath129 must be adjacent to another vertex @xmath43 .",
    "* case 9.1.1 .",
    "* if there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath175 ( @xmath129 , respectively ) then we add the edge @xmath195 ( @xmath227 , respectively ) to @xmath163 , add the edges @xmath212 and @xmath206 ( @xmath212 , respectively ) to @xmath72 while delete the edges @xmath191 and @xmath208 ( @xmath208 , respectively ) from @xmath72 ; this way , @xmath72 is settled .    * case 9.1.2 . * otherwise by the claw - free property @xmath235 .",
    "if @xmath192 , then we can settle @xmath72 by converting @xmath72 into a cycle on the same set of vertices , followed by deleting the lightest edge of @xmath85 from @xmath72 . in the other case , @xmath236 and thus @xmath175 is adjacent to @xmath173 , which by operation  [ op1 ] is impossible .",
    "* case 9.2 . *",
    "if @xmath214 , that is , there is no type - v component adjacent to @xmath173 ( see figure  [ fig14b ] ) .",
    "we conclude that either there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath176 , or @xmath176 is adjacent to @xmath170 and there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath175 . in either case , we add the edge @xmath237 to @xmath163 , and convert @xmath72 into a path with @xmath171 and @xmath238 as two ending vertices ; this way , @xmath72 is settled .    [",
    "[ case-10 . ] ] case 10 . + + + + + + + +    if @xmath223 , @xmath210 , and @xmath8 is in the type - v component containing @xmath171 , we distinguish whether @xmath8 is a head or a tail ( see figure  [ fig15 ] ) .",
    "0.32   is inside the type - v component adjacent to @xmath173.[fig15],title=\"fig : \" ]    0.32   is inside the type - v component adjacent to @xmath173.[fig15],title=\"fig : \" ]    0.32   is inside the type - v component adjacent to @xmath173.[fig15],title=\"fig:\",scaledwidth=95.0% ]    * case 10.1 . *",
    "if @xmath8 is a head , say @xmath127 of the edge @xmath134 ( see figure  [ fig15a ] ) , and assume that @xmath127 is also adjacent to @xmath215 , then we do nothing to @xmath72 to leave @xmath170 as a leaf when @xmath216 , or add the edge @xmath217 to @xmath72 while delete the edge @xmath239 from @xmath72 to leave @xmath215 as a leaf .",
    "then , the total weight of the internal vertices in the resultant path is at least @xmath219 .",
    "thus , @xmath72 is settled .",
    "* case 10.2 . *",
    "if @xmath8 is a tail , say @xmath185 of the edge @xmath134 ( see figures  [ fig15b ] and [ fig15c ] ) . if @xmath220 ( see figure  [ fig15b ] ) , then we add the edge @xmath221 to @xmath72 makes it a cycle while delete the lightest edge of @xmath85 to settle @xmath72 since there are at least three edges in @xmath85 ; if @xmath222 ( see figure  [ fig15c ] ) , then by the claw - free property and the definition of @xmath8 we conclude that @xmath170 is adjacent to @xmath127 too , and thus the argument in case 10.1 applies to settle @xmath72 .    all possible cases have be discussed in the above .",
    "the lemma is proven .",
    "[ lemma10 ] a type - ii component in the subgraph @xmath164 can be settled .",
    "consider a type - ii component @xmath72 in the subgraph @xmath164 .",
    "let the three original edges of @xmath37 in @xmath72 be @xmath240 , with @xmath169 in the middle ( see figure  [ fig02b ] ) , and the three tail vertices be @xmath241 ( which replace @xmath242 , respectively ) .",
    "we consider the situation where @xmath170 is the heaviest among the three tail vertices ( the other situation is where @xmath171 is the heaviest , and can be similarly discussed ) . in the following",
    ", discussion for most cases is similar to the cases in the proof of lemma  [ lemma09 ] , and thus not all details are presented ( neither the illustration figures ) .",
    "[ [ case-1.-1 ] ] case 1 . + + + + + + +    if @xmath170 is adjacent to a vertex @xmath8 outside @xmath72 , then we add the edge @xmath178 to @xmath163 , which settles @xmath72 , since the total weight of the internal vertices in @xmath72 is at least @xmath243 ( recall that a vertex notation here represents the weight of the vertex ) .    in the sequel",
    "we assume @xmath170 is not adjacent to any vertex outside @xmath72 , and thus it has to be adjacent to some vertex inside @xmath72 .",
    "let @xmath8 denote the vertex adjacent to @xmath170 that is the to @xmath170 on @xmath72 ( tie breaks arbitrarily ) .",
    "we distinguish this distance @xmath180 and where @xmath8 locates .",
    "[ [ case-2.-1 ] ] case 2 .",
    "+ + + + + + +    if @xmath181 and @xmath8 is in the type - v component containing @xmath170 , then @xmath8 must be the tail of an edge of @xmath37 and thus @xmath182 is even .",
    "denote this edge as @xmath130 , that is @xmath244 .",
    "* case 2.1 . *",
    "if @xmath184 , then denote the head vertex other than @xmath131 that @xmath215 is also adjacent to as @xmath245 .",
    "we conclude from the claw - free property that there must be at least an edge among @xmath246 , which contradicts the identity of the type - v component .",
    "thus it is impossible to have @xmath184 .",
    "* case 2.2 . *",
    "if @xmath187 , then we conclude that @xmath188 and thus @xmath189 by operation  [ op1 ] , i.e. there is at least another edge incident at @xmath175 besides @xmath247 and @xmath191 .",
    "denote this neighbor of @xmath175 as @xmath43 .",
    "if @xmath43 is inside @xmath72 , then @xmath248 ; in the case of @xmath192 ( the argument for @xmath249 is identical ) , we know that the branch incident at @xmath128 contains at least three edges of @xmath37 , and thus we may add the edges @xmath250 and @xmath194 to @xmath72 while delete the edge @xmath247 and the lightest among the edges of @xmath37 on the created cycle , denoted as @xmath251 , from @xmath72 . this way , the component becomes a tree with leaves @xmath252 .",
    "we may as well do nothing to @xmath72 , with leaves @xmath241 .",
    "the maximum total weight of the internal vertices between these two trees is at least @xmath253 ; that is , @xmath72 can be settled .",
    "if @xmath43 is outside @xmath72 , then we add the edge @xmath250 to @xmath72 while delete the edge @xmath247 from @xmath72 , and add the edge @xmath195 to @xmath163 ; this way , the component becomes a tree and thus @xmath72 is settled .",
    "[ [ case-3.-1 ] ] case 3 . + + + + + + +    if @xmath181 and @xmath196 , we consider the size of the type - v component containing @xmath170 .",
    "* case 3.1 . *",
    "if this type - v component contains more than one edge of @xmath37 , then by the claw - free property @xmath128 must be adjacent to @xmath170 , which violates the definition of @xmath8 being the farthest and thus it is impossible .",
    "* case 3.2 . *",
    "if the type - v component containing @xmath170 has only one edge of @xmath37 , which is @xmath191 ; in this case , we have @xmath188 , and thus @xmath189 by operation  [ op1 ] , i.e. there is at least another edge incident at @xmath175 besides @xmath197 and @xmath191 .",
    "denote this neighbor of @xmath175 as @xmath43 .",
    "if @xmath43 is inside @xmath72 , then @xmath248 . in the case of @xmath192",
    ", we may add the edges @xmath198 and @xmath194 to @xmath72 while delete the edge @xmath197 and either delete the edge @xmath208 to leave @xmath173 as a leaf , or delete the edge @xmath211 to leave @xmath128 as a leaf .",
    "when @xmath254 , the maximum total weight of the internal vertices between the two trees is at least @xmath255 , and thus @xmath72 is settled . when @xmath256 , we also consider @xmath72 as a tree with leaves @xmath241 , and the maximum total weight of the internal vertices among the three trees is at least @xmath257 , and thus @xmath72 is settled .    in the case of @xmath249 , we may add the edges @xmath198 and @xmath258 to @xmath72 while delete the edge @xmath197 and either delete the edge @xmath259 to leave @xmath127 as a leaf , or delete the edge @xmath211 to leave @xmath128 as a leaf .",
    "we also consider @xmath72 as a candidate tree with leaves @xmath241 .",
    "when @xmath260 , then @xmath261 , and the maximum total weight of the internal vertices among the three trees is at least @xmath262 , and thus @xmath72 is settled .",
    "when @xmath263 , the maximum total weight of the internal vertices among the three trees is at least @xmath264 , and thus @xmath72 is settled .",
    "if @xmath43 is outside @xmath72 , then we add the edge @xmath198 to @xmath72 while delete the edge @xmath197 from @xmath72 , and add the edge @xmath195 to @xmath163 ; this way , the component becomes a tree and thus @xmath72 is settled .",
    "[ [ case-4.-1 ] ] case 4 .",
    "+ + + + + + +    if @xmath181 and @xmath199 , we consider the size of the type - v component containing @xmath170 .",
    "* case 4.1 . *",
    "if this type - v component contains more than one edge of @xmath37 , then denote one edge other than @xmath191 as @xmath130 .",
    "we can leave @xmath72 as it is with leaves @xmath241 , or add the edge @xmath201 to @xmath72 while delete the edge @xmath202 from @xmath72 to have a tree with leaves @xmath265 , or add the edge @xmath201 to @xmath72 while delete the edge @xmath218 from @xmath72 to have a tree with leaves @xmath266 .",
    "it follows that the maximum total weight of the internal vertices among the three trees is at least @xmath267 ; therefore , @xmath72 is settled .",
    "* case 4.2 . *",
    "if this type - v component contains only one edge of @xmath37 , which is @xmath191 , then from the claw - free property and the definition of @xmath8 being the farthest we conclude that @xmath172 is adjacent to at least one of @xmath129 and @xmath170 .    * case 4.2.1 . *",
    "assume @xmath172 and @xmath129 are adjacent . by treating @xmath172 as the vertex @xmath8 in operation  [ op1 ]",
    ", we conclude that at least one of the three vertices @xmath268 is adjacent to a vertex @xmath43 outside the set @xmath269 . *",
    "case 4.2.1.1 . *",
    "if @xmath128 is adjacent to a vertex @xmath43 outside the component @xmath72 , then we add the edges @xmath270 and @xmath201 to @xmath72 while delete the edges @xmath211 and @xmath202 from @xmath72 to obtain a tree with leaves @xmath271 ; thus , adding the edge @xmath272 to @xmath163 settles @xmath72 .",
    "if @xmath172 is adjacent to a vertex @xmath43 outside the component @xmath72 , then we add the edge @xmath201 to @xmath72 while delete the edge @xmath202 from @xmath72 to obtain a tree with leaves @xmath273 ; thus , adding the edge @xmath274 to @xmath163 settles @xmath72 .",
    "if @xmath175 is adjacent to a vertex @xmath43 outside the component @xmath72 , then we add the edges @xmath270 and @xmath201 to @xmath72 while delete the edges @xmath211 and @xmath275 from @xmath72 to obtain a tree with leaves @xmath276 ; thus , adding the edge @xmath195 to @xmath163 settles @xmath72 .",
    "* case 4.2.1.2 . *",
    "if @xmath128 is not adjacent to any vertex outside the component @xmath72 , but to some vertices inside @xmath72 , then let @xmath43 denote the farthest neighbor on @xmath72 ( tie breaks arbitrarily ) .",
    "when @xmath277 , we can add the edges @xmath278 , @xmath270 and @xmath201 to @xmath72 while delete the edges @xmath279 , @xmath211 and @xmath202 from @xmath72 to obtain a path with leaves @xmath280 ; thus , @xmath72 is settled .",
    "when @xmath236 , we can add the edges @xmath281 , @xmath270 and @xmath201 to @xmath72 while delete the edges @xmath211 , @xmath208 and @xmath202 from @xmath72 to obtain a path with leaves @xmath280 ; thus , @xmath72 is settled .",
    "when @xmath249 ( whether @xmath282 or not ) , we can add the edge @xmath283 to @xmath72 while delete the edge @xmath211 from @xmath72 to obtain a path with leaves @xmath284 ; we also can add the edges @xmath283 and @xmath201 to @xmath72 while delete the edges @xmath211 and @xmath202 from @xmath72 to obtain a path with leaves @xmath285 .",
    "it follows that the maximum total weight of the internal vertices between the two paths is at least @xmath286 ; therefore , @xmath72 is settled .",
    "when @xmath192 , it can be shown the same as in the last paragraph by replacing @xmath287 with @xmath171 , that @xmath72 can be settled .",
    "* case 4.2.1.3 .",
    "* if @xmath175 is not adjacent to any vertex outside the component @xmath72 , but to some vertices inside @xmath72 , then let @xmath43 denote the farthest neighbor on @xmath72 ( tie breaks arbitrarily ) .",
    "note that @xmath43 can not be any head vertex , as otherwise it violates the algorithm ; @xmath43 can not be any tail vertex either , unless it is @xmath171 or @xmath287 .",
    "when @xmath249 ( whether @xmath282 or not ) , we can add the edges @xmath288 and @xmath201 to @xmath72 while delete the edges @xmath211 and @xmath191 from @xmath72 to obtain a path with leaves @xmath284 ; we also can add the edges @xmath288 and @xmath201 to @xmath72 while delete the edges @xmath211 and @xmath202 from @xmath72 to obtain a path with leaves @xmath285 .",
    "it follows that the maximum total weight of the internal vertices between the two paths is at least @xmath286 ; therefore , @xmath72 is settled .",
    "when @xmath192 , it can be shown the same as in the last paragraph by replacing @xmath287 with @xmath171 , that @xmath72 can be settled .",
    "* case 4.2.1.4 .",
    "* if @xmath172 is not adjacent to any vertex outside the component @xmath72 , but to some vertices inside @xmath72 , then let @xmath43 denote the farthest neighbor on @xmath72 ( tie breaks arbitrarily ) .",
    "similar to case 4.2.1.2 , when @xmath289 , we can convert @xmath72 into a path with leaves @xmath280 to settle @xmath72 .",
    "when @xmath43 is a head , say @xmath131 of the edge @xmath290 in the type - v component attached to @xmath173 ( or @xmath185 ) , and assume that @xmath131 is adjacent to @xmath291 besides @xmath215 , then we can add the edges @xmath292 and @xmath201 to @xmath72 while delete the edges @xmath293 and @xmath202 from @xmath72 to obtain a tree with leaves @xmath294 ; the maximum total weight of the internal vertices among the three trees is at least @xmath295 , which settles @xmath72 .",
    "when @xmath43 is a tail , say @xmath215 of the edge @xmath290 in the type - v component attached to @xmath173 ( or @xmath185 ) , but @xmath296 , then from the claw - free property and the definition of @xmath43 we conclude that @xmath172 is also adjacent to @xmath131 .",
    "thus the argument in the last paragraph applies to settle @xmath72 .",
    "lastly , when @xmath249 ( or @xmath171 , which can be shown in the same way ) , we conclude that @xmath287 is adjacent to either @xmath128 , which is settled in case 4.2.1.2 , or @xmath175 , which is settled in case 4.2.1.3 .    * case 4.2.2 .",
    "* assume @xmath172 is not adjacent to @xmath129 but to @xmath170 . by treating @xmath128 as the vertex @xmath8 in operation  [ op1 ]",
    ", we conclude that at least one of the two vertices @xmath297 is adjacent to a vertex @xmath43 outside the set @xmath298 . *",
    "case 4.2.2.1 . *",
    "if @xmath172 is adjacent to a vertex @xmath43 outside the component @xmath72 , then we add the edge @xmath201 to @xmath72 while delete the edge @xmath202 from @xmath72 to obtain a tree with leaves @xmath273 ; thus , adding the edge @xmath274 to @xmath163 settles @xmath72 .",
    "if @xmath175 is adjacent to a vertex @xmath43 outside the component @xmath72 , then we add the edges @xmath299 and @xmath201 to @xmath72 while delete the edges @xmath202 and @xmath191 from @xmath72 to obtain a tree with leaves @xmath276 ; thus , adding the edge @xmath195 to @xmath163 settles @xmath72 .",
    "* case 4.2.2.2 . *",
    "if @xmath175 is not adjacent to any vertex outside the component @xmath72 , but to some vertices inside @xmath72 , then let @xmath43 denote the farthest neighbor on @xmath72 ( tie breaks arbitrarily ) .",
    "note that @xmath43 can not be any head vertex , as otherwise it violates the algorithm ; @xmath43 can not be any tail vertex either , unless it is @xmath171 or @xmath287 .",
    "when @xmath249 ( whether @xmath282 or not ) , we can add the edges @xmath288 and @xmath201 to @xmath72 while delete the edges @xmath211 and @xmath191 from @xmath72 to obtain a path with leaves @xmath284 ; we also can add the edges @xmath288 and @xmath201 to @xmath72 while delete the edges @xmath211 and @xmath202 from @xmath72 to obtain a path with leaves @xmath285 .",
    "it follows that the maximum total weight of the internal vertices between the two paths is at least @xmath286 ; therefore , @xmath72 is settled .",
    "when @xmath192 , it can be shown the same as in the last paragraph by replacing @xmath287 with @xmath171 , that @xmath72 can be settled .",
    "* case 4.2.2.3 . *",
    "if @xmath172 is not adjacent to any vertex outside the component @xmath72 , but to some vertices inside @xmath72 , then let @xmath43 denote the farthest neighbor on @xmath72 ( tie breaks arbitrarily ) .",
    "note that @xmath300 , which is case 4.2.1 .",
    "similar to case 4.2.1.2 , when @xmath289 , we can convert @xmath72 into a path with leaves @xmath280 to settle @xmath72 .",
    "when @xmath43 is a head , say @xmath131 of the edge @xmath290 in the type - v component attached to @xmath173 ( or @xmath185 ) , and assume that @xmath131 is adjacent to @xmath291 besides @xmath215 , then we can add the edges @xmath292 and @xmath201 to @xmath72 while delete the edges @xmath293 and @xmath202 from @xmath72 to obtain a tree with leaves @xmath294 ; the maximum total weight of the internal vertices among the three trees is at least @xmath295 , which settles @xmath72 .",
    "when @xmath43 is a tail , say @xmath215 of the edge @xmath290 in the type - v component attached to @xmath173 ( or @xmath185 ) , but @xmath296 , then from the claw - free property and the definition of @xmath43 we conclude that @xmath172 is also adjacent to @xmath131 .",
    "thus the argument in the last paragraph applies to settle @xmath72 .",
    "lastly , when @xmath249 ( or @xmath171 , which can be shown in the same way ) , we conclude that @xmath287 is adjacent to either @xmath128 , which is settled in case 4.2.1.2 , or @xmath175 , which is settled in case 4.2.1.3 .",
    "[ [ case-5.-1 ] ] case 5 .",
    "+ + + + + + +    if @xmath181 and @xmath204 , then by the claw - free property there is at least an edge among @xmath205 .",
    "note that @xmath173 and @xmath170 can not be adjacent due to the definition of the vertex @xmath8 being the farthest . if @xmath128 and @xmath170 are adjacent , then it has been proven in the above case 4 that @xmath72 can be settled .",
    "if @xmath173 and @xmath128 are adjacent , then we add the edges @xmath206 and @xmath207 to @xmath72 while delete the edges @xmath202 and @xmath208 from @xmath72 ; this way we obtain a path with two leaves @xmath171 and @xmath287 , and thus it settles @xmath72 .",
    "[ [ case-6.-1 ] ] case 6 . + + + + + + +    if @xmath181 and @xmath209 , then we add the edge @xmath212 to @xmath72 while delete the edge @xmath208 from @xmath72 ; this way we obtain a path with two leaves @xmath171 and @xmath287 , and thus it settles @xmath72 .    if @xmath181 and @xmath301 , then we add the edge @xmath217 to @xmath72 while delete the edge @xmath279 from @xmath72 ; this way we obtain a path with two leaves @xmath171 and @xmath287 , and thus it settles @xmath72 .",
    "if @xmath181 and @xmath183 , then there are two possible scenarios . when @xmath302 , by the claw - free property @xmath127 and @xmath170 must be adjacent , and the last paragraph shows that @xmath72 is settled",
    "when @xmath282 , we add the edge @xmath303 to @xmath72 while either delete the edge @xmath304 from @xmath72 to achieve a path with two leaves @xmath305 , or delete the edge @xmath202 from @xmath72 to achieve a tree with leaves @xmath306 ; we may also do nothing to @xmath72 which is a tree with leaves @xmath241 . among these three trees ,",
    "the maximum total weight of the internal vertices is at least @xmath307 ; thus , @xmath72 is settled .",
    "[ [ case-7.-1 ] ] case 7 . + + + + + + +    if @xmath181 , @xmath210 , and @xmath8 is in the type - v component containing @xmath171 , we distinguish whether @xmath8 is a head or a tail .",
    "( note that the same argument applies to @xmath302 and @xmath8 is in the type - v component containing @xmath287 . )    * case 7.1 . *",
    "if @xmath8 is a head , say @xmath131 of the edge @xmath290 , and assume that @xmath131 is adjacent to @xmath291 besides @xmath215 , then we consider two distinct scenarios",
    ".    * case 7.1.1 .",
    "* when @xmath308 , besides two leaves @xmath171 and @xmath287 , we either do nothing to @xmath72 to leave @xmath170 as a leaf , or add the edge @xmath309 to @xmath72 while delete the edge @xmath293 from @xmath72 to leave @xmath291 as a leaf , or add the edge @xmath309 to @xmath72 while delete the edge @xmath208 from @xmath72 to leave @xmath173 as a leaf . among these three trees ,",
    "the maximum total weight of the internal vertices is at least @xmath310 ; thus , @xmath72 is settled .",
    "* case 7.1.2 .",
    "* when @xmath311 , by the claw - free property and the definition of the vertex @xmath8 we conclude that @xmath173 is adjacent to at least one of @xmath215 and @xmath170 .",
    "if @xmath173 and @xmath215 are adjacent , then we add the edges @xmath309 and @xmath312 to @xmath72 while delete the edges @xmath208 and @xmath218 from @xmath72 to obtain a path with leaves @xmath171 and @xmath287 ; if @xmath173 and @xmath170 are adjacent , then we add the edge @xmath212 to @xmath72 while delete the edge @xmath208 from @xmath72 to obtain a path with leaves @xmath171 and @xmath287 .",
    "thus , @xmath72 is settled .",
    "* case 7.2 . * in the other case",
    "@xmath8 is a tail , say @xmath215 of the edge @xmath290 .    *",
    "case 7.2.1 . * if @xmath313 , then besides the leaf @xmath287 , we either do nothing to @xmath72 to leave @xmath314 as leaves , or add the edge @xmath221 to @xmath72 and delete the edge @xmath211 to leave @xmath128 as a leaf , or add the edge @xmath221 to @xmath72 and delete the edge @xmath208 to leave @xmath173 as a leaf . among these three trees ,",
    "the maximum total weight of the internal vertices is at least @xmath315 ; thus , @xmath72 is settled .",
    "* case 7.2.2 . *",
    "if @xmath316 , then by the claw - free property and the definition of @xmath8 we conclude that @xmath170 is adjacent to @xmath131 too .",
    "assume that @xmath131 is adjacent to @xmath291 besides @xmath215 .",
    "when @xmath308 , the argument in case 7.1.1 can be applied to settle @xmath72 ; when @xmath311 , besides the leaves @xmath171 and @xmath287 , we either do nothing to @xmath72 to leave @xmath170 as a leaf , or add the edge @xmath317 to @xmath72 and delete the edge @xmath208 to leave @xmath173 as a leaf , or add the edge @xmath317 to @xmath72 and delete the edge @xmath211 to leave @xmath128 as a leaf . among these three trees ,",
    "the maximum total weight of the internal vertices is at least @xmath318 ; thus , @xmath72 is settled .",
    "this finishes the discussion on case 7 .    in summary ,",
    "cases 2 - 7 together prove that when @xmath181 , the component @xmath72 can be settled .",
    "we next consider the situation where @xmath223 , that is , there is no type - v component adjacent to @xmath172 .",
    "[ [ case-8.-1 ] ] case 8 .",
    "+ + + + + + +    if @xmath223 and @xmath204 , then @xmath188 and thus @xmath189 by operation  [ op1 ] .",
    "* case 8.1 .",
    "* if there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath175 , then we add the edge @xmath195 to @xmath163 , add the edge @xmath206 to @xmath72 while delete the edge @xmath319 from @xmath72 ; this way , @xmath72 is settled .",
    "* case 8.2 .",
    "* note that if @xmath175 and @xmath320 are adjacent , then @xmath321 and @xmath127 are adjacent too . by the claw - free property ,",
    "we conclude that @xmath175 must be adjacent to a vertex @xmath322 .    * case 8.2.1 .",
    "* when @xmath277 ( or @xmath236 ) , we add the edges @xmath195 and @xmath323 to @xmath72 while delete the edges @xmath324 and @xmath319 from @xmath72 ; this way , we obtain a path with two leaves @xmath287 and @xmath171 , and thus settle @xmath72 .",
    "* case 8.2.2 .",
    "* otherwise , @xmath127 and @xmath173 are adjacent .",
    "when @xmath325 , we add the edge @xmath194 to @xmath72 while delete the edge @xmath319 from @xmath72 , to obtain a path with two leaves @xmath287 and @xmath170 ; we may also add the edges @xmath194 and @xmath206 to @xmath72 while delete the edges @xmath319 and @xmath208 from @xmath72 to obtain a path with two leaves @xmath287 and @xmath173 . between these two paths ,",
    "the maximum total weight of the internal vertices is at least @xmath326 ; thus , @xmath72 is settled .",
    "when @xmath327 , the same argument applies to settle @xmath72 .",
    "[ [ case-9.-1 ] ] case 9 .",
    "+ + + + + + +    if @xmath223 and @xmath209 , we add the edge @xmath328 to @xmath72 while delete the edge @xmath208 from @xmath72 ; this way , we obtain a path with two leaves @xmath287 and @xmath171 , and thus @xmath72 is settled .",
    "if @xmath223 and @xmath301 , we add the edge @xmath329 to @xmath72 while delete the edge @xmath279 from @xmath72 ; this way , we obtain a path with two leaves @xmath287 and @xmath171 , and thus @xmath72 is settled .    if @xmath223 and @xmath183 , then we distinguish whether @xmath260 or not . when @xmath263 , then @xmath170 and @xmath127 must be adjacent in @xmath2 and thus @xmath72 can be settled as in the last paragraph .",
    "when @xmath260 , if @xmath127 is adjacent to one of @xmath175 and @xmath173 , then we can obtain a path with two leaves @xmath287 and @xmath171 to settle @xmath72 ; if @xmath175 and @xmath173 are adjacent and @xmath256 , then we can obtain a path with two leaves being @xmath171 and the lightest among @xmath330 , and thus the total weight of the internal vertices of this path is at least @xmath331 , which settles @xmath72 ; otherwise @xmath254 , and then we add the edge @xmath194 to @xmath72 while delete the edge @xmath332 from @xmath72 to obtain a cycle , followed by deleting the lightest edge of @xmath333 to settle @xmath72 .",
    "[ [ case-10.-1 ] ] case 10 . + + + + + + + +    if @xmath223 , @xmath210 , and @xmath8 is in the type - v component containing @xmath171 , we distinguish whether @xmath8 is a head or a tail .",
    "note that the case where @xmath302 and @xmath8 is in the type - v component containing @xmath287 can be argued in exactly the same way . )",
    "* case 10.1 . *",
    "if @xmath8 is a head , say @xmath131 of the edge @xmath290 , assume that @xmath131 is adjacent to @xmath291 besides @xmath215 .",
    "exactly the same argument as in case 7.1 applies to settle @xmath72 , since it does not matter whether @xmath223 or not .",
    "* case 10.2 . *",
    "if @xmath8 is a tail , say @xmath215 of the edge @xmath290 .",
    "note that @xmath334 , which has been dealt in case 9 .",
    "the same argument as in case 7.2 by replacing @xmath128 with @xmath175 , since we now have @xmath335 , applies to settle @xmath72 .",
    "all possible cases have be discussed in the above . the lemma is proven .",
    "[ lemma11 ] a type - iii component in the subgraph @xmath164 can be settled .",
    "recall that a type - iii component @xmath72 in its original form contains only one edge @xmath123 of @xmath37 , with another edge @xmath336 where @xmath139 ( see figure  [ fig03a ] ) ; there could be a type - v component attached to @xmath172 , with its tail @xmath170 replacing the role of @xmath172 .",
    "such a component @xmath72 can be regarded as a _ degenerated _ type - i component , where the vertex @xmath146 is substituted with an edge @xmath337 such that @xmath338 .",
    "that is , @xmath72 can be settled in an easier manner compared to a type - i component , since there is no type - v component attached to @xmath339 . the detailed case - by - case proof is left in the appendix .",
    "[ lemma12 ] a type - iv component in the subgraph @xmath164 can be settled .",
    "denote the two edges of @xmath37 in the type - iv component @xmath72 in its original form as @xmath168 and @xmath169 .",
    "note that both @xmath128 and @xmath129 are adjacent to a vertex @xmath139 ( see figure  [ fig03b ] ) , and there could be a type - v component attached to @xmath172 and @xmath173 , respectively , with the tails @xmath314 replacing the roles of @xmath340 .",
    "such a component @xmath72 can be regarded as a _ degenerated _ type - ii component , where the vertex @xmath146 is substituted with an edge @xmath337 such that @xmath338 .",
    "that is , @xmath72 can be settled in an easier manner compared to a type - ii component , since there is no type - v component attached to @xmath339 . the detailed case - by - case proof is left in the appendix .",
    "[ lemma13 ] a type - vi component in the subgraph @xmath164 can be settled .",
    "recall that a type - vi component @xmath72 is a cycle containing two or more edges of @xmath37 , where the head of one edge of @xmath37 is adjacent to the tail of another edge of @xmath37 ( see figure  [ fig04b ] ) .",
    "clearly , if there are three or more edges of @xmath37 in @xmath72 , we simply delete the lightest one to settle @xmath72 . in the sequel we deal with the case where @xmath72 is a length-@xmath112 cycle .",
    "denote the two edges of @xmath85 as @xmath191 and @xmath234 , and assume that @xmath174 .",
    "if @xmath175 ( @xmath176 , respectively ) is adjacent to a vertex @xmath8 outside @xmath72 , then we add the edge @xmath341 ( @xmath342 , respectively ) to @xmath163 and delete the edge @xmath194 ( @xmath234 , respectively ) from @xmath72 ; this way , the total weight of the internal vertices is at least @xmath343 , and thus @xmath72 is settled .",
    "if neither @xmath175 or @xmath176 is adjacent to any vertex @xmath8 outside @xmath72 , then we conclude from the construction algorithm that @xmath344 since @xmath175 and @xmath176 are not adjacent to each other .",
    "it follows from the claw - free property that neither @xmath170 or @xmath171 can be adjacent to any vertex @xmath43 outside @xmath72 .",
    "this implies @xmath345 , a contradiction .",
    "the lemma is proved .",
    "[ thm02 ] the mwist problem on claw - free graphs admits a @xmath346-approximation algorithm .",
    "the above lemmas  [ lemma09][lemma13 ] state that every component of the subgraph @xmath162 $ ] can be settled , without affecting any other components . also , such a settling process for a component takes only linear time , by scanning once the edges in the subgraph induced on the set of vertices of the component . by settling ,",
    "essentially the component is converted into a tree , possibly with one edge of @xmath163 specified for connecting a leaf of the tree outwards .    in the next step of the algorithm",
    ", it iteratively processes the heaviest component @xmath72 , i.e. with the largest @xmath73 .",
    "if the component @xmath72 has been associated with an edge @xmath44 of @xmath163 , and using the edge @xmath44 to connect a leaf of the resultant tree for @xmath72 outwards does not create a cycle , then the algorithm does this and @xmath72 is processed .",
    "this guarantees the total weight of the internal vertices in @xmath108 is at least @xmath347 .",
    "if using the edge @xmath44 to connect a leaf of the resultant tree for @xmath72 outwards would create a cycle , the algorithm processes @xmath72 by replacing @xmath72 with another tree that guarantees the total weight of the internal vertices in @xmath108 at least @xmath165 .",
    "notice that the latter case happens only because of ( at least ) one edge of @xmath163 in an earlier iteration where a distinct component @xmath154 was processed , which connects a vertex of @xmath154 into a vertex of @xmath72 .",
    "therefore , every such @xmath72 is associated with a distinct component @xmath154 processed by the algorithm in an earlier iteration , and thus @xmath348 . on the other hand , every such component @xmath154 is associated to one @xmath72 only , due to its edge in @xmath163 connecting a leaf outwards into a vertex of @xmath72 .",
    "it follows that for this pair of components @xmath72 and @xmath154 , the total weight of the internal vertices in @xmath349 is at least @xmath350 after all components of @xmath164 are processed , we obtain a forest for which the total weight of the internal vertices therein is at least @xmath351 .",
    "the algorithm lastly uses any other available edges of @xmath34 to interconnect the forest into a final tree , denoted as @xmath1 ; clearly @xmath352 .",
    "the time for the interconnecting purpose is at most @xmath353 .",
    "therefore , by corollary  [ coro01 ] we have a @xmath7-approximation algorithm for the mwist problem on claw - free graphs .",
    "we have presented an improved approximation algorithm for the vertex weighted mist problem , denoted mwist , which achieves the worst - case performance ratio @xmath6 , beating the previous best ratio of @xmath31 , designed by knauer and spoerhase in 2009 .",
    "the key ingredient in the design and analysis of our algorithm is a novel relationship between mwist and the maximum weight matching , which we uncovered and it is inspired by the work @xcite .",
    "a step further , for the problem restricted to claw - free graphs , we presented a @xmath7-approximation algorithm , improving the previous best ratio of @xmath6 designed by salamon in 2009 for claw - free graphs without leaves .",
    "it would be interesting to see whether this newly uncovered relationship , possibly combined with other new ideas , can be explored further to design better approximation algorithms for mwist , or special cases of mwist including claw - free graphs and cubic graphs .",
    "zzc was supported in part by the grant - in - aid for scientific research of the ministry of education , science , sports and culture of japan , under grant no .",
    "gl was supported by the nserc canada , and most of his work was done while visiting the tokyo denki university at hatoyama .",
    "lw was supported by the hong kong grf grants cityu 114012 and cityu 123013 .",
    "yc was supported in part by the nserc canada , the nnsf china under grants no .",
    "11401149 , 11201105 , and 11571252 , and the china scholarship council under grant no .",
    "201508330054 .",
    "e.  prieto and c.  sliper .",
    "either / or : using vertex cover structure in designing fpt - algorithms  the case of @xmath26-internal spanning tree . in _ proceedings of wads 2003 , lncs 2748 _ , pages 474483 , 2003 .",
    "( proof of lemma  [ lemma11 ] ) recall that a type - iii component @xmath72 in its original form contains only one edge @xmath123 of @xmath37 , with another edge @xmath336 where @xmath139 ( see figure  [ fig03a ] ) ; there could be a type - v component attached to @xmath172 , with its tail @xmath170 replacing the role of @xmath172 .",
    "if @xmath170 is adjacent to a vertex @xmath8 outside @xmath72 , then we add the edge @xmath178 to @xmath163 , which settles @xmath72 , since the total weight of the internal vertices in @xmath72 is @xmath73 .",
    "we next consider the case where @xmath170 is not adjacent to any vertex outside @xmath72 , and thus it has to be adjacent to some vertex inside @xmath72 .",
    "note that @xmath72 is a path with @xmath170 and @xmath146 being its two ending vertices .",
    "let @xmath8 denote the vertex adjacent to @xmath170 that is the to @xmath170 on @xmath72 .",
    "we distinguish this distance @xmath180 and where @xmath8 locates .",
    "if @xmath181 and @xmath8 is in the type - v component containing @xmath170 , then @xmath8 must be a tail of an edge of @xmath37 and thus @xmath182 is even .",
    "denote this edge as @xmath124 , that is @xmath209 .",
    "* case 2.1 . *",
    "if @xmath184 , then denote the head vertex @xmath173 is adjacent to in the type - v component as @xmath127 , besides @xmath129 .",
    "we conclude from the claw - free property that there must be at least an edge among @xmath355 , which contradicts the identity of the type - v component .",
    "therefore , this is impossible to have @xmath184 .",
    "* case 2.2 . *",
    "if @xmath187 , then we conclude that @xmath188 and thus @xmath189 by operation  [ op1 ] , i.e. there is at least another edge incident at @xmath175 besides @xmath228 and @xmath191 .",
    "denote this neighbor of @xmath175 as @xmath43 , which is impossible to be inside @xmath72 by our construction algorithm .",
    "thus , we add the edge @xmath328 to @xmath72 while delete the edge @xmath228 from @xmath72 , and add the edge @xmath195 to @xmath163 ; this way , the component becomes a path and thus @xmath72 is settled .",
    "* case 3.1 . *",
    "if this type - v component contains more than one edge of @xmath37 , then by the claw - free property @xmath128 must be adjacent to @xmath170 , which violates the definition of @xmath8 being the farthest and thus it is impossible .",
    "if @xmath181 and @xmath199 , then we leave @xmath72 as it is if @xmath200 , or we add the edge @xmath201 to @xmath72 while delete the edge @xmath202 from @xmath72 . in either case , the total weight of the internal vertices in the resultant path is at least @xmath356 , and thus it settles @xmath72 .      if @xmath181 and @xmath357 , then we leave @xmath72 as it is if @xmath358 , or we add the edge @xmath359 to @xmath72 while delete the edge @xmath336 from @xmath72 . in either case , the total weight of the internal vertices in the resultant path is at least @xmath360 , and thus it settles @xmath72",
    "in summary , cases 2 - 5 together prove that when @xmath181 , the component @xmath72 can be settled .",
    "we next consider the situation where @xmath223 , that is , there is no type - v component adjacent to @xmath172 .",
    "if @xmath223 , then @xmath357 , and we conclude that @xmath188 and thus @xmath189 by operation  [ op1 ] , that is , there is a vertex @xmath43 outside @xmath72 that is adjacent to @xmath175 .",
    "thus we add the edge @xmath195 to @xmath163 , add the edge @xmath359 to @xmath72 while delete the edge @xmath361 from @xmath72 ; this way , @xmath72 is settled .",
    "( proof of lemma  [ lemma12 ] ) denote the two edges of @xmath37 in the type - iv component @xmath72 in its original form as @xmath168 and @xmath169 .",
    "note that both @xmath128 and @xmath129 are adjacent to a vertex @xmath139 ( see figure  [ fig03b ] ) , and there could be a type - v component attached to @xmath172 and @xmath173 , respectively , with the tails @xmath314 replacing the roles of @xmath340 .",
    "we assume w.l.o.g .",
    "that @xmath174 .",
    "if @xmath170 is adjacent to a vertex @xmath8 outside @xmath72 , then we add the edge @xmath178 to @xmath163 , which settles @xmath72 , since the total weight of the internal vertices in @xmath72 is at least @xmath179 .",
    "we next consider the case where @xmath170 is not adjacent to any vertex outside @xmath72 , and thus it has to be adjacent to some vertex inside @xmath72 .",
    "note that @xmath72 is a path with @xmath170 and @xmath171 being its two ending vertices .",
    "let @xmath8 denote the vertex adjacent to @xmath170 that is the to @xmath170 on @xmath72 .",
    "we distinguish this distance @xmath180 and where @xmath8 locates .",
    "if @xmath181 and @xmath8 is in the type - v component containing @xmath170 , then @xmath8 must be a tail of an edge of @xmath37 and thus @xmath182 is even .",
    "denote this edge as @xmath126 , that is @xmath183 .",
    "* case 2.1 . *",
    "if @xmath184 , then denote the head vertex @xmath185 is adjacent to in the type - v component as @xmath131 , besides @xmath127 .",
    "we conclude from the claw - free property that there must be at least an edge among @xmath186 , which contradicts the identity of the type - v component .",
    "therefore , it is impossible to have @xmath184 .",
    "* case 2.2 . *",
    "if @xmath187 , then we conclude that @xmath188 and thus @xmath189 by operation  [ op1 ] , i.e. there is at least another edge incident at @xmath175 besides @xmath190 and @xmath191 .",
    "denote this neighbor of @xmath175 as @xmath43 . if @xmath43 is inside @xmath72 , then @xmath192 by our construction algorithm and the claw - free property .",
    "we add the edges @xmath194 and @xmath362 to @xmath72 while delete the edge @xmath363 from @xmath72 to obtain a cycle , followed by deleting the lightest edge of @xmath85 ; this settles @xmath72 since @xmath85 has at least three edges .",
    "if @xmath43 is outside @xmath72 , then we add the edge @xmath193 to @xmath72 while delete the edge @xmath190 from @xmath72 , and add the edge @xmath195 to @xmath163 ; this way , the component becomes a path and thus @xmath72 is settled .",
    "* case 3.1 .",
    "* if this type - v component contains more than one edge of @xmath37 , then by the claw - free property @xmath128 must be adjacent to @xmath170 , which violates the definition of @xmath8 being the farthest and thus it is impossible .",
    "* case 3.2 . *",
    "if the type - v component containing @xmath170 has only one edge of @xmath37 , that is @xmath191 , then from the definition of @xmath8 we have @xmath188 , and thus @xmath189 by operation  [ op1 ] , i.e. there is at least another edge incident at @xmath175 besides @xmath197 and @xmath191 .",
    "the same argument as in case 2.2 , with @xmath364 replaced by @xmath365 , applies to settle @xmath72 .      if @xmath181 and @xmath199 , then we leave @xmath72 as it is when @xmath200 , or we add the edge @xmath201 to @xmath72 while delete the edge @xmath202 from @xmath72 . in either case ,",
    "the total weight of the internal vertices in the resultant path is at least @xmath286 , and thus it settles @xmath72 .      if @xmath181 and @xmath357 , then by the definition of @xmath8 and the claw - free property @xmath128 and @xmath170 are adjacent .",
    "we thus settle @xmath72 as in case 4 .",
    "we note that this is simpler than case 5 in the proof of lemma  [ lemma10 ] because here @xmath128 and @xmath129 can not be adjacent .      if @xmath181 and @xmath204 , then we add the edge @xmath206 to @xmath72 while delete the edge @xmath366 from @xmath72 .",
    "this gives a path with leaves @xmath171 and @xmath146 , and thus it settles @xmath72 .    if @xmath181 and @xmath209 , then we conclude that @xmath129 and @xmath170 are adjacent when @xmath210 , and thus we settle @xmath72 as in the last paragraph ; when @xmath214 , we add the edge @xmath367 to @xmath72 to obtain a cycle , followed by deleting the lightest edge of @xmath85 from @xmath72 .",
    "since @xmath85 has at least three edges , this settles @xmath72 .",
    "* case 7.1 . *",
    "if @xmath8 is a head , say @xmath127 of the edge @xmath134 , and assume that @xmath127 is adjacent to @xmath215 besides @xmath185 , then we do nothing to @xmath72 to leave @xmath170 as a leaf when @xmath216 , or otherwise add the edge @xmath217 to @xmath72 while delete the edge @xmath239 from @xmath72 to leave @xmath215 as a leaf . in either way ,",
    "the total weight of the internal vertices of the resultant path is at least @xmath368 .",
    "therefore , in either case @xmath72 can be settled .",
    "* case 7.2 . *",
    "if @xmath8 is a tail , say @xmath185 of the edge @xmath134 .",
    "if @xmath220 , then we add the edge @xmath221 to @xmath72 to obtain a cycle , followed by deleting the lightest edge of @xmath85 from @xmath72 .",
    "since @xmath85 has at least three edges , this settles @xmath72 . if @xmath222 , then by the claw - free property and the definition of @xmath8 we conclude that @xmath170 is adjacent to @xmath127 too , and thus the argument in case 7.1 applies to settle @xmath72 .",
    "this finishes the discussion on case 7 .    in summary ,",
    "cases 2 - 7 together prove that when @xmath181 , the component @xmath72 can be settled .",
    "we next consider the situation where @xmath223 , that is , there is no type - v component adjacent to @xmath172 .",
    "* case 8.1 .",
    "* if @xmath43 is inside @xmath72 , then @xmath192 by our construction algorithm and the claw - free property .",
    "if @xmath210 , then we add the edges @xmath194 and @xmath359 to @xmath72 while delete the edge @xmath369 from @xmath72 to obtain a cycle , followed by deleting the lightest edge of @xmath85 ; this settles @xmath72 since @xmath85 has at least three edges .",
    "if @xmath214 , then we add the edges @xmath194 and @xmath359 to @xmath72 while delete the edges @xmath369 and @xmath370 from @xmath72 to obtain a path with leaves @xmath146 and @xmath371 when @xmath372 , or otherwise we add the edge @xmath194 to @xmath72 while delete the edge @xmath369 from @xmath72 to obtain a path with leaves @xmath146 and @xmath170 . in either way , the total weight of the internal vertices of the resultant path is at least @xmath373 .",
    "therefore , @xmath72 can be settled .",
    "* case 8.2 . *",
    "if @xmath43 is outside @xmath72 , then we add the edge @xmath374 to @xmath72 while delete the edge @xmath361 from @xmath72 , and add the edge @xmath195 to @xmath163 ; this way , the component becomes a path and thus @xmath72 is settled .      if @xmath223 and @xmath204 , then we add the edge @xmath206 to @xmath72 while delete the edge @xmath366 from @xmath72 to obtain a path with leaves @xmath146 and @xmath171 . therefore , @xmath72 can be settled .",
    "if @xmath223 and @xmath209 , when @xmath210 then we conclude from the claw - free property and the definition of @xmath8 that @xmath129 and @xmath170 are also adjacent , and thus @xmath72 can be settled as in the last paragraph ; when @xmath214 , we can either do nothing to @xmath72 to leave @xmath170 and @xmath171 as leaves , or add the edge @xmath367 to @xmath72 to obtain a cycle , followed by either deleting the edge @xmath375 to obtain a path with leaves @xmath176 and @xmath146 , or deleting the edge @xmath361 to obtain a path with leaves @xmath175 and @xmath146 .",
    "this way , the maximum total weight of the internal vertices among the three resultant paths is at least @xmath376 .",
    "thus , @xmath72 can be settled .",
    "* case 10.1 . *",
    "if @xmath8 is a head , say @xmath127 of the edge @xmath134 , and assume that @xmath127 is adjacent to @xmath215 besides @xmath185 , then we do nothing to @xmath72 to leave @xmath170 as a leaf if @xmath216 , or otherwise add the edge @xmath217 to @xmath72 while delete the edge @xmath239 from @xmath72 to leave @xmath215 as a leaf . this way ,",
    "the total weight of the internal vertices of the resultant path is at least @xmath377 .",
    "thus , @xmath72 can be settled .",
    "* case 10.2 .",
    "* if @xmath8 is a tail , say @xmath185 of the edge @xmath134 .",
    "if @xmath220 , then we add the edge @xmath221 to @xmath72 to make it a cycle followed by deleting the lightest edge of @xmath85 ; this settles @xmath72 since there are at least three edges in @xmath85 .",
    "if @xmath222 , then from the claw - free property and the definition of @xmath8 , we conclude that @xmath127 must be adjacent to @xmath170 too .",
    "therefore , the same as in case 10.1 , @xmath72 can be settled ."
  ],
  "abstract_text": [
    "<S> given a vertex - weighted connected graph @xmath0 , the maximum weight internal spanning tree ( mwist for short ) problem asks for a spanning tree @xmath1 of @xmath2 such that the total weight of the internal vertices in @xmath1 is maximized . </S>",
    "<S> the un - weighted variant , denoted as mist , is np - hard and apx - hard , and the currently best approximation algorithm has a proven performance ratio @xmath3 . </S>",
    "<S> the currently best approximation algorithm for mwist only has a performance ratio @xmath4 , for any @xmath5 . in this paper </S>",
    "<S> , we present a simple algorithm based on a novel relationship between mwist and the maximum weight matching , and show that it achieves a better approximation ratio of @xmath6 . </S>",
    "<S> when restricted to claw - free graphs , a special case been previously studied , we design a @xmath7-approximation algorithm .    </S>",
    "<S> [ [ keywords ] ] keywords : + + + + + + + + +    maximum weight internal spanning tree ; maximum weight matching ; approximation algorithm ; performance analysis </S>"
  ]
}