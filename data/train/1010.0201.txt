{
  "article_text": [
    "in a constraint satisfaction problem ( csp ) we are given a set of variables , and the goal is to find an assignment of the variables subject to specified constraints .",
    "a constraint is usually expressed as a requirement that combinations of values of a certain ( usually small ) set of variables belong to a certain relation .",
    "csps have been intensively studied in both theoretical and practical perspectives . on the theoretical side",
    "the key research direction has been the complexity of the csp when either the interaction of sets constraints are imposed on , that is , the hypergraph formed by these sets , is restricted @xcite , or restrictions are on the type of allowed relations @xcite . in the latter direction",
    "the main focus has been on the so called _ dichotomy conjecture _",
    "@xcite suggesting that every csp restricted in this way is either solvable in polynomial time or is np - complete .",
    "this ` pure ' constraint satisfaction problem is sometimes not enough to model practical problems , as some constraint that have to be satisfied are not ` local ' in the sense that they can not be viewed as applied to only a limited number of variables",
    ". constraints of this type are called _",
    "global_. global constraints are very diverse , the current global constraint catalog ( see ) lists 348 types of such constraints . in this paper",
    "we focus on _ global cardinality constraints _ @xcite .",
    "a global cardinality constraint @xmath2 is specified for a set of values @xmath3 and a set of variables @xmath4 , and is given by a mapping @xmath5 that assigns a natural number to each element of @xmath3 such that @xmath6 .",
    "an assignment of variables @xmath4 satisfies @xmath2 if for each @xmath7 the number of variables that take value @xmath8 equals @xmath9 . in a csp with global cardinality constraints ,",
    "given a csp instance and a global cardinality constraint @xmath2 , the goal is to decide if there is a solution of the csp instance satisfying @xmath2 . the restricted class of csps with global cardinality constraints such that every instance from this class uses only relations from a fixed set @xmath1 of relations ( such a set is often called a _ constraint language _ ) is denoted by @xmath0 .",
    "we consider the following problem : characterize constraint languages @xmath1 such that @xmath0 is solvable in polynomial time .",
    "more general versions of global cardinality constraints have appeared in the literature , see , e.g.   @xcite , where the number of variables taking value @xmath8 has to belong to a prescribed set of cardinalities ( rather than being exactly @xmath9 ) . in this paper",
    "we call the csp allowing such generalized constraints _ extended csp with cardinality constraints_. as we discuss later , our results apply to this problem as well .    the complexity of @xmath0 has been studied in @xcite for constraint languages @xmath1 on a 2-element set .",
    "it was shown that @xmath0 is solvable in polynomial time if every relation in @xmath1 is _ width-2-affine _ , i.e.  it can be expressed as the set of solutions of a system of linear equations over a 2-element field containing at most 2 variables , or , equivalently , using the equality and disequality clauses ; otherwise it is np - complete ( we assume p@xmath10np ) . in the 2-element case @xmath0",
    "is also known as the @xmath11-ones@xmath12 problem , since a global cardinality constraint can be expressed by specifying how many ones ( the set of values is thought to be @xmath13 ) one wants to have among the values of variables .",
    "the parameterized complexity of @xmath11-ones@xmath12 has also been studied @xcite , where @xmath11 is used as a parameter .    in the case of a 2-element domain ,",
    "the polynomial classes can be handled by a standard application of dynamic programming .",
    "suppose that the instance is given by a set of unary clauses and binary equality / disequality clauses .",
    "consider the graph formed by the binary clauses .",
    "there are at most two possible assignments for each connected component of the graph : setting the value of a variable uniquely determines the values of all the other variables in the component .",
    "thus the problem is to select one of the two assignments for each component .",
    "trying all possibilities would be exponential in the number of components . instead ,",
    "for @xmath14 , we compute the set @xmath15 of all possible pairs @xmath16 such that there is a partial solution on the first @xmath17 components containing exactly @xmath18 zeroes and exactly @xmath19 ones .",
    "it is not difficult to see that @xmath20 can be computed if @xmath15 is already known .",
    "we generalize the results of @xcite for arbitrary finite sets and arbitrary constraint languages .",
    "as usual , the characterization for arbitrary finite sets is significantly more complex and technical than for the 2-element set . as a straightforward generalization of the 2-element case , we can observe that the problem is polynomial - time solvable if every relation can be expressed by binary mappings .",
    "in this case , setting a single value in a component uniquely determines all the values in the component .",
    "therefore , if the domain is @xmath3 , then there are at most @xmath21 possible assignments in each component , and the same dynamic programming technique can be applied ( but this time the set @xmath15 contains @xmath21-tuples instead of pairs ) .    one might be tempted to guess that the class described in the previous paragraph is the only class where @xmath22 is polynomial - time solvable . however , it turns out that there are more general tractable classes .",
    "first , suppose that the domain is partitioned into equivalence classes , and the binary constraints are mappings between the equivalence classes .",
    "this means that the values in the same equivalence class are completely interchangeable .",
    "thus it is sufficient to keep one representative from each class , and then the problem can be solved by the algorithm sketched in the previous paragraph .",
    "again , one might believe that this construction gives all the tractable classes , but the following example shows that it does not cover all the tractable cases .",
    "[ exa : subcomponent ] let @xmath23 .",
    "we claim that @xmath24 is polynomial - time solvable .",
    "consider the graph on the variables where two variables are connected if and only if they appear together in a constraint .",
    "as before , for each component , we compute a set containing all possible cardinality vectors , and then use dynamic programming . in each component",
    ", we have to consider only two cases : either every variable is in @xmath25 or every variable is in @xmath26 .",
    "if every variable of component @xmath27 is in @xmath25 , then @xmath28 can be expressed by the unary constant relation @xmath29 , and the binary relation @xmath30 . the binary relations partition component @xmath27 into sub - components @xmath31 , @xmath32 , @xmath33 . since @xmath34 is a mapping ,",
    "there are at most 2 possible assignments for each sub - component .",
    "thus we can use dynamic programming to compute the set of all possible cardinality vectors on @xmath27 that use only the values in @xmath25 .",
    "if every variable of @xmath27 is in @xmath26 , then @xmath28 can be expressed as the unary constant relation @xmath35 and the binary relation @xmath36 .",
    "again , binary relation @xmath37 partitions @xmath27 into sub - components , and we can use dynamic programming on them . observe that the sub - components formed by @xmath34 and the sub - components formed by @xmath37 can be different : in the first case , @xmath38 and @xmath39 are adjacent if they appear in the second and third coordinates of a constraint , while in the second case , @xmath38 and @xmath39 are adjacent if they appear in the first and second coordinates of a constraint .",
    "it is not difficult to make example  [ exa : subcomponent ] more complicated in such a way that we have to look at sub - subcomponents and perform multiple levels of dynamic programming .",
    "this suggests that it would be difficult to characterize the tractable relations in a simple combinatorial way .",
    "we give two characterizations of finite @xmath22 , one more along the line of the usual approach to the csp , using polymorphisms , and another more combinatorial one .",
    "the latter is more technical , but it is much more suitable for algorithms .",
    "a polymorphism of a constraint language is an operation that preserves every relation from the language .",
    "the types of polymorphisms we need here are quite common and have appeared in the literature many times . a ternary operation @xmath40 satisfying the equations @xmath41 is said to be _ majority _ , and a ternary operation @xmath42 satisfying @xmath43 is said to be _ maltsev_. an operation is _ conservative _ if it always takes a value equal to one ( not necessarily the same one ) of its arguments .",
    "[ the : main - poly ] for a constraint language @xmath1 , the problem @xmath0 is polynomial time solvable if and only if @xmath1 has a majority polymorphism and a conservative maltsev polymorphism .",
    "otherwise it is np - complete .    observe that for constraint languages over a 2-element domain , theorem  [ the : main - poly ] implies the characterization of creignou et al .",
    "width-2 affine is equivalent to affine and bijunctive ( definable in 2sat ) , and over a 2-element domain , affine is equivalent to having a conservative maltsev polymorphism and bijunctive is equivalent to having a majority polymorphism .",
    "the second characterization uses logical definability .",
    "the right generalization of mappings is given by the notion of rectangularity .",
    "a binary relation @xmath44 is called _ rectangular _ if @xmath45 implies @xmath46 .",
    "we say that a pair of equivalence relations @xmath47 and @xmath48 over the same domain _ cross _ , if there is an @xmath49-class @xmath50 and a @xmath48-class @xmath3 such that none of @xmath51 , @xmath52 , and @xmath53 is empty .",
    "a relation is _",
    "2-decomposable _ if it can be expressed as a conjunction of binary relations .",
    "we denote by @xmath54 the set of all relations that are primitive positive definable in @xmath1 .",
    "a constraint language is said to be _ non - crossing decomposable _ if every relation from @xmath54 is 2-decomposable , every binary relation from @xmath54 is rectangular , and no pair of equivalence relations from @xmath54 cross . for detailed definitions and discussion",
    "see section  [ sec : preliminaries ] .",
    "[ the : main - poly2 ] for a constraint language @xmath1 , the problem @xmath0 is polynomial time solvable if and only if @xmath1 is non - crossing decomposable . otherwise it is np - complete .",
    "the equivalence of the two characterizations will be proved in section  [ sec : equiv - char ] .",
    "following @xcite , we also study the counting problem @xmath55 corresponding to @xmath0 , in which the objective is to find the number of solutions of a csp instance that satisfy a global cardinality constraint specified .",
    "creignou et al .",
    "@xcite proved that if @xmath1 is a constraint language on a 2-element set , say , @xmath13 , then @xmath55 are solvable in polynomial time exactly when @xmath0 is , that is , if every relation from @xmath1 is width-2-affine .",
    "otherwise it is @xmath56-complete .",
    "we prove that in the general case as well , @xmath55 is polynomial time solvable if and only if @xmath0 is .",
    "however , in this paper we do not prove a complexity dichotomy , as we do not determine the exact complexity of the hard counting problems .",
    "all such problems are np - hard as theorems  [ the : main - poly ] and  [ the : main - poly2 ] show ; and we do not claim that the np - hard cases are actually @xmath56-hard .",
    "[ the : counting - main - poly ] for a constraint language @xmath1 , the problem @xmath55 is polynomial time solvable if and only if @xmath1 has a majority polymorphism and a conservative maltsev polymorphism ; or , equivalently , if and only if @xmath1 is non - crossing decomposable .",
    "otherwise it is np - hard .",
    "we also consider the so called _ meta - problem _ for @xmath0 and @xmath55 : suppose set @xmath3 is fixed .",
    "given a finite constraint language @xmath1 on @xmath3 , decide whether or not @xmath0 ( and @xmath55 ) is solvable in polynomial time . by theorems  [ the : main - poly ] and  [ the : counting - main - poly ] it suffices to check if @xmath1 has a majority and a conservative maltsev polymorphism . since the set @xmath3 is fixed , this can be done by checking , for each possible ternary function with the required properties , whether or not it is a polymorphism of @xmath1 . to check",
    "if a ternary operation @xmath57 is a polymorphism of @xmath1 one just needs for each relation @xmath58 to apply @xmath57 to every triple of tuples in @xmath44 .",
    "this can be done in a time cubic in the total size of relations in @xmath1 .",
    "[ the : meta - problem ] let @xmath3 be a finite set .",
    "the meta - problem for @xmath0 and @xmath55 is polynomial time solvable .",
    "note that all the results use the assumption that the set @xmath3 is fixed ( although the complexity of algorithms does not depend on a particular constraint language ) . without this assumption",
    "the algorithms given in the paper become exponential time , and theorem  [ the : meta - problem ] does not answer if the meta problem is polynomial time solvable if the set @xmath3 is not fixed , and is a part of the input .",
    "the algorithm sketched above is then super - exponential .",
    "our notation concerning tuples and relations is fairly standard .",
    "the set of all tuples of elements from a set @xmath3 is denoted by @xmath59 .",
    "we denote tuples in boldface , e.g. , @xmath60 , and their components by @xmath61,\\ba[2],\\ldots$ ] . an @xmath62-ary _ relation _ on set",
    "@xmath3 is any subset of @xmath59 .",
    "sometimes we use instead of relation @xmath44 the corresponding predicate @xmath63 .",
    "a set of relations on @xmath3 is called a _ constraint language _ over @xmath3 . for a subset @xmath64 with @xmath65 and an @xmath62-tuple @xmath60 , by @xmath66",
    "we denote the _ projection of _ @xmath60 _ onto _",
    "@xmath67 , the @xmath11-tuple @xmath68\\zd\\ba[i_k])$ ] .",
    "the _ projection _ @xmath69 of @xmath44 is the @xmath11-ary relation @xmath70 .",
    "sometimes we need to emphasize that the unary projections @xmath71 , @xmath72 of a binary relation @xmath44 are sets @xmath73 and @xmath74 .",
    "we denote this by @xmath75 .",
    "pairs from equivalence relations play a special role , so such pairs will be denoted by , e.g. , @xmath76 . if @xmath49 is an equivalence relation on a set @xmath3 then @xmath77 denotes the set of @xmath49-classes , and @xmath78 for @xmath7 denotes the @xmath49-class containing @xmath8 .",
    "we say that the equivalence relation @xmath49 on a set @xmath3 is _ trivial _ if @xmath3 is the only @xmath49 class .",
    "let @xmath3 be a finite set ( throughout the paper we assume it fixed ) and @xmath1 a constraint language over @xmath3 .",
    "an instance of the _ constraint satisfaction problem _ ( csp for short ) @xmath79 is a pair @xmath80 , where @xmath4 is a finite set of _ variables _ and @xmath81 is a set of _",
    "every constraint is a pair @xmath82 consisting of an @xmath83-tuple @xmath84 of variables , called the _ constraint scope _ and an @xmath83-ary relation @xmath58 , called the _ constraint relation_. a solution of @xmath85 is a mapping @xmath86 such that for every constraint @xmath82 the tuple @xmath87 belongs to @xmath44 .",
    "a _ global cardinality constraint _ for a csp instance @xmath85 is a mapping @xmath5 with @xmath6 .",
    "a solution @xmath88 of @xmath85 satisfies the cardinality constraint @xmath2 if the number of variables mapped to each @xmath7 equals @xmath9 .",
    "the variant of @xmath79 allowing global cardinality constraints will be denoted by @xmath0 ; the question    is , given an instance @xmath85 and a cardinality constraint @xmath2 , whether there is a solution of @xmath85 satisfying @xmath2 .",
    "[ exa : k - ones ] if @xmath1 is a constraint language on the 2-element set @xmath13 then to specify a global cardinality constraint it suffices to specify the number of ones we want to have in a solution .",
    "this problem is also known as the @xmath11-ones@xmath12 problem @xcite .",
    "[ exa : coloring ] let @xmath89 be the constraint language on @xmath90 containing only the binary disequality relation @xmath10 .",
    "it is straightforward that @xmath91 is equivalent to the graph 3-colorability problem .",
    "therefore @xmath92 is equivalent to the graph 3-colorability problem in which the question is whether there is a coloring with a prescribed number of vertices colored each color .    sometimes it is convenient to use arithmetic operations on cardinality constraints .",
    "let @xmath93 be cardinality constraints on a set @xmath3 , and @xmath94 .",
    "then @xmath95 and @xmath96 denote cardinality constraints given by @xmath97 and @xmath98 , respectively , for any @xmath7 .",
    "furthermore , we extend addition to sets @xmath99 , @xmath100 of cardinality vectors in a convolution sense : @xmath101 is defined as @xmath102 .",
    "it is possible to consider an even more general csp with global cardinality constraints , in which every instance of @xmath79 is accompanied with a set of global cardinality constraints , and the question is whether or not there exists a solution of the csp instance that satisfies one of the cardinality constraints . sometimes such a set of cardinality constraints can be represented concisely , for example , all constraints @xmath2 with @xmath103 .",
    "we denote such _ extended csp with global cardinality constraints _ corresponding to a constraint language @xmath1 by @xmath104 .",
    "[ exa : extended - coloring ] the problem @xmath105 admits a wide variety of questions , e.g. whether a given graph admits a 3-coloring with 25 vertices colored 0 , and odd number of vertices colored 1 .",
    "however , in our setting ( as @xmath21 is a fixed constant and we are investigating polynomial - time solvability ) the extended problems are not very interesting from the complexity point of view .    [",
    "lem : eccsp - to - ccsp ] for any constraint language @xmath1 the problem @xmath104 is turing reducible to @xmath0 .",
    "since @xmath3 is fixed , for any instance @xmath85 of @xmath79 there are only polynomially many global cardinality constraints .",
    "thus we can try each of the cardinality constraints given in an instance of @xmath104 in turn .",
    "note that the algorithm in section  [ sec : algorithm ] for @xmath22 actually finds the set of all feasible cardinality constraints .",
    "thus @xmath106 can be solved in a more direct way than the reduction in lemma  [ lem : eccsp - to - ccsp ] .",
    "let @xmath1 be a constraint language on a set @xmath3 .",
    "a relation @xmath44 is _ primitive positive _ _ ( pp- ) _ _ definable _ in @xmath1 if it can be expressed using ( a ) relations from @xmath1 , ( b ) conjunction , ( c ) existential quantifiers , and ( d ) the binary equality relations ( see , e.g.  @xcite ) .",
    "the set of all relations pp - definable in @xmath1 will be denoted by @xmath54 .",
    "[ exa : product ] an important example of pp - definitions that will be used throughout the paper is the _ product _ of binary relations .",
    "let @xmath107 be binary relations .",
    "then @xmath108 is the binary relation given by @xmath109    in this paper we will need a slightly weaker notion of definability .",
    "we say that @xmath44 is _ pp - definable _ in @xmath1 _ without equalities _ if it can be expressed using only items ( a)(c ) from above .",
    "the set of all relations pp - definable in @xmath1 without equalities will be denoted by @xmath110 . clearly , @xmath111 .",
    "the two sets are different only on relations with redundancies .",
    "let @xmath44 be a ( say , @xmath62-ary ) relation .",
    "a _ redundancy _ of @xmath44 is a pair @xmath112 of its coordinate positions such that , for any @xmath113 , @xmath114=\\ba[j]$ ] .",
    "[ exa : redundancy ] in some cases if a relation @xmath44 has redundancies , the equality relation is pp - definable in @xmath115 without equalities .",
    "let @xmath44 be a ternary relation on @xmath90 given by ( triples , members of the relation , are written vertically ) @xmath116 then the equality relation is expressed by @xmath117 .",
    "in other cases the equality relation can not be expressed that easily , but its restriction onto a subset of @xmath3 can .",
    "let @xmath118 be a 4-ary on @xmath90 given by @xmath119 then the formula @xmath120 defines the equality relation on @xmath121 .",
    "[ lem : redundancy ] for every constraint language @xmath1 , every @xmath122 without redundancies belongs to @xmath110 .    consider a pp - definition of @xmath44 in @xmath1 .",
    "suppose that the definition contains an equality relation on the variables @xmath18 and @xmath19 .",
    "if none of @xmath18 and @xmath19 is bound by an existential quantifier , then the relation @xmath44 has two coordinates that are always equal , i.e. , @xmath44 is redundant .",
    "thus one of the variables , say @xmath18 , is bound by an existential quantifier . in this case , replacing @xmath18 with @xmath19 everywhere in the definition defines the same relation @xmath44 and decreases the number of equalities used .",
    "repeating this step , we can arrive to an equality - free definition of @xmath44 .",
    "a _ polymorphism _ of a ( say , @xmath62-ary ) relation @xmath44 on @xmath3 is a mapping @xmath123 for some @xmath11 such that for any tuples @xmath124 the tuple @xmath125\\zd\\ba_k[1])\\zd f(\\ba_1[n]\\zd\\ba_k[n]))\\ ] ] belongs to @xmath44 .",
    "operation @xmath57 is a polymorphism of a constraint language @xmath1 if it is a polymorphism of every relation from @xmath1 .",
    "there is a tight connection , a _ galois correspondence _",
    ", between polymorphisms of a constraint language and relations pp - definable in the language , see @xcite . this connection has been extensively exploited to study the ordinary constraint satisfaction problems @xcite .",
    "here we do not need the full power of this galois correspondence , we only need the following folklore result :    [ lem : galois ] if operation @xmath57 is a polymorphism of a constraint language @xmath1 , then it is also a polymorphism of any relation from @xmath54 , and therefore of any relation from @xmath110 .    for a ( say , @xmath62-ary ) relation @xmath44 over a set @xmath3 and a subset @xmath126 , by @xmath127 we denote the relation @xmath128 . for a constraint language @xmath1 over @xmath3",
    "we use @xmath129 to denote the constraint language @xmath130 .",
    "if @xmath57 is a polymorphism of a constraint language @xmath1 over @xmath3 and @xmath131 , then @xmath57 is not necessarily a polymorphism of @xmath129 .",
    "however , it remains a polymorphism in the following special case .",
    "a @xmath11-ary polymorphism @xmath57 is _ conservative , _ if @xmath132 for every @xmath133 .",
    "it is easy to see that if @xmath57 is a conservative polymorphism of @xmath1 , then @xmath57 is a ( conservative ) polymorphism of @xmath129 for every @xmath134 .",
    "polymorphisms help to express many useful properties of relations .",
    "a ( say , @xmath62-ary ) relation @xmath44 is said to be _",
    "2-decomposable _ if @xmath113 if and only if , for any @xmath135 , @xmath136 , see @xcite .",
    "decomposability sometimes is a consequence of the existence of certain polymorphisms . a ternary operation @xmath40 on a set @xmath3 is said to be a _ majority operation _ if it satisfies equations @xmath41 for all @xmath137 . by @xcite",
    "if a majority operation @xmath40 is a polymorphism of a constraint language @xmath1 then @xmath1 is 2-decomposable .",
    "the converse is not true : there are 2-decomposable relations not having a majority polymorphism .",
    "furthermore , 2-decomposability is not preserved by pp - definitions , thus we can not expect to characterize it by polymorphisms .",
    "[ exa:2decomp ] consider the disequality relation @xmath138 over the set @xmath139 .",
    "relation @xmath138 is trivially 2-decomposable , since it is binary .",
    "let @xmath140 .",
    "the binary projections of @xmath28 are @xmath141 , but @xmath28 is not @xmath142 : it does not allow that @xmath18 , @xmath19 , @xmath143 are all different .    a binary relation @xmath44 is said to be _ rectangular _ if for any @xmath45",
    ", the pair @xmath144 also belongs to @xmath44 .",
    "rectangular relations and their generalizations play a very important role in the study of csp @xcite . a useful way to think about binary rectangular relations",
    "is to represent them as _",
    "thick mappings_. a binary relation @xmath75 is called a thick mapping if there are equivalence relations @xmath49 and @xmath48 on @xmath73 and @xmath74 , respectively , and a one - to - one mapping @xmath145 ( thus , in particular , @xmath146 ) such that @xmath147 if and only if @xmath148 . in this case",
    "we shall also say that @xmath44 is a _ thick mapping with respect to _ @xmath49 , [ page : with - respect ] @xmath48 , and @xmath88 .",
    "given a thick mapping @xmath44 the corresponding equivalence relations will be denoted by @xmath149 and @xmath150 . observe that @xmath151 and @xmath152 ; therefore @xmath153 .",
    "thick mapping @xmath44 is said to be _ trivial _ if both @xmath149 and @xmath150 are the total equivalence relations @xmath154 and @xmath155 . in a graph - theoretical point of view , a thick mapping defines a bipartite graph where every connected component is a complete bipartite graph .",
    "as with decomposability , rectangularity follows from the existence of a certain polymorphism . a ternary operation @xmath42 is said to be _ maltsev _ if @xmath156 for all @xmath137 .",
    "the first part of following lemma is straightforward , while the second part is folklore    [ lem : thick - mapping ] ( 1 ) binary relation @xmath44 is a thick mapping if and only if it is rectangular .",
    "+ ( 2 ) if a binary relation @xmath44 has a maltsev polymorphism then it is rectangular .",
    "a ternary operation @xmath42 satisfying equations @xmath157 for all @xmath137 is said to be a _",
    "minority operation_. observe that every maltsev operation is minority , but not the other way round .",
    "let us fix a constraint language @xmath1 on a set @xmath3 and let @xmath80 be an instance of @xmath79 .",
    "a _ partial solution _ of @xmath85 on a set of variables @xmath158 is a mapping @xmath159 that satisfies every constraint @xmath160 where @xmath161 . here",
    "@xmath162 denotes the subtuple of @xmath84 consisting of those entries of @xmath84 that belong to @xmath163 , and we consider the coordinate positions of @xmath44 indexed by variables from @xmath84 .",
    "instance @xmath85 is said to be _ @xmath11-consistent _",
    "if for any @xmath11-element set @xmath158 and any @xmath164 any partial solution on @xmath163 can be extended to a partial solution on @xmath165 , see @xcite . as we only need @xmath166 ,",
    "all further definitions are given under this assumption .",
    "any instance @xmath80 can be transformed to a 2-consistent instance by means of the standard 2-consistency algorithm .",
    "this algorithm works as follows .",
    "first , for each pair @xmath167 it creates a constraint @xmath168 where @xmath169 is the binary relation consisting of all partial solutions @xmath170 on @xmath171 , i.e.  @xmath169 includes pairs @xmath172 .",
    "these new constraints are added to @xmath81 , let the resulting instance be denoted by @xmath173 .",
    "second , for each pair @xmath167 , every partial solution @xmath174 , and every @xmath175 , the algorithm checks if @xmath170 can be extended to a partial solution of @xmath176 on @xmath177 .",
    "if not , it updates @xmath176 by removing @xmath170 from @xmath169 .",
    "the algorithm repeats this step until no more changes happen .    [",
    "lem : consistency ] let @xmath80 be an instance of @xmath79 .",
    "+ ( a ) the problem obtained from @xmath85 by applying 2-consistency is 2-consistent ; + ( b ) on every step of 2-consistency for any pair @xmath167 the relation @xmath169 belongs to @xmath110 .",
    "\\(a ) follows from @xcite .",
    "\\(b ) since after the first phase of the algorithm every relation @xmath169 is an intersection of unary and binary projections of relations from @xmath1 , it belongs to @xmath110 .",
    "then when considering a pair @xmath167 and @xmath175 , the relation @xmath169 is replaced with @xmath178 , where @xmath118 is the set of all solution of the current instance on @xmath177 .",
    "as every relation of the current instance belongs to @xmath110 , the relation @xmath118 is pp - definable in @xmath1 without equalities .",
    "thus the updated relation @xmath169 also belongs to @xmath110 .",
    "note that theorem  [ lem : consistency](b ) implies that any polymorphism of @xmath179 is also a polymorphism of every @xmath180 .",
    "if @xmath1 has a majority polymorphism , by theorem  3.5 of @xcite , every 2-consistent problem instance is _ globally consistent _ , that is every partial solution can be extended to a global solution of the problem .",
    "in particular , if @xmath85 is 2-consistent , then for any @xmath167 , any pair @xmath181 can be extended to a solution of @xmath85 .",
    "the same is true for any @xmath182 and any @xmath183 .",
    "in this section , we prove that the two characterizations in theorems  [ the : main - poly ] and [ the : main - poly2 ] are equivalent .",
    "recall that two equivalence relations @xmath49 and @xmath48 over the same domain _ cross _ , if there is an @xmath49-class @xmath73 and a @xmath48-class @xmath74 such that none of @xmath184 , @xmath185 , and @xmath186 is empty .",
    "a constraint language @xmath1 is said to be _ non - crossing decomposable _ if every relation from @xmath54 is 2-decomposable , every binary relation from @xmath54 is a thick mapping , and no pair of equivalence relations from @xmath54 cross .",
    "one of the directions is easy to see .",
    "[ lem : equiv0 ] if @xmath1 has a majority polymorphism @xmath40 and a conservative maltsev polymorphism @xmath42 , then @xmath1 is non - crossing decomposable .    as @xmath40 is a polymorphism of every relation in @xmath187 , by @xcite",
    "every relation in @xmath187 is 2-decomposable .",
    "similarly , every binary relation in @xmath187 is invariant under the maltsev polymorphism , which , by lemma  [ lem : thick - mapping ] , implies that the binary relation is a thick mapping .",
    "finally , suppose that there are two equivalence relations @xmath188 over the same domain @xmath189 that cross .",
    "this means that for some @xmath190 we have that @xmath191 , @xmath192 , but @xmath193 , @xmath194 .",
    "let @xmath42 be a maltsev polymorphism of @xmath1 , and consider @xmath195 .",
    "first of all , as @xmath42 is conservative , @xmath196 . then , since @xmath42 preserves @xmath49 and @xmath48 , @xmath197 which is impossible .    to prove the other direction of the equivalence , we need to construct the two polymorphisms .",
    "the following definition will be useful for this purpose .    given a constraint language @xmath1 , we say that @xmath198 is true if @xmath54 contains an equivalence relation @xmath49 with @xmath199    in other words , the domain of the equivalence relation contains all three elements , @xmath200 and @xmath201 are in the same class , but @xmath8 is in a different class .",
    "[ lem : triple ] let @xmath1 be a non - crossing decomposable constraint language over @xmath3 . for every @xmath202 , at most one of @xmath198 , @xmath203",
    ", @xmath204 is true .",
    "suppose that , say , both @xmath198 and @xmath203 are true ; let @xmath205 be the corresponding equivalence relations from @xmath187 .",
    "let @xmath206 , @xmath207 be the domains of @xmath49 and @xmath48 , respectively .",
    "we can consider @xmath206 and @xmath207 as unary relations , and they are in @xmath54 .",
    "therefore , @xmath208 and @xmath209 and @xmath210 are also in @xmath54 . as is easily seen , @xmath211 and @xmath212 are over the same domain @xmath189 and they cross , a contradiction .",
    "[ lem : triple2 ] let @xmath1 be a non - crossing decomposable constraint language over @xmath3 .",
    "let @xmath213 be a binary relation such that @xmath214 , but @xmath215 for some @xmath216 and @xmath217 .",
    "then @xmath218    if , say , @xmath8 and @xmath200 are in the same @xmath219 class , then @xmath201 has to be in a different class . since @xmath28 is a thick mapping , this means that @xmath220 and @xmath221 are in the same @xmath222 class and @xmath223 is in a different class",
    ". therefore , both @xmath204 and @xmath224 are true , and by lemma  [ lem : triple ] , none of the other statements can be true .",
    "therefore , we can assume that @xmath8 , @xmath200 , @xmath201 are in different @xmath225 classes , and hence @xmath220 , @xmath221 , @xmath223 are in different @xmath222 classes .",
    "suppose that @xmath198 is true ; let @xmath226 be the corresponding equivalence relation .",
    "consider the relation @xmath227 , that is , @xmath228 , which has to be a thick mapping .",
    "let @xmath229 be the equivalence relations of @xmath230 .",
    "observe that @xmath231 .",
    "we claim that @xmath232 and @xmath233 , showing that @xmath234 is true .",
    "it is clear that @xmath235 : as @xmath236 , we have @xmath237 . to get a contradiction suppose that @xmath238 . since @xmath239 and @xmath230 is a thick mapping , the pairs @xmath240 has to belong to @xmath230 as well . that is , there are @xmath241 such that @xmath242 and @xmath243 .",
    "now equivalence relation @xmath49 shows that @xmath244 is true ( since @xmath242 and @xmath245 ) and equivalence relation @xmath246 shows that @xmath247 is true ( since @xmath248 shows @xmath249 , @xmath250 shows @xmath251 , and we know that @xmath252 ) . by lemma  [ lem : triple ] , @xmath244 and @xmath247 can not be both true , a contradiction .",
    "let @xmath1 be a non - crossing decomposable language over @xmath3 .",
    "let @xmath253 be @xmath8 if @xmath254",
    "are all different or all the same , otherwise let it be the value that appears only once among @xmath254 .",
    "similarly , let @xmath255 be @xmath8 if @xmath254",
    "are all different or all the same , otherwise let it be the value that appears more than once among @xmath254 .",
    "because of lemma  [ lem : triple ] , the following two functions are well defined :    @xmath256    [ lem : maltsev ] operations @xmath40 and @xmath42 are conservative majority and minority operations , respectively , and @xmath54 is invariant under @xmath40 and @xmath42 .    it is clear that @xmath40 and @xmath42 are conservative . to show that @xmath40 is a majority operation , by definition of major , it is sufficient to consider the case when one of @xmath257 is true . if @xmath258 ( resp . ,",
    "@xmath259 , @xmath260 ) , then only @xmath198 ( resp .",
    ", @xmath203 , @xmath204 ) can be true , which means that @xmath261 ( resp .",
    ", @xmath8 , @xmath200 ) , as required .",
    "a similar argument shows that @xmath42 is a minority function .    since every relation in @xmath54 is 2-decomposable , it is sufficient to show that every binary relation in @xmath54 is invariant under @xmath40 and @xmath42 .",
    "we show invariance under @xmath42 , the proof is similar for @xmath40 .",
    "let @xmath213 be a binary relation , which is a thick mapping by assumption .",
    ". if @xmath254 are in the same @xmath149-class then @xmath263 are in the same @xmath150-class .",
    "since @xmath264 and @xmath265 , it follows that @xmath266 . if @xmath254 are not all in the same @xmath149-class , and one of @xmath257 is true , then by lemma  [ lem : triple2 ] , the corresponding statement from @xmath267 is also true .",
    "now the pair @xmath268 has to be one of @xmath269 , @xmath270 , @xmath271 , hence it is in @xmath28",
    ". if none of @xmath257 is true , then @xmath254 are in different @xmath272-classes . moreover ,",
    "if none of @xmath234 , @xmath273 is true , then @xmath263 are in different @xmath274-classes . therefore @xmath275 .",
    "[ rem : minority ] interestingly , lemma  [ lem : maltsev ] ( along with lemma  [ lem : equiv0 ] ) gives more than just the existence of a majority polymorphism , and a conservative maltsev polymorphism .",
    "the operations @xmath40 and @xmath42 are both conservative , and @xmath42 is a minority operation , not just a maltsev one .",
    "therefore , we have that a constraint language has a majority and conservative maltsev polymorphisms if and only if it has a majority and minority polymorphisms , both conservative",
    ".    the following two consequences of having a conservative maltsev polymorphism will be used in the algorithm .",
    "[ lem : transitive ] let @xmath1 be a constraint language having a conservative maltsev polymorphism .",
    "let @xmath276 be two nontrivial thick mappings such that @xmath277 .",
    "then @xmath278 is also non - trivial .    since @xmath44 , @xmath230",
    "are nontrivial , there are values @xmath8 ,",
    "@xmath220 , @xmath200 , @xmath221 such that @xmath279 , @xmath280 . if @xmath278 is trivial , then @xmath281 , which means that there are ( not necessarily distinct ) values @xmath282 such that @xmath283 let @xmath40 be a conservative maltsev polymorphism .",
    "let @xmath284 .",
    "applying @xmath40 on the pairs above , we get that @xmath285 and @xmath286 .",
    "it is not possible that @xmath287 , since this would mean that @xmath288 .",
    "it is not possible that @xmath289 either , since that would imply @xmath290 , a contradiction .",
    "recall that if @xmath47 and @xmath48 are equivalence relations on the same set @xmath291 , then @xmath292 denotes the smallest ( in terms of the number of pairs it contains ) equivalence relation on @xmath291 containing both @xmath47 and @xmath48 .",
    "it is well known that if @xmath49 and @xmath48 have a maltsev polymorphism then they _ permute _ , that is , @xmath293 .",
    "[ lem : non - trivial ] let @xmath1 be a finite constraint language having a conservative maltsev polymorphism .",
    "let @xmath294 be two nontrivial equivalence relations on the same set @xmath291 .",
    "then @xmath295 is also non - trivial .    since @xmath296 , by lemma  [ lem : transitive ] , it is non - trivial .",
    "we will also need the following observation .",
    "[ lem : join - union ] let @xmath1 be a finite constraint language having a majority polymorphism and a conservative maltsev polymorphism .",
    "let @xmath294 be two equivalence relations on the same set @xmath291",
    ". then @xmath297 .    by lemma  [ lem : equiv0 ]",
    "@xmath49 and @xmath48 are non - crossing",
    ". then if @xmath191 and @xmath192 then @xmath298 . the result follows .",
    "in this section we fix a constraint language @xmath1 that has conservative majority and minority polymorphisms .",
    "we present a polynomial - time algorithm for solving @xmath0 and @xmath55 in this case .      in this subsection",
    "we prove several properties of instances of @xmath0 and @xmath55 that will be very instrumental for our algorithms .",
    "first of all , we show that every such instance can be supposed binary , that is , that every its constraint is imposed only on two variables .",
    "then we introduce a graph corresponding to such an instance , and show that if this graph is disconnected then a solution to the whole problem can be obtained by combining arbitrarily solutions for the connected components .",
    "finally , if the graph is connected , the set of possible values for each variable can be subdivided into several subsets , so that if the variable takes a value from one of the subsets , then each of the remaining variables is forced to take values from a particular subset of the corresponding partition .",
    "observe that if a constraint language @xmath1 satisfies the conditions of theorem  [ the : main - poly ] then by remark  [ rem : minority ] the constraint language @xmath299 obtained from @xmath1 by adding all unary relations also satisfies the conditions of theorem  [ the : main - poly ] .",
    "indeed , @xmath1 has conservative majority and minority polymorphisms that are also polymorphisms of @xmath299 .",
    "therefore we will assume that @xmath1 contains all unary relations .",
    "it will also be convenient to assume that @xmath1 contains all the binary relations from @xmath54 .",
    "let @xmath1 be a constraint language and let @xmath80 be a 2-consistent instance of @xmath79 .",
    "by @xmath300 we denote the instance @xmath301 such that @xmath302 is the set of all constraints of the form @xmath168 where @xmath167 and @xmath169 is the set of all partial solutions on @xmath171 .    [",
    "lem : binary - solutions ] let @xmath1 be a constraint language with a majority polymorphism",
    ". then if @xmath85 is a 2-consistent instance of @xmath79 then @xmath300 has the same solutions as @xmath85 .",
    "let us denote by @xmath303 the @xmath304-ary relations consisting of all solutions of @xmath85 and @xmath300 , respectively .",
    "relations @xmath303 are pp - definable in @xmath1 without equalities , and @xmath305 . to show that @xmath306 we use the result from @xcite stating that , since @xmath1 has a majority polymorphism for any @xmath167 and any @xmath181 we have @xmath307 , i.e.  @xmath308 .",
    "since @xmath44 is 2-decomposable , if @xmath309 , that is , @xmath310 for all @xmath167 , then @xmath113 .",
    "let @xmath80 be an instance of @xmath79 .",
    "applying algorithm 2-consistency we may assume that @xmath85 is 2-consistent . by the assumption about @xmath1 , all constraint relations from @xmath85 are 2-decomposable , and @xmath300 has the same solutions as @xmath85 itself .",
    "therefore , replacing @xmath85 with @xmath300 , if necessary , every constraint of @xmath85 can be assumed to be binary .",
    "let constraints of @xmath85 be @xmath311 for each pair of different @xmath167 .",
    "let @xmath312 , @xmath313 , denote the set of @xmath7 such that there is a solution @xmath88 of @xmath85 such that @xmath314 .",
    "by @xcite , @xmath85 is globally consistent , therefore , @xmath315 for any @xmath316 , @xmath317 .",
    "constraint @xmath318 is said to be _ trivial _ if @xmath319 , otherwise it is said to be _ non - trivial_. the _ graph of _",
    "@xmath85 , denoted @xmath320 , is a graph with vertex set @xmath4 and edge set @xmath321 .",
    "the 2-consistency of @xmath85 implies , in particular , the following simple property .",
    "[ lem:2-consistency ] by the 2-consistency of @xmath85 , for any @xmath322 , @xmath323 .",
    "therefore , by lemma  [ lem : transitive ] , the graph @xmath320 is transitive , i.e. , every connected component is a clique .    if @xmath320 is not connected , every combination of solutions for its connected components give rise to a solution of the entire problem .",
    "more precisely , let @xmath324 be the connected components of @xmath320 , and let @xmath325 denote the instance @xmath326 where @xmath327 includes all the constraints @xmath311 for which @xmath328 .",
    "we will use the following observation .",
    "[ lem : disconnected ] let @xmath329 be solutions of @xmath330 . then the mapping @xmath331 such that @xmath332 whenever @xmath333 is a solution of @xmath85 .",
    "we need to check that all constraints of @xmath85 are satisfied .",
    "consider @xmath318 . if @xmath328 for a certain @xmath17 , then @xmath334 since @xmath335 is a solution to @xmath336 .",
    "if @xmath337 belong to different connected components , then @xmath338 is trivial , and so @xmath339 is satisfied .",
    "suppose that @xmath320 is connected and fix @xmath313 .",
    "in this case , the graph is a clique , and therefore for any @xmath316 the constraint @xmath339 is non - trivial .",
    "note that due to 2-consistency , every relation @xmath340 for @xmath341 is over the same set @xmath312 .",
    "set @xmath342 ; as every @xmath343 is non - trivial , lemma  [ lem : non - trivial ] implies that @xmath344 is non - trivial .",
    "[ lem : variable - non - trivial ] suppose @xmath320 is connected .",
    "equivalence relations @xmath344 and @xmath340 ( for any @xmath345 ) are non - trivial .    [",
    "lem : partition ] suppose @xmath320 is connected .",
    "+ ( 1 ) for any @xmath167 there is a one - to - one correspondence @xmath346 between @xmath347 and @xmath348 such that for any solution @xmath88 of @xmath85 if @xmath349 , then @xmath350 . + ( 2 ) the mappings @xmath346 are consistent , i.e.  for any @xmath351 we have @xmath352 for every @xmath18 .",
    "\\(1 ) let @xmath338 be a thick mapping with respect to a mapping @xmath353 , and @xmath354 , @xmath355 .",
    "recall that @xmath353 is a one - to - one mapping from @xmath356 to @xmath357 .",
    "suppose , to obtain a contradiction , that @xmath353 does not induce a one - to - one mapping between @xmath347 and @xmath348 .",
    "then without loss of generality there are @xmath358 such that @xmath359 , but for certain @xmath360 we have @xmath361 and @xmath362 . since @xmath363 , @xmath364 , hence @xmath365 . by lemma  [ lem",
    ": join - union ] there is @xmath366 such that @xmath367 is a thick mapping with respect to some @xmath368 and @xmath369 .",
    "therefore for some @xmath370 we have @xmath371 . since @xmath372 ,",
    "there exist @xmath373 satisfying the conditions @xmath374 and @xmath375 .",
    "the first pair of inclusions imply that @xmath376 , while the second one implies that @xmath377 . since @xmath363 , we obtain @xmath378 , a contradiction .",
    "\\(2 ) if for some @xmath322 there is a class @xmath379 such that @xmath380 then @xmath381 , a contradiction .    fix a variable @xmath382 of @xmath85 and take a @xmath383-class @xmath73 .",
    "let @xmath384 denote the problem instance over the same variables , where for every @xmath167 the set @xmath385 includes the constraint @xmath386 with @xmath387 .",
    "[ lem : unary restrictions ] problem @xmath388 belongs to @xmath0 .",
    "it suffices to show that @xmath389 for any @xmath167 . by lemma  [ lem : consistency ] @xmath390 , and as we assumed that @xmath1 contains all binary relations from @xmath54 , we have @xmath391 . by the assumption made",
    ", all unary relations including @xmath392 and @xmath393 belong to @xmath1 .",
    "therefore relation @xmath394 is pp - definable in @xmath1 , and , as a binary relation , belongs to it .",
    "we split the algorithm into two parts .",
    "algorithm cardinality ( figure  [ fig : alg - cardinality ] ) just ensures 2-consistency and initializes a recursive process .",
    "the main part of the work is done by ext - cardinality ( figure  [ fig : alg - vector ] ) .",
    "algorithm ext - cardinality solves the more general problem of computing the set of all cardinality constraints @xmath2 that can be satisfied by a solution of @xmath85 .",
    "thus it can be used to solve directly csp with extended global cardinality constraints , see preliminaries .",
    "the algorithm considers three cases .",
    "step 2 handles the trivial case when the instance consists of a single variable and there is only one possible value it can be assigned .",
    "otherwise , we decompose the instance either by partitioning the variables or by partitioning the domain of the variables .",
    "if @xmath320 is not connected , then the satisfying assignments of @xmath85 can be obtained from the satisfying assignments of the connected components .",
    "thus a cardinality constraint @xmath2 can be satisfied if it arises as the sum @xmath395 of cardinality constraints such that the @xmath17-th component has a solution satisfying @xmath396 . instead of considering all such sums ( which would not be possible in polynomial time )",
    ", we follow the standard dynamic programming approach of going through the components one by one , and determining all possible cardinality constraints that can be satisfied by a solution for the first @xmath17 components ( step 3 ) .",
    "if the graph @xmath320 is connected , then we fix a variable @xmath382 and go through each class @xmath73 of the partition @xmath383 ( step 4 ) . if @xmath382 is restricted to @xmath73 , then this implies a restriction for every other variable @xmath397 .",
    "we recursively solve the problem for the restricted instance @xmath388 arising for each class @xmath73 ; if constraint @xmath2 can be satisfied , then it can be satisfied for one of the restricted instances .",
    "the correctness of the algorithm follows from the discussion above .",
    "the only point that has to be verified is that the instance remains 2-consistent after the recursion .",
    "this is obvious if we recurse on the connected components ( step 3 ) . in step 4",
    ", 2-consistency follows from the fact that if @xmath398 can be extended by @xmath399 , then in every subproblem either these three values satisfy the instance restricted to @xmath177 or @xmath8 , @xmath200 , @xmath201 do not appear in the domain of @xmath39 , @xmath397 , @xmath38 , respectively .    to show that the algorithm runs in polynomial time ,",
    "observe first that every step of the algorithm ( except the recursive calls ) can be done in polynomial time . here",
    "we use that @xmath3 is fixed , hence the size of the set @xmath99 is polynomially bounded .",
    "thus we only need to bound the size of the recursion tree .",
    "if we recurse in step  3 , then we produce instances whose graphs are connected , thus it can not be followed by recursing again in step  3 . in step  4 ,",
    "the domain of every variable is decreased : by lemma  [ lem : variable - non - trivial ] , @xmath400 is nontrivial for any variable @xmath397 .",
    "thus in any branch of the recursion tree , recursion in step 4 can occur at most @xmath21 times , hence the depth of the recursion tree is @xmath401 .",
    "as the number of branches is polynomial in each step , the size of the recursion tree is polynomial .",
    "input :  = an instance @xmath80 of @xmath0 with a cardinality constraint @xmath2 + output : yes if @xmath85 has a solution satisfying @xmath2 , no otherwise + _ step 1 . _ to @xmath85 + _ step 2 .",
    "_ @xmath402ext - cardinality@xmath403 + _ step 3 . _ @xmath404 * output * yes + no    input :  = a 2-consistent instance @xmath80 of @xmath0 + output : the set of cardinality constraints @xmath2 such that @xmath85 has a solution that satisfies @xmath2 + _ step 1 . _",
    "the graph @xmath405 + _ step 2 .",
    "_ @xmath406 and the domain of this variable is a singleton @xmath407 * then do * + _ step 2.1 _  * set * @xmath408 where @xmath409 except for @xmath410 + _ step 3 .",
    "_ @xmath320 is disconnected and @xmath411 are + its connected components * then do * + _ step 3.1 _ @xmath408 where @xmath5 is given by @xmath412 for @xmath7 + _ step 3.2 _ @xmath413 * to * @xmath11 * do * + _ step 3.2.1 _  * set * @xmath414 ext - cardinality@xmath415 +   +   + _ step 4 .",
    "_ + _ step 4.1 _ @xmath313 * find * @xmath344 + _ step 4.2 _ @xmath416 * and set * @xmath417 + _ step 4.3 _ @xmath383-class @xmath73 * do * + _ step 4.3.1 _ @xmath418 where for every @xmath167 the set @xmath385 includes + the constraint @xmath419 + _ step 4.3.2 _ @xmath420ext - cardinality@xmath421 +   +   + _ step 4 .",
    "_ @xmath99      in this section we observe that algorithm cardinality can be modified so that it also solves counting csps with global cardinality constraints , provided @xmath1 satisfies the conditions of theorem  [ the : main - poly ] .",
    "the counting algorithm works very similar to algorithm cardinality , except that instead of determining the set of satisfiable cardinality constraints , it keeps track of the number of solutions that satisfy every cardinality constraint possible .",
    "it considers the same 3 cases . in the trivial case of a problem with one variable and one possible value for this variable",
    ", the algorithm assigns 1 to the cardinality constraint satisfied by the only solution of the problem and 0 to all other cardinality constraints . in the case of disconnected graph @xmath320",
    "if a cardinality constraint can be represented in the form @xmath422 , then solutions on the connected components of @xmath320 satisfying @xmath423 , respectively , contribute the product of their numbers into the number of solutions satisfied by @xmath2 .",
    "we again use the dynamic programming approach , and , for each @xmath17 compute the number of solutions on @xmath424 satisfying every possible cardinality constraint .",
    "observe , that the set of cardinality constraints considered is also changed dynamically , as the number of variables grows . finally ,",
    "if @xmath320 is connected , then the different restrictions have disjoint sets of solutions , hence the numbers of solutions are computed independently .",
    "input :  = an instance @xmath80 of @xmath55 with a cardinality constraint @xmath2 + output : the number of solutions of @xmath85 that satisfy @xmath2 + _ step 1 . _ to @xmath85 + _ step 2 .",
    "_ @xmath425#ext - cardinality@xmath403 +  % @xmath426 is the number of solutions of @xmath85 satisfying cardinality constraint @xmath427 + _ step 3 .",
    "_ @xmath428 +    input :  = a 2-consistent instance @xmath80 of @xmath55 + output : function @xmath353 that assigns to every cardinality constraint @xmath2 with @xmath6 , + the number @xmath428 of solutions of @xmath85 that satisfy @xmath2 + _ step 1 .",
    "_ the graph @xmath405 + _ step 2 .",
    "_ @xmath406 and the domain of this variable is a singleton @xmath407 * then do * + _ step 2.1 _  * set * @xmath429 where @xmath409 except for @xmath410 , and @xmath430 for all @xmath431 + with @xmath432 + _ step 3 .",
    "_ @xmath320 is disconnected and @xmath411 are its + connected components * then do * + _ step 3.1 _",
    "@xmath408 where @xmath5 is given by @xmath412 for @xmath7 , @xmath429 for @xmath404 + _ step 3.2 _ @xmath413 * to * @xmath11 * do * + _ step 3.2.1 _  * set * @xmath433 and @xmath434 # ext - cardinality@xmath415 + _ step 3.2.2 _ @xmath435 , @xmath436 for @xmath437 + _ step 3.2.3 _ @xmath404 * and * @xmath438 * set * @xmath439 + _ step 3.2.4 _ @xmath440 , @xmath441 +   +   + _ step 4 . _",
    "+ _ step 4.1 _ @xmath313 * find * @xmath344 + _ step 4.2 _ @xmath416 * and set * @xmath442 for @xmath2 with @xmath6 + _ step 4.3 _",
    "@xmath383-class @xmath73 * do * + _ step 4.3.1 _ @xmath418 where for every @xmath167 the set @xmath385 includes the constraint + @xmath419 + _ step 4.3.2 _ @xmath434#ext - cardinality@xmath421 + _ step 4.3.3 _",
    "@xmath443 +   +   + _ step 4 .",
    "we present two reductions that will be crucial for the proofs in section  [ sec : hardness ] . in section  [ sec : pp - definitions ] , we show that adding relations that are pp - definable ( without equalities ) does not make the problem harder , while in section  [ sec : constants ] , we show the same for unary constant relations .",
    "[ the : decision - pp - defin ] let @xmath1 be a constraint language and @xmath44 a relation pp - definable in @xmath1 without equalities .",
    "then @xmath444 is polynomial time reducible to @xmath0 .",
    "we proceed by induction on the structure of pp - formulas .",
    "the base case of induction is given by @xmath58 .",
    "we need to consider two cases .",
    "@xmath445 .",
    "observe that by introducing ` fictitious ' variables for predicates @xmath446 we may assume that both relations involved have the same arity .",
    "a reduction from @xmath444 to @xmath0 is trivial : in a given instance of the first problem replace each constraint of the form @xmath447 with two constraints @xmath448 and @xmath449 .",
    "@xmath450 .",
    "let @xmath80 be a @xmath444 instance .",
    "without loss of generality let @xmath451 be the constraints that involve @xmath44 .",
    "instance @xmath176 of @xmath0 is constructed as follows .    1 .",
    "variables : replace every variable @xmath39 from @xmath4 with a set @xmath452 of variables of size @xmath453 and introduce a set of @xmath21 variables for each constraint involving @xmath28 . more formally , @xmath454 2 .",
    "non-@xmath44 constraints : for every @xmath455 with @xmath456 , introduce all possible constraints of the form @xmath457 , where @xmath458 for @xmath459 .",
    "@xmath44 constraints : for every @xmath460 , @xmath461 , introduce all possible constraints of the form @xmath462 , where @xmath458 , @xmath463 .",
    "if @xmath85 has a solution satisfying cardinality constraint @xmath2 then @xmath176 has a solution satisfying the cardinality constraint @xmath464 .",
    "let @xmath88 be a solution of @xmath85 satisfying @xmath2 .",
    "it is straightforward to verify that the following mapping @xmath170 is a solution of @xmath176 and satisfies @xmath427 :    1 .",
    "for each @xmath313 and each @xmath465 set @xmath466 ; 2 .   for each @xmath467 , where @xmath468 , set @xmath469 to be a value such that@xmath470 .",
    "3 .   for each @xmath461 and @xmath471 set @xmath472 to be such that @xmath473 .    claim 2 .",
    "if @xmath176 has a solution @xmath170 satisfying the cardinality constraint @xmath464 , then @xmath85 has a solution satisfying constraint @xmath2 .",
    "let @xmath7 and @xmath474 .",
    "observe first that if @xmath475 is a mapping such that @xmath476 for every @xmath313 ( i.e. , @xmath477 for at least one variable @xmath478 ) , then @xmath88 satisfies all the constraints of @xmath85 . indeed , consider a constraint @xmath479 of @xmath85 where @xmath480 .",
    "let @xmath481 .",
    "for every @xmath482 , there is a @xmath483 such that @xmath484 . by the way @xmath176 is defined",
    ", it contains a constraint @xmath485 where @xmath486 .",
    "now the fact that @xmath170 satisfies @xmath487 immediately implies that @xmath88 satisfies @xmath50 : @xmath488 .",
    "the argument is similar if @xmath489 .",
    "we show that it is possible to construct such a @xmath88 that also satisfies the cardinality constraint @xmath2 .",
    "since @xmath490 , for any @xmath7 with @xmath491 , even if set @xmath492 contains all @xmath453 variables of the form @xmath467 and @xmath493 , it has to intersect at least @xmath9 sets @xmath452 ( as @xmath494 ) . consider the bipartite graph @xmath495 , where @xmath496 is a bipartition and    1 .",
    "@xmath497 is the set of variables @xmath4 ; 2 .",
    "@xmath498 is constructed from the set @xmath3 of values by taking @xmath9 copies of each value @xmath7 ; 3 .",
    "edge @xmath499 , where @xmath220 is a copy of @xmath8 from @xmath498 , belongs to @xmath500 if and only if @xmath501 .",
    "note that @xmath502 and a perfect matching @xmath503 corresponds to a required mapping @xmath88 : @xmath314 if @xmath504 for some copy @xmath220 or @xmath8 .",
    "take any subset @xmath505 , let @xmath291 contains some copies of @xmath506 . then by the observation above , @xmath291 has at least @xmath507 neighbours in @xmath497 .",
    "since @xmath291 contains at most @xmath508 copies of @xmath509 , @xmath510 by hall s theorem on perfect matchings in bipartite graphs , @xmath511 has a perfect matching , concluding the proof that the required @xmath88 exists .",
    "let @xmath3 be a set , and let @xmath7 .",
    "the _ constant relation _",
    "@xmath512 is the unary relation that contains only one tuple , @xmath513 .",
    "if a constraint language @xmath1 over @xmath3 contains all the constant relations , then they can be used in the corresponding constraint satisfaction problem to force certain variables to take some fixed values .",
    "the goal of this section is to show that for any constraint language @xmath1 the problem @xmath514 is polynomial time reducible to @xmath0 . for the ordinary decision csp",
    "such a reduction exists when @xmath1 does not have unary polymorphisms that are not permutations , see @xcite .",
    "we make use of the notion of multi - valued morphisms , a generalization of homomorphisms , that in a different context has appeared in the literature for a while ( see , e.g.  @xcite ) under the guise hyperoperation .",
    "let @xmath44 be a ( say , @xmath62-ary ) relation on a set @xmath3 , and let @xmath57 be a mapping from @xmath3 to @xmath515 , the powerset of @xmath3 .",
    "mapping @xmath57 is said to be a _",
    "multi - valued morphism _ of @xmath44 if for any tuple @xmath516 the set @xmath517 is a subset of @xmath44 .",
    "mapping @xmath57 is a multi - valued morphism of a constraint language @xmath1 if it is a multi - valued morphism of every relation in @xmath1 . for a multi - valued morphism @xmath57 and set @xmath518",
    ", we define @xmath519 .",
    "the product of two multi - valued morphisms @xmath520 and @xmath521 is defined by @xmath522 for every @xmath7 .",
    "we denote by @xmath523 the @xmath17-th power of @xmath57 , with the convention that @xmath524 maps @xmath8 to @xmath407 for every @xmath525 .",
    "[ the : adding - constants ] let @xmath1 be a finite constraint language over a set @xmath3 .",
    "then @xmath514 is polynomial time reducible to @xmath0 .",
    "let @xmath526 and @xmath527 .",
    "we show that @xmath528 is polynomial time reducible to @xmath0 .",
    "this clearly implies the result .",
    "we make use of the following multi - valued morphism gadget @xmath529 ( i.e.  a csp instance ) .",
    "observe that it is somewhat similar to the _ indicator problem _ @xcite .    1 .",
    "the set of variables is @xmath530 , where @xmath531 contains @xmath532 elements .",
    "all sets @xmath531 are assumed to be disjoint .",
    "the set of constraints is constructed as follows : for every ( say , @xmath533-ary ) @xmath58 and every @xmath534 we include all possible constraints of the form @xmath535 where @xmath536 for @xmath537 .",
    "now , given an instance @xmath80 of @xmath528 , we construct an instance @xmath538 of @xmath0 .    1 .",
    "let @xmath158 be the set of variables @xmath39 , on which the constant relation @xmath512 is imposed , that is , @xmath81 contains the constraint @xmath539 .",
    "set @xmath540 .",
    "the set @xmath541 of variables of @xmath176 is the disjoint union of the set @xmath542 of variables of @xmath529 and @xmath543 .",
    "the set @xmath302 of constraints of @xmath176 consists of three parts : 1 .",
    "@xmath544 , the constraints of @xmath529 ; 2 .",
    "@xmath545 , the constraints of @xmath85 that do not include variables from @xmath163 ; 3 .",
    "@xmath546 , for any constraint @xmath547 whose scope contains variables constrained by @xmath512 ( without loss of generality let @xmath548 be such variables ) , @xmath546 contains all constraints of the form @xmath549 , where @xmath550 .",
    "we show that @xmath85 has a solution satisfying a cardinality constraint @xmath2 if and only if @xmath176 has a solution satisfying cardinality constraint @xmath427 given by @xmath551    suppose that @xmath85 has a right solution @xmath88 .",
    "then a required solution for @xmath176 is given by @xmath552 it is straightforward that @xmath170 is a solution to @xmath176 and that it satisfies @xmath427 .",
    "suppose that @xmath176 has a solution @xmath170 that satisfies @xmath427 .",
    "since @xmath553 , there is @xmath554 such that @xmath555 .",
    "thus the assignment @xmath556 is a satisfying assignment @xmath85 , but it might not satisfy @xmath2 .",
    "our goal is to show that @xmath176 has a solution @xmath170 , where @xmath88 obtained this way satisfies @xmath2 .",
    "observe that what we need is that @xmath170 assigns value @xmath557 to exactly @xmath558 variables of @xmath543 .",
    "mapping @xmath57 taking every @xmath559 to the set @xmath560 is a multi - valued morphism of @xmath1 .",
    "indeed , let @xmath561 , @xmath44 is an ( @xmath62-ary ) relation from @xmath1",
    ". then by the construction of @xmath529 the instance contains all the constraints of the form @xmath447 with @xmath562 , @xmath563 .",
    "therefore , @xmath564    claim 2 .",
    "let @xmath57 be the mapping defined in claim 1 .",
    "then @xmath565 defined by @xmath566 for every @xmath567 is also a multi - valued morphism of @xmath1 .",
    "we show that for every @xmath559 , there is an @xmath568 such that @xmath569 for every @xmath570 . taking the maximum @xmath571 of all these integers",
    ", we get that @xmath572 and @xmath573 ( since @xmath574 ) for every @xmath17 , proving the claim .",
    "the proof is by induction on @xmath17 .",
    "if @xmath575 , then we are done as we can set @xmath576 ( note that this is always the case for @xmath413 , since we observed above that @xmath170 has to assign value @xmath577 to a variable of @xmath578 ) .",
    "so let us suppose that @xmath579 .",
    "let @xmath580 and let @xmath581 be defined by @xmath582 .",
    "observe that @xmath583 is well - defined , i.e. , @xmath584 : the set @xmath585 contains @xmath586 variables , while the number of variables which are assigned by @xmath170 values outside @xmath587 is @xmath588 .",
    "let @xmath589 .",
    "we claim that @xmath590 .",
    "suppose that @xmath591 . by the definition of @xmath592 and the assumption @xmath579 , for every @xmath593 , the variables in @xmath594 can have values only from @xmath592 and from @xmath595 . the total number of variables in @xmath594 , @xmath596 is @xmath597 , while the total cardinality constraint of the values from @xmath598 is @xmath599 a contradiction .",
    "thus @xmath590 , that is , there is a value @xmath600 such that @xmath601 and @xmath602 for some @xmath603 . by the induction hypothesis , @xmath604 for every @xmath605",
    ", thus we have that @xmath606 if @xmath62 is at least @xmath607 .",
    "this concludes the proof of claim 2 .",
    "let @xmath608 ( resp . ,",
    "@xmath609 ) be the set of those values @xmath559 that @xmath170 assigns to more than ( resp .",
    ", less than ) @xmath610 variables of @xmath543 .",
    "it is clear that if @xmath611 , then @xmath88 obtained from @xmath170 satisfies @xmath2 .",
    "furthermore , if @xmath612 , then @xmath613 as well .",
    "thus suppose that @xmath614 and let @xmath615 .",
    "@xmath616 .",
    "suppose @xmath617 .",
    "every @xmath618 is assigned by @xmath170 to at least @xmath619 variables in @xmath543 , implying that @xmath170 assigns every such @xmath200 to at most @xmath620 variables in the gadget @xmath529 .",
    "thus the total number of variables in the gadget having value from @xmath291 is at most @xmath621 ; in fact , it is strictly less than that since @xmath608 is not empty . by the definition of @xmath291 ,",
    "only values from @xmath291 can be assigned to variables in @xmath594 for every @xmath622 . however , the total number of these variables is exactly @xmath621 , a contradiction .",
    "by claim 3 , there is a value @xmath623 , which means that there is a @xmath624 and a sequence of distinct values @xmath625 , @xmath626 , @xmath32 , @xmath627 such that @xmath628 for every @xmath629 .",
    "let @xmath630 be an arbitrary variable having value @xmath631 .",
    "we modify @xmath170 the following way :    1 .",
    "the value of @xmath39 is changed from @xmath631 to @xmath632 .",
    "2 .   for every @xmath633 , one variable in @xmath634 with value @xmath635",
    "is changed to @xmath636 .",
    "note that since @xmath637 and @xmath638 such a variable exists .",
    "note that these changes do not modify the cardinalities of the values : the second step increases only the cardinality of @xmath625 ( by one ) and decreases only the cardinality of @xmath627 ( by one ) .",
    "we have to argue that the transformed assignment still satisfies the constraints of @xmath176 .",
    "since @xmath639 , the multi - valued morphism @xmath565 of claim 2 implies that changing @xmath631 to @xmath632 on a single variable and not changing anything else also gives a satisfying assignment . to see that the second step does not violate the constraints , observe first that constraints of type ( b ) are not affected and constraints of type ( c ) can not be violated ( since variables in @xmath578 are changed only to @xmath577 , and there is already at least one variable with value @xmath577 in @xmath578 ) . to show that constraints of type ( a ) are not affected ,",
    "it is sufficient to show that the mapping @xmath640 described by the gadget after the transformation is still a multi - valued morphism .",
    "this can be easily seen as @xmath641 , where @xmath565 is the multi - valued morphism of claim 2 .",
    "thus the modified assignment is still a solution of @xmath176 satisfying @xmath427 .",
    "it is not difficult to show that repeating this operation , in a finite number of steps we reach a solution where @xmath642 , i.e. , every value @xmath643 appears exactly @xmath644 times on the variables of @xmath543 .",
    "as observed above , this implies that @xmath85 has a solution satisfying @xmath2 .",
    "now we prove that if constraint language @xmath1 does not satisfy the conditions of theorem  [ the : main - poly ] then @xmath0 is np - complete . first , we can easily simulate the restriction to a subset of the domain by setting to 0 the cardinality constraint on the unwanted values :      for an instance @xmath173 of @xmath645 with a global cardinality constraint @xmath646 we construct an instance @xmath80 of @xmath0 such that for each @xmath647 we include @xmath648 into @xmath81 .",
    "the cardinality constraint @xmath427 is replaced with @xmath5 such that @xmath649 for @xmath650 , and @xmath412 for @xmath651 .",
    "it is straightforward that @xmath85 has a solution satisfying @xmath2 if and only if @xmath176 has a solution satisfying @xmath427 .",
    "suppose now that a constraint language @xmath1 does not satisfy the conditions of theorem  [ the : main - poly ] .",
    "then one of the following cases takes place : ( a ) @xmath54 contains a binary relation that is not a thick mapping ; or ( b ) @xmath54 contains a crossing pair of equivalence relations ; or ( c ) @xmath54 contains a relation which is not 2-decomposable . since relations occurring in cases ( a ) , ( b ) are not redundant , and relations that may occur in case ( c ) can be assumed to be not redundant , by lemma  [ lem : redundancy ] @xmath54 can be replaced with @xmath110 .",
    "furthermore , by theorem  [ the : adding - constants ] all the constant relations can be assumed to belong to @xmath1 .",
    "we consider these three cases in turn .",
    "furthermore , by a minimality argument , we can assume that if @xmath1 is over @xmath3 , then for every @xmath652 , constraint language @xmath653 satisfies the requirements of theorem  [ the : main - poly ] .",
    "one of the np - complete problems we will reduce to @xmath654 is the bipartite independent set problem ( or bis for short ) . in this problem",
    "given a connected bipartite graph @xmath511 with bipartition @xmath655 and numbers @xmath656 , the goal is to verify if there exists an independent set @xmath291 of @xmath511 such that @xmath657 and @xmath658 .",
    "the np - completeness of the problem follows for example from @xcite , which shows the np - completeness of the complement problem under the name constrained minimum vertex cover .",
    "it is easy to see that the problem is hard even for graphs containing no isolated vertices . by representing the edges of a bipartite graph with the relation @xmath659",
    ", we can express the problem of finding a bipartite independent set .",
    "value @xmath200 ( resp . , @xmath8 ) represents selected ( resp . , unselected )",
    "vertices in @xmath660 , while value @xmath201 ( resp . , @xmath661 )",
    "represents selected ( resp . , unselected )",
    "vertices in @xmath662 . with this interpretation ,",
    "the only combination that relation @xmath44 excludes is that two selected vertices are adjacent . by lemma  [ lem : thick - mapping ]",
    ", if a binary relation is not a thick mapping , then it contains something very similar to @xmath44 .",
    "however , some of the values @xmath8 , @xmath200 , @xmath201 , and @xmath661 might coincide and the relation might contain further tuples such as @xmath663 .",
    "thus we need a delicate case analysis to show that the problem is np - hard for binary relations that are not thick mappings .      since @xmath44 is not a thick mapping , there are @xmath45 such that @xmath665 . by lemma  [",
    "lem : restriction ] the problem @xmath666 , where @xmath667 , is polynomial time reducible to @xmath654 . replacing @xmath44 with @xmath230 if necessary we can assume that @xmath44 is a relation over @xmath668 ( note that some of those elements can be equal ) .",
    "we suppose that @xmath44 is a ` smallest ' relation that is not a thick mapping , that is , for any @xmath230 definable in @xmath115 with @xmath669 , the relation @xmath230 is a thick mapping , and for any subset @xmath189 of @xmath3 the restriction of @xmath44 onto @xmath189 is a thick mapping .",
    "let @xmath670 .",
    "since @xmath671 , the unary relation @xmath74 is definable in @xmath44 .",
    "if @xmath672 , by setting @xmath673 we get a binary relation @xmath230 that is not a thick mapping .",
    "thus by the minimality of @xmath44 , we may assume that @xmath674 for any @xmath675 , and symmetrically , @xmath676 for any @xmath677 .",
    "we claim that @xmath679 .",
    "suppose , without loss of generality that @xmath680 appears in @xmath72 . if @xmath681 , then @xmath682 and @xmath665 .",
    "therefore the restriction @xmath683 is not a thick mapping , contradicting the minimality of @xmath44 .",
    "otherwise @xmath684 while @xmath685 .",
    "hence @xmath686 is not a thick mapping .",
    "thus we have @xmath687 and @xmath688 .",
    "let @xmath689 be an instance of bis .",
    "construct an instance @xmath80 by including into @xmath81 , for every edge @xmath690 of @xmath511 , the constraint @xmath691 , and defining a cardinality constraint as @xmath692 , @xmath693 , @xmath694 , @xmath695 .",
    "it is straightforward that for any solution @xmath88 of @xmath85 the set @xmath696 is an independent set , @xmath697 , @xmath698 .",
    "set @xmath699 satisfies the required conditions if and only if @xmath88 satisfies @xmath2 .",
    "conversely , for any independent set @xmath700 mapping @xmath88 given by @xmath701 is a solution of @xmath85 that satisfies @xmath2 if and only if @xmath702 and @xmath703 .            let us assume the converse .",
    "let @xmath707 , @xmath708 ( as @xmath44 is over a 3-element set ) .",
    "we consider two cases .",
    "suppose first @xmath709 ( implying @xmath710 ) .",
    "if @xmath685 , then the restriction of @xmath44 onto @xmath711 contains @xmath712 , but does not contain @xmath713 . thus @xmath714 is not a thick mapping , a contradiction with the minimality assumption . if @xmath715 then the set @xmath716 is definable in @xmath44 . observe that @xmath717 is not a thick mapping and definable in @xmath44 . a contradiction with the choice of @xmath44 .",
    "now suppose that @xmath718 ( implying @xmath719 ) .",
    "if @xmath715 , then the restriction @xmath714 is not a thick mapping , as @xmath720 and @xmath665 . otherwise let @xmath685 . by the assumption made @xmath721 , that is , @xmath722 .",
    "we consider 4 cases depending on whether @xmath723 and @xmath724 are contained in @xmath44 . if @xmath725 , then , as @xmath726 , the relation @xmath727 is not a thick mapping ( recall that @xmath728 ) .",
    "if @xmath729 , then we can restrict @xmath44 on @xmath730 ( note that @xmath731 ) .",
    "finally , if @xmath732 [ or @xmath733 , then the relation @xmath734 [ respectively , @xmath735 is definable in @xmath44 .",
    "it remains to observe that @xmath717 is not a thick mapping .",
    "this concludes the proof of the claim .",
    "thus we can assume that one of the projections @xmath71 or @xmath72 contains only 2 elements .",
    "without loss of generality , let @xmath687 . in the remaining cases , we assume @xmath707 , where @xmath680 and @xmath18 may not be present .          1 .",
    "@xmath737 , where all the sets @xmath662 and @xmath738 , @xmath739 , are disjoint , and @xmath740 .",
    "2 .   for any",
    "@xmath741 the set @xmath81 contains all constraints of the form @xmath691 where @xmath742 .",
    "the cardinality constraint @xmath2 is given by the following rules : 1 .",
    "subcase 3a : + @xmath694 , @xmath743 , @xmath744 if @xmath745 , and + @xmath694 , @xmath746 , @xmath747 if @xmath748 .",
    "subcase 3b : + @xmath695 , @xmath743 , @xmath749 if @xmath750 , and + @xmath695 , @xmath751 , @xmath747 if @xmath752 .",
    "if @xmath511 has a required independent set @xmath291 , then consider a mapping @xmath753 given by @xmath754 for any @xmath755 , @xmath756 , either @xmath757 or @xmath758 .",
    "in the first case @xmath759 and so @xmath760 . in the second case @xmath761 and @xmath762 .",
    "again , @xmath760 .",
    "finally it is straightforward that @xmath88 satisfies the cardinality constraint @xmath2 .",
    "suppose that @xmath85 has a solution @xmath88 that satisfies @xmath2 .",
    "since @xmath687 and we can assume that @xmath511 has no isolated vertices , for any @xmath756 , @xmath739 , we have @xmath763 . also if for some @xmath756 it holds that @xmath761 and @xmath764 for @xmath765 then @xmath766 .",
    "we include into @xmath700 all vertices @xmath739 such that there is @xmath756 with @xmath761 . by the choice of the cardinality of @xmath738 and @xmath767",
    "there are at least @xmath768 such vertices . in subcase 3a , we include in @xmath291 all vertices @xmath765 with @xmath764 .",
    "there are exactly @xmath769 vertices like this , and by the observation above @xmath291 is an independent set . in subcase 3b , we include in @xmath291 all vertices @xmath765 with @xmath770 . by the choice of @xmath771",
    ", there are at least @xmath769 such vertices . to verify that @xmath291 is an independent set it suffices to recall that in this case @xmath685 , and so @xmath772 .",
    "next we show hardness in the case when there is a crossing pair of equivalence relations . with a simple observation",
    ", we can obtain a binary relation that is not a thick mapping and then apply lemma [ lem : non - thick - mapping ] .",
    "let @xmath205 be equivalence relations on the same domain @xmath3 .",
    "this means that there are @xmath202 such that @xmath775 and @xmath776 .",
    "let @xmath777 and @xmath778 .",
    "clearly , @xmath779 by lemma  [ lem : restriction ] , @xmath780 is polynomial - time reducible to @xmath774 .",
    "consider the relation @xmath781 , that is , @xmath782 .",
    "we have that @xmath654 is reducible to @xmath780 and @xmath783 observe that @xmath44 is not a thick mapping and by lemma  [ lem : non - thick - mapping ] , @xmath654 is np - complete .    finally , we prove hardness in the case when there is a relation that is not 2-decomposable .",
    "an example of such a relation is a ternary boolean affine relation @xmath784 for @xmath785 or @xmath786 .",
    "the csp with global cardinality constraints for this relation is np - complete by @xcite .",
    "our strategy is to obtain such a relation from a relation that is not 2-decomposable .",
    "however , as in lemma  [ lem : non - thick - mapping ] , we have to consider several cases .",
    "we can assume that every binary relation in @xmath790 is a thick mapping , and no pair of equivalence relations from this set cross , otherwise the problem is np - complete by theorems  [ the : decision - pp - defin ] ,  [ the : adding - constants ] , and lemmas  [ lem : non - thick - mapping ] ,  [ lem : non - non - crossing ] .",
    "furthermore , we can choose @xmath44 to be the ` smallest ' non-2-decomposable relation in the sense that every relation obtained from @xmath44 by restricting on a proper subset of @xmath3 is 2-decomposable , and every relation @xmath791 that either have smaller arity , or @xmath669 , is also 2-decomposable .",
    "we claim that relation @xmath44 is ternary .",
    "indeed , it can not be binary by assumptions made about it .",
    "suppose that @xmath792 is a tuple such that @xmath793 for any @xmath112 .",
    "let @xmath794}(x_4)\\wedge\\ldots \\wedge c_{\\ba[n]}(x_n)).\\end{aligned}\\ ] ] it is straightforward that @xmath795,\\ba[2],\\ba[3])\\not\\in\\rel'$ ] , while , since any proper projection of @xmath44 is 2-decomposable , @xmath796 , @xmath797 , @xmath798 , implying @xmath799,\\ba[3])\\in\\pr_{23}\\rel'$ ] , @xmath795,\\ba[3])\\in\\pr_{13}\\rel'$ ] , @xmath795,\\ba[2])\\in\\pr_{12}\\rel'$ ] , respectively .",
    "thus @xmath230 is not 2-decomposable , a contradiction with assumptions made .",
    "if @xmath805 is a thick mapping with respect to some equivalence relations @xmath806 ( see p.  [ page : with - respect ] ) , @xmath807 is a thick mapping with respect to @xmath808 , and @xmath809 is a thick mapping with respect to @xmath810 , then @xmath811 , @xmath812 , and @xmath813 .",
    "let the corresponding classes of @xmath814 , @xmath815 , and @xmath816 be @xmath817 , and @xmath818 , respectively .",
    "then @xmath819 , @xmath820 , @xmath821 .",
    "indeed , if one of these equalities is not true , since by lemma  [ lem : classes ] the relations @xmath822 are pp - definable in @xmath44 without equalities , the relation @xmath823 is pp - definable in @xmath44 and the constant relations , is smaller than @xmath44 , and is not 2-decomposable .",
    "next we show that @xmath824 for all @xmath825 .",
    "if there is @xmath826 with @xmath827 then setting @xmath828 we have @xmath829 and @xmath830 .",
    "thus @xmath831 is smaller than @xmath44 and is not 2-decomposable .",
    "the same is true for @xmath200 and @xmath72 , and for @xmath201 and @xmath832 .",
    "since every binary projection of @xmath44 is a thick mapping this implies that @xmath833 , @xmath834 , and @xmath835 .    for each @xmath836 and every @xmath837 ,",
    "the relation @xmath838 , where @xmath839 , is definable in @xmath44 and therefore is a thick mapping with respect to , say , @xmath840 .",
    "our next step is to show that @xmath44 can be chosen such that @xmath841 does not depend on the choice of @xmath842 and @xmath17 .",
    "if one of these relations , say , @xmath843 , equals @xmath844 , while another one , say @xmath845 does not , then consider @xmath846 .",
    "we have @xmath847 .",
    "moreover , since by the choice of @xmath44 relation @xmath845 is a non - trivial thick mapping there is @xmath848 such that @xmath849 , hence @xmath850 . therefore @xmath846 is not a thick mapping , a contradiction .",
    "since @xmath851 does not equal @xmath844 ( and @xmath852 , @xmath853 ) , every @xmath841 is non - trivial .",
    "observe that due to the equalities @xmath854 , we also have that the unary projections of @xmath855 are equal to those of @xmath44 for any @xmath842 ; and therefore all the equivalence relations @xmath856 , for a fixed @xmath857 , are on the same domain , @xmath858 .",
    "let @xmath859 since for any non - crossing @xmath205 we have @xmath860 , the relation @xmath861 is pp - definable in @xmath44 and constant relations without equalities . since all the @xmath856 are non - trivial , @xmath861 is also non - trivial .",
    "we set @xmath862 let @xmath863 be defined for @xmath230 in the same way as @xmath855 for @xmath44 . observe that since @xmath864 if and only if there is @xmath865 such that @xmath866 , @xmath867 , @xmath868 , the relations @xmath869 , @xmath870 , @xmath871 for @xmath872 are thick mappings with respect to the equivalence relations @xmath873 , relations @xmath874 , and relations @xmath875 , respectively .",
    "all the binary projections of @xmath230 equal to the direct product of the corresponding unary projections , while @xmath876 are non - trivial , which means @xmath230 is not the direct product of its unary projections , and therefore it is not 2-decomposable .",
    "we then can replace @xmath44 with @xmath230 .",
    "thus we have achieved that @xmath841 does not depend on the choice of @xmath842 and @xmath17 .",
    "next we show that @xmath44 can be chosen such that @xmath877 , @xmath878 , and for each @xmath836 there is @xmath879 such that @xmath880 is a reflexive relation .",
    "if , say , @xmath881 , or @xmath882 , or @xmath883 is not reflexive for any @xmath884 , consider the following relation @xmath885 first , observe that @xmath886 for any @xmath887 .",
    "then , for any fixed @xmath888 the relation @xmath889 is the product @xmath890 , that is , a non - trivial thick mapping . thus @xmath230 is not 2-decomposable .",
    "furthermore , @xmath891 , for any @xmath892 the relation @xmath871 is a thick mapping with respect to @xmath893 , and @xmath894 is reflexive . repeating this procedure for the two remaining pairs of coordinate positions ,",
    "we obtain a relation @xmath895 with the required properties .",
    "observe that repeating the procedure does not destroy the desired properties where they are already achieved .",
    "replacing @xmath44 with @xmath895 if necessary , we may assume that @xmath44 also has all these properties .",
    "set @xmath896 and @xmath897 .",
    "let @xmath898 be such that @xmath843 is reflexive .",
    "let also @xmath899 be such that @xmath900 .",
    "then @xmath901 while @xmath902 .",
    "choose @xmath533 such that @xmath903 .",
    "then the restriction of @xmath44 onto 3-element set @xmath904 is not 2-decomposable .",
    "thus @xmath44 can be assumed to be a relation on a 3-element set .    if @xmath905 is not the equality relation ,",
    "say , @xmath906 , then as the restriction of @xmath44 onto @xmath907 is still a not 2-decomposable relation , @xmath44 itself is a relation on the set @xmath907 . identifying @xmath842 and",
    "@xmath908 with 0 and 1 it is not hard to see that it is the affine relation @xmath909 on @xmath907 . the csp with global cardinality constraints for this relation is np - complete by @xcite .",
    "suppose that @xmath905 is the equality relation .",
    "since each of @xmath910 is a mapping and @xmath911 , it follows that the three relations are disjoint . as @xmath843 is the identity mapping ,",
    "@xmath845 and @xmath912 are two cyclic permutations of ( the 3-element set ) @xmath74 .",
    "hence either @xmath913 or @xmath914 belongs to @xmath845 .",
    "let it be @xmath913 .",
    "restricting @xmath44 onto @xmath907 we obtain a relation @xmath230 whose projection @xmath915 equals @xmath916 , which is not a thick mapping . a contradiction with the choice of @xmath44 .",
    "p.  idziak , p.  markovic , r.  mckenzie , m.  valeriote , and r.  willard .",
    "tractability and learnability arising from algebras with few subpowers . in _ proceedings of the 22th annual ieee simposium on logic in computer science_. ieee computer society , 2007 ."
  ],
  "abstract_text": [
    "<S> in a constraint satisfaction problem ( csp ) the goal is to find an assignment of a given set of variables subject to specified constraints . </S>",
    "<S> a global cardinality constraint is an additional requirement that prescribes how many variables must be assigned a certain value . </S>",
    "<S> we study the complexity of the problem @xmath0 , the constraint satisfaction problem with global cardinality constraints that allows only relations from the set @xmath1 . </S>",
    "<S> the main result of this paper characterizes sets @xmath1 that give rise to problems solvable in polynomial time , and states that the remaining such problems are np - complete </S>",
    "<S> .    [ section ] [ theorem]corollary [ theorem]lemma [ theorem]remark [ theorem]observation [ theorem]definition [ theorem]example    = = = =    = = = = =  )         = # 1#1 # 1 # 1#2#1 _ 1#1 _ # 2 = \\ # 1height7pt depth7pt width.4pt # 1/ # 1 # 1#2    (    c # 1 + # 2    )    # 1#2    (    c # 1 + # 2    )    # 1#2#3    (    c # 1 + # 2 + # 3    )    # 1#2#3#4    c # 1 + # 2 + # 3 + # 4    = # 1 - 1.7mm^#1 # </S>",
    "<S> 1 - 0.2mm^#1 =    _ _    = = = = = = = = = = = = = =    = eufm10 scaled 1200 = eufm6 12=12=12= = msbm10 = msbm8 11=11=11= = msbm10 scaled 1200 13=13= 13= = `` 0b4e = ' ' 0d3f </S>"
  ]
}