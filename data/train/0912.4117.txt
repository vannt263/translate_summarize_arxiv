{
  "article_text": [
    "pushdown automata ( pdas ) ( or recursive state machines ) are a natural model for sequential programs with recursive procedure calls , and their verification problems have been studied extensively .",
    "the complexity of model checking problems for pdas is quite well understood : the reachability problem for pdas can be solved in polynomial time @xcite .",
    "model checking modal @xmath2-calculus over pdas was shown to be @xmath7-complete in @xcite , and the global version of the model checking problem has been considered in @xcite .",
    "the @xmath7 lower bound for model checking pdas also holds for the simpler logic @xmath0 and its fragment @xmath8 @xcite , even for a fixed formula ( data complexity ) @xcite or a fixed pda ( expression complexity ) . on the other hand ,",
    "model checking pdas against the logic @xmath4 ( another natural fragment of @xmath0 ) is @xmath1-complete @xcite , and again the lower bound still holds if either the formula or the pda is fixed @xcite .",
    "model checking problems for various fragments and extensions of pdl ( propositional dynamic logic ) over pdas were studied in @xcite .",
    "one - counter processes ( ocps ) are minsky counter machines with just one counter .",
    "they can also be seen as a special case of pdas with just one stack symbol , plus a non - removable bottom symbol which indicates an empty stack ( and thus allows to test the counter for zero ) and hence constitute a natural and fundamental computational model . in recent years",
    ", model checking problems for ocps received increasing attention @xcite .",
    "clearly , all upper complexity bounds carry over from pdas .",
    "the question , whether these upper bounds can be matched by lower bounds was just recently solved for several important logics : model checking modal @xmath2-calculus over ocps is @xmath1-complete .",
    "the @xmath1 upper bound was shown in @xcite , and a matching lower bound can easily be shown by a reduction from emptiness of alternating unary finite automata , which was shown to be @xmath1-complete in @xcite .",
    "this lower bound even holds if either the ocp or the formula is fixed .",
    "the situation becomes different for the fragment @xmath4 . in @xcite , it was shown that model checking @xmath4 over ocps is in the complexity class @xmath9 ( the class of all problems that can be solved on a deterministic polynomial time machine with access to an oracle from @xmath10 ) .",
    "moreover , if the input formula is represented succinctly as a directed acyclic graph , then model checking @xmath4 over ocps is also hard for @xmath9 . for the standard ( and less succinct ) tree representation for formulas , only hardness for the class @xmath11}$ ] ( the class of all problems that can be solved on a deterministic polynomial time machine which is allowed to make @xmath12 many queries to an oracle from @xmath10 ) was shown in @xcite .",
    "in fact , there already exists a fixed @xmath4 formula such that model checking this formula over a given ocp is hard for @xmath11}$ ] , i.e. , the data complexity is @xmath11}$]-hard .    in this paper",
    "we consider the model checking problem for @xmath0 over ocps . by the known upper bound for the modal @xmath2-calculus @xcite this problem belongs to @xmath1 .",
    "first , we analyze the combinatorics of @xmath0 model checking over ocps .",
    "more precisely , we analyze the periodic behaviour of the set of natural numbers that satisfy a given @xmath0 formula in a given control location of the ocp ( thm .",
    "[ thm - ctl - periodic ] ) . by making use of thm .",
    "[ thm - ctl - periodic ] , we can derive a model checking algorithm whose running time is exponential only in the number of control locations and a syntactic measure on @xmath0 formulas that we call leftward until depth ( thm .",
    "[ ctl upper bound_0 ] ) . as a corollary",
    ", we obtain that model checking a fixed ocp against @xmath0 formulas of fixed leftward until depth lies in @xmath3 .",
    "this generalizes a recent result from @xcite , where it was shown that the expression complexity of @xmath4 over ocps lies in @xmath3 .",
    "next , we focus on lower bounds .",
    "we show that model checking @xmath0 over ocps is @xmath1-complete , even if we fix either the ocp ( thm .",
    "[ theo - ctl - expression ] ) or the @xmath0 formula ( thm .",
    "[ theo ctl data ] ) .",
    "the proof of thm .",
    "[ theo - ctl - expression ] uses a reduction from qbf .",
    "we have to construct a fixed ocp for which we can construct for a given unary encoded number @xmath13 @xmath0 formulas that express , when interpreted over our fixed ocp , whether the current counter value is divisible by @xmath14 and whether the @xmath15 bit in the binary representation of the current counter value is @xmath16 , respectively . for the proof of thm .",
    "[ theo ctl data ] ( @xmath1-hardness of data complexity for @xmath0 ) we use two techniques from complexity theory , which to our knowledge have not been applied in the context of verification so far : ( i ) the existence of small depth circuits for converting a number from chinese remainder representation to binary representation and ( ii ) the fact that @xmath1-computations are serializable in a certain sense ( see sec .  [ s tools ] for details ) .",
    "one of the main obstructions in getting lower bounds for ocps is the fact that ocps are well suited for testing divisibility properties of the counter value and hence can deal with numbers in chinese remainder representation , but it is not clear how to deal with numbers in binary representation .",
    "small depth circuits for converting a number from chinese remainder representation to binary representation are the key in order to overcome this obstruction .",
    "we are confident that our new lower bound techniques described above can be used for proving further lower bounds for ocps .",
    "we present two other applications of our techniques in sec .",
    "[ further applications ] : ( i ) we show that model checking @xmath4 over ocps is complete for @xmath9 even if the input formula is represented by a tree ( thm .",
    "[ t ef ] ) and thereby solve an open problem from @xcite .",
    "( ii ) we improve a lower bound on a decision problem for one - counter markov decision processes from @xcite ( thm .  [ thm markov ] ) .",
    "the following table summarizes the picture on the complexity of model checking for pdas and ocps .",
    "our new results are marked with ( * ) .    [ cols=\"<,<,<\",options=\"header \" , ]     missing proofs due to space restrictions can be found in the full version of this paper @xcite .",
    "[ s pre ]    we denote the naturals by @xmath17 . for @xmath18",
    "let @xmath19=\\{k\\in{\\mathbb{n}}\\mid i\\leq k\\leq j\\}$ ] and @xmath20=[1,j]$ ] . in particular @xmath21 = \\emptyset$ ] .",
    "for @xmath22 and @xmath23 , let @xmath24 denote the @xmath15 least significant bit of the binary representation of @xmath25 , i.e. , @xmath26 .",
    "for every finite and non - empty subset @xmath27 , define @xmath28 to be the _ least common multiple _ of all numbers in @xmath29 .",
    "it is known that @xmath30)\\leq4^k$ ] for all @xmath31 @xcite . as usual , for a possibly infinite alphabet @xmath32 , @xmath33 ( resp .",
    "@xmath34 ) denotes the set of all finite ( resp .",
    "infinite ) words over @xmath32 .",
    "let @xmath35 and @xmath36 , where @xmath37 is the empty word .",
    "the length of a finite word @xmath38 is denoted by @xmath39 . for a word @xmath40 ( resp .",
    "@xmath41 ) with @xmath42 and @xmath43 $ ] ( resp .",
    "@xmath23 ) , we denote by @xmath44 the @xmath15 letter @xmath45 .",
    "a nondeterministic finite automaton ( nfa ) is a tuple @xmath46 , where @xmath47 is a finite set of _ states _",
    ", @xmath48 is a _ finite alphabet _ , @xmath49 is the _ transition relation _ , @xmath50 is the _ initial state _ , and @xmath51 is a set of _ final states_. we assume some basic knowledge in complexity theory , see e.g. @xcite for more details .",
    "[ s ocp ctl ]    fix a countable set @xmath52 of _ propositions_. a _ transition system _ is a triple @xmath53 , where @xmath47 is the set of _ states _ , @xmath54 is the set of _ transitions _ and @xmath55 for all @xmath56 with @xmath57 for all but finitely many @xmath58 .",
    "we write @xmath59 instead of @xmath60 .",
    "the set of all _ finite _ ( resp .",
    "_ infinite _ ) _ paths _ in @xmath61 is @xmath62 : \\pi_i \\to \\pi_{i+1 } \\}$ ] ( resp .",
    "@xmath63 ) . for a subset @xmath64 of states , a ( finite or infinite ) path @xmath65",
    "is called a _ @xmath66-path _ if @xmath67 .",
    "a _ one - counter process _ ( ocp ) is a tuple @xmath68 , where @xmath69 is a finite set of _ control locations _ , @xmath70 for all @xmath58 with @xmath71 for all but finitely many @xmath58 , @xmath72 is a set of _ zero transitions _ , and @xmath73 is a set of _ positive transitions_. the _ size _ of the ocp @xmath74 is @xmath75 .",
    "the transition system defined by @xmath74 is @xmath76 , where @xmath77 if and only if either @xmath78 and @xmath79 , or @xmath80 and @xmath81 .",
    "a _ one - counter net _ ( ocn ) is an ocp , where @xmath82 .",
    "for @xmath83 we usually write @xmath84 .",
    "more details on the temporal logic @xmath0 can be found for instance in @xcite .",
    "_ formulas _ @xmath85 of @xmath0 are defined by the following grammar , where @xmath58 : @xmath86 given a transition system @xmath87 and a @xmath0 formula @xmath85 , we define the semantics @xmath88\\!]}_t\\subseteq s$ ] by induction on the structure of @xmath85 as follows : @xmath89\\!]}}}_t = s_p \\text { for each } p\\in{\\mathcal{p}}$ ] , @xmath90\\!]}}}_t =   s\\setminus{\\ensuremath{{[\\![}\\varphi { ] \\!]}}}_t$ ] , @xmath91\\!]}}}_t=   { \\ensuremath{{[\\![}\\varphi_1 { ] \\!]}}}_t\\cap{\\ensuremath{{[\\![}\\varphi_2 { ] \\!]}}}_t$ ] , @xmath92\\!]}}}_t = \\{s\\in s\\mid \\exists s'\\in{\\ensuremath{{[\\![}\\varphi { ] \\!]}}}_t : s\\rightarrow s'\\}$ ] , @xmath93\\!]}}}_t   =   \\{s\\in s\\mid \\exists   \\pi \\in \\path_+(t ) : \\pi_1 = s ,   \\pi_{|\\pi| } \\in{\\ensuremath{{[\\![}\\varphi_2 { ] \\!]}}}_t , \\forall i\\in[|\\pi|-1 ] : \\pi_i\\in{\\ensuremath{{[\\![}\\varphi_1 { ] \\!]}}}_t\\}$ ] , @xmath94\\!]}}}_t =   { \\ensuremath{{[\\![}\\exists\\varphi_1\\u\\varphi_2 { ] \\!]}}}_t\\cup \\{s\\in s\\mid \\exists",
    "\\pi \\in \\path_\\omega(t ) : \\pi_1 = s ,   \\forall i\\geq 1 : \\pi_i\\in{\\ensuremath{{[\\![}\\varphi_1 { ] \\!]}}}_t\\}$ ] .",
    "we also write @xmath95 ( or briefly @xmath96 if @xmath61 is clear from the context ) for @xmath97\\!]}}}_t$ ] .",
    "we introduce the usual abbreviations @xmath98 , @xmath99 , @xmath100 , and @xmath101 for some @xmath58",
    ". formulas of the @xmath0-fragment @xmath4 are given by the following grammar , where @xmath58 : @xmath102 .",
    "the _ size _ of @xmath0 formulas is defined as follows : @xmath103 , @xmath104 , @xmath105 , @xmath106 .",
    "the goal of this section is to prove a periodicity property of @xmath0 over ocps , which implies an upper bound for @xmath0 on ocps , see thm .",
    "[ ctl upper bound_0 ] . as a corollary ,",
    "we state that for a fixed ocp , @xmath0 model checking restricted to formulas of fixed leftward until depth ( see the definition below ) can be done in polynomial time .",
    "we define the _ leftward until depth @xmath107 _ of @xmath0 formulas inductively as follows : @xmath108 for @xmath58 , @xmath109 , @xmath110 , @xmath111 . a similar definition of until depth can be found in @xcite , but there the until depth of @xmath112 is 1 plus the maximum of the until depths of @xmath113 and @xmath114 .",
    "note that @xmath115 for every @xmath4 formula @xmath85 .",
    "let us fix an ocp @xmath68 for the rest of this section .",
    "let @xmath116 and define @xmath117)$ ] and @xmath118 for each @xmath0 formula @xmath85 .",
    "[ thm - ctl - periodic ] for all @xmath0 formulas @xmath85 , all @xmath119 and all @xmath120 with @xmath121 : @xmath122\\!]}}}_{t({\\mathbb{o}})}\\quad \\longleftrightarrow \\quad   ( q , n')\\in{\\ensuremath{{[\\![}\\varphi { ] \\!]}}}_{t({\\mathbb{o}})}.\\end{aligned}\\ ] ]    we prove the theorem by induction on the structure of @xmath85 .",
    "we only treat the difficult case @xmath123 here .",
    "let @xmath124 .",
    "let us prove equivalence ( [ e period ] ) .",
    "note that @xmath125 by definition .",
    "let us fix an arbitrary control location @xmath126 and naturals @xmath127 such that @xmath128 and @xmath121 .",
    "we have to prove that @xmath129\\!]}}}_{t({\\mathbb{o}})}$ ] if and only if @xmath130\\!]}}}_{t({\\mathbb{o}})}$ ] . for this ,",
    "let @xmath131 , which is a multiple of @xmath132 .",
    "we only treat the `` if''-direction here and recommend the reader to consult @xcite for helpful illustrations .",
    "so let us assume that @xmath130\\!]}}}_{t({\\mathbb{o}})}$ ] .",
    "to prove that @xmath129\\!]}}}_{t({\\mathbb{o}})}$ ] , we will use the following claim .",
    "_ claim : _ assume some @xmath133\\!]}}}_{t({\\mathbb{o}})}$]-path @xmath134 $ ] with @xmath135 for all @xmath136 $ ] and @xmath137 .",
    "then there exists a @xmath133\\!]}}}_{t({\\mathbb{o}})}$]-path from @xmath138 to @xmath139 , whose counter values are all strictly above @xmath140 .",
    "the claim tells us that paths that lose height at least @xmath141 and whose states all have counter values strictly above @xmath61 can be flattened ( without changing the starting state ) by height @xmath142 .",
    "_ proof of the claim .",
    "_ for each counter value @xmath143\\}$ ] that appears in @xmath65 , let @xmath144\\mid n_i = h\\}$ ] denote the minimal position in @xmath65 whose corresponding state has counter value @xmath145 .",
    "define @xmath146 .",
    "we will be interested in @xmath147 many consecutive intervals ( of counter values ) each of size @xmath148 .",
    "define the bottom @xmath149 .",
    "formally , an _ interval _ is a set @xmath150 $ ] for some @xmath151 $ ] .",
    "since each interval has size @xmath146 , we can think of each interval @xmath152 to consist of @xmath153 consecutive _ sub - intervals _ of size @xmath154 each .",
    "note that each sub - interval has two extremal elements , namely its _ upper _ and _ lower boundary_. thus all @xmath153 sub - intervals have @xmath155 boundaries in total .",
    "hence , by the pigeonhole principle , for each interval @xmath152 , there exists some @xmath156 $ ] and two distinct boundaries @xmath157 of distance @xmath158 such that the control location of @xmath65 s earliest state of counter value @xmath159 agrees with the control location of @xmath65 s earliest state of counter value @xmath160 , i.e. , formally @xmath161 .",
    "observe that flattening the path @xmath65 by gluing together @xmath65 s states at position @xmath162 and @xmath163 ( for this , we add @xmath164 to each counter value at a position @xmath165 ) still results in a @xmath133\\!]}}}_{t({\\mathbb{o}})}$]-path by induction hypothesis , since we reduced the height of @xmath65 by a multiple of @xmath154 .",
    "our overall goal is to flatten @xmath65 by gluing together states only of certain intervals such that we obtain a path whose height is in total by precisely @xmath142 smaller than @xmath65 s .",
    "recall that there are @xmath147 many intervals . by the pigeonhole principle there is some @xmath166 $ ] such that @xmath167 for at least @xmath168 many intervals @xmath152 . by gluing together @xmath169 pairs of states of distance @xmath170",
    "each , we reduce @xmath65 s height by exactly @xmath171 .",
    "this proves the claim .",
    "let us finish the proof the `` if''-direction .",
    "since by assumption @xmath130\\!]}}}_{t({\\mathbb{o}})}$ ] , there exists a finite path @xmath172 , where @xmath173 $ ] is a @xmath133\\!]}}}_{t({\\mathbb{o}})}$]-path , @xmath174 , and where @xmath175\\!]}}}_{t({\\mathbb{o}})}$ ] . to prove @xmath129\\!]}}}_{t({\\mathbb{o}})}$ ] , we will assume that @xmath176 for each @xmath177 $ ] .",
    "the case when @xmath178 for some @xmath177 $ ] can be proven similarly .",
    "assume first that the path @xmath173 $ ] contains two states whose counter difference is at least @xmath179 which is ( strictly ) greater than @xmath141 . since @xmath132 is a multiple of @xmath180 by definition , we can apply the above claim @xmath181 many times to @xmath173 $ ] .",
    "this reduces the height by @xmath132 .",
    "we repeat this flattening process of @xmath173 $ ] by height @xmath132 as long as possible , i.e. , until any two states have counter difference smaller than @xmath182 .",
    "let @xmath183 denote the @xmath133\\!]}}}_{t({\\mathbb{o}})}$]-path starting in @xmath184 that we obtain from @xmath173 $ ] by this process .",
    "thus , @xmath183 ends in some state , whose counter value is congruent @xmath185 modulo @xmath132 ( since we flattened @xmath173 $ ] by a multiple of @xmath132 ) . since @xmath132 is in turn a multiple of @xmath186",
    ", we can build a path @xmath187 which extends the path @xmath183 by a single transition to some state that satisfies @xmath188 by induction hypothesis .",
    "moreover , by our flattening process , the counter difference between any two states in @xmath187 is at most @xmath189 .",
    "recall that @xmath190 .",
    "as @xmath191 it follows that the path that results from @xmath187 by subtracting @xmath192 from each counter value ( this path starts in @xmath193 ) is strictly above @xmath61 .",
    "moreover , since @xmath192 is a multiple of @xmath154 and @xmath186 , this path witnesses @xmath129\\!]}}}_{t({\\mathbb{o}})}$ ] by induction hypothesis .    the following result can be obtained basically by using the standard model checking algorithm for @xmath0 on finite systems ( see e.g. @xcite ) in combination with thm .",
    "[ thm - ctl - periodic ] .",
    "[ ctl upper bound_0 ] for a given one - counter process @xmath68 , a @xmath0 formula @xmath85 , a control location @xmath126 , and @xmath22 given in binary , one can decide @xmath129\\!]}}}_{t({\\mathbb{o}})}$ ] in time @xmath194 .    as a corollary , we can deduce that for every fixed ocp @xmath74 and every fixed @xmath153 the question if for a given state @xmath195 and a given ctl formula @xmath85 with @xmath196 , we have @xmath197 , is in @xmath3 .",
    "this generalizes a result from @xcite , stating that the expression complexity of @xmath4 over ocps is in @xmath198 .",
    "[ s expression ]    the goal of this section is to prove that model checking @xmath0 is @xmath1-hard already over a fixed ocn . we show this via a reduction from the well - known @xmath1-complete problem qbf .",
    "our lower bound proof is separated into three steps . in step one , we define a family of @xmath0 formulas @xmath199 such that over the fixed ocn @xmath74 that is depicted in fig .  [ fig - fixed - ccp ] we can express ( non-)divisibility by @xmath14 . in step two ,",
    "we define a family of @xmath0 formulas @xmath200 such that over @xmath74 we can express if the @xmath15 bit in the binary representation of a natural is set to @xmath16 . in our final step ,",
    "we give the reduction from qbf . for step one , we need the following simple fact which characterizes divisibility by powers of two ( recall that @xmath201 = \\{1,\\ldots , n\\}$ ] , in particular @xmath21 = \\emptyset$ ] ) : @xmath202 \\mid 2^{i-1 } \\text { divides } n ' \\}| \\text { is even})\\ ] ]    ( 375,100)(-65,20 ) ( -65,40)@xmath203 ( tb)(25,80)@xmath204 ( t)(25,40)@xmath205 ( q0)(80,20)@xmath206 ( q2)(80,100)@xmath207 ( q1)(115,60)@xmath208 ( q1)@xmath209 ( q3)(45,60)@xmath210 ( q3)@xmath209 ( q0,q1)@xmath209 ( q1,q2)@xmath209 ( q2,q3)@xmath209 ( q3,q0)@xmath209 ( f)(-10,50)@xmath211 ( g)(-10,90)@xmath212 ( q0,t)@xmath213 ( q1,tb)@xmath213 ( q2,tb)@xmath213 ( q3,tb)@xmath213 ( q2,t)@xmath213 ( t , f)@xmath213 ( tb , f)@xmath209 ( g , f)@xmath209 ( p0)(5,120)@xmath214 ( p1)(45,120)@xmath215 ( tb , p1)@xmath216 ( p1,tb)@xmath213 ( p0,tb)@xmath213 ( p1)@xmath216    ( 165,40)@xmath217 ( tb)(225,25)@xmath204 ( t)(285,35)@xmath205 ( q0)(310,25)@xmath206 ( f)(260,45)@xmath211 ( t , q0)@xmath213 ( t , f)@xmath213 ( p0)(205,65)@xmath214 ( p1)(245,65)@xmath215 ( tb , p1)@xmath216 ( p0,tb)@xmath213    the set of propositions of @xmath74 in fig .",
    "[ fig - fixed - ccp ] coincides with its control locations .",
    "recall that @xmath74 s zero transitions are denoted by @xmath218 and @xmath74 s positive transitions are denoted by @xmath219 . since @xmath82 , @xmath74 is indeed an ocn .",
    "note that both @xmath205 and @xmath204 are control locations of @xmath74 .",
    "now we define a family of @xmath0 formulas @xmath199 such that for each @xmath22 we have : ( i ) @xmath220 if and only if @xmath14 divides @xmath25 and ( ii ) @xmath221 if and only if @xmath14 does _ not _ divide @xmath25 . on first sight",
    ", it might seem superfluous to let the control location @xmath205 represent divisibility by powers of two and the control location @xmath204 to represent non - divisibility by powers of two since @xmath0 allows negation .",
    "however the fact that we have _ only one _ family of formulas @xmath199 to express both divisibility and non - divisibility is a crucial technical subtlety that is necessary in order to avoid an exponential blowup in formula size . by making use of ( [ fact1 ] ) , we construct the formulas @xmath222 inductively .",
    "first , let us define the auxiliary formulas @xmath223 and @xmath224 .",
    "think of @xmath225 to hold in those control locations that altogether are situated in the `` diamond '' in fig .",
    "[ fig - fixed - ccp ] .",
    "we define @xmath226 since @xmath227 is only used once in @xmath222 , we get @xmath228 .",
    "the following lemma states the correctness of the construction .",
    "[ l correctness ] let @xmath229 and @xmath23",
    ". then    * @xmath220 if and only if @xmath14 divides @xmath25 .",
    "* @xmath221 if and only if @xmath14 does not divide @xmath25 .",
    "_ proof sketch .",
    "_ the lemma is proved by induction on @xmath13 .",
    "the induction base for @xmath230 is easy to check . for @xmath231 , observe that @xmath222 can only be true either in control location @xmath205 or @xmath204 .",
    "note that the formula right to the until symbol in @xmath222 expresses that we are in @xmath206 and that the current counter value is zero .",
    "also note that the formula left to the until symbol requires that @xmath225 holds , i.e. , we are always in one of the four `` diamond control locations '' . in other words , we decrement the counter by moving along the diamond control locations ( by possibly looping at @xmath208 and @xmath210 ) and always check if @xmath232 holds , just until we are in @xmath206 and the counter value is zero . since there are transitions from @xmath208 and @xmath210 to @xmath204 ( but not to @xmath205 ) , the induction hypothesis implies that the formula @xmath232 can be only true in @xmath208 and @xmath210 as long as the current counter value is not divisible by @xmath233 .",
    "similarly , since there are transitions from @xmath206 and @xmath207 to @xmath205 ( but not to @xmath234 ) , the induction hypothesis implies that the formula @xmath232 can be only true in @xmath206 and @xmath207 if the current counter value is divisible by @xmath233 . with ( [ fact1 ] )",
    "this implies the lemma .    for expressing",
    "if the @xmath15 bit of a natural is set to @xmath16 , we make use of the following simple fact : latexmath:[\\[\\forall n \\geq 0 , i \\geq 1 :   { \\text{bit}}_i(n)=1 \\ \\longleftrightarrow \\    now define a family of @xmath0 formulas @xmath200 such that for each @xmath22 we have @xmath236 if and only if @xmath237 .",
    "we set @xmath238 and @xmath239 , where @xmath240 for each @xmath241 . due to the construction of @xmath242 and since @xmath228 , we obtain that @xmath243 .",
    "the following lemma states the correctness of the construction .",
    "[ l bit ] let @xmath244 and let @xmath23 .",
    "then @xmath237 if and only if @xmath236 .",
    "let us sketch the final step of the reduction from qbf .",
    "for this , let us assume some quantified boolean formula @xmath245 , where @xmath246 is a boolean formula over variables @xmath247 and @xmath248 is a quantifier for each @xmath249 $ ] .",
    "think of each truth assignment @xmath250 to correspond to the natural number @xmath251 $ ] , where @xmath252 if and only if @xmath253 , for each @xmath249 $ ] .",
    "let @xmath254 be the ctl formula that is obtained from @xmath246 by replacing each occurrence of @xmath255 by @xmath242 , which corresponds to applying lemma [ l bit ] .",
    "it remains to describe how we deal with quantification .",
    "think of this as to consecutively incrementing the counter from state @xmath256 as follows .",
    "first , setting the variable @xmath257 to @xmath16 will correspond to adding @xmath258 to the counter and getting to state @xmath259 . setting @xmath257 to @xmath213 on the other hand",
    "will correspond to adding @xmath213 to the counter and hence remaining in state @xmath256 .",
    "next , setting @xmath260 to @xmath16 corresponds to adding to the current counter value @xmath261 , whereas setting @xmath260 to @xmath213 corresponds to adding @xmath213 , as expected .",
    "these incrementation steps can be achieved using the formulas @xmath222 from lemma  [ l correctness ] . finally , after setting variable @xmath262 either to @xmath213 or @xmath16",
    ", we verify if the ctl formula @xmath254 holds .",
    "formally , let @xmath263 if @xmath264 and @xmath265 if @xmath266 for each @xmath249 $ ] ( recall that @xmath267 are the quantifiers of our quantified boolean formula @xmath268 ) .",
    "let @xmath269 and for @xmath270 $ ] : @xmath271 then , it can be show that @xmath268 is valid if and only if @xmath272\\!]}}}_{t({\\mathbb{o}})}$ ] .",
    "[ theo - ctl - expression ] @xmath0 model checking of the fixed ocn @xmath74 from fig .",
    "[ fig - fixed - ccp ] is @xmath1-hard .",
    "note that the constructed @xmath0 formula has leftward until depth that depends on the size of @xmath268 . by thm .",
    "[ ctl upper bound_0 ] this can not be avoided unless @xmath273 .",
    "observe that in order to express divisibility by powers of two , our @xmath0 formulas @xmath274 have linearly growing leftward until depth .",
    "for sec .",
    "[ s data ] and [ further applications ] we need some concepts from complexity theory . by @xmath275}$ ] we denote the class of all problems that can be solved on a polynomially time bounded deterministic turing machines which can have access to an @xmath276-oracle only logarithmically many times , and by @xmath277 the corresponding class without the restriction to logarithmically many queries .",
    "let us briefly recall the definition of the circuit complexity class @xmath5 , more details can be found in @xcite .",
    "we consider boolean circuits @xmath278 built up from and- and or - gates . each input gate is labeled with a variable @xmath255 or a negated variable @xmath279 .",
    "the output gates are linearly ordered .",
    "such a circuit computes a function @xmath280 , where @xmath281 is the number of output gates , in the obvious way .",
    "the _ fan - in of a circuit _ is the maximal number of incoming wires of a gate in the circuit .",
    "the _ depth of a circuit _ is the number of gates along a longest path from an input gate to an output gate .",
    "logspace - uniform @xmath5-circuit family _ is a sequence @xmath282 of boolean circuits such that for some polynomial @xmath283 and constant @xmath284 : ( i ) @xmath285 contains at most @xmath283 many gates , ( ii ) the depth of @xmath285 is at most @xmath286 , ( iii ) the fan - in of @xmath285 is at most @xmath287 , ( iv ) for each @xmath281 there is at most one circuit in @xmath282 with exactly @xmath281 input gates , and ( v ) there exists a logspace transducer that computes on input @xmath288 a representation ( e.g. as a node - labeled graph ) of the circuit @xmath285 .",
    "such a circuit family computes a partial mapping on @xmath289 in the obvious way ( note that we do not require to have for every @xmath244 a circuit with exactly @xmath25 input gates in the family , therefore the computed mapping is in general only partially defined ) . in the literature on circuit complexity one can find more restrictive notions of uniformity , see e.g. @xcite , but logspace uniformity suffices for our purposes .",
    "in fact , polynomial time uniformity suffices for proving our lower bounds w.r.t .",
    "polynomial time reductions .    for @xmath290 and @xmath291",
    "let @xmath292 denote the @xmath281-bit binary representation of @xmath29 .",
    "let @xmath293 denote the @xmath15 prime number .",
    "it is well - known that the @xmath15 prime requires @xmath294 bits in its binary representation . for a number @xmath295",
    "we define the _ chinese remainder representation _ @xmath296 as the boolean tuple @xmath297 , 0 \\leq r < p_i}$ ] with @xmath298 if @xmath299 and @xmath300 else . by the following theorem",
    ", one can transform a chinese remainder representation very efficiently into binary representation .",
    "[ theorem hesse und co ] there is a logspace - uniform @xmath5-circuit family @xmath301 , 0 \\leq r < p_i } ) ) _ { m \\geq 1}$ ] such that for every @xmath290 , @xmath302 has @xmath281 output gates and for every @xmath295 we have that @xmath303 .    by @xcite , we could replace logspace - uniform @xmath5-circuits in thm .",
    "[ theorem hesse und co ] even by @xmath304-uniform @xmath305-circuits .",
    "the existence of a @xmath198-uniform @xmath5-circuit family for converting from chinese remainder representation to binary representation was already shown in @xcite .",
    "usually the chinese remainder representation of @xmath29 is the tuple @xmath306}$ ] , where @xmath307 .",
    "since the primes @xmath293 will be always given in unary notation , there is no essential difference between this representation and our chinese remainder representation .",
    "the latter is more suitable for our purpose .",
    "the following definition of @xmath5-serializability is a variant of the more classical notion of serializability @xcite , which fits our purpose better .",
    "a language @xmath308 is _",
    "@xmath5-serializable _ if there exists an nfa @xmath32 over the alphabet @xmath309 , a polynomial @xmath283 , and a logspace - uniform @xmath5-circuit family @xmath310 , where @xmath285 has exactly @xmath311 many inputs and one output , such that for every @xmath312 we have @xmath313 if and only if @xmath314 , where `` @xmath315 '' refers to the lexicographic order on @xmath316 . with this definition",
    ", it can be shown that all languages in @xmath1 are @xmath5-serializable .",
    "a proof can be found in the appendix of @xcite ; it is just a slight adaptation of the proofs from @xcite .",
    "in this section , we prove that also the data complexity of @xmath0 over ocns is hard for @xmath1 and therefore @xmath1-complete by the known upper bounds for the modal @xmath2-calculus @xcite .",
    "let us fix the set of propositions @xmath317 for this section . in the following , w.l.o.g .",
    "we allow in @xmath218 ( resp . in @xmath219 )",
    "transitions of the kind @xmath318 , where @xmath319 ( resp .",
    "@xmath320 ) is given in unary representation with the expected intuitive meaning .",
    "[ prop main ] for the fixed @xmath4 formula @xmath321 the following problem can be solved with a logspace transducer :    input : a list @xmath322 of the first @xmath281 consecutive ( unary encoded ) prime numbers and a boolean formula @xmath323 , 0 \\leq r < p_i})$ ]    output : an ocn @xmath324 with distinguished control locations @xmath325 and @xmath326 , such that for every number @xmath295 we have that @xmath327 if and only if there exists a @xmath328\\!]}}}_{t(\\omc(f))}$]-path from @xmath329 to @xmath330 in the transition system @xmath331 .",
    ", negations occur in @xmath332 only in front of variables .",
    "then additionally , a negated variable @xmath333 can be replaced by the disjunction @xmath334 .",
    "this can be done in logspace , since the primes @xmath293 are given in unary .",
    "thus , we can assume that @xmath332 does not contain negations .",
    "the idea is to traverse the boolean formula @xmath332 with the ocn @xmath324 in a depth first manner .",
    "each time a variable @xmath335 is seen , the ocn may also enter another branch , where it is checked , whether the current counter value is congruent @xmath336 modulo @xmath293 .",
    "let @xmath337 , where @xmath338 , @xmath339 , 0 \\leq r < p_i \\}$ ] , @xmath340 , and @xmath341 .",
    "we set @xmath342 and @xmath343 .",
    "let us now define the transition sets @xmath218 and @xmath219 .",
    "for every subformula @xmath344 or @xmath345 of @xmath332 we add the following transitions to @xmath218 and @xmath219 : @xmath346 for every variable @xmath335 we add to @xmath218 and @xmath219 the transition @xmath347 .",
    "moreover , we add to @xmath219 the transitions @xmath348 .",
    "the transition @xmath349 is also added to @xmath218 . for the control locations @xmath350 we add to @xmath219 the transitions @xmath351 and @xmath352 .",
    "this concludes the description of the ocn @xmath324 .",
    "correctness of the construction can be easily checked by induction on the structure of the formula @xmath332 .",
    "we are now ready to prove @xmath1-hardness of the data complexity .",
    "[ theo ctl data ] there exists a fixed @xmath0 formula of the form @xmath353 , where @xmath113 and @xmath114 are @xmath4 formulas , for which it is @xmath1-complete to decide @xmath354 for a given ocn @xmath355 and a control location @xmath356 of @xmath355 .",
    "let us take an arbitrary language @xmath308 in @xmath1 .",
    "recall from sec .",
    "[ s tools ] that @xmath1 is @xmath5-serializable .",
    "thus , there exists an nfa @xmath357 over the alphabet @xmath309 , a polynomial @xmath283 , and a logspace - uniform @xmath5-circuit family @xmath310 , where @xmath285 has @xmath311 many inputs and one output , such that for every @xmath312 we have : @xmath358 where `` @xmath315 '' refers to the lexicographic order on @xmath316 .",
    "fix an input @xmath312 .",
    "our reduction can be split into the following five steps :    _ step 1 .",
    "_ construct in logspace the circuit @xmath285 .",
    "fix the the first @xmath25 inputs of @xmath285 to the bits in @xmath359 , and denote the resulting circuit by @xmath360 ; it has only @xmath361 many inputs .",
    "then , ( [ eq c_n ] ) can be written as @xmath362 _ step 2 .",
    "_ compute the first @xmath281 consecutive primes @xmath363 .",
    "this is possible in logspace , see e.g. @xcite .",
    "every @xmath293 is bounded polynomially in @xmath25 .",
    "hence , every @xmath293 can be written down in unary notation .",
    "note that @xmath364 ( if @xmath365 ) .",
    "_ compute in logspace the circuit @xmath366 , 0 \\leq r < p_i } ) $ ] from thm .",
    "[ theorem hesse und co ] .",
    "thus , @xmath367 is a boolean circuit of fan - in 2 and depth @xmath368 with @xmath281 output gates and @xmath369 for every @xmath295 .",
    "_ now we compose the circuits @xmath367 and @xmath360 : for every @xmath370 $ ] , connect the @xmath15 input of the circuit @xmath371 with the @xmath15 output of the circuit @xmath367 .",
    "the result is a circuit with fan - in 2 and depth @xmath12 . in logspace",
    ", we can unfold this circuit into a boolean formula @xmath372 , 0 \\leq r < p_i})$ ] .",
    "the resulting formula ( or tree ) has the same depth as the circuit , i.e. , depth @xmath12 and every tree node has at most 2 children .",
    "hence , @xmath332 has polynomial size . for every @xmath373 we have @xmath374 and equivalence ( [ eq c ] )",
    "can be written as @xmath375 _ step 5 .",
    "_ we now apply our construction from prop .",
    "[ prop main ] to the formula @xmath332 .",
    "more precisely , let @xmath376 be the boolean formula @xmath377 } x_{i , r_i}$ ] where @xmath378 for @xmath370 $ ] ( these remainders can be computed in logspace ) .",
    "for every @xmath16-labeled transition @xmath379 of the nfa @xmath32 let @xmath380 be a copy of the ocn @xmath381 .",
    "for every @xmath213-labeled transition @xmath379 let @xmath380 be a copy of the ocn @xmath382 . in both cases we write @xmath380 as @xmath383 . denote with @xmath384 ( resp .",
    "@xmath385 ) the control location of this copy that corresponds to @xmath325 ( resp .",
    "@xmath326 ) in @xmath324 .",
    "hence , for every @xmath386-labeled transition @xmath379 ( @xmath387 ) and every @xmath295 there exists a @xmath328\\!]}}}_{t(\\omc(\\tau))}$]-path ( @xmath85 is from prop .",
    "[ prop main ] ) from @xmath388 to @xmath389 if and only if @xmath390 and @xmath391 .",
    "we now define an ocn @xmath392 as follows : we take the disjoint union of all the ocns @xmath380 for @xmath379 .",
    "moreover , every state @xmath393 of the nfa @xmath32 becomes a control location of @xmath355 , i.e. @xmath394 and @xmath395 for each @xmath396 .",
    "we add to @xmath218 and @xmath219 for every @xmath397 the transitions @xmath398 and @xmath399 .",
    "then , by prop .  [ prop main ] and ( [ gl f ] ) we have @xmath400 if and only if there exists a @xmath328\\!]}}}_{t(\\omc)}$]-path in @xmath401 from @xmath402 to @xmath403 for some @xmath404 .",
    "also note that there is no @xmath328\\!]}}}_{t(\\omc)}$]-path in @xmath401 from @xmath402 to some configuration @xmath405 with @xmath393 and @xmath406 .",
    "it remains to add to @xmath355 some structure that enables @xmath355 to check that the counter has reached the value @xmath407 .",
    "for this , use again prop .",
    "[ prop main ] to construct the ocn @xmath408 ( @xmath376 is from above ) and add it disjointly to @xmath355 .",
    "moreover , add to @xmath219 and @xmath218 the transitions @xmath409 for all @xmath404 , where @xmath325 is the @xmath325 control location of @xmath408 . finally , introduce a new proposition @xmath410 and set @xmath411 , where @xmath326 is the @xmath326 control location of @xmath408 . by putting @xmath412 we obtain : @xmath400 if and only if @xmath413 , where @xmath85 is from prop .  [ prop main ] .",
    "this concludes the proof of the theorem .    by slightly modifying the proof of thm .",
    "[ theo ctl data ] , one can also prove that the fixed ctl formula can chosen to be of the form @xmath414 , where @xmath415 is an @xmath4 formula .",
    "in this section , we present two further applications of thm .",
    "[ theorem hesse und co ] to ocps .",
    "first , we state that the combined complexity for @xmath4 over ocns is hard for @xmath9 . for formulas represented succinctly by directed acyclic graphs this",
    "was already shown in @xcite .",
    "the point here is that we use the standard tree representation for formulas .",
    "the proof of thm .",
    "[ t ef ] is very similar to the proof of thm .",
    "[ theo ctl data ] , but does not use the concept of serializability .",
    "we prove hardness by a reduction from the question whether the lexicographically maximal satisfying assignment of a boolean formula is even when interpreted as a natural number .",
    "this problem is @xmath9-hard by @xcite . at the moment",
    "we can not prove that the data complexity of @xmath4 over ocps is hard for @xmath9 ( hardness for @xmath11}$ ] was shown in @xcite ) . analyzing the proof of thm .",
    "[ t ef ] in @xcite shows that the main obstacle is the fact that converting from chinese remainder representation into binary representation is not possible by uniform @xmath6 circuits ( polynomial size circuits of constant depth and unbounded fan - in ) ; this is provably the case .",
    "in the rest of the paper , we sketch a second application of our lower bound technique based on thm .  [ theorem hesse und co ] , see @xcite for more details",
    ". this application concerns one - counter markov decision processes .",
    "_ markov decision processes _ ( mdps ) extend classical markov chains by allowing so called _",
    "nondeterministic vertices_. in these vertices , no probability distribution on the outgoing transitions is specified .",
    "the other vertices are called _ probabilistic vertices _ ; in these vertices a probability distribution on the outgoing transitions is given .",
    "the idea is that in an mdp a player eve plays against nature ( represented by the probabilistic vertices ) . in each nondeterministic vertex @xmath417 ,",
    "eve chooses a probability distribution on the outgoing transitions of @xmath417 ; this choice may depend on the past of the play ( which is a path in the underlying graph ending in @xmath417 ) and is formally represented by a strategy for eve .",
    "an mdp together with a strategy for eve defines a markov chain , whose state space is the unfolding of the graph underlying the mdp . here",
    ", we consider infinite mdps , which are finitely represented by ocps ; this formalism was introduced in @xcite under the name _ one - counter markov decision process _",
    "( oc - mdp ) . with a given oc - mdp @xmath418 and a set @xmath419 of control locations of the ocp underlying @xmath418 ( a so called _ reachability constraint _ ) , two sets were associated in @xcite : @xmath420 is the set of all vertices @xmath195 of the mdp defined by @xmath418 such that for every @xmath421 there exists a strategy @xmath183 for eve under which the probability of finally reaching from @xmath195 a control location in @xmath419 and at the same time having counter value @xmath213 is at least @xmath422 .",
    "@xmath423 is the set of all vertices @xmath195 of the mdp defined by @xmath418 for which there exists a specific strategy for eve under which this probability is @xmath16 .",
    "it was shown in @xcite that for a given oc - mdp @xmath418 , a set of control locations @xmath419 , and a vertex @xmath195 of the mdp defined by @xmath418 , the question if @xmath424 is @xmath1-hard and in @xmath7 . the same question for @xmath420 instead of @xmath423",
    "was shown to be hard for each level of the boolean hierarchy @xmath425 , which is a hierarchy of complexity classes between @xmath276 and @xmath11}$ ] . by applying our lower bound techniques ( from thm .",
    "[ theo ctl data ] ) we can prove the following .      as a byproduct of our proof , we also reprove @xmath1-hardness for @xmath423 .",
    "it is open , whether @xmath420 is decidable ; the corresponding problem for mdps defined by pushdown processes is undecidable @xcite .",
    "u.  hertrampf , c.  lautemann , t.  schwentick , h.  vollmer , and k.  w. wagner . on the power of polynomial time bit - reductions . in _ proc .",
    "8th annual structure in complexity theory conference _ , 200207 .",
    "ieee computer society press , 1993 .",
    "m.  nair .",
    "on chebyshev - type inequalities for primes . , 89(2):126129 , 1982 . n.  piterman and m.  y. vardi .",
    "global model - checking of infinite - state systems . in _ proc .",
    "cav 2004 _ , lncs 3114 , 387400 .",
    "springer , 2004 ."
  ],
  "abstract_text": [
    "<S> one - counter processes ( ocps ) are pushdown processes which operate only on a unary stack alphabet </S>",
    "<S> . we study the computational complexity of model checking computation tree logic ( @xmath0 ) over ocps . </S>",
    "<S> a @xmath1 upper bound is inherited from the modal @xmath2-calculus for this problem . </S>",
    "<S> first , we analyze the periodic behaviour of @xmath0 over ocps and derive a model checking algorithm whose running time is exponential only in the number of control locations and a syntactic notion of the formula that we call leftward until depth . </S>",
    "<S> thus , model checking fixed ocps against @xmath0 formulas with a fixed leftward until depth is in @xmath3 . </S>",
    "<S> this generalizes a result of the first author , mayr , and to for the expression complexity of @xmath0 s fragment @xmath4 . </S>",
    "<S> second , we prove that already over some fixed ocp , @xmath0 model checking is @xmath1-hard . </S>",
    "<S> third , we show that there already exists a fixed @xmath0 formula for which model checking of ocps is @xmath1-hard . for the latter , </S>",
    "<S> we employ two results from complexity theory : ( i ) converting a natural number in chinese remainder presentation into binary presentation is in logspace - uniform @xmath5 and ( ii ) @xmath1 is @xmath6-serializable . </S>",
    "<S> we demonstrate that our approach can be used to answer further open questions .    </S>",
    "<S> stefan gller    markus lohrey </S>"
  ]
}