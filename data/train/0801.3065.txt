{
  "article_text": [
    "this work aims at providing a framework for reasoning about specifications of deductive systems using _ higher - order abstract syntax _  @xcite .",
    "higher - order abstract syntax is a declarative approach to encoding syntax with bindings using church s simply typed @xmath7-calculus .",
    "the main idea is to support the notions of @xmath8-equivalence and substitutions in the object syntax by operations in @xmath7-calculus , in particular @xmath8-conversion and @xmath9-reduction .",
    "there are at least two approaches to higher - order abstract syntax .",
    "the _ functional programming _ approach encodes the object syntax as a data type , where the binding constructs in the object language are mapped to functions in the functional language . in this approach , terms in the object language become values of their corresponding types in the functional language .",
    "the _ proof search _ approach encodes object syntax as expressions in a logic whose terms are simply typed , and functions that act on the object terms are defined via relations , i.e. , logic programs .",
    "there is a subtle difference between this approach and the former ; in the proof search approach , the simple types are inhabited by well - formed expressions , instead of values as in the functional approach ( i.e. , the abstraction type is inhabited by functions ) . the proof search approach is often referred to as _ @xmath7-tree syntax _",
    "@xcite , to distinguish it from the functional approach .",
    "this paper concerns the @xmath7-tree syntax approach .",
    "specifications which use @xmath7-tree syntax are often formalized using hypothetical and generic judgments in intuitionistic logic .",
    "it is enough to restrict to the fragment of first - order intuitionistic logic whose only formulas are those of hereditary harrop formulas , which we will refer to as the @xmath10 logic .",
    "consider for instance the problem of defining the data type for untyped @xmath7-terms .",
    "one first introduces the following constants : @xmath11 where the type @xmath12 denotes the syntactic category of @xmath7-terms and @xmath13 and @xmath14 encode application and abstraction , respectively .",
    "the property of being a @xmath7-term is then defined via the following theory : @xmath15 @xmath16 where @xmath17 is the universal quantifier and @xmath18 is implication .",
    "reasoning about object systems encoded in @xmath10 is reduced to reasoning about the structure of proofs in @xmath10 .",
    "mcdowell and miller formalize this kind of reasoning in the logic @xmath19",
    "@xcite , which is an extension of first - order intuitionistic logic with fixed points and natural numbers induction .",
    "this is done by encoding the sequent calculus of @xmath10 inside @xmath19 and prove properties about it .",
    "we refer to @xmath10 as object logic and @xmath19 as meta logic .",
    "mcdowell and miller considered different styles of encodings and concluded that explicit representations of hypotheses and , more importantly , eigenvariables of the object logic are required in order to capture some statements about object logic provability in the meta logic  @xcite .",
    "one typical example involves the use of hypothetical and generic reasoning as follows : suppose that the following formula is provable in @xmath10 .",
    "@xmath20 by inspection on the inference rules of @xmath10 , one observes that this is only possible if @xmath21 and @xmath22 are syntactically equal .",
    "this observation comes from the fact that the right introduction rule for universal quantifier , reading the rule bottom - up , introduces new constants , or eigenvariables .",
    "the quantified variables @xmath4 and @xmath23 will be replaced by distinct eigenvariables and hence the only matching hypothesis for @xmath24 would be @xmath25 , and therefore @xmath21 and @xmath22 has to be equal .",
    "let @xmath26 denote the provability of the formula @xmath27 in @xmath10 . then in the meta logic",
    ", we would want to be able to prove the statement : @xmath28 the question is then how we would intrepret the object logic eigenvariables in the meta logic .",
    "it is demonstrated in  @xcite that the existing quantifiers in @xmath19 can not be used to capture the behaviours of object logic eigenvariables directly .",
    "mcdowell and miller then resort to a non - logical encoding technique ( in the sense that no logical connectives are used ) which has some similar flavor to the use of debruijn indices . the use of this encoding technique , however , has a consequence that substitutions in the object logic has to be formalized explicitly .",
    "motivated by the above mentioned limitation of @xmath19 , miller and tiu later introduce a new quantifier @xmath2 to @xmath19 which allows one to move the binders from the object logic to the meta logic .",
    "a generic judgment in the object logic , for instance @xmath29 is reflected in the meta logic as @xmath30 this meta logic , called @xmath1  @xcite , allows one to perform case analyses on the provability of the object logic .",
    "tiu later extended @xmath1 with induction and co - induction rules , resulting in the logic linc  @xcite .",
    "however , some inductive properties about the object logic are not provable in linc .",
    "for example , the fact that @xmath29 implies @xmath31 ( that is , the extensional property of universal quantification ) is not provable in linc .",
    "as it is shown in @xcite , this is partly caused by the fact that @xmath32 , where @xmath4 is not free in @xmath5 , is not provable in linc or @xmath1 . in this paper",
    "we present the logic @xmath33 , which is an extension of @xmath1 with natural number induction and with the axiom schemes : @xmath34 where @xmath4 is not free in @xmath5 in the second scheme .",
    "we show that inductive properties of @xmath7-tree syntax specifications can be stated directly and in a purely logical fashion , and proved in @xmath35    [ [ relation - to - nominal - logic ] ] relation to nominal logic + + + + + + + + + + + + + + + + + + + + + + + + +    in formulating the proof system for @xmath33 , it turns out that we can simplify the presentation a lot if we adopt the idea of _ equivariant predicates _ from nominal logic  @xcite .",
    "that is , provability of a predicate is invariant under permutations of _ names_. this is technically done by introducing a countably infinite set of name constants into the logic , and change the identity rule of the logic to allow equivalence under permutations of name constants : @xmath36 { { \\gamma , b\\seqsym b ' } } { \\pi.b = \\pi'.b'}\\ ] ] where @xmath37 and @xmath38 are permutations on names .",
    "@xmath33 is in fact very close to nominal logic , when we consider only the behaviours of logical connectives .",
    "in particular , the quantifier @xmath2 in @xmath33 shares the same properties , in relation to other connectives of the logic , with the @xmath39 quantifier in nominal logic . however , there are two important differences in our approach .",
    "first , we do not attempt to redefine @xmath8-conversion and substitutions in @xmath33 in terms of permutations ( or _ swapping _ ) and the notion of _ freshness _ as in nominal logic .",
    "name swapping and freshness constraints are not part of the syntax of @xmath35 these notions are present only in the meta theory of the logic . in @xmath33 , for example , variables are always considered to have empty support , that is , @xmath40 for every permutation @xmath37 .",
    "this is because we restrict substitutions to the `` closed '' ones , in the sense that no name constants can appear in the substitutions .",
    "a restricted form of open substitutions can be recovered indirectly at the meta theory of @xmath33 .",
    "the fact that variables have empty support allows one to work with permutation free formulas and terms .",
    "so in @xmath33 , we can prove that @xmath41 , where @xmath42 and @xmath43 are names , without using explicit axioms of permutations and freshness .",
    "in nominal logic , one would prove this by using the swapping axiom @xmath44 , where @xmath45 denotes a swapping of @xmath42 and @xmath43 , and then show that @xmath46 .",
    "the latter might not be valid if @xmath4 is substituted by @xmath42 , for example .",
    "the validity of this formula in nominal logic would therefore depend on the assumption on the support of @xmath4 .",
    "the second difference between @xmath33 and nominal logic is that @xmath33 allows closed terms ( again , in the sense that no name constants appear in them ) of type name , while in nominal logic , allowing such terms would lead to an inconsistent theory in nominal logic  @xcite . as an example , the type @xmath12 in the encoding of @xmath7-terms mentioned previously can be treated as a nominal type in @xmath33 .",
    "this has an important consequence that we do not need to redefine the notion of substitutions for the encoded @xmath7-terms .",
    "for example , we can define the ( lazy ) evaluation relation on untyped @xmath7-terms as the theory : @xmath47 without having to explicitly define substitutions on terms of type @xmath12 inside @xmath35 substitutions in the object language in this case is modelled by @xmath9-reduction in the meta - language of @xmath35    [ [ outline - of - the - paper ] ] outline of the paper + + + + + + + + + + + + + + + + + + + +    section  [ sec : lgn ] introduces the logic @xmath48 , which is an extension of first order intuitionistic logic with a notion of name permutation and the @xmath2-quantifier .",
    "@xmath48 serves as the core logic for a more expressive logic , @xmath33 , which is obtained by adding rules for fixed points , equality and induction to @xmath49 section  [ sec : drv ] examines several properties of derivations , in particular , those that concern preservation of provability under several operations on sequents , e.g. , substitutions .",
    "section  [ sec : reduct ] defines the cut reduction , used in the cut - elimination proof .",
    "the cut elimination proof itself is an adaptation of the cut - elimination proof of @xmath19 by mcdowell and miller  @xcite , which makes use of the reducibility technique .",
    "section  [ sec : norm ] defines the normalizability and the reducibility relations which are crucial to the cut elimination proof in section  [ sec : cut - elim ] .",
    "finally , in section  [ sec : corr ] , we show that the proof system @xmath48 is actually equivalent to @xmath1 ( without fixed points and equality ) with non - logical rules corresponding to the axioms given in ( [ eq1 ] ) above .",
    "this paper contains the technical proofs for the results stated in @xcite ; readers are encouraged to consult @xcite for motivations and examples for @xmath6",
    "we first define the core fragment of the logic @xmath33 which does not have fixed point rules or induction .",
    "the starting point is the logic @xmath50 introduced in  @xcite .",
    "@xmath50 is an extension of a subset of church s simple theory of types in which formulas are given the type @xmath51 .",
    "the core fragment of @xmath33 , which we refer to as @xmath48 , shares the same set of connectives as @xmath50 , namely , @xmath52 , @xmath53 , @xmath54 , @xmath55 , @xmath56 , @xmath57 , @xmath58 and @xmath59 the type @xmath60 in the quantifiers is restricted to that which does not contain the type @xmath61 hence the logic is essentially first - order .",
    "we abbreviate @xmath62 as @xmath63    the sequents of @xmath1 are expressions of the form @xmath64 where @xmath65 is a signature , i.e. , a set of eigenvariables scoped over the sequent and @xmath66 is a local signature , i.e. , list of variables locally scoped over @xmath67 .",
    "the introduction rules for @xmath2 , reading the rules bottom - up , introduce new local variables to the local signatures , just as the right introduction rule of @xmath68 introduces new eigenvariables to the signature .",
    "the expression @xmath69 is called a local judgment , and is identified up to renaming of variables in @xmath66 .",
    "this enforces a limited notion of equivariance : for example @xmath70 is provable , since both local judgments are equivalent up to renaming of local signatures .",
    "however , the judgments @xmath71 and @xmath72 are considered distinct judgments , and so are @xmath73 and @xmath74 .",
    "these restrictions are relaxed in @xmath49    the sequent presentation of @xmath48 can be simplified , that is , without using the local signatures , if we employ the equivariance principle . for this purpose , we introduce a distinguished set of base types , called _ nominal types _ , which is denoted with @xmath75 .",
    "nominal types are ranged over by @xmath76 .",
    "we restrict the @xmath2 quantifier to nominal types . for each nominal type @xmath77 , we assume an infinite number of constants of that type .",
    "these constants are called _",
    "nominal constants_. we denote the family of nominal constants by @xmath78 the role of the nominal constants is to enforce the notion of equivariance : provability of formulas is invariant under permutations of nominal constans . depending on the application , we might also assume a set of non - nominal constants , which is denoted by @xmath79    we assume the usual notion of capture - avoiding substitutions .",
    "substitutions are ranged over by @xmath80 and @xmath81 .",
    "application of substitutions is written in a postfix notation , e.g. , @xmath82 is an application of @xmath80 to the term @xmath22 . given two substitutions @xmath80 and @xmath83 , we denote their composition by @xmath84 which is defined as @xmath85 a _ signature _ is a set of variables .",
    "a substitution @xmath80 respects a given signature @xmath65 if there exists a set of typed variables @xmath86 such that for every @xmath87 in the domain of @xmath80 , it holds that @xmath88 we denote by @xmath89 the minimal set of variables satisfying the above condition .",
    "we assume that variables , free or bound , are of a different syntactic category from constants .",
    "a permutation on @xmath90 is a bijection from @xmath90 to @xmath90 .",
    "the permutations on @xmath90 are ranged over by @xmath37 .",
    "application of a permutation @xmath37 to a nominal constant @xmath42 is denoted with @xmath91 .",
    "we shall be concerned only with permutations which respect types , i.e. , for every @xmath92 , @xmath93 further , we shall also restrict to permutations which are finite , that is , the set @xmath94 is finite .",
    "application of a permutation to an arbitrary term ( or formula ) , written @xmath95 , is defined as follows : @xmath96 a permutation involving only two nominal constants is called _ swapping_.",
    "we use @xmath45 , where @xmath42 and @xmath43 are constants of the same type , to denote the swapping @xmath97    the _ support _ of a term ( or formula ) @xmath22 , written @xmath98 , is the set of nominal constants appearing in it .",
    "it is clear from the above definition that if @xmath98 is empty , then @xmath99 for all @xmath37 .",
    "the definition of @xmath65-substitution implies that for every @xmath80 and for every @xmath100 , @xmath101 has empty support .",
    "therefore @xmath65-substitutions and permutations commute , that is , @xmath102    a sequent in @xmath33 is an expression of the form @xmath103 where @xmath65 is a signature .",
    "the free variables of @xmath104 and @xmath105 are among the variables in @xmath65 .",
    "the inference rules for the core fragment of @xmath33 , i.e. , the logic @xmath48 , is given in figure  [ fig : lg ] . in the rules , the typing judgment @xmath106 denotes the typability of @xmath107 , given the typing context @xmath108 in church s simple type system .    in the @xmath109 and @xmath110 rules",
    ", @xmath42 denotes a nominal constant . in the @xmath111 and @xmath112 rules ,",
    "we use _ raising _ @xcite to encode the dependency of the quantified variable on the support of @xmath5 , since we do not allow @xmath65-substitutions to mention any nominal constants . in the rules ,",
    "the variable @xmath113 has its type raised in the following way : suppose @xmath114 is the list @xmath115 and the quantified variable @xmath4 is of type @xmath60 .",
    "then the variable @xmath113 is of type : @xmath116 this raising technique is similar to that of @xmath117 and is used to encode explicitly the minimal support of the quantified variable .",
    "its use prevents one from mixing the scopes of @xmath68 ( dually , @xmath118 ) and @xmath2 .",
    "that is , it prevents the formula @xmath119 , and its dual , to be proved .",
    "looking at the introduction rules for @xmath68 and @xmath118 , one might notice the asymmetry between the left and the right introduction rules .",
    "the left rule for @xmath68 allows instantiations with terms containing any nominal constants while the raised variable in the right introduction rule of @xmath68 takes into account only those which are in the support of the quantified formula .",
    "however , we will see that we can extend the dependency of the raised variable to an arbitrary number of fresh nominal constants not in the support without affecting the provability of the sequent ( see lemma  [ lm : supp1 ] and lemma  [ lm : supp2 ] ) .",
    "@xmath120 { { \\sigma ; \\gamma , b \\seqsym b ' } } { \\pi.b = \\pi'.b ' } \\qquad \\infer[{mc } ] { { \\sigma ; \\delta_1,\\ldots , \\delta_n,\\gamma \\seqsym c } } { { \\sigma ; \\delta_1 \\seqsym b_1 } & \\cdots & { \\sigma ; \\delta_n \\seqsym b_n } & { \\sigma ; b_1,\\dots , b_n,\\gamma \\seqsym c } } \\qquad \\infer[{\\hbox{\\sl c}{\\cal l } } ] { { \\sigma ; \\gamma , b \\seqsym c } } { { \\sigma ; \\gamma , b , b \\seqsym c}}\\ ] ] @xmath121 { { \\sigma ; \\gamma , \\bot \\seqsym c } } { } \\qquad \\infer[{\\top{\\cal r } } ] { { \\sigma ; \\gamma \\seqsym \\top } } { } \\ ] ] @xmath122 { { \\sigma ; \\gamma , b_1 \\land b_2 \\seqsym c } } { { \\sigma ; \\gamma , b_i \\seqsym c } } \\qquad \\infer[{\\land{\\cal r } } ] { { \\sigma ; \\gamma \\seqsym b \\land c } }   { { \\sigma ; \\gamma \\seqsym b } & { \\sigma ; \\gamma \\seqsym c}}\\ ] ] @xmath123 { { \\sigma ; \\gamma , b \\lor d \\seqsym c } } { { \\sigma ; \\gamma , b \\seqsym c }   & { \\sigma ; \\gamma , d \\seqsym c } } \\qquad \\infer[{\\lor{\\cal r } } , i \\in \\{1,2\\ } ] { { \\sigma ; \\gamma \\seqsym b_1 \\lor b_2 } } { { \\sigma ; \\gamma \\seqsym b_i}}\\ ] ] @xmath124 { { \\sigma ; \\gamma , b { \\supset}d \\seqsym c } } { { \\sigma ; \\gamma \\seqsym b } & { \\sigma ; \\gamma , d \\seqsym c } } \\qquad \\infer[{{\\supset}{\\cal r } } ] { { \\sigma ; \\gamma \\seqsym b { \\supset}c } } { { \\sigma ; \\gamma , b \\seqsym c}}\\ ] ] @xmath125 { { \\sigma ; \\gamma , \\forall_\\tau x. b \\seqsym c } } { { \\sigma , { \\cal k } , { \\cal",
    "c}_{\\cal n } \\vdash",
    "t : \\tau } & { \\sigma ; \\gamma , b[t / x ] \\seqsym c } } \\qquad \\infer[{\\forall{\\cal r } } , h \\not \\in \\sigma , supp(b ) = \\{\\vec c\\ } ] { { \\sigma ; \\gamma \\seqsym \\forall x.b } } { { \\sigma , h ; \\gamma \\seqsym b[h\\ , \\vec c / x ] } } \\ ] ] @xmath126 { { \\sigma ; \\gamma , \\nabla x.b \\seqsym c } } { { \\sigma ; \\gamma , b[a / x ] \\seqsym c } } \\qquad \\infer[{\\nabla{\\cal r } } , a \\not \\in supp(b ) ] { { \\sigma ; \\gamma \\seqsym \\nabla x.b } } { { \\sigma ; \\gamma \\seqsym b[a / x]}}\\ ] ] @xmath127 { { \\sigma ; \\gamma , \\exists x.b \\seqsym c } } { { \\sigma , h ; \\gamma , b[h\\,\\vec c / x ] \\seqsym c } } \\qquad \\infer[{\\exists{\\cal r } } ] { { \\sigma ; \\gamma \\seqsym \\exists_\\tau x.b } } { { \\sigma,{\\cal k},{\\cal c}_{\\cal",
    "n } \\vdash t : \\tau } & { \\sigma ; \\gamma \\seqsym b[t / x]}}\\ ] ]    we now extend the logic @xmath48 with a proof theoretic notion of equality and fixed points , following on works by hallnas and schroeder - heister  @xcite , girard  @xcite and mcdowell and miller  @xcite .",
    "the equality rules are as follows : @xmath128 { { \\sigma ; \\gamma , s = t \\seqsym c } } { \\{{\\sigma\\theta ; \\gamma\\theta \\seqsym c\\theta } ~ \\mid ~ ( \\lambda \\vec c.t)\\theta = _ { \\beta\\eta } ( \\lambda \\vec c.s)\\theta   \\ } } \\qquad \\infer[{{\\rm eq}{\\cal r } } ] { { \\sigma ; \\gamma \\seqsym t = t } } { } \\ ] ] where @xmath129 in the @xmath130 rule . in the @xmath130 rule ,",
    "the substitution @xmath80 is a _ unifier _ of @xmath131 and @xmath132 .",
    "we specify the premise of the rule as a set to mean that every element of the set is a premise .",
    "since the terms @xmath21 and @xmath22 can be arbitrary higher - order terms , in general the set of their unifiers can be infinite . however , in some restricted cases , e.g. , when @xmath131 and @xmath132 are _ higher - order pattern _",
    "terms  @xcite , if both terms are unifiable , then there exists a most general unifier .",
    "the applications we are considering are those which satisfy the higher - order pattern restrictions .    to each atomic formula , we associate a fixed point equation , or a _ definition clause _ , following the terminology of @xmath1 .",
    "a definition clause is written @xmath133 where the free variables of @xmath5 are among @xmath134 the predicate @xmath135 is called the _ head _ of the definition clause , and @xmath5 is called the _",
    "body_. a _ definition _ is a set of definition clauses .",
    "we often omit the outer quantifiers when referring to a definition clause .",
    "the introduction rules for defined atoms are as follows : @xmath136 { { \\sigma ; \\gamma , p\\ , \\vec t \\seqsym c } } { { \\sigma ; \\gamma , b[\\vec t/\\vec x ] \\seqsym c } } \\qquad \\infer[{\\hbox{\\sl def\\/}{\\cal r } } , p\\,\\vec x { \\stackrel{{\\scriptstyle\\triangle}}{=}}b ] { { \\sigma ; \\gamma \\seqsym p\\ , \\vec t } } { { \\sigma ; \\gamma \\seqsym b[\\vec t/\\vec x]}}\\ ] ]    in order to prove the cut - elimination theorem and the consistency of @xmath33 , we allow only definition clauses which satisfy an _ equivariance preserving _ condition and a certain positivity condition , so as to guarantee the existence of fixed points .",
    "[ def : level ] we associate with each predicate symbol @xmath137 a natural number , the _ level _ of @xmath137 . given a formula @xmath5 , its _ level _",
    "@xmath138 is defined as follows :    1 .",
    "@xmath139 2 .",
    "@xmath140 3 .",
    "@xmath141 4 .",
    "@xmath142 5 .",
    "@xmath143 .",
    "a definition clause @xmath144 is stratified if @xmath145 and @xmath5 has no free occurrences of nominal constants .",
    "we consider only definition clauses which are stratified .",
    "an example that violates the first restriction in definition  [ def : level ] is the definition @xmath146 in  @xcite , schroeder - heister shows that admitting this definition in a logic with contraction leads to inconsistency . to see why we need the second restriction on name constants ,",
    "consider the definition @xmath147 where @xmath42 is a nominal constant .",
    "let @xmath43 be a nominal constant different from @xmath42 . using this definition",
    ", we would be able to derive @xmath52 : @xmath148 { { \\seqsym \\bot } } {     \\infer[{\\hbox{\\sl def\\/}{\\cal r } } ]     { { \\seqsym q\\,a } }     {        \\infer[{{\\rm eq}{\\cal r } } ]        { { \\seqsym a = a } }        { }     } &     \\infer[cut ]     { { q\\,a\\seqsym \\bot } }     {       \\infer[id_\\pi ]       { { q\\,a\\seqsym q\\,b } }       { }     &       \\infer[{\\hbox{\\sl def}{\\cal l } } ]       { { q\\,b\\seqsym \\bot } }       {         \\infer[{{\\rm eq}{\\cal l } } ]         { { b = a\\seqsym \\bot } }         { }       }     } } \\ ] ]    in examples and applications , we often express definition clauses with patterns in the heads .",
    "let us consider , for example , a definition clause for lists .",
    "we first introduce a type @xmath149 to denote lists of elements of type @xmath8 , and the constants @xmath150 which denote the empty list and a constructor to build a list from an element of type @xmath8 and another list .",
    "the latter will be written in the infix notation .",
    "the definition clause for _ lists _ is as follows .",
    "@xmath151 using patterns , the above definition of lists can be rewritten as @xmath152    we shall often work directly with this patterned notation for definition clauses . for this purpose ,",
    "we introduce the notion of _ patterned definitions_. a _ patterned definition clause _ is written @xmath153 where the free variables of @xmath154 and @xmath5 are among @xmath134 the stratification of definitions in definition  [ def : level ] applies to patterned definitions as well . since the patterned definition clauses are not allowed to have free occurrences of nominal constants , in matching the heads of the clauses with an atomic formula in a sequent , we need to raise the variables of the clauses to account for nominal constants that are in the support of the introduced formula .",
    "given a patterned definition clause @xmath155 its raised clause with respect to the list of constants @xmath156 is @xmath157   { \\stackrel{{\\scriptstyle\\triangle}}{=}}b[h_1~\\vec c / x_1 , \\ldots , h_n~\\vec c / x_n].\\ ] ] the introduction rules for patterned definitions are @xmath158 { { \\sigma ; a , \\gamma \\seqsym c } } { \\{{\\sigma\\theta ; b\\theta , \\gamma\\theta \\seqsym c\\theta}\\}_\\theta } \\qquad \\infer[{\\hbox{\\sl def\\/}{\\cal r } } ] { { \\sigma ; \\gamma \\seqsym a } } { { \\sigma ;",
    "\\gamma \\seqsym b\\theta}}\\ ] ] in the @xmath159 rule , @xmath5 is the body of the raised patterned clause @xmath160 and @xmath161 where @xmath162 is the support of @xmath163 in the @xmath164 rule , we match @xmath165 with the head of the clause , i.e. , @xmath166 these patterned rules can be derived using the non - patterned definition rules and the equality rules , as shown in  @xcite ,    [ [ natural - number - induction . ] ] natural number induction .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + +    we introduce a type @xmath167 to denote natural numbers , with the usual constants @xmath168 ( zero ) and @xmath169 ( the successor function ) , and a special predicate @xmath170 the rules for natural number induction are the same as those in @xmath19  @xcite , which are the introduction rules for the predicate @xmath171 . @xmath172 { { \\sigma ; \\gamma , nat\\,i \\seqsym c } } { { \\seqsym d\\,z } & { j ; d\\,j",
    "\\seqsym d\\,(s\\,j ) }   & { \\sigma ; \\gamma , d\\,i \\seqsym c}}\\ ] ]    @xmath173 { { \\sigma ; \\gamma \\seqsym nat~z } } { } \\qquad \\infer[nat{\\cal r } ] { { \\sigma ; \\gamma \\seqsym nat\\,(s\\,i ) } } { { \\sigma ; \\gamma \\seqsym nat\\,i}}\\ ] ]    the logic @xmath48 extended with the equality , definitions and induction rules is referred to as @xmath35",
    "in this section we examine several properties of the @xmath2-quantifier and derivations in @xmath33 that are useful in the cut elimination proof .",
    "these properties concern the transformation of derivations , in particular , they state that provability is preserved under @xmath65-substitutions , permutations and a restricted form of name substitutions .",
    "we first look at the properties of the @xmath2 quantifier in relation to other connectives .",
    "the proof of the following proposition is straightforward by inspection on the rules of @xmath49    the following formulas are provable in @xmath48 :    1 .",
    "@xmath174 2 .",
    "@xmath175 3 .",
    "@xmath176 4 .",
    "@xmath177 , provided that @xmath4 is not free in @xmath5 .",
    "@xmath178 6 .",
    "@xmath179 7 .",
    "@xmath180    the formulas ( 1 )  ( 3 ) are provable in @xmath50 .",
    "the proposition is true also in nominal logic with @xmath2 replaced by @xmath181    [ def : ht ] given a derivation @xmath182 with premise derivations @xmath183 where @xmath184 is some index set , the measure @xmath185 , the _ height _ of @xmath182 , is defined as the least upper bound of @xmath186    we now define some transformations of derivations : weakening of hypotheses , substitutions on derivations , permutations and restricted name substitutions . in the following definitions we omit the signatures in the sequents if it is clear from context which signatures we refer to .",
    "we denote with @xmath187 the identity function on @xmath90 .",
    "[ def : weak ] _ weakening of hypotheses .",
    "_ let @xmath182 be a derivation of @xmath188 let @xmath189 be a multiset of formulas whose free variables are among @xmath65 .",
    "we define the derivation @xmath190 of @xmath191 as follows :    1 .",
    "if @xmath182 ends with @xmath130 @xmath128 { { \\sigma ; s = t , \\gamma ' \\seqsym c } } { \\left\\ { \\raisebox{-1.5ex}{\\deduce{{\\sigma\\theta ; \\gamma'\\theta \\seqsym c\\theta}}{\\pi_\\theta } } \\right\\}_\\theta } \\ ] ] then @xmath192 is @xmath128 { { \\sigma ; s = t , \\gamma ' , \\delta \\seqsym c } } { \\left\\ { \\raisebox{-1.5ex}{\\deduce{{\\sigma\\theta ; \\gamma'\\theta ,",
    "\\delta\\theta \\seqsym c\\theta } } { w(\\delta\\theta,\\pi_\\theta ) } } \\right\\}_\\theta } \\ ] ] 2 .   if @xmath182 ends with @xmath193 @xmath194 { { nat~i , \\gamma'\\seqsym c } } { \\deduce{{\\seqsym d~z } } { \\pi_1 } & \\deduce{{d~i\\seqsym d~(s~i)}}{\\pi_2 } & \\deduce{{d~i , \\gamma'\\seqsym c}}{\\pi_3}}\\ ] ] then @xmath192 is @xmath194 { { nat~i , \\gamma ' , \\delta\\seqsym c } } { \\deduce{{\\seqsym d~z } } { \\pi_1 } & \\deduce{{d~i\\seqsym d~(s~i)}}{\\pi_2 } & \\deduce{{d~i , \\gamma ' , \\delta\\seqsym c}}{w(\\delta,\\pi_3)}}\\ ] ] 3 .",
    "if @xmath182 ends with the @xmath195 rule @xmath196 { { \\delta_1,\\ldots,\\delta_n , \\gamma'\\seqsym c } } { \\deduce{{\\delta_1\\seqsym b_1}}{\\pi_1 } & \\ldots & \\deduce{{\\delta_n\\seqsym b_n}}{\\pi_n } &   \\deduce{{b_1,\\dots , b_n,\\gamma'\\seqsym c}}{\\pi ' } } \\ ] ] then @xmath190 is @xmath196 { { \\delta_1,\\ldots,\\delta_n , \\gamma ' , \\delta\\seqsym c } } { \\deduce{{\\delta_1\\seqsym b_1}}{\\pi_1 } & \\ldots & \\deduce{{\\delta_n\\seqsym b_n}}{\\pi_n } &   \\deduce{{b_1,\\dots , b_n,\\gamma ' , \\delta\\seqsym c}}{w(\\delta,\\pi ' ) } } \\ ] ] 4 .",
    "if @xmath182 ends with any other rule and has premise derivations @xmath197 then @xmath190 ends with the same rule with premise derivations @xmath198 @xmath199 @xmath200    [ def : subst ] _ substitutions on derivations . _",
    "if @xmath182 is a derivation of @xmath201 and @xmath80 is a @xmath65-substitution , then we define the derivation @xmath202 of @xmath203 as follows :    1 .",
    "suppose @xmath182 ends with @xmath130 : @xmath128 { { \\sigma ; s = t , \\gamma ' \\seqsym c } } { \\left\\ { \\raisebox{-1.5ex}{\\deduce{{\\sigma\\rho ; \\gamma'\\rho \\seqsym c\\rho}}{\\pi_\\rho } } \\right\\}_\\rho } \\ ] ] where each @xmath81 is a unifier of @xmath131 and @xmath132 .",
    "observe that if @xmath204 is a unifier of @xmath205 and @xmath206 , then @xmath207 is a unifier of @xmath131 and @xmath132 .",
    "thus @xmath202 is the derivation : @xmath128 { { \\sigma ; s\\theta = t\\theta , \\delta\\theta \\seqsym c\\theta } } { \\left\\ {   \\raisebox{-1.5ex}{\\deduce{{\\sigma\\theta\\rho ' ; \\delta\\theta\\rho \\seqsym c\\theta\\rho } } { \\pi_{\\theta\\circ \\rho ' } } } \\right\\}_{\\rho ' } } \\ ] ] 2 .",
    "suppose @xmath182 ends with @xmath112 : @xmath208 { { \\sigma ; \\gamma \\seqsym \\forall x.b } } { \\deduce{{\\sigma ; \\gamma \\seqsym b[h\\,\\vec c / x]}}{\\pi_1 } } \\enspace , \\ ] ] where @xmath209 let @xmath210 be the support of @xmath211 , which might be smaller than @xmath212 let @xmath81 be the substitution @xmath213 $ ] where @xmath214 is a new variable not already in @xmath65 and not among the free variables in @xmath215 we can assume without loss of generality that @xmath4 is not free in @xmath80 , hence @xmath216)\\rho ) \\theta = ( b[h'\\,\\vec d / x])\\theta = ( b\\theta)[h'\\,\\vec d / x].$ ] then @xmath202 is @xmath208 { { \\sigma\\theta ; \\gamma\\theta \\seqsym ( \\forall x.b)\\theta } } { \\deduce{{\\sigma\\theta , h ' ; \\gamma\\theta \\seqsym ( b\\theta)[h'\\,\\vec d / x]}}{\\pi_1(\\rho \\circ \\theta)}}\\ ] ] 3 .",
    "suppose @xmath182 ends with @xmath111 : this case is dual to the previous one .",
    "4 .   if @xmath182 ends with any other rule and has premise derivations @xmath197 , then @xmath202 ends with the same rule and has premise derivations @xmath217,@xmath199 @xmath218    [ def : perm ] let @xmath182 be a proof of @xmath219 and let @xmath220 be a list of permutations .",
    "we define a derivation @xmath221 of @xmath222 as follows :    1 .",
    "suppose that @xmath182 ends with @xmath223 @xmath120 { { \\sigma ; b_1 , \\ldots , b_n \\seqsym b_0 } } { \\pi.b_j = \\pi'.b_0 } \\enspace .\\ ] ] obverse that @xmath224 hence @xmath221 ends with the same rule .",
    "suppose @xmath182 ends with @xmath195 : @xmath196 { { b_1,\\ldots , b_n\\seqsym b_0 } } { \\deduce{{\\delta_1\\seqsym d_1}}{\\pi_1 } & \\ldots & \\deduce{{\\delta_m\\seqsym d_m}}{\\pi_m } & \\deduce{{d_1,\\ldots , d_m,\\delta_{m+1}\\seqsym b_0}}{\\pi ' } } \\ ] ] where @xmath225 are partitions of @xmath226 suppose that for each @xmath227 , @xmath228 for some index @xmath229 let @xmath230 , for @xmath231 , be the permutations @xmath232 let @xmath233 be the permutations @xmath234 + we denote with @xmath235 the list @xmath236 then @xmath237 is the derivation @xmath196 { { \\pi_1.b_1,\\ldots,\\pi_n.b_n\\seqsym \\pi_0.b_0 } } { \\deduce{{\\delta_1'\\seqsym d_1}}{\\langle \\vec \\pi(1)\\rangle.\\pi_1 } & \\ldots & \\deduce{{\\delta_m'\\seqsym d_m}}{\\langle \\vec \\pi(m)\\rangle.\\pi_m } & \\deduce{{d_1,\\ldots , d_m,\\delta_{m+1}'\\seqsym \\pi_0.b_0}}{\\langle \\vec \\pi(m+1)\\rangle.\\pi ' } } \\ ] ] 3 .",
    "suppose @xmath182 ends with @xmath110 : @xmath238 { { \\sigma ; b_1,\\ldots , b_n \\seqsym \\nabla_\\iota x.b } } { \\deduce{{\\sigma ; b_1,\\ldots , b_n \\seqsym b[a / x]}}{\\pi_1}}\\ ] ] where @xmath239 let @xmath240 be a nominal constant such that @xmath241 and @xmath242 .",
    "such a constant exists since @xmath243 is finite and @xmath244 is a finite permutation . thus @xmath245",
    "= \\pi_0.b_0[d / x].$ ] then @xmath221 is the derivation : @xmath238 { { \\sigma ; \\pi_1.b_1 , \\ldots , \\pi_n.b_n \\seqsym \\pi_0.(\\nabla x.b ) } } { \\deduce{{\\sigma ; \\pi_1.b_1 , \\ldots , \\pi_n.b_n \\seqsym \\pi_0.b[d / x ] } } { \\langle\\pi_0.(a~d ) , \\dots,\\pi_n\\rangle.\\pi_1}}\\ ] ] 4 .",
    "suppose @xmath182 ends with @xmath109 : this case is analogous to previous one .",
    "5 .   suppose @xmath182 ends with @xmath246 : @xmath247 { { b_1,\\ldots , b_j,\\ldots , b_n\\seqsym b_0 } } { \\deduce { { b_1,\\ldots , b_j , b_j\\ldots , b_n\\seqsym b_0 } } { \\pi ' } } \\ ] ] then @xmath221 is @xmath247 { { \\pi_1.b_1,\\ldots,\\pi_{j}.b_j,\\ldots,\\pi_n.b_n\\seqsym \\pi_0.b_0 } } { \\deduce { { \\pi_1.b_1,\\ldots,\\pi_{j}.b_j,\\pi_j.b_j\\ldots,\\pi_n.b_n\\seqsym \\pi_0.b_0 } } { \\langle \\pi_1,\\ldots,\\pi_j,\\pi_j,\\ldots,\\pi_n\\rangle.\\pi ' } } \\ ] ] 6 .",
    "if @xmath182 ends with any other rule and has premise derivations @xmath248 , then @xmath237 ends with the same rule and has premise derivations @xmath249 @xmath199 @xmath250    [ def : res ] let @xmath182 be a proof of @xmath251 and let @xmath252 be a list of nominal constants such that @xmath253 we define a derivation @xmath254 of @xmath255 , \\ldots , b_n[a_n / x ] \\seqsym b_0[a_0/x]},$ ] as follows :    1 .",
    "suppose @xmath182 is @xmath120 { { \\sigma , x ; b_1,\\ldots , b_n \\seqsym b_0 } } { \\pi.b_j = \\pi'.b_0 } \\enspace .\\ ] ] let @xmath240 be a nominal constant which is not in the support of @xmath256 and @xmath257 , and @xmath258 and @xmath259 .",
    "then @xmath260 is @xmath120 { { \\sigma ; b_1[a_1/x ] , \\ldots , b_n[a_n / x ] \\seqsym b_0[a_0/x ] } } { \\pi.(a_j~d).b_1[a_1/x ] = \\pi'.(a_0~d).b_0[a_0/x]}\\ ] ] 2 .",
    "suppose @xmath182 ends with @xmath195 : @xmath196 { { \\sigma , x ; b_1,\\ldots , b_n \\seqsym b_0 } } { \\deduce{{\\sigma , x ; \\delta_1 \\seqsym d_1}}{\\pi_1 } & \\ldots & \\deduce{{\\sigma , x ; \\delta_m \\seqsym d_m}}{\\pi_m } & \\deduce{{\\sigma , x ; d_1,\\ldots , d_m,\\delta_{m+1 } \\seqsym b_0}}{\\pi ' } } \\ ] ] where @xmath225 is a partition of @xmath226 suppose that for each @xmath227 , @xmath228 for some index @xmath229 let @xmath261 be a list of nominal constants such that @xmath262 let @xmath263 , for @xmath231 be the list @xmath264 and let @xmath265 be the list @xmath266 let @xmath235 be the list @xmath267,\\ldots , b_{ik_i}[a_{ik_i}/x]\\ ] ] and let @xmath104 be the list @xmath268,\\ldots , d_{m}[d_m / x ] , \\delta_{m+1}'.\\ ] ] then @xmath269 is the derivation @xmath196 { { \\sigma ; b_1[a_1/x],\\ldots , b_n[a_n / x ] \\seqsym b_0[a_0/x ] } } { \\deduce{{\\sigma ; \\delta_1 ' \\seqsym d_1[d_1/x]}}{r(x , f(1),\\pi_1 ) } & \\ldots & \\deduce{{\\sigma ; \\delta_m ' \\seqsym d_m[a_m / x]}}{r(x , f(m),\\pi_m ) } & \\deduce{{\\sigma ; \\gamma \\seqsym b_0[a_0/x]}}{r(x , f(m+1),\\pi ' ) } } \\ ] ] 3 .",
    "suppose @xmath182 is @xmath238 { { \\sigma , x ; b_1 , \\ldots , b_n \\seqsym \\nabla y.b } } { \\deduce{{\\sigma , x ; b_1,\\ldots , b_n \\seqsym b[c / y]}}{\\pi_1 } } \\enspace .\\ ] ] if @xmath270 then @xmath269 is @xmath238 { { \\sigma , x ; b_1 , \\ldots , b_n \\seqsym \\nabla y.b } } { \\deduce{{\\sigma , x ; b_1,\\ldots , b_n \\seqsym b[c / y]}}{r(x,\\vec a , \\pi_1 ) } } \\enspace .\\ ] ] if @xmath271 , then we swap @xmath272 with a fresh constant .",
    "let @xmath240 be a nominal constant not in the support of @xmath273 $ ] .",
    "we apply the swapping @xmath274 to the conclusion of the end sequent of @xmath275 according to the construction in definition  [ def : perm ] to get a proof @xmath276 of @xmath277}.$ ] the derivation @xmath260 is constructed as follows : @xmath238 { { \\sigma ; b_1[a_1/x],\\ldots , b_n[a_n / x ] \\seqsym \\nabla y.b[a_0/x ] } } { \\deduce{{\\sigma ; b_1[a_1/x],\\ldots , b_n[a_n / x ] \\seqsym b[a_0/x , d / y]}}{r(x,\\vec a,\\pi_2)}}\\ ] ] 4 .",
    "if @xmath182 ends with @xmath109 apply the same construction as in the previous case .",
    "suppose @xmath182 ends with @xmath112 @xmath208 { { \\sigma , x ; b_1,\\ldots , b_n \\seqsym \\forall y.b } } { \\deduce{{\\sigma , x , h ; b_1,\\ldots , b_n \\seqsym b[h\\,\\vec c / y]}}{\\pi_1 } } \\enspace .\\ ] ] let @xmath278 $ ] where @xmath214 is a variable not in @xmath279 apply the construction in definition  [ def : subst ] to get the proof @xmath202 of @xmath280}\\ ] ] then @xmath269 is @xmath208 { { \\sigma ; b_1[a_1/x],\\ldots , b_n[a_n / x ] \\seqsym \\forall y.b[a_0/x ] } } { \\deduce{{\\sigma , h ' ; b_1[a_1/x],\\ldots , b_n[a_n / x ] \\seqsym b[a_0/x , ( h'\\,\\vec c a_0)/y]}}{r(x,\\vec a , \\pi\\theta ) } } \\enspace .\\ ] ] 6 .",
    "if @xmath182 ends with @xmath111 , apply the same construction as in the previous case .",
    "suppose @xmath182 ends with @xmath281 : @xmath282 { { \\sigma , x ; b_1,\\ldots , b_n \\seqsym \\exists y.b } } { \\deduce{{\\sigma , x ; b_1,\\ldots , b_n \\seqsym b[t / y]}}{\\pi_1 } } \\enspace .\\ ] ] if @xmath283)$ ] then @xmath269 is @xmath282 { { \\sigma ; b_1[a_1/x ] , \\ldots , b_n[a_n / x ] \\seqsym \\exists y.b[a_0/x ] } } { \\deduce{{\\sigma ; b_1[a_1/x ] , \\ldots , b_n[a_n / x ] \\seqsym b[a_0/x , t / y]}}{r(x,\\vec a,\\pi_1 ) } } \\enspace .\\ ] ] if @xmath284 $ ] , we exchange it with a fresh constant . let @xmath285 be a nominal constant distinct from @xmath286 and not in the support of @xmath287.$ ] then @xmath288)[a_0/x ] = b[(a_0~d).t / y , a_0/x].$ ] we first apply the construction in definition  [ def : perm ] to @xmath275 to get a derivation @xmath276 of @xmath289}.$ ] the derivation @xmath269 is thus @xmath282 { { \\sigma ; b_1[a_1/x],\\ldots , b[a_n / x ] \\seqsym \\exists y.b[a_0/x ] } } { \\deduce{{\\sigma ; b_1[a_1/x ] , \\ldots , b_n[a_n / x ] \\seqsym b[(a_0~d).t / y , a_0/x]}}{r(x,\\vec a,\\pi_2 ) } } \\enspace .\\ ] ] 8 .",
    "suppose @xmath182 ends with @xmath130 : @xmath128 { { \\sigma , x ; s = t , b_2 , \\ldots , b_n \\seqsym b_0 } } { \\left\\ { \\raisebox{-1.5ex } { \\deduce{{(\\sigma , x)\\theta ; b_2\\theta,\\ldots , b_n\\theta \\seqsym b_0\\theta}}{\\pi_\\theta } } \\right\\}_\\theta } \\ ] ] where each @xmath80 is a unifier of @xmath290 and @xmath291 we need to show that for each unifier of @xmath292 ,",
    "\\lambda a_1\\lambda \\vec c.t[a_1/x])$ ] there is a corresponding unifier for @xmath131 and @xmath293 we can assume without loss of generality that @xmath4 is not in the domain of @xmath81 .",
    "+ we first show the case where @xmath4 is not free in @xmath81 .",
    "it is clear that in this case @xmath81 is a unifier of @xmath131 and @xmath132 .",
    "therefore we apply the procedure recursively to the premise derivation @xmath294 , to get the derivation @xmath295 of @xmath296)\\rho , \\ldots , ( b_n[a_n / x])\\rho \\seqsym ( b_0[a_0/x])\\rho}.\\ ] ] in the other case , where @xmath4 is free in the range of @xmath81 , we show that it can be reduced to the previous case .",
    "first we define a substitution @xmath204 to be the substitution @xmath81 where @xmath4 is replaced by a new variable @xmath297 which is not free in @xmath81 .",
    "clearly @xmath204 is also a unifier of @xmath298 $ ] and @xmath299.$ ] moreover , it is more general than @xmath81 , since @xmath300 \\circ \\rho'.$ ] therefore we can apply the construction in the previous case to get a derivation @xmath301 and apply the substitution @xmath302 $ ] to to this derivation , using the procedure in definition  [ def : subst ] , to get a derivation of @xmath296)\\rho , \\ldots , ( b_n[a_n / x])\\rho \\seqsym ( b_0[a_0/x])\\rho.}\\ ] ] the derivation @xmath260 is then constructed as follows @xmath128 { { \\sigma ; s[a_1/x ] = t[a_1/x ] , \\ldots , b_n[a_n / x ] \\seqsym b_0[a_0/x ] } } { \\left\\ { \\raisebox{-1.5ex } { \\deduce{{\\sigma\\rho ; ( b_2[a_2/x])\\rho , \\ldots , ( b_n[a_n / x])\\rho \\seqsym ( b_0[a_0/x])\\rho } }    { \\pi_\\rho ' } } \\right\\}_{\\rho } } \\ ] ] where each @xmath303 is constructed as explained above .",
    "if @xmath182 ends with @xmath246 : @xmath247 { { b_1,\\ldots , b_j , \\ldots , b_n\\seqsym b_0 } } { \\deduce { { b_1,\\ldots , b_j , b_j , \\ldots , b_n\\seqsym b_0 } } { \\pi ' } } \\ ] ] then @xmath304 is @xmath247 { { b_1[a_1/x],\\ldots , b_j[a_j / x ] , \\ldots , b_n[a_n / x]\\seqsym b_0[a_0/x ] } } { \\deduce { { b_1[a_1/x],\\ldots , b_j[a_j / x ] , b_j[a_j / x ] , \\ldots , b_n[a_n / x]\\seqsym b_0[a_0/x ] } } { r(x , ( a_0,\\dots , a_j , a_j,\\dots , a_n ) , \\pi ' ) } } \\ ] ] 10 . if @xmath182 ends with any other rule and has premise derivations @xmath275,@xmath305 , @xmath306 , then @xmath260 ends with the same rule and has premise derivations @xmath307 , @xmath305 , @xmath308    [ lm : weak drv ] for any derivation @xmath182 of @xmath201 and any multiset of @xmath65-formulas @xmath189 , @xmath190 is a derivation of @xmath309 and @xmath310    [ lm : subst drv ] for any derivation @xmath182 of @xmath201 and any @xmath65-substitution @xmath80 , @xmath202 is a derivation of @xmath203 and @xmath311    [ lm : perm drv ] for any derivation @xmath182 of @xmath312 and permutations @xmath220 , @xmath237 is a derivation of @xmath313 and @xmath314    [ lm : res drv ] for any derivation @xmath182 of @xmath315 and any list of nominal constants @xmath316 such that @xmath317 @xmath260 is a derivation of @xmath255,\\ldots , b_n[a_n / x ] \\seqsym b_0[a_0/x]}$ ] and @xmath318    [ lm : subst]_substitutions . _",
    "let @xmath182 be a proof of @xmath201 and let @xmath80 be a @xmath65-substitution .",
    "then there exists a proof @xmath319 of @xmath203 such that @xmath320    follows immediately from lemma  [ lm : subst drv ] .",
    "[ lm : perm ] _ permutations .",
    "_ let @xmath182 be a proof of @xmath321 then there exists a proof @xmath319 of @xmath222 such that @xmath320    follows immediately from lemma  [ lm : perm drv ] .",
    "[ lm : res]_restricted name substitutions .",
    "_ let @xmath182 be a proof of @xmath322 then there exists a proof of @xmath319 of @xmath255 , \\ldots , b_n[a_n / x ] \\seqsym b_0[a_0/x]},$ ] where @xmath323 for each @xmath324 such that @xmath320    follows immediately from lemma  [ lm : res drv ] .",
    "the next two lemmas are crucial to the cut - elimination proof : they allow one to reintroduce the symmetry between @xmath325 and @xmath112 , and dually , between @xmath111 and @xmath281 rules .",
    "[ lm : supp1]_support extension .",
    "_ let @xmath182 be a proof of @xmath326}$ ] where @xmath327 , @xmath328 and @xmath113 is not free in @xmath104 and @xmath5 .",
    "let @xmath329 be a list of nominal constants not in the support of @xmath5 .",
    "then there exists a proof @xmath319 of @xmath330}$ ] where @xmath331    suppose @xmath114 is the list of constants @xmath332 .",
    "let @xmath333 be a list of distinct variables not appearing in @xmath334 .",
    "we first apply the substitution @xmath335 $ ] to the sequent @xmath336}.$ ] by lemma  [ lm : subst ] , there is a proof @xmath275 of @xmath337}\\ ] ] the derivation @xmath319 is then obtained by repeatedly applying lemma  [ lm : res ] to @xmath275 to change @xmath338 into @xmath114 .",
    "[ lm : supp2]_support extension .",
    "_ let @xmath182 be a proof of @xmath339 , \\gamma \\seqsym c}$ ] where @xmath327 , @xmath328 and @xmath113 is not free in @xmath104 , @xmath5 and @xmath105 .",
    "let @xmath329 be a list of nominal constants not in the support of @xmath5 .",
    "then there exists a proof @xmath319 of @xmath340 , \\gamma \\seqsym c}$ ] where @xmath331    use the same construction as in the proof of lemma  [ lm : supp1 ] .",
    "we define a _ reduction _ relation between derivations , following closely the reduction relation in  @xcite . for simplicity of presentation",
    ", we shall omit the signatures in the sequents in the following reduction of cuts when the signatures are not changed by the reduction or when it is clear from context which signatures should be assigned to the sequents .",
    "the redex is always a derivation @xmath341 ending with the multicut rule @xmath342{{\\sigma ; \\delta_1,\\ldots,\\delta_n,\\gamma \\seqsym c } }          { \\deduce{{\\sigma ; \\delta_1 \\seqsym b_1 } }                  { \\pi_1 }          & \\cdots          & \\deduce{{\\sigma ; \\delta_n \\seqsym b_n } }                  { \\pi_n }          & \\deduce{{\\sigma ; b_1,\\ldots , b_n,\\gamma \\seqsym c } }                  { \\pi } } \\enspace .\\ ] ] we refer to the formulas @xmath343 produced by the @xmath344 as _ cut formulas_.    if @xmath345 , @xmath341 reduces to the premise derivation @xmath182 .    for @xmath346 we specify the reduction relation based on the last rule of the premise derivations .",
    "if the rightmost premise derivation @xmath182 ends with a left rule acting on a cut formula @xmath67 , then the last rule of @xmath347 and the last rule of @xmath182 together determine the reduction rules that apply .",
    "we classify these rules according to the following criteria : we call the rule an _ essential _ case when @xmath347 ends with a right rule ; if it ends with a left rule , it is a _ left - commutative _ case ; if @xmath347 ends with the @xmath348 rule , then we have an _ axiom _ case ; a _ multicut _ case arises when it ends with the @xmath344 rule . when @xmath182 does not end with a left rule acting on a cut formula , then its last rule is alone sufficient to determine the reduction rules that apply .",
    "if @xmath182 ends in a rule acting on a formula other than a cut formula , then we call this a _ right - commutative _ case .",
    "structural _ case results when @xmath182 ends with a contraction or weakening on a cut formula .",
    "if @xmath182 ends with the @xmath348 rule , this is also an axiom case ; similarly a multicut case arises if @xmath182 ends in the @xmath344 rule .    for simplicity of presentation",
    ", we always show @xmath349 .    _",
    "@xmath350 : if @xmath275 and @xmath182 are @xmath351{{\\delta_1\\seqsym b_1 ' \\land b_1 '' } }          { \\deduce{{\\delta_1\\seqsym b_1 ' } }                  { \\pi_1 ' }          & \\deduce{{\\delta_1\\seqsym b_1 '' } }                  { \\pi_1 '' } } \\qquad\\qquad\\qquad \\infer[{\\land{\\cal l}}]{{b_1 ' \\land b_1'',b_2,\\ldots , b_n,\\gamma\\seqsym c } }          { \\deduce{{b_1',b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi ' } } \\enspace , \\ ] ] then @xmath341 reduces to @xmath342{{\\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c } }          { \\deduce{{\\delta_1\\seqsym b_1 ' } }                  { \\pi_1 ' }          & \\deduce{{\\delta_2\\seqsym b_2 } }                  { \\pi_2 }          & \\cdots          & \\deduce{{\\delta_n\\seqsym b_n } }                  { \\pi_n }          & \\deduce{{b_1',b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi ' } } \\enspace .\\ ] ] the case for the other @xmath352 rule is symmetric .",
    "@xmath353 : if @xmath275 and @xmath182 are @xmath354{{\\delta_1\\seqsym b_1 ' \\lor b_1 '' } }          { \\deduce{{\\delta_1\\seqsym b_1 ' } }                  { \\pi_1 ' } } \\qquad\\qquad\\!\\!\\ ! \\infer[{\\lor{\\cal l}}]{{b_1 ' \\lor b_1'',b_2,\\ldots , b_n,\\gamma\\seqsym c } }          { \\deduce{{b_1',b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi ' }          & \\deduce{{b_1'',b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi '' } } \\enspace , \\ ] ] then @xmath341 reduces to @xmath342{{\\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c } }          { \\deduce{{\\delta_1\\seqsym b_1 ' } }                  { \\pi_1 ' }          & \\deduce{{\\delta_2\\seqsym b_2 } }                  { \\pi_2 }          & \\cdots          & \\deduce{{\\delta_n\\seqsym b_n } }                  { \\pi_n }          & \\deduce{{b_1',b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi ' } } \\enspace .\\ ] ] the case for the other @xmath355 rule is symmetric .",
    "@xmath356 : suppose @xmath275 and @xmath182 are @xmath357{{\\delta_1\\seqsym b_1 ' { \\supset}b_1 '' } }          { \\deduce{{b_1',\\delta_1\\seqsym b_1 '' } }                  { \\pi_1 ' } } \\qquad\\qquad\\!\\ !",
    "\\infer[{{\\supset}{\\cal l}}]{{b_1 ' { \\supset}b_1'',b_2,\\ldots , b_n,\\gamma\\seqsym c } }          { \\deduce{{b_2,\\ldots , b_n,\\gamma\\seqsym b_1 ' } }                  { \\pi ' }          & \\deduce{{b_1'',b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi '' } } \\enspace .\\ ] ] let @xmath358 be @xmath342{{\\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym b_1 '' } }          { \\infer[{mc}]{{\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym b_1 ' } }                  { \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\delta_i\\seqsym b_i } }                          { \\pi_i}}\\right\\}_{i \\in \\{2 .. n\\ } }                  & \\raisebox{-2.5ex}{\\deduce{{b_2,\\ldots , b_n,\\gamma\\seqsym b_1 ' } }                          { \\pi ' } } }          & \\deduce{{b_1',\\delta_1\\seqsym b_1 '' } }                  { \\pi_1 ' } } \\enspace .\\ ] ] then @xmath341 reduces to @xmath359{\\makebox[\\infwidthi ] { } }                  { \\infer[{mc}]{{\\delta_1,\\ldots,\\delta_n,\\gamma ,                                          \\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } }                          { \\raisebox{-2.5ex}{\\deduce{{\\ldots\\seqsym b_1 '' } }                                  { \\xi_1 } }                          & \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\delta_i\\seqsym b_i } }                                  { \\pi_i}}\\right\\}_{i \\in \\{2 .. n\\ } }                          & \\raisebox{-2.5ex}{\\deduce{{b_1'',\\{b_i\\}_{i \\in \\{2 .. n\\}},\\gamma\\seqsym c } }                                  { \\pi '' } } } } } \\enspace .\\ ] ] we use the double horizontal lines to indicate that the relevant inference rule ( in this case , @xmath246 ) may need to be applied zero or more times .",
    "@xmath360 : suppose @xmath275 and @xmath182 are @xmath208 { { \\sigma ; \\delta_1 \\seqsym \\forall x.b_1 ' } } { \\deduce{{\\sigma , h ; \\delta_1",
    "\\seqsym b_1'[(h\\,\\vec{c})/x ] } }                  { \\pi_1 ' } } \\qquad\\qquad\\qquad \\infer[{\\forall{\\cal l } } ] { { \\sigma ; \\forall x.b_1',b_2,\\ldots , b_n,\\gamma \\seqsym c } } { \\deduce{{\\sigma ; b_1'[t / x],b_2,\\ldots , b_n,\\gamma \\seqsym c } }                  { \\pi ' } } \\enspace , \\ ] ] where @xmath361 let @xmath362 ) \\setminus supp(b_1').$ ] apply lemma  [ lm : supp1 ] to get a derivation @xmath363 of @xmath364}.$ ] the derivation @xmath341 reduces to    @xmath342 { { \\sigma ; \\delta_1,\\ldots,\\delta_n,\\gamma \\seqsym c } } { \\raisebox{-2.5ex }     { \\deduce{{\\sigma ; \\delta_1 \\seqsym b_1'[t / x ] } }             { \\pi_1''[\\lambda\\vec{c}\\vec d.t / h ' ] } }    & \\left\\{\\raisebox{-1.5ex }             { \\deduce{{\\sigma ; \\delta_i \\seqsym b_i } }                     { \\pi_i}}\\right\\}_{i \\in \\{2 .. n\\ } }    & \\raisebox{-2.5ex}{\\deduce{{\\ldots\\seqsym c } }                  { \\pi ' } } } \\enspace .\\ ] ]    @xmath365 : suppose @xmath275 and @xmath182 are @xmath282 { { \\sigma ; \\delta_1 \\seqsym \\exists x.b_1 ' } }          { \\deduce{{\\sigma ; \\delta_1 \\seqsym b_1'[t / x ] } }                  { \\pi_1 ' } } \\qquad\\qquad\\qquad \\infer[{\\exists{\\cal l } } ] { { \\sigma ; \\exists x.b_1',b_2,\\ldots , b_n,\\gamma \\seqsym c } } { \\deduce{{\\sigma , h ; b_1'[(h\\,\\vec{c})/x],b_2,\\ldots , b_n ,              \\gamma \\seqsym c } }                  { \\pi ' } } \\enspace , \\ ] ] where @xmath361 let @xmath362)\\setminus supp(b_1').$ ] apply lemma  [ lm : supp2 ] to @xmath319 to get a derivation @xmath366 of @xmath367}.$ ] then @xmath341 reduces to @xmath342{{\\sigma ; \\delta_1,\\ldots,\\delta_n,\\gamma \\seqsym c } }    { \\deduce{{\\sigma ; \\delta_1 \\seqsym b_1'[t / x]}}{\\pi_1 ' }    & \\ldots    & \\deduce{{\\sigma ; b_1'[t / x ] , b_2,\\dots,\\gamma \\seqsym c } }                { \\pi''[\\lambda \\vec{c}\\vec d.t / h ' ] }          } \\enspace .\\ ] ]    @xmath368 : suppose @xmath275 and @xmath182 are @xmath238 { { \\delta_1\\seqsym \\nabla x.b_1 ' } }       { \\deduce{{\\delta_1\\seqsym b_1'[a / x ] } }             { \\pi_1 ' } } \\qquad\\qquad\\qquad \\infer[{\\nabla{\\cal l}}]{{\\nabla x.b_1',\\ldots ,         b_n,\\gamma\\seqsym c } }    { \\deduce{{b_1'[b / x],\\ldots , b_n ,              \\gamma\\seqsym c } }                  { \\pi ' } } \\enspace .\\ ] ] apply the construction in definition  [ def : perm ] to to @xmath369 to swap @xmath42 with @xmath43 to get a derivation @xmath363 of @xmath370}.$ ] @xmath341 reduces to @xmath342 { { \\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c } } {     \\deduce{{\\delta_1\\seqsym b_1'[b / x]}}{\\pi_1 '' }      & \\ldots          &       \\deduce{{b_1'[b / x ] , \\dots , b_n , \\gamma\\seqsym c } }             { \\pi ' } } \\enspace .\\ ] ]    @xmath371",
    "suppose @xmath275 is @xmath372 { { \\delta_1\\seqsym nat~z } } { } $ ] and @xmath182 is @xmath194 { { nat~z , b_2 , \\ldots , b_n , \\gamma\\seqsym c } } { \\deduce{{\\seqsym d~z}}{\\pi ' } & \\deduce{{d~j\\seqsym d~(s\\,j)}}{\\pi '' } & \\deduce{{d~z , b_2 , \\ldots , b_n , \\gamma\\seqsym c}}{\\pi ' '' } } \\enspace .\\ ] ] then @xmath341 reduces to @xmath342     { { \\delta_1,\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } }     { \\raisebox{-1.5ex}{\\deduce{{\\delta_1\\seqsym d~z}}{w(\\delta_1,\\pi ' ) } } &      \\left\\{\\raisebox{-1.5ex }        { \\deduce{{\\delta_i\\seqsym b_i}}{\\pi_i } }      \\right\\}_{i\\in\\{2\\dots n\\ } } &      \\raisebox{-1.5ex}{\\deduce{{d~z ,   b_2 , \\ldots , b_n , \\gamma\\seqsym c}}{\\pi ' '' } }     } \\ ] ]",
    "@xmath371 suppose @xmath275 is @xmath373 { { \\delta_1\\seqsym nat~(s\\,i ) } } { \\deduce{{\\delta\\seqsym nat\\,i}}{\\pi_1'}}\\ ] ] and @xmath182 is @xmath194 { { nat~(s\\,i ) , b_2 , \\ldots , b_n , \\gamma\\seqsym c } } { \\deduce{{\\seqsym d\\,z}}{\\pi ' } & \\deduce{{d\\,j\\seqsym d\\,(s\\,j)}}{\\pi '' } & \\deduce{{d\\,(s\\,i ) , b_2 , \\ldots , b_n , \\gamma\\seqsym c}}{\\pi ' '' } } \\ ] ] let @xmath358 be @xmath374 { { \\delta_1\\seqsym d~i } } { \\deduce{{\\delta_1\\seqsym nat\\,i}}{\\pi_1 ' } & \\infer[{nat{\\cal l } } ] { { nat\\,i\\seqsym d\\,i } } { \\deduce{{\\seqsym d\\,z}}{\\pi ' } & \\deduce{{d\\,j\\seqsym d\\,(s\\,j)}}{\\pi '' } & \\infer[id_\\pi]{{d\\,i\\seqsym d\\,i } } { } } } \\ ] ] suppose @xmath375 we apply the procedures in definition  [ def : subst ] and definition  [ def : res ] to @xmath366 to obtain the derivation @xmath376 of @xmath377 let @xmath378 be @xmath374 { { \\delta_1\\seqsym d\\,(s\\,i ) } } { \\deduce{{\\delta_1\\seqsym d\\,i}}{\\xi_1 } & \\deduce{{d\\,i\\seqsym d\\,(s\\,i)}}{\\pi^{\\bullet}[\\lambda \\vec",
    "c.i / h ] } } \\ ] ] then @xmath341 reduces to @xmath374 { { \\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c } } { \\deduce{{\\delta_1\\seqsym d\\,(s\\,i)}}{\\xi_2 } & \\deduce{{\\delta_2\\seqsym b_2}}{\\pi_2 } & \\ldots & \\deduce{{\\delta_n\\seqsym b_n}}{\\pi_n } & \\deduce{{d\\,(s\\,i ) , b_2,\\dots , b_n,\\gamma\\seqsym c}}{\\pi ' '' } } \\ ] ]    @xmath379 if @xmath275 and @xmath182 are @xmath380 { { \\sigma ; \\delta_1 \\seqsym t = t } } { } \\qquad \\infer[{{\\rm eq}{\\cal l } } ] { { \\sigma ; t = t , \\gamma \\seqsym c } } { \\left\\ { \\raisebox{-1.5ex } { \\deduce{{\\sigma\\theta ; \\gamma\\theta \\seqsym c\\theta}}{\\pi_\\theta } } \\right\\}_\\theta } \\ ] ] then @xmath341 reduces to @xmath196 { { \\sigma ; \\delta_1,\\ldots,\\delta_n,\\gamma \\seqsym c } } { \\deduce{{\\sigma ; \\delta_2 \\seqsym b_2}}{\\pi_2 } & \\ldots & \\deduce{{\\sigma ; \\delta_n \\seqsym b_n}}{\\pi_n } & \\deduce{{\\sigma ; \\delta_1,b_2,\\ldots , b_n,\\gamma \\seqsym c}}{w(\\delta_1,\\pi_\\epsilon ) } } \\ ] ] where @xmath381 is the empty substitution .    @xmath382 : suppose @xmath275 and @xmath182 are @xmath383 { { \\delta_1\\seqsym p\\,\\bar{t } } }    { \\deduce{{\\delta_1\\seqsym b[\\vec{t}/\\vec x]}}{\\pi_1 ' } } \\qquad \\qquad \\infer[{\\hbox{\\sl def}{\\cal l}}]{{p\\,\\vec{t},b_2,\\dots,\\gamma\\seqsym c } }    {     \\deduce        { { b[\\vec{t}/\\vec x],b_2 , \\dots,\\gamma\\seqsym c } }        { \\pi ' }    }    \\enspace .\\ ] ] then @xmath341 reduces to @xmath342 { { \\delta_1,\\dots,\\delta_n,\\gamma\\seqsym c } } { \\deduce{{\\delta_1\\seqsym b[\\vec{t}/\\vec x ] } }     { \\pi_1 ' } & \\deduce{{\\delta_2\\seqsym b_2}}{\\pi_2 } & \\ldots & \\deduce{{\\delta_n\\seqsym b_n}}{\\pi_n } & \\deduce{{b[\\vec t/\\vec x ] , \\dots , \\gamma\\seqsym c}}{\\pi ' }     } \\enspace .\\ ] ]    _ _    @xmath384 : suppose @xmath182 ends with a left rule other than @xmath246 acting on @xmath385 and @xmath275 is @xmath386 { { \\delta_1\\seqsym b_1 } } { \\left\\ {    \\raisebox{-1.5ex }    { \\deduce{{\\delta_1^i\\seqsym b_1 }    }    { \\pi_1^i } } \\right\\ } } \\enspace , \\ ] ] where @xmath387 is any left rule except @xmath388 , @xmath130 , or @xmath193",
    ". then @xmath341 reduces to @xmath386 { { \\delta_1,\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } } { \\deduce{\\makebox[\\infwidthi ] { } }    { \\left\\{\\raisebox{-3.5ex }        { \\infer[{mc } ]            { { \\delta_1^i,\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } }            { \\raisebox{-2.5ex } {               \\deduce{{\\delta_1^i\\seqsym b_1 } }                      { \\pi_1^i } }           & \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\delta_j\\seqsym b_j } }                   { \\pi_j}}\\right\\}_{j \\in \\{2 .. n\\ } }           & \\raisebox{-2.5ex}{\\deduce{{b_1,\\ldots , b_n,\\gamma\\seqsym c } }                   { \\pi}}}}\\right\\}\\makebox[\\infwidthii ] { } } } \\enspace .\\ ] ]    @xmath389 : suppose @xmath182 ends with a left rule other than @xmath246 acting on @xmath385 and @xmath275 is @xmath124 { { d_1 ' { \\supset}d_1'',\\delta_1'\\seqsym b_1 } } { \\deduce{{\\delta_1'\\seqsym d_1 ' } }                  { \\pi_1 ' }          & \\deduce{{d_1'',\\delta_1'\\seqsym b_1 } }                  { \\pi_1 '' } } \\enspace .\\ ] ] let @xmath358 be @xmath342 { { d_1'',\\delta_1',\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } }          { \\deduce{{d_1'',\\delta_1'\\seqsym b_1 } }                  { \\pi_1 '' }          & \\deduce{{\\delta_2\\seqsym b_2 } }                  { \\pi_2 }          & \\cdots          & \\deduce{{\\delta_n\\seqsym b_n } }                  { \\pi_n }          & \\deduce{{b_1,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi } } \\enspace .\\ ] ] then @xmath341 reduces to @xmath124 { { d_1 ' { \\supset}d_1'',\\delta_1',\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } } {   \\deduce{{\\delta_1',\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym d_1 ' } }    { w(\\delta_2\\cup \\dots",
    "\\cup \\delta_n\\cup \\gamma , \\pi_1 ' ) }    &   \\deduce{{d_1'',\\delta_1',\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } }                  { \\xi_1 } } \\enspace .\\ ] ]    @xmath390 suppose @xmath182 ends with a left rule other than @xmath246 acting on @xmath385 and @xmath275 is @xmath194 { { nat\\,i , \\delta_1'\\seqsym b_1 } } { \\deduce{{\\seqsym d_1\\,z}}{\\pi_1 ^ 1 } & \\deduce{{d_1\\,j\\seqsym d_1(s\\,j)}}{\\pi_1 ^ 2 }   & \\deduce{{d_1 i , \\delta_1'\\seqsym b_1}}{\\pi_1 ^ 3 } } \\ ] ] let @xmath358 be @xmath196 { { d_1 i , \\delta_1 ' , \\delta_2 , \\ldots , \\delta_n , \\gamma\\seqsym c } } { \\deduce{{d_1 i , \\delta_1'\\seqsym b_1}}{\\pi_1 ^ 3 } & \\deduce{{\\delta_2\\seqsym b_2}}{\\pi_2 } & \\ldots & \\deduce{{\\delta_n\\seqsym b_n}}{\\pi_n } & \\deduce{{b_1,\\ldots , b_n\\seqsym c}}{\\pi } } \\ ] ] then @xmath341 reduces to @xmath194 { { nat\\,i , \\delta_1 ' , \\delta_2 , \\ldots,\\delta_n,\\gamma\\seqsym c } } { \\deduce{{\\seqsym d_1 z}}{\\pi_1 ^ 1 } & \\deduce{{d_1 j\\seqsym d_1 ( s\\,j)}}{\\pi_1 ^ 2 } & \\deduce{{d_1 i , \\delta_1 ' , \\delta_2,\\ldots,\\delta_2,\\gamma\\seqsym c}}{\\xi_1 } } \\ ] ]    @xmath391 if @xmath182 ends with a left rule other than @xmath246 acting on @xmath385 and @xmath275 is @xmath128 { { s = t , \\delta_1'\\seqsym b_1 } } { \\left\\ { \\raisebox{-1.5ex } { \\deduce{{\\delta_1'\\theta\\seqsym b_1\\theta}}{\\pi^\\theta } } \\right\\}_\\theta } \\ ] ] then @xmath341 reduces to @xmath128 { { \\qquad \\qquad \\qquad \\quad s = t,\\delta_1',\\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c \\qquad \\qquad \\qquad \\qquad \\qquad \\qquad } } { \\left\\ { \\raisebox{-1.5ex } { \\infer[mc ] { { \\delta_1'\\theta , \\delta_2\\theta,\\ldots , \\delta_n\\theta , \\gamma\\theta\\seqsym c\\theta } } { \\deduce{{\\delta_1'\\theta\\seqsym b_1\\theta}}{\\pi^\\theta } & \\deduce{{\\delta_2\\theta\\seqsym b_2\\theta}}{\\pi_2\\theta } & \\ldots & \\deduce{{\\delta_n\\theta\\seqsym b_n\\theta}}{\\pi_n\\theta } & \\deduce{{b_1\\theta,\\ldots , b_n\\theta,\\gamma\\theta\\seqsym c\\theta}}{\\pi\\theta } } } \\right\\}_\\theta } \\ ] ]    _ _    @xmath392 : suppose @xmath182 is @xmath393 { { b_1,\\ldots , b_n,\\gamma\\seqsym c } } { \\left\\{\\raisebox{-1.5ex } { \\deduce{{b_1,\\ldots , b_n,\\gamma^i\\seqsym c } }   { \\pi^i}}\\right\\ } } \\enspace , \\ ] ] where @xmath394 is any left rule other than @xmath388 , @xmath130 , or @xmath193 ( but including @xmath246 ) acting on a formula other than @xmath395 .",
    "the derivation @xmath341 reduces to @xmath393{{\\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c } }          { \\deduce{\\makebox[\\infwidthi ] { } }              { \\left\\{\\raisebox{-2.45ex } {               \\infer[{mc}]{{\\delta_1,\\ldots,\\delta_n,\\gamma^i\\seqsym c } }                             { \\deduce{{\\delta_1\\seqsym b_1 } }                          { \\pi_1 }                  & \\cdots                  & \\deduce{{\\delta_n\\seqsym b_n } }                          { \\pi_n }                  & \\deduce{{b_1,\\ldots , b_n,\\gamma^i\\seqsym c } }                          { \\pi^i}}}\\right\\}\\makebox[\\infwidthii ] { } } } \\enspace , \\ ] ]    @xmath396 : suppose @xmath182 is @xmath124{{b_1,\\ldots , b_n , d ' { \\supset}d'',\\gamma'\\seqsym c } }          { \\deduce{{b_1,\\ldots , b_n,\\gamma'\\seqsym d ' } }                  { \\pi ' }          & \\deduce{{b_1,\\ldots , b_n , d'',\\gamma'\\seqsym c } }                  { \\pi '' } } \\enspace .\\ ] ] let @xmath358 be @xmath342{{\\delta_1,\\ldots,\\delta_n,\\gamma'\\seqsym d ' } }          { \\deduce{{\\delta_1\\seqsym b_1 } }                  { \\pi_1 }          & \\cdots          & \\deduce{{\\delta_n\\seqsym b_n } }                  { \\pi_n }          & \\deduce{{b_1,\\ldots , b_n,\\gamma'\\seqsym d ' } }                  { \\pi'}}\\ ] ] and @xmath378 be @xmath342{{\\delta_1,\\ldots,\\delta_n , d'',\\gamma'\\seqsym c } }          { \\deduce{{\\delta_1\\seqsym b_1 } }                  { \\pi_1 }          & \\cdots          & \\deduce{{\\delta_n\\seqsym b_n } }                  { \\pi_n }          & \\deduce{{b_1,\\ldots , b_n , d'',\\gamma'\\seqsym c } }                  { \\pi '' } } \\enspace .\\ ] ] then @xmath341 reduces to @xmath124{{\\delta_1,\\ldots,\\delta_n , d ' { \\supset}d'',\\gamma'\\seqsym c } }          { \\deduce{{\\delta_1,\\ldots,\\delta_n,\\gamma'\\seqsym d ' } }                  { \\xi_1 }          & \\deduce{{\\delta_1,\\ldots,\\delta_n , d'',\\gamma'\\seqsym c } }                  { \\xi_2 } } \\enspace .\\ ] ]    @xmath397 suppose @xmath182 is @xmath194 { { b_1,\\ldots , b_n , nat\\,i , \\gamma'\\seqsym c } } { \\deduce{{\\seqsym d\\,z}}{\\pi ' } & \\deduce{{d\\,j\\seqsym d\\,(s\\,j)}}{\\pi '' } & \\deduce{{b_1,\\ldots , b_n , d\\,i,\\gamma'\\seqsym c}}{\\pi ' '' } } \\ ] ] let @xmath358 be @xmath398 { { \\delta_1,\\ldots,\\delta_n , d\\,i,\\gamma'\\seqsym c } } { \\deduce{{\\delta_1\\seqsym b_1}}{\\pi_1 } & \\ldots & \\deduce{{\\delta_n\\seqsym b_n}}{\\pi_n } & \\deduce{{b_1,\\ldots , b_n , d\\,i , \\gamma'\\seqsym c}}{\\pi ' '' } } \\ ] ] then @xmath341 reduces to @xmath194 { { \\delta_1,\\ldots,\\delta_n , nat\\,i,\\gamma'\\seqsym c } } { \\deduce{{\\seqsym d\\,z}}{\\pi ' } & \\deduce{{d\\,j\\seqsym d\\,(s\\,j)}}{\\pi '' } & \\deduce{{\\delta_1,\\ldots,\\delta_n , d\\,i,\\gamma'\\seqsym c}}{\\xi_1 } } \\ ] ]    @xmath399 : if @xmath182 is @xmath128{{b_1,\\ldots , b_n,{s = t } ,                   \\gamma'\\seqsym c } }          { \\left\\{\\raisebox{-1.5ex }                  { \\deduce{{b_1\\rho,\\ldots ,                                   b_n\\rho,\\gamma'\\rho\\seqsym c\\rho } }                  { \\pi^{\\rho}}}\\right\\ } } \\enspace , \\ ] ] then @xmath341 reduces to @xmath128 { { \\delta_1,\\ldots,\\delta_n , s = t,\\gamma'\\seqsym c } }       { \\deduce{\\makebox[\\infwidthi ] { } }       { \\left\\{\\raisebox{-3.5ex}{\\infer[{mc } ]              { { \\delta_1\\rho,\\ldots ,                    \\delta_n\\rho,\\gamma'\\rho\\seqsym c\\rho } }         { \\left\\{\\raisebox{-1.5ex }            { \\deduce{{\\delta_i\\rho\\seqsym b_i\\rho } }                                  { \\pi_i\\rho } }                   \\right\\}_{i \\in \\{1 .. n\\ } }                  & \\raisebox{-2.5ex }                          { \\deduce{{b_i\\rho , \\ldots ,                                   \\gamma'\\rho\\seqsym c\\rho } }                          { \\pi^{\\rho } } } } }          \\right\\}\\makebox[\\infwidthii ] { } } } \\enspace .\\ ] ]    @xmath400 : if @xmath182 is @xmath401 { { b_1,\\ldots , b_n,\\gamma\\seqsym c } }    { \\left\\{\\raisebox{-1.5ex } {        \\deduce{{b_1,\\ldots , b_n,\\gamma^i\\seqsym c^i } }                  { \\pi^i}}\\right\\ } } \\enspace , \\ ] ] where @xmath402 is any right rule , then @xmath341 reduces to @xmath401 { { \\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c } }       { \\deduce{\\makebox[\\infwidthi ] { } }              { \\left\\{\\raisebox{-2.45ex } {              \\infer[{mc}]{{\\delta_1,\\ldots,\\delta_n,\\gamma^i\\seqsym c^i } }                  { \\deduce {                     { \\delta_1\\seqsym b_1 } }                          { \\pi_1 }                  & \\cdots                  & \\deduce{{\\delta_n\\seqsym b_n } }                          { \\pi_n ' }                  & \\deduce{{b_1,\\ldots , b_n,\\gamma^i\\seqsym c^i } }                          { \\pi^i}}}\\right\\}\\makebox[\\infwidthii ] { } } } \\enspace .\\ ] ]    _ _    @xmath403 : if @xmath182 ends with a left rule other than @xmath246 acting on @xmath385 and @xmath275 ends with a multicut and reduces to @xmath369 , then @xmath341 reduces to @xmath342{{\\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c } }          { \\deduce{{\\delta_1\\seqsym b_1 } }                  { \\pi_1 ' }          & \\deduce{{\\delta_2\\seqsym b_2 } }                  { \\pi_2 }          & \\cdots          & \\deduce{{\\delta_n\\seqsym b_n } }                  { \\pi_n }          & \\deduce{{b_1,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi } } \\enspace .\\ ] ]    @xmath404 : suppose @xmath182 is @xmath342{{b_1,\\ldots , b_n,\\gamma^1,\\ldots,\\gamma^m,\\gamma'\\seqsym c } }          { \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\{b_i\\}_{i \\in i^j},\\gamma^j\\seqsym d^j } }                  { \\pi^j}}\\right\\}_{j \\in \\{1 .. m\\ } }          & \\raisebox{-2.5ex}{\\deduce{{\\{d^j\\}_{j \\in \\{1 .. m\\}},\\{b_i\\}_{i \\in i'},\\gamma'\\seqsym c } }                  { \\pi ' } } } \\enspace , \\ ] ] where @xmath405 partition the formulas @xmath406 among the premise derivations @xmath275 ,  , @xmath407,@xmath319 . for @xmath408",
    "let @xmath409 be @xmath342{{\\{\\delta_i\\}_{i \\in i^j},\\gamma^j\\seqsym d^j } }          { \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\delta_i\\seqsym b_i } }                          { \\pi_i}}\\right\\}_{i \\in i^j }          & \\raisebox{-2.5ex}{\\deduce{{\\{b_i\\}_{i \\in i^j},\\gamma^j\\seqsym d^j } }                  { \\pi^j } } } \\enspace .\\ ] ] then @xmath341 reduces to @xmath342{{\\delta_1,\\ldots,\\delta_n,\\gamma^1,\\ldots\\gamma^m,\\gamma'\\seqsym c } }          { \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\ldots\\seqsym d^j } }                          { \\xi^j}}\\right\\}_{j \\in \\{1 .. m\\ } }          & \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\delta_i\\seqsym b_i } }                          { \\pi_i}}\\right\\}_{i \\in i ' }          & \\raisebox{-2.5ex}{\\deduce{{\\ldots\\seqsym c } }                  { \\pi ' } } } \\enspace .\\ ] ]    _ _    @xmath410 : if @xmath182 is @xmath247{{b_1,b_2,\\ldots , b_n,\\gamma\\seqsym c } }          { \\deduce{{b_1,b_1,b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { \\pi ' } } \\enspace , \\ ] ] then @xmath341 reduces to @xmath411{\\makebox[\\infwidthi ] { } }                  { \\infer[{mc}]{{\\delta_1,\\delta_1,\\delta_2,\\ldots,\\delta_n,\\delta_n,\\gamma\\seqsym c } }                          { \\raisebox{-2.5ex}{\\deduce{{\\delta_1\\seqsym b_1 } }                                  { \\pi_1 } }                          & \\left\\{\\raisebox{-1.5ex}{\\deduce{{\\delta_i\\seqsym b_i } }                                          { \\pi_i}}\\right\\}_{i \\in \\{1 .. n\\ } }                          & \\raisebox{-2.5ex}{\\deduce{{b_1,b_1,b_2,\\ldots , b_n,\\gamma\\seqsym c } }                                  { \\pi ' } } } } } \\enspace .\\ ] ]    _ _    @xmath412",
    ": suppose @xmath182 ends with either @xmath193 or @xmath130 on @xmath385 and @xmath275 ends with the @xmath223 rule : @xmath120 { { \\delta_1',b\\seqsym b_1 } } { \\pi_1.b = \\pi_2.b_1}\\ ] ] then it is the case that @xmath413 apply the construction in definition  [ def : perm ] to @xmath182 to get a derivation @xmath319 of @xmath414 the derivation @xmath341 reduces to @xmath342{{b , \\delta_1 ' , \\delta_2,\\ldots,\\delta_n,\\gamma\\seqsym c } }          { \\deduce{{\\delta_2\\seqsym b_2 } }                  { \\pi_2 }          & \\cdots          & \\deduce{{\\delta_n\\seqsym b_n } }                  { \\pi_n }          & \\deduce{{b,\\delta_1 ' , b_2,\\ldots , b_n,\\gamma\\seqsym c } }                  { w(\\delta_1',\\pi ' ) } }            \\enspace .\\ ] ]    @xmath415 : if @xmath182 ends with the @xmath223 rule with a matching formula in @xmath104 , i.e. , there exists @xmath416 such that @xmath417 for some permutations @xmath37 and @xmath38 , then then @xmath341 reduces to @xmath120 { { \\delta_1,\\ldots,\\delta_n,\\gamma\\seqsym c}}{}\\ ] ] if @xmath182 ends with the @xmath223 rule but @xmath105 does not match any formula in @xmath104 , then @xmath105 must match one of the cut formulas , say @xmath385 , i.e. , there exists permutations @xmath418 and @xmath419 such that @xmath420 .",
    "that is , @xmath421 in this case , we first apply the permutation @xmath422 to @xmath275 according to the construction in definition  [ def : perm ] to get a derivation @xmath369 of @xmath423 .",
    "@xmath341 then reduces to @xmath424    an inspection of the rules of the logic and this definition will reveal that every derivation ending with a multicut has a reduct .",
    "because we use a multiset as the left side of the sequent , there may be ambiguity as to whether a formula occurring on the left side of the rightmost premise to a multicut rule is in fact a cut formula , and if so , which of the left premises corresponds to it . as a result , several of the reduction rules may apply , and so a derivation may have multiple reducts .",
    "we now define two properties of derivations : normalizability and reducibility .",
    "each of these properties implies that the derivation can be reduced to a cut - free derivation of the same end - sequent . in the following ,",
    "substitutions mean @xmath65-substitutions for some signature @xmath279 the definitions are similar to those by mcdowell and miller  @xcite . however , since the cut reduction in our case involves several transformations of derivations , other than substitutions and weakening , we need to build this transformations into the definitions of normalizability and reducibility .    a _ height - preserving _ ( hp )",
    "transformation @xmath425 is a finite sequence of transformations @xmath426 where each @xmath427 is one of the transformations described in definition  [ def : weak ] , definition  [ def : subst ] , definition  [ def : perm ] and definition  [ def : res ] .",
    "the number @xmath428 is the _ order _ of @xmath425 .",
    "the application of @xmath425 to @xmath182 is defined as follows : @xmath429    note that a height - preserving transformation may not be defined for all derivations , and that it may be the identity transformation ( i.e. , it does nothing ) .",
    "height - preserving transformations are ranged over by @xmath430 and @xmath431    [ lm : height ] let @xmath425 be a height - preserving transformation . for any derivation @xmath182 , if @xmath432 is defined , then @xmath433    [ def : norm ] we define the set of _ normalizable _ derivations to be the smallest set that satisfies the following conditions :    1 .",
    "if a derivation @xmath182 ends with a multicut , then it is normalizable if for every height - preserving transformation @xmath425 such that @xmath432 is defined , there is a normalizable reduct of @xmath432 .",
    "if a derivation ends with any rule other than a multicut , then it is normalizable if the premise derivations are normalizable .",
    "these clauses assert that a given derivation is normalizable provided certain ( perhaps infinitely many ) other derivations are normalizable .",
    "if we call these other derivations the predecessors of the given derivation , then a derivation is normalizable if and only if the tree of the derivation and its successive predecessors is well - founded . in this case",
    ", the well - founded tree is called the _ normalization _ of the derivation .",
    "the set of normalizable derivations is not empty ; the cut - free proofs , for instance , are normalizable .",
    "since a normalization is well - founded , it has an associated induction principle : for any property @xmath434 of derivations , if for every derivation @xmath182 in the normalization , @xmath434 holds for every predecessor of @xmath182 implies that @xmath434 holds for @xmath182 , then @xmath434 holds for every derivation in the normalization .",
    "[ lm : norm - cut - free ] if there is a normalizable derivation of a sequent , then there is a cut - free derivation of the sequent .",
    "let @xmath182 be a normalizable derivation of the sequent @xmath435 .",
    "we show by induction on the normalization of @xmath182 that there is a cut - free derivation of @xmath435 .    1 .",
    "if @xmath182 ends with a multicut , then any of its reducts is one of its predecessors and so is normalizable .",
    "one of its reduct , via the empty transformation , is also a derivation of @xmath435 , so by the induction hypothesis this sequent has a cut - free derivation .",
    "2 .   suppose @xmath182 ends with a rule other than multicut .",
    "since we are given that @xmath182 is normalizable , by definition the premise derivations are normalizable .",
    "these premise derivations are the predecessors of @xmath182 , so by the induction hypothesis there are cut - free derivations of the premises .",
    "thus there is a cut - free derivation of @xmath435 .",
    "the next four lemmas are also proved by induction on the normalization of derivations .",
    "[ lm : norm subst ] if @xmath182 is a normalizable derivation , then for any substitution @xmath80 such that @xmath202 is defined , @xmath202 is normalizable .    [",
    "lm : norm weak ] if @xmath182 is normalizable , then for any multiset of formulas @xmath189 , if @xmath190 is defined , then @xmath190 is normalizable .",
    "[ lm : norm perm ] if @xmath182 is normalizable , then for any permutations @xmath436 such that @xmath237 is defined , @xmath237 is normalizable .",
    "[ lm : norm res ] if @xmath182 is normalizable , then for any nominal constants @xmath437 such that @xmath260 is defined , @xmath260 is normalizable .",
    "[ lm : norm hpt ] if @xmath182 is normalizable , then for any height - preserving transformation @xmath425 such that @xmath432 is defined , @xmath432 is normalizable .",
    "[ def : level drv ] the level of a sequent @xmath438 is the level of @xmath105 .",
    "the level of a derivation @xmath182 is the level of its root sequent .",
    "the definition of reducibility for derivations is done by induction on the level of derivations : in defining the reducibility of level-@xmath439 derivations , we assume that the reducibility of derivations of level @xmath440 , for all @xmath441 is already defined . in the following definition ,",
    "when we apply a transformation @xmath425 to a derivation @xmath182 of @xmath442 we use the notation @xmath443 to denote the formula in the root sequent of @xmath432 that results from applying the transformation to @xmath67 .",
    "[ def : reducibility ] _ reducibility .",
    "_ for any @xmath439 , we define the set of _ reducible _ @xmath439-level derivations to be the smallest set of @xmath439-level derivations that satisfies the following conditions :    1 .",
    "if a derivation @xmath182 ends with a multicut then it is reducible if for every height - preserving transformation @xmath425 such that @xmath432 is defined , there is a reducible reduct of @xmath444 2 .",
    "suppose the derivation ends with the implication right rule @xmath357 { { \\gamma\\seqsym b{\\supset}c } } { \\deduce{{b,\\gamma\\seqsym c}}{\\pi}}\\ ] ] then the derivation is reducible if @xmath182 is reducible and for every height - preserving transformation @xmath425 such that @xmath432 is defined , multiset of formulas @xmath189 and reducible derivation @xmath319 of @xmath445 , where @xmath446 , the derivation @xmath196 { { \\delta , \\gamma'\\seqsym c ' } } { \\deduce{{\\delta\\seqsym b'}}{\\pi ' } & \\deduce{{b',\\gamma'\\seqsym c'}}{{\\cal t}(\\pi ) } } \\ ] ] is reducible .",
    "if the derivation ends with the implication left rule or the @xmath171 rule , then it is reducible if the right premise derivation is reducible and the other premise derivations are normalizable .",
    "4 .   if the derivation ends with any other rule , then it is reducible if the premise derivations are reducible .",
    "these clauses assert that a given derivation is reducible provided certain other derivations are reducible .",
    "if we call these other derivations the predecessors of the given derivation , then a derivation is reducible only if the tree of the derivation and its successive predecessors is well founded . in this case",
    ", the well founded tree is called the _ reduction _ of the derivation .",
    "[ lm : reducible implies norm ] if a derivation is reducible , then it is normalizable .    by induction on the reduction of the derivation .",
    "[ lm : reducible hpt ] if a derivation @xmath182 is reducible , then for any height - preserving @xmath425 such that @xmath432 is defined , @xmath432 is reducible .    by induction on the reduction of @xmath182 and",
    "lemma  [ lm : norm hpt ] .",
    "in the following , when we mention @xmath432 we assume implicitly that it is defined .",
    "we shall also use the notation @xmath447 to denote @xmath448 , that is the application of the transformation to the formula @xmath449 similarly , the multiset @xmath450 will be written @xmath451 we drop the subscript @xmath425 if it is clear from context which transformation we refer to .",
    "[ lm : reducibility ] for any derivation @xmath182 of @xmath452 and reducible derivations @xmath453 of @xmath454 where @xmath455 , and for any transformations @xmath456 such that @xmath457 is defined and @xmath458 , the derivation @xmath341 @xmath342 { { \\sigma ' ; { \\underline{\\delta_1}}_{{{\\cal t}}_1},\\ldots , { \\underline{\\delta_n}}_{{{\\cal t}}_n},{\\underline{\\gamma}}_{{{\\cal t } } } \\seqsym { \\underline{c}}_{{{\\cal t } } } } } { \\deduce{{\\sigma ' ; { \\underline{\\delta_1}}_{{{\\cal t}}_1 } \\seqsym { \\underline{b_1}}_{{{\\cal t}}}}}{{{\\cal t}}_1(\\pi_1 ) } & \\ldots & \\deduce{{\\sigma ' ; { \\underline{\\delta_n}}_{{{\\cal t}}_n } \\seqsym { \\underline{b_n}}_{{{\\cal t}}}}}{{{\\cal t}}_n(\\pi_n ) } & \\deduce{{\\sigma ' ; { \\underline{b_1}}_{{{\\cal t}}},\\ldots,{\\underline{b_n}}_{{{\\cal t } } } , { \\underline{\\gamma}}_{{{\\cal t } } } \\seqsym { \\underline{c}}_{{{\\cal t}}}}}{{{\\cal t}}(\\pi ) } } \\ ] ] is reducible .",
    "the proof is by induction on @xmath185 with subordinate induction on @xmath428 and on the reductions of @xmath459 since the proof does not depend on the order of the inductions on reductions , when we need to distinguish of one the @xmath347 s we shall refer to it as @xmath275 without loss of generality .",
    "we need to show that for every @xmath460 , the derivation every reduct of @xmath461 is reducible .",
    "if @xmath345 then @xmath461 reduces to @xmath462 since reducibility is preserved by height - preserving transformation , it suffices to consider the case where @xmath463 and @xmath460 are the identity transformation , that is , we need only to show that @xmath182 is reducible .",
    "this is proved by case analysis on the last rule of @xmath464 for each case , the results follow from the outer induction hypothesis and definition  [ def : reducibility ] . the case with @xmath465 requires that height - preserving transformations do not increase the height of the derivations ( see lemma  [ lm : height ] ) . in the cases for @xmath388 and @xmath193",
    "we need the additional information that reducibility implies normalizability ( see lemma  [ lm : reducible implies norm ] ) .    for @xmath346",
    ", we analyze all possible reductions that apply to @xmath461 and show that every reduct of @xmath466 is reducible .",
    "we suppose that @xmath461 is of the following form : @xmath196 { { { \\underline{\\delta_1}}_{{{\\cal f}}_1 } , \\ldots , { \\underline{\\delta_n}}_{{{\\cal f}}_n } , { \\underline{\\gamma}}_{{{\\cal f}}}\\seqsym { \\underline{c}}_{{{\\cal f } } } } } { \\deduce{{{\\underline{\\delta_1}}_{{{\\cal f}}_1}\\seqsym { \\underline{c_1}}_{{{\\cal f}}_1}}}{{{\\cal f}}_1(\\pi_1 ) } & \\ldots & \\deduce{{{\\underline{\\delta_n}}_{{{\\cal f}}_n}\\seqsym { \\underline{c_n}}_{{{\\cal f}}_n}}}{{{\\cal f}}_n(\\pi_n ) } & \\deduce{{{\\underline{b_1}}_{{{\\cal f}}},{\\underline{b_n}}_{{{\\cal f } } } , { \\underline{\\gamma}}_{{{\\cal f}}}\\seqsym { \\underline{c}}_{{{\\cal f}}}}}{{{\\cal f}}(\\pi ) } } \\ ] ] where @xmath467 in several cases below , we often omit the subscripts @xmath468 or @xmath469 when it is clear from context which transformations we refer to .",
    "we also often switch between @xmath470 and @xmath471 to make the inference figures more readable .",
    "most cases follow immediately from the inductive hypothesis and definition  [ def : reducibility ] and lemma  [ lm : reducible implies norm ] , lemma  [ lm : reducible hpt ] and lemma  [ lm : height ] .",
    "we show here the interesting cases .",
    "@xmath356 : suppose @xmath275 and @xmath182 are @xmath357 { { \\delta_1\\seqsym b_1'{\\supset}b_1 '' } } { \\deduce{{\\delta_1,b_1'\\seqsym b_1''}}{\\pi_1 ' } } \\qquad \\qquad \\infer[{{\\supset}{\\cal l } } ] { { b_1'{\\supset}b_1'',b_2,\\dots , b_n,\\gamma\\seqsym c } } { \\deduce{{b_2,\\dots,\\gamma\\seqsym b_1'}}{\\pi ' } & \\deduce{{b_1'',b_2,\\dots,\\gamma\\seqsym c}}{\\pi '' } } \\enspace .\\ ] ] let @xmath358 be the derivation @xmath342 { { \\underline{\\delta_2},\\dots,\\underline{\\delta_n},\\underline{\\gamma}\\seqsym \\underline{b_1 ' } } } { \\deduce{{\\underline { \\delta_2}\\seqsym \\underline{b_2}}}{{{\\cal f}}_2(\\pi_2 ) } & \\ldots & \\deduce{{\\underline{\\delta_n}\\seqsym \\underline{b_n}}}{{{\\cal f}}_n(\\pi_n ) } & \\deduce{{\\underline{b_2},\\dots,\\underline{b_n } , \\underline \\gamma\\seqsym \\underline{b_1 ' } } }               { { { \\cal f}}_n(\\pi ' ) } } \\ ] ] then @xmath358 is reducible by induction hypothesis since @xmath468 and @xmath469 preserve reducibility ( lemma  [ lm : reducible hpt ] ) and do not increase the height of derivations ( lemma  [ lm : height ] ) .",
    "since we are given that @xmath275 is reducible , by definition  [ def : reducibility ] , the derivation @xmath378 @xmath342 { { { \\underline{\\delta_1 } } , \\ldots , { \\underline{\\delta_n } } , { \\underline{\\gamma}}\\seqsym { \\underline{b_1 '' } } } } { \\deduce{{{\\underline{\\delta_2 } } , \\ldots , { \\underline{\\delta_n } } , { \\underline{\\gamma}}\\seqsym { \\underline{b_1'}}}}{\\xi_1 } & \\deduce{{{\\underline{b_1 ' } } , { \\underline{\\delta_1}}\\seqsym { \\underline{b_1''}}}}{{{\\cal f}}_1(\\pi_1 ' ) } } \\ ] ] is reducible as well .",
    "therefore , the reduct of @xmath461 @xmath472{\\makebox[\\infwidthi ] { } }                  { \\infer[{mc}]{{{\\underline{\\delta_1}},\\ldots,{\\underline{\\delta_n } } , { \\underline{\\gamma } } ,                                          { \\underline{\\delta_2}},\\ldots,{\\underline{\\delta_n}},{\\underline{\\gamma}}\\seqsym { \\underline{c } } } }                          { \\raisebox{-2.5ex}{\\deduce{{\\ldots\\seqsym { \\underline{b_1 '' } } } }                                  { \\xi_2 } }                          & \\left\\{\\raisebox{-1.5ex}{\\deduce{{{\\underline{\\delta_i}}\\seqsym { \\underline{b_i } } } }                                  { { { \\cal f}}_i(\\pi_i)}}\\right\\}_{i \\in \\{2 .. n\\ } }                          & \\raisebox{-2.5ex } {       \\deduce{{{\\underline{b_1''}},\\{{\\underline{b_i}}\\}_{i \\in \\{2 ..",
    "n\\}},{\\underline{\\gamma}}\\seqsym { \\underline{c } } } }                                  { { { \\cal f}}(\\pi '' ) } } } } } \\enspace .\\ ] ] is reducible by the outer induction hypothesis and definition  [ def : reducibility ] .",
    "@xmath473 suppose @xmath275 and @xmath182 are @xmath208 { { \\sigma ; \\delta_1 \\seqsym \\forall x.b } } { \\deduce{{\\sigma , h ; \\delta_1 \\seqsym",
    "b[h\\,\\vec c / x]}}{\\pi_1 ' } } \\qquad \\infer[{\\forall{\\cal l } } ] { { \\sigma ; \\forall x.b , b_2 , \\ldots , b_n,\\gamma \\seqsym c } } { \\deduce{{\\sigma ; b[t / x ] , b_2,\\ldots , b_n,\\gamma \\seqsym c}}{\\pi ' } } \\ ] ] applying the transformation @xmath474 to @xmath275 ( and similarly , @xmath468 to @xmath182 ) might require several transformation be done on the premise of the derivation , e.g. , to avoid clashes of nominal constants , etc .",
    ", so let us suppose that @xmath475 and @xmath476 are of the following shapes : @xmath208 { { \\sigma ' ; { \\underline{\\delta_1 } } \\seqsym \\forall x.d } } { \\deduce{{\\sigma ' , h ; \\delta_1 \\seqsym d[h'\\,\\vec d / x]}}{{{\\cal g}}_1(\\pi_1 ' ) } } \\qquad \\infer[{\\forall{\\cal l } } ] { { \\sigma ' ; \\forall x.d , { \\underline{b_2 } } , \\ldots , { \\underline{b_n } } , { \\underline{\\gamma } } \\seqsym { \\underline{c } } } } { \\deduce{{\\sigma ' ; d[s / x ] , { \\underline{b_2}},\\ldots , { \\underline{b_n } } , { \\underline{\\gamma } } \\seqsym { \\underline{c } } } } { { { \\cal g}}(\\pi ' ) } } \\ ] ] where @xmath477 and @xmath478 = { \\underline{b[t / x]}}.$ ] if the support of @xmath478 $ ] is larger than @xmath479 , then the reduction rule for @xmath360 requires further transformations be applied to @xmath480 , i.e. , as is described in lemma  [ lm : supp1 ] .",
    "so let us suppose that this transformation is applied , resulting in a derivation @xmath481}}{{{\\cal g}}_1'(\\pi_1 ' ) } \\enspace .\\ ] ] then @xmath461 reduces to @xmath196 { { \\sigma ' ; { \\underline{\\delta_1}},\\ldots,{\\underline{\\delta_n } } , { \\underline{\\gamma } } \\seqsym { \\underline{c } } } } { \\deduce{{\\sigma ' ; { \\underline{\\delta_1 } } \\seqsym d[s / x ] } }   { { { \\cal g}}_1'(\\pi_1')[\\lambda \\vec",
    "e.s / f ] } & \\deduce{{{\\underline{\\delta_2}}\\seqsym { \\underline{b_2}}}}{{{\\cal f}}_2(\\pi_2 ) } & \\ldots & \\deduce{{{\\underline{\\delta_2}}\\seqsym { \\underline{b_2}}}}{{{\\cal f}}_n(\\pi_n ) } & \\deduce{{\\sigma ' ; d[s / x ] , \\ldots , { \\underline{\\gamma } } \\seqsym { \\underline{c}}}}{{{\\cal g}}(\\pi ' ) } } \\ ] ] which is reducible by the outer induction hypothesis .",
    "@xmath482 suppose @xmath275 and @xmath182 are @xmath373 { { \\delta_1\\seqsym nat\\,m } } { \\deduce{{\\delta_1\\seqsym nat\\,m}}{\\pi_1 ' } } \\qquad \\infer[{nat{\\cal",
    "l } } ] { { nat\\,(s\\,i ) , b_2 , \\ldots , b_n,\\gamma\\seqsym c } } { \\deduce{{\\seqsym d\\,z}}{\\pi ' } & \\deduce{{d\\,j\\seqsym d\\,(s\\,j)}}{\\pi '' } & \\deduce{{d\\,(s\\,m),b_2,\\ldots , b_n,\\gamma\\seqsym c}}{\\pi ' '' } } \\ ] ] then @xmath475 and @xmath476 are @xmath373 { { { \\underline{\\delta_1}}\\seqsym nat\\,i } } { \\deduce{{{\\underline{\\delta_1}}\\seqsym nat\\,i}}{{{\\cal f}}_1(\\pi_1 ' ) } } \\qquad \\infer[{nat{\\cal l } } ] { { nat\\,(s\\,i ) , { \\underline{b_2 } } , \\ldots , { \\underline{b_n}},{\\underline{\\gamma}}\\seqsym { \\underline{c } } } } { \\deduce{{\\seqsym d\\,z}}{\\pi ' } & \\deduce{{d\\,j\\seqsym d\\,(s\\,j)}}{\\pi '' } & \\deduce{{d\\,(s\\,i),{\\underline{b_2}},\\ldots,{\\underline{b_n}},{\\underline{\\gamma}}\\seqsym { \\underline{c}}}}{{{\\cal f}}(\\pi ' '' ) } } \\ ] ] note that the derivations @xmath319 and @xmath366 are not affected by the transformation @xmath468 since @xmath483 is a closed term with no occurrences of nominal constants and @xmath440 in @xmath366 is a new eigenvariable .",
    "let @xmath358 be the derivation @xmath196 { { { \\underline{\\delta_1}}\\seqsym d\\,i } } { \\deduce{{{\\underline{\\delta_1}}\\seqsym nat\\,i}}{{{\\cal f}}_1(\\pi_1 ' ) } &   \\infer[{nat{\\cal l } } ] { { nat\\,i\\seqsym d\\,i } } { \\deduce{{\\seqsym d\\,z}}{\\pi ' } & \\deduce{{d\\,j\\seqsym d\\,(s\\,j)}}{\\pi '' } & \\infer[id_\\pi ] { { d\\,i\\seqsym d\\,i } } { } } } \\enspace .\\ ] ] since the height of the right premise is no larger than @xmath185 , and @xmath369 is a predecessor of @xmath275 , @xmath358 is reducible by induction on the reduction of @xmath484 let @xmath162 be the support of @xmath485 we construct the derivation @xmath376 of @xmath486 from @xmath366 using the procedures described in definition  [ def : subst ] and definition  [ def : res ] .",
    "let @xmath378 be @xmath487 { { { \\underline{\\delta_1}}\\seqsym d\\,(s\\ , i ) } } { \\deduce{{{\\underline{\\delta_1}}\\seqsym d\\,i}}{\\xi_1 } & \\deduce{{d\\,i\\seqsym d\\,(s\\,i)}}{\\pi^{\\bullet}[\\lambda \\vec c.i / h ] } } \\ ] ] since @xmath488 ) \\leq ht ( \\pi'')$ ] , by the outer induction hypothesis , @xmath378 is also reducible .",
    "therefore the reduct of @xmath461 @xmath196 { { { \\underline{\\delta_1 } } , \\ldots , { \\underline{\\delta_2}},{\\underline{\\gamma}}\\seqsym { \\underline{c } } } } { \\deduce{{{\\underline{\\delta_1}}\\seqsym d\\,(s\\,i)}}{\\xi_2 } & \\deduce{{{\\underline{\\delta_2}}\\seqsym { \\underline{b_2}}}}{{{\\cal f}}_2(\\pi_2 ) } & \\ldots & \\deduce{{{\\underline{\\delta_n}}\\seqsym { \\underline{b_n } } } } { { { \\cal f}}_n(\\pi_n ) } & \\deduce{{d\\,(s\\,i ) , { \\underline{b_2 } } , \\ldots , { \\underline{\\gamma}}\\seqsym { \\underline{c}}}}{{{\\cal f}}(\\pi ' '' ) } } \\ ] ] is reducible by the outer induction hypothesis .",
    "@xmath391 suppose @xmath275 is @xmath128 { { s = t , \\delta_1\\seqsym b_1 } } { \\left\\ { \\raisebox{-1.5ex}{\\deduce{{\\delta_1\\theta\\seqsym b_1\\theta}}{\\pi^\\theta } } \\right\\}_\\theta } \\ ] ] then @xmath475 is @xmath489 { { { \\underline{s } } = { \\underline{t } } , { \\underline{\\delta_1}}\\seqsym { \\underline{b_1 } } } } { \\left\\ { \\raisebox{-1.5ex}{\\deduce{{{\\underline{\\delta_1}}\\theta\\seqsym { \\underline{b_1}}\\theta}}{\\pi^{\\bullet\\rho } } } \\right\\}_\\rho } \\ ] ] where each @xmath490 is obtained from some @xmath491 by the transformations described in definition  [ def : weak ] , definition  [ def : subst ] , definition  [ def : perm ] and definition  [ def : res ] . we denote with @xmath492 the substitution @xmath80 such that @xmath490 is constructed out of @xmath493 thus we can write each @xmath490 as the derivation @xmath494 for some transformation @xmath495 the reduct of @xmath461 @xmath128 { { \\qquad \\qquad \\qquad \\quad { \\underline{s}}= { \\underline{t}},{\\underline{\\delta_1'}},{\\underline{\\delta_2}},\\ldots,{\\underline{\\delta_n}},{\\underline{\\gamma}}\\seqsym { \\underline{c } } \\qquad \\qquad \\qquad \\qquad \\qquad \\qquad \\qquad\\qquad } } { \\left\\ { \\raisebox{-1.5ex } { \\infer[mc ] { { { \\underline{\\delta_1'}}\\rho , { \\underline{\\delta_2}}\\rho,\\ldots , { \\underline{\\delta_n}}\\rho , { \\underline{\\gamma}}\\rho\\seqsym { \\underline{c } } \\rho } } { \\deduce{{{\\underline{\\delta_1'}}\\rho\\seqsym { \\underline{b_1}}\\rho}}{{{\\cal f}}_\\rho(\\pi^{f(\\rho ) } ) } & \\deduce{{{\\underline{\\delta_2}}\\rho\\seqsym { \\underline{b_2}}\\rho}}{{{\\cal f}}_2(\\pi_2)\\rho } & \\ldots & \\deduce{{{\\underline{\\delta_n}}\\rho\\seqsym { \\underline{b_n}}\\rho}}{{{\\cal f}}_n(\\pi_n)\\rho } & \\deduce{{{\\underline{b_1}}\\rho,\\ldots,{\\underline{b_n}}\\rho,{\\underline{\\gamma}}\\rho\\seqsym { \\underline{c}}\\rho}}{{{\\cal f}}(\\pi)\\rho } } } \\right\\}_\\rho } \\ ] ] each premise derivation of the above derivation is reducible by the induction hypothesis on the reduction of @xmath275 , since each @xmath496 is a predecessor of @xmath484 the reduct of @xmath461 is therefore reducible by definition  [ def : reducibility ] .",
    "@xmath497 suppose @xmath182 is @xmath357 { { b_1 , \\ldots , b_n , \\gamma\\seqsym   { c_1 { \\supset}c_2 } } } { \\deduce{{b_1 , \\ldots , b_n , \\gamma , c_1 \\seqsym c_2}}{{{\\cal f}}(\\pi ' ) } } \\ ] ] then @xmath498 @xmath357 { { { \\underline{b_1 } } , \\ldots , { \\underline{b_n } } , { \\underline{\\gamma}}\\seqsym { \\underline{c_1 { \\supset}c_2 } } } } { \\deduce{{{\\underline{b_1 } } , \\ldots , { \\underline{b_n } } , { \\underline{\\gamma } } , { \\underline{c_1 } } \\seqsym { \\underline{c_2}}}}{{{\\cal f}}(\\pi ' ) } } \\ ] ] let @xmath358 be @xmath499 { { { \\underline{\\delta_1 } } , \\ldots , { \\underline{\\delta_n } } , { \\underline{c_1}}\\seqsym { \\underline{c_2 } } } } { \\deduce{{{\\underline{\\delta_1}}\\seqsym { \\underline{b_1}}}}{{{\\cal f}}_1(\\pi_1 ) } & \\ldots & \\deduce{{{\\underline{\\delta_n}}\\seqsym { \\underline{b_n}}}}{{{\\cal f}}_n(\\pi_n ) } & \\deduce{{{\\underline{b_1}},\\ldots,{\\underline{b_1}},{\\underline{\\gamma } } , { \\underline{c_1}}\\seqsym { \\underline{c_2}}}}{{{\\cal f}}(\\pi ' ) } } \\ ] ] which is reducible by the outer induction hypothesis .",
    "let @xmath378 be the derivation @xmath357 { { { \\underline{\\delta_1 } } , \\ldots , { \\underline{\\delta_n } } , { \\underline{\\gamma}}\\seqsym { \\underline{c_1{\\supset}c_2 } } } } { \\deduce{{{\\underline{\\delta_1 } } , \\ldots , { \\underline{\\delta_n } } , { \\underline{\\gamma } } , { \\underline{c_1}}\\seqsym { \\underline{c_2}}}}{\\xi_1 } } \\enspace , \\ ] ] which is the reduct of @xmath500 to show that @xmath378 is reducible , we need to show that for any @xmath501 , and for any derivation @xmath366 of @xmath502 where @xmath503 , the derivation @xmath504 @xmath196 { { \\delta , { \\underline{\\delta_1}}_{{{\\cal g}}_1 } , \\ldots , { \\underline{\\delta_n}}_{{{\\cal g}}_n } , { \\underline{\\gamma}}_{{{\\cal g}}}\\seqsym { \\underline{c_2}}_{{{\\cal g } } } } } { \\deduce{{\\delta\\seqsym d}}{\\pi '' } & \\deduce{{d , { \\underline{\\delta_1}}_{{{\\cal g}}_1 } , \\ldots , { \\underline{\\delta_n}}_{{{\\cal g}}_n } ,        { \\underline{\\gamma}}_{{{\\cal g}}}\\seqsym { \\underline{c_2}}_{{{\\cal g } } } } } { { { \\cal t}}''(\\xi_2 ) } } \\ ] ] is reducible . here",
    "the transformations @xmath505 and @xmath506 are transformations associated with the premise derivations in @xmath507 @xmath504 is reducible if for any transformation @xmath508 , every reduct of the derivation @xmath509 is reducible .",
    "the reduct of @xmath509 in this case is : @xmath342 { { { \\underline{\\delta } } , { \\underline{\\delta_1 } } , \\ldots , { \\underline{\\delta_n } } , { \\underline{\\gamma}}\\seqsym { \\underline{c_2 } } } } { \\deduce{{{\\underline{\\delta}}\\seqsym { \\underline{d}}}}{{{\\cal h}}'(\\pi '' ) } & \\deduce{{{\\underline{\\delta_1}}\\seqsym { \\underline{b_1}}}}{{{\\cal h}}_1(\\pi_1 ) } & \\ldots & \\deduce{{{\\underline{\\delta_n}}\\seqsym { \\underline{b_n}}}}{{{\\cal h}}_n(\\pi_n ) } & \\deduce{{{\\underline{d } } , { \\underline{b_1 } } , \\ldots , { \\underline{b_n } } , { \\underline{\\gamma}}\\seqsym { \\underline{c_2}}}}{{{\\cal h}}''(\\pi ' ) } } \\ ] ] where @xmath510 and @xmath511 are transformations applied to the premises of @xmath512 and @xmath513 is the transformation applied to the left premise of @xmath514 this derivation is reducible by the outer induction hypothesis .",
    "[ cor : reducibility ] every derivation is reducible .",
    "this result follows immediately from lemma  [ lm : reducibility ] with @xmath515    [ thm : cut elim ] the cut rule is admissible in @xmath33",
    ".    follows immediately from corollary  [ cor : reducibility ] , lemma  [ lm : reducible implies norm ] and lemma  [ lm : norm - cut - free ] .",
    "the logic @xmath33 is consistent , i.e. , it is not the case that both @xmath165 and @xmath516 are provable .",
    "@xmath36        { { \\sigma ; { \\sigma \\triangleright b},\\gamma \\seqsym { \\sigma \\triangleright b } } } { } \\qquad   \\infer[cut ]          { { \\sigma ; \\delta,\\gamma \\seqsym { { \\cal c } } } }          { { \\sigma ; \\delta \\seqsym { { \\cal b } } } \\qquad           { \\sigma ; { { \\cal b}},\\gamma \\seqsym { { \\cal c}}}}\\ ] ] @xmath517        { { \\sigma ; { \\sigma \\triangleright b \\land c},\\gamma \\seqsym { { \\cal d } } }        }        { { \\sigma ; { \\sigma \\triangleright b } , { \\sigma \\triangleright c } , \\gamma \\seqsym { { \\cal d } } }        } \\qquad \\infer[{\\land{\\cal r } } ]        { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b \\land c } } }        {          { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b } }          \\qquad           { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright c } }        } \\ ] ] @xmath123        { { \\sigma ; { \\sigma \\triangleright b \\lor c},\\gamma \\seqsym { { \\cal d } } } }        { { \\sigma ; { \\sigma \\triangleright b},\\gamma \\seqsym { { \\cal d } } }          \\qquad          { \\sigma ; { \\sigma \\triangleright c},\\gamma \\seqsym { { \\cal d } } }        } \\qquad \\infer[{\\lor{\\cal r } } ]        { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b \\lor c } } }        { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b}}}\\ ] ] @xmath121        { { \\sigma ; { \\sigma \\triangleright \\bot},\\gamma \\seqsym { { \\cal b } } } }        { } \\qquad   \\infer[{\\lor{\\cal r}}]{{\\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b \\lor c } } }          { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright c}}}\\ ] ] @xmath124{{\\sigma ; { \\sigma \\triangleright b { \\supset}c},\\gamma \\seqsym { { \\cal d } } } }          { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b } }          \\qquad { \\sigma ; { \\sigma \\triangleright c},\\gamma \\seqsym { { \\cal d } } } } \\qquad   \\infer[{{\\supset}{\\cal r}}]{{\\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b { \\supset}c } } }          { { \\sigma ; { \\sigma \\triangleright b},\\gamma \\seqsym { \\sigma \\triangleright c}}}\\ ] ] @xmath125        { { \\sigma ; { \\sigma \\triangleright \\forall_\\gamma x.b},\\gamma \\seqsym { { \\cal c } } }        }        {          { \\sigma , \\sigma \\vdash t : \\gamma }          \\qquad          { \\sigma ; { \\sigma \\triangleright b[t / x]},\\gamma \\seqsym { { \\cal c } } }        } \\qquad \\infer[{\\forall{\\cal r } } ]        { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright \\forall x.b } } }        { { \\sigma , h ; \\gamma \\seqsym { \\sigma \\triangleright b[(h~\\sigma)/x]}}}\\ ] ] @xmath518{{\\sigma ; { \\sigma \\triangleright \\exists x.b},\\gamma \\seqsym { { \\cal c } } } }          { { \\sigma , h ; { \\sigma \\triangleright b[(h~\\sigma)/x]},\\gamma \\seqsym { { \\cal c } } } } \\qquad   \\infer[{\\exists{\\cal r } } ]        { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright \\exists_\\gamma x.b } } }        {          { \\sigma , \\sigma \\vdash t : \\gamma } \\qquad          { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright b[t / x]}}}\\ ] ] @xmath519 { { \\sigma ; { \\sigma \\triangleright \\nabla x\\ b},\\gamma \\seqsym { { \\cal c } } } } { { \\sigma ; { ( \\sigma , y ) \\triangleright b[y / x ] } , \\gamma   \\seqsym { { \\cal c } } } } \\qquad \\infer[{\\nabla{\\cal r } } ] { { \\sigma ; \\gamma \\seqsym { \\sigma \\triangleright \\nabla x\\ b } } } { { \\sigma ; \\gamma \\seqsym { ( \\sigma , y ) \\triangleright b[y / x ] } } } \\ ] ] @xmath247{{\\sigma ; { { \\cal b}},\\gamma \\seqsym { { \\cal c } } } }          { { \\sigma ; { { \\cal b}},{{\\cal b}},\\gamma \\seqsym { { \\cal c } } } } \\qquad \\infer[{\\hbox{\\sl w}{\\cal",
    "l } } ]        { { \\sigma ; { { \\cal b } } , \\gamma \\seqsym { { \\cal c } } } }        { { \\sigma ; \\gamma \\seqsym { { \\cal c } } } } \\qquad \\infer[{\\top{\\cal r}}]{{\\sigma ; \\gamma \\seqsym { \\sigma \\triangleright \\top}}}{}\\ ] ]    we now show that the formulation of @xmath48 is equivalent to @xmath50 extended with the axiom schemes of name permutations and weakening : @xmath520 where @xmath4 is not free in @xmath5 in the second scheme .",
    "sequents in @xmath50 are expressions of the form @xmath521 @xmath65 is the _ signature _ of the sequent , @xmath66 is a list of variables locally scoped over @xmath67 , and is referred to as _",
    "local signature_. the expression @xmath522 is called a _ local judgment _ , or _",
    "judgment _ for short . in  @xcite ,",
    "local judgments are considered equal modulo renaming of their local signatures , e.g. , @xmath523 is equal to @xmath524 local judgments are ranged over by scripted capital letters , e.g. , @xmath525 , @xmath526 , etc . for the purpose of proving the correspondence with @xmath48 ,",
    "however , we will make this renaming step explicit , by including the rules : @xmath527 { { { \\vec x \\triangleright b } , \\gamma\\seqsym { { \\cal c } } } } { { { \\vec y \\triangleright b ' } , \\gamma\\seqsym { { \\cal c } } } } \\qquad \\infer[{\\alpha_{\\cal l } } ,   \\lambda \\vec x.b \\equiv_\\alpha",
    "\\lambda \\vec y.b ' ] { { \\gamma\\seqsym { \\vec x \\triangleright b } } } { { \\gamma\\seqsym { \\vec y \\triangleright b'}}}\\ ] ] the inference rules of @xmath50 are given in figure  [ fig : folnb ] .",
    "we now consider the correspondence between @xmath48 with @xmath50 extended with the following axiom schemes : @xmath528 @xmath529 we can equivalently state these two axioms as the following inference rules : @xmath530 { { { ( \\vec x , a , b,\\vec y ) \\triangleright b } , \\gamma\\seqsym { { \\cal c } } } } { { { ( \\vec x , b , a,\\vec y ) \\triangleright b } , \\gamma\\seqsym { { \\cal c } } } } \\qquad \\infer[{p{\\cal",
    "l } } ] { { \\gamma\\seqsym { ( \\vec x , a , b,\\vec y ) \\triangleright b } } } { { \\gamma\\seqsym { ( \\vec x , b , a,\\vec y ) \\triangleright b}}}\\ ] ] @xmath531 { { { ( \\vec x\\vec y ) \\triangleright b } , \\gamma\\seqsym { { \\cal c } } } } { { { ( \\vec x , a,\\vec y ) \\triangleright b } , \\gamma\\seqsym { { \\cal c } } } } \\qquad \\infer[{ss{\\cal r } } ,   a \\not \\in \\{\\vec x , \\vec y\\ } ] { { \\gamma\\seqsym { ( \\vec x\\vec y ) \\triangleright b } } } { { \\gamma\\seqsym { ( \\vec x , a,\\vec y ) \\triangleright b } } } \\ ] ] @xmath532 { { { ( \\vec x , a,\\vec y ) \\triangleright b } , \\gamma\\seqsym { { \\cal c } } } } { { { ( \\vec x\\vec y ) \\triangleright b } , \\gamma\\seqsym { { \\cal c } } } } \\qquad \\infer[{ss{\\cal r } } ,   a \\not \\in supp(b ) ] { { \\gamma\\seqsym { ( \\vec x , a,\\vec y ) \\triangleright b } } } { { \\gamma\\seqsym { ( \\vec x\\vec y ) \\triangleright b } } } \\ ] ] implicit in the above rules is the assumption that variables in local signatures are considered as special constants , much like the nominal constants in @xmath48 . the support of @xmath5 , within a local signature @xmath533 , is defined similarly as it is in @xmath48 : it is the set @xmath534    the logical system with the inference rules in figure  [ fig : folnb ] together with @xmath535 , @xmath536 , @xmath537 , @xmath538 , @xmath539 , @xmath540 , @xmath541 and @xmath542 is referred to as @xmath543 . in relating @xmath48 and @xmath543 , we map the local signatures to nominal constants , and vice versa . in the following , given a formula @xmath5 , we assume a particular enumeration of the nominal constants appearing in @xmath5 based the left - to - right order of their appearance in @xmath5 .",
    "* suppose @xmath182 ends with @xmath551 @xmath120 { { \\gamma ' , b_i\\seqsym b_0 } } { \\pi.b_i = \\pi'.b_0}\\ ] ] the permutations @xmath37 and @xmath38 can be imitated by a series of renaming ( @xmath535 and @xmath536 rules ) .",
    "the derivation @xmath319 is therefore constructed by applying a series of @xmath552 , @xmath553 , followed by the @xmath187 rule .",
    "* suppose @xmath182 ends with @xmath554 in this case we suppose that @xmath555 @xmath357 { { b_1,\\ldots , b_n\\seqsym c { \\supset}d } } { \\deduce{{b_1,\\ldots , b_n , c\\seqsym d}}{\\pi_1}}\\ ] ] by induction hypothesis we have a derivation @xmath276 of @xmath556 we first have to weaken the signatures @xmath437 and @xmath557 to @xmath558 before applying the introduction rule for @xmath56 .",
    "that is , @xmath319 is the derivation @xmath357 { { { \\vec c_1 \\triangleright b_1,\\ldots , { \\vec c_n \\triangleright b_n}}\\seqsym { \\vec c_0 \\triangleright c { \\supset}d } } } { \\infer [ * ] { { { \\vec c_1 \\triangleright b_1,\\ldots , { \\vec c_n \\triangleright b_n } } , { \\vec c_0 \\triangleright c}\\seqsym { \\vec c_0 \\triangleright d } } } {    \\infer [ ]     { \\makebox[\\infwidthi ] { } }     {          \\deduce{{{\\vec c_1 \\triangleright b_1,\\ldots , { \\vec c_n \\triangleright b_n } } , { \\vec a \\triangleright c}\\seqsym { \\vec b \\triangleright d } }   } { \\pi_2 }     } } } \\ ] ] here the star ` * ' denotes a series of applications of @xmath541 , @xmath542 , @xmath537 and @xmath559 * suppose @xmath182 is @xmath282 { { b_1,\\ldots , b_n\\seqsym \\exists x.c } } { \\deduce{{b_1,\\ldots , b_n\\seqsym c[t / x]}}{\\pi_1}}\\ ] ] it is possible that @xmath22 contains new constants that are not in the support of @xmath560 suppose @xmath557 is an enumeration of the support of @xmath561 $ ] .",
    "the derivation @xmath319 is constructed as follows @xmath562 { { { \\vec c_1 \\triangleright b_1 } , \\ldots , { \\vec c_n \\triangleright b_n } \\seqsym { \\vec c_0 \\triangleright \\exists x.c } } } { \\infer [ ] { \\makebox[\\infwidthi ] { } } { \\infer[{\\exists{\\cal r } } ] {   { { \\vec c_1 \\triangleright b_1 } , \\ldots , { \\vec c_n \\triangleright b_n } \\seqsym { \\vec d \\triangleright \\exists",
    "x.c } } } { \\deduce {   { { \\vec c_1 \\triangleright b_1 } , \\ldots , { \\vec c_n \\triangleright b_n } \\seqsym { \\vec d \\triangleright c[t / x ] } } } { \\pi_2 } } } } \\ ] ] where @xmath276 is obtained from induction hypothesis applied to @xmath275 , and the rule ` * ' denotes a series of applications of @xmath540 ( for introducing new constants ) and @xmath538 ( for rearranging the order of the local signature ) . * for other cases",
    ", the construction of @xmath319 follows the same pattern as in the previous cases , i.e. , by induction hypothesis , followed by some rearranging , extension , or weakening of local signatures .",
    "suppose @xmath182 is a derivation of @xmath563 we construct a derivation @xmath319 of @xmath312 by induction on @xmath185 .",
    "we show here the interesting cases ; the other cases follow immediately from induction hypothesis :    * if @xmath182 ends with @xmath187 , @xmath564 , or @xmath565 then @xmath319 ends with the same rule . *",
    "suppose @xmath182 is @xmath566 { { { \\vec c_1 \\triangleright b_1 } , \\ldots , { \\vec c_n",
    "\\triangleright b_n}\\seqsym { \\vec c_0 \\triangleright b_0 } } } { \\deduce{{{\\vec c_1 \\triangleright b_1 } , \\ldots , { \\vec c_n \\triangleright b_n } \\seqsym { \\vec d \\triangleright b } } } { \\pi_1 } } \\ ] ] by induction hypothesis , there is a derivation @xmath276 of @xmath567 to get @xmath319 apply the procedure in definition  [ def : perm ] to @xmath276 to rename @xmath5 to @xmath257 .",
    "* suppose @xmath182 is @xmath208 { { { \\vec c_1 \\triangleright b_1 } , \\ldots , { \\vec c_n \\triangleright b_n}\\seqsym { \\vec c_0 \\triangleright \\forall x.c } } } { \\deduce {   { { \\vec c_1 \\triangleright b_1 } , \\ldots , { \\vec c_n \\triangleright b_n}\\seqsym { \\vec c_0 \\triangleright c[(h\\,\\vec c_0)/x ] } } } { \\pi_1 } } \\ ] ] by induction hypothesis , there is a derivation @xmath276 of @xmath568}}.$ ] suppose @xmath569 then @xmath319 is @xmath208 { { b_1,\\ldots , b_n\\seqsym \\forall x.c } } { \\deduce{{b_1,\\ldots , b_n\\seqsym c[h'\\,\\vec d / x]}}{\\pi_2[\\lambda \\vec c_0.h'\\,\\vec d / h ] } } \\ ] ] * if @xmath182 ends with @xmath111 , apply the same construction as in the previous case .",
    "[ thm : lg equal folnb ] let @xmath27 be a formula which contains no occurrences of nominal constants",
    ". then @xmath27 is provable in @xmath50 extended with the axiom schemes @xmath32 and @xmath570 if and only if @xmath27 is provable in @xmath49                  d.  miller and c.  palamidessi .",
    "foundational aspects of syntax . in p.",
    "degano , r.  gorrieri , a.  marchetti - spaccamela , and p.  wegner , editors , _ acm computing surveys symposium on theoretical computer science : a perspective _ , volume  31 .",
    "acm , september 1999 .",
    "p.  schroeder - heister .",
    "cut - elimination in logics with definitional reflection . in d.  pearce and h.  wansing , editors , _ nonclassical logics and information processing _ ,",
    "volume 619 of _ lncs _ , pages 146171 .",
    "springer , 1992 ."
  ],
  "abstract_text": [
    "<S> this paper presents a cut - elimination proof for the logic @xmath0 , which is an extension of a proof system for encoding generic judgments , the logic @xmath1 of miller and tiu , with an induction principle . the logic @xmath0 , just as @xmath1 , features extensions of first - order intuitionistic logic with fixed points and a `` generic quantifier '' , @xmath2 , which is used to reason about the dynamics of bindings in object systems encoded in the logic . a previous attempt to extend @xmath1 with </S>",
    "<S> an induction principle has been unsuccessful in modeling some behaviours of bindings in inductive specifications . </S>",
    "<S> it turns out that this problem can be solved by relaxing some restrictions on @xmath2 , in particular by adding the axiom @xmath3 , where @xmath4 is not free in @xmath5 . </S>",
    "<S> we show that by adopting the equivariance principle , the presentation of the extended logic can be much simplified . </S>",
    "<S> this paper contains the technical proofs for the results stated in @xcite ; readers are encouraged to consult @xcite for motivations and examples for @xmath6 </S>"
  ]
}