{
  "article_text": [
    "peer - to - peer networks are becoming a popular architecture for content distribution @xcite .",
    "the basic premise in such networks is that any one of a set of `` replica '' nodes can provide the requested content , increasing the availability of interesting content without requiring the presence of any particular serving node .",
    "many peer - to - peer networks push index entries throughout the overlay peer network in response to lookup queries for specific content @xcite . these index entries point to the locations of replica nodes where the particular content can be served , and are typically cached for a finite amount of time , after which they are considered stale . until now , however , there has been little focus on how an individual peer node should choose among the returned index entries to forward client requests .",
    "one reason for considering this choice is load balancing .",
    "some replica nodes may have more capacity to answer queries for content than others , and the system can serve content in a more timely manner by directing queries to more capable replica nodes .    in this paper",
    "we explore the problem of load - balancing the demand for content in a peer - to - peer network .",
    "this problem is challenging for several reasons .",
    "first , in the peer - to - peer case there is no centralized dispatcher that performs the load - balancing of requests ; each peer node individually makes its own decision on how to allocate incoming requests to replicas .",
    "second , nodes do not typically know the identities of all other peer nodes in the network , and therefore they can not coordinate this decision with those other nodes . finally , replica nodes in peer - to - peer networks are not necessarily homogeneous",
    ". some replica nodes may be very powerful with great connectivity , whereas others may have limited inherent capacity to handle content requests .",
    "previous load - balancing techniques in the literature base their decisions on periodic or continuous updates containing information on _ load _ or _ available capacity_. we refer to this information as load - balancing information ( lbi ) . these techniques have not been designed with peer - to - peer networks in mind and thus    * do not take into account the heterogeneity of peer nodes ( e.g. , @xcite ) , or * use techniques such as migration or handoff of tasks that can not be used in a peer - to - peer environment ( e.g. , @xcite ) , or * suffer from significant load oscillations , or `` herd behavior '' @xcite , where peer nodes simultaneously forward an unpredictable number of requests to replicas with low reported load or high reported available capacity , causing them to become overloaded .",
    "this herd behavior defeats the attempt to provide load - balancing .",
    "most of these techniques also depend on the timeliness of lbi updates .",
    "the wide - area nature of peer - to - peer networks and the variation in transfer delays among peer nodes makes guaranteeing the timeliness of updates difficult .",
    "peer nodes will experience varying degrees of staleness in the lbi updates they receive depending on their distance from the source of updates . moreover , maintaining the timeliness of lbi updates is also costly , since all updates must travel across the internet to reach interested peer nodes .",
    "the smaller the inter - update period and the larger the overlay peer network , the greater the network traffic overhead incurred by lbi updates .",
    "therefore , in a peer - to - peer environment , an effective load - balancing algorithm should not be critically dependent on the timeliness of updates .    in this paper",
    "we propose a practical load - balancing algorithm , max - cap , that makes decisions based on the inherent maximum capacities of the replica nodes .",
    "we define maximum capacity as the maximum number of content requests per time unit that a replica claims it can handle .",
    "alternative measures such as maximum ( allowed ) connections can be used .",
    "the maximum capacity is like a contract by which the replica agrees to abide .",
    "if the replica can not sustain its advertised rate , then it may choose to advertise a new maximum capacity .",
    "max - cap is not critically tied to the timeliness or frequency of lbi updates , and as a result , when applied in a peer - to - peer environment , outperforms algorithms based on load or available capacity , whose benefits are heavily dependent on the timeliness of the updates .",
    "we show that max - cap takes peer node heterogeneity into account unlike algorithms based on load .",
    "while algorithms based on available capacity take heterogeneity into account , we show that they can suffer from load oscillations in a peer - to - peer network in the presence of small fluctuations in the workload even when the workload request rate is well below the total maximum capacities of the replicas . on the other hand ,",
    "max - cap avoids overloading replicas in such cases and is more resilient to very large fluctuations in workload .",
    "this is because a key advantage of max - cap is that it uses information that is not affected by changes in the workload .",
    "since it is most probable that each replica node will run other applications besides the peer - to - peer content distribution application , max - cap must also be able to handle fluctuations in `` extraneous load '' observed at the replicas .",
    "this is load caused by external factors such as other applications the users of the replica node are running or network conditions occurring at the replica node .",
    "we modify max - cap to perform load - balancing using the `` honored maximum capacity '' of each replica .",
    "this is the maximum capacity minus the extraneous load observed at the replica .",
    "although the honored maximum capacities may change frequently , the changes are independent of fluctuations in the content request workload . as a result , max - cap continues to provide better load - balancing than availability - based algorithms even when there are large fluctuations in the extraneous load .    in a peer - to - peer environment",
    "the expectation is that the set of participating nodes changes constantly .",
    "since replica arrivals to and departures from the peer network can affect the information carried in lbi updates , we also compare max - cap against availability - based algorithms when the set of replicas continuously changes .",
    "we show that max - cap is less affected by changes in the replica set than the availability - based algorithms .",
    "we evaluate load - based and availability - based algorithms and compare them with max - cap in the context of cup @xcite , a protocol that asynchronously builds and maintains caches of index entries in peer - to - peer networks through controlled update propagation .",
    "the index entries for a particular content contain ip addresses that point to replica nodes serving the content .",
    "load - balancing decisions are made from amongst these cached indices to determine to which of the replica nodes a request for that content should be forwarded .",
    "cup periodically propagates updates of desired index entries down a conceptual tree ( similar to an application - level multicast tree ) whose vertices are interested peer nodes .",
    "we leverage cup s propagation mechanism by piggybacking lbi such as load or available capacity onto the updates cup propagates .",
    "the rest of this paper is organized as follows .",
    "section  [ architecture ] briefly describes the cup protocol and how we use it to propagate the load - balancing information necessary to implement the various load - balancing algorithms across replica nodes .",
    "section  [ algorithms ] introduces the algorithms compared .",
    "section  [ experiments ] presents experimental results showing that in a peer - to - peer environment , max - cap outperforms the other algorithms with much less or no overhead .",
    "section  [ lbrelatedwork ] describes related work , and section  [ conclusions ] concludes the paper .",
    "in this section we briefly describe how we leverage the cup protocol to study the load - balancing problem in a peer - to - peer context .",
    "cup is a protocol for maintaining caches of index entries in peer - to - peer networks through _ _",
    "_ u__pdate _ _ p__ropagation",
    ".    cup supports both structured and unstructured networks . in structured networks",
    "lookup queries for particular content follow a well - defined path from the querying node toward an _ authority node _ , which is guaranteed to know the location of the content within the network .",
    "in unstructured networks lookup queries are flooded haphazardly throughout the network until a node that knows the location of the content is met . in this paper",
    ", we will describe how cup works within structured networks @xcite .    in cup",
    "every node in the peer - to - peer network maintains two logical channels per neighbor : a query channel and an update channel .",
    "the query channel is used to forward lookup queries for content of interest to the neighbor that is closest to the authority node for that content .",
    "the update channel is used to forward query responses asynchronously to a neighbor .",
    "these query responses contain sets of index entries that point to nodes holding the content in question .",
    "the update channel is also used to update the index entries that are cached at the neighbor .",
    "figure  [ fig : cuptrees ] shows a snapshot of cup in progress in a network of seven nodes .",
    "the four logical channels are shown between each pair of nodes .",
    "the left half of each node shows the set of content items for which the node is the authority .",
    "the right half shows the set of content items for which the node has cached index entries as a result of handling lookup queries .",
    "for example , node a is the authority node for content @xmath0 and nodes c , d , e , f , and g have cached index entries for content @xmath0 .",
    "the process of querying and updating index entries for a particular content @xmath1 forms a cup tree whose root is the authority node for content @xmath1 .",
    "the branches of the tree are formed by the paths traveled by lookup queries from other nodes in the network .",
    "for example , in figure  [ fig : cuptrees ] , node a is the root of the cup tree for @xmath0 and branch \\{f , d , c , a } has grown as a result of a lookup query for @xmath0 at node f.    it is the authority node a for content @xmath0 which is guaranteed to know the location of all nodes , called _ content replica nodes _ or simply _ replicas _ , that serve content @xmath0 . replica nodes first send birth messages to authority a to indicate they are serving content @xmath0 .",
    "they may also send periodic refreshes or invalidation messages to a to indicate they are still serving or no longer serving the content .",
    "a then forwards on any birth , refresh or invalidation messages it receives , which are propagated down the cup tree to all interested nodes in the network . for example , in figure  [ fig : cuptrees ] any update messages for index entries associated with content @xmath0 that arrive at a from replica nodes are forwarded down the @xmath0 cup tree to c at level 1 , d and e at level 2 , and f and g at level 3 .",
    "cup has been extensively studied in @xcite . while the specific update propagation protocol cup uses has been shown to provide benefits such as greatly reducing the latency of lookup queries ,",
    "the specific cup protocol semantics are not required for the purposes of load - balancing .",
    "we simply leverage the update propagation mechanism of cup to push lbi such as replica load or capacity to interested peer nodes throughout the overlay network .",
    "these peer nodes can then use this information when choosing to which replica a client request should be forwarded .",
    "we evaluate two different algorithms , inv - load and avail - cap . each is representative of a different class of algorithms that have been proposed in the distributed systems literature .",
    "we study how these algorithms perform when applied in a peer - to - peer context and compare them with our proposed algorithm , max - cap .",
    "these three algorithms depend on different lbi being propagated , but their overall goal is the same : to balance the demand for content fairly across the set of replicas providing the content .",
    "in particular , the algorithm should avoid overloading some replicas while underloading others , especially when the aggregate capacity of all replicas is enough to handle the content request workload .",
    "moreover , the algorithm should prevent individual replicas from oscillating between being overloaded and underloaded .",
    "oscillation is undesirable for two reasons .",
    "first , many applications limit the number of requests a host can have outstanding .",
    "this means that when a replica node is overloaded , it will drop any request it receives .",
    "this forces the requesting client to resend its request which has a negative impact on response time . even for applications that allow requests to be queued",
    "while a replica node is overloaded the queueing delay incurred will also increase the average response time .",
    "second , in a peer - to - peer network , the issue of fairness is sensitive .",
    "the owners of replica nodes are likely not to want their nodes to be overloaded while other nodes in the network are underloaded .",
    "an algorithm that can fairly distribute the request workload without causing replicas to oscillate between being overloaded and underloaded is preferable .",
    "we describe each of the algorithms we evaluate in turn :    _ allocation proportional to inverse load _ ( inv - load ) .",
    "there are many load - balancing algorithms that base the allocation decision on the load observed at and reported by each of the serving entities ( see related work section  [ lbrelatedwork ] ) .",
    "the representative load - based algorithm we examine in this paper is inv - load , based on the algorithm presented by genova et al .",
    "@xcite . in this algorithm , each peer node in the network chooses to forward a request to a replica with probability inversely proportional to the load reported by the replica .",
    "this means that the replica with the smallest reported load ( as of the last report received ) will receive the most requests from the node .",
    "load is defined as the number of request arrivals at the replica per time unit .",
    "other possible load metrics include the number of request connections open at the replica at reporting time @xcite or the request queue length at the replica @xcite .",
    "the inv - load algorithm has been shown to perform as well as or better than other proposed algorithms in a homogeneous environment and for this reason we focus on this algorithm in this study .",
    "but , as we show in section  [ heterogeneity ] , inv - load does not handle node heterogeneity well .    as we will see in section  [ inv - load - heterogeneity ] , inv - load",
    "is not designed to handle replica node heterogeneity .",
    "_ allocation proportional to available capacity _",
    "( avail - cap ) . in this algorithm",
    ", each peer node chooses to forward a request to a replica with probability proportional to the available capacity reported by the replica .",
    "available capacity is the maximum request rate a replica can handle minus the load ( actual request rate ) experienced at the replica .",
    "this algorithm is based on the algorithm proposed by zhu et al .",
    "@xcite for load sharing in a cluster of heterogeneous servers .",
    "avail - cap takes into account heterogeneity because it distinguishes between nodes that experience the same load but have different maximum capacities .",
    "intuitively , avail - cap seems like it should work ; it handles heterogeneity by sending more requests to the replicas that are currently more capable .",
    "replicas that are overloaded report an available capacity of zero and are excluded from the allocation decision until they once more report a positive available capacity .",
    "unfortunately , as we will show in section  [ oscillation ] , this exclusion can cause avail - cap to suffer from wild load oscillations .    both inv - load and avail - cap implicitly assume that the load or available capacity reported by a replica remains roughly constant until the next report .",
    "since both these metrics are directly affected by changes in the request workload , both algorithms require that replicas periodically update their lbi .",
    "( we assume replicas are not synchronized in when they send reports . )",
    "decreasing the period between two consecutive lbi updates increases the timeliness of the lbi at a cost of higher overhead ( in number of updates pushed through the peer - to - peer network ) . in large peer - to - peer networks",
    ", there may be several levels in the cup tree down which updates will have to travel , and the time to do so could be on the order of seconds .    _ allocation proportional to maximum capacity _ ( max - cap ) .",
    "this is the algorithm we propose . in this algorithm",
    ", each peer node chooses to forward a request to a replica with probability proportional to the maximum capacity of the replica .",
    "the maximum capacity is a contract each replica advertises indicating the number of requests the replica claims to handle per time unit .",
    "unlike load and available capacity , the maximum capacity of a replica is not affected by changes in the content request workload . therefore , max - cap does not depend on the timeliness of the lbi updates .",
    "in fact , replicas only push updates down the cup tree when they choose to advertise a new maximum capacity .",
    "this choice depends on extraneous factors that are unrelated to and independent of the workload ( see section  [ extraneousload ] ) .",
    "if replicas rarely choose to change contracts , max - cap incurs near - zero overhead .",
    "we believe that this independence of the timeliness and frequency of updates makes max - cap practical and elegant for use in peer - to - peer networks .",
    "in this section we describe experiments that measure the ability of the inv - load , avail - cap and max - cap algorithms to balance requests for content fairly across the replicas holding the content .",
    "we simulate a content - addressable network ( can ) @xcite using the stanford narses simulator @xcite . a can is an example of a structured peer - to - peer network , defined in section  [ architecture ] . in each of these experiments ,",
    "requests for a specific piece of content are posted at nodes throughout the can network for 3000 seconds . using the cup protocol described in section  [ architecture ]",
    ", a node that receives a content request from a local client retrieves a set of index entries pointing to replica nodes that serve the content .",
    "the node applies a load - balancing algorithm to choose one of the replica nodes .",
    "it then points the local client making the content request at the chosen replica .",
    "the simulation input parameters include : the number of nodes in the overlay peer - to - peer network , the number of replica nodes holding the content of interest , the maximum capacities of the replica nodes , the distribution of content request inter - arrival times , a seed to feed the random number generators that drive the content request arrivals and the allocation decisions of the individual nodes , and the lbi update period , which is the amount of time each replica waits before sending the next lbi update for the inv - load and avail - cap algorithms .",
    "we assign maximum capacities to replica nodes by applying results from recent work that measures the upload capabilities of nodes in gnutella networks @xcite . this work has found that for the gnutella network measured , around 10% of nodes are connected through dial - up modems , 60% are connected through broadband connections such as cable modem or dsl where the upload speed is about ten times that of dial - up modems , and the remaining 30% have high - end connections with upload speed at least 100 times that of dial - up modems .",
    "therefore we assign maximum capacities of 1 , 10 , and 100 requests per second to nodes with probabilty of 0.1 , 0.6 , and 0.3 , respectively .    in all the experiments we present in this paper , the number of nodes in the network is 1024 ,",
    "each individually deciding how to distribute its incoming content requests across the replica nodes .",
    "we use both poisson and pareto request inter - arrival distributions , both of which have been found to hold in peer - to - peer networks @xcite .",
    "we present five experiments .",
    "first we show that inv - load can not handle heterogeneity .",
    "we then show that while avail - cap takes replica heterogeneity into account , it can suffer from significant load oscillations caused by even small fluctuations in the workload .",
    "we compare max - cap with avail - cap for both poisson and bursty pareto arrivals .",
    "we also compare the effect on the performances of avail - cap and max - cap when replicas continuously enter and leave the system .",
    "finally , we study the effect on max - cap when replicas can not always honor their advertised maximum capacities because of significant extraneous load .      in this experiment",
    ", we examine the performance of inv - load in a heterogeneous peer - to - peer environment .",
    "we use a fairly short inter - update period of one second , which is quite aggressive in a large peer - to - peer network .",
    "we have ten replica nodes that serve the content item of interest , and we generate request rates for that item according to a poisson process with an arrival rate that is 80% of the total maximum capacities of the replicas . under such a workload , a good load - balancing algorithm should be able to avoid overloading some replicas while underloading others . figure  [ inv - load - hetero-289-scatterplot ] shows a scatterplot of how the utilization of each replica proceeds with time when using inv - load .",
    "we define utilization as the request arrival rate observed by the replica divided by the maximum capacity of the replica . in this graph",
    ", we do not distinguish among points of different replicas .",
    "we see that throughout the simulation at any point in time , some replicas are severely overutilized ( over 250% ) while others are lightly underutilized ( around 25% ) .",
    "figure  [ inv - load - hetero-289-overcapqueries ] shows for each replica , the percentage of all received requests that arrive while the replica is overloaded .",
    "this measurement gives a true picture of how well a load - balancing algorithm works for each replica . in figure",
    "[ inv - load - hetero - scatterplot - and - overcapqueries]b , the replicas that receive almost 100% of their requests while overloaded ( i.e. , replicas 0 - 6 ) are the low and middle - end replicas .",
    "the replicas that receive almost no requests while overloaded ( i.e. , replicas 7 - 9 ) are the high - end replicas .",
    "we see that inv - load penalizes the less capable replicas while giving the high - end replicas an easy time .",
    "inv - load is designed to perform well in a homogeneous environment . when applied in a heterogeneous environment such as a peer - to - peer network",
    ", it fails . as we will see in the next section max - cap",
    "is much better suited . apart from showing that max - cap has comparable load balancing capability with no overhead in a homogeneous environment ( see appendix )",
    ", we do not consider inv - load in the remaining experiments as our focus here is on heterogeneous environments .      in this set of experiments",
    "we examine the performance of avail - cap and compare it with max - cap .      in figures  [ avail - cap-289-scatterplot - pd-1 ] and [ max - cap-289-scatterplot ]",
    "we show the replica utilization versus time for an experiment with ten replicas with a poisson request arrival rate of 80% the total maximum capacities of the replicas . for avail - cap",
    ", we use an inter - update period of one second . for max - cap ,",
    "this parameter is inapplicable since replica nodes do not send updates unless they experience extraneous load ( see section  [ extraneousload ] ) .",
    "we see that avail - cap consistently overloads some replicas while underloading others .",
    "in contrast , max - cap tends to cluster replica utilization at around 80% .",
    "we ran this experiment with a range of poisson lambda rates and found similar results for rates that were 60 - 100% the total maximum capacities of the replicas .",
    "avail - cap consistently overloads some replicas while underloading others whereas max - cap clusters replica utilization at around x% utilization , where x is the overall request rate divided by the total maximum capacities of the replicas .",
    "it turns out that in avail - cap , unlike inv - load , it is not the same replicas that are consistently overloaded or underloaded throughout the experiment . instead ,",
    "from one instant to the next , individual replicas oscillate between being overloaded and severely underloaded .",
    "we can see a sampling of this oscillation by looking at the utilizations of some individual replicas over time . in figures",
    "[ avail - cap - low - rep]-[max - cap - high - rep ] , we plot the utilization over a one minute period in the experiment for a representative replica from each of the replica classes ( low , medium , and high maximum capacity ) .",
    "we also plot the ratio of the overall request rate to the total maximum capacities of the replicas and the line @xmath2 showing 100% utilization .",
    "we see that for all replica classes , avail - cap suffers from significant oscillation when compared with max - cap which causes little or no oscillation .",
    "this behavior occurs throughout the experiment .                        figures  [ avail - cap-289-overcapqueries - pd-1 ] and [ max - cap-289-overcapqueries ] show the percentage of requests that arrive at each replica while the replica is overloaded for avail - cap and max - cap respectively .",
    "we see that max - cap achieves much lower percentages than avail - cap .",
    "we also see in figure  [ max - cap-289-overcapqueries ] that max - cap exhibits a step - like behavior where the low - capacity replica ( replica 1 ) is overloaded for about 35% of its queries , the middle - capacity replicas ( replicas 0 and 2 - 6 ) are each overloaded for about 14% of their queries , and the high - capacity replicas ( replicas 7 - 9 ) are each overloaded for about 0.1% of their queries . to verify that this step effect is not a random coincidence , we ran a series of experiments , with ten replicas per experiment , and poisson arrivals of 80% the total maximum capacity , each time varying the seed fed to the simulator . in figure  [ max - cap-289-overcapqueries - manyseeds ]",
    ", we show the overloaded percentages for ten of these experiments . on the x - axis",
    "we order replicas according to maximum capacity , with the low - capacity replicas plotted first ( replica ids 1 through 10 ) , followed by the middle - capacity replicas ( replica ids 11 - 70 ) , followed by the high - capacity replicas ( replica ids 71 - 100 ) . from the figure we see that the step behavior consistently occurs .",
    "this step behavior occurs because the lower - capacity replicas have less tolerance for noise in the random coin tosses the nodes perform while assigning requests .",
    "they also have less tolerance for small fluctuations in the request rate . as a result",
    ", lower - capacity replicas are overloaded more easily than higher - capacity replicas .",
    "figure  [ avail - cap-289-overcapqueries - pd-1 ] shows that avail - cap with an inter - update period of one second causes much higher percentages than max - cap ( more than twice as high for the medium and high - end replicas ) .",
    "avail - cap also causes fairly even overloaded percentages at around 40% .",
    "again , to verify this evenness , in figure  [ avail - cap-289-overcapqueries - manyseeds - pd-1 ] , we show for a series of ten experiments , the percentage of requests that arrive at each replica while the replica is overloaded .",
    "we see that avail - cap consistently achieves roughly even percentages ( at around 40% ) across all replica types in contrast to the step effect observed by max - cap .",
    "this can be explained by looking at the oscillations observed by replicas in figures  [ avail - cap - low - rep]-[max - cap - high - rep ] . in avail - cap , each replica is overloaded for roughly the same amount of time regardless of whether it is a low , medium or high - capacity replica .",
    "this means that while each replica is getting the correct proportion of requests , it is receiving them at the wrong time and as a result all the replicas experience roughly the same overloaded percentages . in max - cap",
    ", we see that replicas with lower maximum capacity are overloaded for more time that higher - capacity replicas .",
    "consequently , higher - capacity replicas tend to have smaller overload percentages than lower - capacity replicas .",
    "the performance of avail - cap is highly dependent on the inter - update period used .",
    "we find that as we increase the period and available capacity updates grow more stale , the performance of avail - cap suffers more . as an example , in figure  [ avail - cap-289-overcapqueries - manyseeds - pd-10 ] , we show the overloaded query percentages in the same series of ten experiments for avail - cap with a period of ten seconds .",
    "the overloaded percentages jump up to about 80% across the replicas .        in a peer - to - peer environment",
    ", we argue that max - cap is a more practical choice than avail - cap .",
    "first , max - cap typically incurs no overhead .",
    "second , max - cap can handle workload rates that are below 100% the total maximum capacities and can handle small fluctuations in the workload as are typical in poisson arrivals .",
    "a question remaining is how do avail - cap and max - cap compare when workload rates fluctuate beyond the total maximum capacities of the replicas ?",
    "such a scenario can occur for example when requests are bursty , as when inter - request arrival times follow a pareto distribution .",
    "we examine pareto arrivals next .",
    "recent work has observed that in some peer - to - peer networks , request inter - arrivals exhibit burstiness on several time scales @xcite , making the pareto distribution a good candidate for modeling these inter - arrival times .",
    "the pareto distribution has two parameters associated with it : the shape parameter @xmath3 and the scale parameter @xmath4 .",
    "the cumulative distribution function of inter - arrival time durations is @xmath5 this distribution is heavy - tailed with unbounded variance when @xmath6 . for @xmath7 ,",
    "the average number of query arrivals per time unit is equal to @xmath8 . for @xmath9 ,",
    "the expectation of an inter - arrival duration is unbounded and therefore the average number of query arrivals per time unit is 0 .",
    "typically , pareto request arrivals are characterized by frequent and intense bursts of requests followed by idle periods of varying lengths . during the bursts",
    ", the average request arrival rate can be many times the total maximum capacities of the replicas .",
    "we present a representative experiment in which @xmath10 and @xmath11 are 1.1 and 0.000346 respectively .",
    "these particular settings cause bursts of up to 230% the total maximum capacities of the replicas . with such intense bursts , no load - balancing algorithm can be expected to keep replicas underloaded . instead the best an algorithm can do is to have the oscillation observed by each replica s utilization match the oscillation of the ratio of overall request rate to total maximum capacities .    in figures  [ pareto - repl1-avail - cap]-[pareto - repl9-max - cap ]",
    "we plot the same representative replica utilizations over a one minute period in the experiment .",
    "we also plot the ratio of the overall request rate to the total maximum capacities as well as the @xmath12 utilization line . from the figures we see that avail - cap suffers from much wilder oscillation than max - cap , causing much higher peaks and lower valleys in replica utilization than max - cap . moreover , max - cap adjusts better to the fluctuations in the request rate ; the utilization curves for max - cap tend to follow the ratio curve more closely than those for avail - cap .",
    "( note that idle periods contribute to the drops in utilization of replicas in this experiment .",
    "for example , an idle period occurs between times 324 and 332 at which point we see a decrease in both the ratio and the replica utilization . )                              from the experiments above we see that avail - cap can suffer from severe oscillation even when the overall request rate is well below ( e.g. , 80% ) the total maximum capacities of the replicas .",
    "the reason why avail - cap does not balance load well here is that a vicious cycle is created where the available capacity update of one replica affects a subsequent update of another replica .",
    "this in turn affects later allocation decisions made by nodes which in turn affects later replica updates .",
    "this description becomes more concrete if we consider what happens when a replica is overloaded .    in avail - cap ,",
    "if a replica becomes overloaded , it reports an available capacity of zero .",
    "this report eventually reaches all peer nodes , causing them to stop redirecting requests to the replica .",
    "the exclusion of the overloaded replica from the allocation decision shifts the entire burden of the workload to the other replicas .",
    "this can cause other replicas to overload and report zero available capacity while the excluded replica experiences a sharp decrease in its utilization .",
    "this sharp decrease causes the replica to begin reporting positive available capacity which begins to attract requests again . since in the meantime",
    "other replicas have become overloaded and excluded from the allocation decision , the replica receives a flock of requests which cause it to become overloaded again . as we observed in previous sections , a replica can experience wild and periodic oscillation where its utilization continuously rises above its maximum capacity and falls sharply .    in max - cap ,",
    "if a replica becomes overloaded , the overload condition is confined to that replica .",
    "the same is true in the case of underloaded replicas . since the overload /",
    "underload situations of the replicas are not reported , they do not influence follow - up lbi updates of other replicas .",
    "it is this key property that allows max - cap to avoid herd behavior .",
    "there are situations however where avail - cap performs well without suffering from oscillation ( see section  [ dynamicrepset ] ) .",
    "we next describe the factors that affect the performance of avail - cap to get a clearer picture of when the reactive nature of avail - cap is beneficial ( or at least not harmful ) and when it causes oscillation .",
    "there are four factors that affect the performance of avail - cap : the inter - update period @xmath13 , the inter - request period @xmath14 , the amount of time @xmath15 it takes for all nodes in the network to receive the latest update from a replica , and the ratio of the overall request rate to the total maximum capacities of the replicas .",
    "we examine these factors by considering three cases :    _ case 1 : _",
    "@xmath13 is much smaller than @xmath14 ( @xmath16 ) , and @xmath15 is sufficiently small so that when a replica pushes an update , all nodes in the cup tree receive the update before the next request arrival in the network . in this case ,",
    "avail - cap performs well since all nodes have the latest load - balancing information whenever they receive a request .",
    "_ case 2 : _",
    "@xmath13 is long relative to @xmath14 ( @xmath17 ) and the overall request rate is less than about 60% the total maximum capacities of the replicas .",
    "( this 60% threshold is specific to the particular configuration of replicas we use : 10% low , 60% medium , 30% high .",
    "other configurations have different threshold percentages that are typically well below the total maximum capacities of the replicas . ) in this case , when a particular replica overloads , the remaining replicas are able to cover the proportion of requests intended for the overloaded replica because there is a lot of extra capacity in the system . as a result",
    ", avail - cap avoids oscillations .",
    "we see experimental evidence for this in section  [ dynamicrepset ] .",
    "however , over - provisioning to have enough extra capacity in the system so that avail - cap can avoid oscillation in this particular case seems a high price to pay for load stability .",
    "_ case 3 : _",
    "@xmath13 is long relative to @xmath14 ( @xmath17 ) and the overall request rate is more than about 60% the total maximum capacities of the replicas . in this case , as we observe in the experiments above , avail - cap can suffer from oscillation .",
    "this is because every request that arrives directly affects the available capacity of one of the replicas .",
    "since the request rate is greater than the update rate , an update becomes stale shortly after a replica has pushed it out .",
    "however , the replica does not inform the nodes of its changing available capacity until the end of its current update period . by that point",
    "many requests have arrived and have been allocated using the previous , stale available capacity information .    in case 3",
    ", avail - cap can suffer even if @xmath18 and updates were to arrive at all nodes immediately after being issued .",
    "this is because all nodes would simultaneously exclude an overloaded replica from the allocation decision until the next update is issued .",
    "as @xmath15 increases , the staleness of the report only exacerbates the performance of avail - cap .    in a large peer - to - peer network ( more than 1000 nodes )",
    "we expect that @xmath15 will be on the order of seconds since current peer - to - peer networks with more than 1000 nodes have diameters ranging from a handful to several hops @xcite .",
    "we consider @xmath13 = 1 second to be as small ( and aggressive ) an inter - update period as is practical in a peer - to - peer network .",
    "in fact even one second may be too aggressive due to the overhead it generates .",
    "this means that when particular content experiences high popularity , we expect that typically @xmath19 . under such circumstances",
    "avail - cap is not a good load - balancing choice . for less popular content , where @xmath20 , avail - cap is a feasible choice , although it is unclear whether load - balancing across the replicas is as urgent here , since the request rate is low .",
    "the performance of max - cap is independent of the values of @xmath13 , @xmath14 , and @xmath15 .",
    "more importantly , max - cap does not require continuous updates ; replicas issue updates only if they choose to re - issue new contracts to report changes in their maximum capacities .",
    "( see section  [ extraneousload ] ) .",
    "therefore , we believe that max - cap is a more practical choice in a peer - to - peer context than avail - cap .",
    "a key characteristic of peer - to - peer networks is that they are subject to constant change ; peer nodes continuously enter and leave the system . in this experiment",
    "we compare max - cap with avail - cap when replicas enter and leave the system .",
    "we present results here for a poisson request arrival rate that is 80% the total maximum capacities of the replicas .",
    "we present two dynamic experiments . in both experiments ,",
    "the network starts with ten replicas and after a period of 600 seconds , movement into and out of the network begins . in the first experiment ,",
    "one replica leaves and one replica enters the network every 60 seconds . in the second and much more dynamic experiment ,",
    "five replicas leave and five replicas enter the network every 60 time units .",
    "the replicas that leave are randomly chosen .",
    "the replicas that enter the network enter with maximum capacities of 1 , 10 , and 100 with probability of 0.10 , 0.60 , and 0.30 respectively as in the initial allocation .",
    "this means that the total maximum capacities of the active replicas in the network varies throughout the experiment , depending on the capacities of the entering replicas .",
    "figures  [ dynamic - scatterplot-10 - 1 - 60-avail - cap ] and [ dynamic - scatterplot-10 - 1 - 60-max - cap ] show for the first dynamic experiment the utilization of active replicas throughout time as observed for avail - cap and max - cap .",
    "note that points with zero utilization indicate newly entering replicas .",
    "the jagged line plots the ratio of the current sum of maximum capacities in the network , @xmath21 , to the original sum of maximum capacities , @xmath22 . with each change in the replica set ,",
    "the replica utilizations for both avail - cap and max - cap change .",
    "replica utilizations rise when @xmath21 falls and vice versa .            from the figure",
    "we see that between times 1000 and 1820 , @xmath21 is between 1.75 and 2 times @xmath22 , and is more than double the overall workload rate of @xmath23 . during this time period , avail - cap performs quite well because the workload rate is not very demanding and there is plenty of extra capacity in the system ( case 2 above )",
    ". however , when at time 1940 @xmath21 falls back to @xmath22 , we see that both algorithms exhibit the same behavior as they do at the start , between times 0 and 600 .",
    "max - cap readjusts nicely and clusters replica utilization at around 80% , while avail - cap starts to suffer again .",
    "figures  [ dynamic - overloaded-10 - 1 - 60-avail - cap ] and [ dynamic - overloaded-10 - 1 - 60-max - cap ] show for the first dynamic experiment the percentage of queries that were received by each replica while the replica was overloaded for avail - cap and max - cap .",
    "replicas that entered and departed the network throughout the simulation were chosen from a pool of 50 replicas .",
    "those replicas in the pool which did not participate in this experiment do not have a bar associated with their i d in the figure . from the figure",
    ", we see that max - cap achieves smaller overload query percentages across all replica ids .",
    "figures  [ dynamic - scatterplot-10 - 5 - 60-avail - cap ] and [ dynamic - scatterplot-10 - 5 - 60-max - cap ] show the utilization scatterplot and figures  [ dynamic - overloaded-10 - 5 - 60-avail - cap ] and [ dynamic - overloaded-10 - 5 - 60-max - cap ] show the overloaded query percentage for the second dynamic experiment .",
    "we see that changing half the replicas every 60 seconds can dramatically affect @xmath21 .",
    "for example , when @xmath21 drops to @xmath24 at time 2161 , we see the utilizations rise dramatically for both avail - cap and max - cap .",
    "this is because during this period the workload rate is four times that of @xmath21 .",
    "however by time 2401 , @xmath21 has risen to @xmath25 which allows for both avail - cap and max - cap to adjust and decrease the replica utilization . at the next replica set change at time 2461",
    ", @xmath21 equals @xmath22 . during the next minute",
    "we see that max - cap overloads very few replicas whereas avail - cap does not recuperate as well . similarly , when examining the overloaded query percentage we see that max - cap achieves smaller percentages when compared with avail - cap .",
    "the two dynamic experiments we have described above show two things ; first , when the workload is not very demanding and there is unused capacity , the behaviors of avail - cap and max - cap are similar however , avail - cap suffers more as overall available capacity decreases .",
    "second , avail - cap is affected more by short - lived fluctuations ( in particular , decreases ) in total maximum capacity than max - cap .",
    "this is because the reactive nature of avail - cap causes it to adapt abruptly to changes in capacities , even when these changes are short - lived .",
    "when replicas can honor their maximum capacities , max - cap avoids the oscillation that avail - cap can suffer , and does so with no update overhead .",
    "occasionally , some replicas may not be able to honor their maximum capacities because of _ extraneous load _ caused by other applications running on the replicas or network conditions unrelated to the content request workload .    to deal with the possibility of extraneous load , we modify the max - cap algorithm slightly to work with honored maximum capacities . a replica s honored maximum capacity is its maximum capacity minus the extraneous load it is experiencing .",
    "the algorithm changes slightly ; a peer node chooses a replica to which to forward a content request with probability proportional to the honored maximum capacity advertised by the replica .",
    "this means that replicas may choose to send updates to indicate changes in their honored maximum capacities .",
    "however , as we will show , the behavior of max - cap is not tied to the timeliness of updates in the way avail - cap is .",
    "we view the honored maximum capacity reported by a replica as a contract .",
    "if the replica can not adhere to the contract or has extra capacity to give , but does not report the deficit or surplus , then that replica alone will be affected and may be overloaded or underloaded since it will be receiving a request share that is proportional to its previous advertised honored maximum capacity .",
    "if , on the other hand , a replica chooses to issue a new contract with the new honored maximum capacity , then this new update can affect the load balancing decisions of the nodes in the peer network and the workload could shift to the other replicas .",
    "this shift in workload is quite different from that experienced by avail - cap when a replica reports overload and is excluded .",
    "the contracts of any other replica will not be affected by this workload shift . instead ,",
    "the contract is are solely affected by the extraneous load that replica experiences which is independent of the extraneous load experienced by the replica issuing the new contract .",
    "this is unlike avail - cap where the available capacity reported by one replica directly affects the available capacities of the others .    in this section",
    "we study the performance of max - cap in an experiment where all replica nodes are continuously issuing new contracts .",
    "specifically , for each of ten replicas , we inject extraneous load into the replica once a second .",
    "the extraneous load injected is randomly chosen to be anywhere between 0% and 50% of the replica s original maximum capacity . figures  [ xload - max - cap - pd-1-upto50 ] and [ xload - overcapqu - max - cap - pd-1-upto50 ] show the replica utilization versus time and the overloaded query percentages for max - cap with an inter - update period of 1 second .",
    "the jagged line in figure  [ xload - max - cap - pd-1-upto50 ] shows the total honored maximum capacities over time . since throughout the experiment each replica s honored maximum capacity varies between 50% and 100% its original maximum capacity , the total maximum capacity is expected to hover at around 75% the original total maximum capacity and we see that the jagged line hovers around this value .",
    "we therefore generate poisson request arrivals with an average rate that is 80% of this value to keep consistent with our running example of 80% workload rates .            from the figures",
    ", we see that max - cap continues to cluster replica utilization at around 80% , but there are more overloaded replicas throughout time than when compared with the experiment in which all replicas adhere to their contracts all the time ( figure  [ max - cap-289-scatterplot ] ) .",
    "we also see that the overloaded percentages are higher than before ( figure  [ max - cap-289-overcapqueries ] ) .",
    "the reason for this performance degradation is that the randomly injected load ( of 0% to 50% ) can cause sharp rises and falls in the reported contract of each replica from one second to the next .",
    "since the change is so rapid , and updates take on the order of seconds to reach all allocating nodes , allocation decisions are continuously being made using stale information .    in the next experiment",
    "we use the same parameters as above but we change the update period to 10 seconds .",
    "figures  [ xload - max - cap - pd-10-upto50 ] and [ xload - overcapqu - max - cap - pd-10-upto50 ] show the utilization and overloaded percentages for this experiment .",
    "we see that the overloaded percentages increase only slightly while the overhead of pushing the updates decreases by a factor of ten .",
    "in contrast , when we perform the same experiment for avail - cap , we find that the overloaded query percentages for avail - cap increase from about 55 to more than 80% across all the replicas when the inter - update period changes from 1 to 10 seconds .",
    "however , this performance degradation is not so much due to the fluctuation of the extraneous load as it is due to avail - cap s tendency to oscillate when the request rate is greater than the update rate .",
    "we purposely choose this scenario to test how max - cap performs under widely fluctuating extraneous load on every replica .",
    "we generally expect that extraneous load will not fluctuate so wildly , nor will all replicas issue new contracts every second .",
    "moreover , we expect the inter - update period to be on the order of several seconds or even minutes , which further reduces overhead .",
    "we can view the effect of extraneous load on the performance of max - cap as similar to that seen in the dynamic replica experiments .",
    "when a replica advertises a new honored maximum capacity , it is as if that replica were leaving and being replaced by a new replica with a different maximum capacity .",
    "load - balancing has been the focus of many studies described in the distributed systems literature .",
    "we first describe load - balancing techniques that could be applied in a peer - to - peer context .",
    "we classify these into two categories , those algorithms where the allocation decision is based on load and those where the allocation decision is based on available capacity .",
    "we then describe other load - balancing techniques ( such as process migration ) that can not be directly applied in a peer - to - peer context .      of the load - balancing algorithms based on load , a very common approach to performing load - balancing",
    "is to choose the server with the least reported load from among a set of servers .",
    "this approach performs well in a homogeneous system where the task allocation is performed by a single centralized entity ( dispatcher ) which has complete up - to - date load information @xcite . in a system where multiple dispatchers are independently performing the allocation of tasks ,",
    "this approach however has been shown to behave badly , especially if load information used is stale @xcite .",
    "mitzenmacher talks about the `` herd behavior '' that can occur when servers that have reported low load are inundated with requests from dispatchers until new load information is reported @xcite .",
    "dahlin proposes _ load interpretation _",
    "algorithms @xcite .",
    "these algorithms take into account the age ( staleness ) of the load information reported by each of a set of distributed homogeneous servers as well as an estimate of the rate at which new requests arrive at the whole system to determine to which server to allocate a request .",
    "many studies have focused on the strategy of using a subset of the load information available .",
    "this involves first randomly choosing a small number , @xmath26 , of homogeneous servers and then choosing the least loaded server from within that set @xcite . in particular , for homogeneous systems , mitzenmacher @xcite studies the tradeoffs of various choices of @xmath26 and various degrees of staleness of load information reported . as the degree of staleness increases , smaller values of @xmath26 are preferable .",
    "genova et al .",
    "@xcite propose an algorithm , which we call _ inv - load _ that first randomly selects @xmath26 servers .",
    "the algorithm then weighs the servers by load information and chooses a server with probability that is inversely proportional to the load reported by that server .",
    "when @xmath27 , where @xmath28 is the total number of servers , the algorithm is shown to perform better than previous load - based algorithms and for this reason we focus on this algorithm in this paper .",
    "as we see in section  [ inv - load - heterogeneity ] , algorithms that base the decision on load do not handle heterogeneity .      of the load - balancing algorithms based on available capacity ,",
    "one common approach has been to choose amongst a set of servers based on the available capacity of each server @xcite or the available bandwidth in the network to each server @xcite .",
    "the server with the highest available capacity / bandwidth is chosen by a client with a request .",
    "the assumption here is that the reported available capacity / bandwidth will continue to be valid until the chosen server has finished servicing the client s request .",
    "this assumption does not always hold ; external traffic caused by other applications can invalidate the assumption , but more surprisingly the traffic caused by the application whose workload is being balanced can also invalidate the assumption .",
    "we see this in section  [ oscillation ] .    another approach is to to exclude servers that fail some utilization threshold and to choose from the remaining servers .",
    "mirchandaney et al .",
    "@xcite and shivaratri et al .",
    "@xcite classify machines as lightly - utilized or heavily - utilized and then choose randomly from the lightly - utilized servers .",
    "this work focuses on local - area distributed systems .",
    "colajanni et al .",
    "use this approach to enhance round - robin dns load - balancing across a set of widely distributed heterogeneous web servers @xcite , specifically , when a web server surpasses a utilization threshold it sends an alarm signal to the dns system indicating it is out of commission .",
    "the server is excluded from the dns resolution until it sends another signal indicating it is below threshold and free to service requests again . in this work ,",
    "the maximum capacities of the most capable servers are at most a factor of three that of the least capable servers .    as we see in section  [ oscillation ] , when applied in the context of a peer - to - peer network where many nodes are making the allocation decision and where the maximum capacities of the replica nodes can differ by two orders of magnitude , excluding a serving node temporarily from the allocation decision can result in load oscillation .",
    "we now describe load - balancing techniques that appear in the literature but can not be directly applied in a peer - to - peer context .",
    "there has been a large body of work devoted to the problem of load - balancing across a set of servers residing within a cluster . in some cluster systems",
    "there is one centralized dispatcher through which all incoming requests to the cluster arrive .",
    "the dispatcher has full control over the allocation of requests to servers @xcite . in other systems",
    "there are multiple dispatchers that make the allocation decision .",
    "one common approach is to have front - end servers sit at the entrance of the cluster intercepting incoming requests and allocating requests to the back - end servers within the cluster that actually satisfy the requests @xcite .",
    "still others have requests be evenly routed to servers within the cluster via dns rotation ( described below ) or via a single ip - switch sitting at the front of the cluster ( e.g. , @xcite ) . upon receiving a request each server then decides whether to satisfy the request or to dispatch it to another server @xcite .",
    "some cluster systems have the dispatchers(s ) poll each server or a random set of servers for load / availability information just before each allocation decision @xcite .",
    "others have the dispatcher(s ) periodically poll servers , while still others have servers periodically broadcast their load - balancing information .",
    "studies that compare the tradeoffs among these information dissemination options within a cluster include @xcite .",
    "regardless of the way this information is exchanged , cluster - based algorithms take advantage of the local - area nature of the cluster network to deliver timely load - balancing updates .",
    "this characteristic does not apply in a peer - to - peer network where load - balancing updates may have to travel across the internet .",
    "most cluster algorithms assume that servers are homogeneous .",
    "the exceptions to this rule include work by castro et al .",
    "this work assumes that servers will have different processing capabilities and allows each server to stipulate a _",
    "maximum desirable utilization _ that is incorporated into the load - balancing algorithm .",
    "the algorithm they use assumes that servers are synchronized and send their load updates at the same time .",
    "this is not true in a peer - to - peer network where replicas can not be synchronized .",
    "zhu et al . @xcite",
    "assume servers are heterogeneous and use a metric that combines available disk capacity and cup cycles to choose a server within the cluster to handle a task @xcite .",
    "their algorithm uses a combination of random polling before selection and random multicasting of load - balancing information to a select few servers .",
    "both are techniques that would not scale in a large peer - to - peer network .",
    "another well - studied load - balancing cluster approach is to have heavily loaded servers handoff requests they receive to other servers within the cluster that are less loaded or to have lightly loaded servers attempt to get tasks from heavily loaded servers ( e.g. , @xcite ) .",
    "this can be achieved through techniques such as http redirection ( e.g. , @xcite ) or packet header rewriting ( e.g. , @xcite ) or remote script execution @xcite .",
    "http redirection adds additional client round - trip latency for every rescheduled request .",
    "tcp / ip hand - off and packet header rewriting require changes in the os kernel or network interface drivers .",
    "remote script execution requires trust between the serving entities .",
    "similar to task handoff is the technique of process migration .",
    "process migration to spread job load across a set of servers in a local - area distributed system has been widely studied both in the theoretical literature as well as the systems literature ( e.g. , @xcite ) . in these systems",
    "overloaded servers migrate some of their currently running processes to lighter loaded servers in an attempt to achieve more equitable distribution of work across the servers .",
    "both task handoff and process migration require close coordination amongst serving entities that can be afforded in a tightly - coupled communication environment such as a cluster or local - area distributed system . in a peer - to - peer network",
    "where the replica nodes serving the content may be widely distributed across the internet , these techniques are not possible .",
    "a lot of work has looked at balancing load across multi - server homogeneous web sites by leveraging the dns service used to provide the mapping between a web page s url and the ip address of a web server serving the url .",
    "round - robin dns was proposed , where the dns system maps requests to web servers in a round - robin fashion @xcite .",
    "because dns mappings have a time - to - live ( ttl ) field associated with them and tend to be cached at the local name server in each domain , this approach can lead to a large number of client requests from a particular domain getting mapped to the same web server during the ttl period .",
    "thus , round - robin dns achieves good balance only so long as each domain has the same client request rate .",
    "moreover , round - robin load - balancing does not work in a heterogeneous peer - to - peer context because each serving replica gets a uniform rate of requests regardless of whether it can handle this rate .",
    "work that takes into account domain request rate improves upon round - robin dns and is described by colajanni et al .",
    "@xcite .",
    "colajanni et al .",
    "later extend this work to balance load across a set of widely distributed heterogeneous web servers @xcite .",
    "this work proposes the use of adaptive ttls , where the ttl for a dns mapping is set inversely proportional to the domain s local client request rate for the mapping of interest ( as reported by the domain s local name server ) .",
    "the ttl is at the same time set to be proportional to the chosen web server s maximum capacity .",
    "so web servers with high maximum capacity will have dns mappings with longer ttls , and domains with low request rates will receive mappings with longer ttls .",
    "max - cap , the algorithm proposed in this thesis , also uses the maximum capacities of the serving replica nodes to allocate requests proportionally .",
    "the main difference is that in the work by colajanni et al . , the root dns scheduler acts as a centralized dispatcher setting all dns mappings and is assumed to know what the request rate in the requesting domain is like . in the peer - to - peer case",
    "the authority node has no idea what the request rate throughout the network is like , nor how large is the set of requesting nodes .",
    "lottery scheduling is another technique that , like max - cap , uses proportional allocation .",
    "this approach has been proposed in the context of resource allocation within an operating system ( the mach microkernel ) @xcite .",
    "client processes hold tickets that give them access to particular resources in the operating system .",
    "clients are allocated resources by a centralized lottery scheduler proportionally to the number of tickets they own and can donate their tickets to other clients in exchange for tickets at a later point .",
    "max - cap is similar in that it allocates requests to a replica node proportionally to the maximum capacity of the replica node .",
    "the main difference is that in max - cap the allocation decision is completely distributed with no opportunity for exchange of resources across replica nodes .",
    "in this paper we examine the problem of load - balancing in a peer - to - peer network where the goal is to distribute the demand for a particular content fairly across the set of replica nodes that serve that content .",
    "existing load - balancing algorithms proposed in the distributed systems literature are not appropriate for a peer - to - peer network .",
    "we find that load - based algorithms do not handle the heterogeneity that is typical in a peer - to - peer network .",
    "we also find that algorithms based on available capacity reports can suffer from load oscillations even when the workload request rate is as low as 60% of the total maximum capacities of replicas .",
    "we propose and evaluate max - cap , a practical algorithm for load - balancing .",
    "max - cap handles heterogeneity , yet does not suffer from oscillations when the workload rate is below 100% of the total maximum capacities of the replicas , adjusts better to very large fluctuations in the workload and constantly changing replica sets , and incurs less overhead than algorithms based on available capacity since its reports are affected only by extraneous load on the replicas .",
    "we believe this makes max - cap a practical and elegant algorithm to apply in peer - to - peer networks .",
    "this research is supported by the stanford networking reseach center , and by darpa ( contract n66001 - 00-c-8015 ) .",
    "the work presented here has benefited greatly from discussions with armando fox and rajeev motwani .",
    "we thank them for their invaluable feedback .",
    "we also thank petros maniatis for his detailed comments on earlier drafts of this paper .",
    "waldspurger and w.e .",
    "lottery scheduling : flexible proportional - share resource management . in _ proceedings of the first usenix symposium on operating systems design and implementation ( osdi ) _ ,",
    "nov 1994 .",
    "h.  zhu , t.  yang , q.  zheng , d.  watson , o.  h. ibarra , and t.  smith .",
    "adaptive load sharing for clustered digital library services . in _",
    "7th ieee intl .",
    "symposium on high performance distributed computing ( hpdc ) _ , 1998 .",
    "it should not surprise the reader that inv - load does not handle heterogeneity since the same load at one replica may have a different effect on another with a different maximum capacity . however , surprisingly it turns out that when replicas are homogeneous , the performance of inv - load and max - cap are comparable .    in this set of experiments , there are ten replicas , each of whose maximum capacity we set at 10 requests per second for a total maximum capacity of 100 requests per second .",
    "queries are generated according to a poisson process with a lambda rate that is 80% the total maximum capacities of the replicas .",
    "figures  [ loadmaxeqcapspoisson-80-a ] and [ loadmaxeqcapspoisson-80-b ] show a scatterplot of how the utilization of each replica proceeds with time when using inv - load with a refresh period of one time unit and max - cap respectively .",
    "inv - load and max - cap have similar scatterplots .",
    "figures  [ loadmaxeqcapspoisson-80-overcapqueries - a ] and [ loadmaxeqcapspoisson-80-overcapqueries - b ] show for each replica , the percentage of queries that arrived at the replica while the replica was overloaded .",
    "again , we see that inv - load and max - cap have comparable performance .",
    "the difference is that inv - load incurs the extra overhead of one load update per replica per second . in a cup tree of 100 nodes this translates to 1000 updates per second",
    "being pushed down the cup tree . in a tree of 1000 nodes",
    "this translates to 10000 update per second being pushed .",
    "thus , the larger the cup tree , the larger the overall network overhead .",
    "the overhead incurred by inv - load could be reduced by increasing the period between two consecutive updates at each replica . increasing the period results in staler load updates .",
    "we find that when experimenting with a range of periods ( one to sixty seconds ) , we confirm earlier studies @xcite that have found that as load information becomes more stale with increasing periods , the performance of load - based balancing algorithms decreases .",
    "we ran experiments with pareto(@xmath10 , @xmath11 ) query interarrivals with a wide range of @xmath10 and @xmath11 values ( the pareto distribution shape and scale parameters ) and found that with homogeneous replicas , inv - load with a period of one and max - cap continue to be comparable .",
    "however , max - cap is preferable in these cases because it incurs no overhead ."
  ],
  "abstract_text": [
    "<S> this paper studies the problem of load - balancing the demand for content in a peer - to - peer network across heterogeneous peer nodes that hold replicas of the content . </S>",
    "<S> previous decentralized load balancing techniques in distributed systems base their decisions on periodic updates containing information about load or available capacity observed at the serving entities . </S>",
    "<S> we show that these techniques do not work well in the peer - to - peer context ; either they do not address peer node heterogeneity , or they suffer from significant load oscillations . </S>",
    "<S> we propose a new decentralized algorithm , max - cap , based on the maximum inherent capacities of the replica nodes and show that unlike previous algorithms , it is not tied to the timeliness or frequency of updates . yet , max - cap can handle the heterogeneity of a peer - to - peer environment without suffering from load oscillations . </S>"
  ]
}