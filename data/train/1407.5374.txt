{
  "article_text": [
    "the lovsz local lemma ( lll ) first appeared in 1975 in a paper by erds and lovsz @xcite .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  the proof is so elementary that it could , and i think it should , be taught in a first course in probability . it has had and continues to have a profound effect on probabilistic method . \" _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    j. spencer wrote about it in the book on his durango lectures @xcite .",
    "this elegant proof however was non - constructive .",
    "up until the seminal work by moser @xcite and moser and tardos @xcite , and despite important work on the question of supplying a constructive proof by beck @xcite , alon @xcite , srinivasan @xcite and others , the question and its answer succinctly given in the book on the durango lectures @xcite :  algorithm ? sometimes !",
    "\" remained valid .",
    "the constructive approaches of moser @xcite and moser and tardos @xcite showed how to algorithmically produce a satisfying assignment to a constraint satisfaction problem ( csp ) , given that the variables are independent .",
    "the randomized algorithms in both papers look for an unsatisfied constraint and resample its variables , until no unsatisfied constraint is left . in moser @xcite ,",
    "the search is local , in the sense that the algorithm looks for unsatisfied constraints in the neighborhood of the current one , whereas in @xcite there is no locality restriction for the search . in both papers",
    "the expected time of steps for such an algorithm to halt is shown to be linear in the number of variables , given that the degree of the dependency graph of the constraints does not exceed a certain constant fraction of the inverse of the probability of a constraint not to be satisfied .",
    "the proofs depend on supplying a witness structure which encodes the history of the random choices of the algorithm . for an elegant presentation of the moser and tardos proof @xcite",
    "see spencer @xcite .",
    "another proof approach ( closer to the spirit of the proof in @xcite ) depends on the fact that the size of the witness structure can not be less than the entropy of the sequence of random choices made by the algorithm .",
    "see @xcite for a short exposition of the basic idea of this information theoretic argument known as  _ entropy compression argument _ \" . for a recent survey ,",
    "see szegedy @xcite .",
    "in this work , we work with moser s original algorithm in @xcite and we use the principle of deferred decisions of knuth @xcite to show that resampling produces an assignment with the same distribution as the original one ( conditional that the event that initiated this particular resampling is satisfied ) .",
    "thus we manage to express the probability that at least @xmath3 steps are needed until the algorithm halts by a simple recurrence relation .",
    "this recurrence relation is then asymptotically analyzed by classical tools of the analysis of algorithms .",
    "it turns out that given that the degree of the dependency graph does not exceed a certain constant fraction of the inverse probability of an undesirable event to occur , the probability that the algorithm lasts for @xmath3 steps is exponentially small in @xmath3 , after a cutoff point ( a result made known to us by achlioptas and iliopoulos @xcite , but through a proof based on the entropic method ) .",
    "we believe that this direct and completely elementary probabilistic proof avoids some of the intricacies of the entropy compression argument .",
    "it also completely unveils , we think , the extreme elegancy of moser s algorithm .",
    "we used our alternative approach to a particular coloring problem , namely the acyclic edge coloring .",
    "the entropy compression method had been used by esperet and parreau @xcite to find bounds for the acyclic chromatic index , the least number of colors needed to properly color the edges of a graph so that no bichromatic cycle exists .",
    "our approach leads to a direct and simple probabilistic analysis that yields the upper bound of @xmath4 for the acyclic chromatic index , improving the bound of @xmath2 given by esperet and parreau .",
    "we also improve their bounds for graphs with bounded girth .",
    "there are two interesting remarks to be made with respect to the application of our technique to the edge coloring problem :    * there is no uniform upper bound neither for the probabilities of the events considered as  undesirable \" nor for the neighborhood size of the dependency graph .",
    "so the application in this case is essentially an instance of the asymmetric lovsz local lemma . * the variables that determine the  undesirable \" events , namely the edges of the graph to be colored , are not independent .    a proof of the _ asymmetric _ lovsz local lemma by the same technique has been given recently by giotis et al .",
    "also recently , harvey and vondrk @xcite gave a proof of the lopsided asymmetric lovsz local lemma by a similar technique ( the events in that work are over an arbitrary probability space , as also in kolipaka and szegedy @xcite ) .",
    "let @xmath5 be mutually independent random variables on a common probability space , taking values in the sets @xmath6 , respectively ( we opted for the letter @xmath7 to stand for the number of variables , as by @xmath3 we will denote number of algorithmic steps ) .    let @xmath8 be a sequence of events , each depending on a sequence of the random variables @xmath9 .",
    "the sequence of variables that an event @xmath10 depends on is called the _ scope _ of @xmath10 and is denoted by @xmath11 .",
    "events are assumed to be ordered as in the sequence ( i.e. , according to their index ) .",
    "the events @xmath10 are considered  undesirable \" , i.e. , the objective is to design a randomized algorithm that will return an assignment @xmath12 to the variables @xmath9 for which none of the events @xmath10 hold .",
    "we say that two events overlap , and write @xmath13 , if @xmath14 . the binary , reflexive and symmetric binary relation @xmath15 defines a graph with all vertices looped ( but no multiple edges ) called the _ dependency graph _ of the events .    for @xmath16 ,",
    "let @xmath17 be the neighborhood of the event @xmath10 in the dependency graph , i.e. , @xmath18 ( observe that @xmath19 ) .",
    "let @xmath0 be the maximum of the cardinalities @xmath20 ( i.e. , the max degree of the dependency graph counting the loop as contributing 1 to the degree ) and let @xmath21 be the max of the probabilities @xmath22 $ ] .",
    "[ thm : lll ] if @xmath23 , then @xmath24>0 $ ] , i.e. , there exists an assignment to the variables @xmath9 for which none of the events @xmath25 hold ( by @xmath26 we denote the base of the natural logarithm , i.e. , @xmath27 ) .",
    "the original proof of theorem [ thm : lll ] , first presented essentially in this form in @xcite , was non - constructive , but was given for arbitrary events , i.e. , without the assumption that the events depended on independent random variables .",
    "below , we will give an algorithmic proof theorem [ thm : lll ] within the framework already described , i.e. , assuming the dependence of the events on independent variables .",
    "sample the variables @xmath28 and let @xmath12 be the resulting assignment of values to them .",
    "[ alg : resample ] output current assignment @xmath12    resample the variables in the scope @xmath11 .",
    "[ alg : while ]    we first present our algorithm in figure  [ fig : alg ] , which is a direct derivation of the one given by moser in @xcite .    it is trivial to see that if m - algorithmever stops , it returns an assignment for which none of the  undesirable \" events @xmath29 holds .    we first prove :    [ lem : progress ] consider an arbitrary call of resample(@xmath10 ) .",
    "let @xmath30 be the set of variables that do not belong to the scope of an event that occurs just when this call is to start . then",
    ", if the call terminates , variables in @xmath30 will also not belong to the scope of an event occurring when this call is just completed .",
    "suppose some variable @xmath9 in @xmath30 appears in the scope of an event @xmath31 that occurs during the call resample(@xmath10 ) .",
    "this implies that for some event @xmath32 sharing a variable with @xmath31 , the call resample(@xmath33 ) was made during the execution of resample(@xmath10 ) either as a recursive call within resample(@xmath10 ) or as resample(@xmath10 ) itself and @xmath31 occurred after a resampling of the variables in @xmath34 .",
    "let @xmath35 be the last such event @xmath33 , i.e. , the last event during the execution of resample(@xmath10 ) for which there is an event @xmath31 such that @xmath36 and @xmath9 is in @xmath37 and @xmath31 occurs after a resampling of the variables @xmath34 .",
    "let also @xmath38 be the last such @xmath31 for @xmath35 .",
    "because of the  while \" loop of line [ alg : while ] of _ resample _ , the call _ resample(@xmath35 ) _ will not terminate until all the events in the neighborhood @xmath39 of @xmath35 , and therefore @xmath38 itself , do not occur . assuming _",
    "resample(@xmath10 ) _ terminates , _",
    "resample(@xmath35 ) _ must also terminate and therefore just at the end of _",
    "resample(@xmath35 ) _ , @xmath38 does not occur .",
    "let us now call _ root call _ of resamplea call of resamplemade when executing line [ alg : resample ] of _ m - algorithm_. we refer to calls of _ resample _ from within another call of _ resample _ as _ recursive _ calls . on a particular execution of our algorithm ,",
    "let us call _ phase _ the execution period from the start until the completion of a root call of resample .    by lemma  [ lem : progress ] , we know that the events of root calls of resamplehave pairwise non - intersecting scopes and in particular they are pairwise distinct . therefore :    [ cor : phases ] there are at most @xmath40 phases in any execution of m - algorithm .",
    "our aim in the sequel will be to bound from above , as a function of @xmath3 , the probability that m - algorithmtakes at least @xmath3 steps .",
    "as algorithmic steps we count only calls of _ resample _ ( root or recursive ) . towards finding a bound for the probability that @xmath3 steps are needed",
    ", we will argue that the probability of an event occurring at any step of the algorithm , conditional that the previous steps have already been performed to completion , is bounded by @xmath21 , the bound of the probability that an event occurs when the algorithm starts .    in the sequel , by",
    "_ rooted forest _ we will mean a forest of trees such that each tree has a special node designated as its root .",
    "the nodes of rooted forests are labeled by the events @xmath41 with repetitions of the labels allowed .",
    "[ feas ] a labeled rooted forest is called _ feasible _ if    1 .",
    "the labels of the roots of the trees have pairwise disjoint scopes , 2 .",
    "the labels of the children of every node have pairwise disjoint scopes and 3 .",
    "the label of each of the children of every node @xmath42 shares a variable ( is a neighbor in the sense of @xmath15 ) with the label of @xmath42 .",
    "apart form the restrictions between labels imposed by the definition , the label of a node @xmath42 can share a variable or even coincide with the label of another node @xmath43 ( even if @xmath44 belong to different trees ) , as long as @xmath42 and @xmath43 are not siblings and are not both roots .",
    "the nodes of a feasible forest are ordered as follows : children of the same node are ordered as their labels are ; nodes in the same tree are ordered by preorder ( respecting the ordering between siblings ) and finally if the label on the root of a tree @xmath45 precedes the label of the root of @xmath46 , all nodes of @xmath45 precede all nodes of @xmath46 .    the number of nodes of a forest @xmath47 is denoted by @xmath48 .",
    "now consider the first @xmath3 consecutive steps of a run of m - algorithm .",
    "we construct in a unique way , depending on the steps , a feasible forest with @xmath3 nodes as follows :    1 .",
    "the forest under construction will have as many roots as root calls of resampleexist within the @xmath3 steps .",
    "these roots will be labeled by the event of the corresponding root call .",
    "a tree that corresponds to a root call resample@xmath49 will have as many non - root nodes as the number of recursive calls of resamplewithin resample@xmath49 ( that appear in the sequence of the given @xmath3 consecutive steps ) .",
    "the non - root nodes will be labeled by the events of these recursive calls .",
    "the non - root nodes are organized within the tree with root labeled with @xmath10 so that a node that corresponds to a call resample@xmath50 is parent to a root that corresponds to a call resample@xmath51 if resample@xmath51 ever appears immediately on top of resample@xmath50 in the recursive stack that implements the root call resample@xmath49 .",
    "it is straightforward to check , inspecting the succession of steps of m - algorithmin any run , and making use of lemma [ lem : progress ] , that a forest constructed as above from a number of consecutive steps of a run of m - algorithmis indeed a feasible forest in the sense of definition [ feas ] .",
    "it is not true however that every feasible forest can be constructed as above from a number of consecutive of steps of some run of m - algorithm .",
    "for example a feasible forest where two children of a node are labeled by events @xmath10 and @xmath33 , respectively , such that @xmath10 occurs if and only if @xmath33 does , can never be constructed as above .",
    "[ hatp ] the _ witness _ forest of the first @xmath3 steps of a run of m - algorithmis the feasible forest constructed as described above . given a feasible forest @xmath47 with @xmath3 nodes , we denote by @xmath52 the event that m - algorithmruns for at least @xmath3 steps and during these @xmath3 steps , @xmath47 is constructed .",
    "we also set : @xmath53.\\ ] ]    n.b .",
    "the event @xmath52 is none of the events @xmath10 , it is rather an event that refers to which events @xmath10 and in what order the resamplecalls of the randomized m - algorithmare applied .",
    "obviously the probability that m - algorithmtakes at least @xmath3 steps is equal to @xmath54 , notationally : @xmath55 = \\ , \\hat{p}_n.\\ ] ]    towards finding an upper bound for @xmath54 , we now describe a randomized algorithm , to be called validation algorithm , notationally valalg , that takes as input a feasible forest @xmath47 with @xmath3 nodes , labeled with the events @xmath56 ( ordered as their respective nodes ) and outputs a boolean value success or failure .",
    "the algorithm is given in figure  [ fig : valalg ] .",
    "sample the variables @xmath28 . and exit .",
    "resample the variables of @xmath57 . .",
    "intuitively , with input a feasible forest with labels @xmath56 , valalginitially generates a random sampling of the variables , then checks the current event and , if it holds , resamples its variables and goes to the next event . if the algorithm manages to go through _ all _ events , it returns success , otherwise , at the first event that does not hold under the current assignment , it returns failure and stops .",
    "we first give a result about the probability distribution of the assignment to the variables @xmath9 during the execution of valalg .",
    "[ lem : randomness ] at every instant during the execution of valalgthat immediately follows a successful ( i.e. , no failure returned ) iteration of the * for * loop of step 2 , the distribution of the current assignment of values to the variables @xmath28 is as if _ all _ variables have been sampled anew .",
    "therefore the probability of any event occurring at this instant is bounded by @xmath21 .",
    "the result immediately follows from the principle of deferred decisions of knuth @xcite .",
    "indeed the variables of the current assignment that belong to the scope of the last checked event have been actually sampled anew , whereas for the others we may assume that are sampled anew by the principle of deferred decisions .",
    "the above result does not hold for m - algorithm , because that algorithm exposes information also for events other than the one whose variables are resampled ( e.g. that the all events preceding the one whose variables are resampled do not occur ) .",
    "this is the reason valalgis introduced .",
    "[ p ] given a feasible forest @xmath47 with @xmath3 nodes , we say that @xmath47 is validated by valalgif the latter returns success on input @xmath47 .",
    "the event of this happening is denoted by @xmath58 .",
    "we also set : @xmath59.\\ ] ]    observe that by union bound : @xmath60.\\ ] ] we now claim :    [ lem : valid]for any feasible forest @xmath47 , the event @xmath52 implies the event @xmath58 , therefore :    @xmath61    let @xmath56 be the labels of @xmath47 ( in the order of the corresponding nodes ) .",
    "consider a run of @xmath3 steps of m - algorithmthat gives @xmath47 as its witness forest and let @xmath62 be the sequence of consecutive assignments generated by this run .",
    "then we get immediately by inspecting m - algorithmthat :    * @xmath63 is obtained by independently sampling the variables @xmath28 . * for @xmath64",
    ", @xmath57 does not hold under @xmath65 . * for @xmath66",
    ", @xmath67 is obtained from @xmath65 by resampling the variables of @xmath57 .",
    "therefore the sequence @xmath62 comprises the assignments of a run of valalgthat on input @xmath47 , returns success .",
    "it is the probability that a feasible forest @xmath47 with @xmath3 nodes is validated that we will bound from above in the sequel , thus by lemma [ lem : valid ] achieving to bound from above the probability of getting a witness forest with @xmath3 nodes and in turn , by equality , to bound from above the probability of m - algorithmtaking at least @xmath3 steps .",
    "now let @xmath47 be a feasible forest with trees @xmath68 with roots labeled with @xmath69 respectively .",
    "note that we have implicitly assumed that all events @xmath70 appear as labels of the root of some tree of @xmath47 ; if this is not the case , that is if some @xmath10 does not appear as root of a tree of @xmath47 , set @xmath71 .",
    "also we will assume that for all nodes @xmath42 there are exactly @xmath0 subtrees hanging from @xmath42 by taking as subtree the empty tree for missing children .",
    "then each tree @xmath72 can be considered as a labeled feasible forest with a single tree , so it makes sense to consider @xmath73 , j=1 \\ldots , m$ ] ( if @xmath74 , we clearly assume that @xmath73 = 1 $ ] ) an immediate corollary of lemma [ lem : randomness ] is the following :    [ lem : pj ] @xmath75 \\leq   \\prod_{j=1}^m \\pr[v_{t_j}].\\ ] ] also if a single - tree forest @xmath76 is comprised of the trees @xmath77 hanging from the root , then : @xmath78 \\leq p \\prod_{k=1}^{\\delta}\\pr[v_{t_k}].\\ ] ]    indeed for the first inequality observe that by lemma [ lem : randomness ] , the assignment @xmath12 that valalgproduces after it has examined the last event of @xmath79 , conditional that success was returned , is distributed as if @xmath12 was obtained by sampling anew all variables .    for the second part , first notice that the factor @xmath21 appears because the event in the root of @xmath76 should occur when @xmath76 is validated .",
    "then , in a similar way as the first part , notice that the assignments that exist at the start of @xmath80 during the execution of valalgare all distributed as if all variables were sampled anew .",
    "let now @xmath81 be the collection of feasible forests each of which comprises of a _ single _ tree whose root is labeled with @xmath10 .",
    "assume that numbers @xmath82 are given such that such that for every @xmath3 and every event @xmath83 :    @xmath84 \\leq q_n.\\ ] ]    by rearranging sums , from inequality and the first inequality of lemma [ lem : pj ] , we get that :    @xmath85    also , from the second inequality of lemma [ lem : pj ] we conclude that numbers @xmath82 satisfying can be defined by the recurrence : @xmath86    [ lem : phase ] @xmath82 is asymptotically bounded from above by @xmath87    let @xmath88 be the ogf of @xmath82 .",
    "multiply both its sides of with @xmath89 and sum for @xmath90 to get ( since @xmath91 ) : @xmath92 let now @xmath93 . then by , we have @xmath94    let now @xmath95 .",
    "then equation is equivalent to @xmath96 now apply lagrange s inversion formula ( see e.g. ( * ? ? ?",
    "* theorem a.2 ) ) to get that for @xmath97 : @xmath98w   = ( 1/n ) [ u^{n-1}](\\phi(u))^n   = ( 1/n ) p^n \\binom{\\delta n}{n-1 }   \\\\ & =   \\frac{1}{(\\delta-1)n+1}p^n\\binom{\\delta n}{n}.   \\end{aligned}\\ ] ] therefore by stirling approximation there is a constant @xmath99 ( depending on @xmath0 ) such that : @xmath100 this concludes the proof of lemma [ lem : phase ] .",
    "[ lem : algorithm ] there is a constant @xmath101 ( depending on @xmath0 ) such that @xmath102 is bounded from above by @xmath103    by and lemma [ lem : phase ] we have that for some @xmath101 ( depending on @xmath0 ) , @xmath102 is bounded from above by @xmath104 this concludes the proof of lemma [ lem : algorithm ] .",
    "now to have that @xmath102 becomes exponentially small in @xmath3 when @xmath105 we must have that @xmath106    therefore by equality and inequality we have :    [ epd ] assuming @xmath21 and @xmath0 are constants such that @xmath107 ( and therefore if @xmath23 ) , there exists an integer @xmath108 , which depends linearly on @xmath40 , and a constant @xmath109 ( depending on @xmath21 and @xmath0 ) such that if @xmath110 then the probability that _ m - algorithm _ executes more than @xmath3 calls of _ resample _ is @xmath111 .    the integer @xmath108 in the above theorem is referred to as a _ cut - off _ point because it marks the onset of subexponential probability for the number of steps ( calls of resample ) that m - algorithmtakes before it stops .",
    "clearly , when the algorithm stops we have found an assignment such that none of the events occurs . and",
    "since this happens with probability close to 1 for large enough @xmath3 , theorem  [ thm : lll ] indeed easily follows .",
    "let @xmath112 be a ( simple ) graph with @xmath7 vertices and @xmath40 edges ( the letter @xmath3 is to indicate number of steps ) .",
    "the chromatic index of @xmath113 is the least number of colors needed to _ properly _ color its edges , i.e. , to color them so that no adjacent edges get the same color .",
    "if @xmath0 is the maximum degree of @xmath113 , it is known that its chromatic index is either @xmath0 or @xmath114 ( vizing @xcite ) .    a cycle of @xmath113 of length @xmath115 is a sequence @xmath116 of distinct vertices so that @xmath117 , @xmath118 and @xmath119 are connected by an edge .",
    "the _ acyclic _ chromatic index of @xmath113 is defined as the least number of colors needed to properly color the edges of @xmath113 so that no cycle is _ bichromatic _ ,",
    "i.e. , so that there is no cycle whose edges are colored with only two colors",
    ". notice that in any properly colored graph , any cycle of odd length is necessarily at least _ trichromatic _ , i.e. , its edges have three or more colors .",
    "it has been conjectured ( j. fiamik @xcite and alon et al .",
    "@xcite ) that the acyclic chromatic index of any graph with maximum degree @xmath0 is at most @xmath120 .",
    "a number of successively tighter upper bounds to the acyclic chromatic index has been provided in the literature .",
    "most recently , esperet and parreau @xcite proved that the acyclic chromatic index is at most @xmath121 .",
    "their proof makes use of the technique of moser and tardos @xcite that constructively proves the lvasz local lemma .",
    "actually , they describe a randomized algorithm and they show that it produces an acyclic edge coloring with positive probability .",
    "an approach using the entropy compression method was also used for the vertex analogue of the edge chromatic number by gonalves et al .",
    "@xcite .    in this section ,",
    "we modify the esperet and parreau @xcite technique in two important aspects : ( a ) instead of the moser and tardos @xcite algorithm , we use its antecedent version by moser @xcite and ( b ) we analyze it by using the approach described in the previous section , which avoids the counting of witness - trees and depends only on probability estimates .",
    "also , our technique does not refer to partial colorings .",
    "thus we get a direct probabilistic analysis that yields the upper bound of @xmath4 for the acyclic chromatic index , improving over @xmath2 in @xcite . generalizing to graphs with bounded girth",
    ", we also get improved numerical results some specific values of which are sampled in figure  [ fig : results ] .    [ cols=\"^,^,^\",options=\"header \" , ]     an interesting aspect of this application is that the probability of the  undesirable \" events do not have a uniform upper bound , i.e. , it constitutes a case of the asymmetric lll .",
    "below , to facilitate notation , we call a proper edge - coloring _ @xmath115-acyclic _ if it contains no bichromatic cycle of length @xmath115 or less ( @xmath115 is an even natural ) .",
    "we call the corresponding graph parameter the _ s - acyclic chromatic index_.    we start by mentioning the following fact , proved in esperet and parreau  @xcite :    [ sufficientcolors ] @xmath122 colors suffice to produce a 4-acyclic edge coloring of @xmath113",
    ".    successively , in any order , color the edges using , at each step , a color that does not destroy 4-acyclicity ( hence , by definition , neither properness ) . to show that @xmath123 colors suffice ,",
    "notice that for each edge @xmath26 , one has to avoid the colors of all edges adjacent to @xmath26 , and also for each pair of homochromatic ( of the same color ) edges @xmath124 adjacent to @xmath26 at different endpoints , one has to avoid the color of the at most one edge @xmath125 that together with @xmath126 define a cycle of length 4 .",
    "so at each step , one has to avoid @xmath127 colors .",
    "assume now that we have @xmath128 colors , where @xmath129 is a nonnegative constant to be computed .",
    "we assume below that the edges are ordered according to a fixed ordering .",
    "notice that the number of cycles of length @xmath130 that contain a given edge @xmath26 is at most @xmath131 .",
    "also , we assume that cycles are ordered according to a fixed ordering .",
    "the algorithm is given in figure [ fig : col ] :    color all edges following their ordering and choosing at each step a color uniformly at random among those that retain .",
    "output current coloring .",
    "recolor the edges of @xmath132 ( following their ordering ) choosing at each step uniformly at random a color among those that retain 4-acyclicity .",
    "colalgoutputs an acyclic - edge coloring _ if it ever stops _",
    "( this is obvious by inspecting the algorithm ) .",
    "we define _ root _ and _ recursive _ calls of recolorand _ phases _ in analogy to section [ generallll ] . as steps",
    ", we consider calls of recolor .",
    "also we prove the following which is the analog of lemma [ lem : progress ] :    [ lem : colorprogress ] consider an arbitrary call of recolor(@xmath132 ) .",
    "let @xmath133 be the set of edges that do not belong to a bichromatic cycle at the beginning of this call . then",
    ", if the call terminates , the edges in @xmath133 do not belong to any bichromatic cycle at the end of the call as well .",
    "suppose some edge @xmath134 in @xmath135 belongs to a cycle @xmath136 which becomes bichromatic during the call .",
    "this means that @xmath136 shared an edge with a cycle @xmath137 such that recolor(@xmath137 ) was called as a recursive call of recolor(@xmath132 ) or coincides with recolor(@xmath132 ) .",
    "but the call recolor(@xmath137 ) will not terminate until all edges in @xmath137 do not belong to a bichromatic cycle .",
    "assuming recolor(@xmath132 ) terminates , recolor(@xmath137 ) must have also terminated . so @xmath136 can not be bichromatic at the end of recolor(@xmath137 ) and therefore @xmath134 does not belong to the bichromatic cycle @xmath136 at the end of recolor(@xmath137 ) .",
    "the same argument can be reapplied every time @xmath134 becomes an element of a bichromatic cycle during recolor(@xmath132 ) .    as an immediate corollary",
    "we get :    [ cor : colorprogress ] the cycles of root calls of recolorhave pairwise distinct sets of edges .",
    "therefore the number of phases is @xmath138 ( @xmath40 is the number of edges of the graph ) .",
    "in analogy to the previous section , we consider as variables the edges and as undesirable events the bichromatic cycles .",
    "neighboring events are cycles that share an edge .",
    "we define feasible forests to be rooted forests whose nodes are labeled with cycles .",
    "we also define :    [ colorfeas ] a labeled rooted forest is called _ feasible _ if    1 .",
    "pairwise , the labels of the roots of the trees do not share an edge , 2 .",
    "pairwise the labels of the children of every node do not share an edge and 3 .",
    "the labels of the children of every node @xmath42 share an edge with the labels of @xmath42 .",
    "we define witness forests in complete analogy with the previous section .",
    "their labels are now cycles .",
    "we define the probability @xmath54 of colalgtaking at least @xmath3 steps .",
    "we give a validation algorithm ( figure [ fig : colvalalg ] ) and define the probability @xmath102 of at least one feasible forest with @xmath3 nodes being validated . with respect to bounding @xmath102 though there are some important difficulties :    1 .",
    "the edges are not colored independently.[diff1 ] 2 .",
    "there is no constant bound on the cardinality of neighborhoods of cycles.[diff2 ] 3 .",
    "the cycles are too many .",
    "[ diff3 ]    we will overcome difficulty [ diff1 ] by assuming that enough colors exist as to have a margin within which colors are chosen uniformly at random .",
    "difficulties [ diff2 ] and [ diff3 ] will be overcome by gathering together , in the computation of @xmath102 , cycles that contain a given edge .",
    "color all edges in their ordering choosing uniformly at random a color that retains and exit . .",
    "first , observe that :    [ coledgeprob ]    at every instant during the execution of valcolalg , the probability of assigning a specified color to a specified edge is at most @xmath139 .",
    "notice that there exist @xmath128 colors .",
    "now by lemma [ sufficientcolors ] , at most @xmath140 colors suffice to guarantee 4-acyclicity .",
    "so , at any step of valcolalg , we have a choice of at least @xmath141 colors to choose from uniformly at random .",
    "[ lem : colorrandomness ] at every instant during the execution of valcolalgthat immediately follows a successful ( i.e. , no failure returned ) iteration of the * for * loop of step 2 , the distribution of the current assignment of colors to the edges is as if _ all _ edges have been recolored anew . therefore at every such instant , as well as at the beginning , just when the first assignment of colors to the edges has been completed , the probability of any cycle of length @xmath130 being bichromatic is bounded by @xmath142 .",
    "this is again an immediate application of the principle of deferred decisions , in conjunction with lemma [ coledgeprob ] .",
    "the exponent @xmath143 is due to the fact that the colors of one pair of consecutive edges of the cycle can be arbitrary .",
    "our arguments so far are in complete analogy to section [ generallll ] . however to obtain a recurrence relation in the case of coloring , we will need to consider together the probability of cycles that share an edge being bichromatic , without resorting to union - bound as we did in section [ generallll ] ( inequality [ unionbound ] ) .",
    "we first prove that :    [ lem : colcycleprob ] the probability for two given consecutive edges @xmath144 to belong to a bichromatic cycle of length @xmath130 ( @xmath145 ) is at most @xmath146 .",
    "let @xmath147 and @xmath148 and assume the colors of them are  red \" and  white \" , respectively .",
    "the probability that at least one edge @xmath149 stemming from @xmath150 being  red \" is bounded by @xmath151 .",
    "indeed , the probability that any specified edge @xmath149 stemming from @xmath150 is _ not _ red is at least @xmath152 so the probability that none of them ( at most @xmath153 in number ) is red is at least @xmath154 now we use the inequality @xmath155 ( see e.g. ( * ? ? ?",
    "* inequality ( 4.5.7 ) ) ) , for @xmath156 , which implies , after elementary operations , that the expression in is at least @xmath157 , so the probability that at least one red edge @xmath149 stemming from @xmath150 exists is at most @xmath151 .",
    "we continue this argument for the @xmath158 successive edges of the cycle that follow @xmath159 .",
    "the uniquely defined last edge of the cycle has probability at most @xmath160 to be correctly colored ( the last edge , whose both endpoints are uniquely determined , must be white ) .",
    "so , overall the probability that a bichromatic cycle with @xmath130 edges which contains @xmath144 exists , is at most @xmath161 which completes the proof .",
    "[ cor : colcycleprob ] the probability for a given edge @xmath26 to belong to a bichromatic cycle of length @xmath130 ( @xmath145 ) is at most @xmath162",
    ".    there are at most @xmath163 edges @xmath164 adjacent to @xmath26 .",
    "mutiply the result of lemma [ lem : colcycleprob ] with @xmath153 .",
    "recall now that by the definition of a feasible forest , for each edge of @xmath113 , there is at most one tree of the forest whose label contains this edge .",
    "assume , by adding empty trees if necessary , that for every forest and for every edge , there is exactly one tree whose label contains this edge .",
    "also , similarly , assume that from every node @xmath42 of the forest labeled with a cycle @xmath132 and for every edge of @xmath132 there is a subtree hanging from @xmath42 whose root is labeled by this edge .",
    "now given an edge @xmath26 , let @xmath165 be the family of feasible forests that are comprised of a single tree whose root label is a cycle that contains @xmath26 .",
    "the we have :    [ lem : colortrees]@xmath166 \\leq \\sum_{\\substack{n_1+\\cdots+n_{m } = n \\\\ n_1 , \\ldots , n_{m } \\geq 0}}\\left (   \\prod_{i=1}^m\\pr\\left[\\bigcup_{t : |t| = n_i \\ , \\ & \\ ,   t \\in { \\mathcal f}_{e_i}}v_t \\right]\\right),\\ ] ] where @xmath167 are the edges of the graph",
    ".    indeed , fix a forest @xmath47 ; during the execution of valcolalgwith this specified @xmath47 as input , we have by the principle of deferred decisions that the assignment of colors upon the completion of a recoloring of the edges of a cycle is distributed as if all edges are colored anew ( see appendix ) .",
    "now assume that @xmath82 are numbers such that for any edge @xmath26 ,",
    "@xmath168 \\leq q_n.\\ ] ] then by lemma [ lem : colortrees ] we get :    @xmath169    we also have :    [ lem : colortrees2 ] @xmath170 \\leq   \\sum_{k\\geq 3 } \\bigg ( & \\pr   \\left [   \\bigcup_{\\substack { c \\text{\\rm is a cycle }   \\ & \\ , |c| = 2k \\\\ \\ & \\ ,    c \\text{\\rm \\ contains } e } } v_c   \\right ]     \\\\   & \\cdot   \\sum_{\\substack{n_1+\\cdots+n_{2k } = n-1 \\\\ n_1 , \\ldots , n_{2k } \\geq 0 } } q_{n_1 } \\cdots q_{n_{2k } } \\bigg ) , \\end{split}\\ ] ] where @xmath171 is the event that valcolalgreturns success on input a single node labelled with @xmath132 .",
    "we apply union - bound to the length of the cycles that label the root of a tree @xmath76 and then we argue as in the proof of lemma [ lem : colortrees ] ( see appendix ) .    by lemma [ lem : colortrees2 ] and corollary [ cor : colcycleprob ]",
    "we get that @xmath82 can be defined by the recurrence : @xmath172 with @xmath91 .",
    "we will asymptotically analyze the coefficients of the ogf @xmath88 of @xmath82 . towards this end , multiply both sides of the first equality in with @xmath89 and sum for @xmath173 to get @xmath174,\\ ] ] with @xmath175 .",
    "setting @xmath176 we get @xmath177,\\ ] ] with @xmath178 . for notational convenience ,",
    "set @xmath179 . then",
    "from we get : @xmath180 set now @xmath181 to get from : @xmath182 by ( * ? ? ?",
    "* proposition iv.5 ) ( it is trivial to check that the hypotheses in that theorem are satisfied for @xmath183 ) , we obtain that , if we set @xmath184 where @xmath185 is the ( necessarily unique ) solution in the interval @xmath186 , where @xmath187 is the radius of convergence of the series representing @xmath188 at @xmath189 , of the characteristic equation ( in @xmath185 ) : @xmath190 then @xmath191u \\bowtie { \\rho}^n$ ] ( i.e. , @xmath192)^{1/n } = \\rho$ ] , see ( * ? ? ? * iv.3.2 ) ) .",
    "now by a simple search ( through maple , for the code see @xcite ) we found that for @xmath193 , the unique positive solution of in the radius of convergence is @xmath194 , and this value of @xmath185 gives to @xmath195 in @xmath196 .",
    "therefore by making use of and working as in the previous section , we get :    [ colthm ] assuming @xmath0 , the maximum degree of the graph @xmath113 , is constant , and given the availability of at least @xmath197 colors , there exists an integer @xmath108 , which depends linearly on @xmath40 , the number of edges of @xmath113 , and a constant @xmath198 such that if @xmath110 then the probability that _ colalg _ executes more than @xmath3 calls of _ recolor _ is @xmath199 .    now if the graph has girth @xmath200 for @xmath201 , the previous arguments carry over with minimal changes . namely , equation becomes : @xmath202 , \\quad q_0 = 1 .",
    "\\end{split}\\ ] ] also in and , the starting point of the summation is changed from @xmath203 to @xmath204 . moreover ,",
    "equation becomes : @xmath205 and equation becomes : @xmath206 working as before , we get numerical results depicted in figure  [ fig : girth ] with sample specific values explicitly given in figure  [ fig : results ] .",
    "[ 5 , 1.731000000 , 6 , 1.488000000 , 7 , 1.326000000 , 8 , 1.210000000 , 9 , 1.121000000 , 10 , 1.051000000 , 11 , .9930000000 , 12 , .9460000000 , 13 , .9050000000 , 14 , .8700000000 , 15 , .8400000000 , 16 , .8130000000 , 17 , .7890000000 , 18 , .7670000000 , 19 , .7480000000 , 20 , .7300000000 , 21 , .7140000000 , 22 , .6990000000 , 23 , .6860000000 , 24 , .6730000000 , 25 , .6610000000 , 26 , .6500000000 , 27 , .6400000000 , 28 , .6300000000 , 29 , .6210000000 , 30 , .6120000000 , 31 , .6040000000 , 32 , .5970000000 , 33 , .5890000000 , 34 , .5820000000 , 35 , .5760000000 , 36 , .5700000000 , 37 , .5640000000 , 38 , .5580000000 , 39 , .5520000000 , 40 , .5470000000 , 41 , .5420000000 , 42 , .5370000000 , 43 , .5320000000 , 44 , .5280000000 , 45 , .5240000000 , 46 , .5190000000 , 47 , .5150000000 , 48 , .5120000000 , 49 , .5080000000 , 50 , .5040000000 , 51 , .5010000000 , 52 , .4970000000 , 53 , .4940000000 , 54 , .4910000000 , 55 , .4880000000 , 56 , .4840000000 , 57 , .4820000000 , 58 , .4790000000 , 59 , .4760000000 , 60 , .4730000000 , 61 , .4710000000 , 62 , .4680000000 , 63 , .4650000000 , 64 , .4630000000 , 65 , .4610000000 , 66 , .4580000000 , 67 , .4560000000 , 68 , .4540000000 , 69 , .4520000000 , 70 , .4490000000 , 71 , .4470000000 , 72 , .4450000000 , 73 , .4430000000 , 74 , .4410000000 , 75 , .4400000000 , 76 , .4380000000 , 77 , .4360000000 , 78 , .4340000000 , 79 , .4320000000 , 80 , .4310000000 , 81 , .4290000000 , 82 , .4270000000 , 83 , .4260000000 , 84 , .4240000000 , 85 , .4220000000 , 86 , .4210000000 , 87 , .4190000000 , 88 , .4180000000 , 89 , .4160000000 , 90 , .4150000000 , 91 , .4140000000 , 92 , .4120000000 , 93 , .4110000000 , 94 , .4090000000 , 95 , .4080000000 , 96 , .4070000000 , 97 , .4060000000 , 98 , .4040000000 , 99 , .4030000000 , 100 , .4020000000 , 101 , .4010000000 , 102 , .3990000000 , 103 , .3980000000 , 104 , .3970000000 , 105 , .3960000000 , 106 , .3950000000 , 107 , .3940000000 , 108 , .3930000000 , 109 , .3920000000 , 110 , .3910000000 , 111 , .3900000000 , 112 , .3890000000 , 113 , .3880000000 , 114 , .3870000000 , 115 , .3860000000 , 116 , .3850000000 , 117 , .3840000000 , 118 , .3830000000 , 119 , .3820000000 , 120 , .3810000000 , 121 , .3800000000 , 122 , .3790000000 , 123 , .3780000000 , 124 , .3770000000 , 125 , .3760000000 , 126 , .3760000000 , 127 , .3750000000 , 128 , .3740000000 , 129 , .3730000000 , 130 , .3720000000 , 131 , .3710000000 , 132 , .3710000000 , 133 , .3700000000 , 134 , .3690000000 , 135 , .3680000000 , 136 , .3670000000 , 137 , .3670000000 , 138 , .3660000000 , 139 , .3650000000 , 140 , .3650000000 , 141 , .3640000000 , 142 , .3630000000 , 143 , .3620000000 , 144 , .3620000000 , 145 , .3610000000 , 146 , .3600000000 , 147 , .3600000000 , 148 , .3590000000 , 149 , .3580000000 , 150 , .3580000000 , 151 , .3570000000 , 152 , .3560000000 , 153 , .3560000000 , 154 , .3550000000 , 155 , .3540000000 , 156 , .3540000000 , 157 , .3530000000 , 158 , .3530000000 , 159 , .3520000000 , 160 , .3510000000 , 161 , .3510000000 , 162 , .3500000000 , 163 , .3500000000 , 164 , .3490000000 , 165 , .3480000000 , 166 , .3480000000 , 167 , .3470000000 , 168 , .3470000000 , 169 , .3460000000 , 170 , .3460000000 , 171 , .3450000000 , 172 , .3450000000 , 173 , .3440000000 , 174 , .3430000000 , 175 , .3430000000 , 176 , .3420000000 , 177 , .3420000000 , 178 , .3410000000 , 179 , .3410000000 , 180 , .3400000000 , 181 , .3400000000 , 182 , .3390000000 , 183 , .3390000000 , 184 , .3380000000 , 185 , .3380000000 , 186 , .3370000000 , 187 , .3370000000 , 188 , .3370000000 , 189 , .3360000000 , 190 , .3360000000 , 191 , .3350000000 , 192 , .3350000000 , 193 , .3340000000 , 194 , .3340000000 , 195 , .3330000000 , 196 , .3330000000 , 197 , .3320000000 , 198 , .3320000000 , 199 , .3320000000 , 200 , .3310000000 , 201 , .3310000000 , 202 , .3300000000 , 203 , .3300000000 , 204 , .3290000000 , 205 , .3290000000 , 206 , .3290000000 , 207 , .3280000000 , 208 , .3280000000 , 209 , .3270000000 , 210 , .3270000000 , 211 , .3270000000 , 212 , .3260000000 , 213 , .3260000000 , 214 , .3250000000 , 215 , .3250000000 , 216 , .3250000000 , 217 , .3240000000 , 218 , .3240000000 , 219 , .3230000000 , 220 , .3230000000 , 221 , .3230000000 , 222 , .3220000000 , 223 , .3220000000 , 224 , .3220000000 , 225 , .3210000000 , 226 , .3210000000 , 227 , .3210000000 , 228 , .3200000000 , 229 , .3200000000 , 230 , .3190000000 , 231 , .3190000000 , 232 , .3190000000 , 233 , .3180000000 , 234 , .3180000000 , 235 , .3180000000 , 236 , .3170000000 , 237 , .3170000000 , 238 , .3170000000 , 239 , .3160000000 , 240 , .3160000000 , 241 , .3160000000 , 242 , .3150000000 , 243 , .3150000000 , 244 , .3150000000 , 245 , .3140000000 , 246 , .3140000000 , 247 , .3140000000 , 248 , .3140000000 , 249 , .3130000000 , 250 , .3130000000 ]    ->(0,0)(270,2)0.350.2",
    "we are grateful to j.  ru for showing to us how to deal with the asymptotics of the coefficients of inverse generating functions .",
    "we are grateful to d. mitsche on one hand and to d.  achlioptas and f.  iliopoulos , on the other , for pointing out errors in previous versions of this paper ; the second and fourth authors are also indebted to the latter two for initiating them to this line of research .",
    "we are indebted to s. messaris and z. terzopoulou , both undergraduate students , for their valuable comments during informal presentations of the results in this work .    10    d.  achlioptas and f.  iliopoulos . untitled notes . 2013 . unpublished private communication .",
    "noga alon . a parallel algorithmic version of the local lemma .",
    ", 2(4):367378 , 1991 .",
    "noga alon , benny sudakov , and ayal zaks .",
    "acyclic edge colorings of graphs . , 37(3):157167 , 2001 .",
    "jzsef beck .",
    "an algorithmic approach to the lovsz local lemma .",
    "i. , 2(4):343365 , 1991 .    .",
    "http://dlmf.nist.gov/4.5.7 , release 1.0.9 of 2014 - 08 - 29 .",
    "online companion to @xcite .",
    "paul erds and lszl lovsz .",
    "problems and results on 3-chromatic hypergraphs and some related questions . , 10:609627 , 1975 .",
    "louis esperet and aline parreau .",
    "acyclic edge - coloring using entropy compression .",
    ", 34(6):10191027 , 2013 .",
    "j.  fiamik . the acyclic chromatic class of a graph ( in russian ) .",
    ", 28:139145 , 1978 .",
    "philippe flajolet and robert sedgewick . .",
    "cambridge university press , new york , ny , usa , 1 edition , 2009 .",
    "ioannis giotis , lefteris kirousis , kostas  i. psaromiligkos , and dimitrios  m. thilikos . maple code . can be found http://www.lsi.upc.edu/~igiotis/bichromatic_calc.zip[here ] .",
    "ioannis giotis , lefteris kirousis , kostas  i. psaromiligkos , and dimitrios  m. thilikos .",
    "an alternative proof for the constructive asymmetric lovsz local lemma .",
    "presented at the 13th twente - cologne workshop on graphs & combinatorial optimization , may 2015 , istanbul , can be found at http://arxiv.org/abs/1505.02568[arxiv:1505.020568 ] .",
    "daniel gonalves , mickal montassier , and alexandre pinlou .",
    "entropy compression method applied to graph colorings , 2014 .",
    "http://arxiv.org/abs/1406.4380[arxiv:1406.4380 ] .",
    "nicholas harvey and jan vondrk .",
    "an algorithmic proof of the lopsided lovsz local lemma .",
    "http://arxiv.org/abs/1504.02044[arxiv:1504.02044 ] .",
    "donald  ervin knuth .",
    ", volume  10 .",
    "american mathematical soc . , 1997 .",
    "kashyap babu  rao kolipaka and mario szegedy .",
    "oser and tardos meet lovz . in _ proceedings of the forty - third annual acm symposium on theory of computing _",
    ", stoc 11 , pages 235244 , new york , ny , usa , 2011 .",
    "robin  a moser .",
    "a constructive proof of the lovsz local lemma . in _ proceedings of the 41st annual acm symposium on theory of computing _ , pages 343350 .",
    "acm , 2009 .",
    "robin  a moser and gbor tardos . a constructive proof of the general lovsz local lemma . ,",
    "57(2):11 , 2010 .",
    "f.  w.  j. olver , d.  w. lozier , r.  f. boisvert , and c.  w. clark , editors . .",
    "cambridge university press , new york , ny , 2010 .",
    "print companion to @xcite .",
    "joel spencer .",
    "asymptotic lower bounds for ramsey functions .",
    ", 20(0):69  76 , 1977 .",
    "joel spencer . , volume  64 .",
    "siam , 1994 .",
    "joel spencer .",
    "robin moser makes lovsz local lemma algorithmic ! 2010 .",
    "can be found http://cs.nyu.edu/spencer/moserlovasz1.pdf[here ] .",
    "aravind srinivasan . improved algorithmic versions of the lovsz local lemma . in _ proceedings of the nineteenth annual acm - siam symposium on discrete algorithms _ , pages 611620 .",
    "society for industrial and applied mathematics , 2008 .",
    "mario szegedy .",
    "the lovsz local lemma  a survey . in _ computer science  theory and applications _ , pages 111 .",
    "springer , 2013 .",
    "terence tao .",
    "moser s entropy compression argument .",
    "2009 . can be found https://terrytao.wordpress.com/2009/08/05/mosers-entropy-compression-argument/[here ] .",
    "vadim  g vizing .",
    "critical graphs with a given chromatic class . , 5(1):917 , 1965 .",
    "we describe a toy example related to lemmata [ lem : colortrees ] and [ lem : colortrees2 ] :      * roll three fair dice .",
    "assume that after the roll you are given ( deterministically ) as input a bit , 0 or 1 .",
    "* phase 1 : if the bit is 0 , check the first and second dice and if any of them is an ace declare success and continue to the next phase , else exit . if the bit is 1 , check the second and third dice and if any of them is an ace , continue to the next phase , else exit . * phase 2 .",
    "reroll the two dice examined in phase 1 and repeat the same with a new deterministic bit ."
  ],
  "abstract_text": [
    "<S> the algorithm for lovsz local lemma by moser and tardos gives a constructive way to prove the existence of combinatorial objects that satisfy a system of constraints . </S>",
    "<S> we present an alternative probabilistic analysis of the algorithm that does not involve reconstructing the history of the algorithm . </S>",
    "<S> we apply our technique to improve the best known upper bound to acyclic chromatic index . </S>",
    "<S> specifically we show that a graph with maximum degree @xmath0 has an acyclic proper edge coloring with at most @xmath1 colors , whereas the previously known best bound was @xmath2 . </S>",
    "<S> the same technique is also applied to improve corresponding bounds for graphs with bounded girth . </S>",
    "<S> an interesting aspect of the latter application is that the probability of the  undesirable \" events do not have a uniform upper bound , i.e. , it constitutes a case of the _ asymmetric _ lovsz local lemma . </S>"
  ]
}