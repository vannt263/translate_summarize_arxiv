{
  "article_text": [
    "exposing apolar molecules to water is highly unfavorable , and minimizing the hydrophobic free energy is an important driving force in the folding of macromolecules @xcite .",
    "the solvent accessible surface area ( sasa ) of a molecule gives a measure of the contact area between molecule and solvent .",
    "although the exact quantitative relation between surface area and free energy is elusive , the sasa can be used to compare different molecules or different conformations of the same molecule , or for example measure the surface that is buried due to oligomerization .    to define the sasa ,",
    "let a spherical probe represent a solvent molecule .",
    "roll the probe over the surface of a larger molecule .",
    "the surface area traced by the center of the probe is the sasa of the larger molecule @xcite .",
    "two classical approximations are commonly used to calculate sasa : one by lee and richards ( l&r ) where the surface is approximated by the outline of a set of slices @xcite , and one by shrake and rupley ( s&r ) where the surface of each sphere is approximated by a set of test points @xcite .",
    "the sasa can be calculated to arbitrary precision by refining the resolution of both .",
    "the surface area can also be calculated analytically @xcite , which is useful when the gradient is needed , or by various other approximations , tailored for different purposes @xcite .",
    "there are many tools available to calculate sasa .",
    "the most popular program for command line use is probably naccess @xcite ( freely available for academic use ) , which is an efficient fortran implementation of the l&r approximation .",
    "another well - known command line tool is dssp , which primarily calculates the secondary structure and hydrogen bonds of a protein structure , but provides the sasa as well @xcite ( using s&r , open source ) .",
    "there are also some web services available , for example getarea , which calculates the surface analytically @xcite , and triforce which uses a semianalytical tessellation @xcite ( also available for command line use ) .",
    "in addition , most molecular dynamics simulation packages include tools to analyze sasa from trajectories .",
    "freesasa is intended to fill the same niche as naccess , and a number of other similar programs : a simple and fast command - line tool that `` does one thing and does it well '' and can be easily integrated into tool chains .",
    "the advantage of freesasa is that it is open source ( gnu general public license 3 ) , and provides both c and python apis in addition to its command line interface .",
    "it has sensible default parameters and no obligatory configuration for casual users ( the only required input is a structure ) , but also allows full control over all calculation parameters .",
    "dependencies have been kept to a minimum : compilation only requires standard c and gnu libraries .",
    "the library is thread - safe , and some effort has gone into dealing gracefully with various errors .",
    "the code ships with thorough documentation , which is also available online at http://freesasa.github.io / doxygen/. although functionality and availability have been the primary motivating factors for writing this library , performance tests show that freesasa is as fast as or faster than legacy programs when run on a single cpu core .",
    "in addition , a large portion of the calculation has been parallelized , which gives significant additional speed when run on multicore processors .",
    "both s&r and l&r are pretty straightforward to implement , and both require first determining which atoms are in contact , and then calculating the overlap between each atom and its neighbors .",
    "finding contacts is done using cell lists , which means the contact calculation is an @xmath0 operation . both algorithms then treat each atom independently , making also the second part of the calculation @xmath0 .",
    "in addition , this second part is trivially parallelizable .",
    "for l&r , instead of slicing the whole protein in one go , each atom is sliced individually . the l&r calculation is thus parameterized by the number of slices per atom , i.e.  small atoms have thinner slices than large atoms .",
    "the fibonacci spiral gives a good approximation to an even distribution of points on the sphere @xcite , allowing efficient generation of an arbitrary number of s&r test points .",
    "the cell lists provide the first of the two lattices in the double cubic lattice optimization for this algorithm @xcite , the second lattice ( for the test points ) is not implemented in freesasa , for now .",
    "the correctness of the implementations was tested by first inspecting the surfaces visually . in the two atom case",
    ", results were verified against analytical calculations .",
    "another verification came from comparing the results of high precision sasa calculations using the two independent algorithms .",
    "in addition , using the l&r algorithm gives identical results to naccess when the same resolution and atomic radii are used .",
    "an important step of the calculation is assigning a radius to each atom .",
    "the default in freesasa is to use the _ protor _ radii by @xcite .",
    "the library recognizes the 20 standard amino acids ( plus sec and pyl ) , and the standard nucleotides ( plus a few nonstandard ones ) .",
    "tsai et al .  do not mention phosphorus and selenium ; these atoms are assigned a radius of 1.8 and 1.9   respectively .    by default , hydrogen atoms and hetatm records are ignored . if included , the library recognizes three common hetatm entries : the acetyl and @xmath1 capping groups , and water , and assigns protor radii to these .",
    "otherwise the van der waals radius of the element is used , taken from the paper by @xcite . for elements outside of the 44 main group elements treated by mantina et al . , or",
    "if completely different radii are desired , users can provide their own configuration .",
    "users can specify their own atomic radii either through the api or by providing a configuration file .",
    "the library ships with a few sample configuration files , including one that provides a subset of the naccess parameterization , and one with the default protor parameters .",
    "in addition , scripts are provided to automatically generate protor configurations from pdb conect entries , such as those in the chemical component dictionary @xcite .",
    "these can then be appended to the default configuration .",
    "building freesasa creates the binary ` freesasa ` .",
    "the simplest program call , with default parameters , is    ....",
    "$ freesasa 3wbm.pdb ....    using the structure with pdb code 3wbm as example ( a protein - rna complex ) .",
    "the above produces the following output    ....     # # freesasa 1.0 # #       parameters     algorithm     : lee & richards     probe - radius : 1.400     threads       : 2     slices        : 20       input     source   : 3wbm.pdb     chains   : abcdxy     atoms    : 3714       results ( a^2 )     total    :    25190.77     apolar   :    11552.38     polar    :    13638.39     chain a :     3785.49     chain b :     4342.33     chain c :     3961.12     chain d :     4904.30     chain x :     4156.46     chain y :     4041.08 ....    the numbers in the results section are the sasa values ( in @xmath2 ) for the respective groups of atoms .    as an illustration of a few of the other configuration options ,",
    "the command    ....     $ freesasa -n 100 --print - as - b - values --no - log < 3wbm.pdb > 3wbm.sasa ....    calculates the sasa of a pdb - file passed via ` stdin ` , using 100 slices per atom .",
    "the flag ` --no - log ` suppresses the regular output .",
    "the output will instead , because of the flag ` --print - as - b - values ` , be the provided pdb - file with the sasa of each atom replacing the temperature factors , and the atomic radii stored in the occupancy factor field .",
    "the program can thus be used as a pdb - file filter .",
    "the command - line interface also provides facilities to analyze individual chains or groups of chains in a structure separately . by calling with the option ` --chain - groups ` ,    ....",
    "$ freesasa --chain - groups = abcd+xy 3wbm.pdb ....    we get an output similar to the first example , but with two additional calculations , one where only protein chains a , b , c and d have been included , and one with only the rna chains x and y.    the option ` --select ` can be used to select a set of atoms using a subset of the syntax used in the program pymol @xcite . for example , the command    ....     $ freesasa --select=\"rna , resn a+u+g+c \" ....    will produce the following output ( after the regular output shown above )    ....     selections     rna :     8197.53 ....    where _ rna _ is simply the user - defined name of the selection , and the number the contribution to the total sasa from the bases a , u , g and c ( which we in this particular case could have got by simply adding the areas for the chains x and y above ) .    the command    ....     $ freesasa -h ....    prints a help message listing all available options , including other ways to redirect output and how to change different calculation parameters ( the most detailed information can be found online at http://freesasa.github.io/doxygen/cli.html ) .",
    "the c code below illustrates how to perform a sasa - calculation on the same pdb - file as above , using the c api , with default parameters .",
    "the functions and types used are all defined in the header ` freesasa.h ` .",
    "....      file * fp = fopen(\"3wbm.pdb\",\"r \" ) ;      freesasa_structure * structure          = freesasa_structure_from_pdb(fp , null , 0 ) ;      freesasa_result * result          = freesasa_calc_structure(structure , null ) ;      printf(\"total area : % f a2\\n \" , result->total ) ; ....    the two points where null pointers are passed as arguments are places where atom classifiers and calculation parameters could have been provided . a more elaborate example , that includes error checking and freeing of resources is included in the appendix .",
    "the api also allows the user to calculate the sasa of a set of coordinates with associated radii .",
    "the code below puts two atoms at positions @xmath3 and @xmath4 with radii @xmath5 and @xmath6 , respectively , and outputs the sasa of the individual atoms .    ....",
    "double coord [ ] = { 1.0 , 1.0 , 1.0 , 2.0 , 2.0 , 2.0 } ;     double radius [ ] = { 2.0 , 3.0 } ;     freesasa_result * result =          freesasa_calc_coord(coord , radius , 2 , null ) ;     printf(\"a1 = % f , a2 = % f\\n \" , result->sasa[0 ] ,             result->sasa[1 ] ) ; ....      the library includes python bindings that export most of the c api to python .",
    "the python code below gives the same output as the first c example , plus the area of polar and apolar atoms .",
    "again , error handling is excluded for brevity .    ....     import freesasa       structure = freesasa.structure(\"3wbm.pdb \" )     result = freesasa.calc(structure )     classarea = freesasa.classifyresults(result,structure )       print \" total : % .2f a2 \" % result.totalarea ( )     for key in classarea :         print key , \" : % .2f a2 \" % classarea[key ] ....",
    "the computational efficiency of the two algorithms was compared by running the freesasa command - line program with different parameters on a representative set of pdb structures .",
    "this set was generated from the most restrictive list of structures in the pisces database @xcite .",
    "88 pdb files were selected randomly from a set of size intervals in this list , to get an approximately even distribution in size .",
    "pisces specifies a specific chain in each structure , but in the following all chains were used , which resulted in the largest structure having over 30000 atoms ( 1jz8 ) . to average out some variation in the running time in these rather short calculations ( in some cases @xmath7 )",
    ", the fastest calculations were run two to five times .",
    "as we will see below , error bars are relatively small along that axis .    to measure the accuracy of the two algorithms , a reference sasa value , @xmath8 , was calculated using l&r with 1000 slices per atom for each structure .",
    "the error of a given sasa - value , @xmath9 , is then @xmath10 , where @xmath11 is the number of atoms in the structure .",
    "figure  [ fig : precision ] shows the results of these calculations for the 88 proteins described above . at low resolution s&r is considerably faster than l&r , and at high resolution l&r is faster , with a crossover at 1000 test points or 20 slices per atom ( 20 slices is the default setting in freesasa ) .     in sasa vs calculation time per atom @xmath12 , for the two algorithms in freesasa plus the programs naccess and pops .",
    "labels indicate the resolution used for each set of calculations , and error bars the standard error along both axes .",
    "the solid lines are only there to guide the eye , and the dashed lines indicate the analogous lines when using 2 and 4 threads in freesasa .",
    "an l&r run with 1000 slices was used as @xmath8 when calculating @xmath13 for both approximations .",
    "naccess uses l&r and was run with three values of the z - parameter ( 0.1 , 0.05 and 0.01 , corresponding to 10 , 20 and 100 slices per atom ) , a run with z - parameter 0.005 was used as @xmath8 ( using even lower z - values gave inconsistent results ) .",
    "the naccess reference calculation was also used as reference for pops .",
    "all programs were compiled using gcc 4.9.3 with the optimization flag `` -ofast '' and the tests were run on an intel core i5 - 2415 m cpu at 2.30ghz.[fig : precision ] ]    comparisons were done with naccess @xcite , dssp @xcite , nsol 1.7 @xcite , pops @xcite and triforce @xcite .",
    "the list could potentially have been a lot longer ; some programs were left out on the basis of being closed source , poorly documented or no longer available .",
    "naccess was included in spite of its limiting license due to its popularity .",
    "the sasa facilities in molecular dynamics packages were not considered since these cater to a different use case .",
    "naccess allows the user to choose arbitrary precision and can therefore be used as a reference for itself , and pops was optimized with naccess as reference .",
    "naccess uses l&r and performs very similarly to freesasa using l&r .",
    "the pops algorithm is intended as a fast coarse - grained approximation ; its authors state an average error of @xmath14 per atom @xcite . in figure",
    "[ fig : precision ] the mean @xmath13 is lower than that , which is expected , since this error is measured over the total sasa , not atom by atom .",
    "a fit showed that pops runs in @xmath15 time ( data not shown ) , which to some extent explains the relatively long mean calculation time per atom .",
    "the other programs listed above were left out of figure [ fig : precision ] because they can not be compared under the same premises .",
    "dssp calculates many different things in addition to its 200 test - point s&r - calculation , and the total running time is therefore naturally longer than the corresponding calculation in freesasa , although the accuracy should be comparable for the same number of test points .",
    "the program nsol uses s&r , but does five different sasa calculations on the same input using different parameters .",
    "the nsol code was modified to only do one of the five calculations , and is then only slightly slower than freesasa using the same number of test points .",
    "lastly , triforce is not suitable for comparison in this particular use case because it has a high initialization cost , which makes it slow for calculating the sasa of an isolated structure .    in single - threaded mode ,",
    "freesasa using l&r is almost indistinguishable from naccess in figure  [ fig : precision ] , but it is significantly faster when 2 or 4 threads are used . the effect of spreading the calculation over several threads is shown in more detail in figure  [ fig : threads ] . since the generation of cell lists is not parallelized , using more than one thread only gives a significant performance benefit in the high resolution limit .",
    "based on these results , the default has been set to two threads .",
    "depending on the nature of the calculations , this speedup can make a noticeable difference .    ]",
    "freesasa is an efficient library for calculating the sasa of protein , rna and dna structures .",
    "its main advantages over other commonly used tools is that it is open source , easily configurable and can be used both as a command line tool , a c library and a python module .",
    "the tests above demonstrate that it runs as fast as , or faster than , some popular tools at a given resolution , and can be boosted further by parallelizing the calculation .",
    "thanks go to edvin fuglebakk for comments on the code and documentation .",
    "thanks to sandhya tiwari and anders irbck for comments on the manuscript . thanks to joo rodrigues for suggestions for improved functionality .",
    "19 [ 1]#1 [ 1]`#1 ` urlstyle [ 1]doi : # 1    luigi cavallo , jens kleinjung , and franca fraternali . :",
    "a fast algorithm for solvent accessible surface areas at atomic and residue level . _ nucleic acids research _ , 310 ( 13):0 33643366 , 2003 .    warren  l delano .",
    "the pymol molecular graphics system .",
    "nils  jd drechsel , christopher  j fennell , ken  a dill , and jordi vill - freixa .",
    ": tessellated semianalytical solvent exposed surface areas and derivatives .",
    "_ journal of chemical theory and computation _ , 100 ( 9):0 41214132 , 2014 .    frank eisenhaber , philip lijnzaad , patrick argos , chris sander , and michael scharf . the double cubic lattice method : efficient approaches to numerical integration of surface area and volume and to dot surface contouring of molecular assemblies . _ journal of computational chemistry _ , 160 ( 3):0 273284 , 1995 .",
    "alexei  v finkelstein and oleg ptitsyn .",
    "_ protein physics : a course of lectures_. academic press , london , 2002 .",
    "robert fraczkiewicz and werner braun . exact and efficient analytical calculation of the accessible surface areas and their gradients for macromolecules . _ journal of computational chemistry _ , 190 ( 3):0 319333 , 1998 .",
    "simon  j hubbard and janet  m thornton . .",
    "_ computer program , department of biochemistry and molecular biology , university college london _ , 1993 .",
    "byungkook lee and frederic  m richards .",
    "the interpretation of protein structures : estimation of static accessibility . _ journal of molecular biology _ , 550 ( 3):0 379400 , 1971 .",
    "manjeera mantina , adam  c chamberlin , rosendo valero , christopher  j cramer , and donald  g truhlar .",
    "consistent van der waals radii for the whole main group . _ the journal of physical chemistry a _ , 1130 ( 19):0 58065812 , 2009 .",
    "m  masuya . : a numerical calculation program of molecular surface area , volume , and solvation energy , 2003 .",
    "url http://biocomputing.cc / nsol/.    michel  f sanner , arthur  j olson , and jean - claude spehner .",
    "reduced surface : an efficient way to compute molecular surfaces .",
    "_ biopolymers _ , 380 ( 3):0 305320 , 1996 .    a  shrake and ja  rupley .",
    "environment and exposure to solvent of protein atoms : lysozyme and insulin .",
    "_ journal of molecular biology _ , 790 ( 2):0 351371 , 1973 .",
    "richard swinbank and r  james purser .",
    "fibonacci grids : a novel approach to global modelling .",
    "_ quarterly journal of the royal meteorological society _ ,",
    "1320 ( 619):0 17691793 , 2006 .",
    "wouter  g touw , coos baakman , jon black , tim  ah te  beek , e  krieger , robbie  p joosten , and gert vriend .",
    "a series of pdb - related databanks for everyday needs .",
    "_ nucleic acids research _ , 430 ( d1):0 d364d368 , 2015 .",
    "jerry tsai , robin taylor , cyrus chothia , and mark gerstein . the packing density in proteins : standard radii and volumes .",
    "_ journal of molecular biology _ , 2900 ( 1):0 253266 , 1999 .    guoli wang and roland  l dunbrack . : a protein sequence culling server .",
    "_ bioinformatics _ , 190 ( 12):0 15891591 , 2003 .",
    "jrg weiser , peter  s shenkin , and w  clark still .",
    "approximate atomic surfaces from linear combinations of pairwise overlaps ( lcpo ) . _ journal of computational chemistry _ , 200 ( 2):0 217230 , 1999 .",
    "john  d westbrook , chenghua shao , zukang feng , marina zhuravleva , sameer valenkar , and jasmine young .",
    "the chemical component dictionary : complete descriptions of constituent molecules in experimentally determined 3d macromolecules in the protein data bank . _ bioinformatics _",
    ", 31:0 12741278 , 2014 .",
    "dong xu and yang zhang .",
    "generating triangulated macromolecular surfaces by euclidean distance transform .",
    "_ plos one _ , 40 ( 12):0 e8140 , 2009 .",
    "below is an example c program , illustrating how to use the c api for a basic sasa calculation on a structure read from ` stdin ` , including error checking and freeing of resources , using default parameters .",
    "/ * print results * /          if ( class_area ) {              printf(\"total area : % f a2\\n\",result->total ) ;              for ( int i = 0 ; i < class_area->n ; + + i )                  printf(\"%s : % f a2\\n\",class_area->string[i ] ,                         class_area->value[i ] ) ;          } else {              / * if there was an error at any step , we will end up here * /              printf(\"error calculating sasa\\n \" ) ;          }"
  ],
  "abstract_text": [
    "<S> calculating solvent accessible surface areas ( sasa ) is a run - of - the - mill calculation in structural biology . </S>",
    "<S> although there are many programs available for this calculation , there are no free - standing , open - source tools designed for easy tool - chain integration . </S>",
    "<S> freesasa is an open source c library for sasa calculations that provides both command - line and python interfaces in addition to its c api . the library implements both lee and richards and shrake and rupley s approximations , and is highly configurable to allow the user to control molecular parameters , accuracy and output granularity . </S>",
    "<S> it only depends on standard c libraries and should therefore be easy to compile and install on any platform . </S>",
    "<S> the source code is freely available from http://freesasa.github.io/. the library is well - documented , stable and efficient . </S>",
    "<S> the command - line interface can easily replace closed source legacy programs , with comparable or better accuracy and speed , and with some added functionality . + * abbreviations * : api : application programming interface . </S>",
    "<S> sasa : solvent accessible surface area . </S>",
    "<S> l&r : lee and richards approximation . </S>",
    "<S> s&r : shrake and rupley s approximation .    </S>",
    "<S> home page : : :    http://freesasa.github.io/ license : : :    gnu gpl 3.0 . </S>",
    "<S> programming languages : : :    c , python . </S>",
    "<S> dependencies : : :    standard c and gnu libraries , c99-compliant compiler . </S>",
    "<S> cython to build    python bindings ( optional ) .    </S>",
    "<S> january 25 , 2016    * freesasa : an open source c library for + solvent accessible surface area calculations * +   + _ university library , university of bergen _ + _ postboks 7808 , 5008 bergen , norway _ + ` simon.mitternacht@uib.no ` + </S>"
  ]
}