{
  "article_text": [
    "iterative message passing algorithms for decoding low - density parity - check ( ldpc ) codes @xcite operate by passing messages along the edges of a graphical representation of the code known as the tanner graph @xcite .",
    "these algorithms are optimal when the underlying graph is a tree ( see @xcite,@xcite for general theory of ldpc codes ) , but in the presence of cycles , the decoding becomes sub - optimal and there exist low - weight patterns known as near codewords @xcite or trapping sets @xcite uncorrectable by the decoder .",
    "it is now well established that the trapping sets lead to error floor in the high signal - to - noise ( snr ) region ( see @xcite for a list of references ) .",
    "while it is generally known that high girth codes have better performance in the error floor region , the exact relation between the girth and the slope of the frame error rate ( fer ) curve in the error floor region is unknown .    in this paper , we consider transmission over the binary symmetric channel ( bsc ) and the corresponding hard decision decoding algorithms .",
    "we focus on column - weight - three codes which are of special importance as their decoders have very low complexity and are interesting for a wide range of applications .",
    "we show that a column - weight - three ldpc code with tanner graph of girth @xmath2 can correct all error patterns of weight @xmath0 or less under the gallager a algorithm , thereby showing that there are no trapping sets with critical number less than @xmath1 ( see @xcite pp .",
    "4 - 6 , for missing definitions ) . in @xcite",
    ", we showed that the slope of the fer curve in the error floor region is determined by the minimal critical number . in @xcite , we proved that a column - weight - three ldpc code with tanner graph of girth @xmath2 always has a trapping set of size @xmath1 with critical number @xmath1 for the gallager a algorithm .",
    "it is worth nothing that for codes with tanner graphs of girth @xmath3 and @xmath4 , girth alone can not guarantee correction of two and three errors , respectively .",
    "it can be easily shown that codes with girth six tanner graphs can correct two errors if and only if the tanner graph does not contain a codeword of weight four . for codes with tanner graphs of girth eight , we established necessary and sufficient conditions to correct three errors @xcite . thus , with the results presented here , the problem of determining the slope of the fer curve in the error floor region for column - weigh - three codes under the gallager a algorithm is now completely solved .",
    "the rest of the paper is organized as follows . in section [ prelims ] , we establish the notation , define the gallager a algorithm and analyze the algorithm for the first @xmath5 ( @xmath6 ) iterations . in section [ maintheorem ] ,",
    "we prove our main result and we conclude in section [ discussion ] with a few remarks .",
    "let @xmath7 be an ldpc code with column weight three and length @xmath8 .",
    "the tanner graph @xmath9 of @xmath7 consists of two sets of nodes : the set of variable nodes @xmath10 with @xmath11 and the set of check nodes @xmath12 .",
    "the check nodes ( variable nodes ) connected to a variable node ( check node ) are referred to as its neighbors .",
    "an edge @xmath13 is an unordered pair @xmath14 of a variable node @xmath15 and a check node @xmath16 and is said to be incident on @xmath15 and @xmath16 .",
    "a directed edge @xmath17 is an ordered pair @xmath18 or @xmath19 corresponding to the edge @xmath20 . with a moderate abuse of notation ,",
    "we denote directed edges by simple letters ( without arrows ) but specify the direction .",
    "the girth @xmath21 is the length of the shortest cycle in @xmath9 . for a given node @xmath22 ,",
    "the neighborhood of depth @xmath23 , denoted by @xmath24 , is the induced subgraph consisting of all nodes reached and edges traversed by paths of length at most @xmath23 starting from @xmath22 ( including @xmath22 ) .",
    "the directed neighborhood of depth @xmath23 of a directed edge @xmath25 denoted by @xmath26 , is defined as the induced subgraph containing all edges and nodes on all paths @xmath27 starting from @xmath15 such that @xmath28 ( see @xcite for definitions and notation ) . in a tanner graph with girth",
    "@xmath21 , we note that @xmath29 is a tree when @xmath30 . also , if @xmath31 and @xmath32 , then @xmath33 for @xmath34 .",
    "let @xmath5 denote the number of independent iterations as defined in @xcite .",
    "the original value of a variable node is its value in the transmitted codeword .",
    "we say a variable node is good if its received value is equal to its original value and bad otherwise .",
    "a message is said to be correct if it is equal to the original value of the corresponding variable node and incorrect otherwise . in this paper , @xmath35 denotes a good variable node , @xmath36 denotes a bad variable node and @xmath37 denotes a check node . for output symmetric channels ( see @xcite ) , without loss of generality , we can assume that the all zero codeword is transmitted .",
    "we make this assumption throughout the paper .",
    "hence , a bad variable node has received value @xmath38 and an incorrect message has a value of @xmath38 .",
    "a configuration of bad variable nodes is a subgraph in which the location of bad variables relative to each other is specified .",
    "a valid configuration @xmath39 is a configuration of at most @xmath0 bad variable nodes free of cycles of length less than @xmath21 .",
    "the set of bad variable nodes in @xmath40 is denoted by @xmath41 and @xmath42 is denoted by @xmath43 . the number of bad variable nodes at depth @xmath23 in @xmath40 is denoted by @xmath44 .",
    "gallager in @xcite proposed two simple binary message passing algorithms for decoding over the bsc ; gallager a and gallager b. see @xcite for a detailed description of the gallager b algorithm . for column - weight - three codes , which are the main focus of this paper , these two algorithms are the same",
    ". every round of message passing ( iteration ) starts with sending messages from variable nodes to check nodes ( first half of the iteration ) and ends by sending messages from check nodes to variable nodes ( second half of the iteration ) .",
    "let @xmath45 , a binary @xmath8-tuple be the input to the decoder .",
    "let @xmath46 denote the message passed by a variable node @xmath15 to its neighboring check node @xmath16 in @xmath47 iteration and @xmath48 denote the message passed by a check node @xmath16 to its neighboring variable node @xmath15 . additionally , let @xmath49 denote the set of all messages from @xmath15 , @xmath50 denote the set of messages from @xmath15 to all its neighbors except to @xmath16 and @xmath51 denote the set of all messages to @xmath16 .",
    "let @xmath52 denote the number of incoming messages to @xmath15 which are equal to @xmath53 .",
    "the terms @xmath54 and @xmath55 are defined similarly .",
    "the gallager a algorithm can then be defined as follows .",
    "@xmath56    at the end of each iteration , an estimate of each variable node is made based on the incoming messages and possibly the received value . in this paper , we assume that the estimate of a variable node is taken to be the majority of the incoming messages ( see @xcite for details ) . the decoded word at the end of the @xmath47 iteration is denoted as @xmath57 .",
    "the decoder is run until a valid codeword is found or a maximum number of iterations @xmath58 is reached , whichever is earlier .",
    "the output of the decoder is either a codeword or @xmath59 .",
    "[ iteration2 ]        [ iteration3 ]        [ iteration4 ]          we begin with a lemma describing the messages passed by the gallager a algorithm in a column - weight - three code .",
    "\\(i ) if @xmath15 is a bad variable node , then we have @xmath60 and    * @xmath61 if @xmath62 , i.e. , @xmath15 sends incorrect messages to all its neighbors if it receives two or more incorrect messages from its neighboring checks in the previous iteration .",
    "* @xmath63 and @xmath64 if @xmath65 and @xmath66 , i.e. , @xmath15 sends one correct message and two incorrect messages if it receives one incorrect message from its neighboring checks in the previous iteration .",
    "the correct message is sent along the edge on which the incorrect message is received . *",
    "@xmath67 if @xmath68 , i.e. , @xmath15 sends all correct messages if it receives all correct messages from its neighboring checks in the previous iteration .",
    "\\(ii ) if @xmath15 is a good variable node , then we have @xmath69 and    * @xmath67 if @xmath70 , i.e. , @xmath15 sends all correct messages if it receives two or more correct messages from its neighboring checks in the previous iteration .",
    "* @xmath71 and @xmath72 if @xmath73 and @xmath74 , i.e. , @xmath15 sends one incorrect message and two correct messages if it receives two incorrect messages from its neighboring checks in the previous iteration .",
    "the incorrect message is sent along the edge on which the correct message is received . *",
    "@xmath61 , if @xmath75 , i.e. , @xmath15 sends all incorrect messages if it receives all incorrect messages from its neighboring checks in the previous iteration .",
    "\\(iii ) for a check node @xmath16 , we have ,    * @xmath76 , if @xmath77 is odd , i.e. , @xmath16 sends incorrect messages along the edges on which it received correct messages and correct messages along the edges on which it received incorrect messages , if the total number of incoming incorrect messages from its neighboring variable nodes is odd .",
    "* @xmath78 , if @xmath77 is even , i.e. , @xmath16 sends incorrect messages along the edges on which it received incorrect messages and correct messages along the edges on which it received correct messages , if the total number of incoming incorrect messages from its neighboring variable nodes is even .",
    "\\(iv ) a variable node is estimated incorrectly at the end of an iteration if it receives at least two incorrect messages",
    ".    follows from the description of the gallager a algorithm .",
    "now let @xmath15 be a variable node which sends an incorrect message along the edge @xmath25 in the @xmath79 iteration .",
    "the message along @xmath13 depends only on the variable nodes and check nodes in @xmath80 . under the assumption that @xmath80 is a tree ,",
    "the above observations provide a method to find all the possible configurations of bad variable nodes in @xmath80 .",
    "we have the following two cases :    \\(a ) @xmath15 is a bad variable node : in this case , there must be at least one variable node in @xmath81 which sends an incorrect message in the @xmath82 iteration .",
    "\\(b ) @xmath15 is a good variable node : in this case , there must be at least two variable nodes in @xmath81 which send an incorrect message in the @xmath82 iteration .",
    "this is repeated @xmath5 times until we reach the first iteration , at which point only the nodes and edges in @xmath80 would have been explored and all of these are guaranteed to be distinct as @xmath83 is a tree . since only bad variables send incorrect messages in the first iteration , we can calculate the number of bad variables in each configuration .",
    "specifically , let @xmath15 be a variable node which sends an incorrect message along the @xmath25 in the second iteration .",
    "if @xmath15 is a good variable node , then @xmath81 must have at least two bad variable nodes .",
    "if @xmath15 is bad , @xmath81 must have at least one bad variable node . following this approach , we have fig .",
    "[ iteration2 ] , fig .",
    "[ iteration3 ] and fig .",
    "[ iteration4 ] which show the possible configurations of bad variable nodes in @xmath84 so that @xmath15 sends an incorrect message in the @xmath79 iteration , for @xmath85 and @xmath86 , respectively . _",
    "remarks : _",
    "( i ) fig .",
    "[ iterations234 ] shows configurations with at most @xmath87 bad variable nodes .",
    "+ ( ii ) we do not illustrate configurations in which a bad variable node receives two incorrect messages in the @xmath82 iteration , so that it sends an incorrect message in the @xmath79 iteration .",
    "however , all such configurations can be found by considering configurations involving good variable nodes and converting a good varaible node to a bad one .",
    "this increases the number of bad variable nodes in the condiguration .",
    "as will be seen later , such configurations are not relevant for establishing our main result .",
    "the above observations help establish bounds on @xmath88 , which we state in the following lemma .",
    "\\(i ) if @xmath15 is a bad variable node sending an incorrect message on @xmath25 in the @xmath79 iteration and @xmath84 is a tree , then @xmath89 .",
    "if @xmath90 , i.e. , @xmath91 for @xmath92 , then @xmath93 . if @xmath94 , then @xmath95 .",
    "\\(ii ) if @xmath15 is a good variable node sending an incorrect message on @xmath25 in the @xmath79 iteration and @xmath84 is a tree , then @xmath96 .",
    "if @xmath97 , then @xmath98 . if @xmath99 , then @xmath100 .",
    "if @xmath94 , then @xmath101 .",
    "the proof is by induction on @xmath5 .",
    "it is easy to verify the bounds for @xmath102 .",
    "let the bounds be true for some @xmath103 .",
    "let @xmath104 be a bad variable node sending an incorrect message on @xmath105 in the @xmath106 iteration .",
    "further , assume that @xmath107 is a tree .",
    "then , @xmath108 has at least one check node @xmath109 which sends an incorrect message along the edge @xmath110 in the @xmath79 iteration .",
    "this implies that @xmath111 has at least one variable node @xmath112 sending an incorrect message in the @xmath79 iteration along the edge @xmath113 .",
    "since a path of length @xmath114 exists between @xmath104 and @xmath115 , @xmath116 .    if @xmath112 is a bad variable node , then @xmath117 and consequently @xmath118 . if @xmath112 is a good variable node , then @xmath119 and consequently @xmath120 .    if @xmath91 for @xmath121 , then @xmath112 is a good variable node such that @xmath122 which implies that @xmath123 by the induction hypothesis .",
    "hence , @xmath124 .",
    "if @xmath125 then either ( a ) @xmath112 is a bad variable node with @xmath126 for @xmath92 which implies that @xmath127 by the induction hypothesis .",
    "hence , @xmath128 , or ( b ) @xmath112 is a good variable node with @xmath129 which implies that @xmath130 by the induction hypothesis . hence , @xmath131 .    by the principle of mathematical induction , the bounds are true for all @xmath5 when @xmath104 is a bad variable node .",
    "the proofs are similar for the case when @xmath104 is a good variable node .",
    "in this section , we prove that a column - weight - three code with tanner graph of girth @xmath2 can correct @xmath0 errors in @xmath1 iterations of the gallager a algorithm .",
    "the proof proceeds by finding , for a particular choice of @xmath5 , all configurations of @xmath0 or less bad variable nodes which do not converge in @xmath132 iterations and then prove that these configurations also converge in subsequent iterations .",
    "when @xmath1 is even , we use @xmath133 ( or @xmath134 ) and when @xmath1 is odd , we use @xmath135 ( or @xmath136 ) .",
    "we deal with these cases separately .",
    "let @xmath104 be a variable node which receives two incorrect messages along the edges @xmath137 and @xmath138 at the end of @xmath79 iteration .",
    "this implies that @xmath139 and @xmath140 each has a variable node , @xmath141 and @xmath142 respectively , that sends an incorrect message in the @xmath79 iteration to check nodes @xmath143 and @xmath144 , respectively .",
    "let @xmath145 , @xmath146 , @xmath147 , and @xmath148 ( see fig . [ girth16_1 ] for an illustration ) .",
    "all possible configurations of bad variable nodes in @xmath149 and @xmath150 can be determined using the method outlined in section [ kiterations ] .",
    "since there exists a path of length @xmath151 between @xmath142 and @xmath143 , we have @xmath152 . also , @xmath153 for @xmath154 .",
    "therefore , @xmath155 for @xmath156 .",
    "this implies that @xmath149 and @xmath150 can have a common node only at depth @xmath157 .",
    "the total number of bad variable nodes in @xmath158 , @xmath159 , in any configuration is therefore lower bounded by @xmath160 or equivalently @xmath161 .",
    "we are interested only in the valid configurations , i.e. , at most @xmath0 bad variable nodes , free from cycles of length less than @xmath21 .",
    "we divide the discussion into three parts : ( 1 ) we find all the possible valid configurations for the case when @xmath162 ; ( 2 ) we then proceed iteratively for @xmath163 ; ( 3 ) we consider the case @xmath164 separately as the arguments for @xmath165 do not hold for this case .",
    "let @xmath15 be a variable node which sends an incorrect message in the iteration @xmath166 along edge @xmath25 , given that there are at most seven bad variables and @xmath167 is a tree .",
    "[ iteration4 ] illustrates different configurations of bad variable nodes in @xmath168 . as remarked earlier , fig .",
    "[ iteration4 ] does not show configurations in which a bad variable node has to receive two incorrect messages in an iteration to send an incorrect message along the third edge in the next iteration .",
    "it can be seen in the proof of theorem [ theorem2 ] that these cases do not arise in valid configurations .",
    "let @xmath169 be defined as above with @xmath86 . using the arguments outlined above ( and the constraint that @xmath162 ) , all possible configurations such that @xmath170 can be found .",
    "[ girth16 ] shows all such possible configurations .",
    "[ girth16_1 ]     bad variable nodes , free of cycles of length less than @xmath171 , which do not converge in @xmath172 iterations.,width=89 ]    [ girth16_2 ]     bad variable nodes , free of cycles of length less than @xmath171 , which do not converge in @xmath172 iterations.,width=89 ]    [ girth16_3 ]     bad variable nodes , free of cycles of length less than @xmath171 , which do not converge in @xmath172 iterations.,width=89 ]      let @xmath39 be a valid configuration in which there exists a variable node @xmath104 which receives two incorrect messages along the edges @xmath137 and @xmath138 at the end of @xmath79 iteration .",
    "this implies that @xmath174 and @xmath175 each has a variable node , @xmath141 and @xmath142 , respectively , that sends an incorrect message in the @xmath79 iteration .",
    "we have the following lemma .    [ lemma1 ]",
    "@xmath141 and @xmath142 are bad variable nodes .",
    "the proof is by contradiction .",
    "we know that the total number of bad variables in any configuration is lower bounded by + @xmath161 and that @xmath176 .",
    "we have two cases .",
    "\\(a ) @xmath141 and @xmath142 are both good variable nodes : we first note that in any valid configuration , @xmath177 . otherwise , we have @xmath178 , and from lemma 2 , @xmath179 or , we have @xmath180 , and @xmath181 .",
    "both cases are a contradiction as we have at most @xmath87 bad variable nodes . hence , @xmath177 .",
    "now , @xmath182 , and hence we have @xmath183 , which is a contradiction .",
    "\\(b ) @xmath141 is a bad variable node and @xmath142 is a good variable node .",
    "the opposite case is identical .",
    "first we claim that in any valid configuration , @xmath184 .",
    "since @xmath141 is a bad variable node , @xmath185 .",
    "assume that @xmath186 . then @xmath187 .",
    "again , @xmath188 implies that @xmath189 ( as @xmath176 ) , which is a contradiction .",
    "hence , @xmath184 .",
    "now , @xmath184 and @xmath182 , implies that @xmath190 which is a contradiction .    hence , @xmath141 and @xmath142 are both bad variable nodes .",
    "we now have the following theorem :    [ theorem1 ] if @xmath39 is a configuration which does not converge in @xmath191 iterations , then there exists a configuration @xmath192 which does not converge in @xmath5 iterations .",
    "in the configuration @xmath39 , @xmath141 and @xmath142 are bad variable nodes which send incorrect messages to check nodes @xmath143 and @xmath144 , respectively , in the @xmath79 iteration .",
    "this implies that @xmath193 and @xmath194 each has a check node , @xmath195 and @xmath196 , respectively , that sends an incorrect message in @xmath82 iteration to @xmath141 and @xmath142 , respectively .",
    "now consider a configuration @xmath192 constructed from @xmath39 by removing the nodes @xmath197 and the edges connecting them to their neighbors and introducing the edges @xmath198 and @xmath199 ( see fig .",
    "[ configg_g4 ] ) . if @xmath39 has at most @xmath87 bad variable nodes and no cycles of length less than @xmath21 , then @xmath192 has at most @xmath200 bad variable nodes and no cycles of length less than @xmath201 . in @xmath192 variable node",
    "@xmath104 receives two incorrect messages at the end of @xmath5 iterations and hence @xmath192 is a valid configuration which does not converge in @xmath5 iterations .",
    "theorem [ theorem1 ] gives a method to construct valid configurations of bad variable nodes for girth @xmath21 from valid configurations for girth @xmath202 .",
    "also , if @xmath203 and @xmath204 are two distinct valid configurations , then the configurations @xmath205 and @xmath206 constructed from @xmath203 and @xmath204 , respectively , are distinct .",
    "hence , the number of valid configurations for girth @xmath21 is greater than or equal to the number of valid configurations for girth @xmath202 .",
    "note that the converse of theorem [ theorem1 ] is not true in general .",
    "however , for @xmath207 , we will show in theorem [ theorem2 ] that any configuration for girth @xmath21 can be extended to a configuration for girth @xmath202 .",
    "[ theorem2 ] for @xmath1 even and @xmath208 , there are only three valid configurations which do not converge in @xmath191 iterations .    for @xmath86",
    ", we have @xmath162 and there are only three valid configurations as given in fig [ girth16 ] .",
    "so , for @xmath207 and @xmath1 even , there can be at most three valid configurations .",
    "each valid configuration for @xmath162 , can be extended to a configuration @xmath209 for @xmath210 by the addition of two bad variable nodes @xmath211 and @xmath212 in the following way .",
    "remove the edges @xmath213 and @xmath214 .",
    "add bad variable nodes @xmath211 and @xmath212 and check nodes @xmath215 and @xmath216 . introduce the edges @xmath217 , @xmath218 , @xmath219 , @xmath220 , @xmath221 and @xmath222 ( see fig .",
    "[ configg_g4 ] for an illustration ) . it can be seen that @xmath209 is a valid configuration for girth @xmath210 . in general , the configurations constructed using the above method from the valid configurations for @xmath207 are valid configurations for @xmath202 .",
    "[ girth20 ] illustrates the three configurations for all @xmath208 .",
    "_ remark : _ in all valid configurations @xmath39 with @xmath207 , no bad variable node receives two incorrect messages at the end of the @xmath79 iteration .",
    "[ configg_1 ]     from @xmath223 , construction of @xmath224 from @xmath223.,width=192 ]    [ configg_g4 ]     from @xmath223 , construction of @xmath224 from @xmath223.,width=192 ]    [ girth20_1 ]     bad variable nodes free of cycles of length less than @xmath225 which do not converge in @xmath191 iterations.,width=89 ]    [ girth20_2 ]     bad variable nodes free of cycles of length less than @xmath225 which do not converge in @xmath191 iterations.,width=89 ]    [ girth20_3 ]     bad variable nodes free of cycles of length less than @xmath225 which do not converge in @xmath191 iterations.,width=89 ]    [ theorem3 ] all valid configurations @xmath39 converge to a codeword in @xmath1 iterations .",
    "we prove the theorem for one configuration for @xmath162 only .",
    "the proof is similar for other configurations . at the end of fourth iteration ,",
    "let @xmath104 receive two incorrect messages ( see fig [ girth16_1 ] ) .",
    "it can be seen that there can not exist another variable node ( either good or bad ) which receives two incorrect messages without violating the @xmath162 constraint .",
    "also , @xmath226 receives all correct messages and @xmath227 receive one incorrect message each from @xmath228 , respectively . in the fifth iteration",
    ", we have @xmath229 in the sixth iteration , we have @xmath230 in the seventh iteration , we have , @xmath231 finally in the eighth iteration , we have , @xmath232    at the end of eighth iteration , no variable node receives two incorrect messages and hence the decoder converges to a valid codeword .      in this case ,",
    "@xmath102 and the incoming messages at the end of the second iteration are independent .",
    "we need to prove that any code with tanner graph with @xmath164 , can correct all error patterns of weight less than six .",
    "let @xmath15 be a variable node which sends an incorrect message in the third iteration along edge @xmath25 given that there are at most @xmath233 bad variables and @xmath234 is a tree .",
    "[ iteration4 ] illustrates different configurations of bad variable nodes in @xmath235 .",
    "[ girth12 ] shows all possible configurations of five or less bad variable nodes which do not converge to a codeword at the end of three iterations .",
    "however , all the configurations converge to a codeword in six iterations .",
    "the proofs for configurations in fig .",
    "[ girth12](a)-(h ) are similar to the proof for configuration in fig .",
    "[ girth16_1 ] and are omitted .",
    "since , configuration ( i ) has only four bad variable nodes , a complete proof for convergence requires considering all possible locations of the fifth bad variable node , but other than that the structure of the proof is identical to that of the proof for the configuration in fig .",
    "[ girth16_1 ] .",
    "it is worth noting that in this case , there exist configurations in which a bad variable receives two incorrect messages at the end of the third iteration .",
    "however , all the configurations eventually converge to a codeword .",
    "[ girth12_1 ]        [ girth12_2 ]        [ girth12_3 ]        [ girth12_4 ]        [ girth12_5 ]        [ girth12_6 ]        [ girth12_7 ]        [ girth12_8 ]        [ girth12_9 ]          in this case , we have @xmath135 and we need to prove that the code is capable of correcting all error patterns of weight @xmath136 or less .",
    "the methodology of the proof is similar to the proof in the case when @xmath1 is even . in this case",
    ", we have @xmath155 for @xmath236 .",
    "this implies that @xmath149 and @xmath150 can have a common node at depth @xmath237 .",
    "therefore , in any configuration , @xmath238 is lower bounded by @xmath239 .",
    "the valid configurations in this case are the ones which satisfy @xmath240 .",
    "we again deal with @xmath241 and @xmath242 separately .",
    "[ lemma2 ] for @xmath243 , there is only one configuration of six bad variable nodes which does not converge in four iterations .    using arguments outlined above and the configurations in fig .",
    "[ iteration3 ] along with the constraint that @xmath241 , we conclude that there is only one configuration which does not converge in four iterations , which is shown in fig .",
    "[ girth14 ] .",
    "if @xmath39 with @xmath241 is a valid configuration which does not converge in @xmath132 iterations , then @xmath244 and @xmath245 are bad variable nodes    similar to the proof of lemma [ lemma1 ] .",
    "[ theorem4 ] if @xmath39 is a valid configuration which does not converge in @xmath132 iterations , then there exists a valid configuration @xmath192 which does not converge in @xmath5 iterations .",
    "similar to the proof of theorem [ theorem1 ] .",
    "[ theorem5 ] for @xmath208 , there is only one valid configuration which does not converge in @xmath132 iterations .    for @xmath86 , we have @xmath243 and there is only one configuration .",
    "for @xmath246 , the number of valid configurations can not be more than one . the valid configuration for @xmath243 ,",
    "can be extended to a configuration for @xmath247 ( in the same manner as in theorem [ theorem2 ] ) . in general , the valid configuration for girth @xmath21 can be extended to a valid configuration for girth @xmath202 . fig .",
    "[ girth18 ] shows @xmath39 for all @xmath241 .",
    "[ theorem6 ] the configuration @xmath39 converges to a codeword in @xmath1 iterations .",
    "similar to the proof of theorem [ theorem3 ] .      in this case ,",
    "@xmath102 and there are three configurations which do not converge at the end of the third iteration . fig .",
    "[ girth10 ] shows the three configurations .",
    "it can be shown that these configurations converge in five iterations .",
    "in this paper , we have established a relation between the girth and error correction capability of column - weight - three ldpc codes .",
    "the result presented is the best possible bound as it is known that codes with girth @xmath2 can not be guaranteed to correct @xmath1 errors .",
    "while it is disappointing that the error correction capability grows only linearly in the girth for column - weight - three codes , the methodology of our proof can be applied to higher column - weight codes to ( hopefully ) obtain better results .",
    "bad variable nodes free of cycles of length less than @xmath248 which does not converge in @xmath172 iterations configuration of at most @xmath157 bad variable nodes free of cycles of length less than @xmath249 which does not converge in @xmath132 iterations.,width=76 ]       bad variable nodes free of cycles of length less than @xmath248 which does not converge in @xmath172 iterations configuration of at most @xmath157 bad variable nodes free of cycles of length less than @xmath249 which does not converge in @xmath132 iterations.,width=76 ]                          d.  j.  c. mackay and m.  j. postol , `` weaknesses of margulis and ramanujan  margulis low - density parity - check codes , '' in _ proceedings of mfcsit2002 , galway _ , ser .",
    "electronic notes in theoretical computer science , vol .",
    "74.1em plus 0.5em minus 0.4em elsevier , 2003 .",
    "[ online ] .",
    "available : http://www.inference.phy.cam.ac.uk/mackay/abstracts/margulis.html      m.  ivkovic , s.  k. chilappagari , and b.  vasic , `` eliminating trapping sets in low - density parity check codes by using tanner graph covers , '' to appear in _ ieee trans .",
    "theory_. [ online ] .",
    "available : http://arxiv.org/abs/0805.1662        a.  shokrollahi , `` an introduction to low - density parity - check codes , '' in _ theoretical aspects of computer science : advanced lectures_.1em plus 0.5em minus 0.4emnew york , ny , usa : springer - verlag new york , inc . , 2002 , pp ."
  ],
  "abstract_text": [
    "<S> the relation between the girth and the error correction capability of column - weight - three ldpc codes is investigated . </S>",
    "<S> specifically , it is shown that the gallager a algorithm can correct @xmath0 errors in @xmath1 iterations on a tanner graph of girth @xmath2 .    </S>",
    "<S> submitted to ieee transactions on information theory , july 2008    * keywords : * low - density parity - check codes , gallager a algorithm , error floor , girth </S>"
  ]
}