{
  "article_text": [
    "computational scientists and engineers have begun making use of hardware accelerators ( gpu , cell be , fpga , etc . ) because these can provide significant gains in the overall performance of many numerical simulations at a relatively low cost .",
    "compute unified device architecture ( cuda )  @xcite is nvidia s framework for general - purpose computing on its graphics processing units ( gpus ) ; cell broadband engine ( cell be )  @xcite is a processor that was designed by a collaboration between sony , toshiba and ibm and is being used in hdtvs , gaming consoles ( sony s playstation 3 ) , as well as high - performance computing hardware ( ibm s cell blades  @xcite , lanl roadrunner  @xcite ) .    in this work",
    ", we make use of these new technologies to accelerate an application from the numerical relativity ( nr ) community  a teukolsky equation solver  @xcite , which is essentially a linear ( hyperbolic ) partial - difference - equation ( pde ) solver code that uses a finite - differencing numerical scheme .",
    "a distinguishing aspect of this work is that the numerical simulations presented are such that they require high numerical precision i.e. double ( 64-bit ) , quadruple ( 128-bit ) and octal ( 256-bit ) floating - point precision .",
    "therefore , we focus on the implementation of high - precision floating - point arithmetic computation in cuda , and compare the resulting performance with that from other processor architectures .    it is worth pointing out that our nr application is of a type that is quite common in various fields of science and engineering , therefore we expect that our work would be of interest to the larger community of computational scientists . these architectures have been recently evaluated for other numerically intensive problems , and their performances have been compared and presented in the relevant literature  @xcite .",
    "this paper is organized as follows : in section 2 , we provide a very brief introduction to cuda gpus and also the cell be .",
    "we emphasize aspects of these hardware accelerators that are relevant to our implementations . in section 3 ,",
    "we briefly introduce the teukolsky equation , the relevant background gravitational physics and the numerical method used by the solver code .",
    "it is this code that we accelerate in our work using the tesla cuda gpu and also the cell be . in section 4 , we describe our parallel code s implementation and then in section 5 we present the code s overall performance results .",
    "finally , in section 6 , we summarize this work and make some conclusive remarks .",
    "all processor manufacturers have moved towards multi - core designs today in the quest for higher performance . at the time of the writing of this article , high - end desktop processors by intel and amd have a maximum of six ( 6 ) cores . on the other hand , there are other computing technologies that have been in existence for several years that have traditionally had many more compute cores than standard desktop processors .",
    "these are sometimes referred to as hardware accelerators and have a",
    "_ many_-core design .",
    "examples of these accelerators include gpus and the cell be .",
    "the cell be  @xcite was developed collaboratively by sony , ibm and toshiba primarily for multimedia applications .",
    "this processor has a general purpose ( powerpc ) cpu , called the ppe ( that can run two ( 2 ) software threads simultaneously ) and eight ( 8) special - purpose compute engines , called spes available for raw numerical computation .",
    "each spe can perform vector operations , which implies that it can compute on multiple data , in a single instruction ( simd ) .",
    "all these compute elements are connected to one another through a high - speed interconnect bus ( eib ) .",
    "note that because of this heterogeneous design , the cell be is very different from traditional multi - core processors . a single , 3.2 ghz cell be has a peak performance of over 200 gflop / s in single - precision floating - point computation and 100 gflop / s in double - precision operations .",
    "one challenge introduced by this new design , is that the programmer has to explicitly manage the data transfer between the ppe and the spes .",
    "the ppe and spes are equipped with a dma engine  a mechanism that enables data transfer to and from main memory and each other .",
    "the parallel programming model on cell be allows for the use of spes for performing different tasks in a workflow ( _ task parallel _ model ) or performing the same task on different data ( _ data parallel _ model ) .    in the cuda context ,",
    "the gpu ( called _ device _ ) is accessible to the cpu ( called _ host _ ) as a co - processor with its own memory .",
    "the device executes a function ( usually referred to as a _ kernel _ ) in a data - parallel model i.e. a number of threads run the same program on different data .",
    "the many - core architecture of the gpu makes it possible to apply a kernel to a large quantity of data in one single call .",
    "if the hardware has a large number of cores , it can process them all in parallel ( for example , nvidia s tesla gpu has as many as 240 compute cores clocked at 1.3 ghz ) . in the area of high - performance computing",
    ", this idea of massive parallelism is extremely important .",
    "the tesla gpu can also perform double - precision floating point operations , at a performance comparable to that of the cell be mentioned above .",
    "gpus provide significant flexibility in terms of memory management : six ( 6 ) main types of memory exist in the form of registers , local memory , shared memory , global memory , constant memory and texture memory .",
    "we will not attempt to go into detail with these different memory arrangements in this document ; instead we will simply refer the reader to online resources on this somewhat involved topic  @xcite .",
    "several gravitational wave observatories  @xcite are currently being built all over the world : ligo in the united states , geo / virgo in europe and tama in japan .",
    "these observatories will open a new window onto the universe by enabling scientists to make astronomical observations using a completely new medium ",
    "gravitational waves ( gws ) , as opposed to electromagnetic waves ( light ) .",
    "these waves were predicted by einstein s relativity theory , but have not been directly observed because the required experimental sensitivity was simply not advanced enough , until very recently .",
    "numerical relativity  @xcite is an area of computational science that emphasizes the detailed modeling of strong sources of gws  collisions of compact astrophysical objects , such as neutron stars and black holes .",
    "thus , it plays an extremely important role in the area of gw astronomy and gravitational physics , in general .",
    "moreover , the nr community has also contributed to the broader computational science community by developing an open - source , modular , parallel computing infrastructure called _ cactus _  @xcite .",
    "the specific nr application we have chosen for consideration in this work is one that evolves the perturbations of a rotating ( kerr ) black hole , i.e. solves the teukolsky equation in the time - domain  @xcite .",
    "this equation is essentially a linear wave - equation in kerr space - time geometry .",
    "the next two subsections provide more detailed information on this equation and the associated numerical solver code .",
    "the teukolsky master equation describes scalar , vector and tensor field perturbations in the space - time of kerr black holes  @xcite . in boyer - lindquist coordinates ,",
    "this equation takes the form @xmath0",
    "\\partial_{tt}\\psi -\\frac{4 m a r}{\\delta }           \\partial_{t\\phi}\\psi \\nonumber \\\\ & & - 2s\\left[r-\\frac{m(r^2-a^2)}{\\delta}+ia\\cos\\theta\\right ]           \\partial_t\\psi\\nonumber\\\\    & & + \\,\\delta^{-s}\\partial_r\\left(\\delta^{s+1}\\partial_r\\psi\\right ) + \\frac{1}{\\sin\\theta}\\partial_\\theta \\left(\\sin\\theta\\partial_\\theta\\psi\\right)+\\nonumber\\\\ & & \\left[\\frac{1}{\\sin^2\\theta}-\\frac{a^2}{\\delta}\\right ]   \\partial_{\\phi\\phi}\\psi + \\ , 2s",
    "\\left[\\frac{a ( r - m)}{\\delta }   + \\frac{i \\cos\\theta}{\\sin^2\\theta}\\right ] \\partial_\\phi\\psi   \\nonumber\\\\ & & - \\left(s^2 \\cot^2\\theta - s \\right ) \\psi = 0   , \\end{aligned}\\ ] ] where @xmath1 is the mass of the black hole , @xmath2 its angular momentum per unit mass , @xmath3 and @xmath4 is the `` spin weight '' of the field .",
    "the @xmath5 versions of these equations describe the radiative degrees of freedom of a simple scalar field , and are the equations of interest in this work . as mentioned previously , this equation is an example of linear , hyperbolic , homogeneous ( 3 + 1)d pdes which are quite common in several areas of science and engineering , and can be solved numerically using a variety of finite - difference schemes .",
    "@xcite demonstrated stable numerical evolution of eq .",
    "( [ teuk0 ] ) for using the well - known lax - wendroff numerical evolution scheme .",
    "our teukolsky code uses the exact same approach , therefore the contents of this section are largely a review of the work presented in the relevant literature  @xcite .",
    "our code uses the tortoise coordinate @xmath6 in the radial direction and azimuthal coordinate @xmath7 .",
    "these coordinates are related to the usual boyer - lindquist coordinates by @xmath8 and @xmath9 these coordinates are better suited for performing numerical evolutions in a kerr space - time background for a number of reasons that are detailed in ref .",
    "next , we factor out the azimuthal dependence and use the ansatz , @xmath10 that allows us to reduce the dimensionality of the pde to ( 2 + 1)d . defining @xmath11 and @xmath12",
    "allows the teukolsky equation to be rewritten in first order form as @xmath13 where @xmath14 is the solution vector .",
    "the subscripts @xmath15 and @xmath16 refer to the real and imaginary parts respectively ( note that the teukolsky function @xmath17 is a complex valued quantity ) .",
    "explicit forms for the matrices , and can be easily found in the relevant literature  @xcite .",
    "rewriting eq .",
    "( [ eq : evln ] ) as @xmath18 where @xmath19 @xmath20 and using the lax - wendroff iterative scheme , we obtain stable evolutions .",
    "each iteration consists of two steps : in the first step , the solution vector between grid points is obtained from @xmath21 \\ ; .\\nonumber\\end{aligned}\\ ] ] this is used to compute the solution vector at the next time step , @xmath22 \\ , .",
    "\\label{lw2}\\ ] ] the angular subscripts are dropped in the above equation for clarity .",
    "all angular derivatives are computed using second - order , centered finite difference expressions .    following ref .",
    "@xcite , we set @xmath23 and @xmath24 to zero on the inner and outer radial boundaries .",
    "symmetries of the spheroidal harmonics are used to determine the angular boundary conditions : for even @xmath25 modes , we have @xmath26 at @xmath27 while @xmath28 at @xmath27 for modes of odd @xmath25 .",
    "the main science goal for the development of such a teukolsky equation solver is to study the `` controversial '' kerr black hole `` tails '' problem .",
    "the statement of the problem is simple : place an observer in a circular orbit around a black hole , and have them measure at late times a generic perturbation field , that had compact support at some initial time .",
    "it is generally accepted that the observer measures the late - time perturbation field to drop off as an inverse power law of time , specifically as @xmath29 . in the case of a non - rotating black hole , @xmath30 , where @xmath31 is the multipole moment of the initial perturbation field .",
    "namely , if the initial ( compactly supported ) perturbation field has the angular dependence of @xmath32 , the angular dependence remains unchanged ( due the hole s spherical symmetry ) and the decay rate of the field is governed by the @xmath31 value of the initial perturbation .",
    "however , in the context of rotating black holes , it is the value of @xmath33 that has been controversial in the literature , with some conflicting results reported .",
    "see for example  @xcite for a recent and detailed review of the controversy .",
    "now , generating accurate numerical simulations in this context involves a number of challenges .",
    "firstly , these simulations need to be rather long  this is because typically the observed field exhibits an exponentially decaying oscillatory behavior in the initial part of the evolution and only much later this transitions over to a clean power - law decay .",
    "therefore , one needs to wait for the initial oscillations ( so called `` quasi - normal ringing '' ) to dissipate away . secondly , because each multipole has its own decay rate ( which increases with an increase in @xmath31 ) at late times one ends up with numerical data in which different multipoles have widely different amplitudes ( often 30  40 orders of magnitude apart ! ) .",
    "for this reason , not only does the numerical solution scheme have to be high - order ( to reduce the discretization errors to the required levels ) but it also requires high - precision floating - point numerical computation ( due to the large range of amplitudes involved ) .",
    "both these requirements make performing scientifically meaningful kerr tails numerical simulations rather difficult , especially using traditional desktop processors . for this reason , in this work we turn to hardware accelerators such as gpus and the cell be .",
    "as mentioned already , we require a higher - order numerical evolution scheme to solve the teukolsky equation in the context of these kerr tails simulations .",
    "now , it turns out that it is sufficient that only the angular differentiation ( i.e. @xmath34-derivatives of the field ) be implemented using a higher - order numerical stencil .",
    "the temporal and the radial direction related operations can simply stay 2nd - order and such a mixed approach yields sufficiently good results  @xcite .",
    "for this reason , in this work we choose the finite - difference angular differentiation operator to be 10th - order accurate and leave the rest of the numerical scheme as a standard 2nd - order lax - wendroff algorithm .",
    "in addition , as pointed out before , we also require high - numerical precision  in particular , double , quadruple and octal precision may be required depending upon the details of kerr tails simulation being attempted .",
    "now , double - precision ( 64-bit ) floating - point operations are supported on nearly all compute hardware including the tesla cuda gpu and the cell be . therefore , no special considerations are necessary for double - precision computations ",
    "we simply use the native double - precision support on each hardware . on the other hand ,",
    "very few hardware options support quadruple - precision ( 128-bit ) datatype and operations .",
    "in fact , amongst the options available to us , only the cell be s ppe natively supports _ long double _ datatype with 128-bit accuracy .",
    "and to the best of our knowledge , no compute hardware natively supports octal - precision ( 256-bit ) arithmetic .",
    "therefore , finding a software solution for our high - precision requirements is necessary . after examining a number of open - source high - precision floating point arithmetic packages ,",
    "we find that the lbnl qd library  @xcite is one that is well suited for porting over to cuda and also the cell be . in this library ,",
    "the high - precision datatypes ( quadruple and octal precision types ) are implementing using a representation based on the appropriate number of double - precision floats and similarly the high - precision floating - point operations are performed ultimately using standard double - precision operations .",
    "figure 1 depicts some sample results from a kerr tails simulation that makes use of all these enhancements in floating - point precision and also a high - order accurate numerical evolution scheme .",
    "multipoles ( 0  8) starting with a pure @xmath35 multipole .",
    "these tails obey the proposed tail formula @xmath36",
    "it is clear that such numerical simulations require octal - precision floating - point arithmetic .",
    ", width=336 ]",
    "the first task in our work is to isolate the most compute intensive portions of our teukolsky equation solver code . upon performing a basic profiling of our code using the gnu profiler * gprof * , we learn that the computing the `` right - hand - sides '' of the lax - wendroff steps i.e. the quantities within the square - brackets of eqs .",
    "( [ lw1 ] ) and ( [ lw2 ] ) , take nearly * 80% * of the application s overall runtime .",
    "we anticipate that this observation is fairly typical for codes of this type .",
    "thus , it is natural to consider accelerating this `` right - hand - side '' computation using data - parallelization on the many - cores of the tesla gpu or cell be .",
    "a data - parallel model is relatively straightforward to implement in a code like ours .",
    "we simply perform a domain - decomposition of our finite - difference numerical grid and allocate the different parts of the grid to different cores . more specifically , on the tesla gpu , each thread computes the right - hand - side for a single pair of @xmath6 and @xmath34 grid values .",
    "in addition , it is necessary to establish the appropriate data communication between the gpu cores and the remaining code that is executing on the cpu  we use * cudamemcpy * instructions to transfer data back - and - forth from main memory and we use only global memory on the gpu to simplify communication between the gpu cores .",
    "we estimate that this simplification ( only making use of global memory ) will not impact overall performance significantly because of the relatively intense computation involved in the right - hand - side calculations ( especially in the context of the high - precision operations ) i.e. the _ arithmetic intensity _ of the computation is sufficiently high .",
    "unfortunately , this approach yields negligible performance gain on the tesla gpu .",
    "the reason is that although the right - hand - side computation is accelerated due the use of the many - cores of the gpu , the time it takes to bring that data back / forth to / from main memory so that the remaining computation can resume on the cpu , is large enough that no overall gain in performance is perceived .",
    "this is simply due to the poor bandwidth of the system s pci bus where the gpu is located .",
    "it is worth pointing out that this is not an issue for the cell be because the general - purpose cpu ( ppe ) and the many compute - cores ( spes ) reside on the same chip and have an extremely high bandwidth bus ( eib ) between them for communication and data transfer .",
    "thus , this approach on the cell be nearly yields the maximum allowed performance gain ( only limited by",
    "_ amdahl s law _ to * 5x * )  @xcite .",
    "now , to address this issue on the cuda gpu , we port _ all _ the lax - wendroff related compute routines as separate kernels onto the gpu . in this manner",
    ", no communication would be necessary with the rest of the computer system and we would overcome the challenge we face .",
    "it is worth noting that some of these routines are not ideal for execution on the gpu ( for example , some do nt quite have the same level of parallelism that would be essential to obtain high performance from the gpu architecture ) but we still port these over for execution on the gpu regardless , simply because our goal is to minimize data transfer back and forth from main memory .",
    "this requires a significant amount of additional effort  but one that pays off well eventually ( as seen in the following section ) .",
    "we leave the cell be code as outlined before i.e. only accelerate the right - hand - side computation using the spes .",
    "finally , as mentioned already , we implement high - precision floating - point operations by developing a port of the lbnl qd library for the gpu cores and the cell s spes . in order to do this ,",
    "we strip out the essentials of the qd representation and the basic functions that we require into separate header files and source - code and make straightforward use of these in our teukolsky solver code .",
    "this approach requires some effort as well , but is not very challenging to implement the details .    in summary ,",
    "it is worth pointing out that this high - precision cuda implementation of our teukolsky solver code is fairly straightforward , although it does require some effort .",
    "it should also be mentioned that we do not attempt to hand - tune the codes to tailor them for each architecture , in order to obtain maximal performance .",
    "instead , we rely on the mature compiler suites to perform all low - level optimizations automatically .",
    "in this section , we report on the final results from our implementations as outlined in the previous section .",
    "we use the following hardware for our performance tests : ibm qs22 blade system , that supports the cell be clocked at 3.2 ghz .",
    "this system is equipped with 16 gbs of main memory . for the cuda case , we make use of the nvidia c1060 tesla cuda gpu .",
    "this system has an amd 2.5 ghz phenom ( 9850 quad - core ) processor as its main cpu and four ( 4 ) gbs of memory .",
    "all these systems are running fedora linux as the primary operating system .",
    "standard open - source gcc compiler suite for code development is available on all these systems .",
    "table 1 depicts our final performance gains for all the cases considered in this work i.e. double , quadruple and octal precision based parallel implementation of our teukolsky equation solver code running on cpu , cuda gpu and cell be .",
    "the baseline used for this relative comparison is a single - core amd 2.5 ghz phenom desktop processor .",
    "the cell be optimized code performs consistently and expectedly through all the cases considered here .",
    "we obtain a performance gain in the range of * 3x  5x * , which implies that our parallel implementation has successfully been able to accelerate the right - hand - side computation considerably and now the overall performance is simply limited by the remaining computation that executes serially on the ppe .",
    "naturally , we could improve the performance of our code on the cell be even further , by moving more computation onto the spes .",
    "interestingly , our cuda implementation exhibits widely varying performance and we discuss that more thoroughly below .    *",
    "*    .performance gain factor [ cols=\"^,^,^,^\",options=\"header \" , ]      as mentioned before , for the double - precision case we make use the native implementation offered by the hardware itself .",
    "this yields a tremendous gain ( * 20x * ) in overall performance using the tesla gpu , when compared with a single - core of a typical desktop cpu .",
    "thus , our parallelization approach of moving the entire computation over to the gpu to minimize communication with the cpu pays off very well , even though some of the routines are not ideally suited to run on gpu architectures .    in this case",
    "we certainly obtain an order - of - magnitude gain in overall application performance by making use of a cuda gpu .      for the quadruple - precision case , we make use of our cuda port of the lbnl qd library in the teukolsky equation solver code .",
    "interestingly , in this case we obtain negligible gain in overall performance by using the tesla gpu .",
    "however it is worth pointing out if we compare the performance of the qd library based implementation of our code to a _ long double _ based implementation ( on the only platform in which that type is available to us ",
    "the cell be s ppe ) , we obtain a * 4x * gain over the latter by simply making use of the qd library .",
    "thus , when compared with a _ long double _ based implementation , the gains we obtain from all the compute architectures considered in this work are quite significant ( nearly * 13x * on the cell be ) .      finally , for the octal - precision case",
    ", we also make use of our cuda port of the lbnl qd library in the teukolsky equation solver code . in this case , the tesla cuda gpu and the cell be yield comparable performance gains ( * 4x * ) over the cpu .",
    "in this work , we take an important nr application  the teukolsky equation solver code that requires high - precision numerical computation  and perform low - level parallelization for optimized execution on many - core architectures such as tesla cuda gpu and cell be .",
    "we describe the parallelization approach and its implementation in detail in this article .",
    "the final outcome of our efforts is quite distinct for the different cases considered in this work .",
    "on the cell be , we obtain a consistent gain in the overall application performance , limited only by the ppe .",
    "thus , there is certainly considerable room for further improvement . on the tesla gpu ,",
    "the gains we obtain are negligible in some cases ( quadruple - precision ) and extremely high in others ( double - precision ) .",
    "we believe that the reason behind this is that the smallest `` chunk '' of the computation ",
    "one that would be difficult to parallelize further  in the context of the high - precision lbnl qd library based computation ( quadruple and octal precision ) is perhaps still too complex for a single gpu core to compute through efficiently .",
    "gpus are designed to function very well on tasks that can be split into a large number of small , simple and parallel chunks , which is perhaps simply not the case at hand .",
    "the lbnl qd library based computation involves significant amount of code branching and irregular memory access patterns  these are situations that gpus usually are unable to handle very effectively . perhaps upcoming cuda gpu architectures , such as nvidia s fermi ,",
    "will perform significantly better in such situations .",
    "our results and observations reinforce the fact that these many - core architectures should not be considered general - purpose computation accelerators  the actual computational problem and the relevant parallel approach has to be one that is well suited for the compute hardware s specific design , else one may gain very little or nothing at all . in general , the more massively parallel the task is , the better a design like that of a gpu would perform . for highly serial tasks ,",
    "a traditional cpu is perhaps still the best option . and",
    "finally , for a task that is somewhere in between these two extremes , a design like that of the cell be may be optimal .",
    "we would like to thank glenn volkema for his assistance with this work throughout , many helpful discussions and also for providing useful feedback on this manuscript .",
    "we are grateful for advice from jens breitbart and anton obukhov .",
    "we would also like to acknowledge research support from the national science foundation ( nsf grant numbers : phy-0831631 , phy-0902026 ) , ibm , sony and nvidia .",
    "m. christen et al .",
    ", accelerating stencil - based computations by increased temporal locality on modern multi- and many - core architectures , _ new frontiers in high - performance and hardware - aware computing ( hiphac ) _ , lake como , italy , 2008      j. breitbart , g. khanna , an exploration of cuda and cbea for a gravitational wave data - analysis application ( einstein@home ) , _ international conference on parallel processing and applied mathematics _ , wroclaw , poland , 2009"
  ],
  "abstract_text": [
    "<S> hardware accelerators ( such as nvidia s cuda gpus ) have tremendous promise for computational science , because they can deliver large gains in performance at relatively low cost . in this work , </S>",
    "<S> we focus on the use of nvidia s tesla gpu for high - precision ( double , quadruple and octal precision ) numerical simulations in the area of black hole physics  more specifically , solving a partial - differential - equation using finite - differencing . </S>",
    "<S> we describe our approach in detail and present the final performance results as compared with a single - core desktop processor and also the cell be . </S>",
    "<S> we obtain _ mixed _ results  order - of - magnitude gains in overall performance in some cases and negligible gains in others . </S>"
  ]
}