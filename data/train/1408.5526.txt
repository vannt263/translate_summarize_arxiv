{
  "article_text": [
    "the recent trend towards parallel computing in the financial industry is not surprising . as the complexity of models used in the industry grows , while the demand for fast ,",
    "sometimes real - time , solutions persists , parallel computing is a resource that is hard to ignore . in 2009 ,",
    "bloomberg and nvidia worked together to run a two - factor model for calculating hard - to - price asset - backed securities on 48 linux servers paired with graphics processing units ( gpus ) , which traditionally required about 1000 servers to accommodate customer demand .",
    "gpu computing offers several advantages over traditional parallel computing on clusters of cpus .",
    "clusters consume non negligible energy and space , and computations over clusters are not always easy to scale . in contrast , gpu is small , fast , and consumes only a tiny fraction of energy consumed by clusters .",
    "consequently , there has been a recent surge in academic papers and industry reports that document benefits of gpu computing in financial problems .",
    "arguably , the numerical method that benefits most from gpus is the monte carlo simulation .",
    "monte carlo methods are inherently parallel , and thus more suitable for implementing on gpu than most alternative methods . in this paper",
    "we concentrate on monte carlo methods and financial simulation , and discuss computational and algorithmic issues when financial simulation algorithms are developed over gpu and traditional clusters .",
    "the computational framework we use is the estimation of an integral @xmath0 over the @xmath1 dimensional unit cube , using sums of the form @xmath2 in monte carlo and quasi - monte carlo , @xmath3 converges to @xmath4 as @xmath5 in the former the convergence is probabilistic and @xmath6 come from a pseudorandom sequence , and in the latter the convergence is deterministic and the @xmath6 come from a low - discrepancy sequence . for a comprehensive survey of monte carlo and quasi - monte carlo methods ,",
    "see @xcite .",
    "often it is desirable to obtain multiple independent estimates for @xmath7 say @xmath8 so that one could use statistics to measure the accuracy of the estimation by the use of sample standard deviation , or confidence intervals .",
    "let us assume that an allocation of computing resources is done and we choose parameters @xmath9 : the first parameter , @xmath10 is the sample size , and gives the number of vectors from the sequence ( pseudorandom or low discrepancy ) to use in estimating @xmath11 @xmath12 and the parameter @xmath13 gives the number of independent replications we obtain for @xmath3 , i.e. , @xmath14 the grand average @xmath15 gives the overall point estimate for @xmath16@xmath17 in monte carlo , to obtain the independent estimates @xmath18 one simply uses blocks of @xmath19 pseudorandom numbers .",
    "in quasi - monte carlo , one has to use methods that enable independent randomizations of the underlying low - discrepancy sequence .",
    "these methods are called randomized quasi - monte carlo ( rqmc ) methods ( see @xcite ) .",
    "traditionally , in parallel implementations of monte carlo algorithms , one often assigns the @xmath20th processor ( of the @xmath13 allocated processors ) the evaluation of the estimate @xmath21 to do this computation , each processor needs to have an assigned number sequence ( pseudorandom or low - discrepancy ) and methods like blocking , leap - frogging , and parameterization are used to make this assignment .",
    "parameterization is particularly useful when independent replications are needed to compute @xmath15 ( see @xcite , and also @xcite , @xcite , @xcite ) .",
    "if only a single estimate is needed , then blocking or leap - frogging can be used ( @xcite , @xcite , @xcite , @xcite , @xcite ) .",
    "figure [ paral](a ) describes this traditional monte carlo implementation where the @xmath20th processor @xmath22 generates its assigned sequence @xmath23 to compute @xmath24 as @xmath25 . in many applications @xmath19",
    "is typically in millions , and @xmath13 is large enough for statistical accuracy , in the range 50 to 100 .    in a massively parallel environment , depicted by the second diagram , where the number of processors @xmath26is much larger than @xmath13",
    ", it can be a lot more efficient to completely `` transpose '' our computing strategy .",
    "now the processors @xmath27 run simultaneously ( for a total of @xmath13 times ) to generate the sequence @xmath28 to compute @xmath24 as @xmath25 , where @xmath29 is part of the sequence @xmath30 which is assigned to the @xmath31th processor .",
    "the choice of the two computing paradigms , which we vaguely name as `` parallel '' and `` massively parallel '' , determines how the underlying sequence ( pseudorandom or low - discrepancy ) should be generated . in the parallel paradigm ,",
    "a recursive algorithm for generating the underlying sequence works best since each processor generates the `` entire '' sequence .",
    "this paradigm is appropriate for a computing system with distributed memory , such as a cluster . for the massively parallel paradigm , a direct algorithm that generates",
    "the @xmath32th term of the sequence from @xmath32 is more appropriate .",
    "@xcite use the term `` counter - based '' to describe such direct algorithms .",
    "the massively parallel paradigm is an appropriate model for gpu computing where prohibitive cost of memory access makes recursive computing inefficient .    in section [ section pseudorandom ]",
    "we briefly discuss a counter - based pseudorandom number generator , called * philox * , introduced by @xcite , and the pseudorandom number generators , * mersenne twister * , and * xorwow*. in section [ section rstart ] we introduce a randomized quasi - monte carlo sequence , which we name * rasrap * , and give algorithms for recursive and counter - based implementations of this sequence . in this section , we also give a brief description of a well - known quasi - monte carlo sequence , the sobol sequence .",
    "we will compare the computational time for generating these sequences on cpu and gpu , in section [ section timing comp ] .",
    "most pseudorandom number generators are inherently iterative : they are generated by successive application of a transformation @xmath33 to an element of the state space to obtain the next element of the state space , i.e. , @xmath34 . here",
    "we discuss some of the pseudorandom number generators considered in this paper .",
    "one of the most popular and high quality pseudorandom number generators is the mersenne twister introduced by @xcite .",
    "it has a very large period and excellent uniformity properties .",
    "it is available in many platforms , and recently matlab adopted it as its default random number generator .",
    "a parallel implementation of the mersenne twister was also given by @xcite .",
    "their approach uses parameterization , and it falls under our parallel computing paradigm : each processor in the parallel environment generates a mersenne twister , and different mersenne twisters generated across different processors are assumed to be statistically independent .",
    "there are several parameters that need to be precomputed and stored to run the parallel implementation of mersenne twister .",
    "xorwow is a fast pseudorandom number generator introduced by @xcite .",
    "this generator is available in curand : a library for pseudorandom and quasi - random number generators for gpu provided by nvidia .",
    "however , the generator fails certain statistical tests ; see @xcite for a discussion .",
    "the reason we consider this generator is because of its availability in curand , and that its computational speed can be used as a benchmark against which other generators can be compared .",
    "philox is a counter - based pseudorandom number generator introduced by @xcite .",
    "its generation is in the form @xmath35 , and thus falls under our massively parallel computing paradigm .",
    "a comparison of some counter - based and conventional pseudorandom number generators ( including philox and mersenne twister ) is given in @xcite . in section",
    "[ section timing comp ] , we will present timing results comparing the pseudorandom number generators , and in section [ libor ] and [ mbs ] , we will compare these sequences when they are used in some financial problems .",
    "these numerical results will also include rasrap and sobol , two randomized - quasi monte carlo sequences that we discuss next .",
    "the van der corput sequence , and its generalization to higher dimensions , the halton sequence , are among the best well - known low - discrepancy sequences .",
    "the @xmath36th term of the van der corput sequence in base @xmath37 , @xmath38 , is defined as    @xmath39    where    @xmath40    the halton sequence in the bases @xmath41 is @xmath42 .",
    "this is a low - discrepancy sequence if the bases are relatively prime . in practice ,",
    "@xmath43 is usually chosen as the @xmath31th prime number .",
    "there is a well - known defect of the halton sequence : in higher dimensions , when the base is larger , certain components of the sequence exhibit very poor uniformity .",
    "this is often referred to as _ high correlation between large bases .",
    "_ as a remedy , permuted ( or , scrambled ) halton sequences were introduced .",
    "the _ permuted van der corput sequence _ generalizes ( [ vdcp ] ) as @xmath44 where @xmath45 is a permutation on the digit set @xmath46 . by using different permutations for each base",
    ", one can define the permuted halton sequences in the usual way .",
    "there are many choices for permutations published in the literature ; a recent survey is given by @xcite . in this paper , we will follow the approach used in @xcite and pick these permutations at random .",
    "the halton sequence can be generated recursively , which would be appropriate for an implementation on cpu , or directly ( counter - based ) , which would be appropriate for gpu .",
    "next we discuss some recursive and counter - based algorithms for the halton sequence .",
    "a fast recursive method for generating the van der corput sequence was given by @xcite .",
    "we now explain his algorithm .",
    "let @xmath47 be a positive integer and @xmath48 arbitrary .",
    "define the sequence @xmath49 by @xmath50 and the transformation @xmath51 by @xmath52 where@xmath53 the transformation @xmath51 is called the von neumann - kakutani transformation in base @xmath54 the orbit of zero under @xmath55 i.e. , @xmath56 is the van der corput sequence in base @xmath47 . in fact",
    ", the orbit of any point @xmath57 under @xmath51 is a low - discrepancy sequence .",
    "if @xmath58 is chosen at random from the uniform distribution on @xmath59 then the orbit of @xmath58 under @xmath51 is called a _ random - start van der corput sequence _ in base @xmath54 the following algorithm summarizes the construction by @xcite of the ( random - start ) van der corput sequence in base @xmath54 it can be generalized to halton sequences in the obvious way .",
    "@xcite[struck alg ] . generates a random - start van der corput sequence with starting point @xmath58 and base @xmath54    1 .",
    "generate the sequence @xmath60 according to ( [ bk ] ) ; 2 .   choose an arbitrary starting point @xmath48 ; 3 .",
    "calculate @xmath61 according to ( [ k ] ) ; 4 .   @xmath62",
    "repeat step 3 - 4 .",
    "algorithm [ struck alg ] is prone to rounding error in floating number operations due to the floor operation in ( [ k ] ) .",
    "for example , a c++ compiler gives a wrong index @xmath61 after 3 steps of iteration when the starting point is @xmath63 if the rounding error introduced in ( [ bk ] ) is not carefully handled .",
    "we now suggest an alternative algorithm that computes a random - start permuted halton sequence .",
    "the advantages of this algorithm over algorithm [ struck alg ] are : ( i ) it avoids rounding errors , ( ii ) it is faster , and ( iii ) it can be used to generate permuted halton sequences .",
    "[ recursive perm vdc ] ( recursive ) generates a random - start permuted van der corput sequence in base @xmath47 .    1 .",
    "initialization step .",
    "generate a random number @xmath64 and find some integer @xmath32 so that @xmath65 is the @xmath66 term in the van corput sequence in base @xmath47 .",
    "initialize and store a random digit permutation @xmath67 .",
    "expand @xmath32 in base @xmath47 as @xmath68 ( @xmath61 depends on @xmath32 ) .",
    "set @xmath69 for @xmath70 .",
    "store @xmath71 .",
    "calculate and store @xmath72 for @xmath73 .",
    "set @xmath74 for @xmath75 .",
    "set the quasi - random number @xmath76 ; 2 .",
    "let @xmath77 .",
    "find @xmath78 ; 3 .",
    ". set @xmath80 . set @xmath81 for @xmath82 .",
    "the quasi - random number corresponding to @xmath83 is @xmath76 ; 4 .",
    "repeat step 2 - 3 .",
    "algorithm 2 is an efficient iterative algorithm appropriate for the parallel computing paradigm .",
    "however , for the massively parallel computing paradigm , such as gpu computing , we need a counter - based algorithm . for the halton sequence",
    ", this would be simply its definition :    ( counter - based ) [ definition vdc ] generates a random - start permuted van der corput sequence in base @xmath47 .",
    "1 .   initialization step : choose a small positive real number , @xmath84 .",
    "generate a random number @xmath65 from the uniform distribution on @xmath85 , and find @xmath32 such that @xmath86 ; 2 .",
    "the quasi - random number corresponding to @xmath32 is @xmath87 ; 3 .",
    "let @xmath77 and repeat step 2 - 3 .",
    "the name rasrap is an abbreviation for random - start randomly permuted halton sequence : if in algorithms [ recursive perm vdc ] and [ definition vdc ] , the permutations for each base are generated at random , then we obtain rasrap .      the sobol sequence is a well - known fast low - discrepancy sequence popular among financial engineers .",
    "the @xmath88th component of the @xmath31th vector in a sobol sequence is calculated by    @xmath89 ,    where @xmath90 is the @xmath61th digit from the right when integer @xmath31 is represented in base @xmath91 and @xmath92 is the bitwise exclusive - or operator .",
    "the so - called direction numbers , @xmath93 , are defined as    @xmath94    to generate the sobol sequence , we need to generate a sequence of positive integers @xmath95 . the sequence @xmath95 is defined recursively as follows :    @xmath96 ,    where @xmath97 are coefficients of a primitive polynomial of degree @xmath98 in the field @xmath99 ,    @xmath100 .",
    "the initial values @xmath101 can be chosen freely given that each @xmath102 , is odd and less than @xmath103 . because of this freedom , different choices for direction numbers can be made based on different search criteria minimizing the discrepancy of the sequence .",
    "we use the primitive polynomials and direction numbers provided by @xcite .",
    "the counter - based implementation of the sobol sequence introduced here is convenient on gpus , but a more efficient implementation proposed by antonov and saleev based on gray code is used in practice on cpus . for details about this approach ,",
    "see @xcite .",
    "the sobol sequence can be randomized using various randomized quasi - monte carlo methods . here",
    "we will use the random digit scrambling method of @xcite .",
    "more on randomized quasi - monte carlo and some parallel implementations can be found in @xcite , and , @xcite .",
    "mersenne twister , philox , xorwow , rasrap , and sobol sequences are run on intel i7 3770k and nvidia geforce gtx 670 .",
    "we compare the throughput of different algorithms on cpu ( table 1 ) and gpu ( table 2 ) .",
    "table 1 shows that the fastest algorithm for the halton sequence on cpu is algorithm 2 .",
    "it is about 3.8 times as fast as the algorithm by struckmeier ( algorithm 1 ) .",
    "not surprisingly algorithm 3 , the counter - based implementation , is considerably slower on cpu .",
    "mersenne twister uses its serial cpu implementation and it is about 3.4 times faster than algorithm 2 for the halton sequence . and sobol sequence based on gray code is faster than mersenne twister .    table 2 shows that the throughput of algorithm 3 on gpu improves significantly compared to the cpu value .",
    "counter - based sobol sequence is twice as fast as rasrap , and the pseudorandom number generator philox is almost 200 times faster than rasrap .",
    "[ gencpu ]    the computational speed at which various sequences are generated is only one part of the story .",
    "we next examine the accuracy of the estimates obtained when these sequences are used in simulation . in the next section",
    ", we use these sequences in two problems from computational finance , and compare them with respect to the standard deviation of their estimates and computational speed .",
    "an interest rate derivative is a derivative where the underlying asset is the right to pay or receive a notional amount of money at a given interest rate .",
    "the interest rate derivatives market is the largest derivatives market in the world . to price interest rate derivatives , forward",
    "interest rate models are widely used in the industry .",
    "there are two kinds of forward rate models : the continuous rate model and the simple rate model .",
    "the framework developed by @xcite ( hjm ) explicitly describes the dynamics of the term structure of the interest rates through the dynamics of the forward rate curve .",
    "hjm model has two major drawbacks : ( 1 ) the instantaneous forward rates are not directly observable in the market ; ( 2 ) some simple choices of the form of volatility is not admissible .    in practice , many fixed income securities quote the interest rate on an annual basis with semi - annual or quarterly compounding , instead of a continuously compounded rate .",
    "the simple forward rate models describe the dynamics of the term structure of interest rates through simple forward rates , which are observable in the market .",
    "this approach is developed by @xcite , @xcite , @xcite and @xcite .",
    "the london inter - bank offered rates ( libor ) is one of the most important benchmark simple interest rates .",
    "let @xmath104 denote the time-@xmath105 value of a zero coupon bond paying 1 at the maturity time @xmath106 .",
    "a forward rate @xmath107 ( @xmath108 ) is an interest rate fixed at time @xmath105 for borrowing or lending at time @xmath109 over the period @xmath110 $ ] .",
    "an arbitrage argument shows that forward rates are determined by bond prices in accordance to @xmath111 a forward libor rate is a special case of ( [ fwdrate ] ) with a fixed period @xmath112 for the accrual period .",
    "typically @xmath113 or @xmath114 .",
    "thus , the @xmath115-year forward libor rate at time @xmath105 with maturity @xmath106 is @xmath116    so if we enter into a contract at time @xmath117 to borrow 1 at time @xmath106 and repay it with interest at time @xmath118 , the interest due will be @xmath119 .    fix a finite set of maturities    @xmath120    and let    @xmath121 ,    denote the lengths of the intervals between maturities .",
    "normally we fix @xmath115 as a constant regardless of day - count conventions that would introduce slightly different values for the fractions @xmath122 .    for each maturity @xmath123 , let @xmath124 denote the time-@xmath105 value of a zero coupon bond maturing at @xmath125 . and write @xmath126 for the forward rate at time @xmath105 over the period @xmath127 $ ] . equation ( [ fwdlibor ] ) can be then rewritten as @xmath128 the subscript @xmath129 emphasizes we are looking at a finite set of bonds .",
    "the dynamics of the forward libor rates can be described as a system of sdes as follows . for a brief informal derivation ,",
    "see @xcite .",
    "@xmath130 where @xmath131 is a @xmath132-dimensional standard brownian motion and the volatility @xmath133 may depend on the current vector of rates @xmath134 as well as the current time @xmath105 .",
    "@xmath135 is the unique integer such that @xmath136 .",
    "pricing interest rate derivative securities with libor market models normally requires simulations . since the libor market model deals with a finite number of maturities , only the time variable needs to be discretized .",
    "we fix a time grid @xmath137 to simulate the libor market model . in practice",
    ", one would often take @xmath138 so the simulation goes directly from one maturity date to the next . for simplicity",
    ", we use a constant volatility @xmath139 in the simulation .",
    "we apply an euler scheme to ( [ dl_n ] ) to discretize the system of sdes of the libor market model , producing @xmath140 + \\hat{l}_n(t_i)\\sqrt{t_{i+1 } - t_i } \\sigma_n(t_i)^{\\top}z_{i+1},\\ ] ] where @xmath141 and @xmath142 are independent @xmath143 random vectors in @xmath144 . here",
    "hats are used to identify discretized variables .",
    "we assume an initial set of bond prices @xmath145 is given and initialize the simulation by setting @xmath146 in accordance with ( [ fwdliborn ] ) .",
    "next we use the simulated evolution of libor market rates to price a caplet .",
    "an interest rate cap is a portfolio of options that serve to limit the interest paid on a floating rate liability over a set of consecutive periods .",
    "each individual option in the cap applies to a single period and is called a caplet .",
    "it is sufficient to price caplets since the value of a cap is simply the sum of the values of its component caplets .",
    "we follow the derivation in @xcite .",
    "consider a caplet for the time period @xmath147 $ ] .",
    "a party with a floating rate liability over that period would pay interest @xmath148 times the principle at time @xmath149 .",
    "a caplet is designed to limit the interest paid to a fixed level @xmath150 .",
    "the difference @xmath151 would be refunded only if it is positive .",
    "so the payoff function of a caplet is    @xmath152 ,    where the notation @xmath153 indicates that we take the maximum of the expression in parentheses and zero .",
    "this payoff is exercised at time @xmath118 but determined at time @xmath106 .",
    "there is no uncertainty in the payoff over the period @xmath154 $ ] .",
    "then the payoff function at time @xmath118 is equal to @xmath155 at time @xmath106 .",
    "this payoff typically requires the simulation of the dynamics of the term structure .",
    "@xcite derived a formula for the time-@xmath105 price of the caplet under the assumption of @xmath156 following a lognormal distribution , which does not necessarily correspond to a price in the sense of the theory of derivatives valuation . in practice , this formula @xmath157 is used to calculate the `` implied volatility '' @xmath139 from the market price of caps .    to test the correctness of the libor market model simulation , we use the daily treasury yield curve rates on 02/24/2012 as shown in table 3 to initialize the libor market rates simulation .",
    "we first apply a cubic spline interpolation to the rates in table 3 to get estimated yield curve rates for every 6 months .",
    "then the estimated yield curve rates are used to calculate the bond prices for every 6 months in order to initialize the libor rates in ( [ bl ] ) .",
    "we assume the following parameters in libor rates simulation    @xmath158    the simulations are run on intel i7 3770k and nvidia geforce gtx 670 respectively . for a fixed sample size @xmath19 , we repeat the simulation 100 times using independent realizations of the underlying sequence .",
    "we investigate the sample standard deviation of the 100 estimates and computing time as a function of the sample size @xmath19 .",
    "we also compare the efficiency of different sequences , where efficiency is defined as the product of sample standard deviation and execution time .",
    "the sobol sequence and a scrambled version of it are provided in the curand library from nvidia .",
    "we use both the single precision version ( sobol-lib(single ) ) and double precision version ( sobol-lib(double ) ) in our simulation .",
    "we also implement our own version of the sobol sequence ( sobol(single ) and sobol(double ) ) for comparison .",
    "figure [ sobolcomp ] plots the sample standard deviation of 100 estimates for the caplet price , computing time , and efficiency , of different implementations of the sobol sequence against the sample size @xmath19 .",
    "we also include the numerical results obtained using the fast pseudorandom number sequence xorwow from curand as a reference .",
    "we make the following observations :    1 .",
    "the convergence rate exhibits a strange behavior and levels off for the curand sobol sequence generators , sobol-lib(single ) and sobol-lib(double ) , as @xmath19 gets large .",
    "our implementation of the sobol sequence gives monotonically decreasing sample standard deviation as @xmath19 increases ; 2 .",
    "the execution time for curand generators sobol-lib(single ) and sobol-lib(double ) is significantly longer than our implementation , and not monotonic for a specific range of @xmath19 ; 3 .   the efficiency of curand generators sobol-lib(single ) and sobol-lib(double ) is even worse than the efficiency of the pseudorandom number sequence xorwow .",
    "our sobol sequence implementations have better efficiency than xorwow .",
    "due to the poor behavior of the sobol sequence in the curand library , we will use our implementation of the sobol sequence with single precision in the rest of the paper .",
    "we will denote this sequence simply as  sobol \" in the numerical results .      in section [ section timing comp ] , we compared the computing times of several sequences .",
    "here we compare the performance of mersenne twister , rasrap and sobol , when they are used in simulating the libor market model .",
    "the sequences are run on one cpu core .",
    "figure [ singlecpulibor ] shows that the sample standard deviation of the estimates obtained from rasrap and sobol sequences converge at a much faster rate than the mersenne twister .",
    "the convergence rate for mersenne twister is about @xmath159 , and the rate for rasrap and sobol is about @xmath160 and @xmath161 , respectively .",
    "the recursive implementation of rasrap does not introduce much overhead in running time and gives very close timing results to mersenne twister .",
    "the sobol sequence based on gray code is faster than mersenne twister . as a result ,",
    "the two low - discrepancy sequences enjoy better and  flatter \" efficiency than that of mersenne twister .",
    "we next investigate how well rasrap and sobol sequence results scale over multi - core cpu .",
    "we implement a parallel version of rasrap and sobol with openmp that can run on 8 cpu cores simultaneously .",
    "figure [ liborcpu ] plots the performance of openmp version of rasrap and sobol on cpu .",
    "it exhibits the same pattern of convergence , running time , and efficiency as in figure [ singlecpulibor ] .",
    "the convergence remains the same as in the one core case , but we gain a speedup of four with the parallelism using openmp .      in this section",
    "we compare the counter - based implementations of rasrap and sobol with pseudorandom sequences philox and xorwow , on gpu .",
    "figure [ liborgpu ] plots the sample standard deviation , computing time , and effciency .",
    "we make the following observations :    1 .",
    "the convergence rate for philox and xorwow is about @xmath162 and @xmath163 , respectively ; 2 .",
    "the convergence rate for rasrap and sobol is about @xmath164 and @xmath165 respectively ; 3 .",
    "xorwow is the fastest generator , followed by philox and sobol. rasrap is slightly slower than sobol ; 4 .",
    "the efficiency of sobol is the best among all sequences .",
    "we follow the mortgage - backed securities ( mbs ) model given by @xcite . consider a security backed by mortgages of length @xmath166 with fixed interest rate @xmath167 which is the interest rate at the beginning of the mortgage .",
    "the present value of the security is then    @xmath168 ,    where @xmath169 is the expectation over the random variables involved in the interest rate fluctuations .",
    "the parameters in the model are the following :    @xmath170 discount factor for month @xmath171    @xmath172 cash flow for month @xmath171    @xmath173 interest rate for month @xmath171    @xmath174 fraction of remaining mortgages prepaying in month @xmath171    @xmath175 fraction of remaining mortgages at month @xmath171    @xmath176 ( remaining annuity at month @xmath171 ) @xmath177    @xmath178 monthly payment    @xmath179@xmath180 random variable .",
    "the model defines several of these variables as follows :    @xmath181    @xmath182    @xmath183    @xmath184    the interest rate fluctuations and the prepayment rate are given by    @xmath185    @xmath186    where @xmath187 are constants of the model .",
    "the constant @xmath188 is chosen to normalize the log - normal distribution so that @xmath189 .",
    "the initial interest rate @xmath190 also needs to be specified .",
    "we choose the following parameters in our numerical results :    @xmath191    figure [ mbscpu ] compares openmp implementations of rasrap and sobol sequences on 8 cpu cores .",
    "the sample standard deviation of estimates obtained by rasrap is smaller than that of sobol for every sample size , however , the sobol sequence gives a better rate of convergence .",
    "we gain a speedup of 6 with the parallelism using openmp compared to the single core version .",
    "rasrap has the better efficiency for all sample sizes .",
    "figure [ mbsgpu ] compares the gpu implementations of rasrap , sobol , philox , and xorwow .",
    "we observe :    1 .",
    "the convergence rate for philox and xorwow is about @xmath192 ; 2 .",
    "rasrap gives lower standard deviation than sobol , however , the convergence rate for sobol ( @xmath164 ) is better than rasrap ( @xmath193 ) ; 3 .",
    "the efficiency of rasrap is the best among all sequences .",
    "in figure [ hist ] , we display the gpu speed - up over cpu for both libor and mbs examples . these results only consider the computing time , and the computing time of cpu - twister is taken as the base value in each example .",
    "the largest speed - up is a factor of 95 and it is due to gpu - xorwow for the libor market model simulation . in the mbs example , gpu - rasrap speed - up is a factor of 250 , and the other gpu sequences give a speed - up of factor 290 .        finally , to demonstrate the impressive computing power of gpu , we compare gpu with the high performance computing ( hpc ) cluster at florida state university .",
    "we implement a parallel sobol sequence using mpi , and run simulations for the two examples , libor and mbs .",
    "figure [ cluster ] plots the computing time against the number of cores used by the cluster , when the sample size @xmath19 takes various values . the gpu computing time is plotted as a horizontal line since all the cores of gpu are used in computations .",
    "figure [ cluster ] shows that for the libor example , the gpu we used in our computations has equivalent computing power roughly as 128 nodes on the hpc cluster .",
    "this is about when the hpc computing time plot reaches the level of gpu computing time , for each @xmath19 . in the mbs example , 256 nodes on the hpc cluster are equivalent to the gpu .",
    "we also point out that on a heterogeneous computing environment such as a cluster , continually increasing the number of nodes will not necessarily decrease the running time due to higher cost of communication between nodes and higher probability that slow nodes are used .",
    "but for gpus , a more powerful product with more cores would suggest gains in computing time .",
    "chen , g. , thulasiraman , p. and thulasiram , r.k .",
    ", distributed quasi - monte carlo algorithm for option pricing on hnows using mpc . in _ proceedings of the 39th annual simulation symposium _ , huntsville , usa , 26 april 2006 , pp .",
    "9097 , 2006 .",
    "dedoncker , e. , zanny , r. , ciobanu , m. and guan , y. , distributed quasi monte - carlo methods in a heterogeneous environment . in",
    "_ proceedings of the 9th heterogeneous computing workshop _ ,",
    "cancun , mexico , may 2000 , pp .",
    "200206 , 2000 .",
    "hofbauer , h. , uhl , a. and zinterhof , p. , parameterization of zinterhof sequences for grid - based qmc integration . in j. volkert , t. fahringer , d. kranzlmller , and w. schreiner , editors , _ proceedings of the 2nd austrian grid symposium _ ,",
    "volume 221 of books@ocg.at , innsbruck , austria , 2007 , pp . 91105 , 2007 .",
    "austrian computer society .",
    "matsumoto , m. and nishimura , t. , mersenne twister : a 623-dimensionally equidistributed uniform pseudorandom number generator .",
    "_ acm transactions on modeling and computer simulations , _ 1998 , * 8(1 ) * , 330 .",
    "kten , g. and srinivasan , a. , parallel quasi - monte carlo applications on a heterogeneous cluster . in k. t.",
    "fang , f. j. hickernell and h. niederreiter , editors , _ monte carlo and quasi - monte carlo methods 2000 _ , springer - verlag , berlin , 2002 , pp .",
    "406421 .",
    "kten , g. , shah , m. and goncharov , y. , random and deterministic digit permutations of the halton sequence . in l. plaskota and h.",
    "woniakowski , editors , _ monte carlo and quasi - monte carlo methods 2010 _ , springer , 2012 .",
    "saito , m. and matsumoto , m. , a deviation of curand : standard pseudorandom number generator in cuda for gpgpu . in _",
    "10th international confrence on monte carlo and quasi - monte carlo methods in scientific computing _ ,",
    "sydney , australia , 1317 february 2012 .",
    "salmon , j.k . ,",
    "moraes , m.a .",
    ", dror , r.o . and shaw , d.e .",
    ", parallel random numbers : as easy as 1 , 2 , 3 . in _ sc11 proceedings of 2011 international conference for high performance computing , networking , storage and analysis _ , ny , usa , 2011 .",
    "vandewoestyne , b. and cools , r. , good permutations for deterministic scrambled halton sequences in terms of @xmath196-discrepancy .",
    "_ journal of computational and applied mathematics _ , 2006 , * 189 * , 341361 ."
  ],
  "abstract_text": [
    "<S> gpu computing has become popular in computational finance and many financial institutions are moving their cpu based applications to the gpu platform . since most monte carlo algorithms are embarrassingly parallel , they benefit greatly from parallel implementations , and consequently monte carlo has become a focal point in gpu computing . </S>",
    "<S> gpu speed - up examples reported in the literature often involve monte carlo algorithms , and there are software tools commercially available that help migrate monte carlo financial pricing models to gpu .    </S>",
    "<S> we present a survey of monte carlo and randomized quasi - monte carlo methods , and discuss existing ( quasi ) monte carlo sequences in gpu libraries . </S>",
    "<S> we discuss specific features of gpu architecture relevant for developing efficient ( quasi ) monte carlo methods . </S>",
    "<S> we introduce a recent randomized quasi - monte carlo method , and compare it with some of the existing implementations on gpu , when they are used in pricing caplets in the libor market model and mortgage backed securities .    </S>",
    "<S> gpu , monte carlo , randomized quasi - monte carlo , libor , mortgage backed securities    [ [ section ] ] </S>"
  ]
}