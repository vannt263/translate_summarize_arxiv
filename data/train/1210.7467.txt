{
  "article_text": [
    "the underlying wireless network is shown by an undirected and connected graph @xmath2 in which @xmath3 is the set of vertices and @xmath4 is the set of edges .",
    "every node of the network is represented by a vertex in graph @xmath5 .",
    "two vertices are adjacent if they are within communication range of each other .",
    "we assume that time is slotted . in single channel wireless networks , concurrent transmission at the same time slot and different links ( edges ) may interfere with each other .",
    "therefore , a scheduling discipline is necessary to choose a subset of links at each time slot such that packets do not corrupt due to the interference .",
    "depending on the method used to deal with interference in such a radio network , different models have been introduced in the literature . a general approach to deal with interference",
    "is to consider a _",
    "conflict graph_. the conflict graph of a given graph @xmath2 is graph @xmath6 .",
    "each vertex in @xmath7 is corresponding to an edge in @xmath5 , and two vertices in @xmath7 are adjacent whenever their corresponding edges in @xmath5 are interfering edges . in this approach ,",
    "when a link is ready for transmission , only a subset of links which are called the _ interference set _ needs to be considered as interfering links . in other words ,",
    "each link is associated with an interference set such that the link can be scheduled only if no other link in its interference set is scheduled .",
    "note that if link @xmath8 interferes with link @xmath9 then @xmath9 interferes with @xmath8 as well .",
    "finding a set of non interfering links in @xmath5 is the same as finding an _ independent set _ in @xmath7 .",
    "an independent set in a graph is a collection of vertices such that there are no edges between them .",
    "we shortly describe how the so called conflict graph can be constructed based on general _ m - hop interference model_. first , we refer to some more terminologies of graph theory which we use throughout the paper .",
    "the _ distance _ between two vertices @xmath10 and @xmath11 in a graph @xmath5 , denoted by @xmath12 , is the length of a shortest path between @xmath10 and @xmath11 in @xmath5 .",
    "the distance between two edges is defined as a function @xmath13 , such that for every two edges @xmath14 and @xmath15 , @xmath16 .",
    "the _ power _ of a graph @xmath5 , denoted by @xmath17 , @xmath18 , is a graph with the same set of vertices as @xmath5 in which two vertices @xmath10 and @xmath11 are adjacent in @xmath17 if and only if @xmath19 . a _ loop _ in graph is an edge that connects a vertex to itself .",
    "_ multiple edges _ are two or more edges that are incident to the same two vertices .",
    "a _ multigraph _ is a graph with multiple edges .",
    "graph is a graph without loops and/or multiple edges .",
    "an _ edge contraction _ is an operation which removes an edge from a graph while simultaneously merging its end vertices .",
    "we refer to  @xcite for other graphical notations and terminologies not described in this paper .",
    "the _ line graph _ of a graph @xmath20 , denoted by @xmath21 , is a graph with vertex set @xmath4 , where two vertices of @xmath21 are adjacent if their corresponding edges in @xmath5 are adjacent , i.e. they have a common end vertex . in this case",
    ", we call graph @xmath5 the _ root graph _ of @xmath21 . a graph @xmath5",
    "is called a line graph if there is a root graph @xmath22 such that @xmath23 .",
    "following the definition of line graph , we now introduce _",
    "m - hop interference model _",
    "@xcite which is mostly used to construct the conflict graph . under this general interference model",
    ", two edges @xmath8 and @xmath9 are interfering edges if @xmath24 .",
    "therefore , the conflict graph can be defined as follows ,    @xmath25^m , \\quad m\\geq 1.\\end{aligned}\\ ] ]    this general interference model is applicable for extensive number of practical applications such as bluetooth , fh - cdma systems , wireless lan ( ieee 802.11 standard ) , etc .",
    "more details about different interference models can be found in @xcite .",
    "for example , in bluetooth and fh - cdma systems , two adjacent edges are interfering edges .",
    "link scheduling in these networks results in finding a _ matching _ in graph @xmath5 .",
    "a matching in a graph is a set of edges with no common end vertices .    in ieee",
    "802.11 wireless lan network under the rts / cts scheme , two edges that are either adjacent or are both incident on a common edge are interfering edges .",
    "link scheduling in this network results in finding a strong matching in graph @xmath5 .",
    "a matching is called _ strong matching _ if no edge connects two edges of the matching  @xcite",
    ".    note that in ieee 802.11 wireless lan networks , the conflict graph can be constructed by using eq.([eq2 ] ) and setting @xmath26 while in bluetooth networks the conflict graph is the same as @xmath21 which is derived by setting @xmath27 in eq.([eq2 ] ) .",
    "link scheduling algorithms are of interest due to their impact on the network throughput .",
    "throughput optimal algorithms have been studied extensively in the literature @xcite .",
    "let assume that associated to each link is a queue and packets are queued before they are transmitted over the link .",
    "a well known throughput optimal link scheduling algorithm is to find maximum weight independent set @xmath28 at each time slot in the conflict graph , where the weight of each vertex is defined as the queue length of its corresponding link in the network graph .",
    "finding the @xmath29 is one of the known np - hard problems in graph theory  @xcite .",
    "however , if the conflict graph is line graph , then finding @xmath29 in @xmath7 equals finding maximum weight matching ( @xmath30 ) in its root graph .",
    "since there are polynomial time complexity algorithms for @xmath30 problem @xcite , then the overall solution is much simpler under this assumption .",
    "the key point here that catches our attention is that the root graph does not required to be simple graph . if the root graph is multigraph , it is enough to keep the heaviest edge among multiple edges and remove the others before running @xmath30 algorithm .",
    "following to this motivation for studying the line graphs , we explore these kind of graphs more precisely .",
    "line graphs are well characterized class of graphs . in @xcite",
    "it is proved that a graph @xmath5 is a line graph of a simple graph @xmath22 if and only if @xmath5 does not contain any of the forbidden nine graphs , depicted in figure  1 , as an _ induced subgraph_. an induced subgraph of a graph is a subset of vertices of the graph with edges whose endpoints are both in this subset .",
    "whitney proved that with two exceptional case ( triangle and star with three branches , @xmath31 in figure  1 ) the structure of @xmath22 can be recovered completely from its line graph  @xcite .",
    "[ fig1 ]    it is worth mentioning that lehot has developed an optimal algorithm which can be run in linear time to detect whether a graph is line graph and beget its root graph  @xcite .",
    "lehot algorithm considers only simple graphs as root graphs .    in this paper , following our motivation that allows the root graph to be multigraph , we introduce a generalization of line graph to _ line multigraph _ ,",
    "i.e. , line graph for which its root graph is multigraph .",
    "then , we extend lehot algorithm to line multigraphs and propose a low complexity algorithm , termed as extended lehot ( _ elehot _ ) , for detecting whether a graph is line multigraph and output its root graph . accordingly , by allowing the root graph to be multigraph , we relax the constraint shown in figure  1 , to seven minimal forbidden graphs",
    ". not only the number of forbidden graphs are reduced , prevention of them in the topology construction of the graph is much simpler because they are larger in the number of vertices and edges .",
    "the results of this paper introduce a new approach in topology control algorithms in wireless networks where the final target is complexity reduction .",
    "it complements the original motivation of topology control disciplines which tries to minimize energy consumption while the connectivity of network graph is guaranteed @xcite .",
    "then , a new design dimension can be added to topology control algorithms by the results of this paper . as a result , based on available polynomial time complexity algorithms for @xmath30 problem @xcite and due to the linear time complexity of lehot algorithm @xcite",
    ", we develop a polynomial time complexity approach for link scheduling algorithm under general m - hop interference model for the class of graphs that their conflict graphs are line multigraphs .",
    "in addition to topology control algorithms , the results of this paper can be used as a guideline for network designers when they want to design the topology of a stationary wireless network , e.g. , positioning the routers / gateways of a wireless mesh network ( wmn ) .",
    "if they prohibit the construction of derived forbidden graphs in the network s conflict graph , the throughput optimal link scheduling algorithm can be run in the network in much less time .",
    "then the overall performance of the network is obviously promoted .",
    "[ fig2 ]    let us consider figure  2 which depicts the idea .",
    "the number of edges in @xmath22 is equal to the number of edges in @xmath5 , both equal to the number of vertices in @xmath7 .",
    "note that , since there is a one to one mapping between each vertex of @xmath7 and each edge in @xmath22 , then there is also a one to one relation between edges in @xmath5 and edges in @xmath22 .",
    "also , note that finding a scheduling in @xmath5 is the same as finding an independent set in @xmath7 , while finding an independent set in @xmath7 is equivalent to finding a matching in @xmath22 .",
    "thus , we can deploy a policy of edge selection on @xmath22 to obtain an interfering free link selection in network graph @xmath5 .",
    "the structure of this paper is as follows . in section  2",
    ", we propose elehot algorithm as an extension to lehot algorithm .",
    "we analyze elehot s algorithm in section",
    "3 . finally",
    ", we conclude in section  4 .",
    "suppose that the graph @xmath7 is given and we want to find the root graph @xmath22 such that @xmath32 ( if @xmath22 exists ) , where @xmath22 may be a multigraph .",
    "two vertices @xmath10 and @xmath11 are called _ true twins _ if they are adjacent and their neighborhoods are the same . if two non - adjacent vertices have identical neighborhoods they are called _ false twins_. in the rest of the paper , where ever we use the term twin vertices , we mean true twin vertices .",
    "the following observation indicates that @xmath33 mutually true twin vertices in @xmath7 are the vertices of a _ clique_. a clique is a complete subgraph of a graph .    if vertices @xmath34 and @xmath35 are twins , and if @xmath35 and @xmath36 are twins as well , then @xmath34 and @xmath36 are twins .",
    "if @xmath37 are mutually twin vertices , then they are the vertices of a clique @xmath38 , @xmath39 .",
    "we describe elehot algorithm in figure 3 .",
    "* algorithm * elehot + * input :* @xmath7 + mm mmmm mmmm= mmmm mmm mmm mmm mark all edges in @xmath7 which their end vertices are twins .",
    "+ then contract all marked edges . + label vertices with the number of contracted edges incident on it .",
    "+ finally , consider the obtained simple vertex weighted graph as graph @xmath40 .",
    "+   + * step 2 .",
    "* run lehot algorithm on the graph @xmath40 .",
    "+ ( refer to @xcite for the description of lehot algorithm ) .",
    "+   + * step 3 . *",
    "if lehot algorithm outputs the root graph , say @xmath41 , + then equal to the weights of each vertex in @xmath40 , + add multiple edges to the corresponding edge in @xmath41 .",
    "+ the resulting graph is @xmath22 . + * output :* @xmath22 +    [ fig3 ]    note that we do not care about the uniqueness of @xmath22 . in figure 4",
    ", it is shown that using elehot algorithm , the last six graphs of the nine forbidden subgraphs ( figure 1 ) are line multigraphs .",
    "the marked edges are denoted by the symbol @xmath42 in the figure . in the first graph , we have plotted all the steps in the algorithm in details , but for the others , the final result has been shown .",
    "in this section , through three main theorems , we provide the necessary and sufficient condition for the elehot algorithm to have an output , prove the correctness of the algorithm and analyze it s complexity .",
    "first , we need to prove the following lemmas .    after running step  1 of elehot algorithm",
    ", no true twin vertices will remain or produce in the resulting graph .    to see this fact , it is enough to show that for every two adjacent vertices @xmath10 and @xmath11 in the resulting graph @xmath40 , there exists a vertex @xmath43 adjacent to @xmath10 which is not adjacent to @xmath11 .    since contraction operation",
    "does not create any new edges , edge @xmath44 exists in @xmath7 and the vertices @xmath10 and @xmath11 are not twin in @xmath7 .",
    "hence , there exists a vertex @xmath43 in @xmath7 adjacent to @xmath10 and not adjacent to @xmath11 .",
    "thus , vertex @xmath43 is the desired vertex in @xmath40 .",
    "preposition  1 shows that running one round of contraction ( step 1 ) is sufficient .",
    "this property is required in the complexity analysis of elehot algorithm .",
    "for every induced subgraph @xmath45 in @xmath40 , there exists a twin less induced subgraph in @xmath7 isomorphic to @xmath45 and vice versa .    to see this ,",
    "suppose that @xmath45 is an induced subgraph of @xmath40 .",
    "first , we show that there exists a subgraph @xmath45 in the main graph @xmath7 . according to observation  1 ,",
    "each vertex of @xmath45 with multiplicity @xmath46 , is representative of a clique , @xmath38 in @xmath7 . now to construct a subgraph @xmath45 in @xmath7 , it is sufficient to select one vertex from the cliques corresponding to the vertices of @xmath45 and make the adjacency between these vertices the same as the adjacency of the vertices in @xmath45 ( figure  5 clarifies this approach ) .",
    "the obtained subgraph in @xmath7 is induced subgraph isomorphic to @xmath45 , since the adjacency and non adjacency relation of the corresponding vertices are preserved in the contraction .",
    "similarly , the vice versa of this process can be used to obtain the desired twin less induced subgraph of @xmath7 in @xmath40 .",
    "[ fig5 ]    the elehot algorithm has an output if and only if @xmath7 contains no induced subgraph @xmath47 shown in figure  6 .",
    "[ fig6 ]    first , it is easy to see that the elehot algorithm on @xmath7 has an output if and only if the lehot algorithm on @xmath40 has an output . on the other hand , by beineke s theorem",
    "@xcite it is known that lehot algorithm has an output if and only if it s input graph contains no induced subgraph @xmath48 shown in figure  1 .    therefore , to prove the statement it is enough to see that graph @xmath40 contains an induced subgraph @xmath48 if and only if the conflict graph @xmath7 contains an induced subgraph @xmath47 .",
    "note that , by lemma  1 , the resulting graph @xmath40 after running step  1 of elehot algorithm , removes all twin vertices in @xmath7 and do nt produce new twin vertices .",
    "hence , @xmath40 is a twin less graph .",
    "also , by lemma  2 , if @xmath45 is an induced subgraph of @xmath40 , then @xmath7 contains an induced subgraph isomorphic to @xmath45 and vice versa .",
    "we divide the graphs of figure 1 to two classes , @xmath49 , say twin less graphs , and @xmath50 that all have twin vertices as shown in figure  4 .",
    "first assume that @xmath40 contains one of the induced subgraphs @xmath51 .",
    "the key point that @xmath40 is a twin less graph leads us to examine graphs in @xmath52 one by one and for each of them show that how insertion of new neighbor vertex ( or vertices ) for one of the twin vertices can make the graph without twin vertices .",
    "the extracted minimal twin less subgraphs are the new forbidden graphs .",
    "this process shows that these new forbidden graphs are four graphs @xmath53 in figure  6 .",
    "note that the above argument does not hold for graphs in class @xmath54 .",
    "since these graphs do not have any twin vertices , graph @xmath40 can be any of them and then they are still minimal forbidden graphs . therefor the minimal forbidden graphs for @xmath40 are three graphs of twin less class , @xmath54 , which are shown in figure  6 by @xmath55 and @xmath56 in addition to four graphs that are derived from graphs in class @xmath52 and is depicted in figure  6 by @xmath57 , @xmath58 .    in what follows ,",
    "we consider each of six graphs of class @xmath52 separately to see how we can make them twin less by adding the minimum number of vertices to twin vertices .",
    "whenever we encounter to one of the known forbidden ( induced ) subgraph , we terminate and go to the next case .",
    "we refer to figure  7 to see the process of constructing the forbidden subgraphs .",
    "* i ) consider the graph @xmath59 *    look at figure 7-a1 the vertices 3 and 4 are true twins . to remove twin property , there should be another vertex @xmath60 that is adjacent to either 3 or 4 . due to the symmetry of @xmath59 , we suppose that @xmath60 is adjacent to 4 .",
    "the following options for adjacency of @xmath60 to other nodes are possible .",
    "note that the symmetry of the graph helps us to eliminate similar cases and keep only one of them for investigation .",
    "if @xmath60 is only adjacent to the vertex 4 , then the four vertices @xmath61 make graph @xmath62 ( claw ) regardless of adjacency of @xmath60 to 1 and 6 . if @xmath60 is adjacent to the vertices 4 and 5 , then the four vertices @xmath63 make a claw . if @xmath60 is adjacent to the vertices 4 , 5 and 6 as shown in figure 7-a1 , then the resulting graph includes graph @xmath56 as induced subgraph ( by deleting vertex 1 ) .",
    "if @xmath60 is adjacent to the vertices 4,5,6 and 2 , then @xmath64 is a claw . if @xmath60 is adjacent to the vertices 4 , 5 , 6 and 1 , then @xmath65 is a claw regardless of adjacency of @xmath60 to vertex 2 . if @xmath60 is adjacent to the vertices 4 , 5 , 6 , 2 and 1 , then @xmath65 is a claw .",
    "( figure 7-a2 )    the above investigations show that @xmath59 can be removed from the list of forbidden graphs since prevention of @xmath62 and @xmath56 provides the same result .",
    "* ii ) consider the graph @xmath66 *    look at figure 7-b1 .",
    "the vertices 3 and 4 are twin . to remove twin property",
    ", there should be another vertex @xmath60 that is adjacent to either 3 or 4 .",
    "due to the symmetry of @xmath66 , we suppose that @xmath60 is adjacent to 4 .",
    "the following options for adjacency of @xmath60 to other vertices are possible .",
    "note that the symmetry of the graph helps us to eliminate similar cases and keep only one of them for investigation .",
    "if @xmath60 is only adjacent to vertex 4 , then @xmath61 is a claw regardless of adjacency of @xmath60 to 1 and 6 .",
    "if @xmath60 is adjacent to the vertices 4 and 5 , then the four vertices @xmath63 make a claw . if @xmath60 is adjacent to the vertices 4 , 5 and 6 , then the resulting graph includes graph @xmath56 as induced subgraph ( by deleting vertex @xmath67 , in figure 7-b1 ) if @xmath60 is adjacent to the verices 4 , 5 , 6 and 2 , then @xmath64 is a claw .",
    "if @xmath60 is adjacent to the vertices 4 , 5 , 6 and 1 , the resulting graph includes graph @xmath56 as induced subgraph ( by deleting vertex @xmath67 ) .",
    "if @xmath60 is adjacent to the vertices 4,5,6,2 and 1 , the resulting graph includes graph @xmath68 as induced subgraph ( by deleting vertex @xmath69 , in figure 7-b2 ) .",
    "the above investigations show that @xmath66 can be removed from the list of forbidden graphs since prevention of @xmath70 and @xmath56 provides the same result .",
    "* iii ) consider the graph @xmath71 *    look at figure 7-c1 .",
    "the vertices 3 and 4 are twin . to remove twin property",
    ", there should be another vertex @xmath60 that is adjacent to either 3 or 4 .",
    "due to the symmetry of @xmath59 , we suppose that @xmath60 is adjacent to 4 .",
    "the following options for adjacency of @xmath60 to other vertices are possible .",
    "if @xmath60 is only adjacent to the vertex 4 , then @xmath72 is a claw . if @xmath60 is adjacent to the vertices 4 and 2 , then @xmath73 is a claw . if @xmath60 is adjacent to the vertices 4 , 2 and 5 , the achieved subgraph is shown in figure 7-c1 and should be added to the list of forbidden graphs for line multigraphs since it is a new minimal graph that contains one of beineke s forbidden graphs ( @xmath71 ) as an induced subgraph and does not have any twin vertices .",
    "we call this graph as @xmath74 in figure  6 .    if vertex @xmath60 is adjacent to the vertices 4 , 2 , 5 and 1 , the achieved subgraph is shown in figure 7-c2 and should be added to the list of forbidden graphs for line multigraphs since it is a new minimal graph that contains one of beineke s forbidden graphs ( @xmath71 ) as induced subgraph and does not have any twin vertices .",
    "we call this graph as @xmath75 in figure  6 .",
    "* iv ) consider the graph @xmath76 *    this graph contains three mutual twin vertices .",
    "therefore , we need two extra vertices say @xmath60 and @xmath77 to remove twin property of the graph . all the adjacency possibilities that make the graph twin less are discussed in the following .",
    "note that the symmetry of the twin vertices 3 , 4 and 5 and the symmetry of vertices 1 and 2 in figure 7-d1 helps us to abstract the possible options as follows .",
    "we should consider three cases .",
    "vertex @xmath60 is adjacent to vertex @xmath78 and vertex @xmath77 is adjacent to vertex @xmath69 .",
    "if vertex @xmath60 is only adjacent to vertex @xmath78 , then @xmath79 is a claw .",
    "the same occurs if vertex @xmath77 is only adjacent to one of twin vertices @xmath69 or @xmath80 .",
    "hence , vertices @xmath60 and @xmath77 should be adjacent to more than one vertex of @xmath76 .    if @xmath60 is adjacent to the vertices 5 and 1 ; and @xmath77 is adjacent to the vertices 3 and 1 , then @xmath81 is a claw ( figure 7-d1 ) .",
    "if @xmath60 is adjacent to the vertices 5 and 1 ; @xmath77 is adjacent to the vertices 3 and 1 ; and @xmath60 and @xmath77 are adjacent , then graph @xmath56 is an induced subgraph of the achieved graph which is shown in figure 7-d2 ( remove vertex 3 ) .    if @xmath60 is adjacent to the vertices 5 and 1 ; @xmath77 is adjacent to the vertices 3 and 2 ; then graph @xmath56 is an induced subgraph of the achieved graph which is shown in figure 7-e1 ( remove vertex 4 ) . if @xmath60 is adjacent to the vertices 5 , 1 and 2 ; @xmath77 is adjacent to the vertices 3 and 1 ; @xmath60 and @xmath77 are adjacent , then the constructed graph contains graph @xmath75 as induced subgraph as shown in figure 7-e2 .",
    "the induced graph @xmath75 is achieved by removing vertex 4 and is redrawn in figure 7-e3 for clarity .",
    "if @xmath60 is adjacent to the vertices 5 , 1 and 2 ; @xmath77 is adjacent to the vertices 3 and 2 ; @xmath60 and @xmath77 are adjacent ( figure 7-f1 ) , then the constructed graph contains graph @xmath75 as induced subgraph as shown in figure 7-f2 .",
    "the induced graph @xmath75 is achieved by removing vertex 4 and is redrawn in figure 7-f3 for clarity .",
    "if @xmath60 is adjacent to the vertices 5 , 1 and 2 ; @xmath77 is adjacent to the vertices 3 , 1 and 2 ; @xmath60 and @xmath77 are adjacent ( figure 7-g1 ) , then the constructed graph contains graph @xmath75 as induced graph as shown in figure 7-g2 .",
    "the induced graph @xmath75 is achieved by removing vertex 5 and is redrawn in figure 7-g3 for clarity .",
    "vertex @xmath60 is adjacent to the vertices 5 and 4 ; vertex @xmath77 is adjacent to the vertex 4 .    if @xmath60 is adjacent to the vertices 5 and 4 ; @xmath77 is adjacent to the vertex 4 ( figure 7-h1 ) , then @xmath82 , @xmath83 , @xmath84 , @xmath85 , @xmath86 and @xmath87 are different induced claws .",
    "since none of @xmath60 and @xmath77 could be adjacent to the vertex 3 in this case , adjacency of @xmath60 to @xmath77 is mandatory to prohibit claw @xmath83 , otherwise this claw exists in all the scenarios .",
    "thus , in other situations under case 2 , we suppose @xmath60 and @xmath77 are adjacent . also , @xmath60 and @xmath77 should be adjacent to the vertices 1 and/or 2 to prohibit claws @xmath85 and @xmath86 .",
    "these observations leads us to the following scenarios .",
    "if vertex @xmath60 is adjacent to the vertices 5 , 4 and 1 ; @xmath77 is adjacent to the vertices 4 , 1 ; @xmath60 and @xmath77 are adjacent ( figure 7-h2 ) , then the constructed graph contains @xmath56 as induced subgraph by removing vertex 4 . if @xmath60 is adjacent to the vertices 5 , 4 and 2 ; @xmath77 is adjacent to the vertices 4 and 2 ; @xmath60 and @xmath77 are adjacent ( figure 7-h3 )",
    ", then the constructed graph contains @xmath56 as induced subgraph by removing vertex 4 which is shown in the same figure .",
    "if @xmath60 is adjacent to the vertices 5 , 4 and 2 ; @xmath77 is adjacent to the vertices 4 and 1 ; @xmath60 and @xmath77 are adjacent ( figure 7-i1 ) , then the constructed graph contains @xmath68 as induced subgraph by removing vertex 5 which is shown in the same figure .",
    "if @xmath60 is adjacent to the vertices 5 , 4 and 1 ; @xmath77 is adjacent to the vertices 4 and 2 ; @xmath60 and @xmath77 are adjacent ( figure 7-i2 ) , then the constructed graph contains @xmath68 as induced subgraph by removing vertex 5 which is shown in the same figure .",
    "if @xmath60 is adjacent to the vertices 5 , 4 and 1 ; @xmath77 is adjacent to the vertices 4 , 2 and 1 ; @xmath60 and @xmath77 are adjacent ( figure 7-i3 ) , then the constructed graph contains @xmath74 as induced subgraph by removing vertex 4 .",
    "if @xmath60 is adjacent to the vertices 5 , 4 , 1 and 2 ; @xmath77 is adjacent to the vertices 4 and 2 ; @xmath60 and @xmath77 are adjacent ( figure 7-j1 ) , then this is a new graph that does not contain any of previously found forbidden graphs and then should be added to the list of forbidden graphs .",
    "we rearrange its illustration as shown in figure 7-j2 and call it as graph @xmath88 .    if @xmath60 is adjacent to the vertices 5 , 4 , 1 and 2 ; @xmath77 is adjacent to the vertices 4 and 1 ; @xmath60 and @xmath77 are adjacent ( figure 7-k1 ) , then the constructed graph is the same as graph @xmath88 . if @xmath60 is adjacent to the vertices 5 , 4 and 2 ; @xmath77 is adjacent to the vertices 4 , 1 and 2 ; @xmath60 and @xmath77 are adjacent ( figure 7-k2 ) , then the constructed graph contains @xmath74 as induced subgraph by removing vertex 4 ( figure 7-k3 ) .",
    "if @xmath60 is adjacent to the vertices 5 , 4 , 1 and 2 ; @xmath77 is adjacent to the vertices 4 , 1 and 2 ; @xmath60 and @xmath77 are adjacent ( figure 7-l1 ) , then the constructed graph contains @xmath75 as induced subgraph by removing vertex 4 which is shown in figure 7-l2",
    ".     case 3 .",
    "vertex @xmath60 is adjacent to the vertices 5 and 4 ; vertex @xmath77 is adjacent to the vertices 3 and 4 .    if vertex @xmath60 is adjacent to the vertices 5 and 4 ; @xmath77 is adjacent to the vertices 3 and 4 ( figure 7-m1 ) , then @xmath82 , @xmath84 , @xmath85 , @xmath86 , @xmath87 and @xmath89 are different induced claws .",
    "we investigate the scenarios in which the mentioned claws does not exists .",
    "we first study the options that @xmath60 and @xmath77 are not adjacent and then consider the cases that @xmath60 and @xmath77 are adjacent .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 ; @xmath77 is adjacent to the vertices 3 , 4 , 2 ( figure 7-m2 ) , then the constructed graph contains @xmath56 as induced subgraph by removing vertex 4 which is shown in figure 7-m3 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 ; @xmath77 is adjacent to the vertices 3 , 4 , 2,1 ( figure 7-n1 ) , then the constructed graph is @xmath88 as shown in figure 7-n2 by rearranging the position of vertices .",
    "if vertex @xmath60 is adjacent to the vertices 5 , 4 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1 ( figure 7-o1 ) , then the constructed graph contains @xmath56 as induced subgraph by removing vertex 4 which is shown in figure 7-o2 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1,2 ( figure 7-p1 ) , then the constructed graph is isomorphic to graph @xmath88 as shown in figure 7-p2 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1 ( figure 7-q1 ) , then the constructed graph is isomorphic to graph @xmath88 as shown in figure 7-q2 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 2 ( figure 7-r1 ) , then the constructed graph is isomorphic to graph @xmath88 as shown in figure 7-r2 .",
    "if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1 , 2 ( figure 7-s1 ) , then the constructed graph contains @xmath75 as induced subgraph as shown in figure 7-s2 .",
    "if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 ; @xmath77 is adjacent to the vertices 3 , 4 , 2 and @xmath60 is adjacent to @xmath77 ( figure 7-t1 ) , then the constructed graph contains @xmath74 as induced subgraph by removing vertex 4 which is shown in figure 7-t2 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 ; @xmath77 is adjacent to the vertices 3 , 4 , 2 , 1 and @xmath60 is adjacent to @xmath77 ( figure 7-u1 ) , then the constructed graph contains @xmath75 as induced subgraph which is shown in figure 7-u2 by removing vertex 4 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1 and @xmath60 is adjacent to @xmath77 ( figure 7-v1 ) , then the constructed graph contains @xmath74 as induced subgraph by removing vertex 4 which is shown in figure 7-v2 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1,2 and @xmath60 is adjacent to @xmath77 ( figure 7-w1 ) , then the constructed graph contains @xmath75 as induced subgraph which is shown in figure 7-w2 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1 and @xmath60 is adjacent to @xmath77(figure 7-x1 ) , then the constructed graph contains @xmath75 as induced subgraph which is shown in figure 7-x2 .    if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 2 and @xmath60 is adjacent to @xmath77 ( figure 7-y1 ) , then the constructed graph contains @xmath75 as induced subgraph which is shown in figure 7-y2 .",
    "if vertex @xmath60 is adjacent to the vertices 5 , 4 , 1 , 2 ; @xmath77 is adjacent to the vertices 3 , 4 , 1 , 2 and @xmath60 is adjacent to @xmath77 ( figure 7-z1 ) , then this is a new graph that does not contain any of previously found forbidden graphs and then should be added to the list of forbidden graphs",
    ". we call it as graph @xmath58 .",
    "* v ) consider the graph @xmath90 *    this graph contains two couple of twin vertices , nevertheless one extra vertex say @xmath60 suffices to remove twin property of the graph .",
    "it is because the twin vertices , unlike the graph @xmath76 , do not share any common vertex and are completely separated couples .",
    "meanwhile , due to the symmetry of the graph , only one possible solution for removing twin property of the graph exists which is shown in figure 7-@xmath91 .",
    "the obtained graph is not a new graph since it contains claw @xmath92 .",
    "indeed any of the vertices 3 or 4 which makes adjacency with @xmath60 ( vertex 4 in this figure ) , in addition to one vertex out of the set of vertices @xmath93 which is not adjacent to vertex @xmath60 ( vertex 2 in the figure ) in addition to vertex 5 and @xmath60 always make a claw . to prohibit the resulted claw",
    ", we consider the case that vertex @xmath60 is adjacent to vertex 5 too .",
    "then a new claw , @xmath94 is made .",
    "then the only possibility to prohibit this claw is making vertex @xmath60 adjacent to vertex 6 .",
    "the derived graph is shown in figure 7-@xmath95 .",
    "the result is graph @xmath56 which is depicted in figure 7-@xmath96 by rearranging the illustration of figure 7-@xmath95 .    *",
    "vi ) consider the graph @xmath97 *    this graph contains three couple of twin vertices , nevertheless one extra vertex say @xmath60 suffices to remove twin property of the graph .",
    "it is because the twin vertices , do not share any common vertex and are completely separated couples .",
    "meanwhile , due to the symmetry of the graph , only one possible solution for removing twin property of the graph exists which is shown in figure 7-@xmath98 .",
    "the obtained graph is not a new graph since it contains the claw @xmath99 .",
    "note that this claw could not be prohibited by connecting vertex @xmath60 to neither vertex 6 , nor vertex 2 , otherwise a twin couple is constructed again . indeed any of the vertices 3 or 4 ( vertex 3 in this figure ) which makes adjacency with vertex @xmath60 in addition to one vertex out of each other twin vertices",
    "which is not adjacent to @xmath60 ( vertices 6 and 2 in the figure ) always make a claw . therefore , graph @xmath97 does not result in a new forbidden graph .    to complete the proof of theorem  1 , note that regarding to construction of the graphs @xmath100",
    ", it can be seen that every graph @xmath101 , @xmath102 , is a twin less graph contains one of the induced subgraphs @xmath103 .",
    "thus , if @xmath7 contains one of the induced subgraph @xmath101 , @xmath102 , then by lemma  2 its induced subgraph @xmath103 preserves in graph @xmath40 .    in the following theorem",
    ", we prove that elehot algorithm begets the root graph of the conflict graph @xmath7 .",
    "if graph @xmath22 is the output of elehot algorithm on conflic graph @xmath7 , then @xmath22 is the root graph of conflict graph @xmath7 , i.e. @xmath104 .     asuume that @xmath22 is the output of the elehot algorithm and @xmath41 be a simple graph obtained by @xmath22 after removing the multiple edges of @xmath22 but keeping one edge . note that in step 3 of elehot algorithm , we make the multiple edges according to the label of vertices in @xmath105 .",
    "we keep the multiplicity of each edge as a label of its corresponding vertex in @xmath40 .",
    "therefore , the line graph of @xmath22 is a graph obtained from @xmath40 by replacing every vertex by a clique of the size of its label . according to step  1 ,",
    "this graph is the original graph @xmath7 as desired .    by theorems 1 and 2",
    ", we have the following corollaries .    if the conflict graph @xmath7 contains no induced subgraph @xmath106 , then @xmath7 is the line multigrah of graph @xmath22 , where @xmath22 is an output of elehot algorithm .",
    "a given graph g is a line multigraph if and only if elehot algorithm has an output for it .",
    "the necessity is the result of theorem  2 . to see the sufficiency ,",
    "assume that g is a line multigraph .",
    "in  @xcite it has been shown that a line multigraph does not contain any subgraphs of @xmath47 as induced subgraph . moreover , by theorem  1 we know that if g contains no graphs of @xmath47 as induced subgraph , then elehot algorithm has an output .",
    "we analyze the algorithm s complexity in the following theorem .",
    "the time complexity of elehot algorithm is @xmath107 .",
    "according to eq .",
    "( [ eq2 ] ) , the time complexity of constructing @xmath108 from @xmath2 is @xmath109 . running step  1 of the algorithm",
    "has complexity of @xmath110 or @xmath107 , considering that in the worse case maximum of @xmath111 could be up to @xmath112 .",
    "according to the time complexity of lehot algorithm , step  2 has the complexity @xmath113  @xcite .",
    "step  3 of the proposed algorithm has the complexity of @xmath114 .",
    "consequently , the overall process of constructing @xmath22 has polynomial time complexity of @xmath107 .",
    "in this paper , we have generalized the concept of line graphs to line multigraphs and applied it to the conflict graph of stationary wireless networks for the purpose of link scheduling .",
    "it is shown that applying @xmath30 algorithm on the root graph of the conflict graph is equivalent to the link scheduling under general m - hop interference model in the network graph .",
    "we have proposed an algorithm to detect whether the conflict graph is line multigraph and output its root graph .",
    "the proposed algorithm is an extension of the well known lehot algorithm to the line multigraphs and is called elehot .    while applying the throughput optimal link scheduling algorithm in general",
    "is an np - hard problem , our overall proposed method results in a low complexity polynomial time algorithm , provided that the conflict graph is line multigraph .",
    "it was shown that how the derived conditions can be satisfied by network designers through topology control of the network by prohibiting the construction of seven forbidden graphs in the conflict graph .",
    "we believe that the results of this paper can be used as a guideline for network designers to plan the topology of a stationary wireless network such that the required conditions hold and then the throughout optimal algorithm can be run in a much less time . as a future plan",
    ", we aim to design a topology control algorithm based on the results of this paper .",
    "paolo santi , ritesh maheshwari , giovanni resta , samir das , and douglas  m. blough .",
    "wireless link scheduling under a graded sinr interference model . in _ proceedings of the 2nd acm international workshop on foundations of wireless ad hoc and sensor networking and computing _ , fowanc 09 , pages 312 .",
    "acm , 2009 ."
  ],
  "abstract_text": [
    "<S> in single channel wireless networks , concurrent transmission at different links may interfere with each other . to improve system throughput , a scheduling algorithm is necessary to choose a subset of links at each time slot for data transmission . </S>",
    "<S> throughput optimal link scheduling discipline in such a wireless network is generally an np - hard problem . in this paper , we develop a polynomial time algorithm for link scheduling problem provided that network conflict graph is line multigraph . </S>",
    "<S> ( i.e. , line graph for which its root graph is multigraph ) . </S>",
    "<S> this result can be a guideline for network designers to plan the topology of a stationary wireless network such that the required conditions hold and then the throughout optimal algorithm can be run in a much less time . + </S>",
    "<S> * keywords : * link scheduling , wireless network , line graph , line multigraph , root graph , conflict graph .    </S>",
    "<S> @xmath0department of electrical and computer engineering + @xmath1department of mathematical science + isfahan university of technology + 84156 - 83111 , isfahan , iran </S>"
  ]
}