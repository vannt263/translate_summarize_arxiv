{
  "article_text": [
    "_ quantity has a quality all its own _   + thomas a. callaghan jr .",
    "local features and their descriptors play pivotal roles in many computer vision systems . as such , research on improving these methods has been immense . over the years ,",
    "this effort yielded progressively more accurate representations .",
    "these improvements were often demonstrated on standard benchmarks designed to measure the accuracy of descriptor matching in the presence of various image transformations and other confounding factors .",
    "it remains unclear , however , if the improved accuracy reported on these benchmarks reflects better , more useful representations when used in real world computer vision systems .",
    "take , for example , recent attempts to use deep learning for image feature representation ( e.g. ,  @xcite ) .",
    "there is no question that given sufficient training data and computational resources deep learning methods can achieve astonishing accuracy .",
    "hence , using them to obtain local descriptors can result in better representations and by so doing impact a wide range of computer vision systems .    but using deep learning for feature description and matching does not come without a price : most of these methods are computationally expensive and even with graphical processing units ( gpu ) , are relatively slow . even after extraction , their dimensions and floating point values",
    "makes them slow to match .",
    "finally , they require substantial training data which can be difficult to provide .",
    "these limitations should be contrasted with evidence that accuracy , though important , is not the only property worth considering when choosing descriptors .",
    "for example , simultaneous localization and mapping ( slam ) methods were shown to obtain better 3d reconstructions for the same computational effort by increasing the amount of feature points per keyframe  @xcite .",
    "this suggests that computationally cheaper features are more desirable for these systems .",
    "consequently , state of the art slam techniques  @xcite use orb  @xcite rather than more accurate but computationally expensive representations such as sift  @xcite : doing so allows for a greater number of features to be extracted without compromising reconstruction accuracy .",
    "in fact , even classification systems appear to benefit from having more features over higher feature accuracy , as reported by  @xcite",
    ".    one side effect to the success of deep learning is that the hardware enabling it ",
    "gpu processors  is now becoming standard on systems running computer vision applications , including even consumer cellphone devices . beyond deep learning",
    ", these gpus can also be used to accelerate extraction and matching of older , so - called _ engineered _ descriptors .",
    "these representations may not reach the same benchmark performances as deep learning techniques , but their extraction on the gpu offers a potential trade off between accuracy and run time .",
    "in particular , faster descriptor extraction and matching allows for more descriptors to be used and consequently better overall system performances .",
    "gpu accelerated features were considered in the past . we , however , focus on a particular binary descriptor : the _ learned arrangement of three patches _ ( latch )  @xcite .",
    "it was recently shown to offer a compromise between the high accuracy , low speeds of floating point representations such as sift  @xcite , and the low accuracy , high speeds of binary descriptors ( e.g. ,  orb  @xcite , brief  @xcite ) . beyond these properties",
    ", its design also happens to neatly fit gpu processing .",
    "our contributions are : * ( 1 ) * we describe clatch , a cuda port for latch , enabling descriptor extraction and matching directly on the gpu . *",
    "( 2 ) * we embed clatch in the openmvg library  @xcite , along with a fast , gpu based hamming distance , brute force descriptor matcher . finally ,",
    "* ( 3 ) * we compare sfm 3d reconstructions on scenes from  @xcite using sift , recent deep learning based representations and our clatch .",
    "these show that clatch reconstructions are comparable or even better than those obtained with other representations , yet clatch requires a fraction of the run time of its alternatives .",
    "importantly , to promote reproducibility , the code used in this paper is publicly available from the project webpage :  www.openu.ac.il/home/hassner/projects/latch .",
    "due to their key role in many computer vision systems , local feature descriptors are extensively studied .",
    "a comprehensive survey is therefore outside the scope of this paper .",
    "below we provide only a cursory overview of this topic .",
    "* floating point representations .",
    "* for nearly two decades now , sift  @xcite is very likely the most widely used local image descriptor .",
    "it and the representations that followed ( e.g. , surf  @xcite ) represent the region around an image pixel using a vector of typically 128 floating point values .",
    "this vector is often a histogram of measurements extracted from the image , most commonly various functions of the local intensity gradients .    *",
    "binary descriptors . * despite the success of the older floating point representations , a prevailing problem was their extraction time and dimensionality ( which , in turn , affected their storage and matching time ) . in response ,",
    "binary descriptors were proposed as low dimensional , efficient alternative representations .",
    "these typically assign descriptor values by quick , pixel intensity comparisons .",
    "one of the first binary descriptors was the binary robust independent elementary features ( brief )  @xcite , soon followed by the oriented fast and rotated brief ( orb ) descriptor  @xcite which added rotation invariance , the binary robust invariant scalable keypoints ( brisk )  @xcite which used a more effective pixel sampling pattern , and the fast retina keypoint descriptor ( freak )  @xcite which sampled intensities using a pattern similar to the one found in human retinas .",
    "the accelerated - kaze ( a - kaze ) was suggested in  @xcite .",
    "it builds on the earlier local difference binary ( ldb ) descriptor  @xcite by computing the binary descriptor values from mean image intensities over a range of patch sizes .",
    "the binary online learned descriptor ( bold )  @xcite improve accuracy yet retain high processing speeds .",
    "finally and very recently , the latch binary descriptors were proposed in  @xcite .",
    "we defer discussion of latch to sec .",
    "[ sec : latch ] .",
    "hybrid binary / floating - point methods were also suggested .",
    "one example is lda - hash  @xcite which extracts sifts , projects them to a discriminative space and applies a threshold to obtain binary descriptors .",
    "dbrief  @xcite instead uses patch intensities directly , binboost  @xcite learns a set of hash functions corresponding to each bit in the final descriptor and pr - proj  @xcite uses learning and dimensionality reduction to produce compact binary representations .",
    "the computational effort required to extract these descriptors is similar to ( if not greater than ) floating point descriptors .",
    "the representations , however , are short binary vectors and so matching and storing them is relatively efficient",
    ".    * computing local descriptors on the gpu .",
    "* of course , we are not the first to propose porting local feature extraction to the gpu . to our knowledge , nearly all these efforts used the gpu to aid in extracting _ floating point descriptors _ , including gpu - sift ( see , e.g. ,  @xcite ) and gpu - surf  @xcite . these methods all used gpus in portions of the extraction process .",
    "for example ,  @xcite used the gpu only to compute convolutions , all other stages performed on the cpu .",
    "in addition , and more importantly , the gain in performance reported by these methods are modest and do not approach the speeds of contemporary binary descriptors , let alone our clatch .",
    "interestingly , the only available gpu _ binary descriptor _ is cuda orb , implemented by opencv  @xcite .",
    "as we later discuss , due to the nature of gpu processing , the run time advantage of orb over the more accurate latch descriptor when computed on the cpu , vanishes on the gpu .",
    "* deep features . * following the remarkable success of deep learning in computer vision , it is no surprise that these methods are also being applied to feature point description .",
    "convolutional neural networks ( cnn ) were used in a number of previous attempts to learn local descriptor representations  @xcite .    in most cases ,",
    "a siamese deep network is trained with hinge loss  @xcite .",
    "the training set used in these cases consists of positive and negative labeled patch pairs .",
    "metric learning is then used to improve matching .",
    "finally ,  @xcite proposed an efficient cnn design , bringing processing speeds down substantially .",
    "as we later show , their run time is still slower than our proposed approach .",
    "* the latch feature descriptor .",
    "* latch was recently introduced in  @xcite and is available as part of the opencv library since ver . 3.0  @xcite .",
    "its design was inspired by the observation that _ pure _ binary descriptors such as brief and orb produce their values by comparing pairs of pixel intensities , a process which can be sensitive to local noise . to address this , these methods used various smoothing techniques before pixel values were compared .",
    "smoothing , however , has the adverse effect of losing important high frequency image information .    rather than smoothing the image and then comparing single pixel values ,",
    "latch computes its binary values by comparing pixel _",
    "patches_. the latch descriptor for image pixel @xmath0 is computed by selecting @xmath1 patch triplets , one for each latch bit . for triplet @xmath2 ,",
    "three pixels are selected in the region around @xmath3 : an _ anchor _",
    "pixel @xmath4 and two _ companion _ pixels @xmath5 and @xmath6 .",
    "the @xmath7 pixel patches , @xmath8 , and @xmath9 centered on each of these three pixels are extracted .",
    "finally , bit @xmath2 in the latch descriptor for @xmath3 is set by comparing the frobenious norm of the anchor to its two neighbors , as follows : @xmath10 the triplets latch uses are fixed but are not arbitrary : triplets are selected during training using the data set from  @xcite , which contains same / not - same labeled image windows .",
    "triplets were chosen by considering how well their bits correctly predicted the same / not - same labels over the entire training set . to prevent choosing correlated triplets , following  @xcite",
    ", triplets are skipped if their predictions are correlated with those of previously chosen triplets .",
    "in their work  @xcite , latch contained 512 bits ( selected triplets ) each one representing triplets of @xmath11 patches .",
    "at matching time , its computational requirements were obviously equal to those of any other 512 bit binary descriptor . due to the use of patches and multiple frobenious norms , extracting latch was slower than pure binary descriptors of the same size .",
    "experiments reported in  @xcite , however , showed that the increase in extraction time was small .",
    "this was balanced by improved accuracy which bested existing binary descriptors , sometimes rivaling even larger floating point representations .    *",
    "the gpu architecture and non - blocking programs . *",
    "though the specific architectural designs of gpu processors changes from generation to generation , all have several multiprocessors .",
    "a cpu can launch _ non - blocking _ ( parallel ) gpu programs on these multiprocessors , referred to as _",
    "kernels_. that is , while a kernel is being executed on the gpu , the cpu is free to pursue other tasks and similarly , memory transfers to and from the gpu can take place without blocking either cpu or gpu .",
    "this property is extremely important when designing computer vision systems using the gpu : it implies that if the gpu extracts descriptors independently of the cpu , _ the cpu is free to perform higher level processing_. related to the sfm application considered here are optimizations for recovering transformations  @xcite and/or multiple view stereo for scene structure  @xcite .    some previous attempts to port descriptors to the gpu used it only for parts of the descriptor extraction process , using the cpu for others and requiring multiple memory transfers between processors  @xcite .",
    "this at least partially explains why these attempts showed only modest run time improvements over their original , cpu implementations . as a design goal",
    ", we therefore limit the use of the cpu and any communications between it and the gpu when extracting and comparing our descriptors .",
    "* why latch ? * latch was selected for following reasons .    * * memory access vs. computation . *",
    "the emphasis in gpu processing on raw arithmetic power results in memory access patterns often being the determining factor in performance rather than the actual computation .",
    "latch requires more processing than pure binary representations ( e.g. ,  @xcite ) and therefore requires more cpu time to compute than they do . the memory transfer requirements of latch , however , are very similar to these other descriptors and hence it stands to gain more on the  gpu . * * limited conditional branching . *",
    "as mentioned above , gpus are optimized for processes which have few , if any , conditional branching ; under these circumstances , modern gpus are capable of up to 10 tera - flops .",
    "most pure binary descriptors are therefore well suited for gpu processing , whereas porting more complex representations to the gpu is less trivial .",
    "* * binary string comparisons .",
    "* latch is a binary representation . like other binary representations",
    ", it can be matched using fast hamming distance comparisons .",
    "these can further be performed extremely fast on the gpu .    finally , as demonstrated in the tests reported by  @xcite",
    ", latch outperforms other binary descriptors making it ideally suited for our purposes .",
    "we have ported the latch representation to cuda 8 , building on the original latch opencv c++ implementation . in all our evaluations ,",
    "clatch representations were extracted from @xmath12 pixel windows , using mini - patches of @xmath13 pixels giving a 64-byte feature vector .",
    "to minimize cpu processing , differently from  @xcite , we use the features from accelerated segment test ( fast )  @xcite feature detector .",
    "fast is already available on the gpu as part of the opencv  @xcite library . given a detected oriented keypoint , @xmath14 we extract latch from a @xmath15 intensities window around this point .",
    "this process is described next .",
    "* parallelizing latch on the gpu .",
    "* gpu kernels include several identical , concurrently - executing , non - interacting _ blocks_. each one consists of groups ( _ warps _ ) of 32 threads . in our implementation ,",
    "a clatch kernel sequentially computes 16 descriptors per block .",
    "while the region of interest for one interest point is being processed , the next one is prefetched to pipeline the processing .",
    "a single descriptor is extracted by multiple warps in each block .",
    "each warp independently computes sixteen patch triplets , @xmath16 $ ] , four at a time , without any explicit synchronization during the main computation .",
    "all told , two blocks of 32 warps , each one containing 32 threads ( total of 2048 threads ) are processed at a time per multiprocessor .",
    "this coarse granularity was chosen to maximize performance across a variety of gpu architecture generations .",
    "* memory optimization . *",
    "given the fast orientation for an image region , the rotated @xmath15 pixel rectangle is loaded into shared memory as an upright square of single - precision floats .",
    "we use texture memory accesses to efficiently load and process these values .",
    "our implementation eliminates bank conflicts , with warp divergences or branches kept to a minimum .",
    "thus , processing proceeds without ` i`f statements or communications between different warps .",
    "this is achieved by strided access patterns of patches and careful padding of shared memory , and is critical to clatch s high performance .",
    "specifically , patch comparisons are performed as follows .",
    "a warp simultaneously processes four triplets . each thread ( in a warp of 32 threads ) performs two squared - distance comparisons per triplets in the f - norm of eq .",
    "[ eq : latch ] . then",
    ", fast warp shuffle operations are used to quickly sum the result from all pixel pairs in a novel , optimal manner . the original latch implementation used @xmath11 pixel patches .",
    "we use @xmath17 patches instead as this implies 64 values which can be handled concurrently with no extra computation costs . to further optimize this process ,",
    "instruction level parallelism was exploited by manual loop unrolling and carefully arranging operations to prevent stalls due to data dependency .    * weighing pixels in latch patches . *",
    "each pixel within a patch can optionally be given a unique weight at no overhead .",
    "this is due to the gpu s emphasis on cheap fused - multiply - add operations .",
    "we use this property to simulate the original latch patch size of @xmath11 by setting the relevant weights to zero , obtaining the exact same representation as the original latch . another potential use for this feature ,",
    "not tested here , is applying gaussian weights to patch pixels thereby better emphasizing similarity at the patch center vs. its outer pixels .",
    "latch ( and consequently clatch ) were shown to be slightly less accurate than some of the more computationally heavy , floating point descriptors .",
    "it is not clear , however , how these differences in accuracy affect the overall accuracy and speed of an entire , descriptor - intensive computer vision system .    to this end",
    ", we test clatch vs. other descriptors on the challenging task of 3d sfm reconstruction .",
    "our goal is to see how the final reconstruction and the time required to compute it are affected by the choice of descriptor .",
    "we use the openmvg , multiple view geometry library  @xcite , modifying it to include self - contained cuda streams and a gpu based , brute force hamming matcher .",
    "these are detailed next .",
    "* cuda integration . *",
    "the kernel launching mechanism employed by cuda on its default stream disables concurrent launches of feature detection kernels .",
    "we therefore modified the clatch descriptor and matching code to exclusively operate off of self - contained streams .",
    "doing so allowed the gpu to concurrently execute feature detection and description kernels across multiple images at once , as well as perform feature matching .",
    "* descriptor matching on the gpu . *",
    "our tests compare the use of our binary descriptors with existing floating point representations . in all cases",
    ", we used the gpu to compute the descriptor distances . because clatch is a binary representation , hamming distance is used to compute similarity of clatch descriptors .",
    "to this end , we developed our own gpu based hamming distance brute force matcher and integrated it into openmvg . to provide a fair comparison , distances between floating point representations",
    "were computed using the standard opencv gpu based l2 distance routine .",
    "each block of our hamming - based brute force matching kernel processes half a probe descriptor per thread , though each descriptor is distributed throughout a half warp so that each thread holds parts of 16 probe descriptors .",
    "gallery descriptors are alternatively prefetched into and processed from two shared memory buffers without intermediate synchronization . as the hamming distance between each pair of probe and gallery descriptors",
    "is computed , partial results are distributed through a half warp .",
    "this calls for a simultaneous reduction of several independent variables , which minimizes the number of additions and warp shuffles to be performed .",
    "first , each thread halves the number of variables it must reduce by packing two variables into the lower and upper 16 bits of a 32 bit integer .",
    "then , pairs of threads simultaneously exchange their packed variables in a warp shuffle , and sum the result with their original variable .",
    "this results in pairs of threads with variables holding identical values .",
    "the threads again pair off in the same manner , but exchange and sum a different variable .",
    "the same pairs of threads now have two variables with identical values , so the second of each pair of threads overwrites the first packed variable with the second , before each thread discards the second packed variable .",
    "this results in every thread in a warp having a unique value in the same variable , which allows efficient participation in subsequent warp shuffles until the reduction is complete .",
    "this novel method requires only 16 additions to compare 16 descriptor pairs , while the standard warp reduction pattern would require 80 .",
    "* descriptor extraction run time comparison . * the clatch descriptor is identical to latch and so their accuracy on different benchmarks are the same .",
    "we therefore refer to the original paper for a comparison on standard benchmarks of latch and other representations  @xcite .    by using the gpu ,",
    "clatch is much faster to extract .",
    "this is demonstrated in table  [ tab : runningtimes ] , which provides a comparison of the run times reported for extracting many popular existing feature point descriptors compared to clatch .",
    "we report also the processor used to extract these representations and a price estimate for the processor in case of gpu based methods .",
    "evident from the table is that even on affordable gpu hardware , extraction run times are orders of magnitude faster than standard representations on the cpu and even other gpu representations ( the only exceptions are the far less accurate cuda orb and the floating point representation cuda surf ) .",
    "pn - net  @xcite in particular , is designed to be a very fast deep learning based descriptor method , yet even with more expensive gpu hardware , it is more than an order of magnitude slower to extract than clatch .",
    "more importantly , all floating point representations , including cuda surf and pn - net , require more time to match their bigger , real valued representations .",
    "max width=0.55    l @   c c descriptor & extraction @xmath18 & gpu + sift  @xcite & 3290 & - + surf  @xcite & 2110 & - + cuda surf  @xcite@xmath19 & 0.9 & gtx 970 m",
    "( $ 280 usd ) + lda - hash  @xcite & 5030 & - + lda - dif  @xcite & 4740 & - + dbrief  @xcite & 8750 & - + binboost  @xcite & 3290 & - + brief  @xcite & 234 & - + orb  @xcite & 486 & - + cuda orb  @xcite@xmath20 & 0.5 & gtx 970 m ( $ 280 usd ) + brisk  @xcite & 59 & - + freak  @xcite & 72 & - + a - kaze  @xcite & 69 & - + latch  @xcite & 616 & - + deepsiam  @xcite@xmath21 & 6580 & titan ( $ 650 usd ) + matchnet  @xcite@xmath22 & 575 & titan x ( $ 1,000 usd ) + cnn3  @xcite@xmath23 & 760 & titan black ( $ 1,100 usd ) + pn - net  @xcite@xmath23 & 10 & titan x ( $ 1,000 usd ) + our clatch & 0.5 & gtx 970 m ( $ 280 usd ) +    * sfm results .",
    "* we use the incremental sfm pipeline implemented in openmvg , with its default values unchanged .",
    "we compared the following descriptors in our tests : sift  @xcite , often the standard in these applications , the deep learning based features , deepsiam and deepsiam2stream from  @xcite , the fast deep feature representations , pn - net from  @xcite and our own clatch .",
    "max width=    lcccccccc & avignon & bouteville & burgos & cognac garden & st .",
    "jacques & mirebeau & murato & poitiers + number of images & 11 & 26 & 9 & 12 & 20 & 22 & 43 & 33 +   + sift  @xcite & 0.475 & 0.405 & 0.495 & 0.438 & 0.498 & 0.478 & 0.533 & 0.690 + deepsiam  @xcite & 0.533 & 0.489 & 0.422 & 0.566 & 0.535 & 0.489 & 0.533 & 0.547 + deepsiam2stream  @xcite & 0.505 & 0.457 & 0.419 & 0.536 & 0.522 & 0.459 & 0.496 & 0.529 + pn - net  @xcite & 0.538 & 0.462 & 0.493 & 0.554 & 0.536 & 0.482 & 0.531 & 0.533 + our clatch & 0.556 & 0.414 & 0.466 & 0.478 & 0.409 & 0.466 & 0.494 & 0.454 +   + sift  @xcite & 174.30 & 454.13 & 143.728 & 155.61 & 296.431 & 401.64 & 958.778 & 1206.10 + deepsiam  @xcite & 172.49 & 596.07 & 130.72 & 146.49 & 347.576 & 416.01 & 943.841 & 812.39 + deepsiam2stream  @xcite & 269.39 & 922.95 & 226.123 & 301.67 & 628.03 & 739.629 & 1750.535 & 1379.80 + pn - net  @xcite & 49.56 & 210.60 & 50.12 & 56.02 & 122.29 & 167.51 & 372.28 & 311.18 + our clatch & 18.91 & 69.07 & 15.907 & 19.089 & 27.877 & 47.534 & 86.377 & 61.868 +    all descriptors used the cuda fast feature detector with the exception of sift which , for technical reasons , used its default dog based detector . following incremental sfm , point cloud densification  @xcite , mesh reconstruction  @xcite and mesh refinement  @xcite were applied to produce the final reconstructions visualized in fig .",
    "[ fig : reconstruct ] .",
    "tests were performed on publicly available sets of high resolution photogrammetry images from  @xcite , which include @xmath24 ( or @xmath25 ) pixels in each image .",
    "table  [ tab : sfmresults ] summarizes these results , providing the final scene reprojection rmse and the total time for descriptor extraction , matching and sfm reconstruction .",
    "all these tests were run on our gtx 1080 gpu .",
    "reconstruction run time is dominated by the brute force , nearest neighbor matcher .",
    "hence , the gaps in run times between the different methods are smaller than those in table  [ tab : runningtimes ] .",
    "nevertheless , reconstructions with clatch required a fraction of the time for the runner up ( pn - net ) and far less than the others .",
    "reprojection rmse , is low for all methods and is typically around half a pixel .",
    "although these errors fluctuate between the different methods and scenes , these differences are often below 0.1 pixels .",
    "considering the high resolutions of the input images , these differences are negligible .    finally , fig .",
    "[ fig : reconstruct ] additionally provides qualitative results , showing rendered views of our reconstructions .",
    "evident from the figure is that despite large differences in run time , qualitatively , the reconstructions appear very similar .",
    "in descriptor matching intensive application , such as sfm , accuracy per descriptor is sometimes balanced by the speed required to extract and match the descriptors . taking advantage of this",
    ", we present clatch , a cuda port for the latch binary descriptor .",
    "although clatch descriptor accuracy in standard benchmarks may fall slightly behind other representations , particularly recent deep learning based methods , they are far faster to extract and match .",
    "clatch thereby provides a fast and accurate alternative means for 3d reconstruction .    from a technical point , an outcome of this work is openly available code for extremely fast feature extraction and matching and a pipeline for sfm allowing convenient interchange of feature descriptors , including deep methods",
    "this implementation can be improved in many ways .",
    "for one thing , our use of the fast detector  @xcite does not provide scale invariance .",
    "clatch , however , can easily be extracted at multiple scales , potentially improving its accuracy .",
    "use of clatch in other applications where descriptors are extracted and matched in large quantities , is also a priority .",
    "one particularly appealing example is dense pixel matching  @xcite where the clatch may be an alternative to methods such as patchmatch  @xcite , providing similar run times without compromising spatial smoothness .",
    "han , x. , leung , t. , jia , y. , sukthankar , r. , berg , a.c .",
    ": matchnet : unifying feature and metric learning for patch - based matching . in : proc .",
    "comput . vision pattern recognition .",
    "32793286 ( 2015 )                                  simo - serra , e. , trulls , e. , ferraz , l. , kokkinos , i. , fua , p. , moreno - noguer , f. : discriminative learning of deep convolutional feature point descriptors . in : proc .",
    "comput . vision .",
    "118126 ( 2015 )                          yang , x. , cheng , k.t .",
    ": ldb : an ultra - fast feature for scalable augmented reality on mobile devices . in : mixed and augmented reality ( ismar ) , 2012 ieee international symposium on .",
    "4957 . ieee ( 2012 )"
  ],
  "abstract_text": [
    "<S> accuracy , descriptor size , and the time required for extraction and matching are all important factors when selecting local image descriptors . to optimize over all these requirements </S>",
    "<S> , this paper presents a cuda port for the recent learned arrangement of three patches ( latch ) binary descriptors to the gpu platform . </S>",
    "<S> the design of latch makes it well suited for gpu processing . owing to its small size and binary nature </S>",
    "<S> , the gpu can further be used to efficiently match latch features . taken together , this leads to breakneck descriptor extraction and matching speeds . </S>",
    "<S> we evaluate the trade off between these speeds and the quality of results in a feature matching intensive application . to this end </S>",
    "<S> , we use our proposed cuda latch ( clatch ) to recover structure from motion ( sfm ) , comparing 3d reconstructions and speed using different representations . </S>",
    "<S> our results show that clatch provides high quality 3d reconstructions at fractions of the time required by other representations , with little , if any , loss of reconstruction quality . </S>"
  ]
}