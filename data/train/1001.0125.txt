{
  "article_text": [
    "for a function @xmath12 and a subset @xmath13 , we write @xmath14 to denote @xmath15 .",
    "the _ incidence vector _ of @xmath16 in @xmath17 is denoted by  @xmath18 , i.e. @xmath19 is 1 for @xmath20 and 0 for @xmath21 ( usually @xmath22 will be clear from the context ) .",
    "when @xmath16 is a multiset , @xmath19 denotes the number of occurrences of @xmath23 in @xmath16 .    in an undirected graph @xmath5 ,",
    "the sets of nodes and edges are denoted by @xmath24 and @xmath25 , respectively .",
    "when @xmath5 is a directed graph , we speak of arcs rather than edges and write @xmath26 instead of @xmath25 .",
    "a similar notation is used for paths , cycles , and etc .    a _ walk _ in @xmath5",
    "is meant to be a sequence @xmath27 , where each @xmath28 is an edge ( or arc ) and @xmath29 are its endnodes ; when @xmath5 is a digraph , @xmath28 is directed from @xmath30 to @xmath31 .",
    "edge - simple ( or arc - simple ) walks are called _",
    "paths_.    we consider an undirected graph  @xmath5 and a distinguished subset @xmath1 of nodes , called _ terminals_. nodes in @xmath32 are called _ inner_. a _ @xmath6-path _ is a path @xmath8 in @xmath5 whose endnodes are distinct terminals ; we usually assume that all the other nodes of @xmath8 are inner .",
    "the set of @xmath6-paths is denoted by @xmath33 .",
    "a _ multiflow _ is a function @xmath34 .",
    "equivalently , one may think of @xmath7 as a collection @xmath35 ( for some @xmath36 ) , where the @xmath37 are @xmath6-paths and the @xmath38 are nonnegative rationals , called",
    "_ weights _ of paths . sometimes ( e.g. , in  @xcite ) such a multiflow @xmath7 is called _ free _ to emphasize that _ all _ pairs of distinct terminals are allowed to be connected by flows .",
    "@xmath39 of @xmath7 is @xmath40 . for a node @xmath10 ,",
    "define @xmath41 the function @xmath42 on @xmath24 is called the _ ( node ) load function_. let @xmath43 be a nonnegative integer function of _ node capacities_. we say that @xmath7 is _ feasible _ if @xmath44 for all @xmath45 .",
    "suppose we are given , in addition , a function @xmath46 of _ node costs_. then the _ cost _ @xmath47 of a multiflow @xmath7 is the sum @xmath48 , where @xmath49 stands for the cost @xmath50 of a path @xmath8 .    in this paper",
    "we consider the following problem :    @xmath51 given @xmath52 as above , find a multiflow  @xmath7 of minimum possible cost @xmath47 among all feasible multiflows of maximum possible value .",
    "when @xmath53 ,  ( @xmath51 ) turns into the undirected min - cost max - flow problem under node capacities and costs , having a variety of applications ; see , e.g. ,  @xcite .",
    "it admits integer optimal primal and dual solutions  @xcite .    in the special case @xmath54",
    ", we are looking simply for a feasible multiflow of maximum value .",
    "such a problem has half - integer optimal primal and dual solutions , due to results of pap  @xcite and vazirani  @xcite , respectively .",
    "also it is shown in  @xcite that the problem is solvable in strongly polynomial time by using the ellipsoid method .",
    "an edge - capacitated version of ( @xmath51 ) has been well studied . in this version , denoted by  ( @xmath55 ) ,",
    "@xmath56 and @xmath11 are functions on @xmath25 rather than @xmath24 . for a multiflow",
    "@xmath7 , its _ edge load function _ is defined similarly to ( [ eq : node_load ] ) : @xmath57 and its cost is defined to be @xmath58 .",
    "problem  ( @xmath55 ) is reduced to ( @xmath51 ) by adding an auxiliary node on each edge , but no converse reduction is known .",
    "an old result is that ( @xmath55 ) has a half - integer optimal solution  @xcite .",
    "also it is shown in  @xcite that  ( @xmath55 ) has a half - integer optimal dual solution and that half - integer primal and dual optimal solutions can be found in strongly polynomial time by using the ellipsoid method .",
    "a `` purely combinatorial '' weakly polynomial algorithm , based on cost and capacity scaling , is devised in  @xcite .    in the special case of ( @xmath55 ) with @xmath54 ,",
    "the half - integrality results are due to lovsz  @xcite and cherkassky  @xcite , and a strongly polynomial combinatorial algorithm is given in  @xcite ( see also  @xcite for faster algorithms ) .",
    "in this paper we prove that ( @xmath51 ) always admits a half - integer optimal primal and dual solutions .",
    "in particular , this implies all half - integrality results mentioned in the previous subsection .",
    "similar to @xcite , we introduce a _ parametric _ generalization of ( @xmath51 ) , study properties of geodesics ( shortest @xmath6-paths with respect to some length function ) , and reduce the parametric problem to a certain single - commodity flow problem .",
    "however , the details of this construction are more involved .",
    "in particular , the reduced problem concerns integer flows in a _ bidirected _ graph .    the second goal is to explore the complexity of ( @xmath51 ) .",
    "we show that half - integer optimal primal and dual solutions to the parametric problem ( and therefore to  ( @xmath51 ) ) can be found in strongly polynomial time by using the ellipsoid method .",
    "instead of ( @xmath51 ) , it is convenient to consider a more general problem , namely :    @xmath59 given @xmath52 as in ( @xmath51 ) and , in addition , @xmath60 , find a feasible multiflow  @xmath7 maximizing the objective function @xmath61",
    ".    we will prove the following    [ th : primal_halfint ] for any @xmath60 , problem ( @xmath59 ) has a half - integer optimal solution .",
    "( note that @xmath62 for any multiflow @xmath7 and @xmath63 .",
    "therefore , the optimality of a multiflow in the parametric problem preserves when both @xmath11 and @xmath64 are multiplied by the same positive factor @xmath65 .",
    "this implies that the theorem is generalized to arbitrary @xmath66 and @xmath67 ( but keeping the integrality of @xmath56 ) .",
    "however , we prefer to deal with integer - valued @xmath11 and @xmath64 in what follows . )    by standard linear programming arguments , ( @xmath51 ) and ( @xmath59 ) become equivalent when @xmath64 is large enough ( moreover , the existence of a half - integer optimal solution for ( @xmath59 ) easily implies that taking @xmath68 is sufficient ) .",
    "problem ( @xmath59 ) can be viewed as a linear program with variables @xmath69 assigned to @xmath6-paths @xmath8 .",
    "assign to a node @xmath45 a variable @xmath70 .",
    "then the linear program dual to ( @xmath59 ) is :    @xmath71 minimize @xmath72 provided that the following holds for every @xmath6-path  @xmath8 : @xmath73      the above dual problem ( @xmath71 ) involves lengths of paths ( namely , @xmath74 and @xmath49 ) determined by `` lengths '' of nodes ( @xmath75 and @xmath11 , respectively ) .",
    "it is useful to transform lengths of nodes into lengths of edges .",
    "to do so , for @xmath76 , we define the function @xmath77 on @xmath25 by @xmath78 where @xmath79 if @xmath80 , and @xmath81 if @xmath82 .",
    "this provides the correspondence @xmath83 ( where @xmath84 stands for @xmath85 , and @xmath86 for @xmath87 ) . for @xmath88 as above , define @xmath89 let @xmath90 denote the @xmath91-distance between vertices @xmath92 and @xmath10 , i.e. the minimum @xmath91-length @xmath93 of a @xmath92@xmath10 path @xmath8 in @xmath5 .",
    "then , in view of  ( [ eq : node_to_edge ] ) and  ( [ eq : ell ] ) , the constraints in ( @xmath71 ) can be rewritten as @xmath94    by the linear programming duality theorem applied to ( @xmath59 ) and ( @xmath71 ) , a feasible multiflow @xmath7 and a function @xmath95 satisfying ( [ eq : dual_dist ] ) are optimal solutions to ( @xmath59 ) and ( @xmath71 ) , respectively , if and only if the following ( complementary slackness conditions ) hold :    [ eq : cs_geodesic ] if @xmath8 is a @xmath6-path and @xmath96 , then @xmath97 ; in particular , @xmath8 is @xmath91-shortest ;    [ eq : cs_saturated ] if @xmath45 and @xmath98 , then @xmath10 is _ saturated _ by @xmath7 , i.e. @xmath99 .    in the rest of the paper , to simplify technical details , we will always assume that the input costs  @xmath11 of all nodes are _",
    "strictly positive_. then the edge lengths @xmath91 defined by  ( [ eq : ell ] ) are strictly positive as well .",
    "this assumption will not lead to loss of generality in essence , since the desired results for a nonnegative input cost function  @xmath11 can be obtained by applying a perturbation technique in spirit of  @xcite ( by replacing @xmath11 by an appropriate strictly positive cost function ) .",
    "condition ( [ eq : cs_geodesic ] ) motivates the study of the structure of @xmath91-shortest @xmath6-paths in  @xmath5 . to this aim , set @xmath100 .",
    "a @xmath6-path @xmath8 such that @xmath101 is called an _",
    "@xmath91-geodesic _ ( or just _ geodesic _ if @xmath91 is clear form the context ) .",
    "when a multiflow @xmath7 in @xmath5 is given as a collection  ( [ eq : mf_coll ] ) in which all paths @xmath37 are @xmath91-geodesics , we say that @xmath7 is an _",
    "@xmath91-geodesic _ multiflow .",
    "next we utilize one construction from @xcite , with minor changes .",
    "consider a node @xmath45 .",
    "define the _ potential _ @xmath102 to be the @xmath91-distance from @xmath10 to the nearest terminal , i.e. @xmath103 . set @xmath104 ( in particular , @xmath105 ) . for @xmath106 , define @xmath107 . also define @xmath108 .",
    "we refer to @xmath109 as the _ zone _ of a terminal @xmath110 , and to @xmath111 as the set of _ central _ nodes ( w.r.t .",
    "@xmath91 ) . the sets @xmath109 ( @xmath106 ) and @xmath111 are pairwise disjoint and",
    "give a partition of  @xmath112 .",
    "the following subset of edges is of importance : @xmath113    one can see that the subgraph @xmath114 of @xmath5 contains all @xmath91-geodesics .",
    "moreover , a straightforward examination shows that the structure of @xmath91-geodesics possesses the properties as expressed in the following lemma ( which is , in fact , a summary of claims  13 from @xcite and uses the strict positivity of @xmath91 ) .",
    "[ lm : geodesics ] let @xmath8 be an @xmath91-geodesic running from @xmath110 to @xmath115 .",
    "then @xmath8 is contained in @xmath116 and exactly one of the following takes place :    1 .",
    "@xmath8 contains no central nodes and can be represented as the concatenation @xmath117 , where @xmath118 , @xmath119 , @xmath120 , and @xmath121 .",
    "2 .   @xmath8 contains exactly one central node @xmath122 and can be represented as the concatenation @xmath123 , where @xmath124 , @xmath125 , @xmath120 , and @xmath126 .    in both cases , parts @xmath127 and @xmath128 are contained in the induced subgraphs @xmath129 $ ] and @xmath130 $ ] , respectively .",
    "the potentials @xmath131 are strictly increasing as we traverse @xmath127 from @xmath132 to @xmath92 , and strictly decreasing as we traverse @xmath128 from @xmath10 to @xmath133 .",
    "conversely , any @xmath6-path in @xmath116 obeying the above properties is an @xmath91-geodesic .",
    "in this subsection we introduce an auxiliary bidirected graph , which will be the cornerstone of our approach both for proving half - integrality results and for providing a polynomial - time algorithm .    given @xmath5 , @xmath6 , @xmath56 , @xmath11 and @xmath64 as above , let @xmath75 be an optimal solution to ( @xmath71 ) . form the edge lengths @xmath134 , the potential @xmath131 , the subgraph @xmath116 , and the sets @xmath109 ( @xmath106 ) and @xmath111 , as in subsection  [ ssec : geodesics ] .",
    "one may assume that @xmath135 ( since @xmath136 , by  ( [ eq : dual_dist ] ) , and if @xmath137 then @xmath138 is an optimal solution to  ( @xmath59 ) , by  ( [ eq : cs_geodesic ] ) ) .",
    "for further needs , we reset @xmath139 , making all node capacities even integers . now our goal is to prove the existence of an _ integer _ optimal multiflow @xmath7 in problem ( @xmath59 ) ( which is equivalent to proving the half - integrality w.r.t . the initial @xmath56 ) .",
    "recall that in a _ bidirected _ graph ( or a _ bd - graph _ for short ) edges of three types are allowed : a usual directed edge , or an _ arc _ , that leaves one node and enters another one ; an edge directed _ from both _ of its ends ; and an edge directed _ to both _ of its ends ( cf .",
    "when both ends of an edge coincide , the edge becomes a loop . for our purposes we admit no loop entering and leaving its end node simultaneously .",
    "sometimes , to specify the direction of an edge @xmath140 at one or both of its ends , we will draw arrows above the corresponding node characters .",
    "for example , we may write @xmath141 if @xmath23 is directed from @xmath92 to @xmath10 ( a usual arc ) , @xmath142 if @xmath23 leaves both @xmath143 , @xmath144 if @xmath23 enters both @xmath143 , and @xmath145 if @xmath23 leaves @xmath92 ( and either leaves or enters @xmath10 ) .",
    "a _ walk _ in a bd - graph is an alternating sequence @xmath146 of nodes and edges such that each edge @xmath28 connects nodes @xmath30 and @xmath31 , and for @xmath147 , the edges @xmath148 form a _ transit pair _ at @xmath31 , which means that one of @xmath148 enters and the other leaves  @xmath31 .",
    "as before , an edge - simple walk is referred to as a _ path_.    now we associate to @xmath116 a bd - graph @xmath149 with edge capacities @xmath150 , as follows ( see fig .  [",
    "fig : aux_graph ] for an illustration ) .",
    "each noncentral node @xmath151 generates two nodes @xmath152 in @xmath149 .",
    "they are connected by edge ( arc ) @xmath153 going from @xmath154 to @xmath155 and having the capacity equal to @xmath2 .",
    "we say that @xmath153 _ inherits the capacity _ of the node  @xmath10 . for @xmath106 , the set @xmath156 in @xmath149",
    "is called the _ zone _ of @xmath132 , similar to @xmath109 in  @xmath5 .",
    "consider an edge @xmath157 .",
    "let @xmath158 for some @xmath106 and assume for definiteness that @xmath159 ( note that @xmath160 implies @xmath161 ; this is where the strict positivity of the cost function @xmath11 is important ) .",
    "then @xmath23 generates in @xmath149 an edge ( arc ) going from @xmath162 to @xmath154 , and we assign infinite capacity to it .",
    "( by `` infinite capacity '' we mean a sufficiently large positive integer . )",
    "now let @xmath118 and @xmath119 for distinct @xmath163 .",
    "then @xmath23 generates an infinite capacity edge @xmath164 ( leaving both @xmath162 and  @xmath155 ) .",
    "the transformation of central nodes is less straightforward .",
    "each @xmath165 generates in @xmath149 a so - called _ gadget _ , denoted by @xmath166 .",
    "it consists of @xmath167 nodes ; they correspond to @xmath168 and the elements of @xmath6 and are denoted as @xmath169 and @xmath170 , @xmath106 .",
    "the edges of @xmath166 are : a loop @xmath171 leaving @xmath169 ( twice ) and , for each @xmath172 , an edge @xmath173 going from @xmath170 to @xmath169 , called the @xmath132-_leg _ in the gadget . each edge in @xmath166 is endowed with the capacity equal to @xmath174 .",
    "each gadget @xmath166 is connected to the remaining part of @xmath149 as follows . for each edge of the form @xmath175 in @xmath116 , we know that @xmath176 for some @xmath106 ( by the construction of @xmath116 )",
    ". then @xmath175 generates an infinite capacity edge ( arc ) going from @xmath155 to @xmath170 .    finally , we add to @xmath149 an extra node @xmath65 , regarding it as the _ source _ , and for each @xmath106 , draw an infinite capacity edge ( arc ) from @xmath65 to @xmath177 .",
    "the obtained bd - graph @xmath149 captures information about the @xmath91-geodesics in  @xmath5 .",
    "namely , each @xmath91-geodesic @xmath8 going from @xmath132 to @xmath133 induces a unique closed @xmath65@xmath65 walk @xmath178 in @xmath149 .",
    "the first and the last edges of @xmath178 are @xmath179 and @xmath180 , respectively . for a noncentral node @xmath10 in @xmath8 ,",
    "@xmath178 traverses the edge @xmath181 .",
    "an edge @xmath182 with @xmath183 inside a zone induces the edge @xmath184 in @xmath178 .",
    "an edge @xmath185 connecting different zones ( if any ) induces the edge @xmath164 in @xmath178 .",
    "finally , suppose @xmath8 traverses a central node @xmath122 and let @xmath186 be the edges of @xmath8 incident to @xmath168 .",
    "by lemma  [ lm : geodesics ] , @xmath118 and @xmath119 for some @xmath187 . then the sequence of nodes @xmath188 in @xmath8 generates the subpath in @xmath178 with the sequence of edges @xmath189 .",
    "the resulting walk @xmath178 is edge - simple , so it is a closed path .",
    "conversely , let @xmath190 be a ( nontrivial ) @xmath65@xmath65 walk in @xmath149 .",
    "one can see that @xmath190 with @xmath65 removed is concatenated as @xmath191 , where @xmath192 is a directed path within a zone @xmath193 , @xmath194 is reverse to a directed path within a zone @xmath195 ( with possibly @xmath196 ) , and @xmath197 either  ( i ) is formed by an edge @xmath164 connecting these zones ( in which case @xmath187 ) , or  ( ii ) is the walk with the sequence of edges @xmath198 , for some central node @xmath168 of @xmath116 .",
    "moreover , the image in @xmath5 of each of @xmath199 is an @xmath91-shortest path .",
    "when @xmath196 happens in case  ( ii ) , @xmath190 traverses the edge @xmath173 twice . in all other cases ,",
    "@xmath190 is edge - simple and its image in @xmath5 is an @xmath91-shortest @xmath6-path ( a @xmath64-geodesic ) .",
    "these observations show that there is a natural bijection between the @xmath91-geodesics in @xmath5 and the ( nontrivial ) @xmath65@xmath65 paths in @xmath149 .",
    "we will refer to the bd - graph @xmath149 described above as the _ compact _ bd - graph related to @xmath116 ; it will be essentially used to devise an efficient algorithm for solving  ( @xmath59 ) in section  [ sec : primal_alg ] .",
    "besides , in the proof of the primal integrality ( with @xmath56 even ) in section  [ sec : prim_h_int ] , we will deal with a modified bd - graph .",
    "it is obtained from @xmath149 as above by replicating each gadget @xmath166 into @xmath174 copies @xmath200 , @xmath201 , called the _ 1-gadgets _ generated by @xmath168 . more precisely , to construct @xmath200 , we make @xmath202-th copy @xmath203 of the node @xmath169 ,  @xmath202-th copy @xmath204 of the loop @xmath171 leaving @xmath203 ( twice ) , and @xmath202-th copy @xmath205 of each leg @xmath173 , @xmath110 , where @xmath205 goes from @xmath170 to @xmath203 ( so @xmath170 , @xmath110 , are the common nodes of the created 1-gadgets ) .",
    "all edges in these 1-gadgets are endowed with _",
    "unit _ capacities .",
    "we keep notation @xmath149 for the constructed graph and call it the _ expensive _ bd - graph related to @xmath116 .",
    "also we keep notation @xmath56 for the edge capacities in @xmath149 .",
    "there is a natural relationship between the @xmath65@xmath65 walks ( paths ) in both versions of @xmath149 .",
    "the 1-gadgets created from the same central node @xmath168 of @xmath116 are isomorphic , and for any @xmath206 , there is an automorphism of @xmath149 which swaps @xmath203 and @xmath207 and is invariant on the other nodes .",
    "let @xmath208 be a bidirected graph .",
    "like in usual digraphs , @xmath209 and @xmath210 denote the sets of edges in @xmath208 entering and leaving @xmath211 , respectively . a loop @xmath23 at @xmath10 , if any , is counted twice in @xmath209 if @xmath23 enters @xmath10 , and twice in @xmath210 if @xmath23 leaves @xmath10 ; hence @xmath209 and @xmath210 are actually multisets .",
    "( recall that we do not allow a loop which simultaneously enters and leaves a node . )",
    "let @xmath65 be a distinguished node with @xmath212 in  @xmath208 ( the _ source _ ) and let the edges of  @xmath208 have integer capacities @xmath213 .",
    "bidirected @xmath65-flow _ , or a _ bd - flow _ for short , is a function @xmath214 satisfying @xmath215 for all nodes @xmath216 ; and the _ value _ of @xmath217 is defined to be @xmath218 ( cf .",
    "@xcite ) . here",
    "@xmath219 is the _ divergence _ of @xmath217 at @xmath10 .",
    "note that if @xmath23 is a loop at @xmath10 then @xmath23 contributes @xmath220 in @xmath221 .",
    "if @xmath222 for all @xmath223 then @xmath217 is called _ feasible_. in addition , if @xmath217 is integer - valued on all edges then we refer to @xmath217 as an integer bidirected @xmath65-flow , or an _ ibd - flow_. one can see that finding a fractional ( resp .",
    "integer ) bd - flow of the maximum value is equivalent to constructing a maximum fractional ( resp .",
    "integer ) packing of closed @xmath65@xmath65 walks ( they leave @xmath65 twice ) .",
    "return to an optimal solution @xmath75 to ( @xmath71 ) , and let @xmath224 . consider the ( expensive or compact ) bd - graph @xmath149 related to @xmath116 , and the capacity function @xmath56 on the edges of @xmath149 ( constructed from the node capacities @xmath56 of @xmath5 ) .",
    "the above correspondence between @xmath91-geodesics in @xmath5 and @xmath65@xmath65 paths in @xmath149 is extended to @xmath91-geodesic multiflows in @xmath5 and certain @xmath65-flows in @xmath149 ( where @xmath65 is the source in @xmath149 as before ) .",
    "more precisely , let @xmath7 be a ( fractional ) @xmath91-geodesic multiflow in @xmath5 represented by a collection of @xmath91-geodesics @xmath37 and weights @xmath225 , @xmath226 ( cf .",
    "( [ eq : mf_coll ] ) ) .",
    "then each @xmath37 determines a @xmath65@xmath65 path @xmath227 in @xmath149 , and @xmath228 is a bd - flow in @xmath149 ; we say that @xmath217 is _ generated _ by @xmath7 ( note that @xmath229 ) .",
    "furthermore , @xmath217 is feasible if @xmath7 is such , and for each central node @xmath230 , the following relations hold : @xmath231    considering an arbitrary bd - flow @xmath217 in @xmath149 , we say that @xmath217 is _ good _ if it satisfies  ( [ eq : good ] ) for all @xmath230 ( here the second relation in  ( [ eq : good ] ) is important , while the first one obviously holds for any bd - flow ) .",
    "the following assertion is of use .",
    "[ lm : f - f ] let @xmath217 be a good bd - flow in @xmath149",
    ". then @xmath217 is generated by an @xmath91-geodesic multiflow @xmath7 in @xmath5 .",
    "moreover , if @xmath217 is integral , then it is generated by an integer @xmath91-geodesic multiflow @xmath7 . in both cases , @xmath7 can be found in @xmath232 time .",
    "suppose there is a central node @xmath230 such that @xmath233 .",
    "let us say that @xmath234 _ dominates _ at @xmath168 ( w.r.t .",
    "@xmath217 ) if @xmath235 .",
    "from  ( [ eq : good ] ) it follows that there exist distinct @xmath236 such that @xmath237 and none of @xmath238 dominates at @xmath168 .",
    "choose such @xmath239 .",
    "build in @xmath149 a maximal walk @xmath190 starting with @xmath240 and such that @xmath241 for all edges @xmath23 of @xmath190 .",
    "it is easily seen from the construction of @xmath149 that @xmath190 is edge - simple , terminates at @xmath65 , and have all vertices in @xmath193 , except for @xmath242 .",
    "build a similar walk ( path ) @xmath197 starting with @xmath243 .",
    "then the concatenation of the reverse to @xmath190 , the loop @xmath171 and the path @xmath197 is a @xmath65@xmath65 path and its image @xmath8 in @xmath5 is an @xmath91-geodesic ( from @xmath132 to @xmath133 ) .",
    "assign the weight of @xmath8 to be the maximum number @xmath244 subject to two conditions : ( i ) @xmath245 for each @xmath246 , and ( ii ) the flow @xmath247 is still good . if @xmath244 is determined by  ( i )",
    ", we have @xmath248 ( where @xmath249 ) , whereas if @xmath244 is determined by  ( ii ) , there appears @xmath234 dominating at @xmath168 ( w.r.t .",
    "@xmath250 ) . if @xmath251 , repeat the procedure for @xmath250 and @xmath168 , otherwise apply the procedure to @xmath250 and another @xmath252 , and so on .",
    "( note that if , in the process of handling @xmath168 , a current weight @xmath244 is determined by  ( ii ) , then the weights of all subsequent paths through @xmath171 are already determined by  ( i ) ; this will provide the desired complexity . )",
    "eventually , we come to a good flow @xmath253 with @xmath254 for all @xmath230 . this @xmath253 is decomposed into a sum of flows along @xmath65@xmath65 paths in a straightforward way , in @xmath232 time ( like for usual flows in digraphs ) .",
    "taking together the images in @xmath5 of the constructed weighted @xmath65@xmath65 paths , we obtain a required @xmath91-geodesic multiflow @xmath7 .",
    "the running time of the whole process is @xmath232 , and if @xmath217 is integral , then the weights @xmath244 of all paths are integral as well .",
    "( integrality of a current weight @xmath244 subject to integrality of a current flow @xmath217 is obvious when @xmath244 is determined by  ( i ) , and follows from the fact , implied by  ( [ eq : good ] ) , that for any @xmath234 ,  @xmath255 is even , when @xmath244 is determined by  ( ii ) . )",
    "[ rem : compact_vs_expensive ] in case of an expensive bd - graph @xmath149 , any feasible ibd - flow @xmath217 is good . indeed , for any 1-gadget @xmath200 in @xmath149",
    ", we have @xmath256 and , therefore , @xmath257 . the second relation in  ( [ eq : good ] )",
    "is trivial when @xmath258 , and follows from the constraints @xmath259 ( @xmath110 ) when @xmath260 .",
    "define the following subset of edges in @xmath149 : @xmath261 for an optimal ( possibly fractional ) solution @xmath7 to  ( @xmath59 ) and a node @xmath4 with @xmath262 , we have @xmath99 ( by ( [ eq : cs_saturated ] ) ) ; so the edge @xmath153 of @xmath149 corresponding to @xmath10 is saturated by the bd - flow @xmath217 generated by @xmath7 , i.e. @xmath263 .",
    "we call the edges in @xmath264 _ locked_.    thus , the graph @xmath149 admits a ( fractional ) good feasible bd - flow saturating the locked edges .",
    "the following strengthening is crucial .",
    "[ prop : aux_bidir_flow ] there exists a good feasible ibd - flow in @xmath149 that saturates all locked edges .",
    "a proof of this proposition involves an additional graph - theoretic machinery and will be given in section  [ sec : prim_h_int ] .",
    "assuming its validity , we immediately obtain theorem  [ th : primal_halfint ] from lemma  [ lm : f - f ] .",
    "in this section we devise a strongly polynomial algorithm for solving the primal parametric problem  ( @xmath59 ) . as before",
    ", we assume that @xmath11 and @xmath64 are integral and that the node capacities @xmath56 are even , so our goal is to find an integer optimal multiflow .",
    "the algorithm starts with computing a ( fractional ) optimal dual solution @xmath75 and constructing the bd - graph @xmath149 w.r.t .",
    "the length function @xmath265 .",
    "then it finds a good ibd - flow @xmath217 in @xmath149 saturating the locked edges ( assuming validity of proposition  [ prop : aux_bidir_flow ] ) . applying the efficient procedure as in the proof of lemma  [ lm : f - f ] to decompose @xmath217 into a collection of paths with integer weights , we will obtain an integer optimal solution to  ( @xmath59 ) .    to provide the desired complexity",
    ", we shall work with @xmath149 given in the _ compact _ form ( defined in subsection  [ ssec : aux_graph ] ) .",
    "the core of our method consists in finding the load function of some integer optimal multiflow @xmath7 in @xmath5 ( without explicitly computing @xmath7 itself ) .",
    "this function will just generate the desired ibd - flow in @xmath149 .",
    "we describe the stages of the algorithm in the subsections below .",
    "problem ( @xmath71 ) straightforwardly reduces to a `` compact '' linear program , as follows . besides variables @xmath266 ( @xmath4 ) , assign a variable @xmath267 to each terminal @xmath106 and node @xmath10 ( a sort of `` distance '' of @xmath10 from @xmath132 ) .",
    "consider the following problem ( where @xmath268 and @xmath269 are defined according to  ( [ eq : wbar ] ) ) :    [ eq : compact_dualpprob ] minimize @xmath72 subject to the following constraints : @xmath270    programs  ( @xmath71 ) and  ( [ eq : compact_dualpprob ] ) are equivalent .    indeed ,",
    "if @xmath271 is a feasible solution to ( [ eq : compact_dualpprob ] ) then , obviously , @xmath75 is a feasible solution to  ( @xmath71 ) .",
    "conversely , let @xmath75 be a feasible solution to  ( @xmath71 ) . for @xmath4 and @xmath110 ,",
    "define @xmath272 , where @xmath134 .",
    "it is easy to check that @xmath271 is a feasible solution to ( [ eq : compact_dualpprob ] ) .",
    "the size of the constraint matrix in ( [ eq : compact_dualpprob ] ) ( written in binary notation ) is polynomial in @xmath273 .",
    "therefore , ( @xmath71 ) is solvable in strongly polynomial time by use of tardos s version of the ellipsoid method .",
    "( this remains valid when @xmath11 and @xmath64 are nonnegative rational numbers . )      the following fact is of importance .",
    "[ lm : node_load ] one can find , in strongly polynomial time , a function @xmath274 such that @xmath275 for all @xmath45 , where @xmath7 is some integer optimal multiflow in  ( @xmath59 ) .",
    "we explain that in order to construct the desired @xmath276 , it suffices to compare two optimal objective values : one for the original ( integer ) costs @xmath11 and the other for certain perturbed costs @xmath277 .",
    "these values are computed by solving the corresponding dual problems by the method described in the previous subsection .",
    "more precisely , let @xmath278 be the nodes of @xmath5 .",
    "let @xmath279 , define @xmath280 , @xmath281 , and define the cost function @xmath277 on @xmath24 to be @xmath282 .",
    "then for any integer feasible multiflow @xmath7 , we have @xmath283 this and the fact that @xmath284 is an integer ( as @xmath285 are integral ) imply that if @xmath7 is optimal for @xmath277 , then @xmath7 is optimal for @xmath11 as well .",
    "( an integer optimal multiflow for even capacities @xmath56 exists by theorem  [ th : primal_halfint ] . ) moreover , for such an optimal @xmath7 , the number @xmath286 is computed in strongly polynomial time , since it is equal to @xmath287 , where @xmath75 and @xmath288 are optimal dual solutions for @xmath11 and @xmath277 , respectively . here",
    "we use the lp duality equalities @xmath289 and @xmath290 .",
    "also the size of binary encoding of @xmath277 is bounded by that of @xmath11 times a polynomial in @xmath291 , so the dual problem with @xmath277 is solved in strongly polynomial time w.r.t . the original data .",
    "hence , we have @xmath292 .",
    "the number @xmath293 is an integer and , in view of @xmath294 for each @xmath202 , the @xmath291 coefficients in its base @xmath295 decomposition ( the representation via degrees of @xmath295 ) are just @xmath296 , thus giving  @xmath276 .    recall that together with a node load function each multiflow @xmath7 also induces its edge counterpart ( see  ( [ eq : edge_load ] ) ) .",
    "lemma  [ lm : node_load ] can be strengthened as follows .",
    "[ lm : full_load ] one can find , in strongly polynomial time , a function @xmath297 such that @xmath275 for all @xmath45 and @xmath298 for all @xmath299 , where @xmath7 is some integer optimal multiflow @xmath7 in  ( @xmath59 ) .    split each edge @xmath300 of @xmath5 into two edges @xmath301 in series and assign to each new node @xmath302 the capacity @xmath303 and the cost @xmath304 .",
    "clearly this transformation does not affect the problem in essence .",
    "the node load function , which can be found in strongly polynomial time by lemma  [ lm : node_load ] , yields the desired node and edge load functions in the original graph  @xmath5 .",
    "now we explain how to find , in strongly polynomial time , an integer optimal multiflow solving  ( @xmath59 ) ( for a graph  @xmath5 , even node capacites  @xmath56 , rational node costs @xmath11 , and an integer parameter  @xmath64 ) by using an optimal dual solution @xmath75 and a function @xmath276 as in lemma  [ lm : full_load ] . for this @xmath276",
    ", there exists an integer @xmath91-geodesic multiflow @xmath305 in @xmath5 satisfying @xmath306 for all @xmath45 and @xmath307 for all @xmath299 , where @xmath308 .",
    "our goal is to construct one of such multiflows explicitly .    to do this , we consider the _ compact _",
    "bd - graph @xmath149 related to @xmath116 ( see subsection  [ ssec : aux_graph ] ) and put @xmath217 to be the function on @xmath309 corresponding to @xmath276 .",
    "more precisely , let @xmath310 be the subset of edges of @xmath149 neither incident to @xmath65 nor contained in the gadgets @xmath166 ( @xmath122 ) . by the construction of @xmath149 , there is a natural bijection @xmath311 of @xmath310 to the set @xmath312 .",
    "for each @xmath313 , we set @xmath314 . in their turn , the values of @xmath217 on the edges of a gadget @xmath166 are assigned as follows : for the loop @xmath171 at @xmath169 , set @xmath315 , and for each @xmath110 , set @xmath316 , where @xmath317 is the set of edges in @xmath116 connecting @xmath109 and @xmath168 . finally , for each @xmath110 , we set @xmath318 .",
    "using the fact that the function @xmath276 on @xmath319 is determined by some integer optimal ( @xmath91-geodesic ) multiflow @xmath305 , it follows that the obtained function @xmath217 on @xmath309 is integer - valued and has zero divergency at all nodes different from @xmath65 .",
    "so @xmath217 is an ibd - flow in @xmath149 .",
    "moreover , @xmath217 is generated by @xmath305 as above ; in particular , @xmath217 is good ( i.e. satisfies  ( [ eq : good ] ) ) .",
    "by lemma  [ lm : f - f ] , we can find , in strongly polynomial time , an integer @xmath91-geodesic multiflow @xmath7 generating  @xmath217 .",
    "then @xmath7 and @xmath305 have the coinciding node and edge load functions , and the optimality of @xmath305 implies that @xmath7 is an integer optimal solution to  ( @xmath59 ) as well , as required .",
    "to complete the proof of theorem  [ th : primal_halfint ] it remains to prove proposition  [ prop : aux_bidir_flow ] , which claims the existence of an ibd - flow saturating the `` locked '' edges .",
    "we eliminate the lower capacity constraints ( induced by the locked edges ) by reducing the claim to the existence of an ibd - flow with a certain prescribed value .",
    "let @xmath208 be a bidirected graph with a distinguished source  @xmath65 and edge capacities @xmath320 , as described in subsection  [ ssec : bidir_flows ] .",
    "the classic max - flow min - cut theorem states that the maximum flow value is equal to the minimum cut capacity .",
    "a bidirected version of this theorem involves a somewhat more complicated object , called an _",
    "odd barrier_. in this subsection we give its definition and state the crucial properties ( in theorems  [ th : max_ibd_flow_min_odd_barrier],[th : bd_residual],[th : bd_barrier_from_flow ] ) that will be used in the upcoming proof of proposition  [ prop : aux_bidir_flow ] .",
    "these properties are nothing else than translations , to the language of bidirected graphs , of corresponding properties established for integer symmetric flows in skew - symmetric graphs , as we will explain in the appendix .",
    "let @xmath321 .",
    "the _ flip _ at ( the nodes of ) @xmath22 modifies @xmath208 as follows : for each node @xmath322 and each edge @xmath23 incident to @xmath10 , we reverse the direction of @xmath23 at @xmath10 ( while preserving the directions of edges at nodes in @xmath323 ) .",
    "for example , if @xmath324 and @xmath325 then @xmath23 becomes @xmath144 , and if @xmath326 and @xmath327 then @xmath23 becomes @xmath328 .",
    "bd - graphs @xmath208 and @xmath329 are called _ equivalent _ if one is obtained by a flip from the other .",
    "note that flips do not affect bidirected walks in @xmath208 in essence and do not change the maximum value of an ibd - flow in it .",
    "we will essentially use flips to simplify requirements in the definition of odd barriers below .",
    "next , we employ a special notation to designate certain subsets of edges . for @xmath330 ,",
    "let @xmath331 $ ] denote the set of edges with one endpoint in @xmath22 and the other in @xmath332 .",
    "we will often add arrows above @xmath22 and/or @xmath332 to indicate the subset of edges in @xmath331 $ ] directed in one or another way .",
    "for example , @xmath333 $ ] denotes the set of edges that enter both @xmath22 and @xmath332 ,  @xmath334 $ ] denotes the set of edges leaving @xmath22 and having the other endpoint in  @xmath332 ( where the direction is arbitrary ) , and @xmath335 $ ] denotes the set of edges that leave @xmath22 at both endpoints ( including twice leaving loops ) .",
    "when @xmath336 , the second term in the brackets may be omitted : @xmath337 $ ] , @xmath338 $ ] , and @xmath339 $ ] stand for @xmath340 $ ] , @xmath341 $ ] , and @xmath342 $ ] , respectively .",
    "finally , for a function @xmath343 on the edges , we write @xmath344 $ ] ( rather than @xmath345)$ ] ) for @xmath346 } { \\varphi}(e)$ ] .    ) . ]",
    "a tuple @xmath347 , where @xmath329 is some bd - graph equivalent to @xmath208 , is called an _",
    "odd barrier _ for @xmath208 if the following conditions hold with respect to @xmath329 ( see  fig .",
    "[ fig : bd_barrier ] ) :    [ eq : bd_odd_barrier ]    * @xmath348 give a partition of @xmath349 , and @xmath350 .",
    "* for each @xmath351 ,  @xmath352 $ ] is odd . * for distinct @xmath353 ,  @xmath354 = 0 $ ] .",
    "* for each @xmath351 ,  @xmath355= 0 $ ] .",
    "the _ capacity _ of @xmath356 is defined to be @xmath357 + c[{\\overrightarrow{a } } ] - k.\\ ] ]    [ th : max_ibd_flow_min_odd_barrier ] for @xmath358 as above , the maximum ibd - flow value is equal to the minimum odd barrier capacity . a ( feasible ) ibd - flow  @xmath276 and an odd barrier @xmath359 for @xmath208 have maximum value and minimum capacity , respectively , if and only if the following conditions hold with respect to @xmath329 :    * @xmath360 = c[{\\overrightarrow{a } } , { \\overleftarrow}a]$ ] and @xmath361 = 0 $ ] ; * @xmath362 = c[{\\overrightarrow{a}},m]$ ] and @xmath363 = 0 $ ] ; * for each @xmath351 , either @xmath364 = c[{\\overrightarrow{a}},b_i ] - 1 $ ] and @xmath365 = 0 $ ] , or @xmath364 = c[{\\overrightarrow{a}},b_i]$ ] and @xmath366 = 1 $ ] .    note that there may exist many minimum capacity odd barriers for @xmath367 .",
    "it is well - known that in a usual edge - capacitated digraph with a source @xmath132 and a sink @xmath133 , the set of nodes reachable by paths from @xmath132 in the residual digraph of a maximum @xmath132@xmath133 flow @xmath217 determines a minimum capacity @xmath132@xmath133 cut .",
    "moreover , this minimum cut does not depend on the choice of @xmath217 and , therefore , may be regarded as the _ canonical _ one .",
    "a similar phenomenon takes place for maximum ibd - flows and minimum odd barriers ( and we will essentially use this in the proof of proposition  [ prop : aux_bidir_flow ] ) . to describe this ,",
    "consider an ibd - flow @xmath276 in @xmath208 .",
    "the _ residual _ bd - graph @xmath368 endowed with the _ residual _",
    "capacity @xmath369 is constructed in a similar way as for usual flows .",
    "more precisely , @xmath370 and the edges of @xmath368 are as follows :    [ eq : residual_edges ]    * each edge @xmath371 with @xmath372 whose residual capacity is defined to be @xmath373 , and * the _ reverse _ edge @xmath374 to each edge @xmath371 with @xmath375 ; the directions of @xmath374 at the endpoints are reverse to those of  @xmath23 and the residual capacity is @xmath376 .",
    "a bidirected walk @xmath8 in @xmath368 is called _ @xmath377-simple _ if @xmath8 passes each edge @xmath23 at most @xmath378 times .",
    "if @xmath8 is a @xmath377-simple closed @xmath65@xmath65 walk leaving its end @xmath65 twice , we can increase the value of @xmath276 in @xmath208 by  2 , by sending one unit of flow along  @xmath8 .",
    "so the existence ( in @xmath368 ) of such a walk @xmath8 , which is called _",
    "@xmath379-residual _ , implies that @xmath276 is not maximum .",
    "a converse property holds as well .",
    "[ th : bd_residual ] an ibd - flow @xmath276 in @xmath208 is maximum if and only if there is no @xmath379-residual walk .    when we are given a maximum ibd - flow @xmath276 , a certain minimum odd barrier can be constructed by considering the residual graph @xmath368 .",
    "namely , let @xmath380 ( resp .",
    "@xmath381 ) be the set of nodes @xmath10 that are reachable by a @xmath379-residual @xmath65@xmath10 walk that leaves @xmath65 and enters  @xmath10 ( resp . leaves both @xmath65 and @xmath10 ) .",
    "then @xmath382 , by the maximality of  @xmath276 .",
    "[ th : bd_barrier_from_flow ] let @xmath276 be a maximum ibd - flow for @xmath383 . define @xmath384 and @xmath385 , where @xmath386 and @xmath387 .",
    "let @xmath388 be the node sets of weakly connected components of the underlying undirected subgraph of @xmath368 induced by @xmath389 .",
    "define @xmath329 to be the bd - graph obtained from @xmath208 by flipping the set @xmath390 ( contained in @xmath16 ) .",
    "then @xmath391 is a minimum odd barrier .",
    "an important fact is that the minimum odd barrier @xmath392 does not depend on @xmath276 , and we refer to it as the _ canonical _ odd barrier for @xmath383 .",
    "[ th : canon_bd_barrier ] the sets @xmath381 are same for all maximum ibd - flows @xmath276 in @xmath208 , and similarly for the sets @xmath380 , the minimum odd barriers @xmath392 , and the graphs @xmath329 obtained from @xmath208 by flipping @xmath393 .      in fact",
    ", we have freedom of choosing any of the two forms ( expensive or compact ) of  @xmath149 to prove proposition  [ prop : aux_bidir_flow ] in full , as it is easy to see that the claims in these cases are reduced to each other .",
    "we prefer to deal with the expensive form , taking advantage from certain nice structural features arising in this case .",
    "one reason for our choice is that any ibd - flow in the expensive @xmath149 is automatically good , as explained in remark  [ rem : compact_vs_expensive ] .",
    "we know that there exists a good fractional bidirected @xmath65-flow @xmath217 in @xmath149 that saturates the set @xmath264 of locked edges , and our goal is to show the existence of an ibd - flow saturating @xmath264 . recall that any edge @xmath394 is generated by some node @xmath10 of @xmath5 , i.e. @xmath395",
    ".    it will be convenient for us to construct the desired ibd - flow without explicitly imposing the `` lower capacities '' on the locked edges .",
    "for this purpose , we modify @xmath149 as follows .",
    "first , we add a loop @xmath396 with infinite capacity ( entering @xmath65 twice ) .",
    "also we add to @xmath149 a node @xmath397 , which is regarded as a new source .",
    "second , let @xmath264 contain an edge @xmath398 generated by a vertex @xmath399 in some zone @xmath109 , @xmath106 .",
    "we delete @xmath153 from @xmath149 and , instead , add two edges @xmath400 and @xmath401 with capacity @xmath2 each .",
    "third , let @xmath264 contain the loops @xmath204 ( @xmath201 ) for some central node @xmath168 of @xmath116 .",
    "we replace each @xmath204 ( having unit capacity ) by edge @xmath402 with capacity 2 ; we call it the _ root edge _ at @xmath203 .",
    "we denote the resulting bd - graph by @xmath403 and keep the previous notation @xmath56 for its edge capacities .",
    "the above @xmath65-flow @xmath217 is transformed , in an obvious way , into a feasible @xmath397-flow in @xmath403 , denoted by @xmath217 as before .",
    "note that this @xmath217 saturates all edges created from those in @xmath264 ( i.e. from @xmath153 and @xmath204 as above ) ; these edges leave @xmath397 and the value of @xmath217 is maximum among the feasible @xmath397-flows in @xmath403 and is equal to @xmath404 .",
    "let @xmath276 be a maximum ibd - flow in @xmath403 .",
    "we are going to prove that @xmath405 .",
    "this would imply that the corresponding ibd - flow in @xmath149 saturates @xmath264 as required . to this aim , consider the _ canonical _",
    "odd barrier @xmath406 for @xmath407 ( see theorem  [ th : canon_bd_barrier ] ) . here",
    "@xmath408 is the bd - graph ( with the source @xmath397 ) obtained from @xmath403 according to theorem  [ th : bd_barrier_from_flow ] ( i.e. @xmath409 for @xmath410 ) . from now on , speaking of edge directions , the capacities @xmath56 and the flow @xmath276 , we mean those in @xmath408 , unless explicitly stated otherwise .",
    "we have ( cf .",
    "( [ eq : barrier_cap ] ) ) @xmath411 + c[{\\overrightarrow{a } } ] - k.\\ ] ]    the following assertion is crucial .",
    "[ lm : b_sets ] for each @xmath412 :    * @xmath413 for some @xmath230 and @xmath414 ; * @xmath204 is not locked ( so @xmath403 contains the loop @xmath204 but not the root edge at @xmath203 ) ; * among the edges ( legs ) connecting @xmath16 and @xmath415 , one edge leaves  @xmath16 and the other edges enter  @xmath16 .",
    "by the constructions of @xmath149 and @xmath403 , for any @xmath230 and distinct @xmath416 , there is an automorphism @xmath417 of @xmath403 that swaps @xmath203 and @xmath207 and is invariant on the other nodes .",
    "also @xmath131 respects the capacities in @xmath403 , and the function @xmath418 induced by @xmath276 under @xmath131 ( i.e. @xmath419 ) is again a maximum ibd - flow in @xmath403 .",
    "since @xmath356 is canonical , it follows from  theorem  [ th : canon_bd_barrier ] that @xmath420 the nodes in @xmath421 are _ flipped _ when constructing  @xmath408 from @xmath403 . then ( [ eq : r_preserved ] ) and theorem  [ th : bd_barrier_from_flow ] imply that for @xmath422 as above ,    [ eq : theta_preserved ]    * @xmath203 is flipped if and only if @xmath207 is flipped ; * @xmath423 if and only if @xmath424 . *",
    "@xmath425 if and only if @xmath426 .",
    "let @xmath427 .",
    "since the capacity @xmath428 $ ] ( in @xmath408 ) is odd , the set @xmath429 $ ] contains an edge  @xmath23 with @xmath430 odd .",
    "any edge in @xmath408 having an odd capacity is either a loop @xmath204 or a leg @xmath205 ( regarding `` infinite '' capacities as even ones ) .",
    "obviously , no loop can be `` responsible '' for the oddness of @xmath428 $ ] .",
    "so @xmath431 for some @xmath230 , @xmath432 and @xmath110 .",
    "let @xmath433 denote the edge of @xmath403 corresponding to @xmath23 .",
    "then ( see  fig .",
    "[ fig : aux_graph](b ) ) @xmath433 leaves @xmath170 and enters @xmath203 . due to flips",
    ", however , this may not be the case for @xmath23 in @xmath408 .",
    "suppose @xmath434 ( and @xmath435 ) .",
    "then @xmath23 leaves @xmath203 , whence @xmath203 is a flipped node in @xmath16 .",
    "now ( [ eq : theta_preserved])(a , b ) imply that all @xmath207 are flipped nodes belonging to @xmath16 and that @xmath436 $ ] for all @xmath437 .",
    "but then @xmath23 can not be `` responsible '' for the oddness of @xmath438 $ ] since @xmath174 is even .",
    "so we have @xmath439 and @xmath440 .",
    "then @xmath23 leaves @xmath170 .",
    "the edge @xmath433 leaves @xmath170 as well .",
    "hence @xmath170 is not flipped .",
    "since @xmath174 is even , there must be @xmath441 such that the leg @xmath442 is not in @xmath429 $ ] ( for otherwise one may pick another pair @xmath443 ) .",
    "then @xmath207 is not in @xmath415 . in view of  ( [ eq : theta_preserved])(c )",
    ", @xmath207 belongs to a @xmath444-set in @xmath356 different from @xmath415 . considering the automorphisms @xmath445 for all distinct @xmath446 and using the fact that the canonical barrier @xmath356 preserves under @xmath131 ( in view of  ( [ eq : r_preserved ] ) )",
    ", we can conclude that the nodes @xmath447 belong to different @xmath444-sets in @xmath356 .",
    "since these @xmath444-sets are pairwise disjoint and each automorphism @xmath131 swaps two copies of @xmath448 and do not move the remaining nodes in @xmath408 , each of these @xmath444-sets can contain only a single node .",
    "thus , @xmath413 , yielding  ( i ) in the lemma .    next we show ( ii ) . from the construction of @xmath408 it follows that @xmath449 by the first equality , any @xmath450-residual walk ending at a node @xmath451 enters @xmath10 , and by the second equality , there exist an @xmath450-residual walk @xmath8 to @xmath452 that enters @xmath453 and an @xmath450-residual walk @xmath190 to @xmath453 that leaves @xmath453 . recall that the residual walks leave the source @xmath397 .",
    "let @xmath454 be the last edge of @xmath8 , and @xmath455 the last edge of @xmath190 .",
    "define @xmath310 ( @xmath456 ) to be the set of legs @xmath457 with @xmath458 ( resp .",
    "@xmath459 ) . note that ( cf .",
    "( [ eq : residual_edges ] ) )    if @xmath313 then @xmath460 and @xmath23 enters @xmath453 in @xmath461 , and if @xmath462 then @xmath463 and @xmath374 leaves @xmath453 in @xmath461 .",
    "[ eq : epepp ]    supposing the existence of the root edge @xmath464 ( in @xmath403 and @xmath408 ) , we can come to a contradiction as follows . since there is no loop at @xmath453 , both nodes @xmath143 are in @xmath16 .",
    "note that the edge @xmath11 is different from @xmath465 ( which leaves @xmath453 ) and from @xmath466 ( which enters @xmath397 ) .",
    "then  ( [ eq : epepp ] ) implies that @xmath467 .",
    "furthermore , @xmath11 is of the form @xmath468 . for",
    "if @xmath11 enters @xmath92 then the edge of @xmath8 preceding @xmath11 leaves @xmath92 , whence the part of @xmath8 from @xmath397 to @xmath92 forms an @xmath450-residual walk leaving @xmath92 , which is impossible since @xmath469 .",
    "so @xmath470 $ ] and @xmath471 . then @xmath472=0 $ ] , by theorem  [ th : max_ibd_flow_min_odd_barrier](iii ) .",
    "this implies that @xmath473 $ ] .",
    "but then the last edge @xmath474 of the walk @xmath190 as above can not be reverse to any edge in @xmath456 ; for otherwise @xmath475 enters @xmath10 , implying that the part of @xmath190 from @xmath397 to @xmath10 leaves @xmath10 .",
    "also @xmath475 is neither reverse to an edge in @xmath310 ( cf .",
    "( [ eq : epepp ] ) ) , nor equal to @xmath465 .",
    "the latter is because @xmath476 $ ] , and therefore , @xmath477 implies @xmath478 ( cf .",
    "theorem  [ th : max_ibd_flow_min_odd_barrier](iii ) ) , whence @xmath479 .",
    "thus , @xmath190 does not exist .",
    "this contradiction yields  ( ii ) .",
    "it remains to show ( iii ) . by  ( ii )",
    ", we have @xmath480 , and @xmath481 $ ] is exactly the set of legs at @xmath452 .",
    "suppose @xmath482|\\ne 1 $ ] .",
    "then @xmath483 , since @xmath484=d$ ] is odd .",
    "hence @xmath485\\ge d-1\\ge 2 $ ] ( by theorem  [ th : max_ibd_flow_min_odd_barrier](iii ) ) .",
    "also the fact that all legs enter @xmath453 together with @xmath486 and @xmath487 implies that the only possible case is when @xmath488 , @xmath485=2 $ ] and @xmath472=0 $ ] .",
    "now take an @xmath450-residual walk @xmath190 to @xmath453 that leaves @xmath453 , and let @xmath475 be its last edge .",
    "then @xmath475 is neither the loop @xmath204 ( which is saturated ) , nor reverse to a leg @xmath489 with @xmath490 . indeed ,",
    "if @xmath491 then @xmath475 enters @xmath10 ( in view of @xmath451 and @xmath492 $ ] ) , and hence the part of @xmath190 from @xmath397 to @xmath10 leaves @xmath10 , which is impossible since @xmath451 .",
    "this contradiction yields  ( iii ) and completes the proof of the lemma .",
    "based on lemma  [ lm : b_sets ] , we now finish the proof of proposition  [ prop : aux_bidir_flow ] .",
    "consider @xmath413 and let @xmath205 be the unique edge in @xmath429 $ ] .",
    "then @xmath493 = { \\ { e_{w^i , t } \\mid t\\in t-\\{s\\ } \\}}$ ] .",
    "consider the maximum fractional bd - flow @xmath217 as before . by the goodness of @xmath217 ( see ( [ eq : good ] ) ) , we have @xmath494 - f[{\\overleftarrow}a , b_p ] = f(e_{w^i , s } ) -                       \\sum\\nolimits_{t\\in t-\\{s\\ } } f(e_{w^i , t } ) \\\\",
    "= f(e_{w^i , s } ) - \\left ( 2f(e_{w^i } ) - f(e_{w^i , s } ) \\right ) =    2 \\left ( f(e_{w^i , s } ) - f(e_{w^i } ) \\right )   \\le 0 = c[{\\overrightarrow{a } } , b_p ] - 1",
    ".    \\end{gathered}\\ ] ]    using this and ( [ eq : val_g ] ) , we have @xmath495 - 2f[{\\overleftarrow}a , { \\overrightarrow{a } } ] \\right ) +                  \\left ( f[{\\overrightarrow{a } } ] - f[{\\overleftarrow}a ] \\right ) \\\\ = \\left ( 2f[{\\overrightarrow{a } } , { \\overleftarrow}a ] - 2f[{\\overleftarrow}a , { \\overrightarrow{a } } ] \\right ) +            \\left ( f[{\\overrightarrow{a}},m ] - f[{\\overleftarrow}a , m ] \\right ) +           \\sum\\nolimits_{p=1}^k \\left ( f[{\\overrightarrow{a } } , b_p ] - f[{\\overleftarrow}a , b_p ] \\right ) \\\\",
    "\\le 2c[{\\overrightarrow{a } } , { \\overleftarrow}a ] + c[{\\overrightarrow{a } } , m ] + \\sum\\nolimits_{p=1}^k \\left ( c[{\\overrightarrow{a}},b_p ] - 1 \\right )           = c[{\\overrightarrow{a } } ] + 2c[{\\overrightarrow{a } } , { \\overleftarrow}a ] - k = c({\\mathcal{b } } ) = { \\mathop{\\rm val}\\nolimits ( g ) } .",
    "\\end{gathered}\\ ] ] thus , we obtain the desired relation @xmath496 ( which , in fact , holds with equality ) .",
    "this completes the proof of proposition  [ prop : aux_bidir_flow ] .",
    "[ th : dual_halfint ] let @xmath497 and @xmath498",
    ". then problem ( @xmath71 ) has a half - integer optimal solution .",
    "the proof follows easily from theorem  [ th : primal_halfint ] and the general fact that the `` totally dual @xmath499-integrality '' implies the `` totally primal @xmath499-integrality '' , which is a natural generalization of a well - known result on tdi - systems due to edmonds and giles  @xcite .",
    "more precisely , we utilize the following simple fact ( see , e.g. , ( * ? ? ?",
    "* statement 1.1 ) ) :    [ lm : dual - primal ] let @xmath16 be a nonnegative @xmath500-matrix , @xmath475 an integral @xmath36-vector , and @xmath501 a positive integer .",
    "suppose that the program @xmath502 has a @xmath499-integer optimal solution for every nonnegative integral @xmath291-vector @xmath56 such that @xmath503 has an optimal solution .",
    "then for every nonnegative integral @xmath291-vector @xmath56 , the program @xmath504 has a @xmath499-integer optimal solution whenever it has an optimal solution .    in our case",
    ", we set @xmath505 and take as @xmath16 ( resp .",
    "@xmath475 ) the constraint matrix ( resp . the right hand side vector ) of  ( @xmath71 ) .",
    "then @xmath475 is integral , @xmath503 becomes  ( @xmath59 ) , @xmath506 becomes  ( @xmath71 ) , and the half - integrality for the former implies that for the latter .",
    "this proof is not `` constructive '' and does not lead directly to an efficient method for finding a half - integer optimal solution @xmath75 to  ( @xmath71 ) .",
    "below we devise a strongly polynomial algorithm .",
    "it has as the input arbitrary ( rational - valued ) optimal solutions @xmath75 and @xmath7 to  ( @xmath71 ) and  ( @xmath59 ) , respectively , and outputs a half - integer optimal solution  @xmath507 to  ( @xmath71 ) .",
    "( such @xmath75 and @xmath7 can be found in strongly polynomial time as described in section  [ sec : primal_alg ] . )    as before , we set @xmath265 , and in what follows , speaking of a geodesic , we always mean an @xmath91-geodesic in @xmath5 , i.e. a @xmath6-path @xmath8 with @xmath508 . our goal is to construct @xmath509 satisfying the following conditions :    [ eq : hat_l ]    * @xmath510 for any @xmath6-path  @xmath8 in @xmath5 ; * @xmath511 for each geodesic  @xmath8 ; * for @xmath45 , if @xmath512 then @xmath513 .",
    "then  ( [ eq : hat_l ] ) and the complementary slackness conditions ( [ eq : cs_geodesic])([eq : cs_saturated ] ) imply that the node length @xmath507 forms an optimal solution to ( @xmath71 ) .",
    "we construct an undirected graph @xmath208 and endow it with _ edge _ lengths @xmath514 as follows .",
    "we first include in @xmath208 the terminal set @xmath6 and all nodes and edges of @xmath5 contained in geodesics .",
    "also we add to @xmath208 the edges of @xmath5 with both ends lying on geodesics or @xmath6 .",
    "the edges @xmath23 of the current @xmath208 are called _ regular _ and we define @xmath515 .    next we add to @xmath208 additional edges , which are related to constraints due to parts of @xmath5 outside @xmath208 .",
    "more precisely , we scan all pairs of nodes @xmath516 not connected by a ( regular ) edge and such that there exists a path  @xmath190 in @xmath5 having all nodes in @xmath517 and whose first node is adjacent to @xmath92 , and the last node to @xmath10 .",
    "we add to @xmath208 edge @xmath300 , referring to it as a _ virtual _ edge , and define its length @xmath518 to be the minimum value of @xmath519 among such paths @xmath190 .",
    "the construction of @xmath520 reduces to a polynomial number of usual shortest paths problems in @xmath5 .",
    "note that @xmath512 holds for each node @xmath521 ( by ( [ eq : cs_geodesic ] ) and ( [ eq : cs_saturated ] ) ) .",
    "we assign @xmath522 for these nodes @xmath10 and will further focus on finding values of @xmath507 on the nodes in @xmath208 .    for a path @xmath8 in @xmath208 ,",
    "let @xmath523 denote its _ full length _ @xmath524 .",
    "clearly @xmath525 holds for any @xmath6-path  @xmath8 in  @xmath208 , and for each @xmath6-path  @xmath190 in  @xmath5 , there exists a _ shortcut _",
    "path  @xmath8 in @xmath208 such that @xmath526 .",
    "the desired lengths @xmath507 on @xmath527 will be extracted from a system of linear constraints described below . for a node @xmath528 ,",
    "let @xmath529 ( @xmath530 ) denote the set of terminals @xmath106 ( resp .",
    "pairs @xmath236 ) such that @xmath10 belongs to a geodesic from @xmath132 ( resp .",
    "connecting @xmath132 and @xmath133 ) .",
    "when a terminal @xmath132 belongs to no geodesic , we set by definition @xmath531 . for each @xmath528 and @xmath532",
    ", we introduce two variables @xmath533 and @xmath534 and impose the following constraints :    [ eq : rho_system ]    * for each @xmath106 ,  @xmath535 .",
    "* for each @xmath528 and @xmath532 , @xmath536 * for each @xmath528 and @xmath537 ,  @xmath538 ( and @xmath539 ) .",
    "* if @xmath540 and @xmath541 , then @xmath542 moreover , if there exists a geodesic from @xmath132 containing both @xmath143 in this order ( resp .",
    "in the order @xmath543 ) , then the former ( resp .",
    "the latter ) inequality is replaced by equality .",
    "( note that in this case @xmath544 . ) * if @xmath540 , @xmath545 , @xmath546 , and @xmath120 , then @xmath547 .",
    "the meaning of these variables becomes evident from the proof of the next statement .",
    "system  ( [ eq : rho_system ] ) has a solution .    for a @xmath548@xmath65 path @xmath8 in @xmath208 ,",
    "define its _ pre - length _ to be @xmath549 ( i.e. compared with the full length , we do not count the last node ) . for @xmath528 and @xmath532 , define @xmath533 ( resp .",
    "@xmath534 ) to be the minimum pre - length ( resp .",
    "the minimum full length ) of an @xmath132@xmath10 path in  @xmath208",
    ". then  ( [ eq : rho_system])(i)(iii ) follow from the construction . condition  ( [ eq : rho_system])(iv ) represents a sort of triangle inequalities ( giving one equality if @xmath23 belongs to a geodesic from @xmath132 ) .",
    "finally , condition  ( [ eq : rho_system])(v ) holds since the full length of any @xmath132@xmath133 path in @xmath208 is at least @xmath64 .",
    "we observe that in linear system ( [ eq : rho_system ] ) , each constraint contains at most two variables , each occurring with the coefficient 1 or 1 , and that the r.h.s . in it",
    "is an integer .",
    "a well - known fact is that a linear system with such features is totally dual half - integral ; therefore , it has a half - integer basis solution ( whenever it has a solution at all ) , and such a solution can be found in strongly polynomial time ( cf . , e.g. ,  @xcite ) .    given a half - integer solution @xmath550 to  ( [ eq : rho_system ] ) , we define half - integer node lengths @xmath507 as follows : @xmath551    now the desired algorithmic result is provided by the following    @xmath507 is well - defined and satisfies  ( [ eq : hat_l ] ) .",
    "we first show that for any @xmath528 and @xmath552 , @xmath553 this is trivial when @xmath554 ( since in this case @xmath555 and @xmath556 ) .",
    "let @xmath557 .",
    "if @xmath558 , then  ( [ eq : same_hat_l ] ) follows from  ( [ eq : rho_system])(iii ) .",
    "now  ( [ eq : same_hat_l ] ) with any two @xmath559 is implied by the fact that the graph whose nodes and edges are the elements of @xmath529 and @xmath530 , respectively , is connected ( as it is easy to see that for @xmath560 , at least one of @xmath561 is in @xmath530 as well ) .",
    "so @xmath507 is well - defined .",
    "property  ( [ eq : hat_l])(iii ) is immediate from  ( [ eq : rho_system])(ii ) .    to see  ( [ eq : hat_l])(ii ) , consider an @xmath132@xmath133 geodesic @xmath8 .",
    "going along @xmath8 step by step and applying  ( [ eq : rho_system])(ii),(iv ) , we observe that for each node @xmath10 on @xmath8 , the @xmath132@xmath10 part @xmath562 of @xmath8 satisfies @xmath563 . when reaching @xmath133 , we obtain @xmath564 , and now  ( [ eq : hat_l])(ii ) follows from  ( [ eq : rho_system])(iii ) and @xmath565 ( by  ( [ eq : rho_system])(i ) ) .",
    "finally , consider an arbitrary @xmath6-path @xmath190 in @xmath208 , from @xmath548 to @xmath65 say . to conclude with  ( [ eq : hat_l])(i )",
    ", it suffices to show that @xmath566    represent @xmath190 as the concatenation @xmath567 , where @xmath197 is a part of a geodesic from @xmath548 .",
    "we prove  ( [ eq : hatlambda ] ) by induction on the number @xmath568 of edges in @xmath569 . when @xmath570 ,  @xmath190 is a geodesic , and we are done .",
    "assuming this is not the case , take the first edge @xmath140 of @xmath569 , where @xmath92 is the end of @xmath197 . by reasonings above ,",
    "if @xmath555 ( and therefore , @xmath572 ) ,  ( [ eq : hatlambda ] ) immediately follows from  ( [ eq : rho_system])(v ) ( with @xmath573 and @xmath574 ) . and",
    "if @xmath575 , then @xmath10 belongs to some @xmath132@xmath133 geodesic @xmath576 .",
    ", one may assume that @xmath577 and @xmath578 . applying  ( [ eq : rho_system])(v ) to @xmath579 , we have @xmath580 comparing this with @xmath581 and using @xmath582",
    ", one can conclude that @xmath583 , where @xmath584 is the @xmath133@xmath65 path being the concatenation of the @xmath133@xmath10 part of ( the reverse of ) @xmath576 and the @xmath10@xmath65 part @xmath585 of @xmath190 .",
    "since @xmath586 , we can apply induction and obtain @xmath587 , as required .",
    "in this section we recall the notions of skew - symmetric graphs and integer skew - symmetric flows , review known results on such graphs and flows , and then use them to derive necessary results on bidirected graphs and flows to which we appealed in section  [ sec : prim_h_int ] .      a _ skew - symmetric graph _ , or an _ sk - graph _ for short , is a digraph @xmath588 , with possible parallel arcs , endowed with two bijections @xmath589 such that : @xmath590 is an involution on the nodes ( i.e. @xmath591 and @xmath592 for each node  @xmath10 ) ; @xmath593 is an involution on the arcs ; and for each arc @xmath11 from @xmath92 to @xmath10 , @xmath594 is an arc from @xmath595 to @xmath596",
    ". for relevant results on sk - graphs and a relationship between sk- and bd - graphs , see @xcite . for brevity @xmath590 and @xmath593",
    "are combined into one mapping @xmath597 on @xmath598 , which is called the _ symmetry _ ( or skew - symmetry , to be precise ) of @xmath5 . for a node ( arc )",
    "@xmath599 , its symmetric node ( arc ) @xmath600 is also called the _ mate _ of @xmath599 , and we usually use notation with primes for mates , denoting @xmath600 by @xmath601 . although @xmath5 is allowed to contain parallel arcs , when it is not confusing , an arc from @xmath92 to @xmath10 may be denoted as @xmath602 or @xmath141 .",
    "the symmetry @xmath597 is extended in a natural way to walks , subgraphs and other objects in  @xmath5 .",
    "in particular , two walks are symmetric to each other if the elements of one of them are symmetric to those of the other and go in the reverse order : for a walk @xmath605 , the symmetric walk @xmath606 is @xmath607 .",
    "next we explain a relationship between skew - symmetric and bidirected graphs . given an sk - graph @xmath5 ,",
    "choose an arbitrary partition @xmath608 of @xmath24 such that @xmath609 .",
    "then @xmath5 and @xmath131 determine the bd - graph @xmath610 with @xmath611 whose edges correspond to the pairs of symmetric arcs in @xmath5 .",
    "more precisely , arc mates @xmath612 of @xmath5 generate one edge @xmath23 of @xmath610 connecting nodes @xmath613 such that : ( i ) @xmath23 goes from @xmath92 to @xmath10 if one of @xmath614 goes from @xmath92 to @xmath10 ( and the other goes from @xmath603 to @xmath615 in @xmath616 ) ; ( ii ) @xmath23  leaves both @xmath143 if one of @xmath612 goes from @xmath92 to @xmath603 ( and the other from @xmath10 to @xmath615 ) ; ( iii ) @xmath23  enters both @xmath617 if one of @xmath612 goes from @xmath615 to @xmath10 ( and the other from @xmath603 to @xmath92 ) .",
    "note that @xmath23 becomes a loop if @xmath614 connect a pair of symmetric nodes .",
    "conversely , a bd - graph @xmath610 determines an sk - graph @xmath5 with symmetry @xmath597 as follows .",
    "make a copy @xmath618 of each element @xmath10 of @xmath619 , forming the set @xmath620 .",
    "put @xmath621 . for each edge @xmath23 of @xmath610 connecting nodes @xmath92 and @xmath10 , assign two `` symmetric '' arcs @xmath614 in @xmath5 so as to satisfy ( i)(iii ) above ( where @xmath622 and @xmath623 ) .",
    "an example is depicted in  fig .",
    "[ fig : bd - sk ] .",
    "[ rem : bd_ss ] note that one bd - graph generates one sk - graph , by the second construction . on the other hand ,",
    "one sk - graph generates a set of bd - graphs , depending on the partition @xmath131 of @xmath624 , by the first construction .",
    "namely , for each pair of symmetric mates @xmath625 in @xmath5 one may distribute @xmath626 between @xmath627 so that either @xmath628 , @xmath629 or , reversely , @xmath630 , @xmath631 .",
    "the resulting bd - graphs are obtained from one other by making corresponding flips ( defined in subsection  [ ssec : ibd - flows ] ) .",
    "there is essentially a one - to - one correspondence between the walks in @xmath610 and  @xmath5 .",
    "more precisely , let @xmath632 be the natural mapping of @xmath633 to @xmath634 .",
    "each walk @xmath605 in @xmath5 ( where @xmath635 ) induces the sequence @xmath636 of nodes and edges in @xmath610 .",
    "one can see that @xmath637 is a walk in @xmath610 ( i.e. @xmath638 form a transit pair at @xmath639 , for each @xmath202 ) and that @xmath640 is the walk reverse to @xmath637 .",
    "moreover , for any walk @xmath641 in @xmath610 , there is exactly one walk @xmath8 in @xmath5 such that @xmath642 ( considering @xmath8 up to replacing an arc @xmath643 by its mate @xmath604 when @xmath612 are parallel , i.e. correspond to a loop in @xmath610 ) .",
    "we call a function @xmath343 on the arcs of an sk - graph @xmath5 _ ( self-)symmetric _ if @xmath644 for all @xmath645 .",
    "let @xmath646 be a designated _ source _ ; its mate @xmath647 is regarded as the _",
    "sink_. an _ integer skew - symmetric @xmath132@xmath647 flow _ , or an _ isk - flow _ for short , is a symmetric function @xmath648 being an @xmath132@xmath647 flow in a usual sense : @xmath215 for all @xmath649 , and @xmath650 .",
    "the _ value _ of @xmath217 is @xmath651 . here",
    "@xmath652 denotes the usual divergence ( given by ( [ eq : div ] ) , where @xmath209 and @xmath210 are the sets of arcs entering and leaving @xmath10 , respectively ) .",
    "the above correspondence between bd- and sk - graphs is naturally extended to flows .",
    "more precisely , if @xmath217 is a symmetric @xmath132@xmath647 flow in @xmath5 , then transferring the values of  @xmath217 from the pairs of arc mates of  @xmath5 to the edges of the bd - graph  @xmath655 , we obtain a @xmath656-flow in  @xmath610 , denoted as @xmath657 .",
    "the converse correspondence is evident as well .    for @xmath658 ,",
    "let @xmath659 denote the set of arcs going from @xmath22 to @xmath332 . also ( accommodating notation from section  [ sec : prim_h_int ] to digraphs ) we denote by @xmath338 $ ] the set of arcs leaving  @xmath22 .",
    "let @xmath660 be a symmetric capacity function .",
    "then a tuple @xmath661 of subsets of @xmath24 is called a ( skew - symmetric ) _ odd barrier _",
    "the source  @xmath132 ) if the following conditions hold ( see  fig .  [",
    "fig : odd_barrier ] ) :      * the sets @xmath662 give a partition of @xmath24 , each @xmath663 is self - symmetric ( @xmath664 ) , and @xmath665 ; * for each @xmath202 ,  @xmath666 is odd . * for distinct @xmath422 ,  @xmath667 .",
    "* for each @xmath202 ,  @xmath668 .",
    "odd barriers in skew - symmetric graphs are related to their bidirected counterparts introduced in section  [ sec : prim_h_int ] .",
    "indeed , consider a bd - graph @xmath610 with integer edge capacities @xmath670 and a source  @xmath132 .",
    "construct the related sk - graph  @xmath5 with @xmath671 , where @xmath672 .",
    "edge capacities @xmath56 in @xmath610 induce symmetric arc capacities in  @xmath5 , also denoted by  @xmath56 .",
    "the source @xmath132 in @xmath610 gives the source @xmath132 and the sink @xmath647 in @xmath5 .",
    "consider a skew - symmetric odd barrier @xmath673 in @xmath5 .",
    "this barrier gives rise to the following odd bd - barrier @xmath674 in @xmath610 obeying @xmath675 .",
    "we first construct a new bd - graph from @xmath5 by taking a bipartition @xmath676 of @xmath24 such that @xmath677 and @xmath678 ; cf .",
    "remark  [ rem : bd_ss ] .",
    "the resulting bd - graph @xmath679 is equivalent to @xmath610 .",
    "moreover , @xmath679 is obtained from @xmath610 by flipping a subset of nodes within @xmath16 .",
    "the node subsets @xmath680 in @xmath5 are self - symmetric and induce subsets @xmath681 in @xmath610 and @xmath679 in a natural way ; namely , @xmath682 and similarly for @xmath683 .",
    "define @xmath684 , where @xmath685 .",
    "a straightforward examination shows that the properties in  ( [ eq : sk_odd_barrier ] ) imply their bidirected counterparts in  ( [ eq : bd_odd_barrier ] ) . to see that @xmath675 , define @xmath686 .",
    "note that @xmath687 = c(a , a ' ) + c(a , z)$ ] .",
    "the capacity @xmath688 is equal to @xmath689 $ ] ( in @xmath679 ) since @xmath690 consists of pairs of arc mates , each pair corresponding to an edge in @xmath691 $ ] . and",
    "the capacity @xmath692 is equal to @xmath693 $ ] since the ( symmetric ) set  @xmath694 corresponds to @xmath695 in @xmath679 .",
    "[ th : max_isk_flow_min_odd_barrier ] for @xmath696 as above , the maximum isk - flow value is equal to the minimum odd barrier capacity .",
    "an isk - flow @xmath217 and an odd barrier @xmath697 have maximum value and minimum capacity , respectively , if and only if the following hold :      next we establish additional correspondences .",
    "consider an isk - flow @xmath217 in @xmath5 .",
    "the _ residual _ sk - graph @xmath704 endowed with the _ residual _ capacities @xmath705 is constructed in a standard fashion : @xmath706 , and the arcs of @xmath704 are :        ( cf .",
    "( [ eq : residual_edges ] ) ) .",
    "a path @xmath8 in @xmath704 is called _ @xmath713-regular _ if @xmath714 holds for each pair of arc mates @xmath614 occurring in @xmath8 .",
    "( in other words , the bidirected image of @xmath8 in @xmath715 is a @xmath713-simple walk . )",
    "if @xmath8 is a @xmath713-regular @xmath132@xmath647 path , we can increase the value of @xmath217 by  2 ( by sending one unit of flow along @xmath8 and one unit of flow along @xmath562 ) .",
    "so the existence of such a @xmath8 implies the non - maximality of @xmath217 . a converse property is valid as well .",
    "given a maximum isk - flow @xmath217 , a certain minimum odd barrier can be constructed by considering the residual graph @xmath704 .",
    "the construction described in the proof of theorem  3.5 in  @xcite ( relying on lemma  2.2 in  @xcite ) is as follows .",
    "[ th : sk_barrier_from_flow ] let @xmath217 be a maximum isk - flow .",
    "let @xmath716 be the set of nodes reachable from @xmath132 by @xmath713-regular paths in @xmath704 .",
    "define @xmath717 and @xmath718 .",
    "let @xmath388 be the node sets of weakly connected components of the subgraph @xmath5 induced by @xmath719 .",
    "then @xmath720 is a minimum odd barrier .",
    "@xmath721    this subset @xmath584 of nodes in @xmath5 corresponds to two sets @xmath722 and @xmath723 in @xmath610 ( defined just before  theorem  [ th : bd_barrier_from_flow ] ; here @xmath724 and @xmath725 ) .",
    "more precisely , assuming that each node @xmath726 corresponds to node mates @xmath727 in @xmath5 ( cf .",
    "subsection  [ ssec : sk_graph ] ) , one can realize that @xmath728 ( resp .",
    "@xmath729 ) is the set of nodes @xmath730 such that @xmath731 ( resp .",
    "@xmath732 ) .          let @xmath217 be a maximum isk - flow such that the set @xmath733 is inclusion - wise minimal and let @xmath734 .",
    "consider another maximum isk - flow @xmath276 ( if any ) .",
    "then @xmath735 - k = c({\\mathcal{b } } ) = { \\mathop{\\rm val}\\nolimits ( g ) } = \\sum\\nolimits_{v \\in a } { \\mathop{\\rm div}\\nolimits}_{g}(v ) \\\\",
    "= g\\langle a , a'\\rangle + g\\langle a , m\\rangle + g\\langle a , b_1\\rangle +     \\ldots + g\\langle a , b_k\\rangle ,    \\end{gathered}\\ ] ] where for disjoint subsets @xmath736 ,  @xmath737 denotes @xmath738 . for @xmath351",
    ", we have : @xmath739 ;  @xmath740 is odd ; and @xmath741 is even ( the latter is due to a result in  @xcite ; see also  ( * ? ? ? * corollary  3.2 ) ) . therefore , @xmath742 .",
    "also @xmath743 and @xmath744 . comparing these relations with  ( [ eq : canon_value ] )",
    ", we conclude that :      in terms of the residual graph @xmath749 , ( i ) and ( ii ) mean that the sets @xmath16 and @xmath750 are connected in @xmath749 by exactly @xmath501 arcs @xmath751 , each @xmath752 going from @xmath16 to @xmath663 and having the residual capacity  1 . by symmetry , @xmath753 and @xmath754",
    "are connected by only the arcs @xmath755 ( each @xmath756 goes from @xmath663 to @xmath753 , and @xmath757 ) . also by ( [ eq : sk_odd_barrier])(iii),(iv ) , no arc in @xmath749",
    "connects different sets among @xmath680 .",
    "therefore , the set @xmath758 of nodes in @xmath749 reachable from @xmath132 by @xmath377-regular paths is contained in @xmath733 . by the minimality of @xmath733 , we have @xmath759 , as required .",
    "@xmath721              j.  edmonds and e.  l. johnson . matching : a well - solved class of integer linear programs . in r.  guy ,",
    "h.  hanani , n.  sauer , and j.  schnhein , eds , _ combinatorial structures and their applications _ ,",
    "gordon and breach , ny , 1970 , pp .",
    "8992 .                        g.  pap . some new results on node - capacitated packing of a - paths . in _",
    "stoc 07 : proceedings of the thirty - ninth annual acm symposium on theory of computing _ , pages 599604 , new york , ny , usa , 2007 ."
  ],
  "abstract_text": [
    "<S> we consider an undirected graph @xmath0 with a set @xmath1 of terminals , and with nonnegative integer capacities @xmath2 and costs @xmath3 of nodes @xmath4 . </S>",
    "<S> a path in @xmath5 is a _ </S>",
    "<S> @xmath6-path _ if its ends are distinct terminals . by a _ multiflow _ </S>",
    "<S> we mean a function @xmath7 assigning to each @xmath6-path @xmath8 a nonnegative rational _ weight _ @xmath9 , and a multiflow is called _ feasible _ if the sum of weights of @xmath6-paths through each node @xmath10 does not exceed @xmath2 . </S>",
    "<S> the _ value _ of @xmath7 is the sum of weights @xmath9 , and the _ cost _ of @xmath7 is the sum of @xmath9 times the cost of @xmath8 w.r.t . </S>",
    "<S> @xmath11 , over all @xmath6-paths @xmath8 .    </S>",
    "<S> generalizing known results on edge - capacitated multiflows , we show that the problem of finding a minimum cost multiflow among the feasible multiflows of maximum possible value admits _ half - integer _ optimal primal and dual solutions . </S>",
    "<S> moreover , we devise a strongly polynomial algorithm for finding such optimal solutions </S>",
    "<S> .    _ keywords _ : minimum cost multiflow , bidirected graph , skew - symmetric graph </S>"
  ]
}