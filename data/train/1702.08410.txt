{
  "article_text": [
    "discrete path planning is at the root of many robotic applications , from surveillance and monitoring for security , to pickup and delivery problems in automated warehouses . in such problems the environment",
    "is described as a graph , and the goal is to find a path in the graph that completes the task and minimizes the cost function .",
    "for example , in monitoring , a common problem is to compute a tour of the graph that visits all vertices and has minimum length  @xcite .",
    "these discrete planning problems are typically @xmath1  @xcite , and thus there is a fundamental trade off between solution quality and computation time . in this paper",
    "we propose a graph clustering method , called @xmath0-clustering , that can be used to reduce the space of feasible solutions considered during the optimization .",
    "the parameter @xmath0 serves to trade - off the feasible solution space reduction ( and typically computation time ) with the quality of the resulting solution .    the idea behind @xmath0-clusteringis to group vertices together that are in close proximity to each other but are also far from all other vertices .",
    "figure  [ fig : example ] shows an example of @xmath0-clusteringin an office environment .",
    "given this clustering , we solve the path planning problem by restricting the path to visit vertices within each cluster consecutively ( i.e. , no path can visit any cluster more than once ) .",
    "this restriction reduces the number of possible solutions exponentially and thus reduces the amount of computational time needed to find good solutions .    unlike other clustering methods",
    ", @xmath0-clusteringdoes not accept as input a desired number of clusters .",
    "this means that some instances will have no clusters , while others will have many . in this way , @xmath0-clusters only explore natural structures within the problem instances instead of imposing structures onto the instance . additionally ,",
    "when the graph is metric , we establish that for a given @xmath0-clustering , the optimal path of the clustered planning problem is within a constant factor ( dependent on @xmath0 ) of the true optimal solution .    -clusteringused on an office environment .",
    "the red dots represent locations of interest and the red rectangles show clusters of size two or greater . ]",
    "[ [ related - work ] ] related work + + + + + + + + + + + +    there are a number of clustering methods for euclidean  @xcite and discrete  @xcite environments .",
    "typically the objective of these algorithms is to find a set of equal ( or roughly equal ) non - overlapping clusters that are grouped by similarity ( close in proximity , little to no outgoing edges , etc  ) , where each location in the graph is assigned to one cluster . for these methods ,",
    "the desired number of clusters is given as an input parameter .",
    "in contrast , in @xmath0-clustering , the idea is to simply find a specific form of clustering within the environment , if it exists .",
    "these @xmath0-clusters may be nested within one another .",
    "there are other clustering methods that also look for specific structures within the graph such as community structures  @xcite , which is based on a metric that captures the density of links within communities to that between communities .",
    "in contrast , our clustering method is specifically designed to find structures that yield desirable properties for path planning on road maps .",
    "the use of clustering to save on processing / time is done in a variety of different fields such as data mining  @xcite , parallel computer processing  @xcite , image processing  @xcite , and control  @xcite for path planning . in environments that have regions with a high degree of connectivity , such as electronic circuits",
    ", clustering is commonly used to identify these regions and then plan ( nearly ) independently in each cluster  @xcite . for path planning problems with repetitive tasks ,",
    "one can cluster a set of popular robot action sequences into macros  @xcite , allowing the solver to quickly discover solutions that benefit from these action sequences . in applications such as sensor sweeping for coverage problems  @xcite or in the routing of multiple agents  @xcite ,",
    "clustering has been used to partition the environment into regions that can again be treated in a nearly independent manner , reducing computation time .",
    "there is some prior work on partitioning in discrete path planning .",
    "multilevel refinement  @xcite is the process of recursively coarsening the graph by aggregating the vertices together to create smaller and smaller instances , for which a plan can be found more easily .",
    "the plan is then recursively refined to obtain a solution to the original problem .",
    "the idea in coarsening a graph is that the new coarse edges should approximate the transition costs in the original graph .",
    "this differs from @xmath0-clustering , which preserves the edges within the graph .",
    "there are a number of clustering approaches that aim to reduced the complexity of euclidean and or planar @xmath2problems  @xcite .",
    "@xmath0-clusteringis more general , in that it works on any graph , while the solution quality guarantees only hold for metric graphs .",
    "[ [ contributions ] ] contributions + + + + + + + + + + + + +    the main contribution of this paper is the introduction of @xmath0-clustering , a clustering method for a class of discrete path planning problems .",
    "we establish that the solution to the corresponding clustered problem provides a @xmath3-factor approximation to the optimal solution .",
    "we give some insight into the reduction of the search space as a function of the amount of clustering , and we provide an efficient algorithm for computing the optimal @xmath0-clustering .",
    "we then use an integer programming formulation of the @xmath2problem to demonstrate that for many problem instances the clustering method reduces the computation time while still finding near - optimal solutions .",
    "in this section we define the class of problems considered in this paper , review some semantics of clusters , review the traveling salesman problem ( @xmath2 )  @xcite and define its clustered variant , the general clustered traveling salesman problem ( @xmath4 ) .      given a graph @xmath5 , we define a _ path _ as a non - repeating sequence of vertices in @xmath6 , connected by edges in @xmath7 .",
    "a _ cycle _ is a path in which the first and last vertex are equal , and for simplicity we will also refer to cycles as paths . let @xmath8 represent the set of all possible paths in @xmath9 .",
    "then , abstractly , a path planning constraint defines a subset @xmath10 of feasible paths .",
    "given a set of constraints @xmath11 , the set of all feasible paths is @xmath12 . in this paper",
    "we restrict our attention to the following class of constraints and planning problems .",
    "a constraint @xmath13 is _ order - free _ if , given any @xmath14 , then all paths obtained by permuting the vertices of @xmath15 are also in @xmath13",
    ".    given a complete weighted graph @xmath5 and a set of order - free constraints @xmath16 , find the minimum length feasible path .",
    "many discrete path planning problems for single and multiple robots fall into this class , so long as they do not restrict the ordering of vertex visits ( i.e. , no constraints of the form `` visit @xmath17 before @xmath18 '' ) .",
    "some examples include single and multi - robot traveling salesman problems , point - to - point planning , and patrolling . as a specific example the @xmath19is a problem where a robot is required to visit exactly one location in each non - overlapping set of locations  @xcite .",
    "this is naturally expressed in the above framework by having one constraint for each set : for each cluster @xmath20 we have a constraint stating that exactly one vertex in @xmath20 must be visited in the path",
    ".    a _ metric _ discrete path planning problem is one where the edge weights in the graph @xmath9 satisfy the triangle inequality : for @xmath21 , we have @xmath22 .    to describe the number of feasible paths for a given planning problem , we use the phrase _ search space size_. for example , a problem where we must choose an ordering of @xmath23 locations has a search space size of @xmath24 , since there are @xmath24 combinations that a path may take .",
    "note that as more constraints are added to the problem , the search space size can only be reduced , since a feasible path must lie in the intersection of all constraints .",
    "a _ cluster _ is a subset of the graph s vertices , @xmath25 .",
    "given the clusters @xmath26 and @xmath27 , we say @xmath26 is _ nested _ in @xmath27 if @xmath28 .",
    "the clusters @xmath26 and @xmath27 are _ overlapping _ if @xmath29 , @xmath30 , and @xmath31 .",
    "a _ set of clusters _ ( or clustering ) is denoted by @xmath32 .",
    "a clustering @xmath33 is a nested if there exists some @xmath34 for @xmath35 .    in this paper",
    "we seek to add clustering constraints to a discrete planning problem that reduce its search space size , but also retains low - cost feasible paths .",
    "the clustering constraints we consider are of the following form .    given a graph @xmath36 and a cluster @xmath37 , a feasible path @xmath15 must visit the vertices within the cluster @xmath20 _ consecutively_. formally , the vertices visited by @xmath15 , @xmath38 $ ] are visited consecutively if there exists a path segment @xmath39 of @xmath15 that visits every vertex in @xmath40 $ ] and is of length @xmath41\\right|$ ] .    note that in the above definition , it is not necessary for all of the vertices in @xmath20 to be visited",
    ". it is just necessary to visit the vertices consecutively in @xmath20 that are visited .      the traveling salesman problem ( @xmath2 ) is defined as follows : given a set of cities and distances between each pair of cities , find the shortest path that the salesman can take to visit each city exactly once and return to the first city ( i.e. , the shortest tour ) . a tour in a graph that visits each vertex",
    "exactly once is called a hamiltonian cycle ( regardless of path cost ) . the general clustered version of @xmath2is the extension that requires the solution to visit the vertices within the clusters consecutively .",
    "the definition of these problems is as follows :    given a complete graph @xmath5 with edge weights @xmath42 , find a hamiltonian cycle of @xmath9 with minimum cost .",
    "given a complete and weighted graph @xmath5 along with a clustering @xmath43 , find a hamiltonian cycle of @xmath9 with minimum cost such that the vertices within each cluster @xmath20 are visited consecutively .",
    "the traditional version of the @xmath44restricts the clusters to be non - overlapping ( and non - nested ) . for this paper",
    "we use the syntax @xmath4to emphasize when we are solving a general-@xmath44problem @xmath44to refer to the traditional problem .",
    "in this section , we define @xmath0-clusteringand show that the @xmath0-clustered path planning problem provides a @xmath3 approximation of the original path planning problem .",
    "we then describe an algorithm for finding the optimal @xmath0-clustering , and characterize the search space reductions .",
    "below we define the notion of @xmath0-clusters , @xmath0-clusterings , and the clustered discrete path planning problem .",
    "then we pose the clustering problem as one of maximizing the search space reduction .",
    "[ def : gamma_cluster ] given a graph @xmath5 and a cluster @xmath25 , we define the following quantities for @xmath20 relative to @xmath9 : @xmath45 where @xmath46 represents the minimum weight edge entering or exiting the cluster @xmath20 , and @xmath47 represents the maximum weight edge within @xmath20 .",
    "the ratio @xmath48 is a measure of how separated the vertices in @xmath20 are from the remaining vertices in @xmath9 .",
    "[ def : gamma_clusters ] given an input parameter @xmath49 and a graph @xmath5 , a clustering @xmath50 is said to be a @xmath0-clusteringif and only if @xmath6 is covered by @xmath51 ; each @xmath52 has a separation @xmath53 ; and the clusters are either nested ( @xmath34 or @xmath54 for all @xmath35 ) or non - overlapping ( @xmath55 ) .",
    "the search space reduction for path planning problems comes from restricting paths to visit the clusters consecutively and our goal is to maximize that reduction .",
    "thus we are interested in the following two problems .",
    "[ def : path_planning_problem ] given a discrete path planning problem @xmath56 and a clustering @xmath57 , the _ clustered version of the problem _",
    "@xmath58 has the constraint that the path must visit the vertices within each cluster consecutively , in addition to all the constraints of @xmath56 .",
    "[ def : clustering_problem ] given a graph @xmath5 and a parameter @xmath59 , find a @xmath0-clustering@xmath60 such that the search space reduction is maximized .",
    "note that in definition  [ def : gamma_clusters ] overlapping clusters are not permitted .",
    "this is necessary for the problem in definition  [ def : path_planning_problem ] to be well defined .",
    "in addition , we will see in the following section that clusters that have a separation of @xmath61 can not overlap .      in this section , we show that when the graph @xmath9 is metric and @xmath62 , then the solution to the @xmath0-clustered path planning problem provides a @xmath63-factor approximation to the optimal .",
    "[ thrm : approximation_factor ] given a metric discrete path planning problem @xmath56 with optimal solution @xmath64 and cost @xmath65 , a @xmath0-clustering@xmath33 where @xmath62 , then the optimal solution @xmath66 to the clustered problem @xmath58 over the same set of vertices is a solution to @xmath56 with cost @xmath67 .    to prove the main result",
    ", we begin by proving the first half of the bound @xmath68 .",
    "we do this by using an minimum spanning tree ( mst ) to construct a feasible solution for @xmath58 .",
    "[ thrm : mst_edges ] given a metric graph @xmath9 and a @xmath0-clustering@xmath57 , with @xmath62 , every mst will have exactly one inter - set edge for each cluster @xmath69 .",
    "we prove the above result by contradiction .",
    "suppose the mst has at least two inter - set edges connected to @xmath20 .",
    "thus , there are at least two sets of vertices in @xmath20 that are not connected to each other using intra - set edges .",
    "we can then lower the cost of the mst by removing one of these inter - set edges of weight @xmath70 and replace it with an intra - set edge of weight @xmath71 .",
    "this highlights the contradiction and thus every mst will have exactly one inter - set edge for each cluster @xmath69 .",
    "[ thrm:2_factor_approximation ] consider a metric discrete path planning problem @xmath56 with an optimal solution path @xmath64 and cost @xmath65 .",
    "then given a @xmath0-clustering@xmath72 with @xmath62 , the optimal solution @xmath66 for the clustered problem @xmath58 over the same set of vertices @xmath73 $ ] is a solution to @xmath56 with cost @xmath74 .    to prove the above result , we will use the mst approach described below and in @xcite to construct a path @xmath39 over the set of vertices in @xmath73 $ ] .",
    "this approach yields a solution @xmath39 for @xmath58 that has our desired cost bound , @xmath75  @xcite .",
    "the mst procedure is described below .    1 .",
    "find a minimum spanning tree for the vertices @xmath73 $ ] .",
    "2 .   duplicate each edge in the tree to create a eulerian graph .",
    "3 .   find an eulerian tour of the eulerian graph .",
    "4 .   convert the tour to a @xmath2 : if a vertex is visited more than once , after the first visit , create a shortcut from the vertex before to the one after , i.e. , create a tour that visits the vertices in the order they first appeared in the tour .",
    "what remains is to prove that the above tour is a feasible solution for @xmath58 .",
    "first we note that the above approach yields a single tour of all the vertices in @xmath73 $ ] , i.e. , there are no disconnected tours .",
    "next we note that lemma  [ thrm : mst_edges ] states that every mst uses exactly one inter - set edge for each cluster @xmath69 .",
    "thus when the edges are duplicated and a eulerian tour is found , there are only two inter - set edges used for each @xmath52 .",
    "furthermore short - cutting the path does not change the number of inter - set edges used by the tour , thus the final solution @xmath39 only has one incoming and one outgoing edge for each cluster @xmath69 and so it is a clustered solution for @xmath58 that satisfies the bound since the @xmath76approach also yields a solution with cost @xmath75 .",
    "next we prove the second half of the bound @xmath77 by using algorithm  [ alg : deform ] to construct a feasible solution @xmath39 for @xmath58 .",
    "additionally we use a modified graph @xmath78 defined in definition  [ def : g_hat ] to show that the cost of this solution satisfies our desired bound .",
    "@xmath79 + @xmath80 $ ] @xmath39    [ thrm : alg_correctness ] given a feasible path @xmath15 for @xmath56 and a cluster @xmath69 that is not visited consecutively , then @xmath81 does visit @xmath20 consecutively and any subsequent deformed paths @xmath82 also visit @xmath20 consecutively , for @xmath83 .    by construction @xmath20",
    "is visited consecutively in @xmath84 .",
    "the remaining claim that @xmath20 continues to be visited consecutively is proven by showing that the number of inter - set edges for @xmath20 in the subsequent paths remains the same .",
    "we prove this result by contradiction .",
    "suppose there is a sequence @xmath85 for some @xmath86 such that @xmath87 and @xmath88 is no longer connected to @xmath89 in @xmath90 ; that is , @xmath91 .",
    "this would mean that one or more vertices were inserted in between @xmath88 and @xmath89 , thus creating a new inter - set edge . in algorithm  [ alg :",
    "deform ] , this can not happen in lines 5 - 7 since the path for the @xmath92 vertex to the @xmath93 is unchanged .",
    "this also can not happen in lines 8 - 9 since this part of the algorithm is only connecting vertices within the cluster @xmath94 together . finally , this can not happen in lines 11 - 13 , since the path is not changing the order of the appearance of @xmath88 and @xmath89 ( no insertions , just deletions ) .",
    "thus there are no additional inter - set edges created by algorithm  [ alg : deform ] for cluster @xmath20 , which highlights our contradiction .",
    "therefore all subsequent paths must also visit @xmath20 consecutively .",
    "[ thrm : deform_order ] when algorithm  [ alg : deform ] is applied to @xmath64 iteratively for each @xmath52 to generate the solution @xmath39 , the solution is unique despite the order that @xmath95 was called for all @xmath69 .",
    "furthermore the order of the clusters is determined by their first appearance in @xmath15 .",
    "this follows from the method in which algorithm  [ alg : deform ] reorders the vertices within the tour .",
    "specifically , the order of vertices within each cluster @xmath20 is preserved as @xmath95 is called as is the ordering of the remaining vertices .    [ thrm : deform_cost ] consider a feasible path @xmath15 for @xmath56 that has @xmath96 inter - set edges for @xmath0-cluster@xmath20 such that @xmath61 and @xmath97 .",
    "then the cost to deform @xmath15 into @xmath98 is @xmath99 .    in this proof",
    "we analyze the cost to deform @xmath15 into @xmath39 , which is a result of calling @xmath98 ( algorithm  [ alg : deform ] ) .",
    "there are three types of deformations that result from the algorithm : 1 ) there are short cuts created within the cluster ; 2 ) there are short cuts created outside of the cluster ; and 3 ) there is a new outgoing edge for the cluster .",
    "these deformations are illustrated in figure  [ fig : deform03 ] and a classification of the edges in the figure are as follows : 1 ) edges @xmath100 and @xmath101 are short cuts within the cluster ; 2 ) edges @xmath102 and @xmath103 are short cuts outside of the cluster ; and 3 ) edge @xmath104 is the new outgoing the edge for the cluster .",
    "we start by examining the incurred cost to short cut paths within the cluster .",
    "consider a path segment @xmath105 of @xmath15 such that @xmath88 is directly connected to @xmath106 in @xmath39 with the edge @xmath107 and @xmath108 .",
    "the incurred cost of each of these edges is @xmath109 due to the fact that the cost of any intra - set edge has weight @xmath109 .",
    "there are @xmath23 such shortcuts of this nature incurred from performing deform@xmath110 ( @xmath23 captures the number of extra visits to the cluster ) , and so the total incurred cost for this type of shortcut is @xmath111 .",
    "next we examine the incurred cost to short cut paths outside of the cluster .",
    "consider a path segment @xmath105 of @xmath15 such that @xmath88 is directly connected to @xmath106 in @xmath39 with the edge @xmath107 , @xmath112 and @xmath113 .",
    "the incurred cost for each of these short cuts is again @xmath109 .",
    "this is due to the metric property of @xmath9 : the cost of the direct path from @xmath88 to @xmath106 is less than or equal to any path from @xmath88 to @xmath106 , specifically @xmath114 .",
    "thus the incurred cost @xmath115 , of this shortcut is bounded by the difference between the cost of the new edges in @xmath39 and the removed edges in @xmath64 , namely : @xmath116 there are @xmath23 such shortcuts of this nature incurred by deform@xmath110 , and so the total incurred cost for this type of shortcut is also @xmath111 .",
    "lastly we examine the incurred cost of the new outgoing edge .",
    "consider the path @xmath105 of @xmath15 such that @xmath117 is the first outgoing edge of @xmath20 and @xmath118 is the last outgoing edge of @xmath20 , thus @xmath119 is the new outgoing edge . then due to the metric property",
    "we know that @xmath120 .",
    "the incurred cost of this deformation is the difference between the cost of the new edge @xmath121 and the removed edge @xmath117 ( this edge has not been considered in any previous incurred cost calculation ) :",
    "@xmath122    this accounts for all of the incurred costs , and so the total cost to deform @xmath15 into @xmath39 via deform@xmath110 is @xmath123 .",
    "we introduce the modified graph @xmath78 in the following definition to aid with our ongoing proof of the bound .",
    "[ def : g_hat ] given a graph @xmath9 and a @xmath0-clustering@xmath57 , _ the modified graph _",
    "@xmath78 is a copy of @xmath9 with the following modifications : if @xmath124 is an inter - set edge with @xmath125 and @xmath126 then @xmath127 , otherwise @xmath128 , where @xmath47 and @xmath129 are as defined in definition  [ def : gamma_cluster ] .",
    "[ thrm : no_deform_cost ] consider a feasible path @xmath15 for @xmath56 and a @xmath0-cluster@xmath20 such that @xmath61 .",
    "then the cost to deform @xmath15 into @xmath130 in @xmath78 is @xmath131 .    in this proof",
    "we analyze the cost to deform @xmath15 into @xmath39 in @xmath78 , which is a result of single call @xmath98 ( algorithm  [ alg : deform ] ) .    from lemma  [ thrm : deform_cost ]",
    "we see that the cost to deform @xmath15 into @xmath39 with respect to @xmath9 is @xmath123 , where there are @xmath96 inter - set edges for @xmath20 in @xmath15 .",
    "the cost of @xmath15 in @xmath78 is @xmath132 and the cost of @xmath39 in @xmath78 is @xmath133 thus @xmath134 and since @xmath135 ( otherwise we did not need to deform the path ) , then @xmath131 .",
    "[ thrm : gamma_factor_approximation ] given a metric discrete path planning problem @xmath56 with optimal solution cost @xmath65 , @xmath62 and a @xmath0-clustering@xmath33 , then the optimal solution @xmath66 to the clustered problem @xmath58 over the same set of vertices is a solution to @xmath56 with cost @xmath136 .    to prove the above result we will work with the modified graph @xmath78 ( defined in definition  [ def : g_hat ] ) and use the result from lemma  [ thrm : no_deform_cost ] to show that there exists a clustered solution in @xmath78 that has the same cost or lower than @xmath137",
    ". then we will relate @xmath138 to @xmath65 .",
    "first we show that there exists a clustered solution @xmath39 that satisfies the following : @xmath139 to find a solution @xmath39 that satisfies the above we will use algorithm  [ alg : deform ] to deform @xmath64 into @xmath39 .",
    "the deform algorithm is called for each @xmath69 in any order as @xmath140 to form a solution for @xmath58 ( see lemma  [ thrm : alg_correctness ] ) . for each call of @xmath140 the incurred cost @xmath141 ( see lemma  [ thrm : no_deform_cost ] ) .",
    "thus after the series of calls , we have a clustered solution @xmath39 satisfying @xmath142    next we relate @xmath143 to @xmath137 by observing the following for an inter - set edge @xmath144 : @xmath145 the above inequality for @xmath137 is true for each edge @xmath144 , inter - set edge or not .",
    "therefore @xmath146    due to the construction of @xmath78 and how @xmath147 we deduce that @xmath148 since @xmath149 therefore we have @xmath150    the proof of the main result in theorem  [ thrm : approximation_factor ] directly follows from lemma  [ thrm:2_factor_approximation ] and lemma  [ thrm : gamma_factor_approximation ] .",
    "we have not fully characterized the tightness of the bounds from lemma  [ thrm:2_factor_approximation ] and lemma  [ thrm : gamma_factor_approximation ] , but we we have a lower bound , which is illustrated in figure  [ fig : lower_bound ] . in this example , the graph is scale - able ( we can add vertices three at a time ) .",
    "the clustered and non - clustered solutions for this example have a cost relation of @xmath151 we also provide the graph in figure  [ fig : bound ] to show how the gap changes as @xmath0 varies .    the bound for this graph",
    "is obtained as follows .",
    "let @xmath152 for @xmath153 .",
    "then the optimal non - clustered solution cost is ( recall that @xmath154 ) : @xmath155    the optimal clustered solution is : @xmath156    as the instance grows ( @xmath157 , which implies @xmath158 ) , we have the following : @xmath159    ) .",
    "vertices in the top row ( @xmath160 ) are in the cluster @xmath20 and the vertices in the bottom row are not .",
    "edge weights connecting vertices within @xmath20 are @xmath161 , edge weights connecting vertices not in @xmath20 are @xmath162 , edge weights connecting vertices not in @xmath20 to vertices in @xmath20 are @xmath163 unless shown differently in diagram .",
    "optimal solutions were verified with our solvers . ]",
    "before we describe our method for finding optimal @xmath0-clustering(s ) , we describe a few properties of @xmath0-clusterings .      a special property of @xmath0-clusteringis that when @xmath62 , there are no overlapping clusters .",
    "specifically there are no two clusters @xmath20 and @xmath94 with @xmath61 and @xmath164 that have a non - zero intersection unless one cluster is a subset of the other .",
    "[ thrm : overlap ] given a graph @xmath9 , clusters @xmath20 and @xmath94 with separations @xmath165 and @xmath164 ( defined in definition  [ def : gamma_cluster ] ) , then @xmath166 is non - empty if and only if @xmath34 or @xmath167 .",
    "we prove the above result by contradiction .",
    "before we begin , recall that edges cut by the cluster @xmath20 have edge weights @xmath70 and edges within the cluster have edge weights @xmath109 .",
    "let us assume that @xmath20 and @xmath94 overlap and are not nested . without loss of generality let @xmath168 .",
    "then there exists an edge @xmath169 with weight @xmath170 for @xmath171 and @xmath172 .",
    "since this edge does not exist in the cluster @xmath20 but it is cut by @xmath20 , then it must be the case that @xmath173",
    ". however , this edge does exist in the cluster @xmath94 and so @xmath174 , since @xmath175 .",
    "this result highlights the contradiction : @xmath176 .",
    "the non - overlapping property for @xmath0-clusterings with @xmath62 implies that there exists a unique maximal clustering set @xmath60 ( more clusters equals more reductions in the search space size ) .",
    "this result follows from the simple property that if a cluster @xmath20 exists and does not exist in our clustering @xmath60 , then we must be able to add it to @xmath60 to get additional search space reductions .",
    "[ thrm : superset ] given graph @xmath9 and a parameter @xmath62 , the problem of finding a @xmath0-clustering@xmath60 that maximizes the search space reduction has a unique solution @xmath60 .",
    "furthermore @xmath60 contains all clusters @xmath20 with separation @xmath53 .",
    "we use contradiction to prove that @xmath60 is unique .",
    "suppose there exists two different @xmath0-clusterings @xmath177 and @xmath178 that maximize the search space reductions for a given @xmath62 .",
    "then , there is a cluster @xmath26 that is in @xmath177 and not in @xmath178 ( or vice versa ) .",
    "this implies that either @xmath26 is somehow incompatible with @xmath178 , which we know is not the case due to lemma  [ thrm : overlap ] ( i.e. , clusters do not overlap unless one is a subset of the other ) or this cluster can be added to @xmath178 .",
    "this is a contradiction , which proves the first result .",
    "the second result directly follows since adding a cluster can only further reduce the search space size of the problem .",
    "[ thrm : gamma_gt_gamma ] given a graph @xmath9 and two clustering parameters @xmath179 , the optimal clustering @xmath180 for @xmath181 is a superset of any clustering for @xmath48 .",
    "we prove this result by contradiction .",
    "suppose we have a clustering @xmath182 for @xmath48 and the optimal clustering @xmath183 for @xmath181 , for which there exists a cluster @xmath26 in @xmath182 that is not in @xmath183 .",
    "then by the definition of @xmath0-clusters @xmath26 must satisfy @xmath184 and since @xmath185 then @xmath186 , which makes @xmath20 a cluster that should be added to @xmath183 .",
    "this contradicts proposition  [ thrm : superset ] and thus proves the result .",
    "there exists a minimum @xmath187 and its optimal @xmath0-clustering@xmath60 that is a superset of all other @xmath0-clusters for @xmath62 .",
    "this result follows directly from corollary  [ thrm : gamma_gt_gamma ] , when we consider @xmath188 to be the smallest ratio of edge weights in the graph @xmath9 ( find the two edges that give us the smallest ratio ) . then for every cluster with a separation parameters",
    "@xmath61 , it must also be greater than or equal to @xmath188 since @xmath48 itself is a ratio of existing edge weights in the graph @xmath9 . thus by corollary  [ thrm : gamma_gt_gamma ] , @xmath60 must be superset of any other @xmath0-clusteringfor some @xmath62 .      given an input @xmath62 , algorithm  [ alg : clustering ] computes the optimal @xmath0-clusterings , i.e. , the @xmath0-clusteringwith maximum search space reduction .",
    "informally the algorithm deletes edges in the graph from largest to smallest ( line 6 - 7 ) to look for @xmath0-clusters .",
    "it uses a minimum spanning tree ( @xmath76 ) to keep track of when the graph becomes disconnected , and when it does the disconnected components are tested to see if they qualify as @xmath0-clusters ( line 9 - 11 ) .",
    "regardless , any non - trivial sized disconnected component ( @xmath0-clusteror not ) is added back to the queue ( line 13 - 14 ) , so that it can be broken and tested again to find of all nested @xmath0-clusters .",
    "` assert(\\gamma > 1 ) ` + @xmath189 + @xmath190 + @xmath57    [ thrm : clustering ] given @xmath9 and a @xmath62 , algorithm  [ alg : clustering ] finds the optimal @xmath0-clustering@xmath60 in @xmath191 time .",
    "the proof is two fold , first we show that algorithm  [ alg : clustering ] runs in polynomial time and second we show that it finds the optimal @xmath0-clustering . for this proof let @xmath192 .",
    "minimum spanning trees can be found @xmath193 time  @xcite ( line 3 ) .",
    "the rest of the algorithm modifies the @xmath76from line 3 , which originally has @xmath23 edges and so the while loop for the rest of the algorithm can only run at most @xmath23 times ( we ca nt remove more than @xmath23 edges ) .",
    "finding the largest edge(s ) and removing them in line 6 and 7 takes @xmath194 time .",
    "creating the induced subgraph and finding the maximum edge cost in lines 9 and 10 takes @xmath193 time . testing if the subgraph is a clique ( line 11 ) takes @xmath193 time .",
    "thus lines 1 to 3 run in @xmath193 time and lines 4 to 14 run in @xmath195 , which means the entire algorithm runs in @xmath196 time or @xmath191 .",
    "next we show that algorithm  [ alg : clustering ] finds the optimal @xmath0-clustering .",
    "to do so , we will show that @xmath197 $ ] does indeed represent a @xmath0-clusteringwith separation @xmath198 ( line 11 ) as defined by definition  [ def : gamma_cluster ] and then we finish by showing that the algorithm does not omit any candidate clusters , thus proving the theorem by leveraging proposition  [ thrm : superset ] .",
    "let us start by understanding how to find @xmath0-clusters and how we use @xmath76s in the algorithm .",
    "a @xmath0-clusterwith separation @xmath61 is a subgraph of @xmath9 that is connected with intra - edge weights less than the inter - edge weights connected to the rest of the graph .",
    "thus one method of searching for @xmath0-clusters is to delete all edges in the graph of weight @xmath199 and if there is a disconnected subgraph in @xmath9 then and only then is it a possible @xmath0-cluster .",
    "we can use @xmath76s to more efficiently keep track of these deleted edges . by definition , an @xmath76is tree that connects vertices within the graph with minimum edge weight .",
    "if we remove edges of size @xmath199 in the graph to search for disconnected sub - graphs , then the graph is disconnected if and only if the @xmath76is disconnected .",
    "this follows by considering the cut needed to disconnect these two sub - graphs ( the minimum weight edge cut , shares the same weight cut by the @xmath76 ) .",
    "thus we can instead search for @xmath0-clusters by disconnecting the @xmath76 .",
    "furthermore if we disconnected the @xmath76by incrementally removing the largest edge(s ) of weight @xmath200 from the tree then we know that induced sub - graphs of the newly disconnected trees have at least one inter - set edge of size @xmath200 .",
    "line 9 in the algorithm creates the induced subgraph @xmath201 of a disconnected tree ( @xmath202 ) , line 10 measures its @xmath161 , and if @xmath201 is a clique and meets the separation criterion ( @xmath203 ) then @xmath197 $ ] is indeed a @xmath0-cluster(by definition ) , thus it is added to the clustering @xmath57 in line 12 .    next",
    "we show that the algorithm did not omit any candidate clusters .",
    "we have already argued that only disconnected @xmath76trees need to be considered for @xmath0-clusters , thus what is left to show is that the algorithm tests every possible value of @xmath200 to disconnect the @xmath76tree .",
    "this is true since it considers every edge in the original @xmath76 .",
    "this is because every disconnected tree of size two or more is added back to @xmath204 in line 14 until every edge originally in the @xmath76is removed in line 7 .",
    "therefore this algorithm finds all of the candidate @xmath0-clusters and proposition  [ thrm : superset ] tells us that it is the unique optimal @xmath0-clusteringfor the given @xmath62 .",
    "the last remaining question is to determine how much the clustering approach reduces the search space . in general , this is difficult to answer since it depends on the particular constraints of the path planning problem .",
    "however , to get an understanding of the search space reduction , consider the example of @xmath2with a non - nested clustering ( nesting would result in further search space reductions ) .",
    "let @xmath205 be the ratio of the non - clustered search space size @xmath206 , to the clustered search space size @xmath207 , for a graph with vertices @xmath6 and a clustering @xmath208 .",
    "then , the ratio ( derived from counting the number of solutions ) is as follows : @xmath209 to further simplify the ratio consider the case where all clusters are equally sized ( for all @xmath35 , @xmath210 ) :    given a graph @xmath9 and a clustering @xmath211 such that @xmath210 for all @xmath212 $ ] then the ratio @xmath205 of the search space size for the original @xmath2problem to the cluster @xmath2problem is notation states that for large enough @xmath213 the ratio @xmath205 is at least @xmath214 for some constant @xmath215 . ]",
    "@xmath216 where @xmath217 .",
    "the number of solutions for the ( directed ) @xmath2problem is @xmath218 and the number of solutions for the @xmath4problem is : @xmath219 ( these results come from counting the number of possible solutions ) .",
    "first let us bound @xmath220 : @xmath221    we now use the fact that @xmath222 to prove the main result : @xmath223 thus @xmath224 .",
    "to get an idea of the magnitude of @xmath205 , consider an instance of size @xmath225 divided into four equal clusters .",
    "the clustered problem has a feasible solution space of size @xmath226 , where @xmath206 is the feasible solution space size of the non - clustered problem .",
    "however , @xmath207 is still extremely large at about @xmath227 .",
    "in this section we present experimental results that demonstrate the effectiveness of @xmath0-clusteringfor solving discrete path planning problems .",
    "we focus on metric @xmath2instances drawn from the established @xmath2library tsplib  @xcite , which have a variety of @xmath2problem types ( the first portion of the instance name indicates the type and the number indicates the size ) .",
    "the tests were conducted with @xmath228 , for which theorem  [ thrm : approximation_factor ] implies that the solution to the clustered problem gives a @xmath3-factor approximation to the @xmath2instance .",
    "however , we will see that the observed gap in performance is considerably smaller .    to test the effectiveness of the clustering method , we perform @xmath0-clusteringon each @xmath2instance and recorded both the runtime and the number of clusters found .",
    "this gives us an idea of whether or not instances from tsplibhave a structure that can be exploited by @xmath0-clustering .",
    "then , we use standard integer programming formulations for both the original @xmath2instance and the general clustered version of the instance ( @xmath4 ) .",
    "we solve each instance three times using the solver gurobi  @xcite and recorded the average solver time and solution quality .",
    "all instances were given a time budget of 900 seconds , after which they were terminated and the best solution found in that run was outputted .",
    "the @xmath2instances reported in this paper are the 37 instances that were solved to within 50% of optimal and have @xmath0-clusters .",
    "the remaining instances are not reported as they would have required more than 900 seconds to provide a meaningful comparison .",
    "additionally we demonstrate @xmath0-clusteringon an office environment to gain insight into the structure of @xmath0-clusters .",
    "the clustering algorithm was implemented in python and run on an intel core i7 - 6700 , 3.40ghz with 16 gb of ram .",
    "the integer programming ( ip ) expression of the @xmath2problem and clustered problem is solved on the same computer with gurobi , also accessed through python .",
    "the results of both of these approaches is found in table  [ table : results ] and summarized in figure  [ fig : results ] .",
    "the following is the ip expression used for the clustered and non - clustered path planning problems , where each variable @xmath229 : @xmath230 the formulation was adapted from a @xmath2ip formulation found in  @xcite , where the boolean variables @xmath231 represent the inclusion / exclusion of the edge @xmath124 from the solution .",
    "constraints  [ eq : v_outgoing ] and  [ eq : v_incoming ] restricts the incoming and outgoing degree of each vertex to be exactly one ( the vertex is visited exactly once ) .",
    "similarly constraints  [ eq : set_outgoing ] and  [ eq : set_incoming ] restrict the incoming and outgoing degree of each cluster to be exactly one ( these constraints are only present in the clustered version of the problem ) .",
    "constraint  [ eq : sub_tour_elim ] is the subtour elimination constraint , which is lazily added to the formulation as conflicts occur due to the exponential number of these constraints . for each instance , we seed the solver with a random initial feasible solution .",
    "figure  [ fig : time ] shows the ratio of time spent finding clusters with respect to total solver time . in all instances",
    "this time is less than 6% and most is less than 1% .",
    "additionally as the total solver time grows , the ratio gets smaller ( time02 is for instances that use the full 900 seconds ) .",
    "this approach is able to find @xmath0-clusters on 63 out of 70 @xmath2instances .",
    "in total it found 3700 non - trivial @xmath0-clusters ( i.e. , clusters with @xmath232 ) , which is promising since the tspliblibrary contains a variety of different @xmath2applications .",
    "figure  [ fig : results ] and table  [ table : results ] , shows that for instances that do not time out the solution path costs found by the clustering approach are close to optimal ( cost01 is close to 1 in the figure and the instances from burma14 to pr107 are almost all within 1% error as shown in the table ) .",
    "furthermore when the solver starts to time out ( exceeds its 900 second time budget ) the solution quality of the @xmath0-clusteringapproach starts to surpass the solution quality of the non - clustered approach ( as shown by cost02 in the figure ) .",
    "we attribute this trend to the fact that the clustered approach needs less time to search its feasible solution space and thus is able to find better quality solutions faster than its counterpart . in instances gr202 , krob200 , pr107 , tsp225 , and gr229 the clustering approach does very well compared to the non - clustering approach , enabling the solver to find solutions within 1% of optimal for the first three instances and solutions within 6% of optimal for the latter two instances , while the non - clustered approach exceeds 8% of optimal in the first three instances and 28% of optimal for the latter two instances .    on average",
    "the @xmath0-clusteringapproach is more efficient than the non - clustered approach , which is highlighted in figure  [ fig : results ] and table  [ table : results ] . for the results that do not time out ( time01 in the figure ) we often save more than 50% of the computational time , while maintaining a near optimal solution quality ( cost01 in the figure ) . for instances that require most or all of the 900 seconds ( harder instances ) the time savings can be quite large",
    "this is particularly clear from the table when we compare the easy instances burma14 up to st70 that have an average time savings of around 60% to the harder instances kroa100 , gr96 , bier127 , and ch130 , which all have a time savings of more than 95% . for the instances that both time out ( time02 in the figure )",
    ", the time savings is not present since both solvers use the full 900 seconds .",
    "from these results we can see that when the @xmath0-clusteringapproach does not time out , we usually save time and when the approach does time out we often find better quality solutions as compared to the non - clustered approach .",
    "it is worth emphasizing that we are not necessarily recommending solving @xmath2 instances in this manner .",
    "we are simply using @xmath2as an illustrative example to show how @xmath0-clusteringcan be used to reduce computation time in a given solver .",
    "many discrete path planning problems are solved with ip solvers and as such we hope our results help provide some insight as to how @xmath0-clustering would work on other path planning problems . in general unless the solver approach ( ip or not ) takes advantage of the clustering , there is no guarantee that a computation saving will be achieved .",
    "as shown in figure  [ fig : example ] we have also performed @xmath0-clusteringon real - world environments .",
    "the figure shows the floor - plan for a portion of one floor of the engineering  5 building at the university of waterloo .",
    "red dots denote the locations of desks within the environment .",
    "we encoded the environment with a graph , where there is a vertex for each red dot and edge weights between vertices are given by the shortest axis - aligned obstacle free path between the locations ( obstacle - free manhattan distances ) .",
    "the figure shows the results of clustering for @xmath228 .",
    "we see that locations that are close together are formed into clusters unless there are other vertices in close proximity .",
    "a path planning problem on this environment could be robotic mail delivery , where a subset of locations must be visited each day .",
    "the clusters could then be visited together ( or visited using the same robot ) .",
    "-clustering approach .",
    "the data is categorized by instances that did not time out ( time01 ) and instances that did time out ( time02 ) . ]    -clustering approach with respect to the @xmath2approach .",
    "the data is categorized by instances that did not time out ( cost01 and time01 ) and instances that did time out ( cost02 and time02 ) . ]    .",
    "experimental results for tsplibinstances : @xmath233 reports the number of @xmath0-clusters , % error reports the average error from optimal and time column reports the average solver time .",
    "the instances where the @xmath4 approach outperforms the @xmath2approach are highlighted in bold .",
    "results are sorted from least to most difficult for the non - clustered approach .",
    "[ cols=\"<,^ , > , > , > , > \" , ]",
    "in this paper we presented a new clustering approach called @xmath0-clustering .",
    "we have shown how it can be used to approximate the discrete path planning problems to within a constant factor of @xmath3 , more efficiently than solving the original problem .",
    "we verify these findings with a set of experiments that show on average a time savings and a solution quality that is closer to the optimal solution than it is to the bound . for future directions we will be investigating other path planning applications , which includes online path planning with dynamic environments .      s.  l. smith , j.  tmov , c.  belta , and d.  rus , `` optimal path planning for surveillance with temporal - logic constraints , '' _ the international journal of robotics research _ , vol .",
    "30 , no .",
    "14 , pp . 16951708 , 2011 .",
    "v.  d. blondel , j .- l .",
    "guillaume , r.  lambiotte , and e.  lefebvre , `` fast unfolding of communities in large networks , '' _ journal of statistical mechanics : theory and experiment _ , vol .",
    "2008 , no .",
    "10 , p. p10008 , 2008 .",
    "h.  meyerhenke , b.  monien , and t.  sauerwald , `` a new diffusion - based multilevel algorithm for computing graph partitions , '' _ journal of parallel and distributed computing _ , vol .",
    "69 , no .  9 , pp . 750761 , 2009 .",
    "x.  jin , s.  gupta , j.  m. luff , and a.  ray , `` multi - resolution navigation of mobile robots with complete coverage of unknown and complex environments , '' in _ american control conference _ , 2012 ,",
    ". 48674872 .",
    "m.  levihn , l.  p. kaelbling , t.  lozano - perez , and m.  stilman , `` foresight and reconsideration in hierarchical planning and execution , '' in _",
    "ieee / rsj international conference on intelligent robots and systems _ , 2013 , pp .",
    "224231 .",
    "a.  das , m.  diu , n.  mathew , c.  scharfenberger , j.  servos , a.  wong , j.  s. zelek , d.  a. clausi , and s.  l. waslander , `` mapping , planning , and sample detection strategies for autonomous exploration , '' _ journal of field robotics _ , vol .",
    "31 , no .  1 ,",
    "pp . 75106 , 2014 .",
    "l.  gouveia and j.  m. pires , `` the asymmetric travelling salesman problem and a reformulation of the miller  tucker",
    " zemlin constraints , '' _",
    "european journal of operational research _ ,",
    "112 , no .  1 ,",
    "pp . 134146 , 1999 ."
  ],
  "abstract_text": [
    "<S> in this paper we consider discrete robot path planning problems on metric graphs . we propose a clustering method , @xmath0-clusteringfor the planning graph that significantly reduces the number of feasible solutions , yet retains a solution within a constant factor of the optimal . by increasing the input parameter @xmath0 , </S>",
    "<S> the constant factor can be decreased , but with less reduction in the search space . </S>",
    "<S> we provide a simple polynomial - time algorithm for finding optimal @xmath0-clusters , and show that for a given @xmath0 , this optimal is unique . </S>",
    "<S> we demonstrate the effectiveness of the clustering method on traveling salesman instances , showing that for many instances we obtain significant reductions in computation time with little to no reduction in solution quality . </S>"
  ]
}