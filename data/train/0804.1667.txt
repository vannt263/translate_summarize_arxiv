{
  "article_text": [
    "the ( edinburgh ) logical framework ( lf ) is a dependent type theory introduced by harper , honsell and plotkin  @xcite as a framework for specifying and reasoning about formal systems .",
    "it has found many applications , including proof - carrying code  @xcite .",
    "the twelf system @xcite has been used to mechanize reasoning about lf specifications .",
    "the cornerstone of lf is the idea of encoding _ judgments - as - types _ and _ proofs - as - terms _ whereby judgments of a specified formal system are represented as lf - types and the lf - terms inhabiting these lf - types correspond to valid deductions for these judgments .",
    "hence , the validity of a deduction in a specified system is equivalent to a type checking problem in lf .",
    "therefore correct use of lf to encode other logics depends on the proofs of correctness of type checking algorithms for lf .",
    "type checking in lf is decidable , but proving decidability is nontrivial because types may contain expressions with computational behavior .",
    "this means that typechecking depends on equality - tests for lf - terms and lf - types .",
    "several algorithms for such equality - tests have been proposed in the literature  @xcite .",
    "harper and pfenning @xcite present a type - driven algorithm that is practical and also has been extended to a variety of richer languages .",
    "the correctness of this algorithm is proved by establishing soundness and completeness with respect to the definitional equality rules of lf .",
    "these proofs are involved : harper and pfenning s detailed pencil - and - paper proof spans more than 30 pages , yet still omits many cases and lemmas .",
    "we present a formalization of the main results of harper and pfenning s article . to our knowledge",
    "this is the first formalization of these or comparable results .",
    "while most of the formal proofs go through as described by , we found a few do _ not _ go through as described , and there is a _",
    "gap _ in the proof of soundness .",
    "although the problem can be avoided easily by adding to or changing the rules of , we found that it was still possible to prove the original results , though the argument was nontrivial .",
    "our formalization was essential not only to find this gap in harper and pfenning s argument , but also to find and validate the possible repairs relatively quickly .",
    "we used isabelle / hol  @xcite and the nominal datatype package  @xcite for our formalization .",
    "the latter provides an infrastructure for reasoning conveniently about datatypes with a built - in notion of alpha - equivalence : it allows to specify such datatypes , provides appropriate recursion combinators and derives strong induction principles that have the usual variable convention already built - in .",
    "the nominal datatype package has already been used to formalize logical relation arguments similar to ( but much simpler than ) those in harper and pfenning s completeness proof  @xcite ; it is worth noting that logical relations proofs are currently not easy to formalize in twelf itself , despite the recent breakthrough by  .    besides proving the correctness of their equivalence algorithm , harper and pfenning also sketched a proof of decidability .",
    "unfortunately , since isabelle / hol is based on classical logic , proving decidability results of this kind is not straightforward .",
    "we have formalized the essential parts of the decidability proof by providing inductive definitions of the complements of the relations we wish to decide .",
    "it is clear by inspection that these relations define recursively enumerable sets , which implies decidability , but we have not formalized this part of the proof .",
    "a complete proof of decidability would require first developing a substantial amount of computability theory within isabelle / hol , a problem of independent interest we leave for future work .",
    "we followed the arguments in harper and pfenning s article very closely using the nominal datatype package for our formalisation , but the current system does not allow us to generate executable code directly from definitions involving nominal datatypes .",
    "we therefore also implemented a type - checking algorithm based on the locally nameless approach for representing binders @xcite .",
    "we proved that the nominal datatype formalization of harper and pfenning s algorithm is equivalent to the locally nameless formulation .",
    "moreover , by making the choice of fresh names explicit , we can generate a working ml implementation directly from the verified formalization .",
    "[ [ outline ] ] outline + + + + + + +    we first briefly review lf and its representation in the nominal datatype package ( sec .",
    "[ sec : background ] ) . in sec .",
    "[ sec : formalization ] , we report on our formalization .",
    "to ease comparison , sec .",
    "[ sec : formalization ] follows the structure of   closely , although this article is self - contained .",
    "sections  [ sec : syntactic][sec : typechecking ] summarize our formalization of the basic syntactic properties of lf and soundness and completeness of the equivalence and typechecking algorithms .",
    "we discuss additional lemmas , proof details , and other complications arising during the formalization , and discuss the gap in the soundness proof and its solutions in detail . the remainder of sec .",
    "[ sec : formalization ] reports upon formalizations of additional results whose proofs were only sketched by  .",
    "these include    the admissibility of strengthening and strong extensionality rules ( sec .",
    "[ sec : strengthening ] ) ,    a partial formalization of decidability of algorithmic typechecking for lf , and a discussion of the current limitations of isabelle / hol in formalizing proofs about decidability ( sec .",
    "[ sec : decidability ] ) ,    the existence and uniqueness of quasicanonical forms ( sec .",
    "[ sec : quasicanonical ] ) , and    a partial formalization of an example proof of adequacy ( sec .",
    "[ sec : adequacy ] ) , and a discussion of complications in the proof sketched in  @xcite .    in sec .",
    "[ sec : locally - nameless ] we define and verify the correctness of a type checking algorithm based on the locally nameless representation of binders , from which isabelle / hol can generate executable code .",
    "this amounts to a verified typechecker for lf , an original contribution of this article .",
    "[ sec : discussion ] summarizes the authors experience with the formalization , sec .",
    "[ sec : related ] discusses related and future work and sec .",
    "[ sec : concl ] concludes .",
    "[ [ contributions ] ] contributions + + + + + + + + + + + + +    the metatheory of lf is well - understood : it had been studied for many years before the definitive presentation in  .",
    "their main results were not in serious doubt , and formalizing such work might strike some readers as perverse or pedantic .",
    "nevertheless , our formalization is an original and significant contribution to the study of logical frameworks and mechanized metatheory , because :    it tests the capabilities of the nominal datatype package for formalizing a large and complex metatheoretical development ,    it provides high confidence in algorithms that are widely trusted but have never been mechanically verified ,    it elucidates a few subtle issues in the basic metatheory of lf , and    it constitutes a re - usable library of formalized results about lf , providing a foundation for verification of twelf - style meta - reasoning about lf specifications , extensions to lf , or related type theories that are not as well - understood .",
    "this article is a revised and extended version of a previous conference paper presenting our initial formalization of the metatheory of lf  @xcite .",
    "the formal development described by this article can be obtained by request from the authors , and is available at ` http://isabelle.in.tum.de/nominal/lf/ ` .",
    "[ sec : background ]    this article assumes some familiarity with formalization in isabelle / hol and its ml - like notation for functions and definitions .",
    "we used the nominal datatype package in isabelle / hol  @xcite to formalize the syntax and judgments of lf .",
    "the key features we rely upon are    1 .",
    "support for _ nominal datatypes _ with a built - in notion of binding ( i.e.  @xmath0-equivalence classes ) , 2 .",
    "facilities for defining functions over nominal datatypes ( such as substitution ) by _ ( nominal ) primitive recursion _ , and 3 .",
    "_ strong induction principles _ for datatypes and inductive definitions that build in barendregt - style renaming conventions .",
    "together , these features make it possible to formalize most of the definitions and proofs following their paper versions closely .",
    "we will not review the features of this system in this article , but will discuss details of the formalization only when they introduce complications .",
    "the interested reader is referred to previous work on nominal techniques and the nominal datatype package for further details  @xcite .",
    "the logical framework lf  @xcite is a dependently - typed lambda - calculus .",
    "we present it here following closely the article by harper and pfenning  @xcite , to which we refer from now on as for brevity .",
    "the syntax of lf includes _",
    "kinds _ , _ type families _ and _ objects _ defined by the grammar :    [ cols=\"<,>,^ , < \" , ]     [ [ metrics - about - the - formalization ] ] metrics about the formalization + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in table  [ tab : meaningless - metrics ] , we report some simple metrics about our formalization such as the sizes , number of lines of text , and number of lemmas in each theory in the main formalization . as table  [",
    "tab : meaningless - metrics ] shows , the core ` lf ` theory accounts for about 20% of the development .",
    "these syntactic properties are mostly straightforward , and their proofs merit only cursory discussion in , but some lemmas have many cases which must each be handled individually .",
    "the ` decidability ` theory accounts for another 15% ; the quasidecidability proofs are verbose but largely straightforward .",
    "the ` locallyn ` theory proves that the nominal datatypes version of lf is equivalent to a locally nameless formulation ; this accounts for about 25% of the development .",
    "the effort involved in this part was therefore quite substantial : it can be explained by the lack of automatic infrastructure for the locally nameless representation of binders in isabelle / hol , but also by the inherent subtleties when working with this representation .",
    "a number of lemmas need to be carefully stated , and in a few cases in rather non - intuitive ways .",
    "the remaining theories account for at most 510% of the formalization each ; the ` weakalgorithm ` theory defines the weak algorithmic equivalence judgment and proves the additional properties needed for the third solution , and accounts for only around 2% of the total development .",
    "the merit of metrics such as proof size or number of lemmas is debatable .",
    "we have not attempted to distinguish between meaningful lines of proof vs.  blank or comment lines ; nor have we distinguished between significant and trivial lemmas .",
    "nevertheless , this information should at least convey an idea of the _ relative _ effort involved in each part of the proof .",
    "[ [ correctness - of - the - representation ] ] correctness of the representation + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the facilities for defining and reasoning about languages with binding provided by the nominal datatype package are convenient , but their use may not be persuasive to readers unfamiliar with nominal logic and abstract syntax .",
    "thus , a skeptical reader might ask whether these representations , definitions and reasoning principles are really _ correct _ ; that is , whether they are equivalent to the definitions in , as formalized using some more conventional approach to binding syntax . for higher - order abstract syntax representations , this property is often called _ adequacy _ ; this term appears to have been coined in the context of lf  @xcite , due to the potential problems involved in reasoning about higher - order terms modulo alpha , beta and eta - equivalence .",
    "adequacy is also important for nominal techniques and deserves further study .",
    "we believe that the techniques explored in existing work on the semantics of nominal abstract syntax and its implementation in the nominal datatype package  @xcite suffices for informally judging the correctness of our formalization .",
    "there has also been some prior work on formalizing adequacy results for nominal datatypes via isomorphisms .",
    "proves a bijective correspondence between nominal datatypes and a conventional named implementation of the @xmath1-calculus modulo @xmath0-equivalence .",
    "have formalized isomorphisms between nominal and de bruijn representations , and they provide further citations to several other isomorphism results .",
    "our proof of equivalence to a locally nameless representation described in sec .",
    "[ sec : locally - nameless ] also gives evidence for the correctness of the nominal datatype representation .    in any case , our formalization has exposed some subtle issues which make sense in the context of lf , independently of whether or not nominal datatypes in isabelle / hol really capture our informal intuitions about abstract syntax with binding .    [",
    "[ reflecting - on - formalizing - lf ] ] reflecting on formalizing lf + + + + + + + + + + + + + + + + + + + + + + + + + + + +    it has been observed ( as discussed , for example , by ) that the process of formalization can suggest changes that both ease formalization and clarify the original system .",
    "likewise , our formalization provides a basis for reflecting on how the lf metatheory might be adapted to make it easier to formalize .",
    "most obviously , many of the problems we encountered with soundness disappear if we simply add the omitted extensionality rule or change the equivalence algorithm .",
    "a more subtle complication we encountered was that since the algorithmic rules in do not enforce well - formedness , it is not even guaranteed that a variable appearing in one of the terms being compared also appears in the context @xmath2 .",
    "this necessitates extra freshness conditions on many rules and induction hypotheses to ensure that strong nominal induction principles can be used safely .",
    "building these constraints into the algorithmic rules might make several of the proofs about the equivalence algorithm cleaner .",
    "another practical consideration was that the syntax and rules of lf in exhibit redundancy , which leads to additional ( albeit straightforward ) formalization effort .",
    "for example , constants , dependent products , and applications each appear at more than one level of the syntax , resulting in proofs with redundant cases .",
    "similarly , because objects , kinds and types are defined by mutual recursion , each inductive proof about syntax needs to have three inductive hypotheses and ten cases .",
    "likewise , any proof concerning the definitional judgments needs to state eight simultaneous induction hypotheses and thirty - five cases .",
    "collapsing the three levels of lf syntax into one level , and collapsing the many definitional judgments into a smaller number could make the formalization much less verbose , as in pure type systems  @xcite , at the cost of increasing the distance between the paper version and the formalization . on the other hand , such an approach",
    "could also make it easier to generalize proofs about lf to richer type theories .",
    "[ sec : related ]    s lego formalization of pure type systems is probably the most extensive formalization of a dependent type theory in a theorem prover . their formalization introduced the locally nameless variant of de bruijn s name - free approach  @xcite and considered primarily syntactic properties of pure type systems with @xmath3-equivalence , including a proof of strengthening . subsequently verified the partial correctness of typechecking algorithms for certain classes of pure type systems including lf .    completely formalizing metatheoretic and syntactic proofs about languages and logics with",
    "name - binding has been a long - standing open problem in computational logic .",
    "we will not give a detailed survey of all of these techniques here , but mention a few recent developments .",
    "in the last five years , catalyzed by the poplmark challenge  @xcite , there has been renewed interest in this area .",
    "have developed a methodology for formalizing metatheory in coq using the locally nameless representation to manage binding , and using cofinite quantification to handle fresh names .",
    "chlipala s _ parametric higher - order abstract syntax _ is another recently developed technique for reasoning about abstract syntax in coq , and has been applied to good effect in reasoning about compiler transformations  @xcite .",
    "are developing cinic , a variant of coq that provides built - in support for nominal abstract syntax ( generalizing a simple nominal type theory developed by ) .",
    "have developed abella , a proof assistant for reasoning about higher - order abstract syntax , inductive definitions , and generic quantification ( similar to nominal logic s fresh - name quantifier ) .",
    "have recently discovered techniques for performing logical relations proofs in twelf  @xcite .",
    "formalizing the results in this article using these or other emerging tools would provide a useful comparison of these approaches , particularly concerning decidability proofs , which ought to be easier in constructive logics .",
    "algorithms for equivalence and canonicalization for dependent type theories have been studied by several authors .",
    "prior work on equivalence checking for lf has focused on first checking well - formedness with respect to simple types , then @xmath3- or @xmath4-normalizing ; these approaches are discussed in detail by  .",
    "algorithm @xcite is similar to harper and pfenning s but operates on untyped terms .",
    "approach @xcite involves first type - directed @xmath5-expansion and then @xmath3-normalization , and relies on standard properties such as the church - rosser theorem , strong normalization of @xmath3-reduction and strengthening .",
    "extends this proof technique to show termination of coquand s and harper and pfenning s algorithms , and gives a terminating type - directed algorithm for checking @xmath4-equivalence in system f. it may be interesting to formalize these algorithms and proofs and compare with harper and pfenning s proof .    our formalization provides a foundation for several possible future investigations .",
    "we are interested in extending our formalization to include verifying twelf - style meta - reasoning about lf specifications , following harper and licata s detailed informal development of canonical lf  @xcite .",
    "doing so could make it possible to extract isabelle / hol theorems from twelf proofs , but as discussed earlier , formalizing canonical lf , hereditary substitutions , and the rest of harper and licata s work appears to be a substantial challenge",
    ".    it would also be interesting to extend our formalization to accommodate extensions to lf involving ( ordered ) linear logic , concurrency , proof - irrelevance , or singleton kinds , as discussed by .",
    "we hope that anyone who proposes an extension to lf will be able to use our formalization as a starting point for verifying its metatheory .",
    "[ sec : concl ]    lf is an extremely convenient tool for defining logics and other calculi involving binding syntax .",
    "it has many compelling applications and underlies the system twelf , which has a proven record in formalizing many programming language calculi .",
    "hence , it is of intrinsic interest to verify key properties of lf s metatheory , such as the correctness and decidability of the typechecking algorithms .",
    "we have done so , using the nominal datatype package for isabelle / hol .",
    "the infrastructure provided by this package allowed us to follow the proof of harper and pfenning closely .",
    "for our formalization we had the advantage of working from harper and pfenning s carefully - written informal proof , which withstood rigorous mechanical formalization rather well .",
    "still we found in this informal proof one gap and numerous minor complications .",
    "we have shown that they can be repaired .",
    "we have also partially verified the decidability of the equivalence and typechecking algorithms , although some work remains to formally prove decidability per se .",
    "formalizing decidability proofs of any kind in isabelle / hol appears to be an open problem , so we leave this for future work .",
    "while verifying correctness of proofs is a central motivation for doing formalizations , it is not the only one .",
    "there is a second important benefit  they can be used to experiment with changes to the system rapidly . by replaying a modified formalization in a theorem prover",
    "one can immediately focus on places where the proof fails and attempt to repair them rather than re - checking the many cases that are unchanged .",
    "this capability was essential in fixing the soundness proof , and it illustrates one of the distinctive advantages of performing such a formalization . had we attempted to repair the gap using only the paper proof , experimenting with different solutions would have required manually re - checking the roughly 31 pages of paper proofs for each change .",
    "our formalization is not an end in itself but also provides a foundation for further study in several directions .",
    "researchers developing extensions to lf may find our formalization useful as a starting point for verifying the metatheory of such extensions .",
    "we plan to further investigate hereditary substitutions and adequacy proofs in lf and canonical lf .",
    "more ambitiously , we contemplate formalizing the meaning and correctness of metatheoretic reasoning about lf specifications ( as provided by the twelf system ) inside isabelle / hol , and extracting isabelle / hol theorems from twelf proofs .",
    "we are extremely grateful to bob harper for discussions about lf and the proof .",
    "benjamin pierce and stephanie weirich have also made helpful comments on drafts of this paper .    ,",
    "michael , n. , stump , a. , and virga , r. 2003 . a trustworthy proof checker .  _",
    "31 _ , 231260 .    ,",
    "charguraud , a. , pierce , b.  c. , pollack , r. , and weirich , s. 2008 .",
    "engineering formal metatheory . in _",
    "acm , 315 .    ,",
    "bohannon , a. , fairbairn , m. , foster , j.  n. , pierce , b.  c. , sewell , p. , vytiniotis , d. , washburn , g. , weirich , s. , and zdancewic , s. 2005 .",
    "mechanized metatheory for the masses : the poplmark challenge . in _",
    "tphols_. 5065 .",
    "\\2002 . executing higher order logic . in _ proc .  of the international workshop on types for proofs and programs_. number 2277 in lncs .",
    ". nominal inversion principles . in _",
    "tphols_. 7185 .",
    "\\2006 . completeness and herbrand",
    "theorems for nominal logic .",
    "_ 71 , _  1 , 299320 .",
    "\\2009 . a simple nominal type theory .  _ 228 _ , 3752 .",
    "lfmtp 08 : proceedings of the fourth international workshop on logical frameworks and meta - languages .",
    "parametric higher - order abstract syntax for mechanized semantics . in _",
    "icfp _ , j.  hook and p.  thiemann , eds .",
    "acm , 143156 .",
    "an algorithm for testing conversion in type theory . in",
    "_ logical frameworks _ , g.  huet and g.  plotkin , eds .",
    "cambridge university press , 255279 .",
    "lambda - calculus notation with nameless dummies , a tool for automatic formula manipulation .",
    "_ 34 , _  5 , 381392 .",
    "\\2002 . a new approach to abstract syntax with variable binding .",
    "_ 13 _ , 341363 .    , miller , d. , and nadathur , g. 2008",
    "combining generic judgments with recursive definitions . in _",
    "lics_. 3344 .",
    "\\1999 . some logical and syntactical observations concerning the first - order dependent type system @xmath1p .",
    "_ 9 , _  4 , 335359 .",
    "2005a . justifying algorithms for @xmath3-@xmath5-conversion . in _ fossacs _ , v.  sassone , ed .",
    "lncs , vol .",
    "springer , 410424 .",
    "2005b . a syntactic approach to eta equality in type theory . in _",
    "acm , 7584 .    ,",
    "honsell , f. , and plotkin , g. 1993 . a framework for defining logics .",
    "_ 40 , _  1 , 143184 .",
    "mechanizing metatheory in a logical framework .",
    "_ 17 , _  4 - 5 , 613673 .",
    "\\2005 . on equivalence and canonical forms in the lf type theory .",
    "_ 6 , _  1 , 61101 .",
    "some lambda calculus and type theory formalized .",
    "_ 23 , _  3 - 4 , 373409 .",
    "formalising in nominal isabelle crary s completeness proof for equivalence checking . in _",
    "entcs , vol . 196 .",
    "proof - carrying code . in _",
    "acm , 106119 .    ,",
    "paulson , l.  c. , and wenzel , m. 2002 . .",
    "lncs , vol . 2283 . springer .",
    "proof pearl : de  bruijn terms really do work . in _",
    "lncs , vol .",
    "springer , 207222 .",
    "logical frameworks . in _",
    "handbook of automated reasoning _ , j.  a. robinson and a.  voronkov , eds .",
    "elsevier and mit press , 10631147 .",
    "system description : twelf  a meta - logical framework for deductive systems . in _",
    "lnai , vol .",
    "202206 .",
    "proof pearl : the power of higher - order encodings in the logical framework lf . in _",
    "tphols_. 246261 .",
    "nominal logic , a first order theory of names and binding .",
    "_ 183 _ , 165193 .",
    "\\2006 . alpha - structural recursion and induction .",
    "_ 53 , _  3 ( may ) , 459506 .",
    "\\1995 . a verified typechecker . in _ tlca _ ,",
    "m.  dezani - ciancaglini and g.  d. plotkin , eds .",
    "lncs , vol .",
    "springer , 365380 .",
    "\\2008 . structural logical relations . in _ lics_. ieee computer society , 6980 .    , pitts , a.  m. , and gabbay , m.  j. 2003 .",
    "freshml : programming with binders made simple . in _",
    "eighth acm sigplan international conference on functional programming ( icfp 2003 ) , uppsala , sweden_. acm press , 263274 .",
    "reflections on trusting trust .",
    "_ 27 , _  8 , 761763 .",
    "nominal techniques in isabelle / hol .",
    "_ 40 , _  4 , 327356 .    ,",
    "berghofer , s. , and norrish , m. 2007 .",
    "barendregt s variable convention in rule inductions . in _",
    "lnai , vol .",
    "4603 . 3550 .    , cheney , j. , and berghofer , s. 2008 .",
    "mechanizing the metatheory of lf . in _ proceedings of the 23rd annual ieee symposium on logic in computer science ( lics 2008)_. 4556 .",
    "nominal techniques in isabelle / hol . in _",
    "lncs , vol .",
    "3632 . 3853 .",
    "revisiting cut - elimination : one difficult proof is really a proof . in _ rta _ , a.  voronkov , ed .",
    "lecture notes in computer science , vol . 5117 .",
    "springer , 409424 .    ,",
    "cervesato , i. , pfenning , f. , and walker , d. 2003 . a concurrent logical framework",
    "i : judgments and properties . tech .",
    "cmu - cs-02 - 101 , carnegie mellon university . may .    , stump , a. , and austin , e. 2009 . the calculus of nominal inductive constructions : an intensional approach to encoding name - bindings . in _",
    "lfmtp 09 : proceedings of the fourth international workshop on logical frameworks and meta - languages_. acm , new york , ny , usa , 7483 .    received october 2009 ; revised april 2010 ; accepted april 2010",
    "if then and ."
  ],
  "abstract_text": [
    "<S> lf is a dependent type theory in which many other formal systems can be conveniently embedded . </S>",
    "<S> however , correct use of lf relies on nontrivial metatheoretic developments such as proofs of correctness of decision procedures for lf s judgments . </S>",
    "<S> although detailed informal proofs of these properties have been published , they have not been formally verified in a theorem prover . </S>",
    "<S> we have formalized these properties within isabelle / hol using the nominal datatype package , closely following a recent article by harper and pfenning . in the process , we identified and resolved a gap in one of the proofs and a small number of minor lacunae in others . </S>",
    "<S> we also formally derive a version of the type checking algorithm from which isabelle / hol can generate executable code . </S>",
    "<S> besides its intrinsic interest , our formalization provides a foundation for studying the adequacy of lf encodings , the correctness of twelf - style metatheoretic reasoning , and the metatheory of extensions to lf .    </S>",
    "<S> [ lambda calculus and related systems ]    this is a revised and expanded version of a conference paper  @xcite .    </S>",
    "<S> cheney was supported by a royal society university research fellowship and by epsrc grant gr / s63205/01 . </S>",
    "<S> urban was supported by an emmy noether grant from the dfg .    corresponding author : j. cheney , informatics forum , 10 crichton street , edinburgh eh8 9ab , scotland , email : ` jcheney@inf.ed.ac.uk ` . </S>"
  ]
}