{
  "article_text": [
    "over the past decade , the declining price and increasing processing power of computing hardware has allowed cluster systems to become much more common .",
    "although these systems are inexpensive compared with earlier incarnations of clusters , they still represent a considerable investment by an organization .",
    "many organizations have highly fluctuating demand for supercomputing resources and can not justify the purchase of hardware to satisfy their peak demand .",
    "other organizations possess systems adequate to handle their peak demand , but these systems are then left idle when demand drops .",
    "utility computing , also known as on - demand computing , is a model of computing that allows organizations or individuals to accommodate fluctuating demand for computing resources .",
    "users are able to acquire extra processing power as it is needed , obviating the need to purchase and maintain expensive hardware in order to meet maximum computing demands .",
    "there are many commercial initiatives that attempt to provide utility computing services  @xcite .",
    "some approaches establish a centralized service provider similar to traditional utilities like electricity or water . in these approaches ,",
    "a provider organization sets up supercomputing systems which are then leased to outside users as needed .",
    "another common approach is to deploy large systems to user sites , then unlock computing resources on these systems as they are needed by the user .",
    "these solutions have the disadvantage of tying users to a particular vendor and a particular platform , making it more difficult for users to get a fair price on computation time .",
    "research institutions are developing projects related to specific aspects of utility computing  @xcite .",
    "while commercial solutions are typically driven by providing users with compute cycles as they are needed and maximizing corporate profits , academic research tends to focus on using existing supercomputing systems as efficiently as possible .",
    "this is typically accomplished by distributing jobs across many systems run by many organizations and allocating new jobs to the systems with the lightest loads .",
    "we present superglue , a software infrastructure for utility computing based on  @xcite .",
    "it employs a distributed network of web services to automatically bring together jobs submitted by users with clusters willing and able to execute them .",
    "each web service encapsulates a part of the functionality required to support the infrastructure as a whole , and it communicates with other web services to access functionality it does not provide for itself .",
    "the infrastructure is cross - platform and sits on top of existing supercomputing hardware and software .",
    "it does not have any requirements concerning the specifications of the system , such as requiring a particular batch scheduler or processor architecture .",
    "the superglue infrastructure leverages the idle cycles on existing systems and allocates them to users as they are needed . unlike many solutions that attempt to allocate cycles to load systems equally ,",
    "superglue is designed to generate an economic environment where computing cycles are traded as a commodity , either through a bartering system for other computing cycles or in exchange for real money .",
    "not only can users purchase computing cycles as they are needed , but owners of clusters are also able to profit from idle processor time .",
    "this economy allows market forces to regulate the price and availability of computing time and scheduling features within the superglue system .",
    "the globus toolkit  @xcite is a set of utilities meant to aid in the setup and deployment of a grid infrastructure and grid enabled applications .",
    "globus is not intended to be a monolithic grid solution , but rather consists of a set of interoperable tools on top of which grid - aware applications can be built .",
    "globus is organized around three `` pillars '' , each of which is represented by a member of the globus toolkit : the grid allocation resource manager ( gram ) for resource management , gridftp for data transfer , and the monitoring and discovery system ( mds ) for information management and resource discovery .",
    "all of these components rest on a foundation of strong encryption , provided by the grid security infrastructure ( gsi ) .",
    "the moab grid scheduler  @xcite ( moab ) is a tool which is intended to facilitate the creation of a grid .",
    "moab is a meta - scheduler which runs on top of lower level schedulers .",
    "individual organizations comprising a grid run the maui cluster scheduler along with a resource manager like pbs  @xcite .",
    "maui enhances the resource manager by providing advanced quality of service and reservation capabilities , and allows communication and coordination with moab .",
    "moab then provides a grid - level global submission queue , and can use reservations to allocate resources across clusters if desired .    globus and moab",
    "seek to solve the problem of coordinating distributed resource allocation among cooperating organizations which make up a grid  @xcite .",
    "these systems and superglue have similar goals in that they all seek to increase the overall utilization efficiency of a network of supercomputing resources .",
    "one feature which sets superglue apart from these other systems is the leveraging of market forces to determine resource allocation . as is described in section  [ implementation ] , this will require the integration of a banking system into superglue .",
    "several other projects address the issue of market forces in grid resource allocation .",
    "gridbank  @xcite is a proposal for a grid accounting services architecture ( gasa ) to provide a grid - wide accounting and banking infrastructure . the gold accounting manager  @xcite may , in the future , enable market driven resource brokering in the moab grid scheduler",
    ".      faucets  @xcite is a project whose goal is to create a market economy for computing cycles .",
    "faucets has been developed in conjunction with the charm  @xcite system , and much of the work on the project to date has focused on the development of an adaptive scheduler which can dynamically resize charm - based batch jobs .",
    "faucets features an architecture similar to superglue , whereby clients negotiate with a broker to determine which resource will run a given job .",
    "it is our hope superglue will benefit in terms of extensibility and interoperability by basing its architecture on composable web services .",
    "superglue will create a computational economy for compute cycles , treating processing time as a product that is produced by clusters during idle periods and sold to users when they need additional processing capabilities .",
    "this idea is not new .",
    "many projects in the past have suggested trading computation time as a commodity and relying on market forces to regulate price  @xcite . these designs , like superglue , use supply and demand to ensure fair prices and an efficient market .",
    "clusters compete against each other in selling computation time to buyers .",
    "they can differentiate their products based on hardware and software specifications , scheduling features , quality of service , and price .",
    "providing exceptional performance in one or more of these areas can provide a cluster with a competitive advantage over other sellers , allowing it to sell its computation time at a higher price while still attracting buyers .",
    "superglue allows clusters to use custom bidding algorithms for generating the price they offer to buyers . a cluster system can customize its price based on its current job load and on the features and quality of service required by a user",
    "this enables a system to pass on the cost of more expensive features to the users who employ them , and it also enables a system to affect its job load by considering its current load when generating a price .    the superglue infrastructure seeks to reduce the barriers to entry for potential sellers of computation time .",
    "it allows anyone to easily install a lightweight front - end service on their cluster to automatically make the cluster s spare computation time available to potential buyers .",
    "this ease of entry to the market should result in a sufficiently large population of suppliers for economic principles to take effect .",
    "supply and demand will encourage providers to become more efficient so they can sell computation time at a lower price or so they can upgrade the performance , features , and quality of service they are able to provide . in this way",
    ", superglue encourages improvement of the grid infrastructure .",
    "superglue is a software infrastructure for utility computing .",
    "it relies on existing supercomputing resources to provide the hardware aspects of the system rather than mandating the deployment of new supercomputing resources .",
    "superglue encourages both users and clusters to participate in the network by providing a valuable service to each party .",
    "the system matches each submitted job with the cluster willing to execute the job for the lowest cost to the user .",
    "this allows users to obtain additional computing cycles during spikes in their workload by submitting their jobs to external systems with available computing time .",
    "it simultaneously provides clusters with the opportunity to reduce their idle time while earning monetary compensation .",
    "this provides a tangible benefit to supercomputing systems while also reflecting the goals of utility computing , where customers pay only for the computing time they use .    the underlying infrastructure of superglue is intended to be nearly transparent from a user s perspective .",
    "like traditional job submission tools that reside on a cluster  @xcite , it submits a job using a simple command line program .",
    "the exact syntax will be different from the tools that the user already knows , but it will look familiar . behind",
    "this facade of simplicity hides a substantial amount of complexity , all automated by superglue .",
    "a user constructs a job specification to precisely describe the job to candidate cluster systems .",
    "this description encompasses all aspects of the job , including the resources , time allocation , and quality of service it will require , as well as user - related information such as the type of authentication that should be used .",
    "when the job is submitted , superglue searches for computing systems that can fulfill these requirements and queries each system for the price it will charge to execute the job .",
    "the system offering the lowest price while fulfilling the requirements is selected by superglue to run the job . the money requested by the system",
    "is deducted from the user s account and held in escrow until the job is completed .",
    "the user s files for the job are staged to the selected cluster s local file system and the job is submitted . when the job execution completes , superglue confirms fulfillment of the job specification , then transfers the money in escrow to the cluster s account .    the system is also intended to be nearly transparent from a cluster s perspective . the cluster is not required to run specific , unusual software , such as a certain scheduler .",
    "the superglue infrastructure sits on top of individual clusters , and jobs are submitted to the queues already in place on the system .",
    "all that is required is that the cluster run an additional , light weight , front - end service that allows it to interact with the rest of the superglue system .",
    "this inobstrusiveness will make it easier for systems to join the superglue network .",
    "since superglue relies on the scheduler that a supercomputing system chooses to use , it can not guarantee that all computing resources in the network will be able to provide specific features such as deadlines or time reservations .",
    "however , since each system can use a front - end service specific to the scheduler it is using , the front - end can surface such features to users of the superglue network if the system administrator chooses to do so .",
    "if a user requires a particular feature and a system does not support it , that system will not be selected to run the job .",
    "superglue consists of a large collection of small web services , each providing a composable piece of functionality to the overall system .",
    "each service exposes an xml - rpc  @xcite interface to share its functionality with the rest of the infrastructure .",
    "the particular web services that are contacted by a component of the infrastructure are encoded in a configuration file for that component .",
    "this allows a user to easily plug his application into a new implementation of an external component , should one become available .",
    "additionally , the superglue infrastructure can be easily expanded by creating new clients that plug into existing superglue services .",
    "each superglue component has been implemented in python due to its capacity to facilitate rapid development of complex software with relatively little code , and for its excellent support for creating internet and web - based applications .",
    "as superglue becomes more mature , components can be rewritten in other languages as demanded by performance , security , or other concerns .",
    "the distributed nature of the infrastructure allows refinement to occur transparently without requiring users to reinstall every component of the system .",
    "this characteristic , combined with the distributed nature , small size , and simplicity of individual components also makes it feasible for a third party to quickly develop substitute implementations of provided services .",
    "we have identified and implemented three core components of the superglue infrastructure : the client program , the broker service , and the cluster front - end service .",
    "these pieces are the bare essentials required for a user to submit a job to an unspecified supercomputing resource .",
    "each component is simple by itself , but when composed together they form the basis for a powerful utility computing platform .",
    "we describe these components in greater detail below , and we show their relationships in figure  [ arch - proto ] .    we make two strong assumptions in this prototype implementation .",
    "first , we assume the user has a login name and password that are the same across all candidate supercomputing systems .",
    "second , we assume that all necessary files related to the job already exist on the selected cluster in a known location .",
    "these assumptions are not scalable to the widespread deployment of the system , and addressing these issues will be a high priority task as we extend the system further .",
    "the client program is the executable employed by the user to interface with the system .",
    "it is intended to make the use of superglue as simple as possible by making it resemble the use of existing cluster batch submission tools .",
    "the user specifies the characteristics of a job either in a script file or at the command line .",
    "the client program first contacts the broker service ( section  [ subsec - broker ] ) to find the lowest - cost cluster for the job that the user wants executed .",
    "then it directly contacts the front - end service running on that system ( section  [ subsec - frontend ] ) and sends it the job specification .",
    "the front - end submits the job described by the specification to the job queue in the name of the user .",
    "a broker is an agent responsible for negotiating a contract between two third parties . in the case of superglue ,",
    "the broker acts as a middleman between users and clusters , finding the cluster willing to run a user s job for the lowest cost .",
    "it receives a job specification from the client program ( section  [ subsec - client ] ) and queries each cluster front - end service ( section  [ subsec - frontend ] ) for that cluster s price to execute the job .",
    "the broker selects the cluster offering the lowest price and returns the address for that cluster to the client program .",
    "the superglue design does not preclude the existence of multiple instances of the broker service . a user or organization could easily run a private broker to reduce dependence on external components of the superglue system .",
    "each participating cluster in the superglue network runs a service to interface the cluster with the rest of the network .",
    "this service has two purposes .",
    "first , it is responsible for generating a price when the broker ( section  [ subsec - broker ] ) asks the cost of executing a particular job specification . the default implementation for the bidding algorithm returns a cost proportional to the cluster s current job load , such that a system with a lighter load will return a lower price",
    ". this implementation will encourage users to choose systems with lighter loads , leading to an even distribution of job scheduling across the superglue network and minimizing the idle time of any particular system .",
    "however , a wide variety of other viable pricing algorithms exist , and supercomputing organizations can use whichever policy best maximizes their profits .",
    "the second purpose of the cluster front - end service is to submit a job to the cluster on behalf of a user after it has been selected to run the job .",
    "it is responsible for decoding the provided job specification and generating the correct information to submit the job to the cluster s local job queue using its own scheduling software .",
    "once the correct scripts and command sequences are generated , the front - end service submits the job .",
    "we have identified a variety of web services that are required to extend superglue beyond the bare - bones framework that has been implemented to date .",
    "we have focused our attention on identifying components that will be valuable for developing a robust , full - featured platform for utility computing .",
    "it is likely there are other services or client programs that could exploit and supplement the superglue infrastructure in ways we have not foreseen .    * _ authentication manager _  superglue could conceivably accept a variety of types of credentials .",
    "the authentication manager will contact the appropriate credential authority to verify a user s login before accepting a job submission to the system .",
    "it acts as a front - end to all credential authorities in order to abstract credential validation for the rest of the superglue network .",
    "this component might be heavily based on existing technologies such as myproxy  @xcite from the globus project . * _ account manager _  this service will store account information for users and clusters .",
    "account information could consist of personal information , authentication information , and financial information .",
    "it will also enable a prospective user to create an account with little or no assistance from an administrator , allowing new users to get up and running with minimal difficulty .",
    "* _ bank _  superglue requires an automated mechanism for exchanging money to allow users to pay supercomputing systems for computation time .",
    "the bank service is responsible for enabling financial transactions between users .",
    "it might maintain the accounts itself , or it might act as a front end to an external web service , such as paypal or a traditional bank . *",
    "_ globus , condor , et al front - ends _  this is a collection of services , with each individual service acting as a front - end to networks based on other grid computing or utility computing solutions such as globus or condor .",
    "these services will allow existing grid networks to participate in the superglue network as a supercomputing resource , capable of placing bids and executing jobs in exchange for money .",
    "this will allowing superglue to leverage existing grid infrastructure .",
    "the elegance of the web service approach is that each piece of functionality can be implemented individually .",
    "the system can be built up piece by piece , gaining features and robustness as it grows , but providing functionality to users before it is complete .",
    "we expect that additional features in the form of new web services and client applications will continue to arise indefinitely .",
    "utility computing is an important , unrealized step in providing supercomputing capabilities to users with projects of any scale .",
    "we believe that a distributed , economics - based system is the best way to deploy a robust , flexible infrastructure to fulfill this goal .",
    "it is lightweight , easy to deploy , and easy to use .",
    "this makes it simple for anyone to participate in the system , either as a buyer or as a seller .",
    "the distributed , composable nature of the infrastructure has a variety of advantages .",
    "it allows for rapid development of the system , since the architecture is logically separated into simple , independent components .",
    "individual components can be replaced with improved versions without requiring software upgrades by every participant in the system . also , third parties can offer their own versions of individual components either for private use or by the community at large , allowing for community - driven improvement of or extensions to the superglue infrastructure .",
    "clearly there are many technical issues that remain to be solved .",
    "not all questions have been answered nor solutions devised .",
    "how are job files efficiently staged to the selected cluster and how is output data retrieved ?",
    "what kind of security is necessary to protect supercomputing systems and superglue components ?",
    "what forms of authentication are necessary , and how should they be implemented ? with the modular superglue architecture ,",
    "each of these questions can be addressed by a particular web service dedicated to solving each specific problem .",
    "as these solutions are implemented , they can be integrated into the larger superglue network with minimal difficulty .",
    "we expect that the introduction of competition and supply and demand to utility computing will prove beneficial to the community .",
    "economic pressures will regulate the availability of features as well as the price at which features are available .",
    "this will encourage improvements to the grid infrastructure as clusters improve both their hardware and software in order to remain competitive in the superglue environment .",
    "r.  buyya , d.  abramson , and j.  giddy , `` nimrod / g : an architecture for a resource management and scheduling system in a global computational grid , '' in _ the 4th international conference on high performance computing in asia - pacific region _ , 2000 .",
    "n.  h. kapadia , j.  a.  b. fortes , m.  s. lundstrom , and d.  royo , `` punch : a computing portal for the virtual university , '' _ international journal of engineering education _ ,",
    "17 , no .  2 , march - april 2001 .",
    "g.  a. koenig and w.  yurcik , `` design of an economics - based software infrastructure for secure utility computing on supercomputing clusters , '' in _ 12th intl .",
    "conference on telecommunication systems - modeling and analysis _ , 2004 .",
    "a.  barmouta and r.  buyya , `` gridbank : a grid accounting services architecture for distributed systems sharing and integration , '' in _ the 17th international parallel and distributed processing symposium _ , 2003 .",
    "l.  v. kal , s.  kumar , j.  desouza , m.  potnuru , and s.  bandhakavi , `` faucets : efficient resource allocation on the computational grid , '' parallel programming laboratory , department of computer science , university of illinois at urbana - champaign , tech .",
    "03 - 01 , mar 2003 .",
    "l.  v. kale and s.  krishnan , `` charm++ : parallel programming with message - driven objects , '' in _",
    "parallel programming using c++ _ , g.  v. wilson and p.  lu , eds.1em plus 0.5em minus 0.4emmit press , 1996 , pp .",
    "175213 .",
    "d.  abramson , r.  buyya , and j.  giddy , `` a computational economy for grid computing and its implementation in the nimrodg resource broker , '' _ future generation computer systems ( fgcs ) journal _ , vol .",
    "18 , no .  8 , pp . 10611074 , october 2002 .    r.  buyya and s.  vazhkudai , `` compute power market : towards a market - oriented grid , '' in _ proceedings of 1st ieee international conference on cluster computing and the grid , ccgrid2001_.1em plus 0.5em minus 0.4em ieee , may 2001 .",
    "n.  nisan , s.  london , o.  regev , and n.  camiel , `` globally distributed computation over the internet  the popcorn project , '' in _ proc . of the 18th intl .",
    "conference on distributed computing systems_.1em plus 0.5em minus 0.4emieee , 1998 .",
    "j.  novotny , s.  tuecke , and v.  welch , `` an online credential repository for the grid : myproxy , '' in _ proceedings of the 10th intl .",
    "symposium on high performance distributed computing ( hpdc-10)_.1em plus 0.5em minus 0.4emieee press , august 2001 ."
  ],
  "abstract_text": [
    "<S> existing attempts at utility computing revolve around two approaches . </S>",
    "<S> the first consists of proprietary solutions involving renting time on dedicated utility computing machines . </S>",
    "<S> the second requires the use of heavy , monolithic applications that are difficult to deploy , maintain , and use .    </S>",
    "<S> we propose a distributed , community - oriented approach to utility computing . </S>",
    "<S> our approach provides an infrastructure built on web services in which modular components are combined to create a seemingly simple , yet powerful system . </S>",
    "<S> the community - oriented nature generates an economic environment which results in fair transactions between consumers and providers of computing cycles while simultaneously encouraging improvements in the infrastructure of the computational grid itself . </S>"
  ]
}