{
  "article_text": [
    "self - similar cellular automata are closely related to cellular automata , a class of dynamical systems characterized by discreteness in space , time , state values , determinism , and local interaction ( see e.g. ,  @xcite ) .",
    "a cellular automaton is an infinite lattice of finite automata , each linked with its neighboring automata , whose underlying space - time structure results from a uniform tessellation of space and time .",
    "in contrast , the underlying space - time structure of a self - similar automaton is based on a progressive tessellation of space and time , the very same tessellation that zeno considered in his paradox of the runner that can not reach the end of a racecourse ( see e.g. ,  @xcite ) . whereas all cells in a one - dimensional cellular automaton are updated synchronously",
    ", a cell in a self - similar cellular automaton is updated twice as often as its left neighbor . on the one hand , this modification results in completely new capabilities ; for instance , there exist self - similar cellular automata that are capable of hypercomputing . on the other hand ,",
    "new paradoxes arise ; for instance , the evolution of a self - similar cellular automaton that involves an infinite number of steps might lead to indeterminism .",
    "the carry - over of the self - similar cellular automaton model to the theory of petri nets ( see , e.g. ,  @xcite ) yields self - similar petri nets .",
    "they are equivalent to self - similar cellular automata for a finite number of calculation steps , but differ in the infinite case .",
    "self - similar petri nets avoid the indeterminism of self - similar cellular automata by halting in the infinite case .",
    "there are several aspects that make both self - similar cellular automata as well as self - similar petri nets interesting .",
    "both are extending zeno s original paradox , leading to a new class of supertasks ( see e.g. ,  @xcite ) .",
    "another notable aspect is the hypercomputing capabilities of both models , both of them are capable of working as right - accelerated turing machines @xcite , which is a subclass of accelerated turing machines ( see e.g. ,  @xcite ) .",
    "both computing models result from a composition of very basic building blocks  either finite automata or petri net transitions  and thus demonstrate that it is at least conceptually possible to build hypercomputers based on those simple building blocks .",
    "since the two models differ in the infinite limit , the parallelism of both models brings a new twist to zeno s paradox , raising new questions about causality and the ontological structure of space and time .",
    "the physical plausibility of accelerated turing machines , supertasks , and zeno - like processes , is discussed elsewhere ( see , e.g. ,  @xcite ) .",
    "originally conceived as a means to demonstrate self - reproduction capabilities in a universal computing environment by von neumann  @xcite , the idea of perceiving the physical universe as cellular automaton goes back to zuse @xcite and was developed further by other researchers  @xcite .",
    "cellular automata based on other tessellations than the uniform grid were studied in  @xcite .",
    "hypercomputing is a fast growing field ( see , e.g. ,  @xcite ) , despite criticicism related to the methodology and the classification of what should be considered a valid computing process  @xcite .",
    "in particular , newtonian mechanics facilitates the construction of hypercomputers .",
    "davies  @xcite describes in some detail how to build an accelerated turing machine within a newtonian universe . for other approaches within newtonian mechanics ,",
    "see  @xcite .",
    "as already mentioned , both self - similar cellular automata as well as self - similar petri nets have been introduced in @xcite .",
    "we survey the main definitions and results and add some further properties of self - similar cellular automata .",
    "the article is organized as follows .",
    "section [ sec : ssca ] defines self - similar cellular automata and presents the basic properties .",
    "section [ sec : hypercomputer ] is devoted to the construction of a hypercomputer based on self - similar cellular automata .",
    "self - similar petri nets are presented in section [ sec : petri ] .",
    "this model features a step - to - step equivalence to self - similar cellular automata for finite computations , but halts in the infinite case .",
    "the final section contains some concluding remarks and gives some directions for future research .",
    "the underlying structure of a cellular automaton results from a uniform tessellation of space and time . fig .  [ fig : ca - evo ] depicts the evolution of a cellular automaton .",
    "in contrast , self - similar automata result from a progressive tessellation of space and time .",
    "a self - similar cellular automaton operates as a cellular automaton on a one - dimensional lattice containing an infinite number of cells .",
    "moreover , the cell size and the time between two updates of the same cell vary depending on the position of the cell in the lattice .",
    "cell @xmath0 has size @xmath1 and the time between two updates is proportional to the cell size .",
    "one natural way to embed the lattice into @xmath2 is the mapping @xmath3 that gives the start point of cell @xmath0 .",
    "then , the whole lattice maps to @xmath4 , whereby cell @xmath5 occupies the unit interval @xmath6 .    fig .  [ fig : ssca - evo ] depicts the evolution of a self - similar cellular automaton in contradistiction to fig .",
    "[ fig : ca - evo ] . informally speaking , a self - similar cellular automaton features scale - invariance and self - similarity rather than homogeneity in space and time .    in",
    "what follows , we present the formal definition and the description of the update rule .",
    "[ def - ssca ] a self - similar cellular automaton is a tuple @xmath7 , where @xmath8 is a finite set of states , and @xmath9 and @xmath10 together represent the local rule , both functions from @xmath11 to @xmath8 .",
    "each cell is in a state of the state set @xmath8 .",
    "the state of cell @xmath0 is updated at times @xmath12 , where @xmath13 is an integer .",
    "the cell assumes its new state at time @xmath12 and stays in this state until @xmath14 , where the next state change occurs .",
    "the cycle times of a cell are the time intervals from one state transition to the next one , thus , for cell @xmath0 these are the half - open intervals @xmath15 . this time scheduling implies that the left neighbor cell @xmath16 cycles half as fast , and the right neighbor cell @xmath17 cycles twice as fast as the cell @xmath0 . at any given time , the configuration of the automaton is a mapping @xmath18 that specifies the state of all cells .",
    "we denote the state of cell @xmath0 at time @xmath19 by @xmath20 and the configuration at @xmath19 by @xmath21 .",
    "the state of a cell @xmath0 depends on the last state of the cell itself , and the last states of its left and right neighbor cell . for notational convenience ,",
    "we introduce time operators that express the temporal dependencies of a cell . to this end",
    ", we make use of interval arithmetic . for a scalar @xmath22 and a ( half - open ) interval @xmath23 set : @xmath24 and @xmath25 .",
    "we denote the unit interval @xmath6 by @xmath26 .",
    "if @xmath27 specifies a cycle of cell @xmath0 , @xmath28 denotes the last cycle of cell @xmath29 , @xmath30 the last cycle of cell @xmath31 , and @xmath32 the last cycle of cell @xmath33 , respectively , that started before @xmath34 .",
    "the operator @xmath35 is a bijection of the set @xmath36 , and we denote by @xmath37 its inverse .    the transition of cell @xmath0 occurs every second time at the times @xmath38 synchronously with its left neighbor transition .",
    "a transition of this kind is called @xmath39 , otherwise it is called @xmath40 .",
    "the predicate @xmath41 is true if and only if the transition of the @xmath0-th cell at time @xmath12 is coupled , thus , if and only if @xmath13 is even .",
    "cells that have a state resulting from a coupled transition are filled gray in fig .",
    "[ fig : ssca - evo ] , the cells that have a state resulting from a decoupled transition are filled white .",
    "the self - similar cellular automaton evolves according to the following update rule .",
    "if @xmath42 is a cycle of cell @xmath0 , the state @xmath31 in this interval , formally described by the state function @xmath43 , is given by @xmath44 for any time point @xmath19 and any integer @xmath0 there exists a unique interval @xmath42 such that @xmath45 .",
    "this allows us to set @xmath46 .",
    "we remark that only one local rule function is necessary instead of two rule functions @xmath9 and @xmath10 , if an additional flag is added to each state that is toggled for each transition . for the applications considered later on , the update rule given above is more compact and concise",
    ".      the evolution of a self - similar cellular automaton might become indeterministic . in what follows",
    "we present an example . consider the self - similar cellular automaton @xmath47 , where @xmath9 and @xmath10 represent the left shift : @xmath48 and @xmath49 , where the question mark denotes an arbitrary state .",
    "suppose @xmath50 starts at time @xmath5 , and consider the state of cell @xmath5 at time @xmath51 .",
    "@xmath52 depends on the state @xmath53 , which itself depends on @xmath54 , and so on , leading to an infinite regress .",
    "both possibilities @xmath55 and @xmath56 are consistent with the local rule and any initial configuration @xmath57 , proving that the evolution of @xmath50 is indeterministic and independent of its initial configuration .    classifying the evolution as indeterministic raises subtle questions that relate to thomson s lamp paradox  @xcite .",
    "we take the point of view that each cell is at any time in a given state of the state set , even if the initial configuration and the update rule do not uniquely determine the state .",
    "that the evolution is not necessarily always indeterministic can be seen be the following simple example .",
    "assume that the state set @xmath8 contains a state @xmath58 satisfying @xmath59 .",
    "if cell @xmath0 is in state @xmath58 , it will for all times stay in this state . furthermore , the state of any cell to the left of cell @xmath0 is deterministic , since the causal chain arising in calculating the state of any of these cells stops at cell @xmath0 and no infinite regress can occur .",
    "for a more subtle example see subsection [ sec : block - trans ] .",
    "the following lemma reveals limitations of any deterministic evolution .",
    "[ prop : det ] the state @xmath60 of a cell @xmath61 of a self - similar cellular automata at time @xmath62 that was started at @xmath63 with configuration @xmath64 is deterministic if and only if there exists an index @xmath0 such that @xmath60 depends only on states @xmath65 with @xmath66 .",
    "we choose @xmath67 , @xmath68 , where @xmath13 is a positive integer , and investigate whether the state of cell @xmath5 in the time interval @xmath69 is uniquely determined by the deterministic states at time 0 , that is the configuration @xmath57 .",
    "the general case follows the same proof pattern .",
    "we express a cycle of cell @xmath61 at time interval @xmath70 as pair @xmath71 .",
    "the set of all possible cycles starting not earlier than time @xmath5 is then the set @xmath72 .",
    "we define a relation @xmath73 on @xmath74 by setting @xmath75 if and only if @xmath76 and @xmath77 , or @xmath78 and @xmath79 , or @xmath80 and @xmath81 .",
    "we denote the transitive closure of @xmath73 by @xmath82 .",
    "this relation expresses the possible causal relationship between two transitions .",
    "the set @xmath83 , the `` past light cone '' of @xmath84 , contains @xmath84 as well as all cycles that might have an effect on the state of cell @xmath5 in time interval @xmath70 .",
    "we form increasing subsets of @xmath85 by setting @xmath86 for @xmath87 .",
    "we call a function @xmath88 a realization of @xmath89 if @xmath90 is consistent with the update rule of the self - similar cellular automaton and @xmath90 matches the initial configuration at time @xmath5 .",
    "if we find a @xmath89 such that all realizations of it lead to the same state of cell @xmath5 at time interval @xmath70 , we know that the state is deterministic and depends only on cells of the initial configuration with index less than @xmath0 . otherwise ,",
    "if there is no such @xmath89 , there are always two realizations @xmath91 and @xmath92 that lead to different states and which can be extended arbitrarily to the right , resulting in two different evolutions of the self - similar cellular automata and to two different states of cell @xmath5 at time interval @xmath70 .    for the sake of illustration of the implications of this lemma ,",
    "consider the following example .",
    "let @xmath74 be the set of configurations , either of the form @xmath93 , in which exactly one @xmath51 with a positive index appears , or the configuration @xmath94 consisting solely of @xmath5 s .",
    "assume that a self - similar automaton is started at time @xmath5 with a configuration @xmath95 in @xmath74 .",
    "choose a time @xmath96 and let @xmath58 be the state of cell @xmath5 at time @xmath19 .",
    "applying the lemma , we see that there exists no local rule such that @xmath58 is either @xmath51 if and only if @xmath95 is of the form @xmath93 , or @xmath5 if and only if @xmath97 .",
    "if @xmath58 is deterministic there is an index @xmath0 such that @xmath58 depends only on states of cells at time @xmath5 with index less than @xmath0 .",
    "this implies that the configurations @xmath94 and @xmath93 , where the index of 1 is greater than @xmath0 , lead to the same state @xmath58 .",
    "the indeterminism of self - similar cellular automata can be restricted by considering the following subclass which adds a quiescent state to the original concept and allows for grids that contain only a finite number of cells .",
    "a self - similiar cellular automaton with quiescent state is a tuple @xmath98 , where @xmath8 , @xmath9 , and @xmath10 are defined as in def .",
    "[ def - ssca ] , and @xmath58 in @xmath8 is a distinguished state , the quiescent state , satisfying @xmath99 .",
    "if the automaton has a quiescent state , we allow for finite or half - infinite lattices that start with cell @xmath5 .",
    "the update rule of the automaton is adapted to cope with cells that have no left or right neighbor .",
    "furthermore we allow the lattice to grow to the right .",
    "if either the left or right neighbor is missing , the state of the missing neighbor is assumed to be the quiescent state .",
    "in case of a finite lattice , consisting of @xmath100 cells @xmath101 , we allow the lattice to grow , if the state of the @xmath102-th cell differs from the quiescent state .",
    "if cell @xmath102 at time @xmath103 changes to a state , different from the quiescent state , a new cell @xmath100 is added to the lattice .",
    "this new cell @xmath100 is initialised with the quiescent state and attached to cell @xmath102 .",
    "the first update of this new cell occurs at time @xmath104 .",
    "a self - cellular automaton with quiescent state is deterministic if the lattice contains only a finite number of cells .",
    "if the state set becomes larger , the specification of the values for the local rules @xmath9 and @xmath10 for all possible arguments is rather lengthy .",
    "some self - similar cellular automata allow an alternative specification .",
    "a coupled transition of two neighbor cells can perform a simultaneous state change of the two cells .",
    "if the state changes of these two neighbor cells are independent of their other neighbors , we can specify the state changes as a transformation of one state pair into another .",
    "let @xmath105 be elements in @xmath8 .",
    "we call a mapping of the form @xmath106 a block transformation . the block transformation",
    "@xmath106 defines a function mapping of the form @xmath107 and @xmath108 for all @xmath109 in @xmath8 .",
    "furthermore , we will also allow block transformations that might be ambiguous for certain configurations .",
    "consider the block transformations @xmath106 and @xmath110 that might lead to an ambiguity for a configuration that contains @xmath111 . instead of resolving these ambiguities in a formal way",
    ", we will restrict our attention to configurations that are unambiguous .",
    "consider the self - similar cellular automaton @xmath7 , where @xmath8 is the set @xmath112 .",
    "if @xmath113 , we write @xmath114 for @xmath115 , and @xmath116 for @xmath117 , respectively .",
    "we specify @xmath9 and @xmath10 by the following block transformations @xmath118 @xmath119 together with the convention , that a cell remains in its previous state , if no block transformation is applicable .",
    "let @xmath50 be started with a configuration of the form @xmath120 , where all @xmath121 are in @xmath122 .",
    "it is easy to see that the evolution of @xmath50 is deterministic and that @xmath50 runs the one - dimensional billard ball model of margolus @xcite .",
    "furthermore , the construction shows that a self - similar cellular automaton can simulate any 3-site one - dimensional cellular automaton .",
    "in what follows we will construct a hypercomputer based on a self - similar cellular automaton . this hypercomputer simulates a turing machine and is capable of performing infinitely many steps of the turing machine in finite time .",
    "we assume the following turing machine model as described in @xcite .    formally , a _",
    "turing machine _ is a tuple @xmath123 , where @xmath124 is the finite set of states , @xmath125 is the finite set of tape symbols , @xmath126 is the set of input symbols , @xmath127 is the start state , @xmath128 is the blank , and @xmath129 is the set of final states . the next move function or transition function @xmath130 is a mapping from @xmath131 to @xmath132 , which may be undefined for some arguments .",
    "the turing machine @xmath133 works on a tape divided into cells that has a leftmost cell but is infinite to the right .",
    "let @xmath134 .",
    "one step ( or move ) of @xmath133 in state @xmath58 and the head of @xmath133 positioned over input symbol @xmath135 consists of the following actions : scanning input symbol @xmath135 , replacing symbol @xmath135 by @xmath136 , entering state @xmath137 and moving the head one cell either to the left ( @xmath138 ) or to the right ( @xmath139 ) . in the beginning , @xmath133 starts in state @xmath140 with a tape that is initialized with an input word @xmath141 , starting at the leftmost cell , all other cells blank , and the head of @xmath133 positioned over the leftmost cell .    given an arbitrary turing machine @xmath133 we construct a self - similar cellular automaton with quiescent state @xmath142 that simulates @xmath133 .",
    "the state set @xmath143 of @xmath144 is given by @xmath145 we write @xmath146 for an element @xmath147 in @xmath148 , @xmath149 for an element @xmath150 in @xmath131 , and @xmath151 for an element @xmath152 in @xmath153 .",
    "to simulate @xmath133 on input @xmath154 in @xmath155 , @xmath156 , @xmath144 is initialized with the sequence @xmath157 starting at cell 0 .",
    "if @xmath158 , @xmath144 is initialized with the sequence @xmath159 , and if @xmath160 , the empty word , @xmath144 is initialized with the sequence @xmath161 .",
    "we denote the initial configuration by @xmath162 .",
    "the computation is started at time 0 , i.e. , the first state change of cell @xmath13 occurs at time @xmath163 .",
    "we specify the local rule , represented by @xmath9 and @xmath10 , by the following block transformations , together with the convention that a cell state remains unchanged , if no block transformation is applicable .    1",
    ".   _ pulse moves to the right .",
    "_ set @xmath164 @xmath165 @xmath166 if @xmath167 set @xmath168 @xmath169 @xmath170 if @xmath171 set @xmath172 @xmath173 @xmath174 set @xmath175 @xmath176 @xmath177 2 .",
    "_ pulse moves to the left_. set @xmath178 @xmath179 @xmath180    the states @xmath181 and @xmath182 act as the head of the turing machine . to accelerate the calculation we have to shift the whole tape content of the turing machine to the right , to the faster cycling cells , thereby avoiding that the content is spread , i.e. , that right tape states move faster than left tape states .",
    "this can be achieved by synchronizing all state transitions by a pulse ( @xmath183 , @xmath184 , or @xmath185 ) that zigzags between the two delimiters @xmath186 and @xmath187 .",
    "additionally , new blanks are inserted to the left of the right delimiter whenever the simulated head of the turing machine hits the right delimiter and attempts to move to the right .      [ cols=\"^,^,^,^,^,^ \" , ]     we illustrate the working of @xmath144 by a simple example @xcite .",
    "let @xmath188 be the formal language consisting of strings with @xmath102 0 s , followed by @xmath102 1 s : @xmath189 .",
    "a turing machine that accepts this language is given by @xmath190 @xcite with the transition function depicted in fig .",
    "[ fig : example - delta ] .",
    "note that @xmath188 is a context - free language , but @xmath133 will serve for demonstration purposes . the computation of @xmath133 on input @xmath191 is given below : @xmath192 fig .",
    "[ fig : example - hyper - sca-2 ] depicts the computation of @xmath144 on the turing machine input 01 , showing only the configurations where a state change occurred .",
    "the first column of the table specifies the time in binary base .",
    "@xmath144 performs 4 complete pulse zigzags and enters a final configuration in the fifth one after the turing machine simulation has reached the final state @xmath193 .      as one can see in fig .",
    "[ fig : example - hyper - sca-2 ] , a `` zigzag '' pulse that goes from a configuration containing state @xmath194 to the next one that contains the same state takes three cycles of the cell where the pulse has started .",
    "afterwards , the whole tape content is shifted one cell to the right .",
    "thus , the whole simulation takes no longer than @xmath195 time units .",
    "furthermore , each pulse zigzag performs at least one step of the simulated turing machine . taking these facts together",
    ", the following theorem is motivated that was proved in @xcite .",
    "let @xmath133 be a turing machine , @xmath196 an input word of @xmath133 , and @xmath144 the self - similar automaton given above that simulates @xmath133 , initialised with @xmath162 .",
    "if @xmath133 halts on @xmath196 , then @xmath144 enters a final configuration in a time less than 6 cycles of cell @xmath5 .",
    "if @xmath133 does not halt , @xmath144 enters after 6 cycles of cell @xmath5 the quiescent configuration @xmath197 .    if we choose for @xmath133 a universal turing machine , we obtain the following result , which proves that @xmath144 is a hypercomputer for certain turing machines @xmath133 .",
    "let @xmath198 be a universal turing machine .",
    "then @xmath199 solves the halting problem for turing machines .",
    "we imagine that an operator initialises the first cells of the self - similar automaton with the input of the calculation .",
    "ideally , in case that the simulated turing machine has halted , the self - similar automaton should propagate this fact back to the left cells .",
    "but by lemma [ prop : det ] we know that there is no deterministic way to do this .",
    "therefore the operator would have to scan a possible infinite numbers of cells to decide whether the turing machine has halted or not .",
    "underlying graph of a self - similar petri net @xcite . ]",
    "self - similar petri nets result from carrying over the self - similar cellular automaton model to the theory of petri nets .",
    "we refer to @xcite for a concise introduction to petri net theory , here we give only a very short summary to settle the terminology .",
    "the underlying graph of a petri net is a directed , weighted , bipartite graph consisting of two kind of nodes , called transitions and places .",
    "[ fig : petri ] depicts the underlying graph of a self - similar petri net , drawing transitions as boxes and places as circles .",
    "a place that has an arc to a transition is an input place of this transition , if the arc is from the transition to the place , the place is an output place .",
    "arcs are labeled with their weights .",
    "places hold so - called tokens .",
    "a marking assigns to each place a number , the number of tokens in this place .",
    "the marking in a petri net is changed according to the following transition ( firing ) rule :    1 .",
    "a transition @xmath19 is enabled if each input place @xmath137 of @xmath19 is marked with at least @xmath200 tokens , where @xmath200 is the weight of the arc from @xmath137 to @xmath19 .",
    "2 .   an enabled transition @xmath19 may fire .",
    "a firing removes @xmath200 tokens from each input place @xmath137 , and adds @xmath201 tokens to each output place @xmath137 of @xmath19 , where @xmath201 is the weight of the arc from @xmath19 to @xmath137 .",
    "self - similar petri nets are both colored petri nets and marked graphs .",
    "the first says that the tokens of the petri net carry values and that the firing rule is adapted such that the value of an output token is determined by the values of the input tokens .",
    "the latter says that each place is the input place and the output place of at most one transition , which makes the petri net deterministic .",
    "we will informally describe how the concepts of self - similar cellular automata are mapped to self - similar petri nets , for a formal treatment we refer to @xcite .",
    "the states of a self - similar cellular automaton are mapped to the values of the tokens .",
    "the transition of the self - similar petri net uses the values of the input tokens to calculate the value of the output tokens according to the local rules @xmath9 and @xmath10 that are carried over from self - similar cellular automata .",
    "a firing of cell @xmath102 consumes two tokens of cell @xmath100 and puts two new tokens in the input place of cell @xmath100 .",
    "since cell @xmath100 consumes per firing only one token from cell @xmath102 , and puts only one token in the input place of cell @xmath102 , cell @xmath100 must fire twice before cell @xmath102 can fire again .",
    "as we can see , the doubling of cycles from one cell to its right neighbor works now by a synchronisation mechanism without reference to an external clock .    in analogy to self - similar cellular automata with quiescent state , a self - similar petri net",
    "is started with a finite number of cells and is allowed to grow to the right , whenever the rightmost cell calculates a token value different from the quiescent state .    to ensure the liveness of the self - similar petri net the left- and rightmost cells obey the the following boundary conditions .",
    "each firing of the leftmost cell puts one token in its left input place , each firing of the rightmost cell puts two tokens in its right input place .",
    "if the self - similar petri net is started with a certain marking and proper token values it can be shown that self - similar petri nets and self - similar cellular automata feature a step - by - step equivalence for calculations that involve only a finite number of steps .",
    "self - similar petri nets work without any reference to an external clock , but it is possible to impose a time scheduling leading to timed self - similar petri nets .",
    "if we require that transition @xmath102 always fires when it is enabled and that the firing process , which includes the consumption and production of tokens , takes no longer than @xmath202 time units , we obtain the same time model as for self - similar cellular automata .    the construction of subsection [ sec : hc - spec ] can also be applied to timed self - similar petri nets , leading to one that simulates a given turing machine with a given input .",
    "in contrast to self - similar cellular automata , the evolution of a petri net can stop .",
    "this happens when no transition is enabled .",
    "the main result concerning timed self - similar petri nets is expressed by the following theorem .",
    "let @xmath133 be a turing machine , @xmath196 an input word of @xmath133 , and @xmath203 a timed self - similar petri net that simulates @xmath133 , initialised with @xmath162 .",
    "if @xmath133 halts on @xmath196 , then @xmath203 enters a final configuration in a time less than 6 cycles of cell @xmath5 .",
    "if @xmath133 does not halt , @xmath203 halts after 6 cycles of cell @xmath5 .",
    "again , we refer the reader for details and the proof to @xcite .",
    "we have reviewed two recently introduced computing computing models , both based on an infinite , progressive tessellation of space and time , thereby proving a proposition about the indeterminism of self - similar cellular automata .",
    "space and time tessellations are the same as imagined in zeno s paradox of the runner that can not reach the end of a racecourse more than 2500 years ago .",
    "both computing models are capable of hypercomputing , even if they differ in the limit of non - halting turing machine simulations .",
    "if properly programmed , self - similar cellular automata enter a final quiescent configuration and loop forever there ; if not , they end up in indeterminism .",
    "the underlying graph of a self - similar petri net grows to infinity , if the simulated turing machine does not halt . since there is no longer a rightmost cell that obeys the boundary condition that guaranteed the liveness of the system for the finite case , the self - similar petri net stops .",
    "thus , self - similar petri nets halt if and only if the simulated turing machine does not halt .",
    "both models suffer from what we call the response problem .",
    "we imagine an operator that initialises the very first cells of either of the two machines with the input of the calculation and then starts the machine .",
    "ideally , after some finite amount of time the operator would obtain an answer that is again written to the first cells of the machine .",
    "thus , the response problem is the problem of propagating the final status of the simulated turing machine , which is either  halt \" or  non - halt , \" back to the cells with lower index , say cell 0 .    both models fail to solve the response problem ; yet due to different reasons .",
    "if we extend the rules of the self - similar cellular automaton to propagate a response back to the left cells , the automaton becomes indeterministic .",
    "in contrast , self - similar petri nets freeze if they run into infinity , thereby eliminating any possibility to propagate information backward .",
    "the possibility of the ( non)existence of other elementary computational models whose zeno squeezed versions on the one hand are capable of hypercomputing , yet on the other hand do not suffer from the response problem , remains an open question .",
    "karl svozil .",
    "the church - turing thesis as a guiding principle for physics . in cristian  s. calude ,",
    "john casti , and michael  j. dinneen , editors , _ unconventional models of computation _ , pages 371385 , singapore , 1998 .",
    "springer .",
    "karl svozil .",
    "omega and the time evolution of the n - body problem . in cristian  s. calude ,",
    "editor , _ randomness and complexity , from leibniz to chaitin _ , pages 231236 , singapore , 2007 .",
    "world scientific .",
    "eprint arxiv : physics/0703031 ."
  ],
  "abstract_text": [
    "<S> we have recently introduced the two new computing models of self - similar cellular automata and self - similar petri nets . </S>",
    "<S> self - similar automata result from a progressive , infinite tessellation of space and time . </S>",
    "<S> self - similar petri nets consist of a potentially infinite sequence of coupled transitions with ever increasing firing rates . </S>",
    "<S> both models are capable of hypercomputations and can , for instance , `` solve '' the halting problem for turing machines . </S>",
    "<S> we survey the main definitions and propositions and add new results regarding the indeterminism of self - similar cellular automata . </S>"
  ]
}