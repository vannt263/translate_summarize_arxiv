{
  "article_text": [
    "a plya - aeppli or geometric compound poisson random variable is defined as the sum of a poisson number of independent and identically distributed geometric random variables  @xcite .",
    "its distribution arises as an approximation to the distribution of the number of occurrences of a given short word in a random markovian sequence of letters from a finite alphabet  @xcite , and as an approximation to the number of word matches between two random sequences  @xcite .",
    "thus the polya - aeppli distribution finds applications in bioinformatics in searches for over- or underrepresented words , which may signal functional elements within genomes , and applications associated with alignment - free measures of sequence similarity .",
    "it is also appropriate as an alternative to the commonly used negative binomial model of over - dispersed poisson count data which arises , for instance , from high throughput sequencing experiments  @xcite .    the stats package in r  @xcite contains implementations of many standard univariate probability distributions as functions for the density / mass function , cumulative distribution function , quantile function and random variate generation .",
    "we present here an efficient implementation of these 4 functions for the plya - aeppli distribution , available as the package polyaaeppli  @xcite .",
    "the implementation relies on iterative formulae for the log of the mass and cumulative distribution functions , which allow an accurate evaluation of the distribution in the extreme upper and lower tails .",
    "we define a plya - aeppli random variable as @xmath0 where @xmath1 is a poisson random variable with parameter @xmath2 with probability mass function @xmath3 and the @xmath4 are identically and independently distributed shifted geometric random variables with parameter @xmath5 with common probability mass function @xmath6 the plya - aeppli probability mass function is  @xcite @xmath7 the mean and variance are @xmath8 these formulae invert to give @xmath9 note that the restriction @xmath10 implies that @xmath11 , making ths distribution a suitable model for over - dispersed count data .",
    "when @xmath12 , the pya - aeppli distribution reduces to the poisson distribution with mean @xmath2 .",
    "consistent with the conventions used in r , our implementation comprises the four functions +   + dpolyaaeppli(x , lambda , prob , log = false ) + ppolyaaeppli(q , lambda , prob , lower.tail = true , log.p = false ) + qpolyaaeppli(p , lambda , prob , lower.tail = true , log.p = false ) + rpolyaaeppli(n , lambda , prob ) +   + for the mass function , cumulative distribution function , quantile function and random variate generation respectively .",
    "the arguments lambda and prob accept single values for the parameters @xmath2 and @xmath5 respectively .",
    "the argument x is a vector of ( non - negative integer ) quantiles , q is a vector of quantiles , p is a vector of probabilities and n is the number of random values to return .",
    "if the logical variables log or log.p are true , probabilities are given as logarithms to base @xmath13 . if the logical variable lower.tail is set to its default value of true probabilities are @xmath14 , otherwise probabilities are @xmath15",
    ". examples of plots of the cumulative distribution , mass function and a histogram of a random sample are shown in figure  [ fig : exampledistrib ] for values of @xmath2 and @xmath5 corresponding to a mean @xmath16 and variance @xmath17 .     and @xmath5 corresponding to mean @xmath16 and variance @xmath17 .",
    "top panel : the cumulative distribution calculated from ppolyaaeppli ( ) ( black ) and quantiles calculated from qpolyaaeppli ( ) plotted on the horizontal axis against probabilites in the range @xmath18 plotted on the vertical axis ( orange ) .",
    "bottom panel : the probability mass function calculated from dpolyaaeppli ( ) ( black ) and a histogram of 10000 random variables sampled using rpolyaaeppli ( ) . also plotted for comparison are normal ( red ) and gamma ( green ) distributions with matching mean and variance .",
    ", scaledwidth=55.0% ]    the option log = true allows for a more precise determination of the distribution in the extreme tails when dpolyaaeppli ( ) would otherwise return 0 to machine accuracy .",
    "the option log.p = true allows for an accurate determination of the cumulative distribution using ppolyaaeppli ( ) and its inverse using qpolyaaeppli ( ) in the extreme lower and upper tails when used in conjunction with lower.tail = true and false respectively .",
    "plots of the mass function and cumulative distribution over a range of quantiles more than 60 standard deviations either side of the mean for values of @xmath2 and @xmath5 corresponding to mean @xmath19 and variance @xmath20 are shown in figure  [ fig : extreme_tail_plots ] .     and @xmath5 corresponding to mean @xmath19 and variance @xmath20 .",
    "top left : the mass function calculated using dpolyaaeppli ( ) with defaults .",
    "top right : log of the mass function using dpolyaaeppli (  , log = true ) .",
    "bottom left : log of the lower tail of the cumulative distribution calculated using ppolyaaeppli (  , log.p = true ) .",
    "bottom right : log of the upper tail of the cumulative distribution calculated using ppolyaaeppli (  , log.p = true , lower.tail = false ) . also plotted for comparison are normal ( red ) and gamma ( green ) distributions with equivalent parameters .",
    ", scaledwidth=85.0% ]    r implementations of the plya - aeppli mass function and random variate generator , but not the cumulative distribution function or quantile function , currently exist via the poisson - tweedie distribution in the package tweedeseq  @xcite .",
    "the function dpt(x , mu = lambda/(1 - prob ) , d = ( 1 + p)/(1 - p ) , a = -1 ) plays the role of dpolyaaeppli(x , lambda , prob ) , and the function + rpt(n , mu = lambda/(1 - prob ) , d = ( 1 + p)/(1 - p ) , a = -1 ) plays the role of rpolyaaeppli(n , lambda , prob ) .",
    "however , because the log = true option is not implemented , dpt ( ) is not able to evaluate the distribution as accurately as dpolyaaeppli (  , log = true ) in the extreme tails of the distribution .",
    "furthermore the tweedeseq implementations are not vectorised over the parameters of the distribution .",
    "an r implementation of the upper tail of the plya - aeppli distribution was previously implemented via the now discontiued function computepvalue ( ) in the package nemo  @xcite for the study of network motifs .",
    "this function , with arguments computepvalue(lambda , prob , 1+x ) played the same role as pployaaeppli(x , lambda , prob , lower.tail=false ) , but was not vectorised over either the argument x or the parameters lambda or prob .",
    "furthermore the option log.p = true , was not implemented , making the extreme tails of the distribution inaccessible .",
    "the implementation of the plya - aeppli distribution must be able to evaluate the mass function and cumulative distribution function efficiently for a range of input quantiles . from eq .",
    "( [ massfunc ] ) evens  @xcite has derived the recurrence formula @xmath21 p_x(x ; n , \\lambda ) - p^2 ( x - 1 ) p_x(x - 1 ; n , \\lambda ) , \\quad x = 1 , 2 , \\ldots ,      \\label{recurrence}\\end{aligned}\\ ] ] with @xmath22 as is stands this formula is not adequate for our purposes as it susceptible to roundoff errors when @xmath23 is small , which may happen for instance when @xmath24 is moderately large and @xmath25 close to 1 .",
    "nuel  @xcite notes that this problem is overcome by calculating instead the logarithm of the mass function @xmath26 from the recurrence relation @xmath27 which is easily derived from eq.([recurrence ] ) .",
    "the function dpolyaaeppli(x , lambda , prob ) is calculated by first evaluating this iterative formula out to the largest finite value in the array x and exponentiating if log = false .    to calculate the lower tail of cumulative distribution @xmath28 nuel  @xcite similarly avoids serious roundoff errors by calculating the logarithm of the cumulative distribution function @xmath29 from the recurrence relation @xmath30 the function ppolyaaeppli(x ,",
    "lambda , prob , lower.tail = true ) is calculated by first evaluating eqs .",
    "( [ logrecurrence ] ) and ( [ logcumulrecurrence ] ) out to the integer part of the largest finite value in the array x and exponentiating if necessary .",
    "this procedure will not meet the required accuracy for the extreme upper tail . in this case",
    "we consider the log of the upper tail , @xmath31 which can be iterated downwards via the formula @xmath32 to evaluate ppolyaaeppli(x , lambda , prob , lower.tail = false ) where x includes finite values greater than the mean @xmath24 , @xmath33 is taken to be the largest finite value in the array x , and eq.([logdownwardrecurrence ] ) is initiated by calculating @xmath34 which converges to machine accuracy reasonably rapidly .",
    "the functions @xmath35 , @xmath36 and @xmath37 are calculated by auxilliary functions + lpolyaaeppliarray ( ) , garray ( ) and harray ( ) , and @xmath38 is evaluated by the auxilliary function logtail ( ) .",
    "the quantile function qpolyaaeppli ( ) is evaluated by first evaluating probabilities with ppolyaaeppli ( ) from q @xmath39 out to a safe upper bound , and seeking the maximum q entailing a probability less than the specified probability for each value in the input array p. the upper bound used is the value of he quantile function qgamma ( ) of the gamma distribution with matching mean and variance ( see fig .  [",
    "fig : extreme_tail_plots ] ) evaluated at the maximum finite value in the input array p , plus one standard deviation .",
    "the function rpolyaaeppli ( ) is evaluated directly from the definition eq.([padefinition ] ) via the r functions rpois ( ) and rgeom ( ) .",
    "cjb acknowledges valuable assitance from john maindonald related to generating a package from the r code described herein , and support from nhmrc grant 525453 .",
    "mikel esnaola , pedro puig , david gonzalez , robert castelo , and juan  r gonzalez . a flexible count data model to fit the wide diversity of expression profiles arising from extensively replicated rna - seq experiments . ,",
    "14:254 , 2013 ."
  ],
  "abstract_text": [
    "<S> an efficient implementation of the plya - aeppli , or geometirc compound poisson , distribution in the statistical programming language r is presented . </S>",
    "<S> the implementation is available as the package polyaaeppli and consists of functions for the mass function , cumulative distribution function , quantile function and random variate generation with those parameters conventionally provided for standard univatiate probability distributions in the stats package in r </S>"
  ]
}