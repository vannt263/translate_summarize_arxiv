{
  "article_text": [
    "in @xcite it was shown how to calculate the spectra of one - dimensional quantum systems in a simple , convenient and effective way by means of matrix representations of hilbert space operators . here",
    "we extend these techniques in various ways including the computation of dynamical properties as well applications to higher dimensional systems , bosonic many - particle and open quantum systems .    as discussed in @xcite",
    "the basic building blocks for the discrete matrix representation of operators used in the following programs are the operators @xmath0 and @xmath1 , well known from the harmonic oscillator , where they act as ladder operators on the harmonic oscillator eigenstates @xmath2 , @xmath3 : @xmath4 motivated , e.g. , by the application to the radiation field described by harmonic oscillators with frequency @xmath5 these operators create or annihilate a photon of this frequency or , more generally , a bosonic particle in second quantization . therefore these operators are also known as creation and annihilation operators . here",
    "we will mainly use the matrix representation of these operators in the harmonic oscillator basis : @xmath6 as an introduction to the numerical applications presented below , the following short matlab  code shows the construction of these matrices and their application to a basis vector    1001 n = 4 ; np = n+1 ; n = 1:n ; a = diag(sqrt(1:n),1 ) ; ad = a ; n = [ 0 0 1 0 0] ; a*n ; ad*n ; ad*a*n    where the properties ( [ aad ] ) can be tested .",
    "it should be noted , however , that such numerical matrix representations are necessarily finite , which causes numerical errors .",
    "the reader may try for example to test the validity of the commutation relation @xmath7=1 $ ] numerically or to construct the eigenstates of the annihilation operator @xmath0 , the coherent states , numerically .",
    "in many cases these finite size errors can be reduced by increasing the matrix size .",
    "in addition , we will use the representation of the position and momentum operators @xmath8 where the scaling parameter is chosen as @xmath9 in the following ( see @xcite for details ) .",
    "these matrix representations of operators can now be used to construct in a simple way matrix representations of other operators , such as the hamiltonian or time - evolution operators .",
    "this paper is organized as follows : in section [ s - one ] we briefly review the calculation of quantum eigenvalues for one - dimensional systems @xcite and extend the analysis to time - dependent calculations .",
    "the example applications include bloch - oscillations in a tilted periodic lattice .",
    "section [ s - ang ] illustrates the use of matrix representation for angular momentum operators . in section [ s - two ]",
    "it is shown how to calculate the spectrum of a two - dimensional quantum system .",
    "applications to bosonic many - particle systems are illustrated in section [ s - many ] by means of the bose - hubbard model .",
    "finally , the dynamics of an open quantum system described by a lindblad master equation is calculated in section [ s - lindblad ] .",
    "as a first example we consider the calculation of bound state energies for a single particle in a one - dimensional potential described by the hamiltonian @xmath10 which has already been discussed in @xcite for harmonic and quartic potentials .",
    "there a simple program code can be found for computing the eigenvalues and , in addition , also the corresponding wave functions . as an introduction we also list this code here , however for a simple double - well potential @xmath11 a potential with harmonic minima at @xmath12 separated by a barrier of height @xmath13 at @xmath14 . in the program code",
    "1001 n = 100 ; n = 1:n-1 ;",
    "x0 = 2.5 ; m = sqrt(n ) ; x = 1/sqrt(2)*(diag(m,-1)+diag(m,1 ) ) ; p = i / sqrt(2)*(diag(m,-1)-diag(m,1 ) ) ; h = p^2/2+(sqrtm(x^2)-x0*eye(n))^2/2 ; e = sort(eig(h ) ) ; e(1:8 )    where @xmath15 and the particle mass @xmath16 are chosen as unity and @xmath17 .",
    "in addition it should be noted that the matrix function @xmath18 has been generated by taking the square ` x^2 ` followed by the matlab  matrix function ` sqrtm(x^2 ) ` .",
    "the output of the program is a listing of the first eight energy eigenvalues @xmath19 , @xmath20 , where the eigenvalues below the potential barrier are arranged in doublets .",
    "let us have a brief look at the time dynamics for an initial state chosen as the ground state of the right potential well .",
    "this can be achieved by adding the lines    h1 = p^2/2 + ( x - x0*eye(n))^2/2 ; [ v , eig ] = eig(h1 ) ; psi = v(:,1 ) ; tstep = 20 ; t(1 ) = 0 ; xav(1 ) = psi*x*psi ; u = expm(-i*h*tstep ) ; for nt=1:400 t(nt+1 ) = t(nt)+tstep ; psi = u*psi ; xav(nt+1 ) = psi*x*psi ; end plot(t , xav ) ; set(gca,fontsize,20 ) xlabel(t,fontsize,24 ) ; ylabel(<x>,rotation,0,fontsize,24 ) ; hold on plot(t , x0*cos((e(2)-e(1))*t),*r )    to the program above .",
    "then the time evolution operator @xmath21 is used to propagate the wave function over a sequence of @xmath22 time steps @xmath23 . at each step",
    "the expectation value @xmath24 is computed and finally plotted as a function of time in comparison with the approximation @xmath25 as shown in figure [ f - eigendw2 ] .     as a function of time for a gaussian wave packet",
    "initially at the right well ( blue line ) compared to the approximation @xmath26 ( red stars).[f - eigendw2 ] , width=302 ]    as a second application let us consider an extended one - dimensional system , a particle in a periodic potential @xmath27 accelerated by a constant force @xmath28 : @xmath29 in the tight - binding approximation , the hamiltonian is expressed in terms of the wannier states @xmath2 of the lowest band of the periodic potential , which are localized at the potential minima numbered by @xmath30 .",
    "taking only transitions between neighboring wells into account , the tight - binding hamiltonian reads @xmath31 ( see , e.g. , @xcite and references therein ) , where @xmath32 is the band energy and @xmath33 is the bandwidth .",
    "for @xmath34 we have an almost free motion with quasimomentum @xmath35 for energies inside the band @xmath36 , whereas for @xmath37 the particle is , contrary to a naive expectation , confined to a finite region in space performing an oscillatory motion with a period @xmath38 , the so - called bloch period .",
    "this is closely related to the fact that the hamiltonian possesses the equidistant eigenvalues @xmath39 , @xmath40 .",
    "this bloch oscillation is illustrated by the following program for @xmath41 , @xmath42 , @xmath43 , @xmath44 and an array extending from @xmath45 to @xmath46 .",
    "1001 d = 2*pi ; f = 0.005 ; delta = 1 ; nmax = 60 ; nmin = -60 ; n = nmin : nmax ; nn = length(n ) ; m = ones(1,nn-1 ) ; h = d*f*diag(n,0)+(delta/4)*(diag(m,-1)+diag(m,1 ) ) ;    the matrix representation of the hamiltonian ( [ tbham ] ) in the basis @xmath2 is tridiagonal .",
    "its construction is very similar to the one used for the @xmath47 matrix in the program above . here",
    ", however , there are also non - vanishing entries along the diagonal and the other matrix elements are constant .",
    "the interested reader can easily calculate the eigenvalues of this hamiltonian numerically and compare with the analytical result given above .",
    "this will show that the results agree with the exception of the regions close to the boundary of the finite @xmath30-array , where the numerical values are not yet converged . in the following",
    "we will study the time evolution of an initial wave packet .",
    "we first consider a wave packet , localized initially at site @xmath48 , which is propagated over @xmath49 bloch periods , each one is discretized by @xmath50 time steps :    psi = 0*n ; psi(-nmin+1 ) = 1 ; j = 80 ; n = 2 ; psi = zeros(nn , n*j+1 ) ; psi(:,1 ) = psi ; u = expm(-i*h*2*pi / d / f / j ) ; for nt = 1:n*j psi(:,nt+1 ) = u*psi(:,nt ) ; end t = 0:n*j ; t = t / j ; imagesc(t , n , abs(psi ) ) set(gca,ydir,normal,fontsize,20 ) xlabel(t / t_b,fontsize,20 ) ylabel(n,rotation,0,fontsize,20 )     , title=\"fig:\",width=283 ]   , title=\"fig:\",width=283 ]    the resulting wave function @xmath51 is plotted as a color map in the left panel of figure [ f - bloch ] .",
    "this is a breathing mode , where the wave packet oscillates periodically in the region @xmath52 ( see @xcite for more information ) .",
    "if a broad initial wave function is chosen , the dynamics changes . for example an initial gaussian distribution , realized in the program by replacing the line marked as ` initial state ( localized ) ` by the lines    1001 sig = 0.005 ; phi0 = pi/2 ; psi = exp(-sig*n.^2+i*n*phi0) ; psi = psi / sqrt(sum(abs(psi).^2 ) ) ;    leads to an oscillating mode as shown in the right panel of figure [ f - bloch ] known as the bloch oscillation .",
    "most remarkably , such a bloch oscillation leads to an almost dispersionless directed transport during the first quarter of the bloch period .",
    "then the motion continues in the opposite direction , which suggests that we can prevent this backward motion by a flip of the field direction at this time .",
    "continuing this process periodically , one can expect a directed dispersionless transport . to study such a field - flip system numerically ,",
    "we first replace the second line in the program above by ` nmax = 160;nmin = -40 ; ` and the hamiltonian ` h ` by the two lines    1001 hp = + d*f*diag(n,0)+(delta/4)*(diag(m,-1)+diag(m,1 ) ) ; hm = -d*f*diag(n,0)+(delta/4)*(diag(m,-1)+diag(m,1 ) ) ;    defining hamiltonians with different signs of @xmath28 . as an initial state , a gaussian",
    "is chosen and , for the time - propagation , the corresponding time - evolution operators are defined , which are then applied alternately during the subsequent bloch periods :    1001 up = expm(-i*hp*2*pi / d / f / j ) ; um = expm(-i*hm*2*pi / d / f / j ) ; nn = 0 ; for nb = 1:2*n for nt = 1:j/4 nn = nn+1 ; psi(:,nn+1 ) = up*psi(:,nn ) ; end for nt = 1:j/4 nn = nn+1 ; psi(:,nn+1 ) = um*psi(:,nn ) ; end end    the resulting dynamics shown in figure [ f - blochflip ] agrees with our conjecture .",
    "most remarkably , however , one can show that the transport velocity is given by @xmath53 , which is independent of the force @xmath28 @xcite .",
    ", width=302 ]",
    "in a similar manner one can construct the matrix representation of the angular momentum operators @xmath54 , @xmath55 , @xmath56 in the basis of eigenstates @xmath57 of the operator @xmath56 with eigenvalues @xmath58 , where @xmath59 is the total angular momentum , which is an even or odd multiple of @xmath60 .",
    "first we construct the ladder operators @xmath61 and @xmath62 with @xmath63 and the relations @xmath64\\end{aligned}\\ ] ] coded in the following program lines for @xmath65 :    1001 j = 2 ; m = -j : j-1 ; jp = diag(sqrt(j*(j+1)-m.*(m+1)),1 ) ; jm = jp ; jx = ( jm+jp)/2 ; jy = -i*(jm - jp)/2 ; jz = ( jp*jm - jm*jp)/2 ;    if desired , one can check here the angular momentum commutation relations",
    "@xmath66=\\rmi \\hat j_z$ ] by means of ` jx*jy - jy*jx - i*jz ` , which should yield the zero matrix . as an application",
    ", one can calculate the energy eigenvalues of the rigid body hamiltonian ( @xmath44 ) @xmath67 where the @xmath68 , @xmath69 and @xmath70 are the principal moments of inertia . for a symmetric top ,",
    "the eigenvalues of the hamiltonian are well known , namely @xmath71 for @xmath72 . for an asymmetric top , however , the eigenvalues for the special cases @xmath73 are given in @xcite , but no general formula exists .",
    "this motivates , of course , a numerical approach , which is achieved by adding the program lines    ix = 1/3 ; iy = 1/2 ; iz = 1 ; h = jx^2/2/ix+jy^2/2/iy+jz^2/2/iz ; e = eig(h)    in order to calculate the energy eigenvalues of an asymmetric top with @xmath74 , @xmath75 and @xmath76 for @xmath65 .",
    "note , however , that for this system body - fixed angular momenta must be used with commutation relations @xmath66=-\\rmi \\hat j_z$ ] ( see , e.g. , @xcite for an explanation ) .",
    "this can be achieved by changing the sign of the matrix representing @xmath55 .",
    "this subtlety does not affect the eigenvalues of the hamiltonian ( [ rb_ham ] ) because it depends only of the squares of the operators .",
    "the numerical eigenvalues + `       e = 4.2679    4.5000    6.0000    7.5000    7.7321 ` + given by the program agree with the formulas in @xcite : @xmath77     showing a pronounced spike at the classical energy at the saddle point of the energy surface .",
    "[ f - asytop ] , width=302 ]    such a small value as @xmath65 is , of course , not a challenge for a computational treatment .",
    "the interested reader may try , for instance , the larger angular momentum @xmath78 and analyze the distribution of the eigenvalues by plotting the state density via ` hist(e / j^2,50 ) ` .",
    "the resulting distribution in figure [ f - asytop ] shows a clear restriction to an energy interval and a pronounced maximum .",
    "this structure can be understood by the observation that for large angular momentum the system behaves almost classically . here",
    "the classical dynamics is restricted to a sphere with constant angular momentum @xmath79 and the energy function @xmath80 possesses two minima , two maxima and two saddle points on the angular momentum sphere . for the parameters used in the program ,",
    "the energy at the minima is @xmath81 , at the maxima @xmath82 , and at the saddle point @xmath83 .",
    "this explains the restriction of the quantum energy eigenvalues to the classically allowed region @xmath84 .",
    "furthermore , the quantum state density at the extrema is approximately equal to the period of the classical orbits divided by @xmath85 , which explains the spike in the figure at the location of saddle point energy because the period at the saddle point is infinite .",
    "note that for @xmath86 the quantum density also diverges at the saddle point energy .",
    "an additional application of the angular momentum operators can be found in section [ s - many ] below .",
    "for a particle bound in a two - dimensional potential , the hamiltonian @xmath87 can be conveniently expressed in the way described above by means of the tensor product , i.e.  the kronecker product ` kron ` provided by matlab  . denoting the position operator for one degree of freedom as @xmath88 and the corresponding identity operator as @xmath89 ,",
    "the position operator for the two particles are @xmath90 and @xmath91 .",
    "the same expressions appear for the momentum operators .    as an example",
    "the program described below computes the lowest energy eigenvalues for the pullen - edmonds potential @xcite @xmath92 for @xmath93 .",
    "this potential has been employed in a number of studies related to quantum chaos and also found applications to various molecular systems .",
    "the symmetry group of the hamiltonian is @xmath94 and the eigenstates can be classified by the irreducible representation @xmath95 , @xmath96 and @xmath97 @xcite .",
    "the wave functions with symmetry @xmath98 or @xmath99 are symmetric if @xmath100 and @xmath101 are interchanged , those with @xmath102 or @xmath103 symmetry antisymmetric .",
    "if , on the other hand , the @xmath104 are changed to @xmath105 , the @xmath98 or @xmath103 wave functions are unaffected and the @xmath102 or @xmath99 wave functions change sign . in a harmonic oscillator expansion @xmath106",
    "the coefficients satisfy @xmath107 for @xmath98 or @xmath99 and @xmath108 for @xmath102 or @xmath103 .",
    "in addition only coefficients with even indices appear for @xmath98 or @xmath103 and only coefficients with odd indices for for @xmath102 or @xmath99 .",
    "the states with @xmath97 symmetry are twofold degenerate .",
    "the following program generates the one - dimensional operators as @xmath109 matrices and constructs the hamiltonian as @xmath110 matrices using the tensor product as described above .",
    "the first @xmath111 eigenvalues are displayed on the screen and the wave function of state number @xmath112 is finally plotted .",
    "1001 n = 10 ; nout = 6 ; nplot = 4 ; m = sqrt(1:n-1 ) ; md = diag(m,-1 ) ; x = 1/sqrt(2)*(md + md ) ; p = i / sqrt(2)*(md - md ) ; i = eye(n ) ; x1 = kron(x , i ) ; x2 = kron(i , x ) ; p1 = kron(p , i ) ; p2 = kron(i , p ) ; alpha = 0.5 ; h = p1 ^ 2/2+p2 ^ 2/2+x1 ^ 2/2+x2 ^ 2/2+alpha*x1 ^ 2*x2 ^ 2 ; [ c , eig ] = eig(h ) ; format short e = diag(eig)(1:nout)    this resulting eigenvalues + `      1.0980    2.2634    2.2634    3.2791    3.5157    3.7214 ` + agree very well with those given in @xcite for the ground state energies with @xmath98 , @xmath97 , @xmath103 and @xmath99 symmetry : + `      1.0980    2.2634    3.2789    3.7223 ` + in order to identify the symmetry of the states calculated numerically , the matrix of the expansion coefficients is displayed by means of    format bank cplot = reshape(c(:,nplot),n , n )    for the state @xmath113 with energy @xmath114 , whose wave function is subsequently plotted .",
    "one observes indeed that for this state the matrix is antisymmetric and that all entries with odd indices vanish as required for a symmetry @xmath103 .",
    "this symmetry is , of course , also visible if the wave function @xmath115 is explicitly calculated and plotted as a color map .",
    "the following program lines first compute the one - dimensional harmonic oscillator wave functions @xmath116 iteratively which are then stored in the matrix ` hermval ` as described in @xcite .",
    "finally the expansion ( [ psiexp ] ) is carried out as the scalar product ` psi = hermval*cplot*hermval ' ` and plotted :    xx = -4:0.05:4 ; nx = length(xx ) ; hermval = zeros(nx , n ) ; h0 = [ 1 ] ; hermval(:,1 ) = polyval(h0,xx).*exp(-0.5*xx.^2 ) ; h1 = [ sqrt(2 ) 0 ] ; hermval(:,2 ) = polyval(h1,xx).*exp(-0.5*xx.^2 ) ; v1 = [ 1 0 ] ; v0 = [ 0 0 1 ] ; for n = 2:n-1 h2 = sqrt(2/n)*conv(h1,v1)-sqrt(1 - 1/n)*conv(h0,v0 ) ; h0 = h1 ; h1 = h2 ; hermval(:,n ) = polyval(h2,xx).*exp(-0.5*xx.^2 ) ; end psi = hermval*cplot*hermval ; imagesc(xx , xx , psi ) ; axis square ; set(gca,fontsize,20 ) xlabel(x,fontsize,24 ) ; ylabel(y,rotation,0,fontsize,24 ) ;    for more pictures of pullen - edmonds eigenfunctions see , e.g. , @xcite .    .",
    "[ f - eigen2 ] , width=302 ]",
    "a prominent example of a many - particle quantum system is the @xmath113-particle bose - hubbard system @xcite , which is one of the basic models studied in theoretical investigations of the dynamics of many particles on a lattice . numbering the lattice sites by @xmath30 , the operators @xmath117 and @xmath118 with @xmath119=1 $ ] describe annihilation and creation of a particle at site @xmath30 and @xmath120 is the particle number operator at site @xmath30 .",
    "these operators for different sites commute .",
    "then the hermitian operators @xmath121 describe the destruction of a particle at site @xmath30 and the creation at site @xmath122 , and @xmath123 the hopping of a particle between these sites . if the particles interact with each other the interaction energy is proportional to the product of the particle number operators .",
    "in many cases this interaction is short ranged , so that only the interaction of particles on the same site must be taken into account .",
    "let us confine ourselves here to the simple case of a two - site system , the bose - hubbard dimer , with hamiltonian @xmath124 where @xmath125 are the site energies , @xmath126 the hopping and @xmath127 the interaction strength .",
    "the hamiltonian commutes with the particle number operator @xmath128 , i.e.  the particle number @xmath113 is conserved .",
    "it is of interest to realize that the bose - hubbard dimer also appears naturally for a collection of @xmath113 bosonic atoms in a double - well potential , which is deep enough so that only the lowest state in each well is populated . in this two - mode approximation",
    "the system can be described by the hamiltonian ( [ hbhdimer ] ) .",
    "the following matlab  program calculates the eigenvalues of the hamiltonian ( [ hbhdimer ] ) .",
    "first the creation and annihilation operators at the two sites are constructed by means of the ` kron ` product as well as the hamiltonian , whose eigenvalues and eigenstates are then calculated for @xmath129 , i.e.  a matrix dimension of @xmath130 for the single particle operators @xmath0 :    1001 n = 24 ; np = n+1 ; nout = 10 ; epsilon = 1 ; v = 1 ; c = 1 ; a = diag(sqrt(1:n),1 ) ; ad = a ; i = eye(np ) ; a1 = kron(a , i ) ; ad1 = a1 ; a2 = kron(i , a ) ; ad2 = a2 ; h = epsilon*(ad1*a1-ad2*a2)+v*(ad1*a2+ad2*a1)+c/2*(ad1*a1-ad2*a2)^2 ; [ c , e ] = eig(h ) ; e = diag(e ) ;    one should be aware of the fact that the many - particle operators are represented by @xmath131 matrices and therefore one obtains @xmath132 energy eigenvalues , however not all of them are fully converged because of the restricted basis set @xmath133 .",
    "all eigenstates populating only this restricted basis set are accurately represented , i.e.  those with particle numbers up to @xmath113 , a number of @xmath134 states .",
    "to illustrate this , the following program lines compute for all calculated eigenstates the expectation values @xmath135 of the number operator , which agree with the exact particle number for the eigenstates because @xmath136 and @xmath137 commute .",
    "these values are subsequently ordered .",
    "there are @xmath138 eigenstates for each value of @xmath139 , and therefore a total number of @xmath134 , which are converged for the chosen basis size @xmath140 .",
    "finally the converged energy eigenvalues are plotted as a function of the particle number @xmath141 .",
    "nav = diag(c*(ad1*a1+ad2*a2)*c ) ; [ nav , index ] = sort(nav ) ; e = e(index ) ; plot(nav(1:np*(np+1)/2),e(1:np*(np+1)/2),b* ) set(gca,ydir,normal,fontsize,20 ) ; axis([0 25 -50 350 ] ) xlabel(<n>,fontsize,20 ) ; ylabel(e_n,rotation,0,fontsize,20 )    .",
    "[ f - bhdimer ] , width=302 ]    in many applications , one is only interested in the eigenvalues and eigenstates of the hamiltonian for a prescribed value @xmath113 of the particle number .",
    "then one can make use of the following trick : an extra term @xmath142 ( @xmath143 ) is added to the hamiltonian which does not affect the states with the given particle number @xmath113 but which shifts the states with different particle numbers to high energies .",
    "the desired eigenvalues can then be obtained by extracting the low - energy part of the spectrum of the resulting effective hamiltonian as implemented in the following program :    1001 n = 6 ; np = n+1 ; epsilon = 1 ; v = 1 ; c = 1 ; a = diag(sqrt(1:np-1),1 ) ; ad = a ; i = eye(np ) ; a1 = kron(a , i ) ; ad1 = a1 ; a2 = kron(i , a ) ; ad2 = a2 ; h = epsilon*(ad1*a1-ad2*a2)+v*(ad1*a2+ad2*a1)+c/2*(ad1*a1-ad2*a2)^2 ; lambda = 10000 ; h1 = h - lambda.*(ad1*a1+ad2*a2-n*kron(i , i ) ) ; e1 = eig(h1 ) ; e2 = e1.*(abs(e1)<10*epsilon.*n ) ; e = e2(find(e2))    calculated are the seven eigenvalues for @xmath144 with the result + ` e = -4.792349   0.078611 4.347781 6.348595 12.731351 12.786011 24.500000 ` + a more sophisticated alternative method leading to the same results for the eigenvalues consists in computing the hamiltonian @xmath145 for a fixed particle number @xmath113 by projecting the original hamiltonian @xmath136 on the corresponding eigenstates of the number operator @xmath146 . since the latter is a represented by a diagonal matrix , the implementation is rather straightforward :    1001 n_op = ad1*a1+ad2*a2 ; in = find(abs(diag(n_op)-n)<10 ^ -6 ) ; n_p = n_op(:,in)./n ; h_n = n_p*h*n_p ; e = eig(h_n )    for the bose - hubbard dimer , there is , however , a much more convenient way to describe the system for a fixed particle number @xmath113 . the jordan - schwinger representation",
    "@xmath147 transforms the system to angular momentum operators .",
    "the hamiltonian ( [ hbhdimer ] ) then takes the form @xmath148 and the total angular momentum is @xmath149 . using the matrix representation of angular momentum operators discussed in section [ s - ang ]",
    ", this hamiltonian can be easily coded in the following matlab  program :    1001 n = 6 ; j = n/2 ; m = -j : j-1 ; jp = diag(sqrt(j*(j+1)-m.*(m+1)),1 ) ; jm = jp ; jx = ( jm+jp)/2 ; jy = i*(jm - jp)/2 ; jz = ( jp*jm - jm*jp)/2 ; epsilon = 1 ; v = 1 ; c = 1 ; h = 2*epsilon*jz+2*v*jx+2*c*jz^2 ; e = eig(h)    the results agree precisely with those given above for @xmath144 .    in the case of high matrix dimensions time and memory",
    "can be saved by using sparse matrices . in matlab",
    "this can be implemented straightforwardly , e.g.  the sparse matrix representation of the annihilation operator and the identity in an @xmath150-dimensional space are given by ` a = sparse(diag(sqrt(1:n),1 ) ) ` and ` i = speye(n+1 ) ` respectively .",
    "this automatically leads to a sparse matrix representation of the hamiltonian @xmath151 .",
    "this already becomes relevant if the bose - hubbard dimer is extended by an additional site .",
    "such a bose - hubbard trimer , as described by the hamiltonian @xmath152\\end{aligned}\\ ] ] was considered in @xcite .",
    "here we identify site number 4 with site number 1 , i.e.  the three sites form a triangular structure which constitutes a minimal model for a superfluid circuit of a bose - einstein condensate .",
    "the additional phase factors in the hopping term describe the influence of an applied magnetic flux @xmath153 ( in scaled dimensionless units ) or alternatively a rotation of the system with a frequency @xmath154 ( see @xcite for more details ) .",
    "the following program computes the eigenvalues @xmath19 , eigenstates @xmath155 and the expectation values of the current @xmath156 and plots the results :    1001 nd = 3 * 10 + 3 ; n = nd-1 k = 1 ; phi = 0.8*pi ; u = 0.5 u = k*u / n u_qm = 3*u / n.^2 a = sparse(diag(sqrt(1:nd-1),1 ) ) ; ad = a ; i = speye(nd ) ; a1 = kron(kron(a , i),i ) ; ad1 = a1 ; a2 = kron(kron(i , a),i ) ; ad2 = a2 ; a3 = kron(kron(i , i),a ) ; ad3 = a3 ; n_op = ad1*a1+ad2*a2+ad3*a3 ; in = find(abs(diag(n_op)-n)<10 ^ -6 ) ; n_p = n_op(:,in)./n ; h = -k/2*(exp(i*phi/3)*(ad2*a1+ad3*a2+ad1*a3 ) ... + exp(-i*phi/3)*(ad1*a2+ad3*a1+ad2*a3 ) ) ... + u/2*(ad1 ^ 2*a1 ^ 2+ad2 ^ 2*a2 ^ 2+ad3 ^ 2*a3 ^ 2 ) ; h_n = n_p*h*n_p ; [ c , e ] = eig(full(h_n ) ) ; e = diag(e)/u ; dh_dphi = -k/2*(-i/3*exp(i*phi/3)*(ad2*a1+ad3*a2+ad1*a3 ) ... + i/3*exp(-i*phi/3)*(ad1*a2+ad3*a1+ad2*a3 ) ) ; dh_dphi_n = n_p*dh_dphi*n_p ; jav = real(diag(c*dh_dphi_n*c ) ) ; plot(jav , e,o,markerfacecolor,r,markeredgecolor,r ) set(gca,ydir,normal,fontsize,20 ) ; xlabel(<j>,fontsize,20 ) ; ylabel(e_n / u,rotation,90,fontsize,20 ) axis square    ( depending on the matlab  version used it may be required to replace ` eig(h_n ) ` by ` eig(full(h_n ) ) ` . )",
    "current @xmath157 and eigenenergies @xmath158 of the bose - hubbard trimer for @xmath159 , @xmath160 .",
    "first four panels : @xmath161 particles and interaction strength @xmath162 respectively .",
    "last two panels : @xmath163 and @xmath164 . ,",
    "title=\"fig:\",width=188 ]   current @xmath157 and eigenenergies @xmath158 of the bose - hubbard trimer for @xmath159 , @xmath160 .",
    "first four panels : @xmath161 particles and interaction strength @xmath162 respectively .",
    "last two panels : @xmath163 and @xmath164 . ,",
    "title=\"fig:\",width=188 ]   current @xmath157 and eigenenergies @xmath158 of the bose - hubbard trimer for @xmath159 , @xmath160 .",
    "first four panels : @xmath161 particles and interaction strength @xmath162 respectively .",
    "last two panels : @xmath163 and @xmath164 . ,",
    "title=\"fig:\",width=188 ]   current @xmath157 and eigenenergies @xmath158 of the bose - hubbard trimer for @xmath159 , @xmath160 .",
    "first four panels : @xmath161 particles and interaction strength @xmath162 respectively .",
    "last two panels : @xmath163 and @xmath164 . ,",
    "title=\"fig:\",width=188 ]   current @xmath157 and eigenenergies @xmath158 of the bose - hubbard trimer for @xmath159 , @xmath160 .",
    "first four panels : @xmath161 particles and interaction strength @xmath162 respectively .",
    "last two panels : @xmath163 and @xmath164 . , title=\"fig:\",width=188 ]   current @xmath157 and eigenenergies @xmath158 of the bose - hubbard trimer for @xmath159 , @xmath160 .",
    "first four panels : @xmath161 particles and interaction strength @xmath162 respectively .",
    "last two panels : @xmath163 and @xmath164 . ,",
    "title=\"fig:\",width=188 ]    figure [ f - trimer ] shows the distribution of the eigenstates with respect to the eigenenergies and the currents . for noninteracting particles , @xmath165 , the current @xmath166 commutes with the hamiltonian and each eigenstate carries a quantized current , forming a triangle in the energy - current plane as explained in @xcite . for an integer filling @xmath167 of the trimer , the eigenstates are more and more redistributed along the line indicating zero current with increasing interaction @xmath168 . in the high interaction limit",
    ", even the ground state becomes a zero current and thus an insulator state .",
    "this is a signature of a so - called superfluid to mott insulator transition , illustrated by the first four panels .",
    "in contrast , for a non - integer filling per site the ground state always carries a current even in the strong interaction limit as shown for @xmath169 and @xmath170 in the last two panels .",
    "more about the rich behavior of this three site bose - hubbard system can be found in @xcite .",
    "open quantum systems are relevant in various fields including electronic transport in semiconductors and nanostructures @xcite and cavity qed @xcite .",
    "another example of an open system is given by bose - einstein condensates in optical lattices which are subject to a decay process due to coupling to an environment , a setup studied recently experimentally ( see e.g.  @xcite ) and theoretically using different approaches @xcite .",
    "for weak decay such systems can be described by means of a born - markov approximation leading to a lindblad master equation for the system s density matrix @xcite . for the bose - hubbard dimer of section",
    "[ s - many ] the lindblad master equation can be written as ( see e.  g.  @xcite ) @xmath171-\\frac{\\gamma } { 2}\\ ,     \\big ( { \\hat a}_2^\\dagger { \\hat a}_2{\\hat \\rho}+ { \\hat \\rho}{\\hat a}_2^\\dagger      { \\hat a}_2 - 2 { \\hat a}_2 { \\hat \\rho}{\\hat a}_2^\\dagger \\big ) \\label{lindblad}\\ ] ] where the second term models a particle decay from site @xmath172 with rate @xmath173 and the first term corresponds to the hermitian part of the time evolution with the two site bose - hubbard hamiltonian @xmath151 as given in equation ( [ hbhdimer ] ) . in @xcite",
    "it was shown that this equation accurately describes tunneling decay from the dimer into a weakly coupled optical lattice .    in the following",
    "we consider the situation where initially @xmath113 particles are in the second well of the bose - hubbard dimer whereas the first well is empty .",
    "the corresponding initial wavefunction and density matrix at time @xmath174 are then given by @xmath175 and @xmath176 respectively .",
    "using the matrix representations introduced in the previous sections the following matlab  code propagates the initial density matrix according to equation ( [ lindblad ] ) by means of a predictor corrector integrator @xcite .",
    "the expectation values of the time - dependent site occupations are then obtained via @xmath177 .",
    "relative total particle number @xmath178 ( solid line ) and relative particle number in the second well @xmath179 ( dashed line ) as a function of time for an open bose - hubbard dimer with @xmath180 , @xmath181 , @xmath182 , @xmath49 and decay with the rate @xmath183 from the second well . scaled units with @xmath44 are used.,scaledwidth=50.0% ]    1001 n = 2 ; np = n+1 ; nout = 10 ; epsilon = 0 ; v = 0.3 ; c = 0.6 ; a = diag(sqrt(1:n),1 ) ; ad = a ; i = eye(np ) ; a1 = kron(a , i ) ; ad1 = a1 ; a2 = kron(i , a ) ; ad2 = a2 ; h = epsilon*(ad1*a1-ad2*a2)+v*(ad1*a2+ad2*a1)+c/2*(ad1*a1-ad2*a2)^2 ; gamma = 0.02 ; psi0_1 = zeros(np,1 ) ; psi0_1(1 ) = 1 ; psi0_2 = zeros(np,1 ) ; psi0_2(n+1 ) = 1 ; psi0 = kron(psi0_1,psi0_2 ) ; rho = psi0*psi0 ; dt = 0.05 ; tlist = ( 0:2000)*dt ; n1 = zeros(1,length(tlist ) ) ; n2 = zeros(1,length(tlist ) ) ; for l = 1:length(tlist ) n2(l ) = trace(rho*ad2*a2 ) ; n1(l ) = trace(rho*ad1*a1 ) ; nk = 10 ; for k = 1:10 rho_pred = rho-1i*(h*rho - rho*h)*dt / nk+0.5*gamma*(a2*rho*ad2 ... -ad2*a2*rho+a2*rho*ad2-rho*ad2*a2)*dt / nk ; rho_m = 0.5*(rho+rho_pred ) ; rho = rho-1i*(h*rho_m - rho_m*h)*dt / nk+0.5*gamma*(a2*rho_m*ad2 ... -ad2*a2*rho_m+a2*rho_m*ad2-rho_m*ad2*a2)*dt / nk ; end ; end ; figure(1 ) hold on plot(tlist , n2/n,r ) ; plot(tlist,(n1+n2)/n,b ) ; box on xlabel(time t ) ; ylabel(relative particle number )    figure [ f - lindblad ] shows the resulting decay dynamics of the relative total particle number @xmath178 ( solid line ) and the relative particle number in the second well @xmath179 for a symmetric double well with @xmath180 , tunneling coefficient @xmath181 , interaction constant @xmath182 , decay rate @xmath183 and an initial particle number @xmath49 .    in a non - interacting open dimer ,",
    "the occupation @xmath179 would yield exponentially damped cosine - shaped rabi oscillations .",
    "we clearly observe how this behavior is modified by the interaction between the particles .",
    "various fourier components occur which result from different excitation energies in the spectrum of the interacting bosonic system .",
    "matrix representation techniques were presented and illustrated by a variety of different examples demonstrating both their simplicity and wide applicability .",
    "these qualities make them suitable for use in research projects as well as quantum mechanics courses for undergraduate and graduate students .",
    "the authors would like to thank eva - maria graefe for careful reading of the manuscript and for all valuable comments and suggestions ."
  ],
  "abstract_text": [
    "<S> convenient and simple numerical techniques for performing quantum computations based on matrix representations of hilbert space operators are presented and illustrated by various examples . </S>",
    "<S> the applications include the calculations of spectral and dynamical properties for one - dimensional and two - dimensional single - particle systems as well as bosonic many - particle and open quantum systems . </S>",
    "<S> due to their technical simplicity these methods are well suited as a tool for teaching quantum mechanics to undergraduates and graduates . </S>",
    "<S> explicit implementations of the presented numerical methods in matlab  are given .    </S>"
  ]
}