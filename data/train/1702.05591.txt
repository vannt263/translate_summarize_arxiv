{
  "article_text": [
    "currently , digital systems ( _ e.g. _ , filters and controllers ) are used in a wide variety of applications , due to some advantages over their analog counterparts , such as reliability , flexibility , and cost .",
    "nonetheless , there are disadvantages regarding their use : since they are normally implemented in microprocessors , errors might be introduced , due to quantization and related round - off effects  @xcite .    hardware choice , structure representations ( _ e.g. _ , direct forms ) , and implementation features ( _ e.g. _ , number of integer and fractional bits , in fixed - point arithmetic ) can heavily influence a given digital - system s precision and performance  @xcite .",
    "additionally , such implementations are particularly susceptible to finite word - length ( fwl ) effects ( e.g. , overflows , limit cycles , and poles and zeros sensitivity ) , which have the potential to reduce the associated reliability and efficiency .",
    "previous studies have already shown that fwl effects might lead to excessive power loss and lifespan reduction , in power converters  @xcite and oscillators  @xcite ; they might also affect the stability and performance of feedback control systems  @xcite .",
    "thus , it is important to develop techniques that provide proof of correctness and safety , regarding digital - system implementations affected by fwl effects .    in order to detect the mentioned errors in digital systems ,",
    "a model - checking procedure based on boolean satisfiability ( sat ) and satisfiability modulo theories ( smt ) has been proposed , named as digital - system verifier ( dsverifier )  @xcite .",
    "dsverifier checks specific properties related to overflow , limit cycle , stability , and minimum - phase , in digital - system implementations  @xcite , and also supports the verification of robust stability , considering parametric uncertainties for closed - loop systems represented by transfer functions  @xcite . recently ,",
    "dsverifier was extended to support state - space systems , considering single - input single - output ( siso ) and multiple - input multiple - output ( mimo ) systems  @xcite , in order to verify violations in stability , controllability , observability , and quantization - error properties . although those contributions present important advances regarding formal verification of digital systems , they do not offer any compatibility with tools usually employed in the design of digital filters and controllers ( _ e.g. _ , matlab  @xcite ) .",
    "currently , there are several toolboxes in matlab with functions to facilitate the design of digital systems  @xcite .",
    "for instance , the fixed - point designer toolbox provides data - types and tools for developing fixed - point digital systems .",
    "there are also other modules with different objectives , such as optimization , control systems , and digital signal processing .",
    "in particular , users could employ formal verification methods to identify errors and generate test vectors for reproducing errors . in that sense ,",
    "simulink design verifier  @xcite employs formal methods to identify hidden design errors , without extensive simulation runs ; it detects blocks that result in integer overflow , dead logic , array access , division by zero , and requirement violations .",
    "additionally , it is possible to use tools for detecting and proving errors in source code written in c / c++ , through polyspace bug finder  @xcite . nonetheless , both tools are unable to automatically detect specific errors related to digital system design ( _ e.g. _ , limit cycle , stability , and minimum - phase ) , unless an engineer provides additional assertions to be checked  @xcite . finally , the mentioned tools do not consider fwl effects during verification , and also , there is no matlab toolbox for verifying digital systems using symbolic model checking based on sat and smt solvers .",
    "the present paper addresses this problem and presents a matlab toolbox for dsverifier , known as dsverifier toolbox , which applies sat- and smt - based model checking to digital systems  @xcite , in the matlab s environment . the main advantage regarding the use of a matlab toolbox lies on designing digital systems in matlab and then promptly verifying their desired properties : overflow ,",
    "limit - cycle , stability , minimum - phase , controlability , observability , and quantization error .",
    "additionally , when using the dsverifier toolbox , an engineer is able to design a digital system with matlab , through tranfer - function or state - space representations and considering low - level systems parameters ( implementation characteristics and numeric format ) , define realization forms ( _ e.g. _ , delta and direct forms ) , and evaluate different overflow modes ( wrap - around or saturate mode ) .",
    "finally , if a verification procedure fails , the dsverifier toolboxreturns a counterexample in a `` .mat '' file , which explores the violation , considering inputs , initial states , and outputs , in order to reproduce a counterexample .",
    "the proposed verification methodology is based on dsverifier and can be split into four steps . in step @xmath0 ,",
    "a digital system is designed ( in open- or closed - loop ) , with any design technique or tool .",
    "later , implementation features are defined in step @xmath1 , _",
    "i.e. _ , fwl format ( number of bits in the integer and fractional parts ) , dynamic range , and realization form ( direct or delta ) .",
    "dsverifier formulates a fwl function @xmath2}:\\mathcal{p}^{n}\\rightarrow\\mathcal{p}^{n}$ ] , where @xmath3 is a space of polynomials of @xmath4-th order , in order to reproduce the effects of the chosen fwl format over the coefficients of a digital system .",
    "@xmath5}$ ] is the polynomial @xmath6 with fwl effects that is used to compute round - off effects , in digital systems .",
    "those definitions are then passed to dsverifier , along with hardware specifications and other verification parameters ( _ e.g. _ , verification time ) and properties to be checked .    in particular , with respect to open - loop systems in transfer - function representation",
    ", dsverifier supports verification of overflow , stability , minimum - phase , limit cycle , and quantization error properties , while it provides verification for stability , controllability , observability , and quantization properties , in state - space representation .",
    "regarding closed - loop systems represented by a controller and a plant in transfer function form , dsverifier is able to verify stability , quantization error , and limit - cycle , while it checks stability , controllability , observability , and quantization error , when state - space equations are employed .    once the configuration has been set up in step @xmath7 , the verification process",
    "is then started in step @xmath8 , with the chosen model - checking tool ( cbmc  @xcite or esbmc  @xcite can be used as back - end ) .",
    "dsverifier then checks the desired properties and returns `` successful '' , if there is no property violation in the proposed implementation , or `` failed '' together with a counterexample , which contains inputs and states that lead the system under evaluation to a given property violation .",
    "the implementation features and design should then be improved , based on the available counterexample , _",
    "i.e. _ , realization , representation , and fwl format can then be re - chosen , in order to avoid errors .",
    "finally , such a process is repeated until a digital controller implementation does not present any failure .",
    "dsverifier toolboxuses bounded model checking ( bmc ) as verification engine .",
    "the basic idea of the bmc technique is to check the negation of a given property , at a given depth . given a transition system @xmath9 , a property @xmath10 , and a bound @xmath11 , the employed verification engine unrolls the transition system @xmath11 times and translates it into a verification condition @xmath12 , in such a way that @xmath12 is satisfiable if and only if @xmath10 has a counterexample of depth less than or equal to @xmath11 .",
    "thus , overflow , limit cycle , and quantization errors , in transfer - function representation , and quantization error verification , when employing a state - space representation must be unrolled @xmath11 times , in order to find violations ( verification is incomplete , but sound up to @xmath11 ) . in contrast , properties such as stability and minimum - phase , in transfer - function representation , and controllability , stability , and observability , in state - space representation , do not need a definition of @xmath11 ( verification is complete and sound ) .",
    "fig .  [ method_toolbox ] shows the proposed dsverifier toolbox s verification methodology , which can be split into two main stages : manual ( user ) and automated ( toolbox ) procedures . in the former",
    ", the user manually performs steps @xmath0 to @xmath7 , which are the same tasks performed by dsverifier ( design of a digital - system , definition of numerical representation , realization form , and verification configuration ) .",
    "note that all those specifications are provided as parameters ( and translated to a struct format in the automated procedures performed by the toolbox ) , as can be seen in fig .",
    "[ method_toolbox ] .",
    "the toolbox s automated engine ( steps @xmath13 to @xmath14 ) receives a digital system s specification ( as parameters ) and verifies the desired property @xmath10 . in step @xmath13",
    ", intermediate ansi - c code for the desired implementation is created , based on parameters that are then translated into a struct format ( in matlab ) and parsed , while the respective bmc tool is set and all requirements are configured in step @xmath15 . finally , in step @xmath14 , the resulting ansi - c code is passed to a highly - efficient bmc tool ( _ e.g. _ , cbmc or esbmc ) and then converted into sat or smt formulae , which are checked by the respective solver .",
    "if any violation is found , then dsverifier reports a counterexample , which contains system inputs that lead to a failure ; otherwise , it returns a successful verification . in particular , in case of a failure , the proposed toolbox receives a counterexample and generates a corresponding ",
    ".mat file .",
    "it is worth noticing that the same counterexample could be reproduced and validated with the dsvalidator  @xcite tool .      1 .",
    "* digital - system representation : * dsverifier toolboxhandles digital systems represented by transfer - function and state - space representations .",
    "* realization : * dsverifier toolboxperforms the verification of direct forms , such as direct - form i ( dfi ) , direct - form ii ( dfii ) , and transposed direct - form ii ( tdfii ) , and also delta forms , such as delta direct - form i ( ddfi ) , delta direct - form ii ( ddfii ) , and delta transposed direct - form ii ( tddfii ) .",
    "* properties : * dsverifier toolboxverifies , for transfer - function representation , stability , overflow , minimum phase , limit - cycle , and quantization error , while in state - space representation , it verifies stability , quantization error , observability , and controllability properties .",
    "* closed - loop systems : * dsverifier toolboxverifies stability , limit - cycle , and quantization error in transfer - function representation , while for state - space systems , all properties mentioned for open - loop systems are checked , via state feedback matrix .",
    "* bmc tools : * dsverifier toolboxhandles the verification for digital - systems using cbmc  @xcite or esbmc  @xcite as back - end , in order to perform bmc .      in order to explain the dsverifier toolbox s workflow , the following second - order controller for a a / c motor plant is used , which can be found in a set of benchmarks ( _ e.g. _ , unmanned aerial vehicle ) available online :    @xmath16      currently , users must provide a digital system described as a matlab system , _",
    "i.e. _ , using a ` tf ` ( for transfer - function ) or an ` ss ` ( for state - space ) command , in order to design systems . in this command - line version ,",
    "dsverifier toolboxis invoked to check the desired property @xmath10 and digital system representation ( _ i.e. _ , transfer - function , closed - loop , or state - space ) .",
    "table  [ table - functions ] shows the dsverifier toolbox s commands that perform the proposed verification and the required parameters for each property .",
    "in particular , a @xmath11 bound is required only in some properties , as mentioned in section  [ dsv - engine ] . in table  [ table - functions ] , @xmath17 represents the digital system in transfer - function or state - space format , @xmath18 is the integer part , @xmath19 is the fractional part , @xmath20 and @xmath21 are the maximum and minimum dynamic range , respectivelly , @xmath22 is the @xmath11 bound to be employed during verification , @xmath23 is the connection mode , for closed - loop systems in transfer - function ( series or feedback ) , and @xmath24 is the maximum possible value in the quantization error check .    [",
    "cols=\"<,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     additionally , optional parameters can be included , such as overflow mode , rounding mode , bmc tool , solver , quantization error mode , delta coefficient ( for delta realization ) , and other attributes that dsverifier supports .. ] all available functions w.r.t .",
    "the dsverifier toolboxhave been exhaustively tested and experimental results are available online .      in order to illustrate the dsverifier toolbox s usage , fig .",
    "[ toolbox - usage ] shows the stability verification for the digital system specified in eq .",
    "[ equation_controller ] , using a fixed - point format @xmath25 and a dynamic range @xmath26 $ ] .    ....",
    "> > num = [ 1.0000 -2.8190 2.6370 -0.8187 ] ; > > den = [ 1.0000 -1.9700 1.0330 -0.0607 ] ; > > system = tf(num , den,0.001 ) ; > > > >",
    "verifystability(system,2,13,1,-1 ) ; > > verification successful ....    if the fixed - point format is changed to @xmath27 , for the same system described in eq .",
    "[ equation_controller ] , the verification indicates a failure , _",
    "i.e. _ , the digital system is unstable , as can be seen in fig .",
    "[ toolbox - unstable ] , which indicates that the dsverifier toolboxis able to correctly verify digital systems with different implementations .    ....",
    "> > verifystability(system,12,3,1,-1 ) ; > > verification failed ....    after verifying that the adopted digital system is unstable ( _ i.e. _ , verification fails ) with the fixed - point format @xmath27 , the respective verification result can be confirmed by reproducing the counterexample generated by the dsverifier toolbox . as mentioned during the explanation of the proposed methodology , we can have a polynomial @xmath6 with fwl effects , through the application of @xmath5}$ ] .",
    "in particular , we compute the roots of @xmath5}$ ] , in order to check stability . if any root has modulus equal or greater than one , then the system is unstable ; otherwise , it is stable . when applying @xmath28}$ ] , with the first case ( _ i.e. _ , @xmath25 ) , and computing the roots of the denominator of @xmath28}$ ] , where @xmath29 is introduced in eq .",
    "[ equation_controller ] to represent a digital - system , we obtain the following set of poles : @xmath30 , from which one can conclude that all poles are inside the unit circle .",
    "this means that the mentioned system is stable , when the numeric representation @xmath25 is used ; however , when applying @xmath28}$ ] to the second case ( _ i.e. _ , @xmath27 ) and then computing the denominator roots of @xmath28}$ ] , the following set of poles is obtained : @xmath31 , where set @xmath32 has one root with modulus greater than one , which confirms that using @xmath27 , as fixed - point format , the verified system becomes unstable .",
    "the stability for the digital systems described above could be indeed observed through the step response for both cases , as shown in fig .",
    "[ step_response ] . in subfigure [ step_response](a )",
    ", the step response shows that the digital system is stable , while in [ step_response](b ) it is unstable .",
    "a graphical user interface application was developed , in order to favor digital - system verification in matlab , besides improving usability and , consequently , attracting more digital - system engineers .",
    "users can provide all required parameters for digital - system verification : digital - system specification , target implementation , and properties to be checked .",
    "dsverifier toolboxis able to verify dynamic digital - systems ( controllers or filters ) designed in matlab , through transfer - function and state - space representations in open- or closed - loop format .",
    "regarding transfer - function representations , users are able to verify stability , minimum - phase , limit - cycle , overflow , and quantization error properties , while in state - space format , stability , quantization error , observability , and controllability properties can be verified .",
    "we have shown that a digital controller using different numerical representations can present distinct verification results .",
    "in particular , we demonstrated that a specific representation has the potential to cause instability and then compromise the entire system s operation .",
    "dsverifier toolboxcan verify digital systems with different implementation aspects .",
    "given the current knowledge in formal verification , there is no other matlab toolbox for verifying specific properties of digital systems , while taking into account implementation aspects .    as future work",
    ", dsverifier toolboxcould perform verification for robust stability , by considering uncertainty in the plant and controller of closed - loop systems , and it could also be integrated into dsvalidator  @xcite .",
    "peterchev a and _ et al . _",
    "( 2003 ) quantization resolution and limit cycling in digitally controlled pwm converters . in _ ieee trans .",
    "power electronics _ , 18(1 ) : pp.301308 .",
    "peretz m and _ et al . _",
    "( 2010 ) digital control of resonant converters : resolution effects on limit cycles . in _",
    "ieee trans .",
    "power electronics _ , 25(6 ) : pp .",
    "keel l , bhattacharyya s ( 1997 ) robust , fragile , or optimal ? . in _ ieee trans .",
    "automatic control _ , 42(8 ) : pp .",
    "ismail h. and _ et al . _",
    "( 2015 ) `` dsverifier : a bounded model checking tool for digital systems '' . in _ spin _ ,",
    "lncs 9232 , pp",
    ". 126131 .",
    "kroening , d. and tautschnig , m. ( 2014 ) `` cbmc  c bounded model checker , '' in _ tacas _ , lncs 8413 , pp .",
    "389391 . cordeiro and _ et al . _",
    "( 2012 ) `` smt - based bounded model checking for embedded ansi - c software , '' in _ tse _ , 38(4 ) : pp .",
    "chaves , l. and _ et al . _",
    "( 2016 ) `` dsvalidator : an automated reproducibility tool for digital systems '' , in technical report published as an arxiv document ."
  ],
  "abstract_text": [
    "<S> a matlab toolbox is presented , with the goal of checking occurrences of design errors typically found in fixed - point digital systems , considering finite word - length effects . in particular </S>",
    "<S> , the present toolbox works as a front - end to a recently introduced verification tool , known as digital - system verifier , and checks overflow , limit cycle , quantization , stability , and minimum phase errors , in digital systems represented by transfer - function and state - space equations . </S>",
    "<S> it provides a command - line version , with simplified access to specific functions , and a graphical - user interface , which was developed as a matlab application . </S>",
    "<S> the resulting toolbox is important for the verification community , since it shows the applicability of verification to real - world systems .    </S>",
    "<S> embedded digital systems ; matlab toolbox ; software model checking ; formal verification . </S>"
  ]
}