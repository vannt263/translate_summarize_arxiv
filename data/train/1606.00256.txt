{
  "article_text": [
    "quantum hash functions are similar to classical ( cryptographic ) hash functions and their security is guaranteed by physical laws .",
    "however , their construction and applications are not fully understood .",
    "quantum hash functions were first implicitly introduced in @xcite as quantum fingerprinting",
    ". then @xcite noticed that quantum fingerprinting can be used as cryptoprimitive .",
    "however , binary quantum hash function are not very suitable if we need group operations ( and group is not @xmath0 .",
    "for example , several classical hash functions were proposed that use groups , e.g. by @xcite and by @xcite .",
    "@xcite gave a definition and construction of non - binary quantum hash functions .",
    "@xcite showed how to generalize quantum hashing to arbitrary finite groups .",
    "recently , @xcite showed how quantum hash functions are connected with @xmath1-biased sets .",
    "quantum hash functions map a classical message into a hilbert space .",
    "such space should be as small as possible , so eavesdropper ca nt read a lot of information about classical message ( this is guaranteed by physical laws as holevo - nayak s theorem states ) .",
    "but images of different messages should be as far apart as possible , so recipient can check that hash differ or not with high probability .",
    "we measure this distance using an absolute value of scalar product of hashes of different messages .    informally speaking , to define a quantum hash function we need some random data .",
    "then our input is mixed with this random data .",
    "quantum parallelism allows us to do it in different subspaces simultaneously , so resulting hash is small .",
    "for example , random subsets suffice ( for @xmath2 ) @xcite , random codes suffice ( for @xmath3 ) @xcite , random automorphisms suffice ( for any finite group ) @xcite .",
    "@xcite used some heuristics to find best subsets of @xmath2 .",
    "however , typically the amount of randomness that is needed to construct such quantum hash functions is large ( about @xmath4 ) .",
    "we reduce amount of randomness needed to define quantum hash function to @xmath5 in expander - based quantum hash function .",
    "extractor - based quantum hash function allows us to introduce a notion of keyed quantum hash function .",
    "it can be used , for example , in quantum message authentication codes . unlike @xcite and @xcite we use classical keys and authenticate classical messages . unlike @xcite we authenticate whole messages , not single bits . however , our security analysis has only limited attacker .",
    "it is known that walk on expander graph gives results very similar to random sampling .",
    "we show that walks on expander graphs give a quantum hash functions in section [ sec : expander - qhf ] .",
    "structure of these quantum hash functions is somewhat different from previous versions .",
    "extractor is a generalization of expander graph . in the section [ sec : keyed - qhf ]",
    "we propose a keyed quantum hash function based on extractors and assess its security against limited attacker .",
    "[ [ acknowledgements . ] ] acknowledgements .",
    "+ + + + + + + + + + + + + + + + +    i thank farid ablayev , alexander vasiliev and marco carmosino for helpful discussions . a part of this research",
    "was done while attending a special semester program on computational and proof complexity ( april - june 2016 ) organized by chebyshev laboratory of st.petersburg state university in cooperation with skolkovo institute of science and technology and steklov institute of mathematics at st.petersburg . partially supported by russian foundation for basic research , grants 14 - 07 - 00557 , 15 - 37 - 21160 .",
    "the work is performed according to the russian government program of competitive growth of kazan federal university .",
    "let us recall some basic definitions .",
    "we use a standard definition of the statistical distance .",
    "we say that two distributions @xmath6 and @xmath7 are @xmath1-close , if for every event @xmath8 , @xmath9 - \\pr[g \\in a]| \\le \\epsilon$ ] .",
    "the support of a distribution @xmath10 is @xmath11 > 0 \\}$ ] .    the uniform distribution over @xmath12 is denoted by @xmath13 and we say that @xmath10 is @xmath1-close to uniform if it is @xmath1-close to @xmath13 .    we denote that distribution @xmath6 is @xmath1-close to distribution @xmath7 by @xmath14 .    we also use a standard definition of the min - entropy .",
    "let @xmath10 be a distribution .",
    "the min - entropy of @xmath10 is @xmath15}$ ] .",
    "we use the following model of computation .",
    "recall that a qubit @xmath16 is a superposition of basis states @xmath17 and @xmath18 , i.e. @xmath19 , where @xmath20 and @xmath21 .",
    "so , qubit @xmath22 , where @xmath23 is a two - dimensional hilbert complex space .",
    "let @xmath24 .",
    "we denote @xmath25-dimensional hilbert complex space by @xmath26 : @xmath27    we denote a state @xmath28 , each @xmath29 , by @xmath30 , where @xmath31 is @xmath32 in binary . for example , we denote @xmath33 by @xmath34 .",
    "usually it is clear , which space this state belongs to .",
    "computation is done by multiplying a state by a unitary matrix : @xmath35 , where @xmath36 is a unitary matrix : @xmath37 , @xmath38 is the conjugate matrix and @xmath39 is the identity matrix .",
    "the density matrix of a mixed state @xmath40 is a matrix @xmath41 .",
    "a density matrix belongs to @xmath42 , the set of linear transformations from @xmath26 to @xmath26 .    at the end of computation state",
    "is measured by povm ( positive operator valued measure ) .",
    "a povm on a @xmath26 is a collection @xmath43 of positive semi - definite operators @xmath44 that sums up to the identity transformation , i.e. @xmath45 and @xmath46 . applying a povm @xmath43 on a density matrix @xmath47 results in answer @xmath31 with probability @xmath48 .",
    "let @xmath7 be a group with unity @xmath49 and operation @xmath50 .",
    "the character @xmath51 of the group @xmath7 is a homomorphism of @xmath7 to @xmath52 : for any @xmath53 it holds that @xmath54 .",
    "let the graph @xmath55 with set of vertices @xmath56 and set of edges @xmath57 be fixed .",
    "self - loops and multiple edges are allowed .",
    "graph @xmath58 is the @xmath59-regular graph if all vertices have the same degree @xmath59 ; i.e. each vertex is incident to exactly @xmath59 edges .",
    "adjacency matrix of the graph @xmath60 is an @xmath61 matrix whose @xmath62 entry is the number of edges between vertex @xmath63 and vertex @xmath64 .",
    "let @xmath65 be eigenvalues of matrix @xmath60 , i.e. for some @xmath66 it holds that @xmath67 .",
    "we refer to the eigenvalues of @xmath68 as the spectrum of the graph @xmath58 .    given a @xmath59-regular graph @xmath58 with @xmath69 vertices and spectrum @xmath65 we denote @xmath70 .",
    "we call the graph @xmath58 a @xmath71-expander graph if @xmath58 is @xmath59-regular and has @xmath72",
    ".    every expander graph can be converted to a bipartite expander graph .",
    "one can just take two copies of vertex sets and change original edges to go from one copy to another .",
    "generalization of these bipartite expander graphs is extractor graphs .",
    "the extractor graph is a bipartite graph where size of components can be different .",
    "an extractor can also be defined in terms of function that maps pair of first component vertex and edge to second component vertex .",
    "a function @xmath73 is a @xmath74-extractor if for every distribution @xmath10 over @xmath75 with @xmath76 , @xmath77 is @xmath1-close to uniform ( where @xmath78 is distributed like @xmath79 and is independent of @xmath10 ) .",
    "sometimes we use extractor functions that map one ( arbitrary ) set to other : @xmath80 .",
    "these functions can be thought of as bipartite graphs with vertices @xmath81 . in this case",
    "we denote uniform distribution on @xmath82 by @xmath83 .",
    "we also use extractors against quantum storage .",
    "informally , their output is @xmath1-close to uniform and no quantum circuit operating on @xmath84 qubits can distinguish output from uniform .",
    "an @xmath85 quantum encoding is a collection @xmath86 of density matrices @xmath87 .",
    "a boolean test @xmath88 @xmath1-distinguishes a distribution @xmath89 from a distribution @xmath90 if @xmath91 - \\pr_{x_2 \\in d_2}[t(x_2 ) = 1]| \\ge \\epsilon$ ] .",
    "we say @xmath89 is @xmath1-indistinguishable from @xmath90 if no boolean povm can @xmath1-distinguish @xmath89 from @xmath90 .",
    "a function @xmath92 is a @xmath93 strong extractor against quantum storage , if for any distribution @xmath94 with @xmath76 and every @xmath85 quantum encoding @xmath95 , @xmath96 is @xmath1-indistinguishable from @xmath97 .",
    "informally , quantum hash function is a function that maps _ large _ classical input to a _ small _ quantum ( hash ) state such that two requirements are satisfied : ( 1 ) it is hard to restore input given the hash state and ( 2 ) it is easy to check with high probability that inputs for two quantum hash states are equal or different .",
    "it is easy to meet the first requirement for a constant hash size .",
    "one can simply take a qubit @xmath98 and encode the input in a fractional part of @xmath99 .",
    "but then the second requirement is not satisfied .",
    "it is easy to meet the second requirement for a hash size that is logarithmic in input size .",
    "one can simply map the input to the corresponding base state : @xmath100 .",
    "however , then the first requirement is not satisfied .",
    "let us give the formal definition .    for @xmath101",
    "we call a function @xmath102 a @xmath103-resistant function if for any pair @xmath104 of different elements of @xmath10 their images are almost orthogonal : @xmath105    we call a map @xmath106 an @xmath103-resistant @xmath107 quantum hash function if @xmath108 is a @xmath103-resistant function , and @xmath109 .",
    "quantum hash function maps inputs of length @xmath110 to ( quantum ) outputs of length @xmath111 .",
    "if @xmath112 any attacker ca nt get a lot of information by holevo - nayak theorem @xcite .",
    "the equality of two hashes can be checked using , for example , well - known swap - test @xcite .",
    "all our hash functions have the following form : @xmath113 where @xmath114 is an element of some group @xmath7 , @xmath115 , @xmath116 is a set of mappings from group @xmath7 with operation @xmath50 to group @xmath82 with operation @xmath117 and @xmath118 is a character of the group @xmath82 .    for example , the group @xmath7 can be thought of as @xmath119 with group operation @xmath120 , then elements of @xmath7 can be encoded as binary strings @xmath75 of length @xmath69      we use groups in quantum hash functions of form ( [ eq : qhf - structure ] ) , not just arbitrary sets , because groups have nice structure .",
    "we can combine elements of group and we can inverse them .",
    "several classical cryptoprimitives were proposed that use groups , e.g. by @xcite and by @xcite .",
    "as noted in section [ sec : introduction ] , randomly chosen parameters with high probability lead to a quantum hash function .",
    "we replace this process with random walk on expander graph that is known to be close to uniform sampling .    in this section",
    "we fix a group @xmath7 with group operation @xmath121 and unity @xmath49 .",
    "let @xmath55 be an extractor - i.e. @xmath59-regular graph with spectral gap @xmath122 .",
    "we label vertices @xmath56 of graph @xmath58 with messages ( i.e. elements of group @xmath7 ) .",
    "let us randomly choose one vertex and perform a random walk of length @xmath123 starting from it .",
    "denote vertices that occured in this walk by @xmath124 .",
    "parameter @xmath123 depend on security parameter @xmath1 of quantum hash function and we derive its value in theorem [ thm : t - expander ] .    it is easy to note that such construction requires only @xmath125 bits of randomness .",
    "let us define the expander quantum hash function .",
    "the expander quantum hash function @xmath126 maps elements of @xmath7 to unitary transformations in @xmath127-dimensional hilbert space @xmath128 : @xmath129    if we choose @xmath58 and @xmath123 appropriately , @xmath130 is a quantum hash function .",
    "[ thm : t - expander ] for any @xmath131 the function @xmath130 is a @xmath103-resistant @xmath132 quantum hash function if @xmath133 .",
    "let us fix some @xmath123 .",
    "@xmath134    denoting @xmath135 , we get @xmath136 and @xmath137 is also some random walk on graph @xmath58 .",
    "let @xmath7 be a weighted graph with eigenvalue gap @xmath138 and non - uniformity @xmath139 .",
    "let random walk on @xmath7 starts in distribution @xmath140 and has stationary distribution @xmath141",
    ". then chernoff bound for expander graphs @xcite states that for any positive integer @xmath69 and for any @xmath142 : @xmath143 \\le 4 n_q \\exp\\left[-\\bigg(\\frac{\\gamma}{||f||_\\infty}\\bigg)^2 \\frac{\\epsilon}{20n } \\right].\\ ] ] here we have graph weights @xmath144 for all @xmath145 and @xmath146 , thus @xmath147 and @xmath148 .",
    "initial distribution @xmath140 is uniform distribution over @xmath7 , therefore @xmath149 .",
    "function @xmath150 obviously has @xmath151",
    ". we also bound ( [ eq : gillman - chernoff ] ) with some small probability , e.g. @xmath152 .",
    "then ( [ eq : gillman - chernoff ] ) becomes @xmath153 \\le 4\\exp \\bigg [ - \\frac { \\gamma^2 \\epsilon } { 20 t } \\bigg ] \\le \\frac 1 { |g|}.\\ ] ]    solving with respect to @xmath123 gives us : @xmath154    if we make a random walk of length @xmath155 , we will get a quantum hash function with high probability .",
    "so , construction of this quantum hash function requires only @xmath156 bits of randomness if underlying expander graph is chosen carefully",
    ".    for all @xmath69 and @xmath157 there exist a @xmath103-resistant @xmath158 quantum hash function with @xmath159 .",
    "we use margulis construction @xcite of @xmath160 expander graph with @xmath161 vertices and character of group @xmath162 .",
    "let @xmath163 be a @xmath164 extractor function .",
    "let @xmath123 and @xmath165 be parameters .",
    "we choose them in theorem [ thm : extractor - qhf ] .",
    "denote @xmath166 .",
    "we define a quantum hash function @xmath167 based on extractor @xmath168 as follows .",
    "@xmath169    intuitively , we start from several vertices and move along all incident edges simultaneously .    parameters @xmath123 , @xmath170 depend on security parameter @xmath1 .",
    "let us choose it .",
    "[ thm : extractor - qhf ] if @xmath168 is a @xmath74 extractor , parameter @xmath171 and @xmath170 are chosen according to distribution @xmath10 with @xmath76 , then @xmath172 is an @xmath1-resistant @xmath173 quantum hash function .",
    "it is sufficient to prove that for any @xmath174 @xmath175    define @xmath176 to be a distribution of ( random variable ) @xmath170 .",
    "let @xmath177 be a random variable @xmath178 $ ] .",
    "it is easy to see that @xmath179 .",
    "then by hoeffding s inequality : @xmath180 \\bigg| \\ge \\epsilon \\bigg ] \\le 2 \\exp \\bigg ( - 2t\\epsilon^2 \\bigg).\\ ] ]    bounding this probability by @xmath181 and solving with respect to @xmath123 gives @xmath182    note that selecting parameters @xmath183 requires @xmath184 random bits .",
    "for every @xmath185 , @xmath186 and all positive integers @xmath187 there exist an @xmath1-resistant @xmath188 quantum hash function , where @xmath189 , @xmath190 and @xmath191 .",
    "@xcite proved that for every @xmath186 and all positive integers @xmath192 and all @xmath185 there is an explicit construction of a @xmath164 extractor @xmath73 with @xmath193 and @xmath191 .",
    "quantum hash function @xmath194 is the required function .",
    "classical message authentication codes ( mac ) have wide range of applications .",
    "they are defined as a triple of algorithms : @xmath7 that generates a key , @xmath183 that uses the key and the message to generate a tag of the message , and @xmath56 that uses the key , the message and the tag to verify message integrity .",
    "formally , @xmath195 , where @xmath69 is a a security parameter and @xmath110 is a set of all possible keys , @xmath196 , where @xmath10 is a set of messages and @xmath88 is a set of tags and @xmath197 .",
    "we require the following property for mac to be a sound system : @xmath198 i.e. that verifier always accepts a generated tag .",
    "we also require that mac is a secure system and for any adversary @xmath8 that can query mac : @xmath199 \\le \\mathrm{negl}(n),\\ ] ] i.e. any adversary that can query mac outputs correct tag for some key that was not queried and some message with negligible probability .",
    "one classical construction of mac is hash - based mac ( also known as keyed hash functions )",
    ". basically , keyed hash function is a function @xmath200 , such that @xmath201 is a cryptographic hash function for every @xmath202 .",
    "it is easy to see that such function can be used as mac .    with the same considerations as in section [ sec : qhf ] , we define these algorithms to be the following .    an @xmath203 keyed quantum hash function is a quantum function @xmath183 , such that    a function @xmath183 accepts a key @xmath204 and a message @xmath205 and outputs a quantum tag for @xmath206 : @xmath207 .",
    "we require soundness , i.e. tags should be different for different messages under the same key .",
    "@xmath208 for @xmath209 we get @xmath210 .",
    "we also require unforgeability : @xmath211 \\le \\delta,\\ ] ] where @xmath8 is arbitrary attacker that can query @xmath183 and @xmath212 is a set of queries made .",
    "informally , keyed quantum hash function outputs a tag for a message .",
    "if someone changes a message , then the verification step fails with high probability .",
    "if an attacker eve can query a keyed quantum hash function , access to a function does nt help her to forge a tag for some message with some ( unqueried ) key .",
    "[ thm : extractor - keyed - qhf ] let us define an extractor - based keyed quantum hash function as follows .",
    "let @xmath213 be a @xmath93 extractor against @xmath84 quantum storage and @xmath214 .",
    "then a function @xmath215 is a @xmath216 keyed quantum hash function secure against an attacker @xmath8 with access to @xmath217 queries to @xmath172 .",
    "we have to prove two claims .",
    "first , for any @xmath218 and @xmath219 , it holds that @xmath220 .",
    "second , for any attacker @xmath8 and any @xmath221 attacker output @xmath222 such that @xmath223 with negligible probability .",
    "the first claim is implied by theorem [ thm : extractor - qhf ] .    to prove the second claim we note that access to hash function does nt help attacker to output correct tag .",
    "proof by contradiction .",
    "suppose @xmath8 to be such attacker",
    ". then we can distinguish between @xmath224 and @xmath13 using a @xmath225 qubits .",
    "but @xmath226 that contradicts the fact that @xmath168 is an extractor against @xmath84 quantum storage .",
    "then attacker should output the tag without access to hash function .",
    "this is equal to outputting a state that is close to correct tag",
    ". then the probability of correct guessing @xmath227 is a ratio of the volume of sphere with radius @xmath1 to the volume of the whole space : @xmath228    for all positive integers @xmath229 and all @xmath230 there exist a @xmath231 keyed quantum hash function .",
    "@xcite proved that for every @xmath232 there exist an explicit @xmath233 extractor @xmath234 against @xmath84 quantum storage with @xmath235 and @xmath236 .",
    "groups that we considered here and all constructions known to us use finite groups or sets and hash input strings of finite lengths ."
  ],
  "abstract_text": [
    "<S> we present two new constructions of quantum hash functions : the first based on expander graphs and the second based on extractor functions and estimate the amount of randomness that is needed to construct them . </S>",
    "<S> we also propose a keyed quantum hash function based on extractor function that can be used in quantum message authentication codes and assess its security in a limited attacker model . </S>"
  ]
}