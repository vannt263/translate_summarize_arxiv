{
  "article_text": [
    "real root isolation of univariate polynomials with integer coefficients is one of the fundamental tasks in computer algebra as well as in many applications ranging from computational geometry to quantifier elimination .",
    "the problem can be stated as : given a polynomial @xmath3 $ ] , compute for each of its real roots an interval with rational endpoints containing it and being disjoint from the intervals computed for the other roots .",
    "the methods of isolating real root can be divided into three kinds .",
    "the first kind consists of the subdivision algorithms using counting techniques based on , _",
    "e.g. _ , the strum theorem or descartes rule of signs .",
    "this kind of methods count the sign changes ( of sturm sequence or coefficients of some polynomials ) in the considered interval and if the sign changes reach @xmath4 or @xmath5 , the procedure returns from this interval .",
    "otherwise it subdivides the interval and compute recursively .",
    "the symbolic implementations of these methods can be found in @xcite and the symbolic - numberic algorithms implementations can be found in @xcite .",
    "the second kind takes use of the continued fraction ( cf ) algorithms @xcite .",
    "these methods are highly efficient and competitive @xcite . especially , @xcite provides a test datasets consisting of 5000 polynomials from many different settings , with results indicating that there is no best method overall .",
    "however one can say that for most instances the solvers based on cf are among the best methods . in this paper",
    "we modify a real root isolation algorithm based on cf method to obtain a more efficient tool .",
    "the third kind is based on newton - raphson method and interval arithmetic .",
    "the search space is subdivided until it contains only a single real root and newton s method converges .",
    "when the polynomial is sparse and has very high degree , this method will be much faster than other methods .",
    "the symbolic implementations of this kind of methods can be found in @xcite and the numeric implementations can be found in @xcite .",
    "those methods based on cf compute the continued fraction expansion of the real roots of a polynomial in order to compute isolating intervals for real roots .",
    "one important step is the computation of upper bounds of the positive real roots of some polynomials .",
    "there are several classic methods to compute such upper bounds , such as cauchy bounds , lagrange - maclaurin bounds and kioustelidis bounds .",
    "there are many recent works about the upper bound of the positive roots of univariate polynomials @xcite . some methods for computing such bounds are of @xmath6 complexity but the results are very coarse like cauchy bounds .",
    "some methods are of @xmath7 complexity but their bounds are sharper such as the method presented in @xcite .",
    "the balance between precision and effect for computing such upper bounds has to be taken into account .",
    "we provide a new method for computing such bounds with time complexity @xmath0 , where @xmath1 is the optimal upper bound satisfying theorem [ thm : log ] . besides , compared with @xcite , when algorithm [ alg : less ] return true ( the upper bound is less than @xmath4 ) , our upper bound is at most two times that in @xcite . in this way",
    ", the algorithm of isolating real roots is improved .",
    "our method has been implemented as a software package  using ` c++ ` language . for many benchmarks",
    "is two or three times faster than the function rootintervals of . and it is much faster than another continued fractions based software , which seems to be one of the fastest available open software for exact real root isolation . for those benchmarks which have only real roots ,  is much faster than  and  which are based on numerical computation .",
    "the rest of this paper is organized as follows .",
    "section 2 reviews the main algorithm for real root isolation based on cf .",
    "section 3 presents a new algorithm for computing an upper bound of positive roots .",
    "section 4 lists some tricks used in .",
    "section 5 lists the comparative experimental results of our algorithm and other software .",
    "in this section , we first recall descartes rule of signs , which gives a bound on the number of positive real roots . then the vincent theorem , which can ensure the termination of algorithms based on cf , is presented .",
    "finally , we review an algorithm of real root isolation based on cf . as usual",
    ", @xmath8 denotes the degree of univariate polynomial @xmath9 .",
    "the derivative of polynomial @xmath9 with respect to the only variable is denoted by @xmath10 and @xmath11 means the greatest common divisor of polynomials @xmath12 and @xmath13 .",
    "let @xmath14 be a finite sequence of non - zero real numbers .",
    "define @xmath15 , the _ sign variation _ of @xmath16 , as follows .",
    "@xmath17 @xmath18 if some elements of @xmath16 are zero , remove those zero - elements to get a new sequence and define @xmath15 to be the sign variation of this new sequence .",
    "[ thm : des ] suppose @xmath19 $ ] has @xmath20 positive real roots , counted with multiplicity . set @xmath21",
    ". then @xmath22 , and @xmath23 is even .",
    "[ thm : vin ] let @xmath24 be a real polynomial of degree @xmath2 which has only simple roots .",
    "it is possible to determine a positive quantity @xmath25 so that for every pair of positive real numbers @xmath26 and @xmath27 with @xmath28 , the coefficients sequence of every transformed polynomial of the form @xmath29 has exactly 0 or 1 sign variation .",
    "the second case is possible if and only if @xmath24 has a single root within @xmath30 .",
    "[ alg : main ]    @xmath31 ; @xmath32 ; @xmath33.addall((@xmath34 ) ) ; @xmath35 ; @xmath33.addall((@xmath34 ) ) ;    cf based procedures will continue subdividing the considered interval into two subintervals and make a one to one map from @xmath30 to @xmath36 by @xmath37 until @xmath38 equals @xmath4 or @xmath5 .",
    "therefore , theorem [ thm : vin ] guarantees the termination of these procedures .    as in @xcite",
    ", we define the following transformations for a univariate polynomial @xmath24 . @xmath39    @xmath40 is also called taylor shift one @xcite . in our experiments",
    "when algorithm [ alg : up ] is used for computing upper bounds , @xmath40 takes more than ninety percent of running time .",
    "we have considered methods in @xcite for computing @xmath40 , but finally we chose the classical method ( horner s method ) for its simplicity . in future work",
    "we will use divide & conquer method which is the fastest in @xcite .",
    "we think this substituting will still improve the performance of our method .",
    "[ alg : dec ]    [ alg : lb ]    @xmath41 ; @xmath42(@xmath34 ) ;    @xmath43    using the above notations and definitions , an algorithm for isolating all the real roots of a nonzero univariate polynomial is described as algorithm [ alg : main ] .",
    "algorithm [ alg : cf ] , which has only a little modification of the algorithm in @xcite , is presented here to make our subsequent description clearer .",
    "one key ingredient of cf based methods is the computation of upper bounds of the positive real roots of some polynomials .",
    "we give in theorem [ thm : log ] a new characteristic of such upper bounds of univariate polynomials . a new algorithm based on this theorem , algorithm [ alg : up ] ,",
    "is proposed for computing upper bounds of positive real roots .",
    "[ alg : cf ]    @xmath44 ; @xmath45 ; @xmath46 ; @xmath47.add(@xmath48 ) ;    [ thm : log ] suppose @xmath49 is a univariate polynomial in @xmath50 with real coefficients .",
    "then a nonnegative number @xmath1 is an upper bound of positive roots of @xmath34 if @xmath1 satisfies @xmath51 .",
    "if @xmath52 , then @xmath34 is a nonzero constant and any positive number is its upper bound of positive roots .    otherwise , if @xmath53 , we claim that @xmath54 for any @xmath55 .    when @xmath56 , @xmath57 the claim holds .",
    "assume the claim holds when @xmath58 .",
    "when @xmath59 , @xmath60 . by assumption @xmath61 .",
    "since @xmath62 , @xmath63 and @xmath64 .",
    "so @xmath54 for any @xmath55 .    by the above claim ,",
    "@xmath65 when @xmath53 .",
    "because @xmath27 is arbitrarily chosen , @xmath1 is an upper bound of the positive roots of @xmath34 .",
    "the following theorem was given by akritas et al .",
    "in @xcite , which computes positive root upper bounds of univariate polynomials .",
    "[ thm : qup ]    let @xmath66 be a polynomial with real coefficients and let @xmath67 and @xmath68 denote the degree and the number of its terms , respectively",
    ".    moreover , assume that @xmath24 can be written as@xmath69 where all the coefficients of polynomials @xmath70 @xmath71 and @xmath72 are positive . in addition , assume that for @xmath73 we have @xmath74 and @xmath75 where @xmath76 , @xmath77 , @xmath78 and @xmath79 and the exponent of each term in @xmath80 is greater than the exponent of each term in @xmath81 .",
    "if for all indices @xmath73 , we have @xmath82 then an upper bound of the values of the positive roots of @xmath83 is given by    @xmath84    for any permutation of the positive coefficients @xmath85 @xmath86 . otherwise , for each of the indices @xmath87 for which we have @xmath88 we * break up * one of the coefficients of @xmath80 into @xmath89 parts , so that now @xmath90 and apply the same formula ( [ eq:2 ] ) given above",
    ".    we shall show in theorem [ thm : com1 ] that the bound given by theorem [ thm : log ] is better than that given by theorem [ thm : qup ] .",
    "[ thm : com ] let @xmath66 be a polynomial with real coefficients and @xmath1 denote an upper bound of positive roots of @xmath9 obtained by theorem [ thm : qup ] , then @xmath91 .    for every @xmath92 , by theorem [ thm : qup ] , there exist @xmath93 and @xmath94 respectively , such that @xmath95 and @xmath96 . by theorem [ thm : qup ]",
    "@xmath97 is the term @xmath98 and @xmath99 is either a whole or a part ( broken up by theorem [ thm : qup ] ) of a positive term of @xmath9 .    for every @xmath100 , by theorem [ thm : qup ] , @xmath101 .",
    "so @xmath102 for any @xmath103 .",
    "then @xmath104 for any @xmath103 and @xmath91 .",
    "[ thm : com1 ]    let @xmath66 be a polynomial with real coefficients .",
    "let @xmath105 denote the optimal upper bound of positive real roots satisfying theorem [ thm : log ] and @xmath106 denote the optimal upper bound of positive real roots satisfying theorem [ thm : qup ] , then @xmath107 and the strict inequality can hold .    by theorem [ thm : com ] , @xmath107 .",
    ". then @xmath109 and @xmath110 .",
    "so @xmath111 for this @xmath34 .",
    "let @xmath112 be a polynomial with real coefficients .",
    "let @xmath1 denote the output of algorithm [ alg : up ] and @xmath105 denote the optimal upper bound of @xmath34 satisfying theorem [ thm : log ] .",
    "when @xmath1 is less than or equal to @xmath4 , @xmath113 .",
    "[ alg : less ]    @xmath114 ; @xmath115 ; @xmath116 ;    @xmath117 ; @xmath118 ; @xmath119 ; @xmath120 ;    [ alg : up ]    @xmath114 ; @xmath115 ; @xmath116 ; @xmath121 ;    @xmath122 ;    in algorithm [ alg : up ] , if @xmath123 then @xmath124 by the proof of theorem [ thm : log ] and thus the loop does not terminate at this step .",
    "so when algorithm [ alg : up ] returns , @xmath125 must satisfy @xmath126 .",
    "therefore , the output @xmath127 and @xmath113 .",
    "obviously , this algorithm will terminate .",
    "furthermore , @xmath128 by theorem [ thm : log ] .",
    "so , @xmath127 is an upper bound of @xmath9 .",
    "let @xmath129 @xmath130 be a polynomial with real coefficients .",
    "set @xmath1 to be the optimal upper bound of positive roots of @xmath34 satisfying theorem [ thm : log ] .",
    "then algorithm [ alg : up ] costs at most @xmath0 additions and multiplications .",
    "* variable substitution * if @xmath131 $ ] and @xmath132 then substitute @xmath133 in @xmath34 .",
    "obviously , @xmath134 .",
    "we first isolate the real roots of @xmath135 then obtain the real roots of @xmath34 .",
    "we can see in figure [ fig:2 ] that degree is a key fact affecting the running time . using this trick , we can greatly reduce the running time of @xmath136 and _ chebyshevu _ when each term of the polynomials is of even degree .",
    "the running time on such polynomials can be found in table [ tab : mm2 ] . the same trick was also taken into account in @xcite .",
    "* incomplete termination check * if @xmath131 $ ] and @xmath137 , we may try to check whether the sign of @xmath138 is the same as the sign of the leading coefficient of @xmath34 . if they are not the same , then @xmath34 has one positive root in @xmath139 and the other one in @xmath140 .",
    "so , we can terminate this subtree .",
    "since the whole  procedure is a tree and  spends more than 90 percent of the total time on computing @xmath40 , this trick may improve the efficiency of the algorithm greatly .",
    "the main algorithm for isolating real roots based on our improvements has been implemented as a ` c++ ` program , .",
    "compilation was done using g++ version 4.6.3 with optimization flags -o2 .",
    "we use singular @xcite to read polynomials from files or standard input and to eliminate multi - factors of polynomials .",
    "we use the gmp ( version 5.05 ) , arbitrary - length integers libraries , to deal with big integer computation .",
    "all the benchmarks listed were computed on a 64-bit intel(r ) core(tm ) i5 cpu 650 @ 3.20ghz with 4 gb ram memory and ubuntu 12.04 gnu / linux .        _",
    "wilkinson _ polynomials : @xmath142 .",
    "the integers @xmath143 are all the real roots of @xmath141 .      modified _",
    "wilkinson _ polynomials : @xmath145 .",
    "if @xmath146 , @xmath144 has @xmath2 simple real roots but most of them are irrational .",
    "the distance between @xmath141 s two nearest real roots is @xmath4 and the distance between @xmath144 s two nearest real roots is nearly @xmath4 .",
    "we construct new polynomials @xmath148 , which have a completely different distance between any two nearest real roots .",
    "we modify @xmath147 into @xmath150 for the same purpose as we construct @xmath144 .",
    "most real roots of @xmath151 become irrational .",
    "_ chebyshevt _ polynomials : @xmath153 .",
    "@xmath152 has @xmath2 simple real roots .",
    "_ chebyshevu _ polynomials : @xmath155 .",
    "@xmath154 has @xmath2 simple real roots .      _",
    "laguerre _ polynomials : @xmath157,@xmath158,@xmath159 .",
    "obviously , @xmath160 is a polynomial with integer coefficients .",
    "_ mignotte _ polynomials : @xmath162 . if @xmath2 is odd , @xmath161 has three simple real roots . if @xmath2 is even , it has four simple real roots .",
    "randomly generated polynomials : @xmath164=@xmath165 with @xmath166=\\frac{1}{2}$ ] and @xmath167 = 1-r,$ ] where @xmath168 means probability .",
    "the root isolation timings in tables [ tab : mm1 ] , [ tab : mm2 ] and [ tab : open ] are in seconds .",
    "most of the benchmarks we chose have large degrees and the timings show that our tool is very efficient . as a built - in  symbol ,",
    "is compared with our tool .",
    "the   we use has a version number 8.0.4.0 . for almost all benchmarks ,",
    "our software   can be two or three times faster than .",
    "the comparative data can be found in table [ tab : mm1 ] , table [ tab : mm2 ] and figure [ fig:2 ]",
    ". we also consider open software , such as   @xcite , which seems to be one of the fastest open software available for exact real root isolation .",
    "many experiments about state of the art open software for isolating real roots have been done in @xcite , which indicate that   is the fastest in many cases . in our experiments ,",
    "is much faster than .",
    "the comparative result can be found in table [ tab : open ] .",
    "we also compare   with numerical methods  @xcite and  @xcite . as  computes all the complex roots , we choose @xmath141 , @xmath144 and @xmath147 as benchmarks with degrees ranging from 10 to 90 , which have only real roots .",
    "computes only real roots but it has weak stability .",
    "its output on @xmath169 only has eight real roots , which is obviously wrong .",
    "s running time on @xmath170 is @xmath171 seconds and @xmath172 seconds on @xmath173 . in these two cases",
    "our software is about @xmath174 times faster than .",
    "we compare  with  and the results are shown in figure [ fig:1 ] . at the beginning when degree is @xmath175 , the time costs of  and  are almost equal . as degree becoming larger , the growth rate of our tool s consuming - time is much less than that of . when degree reaches @xmath176 ,  is about @xmath177 times faster than .",
    ".compare with ( 1 ) [ cols=\"^,^,^,^,^,^ \" , ]     , width=518 ]     benchmarks with differ setting [ fig:2],width=518 ]",
    "the work is partly supported by nsfc-11271034 , the anr - nsfc project exacta ( anr-09-blan-0371 - 01/60911130369 ) and the project syskf1207 from iscas . the authors would like to thank steven fortune who sent us the source code of  and elias p. tsigaridas who helped us compile .",
    "a. eigenwillig .",
    "real root isolation for exact and approximate polynomials using descartes rule of signs .",
    "thesis , saarland university , 2008 .",
    "a. eigenwillig , l. kettner , w. krandick , k. mehlhorn , s. schmitt , n. wolpert . a descartes algorithm for polynomials with bit - stream coefficients . in : casc 2005 ,",
    "lncs , 3718 , 138149 , 2005 ."
  ],
  "abstract_text": [
    "<S> this paper revisits an algorithm for isolating real roots of univariate polynomials based on continued fractions . </S>",
    "<S> it follows the work of vincent , uspensky , collins and akritas , johnson and krandick . </S>",
    "<S> we use some tricks , especially a new algorithm for computing an upper bound of positive roots . in this way </S>",
    "<S> , the algorithm of isolating real roots is improved . </S>",
    "<S> the complexity of our method for computing an upper bound of positive roots is @xmath0 where @xmath1 is the optimal upper bound satisfying theorem [ thm : log ] and @xmath2 is the degree of the polynomial . </S>",
    "<S> our method has been implemented as a software package  using ` c++ ` language . </S>",
    "<S> for many benchmarks   is two or three times faster than the function rootintervals of . and </S>",
    "<S> it is much faster than another continued fractions based software , which seems to be one of the fastest available open software for exact real root isolation . for those benchmarks which have only real roots ,  </S>",
    "<S> is much faster than  and  which are based on numerical computation .    </S>",
    "<S> univariate polynomial , real root isolation , continued fractions , computer algebra </S>"
  ]
}