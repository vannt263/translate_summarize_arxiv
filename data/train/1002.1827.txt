{
  "article_text": [
    "community structure has been recognized in networks that come from a wide range of domains , such as social and biological networks .",
    "while concrete definitions of community vary by domain , a community may generally be described as a set of nodes with dense internal connections , exhibiting comparatively sparse connections to the rest of the network .",
    "knowledge of community structure can reveal functional organization in networks , much as identifying organs in the body can reveal the role of various tissues . in recent years , numerous community assignment algorithms ( caas ) have been suggested , as computer scientists and physicists have taken on the problem of algorithmicly finding communities ( for an excellent recent review of the field , see @xcite ) .    despite their proliferation , it is difficult to determine the performance of caas for two reasons .",
    "on the one hand , there is a lack of large empirical datasets where the _ a priori _ or _ ground truth _ communities are known ; and on the other hand , most synthetic data  especially the most popular , the gn model @xcite  is overly simplistic and unrealistic , lacking key topological features such as a heterogeneous degree distribution , varied community sizes , and triadic closure , while also requiring that every node belong to exactly one community .",
    "the lack of realistic benchmark graphs has led to a situation where researchers know that many algorithms perform well on simple networks , but are unaware how these perform on more complex empirical data .",
    "this problem is so pronounced that in his comprehensive review of the field , @xcite states with regard to benchmarking : `` ... the issue of testing algorithms has received very little attention in the literature on graph clustering .",
    "this is a serious limit of the field .",
    "because of that , it is still impossible to state which method ( or subset of methods ) is the most reliable in applications ... ''    in the last year , @xcite have addressed this uncertainty by specifying a means of creating more realistic synthetic benchmark graphs , which have scale - free degree and community size distributions as well as overlapping communities . using their specification ( called lfr ) , they and others have subsequently discovered  with a level of subtlety previously unattained  under what topological conditions a wide range of caas perform well or poorly @xcite .",
    "one surprising result revealed by this recent benchmarking is the poor performance of many caas when it comes to detecting moderately overlapping community structure .",
    "it is intuitive from our knowledge of real world domains that many complex networks will have communities that overlap , potentially to a high degree .",
    "consider , for example , a social network site like facebook . on average ,",
    "a facebook user has 130 `` friends , '' who typically belong to multiple distinct social groups @xcite .",
    "these groups may correspond to ties formed in high - school , college , professional settings , and family .",
    ", which depicts the ego - centric network of a facebook user , demonstrates this tendency for a user to belong to multiple groups .",
    "the analysis of @xcite suggests that the groups apparent in this user s ego - centric network correspond to acquaintances formed at different stages of life , and that most of these groups are dormant . clearly , if this type of ego - centric network is typical of facebook users , then any caa that partitions nodes into non - overlapping communities ( henceforth , _ non - overlapping caa _",
    ") will perform poorly : such caas can assign each node to only one of its many communities .        similarly , in complex networks of interactions between proteins",
    ", it has been claimed that many proteins belong to multiple communities , each of which in turn corresponds to some biological function @xcite . since 2005 , the year in which @xcite published a groundbreaking caa capable of detecting overlapping communities , a number of algorithms have been developed that are able to assign nodes to more than one community @xcite .",
    "however , using lfr networks @xcite and other synthetic networks @xcite , recent work has indicated that many caas that are supposed to be capable of detecting overlapping community structure perform quite poorly when more than a minority of nodes belong to multiple communities .    the purpose of this paper is two - fold . on the one hand , in [ method , complexity ] we introduce a new algorithm , called greedy clique expansion ( gce),that is designed to perform well in domains with highly overlapping community structure . on the other hand , in [ synthetic - benchmarks ] we thoroughly benchmark this algorithm alongside several other leading caas that are designed to detect overlapping community structure .",
    "we run benchmarks on graphs with high levels of community overlap to clear up uncertainty of the performance of caas designed for this domain . none of these caas have been subjected to such benchmarks .",
    "our results indicate that gce is the only algorithm capable of accurately detecting communities when nodes belong to several communities .",
    "we follow up these synthetic benchmarks with two empirical benchmarks , one based on data from a protein - protein interaction network , and the other on caltech s facebook friendship network .",
    "given a graph g with vertices v and edges e , gce works by first detecting a set of seeds in g , then expanding these seeds in series by greedily maximizing a local community fitness function , and then finally accepting only those communities that are not near - duplicates of communities that have already been accepted .",
    "in this section , we begin by reviewing the core concepts of gce : fitness functions , greedy expansion , seed selection , and community distance measures .",
    "finally , we fully specify gce . throughout",
    ", we note how gce differs from and resembles previous caas , and argue why our modifications lead to better results on graphs that possess highly - overlapping community structure , a claim which we substantiate with benchmarking results in [ synthetic - benchmarks ] .    [ [ community - fitness - functions ] ] * community fitness functions * + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    a community fitness function @xmath0 takes an induced subgraph @xmath1 of @xmath2 and returns a real value that indicates how well @xmath1 corresponds to some notion of community . in our discussion , the higher the value returned by the fitness function , the better community structure .",
    "many similar local fitness functions have been used in the context of local caas @xcite , all of them different ways of formalizing the idea that a community s internal edge density should be high when compared to its external edge density .",
    "the fitness function is of central importance to the gce algorithm ; it can be interpreted as steering the growth of a seed such that it expands into the desired community . just as there is no universally correct concept of community that spans all domains",
    ", one can not argue that any given fitness function will be appropriate for all types of network data .",
    "nevertheless , in our experiments , we found that the fitness function defined by @xcite provided good results on a wide range of synthetic and empirical data .",
    "they define the fitness of a community @xmath1 in terms of @xmath1 s internal degree @xmath3 and external degree @xmath4 .",
    "@xmath3 is equal to twice the number of edges that both start and end in @xmath1 ( i.e. , it is the sum of the internal degrees of the nodes in @xmath1 ) , and @xmath4 is the number of edges that have only one end in @xmath1 . in this notation , they define community fitness as @xmath5 where @xmath6 is a parameter that can be tuned .",
    "lower values of @xmath6 result in larger communities being fitter .",
    "we found that @xmath6 values in the range @xmath7 provided the best results , which is in line with the experience of @xcite we resume discussion of this parameter below .",
    "[ [ expanding - a - single - seed ] ] * expanding a single seed * + + + + + + + + + + + + + + + + + + + + + + + + +    assume , as above , that @xmath1 is an induced subgraph of @xmath2 that can be thought of as the `` seed '' or core of a community @xmath8 .",
    "in other words , @xmath1 is embedded in some larger community @xmath8 , such that all of its nodes are part of @xmath8 , but not all nodes in @xmath8 are included in @xmath1 .",
    "the task at hand is to expand @xmath1 by adding nodes to it until it includes all nodes in @xmath8 .",
    "previous work in community assignment suggests that  by utilizing a community fitness function such as in [ lancichinetti - fitness] @xmath1 can be efficiently expanded into @xmath8 through a technique of greedy local optimization .",
    "@xcite this technique can be varied , but can be generally summarized in the following steps :    1 .   for each node @xmath9 in the _ frontier _ of @xmath1 ( e.g. , the red nodes in [ idealized_community ] ) ,",
    "calculate @xmath9 s node fitness , i.e. , how much the addition of @xmath9 to @xmath1 would raise or lower the community fitness of @xmath1 .",
    "2 .   select the node with the largest fitness , @xmath10 .",
    "if @xmath10 s fitness is positive , then add it to @xmath1 and loop back to step 1 . otherwise , terminate and return @xmath1 .",
    "the works cited above vary this technique by either using different fitness functions or , for example , after each addition , removing any nodes in @xmath1 if their removal would improve f(s ) .",
    "also , they vary in their approach of finding starting seeds . in general , this approach of greedy local optimization scales well with the size and order of the network because it works locally ; we discuss complexity in more detail in [ complexity ] .    while gce shares this general strategy of expanding seeds via greedy local optimization , one key difference from previous algorithms is the choice of starting seed .",
    "[ [ cliques - as - starting - seeds ] ] * cliques as starting seeds * + + + + + + + + + + + + + + + + + + + + + + + + + + +    various approaches have been used to find the seeds of communities in the above - mentioned greedy algorithms .",
    "@xcite s lfm algorithm keeps randomly selecting nodes that have not yet been assigned to any community , until every node belongs to at least one community .",
    "this method assumes that each node belongs to at least one community , and that , as soon as every node has been assigned to at least one community , there are no further communities that should be found .",
    "we take issue with both of these assumptions ; we believe that the latter  by implicitly placing an upper bound on the number of communities that can be found at @xmath11is responsible for the declining performance of lfm as each node tends to belong to more communities in the benchmarks that follow .",
    "@xcite s iterative scan algorithm selects random edges as seeds , and keeps expanding seeds until the new seeds produce communities that are duplicates of previously - found communities .",
    "while this method of seed selection is less arbitrary than @xcite s , it is inefficient because , if one wants to exhaustively search for seeds , the algorithm is unlikely to terminate before it has expanded a vast number of duplicate communities .",
    "we use _ maximal cliques _ ( i.e. , fully - connected sets of nodes that are not completely contained in any larger set of fully - connected nodes ) , as seeds ; we will henceforth refer to maximal cliques simply as cliques .",
    "this choice of seeds is motivated by the observation that , on the one hand , cliques are one of the characteristic structures contained within communities @xcite , while on the other hand ",
    "if one discards smaller cliques that are highly embedded in larger cliques they are rare structures .",
    "we note that other caas exploit these properties of cliques @xcite , but none of them utilize cliques as seeds in the greedy expansion strategy mentioned above .",
    "one of the key parameters of our algorithm , @xmath12 , is the minimum number of nodes that a clique must contain if it is to be accepted as a seed . on the one hand ,",
    "@xmath12 should be sufficiently large such that any clique of size @xmath12 or larger indicates the presence of a community ; otherwise , one risks expanding a seed into a region with no community structure .",
    "for example , if @xmath13 , then triangles can be accepted as seeds . in some networks",
    ", one can not assume that all triangles are embedded in a community .",
    "in such cases , if @xmath13 , then one risks accepting seeds that are not embedded in any community , and these seeds could expand into a region of the graph with no community structure .",
    "such communities can be thought of as false positives . on the other hand , one should choose @xmath12 to be sufficiently small such that all of the communities that one wishes to detect contain at least one clique of size @xmath12 .",
    "if @xmath12 is chosen to be too large , then those communities that ought to be detected , but contain no sufficiently large cliques , will not be detected .",
    "such cases could be considered false negatives .",
    "we find that @xmath12 values of 3 or 4 will generally satisfy these constraints , and that one can decide between these two possibilities by considering whether one s preferred semantic definition of community includes small structures .",
    "this choice of seeds comes with an implicit requirement that any community that can be found by gce must contain a clique with @xmath12 or more nodes .",
    "one might object that this assumption is too strict and will result in many false negatives .",
    "however , our results on the lfr benchmark graphs indicate otherwise .",
    "the lfr benchmarks provide a challenge in this respect because the process which creates communities does not favor the generation of cliques .",
    "in particular , creates edges such that the probability that any pair of nodes in a community is connected by an edge is independent of whether those two nodes share neighbors , much as in a classic erds - rnyi random graph @xcite .",
    "this generation technique does not lead to the high number of triangles and cliques that have been observed in empirical graphs .",
    "empirical networks show a strong tendency for transitivity , i.e. , for two neighbors of a given node to be connected to each other @xcite , a process which leads to higher clustering coefficients and more cliques than one would expect to find in correspondingly sparse erds - rnyi graphs .",
    "thus , the fact that gce performs well on these synthetic graphs  despite the fact that one expects fewer cliques in these than in empirical data  indicates that this minimum clique size requirement does not cripple the sensitivity of gce .",
    "[ [ duplicates - and - community - distance ] ] * duplicates and community distance * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    overlapping caas must include some implicit or explicit strategy for dealing with near - duplicate communities ( in contrast to the more numerous , non - overlapping caas , whose communities can share no nodes ) .",
    "this problem arises from the fact that many seeds can grow into near - duplicate versions of the same community .",
    "this is undesirable from the perspective of the network analyst because results that contain a large number of near - duplicate communities are hard to interpret and report statistics on .    to rid our results of near - duplicate communities",
    ", we must formally define what we mean by near - duplicate communities .",
    "along the lines of @xcite , we begin by defining a community distance measure .",
    "we choose a symmetric measure of community distance that can be thought of as the _ percent non - embedded_. given two communities @xmath1 and @xmath14 , this measure is defined as @xmath15 which can be interpreted as the proportion of the smaller community s nodes that are not embedded in the larger community .",
    "given a set of communities @xmath16 and a community @xmath1 , we can define the near - duplicates of @xmath1 to be all communities in @xmath16 that are within a distance @xmath17 of @xmath1 , where @xmath17 is the minimum community distance parameter .",
    "[ [ overview - of - gce ] ] * overview of gce * + + + + + + + + + + + + + + + + +    now that we have covered the requisite concepts of community fitness , expanding a seed , choosing seeds , and near - duplicate seeds , we can outline the gce algorithm . given a graph @xmath2 , a minimum clique size @xmath12 , a minimum community distance @xmath17 , and a scaling parameter @xmath6 , our algorithm :    1 .   finds seeds by detecting all maximal cliques in @xmath2 with at least @xmath12 nodes .",
    "2 .   creates a candidate community @xmath18 by choosing the largest unexpanded seed and greedily expanding it with a community fitness function @xmath19 until the addition of any node would lower fitness .",
    "if @xmath18 is within @xmath17 of any already accepted community @xmath8 , then @xmath8 and @xmath18 are near - duplicates , so discard @xmath18 .",
    "otherwise , if no near - duplicates are found , accept @xmath18 .",
    "4 .   continues to loop back to step 2 until no seeds remain .",
    "we note that although gce allows the user to specify the values of three parameters , two of these@xmath12 and @xmath17allow for versatile default values .",
    "the value of @xmath12 should usually be @xmath20 ; if one is interested in very small communities ( as in the case of the protein complexes presented in [ empirical - benchmarks ] ) , then @xmath12 should be set to @xmath21 .",
    "we find @xmath22 to be a good default value for @xmath17if one finds too many near - duplicate communities in the output , then @xmath17 should be increased .",
    "the scaling parameter @xmath6 lends itself least to a versatile default value . for best results",
    ", one should first run gce with @xmath6 set to @xmath23 , look at the results , and decide whether the communities found by gce should be larger ( using a lower @xmath6 ) or smaller .",
    "however , in cases where the user knows little about the community structure , such tuning may be difficult .",
    "for this reason , in the synthetic and empirical benchmarks that follow , we report results where @xmath6 is set to @xmath23 , rather than tuning this parameter for best results .",
    "the good benchmarking results indicate that even if one can not tune @xmath6 , gce will often return good results with all parameters set to their default values .",
    "we begin this section by underscoring the point that one can not satisfyingly characterize the average complexity of gce purely in terms of @xmath11 or @xmath24 ; rather , the complexity depends on subtler local characteristics of @xmath2 that are difficult to specify rigorously . despite this",
    ", we can clearly discuss several important parts of the algorithm , and the heuristics and optimizations we have used to improve their performance .",
    "first , we discuss finding the maximal cliques that form seeds , and consider the complexity of greedily expanding each seed .",
    "the remainder of this section is devoted to various problems related to detecting near - duplicate communities : we consider the cost of deciding whether a candidate community is sufficiently distinct to accept , and two heuristics to discard potentially indistinct seeds early . while our solutions to these problems are somewhat trivial , we describe them in detail both for replicability and because the computational savings that they afford are so significant .",
    "we note that gce makes extensive use of set operations , such as set insertion and deletion and testing for set membership . in our implementation",
    ", we use the c++ standard template library to provide these operations .    [ [ finding - maximal - cliques ] ] * finding maximal cliques * + + + + + + + + + + + + + + + + + + + + + + + + +    although finding all of the cliques in a graph is generally computationally expensive , cliques can be found quickly in graphs that are sufficiently sparse . to this end",
    ", our implementation makes use of the bron - kerbosch @xcite clique enumeration algorithm to efficiently find the maximal cliques that form seeds . in the large synthetic and empirical networks that we analyze in [ synthetic - benchmarks ] and [ empirical - benchmarks ] ,",
    "the computation required for finding cliques was a small part of the overall run time , compared to the computation required to expand seeds and check for near duplicates . to futher support the claim that finding cliques in sparse graphs is scalable",
    ", we point out that @xcite have recently introduced a parallel variant of the bron - kerbosch algorithm , which they demonstrate can achieve a linear parallel speed - up even when using 2048 processors .",
    "[ [ greedy - expansion ] ] * greedy expansion * + + + + + + + + + + + + + + + + + +    greedy seed expansion requires that the frontier @xmath25 of each initial seed be identified , and that @xmath25 be updated as @xmath1 is expanded .",
    "the initial frontiers may be identified by calculating , for each edge , the symmetric difference of the sets of seeds for the endpoints of that edge . identifying the initial frontiers",
    "therefore has complexity @xmath26 , where @xmath27 is the number of cliques to be expanded .",
    "as each seed is expanded by adding the fittest node from the frontier @xmath10 , its frontier becomes : @xmath28 where @xmath29 is the set of neighbors of @xmath10 .",
    "this requires at most @xmath30 insertions into @xmath25 , where @xmath30 is the maximum degree in @xmath2 .",
    "we note that the fitness @xmath31 depends only on the internal and external degree of @xmath10 and the total internal and external degrees of the vertices already in s. to facilitate fast identification of @xmath10 , @xmath32 and @xmath33 are stored , along with the internal and external degrees of each @xmath9 in @xmath25 .",
    "these stored values are updated each time @xmath25 is updated , noting that @xmath32 and @xmath33 each change only by the internal and external degree of @xmath10 and that the frontier degrees need only be updated for @xmath34 .",
    "[ [ identifying - near - duplicate - communities ] ] * identifying near - duplicate communities * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to identify if a candidate community , @xmath8 , is a near - duplicate of an accepted community , it is necessary to calculate the overlap between community pairs .",
    "finding the intersection between sets @xmath35 and @xmath36 has complexity @xmath37 , assuming sorted sets . in a naive implementation , after each seed expansion has completed , this must be carried out @xmath38 times , with @xmath39 the number of accepted communities , resulting in at least @xmath40 set intersetions in total .",
    "instead , we maintain , for each node @xmath9 , the set @xmath41 of accepted communities it belongs to . in a first pass ,",
    "we identify those communities that have a non - empty overlap with the candidate community as @xmath42 .",
    "the full intersection is then calculated only on the communities with non - empty overlap . at the cost of extra storage ,",
    "this results in significant time savings as the number of accepted communities grows large .",
    "[ [ clique - coverage - heuristic - cch ] ] * clique coverage heuristic ( cch ) * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    while developing this algorithm , we observed that many empirical datasets exhibited the following phenomenon : given some maximal clique , there exist numerous smaller cliques that are almost , but not fully , subgraphs of it .",
    "@xcite have also observed this property ; in fact , this is the key property exploited by k - clique percolation .",
    "@xcite ( remember , whenever we use the term `` clique '' here and throughout our paper , we mean `` maximal clique . '' ) typically , these cliques are within @xmath17 distance of the larger clique and thus are near - duplicates of it .",
    "we also observed that when expanded , such sets of near - duplicate cliques were likely to grow into the same or very similar regions of the graph , leaving us with many near - duplicate communities that would later need to be removed ( as specified in subsection `` _ _ duplicates and community distance _ _ '' above ) .",
    "we could thus skip the expansion of these near duplicate seeds without significantly affecting our results and enjoy a significant savings in memory and computation time .",
    "we developed a simple heuristic to quickly prune such near - duplicate cliques from the our initial set of seeds .",
    "this method is designed solely as a heuristic computational speedup , and has been found to effectively discard large numbers of near - duplicate cliques while not significantly altering benchmark results .",
    "nodes , gce s performance degrades as degree increases .",
    "the cch optimization increases gce s scalability . ]",
    "the clique coverage heuristic ( cch ) is as follows : we order the maximal cliques , largest first .",
    "each clique is then either accepted or rejected . a clique is accepted if less than a certain proportion @xmath43 of its nodes are contained in at least two of the larger cliques that have already been accepted .",
    "we found that even values of @xmath43 close to 0 resulted in the large numbers of near - duplicate cliques being rejected from consideration .",
    "simultaneously , it appears that in each of the clique - dense areas of the graph that are likely to be embedded in a community , at least some of the original cliques are always preserved .",
    "thus , each of these areas remains `` seeded '' with at least one clique , but most of the smaller , near - duplicate versions of this clique are removed . in our evaluation",
    "we choose a value of .25 for @xmath43  meaning that a clique will only be discarded if at least 75 percent of its nodes have already been covered twice by other , larger , accepted cliques",
    ".    due to the potentially vast number of near - duplicate cliques found in complex networks , the impact of cch can be large .",
    "for example , we ran gce on the oklahoma state facebook subnetwork , which contains 17425 nodes and 829528 edges ( the source of this data set is @xcite , which is described in [ empirical - benchmarks ] ) . on this data , cch reduced the number of cliques from over 46 million to around 5000 . to address concerns that pruning seeds using cch may adversely affect the accuracy of gce , we refer the reader to [ synthetic_overlapping ] , which includes one line displaying the results of gce with the cch , and one line for gce without the cch .",
    "the results are almost identical .",
    "[ [ abandoning - suspiciously - overlapping - seeds ] ] * abandoning suspiciously overlapping seeds * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let us call any seed that is undergoing expansion that is within some distance @xmath44 of an already accepted expanded community ` suspicious ' .",
    "we call it suspicious because for an appropriate value of @xmath44 , such expanding seeds frequently expand to within @xmath17 ( i.e. become near - duplicates ) of an already accepted community . in these cases , the computation required to expand the suspicious seed into a near - duplicate community",
    "is essentially wasted .",
    "one simple optimization , which we employ in all of the evaluations below , is to discard these suspicious seeds . in practice",
    ", we have found that the benchmark results of our implementation are not very sensitive to a range of @xmath44 values , and we use the value of .6 for both @xmath44 and @xmath17 .",
    "[ [ performance - characteristics ] ] * performance characteristics * + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we now briefly describe two experiments to reveal both a strength and a weakness of gce s runtime performance ( we postpone discussion of accuracy , as this is the topic of the next section ) .",
    "these experiemnts are based on the above - mentioned lfr graphs , which are synthetic graphs whose specification will be explained in detail in [ synthetic - benchmarks ] .",
    "the parameters used to constuct the graphs used in these experiments are listed in the first two columns of [ parameters ] .    while the details of these graphs may not be clear for the reader until the next section , the essential point is that in [ increasing_nodes ] , we run gce on a series of graphs that are identical in many ways  sharing the same degree distribution and community size distribution  but which have ever - more nodes and communities . in this figure",
    "we observe that as the size of the graph increases along the x - axis , the runtime of gce scales favorably when compared to the runtime of other overlapping caas ( which are also introduced in the next section ) .    in [ increasing_degree ]",
    "we again observe the runtime of gce on a series of graphs that are nearly identical ; however , in these graphs we do not vary the number of nodes ( keeping it fixed at 5000 ) , but rather we vary the degrees of the nodes . as the average degree increases along the x - axis ,",
    "the runtime of gce increases quite rapidly when compared with the quickest algorithm run on this experiment , copra ( which is also introduced in the next section ) .",
    "we observe that even on these relatively small graphs , the runtime of gce is quite sensitive to the average degree . in this figure",
    ", we also see the effect of the cch optimization .",
    "in the following section , we pursue two objectives .",
    "first , we perform the central experiment of this paper : we benchmark many caas on the synthetic graphs in which nodes belong to to up to five communities .",
    "benchmarks with such a high degree of community overlap are uncharted territory .",
    "the results of the benchmarks are surprising , indicating that many algorithms that are specifically designed for detecting overlapping community structure perform poorly when more than a fraction of nodes belong to more than one community .",
    "while one other algorithm performs well up to the point where nodes belong to an average of @xmath45 communities , gce returns good results even when every node belongs to four communities .",
    "unfortunately , because benchmarks with such high levels of communities have not yet been carried out , we had to choose many of the parameters for creating the benchmark graphs .",
    "the secondary purpose of this section is to show that gce also performs well on benchmarks graphs whose parameters have been defined by other , less interested parties . to this end , we replicate a set of partitioning benchmarks performed by @xcite in a recent review of several caas .",
    "we demonstrate that gce performs competitively against the best known caas .",
    "this is significant , because these other algorithms are specialized for graph partitioning , while gce is designed to handle the more general case of overlapping communities .",
    "[ [ benchmarking - procedure - and - terminology ] ] * benchmarking procedure and terminology * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to benchmark the performance of a caa , we perform the following steps : first , we create a synthetic graph which , by construction , contains communities planted in it",
    ". we will refer to these communities as the _ ground truth _ communities .",
    "next , we run a caa on this graph ; we call the communities returned by the caa the _ found _ communities .",
    "finally , we use some metric to compare the similarity of the ground truth communities to the found communities .    to construct synthetic graphs",
    ", we use the lfr specification , which allows one to create graphs with realistic properties such as scale - free degree and community size distributions .",
    "@xcite . to measure the similarity of ground truth communities and found communities , we use normalized mutual information ( nmi ) , an information - theoretic similarity measure .",
    "this measure is normalized such that the nmi of two sets of communities is 1 if they are identical , and 0 if they are totally independent of each other . @xcite",
    "first applied nmi to the problem of evaluating the similarity of two sets of communities , but defined the measure only for partitions . in our benchmarks , we employ a variant of nmi introduced by @xcite that is defined for covers , in which nodes may belong to multiple communities .",
    "[ [ synthetic - graph - description - parameters ] ] * synthetic graph description & parameters * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to construct a lfr graph , one must specify ten parameters , which are listed in [ parameters ] .",
    "note that the parameter @xmath46 refers to the number of nodes in the graph that are overlapping ( i.e. , belong to more than one community ) , and @xmath47 dictates how many communities each of the overlapping nodes belongs to .",
    ".parameters for lfr synthetic benchmark graphs for various figures . bolded values indicate the the variable on the x - axis of each plot .",
    "[ cols=\"<,<,^,^,^,^\",options=\"header \" , ]",
    "we have introduced an algorithm , greedy clique expansion , which combines the graph structure based approach of clique - finding methods with the greedy expansion strategy found in other algorithms .",
    "we demonstrate that gce can accurately recover communities on synthetic networks in which every node belongs to four communities .",
    "we found that no other algorithm performed nearly as well on synthetic graphs in which every node belong to two or more communities . to determine whether these good results are robust , we performed further comparative benchmarks on a range of lfr graphs with non - overlapping communities , and found that gce performed competitively . to complete our evaluation , we used gce to recover biological ground truth communities from a reference protein - protein interaction network , and to infer non - network attributes from a social graph .",
    "compared to other overlapping caas , gce gave the best results .",
    "[ [ further - work ] ] * further work * + + + + + + + + + + + + + +    the community structure found in some networks may exist at multiple scales due to hierarchical organization of the system represented by the network .",
    "ideally , a caa would detect community structure at all scales .",
    "we are currently working with a modified version of gce that expands all seeds in parallel , merging them as they become near - duplicates . by expanding all seeds to encompass the entire graph , and merging them along the way , the algorithm produces a dendrogram similar in some respects to the dendrograms produced by classic agglomerative algorithms such as that of @xcite , but which allows overlap , and in which leaves represent seeds rather than nodes .",
    "communities could be extracted from this dendrogram by performing an analysis of stability .",
    "this variant of gce might have the advantage of not only detecting hierachy , but also of decreased sensitivity to the @xmath6 parameter , because communities are selected based on stability rather than on the first local maximum of fitness .",
    "we considered only a simple , greedy expansion heuristic .",
    "future work should investigate using more sophisticated local heuristics that cleverly explore the most promising sections of the search space .",
    "furthermore , due to the local nature of gce , a parallel implementation should be straigtforward to implement and would increase its scalability .",
    "finally , we would like better benchmarking abilities . on the one hand , we need a utility that uses synthetic graphs to systematically explore under what topological conditions the performance of a caa breaks down . on the other hand , we need better empirical networks with ground truth communities to ensure that caas do not merely perform well on synthetic data .",
    "this work is supported by science foundation ireland under grant 08/src / i1407 : clique : graph and network analysis cluster .",
    "sean  r. collins , patrick kemmeren , and et al . toward a comprehensive atlas of the physical interactome of saccharomyces",
    "_ molecular & cellular proteomics : mcp _ , 60 ( 3):0 439450 , march 2007 ."
  ],
  "abstract_text": [
    "<S> in complex networks it is common for each node to belong to several communities , implying a highly overlapping community structure . </S>",
    "<S> recent advances in benchmarking indicate that the existing community assignment algorithms that are capable of detecting overlapping communities perform well only when the extent of community overlap is kept to modest levels . to overcome this limitation , </S>",
    "<S> we introduce a new community assignment algorithm called greedy clique expansion ( gce ) . </S>",
    "<S> the algorithm identifies distinct cliques as seeds and expands these seeds by greedily optimizing a local fitness function . </S>",
    "<S> we perform extensive benchmarks on synthetic data to demonstrate that gce s good performance is robust across diverse graph topologies . significantly , gce is the only algorithm to perform well on these synthetic graphs , in which every node belongs to multiple communities . </S>",
    "<S> furthermore , when put to the task of identifying functional modules in protein interaction data , and college dorm assignments in facebook friendship data , we find that gce performs competitively . </S>",
    "<S> +    * categories and subject descriptors : * h.2.8 database management : database applications  </S>",
    "<S> data mining * keywords : * community assignment , overlapping , local clustering algorithm , complex networks </S>"
  ]
}