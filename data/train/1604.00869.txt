{
  "article_text": [
    "knowledge base refinement is the major research area in semantic web society and many researchers are tackling this problem with diverse methods .",
    "most of these methods are done with semi - automatic way , however the size of the web data is challenging issue .",
    "so , fully - automated evolution of knowledge base is a major need in the semantic web society .",
    "in addition to that , by looking through the existing knowledge base such as dbpedia[1 ] , you can find many missing information which can be inferred from its internal information .",
    "for example , instance ` play station ' in dbpedia korea[10 ] has multiple properties explaining itself , however its type is still ` thing ' which means unclassified . by having schema and property information of both classes and instances , we can map those unclassified instances so that it can be utilized more useful way .",
    "+ in this paper , we suggest an algorithm to automatically evolve knowledge base .",
    "the algorithm can be categorized as data - driven evolution , since the learning starts from the property information of each instance . by analyzing those information",
    ", we can achieve the schema elaboration and suggests better type for each instance .",
    "we suggest two main algorithm named property generalization and instance type findings , and these two algorithms works as a mutual way .",
    "consider that we have basic knowledge base which includes ontology information with primitive instances , and new information pile up it as rdf : triple format .",
    "after adding the information , two algorithms are executed periodically and give refined knowledge base as an output . +",
    "first algorithm is property generalization algorithm , if there is a famous property among the instances of certain class , we can set the class as a domain type of that property . on the other hand , properties that does nt represent the instances set lose their domain type information .",
    "by adjusting its property , not only each class can be the real representative of its sub - instances , but ontology structure can be refined .",
    "+ second algorithm is type correction of existing instances .",
    "every instances should have its own type , but you can find many mismatch while looking at existing knowledge base especially localized sets .",
    "some instances contain their rdf : type information , but some do nt .",
    "some data might have been omitted .",
    "missing value in hierarchy could cause huge information loss while learning . by using our algorithm",
    "we can find the best matching between an instance and its relevant classes , and class type is changed if there exists a class which has higher similarity score than instance s former type . to decide the type of instance",
    ", we extract the domain information of each property . by analyzing the corresponding domain of each property",
    ", we can get the distribution of how each domain affects the instance through property . and by assuming that instance get affected most by the highest - frequency domain , we can designate the type of each instance .",
    "+ our two algorithm work in a complementary way . by generalizing the property of the instance into the property of the class , our ontology is getting richer ,",
    "hence each instance can use more information to find their new class .",
    "unclassified instance can also be classified throughout the cycle . and",
    "more relevant instances are tagged into each class so that the next generalization procedure operates more accurately .",
    "figure 1 illustrate briefly how our whole evolution logic works .",
    "* fig . 1 . * the cycle of fully - automatic ontology evolution    [ fig : example ]",
    "traditional ontology evolution method can be categorized as three different types[2 ] : data - driven evolution , structure - driven evolution , usage - driven evolution .",
    "structure - driven evolution is the evolution method by analyzing the structure of ontology .",
    "for example , by using structure - driven evolution , we can make more understandable hierarchy .",
    "if certain class has many subclasses , we can make one more sub - level for controlling the number of subclasses .",
    "data - driven approach is mostly based on instance learning .",
    "for example , if all instances of class a are the member of class b , class a becomes the subclass of class b. stojanovic especially , emphasized data - driven approach should be done by direct instances .",
    "external data sources are used by various research groups to complete data - driven approach .",
    "evolva[3 ] used rss feeds , terms list to initiate ontology evolution . and many ontology learning tools such as text2onto[4 ] , sprat[5 ] shows ontology changes from text corpus . for extending the coverage of the localized version of dbpedia , airpedia [ 6 , 7 ] did mapping between wikipedia infobox to 14 different languages . and [ 8 ] proposed semi - automatic schemata construction by extracting axiom patterns in existing knowledge base and converted into sparql based pattern detection algorithms which allows to refine knowledge base . and user - driven evolution use query and user - log information .",
    "grouping criteria for knowledge base can be the frequency of user access of the information .",
    "to do so , searching time can be reduced in the way that higher - accessed group has priority .",
    "web usage mining[9 ] is the famous method of usage - driven evolution .",
    "for automatic schema evolution , property generalization algorithm and type correction algorithm alternatively operates .",
    "we suggest three different instance type finding methods , and probability - based property generalization method .",
    "naturally , each dbpedia instance can be categorized as a certain type , and each type has property set that describes it .",
    "so each instances has property information related to its type .",
    "but some instance have various property that ca nt be categorized just in a type . or type data could be missed while building ontology .",
    "for example , dbpedia instance arnoldschwarzenegger[11 ] is categorized as rdf : type agent , person and officeholder. to clarify it , dbpedia just simply put arnold s matching yago[12 ] type information on the list though it ca nt be exactly match to another dbpedia type that describes arnoldschwarzenegger better .",
    "as you know , arnoldschwarzenegger can be categorized as politician , bodybuilder and actor . in this case",
    ", we ca nt apply traditional data - driven and structure - driven evolution algorithm .",
    "so finding instance type using its internal information is extremely important for further analysis . by looking through the instance",
    ", property information is valuable to perform knowledge - base evolution . in the schema level",
    ", each property has several domain type . by looking through dbpedia ontology[13 ]",
    ", dbpedia property birth date has domain person , but goals in league has more specific domain soccer player. we assume that property of each instance indirectly explain hidden type of instances .",
    "so we suggest three different ways of finding instance type through analyzing instance s property .      in naive frequency",
    "counting algorithm , we analyze the property - domain information of each instance and select the most relevant domain as an instance type .",
    "table 1 shows how this algorithm works for sample instance dae - jung kim[14 ] .",
    "the left table shows the list of properties that the sample instance has , and extracted domain information for each property . after listing ,",
    "we simply count the frequency of domain appeared .",
    "right table shows the list of domain in a descending order .",
    "as expected , we can find the correct domain type president for the former korean president dae - jung kim. also , we can utilize the relevant class information extracted from the result .    [",
    "cols=\"<,>,<,<\",options=\"header \" , ]     * table 1 . * finding domain type of dbpedia instance dae - jung kim    instantiate map < property , frequency >  m put property - domain pair frequency into m    aggregate frequency for each domain change instance domain into class      by naive frequency counting , we can find the most related class but it ca nt directly be accepted as a similarity score . to get the rigorous calculation ,",
    "we can formulate two matrices and get type - instance similarity score .",
    "first , we formulate two matrices , type - property matrix and instance - property matrix .",
    "value of those adjacency matrix is 1 if we consider naive frequency counting case .",
    "however , by normalizing row vectors of two matrices , we can give an relative weight that the type domain which has a lot of property ca nt get advantages .",
    "this method exactly represents cosine similarity between instance and type regarding to property information , and the score is bounded by 0 to 1 . on the example , property set of instance a is exactly same as property set of type 1 . in that case",
    ", we can get similarity score 1 between instance a and type 1 .",
    "tf - idf can give a weight to the term which only exists in specific set of documents .",
    "in our example , it becomes pf - idf(property frequency - inverse domain frequency ) . by considering inverse domain frequency",
    ", we can give weight to the property which has a few domain .",
    "so , type - property matrix can be recalculated using tf - idf measure .",
    "although tf - idf measure is effective to measuring weight , instance - property matrix does nt need to be recalculated , since our intuition is that although common property are shared by instances , importance of that property will not be underestimated .",
    "only if that property is shared among various types , we can judge that the property affects minimally while choosing its type .",
    "so , final score will be calculated by cosine similarity between pf - idf type - property matrix and instance - property matrix .",
    "for example , an uncategorized instance have specific property goals in league , we can say that the instance has a probability of being categorized as soccer player. on the other hand , if instance has general property like birth date , it does nt affects much for classifying its type .",
    "figure 2 shows the effect of applying tf - idf into the sample instance daejung kim. left figure shows the property set without adjusting and right figure shows the property set after applying inverse domain frequency . as a result , common property such as description , bornin are disappeared after adjusting its weight .        *",
    "* property set of instance daejung - kim before and after tf - idf    [ fig : example ]      to infer instance type correctly , we require solid ontology that gives huge property information .",
    "property generalization is the way of data driven approach , by reinforcing ontology by generalizing and deleting property through instance - based learning . in detail , famous property shared by most of the instances in certain type",
    "gets domain type information after generalized .",
    "also , property can lose it s domain information if greater part of the instances of that class does nt have it as a characteristic .",
    "property generalization operates in two different conditions .",
    "first , when new triples are added to the current knowledge base and detailed information of the instance gets bigger , we take property generalization to make ontology updated for new information .",
    "second , after adjusting instance type we have to consider the effects to knowledge base . for example , new instances are added , and existing instances are deleted from certain type and we want to modify the knowledge based on those minor changes , so that ontology can reflect the recent updates in knowledge base . to adjusting the ontology , we suggest probability generalization ratio ,    @xmath0   n : number of instances for a type    if instances more than probability p have certain property , we can generalize the property into ontology which means property can get a new domain type .",
    "property deletion activates on the opposite way by deleting domain type if it is not famous throughout the instances .",
    "property generalization and deletion algorithm activate from the leaf nodes so that ontology refinement can occur sequentially . in our full view , ontology is refined through property analysis and by using evolved ontology we can adjust instance type information . by repeating this procedure with new instance triples , knowledge base can evolve in fully automated way .",
    "instantiate map < property , frequency >  m    put property and its frequency into m    add domain class to property    load existing knowledge - base add instance triple sets property generalization ( ) property deletion ( ) find instance type ( ) save evolved knowledge - base",
    "to validate our algorithm , we setuped dbpedia ontology by using protg[15 ] environment , and added instances incrementally to check how many unclassified instances are classified by the effect of our algorithm .",
    "english - korean mapping information[16 ] is used while implementing the system .      at the first experiment",
    ", we added available instance type information from the first , and add 50,000 lines of new triples each time and update the knowledge - base by using our algorithm . since not every instance has rdf : type information they remained as unclassified after they added to the knowledge base .",
    "for example , some instance missed their instance type and some are being generated by the value of object property .",
    "latter instances have no property if there are nt exist before , it will takes time to get property filled . finally , by using the property characteristic of the ontology",
    ", those unclassified instances can find its own type .",
    "we checked every cycle and how many instances get type value extracted throughout the evolution cycle .",
    "figure 3 illustrates that 82.4% of unclassified instances which has properties find its own domain type .",
    "we can interpret that the area between green and black line is the number of instances newly classified by our evolution algorithm .",
    "the area between green and red line is yet unclassified , since the property does nt have much information , and some instances between red and blue line have no property since they are newly generated from object property value .        * fig .",
    "* increasing classified instances in dbpedia korea throughout the iteration    [ fig : example ]    figure 4 illustrates the number of property having domain increases throughout the iteration .",
    "the ratio also increases from 76.9% to 91% . for each iteration , ontology information overall increases through property generalization algorithm .",
    "4 . * increasing classified property in dbpedia korea throughout the iteration    [ fig : example ]",
    "in this paper , we have introduced a new fully - automated knowledge - base evolution methods , which operates in two steps - property generalization and instance type finding . using this method",
    ", we can generate evolved knowledge - base incrementally from incomplete ontology according to this method , property plays an important role to refine ontology .",
    "+ the major advantage of this approach is that knowledge base can easily adapted to the new information based on probabilistic model .",
    "not only suggesting link between new information and existing ontology , we can refine the ontology and instance information .",
    "this allows our methods as a start point to generate time - evolving knowledge - base .",
    "+ we validated our algorithm through dbpedia dataset , and proved the effectiveness of our algorithm .",
    "one weakness of the method is that the ontology itself is heavily depends on the information we get .",
    "so validation of the rdf : triple is needed before getting into the system .",
    "+ further work includes the mapping new class into ontology on the right position , as well as validating our ontology if the input triple come from the text corpus which does nt related to any pre - existing knowledge base .",
    "lehmann , j. , isele , r. , jakob , m. , jentasch , a. , kontokostas , d. , mendes , p. n. , hellmann .",
    "s. , morsey , m. , kleef , p. , auer , s. , bizer , c. : dbpedia - a large - scale , multilingual knowledge base extracted from wikipedia .",
    "semantic web 1 . 1 - 5 ( 2012 )        cimiano , p. , vlker , j. : text2onto - a framework for ontology learning and data - driven change discovery . in proceedings of the 10th international conference on applications of natural language to information systems ( nldb ) ,",
    "volume 3513 of lecture notes in computer science , pp.227 - 238 , ( 2005 )        aprosio , a. p. , giuliano , c. , lavelli , a. : extending the coverage of dbpedia properties using distant supervision over wikipedia .",
    "in : proceedings of the 10th european semantic web conference , pp.397 - 411 , ( 2013 )      srivastava , j. , cooley , r. , deshpande , m. , tan , p. -n . : web usage mining : discovery and applications of usage patterns from web data . in : acm sigkdd explorations newsletter , vol.1 issue.2 , pp.12 - 23 ( 2000 )    kim , e. k. , weidi , m. , choi , k. s. , auer , s. : towards a korean dbpedia and an approach for complementing the korean wikipedia based on dbpedia . in : proceedings of the 5th open knowledge conference ( 2010 )            knublauch h. , fergerson , r. w. , noy , n. f. , musen , m. a. : the protg owl plugin : an open development environment for semantic web applications . in : proceedings of the 3rd international semantic web conference , pp.229 - 243 , ( 2004 )"
  ],
  "abstract_text": [
    "<S> knowledge base is the way to store structured and unstructured data throughout the web . </S>",
    "<S> since the size of the web is increasing rapidly , there are huge needs to structure the knowledge in a fully automated way </S>",
    "<S> . however fully - automated knowledge - base evolution on the semantic web is a major challenges , although there are many ontology evolution techniques available . therefore learning ontology </S>",
    "<S> automatically can contribute to the semantic web society significantly . in this paper , we propose full - automated ontology learning algorithm to generate refined knowledge base from incomplete knowledge base and rdf - triples . </S>",
    "<S> our algorithm is data - driven approach which is based on the property of each instance . </S>",
    "<S> ontology class is being elaborated by generalizing frequent property of its instances . by using </S>",
    "<S> that developed class information , each instance can find its most relatively matching class . by repeating these two steps </S>",
    "<S> , we achieve fully - automated ontology evolution from incomplete basic knowledge base .    base evolution , ontology learning , instance - based learning , property generalization , instance type matching , dbpedia , cosine similarity , tf - idf </S>"
  ]
}