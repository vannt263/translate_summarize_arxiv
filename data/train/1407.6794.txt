{
  "article_text": [
    "greatest common divisor ( gcd ) of two integers is the largest integer that divides both integers .",
    "gcd computation has applications in rational arithmetic for simplifying numerator and denominator of a rational number .",
    "other applications of gcd includes integer factoring , modular arithmetic and random number generation .",
    "euclid s algorithm is one of the most important method to compute the gcd of two integers .",
    "lehmer [ 5 ] proposed the improvement over euclid s algorithm for large integers .",
    "blankinship [ 2 ] described a new version of euclidean algorithm .",
    "stein [ 7 ] described the binary gcd algorithm which uses only division by 2 ( considered as shift operation ) and subtract operation instead of expensive multiplication and division operations .",
    "asymptotic complexity of euclid s , binary gcd and lehmer s algorithms remains @xmath1 [ 4 ] .",
    "gcd of two integers @xmath2 and @xmath3 can be computed in @xmath4 bit operations [ 3 ] .",
    "knuth and schonhage proposed subquadratic algorithm for gcd computation .",
    "stehle and zimmermann [ 6 ] described binary recursive gcd algorithm .",
    "sorenson proposed the generalization of the binary and left - shift binary algorithm [ 8 ] .",
    "asymptotically fastest gcd algorithms have running time of @xmath5 bit operations [ 1 ] .    in this paper",
    "we describe the algorithms for gcd computation of @xmath0 integers .",
    "we extend the euclid s algorithm to compute gcd of more than two integers as explained in [ 4 ] .",
    "we also extend the binary gcd algorithm so that it can be used to compute gcd of many integers + this paper is organized as follows .",
    "section ii describes background and motivation .",
    "section iii presents gcd algorithms for @xmath0 integers and their features .",
    "finally , section iv contains conclusion .",
    "gcd of two integers @xmath6 can be defined formally as : @xmath7 gcd of two positive integers @xmath6 such that @xmath8 can be computed using the following recursive method : @xmath9 gcd operation follows the associative property , @xmath10 .",
    "further we can show that +   + * proposition 1 * + @xmath11 let @xmath12 be the gcd of @xmath13 and @xmath14 .",
    "then by definition @xmath15 @xmath16 @xmath17 @xmath18 @xmath19 using induction the above proposition can be extended to a list of @xmath0 integers .",
    "+   + * proposition 2 * + @xmath20 above expression can be used to compute gcd of more than two integers .",
    "but if the list of integers ( @xmath0 ) are very large and the pair of integers for which gcd is computed in a particular step is not randomly selected then the computation can be expensive .",
    "+ in this paper we discuss the algorithms for gcd computation of many integers by actually extending the properties of the gcd computation of two integers .",
    "euclid s algorithm for gcd of two integers can be extended to gcd of @xmath0 integers ( in this paper integers are non - negative unless otherwise specified ) using the following facts : + let @xmath21 be @xmath0 integers .",
    "+   + * proposition 3 * + @xmath22 this can be established by taking the convention @xmath23 for @xmath24 and extending it to @xmath0 numbers .",
    "+   + * proposition 4 * + @xmath25 _ proof _ : it follows from the fact @xmath26 together with associativity of gcd .",
    "+ @xmath27 + @xmath28 + or , @xmath29 +   + * proposition 5 * + _ let _ @xmath30 _ then _ @xmath31 _ proof _ : note that if @xmath32 then @xmath33 for any integer @xmath34 . as any common divisor @xmath35 and @xmath36 will be divisor of both @xmath35 and @xmath37 , and also any common divisor of @xmath35 and @xmath37 will divide both @xmath35 and @xmath36 .",
    "now , proposition 5 follows for @xmath24 .",
    "similarly , it can be extended using induction for @xmath0 numbers .",
    "+ gcd - n is described in algorithm 1 . in this algorithm",
    "if at any time there is only one non - zero @xmath38 , it will be considered as gcd , in other cases all @xmath38 s will be reduced by @xmath39 , where @xmath40 is the least non - zero integer at a given iteration .",
    "detailed description of gcd - n is as follows : first while loop is used to check that at least one @xmath38 is non zero . if all numbers are 0 , final gcd will be taken as 0 .",
    "first for loop is used to store least non - zero integer in @xmath35 .",
    "second for loop is used to reduce other @xmath38 s to @xmath41 except @xmath35 .",
    "third for loop is used to store largest and second largest integers in @xmath42 and @xmath43 respectively . finally ,",
    "if loop is used to check whether @xmath42 is the only non - zero integer , if this is the case , @xmath42 is returned otherwise while loop is called again .",
    "* input * : @xmath44 * output * : @xmath45    correctness of gcd - n algorithm follows from the proposition 3 , 4 and 5 .",
    "+ example 1 : let @xmath46 then + @xmath47 + @xmath48 + @xmath49 + @xmath50 + @xmath51 + @xmath52 + @xmath53 + @xmath54 + @xmath55 + @xmath56 + @xmath57      gcd of @xmath0 integers can be computed using only shift and subtract operation similar to binary gcd algorithm .",
    "this algorithm is based on the following facts .",
    "+   + * proposition 6 * + _ let _",
    "@xmath21 _ be even integers _ _ then _",
    "+ @xmath58 _ proof _ : consider the above statement for @xmath24 .",
    "let @xmath59 and @xmath60",
    ". by definition @xmath61 is least positive value of @xmath62 where @xmath63 and @xmath64 range over all integers .",
    "now , @xmath65",
    "+ @xmath66 least positive value of @xmath67 + @xmath66 2.\\{least positive value of @xmath68 } + @xmath69 + @xmath70 + therefore , above statement is proved for @xmath24 .",
    "now , using induction the statement can be shown to hold for @xmath0 .",
    "+ alternatively one can use the general definition : @xmath71 where each @xmath38 is expressed in its unique prime factorization in ascending order .",
    "@xmath72 now , using the equation 1 , proposition 6 can be easily established . since @xmath21 are all even integers .",
    "let @xmath73 then + @xmath74 + @xmath75 + @xmath76 + @xmath77 +   + * proposition 7 * + _ let _",
    "@xmath78 _ be odd and _ @xmath79 _ be even integers _ _ then _",
    "+ @xmath80 @xmath81 _ proof _ : since @xmath78 are odd integers , they are not divisible by 2 . but @xmath79 are even , and hence divisible by 2 .",
    "let @xmath82 . then using the equation 1 , again : + @xmath83 + @xmath84 + @xmath85 , since 2 is not common factor + @xmath86 +   + * proposition 8 * + _ let _ @xmath21 _ be odd integers _",
    "@xmath30 _ then _ @xmath87 _ proof _ : using the explanation in proposition 5 , if @xmath32 then @xmath33 , by putting @xmath88 and extending it to the case of @xmath0 integers , we can write .",
    "+ @xmath89 @xmath90 + now all terms @xmath91 are even except first term @xmath35 which is still odd .",
    "therefore we can use the proposition 7 to further reduce it .",
    "@xmath92 + @xmath93 + binary - gcd - n is described in algorithm 2 . in this algorithm first while loop is used to check how many iterations all of the @xmath0 integers are divisible by 2 , and this value is stored in counter @xmath94 .",
    "second while loop is used to check for all integers to be not zero .",
    "first for loop is used to store least non - zero integer in @xmath35 .",
    "second for loop is used to reduce other @xmath38 s to @xmath95 except @xmath35 , and this process is repeated until all @xmath38 s except one are zero .",
    "correctness of binary - gcd - n algorithm follows from proposition 6,7 and 8 .    * input * : @xmath44 * output * : @xmath45",
    "@xmath96    example 2 : let @xmath97 then + @xmath47 + @xmath98 + @xmath99 + @xmath100 + @xmath101 + @xmath102 + @xmath103 + @xmath104 + @xmath105 + @xmath106 + @xmath107",
    "in this paper we have presented the algorithms for gcd computation of many integers .",
    "traditional method of computing gcd of many integers by recursively calling euclid s for each pair of integers can be expensive if the list of integers are not selected randomly .",
    "future work can be to extend these algorithms to gcd computation of @xmath0 polynomials ."
  ],
  "abstract_text": [
    "<S> greatest common divisor ( gcd ) computation is one of the most important operation of algorithmic number theory . in this paper </S>",
    "<S> we present the algorithms for gcd computation of @xmath0 integers . </S>",
    "<S> we extend the euclid s algorithm and binary gcd algorithm to compute the gcd of more than two integers . </S>"
  ]
}