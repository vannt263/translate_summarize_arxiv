{
  "article_text": [
    "permissive - nominal logic ( pnl ) extends first - order predicate logic with term - formers that can bind names in their arguments .",
    "for instance , arithmetic , set theory , and functions axiomatise naturally in pnl ; their binders are modelled as ordinary pnl term - formers and their axioms look very much like the axioms normally written in informal practice .",
    "pnl is sound and complete for a first - order style semantics in ( permissive - nominal ) sets @xcite .",
    "this captures the essence of nominal techniques , whose initial motivation has been to handle names and binding in a first - order framework .    higher - order logic ( hol ) also has binding @xcite .",
    "this has been used to encode other binders , e.g. the church encoding of quantifiers as constants of higher type such as @xmath2 @xcite ; higher - order abstract syntax ( hoas ) encoding term - formers of an encoded syntax with binders as constants of higher type such as @xmath3 or @xmath4 ( strong vs. weak hoas ) to be a type of truth - values , @xmath5 to be a type of terms , and @xmath6 to be a type of predicates .",
    "@xmath0-the - quantifier generates truth - values , whence the type headed by @xmath7 , namely @xmath2 .",
    "@xmath0-the - syntax - building - constant in hoas generats _ terms _ , whence the types headed by @xmath6 , namely @xmath3 or @xmath4 .",
    "do not confuse a hol constant for a hoas - style binder ( a way to give meaning to building syntax with binding ) with a hol constant for the corresponding quantifier ( a way to give meaning to what that that syntax is intended to denote ; namely , actual quantification ) . ]",
    "@xcite ; and higher - order rewrite systems @xcite .",
    "this paper is not about how pnl and hol can be used as meta - mathematical reasoning frameworks , or about what models look like expressed as nominal sets or as functions .",
    "the deeper point is that we have before us two foundations for mathematics .",
    "the question we address is then as follows : _ there is a ` nominal ' model of names and binding which can be applied in various ways , and also a functional model which can also be applied in various ways .",
    "these are captured by two logics  pnl and hol  and by their nominal and functional denotations respectively .",
    "we observe that these are clearly different , yet their applications just as clearly overlap .",
    "so , what positive and mathematically precise statements we now make about their relationship ?",
    "_    since pnl is first - order and has a sound and complete semantics ( so expressivity and models are fairly ` small ' ) , whereas hol is higher - order ( so expressivity and models are fairly ` large ' ) , the natural direction for a translation is from nominal sets and pnl , to functions and hol .",
    "this raises the question of how pnl translates to hol , and how pnl models translate to functional models .    in this paper",
    "we translate a subsystem of pnl into hol and prove it sound and complete using arguments on nominal sets and and nominal renaming sets models @xcite .",
    "the proof of completeness involves giving a functional semantics to nominal terms , and a nominal semantics to @xmath1-terms in the spirit of henkin models @xcite .",
    "this involves a construction on nominal sets models corresponding to a free extension to _ nominal renaming sets _ , as previously considered by the second author with hofmann @xcite .",
    "the partiality of the translation seems to be inherent and reflects natural differences in structure between nominal and ` ordinary ' sets .",
    "that is , it is not the case that nominal techniques are ` just ' a concise presentation of hol with a weakened @xmath8-equivalence ( e.g. higher - order patterns @xcite ) .",
    "there is that , but there is also more .",
    "thus , the nominal and functional models of names and binding are distinct , but they have non - trivial and rich subsystems which are isomorphic in a sense made precise in this paper .",
    "we study pnl for its own sake in this paper , but the interested reader can find example nominal theories in the literature .",
    "pnl is designed as a first - order logic for denotations with binding .",
    "the reader can find sound and complete nominal algebra theories for substitution , @xmath8-equivalence , and first - order logic @xcite ( nominal algebra can be viewed as the equality fragment of pnl ) .",
    "not all pnl theories are expressed in the equality fragment .",
    "for instance , in the paper which introduced pnl @xcite we included theories of first - order logic and arithmetic which put universal quantification to the left of an implication .",
    "this can not be done in nominal algebra because it is a purely equational logic .",
    "to give some idea of what this family of logics looks like in practice , assume a name - sort @xmath9 and a base sort @xmath5 and term - formers @xmath10\\iota)\\iota$ ] ,  @xmath11 ,   and @xmath12 .",
    "( full definitions are in the body of the paper . )",
    "we sugar @xmath13r)$ ] to @xmath14 and @xmath15 to @xmath16 and @xmath17 to @xmath18 .",
    "atoms in pnl are a form of data and populate their own sort @xmath9 ; so @xmath19 serves to map them into the sort @xmath5 , where they represent object - level variables .",
    "here is @xmath20-equivalence , written out as it would be informally : @xmath21 here is a pnl axiom for @xmath20-equivalence , written out formally : @xmath22 ( see @xcite for a detailed study of this axiom in a nominal context . )",
    "@xmath18 is an _ atom _ and corresponds to the _ object - level variable _",
    "@xmath23 ; @xmath18 is not a pnl variable but it _ represents _ a variable of the object level system being axiomatised .",
    "@xmath24 is an _",
    "unknown _ and correspond to the _ meta - level variable _",
    "@xmath25 ; @xmath24 is a variable in pnl and may be instantiated .",
    "the reader can see how similar the two axioms look .",
    "their status is different in the following sense : whereas @xmath25 is typically taken to range over terms , @xmath24 ranges over elements of nominal sets ( via a valuation ; see definition  [ defn.valuation ] ) .",
    "this is possible because nominal sets have a notion of _ supporting set of atoms _ which mirrors the free variables of a term .",
    "the condition @xmath26 is a _ typing condition _ in pnl .",
    "the types , or _ permission sets _ as we call them , restrict the support of denotations associated to @xmath24 by a valuation .",
    "they correspond to freshness side - conditions in nominal terms from @xcite and to informal freshness conditions of the form ` @xmath23 not free in @xmath25 ' in informal practice . to see this intuition made formal",
    "see a translation from nominal terms to permissive - nominal terms in @xcite .",
    "there is no requirement to axiomatise @xmath27-equivalence because this is done automatically by the pnl system .",
    "sugar @xmath28 to @xmath29 $ ] .",
    "then axioms for @xmath8-equivalence are : @xmath30&y \\\\",
    "{ \\forall z , x.}&z[a{{\\mapsto}}x]&z & ( a\\not\\in{{\\mathit{pmss}}}(z ) ) \\\\",
    "{ \\forall x',x , y.}&(x'x)[a{{\\mapsto}}y]&(x'[a{{\\mapsto}}y])(x[a{{\\mapsto}}y ] ) \\\\ { \\forall x , z.}&({\\lambda a.}x)[b{{\\mapsto}}z]&{\\lambda a.}(x[b{{\\mapsto}}z ] ) & ( a\\not\\in{{\\mathit{pmss}}}(z ) ) \\\\ { \\forall x.}&x[a{{\\mapsto}}a]&x   \\end{array}\\ ] ]    thus",
    ", the design philosophy of pnl is that axioms should look like what we would write informally anyway , where variables map to atoms , meta - variables to unknowns , binding to atoms - abstraction , and capture - avoidance conditions to choice of permission sets .",
    "note that in the axioms above , @xmath18 and @xmath31 can not be equal because they are distinct atoms , and atoms are data , not variables ( @xmath18 is @xmath18 , and @xmath31 is @xmath31 , and they are distinct ) . more on this and on the use of permutations in the body of the paper .    equality reasoning is not necessary to @xmath27-rename atoms in pnl ; we can quotient by @xmath27-equivalence so that we can rename @xmath32 to @xmath33 without proving a logical equivalence .",
    "this is unlike other ` nominal ' reasoning systems , such as fraenkel - mostowski set theory as used by the author with pitts to introduce nominal techniques in @xcite , nominal rewriting by fernndez and the second author @xcite , nominal algebra by the second author with mathijssen @xcite , @xmath27prolog by cheney and urban @xcite , and other systems in the same spirit .",
    "this paper has a lot of technical ground to cover .",
    "this is unavoidable , because we need to deal with two logics ( restricted pnl and hol ) and two semantics ( nominal sets , and the hand - crafted henkin models in nominal renaming sets used in the completeness proof ) , as well as two translations ( from logic to logic , and from models to models ) .    for the reader s convenience , we provide an overview of the main technical points with brief justifications for their design :",
    "section  [ sect.pnl ] introduces permissive - nominal logic .",
    "this comes from previous work into ` nominal ' axiomatisations of systems with binding @xcite .",
    "in fact , we need to introduce two logics : full pnl and also a _ restricted _ version which has a weaker non - equivariant axiom rule .",
    "we write the entailment relations @xmath34 and @xmath35 respectively .",
    "it is the restricted version that we will eventually translate to hol .",
    "section  [ sect.hol ] introduces higher - order logic as a theory over the syntax of the simply - typed @xmath1-calculus .",
    "we write the entailment relation @xmath36 .",
    "section  [ sect.translation.sound ] defines the translation from restricted pnl to hol , and proves it sound using arguments on syntax . in order to do the translation ,",
    "we need to introduce a _ capture typing _",
    "@xmath37 which is a measure of how many functional abstractions are required to translate a given nominal term without losing information ; that is , of the functional complexity of a nominal term .",
    "our goal is then to prove completeness of the translation .",
    "we do this by transforming models of pnl into models of hol .",
    "so section  [ sect.semantics ] introduces two categories : @xmath38 of permissive - nominal sets and @xmath39 of permissive - nominal renaming sets",
    ". we also give a _ free _ construction , transforming a permissive - nominal set into a permissive - nominal renaming set .    in section  [ sect.permissive-nominal.sets ]",
    "we interpret full and restricted pnl in @xmath38 . in section  [ sect.interp.hol ] we interpret hol in @xmath39 .",
    "finally , in section  [ sect.pnl.hol.complete ] we use the free construction of section  [ sect.semantics ] to map a model of pnl in @xmath38 to a model in @xmath39 , and because the free construction does not ` make anything equal ' this is sufficient to prove completeness .    as one further mathematical note , the results in the literature concern full pnl and not restricted pnl .",
    "so in appendix  [ sect.completeness ] we sketch proofs of soundness , cut - elimination , and completeness of restricted pnl with respect to non - equivariant models in @xmath38 .",
    "these are modest , if not entirely direct , modifications of the existing definitions and proofs for full pnl and equivariant models in @xmath38 .",
    "quite a number of new ideas are required to make this all work .",
    "the highlights are : permissive - nominal renaming sets and their application to give non - standard ` nominal ' henkin models for higher - order logic ; restricted pnl and its semantics ; the free construction ; and the technical arguments as discussed in section  [ sect.pnl.hol.complete ] .",
    "+ given that the proofs and constructions in this paper are non - trivial and involve an effort to extend existing machinery , we should pause to ask again why doing this is justified , even necessary .",
    "nominal techniques were designed originally to reason on syntax - with - binding ( see the original journal paper @xcite or a recent survey paper @xcite ) .",
    "but since then this remit has expanded to reasoning about denotations with binding more generally ( an overview of which is in @xcite ) . in doing this ,",
    "we have created a whole new syntax and semantics for meta - mathematics .",
    "we will not argue for or against either the nominal foundation or the higher - order foundation for mathematics .",
    "our question is : given that these two foundations exist , how do they relate ?",
    "in fact , questions have been asked about how nominal names and binding are related to functions , ever since nominal techniques were conceived in the second author s thesis . since then , the development of pnl @xcite and nominal renaming sets @xcite has given us two powerful new tools with which to address these questions : a proof - theory for a logic in which nominal reasoning so far can be formalised , and a visibly nominal semantics which is not based on permutations but on possibly non - bijective renamings on atoms , so that atoms - abstraction can be considered as a function in that semantics .    in this paper , we leverage this to give a precise , concrete , and mathematically detailed account of how these two worlds really stand in relation to one another  and how they differ . in conclusion",
    "we speculate that there is some potential ( not explored in this paper ) that our translations might be used to piggyback nominal techniques on the substantial implementational efforts that have gone into developing hol over the past seventy years .",
    "permissive - nominal logic is a first - order logic for nominal terms quotiented by @xmath27-equivalence .",
    "doing this is not entirely trivial ; the interested reader can find more on this elsewhere @xcite .",
    "[ defn.sort.sig ] a * sort - signature * is a pair @xmath40 of * name * and * base sorts*. @xmath9 will range over name sorts ; @xmath41 will range over base sorts .",
    "a * sort language * is then defined by    : : = ( ,  , ) .",
    "examples of base sorts are : ` @xmath1-terms ' ,  ` formulae ' ,  ` @xmath42-calculus processes ' ,  and ` program environments ' , ` functions ' , ` truth - values ' , ` behaviours ' ,  and ` valuations '",
    ".    examples of name sorts are ` variable symbols ' ,  ` channel names ' ,  or ` memory locations ' .",
    "@xmath43\\alpha$ ] is an _",
    "abstraction sort_. this does a similar job to function - types in higher - order logic but note that @xmath9 must always be a name - sort .",
    "the behaviour of a term of sort @xmath43\\alpha$ ] corresponds to ` bind a name of sort @xmath9 in a term of sort @xmath27 ' .",
    "such a term does not denote a function , though later on in our completeness proof we will deliberately undermine that intuition to obtain our completeness result .",
    "[ defn.term.signature ] a * term - signature * over a sort - signature @xmath40 is a tuple @xmath44 where :    @xmath45 and @xmath46 are disjoint sets of * term- * and * proposition - formers*.    @xmath47 will range over term - formers .",
    "@xmath48 will range over proposition - formers .",
    "@xmath49 assigns to each @xmath50 a * term - former arity * @xmath51 and to each @xmath52 a * proposition - former arity * @xmath27 , where @xmath27 and @xmath53 are in the sort - language determined by @xmath40 .",
    "we will write @xmath54 just as @xmath55 .",
    "@xmath56 is a set of * unknowns * @xmath57 , each of which has a sort @xmath58 and a permission set @xmath59 , such that for each sort @xmath27 and permission set @xmath60 the set @xmath61 is countably infinite .",
    "@xmath62 will range over distinct unknowns .",
    "[ defn.signature ] a * signature * @xmath63 is then a tuple @xmath64 .",
    "we write @xmath65 for @xmath66 and similarly we write @xmath67 for @xmath68 .",
    "[ xmpl.lam.sig ] the signature for the @xmath1-calculus from the introduction has a name - sort for @xmath1-calculus object - level variables , a base sort for @xmath1-terms , and appropriate term - formers :    @xmath12 to form @xmath1-calculus variables in @xmath5 out of names in @xmath9 ,    @xmath69 for application , and    @xmath70 taking an abstraction in @xmath43\\iota$ ] and forming from it a @xmath1-abstraction term in @xmath5 .",
    "[ defn.atoms ] for each @xmath9 fix a disjoint countably infinite set of * atoms * @xmath71 , and an arbitrary bijection @xmath72 between @xmath71 and the integers @xmath73 . write @xmath74 finally , write @xmath75 @xmath76 will range over _ distinct _ atoms ( we call this the * permutative * convention ) .",
    "a * permission set * has the form @xmath77 where @xmath78 and @xmath79 are finite ( and a permission set may be finitely represented by the pair @xmath80 ) .",
    "@xmath60 , @xmath81 , and @xmath82 will range over permissions sets .",
    "the use of @xmath83 and @xmath84 ensures that permission sets are infinite and also co - infinite ( their complement is also infinite ) .",
    "[ defn.permutation ] a * permutation * is a bijection @xmath42 on @xmath85 such that @xmath86 and @xmath87 is finite .",
    "write @xmath88 for the set of permutations .",
    "given @xmath89 let a * swapping * @xmath90 be the bijection on atoms that maps @xmath18 to @xmath31 , @xmath31 to @xmath18 , and all other @xmath91 to themselves .    [ nttn.permutations ] we use the following notation :    write @xmath92 for * functional composition * , so @xmath93 ) .",
    "write @xmath94 for the * identity permutation * , so @xmath95 always .",
    "write @xmath96 for * inverse * , so @xmath97 .    for each signature @xmath63",
    ", define * terms * and * propositions * over @xmath63 by :    c@c@c    ( aa _ ) a :    &    r_1:_1    r_n:_n ( r_1,  ,r_n):(_1,  ,_n )    &    r:((f)= ( ) ) f(r ) :     +    r:(aa _ ) r : [ ]    &    ( ( x)= ) x :     +    &       &    r :  ( ( p)= ) p(r )     +    x.    continuing example  [ xmpl.lam.sig ] , we have the following terms and propositions :    @xmath98 where @xmath99",
    ".    @xmath100x:[\\nu]\\iota$ ] where @xmath99 and @xmath101 , and @xmath13x):\\iota$ ] .",
    "@xmath102x),x)$ ] is a proposition if @xmath48 is a proposition - former and @xmath103 .",
    "these definitions are all needed for the rest of the paper , starting with @xmath27-equivalence in subsection  [ subsect.aeq ] .",
    "we need them at both levels ; both for atoms and for unknowns .",
    "[ defn.permutation.action ] define a ( level 1 ) * permutation action * on syntax by : @xmath104{{{r}}}\\equiv &   [ \\pi(a)]\\pi{{\\cdot}}{{{r } } } & \\pi{{\\cdot}}(\\pi'{{\\cdot}}x ) \\equiv &   ( \\pi{\\circ}\\pi'){{\\cdot}}x \\\\ \\pi{{\\cdot}}{{\\mathsf{f}}}({{{r } } } ) \\equiv &   { { \\mathsf{f}}}(\\pi{{\\cdot}}{{{r } } } ) \\\\",
    "\\pi{{\\cdot}}\\bot \\equiv &   \\bot & \\pi{{\\cdot}}({{\\phi}}{\\rightarrow}{{\\psi}})\\equiv &   ( \\pi{{\\cdot}}{{\\phi}}){\\rightarrow}(\\pi{{\\cdot}}{{\\psi } } ) \\\\ \\pi{{\\cdot}}{{\\mathsf{p}}}({{{r}}})\\equiv &   { { \\mathsf{p}}}(\\pi{{\\cdot}}{{{r } } } ) & \\pi{{\\cdot}}({\\forall x.}{{\\phi } } ) \\equiv &   { \\forall x.}\\pi{{\\cdot}}{{\\phi}}\\end{array}\\ ] ]    [ defn.permutation.action.2 ] let @xmath105 range over sort- and permission - set - preserving bijections on unknowns ( so @xmath106 and @xmath107 ) such that @xmath108 is finite .",
    "write @xmath109 for functional composition ,  @xmath110 for the identity permutation , and @xmath111 for inverse , much as in notation  [ nttn.permutations ] .",
    "define a ( level 2 ) * permutation action * by : @xmath112{{{r}}}\\equiv &   [ a]\\pi{{\\cdot}}{{{r } } } & \\pi{{\\cdot}}(\\pi{{\\cdot}}x ) \\equiv &   \\pi{{\\cdot}}(\\pi(x ) ) \\\\",
    "\\pi{{\\cdot}}{{\\mathsf{f}}}({{{r } } } ) \\equiv &   { { \\mathsf{f}}}(\\pi{{\\cdot}}{{{r } } } ) \\\\",
    "\\pi{{\\cdot}}\\bot \\equiv &   \\bot & \\pi{{\\cdot}}({{\\phi}}{\\rightarrow}{{\\psi}})\\equiv &   ( \\pi{{\\cdot}}{{\\phi}}){\\rightarrow}(\\pi{{\\cdot}}{{\\psi } } ) \\\\ \\pi{{\\cdot}}{{\\mathsf{p}}}({{{r}}})\\equiv &   { { \\mathsf{p}}}(\\pi{{\\cdot}}{{{r } } } ) & \\pi{{\\cdot}}({\\forall x.}{{\\phi } } ) \\equiv &   { \\forall \\pi(x).}\\pi{{\\cdot}}{{\\phi}}\\end{array}\\ ] ]    [ defn.pointwise ] suppose @xmath113 is a set of atoms and @xmath42 is a level 1 permutation .",
    "suppose @xmath82 is a set of unknowns and @xmath105 is a level 2 permutation .",
    "define @xmath114 and @xmath115 by @xmath116 this is the standard * pointwise * permutation action on sets .",
    "[ defn.fa ] define * free atoms * @xmath117 and @xmath118 by : @xmath119{{{r}}})= & { { \\mathit{fa}}}({{{r}}})\\setminus\\{a\\ } & { { \\mathit{fa}}}(a)= & \\{a\\ } \\\\ { { \\mathit{fa}}}({{\\mathsf{f}}}({{{r } } } ) ) = &   { { \\mathit{fa}}}({{{r } } } ) & { { \\mathit{fa}}}(({{{r}}}_1,\\ldots,{{{r}}}_n ) ) = &   \\bigcup{{\\mathit{fa}}}({{{r}}}_i ) & & \\\\[1.5ex ] { { \\mathit{fa}}}(\\bot ) = & \\varnothing & { { \\mathit{fa}}}({{\\phi}}{\\rightarrow}{{\\psi}})= & { { \\mathit{fa}}}({{\\phi}})\\cup { { \\mathit{fa}}}({{\\psi } } ) \\\\ { { \\mathit{fa}}}({{\\mathsf{p}}}({{{r } } } ) ) = &   { { \\mathit{fa}}}({{{r } } } ) & { { \\mathit{fa}}}({\\forall x.}{{\\phi}})= & { { \\mathit{fa}}}({{\\phi } } )   \\end{array}\\ ] ] define * free unknowns * @xmath120 and @xmath121 by : @xmath122{{{r}}})= & { \\mathit{fv}}({{{r } } } ) & { \\mathit{fv}}(({{{r}}}_1,\\ldots,{{{r}}}_n ) ) = &    \\bigcup{\\mathit{fv}}({{{r}}}_i ) \\\\[1.5ex ] { \\mathit{fv}}(\\bot ) = & \\varnothing & { \\mathit{fv}}({{\\phi}}{\\rightarrow}{{\\psi}})= & { \\mathit{fv}}({{\\phi}})\\cup { \\mathit{fv}}({{\\psi } } ) \\\\ { \\mathit{fv}}({{\\mathsf{p}}}({{{r } } } ) ) = &   { \\mathit{fv}}({{{r } } } ) & { \\mathit{fv}}({\\forall x.}{{\\phi}})= & { \\mathit{fv}}({{\\phi}})\\setminus\\{x\\ }   \\end{array}\\ ] ]    [ lemm.fa.pi.r ] @xmath123 and @xmath124 .",
    "also , @xmath125 and @xmath126 .    by routine inductions on @xmath127 .",
    "the use of permissive - nominal terms allows us to ` just quotient ' syntax by @xmath27-equivalence .",
    "we can do this for both level 1 variable symbols ( atoms ) and level 2 variable symbols ( unknowns ) .    call a relation @xmath128 on terms and on propositions a * congruence * when it is closed under the following rules : @xmath129 \\begin{prooftree } { { { r}}}{\\mathrel{\\mathcal r}}{{{s}}}\\justifies [ a]{{{r}}}{\\mathrel{\\mathcal r}}[a]{{{s}}}\\end{prooftree } & \\begin{prooftree } { { \\phi}}{\\mathrel{\\mathcal r}}{{\\phi}}'\\quad { { \\psi}}{\\mathrel{\\mathcal r}}{{\\psi } } ' \\justifies { { \\phi}}{\\rightarrow}{{\\psi}}{\\mathrel{\\mathcal r}}{{\\phi}}'{\\rightarrow}{{\\psi } } ' \\end{prooftree } \\\\[3ex ] \\begin{prooftree } { { { r}}}{\\mathrel{\\mathcal r}}{{{s}}}\\quad ( { { \\mathsf{p}}}:\\alpha,\\ { { { r}}},{{{s}}}:\\alpha ) \\justifies { { \\mathsf{p}}}({{{r}}}){\\mathrel{\\mathcal r}}{{\\mathsf{p}}}({{{s } } } ) \\end{prooftree } & \\begin{prooftree } { { \\phi}}{\\mathrel{\\mathcal r}}{{\\phi } } ' \\justifies { \\forall x.}{{\\phi}}{\\mathrel{\\mathcal r}}{\\forall x.}{{\\phi } } ' \\end{prooftree } \\end{array}\\ ] ]    [ defn.aeq ] write @xmath90 for the * ( level 1 ) swapping * permutation which maps @xmath18 to @xmath31 and @xmath31 to @xmath18 and all other @xmath91 to themselves .",
    "similarly , provided @xmath130 and @xmath131 , write @xmath132 for the * ( level 2 ) swapping*.    define * @xmath27-equivalence * @xmath133 on terms and propositions to be the least equivalence relation that is a congruence and is such that :    c@c    ( a , b(r ) ) ( b  a)rr    &    ( x , y ( ) ) ( y  x )    we @xmath27-convert @xmath57 and @xmath18 in @xmath134x)$ ] .",
    "let @xmath135 and @xmath136 .",
    "suppose @xmath137 .",
    "using @xmath90 and @xmath132 we deduce : @xmath138x ) & \\stackrel{(a\\ b)}{{\\mathrel{=_{\\alpha } } } } & { \\forall x.}{{\\mathsf{p}}}([b](b\\ a){{\\cdot}}x )   \\\\ & \\stackrel{(x\\ y)}{{\\mathrel{=_{\\alpha } } } } & { \\forall y.}{{\\mathsf{p}}}([b](b\\ a){{\\cdot}}y ) .",
    "\\end{array}\\ ] ] it is routine to convert this sketch into a full derivation - tree .",
    "[ defn.terms.and.propositions ] for each signature @xmath63 , we take terms and propositions quotiented by @xmath27-equivalence .      a ( level 2 ) * substitution *",
    "@xmath139 is a function from unknowns to terms such that :    for all @xmath57 , @xmath140 and @xmath141 .",
    "@xmath142 for all but finitely many @xmath57 .",
    "@xmath139 will range over substitutions .",
    "define @xmath143 by : @xmath144    @xmath143 is unknowns that can be produced or consumed by @xmath139 , other than in the trivial manner that @xmath145 .",
    "[ defn.subst.action ] define a * substitution action * by :    r@  l@r@  l a & a & ( r_1,  ,r_n ) & ( r_1,  ,r_n ) + ( [ a]r ) & [ a](r ) & ( x ) & ( x ) + f(r ) & f(r ) + & & ( ) & ( ) + ( p(r ) ) & p(r ) & ( x. ) & x. ( ) ( x ( ) )    level 2 substitution @xmath146 is capturing for level 1 abstraction @xmath100\\text{-}$ ] .",
    "for example if @xmath147 then @xmath148x)\\theta\\equiv [ a]a$ ] .",
    "this is the behaviour displayed by the informal meta - level when we write `` take @xmath25 to be @xmath23 in @xmath149 '' .",
    "[ defn.seq ] @xmath150 and @xmath151 will range over sets of propositions .",
    "we may write @xmath152 and @xmath153 as shorthand for @xmath154 ( where we do not insist that @xmath155 , that is , the union need not be disjoint ) .",
    "a * sequent * of restricted pnl is a pair @xmath156 .",
    "a * sequent * of full pnl is a pair @xmath157 .",
    ".    define the * derivable sequents * of full pnl and restricted pnl by the rules in figures  [ seq ] and  [ rseq ] respectively .    the sole difference between figures  [ seq ] and  [ rseq ] is in the axiom rule , and",
    "is highlighted with a light blue rectangle .",
    "@xmath159 { $ \\begin{prooftree } \\phantom{h } \\justifies \\phi,\\,\\phi{\\vdash}\\pi{{\\cdot}}\\phi,\\,\\psi \\using{\\ensuremath{\\bf ( ax)}\\xspace } \\end{prooftree}$ } ; \\end{tikzpicture } } } & \\begin{prooftree } \\phantom{h } \\justifies \\phi,\\,\\bot{\\vdash}\\psi \\using{\\ensuremath{\\bf ( \\bot l)}\\xspace } \\end{prooftree } \\\\[4ex ] \\begin{prooftree } \\phi{\\vdash}\\phi,\\,\\psi \\quad \\phi,\\,\\psi{\\vdash}\\psi \\justifies \\phi,\\,\\phi{\\rightarrow}\\psi{\\vdash}\\psi \\using{\\ensuremath{\\bf ( { { \\rightarrow}}l)}\\xspace } \\end{prooftree } & \\begin{prooftree } \\phi,\\,\\phi{\\vdash}\\psi,\\,\\psi \\justifies \\phi{\\vdash}\\phi{\\rightarrow}\\psi,\\,\\psi \\using{\\ensuremath{\\bf ( { { \\rightarrow}}r)}\\xspace } \\end{prooftree } \\\\[4ex ] \\begin{prooftree } { \\begin{array}{c } \\phi,\\,\\phi[x{{{:}{:}{=}}}r]{\\vdash}\\psi \\\\ ( { { \\mathit{fa}}}(r){\\subseteq}{{\\mathit{pmss}}}(x ) ,   \\",
    "r{:}{{\\mathit{sort}}}(x ) ) \\end{array } } \\justifies \\phi,\\,{\\forall x.}\\phi{\\vdash}\\psi \\using{\\ensuremath{\\bf ( { \\forall}l)}\\xspace } \\end{prooftree } & \\begin{prooftree } \\phi{\\vdash}\\phi,\\,\\psi\\quad { \\small ( x\\not\\in{\\mathit{fv}}(\\phi,\\psi ) ) } \\justifies \\phi{\\vdash}{\\forall x.}\\phi,\\,\\psi \\using{\\ensuremath{\\bf ( { \\forall}r)}\\xspace } \\end{prooftree } \\\\[5ex ] \\end{array}\\ ] ]    @xmath159 { $ \\begin{prooftree } \\phantom{h } \\justifies \\phi,\\,\\phi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\phi,\\,\\psi \\using{\\ensuremath{\\bf ( ax^{{{\\scalebox{.6}{\\sout{$\\pi$}}}}})}\\xspace } \\end{prooftree}$ } ; \\end{tikzpicture } } } & \\begin{prooftree } \\phantom{h } \\justifies \\phi,\\,\\bot{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\psi \\using{\\ensuremath{\\bf ( \\bot l)}\\xspace } \\end{prooftree } \\\\[4ex ] \\begin{prooftree } \\phi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\phi,\\,\\psi \\quad \\phi,\\,\\psi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\psi \\justifies \\phi,\\,\\phi{\\rightarrow}\\psi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\psi \\using{\\ensuremath{\\bf ( { { \\rightarrow}}l)}\\xspace } \\end{prooftree } & \\begin{prooftree } \\phi,\\,\\phi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\psi,\\,\\psi \\justifies \\phi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\phi{\\rightarrow}\\psi,\\,\\psi \\using{\\ensuremath{\\bf ( { { \\rightarrow}}r)}\\xspace } \\end{prooftree } \\\\[4ex ] \\begin{prooftree } { \\begin{array}{c } \\phi,\\,\\phi[x{{{:}{:}{=}}}r]{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\psi \\\\ ( { { \\mathit{fa}}}(r){\\subseteq}{{\\mathit{pmss}}}(x ) ,   \\",
    "r{:}{{\\mathit{sort}}}(x ) ) \\end{array } } \\justifies \\phi,\\,{\\forall x.}\\phi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\psi \\using{\\ensuremath{\\bf ( { \\forall}l)}\\xspace } \\end{prooftree } & \\begin{prooftree } \\phi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}\\phi,\\,\\psi\\quad { \\small ( x\\not\\in{\\mathit{fv}}(\\phi,\\psi ) ) } \\justifies \\phi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{{{\\scalebox{.6}{\\sout{$\\pi$}}}}}}}}{\\forall x.}\\phi,\\,\\psi \\using{\\ensuremath{\\bf ( { \\forall}r)}\\xspace } \\end{prooftree } \\\\[5ex ] \\end{array}\\ ] ]",
    "we may write @xmath156 as shorthand for ` @xmath156 is a derivable sequent ' . we may write @xmath160 as shorthand for ` @xmath156 is not a derivable sequent ' .    similarly for @xmath157 and @xmath161 .",
    "figure  [ seq ] is the logic of @xcite .",
    "figure  [ rseq ] is the logic we translate to hol in this paper .",
    "the only difference is the ` @xmath42 ' in the axiom rule : full pnl has it ( see @xmath162 ) , and restricted pnl does not ( see @xmath163 ) .",
    "restricted pnl is a subset of full pnl , in the sense that ( obviously ) @xmath156 implies @xmath157 ( this suggests that the models of restricted pnl should be a superset of those of full pnl , which will indeed turn out to be the case ; see appendix  [ sect.completeness ] ) .",
    "why the difference ? because the translation to hol identifies atoms with functional arguments .",
    "atoms are symmetric up to permutation in full pnl ; this is built into @xmath162 in figure  [ seq ] .",
    "functional arguments are typically not symmetric .",
    "we might try to translate full pnl to hol by translating @xmath164 permutation instances of each @xmath165 or @xmath166 , where @xmath167 is some notion of the number of atoms in @xmath165 or @xmath166 ( cf .",
    "_ capture typings _ in definition  [ defn.capture.typing ] ) ; but that would be ` cheating ' in the sense that most of the syntax would then be generated by a meta - level ` macro ' which does @xmath164 amount of work .",
    "the issue here is not whether pnl can be encoded in hol ; the issue is whether it can be cleanly translated into hol .",
    "these are related but distinct questions .    to quickly see the difference in derivational power between full and restricted pnl , assume a name sort @xmath9 , a proposition - former @xmath168 , and two atoms @xmath169 .",
    "then the difference in the entailment relations of pnl and restricted pnl can be summed up as follows :    @xmath170  and  @xmath171 .",
    "@xmath172  but  [ line - through]*@xmath173*.    in appendix  [ sect.completeness ] we see that this difference corresponds in models to proposition - formers being interpreted by equivariant functions ( for full pnl ) or not necessarily equivariant functions ( for restricted pnl ) .",
    "it has to be this way : definition  [ defn.translation ] translates pnl terms and predicates to hol terms and predicates . in lemma  [ lemm.it.has.to.be ] we illustrate why only restricted pnl can be translated to hol by our translation : the derivability of full pnl is too strong for hol derivability and the translation would not be sound .",
    "note that this does not prove that other translations to hol do not exist , but ( as the discussion of @xmath164 above suggests ) we speculate that they would be significantly less natural .",
    "higher - order logic ( hol ) syntax and derivability should be familiar @xcite .",
    "we give the basics .",
    "we present hol as a derivation system over simply - typed @xmath1-terms with constants and types for logical reasoning ( like a type of truth - values and constant symbols like @xmath174 and @xmath0 ) .",
    "this is all standard .",
    "[ defn.hol.sort.sig ] a * hol signature * is a set @xmath175 of * base types * , which includes a distinguished base type of * truth - values * @xmath176 .",
    "@xmath177 will range over base types . a * type - language *",
    "is defined by    : : = ( ,  , ) .",
    "it is not necessary to include products @xmath178 , but for the purposes of translating pnl into hol doing this is convenient .",
    "[ defn.hol.term.signature ] a * term - signature * over a hol signature @xmath175 is a tuple @xmath179 where :    @xmath180 is a set of * constants * , which must contain elements @xmath181 , @xmath174 , and @xmath182 for every type @xmath8 .",
    "@xmath183 assigns to each @xmath184 a type @xmath8 in the type - language determined by @xmath175 , such that @xmath185 , @xmath186 , and @xmath187.[multiblock footnote omitted ]    a * signature * @xmath188 is then a tuple @xmath189 .",
    "we write @xmath190 for @xmath191 .",
    "[ defn.hol.terms.sorts ] for each signature @xmath192 and each type @xmath8 over @xmath175 fix a countably infinite set of * variables * of that type .",
    "@xmath62 will range over distinct hol variables . '",
    "this could refer either to a hol variable or  recalling definition  [ defn.term.signature]to a pnl unknown .",
    "we will make sure that it is always clear from context which is meant . ]",
    "write @xmath193 for the type of @xmath57 .    for each signature @xmath188",
    "define * hol terms * over @xmath188 by @xmath194 and a * typing * relation by :    c@c@c@c    t :  ( ( x)= ) x.t:    &    t:t:tt :    &    t_1:_1    t_n:_n ( t_1, ",
    ",t_n):(_1,  ,_n )    &    ( ( g)= ) g :    we now define @xmath27-equivalence .",
    "we would not normally be so detailed about this , but when we map pnl terms and propositions to hol later , it will be useful to have been precise here :    [ defn.hol.perm ] a * permutation * of hol variables is a bijection @xmath195 such that @xmath196 is finite",
    ". give hol terms a permutation action @xmath197 defined by :    x&=&(x ) & x.t&=&(x).t & ( tt)&=&(t)(t ) + ( t_1,  ,t_n)&=&(t_1,  ,t_n ) & g&=&g    free variables are defined by :    ( x)&=&\\{x } & ( x.t)&=&(t)\\{x } & ( tt)&=&(t)(t ) + ( ( t_1,  ,t_n))&=&_i(t_i ) & ( g)&= &    call a relation @xmath128 on hol terms a * congruence * when it is closed under the following rules : @xmath198 define @xmath27-equivalence to be the least congruence that is an equivalence relation and is such that : @xmath199 we quotient terms by @xmath27-equivalence and define * capture - avoiding substitution * @xmath200 $ ] as usual",
    ".    we write @xmath201 for _ @xmath202 is a term and has type @xmath8_. we call @xmath202 * typable * when @xmath203 for some type @xmath8 .",
    "we call a term a * hol proposition * when it has type @xmath7 . @xmath204 and",
    "@xmath205 will range over hol propositions .",
    "[ defn.hol.seq ] @xmath206 and @xmath207 will range over sets of hol propositions .",
    "we may write @xmath208 and @xmath209 as shorthand for @xmath210 .",
    "write @xmath211 .    a * sequent * is a pair @xmath212 .",
    "the * derivable sequents * are defined in figure  [ hol.seq ] .",
    "@xmath213 \\begin{prooftree } \\xi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}\\xi,\\,{\\raisebox{.15em}{\\large$\\chi$}}\\quad \\xi,\\,\\chi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}{\\raisebox{.15em}{\\large$\\chi$}}\\justifies \\xi,\\,\\xi{\\rightarrow}\\chi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}{\\raisebox{.15em}{\\large$\\chi$}}\\using{\\ensuremath{\\bf",
    "( h{{\\rightarrow}}l)}\\xspace } \\end{prooftree } & \\begin{prooftree } \\xi,\\,\\xi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}\\chi,\\,{\\raisebox{.15em}{\\large$\\chi$}}\\justifies \\xi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}\\xi{\\rightarrow}\\chi,\\,{\\raisebox{.15em}{\\large$\\chi$}}\\using{\\ensuremath{\\bf ( h{{\\rightarrow}}r)}\\xspace } \\end{prooftree } \\\\[4ex ] \\begin{prooftree } \\xi,\\,\\xi[x{{{:}{:}{=}}}{{{t}}}]{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}{\\raisebox{.15em}{\\large$\\chi$}}\\quad ( { { { t}}}{:}{{\\mathit{type}}}(x ) ) \\justifies \\xi,\\,{\\forall x.}\\xi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}{\\raisebox{.15em}{\\large$\\chi$}}\\using{\\ensuremath{\\bf ( h{\\forall}l)}\\xspace } \\end{prooftree } & \\begin{prooftree } \\xi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}\\xi,\\,{\\raisebox{.15em}{\\large$\\chi$}}\\quad { \\small ( x\\not\\in{\\mathit{fv}}(\\xi,{\\raisebox{.15em}{\\large$\\chi$ } } ) ) } \\justifies \\xi{\\mathrel{{\\vdash}^{\\hspace{-.95ex}\\raisebox{.5pt}{\\scalebox{.55}{$\\lambda$}}}}}{\\forall x.}\\xi,\\,{\\raisebox{.15em}{\\large$\\chi$}}\\using{\\ensuremath{\\bf ( h{\\forall}r)}\\xspace } \\end{prooftree } \\\\[5ex ] \\end{array}\\ ] ]",
    "in this subsection we show how to translate a pnl signature @xmath63 and propositions and terms in that signature , to a higher - order logic ( hol ) signature and propositions and terms in that signature .",
    "we start by translating a pnl signature @xmath63 to a hol signature @xmath214 .",
    "first , we set up some notation :    [ nttn.finite.lists ] let @xmath215 range over finite lists of distinct atoms .",
    "write @xmath216 when @xmath18 occurs in @xmath215 .",
    "write @xmath217 when every element in @xmath218 occurs in @xmath215 ( disregarding order ) .",
    "similarly if @xmath60 is a set of atoms write @xmath219 when every element in @xmath215 occurs in @xmath60 .",
    "if @xmath60 is a set of atoms write @xmath220 for the list obtained by removing from @xmath215 just those atoms not in @xmath60 .",
    "also write @xmath221 as shorthand for @xmath222 .",
    "write @xmath223 for the list obtained by applying @xmath42 pointwise to the elements of @xmath215 in order .",
    "write @xmath224 for the list obtained by appending @xmath18 ; when we write this we include an assumption that @xmath225 .",
    "write @xmath226 for @xmath227 where @xmath228 $ ] .",
    "[ defn.ts ] [ defn.hol.translation ] from a pnl signature @xmath63 determine a hol signature @xmath214 by the following specification :    for every atoms - sort @xmath9 in @xmath63 assume a hol base type @xmath229 .",
    "for every base sort @xmath53 assume a hol type @xmath230 .",
    "translate sorts in @xmath63 to types in @xmath214 as follows :    r@  l@r@  l@r@  l ^= & _ & ^= & _ & ( _ 1,  ,_n ) ^= & ( _ 1 ^ , , _",
    "n ^ ) +   [ ] ^= & ^    for every term - former @xmath65 assume a hol constant @xmath231 .    for every proposition - former @xmath67 assume a hol constant @xmath232 .    for every atom @xmath233 assume a hol variable @xmath233 .",
    "it is convenient to assume this correspondence is a literal identity ; i.e. that @xmath234 is actually a subset of the set of hol variables of type @xmath9 , and that there are countably infinitely many hol variables of type @xmath9 that are not atoms .    in particular , this means that every permutation @xmath42 in the sense of definition  [ defn.permutation ] is also a permutation @xmath195 in the sense of definition  [ defn.hol.perm ] .    for every unknown @xmath235 and list @xmath215 assume a distinct hol variable @xmath236 that is not an atom is one of the countably infinitely many hol variables that are not atoms .",
    "] of type @xmath237 where @xmath238 is the sorts of the atoms in @xmath239 , in order .",
    "[ defn.translation ] given a list @xmath215 translate pnl terms and propositions in @xmath63 to hol terms and propositions in @xmath214 ( definition  [ defn.ts ] ) by the rules in figure  [ fig.hol.translation ] .",
    "( the notation @xmath240 is defined in notation  [ nttn.finite.lists ] . )",
    "@xmath241r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=&{\\lambda a.}{{\\lfloor } r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } & { { \\lfloor } \\pi{{\\cdot}}x { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=&x_d\\pi{{\\cdot}}{d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}\\\\ { { \\lfloor } \\bot { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=&\\bot & { { \\lfloor } \\phi{\\rightarrow}\\psi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=&{{\\rightarrow}}{{\\lfloor } \\phi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}{{\\lfloor } \\psi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } & { { \\lfloor } { { \\mathsf{p}}}(r ) { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=&{{\\mathsf{g}}}_{{{\\scalebox{.45}{${{\\mathsf{p}}}$}}}}\\ , { { \\lfloor } r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } \\\\ { { \\lfloor } { \\forall x.}\\phi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=&\\forall\\ , { \\lambda x.}{{\\lfloor } \\phi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } \\end{array}\\ ] ]    [ xmpl.why.capturable ] suppose @xmath239 ( notation  [ nttn.finite.lists ] ) is the list @xmath100 $ ] and write @xmath57 for @xmath236 .",
    "assume a proposition - former @xmath242 of appropriate arity .",
    "then : @xmath243{{\\mathit{id}}}{{\\cdot}}x { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}={\\lambda a.}(xa ) \\quad { { \\lfloor } [ b](b\\ a){{\\cdot}}x { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}={\\lambda b.}(xb ) \\\\ { { \\lfloor } { \\forall x.}{{\\mathsf{equal}}}([a]x,[b](b\\ a){{\\cdot}}x ) { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=\\forall\\,{\\lambda x.}({{\\mathsf{equal}}}({\\lambda a.}(xa))({\\lambda b.}(xb ) ) ) \\end{gathered}\\ ] ] assuming appropriate axioms for @xmath242 , we would expect this to be true .",
    "now assume @xmath244 is the list @xmath245 $ ] and write @xmath246 for @xmath247 .",
    "then : @xmath248{{\\mathit{id}}}{{\\cdot}}y { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}={\\lambda",
    "a.}(yab ) \\quad { { \\lfloor } [ b](b\\ a){{\\cdot}}y { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}={\\lambda b.}(yba ) \\\\ { { \\lfloor } { \\forall y.}{{\\mathsf{equal}}}([a]y,[b](b\\ a){{\\cdot}}y ) { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}=\\forall\\,{\\lambda y.}({{\\mathsf{equal}}}({\\lambda a.}(yab))({\\lambda b.}(yba ) ) ) \\end{gathered}\\ ] ] we would expect this to be false .",
    "what has changed with respect to the previous case , is that @xmath31 is fresh for @xmath57 but not for @xmath246 .",
    "[ lemm.hol.gamma.fa ]    suppose @xmath18 is an atom",
    ". then if @xmath249 then @xmath250 .",
    "@xmath251 ( for @xmath42 on the right - hand side considered as a permutation of hol variables ) .    as a corollary",
    ", the translation @xmath252 is well - defined .",
    "that is , if @xmath165 and @xmath253 are @xmath27-equivalent then @xmath254 .    by routine inductions on @xmath165 .",
    "the proof that @xmath255 uses the assumption that @xmath256 .",
    "the corollary follows ; for more details see ( * ? ? ?",
    "* section  8) .      in order to translate to hol , some atoms are ` important ' and others are not .",
    "this is expressed by a _ capture typing _",
    ", an idea going back to @xcite .",
    "[ defn.capture.typing ] define * capture typings * @xmath257 and @xmath258 inductively by the rules in figure  [ fig.capture.typings ] . here",
    "@xmath215 ranges over finite lists of distinct atoms as described in notation  [ nttn.finite.lists ] , and @xmath113 ranges over finite sets of atoms .",
    "if @xmath259 then we may omit the ` @xmath260 ' and write just @xmath261 and @xmath262",
    ". write @xmath263 when @xmath264 for every @xmath265 .",
    "@xmath266r : a \\end{prooftree } \\\\[3ex ] \\begin{prooftree } d{\\vdash}r_i : a\\quad ( 1{\\leq}i{\\leq}n ) \\justifies d{\\vdash}(r_1,\\ldots , r_n):a \\end{prooftree } \\qquad\\qquad \\begin{prooftree } ( ( { \\mathit{nontriv}}(\\pi)\\cup a)\\cap{{\\mathit{pmss}}}(x)\\subseteq d ) \\justifies d{\\vdash}\\pi{{\\cdot}}x : a \\end{prooftree } \\\\[3ex ] \\begin{prooftree } d{\\vdash}r : a \\justifies d{\\vdash}{{\\mathsf{p}}}(r):a \\end{prooftree } \\quad\\qquad \\begin{prooftree } d{\\vdash}\\phi : a\\quad d{\\vdash}\\psi : a \\justifies d{\\vdash}\\phi{\\rightarrow}\\psi : a \\end{prooftree } \\quad\\qquad \\begin{prooftree } \\phantom{h } \\justifies d{\\vdash}\\bot : a \\end{prooftree } \\quad\\qquad \\begin{prooftree } d{\\vdash}\\phi : a \\justifies d{\\vdash}{\\forall x.}\\phi : a \\end{prooftree } \\end{gathered}\\ ] ]    [ rmrk.capture.closed ] the interesting case in figure  [ fig.capture.typings ] is the rule for @xmath267 .",
    "this ensures that @xmath215 is large enough to record all the important atoms in @xmath42 or abstracted further up in the term  that is , those permitted in @xmath57so that we do not lose information when we form @xmath268 .",
    "this is made formal in proposition  [ prop.capturable.minimal ] , which is theorems  8.12 and  8.14 of @xcite :    [ prop.capturable.minimal ]    if @xmath261 and @xmath269 then @xmath254 implies @xmath270 ( note that @xmath271 denotes @xmath27-equality , because we quotiented terms by this relation ) , and similarly for @xmath166 and @xmath272 .    if @xmath273 then there exists @xmath253 such that @xmath254 yet @xmath274 , and similarly for @xmath166 .",
    "definition  [ defn.translation ] maps pnl terms and predicates to typable hol terms :    [ prop.typable.hol.gamma.r ] if @xmath275 then for any @xmath215 ,  @xmath276 ,  and @xmath277 .    by inductions on @xmath165 and @xmath166 .",
    "_ _ the case @xmath99.__@xmath233 by definition .",
    "_ _ the case @xmath100r$ ] where @xmath99.__by inductive hypothesis @xmath278 for some type @xmath8 .",
    "it follows that @xmath279r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}={\\lambda a.}{{\\lfloor } r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}:\\nu\\to\\beta$ ] .    _",
    "_ the case @xmath267.__suppose @xmath280 .",
    "it is routine to check that @xmath281 .      when we prove soundness of the translation ( theorem  [ thrm.soundness ] ) there will be a problem , because we are interested in proving soundness of translating a sequent @xmath156 but because we work by induction on derivations @xmath105 we may have to translate all sequents in @xmath105 , some of which might have ` extra ' capturable atoms .",
    "we need to translate using a large @xmath282 and then re - index to @xmath283 :    [ defn.thetac ] define a substitution @xmath284 by : @xmath285    [ thrm.sub.composition ] if @xmath286 then @xmath287 .    similarly , if @xmath288 then @xmath289 .    by inductions on @xmath165 and @xmath166 .",
    "we consider a selection of cases :    the case @xmath290 .",
    "we reason as follows :     x ^dd = & ( x_dd_)dd & + = & ( .(x_dd_))d _ & + = & x_dd_&()(x)d _    the case @xmath100r$].we reason as follows :     [ a]r ^dd = & ( a .",
    "r ^)dd & + = & a. ( r ^dd ) & + = & a. ( r ^ ) & + = & a.r ^ &    the case @xmath291.we reason as follows :     x.^dd = & ( x . ^)dd & + = & x. ( ^dd ) & + = & x . ^ & + = & x.^ &      recall that hol terms have a permutation action @xmath292 given by considering @xmath42 as a permutation on hol variables and using definition  [ defn.hol.perm ] .",
    "then :    [ lemm.hol.pi ] if @xmath293 then @xmath294 ( see notation  [ nttn.finite.lists ] ) .",
    "a fact of @xmath295-conversion ( * ? ? ? * lemma  9.2 ) .",
    "write @xmath296 when @xmath297 and @xmath298 .",
    "[ lemm.hol.sub ] suppose @xmath261 and @xmath262 .",
    "suppose @xmath296 .",
    "then :    @xmath299 { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } { \\mathrel{=_{\\alpha\\beta}}}{{\\lfloor } r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}[x{{{:}{:}{=}}}{\\lambda { d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}.}{{\\lfloor } r ' { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}]$ ] .",
    "@xmath300 { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } { \\mathrel{=_{\\alpha\\beta}}}{{\\lfloor } \\phi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}[x{{{:}{:}{=}}}{\\lambda { d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}.}{{\\lfloor } r ' { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}]$ ] .    by routine inductions on @xmath165 and @xmath166 .",
    "we sketch two cases :    * _ _ the case @xmath301$].__we must prove that @xmath302 this follows by lemmas  [ lemm.hol.gamma.fa ] and  [ lemm.hol.pi ] . * _ _ the case @xmath303$].__we must prove that @xmath304 ) { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}{\\mathrel{=_{\\alpha\\beta}}}{{\\mathsf{g}}}_{{{\\scalebox{.45}{${{\\mathsf{p}}}$}}}}({{\\lfloor } r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}})[x{{{:}{:}{=}}}{\\lambda { d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}.}{{\\lfloor } r ' { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}].\\ ] ] this follows directly from the first part .",
    "[ prop.hol.forall.sound ] suppose @xmath262 and @xmath305 . then @xmath306 { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}$ ] .",
    "using lemma  [ lemm.hol.sub ] and @xmath307 from figure  [ hol.seq ] .",
    "[ thrm.soundness ] the interpretation is sound : if @xmath156 and @xmath308 and @xmath263 then @xmath309 .",
    "choose @xmath218 such that @xmath310 and @xmath311 for every sequent @xmath312 appearing in @xmath105it is not hard to verify that some such @xmath218 must exist .",
    "it is routine to verify by induction on @xmath105 that @xmath313 is derivable ; the case of @xmath314 uses proposition  [ prop.hol.forall.sound ] . so in particular @xmath315",
    ".    it follows , applying the substitution @xmath316 to both sides and using theorem  [ thrm.sub.composition ] , that @xmath309 .",
    "[ lemm.it.has.to.be ] the interpretation for full pnl ( figure  [ seq ] , with the stronger axiom rule ) would not be sound .",
    "that is , there exist @xmath150 and @xmath151 and @xmath215 such that @xmath308 , @xmath263 , and @xmath157 , but @xmath317 .",
    "consider a name sort @xmath9 and a unary predicate @xmath168 .",
    "then @xmath172 in full pnl , but it is not the case that @xmath318 in hol .",
    "for the reader s convenience we will clarify one aspect of the coming notation now : if the reader sees @xmath319 this is a set with a permutation action ; if the reader sees @xmath320 this is a set with a renaming action .",
    "there is no particular connection between @xmath319 and @xmath320 .    a typical renaming is @xmath321 $ ] ( instead of a typical permutation @xmath90 ) .",
    "formal definitions are in definition  [ defn.permutation ] and  [ defn.renaming ] .",
    "the reader may not be surprised by the use of sets with a permutation action ",
    "nominal techniques are based on these @xcite . but why the renaming action ?",
    "we need renamings to make a function out of an atoms - abstraction , mirroring the clause @xmath279r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}={\\lambda a.}{{\\lfloor } r { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}$ ] in definition  [ defn.translation ] .    in pnl models , an abstraction @xmath100r$ ]",
    "is modelled as gabbay - pitts atoms - abstraction @xmath100x$ ] , a sets - based construction from @xcite ( definition  [ defn.abstraction.sets ] , in this paper ) .",
    "this is constructed like a pair , from @xmath18 and @xmath23 , but destructed like a _ partial function _ the graph of which is evident in definition  [ defn.abstraction.sets ] .",
    "it is defined for fresh @xmath31 but not for @xmath322 .",
    "when we translate @xmath100r$ ] to hol we interpret @xmath100r$ ] as a function using @xmath1-abstraction .",
    "this suggests of our models that we translate a _ partial _",
    "function @xmath100x$ ] to a total function .",
    "but then we have to give meaning to @xmath100x$ ] applied to @xmath31 where @xmath31 is not fresh .",
    "this is where renaming sets are used .",
    "we can then conclude by noting that every model of pnl can be transformed into a model of hol , and in a compositional manner ( lemma  [ lemm.commuting.square ] ) .",
    "completeness quickly follows .",
    "[ defn.renaming ] suppose @xmath6 is a map from @xmath85 to @xmath85 .",
    "define @xmath323 and @xmath324 by @xmath325 echoing definition  [ defn.permutation ] , a * renaming * is a map @xmath6 from @xmath85 to @xmath85 such that @xmath326 and @xmath327 is finite .",
    "write @xmath328 for the set of renamings .    for @xmath89 let an * atomic renaming * @xmath321 $ ] map @xmath18 to @xmath31 , @xmath31 to @xmath31 , and other @xmath91 to themselves .",
    "@xmath6 will range over renamings .",
    "[ defn.perm.set ]    a * permutation set * is a pair @xmath329 of an * underlying set * @xmath330 and a * permutation action * @xmath331 which is a group action ; write it infix .",
    "( so @xmath332 and @xmath333 . )",
    "a * renaming set * is a pair @xmath334 of an * underlying set * @xmath335 and a * renaming action * @xmath336 which is a monoid action ; write it infix .",
    "( so @xmath332 and @xmath337 . )",
    "[ defn.finsupp ]    suppose @xmath319 is a permutation set .",
    "say that @xmath338 * supports * @xmath339 when for all @xmath340 , if @xmath341 then @xmath342 .",
    "suppose @xmath320 is a renaming set .",
    "say that @xmath338 * supports * @xmath343 when for all @xmath344 , if @xmath345 then @xmath346 .",
    "if @xmath347 has a supporting permission set ( definition  [ defn.atoms ] ) then it has a unique least supporting set which is equal to the intersection of all permission sets supporting @xmath23 .",
    "we call this the * support * of @xmath23 when it exists , and write it @xmath348 .    call @xmath347 * supported * when @xmath348 exists .    call @xmath319/@xmath320 * supported * when every element @xmath349 is supported .",
    "[ lemm.supp.subsets ]    if @xmath339 then @xmath350 .    if @xmath343 then @xmath351 .    as a corollary , if @xmath6 is injective on @xmath348 then @xmath352 .    by routine calculations using the group / monoid action .",
    "the reverse subset inclusion in lemma  [ lemm.supp.subsets ] would not work .",
    "for instance , consider @xmath353 with the ` exploding ' renaming action such that :    @xmath354 .",
    "@xmath355 .",
    "@xmath356 if @xmath357 . that by convention @xmath18 and @xmath31 are distinct .",
    "]    @xmath358 if @xmath359 .",
    "then @xmath360{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(a , b))=\\varnothing\\subsetneq \\{a\\}=[a{{{:}{:}{=}}}b]{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}{{\\mathit{supp}}}((a , b))$ ] .",
    "[ defn.equivariant.element ] call an element @xmath23 in @xmath361 * equivariant * when @xmath362 .",
    "@xmath23 is equivariant when @xmath363 for all @xmath42 , or @xmath364 for all @xmath6 , respectively .",
    "[ defn.equivariant ]    call a function @xmath365 * equivariant * when @xmath366    call a function @xmath367 * equivariant * when @xmath368    @xmath369 and @xmath370 will range over equivariant functions between pairs of permutation and renaming sets respectively .",
    "[ lemm.equivar.reduces.supp ]    suppose @xmath365 is equivariant",
    ". then @xmath371 for every @xmath339 .",
    "suppose @xmath367 is equivariant .",
    "then @xmath372 for every @xmath343 .",
    "we consider only the second part .",
    "suppose @xmath60 supports @xmath23 so that for all @xmath6 and @xmath373 , if @xmath374 then @xmath346 . the result follows if we note that @xmath375 and @xmath376 .",
    "[ defn.fps ]    write @xmath38 for the category with objects supported permutation sets and arrows equivariant functions between them",
    ".    henceforth , @xmath319 and @xmath377 will range over objects in @xmath38 .",
    "write @xmath39 for the category with objects supported renaming sets and arrows equivariant functions between them",
    ".    henceforth , @xmath320 and @xmath378 will range over objects in @xmath38 .",
    "@xmath38 and @xmath39 are both cartesian closed , but we only discuss exponentials for @xmath39 in this paper .",
    "the reader can find the constructions for @xmath38 e.g. in ( * ? ? ?",
    "* section  9 ) .",
    "@xmath38 is used to give denotation to pnl only , while @xmath379 is used to give a denotation to pnl and also to hol .",
    "for this reason , the exponentials of @xmath39 are of specific and immediate importance to us , but not those of @xmath38 .",
    "recall the definitions of @xmath380 and @xmath381 from definition  [ defn.renaming ] .",
    "[ defn.exp.ren ]    suppose @xmath382",
    ". suppose @xmath383",
    "( @xmath384 is not necessarily equivariant ) .    call @xmath384",
    "* supported * when there exists a permission set @xmath385 such that for every @xmath386 and permutation @xmath387 , if @xmath388 then @xmath389    suppose @xmath390 .",
    "( @xmath384 is not necessarily equivariant ) .    call @xmath384 * supported * when there exists a permission set @xmath385 such that for every @xmath392 and renaming @xmath393 , if @xmath394 then @xmath395    definition  [ defn.exp.ren ] uses a word ` supported ' for @xmath384 , suggestive of definition  [ defn.finsupp ] , even though @xmath384 has no permutation / renaming action . it _",
    "will _ have a permutation / renaming action ( remark  [ rmrk.conj.action ] and definition  [ defn.exp.ren.action ] ) , and then the terminologies will coincide ( see lemma  [ lemm.ok ] ) .",
    "[ rmrk.conj.action ] it is a fact that @xmath38 is cartesian closed and functions have the _ conjugation action _ @xmath396 and @xmath384 is supported in the sense of definition  [ defn.exp.ren ] if and only if it is supported as an element of @xmath397 with the conjungation action . for more on this",
    "see @xcite .",
    "renamings @xmath6 are not invertible , so we must work a little harder to define a renaming action .",
    "this is definition  [ defn.exp.ren.action ] .",
    "however , the end result is similar to the conjugation action , in a sense made formal in lemma  [ lemm.renaming.distribute ] which is similar to an immediate corollary of the conjugation action that @xmath398 .",
    "[ lemm.supp.supported.f.bound ] if @xmath384 is supported then @xmath399 for every @xmath343 .    by contradiction .",
    "suppose there exists @xmath400 .",
    "choose @xmath31 fresh ( so @xmath401 ) .",
    "then @xmath402 since @xmath403 and @xmath404 since @xmath405 .",
    "it follows by lemma  [ lemm.supp.subsets ] that @xmath406 , which is impossible .",
    "[ defn.freshening.pair ] suppose @xmath407 is a permission set and @xmath408 is finite .",
    "call @xmath409 and @xmath410 a * freshening pair * of renamings for @xmath113 with respect to @xmath60 when :    @xmath411 and @xmath412 .",
    "@xmath413 for all @xmath414 .",
    "@xmath415 .    in words , @xmath409 maps the atoms in @xmath113 to be outside @xmath60 ( and @xmath113 ) , and @xmath410 is an ` inverse ' to @xmath409 that puts them back .",
    "[ defn.exp.ren.action ] ( we continue the notation of definition  [ defn.exp.ren ] . ) if @xmath384 is supported then define @xmath416 by    ( f)(x ) = ( _ 2)f(_1x )    for some / any freshening pair of renamings @xmath409 and @xmath410 for @xmath417 ( which is finite ) , with respect to @xmath418 .",
    "definition  [ defn.exp.ren.action ] is well - defined .",
    "that is , it does not matter which freshening pair of renamings we choose .",
    "consider two freshening pairs of renamings @xmath419 and @xmath420 .",
    "let @xmath421 map @xmath422 to @xmath423 and @xmath424 map @xmath425 to @xmath412 in such a way that    @xmath426 for all @xmath427 ,    @xmath428 for all @xmath429 , and    @xmath430 and @xmath431 .",
    "we reason as follows :    ( _ 2)f((_1)x)= & ( _ 2_2)f((_1_1)x ) & + = & ( _ 2_2_1)f((_1)x ) & ( _ 1)s_f= + = & ( _ 2_2_1)f((_1)x ) & ( _ 1)()= + = & ( _ 2)f((_1)x ) &    [ lemm.renaming.distribute ] suppose @xmath343 and @xmath6 is a renaming .",
    "suppose @xmath432 is supported .",
    "then @xmath433 .",
    "let @xmath409 and @xmath410 be a freshening pair of renamings of @xmath417 with respect to @xmath434 .",
    "let @xmath373 be a renaming with @xmath435 such that @xmath436 ; this exists since @xmath409 is injective on @xmath417 and ` freshens ' this set to some fresh set of atoms .",
    "we reason as follows :    ( f)(x)=&(_2)f((_1)x ) & + = & ( _ 2)f((_1)x ) & + = & ( _ 2)f(_1x ) & ( )s_f= + = & ( _ 2)f(_1x ) & + = & f((_2_1)x ) & ( _ 2)s_f= + = & f(x ) &      [ defn.frs.exp ] write @xmath437 for the renaming set with underlying set those @xmath432 that are supported in the sense of definition  [ defn.exp.ren ] , and renaming action as defined in definition  [ defn.exp.ren.action ] .",
    "[ lemm.ok ] if @xmath384 is supported in the sense of definition  [ defn.exp.ren ] then it is supported by @xmath438 in the sense of definition  [ defn.finsupp ] .",
    "thus , @xmath437 is indeed a permissive - nominal renaming set .",
    "it suffices to show that if @xmath439 then @xmath440{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}f)(x)=f(x)$ ] .",
    "this follows by routine calculations .",
    "@xmath39 ( definition  [ defn.fps ] ) is cartesian closed :    the exponential is @xmath437 from definition  [ defn.frs.exp ] .",
    "products are given pointwise as in definition  [ defn.times ] .",
    "the terminal object @xmath441 is the singleton set @xmath442 with the trivial action @xmath443 .",
    "the bijection between @xmath444 and @xmath445 is given by currying and uncurrying as usual .",
    "thus @xmath446 maps to @xmath447 .",
    "it is not hard to verify that if @xmath448 then @xmath449 thus @xmath450 is supported by @xmath348 and is in @xmath451 .",
    "we take a moment to build a particular exponential which will be useful later .",
    "[ defn.lambda.a ] suppose @xmath343 and @xmath99 .",
    "write @xmath452 for the function mapping @xmath18 to @xmath23 and @xmath31 to @xmath321{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x$ ]",
    ".    @xmath453 .",
    "it suffices to show that @xmath454 is supported by @xmath348 ( in fact , it is also supported by @xmath455 ) .",
    "suppose @xmath456 and @xmath457 ( @xmath458 is not necessarily distinct from @xmath18 ) .",
    "write @xmath459 for the renaming such that @xmath460 and @xmath461 .",
    "we sketch the relevant reasoning : @xmath462){\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x = ( [ a{{{:}{:}{=}}}\\rho(z)]\\circ(\\rho\\text{-}a)){\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x=[a{{{:}{:}{=}}}\\rho(z)]{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x=({\\lambda a.}x)(\\rho{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}z)\\ ] ]        [ defn.bool ] write @xmath463 for the nominal set and the permutation / renaming set with underlying set @xmath464 and the * trivial * permutation / renaming action such that @xmath363/@xmath364 always",
    ".    we will be lax and write @xmath465 for @xmath466 .",
    "write @xmath234 for the permutation set and the renaming set with underlying set @xmath234 and the natural permutation / renaming action such that @xmath467/@xmath468 always",
    ".    we will be lax and write @xmath469 for @xmath470 .",
    "[ defn.abstraction.sets ] suppose @xmath319 is a supported permutation set .",
    "suppose @xmath386 and @xmath99 .",
    "define * atoms - abstraction * @xmath100x$ ] and @xmath471{\\mathsf{x}^{\\scalebox{.5}{$\\circlearrowright$}}}$ ] by :    r@  l [ a]x = & \\{(a , x)}\\{(b,(b  a)x)ba _ ( x ) } +    [ a]x = & [ ( a)]x    [ lemm.supp.abstraction ] suppose @xmath319 is a supported permutation set .",
    "@xmath471{\\mathsf{x}^{\\scalebox{.5}{$\\circlearrowright$}}}$ ] is a supported permutation set .",
    "@xmath100x{=}[a]x'$ ] if and only if @xmath472 , for @xmath473 and @xmath474 .",
    "@xmath100x{=}[a']x'$ ] if and only if @xmath475 and @xmath476 , for @xmath477 and @xmath478 .",
    "we do not need definition  [ defn.abstraction.sets ] for the completeness proof but we include it for the interested reader to compare and constrast with definition  [ defn.abstraction.sets ] .",
    "[ defn.abstraction.sets ] suppose @xmath320 is a supported renaming set .",
    "suppose @xmath392 and @xmath99 .",
    "define * atoms - abstraction * @xmath100x$ ] and @xmath471{\\mathsf{x}^{\\scalebox{.5}{$\\rightrightarrows$}}}$ ] by :    r@  l [ a]x = & \\{(a , x)}\\{(b,[a::=b]x)ba _ ( x ) } +    [ a]x = & [ a]x(a ( ) )    [ rmrk.total-partial ] definitions  [ defn.abstraction.sets ] and  [ defn.abstraction.sets ] look similar ; both define graphs of partial functions defined on @xmath479 .",
    "however , the critical difference is that in renaming sets , this partial function can be extended to a total function in @xmath480 .",
    "that is , @xmath100x\\in[\\mathbb a_\\nu]{\\mathsf{x}^{\\scalebox{.5}{$\\rightrightarrows$}}}$ ] determines a total function which we could write @xmath454 , mapping @xmath18 to @xmath23 and any other @xmath31 to @xmath321{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x$ ] .",
    "we return to this in lemma  [ lemm.non-iso ] where we show that the natural map from @xmath471{\\mathsf{x}^{\\scalebox{.5}{$\\rightrightarrows$}}}$ ] to @xmath481 is not surjective ; so definition  [ defn.abstraction.sets ] identifies a ` small ' and ` well - behaved ' subset of the function space .",
    "a cognate of lemma  [ lemm.supp.abstraction ] also holds for @xmath471{\\mathsf{x}^{\\scalebox{.5}{$\\rightrightarrows$}}}$ ] :    [ lemm.supp.abstraction ] suppose @xmath320 is a finitely - supported permutation set .",
    "@xmath471{\\mathsf{x}^{\\scalebox{.5}{$\\rightrightarrows$}}}$ ] is a permissive - nominal set .",
    "@xmath100x{=}[a]x'$ ] if and only if @xmath472 , for @xmath473 and @xmath482 .",
    "@xmath100x{=}[a']x'$ ] if and only if @xmath475 and @xmath483 ( or equivalently @xmath484{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x{=}x'$ ] ) , for @xmath477 and @xmath478 .",
    "[ defn.times ] if @xmath485 and @xmath486 are supported permutation sets for @xmath487 then define @xmath488 and @xmath489 by : @xmath490    [ lemm.properties.of.support ]    @xmath491 .",
    "@xmath492x)={\\mathit{supp}}(x)\\setminus\\{a\\}$ ] .",
    "@xmath493 .    by routine arguments like those in @xcite or (",
    "* corollary  2.30 & theorem  3.11 ) .",
    "if @xmath494 is an equivalence relation , @xmath495_\\sim$ ] will denote the equivalence class of @xmath496 in @xmath494 .",
    "[ defn.free.ren ] we define a functor @xmath497 from @xmath38 to @xmath39 as follows :    _ action of @xmath497 on objects . _    @xmath319 maps to @xmath498 where @xmath499_\\sim = [ ( \\rho\\circ\\rho',x)]_\\sim$ ] and @xmath494 is the least equivalence relation such that :    if @xmath500 for every @xmath501 then @xmath502 .",
    "@xmath503 .    for convenience we will write @xmath504_\\sim$ ] as @xmath505 .",
    "_ action of @xmath497 on arrows . _    an arrow @xmath506 maps to @xmath507 given by : @xmath508    @xmath509 is well - defined ; that is , that if @xmath510 then @xmath511 .",
    "induction on the derivation that @xmath512 .",
    "we consider the two base cases :    _ _ the case @xmath500 for every @xmath501.__by part  2 of lemma  [ lemm.equivar.reduces.supp ] also @xmath500 for every @xmath513 .",
    "_ _ the case @xmath514.__then also @xmath515 and by equivariance @xmath516 .    [ rmrk.alpha ]",
    "rules  2 and  1 of definition  [ defn.free.ren ] can be viewed as @xmath27-conversion and garbage - collection respectively .",
    "thus in @xmath517 we may without loss of generality ( using rule  2 ) assume that @xmath518 for any permission set @xmath60 , and we may also assume ( using rule  1 ) that @xmath519 .",
    "[ lemm.ba.ren.isos ]    @xmath520 ( for @xmath463 considered a set with the trivial permutation action ) is isomorphic to @xmath463 ( for @xmath463 considered a set with a trivial renaming action ) .",
    "@xmath521 ( for @xmath234 with its natural permutation action ) is isomorphic to @xmath234 ( for @xmath234 with its natural renaming action ) .",
    "we consider only the second part .",
    "this follows if we note that according to the rules for @xmath494 in definition  [ defn.free.ren ] ,   @xmath522    where we are dealing with more than zero or one atoms at a time , isomorphisms like those in lemma  [ lemm.ba.ren.isos ] may fail :    @xmath523 is not isomorphic to @xmath524 ( which is isomorphic to @xmath525 ) .",
    "consider the element @xmath321{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(a , b)$ ] .",
    "[ defn.interpretation ] suppose @xmath40 is a sort - signature ( definition  [ defn.sort.sig ] ) .    a * pnl interpretation * @xmath526 for @xmath40 consists of an assignment of a nonempty supported permutation set @xmath527 to each @xmath528 .",
    "we extend an interpretation @xmath526 to sorts by :    r@  l@r@  l _ ^=&^ & ( _ 1,  ,_n ) _ ^=&_1 _ ^  _n _ ^ + _ ^=&a _ & _ ^=&[a_]_^    [ defn.interpret.i ] suppose @xmath529 is a signature ( definition  [ defn.signature ] ) .    a * ( non - equivariant ) pnl interpretation * @xmath526 for @xmath63 consists of the following data :    an interpretation for the sort - signature @xmath40 ( definition  [ defn.interpretation ] ) .",
    "for every @xmath530 with @xmath531 an equivariant function @xmath532 from @xmath533 to @xmath534 ( definition  [ defn.equivariant ] ) .",
    "for every @xmath52 with @xmath68 a supported function @xmath535 from @xmath534 to @xmath464 .",
    "if every @xmath535 is equivariant , then call @xmath526 a * fully equivariant * interpretation . from figure",
    "[ rseq ] , so that @xmath536 ; see theorem  [ thrm.reduced.pnl.completeness ] . of course it is possible to imagine a notion of non - equivariant interpretation where term - formers are interpreted as non - equivariant functions .",
    "this would correspond to something else : namely , to losing the property that @xmath537 . ]",
    "[ defn.valuation ] suppose @xmath526 is an interpretation for @xmath63 . a * valuation * @xmath538 to @xmath526 is a map on unknowns such that for each unknown @xmath57 ,     @xmath539 ,  and     @xmath540 .",
    "@xmath538 will range over valuations .",
    "[ defn.interpret.terms ] suppose @xmath526 is an interpretation of a signature @xmath63 .",
    "suppose @xmath538 is a valuation to @xmath526 .",
    "define an * interpretation * @xmath541 in @xmath63 by :    r@  l@r@  l a _",
    "^ = & a & r _ ^ = & [ a]r _ ^ + ( r ) _ ^ = & f^(r _",
    "_ ^ = & ( x ) + ( r_1,  ,r_n ) _ ^ = & ( r_1 _ ^,  ,r_n _ ^ )    [ lemm.sort.r ] if @xmath275 then @xmath542 .    by a routine induction on @xmath165",
    "[ lemm.pi.r.model ] @xmath543 .    by a routine induction on @xmath165 .",
    "we consider one case :    * _ _ the case @xmath544.__by definition  [ defn.interpret.terms ] @xmath545 .",
    "therefore @xmath546 .",
    "it is a fact of the group action ( definition  [ defn.perm.set ] ) that @xmath547 , and of the permutation action ( definition  [ defn.permutation.action ] ) that @xmath548 .",
    "the result follows .",
    "[ lemm.supp.r ] @xmath549 .    by a routine induction on @xmath165 .",
    "we consider one case in detail :    * _ _ the case @xmath267.__@xmath550 by definition  [ defn.fa ] . by assumption in definition  [ defn.valuation ] @xmath551 .",
    "the cases of @xmath18 , @xmath100r$ ] , and @xmath100r$ ] use parts  1 , 2 , and 3 of lemma  [ lemm.properties.of.support ] .",
    "the case of @xmath47 uses part  1 of lemma  [ lemm.equivar.reduces.supp ] .",
    "[ defn.varsigma.sub ] suppose @xmath538 is a valuation to an interpretation @xmath526 .",
    "suppose @xmath57 is an unknown and @xmath552 is such that @xmath553 .",
    "define @xmath554 $ ] by @xmath555)(y)=\\varsigma(y ) \\quad\\text{and}\\quad ( \\varsigma[x{{{:}{:}{=}}}x])(x)=x .\\ ] ]    it is easy to verify that @xmath554 $ ] is also a valuation to @xmath526 .",
    "[ defn.truth ] suppose @xmath526 is an interpretation .",
    "define an * interpretation of propositions * by :    r@  l ( r ) _",
    "^ = & p^(r _ ^ ) + _ ^= & 0 + _ ^= & \\{1-_^,_^ } + _ ^=&\\{_^x ( x ) _",
    "^ , ( x ) ( x ) }    we may identify @xmath556 with a set of valuations @xmath557 .",
    "we discuss soundness and completeness in appendix  [ sect.completeness ] .",
    "[ lemm.denotsub ]    @xmath558$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$ } } } = { \\llbracket r[x{{{:}{:}{=}}}r ' ] \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}$ ] .    @xmath559$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$ } } } = { \\llbracket \\phi[x{{{:}{:}{=}}}r ' ] \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}$ ] .    by routine inductions on the definitions of @xmath541 and @xmath560 in definitions  [ defn.interpret.terms ] and  [ defn.truth ] .",
    "we consider two cases :    the case of @xmath561$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}$].we reason as follows :    x _",
    "^ = & r _ ^ & + = & r _ ^ & + = & ( x)[x::=r ] _ ^ & .",
    "the case of @xmath562$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}$ ] .",
    "we reason as follows :    \\(r ) _",
    "^ = & p^(r _ ^ ) & + = & p^(r[x::=r ] _",
    "^ ) & + = & ( r)[x::=r ] _ ^ & .",
    "[ lemm.fv.denot ] if @xmath563 for all @xmath564 then @xmath565 , and similarly for @xmath166 .    by a routine induction on @xmath165 and @xmath166 .",
    "for this section fix some pnl interpretation @xmath526 of a pnl signature @xmath63 .",
    "recall from definition  [ defn.ts ] the definition of the corresponding hol signature @xmath214 .",
    "we have our interpretation of pnl and we have from definition  [ defn.translation ] a translation of pnl syntax to hol syntax .",
    "we also have a functor from nominal sets to renaming sets ( definition  [ defn.free.ren ] ) .",
    "it remains to interpret hol in renaming sets consistent with these interpretations and translations .",
    "this is definitions  [ defn.hol.interpretation ] and  [ defn.hol.interpret.terms ] , and the key technical result lemma  [ lemm.commuting.square ] .",
    "completeness follows quickly as a corollary ( theorem  [ thrm.pnl.hol.complete ] ) .",
    "note that in the interpretation ( definition  [ defn.hol.interpretation ] ) the type @xmath566 is not necessarily interpreted as the set of all functions ; it may be interpreted as a small subset of this function space .",
    "this is an old idea : since henkin , models of hol have been constructed to cut down on the full function - space ( e.g. to create a complete semantics ( * ? ? ?",
    "* section  55 ) ; see also @xcite for a survey of non - standard semantics for hol ) .",
    "what we need to prove completeness of the syntactic translation @xmath567 is the existence of _ some _ interpretation of hol with certain properties .",
    "this should not be mistaken as a commitment of nominal techniques to using this model of hol always ( unless we want to ) .",
    "recall the definition of a valuation @xmath538 ( definition  [ defn.valuation ] ) to an intepretation @xmath526 for the pnl signature @xmath63 .",
    "recall the definition of @xmath554 $ ] ( definition  [ defn.varsigma.sub ] ) , and the interpretations of terms @xmath541 ( definition  [ defn.interpret.terms ] ) and propositions @xmath560 ( definition  [ defn.truth ] ) .",
    "we give similar definitions for hol and renaming sets , culminating with theorem  [ thrm.hol.soundness ] ( soundness ) .",
    "[ defn.hol.interpretation ] we provide an interpretation @xmath568 of @xmath214 by :    r@  l@l _ ^=&(_^ ) + o _ ^=&b + ( _ 1,  ,_n ) _ ^=&_1 _ ^  _n _ ^ & ( _ i ^i ) + _^=& _ ^_^ & (  ^ )    recall @xmath437 from definition  [ defn.frs.exp ] and @xmath569 from definition  [ defn.times ] .",
    "[ rmrk.case-split ] not all function types are interpreted equally by definition  [ defn.hol.interpretation ] .",
    "if a type is the image of a pnl sort then we handle it using the first clause by wrapping it up in @xmath497 .",
    "otherwise the interpretation is as standard : pairs to product ; function types to the ( supported ) function set .",
    "this case - split makes lemma  [ lemm.commuting.square ] work , which is central to corollary  [ corr.notsubseteq ] and to completeness ( theorem  [ thrm.pnl.hol.complete ] ) .",
    "why lemma  [ lemm.commuting.square ] _ could not _ work if we did not do this , is indicated in lemma  [ lemm.non-iso ] . briefly , @xmath570 contains ` exotic elements ' making it bigger than @xmath471\\text{-}$ ] , which readers familiar with higher - order abstract syntax would expect ( * ? ? ?",
    "* _ exotic terms _ ) .",
    "perhaps less familiar from lemma  [ lemm.commuting.square ] is that @xmath497 does not commute with atoms - abstraction or even with cartesian product .",
    "that is , even e.g. @xmath571 in @xmath39 has an ` exotic element ' .",
    "[ lemm.non-iso ]    the natural map from @xmath521 to @xmath234 mapping @xmath572 to @xmath573 , is a bijection ( cf .",
    "lemma  [ lemm.ba.ren.isos ] ) .",
    "the natural map from @xmath574 to @xmath575 mapping @xmath576 to @xmath577 is neither surjective nor injective .",
    "the natural map from @xmath578{\\mathsf{x}^{\\scalebox{.5}{$\\circlearrowright$}}})}$ ] to @xmath471{{{\\mathit{ren}}}({\\mathsf{x}^{\\scalebox{.5}{$\\circlearrowright$}}})}$ ] mapping @xmath579x$ ] where @xmath580 to @xmath100\\rho{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x$ ] , is not surjective .    the natural map from @xmath471{\\mathsf{y}^{\\scalebox{.5}{$\\rightrightarrows$}}}$ ] to @xmath581 mapping @xmath100x$ ] to @xmath454 ( definition  [ defn.lambda.a ] ) , is not surjective .    by rule  2 of definition  [ defn.free.ren ] .",
    "take @xmath582 .",
    "the natural map from @xmath574 to @xmath575 takes @xmath583 to @xmath584 . by equivariance",
    "it must map @xmath321{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(a , b)$ ] to @xmath585 .",
    "but then it is not injective , since @xmath321{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(a , b)\\neq { { \\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(b , b)$ ] in @xmath574 .",
    "now take @xmath586 .",
    "it is not hard to see that @xmath440{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(a , b),{{\\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(b , b))$ ] is not in the image of the natural map , so the map is also not surjective .",
    "take @xmath587 and consider @xmath100[a{{{:}{:}{=}}}b]{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(a , b)\\in[\\mathbb a_\\nu]{{{\\mathit{ren}}}({\\mathsf{x}^{\\scalebox{.5}{$\\circlearrowright$}}})}$ ] .",
    "take @xmath588 for @xmath234 considered a renaming set as in definition  [ defn.bool ] .",
    "consider the function @xmath321\\in\\mathbb a_\\nu\\rightarrow\\mathbb a_\\nu$ ] , mapping @xmath18 to @xmath31 , @xmath31 to @xmath31 , and all other @xmath91 to @xmath91 .",
    "[ defn.hol.valuation ] a * ( hol ) valuation * @xmath589 to @xmath568 is a map on variables @xmath590 such that @xmath591 .",
    "@xmath589 will range over valuations .",
    "[ defn.varrho.update ] suppose @xmath589 is a valuation .",
    "suppose @xmath57 is a variable and @xmath592 .",
    "define a function @xmath593 $ ] by :    ( ) ( b)=(b ) ( ) ( y)=(y ) ( ) ( x)=x    it is easy to verify that @xmath593 $ ] is also a valuation to @xmath568 .    [ defn.hol.interpret.terms ] extend @xmath568 to terms as follows :    @xmath594 .",
    "@xmath595 .",
    "@xmath596 and @xmath597 ( definition  [ defn.free.ren ] ) .",
    "@xmath598 .",
    "@xmath599 .",
    "@xmath600 .",
    "@xmath601x$ ] where @xmath602)=\\rho{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x$ ] provided that @xmath603 for some pnl sort @xmath27 and @xmath99 for some name sort @xmath9 and ( @xmath27-converting if necessary ) @xmath604 .",
    "@xmath605)$ ] provided that @xmath606 where @xmath607 is not equal to @xmath608\\alpha { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$$}}}$ ] for any @xmath9 or @xmath27 .",
    "@xmath609\\circ\\rho){\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x$ ] provided that @xmath603 for some pnl sort @xmath27 , where @xmath610 ( by construction some such @xmath31 always exists ) and @xmath611x$ ] , and ( renaming if necessary ) @xmath612 .",
    "@xmath613 provided that @xmath614 for @xmath8 not equal to @xmath615 for any pnl sort @xmath27 .",
    "@xmath616 provided that @xmath617 for @xmath487 , where @xmath618 , and we choose represenatives such that @xmath619 for all @xmath620 .",
    "@xmath621 provided that there exists some @xmath622 and @xmath8 such that @xmath623 and @xmath8 is not equal to @xmath615 for any pnl sort @xmath27 .",
    "[ rmrk.outline ] definition  [ defn.hol.interpret.terms ] propagates to terms the case - split noted in remark  [ rmrk.case-split ] .",
    "we treat terms differently depending on whether they populate the translation of a pnl sort , or not",
    ". we must do this because of how we interpreted types in definition  [ defn.hol.interpretation ] .",
    "just to locate where we are , here is an schematic of the overall structure of the proof of completeness : @xmath624^{{{\\lfloor } \\text{- } { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$}}}}\\ar[d]_{{\\llbracket \\text{- } \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$ } } } } & \\text{hol syntax } \\ar[d]^{{{\\llbracket \\text{- } \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(d(\\varsigma))}\\ar@{-->}[dl]^{\\text{\\em not possible } }   \\\\ { \\ensuremath{\\mathsf{pmsprm } } }   \\ar[r]_{{{{\\mathit{ren}}}(\\text{- } ) } } & { \\ensuremath{\\mathsf{pmsren } } }   } \\ ] ] we translated pnl to hol using @xmath567 in definition  [ defn.translation ]",
    ". ideally , to prove completeness we would give hol a denotation directly in @xmath39 .",
    "unfortunately this is not possible ( the dashed arrow ) because @xmath100r$ ] translates to @xmath625 and has nominal denotation as an atoms - abstraction @xmath100{\\llbracket r \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}$ ] ; atoms - abstraction ( definition  [ defn.abstraction.sets ] ) is the graph of a partial function , whereas @xmath625 ` wants ' to take denotation as a total function .",
    "so we use a commuting square as illustrated , and in @xmath39 atoms - abstraction can be viewed as a total function , as noted in remark  [ rmrk.total-partial ] .",
    "definition  [ defn.hol.interpret.terms ] uses this , and fills in the right - hand arrow .",
    "note that by forming this diagram we give a new semantics to pnl in @xmath39 , and thus in particular give a semantics to nominal atoms - abstraction in which it becomes interpreted as a total function .",
    "the top arrow is definition  [ defn.translation ] ; the left - hand arrow is definition  [ defn.interpret.terms ] ; and the bottom arrow is definition  [ defn.free.ren ] .",
    "lemma  [ lemm.abs.conc.pi ] proves commutativity of the square .",
    "[ lemm.hol.denotren ] suppose @xmath99 and @xmath626 .",
    "suppose @xmath627 for every @xmath628 ( including @xmath31 ) .",
    "then @xmath629 ) = [ a{{{:}{:}{=}}}b]{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}({{\\llbracket t \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho))$ ] .    by a routine induction on @xmath25 .",
    "we mention two cases :    the case @xmath25 is @xmath18.using the fact that @xmath630{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}a$ ] in @xmath234 with the action described in definition  [ defn.bool ] .",
    "the case @xmath25 is @xmath57 for some hol variable that is not an atom.by assumption @xmath627 and so by definition  [ defn.finsupp ] ,  @xmath631{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}\\varrho(x)$ ] .",
    "the result follows .",
    "lemma  [ lemm.hol.denotren ] may fail if @xmath632 .",
    "for instance , if @xmath633 where @xmath99 and @xmath634 and @xmath57 is not itself an atom , then @xmath635)={{\\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}a$ ] yet @xmath321{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}({{\\llbracket x \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho))=[a{{{:}{:}{=}}}b]{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}({{\\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}a)={{\\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}b$ ] .",
    "we need to check that the denotation of terms populates the denotation of their types , and that @xmath8-equivalent terms receive equal denotations .",
    "[ lemm.type.t ] if @xmath614 then @xmath636 .",
    "@xmath637)$ ] .",
    "there are two cases , depending on whether @xmath638\\alpha { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$$}}}$ ] for some pnl sort , or not .",
    "_ _ the case @xmath603.__by definition  [ defn.hol.interpret.terms ] @xmath610 and @xmath639x$ ] , for some @xmath31 , @xmath18 , and @xmath23 . @xmath27-converting",
    "if necessary assume @xmath57 is equal to @xmath18 which we choose fresh ( so @xmath612 and @xmath640 for every @xmath641 ) . then also by definition @xmath642\\circ\\rho){\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x$ ] .    thus it suffices to check that @xmath440\\circ\\rho){\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x={{\\llbracket t \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho[a{{{:}{:}{=}}}b])$ ] .",
    "this follows using lemma  [ lemm.hol.denotren ] .    _",
    "_ the case @xmath614 where @xmath8 is not equal to @xmath615 for any pnl sort @xmath27.__this is as standard .",
    "[ lemm.fv.hol.denot ] if @xmath643 for all @xmath644 then @xmath645 .    by a routine induction on terms .",
    "[ lemm.hol.denotsub ] @xmath646 ) = { { \\llbracket { { { t}}}[x{{{:}{:}{=}}}{{{u } } } ] \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho)$ ] .    by a routine induction on @xmath202 .",
    "we mention two cases ( bearing in mind that in hol , a variable @xmath647 may be an atom in @xmath234 ) :    _ the case @xmath202 equals @xmath57 equals @xmath99 for some atom @xmath18 . _    by definition  [ defn.hol.interpret.terms ] ,  @xmath648)= { { \\llbracket { { { u}}}\\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho)$ ] .    _",
    "the case @xmath202 equals @xmath649 . _",
    "we assume @xmath650 , so @xmath651={\\lambda y.}({{{t}}}'[x{{{:}{:}{=}}}{{{u}}}])$ ] ,  and use the inductive hypothesis .",
    "[ defn.hol.ment ] call the proposition @xmath204 * valid * in @xmath652 when @xmath653 for all @xmath589 .",
    "call the sequent @xmath654 * valid * in @xmath652 when @xmath655 is valid .    if this is true for all @xmath652 then write @xmath656 .",
    "[ thrm.hol.soundness ] if @xmath212 is derivable then @xmath657 .",
    "fix some interpretation @xmath568 .",
    "we work by induction on derivations ( figure  [ rseq ] ) .",
    "we sketch the two non - trivial cases :    _ _ the case of @xmath307.__we check that @xmath658 implies @xmath659 \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho)$ ] .",
    "we reason as follows : @xmath660 ) \\mid y\\in{{\\llbracket { { \\mathit{type}}}(x ) \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}\\ } & \\text{definition~\\ref{defn.hol.interpret.terms } } \\\\",
    "\\leq&{{\\llbracket \\xi \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho[x{{{:}{:}{=}}}{{\\llbracket u \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho ) ] ) & \\text{fact } \\\\",
    "= & { { \\llbracket \\xi[x{{{:}{:}{=}}}u ] \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho ) & \\text{lemma~\\ref{lemm.hol.denotsub } } \\end{array}\\ ] ] in the second use of definition  [ defn.hol.interpret.terms ] above , note that @xmath471o$ ] is never of the form @xmath608\\alpha { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$$}}}$ ] for any @xmath27 .    _",
    "_ the case of @xmath661.__we use lemma  [ lemm.fv.hol.denot ] and routine calculations on truth - values .",
    "we are now ready to prove completeness ( theorem  [ thrm.pnl.hol.complete ] ) of the translation from definition  [ defn.translation ] .",
    "the proof is subtle ; notably lemma  [ lemm.rho.varrho ] and the case of @xmath291 in lemma  [ lemm.commuting.square ] are non - trivial .",
    "some mathematical action also takes place in lemma  [ lemm.abs.conc.pi ] and the case of @xmath267 in lemma  [ lemm.commuting.square ] .",
    "we need a few technical observations about how renamings interact with the denotations of hol propositions :    [ lemm.equivar.to.triv ] suppose @xmath662",
    ". then for every @xmath6 , @xmath663 implies @xmath664 .    from equivariance and the fact that @xmath665 in @xmath463 .",
    "[ corr.unren.prop ] suppose @xmath666",
    ". then @xmath667 .",
    "write @xmath668 for the valuation mapping @xmath57 to @xmath669 .",
    "[ lemm.rho.varrho ] suppose @xmath204 is a hol proposition .",
    "then    @xmath670 for every @xmath6 and @xmath589 , and    as a corollary , if @xmath590 and @xmath671 then @xmath672)={{\\llbracket \\xi \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(\\varrho[x{{{:}{:}{=}}}\\rho{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x])$ ] .",
    "we work by induction on @xmath204 . for each @xmath204",
    "the corollary follows from the first part using a freshening pair of renamings ( see definition  [ defn.freshening.pair ] ) . for the first part ,",
    "the case of @xmath673 is by corollary  [ corr.unren.prop ] .",
    "the case of @xmath0 follows using the second part and some routine calculations .",
    "the cases of @xmath181 and @xmath174 are immediate .",
    "lemma  [ lemm.rho.varrho ] expresses that @xmath674 does not examine atoms for inequality across its arguments ( if it did then lemma  [ lemm.rho.varrho ] could not hold , because @xmath6 can identify atoms  make them become equal  in the denotations of variables in @xmath204 ) .",
    "the corollary is even more powerful : we can even apply renamings to the denotations of individual free variables , and still not affect validity .",
    "we use this in the case of @xmath291 in lemma  [ lemm.commuting.square ] to ` jettison ' unwanted @xmath6 in the denotation of the quantified variable .",
    "[ nttn.d ] suppose @xmath675 $ ] is a finite list of distinct atoms in @xmath676 , ",
    ", @xmath677 respectively .",
    "suppose @xmath275 is a pnl term .",
    "then :    write @xmath678r$ ] for the pnl term @xmath679\\ldots[d_n]r$ ] .    write @xmath680\\alpha$ ] for the pnl sort @xmath681\\ldots[\\mathbb a_{\\nu_n}]\\alpha$ ] .",
    "[ defn.epsilond ] given a finite list of distinct atoms @xmath215 , map a pnl valuation @xmath538 to a hol valuation @xmath682 defined by    d ( )    l@l x : & [ d_](x ) _ ^ + a : & aa _    [ lemm.always.id ]",
    "suppose @xmath261 .",
    "then @xmath683 for some @xmath684 .",
    "is _ not _ equal to @xmath505 for any @xmath6 that is non - injective on @xmath348 . ]    by a routine induction on definition  [ defn.hol.interpret.terms ] using definition  [ defn.epsilond ] for the case that @xmath165 is a variable @xmath57 .",
    "compare lemma  [ lemm.abs.conc.pi ] with lemma  [ lemm.hol.pi ] :    [ lemm.abs.conc.pi ] if @xmath685 then @xmath686x)\\pi{{\\cdot}}d ' = { { \\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}\\pi{{\\cdot}}x$ ] .    from definition  [ defn.hol.interpret.terms ] and rule  2 of definition  [ defn.free.ren ] .",
    "lemma  [ lemm.commuting.square ] proves that the schematic diagram of remark  [ rmrk.outline ] does indeed commute :    [ lemm.commuting.square ] suppose @xmath275 and @xmath687 .",
    "then :    if @xmath261 then @xmath688 .    if @xmath262 then @xmath689 .    by inductions on @xmath165 and @xmath166 .",
    "_ _ the case @xmath267.__we reason as follows , where @xmath690 and @xmath691 :     _ ^(d ( ) ) = & x_^(d ( ) ) & + = & d()(x)d _ & + = & ( [ d_](x))d _ & + = & ( x ) & ,  ( ( x ) ) s + = & x _ ^ ( ) &    note of the penultimate step that by assumption @xmath261 , so by definition  [ defn.capture.typing ] @xmath692 .    _ _ the case @xmath100r$].__we reason as follows :     _ ^(d ( ) ) = & _ ^(d ( ) ) & + = & [ a]x & ,  a , + & & x = _ ^(d()[a::=a ] ) + = & [ a]x & = + = & [ a]r _ ^ ( ) & + = & r _ ^ ( ) &    _ _ the case @xmath693.__we reason as follows :     _ ^(d ( ) ) = & _ ( r ^ ) _",
    "^(d ( ) ) & + = & g_p^ ( _ ^(d ( ) ) ) & + = & g_p^(r _ ^ ( ) ) & + = & ( ^)(r _ ^ ( ) ) & + = & p^(r _ ^ ( ) ) & + = & ( r ) _ ^ ( ) &    _ _ the case @xmath291.__write @xmath690 and @xmath691 . from definition  [ defn.hol.interpret.terms ]",
    "@xmath694)\\mid x\\in{{\\llbracket { { \\lfloor } [ \\mathbb a_{{d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}}]\\alpha { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$$ } } } \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}\\}\\ ] ] by construction in definition  [ defn.hol.interpretation ] every @xmath695\\alpha { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$$ } } } \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}$ ] has the form @xmath696 for @xmath697{{\\llbracket \\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}}$ ] . by lemma  [ lemm.rho.varrho ]",
    "we have @xmath698)\\mid x\\in{{\\llbracket { { \\lfloor }",
    "[ \\mathbb a_{{d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}}]\\alpha { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$$ } } } \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}\\ }   \\\\ = { \\mathit{min}}\\{{{\\llbracket { { \\lfloor } \\phi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(d(\\varsigma)[x{{{:}{:}{=}}}{{\\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x'])\\mid x'\\in{{\\llbracket [ \\mathbb a_{{d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}}]\\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}}\\ }   \\end{gathered}\\ ] ] using lemma  [ lemm.rho.varrho ] again we assume without loss of generality that @xmath699x')\\subseteq{{\\mathit{pmss}}}(x)\\setminus{d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}$ ] , and so : @xmath700x'])\\mid x'\\in{{\\llbracket [ \\mathbb a_{{d_{\\hspace{-.15ex}\\scalebox{.6}{$x$}}}}]\\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}}\\ }    \\\\ = { \\mathit{min}}\\{{{\\llbracket { { \\lfloor } \\phi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(d(\\varsigma)[x{{{:}{:}{=}}}{{\\mathit{id}}}{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}x''])\\mid x''\\in{{\\llbracket \\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}},\\ { { \\mathit{supp}}}(x''){\\subseteq}{{\\mathit{pmss}}}(x)\\ }   \\end{gathered}\\ ] ] now we unfold definitions and use the inductive hypothesis that @xmath701x'']=d(\\varsigma[x{{{:}{:}{=}}}x''])$ ] , and we obtain : @xmath702x''])\\mid x''\\in{{\\llbracket \\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}},\\ { { \\mathit{supp}}}(x''){\\subseteq}{{\\mathit{pmss}}}(x)\\ }    \\\\ & = { \\mathit{min}}\\{{{\\llbracket { { \\lfloor } \\phi { \\rfloor}^{\\hspace{-.1ex}\\scalebox{.4}{$d$ } } } \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal h$}}}}(d(\\varsigma[x{{{:}{:}{=}}}x'']))\\mid x''\\in{{\\llbracket \\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}},\\ { { \\mathit{supp}}}(x''){\\subseteq}{{\\mathit{pmss}}}(x)\\ }    \\\\ & = { \\mathit{min}}\\{{{\\llbracket \\phi \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}}(\\varsigma[x{{{:}{:}{=}}}x''])\\mid x''\\in{{\\llbracket \\alpha",
    "\\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}},\\ { { \\mathit{supp}}}(x''){\\subseteq}{{\\mathit{pmss}}}(x)\\ }    \\\\ & = { { \\llbracket { \\forall x.}\\phi \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.4}{$\\mathcal i$}}}}(\\varsigma ) \\end{array}\\ ] ]    [ corr.notsubseteq ] suppose @xmath703 and @xmath704 and @xmath308 , and @xmath263 ( definition  [ defn.capture.typing ] ) .",
    "suppose @xmath526 is a pnl interpretation and suppose @xmath705 is not valid in @xmath526 .",
    "then @xmath568 from definition  [ defn.hol.interpretation ] is a hol interpretation and @xmath706 is not valid in @xmath568 .",
    "suppose @xmath538 is such that @xmath707 and @xmath708 .",
    "we use lemma  [ lemm.commuting.square ] for @xmath682 ( definition  [ defn.epsilond ] ) .",
    "[ thrm.pnl.hol.complete ] suppose @xmath308 and @xmath263 . if @xmath160 then @xmath317 .",
    "we use the contrapositive of completeness of restricted pnl ( theorem  [ thrm.reduced.pnl.completeness ] ) , then corollary  [ corr.notsubseteq ] , then the contrapositive of hol soundness ( theorem  [ thrm.hol.soundness ] ) .",
    "we have translated a logic with its own proof - theory , syntax , and sound and complete semantics . any formal theory specified in the pnl fragment of this paper",
    "can be systematically , soundly , and completely translated to hol .    for the reader interested in nominal techniques ,",
    "the main contribution of this paper is that in proving completeness of the translation , we have given another semantics of permissive nominal logic , besides the ` obvious ' one in nominal sets . in this new semantics , a term of the form @xmath100t$ ]",
    "is interpreted as a function , like @xmath709 would be in higher - order logic .",
    "this shows at the semantic level an implicit similarity between pnl and hol ( we discuss presheaves in the next subsection ) .    for the reader interested in higher - order logic ,",
    "this paper is of interest because its image is readily identified with the _ higher - order patterns _ developed by miller @xcite ( so that , intuitively , restricted pnl could be thought of as a compact first - order logic and nominal semantics for higher - order patterns ) . in this",
    "semantics the sort @xmath710\\alpha$ ] is not interpreted as the set of all functions from atoms to the interpretation of @xmath27 , but as a small subset of this function space .",
    "this is an old idea : since henkin , models of hol have been constructed to cut down on the full function - space ( e.g. to create a complete semantics ( * ? ? ?",
    "* section  55 ) ) . moreover in weak",
    "hoas to avoid so - called _ exotic terms _ , function existence axioms must be weakened in hol : for instance , the description axiom that entails the existence of a function for all functional relations has to be dropped ( an alternative is to introduce an explicit modality @xcite ) .",
    "we now have a new view of these ` smaller ' function - spaces as being the image of nominal atoms - abstractions via the semantic operations considered in this paper .",
    "permissive - nominal logic is the endpoint  so far  of an evolution as follows :    fraenkel - mostowski set theory and a first - order axiomatisation by pitts introduced and described the underlying nominal sets models in first - order logic @xcite .",
    "nominal terms introduced a dedicated syntax with two - levels of variable and freshness side - conditions @xcite .",
    "nominal algebra and @xmath27prolog inserted nominal terms syntax into formal reasoning systems @xcite .",
    "permissive - nominal terms introduced permission sets @xcite .    pnl introduced a proof - theory and universal quantifier for nominal terms unknowns @xcite .",
    "meanwhile in the semantics    nominal renaming sets extended nominal sets from a permutation action to a renaming action @xcite .",
    "a permissive version of nominal algebra ( an equality fragment of pnl ) was given semantics in @xmath38 and theories were translated from hol @xcite , but this was done purely syntactically without using nominal renaming sets and without considering universal quantification .    the categories @xmath38 and @xmath39 from definition  [ defn.fps ] are identical to the categories of nominal sets and nominal renaming sets from @xcite and @xcite , except that here we insist on supporting _",
    "sets instead of supporting _ finite _ sets",
    ".    the reader familiar with presheaf techniques will see in @xmath39 the category @xmath711 ( presheaves over the category of finite sets and functions between them ) .",
    "@xmath39 corresponds to presheaves ( not quite over @xmath712 , as discussed in the previous paragraph ) that preserve pullbacks of pairs of monos @xcite and because of this it admits an arguably preferable sets - based presentation .",
    "( in the same sense , @xmath38 corresponds to @xmath713 . )    if for the sake of argument we set aside the issues of finiteness and preserving pullbacks of monos , then this paper can be summed up as follows : pnl , and thus nominal terms , can be given a semantics in something that looks like @xmath711 .",
    "this semantics is functional in that atoms - abstractions in @xmath711 can be naturally identified with total functions , though not all of them , which is good .",
    "hol can also be given a semantics in something that looks like @xmath711 , and in such a way that it overlaps with the semantics of pnl , as described in definition  [ defn.hol.interpret.terms ] and  [ lemm.commuting.square ] .",
    "we describe and exploit that overlap , in this paper .",
    "@xmath39 from definition  [ defn.fps ] is related to the category of ( finitely - supported ) nominal renaming sets from @xcite . here , the difference that @xmath343 need not have finite support is significant because it is impossible with a finite renaming to rename @xmath348 to be entirely disjoint for some other permission set @xmath60 .",
    "the definitions and proofs in subsection  [ subsect.exp ] are delicately revised with respect to those in ( * ? ? ?",
    "* section  3 ) .",
    "thus this paper contributes to the use of non - finitely - supported objects in nominal techniques , building on @xcite and also on cheney s and the second author s considerations of infinitely supported permutation sets @xcite .",
    "a similar construction as in subsection  [ subsect.free.ext ] has been considered , also in the context of names , though tersely , in fiore and turi s paper on the semantics of name and value passing @xcite .",
    "the reader can compare for example the final two paragraphs of subsection  1.3 in @xcite with definition  [ defn.free.ren ] from subsection  [ subsect.free.ext ] .",
    "fiore and turi want substitutions to model bisimulation in the presence of name - generation and message - passing ; we want renamings to model function application on names .",
    "the underlying technical demands overlap and are similar .",
    "fiore and turi s framework includes the possibility of arbitrary substitutions for atoms ( not just what we call renamings : substitution of atoms for atoms ) .",
    "this was apparent in @xcite and is developed greatly in subsequent work by fiore and hur @xcite .",
    "we hypothesise that from the point of view of pnl , their logic and semantics correspond to pnl enriched with substitution actions like those in @xcite , but this remains to be checked .",
    "levy and villaret translated nominal unification problems to higher - order unification problems @xcite .",
    "a similar but more detailed analysis , translating solutions and introducing the same notion of capturable atoms as used in the capture typings in this paper , appears in the paper which introduced permissive nominal terms @xcite .",
    "see also a journal version of levy and villaret s paper @xcite , which expanded on their previous work by eliminating freshness contexts ( in a similar spirit to pnl , we feel , though the details are different ) .",
    "this paper can be viewed as a very considerable extension , refinement , and generalisation of these works : this paper is their grandchild , so to speak , via two other papers @xcite .",
    "the extension of nominal sets to nominal renaming sets is free .",
    "this is touched on in lemma  [ lemm.non-iso ] when we note that @xmath321{\\raisebox{0.3ex}{\\scalebox{.5}{$\\hspace{1pt}\\bullet$}}}(a , b)$ ] and @xmath714 are distinct elements in @xmath715 in @xmath39 ; this happens because the free construction ` suspends the non - injectivity ' of @xmath321 $ ] on @xmath716 .",
    "this is as things should be , in order to obtain completeness .",
    "the second author has considered a more radical non - free construction @xcite , which has the effect of extending atoms - abstraction to a total function and in which @xmath321{{\\cdot}}x$ ] really does identify @xmath18 with @xmath31 in @xmath23 in a suitable sense .",
    "as we have emphasised , we translate a fragment of pnl to hol . in @xcite",
    "we considered full pnl with _ equivariance _ , which corresponds to strengthening the axiom rule @xmath717 in figure  [ rseq ] from @xmath718 to @xmath719 as illustrated in figure  [ seq ] .",
    "this internalises the equivariance assumed in definition  [ defn.interpret.i ] and allows us to derive e.g. @xmath720 .    in the journal version @xcite of @xcite",
    "we strengthen pnl further by allowing a _ shift_-permutation .",
    "this is a non - finitely - supported bijection on @xmath85 similar to a _ de bruijn shift function _",
    "@xmath721 ( * ? ? ?",
    "* subsection  2.2 ) .",
    "its effect in this paper is to make all permission sets isomorphic up to bijection ( e.g. @xmath722 for some @xmath42 , where @xmath723 ) and this deals with a subtle restriction in the power of universal quantification discussed for instance in ( * ? ? ?",
    "* example  2.29 ) .",
    "briefly , _ shift _ lets us derive @xmath724 where @xmath725 and @xmath726 where @xmath723 , which was not possible in the pnl from @xcite .",
    "neither equivariance nor _ shift _ are translated to hol in this paper ; more on this in the next subsection .",
    "we have translated permissive - nominal logic to higher - order logic .",
    "the translation is not surjective : all variables are at most second - order ; all constants are at most third - order ; higher types are not used ; and in fact all terms in the image of the translation are _",
    "@xmath1-patterns _ @xcite .",
    "in addition , the translation is not total : we have dropped equivariance .",
    "this is with good reason .",
    "we have not been able to simulate equivariance in hol  not without ` cheating ' by simply adding it ( and causing a blowup in the size of propositions ) .",
    "we have not proved this impossible , but we hypothesise that it can not be done .",
    "we further hypothesise ( based on preliminary calculations not included in this paper ) that hol augmented with the @xmath727-quantifier from @xcite would allow us to express equivariance .",
    "it is not currently clear how to extend hol with a _",
    "shift_-like permutation as discussed in @xcite .",
    "this seems reasonable since @xmath728 would correspond to an infinite renaming .",
    "some natural theories in pnl might correspond to other fragments of hol .",
    "notably , it is not known what relation exists between hol and pnl with the theory of atoms - substitution from @xcite .",
    "accl91    martn abadi , luca cardelli , pierre - louis curien , and jean - jacques lvy .",
    "explicit substitutions .",
    ", 1(4):375416 , 1991 .",
    "peter  b. andrews . .",
    "academic press , 1986 .",
    "christoph benzmller , chad  e. brown , and michael kohlhase .",
    "higher - order semantics and extensionality .",
    ", 69:10271088 , 2004 .",
    "james cheney .",
    "completeness and herbrand theorems for nominal logic .",
    ", 71:299320 , 2006 .",
    "alonzo church . a formulation of the simple theory of types .",
    ", pages 5668 , 1940 .",
    "james cheney and christian urban .",
    "alpha - prolog : a logic programming language with names , binding and alpha - equivalence . in bart demoen and vladimir lifschitz , editors ,",
    "_ proceedings of the 20th international conference on logic programming ( iclp 2004 ) _ , number 3132 in lecture notes in computer science , pages 269283 .",
    "springer , 2004 .",
    "james cheney and christian urban .",
    "nominal logic programming .",
    ", 30(5):147 , 2008 .",
    "gilles dowek and murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#pernl-cv[permissive nominal logic ] . in",
    "proceedings of the 12th international acm sigplan symposium on principles and practice of declarative programming ( ppdp 2010 ) _ , pages 165176 , 2010 .",
    "gilles dowek and murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#pernl-jv[permissive nominal logic ( journal version ) ] . , 2011",
    ". in press .",
    "gilles dowek , murdoch  j. gabbay , and dominic  p. mulligan .",
    "http://www.gabbay.org.uk/papers.html#perntu[permissive nominal terms and their unification ] . in _ proceedings of the 24th italian conference on computational logic ( cilc09 )",
    "_ , 2009 .",
    "gilles dowek , murdoch  j. gabbay , and dominic  p. mulligan .",
    "http://www.gabbay.org.uk/papers.html#perntu-jv[permissive nominal terms and their unification : an infinite , co - infinite approach to nominal techniques ( journal version ) ] .",
    ", 18(6):769822 , 2010 .",
    "jolle despeyroux and andr hirschowitz .",
    "higher - order abstract syntax with induction in coq . in _ lpar94 _ ,",
    "volume 822 of _ lecture notes in computer science _ , pages 159173 .",
    "springer , 1994 .",
    "gilles dowek , thrse hardin , and claude kirchner .",
    "theorem proving modulo .",
    "rapport de recherche 3400 , institut national de recherche en informatique et en automatique , april 1998 .",
    "jolle despeyroux , frank pfenning , and carsten schrmann .",
    "primitive recursion for higher - order abstract syntax . , 266(1 - 2):157 , september 2001 .",
    "william  m. farmer .",
    "the seven virtues of simple type theory . , 3(6):267286 , 2008 .",
    "maribel fernndez and murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#nomr-jv[nominal rewriting ( journal version ) ] . ,",
    "205(6):917965 , june 2007 .",
    "marcelo fiore and chung - kil hur .",
    "second - order equational logic . in _ proceedings of the 19th eacsl annual conference on computer science logic ( csl 2010 ) _ , lecture notes in computer science , 2010 .",
    "marcelo fiore and daniele turi .",
    "semantics of name and value passing . in _ proceedings of the 16th ieee symposium on logic in computer science ( lics 2001 ) _",
    ", pages 93104 .",
    "ieee computer society press , 2001 .",
    "murdoch  j. gabbay .",
    "general mathematics of names ] . , 205(7):9821011 , july 2007 .",
    "murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#stusun[a study of substitution , using nominal techniques and fraenkel - mostowski sets ] .",
    ", 410(12 - 13):11591189 , march 2009 .",
    "murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#fountl[foundations of nominal techniques : logic and semantics of variables in abstract syntax ] .",
    ", 17(2):161229 , 2011 .    murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#nomtnl[nominal terms and nominal logics : from foundations to meta - mathematics ] . in _ handbook of philosophical logic _ , volume  17 .",
    "kluwer , 2012 .",
    "murdoch  j. gabbay and martin hofmann .",
    "http://www.gabbay.org.uk/papers.html#rens[nominal renaming sets ] . in _ proceedings of the 15th international conference on logic for programming , artificial intelligence , and reasoning ( lpar 2008 )",
    "_ , pages 158173 .",
    "springer , november 2008 .",
    "murdoch  j. gabbay and aad mathijssen .",
    "http://www.gabbay.org.uk/papers.html#capasn[capture-avoiding substitution as a nominal algebra ] . in _",
    "ictac 2006 : theoretical aspects of computing _ ,",
    "volume 4281 of _ lecture notes in computer science _ , pages 198212 , november 2006 .",
    "murdoch  j. gabbay and aad mathijssen .",
    "http://www.gabbay.org.uk/papers.html#noma-nwpt[nominal algebra ] . in _",
    "18th nordic workshop on programming theory _",
    ", october 2006 .",
    "murdoch  j. gabbay and aad mathijssen .",
    "http://www.gabbay.org.uk/papers.html#oneaah[one-and-a-halfth-order logic ] . in _ proceedings of the 8th acm - sigplan international symposium on principles and practice of declarative programming ( ppdp 2006 ) _ , pages 189200 .",
    "acm , july 2006 .",
    "murdoch  j. gabbay and aad mathijssen .",
    "http://www.gabbay.org.uk/papers.html#forcie[a formal calculus for informal equality with binding ] . in",
    "wollic07 : 14th workshop on logic , language , information and computation _ , volume 4576 of _ lecture notes in computer science _ , pages 162176 .",
    "springer , july 2007 .",
    "murdoch  j. gabbay and aad mathijssen .",
    "http://www.gabbay.org.uk/papers.html#capasn-jv[capture-avoiding substitution as a nominal algebra ] .",
    ", 20(4 - 5):451479 , june 2008 .",
    "murdoch  j. gabbay and aad mathijssen .",
    "http://www.gabbay.org.uk/papers.html#nomuae[nominal universal algebra : equational logic with names and binding ] .",
    ", 19(6):14551508 , december 2009 .",
    "murdoch  j. gabbay and dominic  p. mulligan .",
    "http://www.gabbay.org.uk/papers/unialt.pdf[universal algebra over lambda - terms and nominal terms : the connection in logic between nominal techniques and higher - order variables ] . in _ proceedings of the 4th international workshop on logical frameworks and meta - languages ( lfmtp 2009 ) _ , pages 6473",
    "acm , august 2009 .",
    "murdoch  j. gabbay and aad mathijssen .",
    "nominal axiomatisation of the lambda - calculus ] . , 20(2):501531 , april 2010 .",
    "murdoch  j. gabbay and andrew  m. pitts .",
    "new approach to abstract syntax with variable binding ] .",
    ", 13(35):341363 , july 2001 .",
    "j.  roger hindley and jonathan  p. seldin . .",
    "cambridge university press , 2nd edition , 2008 .",
    "jordi levy and mateu villaret .",
    "nominal unification from a higher - order perspective . in _ rewriting techniques and applications , proceedings of rta 2008 _ , volume 5117 of _ lecture notes in computer science_. springer , 2008 .    jordi levy and mateu villaret .",
    "nominal unification from a higher - order perspective .",
    ", 13 , 2011 .",
    "dale miller . a logic programming language with lambda - abstraction , function variables , and simple unification .",
    ", 1(4):497  536 , 1991 .",
    "dale miller .",
    "logic , higher order . in stuart shapiro , editor , _ encyclopedia of artificial intelligence ( second edition)_. wiley , 1992 .",
    "available online from the author s webpage .",
    "richard mayr and tobias nipkow .",
    "higher - order rewrite systems and their confluence .",
    ", 192:329 , 1998 .    dale miller and alwen tiu . a proof theory for generic judgments ( extended abstract ) . in _ proceedings of the 18th ieee symposium on logic in computer science ( lics 2003 ) _ , pages 118127 .",
    "ieee computer society press , 2003 .",
    "frank pfenning and conal elliott .",
    "higher - order abstract syntax . in _",
    "pldi ( programming language design and implementation ) _ , pages 199208 .",
    "acm press , 1988 .    andrew  m. pitts .",
    "nominal logic , a first order theory of names and binding .",
    ", 186(2):165193 , 2003 .",
    "christian urban , andrew  m. pitts , and murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#nomu-jv[nominal unification ] . , 323(13):473497 , september 2004 .",
    "[ defn.pnl.ment ] suppose @xmath526 is a non - equivariant interpretation of a signature @xmath63 ( definition  [ defn.interpret.i ] ) .",
    "call the proposition @xmath166 * valid * in @xmath729 when @xmath730 for all @xmath538 .",
    "fix some interpretation @xmath526 .",
    "we work by induction on derivations .",
    "the case of @xmath737 uses lemma  [ lemm.denotsub ] .",
    "the case of @xmath314 uses lemma  [ lemm.fv.denot ] .",
    "other rules are routine by unpacking definitions .",
    "if the interpretation @xmath526 is fully equivariant then it can further be proved that @xmath738 always , so that @xmath162 is valid . if @xmath526 is not fully equivariant , then just @xmath717 is valid .      the proof for full pnl is in ( * ? ? ?",
    "* section  7 ) or ( * ? ? ?",
    "* subsection  11.2 ) ; the derivation rules are almost exactly those of first - order logic , and so is the proof of cut - elimination .",
    "the argument for restricted pnl is identical ; we note that none of the cut - eliminating transformations add @xmath42 to axiom rules unless they are already there , so the same reductions on derivations work also for the restricted system .      in @xcite",
    "we prove completeness of full pnl with respect to equivariant models , by means of a herbrand construction ( a model built out of syntax ) .",
    "we can leverage this result to concisely prove completeness of restricted pnl with respect to non - equivariant models , without having to repeat the model constructions .",
    "define a translation @xmath754 from pnl propositions in the signature @xmath63 to pnl propositions in the signature @xmath741 by mapping @xmath693 to @xmath755 and extending this in the natural way to all predicates .        by cut - elimination of restricted pnl ( theorem  [ thrm.rpnl.cut ] ) if a derivation of @xmath157 exists then a cut - free derivation exists .",
    "we now examine the derivation rules in figure  [ rseq ] and the definition of free atoms in definition  [ defn.fa ] and note that the rules @xmath758 , @xmath759 , @xmath737 , and @xmath314 do not increase the free atoms moving from below the line to above the line . and @xmath737 can increase the free _ unknowns_but not the free atoms . ]          using cut - elimination of full pnl ( theorem  [ thrm.rpnl.cut ] ) assume a cut - free pnl derivation @xmath105 of @xmath762 . because of lemma  [ lemm.fa.restrict ] , the condition on free atoms holds of every sequent in @xmath105 . because of the form of the derivation rules in figure  [ seq ] , @xmath105 can not instantiate @xmath751 .",
    "the only non - trivial thing to check is that valid instances of @xmath162 are transformed to valid instances of @xmath764 .",
    "suppose we deduce @xmath765 using @xmath162 . by assumption @xmath766 for some @xmath767 .",
    "it follows that @xmath768 ( recall from subsection  [ subsect.aeq ] that we quotient by @xmath27-equivalence ) and so by lemma  [ lemm.pi.r.fa ] that @xmath769 for all @xmath770 . by assumption @xmath771 and",
    "so by lemma  [ lemm.pi.r.fa ] @xmath772 , and we are done .",
    "we prove the contrapositive , that if @xmath160 then @xmath773 .",
    "suppose @xmath160 .",
    "using the constructions above we augment to a signature @xmath741 ( definition  [ defn.s.pi ] ) with some @xmath751 with @xmath774 .",
    "thus by proposition  [ prop.completeness.lemma ] @xmath775 .    by completeness of full pnl with respect to equivariant models ( ( * ? ? ?",
    "* theorem  3.45 ) , ( * ? ? ? * theorem  9.4.15 ) ) we have that @xmath776 .",
    "so there exists an equivariant model @xmath526 and valuation @xmath538 to @xmath526 such that @xmath777 and @xmath778 .",
    "it is now routine to convert @xmath526 into a non - equivariant model of the original signature @xmath63 by taking @xmath779 ."
  ],
  "abstract_text": [
    "<S> permissive - nominal logic ( pnl ) extends first - order predicate logic with term - formers that can bind names in their arguments . </S>",
    "<S> it takes a semantics in ( permissive-)nominal sets . in pnl , </S>",
    "<S> the @xmath0-quantifier or @xmath1-binder are just term - formers satisfying axioms , and their denotation is functions on nominal atoms - abstraction .    </S>",
    "<S> then we have higher - order logic ( hol ) and its models in ordinary ( i.e. zermelo - fraenkel ) sets ; the denotation of @xmath0 or @xmath1 is functions on full or partial function spaces .    </S>",
    "<S> this raises the following question : how are these two models of binding connected ? </S>",
    "<S> what translation is possible between pnl and hol , and between nominal sets and functions ?    </S>",
    "<S> we exhibit a translation of pnl into hol , and from models of pnl to certain models of hol . </S>",
    "<S> it is natural , but also partial : we translate a restricted subsystem of full pnl to hol . </S>",
    "<S> the extra part which does not translate is the symmetry properties of nominal sets with respect to permutations . to use a little nominal jargon </S>",
    "<S> : we can translate names and binding , but not their nominal equivariance properties . </S>",
    "<S> this seems reasonable since hol  and ordinary sets  are not equivariant .    </S>",
    "<S> thus viewed through this translation , pnl and hol and their models do different things , but they enjoy non - trivial and rich subsystems which are isomorphic .    permissive - nominal logic , higher - order logic , nominal sets , nominal renaming sets , mathematical foundations of programming . </S>",
    "<S> + _ msc - class : _ </S>",
    "<S> 03b70 ( primary ) , 68q55 ( secondary ) + _ acm - class : _ f.3.0 ; f.3.2 </S>"
  ]
}