{
  "article_text": [
    "we study the impact of heavy - tailed traffic on the performance of scheduling policies in single - hop queueing networks .",
    "single - hop network models have been used extensively to capture the dynamics and scheduling decisions in real - world communication networks , such as wireless uplinks and downlinks , switches , wireless ad hoc networks , sensor networks , and call centers . in all these systems , one can not serve all queues simultaneously , e.g. , due to wireless interference constraints , giving rise to a scheduling problem .",
    "clearly , the overall performance of the network depends critically on the scheduling policy applied .",
    "the focus of this paper is on a well - studied class of scheduling policies , commonly refered to as max - weight policies .",
    "this class of policies was introduced in the seminal work of tassiulas and ephremides @xcite , and since then numerous studies have analyzed the performance of such policies in different settings , e.g. , see @xcite , and the references therein .",
    "a remarkable property of max - weight policies is their * throughput optimality * , i.e. , their ability to stabilize a queueing network whenever this is possible , without any information on the arriving traffic .",
    "moreover , it has been shown that policies from this class achieve low , or even optimal , average delay for specific network topologies , when the arriving traffic is light - tailed @xcite .",
    "however , the performance of max - weight scheduling in the presence of heavy - tailed traffic is not well understood .",
    "we are motivated to study networks with heavy - tailed traffic by significant evidence that traffic in real - world communication networks exhibits strong correlations and statistical similarity over different time scales .",
    "this observation was first made by leland _",
    "@xcite through analysis of ethernet traffic traces .",
    "subsequent empirical studies have documented this phenomenon in other networks , while accompanying theoretical studies have associated it with arrival processes that have heavy tails ; see @xcite for an overview .",
    "the impact of heavy tails has been analyzed extensively in the context of single or multi - server queues ; see the survey papers @xcite , and the references therein .",
    "however , the related work is rather limited in the context of queueing networks , e.g. , see the paper by borst _",
    "@xcite , which studies the `` generalized processor sharing '' policy .",
    "this paper aims to fill a gap in the literature , by analyzing the impact of heavy - tailed traffic on the performance of max - weight scheduling in single - hop queueing networks .",
    "in particular , we study the delay stability of traffic flows : a traffic flow is delay stable if its expected steady - state delay is finite , and delay unstable otherwise .",
    "our previous work @xcite gives some preliminary results in this direction , in a simple system with two parallel queues and a single server .",
    "the * main contributions * of this paper include : i ) in a single - hop queueing network under the max - weight scheduling policy , we show that any light - tailed flow that conflicts with a heavy - tailed flow is delay unstable ; ii ) surprisingly , we also show that for certain admissible arrival rates , a light - tailed flow can be delay unstable even if it does not conflict with heavy - tailed traffic ; iii ) we analyze the max - weight-@xmath0 scheduling policy , and show that if the @xmath0-parameters are chosen suitably , then the sum of the @xmath0-moments of the steady - state queue lengths is finite .",
    "we use this result to prove that by proper choice of the @xmath0-parameters , all light - tailed flows are delay stable .",
    "moreover , we show that max - weight-@xmath0 achieves the optimal scaling of higher moments of steady - state queue lengths with traffic intensity .",
    "the rest of the paper is organized as follows .",
    "section 2 contains a detailed presentation of the model that we analyze , namely , a single - hop queueing network .",
    "it also defines formally the notions of heavy - tailed and light - tailed traffic , and of delay stability . in section 3",
    "we motivate the subsequent development by presenting , informally and through simple examples , the main results of the paper . in section 4",
    "we analyze the performance of the celebrated max - weight scheduling policy .",
    "our general results are accompanied by examples , which illustrate their implications in practical network settings .",
    "section 5 contains the analysis of the parameterized max - weight-@xmath0 scheduling policy , and the performance that it achieves in terms of delay stability .",
    "this section also includes results about the scaling of moments of steady - state queue lengths with the traffic intensity and the size of the network , accompanied by several examples .",
    "we conclude with a discussion of our findings and future research directions in section 6 .",
    "the appendices contain some background material and most of the proofs of our results .",
    "we start with a detailed presentation of the queueing model considered in this paper , together with some necessary definitions and notation .",
    "we denote by @xmath1 , @xmath2 , and @xmath3 the sets of nonnegative reals , nonnegative integers , and positive integers , respectively .",
    "the cartesian products of @xmath4 copies of @xmath1 and @xmath2 are denoted by @xmath5 and @xmath6 , respectively .",
    "we assume that time is slotted and that arrivals occur at the end of each time slot .",
    "the topology of the network is captured by a directed graph @xmath7 , where @xmath8 is the set of nodes and @xmath9 is the set of ( directed ) edges .",
    "our model involves single - hop traffic flows : data arrives at the source node of an edge , for transmission to the node at the other end of the edge , where it exits the network .",
    "more formally , let @xmath10 be the number of traffic flows of the network . a * traffic flow * @xmath11 consists of a discrete time stochastic arrival process @xmath12 , a source node @xmath13 , and a destination node @xmath14 , with @xmath15 , and @xmath16 .",
    "we assume that each arrival process @xmath12 takes values in @xmath2 , and is independent and identically distributed ( iid ) over time .",
    "furthermore , the arrival processes associated with different traffic flows are mutually independent .",
    "we denote by @xmath17>0 $ ] the rate of traffic flow @xmath18 , and by @xmath19 the vector of the rates of all traffic flows .",
    "* definition 1 : ( heavy tails ) * a traffic flow @xmath18 is heavy - tailed if @xmath20=\\infty$ ] , and light - tailed otherwise .",
    "the traffic of flow @xmath18 is buffered in a dedicated queue at node @xmath13 ( queue @xmath18 , henceforth . )",
    "our modeling assumptions imply that the set of traffic flows can be identified with the set of edges and the set of queues of the network .",
    "the service discipline within each queue is assumed to be `` first come , first served . ''",
    "the stochastic process @xmath21 captures the evolution of the length of queue @xmath18 .",
    "since our motivation comes from communication networks , @xmath22 will be interpreted as the number of packets that queue @xmath18 receives at the end of time slot @xmath23 , and @xmath24 as the total number of packets in queue @xmath18 at the beginning of time slot @xmath23 .",
    "the arrivals and the lengths of the various queues at time slot @xmath23 are captured by the vectors @xmath25 and @xmath26 , respectively .    in the context of a communication network ,",
    "a batch of packets arriving to a queue at any given time slot can be viewed as a single entity , e.g. , as a file that needs to be transmitted .",
    "we define the * end - to - end delay of a file * of flow @xmath18 to be the number of time slots that the file spends in the network , starting from the time slot right after it arrives at @xmath13 , until the time slot that its last packet reaches @xmath14 . for @xmath27 , we denote by @xmath28 the end - to - end delay of the @xmath29 file of queue @xmath18 .",
    "the vector @xmath30 captures the end - to - end delay of the @xmath29 files of the different traffic flows .    in general ,",
    "not all edges can be activated simultaneously , e.g. , due to interference in wireless networks , or matching constraints in a switch .",
    "consequently , not all traffic flows can be served simultaneously .",
    "a set of traffic flows that can be served simultaneously is called a * feasible schedule*. we denote by @xmath31 the set of all feasible schedules , which is assumed to be an arbitrary subset of the powerset of @xmath32 . for simplicity , we assume that all attempted transmissions of data are successful , that all packets have the same size , and that the transmission rate along any edge is equal to one packet per time slot .",
    "we denote by @xmath33 the number of packets that are scheduled for transmission from queue @xmath18 at time slot @xmath23 .",
    "note that this is not necessarily equal to the number of packets that are transmitted because the queue may be empty .",
    "let us now define formally the notion of a * scheduling policy*. the past history and present state of the system at time slot @xmath34 is captured by the vector @xmath35 at time slot 0 , we have @xmath36 . a ( causal ) scheduling policy",
    "is a sequence @xmath37 of functions @xmath38 , used to determine scheduling decisions , according to @xmath39 .    using the notation above",
    ", the * dynamics * of queue @xmath18 take the form : @xmath40 for all @xmath41 , where @xmath42 denotes the indicator function of the event @xmath43 .",
    "the vector of initial queue lengths @xmath44 is assumed to be an arbitrary element of @xmath45 .",
    "we restrict our attention to scheduling policies that are * regenerative * , i.e. , policies under which the network starts afresh probabilistically in certain time slots .",
    "more precisely , under a regenerative policy there exists a sequence of stopping times @xmath46 with the folowing properties .",
    "i ) the sequence @xmath47 is iid .",
    "ii ) let @xmath48 , and consider the processes that describe the `` cycles '' of the network , namely , @xmath49 , and @xmath50 ; then , @xmath51 is an iid sequence , independent of @xmath52 .",
    "iii ) the ( lattice ) distribution of the cycle lengths , @xmath53 , has span equal to one and finite expectation .    properties ( i ) and ( ii ) imply that the queueing network evolves like a ( possibly delayed ) regenerative process .",
    "property ( iii ) states that this process is aperiodic and positive recurrent , which will be crucial for the stability of the network .",
    "the following definition gives the precise notion of stability that we use in this paper .",
    "* definition 2 : ( stability ) * the single - hop queueing network described above is stable under a specific scheduling policy , if the vector - valued sequences @xmath54 and @xmath55 converge in distribution , and their limiting distributions do not depend on the initial queue lengths @xmath44 .",
    "notice that our definition of stability is slightly different than the commonly used definition ( positive recurrence of the markov chain of queue lengths ) , since it includes the convergence of the sequence of file delays @xmath55 .",
    "the reason is that in this paper we study properties of the limiting distribution of @xmath55 and , naturally , we need to ensure that this limiting distribution exists .    under a stabilizing scheduling policy ,",
    "we denote by @xmath56 and @xmath57 the limiting distributions of @xmath54 and @xmath55 , respectively .",
    "the dependence of these limiting distributions on the scheduling policy has been suppressed from the notation , but will be clear from the context .",
    "we refer to @xmath58 as the steady - state length of queue @xmath18 .",
    "similarly , we refer to @xmath59 as the steady - state delay of a file of traffic flow @xmath18 .",
    "we note that under a regenerative policy ( if one exists ) , the queueing network is guaranteed to be stable .",
    "this is because the sequences of queue lengths and file delays are ( possibly delayed ) aperiodic and positive recurrent regenerative processes , and , hence , converge in distribution ; see @xcite .",
    "the stability of the queueing network depends on the rates of the various traffic flows relative to the transmission rates of the edges and the scheduling constraints .",
    "this relation is captured by the stability region of the network .",
    "* definition 3 : ( stability region ) * @xcite the stability region of the single - hop queueing network described above , denoted by @xmath60 , is the set of rate vectors : @xmath61    in other words , a rate vector @xmath62 belongs to @xmath60 if there exists a convex combination of feasible schedules that covers the rates of all traffic flows .",
    "if a rate vector is in the stability region of the network , then the traffic corresponding to this vector is called * admissible * , and there exists a scheduling policy under which the network is stable .",
    "* definition 4 : ( traffic intensity ) * the traffic intensity of a rate vector @xmath63 is a real number in [ 0,1 ) defined as : @xmath64    clearly , arriving traffic with rate vector @xmath62 is admissible if and only if @xmath65 .",
    "* throughout this paper we assume that the traffic is admissible*.    let us now define the property that we use to evaluate the performance of scheduling policies , namely , the delay stability of a traffic flow .",
    "* definition 5 : ( delay stability ) * a traffic flow @xmath18 is delay stable under a specific scheduling policy if the queueing network is stable under that policy and @xmath66<\\infty$ ] ; otherwise , the traffic flow @xmath18 is delay unstable .",
    "the following lemma relates the steady - state quantities @xmath67 $ ] and @xmath66 $ ] , and will help us prove delay stability results .",
    "* lemma 1 : * consider the single - hop queueing network described above under a regenerative scheduling policy . then , @xmath68<\\infty \\ \\longleftrightarrow \\",
    "e[d_f]<\\infty , \\qquad \\forall f \\in \\{1,\\ldots , f\\}. \\nonumber\\ ] ]    see appendix 1.1 .",
    "* theorem 1 : ( delay instability of heavy tails ) * consider the single - hop queueing network described above under a regenerative scheduling policy .",
    "every heavy - tailed traffic flow is delay unstable .",
    "( sketch ) the result follows easily from the pollaczek - khinchine formula for the expected delay in a @xmath69 queue , and a stochastic comparison argument .",
    "the main idea is that in a heavy - tailed traffic flow , the probability that a very big file arrives to the respective queue is relatively high .",
    "combined with the `` first come , first served '' discipline within the queue , this implies that a large number of files , arriving after the big one , experience very large delays . this is true even if the queue gets served whenever it is nonempty , namely , if the queue is given preemptive priority .",
    "consequently , under any scheduling policy , there is relatively high probability that a large number of files experiences very large delays .",
    "this then implies that a heavy - tailed traffic flow is delay unstable . for a formal proof see appendix 2 .",
    "since there is little we can do about the delay stability of heavy - tailed flows , we turn our attention to light - tailed traffic .",
    "the pollaczek - khinchine formula for the expected delay in a @xmath69 queue implies that the intrinsic burstiness of light - tailed traffic is not sufficient to cause delay instability",
    ". however , scheduling in a queueing network couples the statistics of different traffic flows .",
    "we will see that this coupling can cause light - tailed flows to become delay unstable , giving rise to a form of * propagation of delay instability*.",
    "in this section we introduce , informally and through simple examples , the main results of the paper and the basic intuition behind them .",
    "let us start with the queueing system of figure 1 , which consists of two parallel queues and a single server .",
    "traffic flow 1 is assumed to be heavy - tailed , whereas traffic flow 2 is light - tailed .",
    "service is allocated according to the max - weight scheduling policy , which is equivalent to `` serve the longest queue '' in this simple setting .",
    "theorem 1 implies that traffic flow 1 is delay unstable .",
    "our findings imply that * traffic flow 2 is also delay unstable , even though it is light - tailed*. the intuition behind this result is that queue 1 is occasionally very long ( infinite , in steady - state expectation ) because of its heavy - tailed arrivals .",
    "when this happens , and under the max - weight policy , queue 2 has to build up to a similar length in order to receive service .",
    "a very long queue then implies very large delays for the files of that queue under `` first come , first served , '' which leads to delay instability .",
    "systems of parallel queues have been analyzed extensively in the literature .",
    "one of the main reasons is that their simple dynamics often lead to elegant analysis and clean results .",
    "however , real - world communication networks are much more complex . in this paper",
    "we go beyond parallel queues and analyze queueing networks with more complicated structure .",
    "a simple example is the queueing network of figure 2 , where traffic flow 1 is assumed to be heavy - tailed , whereas traffic flows 2 and 3 are light - tailed .",
    "the server can serve either queue 1 alone , or queues 2 and 3 simultaneously .",
    "this example could represent a wireless network with interference constraints . in this setting the max - weight policy",
    "compares the length of queue 1 to the sum of the lengths of queues 2 and 3 , and serves the `` heavier '' schedule .",
    "the intuition from the previous example suggests that at least one of the queues 2 and 3 has to build up to the order of magnitude of queue 1 , in order for these two queues to receive service . in other words",
    ", we expect that at least one of the traffic flows 2 and 3 will be delay unstable under max - weight .",
    "our findings imply that , in fact , * both traffic flows are delay unstable*. the main idea behind this result is the following : with positive probability , the arrival processes to queues 2 and 3 exhibit their `` average '' behavior . in that case",
    ", the corresponding queues build up slowly and together , which implies that when they claim the server they have both built up to the order of magnitude of queue 1 .",
    "the simple networks of figures 1 and 2 illustrate special cases of a general result : every light - tailed flow that conflicts with a heavy - tailed flow is delay unstable . for more details",
    "see theorem 2 in section 4.1 .",
    "going one step further , consider the queueing network of figure 3 .",
    "traffic flow 1 is assumed to be heavy - tailed , whereas traffic flows 2 and 3 are light - tailed .",
    "the server can serve either queues 1 and 2 simultaneously , or queue 3 alone . in this setting the max - weight policy",
    "compares the length of queue 3 to the sum of the lengths of queues 1 and 2 , and serves the `` heavier '' schedule .",
    "the intuition from the previous examples suggests that traffic flow 3 is delay unstable , but the real question is the delay stability of traffic flow 2 .",
    "one would expect that this flow is delay stable : it is light - tailed itself , and is served together with a heavy - tailed flow , which should result in more service opportunities under max - weight .",
    "surprisingly though , we show that * there exist arrival rates within the stability region of this network , such that traffic flow 2 is delay unstable*. the key observation here is that even though traffic flow 2 does not conflict with heavy - tailed traffic , it does conflict with traffic flow 3 , which is delay unstable because it conflicts with heavy - tailed traffic .",
    "for more details see propositions 1 , 3 , and 4 in sections 4.2 and 4.3 .",
    "the examples above suggest that in queueing networks with heavy - tailed traffic , delay instability not only appears but propagates through the network under the max - weight policy . seeking a remedy to this situation",
    ", we turn to the more general max - weight-@xmath0 scheduling policy . this policy assigns a positive @xmath0-parameter to each traffic flow , and instead of comparing the lengths of the queues / schedules , and serving the longest one , it compares the lengths of the queues to the respective @xmath0-powers .",
    "our findings imply that in the network of figure 1 , we can guarantee that * traffic flow 2 is delay stable , provided the @xmath0-parameter for traffic flow 1 is sufficiently small*. in other words , we prevent the propagation of delay instability .",
    "this is a special case of a general result : if the @xmath0-parameters of the max - weight-@xmath0 policy are chosen suitably , then the sum of the @xmath0-moments of the steady - state queue lengths is finite . for more details",
    "see theorem 3 in section 5.1 .",
    "in this section we evaluate the performance of the max - weight scheduling policy , with respect to the delay stability of traffic flows . informally speaking ,",
    "the `` weight '' of a feasible schedule is the sum of the lengths of all queues included in it .",
    "as its name suggests , the max - weight policy activates a feasible schedule with the maximum weight at any given time slot .",
    "more formally , under the max - weight policy , the scheduling vector @xmath70 belongs to the set : @xmath71    if this set includes multiple feasible schedules , then one of them is chosen uniformly at random .",
    "the following lemma states that the network is stable under the max - weight policy . essentially , this result is well - known , e.g. , for light - tailed traffic , see @xcite ; for more general arrivals , see @xcite .",
    "a subtle point is that in this paper we adopt a somewhat different definition for stability .",
    "so , we have to ensure that , apart from the sequences of queue lengths , the sequences of file delays converge as well .",
    "* lemma 2 : ( stability under max - weight ) * the single - hop queueing network described in section 2 is stable under the max - weight scheduling policy .",
    "consider the single - hop queueing network of section 2 under the max - weight scheduling policy .",
    "it can be verified that the sequence @xmath54 is a time - homogeneous , irreducible , and aperiodic markov chain on the countable state - space @xmath45 .",
    "proposition 2 of @xcite implies that this markov chain is also positive recurrent .",
    "hence , @xmath54 converges in distribution , and its limiting distribution does not depend on @xmath44 . based on this",
    ", it can be verified that the sequence @xmath55 is a ( possibly delayed ) aperiodic and positive recurrent regenerative process .",
    "therefore , it also converges in distribution , and its limiting distribution does not depend on @xmath44 ; see @xcite .",
    "in this section we state one of the main results of the paper , which generalizes our observations from the simple networks of figures 1 and 2 . before we give the result , though , let us define precisely the notion of conflict between traffic flows .",
    "* definition 6 : * the traffic flow @xmath18 conflicts with @xmath72 , and vice versa , if there exists no feasible schedule in @xmath31 that includes both @xmath18 and @xmath72 .    * theorem 2 : ( conflicting with heavy tails ) * consider the single - hop queueing network described in section 2 under the max - weight scheduling policy",
    ". every light - tailed flow that conflicts with a heavy - tailed flow is delay unstable .    ( sketch ) let @xmath73 and @xmath74 be a heavy - tailed and a light - tailed traffic flow , respectively , and suppose that @xmath74 conflicts with @xmath73 .",
    "queue @xmath73 is occasionally very long ( infinite , in steady - state expectation ) , due to the heavy - tailed nature of the traffic that it receives . in order for queue @xmath74",
    "to get served , the weight of at least one feasible schedule that includes @xmath74 has to build up to the order of magnitude of queue @xmath73 .",
    "however , with positive probability , the arrival processes of all feasible schedules that include @xmath74 exhibit their `` average '' behavior . in that case ,",
    "queue @xmath74 builds up at a roughly constant rate , for a time period of the order of magnitude of queue 1 . combined with lemma 1 , this implies that traffic flow @xmath74 is delay unstable . for a formal proof see appendix 3 .",
    "we emphasize the generality of this result .",
    "namely , a light - tailed flow that conflicts with heavy - tailed traffic is delay unstable , irrespective of : i ) its rate ; ii ) the tail asymptotics of its underlying distribution ; iii ) whether it is scheduled alone or with other traffic flows . hence , we view theorem 2 as capturing a `` universal phenomenon '' for the propagation of delay instability .",
    "so far we have shown that : i ) a heavy - tailed traffic flow is delay unstable under any regenerative scheduling policy ; and ii ) a light - tailed traffic flow that conflicts with a heavy - tailed flow is delay unstable under the max - weight scheduling policy .",
    "it seems reasonable , however , that a light - tailed flow that does not conflict with heavy - tailed traffic should be delay stable .",
    "unfortunately , this is not always the case .",
    "we demonstrate this by means of simple examples .",
    "let us come back to the queueing network of figure 3 . the feasible schedules of this network are @xmath75 and @xmath76 , and all queues are served at unit rate , whenever the respective schedules are activated .",
    "the rate vector @xmath77 is assumed admissible .",
    "the following proposition shows that traffic flow 2 is delay unstable if its rate is sufficiently high .",
    "* proposition 1 : ( concurring with heavy tails ) * consider the single - hop queueing network of figure 3 under the max - weight scheduling policy . if the arriving traffic is admissible and the rates satisfy @xmath78 , then traffic flow 2 is delay unstable .",
    "( sketch ) let us first give the intuition for the special case , where @xmath79 .",
    "consider sample paths for which a very large file arrives to queue 1 ; this is a relatively likely event , since traffic flow 1 is heavy - tailed .",
    "queue 3 will build up to the order of magnitude of the large file in queue 1 in order to receive service .",
    "starting from the time slot that the weights of the two schedules become equal , the max - weight policy will be draining the weights of the two schedules at the same rate .",
    "the period of time until they empty is of the order of magnitude of the large file in queue 1 .",
    "now assume that queue 2 stays small throughout this period .",
    "if the traffic flows 1 and 3 exhibit their `` average '' behavior , then each feasible schedule will be activated once every two time slots , since @xmath79 . however , if @xmath80 , queue 2 will build up to the order of magnitude of the large file in queue 1 , which is a contradiction .",
    "the intuition for the more general case is based on the following `` fluid argument '' : assume that the arrivals at each queue @xmath81 are a fluid with rate @xmath82 . the departures from queue @xmath18 during periods when all queues are nonempty are also assumed to be a fluid with rate @xmath83 .",
    "the max - weight policy has the property of draining the weights of the two feasible schedules at the same rate .",
    "hence , the departure rates are the solution to the following system of linear equations : @xmath84    the last two equations follow from the facts that max - weight is a work - conserving policy , and that queues 1 and 2 are served simultaneously .",
    "if the rate at which fluid arrives to queue 2 is greater than the rate at which it departs , i.e. , @xmath85 or , equivalently , @xmath86 then queue 2 builds up over long periods of time , which , combined with lemma 1 , implies the delay instability of flow 2 .",
    "a formal proof essentially shows that this fluid model is a faithful approximation of the actual stochastic system ( with nonvanishing probability ) , whenever queue 1 receives a large file ; see appendix 4 .",
    "proposition 1 , as well as propositions 3 and 4 of the next section , capture a `` rate - dependent phenomenon '' for the propagation of delay instability .",
    "we conjecture that a converse to proposition 1 also holds ; namely , that queue 2 is delay stable if the arriving traffic is admissible and @xmath87 .",
    "we illustrate the implications of the results presented so far in the context of specific network topologies , often used to model real - world communication networks .    * example 1 : ( parallel queues ) * consider the network of figure 4 , consisting of @xmath88 parallel queues and a single server .",
    "networks of parallel queues are often used to model wireless uplinks , downlinks , and call centers .",
    "traffic flow 1 is assumed to be heavy - tailed , whereas the other traffic flows are light - tailed .",
    "the scheduling constraints of parallel queues require that no two queues can be served simultaneously .",
    "the server is allocated according to the max - weight scheduling policy , which in this setting is equivalent to `` serve the longest queue . ''        * proposition 2 : * consider the system of parallel queues depicted in figure 4 , under the max - weight scheduling policy . if traffic flow 1 is heavy - tailed , then all traffic flows are delay unstable .",
    "the result follows easily from theorems 1 and 2 .",
    "* example 2 : ( input - queued switch ) * consider the @xmath89 input - queued switch depicted in figure 5 .",
    "input - queued switches are often used to model internet routers .",
    "traffic flow ( 1,1 ) is assumed to be heavy - tailed , whereas all other flows are light - tailed .",
    "the scheduling constraints of an input - queued switch require that every feasible schedule has to be a matching between the sets of input and output ports .",
    "thus , the feasible schedules of the network are @xmath90 and @xmath91 . in this",
    "setting the max - weight scheduling policy activates a matching with the maximum weight .",
    "* proposition 3 : * consider the @xmath89 input - queued switch depicted in figure 5 , under the max - weight scheduling policy . if traffic flow ( 1,1 ) is heavy - tailed , then traffic flows ( 1,1 ) , ( 1,2 ) , and ( 2,1 ) are all delay unstable . if , additionally , @xmath92 , then traffic flow ( 2,2 ) is also delay unstable .",
    "the first part of the result follows from theorems 1 and 2 . regarding the second part",
    ", we provide the calculations for the associated fluid model , which justify the particular threshold for @xmath93 : assume that the arrivals at each queue @xmath94 are a fluid with rate @xmath82 .",
    "the departures from queue @xmath18 during periods when all queues are nonempty are also assumed to be a fluid with rate @xmath83 .",
    "the max - weight policy has the property of draining the weights of the two feasible schedules at the same rate .",
    "hence , the departure rates are the solution to the following system of linear equations : @xmath95    the second equation is a consequence of the work - conserving nature of the max - weight policy .",
    "the last two equations follow from the facts that queue ( 1,1 ) is served simultaneously with queue ( 2,2 ) , and queue ( 1,2 ) is served simultaneously with queue ( 2,1 ) . if the rate at which fluid arrives to queue ( 2,2 ) is greater than the rate at which it departs , i.e. , if @xmath96 or , equivalently , if @xmath97 then queue ( 2,2 ) builds up over long periods of time , which , combined with lemma 1 , implies the delay instability of flow ( 2,2 ) . the proof that the stochastic model follows the fluid model is similar to the proof of proposition 1 and",
    "is omitted .",
    "* example 3 : ( wireless ring ) * consider the wireless ring network of figure 6 .",
    "the network consists of 6 nodes , each of which receives traffic that it transmits to its neighboring node in the clockwise direction .",
    "traffic flow 1 is assumed to be heavy - tailed , whereas all other flows are light - tailed .",
    "due to wireless interference , if a link of the network is activated , then the links within two - hop distance must be inactive ; this is the so - called two - hop interference model .",
    "thus , the feasible schedules of the network are @xmath98 , @xmath99 , and @xmath100 .",
    "* proposition 4 : * consider the wireless ring network depicted in figure 6 , under the max - weight scheduling policy . if traffic flow 1 is heavy - tailed , then traffic flows 1 , 2 , 3 , 5 , and 6 are all delay unstable .",
    "if , additionally , @xmath101 , then traffic flow 4 is also delay unstable .",
    "the first part of the result follows from theorems 1 and 2 . regarding the second part",
    ", we provide the analysis of the associated fluid model : assume that the arrivals at each queue @xmath102 are a fluid with rate @xmath82 .",
    "the departures from queue @xmath18 during periods when all queues are nonempty are also assumed to be a fluid with rate @xmath83 .",
    "the max - weight policy has the property of draining the weights of the three feasible schedules at the same rate .",
    "hence , the departure rates are the solution to the following system of linear equations : @xmath103    the third equation is a consequence of the work - conserving nature of the max - weight policy .",
    "the last three equations follow from the facts that queue 1 is served simultaneously with queue 4 , and similarly for queues 2 and 5 , and queues 3 and 6 . if the rate at which fluid arrives to queue 4 is greater than the rate at which it departs , i.e. , if @xmath104 or , equivalently , if @xmath105 then queue 4 builds up over long periods of time , which , combined with lemma 1 , implies the delay instability of flow 4 . a detailed proof is omitted for brevity .",
    "the results of the previous section suggest that max - weight scheduling performs poorly in the presence of heavy - tailed traffic .",
    "the reason is that by treating heavy - tailed and light - tailed flows equally , there are very long stretches of time during which heavy - tailed traffic dominates the service .",
    "this leads some light - tailed flows to experience very large delays and , eventually , to become delay unstable .",
    "intuitively , by discriminating against heavy - tailed flows one should be able to improve the overall performance of the network , namely to mitigate the propagation of delay instability .",
    "one way to do this is by giving preemptive priority to the light - tailed flows .",
    "however , priority - based scheduling policies are undesirable because of fairness considerations , and also because they can be unstable in many network settings , e.g. , see @xcite .",
    "instead , we focus on the max - weight-@xmath0 scheduling policy : given constants @xmath106 , for all @xmath11 , the scheduling vector @xmath70 belongs to the set : @xmath107    if this set includes multiple feasible schedules , one of them is chosen uniformly at random . by choosing smaller values of the @xmath0-parameters for heavy - tailed flows and larger values for light - tailed flows , we give a form of partial priority to light - tailed traffic .",
    "let us start with a preview of the * main result * of this section : if the @xmath0-parameters of the max - weight-@xmath0 policy are chosen such that @xmath108<\\infty$ ] , for all @xmath11 , then the network is stable and the steady - state queue lengths satisfy : @xmath109 < \\infty , \\qquad \\forall f \\in \\{1,\\ldots , f\\}. \\nonumber\\ ] ]    an earlier work by eryilmaz _",
    "_ has given a similar result for the case of parallel queues with a single server ; see theorem 1 of @xcite . in this paper",
    "we extend their result to a general single - hop network setting .",
    "moreover , we provide an explicit upper bound to the sum of the @xmath0-moments of the steady - state queue lengths . before we do that we need the following definition .    *",
    "definition 7 : ( covering number of feasible schedules ) * the covering number @xmath110 of the set of feasible schedules is defined as the smallest number @xmath111 for which there exist @xmath112 with @xmath113 .",
    "notice that the quantity @xmath110 is a structural property of the queueing network , and is not related to the scheduling policy or the statistics of the arriving traffic : it is the minimum number of time slots required to serve at least one packet from each flow .    * theorem 3 : ( max - weight-@xmath0 scheduling ) * consider the single - hop queueing network described in section 2 under the max - weight-@xmath0 scheduling policy .",
    "let the intensity of the arriving traffic be @xmath114 . if @xmath108<\\infty$ ] , for all @xmath11 , then the queueing network is stable and the steady - state queue lengths satisfy : @xmath115 \\leq \\sum_{f=1}^f h \\big ( \\rho , k^*,\\alpha_f , e[a_f^{\\alpha_f+1}(0 ) ] \\big ) , \\nonumber\\ ] ] where @xmath116 \\big ) = \\left\\ { \\begin{array}{ll } \\frac{2k^*}{1-\\rho } \\cdot \\big ( e[a_f^{\\alpha_f+1}(0)]+1 \\big ) , & \\alpha_f \\leq 1 , \\\\ \\big ( \\frac{2k^*}{1-\\rho } \\big)^{\\alpha_f } \\cdot k^{\\alpha_f }   + \\frac{2k^*}{1-\\rho } \\cdot k , & \\alpha_f > 1 , \\end{array } \\right .",
    "\\nonumber\\ ] ]    and @xmath117 + 1 \\big)$ ] .",
    "( sketch ) consider the single - hop queueing network of section 2 under the max - weight-@xmath0 scheduling policy .",
    "it can be verified that the sequence @xmath54 is a time - homogeneous , irreducible , and aperiodic markov chain on the countable state - space @xmath45 .",
    "the fact that this markov chain is also positive recurrent , and the related moment bound , are based on drift analysis of the lyapunov function @xmath118 and use of the foster - lyapunov stability criterion .",
    "this implies that @xmath54 converges in distribution , and its limiting distribution does not depend on @xmath44 .",
    "based on this , it can be verified that the sequence @xmath55 is a ( possibly delayed ) aperiodic and positive recurrent regenerative process .",
    "hence , it also converges in distribution , and its limiting distribution does not depend on @xmath44 . for a formal proof see appendix 5 .",
    "a first corollary of theorem 3 relates to the delay stability of light - tailed flows .",
    "* corollary 1 : ( delay stability under max - weight-@xmath0 ) * consider the single - hop queueing network described in section 2 under the max - weight-@xmath0 scheduling policy .",
    "if the @xmath0-parameters of all light - tailed flows are equal to 1 , and the @xmath0-parameters of heavy - tailed flows are sufficiently small , then all light - tailed flows are delay stable .    with the particular choice of @xmath0-parameters , theorem 3 guarantees that the expected steady - state queue length of all light - tailed flows is finite .",
    "lemma 1 relates this result to delay stability .    combining this with theorem 1",
    ", we conclude that when its @xmath0-parameters are chosen suitably , * the max - weight-@xmath0 policy delay - stabilizes a traffic flow , whenever this is possible*.    max - weight-@xmath0 turns out to perform well in terms of another criterion too .",
    "theorem 3 implies that by choosing the @xmath0-parameters such that @xmath108<\\infty$ ] , for all @xmath11 , the steady - state queue length moment @xmath119 $ ] is finite , for all @xmath11 .",
    "the following proposition suggests that this is the best we can do under any regenerative scheduling policy .",
    "* proposition 5 : * consider the single - hop queueing network described in section 2 under a regenerative scheduling policy . then , @xmath120=\\infty \\",
    "e[q_f^c]=\\infty , \\qquad \\forall f \\in \\{1,\\ldots , f\\}. \\nonumber\\ ] ]    this result is well - known in the context of a m / g/1 queue , e.g. , see section 3.2 of @xcite .",
    "it can be proved similarly to theorem 1 .",
    "thus , when its @xmath0-parameters are chosen suitably , * the max - weight-@xmath0 policy guarantees the finiteness of the highest possible moments of steady - state queue lengths*.      although this paper focuses on heavy - tailed traffic and its consequences , some implications of theorem 3 are of general interest . in this section",
    "we assume that all traffic flows in the network are light - tailed , and analyze how the sum of the @xmath0-moments of steady - state queue lengths scales with traffic intensity and the size of the network .",
    "* corollary 2 : ( scaling with traffic intensity ) * let us fix a single - hop queueing network and constants @xmath121 and @xmath122 .",
    "the max - weight-@xmath0 scheduling policy is applied with @xmath123 , for all @xmath11 .",
    "assume that the traffic arriving to the network is admissible , and that the @xmath124-moments of all traffic flows are bounded from above by @xmath125 .",
    "then , @xmath126 \\leq \\frac{m(k^*,\\alpha , b)}{(1-\\rho)^{\\alpha } } , \\nonumber\\ ] ] where @xmath127 is a constant that depends only on @xmath110 , @xmath0 , and @xmath125 .",
    "moreover , under any stabilizing scheduling policy @xmath126 \\geq \\frac{m'(\\alpha)}{(1-\\rho)^{\\alpha } } , \\nonumber\\ ] ] where @xmath128 is a constant that depends only on @xmath0 .",
    "if @xmath129 , for all @xmath11 , then theorem 3 implies that : @xmath126",
    "\\leq \\frac{m(k^*,\\alpha , b)}{(1-\\rho)^{\\alpha } } , \\nonumber\\ ] ] where @xmath127 is a constant that depends only on @xmath110 , @xmath0 , and @xmath125 .    on the other hand , theorem 2.1 of @xcite implies that under any stabilizing scheduling policy there exists an absolute constant @xmath130 , such that @xmath131 \\geq \\frac{\\tilde{m}}{(1-\\rho)}. \\nonumber\\ ] ]    utilizing jensen s inequality",
    ", we have : @xmath132 & \\geq \\sum_{f=1}^f ( e[q_f])^{\\alpha } \\nonumber \\\\ & \\geq \\frac{1}{f^{\\alpha } } \\big ( \\sum_{f=1}^f e[q_f ] \\big)^{\\alpha}. \\nonumber\\end{aligned}\\ ] ]    consequently , there exists a constant @xmath128 that depends only on @xmath0 , such that @xmath126 \\geq \\frac{m'(\\alpha)}{(1-\\rho)^{\\alpha } } , \\nonumber\\ ] ] under any stabilizing scheduling policy .",
    "similar scaling results appear in queueing theory , mostly in the context of single - server queues , e.g. , see chapter 3 of @xcite .",
    "more recently , results of this flavor have been shown for particular queueing networks , such as input - queued switches @xcite .",
    "all the related work , though , concerns the scaling of first moments .",
    "corollary 2 gives the precise scaling of higher order steady - state queue length moments with traffic intensity , and shows that max - weight-@xmath0 achieves the * optimal scaling*.    we now turn our attention to the performance of the max - weight scheduling policy under bernoulli traffic , i.e. , when each of the arrival processes @xmath12 is an independent bernoulli process with parameter @xmath133 .",
    "we denote by @xmath134 the maximum number of traffic flows that any feasible schedule @xmath135 can serve .",
    "* corollary 3 : ( scaling under bernoulli traffic ) * consider the single - hop queueing network described in section 2 under the max - weight scheduling policy .",
    "assume that the traffic arriving to the network is bernoulli , with traffic intensity @xmath114 .",
    "then , @xmath131 \\leq 2 \\cdot k^ * \\cdot s_{\\max } \\cdot \\big ( \\frac{1+\\rho}{1-\\rho } \\big ) .",
    "\\nonumber\\ ] ]    if all traffic flows are light - tailed and all the @xmath0-parameters are equal to one , a more careful accounting in the proof of theorem 3 provides the following tighter upper bound : @xmath131 \\leq \\frac{2k^*}{1-\\rho } \\cdot \\big ( s_{\\max } + \\sum_{f=1}^f e[a_f^2(0 ) ] \\big ) .",
    "\\nonumber\\ ] ]    if the traffic arriving to the network is bernoulli , then @xmath20=\\lambda_f$ ] , for all @xmath11 .",
    "moreover , the fact that the arriving traffic has intensity @xmath136 , implies the existence of nonnegative real numbers @xmath137 , for @xmath135 , such that : @xmath138 and @xmath139    consequently ,",
    "@xmath140 & = \\sum_{f=1}^f \\lambda_f \\nonumber \\\\ & \\leq \\sum_{f=1}^f \\sum_{s \\in s } \\zeta_s \\cdot s_f \\nonumber \\\\ & = \\sum_{s \\in s } \\zeta_s \\cdot \\sum_{f=1}^f \\cdot s_f \\nonumber \\\\ &",
    "\\leq \\sum_{s \\in s } \\zeta_s \\cdot s_{\\max } \\nonumber \\\\ & = \\rho \\cdot s_{\\max } , \\nonumber\\end{aligned}\\ ] ] and the result follows .",
    "* example 4 : ( @xmath88 parallel queues ) * consider a single - server system with @xmath88 parallel queues .",
    "the arriving traffic is assumed to be bernoulli , with traffic intensity @xmath114 . in this case @xmath141 and @xmath142 .",
    "corollary 3 implies that under the max - weight scheduling policy , the sum of the steady - state queue lengths is bounded from above by : @xmath143 \\leq \\frac { 4 n}{1-\\rho}. \\nonumber\\ ] ]    the total queue length of a system of parallel queues under a work - conserving scheduling policy evolves like a @xmath144}/d/1 $ ] queue , from which we infer that @xmath145 = \\theta \\big ( \\frac{1}{1-\\rho } \\big)$ ] .",
    "so , in the context of parallel queues , the scaling provided by corollary 3 is tight with respect to the traffic intensity , but not necessarily tight with respect to the size of the network .",
    "* example 5 : ( @xmath146 input - queued switch ) * consider a @xmath146 input - queued switch .",
    "the arriving traffic is assumed to be bernoulli , with traffic intensity @xmath114 . in this case @xmath141 and @xmath147 .",
    "corollary 3 implies that under the max - weight scheduling policy , the sum of the steady - state queue lengths is bounded from above by : @xmath148 \\leq \\frac{4 n^2}{1-\\rho}. \\nonumber\\ ] ]    in the context of input - queued switches , the joint scaling provided by corollary 3 , in terms of both the traffic intensity and the size of the network , is the tightest currently known .",
    "however , it should be noted that the correct scaling as @xmath149 and @xmath150 is an open problem ; see @xcite .",
    "* example 6 : ( @xmath146 grid ) * consider a single - hop queueing network in a @xmath146 grid topology , under the one - hop interference model .",
    "the arriving traffic is assumed to be bernoulli , with traffic intensity @xmath114 . in this case @xmath151 and @xmath152 .",
    "corollary 3 implies that under the max - weight scheduling policy , the sum of the steady - state queue lengths is bounded from above by : @xmath148 \\leq \\frac{8 n^2}{1-\\rho}. \\nonumber\\ ] ]",
    "the main conclusion of this paper is that the celebrated max - weight scheduling policy performs poorly in the presence of heavy - tailed traffic .",
    "more specifically , our findings show that the phenomenon of delay instability not only arises , but can propagate to a significant part of the network .",
    "this is somewhat surprising , since max - weight is known to perform very well in the presence of light - tailed traffic , at least in single - hop queueing networks .",
    "another important conclusion is that the max - weight-@xmath0 scheduling policy can be used to alleviate the effects of heavy - tailed traffic , and is even order optimal , if its @xmath0-parameters are chosen suitably .",
    "however , for max - weight-@xmath0 to perform well , accurate knowledge of the tail coefficients of all traffic flows is required . if the @xmath0-parameters are not chosen appropriately , then in light of proposition 5 , this policy may also perform poorly .",
    "of particular interest is the study of networks with time - varying channel state . in this class of models",
    "there exists an underlying state of the network which evolves in time , and the transmission rates of the links are given by a function of the state . under certain conditions on the channel state evolution , it can be verified that theorems 1 - 3 carry over with minimal changes to this more general setting .    an important direction for future research",
    "is to consider queueing networks with correlated traffic .",
    "the iid assumption that we made here facilitates the analysis and offers valuable insights , but is clearly restrictive .",
    "as alluded to earlier , evidence suggests that traffic in real - world networks exhibits strong correlations , and phenomena such as self - similarity and long - range dependence arise .",
    "concrete results in this direction would be of great theoretical and practical interest .",
    "99    m. andrews , k. kumaran , k. ramanan , a. stolyar , r. vijayakumar , p. whiting ( 2004 ) .",
    "scheduling in a queueing system with asynchronously varying service rates .",
    "probability in the engineering and informational sciences , 18 , 191 - 217 .",
    "s. borst , o. boxma , r. nunez - queija , b. zwart ( 2003 ) . the impact of the service discipline on delay asymptotics .",
    "performance evaluation , 54 , 175 - 206 .",
    "s. borst , m. mandjes , m. van uitert ( 2003 ) .",
    "generalized processor sharing with light - tailed and heavy - tailed input .",
    "ieee / acm transactions on networking , 11 , 821 - 834 .",
    "o. boxma , b. zwart ( 2007 ) .",
    "tails in scheduling .",
    "performance evaluation review , 34 , 13 - 20",
    ".    l. bui , r. srikant , a. stolyar ( 2009 ) .",
    "novel architectures and algorithms for delay reduction in back - pressure scheduling and routing . in : proc .",
    "infocom 2009 .",
    "a. eryilmaz , r. srikant , j. perkins ( 2005 ) .",
    "stable scheduling policies for fading wireless channels .",
    "ieee / acm transactions on networking , 13 , 411 - 424 .",
    "r. gallager ( 1996 ) . discrete stochastic processes .",
    "kluwer academic .",
    "a. ganti , e. modiano , j. tsitsiklis ( 2007 ) .",
    "optimal transmission scheduling in symmetric communication models with intermittent connectivity .",
    "ieee transactions on information theory , 53 , 998 - 1008 .",
    "l. georgiadis , m. neely , l. tassiulas ( 2006 ) .",
    "resource allocation and cross - layer control in wireless nertworks .",
    "foundations and trends in networking , 1 , 1 - 144 .",
    "p. glynn , w. whitt ( 1986 ) . a central - limit - theorem version of @xmath153",
    ". queueing systems , 1 , 191 - 215 .",
    "b. hajek ( 2006 ) .",
    "notes on communication network analysis .",
    "available online at : http://www.ifp.illinois.edu/@xmath154hajek/papers/networkanalysis dec06.pdf .",
    "r. kumar , t. seidman ( 1990 ) .",
    "dynamic instabilities and stabilization methods in distributed real - time scheduling of manufacturing systems .",
    "ieee transactions on automatic control , 35 , 289 - 298 .",
    "w. leland , m. taqqu , w. willinger , d. wilson ( 1994 ) . on the self - similar nature of ethernet traffic .",
    "ieee / acm transactions on networking , 2 , 1 - 15 .",
    "a. makowski , b. melamed , w. whitt ( 1989 ) . on averages seen by arrivals in discrete time . in : proc .",
    "cdc 1989 .",
    "m. markakis , e. modiano , j. tsitsiklis ( 2009 ) . scheduling policies for single - hop networks with heavy - tailed traffic . in : proc .",
    "allerton 2009 .",
    "m. neely ( 2008 ) .",
    "order optimal delay for opportunistic scheduling in multi - user wireless uplinks and downlinks .",
    "ieee / acm transactions on networking , 16 , 1188 - 1199 .",
    "k. park , w. willinger ( 2000 ) . self - similar network traffic : an overview . in : self - similar network traffic and performance evaluation , k. park and w. willinger , editors , wiley inc .",
    "a. rybko , a. stolyar ( 1992 ) .",
    "ergodicity of stochastic processes describing the operation of open queueing networks .",
    "peredachi inf .",
    ", 3 , 3 - 26 .    d. shah , j. tsitsiklis , y. zhong ( 2011 ) .",
    "optimal scaling of average queue sizes in an input - queued switch : an open problem . to appear in queueing systems .",
    "d. shah , d. wischik ( 2006 ) .",
    "optimal scheduling algorithms for input - queued switches . in : proc .",
    "infocom 2006 .",
    "d. shah , d. wischik ( 2008 ) .",
    "lower bound and optimality in switched networks . in : proc .",
    "allerton 2008 .",
    "k. sigman , r. wolff ( 1993 ) .",
    "a review of regenerative processes .",
    "siam review , 35 , 269 - 288 .",
    "a. stolyar ( 2004 ) .",
    "maxweight scheduling in a generalized switch : state space collapse and workload minimization in heavy traffic .",
    "the annals of applied probability , 14 , 1 - 53 .",
    "l. tassiulas , a. ephremides ( 1992 ) .",
    "stability properties of constrained queueing systems and scheduling policies for maximum throughput in multihop radio networks .",
    "ieee transactions on automatic control , 37 , 1936 - 1948 .",
    "l. tassiulas , a. ephremides ( 1993 ) .",
    "dynamic server allocation to parallel queues with randomly varying connectivity .",
    "ieee transactions on information theory .",
    "39 , 466 - 478 .",
    "d. williams ( 1991 ) .",
    "probability with martingales .",
    "cambridge university press .",
    "in this section we give the `` steady - state versions '' of two important results in queueing theory , the bernoulli arrivals see time averages property and little s law , which we later use to prove lemma 1 .",
    "consider the single - hop queueing network described in section 2 .",
    "let @xmath155 be the random time slot of the arrival of the @xmath29 file to queue @xmath18 , @xmath156 .",
    "we assign two marks to this file : i ) the vector of queue lengths upon its arrival @xmath157 ; and ii ) its end - to - end delay @xmath28 .    under a regenerative scheduling policy , and for a given @xmath11 , the vector - valued sequences @xmath158 , as well as the sequence @xmath54 , are ( possibly delayed ) aperiodic and positive recurrent regenerative processes .",
    "therefore , they converge in distribution , and their limiting distributions do not depend on @xmath44 ; see @xcite .",
    "we denote by @xmath159 and @xmath160 generic random vectors distributed according to these limiting distributions .",
    "the arrival of files at queue @xmath18 constitutes a bernoulli process with parameter @xmath161 , since all arrival processes are iid .",
    "the bernoulli arrivals see time averages ( basta ) property relates the limiting distributions @xmath162 and @xmath163 .",
    "* theorem 4 : ( basta ) * consider the single - hop queueing network described in section 2 under a regenerative scheduling policy . then , @xmath164 where @xmath165 denotes equality in distribution .",
    "fix a queue @xmath11 and consider the random variables : @xmath166    and @xmath167    where @xmath168 , and @xmath169 .",
    "the conditions of theorem 3 in @xcite are satisfied , and we have : @xmath170    under a regenerative scheduling policy the sequences @xmath171 and @xmath172 are ( possibly delayed ) positive recurrent regenerative processes , which are also uniformly bounded by one .",
    "then , the ergodic theorem for regenerative processes implies that @xmath173    and @xmath174    see @xcite .",
    "consequently , @xmath175 and the result follows .",
    "now let @xmath176 be the number of files in queue @xmath18 at time slot @xmath23 , either queued up or in service . under a regenerative scheduling policy , the sequences @xmath177 and @xmath178 are ( possibly delayed ) aperiodic and positive recurrent regenerative processes .",
    "hence , they converge in distribution , and their limiting distributions do not depend on @xmath44 ; see @xcite .",
    "we denote by @xmath179 and @xmath59 generic random variables distributed according to these limiting distributions .",
    "little s law relates the expected values of these limiting distributions .",
    "* theorem 5 : ( little s law ) * consider the single - hop queueing network described in section 2 under a regenerative scheduling policy .",
    "then , @xmath180 = p_f \\cdot e[d_f ] , \\qquad \\forall f \\in \\{1,\\ldots , f\\}. \\nonumber\\ ] ] furthermore , this is true even if these expectations are infinite .",
    "first , we establish little s law for the case of finite expectations .",
    "fix a queue @xmath11 , and assume that @xmath181 $ ] is finite .",
    "we call the aggregate length of queue @xmath18 during a regeneration cycle , and write @xmath182 , the random variable @xmath183 where @xmath184 and @xmath185 represent the first two ( or , in general , two consecutive ) regeneration epochs of the network .    initially , we prove by contradiction that @xmath186 $ ] is finite .",
    "suppose that @xmath186 $ ] is infinite .",
    "using a truncation argument , similar to the one in lemma 4 of appendix 1.3 , it can be shown that @xmath181 $ ] is also infinite .",
    "this contradicts our assumption that @xmath181 $ ] is finite .",
    "hence , @xmath186 $ ] is finite .",
    "the sequence @xmath177 is a ( possibly delayed ) positive recurrent regenerative process .",
    "combined with the fact that @xmath186 $ ] is finite , the ergodic theorem for regenerative processes implies that @xmath187 \\qquad \\mbox{w.p.1 } ; \\nonumber\\ ] ]    see @xcite . moreover , since the network is stable under a regenerative scheduling policy , @xmath188 see theorem 2b of @xcite .",
    "the sequence @xmath189 is also a ( possibly delayed ) positive recurrent regenerative process .",
    "then , the ergodic theorem for regenerative processes and theorem 2e of @xcite imply that @xmath190 \\qquad \\mbox{w.p.1 } , \\nonumber\\end{aligned}\\ ] ]    and @xmath180 = p_f \\cdot e[d_f ] .",
    "\\nonumber\\ ] ]    to summarize , starting with the assumption that @xmath181 $ ] is finite , we showed that @xmath181 = p_f \\cdot e[d_f]$ ] . the same can be shown if we start with the assumption @xmath66 $ ] is finite , and work similarly .",
    "consequently , @xmath180<\\infty \\",
    "e[d_f]<\\infty , \\nonumber\\ ] ] which implies that little s law holds even if the implicated expectations are infinite .",
    "we now re - state and prove lemma 1 .",
    "* lemma 1 : * consider the single - hop queueing network described in section 2 under a regenerative scheduling policy . then , @xmath68<\\infty \\ \\longleftrightarrow \\",
    "e[d_f]<\\infty , \\qquad \\forall f \\in \\{1,\\ldots , f\\}. \\nonumber\\ ] ]    let us start with the implication @xmath68<\\infty \\ \\longrightarrow \\ e[d_f]<\\infty , \\qquad \\forall f \\in \\{1,\\ldots , f\\}. \\nonumber\\ ] ]    assume that @xmath67 $ ] is finite , for some @xmath11 . since every file has at least one packet , @xmath191    we have argued that under a regenerative scheduling policy , the sequences @xmath21 and @xmath177 converge in distribution .",
    "so , taking the limit as @xmath23 goes to infinity , we have : @xmath192    which , in turn , implies that @xmath68 \\geq e[l_f ] .",
    "\\nonumber\\ ] ]    combining this inequality with little s law and the assumption that @xmath67 $ ] is finite , we conclude that @xmath193<\\infty .",
    "\\nonumber\\ ] ]    let us now prove the implication @xmath68=\\infty \\ \\longrightarrow \\ e[d_f]=\\infty , \\qquad \\forall f \\in \\{1,\\ldots , f\\}. \\nonumber\\ ] ]    assume that @xmath67 $ ] is infinite , @xmath11 .",
    "the end - to - end delay of a file is bounded from below by the length of the respective queue upon its arrival , since the service discipline within each queue is `` first come , first served . ''",
    "so , @xmath194    we have argued that under a regenerative scheduling policy , the sequences @xmath189 and @xmath195 converge in distribution .",
    "so , taking the limit as @xmath111 goes to infinity , we have @xmath196    combining this with the basta property , @xmath197    which results in @xmath193 \\geq e[q_f ] .",
    "\\nonumber\\ ] ]    finally , the assumption that @xmath67 $ ] is infinite implies that @xmath193=\\infty .",
    "\\nonumber\\ ] ]      the following result is a well - known corollary of the strong law of large numbers .",
    "we provide a proof for completeness .",
    "* lemma 3 : * consider a sequence of iid random variables @xmath198 , taking values in @xmath2 , with finite rate @xmath199>0 $ ] . for any given @xmath200 , there exists a constant @xmath201 , such that @xmath202    we define an event @xmath203 by @xmath204 by the strong law of large numbers , @xmath205 .",
    "because the sequence of events @xmath203 is nondecreasing , the continuity property of probabilities implies that @xmath206 .",
    "let us therefore fix some @xmath207 such that @xmath208 .",
    "let us consider the event @xmath209 we choose @xmath210 large enough so that @xmath211 and @xmath212 .",
    "note that @xmath213 note also that when both @xmath214 and @xmath215 occur , then @xmath216 so that the latter event has positive probability , which is the desired result follows .      consider the single - hop queueing network described in section 2 under a regenerative scheduling policy . by definition",
    ", there exists a sequence of stopping times @xmath46 , which constitutes a ( possibly delayed ) renewal process , i.e. , the sequence @xmath47 is iid .",
    "moreover , the lattice distribution of cycle lengths has span equal to one and finite expectation .    for @xmath41 ,",
    "let @xmath217 be an instantaneous reward on this renewal process , which is assumed to be an arbitrary function of @xmath218 .",
    "we define the truncated reward as @xmath219 , where @xmath4 is a positive integer . under a regenerative scheduling policy , the sequences @xmath220 and @xmath221 are ( possibly delayed ) aperiodic and positive recurrent regenerative processes .",
    "consequently , they converge in distribution , and their limiting distributions do not depend on @xmath44 ; see @xcite .",
    "let @xmath222 and @xmath223 be generic random variables distributed according to these limiting distributions .",
    "we denote by @xmath224 the aggregate reward , i.e. , the reward accumulated over a regeneration cycle .",
    "similarly , @xmath225 represents the truncated aggregate reward .",
    "* lemma 4 : * consider the single - hop queueing network described in section 2 under a regenerative scheduling policy .",
    "suppose that there exists a random variable @xmath226 with infinite expectation , and a nondecreasing function @xmath227 , such that @xmath228 , and @xmath229 \\leq e[r^m_{agg } ] .",
    "\\tag{1}\\ ] ]    then , @xmath230=\\infty . \\nonumber\\ ] ]    by definition , cycle lengths have finite expectation , and @xmath231 $ ] is bounded from above by @xmath232 $ ] .",
    "then , the renewal reward theorem implies that @xmath233}{e[\\tau_1-\\tau_0 ] } = \\lim_{t \\to \\infty } \\frac{1}{t } \\sum_{t=0}^{t-1 } r^m(t ) , \\qquad \\mbox{w.p.1 } ; \\tag{2}\\ ] ]    see section 3.4 of @xcite .",
    "the sequence @xmath221 is a ( possibly delayed ) positive recurrent regenerative process , which is also uniformly bounded by @xmath4 .",
    "then , the ergodic theorem for regenerative processes implies that @xmath234 , \\qquad \\mbox{w.p.1 } ; \\tag{3}\\ ] ] see @xcite .",
    "( 1)-(3 ) give : @xmath235}{e[\\tau_1-\\tau_0 ] } \\leq e[\\min\\{r , m\\ } ] .",
    "\\nonumber\\ ] ] by taking the limit as @xmath4 goes to infinity on both sides , and using the monotone convergence theorem , we obtain @xmath236}{e[\\tau_1-\\tau_0 ] } \\leq e[r ] ; \\nonumber\\ ] ] see section 5.3 of @xcite .",
    "finally , the fact that @xmath226 has infinite expectation implies that @xmath230=\\infty .",
    "\\nonumber\\ ] ]",
    "consider a heavy - tailed traffic flow @xmath237 . we will show that under any regenerative scheduling policy : @xmath238=\\infty .",
    "\\nonumber\\ ] ] combined with lemma 1 , this will imply that traffic flow @xmath73 is delay unstable .",
    "consider a fictitious queue , denoted by @xmath239 , which has exactly the same arrivals and initial length as queue @xmath73 , but is served at unit rate whenever nonempty .",
    "we denote by @xmath240 the length of queue @xmath239 at time slot @xmath23 .",
    "since the arriving traffic is assumed admissible , the queue length process @xmath241 converges to a limiting distribution @xmath242 .",
    "an easy , inductive argument can show that under a regenerative scheduling policy , the length of queue @xmath73 dominates the length of queue @xmath239 at all time slots .",
    "this implies that @xmath243 taking the limit as @xmath23 goes to infinity , and using the fact that both queue length processes converge in distribution , we have : @xmath244    in order to prove the desired result , it suffices to show that @xmath245=\\infty .",
    "\\nonumber\\ ] ]    the time slots that initiate busy periods of queue @xmath239 constitute regeneration epochs .",
    "denote by @xmath246 the length of the @xmath247 cycle .",
    "the random variables @xmath248 are iid copies of some nonnegative random variable @xmath249 , with finite first moment ; this is because the length of queue @xmath239 is a positive recurrent markov chain , and the empty state is recurrent .",
    "we define an instantaneous reward on this renewal process : @xmath250 where @xmath4 is some finite integer .    without loss of generality , assume that a busy period starts at time slot 0 , and let @xmath125 be the random size of the file that initiates it .",
    "since queue @xmath239 is served at unit rate , its length is at least @xmath251 packets over a time period of length at least @xmath251 time slots .",
    "this implies that the aggregate reward @xmath225 , i.e. , the reward accumulated over a renewal period , is bounded from below by @xmath252 consequently , the expected aggregate reward is bounded from below by @xmath253 & \\geq \\sum_{b=1}^{\\infty } \\min \\big\\ { \\frac{b^2}{4 } , m^2 \\big\\ } \\cdot p(a_h(0)=b ) \\nonumber \\\\ & = \\sum_{b=0}^{\\infty } \\min \\big\\ { \\frac{b^2}{4 } , m^2 \\big\\ } \\cdot p(a_h(0)=b ) \\nonumber \\\\ & = e \\big[\\min \\big\\ { \\frac{a_h^2(0)}{4 } , m^2 \\big\\ } \\big ] .",
    "\\nonumber\\end{aligned}\\ ] ] then , lemma 4 ( see appendix 1.3 ) applied to @xmath254 , implies that @xmath255=\\infty$ ] .",
    "this , in turn , gives : @xmath238=\\infty .",
    "\\nonumber\\ ] ]",
    "consider a heavy - tailed traffic flow @xmath73 , and a light - tailed flow @xmath74 that conflicts with @xmath73 .",
    "we will show that for admissible traffic flow rates and under the max - weight scheduling policy : @xmath256=\\infty .",
    "\\nonumber\\ ] ] combined with lemma 1 , this will imply that traffic flow @xmath74 is delay unstable .",
    "the time slots that initiate busy periods of the network constitute regeneration epochs .",
    "denote by @xmath246 the length of the @xmath247 cycle .",
    "the random variables @xmath257 can be viewed as iid copies of some nonnegative random variable @xmath249 , with finite first moment ; this is because the network is stable under the max - weight policy and the empty state is recurrent .",
    "we define an instantaneous reward on this renewal process : @xmath258 where @xmath4 is a positive integer",
    ".    without loss of generality , assume that a renewal period of the network starts at time slot 0 .",
    "consider the set of sample paths where at time slot 0 , queue @xmath73 receives a file of size @xmath125 packets , and all other queues receive no traffic ; we denote this set of sample paths by @xmath259 . since the arrival processes of different traffic flows are mutually independent , @xmath260 .",
    "for sample paths in @xmath259 , denote by @xmath261 the first time slot when the length of queue @xmath73 becomes less than or equal to the sum of the lengths of all other queues : @xmath262    under the max - weight scheduling policy , queue @xmath74 receives no service until time slot @xmath261 .",
    "moreover , queue @xmath73 is served at unit rate .",
    "so , for sample paths in @xmath259 , @xmath263    a direct consequence of the strong law of large numbers is the existence of positive constants @xmath264 and @xmath210 , such that the set of sample paths : @xmath265 has positive probability ( see lemma 3 in appendix 1.2 . ) we denote by @xmath266 the set of sample paths @xmath267 . due to the iid nature of the arriving traffic , @xmath268 . for sample paths in @xmath266",
    ", we have : @xmath269    moreover , @xmath270    consequently , for sample paths in @xmath266 there exist positive constants @xmath271 and @xmath272 , such that : @xmath273    since at most one packet from queue @xmath74 can be served at each time slot , the length of queue @xmath74 is at least @xmath274 over a time period of length at least @xmath274 time slots .",
    "this implies that the aggregate reward @xmath225 , i.e. , the reward accumulated over a renewal period , satisfies the lower bound @xmath275    then , the expected aggregate reward satisfies @xmath253 & \\geq \\sum_{b=1}^{\\infty } e[r^m_{agg } \\cdot 1_{\\{b \\geq b_0\\ } } \\cdot 1_{\\tilde{h}(b ) } ] \\nonumber \\\\ & \\geq p(\\delta ) \\cdot \\prod_{g \\neq h } p(a_g(0)=0 ) \\cdot \\sum_{b=1}^{\\infty } \\min \\big\\ { \\big ( \\frac{cb}{2}\\big)^2 \\cdot 1_{\\{b \\geq b_0\\ } } , m^2 \\big\\ } \\cdot p(a_h(0)=b ) .",
    "\\nonumber\\end{aligned}\\ ] ]    so , there exists a positive constant @xmath276 , such that @xmath277\\geq c ' \\cdot e \\big[\\min \\big\\ { \\big ( \\frac{c a_h(0)}{2}\\big)^2 \\cdot 1_{\\{a_h(0 ) \\geq b_0\\ } } , m^2 \\big\\ } \\big ] .",
    "\\nonumber\\ ] ]    finally , lemma 4 ( see appendix 1.3 ) applied to @xmath278 , implies that @xmath279=\\infty$ ] .",
    "consider the single - hop queueing network of figure 3 under the max - weight scheduling policy .",
    "assume that traffic flow 1 is heavy - tailed , traffic flows 2 and 3 are light - tailed , and also that @xmath280 .",
    "we will show that @xmath281=\\infty .",
    "\\nonumber\\ ] ] combined with lemma 1 , this will imply the delay instability of queue 2 .",
    "our proof is based on renewal theory , using a strategy similar to the one in the proof of theorem 2 .",
    "the time slots that initiate busy periods of the network constitute regeneration epochs .",
    "denote by @xmath246 the length of the @xmath247 cycle .",
    "the random variables @xmath257 can be viewed as iid copies of some nonnegative random variable @xmath249 , with finite first moment ; this is because the network is stable under the max - weight policy and the empty state is recurrent .",
    "we define an instantaneous reward on this renewal process : @xmath282 where @xmath4 is a positive integer .    without loss of generality , assume that a renewal period of the system starts at time slot 0 .",
    "consider the set of sample paths of the network , where at time slot 0 , queue 1 receives a file of size @xmath125 packets , and all other queues receive no traffic ; we denote this set of sample paths by @xmath259 . clearly , the event @xmath259 has positive probability , as long as @xmath125 is in the support of @xmath283 , which we henceforth assume : @xmath284    our * proof strategy * is as follows : initially , queue 3 does not receive service under max - weight , so it starts building up . at the time slot",
    "when the service switches from schedule @xmath75 to schedule @xmath76 , and if the arrival processes of all traffic flows exhibit their `` average '' behavior , queues 1 and 3 are proportional to @xmath125 , whereas queue 2 remains small .",
    "then , max - weight will start draining the weights of the two feasible schedules at roughly the same rate , until one of them empties .",
    "let @xmath83 denote the departure rate from queue @xmath18 during this period .",
    "roughly speaking , the departure rates are the solution to the following system of linear equations : @xmath84    the last two equations follow from the facts that max - weight is a work - conserving policy , and that queues 1 and 2 are served simultaneously . if the rate at which traffic arrives to queue 2 is greater than the rate at which it departs from it , i.e. , @xmath85    or , equivalently , @xmath86    then queue 2 builds up during this time period , which is proportional to @xmath125 .",
    "this implies that @xmath285=\\infty$ ] , since @xmath125 is heavy - tailed distributed .    throughout the proof we use the following shorthand notation",
    ": we say that a random variable @xmath249 scales at least linearly with @xmath125 on the event @xmath286 , and write @xmath287 , if there exist positive constants @xmath111 and @xmath288 ( possibly depending on the event @xmath286 ) , such that @xmath289 , for all sample paths in @xmath286 .",
    "we break the proof into four steps .    for sample paths in @xmath259 ,",
    "denote by @xmath290 the first time slot , starting from 0 , when the length of queue 3 becomes greater than or equal to the sum of the lengths of queues 1 and 2 : @xmath291    the first part of the proof is to show that @xmath292 and @xmath293 scale at least linearly with @xmath125 , provided all arrival processes exhibit their `` average '' behavior .",
    "under the max - weight scheduling policy , queue 3 receives no service until time - slot @xmath290 .",
    "moreover , the server of the system has unit service rate .",
    "so , for sample paths in @xmath259 : @xmath294    a direct consequence of the strong law of large numbers is the existence of positive constants @xmath210 and @xmath264 , such that the set of sample paths : @xmath295    has probability bounded away from 0 , uniformly over all @xmath125 ( see lemma 3 in appendix 1.2 . ) note that @xmath264 can be chosen arbitrarily small .",
    "similarly , @xmath296    has also probability bounded away from 0 .",
    "denote by @xmath266 the set of sample paths @xmath297 , and observe that @xmath298 .",
    "then , the iid nature of the arriving traffic implies : @xmath299    for sample paths in @xmath266 , we have : @xmath300    moreover , @xmath301    consequently , since @xmath302 , we obtain : @xmath303    therefore , @xmath304    which implies that @xmath305 .    coming to queue 2",
    ", it can be verified that for sample paths in @xmath266 and for any subinterval @xmath306 of @xmath307 : @xmath308    if @xmath264 is chosen sufficiently small , such that @xmath309 , then    @xmath310    since queue 2 gets served whenever it is nonempty throughout the period @xmath311 .",
    "this shows that , essentially , @xmath312 does not scale with @xmath125 .",
    "we finally develop a lower bound on @xmath292 . by definition ,",
    "@xmath313    by arguing similarly to eq .",
    "( 5 ) , it can be verified that @xmath314    eq .",
    "( 6 ) and ( 7 ) , combined with the fact that queue 1 is served at each time slot until @xmath290 , imply : @xmath315    moreover , for sample paths in @xmath266 @xmath316    eq .",
    "( 8) and ( 9 ) give : @xmath317    which , combined with eq . ( 4 ) , results in : @xmath318    it follows that @xmath319 , provided @xmath264 is chosen sufficiently small .    to summarize : at time slot @xmath290 , queues 1 and 3 are proportional to @xmath125 , while queue 2 has remained small",
    ".    now denote by @xmath320 the first time slot after @xmath321 , that either queue 1 or queue 3 becomes empty : @xmath322    the second part of the proof is to show that if the arrival processes exhibit their `` average '' behavior , then at time slot @xmath320 , the length of queue 3 is , roughly speaking , no larger than the sum of the lengths of queues 1 and 2 .    for the same constants @xmath210 and @xmath264 defined in step 1 , the set of sample paths : @xmath323    has probability bounded away from 0 .",
    "we denote by @xmath324 the set of sample paths @xmath325 . due to the iid nature of the arriving traffic : @xmath326    we will show that for sample paths in @xmath324 : @xmath327    first , notice that queues 1 and 3 can not empty at the same time slot , since they can not be served simultaneously .",
    "therefore , we have two possible cases : if @xmath328 , then eq . ( 10 ) is trivially satisfied .",
    "otherwise , suppose that @xmath329 . then , @xmath330 , while @xmath331 . for sample paths in @xmath324 we have",
    ": @xmath332    moreover , under the max - weight policy : @xmath333    finally , @xmath334    which , in turn , gives : @xmath335    since @xmath336 , eq .",
    "( 11)-(13 ) imply that eq .",
    "( 10 ) holds .    the third part of the proof uses the results of steps 1 and 2 in order to show that , for the sample paths of interest and if @xmath78 , then @xmath337 .    by definition ,",
    "@xmath338    by substituting the two sides of eq .",
    "( 10 ) , we get : @xmath339    for sample paths in @xmath324 define the random variables : @xmath340    which are the average service rates to each queue during the interval @xmath341 .",
    "notice that @xmath342    and also @xmath343    since both queues 1 and 3 are nonempty during the inerval @xmath341 , we have : @xmath344    eqs .",
    "( 14 ) , ( 17 ) , and ( 18 ) imply : @xmath345    using eq .",
    "( 16 ) and collecting terms : @xmath346    then , for sample paths in @xmath324 , the queue length @xmath347 is bounded from below by : @xmath348    in the first inequality we have also used eq . (",
    "therefore , @xmath349    if @xmath78 , the constant @xmath264 can be chosen sufficiently small , so that : @xmath350    a final observation is that the duration of the interval @xmath341 is bounded from below by @xmath351 , because both queues are served at unit rate .",
    "so , @xmath352    consequently , @xmath353    in step 3 we showed that for sample paths in @xmath324 , queue 2 builds up to the order of @xmath125 .",
    "in the fourth and final step of the proof , we show that this implies that the expected steady - state length of queue 2 is infinite .",
    "( 19 ) implies that for sample paths in @xmath324 , there exist positive constants @xmath271 and @xmath272 , such that : @xmath354    since at most one packet from queue 2 can be served at each time slot , the length of queue 2 is at least @xmath274 packets over a time period of length at least @xmath274 time slots .",
    "hence , the aggregate reward @xmath225 , i.e. , the reward accumulated over a renewal period , satisfies the lower bound @xmath355    then , the expected aggregate reward is bounded by @xmath253 & \\geq \\sum_{b=1}^{\\infty } e[r^m_{agg } \\cdot 1_{\\{b \\geq b_0\\ } } \\cdot 1_{\\hat{h}(b ) } ] \\nonumber \\\\ & \\geq p(\\delta)^2 \\cdot p(a_2(0)=0 ) \\cdot p(a_3(0)=0 ) \\nonumber \\\\ & \\cdot \\sum_{b=1}^{\\infty } \\min \\big\\ { \\big ( \\frac{cb}{2}\\big)^2 \\cdot 1_{\\{b \\geq b_0\\ } } , m^2 \\big\\ } \\cdot p(a_1(0)=b ) .",
    "\\nonumber\\end{aligned}\\ ] ]    so , there exists a positive constant @xmath276 , such that @xmath277 \\geq c ' \\cdot e \\big",
    "[ \\min \\big\\ { \\big ( \\frac{c a_1(0)}{2}\\big)^2 \\cdot 1_{\\{a_1(0 ) \\geq b_0\\ } } , m^2 \\big\\ } \\big ] .",
    "\\nonumber\\ ] ]    finally , lemma 4 ( see appendix 1.3 ) applied to @xmath356 , implies that @xmath285=\\infty$ ] .",
    "consider a set of feasible schedules @xmath357 such that : @xmath358        notice that @xmath363 where @xmath364 denotes the closure of the set @xmath60 .",
    "this is because we have a convex combination of @xmath365 feasible schedules , and the stability region is known to be a convex set ; see section 3.2 of @xcite .",
    "moreover , @xmath366 where @xmath367 denotes the @xmath368-dimensional vector of ones .",
    "a well - known monotonicity property of the stability region is the following : if @xmath369 componentwise , and @xmath370 , then @xmath371 . using this property , we have : @xmath372 this , in turn , implies the existence of nonnegative numbers @xmath373 , adding up to 1 , and of feasible schedules @xmath374 , such that : @xmath375    under the max - weight-@xmath0 scheduling policy the sequence @xmath54 is a time - homogeneous , irreducible , and aperiodic markov chain on the countable state - space @xmath45 .",
    "we will prove that this markov chain is also positive recurrent , and we will establish upper bounds for the @xmath0-moments of the steady - state queue lengths , provided that @xmath108<\\infty$ ] , for all @xmath11 .",
    "consider the event @xmath386 and its complement .",
    "we have : @xmath387 & \\leq v_f(q_f(t ) ) + e[\\delta_f(t ) \\cdot ( q_f(t)+a_f(t))^{\\alpha_f } \\cdot 1_{\\{\\gamma_f^c(t)\\ } } \\mid q(t ) ] \\nonumber \\\\ & + e[\\delta_f(t ) \\cdot ( q_f(t)-s_f(t ) \\cdot 1_{\\{q_f(t)>0\\}})^{\\alpha_f } \\cdot 1_{\\{\\gamma_f(t)\\ } } \\mid q(t ) ] .",
    "\\tag{21}\\end{aligned}\\ ] ]        eqs .",
    "( 21)-(23 ) imply that @xmath387 & \\leq v_f(q_f(t ) ) + e[\\delta_f(t ) \\mid q(t ) ] \\cdot q_f^{\\alpha_f}(t ) \\nonumber \\\\ & + e[\\delta_f(t ) \\cdot a_f^{\\alpha_f}(t ) \\cdot 1_{\\{\\gamma_f^c(t)\\ } } \\mid q(t ) ] \\nonumber \\\\ & + e[-\\delta_f(t ) \\cdot s_f(t ) \\cdot 1_{\\{q_f(t)>0\\ } } \\cdot 1_{\\{\\gamma_f(t)\\}}\\mid q(t ) ] .",
    "\\nonumber\\end{aligned}\\ ] ]    if @xmath392 , which is denoted by the event @xmath393 , then @xmath394 . also ,",
    "if @xmath395 , which is denoted by the event @xmath396 , then @xmath397 , so that @xmath398 . consequently , @xmath385 \\leq v_f(q_f(t ) ) + e[\\delta_f(t ) \\mid q(t ) ] \\cdot q_f^{\\alpha_f}(t ) + e[a_f^{\\alpha_f+1}(t ) \\cdot 1_{\\{\\gamma_f^c(t)\\}}\\mid q(t ) ] + 1 .",
    "\\nonumber\\ ] ]          for some @xmath401 $ ]",
    ". then , @xmath385 \\",
    "=   v_f(q_f(t ) ) + e[\\delta_f(t ) \\mid q(t ) ] \\cdot q_f^{\\alpha_f}(t ) + e\\big[\\frac{\\delta_f^2(t)}{2 } \\cdot \\alpha_f \\cdot \\xi(t)^{\\alpha_f-1 } \\ \\big| \\",
    "q(t)\\big ] .",
    "\\tag{25}\\ ] ]    since @xmath402 and @xmath403 , the last term can be bounded from above by @xmath404 \\leq e\\big[\\frac{\\delta_f^2(t)}{2 } \\cdot \\alpha_f \\cdot ( q_f(t)+a_f(t))^{\\alpha_f-1 } \\",
    "q(t)\\big ] .",
    "\\tag{26}\\ ] ]        eqs .",
    "( 26)-(28 ) imply that @xmath408 & \\leq 2^{\\alpha_f-2 } \\cdot \\alpha_f \\cdot \\big ( e[a_f^2(t ) ] + 1 \\big ) \\cdot q_f^{\\alpha_f-1}(t ) \\nonumber \\\\ & + 2^{\\alpha_f-2 } \\cdot \\alpha_f \\cdot \\big ( e[a_f^{\\alpha_f+1}(t ) ] + e[a_f^{\\alpha_f-1}(t ) ] \\big ) \\nonumber \\\\ & \\leq k \\cdot q_f^{\\alpha_f-1}(t)+k , \\tag{29}\\end{aligned}\\ ] ]    where @xmath117 + 1 \\big)$ ]",
    ". then , eqs .",
    "( 25 ) and ( 29 ) imply that @xmath387 & \\leq   v_f(q_f(t ) ) + e[\\delta_f(t ) \\mid q(t ) ] \\cdot q_f^{\\alpha_f}(t ) + k \\cdot q_f^{\\alpha_f-1}(t ) + k \\nonumber \\\\ & =   v_f(q_f(t ) ) + e[\\delta_f(t ) \\mid q(t ) ] \\cdot q_f^{\\alpha_f}(t ) + \\frac{1-\\rho}{2 k^ * } \\cdot q_f^{\\alpha_f}(t ) \\nonumber \\\\ & + \\big(k \\cdot",
    "q_f^{\\alpha_f-1}(t ) - \\frac{1-\\rho}{2 k^ * } \\cdot q_f^{\\alpha_f}(t ) + k \\big ) . \\tag{30}\\end{aligned}\\ ] ]          then , eqs .",
    "( 30 ) and ( 33 ) give : @xmath385 \\",
    "=   v_f(q_f(t ) ) + e[\\delta_f(t ) \\mid q(t ) ] \\cdot q_f^{\\alpha_f}(t ) + \\frac{1-\\rho}{2 k^ * } \\cdot",
    "q_f^{\\alpha_f}(t ) + k^{\\alpha_f } \\cdot \\big ( \\frac{2 k^*}{1-\\rho } \\big)^{\\alpha_f-1 } + k. \\tag{34}\\ ] ]    summarizing our findings from cases ( i ) and ( ii ) , eqs . ( 24 ) and ( 34 ) imply that @xmath387 & \\leq   v_f(q_f(t ) ) + e[\\delta_f(t ) \\mid q(t ) ] \\cdot q_f^{\\alpha_f}(t ) \\nonumber \\\\ & + \\frac{1-\\rho}{2 k^ * } \\cdot q_f^{\\alpha_f}(t ) + h \\big ( \\rho , k^*,\\alpha_f , e[a_f^{\\alpha_f+1}(0 ) ] \\big ) , \\nonumber\\end{aligned}\\ ] ]    for all @xmath11 , where @xmath116 \\big ) = \\left\\ { \\begin{array}{ll } e[a_f^{\\alpha_f+1}(0)]+1 , & \\alpha_f \\leq 1 , \\\\ k^{\\alpha_f } \\cdot \\big ( \\frac{2 k^*}{1-\\rho } \\big)^{\\alpha_f-1 } + k , & \\alpha_f > 1 , \\end{array } \\right .",
    "\\nonumber\\ ] ]    and @xmath117 + 1 \\big)$ ] .",
    "summing over all @xmath11 , gives : @xmath413 & \\leq v(q(t ) ) + \\sum_{f=1}^f ( \\lambda_f - s_f(t ) \\cdot 1_{\\{q_f(t)>0\\ } } ) \\cdot q_f^{\\alpha_f}(t ) \\nonumber \\\\ & + \\frac{1-\\rho}{2 k^ * } \\cdot \\sum_{f=1}^f q_f^{\\alpha_f}(t ) + \\sum_{f=1}^f h \\big ( \\rho , k^*,\\alpha_f , e[a_f^{\\alpha_f+1}(0 ) ] \\big ) .",
    "\\nonumber\\end{aligned}\\ ] ]    taking into account eq .",
    "( 20 ) , we have : @xmath413 & \\leq v(q(t ) ) -\\frac{1-\\rho}{2 k^ * } \\cdot \\sum_{f=1}^f q_f^{\\alpha_f}(t ) + \\sum_{f=1}^f h \\big ( \\rho , k^*,\\alpha_f , e[a_f^{\\alpha_f+1}(0 ) ] \\big ) \\nonumber \\\\ & + \\sum_{f=1}^f \\big(\\sum_{j=1}^{j } \\theta_j \\cdot s_f^j - s_f(t ) \\big ) \\cdot q_f^{\\alpha_f}(t ) .",
    "\\nonumber\\end{aligned}\\ ] ]    by the definition of the max - weight-@xmath0 scheduling policy , the last term is nonpositive .",
    "so , @xmath377 \\ \\leq \\",
    "v(q(t ) ) -\\frac{1-\\rho}{2 k^ * } \\cdot \\sum_{f=1}^f q_f^{\\alpha_f}(t ) + \\sum_{f=1}^f h \\big ( \\rho , k^*,\\alpha_f , e[a_f^{\\alpha_f+1}(0 ) ] \\big ) . \\nonumber\\ ] ]    then , the foster - lyapunov stability criterion and moment bound ( e.g. , see corollary 2.1.5 of @xcite ) implies that the sequence @xmath54 converges in distribution .",
    "moreover , its limiting distribution @xmath414 does not depend on @xmath44 , and satisfies @xmath115 \\leq \\frac{2 k^*}{1-\\rho } \\cdot \\sum_{f=1}^f h \\big ( \\rho , k^*,\\alpha_f , e[a_f^{\\alpha_f+1}(0 ) ] \\big ) .",
    "\\nonumber\\ ] ] based on this , it can be verified that the sequence @xmath55 is a ( possibly delayed ) aperiodic and positive recurrent regenerative process .",
    "hence , it also converges in distribution , and its limiting distribution does not depend on @xmath44 ; see @xcite ."
  ],
  "abstract_text": [
    "<S> we consider the problem of packet scheduling in single - hop queueing networks , and analyze the impact of heavy - tailed traffic on the performance of max - weight scheduling . as a performance metric </S>",
    "<S> we use the delay stability of traffic flows : a traffic flow is delay stable if its expected steady - state delay is finite , and delay unstable otherwise . </S>",
    "<S> first , we show that a heavy - tailed traffic flow is delay unstable under any scheduling policy . </S>",
    "<S> then , we focus on the celebrated max - weight scheduling policy , and show that a light - tailed flow that conflicts with a heavy - tailed flow is also delay unstable . </S>",
    "<S> this is true irrespective of the rate or the tail distribution of the light - tailed flow , or other scheduling constraints in the network . </S>",
    "<S> surprisingly , we show that a light - tailed flow can be delay unstable , even when it does not conflict with heavy - tailed traffic . </S>",
    "<S> furthermore , delay stability in this case may depend on the rate of the light - tailed flow . </S>",
    "<S> finally , we turn our attention to the class of max - weight-@xmath0 scheduling policies ; we show that if the @xmath0-parameters are chosen suitably , then the sum of the @xmath0-moments of the steady - state queue lengths is finite . </S>",
    "<S> we provide an explicit upper bound for the latter quantity , from which we derive results related to the delay stability of traffic flows , and the scaling of moments of steady - state queue lengths with traffic intensity . </S>"
  ]
}