{
  "article_text": [
    "flash memory is a storage medium with growing significance .",
    "it has many appealing features including non - volatility , small size , low - cost , mechanical reliability , low power consumption and low read latencies particularly when compared to hard disk drives @xcite  @xcite .",
    "flash memory is organised in blocks .",
    "a block has a fixed number of pages ( typically 64 pages ) .",
    "a page has a fixed size ( typically 4kib ) @xcite .",
    "there are three kinds of operations on flash memory : read , write and erase . read and write operation can be performed on a page basis @xcite .",
    "flash memory has limitations that challenge the design of flash memory systems .",
    "one fundamental limitation of flash memory is nonsupport of overwriting and block erase .",
    "after data are written into a page , new data can not be written into the page by overwriting .",
    "the page must be erased before new data can be written to it . but erase operation can be performed only on a block basis @xcite .",
    "another fundamental limitation of flash memory is limited endurance .",
    "flash memory can tolerate a limited number of program and erase cycles before it becomes unreliable .",
    "the latest multi - level cell ( mlc ) memories can endure @xmath0 program and erase cycles @xcite @xcite . thus , it is a critical problem to limit the number of program and erase cycles to a minimum to increase the flash memory s lifetime .",
    "erasing an entire block when a page is needed to be updated is inefficient .",
    "moreover , this can wear out the flash memory very quickly .",
    "thus , in flash memory , out - of - place write is used @xcite . when a page already written needs to be updated",
    ", the new data are not written into that page but to a new page free for writing and the old page is marked as invalid .",
    "a mapping table is maintained to record the mappings of logical address and physical address . in this paper , pages are classified into three categories and their definition is given as follows .",
    "free page _ is a page into which no data have been written .",
    "it is available to accommodate new user writes .",
    "valid page _ is a page into which data have been written but hasnt been updated .",
    "a valid page is the page that stores the user data .",
    "an _ invalid page _ is a page into which data have been written and has been updated .",
    "an invalid page once stores user data , but it is updated and no longer stores user data due to out - of - place write .    out - of - place results in invalid pages .",
    "invalid pages consume the flash memory but do not store user data .",
    "thus , when the number of invalid pages accumulate to some extent , the invalid pages should be reclaimed for new user writes .",
    "the mechanism in flash memory to reclaim invalid pages and translate them into free pages is called garbage collection @xcite .",
    "garbage collection is performed in the following way : first a block is selected for garbage collection .",
    "then , the valid pages in the selected block are copied to some other free space in the flash memory . after this , the selected block is erased and becomes free .",
    "various algorithms for garbage collection have been proposed in previous work @xcite @xcite @xcite .    during garbage collection",
    ", valid pages in the selected block are copied to some other free space before the selected block is erased and copied back to the flash memory afterwards .",
    "this copy operation causes additional writes .",
    "the actual number of writes on the flash memory would be more than the number of pages needed to be written .",
    "this phenomenon is called write amplification . write amplification reduces the flash memory s lifetime and therefore should be minimized . in flash memory ,",
    "a common practice is that , user can only use a portion of the raw flash memory space .",
    "the portion the user can not use is called overprovisioning .",
    "overprovisioning provides flash memory with an increased endurance and an improved performance . increasing the amount of overprovisioning decreases write amplification .    due to the significance of minimizing write amplification , previous works analyzed write amplification .",
    "first developed a probabilistic model to describe the write amplification @xcite .",
    "they then developed an empirical model to compute the write amplification @xcite .",
    "agarwal et al .",
    "gave a closed - form expression for write amplification @xcite .",
    "they assumed that initially , the user space of the flash memory is full and the valid pages are randomly distributed over the physical flash memory .",
    "the number of valid pages in an arbitrary block is then binomially distributed . after a sufficiently large number of user writes , the distribution of the number of valid pages in an arbitrary block is empirically approximated by a uniform distribution . because both the total number of pages and the total number of valid pages remains the same , the average number of valid pages in an arbitrary block remains the same .",
    "thus , the expected value of these two distributions is equal . by solving this equation , an expression for write amplification",
    "is obtained which is a function of overprovisioning factor .",
    "this paper follows this work , and proposes an improved analytical expression for write amplification in nand flash memory .",
    "first , @xmath1 , the number of invalid pages freed by each garbage collection is studied .",
    "after a sufficiently large number of user writes , @xmath1 evolves into a stationary state .",
    "we assume that , in the stationary state , the expected value of @xmath1 is a constant @xmath2 .",
    "another assumption is made and justified that , @xmath1 has a binomial distribution with probability @xmath3 .",
    "however , @xmath3 and the expected value of the binomial distribution depend on @xmath2 .",
    "since the expected value of the binomial distribution is @xmath2 , we form an equality which can be solved for @xmath2 .",
    "an asymptotic value of @xmath2 and an asymptotic value of write amplification @xmath4 are obtained using lambert w function when the total number of pages accessible to the user is very large . as with the previous work , @xmath4 is a function of overprovisioning factor @xmath5 .",
    "the key of both papers is finding the probability of a page being invalid or valid .",
    "agarwal et al .",
    "find the probability of a page being valid over the whole flash memory while this paper finds the probability of a page being invalid over the block selected for garbage collection .",
    "comparison shows that the improved expression achieves a more accurate prediction of write amplification than the previous work .",
    "for example , when the overprovisioning factor is 0.3 , the improved expression gives a write amplification of 2.36 and that of the previous work gives 2.17 whereas the actual value is 2.35 .",
    "the rest of the paper is organized as follows : section [ model ] specifies the system model assumed .",
    "the analysis of write amplification and derivation of closed - form expression are given in section [ analysis ] . in section [ simulation ] , the assumptions in section [ analysis ] is justified and the comparison between the result of this paper and previous work is given .",
    "the flash memory is organized in blocks .",
    "there are a total of @xmath6 physical blocks in the flash memory .",
    "each block has a fixed number of pages , denoted by @xmath7 .",
    "the portion of the flash memory space that user can use is @xmath8 blocks .",
    "overprovisioning factor @xmath5 is defined by : @xmath9    the flash memory maintains a free block pool and an occupied block queue .",
    "blocks that have at least one free page are in the free block pool and blocks with no free pages are in the occupied block queue .",
    "initially , the flash memory is empty and all the blocks are empty and are in the free block pool .",
    "this paper assumes random writes which are uniformly distributed on the user address space .",
    "each write request has a fixed size of one page .",
    "when a write request comes , data are written to a free page in a block in the free block pool .",
    "if the write request falls on a user address that has not been written before , this write request is called a `` write '' .",
    "if the write request falls on a user address that has already been written , this write request is called an  update \" .",
    "when it is a write , a free page is found and the data are written into that page .",
    "the mapping between logical address and physical page address is recorded in a mapping table . when it is an update , the physical page storing the old data is found through the mapping table and marked as invalid .",
    "a free page would be found to write the new data and the mapping table is updated accordingly .",
    "gradually , the blocks in the free block queue become full and are moved into the occupied block queue .",
    "when the number of free pages reaches a predefined threshold , garbage collection is triggered to collect the invalid pages .",
    "greedy garbage collection is assumed where garbage collection is triggered when no free page exists .",
    "the block with the maximum number of invalid pages is selected for garbage collection .",
    "the valid pages in the selected block is copied to some auxiliary space in the flash memory",
    ". then the selected block is erased .",
    "finally the valid pages is copied back to this block .",
    "this block now joins the free block pool and is the only block in the free block pool accommodating write requests .",
    "suppose there are @xmath10 invalid pages freed by garbage collection .",
    "notice that , copying the valid pages contributes @xmath11 writes on the flash memory . and",
    "as a result , @xmath10 free pages are obtained and therefore @xmath10 new user writes can be accommodated .",
    "write amplification , @xmath12 , is defined as the average number of physical page writes per user page write @xcite .",
    "it is given by : @xmath13    due to the greedy garbage collection policy , at most one block can have free pages and be in the free block pool .",
    "thus , the flash memory model can be further simplified into a single block queue .",
    "blocks are sorted by their time in the queue since they were last selected for garbage collection .",
    "they are labeled @xmath14 from the head of the queue .",
    "when no free pages exist in any block , the block with the maximum number of invalid pages is chosen and removed from the queue .",
    "all blocks after this block moves one step towards the head of the queue .",
    "after the erase operation , this selected block is added to the tail of the queue with @xmath10 free pages and @xmath11 valid pages . in this model",
    ", only the last block ( block @xmath15 ) can have free pages and garbage collection is triggered when this block is full .",
    "a demonstration of this model is shown in fig .",
    "[ fig : block_queue ] .",
    " v \" stands for valid ,  i \" for invalid and  f \" for free .",
    "the demonstration includes four blocks labeled block 0,1,2,3 and each block has four pages .",
    "the overprovisioning factor is @xmath16 .",
    "this means the user can only use 12 pages out of the 16 pages . in step (",
    "a ) , there are 12 valid pages in total indicating that the user address space is already full and only update can be performed . at this time",
    "the flash memory is full and garbage collection is triggered .",
    "block 1 should be selected for garbage collection because it has the maximum number of invalid pages .",
    "block 1 is removed from the queue and block 2,3 moves one step towards the head of the queue becoming block 1,2 .",
    "the valid pages in the selected block shown as blue v s in step ( a ) are copied to some auxiliary space and then the selected block is erased and added to the tail of the queue becoming block 3 as is shown in step ( b ) .",
    "the valid pages are copied into block 3 shown as blue v s in step ( b ) .",
    "the original two invalid pages now becomes free pages accommodating new user writes .",
    "two user writes updates the red pages shown in ( b ) .",
    "these pages are first marked as invalid shown as red i s in ( c ) and new data are written into block 3 shown as red v s in ( c ) . now garbage collection is triggered again .",
    "block 0 should be selected for garbage collection which is performed in the same way as in step ( a ) .",
    "for the convenience of explanation later , first the definition of a block cycle is given .",
    "a block cycle is the process from when garbage collection is performed on a block to the time when this block is selected again for garbage collection . from the point of view of the block queue",
    ", a block cycle is the process from a block entering the block queue being block @xmath15 to the time when it is removed from the block queue for garbage collection .",
    "let @xmath1 denote the number of invalid pages freed from garbage collection .",
    "the following assumption was used in @xcite and is further supported by simulation in section [ simulation ] .",
    "[ stationary_assumption ] after a sufficiently large number of user writes , @xmath1 evolves into a stationary state and has a constant expected value @xmath17 .    for any block selected for garbage collection ,",
    "the following assumption is given and will be justified later .",
    "[ binomial_assumption ] when a block is selected for garbage collection , all the pages in this block have the same probability @xmath3 to be invalid .    due to this assumption",
    ", @xmath1 is a binomial random variable with @xmath7 trials and each trial has a probability @xmath3 to be successful .",
    "the expected value of @xmath1 is @xmath18 .",
    "therefore , using assumption [ stationary_assumption ] , @xmath19    the following derives @xmath3 .",
    "consider a certain valid page @xmath20 .",
    "it corresponds to one page of data in the user space .",
    "because the user writes are randomly distributed on the user space and are mutually independent and the total user space is @xmath21 pages , a user write has a probability of @xmath22 to update the data page @xmath20 stores , and make it invalid .",
    "after @xmath23 user writes , page @xmath20 remains valid if none of these @xmath23 user writes update the data that page @xmath20 stores .",
    "let @xmath24 denote the probability that a valid page @xmath20 remains valid after @xmath23 user writes , @xmath25 then , @xmath26 , the probability that page @xmath20 becomes invalid after @xmath23 user writes : @xmath27    let @xmath28 denote the total number of user writes during an entire block cycle . according to assumption [ binomial_assumption ]",
    ", @xmath3 is the value of @xmath26 when @xmath29 .",
    "thus , to determine @xmath26 , @xmath29 should be determined . according to assumption [ stationary_assumption ] , each garbage collection collects @xmath2 invalid pages .",
    "this means , after each garbage collection , there are @xmath2 free pages in the block @xmath15 translated from invalid pages freed by garbage collection . then , @xmath2 user writes fills this block and triggers the next garbage collection .",
    "thus , between two garbage collections , one block ( block @xmath15 ) becomes full and there are @xmath2 user writes .",
    "[ t_assumption ] a number of @xmath6 blocks become full during an entire block cycle .",
    "this assumption will be justified by simulation in section [ simulation ] . using this assumption , @xmath30    apply equation ( [ k_e ] ) to equation ( [ p_invalid ] ) , @xmath3",
    ", the value of @xmath26 when @xmath29 , is : @xmath31    apply equation ( [ p_invalid_tx ] ) to equation ( [ equivalent ] ) , @xmath32 where @xmath33 are constants for a specific flash memory .",
    "let @xmath34 denote the lambert w function @xcite .",
    "solving this equation for @xmath2 , @xmath35 thus , write amplification @xmath12 is , @xmath36 as was mentioned , practical flash memory has a very large number of blocks so that @xmath37 .",
    "consider @xmath38 , the asymptotic value of @xmath2 as @xmath21 becomes large : @xmath39 the asymptotic write amplification @xmath4 is : @xmath40 for comparison , the closed - form expression for write amplification @xmath41 proposed in the previous work @xcite is : @xmath42 comparison of equation ( [ final ] ) and equation ( [ previous_work ] ) shows that , the asymptotic write amplification expression obtained by this analysis is a function of overprovisioning factor only , which is consistent with the previous work .",
    "it is independent of the number of pages per block .",
    "now , assumption [ binomial_assumption ] is justified .",
    "consider a certain block , at the very beginning of its block cycle with @xmath2 free pages and @xmath43 valid pages .",
    "after @xmath28 user writes , this block is again selected for garbage collection .",
    "thus , all the valid pages in the beginning of the block cycle have the same probability @xmath3 to be invalid at the end of the block cycle .",
    "the free pages in the beginning of the block cycle are written consecutively and each of them experience one less user write than the previous page .",
    "practical flash memory has a very large number of blocks so that @xmath44 .",
    "thus , it is reasonable to assume that each page in a block has the same probability @xmath3 to be invalid when selected for garbage collection .",
    "a flash memory simulator was written and simulations were run to justify the assumptions and verify the validity of equation ( [ final ] ) . all simulations below start with an empty flash memory .",
    "first , assumption [ stationary_assumption ] is justified .",
    "simulations were run with different combinations of @xmath8 , @xmath45 and @xmath5 .",
    "[ justification_assumption11 ] shows that when @xmath46 and @xmath47 , @xmath1 , the number of invalid pages freed by garbage collection , evolves into a stationary state after a sufficiently large number of garbage collections .",
    "it also shows that @xmath1 converges to the same value , which is close to the analytical result 80.31 given by equation ( [ practical_x ] ) , regardless of the value of @xmath8 .",
    "this complies with equation ( [ practical_x ] ) that @xmath38 is independent of @xmath8 .",
    "[ justification_assumption12 ] shows that @xmath1 evolves into a stationary state regardless of the value of @xmath45 and @xmath5 as well when the number of user writes is sufficiently large . therefore",
    ", after a sufficiently large number of user writes , the average value of @xmath1 always converges to a constant @xmath2 .",
    "it also closely approaches the analytical value .",
    "[ tx ] shows that for different values of @xmath8 , @xmath48 and @xmath5 , @xmath6 is always a good approximation of the number of blocks becoming full in a block cycle .",
    "this justifies assumption [ t_assumption ] .",
    "finally , equation ( [ final ] ) is evaluated and compared to the previous work equation ( [ previous_work ] ) . from equation ( [ final ] ) , write amplification is independent of @xmath8 and @xmath7 .",
    "thus , comparison is made only for different @xmath5 values .",
    "simulation is run using @xmath47 , @xmath49 , and @xmath5 varies from 0.15 to 1.00 .",
    "the comparison of results from simulation , this analysis ( equation ( [ final ] ) ) and previous work ( equation ( [ previous_work ] ) ) is shown in fig .",
    "[ fig : comparison ] and table [ table : comparison ] .",
    "this shows that , the result of equation ( [ final ] ) is much closer to the simulation value than the result of previous work .",
    "for example , when @xmath50 which is a commonly adopted value in practical flash memories , equation ( [ final ] ) predicts @xmath51 whereas equation ( [ previous_work ] ) gives @xmath52 , when the actual value is @xmath53 .",
    "9 ashish jagmohan , michele franceschini , luis lastras ,  write amplification reduction in nand flash through multi - write coding \" , in _",
    "ieee 26th symp",
    ". mass storage syst .",
    "technologies ( msst ) _ , pp . 1 - 6 , 2010 .",
    "rajiv agarwal and marcus marrow ,  a closed - form expression for write amplification in nand flash \" , in _ ieee globecom 2010 workshop on applicat . of commun .",
    "theory of emerging memory technologies _ ,",
    "1908 - 1912 .",
    "hu , e. eleftheriou , r. haas , i. iliadis , and r. pletka , ",
    "write amplification analysis in flash - based solid - state drives \" , in _ proc . of the acm sysstor : the israeli experimental syst .",
    ", may 2009 .",
    "x .- y . hu and r. haas ,  the fundamental limit of flash random write performance : understanding , analysis and performance modelling \" , in _",
    "ibm research rep .",
    "_ , rz 3771 , mar .",
    "a. kawaguchi , s. nishioka , and h. motoda ,  a flash - memory based file system \" , in _ proc .",
    "usenix tech .",
    ", pp . 155 - 164 , jan .",
    "m. rosenblum and j. k. ousterhout ,  the design and implementation of a log - structured file system \" , in _ acm trans .",
    "26 - 52 , feb . 1992 .",
    "j. menon and l. stockmeyer , ",
    "an age - threshold algorithm for garbage collection in log - structured arrays and file systems \" , in _",
    "j. schaeffler , editor , high performance computing syst .",
    "119 - 132 .",
    "kluwer academic publishers , 1998 .",
    "chang , t .- w .",
    "kuo , and s .- w .",
    "lo ,  real - time garbage collection for flash - memory storage systems of real - time embedded systems \" , in _ acm trans .",
    "embedded computing syst .",
    "837 - 863 , nov . 2004 .",
    "robert m. corless , g. h. gonnet , d. e. g. hare , d. j. jeffrey , and d. e. knuth ,  on the lambert w function \" , _ advances in computational math .",
    "_ , vol . 5 , no .",
    "329 - 359 , 1996 ."
  ],
  "abstract_text": [
    "<S> agarwal et al . gave an closed - form expression for write amplification in nand flash memory by finding the probability of a page being valid over the whole flash memory </S>",
    "<S> this paper gives an improved analytic expression for write amplification in nand flash memory by finding the probability of a page being invalid over the block selected for garbage collection . </S>",
    "<S> the improved expression uses lambert w function . through asymptotic analysis , </S>",
    "<S> write amplification is shown to depend on overprovisioning factor only , consistent with the previous work . </S>",
    "<S> comparison with numerical simulations shows that the improved expression achieves a more accurate prediction of write amplification . </S>",
    "<S> for example , when the overprovisioning factor is 0.3 , the expression proposed by this paper gives a write amplification of 2.36 whereas that of the previous work gives 2.17 , when the actual value is 2.35 . </S>"
  ]
}