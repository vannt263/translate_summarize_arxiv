{
  "article_text": [
    "a significant amount of time and computing resources are spent on calculating events at hadron colliders .",
    "whether a theoretical calculation of matrix elements , or an experimental simulation of events with detector effects , one common element is the evaluation of parton distribution functions ( pdfs ) .",
    "these functions return the probability of finding a parton ( quark or gluon ) inside of a proton , based on two parameters : the fraction of momentum carried by the parton @xmath0 , and the square of the energy scale of the process @xmath1 . because the input parameters can span several orders of magnitude , the values of these functions are stored in two - dimensional tables for a finite number of input points . an approximate result for an arbitrary input of @xmath0 and @xmath1",
    "is derived by interpolating between the values obtained from the nearest table entries .    in profiling ` ztop `  @xcite , a `",
    "fortran`code written to simulate next - to - leading - order jet distributions in single - top - quark production , it has become apparent that much of the execution time of real production code is spent acquiring pdfs . upon close examination of the cteq4 and cteq5 pdf codes @xcite , a handful of trivial optimizations arise that can cut this time in half .",
    "based on this success , i examine further algorithmic improvements in the typical interface functions that reduce the execution time by another factor of two or more for all cteq pdfs ( including cteq6 @xcite ) .",
    "i provide specific recommendations that are simple to implement , but which can have large consequences for efficiency",
    ".    a ` gprof ` profile of ` ztop `  @xcite indicates that up to 90% of the execution time is spent in acquiring pdfs .",
    "execution times in other programs appear to be dominated by the same routines . in table",
    "[ tab : cteqdef ] i show the typical fraction of time spent evaluating pdfs for ` ztop ` , and the two most common showering event generators , ` herwig `  6.1 @xcite , and ` pythia `  6.2 @xcite . the results in table  [ tab : cteqdef ]",
    "were generated using the gnu ` g77 `  3.1 compiler for linux on a 1.4 ghz pentium 4 processor with the flags ` -g -pg -o3 -march = pentium4 -msse2 ` , and were verified by commenting out the routines .",
    "the results vary by less than 3% when changing compilers or compiler flags .",
    "times for cteq4 and cteq5 differ from cteq6 , because the latter uses a different interpolation algorithm .",
    "retrieving pdfs is always the most time - intensive operation in these calculations .",
    "therefore , it behooves us investigate what options are available to speed up the pdf routines .",
    ".fraction of time spent evaluating pdf functions using default cteq computer codes for three programs : the next - to - leading - order jet calculation ` ztop ` , and two showering event generators , ` herwig `  and ` pythia`.[tab : cteqdef ] [ cols=\"^,^,^\",options=\"header \" , ]     we observe in sec .",
    "[ sec : results ] that replacing ` polint `  with ` polint3/4 `  greatly reduces the dependence of program execution time on the choice of compiler flags .",
    "this is a simple change , and can improve running times of some programs by up to a factor of 2 .",
    "since most programs call several pdfs in a row with the same values of @xmath0 and @xmath1 , the obvious next step is to modify the cteq routines ` partonxn ` to save previous results , and calculate only what has changed .",
    "the third level of optimization replaces the typical ` cernlib ` interface functions ` structm `  and ` pftopdg`@xcite with fully optimized versions that are specialized to the cteq parton distributions .",
    "i recommend that these improvements be incorporated into the base cteq distribution @xcite , the ` pdflib ` routines in ` cernlib ` @xcite , and the new les houches accord compilation of pdfs ` lhapdf ` @xcite .",
    "full versions of the routines presented here may be obtained from the author , or from ref .",
    "@xcite .",
    "despite these impressive gains , we see in table  [ tab : fraction ] that evaluating pdfs remains the most time - consuming aspect of hadronic calculations .",
    "this suggests two avenues of investigation that should be considered for future programs .",
    "first , a systematic study of pdf evolution codes should be performed to determine whether there are more efficient interpolation algorithms to use with table - based pdfs .",
    "this would allow universal improvements in code execution .",
    "second , each monte carlo writer should be aware of the timing issues ( and potential bugs if @xmath2 is not the same as @xmath3 ) , and consider using an interface structure other than ` structm ` .",
    "the potential savings from calling one pdf instead of eight or more could be very significant .",
    "finally , it is interesting that the optimizations i have listed can remove the apparent need for parameterizations of the parton distribution functions . in general",
    ", any calculation that relies heavily on interpolation , or multiple evaluations of a function in which some pieces do not vary , should see similar improvements in performance by applying these same techniques .",
    "this work was supported by universities research association inc .  under contract",
    "de - ac02 - 76ch03000 with the united states department of energy .",
    "this is a `` fast '' version of ` polint3 ` , which has been optimized for the special case of 3-point fitting , and no possibility of divisions by zero .",
    "an error estimate is not returned , since it is never used in the cteq evolution codes .",
    "this code should be used to replace the version of ` polint `  called by the cteq4 and cteq5 pdfs .    ....",
    "c   this is a specialized recoding of neville 's c    algorithm based on the polint routine from c    \" numerical recipes \" , but assuming n=3 , and c    ignoring the error estimation .",
    "c   written by z. sullivan , may 2004 c   this file uses a minimal number of c    instructions to do 3-point fitting .",
    "c      subroutine polint   ( xa , ya,3,x , y , ignored )        subroutine polint3 ( xa , ya , n , x , y , dy )        implicit none        double precision xa(3),ya(3),x , y , dy , den        double precision c1,ho , hp , hp2,w , d1,d2        integer n                b.  w.  harris , e.  laenen , l.  phaf , z.  sullivan , and s.  weinzierl , phys .",
    "d * 66 * , 054024 ( 2002 ) .",
    "zack  sullivan , phys .",
    "d * 70 * , 114012 ( 2004 ) .",
    "cteq collaboration , h.  l.  lai _ et al .",
    "_ , phys .",
    "d * 55 * , 1280 ( 1997 ) ; z.  phys .",
    "c * 74 * , 463 ( 1997 ) ; eur .",
    "j.  c * 12 * , 375 ( 2000 ) .",
    "cteq collaboration , j.  pumplin _ et al .",
    "_ , j.  high energy phys .  * 07 * , 012 ( 2002 ) . g.  corcella _ et al .",
    "_ , j.  high energy phys .  * 01 * , 010 ( 2001 ) . t.  sjstrand _ et al .",
    ".  phys .",
    "commun .   *",
    "135 * , 238 ( 2001 ) . w.  press , s.  teukolsky , w.  vetterling , and b.  flannery , _ numerical recipes in fortran : the art of scientific computing _",
    "( cambridge university press , cambridge , 1986 ) , chap .  3.1 .",
    "zack  sullivan , _ faster parton distribution evaluation in monte carlos _ , fermilab - fn-755 , hep - ph/0403055 .",
    "_ intel architecture optimization reference manual _ , intel corporation document 245127 - 001 , 1999 ; _ intel fortran compiler for linux systems user s guide , volume ii : optimizing applications _",
    ", intel corporation document 2553260 - 002 , 2003 .",
    "j.  s.  conway _ et al .",
    "_ , _ report of the tevatron higgs working group _ , in _ physics at run ii : the supersymmetry / higgs workshop _ , fermilab , 1998 , edited by m.  carena and j.  lykken ( fermilab , batavia , 2002 ) , p.  39 , hep - ph/0010338 . w.  giele _ et al .",
    "_ , _ the qcd / sm working group : summary report _ , in _ les houches 2001 : physics at tev colliders _ , les houches , france , 2001 , edited by p.  aurenche _ et al .",
    "_ , p.  275",
    ", hep - ph/0204316 ."
  ],
  "abstract_text": [
    "<S> a few changes to the routines that calculate cteq parton distribution functions allow modern compilers to optimize the evaluations , while having no quantitative effect on the results . </S>",
    "<S> overall computation time is reduced by a factor of 45 in matrix - element calculations , and by 1.32.5 in showering monte carlo event generators . </S>",
    "<S> similar improvements in performance may be expected in any calculations relying heavily on interpolation or multiple calls to functions . </S>"
  ]
}