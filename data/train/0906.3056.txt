{
  "article_text": [
    "we consider the scheduling machines with capacity constraints problem ( smcc ) : there are @xmath0 identical machines , and machine @xmath6 can process at most @xmath1 jobs . given @xmath7 jobs with their processing time lengths ,",
    "we are to find a schedule of jobs to machines that minimizes the makespan and meets the capacity constraints .",
    "scheduling problem is a classical @xmath8-hard problem and has been studied extensively . in the general",
    "setting , we are given set @xmath9 of tasks , number @xmath0 of machines , length @xmath10 for each @xmath11 and machine @xmath12 $ ] , the task is to find a schedule for @xmath9 , namely , a function @xmath13 $ ] , to minimize @xmath14}{\\sum_{t \\in t , f(t ) = i}{l(t , i)}}$ ] .",
    "lenstra , shmoys and tardos @xcite gave a @xmath15-approximation algorithm for the general version and proved that for any @xmath16 no @xmath17-approximation algorithm exists unless @xmath18 .",
    "their method based on applying rounding techniques on fractional solution to linear programming relaxation .",
    "gairing , monien and woclaw @xcite gave a faster combinatorial @xmath15-approximation algorithm for the general problem .",
    "they replaced the classical technique of solving the lp - relaxation and rounding afterwards by a completely integral approach .",
    "for the variation in which the number of processors @xmath0 is constant , angel , bampis and kononov @xcite gave a _ fully polynomial - time approximation scheme ( fptas)_. for the uniform variation where @xmath19 is independent of the processor @xmath6 , hochbaum and shmoys @xcite gave a _",
    "polynomial - time approximation scheme ( ptas)_.    the smcc problem is one of the uniform variations , with capacity constraints on machines .",
    "one special case of smcc problem in which there are only two identical machines was studied in @xcite @xcite @xcite .",
    "woeginger @xcite gave a fptas for the same problem .",
    "general smcc problem is a natural generalization of scheduling problem without capacity constraints and can be used in some applications in real world , such as students distributions in university , the crew scheduling problem in airlines scheduling @xcite @xcite , etc . in the crew scheduling problem , crew rotations",
    ", sequences of flights legs to be flown by a single crew over a period of a few days , are given .",
    "crews are paid by the amount of flying hours , which is determined by the scheduled rotations .",
    "airline company wants to equalize the salaries of crews , i.e. to make the highest salary paid to crews minimum .",
    "rotations starts and ends at the same crew base and must satisfy a large set of work rules based labor contracts covering crew personnel . in the concern of safety issues ,",
    "one common contract requirement is the maximum times of flying of a single crew in a period of time .",
    "so the aim is to find a scheduling of rotations to crews that minimizes the highest salary and meets the maximum flying times constraints .    in many literature",
    ", researchers approached scheduling problem using rounding techniques .",
    "lenstra , shmoys and tardos @xcite applied rounding method to the decision problem to derive a _ @xmath20-relaxed decision procedure _ and then used a binary search to obtain an approximation solution . in the smcc problem ,",
    "the capacity constraints defeat many previous methods . in this paper ,",
    "our algorithm is one of the class of rounding algorithms , but use a different rounding method introduced by jain @xcite .",
    "we do not round off the whole fractional solution in a single stage .",
    "instead , we round it off iteratively .    _",
    "iterative rounding method _",
    ", introduced by jain @xcite , was used in his breakthrough work on the survivable network design problem .",
    "this rounding method does not need the half - integrality , but only requires that at each iteration there exist some variables with bounded values . in @xcite",
    ", jain observed that at each iteration one can always find a edge @xmath21 has @xmath22 at least @xmath23 , which ensures that the algorithm has an approximation ratio of @xmath15 .",
    "as a successful extension of jain s method , mohit singh and lap chi lau @xcite considered the minimum bounded degree spanning trees problem and gave an algorithm that produces a solution , which has at most the cost of optimal solution while violating vertices degrees constraints by @xmath24 at most . as far as the authors know , _ iterative rounding method _ has been used in graph problems , and has produced many beautiful results .    in this paper",
    ", we apply _ iterative rounding method _ to the scheduling problem with capacity constraints and obtain a @xmath5-approximation algorithm . to the best of the authors knowledge ,",
    "this is the first attempt to approach scheduling problem with capacity constraints using _ iterative rounding method_.    the rest of the paper is organized as follows . in section",
    "[ preliminary ] , we formulate the smcc problem as an integer program , give its natural relaxation and introduce our relaxation , bounded linear programming relaxation ( blpr ) . in section",
    "[ techniques ] , we present some properties of blpr and prove theorems that support our algorithm . in section [ approximation_algorithm ] ,",
    "we present bounding theorems and an approximation algorithm , @xmath25 , and prove that it has an approximation ratio of @xmath5 .",
    "formally , the smcc problem is as follows : given a positive integer @xmath0 , @xmath0 positive integers @xmath26 , @xmath2 non - negative integers @xmath27 , we are to solve the following integer program ( ip ) : @xmath28    there are some relaxations , one of which is the following natural linear programming relaxation ( lpr ) dropping the integrality constraints .",
    "we do nt use lpr directly , but use an alternative relaxation , bounded linear programming relaxation ( blpr ) : given a positive integer @xmath0 , @xmath0 positive integers @xmath26 , @xmath2 non - negative integers @xmath27 , a real vector @xmath30 and @xmath31 , find a feasible solution under the following constraints @xmath32 where vector @xmath30 , called _",
    "upper bounding vector _ , is added to depict the different upper bounds of machines more precisely , and @xmath33 is added to represent the partial solution in algorithm .",
    "each @xmath34 indicates that job @xmath3 has been scheduled to machine @xmath6 .",
    "those @xmath35 are considered as constants .",
    "we will show that properly constructing vector @xmath30 makes the solution produced by our algorithm under control and easy to analyze .    in a blpr problem @xmath36 , _ upper bounding vector _",
    "@xmath30 is called _ feasible _ if @xmath36 is feasible .    keeping the _ upper bounding vector _ @xmath37 _",
    "feasible _ all the time is the key of our algorithm , which guarantees that we can always find a feasible solution bounded by @xmath37 .",
    "before we present our algorithm , we need to introduce some properties of blpr .    with respect to the partial solution @xmath33 ,",
    "let @xmath38 denote the number of already scheduled jobs in machine @xmath6 , namely , @xmath39 .",
    "note that @xmath40 indicates the _ free _ capacity in machine @xmath6 .",
    "we call a job _ free _ if it has not been scheduled to any machine and call a machine _ free _ if it still has free capacity . for a feasible fractional solution @xmath41 to @xmath36 , define a bipartite graph @xmath42 , called _ supporting graph _ , where @xmath43 represents the set of _ free _ machines , @xmath44 represents the set of _ free _ jobs and @xmath45 .",
    "we denote the number of _ free _ jobs and the number of _ free _ machines by @xmath46 and @xmath47 respectively .",
    "note that for _ free _ job @xmath3 , @xmath48 .",
    "consider the _ constraint matrix _ of @xmath36 , which consists of the coefficients of the left side of equalities and inequalities , except for the non - negativity constraints from : @xmath49 where the @xmath50 to @xmath51 rows represent the constraints from , the @xmath52 to @xmath53 rows represent the constraints from , and the @xmath54 to @xmath55 rows represent the constraints from .",
    "one can verify that the @xmath52 row can be linearly expressed by the rest of rows .",
    "thus the rank of _ constraints matrix _ is bounded by the following lemma    [ rank_bounding ] _ constraints matrix _ has a rank at most @xmath56 .",
    "recall that , a basic solution @xmath41 to @xmath36 is the unique solution determined by a set of linearly independent _ tight constraints _ that are satisfied as equalities .",
    "we remove all zero variables in @xmath41 so that no _ tight constraints _ comes from .",
    "thus the number of non - zero variables in @xmath41 never exceeds the rank of",
    "_ constraints matrix_. when @xmath57 , the following inequality holds @xmath58    we can remove those non-_free _",
    "machines from @xmath36 , move fixed variables @xmath35 to the right side of the equalities and inequalities as constants and remove variables fixed to @xmath59 . by doing this , we obtain a new sub - problem and only focus on _ free _ jobs and _ free _ machines . in the new sub - problem ,",
    "lemma [ rank_bounding ] holds .",
    "so in general , the following corollary holds .",
    "[ edges_bounding ] given a blpr problem , @xmath36 , its basic solution @xmath41 and _ supporting graph _",
    "@xmath42 , we have @xmath60    we introduce lemmas on the basic solution to @xmath36 when there are no less _ free _ jobs than twice the _ free _ machines , namely , @xmath61 .",
    "if @xmath36 is feasible with @xmath61 and @xmath41 is a basic solution , there exist @xmath62 variables with values of @xmath24 .",
    "for a basic solution @xmath41 , we construct _ supporting graph _ @xmath42 .",
    "suppose that @xmath63 of @xmath46 _ free _ jobs are of degree of at most one in @xmath64 .",
    "note that each of them has degree at least one .",
    "each of the rest @xmath65 _ free _ jobs has degree of more than one .",
    "the following inequality holds .",
    "@xmath66    by corollary [ edges_bounding ] , we have @xmath67    the following corollary holds    [ iterative_theorem ] if @xmath36 is feasible with @xmath61 and @xmath41 is a basic solution , there exist a _ free _",
    "machine @xmath68 and a _ free _ job @xmath69 such that @xmath70 .",
    "in this section , we present an approximation algorithm @xmath25 .",
    "let @xmath71 denote the makespan in the solution produced by @xmath25 , @xmath72 denote the makespan in the optimal solution to @xmath73 .",
    "we introduce three bounding theorems on blpr . noting that when @xmath61 we can find a @xmath70 , we can schedule @xmath69 to @xmath68 without increasing the lengths in the fractional solution .",
    "we first show the theorem for the case @xmath61 .",
    "[ main_theorem1 ] given a blpr problem , @xmath36 , with @xmath61 and its basic solution @xmath41 . based on @xmath36",
    ", we construct a new blpr problem @xmath74 as follows :    1 .",
    "find a variable @xmath70 ; 2 .   @xmath75",
    "the rest parts of @xmath74 are the same as @xmath36 .    if @xmath37 is a _",
    "feasible upper bounding vector _ of @xmath36 then @xmath76 is a _",
    "feasible upper bounding vector _ of @xmath74 .",
    "when @xmath77 and some _ free _ machines have _ free _ capacity of one , we have the following theorem .",
    "[ main_theorem2 ] given a blpr problem , @xmath36 , with @xmath77 and its basic solution @xmath41 .",
    "moreover some _ free _ machines have _ free _ capacity of @xmath24 . based on @xmath36",
    ", we construct a new blpr problem @xmath78 as follows :    1 .",
    "let @xmath68 denote a machine with @xmath24 _ free _ capacity ; 2 .",
    "let @xmath69 denote the _ free _ job with the largest length ; 3 .",
    "@xmath75 ; 4 .",
    "@xmath79 ; 5 .",
    "the rest parts of @xmath78 are the same as @xmath36 .    if @xmath37 is a _",
    "feasible upper bounding vector _ of @xmath36 then @xmath76 is a _",
    "feasible upper bounding vector _ of @xmath78 .",
    "to schedule @xmath69 to @xmath68 , for each _ free _ machine @xmath80 with @xmath81 , we move @xmath82 fraction of job @xmath69 to machine @xmath68 then move back from @xmath68 as much as possible but no more than @xmath82 fraction of jobs other than @xmath69 as in algorithm [ g ] .    a blpr @xmath36 with @xmath77 and machine @xmath68 has _ free _",
    "capacity of @xmath24 a blpr @xmath78 let @xmath41 be a basic feasible solution to @xmath36and @xmath69 be the longest _ free _ job ; @xmath83 ; @xmath84 ; @xmath85 ; @xmath86 ;    because @xmath69 has the largest length among the _ free _ jobs , we can guarantee that the length of each _ free _ machine @xmath87 will not increase and the length of machine @xmath68 will increase by at most @xmath88 . note that in @xmath78 , @xmath70 and @xmath68 is no longer _",
    "free_. this implies there is a feasible solution to @xmath78 .",
    "when @xmath77 and every _ free _ machine has more than @xmath24 _ free _ capacity , we can schedule these @xmath46 jobs arbitrarily but only assuring that each machine gets no more than @xmath15 jobs .",
    "one can prove the following theorem .",
    "[ main_theorem3 ] given a feasible blpr problem , @xmath36 , with @xmath77 .",
    "moreover every _ free _ machine has _ free _ capacity of at least @xmath15 .",
    "we construct a new blpr problem @xmath89 as follows :    1 .",
    "schedule _ free _ jobs arbitrarily but only assuring that each machine gets no more than @xmath15 jobs ; 2 .   for",
    "each machine @xmath68 , increase @xmath90 by the sum of job(s ) scheduled to @xmath68 and update @xmath33 accordingly ; 3 .",
    "the rest parts of @xmath89 are the same as @xmath36 .    by doing this ,",
    "we obtain @xmath89 in which all jobs have been scheduled and @xmath89 is feasible .    by theorem [ main_theorem1 ] , as long as @xmath61 , we can always schedule a _",
    "free _ job to a _",
    "free _ machine but without increasing its length .",
    "if @xmath77 , theorem [ main_theorem2 ] and [ main_theorem3 ] guarantee we still can make our decision in a fairly simple way .",
    "we present our algorithm using _ iterative rounding method _ , @xmath25 , in algorithm [ ira ] .",
    "an ip @xmath73 a feasible integral solution @xmath33 construct natural linear programming relaxation @xmath91 ; solve @xmath91 optimally and let @xmath92 be the lengths of machines in the optimal solution ; construct a blpr @xmath36 , letting @xmath93 be the _ upper bounding vector _ and @xmath57 ; [ initialization ] @xmath94 ; [ case1 ] @xmath95 ; [ case2 ] @xmath96 ; [ case3 ] @xmath33 ;    finding a basic solution to a linear program can be done in polynomial time by using the ellipsoid algorithm @xcite then converting the solution found into a basic one @xcite . together with the following observation    at line [ initialization ] , @xmath93 is a _",
    "feasible upper bounding vector _ of @xmath36 .",
    "the correctness of @xmath25 follows from theorem [ main_theorem1 ] , [ main_theorem2 ] and [ main_theorem3 ] .",
    "algorithm @xmath25 always terminates in polynomial time .",
    "the analysis of the performance of @xmath25 is simple with the help of _ upper bounding vector _ @xmath37 , noting that once a component of @xmath37 is increased , the machine will be no longer _",
    "we now show that @xmath25 is a @xmath5-approximation algorithm .",
    "@xmath25 is a @xmath5-approximation algorithm .",
    "consider any machine @xmath68 with length @xmath71 in the solution produced by @xmath25 .",
    "note that once @xmath90 is increased at line [ case2 ] machine @xmath68 will no longer be _",
    "free_. so exactly one of the following statements is true when the algorithm terminates :    1 .",
    "@xmath90 hasnt been increased , then @xmath97 ; 2 .",
    "@xmath90 has been increased once at line [ case2 ] , then @xmath98 for some @xmath69 ; 3 .",
    "@xmath90 has been increased once at line [ case3 ] , then @xmath99 for some @xmath100 .",
    "note that @xmath101 and @xmath102 are two trivial lower bounds of @xmath72 .",
    "also note that after the algorithm terminates , the integral solution produced by @xmath25 , contained in @xmath33 , is also bounded by _",
    "upper bounding vector _ @xmath37 . by definition of _ feasible upper bounding vector _",
    ", we have inequality @xmath103 as expected .",
    "in this paper , we consider the smcc problem , a uniform variation of general scheduling problem , which has capacity constraints on identical machines . using an extension of _ iterative rounding method _ introduced by jain @xcite , we obtain a @xmath5-approximation algorithm .",
    "this is the first attempt to use _ iterative rounding method _ in scheduling problem and it shows the power of _ iterative rounding method_. it is still unknown that whether the approximation ratio can be improved or whether the _ iterative rounding method _ can be used to obtain a good approximation algorithm for the non - uniform version of scheduling problem with capacity constraints .      angel , e. , bampis , e. and kononov , a. : a fptas for approximating the unrelated parallel machines scheduling problem with costs . in : 9th annual european symposium on algorithms , pp.194 - 205 .",
    "august 28 - 31 , ( 2001 ) .",
    "lncs , vol .",
    "2161 , springer - verlag , london , 194 - 205 , ( 2001 )          l. g. khachiyan . : a polynomial algorithm for linear programming ( in russian ) .",
    "doklady akademiia nauk ussr 244 , 10931096 , ( 1979 ) .",
    "a translation appears in : soviet mathematics doklady 20 , 191194 , ( 1979 )      mohit singh , and lap chi lau . :",
    "approximating minimum bounded degree spanning trees to within one of optimal . in : the thirty - ninth annual acm symposium on theory of computing ,",
    "san diego , california , usa , pp.661 - 670 , ( 2007 )          jiawei zhang , and yinyu ye .",
    ": on the budgeted max - cut problem and its application to the capacitated two - parallel machine scheduling . working paper , department of management sciences , the university of iowa , ( 2001 )"
  ],
  "abstract_text": [
    "<S> in the scheduling machines with capacity constraints problem , we are given @xmath0 identical machines , each of which can process at most @xmath1 jobs . </S>",
    "<S> @xmath2 jobs are also given , where job @xmath3 has a non - negative processing time length @xmath4 . </S>",
    "<S> the task is to find a schedule such that the makespan is minimized and the capacity constraints are met . in this paper </S>",
    "<S> , we present a @xmath5-approximation algorithm using an extension of _ iterative rounding method _ introduced by jain @xcite . to the best of the authors knowledge , </S>",
    "<S> this is the first attempt to apply _ iterative rounding method _ to scheduling problem with capacity constraints .    , </S>",
    "<S> scheduling , capacity constraints , iterative rounding </S>"
  ]
}