{
  "article_text": [
    "the concept of _ periodicity _ is fundamental to combinatorics on words and related algorithms : it is difficult to imagine a research contribution that does not somehow involve periods of strings . but periodicity alone may not be the best descriptor of a string ; for example , @xmath9 , a string of length @xmath10 , has period @xmath11 and corresponding @xmath12 , but it could well be more interesting that every position but one in lies within an occurrence of @xmath13 . in 1990",
    "apostolico & ehrenfeucht @xcite introduced the idea of quasiperiodicity : a or of a string is a proper substring of such that any position in is contained in an occurrence of ; is then said to , which is said to be .",
    "thus , for example , @xmath14 is a cover of @xmath15 .",
    "several linear - time algorithms were proposed for the computation of covers @xcite , culminating in an algorithm @xcite to compute the , where @xmath16 $ ] gives the length @xmath17 of the longest cover of @xmath3 $ ] .",
    "since the longest cover of @xmath18 $ ] is also a cover of @xmath3 $ ] , implicitly specifies all the covers of every prefix of .",
    "a recent paper @xcite extends the computation of to `` indeterminate strings '' ( see below for definition ) .",
    "even though the cover of a string can provide useful information , quasiperiodic strings are on the other hand infrequent among strings in general .",
    "another approach to string covering was therefore proposed in @xcite : a set @xmath19 of strings , each of length @xmath20 , is said to be a of if every position in lies within some occurrence of an element of @xmath21 , and no smaller set of @xmath20-strings has this property . thus @xmath22 . in @xcite the computation of @xmath21",
    "was shown to be np - complete , though an approximate polynomial - time algorithm was presented in @xcite .",
    "recall that a of is a possibly empty proper prefix of that is also a suffix : every nonempty string has a border of length zero .",
    "recently the promising idea of an was introduced @xcite ; that is , a border of @xmath0 $ ] that covers a maximum number @xmath23 of positions in . then the @xmath24 is the _",
    "shortest _ border that covers @xmath25 positions , and @xcite presented an algorithm to compute @xmath24 in @xmath26 time .",
    "thus for @xmath9 , @xmath27",
    ". further , on the analogy of the cover array defined above , the authors proposed the @xmath28  for every @xmath29 , @xmath30 = |\\mec(\\s{x}[1 .. i])|$ ] , the length of the minimum enhanced cover of @xmath3 $ ]  and showed how to compute it in @xmath31 time .",
    "in this paper we introduce in addition the @xmath32 array , where @xmath33 $ ] specifies the number of positions in covered by the border of length @xmath34 $ ] .",
    "thus , for example , @xmath35 and @xmath36 .    in order to compute @xmath28 ,",
    "the authors of @xcite made use of a variant of the  that is , an integer array @xmath1 $ ] in which for every @xmath29 , @xmath2 $ ] is the length of the longest border of @xmath3 $ ] . in this paper",
    "we adopt a different approach to the computation of @xmath28 , using , instead of a border array , the @xmath37 $ ] , where for every @xmath29 , @xmath6 $ ] is the length of the longest substring at position @xmath7 of that equals a prefix of .",
    "it has long been folklore that and are `` equivalent '' , but it has only recently been made explicit @xcite that each can be computed from the other in linear time .",
    "however , this equivalence holds only for strings in which each entry @xmath38 $ ] is constrained to be a single element of the underlying alphabet @xmath8 .",
    "we say that a letter @xmath39 is if it is any nonempty subset of @xmath8 , and thus a string is said to be if some constituent letter @xmath38 $ ] is indeterminate .",
    "the idea of an indeterminate string was first introduced in @xcite  with letters constrained to be either regular ( single elements of @xmath8 ) or @xmath8 itself  and the properties of these strings have been much studied by blanchet - sadri @xcite and her collaborators as `` partial words '' or `` strings with holes '' .",
    "indeterminate strings can model dna sequences on @xmath40 when ambiguities arise in determining individual nucleotides ( letters ) .    two indeterminate letters @xmath39 and @xmath41 are said to ( written @xmath42 ) whenever @xmath43 , a relation that is in general nontransitive @xcite : @xmath44 and @xmath45 , but @xmath46 .",
    "an important consequence of this nontransitivity is that the border array no longer correctly describes _ all _ of the borders of : it is no longer necessarily true , as for regular strings , that if is the longest border of , in turn the longest border of , then is a border of . on the other hand",
    ", the prefix array retains all its properties for indeterminate strings and , in particular , correctly identifies all the borders of every prefix of @xcite .",
    "@xcite describes algorithms to compute the prefix table of an indeterminate string ; conversely , @xcite proves that there exists an indeterminate string corresponding to every feasible prefix table , while @xcite describes an algorithm to compute the lexicographically least indeterminate string determined by any given feasible prefix table .",
    "there is thus a many - many relationship between the set of all indeterminate strings and the set of all prefix tables .",
    "consequently , computing @xmath28 ( or simply @xmath47 when there is no ambiguity ) from the prefix table @xmath48 rather than from a variant of the border array allows us to extend the computation to indeterminate strings .    in section  [ sect - method ]",
    "we outline the basic methodology and data structures used to compute the minimum enhanced cover array from the prefix table , while illustrating the ideas with an example .",
    "then section  [ sect - analysis ] provides a proof of the algorithm s correctness , as well as an analysis of its complexity , both worst and average case . in section",
    "[ sect - compare ] we discuss the practical application of our algorithms , in terms of time and space requirements , and compare our prefix - based implementation with the border - based implementation of @xcite .",
    "section  [ sect - extend ] extends the enhanced cover array algorithm to indeteterminate strings ( for rooted covers ) and outlines various other extensions , particularly to generalizations of @xmath47s .",
    "in this section we describe the computation of @xmath28 , the enhanced cover array of , based on the prefix array @xmath49 .",
    "since every minimum enhanced cover of is also a border of , we are initially interested in the covers of prefixes of . for this purpose",
    "we need arrays whose size is @xmath50 , the maximum length of any border of any prefix of . noting that @xmath50 must be the maximum entry in the prefix array @xmath49 , we write @xmath51 $ ] .",
    "[ def - mnc ] in the array @xmath52 $ ] , for every @xmath53 , @xmath54 = q'$ ] , where @xmath55 is the maximum integer in @xmath56 such that the prefix @xmath57 $ ] has no cover  that is , such that @xmath58 = 0 $ ] .",
    "as shown in figure  [ fig - mnc ] , once @xmath50 is computed in @xmath26 time from the prefix array @xmath49 , @xmath59 can be easily computed in @xmath60 time using the cover array @xmath61 $ ] of @xmath62 $ ] . note that the entries in are monotone nondecreasing with @xmath63 \\le q$ ] for every @xmath53 .",
    "the following is fundamental to the execution of our main algorithm :    [ obs - mnc ] if a prefix @xmath64 $ ] of has a cover , then @xmath65 ( since @xmath66 and covers every position covered by ) .",
    "= 0.80in;=3000 compute_mnc@xmath67 @xmath68 $ ] @xmath69 @xmath70 @xmath71)$ ] compute_pcr@xmath72 @xmath73 @xmath50 @xmath74 = 0 $ ]",
    "@xmath54 \\la q$ ] @xmath54 \\la \\s{\\mnc}[q\\m 1]$ ]    thus @xmath75 $ ] specifies an upper bound @xmath76 on the length of a minimum enhanced cover of .",
    "two other arrays are required for the computation , both of length @xmath50 :    [ def - pr / cpr ] for every @xmath53 :    * @xmath77 $ ] is the rightmost position in at which the prefix @xmath78 $ ] occurs ; * @xmath79 $ ] is the number of positions in covered by occurrences of @xmath78 $ ] .    here is an example of the arrays introduced thus far : @xmath80 note that for @xmath81 $ ] and @xmath82 $ ] , there are actually _ two _ borders that cover a maximum number of positions ; in each case the border of minimum length is identified in @xmath83 .    = 0.80in;=3000 compute_mec@xmath84 @xmath85 compute_mnc@xmath67 @xmath86 @xmath73 @xmath50 @xmath79 \\la q$ ] @xmath87 @xmath70 @xmath88 $ ] @xmath89 @xmath90 $ ] @xmath91 < q'$ ] @xmath92 \\la \\s{\\cpr}[q']\\+ i\\m \\s{\\pr}[q']$ ]",
    "@xmath92 \\la \\s{\\cpr}[q']\\+ q'$ ] @xmath93 \\la i$ ] @xmath92",
    "\\ge \\s{\\cmec}[i\\+ q'\\m 1]$ ] @xmath94 \\la q'$ ] @xmath92 > \\s{\\cmec}[i\\+ q'\\m 1]$ ] @xmath95 \\la \\s{\\cpr}[q']$ ] @xmath96    the algorithm compute_mec is shown in figure  [ fig - mec ] . in the first stage ,",
    "@xmath50 and @xmath59 are computed and the arrays , and are initialized .",
    "then every position @xmath97 such that @xmath98 > 0 $ ] is considered .",
    "using , the longest prefix @xmath99 $ ] of @xmath78 $ ] that does _ not _ have a cover is identified ; for prefixes of @xmath78 $ ] that do have a cover , the appropriate and values have already been updated .",
    "there are two main steps in the processing of :    * since @xmath7 has now become the rightmost occurrence of in @xmath3 $ ] , we must set @xmath93 \\la i$ ] and increment the corresponding number @xmath92 $ ] of positions covered . *",
    "if the number @xmath92 $ ] of positions covered by occurrences of exceeds @xmath100 $ ] , then and must be updated accordingly .",
    "these steps are repeated recursively for the longest proper prefix of @xmath101 that does not have a cover .",
    "we begin by proving the correctness of compute_mec , which depends on the prior computation of @xmath48 @xcite . consider first procedure compute_mnc , where @xmath50 is computed , followed by the cover array @xmath61 $ ] .",
    "then for every @xmath53 , @xmath54 \\la q$ ] whenever there is no cover of @xmath78 $ ] , with @xmath54\\ \\la \\s{\\mnc}[q\\- 1]$ ] otherwise , an easy and straightforward calculation .",
    "compute_mec then independently considers positions @xmath102 for which @xmath103 } > 0 $ ] ; that is , such that a border of of length @xmath104 $ ] begins at @xmath7 .",
    "the internal loop then processes in decreasing order of length the prefixes @xmath99 $ ] of @xmath78 $ ] that have no cover  and that therefore , by observation  [ obs - mnc ] , can possibly be minimum enhanced covers of @xmath105 $ ] .",
    "thus , for every @xmath106 , all such borders @xmath78 = \\s{x}[i .. i\\+ q\\- 1]$ ] are considered and , for each one , all such prefixes . for each @xmath55 :    * the number @xmath107 $ ] of positions covered by @xmath101 is updated , as well as the position @xmath108 = i$ ] of rightmost occurrence of ; * @xmath109 $ ] and @xmath110 $ ] are updated accordingly for sufficiently large @xmath107 $ ] .",
    "we claim therefore that    [ thrm - time ] for a given string , compute_mec correctly computes the minimum enhanced cover array @xmath111 and the number @xmath112 of positions covered by it , based solely on the prefix array @xmath113 .",
    "we have seen that in aggregate compute_mec processes a subset of the nonempty borders of every prefix @xmath3 $ ] , devoting @xmath114 time to each one .",
    "as we have seen , each border in each such subset is constrained to have no cover .",
    "we say that a string is if it has a border such that @xmath115 ; otherwise is said to be .",
    "observe that the borders must all be weakly periodic ; if not , then they would have a cover with @xmath115 . in @xcite the following result",
    "is proved :    [ lemm - weak ] there are at most @xmath116 weakly periodic borders of a string of length @xmath70 .",
    "it follows then that for each @xmath106 , there are at most @xmath117 borders considered , thus overall @xmath31 time .",
    "the space requirement of compute_mec , apart from the @xmath49 , and arrays , each of length @xmath70 , consists of three integer arrays ( ( overwriting ) , , ) , each of length @xmath118 .",
    "thus    [ thrm - space ] in the worst case , compute_mec computes and from using    * @xmath31 time ; * three additional arrays @xmath119 of integers @xmath120 , thus @xmath121 bits of space .    now consider the expected ( average ) case behaviour of compute_mec .",
    "this depends critically on the expected length of the maximum border of @xmath122 $ ] ; that is , the expected value of @xmath50 .",
    "we show in the appendix that for a given alphabet size , @xmath50 approaches a limit as @xmath70 goes to infinity .",
    "the limit is approximately 1.64 for binary alphabets , 0.69 for ternary alphabets , and monotone decreasing in alphabet size .",
    "thus    [ thrm - exp ] in the average case , compute_mec requires @xmath123 time and @xmath124 additional bits of space .",
    "as has been mentioned above , in order to compute @xmath28 , the authors of @xcite made use of the .",
    "on the other hand compute_mec is based on the .",
    "we have already highlighted the advantage compute_mec has because of the use of a in lieu of a especially in the context of indeterminate strings .",
    "additionally , the simplicity and low space usage of compute_mec encourage us to compare its practical performance with the algorithm of @xcite . to this end",
    "this can be seen as a comparison between a border - based algorithm ( i.e. , the algorithm of @xcite ) for computing @xmath28 and a prefix - based algorithm ( i.e , compute_mec of the current paper ) for doing the same . in what follows",
    "we will refer to the former algorithm as ecb and the latter as ecp .",
    "we have implemented ecp ( i.e. , compute_mec ) in c # using visual studio 2010 .",
    "we got the implementation of ecb from the authors of @xcite .",
    "however , ecb was implemented in c. to ensure a level playing ground , we re - implemented ecb in c # following their implementation .",
    "then we have run both the algorithms on all binary strings of lengths 2 to 30 .",
    "the experiments have been carried out on a windows server 2008 r2 64-bit operating system , with intel(r ) core(tm ) i7 2600 processor @ 3.40ghz having an installed memory ( ram ) of 8.00 gb .",
    "the results are illustrated in figure [ fig - exp1 ] and [ fig - exp2 ] , where the maximum number of operations carried out by each algorithm is reported in figure [ fig - exp1 ] .",
    "figure [ fig - exp2 ] shows the ratio of the total number of operations performed by the border - based ( ecb ) @xcite and prefix - based ( ecp ) algorithm to the length @xmath70 of string , for all strings on the binary alphabet .",
    "as is evident from figure  [ fig - exp1 ] and [ fig - exp2 ] , ecp outperforms ecb and in fact it does show a linear behaviour verifying the claim in theorem [ thrm - exp ] above .",
    "note that for @xmath125 , ecp requires just over half the average number of operations performed by ecb , with the difference accelerating . ]         of string , for all strings on the binary alphabet . ]",
    "in sections  [ sect - method ] and [ sect - analysis ] we describe an algorithm to compute the minimum enhanced cover array @xmath28 of a given string , based only on the prefix array @xmath113 .",
    "as noted in the introduction , since the prefix array can be computed also for indeterminate strings @xcite , this immediately raises the possibility of extending the @xmath47 calculation to indeterminate strings .    in @xcite two definitions of",
    "`` cover '' for an indeterminate string are proposed : a where adjacent or overlapping covering substrings of must match , and a where each covering substring is constrained only to match a prefix of .",
    "the nontransitivity of matching ( see section  [ sect - intro ] ) inhibits implementation of a sliding cover , but @xcite shows how to compute all the rooted covers of indeterminate from its prefix array in @xmath126 worst case time , @xmath26 in the average case . thus it becomes possible to execute compute_mnc for rooted covers , simply by replacing the function call to compute_pcr by a function call to pcind of @xcite ; that is , to compute the rooted cover array @xmath127 $ ] , hence @xmath128 $ ] and thus @xmath111 , all for indeterminate strings .",
    "let us call this new algorithm compute_mec_ind .",
    "we recall now a lemma from @xcite stating that the expected number of borders in an indeterminate string is bounded above by a constant , approximately 29 .",
    "therefore , also for indeterminate strings , @xmath50 can be treated as a constant , and we have the following remarkable result :    [ thrm - expind ] in the average case , compute_mec_ind requires @xmath123 time and @xmath124 additional bits of space .",
    "we note further that the prefix array can be efficiently computed in a compressed form @xcite , taking advantage of the fact that for @xmath29 , @xmath6 \\ne 0 $ ] if and only if @xmath38 = \\s{x}[1]$ ] .",
    "thus we can use two arrays @xmath129 and @xmath130 to store nonzero positions in and the values at those positions , respectively , thus saving much space in cases that arise in practice .",
    "we have designed a @xmath131 version of compute_mec that space restrictions do not allow us to describe here .",
    "finally , @xcite describes extensions of the minimum enhanced cover array calculation , as follows :    * computation of the enhanced left - cover array of ; * computation of the enhanced left - seed array of .",
    "our prefix array approach yields efficient algorithms for these problems also , that may similarly be extended to rooted covers of indeterminate strings .",
    "99 ali alatabbi , m.  sohel rahman & w.  f.  smyth , * inferring an indeterminate string from a prefix graph * , _ _ ( 2014 ) to appear .",
    "ali alatabbi , m.  sohel rahman & w.  f.  smyth , * computing covers using prefix tables * , http://arxiv.org/abs/1412.3016 .",
    "alberto apostolico & andrzej ehrenfeucht , _ efficient detection of quasi - periodicities in strings _ , tech .",
    "report no .",
    "90.5 , the leonardo fibonacci institute , trento , italy ( 1990 ) .",
    "alberto apostolico , martin farach & c.  s.  iliopoulos , optimal superprimitivity testing for strings , _ inform .  process .",
    "39 - 1 _ ( 1991 ) 17 - 20 .",
    "faizul bari , mohammad sohel rahman , rifat shahriyar , * finding all covers of an indeterminate string in @xmath132 time on average*. _ proc .",
    "prague stringology conference _ ( 2009 ) 263271 widmer bland , gregory kucherov & w.  f.  smyth , * prefix table construction & conversion * , _ proc .",
    "24th iwoca _ , springer lecture notes in computer science lncs 8288 ( 2013 ) 4153 .",
    "francine blanchet - sadri , _ algorithmic combinatorics on partial words _ , chapman & hall / crc ( 2008 ) 385 pp .",
    "d.  breslauer , an on - line string superprimitivity test , _ inform .  process .",
    "44 - 6 _ ( 1992 ) 345 - 347 .",
    "manolis christodoulakis , p ,  j.  ryan , w.  f.  smyth & shu wang , .",
    "* indeterminate strings , prefix arrays & undirected graphs * , submitted for publication ( 2013 ) .",
    "richard cole , c.  s.  iliopoulos , manal mohamed , w.  f.  smyth & lu yang , * the complexity of the minimum k - cover problem * , _ 105/6 _",
    "( 2005 ) 641653 .",
    "michael j.  fischer & michael s.  paterson , * string - matching and other products * , _ complexity of computation , proc .",
    "siam - ams 7 _ ( 1974 ) 113 - 125 .",
    "tom flouri , c.  s. iliopoulos , tomasz kociumaka , solon p.  pissis , simon j.  puglisi , w.  f.  smyth & wojciech tyczyski , * enhanced string covering * , _ 506 _ ( 2013 ) 102114 .",
    "jan holub & w.  f.  smyth , * algorithms on indeterminate strings * , _ proc .",
    "14th _ ( 2003 ) 3645 . c.  s.  iliopoulos , manal mohamed & w.  f.  smyth ,",
    "* new complexity results for the k - covers problem * , _ 181 _ ( 2011 ) 25712575 .",
    "c.  s.  iliopoulos & w.  f.  smyth , * on - line algorithms for k - covering * , _ proc",
    ".  ninth _ ( 1998 ) 6473 .",
    "yin li & w.  f.  smyth , * an optimal on - line algorithm to compute all the covers of a string * , _ algorithmica 321 _ ( 2002 ) 95106 .",
    "dennis moore & w.  f.  smyth , an optimal algorithm to compute all the covers of a string , _ inform .  process .",
    ".  50 _ ( 1994 ) 239 - 246 .",
    "dennis moore & w.  f.  smyth , correction to : an optimal algorithm to compute all the covers of a string , _ inform .  process .  lett .",
    "( 1995 ) 101 - 103 .",
    "bill smyth , _ computing patterns in strings _ , pearson addison - wesley ( 2003 ) 423 pp .",
    "w.  f.  smyth & shu wang , * new perspectives on the prefix array * , _ proc .",
    "15th _ , springer lecture notes in computer science lncs 5280 ( 2008 ) 133143 .",
    "w.  f.  smyth & shu wang , * a new approach to the periodicity lemma on strings with holes * , _ 41043 _ ( 2009 ) 42954302 .",
    "w.  f.  smyth & shu wang , * an adaptive hybrid pattern - matching algorithm on indeterminate strings * , _ 206 _ ( 2009 ) 9851004 .",
    "we write @xmath133 for the length of string @xmath134 . here",
    "we show that the expected length of the longest border of a string approaches a limit as @xmath135 tends to infinity , the limit depending on the alphabet size . for a binary alphabet",
    "it is approximately 1.64 .",
    "we use the following notation .",
    "@xmath136 is the alphabet size , @xmath137 is length of longest border of string @xmath138 and @xmath139 is length of longest border of string @xmath138 which has length at most @xmath20 ( ie , ignoring any borders longer than @xmath20 ) . thus if @xmath140 then @xmath141 since @xmath142 has longest border @xmath143 and @xmath144 since the longest border of @xmath142 which has length at most 4 is @xmath145 .",
    "@xmath146 is the set of all strings of length @xmath70 on an alphabet of size @xmath147 . since @xmath148 contains only the empty string we have @xmath149 .",
    "+            clearly @xmath154",
    ". the expected size of the longest border of a string of length @xmath70 on an alphabet of size @xmath147 is therefore @xmath155 similarly , the expected size of the longest border not exceeding @xmath20 is @xmath156 clearly @xmath157 so @xmath158 note that if @xmath159 then @xmath160 and so @xmath161 now @xmath162 so if @xmath159 , @xmath163 with ( [ e1 ] ) we then have , for @xmath159 , @xmath164    now any border that is counted in the right hand side of ( [ e0 ] ) but not counted on the right hand side of ( [ e0.5 ] ) has length at least @xmath165 .",
    "the sum of the lengths of such borders is , by lemma [ l1 ] , @xmath166 so , by lemma [ l2 ] and ( [ e3 ] ) , @xmath167    thus for all @xmath168 @xmath169 so they re contained in an arbitrarily small interval . call this interval @xmath170 and define @xmath171 and for @xmath172 @xmath173 .",
    "then @xmath174 is a sequence of nested intervals whose lengths have limit 0 . by the nested intervals theorem",
    "this means the limit of @xmath175 exists ."
  ],
  "abstract_text": [
    "<S> a of a string @xmath0 $ ] is a proper substring of such that can be constructed from possibly overlapping instances of . </S>",
    "<S> a recent paper @xcite relaxes this definition  an of is a border of ( that is , a proper prefix that is also a suffix ) that covers a _ maximum _ number of positions in ( not necessarily all )  and proposes efficient algorithms for the computation of enhanced covers . </S>",
    "<S> these algorithms depend on the prior computation of the @xmath1 $ ] , where @xmath2 $ ] is the length of the longest border of @xmath3 $ ] , @xmath4 . in this paper </S>",
    "<S> , we first show how to compute enhanced covers using instead the : an array @xmath5 $ ] such that @xmath6 $ ] is the length of the longest substring of beginning at position @xmath7 that matches a prefix of . unlike the border array , the prefix table is robust : its properties hold also for  that is , strings defined on _ subsets _ of the alphabet @xmath8 rather than individual elements of @xmath8 . </S>",
    "<S> thus , our algorithms , in addition to being faster in practice and more space - efficient than those of @xcite , allow us to easily extend the computation of enhanced covers to indeterminate strings . both for regular and indeterminate strings , </S>",
    "<S> our algorithms execute in expected linear time . along the way we establish an important theoretical result : that the expected maximum length of any border of any prefix of a regular string is approximately 1.64 for binary alphabets , less for larger ones . </S>"
  ]
}