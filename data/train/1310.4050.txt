{
  "article_text": [
    "we present here an extension of cook s elastic block cipher .",
    "her extension @xmath4 allows to construct an elastic cipher of length from @xmath0 to @xmath1 , where @xmath0 was the message length of the fixed input length block cipher @xmath5 .",
    "she related the security against key recovery attack of the elastic to that of the initial block cipher round function , using it as a black box .",
    "we start from @xmath4 and apply the elastic extension to @xmath4 itself , obtaining @xmath6 and we relate its security against key recovery attacks to that of @xmath4 , and we repeat the process to build iteratively an elastic extension @xmath7 of @xmath5 which takes inputs of length @xmath8 up to @xmath9 .",
    "+ section [ seccook ] gives a brief description of cook s idea reminding which are the key schedule requirements .",
    "section [ seccookext ] describes our extension , showing the algorithm to encrypt a plaintext of length @xmath10 , with @xmath11 .",
    "section [ secsecurity ] is devoted to the security of @xmath7 , first analyzing how the extension influences the diffusion properties of the round function of @xmath5 , and second giving a proof of how the security against key recovery attack of @xmath7 is reduced to that of @xmath5 .",
    "this is made following and extending cook s proof for @xmath4 .",
    "let @xmath12 , @xmath13 . let @xmath14 denote the set of all binary strings with length at least @xmath15 .",
    "the function @xmath16 denotes the length of the string @xmath17 .",
    "a _ message / plaintext space _",
    "@xmath18 is a nonempty subset of @xmath19 for which @xmath20 implies that @xmath21 for all @xmath22 of the same length of @xmath17 .",
    "a _ ciphertext space _ ( or _ range _ ) @xmath23 is a nonempty subset of @xmath19 . from now on , @xmath24 .",
    "a _ key space _",
    "@xmath25 is a nonempty set together with a probability measure on that set .",
    "a _ pseudorandom permutation _ ( prp ) with key space @xmath25 , message space @xmath18 and range @xmath23 is a set of permutations @xmath26 where each @xmath27 .",
    "we usually write @xmath28 .",
    "we assume that @xmath29 depends only on @xmath16 .",
    "a _ variable input length ( vil ) cipher _ is a prp @xmath30 .",
    "a _ block - cipher round _ ( or simply a _ round _ ) is a key - dependent permutation of the message / ciphertext space , precisely @xmath31 . as usual",
    "we can consider @xmath32 to denote the vector space @xmath33 .",
    "the number @xmath15 is called the _ block length_. we consider rounds made of a round function ( which is an invertible boolean function indicated with the letter @xmath34 , and that may be applied to just some of the round input bits , as in des ) , followed by an affine map and a sum with the round key .",
    "block - cipher ( bc ) _ is a cipher @xmath35 obtained from the composition of @xmath36 rounds , whose keys are generated from the cipher key @xmath37 by a key schedule .",
    "we write @xmath38 with @xmath39 and @xmath37 .",
    "call @xmath5 a block cipher with input length @xmath0 , composed by @xmath40 rounds , where the @xmath41th round is indicated by @xmath42 , with @xmath43 .",
    "the _ cycle of a block cipher _ is a boolean function made of the least , over any key , number ( called length ) of consecutive rounds such that each bit of the cycle output is a function of at least two input bits .",
    "we consider only ciphers that can be divided in cycles of the same length .",
    "suppose @xmath5 has @xmath44 cycles , and let @xmath45 be @xmath5 @xmath46th cycle function ( @xmath47 where @xmath48 is the number of rounds per cycle ) .",
    "consider only block ciphers whose round function has a whitening as last operation ( this is very common in real cipher such as aes , serpent des , ... ) .",
    "@xmath5 has @xmath49 rounds .",
    "we can define now @xmath4 , the _ elastic extension _ of @xmath5    [ defelastic ] is given by cook @xcite .",
    "] an _ elastic cipher _",
    "@xmath4 of @xmath5 is a vil cipher with message space @xmath50 with @xmath51 , constructed from @xmath5 as follows :    * the number of rounds of @xmath4 is @xmath52 * @xmath4 s @xmath41th round @xmath53 has one @xmath5 s cycle as round function , whose input are the leftmost @xmath0 bits and whose last sum with the key is expanded to the rightmost @xmath54 bit string @xmath55 that is not input into the @xmath5 cycle ; the round function @xmath56 is followed by a swap and an exor : 1 .",
    "call @xmath57 the rightmost @xmath54 bit string which is the bit - wise sum of @xmath55 with @xmath54 key bits . 2 .",
    "choose a @xmath54 bit string @xmath58 from the output of the cycle and let its bits be the rightmost ones of @xmath53 output ; 3 .",
    "replace @xmath58 with @xmath59 * add an initial and final whitening * add an initial and final key - dependent permutation ( as in @xcite ) between the initial and final whitening and the rounds .",
    "we give three requirements for the key schedule taken from @xcite which can be satisfied if we use a pseudorandom generator ( e.g. rc4 as in @xcite ) :",
    "our proposal is to consider an elastic cipher @xmath4 working with fixed length messages ( as it was a block cipher ) , and apply iteratively the elastic extension to it .",
    "we can define a cycle of an elastic cipher exactly as a cycle for a block cipher :    the _ cycle @xmath60 of an elastic cipher @xmath4 _ , with @xmath61 , is a boolean function made of the least , over any key , number of consecutive @xmath4 s rounds such that each bit of @xmath60 output is a function of at least two input bits .",
    "now we are ready to construct @xmath6 , @xmath62 , ... , @xmath7 , simply by iterating the previous process .",
    "the first round function of @xmath6 looks like fig.[fig4 ] , whose notation is explained in the following lines :    * the subscripts @xmath63 indicate respectively the @xmath0 leftmost , the @xmath0 second leftmost and the @xmath64 rightmost bits of the input @xmath65 or of the key @xmath66 .",
    "* @xmath67 is the round function of @xmath68 used in round @xmath41 of @xmath68 .",
    "* @xmath69 is the cycle function of @xmath68 used as round function in round @xmath41 of @xmath70 .",
    "* @xmath71 is a portion of bits of the key @xmath66 , where @xmath72 $ ] indicates a set of indexes . in fig.[fig4 ] we have : @xmath73 $ ] , @xmath74 $ ] , @xmath75 $ ] .",
    "* @xmath76 is the portion @xmath77 of the input of the @xmath78th round , or equivalently the output of the @xmath41th round .",
    "similarly for @xmath79 and @xmath80 .",
    "( 0,-3.7992187)(10.589063,3.7992187 ) ( 5.51,2.8657813)(3.51,1.6657813 ) ( 7.51,2.2657812)(3.51,1.6657813 ) ( 5.51,1.2657813)(3.51,0.66578126 ) ( 4.51,2.8657813)(4.51,3.2657812 ) ( 6.51,2.2657812)(6.51,3.2657812 ) ( 4.51,1.2657813)(4.51,1.6657813 ) ( 4.51,1.2657813)(6.51,1.6657813 ) ( 6.51,1.2657813)(4.51,1.6657813 ) ( 8.391898,1.7531185)(8.123966,1.7531185)(8.391898,2.9257812)(8.123966,2.8280594 ) ( 8.391898,1.7531185)(7.99,1.6553966)(8.391898,0.4827338)(8.123966,0.58045566 ) ( 1.0245312,-0.32921875)@xmath81 ( 4.474531,2.5707812)@xmath82 ( 4.4645314,0.99078125)@xmath83 ( 6.474531,1.9707812)@xmath84 ( 4.4845314,3.5507812)@xmath85 ( 6.4445314,3.5907812)@xmath86 ( 8.004531,3.5307813)@xmath87 ( 5.51,0.28578126)(3.51,-0.9142187 ) ( 7.51,-0.31421876)(3.51,-0.9142187 ) ( 5.51,-1.3142188)(3.51,-1.9142188 ) ( 4.51,0.28578126)(4.51,0.68578124 ) ( 6.51,-0.31421876)(6.51,1.2657813 ) ( 4.51,-1.3142188)(4.51,-0.9142187 ) ( 4.51,-1.3142188)(6.51,-0.9142187 ) ( 6.51,-1.3142188)(4.51,-0.9142187 ) ( 4.51,-3.3342187)(4.51,-1.9142188 ) ( 6.51,-2.3142188)(6.51,-1.3342187 ) ( 4.474531,-0.00921875)@xmath88 ( 4.4645314,-1.5892187)@xmath83 ( 6.474531,-0.6092188)@xmath89 ( 6.4645314,-2.5892189)@xmath83 ( 8.51,-0.33421874)(7.51,-0.93421876 ) ( 7.974531,-0.62921876)@xmath90 ( 7.99,-0.33421874)(7.99,3.2857811 ) ( 4.4645314,-3.5692186)@xmath91 ( 6.4645314,-3.5692186)@xmath92 ( 7.884531,-3.5692186)@xmath93 ( 6.51,-3.3342187)(6.51,-2.9342186 ) ( 7.91,-1.9342188)(7.91,-0.93421876 ) ( 6.51,-2.3342187)(7.91,-1.9342188 ) ( 7.91,-2.3342187)(6.51,-1.9342188 ) ( 7.91,-3.3342187)(7.91,-2.3342187 ) ( 7.51,2.8657813)(3.51,0.46578124 ) ( 7.51,0.46578124)(3.51,-1.9342188 ) ( 7.11,-2.3342187)(5.91,-2.9342186 ) ( 9.464531,1.7907813)@xmath94 ( 3.1917381,0.8977824)(3.4839127,0.8977824)(3.1917381,-0.9742165)(3.4839127,-1.8182166 ) ( 3.1917381,0.8977824)(3.63,1.0537823)(3.1917381,2.9257812)(3.4839127,2.7697814 ) ( 2.13,-0.39495495)(2.3979259,-0.39495495)(2.13,-3.534096)(2.3979259,-3.272501 ) ( 2.13,-0.39495495)(2.5318887,-0.13335985)(2.13,3.0057812)(2.3979259,2.7441862 ) ( 2.8245313,0.87078124)@xmath95      call @xmath7 an elastic cipher of @xmath5 of _ level _ @xmath15 .",
    "@xmath15 is also called the level of the extension @xmath7 .",
    "@xmath7 is able to encipher blocks from length @xmath8 to @xmath9 .",
    "we ll call @xmath96 and @xmath97 respectively the round and the cycle functions of @xmath7 .",
    "@xmath98 ( and @xmath99 ) indicates respectively the number of round ( cycles ) @xmath7 .",
    "@xmath100 with @xmath101 , indicates the number of rounds of @xmath102 used in @xmath7 .    the level increases by 1 when the message length doubles , and in general the level increases by @xmath103 when the length passes from @xmath9 to @xmath104 , which means the level increases logarithmically in respect to the message length .",
    "once @xmath15 is fixed , only @xmath7 takes variable inputs and has initial and final key - dependent permutations , all other @xmath105 , with @xmath106 , take as input messages of fixed length @xmath107 and do not have initial and final key - dependent permutation .",
    "here we give explicitly the steps to encipher a message of any length greater than @xmath0 using an extended elastic cipher of a certain level , obtained from a fil block cipher @xmath5 that works on messages of length @xmath0 .",
    "this algorithms are the definition of @xmath7 .",
    "furthermore we give some theorems and their proofs to understand the formulas used .",
    "we divide the enciphering algorithm in two parts : initialization of @xmath7 and encryption . for brevity , in this article",
    ", we will omit the algorithm for decryption and @xmath108 .",
    "the following algorithm initializes the elastic cipher @xmath7 , given a message @xmath65 of given length .",
    "+ input : @xmath65 .",
    "+ output : the level @xmath15 , the exponent @xmath54 , the number of rounds @xmath109 , the key length , @xmath66 a random vector of length @xmath110 .    1 .",
    "determine the level @xmath15 of the elastic extension as the least power of 2 such that @xmath111 2 .",
    "determine @xmath112 //",
    "@xmath113 is the length function .",
    "determine @xmath114 has the property that it is the least number of @xmath7 rounds such that , in @xmath7 , each input bit influences @xmath5 round function the same number of times it influences the same round function in @xmath5 .",
    "determine the key @xmath66 : determine the key length : //",
    "( see th.[thkeylength ] ) + @xmath115\\}\\cdot r_n+2^nl+2y+k_{perm}$ ] fill a @xmath110 string with random bits //",
    "e.g. using a pseudorandom generator      steps to encrypt a message @xmath65 with @xmath7 initialized .",
    "+ input : @xmath116 .",
    "+ output : @xmath65 encrypted .",
    "1 .   @xmath117 //",
    "@xmath103 is a pointer to the first bit not used of the key .",
    "2 .   @xmath118}$ ] //initial whitening 3 .",
    "@xmath119 4 .",
    "@xmath120})$ ] //key dependent permutation , @xcite .",
    "@xmath121 // move the pointer @xmath103 .",
    "@xmath122 7 .   for @xmath123 1 .",
    "@xmath124}=cyclefunction(p_{[0, ... ,2^{n-1}l-1]},n-1)$ ] // cycle of @xmath125 2 .",
    "@xmath126}=p_{[2^{n-1}l, ... ,2^{n-1}l+y-1]}\\oplus k_{[k, ... ,k+y-1]}$ ] //add key 3 .",
    "@xmath127 4 .",
    "@xmath128}=p_{[j, ... ,j+y-1]}$ ] //@xmath55 is a temporary value for the swap steps 5 .",
    "@xmath129}=p_{[j, ... ,j+y-1]}\\oplus p_{[2^{n-1}l, ... ,2^{n-1}l+y-1]}$ ] .",
    "@xmath46 fixed would not influence the proof of security . ]",
    "@xmath126}=t_{[0, ... ,y-1]}$ ] // ( d)-(e)-(f ) are the swap / exor steps .",
    "@xmath130 8 .",
    "@xmath120})$ ] 9 .",
    "@xmath121 10 .",
    "@xmath118}$ ] 11 .",
    "return @xmath65      cycle of @xmath102 , used in the encryption function .",
    "+ input : the bit string @xmath17 , the level @xmath132 of the cycle function ( @xmath17 has length @xmath133 ) .",
    "+ output : the @xmath133 bit string @xmath17 processed by @xmath134 .    1 .",
    "if @xmath135 then 1 .   for @xmath136 do 1 .",
    "@xmath137 2 .",
    "@xmath138 2 .",
    "return m 2 .   if @xmath139 then 1 .",
    "@xmath140}$ ] 2 .",
    "@xmath141}$ ] 3 .",
    "for @xmath142 do 1 .",
    "@xmath143 2 .",
    "@xmath144}$ ] 3 .",
    "@xmath145 4 .",
    "@xmath146 5 .",
    "@xmath147 6 .",
    "@xmath148 4 .",
    "return @xmath149      @xmath98 does not represent how many rounds of level @xmath132 are in @xmath7 , but how many rounds of level @xmath15 are in @xmath7 . to know how many times the cycle function ( or equivalently the round function ) of @xmath102 is used in @xmath7 , then we need the following :    [ number of rounds @xmath150 in @xmath7][thnumroundsr0 ] the number of rounds of level @xmath132 in @xmath7 is : @xmath152 in particular , which means polynomially ( in our case linearly ) with the input length @xmath9 . ]",
    "if @xmath135 : @xmath153    the following theorem , beside giving an explicit formula for the key bits needed for encryption shows that cook s third requirement for the key schedule is satisfied because the key expansion rate grows polynomially with the input length .",
    "let s call @xmath154 the function that gives the number of bits needed for the key of the cycle of level @xmath15 , or simply the key length of cycle @xmath97 .",
    "[ thkeylength ] if we consider @xmath7 with initial and final whitening and key - dependent permutation , the number of bits needed as key bits is : @xmath155\\}\\cdot r_n+2^nl+2y+k_{perm}\\ ] ]",
    "in her paper , @xcite , cook shows that if complete diffusion occurs after @xmath3 cycles in @xmath5 ( the fixed length block cipher ) , then it occurs after at most @xmath2 rounds in @xmath4 ( the elastic version of @xmath5 ) .",
    "we extend this proof for @xmath7 .",
    "[ thcompldiff ] if complete diffusion occurs after @xmath3 cycles in @xmath125 ( an elastic cipher working with length message @xmath8 ) , then it occurs after at most @xmath2 rounds in @xmath7(the elastic version of @xmath125 ) .    according to @xcite ,",
    "complete diffusion is achieved in @xmath3 rounds _ if every single bit input to a @xmath156-bit block cipher influences the value in all @xmath156 bits after @xmath3 rounds _ , where we say that a @xmath3 rounds input bit @xmath157 influences a @xmath3 rounds output bit @xmath158 if _ changing @xmath157 , while holding all other @xmath159 input bits constant , causes @xmath158 to change with probability @xmath160 , when the probability is taken over all possible values of other input bits and the key bits are held constant_. + first notice that whitening does not impact diffusion , so , for the purposes of our proof , we can view the elastic expansion without them .",
    "+ we can see that each of the first @xmath161 input bits @xmath158 that influences a bit in position @xmath46 of the output of @xmath162 will influence one ( or more ) bit in position @xmath46 of the output of @xmath96 , and if @xmath157 influences a bit exored after the cycle , then @xmath157 will also influence a output bit of @xmath96 in position between @xmath8 and @xmath163 .",
    "+ so , if we have complete diffusion in @xmath125 after @xmath3 rounds , then , in @xmath7 , the first @xmath8 input bits will keep influencing all @xmath164 output bits after @xmath3 rounds .",
    "+ in @xmath7 , the rightmost @xmath54 bits of the input do not influence the first cycle , but because of the swap step they influence the second cycle and since then they will influence all the cycles and will reach complete diffusion after @xmath2 cycles .",
    "we now illustrate how the elastic expansion impacts on the probabilities that a bit of the output of a round function changes , given that one input bit changed while keeping all other input bits fixed , and with constant key bits .",
    "+ consider a black box @xmath165 that works with a @xmath0 bit string ( which represents our cycle function ) .",
    "we call the input bit string @xmath166 and the output bit string @xmath167 , and we denote a single input bit ( in position @xmath41 ) @xmath168 and a single output bit ( in position @xmath46 ) @xmath169 , where @xmath170 .",
    "consider the following experiment @xmath77 :    1 .",
    "initialize four counters @xmath171 .",
    "2 .   choose position @xmath172 for an input bit @xmath168 and an output bit @xmath173 .",
    "3 .   fix all other input bit to some value .",
    "fix @xmath174 , calculate @xmath175 and take note of the value assumed by @xmath173 .",
    "fix @xmath176 , calculate @xmath175 and take note of the value assumed by @xmath173 . 6 .",
    "if @xmath173 was equal to 0 both in point 4 and 5 then @xmath177 .",
    "+ if @xmath173 was equal to 1 both in point 4 and 5 then @xmath178 .",
    "+ if @xmath173 was equal to 0 in point 4 and to 1 in point 5 then @xmath179 .",
    "+ if @xmath173 was equal to 1 in point 4 and to 0 in point 5 then @xmath180 .",
    "repeat the experiment for all other @xmath181 possible values of the input .    denote the number of times we had a change in the bit @xmath173 with @xmath182 , and denote the number of times the value in @xmath46th position remained equal with @xmath183 .",
    "+ at the end of the experiment , changing the bit in position _",
    "i _ of the input produces a change in the bit in position @xmath46 of the output with probability @xmath184 and does not produce a change with probability @xmath185 .",
    "+ the ideal situation for a cycle function is when @xmath186 . +",
    "now consider a second experiment @xmath187 , where we have the same black box @xmath165 as in experiment @xmath77 , and where we add some new steps , which are the elastic steps that influence diffusion , namely the exor and swap steps .",
    "as in fig.[fig10 ] @xmath188 .",
    "( 0,-1.6792188)(9.449062,1.6792188 ) ( 6.57,0.8257812)(3.37,0.22578125 ) ( 4.97,-0.17421874)(4.17,-0.77421874 ) ( 4.97,0.8257812)(4.97,1.2257812 ) ( 4.57,-0.17421874)(4.57,0.22578125 ) ( 4.57,-0.17421874)(6.97,0.22578125 ) ( 6.97,0.22578125)(6.97,1.2257812 ) ( 6.97,-0.17421874)(4.57,0.22578125 ) ( 6.97,-1.1742188)(6.97,-0.17421874 ) ( 4.57,-1.1742188)(4.57,-0.77421874 ) ( 4.9245315,1.4507812)@xmath168 ( 4.5445313,-0.46921876)@xmath83 ( 5.0445314,0.51078125)@xmath165 ( 6.9445314,1.4707812)@xmath189 ( 7.094531,-1.3892188)@xmath190 ( 4.3145313,-1.4492188)@xmath191    now the input bit string has @xmath192 bits .",
    "+ we want to repeat the experiment with this new scheme to see how the elastic expansion acts on the probability of a change in one single output bit given a variation in one single input bit . + first consider the output of @xmath165 .",
    "we observe that repeating the experiment @xmath193 times the output string right after the black box , and @xmath194 will indicate its @xmath46th bit ] will give @xmath195 , where @xmath196 denotes the number of times the @xmath46th output bit passed from @xmath36 to @xmath197 in the experiment @xmath198 , with @xmath199 .",
    "this is because we are actually repeating the experiment @xmath77 @xmath200 times , with the leftmost @xmath54 bits not influencing the function @xmath165 .",
    "this gives that @xmath201 .",
    "+ now consider the output of the entire experiments . because last @xmath54 bits do not influence the black box function , they do not influence the part of the final output of the experiment @xmath187 that does not come from the output of the last exor .",
    "so we are interested in analyzing the bits of the output in those position @xmath46 influenced by the exor step . + through the entire experiment @xmath187 , the bit @xmath202 will be exored half of the times with 0 and half of the times with 1 ( which come from the rightmost @xmath54 bits ) .",
    "this means that if we counted , for instance , @xmath203 times for the @xmath46th output bit of @xmath165 not changing from 0 , after the exor we will count @xmath204 times for the @xmath46th output bit of the exor not changing from 0 . with the same reasoning",
    "we obtain the following scheme : + @xmath205 the probability a bit of the output ( in position @xmath46 ) changed given a change of one bit in the input ( in position @xmath41 ) is : @xmath206    and similarly @xmath207 .",
    "+ this means that @xmath173 ( when @xmath46 is a position included between the positions coming from the exor output ) changes with probability @xmath208 , given a variation of @xmath168 .",
    "+ reasoning as in theor .",
    "[ thcompldiff ] , and with the last results , we can conclude that :    [ thidealdiff ] if ideal diffusion occurs after @xmath3 cycles in @xmath125 ( an elastic cipher working with length message @xmath8 ) , then it occurs after at most @xmath2 rounds in @xmath7(the elastic version of @xmath125 ) .",
    "the fact that after the exor each bit changes with probability 50% is a good result but it may be a weakness . because an adversary could distinguish a block cipher from the elastic cipher if the elastic round function @xmath209 does not achieve ideal diffusion after a certain number of rounds ; it would be sufficient to implement the experiment we described for a reasonable amount of input messages and see if there is an output bit sequence that change with probability @xmath210 , while all other output bit change with probability significantly different from @xmath210 .",
    "[ thseckeyrec ] given an elastic cipher , @xmath125 of level @xmath211 ( without initial and final whitening and key - dependent permutation ) , working on @xmath8-bit blocks and its elastic version , @xmath7 , that works on @xmath212-bit blocks , where @xmath213 , if there exists an attack , @xmath214 , on @xmath7 that allows the round keys to be determined for @xmath36 consecutive rounds of @xmath7 using @xmath215 operation , then there exists an attack @xmath216 on @xmath125 with @xmath36 cycles that finds the expanded key for @xmath125 and that uses @xmath217 , assuming there are no message - dependent expanded key , meaning any expanded - key bits utilized in @xmath125 depend only on the key and do not vary across plaintext or ciphertext inputs .",
    "in particular , if @xmath214 is polynomial then @xmath216 is polynomial .",
    "we show how the attack @xmath214 can be converted to an attack to @xmath125 in polynomial time .",
    "+ suppose we want to find a set of cycles keys @xmath218 that enciphered the set of @xmath197 messages @xmath219 in the ciphertexts @xmath220 using the elastic cipher @xmath125 working with blocks of length @xmath8 . + first of all notice that we put an exponent @xmath46 to @xmath25 , because there may be more than one set of cycle keys enciphering the same couples @xmath221 for @xmath222 .",
    "one set is sufficient for us . to find the set of keys @xmath223 build an attack as follows .",
    "+ consider the sets : @xmath224 and @xmath225 , where @xmath226 is the bit string @xmath227 followed by @xmath54 zeros ( we could choose any fixed string of @xmath54 bits instead of all zeros ) , and @xmath228 is the bit string @xmath229 followed by any string of @xmath54 bits .",
    "+ the elements of the sets @xmath230 and @xmath231 fit as input and output for a @xmath36-rounds reduced elastic extension @xmath7 of @xmath125 .",
    "+ so we can apply the attack @xmath214 to the set of pairs @xmath232 and obtain a set @xmath233 of @xmath234 sets @xmath235 @xmath236 of @xmath36 round keys for @xmath7 in polynomial time in @xmath0 and @xmath36 .",
    "view this in fig.[fig12 ] .",
    "( 0,-3.8692188)(5.2490625,3.8692188 ) ( 1.89,3.0157812)(0.49,2.4157813 ) ( 1.89,2.4157813)(0.49,1.8157812 ) ( 1.49,2.4157813)(0.89,1.8157812 ) ( 1.49,1.4157813)(0.89,0.81578124 ) ( 2.49,2.4157813)(1.89,1.8157812 ) ( 2.49,3.0157812)(0.49,0.81578124 ) ( 1.09,3.0157812)(1.09,3.4157813 ) ( 2.09,3.0157812)(2.09,3.4157813 ) ( 1.09,1.4157813)(1.09,1.8157812 ) ( 1.09,0.41578126)(1.09,0.81578124 ) ( 1.09,1.4157813)(2.09,1.8157812 ) ( 2.09,1.4157813)(1.09,1.8157812 ) ( 2.09,0.41578126)(2.09,1.4157813 ) ( 2.49,2.8157814)(2.89,2.8157814 ) ( 2.49,2.2157812)(2.89,2.2157812 ) ( 1.89,-0.7842187)(0.49,-1.3842187 ) ( 1.89,-1.3842187)(0.49,-1.9842187 ) ( 1.49,-1.3842187)(0.89,-1.9842187 ) ( 1.49,-2.3842187)(0.89,-2.9842188 ) ( 2.49,-1.3842187)(1.89,-1.9842187 ) ( 2.49,-0.7842187)(0.49,-2.9842188 ) ( 1.09,-0.7842187)(1.09,-0.18421875 ) ( 2.09,-0.7842187)(2.09,-0.18421875 ) ( 1.09,-2.3842187)(1.09,-1.9842187 ) ( 1.09,-3.3842187)(1.09,-2.9842188 ) ( 1.09,-2.3842187)(2.09,-1.9842187 ) ( 2.09,-2.3842187)(1.09,-1.9842187 ) ( 2.09,-3.3842187)(2.09,-2.3842187 ) ( 2.49,-0.9842188)(2.89,-0.9842188 ) ( 2.49,-1.5842187)(2.89,-1.5842187 ) ( 1.0645312,3.6607811)@xmath237 ( 2.0645313,3.6607811)@xmath238    ( 1.0645312,2.7207813)@xmath239 ( 3.5045313,2.7407813)@xmath240 ( 1.1345313,-1.0792187)@xmath241 ( 3.5045314,-0.99921876)@xmath242 ( 3.3545313,2.2407813)@xmath243 ( 3.3845313,-1.6392188)@xmath244 ( 2.2045312,2.1407812)@xmath245 ( 1.1445312,1.1207813)@xmath83 ( 2.2045313,-1.6792188)@xmath246 ( 1.1245313,-2.6792188)@xmath83 ( 0.9845312,0.28078124)@xmath247 ( 2.0445313,0.22078125)@xmath248 ( 3.0245314,-3.5992188)@xmath249 ( 0.9945313,-3.6392188)@xmath250    from @xmath233 we choose one of the possible set of round keys , namely @xmath251",
    ". we can find @xmath252 in the following way .",
    "the last operation in @xmath239 is a whitening of @xmath8 bits .",
    "call this key bit string @xmath253}^j$ ] , then set : @xmath254}^j=\\\\ k_{c_{n-1,1}[0,\\ldots,2^{n-1}l-1]}^{j ' } \\oplus ( 0 \\| ... \\| 0 \\| k_{w_1[2^{n-1}l, ...",
    ",2^{n-1}l+y-1]}^{j ' } \\| 0 \\| ...",
    "\\| 0)\\end{gathered}\\ ] ]      ( 0,-1.12)(15.989062,1.12 ) ( 5.403333,1.12)(1.21,0.52 ) ( 5.403333,0.52)(1.21,-0.08 ) ( 10.63,1.12)(6.41,0.52 ) ( 10.63,0.52)(6.41,-0.08 ) ( 14.31,0.52)(10.59,-0.08 ) ( 10.61,-0.48)(6.41,-1.12 ) ( 8.623333,-0.44)(8.623333,-0.04 ) ( 8.63,-0.48)(11.07,-0.08 ) ( 5.63,0.32)(6.31,0.32 ) ( 5.63,0.52)(6.31,0.52 ) ( 5.63,0.72)(6.31,0.72 ) ( 7.2166667,-0.48)(7.2166667,-1.08 ) ( 9.996667,-0.5)(9.996667,-1.1 ) ( 3.2845314,0.825)@xmath239 ( 3.2945313,0.225)@xmath255}^j$ ] ( 8.574532,0.205)@xmath255}^{j'}$ ] ( 12.394532,0.225)@xmath256}^{j'}$ ] ( 8.544531,0.845)@xmath239 ( 8.544531,-0.775)@xmath83 ( 10.304531,-0.775)@xmath257 ( 6.804531,-0.795)@xmath238    once we got @xmath255}^j$ ] we put the remaining bits of @xmath252 equal to the remaining bits of @xmath240 , obtaining the desired cycle key @xmath252 . with this key",
    "we determine : @xmath258 where @xmath259 is the cycle function obtained using the cycle key @xmath252 .",
    "+ notice that we can sum the last @xmath54 key bits of the whitening step because the message to which they are exored is known all zeros in our case ; this is the reason why we can not do the same thing with the next cycle key but we have to restart a new attack as we are going to explain .",
    "now we repeat the process mounting the attack to a @xmath260 round reduced extension @xmath7 of @xmath125 , using the couples @xmath261 and we find one by one the cycle keys @xmath252 , with @xmath262 .",
    "the attack is done applying @xmath214 @xmath36 times with @xmath197 pairs of ( plaintext , ciphertext ) and running one cycle of @xmath125 for each pair , for a total of @xmath263 application of @xmath162 .",
    "if @xmath214 requires to know the output of each round of the reduced round version of @xmath7 , then @xmath264 rounds of @xmath7 have to be computed . if we call @xmath215 the time to run the attack , then the total number of operation required for the reduction is @xmath265 . in her theorem",
    ", cook also considers the time to check that an expanded key found by @xmath214 adheres to the key schedule of @xmath5 . for us",
    "it is not necessary since the key schedule of @xmath125 is a pseudorandom generator and as such , any bit sequence must fit .",
    "cook , d. : elastic block ciphers .",
    "thesis , columbia university , ( july 2006 ) .",
    "cook , d. , keromytis , a. , yung , m. : elastic block ciphers : the basic design . in asiaccs",
    "07 : proceedings of the 2nd acm symposium on information , computer and communications security , pages 350 - 352 , new york , ny , usa , ( 2007 ) .",
    "cook , d. , keromytis , a. , yung , m. : elastic block ciphers in practice : methods , security and instantiations . ? ? ? .",
    "cook , d. , keromytis , a. , yung , m. : the security of elastic block ciphers against key - recovery attacks . in proceedings of information security ,",
    "lncs 4779 , springer - verlag , ( 2007 ) ."
  ],
  "abstract_text": [
    "<S> given a block cipher of length @xmath0 cook s elastic cipher allows to encrypt messages of variable length from @xmath0 to @xmath1 . given some conditions on the key schedule , cook s elastic cipher is secure against any key recovery attack if the underlying block cipher is , and it achieves complete diffusion in at most @xmath2 rounds if the underlying block cipher achieves it in @xmath3 rounds . </S>",
    "<S> we extend cook s construction inductively , obtaining an elastic cipher for any message length greater than @xmath0 with the same properties of security as cook s elastic cipher . </S>"
  ]
}