{
  "article_text": [
    "over the last 25 years , digital or multimedia watermarking has become a popular technique for protecting the intellectual property of any digital content such as image , audio , video or software data . in this domain ,",
    "software watermarking has received considerable attention and was adopted by the software development community as a technique to prevent or discourage software piracy and copyright infringement .",
    "a wide range of software watermarking techniques has been proposed among which the graph - based methods that encode watermark numbers as graphs whose structure resembles that of real program graphs .",
    "* watermarking*. digital watermarking is a popular technique for copyright protection of a digital object or , in general , multimedia information @xcite ; the idea is simple : a unique marker , which is called watermark , is embedded into a digital object which may be used to verify its authenticity or the identity of its owners @xcite .",
    "the software watermarking problem can be described as the problem of embeding a structure @xmath0 into a program @xmath5 such that @xmath0 can be reliably located and extracted from @xmath5 even after @xmath5 has been subjected to code transformations such as translation , optimization and obfuscation @xcite .",
    "more precisely , given a program @xmath5 , a watermark @xmath0 , and a key @xmath6 , the software watermarking problem can be formally described by the following two functions : @xmath7 and @xmath8 .",
    "since the late 1990s , there has been an explosion in the number of digital watermarking techniques among which time - series , biological sequences , graph - structured data , spatial data , spatiotemporal data , data - streams and others @xcite .",
    "recently , software watermarking has received considerable attention and many researchers have developed several codec algorithms mostly for watermarks that are encoded as graph - structures @xcite .",
    "the patent by davidson and myhrvold @xcite presented the first published software watermarking algorithm .",
    "the preliminary concepts of software watermarking also appeared in paper @xcite and patents @xcite .",
    "collberg et al .",
    "@xcite presented detailed definitions for software watermarking .",
    "authors of papers @xcite have given brief surveys of software watermarking research .    * our contribution*.",
    "recently , we have presented codec algorithms , namely @xmath9 and @xmath10 , for encoding an integer @xmath0 into a self - inverting permutation @xmath2 and extracting it from @xmath2 @xcite , and several codec algorithms for encoding @xmath2 into many reducible permutation flow - graphs @xmath11 $ ] ( @xmath12 ) @xcite , having thus created a wide repository of graph - structures , namely flow - graphs , whose structures resemble that of real program graphs .    in this paper , we extend the types of flow - graphs which can efficiently encode a self - inverting permutation @xmath2 by proposing two different reducible permutation flow - graphs @xmath3 $ ] and @xmath4 $ ] having properties which are derived from the bitonic subsequences @xmath13 composing the self - inverting permutation @xmath2 .",
    "we show relations between the elements of such a bitonic subsequence @xmath14 and their indices in @xmath2 and prove properties for the first , last , max and min elements of @xmath2 .",
    "we also show that the first bitonic subsequence @xmath15 of a self - inverting permutation @xmath2 of length @xmath16 has always length @xmath17 and structure @xmath18 , where @xmath19 is the max element of @xmath2 .",
    "taking advantage of these properties , we construct two different reducible permutation flow - graphs @xmath3 $ ] and @xmath4 $ ] which can encode the same self - inverting permutation @xmath2 and thus , the same watermark number @xmath0 . by construction ,",
    "the indegree of the first node @xmath20 of the flow - graph @xmath3 $ ] is equal to the number of bitonic subsequences @xmath13 of @xmath2 , while the indegree of the first node of the graph @xmath4 $ ] is much smaller that @xmath6 .",
    "this property causes @xmath4 $ ] more appropriate , in same cases , since it does not contain an extreme characteristic thereby enhancing the resilience of graph - structure to attacks .",
    "the flow - graphs @xmath3 $ ] and @xmath4 $ ] enrich the repository of graphs which can encode the same watermark number @xmath0 and , thus , enable us to embed several copies of the same watermark @xmath0 into an application program @xmath5 .",
    "moreover , it increases our ability to select a graph structure more similar to the structure of a given application program @xmath5 thereby enhancing the resilience of our codec system to attacks .",
    "* road map*. the paper is organized as follows : in section  2 we establish the notation and related terminology , we present background results , and show properties of the bitonic subsequences which compose a self - inverting permutation @xmath2 .",
    "in sections  3 and 4 we present our two codec algorithms for encoding a self - inverting permutation @xmath2 into two different reducible permutation flow - graphs @xmath3 $ ] and @xmath4 $ ] having properties deriving from the bitonic subsequences composing the self - inverting permutation @xmath2 .",
    "we show that the permutation @xmath2 can be efficiently encoded into either @xmath3 $ ] or @xmath4 $ ] and also correctly and efficiently extracted from theses flow - graphs .",
    "finally , in section  5 we conclude the paper and discuss possible future extensions .",
    "we consider finite graphs with no multiple edges . for a graph  @xmath21 ,",
    "we denote by @xmath22 and @xmath23 the vertex ( or , node ) set and edge set of @xmath21 , respectively .",
    "the subgraph of a graph @xmath21 induced by a set @xmath24 is denoted by @xmath25 $ ] .",
    "the _ neighborhood _",
    "@xmath26 of a vertex  @xmath27 of the graph  @xmath21 is the set of all the vertices of @xmath21 which are adjacent to @xmath27 .",
    "the _ degree _ of a vertex  @xmath27 in the graph  @xmath21 , denoted @xmath28 , is the number of edges incident on node @xmath27 ; for a node @xmath27 of a directed graph @xmath21 , the number of head - endpoints of the directed edges adjacent to @xmath27 is called the indegree of the node @xmath27 , denoted @xmath29 , and the number of tail - endpoints is its outdegree , denoted @xmath30 .",
    "the parent of a node  @xmath31 of a rooted tree @xmath32 is denoted by @xmath33 .      in mathematics ,",
    "the notion of permutation relates to the act of arranging all the members of a set into a sequence or order .",
    "permutations may be represented in many ways @xcite , where the most straightforward is simply a rearrangement of the elements of the set @xmath34 .",
    "for example , @xmath35 is a permutation of the elements of the set @xmath36 ; hereafter , we shall say that @xmath37 is a permutation over the set @xmath36 .",
    "* definition  2.1 * let @xmath38 be a permutation over the set @xmath39 , @xmath40 . the inverse of the permutation @xmath37 is the permutation @xmath41 with @xmath42 .",
    "a _ self - inverting permutation _ ( or , for short , sip ) is a permutation that is its own inverse : @xmath43 .    by definition ,",
    "a permutation is a sip ( self - inverting permutation ) if and only if all its cycles are of length 1 or 2 ; for example , the permutation @xmath35 is a sip with cycles : @xmath44 , @xmath45 , @xmath46 , @xmath47 , and @xmath48 . throughout the paper",
    "we shall denote a self - inverting permutation @xmath37 over the set @xmath49 as @xmath2 .",
    "a flow - graph is a directed graph @xmath50 with an initial node @xmath51 from which all other nodes are reachable .",
    "a directed graph @xmath21 is strongly connected when there is a path @xmath52 for all nodes @xmath31 , @xmath53 in @xmath22 .",
    "a node @xmath54 is an _",
    "entry _ for a subgraph @xmath55 of the graph @xmath21 when there is a path @xmath56 such that @xmath57 ( see , @xcite ) .    * definition  2.2 * a flow - graph is reducible when it does not have a strongly connected subgraph with two ( or more ) entries",
    ".    there are some other equivalent definitions of the reducible flow - graphs which use a few more graph - theoretic concepts . a depth first search ( dfs ) of a flow - graph partitions its edges into tree , forward , back , and cross edges .",
    "it is well known that tree , forward , and cross edges form a dag known as a dfs dag . hecht and ullman show that a flow - graph @xmath50 is reducible if and only if @xmath50 has a unique dfs dag @xcite .",
    "recently , a wide range of software watermarking techniques has been proposed among which the graph - based methods that encode watermark numbers @xmath0 as reducible flow - graph structures @xmath50 capturing such properties which make them resilient to attacks .    in @xcite ,",
    "chroni and nikolopoulos presented the encoding algorithm @xmath9 , along with its corresponding decoding one , which encodes a watermark number @xmath0 as a self - inverting permutation @xmath2 in @xmath58 time , where @xmath59 is the length of the binary representation of the integer @xmath0 .",
    "later , the same authors introduced a type of reducible permutation graphs @xmath1 $ ] and proposed several efficient codec methods which embed a self - inverting permutation @xmath2 into such a reducible permutation graph @xmath1 $ ] and efficiently extract it from the graph @xmath1 $ ] .",
    "moreover , they proposed several algorithms for multiple encoding the same watermark number @xmath0 into many different reducible permutation graphs @xmath11 $ ] , @xmath60 , through the use of the encoding self - inverting permutation @xmath2 @xcite .",
    "these results are summarized in the following theorems and lemmata .",
    "* theorem  2.1 * _ let @xmath0 be an integer and let @xmath61 be the binary representation of @xmath0 .",
    "the number  @xmath0 can be encoded into a self - inverting permutation  @xmath2 of length @xmath62 and correctly extracted from @xmath2 in @xmath58 time and space . _",
    "* theorem  2.2 * _ let @xmath2 be a self - inverting permutation of length @xmath16 which encodes a watermark integer @xmath0 .",
    "the permutation @xmath2 can be encoded as a reducible permutation flow - graph @xmath1 $ ] and correctly extracted from @xmath1 $ ] in @xmath63 time and space .",
    "_    * lemma  2.1 * _ let @xmath1 $ ] be a reducible permutation graph of size @xmath63 constructed by a proper encoding algorithm",
    ". the unique hamiltonian path of @xmath1 $ ] can be computed in @xmath63 time and space .",
    "* theorem  2.3 * _ we can produce more than one reducible flow - graphs @xmath3 , f_2[\\pi^ * ] , \\ldots , f_n[\\pi^*]$ ] which encode the same watermark integer @xmath0 through the use of the self - inverting permutation @xmath2 .",
    "_      a sequence @xmath64 is called bitonic if either monotonically increases and then monotonically decreases , or else monotonically decreases and then monotonically increases .    in this paper",
    ", we consider only bitonic sequences that monotonically increases and then monotonically decreases , i.e. , the minimum element of such a sequence @xmath65 is either the first @xmath66 or the last @xmath67 element of @xmath65 ; for example , @xmath68 is such a bitonic sequence .",
    "the maximum element of a bitonic sequence @xmath65 , which we call _ top _ element of @xmath65 , is denoted as @xmath69 .",
    "obviously , @xmath65 is an increasing sequence if @xmath70 , while @xmath65 is a decreasing sequence if @xmath71 .",
    "* definition  2.3 * let @xmath64 be a bitonic sequence of length @xmath59 . according to the index of the element @xmath69 , the sequence @xmath65 is called :    * @xmath72-bitonic or _ increasing bitonic _ if @xmath70 ; * @xmath73-bitonic or _ decreasing bitonic _ if @xmath71 ; * @xmath74-bitonic or _ full - bitonic _ if @xmath75 and @xmath76 .    in terms of the above definition",
    ", @xmath77 is an @xmath72-bitonic or increasing bitonic sequence , @xmath78 is a @xmath73-bitonic or decreasing bitonic sequence , while @xmath79 is an @xmath74-bitonic or full - bitonic sequence .",
    "let @xmath2 be the self - inverting permutation of length @xmath16 produced by the encoding algorithm @xmath9 @xcite , and let @xmath80 be the bitonic subsequences forming the permutation @xmath2 ; note that , @xmath2 encodes a watermark number @xmath0 of binary length @xmath59 and @xmath81 .",
    "then , @xmath80 have the following properties :    * sequence @xmath15 is a full - bitonic , @xmath82 are either full - bitonic or @xmath73-bitonic sequences , while @xmath83 is either a full - bitonic , @xmath72-bitonic , or @xmath73-bitonic sequence . *",
    "sequence @xmath15 contains the max element @xmath19 and the min element @xmath84 of permutation @xmath2 and has always length @xmath17 ; note that , @xmath85 and @xmath86 ; * the last element @xmath87 of sequence @xmath83 is equal to the index of the max element @xmath88 in @xmath15 .",
    "* example 2.1 * let @xmath89 and @xmath90 be two watermark numbers . for these two watermarks ,",
    "the encoding algorithm @xmath9 produces the self - inverting permutations    * @xmath91 , and * @xmath92    of lengths @xmath93 and @xmath94 , respectively ; note that , @xmath95 is the length of the binary representation of number 20 ( i.e. , 10100 ) , while @xmath96 is that of number 44 ( i.e. , 101101 ) .",
    "the permutations @xmath97 and @xmath98 are composed by the following three and four , respectively , bitonic subsequences :    * @xmath97 @xmath99 @xmath100 * @xmath98 @xmath99 @xmath101    we observe that all the bitonic subsequences of both permutations @xmath97 and @xmath98 satisfy the properties @xmath102 , @xmath103 , and @xmath104 . indeed , for example , the subsequence @xmath105 of permutation @xmath97 is full - bitonic , contains the max and the min elements of @xmath97 , has length @xmath106 , where @xmath107 is the length of @xmath97 , and the last element of subsequence @xmath108 ( i.e. , 3 ) is equal to the index ( i.e. , 3 ) of the max element of @xmath97 in sequence @xmath15 ( i.e. , @xmath109 ) .    * example 2.2 * here is an example of the permutation @xmath2 which encodes the number @xmath110 with binary representation @xmath111 , i.e. , @xmath112 .",
    "it is easy to see that this permutation satisfies the properties @xmath113 and all its bitonic subsequences are of type full - bitonic ; indeed , @xmath114 , @xmath115 , and @xmath116 .",
    "having presented an efficient codec algorithm for encoding a watermark number @xmath0 as a self - inverting permutation @xmath2 @xcite and several codec algorithms for efficiently encoding the permutation @xmath2 into different reducible permutation flow - graphs @xmath11 $ ] @xmath117 , in this section we extend the types of such flow - graphs by proposing an algorithm for encoding a self - inverting permutation @xmath2 into a reducible permutation graph @xmath1 $ ] having properties which are derived from the bitonic subsequences composing the self - inverting permutation @xmath2 ( see , properties @xmath118 ) .    the encoding algorithm , which we call encode_sip.to.rpg - bitonic-1 is described below .",
    "* algorithm encode_sip.to.rpg - bitonic-1 *    * compute the bitonic subsequences @xmath119 of the self - inverting permutation @xmath2 and let @xmath120 ; * construct a directed graph @xmath3 $ ] on @xmath121 vertices as follows : * * @xmath122)=\\{s = u_{n^*+1 } ,   u_{n^ * } , ... , u_1 , u_0=t\\}$ ] ; * * for @xmath123 do + add the edge @xmath124 in @xmath125 $ ] ) ; * for each bitonic subsequence @xmath126 , @xmath127 , do * * add the edge @xmath128 in @xmath125)$ ] ; * * for @xmath129 do * * * if @xmath130 then add the edge @xmath131 + else the edge @xmath132 in @xmath125)$ ] ; * return the graph @xmath3 $ ] ;    figure  [ fig : fig-1 - 20 ] shows the encoding of the self - inverting permutation @xmath133 into the reducible permutation flow - graph @xmath3 $ ] ; note that , @xmath2 encodes the watermark number @xmath134 .",
    "let @xmath0 be a watermark number and @xmath2 be the self - inverting permutation of length @xmath81 which encodes watermark @xmath0 , where @xmath59 is the length of the binary representation of number @xmath0 . analyzing the time and space performance of our encoding algorithm encode_sip.to.rpg - bitonic-1",
    ", we can obtain the following result :    * theorem  3.1 * _ the algorithm encode_sip.to.rpg - bitonic-1 for encoding the permutation @xmath2 as a reducible permutation flow - graph @xmath3 $ ] requires @xmath58 time and space .",
    "_    we next present the decoding algorithm decode_rpg.to.sip - bitonic-1 , which takes as input a reducible permutation flow - graph @xmath3 $ ] on @xmath121 nodes produced by algorithm encode_sip.to.rpg - bitonic-1 and correctly extract the self - inverting permutation @xmath2 from the graph @xmath3 $ ] ; the algorithm is described below .",
    "* algorithm decode_rpg.to.sip - bitonic-1 *    * delete the directed edges @xmath124 , @xmath135 , and the node @xmath136 from @xmath3 $ ] , and flip all the remaining directed edges in @xmath3 $ ] ; let @xmath137 be the nodes in the resulting graph @xmath138 $ ] ; * compute the set @xmath139\\}$ ] and delete the directed edges @xmath140 from the graph @xmath138 $ ] ; * sort the nodes of set @xmath141 in descending order according to their labels and let @xmath142 be the resulting sorted sequence , @xmath143 ; * construct the underlying graph @xmath144 $ ] of the directed graph @xmath138 $ ] and let @xmath145 , @xmath146 , @xmath147 , @xmath148 be the connected components of the graph @xmath144 $ ] which contain the nodes @xmath149 , respectively ; * for each node @xmath150 , @xmath151 , perform bfs - search in graph @xmath152 starting at node @xmath27 and compute the sequence @xmath14 of the nodes of @xmath152 taken by the order in which they are bfs - discovered ; the starting node @xmath27 is selected as follows : * * if @xmath153 and @xmath154 , then @xmath27 is the node with minimum label in @xmath152 ; * * if @xmath153 and @xmath155 , then @xmath27 is the node with maximum label in @xmath152 ; * * if @xmath156 , then @xmath27 is the node with label @xmath157 in @xmath152 , where @xmath157 is the index of the max element in sequence @xmath158 ; + recall that , @xmath159 denotes the reverse sequence of @xmath14 , @xmath160 ; * return @xmath161 ;    figure  [ fig : fig-1 - 20 ] shows the extraction of the self - inverting permutation @xmath133 , which encodes the watermark number @xmath134 , from the reducible permutation flow - graph @xmath3 $ ] using the tree @xmath138 $ ] .",
    "note that , a reducible permutation flow - graph @xmath3 $ ] of size @xmath121 encodes a self - inverting permutation @xmath2 of length @xmath16 .",
    "the following result summarizes the correctness and the time and space complexity of our proposed decoding algorithm decode_rpg.to.sip - bitonic-1 .",
    "* theorem  3.2 * _ the algorithm decode_rpg.to.sip - bitonic-1 correctly extract the permutation @xmath2 from a reducible permutation flow - graph @xmath3 $ ] in @xmath58 time and space .",
    "_    ' '' ''        ' '' ''",
    "in this section we enrich the repository of reducible permutation flow - graphs @xmath1 $ ] which can encode a self - inverting permutation @xmath2 or , equivalently , a watermark number @xmath0 by proposing a reducible permutation flow - graph @xmath4 $ ] , different from @xmath3 $ ] but of the same type , having also important properties deriving from the bitonic subsequences of @xmath2 .    by construction ,",
    "the indegree of the first node @xmath20 of the flow - graph @xmath3 $ ] is equal to the number of bitonic subsequences @xmath13 of @xmath2 , while the indegree of the first node of the graph @xmath4 $ ] is much smaller that @xmath6 .",
    "this property causes @xmath4 $ ] more appropriate , in same cases , since it does not contain an extreme characteristic thereby enhancing the resilience of graph - structure to attacks .",
    "the proposed algorithm encode_sip.to.rpg - bitonic-2 for encoding a self - inverting permutation @xmath2 into a reducible permutation graph @xmath4 $ ] is described below .    ' '' ''        ' '' ''    * algorithm encode_sip.to.rpg - bitonic-2 *    * execute algorithm encode_sip.to.rpg - bitonic-1 and compute the bitonic subsequences @xmath119 of @xmath2 and the graph @xmath3 $ ] ; set @xmath4 \\leftarrow f_1[\\pi^*]$ ] ; * for each edge @xmath128 in @xmath4 $ ] , @xmath162 , do + if @xmath126 is a full - bitonic sequence , then * * delete the edge @xmath128 and * * add the edge @xmath163 in @xmath164)$ ] ; * return the graph @xmath4 $ ] ;    we next describe the corresponding decoding algorithm for extracting the permutation @xmath2 from the flow - graph @xmath4 $ ] .",
    "* algorithm decode_rpg.to.sip - bitonic-2 *    * execute steps 1 and 2 of algorithm decode_rpg.to.sip - bitonic-1 on graph @xmath4 $ ] and compute the directed graph @xmath165 $ ] and the node set @xmath141 ; * compute the node set + @xmath166 \\ \\text{and } \\",
    "outdeg(u_j ) \\geq 2\\}$ ] , + delete the directed edges @xmath167 from the graph @xmath165 $ ] , and set @xmath168 ; * execute steps 3 , 4 and 5 of the decode algorithm decode_rpg.to.sip - bitonic-1 and compute the sequences @xmath80 ; * return @xmath161 ;    in the example of figure  2 , @xmath169 and @xmath170 . recall that , the self - inverting permutation which encodes watermark @xmath0 is of length @xmath81 , where @xmath59 is the binary length of the watermark number @xmath0 , while the reducible permutation flow - graph @xmath4 $ ] is of size @xmath121 .",
    "the results of this section concerning the correctness and the time and space complexity of both algorithms are summarized in the following theorem .",
    "* theorem  4.1 * _ the algorithm encode_sip.to.rpg - bitonic-2 encodes a permutation @xmath2 into a reducible permutation flow - graph @xmath4 $ ] in @xmath58 time and space and the corresponding decoding algorithm decode_rpg.to.sip - bitonic-2 correctly extract @xmath2 from the flow - graph @xmath4 $ ] within the same time and space complexity . _",
    "in the last decade , a wide range of software watermarking techniques has been proposed among which the graph - based methods that encode watermark numbers as graphs whose structure resembles that of real program graphs .",
    "recently , chroni and nikolopoulos @xcite proposed several algorithms for multiple encoding a watermark into a graph - structure : an integer ( i.e. , a watermark ) is encoded first into a self - inverting permutation @xmath2 and then into several reducible permutation graphs using cographs @xcite and heap - ordered trees @xcite",
    ".    following up on our recently proposed methods , in this paper , we extended the class of graph - structures by proposing two different reducible permutation flow - graphs @xmath3 $ ] and @xmath4 $ ] incorporating important structural properties which are derived from the bitonic subsequences forming the self - inverting permutation @xmath2 .",
    "these new flow - graphs enrich the repository of graphs available for multiple encoding a watermark number and , thus , it increases our ability to select a graph structure more similar to the structure of a given application program @xmath5 thereby enhancing the resilience of our codec system to attacks .",
    "an interesting open question is whether the properties of the bitonic subsequences forming the self - inverting permutation @xmath2 can help develop efficient graph structures having more similar structure to that of a given application program @xmath5 .",
    "can we use some of the bitonic subsequences @xmath13 of permutation @xmath2 or part of them in order to efficiently encode and decode a self - inverting permutation @xmath2 into a reducible permutation flow - graph @xmath1 $ ] ? we leave it as an open problem for future investigation",
    ".        m.  chroni and s.d .",
    "nikolopoulos . encoding watermark numbers as cographs using self - inverting permutations . international conference on computer systems and technologies ( compsystech11 ) , acm icps  578 , 142148 , 2011    m.  chroni and s.d",
    ".  nikolopoulos .",
    "an efficient graph codec system for software watermarking .",
    "36th ieee conference on computers , software , and applications ( compsac12 ) , ieee proceedings , 595600 , 2012                r.  ghiya and l.j .",
    "is it a tree , a dag , or a cyclic graph ?",
    "a shape analysis for heapdirected pointers in c. proc .",
    "23rd acm sigplan - sigact symposium on principles of programming languages ( popl96 ) , 115 , 1996                    h.  tamada , m.  nakamura , a.  monden , and k.  matsumoto .",
    "design and evaluation of birthmarks for detecting theft of java programs .",
    "intl conference on software engineering ( iasted se04 ) , 569575 , 2004"
  ],
  "abstract_text": [
    "<S> software watermarking has received considerable attention and was adopted by the software development community as a technique to prevent or discourage software piracy and copyright infringement . </S>",
    "<S> a wide range of software watermarking techniques has been proposed among which the graph - based methods that encode watermarks as graph structures . </S>",
    "<S> following up on our recently proposed methods for encoding watermark numbers @xmath0 as reducible permutation flow - graphs @xmath1 $ ] through the use of self - inverting permutations @xmath2 , in this paper , we extend the types of flow - graphs available for software watermarking by proposing two different reducible permutation flow - graphs @xmath3 $ ] and @xmath4 $ ] incorporating important properties which are derived from the bitonic subsequences composing the self - inverting permutation @xmath2 . </S>",
    "<S> we show that a self - inverting permutation @xmath2 can be efficiently encoded into either @xmath3 $ ] or @xmath4 $ ] and also efficiently decoded from theses graph structures . </S>",
    "<S> the proposed flow - graphs @xmath3 $ ] and @xmath4 $ ] enrich the repository of graphs which can encode the same watermark number @xmath0 and , thus , enable us to embed multiple copies of the same watermark @xmath0 into an application program @xmath5 . </S>",
    "<S> moreover , the enrichment of that repository with new flow - graphs increases our ability to select a graph structure more similar to the structure of a given application program @xmath5 thereby enhancing the resilience of our codec system to attacks .    * keywords : *  watermarking , self - inverting permutation , reducible permutation graphs , codec algorithms , encoding , decoding .    _ department of computer science & engineering _    </S>",
    "<S> _ university of ioannina _    _ </S>",
    "<S> gr-45110  ioannina , greece _    </S>",
    "<S> \\{ampanti , stavros}@cs.uoi.gr    0.3 in </S>"
  ]
}