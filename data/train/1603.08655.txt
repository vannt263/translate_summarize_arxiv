{
  "article_text": [
    "how life came to existence and evolved has been a key scientific question in the past hundred or so years . traditionally , a phylogenetic tree has been used to model the evolutionary history of species , in which an internal node represents a _ speciation event _ and the leaves represent the extant species under study .",
    "these evolutionary trees are often reconstructed from the gene or protein sequences sampled from the extant species . since",
    "genomic studies have demonstrated that genetic material is often transfered between organisms in a non - reproductive manner @xcite , it has been commonly accepted that phylogenetic networks are more suitable than phylogenetic trees for modeling horizontal gene transfer , introgression , recombination and hybridization events in genome evolution @xcite .",
    "mathematically , a phylogenetic network is a rooted acyclic digraph with uniquely labeled leaves .",
    "the algorithmic and combinatorial aspects of networks have been intensively studied over the past two decades ( _ e.g. _ , see @xcite ) .    in phylogenetics",
    ", an important issue is checking the `` consistency '' of two evolutionary models .",
    "a somewhat simpler ( but nonetheless very important ) version of this issue asks whether a given network is consistent with an existing tree model or not .",
    "this has motivated researchers to study the problem of determining whether a tree is displayed by a network or not , which is called the tree containment problem ( tcp ) .",
    "the cluster containment problem ( ccp ) is related algorithmic problem that asks whether or not a subset of taxa is a cluster in a tree displayed by a network .",
    "both the tcp and ccp have also been investigated in the development of network metrics @xcite    both the tcp and ccp are np - complete @xcite , even on a very restricted class of networks @xcite .",
    "van iersel _",
    "et al_. have posed an open problem as to whether or not the tcp is solvable in polynomial time for reticulation - visible networks @xcite .",
    "the visibility property was originally introduced to capture an important feature of galled networks @xcite .",
    "a network is reticulation - visible if every reticulation node separates the network root from some leaves .",
    "real network models are likely to be reticulation - visible ( see @xcite for example ) .",
    "although much effort has been devoted to the study of the tcp , it has been shown to be solvable in polynomial - time only for a couple of very restricted subclasses of reticulation - visible networks @xcite .",
    "other studies related to the tcp include @xcite , @xcite and @xcite .    in this paper , we make three contributions .",
    "we give an affirmative answer to the open problem by presenting a quadratic time algorithm for the tcp for binary reticulation - visible networks .",
    "additionally , we present a linear - time algorithm for the ccp for arbitrary reticulation - visible networks .",
    "our algorithms rely on an important decomposition theorem ( theorems  [ main - theorem ] and [ main - theorem2 ] ) , which is proven in section  [ sec4 ] . empowered by this",
    ", we also prove that an arbitrary galled network with @xmath0 leaves has @xmath1 reticulation nodes at most .",
    "the rest of the paper is organized as follows .",
    "section  [ sec2 ] introduces the basic concepts and notation . in section  [ sec4 ] , we present a decomposition theorem ( theorem  [ decomp_thm ] ) that reveals an important structural property of reticulation - visible networks , based on which the two main theorems ( theorem  [ decomp_thm ] ) are proven in sections  [ sec5 ] and [ sec6 ] , respectively .",
    "finally , we conclude with a couple of remarks in section  [ sec8 ] .",
    "in phylogenetics , _ networks _ are rooted acyclic digraphs in which a unique node ( the _ root _ ) exists such that there is a directed path from it to _ every _ other node and the nodes of indegree one and outdegree zero ( the _ leaves _ ) are _ uniquely _ labeled .",
    "the leaf labels represent bio - molecular sequences , extant organisms or species under study .    in a network ,",
    "the root has indegree zero and outdegree greater than one and each of the other nodes has either indegree one or outdegree one exclusively .",
    "a node is called a _ reticulation _ ( node )",
    "if its indegree is strictly greater than one and its outdegree is precisely one .",
    "a reticulation node is called a _ bicombination _ if it has indegree two .",
    "reticulation nodes represent reticulation events occurring in evolution .",
    "non - reticulation nodes are called _ tree _ nodes , which include the root and leaves .    for convenience in describing the algorithms and proofs ,",
    "we add an _ open _ incoming edge to the root ( figure  [ example1 ] ) .",
    "a network is called a _ bicombining _ network if every reticulation node is of degree three ( _ i.e. _ , indegree two and outdegree one ) . a network is called _ binary _",
    "if the root is of degree two , its leaves are of degree one , and all other nodes are of degree three .",
    "let @xmath2 be a network . for two nodes @xmath3 in @xmath2",
    ", @xmath4 is a _ parent _ of @xmath5 ( alternatively , @xmath5 is a _ child _ of @xmath4 ) if @xmath6 is a directed edge in @xmath2 ; @xmath4 is an _ ancestor _ of @xmath5 ( alternatively , @xmath5 is a _ descendant _ of @xmath4 ) if there is a directed path from @xmath4 to @xmath5 .",
    "when @xmath4 is an ancestor of @xmath5 , we also say @xmath5 is _ below _ @xmath4 and @xmath4 is _ above _ @xmath5 .",
    "let @xmath2 be a network .",
    "we use the following notation :    * @xmath7 : the root of @xmath2 ; * @xmath8 : the set of all leaves in @xmath2 ; * @xmath9 : the set of all reticulation nodes in @xmath2 ; * @xmath10 : the set of the root and other tree nodes of outdegree greater than one in @xmath2 ; * @xmath11 : the set of all nodes in @xmath2 ( i.e. , @xmath12 ) ; * @xmath13 : the set of all edges in @xmath2 ; * @xmath14 : the set of the parents of @xmath15 or the unique parent of @xmath16 ; * @xmath17 : the set of the children of @xmath18 or the unique child of @xmath15 ; * @xmath19 : the _ subnetwork _ vertex induced by @xmath20 and all the descendants of @xmath4 ; * @xmath21 : the spanning _ subnetwork _ of @xmath2 with the node set @xmath11 and the edge set @xmath22 for a subset @xmath23 ; * @xmath24 : the _ subnetwork _ of @xmath2 with the node set @xmath25 and the edge set @xmath26 for a subset @xmath27 .",
    "let @xmath28 be a phylogenetic tree .",
    "for @xmath29 and @xmath30 , @xmath31 is called the lowest common ancestor ( lca ) of the nodes in @xmath32 , denoted @xmath33 if it is an ancestor of every node in @xmath32 and any other  common \" ancestor of the nodes in @xmath32 is above @xmath31 in @xmath28 .      let @xmath2 be a network and @xmath34 .",
    "we say that @xmath4 is _ visible _ ( or stable ) on @xmath5 if every path from the root @xmath7 to @xmath5 _ must _ contain @xmath4 @xcite(also see @xcite ) . in computer science",
    ", @xmath4 is called a dominator of @xmath5 if @xmath4 is visible on @xmath5 @xcite .",
    "a reticulation node is _ visible _ if it is visible on some leaf .",
    "a network is _ reticulation - visible _ if every reticulation node is visible .",
    "it is not hard to see that each reticulation node separates the root from some leaves in a reticulation - visible network .",
    "the network in figure  [ example1]a is reticulation - visible",
    ". clearly , all trees are reticulation - visible , as they do not contain any reticulation nodes .",
    "in fact , reticulation - visible networks form a rather large subclass of networks . the widely studied tree - child networks , galled trees and galled networks are all reticulation - visible @xcite .",
    "reticulation - visible networks have two useful properties , as outlined in the following proposition .",
    "[ basic_facts ] let @xmath2 be a reticulation - visible network and @xmath23 .    *",
    "( * reticulation separability * ) the child and the parents of a reticulation node are all tree nodes ; * ( * visibility inheritability * ) if @xmath21 is connected and @xmath35 , @xmath21 is also reticulation - visible .",
    "\\(i ) suppose on the contrary that @xmath36 such that @xmath5 is the child of @xmath4 .",
    "let @xmath31 be another parent of @xmath5 .",
    "since @xmath2 is acyclic , @xmath31 is not below @xmath5 and hence is not below @xmath4 .",
    "since @xmath31 is not a descendant of @xmath4 , there is a path @xmath37 from @xmath7 to @xmath31 that does not contain @xmath4 .",
    "we now prove that @xmath4 is not visible on any leaf by contradiction .",
    "assume that @xmath4 is visible on a leaf @xmath38 .",
    "there is a path @xmath39 from @xmath7 to @xmath38 containing @xmath4 .",
    "since @xmath5 is the only child of @xmath4 , @xmath5 appears after @xmath4 in @xmath39 .",
    "define @xmath40 $ ] to be the subpath of @xmath39 from @xmath5 to @xmath38 .",
    "the concatenation of @xmath41 , @xmath42 , and @xmath40 $ ] gives a path from @xmath7 to @xmath38 .",
    "however , this path does not contain @xmath4 , which is a contradiction .",
    "\\(ii ) let @xmath43 .",
    "we assume it is visible on a leaf @xmath38 in @xmath2 .",
    "since @xmath35 and @xmath21 is connected , there is at least a path from @xmath7 to @xmath38 in @xmath21 .",
    "any path from @xmath7 to @xmath38 in @xmath21 is also a path in @xmath2 and hence must contain @xmath44 .",
    "this implies that @xmath38 is visible on @xmath38 in @xmath21 .    , and @xmath45 .",
    "the removal of the four edges results in the subtree in * b * , in which @xmath46 is a dummy leaf ; the further removal of @xmath46 gives the subtree in * c * , a subdivision of the displayed tree .",
    "reticulation nodes are represented by shaded circles .",
    "[ example1],scaledwidth=60.0% ]      in a digraph , the _ suppression _ of a node @xmath46 of indegree and outdegree one is a process in which @xmath46 is removed and the two directed edges @xmath47 and @xmath48 incident to @xmath46 are merged into a directed edge @xmath49 . a tree @xmath50 is called a _ subdivision _ of another tree",
    "@xmath28 if @xmath28 can be obtained from @xmath50 by a series of suppressions .    consider a network @xmath2 .",
    "the removal of all but one of the incoming edges for each reticulation node results in a subtree . however , new ( dummy ) leaves may or may not exist in the obtained tree .",
    "for example , the removal of four edges @xmath51 , and @xmath45 in the network given in figure  [ example1]a results in the tree in figure  [ example1]b , in which @xmath46 is a new leaf alongside the original leaves @xmath52 ( @xmath53 ) .",
    "if the obtained tree contains dummy leaves , we will have to remove them and some of their ancestors to obtain a subtree with the _ same _ set of leaves as @xmath2 .",
    "let @xmath2 be a network and @xmath28 be a phylogenetic tree such that @xmath54 .",
    "we say that @xmath2 _ displays _ ( or contains ) @xmath28 if @xmath23 and @xmath27 exist such that ( i ) @xmath55 contains all but one of the incoming edges for each @xmath15 , and ( ii ) @xmath56 is a subdivision of @xmath28 .    because of the existence of dummy leaves , @xmath57 can be non - empty to guarantee that @xmath58 is a subdivision of @xmath28 .",
    "tcp _ is to determine whether or not a network displays a phylogenetic tree .",
    "a bicombining network with @xmath59 reticulation nodes can display as many as @xmath60 phylogenetic trees .",
    "hence , for a reticulation network with as many as 32 reticulation nodes @xcite , a naive exhaustive search is definitely infeasible .",
    "therefore , a polynomial - time algorithm is needed for solving the tcp .",
    "the set of all the labeled leaves below a node is called the _ cluster _ of the node in a phylogenetic tree .",
    "an internal node in a network may have different clusters in different trees displayed in the network .",
    "given a _ subset _ of labeled leaves @xmath61 , @xmath62 is a _ soft cluster _ in @xmath2 if @xmath62 is the cluster of a node in some tree displayed in @xmath2 .",
    "ccp _ is to determine whether or not a subset @xmath62 of @xmath8 is a soft cluster in a network @xmath2 .",
    "the tcp and ccp were both proven to be np - complete even for binary networks @xcite .",
    "in this section , we first present a decomposition theorem for reticulation - visible networks . as we shall see later",
    ", it plays a vital role in the study of algorithmic and combinatorial aspects of reticulation - visible networks .",
    "consider a reticulation - visible network @xmath2 . by proposition  [ basic_facts ] ,",
    "every reticulation node is only incident to tree nodes .",
    "additionally , in @xmath63 , each connected component @xmath64 ( ignoring edge direction ) is actually a subtree of @xmath2 in which the edges are directed away from its root . indeed ,",
    "if @xmath64 contains two nodes @xmath4 and @xmath5 both with indegree zero , where the indegree is defined over @xmath63 , and the path between @xmath4 and @xmath5 ( ignoring edge direction ) must contain a node @xmath46 with indegree @xmath65 , contradicting the assumption that @xmath46 is a tree node in @xmath2 .",
    "hence , the connected components of @xmath66 are called the _ tree node components _ of @xmath2 .",
    "let @xmath64 be a tree node component of @xmath2 and let @xmath67 denote its node set .",
    "@xmath64 is called a _ single - leaf component _ if @xmath68 for some @xmath69 and a _ big _ tree node component if @xmath70 . the binary reticulation - visible network in figure",
    "[ example2]a has four big tree node components and five single - leaf components .",
    "@xmath71 ) are the big ones .",
    "( * b * ) a tree considered for containment in the network .",
    "when @xmath72 is first selected , we focus on the path from the root @xmath73 to @xmath74 in the given tree , where @xmath75 , @xmath76 and @xmath77.[example2 ] , scaledwidth=70.0% ]    by definition , any two tree node components @xmath78 and @xmath79 of @xmath2 are disjoint .",
    "we say that @xmath78 is _ below _",
    "@xmath79 if a reticulation node @xmath44 exists such that @xmath78 is rooted at @xmath44 , whereas a parent of @xmath44 is in @xmath79 in @xmath2 .",
    "[ decomp_thm ] ( * decomposition theorem * ) let @xmath2 be a reticulation - visible network with @xmath80 tree node components @xmath81 .",
    "the following statements are true :    * @xmath82 ; * for each @xmath83 , each of its parents is a tree node in some @xmath84 and @xmath85 is the root of another tree - node component below @xmath84 ; * for each tree node component @xmath86 , @xmath87 if and only if @xmath88 for some @xmath69 ( i.e. , it is a single - leaf component ) , and if @xmath89 , either @xmath86 contains a network leaf or a reticulation node exists such that its parents are all in @xmath86 ; * a big tree node component @xmath64 exists , below which there are only single - leaf components .",
    "\\(i ) the set equality follows from the fact that the tree node components are different connected components of @xmath63 and contain all the tree nodes of @xmath2 .",
    "\\(ii ) let @xmath83 . by the _ reticulation separability _ property ( proposition  [ basic_facts ] ) , @xmath85 and the parents of @xmath44 are all tree nodes .",
    "thus by ( i ) , each of them is in a tree node component .",
    "furthermore , since @xmath85 is of indegree 0 in @xmath63 , @xmath85 must be the root of the tree node component to which it belongs .",
    "\\(iii ) let @xmath64 be a tree node component such that @xmath90 .",
    "assume @xmath91 . since @xmath4 is the only non - leaf tree node in @xmath64 , @xmath92 and @xmath93 .",
    "any leaf descendant of @xmath14 must be below some child of @xmath4 .",
    "let @xmath94 . since @xmath59 is finite and @xmath2 is acyclic ,",
    "there is a subset @xmath32 of @xmath95 children @xmath96 such that ( i ) @xmath97 is not below any node in @xmath17 for each @xmath98 , and ( ii ) each child in @xmath17 is either in @xmath32 or below some child in @xmath32 . for each @xmath99 , using the same argument as in the proof of part ( a ) of proposition  [ basic_facts ] , we can prove that for each leaf @xmath38 below @xmath97 , there is path from @xmath7 to @xmath38 that does not contain @xmath14 . since any leaf below @xmath14 must be below some child in @xmath32 ,",
    "@xmath14 is not visible .",
    "this contradicts the fact that @xmath2 is reticulation - visible .",
    "therefore , @xmath90 if and only it is a single - leaf component .",
    "assume that @xmath64 is a big tree node component of @xmath2 ( i.e. , @xmath100 ) .",
    "let @xmath101 be the root of @xmath64 .",
    "since @xmath2 is reticulation - visible , the reticulation parent of @xmath101 and hence @xmath101 itself are both visible on a network leaf , say @xmath38 .",
    "if @xmath38 is in @xmath64 , the proof is complete .",
    "if @xmath38 is not in @xmath102 , we define @xmath103 .",
    "clearly , @xmath104 is finite . for any @xmath105",
    ", we write @xmath106 if @xmath107 is below @xmath108 ; in other words , there is a direct path from @xmath108 to @xmath107 .",
    "since @xmath109 is transitive and @xmath2 is acyclic , @xmath104 contains a maximal element @xmath110 with respect to @xmath109 .",
    "let @xmath111 .",
    "since @xmath112 , we may assume that @xmath113 . if @xmath114 for some @xmath115 , @xmath116 is not below any node in @xmath64 , as @xmath2 is acyclic and @xmath110 is maximal under @xmath109 .",
    "hence , there is a path @xmath117 from @xmath118 to @xmath116 that does not contain any node in @xmath64 .",
    "since @xmath38 is a descendant of @xmath110 , @xmath117 can be extended into a path from @xmath118 to @xmath38 that does not contain @xmath101 .",
    "this contradicts the statement that @xmath101 is visible on @xmath38",
    ". therefore , the parents of @xmath110 are all in @xmath64 .",
    "\\(iv ) this is derived from the fact that @xmath2 is acyclic and finite .",
    "let @xmath2 be a binary reticulation - visible network . since @xmath2 is a directed acyclic graph and has , at most , @xmath119 nodes @xcite , we can determine the tree node components using the breadth - first search technique in @xmath120 time .",
    "additionally , a topological ordering of its nodes can also be found in @xmath120 time . using this topological ordering",
    ", we can derive another topological ordering for the big tree node components , with which we can identify the lowest tree node component described in theorem  [ decomp_thm](iv ) in constant time .    for non - binary networks , the above processes for finding all the big tree node components and determining",
    "the lowest ones take @xmath121 time .",
    "we shall apply the decomposition theorem to bound the number of nodes in a galled network in this section .",
    "a bicombining network is _ galled _ if each reticulation node @xmath44 has an ancestor @xmath4 such that two internal node - disjoint paths exist from @xmath4 to @xmath44 in which all nodes except @xmath44 are tree nodes .",
    "let n be a reticulation - visible network .",
    "a @xmath83 is _ inner _ if its parents are all in the same tree node component of @xmath2 ; it is called a _ cross - reticulation _ otherwise .",
    "let @xmath2 be a bicombining network .",
    "@xmath2 is galled if and only if it is reticulation - visible and every reticulation is inner .",
    "( necessity ) let @xmath2 be galled .",
    "@xmath2 is reticulation - visible @xcite .",
    "assume , on the other hand , that @xmath2 contains a cross - reticulation @xmath44 . by definition ,",
    "the parents of @xmath44 are in different tree node components .",
    "assume that @xmath122 and @xmath123 are two parents of @xmath44 in different tree node components .",
    "since @xmath2 is acyclic , we may assume that _",
    "@xmath122 is not below @xmath123_. let @xmath124 be the tree node components containing @xmath125 for @xmath126 .",
    "we now consider the parent @xmath107 of @xmath127 .",
    "first , @xmath107 is a reticulation node .",
    "second , @xmath123 is below @xmath107 and hence @xmath44 is also below @xmath107 .",
    "however , we can reach @xmath44 from @xmath122 using a single edge without passing through @xmath107 , contradicting the separation lemma for galled networks @xcite .",
    "( sufficiency ) let @xmath2 be a bicombining reticulation - visible network such that each reticulation is inner . for each reticulation",
    "node @xmath44 , by definition , its parents @xmath128 and @xmath129 are both in the same tree node component @xmath64 . since @xmath64 is a subtree of @xmath2 , @xmath130 is also a tree node in @xmath64 and hence two internal node - disjoint paths from @xmath130 to @xmath44 exist in which all but @xmath44 are tree nodes .",
    "therefore , @xmath2 is galled .",
    "[ bound ] if @xmath2 is a galled network with @xmath0 leaves , then    \\(i ) @xmath131 ;    \\(ii ) @xmath132 .",
    "\\(i ) let @xmath2 be a galled network with @xmath0 leaves .",
    "we will consider the decomposition of @xmath2 into tree node components . since the root of each tree node component is either @xmath7 or the unique child of a reticulation ,",
    "the following holds : latexmath:[\\ ] ] note that @xmath351 is the unique incoming edge of @xmath44 that is not in @xmath354 for each @xmath365 such that @xmath366 .",
    "let @xmath356 . @xmath50 may contain some dummy leaves that are internal nodes in @xmath2 .",
    "however , it is easy to see that the cluster of @xmath190 in @xmath50 remains the same as the cluster of @xmath190 in @xmath28 , which is equal to @xmath62 .",
    "if we contract @xmath367 into a single leaf @xmath310 , @xmath50 is a subtree of @xmath299 , implying that @xmath62 is a soft cluster in @xmath299 .",
    "we next show how to determine whether or not @xmath62 is in @xmath64 in linear time .",
    "let @xmath221 be the tree defined in eqn .",
    "( [ eq44 ] ) and ( [ eq55 ] ) . for each @xmath232",
    ", @xmath368 denotes the set of ambiguous leaves defined in eqn .",
    "( [ ar - def ] ) and @xmath261 denotes the lca of the leaves in @xmath368 .",
    "l + input : @xmath221 and a subset @xmath62 of leaves in @xmath290 .",
    "+ 1 . if @xmath369 , output ",
    "yes \" and * exit * ; + 2 .",
    "construct @xmath221 as defined in eqn .",
    "( [ eq44 ] ) and ( [ eq55 ] ) ; + 3 .",
    "pre - process @xmath221 so that the lca of any two nodes can be found in @xmath258 time ; + 4 . traverse the leaves in @xmath221 to compute the nodes in @xmath280 ; + 5 . for each leaf",
    "@xmath370 such that @xmath371 , +  mark the nodes in the path from @xmath282 to it ; +  for each @xmath232 such that @xmath372 , +  mark the nodes in the path from @xmath282 to @xmath261 inclusively ; + 6 . traverse the nodes @xmath4 in @xmath221 to compute the nodes in @xmath373 : +   check if @xmath4 is unmarked and its parent is marked in step 5 when visiting @xmath4 ; + 7 .",
    "for each node @xmath374 @xmath302 +   7.1 check whether or not all leaves in @xmath62 are below @xmath4 ; +   7.2 output ",
    "yes \" and * exit * if so ; + 8 .",
    "no \" and * exit * ; +    [ prop65 ] ( i ) let @xmath38 be a leaf in @xmath221 that is neither ambiguous nor optional . if @xmath375 , @xmath62 is not a soft cluster of any node @xmath4 in the path from @xmath101 to @xmath38 in @xmath2 .",
    "\\(ii ) for each @xmath232 such that @xmath337 , @xmath62 is not a soft cluster of any @xmath4 in the path from @xmath101 to @xmath376 inclusively in @xmath2 .",
    "this can be proven in the same way as proposition  [ prop565 ] .",
    "let @xmath377 be the spanning subtree of @xmath221 over @xmath378 , where @xmath237 and @xmath239 are the sets of ambiguous and optional leaves in @xmath221 , respectively , and @xmath379 is defined in proposition  [ prop564 ] .",
    "we further define @xmath380 .",
    "[ prop66 ] @xmath62 is a soft cluster in @xmath381 if and only if a node @xmath382 exists such that for each @xmath383 , there is a leaf below @xmath5 with the same label as @xmath38 .",
    "assume that @xmath62 is a soft cluster of a node @xmath4 in @xmath381 .",
    "by proposition  [ prop65 ] , @xmath4 is not in @xmath377 and thus it is below some @xmath382 . for any @xmath384 , @xmath4 and hence @xmath5 have a common leaf descendant with the same label as @xmath38 .",
    "let @xmath382 satisfy the property that for each @xmath383 , a leaf @xmath385 exists that has the same label as @xmath38 . for each @xmath386",
    "such that @xmath387 , by the definition of @xmath373 , @xmath388 contains an ambiguous leaf that is not below @xmath5 .",
    "we select a parent @xmath389 of @xmath44 that is not below @xmath5 in @xmath64 .    for each @xmath390",
    "such that @xmath391 , we select a parent @xmath392 below @xmath5 .    for each @xmath238",
    "such that @xmath393 , we select a parent @xmath363 below @xmath5 .",
    "set : @xmath394 therefore , @xmath395 is a subtree in which @xmath62 is the cluster of @xmath5 .",
    "it is not hard to see that @xmath395 can be extended into a subtree of @xmath2 .    taken together , the above facts imply that we can use algorithm 1 ( table  [ table4 ] ) for determining whether a leaf subset is a soft cluster in the lowest big tree - node component or not .",
    "the correctness of algorithm 1 follows from propositions  [ prop65 ] and [ prop66 ] .",
    "step 1 takes constant time .",
    "step 2 can be done in @xmath396 time .",
    "step 3 takes @xmath255 time ( see @xcite ) . by proposition",
    "[ prop564 ] , step 4 can be done in @xmath255 time . in the proof of proposition  [ prop_55 ] ,",
    "step 5 can be executed in @xmath255 time .",
    "obviously , step 6 takes @xmath255 time . for each node @xmath4 ,",
    "step 7.1 takes @xmath397 time .",
    "since all the examined subtrees are disjoint , the total time taken by step 7.1 is @xmath255 time .    taking all the above facts together , we are able to give a linear - time algorithm for the ccp .",
    "l + * input : * a binary network @xmath2 and a subset @xmath61 .",
    "compute the big tree node components sorted in a topological order : +  @xmath398 +   such that @xmath84 is below @xmath294 only if @xmath399 ; + 2 . * for * @xmath400 * to * @xmath172 * do * @xmath302 + 2.1 .",
    "set @xmath401 ; compute @xmath402 as defined in eqn .",
    "( [ eq0 ] ) ; + 2.2 .",
    "@xmath403 ; + 2.3 .",
    "* if * ( @xmath404 ) output  yes \" and * exit * ; + 2.4 .   * if * ( @xmath405 ) @xmath302 +   @xmath406 ; +   * if * ( @xmath407 & @xmath408 ) output  no \" and * exit * ; +   * if * ( @xmath409 ) @xmath302 +   remove edges in @xmath410 ; +   remove edges in @xmath411 ; +   @xmath308 +   * if * ( @xmath412 ) @xmath302 +   remove edges in @xmath413 ; +   remove edges in @xmath414 ; +   @xmath415 ; +   @xmath308 +   replace @xmath211 by a leaf @xmath416 ; +   remove @xmath64 from the list of big tree node components ; +   update @xmath311 for the affected big tree node components @xmath78 ; +  @xmath308 + @xmath308 / * for * / +    the ccp algorithm runs in linear time .",
    "step 1 takes @xmath312 time .",
    "step 2 is a for - loop that runs @xmath172 times .",
    "since the total number of network leaves in @xmath86 and the reticulation nodes below @xmath86 is @xmath417 at most , step 2.1 takes @xmath418 time for each execution . in step 2.2 , the linear - time algorithm 1 is called to compute @xmath136 in @xmath418 time .",
    "obviously , step 2.3 takes constant time . to implement step 2.4 in linear time , we need to use an array @xmath419 to indicate whether a network leaf is in @xmath62 or not",
    "@xmath419 can be constructed in @xmath120 time . with @xmath419 , each conditional clause in step 2.4",
    "can be determined in @xmath420 time , which is @xmath418 at most .",
    "since the total number of inner and cross reticulations is @xmath417 at most , each line of step 2.4 takes @xmath418 time at most .",
    "hence , step 2.4 still takes @xmath418 time . taking all these together ,",
    "the total time taken by step 2 is @xmath421 therefore , the following theorem has been proven .",
    "[ main - theorem2 ] given a reticulation - visible network @xmath2 and an arbitrary subset @xmath62 of labeled leaves in @xmath2 , the ccp for @xmath2 and @xmath62 can be solved in @xmath312 time .",
    "we have presented polynomial - time tcp and ccp algorithms for arbitrary reticulation - visible networks .",
    "they rely on the decomposition theorem proven in section  [ sec4 ] .    in @xcite , we proved for the first time that the number of reticulation nodes in a binary reticulation - visible network is bounded from above by a linear function in the number of the leaves .",
    "the bound was established using the fact that reticulation - visible networks are tree - based @xcite , that is , they can be obtained from a tree with the same set of labeled leaves by the addition of some edges between the tree edges . using the same technique",
    ", we later proved that a binary galled network with @xmath0 leaves has at most @xmath1 reticulation nodes @xcite . in the present paper ,",
    "we use the decomposition theorem to derive the same bound for arbitrary galled networks , in which tree nodes are not necessarily binary .",
    "therefore , we present a new technique for establishing the size of a network with visibility property .",
    "one interesting problem for future research is how to extend our study into fast heuristic tcp and ccp algorithms for arbitrary networks .",
    "other problems include ( a ) testing whether two reticulation - visible networks display the same set of binary trees in polynomial time and ( b ) application of the decomposition theorem in reconstructing reticulation - visible networks from gene trees or sequences .",
    "solutions for these questions are definitely valuable in phylogenetics .",
    "the authors are grateful to philippe gambette , anthony labarre , and stphane vialette for discussions on the problems studied in this work .",
    "this work was supported by a singapore moe arf tier-1 grant r-146 - 000 - 177 - 112 and the merlion programme 2013 .",
    "dasgupta was supported by nsf grant iis-1160995                      gambette , p. , gunawan , a.d.m . ,",
    "labarre , a. , vialette , s. , zhang , l.x .",
    ": locating a tree in a phylogenetic network in quadratic time , _ proc .",
    "19th annual interl confer .",
    "res . in comput .",
    "notes comput .",
    "sci . , pp .",
    "96107 , springer , berlin , germany ( 2015 )    gambette , p. , gunawan , a.d.m .",
    ", labarre , a. , vialette , s. , zhang , l.x .",
    ": solving the tree containment problem for genetically stable networks in quadratic time , _ proc . of 26th annual intl workshop combin .",
    "( accepted ) , springer , berlin , germany ( 2015 )          huson , d.h . , klpper , t.h .",
    ": beyond galled trees : decomposition and computation of galled networks , _ proc .",
    "11th annual intl confer .",
    "notes comput .",
    "4453 , pp .",
    "211225 , springer , berlin , germany ( 2007 )              moret , b.m.e .",
    ", nakhleh , l. , warnow , t. , linder , c.r . ,",
    "tholse , a. , padolina , a. , sun , j. , timme , r. : phylogenetic networks : modeling , reconstructibility , and accuracy , _ ieee - acm trans .",
    "_ 1 , 1323 ( 2004 )              zhang , l. , cui , y. : an efficient method for dna - based species assignment via gene tree and species tree reconciliation , _ proc .",
    "10th annual intl workshop alg .",
    "_ , pp . 300311 , springer , berlin , germany ( 2010 )"
  ],
  "abstract_text": [
    "<S> in phylogenetics , phylogenetic trees are rooted binary trees , whereas phylogenetic networks are rooted arbitrary acyclic digraphs . </S>",
    "<S> edges are directed away from the root and leaves are uniquely labeled with taxa in phylogenetic networks . for the purpose of validating evolutionary models , biologists check whether or not a phylogenetic tree is contained in a phylogenetic network on the same taxa . </S>",
    "<S> this tree containment problem is known to be np - complete . </S>",
    "<S> a phylogenetic network is reticulation - visible if every reticulation node separates the root of the network from some leaves . </S>",
    "<S> we answer an open problem by proving that the problem is solvable in quadratic time for reticulation - visible networks . the key tool used in our answer </S>",
    "<S> is a powerful decomposition theorem . </S>",
    "<S> it also allows us to design a linear - time algorithm for the cluster containment problem for networks of this type and to prove that every galled network with @xmath0 leaves has @xmath1 reticulation nodes at most . </S>"
  ]
}