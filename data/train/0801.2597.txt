{
  "article_text": [
    "starting about 20 years ago , there has been increasing activity by discrete mathematicians and ( mathematically inclined ) jugglers in developing and exploring ways of representing various possible juggling patterns numerically ( e.g. , see @xcite ) .",
    "perhaps the most prominent of these is the idea of a _ juggling sequence _ ( or `` siteswap '' , as it is often referred to in the juggling literature ) .",
    "the idea behind this approach is the following . for a given sequence @xmath3 of nonnegative integers ,",
    "we associate a ( possible ) periodic juggling pattern in which at time @xmath4 , a ball is thrown so that it comes down at time @xmath5 .",
    "this is to be true for each @xmath6 . because we assume this is to be repeated indefinitely with period @xmath1 , then in general , for each @xmath4 and each @xmath7 , a ball thrown at time @xmath8 will come down at time @xmath9 .",
    "the usual assumption made for a sequence @xmath10 to be a valid juggling sequence is that at no time do two balls come down at the same time .",
    "this assumption results in many consequences , e.g. , all of the quantities @xmath11 must be distinct , the number of balls in the pattern is the average @xmath12 , and the number of juggling sequences with period @xmath1 having fewer than @xmath13 balls is @xmath14 ( see @xcite ) .",
    "an important object for understanding the relationships and transitions between various juggling sequences is the concept of a _ state diagram _ , developed independently ( and almost simultaneously ) by jack boyce and allen knutson @xcite .",
    "this is a directed graph where each vertex is called a _ state _ or _",
    "landing schedule _ , a @xmath15-@xmath2 vector indicating when the balls that are currently in the air will land , and edges represent possible transitions between states .",
    "the vertex and edge sets for the state diagram can be defined as follows : @xmath16    more specifically , each juggling sequence @xmath10 is associated with a state @xmath17 which can be found by imagining that the sequence has been executed infinitely often in the past , with a final throw @xmath18 being made at time @xmath15 .",
    "then @xmath19 is @xmath2 if and only if there is some ball still in the air at time @xmath15 that will land at time @xmath4 . in this case",
    "we say that @xmath10 is a @xmath0-juggling sequence .",
    "if we are now going to throw one more ball at time @xmath2 , transitioning to a ( possibly ) new juggling state @xmath20 , then we are restricted to throwing it so that it lands at some time @xmath21 which has @xmath22 .",
    "the new state @xmath23 then has @xmath24 for @xmath25 and @xmath26 .",
    "the preceding remarks assume that @xmath27 . if @xmath28 , so that there is no ball available to be thrown at time @xmath2 , then a `` no - throw '' occurs , and the new state vector @xmath20 satisfies @xmath29 for all @xmath30 .",
    "these give the two basic transitions that can occur in the state diagram . with this interpretation ,",
    "it is easy to see that a juggling sequence of period @xmath1 exactly corresponds to a walk of length @xmath1 in the state diagram .    in @xcite , the problem of enumerating @xmath0-juggling sequences of period @xmath1",
    "was studied , which by the above comments is equivalent to counting the number of directed closed walks of length @xmath1 starting at @xmath0 in the state diagram . in the same paper , the related problem of counting the number of `` primitive '' closed walks of length @xmath1",
    "was also solved .",
    "these are walks in which the starting state @xmath0 is visited only at the beginning and the end of the walk .",
    "a particular unsolved problem mentioned in @xcite was that of extending the analysis to the much more complex situation of _ multiplex _ juggling sequences . in a multiplex juggling sequence , for a given parameter @xmath31 , at each time instance up to @xmath31 balls can be thrown and caught at the same time , where the balls thrown at each time can have different landing times .",
    "thus , ordinary juggling sequences correspond to the case @xmath32 .    as before",
    ", we can describe a ( multiplex ) juggling sequence as a walk in a state diagram . here",
    "a state @xmath33 can again be described as a landing schedule where @xmath34 are the number of balls currently scheduled to land at time @xmath4 .",
    "we also have a state diagram which has as its vertices all possible states and for edges all ways to go from one state to another state ( see @xcite ) .",
    "the state diagram is thus a directed graph with two important parameters : @xmath13 , the number of balls that are being juggled , and @xmath31 , the maximum number of balls that can be caught / thrown at any one time .",
    "the vertex set and edge set are defined as follows : @xmath35    since each state will only have finitely many nonzero terms , we will truncate the terminal zero portions of the state vectors when convenient .",
    "the height of a state @xmath36 will be the largest index @xmath4 for which @xmath37 , and will be denoted by @xmath38 . a small portion of the state diagram when @xmath39 and @xmath40 is shown in figure  [ fig : state ] .     and @xmath40 .",
    "]      to better follow the analysis ( and make practical demonstrations easier ) we can reinterpret multiplex juggling by a series of buckets and balls .",
    "the buckets will represent future landing times for @xmath41 and the balls are distributed among these buckets .",
    "a state vector is then a listing of how many balls are currently in each bucket , and @xmath31 is now the maximum number of balls that can fit inside of a bucket .",
    "transitions from state to state happen by having the buckets shift down by one and redistributing any balls that were in the bottom bucket .",
    "this process is shown in figure  [ fig : buckets ] .          to describe a walk in the state diagram it suffices to know",
    "what state we start in and how we transition from state to state . in transitioning from state to state",
    "the important piece of information is what happened to the ball(s ) in the bottom bucket .",
    "this can be described by a multi - set which lists the new location(s ) of the ball(s ) .",
    "we can thus describe our walk by a series of multi - sets @xmath42 such that each set has @xmath31 elements ( when we have fewer than @xmath31 balls to redistribute we will indicate no - throws by @xmath15 ) .",
    "these sets are analogous to siteswap notation for juggling . in particular",
    ", it can be shown that @xmath43    in the next section we will combine the idea of this multiplex siteswap notation with the buckets .",
    "one way to use the buckets to find a sequence of length @xmath1 that starts in state @xmath44 and ends in state @xmath45 ( if one exists ) is to start with the balls arranged in the buckets as dictated by @xmath36 .",
    "we then modify the capacities of the buckets so that they are ( starting at the first bucket ) @xmath46 finally , take @xmath1 steps ( such as shown in figure  [ fig : buckets ] ) being careful not to exceed the capacity of any bucket and at the end , we will be forced into state @xmath47 . on the other hand , every possible way to start in @xmath36 and end in @xmath47 in @xmath1 steps can be done in this modified buckets approach .",
    "finding all of the walks of length @xmath1 in the state diagram between @xmath36 and @xmath47 is thus equivalent to finding all of the walks that can be run using this modified bucket procedure .",
    "this is what we will actually enumerate .",
    "we start with the following matrix , where @xmath48 ( this is a @xmath15-@xmath2 matrix , where any unspecified entries are @xmath15 s ) .",
    "each block of @xmath31 columns will correspond to one transition in the state diagram / buckets procedure . in a block",
    ", each column corresponds to a single element in the multi - set describing our transition .",
    "the first @xmath2 in a column corresponds to a no - throw or a throw of height @xmath15 , the second @xmath2 corresponds to a throw of height @xmath2 , the third @xmath2 to a throw of height @xmath49 and so on .",
    "so we choose exactly one @xmath2 in each column and by reading the blocks of columns we will get the transitions @xmath50 between states .",
    "each row will correspond to a bucket , and to incorporate the modified buckets approach we specify a row sum for each row .",
    "the row sum will be the `` unused capacity '' of the buckets .",
    "beginning at the first row and going down the row sums will be @xmath51    as an example , suppose that we wanted a walk of length @xmath52 that starts and ends in the state @xmath53 in the state diagram shown in figure  [ fig : state ]",
    ". then this corresponds to choosing one @xmath2 out of each column in the matrix below on the left so that the row sums are as dictated on the side of the matrix .",
    "@xmath54 one possible solution is shown in the matrix on the right which corresponds to the walk @xmath55 here we have indicated the sets @xmath50 under each transition .    to see",
    "why this works we need to show that each multi - set given by a block of columns is a valid transition in our modified buckets procedure . starting with the first block ,",
    "the first row sum should be @xmath56 , this indicates that we currently have an excess capacity of @xmath56 in the bottom bucket and so we need to make @xmath56 no - throws , i.e. , throws of height @xmath15 , and by row sum restrictions we are forced to select exactly @xmath56 of the @xmath2 s on the first row .",
    "this accounts for @xmath56 of the columns in the first block .",
    "the remaining @xmath57 columns must have @xmath2 s ( i.e. , balls ) distributed among the rows ( i.e. , buckets ) which still have extra capacity .",
    "thus the first block must give a valid transition in the procedure .",
    "after selecting the @xmath2 s for the first block we then update the row sums according to our choices , remove the first block and then repeat the same process @xmath58 times .",
    "conversely , it is easy to check that given the transitions @xmath59 joining @xmath36 to @xmath47 , we can find a selection of @xmath2 s in the matrix @xmath60 which corresponds to this walk and satisfies the row / column sum restrictions .",
    "finally , since multi - sets are unordered , our choice of @xmath2 s in columns is unique up to permutation of the columns in a block , so we may assume that the heights of the @xmath2 s in a block are weakly decreasing ( as shown in the example above ) .",
    "we now have the following general result .",
    "[ lem : matrix ] suppose we are given a state diagram with capacity @xmath31 and states @xmath61 and @xmath62 , and @xmath48 .",
    "then the number of walks of length @xmath1 starting at @xmath36 and ending at @xmath47 is equal to the number of ways of choosing @xmath63 ones out of the matrix @xmath60 given above such that :    * each column sum is @xmath2 . *",
    "the row sums are ( in order from first to last ) @xmath51 * in each block of @xmath31 columns the height of selected @xmath2 s is weakly decreasing .    if for some @xmath4 , @xmath64 , then one of the row sums will be negative which is impossible and thus we have no solutions for the selection of @xmath2 s . at the same time it is easy to see that there can be no walks in the state diagram of length @xmath1 joining @xmath36 and @xmath47 by comparing their landing schedules .    when @xmath65 , if we ignore rows with row sum @xmath15 , then all the rows and column sums will be @xmath2 . in this case",
    "we can count the number of walks joining two states by calculating the permanent of a matrix .",
    "this is similar to the approach taken by chung and graham @xcite .",
    "we now count the number of ways to fill the matrix @xmath60 according to the restrictions in lemma  [ lem : matrix ]",
    ". we will demonstrate the procedure by working through an example , namely counting the number of periodic multiplex juggling sequences of length @xmath1 that start and end in state @xmath66 when @xmath67 .",
    "the first thing to observe is that when the height of @xmath36 is small compared to @xmath1 then the row sums have the following form : @xmath68 we can form a recurrence based on this where we fill in the last block and then reduce it to the case when there is one fewer @xmath31 in the middle .    without loss of generality",
    "we can assume that our noise at the end is a partition of the @xmath13 balls so that no part is larger than @xmath31 , i.e. , we can ignore any rows with row sum @xmath15 and by a simple correspondence we can assume that the row sums are weakly decreasing .    for each partition @xmath69 of @xmath13 with each part at most @xmath31 ,",
    "let @xmath70 be the number of ways to fill the matrix @xmath71 where the row sums are given by @xmath72 in our example , there are @xmath73 such partitions , @xmath74 , and so we will have the three functions @xmath75 , @xmath76 and @xmath77 .",
    "we now form a system of linear recurrences , @xmath78 , by examining the different ways to fill in the last block of columns .",
    "note that the row sums corresponding to the last block are @xmath79 .",
    "the @xmath31 comes from the no - throws and after we have filled in the last block it will become incorporated into the new terminal distribution . thus at each stage we will decrease the number of middle @xmath31 s by @xmath2 .",
    "for example , if we are considering @xmath80 then we have the following @xmath81 different ways to fill in the last block satisfying the conditions of lemma  [ lem : matrix ] : @xmath82 by looking at the new terminal distributions it follows that @xmath83 similar analysis shows that @xmath84    we can rewrite this in matrix form as @xmath85 in general , we will have that @xmath86 where @xmath87 as given above .",
    "note that the matrix @xmath88 will be independent of our choice of @xmath36 and @xmath47 , and depends only on @xmath13 and @xmath31 .",
    "varying @xmath36 will change the initial conditions and varying @xmath47 will change which of the @xmath89 we are interested in for our recurrence .    for our problem , we are interested in @xmath90 as our terminal state is @xmath91 ( i.e. , corresponding to the partition @xmath73 ) .",
    "we want to transform our first - order system of linear recurrences into a single recurrence for @xmath90 . manipulating the recurrences in it",
    "can be shown that @xmath92 this gives a recurrence for the number of periodic juggling sequence of length @xmath93 for @xmath93 sufficiently large ( i.e. , we have shifted our sequences @xmath70 past the initial noise ; when counting periodic juggling sequences we need to remember to account for this shift ) .",
    "the characteristic polynomial of the matrix in is @xmath94 , the same coefficients as in .",
    "this is a consequence of the cayley - hamilton theorem .",
    "namely if the characteristic polynomial of the matrix @xmath88 is @xmath95 then @xmath96 the recursion that the characteristic polynomial of @xmath88 gives is universal for a fixed @xmath13 and @xmath31 in the following sense .",
    "let @xmath97 be the number of walks of length @xmath1 joining state @xmath36 to state @xmath47 .",
    "then for @xmath1 sufficiently large , @xmath97 satisfies the recursion given by the characteristic polynomial of @xmath88 ( which is independent of @xmath36 and @xmath47 ) .",
    "it remains to calculate enough initial terms to begin the recursion .",
    "using lemma  [ lem : matrix ] this can be handled by brute force or some careful case analysis . in general , we will need to calculate the first @xmath98 terms where @xmath99 is the number of partitions of @xmath13 with each part at most @xmath31 .",
    "the first @xmath100 terms are to handle the initial noise caused by @xmath36 and the next @xmath99 terms are to help start the recursion .",
    "a calculation shows that the sequence counting the number of periodic juggling sequences that start and end at @xmath101 starts @xmath102 . now applying the recursion we get the sequence @xmath103 with the recursion and the initial values it is then a simple matter to derive a generating function for the number of juggling sequences of period @xmath1 . the generating function for this series and several others",
    "are given in table  1 .",
    "a related open problem is to find the number of prime juggling sequences which start and end in a given state @xmath0 .",
    "a prime juggling sequence corresponds to a simple cycle in the state diagram , i.e. , it never visits any vertex more than once .",
    "note that for a primitive juggling sequence we are allowed to visit vertices other than @xmath0 as often as we want .",
    "one implicit assumption that we have made is that the height the balls can be thrown to in the juggling sequence is essentially limited only by the period .",
    "this might be unrealistic when trying to implement the procedure for an actual juggler . in this case",
    "we would like to add an additional parameter which is the maximum height a ball can be thrown .",
    "while it is not difficult to adopt the matrix @xmath60 to handle this additional constraint , our recursion method will no longer work . for this setting ,",
    "the simplest method might be to find the adjacency matrix of the ( now finite ) state diagram and take powers to calculate the number of walks .",
    "another implicit assumption that we have made is that the balls are identical , it is easy to imagine that the balls are distinct and then we can ask given an initial placement of balls and a final placement of balls how many walks in the state diagram are there .",
    "this problem is beyond the scope of the methods given here . however , stadler @xcite has had some success in this direction ( using different methods than the ones presented here ) , he was able to derive an expression involving kostka numbers enumerating the number of such sequences , as well as several other related sequences",
    ".    it would be interesting to know for each @xmath31 , @xmath1 and @xmath13 , which states @xmath0 have the largest number of ( primitive ) @xmath0-juggling sequences of length @xmath1 .",
    "when @xmath32 , then it would seem that the so - called ground state @xmath104 does .",
    "however , for larger values of @xmath31 , it is not so clear what to guess .",
    "99 j. buhler , d. eisenbud , r. graham and c. wright , juggling drops and descents , _ amer . math .",
    "monthly _ * 101 * ( 1994 ) , 507519",
    ". j. buhler and r. graham , a note on the binomial drop polynomial of a poset , _",
    "j. combin .",
    "theory ser .",
    "a _ * 66 * ( 1994 ) , 321326 . j. buhler and r. graham , juggling patterns , passing , and posets , _ mathematical adventures for students and amateurs _",
    ", maa publications , ( 2004 ) , 99116 . f. chung and r. graham , universal juggling cycles , preprint .",
    "f. chung and r. graham , primitive juggling sequences , to appear in _ amer .",
    "r. ehrenborg and m. readdy , juggling and applications to @xmath105-analogues , _ discrete math . _",
    "* 157 * ( 1996 ) , 107125 . i. m. gessel and r. p. stanley , algebraic enumerations , _ handbook of combinatorics _ , vol .",
    "ii , elsevier , amsterdam , ( 1995 ) , 10211061 .",
    "r. l. graham , d. e. knuth and o. patashnik , _ concrete math . a foundation for computer science _ ,",
    "addison - wesley , reading , ma , ( 1994 ) . juggling information service at www.juggling.org . b. polster , _ the mathematics of juggling _ ,",
    "springer , new york , 2000 .",
    "n. sloane , _ online encyclopedia of integer sequences _ , www.research.att.com/~njas / sequences/. j. d. stadler , juggling and vector compositions , _ discrete math .",
    "_ * 258 * ( 2002 ) , 179191 .",
    "j. d. stadler , _ personal communication_. g. s. warrington , juggling probabilities , _ amer .",
    "monthly _ * 112 * , no .",
    "2 , ( 2005 ) , 105118 ."
  ],
  "abstract_text": [
    "<S> we consider the problem of enumerating periodic @xmath0-juggling sequences of length @xmath1 for multiplex juggling , where @xmath0 is the initial state ( or _ landing schedule _ ) of the balls . </S>",
    "<S> we first show that this problem is equivalent to choosing @xmath2 s in a specified matrix to guarantee certain column and row sums , and then using this matrix , derive a recursion . </S>",
    "<S> this work is a generalization of earlier work of fan chung and ron graham . </S>"
  ]
}