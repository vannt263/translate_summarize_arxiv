{
  "article_text": [
    "many situations involve the computation of an equilibrium or a stable configuration of some sort in a dynamic environment .",
    "sometimes it is the result of individual agents acting on their own noncompetitively but selfishly ( e.g. , nash and other economic equilibria ) , sometimes it is agents acting competitively against each other ( and perhaps nature / chance ) , sometimes the equilibrium is the limit of an iterative process that evolves in some direction until it settles . often the sought objects can be described mathematically as the fixed points of an equation @xmath0 .",
    "many models and problems from a broad variety of areas are of this nature .",
    "examples include : nash equilibria in games ; market equilibria ; computation of optimal strategies and the values of competitive games ( stochastic and other games ) ; stable configurations of neural networks ; analysis of basic stochastic models for evolution like branching processes , and for language like stochastic context - free grammars ; and models that incorporate the basic primitives of probability and recursion like recursive markov chains .",
    "most of these models and problems have been studied mathematically for a long time , leading to the development of rich theories . yet ,",
    "some of their most basic algorithmic questions are still not resolved , in particular it is not known whether they can be solved in polynomial time .    despite the broad diversity of these problems , there are certain common computational principles that underlie many of these different types of problems , which are captured by the complexity classes pls , ppad , and fixp . in this paper",
    "we will review these principles , the corresponding classes , and the types of problems they contain .",
    "all the problems we will discuss are total search problems . formally , a _ search problem _ @xmath1 has a set of instances , each instance @xmath2 has a set @xmath3 of acceptable answers ; the search problem is _ total _ if @xmath4 for all instances @xmath2 . as usual , for computational purposes ,",
    "instances are represented by strings over a fixed alphabet @xmath5 , and it is assumed that , given a string over @xmath5 one can determine in polynomial time if it represents an instance of a problem .",
    "the size @xmath6 of an instance is the length of its string representation .",
    "input numbers ( such as the payoffs of games , input probabilities of stochastic models , etc . ) are assumed to be rationals represented in binary by numerator and denominator .",
    "the underlying solution space from which answers are drawn may be finite and discrete , as in combinatorial problems , or it may be infinite and continuous . in the former ( the finite ) case ,",
    "solutions are represented also as strings and the problem is : given an instance @xmath2 , compute a solution in @xmath3 . in the latter ( infinite / continuous ) case also , if there are rational - valued solutions ( as in linear programming for example ) , then the problem is to compute one of them . in several problems",
    "however , the solutions are inherently irrational , and we can not compute them exactly ( in the usual turing machine - based model of computation and complexity ) . in these cases",
    "we need to specify precisely which information about the solutions is to be computed ; this could be for example a yes / no question , such as , does an event in a stochastic model occur almost surely ( with probability 1 ) or does the value of a game exceed a given threshold , or we may want to compute an answer up to a desired precision . in any case , the computational tasks of interest have to be defined precisely , because different tasks can have different complexity .    in this paper we will discuss a variety of equilibria and fixed point problems , and the complexity classes which capture the essential aspects of several types of such problems .",
    "we discuss three classes , pls , ppad , and fixp , which capture different types of equilibria .",
    "some representative complete problems for these classes are : for pls pure nash equilibria in games where they are guaranteed to exist , for ppad ( mixed ) nash equilibria in 2-player normal form games , and for fixp ( mixed ) nash equilibria in normal form games with 3 ( or more ) players .",
    "consider the following _ neural network _",
    "model @xcite : we have an undirected graph @xmath7 with a positive or negative weight @xmath8 on each edge @xmath9 ( we can consider missing edges as having weight 0 ) and a threshold @xmath10 for each node @xmath11 . a configuration of the network is an assignment of a state @xmath12 ( ` on ' ) or @xmath13 ( ` off ' ) to each node @xmath11 . a node @xmath14 is _ stable _ ( or ` happy ' ) if @xmath15 and @xmath16 , or @xmath17 and @xmath18 , i.e. the state of @xmath14 agrees with the sign of the weighted sum of its neighbors plus the threshold .",
    "a configuration is _ stable _ if all the nodes are stable .",
    "a priori it is not obvious that such a configuration exists ; in fact for directed networks there may not exist any . however , every undirected network has at least one ( or more ) stable configuration @xcite .",
    "in fact , a dynamic process where in each step one node that is unstable ( any one ) switches its state , is guaranteed to eventually converge in a finite number of steps to a stable configuration , no matter which unstable node is switched in each step .",
    "( it is important that updates be asynchronous , one node at a time ; simultaneous updates can lead to oscillations . ) to show the existence of a stable configuration and convergence , hopfield introduced a value function ( or ` potential ' or ` energy ' ) on configurations , @xmath19 . if @xmath14 is an unstable node in configuration @xmath20 , then switching its state results in a configuration @xmath21 with strictly higher value @xmath22 .",
    "since there is a finite number @xmath23 of configurations , the process has to converge to a stable configuration .",
    "the _ stable configuration problem _ is the following : given a neural network , compute a stable configuration .",
    "this is a total search problem , as there may be one or more stable configurations , and anyone of them is an acceptable output .",
    "although the stable configuration problem does not call a priori for any optimization , the problem can be viewed equivalently as one of _ local _ optimization : compute a configuration @xmath20 whose value @xmath24 can not be increased by switching the state of any single node .",
    "local search is a common , general approach for tackling hard optimization problems . in a combinatorial optimization problem @xmath1",
    ", every instance @xmath2 has an associated finite set @xmath25 of solutions , every solution @xmath26 has a rational value or cost @xmath27 that is to be maximized or minimized . in local search , a solution @xmath28 has in addition an associated neighborhood @xmath29 ; a solution is locally optimal if it does not have any ( strictly ) better neighbor , i.e. one with higher value or lower cost .",
    "a standard local search algorithm starts from an initial solution , and keeps moving to a better neighbor as long as there is one , until it reaches a local optimum .",
    "the complexity class pls ( polynomial local search ) was introduced in @xcite to capture the inherent complexity of local optima for usual combinatorial problems , where each step of the local search algorithm can be done in polynomial time .",
    "even though each step takes polynomial time , the number of steps can be potentially exponential , and in fact for many problems we do not know how to compute even locally optimal solutions in polynomial time .",
    "formally , a problem @xmath1 is in pls if solutions are polynomially bounded in the input size , and there are polynomial - time algorithms for the following tasks : ( a ) test whether a given string @xmath2 is an instance of @xmath1 and if so compute a ( initial ) solution in @xmath25 , ( b ) given @xmath30 , test whether @xmath26 and if so compute its value @xmath27 , ( c ) given @xmath30 , test whether @xmath20 is a local optimum and if not , compute a better neighbor @xmath31 .",
    "notions of pls reduction and completeness were introduced to relate the problems . a number of well - studied combinatorial optimization problems ( e.g. graph partitioning , tsp , max cut , max sat etc . ) with common neighborhood structures ( both simple and sophisticated ) have been shown to be pls - complete by many researchers , and thus locally optimal solutions can be computed efficiently for anyone of them iff they can be computed for all pls problems . for a detailed survey and bibliography see @xcite . in particular , the stable configuration problem is pls - complete ( and is complete even if all thresholds are 0 and all weights are negative , i.e. all connections are repulsive ) @xcite .",
    "it is worth stressing several points : 1 .",
    "the search problem asks to compute any local optimum , not a specific one like the best , which is often np - hard .",
    "2 . given an instance @xmath2",
    ", we can always guess a solution @xmath20 , and verify in polynomial time that it is indeed a solution ( @xmath26 ) and it is locally optimal .",
    "hence pls is somewhere between p and tfnp ( total search problems in np ) .",
    "such problems can not be np - hard ( under cook reductions ) unless np = conp .",
    "we are interested in the inherent complexity of the search probleme itself _ by any algorithm whatsoever _ , not necessarily the standard local search algorithm , which often has exponential running time . for example",
    ", linear programming can be viewed as a local search problem ( where local optima= global optima ) with simplex as the local search algorithm ; we know that simplex under many pivoting rules is exponential , yet the problem itself can be solved in polynomial time by completely different methods ( ellipsoid , karmakar ) . in fact , many common local search problems are complete under a type of _ tight _ pls - reduction which allows us to conclude that the corresponding standard local search algorithm is exponential . for example , in the neural network model , the dynamic process where unstable nodes switch iteratively their state until the network stabilizes takes for some networks and for some ( in fact for most ) initial configurations exponential time to converge , no matter which unstable node is switched in each step . furthermore , the computational problem : given a network and initial configuration compute a stable configuration ( anyone ) that can result from this process is a pspace - complete problem .",
    "another type of equilibrium problems that can be placed in pls concerns finding pure nash equlibria for games where they are guaranteed to exist .",
    "a ( finite ) game has a finite set @xmath32 of players , each player @xmath33 , has a finite set @xmath34 of pure strategies and a payoff ( utility ) function @xmath35 on the product strategy space @xmath36 ; we assume for computational purposes that @xmath35 takes rational values .",
    "a pure strategy profile @xmath20 is a member of @xmath37 , i.e. a choice of a pure strategy @xmath38 for each player .",
    "it is a pure nash equilibrium if no player can improve his payoff by switching unilaterally to another pure strategy ; that is , if @xmath39 denotes the profile where player @xmath40 plays strategy @xmath41 and the other players play the same strategy as in @xmath20 , then @xmath42 for every @xmath40 and every @xmath41 .",
    "not every game has a pure nash equilibrium .",
    "mixed strategy _ for player @xmath40 is a probability distribution on @xmath34 . letting @xmath43 denote the set of mixed strategies for player @xmath40 , the set of mixed strategy profiles is their product @xmath44 ; i.e.",
    ", a mixed strategy profile is a non - negative vector @xmath45 of length @xmath46 ( i.e. its entries are indexed by all the players pure strategies ) that is a probability distribution on the set of pure strategies of each player .",
    "the ( expected ) payoff @xmath47 of @xmath45 for player @xmath40 is @xmath48 where the sum is over all tuples @xmath49 such that @xmath50 , and @xmath51 is the entry of @xmath45 defining the probability with which player @xmath40 plays strategy @xmath52 .",
    "a ( mixed ) _ nash equilibrium _ ( ne ) is a strategy profile @xmath53 such that no player can increase its payoff by switching to another strategy unilaterally .",
    "every finite game has at least one nash equilibrium @xcite .    for example",
    ", a neural network can be viewed as a game with one player for each node , each player has two pure strategies @xmath54 ( corresponding to the two states ) and its payoff function has two values 1 ( happy ) and 0 ( unhappy ) depending on its state and that of its adjacent nodes .",
    "the stable configurations of the network are exactly the pure nash equilibria of the game .",
    "this game is a case of a _ graphical game _ : players correspond to nodes of a graph and the payoff function of a player depends only on its own strategy and that of its neighbors .",
    "general graphical games may not have pure nash equilibria .",
    "for an overview of graphical games see @xcite .",
    "there is a class of games , _ congestion games _ , in which there is always a pure equilibrium . in a congestion game , there are @xmath32 players , a finite set @xmath55 of resources , the pure strategy set @xmath56 of each player is a family of subsets of the resources , each resource @xmath57 has an associated cost function @xmath58 .",
    "if @xmath59 is a pure strategy profile , the congestion @xmath60 of a resource @xmath61 is the number of players whose strategy contains @xmath61 ; the cost ( negative payoff ) of a player @xmath40 is @xmath62 .",
    "rosenthal showed that every congestion game has a pure equilibrium @xcite .",
    "in fact , the iterative process where in each step , if the current pure strategy profile is not at equilibrium , a player with a suboptimal strategy switches to a strategy with a lower cost ( while other players keep the same strategy ) does not repeat any profile and thus converges in a finite number of steps to an equilibrium .",
    "the proof is by introducing a potential function @xmath63 and showing that switching the strategy of a player to a lower cost strategy results in a reduction of the potential function by the same amount .",
    "thus , the pure equilibria are exactly the local optima of the potential function @xmath24 with respect to the neighborhood that switches the strategy of a single player . computing",
    "a pure equilibrium is a local search problem , and it is in pls provided that the costs functions @xmath64 of the resources are polynomial time computable , and the strategy sets @xmath34 are given explicitly or at least one can determine efficiently whether a player can improve his strategy for a given profile .",
    "furthermore , fabrikant et al .",
    "@xcite showed that the problem is pls - complete .",
    "they showed that it is complete even in the case of _ network congestion games _ , where the resources are the edges of a given directed graph , each player @xmath40 has an associated source @xmath65 and target node @xmath66 and its set @xmath34 of pure strategies is the set of @xmath67 paths ; the cost function @xmath64 of each edge @xmath61 represents the delay as a function of the paths that use the edge , and completeness holds even for linear delay functions @xcite .",
    "as with other pls - complete problems , a consequence of the reductions , which are tight , is that the iterative local improvement algorithm can take exponential time to converge . for more information on congestion games",
    "see @xcite .",
    "there are several other games which are in pls and not known to be in p , and which are not known ( and not believed to be ) pls - complete .",
    "these are not one - shot games , but they are dynamic games played iteratively over time ( like chess , backgammon etc . ) .",
    "there are two main types of payoffs for the players in such games : in one type , the payoff of a history is an aggregation of rewards obtained in the individual steps of the history combined via some aggregation function , such as average reward per step or a discounted sum of the rewards ; in the other type , the payoff obtained depends on the properties of the history .",
    "we will discuss three such games in this section , and some more in the following sections .    a _ simple stochastic game _",
    "@xcite is a 2-player game played on a directed graph @xmath7 whose nodes represent the positions of the game , and the edges represent the possible moves .",
    "the sinks are labelled 1 or 2 and the nonsink nodes are partitioned into three sets , @xmath68 ( random nodes ) , @xmath69 ( max or player 1 nodes ) , @xmath70 ( min or player 2 nodes ) ; the edges @xmath71 out of each random node @xmath72 are labelled with probabilities @xmath73 ( assumed to be rational for computational puposes ) that sum to 1 .",
    "play starts at some initial node ( position ) and then moves in each step along the edges of the graph ; at a random node the edge is chosen randomly , at a node of @xmath69 it is chosen by player 1 , and at a node of @xmath70 it is chosen by player 2 . if the play reaches a sink labelled 1 , then player 1 is the winner , while if it reaches a sink labelled 2 or it goes on forever , then player 2 is the winner .",
    "the goal of player 1 is to maximize her probability of winning , and the goal of player 2 is to minimize it ( i.e. maximize his own winning probability ) .",
    "these are zero - sum games ( what one player wins the other loses ) . for every starting node @xmath20",
    "there is a well - defined value @xmath74 of the game , which is the probability that player 1 wins if they both play optimally .",
    "although the players are allowed to use randomization in each step and have their choice depend on their entire history , it is known that there are stationary , pure ( deterministic ) optimal strategies for both players .",
    "such a strategy @xmath75 for player @xmath76 is simply a choice of an outgoing edge ( a successor ) for each node in @xmath77 , thus there is a finite number of such pure strategies . for every pure strategy profile @xmath78 for the two players , the game reduces to a markov chain and the values @xmath79",
    "can be computed by solving a linear system of equations",
    ". if the edge probabilities are rational then the optimal values @xmath74 are also rational , of bit complexity polynomial in the input size .",
    "if there are only two of the three types of nodes in the graph , then the optimal strategies and the values @xmath74 can be computed in polynomial time .",
    "for example , if there is no player 2 , then the game becomes a markov decision process with the goal of maximizing the probability of reaching a sink labelled 1 , which can be optimized by linear programming .",
    "when we have all three types of nodes , the decision problem @xmath80 ( does player 1 win with probability at least 1/2 starting from position @xmath20 ) is in @xmath81 ( in fact in @xmath82 ) , and it is a well - known open problem whether it is in p @xcite .",
    "two ( pure ) strategies @xmath83 of the two players form an _ equilibrium _ if @xmath84 is a best response of player 1 to the strategy @xmath85 of player 2 ( i.e. @xmath84 is a maximizing strategy in the markov decision process obtained when the strategy of player 2 is fixed to @xmath85 ) , and vice - versa , @xmath85 is a best response of player 2 to @xmath84 .",
    "the equilibria are precisely the optimal strategy pairs .",
    "the problem can be viewed as a local search problem in pls if we take the point of view of one player , say player 1 : the solution set is the set of pure strategies of player 1 , the value of a strategy @xmath84 is @xmath86 where @xmath85 is a best response of player 2 to @xmath84 , and the neighbors of @xmath84 are the strategies obtained by switching the choice of a node in @xmath69 .",
    "the locally optimal solutions are the ( globally ) optimal strategies of player 1 .",
    "a _ mean payoff _",
    "game @xcite is a non - stochastic 2-player game played on a directed graph @xmath7 with no sinks , whose nodes are partitioned into two sets @xmath87 and whose edges are labelled by ( rational ) rewards @xmath88 .",
    "as above , play starts at a node and moves along the edges , where player 1 chooses the next edge for nodes in @xmath69 and player 2 for nodes in @xmath70 ( there are no random nodes here ) , and play goes on forever .",
    "the payoff to player 1 from player 2 of a history using the sequence of edges @xmath89 is the average reward per step , @xmath90 .",
    "again there are optimal pure stationary strategies @xmath83 for the players , and these form a path followed by a cycle @xmath91 ; the payoff ( value of the game ) is the ratio @xmath92 and is rational of polynomial bit complexity .",
    "as shown in @xcite , the optimal values and optimal strategies can be computed in pseudopolynomial time ( i.e. polynomial time for unary rewards ) ; furthermore the problem can be reduced to simple stochastic games , it is thus in pls and the decision problem is in @xmath82 , but it is open whether it is in p.    a still simpler , nonstochastic 2-player game , called _ parity game _ @xcite has been studied extensively in the verification area ; it is an important theoretical question in this area whether this game can be solved in polynomial time .",
    "a parity game is played again on a directed graph @xmath93 whose nodes are partitioned into two sets @xmath69 , @xmath70 and whose edges are labelled by positive integers .",
    "a history is winning for player 1 ( respectively player 2 ) if the maximum label that occurs infinitely often in the history is odd ( resp . even ) . in this game ,",
    "one of the two players has a pure optimal strategy that wins on every history that results against every strategy of the other player .",
    "determining who the winner of the game is ( and a winning strategy ) reduces to the decision problem for mean payoff games and in turn to simple stochastic games @xcite .",
    "nash s theorem asserts that every finite game @xmath94 has a ( generally , mixed ) equilibrium .",
    "nash proved his theorem in @xcite using brouwer s fixed point theorem : every continuous function @xmath95 from a compact convex body to itself has a fixed point , i.e. a point @xmath45 such that @xmath96 .",
    "specifically , given a finite game @xmath94 with @xmath32 players @xmath97 , a finite set @xmath34 of pure strategies and a payoff function @xmath35 for each player , a mixed strategy profile is a vector @xmath98 , which lies on the product @xmath99 of the @xmath32 unit simplexes @xmath100 .",
    "nash defined the following function from @xmath99 to itself : @xmath101 , where @xmath102 is the ( positive or negative ) `` gain '' in payoff of player @xmath40 if he switches to pure strategy @xmath52 while the other players continue to play according to @xmath45 ; @xmath102 is a ( multivariate ) polynomial in @xmath45 .",
    "nash showed that the fixed points of @xmath103 are precisely the equilibria of the game @xmath94 .",
    "there are several alternative proofs of nash s theorem , all using brouwer s theorem ( with different functions @xmath95 ) or the related kakutani s theorem ( for fixed points of multivalued maps ) .",
    "note that the underlying solution space here , @xmath99 , is continuous , not discrete and finite .",
    "furthermore , even if the payoff functions of the game are rational - valued , for 3 or more players it may be the case that all equilibria are irrational .",
    "market equilibria is another important application of fixed point theorems .",
    "consider the following exchange model @xcite .",
    "we have @xmath104 agents and @xmath105 commodities .",
    "the agents come to the market with an initial supply of commodities , which they exchange for their prefered ones ; each agent sells his supply at the prevailing prices , and buys his preferred bundle of commodities .",
    "for each vector @xmath106 of prices for the commodities , each agent @xmath107 has an ( positive or negative ) ` excess demand ' ( = demand - supply ) @xmath108 for each commodity @xmath40 .",
    "standard assumptions are that the functions @xmath108 ( i ) are homogeneous of degree 0 , thus the price vectors may be normalized to lie on the unit simplex @xmath109 , ( ii ) they satisfy walras law @xmath110 , ( iii ) they are continuous on the unit simplex .",
    "let @xmath111 be the ( total ) market excess demand for each commodity @xmath40 .",
    "the functions @xmath112 satisfy the same constraints .",
    "a vector @xmath106 of prices is an _ equilibrium _ if @xmath113 for all @xmath40 ( demand does not exceed supply ) , with equality for all commodities @xmath40 that have @xmath114 .",
    "brouwer s theorem can be used to show the existence of equilibria .",
    "namely , the equilibria are the fixed points of the function @xmath115 , defined by the formula @xmath116 .",
    "in fact , the equilibrium existence theorem can be conversely used to show brouwer s theorem : from a brouwer function one can construct an economy whose equilibria correspond to the fixed points of the function @xcite . in the classical arrow - debreu market model @xcite , the user preferences for the commodities are modeled by utility functions , which in turn induce the excess demand functions ( or correspondences , i.e. multivalued maps ) , and",
    "more generally the model includes also production . under suitable conditions ,",
    "the existence of equilibria is derived again using a fixed point theorem ( kakutani in @xcite , or brouwer in alternative proofs @xcite ) . as shown in a line of work by sonnenschein , mantel , debreu and others ( see e.g. @xcite ) , essentially any function satisfying the standard conditions can arise as the excess demand function in a market for suitably defined utility functions for the users .",
    "thus , there is a tight connection between fixed points of general functions and market equilibria .",
    "a number of other problems from various domains can be cast as fixed point computation problems , i.e. , every instance @xmath2 of a problem is associated with a function @xmath117 over some domain so that the sought objects @xmath3 are fixed points of @xmath117 ; in some cases , we may only want a specific fixed point of the function .",
    "we will mention several more examples in this section .",
    "recall the simple stochastic game from the last section .",
    "the vector @xmath118 of winning probabilities for player 1 satisfies the following system of equations @xmath96 , with one equation for each node @xmath20 : if @xmath20 is a sink labelled 1 ( respectively 2 ) then @xmath119 ( resp .",
    "@xmath120 ) ; if @xmath121 then @xmath122 ; if @xmath123 then @xmath124 ; if @xmath125 then @xmath126 . in general",
    "there may be multiple solutions , however the system can be preprocessed so that there is a unique solution in the unit cube @xmath127 .",
    "stochastic games were originally introduced by shapley in @xcite in a more general form , where players can move simultaneously . as shown in @xcite ,",
    "simple stochastic games can be reduced to shapley s game . in _",
    "shapley s game _ there is a finite set @xmath128 of states , each state @xmath72 has an associated one - shot zero - sum finite game with a reward ( payoff ) matrix @xmath129 whose rows ( resp .",
    "columns ) correspond to the actions ( pure strategies ) of player 1 ( resp .",
    "2 ) . if the play is in state @xmath72 and the players choose actions @xmath130 then player 1 receives reward @xmath131 $ ] from player 2 , the game stops with probability @xmath132 , and it transitions to state @xmath14 with probability @xmath133 , where @xmath134 .",
    "since there is at least positive probability @xmath135 of stopping in each step , the game stops a.s . in a finite number of steps .",
    "( another standard equivalent formulation is as a discounted game , where the game does not stop but future rewards are discounted by a factor @xmath136 per step ) .",
    "the goal of player 1 is to maximize ( and of player 2 to minimize ) the total expected reward , which is the value of the game .",
    "we want to compute the vector @xmath137 of game values for the different starting states @xmath72 . as usual",
    "all rewards and probabilities are assumed to be rationals for computational purposes .",
    "the values in general may be irrational now however .",
    "the vector @xmath45 satisfies a fixed point set of equations @xmath96 , as follows . for each state",
    "@xmath72 , let @xmath138 be the matrix , indexed by the actions of the players , whose @xmath130 entry is @xmath131 + \\sum_v p_{ij}^{uv } x_v$ ] , and let @xmath139 be the value of the one - shot zero - sum game with payoff matrix @xmath138 . then @xmath96 where @xmath140 .",
    "the function @xmath95 is a banach function ( a contraction map ) under the @xmath141 norm with contraction factor @xmath136 , and thus it has a unique fixed point , the vector of values of the game .",
    "_ branching processes _ are a basic model of stochastic evolution , introduced first in the single type case by galton and watson in the 19th century to study population dynamics , and extended later to the multitype case by kolmogorov and sevastyanov , motivated by biology .",
    "a branching process has a finite set @xmath142 of @xmath105 types , for each type @xmath143 there is a finite set of ` reproduction ' rules of the form @xmath144 , where @xmath145 $ ] is the probability of the rule ( thus , @xmath146 and @xmath147 is a vector whose components specify the number of offsprings of each type that an entity of type @xmath40 produces in the next generation . starting from an initial population , the process evolves from one generation to the next according to the probabilistic reporuction rules .",
    "the basic quantity of interest is the probability @xmath148 of extinction of each type : the probability that if we start with one individual of type @xmath40 , the process will eventually die .",
    "these can be used to compute the extinction probability for any initial population and are the basic for more detailed statistics of the process . as usual , we assume that the probabilities of the rules are rational",
    ". however the extinction probabilities are in general irrational .",
    "the vector @xmath45 satisfies a set of fixed point equations @xmath96 , where @xmath149 is the polynomial @xmath150}$ ] .",
    "note that @xmath149 has positive coefficients , thus @xmath95 is a monotone operator on @xmath151 and thus has a least fixed point ( lfp ) ; the lfp is precisely the vector of extinction probabilities of the branching process . for more information on the theory of branching processes and their applications",
    "see @xcite .",
    "_ stochastic context - free grammars _",
    "( scfg ) are context - free grammars where the production rules have associated probabilities .",
    "they have been studied extensively in natural language processing where they are an important model @xcite , and have been used also in biological sequence analysis .",
    "a basic quantity of interest is the probability of the language generated by a scfg ; again this may be an irrational number even if all the probabilities of the production rules are rational .",
    "the analysis of scfg s is closely related to that of branching processes .    a model that encompasses and generalizes",
    "both of branching processes and scfg s in a certain precise sense , is the _ recursive markov chains _",
    "( rmc ) model @xcite and the equivalent model of _ probabilistic pushdown machines _ @xcite .",
    "informally , a rmc is a collection of markov chains that can call each other in a potentially recursive manner like recursive procedures .",
    "the basic quantities of interest are the termination probabilities .",
    "these probabilities obey again a system of fixed point equations @xmath96 , where @xmath95 is a vector of polynomials with positive coefficients ; the least fixed point of the system gives the termination probabilities of the rmc .",
    "generalization to a setting where the dynamics are not completely probabilistic but can be controlled by one or more players leads to _ recursive markov decision processes and games _ @xcite .",
    "for example , we may have a branching process , where the reproduction can be influenced by players who want to bias the process towards extinction or survival .",
    "this results in fixed point systems of equations involving monotone polynomials and the min and max operators .",
    "all of the above problems are total ( single - valued or multi - valued ) search problems , in which the underlying solution space is continuous . in all of these problems",
    "we would ideally like to compute exactly the quantities of interest if possible ( if they are rational ) , and otherwise , we would like to bound them and answer decision questions about them ( eg . is the value of a stochastic game @xmath152 ? , does a rmc terminate with probability 1 ? ) or to approximate them within desired precision , i.e. compute a solution @xmath45 that is within @xmath153 of an / the answer @xmath53 to the search problem ( eg .",
    ", approximate within additive error @xmath153 the extinction probabilities of a branching process , or compute a mixed strategy profile for a game that is within @xmath153 of a nash equilibrium ) . in the approximation problem we would like ideally polynomial time in the size of the input and in @xmath154 ( the number of bits of precision ) .",
    "we refer to the approximation of an answer to a search problem as above as _",
    "strong _ approximation ( or the ` near ' problem ) to distinguish it from another notion of approximation , which we call the _ weak _ approximation ( or the ` almost ' problem ) that is specific to a fixed point formulation of a search problem via a function @xmath95 : a weak @xmath153-approximation is a point @xmath45 such that @xmath155 ( say in the @xmath141 norm ) .",
    "note that a search problem may be expressible in different ways as a fixed point problem using different functions @xmath95 , and the notion of weak approximation may depend on the function that is used ; the strong approximation notion is intrinsic to the search problem itself ( does not depend on @xmath95 ) . for many common fixed point problems",
    "( formally , for polynomially continuous functions @xcite ) , including all of the above problems , weak approximation reduces to strong , i.e. , given instance @xmath2 and ( rational ) @xmath156 , we can define a ( rational ) @xmath157 of bit - size polynomial in that of @xmath153 and in @xmath6 such that every ( strong ) @xmath158-approximation @xmath45 to an answer to the search problem ( i.e. , approximation to a fixed point of the function @xmath117 corresponding to the instance @xmath2 ) is a weak @xmath153-approximate fixed point ( i.e. , satisfies @xmath159 ) .",
    "the converse relation does not hold in general ; in particular , it does not hold for nash equilibria and the nash function @xmath160 .",
    "we discuss briefly now algorithms for such fixed point problems . for a banach function",
    "@xmath117 we can start at any point @xmath161 , and apply repeatedly @xmath117 .",
    "the process will converge to the unique fixed point .",
    "if the contraction factor @xmath136 is a constant @xmath162 , then convergence is polynomial , but if the margin @xmath163 from 1 is very small , inverse exponential in the size of the input @xmath2 ( as is generally the case , for example in shapley s game ) , then convergence is slow .    for a monotone function @xmath117 for which we want to compute the least fixed point , as in many of the examples above ( stochastic games , branching processes , rmc etc . ) , we can start from @xmath164 ( which is lower than the lfp ) and apply repeatedly @xmath117 ; the process will converge to the desired lfp , but again convergence is generally slow .",
    "note that for many of these problems , obtaining a weak @xmath153-approximation for @xmath153 constant or even inverse polynomial , @xmath165 is easy : for example , in a simple stochastic game or a branching process , the vector @xmath45 is bounded from above by the all-1 vector and @xmath166 increases monotonically with @xmath32 , so after at most @xmath167 iterations we will get a weak @xmath153-approximate fixed point @xmath45 .",
    "however , such a point @xmath45 is of no use in estimating the actual values or probabilities that we want to compute .",
    "approximating the value of a simple stochastic game even within additive error 1/2 is an open problem .    for general brouwer functions @xmath95 we can not simply apply iteratively @xmath95 from some starting point @xmath161 and hope to converge to a fixed point .",
    "there is extensive algorithmic work on the approximate computation of brouwer fixed points , starting with scarf s fundamental algorithm @xcite , the standard proof of brouwer s theorem involves a combinatorial lemma , sperner s lemma , combined with a ( generally nonconstructive ) compactness argument .",
    "scarf s algorithm solves constructively sperner s problem , and computes a weak @xmath153-approximate fixed point for the function .",
    "briefly , it works as follows .",
    "assume wlog that the domain is the unit simplex @xmath168 , and consider a simplicial subdivision of @xmath109 into simplices of sufficiently small diameter @xmath158 , so that @xmath169 implies @xmath170 .",
    "label ( `` color '' ) each vertex @xmath14 of the subdivision by an index @xmath171 such that @xmath172 ; if @xmath14 is not a fixed point there is at least one such index , if @xmath14 is a fixed point then label @xmath14 with say @xmath173 .",
    "note that the unit vectors @xmath174 at the @xmath105 corners of the simplex @xmath109 are labelled @xmath40 , and all vertices on the facet @xmath175 are labelled with an index @xmath176 .",
    "sperner s lemma implies then that the subdivision has at least one panchromatic simplex , i.e. a small simplex @xmath37 whose vertices have distinct labels . from the definition of the labels and the choice of @xmath158 it follows that any point @xmath177 satisfies @xmath178 .",
    "scarf s algorithm starts with a suitable subdivision and a boundary simplex whose vertices have @xmath179 distinct indices ( all except one ) , and then keeps moving to an adjacent simplex through the face with the @xmath179 indices ; the process can not repeat any simplex of the subdivision , so it will end up at a panchromatic simplex @xmath37 .",
    "note that @xmath37 may not contain any actual fixed points , and in fact may be located far from all of them , but any point @xmath45 of @xmath37 is a weak @xmath153-approximation .",
    "if we take finer and finer subdivisions letting the diameter @xmath158 go down to 0 , then the resulting sequence of weakly approximate fixed points must contain ( by compactness ) a subsequence that converges to a point , which must be a fixed point ; this latter part however is nonconstructive in general .",
    "there are several other subsequent methods for computing ( approximate ) fixed points , e.g. newton - based , and homotopy methods ( some of these assume differentiability and use also the derivatives of the function ) . scarf s algorithm , as well other general - purpose algorithms , treat the function @xmath95 as a black box . such black box algorithms must take exponential time in the worst case to compute a weak approximation @xcite . furthermore , for strong approximation no finite amount of time is enough in the black box model @xcite , and there are also noncomputability results for computing equilibria and fixed points for a model where the function is given via a turing machine @xcite",
    ". however , the restriction to black box access is a severe one , and the results do not mean that any of the specific problems we want to solve ( for example , nash equilibria ) is necessarily hard .",
    "consider a 2-player finite game , with the payoffs given explicitly in terms of the two payoff matrices @xmath180 of the two players ( i.e. , the game is presented in _ normal form _ ) .",
    "computing a specific nash equilibrium , such as one that maximizes the payoff to one of the players , or to all the players , is np - hard @xcite .",
    "however , the search problem that asks for _ any _ nash equilibrium is a different , ` easier ' problem , and is unlikely to be np - hard .",
    "the 2-player case of the nash equilibrium problem can be viewed either as a continuous or as a discrete problem , like linear programming : we can consider lp either as having a continuous solution space , namely all the real - valued points in the feasible polyhedron , or as having a discrete solution space , namely the vertices of the polyhedron or the feasible bases .",
    "similarly , for 2-player games which correspond to a linear complementarity problem . a mixed strategy profile is a nash equilibrium iff every pure strategy of each player is either at 0 level ( not in the support ) or is a best response to the strategy of the other player .",
    "assumming the game is nondegenerate ( we can always ensure this by a small perturbation ) the supports of the mixed strategies determine uniquely the equilibrium : we can set up and solve a linear system of equations which equate the payoffs of the pure strategies in the support of each player , and check that the solution satisfies the appropriate inequalities for the pure strategies that are not in the supports . one consequence of this is that if the payoffs are rational then there are rational equilibria , of polynomial bit complexity in the input size , and they can be computed exactly .",
    "a second consequence is that nash s theorem in this case can be proved directly , without resorting to a fixed point theorem , and algorithmically , namely by the lemke - howson algorithm @xcite .",
    "the algorithm has similar flavor to scarf s algorithm for fixed points .",
    "mixed profiles can be labelled ( ` colored ' ) by the set of pure strategies that are not in the support or that are best responses to the other player s strategy .",
    "the equilibria are the mixed profiles that are panchromatic , i.e. , labeled with all the pure strategies of both players . briefly",
    ", the algorithm starts from an artificial point that has all the colors except one , and then follows a path through a sequence of lp - like pivots , until it arrives at a panchromatic point ( profile ) , which must be an equilibrium ; the algorithm can not repeat any point , because at any point there are only two possible pivots , one forward and one backward , and there is a finite number of points ( supports ) so it terminates .",
    "it is known that the algorithm takes exponential time in the worst case @xcite .",
    "papadimitriou defined in @xcite a complexity class , ppad , that captures the basic principles of these path - following algorithms : there is a finite number of candidate solutions , and an underlying directed graph of moves between the solutions where each solution has at most one forward and one backward move , i.e. , the graph consists of a set of directed paths , cycles and isolated nodes ; a source of one path is an artificial starting solution , and every other endpoint ( source or sink ) of every path is an answer to the problem ( eg .",
    ", an equilibrium )",
    ". formally , a search problem @xmath1 is in ppad if each instance @xmath2 has a set @xmath25 of solutions which are ( strings ) polynomially bounded in the input size @xmath6 , and there are polynomial - time algorithms for the following tasks : ( a ) test whether a given string @xmath2 is an instance of @xmath1 and if so compute a initial solution @xmath181 in @xmath25 , ( b ) given @xmath30 , test whether @xmath26 and if so compute a successor @xmath182 and a predecessor @xmath183 , such that @xmath184 , @xmath185 , and @xmath186 .",
    "the @xmath187 and @xmath188 functions induce a directed graph @xmath189 , where @xmath190 , and the answer set to the instance @xmath2 of the search problem , @xmath3 , is the set of nodes of @xmath93 , other than @xmath181 that have indegree + outdegree = 1 , i.e. , are endpoints of the paths ; note that @xmath4 because there must be at least one more endpoint besides @xmath181 .",
    "as is customary , the class is closed under polynomial - time reduction , i.e. , if a search problem @xmath191 reduces to a problem @xmath1 that satisfies the above definition , then @xmath191 is considered also to belong to ppad .",
    "papadimitriou defined two other variants of this class in @xcite , ppa in which the underlying graph is undirected , and ppads in which the graph is directed and the answer set consists only of the sinks of the paths .",
    "however , ppad is the more interesting and richer of these classes in terms of natural problems .",
    "the class ppad lies somewhere between p and tfnp : all search problems in ppad are total , and furthermore , for a given instance @xmath2 , we can guess a solution @xmath20 and verify that it is an answer .",
    "thus , as in the case of pls , problems in ppad can not be np - hard unless np = conp .    by virtue of the lemke - howson algorithm ,",
    "the nash equilibrium problem for 2-player ( normal form ) games is in ppad . for 3 or more players we can not say that the nash problem is in ppad",
    "; for one thing the equilibria are irrational .",
    "but the following approximate @xmath153-nash version is in ppad @xcite .",
    "an @xmath153-nash equilibrium of a game is a ( mixed ) strategy profile such that no player can improve its payoff by more than @xmath153 by switching unilaterally to another strategy .",
    "( note , this is not the same as being @xmath153-close to a nash equilibrium . )",
    "the @xmath153-nash problem is : given a normal form game @xmath94 ( with rational payoffs ) and a rational @xmath156 , compute an @xmath153-nash equilibrium of @xmath94 .",
    "( note that @xmath153 is given as usual in binary , so polynomial time means polynomial in @xmath192 and @xmath193 . )",
    "the complexity of the nash problem was one of the main motivations for the original introduction of ppad . a recent sequence of papers culminated in showing that the nash equilibrium problem for 2-player games is ppad - complete @xcite , that is , if the problem can be solved in polynomial time , then so can all the problems in ppad .",
    "furthermore , even the @xmath153-nash equilibrium problem for @xmath153 inverse polynomial , i.e. even with @xmath153 given in unary , is also ppad - complete for 2-player games @xcite . for all constant @xmath153 ,",
    "an @xmath153-nash equilibrium can be computed in quasipolynomial time @xcite .",
    "another basic ppad - complete problem is ( a formalization of ) the sperner problem .",
    "the 2d case concerns the unit simplex ( triangle ) @xmath194 and its simplicial subdivision ( i.e. , triangulation ) with vertices @xmath195 with @xmath196 .",
    "the 2d sperner problem is as follows .",
    "the input consists of a number @xmath105 in binary and a boolean circuit which takes as input three natural numbers @xmath197 with @xmath196 and outputs a color @xmath198 , with the restriction that @xmath199 .",
    "the problem is to find a trichromatic triangle , i.e. three vertices ( triples ) with pairwise distances @xmath200 that have distinct colors .",
    "the problem is in ppad by scarf s algorithm .",
    "the 3d sperner problem was shown ppad - complete in @xcite , and the 2d case was shown complete in @xcite .",
    "the original paper showed ppad - completeness also for a discretized version of brouwer and related theorems ( kakutani , borsuk - ulam ) in the style of the sperner problem : a brouwer function in 3d is given in terms of a binary number @xmath105 ( the resolution of a regular grid subdivision of the unit 3-cube ) and a boolean circuit that takes as input three natural numbers @xmath201 between 0 and @xmath105 and outputs the value of the function at the point @xmath202 .",
    "the function is then linearly interpolated in the rest of the unit cube according to a standard simplicial subdivision with the grid points as vertices .",
    "the paper showed also completeness for a discretized version of the market equilibrium problem for an exchange economy .    in @xcite codenoti",
    "show ppad - completeness of the price equilibrium for a restricted case of leontief exchange economies , i.e. economies in which each agent @xmath40 wants commodities in proportion to a specified ( nonnegative ) vector @xmath203 ; that is , the utility function of agent @xmath40 is @xmath204 . in general",
    ", such economies may not have an equilibrium , and it is np - hard to determine if there is one @xcite",
    ". however , a restricted subclass of leontief economies has equilibria and is equivalent to the nash equilibrium problem for 2-player games .",
    "this restricted leontief class is as follows : the agents are partitioned into two groups , every agent brings one distinct commodity to the market , and agents in the first group want commodities only of agents in the second group and vice - versa .",
    "the class ppad can not capture of course general brouwer functions since many of them have irrational fixed points as we saw in the last section .",
    "( we could discretize such a function , but then the resulting approximating function has new fixed points , which may have no relation and can be very far from the fixed points of the original function . )",
    "however there is a natural class of functions that are guaranteed to have rational fixed points , which are in ppad and in a sense characterize the class @xcite .",
    "consider the search problem @xmath1 of computing a fixed point for a family of brouwer functions @xmath205 an instance of @xmath206 .",
    "we say that @xmath1 is a _ polynomial piecewise linear _",
    "problem if the following hold : for each instance @xmath2 , the domain is divided by hyperplanes into polyhedral cells , the function @xmath117 is linear in each cell and is of course continuous over the whole domain .",
    "the coefficients of the function in each cell and of the dividing hyperplanes are rationals of size bounded by a polynomial in @xmath6 .",
    "these are not given explicitly in the input , in fact there may be exponentially many dividing hyperplanes and cells .",
    "rather , there is an oracle algorithm that runs in time polynomial in @xmath6 which generates a sequence of queries of the form @xmath207 adaptively ( i.e. , the next query depends on @xmath2 and the sequence of previous answers ) , and at the end either outputs ` no ' ( i.e. , @xmath45 is not in the domain ) or identifies the cell of @xmath45 and outputs the coefficients @xmath208 of the function @xmath209 .",
    "as shown in @xcite , all polynomial piecewise linear problems are in ppad ( they all have rational fixed points of polynomial size ) .",
    "examples include the simple stochastic games , the discretized brouwer functions obtained from linear interpolation on a grid , and the nash equilibrium problem for 2-player games ( nash s function in nonlinear even for 2 players , but there is another piecewise linear function whose fixed points are also exactly the nash equilibria ) .",
    "the class ppad captures also the approximation in the weak ( ` almost ' ) sense for a broad class of brouwer functions , and in some cases also the strong approximation ( ` near ' ) problem @xcite . consider a family of functions @xmath210 .",
    "we say @xmath211 is _ polynomially computable _ if for every instance @xmath2 and rational vector @xmath45 in the domain , the image @xmath212 is rational and can be computed in time polynomial in the size of @xmath2 and of @xmath45 .",
    "@xmath211 is called _ polynomially continuous _ if there is a polynomial @xmath213 such that for all instances @xmath2 and all rational @xmath156 , there is a rational @xmath214 such that @xmath215 and such that for all @xmath216 , @xmath217 .",
    "if @xmath211 is polynomially computable and polynomially continuous , then the weak approximation problem ( given instance @xmath2 and rational @xmath218 , compute a weakly @xmath153-approximate fixed point of @xmath117 ) is in ppad by virtue of scarf s algorithm .",
    "furthermore , if the functions @xmath117 happen to be also contracting with contraction rate @xmath219 , then strong approximation reduces to weak approximation , and the strong approximation problem ( given @xmath220 , compute a point @xmath45 that is within @xmath153 of some fixed point @xmath53 of @xmath117 ) is also in ppad ; shapley s problem is an example that satisfies this condition .",
    "moreover , if in addition the functions @xmath117 have rational fixed points of polynomial size , then strongly @xmath153-approximate fixed points with small enough @xmath153 can be rounded to get exact fixed points , and thus the exact problem is in ppad ; simple stochastic games , perturbed with a small discount @xcite , are such an example .",
    "games with 3 or more players are quite different from 2-player games : nash equilibria are generally irrational ; knowing the support of an equilibrium does not help us much , and there may be many different such equilibria .",
    "there are many search problems as we saw in section 3 , and in particular many problems that can be cast in a fixed point framework , where the objects that we want to compute ( the answers ) are irrational .",
    "of course we can not compute them exactly in the usual turing machine model of computation .",
    "one can consider the exact computation and the complexity of such search problems in a real model of computation @xcite . in the usual ( discrete ) turing model of computation and complexity",
    ", we have to state carefully and precisely what is the ( finite ) information about the solution that we want to compute , as the nature of the desired information can actually affect the complexity of the problem , i.e. , some things may be easier to compute than others .",
    "that is , from a search problem @xmath1 with a continuous solution space , another search problem @xmath191 is derived with a discrete space .",
    "several types of information are potentially of interest , leading to different problems @xmath191 .",
    "consider for example shapley s stochastic game .",
    "some relevant questions about the value of the game are the following : ( i ) _ decision problem _ : given game @xmath94 and rational @xmath61 , is the value of the game @xmath221 ? , ( ii ) _ partial computation _ : given @xmath94 , integer @xmath32 , compute the @xmath32 most significant bits of the value , ( iii ) _ approximation _ : given @xmath94 , rational @xmath222 , compute an @xmath153 approximation to the value .",
    "similar questions can be posed about the optimal strategies of the players .",
    "the value of a game is a problem with a unique answer ; for multivalued search problems ( e.g. , optimal strategy , nash equilibrium etc . ) care must be taken in the statement of the discrete problems ( e.g. , the decision problem ) so that it does not become harder than the search problem itself ; in general , the requirement in the multivalued case is that the response returned for the discrete problem should be valid for some answer to the continuous search problem . as we said in the previous section",
    ", the approximation problem for the value of shapley s game is in ppad ( and it is open whether it is p ) . the decision ( and partial computation )",
    "problem however seems to be harder and it is not at all clear that it is even in np ; in fact showing that it is in np would answer a well - known longstanding open problem .",
    "the same applies to many other problems .",
    "the best upper bound we know for the decision ( and partial computation ) problem for shapley s games and for many of the other fixed point problems listed in section 3 ( eg . , branching processes , rmcs etc ) is pspace .",
    "the _ square root sum _",
    "problem ( for short ) is the following problem : given positive integers @xmath223 and @xmath224 , decide whether @xmath225 .",
    "this problem arises often for example in geometric computations , where the square root sum represents the sum of euclidean distances between given pairs of points with integer ( or rational ) coordinates ; for example , determining whether the length of a specific spanning tree , or a tsp tour of given points on the plane is bounded by a given threshold @xmath32 amounts to answering such a problem .",
    "this problem is solvable in pspace , but it has been a major open problem since the 1970 s ( see , e.g. , @xcite ) whether it is solvable even in np ( or better yet , in p ) .",
    "a related , and in a sense more powerful and fundamental , problem is the _ problem _ : given a division - free straight - line program , or equivalently , an arithmetic circuit with operations @xmath226 and inputs 0 and 1 , and a designated output gate , determine whether the integer @xmath227 that is the output of the circuit is positive .",
    "the importance of this problem was highlighted in @xcite , which showed that it is the key problem in understanding the computational power of the blum - shub - smale model of real computation @xcite using rational numbers as constants , in which all operations on rationals take unit time , no matter their size ; importantly , integer division ( the floor function ) is not allowed ( unit cost models with integer division or logical bit operations can solve in polynomial time all pspace problems , see e.g. @xcite for an overview of machine models and references ) .",
    "this is a powerful model in which the problem can be decided in polynomial time @xcite ) .",
    "allender et al .",
    "@xcite showed that the set of discrete decision problems that can be solved in p - time in this model is equal to @xmath228 , i.e. problems solvable in p using a subroutine for .",
    "they showed also that and lie in the counting hierarchy ( a hierarchy above pp ) .",
    "the problem can be reduced to the decision version of many problems : the shapley problem @xcite , concurrent reachability games @xcite , branching processes , recursive markov chains @xcite , nash equilibria for 3 or more players @xcite .",
    "the problem reduces also to several of these . hence placing any of these problems in np",
    "would imply the same for and/or . furthermore , for several problems , the approximation of the desired objects is also at least as hard . in particular , approximating the termination probability of a recursive markov chain within any constant additive error @xmath229 is at least as hard as the and the problems @xcite .",
    "a similar result holds for the approximation of nash equilibria in games with 3 or more players .",
    "suppose we want to estimate the probability with which a particular pure strategy , say strategy 1 of player 1 , is played in a nash equilibrium ( any one ) ; obviously , the value 1/2 estimates it trivially with error @xmath230 . guaranteeing a constant error @xmath231 is at least as hard as the and the problems @xcite , i.e. it is hard to tell whether the strategy will be played with probability very close to 0 or 1 .",
    "the constructions illustrate also the difference between strong and weak approximate fixed points generally , and for specific problems in particular .",
    "recall that for rmcs we can compute very easily a weak @xmath153-approximate fixed point for any constant @xmath156 ; however it is apparently much harder to obtain a strong approximation , i.e. approximate the actual probabilities within any nontrivial constant . in the rmc case",
    "the weak approximation is irrelevant .",
    "however , in the case of nash equilibria , the weak approximation of nash s function is also very natural and meaningful : it is essentially equivalent to the notion of @xmath153-nash equilibrium ( there is a small polynomial change in @xmath153 in each direction ) . for every game @xmath94 and @xmath156",
    ", we can choose a @xmath158 of bit - size polynomial in the size of @xmath94 and @xmath153 so that every strategy profile that is within distance @xmath158 of a nash equilibrium is @xmath153-nash ( i.e. all strongly approximate points are also weakly approximate with a ` small ' change in @xmath153 ) .",
    "however , the converse is not true : for every @xmath105 there is a 3-player game of size @xmath232 , with an @xmath153-nash equilibrium , @xmath233 , where @xmath234 , such that @xmath233 has distance @xmath235 ( i.e. , almost 1 ) from every nash equilibrium @xcite .    for 2-player games , as we said there is a direct , algorithmic proof of the existence of nash equilibria ( by the lemke - howson algorithm ) .",
    "but for 3 and more players , the only proofs known are through a fixpoint theorem ( and there are several proofs known using different brouwer functions or kakutani s theorem ) . in @xcite",
    "we defined a class of search problems , fixp , that can be cast as fixed point problems of functions that use the usual algebraic operations and max , min , like nash s function , and the other functions for the problems discussed in section 3 . specifically , fixp is the class of search problems @xmath1 , such that there is a polynomial - time algorithm which , given an instance @xmath2 , constructs an algebraic circuit ( straight - line program ) @xmath236 over the basis @xmath237 , with rational constants , that defines a continuous function @xmath117 from a domain to itself ( for simplicity , standardized to be the unit cube , other domains can be embedded into it ) , with the property that @xmath238 is the set of fixed points of @xmath117 .",
    "the class is closed as usual under reductions . in the usual case of discrete search problems , a reduction from problem @xmath239 to problem @xmath240 consists of two polynomial - time computable functions , a function @xmath241 that maps instances @xmath2 of @xmath239 to instances @xmath242 of @xmath240 , and a second function @xmath243 that maps solutions @xmath244 of the instance @xmath242 of @xmath240 to solutions @xmath45 of the instance @xmath2 of @xmath239 .",
    "the difference here is that the solutions are real - valued , not discrete , so we have to specify what kind of functions @xmath243 are allowed .",
    "it is sufficient to restrict the reverse function @xmath243 to have a particularly simple form : a separable linear transformation with polynomial - time computable rational coefficients ; that is , @xmath245 , where each @xmath246 is of the form @xmath247 for some @xmath52 , where @xmath248 are rationals computable from @xmath2 in polynomial time",
    ". examples of problems in fixp include : nash equilibrium for normal form games with any number of players , price equilibrium in exchange economies with excess demand functions given by algebraic formulas or circuits , the value ( and optimal strategies ) for shapley s stochastic games , extinction probabilitites of branching processes , and probability of languages generated by stochastic context - free grammars .",
    "fixp is a class of search problems with continuous solution spaces , and corresponding to each such problem @xmath1 , there are the associated discrete problems : decision , approximation etc .",
    "all the accociated discrete problems can be expressed in the existential theory of the reals , and thus , using decision procedures for this theory @xcite , it follows that they are all in pspace .",
    "as we mentioned , many of these problems are at least as hard as the and the problems , for which the current best upper bounds are barely below pspace . on the other hand",
    ", we do not know of any lower bounds , so in principle they could all be in p ( though this is very doubtful ) .",
    "the nash equilibrium problem for 3 players is complete for fixp ; it is complete in all senses , e.g. , its approximation problem is as hard as the approximation of any other fixp problem , the decision problem is at least as hard as the decision problem for any problem in fixp , etc . @xcite .",
    "the price equilibrium problem for algebraic excess demand functions is another complete problem .",
    "a consequence of the completeness results is that the class fixp stays the same under several variations .",
    "for example , using formulas instead of circuits in the representation of the functions does not affect the class ( because nash s function is given by a formula ) .",
    "also , fixp stays the same if we use circuits over @xmath249 and rational constants ( i.e. , no division ) , because there is another function whose fixed points are also the nash equilibria , and which can be implemented without division @xcite .",
    "of course fixp contains ppad , since it contains its complete problems , for example 2-player nash .",
    "actually , the piecewise linear fragment of fixp corresponds exactly to ppad .",
    "let _ linear - fixp _ be the class of problems that can be expressed as ( reduced to ) exact fixed point problems for functions given by algebraic circuits using @xmath250 ( equivalently , \\{+,max } ) and multiplication with rational constants only ; no division or multiplications of two gates / inputs is allowed .",
    "then linear - fixp is equal to ppad .",
    "in several problems , we want a particular fixed point of a system @xmath96 , not just any one . in particular , in several of the probems discussed in section 3 for example , the function @xmath95 is a monotone operator and we want a least fixed point . to place such a problem in fixp , one has to restrict the domain in a suitable , but polynomial , way so that only the desired fixed point is left in the domain .",
    "for some problems , we know how to do this ( for example , extinction probabilities of branching processes ) , but for others ( e.g. recursive markov chains ) it is not clear that this can be done in polynomial time . in any case , the paradigm of a lfp of a monotone operator is one that appears in many common settings , and which deserves its own separate treatment .",
    "many problems , from a broad , diverse range of areas , involve the computation of an equilibrium or fixed point of some kind .",
    "there is a long line of research ( both mathematical and algorithmic ) in each of these areas , but for many of these basic problems we still do not have polynomial time algorithms , nor do we have hard evidence of intractability ( such as np - hardness ) .",
    "we reviewed a number of such problems here , and we discussed three complexity classes , pls , ppad and fixp , that capture essential aspects of several types of such problems .",
    "the classes pls and ppad lie somewhere between p and tfnp ( total search problems in np ) , and fixp ( more precisely , the associated discrete problems ) lie between p and pspace .",
    "these , and the obvious containment ppad @xmath251 fixp , are the only relationships we currently know between these classes and the other standard complexity classes .",
    "it would be very interesting and important to improve on this state of knowledge .",
    "furthermore , there are several important problems that are in these classes , but are not ( known to be ) complete , so it is possible that one can make progress on them , without resolving the relation of the classes themselves .",
    "k.  etessami and m.  yannakakis .",
    "recursive markov chains , stochastic grammars , and monotone systems of non - linear equations . , 2005 .",
    "( full expanded version available from http://homepages.inf.ed.ac.uk/kousha ) ."
  ],
  "abstract_text": [
    "<S> many models from a variety of areas involve the computation of an equilibrium or fixed point of some kind . </S>",
    "<S> examples include nash equilibria in games ; market equilibria ; computing optimal strategies and the values of competitive games ( stochastic and other games ) ; stable configurations of neural networks ; analysing basic stochastic models for evolution like branching processes and for language like stochastic context - free grammars ; and models that incorporate the basic primitives of probability and recursion like recursive markov chains . </S>",
    "<S> it is not known whether these problems can be solved in polynomial time . </S>",
    "<S> there are certain common computational principles underlying different types of equilibria , which are captured by the complexity classes pls , ppad , and fixp . </S>",
    "<S> representative complete problems for these classes are respectively , pure nash equilibria in games where they are guaranteed to exist , ( mixed ) nash equilibria in 2-player normal form games , and ( mixed ) nash equilibria in normal form games with 3 ( or more ) players . </S>",
    "<S> this paper reviews the underlying computational principles and the corresponding classes .    </S>",
    "<S> mihalis yannakakis </S>"
  ]
}