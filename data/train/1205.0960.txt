{
  "article_text": [
    "many complex systems in nature and society can be successfully represented in terms of networks capturing the intricate web of connections among the units they are made of @xcite . in recent years , several large - scale properties of real - world webs have been uncovered , e.g. , a low average distance combined with a high average clustering coefficient @xcite , the broad , scale - free distribution of node degree @xcite and various signatures of hierarchical and modular organization @xcite .    beside the mentioned global characteristics ,",
    "there has been a quickly growing interest in the local structural units of networks as well .",
    "small and well defined sub - graphs consisting of a few vertices have been introduced as motifs @xcite , whereas somewhat larger units , associated with more highly interconnected parts are usually called _ communities _ , clusters , cohesive groups , or modules @xcite .",
    "these structural sub - units can correspond to multi - protein functional units in molecular biology @xcite , a set of tightly coupled stocks or industrial sectors in economy @xcite , groups of people @xcite , cooperative players @xcite , etc .",
    "the location of such building blocks can be crucial to the understanding of the structural and functional properties of the systems under investigation .",
    "the complexity and the size of the investigated data sets are increasing every year . in parallel",
    ", the increasing number of available computational cores within a single computer or the advent of cloud computing provides an infrastructure , where such data can be processed . however , the performance potential of these systems is accessible only for problems , where the data processing can be distributed among several computing units .",
    "here we introduce the parallel version of cfinder @xcite , suitable for finding and visualizing overlapping clusters in large networks .",
    "this application is based on the earlier , serial version of cfinder , which turned out to be a quite popular network clustering program .",
    "the paper is organized as follows . in section 2",
    "we give a summary of the clique percolation method ( cpm ) .",
    "this is followed by the description of the method in section 3 , which distributes the computation among several cpus or computing units .",
    "the section 4 is devoted for experimental analysis of the time complexity of the method . in the last section",
    "we conclude our findings .",
    "communities are usually defined as dense parts of networks and the majority of the community finding approaches separate these regions from each other by a relatively small number of links in a disjoint manner . however , in reality communities may even overlap as well . in this case",
    "the nodes in the overlap are members of more than one community .",
    "a recently introduced , link density - based community finding technique allowing community overlaps is given by the cpm .",
    "in this approach a community is built up from adjacent blocks of the same size @xmath0 .",
    "these blocks correspond to @xmath0-cliques , corresponding to subgraphs with the highest possible density : each of the @xmath0 members of the @xmath0-clique is linked to every other member .",
    "two blocks are considered adjacent if they overlap with each other as strongly as possible , i.e. , if they share @xmath1 nodes .",
    "note that removing one link from a @xmath0-clique leads to two adjacent @xmath1-cliques sharing @xmath2 nodes .",
    "a community is a set of blocks that can be reached from one to the other through a sequence of adjacent blocks .",
    "note that any block belongs always to exactly one community , however , there may be nodes belonging to several communities at the same time .",
    "a consequence of the above definition is that the communities contain only densely connected nodes .",
    "thus , nodes with only a few connections or not participating in a densely connected subgraph are not classified into any community .",
    "we note that the @xmath0 parameter can be chosen according to the needs of the user .",
    "if one is interested in broader community covers , then communities at small @xmath0 values are appropriate",
    ". if the most dense community cores are the target of the study , then the communities at larger values of @xmath0 apply . for a general case",
    "we recommend a @xmath0 value just below the percolation threshold @xcite .",
    "the pseudocode for cpm is given in algorithm [ alg : sercpm ] .",
    "the cpm is robust against removal or insertion of a single link . due to the local nature of this approach",
    ", such perturbations can alter only the communities containing at least one of the end points of a link .",
    "( in contrast , for global methods optimizing a homogeneously defined quantity , the removal or insertion of a single link can result in the change of the overall community structure . )",
    "we note , that beside the mentioned advantages the cpm has certain limits as well .",
    "e.g. , if there are not enough cliques in the network the method will not find any valuable community structure , whereas for many large overlapping cliques we may easily obtain a single percolating community for too low @xmath0 values .",
    "due to the deterministic nature , the cpm may find communities in a particular realization of a random network ensemble . in a general case , though , the members of communities are usually different in each realizations of the ensemble , if @xmath0 is below the percolation threshold .    finally , we point out that the cpm will find the same communities in a given subgraph irrespective to the fact whether the subgraph is linked to a larger network or not ( see fig . [",
    "fig : subcl ] ) .",
    "therefore , a heterogeneous network can be analyzed by first dividing it into homogeneous parts , and applying the method to these subnetworks separately .",
    "the distributed version of the cpm takes advantage of the local property of the community definition .",
    "since the communities depend only on the local network structure , the network can be divided into small pieces .",
    "then the communities ( or the building blocks for the communities ) can be located in each piece of the network independently .",
    "the distributed cpm is composed of the following main stages :    1 .   splitting up the network into pieces , 2 .",
    "finding communities in each piece of the network , 3 .   merging the communities found in the previous step .",
    "we provide a pseudocode description in algorithm [ alg : pcpm ] .",
    "( )    the first step is the most crucial one in the process , since it has to satisfy the following conditions :    * each part must be sufficiently small to be processable by one computing unit . *",
    "the network should not be split up into too many pieces , since the community finding procedure is not optimal on too small networks , and the computational overhead in the last , merging step becomes too high .",
    "* since the splitting step might divide communities as well , the nodes at split borders should appear in both subnetworks .",
    "in the final step these duplicated nodes can be used to construct the global community structure from the local communities of the subnetworks ( see fig . [",
    "fig : grsplit ] ) .",
    "the first and the second condition are contradictory : if one optimizes for memory usage on a single processing host , the network has to be split into numerous tiny subnetworks . however , as more subnetworks are created , the number of nodes appearing in mutual split borders is increasing as well , resulting in inefficient overall memory consumption and cpu usage .",
    "naturally , the optimal solution depends on the available resources . as a rule of thumb",
    ", one should distribute the tasks among the processing units such that each unit works with the largest piece of network processable on the given unit",
    ".    the third condition , which requires the ability to reconstruct the global community structure from the locally found communities ( and community parts ) can be satisfied as follows . for simplicity",
    "let us suppose that we would like to split the investigated network into two parts , as shown in fig .",
    "[ fig : grsplit ] .",
    "first we select a set of links ( indicated with dashed lines ) , whose removal cuts the network into two separate subnetworks .",
    "the end - nodes of these links ( indicated by filled squares ) define the boundary region of the subnetworks .",
    "we split the network into two pieces by removing the selected links , and for each subnetwork we separately insert back all nodes and links in the boundary region ( including links between boundary nodes that were not cut - links ) which means that the boundary region is duplicated . as a result",
    ", the @xmath0-cliques located in the boundary region of the original network will appear in both subnetworks .",
    "thus , the communities found in the two pieces will overlap in these @xmath0-cliques , enabling the reconstruction of the original communities .",
    "-cliques of the boundary region will appear in both pieces . ]",
    "the resulting isolated subgraphs can be clustered independently , therefore , the calculation can be distributed among several computational units ( pcs or processor cores ) .",
    "each individual task of the clustering process calculates the cpm - communities on each subnetwork .",
    "thus for each network piece the chains of maximally overlapping @xmath0-cliques are known . since",
    "a given @xmath0-clique can be part of only one community , the communities for the whole network can be built up by merging the @xmath0-cliques from the boundary regions of the subnetworks as follows .",
    "first we build a hyper - network from the network pieces in which nodes correspond to subnetworks , and links signal a shared boundary region between the subnetworks . for each hyper - node we check whether the cpm has found any communities in the corresponding subnetwork or not .",
    "if communities were found separately for adjacent hyper - nodes , the overlapping region of the two corresponding subnetworks is checked , and communities ( originally in different subnetworks ) sharing a common @xmath0-clique are merged . by iterating over the hyperlinks in this manner , the communities of the original network build up from the merged communities .",
    "note that the hyperlinks can be processed in parallel , where the communities are indexed by an array in shared memory or in a shared database .",
    "we have tested the method on the two largest example networks available in the cfinder @xcite package : the coauthorship network ( number of nodes  =  30561 , number of links  =  125959 ) and the undirected word association network ( number of nodes  =  10627 , number of links  =  63788 ) .",
    "the main parameter , which has impact on the performance of the algorithm , is the size of the subnetworks the network is split into .",
    "note that this is the minimum size for a subnetwork .",
    "if a large clique is attached to a subnetwork , it can not be split up , it is either contained in one subnetwork or it is fully contained in several subnetworks .",
    "the parallel version has three main type of computational overhead compared to the serial version .",
    "the first one is the splitting step , where the graph is split into smaller pieces .",
    "the second source of the processing overhead is queuing the parallel jobs into a scheduler and waiting for free computing units .",
    "the third one is the merging of the communities from several subnetworks .",
    "if the total cpu consumption is also an issue , one has to take into account a fourth type of overhead : the processing time of the overlapping network regions , as these computations are performed more than once . since the merging step is implemented as a simple database update command , we measured the time consumption of the scheduling and the merging steps together .",
    "first we analyze the splitting step . in this step",
    "the subnetworks are built up by the breadth first search algorithm .",
    "building a larger network is less time consuming than building several small networks , thus , the time complexity is proportional to the logarithm of the subnetwork size . when plotting the splitting time as a function of the subnetwork size on a semilogarithmic plot , the slope of its decay is proportional to the average branching factor in the breadth first search process ( see fig .",
    "[ fig : split ] ) .",
    "if the high degree nodes in the network are close to each other , the breadth first algorithm builds up large subnetworks in a few steps and the size limit for the subnetwork is reached .",
    "hence the rest of the nodes outside the large subnetworks will form many disconnected small subnetwork pieces .",
    "our graph splitting algorithm collects such tiny subnetworks and attaches them to the larger network pieces . for networks , where this collecting step is needed",
    ", the graph splitting algorithm may consume more computing time ( see fig .",
    "[ fig : split ] ) .    ,",
    "title=\"fig:\",width=238 ] , title=\"fig:\",width=238 ]    now we turn to the second source of the computing overhead of the parallel method .",
    "if the network is split up into more subnetworks than the number of available computing units , they can not be processed in parallel , and some jobs must wait until the previous jobs finish .",
    "this effect dominates the running time as shown on fig .",
    "[ fig : run ] .",
    "the running time decays linearly with the number of subnetworks , which is inversely proportional to the subnetwork size .",
    "this trend is valid until the number of processes reaches the number of available computing nodes . above this subnetwork size",
    "the computing time is practically constant .",
    "the faster is the finding of the communities in smaller subnetworks , the more time is needed for merging the results from various subnetworks .",
    "in our implementation we used a small grid of personal computers , where the condor  @xcite scheduling system distributed the jobs among 30 cores on linux computers with 2ghz amd opteron cpus connected by 100mb / s ethernet network . here the scheduling time and the communication overhead among the computing units is comparable to the processing time of the largest network , which is manageable in one computing unit . in similar environments we advise to use the serial version for small networks , since the parallel version will not give any advantage .",
    "the main targets of the parallel version are very large networks that do not fit into the memory of the computers available for the user .",
    "we note that for typical sparse networks the parallel version will not run faster on common architectures than the serial version .",
    "we expect that for special networks , where the splitting step results a large number of subnetworks with negligible number of cliques in the overlapping regions , the parallel version can be faster than the serial one provided that enough computing resources are available , e.g. using gpus with high bandwidth interface",
    ". such networks are not typical , therefore , our current implementation is aimed mainly to handle very large networks .",
    "the size of the processable network is limited be the first splitting step and by the last merging step , since here the network must be stored either in memory or on disks . if the network does not fit into the memory it is possible to apply effective disk based methods in these steps  @xcite .",
    ", width=302 ]",
    "we have presented a parallel implementation of the cfinder @xcite algorithm .",
    "we have shown that due to the local nature of the underlying clique percolation method , the computation can be distributed among several computational units .",
    "the parallel version may solve large scale network clustering tasks , where lacking enough computing resources , e.g. the main memory of the available computer , would not allow to find the community structure .",
    "the project is supported by the european union and co - financed by the european social fund ( grant agreement no .",
    "tamop 4.2.1/b-09/1/kmr-2010 - 0003 ) and the national research and technological office ( nkth textrend ) .",
    "h. papadakis , c. panagiotakis , p. fragopoulou , local community finding using synthetic coordinates , in _ future information technology _ , eds .",
    "park , l.t .",
    "yang , laurence , c. lee , _ communications in computer and information science _ , * 185 * ( 2011 ) 915 .",
    "t.  heimo , j.  saramki , j .-",
    "onnela and k.  kaski , spectral and network methods in the analysis of correlation matrices of stock returns , _ physica a - statistical mechanics and its applications _ , * 383 * , ( 2007 ) 147151 ."
  ],
  "abstract_text": [
    "<S> the amount of available data about complex systems is increasing every year , measurements of larger and larger systems are collected and recorded . a natural representation of such data is given by networks , whose size is following the size of the original system . </S>",
    "<S> the current trend of multiple cores in computing infrastructures call for a parallel reimplementation of earlier methods . here </S>",
    "<S> we present the grid version of cfinder , which can locate overlapping communities in directed , weighted or undirected networks based on the clique percolation method ( cpm ) . </S>",
    "<S> we show that the computation of the communities can be distributed among several cpu - s or computers . </S>",
    "<S> although switching to the parallel version not necessarily leads to gain in computing time , it definitely makes the community structure of extremely large networks accessible .    electronic version of an article published as + parallel processing letters ( ppl ) 22:(1 ) p. 1240001 . </S>",
    "<S> ( 2012 ) + http://dx.doi.org/10.1142/s0129626412400014 + copyright world scientific publishing company + http://www.worldscinet.com/ppl/22/2201/s0129626412400014.html </S>"
  ]
}