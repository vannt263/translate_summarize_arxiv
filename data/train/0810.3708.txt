{
  "article_text": [
    "a satisfactory semantic theory for processes which encompass both nondeterministic and probabilistic behaviour has been a long - standing research problem @xcite . in 1992",
    "wang & larsen posed the problems of finding complete axiomatisations and alternative characterisations for a natural generalisation of the standard testing preorders @xcite to such processes @xcite . here",
    "we solve both problems , at least for finite processes , by providing a detailed account of both may- and must testing preorders for a finite version of the process calculus csp extended with probabilistic choice .",
    "for each preorder we provide three independent characterisations , using(i ) co - inductive simulation relations , ( ii ) a modal logic and ( iii ) sets of inequations .",
    "[ [ testing - processes ] ] * testing processes : * + + + + + + + + + + + + + + + + + + + +    our starting point is the finite process calculus @xmath0@xcite obtained by adding a probabilistic choice operator to finite csp ; like others who have done the same , we now have _ three _ choice operators , external @xmath1 , internal @xmath2 and the newly added probabilistic choice @xmath3 . so a semantic theory for @xmath0will have to provide a coherent account of the precise relationships between these operators .    as a first step , in section  [ sec : pcsp ] we provide an interpretation of @xmath0as",
    "probabilistic labelled transition system _ , in which , following @xcite , state - to - state transitions like @xmath4 from standard labelled transition systems are generalised to the form @xmath5 } } \\delta$ ] , where @xmath6 is a _ distribution _",
    ", a mapping assigning probabilities to states . with this interpretation",
    "we obtain in section  [ sec : testing ] a version of the testing preorders of @xcite for @xmath0processes , @xmath7 and @xmath8 .",
    "these are based on the ability of processes to pass _ tests _ ; the tests we use are simply @xmath0processes in which certain _ states _ are marked as _ success states_. see @xcite for a detailed discussion of the power of such tests .",
    "the object of this paper is to give alternative characterisations of these testing preorders .",
    "this problem was addressed previously by segala in @xcite , but using testing preorders ( @xmath9 and @xmath10 ) that differ in two ways from the ones in @xcite and the present paper .",
    "first of all , in @xcite the success of a test is achieved by the _ actual execution _ of a predefined _ success action _ , rather than the reaching of a success state .",
    "we call this an _ action_-based approach , as opposed to the _ state_-based approach used in this paper .",
    "secondly , @xcite employs a countable number of success actions instead of a single one ; we call this _ vector - based _ , as opposed to _",
    ", testing .",
    "segala s results in @xcite depend crucially on this form of testing . to achieve our current results ,",
    "we need segala s preorders as a stepping stone .",
    "we relate them to ours by considering intermediate preorders @xmath11 and [ 0pt][0pt]@xmath12 that arise from action - based but scalar testing , and use a recent result @xcite saying that for finite processes the preorders @xmath9 and @xmath10 coincide with [ 0pt][0pt]@xmath11 and [ 0pt][0pt]@xmath12 . here",
    "we show that on @xmath0 the preorders [ 0pt][0pt]@xmath11 and [ 0pt][0pt]@xmath12 also coincide with @xmath7 and @xmath8 .",
    "[ [ simulation - preorders ] ] * simulation preorders : * + + + + + + + + + + + + + + + + + + + + + + +    in section  [ sec : simulations ] we use the transitions @xmath13 to define two co - inductive preorders , the _ simulation _ preorder @xmath14 @xcite , and the novel _ failure simulation _ preorder @xmath15 over @xmath0processes .",
    "the latter extends the failure simulation preorder of @xcite to probabilistic processes .",
    "their definition uses a natural generalisation of the transitions , first ( kleisli - style ) to take the form @xmath16 , and then to _ weak _ versions @xmath17 } } \\delta'$ ] .",
    "the second preorder differs from the first one in the use of a _ failure _ predicate @xmath18}}$ ] , indicating that in the state @xmath19 none of the actions in @xmath20 can be performed .",
    "both preorders are preserved by all the operators in @xmath0 , and are _ sound _ with respect to the testing preorders ; that is @xmath21 implies @xmath22 and @xmath23 implies @xmath24 .",
    "for @xmath14 this was established in @xcite , and here we use similar techniques in the proofs for @xmath15 .",
    "but _ completeness _ , that the testing preorders imply the respective simulation preorders , requires some ingenuity .",
    "we prove it indirectly , involving a characterisation of the testing and simulation preorders in terms of a modal logic .",
    "[ [ modal - logic ] ] * modal logic : * + + + + + + + + + + + + + +    our modal logic , defined in section  [ sec : modal - logic ] , uses finite conjunction @xmath25 , the modality @xmath26 from the hennessy - milner logic @xcite , and a novel probabilistic construct @xmath27 .",
    "a satisfaction relation between processes and formulae then gives , in a natural manner , a _ logical preorder _ between processes",
    ": @xmath28 means that every @xmath29-formula satisfied by @xmath30 is also satisfied by @xmath31 .",
    "we establish that @xmath32 coincides with @xmath14 and @xmath7 .    to capture failures , we add , for every set of actions @xmath20 , a formula @xmath33 to our logic , satisfied by any process which , after it can do no further internal actions , can perform none of the actions in @xmath20 either .",
    "the constructs @xmath34 , @xmath35 and @xmath36 stem from the modal characterisation of the non - probabilistic failure simulation preorder , given in @xcite .",
    "we show that @xmath8 , as well as @xmath15 , can be characterised in a similar manner with this extended modal logic .",
    "[ [ proof - strategy ] ] * proof strategy : * + + + + + + + + + + + + + + + + +    we prove these characterisation results through two cycles of inclusions : @xmath37    { \\mathrel{\\sqsubseteq}^{{\\mathcal{f}}}\\!}&\\subseteq &   { \\sqsubseteq_{\\it fs}}&\\subseteq &   { \\mathrel{\\relax{\\sqsubseteq}_{\\textrm{\\rm pmust}}}}&\\subseteq &   { \\mathrel{{\\widehat{\\sqsubseteq}}_{\\textrm{\\rm pmust}}}}&\\stackrel{\\mbox{\\scriptsize\\cite{dgmz07}}}{= } &   { \\mathrel{{\\widehat{\\sqsubseteq}}_{\\textrm{\\rm pmust}}^{\\raisebox{-.3em}{\\scriptsize$\\omega$}}}}&\\subseteq &   { \\mathrel{\\sqsubseteq}^{{\\mathcal{f}}}\\!}\\\\[-6pt ] \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\underbrace{\\hspace{30pt } } } & \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\underbrace{\\hspace{35pt } } } & \\underbrace{\\hspace{32pt } } & \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\underbrace{\\hspace{47pt } } } & \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\underbrace{\\hspace{51pt } } } & \\multicolumn{2}{@{}c@{}}{\\underbrace{\\hspace{31pt}}}\\\\[-1pt ] \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\mbox{\\small\\sl sec.~\\ref{sec : modal - logic } } } & \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\mbox{\\small\\sl sec.~\\ref{sec : simulations } } } &    \\mbox{\\small\\sl sec.~\\ref{sec : testing } } & \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\mbox{\\small\\sl sec.~\\ref{sec : state - vs - action } } } & \\multicolumn{2}{@{}c@{\\;\\,\\;}}{\\mbox{\\small\\sl sec.~\\ref{sec : vector } } } & \\multicolumn{2}{@{}c@{}}{\\mbox{\\small\\sl sec.~\\ref{sec : chartests } } } \\end{array}\\ ] ] in section  [ sec : modal - logic ] we show that @xmath28 implies @xmath21 ( and hence @xmath22 ) , and likewise for @xmath38 and @xmath15 ; the proof involves constructing , for each @xmath0process @xmath30 , a _",
    "characteristic formula _",
    "@xmath39 . to obtain the other direction , in section  [ sec : chartests ]",
    "we show how every modal formula @xmath40 can be captured , in some sense , by a test @xmath41 ; essentially the ability of a @xmath0process to satisfy @xmath40 is determined by its ability to pass the test @xmath41 .",
    "we capture the conjunction of two formulae by a probabilistic choice between the corresponding tests ; in order to prevent the results from these tests getting mixed up , we employ the vector - based tests of @xcite , so that we can use different success actions in the separate probabilistic branches .",
    "therefore , we complete our proof by demonstrating that the state - based testing preorders imply the action - based ones ( section  [ sec : state - vs - action ] ) and recalling the result from @xcite that the action - based scalar testing preorders imply the vector - based ones ( section  [ sec : vector ] ) .    [ [ inequations ] ] * ( in)equations : * + + + + + + + + + + + + + + + +    it is well - known that may- and must testing for standard csp can be captured equationally @xcite . in @xcite",
    "we showed that most of the standard equations are no longer valid in the probabilistic setting of @xmath0 ; we also provided a set of axioms which are complete with respect to ( probabilistic ) may - testing for the sub - language of @xmath0without probabilistic choice .",
    "here we extend this result , by showing , in section  [ sec : inequations ] , that both @xmath22 and @xmath42 can still be captured equationally over full @xmath0 . in the may case the essential ( in)equation required is @xmath43 the must case is more involved : in the absence of the distributivity of the external and internal choices over each other , to obtain completeness we require a complicated inequational schema .",
    "let @xmath44 be a finite set of _ visible _ ( or _ external _ ) actions , ranged over by @xmath45 , which processes can perform .",
    "then the finite probabilistic csp processes are given by the following two - sorted syntax : @xmath46 we write @xmath0 , ranged over by @xmath47 , for the set of process terms defined by this grammar , and @xmath48 , ranged over by @xmath49 , for the subset comprising only the state - based process terms ( the sub - sort @xmath50 above ) .",
    "the process @xmath51 , for @xmath52 , represents a _",
    "probabilistic choice _ between @xmath30 and @xmath31 : with probability @xmath53 it will act like @xmath30 and with probability @xmath54 it will act like @xmath31 .",
    "any process is a probabilistic combination of state - based processes built by repeated application of the operator @xmath55 .",
    "the state - based processes have a csp - like syntax , involving the stopped process @xmath56 , action prefixing @xmath57 for @xmath58 , _",
    "internal- _ and _ external choices _ @xmath59 and @xmath60 , and a _ parallel composition _ @xmath61 for @xmath62 .",
    "the process @xmath63 will first do a so - called _ internal action _",
    "@xmath64 , choosing _ nondeterministically _ between @xmath30 and @xmath31 .",
    "therefore @xmath59 , like @xmath57 , acts as a _ guard _ , in the sense that it converts any process arguments into a state - based process .",
    "the process @xmath65 on the other hand does not perform actions itself , but merely allows its arguments to proceed , disabling one argument as soon as the other has done a visible action .",
    "in order for this process to start from a state rather than a probability distribution of states , we require its arguments to be state - based as well ; the same applies to @xmath61 .",
    "finally , the expression @xmath66 , where @xmath67 , represents processes @xmath19 and @xmath68 running in parallel .",
    "they may synchronise by performing the same action from @xmath69 simultaneously ; such a synchronisation results in @xmath70 .",
    "in addition @xmath19 and @xmath68 may independently do any action from @xmath71 .    although formally the operators @xmath60 and @xmath61 can only be applied to state - based processes",
    ", informally we use expressions of the form @xmath72 and @xmath73 , where @xmath30 and @xmath31 are _ not _ state - based , as syntactic sugar for expressions in the above syntax obtained by distributing @xmath60 and @xmath61 over @xmath55 .",
    "thus for example @xmath74 abbreviates the term @xmath75 .",
    "the full language of csp @xcite has many more operators ; we have simply chosen a representative selection , and have added probabilistic choice .",
    "our parallel operator is not a csp primitive , but it can easily be expressed in terms of them  in particular @xmath76 , where @xmath77 and @xmath78 are the parallel composition and hiding operators of @xcite .",
    "it can also be expressed in terms of the parallel composition , renaming and restriction operators of ccs .",
    "we have chosen this ( non - associative ) operator for convenience in defining the application of tests to processes .",
    "as usual we may elide @xmath56 ; the prefixing operator @xmath57 binds stronger than any binary operator ; and precedence between binary operators is indicated via brackets or spacing .",
    "we will also sometimes use indexed binary operators , such as @xmath79 with @xmath80 and all @xmath81 , and @xmath82 , for some finite index set @xmath83 .",
    "the above intuitions are formalised by an _ _ operational semantics__is similar to other probabilistic extensions of csp @xcite , our semantics differs . for more detailed comparisons ,",
    "see section  [ sec : conc ] . ]",
    "associating with each process term a graph - like structure representing its possible reactions to users requests : we use a generalisation of labelled transition systems @xcite that includes probabilities .",
    "a ( discrete ) probability distribution over a set @xmath50 is a function @xmath84 $ ] with ; the _ support _ of @xmath6 is given by @xmath85 .",
    "we write @xmath86 , ranged over by @xmath87 , for the set of all distributions over @xmath50 with finite support ; these finite distributions are sufficient for the results of this paper . we also write @xmath88 to denote the point distribution assigning probability 1 to @xmath19 and 0 to all others , so that @xmath89 .",
    "if @xmath90 and @xmath91 is a distribution for each @xmath92 in some finite index set @xmath83 , and @xmath93 , then the probability distribution @xmath94 is given by @xmath95 we will sometimes write it as @xmath96 when the index set @xmath83 is @xmath97 .",
    "for @xmath6 a distribution over @xmath50 and function into a vector space @xmath20 we sometimes write @xmath98 for @xmath99 , the _ expected value _ of @xmath100 . our primary use of this notation is with @xmath20 being the vector space of reals or tuples of reals .",
    "more generally , for function @xmath101 with @xmath102 being the collection of non - empty subsets of @xmath20 , we define @xmath103 ; here @xmath104 means that @xmath105 is a _ choice function _ for @xmath106 , that is it satisfies the constraint that @xmath107 for all @xmath108 .",
    "we now give the probabilistic generalisation of labelled transition systems ( ltss ) :    a _",
    "probabilistic labelled transition system _ ( plts ) is a triple @xmath109 , where    a.   @xmath50 is a set of states , b.   @xmath110 is a set of transition labels , c.   relation @xmath111 is a subset of @xmath112 .",
    "as with ltss , we usually write @xmath13 for @xmath113 , @xmath114}}$ ] for @xmath115 and @xmath116 for @xmath117 . an lts may be viewed as a degenerate plts , one in which only point distributions are used .",
    "we graphically depict the operational semantics of a @xmath0expression @xmath30 by drawing the part of the plts defined above that is reachable from @xmath124}}$ ] as a finite acyclic directed graph , often unwound into a tree .",
    "states are represented by nodes of the form @xmath134 and distributions by nodes of the form @xmath135 . for any state @xmath19 and distribution @xmath6 with @xmath114}}\\delta$ ]",
    "we draw an edge from @xmath19 to @xmath6 , labelled with @xmath122 . for any distribution @xmath6 and state @xmath19 in @xmath136 , the support of @xmath6 , we draw an edge from @xmath6 to @xmath19 , labelled with @xmath137 .",
    "[ ex:1 ] consider the two processes @xmath138 their tree representations are depicted in figure  [ fig : examples ] ( i ) and ( ii ) . to make these trees more compact we omit nodes @xmath135 when they represent trivial point distributions .",
    "@xmath139{\\tdot }       { \\pstree{\\tdot[dotstyle = o ] \\tlput{a } }               { \\pstree{\\tdot                   \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot \\tlput{b } }                      { \\pstree{\\tdot \\tlput{d } } { } }                    \\pstree{\\tdot \\trput{c } }                      { \\pstree{\\tdot \\trput{e } } { } }                   }                \\pstree{\\tdot                   \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot \\tlput{b } }                      { \\pstree{\\tdot \\tlput{f } } { } }                    \\pstree{\\tdot \\trput{c } }                      { \\pstree{\\tdot \\trput{g } } { } }                   }               }       }    & \\qquad\\qquad\\qquad      \\psset{arrows=- > }      \\pstree[nodesep=0pt , levelsep=20pt , labelsep=.05]{\\tdot }       { \\pstree{\\tdot[dotstyle = o ] \\tlput{a } }               { \\pstree{\\tdot                   \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot \\tlput{b } }                      { \\pstree{\\tdot \\tlput{d } } { } }                    \\pstree{\\tdot \\trput{c } }                      { \\pstree{\\tdot \\trput{g } } { } }                   }                \\pstree{\\tdot                   \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot \\tlput{b } }                      { \\pstree{\\tdot \\tlput{f } } { } }                    \\pstree{\\tdot \\trput{c } }                      { \\pstree{\\tdot \\trput{e } } { } }                   }               }       }    & \\qquad\\qquad\\qquad      \\psset{arrows=- > }      \\pstree[nodesep=0pt , levelsep=20pt , labelsep=.05]{\\tdot }       { \\pstree{\\tdot \\trput{a } }               { \\pstree{\\tdot[dotstyle = o ] \\tlput{\\tau } }                  { \\pstree{\\tdot \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot \\tlput{b } }                      { \\pstree{\\tdot \\tlput{d } }                       { \\pstree{\\tdot \\tlput{\\omega } } { } }                      }                   }                   \\pstree{\\tdot \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                    { \\pstree{\\tdot \\trput{c } }                      { \\pstree{\\tdot \\trput{e } }                        { \\pstree{\\tdot \\trput{\\omega } } { } }                      }                    }                   }                 \\pstree{\\tdot[dotstyle = o ] \\trput{\\tau } }                  { \\pstree{\\tdot \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot \\tlput{b } }                      { \\pstree{\\tdot \\tlput{f } }                       { \\pstree{\\tdot \\tlput{\\omega } } { } }                      }                   }                   \\pstree{\\tdot \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                    { \\pstree{\\tdot \\trput{c } }                      { \\pstree{\\tdot \\trput{g } }                        { \\pstree{\\tdot \\trput{\\omega } } { } }                      }                    }                   }               }       } \\\\ ( i)\\;\\ ; p & \\qquad\\qquad\\qquad ( ii)\\;\\ ; q & \\qquad\\qquad\\qquad ( iii)\\;\\ ; t \\end{array}\\ ] ]",
    "a _ test _ is a @xmath0process except that it may have subterms @xmath140 for fresh @xmath141 , a special action reporting success ; we write @xmath142for the set of all tests , and @xmath143for the subset of state - based process terms that may involve the action @xmath144 , and the operational semantics above is extended by treating @xmath144 like any other action from @xmath44 . to apply test @xmath145 to process @xmath30 we form the process in which _ all _ visible actions of @xmath30 must synchronise with @xmath145 , and define a set of testing outcomes @xmath146 where each outcome , in @xmath147 $ ] , arises from a resolution of the nondeterministic choices in and gives the probability that this resolution will reach a _ success state _ , one in which @xmath148 is possible .",
    "to this end , we inductively define a _ results - gathering _",
    "function @xmath149)}}$ ] ; it extends to type @xmath150)}}$ ] via the convention @xmath151 .",
    "@xmath152}}$ } , \\\\",
    "\\bigcup { \\ { \\ , { \\ensuremath{{\\mathbb v}}(\\delta ) } \\ , \\mid \\ , s { \\mathrel{\\goesto[{\\alpha } ] } } \\delta \\ , \\ } }                       & \\text{if $ s { \\mathrel{\\ngoesto[{{\\ensuremath{\\omega}\\xspace}\\;}]}}$ but still $ s \\rightarrow$},\\\\                   { \\ { { 0 }   \\ }   } & \\text{if $ s\\!\\not\\rightarrow{}$ }    \\end{cases } \\end{array}\\ ] ] in the first case above @xmath153}}$ ] signifies that @xmath19 is a success state . in the second case",
    "we mean that @xmath144 is not possible from @xmath19hence @xmath19 is not a success state  but that at least one `` non - success '' action @xmath154 is  and possibly several  and then the union is over all such @xmath122 .",
    "this is done so that @xmath155 accounts for success actions in processes generally ; when applied to test outcomes , however , the only non - success action is @xmath70 . note that @xmath155 is well defined when applied to finite , loop - free processes , such as the ones of @xmath0 .",
    "[ d1659 ] for any @xmath0process @xmath30 and test @xmath145 , define @xmath156}}}~.\\ ] ]    with this definition , the general testing framework of @xcite yields two testing preorders for @xmath0 , one based on _ may _ testing , written @xmath22 , and the other on _ must _ testing , written @xmath24 .",
    "[ d1700 ] the _ may- _ and _ must _ preorders are given by @xmath157 with @xmath158 the hoare , smyth preorders on @xmath159}$ ] .",
    "these are defined as follows : @xmath160    in other words , @xmath31 is a correct refinement of @xmath30 in the probabilistic may - testing preorder if each outcome ( in [ 0,1 ] ) of applying a test to process @xmath30 can be matched or increased by applying the same test to process @xmath31 .",
    "likewise , @xmath31 is a correct refinement of @xmath30 in the probabilistic must - testing preorder if each outcome of applying a test to @xmath31 matches or increases an outcome obtainable by applying the same test to @xmath30 .",
    "[ ex:2 ] consider the test @xmath161 which is graphically depicted in figure  [ fig : examples ] ( iii ) .",
    "if we apply @xmath145 to processes @xmath30 and @xmath31 given in example  [ ex:1 ] , we form the two processes described in figure  [ fig : test ] .",
    "it is then easy to calculate the testing outcomes : @xmath162 we can see that @xmath30 and @xmath31 can be distinguished by the test @xmath145 since @xmath163 and @xmath164 .",
    "in other words , we have @xmath165 and @xmath166 because of the witness test @xmath145 .",
    "@xmath167{\\tdot }   { \\pstree{\\tdot[dotstyle = o ] \\tlput{\\tau } }               { \\pstree{\\tdot                   \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot[dotstyle = o ] \\tlput{\\tau } }                      { \\pstree{\\tdot \\tlput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                            }                          }                       \\pstree{\\tdot \\trput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                            }                          }                      }                    \\pstree{\\tdot[dotstyle = o ] \\trput{\\tau } }                      { \\pstree{\\tdot                               \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } } { } }                       \\pstree{\\tdot                               \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } } { } }                      }                   }                \\pstree{\\tdot                   \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot[dotstyle = o ] \\tlput{\\tau } }                      { \\pstree{\\tdot                               \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } } { } }                       \\pstree{\\tdot                               \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } } { } }                      }                    \\pstree{\\tdot[dotstyle = o ] \\trput{\\tau } }                      { \\pstree{\\tdot \\tlput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                            }                          }                       \\pstree{\\tdot \\trput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                            }                          }                      }                   }               }   }    & \\qquad\\qquad\\qquad & \\psset{arrows=- > } \\pstree[nodesep=0pt , levelsep=20pt , labelsep=.05]{\\tdot }   { \\pstree{\\tdot[dotstyle = o ] \\tlput{\\tau } }               { \\pstree{\\tdot                   \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot[dotstyle = o ] \\tlput{\\tau } }                      { \\pstree{\\tdot \\tlput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                            }                          }                       \\pstree{\\tdot \\trput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { }                          }                      }                    \\pstree{\\tdot[dotstyle = o ] \\trput{\\tau } }                      { \\pstree{\\tdot                               \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } } { } }                       \\pstree{\\tdot                               \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } }                          { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                          }                        }                      }                   }                \\pstree{\\tdot                   \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } } }                   { \\pstree{\\tdot[dotstyle = o ] \\tlput{\\tau } }                      { \\pstree{\\tdot                               \\tlput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } } { } }                       \\pstree{\\tdot                               \\trput[tpos=.1]{\\scriptscriptstyle{\\frac{1}{2 } } }                              }                        { \\pstree{\\tdot \\tlput{\\tau } }                          { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                          }                        }                      }                    \\pstree{\\tdot[dotstyle = o ] \\trput{\\tau } }                      { \\pstree{\\tdot \\tlput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { \\pstree{\\tdot \\tlput{\\tau } }                             { \\pstree{\\tdot \\tlput{\\omega } } { } }                            }                          }                       \\pstree{\\tdot \\trput[tpos=.1 ]                         { \\scriptscriptstyle{\\frac{1}{2 } } } }                          { \\pstree{\\tdot \\tlput{\\tau } }                            { }                          }                      }                   }               }   } \\\\    ( i)\\ t { { \\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace}}}}}p & & ( ii)\\   t { { \\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace}}}}}q \\end{array}\\ ] ]    in @xcite we applied the testing framework described above to show that many standard laws of csp are no longer valid in the probabilistic setting of @xmath0 , and to provide counterexamples for a few distributive laws involving probabilistic choice that may appear plausible at first sight .",
    "we also showed that @xmath24 implies @xmath168 for all @xmath0processes @xmath30 and @xmath31 , i.e.  that must testing is more discriminating than may testing and that the preorders @xmath7 and @xmath8 are oriented in opposite directions .",
    "let @xmath169 be a relation from states to distributions . as in @xcite , we lift it to a relation @xmath170 by letting @xmath171 whenever there is a finite index set @xmath83 and @xmath172 such that    a.   @xmath173  , b.   for each @xmath174 there is a distribution @xmath175 s.t . @xmath176  , c.   @xmath177  .    for functions ,",
    "the lifting operation can be understood as a kleisli construction on a probabilistic power domain @xcite , and was implicit in the work of kozen @xcite ; in our more general setting of relations , it can equivalently be defined in terms of a distribution on @xmath178 , sometimes called _ weight function _ ( see e.g.  @xcite ) .",
    "an important point here is that in the decomposition ( i ) of @xmath179 into @xmath180 , the states @xmath181 are _ not necessarily distinct _ : that is , the decomposition is not in general unique . for notational convenience , the lifted versions of the transition relations @xmath128}}$ ] for @xmath182",
    "are again denoted @xmath128}}$ ] .    we write @xmath183 } } \\delta$ ] if either @xmath184 } } \\delta$ ] or @xmath185 ; again denotes the lifted relation .",
    "thus for example we have @xmath186 } }    \\;{\\mathrel{\\goesto[\\hat{{\\tau}}]}}\\ ; { \\mbox{\\bbb [ } a { \\mathrel{\\!_{\\scriptscriptstyle \\frac{1}{2}}\\oplus } } ( ( a{\\mathrel{\\sqcap}}b )      { \\mathrel{\\!_{\\scriptscriptstyle \\frac{1}{2}}\\oplus } } c)\\mbox{\\bbb ] } } $ ] because    a.   @xmath186 } } = \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}b)\\mbox{\\bbb ] } } + \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}b)\\mbox{\\bbb ] } } + \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}c)\\mbox{\\bbb ] } } + \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}c)\\mbox{\\bbb ] } } $ ] , b.   @xmath187{cl }       { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}b)\\mbox{\\bbb ] } } & { \\mathrel{\\goesto[{\\tau } ] } } { \\mbox{\\bbb [ } a\\mbox{\\bbb ] } } \\\\       { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}b)\\mbox{\\bbb ] } } & { \\mathrel{\\goesto[\\hat{{\\tau } } ] } } { \\mbox{\\bbb [ } a { \\mathrel{\\sqcap}}b\\mbox{\\bbb ] } } \\\\       { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}c)\\mbox{\\bbb ] } } & { \\mathrel{\\goesto[{\\tau } ] } } { \\mbox{\\bbb [ } a\\mbox{\\bbb ] } } \\\\       { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}c)\\mbox{\\bbb ] } } & { \\mathrel{\\goesto[{\\tau } ] } } { \\mbox{\\bbb [ } c\\mbox{\\bbb ] } }",
    "\\\\    \\end{array}$ ] c.   and @xmath188 } }   = \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } a\\mbox{\\bbb ] } } + \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } ( a { \\mathrel{\\sqcap}}b)\\mbox{\\bbb ] } } + \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } a\\mbox{\\bbb ] } } + \\frac{1}{4 } \\cdot { \\mbox{\\bbb [ } c\\mbox{\\bbb ] } } $ ] .",
    "we now define the weak transition relation @xmath189}}$ ] as the transitive and reflexive closure @xmath190}}^*$ ] of @xmath190}}$ ] , while for @xmath191 we let @xmath192 } } \\delta_2 $ ] denote @xmath193}}{\\mathrel{\\goesto[{a}]}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat\\tau$ } ] } } \\delta_2 $ ] .",
    "finally , we write @xmath194}}$ ] with @xmath195 when @xmath196}}$ ] , and @xmath197}}$ ] when @xmath198}}$ ] .",
    "the main properties of the lifted weak transition relations which are used throughout the paper are given in the following lemma .",
    "[ lem : sum ] suppose @xmath199 and @xmath200 } } \\phi_i$ ] for each @xmath174 , with @xmath83 a finite index set . then @xmath201}}\\ ;         \\sum_{i \\in i}{p_i \\cdot \\phi_i}\\;.\\ ] ] conversely , if @xmath202 } } \\phi$ ] then @xmath203 for some @xmath175 such that @xmath200 } } \\phi_i$ ] for each @xmath174 .",
    "the first claim occurs as lemma 6.6 of @xcite .",
    "the second follows by repeated application of proposition 6.1(ii ) of @xcite , taking @xmath178 to be @xmath204}}$ ] and @xmath205}}$ ] for @xmath206 .",
    "[ def : failsim ] a relation @xmath207 is said to be a _ failure simulation _",
    "if for all @xmath208 we have that    1 .   @xmath209 } }   \\delta$ ] implies @xmath210 } } \\theta ' \\land    \\delta { \\mathrel{\\overline{{\\ensuremath{\\mathrel{{\\mathcal r } } } } } } } \\theta'$ ] 2 .",
    "@xmath211}}$ ] implies @xmath212 } } \\theta ' \\land    \\theta ' { \\mathrel{\\ngoesto[{x\\;}]}}$ ] .",
    "we write @xmath213 to mean that there is some failure simulation @xmath178 such that @xmath214 .",
    "similarly , we define _ _ simulation _ _ and @xmath215 by dropping the second clause in definition  [ def : failsim].[0pt]@xmath216 and @xmath217 w.r.t .",
    "@xcite and @xcite ; the pointy side now points to a single state , and the flat side to a distribution . ]",
    "[ def : simulation preorder ] the _ simulation preorder _ @xmath14 and _ failure simulation preorder _ @xmath15 on @xmath0are defined as follows : @xmath218 } } { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$ } ] } } \\theta    \\text { for some $ \\theta$ with } { \\mbox{\\bbb [ } p\\mbox{\\bbb ] } } { \\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}\\theta \\\\",
    "p { \\sqsubseteq_{\\it fs}}q & \\textrm{\\rm iff } & { \\mbox{\\bbb [ } p\\mbox{\\bbb ] } } { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$ } ] } } \\theta    \\text { for some $ \\theta$ with } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } { \\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it fs}}}}}}}\\theta\\ , .   \\end{array}\\ ] ] ( note the opposing directions . ) the equivalences generated by @xmath14 and @xmath15 are called _ ( failure ) simulation equivalence _ , denoted @xmath219 and @xmath220 , respectively .    compare the processes @xmath221 and @xmath132 .",
    "note that @xmath124}}$ ] is the distribution [ 0pt][0pt]@xmath222 whereas @xmath223}}$ ] is the point distribution [ 0pt][0pt]@xmath224 .",
    "the relation @xmath178 given by @xmath225 is a simulation , because the @xmath70-step @xmath226 } } ( \\frac{1}{2}\\cdot{\\mathrel{\\overline{a } } } + \\frac{1}{2}\\cdot{\\mathrel{\\overline{b}}})$ ] can be matched by the idle transition @xmath227}}(\\frac{1}{2}\\cdot{\\mathrel{\\overline{a } } } + \\frac{1}{2}\\cdot{\\mathrel{\\overline{b}}})$ ] , and we have @xmath228 .",
    "thus @xmath229}}$ ] , hence @xmath230 } } } { \\mathrel{\\overline{{\\mathrel{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s } } } } } } } { \\mbox{\\bbb [ } p\\mbox{\\bbb ] } } $ ] , and therefore @xmath231 .",
    "this type of reasoning does not apply to the other direction .",
    "any simulation @xmath178 with @xmath232 would have to satisfy @xmath233 and @xmath234 .",
    "however , the move @xmath235}}{\\mathop{\\textbf{\\textsf{0}}}}$ ] can not be matched by the process @xmath224 , as the only transition the latter process can do is @xmath236 } } ( \\frac{1}{2}\\cdot{\\mathrel{\\overline{a } } } + \\frac{1}{2}\\cdot{\\mathrel{\\overline{b}}})$ ] , and only half of that distribution can match the @xmath121-move .",
    "thus , no such simulation exists , and we find @xmath237 } } } \\not{\\mathrel{\\overline{{\\mathrel{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s } } } } } } } { \\mbox{\\bbb [ } p { \\mathrel{\\sqcap}}p\\mbox{\\bbb ] } } $ ] .",
    "nevertheless , we still have @xmath238 . here , the transition @xmath189}}$ ] from definition  [ def : simulation preorder ] comes to the rescue . as @xmath223 } } { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat\\tau$ } ] } } { \\mbox{\\bbb [ } p\\mbox{\\bbb ] } } $ ] and @xmath124 } } { \\mathrel{\\overline{{\\mathrel{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s } } } } } } } { \\mbox{\\bbb [ } p\\mbox{\\bbb ] } } $ ] , we obtain @xmath238 .",
    "let @xmath239 and @xmath240 .",
    "we have @xmath241 because @xmath124}}{\\mathrel{\\overline{{\\mathrel{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}{\\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] which comes from the following observations :    1 .",
    "@xmath124}}=\\frac{1}{2}\\cdot{\\mathrel{\\overline{a } } } + \\frac{1}{2}\\cdot{\\mathrel{\\overline{b}}}$ ] 2 .",
    "@xmath242}}=\\frac{1}{2}\\cdot ( \\frac{1}{2}\\cdot{\\mathrel{\\overline{a{\\mathrel{\\box}}a}}}+ \\frac{1}{2}\\cdot{\\mathrel{\\overline{a{\\mathrel{\\box}}b } } } )    + \\frac{1}{2}\\cdot ( \\frac{1}{2}\\cdot{\\mathrel{\\overline{b{\\mathrel{\\box}}a}}}+\\frac{1}{2}\\cdot{\\mathrel{\\overline{b{\\mathrel{\\box}}b}}})$ ] 3 .",
    "@xmath243 4 .",
    "@xmath244    this kind of reasoning does not apply to @xmath245 .",
    "for example , we have @xmath246 because the state on the left hand side can refuse to do action @xmath247 while the distribution on the right hand side can not .",
    "indeed , it holds that @xmath248 .",
    "we have already shown in that @xmath14 is a precongruence and that it implies @xmath7 .",
    "similar results can be established for @xmath15 as well .",
    "below we summarise these facts .",
    "[ prp : cong ] suppose @xmath249 .",
    "then @xmath250 is a preorder , and if @xmath251 for @xmath252 then @xmath253 for @xmath206 and @xmath254 for @xmath255 .",
    "the case @xmath14 was proved in ( * ? ? ?",
    "* corollary  6.10 and theorem  6.13 ) ; the case @xmath15 is analogous . as an example , we show that @xmath15 is preserved under parallel composition .",
    "the key step is to show that the binary relation @xmath256 defined by @xmath257 is a failure simulation .",
    "suppose @xmath258 for @xmath259 and @xmath260}}$ ] for some @xmath195 . for each @xmath261",
    "there are two possibilities :    1 .   if @xmath262 then @xmath263}}$ ] and @xmath264}}$ ] , since otherwise we would have @xmath265}}$ ] .",
    "2 .   if @xmath266 then either @xmath263}}$ ] or @xmath264}}$ ] , since otherwise we would have @xmath267}}$ ] .",
    "hence we can partition the set @xmath20 into three subsets : @xmath268 , @xmath269 and @xmath270 such that @xmath271 and @xmath272 with @xmath273}}$ ] and @xmath274}}$ ] , but allowing @xmath263}}$ ] for some @xmath275 and @xmath264}}$ ] for some @xmath276 .",
    "we then have that @xmath277}}$ ] for @xmath259 . by the assumption that @xmath258 for @xmath259",
    ", there is a @xmath278 with @xmath279}}\\delta'_i{\\mathrel{\\ngoesto[{x_0\\cup x_i\\;}]}}$ ] .",
    "therefore @xmath280}}$ ] as well .",
    "it is stated in ( * ? ? ?",
    "* lemma 6.12(i ) ) that if @xmath281 } } \\phi'$ ] then @xmath282 } } \\phi'{\\mathbin{|_{a } } } \\delta$ ] and @xmath283 } } \\delta { \\mathbin{|_{a } } } \\phi'$ ] .",
    "so we have @xmath284}}\\delta'_1{\\mathbin{|_{a}}}\\delta'_2 $ ] .",
    "hence @xmath285 can match up the failures of @xmath286 .",
    "the matching up of transitions and the using of @xmath178 to prove the preservation property of @xmath15 under parallel composition are similar to those in the corresponding proof for simulations ( * ? ? ?",
    "* theorem 6.13(v ) ) , so we omit them .    we recall the following result from ( * ? ?",
    "* theorem 6.17 ) .",
    "[ thm : forsim.sound ] if @xmath21 then @xmath22 .",
    "for any test @xmath287 and process @xmath127 the set @xmath288 is finite , so @xmath289 } } ) } ) \\leq { \\mathop{\\mathit{max}}}({\\ensuremath{{\\mathbb v}}({\\mbox{\\bbb [ } t{{\\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace}}}}}q\\mbox{\\bbb ] } } ) } ) \\textrm { for every test $ t$.}\\ ] ] the following properties for @xmath290 and @xmath291 are not hard to establish : @xmath292 } } \\delta_2 \\textrm { implies } { \\mathop{\\mathit{max}}}({\\ensuremath{{\\mathbb v}}(\\delta_1 ) } ) \\geq { \\mathop{\\mathit{max}}}({\\ensuremath{{\\mathbb v}}(\\delta_2)}).\\ ] ] @xmath293 in ( * ? ? ?",
    "* lemma  6.15 and proposition  6.16 ) similar properties are proven using a function _ maxlive _ instead of @xmath294 .",
    "the same arguments apply here .",
    "now suppose @xmath241 .",
    "since @xmath14 is preserved by the parallel operator we have that @xmath295 for an arbitrary test @xmath145 . by definition",
    ", this means that there is a distribution @xmath6 such that @xmath296}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}\\delta$ ] and @xmath297}}{\\mathrel{\\overline{{\\mathrel{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}\\delta$ ] . by ( [ max.ii ] ) and ( [ max.iii ] ) we infer that @xmath298 } } ) } ) \\leq { \\mathop{\\mathit{max}}}({\\ensuremath{{\\mathbb v}}({\\mbox{\\bbb [ } t{{\\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace}}}}}q\\mbox{\\bbb ] } } ) } ) $ ] .",
    "the result now follows from ( [ max.i ] ) .    it is tempting to use the same idea to prove that @xmath15 implies @xmath8 , but now using the function @xmath299 . however , the @xmath300-analogue of property ( [ max.ii ] ) is in general invalid .",
    "for example , let @xmath301 be the process @xmath302 .",
    "we have @xmath303 , yet @xmath304}}{\\overline{{\\mathop{\\textbf{\\textsf{0}}}}{{\\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace}}}}}{\\mathop{\\textbf{\\textsf{0 } } } } }   } $ ] and @xmath305 .",
    "therefore , it is not the case that @xmath306 } } \\delta_2 $ ] implies @xmath307 .",
    "our strategy is therefore as follows .",
    "write @xmath114}}_{\\ensuremath{\\omega}\\xspace}\\delta$ ] if both @xmath308}}$ ] and @xmath114}}\\delta$ ] hold .",
    "we define @xmath309}}_{\\ensuremath{\\omega}\\xspace}$ ] as @xmath309}}$ ] using @xmath310}}_{\\ensuremath{\\omega}\\xspace}$ ] in place of @xmath310}}$ ] .",
    "similarly we define @xmath311}}_{\\ensuremath{\\omega}\\xspace}$ ] and @xmath312}}_{\\ensuremath{\\omega}\\xspace}$ ] .",
    "thus the subscript @xmath144 on a transition of any kind indicates that no state is passed through in which @xmath144 is enabled . a version of failure simulation adapted to these transition relations is then defined as follows .",
    "let @xmath313 be the largest relation such that @xmath314 implies    1 .",
    "if @xmath114}}_{\\ensuremath{\\omega}\\xspace}\\delta$ ] then there is some @xmath315 with @xmath316}}_{\\ensuremath{\\omega}\\xspace}\\theta'$ ] and @xmath317 2 .",
    "if @xmath194}}$ ] with @xmath318 then there is some @xmath315 with @xmath319}}_{\\ensuremath{\\omega}\\xspace}\\theta'$ ] and @xmath320}}$ ] .",
    "let @xmath321 iff @xmath124 } } { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}_{\\ensuremath{\\omega}\\xspace}\\theta$ ] for some @xmath322 with @xmath242 } } { \\mathrel{\\overline{{\\mathrel{\\lhd^e_{\\raisebox{-.1em}{\\tiny\\it fs } } } } } } } \\theta$ ] .",
    "note that for processes @xmath47 in @xmath0(as opposed to @xmath323 ) , we have @xmath324 iff @xmath325 .",
    "[ prop : failecongruence ] if @xmath47 are processes in @xmath0with @xmath324 and @xmath145 is a process in @xmath323 then @xmath326 .",
    "similar to the proof of proposition  [ prp : cong ] .",
    "[ prop : presound ] the following properties hold for @xmath299 , with @xmath327 : @xmath328 } } ) } ) \\leq { \\mathop{\\mathit{min}}}({\\ensuremath{{\\mathbb v}}({\\mbox{\\bbb [ } t{{\\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace}}}}}q\\mbox{\\bbb ] } } ) } )    \\textrm { \\rm for every test $ t$.}\\ ] ] @xmath329}}_{\\ensuremath{\\omega}\\xspace}\\delta_2    \\textrm { \\rm for $ \\alpha\\in{\\ensuremath{\\mathsf{act}}\\xspace}_\\tau$ implies }    { \\mathop{\\mathit{min}}}({\\ensuremath{{\\mathbb v}}(\\delta_1 ) } ) \\leq { \\mathop{\\mathit{min}}}({\\ensuremath{{\\mathbb v}}(\\delta_2)}).\\ ] ] @xmath330    _ proof .",
    "_ property ( [ min.i ] ) is again straightforward , and property ( [ min.ii ] ) can be established just as in lemma  6.15 in @xcite , but with all @xmath331-signs reversed .",
    "property ( [ min.iii ] ) follows by structural induction , simultaneously with the property , for @xmath332 and @xmath333 , that @xmath334 the reduction of property ( [ min.iii ] ) to ( [ min.iv ] ) proceeds exactly as in ( * ? ? ?",
    "* lemma  6.16(ii ) ) . for ( [ min.iv ] ) itself",
    "we distinguish three cases :    1 .   if @xmath335}}$ ] , then @xmath336 trivially .",
    "if @xmath308}}$ ] but @xmath337 , then we can closely follow the proof of ( * ? ? ?",
    "* lemma  6.16(i ) ) : + whenever @xmath338}}_\\omega \\theta$ ] , for @xmath291 and @xmath339 , then @xmath340 implies the existence of some @xmath341 such that @xmath342}}_\\omega^*\\delta_\\theta$ ] and @xmath343 . by induction , using ( [ min.iii ] ) , it follows that @xmath344 .",
    "consequently , we have that @xmath345 } } \\theta }   \\ }   } ) \\\\              & \\geq   & { \\mathop{\\mathit{min}}}({\\ { { { \\mathop{\\mathit{min}}}({\\ensuremath{{\\mathbb v}}(\\delta_\\theta ) } ) ~|~ s { \\mathrel{\\goesto[{\\alpha } ] } } \\theta }   \\ }   } ) \\\\              & \\geq   & { \\mathop{\\mathit{min}}}({\\ { { { \\mathop{\\mathit{min}}}({\\ensuremath{{\\mathbb v}}(\\delta ) } ) ~|~ s { \\mathrel{\\goesto[{\\alpha } ] } } \\theta }   \\ }   } ) &                                                  \\qquad\\mbox{(by ( \\ref{min.ii}))}\\\\                   & = & { \\mathop{\\mathit{min}}}({\\ensuremath{{\\mathbb v}}(\\delta)})\\;.    \\end{array}\\ ] ] 3 .",
    "if @xmath346 , that is @xmath347}}$ ] , then there is some @xmath348 such that @xmath349}}_{\\ensuremath{\\omega}\\xspace}\\delta'$ ] and @xmath350}}$ ] . by the definition of @xmath155 , @xmath351 . using ( [ min.ii ] ) , we have @xmath352 , so @xmath353 as well .",
    "thus , also in this case @xmath354 .",
    "[ t : simtest ] if @xmath23 then @xmath24 .",
    "similar to the proof of theorem  [ thm : forsim.sound ] , using ( [ min.i])([min.iii ] ) .",
    "the next four sections are devoted to proving the converse of theorems  [ thm : forsim.sound ] and  [ t : simtest ] .",
    "much work on testing @xcite uses success _ states _ marked by outgoing @xmath144-actions ; this is referred to as _ state - based _ testing , which we have used in section  [ sec : testing ] to define the preorders @xmath355 and @xmath356 . in other work @xcite , however , it is the _ actual execution _ of @xmath144 that constitutes success . this _",
    "action - based _ approach is formalised as in the state - based approach , via a modified results - gathering function :    @xmath357 as in the original @xmath155 , the @xmath122 s are non - success actions , including @xmath70 ; and again , this is done for generality , since in testing outcomes the only non - success action is @xmath70 .",
    "if we use this results - gathering function rather than @xmath358 in definitions  [ d1659 ] and [ d1700 ] we obtain the two slightly different testing preorders , @xmath359 and @xmath12 .",
    "the following proposition shows that state - based testing is at least as discriminating as action - based testing :    [ p : action - based ]    1 .   if @xmath22 then @xmath360 .",
    "2 .   if @xmath24 then @xmath361 .    for any action - based test @xmath362",
    "we construct a state - based test @xmath145 by replacing each subterm @xmath363 by @xmath364 ; then we have @xmath365 } } } =    { \\ensuremath{{{\\widehat{{{\\mathbb v}}}}}}\\xspace}{{\\mbox{\\bbb [ } { \\widehat{t}}{{\\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace}}}}}p\\mbox{\\bbb ] } } } $ ] for all @xmath0processes @xmath30 .",
    "proposition  [ p : action - based ] enables us to reduce our main goal , the converse of theorems  [ thm : forsim.sound ] and  [ t : simtest ] , to the following property .",
    "[ t : simtest - reverse ]    1 .   if @xmath360 then @xmath21 .",
    "2 .   if @xmath361 then @xmath23 .",
    "we set the proof of this theorem as our goal in the next three sections .",
    "once we have obtained this theorem , it follows that in our framework of finite probabilistic processes the state - based and action - based testing preorders coincide .",
    "this result no longer holds in the presence of divergence , at least for must - testing .      however , a peculiarity of action - based testing is that success actions can be indefinitely inhibited by infinite @xmath70-branches .",
    "we have @xmath372 } } ) } = { \\ensuremath{{{\\widehat{{{\\mathbb v}}}}}}({\\mbox{\\bbb [ } a.\\omega \\mathbin{{{\\mathbin{|_{{\\ensuremath{\\mathsf{act}}\\xspace } } } } } } a.\\omega { \\mathrel{\\sqcap}}0\\mbox{\\bbb ] } } ) } = { \\ { { 0,1 }   \\ }   } .\\end{aligned}\\ ] ] indeed no test can be found to distinguish them , and so one can show @xmath373 .",
    "note that probabilistic behaviour plays no role in this counter - example . in csp",
    "( without probabilities ) there is no difference between @xmath374 and @xmath355 , whereas @xmath375 is strictly less discriminating than @xmath356 . for finitely branching processes , the csp refinement preorder based on failures and divergences @xcite coincides with the state - based relation @xmath356 .",
    "this section describes another variation on testing , a richer testing framework due to segala @xcite , in which countably many success actions exist : the application of a test to a process yields a set of _ vectors _ over the real numbers , rather than a set of scalars .",
    "the resulting action - based testing preorders will serve as a stepping stone in proving theorem  [ t : simtest - reverse ] .",
    "let @xmath366 be a _ set _ of fresh success actions with @xmath376 .",
    "an @xmath366-test is again a @xmath0process , but this time allowing subterms @xmath377 for any @xmath378 . applying such a test to a process",
    "yields a non - empty set of test outcome-_tuples _",
    "@xmath379^\\omega$ ] . as with standard scalar testing",
    ", each outcome arises from a resolution of the nondeterministic choices in .",
    "however , here an outcome is a _ tuple _ and its @xmath148-component gives the probability that this resolution will perform the success action @xmath148 .    for vector - based testing we again inductively define a results - gathering function ,",
    "but first we require some auxiliary notation . for",
    "any action @xmath122 define @xmath380^\\omega \\rightarrow [ 0,1]^\\omega$ ] by @xmath381 so that if @xmath122 is a success action , in @xmath366 , then @xmath382 updates the tuple to 1 at that point , leaving it unchanged otherwise , and when @xmath383 the function @xmath382 is the identity .",
    "these functions lift to sets @xmath384^\\omega$ ] as usual , via @xmath385 .",
    "next , for any set @xmath20 define its _ convex closure _ @xmath386 by @xmath387 here , as usual , @xmath83 is assumed to be a finite index set .",
    "finally , @xmath388^\\omega$ ] is given by @xmath389 for all @xmath390 .",
    "let @xmath391be the set of @xmath366-tests , and @xmath392the set of state - based @xmath366-tests .",
    "[ def : vector - testing ] the _ action - based , vector - based , convex - closed results - gathering function _ @xmath393^\\omega)}}$ ] is given by @xmath394 as with our previous results - gathering functions @xmath155 and @xmath368 , this function extends to the type [ 0pt][0pt]@xmath395^\\omega)}}$ ] via the convention @xmath396 .    for any @xmath0process @xmath30 and @xmath366-test @xmath145 , let @xmath397}}}~.\\ ] ]",
    "the _ vector - based _ _",
    "may- _ and _ must _ preorders are given by @xmath398 where @xmath399 and @xmath400 are the hoare- and smyth preorders on @xmath401^\\omega}$ ] generated from @xmath331 index - wise on @xmath147^\\omega$ ] itself .",
    "we will explain the rle of convex - closure @xmath402 in this definition .",
    "let @xmath403 be defined as [ 0pt][0pt]@xmath404 above , but omitting the use of @xmath402 .",
    "it is easy to see that [ 0pt][0pt]@xmath405 for all @xmath406 .",
    "applying convex closure to subsets of the one - dimensional interval @xmath147 $ ] ( such as arise from applying scalar tests to processes ) has no effect on the hoare and smyth orders between these subsets :    [ lem : cc ] suppose @xmath407 $ ]",
    ". then    1 .",
    "@xmath408 if and only if @xmath409 .",
    "2 .   @xmath410 if and only if @xmath411 .",
    "we restrict attention to @xmath412 ; the proof of @xmath413 goes likewise .",
    "it suffices to show that ( i ) @xmath414 and ( ii ) @xmath415 . we only prove ( ii ) since ( i ) is obvious .",
    "suppose @xmath416 , then @xmath417 for a finite set @xmath83 with @xmath80 and @xmath418 .",
    "let @xmath419 .",
    "then + @xmath420    it follows that for scalar testing it makes no difference whether convex closure is employed or not .",
    "vector - based testing , as proposed in definition  [ def : vector - testing ] , is a conservative extension of action - based testing , as described in section  [ sec : state - vs - action ] :    suppose @xmath366 is the singleton set @xmath421",
    ". then    1 .",
    "@xmath422 if and only if @xmath360 .",
    "@xmath423 if and only if @xmath361 .",
    "@xmath424 when @xmath366 is @xmath425 , so the result follows from lemma  [ lem : cc ] .",
    "lemma  [ lem : cc ] does not generalise to @xmath147^k$ ] , when @xmath426 , as the following example demonstrates :    [ ex : ccnot ] let @xmath427 denote @xmath428 respectively . then it is easy to show that @xmath409 although obviously @xmath429 .",
    "this example can be exploited to show that for vector - based testing it _ does _ make a difference whether convex closure is employed .",
    "[ ex : convex ] consider the two processes @xmath430 take @xmath431 .",
    "employing the results - gathering function @xmath403 , without convex closure , with the test @xmath432 we obtain @xmath433 as pointed out in example  [ ex : ccnot ] , this entails @xmath434 , although their convex closures @xmath435 and @xmath436 _ are _ related under the hoare preorder .",
    "convex closure is a uniform way of ensuring that internal choice can simulate an arbitrary probabilistic choice @xcite . for the processes @xmath30 and @xmath31 of example  [",
    "ex : convex ] it is obvious that @xmath437 , and from theorem  [ thm : forsim.sound ] it therefore follows that @xmath22 .",
    "this fits with the intuition that a probabilistic choice is an acceptable implementation of a nondeterministic choice occurring in a specification . considering that we use @xmath9 as a stepping stone in showing the coincidence of @xmath14 and @xmath7",
    ", we must have @xmath438 .",
    "for this reason we use convex closure in definition  [ def : vector - testing ] .    in @xcite the results - gathering function @xmath404 with @xmath439",
    "was called simply @xmath440 ( because action - based / vector - based / convex - closed testing was assumed there throughout , making the @xmath441-indicators superfluous ) ; and it was defined in terms of a formalisation of the notion of a resolution . as we show in proposition  [ p1126 ] of the appendix , the inductive definition  [ def : vector - testing ] above yields the same results . in the present paper",
    "our interest in vector - based testing stems from the following result .",
    "[ t : multiuni ]    1 .",
    "@xmath438 iff @xmath360 2 .",
    "@xmath442 iff @xmath361 .    in ( * ? ? ?",
    "* theorem 3 ) this theorem has been established for versions of [ 0pt][0pt]@xmath9 and [ 0pt][0pt]@xmath10 where tests are finite probabilistic automata , as defined in our appendix  [ app : resolutions ] . the key argument is that when @xmath438 can be refuted by means of a vector - based test @xmath145 , then [ 0pt][0pt]@xmath360 can be refuted by means of a scalar test @xmath443 , where u is administrative code which collates the vector of results produced by @xmath145 and effectively renders them as a unique scalar result , and similarly for [ 0pt][0pt]@xmath10 .",
    "this theorem applies to our setting as well , due to the observation that if a test @xmath145 can be represented as a @xmath444-expression , then so can the test @xmath443 .",
    "because of theorem  [ t : multiuni ] , in order to establish theorem  [ t : simtest - reverse ] it will suffice to show that    1 .",
    "@xmath438 implies @xmath21 and 2 .",
    "@xmath442 implies @xmath23 .",
    "this shift from scalar testing to vector - based testing is motivated by the fact that the latter enables us to use more informative tests , allowing us to discover more intensional properties of the processes being tested .",
    "the crucial characteristics of @xmath445 needed for the above implications are summarised in lemmas  [ lem : inductive ] and [ l : inductive.5 ] . for convenience of presentation , we write @xmath446 for the vector in @xmath147^\\omega$ ] defined by @xmath447 and @xmath448 for @xmath449 . sometimes we treat a distribution @xmath6 of finite support as the @xmath0expression @xmath450 , so that @xmath451 .",
    "[ lem : inductive ] let @xmath30 be a @xmath0process , and @xmath452 be tests .",
    "1 .   @xmath453 iff @xmath454 .",
    "2 .   @xmath455 iff @xmath456}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat\\tau$}]}}\\delta{\\mathrel{\\ngoesto[{x\\;}]}}$ ] .",
    "3 .   suppose the action @xmath148 does not occur in the test @xmath145 .",
    "then @xmath457 with @xmath458 iff there is a @xmath459 with @xmath124}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat a$}]}}\\delta$ ] and [ 0pt][0pt]@xmath460 .",
    "4 .   @xmath461 iff @xmath462 for some @xmath463 .",
    "@xmath464 if for all @xmath465 there are @xmath466 $ ] and @xmath467 such that @xmath468 , @xmath124}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat\\tau$}]}}\\sum_{i\\in i}q_i\\cdot\\delta_i$ ] and @xmath469 for some [ 0pt][0pt]@xmath470 .",
    "straightforward , by induction on the structure of @xmath30 .",
    "the converse of lemma  [ lem : inductive ] ( 5 ) also holds , as the following lemma says .",
    "however , the proof is less straightforward .",
    "[ l : inductive.5 ] let @xmath30 be a @xmath0process , and @xmath471 be tests . if @xmath464 then for all @xmath465 there are @xmath466 $ ] and @xmath467 with @xmath472 such that @xmath124}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat\\tau$}]}}\\sum_{i\\in i}q_i\\cdot\\delta_i$ ] and @xmath469 for some [ 0pt][0pt]@xmath473 .    _ proof .",
    "_ given that the states of our plts are @xmath48expressions , there exists a well - founded order on the combination of states in @xmath48and distributions in @xmath474 , such that @xmath338 } } \\delta$ ] implies that @xmath19 is larger than @xmath6 , and any distribution is larger than the states in its support .",
    "intuitively , this order corresponds to the usual order on natural numbers if we graphically depict a plts as a finite tree ( cf .",
    "section  [ sec : pcsp ] ) and assign to each node a number to indicate its level in the tree . let @xmath475 .",
    "we prove the following two claims    a.   if @xmath19 is a state - based process and @xmath476 then there are some @xmath477 with @xmath468 such that @xmath478 } } \\sum_{i\\in i } q_i \\cdot \\delta_i$ ] , @xmath479 , and [ 0pt][0pt]@xmath480 .",
    "b.   if @xmath481 and @xmath482 then there are some @xmath483 with @xmath468 such that @xmath484 } } \\sum_{i\\in i } q_i \\cdot \\delta_i$ ] , @xmath479 , and [ 0pt][0pt]@xmath480 .    by simultaneous induction on the order mentioned above , applied to @xmath19 and @xmath6 .",
    "a.   we have two sub - cases depending on whether @xmath19 can make an initial @xmath70-move or not .",
    "if @xmath19 can not make a @xmath70-move , that is @xmath485}}$ ] , then the only possible moves from @xmath486 are @xmath70-moves originating in @xmath145 ; @xmath145 has no non-@xmath70 moves , and any non-@xmath70 moves that might be possible for @xmath19 on its own are inhibited by the alphabet @xmath44 of the composition .",
    "suppose @xmath476 . then by definition ( [ e : def.vec",
    "] ) there are some @xmath477 with @xmath468 such that @xmath487 and [ 0pt][0pt]@xmath488 .",
    "obviously we also have @xmath489}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$ } ] } } \\sum_{i\\in i}q_i \\cdot { \\overline{s }   } $ ] .",
    "if @xmath19 can make one or more @xmath70-moves , then we have @xmath184 } } \\delta'_j$ ] for @xmath490 , where without loss of generality @xmath491 can be assumed to be a non - empty finite set disjoint from @xmath83 , the index set for @xmath145 .",
    "the possible first moves for @xmath486 are @xmath70-moves either of @xmath145 or of @xmath19 , because @xmath145 can not make initial non-@xmath70 moves and that prevents a proper synchronisation from occurring on the first step .",
    "suppose that @xmath492 . then by definition ( [ e : def.vec ] ) there are some @xmath493 with @xmath494 and @xmath495 for each @xmath490 , we know by the induction hypothesis that @xmath496 } } \\sum_{i\\in i}p_{ji } \\cdot \\delta'_{ji }     \\\\",
    "\\label{eq:2b }     o'_j = \\sum_{i\\in i}p_{ji }   o'_{ji } \\\\     \\label{eq:2c }     o'_{ji } \\in { \\ensuremath{{{\\widehat{\\mathcal a}}_{\\scriptscriptstyle\\updownarrow}^{\\raisebox{-.1em}{\\scriptsize$\\omega$}}\\xspace}}}(t_i,\\delta'_{ji } )    \\end{aligned}\\ ] ] for some @xmath497 with @xmath498 .",
    "let @xmath499 for each @xmath500 , except that @xmath91 and @xmath501 are chosen arbitrarily in case @xmath502 .",
    "it can be checked by arithmetic that @xmath503 have the required properties , viz .  that @xmath504 , that @xmath505 and that @xmath506 } }   \\sum_{i\\in i}p_i\\cdot{\\overline{s }   } + \\sum_{j\\in     j}p_j \\cdot \\delta'_j \\\\     & { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$ } ] } }   \\sum_{i\\in i}p_i\\cdot{\\overline{s }   } + \\sum_{j\\in     j}p_j \\cdot \\sum_{i\\in i}p_{ji}\\cdot \\delta'_{ji } \\qquad\\text{by     ( \\ref{eq:2a } ) and lemma~\\ref{lem : sum}}\\\\     & =   \\sum_{i\\in i}q_i\\cdot\\delta_i \\;.    \\end{aligned}\\ ] ] finally , it follows from ( [ eq:1b ] ) and ( [ eq:2c ] ) that @xmath507 for each @xmath500 .",
    "b.   let @xmath508 and @xmath509 .",
    "w.l.o.g .",
    "we may assume that @xmath491 is a non - empty finite set disjoint from @xmath83 .",
    "using that @xmath510 , if @xmath482 then @xmath511 for each @xmath490 , we know by the induction hypothesis that @xmath512 } } \\sum_{i\\in i}q_{ji } \\cdot \\delta'_{ji}\\\\   \\label{eq:5b }   o'_j = \\sum_{i\\in i}q_{ji }   o'_{ji}\\\\   \\label{eq:5c }   o'_{ji } \\in { \\ensuremath{{{\\widehat{\\mathcal a}}_{\\scriptscriptstyle\\updownarrow}^{\\raisebox{-.1em}{\\scriptsize$\\omega$}}\\xspace}}}(t_i,\\delta'_{ji } )   \\end{aligned}\\ ] ] for some @xmath513 with @xmath514 .",
    "thus let @xmath515 again choosing @xmath91 and @xmath501 arbitrarily in case @xmath502 .",
    "as in the first case , it can be shown by arithmetic that the collection @xmath516 has the required properties .",
    "in this section we present logical characterisations @xmath32 and @xmath38 of our testing preorders .",
    "besides their intrinsic interest , these logical preorders also serves as a stepping stone in proving theorem  [ t : simtest - reverse ] . in this section",
    "we show that the logical preorders are sound w.r.t .",
    "the simulation and failure simulation preorders , and hence w.r.t .",
    "the testing preorders ; in the next section we establish completeness . to start",
    ", we define a set @xmath517 of modal formulae , inductively , as follows :    1 .",
    "@xmath518 when @xmath519 , 2 .",
    "@xmath520 when @xmath521 and @xmath206 , 3 .",
    "@xmath522 when @xmath523 for all @xmath465 , with @xmath83 finite , 4 .",
    "and @xmath524 when @xmath525 $ ] and @xmath523 for all @xmath465 , with @xmath83 a finite index set , and @xmath80 .",
    "we often write @xmath526 for @xmath527 and @xmath528 for @xmath529 .",
    "the _ satisfaction relation _",
    "@xmath530 is given by :    1 .",
    "@xmath531 iff there is a @xmath348 with @xmath532}}\\delta'$ ] and [ 0pt][0pt]@xmath533}}$ ] , 2 .",
    "@xmath534 iff there is a @xmath348 with @xmath535}}\\delta'$ ] and @xmath536 , 3 .",
    "@xmath537 iff @xmath538 for all @xmath465 4 .   and @xmath539 iff there are @xmath540 , for all @xmath465 , with @xmath541 , such that @xmath532}}\\sum_{i\\in i}p_i\\cdot\\delta_i$ ] .",
    "let @xmath29 be the subclass of @xmath517 obtained by skipping the @xmath33 clause .",
    "we write @xmath28 just when @xmath124}}\\models{\\varphi}$ ] implies @xmath242}}\\models{\\varphi}$ ] for all @xmath542 , and @xmath543 just when @xmath124}}\\models{\\varphi}$ ] is implied by @xmath242}}\\models{\\varphi}$ ] for all @xmath521 .",
    "( note the opposing directions . )    in order to obtain the main result of this section , theorem  [ thm - characteristic formulae ] , we introduce the following tool .",
    "[ d : char.formula ] the _",
    "@xmath544-characteristic formula _",
    "@xmath545 or @xmath546 of a process @xmath547 or @xmath548 is defined inductively :    1 .",
    "@xmath549 } } \\delta } { \\langlea\\rangle}{\\varphi}_\\delta \\land { \\mathop{\\mathbf{ref}(\\{a \\mid s { \\mathrel{\\ngoesto[{a\\;}]}}\\})}}$ ] if @xmath485}}$ ] , 2 .",
    "@xmath549 } } \\delta } { \\langlea\\rangle}{\\varphi}_\\delta \\land         \\bigwedge_{s { \\mathrel{\\goesto[{\\tau } ] } } \\delta } { \\varphi}_\\delta$ ] otherwise , 3",
    ".   @xmath550 .",
    "here the conjunctions @xmath551 } } \\delta}$ ] range over suitable pairs @xmath552 , and @xmath553 } } \\delta}$ ] ranges over suitable @xmath6 .",
    "the _ @xmath29-characteristic formulae _ @xmath554 and @xmath555 are defined likewise , but omitting the conjuncts @xmath556}}\\})}}$ ] .",
    "write @xmath557 with @xmath558 if for each distribution @xmath6 one has @xmath559 implies @xmath560 .",
    "then it is easy to see that @xmath561 and @xmath562 for any @xmath465 ; furthermore , the following property can be established by an easy inductive proof .",
    "[ lem - characteristic formulae ] for any @xmath459 we have @xmath563 , as well as @xmath564 .",
    "it and the following lemma help to establish theorem  [ thm - characteristic formulae ] .",
    "[ characteristic formulae ] for any processes @xmath565 we have that @xmath124 } } \\models { \\varphi}_{{\\mbox{\\bbbs [ } q\\mbox{\\bbbs ] } } } $ ] implies @xmath23 , and likewise that @xmath242 } } \\models \\psi_{{\\mbox{\\bbbs [ } p\\mbox{\\bbbs ] } } } $ ] implies @xmath21 .    to establish the first statement",
    ", we define the relation @xmath178 by @xmath214 iff @xmath566 ; to show that it is a failure simulation we first prove the following technical result : @xmath567}}\\theta ' \\land \\delta\\mathrel{\\overline{\\ensuremath{\\mathrel{{\\mathcal r } } } } } \\theta'.\\ ] ] suppose @xmath568 with @xmath569 , so that we have @xmath570 and for all @xmath465 there are @xmath571 with @xmath572 such that @xmath573}}\\theta'$ ] with [ 0pt][0pt]@xmath574 . since @xmath575 for all @xmath465 we have @xmath576 .",
    "now we show that @xmath178 is a failure simulation .    1 .",
    "suppose @xmath577 and @xmath578 } } \\delta$ ] .",
    "then from definition  [ d : char.formula ] we have @xmath579 , so that @xmath580 .",
    "applying ( [ eq : modal ] ) gives us @xmath581}}\\theta'$ ] with @xmath576 for some @xmath315 .",
    "2 .   suppose @xmath214 and @xmath582 } } \\delta$ ] with @xmath206 .",
    "then @xmath583 , so @xmath584 .",
    "hence @xmath585 with @xmath586 } } \\theta'$ ] and @xmath587",
    ". again apply ( [ eq : modal ] ) .",
    "3 .   suppose @xmath577 and [ 0pt][0pt]@xmath194}}$ ] with @xmath588 .",
    "then @xmath589 , so @xmath590 . hence @xmath591 with @xmath573 } }    \\theta'$ ] and [ 0pt][0pt]@xmath592}}$ ] .",
    "thus @xmath178 is indeed a failure simulation . by our assumption @xmath124 } } \\models { \\varphi}_{{\\mbox{\\bbbs [ } q\\mbox{\\bbbs ] } } } $ ] , using ( [ eq : modal ] ) , there exists a @xmath315 such that @xmath124}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}\\theta'$ ] and @xmath242 } } \\mathrel{\\overline{\\ensuremath{\\mathrel{{\\mathcal r } } } } } \\theta'$ ] , which gives @xmath23 via definition  [ def : simulation preorder ] .    to establish the second statement ,",
    "define the relation @xmath593 by @xmath594 iff @xmath595 ; exactly as above one obtains @xmath596}}\\theta ' \\land \\delta\\mathrel{\\overline{\\ensuremath{\\mathrel{{\\mathcal s } } } } } \\theta'.\\ ] ] just as above it follows that @xmath593 is a simulation . by the assumption @xmath242 } } \\models { \\varphi}_{{\\mbox{\\bbbs [ } p\\mbox{\\bbbs ] } } } $ ] , using ( [ eq : modals ] ) , there exists a @xmath315 such that @xmath242}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}\\theta'$ ] and @xmath124 } } \\mathrel{\\overline{\\ensuremath{\\mathrel{{\\mathcal s } } } } } \\theta'$ ] .",
    "hence @xmath21 via definition  [ def : simulation preorder ] .",
    "[ thm - characteristic formulae ]    1 .   if @xmath28 then @xmath21 .",
    "2 .   if @xmath597 then @xmath23 .    suppose @xmath543 . by lemma  [ lem - characteristic formulae ]",
    "we have @xmath242}}\\!\\models\\!{\\varphi}_{{\\mbox{\\bbbs [ } q\\mbox{\\bbbs ] } } } $ ] and hence @xmath124}}\\models{\\varphi}_{{\\mbox{\\bbbs [ } q\\mbox{\\bbbs ] } } } $ ] .",
    "lemma  [ characteristic formulae ] gives @xmath324 .    for ( 1 ) , assuming @xmath598 , we have @xmath124}}\\models\\psi_{{\\mbox{\\bbbs [ } p\\mbox{\\bbbs ] } } } $ ] , hence @xmath242}}\\models\\psi_{{\\mbox{\\bbbs [ } p\\mbox{\\bbbs ] } } } $ ] , and thus @xmath21 .",
    "our final step towards theorem  [ t : simtest - reverse ] is taken in this section , where we show that every modal formula @xmath40 can be characterised by a vector - based test @xmath41 with the property that any @xmath0process satisfies @xmath40 just when it passes the test @xmath41 .",
    "[ lem : char tests ] for every @xmath521 there exists a pair @xmath599 with @xmath41 an @xmath366-test and @xmath600^\\omega$ ] , such that @xmath601 for all @xmath459 , and in case @xmath602 we also have @xmath603    @xmath41 is called a _ characteristic test _ of @xmath40 and @xmath604 its _",
    "target value_.    first of all note that if a pair @xmath599 satisfies the requirements above , then any pair obtained from @xmath599 by bijectively renaming the elements of @xmath366 also satisfies these requirements .",
    "hence a characteristic test can always be chosen in such a way that there is a success action @xmath378 that does not occur in ( the finite ) @xmath41 . moreover",
    ", any countable collection of characteristic tests can be assumed to be _",
    "@xmath366-disjoint _ , meaning that no @xmath378 occurs in two different elements of the collection .",
    "the required characteristic tests and target values are obtained as follows .    1 .",
    "let @xmath605 .",
    "take @xmath606 for some @xmath378 , and @xmath607 .",
    "2 .   let @xmath608 with @xmath195 .",
    "take @xmath609 for some @xmath378 , and @xmath610 .",
    "3 .   let @xmath611 .",
    "by induction , @xmath612 has a characteristic test @xmath613 with target value @xmath614 .",
    "take @xmath615 where @xmath378 does not occur in @xmath616 , and @xmath617 .",
    "4 .   let @xmath618 with @xmath83 a finite and non - empty index set .",
    "choose a @xmath366-disjoint family @xmath619 of characteristic tests",
    "@xmath471 with target values @xmath620 for each @xmath621 .",
    "furthermore , let @xmath622 $ ] for @xmath465 be chosen arbitrarily such that @xmath80 .",
    "take @xmath623 and @xmath624 .",
    "let @xmath625 .",
    "choose a @xmath366-disjoint family @xmath619 of characteristic tests @xmath471 with target values @xmath620 for each @xmath621 , such that there are distinct success actions @xmath626 for @xmath465 that do not occur in any of those tests .",
    "let [ 0pt][0pt]@xmath627 and [ 0pt][0pt]@xmath628 .",
    "note that for all @xmath465 also @xmath629 is a characteristic test of @xmath621 with target value @xmath630 .",
    "take @xmath631 and @xmath632 .",
    "note that @xmath633 whenever @xmath378 does not occur in @xmath41 . by induction on @xmath40",
    "we now check ( [ eq : chartest ] ) above .    1 .",
    "let @xmath634 .",
    "for all @xmath635 we have @xmath636 as well as @xmath637 , using lemma  [ lem : inductive](1 ) .",
    "2 .   let @xmath608 with @xmath195 .",
    "suppose @xmath636 .",
    "then there is a @xmath348 with @xmath532}}\\delta'$ ] and [ 0pt][0pt]@xmath533}}$ ] . by lemma  [ lem : inductive](2 ) , @xmath638 . +",
    "now suppose @xmath639 .",
    "this implies @xmath640 , so by lemma  [ lem : inductive](2 ) there is a @xmath348 with @xmath532}}\\delta'$ ] and [ 0pt][0pt]@xmath533}}$ ] .",
    "hence @xmath636 .",
    "3 .   let @xmath611 with @xmath206 .",
    "suppose @xmath636 .",
    "then there is a @xmath348 with @xmath535}}\\delta'$ ] and @xmath641 . by induction , @xmath642 . by lemma  [ lem : inductive](3 ) , @xmath643 . +",
    "now suppose @xmath639 .",
    "this implies @xmath458 , so by lemma  [ lem : inductive](3 ) there is a @xmath348 with @xmath535}}\\delta'$ ] and [ 0pt][0pt]@xmath644 . by induction , @xmath645 , so @xmath646 .",
    "4 .   let @xmath618 with @xmath83 a finite and non - empty index set .",
    "suppose @xmath636 .",
    "then @xmath538 for all @xmath465 , and hence , by induction , [ 0pt][0pt]@xmath647 .",
    "thus @xmath648 [ 0pt][0pt]@xmath649 by lemma  [ lem : inductive](4 ) , and @xmath650 . +",
    "now suppose @xmath639 .",
    "then , using lemma  [ lem : inductive](4 ) , @xmath651 for certain [ 0pt][0pt]@xmath652 .",
    "note that @xmath653 is an @xmath366-disjoint family of tests .",
    "one has for all @xmath465 , for if @xmath654 for some @xmath465 and @xmath378 , then @xmath148 must occur in @xmath471 and hence can not occur in @xmath655 for @xmath656 .",
    "this implies @xmath657 for all @xmath658 and thus @xmath659 , in contradiction with the assumption . by induction ,",
    "@xmath538 for all @xmath465 , and hence @xmath636 . 5 .",
    "let @xmath625 .",
    "suppose @xmath636 .",
    "then for all @xmath465 there are @xmath467 with @xmath541 such that @xmath660}}\\sum_{i\\in i}p_i\\cdot\\delta_i$ ] . by induction , there are @xmath661 with @xmath662 . hence , there are @xmath663 with @xmath664",
    ". thus @xmath665 by lemma  [ lem : inductive](5 ) , and @xmath650 . +",
    "now suppose @xmath639 .",
    "then , by lemma  [ l : inductive.5 ] , there are @xmath666 and @xmath91 , for @xmath465 , such that [ 0pt][0pt]@xmath667}}\\sum_{i\\in i}q_i\\cdot\\delta_i$ ] and @xmath668 for some [ 0pt][0pt]@xmath669 .",
    "now @xmath670 , so , using that @xmath653 is an @xmath366-disjoint family of tests , @xmath671 . as @xmath672 , it must be that @xmath673 for all @xmath465 .",
    "exactly as in the previous case one obtains @xmath664 for all @xmath465 .",
    "given that @xmath674 , using lemma  [ lem : inductive](4 ) , it must be that @xmath675 for some [ 0pt][0pt]@xmath480 with @xmath676 . by induction , @xmath677 for all @xmath465 , and hence @xmath636 .    in case @xmath542 , the formula can not be of the form @xmath33 . then a straightforward induction yields that @xmath678 and for all @xmath679 and @xmath643 we have @xmath680 .",
    "therefore , @xmath650 iff @xmath681 iff @xmath682 , yielding ( [ eq : chartestmay ] ) .    [ thm - characteristic tests ]    1 .   if @xmath438 then @xmath28 .",
    "2 .   if @xmath442 then @xmath597 .",
    "suppose @xmath683 and @xmath242}}\\models{\\varphi}$ ] for some @xmath521 .",
    "let @xmath41 be a characteristic test of @xmath40 with target value @xmath604 .",
    "then lemma  [ lem : char tests ] yields @xmath684 } } } ) : o\\leq v_{\\varphi}$ ] , and hence , given that @xmath683 and @xmath685}}})= { \\ensuremath{{{\\widehat{\\mathcal a}}_{\\scriptscriptstyle\\updownarrow}^{\\raisebox{-.1em}{\\scriptsize$\\omega$}}\\xspace}}}({t_{\\varphi},r})$ ] for any @xmath686 , by the smyth preorder we have @xmath687}}}):~o'\\leq v_{\\varphi}$ ] .",
    "thus @xmath124}}\\models{\\varphi}$ ] .",
    "the may - case goes likewise , via the hoare preorder .",
    "combining theorems  [ t : multiuni ] , [ thm - characteristic tests ] and [ thm - characteristic formulae ] , we obtain theorem  [ t : simtest - reverse ] , the goal we set ourselves in section  [ sec : state - vs - action ] . thus , with theorems  [ thm : forsim.sound ] and  [ t : simtest ] and proposition  [ p : action - based ] , we have shown that the may preorder coincides with simulation and that the must preorder coincides with failure simulation .",
    "these results also imply the converse of both statements in theorem  [ thm - characteristic tests ] , and thus that the logics @xmath29 and @xmath517 give logical characterisations of the simulation and failure simulation preorders @xmath14 and @xmath15 .",
    "@xmath688{@{}lrcl@ { } }       { \\ensuremath{\\mathbf{(p1 ) } } }             & p { \\mathrel{\\!_{\\scriptscriptstyle p}\\oplus } } p&{= } & p\\\\        { \\ensuremath{\\mathbf{(p2 ) } } }             & p { \\mathrel{\\!_{\\scriptscriptstyle p}\\oplus } } q&{= } & q { \\mathrel{\\!_{\\scriptscriptstyle 1-p}\\oplus } } p\\\\        { \\ensuremath{\\mathbf{(p3 ) } } }             & ( p { \\mathrel{\\!_{\\scriptscriptstyle p}\\oplus } } q ) { \\mathrel{\\!_{\\scriptscriptstyle q}\\oplus } } r&{= } &                         p { \\mathrel{\\!_{\\scriptscriptstyle p\\cdot q}\\oplus } } ( q { \\mathrel{\\!_{\\scriptscriptstyle \\frac{(1-p)\\cdot q}{1-p\\cdot q}}\\oplus } } r)\\\\        { \\ensuremath{\\mathbf{(i1 ) } } }             & p { \\mathrel{\\sqcap}}p&{= } & p\\\\        { \\ensuremath{\\mathbf{(i2 ) } } }             & p { \\mathrel{\\sqcap}}q&{= } & q { \\mathrel{\\sqcap}}p\\\\        { \\ensuremath{\\mathbf{(i3 ) } } }             & ( p { \\mathrel{\\sqcap}}q ) { \\mathrel{\\sqcap}}r&{= } & p { \\mathrel{\\sqcap}}(q { \\mathrel{\\sqcap}}r)\\\\        { \\ensuremath{\\mathbf{(e1 ) } } }             & p { \\mathrel{\\box}}{\\mathop{\\textbf{\\textsf{0}}}}&{= } & p\\\\        { \\ensuremath{\\mathbf{(e2 ) } } }             & p { \\mathrel{\\box}}q&{= } & q { \\mathrel{\\box}}p\\\\        { \\ensuremath{\\mathbf{(e3 ) } } }             & ( p { \\mathrel{\\box}}q ) { \\mathrel{\\box}}r&{= } & p { \\mathrel{\\box}}(q { \\mathrel{\\box}}r)\\\\        { \\ensuremath{\\mathbf{(ei ) } } }             & a.p { \\mathrel{\\box}}a.q&{= } & a.p { \\mathrel{\\sqcap}}a.q\\\\        { \\ensuremath{\\mathbf{(d1 ) } } }             & p { \\mathrel{\\box}}(q { \\mathrel{\\!_{\\scriptscriptstyle p}\\oplus } } r)&{= } & ( p { \\mathrel{\\box}}q ) { \\mathrel{\\!_{\\scriptscriptstyle p}\\oplus } } ( p { \\mathrel{\\box}}r)\\\\        { \\ensuremath{\\mathbf{(d2 ) } } }             &   a.p { \\mathrel{\\box}}(q { \\mathrel{\\sqcap}}r )   & { = } & ( a.p { \\mathrel{\\box}}q ) { \\mathrel{\\sqcap}}(a.p { \\mathrel{\\box}}r ) \\\\",
    "{ \\ensuremath{\\mathbf{(d3 ) } } }             & ( p_1 { \\mathrel{\\sqcap}}p_2 ) { \\mathrel{\\box}}(q_1 { \\mathrel{\\sqcap}}q_2)&{= } &                               ( p_1 { \\mathrel{\\box}}(q_1 { \\mathrel{\\sqcap}}q_2 ) ) { \\mathrel{\\sqcap}}(p_2 { \\mathrel{\\box}}(q_1 { \\mathrel{\\sqcap}}q_2 ) ) \\\\                            & & & \\quad{\\mathrel{\\sqcap}}((p_1 { \\mathrel{\\sqcap}}p_2 ) { \\mathrel{\\box}}q_1 ) { \\mathrel{\\sqcap}}((p_1 { \\mathrel{\\sqcap}}p_2 ) { \\mathrel{\\box}}q_2)\\\\     \\end{array}\\!\\!\\!\\!\\!\\ ] ]    having settled the problem of characterising the may preorder in terms of simulation , and the must preorder in terms of failure simulation , we now turn to complete axiomatisations of the preorders .    in order to focus on the essentials we consider just those @xmath0processes that do not use the parallel operator @xmath61",
    "; we call the resulting sub - language @xmath689 . for a brief discussion of the axiomatisation for terms involving @xmath61 and the other parallel operators commonly used in @xmath690see section  [ sec :",
    "conc ] .",
    "let us write @xmath691 for equivalences that can be derived using the equations given in figure  [ fig : cequations ] .",
    "given the way we defined the syntax of @xmath0 , axiom @xmath692 is merely a case of abbreviation - expansion ; thanks to @xmath692 there is no need for ( meta-)variables ranging over the sub - sort of state - based processes anywhere in the axioms .",
    "many of the standard equations for @xmath690@xcite are missing ; they are not sound for @xmath220 .",
    "typical examples include : @xmath693 for a detailed discussion of the standard equations for @xmath690 in the presence of probabilistic processes see section 4 of @xcite .",
    ". then @xmath694 .",
    "because of proposition  [ prp : cong ] , that @xmath15 is a precongruence , it is sufficient to exhibit witness failure simulations for the axioms in figure  [ fig : cequations ] .",
    "these are exactly the same as the witness simulations for the same axioms , given in @xcite . the only axiom for which it is nontrivial to check that these simulations are in fact failure simulations is @xmath695 .",
    "that axiom , as stated in @xcite , is unsound here ; it will return in the next section as @xmath696 .",
    "but the special case of @xmath697 yields the axiom @xmath695 above , and then the witness simulation from @xcite is a failure simulation indeed .",
    "as @xmath219 is a less discriminating equivalence than @xmath220 it follows that @xmath691 implies @xmath698 .",
    "this equational theory allows us to reduce terms to a form in which the external choice operator is applied to prefix terms only .",
    "the set of _ normal forms _",
    "@xmath699 is given by the following grammar : @xmath700    [ p : nf ] for every @xmath701 there is a normal form @xmath699 such that @xmath702 .",
    "a fairly straightforward induction , heavily relying on @xmath692@xmath703 .",
    "we can also show that the axioms @xmath704@xmath705 and @xmath692 are in some sense all that are required to reason about probabilistic choice .",
    "let @xmath706 denote that equivalence of @xmath30 and @xmath31 can be derived using those axioms alone .",
    "then we have the following property .",
    "[ lem : prob ] let @xmath707 .",
    "then @xmath124 } } = { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] implies @xmath706 .",
    "here @xmath124 } } = { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } }",
    "$ ] says that @xmath124}}$ ] and @xmath242}}$ ] are the very same distributions of state - based processes in @xmath708 ; this is a much stronger prerequisite than @xmath30 and @xmath31 being testing equivalent .",
    "the axioms @xmath704@xmath705 and @xmath692 essentially allow any processes to be written in the unique form @xmath709 , where the @xmath710 are all different .",
    "_ may : _ @xmath688{@{}lrl@ { } }        { \\ensuremath{\\mathbf{(may0 ) } } }             & a.p { \\mathrel{\\box}}b.q & = ~ a.p { \\mathrel{\\sqcap}}b.q\\\\        { \\ensuremath{\\mathbf{(may1 ) } } }             &   p & \\sqsubseteq~ p { \\mathrel{\\sqcap}}q\\\\        { \\ensuremath{\\mathbf{(may2 ) } } }             &   { \\mathop{\\textbf{\\textsf{0 } } } } & \\sqsubseteq~   p \\\\       { \\ensuremath{\\mathbf{(may3 ) } } }             & a.(p { \\mathrel{\\!_{\\scriptscriptstyle p}\\oplus } } q)&\\sqsubseteq~ a.p { \\mathrel{\\!_{\\scriptscriptstyle p}\\oplus } } a.q\\\\     \\end{array}\\ ] ]    _ must : _ @xmath688{@{}lrl@ { } } { \\ensuremath{\\mathbf{(must1 ) } } }   & p { \\mathrel{\\sqcap}}q   & \\sqsubseteq~ q\\\\ { \\ensuremath{\\mathbf{(must2 ) } } }   & \\displaystyle r { \\mathrel{\\sqcap}}\\bigsqcap_{i\\in i}\\bigoplus_{j\\in j_i}p_j                     { \\mathord\\cdot}(a_i.q_{ij } { \\mathrel{\\box}}p_{ij } ) & \\displaystyle\\sqsubseteq~                     \\bigbox_{i\\in i } a_i.\\bigoplus_{j\\in j_i}p_j { \\mathord\\cdot}q_{ij},\\\\ & \\text{\\tiny provided } & \\mathord{{\\mathrel{\\textit{inits}(r ) } } } \\subseteq { \\ { { a_i }   \\ }   } _ { i\\in i}\\\\     \\end{array}\\ ] ]    in order to characterise the simulation preorders , and the associated testing preorders , we introduce _",
    "inequations_. we write @xmath711 when @xmath712 is derivable from the inequational theory obtained by adding the four _ may _ inequations in figure  [ fig : inequations ] to the equations in figure  [ fig : cequations ] .",
    "the first three additions , @xmath696@xmath713 , are used in the standard testing theory of @xmath690@xcite .",
    "for the _ must _ case , in addition to the standard inequation @xmath714 , we require an inequational schema , @xmath715 ; this uses the notation @xmath716 to denote the ( finite ) set of initial actions of @xmath30 .",
    "formally , @xmath717 the axiom @xmath715 can equivalently be formulated as follows : @xmath718 @xmath719 this is the case because a term @xmath301 satisfies @xmath720 iff it can be converted into the form @xmath721 by means of axioms @xmath692 , @xmath704@xmath705 and @xmath722@xmath723 of figure  [ fig : inequations ] .",
    "this axiom can also be reformulated in an equivalent but more semantic style : @xmath688{@{}lrl@ { } } { \\ensuremath{\\mathbf{(must2 ' ) } } } & r { \\mathrel{\\sqcap}}\\bigsqcap_{i\\in i}p_i & \\sqsubseteq~                      \\bigbox_{i\\in i } a_i.q_i,\\\\[3pt ] & \\text{\\tiny provided}~~   { \\mbox{\\bbb [ } p_i\\mbox{\\bbb ] } } { \\mathrel{\\goesto[{a_i}]}}{\\mbox{\\bbb [ } q_i\\mbox{\\bbb ] } } & \\text{\\tiny and}~~        { \\mbox{\\bbb [ } r\\mbox{\\bbb ] } } { \\mathrel{\\ngoesto[{x\\ ; } ] } } \\mbox { with }                            x={\\ensuremath{\\mathsf{act}}\\xspace}\\backslash{\\ { { a_i }   \\ }   } _ { i\\in i}.       \\end{array}\\ ] ] this is the case because @xmath124}}{\\mathrel{\\goesto[{a}]}}{\\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] iff , up to the axioms in figure  [ fig : cequations ] , @xmath30 has the form @xmath724 and @xmath31 has the form @xmath725 for certain @xmath726 , @xmath727 and @xmath728 , for @xmath729 .",
    "note that @xmath715 can be used , together with @xmath730 , to derive the dual of @xmath731 via the following inference : @xmath732 where we write @xmath733 when @xmath712 is derivable from the resulting inequational theory .",
    "an important inequation that follows from @xmath734 and @xmath704 is @xmath735 saying that any probabilistic choice can be simulated by an internal choice .",
    "it is derived as follows : @xmath736 likewise , we have @xmath737    [ thm : complete ] for @xmath738 in @xmath689 , it holds that    1 .",
    "@xmath21 if and only if @xmath711 2 .",
    "@xmath23 if and only if @xmath733 .    for one direction it is sufficient to check that the inequations , and the inequational schema in figure  [ fig : inequations ] are sound . for @xmath14",
    "this has been done in @xcite , and the soundness of @xmath714 and @xmath739 for @xmath15 is trivial .",
    "the converse , completeness , is established in the next section .",
    "the completeness proof of theorem  [ thm : complete ] depends on the following variation on the _ derivative lemma _ of @xcite :    let @xmath707 .    1 .   if @xmath124 } } { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$ } ] } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] then @xmath733 and @xmath740 .",
    "2 .   if @xmath124 } } { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$a$ } ] } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] then @xmath741 .",
    "the proof of ( i ) proceeds in four stages",
    ". we only deal with @xmath742 , as the proof for @xmath743 is entirely analogous .",
    "first we show by structural induction on @xmath744 that @xmath184 } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] implies @xmath745 .",
    "so suppose @xmath184 } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] . in case",
    "@xmath19 has the form @xmath746 it follows by the operational semantics of @xmath747 that @xmath748 or @xmath749 .",
    "hence @xmath745 by @xmath750 .",
    "the only other possibility is that @xmath19 has the form @xmath751 . in that case",
    "there must be a distribution @xmath6 such that either @xmath752 } } \\delta$ ] and @xmath242 } } = \\delta { \\mathrel{\\box}}s_2 $ ] , or @xmath753 } } \\delta$ ] and @xmath242 } } = s_1 { \\mathrel{\\box}}\\delta$ ] .",
    "using symmetry , we may restrict attention to the first case .",
    "let @xmath301 be a term such that @xmath754}}=\\delta$ ] .",
    "then @xmath755 } } = \\delta { \\mathrel{\\box}}s_2 = { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] , so lemma  [ lem : prob ] yields @xmath756 . by induction",
    "we have @xmath757 , hence @xmath758 , and thus @xmath745 .",
    "now we show that @xmath183 } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] implies @xmath745 .",
    "this follows because @xmath183 } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] means that either @xmath759}}{\\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] or @xmath242}}={\\overline{s }   } $ ] , and in the latter case lemma  [ lem : prob ] yields @xmath760 .    next we show that @xmath124 } } { \\mathrel{\\goesto[{\\hat{\\tau } } ] } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] implies @xmath740 .",
    "so suppose @xmath124 } } { \\mathrel{\\goesto[{\\hat{\\tau } } ] } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] , that is @xmath761}}=\\sum_{i\\in i}p_i \\cdot { \\overline{s_i }   }    \\qquad s_i { \\mathrel{\\goesto[\\hat{{\\tau } } ] } } { \\mbox{\\bbb [ } q_i\\mbox{\\bbb ] } }    \\qquad { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } = \\sum_{i\\in i}p_i \\cdot { \\mbox{\\bbb [ } q_i\\mbox{\\bbb ] } } \\ ] ] for some @xmath83 , @xmath762 $ ] , @xmath763 and @xmath764 .",
    "now    1 .   @xmath124}}={\\mbox{\\bbb [ } \\bigoplus_{i\\in i}p_i { \\mathord\\cdot}s_i\\mbox{\\bbb ] } } $ ]",
    "by lemma  [ lem : prob ] we have @xmath765 .",
    "2 .   @xmath242}}={\\mbox{\\bbb [ } \\bigoplus_{i\\in i}p_i { \\mathord\\cdot}q_i\\mbox{\\bbb ] } } $ ] .",
    "again lemma  [ lem : prob ] yields @xmath766 .",
    "3 .   @xmath767 } } { \\mbox{\\bbb [ } q_i\\mbox{\\bbb ] } } $ ] implies @xmath768 .",
    "therefore , @xmath769 .    combining ( 1 ) , ( 2 ) and ( 3 )",
    "we obtain @xmath770 .    finally , the general case , when @xmath124 } } { \\mathrel{\\goesto[{\\hat{\\tau}}]}}^ * \\delta$ ] , is now a simple inductive argument on the length of the derivation .",
    "the proof of ( ii ) is similar : first we treat the case when @xmath771 } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] by structural induction , using @xmath713 ; then the case @xmath124 } } { \\mathrel{\\goesto[{a } ] } } { \\mbox{\\bbb [ } q\\mbox{\\bbb ] } } $ ] , exactly as above ; and finally use part ( i ) to derive the general case .",
    "the completeness result now follows from the following two propositions .",
    "[ prop : maycomplete ] let @xmath30 and @xmath31 be in @xmath689",
    ". then @xmath21 implies @xmath711 .",
    "the proof is by structural induction on @xmath30 and @xmath31 , and we may assume that both @xmath30 and @xmath31 are in normal form because of proposition  [ p : nf ] .",
    "so take @xmath565 and suppose the claim has been established for all subterms @xmath772 of @xmath30 and @xmath773 of @xmath31 , of which at least one of the two is a strict subterm .",
    "we start by proving that if @xmath774 then we have @xmath775 } } \\quad\\mbox{implies}\\quad p { \\mathrel{\\sqsubseteq_{e_\\textrm{\\rm may}}}}q.\\ ] ] there are two cases to consider .    1 .",
    "@xmath30 has the form @xmath746 . since @xmath776 we know @xmath777 .",
    "we use induction to obtain @xmath778 , from which the result follows using @xmath730 .",
    "@xmath30 has the form @xmath779 .",
    "if @xmath83 contains two or more elements then @xmath30 may also be written as @xmath780 , using @xmath696 and @xmath781 , and we may proceed as in case ( 1 ) above .",
    "if @xmath83 is empty , that is @xmath30 is @xmath56 , then we can use @xmath713 .",
    "so we are left with the possibility that @xmath30 is @xmath782 .",
    "thus suppose that @xmath783}}$ ] .",
    "we proceed by a case analysis on the structure of @xmath31 .",
    "1 .   @xmath31 is @xmath784 .",
    "we know from @xmath785}}$ ] that @xmath786 } } { \\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}\\theta$ ] for some @xmath322 with @xmath787}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}\\theta$ ] , thus @xmath788 .",
    "therefore , we have @xmath789 by induction .",
    "it follows that @xmath790 .",
    "2 .   @xmath31 is @xmath791 with at least two elements in @xmath491 .",
    "we use @xmath696 and then proceed as in the next case .",
    "3 .   @xmath31 is @xmath792 .",
    "we know from @xmath793}}$ ] that @xmath786 } } { \\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}\\theta$ ] for some @xmath322 such that one of the following two conditions holds a.   @xmath794}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$a$}]}}\\theta$ ] for @xmath795 or @xmath796 .",
    "in this case , @xmath797}}$ ] , hence @xmath798 . by induction",
    "we have @xmath799 ; then we apply @xmath734 .",
    "b.   @xmath800}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$a$}]}}\\theta_1 $ ] and @xmath801}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$a$}]}}\\theta_2 $ ] such that @xmath802 for some @xmath803 .",
    "let @xmath804}}$ ] for @xmath259 . by the derivative lemma",
    ", we have @xmath805 and @xmath806 . clearly , @xmath807}}=\\theta$ ] , thus @xmath808 . by induction",
    ", we infer that @xmath809 .",
    "so @xmath810 4 .",
    "@xmath31 is @xmath811 .",
    "we know from @xmath812}}$ ] that @xmath786 } } { \\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}\\theta$ ] for some @xmath322 such that @xmath813}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$a$}]}}\\theta$ ] . from lemma  [ lem : sum ] we know that @xmath322 must take the form @xmath814}}+(1-p)\\cdot{\\mbox{\\bbb [ } q'_2\\mbox{\\bbb ] } } $ ] , where @xmath794}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$a$}]}}{\\mbox{\\bbb [ } q'_i\\mbox{\\bbb ] } } $ ] for @xmath259 .",
    "hence @xmath808 , and by induction we get @xmath815",
    ". then we can derive @xmath816 as in the previous case .",
    "now we use ( [ forsimcomplete ] ) to show that @xmath21 implies @xmath711 .",
    "suppose @xmath21 .",
    "applying definition  [ def : simulation preorder ] with the understanding that any distribution @xmath817 can be written as @xmath787}}$ ] for some @xmath818 , this means that @xmath124 } } { \\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}{\\mbox{\\bbb [ } q'\\mbox{\\bbb ] } } $ ] for some @xmath242}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}{\\mbox{\\bbb [ } q'\\mbox{\\bbb ] } } $ ] .the derivative lemma yields @xmath819 .",
    "so it suffices to show @xmath820 .",
    "we know that @xmath124 } } { \\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}}}}{\\mbox{\\bbb [ } q'\\mbox{\\bbb ] } } $ ] means that @xmath761}}=\\sum_{k\\in k}r_k \\cdot { \\overline{t_k }   }    \\qquad t_k { \\mathrel{\\lhd_{\\raisebox{-.1em}{\\tiny\\it s}}}}{\\mbox{\\bbb [ } q'_k\\mbox{\\bbb ] } }    \\qquad { \\mbox{\\bbb [ } q'\\mbox{\\bbb ] } } = \\sum_{k\\in k}r_k \\cdot { \\mbox{\\bbb [ } q'_k\\mbox{\\bbb ] } } \\ ] ] for some @xmath821 , @xmath822 $ ] , @xmath823 and @xmath824 .",
    "now    1 .   @xmath124}}={\\mbox{\\bbb [ } \\bigoplus_{k\\in k}r_k { \\mathord\\cdot}t_k\\mbox{\\bbb ] } } $ ] . by lemma",
    "[ lem : prob ] we have @xmath825 .",
    "2 .   @xmath787}}={\\mbox{\\bbb [ } \\bigoplus_{k\\in k}r_k { \\mathord\\cdot}q'_k\\mbox{\\bbb ] } } $ ] .",
    "again lemma  [ lem : prob ] yields @xmath826 .",
    "3 .   @xmath827}}$ ] implies @xmath828 by ( [ forsimcomplete ] ) .",
    "therefore , @xmath829 .    combining ( 1 ) , ( 2 ) and ( 3 ) we obtain @xmath830 ,",
    "hence @xmath831 .",
    "[ prop : mustcomplete ] let @xmath30 and @xmath31 be in @xmath689",
    ". then @xmath23 implies @xmath733 .",
    "similar to the proof of proposition  [ prop : maycomplete ] , but using a reversed orientation of the preorders .",
    "the only real difference is the case ( 2 ) , which we consider now .",
    "so assume @xmath832}}$ ] , where @xmath31 has the form @xmath833 .",
    "let @xmath20 be any set of actions such that @xmath834 ; then @xmath835}}$ ] .",
    "therefore , there exists a @xmath772 such that @xmath124}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}{\\mbox{\\bbb [ } p'\\mbox{\\bbb ] } } { \\mathrel{\\ngoesto[{x\\;}]}}$ ] . by the derivative lemma , @xmath836 since @xmath837}}{\\mbox{\\bbb [ } q_i\\mbox{\\bbb ] } } $ ]",
    ", there exist @xmath838 such that @xmath124}}{\\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}{\\mbox{\\bbb [ } pi\\mbox{\\bbb ] } } { \\mathrel{\\goesto[{a_i}]}}{\\mbox{\\bbb [ } p'_i\\mbox{\\bbb ] } } { \\mathrel{\\goesto[\\raisebox{.08em}{\\scriptsize$\\hat{\\tau}$}]}}{\\mbox{\\bbb [ } p''_i\\mbox{\\bbb ] } } $ ] and @xmath794}}{\\mathrel{{\\mathrel{\\overline{\\lhd_{\\raisebox{-.1em}{\\tiny\\it fs}}}}}}}{\\mbox{\\bbb [ } p''_i\\mbox{\\bbb ] } } $ ] . now",
    "@xmath839 using the derivative lemma , and @xmath840 , by definition  [ def : simulation preorder ] . by induction , we have @xmath841 , hence @xmath842 the desired result is now obtained as follows : + @xmath843{cl@{\\quad}l}\\displaystyle p & \\displaystyle { \\mathrel{\\sqsubseteq_{e_\\textrm{\\rm must}}}}~ p'{\\mathrel{\\sqcap}}\\bigsqcap_{i\\in i}p_i &                            \\mbox{by { \\ensuremath{\\mathbf{(i1 ) } } } , ( \\ref{e : ref } ) and ( \\ref{e : act})}\\\\    & \\displaystyle { \\mathrel{\\sqsubseteq_{e_\\textrm{\\rm must}}}}~ \\bigbox_{i\\in i}a_i.p'_i & \\mbox{by { \\ensuremath{\\mathbf{(must2')}}}}\\\\    & \\displaystyle { \\mathrel{\\sqsubseteq_{e_\\textrm{\\rm must}}}}~ \\bigbox_{i\\in i}a_i.q_i   & \\mbox{by ( \\ref{e : actm } ) } \\end{array}$ ]    propositions  [ prop : maycomplete ] and  [ prop : mustcomplete ] give us the completeness result stated in theorem  [ thm : complete ] .",
    "in this paper we continued our previous work @xcite in our quest for a testing theory for processes which exhibit both nondeterministic and probabilistic behaviour .",
    "we have studied three different aspects of may- and must testing preorders for finite processes : ( i ) we have shown that the may preorder can be characterised as a co - inductive simulation relation , and the must preorder as a failure simulation relation ; ( ii ) we have given a characterisation of both preorders in a finitary modal logic ; and ( iii ) we have also provided complete axiomatisations for both preorders over a probabilistic version of recursion - free csp .",
    "although we omitted our parallel operator @xmath61 from the axiomatisations , it and similar csp and ccs - like parallel operators can be handled using standard techniques , in the must case at the expense of introducing auxiliary operators . in future work",
    "we hope to extend these results to recursive processes .",
    "we believe these results , in each of the three areas , to be novel , although a number of partial results along similar lines exist in the literature .",
    "these are detailed below .",
    "[ [ related - work ] ] * related work : * + + + + + + + + + + + + + + +    early additions of probability to csp include work by lowe @xcite , seidel @xcite and morgan et al .  @xcite ; but all of them were forced to make compromises of some kind in order to address the potentially complicated interactions between the three forms of choice .",
    "the last @xcite for example applied the jones / plotkin probabilistic powerdomain @xcite directly to the failures model of csp @xcite , the resulting compromise being that probability distributed outwards through all other operators ; one controversial result of that was that internal choice was no longer idempotent , and that it was `` clairvoyant '' in the sense that it could adapt to probabilistic - choice outcomes that had not yet occurred .",
    "mislove addressed this problem in @xcite by presenting a denotational model in which internal choice distributed outwards through probabilistic choice .",
    "however , the distributivities of both @xcite and @xcite constitute identifications that can not be justified by our testing approach ; see @xcite .    in jou and smolka @xcite , as in @xcite , probabilistic equivalences based on traces , failures and readies are defined .",
    "these equivalences are coarser than @xmath844 . for example",
    ", the two processes in example  [ ex:1 ] can not be distinguished by the equivalences of @xcite .",
    "however , we can tell them apart by the test given in example  [ ex:2 ] .",
    "probabilistic extensions of testing equivalences @xcite have been widely studied .",
    "there are two different proposals on how to include probabilistic choice : ( i ) a test should be non - probabilistic , that is there is no occurrence of probabilistic choice in a test @xcite ; or ( ii ) a test can be probabilistic , that is probabilistic choice may occur in tests as well as processes @xcite .",
    "this paper adopts the second approach .",
    "some work @xcite does not consider nondeterminism but deals exclusively with _ fully probabilistic _ processes . in this setting a process passes a test with a unique probability instead of a set of probabilities , and testing preorders in the style of @xcite have been characterised in terms of _ probabilistic traces _",
    "@xcite and _ probabilistic acceptance trees _ @xcite .",
    "cazorla et al .",
    "@xcite extended the results of @xcite with nondeterminism , but suffered from the same problems as @xcite .",
    "the work most closely related to ours is @xcite . in @xcite jonsson and",
    "wang characterised may- and must - testing preorders in terms of `` chains '' of traces and failures , respectively , and in @xcite they presented a `` substantially improved '' characterisation of their may - testing preorder using a notion of simulation which is weaker than @xmath14 ( cf .  definition  [ def : simulation preorder ] ) .",
    "they only considered processes without @xmath70-moves .",
    "in @xcite we have shown that tests with internal moves can distinguish more processes than tests without internal moves , even when applied to processes that have no internal moves themselves .",
    "segala @xcite defined two preorders called trace distribution precongruence ( @xmath845 ) and failure distribution precongruence ( @xmath846 ) .",
    "he proved that the former coincides with an infinitary version of @xmath9 ( cf .  definition  [ def : vector - testing ] ) and that the latter coincides with an infinitary version of [ 0pt][0pt]@xmath10 .",
    "in @xcite it has been shown that @xmath845 coincides with a notion of simulation akin to @xmath14 .",
    "other probabilistic extensions of simulation occurring in the literature are reviewed in @xcite .",
    "a _ probabilistic automaton _ consists of a plts @xmath847 and a distribution @xmath848 over @xmath50 .",
    "since we only consider probabilistic automata with @xmath849 , we omit it and write a probabilistic automaton simply as a triple @xmath850 and call @xmath848 the _ initial distribution _ of the automaton .",
    "the operational semantics of a [ 0pt][0pt]@xmath391 process @xmath30 can thus be viewed as a probabilistic automaton with initial distribution @xmath851}}$ ] .",
    "states in a probabilistic automata that are not reachable from the initial distribution are generally considered irrelevant and can be omitted .    a probabilistic automaton is called _ finite _ if there exists a function @xmath852 such that @xmath853 implies @xmath854 and @xmath338 } } \\delta$ ] implies @xmath855 .",
    "finite probabilistic automata can be drawn as explained at the end of section  [ sec : pcsp ] .",
    "a _ fully probabilistic automaton _ is one in which each state enables at most one action , and ( general ) probabilistic automata can be `` resolved '' into fully probabilistic automata by pruning away multiple action - choices until only single choices are left , possibly introducing some linear combinations in the process .",
    "we define this formally for probabilistic automata representing @xmath391expressions .",
    "note that resolutions of distributions @xmath866 are always finite .",
    "we define a function which yields the probability that a given fully probabilistic automaton will start with a particular sequence of actions .",
    "@xcite given a fully probabilistic automaton @xmath867 , the probability that @xmath868 follows the sequence of actions @xmath869 from its initial distribution is given by @xmath870 , where @xmath871 $ ] is defined inductively by @xmath872}}\\delta$}\\\\ 0 & \\mbox{otherwise } \\end{array}\\right.\\ ] ] and @xmath873 . here",
    "@xmath874 denotes the empty sequence of actions and @xmath875 the sequence starting with @xmath876 and continuing with @xmath869 .",
    "the value @xmath877 is the probability that @xmath868 proceeds with sequence @xmath878 from state @xmath879 .",
    "now let @xmath880 be the set of finite sequences in @xmath881 that contain @xmath122 exactly once , and that at the end .",
    "then the probability that the fully probabilistic automaton @xmath868 ever performs an action @xmath122 is given by @xmath882 .",
    "we relate these sets of tuples to definition  [ def : vector - testing ] , in which similar sets are produced `` all at once , '' that is without introducing resolutions first .",
    "in fact we will find that they are the same .",
    "note that definition  [ def : vector - testing ] of @xmath404 extends smoothly to states and distributions in probabilistic automata . when applied to fully probabilistic automata",
    ", [ 0pt][0pt]@xmath404 always yields singleton sets , which we will loosely identify with their unique members ; thus when we write [ 0pt][0pt]@xmath887 with @xmath6 a distribution in a fully probabilistic automaton , we actually mean the @xmath148-component of the unique element of [ 0pt][0pt]@xmath888 .",
    "_ ( 1 ) is immediate : since the automaton is fully probabilistic , convex closure has no effect . for ( 2 )",
    "we need to show that for all @xmath390 we have @xmath893 , i.e.  that @xmath894 .",
    "so let @xmath390 .",
    "we show @xmath895 for all @xmath896 and @xmath897 , by simultaneous induction on the depths of @xmath6 and @xmath879 .    1 .   in the base case @xmath879 has no enabled actions",
    ". then @xmath898 and @xmath899 , so @xmath900 .",
    "2 .   now suppose there is a transition @xmath860}}\\delta$ ] for some action @xmath122 and distribution @xmath6 . there are two possibilities : 1 .",
    "we then have @xmath902 .",
    "now for any finite non - empty sequence @xmath878 without any occurrence of @xmath148 we have @xmath903 . thus @xmath904 as required .",
    "2 .   @xmath905 . since @xmath906",
    ", we have @xmath907 . on the other hand , @xmath908 for @xmath909 .",
    "therefore @xmath910 3 .   finally , @xmath911 .            1 .",
    "let @xmath857 be a resolution of @xmath848 with resolving function @xmath100 .",
    "we observe that for any @xmath915 we have @xmath916 because @xmath917 we now prove by induction on @xmath918 that @xmath919 , from which the required result follows in view of ( [ eq : obs ] ) and the fact that @xmath859 .",
    "1 .   in the base case",
    "we have @xmath862 , which implies @xmath863 .",
    "therefore , we have @xmath920 .",
    "2 .   otherwise @xmath879 has a transition @xmath860}}\\theta$ ] for some @xmath122 and @xmath322 . by induction",
    "we have @xmath921 for all @xmath922 . using ( [ eq : obs ] ) we get @xmath923 .",
    "now @xmath924 where the last step follows from the fact that @xmath861}}f(\\theta)$ ] is one of the transitions of @xmath925 .",
    "this clause is proved by induction on @xmath926 .",
    "first consider the special case that @xmath848 is a point distribution on some state @xmath19 .",
    "1 .   in the base case",
    "we have @xmath346 .",
    "the probabilistic automaton @xmath927 is a resolution of @xmath928 with the resolving function being the identity .",
    "clearly , this resolution satisfies our requirement .",
    "otherwise there is a finite , non - empty index set @xmath83 such that @xmath929}}\\delta_i$ ] for some actions @xmath930 and distributions @xmath91 .",
    "if [ 0pt][0pt]@xmath931 , then by the definition of [ 0pt][0pt]@xmath404 we have @xmath932 with [ 0pt][0pt]@xmath933 and @xmath80 for some @xmath934 $ ] . by induction , for each @xmath500 there is a resolution @xmath935 of @xmath91 with resolving function @xmath936 such that [ 0pt][0pt]@xmath937 . without loss of generality , we assume that @xmath938 is disjoint from @xmath939 for @xmath940 , as well as from @xmath941 .",
    "we now construct a fully probabilistic automaton @xmath942 as follows : 1 .   @xmath943 2 .",
    "@xmath944 3 .",
    "@xmath945}}\\theta_i^\\circ\\mid i\\in    i }   \\ }   } \\cup\\bigcup_{i\\in i } \\rightarrow_i$ ] .",
    "+ this automaton is a resolution of @xmath946 with resolving function @xmath100 defined by @xmath947 the resolution thus constructed satisfies our requirement because @xmath948 + we now consider the general case that @xmath848 is a proper distribution with @xmath949 for some finite index set @xmath491 . using the reasoning in the above special case , we have a resolution @xmath950 of each distribution @xmath951 . without loss of generality , we assume that @xmath939 is disjoint from @xmath952 for @xmath953 .",
    "consider the probabilistic automaton @xmath954 .",
    "it is a resolution of @xmath848 satisfying our requirement . if @xmath913 then @xmath955 with @xmath956 . since @xmath957",
    ", we have [ 0pt][0pt]@xmath958 ."
  ],
  "abstract_text": [
    "<S> in 1992 wang & larsen extended the may- and must preorders of de nicola and hennessy to processes featuring probabilistic as well as nondeterministic choice . </S>",
    "<S> they concluded with two problems that have remained open throughout the years , namely to find complete axiomatisations and alternative characterisations for these preorders . </S>",
    "<S> this paper solves both problems for finite processes with silent moves . </S>",
    "<S> it characterises the may preorder in terms of simulation , and the must preorder in terms of failure simulation . </S>",
    "<S> it also gives a characterisation of both preorders using a modal logic . </S>",
    "<S> finally it axiomatises both preorders over a probabilistic version of finite csp . </S>"
  ]
}