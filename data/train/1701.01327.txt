{
  "article_text": [
    "nowadays , most equity and derivative exchanges all over the world are using order - driven trading mechanisms : euronext , helsinki , hong kong , tokyo , toronto are pure order - driven markets and nyse , nasdaq , lse are hybrid markets  @xcite .",
    "different from a quote - driven market , where large market makers centralise buy and sell orders and provide liquidity to other market participants through setting the bid and ask quotes , an order - driven market is much more flexible , which allows all market participants to send buy or sell orders specifying the price and amount they want to trade into a limit order book ( lob ) .",
    "according to the classical terminology  ( * ? ? ?",
    "* section ii.b ) , orders leading to an immediate execution upon submission based on the lob s trade - matching algorithm are called market orders , while orders that do not result in an immediate execution and therefore are stored in the lob are called limit orders .",
    "the active limit orders can either get executed by subsequent counterpart market orders based on a certain priority rule or be cancelled .",
    "therefore , a lob can be understood as a collection of buy and sell limit orders stored at different price levels awaiting to be executed by counterpart market orders or cancellations . because of the popularity of the order - driven markets , many studies have recently been conducted on the optimal execution strategies in lobs .",
    "in fact , theoretical modelling of the complete dynamics of a lob is extremely complicated , and currently there is no clear consensus on a universal approach .",
    "this makes constructing an optimal trading strategy in a lob even more difficult and one has to rely on simplifying assumptions for the order book , as well as setting constraints on the admissible strategies .",
    "for example , obizhaeva  and  wang  @xcite and alfonsi , fruth and  schied  @xcite focus on the optimal execution strategies solely using market orders , assuming continuous price levels and exponential resilience of the lob .",
    "avellaneda  and  stoikov  @xcite and guilbaud  and  pham  @xcite construct an optimal market making policy for a small agent by assuming that the mid price of the asset is an exogenous markov process and the agent s limit orders are matched by the market counterparts at poisson rates .",
    "maglaras , moallemi and zheng  @xcite formulate an optimal liquidation strategy consisting of a limit order placement at inception together with block and flow market order submissions over a short time horizon .",
    "fodra  and  pham  @xcite model the asset price as a markov renewal process and derive an optimal market making strategy consisting of continuous placement of limit orders .",
    "nevmyvaka , feng and kearns  @xcite apply reinforcement learning to search for an optimal liquidation strategy by restricting the agent s actions to repositions of all the remaining inventory as a limit order and assuming the agent s actions do not change the lob state .",
    "the purpose of this paper is to formulate and solve a stylised optimal liquidation problem for an agent who wants to sell a pre - specified quantity of stocks over a fixed ( short ) trading window in a lob where the price - time priority mechanism is applied .",
    "information available to this agent contains historical order flows and states of the lob at the best prices ( ` level - i ' data ) .",
    "in particular , we are mostly interested in how different trading conditions ( lob state , inventory position , time to maturity ) impact the agent s decisions . in order to achieve this ,",
    "we first build up a ` level - i ' lob model describing the trading environment whose dynamics are driven by the general market participants order flows and exogenous information .",
    "realistic simplifying assumptions for this lob follow those in  @xcite , including unit order size , constant one - tick spread , poisson order flows , depletion of the best bid ( resp .",
    "ask ) queue moving the price one tick downward ( resp .",
    "upward ) and volumes at best prices after a price move regarded as stationary variables drawn from a joint distribution .",
    "we further develop this model by allowing the poisson rates of the order flows and the joint distribution determining the size of the volumes at the best prices after a price move to depend on the price move direction . under these assumptions",
    ", the evolution of this lob can be modelled as a markov renewal process  @xcite , whose transition mechanism is intuitively described by a queueing race between the volumes at the best prices .",
    "we then consider a risk - neutral agent who tries to maximise her expected terminal wealth by selling a fixed amount of stock within a fixed ( finite ) time horizon in this lob . in order to model the price - time priority rule and capture the execution of the agent s limit orders , the agent can only submit a market order at the best bid price and/or post a limit order at the best ask price immediately after the price moves , and her market orders never consume up the volumes at the best bid price .",
    "the agent s trading procedure is then formulated through a ( stationary ) semi - markov decision process within a finite horizon  @xcite , among a certain class of deterministic stationary policies . in general , at each price - change time , the optimal policy is a deterministic function which tells the agent the size of the market and limit order to trade based on the current lob state ( price move direction , volumes at the best prices ) , the agent s inventory position and time to maturity in order to achieve terminal wealth maximisation .",
    "this framework is particularly suitable for large - tick stocks ( see  ( * ? ? ?",
    "* section 4 ) for definition and selection criteria ) .",
    "indeed , the bid - ask spread of a lob for large - tick assets is almost always equal to one tick  @xcite and such a lob is in general fully occupied around the mid price .",
    "furthermore , based on the fact that only about @xmath0 to @xmath1 of market orders on large - tick stocks exceed the size of the best queue volume  @xcite , our constraints on the agent s market order strategy are reasonable .",
    "this paper is organised as follows . in section  [ sec :",
    "stylisedlob ] , we set the basic assumptions and illustrate the evolutional dynamics of a ` level - i ' lob and define the objective as well as the admissible trading strategy set for the agent . in section",
    "[ sec : tradingprocedure ] , a semi - markov decision process with a horizon - related deterministic stationary policy is introduced to model the agent s trading procedure and an optimal policy is defined . in section  [ section :",
    "semimarkovkernel ] , we provide an expression for the semi - markov kernel , which works as the transition mechanism of the semi - markov decision process .",
    "existence of the optimal policy are proved in section  [ section : optimalstrategy ] , and empirical studies show our numerical results in section  [ sec : empirical ] . + * notations:*[notations ] we shall use the following notations : @xmath2 , @xmath3 , @xmath4 , @xmath5 and @xmath6 . in this paper",
    ", @xmath7 is a fixed terminal time , and we denote @xmath8 $ ] and @xmath9 . for a continuous - time process  @xmath10 , denote  @xmath11 its first passage time to the origin , and  @xmath12 ( resp .",
    "@xmath13 ) the density ( resp .",
    "cumulative distribution function ) of  @xmath14 and , as usual @xmath15 .",
    "we consider a limit order book characterised by two resolution parameters as in  @xcite : the tick size  @xmath16 represents the smallest interval ( assumed constant ) between price levels , and the lot size ,  @xmath17 , specifies the smallest amount of the asset that can be traded .",
    "all buy and sell orders thus must arrive at a price  @xmath18 and with a size  @xmath19 , for some  @xmath20 . throughout this paper",
    "we shall work with the following modelling assumptions for the limit order book :    [ ass : underlying ]     a.   [ ass : underlying1 ] orders from general market participants are of unit size , defined by  @xmath21 actual size ; b.   [ ass : underlying2 ] the spread of the limit order book is equal to the tick size  @xmath22 .    in particular , this limit order book is modelled on a ` level - i ' data , that is , the volumes and order flows at the best bid and ask prices .",
    "this is motivated by the fact that the imbalance between the order flows at the best bid and ask prices is shown to be a good predictor of the order book dynamics  @xcite , together with the fact that data at the best prices are more obtainable than the ` level - ii ' data .",
    "following  @xcite , we impose the following assumptions for the evolution of the limit order book :    [ ass : lobevolution ]    a.   [ ass : lobevolution1 ] whenever orders at the best bid ( resp",
    ". ask ) price are depleted , both the best bid and ask prices decrease ( resp .",
    "increase ) by one tick ; b.   [ ass : lobevolution3 ] immediately after each price increase ( resp .",
    "decrease ) , volumes at the best bid and ask prices are treated as random variables with joint distribution @xmath23 ( resp .",
    "@xmath24 $ ] ; for any  @xmath25 , @xmath26 ( resp .",
    "@xmath27 ) represents the probability that the best bid and ask queue contain  @xmath28 and  @xmath29 unit limit orders ( of actual size  @xmath30 and  @xmath31 ) , right after a price increase ( resp .",
    "decrease ) .",
    "assumption  [ ass : lobevolution ] presumes that the limit order book contains no empty level near mid price so that price changes are restricted to one tick , and that price changes are entirely due to exogenous information , in which case market participants swiftly readjust their order flows at the new best prices , as if a new state of the limit order book is drawn from its invariant distribution  @xcite .",
    "in other words , we rule out the possibility that depletion of the best bid ( resp .",
    "ask ) queue is followed by an insertion of buy ( resp . sell ) limit orders inside the spread , keeping the best bid and ask prices unchanged .",
    "modelling order flows from general market participants is based on the ` zero - intelligence ' approach  @xcite .",
    "[ ass : poissonorderflow]all order book events ( market orders , limit orders and cancellations ) from general market participants occur according to independent poisson processes , with parameters depending on the price move direction . to be more specific , taking order flows at the best ask price for example , during any period between a price increase ( resp .",
    "decrease ) and the next price change , the following mutually independent events happen :    a.   [ ass : poissonorderflow1 ] market buy orders arrive at independent , exponential times with rate @xmath32 ( resp .",
    "@xmath33 ) ; b.   [ ass : poissonorderflow2 ] limit sell orders arrive at independent , exponential times with rate @xmath34 ( resp .",
    "@xmath35 ) ; c.   [ ass : poissonorderflow3 ] cancellations of limit orders occur at independent , exponential times with rate @xmath36 ( resp .",
    "@xmath37 ) multiplied by the amount ( in unit size ) of the outstanding sell limit orders .",
    "we assume an analogous framework at the best bid price , with parameters @xmath38 .       *",
    "although the ` zero - intelligence ' model is not exactly compatible with empirical observations  @xcite , it still retains the major statistical features of limit order books while remaining computationally manageable . with the ` zero - intelligence ' hypothesis , the agent can easily characterise the dynamical properties of the limit order book from historical data without assuming behavioural assumptions or resorting to unobservable parameters for other market participants .",
    "* assumption  [ ass : poissonorderflow]([ass : poissonorderflow3 ] ) means that if there are  @xmath39 limit orders at the best ask ( resp .",
    "bid ) price , each of which can be cancelled at an exponential time with rate  @xmath40 ( resp .",
    "@xmath41 ) independently , and the overall cancellation rate is then  @xmath42 ( resp",
    ".  @xmath43 ) .      in the limit order book model introduced in section  [ subsec : lob basic assumption ] , we assume that the agent is risk - neutral and her goal is to maximise the expected wealth obtained through selling the stock of  @xmath44 unit size ( @xmath45 actual size ) within the finite horizon  @xmath46 .",
    "the following assumption describes the set of admissible trading strategies :    [ ass : admissibletradings ]     a.   [ itm : strategyfirst ] the agent can only trade immediately after a price change ; let  @xmath47 denote her  @xmath48-th decision epoch , namely the time of the  @xmath48-th price change ; @xmath49 and the last decision epoch before or at maturity is  @xmath50 , where  @xmath51 ; b.   [ itm : strategyfirst ] at maturity  @xmath52 , the agent is required to sell all the unexecuted stocks through a market order ; c.   [ itm : strategysecond ] at each decision epoch  @xmath47 , the agent observes the bid and ask queues , with volumes of  @xmath53 and @xmath54 unit size ; she can then post a sell limit order of  @xmath55 unit size at the best ask price and submit a sell market order of  @xmath56 unit size at the best bid price ; we assume that the best bid queue is never depleted by the agent , and that the agent is slow , meaning that her limit order ( of  @xmath55 unit size ) has less time priority upon submission than the limit orders from other market participants ( of  @xmath54 unit size ) ;",
    "d.   [ itm : strategythird ] the agent follows a ` no cancellation ' rule : she will not cancel her limit order unless the price goes down ; e.   [ itm : strategyfourth ] short selling is not allowed .",
    "restricting the agent s trading actions at price changes ( assumption  [ ass : admissibletradings ] ) might sound relatively strong , but is necessary to capture the time - priority rule and the executions of the agent s limit orders .",
    "we shall study later in section  [ sec : optimalstrategy ] how to define an optimal policy maximising the expected wealth at maturity  @xmath52 .",
    "a semi - markov decision model  ( * ? ? ?",
    "* chapter  7 ) is a dynamic system whose states are observed at random epochs , each of when an action is taken and a payoff incurs ( either as a lump sum at that epoch or at a rate continuously until the next epoch ) as a result of the action .",
    "it also satisfies the following two markovian properties :    1 .",
    "[ ass : mkv1]given the current state and the action at a given epoch , the time until the next epoch and the next state only depend on the current state and action ; 2 .",
    "[ ass : mkv2]the payoff incurred at any epoch depends only on the state and the action at that epoch .",
    "the semi - markov decision model well describes the agent s liquidation problem within our stylised limit order book : the limit order book with the agent s participation is a dynamic system , and the agent s selling action at each decision epoch may lead to a payoff .",
    "indeed , assumption  [ ass : admissibletradings ] enables us to track the state of this system merely at the decision epochs , and assumptions  [ ass : lobevolution ] , [ ass : poissonorderflow ] and  [ ass : admissibletradings ] ensure that the transition mechanism of the system is stationary and satisfies  * ( m@xmath57)*-*(m@xmath58)*. moreover , according to assumption  [ assumption : limitpayoffend ] , each payoff from the agent s matched limit order is allocated to the nearest incoming decision epoch in order to make the payoff as a lump sum . in section  [ sec : intosmdp ] , we define a ( stationary ) semi - markov decision model with lump - sum payoffs for the agent s liquidation procedure . in section",
    "[ sec : evolutionsmdp ] , we define a horizon - related deterministic stationary policy and illustrate the evolution of the semi - markov decision process . in section",
    "[ sec : vfoptimalstrategy ] , we give the definition of the expected reward function , the value function and the optimal policy for the agent s liquidation problem .      the semi - markov decision model with lump - sum payoffs and the finite - horizon constraint",
    "is defined as a six - tuple @xmath59 , where each element is defined below .",
    "fix  @xmath60 large enough .",
    "the state space  @xmath61 is the set of all pre - decision conditions of the system ( i.e. the limit order book with the agent s participation ) observed at each decision epoch .",
    "specifically , the system being in state  @xmath62 means that :    * the ask / bid price change is equal to  @xmath63 tick ; * the best bid ( resp . ask ) queue contains  @xmath53 ( resp .",
    "@xmath54 ) unit orders ; * the ask price is short , so that the stock price will never become negative . ]",
    "is equal to  @xmath64 ; * the executed part of the limit order posted by the agent at the previous decision epoch is of  @xmath65 unit size ; * the agent s remaining inventory position is of  @xmath66 unit size .",
    "the action space @xmath67 , with  @xmath68 , represents the set of trading strategies , that is , the amount ( in unit size ) of the market and limit order that the agent chooses to submit and post at the best bid and ask price respectively .",
    "the constant  @xmath69 ( resp .",
    "@xmath70 ) represents the maximum amount ( in unit size ) of a single market ( resp .",
    "limit ) order that the agent is allowed to trade . from assumption  [ ass : admissibletradings ] , the agent s admissible action space in state  @xmath71 is defined by @xmath72 so that the agent will never consume up the entire best bid queue nor short sell .",
    "the set of all feasible state - action pairs is denoted by  @xmath73 .      before introducing our next concept ,",
    "recall the following definition .",
    "[ def : kernel ] let  @xmath74 and  ( @xmath75 be real measurable spaces .",
    "a map  @xmath76 $ ] is called a sub - markov kernel on  @xmath77 given  @xmath78 if :    * for any  @xmath79 , @xmath80 is a measure on  @xmath81 with @xmath82 ; * for any  @xmath83 , @xmath84 is a borel measurable function .    in particular ,",
    "if  @xmath85 for all  @xmath79 , then @xmath86 is a markov kernel on  @xmath77 given  @xmath78 .",
    "furthermore , a map  @xmath87 $ ] is a semi - markov kernel on  @xmath88 given  @xmath78 if :    * for  @xmath89 , @xmath90 is non - decreasing , right - continuous and  @xmath91 ; * for  @xmath92 , @xmath93 is a sub - markov kernel on  @xmath77 given  @xmath78 ; * the limit  @xmath94 is a markov kernel on  @xmath77 given  @xmath78 .    in our model ,",
    "let  @xmath95 be a semi - markov kernel on @xmath96 given  @xmath97 , determining the ( stationary ) transition mechanism of the semi - markov decision process : for any  @xmath98 and  @xmath99 , given the state - action pair  @xmath100 at some decision epoch , the quantity as  @xmath101 . ]",
    "@xmath102 represents the ( joint ) probability that the time until the next decision epoch is less than or equal to  @xmath103 and the next system state is  @xmath104 .",
    "detailed computations are given in section  [ section : semimarkovkernel ] .",
    "the terminal kernel  @xmath105 is a sub - markov kernel on  @xmath106 given  @xmath107 , and describes the execution dynamics between the last decision epoch and the maturity : for any  @xmath108 , given the state - action pair  @xmath100 and the time to maturity  @xmath109 at some decision epoch means that it happens a period of time  @xmath110 after the maturity . ] , the quantity as  @xmath111 . ]",
    "@xmath111 represents the ( joint ) probability that the time until the next decision epoch is strictly larger than  @xmath112 and the executed part of the limit order up to the maturity is of  @xmath113 unit size .",
    "detailed computations are given in section  [ section : semimarkovkernel ] .",
    "[ rmk : tk ] according to our modelling framework , the terminal kernel satisfies the following properties :    * @xmath114 when  @xmath115 ; * @xmath116 when  @xmath117 ; * @xmath118 when  @xmath119 ;    for any  @xmath100 .      the periodical reward function  @xmath120 is defined as @xmath121 , \\qquad\\text{for all } ( e , \\alpha)\\in { \\mathcal{k } } , \\qquad\\qquad\\text{where } \\rho : = { \\varepsilon}\\sigma,\\ ] ] and represents the lump - sum payoff associated with a decision epoch given the state - action pair  @xmath122 . specifically , the definition   is given based on the following assumption that assigns the payoff from the matched part of the agent s limit order to the nearest incoming decision epoch .",
    "[ assumption : limitpayoffend ] for @xmath123 , the payoff from the matched limit order within the interval  @xmath124 is allocated at @xmath125 .",
    "assuming that the system is in state  @xmath126 and the agent takes action  @xmath127 at some decision epoch .",
    "she then earns an immediate payoff worth  @xmath128 from submitting the market order of  @xmath56 unit size at the best bid price  @xmath129 . on top of that",
    ", the matched limit order of @xmath65 unit size at the previous best ask price  @xmath130 entails a payoff worth  @xmath131 , which is allocated at the current decision epoch according to assumption  [ assumption : limitpayoffend ] .",
    "the terminal reward function @xmath132 is defined as @xmath133 - g\\left(y - m - { \\mathfrak{z}}\\right ) , \\qquad\\text{for all } ( e , \\alpha)\\in { \\mathcal{k}}\\text { and } { \\mathfrak{z}}\\in{\\mathbb{n}},\\ ] ] where the market impact function @xmath134 is of the form @xmath135 for a constant @xmath136 . for any  @xmath100 and  @xmath108",
    ", the quantity  @xmath137 represents the lump - sum payoff associated with the maturity  @xmath52 , given the state - action pair  @xmath122 at the last decision epoch , and the matched part of the agent s limit order between the last decision epoch and the maturity being of  @xmath113 unit size . particularly , the identity   is given based on the following assumption :    [ ass : trf ]    a.   [ ass : trfa]the payoff from the matched limit order obtained within the interval  @xmath138 is allocated at  @xmath52 ; b.   [ ass : trfb ] when depicting the market impact brought by the market order at maturity , we assume that the impact is linear with  @xmath139 representing the average depth ( in unit size ) on the bid side of the limit order book ; c.   [ ass : trfc ] the unexecuted shares at maturity can not sweep all the liquidity on the bid side of the limit order book , so that the terminal reward function is  @xmath140-valued .",
    "assumption  [ ass : trf ] yields the market impact function  @xmath141 in formula  . furthermore , based on assumption  [ ass : trf ] , the terminal reward  @xmath137 consists of the payoff from the matched limit order ( of amount  @xmath142 ) and the market order at maturity ( of amount  @xmath143 ) , deducted by the corresponding market impact ( of amount  @xmath144 ) .",
    "we assume that the agent applies a horizon - related deterministic stationary policy defined below , specifying a decision rule for her actions .",
    "a horizon - related deterministic stationary policy is a measurable function @xmath145 such that  @xmath146 for any  @xmath147 .",
    "we further denote by  @xmath148 the set of all horizon - related deterministic stationary policies .",
    "[ rem : stoptrading ] at the  @xmath48-th decision epoch , with system state  @xmath149 and time to maturity @xmath150 , an action  @xmath151 is given by the policy  @xmath152 .",
    "in particular , at any decision epoch  @xmath47 with @xmath153 ( namely  @xmath154 ) , the agent stops trading as @xmath155 , following assumption  [ ass : admissibletradings ] .",
    "table  [ tab : example of smdp ] summarises the evolution of the semi - markov decision model with a deterministic stationary policy  @xmath152 .",
    "suppose that the system is in state  @xmath156 at @xmath157 , and the agent has a planned trading horizon  @xmath158 .",
    "according to the policy  @xmath152 , she chooses an action  @xmath159 .",
    "it then takes a period of time  @xmath160 to reach the next decision epoch ( @xmath161 ) , at which point the system state changes to  @xmath162 and the time to maturity for the agent becomes @xmath163 .",
    "she then chooses the action  @xmath164 , and so on . at the  @xmath48-th decision epoch , a periodic payoff of amount  @xmath165 incurs . at maturity  @xmath52",
    ", a terminal payoff  @xmath166 is obtained . in particular , after  @xmath52 ( @xmath153 ) , the agent takes no action  ( @xmath155 ) , and no payoff is paid . in the following ,",
    "we construct the semi - markov decision process in a probability space based on the ionescu tulcea s theorem .",
    "[ def : measurablespace ] let  @xmath167 be a measurable space consisting of the sample space  @xmath168 , defined by @xmath169 and the corresponding borel @xmath21-algebra @xmath170 .",
    "define the random variables  @xmath171 , @xmath172 , @xmath173 , @xmath174 , @xmath175 , @xmath176 on  @xmath167 as : @xmath177 for any  @xmath178 and  @xmath179 , where    * @xmath173 is the time between the  @xmath180-th and the  @xmath48-th decision epoch ( @xmath181 almost surely ) ; * @xmath182 represent the system state , time to maturity and agent s action at the  @xmath48-th decision epoch ; * @xmath171 is the index of the last decision epoch ; * @xmath172 is the amount ( in unit size ) of the agent s limit order executed between the  @xmath171-th decision epoch and the maturity .",
    "[ rmk : evolution_e ] based on this modelling framework , the following properties hold almost surely for  @xmath179    * @xmath183 : evolution of the time to maturity ; * @xmath184 : evolution of the ask price ( in tick size ) ; * @xmath185 : evolution of the inventory position ( in unit size ) ; * @xmath186 : the amount of the matched limit order can not exceed that of the limit order posted by the agent in each queueing race ; * @xmath187 : index of the last decision epoch ; * @xmath188 : the amount of the matched limit order between the last decision epoch and the maturity can not exceed that of limit order executed when there is no finite - horizon restriction .",
    "[ thm : tulcea ] [ tulcea s theorem  ( * ? ? ?",
    "* section 2.7.2 ) ] for any  @xmath189 and  @xmath190 , there exists a unique probability measure  @xmath191 on  @xmath167 such that , for any  @xmath92 , @xmath99 , @xmath192 , @xmath108 and  @xmath179 , @xmath193 where @xmath194 is the sequence of random variables describing the history up to the  @xmath48-th decision epoch ( realisations of the random variables ( or sequences of random variables ) are denoted by the corresponding lower case letters ) .",
    "[ sec : vfoptimalstrategy ] consider an agent with objective and trading strategies as in section  [ subsec : strategyassum ] , introduce the following definition .",
    "[ def : expectedreward ] define the finite - horizon expected reward function under a policy  @xmath195 by @xmath196 as well as the value function @xmath197 a policy @xmath198 is called @xmath46-optimal if the equality @xmath199 holds for all @xmath200 .    for any @xmath201 , we can rewrite the quantity  @xmath202 in   as @xmath203 where the second equality follows by writing @xmath204 since the sequence  @xmath205 is non - increasing , and the third equality is due to the non - negativity of the periodic / terminal reward function and the monotone convergence theorem .",
    "we now provide the expressions for the semi - markov kernel  @xmath95 and the terminal kernel  @xmath206 defined in section  [ sec : intosmdp ] using the language of queueing theory .",
    "we first ( section  [ sec : closedformsmk ] ) model the dynamics of the best queues with the agent s participation as generalised birth - death processes , and derive the closed - form expressions for the semi - markov kernel and the terminal kernel in all possible scenarios in terms of the distributions of the first - passage time of the generalised birth - death processes to zero .",
    "we then ( section  [ sec : queuedistribution ] ) compute these distributions by using laplace method .      for notational convenience",
    ", we shall fix an element  @xmath207 in  @xmath208 together with a deterministic stationary policy  @xmath190 and denote  @xmath209 by  @xmath210 throughout this section .      according to theorem  [ thm : tulcea ] and the markovian property  * ( m@xmath57 )",
    "* , we can express the semi - markov kernel as a ( stationary ) distribution of the duration and outcome of a queueing race given its initial condition and the agent s action : @xmath211 to simplify further calculations , we now factorise the conditional probability in  .    for any @xmath212 and @xmath213 , we have @xmath214 for all @xmath98 , where ( short for  @xmath209 in this section ) is the probability measure introduced in theorem  [ thm : tulcea ] , and we use the short - hand notation @xmath215 for any  @xmath216 , @xmath217    according to assumption  [ ass : lobevolution ] and remark  [ rmk : evolution_e ] , we can write @xmath218    [ rem : ddotqsemimarkov ] the function  @xmath219 is a semi - markov kernel on  @xmath220 given  @xmath221 , where @xmath222 indeed , for any  @xmath223 , the probability @xmath224 converges to  @xmath57 for large  @xmath103 , indicating the amount of the matched limit order can not exceed that of the limit order posted by the agent .    according to assumptions  [ ass : lobevolution ] ,  [ ass : poissonorderflow ] and  [ ass : admissibletradings ] , the semi - markov kernel  @xmath219 describes the dynamical mechanism of a queueing race between the volumes sitting at the best bid and ask prices .",
    "intuitively , fix  @xmath225 , and consider a queueing race starting with  @xmath53 and  @xmath54 units limit orders ( from the general market participants ) at the best bid and ask prices at a certain decision epoch .",
    "the agent subsequently submits a sell market order of  @xmath226 unit size , which decreases the best bid volume to  @xmath227 unit size , and posts a sell limit order of  @xmath228 unit size , which has less time priority than the pre - existing  @xmath229 units limit orders at the best ask price . after the agent s action",
    ", mutually independent order book events happen at exponential times with the rates depending on the price move direction  @xmath230 and therefore change the volumes of the best bid and ask queues .",
    "the queueing race terminates whenever the volume of either the best bid or ask queue reaches zero , and we denote the result of a queueing race by  @xmath231 ( resp .",
    "@xmath232 ) if the best ask ( resp .",
    "bid ) queue is depleted first . for  @xmath233 ,",
    "the quantity  @xmath234 is the probability that the duration of the race is less than or equal to  @xmath103 , the result is  @xmath235 , and  @xmath236 unit size of the agent s limit order gets executed . in the following , we model the dynamics of the volumes at the best bid and ask prices as generalised birth - death processes , and therefore build a connection between the semi - markov kernel and the queueing theory .",
    "[ def : bdprocesses ] let @xmath237 be a new filtered probability space . for  @xmath238 , @xmath239 and  @xmath240 ,",
    "define the following processes on this space :    * @xmath241_s\\right)_{s\\geq 0}$ ] is a birth and death process with state space  @xmath106 and absorbing state  @xmath242 , given the initial state  @xmath39 ; @xmath243 is the birth rate and  @xmath244 the death rate when in state  @xmath245 ; * @xmath246_s\\right)_{s\\geq0}$ ] is a pure death process with state space  @xmath106 and absorbing state  @xmath242 given initial state  @xmath247 ; the death rate equals to  @xmath248 when in state  @xmath249 ; * @xmath250_s\\right)_{s\\geq0}$ ] is a process with state space  @xmath106 given initial state  @xmath242 .",
    "strictly before time  @xmath251 , it is a birth and death process with birth rate  @xmath243 and death rate  @xmath252 when in state  @xmath253 .",
    "after  @xmath251 , the birth and death rate of this process change to  @xmath243 and  @xmath254 when in state  @xmath245 and  @xmath242 becomes the absorbing state . * @xmath255_s\\right)_{s\\geq0}$ ] is a process with state space  @xmath256 defined by @xmath257_s : = \\big(c[v , l , \\mu , \\theta]_s , g[\\kappa , \\mu , \\theta , \\tau_{c[v ,",
    "l , \\mu , \\theta]}]_s\\big ) , \\quad\\textrm{for $ s\\geq0$}.\\ ] ]    [ lem : smk&bdp ] ( * ? ? ?",
    "* lemma  2 ) fix  @xmath225 .",
    "suppose that , at the  @xmath48-th decision epoch , the queueing race starts with  @xmath53 and  @xmath54 units limit orders at the best bid and ask prices after the price moves by  @xmath63 tick , and the agent takes an action  @xmath258 .",
    "on @xmath259 , define the following processes :    * @xmath260 : size of the orders sitting at the best bid price ; * @xmath261 : size of the agent s limit order together with the orders with higher time priority at the best ask price ; * @xmath262 : size of the orders with lower time priority than the agent s limit order at the best ask price .",
    "then there exist two independent processes  @xmath263 $ ] and  @xmath264 $ ] such that @xmath265_s = \\widetilde{b}_{s+\\tau_n } \\qquad\\text{and}\\qquad a[{v}^a , { l } , \\kappa_{{j}}^a , \\mu_{{j}}^a , \\theta_{{j}}^a]_s = ( \\widetilde{c}_{s+\\tau_n } , \\widetilde{g}_{s+\\tau_n } ) , \\qquad\\text{for all } s\\in[0 , \\tau_{n+1 } - \\tau_n).\\ ] ]    according to lemma  [ lem : smk&bdp ] , we now provide an expression for  @xmath219 , and defer its proof to appendix  [ app : propqbarcal ] .",
    "[ prop : qbarcal ] fix  @xmath223 , introduce the short - hand notations : @xmath266 ,   & \\qquad \\displaystyle { b}^a & : = & b[{v}^a , \\kappa^a_{{j } } , \\mu^a_{{j } } , \\theta^a_{{j}}],\\\\   & \\displaystyle { a}^{l } & : = & a[{v}^a , { l } , \\kappa_{{j}}^a , \\mu_{{j}}^a , \\theta_{{j}}^a ] ,   & \\qquad \\displaystyle { c}^{l } & : = & c[{v}^a , l , \\mu_{{j}}^a , \\theta_{{j}}^a ] , \\end{array}\\ ] ] as well as the scenarios :    [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]      the volume in unit size is approximated by rounding the division of the volume in shares by  @xmath267 up to the nearest integer .",
    "figure  [ fig : yhoof1msltc ] compares the volume distribution immediately after a price change and one millisecond later for  yhoo .",
    "we observe that :    * the volume at the best bid ( resp .",
    "ask ) price is quite thin immediately after a price increase ( decrease ) , but see a dramatic increase one millisecond later ; * the volume at the best ask ( resp .",
    "bid ) price keeps the distribution almost unchanged within the first millisecond of the queueing race starting with a price increase ( resp .",
    "decrease ) .",
    "( left ) and  @xmath268 ( right ) with no latency ( top ) and with @xmath57ms latency ( bottom),title=\"fig : \" ]   ( left ) and  @xmath268 ( right ) with no latency ( top ) and with @xmath57ms latency ( bottom),title=\"fig : \" ]      dynamic programming techniques usually suffer from the ` curse of dimensionality '  @xcite to compute the value function through the iteration operator  @xmath269 in  .",
    "the next proposition , as proved in appendix  [ app : vfrdcfm ] , allows us to reduce the dimension of the problem , and hence to accelerate the implementation .",
    "[ prop : vfrdcfm ] given @xmath270 ,  @xmath271 and  @xmath272 , we have @xmath273    besides , the value function  @xmath274 is monotone with respect to time to maturity .",
    "indeed , let  @xmath275 be  @xmath46-optimal and construct a policy  @xmath276 , for fixed  @xmath277 , as @xmath278 definition  [ def : expectedreward ] immediately implies that @xmath279 for any  @xmath200 and @xmath280 for any  @xmath281 $ ] .",
    "the monotonicity in time to maturity therefore follows since  @xmath282 is arbitrary . as in  @xcite",
    ", we can take advantage of the monotonicity of the value function to get a faster convergence rate .",
    "the implementation procedure proceeds as follows , for some tolerance level  @xmath283 :    1 .",
    "( initialization ) : let  @xmath284 and  @xmath285 for every  @xmath189 ; 2 .   (",
    "iteration ) : choose a random pair  @xmath286 and compute  @xmath287 ; 3 .",
    "( correction ) : with @xmath288 for  @xmath289 , define the monotonicity projection as : @xmath290 4 .",
    "( accuracy control ) : if  @xmath291 , end the scheme ; otherwise go to step  @xmath58 incrementing  @xmath48 to  @xmath292 .      in this section ,",
    "we provide the results of the optimal policy computed through formula   in which the value function is approximated through the numerical scheme in section  [ sec : optmstrtg ] .",
    "figure  [ fig : os0lct ] and  [ fig : os1lct ] illustrate how different market conditions ( time to maturity , latency , price move direction , volumes at the best prices ) can affect the agent s optimal action ( expressed by different colours ) .",
    "we find that posting limit order tends to be prefered when there is more time to maturity , when there is less latency , after a price decrease or when the best ask price has less volume relative to the best bid price .    ;",
    "right : @xmath293 ) when fixing inventory  @xmath294 and time to maturity  @xmath295 . ]",
    "; right : @xmath293 ) when fixing inventory  @xmath294 and time to maturity  @xmath295 . ]",
    "; right : @xmath293 ) when fixing inventory  @xmath294 and time to maturity  @xmath295 . ]",
    "; right : @xmath293 ) when fixing inventory  @xmath294 and time to maturity  @xmath295 . ]",
    "; bottom : @xmath295 ) and price move direction ( left : @xmath296 ; right : @xmath293 ) when fixing inventory  @xmath297 and 1ms latency . ]",
    "; bottom : @xmath295 ) and price move direction ( left : @xmath296 ; right : @xmath293 ) when fixing inventory  @xmath297 and 1ms latency . ]    ;",
    "bottom : @xmath295 ) and price move direction ( left : @xmath296 ; right : @xmath293 ) when fixing inventory  @xmath297 and 1ms latency . ]    ; bottom : @xmath295 ) and price move direction ( left : @xmath296 ; right : @xmath293 ) when fixing inventory  @xmath297 and 1ms latency . ]",
    "in scenario  [ s1 ] , the agent posts a limit order at the best ask price ( @xmath298 ) , and the best ask queue is depleted before the best bid queue ( @xmath299 ) .",
    "hence ,    * the execution time of the best ask queue is less than that of the best bid queue ; * the limit order posted by the agent must get fully executed in the queueing race ; * the duration of the queueing race is the depletion time of the best ask queue",
    ".    therefore , we can write @xmath300 in scenario  [ s2 ] , the agent posts no limit order at the best ask price ( @xmath301 ) .",
    "the dynamics of best ask queue can be then described by the process  @xmath302 , independent of that of the best bid queue . the proof is similar to that in scenario  [ s1 ] . in scenario  [ s3 ] ,",
    "the agent posts a limit order at the best ask price ( @xmath303 ) , and the best bid queue is depleted before the best ask queue ( @xmath304 ) , while the agent s limit order gets no execution ( @xmath305 ) .",
    "hence ,    * the execution time of the best bid queue is less than that of one unit size of the agent s limit order together with the limit orders with higher time priority at the best ask price , and is therefore less than that of the entire best ask queue ; * the duration of the queueing race is the depletion time of the best bid queue .",
    "we then have @xmath306 in scenario  [ s4 ] , the agent posts a limit order of one unit size at the best ask price ( @xmath307 ) , the best bid queue is depleted before the best ask queue ( @xmath304 ) and the agent s limit order gets executed ( @xmath308 ) . according to remark  [ rem : ddotqsemimarkov ] , we have @xmath309 , so that @xmath310\\\\   & = \\int_0^t f_{{b}^b}(u)\\left[f_{{c}^{1}}(u ) - f_{{a}^{1}}(u)\\right]{\\mathrm{d}}u.\\end{aligned}\\ ] ] in scenario  [ s5 ] , the best bid queue is depleted before the best ask queue ( @xmath304 ) , while  @xmath311 out of  @xmath312 unit size of the agent s limit order gets executed when this queueing race terminates .",
    "hence ,    * the execution time of the best bid queue lies within the interval  @xmath313 , where  @xmath314 is the execution time of one unit size of the agent s limit order when at the top of the queue , which is exponentially distributed with parameter  @xmath315 and is independent of  @xmath316 ; * the duration of the queueing race is the depletion time of the best bid queue .",
    "we then have @xmath317 f_{{c}^{\\tilde{z}}}(u ) \\overline{{\\mathbb{p}}}(\\updelta \\in { \\mathrm{d}}\\nu){\\mathrm{d}}\\nu{\\mathrm{d}}u + \\int_0^t \\int_{t - u}^\\infty \\left[f_{{b}^b}(t)-f_{{b}^b}(u)\\right ] f_{{c}^{\\tilde{z}}}(u)\\overline{{\\mathbb{p}}}(\\updelta \\in { \\mathrm{d}}\\nu){\\mathrm{d}}\\nu{\\mathrm{d}}u\\\\ & = \\mu_{{j}}^a\\int_0^t { \\mathrm{e}}^{\\mu_{{j}}^a u}f_{{c}^{\\tilde{z}}}(u ) \\left(\\int_u^t { \\mathrm{e}}^{-\\mu_{{j}}^a \\epsilon } f_{{b}^b}(\\epsilon){\\mathrm{d}}\\epsilon\\right){\\mathrm{d}}u + { \\mathrm{e}}^{-\\mu_{{j}}^a t}f_{{b}^b}(t)\\int_0^t { \\mathrm{e}}^{\\mu_{{j}}^a u}f_{{c}^{\\tilde{z}}}(u){\\mathrm{d}}u - \\int_0^t f_{{b}^b}(u ) f_{{c}^{\\tilde{z}}}(u){\\mathrm{d}}u\\\\ & = \\mu_{{j}}^a\\int_0^tf^{*}_{{b}^b}(\\epsilon)\\int_0^\\epsilon f^{*}_{{c}^{\\tilde{z}}}(u){\\mathrm{d}}u{\\mathrm{d}}\\epsilon + \\int_0^t\\left[f^*_{b^b}(\\epsilon)\\right]^\\prime\\int_0^\\epsilon f^*_{c^{\\tilde{z}}}{\\mathrm{d}}u { \\mathrm{d}}\\epsilon\\\\ & = \\displaystyle \\int_0^t f^*_{b^b}(\\epsilon)\\int_0^\\epsilon f^*_{c^{\\tilde{z}}}(u){\\mathrm{d}}u\\ , { \\mathrm{d}}\\epsilon\\end{aligned}\\ ] ] where  @xmath318 , @xmath319 and  @xmath320 for any  @xmath321 and  @xmath322 .",
    "finally , in scenario  [ s6 ] , according to remark  [ rem : ddotqsemimarkov ] , for @xmath225 such that  @xmath323 , we have @xmath324 which yields the result by using  [ s3 ] and  [ s5 ] .",
    "if @xmath325 and  @xmath326 , then @xmath327    if @xmath328 and  @xmath326 , then @xmath329    if @xmath330 and  @xmath331 , then",
    "@xmath332    =   \\overline{f}_{b^b}(\\lambda)\\left[f_{c^{\\mathfrak{z}}}(\\lambda ) - \\left(f_{c^{\\mathfrak{z } } } * f_{\\xi}\\right)(\\lambda)\\right].\\end{aligned}\\ ] ] if @xmath328 and  @xmath333 , then @xmath334   =   \\overline{f}_{b^b}(\\lambda)\\left[f_{c^l}(\\lambda ) - f_{a^l}(\\lambda)\\right].\\end{aligned}\\ ] ] according to remark  [ rmk : tk ] , the terminal kernel has zero value in all other scenarios .",
    "for any  @xmath190 and  @xmath335 , we have @xmath336 the first two terms are bounded since the state space  @xmath337 and the action space  @xmath269 are finite . regarding the last term , lemma  [ lem : fntde ] yields @xmath338 so that the codomain of  @xmath339 is  @xmath340 .",
    "the contraction property follows directly from  , since the inequality @xmath341 holds for all @xmath342 , and the monotonicity follows from the properties of the semi - markov kernel . finally , from   and theorem  [ thm : tulcea ] , we can write , for any  @xmath189 , @xmath343\\\\   & = { \\mathbb{e}}^{\\pi}_{(e , \\lambda)}\\left [ r({\\mathcal{e}}_0 , { \\mathcal{a}}_0){1\\hspace{-2.1mm}{1}}_{\\{\\lambda_0\\geq 0\\ } }   + w({\\mathcal{e}}_0 , { \\mathcal{a}}_0 , { \\mathfrak{z}}){1\\hspace{-2.1mm}{1}}_{\\{0\\leq\\lambda_0 < x_{1}\\ } }   \\right]\\\\   & \\qquad\\qquad+\\displaystyle\\sum_{n = 1}^\\infty{\\mathbb{e}}^{\\pi}_{(e , \\lambda)}\\left [ r({\\mathcal{e}}_n , { \\mathcal{a}}_n){1\\hspace{-2.1mm}{1}}_{\\{\\lambda_n\\geq 0\\ } }   + w({\\mathcal{e}}_n , { \\mathcal{a}}_n , { \\mathfrak{z}}){1\\hspace{-2.1mm}{1}}_{\\{0\\leq\\lambda_n < x_{n+1}\\}}\\right]\\\\   & = { \\mathbb{e}}^{\\pi}_{(e , \\lambda)}\\left [    { \\mathbb{e}}^{\\pi}_{(e , \\lambda)}\\left [   r({\\mathcal{e}}_0 , { \\mathcal{a}}_0){1\\hspace{-2.1mm}{1}}_{\\{\\lambda_0\\geq 0\\ } }   +   \\sum_{{\\mathfrak{z}}= 0}^\\infty w({\\mathcal{e}}_0 , { \\mathcal{a}}_0 , { \\mathfrak{z}}){1\\hspace{-2.1mm}{1}}_{\\{0\\leq\\lambda_0 < x_{1 } , { \\mathfrak{z}}= { \\mathfrak{z}}\\ } }   \\big\\lvert h_0   \\right ]   \\right]\\\\   & \\qquad\\qquad+\\displaystyle\\sum_{n = 1}^\\infty{\\mathbb{e}}^{\\pi}_{(e , \\lambda)}\\left [   { \\mathbb{e}}^{\\pi}_{(e , \\lambda)}\\left [ r({\\mathcal{e}}_n , { \\mathcal{a}}_n){1\\hspace{-2.1mm}{1}}_{\\{\\lambda_n\\geq 0\\ } }   + w({\\mathcal{e}}_n , { \\mathcal{a}}_n , { \\mathfrak{z}}){1\\hspace{-2.1mm}{1}}_{\\{0\\leq\\lambda_n < x_{n+1}\\ } }   \\big\\lvert   h_1 ,    \\right ]   \\right]\\\\   & = r(e , \\pi(e , \\lambda ) )   + \\sum_{{\\mathfrak{z}}= 0}^\\infty w(e , \\pi(e , \\lambda ) , { \\mathfrak{z}})p({\\mathfrak{z}}\\lvert ( e , \\pi(e , \\lambda ) ) , \\lambda ) \\\\   &",
    "\\qquad +    \\sum_{n = 1}^\\infty { \\mathbb{e}}^{\\pi}_{(e , \\lambda)}\\left [   { \\mathbb{e}}_{({\\mathcal{e}}_1 , \\lambda_1)}^\\pi\\left [   r({\\mathcal{e}}_{n-1 } , { \\mathcal{a}}_{n-1}){1\\hspace{-2.1mm}{1}}_{\\{\\lambda_{n-1}\\geq 0\\ } }   + w({\\mathcal{e}}_{n-1 } , { \\mathcal{a}}_{n-1 } , { \\mathfrak{z}}){1\\hspace{-2.1mm}{1}}_{\\{0\\leq\\lambda_{n-1 } < x_{n}\\ } }   \\right ]   \\right]\\\\   & = r(e , \\pi(e , \\lambda ) ) + \\sum_{{\\mathfrak{z}}= 0}^\\infty w(e , \\pi(e , \\lambda ) , { \\mathfrak{z}})p({\\mathfrak{z}}\\lvert ( e , \\pi(e , \\lambda ) ) , \\lambda )   + { \\mathbb{e}}_{(e , \\lambda)}^\\pi\\left[v^\\pi({\\mathcal{e}}_1 , \\lambda_1)\\right]\\big )   \\\\   & = r(e , \\pi(e , \\lambda ) ) + \\sum_{{\\mathfrak{z}}= 0}^\\infty w(e , \\pi(e , \\lambda ) , { \\mathfrak{z}})p({\\mathfrak{z}}\\lvert ( e , \\pi(e , \\lambda ) ) , \\lambda )   + \\sum_{\\tilde{e}\\in { \\mathcal{e}}}\\int_0^\\lambda v^\\pi(\\tilde{e } , \\lambda - t)q\\big({\\mathrm{d}}t , \\tilde{e}\\lvert ( e , \\pi(e , \\lambda))\\big).\\end{aligned}\\ ] ]",
    "let @xmath344 and @xmath345 , so that @xmath346 , where  @xmath347 and  @xmath348 .",
    "define further @xmath349 . according to proposition  [ prop : proptpi ] and  ( * ? ? ?",
    "* theorem 3 ) , we can write @xmath350 with the auxiliary function @xmath351 for @xmath352 , simple calculations yield @xmath353 for any  @xmath352 , and theorem  [ thm : valuefunction ] implies that @xmath354 . combining this with   finishes the proof",
    "fix  @xmath355 and denote the poisson parameters  @xmath356 by  @xmath357 respectively . introduce the auxiliary parameters  @xmath358 and  @xmath359 .",
    "suppose we observe  @xmath360 times of limit order arrivals , @xmath361 times of market order arrivals and  @xmath362 times of cancellations on the  @xmath363 side in the  @xmath364-th queueing race , whose starting time is  @xmath365 , duration is  @xmath366 and the volume in unit size at  @xmath363 price at time  @xmath103 is  @xmath367 , for  @xmath368 .",
    "the likelihood functions are then constructed as : @xmath369 where @xmath370 . taking logarithms , and cancelling",
    "the derivatives yield the optima   with @xmath371      j.  abate , g.  l. choudhury and w.  whitt .",
    "an introduction to numerical transform inversion and its application to probability models .",
    "computational probability , w. grassman ( ed . ) , kluwer , boston : 257 - 323 , 1999 .                                                  c.  maglaras , c.  c. moallemi and h.  zheng . optimal execution in a limit order book and an associated microstructure market impact model .",
    "https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2610808[ssrn:2610808 ] , 2015 ."
  ],
  "abstract_text": [
    "<S> we propose a framework to study the optimal liquidation strategy in a limit order book for large - tick stocks , with the spread equal to one tick . </S>",
    "<S> all order book events ( market orders , limit orders and cancellations ) occur according to independent poisson processes , with parameters depending on price move directions . </S>",
    "<S> our goal is to maximise the expected terminal wealth of an agent who needs to liquidate her positions within a fixed time horizon . by assuming that the agent trades ( through sell limit order or / and sell market order ) only when the price moves , we model her liquidation procedure as a semi - markov decision process , and compute the semi - markov kernel using laplace method in the language of queueing theory . the optimal liquidation policy </S>",
    "<S> is then solved by dynamic programming , and illustrated numerically . </S>"
  ]
}