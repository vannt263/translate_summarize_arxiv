{
  "article_text": [
    "the problem of secret key generation by two terminals , based on their respective observations of a common source followed by public transmissions between them , was first studied by maurer @xcite , and ahlswede and csiszr @xcite .",
    "various extensions of this problem have been investigated since then ( see , e.g. , @xcite , @xcite , @xcite , @xcite , @xcite ) .    csiszr and narayan @xcite generalize the secret key generation problem to multiple terminals .",
    "they consider a model with an arbitrary number of terminals , each with distinct observations of a common source .",
    "a group of terminals wish to generate a secret key with the help of other terminals . in generating such a key",
    ", these terminals are allowed to communicate with each other through a noiseless public channel .    in this paper",
    ", we consider a pair - wise independent network where every pair of terminals in the network observes a common source that is independent of all the sources accessible to the other pairs .",
    "this model , as a special case of the model in @xcite , is motivated by wireless communications @xcite , @xcite . in a wireless communication environment",
    ", each pair of wireless terminals typically possesses some means of estimating their mutual channel .",
    "the resulting estimates are highly statistically similar , provided that the terminals communicate on the same carrier frequency .",
    "moreover , any third terminal s observations are essentially uncorrelated with the observations of the first two terminals , provided that the third terminal is located at least half a wavelength away from those two .",
    "the main contribution of this paper is the following .",
    "we propose a method for secret key agreement in the pair - wise independent network that is based on well - established point - to - point techniques @xcite , @xcite and repeated application of the one - time pad .",
    "specifically , we propose protocols for three cases of the pair - wise independent model and prove that the secret key rates achieved by our protocols are optimal in the first two cases . therefore ,",
    "the capacity problem in such situations is now solved .",
    "furthermore , the efficiency of our protocol for the last case is shown through examples .",
    "the innate connections between the pair - wise independent network and graphs can be observed through these protocols .",
    "suppose @xmath0 terminals respectively observe @xmath1 independent and identically distributed repetitions of the random variables @xmath2 , denoted by @xmath3 with @xmath4 .",
    "a group @xmath5 of terminals wish to generate a common secret key , with the help of the remaining terminals .",
    "to do so , these @xmath6 terminals can communicate with each other through a noiseless public channel .",
    "the generated group secret key @xmath7 should be nearly statistically independent of the public transmissions . the entropy rate of the secret key , viz .",
    ", @xmath8 , is called a secret key rate .",
    "the largest achievable secret key rate is called the secret key capacity , denoted by @xmath9 .",
    "it is shown in @xcite that @xmath10 where @xmath11 with @xmath12 and @xmath13 .",
    "let @xmath14 be a @xmath15-partition of @xmath16 , such that each element @xmath17 , @xmath18 , intersects with the set @xmath19 .",
    "denote by @xmath20 the set of all such @xmath15-partitions .",
    "then an upper bound on the secret key capacity is @xcite @xmath21 where @xmath22",
    "in this paper , we focus on a pair - wise independent network , which is a special case of the network described in section ii .",
    "suppose that the observation @xmath23 by terminal @xmath24 has @xmath25 components @xmath26 .",
    "each component @xmath27 denotes the observation of the source that is accessible only to terminals @xmath24 and @xmath28 .",
    "furthermore , it is assumed that @xmath29 this implies that each source accessible to a pair of terminals is independent of all other sources  hence , the network is called pair - wise independent .",
    "if a group of terminals in the pair - wise independent network generate a common secret key , then an upper bound on the secret key capacity is given in the following lemma .",
    "in the pair - wise independent network , @xmath30 where @xmath31    let @xmath32 be an arbitrary @xmath15-partition belonging to @xmath20 .",
    "it follows from the independence condition ( [ independent ] ) that @xmath33 and for @xmath18 , @xmath34 then @xmath35\\\\ & = & \\sum_{i , j : i\\in b_{l } ; \\atop j\\in b_{r } ; l < r}i(y_{i , j } ; y_{j , i}).\\end{aligned}\\ ] ] therefore , the upper bound ( [ upperbound2 ] ) follows from ( [ upperbound ] ) and the above equality .",
    "the decomposition observed in the proof suggests that a graph based approach can be used to study the pair - wise independent network .",
    "it is our conjecture that the upper bound ( [ upperbound2 ] ) is always tight for the pair - wise independent network ; we demonstrate that this conjecture holds in at least two special cases .",
    "in this section , we consider the broadcast case of a pair - wise independent network in which the observations of each terminal in @xmath36 are correlated only with the observations of terminal 1 ( called the central terminal ) . in other words ,",
    "the observation @xmath23 by terminal @xmath37 is equal to @xmath38 , and @xmath27 is a constant for @xmath39 .    by restricting @xmath20 to the set of 2-partitions @xmath40 in ( [ upperbound2 ] )",
    ", we obtain an upper bound on the secret key capacity for the broadcast case @xmath41 next , we propose a protocol for the secret key establishment among all @xmath6 terminals .    terminals @xmath42 begin by separately establishing secret keys with the central terminal using the standard techniques @xcite , @xcite .",
    "this results in @xmath25 pair - wise secret keys @xmath43 , @xmath44 , where @xmath43 denotes the secret key shared by terminals 1 and @xmath24 . without loss of generality",
    ", these keys are stored using a binary alphabet .",
    "let @xmath45 denote the length of the secret key @xmath43 . according to @xcite , @xcite , for any @xmath46",
    ", each secret key @xmath43 , as a function of @xmath47 , satisfies the secrecy condition @xmath48 and the uniformity condition @xmath49 where @xmath50 denotes the public transmissions between terminal @xmath24 and the central terminal to generate the pair - wise secret key @xmath43 .",
    "it follows from the independence condition ( [ independent ] ) that @xmath51 the entropy rate of @xmath43 is given by @xcite , @xcite @xmath52    let @xmath53 , @xmath54 , be the shortest key among the @xmath25 generated keys , i.e. , @xmath55 the central terminal sends @xmath56 to terminal @xmath24 , where @xmath57 denotes the first @xmath58 bits of @xmath43 .",
    "at this point , all @xmath6 terminals have @xmath53 , which is set as the group secret key .",
    "the independence between @xmath53 and all the public transmissions is shown in the following proposition .",
    "for any @xmath59 , the secret key @xmath53 generated above satisfies @xmath60    in the interest of simple notation , we denote @xmath61 by @xmath62 . then the left side of ( [ lem1.0 ] ) is written as @xmath63 the former term in ( [ lem1.2 ] ) is upper bounded by @xmath64\\nonumber\\\\ \\hspace{-0.15 in } & \\leq & \\hspace{-0.1 in } 2(m-2)\\epsilon , \\nonumber\\end{aligned}\\ ] ] where the latter inequality follows from ( [ uniform ] ) and ( [ independent2 ] ) .",
    "the latter term in ( [ lem1.2 ] ) is upper bounded by @xmath65 where the inequality follows from ( [ secret ] ) .",
    "this completes the proof .",
    "it follows from ( [ rate ] ) and ( [ additional ] ) that the generated secret key @xmath53 has a rate close to the upper bound ( [ upperbound3 ] ) .",
    "hence , the protocol is optimal .",
    "furthermore , it is not difficult to show that the protocol is also optimal for the broadcast case with rate constraints ( cf .",
    ", @xcite ) on the public transmissions .",
    "we now consider a sub - group key generation problem .",
    "suppose that , in a pair - wise independent network , terminals 1 and @xmath6 wish to generate a secret key with the help of other @xmath66 terminals .",
    "in other words , the sub - group @xmath67 of terminals wish to generate a secret key .",
    "we begin this section with a short overview of some definitions and algorithms related to graphs .",
    "then we propose a protocol for the sub - group key generation problem .",
    "this protocol is based on existing graph algorithms .",
    "further , we show that the resulting secret key has a rate close to the capacity .",
    "let @xmath68 be a weighted directed graph .",
    "let @xmath69 be a source node and @xmath70 be a destination node in @xmath71 .",
    "an _ @xmath72 cut _ of the graph @xmath71 is a partition of the nodes @xmath73 into two sets @xmath74 and @xmath75 such that @xmath76 and @xmath77 .",
    "any edge crossing from @xmath74 to @xmath75 is said to be a _",
    "cut edge_. the _ weight _ of an @xmath72 cut is the sum of the weights of its edges .",
    "an @xmath72 cut is _ minimal _ if the weight of the @xmath72 cut is not larger than the weight of any other @xmath72 cut .",
    "a _ network flow _ is an assignment of flow to the edges of a weighted directed graph such that the amount of flow along the edge does not exceed its weight .",
    "the maximal @xmath72 flow problem is to find a maximal feasible flow from the source node @xmath78 to the destination node @xmath79 .",
    "the labeling algorithm @xcite is known to solve the maximal @xmath72 flow problem .    by the max - flow",
    "min - cut theorem @xcite , the maximal @xmath72 flow is equal to the weight of the minimal @xmath72 cut .",
    "we now return to the sub - group secret key generation problem .",
    "it follows from lemma 1 that the secret key capacity , which can be achieved by terminals 1 and @xmath6 with the help of other terminals , is upper bounded by @xmath80 where @xmath81 is the set of all 2-partitions of the set @xmath16 such that either atom of a 2-partition intersects with @xmath82 .",
    "the upper bound ( [ upperbound4 ] ) can be represented via graphs .",
    "consider a weighted directed graph @xmath83 with @xmath6 nodes , each node corresponding to a terminal .",
    "the edge from node @xmath24 to @xmath28 has weight @xmath84 . let node 1 be the source node and node @xmath6 be the destination node .",
    "then the upper bound ( [ upperbound4 ] ) is equivalent to the minimal @xmath72 cut of @xmath83 .",
    "next , we propose a protocol for the secret key establishment between terminals 1 and @xmath6 .",
    "all the terminals begin by establishing pair - wise secret keys using the standard techniques @xcite , @xcite .",
    "this results in @xmath85 pair - wise secret keys .",
    "let @xmath86 ( @xmath87 denote the secret key shared by terminals @xmath24 and @xmath28 .",
    "each secret key @xmath86 , as a function of @xmath88 , satisfies certain secrecy condition and uniformity condition as in ( [ secret ] ) , ( [ uniform ] ) .",
    "further , for any @xmath89 , @xmath90 and the entropy rate of @xmath86 is given by @xcite , @xcite @xmath91 based on the pair - wise secret key @xmath86 , terminal @xmath24 can cipher @xmath92 random bits with @xmath86 through the one - time pad before transmitting these random bits to terminal @xmath28 ( and vice versa ) .",
    "this implies the existence of a secure channel between nodes @xmath24 and @xmath28 with capacity @xmath93 .",
    "consider a weighted directed graph @xmath94 with @xmath6 nodes , each node corresponding to a terminal .",
    "the weight of an edge @xmath95 in the graph is equal to the capacity of the secure channel connecting terminals @xmath24 and @xmath28 , i.e. , @xmath93 . using the labeling algorithm @xcite",
    ", one can find the maximal @xmath72 flow @xmath96 in this graph .",
    "accordingly , terminal 1 can securely send random bits through the network to terminal @xmath6 at rate @xmath96 .",
    "let these random bits be the secret key of terminals 1 and @xmath6 . by arguments similar to those used in the proof of proposition 1 ,",
    "it is easy to show that this secret key is nearly statistically independent of the public transmissions .",
    "let @xmath97 denote all the public transmissions needed in the protocol above .",
    "for any @xmath59 , the secret key @xmath7 generated above satisfies @xmath98 .",
    "according to the max - flow min - cut theorem @xcite , the rate @xmath96 of the generated secret key is equal to the minimal @xmath72 cut of @xmath94 .",
    "it follows from ( [ key ] ) that the minimal @xmath72 cut of @xmath94 is close to the minimal @xmath72 cut of @xmath83 .",
    "hence , the achieved secret key rate is close to the upper bound ( [ upperbound4 ] ) , and the protocol is optimal .",
    "in this section , we examine the problem of all the terminals in a pair - wise independent network generating a common secret key .",
    "we start by a short overview of more definitions and algorithms related to graphs .",
    "then we propose a protocol for the group secret key generation problem .",
    "this protocol is based on existing graph algorithms .",
    "finally , we demonstrate the efficiency of this protocol through several examples .",
    "let @xmath68 be a weighted undirected graph .",
    "the graph @xmath71 is said to be _ connected _ if for every two distinct nodes @xmath99 , there exists a path from node @xmath24 to node @xmath28 . otherwise , the graph is said to be _ unconnected_. define a _",
    "multi - cut _ of @xmath71 to be a partition of the nodes @xmath73 into several sets @xmath100 ,",
    "@xmath101 , with @xmath6 being the number of nodes in @xmath71 . any edge @xmath102 with end - nodes @xmath24 , @xmath28 belonging to different sets is said to be a _",
    "multi - cut edge_. the _ weight _ of a multi - cut is the weight sum of its edges",
    ". the _ normalized weight _ of a multi - cut is the weight of the multi - cut divided by @xmath103 , where @xmath104 is the number of sets in the partition of @xmath71 generating the multi - cut .",
    "given a connected undirected graph @xmath105 , let @xmath106 be a subset of @xmath107 such that @xmath108 is a tree .",
    "such a tree is called a _ spanning tree_. a _ maximum spanning tree _ from a weighted graph",
    "is defined as a spanning tree such that the weight sum of its edges is as large as possible .",
    "the problem of finding a maximum spanning tree can be solved by several greedy algorithms .",
    "two examples are kruskal s algorithm and prim s algorithm ( cf . , e.g. , @xcite ) .",
    "the upper bound ( [ upperbound2 ] ) on the secret key capacity for the group secret key case , i.e. , @xmath109 , can be represented via graphs .",
    "consider a weighted undirected graph @xmath110 with @xmath6 nodes , each node corresponding to a terminal .",
    "the weight of an edge @xmath95 in the graph is equal to @xmath84 .",
    "note that each multi - cut of the graph @xmath110 is equivalent to a partition in ( [ upperbound2 ] ) , and the set of all multi - cuts of the graph @xmath110 is precisely equivalent to the set of partitions @xmath111 in ( [ upperbound2 ] ) .",
    "moreover , the normalized weight of a multi - cut is precisely @xmath112 .",
    "consequently , we have the following corollary .",
    "the secret key capacity for the group secret key case is upper bounded by the minimal normalized weight of the multi - cuts of @xmath110 . in particular , this upper bound implies the following two upper bounds :    i ) .",
    "the minimal weight of the cuts of @xmath110 , where a cut is a multi - cut generated by a partition into 2 sets ;    ii ) .",
    "the weight sum of all edges in @xmath110 divided by @xmath25 .",
    "next , we propose a protocol for the group secret key generation problem .",
    "all the terminals begin by establishing pair - wise secret keys using the standard techniques @xcite , @xcite .",
    "let @xmath86 ( @xmath113 ) denote the secret key shared by terminals @xmath24 and @xmath28 .",
    "these secret keys satisfy the certain secrecy condition , uniformity condition , and ( [ independent3 ] ) , ( [ key ] ) .    consider a weighted undirected graph @xmath114 with @xmath6 nodes , each corresponding to a terminal .",
    "the weight of an edge @xmath95 in the graph is equal to the length of the corresponding pair - wise secret key @xmath86 , i.e. , @xmath92 .",
    "our group key generation algorithm is related to lemma 2 below .",
    "this lemma discusses the generation of a single secret bit among @xmath6 nodes , based on a single bit from each of the @xmath25 pair - wise secret keys whose corresponding edges constitute a spanning tree .",
    "consider an arbitrary tree connecting @xmath6 nodes .",
    "if every pair of neighbor nodes on the tree shares a single pair - wise secret bit , then a single secret bit can be generated among all @xmath6 nodes .",
    "a simple algorithm on generating a single secret bit among all @xmath6 nodes is illustrated below .",
    "* single bit algorithm * :    * step 1*. randomly pick up an edge @xmath115 from the spanning tree . nodes @xmath116 and @xmath117 share a secret bit @xmath118 .",
    "* step 2*. if node @xmath24 knows @xmath118 , but its neighbor node @xmath28 does not , then node @xmath24 sends @xmath119 to node @xmath28 , where @xmath120 is the secret bit shared by nodes @xmath24 and @xmath28 . upon receiving this message ,",
    "node @xmath28 is able to decode @xmath118 .",
    "repeat this step until the above condition does not hold .",
    "@xmath121    this algorithm stops when all the nodes are able to decode @xmath118 .",
    "it is trivial to show the independence between @xmath118 and the public transmissions .",
    "hence , @xmath118 is a secret bit .",
    "our group secret key generation algorithm is given below .",
    "* group key generation algorithm * :    let @xmath122 be the weighted undirected graph @xmath114 defined above .    * step 1 * : determine a maximum spanning tree from @xmath122 , using any known algorithm ( e.g. , kruskal s or prim s ) .",
    "if there is more than one maximum spanning tree , randomly select one .",
    "* step 2 * : apply the single bit algorithm to generate a single secret bit among all nodes , based on a single bit from every pair - wise secret key on the determined maximum spanning tree .",
    "note that these used bits will be of no use in the remaining group key generation process .",
    "* step 3 * : update the graph by reducing the edge weight by 1 for the edges on the determined spanning tree . remove an edge when its weight becomes zero .",
    "* step 4 * : if the remaining graph @xmath122 is unconnected , then set the group secret key as the collection of all generated secret bits .",
    "otherwise , return to step 1 .",
    "@xmath121    since each iteration of the group key generation algorithm leads to a single secret bit , the length of the resulting secret key is equal to the number of iterations of the algorithm that can be run until the graph becomes unconnected .",
    "the purpose of searching a maximum spanning tree ( rather than picking up an arbitrary spanning tree ) in step 1 is to maximize the number of iterations of the algorithm by means of `` balancing ''",
    "edge weights in the weight reduction procedure .    by arguments similar to those used in the proof of proposition 1 , it is easy to show that the secret key resulting from the above algorithm is nearly statistically independent of the public transmissions .",
    "let @xmath97 denote all the public transmissions needed in the protocol above .",
    "for any @xmath59 , the secret key @xmath7 generated above satisfies @xmath98 .",
    "we illustrate the operations of the group key generation algorithm through the following example .",
    "consider a network with 3 nodes .",
    "nodes 1 and 2 share a secret key of 5 bits ; nodes 1 and 3 share a secret key of 4 bits ; and nodes 2 and 3 share a secret key of 3 bits .",
    "this network is drawn in the left part of fig . 1 .",
    "let the pair - wise secret keys be @xmath123 , @xmath124 , and @xmath125 , where @xmath126 denotes the @xmath127 bit of the secret key shared by nodes @xmath24 and @xmath28 .",
    "the spanning tree @xmath128 is the maximum spanning tree from the graph in the left part of fig .",
    "1 , as it has a larger weight (= 9 ) than other spanning trees .",
    "hence , by the single bit algorithm , node 1 transmits @xmath129 and sets @xmath130 ( or @xmath131 ) as the secret bit .",
    "update the graph by reducing the weights of the edges @xmath132 , @xmath133 by 1 .",
    "this results in the graph given in the right part of fig",
    ". 1 .    by repeating the above process , the determined maximum spanning trees and the corresponding public transmissions in the next five iterations are @xmath134 @xmath135 and @xmath136 @xmath137 respectively .",
    "the algorithm stops after these iterations , as the remaining graph is unconnected .",
    "the group secret key is set as @xmath138 . by restricting @xmath15 to @xmath139 and setting @xmath140 in ( [ upperbound2 ] )",
    ", we find that the length of any group secret key in this example can not be larger than 6 bits .",
    "hence , the algorithm is optimal .    for a network with 3 nodes ,",
    "determining a maximum spanning tree in the group key generation algorithm is equivalent to determining a node such that the weight sum of two edges connecting with this node is the largest .",
    "consider a network with @xmath6 nodes and all @xmath141 edges having the same even weight @xmath142 , for a certain positive integer @xmath143 .",
    "a secret key of length @xmath144 bits can be generated by using the group key generation algorithm .",
    "on the other hand , by restricting @xmath15 to @xmath145 and setting @xmath140 in ( [ upperbound2 ] ) , we find that the length of any group secret key in this example can not be larger than @xmath146 bits .",
    "hence , the algorithm is optimal .",
    "although the group key generation algorithm is shown to be optimal in the examples above , its potential non - optimality is demonstrated by the following example .",
    "consider a network with 4 nodes .",
    "each node is connected with every other node by an edge of weight 1 .",
    "it is clear that @xmath147 is a maximum spanning tree of the graph , which means that 1 secret bit can be generated from it .",
    "however , the updated graph then becomes unconnected , resulting in a secret key of 1 bit .",
    "nevertheless , the upper bound in ( [ upperbound2 ] ) can be achieved by simply making a _ better selection from the possible maximal spanning trees_. one such tree is @xmath148 . after the weight reduction ,",
    "the new graph is still connected , having the spanning tree @xmath149 .",
    "hence , 2 secret bits , which is optimal , can be established in this manner .",
    "this example suggests the importance of deliberately selecting a maximum spanning tree in step 1 of the algorithm .",
    "what a good selection scheme might look like , and whether it would guarantee the optimality of this algorithm , remains open .",
    "the authors would like to thank yogendra shah and inhyok cha for introducing the sub - group key generation problem and for helpful discussions on this topic ."
  ],
  "abstract_text": [
    "<S> we consider a pair - wise independent network where every pair of terminals in the network observes a common pair - wise source that is independent of all the sources accessible to the other pairs . we propose a method for secret key agreement in such a network that is based on well - established point - to - point techniques and repeated application of the one - time pad . </S>",
    "<S> three specific problems are investigated . </S>",
    "<S> 1 ) each terminal s observations are correlated only with the observations of a central terminal . </S>",
    "<S> all these terminals wish to generate a common secret key . </S>",
    "<S> 2 ) in a pair - wise independent network , two designated terminals wish to generate a secret key with the help of other terminals . </S>",
    "<S> 3 ) all the terminals in a pair - wise independent network wish to generate a common secret key . a separate protocol for each of these problems </S>",
    "<S> is proposed . </S>",
    "<S> furthermore , we show that the protocols for the first two problems are optimal and the protocol for the third problem is efficient , in terms of the resulting secret key rates . </S>"
  ]
}