{
  "article_text": [
    "grape ( gravity pipe ; sugimoto et al .  1990 ) is a special purpose hardware that calculates newtonian gravitational forces efficiently in large scale @xmath0-body simulations .",
    "a series of grape was developed by ito et al .",
    "( 1990 ; grape-1 ) , ito et al .",
    "( 1991 ; grape-2 ) , okumura et al .  ( 1993 ; grape-3 ) , makino et al .  ( 1997 ; grape-4 ) , and kawai et al .  ( 2000 ; grape-5 ) .",
    "grape is connected with , and controlled by a typical workstation or pc .",
    "the host computer requests of grape to calculate gravitational forces . force integration and particle pushing",
    "are all done on the host computer .",
    "owing to its high performance , grape has been a powerful tool for solving astronomical @xmath0-body problems , such as those related to star cluster evolution @xcite , black hole spiral - in @xcite , formation of planets @xcite , and formation of central cusps in dark matter halos @xcite .",
    "in addition to the efficient gravitational calculations , grape performs parallel gathering of neighbor particles , and returns neighbor lists to the host computer if requested .",
    "since searching neighbors is one of the most time - consuming routines in some particle simulations with close interactions , such as the smoothed particle hydrodynamics ( sph ) , the neighbor lists from grape are advantageous in speeding up those simulations . thus sph",
    "is often combined with @xmath0-body calculations using grape .",
    "pioneering work on the grape - sph method was done by @xcite , using grape-1a .",
    "@xcite reported the high performance of the grape - sph method using grape-3 .",
    "the grape - sph method has been successfully applied to a number of topics , e.g. , fragmentation of molecular clouds @xcite , and galaxy formation @xcite .    despite the high performance of grape - sph ,",
    "searching neighbors is still a massive routine in full calculations @xcite . in particular , the data transfer of neighbor lists between grape and the host computer is a bottleneck for speed - up .",
    "@xcite pointed out that , owing to the specification of grape , the amount of the data transfer can be reduced if the neighbor lists for particles , returned from grape at once , overlap each other ( see section 2 in details ) ; in the case of grape-3 that can construct 8 neighbor lists for 8 particles simultaneously , if the lists are completely the same , the communication time for the 8 lists becomes as fast as that for a single list . in order to make the lists overlap at least partially , @xcite sorted the particles into the @xmath1-coordinate order before the grape call , because the particles , having similar neighbor lists , must have similar positions , and thus similar @xmath1-coordinates .",
    "this approach reduced the time consumed in entire neighbor searches by 10 - 20 % , in simulations using a few tens of thousands of particles and grape-3 .",
    "this approach , however , becomes less effective when the number of particles increases , because the particles with similar @xmath1-coordinates are more likely to have very different @xmath2-coordinates . in this paper",
    ", we introduce the other ordering method , i.e. the morton ordering method , for grape neighbor searches , which keeps track of original @xmath3-dimensional particle coordinates , and are independent of the number of particles .",
    "we show some test calculations of neighbor searches using grape-5 and morton ordering .",
    "the morton ordering method has been suggested for some parallel tree algorithms for @xmath0-body simulations @xcite , and now , is applied to searching neighbors in grape - sph .",
    "we briefly review some grape hardware specifications , related to searching neighbors in  2 , and morton ordering in  3 .",
    "test calculations and results are shown in  4 and  5 , respectively .",
    "summary appear in  6 .",
    "a grape series is a special purpose board , similar to a graphic board , used to accelerate gravitational force calculations in @xmath0-body problems .",
    "it is connected with , and controlled by a host computer , i.e. a typical workstation or pc .",
    "the host computer sends particle positions and masses to grape , and grape calculates gravitational forces and potentials , sending them back to the host computer .",
    "grape can also return neighbor particle lists , and thus , is suitable for simulations with close interactions , such as sph simulations .",
    "the data transfer of the neighbor lists , however , takes much more time than that for the others , i.e. for a single particle , typically sixty words for a neighbor list should be transferred , while only ten words are transferred for mass , position , force , potential , gravitational softening , and radius of the particle .",
    "we will introduce a method to speed up this data transfer in  [ sec : morton ] . though we describe the case for the fifth version of the grape series ( grape-5 ) , the method is also well suited for grape-3 and the other versions of grape .",
    "detailed designs of the grape-5 hardware are described in @xcite .",
    "hence , we give a brief review , and necessary details for our new neighbor searching method .",
    "the main engine of a grape-5 board is composed of g5 chips . the g5 chip is a custom lsi chip , which calculates gravitational forces and potentials .",
    "one grape-5 board has eight g5 chips , each of which calculates the forces on 12 particles simultaneously , hence one board calculates the forces on @xmath4 particles at once .",
    "gravitational force @xmath5 on a particle @xmath6 is derived by first calculating the force @xmath7 between two particles ( @xmath6 and @xmath8 ) , and then summing them up among all particles @xmath9 .",
    "the g5 chip can also check whether a particle @xmath8 is a neighbor of a particle @xmath6 , by comparing the square of the distance @xmath10 between @xmath6 and @xmath8 , with the square of the radius @xmath11 of @xmath6 , as @xmath12 .",
    "the neighbor lists , output from the g5 chips , are stored in special memories on the grape-5 board .",
    "there are two memory units on a single grape-5 board , each of which stores the neighbor lists from four of the eight g5 chips on a board , and thus , for @xmath13 particles .",
    "grape-5 does not keep the neighbor lists in a simple lengthy manner , such that all neighbors of the 48 particles occupy individual memory space , but in a way that keeps the lists as particle indices and flags .",
    "for example , when one particle has a neighbor list of ( 8,11,22,41,49 ) and another has ( 3,7,11,23,41 ) , these two lists are kept as a convolved particle index list ( 3,7,8,11,22,23,41,49 ) and binary flags ( 01,01,10,11,10,01,11,10 ) .",
    "the host computer receives these indices and flags from grape , and deconvolves these into individual neighbor lists for the two particles .",
    "one neighbor memory unit , of the two on a grape-5 board , stores the neighbor lists for the 48 particles . thus the above convolved list and binary flags",
    "are made for the 48 particles .",
    "this particular operation for the neighbor lists provides room to speed up the data transfer , and hence , the neighbor search .",
    "considering the case that each particle has @xmath14 neighbor particles , if the 48 particles have completely different neighbors , the data transferred from grape-5 to the host computer are @xmath15 words for the convolved list , and 2880 words for the binary flags . on the other hand ,",
    "if we can arrange the 48 particles so that they have perfectly identical neighbor lists , the amount of data is significantly reduced to 60 words for the convolved list and 60 words for the binary flags , which means that the communication time is reduced by 1/48 .",
    "hence , we can reduce the communication time for searching neighbors with grape , by arranging the 48 particles so that their neighbors overlap significantly .",
    "a grape-5 board searches neighbors for 96 particles simultaneously in a single grape run . in large @xmath0-body simulations , the grape run is repeated @xmath16 times .",
    "each of the two memory units on a grape-5 board keeps the neighbor lists for @xmath17 particles in a single run , and the lists are transferred from grape to the host computer .",
    "according to the grape specifications in  [ sec : grape ] , we can reduce the amount of the transferred data if we choose the 48 particles , for a single memory in a single run , so that their neighbors overlap each other .",
    "the cost of the data transfer is reduced by increasing the fraction of the overlap .    in order to make the neighbor lists overlap",
    ", we should choose 48 intrinsically neighboring particles , i.e. particles with similar coordinates , for a single grape run .",
    "based on this idea , @xcite sorted all the particles according to their @xmath1-coordinates , and succeeded in reducing the communication cost between grape-3 and a host computer .",
    "this method expects that the particles arranged by @xmath1-coordinates would more frequently have similar @xmath18-coordinates than randomly distributed particles .",
    "however , this method becomes less effective in very large grape - sph simulations , because the radius @xmath19 for searching neighbors becomes smaller in larger simulations , and thus , two particles with similar @xmath1-coordinates would more frequently have quite different @xmath2-coordinates , which makes the separation of the two more than @xmath19 .",
    "therefore , we suggest the use of morton ordering , rather than @xmath1-coordinate ordering .",
    "morton ordering naturally translates the @xmath18-coordinates into a 1-d space , with sufficiently maintaining the original 3-d structure .",
    "morton ordering has been suggested for a parallel tree code for gravitational calculations @xcite .    in the morton",
    "ordering , the 3-d coordinates ( @xmath20 ) = ( @xmath21 ) of a particle is translated into a 1-d _ key _ as @xmath22 .",
    "then the particles are sorted according to those keys . since those 1-d keys sufficiently have the memory of the original 3-d coordinates , the two particles with similar keys lie close to each other in the 3-d space as well . in actual operations ,",
    "the key is constructed in a binary space , and hence , can be simply produced by bit - shift and add .",
    "thus the costs for the key construction in calculations and the coding by a programmer are quite low .",
    "additional time for sorting is also negligible .",
    "a demonstration of the morton ordering in a 2-d case for 3,000 particles is shown in figure [ fig1 ] .",
    "the particles are randomly and uniformly distributed in a unit circle , and connected in the morton order ( key order ) with the single stroke of a pen .",
    "it is evident that the morton ordering arranges the particles in such a way that those with similar 2-d coordinates lie close to each other in the key space ( 1-d ) , and that the particles with similar keys must have quite similar neighbor lists .",
    "hence the morton ordering is effective to make the neighbor lists of the 48 particles overlap .",
    " figure 1 ",
    "we test the efficiency of the above new method ( grape+morton ordering ) , in comparison with two other methods using grape . we distribute particles in space , search neighbors for those particles using grape , and measure the time consumed for the neighbor search . before starting the grape neighbor search , we rearrange the particles ( 1 ) in a _ random _ order ( hereafter , r - ordering ) , i.e. with no rearrangement , ( 2 ) in a @xmath1-coordinate order ( x - ordering ) , and ( 3 ) in a morton order ( m - ordering ) .",
    "the last two orderings will actively make the 48 neighbor lists , stored on a single grape memory unit , overlap each other , which improves the efficiency of the grape neighbor search as discussed in ",
    "[ sec : morton ] .    in actual calculations , such as cosmological and galaxy formation simulations ,",
    "there appear various density distributions .",
    "matter is uniformly distributed in the early stage of the universe , gradually assembled and collapsed by gravity , and then , form nearly isothermal objects .",
    "hence we adopt spherically symmetric density profiles @xmath23 with the index @xmath24 of @xmath25 ( uniform ) and @xmath26 ( isothermal ) , for test calculations .",
    "the density profiles are constructed by randomly and uniformly distributing particles in a unit sphere , and stretching the distribution by means of a radial coordinate transformation , i.e. @xmath27 .",
    "we also test the hernquist profile @xcite as a realistic density model of dark matter halo , i.e. @xmath28 where the core and truncation radii are set to @xmath29 and @xmath30 , respectively .",
    "the number of particles , in the test calculations , is changed from 10,000 to 100,000 every 10,000 , which may be possible numbers for actual sph simulations with the direct @xmath31 calculations of grape-5 .",
    "the neighbor search radius @xmath19 of each particle is set at the distance of its @xmath32th nearest particle , and we set @xmath14 when no descriptions are given explicitly .",
    "this definition of @xmath19 is often used in sph calculations .",
    "we repeat the neighbor search 10 times for each test calculation , and average them to get benchmark results , since the results are slightly swayed in individual runs .    for the test calculations",
    ", we use a single grape-5 board connected with an alpha 264 processor computer with a clock frequency of 833mhz , which is one of the grape systems in the mitaka under vineyard ( muv ) , run underground at the national astronomical observatory of japan .",
    "table [ tab : time ] summarizes the consumption times in neighbor searches with grape , in cases using random ordering ( r - ordering ) , @xmath1-coordinate ordering ( x - ordering ) , and morton ordering ( m - ordering ) .",
    "the tabulated times include both the data transfers between grape and the host computer , and the calculations for searching neighbors in grape .",
    "the above three orderings differ only in their data transfer times .",
    "figure [ fig : time-2 ] shows a corresponding plot for the isothermal density profile ( @xmath33 ) , where the times for the grape calculations without data transfer are also drawn as crosses .",
    "the differences between crosses and the other marks indicate the times for data transfer and its overhead .",
    " table 1     generally , the consumption times show no clear difference among three density profiles , because grape intrinsically does @xmath31-operations , which do not depend on density profiles .",
    "hence we hereafter discuss only the case for the density profile of an index @xmath33 .",
    "it is evident that m- and x - ordering work faster than r - ordering for any @xmath0 , and that m - ordering is more efficient than x - ordering .    in our grape system , m - ordering works twice as fast as r - ordering for @xmath34 , while x - ordering does only 1.3 times as fast .",
    "m - ordering is 1.5 times faster than r - ordering for @xmath35 , while x - ordering is 1.1 times faster . both m- and x - ordering apparently become less effective for larger @xmath0 on the basis of total calculation time ( figure [ fig : time-2 ] ) , while m - ordering keeps its efficiency even in larger @xmath0 ( see  [ sec : frac ] )",
    "this is because both orderings save only the communication costs , i. e. @xmath36-operations , between grape and the host computer .",
    "however calculations in grape , i.e. @xmath31 , become more dominant for larger @xmath0 .",
    " figure 2     for @xmath37 , the largest number in our tests , x - ordering becomes inefficient , i.e. consuming almost the same amount of time as r - ordering , while m - ordering is still 1.4 times faster than r - ordering .",
    "therefore , m - ordering is best suited for neighbor searches with grape .      in  [ sec :",
    "grape ] we described how the communication time between grape and a host computer is reduced if we make the neighbor lists for 48 particles , kept in a memory unit in a single grape run , overlap each other . in order to describe how much the lists overlap ,",
    "we define the mean data compression factor of neighbor lists as @xmath38 where @xmath39 is a simple sum of the numbers of neighbors for all @xmath40 particles , and @xmath41 is the number of neighbors actually transferred from grape to the host computer , according to the grape specifications (  [ sec : grape ] ) .",
    "we note that this factor does not depend on the speeds of a host computer and an interface between grape and the host computer .",
    "the communication time is reduced in proportion to @xmath42 .",
    "if we consider a single grape run and the case that each of the @xmath43 particles has 60 neighbors , @xmath39 is @xmath15 .",
    "if the neighbors of the 48 particles are completely independent , @xmath41 becomes @xmath15 .",
    "then the compression factor becomes @xmath44 , meaning no compression .",
    "if the neighbor lists are perfectly identical , @xmath41 becomes @xmath45 as described in ",
    "[ sec : grape ] , and then the compression factor takes its theoretical minimum , i.e. @xmath46 [ note that this is an insubstantially ideal case ( see a.[sec : festim ] ) ] . for test calculations with a large number of particles",
    ", the grape run must be repeated many times",
    ". then we average @xmath42 in all the data transfer for neighbor lists in all the runs .",
    "table [ tab : fraction ] lists @xmath42 for all the test calculations , and a corresponding plot for the isothermal profile ( @xmath33 ) are presented in figure [ fig : fraction-2 ] .",
    "the compression factors @xmath42 of r- and x - orderings increase with the number of particles @xmath0 .",
    "the @xmath42 for x - ordering is efficiently as small as 0.5 for @xmath34 ; however it increases to about 0.8 for @xmath37 .",
    "r - ordering shows almost no data compression ( @xmath47 ) , that is , 98% are left for data transfer in the case of @xmath37 . hence x- and r - orderings do not work well for large @xmath0 calculations . on the other hand",
    ", m - ordering keeps @xmath42 almost constant at the low value of 0.13 for all the @xmath0s ( figure [ fig : fraction-2 ] ) .",
    "this is why m - ordering is still effective in large @xmath0 calculations .",
    "the low value of @xmath48 means that the neighbor lists , sorted simultaneously on a single grape memory unit , overlap almost perfectly ( 87% ) , and thus , implies that there is little room for further improvement .",
    "therefore we conclude that our new method ( grape+morton ordering ) is the best for neighbor searches using grape .",
    " table 2      figure 3       figure [ fig : nstime ] shows the @xmath32 dependence of consumption time in the case of the isothermal density profile ( @xmath33 ) and @xmath37 .",
    "we tested the range of @xmath49 , which is used in actual sph calculations .",
    "basically , the consumption times increase with @xmath32 , because the number of neighbor particles , transferred from grape to the host , increases with @xmath32 .",
    "we note , however , that there is another effect that suppresses the increase of time .",
    "the larger @xmath32 means larger radii ( volumes ) of particles , and thus , indicates larger overlap of their neighbor lists .",
    "this reduces data transfer , and results in saving time .",
    "figure [ fig : nsfraction ] shows this effect ; the overlap fractions @xmath42 decrease with increasing @xmath32 . in our realistic range of @xmath32 , m - ordering",
    "shows the best overlap fraction , and thus is the best in any @xmath32 .",
    " figure 4      figure 5 ",
    "we have reviewed the specifications of a special purpose hardware called grape , and introduced a new method which can speed up neighbor searches in large particle simulations using grape .",
    "the main conclusions are the following :    \\1 .",
    "we introduced a new method , that is , arranging particles in a morton order before performing grape calculations .",
    "this method saves the communication cost between grape and its host computer .",
    "the cost for additional programming is very low .",
    "we compare this morton - ordering method with some previous methods , and conclude that the morton - ordering method is much more effective . in a case where the total particle number is @xmath34 ,",
    "the morton - ordering method is twice as fast as a simple neighbor search with grape in our grape system .",
    "communication between grape and its host computer can be minimized if the neighbor lists , stored in a single grape memory unit , overlap each other .",
    "the morton - ordering method reduces the communication by about 90% , thus leaving little room for further improvement .",
    "the morton - ordering method becomes less effective for larger particle simulations , as do the other previous methods , because @xmath31-calculations , other than data transfer , become dominant .",
    "however , it is still efficient for simulations with @xmath37 .",
    "the communication increases with the typical number of neighbor particles .",
    "the morton - ordering method is the best in any number that is usually used in sph calculations .",
    "we showed the efficiency of the morton - ordering method only for grape-5 .",
    "however , it is also suitable for the other versions of grape .",
    "in fact , this method has been effectively used for galaxy formation simulations using grape-3 @xcite .",
    "+ t.r.s . would like to thank asao habe for his encouragement , takashi okamoto and tamon suwa for many useful discussions about coding .",
    "we thank jun makino , the referee , for useful suggestions , which improved appendix .",
    "was supported by the sasakawa scientific research grant from the japan science society(14 - 096 ) .",
    "was financially supported by the japan society for the promotion of science for young scientists .",
    "numerical computations were carried out on the grape system ( project id : g02a09 ) at the astronomical data analysis center of the national astronomical observatory , japan , which is an inter - university research institute of astronomy operated by the ministry of education , science , culture , and sports .",
    "barnes , j.e . , and hut , p. 1989",
    ", , 70 , 389 fukushige , t. and makino , j. , 1997 , , 477 , 9 hernquist , l. , 1990 , , 356 , 359 ito , t. , makino , j. , ebisuzaki , t. , and sugimoto , d. 1990 , computer physics communications , 60 , 187 ito , t. , ebisuzaki , t. , makino , j. and sugimoto , d. 1991 , , 43 , 547 kawai , a. , fukushige , t. , makino , j. , and taiji , m. 2000 , , 52 , 659 klessen , r. 1997 , , 292 , 11 koda , j. , sofue , y. , and wada , k. 2000 , , 531 , 17 koda , j. , sofue , y. , and wada , k. 2000 , , 532 , 214 kokubo , e. and ida , s. 1998 , icarus , 131 , 171 makino , j. dynamical evolution of star clusters , p. hut and j. makino , eds .",
    "( iau symp .",
    "174 , kluwer , dordrecht , netherlands , 1996 ) , pp .",
    "151 - 160 .",
    "makino , j. , and ebisuzaki , t. , 1996 , , 465 , 527 makino , j. , taiji , m. , ebisuzaki , t. , and sugimoto , d. 1997 , , 480 , 432 mori , m. , yoshii , y. , and nomoto , k. 1999 , , 511 , 585 okumura , s. k. , makino , j. ebisuzaki , t. et al .",
    "1993 , , 45 , 3290 steinmetz , m. , and mller , e. 1995 , , 276 , 549 steinmetz , m. 1996 , , 278 , 1005 sugimoto , d. , chikada , y. , ito , t. , ebisuzaki , t. , and umemura , m. 1990 , , 345 , 33 umemura , m. , fukushige , t. , makino , j. , ebisuzaki , t. , sugimoto , d. turner , e. l. , abraham , l. 1993 , , 45 , 311 warren m.s . , and salmon , j.k .",
    "1995 , computer physics communications , 87 , 266 weil , m.l . , eke , v.r . , and efstathiou .",
    "g. 1998 , , 300 , 773",
    "the total calculation time for neighbor search with grape will be modeled as @xmath50 where @xmath51 , @xmath52 and @xmath53 stand for the time consumed on the host computer , that on grape , and that on data transfer of neighbor lists from grape to the host computer , respectively . @xmath51 and @xmath52 are modeled as @xmath54 where @xmath55 and @xmath56 represent the miscellaneous calculation time per particle on the host computer , and the time spent on a two body interaction on grape , respectively .",
    "@xmath0 is the number of particles in calculation .",
    "the total number of neighbor particles transferred from grape to the host computer is @xmath57 , where @xmath32 is the typical number of neighbors for one particle , and @xmath42 is the data compression factor defined in  [ sec : frac ] .",
    "@xmath53 would take a form as @xmath58 where @xmath59 is the time spent on data transfer per neighbor particle . for our grape system ( grape-5 and a host computer with an alpha 264 processor 833mhz ) ,",
    "we obtain the coefficients by fitting , and list them on table [ tab : fitting ] .",
    "figure [ fig : met ] shows a plot of estimated v.s .",
    "measured @xmath60 for r- , x- , and m - orderings .",
    "different symbols are used for different orderings .",
    "all the points are well on the proportional line ( solid ) .",
    " table [ tab : fitting ]",
    "     figure [ fig : met ] ",
    "the data compression factor @xmath42 takes the minimum of @xmath61 in an _ insubstantially _ ideal case that all the @xmath40 particles have an identical neighbor list , however , its actual minimum , occurred in calculation , would be larger .",
    "we estimate the @xmath42 in a _ thoughtfully _ ideal case , and compare it with the results of m - ordering .",
    "we consider the case that the @xmath40 particles ( see  [ sec : grape ] ) are selected very successfully , i.e. the case that their neighbor lists overlap almost as much as possible . since we have shown that @xmath42 does not depend on the distribution of particles (  [ sec : result ] ) , we assume that @xmath0 particles are distributed in a unit sphere with a uniform density , i.e. @xmath62 . in the ideal case ,",
    "the @xmath40 particles themselves must be closest neighbors each other , and be clustered in a small region . in the following",
    "we assume that this region has a spherical form .",
    "the @xmath40 particles are distributed in a sphere with the radius @xmath63 . if we take into account that some of the @xmath40 particles are on the surface of the sphere , and that each of them has @xmath32 neighbors and a radius @xmath64 , then all the neighbors of @xmath40 particles will be _ at least _ within a sphere of the radius @xmath65 .",
    "hence the number of neighbor particles , stored in a grape memory and transferred from grape to the host computer , becomes @xmath66 since the total accumulated number of neighbors for the @xmath40 particles is @xmath67 , @xmath42 is calculated as @xmath68 this @xmath42 does not depend on @xmath0 , and approaches @xmath61 when @xmath69 .",
    "figure [ fig : fraction-2 ] shows this @xmath42 ( dotted line ) .",
    "the results of m - ordering ( squares ) are close to the estimated @xmath42 of this ideal case .",
    "note , we here assumed that all the neighbors are closely packed in an even spherical space with a radius @xmath65 .",
    "however , this assumption is valid only in an infinite limit of @xmath32 , because the actual space occupied by small @xmath32 particles must have uneven surface , which is completely enclosed by our assumed sphere .",
    "then @xmath70 , and @xmath42 , is smaller than that estimated by eq.([eq : ntsphere ] ) .",
    "hence in figure [ fig : fraction-2 ] , m - ordering gives slightly smaller @xmath42 than the estimated one for the spherical case .",
    "this difference becomes smaller with increasing @xmath32 , which is confirmed in figure [ fig : nsfraction ] ( dotted line and squares ) .",
    "( [ eq : festim ] ) gives a thoughtful minimum of @xmath42 that can be occurred in actual calculations .",
    "the fair coincidence of this minimum value with those from m - ordering gives us the confidence that m - ordering is the ideal method for neighbor search in grape - sph ."
  ],
  "abstract_text": [
    "<S> we describe a new method to accelerate neighbor searches on grape , i.e. a special purpose hardware that efficiently calculates gravitational forces and potentials in @xmath0-body simulations . </S>",
    "<S> in addition to the gravitational calculations , grape simultaneously constructs the lists of neighbor particles that are necessary for smoothed particle hydrodynamics ( sph ) . </S>",
    "<S> however , data transfer of the neighbor lists from grape to the host computer is time consuming , and can be a bottleneck . </S>",
    "<S> in fact , the data transfer can take about the same time as the calculations of forces themselves . </S>",
    "<S> making use of grape s special treatment of neighbor lists , we can reduce the amount of data transfer if we search neighbors in the order that the neighbor lists , constructed in a single grape run , overlap each other . </S>",
    "<S> we find that the morton - ordering requires very low additional calculation and programming costs , and results in successful speed - up on data transfer . </S>",
    "<S> we show some benchmark results in the case of grape-5 . </S>",
    "<S> typical reduction in transferred data becomes as much as 90% . </S>",
    "<S> this method is suitable not only for grape-5 , but also grape-3 and the other versions of grape . </S>"
  ]
}