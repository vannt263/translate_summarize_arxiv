{
  "article_text": [
    "the density matrix renormalization group ( dmrg ) @xcite was originally devised @xcite as a tool to accurately determine _ static _ ground state properties of one dimensional systems . from a modern perspective",
    ", the core dmrg algorithm can be formulated elegantly as a variational calculation of the ground state @xmath6 within the class of matrix product states ( mps ) @xcite , @xmath7 due to the area law @xcite , a fairly small matrix ( ` bond ' ) dimension @xmath8 , which encodes the amount of entanglement , is sufficient to describe @xmath6 accurately .",
    "one way to obtain _ correlation functions _ , @xmath9 or to simulate _ non - equilibrium ( quench ) dynamics _",
    "@xmath10 in an arbitrary state @xmath0 , is to directly calculate the real time evolution using a time - dependent dmrg framework @xcite .",
    "the corresponding algorithm can again be formulated elegantly using matrix product states .",
    "the physical growth of entanglement implies that the bond dimension needed to approximate @xmath11 or @xmath12 to a certain accuracy grows with time , often even exponentially .",
    "this limits the accessible time scales .",
    "modified algorithms such as transverse folding @xcite hold the promise of substantially extending the range of simulations , but implementing them in practice requires some effort ( for a comprehensive overview of other available approaches see ref .",
    "@xcite and references therein ) .",
    "it is the main goal of this paper to discuss a few _ simple _ ` recipes ' that allow to reach larger times in dmrg calculations .",
    "we specifically aim at an audience of beginners and ask : assuming that one has a standard mps based dmrg code at hand , what are the most important practical steps necessary to incorporate these recipes ? for colleagues new to the realm of dmrg , we try to advocate the method in general by showing how straightforwardly its core algorithms can be implemented within the python programming language .    _ a factor of two _  the ` standard way ' to obtain the real time correlation function @xmath11 is to compute @xmath13 .",
    "however , one can simply ` exploit time translation invariance ' in this _ equilibrium _ problem , recast eq .",
    "( [ eq : corrgs ] ) as @xmath14 and carry out two separate dmrg simulations for @xmath13 and @xmath15 , respectively .",
    "this allows to reach time scales twice as large as before at no additional effort .",
    "to the best of our knowledge , this was overlooked for a long time and only noticed implicitly in a recent paper @xcite in the specific context of optimizing calculations at finite temperature @xmath16 ( see below ) .",
    "we will now explain practical aspects of how a similar ` trick ' can be implemented in _ non - equilibrium _ to push the quench dynamics described by eq .",
    "( [ eq : quench ] ) to larger times .",
    "_ schrdinger vs.  heisenberg picture  _ the most straightforward way to evaluate eq .",
    "( [ eq : quench ] ) within dmrg is to simulate @xmath17 .",
    "this corresponds to a time evolution in the schrdinger picture .",
    "if one generalizes the concept of a matrix product state to a matrix product operator ( mpo ) , one can alternatively switch to the heisenberg picture and calculate the operator time evolution @xmath18 @xcite .",
    "this is equivalent mathematically but different algorithmically since @xmath18 might have a more efficient representation in terms of a mpo than @xmath17 has in terms of a mps ( or vice versa ) .",
    "indeed , it was shown @xcite that the time evolution of @xmath19 under the spin-@xmath20 xxz hamiltonian @xmath21 + b \\sum_{l=1}^{l } s^z_l\\ ] ] can be expressed exactly in terms of a mpo with a finite bond dimension if @xmath22 . thus , @xmath23 can be simulated up to arbitrary long times for any state @xmath0 using the heisenberg picture , and certainly also for any @xmath1 and @xmath24 if @xmath0 is an eigenstate of @xmath25 using the schrdinger picture . for a general scenario in between those two extreme limits ,",
    "however , one would expect that the bond dimension @xmath8 increases equally fast during the calculation of @xmath17 and @xmath18 .",
    "in this case one can simply split the time evolution between the schrdinger- and heisenberg picture , @xmath26 and evaluate @xmath17 as well as @xmath27 individually .",
    "we will present a few generic examples below ( including the more general situation of quenches at finite temperatures ) and show that in many physical applications eq .",
    "( [ eq : tricka ] ) actually allows to access time scales approximately twice as large as before _ using the same bond dimension_. in light of the fact that @xmath8 often grows exponentially fast , this amounts to major algorithmic savings . as a guide for beginners",
    ", we will point out the most important practical aspects of how to implement the calculation of @xmath28 within an existing mps based dmrg code and discuss the xxz spin chain as well the hubbard model of interacting lattice fermions @xmath29 , @xmath30 + un_{l\\uparrow}n_{l\\downarrow } \\\\ & + \\mu \\big ( n_{l\\uparrow}+n_{l\\downarrow}\\big ) + b \\big ( n_{l\\uparrow}-n_{l\\downarrow}\\big)\\big\\}\\,,~~ n_{l\\sigma}= c_{l\\sigma}^\\dagger c_{l\\sigma}^{\\phantom{\\dagger}}-\\frac{1}{2}\\ , , \\end{split}\\ ] ] as two prototypical examples .",
    "we will particularly elaborate how to incorporate all abelian symmetries @xcite .",
    "this altogether provides a simple recipe to potentially extend the range of simulations at virtually no ( or very little ) effort .    _ finite temperatures  _ standard dmrg methods allow computing the time evolution of a _ pure _ state and are thus not directly applicable at finite temperatures . in order to simulate dynamics at @xmath5",
    ", one can use operator space dmrg @xcite , or ",
    "equivalent mathematically  one can express the thermal statistical operator @xmath31 as a partial trace over a pure state @xmath32 living in an enlarged hilbert space where auxiliary degrees of freedom @xmath33 encode the thermal bath @xcite : @xmath34 a finite-@xmath16 correlation function can in principle be obtained straightforwardly by carrying out real- and imaginary time evolutions of the ( known ) state @xmath35 which purifies @xmath36 at @xmath37 @xcite : @xmath38 = \\langle\\psi_t|a(t)b |\\psi_t\\rangle \\sim \\langle\\psi_\\infty|e^{-h/2t}a(t)be^{-h/2 t } |\\psi_\\infty\\rangle\\,.\\ ] ] in practice , however , the time scales accessible at nonzero @xmath16 are considerably smaller than those at @xmath39 @xcite . in ref .",
    "@xcite it was shown that one can exploit the fact that purification is not unique to push simulations to larger times .",
    "in particular , one can insert any unitary transformation @xmath40 which solely acts on the auxiliary hilbert space @xmath33 into eq .",
    "( [ eq : corrt ] ) : @xmath41 it turned out that choosing @xmath42 , i.e. a time evolution in @xmath33 governed by the physical hamiltonian ( where physical degrees of freedom are replaced by auxiliary ones ) but reversed time leads to a slower increase of the bond dimension , and thus longer time scales can be reached ( a systematic way to further optimize @xmath43 was introduced in refs .",
    "@xcite ; particularly at low temperatures , this allows to access larger times ) . in the realm of ref .",
    "@xcite , however , the specific form of @xmath42 was nothing but a ` lucky guess ' .",
    "( [ eq : aux ] ) was subsequently mapped to a problem of time - evolving operators @xcite , which then provided an understanding of the ` disentangler ' @xmath43 . while mathematically equivalent , we aim at reformulating the argument of ref .",
    "@xcite in the _ simplest possible _",
    "way for didactic purposes .",
    "more importantly , this yields an explanation for why the signs of certain terms in @xmath44 need to be reversed ( and provides a strategy to determine which ones ) if symmetries are exploited in the mps formalism .    the finite - temperature analogue of eq .",
    "( [ eq : trickc ] ) reads @xcite @xmath45 = \\langle\\psi_t|a(t)b(-t ) |\\psi_t\\rangle\\,.\\ ] ] in principle , @xmath46 can be computed straightforwardly within any mps based dmrg formalism . in practice , however , the forward and backward time evolutions in @xmath47 need to be carried out individually for each @xmath48 in order to obtain @xmath49 for all @xmath50 $ ]  a problem which does not occur for the ground state correlation function of eq .",
    "( [ eq : trickc ] ) . moreover , if @xmath1 can only be written as a sum of @xmath51 local operators , one generally needs to evaluate each term separately .",
    "we will illustrate below that both problems can be circumvented and that eq .",
    "( [ eq : trickct ] ) can be implemented effortlessly within mps based dmrg .    in the remainder of this paper we elaborate on the above - mentioned issues and present concrete examples .",
    "we perform dmrg calculations using a fixed small discarded weight and a 4th order trotter decomposition @xcite of the time evolution operators . as our paper aims at an audience familiar with basics of the method , we refrain from giving a more detailed introduction but refer the reader to refs .",
    "@xcite .     in a neel state @xmath52 under the xxz hamiltonian of eq .",
    "( [ eq : h ] ) with @xmath53 , @xmath54 , and @xmath55 . if the time evolution is split equally between the schrdinger and heisenberg pictures via eq .",
    "( [ eq : tricka ] ) , the simulation can be pushed to larger times with no additional effort .",
    "( b ) growth of the bond dimension @xmath8 during the evaluation of @xmath56 and @xmath57 .",
    "note that the latter can be computed straightforwardly within any existing mps based implementation of the method ( see sec .",
    "[ sec : mpo ] for details).,title=\"fig : \" ]    in a neel state @xmath52 under the xxz hamiltonian of eq .",
    "( [ eq : h ] ) with @xmath53 , @xmath54 , and @xmath55 . if the time evolution is split equally between the schrdinger and heisenberg pictures via eq .",
    "( [ eq : tricka ] ) , the simulation can be pushed to larger times with no additional effort .",
    "( b ) growth of the bond dimension @xmath8 during the evaluation of @xmath56 and @xmath57 .",
    "note that the latter can be computed straightforwardly within any existing mps based implementation of the method ( see sec .",
    "[ sec : mpo ] for details).,title=\"fig : \" ]",
    "we study the time evolution of an observable @xmath58 in an arbitrary state @xmath0 as well as the more general scenario of a quench at finite temperature , @xmath59\\,,\\ ] ] where @xmath4 is some initial density matrix .",
    "we focus on the xxz spin chain defined by eq .",
    "( [ eq : h ] ) , which can be mapped to spinless lattice fermions with a nearest - neighbor coulomb interaction @xmath60 . if one ` combines ' the schrdinger- and heisenberg pictures through eq .",
    "( [ eq : tricka ] ) or its @xmath5 analogue , @xmath61\\,,\\ ] ] calculates @xmath17 or @xmath62 as well as @xmath27 separately , and stops each simulation at times @xmath63 and @xmath64 where a fixed bond dimension is reached , one can _ always _ reach larger time scales @xmath65 . for details .",
    "] in practice , however , @xmath63 might be significantly smaller than @xmath64 or vice versa , and the additional effort to implement eqs .",
    "( [ eq : tricka ] ) and ( [ eq : trickat ] ) might not be justified .",
    "this is certainly the case if either @xmath0 is close to an eigenstate of @xmath25 ( if @xmath4 is close to the thermal density matrix ) , or if the time evolution of @xmath1 can be expressed efficiently in terms of a mpo ( e.g. , for @xmath66 and @xmath22 ) .",
    "however , one would expect that for a large class of problems both simulations are ` equally complex ' , and that thus @xmath67 .",
    "we will now study this for two generic physical problems .",
    "we first investigate the time evolution of @xmath19 in a neel state @xmath52 , which is an example for a _ global quantum quench_. we know that @xmath68 can be computed trivially 1 ) in the schrdinger picture for @xmath69 , or 2 ) in the heisenberg picture for @xmath22 . for a generic value of @xmath70",
    ", however , the bond dimension grows equally fast during the evaluation of @xmath56 and @xmath71 .",
    "this is shown in figure [ fig : neel](a , b ) for @xmath53 ( results for @xmath72 and @xmath73 look similar ) . combining the schrdinger and heisenberg picture",
    "thus allows to access time scales roughly twice as large [ see figure [ fig : neel](a ) ] using the same @xmath8 .",
    "since @xmath8 typically grows exponentially fast ( by extrapolation one can estimate the bond dimension required to reach @xmath74 within the schrdinger picture to be @xmath75 ) , this amounts to major algorithmic savings .    as a second example",
    ", we study a _ local quench _ at finite temperature described by an initial density matrix @xmath76 .",
    "this models a wave packet of four up - spins surrounded to its left and right by chains in thermal equilibrium .",
    "we focus on the isotropic xxz chain ( @xmath73 ) and compute the time evolution of @xmath19 via @xmath77 = \\langle \\psi_\\rho| e^{iht } s^z_le^{-iht } |\\psi_\\rho\\rangle\\ , , ~~\\rho={\\textnormal}{tr}_q|\\psi_\\rho\\rangle\\langle\\psi_\\rho|\\,,\\ ] ] where the state @xmath78 which purifies @xmath4 can be obtained straightforwardly from @xmath79 and the trivial purification of @xmath80 .",
    "we separately calculate @xmath81 , where we insert @xmath82 to reduce the buildup of entanglement @xcite , as well as @xmath71 .",
    "as illustrated in figure [ fig : wavep ] , the bond dimension grows comparably fast during both simulations , and thus larger time scales can be reached if they are combined .",
    "note that the ` standard ' approach ( e.g. , used in ref .",
    "@xcite ) is to time - evolve only the state @xmath78 but not @xmath19 .     following a local quench at finite temperatures . at time @xmath83 , a ` wave packet ' of four up - spins is prepared at the center of an isotropic xxz chain ( @xmath73 , @xmath54 ) of length @xmath55 which is otherwise in thermal equilibrium .",
    "this initial geometry is described by a density matrix @xmath84 .",
    "one can calculate @xmath85 $ ] either by a straightforward time evolution of the state which purifies @xmath4 @xcite , or using @xmath86 $ ] and time - evolving @xmath87 as well as @xmath88 separately .",
    "the latter allows to perform the simulation up to larger times .",
    ", title=\"fig : \" ]   following a local quench at finite temperatures . at time @xmath83 , a ` wave packet ' of four up - spins is prepared at the center of an isotropic xxz chain ( @xmath73 , @xmath54 ) of length @xmath55 which is otherwise in thermal equilibrium .",
    "this initial geometry is described by a density matrix @xmath84 .",
    "one can calculate @xmath85 $ ] either by a straightforward time evolution of the state which purifies @xmath4 @xcite , or using @xmath86 $ ] and time - evolving @xmath87 as well as @xmath88 separately .",
    "the latter allows to perform the simulation up to larger times .",
    ", title=\"fig : \" ]",
    "in this section , which solely aims at dmrg beginners , we discuss a few practical aspects of how to simulate the operator time evolution @xmath27 @xcite using an existing mps based dmrg implementation .",
    "put differently : we want to provide a simple practical guide of how to calculate @xmath27 assuming that one has a standard dmrg code at hand which allows to compute the time evolution of a state .",
    "we start by noting that any @xmath1 can ( in principle ) always be expressed as a mpo @xmath89 } = \\sum_{\\{\\sigma_{l}\\}}\\sum_{\\{\\tilde\\sigma_{l}\\ } } a^{\\sigma_1,\\tilde\\sigma_1}\\cdot a^{\\sigma_2,\\tilde\\sigma_2 } \\cdots a^{\\sigma_l,\\tilde\\sigma_l } |\\{\\sigma_{l}\\}\\rangle\\langle\\{\\tilde\\sigma_{l}\\}|\\,\\ ] ] if one allows for an exponentially large bond dimension @xmath90 @xcite .",
    "fortunately , most physical observables have a representation in terms of a mpo with a small @xmath91 that can be obtained by mere inspection ; e.g.  @xmath92 is a trivial mpo with @xmath93 ( see sec .  [",
    "sec : fac2 ] for a more complex example ) .",
    "we will now discuss two alternative approaches of how to simulate @xmath27 provided that the mpo representation of @xmath1 is known .",
    "in particular , we will illustrate that abelian symmetries can be exploited straightforwardly ; it is thus instructive to recapitulate how such symmetries are generally incorporated within dmrg numerics ( we follow ref .",
    "@xcite ) . to this end , let us consider an eigenstate @xmath0 of an operator @xmath94 which defines an additive local quantum number , @xmath95 .",
    "one can show recursively that @xmath0 can be expressed as a mps whose ` block states ' @xmath96 with a quantum number of @xmath97 ; this implies that all matrix elements in eq .",
    "( [ eq : mps ] ) vanish except for those with @xmath98 and the same obviously holds for the time - evolved state @xmath17 if @xmath99=0 $ ] .",
    "( [ eq : sym ] ) can be readily incorporated within a dmrg code to significantly reduce the computational effort  for the problems studied in this work , numerics speed up by a factor of 10 for a bond dimension of @xmath100 . if the model at hand features more than one abelian symmetry , this can be exploited within any existing code without having to modify it at all : in case of the hubbard model where both the total spin and charge are conserved , one simply assigns the following quantum numbers to the states @xmath101 which span its local hilbert space : @xmath102 where @xmath103 is an arbitrary integer .",
    "this automatically accounts for both spin and charge conservation ( @xmath103 guarantees the separation of the two symmetries ) .",
    "other models / symmetries can be treated analogously .    _ the trivial way _  the coefficients @xmath104 appearing in eq .",
    "( [ eq : mpo ] ) are nothing but the coefficients of a matrix product state whose local hilbert space is @xmath105-dimensional and parametrized by a superindex @xmath106 .",
    "the time evolution operators @xmath107 ( acting on @xmath108 ) as well as @xmath109 ( acting on @xmath110 ) can thus be applied directly using an existing mps based dmrg code @xcite .",
    "the only ( minor ) subtlety is how to incorporate abelian symmetries ( in case that the initial @xmath1 respects them ) to speed up the calculation .",
    "if @xmath111 is conserved , this can be exploited by assigning a quantum number @xmath112 to the local states @xmath113 within the mps numerics ; for a spin-@xmath20 system ( @xmath114 ) and @xmath115 , the @xmath116 s read @xmath117 other symmetries follow analogously .",
    "the computational effort of this approach scales as @xmath118 @xcite .    _ employing finite-@xmath16 numerics _  for models with a large local hilbert space dimension ( such as the hubbard model where @xmath119 ) one can resort to an alternative approach . after recasting the coefficients in eq .",
    "( [ eq : mpo ] ) via a singular value decomposition ( svd ) , @xmath120_{a_l , a_{l+1 } } = a_{(a_l\\sigma_l),(a_{l+1}\\tilde\\sigma_l ) } & \\stackrel{{\\textnormal}{svd}}{= } \\sum_{s_l } u_{(a_l\\sigma_l),s_l } s_{s_l } v_{s_l,(a_{l+1}\\tilde\\sigma_l ) } \\\\ & \\stackrel{\\phantom{{\\textnormal}{svd}}}{= } \\sum_{s_l}\\ , [ m^{\\sigma_l}]_{a_l , s_l } [ \\tilde m^{\\tilde\\sigma_l}]_{s_l , a_{l+1}}\\ , , \\end{split}\\ ] ] the ( appropriately normalized ) matrices @xmath121 and @xmath122 define a mps whose local hilbert space dimension is reduced back to @xmath123 . however , @xmath124 and @xmath125 are now next - nearest neighbors , and @xmath107 therefore contains longer - ranged interactions ( the same holds for @xmath109 which couples the @xmath126 ) . computing",
    "the time evolution @xmath27 is thus just as easy ( or hard ) as it is to simulate dynamics at finite temperatures ( note that now _ all sites _ are physical ones ) .",
    "one can exploit @xmath127-conservation ( or any other abelian symmetry ) by simply performing a spin - flip transformation @xmath128 , which then allows to straightforwardly employ the usual quantum numbers @xmath129 , @xmath130 .",
    "the numerical cost to carry out the time evolution @xmath27 scales as @xmath131 .",
    "it seems instructive to illustrate the algorithmic simplicity of the second approach for two concrete examples : in order to calculate @xmath71 or the kinetic energy @xmath132(t)/\\delta$ ] for a heisenberg chain , one needs to time - evolve the states @xmath133 under @xmath134 which now contain purely next - nearest neighbor interactions between either only odd or even sites .",
    "this is almost completely equivalent to simulating a time evolution @xmath135 at finite temperature and can thus be achieved directly with any code that can access @xmath5 dynamics .",
    "while carrying out the time evolution scales as @xmath136 in both approaches , computing @xmath137 requires an overlap calculation which scales as @xmath138 .",
    "thus , the latter will eventually dominate the numerical effort and render it impossible to combine the schrdinger and heisenberg pictures .",
    "as already illustrated by figures [ fig : neel ] and [ fig : wavep ] ( whose data was obtained effortlessly ) , this is not the case in most practical applications .",
    "the reason for this pragmatic observation is two - fold : first , computing an overlap involves matrix multiplications , which are _ significantly _ faster than carrying out a singular value decomposition ( the bottleneck in the time evolution algorithms ) , even if one employs a svd routine from highly optimized libraries such as intel s math kernel library . moreover , the overlap calculation is highly parallelizable and scales much better with the number of low - level threads ( typically 24 in our case ) than the svd for bond dimensions that occur in practice .",
    "second , the additional factor of @xmath8 needs to be compared to the ( typically ) much faster growth of @xmath8 due to the buildup of entanglement : computing @xmath139 in figure [ fig : neel](a ) up to times @xmath74 within the schrdinger picture would require a bond dimension of roughly @xmath75 as opposed to @xmath140 if both pictures are combined .",
    "it was shown in refs .",
    "@xcite that one can exploit the fact that purification is not unique to push finite - temperature simulations to larger times : @xmath141 = \\langle\\psi_t|a(t)b |\\psi_t\\rangle = \\langle\\psi_t|u_q^\\dagger a(t)u_q^{\\phantom{\\dagger}}b |\\psi_t\\rangle\\,.\\ ] ] for didactic reasons , we will now give the simplest possible ( yet missed in ref .",
    "@xcite ) analytic argument for why the particular choice @xmath142  i.e. , evolving @xmath33 backwards in time with the physical hamiltonian @xmath44 acting on the auxiliary degrees of freedom  succeeds in reducing the growth of entanglement ( see also ref .",
    "@xcite , which introduced a systematic way to further optimize @xmath43 , as well as the discussion in the introduction of our paper ) .",
    "we present a straightforward way to determine whether or not the sign of any terms in @xmath44 need to be flipped if for a given model abelian symmetries are incorporated within the mps numerics .",
    "let us begin with the heisenberg chain defined in eq .",
    "( [ eq : h ] ) and try to analytically understand the time evolution of the state @xmath79 which purifies the density matrix . since @xmath143 and @xmath25 commutes with @xmath44 , it is sufficient to study @xmath144 . starting from ref .",
    "@xcite , we need to choose @xmath35 as follows in order to exploit the conservation of the total ( physical plus auxiliary ) spin : @xmath145 where we have combined physical and auxiliary degrees of freedom @xmath108 and @xmath146 to a single site whose hilbert space is spanned by @xmath147 . applying @xmath148",
    "then induces the following transitions between neighboring sites : @xmath149 where @xmath150 , @xmath151 , and @xmath152 .",
    "the time evolution of @xmath35 governed by @xmath148 is thus non - trivial ; entanglement starts to build up .",
    "however , applying @xmath153 induces the same transitions but with opposite sign and hence undoes this damage : @xmath154[-{\\rm sign_1}(y ) ] ( -\\delta/4)\\;\\;x|y \\\\ x |y\\;\\;&\\stackrel{(b)(\\mathbbm{1}\\otimes s^z)\\otimes(\\mathbbm{1}\\otimes \\mathbbm{1})}{\\longrightarrow}\\;\\;(b/2)[-{\\rm sign_1}(x ) ] \\;\\;x|y \\ , , \\end{split}\\ ] ] _ if additionally the sign of the magnetic field @xmath155 is reversed in @xmath44_. the total time evolution governed by @xmath156 therefore becomes trivial , or put differently : while @xmath35 is not an eigenstate of @xmath25 alone , it is an eigenstate of @xmath157 ( and the same holds for @xmath79 ) .",
    "the calculation of @xmath158 is therefore only plagued by an entanglement building up around the region where @xmath1 acts ( the physical reason being quasi - locality @xcite ) .",
    "this simple fact , which was missed in ref .",
    "@xcite , explains why the particular choice @xmath159 reduces the growth of entanglement during calculations at finite temperature ( see also ref .",
    "@xcite ) . the hubbard model defined in eq .",
    "( [ eq : h2 ] ) can be analyzed analogously , and it turns out that if @xmath35 is chosen such that one can exploit the conservation of both the total spin and the total charge , the signs of @xmath160 and @xmath155 need to be reversed in @xmath44 .",
    ", @xmath54 ) at infinite temperature .",
    "if one ` exploits time translation invariance ' @xmath161 $ ] , one can access time scales twice as large at virtually no additional effort @xcite .",
    "the calculation can be carried out efficiently within a mps based dmrg code ( see sec .  [",
    "sec : fac2 ] ) . ]",
    "to the best of our knowledge , it was overlooked for a long time ( and only recently noticed in ref .",
    "@xcite in an implicit way in the specific context of optimizing calculations at @xmath5 ) that one can simply ` exploit time translation invariance ' in equilibrium correlation functions to extend the range of simulations by a factor of two : @xmath162 = \\langle\\psi_t|a(t)b(-t ) |\\psi_t\\rangle\\ , .",
    "\\end{split}\\ ] ] at @xmath39 one needs to carry out two individual calculations for @xmath15 as well as @xmath13 , which can be done straightforwardly using mps dmrg ( at least if @xmath1 and @xmath163 are local operators ; we will come back to this below ) . at @xmath5",
    ", one needs to perform a separate calculation of @xmath164 for every @xmath50 $ ] ( and likewise for @xmath163 ) , which is possible @xcite but costly .",
    "however , given the ` insights ' of the previous section that @xmath79 is an eigenstate of @xmath157 , we can recast eq .",
    "( [ eq : trickc2 ] ) as @xmath165 and are left with the significantly simpler task to calculate @xmath166 ( as well as @xmath167 ) via a single dmrg simulation up to the time @xmath168 .",
    "note that the ` disentangler ' @xmath43 is automatically included in eq .",
    "( [ eq : backt ] ) .    in case that @xmath1 is given by a product of local operators ( e.g. , @xmath19 or @xmath169 )",
    ", it can be applied straightforwardly to a mps representation of @xmath6 or @xmath79 without increasing its dimension @xmath8 .",
    "if @xmath1 contains an arbitrary sum of products of local operators @xmath170 , one could simply carry out a separate dmrg calculation for each @xmath171 or @xmath172 .",
    "this is possible in principle @xcite but typically increases the computational effort by a factor of the order of the system size .",
    "it can be avoided trivially in case that @xmath1 can be expressed in terms of a mpo with a small bond dimension .",
    "we will now discuss one instructive example for didactic purposes .",
    "let us assume that we want to calculate the autocorrelator @xmath173 of the global spin current @xmath174 , @xmath175 for the xxz chain defined in eq .",
    "( [ eq : h ] ) .",
    "spatial translation invariance stipulates @xmath176 , and in absence of a magnetic field ( @xmath54 ) spin flip symmetries yields @xmath177 , where @xmath178 . instead of computing each term in @xmath179 individually @xcite",
    ", one can express @xmath180 in terms of a matrix product operator @xmath181}$ ] with @xmath182}= \\begin{pmatrix } 0 & \\frac{s^+_1}{2i } & 0         \\end{pmatrix},~j_\\uparrow^{[l=2\\ldots l-1]}= \\begin{pmatrix } 1 & 0 & 0 \\\\ s^-_l & 0 & 0 \\\\ 0 & \\frac{s^+_l}{2i } & 0         \\end{pmatrix},~j_\\uparrow^{[l]}= \\begin{pmatrix } 1 \\\\ s^-_l \\\\ 0         \\end{pmatrix}\\,.\\ ] ] applying @xmath183 to @xmath79 yields a new mps ( with a bond dimension increased by a factor of 3 ) , which can then be time evolved via @xmath184 .",
    "this altogether illustrates that eq .",
    "( [ eq : trickc2 ] ) can be incorporated readily .",
    "an example for how this ` trick ' allows to reach larger time scales is shown in figure [ fig : jj ] .",
    "in this section , we illustrate the numerical simplicity of the core dmrg algorithms ( thoroughly described in ref .",
    "@xcite ) if implemented within the python programming language .",
    "we hope to advocate the method to colleagues new to its realm and try to stimulate the development of new dmrg codes .",
    "let us assume that we want to time evolve a given mps whose matrices @xmath124 are expressed in the ` @xmath185 form ' @xmath186 as usual , the local hilbert space and ( position - dependent ) bond dimensions are denoted by @xmath123 and @xmath187 , respectively . after a trotter decomposition of @xmath109 ,",
    "the key task is to apply local operators @xmath188 to eq .",
    "( [ eq : mps ] ) .",
    "the first step ( labeled ` step 1 ' in the python code below ) is to form the three - site wave function @xmath189 where we have randomly set @xmath190 to keep the notation simple .",
    "next ( step 2 ) , we apply @xmath191 , @xmath192 and carry out a singular value decomposition ( svd ) of the appropriately reshaped tensor @xmath193 ( step 3 ) : @xmath194 the updated matrices @xmath195 , @xmath196 , and @xmath197 are then obtained as ( step 4 ) @xmath198 where we ignore the subtlety of a numerical division by ( potentially ) small singular values @xcite . the bond dimension @xmath199 increased by a factor of @xmath123 ; it is usually truncated down to a given @xmath200 , and the associated error is controlled by the discarded weight @xmath201 the above steps can be implemented straightforwardly within python :    [ source , python ] ---- import numpy as np    def bond(l0 , g0 , l1 , g1 , l2 , d , chi1_max , o ) :      # initial bond dimensions    chi0=len(l0 ) ; chi2=len(l2 )         # step 1 : form 3-site tensor    psi = np.tensordot ( np.diag(l0 ) , g0          , axes=(1,1 ) )    psi = np.tensordot ( psi         , np.diag(l1 ) , axes=(2,0 ) )    psi = np.tensordot ( psi         , g1          , axes=(2,1 ) )    psi = np.tensordot ( psi         , np.diag(l2 ) , axes=(3,0 ) )         # step 2 : apply local time evolution operator    phi = np.tensordot ( psi , o , axes=([1,2],[0,1 ] ) )    phi = np.transpose ( phi , ( 2,0,3,1 )      )    phi = np.reshape   ( phi , ( d*chi0,d*chi2 ) )         # step 3 : singular value decomposition    u , s , v = np.linalg.svd(phi,0 )                 # step 4 : truncate and reshape    chi1 = min ( len(s ) , chi1_max )       discarded = np.sum(s[chi1:]**2 ) / np.sum(s**2 )    tilde_l1 = s[0:chi1 ] / np.sqrt(np.sum(s[0:chi1]**2 ) )         u         = np.reshape   ( u[:,0:chi1 ] , ( d , chi0,chi1 ) )    u         = np.tensordot ( u , np.diag(1.0/l0 ) , axes=(1,0 ) )    tilde_g0 = np.transpose ( u , ( 0,2,1 ) )         v         = np.reshape   ( ( v.t)[:,0:chi1 ] , ( d , chi2,chi1 )   )    tilde_g1 = np.tensordot (   v , np.diag(1.0/l2 ) , axes=(1,0 ) )             return tilde_g0 , tilde_l1 , tilde_g1 , discarded ----    where @xmath202 and @xmath203 are arrays of size @xmath187 and @xmath204 , respectively .",
    "the by far most time consuming parts of this algorithm are matrix multiplications ( ` tensordot ' ) as well as the singular value decomposition , which are elegantly wrapped to lapack routines through the ` numpy ' package .",
    "the numerical overhead due to the inefficiency of python is almost completely negligible .",
    "significant speedups can be achieved 1 ) by compiling numpy using an efficient and parallelized implementation of lapack ( e.g. , intel s math kernel library ) , and 2 ) by carrying out the time evolution on different bonds in parallel via high - level parallelization in python .",
    "generalizing the above routine to a next - nearest neighbor interaction is extremely straightforward .",
    "abelian symmetries can be incorporated readily and speed up calculations by a factor of @xmath205 for a bond dimension of @xmath206 ( exploiting continuous symmetries , however , is a challenging task @xcite ) .",
    "we discussed a few simple tricks to extend the range of time - dependent dmrg simulations .",
    "in particular , we illustrated 1 ) how to ` combine ' the schrdinger- and heisenberg picture in the evaluation of @xmath207 as well as for similar quench dynamics at finite temperatures , 2 ) how to compute @xmath27 within a mps based dmrg code , 3 ) how to efficiently exploit time translation invariance in equilibrium correlation functions , and 4 ) how to analytically understand why a recently - introduced disentangler succeeds in reducing the entanglement growth of calculations at @xmath5 .",
    "aiming at beginners , we presented the most important aspects of how to implement these tricks in practice ."
  ],
  "abstract_text": [
    "<S> we discuss a few simple modifications to time - dependent density matrix renormalization group ( dmrg ) algorithms which allow to access larger time scales . </S>",
    "<S> we specifically aim at beginners and present practical aspects of how to implement these modifications almost effortlessly within any standard matrix product state ( mps ) based formulation of the method . </S>",
    "<S> most importantly , we show how to ` combine ' the schrdinger and heisenberg time evolutions of arbitrary pure states @xmath0 and operators @xmath1 in the evaluation of @xmath2 . </S>",
    "<S> this includes quantum quenches . </S>",
    "<S> the generalization ( non-)thermal mixed state dynamics @xmath3 $ ] induced by an initial density matrix @xmath4 is straightforward . in the context of equilibrium ( ground state or finite temperature @xmath5 ) correlation functions </S>",
    "<S> , one can extend the simulation time by a factor of two by ` exploiting time translation invariance ' , which is efficiently implementable within mps dmrg . </S>",
    "<S> we present a simple analytic argument for why a recently - introduced disentangler succeeds in reducing the effort of time - dependent simulations at @xmath5 . </S>",
    "<S> finally , we advocate the python programming language as an elegant option for beginners to set up a dmrg code . </S>"
  ]
}