{
  "article_text": [
    "a _ deterministic finite automata _ ( dfa ) @xmath8 is a triple @xmath9 where @xmath10 is the state set , @xmath11 is the input alphabet and @xmath12 is the _ transition function_. if @xmath13 is completely defined on @xmath14 then @xmath8 is called _ complete _ , otherwise @xmath8 is called _",
    "partial_. the function @xmath13 extends uniquely to a function @xmath15 , where @xmath16 stands for the free monoid over @xmath11 ; the latter function is still denoted by @xmath13 .",
    "when we have specified a dfa @xmath17 , we can simplify the notation by writing @xmath18 instead of @xmath19 for a subset @xmath20 and a word @xmath21 . in what follows",
    ", we assume @xmath22 because the singleton alphabet case is trivial for considered problems .",
    "given a subset of words @xmath23 and a state @xmath24 denote by @xmath25 the subset of words from @xmath26 labeling some path from @xmath24 in @xmath8 .    a dfa @xmath27 is called _ synchronizing _ if there exists a word @xmath28 such that @xmath29 .",
    "notice that here @xmath30 is not assumed to be defined at all states .",
    "each word @xmath30 with this property is said to be a _",
    "word for @xmath8 .",
    "the minimum length of such words is called the _ reset threshold _ of @xmath8 and is denoted by @xmath31 .",
    "the synchronization of strongly connected partial automata as models of _ @xmath0-machines _ is one of the central object for research in the theory of stationary information sources .",
    "the synchronization and state prediction for stationary information sources has many applications in information theory and dynamical systems .",
    "an @xmath0-machine can be defined as a strongly connected dfa with a probability distribution defined on the outgoing arrows for each state , without states with _ probabilistically equivalent future _ ( see  @xcite,@xcite for details ) .",
    "hence by @xmath0-machine we mean the tuple @xmath32 where @xmath33 is the strongly connected partial automaton and @xmath34 for the probability of generating @xmath35 from @xmath36 instead of @xmath37 is the probability distribution on the outgoing arrows .",
    "formally ,    * @xmath38 for each state @xmath39 ; * @xmath40 whenever @xmath35 is undefined on @xmath39 ; * for each states @xmath41 there is a word @xmath42 such that @xmath43 ,    where the probability @xmath44 of generating a given word @xmath45 from the state @xmath24 is defined inductively by @xmath46 .    an @xmath0-machine is _ exactly synchronizable _ or simply _ exact _ if the corresponding partial strongly connected automaton is synchronizing in our terms .",
    "given an initial probability distribution @xmath47 on the states of an @xmath0-machine , the probability of generating a word @xmath48 is equal to the weighted sum @xmath49 .",
    "based on various applications , there are two basic settings for synchronization . in the first",
    "setting , the observer knows that an error appeared in the corresponding system and he can apply the reset sequence for reestablishing correct behavior of the system .",
    "apparently , the most natural measure of synchronization in this setting is the reset threshold of the corresponding automaton .",
    "this is because the reset threshold corresponds to the minimum time required to find out the current system state .    in the second",
    "setting , observer either does nt know that an error appeared or can not affect to the system after that . for such situations",
    "it is natural to estimate either the probability of generating a reset word ( if it exists ) by the system itself or the average uncertainty in predicting the current state by the generated sequence in a given period of time .",
    "let @xmath50 be an exact @xmath0-machine and denote @xmath51 .",
    "it has been proved in  @xcite that the probability of generating only non - reset words of length @xmath1 decay exponentially fast as @xmath52 where @xmath53 is a so - called _ synchronization rate constant _ can be defined as @xmath54 where @xmath55 is the set of non - reset words of length @xmath1 and @xmath56 is a steady state distribution on the states .",
    "since @xmath8 is strongly connected , this value does nt depend on the initial distribution @xmath56 .",
    "it is also shown in  @xcite that the synchronization rate constant can be approximated with any given accuracy in exponential time in terms of the number of machine states @xmath57 . in this section",
    "we show how to approximate @xmath58 with any given accuracy in polynomial time . as well as in  @xcite",
    ", for this purpose , let us consider the auxiliary _ _ semi @xmath0-machine__-machine we mean a partial automaton with edges weighted by real numbers in the range @xmath59 $ ] . we still refer to these weights as probabilities . ]",
    "@xmath60 where @xmath61 . given a pair of different states @xmath62 and a letter @xmath63 ,",
    "define @xmath64 @xmath65    let @xmath66 be the @xmath67 matrix of the transition probabilities of @xmath68 for the letter @xmath69 indexed by the states of @xmath70 .",
    "that is , for each two states of @xmath71 the entry on the intersection of @xmath72-th row and @xmath73-th column is given by @xmath74 the transition probability matrix @xmath75 of @xmath68 is now defined as the sum @xmath76    let @xmath77 be the sum of @xmath78-th row entries of @xmath79 .",
    "notice that by definition  [ pr2def ] , @xmath77 is the probability of generating words by @xmath0-machine @xmath8 of length @xmath1 from @xmath24 which does nt merge the pair @xmath80 .",
    "define also @xmath81 a construction of a polynomial time algorithm for approximation synchronization rate constants is based on the following theorem .",
    "[ th_comp_synchconst]for each state @xmath82 the probability of generating a non - reset sequence of length @xmath1 from @xmath24 is upper bounded by @xmath83 and is lower bounded by @xmath84 .",
    "let @xmath48 be a non - reset word of length @xmath1 generated by @xmath8 from the state @xmath24 .",
    "then there exists another state @xmath39 such that @xmath48 does nt merge @xmath24 and @xmath36 in @xmath8 .",
    "this means that @xmath48 takes the pair @xmath78 to another proper pair @xmath85 and thus the probability of generating this word is included in @xmath77 .",
    "the upper bound follows .",
    "now let @xmath36 be the state such that @xmath86 .",
    "let @xmath42 be a word of length @xmath1 which does nt merge the pair @xmath87 , that is , @xmath42 is an arbitrary word which probability is included in the @xmath78-th row .",
    "then @xmath42 is non - reset and the lower bound follows .",
    "since @xmath8 is strongly connected and synchronizing , it has a unique positive steady state distribution @xmath88 ( see e.g.  @xcite ) .",
    "hence we get the following corollary .",
    "[ cor_bounds ] @xmath89    thus we get that the probability of generating non - reset words of length @xmath1 is lower bounded by @xmath90 and is upper bounded by @xmath91 .",
    "taking the power @xmath92 we get that the synchronization rate constant is given by the maximal eigenvalue of the transition probabilitiy matrix @xmath75 whence the main result of this section follows .",
    "[ main_th ] given an exact @xmath57-state @xmath0-machine @xmath8 , its synchronization rate constant can be approximated in a polynomial time @xmath93 for arbitrary small absolute error @xmath94 .",
    "notice also , that corollary  [ cor_bounds ] can be used to estimate the probability of generating non - reset words of a given length in a polynomial time .",
    "in the previous section we show how to compute synchronization rate constants for exact @xmath0-machines .",
    "it turns out that if an @xmath0-machine is not exact , it is still can be synchronized but only asymptotically , that is , for almost every infinite word @xmath95 the observer uncertainty decay exponentially fast as @xmath96 after reading @xmath1 first symbols of @xmath97  @xcite .",
    "let an @xmath0-machine @xmath98 generates a word @xmath30 , denote by @xmath99 the observer _ belief distribution _ , that is , @xmath100 where @xmath101 and @xmath56 is the initial distribution of @xmath8 . clearly , @xmath102 is a stochastic vector and @xmath36-th entry is equal to the probability that @xmath8 is in the state @xmath36 after generating @xmath30 . in particular , if @xmath30 is reset then @xmath102 has only one non - null entry , equals @xmath4 .",
    "let @xmath103 be the random variable for the belief distribution over states induced by the first length-@xmath1 word the machine generates , and @xmath104 be the most likely state in @xmath105 ( if a tie the lowest numbered state is taken ) .",
    "denote by @xmath106 the combined probability of all other states in the distribution @xmath105 .",
    "then @xmath8 is said to be _ asymptotically synchronizing _ if @xmath107 vanishes to @xmath108 while @xmath109 for each @xmath94 .",
    "in other words , for almost every infinite word the observer uncertainty in predicting the current machine state vanishes to @xmath108 ( see  @xcite for details ) .",
    "it is proved in  @xcite that actually each @xmath0-machine is asymptotically synchronizing , and @xmath110 vanishes to @xmath108 exponentially fast , that is , @xmath111 also vanishes to @xmath108 for some @xmath112 while @xmath113 . however , no algorithm for computing infimum of such @xmath35 is given in  @xcite .",
    "let us call this infimum the _ prediction rate constant _ of an @xmath0-machine and denote it by @xmath114 .",
    "below we show that the prediction rate constant is always positive whenever @xmath0-machine is not exact , present a polynomial time algorithm for approximating it , and simultaneously prove the aforementioned result from  @xcite , apparently in a simpler way .",
    "notice also that the prediction rate constant is equal to @xmath108 for exact @xmath0-machines .    in",
    "what follows , let @xmath8 be non - exact .",
    "suppose @xmath8 generates a word @xmath30 .",
    "denote by @xmath115 the state with maximal @xmath116 among @xmath82 and by @xmath117 the state with maximal @xmath118 among @xmath82 such that @xmath119 ( if a tie the lowest numbered state is taken ) . in these terms",
    ", we can bound @xmath120 as follows .",
    "[ lem_ql_bounds ] for some constants @xmath121 depended only on the machine , we have @xmath122    by the definition of @xmath110 we have @xmath123 for @xmath39 with maximal @xmath124 .    since @xmath125 , either @xmath126 or @xmath127 whence at least one of the components @xmath128 is contained in the sum @xmath129 . since also @xmath130 we get @xmath131 where @xmath132",
    "by the choice of @xmath36 and @xmath117 we get @xmath133 by the definition of @xmath115 we also get @xmath134 thus we can choose @xmath135 and the lemma follows .",
    "the following lemma gives us a way to calculate the prediction rate constant .",
    "[ lem_calc_pr ] @xmath136    let @xmath137 be some constants . if @xmath138 does not vanish to @xmath108 , then @xmath139 for @xmath1 big enough . from the other hand , if @xmath140 vanishes to @xmath108 then @xmath141 for @xmath1 big enough .",
    "the lemma follows .",
    "thus , in order to design an algorithm for computing prediction rate constant , it is enough to calculate @xmath142 and then to prove that @xmath143    for these purposes we need the definition of associated _ edge - machine _ as in  @xcite .",
    "let @xmath144 be an ergodic irreducible markov chain with the equilibrium distribution @xmath145 .",
    "let @xmath146 denotes the indicator function of the transition from the state @xmath147 to the state @xmath148 by the word @xmath30 .",
    "that is , @xmath149 if @xmath150 and @xmath108 otherwise .",
    "the edge machine @xmath151 is the markov chain whose states are the outgoing edges of the original machine @xmath144 .",
    "that is , the states are the pairs @xmath152 such that @xmath153 , and the transition probabilities are defined as : @xmath154 .",
    "a sequence of @xmath151 states visited by the markov chain corresponds to a sequence of edges visited by the original machine @xmath144 with the same probabilities .",
    "it follows , that @xmath151 is also ergodic and the following remark is also straightforward .",
    "[ rem_edge_prob]the equilibrium distribution of @xmath151 is given by @xmath155 where @xmath156 .",
    "in contrast to  @xcite , we consider @xmath151 machines for _ deadlock components _ of original semi - machine @xmath68 instead of @xmath8 . as in the previous section we consider the same auxiliary automaton @xmath157 . since @xmath8 is not exact , there are pairs @xmath80 that can not be synchronized , that is @xmath158 for each word @xmath42 ( this follows from  @xcite[theorem  3 ] ) .",
    "such pairs are called _",
    "deadlock_. let @xmath80 be a deadlock pair .",
    "it follows from the definition , that for each @xmath159 if @xmath160 is defined then @xmath161 is also defined and @xmath162 is also deadlock .",
    "hence there are closed under the actions of the letters strongly connected components of deadlock pairs in @xmath68 .",
    "since @xmath8 is aperiodic , these components are also irreducible @xmath0-machines .",
    "let us denote the set of such components by @xmath163 .",
    "the following remark follows from the fact that the probability of coming to closed components of the graph is positive .",
    "[ rem_out_of_m]there is a constant @xmath164 such that @xmath165    in simpler terms , it is stated in the remark that with probability asymptotically closed to @xmath4 all pairs of states in @xmath68 either merge or come to deadlock pairs .",
    "let us also notice that the constant @xmath166 from the remark is given by the dominant eigenvalue of the transition matrix of @xmath68 without deadlock components whence it can be approximated in polynomial time .    as in",
    "@xcite we use the theorem from  @xcite which in simpler terms can be formulated as follows .",
    "[ lem_mc_vars]let @xmath167 be a finite - state , irreducible markov chain , with state set @xmath168 and equilibrium distribution @xmath169 .",
    "let @xmath170 , and @xmath171 .",
    "denote also @xmath172 .",
    "then , there exist @xmath173 such that for each @xmath174 and each state @xmath147 for @xmath1 big enough we have @xmath175    now let @xmath176 and @xmath151 be the corresponding edge - machine .",
    "given a state @xmath177 of @xmath151 , or equivalently an edge between two states @xmath78 and @xmath85 labeled by @xmath97 , define @xmath178 .",
    "due to lemma  [ lem_mc_vars ] for any @xmath174 , we have @xmath179 for @xmath1 big enough .    given any initial pair of states @xmath78 and a random word @xmath30 of length @xmath1 , we have @xmath180(w ) = \\frac{1}{l}\\ln{\\frac{\\textbf{p}_{p}(w)}{\\textbf{p}_{q}(w)}}\\ ] ] by the definition of @xmath151 and @xmath181 .",
    "hence we get @xmath182 where @xmath183 .",
    "[ lem_about_avg]@xmath184 for each @xmath185 .",
    "it is enough to prove that for each pair @xmath78 of @xmath144 the sum @xmath186 is non - negative and there is a pair for which this sum is positive .",
    "since @xmath187 , by remark  [ rem_edge_prob ] this sum equals @xmath188    let us use lagrange s method to prove the inequalities .",
    "consider the function @xmath189 by taking derivatives for each variable we get that @xmath190 can have minimum only in the solution points of the system @xmath191 and in the boundary points @xmath192 ( since @xmath193 for @xmath194 ) .",
    "if for some @xmath195 then for each @xmath196 other @xmath197 and @xmath198 . in the opposite case , we have @xmath199 for each @xmath200 .",
    "since @xmath201 this can happen only if @xmath202 for each @xmath203 whence @xmath204 .",
    "thus @xmath204 if and only if @xmath202 for each @xmath205 such that @xmath206 and @xmath207 otherwise . due to the condition of states non - equivalence",
    "we get that for some pair @xmath78 in @xmath144 this condition does nt hold .",
    "the lemma follows .",
    "[ lem_lower_bound]for each @xmath176 and each @xmath94 we have @xmath208 for @xmath1 big enough .    first notice",
    "that for each pair of states @xmath209 we get @xmath210 this follows from the fact that one can assign to each word @xmath211 generated from @xmath212 the unique word @xmath213 generated from @xmath214 , where @xmath215 is a fixed word labeling some path from @xmath214 to @xmath212 .",
    "this means that we can take any state @xmath24 and consider only words generated from @xmath24 to estimate the limit of @xmath216 .",
    "given a word @xmath30 of length @xmath1 generated from @xmath24 by lemma  [ lem_ql_bounds ] we get @xmath217 if @xmath218 then @xmath219 .",
    "in the opposite case , @xmath220 for any @xmath221 . hence summing up for all length @xmath1 words we obtain @xmath222 where @xmath223 is some state such that the pair @xmath224 belongs to @xmath144 .",
    "suppose @xmath78 does nt belong to any @xmath176 . by remark  [ rem_out_of_m ] and inequality  [ eq_aep ] for both summands and each @xmath174 for @xmath1 big enough we have @xmath225 where @xmath226 contains the pair",
    "@xmath85 , @xmath227 = ( p',q')}{\\textbf{p}_{p}(w ) } \\geq 0 , \\sum{\\lambda_{p',q ' } } + \\lambda_p = 1,\\ ] ] @xmath228 is from inequality  [ eq_aep ] and @xmath229 is the maximum of @xmath230 among all @xmath63 and @xmath39 such that @xmath231 . since @xmath232 and for each @xmath0 this inequality holds for @xmath1 big enough , the lemma follows .",
    "[ lem_upper_bound ] for @xmath176 with minimal @xmath233 and each @xmath234 we have @xmath235 for @xmath1 big enough .    by lemma  [ lem_ql_bounds ]",
    "we have @xmath236 . using remark  [ rem_out_of_m ]",
    "we also get that @xmath237 where @xmath238 .",
    "thus by inequality  [ eq_aep ] for each @xmath174 we get @xmath239 for @xmath1 big enough .",
    "the lemma follows .",
    "now our second main result follows from lemma  [ lem_lower_bound ] and lemma  [ lem_upper_bound ] .",
    "[ th_main_pred]let @xmath8 be a non - exact @xmath0-machine .",
    "then the prediction rate of @xmath8 is given by the maximum of @xmath240 among @xmath185 .",
    "therefore since @xmath241 by lemma  [ lem_about_avg ] @xmath242 and @xmath8 is asymptotically synchronizable .",
    "the following corollary follows from the fact that the dominant eigenvectors of @xmath243 can be approximated in polynomial time .    given a non - exact @xmath0-machine @xmath8 ,",
    "the prediction rate of @xmath8 can be approximated in polynomial time within any given precision .",
    "thus it turns out that there are polynomial - time approximation schemes ( ptas ) for computing the natural measures of synchronization for stochastic setting for both exact and asymptotic cases while no polynomial time algorithm can approximate the reset threshold even with logarithmic performance ratio , and even for the binary alphabet case  @xcite ( see also @xcite,@xcite,@xcite ) unless @xmath244 ."
  ],
  "abstract_text": [
    "<S> it is known , that an @xmath0-machine is either exactly or asymptotically synchronizing . in the exact case </S>",
    "<S> , the observer can infer the current machine state after observing @xmath1 generated symbols with probability @xmath2 where @xmath3 is a so - called synchronization rate constant . in the asymptotic case </S>",
    "<S> , the probability of the correct prediction the current machine state after observing @xmath1 generated symbols tends to @xmath4 exponentially fast as @xmath5 for @xmath6 and the infimum of such @xmath7 is a so - called prediction rate constant .    </S>",
    "<S> hence the synchronization and prediction rate constants serve as natural measures of synchronization for @xmath0-machines . in the present work </S>",
    "<S> we show how to approximate these constants in polynomial time in terms of the number of machine states . </S>"
  ]
}