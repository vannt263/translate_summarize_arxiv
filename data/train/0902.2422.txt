{
  "article_text": [
    "nature is replete with examples of the self - assembly of individual parts into a more complex whole , such as the development from zygote to fetus , or , more simply , the replication of dna itself . in his ph.d .",
    "thesis in 1998 , winfree proposed a formal mathematical model to reason algorithmically about processes of self - assembly  @xcite .",
    "winfree connected the experimental work of seeman  @xcite ( who had built `` dna tiles , '' molecules with unmatched dna base pairs protruding in four directions , so they could be approximated by squares with different `` glues '' on each side ) to a notion of tiling the integer plane developed by wang in the 1960s  @xcite .",
    "rothemund , in his own ph.d .",
    "thesis , extended winfree s original tile assembly model  @xcite .    informally speaking ,",
    "winfree effectivized wang tiling , by requiring a tiling of the plane to start with an individual _ seed tile _ or a connected , finite _",
    "seed assembly_. tiles would then accrete one at a time to the seed assembly , growing a _",
    "seed supertile_. a _ tile assembly system _ is a finite set of _ tile types_. tile types are characterized by the names of the `` glues '' they carry on each of their four sides , and the binding strength each glue can exert .",
    "we assume that when the tiles interact `` in solution , '' there are infinitely many tiles of each tile type . tile assembly proceeds in discrete stages . at each stage @xmath0 , from all possibilities of tile attachment at all possible locations ( as determined by the glues of the tile types and the binding requirements of the system overall ) , one tile will bind , with tile type and location `` chosen '' nondeterministically from possible legal bonds at that stage .",
    "( later , we will generalize this so multiple tiles can bind concurrently , at a given stage . )",
    "winfree proved that his tile assembly model is turing universal .",
    "the abstract tile assembly model ( atam ) is _ error - free _ and _ irreversible_tiles always bind correctly , and , once a tile binds , it can never unbind .",
    "_ were the first to define a notion of time complexity for tile assembly , using a one - dimensional error - permitting , reversible model , where tiles would assemble in a line with some error probability , then be scrambled , and fall back to the line  @xcite .",
    "et al . _ proved bounds on how long it would take such models to achieve equilibrium .",
    "majumder , reif and sahu have recently presented a two - dimensional stochastic model for self - assembly  @xcite , and have shown that some tiling problems in their model correspond to _ rapidly mixing markov chains_markov chains that reach stationary distribution in time polynomial in the state space of legally reachable assemblies .",
    "while the atam is nondeterministic , real - world chemical reactions are probabilistic , and discrete molecular interactions are often modeled stochastically .",
    "we will define a class of stochastic self - assembly models that contains the model of majumder _ et al .",
    "_ , and prove a lower bound about any model in that class .",
    "the tile assembly systems analyzed in  @xcite had the property that their equilibrium assemblies were identical ( allowing for small error ) with their _ terminal _ or _ complete assemblies _ , _",
    "i.e. _ , assemblies that can not legally evolve further , given the rules of the system .",
    "this identity does not , however , hold in general . in a closed chemical system , where equilibrium may be achieved , it is possible that the system at equilibrium might consist almost entirely of large , undesirable assemblies that do not perform the desired computation . in these cases ,",
    "correct assembly occurs when the system is out of equilibrium , and can be maintained because there is a large kinetic energy barrier to forming undesired structures .",
    "therefore , when we discuss the `` solution to a problem '' in this paper , we identify that with the notion of a complete assembly .",
    "we will prove a time complexity lower bound on the solution of a graph coloring problem for a class of self - assembly models , including , but not limited to , a generalization of the model of  @xcite .",
    "the tile assembly model in  @xcite , like the atam , allows only for a single seed assembly , and one of the open problems in  @xcite was how the model might change if it allowed multiple nucleation , _",
    "i.e. _ , if multiple supertiles could build independently before attaching to a growing seed supertile .",
    "the main result of this paper provides a time complexity lower bound for a class of tile assembly models that permit multiple nucleation on a 2d surface or a 3d grid : there is no way for those models to use multiple nucleation to achieve a speedup to tiling a surface in constant time ( time independent of the size of the surface ) in order to solve a graph coloring problem , even though that graph coloring problem requires only seven tile types to solve in the atam .",
    "this result holds for tile assembly models that are reversible , irreversible , error - permitting or error - free .",
    "in fact , a speedup to constant time is impossible , even if we relax the model to allow that , at each step @xmath0 , there is a positive probability for every available location that a tile will bind there ( instead of requiring that exactly one tile bind per stage ) .    to our knowledge ,",
    "the method of proof in this paper is novel : given a tile assembly model and a tile assembly system @xmath1 in that model , we construct a distributed network of processors that can simulate the behavior of @xmath1 as it assembles on a surface .",
    "our result then follows from the theorem by naor and stockmeyer that locally checkable labeling ( lcl ) problems have no local solution in constant time  @xcite .",
    "this is true for both deterministic and randomized algorithms , so no constant - time tile assembly system exists that solves an lcl problem with a positive probability of success .",
    "we consider one lcl problem in specific , the weak @xmath2-coloring problem , and demonstrate a tile set of only seven tile types that solves the weak @xmath2-coloring problem in the abstract tile assembly model , even though that same problem is impossible to solve in constant time by multiple nucleation on a surface , for a broad class of self - assembly models .",
    "intuitively , this demonstrates that even a problem that can be solved in polynomial time by using a few local rules when starting from a single point , can not necessarily be solved in constant time when starting from multiple points , regardless of the rule set used .",
    "( the abstract tile assembly model can weakly @xmath2-color an @xmath3 surface in @xmath4 steps , yet none of the multiple nucleation models we consider can solve the weak @xmath2-coloring problem in constant - many steps . )    the results of naor and stockmeyer we apply are more powerful than needed to obtain the time complexity lower bound for a system in which the self - assembling agents are as simple as dna tiles .",
    "our lower bound actually demonstrates that constant - time speedup to solve lcl problems is impossible via multiple nucleation , even for self - assembling modular robots capable of forming physical bonds in a three - dimensional grid , and , in addition , of sending messages to their neighbors once they have bonded , and potentially deciding to break bonds they previously formed .      in the abstract tile assembly model , one tile",
    "is added per stage , so the primary complexity measure is not one of time , but of how much information a tile set needs in order to solve a particular problem .",
    "several researchers  @xcite  @xcite  @xcite  @xcite  @xcite have investigated the _ tile complexity _ ( the minimum number of distinct tile types required for assembly ) of finite shapes , and sets of `` scale - equivalent '' shapes ( essentially a @xmath5 analogue of the euclidean notion of similar figures ) .",
    "for example , it is now known that the number of tile types required to assemble a square of size @xmath3 ( for @xmath6 any natural number ) is @xmath7  @xcite . or , if @xmath8 is the set of all discrete equilateral triangles , the asymptotically optimal relationship between triangle size and number of tiles required to assemble that triangle , is closely related to the kolmogorov complexity of a program that outputs the triangle as a list of coordinates  @xcite .",
    "despite these advances in understanding of the complexity of assembling finite , bounded shapes , the self - assembly of infinite structures is not as well understood . in particular",
    ", there are few lower bounds or impossibility results on what infinite structures can be self - assembled in the tile assembly model .",
    "the first such impossibility result appeared in  @xcite , when lathrop , lutz and summers showed that no finite tile set can assemble the discrete sierpinski triangle by placing a tile only on the coordinates of the shape itself .",
    "( by contrast , winfree had shown that just seven tile types are required to tile the first quadrant of the integer plane with tiles of one color on the coordinates of the discrete sierpinski triangle , and tiles of another color on the coordinates of the complement  @xcite . ) recently , patitz and summers have extended this initial impossibility result to other discrete fractals  @xcite , and lathrop _ et al . _",
    "@xcite have demonstrated sets in @xmath9 that are turing decidable but can not be self - assembled in winfree s sense .    to date , there has been no work comparing the strengths of different tile assembly models with respect to infinite ( nor to finite but arbitrarily large ) structures . since self - assembly",
    "is a process in which each point has only local knowledge , it is natural to consider whether the techniques of distributed computing might be useful for comparing models of self - assembly and proving impossibility results about them .",
    "this paper is an initial attempt in that direction .",
    "aggarwal _ et al .",
    "_ in  @xcite proposed a generalization of the standard tile assembly model , which they called the @xmath10-tile assembly model .",
    "this model permitted multiple nucleation : tiles did not need to bind immediately to the seed supertile .",
    "instead , they could form independent supertiles of size up to some constant @xmath10 before then attaching to the seed supertile .",
    "while the main question considered in  @xcite was _ tile _ complexity , we can also ask whether multiple nucleation would allow an improvement in _ time _ complexity .",
    "intuitively , does starting from multiple points allow us to build things strictly faster than starting from a single point ?    as mentioned above , majumder , reif and sahu recently presented a stochastic , error - permitting tile assembly model , and calculated the rate of convergence to equilibrium for several tile assembly systems  @xcite .",
    "the model in  @xcite permitted only a single seed assembly , and addition of one tile to the seed supertile at each stage .",
    "majumder , reif and sahu left as an open question how the model might be extended to permit the presence and binding of multiple supertiles .",
    "therefore , we can rephrase the `` intuitive '' question above as follows : can we tile a surface of size @xmath3 in a constant number of stages , by randomly selecting nucleation points on the surface , building supertiles of size @xmath10 or smaller from those points in @xmath11 stages , and then allowing @xmath12 additional stages for tiles to fall off and be replaced if the edges of the supertiles contain tiles that bind incorrectly ? ( the assembly achieves equilibrium in constant time because @xmath10 and @xmath13 do not depend on @xmath6 . )",
    "the partial answer obtained in this paper is that locally checkable labeling problems can not be solved in constant time , if we limit ourselves to self - assembly on a surface .",
    "limiting ourselves to self - assembly on a surface is significant , because we are requiring that agents adhere to a substrate and then never move again , unless they dissociate completely from the larger assembly .",
    "when assemblies multiply nucleate in solution , however , they form disjoint supertiles that can float independently until potentially becoming aligned , with some probability .",
    "a self - assembly model that made this rigorous might be strictly stronger than the self - assembly models we consider in this paper , as it is not clear how to simulate floating supertiles within our distributed computing models without introducing slowdown , as processors simulating locations of the surface would have to `` pass along '' information from one processor to the next , to simulate elements of the moving supertile .",
    "we leave the possibility of simulating floating supertiles to future work .",
    "another limitation to our results is that our proof technique applies only to self - assembly models whose binding rules are completely local .",
    "one could imagine models in which supertiles combine ( or separate ) based on simultaneous interactions at several locations , instead of the models we consider in this paper , in which the system s behavior at each location depends only on the properties of that location s immediate neighbors .",
    "the self - assembly literature , to our knowledge , contains little regarding self - assembly models with nonlocal binding rules , and this could be a fruitful area to investigate .",
    "klavins and co - authors have modeled self - assembly phenomena  and programmed self - assembling modular robots  using graph grammars  @xcite  @xcite .",
    "klavins in  @xcite informally compares the limitations of the `` distributed algorithms '' of graph grammars ( used to program self - assembling robots ) to impossibility results in distributed computing .",
    "recently , we have shown connections between self - assembly and the wait - free consensus hierarchy  @xcite , and we have embedded the `` graph assembly systems '' of klavins into a known graph grammar characterization of distributed systems  @xcite . the present paper , to the best of our knowledge , is the first to construct a formal reduction from self - assembly models to models of distributed computing .",
    "section 2 of this paper describes the abstract tile assembly model , and then considers generalizations of the standard model that permit multiple nucleation .",
    "section 3 reviews the distributed computing results of naor and stockmeyer needed to prove the impossibility result . in section 4",
    "we present our simulation technique and lower bound results .",
    "section 5 concludes the paper and suggests directions for future research .",
    "winfree s objective in defining the tile assembly model was to provide a useful mathematical abstraction of dna tiles combining in solution  @xcite .",
    "rothemund  @xcite , and rothemund and winfree  @xcite , extended the original definition of the model . for a comprehensive introduction to tile assembly ,",
    "we refer the reader to  @xcite . in our presentation here , we follow  @xcite , which gives equal status to finite and infinite tile assemblies .    intuitively , a tile of type @xmath14 is a unit square that can be placed with its center on a point in the integer lattice .",
    "a tile has a unique orientation ; it can be translated , but not rotated .",
    "we identify the side of a tile with the direction ( or unit vector ) one must travel from the center to cross that side .",
    "the literature often refers to west , north , east and south sides , starting at the leftmost side and proceeding clockwise .",
    "each side of a tile is covered with a `` glue '' that has a _ color _ and a _",
    "strength_. figure 1 shows how a tile is represented graphically .",
    "if tiles of types @xmath14 and @xmath15 are placed adjacent to each other , then they will _ bind _ with the strength shared by both adjacent sides if the glues on those sides are the same .",
    "note that this definition of binding implies that if the glues of the adjacent sides do not have the same color or strength , then their binding strength is 0 .",
    "later , we will permit pairs of glues to have negative binding strength , to model error occurrence and correction .",
    "one parameter in a tile assembly model is the minimum binding strength required for tiles to bind `` stably . ''",
    "this parameter is usually termed _ temperature _ and denoted by @xmath16 , where @xmath17 .",
    "as we consider only two - dimensional tile assemblies , we limit ourselves to working in @xmath18 .",
    "@xmath19 is the set of all unit vectors in @xmath20 .",
    "a _ binding function _ on an ( undirected ) graph @xmath21 is a function @xmath22 .",
    "if @xmath23 is a binding function on a graph @xmath21 and @xmath24 is a cut of @xmath25 , then the _ binding strength _ of @xmath23 on @xmath26 is @xmath27 the _ binding strength _ of @xmath23 on @xmath25 is then @xmath28 .",
    "intuitively , the binding function captures the strength with which any two neighbors are bound together , and the binding strength of the graph is the minimum strength of bonds that would have to be severed in order to separate the graph into two pieces .",
    "a _ binding graph _ is an ordered triple @xmath29 where @xmath30 is a graph and @xmath23 is a binding function on @xmath30 . if @xmath17 , a binding graph @xmath29 is _",
    "@xmath16-stable _ if @xmath31 .",
    "recall that a _ grid graph _ is a graph @xmath21 where @xmath32 and every edge @xmath33 has the property that @xmath34 .",
    "we write @xmath35 ^ 2 $ ] for the set @xmath36 , _",
    "i.e. _ , the two - element subsets of @xmath37 .    a _ tile type _ over a ( finite ) alphabet @xmath38 is a function @xmath39 .",
    "we write @xmath40 , where @xmath41 , and @xmath42 are defined by @xmath43 for all @xmath44 .",
    "if @xmath8 is a set of tile types , a _ @xmath8-configuration _ is a partial function @xmath45 .",
    "the _ binding graph _ of a @xmath8-configuration @xmath46 is the binding graph @xmath47 , where @xmath30 is the grid graph given by    @xmath48    @xmath49 ^ 2 \\mid \\overrightarrow{m } - \\overrightarrow{n } \\in u_2 , \\mathrm{col}_{\\alpha(\\overrightarrow{m})}(\\overrightarrow{n}-\\overrightarrow{m } ) = \\mathrm{col}_{\\alpha(\\overrightarrow{n})}(\\overrightarrow{m } - \\overrightarrow{n}),$ ] and @xmath50    and the binding function @xmath51 is given by @xmath52 for all @xmath33 .",
    "for @xmath8 a set of tile types , a @xmath8-configuration @xmath53 is _ stable _ if its binding graph @xmath54 is @xmath16-stable .",
    "@xmath16-@xmath8-assembly _ is a @xmath8-configuration that is @xmath16-stable .",
    "we write @xmath55 for the set of all @xmath16-@xmath8-assemblies .",
    "let @xmath53 and @xmath56 be @xmath8-configurations .    1 .   @xmath53 is a _ subconfiguration _ of @xmath57 , and we write @xmath58 , if @xmath59 and , for all @xmath60 , @xmath61 .",
    "2 .   @xmath57 is a _ single - tile extension _ of @xmath53 if @xmath58 and @xmath62 is a singleton set . in this case",
    ", we write @xmath63 , where @xmath64 and @xmath65 .",
    "the notation @xmath66 means that @xmath67 and @xmath57 is a single - tile extension of @xmath53 .",
    "( the `` 1 '' above the arrow is to denote that a single tile is added at this step . )",
    "let @xmath68 .    1 .   for each @xmath69 ,",
    "the _ @xmath16-@xmath14-frontier _ of @xmath53 is the set @xmath70 2 .",
    "the _ @xmath16-frontier _ of @xmath53 is the set @xmath71    a _ @xmath16-@xmath8-assembly sequence _ is a sequence @xmath72 in @xmath55 , where @xmath73 and , for each @xmath74 with @xmath75 , @xmath76 .",
    "the _ result _ of a @xmath16-@xmath8-assembly sequence @xmath72 is the unique @xmath8-configuration @xmath77 satisfying : @xmath78 and @xmath79 for each @xmath80 .",
    "let @xmath67 .",
    "@xmath16-@xmath8-assembly sequence from @xmath53 to @xmath57 _ is a @xmath16-@xmath8-assembly sequence @xmath72 such that @xmath81 and @xmath82 .",
    "we write @xmath83 to indicate that there exists a @xmath16-@xmath8-assembly from @xmath53 to @xmath57 .",
    "an assembly @xmath68 is _ terminal _ if @xmath84 .",
    "intuitively , a configuration is a set of tiles that have been placed in the plane , and the configuration is stable if the binding strength at every possible cut is at least as high as the temperature of the system .",
    "informally , an assembly sequence is a sequence of single - tile additions to the frontier of the assembly constructed at the previous stage .",
    "assembly sequences can be finite or infinite in length .",
    "we are now ready to present a definition of a tile assembly system .",
    "write @xmath55 for the set of configurations , stable at temperature @xmath16 , of tiles whose tile types are in @xmath8 .",
    "a _ tile assembly system _ is an ordered triple @xmath85 where @xmath8 is a finite set of tile types , @xmath86 is the _ seed assembly _ , and @xmath17 is the _ temperature_. we require @xmath87 to be finite .",
    "let @xmath85 be a tile assembly system .    1 .",
    "then the _ set of assemblies produced by @xmath1 _",
    "is @xmath88 = \\big\\{\\alpha",
    "\\in \\mathcal{a}^{\\tau}_t \\big| \\sigma \\underset{\\tau , t}{\\longrightarrow } \\alpha \\big\\ } \\enspace,\\ ] ] where `` @xmath89 '' means that tile configuration @xmath53 can be obtained from seed assembly @xmath90 by a legal addition of tiles .",
    "the _ set of terminal assemblies produced by @xmath1 _",
    "is @xmath91 = \\{\\alpha \\in \\mathcal{a}[\\mathcal{t } ] \\mid \\alpha \\textrm { is terminal}\\ } \\enspace,\\ ] ] where `` terminal '' describes a configuration to which no tiles can be legally added .",
    "if we view tile assembly as the programming of matter , the following analogy is useful : the seed assembly is the input to the computation ; the addition of tile types to the growing assembly are the legal steps the computation can take ; the temperature is the primary inference rule of the system ; and the terminal assemblies are the possible outputs .",
    "we are , of course , interested in being able to _ prove _ that a certain tile assembly system always achieves a certain output . in  @xcite ,",
    "soloveichik and winfree presented a strong technique for this : local determinism .",
    "informally , an assembly sequence @xmath92 is locally deterministic if ( 1 ) each tile added in @xmath92 binds with the minimum strength required for binding ; ( 2 ) if there is a tile of type @xmath93 at location @xmath94 in the result of @xmath53 , and @xmath93 and the immediate `` out - neighbors '' of @xmath93 are deleted from the result of @xmath53 , then no other tile type in @xmath1 can legally bind at @xmath94 ; the result of @xmath53 is terminal .",
    "we formalize these points as follows .",
    "a @xmath16-@xmath1-assembly sequence @xmath95 with result @xmath53 is _ locally deterministic _ if it has the following three properties .    1 .   for all @xmath96 ) , @xmath97 where @xmath98 means the sides of the tile that bound at location @xmath94 during assembly sequence @xmath92 that contributed nonzero strength during the stage at which the tile bound .",
    "( informally , these are the `` input sides '' of the tile at location @xmath94 , with respect to assembly sequence @xmath92 . ) 2 .   for all @xmath99 and all @xmath100 , @xmath101 .",
    "3 .   @xmath102 .",
    "a tile assembly system @xmath1 is _ locally deterministic _ if there exists a locally deterministic @xmath16-@xmath1-assembly sequence @xmath103 with @xmath104 .",
    "local determinism is important because of the following result .",
    "if @xmath1 is locally deterministic , then @xmath1 has a unique terminal assembly .",
    "we move now from dna tiles self - assembling on a two - dimensional surface , to a more general setting , where self - assembling `` agents '' with the ability not just to bind but also to communicate after binding and potentially unbind , can assemble either in the plane or in three - space .",
    "one could think of think of these agents as ( nano- or macroscale ) robots that interlock physically , and , after interlocking , can send their neighbors electronic messages of low complexity .",
    "based on receipt of messages , the robots can then decide to break bonds to one or more of their neighbors .",
    "such modular robots have already been implemented in laboratory experiments  @xcite .",
    "further , these robots may be constructed so each has ( at least with high probability ) a unique identification code  permitting transmission of strictly more information than is possible in the setting of tile self - assembly , in which tiles do not have unique identifiers .",
    "we will consider generalizations of the abstract tile assembly model that include the following : ( 1 ) multiple nucleation ; ( 2 ) assembly in which glues bind incorrectly according to some error probability ; and ( 3 ) negative glue strengths , allowing incorrectly bound tiles to be released from the assembly so it is possible for a correctly - binding tile to attach in that location ; ( 4 ) a third spatial dimension ; and ( 5 ) tiles can now be `` agents , '' _",
    "i.e. _ , finite state machines with algorithms and unique identifiers",
    ". we formalize this as follows .",
    "a _ @xmath105-regular self - assembling agent type _",
    "@xmath8 is a finite state machine of form @xmath106 , where @xmath107 is an ( deterministic or probabilistic ) algorithm and the @xmath108 s are finite strings over a finite alphabet ( codes for the glue types associated with @xmath8 ) that are hardcoded into the machine .",
    "the algorithm @xmath107 can be null ( in the case of passive self - assembly like dna tiles ) , or can decide whether to transmit messages of length bounded by a constant to neighbors based on the agent s interaction with neighboring glue types .",
    "we will assume that all agent types have identical geometric structure , and their @xmath105 glues all have the same orientation .",
    "for example , in the atam , all agent types are unit squares , oriented north , east , south , west .",
    "also , for simplicity of the proof , we will assume that our agents are memoryless .",
    "however , because of the generality of the results of naor and stockmeyer , our lower bound results would still hold if agents could make active self - assembly decisions based on a history of messages received from neighbors , not just the current messages and glue types of their neighbors .",
    "the binary relation @xmath109 is a _ set of binding rules _ for the ( finite ) set of agent types @xmath110 if , for any @xmath111 , both @xmath112 and @xmath113 are glue types that appear in elements of @xmath110 .",
    "the function @xmath23 is _ an assignment of binding strengths _ for the set of binding rules @xmath109 , if the domain of @xmath23 is @xmath109 , and the range of @xmath23 is the set of nonnegative integers .",
    "@xmath114 is a _ model of @xmath105-regular self - assembling agents _",
    "if @xmath115 , where @xmath110 is a ( finite ) set of @xmath105-regular self - assembling agent types , @xmath109 is a set of binding rules for @xmath110 , @xmath23 is an assignment of binding strengths for @xmath109 , @xmath16 is the temperature of the system ( the threshold binding strength for bonds to be stable ) , and @xmath90 is an initial ( finite ) seed assembly .",
    "the algorithm of each agent type may include a variable my - id , and we allow the possibility that each agent in the system does , in fact , have a unique identification number .",
    "this might be appropriate when modeling robotic self - assembly . in the case of molecular self - assembly , each agent is anonymous .",
    "assembly systems in both the atam and the stochastic model of majumder _ et al .",
    "_ can be defined in this formalism , by giving each agent type an algorithm that performs no instructions , and defining ( respectively deterministic or probabilistic ) binding relations in a natural way .    to conclude this section , we formalize what it means for a self - assembly model to allow multiple nucleation on a surface .",
    "let @xmath114 be a model of @xmath105-regular self - assembling agents .",
    "we say @xmath114 _ allows multiple nucleation _ if , in addition to the placement of the seed assembly at the initial stage of assembly , there is some probability @xmath116 that ( at the first stage of assembly only ) an agent is placed on each location of the surface with probability @xmath116 .",
    "further , if an agent is placed at location @xmath94 because of multiple nucleation , its agent type is chosen uniformly at random from the space of possible agent types .",
    "we could allow multiple nucleation to occur at multiple stages during the assembly , not just the first . again , because of the generality of naor and stockmeyer s results , that would not affect our lower bound proof .",
    "in a well known distributed computing paper , naor and stockmeyer investigated whether `` locally checkable labeling '' problems could be solved over a network of processors in an entirely local manner , where a local solution means a solution arrived at `` within time ( or distance ) independent of the size of the network ''  @xcite .",
    "one locally checkable labeling problem naor and stockmeyer considered was the _",
    "weak @xmath2-coloring problem_.    for @xmath117 , a _ weak @xmath2-coloring _ of a graph is an assignment of numbers from @xmath118 ( the possible `` colors '' ) to the vertices of the graph such that for every non - isolated vertex @xmath119 there is at least one neighbor @xmath120 such that @xmath119 and @xmath120 receive different colors . given a graph @xmath25 , the _",
    "weak @xmath2-coloring problem for @xmath25 _ is to weak @xmath2-color the nodes of @xmath25 .    in the context of tiling , to solve the weak @xmath2-coloring problem for an @xmath3 surface means tiling the surface so each tile has at least one neighbor ( to the north , south , east or west ) of a different color . in the next section",
    ", we will present a simple solution to the weak @xmath2-coloring problem in the abstract tile assembly model .",
    "by contrast , naor and stockmeyer showed that no local , constant - time algorithm can solve the weak @xmath2-coloring problem for grid graphs , nor for @xmath121-dimensional meshes , a generalization of grid graphs which we now define .    a _",
    "@xmath121-dimensional mesh _ is a graph with vertex set @xmath122 for some @xmath123 , such that two vertices are connected by an edge if the @xmath124-distance between them is 1 .",
    "[ theorem : ns1 ] for any natural numbers @xmath2 , @xmath121 and @xmath14 , there is no local algorithm with time bound @xmath14 that solves the weak @xmath2-coloring problem for the class of @xmath121-dimensional meshes .",
    "( this remains true even if the processors have unique identifiers and can transmit them as part of the local algorithm . )",
    "a second theorem from the same paper says that randomization does not help .",
    "the original result is stronger than the formulation here .",
    "[ theorem : ns2 ] fix a class @xmath125 of graphs closed under disjoint union .",
    "if there is a randomized local algorithm @xmath126 with time bound @xmath14 that solves the weak @xmath2-coloring problem for @xmath125 with error probability @xmath127 for some @xmath128 , then there is a deterministic local algorithm @xmath107 with time bound @xmath14 that solves the weak @xmath2-coloring problem for @xmath125 .",
    "in order to apply the theorems of naor and stockmeyer to the realm of self - assembly , we build a distributed network of processors that reduces a self - assembly problem to a distributed computing problem .",
    "the motivating intuition is that each processor simulates a location of the surface , and reports to its neighbors whether there is a ( simulated ) agent at that location .",
    "formally , we prove the following theorem .    [",
    "theorem : simulation ] let @xmath114 be a model of @xmath105-regular self - assembling agents for any natural number @xmath129 , such that @xmath114 self - assembles on a @xmath121-dimensional mesh of size @xmath130 , and that @xmath114 allows multiple nucleation . then there is a model @xmath131 of distributed computing that simulates @xmath114 using @xmath130 processors with the network topology of a @xmath121-dimensional mesh , and constant - size message complexity .",
    "fix a model of @xmath105-regular self - assembling agents @xmath114 as in the theorem statement .",
    "let @xmath53 be a configuration of agents on the mesh of size @xmath130 .",
    "let @xmath132 be the set of glue types of @xmath114 and @xmath133 the set of electronic messages of @xmath114 .",
    "( both @xmath132 and @xmath133 are finite sets . )",
    "the definition of the binding function @xmath23 induces a function @xmath134\\ ] ] such that @xmath135 takes as input the ( possibly empty ) agent type @xmath136 at some location @xmath94 in configuration @xmath53 , and , based on the glue types and electronic messages received from the @xmath105 neighbors that could be incident to an agent at @xmath94 , returns , for each agent type , the probability that @xmath136 would contain that agent type , over the space of all legal @xmath114-assembly sequences that start with configuration @xmath53 and run for one time step .",
    "in particular , for fixed @xmath137 , fixed @xmath138 , and fixed @xmath139 , it is true that @xmath140 we have not formally defined @xmath114-assembly sequences , but they are a natural extension of the @xmath16-@xmath8-assembly sequences of tile self - assembly , where the @xmath23 and @xmath16 of @xmath114 are used to determine whether agents bind stably to one another . also ,",
    "if an agent type lies on the edge of the @xmath130-size surface , so it does not have a neighbor in a particular direction , we define @xmath135 so that the empty set is the glue and electronic message `` transmitted '' from the `` neighbor '' in that direction .",
    "we simulate assembly sequences of @xmath114 on an @xmath121-dimensional mesh where each of the dimensions has length @xmath6 by a network of processors @xmath131 whose network graph is also a @xmath121-dimensional mesh of total size @xmath130 . each processor will simulate the presence or absence of an agent in the same location on the assembly surface .",
    "we interpret bonds between two agents as messages .",
    "we add on top of those messages , an additional set of electronic messages agents can send neighbors , and encode the combination as an ordered pair : glue type and electronic message .",
    "the function @xmath135 will be the probabilistic transition function for processors in this system .",
    "processors of @xmath131 are of the following form .    : : @xmath105-many input message buffers : : :    @xmath141 .",
    "@xmath105-many output message buffers : : :    @xmath142 .",
    "a color variable : : :    @xmath143 , a variable that can take a value from    @xmath118 , where @xmath2 is a global    constant . a local state : : :    each processor is in one of @xmath144 different local states    @xmath10 during a given execution stage @xmath0 .",
    "there    is one stage @xmath145 to simulate each agent type    @xmath146 , and an additional stage empty , to simulate    the absence of an agent from the surface location that    @xmath147 is simulating .",
    "a state transition function : : :    this function takes the current processor state and the messages    received in the current round , and probabilistically directs what    state the processor will adopt in the next round .    the messages processors send on the network are of form @xmath148glue type , electronic message@xmath149 .",
    "the input message buffers of processor @xmath147 simulate the glue types of the edges the agent at @xmath147 s location is adjacent to , and the electronic messages ( if any ) received from an agent s neighbors .",
    "the output message buffers of @xmath147 simulate the glues on the edges of the tile @xmath147 is simulating , and the electronic messages the agent transmits to its neighbors .",
    "the purpose of @xmath143 is to simulate the color of the agent placed at the location simulated by @xmath147 .",
    "all processors in @xmath131 are hardcoded with the same probabilistic state transition function , which is determined from the definition of @xmath135 ( which we induced above from the properties of @xmath114 ) , in the natural way : if , in round @xmath13 of the algorithm execution , @xmath147 is in state @xmath145 , a simulation of @xmath146 , and hears messages that simulate glue types @xmath150 and electronic messages @xmath151 , then at the end of round @xmath13 , it will transition to state @xmath152 with probability @xmath153 , where @xmath154 and each @xmath155 is a distinct element of @xmath156 . as explained above , we denote the state that simulates the `` presence of the empty set''_i.e .",
    ", _ the absence of any agent from the location simulated by @xmath147as empty .    to simulate the process of self - assembly",
    ", we run the following distributed algorithm on @xmath131 .",
    "algorithm execution proceeds in synchronized rounds .",
    "before execution begins , all processors start in state empty . in round @xmath157 ,",
    "( through the intervention of an omniscient operator ) each processor in the locations corresponding to the seed assembly enters the stage to simulate the agent type at that location in the seed assembly .",
    "also in round @xmath157 , each processor not simulating part of the seed assembly `` wakes up '' ( enters a state other than empty ) with probability @xmath116 , the multiple nucleation probability of @xmath114 .",
    "if a processor wakes up , it enters state @xmath158 , chosen uniformly at random from the set of non - empty states . for any round @xmath159 ,",
    "each processor runs either algorithm 1 or algorithm 2 , depending on whether it is in state empty .",
    "the interaction between agents in @xmath114 is completely defined by the glues and electronic messages of an agent s immediate neighbors , as specified in the function @xmath135 and the algorithm of each agent type .",
    "the processors of @xmath131 simulate that behavior with algorithm 2 .",
    "since the processors of @xmath131 simulate empty locations with algorithm 1 , by a straightforward induction argument , @xmath131 can simulate all possible @xmath114-assembly sequences , and the theorem is proved .",
    "we obtain our time lower bound results as corollaries of theorem  [ theorem : simulation ] .",
    "used in the proof of proposition 1.,height=288 ]    if the ( deterministic or probabilistic ) binding rules of a multiply nucleating tile assembly system @xmath1 are entirely local , then @xmath1 is unable to solve the weak @xmath2-coloring problem in constant time .",
    "suppose @xmath1 is an irreversible tiling model .",
    "if @xmath1 can weak @xmath2-color surfaces in constant time , then there is a deterministic algorithm for the distributed network @xmath131 that weak @xmath2-colors @xmath131 locally , and in constant time . by theorem  [ theorem : ns1 ] that is impossible .",
    "so assume @xmath1 is a reversible tiling model , and when @xmath1 assembles , it weak @xmath2-colors the tiling surface , and achieves bond pair equilibrium in constant time .",
    "then there is a local probabilistic algorithm for @xmath131 that weak @xmath2-colors @xmath131 in constant time , with positive probability of success . by theorem  [ theorem : ns2 ] that is impossible as well",
    "therefore , no @xmath1 exists that weak @xmath2-colors surfaces in constant time .    by a similar argument",
    ", we obtain a lower bound for active self - assembling agents on a three - dimensional cubic grid .",
    "[ corollary:3d ] if a model of 6-regular self - assembling agents has only local binding rules , then it can not solve the weak @xmath2-coloring problem in constant time on a 3-dimensional mesh , for any value of @xmath2 .",
    "a physical interpretation of corollary  [ corollary:3d ] would be that robots self - assembling in three - space ( _ i.e. _ , @xmath160 and , in this example , @xmath161 so there are six arms coming off each robot , orthogonally to one another ) can not achieve speedup to constant time by self - assembling in separate groups and then joining the groups together .",
    "this lower bound remains in effect even if the robots are designed by a method that assigns each robot a unique identifier .",
    "we conclude this section by noting that the weak @xmath2-coloring problem has low tile complexity  that is , can be defined using only a few local rules  in the atam .",
    "there is a tile assembly system in the abstract tile assembly model that weak @xmath2-colors the first quadrant , using only seven distinct tile types .",
    "figure 2 exhibits a tileset @xmath162 of seven tile types that assembles into a weak @xmath2-coloring of the first quadrant , starting from an individual seed tile placed at the origin .",
    "one can verify by inspection that @xmath162 is locally deterministic , so it will always produce the same terminal assembly .",
    "all assembly sequences generated by @xmath162 produce a checkerboard pattern in which a monochromatic `` + '' configuration never appears .",
    "hence , it solves the weak @xmath2-coloring problem for the entire first quadrant , and also for all @xmath3 squares , for any @xmath6 .",
    "one can define a three - dimensional version of the tileset @xmath162 ( shown in figure  [ figure : tileset ] ) in the natural way , using for example the 3d tile assembly model in  @xcite .",
    "such a three - dimensional tileset will weakly @xmath2-color the three - dimensional mesh where @xmath161 , with low tile complexity .",
    "in this paper , we showed that if a tile assembly model has only local binding rules , then it can not use multiple nucleation on a surface to solve locally checkable labeling problems in constant time , even though the abstract tile assembly model can solve a locally checkable labeling problem using just seven tile types .",
    "in fact , we proved a more general impossibility result , which showed the same lower bound applies to self - assembling agents in a three - dimensional grid that are capable of binding and subsequently sending messages to their neighbors . to the best of our knowledge ,",
    "this was the first application of a distributed computing impossibility result to the field of self - assembly .",
    "there are still many open questions regarding multiple nucleation .",
    "asked in  @xcite whether multiple nucleation might reduce the tile complexity of finite shapes .",
    "the answer is not known .",
    "furthermore , we can ask for what class of computational problems does there exist some function @xmath163 such that we could tile an @xmath3 square in time @xmath164 , and `` solve '' the problem with `` acceptable '' probability of error , in a tile assembly model that permits multiple nucleation .",
    "it would also be interesting to explore the possibility of modeling multiple nucleation of molecules floating in solution  instead of adhering to a surface  perhaps by using techniques from the field of _ ad hoc _ wireless networks .",
    "we hope that this is just the start of a conversation between researchers in the fields of distributed computing and biomolecular computation .",
    "i am grateful to soma chaudhuri , dave doty , jim lathrop and jack lutz for helpful discussions on earlier versions of this paper .",
    "i am also grateful to two anonymous referees , who suggested significant conceptual and technical improvements to my original journal submission .    99 adleman , l. , cheng , q. , goel , a. , huang , m.d . : running time and program - size for self - assembled squares . in : proceedings of the 33rd annual acm symposium on the theory of computing , pp .",
    "740 - 748 ( 2001 )      aggarwal , g. , goldwasser , m. , kao , m .- y . ,",
    "schweller , r. : complexities for generalized models of self - assembly . in : proceedings of the fifteenth annual acm - siam symposium on discrete algorithms , pp .",
    "880 - 889 ( 2004 )      kao , m .- y . ,",
    "ramachandran , v. dna self - assembly for constructing 3d boxes .",
    "lncs 2223 , proceedings of the 12th international symposium on algorithms and computation ( isaac 2001 ) , p. eades , t. takaoka ( eds . ) , pp .",
    "429 - 441 ( 2001 )                  patitz , m. , summers , s. : self - assembly of discrete self - similar fractals . to appear in : proceedings of the seventh international conference on unconventional computation .",
    "springer - verlag , heidelberg ( 2008 )"
  ],
  "abstract_text": [
    "<S> majumder , reif and sahu have presented a stochastic model of reversible , error - permitting , two - dimensional tile self - assembly , and showed that restricted classes of tile assembly systems achieved equilibrium in ( expected ) polynomial time . </S>",
    "<S> one open question they asked was how much computational power would be added if the model permitted multiple nucleation , _ </S>",
    "<S> i.e. , _ independent groups of tiles growing before attaching to the original seed assembly . </S>",
    "<S> this paper provides a partial answer , by proving that if a tile assembly model uses only local binding rules , then it can not use multiple nucleation on a surface to solve certain `` simple '' problems in constant time ( time independent of the size of the surface ) . </S>",
    "<S> moreover , this time bound applies to macroscale robotic systems that assemble in a three - dimensional grid , not just to tile assembly systems on a two - dimensional surface . </S>",
    "<S> the proof technique defines a new model of distributed computing that simulates tile ( and robotic ) self - assembly . _ </S>",
    "<S> keywords : _ self - assembly , multiple nucleation , locally checkable labeling . </S>"
  ]
}