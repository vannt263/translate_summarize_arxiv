{
  "article_text": [
    "the fact that iterative decoding on ldpc codes performs well when the underlying tanner graph @xcite has large girth is well known @xcite .",
    "the recent revival of interest in ldpc codes owing to their near capacity performance on various channel models has resulted in considerable research on the construction of ldpc code families of high rate and large girth .",
    "these constructions may be classified as random code constructions ( for example see @xcite ) , construction of codes based on projective and combinatorial geometries ( see @xcite and references therein ) , heuristic search based constructions @xcite , constructions based on circulant matrices @xcite , algebraic constructions ( see @xcite ) , code constructions based on expander graphs @xcite , and edge growth constructions  @xcite . in this note , we present an elementary graph theoretic construction for a family of binary ldpc codes .",
    "these codes achieve high girth and are almost regular in the sense that the degree of a vertex is allowed to differ by at most one from the average .",
    "we shall refer to these codes as _ arg _ ( almost regular high girth ) codes .",
    "the construction gives flexibility in the design parameters of the code like rate , block - length , and average degree , and yields an asymptotic family .",
    "we prove bounds on code parameters achieved by the construction .",
    "the complexity of the graph construction algorithm grows only quadratically with the block length of the code .",
    "the construction here is similar in spirit to the very general graph construction scheme called the progressive edge - growth ( peg ) algorithm proposed in @xcite and may be considered as being specially tuned for obtaining near regular graphs of large girth .",
    "however in @xcite no technique for simultaneously bounding the maximum left and right degrees of the graphs constructed is provided , and hence the girth bounds depend on the values of the degrees obtained experimentally .",
    "the authors report that good values of girth can be achieved in practice .",
    "the bounds on the node degrees in the tanner graph construction proposed here are achieved by adapting a high girth graph construction technique known in the graph theory literature @xcite .",
    "the following section presents the construction and establishes the bound on the girth of the tanner graph constructed .",
    "simulations indicate that rate @xmath0 arg codes perform better than regular codes of the same block length reported in @xcite .",
    "given a bipartite graph @xmath1 , @xmath2 , @xmath3 , the @xmath4 parity check matrix @xmath5 $ ] defined by @xmath6 if and only if @xmath7 , @xmath8 , @xmath9 specifies a binary linear code @xmath10 .",
    "we say @xmath11 is the _ tanner graph _ for @xmath10 .",
    "the code @xmath10 is an ldpc code if the maximum degree of any vertex in @xmath11 is bounded by a constant .",
    "the length of the shortest cycle in @xmath11 is called the _ girth _ of @xmath11 denoted by @xmath12 . in the following ,",
    "we describe the construction of a bipartite tanner graph and give bounds on the parameters of the code defined by the graph .",
    "let @xmath13 be positive integers with @xmath14 , @xmath15 , @xmath16 and let @xmath17 be constant with @xmath18 .",
    "we construct a bipartite graph @xmath19 with average left degree @xmath20 and average right degree @xmath21 as follows .",
    "initially @xmath22 , @xmath23 and @xmath24 .",
    "we denote by @xmath25 the degree of a vertex @xmath26 .",
    "denote by @xmath27 the length of the shortest path from @xmath28 to @xmath29 in @xmath11 .",
    "clearly @xmath30 and @xmath31 for all @xmath32 initially .",
    "we will add @xmath33 edges to @xmath11 one by one .",
    "when the @xmath34 edge is added for some @xmath35 we shall say that the algorithm is in phase @xmath36 where @xmath37 and @xmath38 .",
    "we say that the edge belongs to _ left phase _",
    "@xmath39 and _ right phase _ @xmath40 .",
    "thus the first @xmath41 edges will be added during phase @xmath42 , edges @xmath43 to @xmath44 will be added during phase @xmath45 and so on .",
    "note that after left phase @xmath39 , the average left degree of the graph will be @xmath39 .",
    "similarly , the average right degree will be @xmath40 at the end of right phase @xmath40 .",
    "the algorithm terminates at the end of phase @xmath46 .",
    "the algorithm repeatedly picks up a vertex of minimum degree ( chosen alternately from @xmath47 and @xmath48 ) and adds from it an edge to the farthest vertex on the opposite side in such a way that the vertex degrees are not allowed to become excessive . during phase @xmath36",
    ", the degree of a left vertex never exceeds @xmath49 and the degree of a right vertex never exceeds @xmath50 .",
    "we will prove that at the end of left phase @xmath39 , every vertex in @xmath47 has degree at least @xmath51 and at the end of right phase @xmath40 every vertex in @xmath48 has degree at least @xmath52 .",
    "hence , when the algorithm terminates , the left and the right degrees are bounded above by @xmath53 and @xmath54 respectively , and bounded below by @xmath55 and @xmath56 respectively yielding a near - regular graph .",
    "the steps of the algorithm are formalized below : +    * for @xmath57 @xmath58 @xmath59 to @xmath60 do \\{@xmath61 edges added } * 1 .",
    "@xmath62 @xmath63 \\{phase is @xmath36 } 2 .   if @xmath57 is _ odd _ , choose a vertex @xmath28 of minimum degree from @xmath47 .",
    "let @xmath64 and @xmath65 .",
    "select a @xmath66 such that @xmath67 for all @xmath68 .",
    "add @xmath69 to @xmath70 .",
    "if @xmath57 is _ even _ , choose a vertex @xmath28 of minimum degree from @xmath48 .",
    "let @xmath71 and @xmath72 .",
    "select a @xmath66 such that @xmath67 .",
    "for all @xmath68 .",
    "add @xmath69 to @xmath70 .",
    "+    we shall call edges corresponding to odd and even values of @xmath57 as _ odd edges _ and _ even edges _ respectively .",
    "note that the algorithm may fail to progress if the set @xmath73 becomes empty and no edge could be added during some intermediate phase .",
    "we shall rule out this possibility later .",
    "@xmath10 is an ldpc code with rate @xmath74 .    since @xmath75 is an @xmath4 matrix , @xmath76 .",
    "since @xmath77 by assumption , the claim on rate follows . by construction",
    "the left and right degrees of any node in @xmath11 are bounded by @xmath53 and @xmath54 .",
    "since @xmath17 is constant the graph is of low density .",
    "the following lemma proved by induction establishes the key invariants maintained by the algorithm .    for all @xmath78 and @xmath79",
    "the following holds :    * if the algorithm completes left phase @xmath39 then @xmath80 for all @xmath81 at the end of left phase @xmath39 . *",
    "if the algorithm completes right phase @xmath40 then @xmath82 for all @xmath83 at the end of right phase @xmath40 .",
    "we shall prove the first statement using induction . initially the hypothesis holds .",
    "assume the statement true for some @xmath39 , @xmath84 and consider the the situation after completion of left phase @xmath49 .",
    "let @xmath85 , @xmath86 and @xmath87 be the number of vertices with degree @xmath51 , @xmath39 and @xmath49 respectively at the end of left phase @xmath39 . since the average degree of a left node is @xmath39 at the end of left phase @xmath39 , we have the following : @xmath88 canceling terms we have @xmath89 .",
    "thus to satisfy the lower bound in the induction hypothesis at most @xmath90 edges need to be added to the @xmath91 deficient vertices in @xmath47 during left phase @xmath49 . since out of the @xmath92 edges added during left phase @xmath49",
    "at least @xmath90 must be from minimum degree vertices in @xmath47 ( because every odd edge will be added from a vertex of minimum degree in @xmath47 ) , all the @xmath91 deficient vertices would have increased their degree by at least one and the lower bound on the left degree will be satisfied after phase @xmath49 . since the average degree of a left vertex at the end of left phase @xmath49 is @xmath49 , there always will exist a vertex @xmath28 in @xmath47 with @xmath93 before the completion of left phase @xmath49 .",
    "hence the algorithm will never choose a left vertex of degree @xmath49 for adding an edge when an odd edge is added during phase @xmath49 .",
    "finally , the algorithm explicitly ensures that an even edge is added from a vertex @xmath83 to @xmath81 during phase @xmath49 only if @xmath94 before the addition .",
    "hence in all cases , the upper bound on vertex degree is also maintained during left phase @xmath49 .",
    "the second statement in the lemma is proved similarly .",
    "it remains to be shown that the algorithm will indeed complete all the phases successfully .",
    "the algorithm may fail to complete phase @xmath39 if at some stage the set @xmath73 constructed by the algorithm is empty .",
    "the following lemma rules out this possibility .",
    "if @xmath18 the algorithm will complete all the phases .",
    "suppose that the algorithm fails at some phase @xmath36 because the set @xmath73 becomes empty while trying to add an odd edge from a vertex @xmath81 .",
    "by lemma 1 , @xmath28 must have at least @xmath95 neighbours , each of degree at least @xmath96 .",
    "since @xmath28 has at most @xmath49 neighbours ( by lemma 1 ) and @xmath97 , there must be at least @xmath98 non - neigbours of @xmath28 in @xmath48 with degree @xmath50 .",
    "thus the total degree of all vertices in @xmath48 must be at least @xmath99 .",
    "however , before phase @xmath36 ends the average right degree is less than @xmath40 .",
    "hence we have : @xmath100 after simplification this yields @xmath101 . considering the case when an even edge is added and applying similar arguments we get the condition @xmath102 . since @xmath103 , @xmath104 and @xmath105 , if @xmath106 the failure condition will never occur and the algorithm will successfully complete phase @xmath107 .",
    "we are now ready to prove the bound on the girth .",
    "@xmath108 .",
    "assume that a smallest length cycle in @xmath11 of length @xmath109 was formed during phase @xmath36 of the algorithm .",
    "assume @xmath81 had the least degree and was connected to @xmath83 during the addition of an odd edge causing the cycle .",
    "let @xmath110 .",
    "the node @xmath28 had to be connected to @xmath29 and not to any node in @xmath111 because @xmath112 for all @xmath113 .",
    "but there are at most @xmath114 nodes of degree @xmath50 during right phase @xmath40 .",
    "thus @xmath115 .",
    "hence @xmath116 . but",
    "all nodes in @xmath117 must be at a distance at most @xmath118 from @xmath28 .",
    "since the maximum left and right degrees of a node in @xmath11 are bounded by @xmath53 and @xmath54 respectively , the number of such nodes is bounded above by @xmath119 . combining the lower and upper bounds we get :                @xmath120    a similar argument for the case @xmath121 and @xmath122 for the addition of an even numbered edge yields the inequality : @xmath123 the statement of the theorem follows by noting that @xmath105 and taking the lower of the two bounds .",
    "the following table summarizes the minimum values of block length required for achieving various values of girth and average left degree for codes of designed rate @xmath0 .",
    "obtained by setting @xmath124 and @xmath125 .",
    "these values were obtained experimentally by varying the values of @xmath17 and @xmath126 given as input to the algorithm .",
    "the minimum value of block length required for achieving a given girth in actual experiments turns out to be lower than the bound proved in theorem 2 indicating that the bound is not tight .",
    "+     left - degree & girth & block length + ( average ) & & + 3 & 6 & 40 + 4 & 6 & 80 + 5 & 6 & 172 + 3 & 8 & 252 + 4 & 8 & 940 + 3 & 10 & 1490 +",
    "assuming an adjacency list representation for the graph , the selection of a farthest non - neighbour satisfying the degree bound necessary during each edge addition may be performed by a simple breadth first search in @xmath127 time .",
    "since the total number of edge additions is linear when @xmath17 is fixed constant , the overall construction complexity is @xmath128 .",
    "we shall refer to the code of block length @xmath92 defined by a tanner graph of girth @xmath126 and average left degree @xmath17 as an @xmath129 code .",
    "performance simulations for ( 504,8,3 ) , ( 1008,8,3 ) and ( 4000,10,3 ) arg codes of designed rate @xmath0 ( corresponding to @xmath124 , @xmath125 in the algorithm ) are reported below .",
    "the arg codes perform slightly better than the mackay and regular peg codes of the same length @xcite .",
    "the bit and word error rate curves for the regular mackay and peg codes of the same length are plotted together with those of the arg code for easy reference .",
    "we have presented an algorithm for constructing near - regular ldpc codes of large girth . from a theoretical point of view",
    ", the algorithm yields an asymptotic family with a provable @xmath130 girth bound and quadratic complexity .",
    "the algorithm also gives good performance in practice in comparison with regular codes of the same length .",
    "the problem of improving the girth bound remains open for further investigation .        c. di , d. proietti , i. e. telatar , t. j. richardson and r. urbanke , `` finite length analysis of low - density parity - check codes on the binary erasure channel , '' _ ieee trans .",
    "inf . theory .",
    "1570 - 1579 , june 2002 .",
    "m. g. luby , m. mitzenmacher , m. a. shokrollahi , d. spielman , `` improved low density parity check codes using irregular graphs and belief propagation , '' _ ieee trans .",
    "info . theory _",
    ", vol 47 , pp.585 - 588 , feb . 2001 ."
  ],
  "abstract_text": [
    "<S> an elementary combinatorial tanner graph construction for a family of near - regular low density parity check ( ldpc ) codes achieving high girth is presented . </S>",
    "<S> the construction allows flexibility in the choice of design parameters like rate , average degree , girth and block length of the code and yields an asymptotic family . </S>",
    "<S> the complexity of constructing codes in the family grows only quadratically with the block length . </S>"
  ]
}