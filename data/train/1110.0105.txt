{
  "article_text": [
    "the name of our team is python - dtu .",
    "we participated in the contest in 2009 and 2010 as the jason - dtu team @xcite , where we used the jason platform @xcite , but this year we use just the programming language python . + we intend in a later paper to elaborate on the reasons for abandoning the jason platform and its agent - oriented programming language agentspeak .",
    "the members of the team are as follows : * jrgen villadsen , phd * mikko berggren ettienne , msc student ( new in the team this year ) * steen vester , msc student + we are affiliated with dtu informatics ( short for department of informatics and mathematical modelling , technical university of denmark , and located in the greater copenhagen area ) .",
    "the main contact is associate professor jrgen villadsen , dtu informatics , email : 4 .",
    "we expect that we will have invested approximately 400 man hours when the tournament starts .",
    "the competition is built on the java massim platform and the java eismassim framework is distributed with the competition files .",
    "this framework is based on eis and abstracts the communication between the server and the agents to simple java method calls and callbacks .",
    "+ to utilize this framework we started out with the java implementation of python called jython which in contrast to python can import java libraries and classes . to support agent communication in our multi - agent system",
    "we have so far used the apache activemq as a messaging server which offers clients for all popular programming languages . using the eismassim java framework together with activemq clients written in python gluing it all together with jython gave some performance issues when exchanging percepts between the agents .",
    "+ we found that each component performed well tested in a controlled context which suggested that the issues were related to the interaction between the components .",
    "+ we decided to skip jython and eismassim to instead follow a much cleaner python - only implementation . even though some work was needed to implement the protocol specific parts which eismassim handled , this left us with a more flexible implementation of which we have complete knowledge and control of every part of the implementation .",
    "it also solved the performance issues related to component interaction .",
    "+ we also plan to skip the messaging server and instead let the agents communicate directly using a simple and efficient text - based protocol to further improve the performance of the system .",
    "a simple text - based protocol allows us to keep the distributivity and modularity .",
    "thus it will still be posible to use agents written in different programming languages .",
    "furthermore , by implementing our own message server , we can tweak the low - level features to suit the need of our specific system .",
    "2 .   we do not use any existing multi - agent system methodology .",
    "3 .   we do not plan to distribute the agents on several machines .",
    "we do not plan a solution with a centralization of coordination / information on a specific agent .",
    "rather we plan a decentralized solution where agents share percepts through messages and coordinate actions using distributed algorithms .",
    "the team communication is based on the publisher - subscriber pattern .",
    "our message server has a number of topics to which agents can subscribe and publish messages .",
    "this supports one - to - one communication and one - to - many communication in a simple way where the agents determine which topics to subscribe to .",
    "6 .   to assign goals to agents we use a ring - based auction algorithm .",
    "each round in an auction includes @xmath0 messages where @xmath0 is the number of agents participating . before participating in an auction all agents score their top @xmath0 goals and",
    "use this score to determine their bidding strategy .",
    "the algorithm terminates when all @xmath0 agents are assigned to a unique goal .",
    "each agent acts on its own behalf based on its local view of the world which is updated through percepts and is thus autonomous and reactive .",
    "this is implemented as an agent - control - loop in which the agents decide which actions to execute based on their current view of the world .",
    "we have considered implementing an algorithm to determine the best way to parry a series of attacks from a saboteur agent which would make the agents proactive .",
    "1 .   we implement the multi - agent system using just the programming language python . +",
    "even though we all have more experience with java , we choose python as our programming language , as we think it has some advantages over java , mainly in development speed / programmer effectiveness . some of the reasons being that python in contrast to java : * is dynamically typed * is concise * is compact * supports multiple programming paradigms ( object - oriented , imperative , functional ) * is popular for scripting * does not need to be compiled before execution 2 .",
    "we use python 2.7 on ubuntu linux and mac os x as the development platforms and gedit , eclipse and textmate as code editors / ides .",
    "3 .   as the runtime platform for the competition we plan to use a suitable linux system with python 2.7 . 4 .",
    "we plan to use the following algorithms : * all - pair shortest path extended to support dynamic vertex addition * custom breadth - first - searches * ring - based agreement algorithm    1    rafael  h. bordini , jomi  fred hbner , and michael wooldridge .",
    "programming multi - agent systems in agentspeak using _",
    "jason_. john wiley & sons , 2007 .",
    "niklas skamriis boss , andreas schmidt jensen , and jrgen villadsen .",
    "building multi - agent systems using _",
    "jason_. annals of mathematics and artificial intelligence , springer online first 6 may 2010 .",
    "steen vester , niklas skamriis boss , andreas schmidt jensen , and jrgen villadsen .",
    "improving multi - agent systems using _ jason_. annals of mathematics and artificial intelligence , springer online first 5 march 2011 .",
    "thanks to niklas christoffer petersen , msc student , for comments .    more information about",
    "the python - dtu team is available here : + http://www.imm.dtu.dk/~jv/mas",
    "our idea to skip the message server and implement our own text - based protocol was slightly modified during the implementation phase . instead of implementing our own message system",
    ", we reached the pragmatic conclusion to instead let the agents communicate trough direct reference to a shared data structure .",
    "this allowed us to spend more time on other important issues and freed us from all performance issues .",
    "the main reason for the message system idea was to preserve modularity and this could easily be implemented at a later state if time allowed .    in the early development phase we suspected our dynamic all - pair shortest path algorithm as a candidate for our performance issues",
    "however we discovered that the issues were i / o related , and found that we had plenty of processing time and power to perform multiple stock graph search algorithms at each simulation step .",
    "this made our dynamic all - pair shortest path algorithm superfluous for this scenario .",
    "however it could be highly relevant in case of less processing time or bigger graphs ."
  ],
  "abstract_text": [
    "<S> we provide a brief description of the python - dtu system , including the overall design , the tools and the algorithms that we plan to use in the agent contest .    updated 1 october 2011 : appendix with comments on the contest added . </S>"
  ]
}