{
  "article_text": [
    "formcalc @xcite is a mathematica package for the calculation of feynman amplitudes .",
    "amplitudes generated by feynarts @xcite are simplified analytically and converted to a self - contained fortran code for the computation of the squared matrix element .",
    "the present article describes the following features added or enhanced in version 5 :    * iterative build - up of essentially arbitrary phase - spaces with various cuts , * convolution with density functions for external particles , * uniform treatment of kinematic variables , * better modularity and code reusability , i.e.  less cross - talk between program modules .",
    "the looptools library supplies the implementations of the scalar and tensor one - loop integrals necessary for running the fortran code generated by formcalc .",
    "the extensions in version 2.2 are :    * addition of the five - point family of functions , * a collective two - point function ` bget ` similar to ` cget ` and ` dget ` , * complex versions of most integrals , * run - time selection of alternate versions for checking , * a command - line interface , * enhanced cache functionality , * better internal accuracy , and a complete quadruple precision build available on intel x86/ifort platforms .",
    "formcalc 5 no longer uses hand - tailored phase - space parameterizations like its predecessor versions , but builds up the @xmath0-particle phase - space iteratively by nested integrations over the invariant mass @xmath1 and solid angle @xmath2 of each outgoing particle @xmath3 .",
    "this procedure is encoded in the subroutine ` split ` :    ( 187,143)(-2,-5 ) ( -2,67)(93,135)forestgreenpastelgreen ( 0,64)[lt]`call split `    ( 0,100)(50,100 ) ( 1,100)(48,100 ) ( 10,106)[b]@xmath4    ( 55,102)(80,130 ) ( 55.8,103)(79,129 ) ( 75,120)[lt]@xmath5    ( 54,100)(13,58,158 ) ( 50,115)[b]@xmath6    ( 55,98)(90,70 ) ( 55.8,97.3)(88.5,71.3 ) ( 67,83)[tr ]    ( 95,72)(120,100 ) ( 95.8,73)(119,99 ) ( 120,103)[lb]@xmath7    ( 94,70)(15,58,89 ) ( 94,70)(15,98,128 ) ( 96,93)[l]@xmath8    ( 95,66)(130,38 ) ( 95.8,65.3)(128.5,39.3 ) ( 108,52)[tr ]    ( 133,42)[lt]@xmath9    ( 150,28)(175,56 ) ( 150.8,29)(174,55 ) ( 170,59)[lb]@xmath10    ( 149,25)(13.5,60,140 ) ( 145,41)[b]@xmath11 ( 150,25)(13,-36,47 ) ( 166,25)[l]@xmath12    ( 150,23)(185,-5 ) ( 150.8,22.3)(184,-4.1 ) ( 163,8)[tr]@xmath13    counting the degrees of freedom , there are @xmath14 @xmath15-integrations and @xmath0 @xmath16-integrations .",
    "the corresponding phase - space parameterization is @xmath17 where @xmath18 .",
    "the particle s momentum @xmath19 and @xmath20 are given in the respective decay s rest frame .",
    "the @xmath21-integration is trivial because of axial symmetry . from the practical point of view",
    "this looks as follows ( this code is taken almost verbatim from formcalc s ` 2to3.f ` ) :    .... p = 0 ex = 0 ey = 0    ez = 1 minv = sqrts msum = mass3 + mass4 + mass5    call split(5 , dble(mass5 ) , & p , ex , ey , ez , minv , msum , fac , 0 ,   & var(xmrem5 ) , var(xcosth5 ) , var(trivial ) )    call split(4 , dble(mass4 ) , & p , ex , ey , ez , minv , msum , fac , 0 , & var(fixed ) , var(xcosth4 ) , var(xphi4 ) )    call vecset(3 , dble(mass3 ) , p , ex , ey , ez ) ....    one starts with the initial reference direction in @xmath22 and no boost , ` p = 0 ` .",
    "the available energy is given in ` minv ` and the sum of external masses in ` msum ` .",
    "the ` split ` subroutine is then called @xmath14 times for an @xmath0-particle final state .",
    "the reference direction , the boost , ` minv ` , and ` msum ` are automatically adjusted along the way for the respective remaining subsystem and ultimately determine the remaining @xmath0-th vector unambigously , which is then simply set by ` vecset ` .    about the integration variables more will be said in the next section . for the moment , note that the ` x ` in ` xmrem5 ` refers to the ratio , i.e.  ` xmrem5 ` runs from 0 to 1 .",
    "the actual integration borders are determined internally by split .",
    "formcalc 5 introduces a new homogeneous system for all ( potential ) integration variables .",
    "each variable is referred to by a preprocessor constant , e.g.  sqrts or xcosth .",
    "the following parts can be accessed via preprocessor macros :    * ` var(v ) ` = the actual value of @xmath23 . * ` show(v ) ` = the value printed in the output  to print e.g.  @xmath24 instead of @xmath25 . * ` lower(v ) ` , ` upper(v ) ` , ` step(v ) ` = the lower limit , upper limit , and step width of @xmath23 .",
    "if the step is zero , the cross - section is integrated over @xmath23 . * ` cutmin(v ) ` , ` cutmax(v ) ` = the lower and upper cuts on @xmath23 .",
    "there are two special variables : ` fixed ` for fixed values , i.e.  no integration , and ` trivial ` for trivial integrations .",
    "split allows to place cuts on each @xmath15- and @xmath25-integration .",
    "the @xmath26-integration is not modified in the present setup .",
    "cut on & key + @xmath1 & ` cut_mrem ` + @xmath27 & ` cut_mrem_e ` + @xmath19 & ` cut_mrem_k ` + @xmath28 & ` cut_mrem_et ` + @xmath29 & ` cut_mrem_kt ` + @xmath30 & ` cut_mrem_rap ` + @xmath31 & ` cut_mrem_prap ` +   +   + cut on & key + @xmath20 & ` cut_costh ` + @xmath32 & ` cut_costhcms ` + @xmath27 & ` cut_costh_e ` + @xmath19 & ` cut_costh_k ` +    in practice , the application of cuts works as follows :    .... key = 0    cutmin(xmrem5 ) = e5min key = key + cut(cut_mrem_e , cut_min )    cutmin(xcosth5 ) = -(1 - costh5cut ) cutmax(xcosth5 ) = + ( 1 - costh5cut ) key = key + & cut(cut_costh , cut_min + cut_max )    call split(5 , dble(mass5 ) , & p , ex , ey , ez , minv , msum , fac , key , & var(xmrem5 ) , var(xcosth5 ) , var(trivial ) ) ... ....    the value of the cut is deposited in ` cutmin ` or ` cutmax ` and the cut registered by adding an identifier for the cut to the integer ` key ` , e.g.  ` cut(cutmreme , cutmin ) ` specifies a cut on the energy ( ` cutmreme ` ) from below ( ` cutmin ` ) which is used to restrict the invariant - mass integration ( ` cutmreme ` ) .",
    "note that these cuts really restrict the integration limits .",
    "they do not introduce veto functions ( 1 in wanted , 0 in unwanted areas ) into the integrand , which can severely hamper convergence .",
    "in addition , for each external particle @xmath3 several kinematical quantities are available :    * ` momspec(specm , i ) ` +  mass @xmath33 , * ` momspec(spece , i ) ` +  energy @xmath34 , * ` momspec(speck , i ) ` +  momentum @xmath35 , * ` momspec(specet , i ) ` +  transverse energy @xmath36 , * ` momspec(speckt , i ) ` +  transverse momentum @xmath37 , * ` momspec(specrap , i ) ` +  rapidity @xmath38 , * ` momspec(specprap , i ) ` +  pseudo - rapidity @xmath39 , * ` momspec(specdeltak , i ) ` +  the difference @xmath40 .      with the new variable system , the convolution with arbitrary parton distribution functions can easily be achieved .",
    "three modules are already included in formcalc 5 :    * ` lumiparton.f ` = initial - state partons , no convolution . *",
    "` lumihadron.f ` = initial - state hadrons , convolution with hadronic pdfs from the lhapdf library @xcite . *",
    "` lumiphoton.f ` = initial - state photons , convolution with compaz spectrum @xcite .",
    "the choice of parameters is directed as in previous versions by the two files ` process.h ` and ` run.f ` , which include one each of    * kinematics definitions : + ` 1to2.f ` , + ` 2to2.f ` , + ` 2to3.f ` , * convolution with pdfs : + ` lumiparton.f ` , + ` lumihadron.f ` , + ` lumiphoton.f ` , * model initialization : + ` modelsm.f ` , + ` modelmssm.f ` , + ` modelthdm.f ` .",
    "there is almost no cross - talk between different modules which are in that sense ` universal . ' also , the main program has been radically slimmed down in formcalc 5 .",
    "it now only scans the command line and invokes    .... call processini ( ... ) call parameterscan ( ... ) ....    all further action is decoupled from the main program and can easily be called from any application .",
    "it is thus straightforward to use formcalc - generated code in own programs .",
    "looptools is a library for the one - loop integrals .",
    "it is based on ff @xcite and has a fortran , c / c++ , and mathematica interface .",
    "it is referenced by the formcalc - generated code but can of course be used also without formcalc .",
    "the most significant addition is the five - point family of functions  the scalar integral @xmath41 and the tensor coefficients up to rank four .",
    "the default versions use the denner  dittmaier decomposition @xcite in which one inverse power of the gram determinant is cancelled and thus has considerably better numerical stability than the passarino  veltman @xcite decomposition , which is also available for comparison .",
    "the two - point functions have been united into the ` bget ` function which works similar to its ` cget ` , ` dget ` , and ` eget ` counterparts , in particular it caches its results .",
    "compatibility routines for the old ` b0 ` , ` b1 ` , etc .",
    "are of course available .",
    "the reason is mainly cache efficiency in view of the five - point decomposition : @xmath42      versions of the looptools functions for complex parameters have been added as far as they are contained in ff , i.e.  currently only some special cases for the complex @xmath43 are available .    [ cols=\"<,<\",options=\"header \" , ]      for some functions alternate versions exist , most of which are based on an implementation by denner .",
    "the user can choose at run - time whether the default version ` a ' ( mostly ff ) or the alternate version ` b ' ( mostly denner ) is used and whether checking is performed .",
    "this is determined by the version key :    ` 0*key `   = compute version ` a ' , + ` 1*key ` compute version ` b ' , + ` 2*key ` compute both , compare , return ` a ' , + ` 3*key ` compute both , compare , return ` b ' .",
    "usage is as in    .... call setversionkey(2*keyc0 + 3*keyd0 ) ....    the following keys for alternate versions are currently available : ` keya0 ` , ` keybget ` , ` keyc0 ` , ` keyd0 ` , ` keyeget ` , ` keyegetc ` . ` keyall ` comprises all of these .",
    "debugging output can be turned on similarly with e.g.     .... call setdebugkey(debugc + debugd ) ....",
    "identifiers range from ` debugb ` to ` debuge ` and are summarized by ` debugall ` .",
    "the integrals are listed in the output with a unique serial number .",
    "if the list of integrals becomes too long , one can select only a range of serial numbers for viewing , as in    .... call setdebugrange(4711 , 4715 ) ....",
    "this makes it easy to monitor ` suspicious ' integrals .",
    "version key , debug key , and debug range can be set also from the ` outside , ' i.e.  through environment variables , thus making it unnecessary to recompile the code .",
    "unfortunately , the ` keyx ` and ` debugx ` labels can not be used on the shell command - line , but ` -1 ` offers a convenient way to set all bits of an integer , thus having the same effect as ` keyall ` or ` debugall ` .",
    "for example :    .... setenv ltversion -1 setenv ltdebug -1 setenv ltrange 4711 - 4715 ....      the new command - line interface is useful in particular for testing and debugging .",
    "it lists the @xmath44-point scalar and tensor coefficients corresponding to the number of arguments , i.e.  3 arguments = b , 6 arguments = c , etc .",
    "currently only the real versions are accessible through the command - line interface , mainly because it is not straightforward syntactically to specify complex parameters on the command - line .",
    "the internal caching mechanism is meanwhile used by the following functions : ` bget ` , ` cget ` , ` dget ` , ` eget ` , ` bgetc ` , ` cgetc ` , ` dgetc ` , and ` egetc ` .",
    "obviously the former system with its ` getcachelast ` and ` setcachelast ` call for each individual cache was no longer practicable for all those caches .",
    "the new cache - management functions operate on all caches simultaneously :    * ` call clearcache ` +  clears all caches , * ` call markcache ` +  marks the current position , * ` call restorecache ` +  reverts to the last marked position .    for compatibility ,",
    "looptools still includes two routines ` getcachelast ` and ` setcachelast ` .",
    "they work only approximately as before , however , and are therefore deprecated .",
    "furthermore , the cache mechanism itself has been improved and now uses a binary search method .",
    "cache lookups are thus now faster , but as this has not often been a bottleneck , the impact on program performance will typically be minor in most applications .",
    "the accuracy of the tensor reduction has been improved through the use of an lu decomposition for the gram matrix and quadruple precision at strategic points internally .",
    "thanks to the intel ifort compiler , the latter is now widely available on the x86 platform .    a complete quadruple - precision build can be chosen with an alternate makefile .",
    "in particular the quadruple - precision version of the frontend can be useful to check cases where a severe loss of precision is suspected .",
    "formcalc 5 is the current release of the formcalc package with the following new features and extensions :    * new kinematics routines can build up almost arbitrary phase - spaces with a wide range of cuts possible .",
    "* formcalc s driver code consists of intuitively programmed , concise modules with almost no cross - talk between them .",
    "calling formcalc - generated code from other applications has been much simplified . *",
    "convolution with arbitrary distribution functions is possible .",
    "the following common cases are available out - of - the - box ( if formcalc came in one ) : * * partons ( no convolution ) , * * hadrons ( uses lhapdf ) , * * photons ( uses compaz ) . *",
    "all possible integration variables are treated uniformly and detailed kinematical information is available for all external legs .",
    "looptools 2.2 is the latest version of the looptools library with the following novelties :    * the scalar five - point function including its tensor coefficients up to rank four is provided . *",
    "complex versions are available as far as implemented in ff .",
    "* checking can be enabled at run - time , individually for all integrals which have alternate versions , by program call or through an environment variable . * in the same manner , debugging output can be turned on and off individually at run - time . *",
    "the cache system has been extended and improved . *",
    "a new command - line interface is useful for testing and debugging .",
    "* the accuracy of the tensor reduction has been enhanced . *",
    "a complete quadruple - precision build can be chosen with an alternate makefile ( e.g.  ` make -f makefile.quad-ifort ` ) .",
    "both packages are available as open source and stand under the gnu lesser general public license ( lgpl )",
    ". they can be obtained from the web sites + ` http://www.feynarts.de/formcalc ` , + ` http://www.feynarts.de/looptools ` .",
    "we thank s.  dittmaier for significant help with the implementation and comparison of the five - point functions and c.  schappacher for intensive beta - testing .",
    "t.  hahn , m.  prez - victoria , _ comp .",
    "* 118 * ( 1999 ) 153 [ hep - ph/9807565 ] .",
    "t.  hahn , _ comp .",
    "* 140 * ( 2001 ) 418 [ hep - ph/0012260 ] .",
    "whalley , d.  bourilkov , r.c .",
    "group , hep - ph/0508110 , http://hepforge.cedar.ac.uk/lhapdf .",
    "zarnecki , _ acta phys .",
    "polon . _ * b34 * ( 2003 ) 2741 [ hep - ex/0207021 ] .",
    "van oldenborgh , j.a.m .",
    "vermaseren , _ z.  phys .",
    "c _ * 46 * ( 1990 ) 425 .",
    "a.  denner , s.  dittmaier , _ nucl .",
    "phys .  b _ 658 ( 2003 ) 175 [ hep - ph/0212295 ] .",
    "g.  passarino , m.j .",
    "veltman , _ nucl .",
    "b _ * 160 * ( 1979 ) 151 ."
  ],
  "abstract_text": [
    "<S> the formcalc package automates the computation of feynarts amplitudes up to one loop including the generation of a fortran code for the numerical evaluation of the squared matrix element . </S>",
    "<S> major new or enhanced features in version 5 are : iterative build - up of essentially arbitrary phase - spaces including cuts , convolution with density functions , and uniform treatment of kinematical variables . the looptools library supplies the one - loop integrals necessary for evaluating the squared matrix element . </S>",
    "<S> its most significant extensions in version 2.2 are the five - point family of integrals , and complex and alternate versions . </S>"
  ]
}