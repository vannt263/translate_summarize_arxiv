{
  "article_text": [
    "the input is a set @xmath2 of messages , each with a probability @xmath3 and cost @xmath4 , and a parameter @xmath5  the number of channels .",
    "the output is ( finitely described ) infinite _ broadcast schedule @xmath6 _ for the messages  specifying for each time @xmath7 and channel @xmath8 , a message @xmath9 ( if any ) to be broadcast at that time on that channel . the goal is to minimize the cost of the schedule , denoted @xmath10 and defined as the _ expected response time _ plus the _ broadcast cost _ of @xmath6 .    for a finite schedule",
    "@xmath6 , the expected response time of @xmath6 , denoted @xmath11 , is defined as follows . at each time unit , each message is requested by some client with probability @xmath3 . once a message is requested , the client waits until the next time at which the message is scheduled on any channel ( or the end of the schedule , whichever comes first ) .",
    "@xmath11 is defined to be the expected waiting time for a random request at a random time .",
    "the broadcast cost of @xmath6 , denoted @xmath12 , is defined to be the total cost of scheduled messages , divided by the length of the schedule .    throughout the paper ,",
    "if any real - valued function @xmath13 is defined with respect to finite schedules , then we implicitly extend it to any infinite schedule @xmath6 as follows : @xmath14 , where @xmath15 denotes @xmath6 restricted to the first @xmath16 time slots .",
    "thus , the above definitions of expected response time and broadcast cost implicitly extend to infinite schedules .",
    "all of the infinite schedules considered in this paper will be periodic , in which case this extension is particularly simple .",
    "the data broadcast problem and special cases were studied in @xcite .",
    "works studying applications and closely related problems include @xcite .",
    "some of the above works study the generalization allowing messages to have arbitrary lengths , which we do not consider here .",
    "ammar and wong @xcite proved that there always exists an optimal infinite schedule with finite period .",
    "they also formulated a natural relaxation of the problem that gives an explicit lower bound on the optimum ; the performance guarantee in this paper is proven with respect to that lower bound .",
    "more recently , constant - factor polynomial - time approximation algorithms have been shown @xcite , the best to date being a @xmath1-approximation @xcite .",
    "although the problem itself is not known to be @xmath17-hard , several variants are known to be @xcite .",
    "khanna and zhou @xcite state that it is unknown whether the problem is max - snp hard , even when @xmath18 and without broadcast costs . in this paper , we show that it is not ( unless p = np ) .",
    "we present the first deterministic polynomial time approximation scheme for the problem , assuming the @xmath5 and each cost is bounded by a constant . by `` polynomial time '' , we mean that the time taken to output the finite description of the infinite schedule is polynomial in the number of messages @xmath19 in the input .",
    "our algorithm is based on a simple new observation that works for a special case of the problem .",
    "we use fairly technical but to some extent standard techniques to extend it to the general case .",
    "we sketch the idea here , glossing over a fair amount of technical detail .",
    "ammar and wong @xcite relax the optimization problem by allowing messages to ( a ) be scheduled at non - integer times and ( b ) to _ overlap _ , while still insisting that the total _",
    "density _ of the scheduled messages is at most @xmath5 , the number of channels ( the extension to the multiple channel case is due to  @xcite ) .",
    "the density of a message ( or set of messages ) is the total number of scheduled times , divided by the length of the schedule .",
    "standard calculus yields a solution to this relaxed problem .",
    "the solution specifies for each message @xmath20 a _ density _",
    "@xmath21 , meaning that the message should be scheduled every @xmath22 time units .",
    "ammar and wong describe the following simple randomized rounding algorithm for producing a real schedule : _ for @xmath23 , for @xmath24 , choose a single message @xmath20 randomly so that @xmath25 is @xmath26 ; schedule @xmath20 in schedule slot @xmath9 . _",
    "they observe that the expected waiting time for a random request for @xmath20 is essentially @xmath27 in this schedule . since the expected waiting time in the relaxed schedule is essentially @xmath28 ( because an average request falls midway between two successive broadcasts of @xmath20 ) , this yields a 2-approximation w.r.t .  expected response time .",
    "since the expected broadcast cost of @xmath6 is the same as the broadcast cost of the relaxed solution , the algorithm is a @xmath29-approximation algorithm w.r.t .  the total cost .",
    "ammar and wong also describe a greedy algorithm that bar - noy , bhatia , naor and schieber generalize in  @xcite to the multiple channel case and prove to be essentially a derandomization of the randomized algorithm , with the same performance guarantee .",
    "* round - robin within groups .",
    "* since our goal is a ptas , we naturally group messages that are essentially equivalent ( i.e.  have essentially the same cost and probability ) .",
    "our simple idea is the following variation of ammar and wong s rounding scheme , which is most simply described as follows : schedule the messages as ammar and wong do , but then , _ within each group , rearrange the messages so that they are scheduled in round - robin ( cyclic ) order . _",
    "the broadcast cost is unchanged , but the expected response time improves as follows .",
    "whereas before , a random request for a message @xmath30 in a group @xmath31 would have waited ( in expectation ) for @xmath32 messages from @xmath31 until finding its message , in the round - robin schedule , a random request for @xmath30 will wait ( by symmetry ) for @xmath33 messages from @xmath31 .",
    "that is , the expected wait in the round - robin schedule is @xmath34 times the expected wait in the ammar - wong schedule .",
    "since the ammar - wong schedule has performance guarantee @xmath29 , the round - robin schedule has performance guarantee @xmath35 .",
    "thus , when the groups are all large , the ammar - wong relaxation is essentially tight .    * extending to the general case .",
    "* recall that for our purposes a group is a collection of messages with approximately ( w.r.t .",
    "@xmath36 ) the same probability and cost . as long as each group has size at least @xmath37 , the round - robin schedule gives a @xmath38-approximation .",
    "to extend to the general case , we show the following . _",
    "any _ set of messages can be partitioned into three classes as follows :    1 .    a constant number of _ important _ ( high probability ) messages .",
    "2 .    messages belonging to _ large groups_. 3 .",
    " leftover messages , contributing _",
    "negligibly _ to the cost .",
    "the basic intuition for the existence of this partition is that , due to the rounding , the message - probabilities of the successive groups decrease exponentially fast .",
    "thus , for all but a constant number of groups ( where the message - probability is high ) , either the group is very large , or the total probability of the messages in the group is very small .",
    "althouth the intuition is basic , obtaining the proof with the appropriate parameters is is somewhat involved and delicate .",
    "once we have the partition , we proceed as follows : + 1 .",
    "find the density @xmath39 of messages in @xmath40 in a near - optimal schedule of @xmath40 and @xmath41 .",
    "compute an optimal `` short '' schedule @xmath42 of @xmath40 having density approximately @xmath39 .",
    "schedule the messages in @xmath41 in the slots not occupied by @xmath40 , using the group - round - robin algorithm .",
    "`` stretch '' the schedule , interspersing empty slots every @xmath37 time units , and schedule the messages for @xmath43 in these empty slots .",
    "note that in order to `` cut and paste '' the schedules together , we have to explicitly control the density of @xmath40 and @xmath41 .",
    "this in itself requires little that is new .",
    "the main new difficulty is the following . in step 3",
    ", we are using the round - robin algorithm to schedule @xmath41 , but in a schedule that is already partially filled by @xmath40 . for the analysis of the round - robin algorithm to continue to approximately hold ,",
    "we require that the empty slots in schedule @xmath42 are sufficiently _ evenly distributed _",
    "so that the scheduling of @xmath41 is not overly delayed at any time ( cost increases quadratically with delay ) .",
    "a - priori , imposing this additional requirement on @xmath42 might increase the cost of @xmath42 too much . to show that this is not the case , we show ( using a non - constructive probabilistic argument ) that there is a schedule of @xmath40 that has _ constant - length period _",
    ", density approximately @xmath39 , and cost approximately the cost of any optimal schedule of @xmath40 with density @xmath39 . since the period of this schedule is small , the empty slots are _ necessarily _ evenly distributed .",
    "the final output of the algorithm is a finite ( size linear in the input size ) description from which an infinite schedule with approximately optimal expected cost can be generated by a randomized algorithm in an `` on - line '' fashion , where each step requires @xmath44 time to schedule .",
    "the running time of the various steps is as follows . in step 1 ,",
    "only a constant number of densities @xmath39 need to be considered : we can try them all and take the best . for each @xmath39 ,",
    "the time for the remaining steps is as follows .",
    "step 2 can be done in constant time since the schedule we are looking for has constant length .",
    "step 3 can be done in randomized time in the size of the output .",
    "step 4 can also be done in randomized linear time in the size of the output .",
    "the final technical hurdle is showing that the algorithm can be derandomized ( extending the analysis of the greedy algorithm by bar - noy , bhatia , naor and schieber to this more complicated setting ) .",
    "the resulting deterministic algorithm outputs a polynomial - length schedule , the repetition of which gives the desired near - optimal infinite schedule .    .",
    "this is a rather technical contribution to the area of approximation schemes , which uses several usual techniques s.a . rounding , exhaustive search and treating `` large '' objects separately , but",
    "also requires a few additional ideas , specific to this problem , which we now point out . as in all previous papers since ammar and wong s seminal work on the topic , we focus on the very informative lower bound , in which one can separate the contribution of each message to the objective function . since the lower bound is tight up to a factor of 2",
    ", it helps us identify the messages which contribute a lot to the objective function and must be treated with special care ( `` important '' messages ) .",
    "one apparently difficult case arises when there are many messages of similar costs and probabilities , which individually contribute very little to the objective function but are quite significant as a group .",
    "one simple but important new idea is that the lower bound is in fact essentially optimal in that case and is achieved by a round - robin - type heuristic .",
    "our algorithm thus starts by classifying messages into three categories : first , a constant number of important messages ( set @xmath40 ) ; second , messages belonging to large groups ( messages are grouped when they have the same probability and cost ) ; the other messages are negligible and can easily be dealt with in the end .",
    "now , imagine that we guess the fraction of time which the optimal schedule devotes to broadcasting messages from each category ( or _ density _ of each category ) .",
    "it seems that one could construct the optimal schedule of the `` important '' messages @xmath40 with respect to the density constraint , and then use the unoccupied time slots to broadcast the messages from the second category using the round - robin - type heuristic .",
    "however this is only provably efficient if one can relate the period of the schedule of @xmath40 to the size of the groups of the second category .",
    "studying the period of an optimal schedule of @xmath40 requires a new idea : cutting the schedule into pieces and glueing them back together in random order ( with special glue that prevents interactions between blocks ) has a smoothing effect which enables us to prove that the period can essentially be bounded by @xmath45 .",
    "furthermore , a structural lemma , requiring some further technical partitioning idea , proves that the groups can be assumed to have size at least @xmath46 for any @xmath47 .",
    "this is the key to the analysis of our approximation scheme .",
    "* plan of the paper*. we construct the algorithm gradually . after a preliminary section ( section [ sec : lb ] ) recalling the lower bound of ammar and wong and extending it suitably , we present ( section [ sec : simplecase ] ) a simple special case of message set ( every message has many identical sibling messages ) , for which we combine information from the lower bound with a round - robin type heuristic .",
    "we then study ( section [ sec : criticalcase ] ) a slightly more general case of message set ( every message , except for a constant number , has many identical sibling messages ) ; the proof of lemma [ lem : boundedperiod ] for bounding the period of the schedule of the important messages contains a random - shuffling type argument .",
    "section [ sec : negligible ] explains how to deal with negligible messages and is relatively straightforward .",
    "section [ sec : ptas ] puts the ideas together to construct a polynomial type randomized approximation scheme ; its validity rests on the structural lemma [ lem : partition ] ; we then proceed to show how the algorithm can be derandomized in a greedy fashion and how the period of the resulting schedule can be controlled .",
    "finally in section [ sec : technical ] we state several easy but useful lemmas which are used in several of the other proofs .",
    "[ sec : simplecase ]    let the set of messages @xmath30 be partitioned into groups @xmath48 where group @xmath49 has size @xmath50 every message in @xmath49 has the same probability @xmath51 and broadcast cost @xmath52 .",
    "let @xmath39 be the desired maximum density of @xmath30 in the schedule",
    ". in this notation , ammar and wong s relaxation of the problem is : @xmath53    the minimization problem  @xmath54 is a lower bound to the contribution of the messages of  @xmath41 to the cost of any schedule  @xmath6 over @xmath5  channels , in which @xmath41  has density  @xmath55 .",
    "the problem has a unique solution  @xmath56 satsifying : @xmath57 , for some @xmath58 . if @xmath59 , then @xmath60 ; otherwise , @xmath61  is the unique solution to : @xmath62 .",
    "the following important observation states that _ w.l.o.g .",
    "_ messages from the same group can be scheduled in round robin order .",
    "[ lem : roundrobin ] for any schedule  @xmath6 , there exists a schedule  @xmath63 in which the messages are broadcast in round robin order within each group , so that : +    @xmath64     +    in  @xmath6 , consider a request for a message of  @xmath49 , and the @xmath65  next broadcasts of messages of @xmath49 after that request : the expected response time to the request is minimized if all messages of  @xmath49 are broadcast during those  @xmath65 time slots .",
    "thus changing @xmath6 so as to reschedule the messages in  @xmath49 in round robin order , decreases the expected response time while leaving the broadcast cost . note that if @xmath6  is periodic of period @xmath66 , then the resulting schedule  @xmath63 is also periodic and of period at most @xmath67 .",
    "the next step consists in observing that the lower bound is _ tight _ in the setting of this section .    according to the general lower bound",
    ", it is desired that a message is broadcast every @xmath68 , and then a random request for that message would have to wait for about @xmath69 on average . in the algorithm of  @xcite ( specialized to this setting ) , each _ message _",
    "@xmath20 is broadcast with probability  @xmath70 , so that any request has to wait on average  @xmath68 time : thus they obtain then a @xmath29-approximation",
    ".    on the other hand , in our algorithm  [ algo : rando ] , we schedule the _ group _  @xmath49 with probability  @xmath71 , and then the messages in round robin order within the groups .",
    "since a request for a message in  @xmath49 , has to wait with equal probability for the 1@xmath72 , the 2@xmath73 , ... , the @xmath74  broadcast of messages in  @xmath49 , it will be served after @xmath75  expected time .",
    "we will thus obtain a @xmath76-approximation , which is a  @xmath38-approximation since all groups have size at least @xmath37 .",
    "we believe that this simple idea might be applicable to other problems .    [",
    "lem : rando ] in the setting of this section , the randomized algorithm  [ algo : rando ] constructs a one - channel schedule  @xmath6 whose cost satisfies : +    @xmath77 = { \\displaystyle } { \\sum_{j=1}^q \\left (          p_j \\frac{g_j(g_j+1)}2 \\tau_j + \\frac{c_j}{\\tau_j }          \\right ) - \\frac12 } $ ]     + if @xmath78  is chosen in order to minimize  @xmath79 , then algorithm  [ algo : rando ] is a  @xmath80-approximation .",
    "@xmath81 add a dummy group  @xmath82 with  @xmath83 and @xmath84 .",
    "@xmath81 draw at random a group  @xmath49 with probability  @xmath85 .",
    "schedule in time slot  @xmath86 , the next message of group @xmath49 in round robin order , if @xmath87 ; and stay idle otherwise .",
    "a message of  @xmath49 is broadcast during a time slot with probability  @xmath85 , then the average density of the group  @xmath49 is then @xmath85 .",
    "then : @xmath88=\\sum_j c_j/\\tau_j$ ] . +",
    "as explained above , a request for a message in  @xmath49 waits on average @xmath89 until the end of the current time slot and then @xmath90  broadcasts of a message in  @xmath49 on average .",
    "then : @xmath91=\\frac12+\\sum_j p_j g_j \\tau_j \\frac{g_j+1}2 $ ] . + finally if @xmath92 , then since @xmath93 and @xmath94 , we get that : @xmath95 { \\leqslant}\\sum_j(p_jg_j\\frac{g_j+2}2\\tau^*_j + c_j/\\tau^*_j)$ ] , hence the claimed performance ratio .",
    "note that the law of large numbers implies that the expected cost is obtained with probability @xmath96 .",
    "next we treat the case where the set of the messages  @xmath30 can be partitioned into two sets  @xmath40 and  @xmath41 such that    * @xmath40 consists of a constant number of messages * @xmath41 is partitioned into groups as in the previous section , such that each group has size at least @xmath99 , where @xmath100  will be defined later .",
    "a key point is to remark that , if we know the density of the messages of  @xmath40 in an optimal schedule , and if we can schedule the messages of  @xmath40 almost optimally subject to this density constraint while keeping the period of the schedule small , then we can complete the schedule by scheduling the messages of  @xmath41 in the remaining empty slots according to the randomized algorithm given above .",
    "determining the densities of  @xmath40 and  @xmath41 thus allows to treat those two sets of messages independently .",
    "recall from the discussion in the introduction that the challenge at this point is to show that there is a near - optimal schedule of @xmath40 with the appropriate density @xmath39 and in which the empty slots are relatively uniformly distributed . if so , then we can find the desired schedule for @xmath40 by exhaustive search , and then schedule @xmath41 into the empty space in the schedule using the round - robin algorithm previously described .    to show the existence of the desired schedule for @xmath40 , we show there is a near - optimal schedule of @xmath40 with the appropriate density and with _ constant period _ ( independent of @xmath39 ) .",
    "[ lem : boundedperiod ] given a set of messages  @xmath40 , with cost at most @xmath101 , some constant @xmath102 and a density  @xmath103 , there exists a periodic schedule  @xmath6 satsifying :    1 .",
    "the density of empty slots is @xmath6 is approximately  @xmath104 : + @xmath105 ,  and   @xmath1060,1[$ ] 2 .",
    "the cost of @xmath6 is approximately optimal : + + @xmath107 3 .",
    "the period @xmath108 of @xmath6 can be bounded : + + @xmath109    our proof uses the probabilistic method .",
    "the main new , simple idea , is in the construction , which efficiently smoothes the cost function by erasing its possible wide variations over time in the particular schedule under study .",
    "let  @xmath66 be a parameter to be determined later .",
    "let  @xmath110 be a periodic schedule of  @xmath40 with density  @xmath39 and which is nearly optimal : basically , @xmath111 .",
    "let  @xmath112 denote the period of  @xmath110 , which w.l.o.g .",
    "is a multiple of @xmath66 .    from  @xmath110",
    ", construct another periodic schedule  @xmath113 by inserting in  @xmath110 , every @xmath66  steps from a random starting point , all the messages of  @xmath40 in a fixed order .",
    "@xmath113  is thus structured into blocks of length  @xmath114 .",
    "let  @xmath15 be the random schedule obtained by concatenating @xmath16  blocks chosen at random from  @xmath113 .",
    "for suitable values of  @xmath66 and  @xmath16 , we can prove that with positive probability , @xmath15  satisfies the first two statements of the lemma .",
    "the period of  @xmath15 is clearly  @xmath115 , which together with the choice of @xmath66 gives the third statement of the lemma .",
    "let  @xmath116 denote the bound of the lemma for @xmath117 .",
    "parameter @xmath47 will be defined as  @xmath118 .",
    "the algorithm for scheduling @xmath119 is given below , and is an @xmath36-approximation for the cases studied in this section .",
    "since this is the critical case , the analysis is promoted from a lemma to a proposition .",
    "[ pro : a+b ] let @xmath120 . in the setting of this section ,",
    "algorithm  [ algo : a+b ] yields a schedule  @xmath6 , such that : @xmath121 { \\leqslant}(1 + 5{\\varepsilon } ) { \\ensuremath{\\operatorname{opt}}}(a\\cup b)\\ ] ]    @xmath81 compute an optimal periodic schedule  @xmath122 of  @xmath40 with density  @xmath123 and period  @xmath124 .",
    "@xmath81 choose @xmath125 which minimizes : +    @xmath126    @xmath81 compute the @xmath56 that minimizes @xmath127 ; add a dummy group  @xmath82 with @xmath128 and @xmath129 , such that : @xmath130 .",
    "@xmath81 schedule during time slot  @xmath86 , the same messages of  @xmath40 on the same channels , as in  @xmath131 .",
    "@xmath81 draw a group  @xmath49 of  @xmath41 with probability  @xmath132 .",
    "schedule in slot  @xmath133 , the next message of  @xmath49 in round robin order , if  @xmath87 ; and stay idle otherwise .",
    "the proof works in two steps :    1 .",
    "[ pf : stepana1 ] scheduling the messages of  @xmath41 with the randomized algorithm  [ algo : rando ] in the empty slots achieves a good approximation of @xmath134 ( using the mapping lemma  [ lem : mapping ] ) .",
    "[ pf : stepopt1 ] @xmath134 is a good approximation of the optimal cost ( using lemma  [ lem : boundedperiod ] ) .",
    "in this section , to show how to incorporate the `` negligible '' messages into the schedule .",
    "we assume that the set of messages  @xmath30 is partitioned into two sets  @xmath136 and  @xmath43 , where @xmath43 has a `` negligible contribution '' to the cost .",
    "( this section can be skipped by the reader who is in a hurry ) .    a subset of messages  @xmath137 has _ negligible contribution _ if its contribution to the lower bound is @xmath138 , when it is scheduled on one channel with density  @xmath139 , _ i.e. _ : +    @xmath140    the constants  @xmath141 and  @xmath142 are arbitrary and are chosen in order to improve readability in the following results .",
    "basically , a subset of messages  @xmath43 is negligible if its contribution to the cost is small , in the schedule constructed by inserting its messages are inserted from time to time ( every @xmath143 steps ) into a schedule of the rest of the messages .",
    "we first construct from @xmath6 another schedule @xmath146 of @xmath136 by inserting an empty slot , on all the channels , every @xmath147  slots , starting at a random point in  @xmath148 .",
    "the stretching lemma  [ lem : stretching ] ensures that : @xmath149 { \\leqslant}(1+{\\varepsilon}/10){\\ensuremath{\\operatorname{cost}}}(s , ab)$ ] .",
    "let @xmath56 be the solution to the minimization problem  @xmath150 .",
    "we obtain  @xmath63 by scheduling the messages of  @xmath43 on the first channel in the empty slots of  @xmath146 , according to the randomized algorithm  [ algo : rando ] with  @xmath151 .",
    "lemma  [ lem : rando ] and the scaling lemma  [ lem : scaling ] ensure that the expected contribution of  @xmath43 is bounded by  @xmath152",
    ".    the algorithm above can easily be derandomized by trying all the starting point and choosing the one that minimizes the over cost for the messages of  @xmath136 and use the greedy algorithm  [ algo : greedy ] to schedule  @xmath43 .",
    "we now assume that we are in the general case .",
    "the aim of the section is to prove the following theorem , which is the main result of the paper .",
    "[ thm : ptas ] given @xmath153 and a set  @xmath30 of messages , with message costs bounded by @xmath101 , algorithm  [ algo : ptas ] constructs in @xmath154  time a periodic schedule  @xmath6 with period  @xmath155 , so that : @xmath156    we will first derive a ptras that will be derandomized in section  [ sec : derando ] .      we now need to put together the ideas developed for the special cases of the previous sections . as a preliminary treatment ,",
    "we use standard rounding techniques to reduce the number of different messages .",
    "[ lem : rounding ] without loss of generality , we can assume that the request probabilities  @xmath3 are a multiple of powers of  @xmath157 and the broadcast costs are multiples of  @xmath158 : @xmath159 where @xmath160 .",
    "standard and omitted .",
    "the following lemma is the main tool for putting together the various special cases studied so far , and is thus a key part of our construction .",
    "we would like to claim that similar ideas could be applied to other problems as well , however we were unable to abstract simple and general ideas from the technical proof .",
    "perhaps , if one believes that every approximation scheme rests on one `` structural lemma '' , it can be seen as the structural lemma for this problem .",
    "[ lem : partition ] given  @xmath161 and @xmath162 , one can construct , in linear time in @xmath19 , a partition of the groups  @xmath163 , of messages with probability  @xmath164 ( where @xmath165 is the normalizing constant such that @xmath166 ) and cost  @xmath167 , into three sets  @xmath168 so that :    1 .",
    "the groups of @xmath40 have total size constant : @xmath169 , independent of  @xmath19 .",
    "2 .   the groups of @xmath41 are all large : + + @xmath170 3 .",
    "the messages in @xmath43 have negligible contribution if they are scheduled rarely ( with density  @xmath139 ) : + + @xmath171    since the proof is rather technical , we will only in this extended abstract give the construction of the partition into @xmath172 and @xmath43 in the case when there are no costs ( @xmath173 ) and there is only one broadcast channel ( @xmath18 ) ; this already contains the gist of the proof .",
    "let @xmath174 . in the case where there are no costs , the lower bound can be solved explicitly ( see @xcite ) even when there is a density constraint , to yield , for any subset @xmath175 of the message set : +    @xmath176    [ [ the - construction ] ] _ the construction _",
    "+ + + + + + + + + + + + + + + + + +    the construction is best understood by referring to figure  [ fig : partition ] .",
    "we first deal with indices such that  @xmath177 . let @xmath178 be some constant to be defined later , and define @xmath179 , and @xmath180 .",
    "( one can observe already that since the contributions of the messages of @xmath181 form the tail of a geometrically decreasing series , they will be negligible , and so they will end up in @xmath43 ; moreover , since @xmath182 and @xmath50 are both bounded for the definition of @xmath183 , set @xmath183 can only contain a small number of messages and so these messages will end up in @xmath40 ) .",
    "we now consider the more delicate case of the groups for which @xmath184 , for which we will need to use the pigeon hole principle .",
    "we partition their indices into @xmath185  blocks as follows : @xmath186 where @xmath187  is some constant to be defined later . according to  @xcite , we can then rewrite the lower bound on the expected response time as @xmath188 , and the pigeon hole principle tells us that there exists at least one  @xmath189 such that @xmath190 .",
    "we now define @xmath191 , @xmath192 , and @xmath193 .",
    "finally we set @xmath194 and @xmath195 as shown on figure  [ fig : partition ] .",
    "it is now a simple matter to take our building blocks and deduce a randomized approximation scheme for the general data broadcast problem .",
    "[ pro : ptras ] given  @xmath196 , the randomized algorithm  [ algo : ptras ] yields a random schedule  @xmath6 with cost : @xmath121 { \\leqslant}(1 + 10{\\varepsilon}){\\ensuremath{\\operatorname{opt}}}(m)\\ ] ]    @xmath81 round the probabilities and costs of the messages in  @xmath30 , and partition the set of messages  @xmath30 into three sets  @xmath168 , according to lemma  [ lem : partition ] with @xmath100 .",
    "@xmath81 schedule @xmath40 and @xmath41 with algorithm  [ algo : a+b ] .",
    "@xmath81 insert the messages of  @xmath43 into the schedule of  @xmath40 and  @xmath41 , with the algorithm described in lemma  [ lem : schedulec ] .",
    "consider the rounded instance  @xmath197 of the set of messages .",
    "according to the previous proposition  [ pro : a+b ] and lemma  [ lem : schedulec ] , we have : +    @xmath77 { \\leqslant}(1+{\\varepsilon})(1 + 5{\\varepsilon}){\\ensuremath{\\operatorname{opt}}}({{\\ensuremath{\\dot m } } } ) $ ]    but lemma  [ lem : rounding ] ensures that : +    @xmath198    which yields the result .",
    "the insertion of  @xmath43 can be done at the same time than the broadcast of  @xmath40 and  @xmath41 in algorithm  [ algo : ptras ] .",
    "the ptras has one slight problem , namely , that it is not periodic , hence may be somewhat awkward to implement in some settings . in this section",
    "we derandomize it using greedy choices , and show how to control the period of the resulting algorithm .    [ not : greedystate ] we define the _ state _ @xmath199 at slot @xmath86 as the time period elapsed from the beginning of the @xmath200 of the @xmath50 last broadcasts of group @xmath49 to the end of slot @xmath86 , as shown figure  [ fig : greedystate ] .",
    "[ lem : greedy ] given a set of messages partitioned into groups @xmath201 of size @xmath50 , and a set of reals",
    "@xmath202 so that @xmath203 , the greedy algorithm  [ algo : greedy ] yields a one - channel schedule @xmath6 whose cost satisfies:@xmath204 if @xmath78  minimizes  @xmath79 , we get a @xmath205-approximation .",
    "@xmath81 add a dummy group @xmath82 , if needed .",
    "@xmath81 let @xmath206 be the state at time slot @xmath207 .",
    "@xmath81 let @xmath208 which minimizes : +    @xmath209    @xmath81 schedule during slot @xmath86 , the next message of @xmath49 in the round robin order , if @xmath87 , and stay idle otherwise .",
    "the greedy choice at time slot  @xmath86 is made in order to minimize the expected cost of the already allocated slots  @xmath210 , if the schedule continues with the randomized algorithm  [ algo : rando ] after time  @xmath86 ; this property ensures that the greedy schedule is at least as good as the randomized one .",
    "the above greedy algorithm could conceivably have very large period .",
    "the lemma below shows that we can truncate it so as to obtain a periodic schedule of polynomial length .",
    "[ lem : periodicgreedy ] given a set of messages partitioned into groups @xmath201 of size @xmath50 , a set of reals @xmath202 such that @xmath211 , and any  @xmath212 , algorithm  [ algo : periodicgreedy ] yields a one - channel schedule  @xmath6 with period  @xmath213 , whose cost is bounded by : @xmath214    @xmath81 schedule during slot @xmath215 message @xmath216 . @xmath81",
    "execute the greedy algorithm during slots @xmath217 .",
    "@xmath81 sort in increasing order the set @xmath218 and schedule in slots @xmath219 in order of increasing @xmath220 , the @xmath200 message of group @xmath49 in the round robin order .",
    "omitted .",
    "our main algorithm can now be found in algorithm  [ algo : ptas ] .",
    "round the probabilities and costs , and partition  @xmath30 into  @xmath168 as in the ptras .",
    "compute @xmath56 and the density @xmath125 and periodic schedule @xmath131 of @xmath40 to minimizes @xmath221 , as in algorithm 2 .",
    "compute the greedy periodic schedule  @xmath222 of  @xmath41 with @xmath223 and with period  @xmath224 .",
    "concatenate @xmath225 periods of  @xmath131 and map  @xmath222 into the empty slots in the natural order .",
    "compute the greedy periodic schedule  @xmath226 of  @xmath43 with @xmath227 where @xmath56  minimizes @xmath228 , and with period  @xmath229 .",
    "choose the best starting point in  @xmath230 and stretch the schedule of @xmath40 and @xmath41 by inserting a slot of  @xmath226 on the first channel every @xmath231 and an empty slot on the other channels at that time .",
    "let @xmath6 be the resulting schedule .",
    "choose the best starting point in  @xmath232 and construct  @xmath63 by stretching  @xmath6 by inserting the @xmath19  messages in fixed order on the first channel every @xmath233 .",
    "@xmath63 is then structured into independent blocks of length @xmath234 .",
    "the cheapest block  @xmath110 will be the period of our approximation .",
    "theorem  [ thm : ptas ] theorem  [ thm : ptas ] is proved by analyzing the algorithm  [ algo : ptas ] .",
    "the analysis is derived from the analysis of the ptras .",
    "the six first steps are exactly the same , except that the periodic greedy algorithm  [ algo : periodicgreedy ] is used instead of the randomized algorithm  [ algo : rando ] .",
    "since the performance ratio in algorithm  [ algo : periodicgreedy ] is better , the schedule  @xmath6 obtained step  6 is at least as good , and is periodic with period  @xmath154 : +    @xmath235    we finally reduce the period in steps  7 - 8 by using stretching lemma  [ lem : stretching ] , which ensures that at an increase of @xmath236 of the cost , we can extract from  @xmath6 a block  @xmath110 with length @xmath237 and : +    @xmath238",
    "the lemmas in this sections are useful for analyzing several of our constructions .",
    "the stretching lemma states that changing a schedule by inserting a few empty slots once in a while does not affect the expected response time .",
    "[ lem : stretching ] given a schedule  @xmath6 on @xmath5  channels of  @xmath30 and a positive integer  @xmath239 , let @xmath240 .",
    "consider the schedule  @xmath63 obtained from  @xmath6 by inserting  @xmath239 empty slots just before the time slots  @xmath241 , where @xmath242  is a random time in  @xmath243 .",
    "then : @xmath244 { \\leqslant}(1+{\\varepsilon}){\\ensuremath{\\operatorname{ert}}}(s)\\ ] ]        [ lem : scaling ] given a set of messages @xmath30 and a schedule @xmath6 , let @xmath122 the schedule obtained by scaling @xmath6 by a factor @xmath245 : @xmath122 schedule at time @xmath246 on some channel the same message as @xmath6 at time @xmath86 , and stays idle otherwise .",
    "then : @xmath247      the mapping lemma is used for analyzing the effect of inserting the messages from @xmath41 into the slots left empty in the density - constrained schedule of @xmath40 ; these slots may be spaced irregularly .",
    "[ lem : mapping ] given a set of messages  @xmath30 , partitioned into groups of identical messages , such that all groups are larger than @xmath248 , consider a one - channel schedule @xmath6 of @xmath30 scheduling each group in round robin order , and a periodic sequence of reserved time - slots over @xmath5  channels with density  @xmath39 and period  @xmath66 .",
    "let  @xmath63 be the schedule obtained by mapping the schedule  @xmath6 into the reserved empty slots from left to the right , then : @xmath249"
  ],
  "abstract_text": [
    "<S> the data broadcast problem is to find a schedule for broadcasting a given set of messages over multiple channels . </S>",
    "<S> the goal is to minimize the cost of the broadcast plus the expected response time to clients who periodically and probabilistically tune in to wait for particular messages .    </S>",
    "<S> the problem models disseminating data to clients in asymmetric communication environments , where there is a much larger capacity from the information source to the clients than in the reverse direction . </S>",
    "<S> examples include satellites , cable tv , internet broadcast , and mobile phones . </S>",
    "<S> such environments favor the `` push - based '' model where the server broadcasts ( pushes ) its information on the communication medium and multiple clients simultaneously retrieve the specific information of individual interest . </S>",
    "<S> this sort of environment motivates the study of `` broadcast disks '' in information systems @xcite .    in this paper </S>",
    "<S> we present the first polynomial - time approximation scheme for the data broadcast problem for the case when @xmath0 and each message has arbitrary probability , unit length and bounded cost . the best previous polynomial - time approximation algorithm for this case </S>",
    "<S> has a performance ratio of @xmath1 @xcite .    </S>"
  ]
}