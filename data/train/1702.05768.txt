{
  "article_text": [
    "a chaotic dynamical system can have a simple mathematical description , and thus be easy to implement on a computer . and yet , numerical simulation of its orbits is often impractical , since small computational errors are magnified very rapidly . the modern paradigm of the numerical study of chaos can be summarized as follows : while the simulation of an individual orbit for an extended period of time does not make a practical sense , one should study the limit set of a typical orbit .",
    "perhaps , the best known illustration of this approach is the study of julia sets of rational maps which are repellers of the dynamics , that is , limit sets of typical backward orbits .",
    "julia sets may be the most drawn objects in mathematics , and the study of the theoretical aspects of computing them is important both for practicing complex dynamicists , and as a `` simple '' test case of the paradigm .",
    "this paper is motivated by the following general question , which we address in the context of quadratic julia sets :    * question 1 . *",
    "_ can the attractor / repeller of a typical dynamical system be efficiently simulated on a computer ? _    to be more specific , let us first recall that a compact set @xmath0 in the plane is comaputable if there exists an algorithm to draw it on a computer screen with an arbitrarily high resolution .",
    "any computer - generated picture is a finite collection of pixels .",
    "if we fix a specific pixel size ( commonly taken to be @xmath1 for some @xmath2 ) then to accurately draw the set within one pixel size , we should fill in the pixels which are close to the set ( for instance , within distance @xmath1 from it ) , and leave blank the pixels which are far from it ( for instance , at least @xmath3-far ) .",
    "thus , for the set @xmath0 to be computable , there has to exist an algorithm which for every square of size @xmath1 with dyadic rational vertices correctly decides whether it should be filled in or not according to the above criteria .",
    "we say that a computable set has a polynomial time complexity ( is _ poly - time _ ) if there is an algorithm which does this in a time bounded by a polynomial function of the precision parameter @xmath2 , independent of the choice of a pixel .",
    "we typically view poly - time computable sets as the ones which can be simulated efficiently in practice , indeed , in known applications , this is generally the case .",
    "when we talk of computability of the julia sets of a rational map @xmath4 , the algorithm drawing it is supposed to have access to the values of the coefficients of the map ( again with an arbitrarily high precision ) .",
    "using estabilished terminology such an algorithm can _ query an oracle _ for the coefficients of @xmath4 ; naturally , reading each additional binary digit of a coefficient takes a single tick of the computer clock .",
    "computability of julia sets has been explored in depth by m.  braverman and the second author ( see monograph @xcite and references therein ) and turns out to be a very non - trivial problem .",
    "they have shown that even in the quadratic family @xmath5 there exist values of @xmath6 such that the corresponding julia sets @xmath7 are not computable .",
    "moreover , such a value of @xmath6 can be computed explicitly , and even , modulo a broadly accepted conjecture in one - dimensional dynamics , in polynomial time .",
    "the phenomenon of non - computability is quite rare , and `` most '' quadratic julia sets are computable .",
    "however , even a computable julia set could have such a high computational complexity as to render any practical simulations impossible .",
    "indeed , in @xcite it was shown that there exist computable quadratic julia sets with an arbitrarily high time complexity .",
    "restricted to the class of quadratic julia sets , our first question transforms into :    * question 2 . *",
    "_ is it true that for almost every @xmath8 the julia set @xmath7 is poly - time ? _",
    "poly - time computability has been previously established for several types of quadratic julia sets .",
    "firstly , all hyperbolic julia sets are poly - time @xcite .",
    "this theoretical result corresponds to a known efficient practical algorithm for such sets , developed by j.  milnor @xcite and known as _",
    "milnor s distance estimator_.    the requirement of hyperbolicity may be weakened significantly .",
    "braverman @xcite showed that parabolic quadratics also have poly - time computable julia sets ; and presented an efficient practical refinement of distance estimator for parabolics .",
    "the first author showed in @xcite that maps with non - recurrent critical orbits have poly - time julia sets .",
    "finally , in our previous joint work @xcite , we have shown that feigenbaum julia set is poly - time .",
    "the last example is particularly interesting , since in contrast with the other ones mentioned above , its proof does not use any weak hyperbolicity properties of the map itself , but rather a computational scheme based on self - similarity ( feigenbaum universality ) properties of the julia set .",
    "our main result gives a positive answer for question 2 in the case of real parameters @xmath6 :    for almost every real value of the parameter @xmath6 , the julia set @xmath7 is poly - time .    our principal technical result , which implies main theorem , establishes poly - time computability for collet - eckmann julia sets ( see the definitions below ) .",
    "conjecturally , collet - eckmann parameters together with hyperbolic parameters form a set of full measure in @xmath9 .",
    "this very strong conjecture would imply a positive answer to question 2 as well ( an even stronger form of this conjecture can be made about the parameter spaces of rational maps of degree @xmath10 , @xmath11 , with similar consequences ) .",
    "however , at present , this is only known for @xmath12 .",
    "below we briefly recall the principal definitions of computability theory and complex dynamics , and then proceed with the proofs .      in this section",
    "we give a very brief review of computability and complexity of sets .",
    "for details we refer the reader to the monograph @xcite .",
    "the notion of computability relies on the concept of a turing machine ( tm ) @xcite , which is a commonly accepted way of formalizing the definition of an algorithm .",
    "the computational power of a turing machine is provably equivalent to that of a computer program running on a ram computer with an unlimited memory .",
    "we will use the terms `` tm '' and `` algorithm '' interchangeably .",
    "[ comp fun def ] a function @xmath13 is called computable , if there exists a tm which takes @xmath14 as an input and outputs @xmath15 .",
    "note that definition [ comp fun def ] can be naturally extended to functions on arbitrary countable sets , using a convenient identification with @xmath16 .",
    "the following definition of a computable real number is due to turing @xcite :    a real number @xmath17 is called computable if there is a computable function @xmath18 , such that for all @xmath2 @xmath19    the set of computable reals is denoted by @xmath20 .",
    "trivially , @xmath21 . since there exist only countably many algorithms , the set @xmath22 is countable , and hence a typical real number is not computable .",
    "the set of computable complex numbers is defined by @xmath23 .",
    "note that @xmath20 ( as well as @xmath24 ) considered with the usual arithmetic operation forms a field .    to define computability of functions of real or complex",
    "variable we need to introduce the concept of an oracle :    a function @xmath25 is an oracle for @xmath8 if for every @xmath26 we have @xmath27    a tm equipped with an oracle ( or simply an _ oracle tm _ ) may query the oracle by reading the value of @xmath28 for an arbitrary @xmath2 .",
    "let @xmath29 .",
    "a function @xmath30 is called computable if there exists an oracle tm @xmath31 with a single natural input @xmath2 such that if @xmath32 is an oracle for @xmath33 then @xmath31 outputs @xmath34 such that @xmath35    we say that a function @xmath36 is _ poly - time computable _ if in the above definition the algorithm @xmath31 can be made to run in time bounded by a polynomial in @xmath2 , independently of the choice of a point @xmath33 or an oracle representing this point .",
    "note that when calculating the running time of @xmath31 , querying @xmath32 with precision @xmath37 counts as @xmath38 time units .",
    "in other words , it takes @xmath38 ticks of the clock to read the argument of @xmath36 with precision @xmath38 ( dyadic ) digits .",
    "let @xmath39 stand for euclidean distance between points or sets in @xmath40 .",
    "recall the definition of the _ hausdorff distance _ between two sets : @xmath41 where @xmath42 stands for the @xmath43-neighborhood of @xmath44 : @xmath45 we call a set @xmath44 a _",
    "@xmath1 approximation _ of a bounded set @xmath46 , if @xmath47 .",
    "when we try to draw a @xmath1 approximation @xmath44 of a set @xmath46 using a computer program , it is convenient to let @xmath44 be a finite collection of disks of radius @xmath48 centered at points of the form @xmath49 for @xmath50 .",
    "we will call such a set _ dyadic_. a dyadic set @xmath44 can be described using a function @xmath51 where @xmath52 and @xmath53 +   + using this function , we define computability and computational complexity of a set in @xmath40 in the following way .",
    "[ defcomputeset ] a bounded set @xmath54 is called computable in time @xmath55 if there is a tm , which computes values of a function @xmath56 of the form ( [ comp fun ] ) in time @xmath55 .",
    "we say that @xmath46 is poly - time computable , if there exists a polynomial @xmath57 , such that @xmath46 is computable in time @xmath57 .      a non - hyperbolic rational map @xmath36 is called collet - eckmann if there exist constants @xmath58 such that the following holds : for any critical point @xmath59 of @xmath36 whose forward orbit does not contain any critical points one has : @xmath60    in @xcite avila and moreira showed :    [ avmor ] for almost every real parameter @xmath6 the map @xmath5 is either collet - eckmann or hyperbolic .    in @xcite aspenberg proved that the set of collet - eckmann parameters has positive lebesgue measure in the space of coefficients of all rational maps of fixed degree @xmath61 .",
    "moreover , there is a conjecture that _ almost all parameters in this space correspond to either collet - eckmann or hyperbolic maps_.    the following property can be viewed as a form of weak hyperbolicity for a rational mapping :    [ defesc ] a rational map @xmath36 satisfies exponential shrinking of components ( esc ) condition if there exists @xmath62 and @xmath63 such that for every @xmath64 , any @xmath65 and any connected component @xmath66 of @xmath67 one has @xmath68 .    in a fundamental paper on collet - eckmann dynamics , przytycki , rivera - letelier , and smirnov showed @xcite :    [ thesc ] collet - eckmann condition implies exponential shrinking of components condition .",
    "it is elementary to see that esc implies that @xmath36 does not have rotational domains or parabolic periodic points . jointly with binder and braverman ,",
    "the second author has shown ( cf.@xcite ) :    [ thcomp ] let @xmath36 be a rational map without rotation domains .",
    "then its julia set is computable in the spherical metric by an oracle turing machine @xmath69 with an oracle representing the coefficients of @xmath36 .",
    "the algorithm uses non - uniform information on parabolic periodic points of @xmath36 ( which is sufficient to lower - compute the parabolic basins ) .",
    "we also use the following result ( see @xcite ) :    [ propcritrec ] for any rational map @xmath36 there exists @xmath70 such that for any critical point @xmath6 in @xmath71 and any @xmath64 one has @xmath72 .",
    "our principal result is the following :    [ thmain ] for each @xmath61 there exists an oracle turing machine @xmath73 with an oracle for the coefficients of a rational map @xmath36 satisfying esc , which , given a certain non - uniform information , computes @xmath71 in polynomial time .    to compute the julia set the algorithm will use as the following non - uniform information :    * dyadic numbers @xmath74 and @xmath43 for which the conditions of definition [ defesc ] hold and such that @xmath75 does not contain any critical points of @xmath36 ; * the number @xmath76 which satisfies the statement of proposition [ propcritrec ] .    theorem  [ thmain ] , together with theorems  [ thesc ] and  [ avmor ] , imply the main theorem .",
    "note that if @xmath36 has no attracting cycles , then fatou - sullivan classification implies that @xmath36 has no fatou components , and hence @xmath77 , so the proof of theorem  [ thmain ] becomes a triviality in this case .",
    "we thus assume that @xmath36 has at least one attracting cycle in @xmath78 , which , in particular , covers the case when @xmath36 is a polynomial ( characterized by @xmath79 , so that @xmath80 is a super - attracting point ) . moreover ,",
    "if @xmath81 we can construct a dyadic point @xmath82 belonging to some attracting basin of @xmath36 and consider the map @xmath83 , where @xmath84 .",
    "then @xmath85 . therefore ,",
    "without loss of generality , we can assume that @xmath86 .    as a preparatory step in the proof of theorem  [ thmain ] ,",
    "using theorem  [ thcomp ] we construct a positive dyadic number @xmath87 and a dyadic neighborhood @xmath88 of @xmath71 such that : @xmath89",
    "[ lmgenesc ] assume that a rational map @xmath36 such that @xmath86 satisfies esc and @xmath94 are the corresponding constants ( see definition [ defesc ] ) .",
    "then there is an algorithm which given an oracle for @xmath36 computes dyadic numbers @xmath95 such that for any @xmath65 , @xmath96 , @xmath64 and any connected component @xmath66 of @xmath97 one has : @xmath98    let @xmath99 $ ] , where @xmath100 $ ] stands for the maximal integer less or equal to @xmath101 . then @xmath102 .",
    "the inequality of lemma [ lmgenesc ] now follows from applying definition [ defesc ] to @xmath103 .",
    "[ propkoebegen ] for each @xmath104 there exists a constant @xmath105 such that the following is true .",
    "let @xmath106 be a domain and @xmath107 be a holomorphic map of degree at most @xmath108 .",
    "then for any @xmath109 and any @xmath110 for the component @xmath111 of @xmath112 one has : @xmath113          set @xmath122 and @xmath123 for all @xmath124 .",
    "let @xmath125 be the connected component of @xmath126 containing @xmath127 . set @xmath128 for @xmath129 .",
    "lemma [ lmgenesc ] implies that one can compute a constant @xmath130 such that for any @xmath65 and any @xmath131 the connected component of @xmath132 containing @xmath14 is a subset of @xmath133 .",
    "introduce indexes @xmath134 such that @xmath135 and @xmath136 otherwise .",
    "observe that @xmath137 .",
    "let @xmath138 .",
    "for @xmath139 let @xmath140 be the connected component of @xmath141 containing @xmath142 . by the construction of the sequence @xmath143 we have @xmath144 moreover , lemma [ lmgenesc ] and definition of @xmath145",
    "imply that there exists @xmath146 depending only on @xmath147 and @xmath43 such that for all @xmath139 one has @xmath148 .",
    "using proposition [ propcritrec ] we obtain that the number of times @xmath140 contains a critical point for @xmath139 is bounded by some constant @xmath149 .",
    "therefore , the degree of @xmath150 is bounded by @xmath151 . since @xmath152 for all @xmath153 using proposition [ propkoebegen ]",
    "we obtain that @xmath154 for some constant @xmath155 .",
    "taking product of the latter inequality for all @xmath138 we obtain that @xmath156 where @xmath157 can be computed given @xmath94 and an oracle for @xmath36 .",
    "this finishes the proof .",
    "assume that we would like to verify that a dyadic point @xmath127 is @xmath158 close to @xmath71 .",
    "if @xmath159 , we can approximate the distance from @xmath127 to @xmath71 by @xmath160 up to a constant factor .",
    "now assume that @xmath115 .",
    "consider the following subprogram : + @xmath161 + * while * @xmath162 $ ] * do * + @xmath163 compute dyadic approximations @xmath164 + with precision @xmath165 .",
    "+ @xmath166 check the inclusion @xmath167 :      @xmath171 check the inequality @xmath172 . if true , output @xmath173 and exit the subprogram , otherwise + @xmath174 output @xmath175 and exit subprogram .",
    "+ @xmath169 @xmath176 + * end while * + @xmath177 output @xmath173 end exit . + * end *    the subprogram runs for at most @xmath178=o(n)\\ ] ] number of while - cycles each of which consist of a constant number of arithmetic operations with precision @xmath179 dyadic bits .",
    "hence the running time of the subprogram can be bounded by @xmath180 using efficient multiplication .",
    "suppose first that the subprogram runs the while - cycle @xmath184 times and exits at the step @xmath177 .",
    "this means that @xmath167 for @xmath185 . in particular , @xmath186 .",
    "it follows that @xmath187 . by esc condition",
    "we obtain : @xmath188 thus if @xmath189 , then the subprogram exits at a step other than @xmath177 .",
    "now assume that for some @xmath190 the subprogram falls into the step @xmath171 .",
    "then @xmath191 conditions imply that @xmath192 .",
    "now , if @xmath193 by proposition [ propkoebece ] , @xmath194 otherwise , @xmath195 in this case proposition [ propkoebece ] implies that @xmath196    now , to distinguish the case when @xmath197 from the case when @xmath198 we can partition each pixel of size @xmath199 into pixels of size @xmath200 and run the subprogram for the center of each subpixel .",
    "this would increase the running time at most by a factor linear in @xmath2 ."
  ],
  "abstract_text": [
    "<S> we prove that collet - eckmann rational maps have poly - time computable julia sets . as a consequence , </S>",
    "<S> almost all real quadratic julia sets are poly - time . </S>"
  ]
}