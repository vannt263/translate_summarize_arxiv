{
  "article_text": [
    "the matching problem is one of the fundamental and most well studied problems in combinatorial optimization .",
    "several different versions of the matching problem have been studied over the years : matchings on weighted or unweighted bipartite  @xcite and general  @xcite graphs , popular matchings  @xcite , stable matchings  @xcite , and greedy matchings  @xcite , to name but a few . in this article",
    "we investigate the problem of computing and approximating a maximum weight greedy matching on edge - weighted graphs ; i.e.  the matching with the maximum weight when every edge that is added to the matching is chosen greedily from the set of available edges with the largest weight .",
    "although various polynomial time algorithms are known for the maximum weight matching problem , these algorithms are not always very fast in practice , see  @xcite and references therein for a comprehensive list of known results .",
    "one way to deal with this inefficiency is to turn into approximation algorithms ; a recent major result in this direction was given by duan and pettie  @xcite who provided an algorithm for computing an @xmath5-approximation of the maximum weight matching in @xmath6 time , where @xmath7 is the number of edges .",
    "however , there are cases where it makes sense to search for algorithms that are fast in practice and easy to implement , such as _ greedy _ algorithms . to make best use of such algorithms ,",
    "their algorithmic performance needs to be properly understood .",
    "there are cases where a greedy approach for computing a weighted matching is preferred or even _ required _ , as the classical notion of a maximum weight matching does not necessarily fit the underlying problem . consider for example the case where the vertices of a graph represent players and the edge weights represent the `` happiness '' that the corresponding players get from this match .",
    "it is possible that two players , which are not matched to each other in a maximum weighted matching , can still coordinate and match together instead of staying in the current matching , thus becoming both individually `` happier '' .",
    "this is the so - called _ stable matching problem _ which has received a lot of attention the previous years due to the plethora of its applications in real life problems , including kidney exchange  @xcite and matching medical students to hospitals  @xcite . in many applications of the stable matching problem , such as in kidney exchange ,",
    "there are only a few feasible values of `` happiness '' .",
    "thus in the underlying graph there are only few discrete edge weights , while many edges share the same weight . in such cases",
    "it is not clear how to compute a stable matching , as ties among edges with the same weight must be resolved .",
    "it turns out that in many cases a matching is stable in the nash equilibrium sense if and only if it can produced by a greedy algorithm  @xcite . in the graph - matching game",
    "described above , a nash equilibrium is a matching @xmath8 in which no two vertices @xmath9 can become individually happier by replacing their currently matched edges in @xmath8with the edge @xmath10 .",
    "thus , a _ maximum weight greedy _ matching is an equilibrium ( i.e.  stable matching ) that maximizes the _ social welfare _ , that is , the cumulative `` happiness '' of all the players .",
    "a natural algorithmic question is whether a maximum weight greedy matching can be efficiently computed .",
    "although greedy algorithms for matching problems have been studied extensively in the past  @xcite , to the best of our knowledge not much is known about the problem of computing a maximum weight greedy matching .",
    "the scenarios of matching problems where the vertices of the graph correspond to players can vary from matching employees and employers  @xcite , to matching kidney donors and recipients  @xcite .",
    "anshelevich , das , and naamad  @xcite and anshelevich , bhardwaj , and hoefer  @xcite studied the price of anarchy and stability of stable matchings on weighted graphs .",
    "furthermore , the authors in  @xcite provided algorithms that compute almost stable matchings .",
    "our work is closely related to  @xcite , although their techniques can not be applied to our problem since we study _ only _ matchings that are greedy , whereas almost stable matchings are not .",
    "greedy matchings have been studied extensively over the years .",
    "the classical result by korte and hausmann  @xcite states that an arbitrary greedy matching is a @xmath11-approximation of the maximum cardinality matching , i.e.  every greedy matching on unweighted graphs picks at least half of maximum number of edges that any matching can pick . for edge - weighted graphs ,",
    "avis  @xcite showed that every algorithm that greedily picks edges with the maximum currently available weight is a @xmath11-approximation of the maximum weight matching .",
    "hence , every weighted greedy matching is also a @xmath11-approximation for the maximum weight greedy matching problem .",
    "several authors studied randomized greedy algorithms for the maximum cardinality matching problem .",
    "the currently best randomized algorithm , known as mrg  @xcite , picks the next edge to add to the matching by first selecting a random unmatched vertex @xmath12 of the graph and then a random unmatched neighbor of @xmath13 .",
    "aronson , dyer , frieze and suen  @xcite showed that mrgbreaks the @xmath11-barrier and that it achieves a @xmath14-approximation guarantee on every graph .",
    "recently , poloczek and szegedy  @xcite provided a different analysis for mrgand shown that it achieves an approximation guarantee of at least @xmath15 . however , as experiments suggest , the approximation guarantee of mrgcan be as large as @xmath4  @xcite .      in this paper",
    "we study the computational complexity of computing and approximating a _ maximum weight greedy matching _ in a given edge - weighted graph , i.e.  a greedy matching with the greatest weight among all greedy matchings .",
    "this problem is termed greedymatching . in wide contrast to the maximum weight matching , for which many efficient algorithms are known ( see @xcite and the references therein ) ,",
    "we prove that greedymatching is _ strongly np - hard _ by a reduction from a special case of max2sat .",
    "our reduction also implies hardness of approximation ; we prove that greedymatching is _ apx - complete _ , and thus it does not admit a ptas unless p = np .",
    "these hardness results hold even for input graphs with maximum degree at most 3 and with at most three different integer edge weights , namely with weights in the set @xmath16 .",
    "furthermore , by using a technique of papadimitriou and yannakakis  @xcite , we extend the np - hardness proof to the interesting case where the input graph is in addition _ bipartite_. next , we study the decision variations greedyvertex and greedyedge of the problem , where we now ask whether there exists a greedy matching in which a specific vertex @xmath17 or a specific edge @xmath10 is matched .",
    "these are both natural questions , as the designer of the stable matching might want to ensure that a specific player or a specific pair of players is matched in the solution .",
    "we prove that both greedyvertex and greedyedge are also strongly np - hard .",
    "as greedymatching turns out to be computationally hard , it makes sense to investigate how the complexity is affected by appropriately restricting the input . in this line of research",
    "we consider two natural parameters of the problem , for which we establish a _",
    "sharp threshold _ behavior . as the first parameter we consider the _ minimum ratio _ @xmath18 of any two _ consecutive weights_. assume that",
    "the graph has @xmath19 different edge weights @xmath20 ; we define for every @xmath21 $ ] the ratio @xmath22 and the minimum ratio @xmath23}\\lambda _ { i}$ ] .",
    "we prove that , if @xmath24 then greedymatching can be solved in polynomial time , while for any constant @xmath25 greedymatching is strongly np - hard and apx - complete , even on graphs with maximum degree at most 3 and with at most three different edge weights .    as the second parameter we consider the _ maximum edge cardinality _ @xmath26 of the _ connected components _ of @xmath27 , among all different weights @xmath28 , where @xmath27 is the subgraph of @xmath29 spanned by the edges of weight @xmath28 .",
    "although at first sight this parameter may seem unnatural , it resembles the number of times that the greedy algorithm has to break ties . at the stage where we have to choose among all available edges of weight @xmath28",
    ", it suffices to consider each connected component of the available edges of @xmath27 separately from the other components . in particular , although the weight of the final greedy matching may highly depend on the order of the chosen edges within a connected component , it is independent of the ordering that the various different connected components are processed . thus @xmath30 is a reasonable parameter for greedymatching . in the case",
    "@xmath31 there exists a unique greedy matching for @xmath29 which can be clearly computed in polynomial time . we prove that greedymatching is strongly np - hard and apx - complete for @xmath32 , even on graphs with maximum degree at most 3 and with at most five different edge weights .    on the positive side",
    ", we consider a special class of weighted graphs , called _ bush graphs _",
    ", where all edges of the same weight in @xmath29 form a star ( bush ) .",
    "we present a randomized approximation algorithm ( rgma ) for greedymatchingon bush graphs and we highlight an unexpected connection between rgmaand the randomized mrgalgorithm for greedily approximating the maximum cardinality matching on unweighted graphs . in particular we show that , if the approximation ratio of rgma for greedymatching on bush graphs is @xmath0 , then for every @xmath1 mrg  @xcite is a @xmath33-approximation algorithm for the maximum cardinality matching .",
    "we conjecture that a tight bound for @xmath3 is @xmath4 ; among our results we prove our conjecture true for two subclasses of bush graphs . proving a tight bound for the approximation ratio of mrg on unweighted graphs ( and thus also proving a tight value for @xmath3 ) is a long - standing open problem  @xcite .",
    "this unexpected relation of our rgma algorithm with the mrg algorithm may provide new insights for solving this problem .",
    "every graph considered in this paper is undirected . for any graph @xmath34",
    "we use @xmath35 to denote the graph @xmath36 where @xmath37 and @xmath38 is consisted by the set @xmath39 and all the edges the vertex @xmath17 belongs to .",
    "similarly @xmath40 denotes the induced graph of @xmath29 defined by @xmath41 , where @xmath42 .",
    "we study graphs @xmath34 with positive edge weights , i.e.  each edge @xmath43 has a weight @xmath44 .",
    "the _ degree _ of a vertex @xmath17 is the number of its adjacent vertices in @xmath29 .",
    "we use @xmath45 to denote the subgraph of @xmath29 spanned by the edges of weight @xmath46 .",
    "a _ matching _",
    "@xmath47 is a set of edges such that no pair of them are adjacent .",
    "the weight of a matching @xmath8is the sum of the weights of the edges in @xmath8 , formally @xmath48 .",
    "a _ greedy matching _ is a maximal matching constructed by the greedy matching procedure .    *",
    "input : * graph @xmath34 , with @xmath49 edge weight values + * output : * greedy matching @xmath8    1 .",
    "@xmath50 2 .   * for * @xmath51 * do * 3 .   *",
    "while * there is an @xmath52 such that @xmath53 * do * 4 .",
    "pick an edge @xmath54 with @xmath55 and add it to @xmath8 ; [ step4 ] 5 .",
    "remove all edges adjacent to @xmath56 from @xmath39 ;    notice that in step  [ step4 ] the edge that is added to the matching @xmath8is not specified explicitly .",
    "the rule that specifies which edge is chosen in step  [ step4 ] can be deterministic or randomized , resulting to a specific _ greedy matching algorithm_. we will use @xmath57 to denote the optimum of greedymatchingwith input @xmath29 , i.e.  the weight of the _ maximum greedy matching _ of @xmath29 .",
    "instance : graph @xmath58 with positive edge weights .",
    "+ task : compute a maximum weight greedy matching @xmath8for @xmath29 .",
    "furthermore , we study another two related problems , where we ask whether there is a greedy matching that matches a specific vertex or a specific edge .",
    "instance : graph @xmath58 with positive edge weights and a vertex @xmath59 .",
    "+ question : is there a greedy matching @xmath8such that @xmath60 , for some @xmath61 ?",
    "instance : graph @xmath58 with positive edge weights and an edge @xmath62 .",
    "+ question : is there a greedy matching @xmath8such that @xmath63 ?",
    "in this section we study the complexity of computing a maximum weight greedy matching . in section  [ apx - subsec ] we prove that greedymatchingis strongly np - hard and apx - complete , even on graphs with maximum degree at most 3 and with at most three different integer weight values . by slightly modifying our reduction of section  [ apx - subsec ] ,",
    "we first prove in section  hardness - bipartite - subsec that greedymatchingremains strongly np - hard also when the graph is in addition bipartite , and we then prove in section  [ hardness - additional - subsec ] that also the two decision problem variations greedyvertexand greedyedgeare also strongly np - hard .",
    "our hardness reductions are from the max2sat(3 ) problem  @xcite , which is the special case of max - sat where in the input cnf formula @xmath64 every clause has at most 2 literals and every variable appears in at most 3 clauses ; we call such a formula @xmath64 a 2sat(3 ) formula .    note that the decision version of greedymatching , where we ask whether there exists a greedy matching with weight at least @xmath65 , belongs to the class np .",
    "indeed we are able to verify in polynomial time whether a given matching @xmath66 is maximal , greedy and has weight at least @xmath65 .",
    "the maximality and the weight of the matching @xmath66 can be computed and checked in linear time . to check whether @xmath66 is greedy , we first check whether the largest edge weight in @xmath66 equals the largest edge weight in @xmath29 . in this case",
    "we remove from @xmath29 all vertices incident to the highest weight edges of @xmath66 and we apply recursively the same process in the resulting induced subgraph .",
    "then @xmath66 is greedy if and only if we end up with a graph with no edges .      given a 2sat(3 ) formula @xmath64 with @xmath7 clauses and @xmath67 variables @xmath68 we construct an undirected graph @xmath29 with @xmath69 vertices and @xmath70 edges . then we prove that there exists a truth assignment that satisfies at least @xmath71 clauses of @xmath64 if and only if there exists a greedy matching @xmath8 in @xmath29 with weight at least @xmath72 . without loss of generality",
    "we make the following assumptions on @xmath64 .",
    "firstly , if a variable occurs only with positive ( resp .  only with negative )",
    "literals , then we trivially set it true ( resp .",
    "false ) and remove the associated clauses .",
    "furthermore , without loss of generality , if a variable @xmath73 appears three times in @xmath64 , we assume that it appears once as a positive literal @xmath73 and two times as a negative literal @xmath74 ; otherwise we rename the negation with a new variable .",
    "similarly , if @xmath73 appears two times in @xmath64 , then it appears once as a positive literal @xmath73 and once as a negative literal @xmath74 .    for each variable @xmath73",
    "we create a subgraph @xmath75 and for each clause @xmath76 we create one vertex @xmath77 .",
    "the vertices created from the clauses will be called @xmath13-vertices .",
    "each subgraph @xmath75 is a path with 10 vertices , where three of them are distinguished ; the vertices @xmath78 and @xmath79 .",
    "each distinguished vertex can be connected with at most one @xmath13-vertex that represents a clause .",
    "furthermore , every @xmath13-vertex is connected with at most two vertices from the subgraphs @xmath75 ; one distinguished vertex from each of the subgraphs @xmath75 that correspond to the variables of the clause .",
    "the edge weights in the subgraphs @xmath75 are not smaller than the weights of the edges connecting the @xmath13-vertices with the distinguished vertices of the subgraphs @xmath75 .",
    "the gadget @xmath80 that we create for variable @xmath81 is illustrated in figure  [ fig : gx ] ; the distinguished vertices of @xmath80 are @xmath82 , @xmath83 and @xmath84 .",
    "the vertex @xmath82 corresponds to the _ positive _ literal of the variable and vertices @xmath83 and @xmath84 correspond to the _ negative _ literal  @xmath85 .",
    "[ fig : gx ]    \\(01 ) at ( 0,1 ) @xmath83 ; ( 10 ) at ( 1,0 ) [ label = below:@xmath86 ; ( 01 ) ",
    "node[weight ] @xmath87 ( 10 ) ; ( 21 ) at ( 2,1 ) [ label = above:@xmath88 ; ( 21 ) ",
    "node[weight ] @xmath89 ( 10 ) ; ( 30 ) at ( 3,0 ) [ label = below:@xmath90 ; ( 21 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 41 ) at ( 4,1 ) @xmath82 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 51 ) at ( 6,1 ) @xmath84 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 51 ) ; ( 70 ) at ( 7,0 ) [ label = below:@xmath92 ; ( 51 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 81 ) at ( 8,1 ) [ label = above:@xmath93 ; ( 81 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 90 ) at ( 9,0 ) [ label = below:@xmath94 ; ( 81 ) ",
    "node[weight ] @xmath89 ( 90 ) ; ( 101 ) at ( 10,1 ) [ label = above:@xmath95 ; ( 101 ) ",
    "node[weight ] @xmath87 ( 90 ) ;    the vertex @xmath77 associated to clause @xmath76 , where @xmath96 $ ] , is made adjacent to the vertices that correspond to the literals associated with that clause .",
    "for example , if @xmath97 we will connect the vertex @xmath77 with one of the vertices @xmath98 and with one of the vertices @xmath99 . in order to make these connections in a consistent way , we first fix an arbitrary ordering over the clauses .",
    "if the variable @xmath73 occurs as a positive literal in the clause @xmath76 , then we add the edge @xmath100 of weight 3 .",
    "next , if @xmath76 is the first clause that the variable @xmath73 occurs with a negative literal ( in the fixed ordering of the clauses ) , then we add the edge @xmath101 of weight 1 .",
    "finally , if the clause @xmath76 is the second clause that the variable @xmath73 occurs as a negative literal , then we add the edge @xmath102 of weight 3 .",
    "that is , if a variable @xmath73 appears only two times in @xmath64 , then only the two distinguished vertices @xmath103 and @xmath104 of @xmath75 are adjacent to a @xmath13-vertex .",
    "this completes the construction of the graph @xmath29 .",
    "note that , by the construction of @xmath29 , in any maximum greedy matching of @xmath29 , there are exactly four alternative ways to match the edges of each of the subgraphs @xmath75 , as illustrated in fig .",
    "[ fig : man]-[fig : bad2 ] .      in order to prove that greedymatchingis apx - complete",
    ", first we prove in the next lemma that given an assignment that satisfies at least @xmath71 clauses we can construct a greedy matching with weight at least @xmath72 .",
    "the intuition for this lemma is as follows .",
    "starting with a given satisfying truth assignment  @xmath105 for the input formula  @xmath106 , we first construct the matching @xmath107 in every @xmath80 ( cf .  figure  [ fig : man ] ) , and thus the @xmath108-vertices are initially free to be matched to @xmath13-vertices .",
    "then , if a variable @xmath81 is true in @xmath105 , we change the matching of @xmath80 from @xmath107 to @xmath109 ( cf .  figure  [ fig : map ] ) , such that only the @xmath110-vertex ( and not the @xmath108 and @xmath111-vertices ) of @xmath80 is free to be matched to a @xmath13-vertex . on the other hand ,",
    "if the variable @xmath81 is false in @xmath105 , then we either keep the matching @xmath107 in @xmath80 , or we replace @xmath107 with @xmath112 in @xmath80 ( cf .",
    "figure  [ fig : mann ] ) . note that in @xmath107 only @xmath83 is free to be matched , while in @xmath112 both @xmath83 and @xmath84 are free to be matched with a @xmath13-vertex ; in both cases the @xmath110-vertex of @xmath80 is `` blocked '' from being matched to a @xmath13-vertex .",
    "then , using the fact that @xmath105 satisfies at least @xmath71 clauses of @xmath106 , we can construct a matching of  @xmath29 where @xmath71 @xmath13-vertices are matched and the total weight of this matching is at least  @xmath113 .",
    "[ lem : one ] if there is an assignment that satisfies at least @xmath71 clauses then , there is a greedy matching with weight at least @xmath72 .",
    "given an assignment that satisfies @xmath71 clauses we will construct a greedy matching of @xmath29 with weight @xmath72 by making use of the three matchings @xmath107 , @xmath112 , and @xmath109 of @xmath80 , as illustrated in figures  [ fig : man]-[fig : map ] .",
    "all these three matchings of @xmath80 are greedy ; furthermore note that there also exists a fourth greedy matching @xmath114of @xmath80 ( see fig .",
    "[ fig : bad2 ] ) which will not be used in the proof of the lemma .",
    "\\(01 ) at ( 0,1 ) @xmath83 ; ( 10 ) at ( 1,0 ) [ label = below:@xmath115 ; ( 01 ) ",
    "node[weight ] @xmath87 ( 10 ) ; ( 21 ) at ( 2,1 ) [ label = above:@xmath116 ; ( 21 ) ",
    "node[weight ] @xmath89 ( 10 ) ; ( 30 ) at ( 3,0 ) [ label = below:@xmath117 ; ( 21 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 41 ) at ( 4,1 ) @xmath82 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 51 ) at ( 6,1 ) @xmath84 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 51 ) ; ( 70 ) at ( 7,0 ) [ label = below:@xmath118 ; ( 51 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 81 ) at ( 8,1 ) [ label = above:@xmath119 ; ( 81 )",
    " node[weight ] @xmath91 ( 70 ) ; ( 90 ) at ( 9,0 ) [ label = below:@xmath120 ; ( 81 ) ",
    "node[weight ] @xmath89 ( 90 ) ; ( 101 ) at ( 10,1)[label = above:@xmath121 ; ( 101 ) ",
    "node[weight ] @xmath87 ( 90 ) ;    \\(01 ) at ( 0,1 ) @xmath83 ; ( 10 ) at ( 1,0 ) [ label = below:@xmath115 ; ( 01 ) ",
    "node[weight ] @xmath87 ( 10 ) ; ( 21 ) at ( 2,1 ) [ label = above:@xmath116 ; ( 21 ) ",
    "node[weight ] @xmath89 ( 10 ) ; ( 30 ) at ( 3,0 ) [ label = below:@xmath117 ; ( 21 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 41 ) at ( 4,1 ) @xmath82 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 51 ) at ( 6,1 ) @xmath84 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 51 ) ; ( 70 ) at ( 7,0 ) [ label = below:@xmath118 ; ( 51 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 81 ) at ( 8,1 ) [ label = above:@xmath119 ; ( 81 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 90 ) at ( 9,0 ) [ label = below:@xmath120 ; ( 81 ) ",
    "node[weight ] @xmath89 ( 90 ) ; ( 101 ) at ( 10,1 ) [ label = above:@xmath121 ; ( 101 ) ",
    "node[weight ] @xmath87 ( 90 ) ;    \\(01 ) at ( 0,1 ) @xmath83 ; ( 10 ) at ( 1,0 ) [ label = below:@xmath115 ; ( 01 ) ",
    "node[weight ] @xmath87 ( 10 ) ; ( 21 ) at ( 2,1 ) [ label = above:@xmath116 ; ( 21 ) ",
    "node[weight ] @xmath89 ( 10 ) ; ( 30 ) at ( 3,0 ) [ label = below:@xmath117 ; ( 21 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 41 ) at ( 4,1 ) @xmath82 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 51 ) at ( 6,1 ) @xmath84 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 51 ) ; ( 70 ) at ( 7,0 ) [ label = below:@xmath118 ; ( 51 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 81 ) at ( 8,1 ) [ label = above:@xmath119 ; ( 81 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 90 ) at ( 9,0 ) [ label = below:@xmath120 ; ( 81 ) ",
    "node[weight ] @xmath89 ( 90 ) ; ( 101 ) at ( 10,1 ) [ label = above:@xmath121 ; ( 101 ) ",
    "node[weight ] @xmath87 ( 90 ) ;    we construct the greedy matching of @xmath29 with weight @xmath72 as follows .",
    "firstly , we set all the matchings for the subgraphs @xmath80 to be the greedy matching @xmath107 , thus incurring a total weight of @xmath122 from the currently matched edges .",
    "then we process sequentially each clause @xmath123 of the formula @xmath106 .",
    "if a clause @xmath123 is satisfied in the given truth assignment by at least one _ positive _ literal , then we choose one of these literals arbitrarily , say @xmath81 , and we change the matching of @xmath80 to @xmath109 ; furthermore we match the edge @xmath124 which has weight 3 . in this case",
    "we replaced the matched edges @xmath125 and @xmath126 of @xmath80 with total weight 7 by the matched edges @xmath127 , @xmath128 , and @xmath129 with total weight 8 , i.e.  we increased the weight of the matching by 1 .",
    "assume that a clause @xmath123 is satisfied in the given assignment only by _ negative _ literals .",
    "if at least one of these literals of @xmath123 corresponds to a @xmath108-vertex , then we match the edge @xmath130 of weight 1 .",
    "thus in this case we also increase the total weight of the matched edges by 1 . finally ,",
    "if all of these literals of @xmath123 correspond to @xmath111-vertices , then we choose one of them arbitrarily , say @xmath85 , and we change the matching of @xmath80 to @xmath112 ; furthermore we match the edge @xmath131 of weight 3 . in this case",
    "we replaced the matched edges @xmath132 and @xmath133 of @xmath80 with total weight 7 by the matched edges @xmath134 , @xmath135 , and @xmath136 with total weight 8 , i.e.  we increased the weight of the matching by 1 .",
    "this completes the required matching @xmath8 of the graph @xmath29 .",
    "since we started with a matching of total weight @xmath122 and we added weight 1 for each of the @xmath71 satisfied clauses in @xmath106 , note that the total weight of @xmath8 is @xmath72 . in this matching @xmath8 , each of the induced subgraphs @xmath80 of @xmath29 is greedily matched .",
    "furthermore all the remaining edges of @xmath29 are edges that join a @xmath13-vertex with a distinguished vertex @xmath82 ( resp .",
    "@xmath83 , @xmath84 ) .",
    "note that the weight of each of these edges is smaller than or equal to the weight of the edges adjacent to @xmath82 ( resp .",
    "@xmath83 , @xmath84 ) within the subgraph @xmath80 .",
    "thus , the matching @xmath8 of @xmath29 can be constructed greedily .",
    "moreover , since @xmath8 can be potentially further extended greedily to a matching with larger weight , it follows that the maximum greedy matching of @xmath29 is at least @xmath72 .",
    "next we prove in lemma  [ lem : at - least ] that , if there is a greedy matching with weight @xmath72 , then there is an assignment that satisfies at least @xmath71 clauses . in order to prove lemma  [ lem : at - least ] , first we prove in lemma  [ lem : one - of - ag ] a crucial property of the constructed graph @xmath29 , namely that in any greedy matching at most one of the vertices @xmath82 and @xmath84 can be matched with a @xmath13-vertex .",
    "[ lem : one - of - ag ] let @xmath8 be an arbitrary greedy matching of @xmath29 and let @xmath137 . then",
    ", in the subgraph @xmath80 , at most one of the vertices @xmath82 and @xmath84 can be matched with a @xmath13-vertex .",
    "the proof is done by contradiction . assume otherwise that both @xmath82 and @xmath84 are matched with some @xmath13-vertices in @xmath8 .",
    "note that both these edges that connect the vertices @xmath82 and @xmath84 with the corresponding @xmath13-vertices have weight  3 .",
    "furthermore , none of the edges @xmath138 , @xmath139 , and @xmath140 belong to @xmath8 .",
    "thus , since the weight of the edge @xmath141 is  4 , it follows @xmath8 is not greedy , which is a contradiction .",
    "that is , if both edges @xmath138 and @xmath139 of the subgraph @xmath80 are not matched within @xmath8 , then @xmath142 , as it is illustrated in the `` bad '' matching @xmath143 of fig .",
    "[ fig : bad2 ] .",
    "\\(01 ) at ( 0,1 ) @xmath83 ; ( 10 ) at ( 1,0 ) [ label = below:@xmath115 ; ( 01 ) ",
    "node[weight ] @xmath87 ( 10 ) ; ( 21 ) at ( 2,1 ) [ label = above:@xmath116 ; ( 21 ) ",
    "node[weight ] @xmath89 ( 10 ) ; ( 30 ) at ( 3,0 ) [ label = below:@xmath117 ; ( 21 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 41 ) at ( 4,1 ) @xmath82 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 30 ) ; ( 51 ) at ( 6,1 ) @xmath84 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 51 ) ; ( 70 ) at ( 7,0 ) [ label = below:@xmath118 ; ( 51 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 81 ) at ( 8,1 ) [ label = above:@xmath119 ; ( 81 ) ",
    "node[weight ] @xmath91 ( 70 ) ; ( 90 ) at ( 9,0 ) [ label = below:@xmath120 ; ( 81 ) ",
    "node[weight ] @xmath89 ( 90 ) ; ( 101 ) at ( 10,1 ) [ label = above:@xmath121 ; ( 101 ) ",
    "node[weight ] @xmath87 ( 90 ) ;    we are now ready to prove lemma  [ lem : at - least ] .",
    "[ lem : at - least ] if there is a greedy matching with weight at least @xmath72 in @xmath29 , then there exists an assignment that satisfies at least @xmath71 clauses of the formula @xmath106 .",
    "let @xmath8be a maximum weight greedy matching of @xmath29 and assume that @xmath8has weight at least @xmath72 .",
    "first we show that we can assume without loss of generality that , for every @xmath144 $ ] , the edges of the induced subgraph @xmath80 are matched in @xmath8 according to one of the four matchings @xmath107 , @xmath112 , @xmath109 , and @xmath114(see figures  [ fig : man]-[fig : bad2 ] ) .",
    "assume that the edge @xmath132 is matched in @xmath8 .",
    "then clearly the edge @xmath133 is also matched in @xmath8 , since this is the only valid greedy option for the right part of @xmath80 .",
    "assume that the vertex @xmath84 is matched in @xmath8with a vertex different than @xmath145 .",
    "then similarly the edges @xmath135 and @xmath136 are matched in @xmath8 .",
    "on the other hand , assume that the edge @xmath146 is matched in @xmath8 .",
    "then the edge @xmath125 is also matched in @xmath8due to the assumption that @xmath8is greedy .",
    "finally assume that the vertex @xmath82 is matched in @xmath8with a vertex different than @xmath147 .",
    "then , since @xmath8is greedy , the edge @xmath128 is matched in @xmath8 .",
    "furthermore , since @xmath8has the greatest weight among the greedy matchings of @xmath29 by assumption , the vertex @xmath83 is matched in @xmath8either with vertex @xmath148 or with its adjacent @xmath13-vertex .",
    "if @xmath83 is matched with the @xmath13-vertex , then we replace this matched edge in @xmath8by the matched edge @xmath127 ( if the vertex @xmath148 is unmatched ) and we get an other greedy matching with the same weight .",
    "therefore , we can assume without loss of generality that , for every @xmath144 $ ] , the edges of the induced subgraph @xmath80 are matched in @xmath8 according to one of the four matchings @xmath107 , @xmath112 , @xmath109 , and @xmath114 , see figures  [ fig : man]-[fig : bad2 ] .",
    "we construct from @xmath8a truth assignment that satisfies at least @xmath71 clauses of the formula @xmath106 , as follows .",
    "if the edges of the induced subgraph @xmath80 are matched in @xmath8according to one of the matchings @xmath107 or @xmath112 , then we set the value of @xmath81 to _",
    "false_. if the edges of @xmath80 are matched according to @xmath109 , then we set the value of @xmath81 to _ true_. otherwise , if the edges of @xmath80 are matched according to @xmath114 , then set the truth value of @xmath81 arbitrarily .",
    "let now @xmath149 $ ] . since the edges of the induced subgraph @xmath80 are matched",
    "according to one of the matchings @xmath107 , @xmath112 , @xmath109 , and @xmath114 , as we proved above , it follows that the vertices @xmath82 and @xmath83 are not simultaneously matched with their associated @xmath13-vertices in @xmath8 .",
    "furthermore , lemma  [ lem : one - of - ag ] implies that at most one of the vertices @xmath82 and @xmath84 can be matched with their associated @xmath13-vertices in @xmath8 .",
    "therefore the constructed truth assignment is valid .",
    "let @xmath149 $ ] .",
    "if @xmath80 is matched according to @xmath114 in @xmath8 , then @xmath80 clearly contributes weight 14 to the total weight of @xmath8 .",
    "assume that @xmath80 is matched according to @xmath109 in @xmath8 , i.e.  assume that @xmath82 is matched with a @xmath13-vertex .",
    "then @xmath84 is matched with @xmath145 , and thus the right part of @xmath80 ( i.e.  the part between vertices @xmath84 and @xmath150 ) contributes weight 7 to the total weight of @xmath8 .",
    "furthermore the left part of @xmath80 ( i.e.  the part between vertices @xmath83 and @xmath82 ) contributes weight 1 + 4 + 3=8 to the total weight of @xmath8 .",
    "that is , @xmath80 contributes weight 15 to the total weight of @xmath8 .",
    "assume now that @xmath80 is matched according to @xmath107 or @xmath112 in @xmath8 .",
    "if @xmath83 is matched with @xmath148 in @xmath8 , then the left part of @xmath80contributes weight 3 + 4=7 to the total weight of @xmath8 .",
    "otherwise , if @xmath83 is matched with its adjacent @xmath13-vertex in @xmath8 , then the left part of @xmath80 contributes weight 1 + 3 + 4=8 to the total weight of @xmath8 .",
    "similarly , if @xmath84 is matched with @xmath145 in @xmath8 , then the right part of @xmath80 contributes weight 4 + 3=7 to the total weight of @xmath8 . otherwise , if @xmath84 is matched with its adjacent @xmath13-vertex in @xmath8 , then the right part of @xmath80 contributes weight 3 + 4 + 1=8 to the total weight of @xmath8 . summarizing , if @xmath151 of the vertices @xmath152 are matched with @xmath13-vertices in @xmath8 , then @xmath80 contributes weight @xmath153 to the total weight of @xmath8 .",
    "therefore , since @xmath29 has @xmath67 induced subgraphs and the weight of @xmath8is at least @xmath72 , it follows that @xmath154 @xmath13-vertices are matched in @xmath8 . for every vertex @xmath155 that is matched with a vertex @xmath82 in @xmath8 ,",
    "the clause @xmath123 contains the literal @xmath81 and the variable @xmath81 is set to true by the construction of the truth assignment .",
    "thus @xmath123 is satisfied .",
    "similarly , for every vertex @xmath155 that is matched with a vertex @xmath83 or @xmath84 in @xmath8 , the clause @xmath123 contains the literal @xmath85 and the variable @xmath81 is set to false by the construction of the truth assignment .",
    "thus @xmath123 is again satisfied .",
    "therefore , since @xmath154 @xmath13-vertices are matched in @xmath8 , it follows that there are @xmath154 satisfied clauses of @xmath106 in the constructed assignment .    in the following theorem",
    "we conclude with the main result of this section .",
    "[ thm : inai ] greedymatchingis _ strongly np - hard _ and _ apx - complete_. in particular , unless p = np , greedymatchingadmits no ptas , even on graphs with maximum degree at most 3 and with at most three different integer weight values .",
    "it follows by lemmas  [ lem : one ] and  [ lem : at - least ] that there is a greedy matching @xmath8 in @xmath29 with weight at least @xmath72 if and only if there is a truth assignment that satisfies at least @xmath71 clauses in the 2sat(3 ) formula @xmath64 .",
    "thus it follows that greedymatching is np - hard , since max2sat(3 ) is also np - hard  @xcite .",
    "furthermore , since the graph @xmath29 has three different weight values ( namely 1 , 3 , and 4 ) , it follows that greedymatching is strongly np - hard .",
    "denote by opt@xmath156 the greatest number of clauses that can be simultaneously satisfied by a truth assignment of @xmath64 .",
    "furthermore denote by opt@xmath157 the maximum weight of a greedy matching of the graph @xmath29 that is constructed from @xmath64 by our reduction .",
    "recall by construction that @xmath29 has 3 different integer weights and the maximum degree is 3 .",
    "then lemma  [ lem : one ] implies that opt@xmath158opt@xmath156 .",
    "note that a random truth assignment satisfies each clause of @xmath64 with probability @xmath159 , and thus there exists a truth assignment that satisfies at least @xmath160 clauses of @xmath64 , where @xmath7 is the number of clauses , and thus opt@xmath161 .",
    "since every clause has at most 2 literals in @xmath64 , it follows that @xmath162 , and thus opt@xmath163 .",
    "assume that there is a ptas for computing opt@xmath157 .",
    "then for every @xmath164 we can compute in polynomial time a greedy matching @xmath8 of @xmath29 such that @xmath165opt@xmath157 .",
    "given such a matching @xmath8 we can compute by lemma [ lem : at - least ] a truth assignment @xmath166 of @xmath64 such that @xmath167 .",
    "therefore:@xmath168    that is , assuming a ptas for computing opt@xmath157 , we obtain a ptas for computing opt@xmath156 .",
    "this is a contradiction by @xcite , unless p = np .",
    "this proves that greedymatchingis apx - hard .",
    "furthermore greedymatchingclearly belongs to the class apx , as any greedy matching algorithm achieves an @xmath11-approximation for greedymatching , and thus greedymatchingis apx - complete .      the graph @xmath29 that we constructed from @xmath106",
    "( see section  construction - subsec ) is not necessarily bipartite , as it may contain an odd - length cycle . more specifically ,",
    "it is possible that the following cycle of length 9 exists : @xmath169 however , as we prove in this section , greedymatchingremains strongly np - hard also when the graph is in addition bipartite .    to prove this ( cf .",
    "theorem  [ thm : bip - hard ] ) , we slightly modify our reduction of section  [ construction - subsec ] and the proofs of section apx - subsec , as follows .",
    "we start with a 2-cnf formula @xmath64 , where every variable appears in an _ arbitrary _ number of clauses .",
    "we may assume without loss of generality that every variable appears in @xmath64 at least three times ; otherwise we may add dummy copies of existing clauses .",
    "then we create from @xmath64 an equivalent 2-cnf formula @xmath170 using a technique of papadimitriou and yannakakis  @xcite .",
    "more specifically , for every variable @xmath73 that appears @xmath171 times in @xmath64 , we replace @xmath73 by @xmath172 new variables @xmath173 , one for every clause of @xmath174 in which @xmath73 initially appeared .",
    "furthermore we add the @xmath172 extra clauses @xmath175 , @xmath176 , @xmath177 , @xmath178 .",
    "denote by @xmath170 the resulting 2-cnf formula after performing these operations for every @xmath179 .",
    "note that in @xmath180 a variable @xmath181 occurs exactly in three clauses : two times as @xmath182 and one as @xmath181 if @xmath181 was negative in @xmath64 , or two times as @xmath181 and one as @xmath182 if @xmath181 was positive in @xmath64 .",
    "furthermore , each variable @xmath181 occurs in one old clause from @xmath64 and in two new clauses in @xmath170 .",
    "we will use again the gadgets @xmath183 for each variable @xmath181 with a small modification . if the variable @xmath181 occurs two times in @xmath170 as @xmath182 , then the vertices @xmath184 and @xmath185 of @xmath186 will correspond to the negative assignment of @xmath187 . otherwise ,",
    "if @xmath181 occurs two times in @xmath170 as a positive literal , then the vertices @xmath184 and @xmath188 of @xmath183 will correspond to the positive assignment of @xmath181 . again we will create one vertex @xmath189 for every clause @xmath190 of @xmath170 . if the vertex @xmath189 corresponds to an old clause ( i.e.  from the initial formula @xmath64 ) then we connect it to the @xmath191-vertices of the subgraphs @xmath183 that correspond to these literals .",
    "if @xmath189 corresponds to a new clause in @xmath170 then this clause is of the form @xmath192 . in this case",
    "we connect the corresponding @xmath13-vertex with the vertex @xmath184 , if the variable @xmath181 occurs two times as a negative literal in @xmath170 , or with the vertex @xmath193 , if @xmath181 occurs two times as a positive literal in @xmath170 .",
    "similarly , the @xmath13-vertex is connected with the vertex @xmath194 , if the variable @xmath195 occurs two times as a negative literal in @xmath170 , or with @xmath196 , if @xmath195 occurs two times as a positive literal in @xmath170 .",
    "the weights of these edges will be the same as before , i.e.  each edge between a @xmath13-vertex and a @xmath197-vertex has weight 1 and between a @xmath13-vertex and an @xmath198-vertex or a @xmath191-vertex has weight  3 .    in order to prove that the constructed graph is bipartite , it is sufficient to prove that there is no cycle with odd length .",
    "let @xmath199 be the set of all @xmath198-vertices and of all @xmath197-vertices and let @xmath200 be the set of all @xmath191-vertices .",
    "first note that any cycle in the graph @xmath29 must contain at least two vertices from @xmath201 .",
    "furthermore note that , by the above construction , every path that connects two different vertices of the set @xmath199 , without touching any vertex of the set @xmath200 , has even length .",
    "similarly , every path that connects two different vertices of the set @xmath200 , without touching any vertex of the set @xmath199 , has also even length .",
    "thus every cycle in @xmath29 that does not contain any vertex from @xmath200 ( resp .  from @xmath199 ) has even length .",
    "consider now a cycle in @xmath29 that contains vertices from both sets @xmath199 and @xmath200 .",
    "then , if we traverse this cycle in any direction , we will encounter the same number of transition edges from set @xmath199 to set @xmath200 and from the set @xmath200 to the set @xmath199 .",
    "therefore the length of the cycle is even , and thus @xmath29 is bipartite .",
    "thus , using the same argumentation as in lemmas [ lem : one ] and lem : at - least , we obtain the following theorem .",
    "[ thm : bip - hard ] greedymatchingis strongly np - hard , even on _ bipartite _ graphs with maximum degree at most 3 and with at most three different integer weight values .",
    "having established the hardness results for greedymatchingin sections  [ apx - subsec ] and  [ hardness - bipartite - subsec ] , we now prove that also the decision problems greedyvertexand greedyedgeare also strongly np - hard .",
    "[ thm : twohard ] the decision problems greedyvertexand greedyedgeare strongly np - hard , even on graphs with at most five different edge weights .    for the proof we amend the construction of section  [ construction - subsec ] and the proofs of section  [ apx - subsec ] . instead of reducing from the max2sat(3 )",
    "problem , we provide a reduction from the decision problem 3sat(3 ) . in this problem",
    "we are given a formula @xmath106 , in which every clause has at most 3 literals and every variable appears in at most 3 clauses , and the question is whether there exists a truth assignment that satisfies _ all clauses _ of @xmath106 .",
    "this problem is np - hard  @xcite .",
    "let @xmath64 be a 3sat(3 ) formula with @xmath67 variables and @xmath7 clauses .",
    "we construct from @xmath106 a weighted graph @xmath29 in the same way as in section  [ construction - subsec ] , with the only difference that now every @xmath13-vertex is connected to at most three ( instead of at most two ) distinguished vertices from the subgraphs @xmath80 . by following exactly the same proofs of lemmas  [ lem : one ] and  [ lem : at - least ] , we can prove that this graph @xmath29 has a greedy matching with weight at least @xmath72 if and only if there exists a truth assignment that satisfies at least @xmath71 clauses of the 3sat(3 ) formula @xmath106 .",
    "now we augment this graph @xmath29 to a new graph @xmath202 by adding two new vertices @xmath17 and @xmath203 .",
    "vertex @xmath17 is adjacent in @xmath202 to all the @xmath13-vertices of @xmath29 with edges of weight @xmath11 , while vertex @xmath203 is adjacent in @xmath202 only to vertex @xmath17 with an edge of weight @xmath204 .",
    "note that @xmath202 has five different edge weights .",
    "let @xmath205 be a greedy matching in @xmath202 and let @xmath8 be the restriction of @xmath205 on the edges of the graph @xmath29 .",
    "since every edge of @xmath29 has larger weight than every edge that is adjacent to @xmath17 or to @xmath206 in @xmath202 , it follows that @xmath8 is also a greedy matching of @xmath29 .",
    "assume that each of the @xmath7 @xmath207-vertices is matched in @xmath8 with a vertex from the subgraphs @xmath80 .",
    "then clearly @xmath208 .",
    "conversely , assume that @xmath208 .",
    "if there exists at least one vertex @xmath155 that is not matched in @xmath8 with any vertex from a subgraph @xmath80 , then the edge @xmath209 with weight @xmath11 will be available to be matched in @xmath205 , and thus the edge @xmath210 with weight @xmath204 will not belong to @xmath205 , a contradiction .",
    "therefore , @xmath211 if and only if each of the @xmath7 @xmath13-vertices is matched in @xmath8 a vertex from the subgraphs @xmath80 .",
    "furthermore , it follows by the proofs of lemmas  [ lem : one ] and  [ lem : at - least ] that each of the @xmath7 @xmath13-vertices is matched in @xmath8 with a vertex from the subgraphs @xmath80 if and only if the weight of the greedy matching @xmath8 of @xmath29 is at least @xmath212 , or equivalently , if and only if there exists a truth assignment that satisfies all @xmath7 clauses of the formula @xmath106 .",
    "summarizing , there exists a greedy matching @xmath205 of the graph @xmath202 , in which the given edge @xmath213 ( resp .",
    "the given vertex @xmath206 ) is matched , if and only if the formula @xmath106 is satisfiable .",
    "thus , since 3sat(3 ) is np - hard , it follows that both decision problems greedyvertexand greedyedge are strongly np - hard , even on graphs with at most five different edge weights .",
    "in this section we investigate the influence of two further natural parameters to the computational complexity of greedymatching , other than the parameters maximum degree and number of different edge weights that we considered in section  [ sec : hardness ] . as the first parameter we consider in section  [ ratio - subsec ] the minimum ratio @xmath214 between two consecutive weight values , and as the second parameter we consider in section  [ sec : param2 ] the maximum cardinality @xmath215 of the connected components of @xmath45 , over all possible weight values @xmath46 .",
    "we prove that greedymatchinghas a _ sharp threshold _",
    "behavior with respect to each of these parameters @xmath214 and @xmath215 .",
    "here we consider the parameter @xmath216 , where @xmath217 is the ratio between the @xmath218th pair of consecutive edge weights .",
    "first we prove that , if @xmath219 , then there exists at least one maximum weight matching of @xmath29 that is an optimum solution for greedymatchingon @xmath29 , obtaining the next theorem .",
    "[ thm : rg2 ] greedymatchingcan be computed in polynomial time if @xmath219 .",
    "let @xmath8be a maximum weight matching for @xmath29 .",
    "note that @xmath8can be computed in polynomial time  @xcite .",
    "assume that @xmath8is not a greedy matching .",
    "we will construct from @xmath8a greedy matching of @xmath29 which has the same weight as @xmath8 , as follows .",
    "since @xmath8is not greedy , there must exist at least one edge @xmath220 and two incident edges @xmath221 , where each of the weights @xmath222 and @xmath223 of the edges @xmath224 and @xmath225 , respectively , is smaller than the weight @xmath226 of the edge @xmath227 .",
    "since @xmath228 and @xmath219 , it follows that @xmath229 , and thus @xmath230 . on the other hand @xmath231 , since @xmath8is a maximum weight matching by assumption .",
    "therefore @xmath232 , and thus we can replace in @xmath8the edges @xmath233 with the edge @xmath227 without changing the weight of @xmath8 .",
    "we call all such edges @xmath234 `` problematic '' . among all problematic edges",
    "pick one edge @xmath227 with the maximum weight and replace its incident matched edges @xmath233 with the edge @xmath227 in @xmath8 .",
    "we repeat this procedure until no problematic edge is left , and thus we obtain a greedy matching @xmath205 with equal weight as @xmath8 . at each iteration",
    "the choice of the maximum weight problematic edge ensures that no new problematic edges are created .",
    "we perform at most @xmath235 iterations , and thus @xmath205 is computed in polynomial time .",
    "recall that in the proof of the theorem  [ thm : inai ] the weight values 1 , 3 , and 4 were used , thus the greedymatchingis hard for @xmath236 . in the next theorem",
    "we amplify this result by showing that greedymatchingis np - hard for any constant @xmath237 .",
    "that is , complexity of greedymatchinghas a threshold behavior at the parameter value @xmath238 .",
    "[ thm : parlb ] greedymatchingis _ strongly np - hard _ and _ apx - complete _ for any constant @xmath239 , even on graphs with maximum degree at most 3 and with at most three different integer weight values .    for the proof we amend the weight values in the construction of section  [ construction - subsec ] and the proofs of section  [ apx - subsec ] .",
    "more specifically , in the construction of the graph @xmath29 from the formula @xmath106 in section  [ construction - subsec ] , we replace each edge of weight 4 with an edge of weight @xmath240 , and each edge of weight 3 with an edge of weight @xmath241 , where @xmath242 is an arbitrary integer . in particular ,",
    "the results of sections  [ construction - subsec ] and  [ apx - subsec ] are given for the value @xmath243 . by the proofs of lemmas  [ lem : one ] and  [ lem :",
    "at - least ] ( adapted for these new weights ) it follows that there exists a truth assignment that satisfies at least @xmath71 clauses of the 2sat(3 ) formula @xmath106 if and only if there is a greedy matching with weight at least @xmath244 in the constructed graph @xmath29 .",
    "similarly to sections  [ construction - subsec ] and  [ apx - subsec ] , this graph @xmath29 maximum maximum degree 3 and three different integer weight values .",
    "furthermore , @xmath245 can go arbitrarily close to 2 as @xmath246 increases .",
    "the statement of the theorem follows exactly by the proof of theorem  [ thm : inai ] , adapted for these new weights of the edges of @xmath29 .",
    "another parameter that we can consider is the maximum edge cardinality @xmath215 of the connected components of @xmath27 , among all different weights @xmath28 . since @xmath31 implies that there is a unique greedy matching for @xmath29 which can be clearly computed in polynomial time , we consider the case @xmath32 . in the original construction of section  [ construction - subsec ] , in every gadget",
    "@xmath247 there is a path with five edges where each edge has weight 4 .",
    "thus @xmath248 in the graph @xmath29 of section  [ construction - subsec ] . to prove our hardness result for @xmath249 in theorem thm - maximum - component - parameter",
    ", we modify the gadgets @xmath247 as illustrated in figure [ gadget - cardinality - parameter - fig ] .",
    "[ fig : modgx ]    \\(01 ) at ( 0,1 ) @xmath83 ; ( 10 ) at ( 1,0 ) [ label = below:@xmath86 ; ( 01 ) ",
    "node[weight ] @xmath250 ( 10 ) ; ( 21 ) at ( 2,1 ) [ label = above:@xmath88 ; ( 21 ) ",
    "node[weight ] @xmath91 ( 10 ) ; ( 30 ) at ( 3,0 ) [ label = below:@xmath90 ; ( 21 ) ",
    "node[weight ] @xmath251 ( 30 ) ; ( 41 ) at ( 4,1 ) @xmath82 ; ( 41 ) ",
    "node[weight ] @xmath251 ( 30 ) ; ( 51 ) at ( 6,1 ) @xmath84 ; ( 41 ) ",
    "node[weight ] @xmath91 ( 51 ) ; ( 70 ) at ( 7,0 ) [ label = below:@xmath92 ; ( 51 ) ",
    "node[weight ] @xmath251 ( 70 ) ; ( 81 ) at ( 8,1 ) [ label = above:@xmath93 ; ( 81 ) ",
    "node[weight ] @xmath251 ( 70 ) ; ( 90 ) at ( 9,0 ) [ label = below:@xmath94 ; ( 81 ) ",
    "node[weight ] @xmath91 ( 90 ) ; ( 101 ) at ( 10,1 ) [ label = above:@xmath95 ; ( 101 ) ",
    "node[weight ] @xmath250 ( 90 ) ;    notice that in every subgraph @xmath247 ( see figure  gadget - cardinality - parameter - fig ) the connected components of each weight have edge cardinality at most 2 .",
    "furthermore , the weight of the edge between a @xmath13-vertex and a @xmath108-vertex has weight 1 , while the edges between a @xmath13-vertex and an @xmath110-vertex or a @xmath111-vertex have weight  3 .",
    "thus these edges do not belong to any connected component with edges from @xmath247 .",
    "however , each @xmath13-vertex is connected with at most two distinguished vertices in different gadgets @xmath247 and @xmath252 .",
    "therefore @xmath249 in the graph @xmath29 of this modified construction .",
    "considering these updated gadgets @xmath253 and using the same argumentation as in lemmas  [ lem : one ] and  lem : at - least , we obtain that there is a greedy matching with weight at least @xmath254 in the constructed graph @xmath29 if and only if there is a truth assignment that satisfies at least @xmath71 clauses from the original 2sat(3 ) formula @xmath64 , which implies the next theorem .",
    "[ thm - maximum - component - parameter ] greedymatchingis _ strongly np - hard _ and _ apx - complete _ for @xmath255 , even on graphs with maximum degree at most 3 and with at most five different integer weight values .",
    "in this section we provide a randomized approximation algorithm ( rgma ) for greedymatchingwith approximation ratio @xmath4 on two special classes of graphs ( cf .  section  [ two - bush - subsec ] ) .",
    "furthermore we highlight an unexpected relation between rgmaand the randomized mrgalgorithm for greedily approximating the maximum cardinality matching ( cf .",
    "section  [ bush - cardinality ] ) , the exact approximation ratio of which is a long - standing open problem  @xcite .",
    "before we present our randomized algorithm rgma , we first introduce the following class of weighted graphs , called _ bush graphs_.    [ def : bushg ] an _ edge - weighted _ graph @xmath34 with @xmath256 edge weight values @xmath49 is a _ bush graph _ if , for every @xmath257 , the edges of @xmath27 form a _ star _ , which we call the _ @xmath218-th bush _ of @xmath29 .",
    "* input : * bush graph @xmath29 with edge weight values @xmath49 . + * output : * a greedy matching @xmath258 .",
    "1 .   @xmath259 2 .   * for * @xmath51 * do * 3 .   *",
    "if * @xmath260 4 .   select uniformly at random an edge @xmath261 and add @xmath262 to @xmath258 5 .   remove from @xmath29 the endpoints of @xmath262 and all edges of @xmath263      in this section we present the connection of the problem greedymatchingon ( weighted ) bush graphs to the problem of approximating the maximum cardinality matching in unweighted graphs via randomized greedy algorithms , cf .",
    "theorem  [ thm : cardappx ] .",
    "notice that we can not directly apply the rgmaalgorithm on unweighted graphs , since the algorithm has to consider the different bushes in a specific total order which is imposed by the order of the weights .",
    "thus , in order to approximate a maximum cardinality matching in a given unweighted graph @xmath29 using the rgmaalgorithm , we first appropriately convert @xmath29 to a ( weighted ) bush graph @xmath264 using the next bush decomposition algorithm , and then we apply rgmaon @xmath264 .",
    "* input : * unweighted graph @xmath58 and @xmath265 . + * output : * a ( weighted ) bush graph @xmath264 .    1",
    ".   set @xmath266 2 .   *",
    "while * @xmath267 * do * 3",
    ".   chose a random vertex @xmath268 [ gws3 ] 4 .",
    "for every @xmath269 set @xmath270 5 .   remove the edges of @xmath271 from @xmath39 6 .",
    "@xmath272    any unweighted graph @xmath273 can be considered as a weighted graph with edge weights @xmath274 for every edge @xmath275 , and thus in this case @xmath57 coincides with the maximum cardinality matching in @xmath29 . in the next lemma",
    "we relate @xmath276 with @xmath57 .",
    "[ lem : cardopt ] @xmath277 .",
    "assume that @xmath278 .",
    "then , since the weight of each edge of @xmath29 is 1 and the weight of each edge of @xmath264 is by construction smaller than 1 , it follows that @xmath276 has strictly more edges than @xmath57 .",
    "this is a contradiction , since @xmath57 is a maximum cardinality matching of @xmath29 .",
    "therefore @xmath279 .    to prove that @xmath280 , we construct from a maximum cardinality matching @xmath8of @xmath29 a maximum weight greedy matching @xmath281 for @xmath264 with the same cardinality as @xmath8 , i.e.  @xmath282 , as follows .",
    "starting from @xmath66 , we sequentially visit all centers @xmath283 of the bushes in the weighted graph @xmath264 , in a decreasing order of their edge weights . whenever a center @xmath73 of a bush in @xmath264 is unmatched in @xmath66 ,",
    "then all its neighbors must be matched .",
    "if one of these neighbors of @xmath81 is matched in the current matching with an edge that is lighter than the edges of the bush of @xmath81 , then we swap one of these edges with an edge incident to @xmath73 .",
    "that is , the only case where @xmath81 stays unmatched is when all neighbors of @xmath81 are matched with edges of larger weight in the current matching . in this case",
    "there exists a maximum cardinality matching for @xmath29 such that the vertex @xmath81 is unmatched . at the end",
    "we obtain a matching @xmath281 with the same cardinality as the initial matching @xmath66 , but now @xmath281 is a greedy matching for @xmath264 .",
    "thus , since @xmath284 and the weight of @xmath281 is @xmath285 , it follows that @xmath286 is less than or equal to the sum of the weight differences that have been introduced by `` bush decomposition '' , i.e.  @xmath287 , and thus @xmath288 .    with lemma  [ lem : cardopt ] in hand",
    "the next theorem follows :    [ thm : cardappx ]",
    "let @xmath0 be the approximation guarantee of rgmaalgorithm on every bush graph .",
    "then , for every @xmath289 , rgmacomputes a @xmath290-approximation of the maximum cardinality matching for unweighted graphs .",
    "we conjecture that a tight bound for @xmath0 is @xmath4 ; in section  [ two - bush - subsec ] we prove our conjecture true for two subclasses of bush graphs .",
    "note that , although vertex @xmath17 in step  [ gws3 ] of the bush decomposition is selected at random , we do not use anywhere this fact in the proof of lemma  [ lem : cardopt ] .",
    "in particular , both lemma  [ lem : cardopt ] and theorem  [ thm : cardappx ] hold even when the choice of @xmath17 in step  [ gws3 ] is _",
    "arbitrary_.      in this section we prove that our rgmaalgorithm achieves an approximation ratio @xmath291 in two special classes of bush graphs , cf",
    ".  theorems  [ thm : app2bush ] and  [ thm : appbush ] .",
    "before we prove these two theorems we first need to prove the following three lemmas which will be useful for our analysis .",
    "[ claim0-lem ] let @xmath13 be the center of the bush with the largest weight in the graph @xmath292 .",
    "if the edge @xmath10 belongs to a maximum greedy matching of @xmath292 then @xmath293 .",
    "let @xmath8 be a maximum greedy matching of @xmath292 that contains the edge @xmath10 .",
    "then @xmath294 is a greedy matching of the graph @xmath295 , and thus its weight is at most @xmath296 .",
    "that is , @xmath297 , and thus @xmath298 .",
    "conversely , let now @xmath205 be a maximum greedy matching of @xmath295 .",
    "since @xmath13 is the center of the bush with the largest weight in @xmath292 , it follows that every edge of @xmath295 has weight less than @xmath299 .",
    "therefore @xmath300 is a greedy matching of @xmath292 , and thus its weight is at most @xmath301 .",
    "that is , @xmath302 .",
    "[ claim1 - 1-lem]let @xmath303 be the largest edge weight @xmath29 and let @xmath17 be a vertex @xmath29 . then @xmath304 .",
    "let @xmath8 be a maximum greedy matching of @xmath29 . if @xmath17 is not matched in @xmath8 then @xmath305 , which satisfies the statement of the lemma .",
    "suppose now that @xmath17 is matched in @xmath8 and let @xmath306 .",
    "we will modify the matching @xmath8 of @xmath29 to a matching @xmath205 of @xmath295 as follows .",
    "first remove the edge @xmath10 from @xmath8 and let @xmath307 .",
    "if @xmath308 is a greedy matching of @xmath295 then define @xmath309 ; note that in this case @xmath310 .",
    "otherwise , if @xmath308 is not greedy , @xmath13 must have either ( a ) a neighbor @xmath311 such that @xmath311 is unmatched in @xmath308 or ( b ) a neighbor @xmath312 that is matched in @xmath308 with an edge @xmath313 , where @xmath314 .",
    "if @xmath13 has both such neighbors @xmath311 and @xmath312 , we choose to consider only case ( a ) if @xmath315 , or only case ( b ) if @xmath316 , breaking ties arbitrarily if @xmath317 . in case ( a )",
    "we define @xmath318 ; then @xmath205 is greedy and @xmath319    in case ( b ) we define @xmath320 . in this case",
    "@xmath321if @xmath322 is greedy then we define @xmath323 .",
    "otherwise , if @xmath322 is not greedy , @xmath324 must have ( similarly to the above ) either ( a ) a neighbor @xmath325 such that @xmath325 is unmatched in @xmath326 or ( b ) a neighbor @xmath327 that is matched in @xmath322 with an edge @xmath328 , where @xmath329 .",
    "we continue to update the matching @xmath322 as above , until we reach a matching @xmath205 of @xmath295 such that @xmath205 is greedy and @xmath330 .",
    "this completes the proof of the lemma , since @xmath331 and @xmath332 .",
    "in the next theorem we prove that rgmaachieves an approximation ratio of @xmath4 when applied to a bush graph with only two different edge weights . using this theorem as the induction basis",
    ", we then prove in theorem  [ thm : app2bush ] that rgmaachieves an approximation ratio of @xmath4 also when applied to a bush graph in which every bush has at most two edges .",
    "[ thm : app2bush ] rgmais a @xmath4-approximation when applied on bush graphs with only two weights and with an arbitrary number of edges per bush .",
    "let @xmath333 and @xmath334 be the two bushes and let @xmath335 be the center of the bush @xmath334 .",
    "we have to consider the following three cases : @xmath335 is the center of the bush @xmath333 too , @xmath335 does not belong to the bush @xmath333 , @xmath335 is a leaf of the bush @xmath333 .",
    "if @xmath335 is the center of the bush @xmath333 too , then any greedy matching is consisted by only one edge from @xmath333 , thus rgmaalways finds an optimal greedy matching .",
    "when @xmath335 does not belong to the bush @xmath333 we can partition the edges of @xmath334 in three sets :    * @xmath336 : edges of @xmath334 that are incident to the center of the bush @xmath333 .",
    "* @xmath337 : edges of @xmath334 that are not incident to leaves of @xmath333 .",
    "* @xmath338 : edges of @xmath334 that are incident to a leaf of @xmath333 .",
    "without loss of generality we may assume that @xmath339 , since none of these edges can be chosen in any greedy matching .",
    "furthermore , if @xmath340 , then rgmawill always choose one edge from the @xmath334 , thus it will return an optimal greedy matching .",
    "finally , if @xmath341 , then for every choice of edge from @xmath333 , there will be at least one edge in @xmath334 that can be chosen in the greedy matching .",
    "hence rgmawill construct an optimal greedy matching .",
    "finally suppose that @xmath342 be the unique edge @xmath338 has .",
    "then the probability that @xmath343 is deleted in the first iteration of rgmais @xmath344 , thus rgmawill return a matching with expected weight @xmath345 .",
    "hence the approximation guarantee of rgmain this case is @xmath346 .    finally , we consider the case where @xmath335 is a leaf of the bush @xmath333",
    ". then we may partition the edges of @xmath334 into the following two sets :    * @xmath347 : edges of @xmath334 that are adjacent only to one leaf of @xmath333 .",
    "* @xmath348 : edges of @xmath334 that are adjacent to two leaves of @xmath333 .    if @xmath349 , then with probability @xmath350 the algorithm returns a matching with weight @xmath351 . thus ,",
    "if this is the case the approximation guarantee of the algorithm is at least @xmath352 .",
    "hence , without loss of generality we may assume that @xmath353 .",
    "if @xmath354 , then the only case the algorithm rgmareturns a matching with weight @xmath355 is when the edge @xmath356 is chosen ; in every other case there exists at least one in @xmath334 that it is not deleted .",
    "this happens with probability @xmath344 .",
    "notice that by our assumption it must be true that @xmath357 .",
    "thus , the expected weight of the matching returned by the algorithm is @xmath358 .",
    "hence the approximation guarantee of the rgma is better than @xmath4 .",
    "the remaining case is when there is a unique edge @xmath359 .",
    "then the rgmareturns a matching of weight @xmath355 when at least one of the edges @xmath335 and @xmath13 is chosen in the first iteration .",
    "this happens with probability @xmath360 .",
    "hence the expected weight of the matching returned by the algorithm is @xmath361 .",
    "hence , in this case the approximation guarantee of the algorithm is at least @xmath4 .",
    "we are now ready to prove the main theorem of this section .",
    "[ thm : appbush ] rgmais a @xmath4-approximation when applied on bush graphs where each bush has at most two edges .",
    "we will prove the claim by induction on the number of the different weight values @xmath362 the bush graph @xmath29 has .",
    "we will use @xmath363 to denote the expected weight of the greedy matching produced by rgmaon the bush graph @xmath29 .",
    "we know from theorem  [ thm : app2bush ] that the claim holds when there are only two weight values in @xmath29 .",
    "assume that for any bush graph @xmath29 with @xmath364 different weight values such that every bush of @xmath29 has at most two edges , it holds that @xmath365 .",
    "we will prove that the claim holds also for bush graphs with @xmath366 different weight values .",
    "let @xmath367 be the center of the bush with the largest weight @xmath303 and let @xmath198 and @xmath197 be the leaves of this bush . without loss of generality we can assume that all incident edges to @xmath367 have weight @xmath303 , since every other incident edge of @xmath367 with weight @xmath368 would never be selected by the greedy algorithm .",
    "assume that the edge @xmath369 belongs to the optimal greedy matching of @xmath370 .",
    "thus , @xmath371 by lemma [ claim0-lem ] .",
    "furthermore @xmath372 by lemma [ claim1 - 1-lem ] .",
    "hence we get @xmath373now note that @xmath374 and @xmath375 by lemma  [ claim1 - 1-lem ] .",
    "therefore @xmath376 , and thus @xmath377",
    "several interesting open questions stem from our paper .",
    "probably the most important one is to derive tight approximation guarantees @xmath0 for the maximum weight greedy matching problem , even for bush graphs .",
    "we conjecture that @xmath291 ; an affirmative answer to our conjecture would imply that the algorithm mrgfor maximum cardinality matching in unweighted graphs has an approximation ratio of almost @xmath4 , thus solving a longstanding open problem  @xcite .",
    "we believe that our approach might provide novel ways of better analysis of the mrgalgorithm .",
    "as we proved , greedymatchingis np - hard even on graphs of maximum degree three with at most three different weight values on their edges .",
    "it remains open whether greedymatchingcan be solved efficiently when there are only two weight values on the edges of the input graph .",
    "d.  abraham , a.  blum , and t.  sandholm .",
    "clearing algorithms for barter exchange markets : enabling nationwide kidney exchanges . in _",
    "proceedings 8th acm conference on electronic commerce ( ec ) _ , pages 295304 , 2007 .",
    "e.  anshelevich , o.  bhardwaj , and m.  hoefer .",
    "friendship and stable matching . in _",
    "algorithms - esa 2013 - 21st annual european symposium , sophia antipolis , france , september 2 - 4 , 2013 .",
    "proceedings _ , pages 4960 , 2013 .",
    "m.  poloczek and m.  szegedy .",
    "randomized greedy algorithms for the maximum matching problem with new analysis . in _ proceedings of the 53rd annual ieee symposium on foundations of computer science ( focs ) _ , pages 708717 , 2012 ."
  ],
  "abstract_text": [
    "<S> motivated by the fact that in several cases a matching in a graph is stable if and only if it is produced by a greedy algorithm , we study the problem of computing a _ maximum weight greedy matching _ on weighted graphs , termed greedymatching . in wide contrast to the maximum weight matching problem , for which many efficient algorithms are known , we prove that greedymatching is _ strongly np - hard _ and _ apx - complete _ , and thus it does not admit a ptas unless p = np , even on graphs with maximum degree at most  3 and with at most three different integer edge weights . furthermore we prove that greedymatchingis _ strongly np - hard _ if the input graph is in addition _ </S>",
    "<S> bipartite_. moreover we consider two natural parameters of the problem , for which we establish a _ </S>",
    "<S> sharp threshold _ behavior between np - hardness and tractability . on the positive side </S>",
    "<S> , we present a randomized approximation algorithm ( rgma ) for greedymatchingon a special class of weighted graphs , called _ </S>",
    "<S> bush graphs_. we highlight an unexpected connection between rgmaand the approximation of maximum cardinality matching in unweighted graphs via randomized greedy algorithms . </S>",
    "<S> we show that , if the approximation ratio of rgma is @xmath0 , then for every @xmath1 the randomized mrg algorithm of  @xcite gives a @xmath2-approximation for the maximum cardinality matching . </S>",
    "<S> we conjecture that a tight bound for @xmath3 is @xmath4 ; we prove our conjecture true for two subclasses of bush graphs . proving a tight bound for the approximation ratio of mrg on unweighted graphs ( and thus also proving a tight value for @xmath3 ) is a long - standing open problem  @xcite . </S>",
    "<S> this unexpected relation of our rgma algorithm with the mrg algorithm may provide new insights for solving this problem .    </S>",
    "<S> * keywords : * greedy weighted matching , maximum cardinality matching , np - hard , approximation , randomized algorithm . </S>"
  ]
}