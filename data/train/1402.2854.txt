{
  "article_text": [
    "gossiping and broadcasting are two well studied problems involving information dissemination in a group of individuals connected by a communication network @xcite . in the gossip problem , each member has a unique piece of information which they would like to pass to everyone else . in the broadcast problem",
    ", there is a single piece of information ( starting at one member ) which must be passed to every other member of the network .",
    "these problems have received attention from mathematicians as well as computer scientists due to their applications in distributed computing @xcite .",
    "gossip and broadcast are respectively known as `` all - to - all '' and `` one - to - all '' communication problems . in this paper , we consider the problem of acquisition , which is a type of `` all - to - one '' problem .",
    "suppose each vertex of a graph begins with a weight of 1 ( this can be thought of as the piece of information starting at that vertex ) .",
    "a * total acquisition move * is a transfer of all the weight from a vertex @xmath2 onto a vertex @xmath1 , provided that immediately prior to the move , the weight on @xmath1 is at least the weight on @xmath2 .",
    "suppose a number of acquisition moves are made until no legal moves remain .",
    "such a maximal sequence of moves is referred to as an * acquisition protocol * and the vertices which retain positive weight after an acquisition protocol is called a * residual set*. note that any residual set is necessarily an independent set . given a graph @xmath0",
    ", we are interested in the minimum possible size of a residual set and refer to this number as the * total acquisition number of @xmath0 * , denoted @xmath3 .",
    "we are mainly concerned with the question , `` for which graphs @xmath0 is @xmath10 ? '' _ i.e. _ when can one special member of the network acquire all the information subject to the use of total acquisition moves ?",
    "the restriction to total acquisition moves can be motivated by the so - called `` smaller to larger '' rule in disjoint set data structures .",
    "for example , in the union - find data structure with linked lists , when taking a union , the smaller list should always be appended to the longer list .",
    "this heuristic improves the amortized performance over sequences of union operations .",
    "the parameter @xmath3 was introduced by lampert and slater  @xcite and subsequently studied in  @xcite . in  @xcite",
    ", it is shown that @xmath11 for any connected graph @xmath0 on @xmath12 vertices and that this bound is tight .",
    "slater and wang  @xcite , via a reduction to the three - dimension matching problem , show that it is np - complete to determine whether @xmath10 for general graphs @xmath0 . in lesaulnier _",
    "_  @xcite , various upper bounds on the acquisition number of trees are shown in terms of the diameter and the number of vertices , @xmath12 . they also show that @xmath13 ( throughout the paper , @xmath14 denotes the natural logarithm ) for all graphs with diameter 2 and conjecture that the true bound is constant . for work on game variations of the parameter and variations where acquisition moves need not transfer the full weight of vertex , see  @xcite .",
    "randomness often plays a part in the study of information dissemination problems , usually in the form of a random network or a randomized protocol , see _",
    "e.g. _ @xcite . in this paper",
    "we study the total acquisition number of the * erds - rnyi - gilbert random graph * @xmath6 where potential edges among @xmath12 vertices are added independently with probability @xmath15 .",
    "we also consider the total acquisition number of random trees .",
    "our main theorem is the following .",
    "[ mainthm ] fix any @xmath16 . if @xmath17 , then with high probability , @xmath5 .    in particular , by taking @xmath18",
    ", our result implies that while the question `` is @xmath10 ? '' is np - complete , the answer is `` yes '' for almost all graphs .    in  @xcite , the authors mention that understanding the behaviour of @xmath19 near the connectivity threshold , @xmath20 , would be of particular interest . in the theory of random graphs",
    "it is usually the case that some obvious necessary condition is also a sufficient one ( for example , the threshold for connectivity coincides with the one for the minimum degree at least 1 ; the threshold for hamiltonicity is the same as the one for the minimum degree at least 2 ; etc . ) .",
    "hence , one could expect that @xmath21 already at the time a random graph becomes connected .",
    "however , it turns out that connectivity is the wrong `` obvious '' condition .",
    "consider the following observation .",
    "[ obs : min_degree ] if vertex @xmath2 is to acquire weight @xmath22 ( at any time during the process of moving weight around ) , then @xmath2 has degree at least @xmath23 .",
    "note that @xmath2 can only ever acquire @xmath24 , in addition to the @xmath25 it starts with , so that is a total of @xmath26 .",
    "so if @xmath10 then the vertex which eventually acquires all the weight must have degree at least @xmath27 .",
    "now it is true that when @xmath28 , there exist vertices of this degree ( see @xcite ) .",
    "but just one such vertex does not suffice ; a path of significant length consisting of high degree vertices is necessary .",
    "such a path does not exist until the expected degree exceeds @xmath27 .",
    "so if @xmath29 , then @xmath30 .",
    "in fact we prove the following stronger theorem .",
    "[ lowerbdthm ] suppose that @xmath31 for some fixed @xmath32 . if @xmath33 then with high probability , @xmath34 .",
    "this result implies that at the connectivity threshold ( @xmath28 ) the total acquisition number is already of polynomial size , namely it is at least , say , @xmath35 .",
    "theorems [ mainthm ] and [ lowerbdthm ] together imply that @xmath36 is the sharp threshold for the property @xmath10 .    moreover , we prove the following theorem , confirming a conjecture of west  @xcite .",
    "before we state the result , we need a few more definitions . for @xmath37 ,",
    "let @xmath38 be the family of labelled trees on @xmath12 vertices .",
    "we say that some given property @xmath39 holds for * almost all trees * if the ratio between the number of trees in @xmath38 with property @xmath39 and the total number of trees in @xmath38 tends to 1 as @xmath40 .    [ thm : almostalltrees ] for almost all trees @xmath41 , @xmath42      the * random graph * @xmath6 consists of the probability space @xmath43 , where @xmath44 is the set of all graphs with vertex set @xmath45 , @xmath46 is the family of all subsets of @xmath44 , and for every @xmath47 , @xmath48 this space may be viewed as the set of outcomes of @xmath49 independent coin flips , one for each pair @xmath50 of vertices , where the probability of success ( that is , adding edge @xmath51 ) is @xmath52 note that @xmath4 may ( and usually does ) tend to zero as @xmath12 tends to infinity .",
    "all asymptotics throughout are as @xmath53 ( we emphasize that the notations @xmath54 and @xmath55 refer to functions of @xmath12 , not necessarily positive , whose growth is bounded ) .",
    "we say that an event in a probability space holds * with high probability * ( or * w.h.p . * ) if the probability that it holds tends to @xmath25 as @xmath12 goes to infinity .",
    "we often write @xmath6 when we mean a graph drawn from the distribution @xmath6 .    all logarithms , unless otherwise noted , are assumed to be natural , _",
    "i.e. _  with base @xmath56 . for a vertex @xmath2 in a graph",
    ", we write @xmath57 for the degree of @xmath2 .",
    "we will use the following chernoff bound :    if @xmath58 is a binomial random variable with expectation @xmath59 , and @xmath60 , then @xmath61 \\le \\exp \\left ( -\\frac{\\delta^2 \\mu}{2 } \\right)\\ ] ] and if @xmath62 , @xmath63 } \\le \\exp{\\left ( -\\frac{\\delta^2 \\mu}{2+\\delta } \\right)}.\\ ] ]    in section  [ sec : warmingup ] , we prepare the reader for the proof of the main result , theorem  [ mainthm ] , that can be found in section  [ sec : main ] . theorem  [ lowerbdthm ] is proved in section  [ sec : lowerbdthm ] and theorem  [ thm : almostalltrees ] in section  [ sec : almostalltrees ] .",
    "we conclude the paper with some open problems that can be found in section  [ sec : conclusion ] .",
    "first note that in order to prove theorem  [ mainthm ] it is enough to do it for @xmath64 for an arbitrarily small @xmath16 .",
    "this follows from that fact that @xmath65 is an increasing graph property ( see for example lemma 1.10 in @xcite ) .    in this section , in order to prepare for a delicate and technical argument , we show that the result holds for @xmath66 .",
    "let @xmath67 be the largest integer such that @xmath68 we construct a tree @xmath8 rooted at vertex @xmath2 in the following way .",
    "vertex @xmath2 has @xmath69 children @xmath70 .",
    "vertex @xmath71 is a leaf , and for every @xmath72 we have that vertex @xmath73 has @xmath74 children ; all remaining children of @xmath2 have @xmath75 children .",
    "since the number of children of vertices @xmath76 is at most @xmath77 , the number of vertices in @xmath8 satisfies @xmath78 it is straightforward to see that vertices of @xmath8 can move their weight to the root @xmath2 .",
    "indeed , all grandchildren of @xmath2 can move their weight to the corresponding parents , and then vertices @xmath79 can send ( one by one ) the weight to the root ( vertex @xmath73 sends the weight of @xmath80 , @xmath81 ) . at that point of the process , @xmath2 has the weight of @xmath82 so the remaining neighbours can move their weight to @xmath2 .",
    "let @xmath2 be any vertex in @xmath6 .",
    "first , we will show that w.h.p .",
    "there exists a tree @xmath8 rooted at @xmath2 that can be embedded in @xmath6 .",
    "it follows from chernoff bound that w.h.p .",
    "the degree of @xmath2 is @xmath83 .",
    "we select ( arbitrarily ) @xmath69 neighbours of @xmath2 and label them as @xmath70 .",
    "we continue discovering neighbours of @xmath73 s ( one by one ) but not every neighbour of @xmath73 will be used for the tree @xmath8 ( there will be more neighbours than children in the corresponding subtree ) .",
    "since the total number of vertices in @xmath8 is @xmath84 , there will always be at least @xmath85 vertices left that are not embedded yet .",
    "hence , the number of neighbours of @xmath73 that are not embedded yet is a random variable that can be lower bounded by the binomial random variable @xmath86 with expected value of @xmath87 .",
    "hence , using chernoff bound , with probability @xmath88 there will be enough neighbours of @xmath73 to continue the process .",
    "it follows from the union bound that @xmath8 can be embedded w.h.p .",
    "as we already mentioned , vertices of @xmath8 can move their weight to the root @xmath2 .",
    "it is enough to show that the remaining vertices can do that too .",
    "let @xmath89 be the set of neighbours of @xmath2 that are outside of @xmath8 .",
    "since @xmath90 there should be enough vertices in @xmath89 to dominate the rest of the graph and push the remaining weight to @xmath2 .",
    "the important observation is that at this point of the process @xmath2 has weight at least @xmath91 so we do not have to control how much weight we push from a vertex of @xmath89 to @xmath2 .",
    "it remains to show that @xmath89 dominates the remaining vertices ( _ i.e. _ each remaining vertex is adjacent to a vertex in @xmath89 ) w.h.p .",
    "but this is straightforward to see , since for a given vertex we have that the probability it is not dominated is equal to @xmath92 and the claim holds by the union bound .    in order to generalize these ideas to sparse graphs we have to deal with a number of problems ,",
    "each of which is relatively easy to overcome but addressing all of them requires more careful argument .",
    "the spirit of the proof however , remains the same : we will define a special rooted tree ( recursively ) which has the property that all the weight can be moved to the root and we will show that this tree can be embedded in @xmath6 w.h.p .",
    "this tree will not quite be spanning , but it will contain a set of vertices , @xmath93 , which dominates the remaining vertices , @xmath94 , and can shift their weight to the root as well . finding a matching from @xmath94 to @xmath93 which saturates @xmath94 completes the proof .",
    "there have been numerous results on embedding spanning and almost spanning trees in random graphs @xcite , but most of these results are for embedding bounded degree trees and are not precise enough for our purposes .",
    "let us list the most important issues and briefly describe the way we want to deal with them .",
    "suppose that @xmath64 .    * problem  1 : * by observation  [ obs : min_degree ] , in order for a vertex to be able to accumulate a weight of @xmath22 , it has to have degree at least @xmath95 .",
    "since the average degree is only @xmath96 , it follows that ( almost ) every time a neighbour of the root @xmath2 sends its weight to @xmath2 , the weight is ( almost ) doubled .",
    "in particular , some children of @xmath2 must be able to send a large weight to @xmath2 , much more than the number of their children .",
    "hence , we will need to define the tree recursively .",
    "as we will see in corollary [ cor : msize ] , the tree will reach level @xmath97 .",
    "* problem  2 : * as we already mentioned , the root and some vertices on top levels must have degrees close to the average degree in the graph .",
    "we will require that the number of children for those vertices is ( roughly ) @xmath98 .",
    "however , once a positive fraction of all vertices are already embedded in the tree , the number of available ones drop substantially , so in order to be able to continue the process , we will have to decrease the required number of children to @xmath99 for some @xmath100 .",
    "the bottom @xmath101 levels of the tree will have this property .",
    "the number of children on level @xmath102 will be denoted by @xmath103 .",
    "( as explained below , it will be more convenient to count levels from the bottom ; hence the notation @xmath103 instead of more natural @xmath104 . )    * problem  3 : * even though the average degree is @xmath96 , it is possible that a vertex does not have the required number of children ( either @xmath98 or @xmath99 ) .",
    "this is not avoidable but rare , and we will show that w.h.p .",
    "there are at most @xmath105 children of a given vertex that have this undesired property ( we will see in the proof of lemma [ lem : embed ] that @xmath106 ) .",
    "nevertheless , we have to take this into account while constructing the tree .    before defining our tree ,",
    "we first define a property of rooted trees which ( as we will see soon ) guarantees that the root can acquire all the weight on the tree , given that each vertex begins with weight 1 .",
    "[ * cut - off property * ] let @xmath8 be a tree rooted at @xmath107 .",
    "we say @xmath8 has the * cut - off property * if the following holds : for each vertex @xmath2 with children @xmath108 , and denoting by @xmath109 the subtree rooted at @xmath110 , there exists an @xmath111 ( which may depend on @xmath2 ) so that @xmath112 for @xmath113 , and @xmath114 for @xmath115 .    in this case",
    ", the vertices @xmath110 for @xmath113 are called * exact*. a vertex with an exact ancestor is called * tight * , and vertices that are not tight are * loose*.    if @xmath8 is a tree rooted at @xmath107 which has the cut - off property , then @xmath116 . in particular , vertex @xmath107 can acquire all the weight .",
    "we proceed by induction on the depth of @xmath8 .",
    "the base case ( depth @xmath117 ) is trivial . to see the induction step ,",
    "let @xmath107 have children @xmath108 and let @xmath109 be the subtree of @xmath8 rooted at the @xmath110 .",
    "then the @xmath109 inherit the cut - off property , and all have depth strictly less than the depth of @xmath8 , and so by induction , all the weight from subtree @xmath109 can be loaded onto the root @xmath110 .",
    "now it is easy to see that by the cut - off property , @xmath107 may acquire the weight of each child @xmath110 , going in order of increasing index .",
    "it is time to define our recursive construction of a tree which we will have the cut - off property .",
    "[ def : tree ] for any @xmath118 , and positive integer sequence @xmath103 , construct the rooted tree @xmath119 by the following process :    1 .",
    "initialize : the * root * vertex @xmath120 , the * weight * @xmath121 , the * level * @xmath122 .",
    "iterate : in level @xmath102 , if vertex @xmath123 has weight @xmath124 , 1 .",
    "if @xmath125 , then attach @xmath126 leaves to vertex @xmath123 each with weight 1 . 2 .",
    "if @xmath127 , then attach @xmath128 children to vertex @xmath123 , labelled @xmath129 .",
    "let @xmath111 be the minimum integer @xmath130 such that @xmath131 assign weights to the children as follows @xmath132 here , we assume that @xmath133 is an integer and that @xmath134 so that @xmath111 is well defined .",
    "note that the tree @xmath135 has the cut - off property . in this definition",
    ", @xmath136 is meant to represent the number of vertices which will end up in the subtree rooted at @xmath2 .",
    "the sequence @xmath137 provides a sort of threshold for the recursive part of the definition to come into play .",
    "so if the weight on @xmath2 is at most @xmath137 , then the entire subtree appears in the form of leaves . if the weight on @xmath2 exceeds @xmath137 , then @xmath2 will have exactly @xmath137 children and the weight is distributed according to .    *",
    "problem  4 : * in the recursive definition of the tree , we distribute the remaining weight equally among some number of vertices . hence , we will have to make sure that certain divisibility conditions hold .",
    "unfortunately , it is difficult to find the initial weight @xmath138 that does it .",
    "hence , in order to do that , we first define @xmath139 to be the desired number of children of vertices on level @xmath140 ( this time , counted from the bottom ) , and then assign weights starting from the bottom level and doing calculations upwards . this issue is addressed by definition [ def : sequence ] .",
    "* problem  5 : * our goal will be to construct a tree that consists of @xmath141 vertices , that is , a tree @xmath135 with @xmath142 .",
    "( of course , @xmath6 has only @xmath12 vertices ; @xmath135 is an abstract tree that will be `` trimmed '' before embedding it into a random graph . ) as we already mentioned , for a fixed sequence of @xmath139 s and @xmath105 , one can easily ( recursively ) calculate the weight @xmath143 of loose vertices on level @xmath102 ( again , counted from the bottom ) , and the weight of the root @xmath144 .",
    "however , it is hard to expect that the desired condition holds , namely , that @xmath145 . in order to solve this problem",
    "we start with any sequence @xmath146 , take @xmath147 to be the largest integer such that @xmath148 , and then modify the sequence slightly to get the desired sequence @xmath104 with @xmath149 .",
    "let us note that a non - constructive argument is used here that shows only the existence ; the sequence @xmath104 is not explicitly defined .",
    "lemmas [ lem : rhoj ] and [ lem : i ] provide useful relationships between the sequences @xmath137 and @xmath138 which aid in the proof of lemma [ lem : adjustc ] which proves the existence of the desired sequence @xmath137 .",
    "* problem  6 : * it is difficult to expect that a given tree on @xmath12 vertices can be embedded in a random graph .",
    "hence , we are going to remove a number of leaves in @xmath135 to get another tree @xmath150 on @xmath151 vertices that can be embedded in @xmath6 w.h.p .",
    "the important property will be that parents of removed leaves can not only dominate the remaining @xmath152 vertices but also can push all the weight to the root .",
    "this issue is addressed by definition [ def : bereft ] and lemma [ lem : mostlybereft ] .",
    "set @xmath153 and let @xmath154 be constants .    [ def : sequence ] let @xmath155 and let @xmath137 be a sequence such that @xmath156 . define the function @xmath157 finally , define sequences @xmath158 and @xmath159 recursively by putting @xmath160 and @xmath161 @xmath162 and @xmath163    note that the sequences @xmath164 depend on our choice of the sequence @xmath137 ( we assume that constants @xmath165 are fixed in advance ) . as was mentioned before",
    "( see problem  4 ) , the main purpose of this recursive sequence is to calculate ( for a given sequence @xmath137 and depth @xmath147 ) the weight of the root ; in fact , @xmath166 is the weight of each loose vertex at level @xmath75 ( counted from the bottom ) so the weight of the whole tree is @xmath167 .",
    "let us also mention that the purpose of @xmath111 in definition  [ def : tree ] was to make sure that the total weight of subtrees rooted at exact vertices together with the weight of the root is at least the weight of each subtree rooted at non - exact children .",
    "it is straightforward to see that @xmath168 in definition  [ def : sequence ] has the same purpose and so these values are always the same .",
    "finally , let us point out that we fix @xmath169 which indicates that every loose vertex at the level directly above the bottom has precisely one leaf .",
    "these leaves will play an important role in our argument and @xmath170 counts how many such leaves we have in the tree rooted at loose vertex at level @xmath75 ( as usual , counted from the bottom ) .",
    "let @xmath171 be the sequence corresponding to @xmath172 .",
    "let @xmath147 be the largest integer so that @xmath173 .",
    "note that for every @xmath174 , @xmath175 and so @xmath176 it follows that @xmath177 , since @xmath138 grows by at most a log factor each time .",
    "henceforth we will keep @xmath178 as defined above and consider the sequences @xmath164 only up to the terms @xmath179 .",
    "we will consider sequences @xmath137 with terms that might be larger than those of @xmath172 . as a result ,",
    "@xmath180 for all @xmath75 .",
    "however , we will only consider sequences @xmath137 such that the corresponding sequence @xmath138 has @xmath181 .",
    "[ lem : rhoj ] let @xmath137 be any sequence such that @xmath182 and the @xmath138-sequence corresponding to @xmath137 has @xmath181 .",
    "if @xmath183 then @xmath184 for all @xmath185 .    clearly , @xmath186 and it follows immediately from  ( [ eq : nice_recurrence ] ) that for every @xmath187 we have @xmath188 hence , @xmath189 for all @xmath190 and so the upper bound holds . in particular ,",
    "as long as @xmath191 we have @xmath192    for the lower bound , we use  ( [ eq : nice_recurrence ] ) one more time and  ( [ eq : rho_alpha ] ) to observe that for every @xmath75 such that @xmath193 we have @xmath194 ( by our choice of @xmath195 ) . since for every @xmath190 we have @xmath196 , for every @xmath75 such that @xmath197 we have @xmath198 it follows that @xmath199 for all @xmath190 and the proof is finished .",
    "henceforth , we assume that @xmath200 .",
    "we immediately get the following corollary .",
    "[ cor : msize ] @xmath201 .    in definition  [ def : tree ]",
    ", it was assumed that @xmath111 was well defined , that is , that the condition @xmath134 holds . because of the relationship between the two definitions , this condition is equivalent to the condition @xmath202 in definition  [ def : sequence ] . in the next lemma",
    ", we show that the same condition for @xmath195 as in previous lemmas is enough to guarantee that @xmath111 is well defined .",
    "the following is a useful property which we will use in the next few arguments .",
    "[ lem : i ] we have that @xmath111 always exists .",
    "in fact , the following stronger property holds : for every @xmath75 such that @xmath203 we have @xmath204    in order to show that @xmath111 exists , we will show that the equivalent condition that @xmath202 in definition  [ def : sequence ] holds .",
    "in fact , we will show something stronger , namely , that @xmath205 for every @xmath203 .",
    "for @xmath191 we have @xmath206 if @xmath207 , then @xmath208 the proof is complete .",
    "our next task is to show that one can adjust a sequence @xmath172 slightly to get another sequence @xmath137 with @xmath209 .",
    "[ lem : adjustc ] there exists a sequence of integers @xmath210 with @xmath156 and @xmath211 .",
    "we will start by setting @xmath212 for all @xmath75 , and then apply a number of operations to the sequence @xmath137 .",
    "each operation will consist of increasing a single term @xmath210 by @xmath25 and leaving all other terms the same .",
    "suppose that the sequence @xmath213 agrees with sequence @xmath137 except in the @xmath214 term where we have @xmath215 .",
    "let @xmath216 and @xmath138 be the corresponding sequences , which must then agree for all @xmath217 .",
    "then , it follows from  ( [ eq : nice_recurrence ] ) and lemma [ lem : i ] that @xmath218 now , since @xmath219 , for @xmath220 we have @xmath221 hence , @xmath222 in other words , each time we increment a term of sequence @xmath137 , the effect on @xmath167 is negligible",
    ". however we will now show that if we perform this operation on @xmath137 enough times ( while still not changing it too much each time ) , the effect on @xmath167 can be as much as we need it to be .",
    "suppose now that @xmath223 for all @xmath75 .",
    "our goal is to show that @xmath224 . for a contradiction , suppose that it is not the case , that is , @xmath225 .",
    "note that we have @xmath226 since from lemma  [ lem : rhoj ] it follows that both @xmath227 and @xmath228 are equal to @xmath229 using  ( [ eq : nice_recurrence ] ) as usual , by lemma [ lem : i ] we get that @xmath230 and so we have @xmath231 which is a contradiction and so the sequence @xmath213 is such that @xmath224 .",
    "thus we can apply the operation ",
    "increment one term by @xmath25 \" to the sequence @xmath232 several times so that each term gets increased by at most @xmath233 , and we are able to do so in such a manner that @xmath234 .",
    "the proof is finished .",
    "[ def : bereft ] define the tree @xmath235 to be the tree @xmath236 with each leaf in the bottom level being removed if it has a loose parent .",
    "call the parents that lose their children * bereft*.    note that by induction and definition of @xmath237 , and @xmath235 , we see that @xmath235 has @xmath238 many vertices , @xmath170 of which are bereft .",
    "it is not difficult to see that by construction , @xmath235 has the cut - off property .",
    "moreover , if we form another tree @xmath239 by re - attaching at most one leaf to each bereft parent of @xmath235 , then @xmath240 still has the cut - off property .",
    "our next goal is to show that almost all vertices of @xmath241 are bereft .",
    "since each bereft vertex has exactly one child in @xmath236 , we get that @xmath242 .",
    "in particular , @xmath243 .",
    "[ lem : mostlybereft ] for all @xmath244 we have @xmath245 as @xmath246 .",
    "note that @xmath247 since @xmath205 by lemma  [ lem : i ] .",
    "since @xmath248 , we have @xmath249 .",
    "finally , since @xmath250 , for all @xmath190 we have that @xmath251 as @xmath40 , and the result follows .",
    "now , we are ready to show that @xmath252 can be embedded into a random graph .    [",
    "lem : embed ] if @xmath253 and @xmath254 , then w.h.p .",
    "@xmath6 contains a copy of @xmath252 .",
    "we will embed @xmath252 in @xmath6 . select any vertex ( arbitrarily ) that will serve as a root of the tree .",
    "the embedding is done greedily and from the top down , and at each step we reveal the neighbourhood of one vertex . we group vertices in the same level ( i.e.  distance from the root ) consecutively .",
    "the embedding will be determined iteratively as we reveal the random graph .",
    "we will not put a vertex of @xmath6 into our partial embedding until we have exposed all of its children .",
    "we say that a vertex in level @xmath102 is * bad * if its neighbourhood ( into the unexposed vertices ) is less than @xmath103 .",
    "we will show that w.h.p .",
    "the root is not bad and no vertex has more than @xmath105 bad children .",
    "any bad children will be put into the partial embedding as leaves , and the other vertices will be arbitrarily assigned ( to non - leaves first and then to leaves , if the number of bad children is smaller than @xmath105 ) .",
    "the tree @xmath255 has at most @xmath256 vertices total in levels @xmath117 thru @xmath257 .",
    "thus , the expected degree ( into the unexposed vertices ) of each vertex exposed in such a level @xmath102 is @xmath258 and so it follows from chernoff bound that the probability that a fixed vertex is bad is polynomially small , that is , at most @xmath259 . for levels",
    "@xmath102 farther to the bottom , note that the number of vertices that are not embedded yet is always at least @xmath260 and so the expected degree of each exposed vertex in layer @xmath102 is at least @xmath261 again yielding that the probability that a fixed vertex is bad is polynomially small ( this time the exponent is a universal constant , not a function of @xmath262 ) .    therefore if @xmath106 is a large enough constant , then w.h.p .",
    "each vertex has at most @xmath105 bad children .",
    "this proves that our embedding procedure is successful w.h.p .  and",
    "the proof is finished .",
    "let @xmath93 be the set of bereft vertices in @xmath6 and @xmath94 be the set of remaining , unexposed vertices that are not embedded into tree yet .",
    "note that @xmath263 and @xmath264 .",
    "an important property is that no edge between @xmath93 and @xmath94 is exposed at this point , so the next lemma shows that w.h.p .",
    "set @xmath93 dominates set @xmath94 but in such a way that at most one vertex of @xmath8 is assign to each bereft vertex .",
    "this will finish the proof of the main theorem , theorem  [ mainthm ] .",
    "[ lem : matching ] w.h.p .",
    "there is a matching from @xmath94 to @xmath93 which saturates @xmath94 .",
    "we are going to use hall s theorem for bipartite graphs .",
    "it is enough to show that for every subset @xmath265 , hall s condition holds , that is , we have that @xmath266 .",
    "we will use the following useful upper bound : @xmath267 } \\label{eq : probnomatch}\\\\ & \\le\\pr{\\left [ \\exists v\\in r\\,:\\ , n(v)\\cap b = \\emptyset \\right]}\\nonumber \\\\ & + \\pr{\\left [ \\exists s\\subseteq r , t\\subseteq b\\,:\\,|s|=k\\ge 2,\\ , |t|=k-1,\\,n(s)\\cap b= t,\\,e(s : t ) \\ge 2(k-1 ) \\right]}\\nonumber\\end{aligned}\\ ] ] where @xmath268 represents the number of edges between @xmath89 and @xmath8 .",
    "the first term bounds the probability that hall s condition fails for some set of size one . to see why the condition in the second term is equivalent to the property that hall s condition fails for some set of cardinality at least 2",
    "is slightly more complicated .",
    "take a smallest size @xmath265 with @xmath269 , which violates hall s condition , i.e.  @xmath270 where @xmath271 .",
    "if @xmath272 , then @xmath273 , otherwise we could remove some vertex from @xmath89 to get a smaller set that violates hall s condition .",
    "every vertex in @xmath8 must have degree at least @xmath274 into @xmath89 , because removing a degree @xmath25 vertex from @xmath8 and its unique neighbour in @xmath89 gives us a smaller set which violates hall s condition .",
    "so the number of edges between @xmath89 and @xmath8 must be at least @xmath275    in order to bound the first term in  ( [ eq : probnomatch ] ) , note that @xmath276 } & \\le & |r|(1-p)^{|b| } \\le n\\exp{\\left ( -\\frac{4}{5\\log 2}\\log n \\right ) } \\\\ & \\le & n\\exp{\\left ( - 1.15 \\log n \\right ) } = o(1).\\end{aligned}\\ ] ] to bound the second term in  ( [ eq : probnomatch ] ) , let @xmath277 count the number of sets @xmath89 and @xmath8 satisfying the condition in this term .",
    "then we may bound the expectation of @xmath277 from above by @xmath278}&\\le \\sum_{k=2}^{|r|}\\binom{|r|}{k}\\binom{|b|}{k-1}\\binom{k(k-1)}{2(k-1)}p^{2(k-1)}(1-p)^{k(|b|-(k-1 ) ) } \\\\ & \\le \\sum_{k=2}^{|r|}{{\\left ( \\frac{|r|e}{k } \\right)}}^k{{\\left ( \\frac{|b|e}{(k-1 ) } \\right)}}^{k-1}{{\\left ( \\frac{kep}{2 } \\right)}}^{2(k-1)}\\exp{\\left ( -pk(|b|-(k-1 ) ) \\right)},\\end{aligned}\\ ] ] since @xmath279 .",
    "it follows that @xmath278}&\\le \\sum_{k=2}^{|r|}\\exp\\left((2k-1)\\log{{\\left ( \\frac{n}{k } \\right ) } } + 2(k-1)\\log{{\\left ( \\frac{k\\log n}{n } \\right ) } } \\right .",
    "\\\\ & \\qquad\\qquad\\qquad \\left.-\\frac{4}{5\\log2}k\\log n{\\left ( 1-\\frac{k}{\\frac{4}{5}n } + o(1 ) \\right ) } + o(k)\\right)\\\\ & \\le \\sum_{k=2}^{|r|}\\exp{\\left ( \\log n + 2(k-1)\\log\\log n - 1.15k\\log n{\\left ( 1-\\frac{5k}{4n } + o(1 ) \\right ) } + o(k ) \\right)}.\\end{aligned}\\ ] ] for each value of @xmath102 such that @xmath280 , each term above is @xmath281 . since we are summing over @xmath282 many terms , we get @xmath283 } = o(1)$ ] and so @xmath284 } = o(1)$ ] by markov s inequality .",
    "it follows that the probability in is @xmath285 and the proof is finished .",
    "first , let us concentrate on the lower bound . in the rest of this section , set @xmath286 where @xmath287 .",
    "let @xmath288 be constants such that @xmath289 .",
    "set @xmath290 and @xmath291 so that @xmath292 . also define the constant @xmath293 .",
    "we will need the following property of a random graph @xmath6 .",
    "[ lem : propertyforlower ] the following properties hold w.h.p .    1 .",
    "@xmath294 has no vertices of degree at least @xmath295 .",
    "@xmath294 has no paths of length @xmath296 consisting of vertices of degree at least @xmath297 .",
    "\\(i ) follows easily from chernoff bound .    for ( ii )",
    ", we first note that the expected number of paths on @xmath296 vertices is @xmath298 .",
    "given such a path , we are looking for each vertex in the path to have at least @xmath299 additional neighbours among the @xmath300 other vertices . by chernoff bound ,",
    "the probability that one vertex in the path has enough neighbours is at most @xmath301 hence the expected number of paths on @xmath296 vertices consisting of vertices with degree at least @xmath302 , is at most @xmath303 so by markov s inequality , w.h.p . , there are no such paths .",
    "now , we are ready to show the lower bound .",
    "suppose that in any graph @xmath0 of maximum degree at most @xmath295 , the vertex @xmath2 can acquire @xmath304 weight .",
    "then , it follows from observation  [ obs : min_degree ] that @xmath305 .",
    "furthermore , by averaging argument , some neighbour @xmath1 of @xmath2 must have acquired at least @xmath306 weight , and so @xmath307 } \\ge c '' \\log n - o(\\log \\log n).\\ ] ] applying the same reasoning inductively @xmath308 times , we find a path of length @xmath100 of vertices of degree at least @xmath309 .    but by lemma  [ lem : propertyforlower ] , w.h.p .",
    "@xmath6 has max degree at most @xmath295 and no long path of high degree vertices , and so w.h.p .",
    "no vertex can ever get a weight more than @xmath304 .",
    "thus , at least @xmath310 many vertices have nonzero weight after any legal sequence of moves and the lower bound holds .",
    "for the upper bound in theorem  [ lowerbdthm ] , we must show that all the weight can be pushed to at most @xmath311 many vertices . to do this we basically follow the embedding proof from theorem  [ mainthm ] but this time with many roots .",
    "we sketch the idea of this process , and the reader may check the details .",
    "suppose @xmath312 for some @xmath313 .",
    "we would like to show that for any @xmath314 , w.h.p .",
    ", @xmath315 .",
    "we let @xmath316 and prove that @xmath317 .",
    "let @xmath318 be any two constants such that @xmath319 , @xmath320 and let @xmath321 let @xmath138 be the sequence defined as in defintion  [ def : sequence ] with respect to this sequence @xmath172 .",
    "let @xmath147 be the largest integer such that @xmath322",
    ". then @xmath323 and @xmath324 .",
    "at this point in the proof of theorem  [ mainthm ] , we would adjust the sequence @xmath172 to get a precise value for @xmath167 .",
    "however , in this case , this step is unnecessary since we may simply adjust the number of copies of @xmath252 which we embed .",
    "let @xmath325 be an integer such that @xmath326 .",
    "then @xmath327 we would like to grow @xmath328 vertex disjoint copies of @xmath252 . to do this we must have @xmath328 roots .",
    "we begin with @xmath329 many vertices which are candidate roots .",
    "the probability that a fixed vertex has less than @xmath330 neighbours ( among the other @xmath331 vertices ) is at most @xmath259 by chernoff bound .",
    "so by markov s inequality , w.h.p . , at least @xmath328 of these @xmath329",
    "vertices have at least @xmath330 neighbours , and we take these @xmath328 vertices to be the roots .",
    "the other @xmath328 vertices whose neighbourhoods were exposed now play no part in the embedding and can retain their weight until the end .",
    "we may now proceed as in lemma  [ lem : embed ] .",
    "we embed the trees from the top down and group vertices in the same level ( this time , distance from their respective root ) consecutively . in levels @xmath117 thru @xmath332 , the @xmath328 trees have at most @xmath333 vertices total .",
    "so , as in , the probability that a fixed vertex is bad is polynomially small .",
    "we also have that the number of unexposed vertices is always at least @xmath260 , so the polynomial bound on the probability that a vertex is bad holds for levels further down as well .",
    "so by taking @xmath105 to be a large enough constant , we successfully embed the @xmath328 trees w.h.p .",
    "we are now in the situation where we have @xmath334 bereft vertices @xmath93 , and @xmath335 unexposed vertices , @xmath94 .",
    "note that since @xmath336 and @xmath137 may be small here , we will not be able to guarantee that there is a matching from @xmath94 to @xmath93 which saturates all vertices in @xmath94 .",
    "however , it is sufficient to find a matching which saturates all but @xmath337 vertices in @xmath94 , since these remaining @xmath311 vertices can keep their weight . indeed ,",
    "if such a matching is found then we have shown that @xmath338 the first @xmath328 represents the candidate roots which were discarded , the second @xmath328 represents the roots of the @xmath252 which were embedded and which receive all the weight from their trees , and the last term represents the unmatched vertices from @xmath94 .    to show that such a matching exists , we may use the defect version of hall s theorem : if @xmath339 for all @xmath340",
    ", then there is a matching which saturates all but @xmath341 vertices of @xmath94 . emulating the proof of lemma  [ lem : matching ] using this version of hall",
    "s theorem with @xmath342 proves the existence of the desired matching .",
    "before we move to the proof of this result , let us mention that our goal is to provide a simple proof of the conjecture and the constant can be easily improved with more effort .",
    "we say that a subgraph @xmath343 of a tree @xmath8 is a * long leaf * if @xmath328 is an induced path of length  3 ; in particular , @xmath344 , @xmath345 in @xmath8 .",
    "observe that the acquisition number of every graph is bounded from below by the number of long leaves .",
    "indeed , it is straightforward to see that , regardless of a strategy used , for every long leaf @xmath328 we have that at least one vertex from @xmath346 has to have non - zero weight at the end of the process .    consider the probability space @xmath44 of all labelled trees of order @xmath12 uniformly distributed .",
    "let @xmath8 be a randomly chosen tree from @xmath44 .",
    "clearly @xmath347 , due to cayley s formula , so for every fixed tree @xmath348 on @xmath12 vertices we have @xmath349 .",
    "our goal is to show that a.a.s .",
    "the number of long leaves in @xmath8 is at least @xmath350 .",
    "let @xmath351 be an indicator random variable defined as follows : @xmath352 let @xmath353 be a random variable counting the number of long leaves in @xmath8 , that is , @xmath354 .",
    "note that for every @xmath355 @xmath356 since there are @xmath357 choices for the vertices of the long leaf and there are @xmath358 ways to embed a tree on remaining vertices .",
    "hence , @xmath359    now we are going to apply chebyshev s inequality to show that a.a.s .",
    "it follows that @xmath361 hence , it suffices to show that @xmath362 tends to  1 as @xmath246 . clearly , @xmath363 where the sums are over ordered pairs .",
    "now , for fixed vertices",
    "@xmath364 , @xmath365 since there are @xmath366 choices for vertices @xmath367 in the two corresponding long leaves @xmath343 and @xmath368 , and @xmath369 choices for @xmath370 ( note that it might happen that @xmath371 but other than that the two leaves can not overlap ) . consequently , , , and imply that @xmath372 as required .",
    "the proof of the theorem is finished .",
    "in this paper , we showed that @xmath373 is the sharp threshold for the property @xmath21 .",
    "however , precise behaviour of the total acquisition number in the critical window is not determined and it is left as an open problem .",
    "we analyzed sparser graphs showing that for @xmath313 , w.h.p .",
    "@xmath374 so the exponent of the total acquisition number is determined up to @xmath285 term .",
    "it also remains to be analyzed and better understood .    on the other hand , it is not difficult to see when this graph parameter becomes sub - linear .",
    "it was already anticipated by west  @xcite that @xmath3 is linear for @xmath375 for any constant @xmath376 and sub - linear for @xmath377 .",
    "this is true , since for @xmath375 we have @xmath378 isolated vertices w.h.p .",
    "( see , for example ,  @xcite ) , and so the total acquisition number is linear w.h.p . for @xmath379 , where @xmath380",
    "the domination number is known to be equal to @xmath381 w.h.p .",
    "@xcite , so the total acquisition number is also sub - linear w.h.p ."
  ],
  "abstract_text": [
    "<S> let @xmath0 be a graph in which each vertex initially has weight 1 . in each step </S>",
    "<S> , the weight from a vertex @xmath1 to a neighbouring vertex @xmath2 can be moved , provided that the weight on @xmath2 is at least as large as the weight on @xmath1 . </S>",
    "<S> the total acquisition number of @xmath0 , denoted by @xmath3 , is the minimum possible size of the set of vertices with positive weight at the end of the process .    </S>",
    "<S> lesaulnier , prince , wenger , west , and worah asked for the minimum value of @xmath4 such that @xmath5 with high probability , where @xmath6 is a binomial random graph . </S>",
    "<S> we show that @xmath7 is a sharp threshold for this property . </S>",
    "<S> we also show that almost all trees @xmath8 satisfy @xmath9 , confirming a conjecture of west .    </S>",
    "<S> [ section ] [ theorem]lemma [ theorem]claim [ theorem]definition [ theorem]conjecture [ theorem]proposition [ theorem]algorithm [ theorem]corollary [ theorem]observation [ theorem]open problem </S>"
  ]
}