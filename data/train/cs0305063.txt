{
  "article_text": [
    "mcrunjob ( monte carlo run job ) was first created in the context of the dzero experiment at fermilab during the 1999 dzero monte carlo challenge . at the time",
    ", there was no easy generic way to organize large batches of monte carlo jobs , each possibly involving multiple processing steps .",
    "mcrunjob was originally designed so as to be generic enough so that the addition of new production processing executables would not pose a significant integration problem into the existing framework and so that different executables could be linked together in possibly complex tree - like workflows in which each node represents a processing step .",
    "the main focus of mcrunjob provides a metadata based abstraction of each job step and to provide tools that allow for specification of the metadata , functional dependencies of the metadata among distinct steps , delegation of methods to build and or run jobs , and linkages to external frameworks , databases , or servers .",
    "while mcrunjob has been used continuously at dzero since then , it has only been in use at cms since the end of 2002 for regular production operations .",
    "typically , mcrunjob operates during the job building stage to turn structured metadata into jobs .",
    "it does this by establishing interfaces to do the following :    * define and access a unit of schema called a configurator * register functions to the schema to perform job building , or * optional delegation of job building responsibilities to other configurators * support user driven framework operation * support linkages to external databases , catalogs , or resource brokers .",
    "* register parsers to the schema to allow for customized access to the configurator interface as text macros * specify dependencies among the metadata elements * support rudimentary ontologies through specification of synonyms and versioning * support inter - configurator communication and user interface through a configurator container object known as the linker .",
    "mcrunjob is implemented in python and consists of three major components :    * _ the configurator _",
    "configurators are essentially packages of metadata that describe applications .",
    "configurators can be defined to describe application input , environment , and output . however , since the configurators are completely generic , they can also describe batch queues , grid execution environments , information from a database , local computing site information , etc .",
    "taken together , the configurators describe workflow and provenance of data . * _ the script generator _",
    "the script generator is a specialization of a configurator that also implements the scriptgen interface .",
    "the scriptgen interface makes it possible for configurators to delegate specific job generating tasks to a single common scriptgen object .",
    "this helps keep job generation consistent in an environment where there may be different schemes for creating or handling jobs . * _ the linker _",
    "the linker is a container for configurators .",
    "it also acts as a communication bus for configurators , a driver for the job building framework , and a user interface to the linker and configurator apis .",
    "figure [ fg : arch ] shows the simplest mcrunjob scenario .",
    "a user or production coordinator needs to run three applications : let s call them a , b , and c. let s say further that the output of a is the input of b and that the output of b is the input to c. the user will communicate to the linker directives to instantiate pre - defined configurators corresponding to a , b , and c. usually such job building directives are kept in an mcrunjob macro script , the syntax of which is described below .",
    "the user issues a set of configuration macro commands which are routed to the relevant configurators .",
    "these configuration commands may include specification of values for the schema , specification of inter - configurator dependencies , and the specification of functional dependencies among schema elements in different configurators .",
    "since each configurator is required to have a unique description within the linker space , so the configurators themselves function much like namespaces .",
    "an example of a simple functional dependency is b : inputfile = a : outputfile .",
    "the `` makejob '' and `` makescript '' directives , examples of framework calls , are issues .",
    "these particular framework call cause the configurators to generate shell scripts to handle their respective applications in serial order .",
    "the scripts are then collected by the linker and a composite shell script that represents the entire workflow is produced .",
    "this procedure can be reset and re - run as many times as desired to kick out as many jobs as desired .",
    "the procedure is also generic in that different targets than shell scripts ( eg- directed graphs ) can be selected by including different scriptgen modules .",
    "in addition to modeling the application space , the configurators also provide a useful abstraction through which to exchange information with other external sources such as databases , batch queues , etc .",
    "figure [ fg : outside ] shows a generalized picture of how configurators may do this .",
    "typically , the user writes a script of mcrunjob macro commands which are interpreted by the linker framework ( shown in light blue . )",
    "the linker takes these commands and distributes them to the configurators attached below .",
    "the configurator layer exposes to the linker sets of metadata key - value pairs , but with additional customizable backends .",
    "for example , one class of configurators ( `` inputplugins '' ) have backends that communicate to external databases , planners , or servers .",
    "more conventional configurators just hold on the application metadata .",
    "scriptgenerators collect results from previous configurators and produce composite workflows ( as described above ) .",
    "finally , a batch portal configurator may take the produced composite script object and submit it to a batch queue .        in the dzero context",
    ", monte carlo production is coordinated with the sam database at fnal .",
    "two of the common applications in the workflow are pythia generation and d0gstar ( geant simulation . ) the scriptgenerator targets executable scripts for the dzero executable script environment , and one possible execution environment is the sam / jim grid service . in upcoming dzero production on the grid",
    ", there may no jobs ; rather the focus is on automatic production of mcrunjob macros which replace scripts and are executable by remote linkers . also , there is work being done to leverage existing mcrunjob tools to do monitoring on the dzero farms .",
    "some typical dependency relationships among configurators include modeling of the sequence in which applications have to run on a set of events in order to reach a given data product or modeling of parameter flows in environments where several databases or configuration files may be consulted in the process of job creation .",
    "one feature of the mcrunjob framework in cms that is disabled in the dzero framework is the requirement that such dependency relationships be clearly defined before inter - configurator parameter lookup can take place .",
    "this discipline is useful , however , in an environment where a clear provenance of the produced data is not already established by central means . at dzero ,",
    "this is largely handled by the sam database .",
    "three final points can be made .",
    "the first is that although mcrunjob was conceived in a monte carlo production environment , it is perfectly and immediately well suited to any problem involving complex workflow specification and job templating in a production processing environment .",
    "the second is that while mcrunjob was designed to describe production workflows in the monte carlo setting ( ie- applications and files ) there is no reason that it can not be extended into more fine grained settings to describe analysis object data ( aod ) and their relationships and provenances .",
    "finally , mcrunjob typically operates after metadata is specified and before jobs are actually submitted ; mcrunjob could conceivably be extended into runtime to bring parameter lookup services into runtime .",
    "the configurator api provides methods for automating many of the procedures inherent in specifying workflow for monte carlo production or analysis .",
    "the configurator is essentially a value added metadata container .",
    "it comprises a special triggerdictionary class used to hold the metadata key / value pairs and the methods provided to manipulate the metadata in a production processing environment .",
    "* the triggerdictionary allows the user to provide an implementation for the internal dictionary . the implementation must use the regular python userdict interface . *",
    "the triggerdictionary makes calls to user supplied functions on reads or writes to the internal dictionary implementation .",
    "the triggerdictionary triggering mechanism is used to implement several configurator functionalities , such as parameter lookup or construction .",
    "it is also used to implement parameter monitor and watch functions for debugging purposes .",
    "the internal implementation object is swappable , enabling gui linkage on demand .",
    "there are four kinds of triggers : ( 1 ) global read : functions that are called when any element is read .",
    "( 2 ) global write : functions that are called when any element is written to . ( 3 ) indexed read : functions that are called only when a specific element is read . ( 4 ) indexed write : functions that are called only when a specific element is written to .",
    "functions that handle any of the triggers must be registered to the triggerdictionary object as described below , and must accept a python list as argument . in all cases ,",
    "the first element in the list is always a back reference to the triggerdictionary object , and the second is always the key that was called .",
    "the remaining elements , is present , are defined at registration time .",
    "note : trigger handlers registered to triggerdictionary , if they are going to alter dictionary state , must always interact with the triggerdictionary using the untriggeredread and untriggeredwrite methods ; otherwise an infinite loop could occur .",
    "the feature that the triggerdictionary can accept any conformant implementation of its internal dictionary structure implies that structures can be built for this purpose that have external linkage to graphics or gui packages .",
    "furthermore , these can be `` hotswapped '' so that graphics packages or debugging mechanisms can be inserted into running mcrunjob programs .",
    "configurators are themselves described by metadata .",
    "this metadata is used internally by mcrunjob to resolve dependencies , keep track of schema versions , resolve entries in synonym tables , and distinguish configurators within the memory space of a linker .",
    "configurators can function within the linker as namespaces ; the configuratordescription objects allow the namespaces to be referenced .",
    "the configuratordescriptions are generally used internally for two things : to implement inter - configurator dependencies and to aid in parameter lookup . in the first capacity",
    ", a configurator can declare dependencies on other configurators .",
    "this can occur _ statically _ when a developer is modeling underlying relationships among applications or _ dynamically _ when a user is modeling relationships among servers , planners or databases . when adding a configurator to the linker or when altering the dependencies of configurators already in the linker , the dependencies are checked and an exception is thrown if not satisfied .",
    "the mechanism is that the dependencies of the new or changed configurator are matched against the list of existing configurators in the linker if there is not a match , then an exception is thrown . note",
    ": this behavior is disabled in dzero .",
    "the configurators support a parameter lookup service based on namespaces within the linker and on declared dependencies .",
    "since the configuratordescriptions of configurators must be unique within the linker , they define a partition ( namespaces ) on the parameters .",
    "thus a parameter in the linker is defined by a complete specification of the configuratordescription and the parameter name . from a configurator point of view , a parameter in configurator b is only visible if there exists a declared dependency on configurator b. this last behavior is also disabled in dzero .",
    "configurators contain synonym tables .",
    "these are lookup tables that translate local metadata key names into different key names in other configurator types .",
    "the behavior of a workflow can therefore change depending upon what synonyms are loaded at any given time .",
    "the synonyms tables can be loaded for different environments or changing versions , thus providing for a rudimentary ontology .",
    "finally , configurators can have explicit metadata translation or construction rules attached directly to each metadata element .",
    "these are available to the developer , but not yet available in the macro script language .",
    "examples of configurators include those that have connectivity with external databases ( ie- refdb in cms through sql queries or sam in dzero through system commands , ) those which model applications steps ( ie- monte carlo generation , detector simulation , digitization , ) those which submit jobs to specified batch portals ( ie- lsf or pbs batch systems , condor , dagman / condor - g . )",
    "one of the problems encountered in practice using the above model of configurators generating custom bits of code which are then collected by the linker for submission to an execution manager is that there is no organization in place to help guarantee that all of the independently generated bits of code will be compatible .",
    "for example , they may be targeted for an environment in which the code bits cooperate at runtime through non - mcrunjob interfaces . the only way to organize",
    "this is at the level of the configurator itself ; so the number of modules potentially needing modification in case of a change to the runtime environment is as large as the number of configurators .",
    "scriptgen is a special interface implemented by some configurators that enable configurators to delegate specific calls to a single configurator . in the case of delegation ,",
    "the scriptgen must declare configuratordescriptions and method calls which it can handle .",
    "the configurator must specify which method calls it will delegate and the description of the scriptgen module to which it is delegating . with this functionality , a new way to organize code is available : all of the script generating code targeting specific runtime environments can be collected in a single scriptgen module .",
    "the scriptgen module is also usually the agent which the linker uses to collect code bits targeted for a specific environment in order to create a composite job or dag .",
    "examples of different scriptgen modules in cms are the default impalascriptgen module , which generates executable scripts compatible with the legacy impala production environment , the impalalitescriptgen module , the cmsprodscriptgen module , the vdlscriptgen module for generating specifications written in the chimera virtual data language , and the mopdaggen module for taking the output of other specified scriptgen modules and producing a directed acyclic graph ( dag ) for use by the condor dagman tool .",
    "the linker is a container class for configurators .",
    "it handles all communication between the user and the configurators and between any two configurators .",
    "it also contains a repository for `` script objects '' .",
    "configurators that need to generate code bits to implement a given workflow or job can store these bits in the linker as script objects . as described above",
    ", a scriptgen module may later collect script objects targeted for a specific environment and create a composite script object .",
    "it may also , as in the case of mopdaggen , wrap existing scriptobjects or composites into a dag .",
    "the linker also supports some simple looping structures within the mcrunjob macro scripts , and also drives the framework , described in the next section .",
    "the configurators build jobs together by contributing their specialized knowledge of application steps or external resources to the overall whole in structured ways .",
    "one part of this structure is the configurator dependencies .",
    "another structure which organizes the order in which tasks are completed is the framework .",
    "the framework is basically a sequence of strings used as messages sent to framework handlers in the configurators .",
    "the messages can include things like reset , makejob or makescript for shell script building , listing of derivations and transformations in chimera , etc .    traditionally in mcrunjob , framework calls are handled directly by the configurators themselves through subclassing the framework handling methods .",
    "however , to better support flexibility without using inheritance , the configurator base class also provides methods for registering functions ( possibly user supplied in certain simple cases ) to handle specific framework messages . as described above , as a double indirection supporting code maintenance tasks ,",
    "these functions can also be registered to a special configurator that inherits the scriptgen interface and then delegated .",
    "the linker thus provides the drumbeat according to which the configurators march : it provides a context within which to order the configurators by their dependencies and a framework within which to sequence method invocations .",
    "the mcrunjob macros are intended to provide a user interface to the configurator and linker apis .",
    "it is possible to construct the macros as a complete declarative specification of the workflow , but even in a procedural environment where parameters are being `` constructed '' or `` discovered '' in external databases the resulting state of the mcrunjob program can at any time be dumped in declarative format . thus macros can also serve as a rudimentary `` provenance '' for the described or constructed workflow .",
    "the linker macros comprise commands that attach configurators , route macro commands to specified configurators , and simple looping and conditional constructs . in the configurator",
    ", the handling of macros is done in a `` class distributed '' fashion .",
    "configurator classes can have macro handlers registered to them so that it is very easy to extend their macro interfaces .",
    "a particular configurator object passes a particular macro to each of the registered macro handlers until it finds one that can handle the particular macro .",
    "the configurator base class registers a base parser which is called last , and configurator subclasses extend this .",
    "following is a list of simple linker directives :    * * attach cfgidentifier * attaches a configurator of the given type . * * cfg cfgidentifier cmd * issues the macro `` cmd '' to the specified configurator . *",
    "* framework run cmd * issues the framework message `` cmd '' to all configurators in sequence .",
    "framework commands can be grouped together and run in groups as well .",
    "following is a list of simple configurator macros :    * * additem keyname * adds a metadata element named `` keyname '' * * define keyname expression * sets the value of `` keyname '' to `` expression '' where expression can be a literal or a reference to the value of a key in another configurator or a reference into the internal configurator synonym table or a directive to construct the value by registered function . *",
    "* addreq cfgidentifier * adds cfgidentifier as a dynamic dependency for this configurator . * * synonym key : : cfgidentifier : newkey * defines a possible synonym for `` key '' to target `` newkey '' in another configurator . * * oncall fmk do cmd * store command `` cmd '' and execute it on receipt of framework call `` fmk '' .    [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     [ tb : framework ]    macros can source other macros . in this way",
    ", mcrunjob macro commands can be separated into synonym definitions and stored commands on one hand and pure workflow descriptions on the other hand .",
    "the former are seen as part of the environment and are in some sense independent of the pure workflow descriptions .",
    "the management of these environments leads to a rudimentary ontological management system .      in the cms implementation of mcrunjob ,",
    "a helloworld example is provided which consists of a helloworld configurator with metadata element hellomessage and a helloworldscriptgen that also serves as a metadata server .",
    "each helloworld configurator is equipped to produce a short script which echos its hellomessage to the screen .",
    "the helloworldscriptgen collects these scripts into a composite .",
    "the following is a simple example macro script fragment that would print out a helloworld message in english , french , and german .",
    ".... # attach the scriptgen which will in this   # case also serve metadata values to the   # helloworld configurators attach helloworldscriptgen cfg helloworldscriptgen additem english cfg helloworldscriptgen define english \\",
    "hello world cfg helloworldscriptgen additem french cfg helloworldscriptgen define french \\",
    "salut le monde cfg helloworldscriptgen additem german cfg helloworldscriptgen define german \\",
    "hallo welt    # attach the helloworld configurators   # themselves attach helloworld named english attach helloworld named french attach helloworld named german    # enable helloworld to delegate script   # generation to scriptgen .",
    "( this also   # sets correct dependencies . )",
    "cfg helloworldscriptgen register helloworld          # route the metadata to correct   # configurators cfg helloworld named english define \\",
    "hellomessage : : helloworldscriptgen : english cfg helloworld named french define \\",
    "hellomessage : : helloworldscriptgen : french cfg helloworld named german define \\   hellomessage : : helloworldscriptgen : german    # fork the resulting jobs in background # set it to get executables list every time # `` runjob '' is executed .",
    "attach fork cfg fork define scriptgenname \\",
    "helloworldscriptgen cfg fork oncall runjob do \\        define executablelist : : construct ....    upon invocation of the framework , this will result in the sequence of framework calls shows in table [ tb : framework ] and will result in the output    .... hello world salut le monde hallo welt ....",
    "mcrunjob has been successfully used in both the dzero and cms experiments to model hep workflows for monte carlo productions both on local controlled farms resources and in grid environments . in both experiments",
    ", there is a desire to see how far we can extend mcrunjob into the realm of interactive analysis ; the extension to batch analysis should be straightforward . more immediately",
    ", full expression support will be added to the macro language .",
    "a common project at fermilab between uscms and dzero is also being started to address common goals and support issues .",
    "there are many exciting directions being explored . in the context of dzero ,",
    "runtime mcrunjob is being explored as an answer to the need for monitoring jobs on the farms .",
    "the declarative specifications of jobs are converted to xml and stored in a local xml database , and the mcrunjob created job is instrumented to update this database .",
    "furthermore , the extension of the rudimentary ontologies as described above presents an interesting research problem as the environments ( as defined above ) become large .",
    "also , how the workflow description plus and annotations from the environment informs the provenance of a particular derived data product is an open question .",
    "finally , as the grid itself adopts a more web services oriented model of operation , it may become important to include extensions to proposed standards such as web services flow language ( wsfl ) .",
    "the authors wish to thank the members of the dzero and cms experiments who have provided many insights ( and bug reports ) over the years ; especially boaz klima , kors bos , willem van leeuwen , lee lueking , and the sam team at dzero ; and tony wildish , veronique lefebure , and julia andreeva at cms ; and jaideep srivastava and praveen venkata of the university of minnesota , peter couvares , alan desmet , and miron livny of the university of wisconsin , and richard cavanaugh and adam arbree of the university of florida , and muhammad anzar afaq of fermilab for helpful discussions ."
  ],
  "abstract_text": [
    "<S> mcrunjob is a powerful grid workflow manager used to manage the generation of large numbers of production processing jobs in high energy physics . in use at both the dzero and cms experiments , mcrunjob has been used to manage large monte carlo production processing since 1999 and is being extended to uses in regular production processing for analysis and reconstruction . </S>",
    "<S> described at chep 2001 , mcrunjob converts core metadata into jobs submittable in a variety of environments . </S>",
    "<S> the powerful core metadata description language includes methods for converting the metadata into persistent forms , job descriptions , multi - step workflows , and data provenance information . </S>",
    "<S> the language features allow for structure in the metadata by including full expressions , namespaces , functional dependencies , site specific parameters in a grid environment , and ontological definitions . </S>",
    "<S> it also has simple control structures for parallelization of large jobs . </S>",
    "<S> mcrunjob features a modular design which allows for easy expansion to new job description languages or new application level tasks . </S>"
  ]
}