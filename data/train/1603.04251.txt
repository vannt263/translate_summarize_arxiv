{
  "article_text": [
    "as we will be talking about cancellations , the conventions for the vertices of the ` sm ` are very important .",
    "so we will collect here all the necessary couplings for our purposes .",
    "we will also discuss the polarization vectors of the gauge bosons , particularly the longitudinal polarization vector and the implications of unitarity on the growth of the amplitudes with @xmath3 .",
    "[ cols= \" < , < \" , ]     we see that for @xmath4 gev the cancellation has to be achieved better than one part in @xmath5 . for numerical calculations in ` double precision ` in ` c ` or ` fortran ` this is a problem .",
    "how come that we could achieve this precision without resorting to ` quadrupole precision ` ? .",
    "the key to the answer lies in the fact that our formula for the total cross section already has the bad behaviour cancelled _ before _ we insert it into the ` fortran ` program .",
    "this is achieved with ` mathematica ` .",
    "one could think that this makes ` mathematica ` a better choice to make the calculation of @xmath6 .",
    "however ` mathematica ` is quite slow when compared with , for instance , ` form ` . for this problem in an ` intel core-2 ` at 2.56 mhz , it takes close to 350 s. the same problem with ` form ` takes less than 7 s , a factor of 50!. for larger problems , one has to use ` form ` .",
    "the problem with ` form ` is that has poor capabilities for simplifying expressions .",
    "so with ` form ` we can get ( in 7 s ) a ` fortran ` output that is the _ sum _ of the all the contributions to @xmath6 without great simplification .",
    "if we use this output we get the situation in the right panel of fig .",
    "[ fig : wwxs - highenergy-2 ] .",
    "the precision problems appear exactly where they should , at 1 part in @xmath7 .",
    "but we can get the best of both programs , we can use ` form ` to evaluate the traces and input it into ` mathematica ` to simplify the expressions and make a ` fortran ` output . in this way we can get the same result as with ` mathematica ` with a total time of around 20 s instead of 350 s !",
    "the whole process can be automatized  @xcite .",
    "we have discussed the importance of the higgs boson in making the ` sm ` consistent .",
    "we have used symbolic calculations with the package ` feyncalc ` for ` mathematica ` .",
    "the programs can be found at the web page in ref.@xcite .",
    "this text started as a set of notes that i have prepared for the idpasc schools at udine ( 2012 ) and braga ( 2014)@xcite . in the end i wrote the notes and put them in my web page on calculational methods in quantum field theory  @xcite .",
    "since then , several people asked me where they were published .",
    "as the material is generally known ( at least the conclusions ) never crossed my mind to publish it as a regular article . however , hoping that the details can be useful to a wider audience , i decided now to put them on the arxiv .    1    c.  quigg , ( addison - wesley , new york , 1983 )",
    ".    j.  c. romo , ( ist , 2016 ) , available online at http://porthos.ist.utl.pt/ftp/textos/itc.pdf .",
    "j.  c. romao , http://porthos.ist.utl.pt/ctqft/ .",
    "we show here the code for the package ` feyncalc ` that was used in section  [ sec : nunuwlwl ] .",
    "( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * program nunuwlwl.m * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * this program evaluates the amplitudes and cross section for the process    nu + nubar - > w^+_l + w^-_l    author : jorge c. romo email : jorge.romao@ist.utl.pt * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * program nunuwlwl.m * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) remove[\"global  * \" ]    dm[mu _ ] : = diracmatrix[mu ] dm[5 ] : = diracmatrix[5 ] ds[p _ ] : = diracslash[p ] mt[mu _ , nu _ ] : = metrictensor[mu , nu ] fv[p _ , mu _ ] : = fourvector[p , mu ] epsilon[a _ , b _ , c _ , d _ ] : = levicivita[a , b , c , d ] id[n _ ] : = identitymatrix[n ] sp[p _ , q _ ] : = scalarproduct[p , q ] li[mu _ ] : = lorentzindex[mu ] prop[p _ , m _ ] : = ds[p ] + m    pvl[q_,mu_]:= fourvector[q , mu ]    v[a_,b_,mu_,p_,k_,q_]:=mt[a , b ] fv[p - k , mu ] + mt[b , mu ] fv[k - q , a ] + mt[mu , a ] fv[q - p , b ] pl = dm[7 ] pr = dm[6 ]    ( * functions * ) takelimit = function[exp , aux1=exp /.",
    "highenergy ; aux2= aux1 /.",
    "x->1/z ; aux3=normal[series[aux2,z,0,0 ] ] ; aux4=expand[aux3 /.",
    "z->1/x ] ]    coefa = function[exp , coefficient[takelimit[exp],x,2 ] ] coefb = function[exp , coefficient[takelimit[exp],x,1 ] ] coefc = function[exp , coefficient[takelimit[exp],x,0 ] ]    writemandel = function[exp , tmpaux1 = exp /.",
    "onshell ; tmpaux2=simplify[tmpaux1 /.ct ] ; simplify[tmpaux2 /.",
    "beta->sqrt[1 - 4 mw^2/s ] ] ] ;    writetex = function[exp , tmpaux1 = writemandel[exp ] ; tmpaux2=texform[tmpaux1 ] ]    ( * incoming : p1=nu , p2=nubar outgoing : q1=w+ , q2=w- * )    onshell1=sp[p1,p1]->0,sp[p2,p2]->0,sp[q1,q1]->mw^2,sp[q2,q2]->mw^2 onshell2=sp[q1,q1]->0,sp[q2,q2]->0 onshell3=sp[q1,p1]->s/4/mw ( beta - cteta),sp[q1,p2]->s/4/mw ( beta + cteta ) , sp[q1,q2]->s/2/mw beta , sp[q2,p1]->s/4/mw ( beta + cteta ) , sp[q2,p2]->s/4/mw ( beta - cteta),sp[q2,q1]->s/2/mw beta onshell4=sp[q1,q1]->-1,sp[q2,q2]->-1 onshell5=sp[q1,q2]->s/4/mw^2 ( beta^2 + 1 ) onshell = flatten[onshell1,onshell2,onshell3,onshell4,onshell5 ]    ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) mandel = sp[p1,p2]- > s/2,sp[q1,q2]- > ( s -2 mw^2)/2 , sp[p1,q1]- > ( mw^2 -t)/2 , sp[p2,q2]- > ( mw^2-t)/2 , sp[p1,q2]- > ( s+t- mw^2)/2,sp[p2,q1]- > ( s+t- mw^2)/2    highenergy = s->4 mw^2 x , t- > mw^2 ( 1 - 2 x ( 1- sqrt[(1 -1/x ) ] cteta)),beta->sqrt[1 - 1/x ] weakangle = sw^2->1 -cw^2    ct = part[solve[t = = mw^2 - s/2*(1 - beta*cteta ) , cteta ] , 1 ]    ampsz= - 1/2 pvl[q1,mu ] pvl[q2,nu ] spinor[-p2 ] .",
    "spinor[p1 ] v[mu , nu , b ,- q1,-q2,q1+q2 ] ( -mt[a , b ] + fv[p1+p2,a ] fv[p1+p2,b]/mw^2)/(s - mw^2/cw^2 )    msz = simplify[diracsimplify[contract[ampsz ] /.",
    "onshell ] /.",
    "mandel ]    ampneu= - 1/2 spinor[-p2 ] .",
    "prop[p1-q1,0 ] .",
    "pl . spinor[p1 ] pvl[q1,mu ] pvl[q2,nu ] 1/t    mtneu= simplify[diracsimplify[contract[ampneu ] /.",
    "onshell ] /.",
    "mandel ]    diracsub1=diracgamma[momentum[q1]]->1/mw diracgamma[momentum[q1 ] ] , diracgamma[momentum[q2]]->1/mw diracgamma[momentum[q2 ] ] ;    diracsub2=spinor[-momentum[p2 ] , 0 , 1 ] .",
    "( diracgamma[momentum[q1]]/mw ) .",
    "diracgamma[7 ] .",
    "spinor[momentum[p1 ] , 0 , 1]- > 1/mw spinor[-momentum[p2 ] , 0 , 1 ] . diracgamma[momentum[q1 ] ] .",
    "diracgamma[7 ] .",
    "spinor[momentum[p1 ] , 0 , 1],spinor[-momentum[p2 ] , 0 , 1 ] .",
    "( diracgamma[momentum[q2]]/mw ) .",
    "diracgamma[7 ] .",
    "spinor[momentum[p1 ] , 0 , 1]- > 1/mw spinor[-momentum[p2 ] , 0 , 1 ] . diracgamma[momentum[q2 ] ] .",
    "diracgamma[7 ] .",
    "spinor[momentum[p1 ] , 0 , 1 ] ;    diracsub3=diracgamma[momentum[q2]]->diracgamma[momentum[p1+p2-q1 ] ]    mszaux1= msz /.",
    "diracsub1 mszaux2= simplify[mszaux1 /.",
    "diracsub2 ] mszaux3= mszaux2 /.",
    "highenergy mszaux4= mszaux3 /.",
    "x->1/z mszaux5= normal[series[mszaux4,z,0,1 ] ]    mtneuaux1 = diracsimplify[mtneu /.",
    "diracsub1 ] mtneuaux2 = mtneuaux1 /.",
    "onshell mtneuaux3 = mtneuaux2 /.",
    "highenergy mtneuaux4 = mtneuaux3 /.",
    "x->1/z mtneuaux5 = normal[series[mtneuaux4,z,0,1 ] ]    mtotal= simplify[mszaux5 + mtneuaux5 ]    mhighenergy:= simplify[diracsimplify[mtotal /.",
    "diracsub3 ] /.",
    "z->1/x ]    print[``1 ) high energy behaviour of the amplitudes : x = s/(4 mw^2 ) , curlyphi](-p2).(gamma]centerdot]q1).gamma]^7.curlyphi](p1 ) goes like s '' ] print[``mhighenergy = ' ' , mhighenergy ]    ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) ( * cross section * ) print[``2 ) exact amplitudes squared : '' ]    line1= ds[p2 ] .",
    "ds[p1-q1 ] .",
    "ds[p1-q1 ] .",
    "pl pvl[q1,mu ] pvl[q1,mup ] pvl[q2,nu ] pvl[q2,nup ]    cst1 = g^4/4/t^2 ans1= cst1 contract[tr[line1 ] ] /.",
    "onshell msqt= simplify[ans1 /.",
    "mandel ]    print[``|m_t|^2 = ' ' , msqt /.",
    "beta - > sqrt[1 - 4 mw^2/s ] // simplify ]    line2= ds[p2 ] .",
    "pl v[mu , nu , a ,-",
    "q1,-q2,p1+p2 ] v[mup , nup , b ,- q1,-q2,p1+p2 ] pvl[q1,mu ] pvl[q1,mup ] pvl[q2,nu ] pvl[q2,nup ]    cst2= g^4/4/(s - mz^2)^2 ans2= cst2 contract[tr[line2 ] ] /.",
    "onshell msqs= simplify[ans2 /.",
    "mandel ]    print[``|m_s|^2 = ' ' , msqs /.",
    "beta - > sqrt[1 - 4 mw^2/s ] // simplify ]    subeps = eps[momentum[a_],momentum[b_],momentum[c_],momentum[d_]]->0    line12=ds[p2 ] .",
    "( ds[p1]-ds[q1 ] ) .",
    "pl . ds[p1 ] .",
    "pl pvl[q1,mu ] pvl[q1,mup ] pvl[q2,nu ] pvl[q2,nup ] v[mup , nup , a ,- q1,-q2,p1+p2 ]    line21=ds[p2 ] .",
    "( ds[p1]-ds[q1 ] ) .",
    "pl pvl[q1,mu ] pvl[q1,mup ] pvl[q2,nu ] pvl[q2,nup ] v[mup , nup , a ,- q1,-q2,p1+p2 ]    cst12= -g^4/4/t/(s - mz^2 ) ans12=cst12 contract[tr[line12]+tr[line21 ] ] /.",
    "onshell ans12= simplify[ans12 /.",
    "mandel ] msqstts= simplify[ans12 /.",
    "subeps ] print[``m_s m_t^ * + m_s^ * m_t = ' ' , msqstts /.",
    "beta - > sqrt[1 - 4 mw^2/s ] // simplify ]    msqtotal = simplify[msqt+msqs+msqstts ] ;    ( * high energy limit * ) print[``3 ) high energy limit of amplitudes squared : '' ]    msqthel = takelimit[msqt ] /.",
    "cteta^2 g^4 x^2 - > g^4 x^2 ( 1 - steta^2 ) , cteta^2 g^4 x - > g^4 x ( 1 - steta^2 ) // simplify //",
    "expand print[``|m_t|^2 = ' ' , msqthel ]    msqshel = takelimit[msqs ] /.",
    "cteta^2 g^4 x^2 - > g^4 x^2 ( 1 - steta^2 ) , cteta^2 g^4 x - > g^4 x ( 1 - steta^2 ) // simplify // expand print[``|m_s|^2 = ' ' , msqshel ]    msqsttshel = takelimit[msqstts ] /.",
    "cteta^2 g^4 x^2 - > g^4 x^2 ( 1 - steta^2 ) , cteta^2 g^4 x - > g^4 x ( 1 - steta^2 ) // simplify //",
    "expand print[``2 re(m_s m_t^ * ) = ' ' , msqsttshel ]    msqtotalhel = msqthel + msqshel + msqsttshel msqtotalhel = msqtotalhel /.",
    "print[``|m_total|^2 = ' ' , msqtotalhel ]    ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) xs=1 if[xs==1 , stmp = openwrite[``anstotal.f'',formattype - > fortranform ] ; write[stmp , msqtotal /.",
    "g^4->32 mw^4 gf^2 ] ; close[stmp ] ; stmp = openwrite[``ansneu.f'',formattype - > fortranform ] ; write[stmp , msqt /.",
    "g^4->32 mw^4 gf^2 ] ; close[stmp ] ; stmp = openwrite[``ansz.f'',formattype - > fortranform ] ; write[stmp , msqs /.",
    "g^4->32 mw^4 gf^2 ] ; close[stmp ] ; stmp = openwrite[``ansneuz.f'',formattype - > fortranform ] ; write[stmp , msqstts /.",
    "g^4->32 mw^4 gf^2 ] ; close[stmp],print [ `` ' ' ] ] ; ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )      we show here the code for the package ` feyncalc ` that was used in section  [ sec : wlwlwlwl ] .",
    "( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * program wlwlwlwl.m * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * this program evaluates the amplitudes and cross section for the process * * * * w^-_l + w^+_l - > w^+_l + w^-_l * * * * author : jorge c. romo * * email : jorge.romao@ist.utl.pt * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) remove[\"global  * \" ]    dm[mu _ ] : = diracmatrix[mu ] dm[5 ] : = diracmatrix[5 ] ds[p _ ] : = diracslash[p ] mt[mu _ , nu _ ] : = metrictensor[mu , nu ] fv[p _ , mu _ ] : = fourvector[p , mu ] epsilon[a _ , b _ , c _ , d _ ] : = levicivita[a , b , c , d ] id[n _ ] : = identitymatrix[n ] sp[p _ , q _ ] : = scalarproduct[p , q ] li[mu _ ] : = lorentzindex[mu ] prop[p _ , m _ ] : = ds[p ] + m    pvl[q_,mu_]:= fourvector[q , mu ] v[a_,b_,mu_,p_,k_,q_]:=mt[a , b ] fv[p - k , mu ] + mt[b , mu ] fv[k - q , a ] + mt[mu , a ] fv[q - p , b ]    pl:=(1 - dm[5])/2 pr:=(1 + dm[5])/2    ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )    ( * incoming : p1=w- , p2=w+ outgoing : q1=w- , q2=w+ * )    ( * definitions * ) os1=sp[p1,p1]->mw^2,sp[p2,p2]->mw^2,sp[q1,q1]->mw^2,sp[q2,q2]->mw^2 os2=sp[p1,p1]->0,sp[p2,p2]->0,sp[q1,q1]->0,sp[q2,q2]->0 os3=sp[p1,p2]->s/2/mw beta , sp[p1,q1]->s/4/mw beta ( 1-cteta ) os4=sp[p1,q2]->s/4/mw beta ( 1+cteta),sp[p2,p1]->s/2/mw beta os5=sp[p2,q1]->s/4/mw beta ( 1+cteta),sp[p2,q2]->s/4/mw beta ( 1-cteta ) os6=sp[q1,p1]->s/4/mw beta ( 1-cteta),sp[q1,p2]->s/4/mw beta ( 1+cteta ) os7=sp[q1,q2]->s/2/mw beta , sp[q2,p1]->s/4/mw beta ( 1+cteta ) os8=sp[q2,p2]->s/4/mw beta ( 1-cteta),sp[q2,q1]->s/2/mw beta os9=sp[p1,p1]->-1,sp[p2,p2]->-1,sp[q1,q1]->-1,sp[q2,q2]->-1 os10=sp[p1,p2]->s/4/mw^2 ( beta^2 + 1),sp[p1,q1]->s/4/mw^2 ( beta^2 -cteta ) os11=sp[p1,q2]->s/4/mw^2 ( beta^2 + cteta ) , sp[p2,q1]->s/4/mw^2 ( beta^2+cteta ) os12=sp[p2,q2]->s/4/mw^2 ( beta^2 -cteta ) , sp[q1,q2]->s/4/mw^2 ( beta^2 + 1 ) onshell = flatten[os1,os2,os3,os4,os5,os6,os7,os8,os9,os10,os11,os12 ]    m1=sp[p1,p2]- > ( s -2 mw^2)/2,sp[q1,q2]- > ( s -2 mw^2)/2 , sp[p1,q1]- > ( 2 mw^2-t)/2 m2=sp[p2,q2]- > ( 2 mw^2-t)/2 , sp[p1,q2]- > ( s+t-2 mw^2)/2,sp[p2,q1]- > ( s+t-2 mw^2)/2 mandel = flatten[m1,m2 ]    highenergy = s->4 mw^2 x , t->2 mw^2 ( 1 - x ( 1- ( 1 -1/x ) cteta)),beta->sqrt[1 - 1/x ] weakangle = sw->sqrt[1 -cw^2 ] ct = part[solve[t = = 2 mw^2 - s/2 ( 1 - beta^2 cteta ) , cteta ] , 1 ]    ( * functions * ) takelimit = function[exp , aux1=exp /.",
    "highenergy ; aux2= aux1 /.",
    "x->1/z ; aux3=normal[series[aux2,z,0,0 ] ] ; aux4=expand[aux3 /.",
    "z->1/x ] ]    coefa = function[exp , coefficient[takelimit[exp],x,2 ] ] coefb = function[exp , coefficient[takelimit[exp],x,1 ] ] coefc = function[exp , coefficient[takelimit[exp],x,0 ] ]    writemandel = function[exp , tmpaux1 = exp /.",
    "onshell ; tmpaux2 = simplify[tmpaux1 ] ; tmpaux3 = simplify[tmpaux2 /.",
    "ct ] ; tmpaux4=simplify[tmpaux3 /.",
    "beta->sqrt[1 - 4 mw^2/s ] ] ]    writetex = function[exp , tmpaux1 = writemandel[exp ] ; tmpaux2=texform[tmpaux1 ] ]    ( * s - channel gamma * ) ampsg= sw^2 pvl[p1,a ] pvl[p2,b ] pvl[q1,c ] pvl[q2,d ] mt[mu , nu ] v[a , b , mu , p1,p2,-p1-p2 ] v[d , c , nu ,-",
    "q2,-q1,p1+p2 ] /s    msg = simplify[simplify[contract[ampsg ] /.",
    "onshell ] /.",
    "mandel ] msg = simplify[msg /.",
    "weakangle ] msga:=coefa[msg ] msgb:=coefb[msg ] msgc:=coefc[msg ]    ( * s - channel z * ) ampsz= cw^2 pvl[p1,a ] pvl[p2,b ] pvl[q1,c ] pvl[q2,d ] v[a , b , mu , p1,p2,-p1-p2 ] v[d , c , nu ,- q2,-q1,p1+p2 ] ( mt[mu , nu ] -fv[p1+p2,mu ] fv[p1+p2,nu]/mw^2/cw^2)/(s -mw^2/cw^2 )    msz = simplify[simplify[contract[ampsz ] /.",
    "onshell ] /.",
    "mandel ] msz = simplify[msz /.",
    "weakangle ] msza:=coefa[msz ] mszb:=coefb[msz ] mszc:=coefc[msz ] * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )    ( * 4 boson interaction * ) amp4v = pvl[p1,a ] pvl[p2,b ] pvl[q1,c ] pvl[q2,d ] ( 2 mt[a , d ] mt[b , c ] - mt[a , b ] mt[d , c ] - mt[a , c ] mt[d , b ] )    m4v = simplify[simplify[contract[amp4v ] /.",
    "onshell ] /.",
    "mandel ] m4v = simplify[m4v /.",
    "weakangle ] m4va:=coefa[m4v ] m4vb:=coefb[m4v ] m4vc:=coefc[m4v ]    ( * t- channel gamma * ) amptg = sw^2 pvl[p1,a ] pvl[p2,b ] pvl[q1,c ] pvl[q2,d ] mt[mu , nu ] v[a , c , mu , p1,-q1,q1-p1 ] v[d , b , nu ,-",
    "q2,p2,q2-p2 ] / t    mtg = simplify[simplify[contract[amptg ] /.",
    "onshell ] /.",
    "mandel ] mtg = simplify[mtg /.",
    "weakangle ] mtga:=coefa[mtg ] mtgb:=coefb[mtg ] mtgc:=coefc[mtg ]    ( * t - channel z * ) amptz = cw^2 pvl[p1,a ] pvl[p2,b ] pvl[q1,c ] pvl[q2,d ] v[a , c , mu , p1,-q1,q1-p1 ] v[d , b , nu ,- q2,p2,q2-p2 ] ( mt[mu , nu ] - fv[p1-q1,mu ] fv[p1-q1,nu]/mw^2/cw^2)/(t -mw^2/cw^2 )    mtz = simplify[simplify[contract[amptz ] /.",
    "onshell ] /.",
    "mandel ] mtz = simplify[mtz /.",
    "weakangle ] mtza:=coefa[mtz ] mtzb:=coefb[mtz ] mtzc:=coefc[mtz ]    ( * s - channel higgs * ) ampsh = - mw^2 pvl[p1,a ] pvl[p2,b ] pvl[q1,c ] pvl[q2,d ] mt[a , b ] mt[c , d ] /(s - mh^2 )    msh = simplify[simplify[contract[ampsh ] /.",
    "onshell ] /.",
    "mandel ] msh = simplify[msh /.",
    "weakangle ] msha:=coefa[msh ] mshb:=coefb[msh ] mshc:=coefc[msh ]    ( * t - channel higgs * ) ampth = - mw^2 pvl[p1,a ] pvl[p2,b ] pvl[q1,c ] pvl[q2,d ] mt[a , c ] mt[b , d ] /(t - mh^2 )    mth = simplify[simplify[contract[ampth ] /.",
    "onshell ] /.",
    "mandel ] mth = simplify[mth /.",
    "weakangle ] mtha:=coefa[mth ] mthb:=coefb[mth ] mthc:=coefc[mth ]    testa:=simplify[msga+msza+mtga+mtza+m4va+msha+mtha /.",
    "weakangle ] testb:=simplify[msgb+mszb+mtgb+mtzb+m4vb+mshb+mthb /.",
    "weakangle ] * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )    ( * output fortran * ) xs=1 if[xs==1 , stmp = openwrite[``msg.f'',formattype - > fortranform ] ; write[stmp , g^2 msg /.",
    "g^2->8 mw^2 gf / sqrt[2 ] ] ; close[stmp ] ; stmp = openwrite[``msz.f'',formattype - > fortranform ] ; write[stmp , g^2 msz /.",
    "g^2->8 mw^2 gf / sqrt[2 ] ] ; close[stmp ] ; stmp = openwrite[``mtg.f'',formattype - > fortranform ] ; write[stmp , g^2 mtg /.",
    "g^2->8 mw^2 gf / sqrt[2 ] ] ; close[stmp ] ; stmp = openwrite[``mtz.f'',formattype - > fortranform ] ; write[stmp , g^2 mtz /.",
    "g^2->8 mw^2 gf / sqrt[2 ] ] ; close[stmp ] ; stmp = openwrite[``m4v.f'',formattype - > fortranform ] ; write[stmp , g^2 m4v /.",
    "g^2->8 mw^2 gf / sqrt[2 ] ] ; close[stmp ] ; stmp = openwrite[``msh.f'',formattype - > fortranform ] ; write[stmp , g^2 msh /.",
    "g^2->8 mw^2 gf / sqrt[2 ] ] ; close[stmp ] ; stmp = openwrite[``mth.f'',formattype - > fortranform ] ; write[stmp , g^2 mth /.",
    "g^2->8 mw^2 gf / sqrt[2 ] ] ; close[stmp ] ; , print [ `` ' ' ] ] ; ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )      we show here the code for the package ` feyncalc ` that was used in section  [ sec : eewlwl ] .",
    "( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * program eewlwl.m * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * this program evaluates the amplitudes and cross section for the process * * * * e^- + e^+ - > w^+_l + w^-_l * * * * author : jorge c. romo * * email : jorge.romao@ist.utl.pt * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) remove[\"global  * \" ]    ( * definitions * ) xs=0 dm[mu _ ] : = diracmatrix[mu ] dm[5 ] : = diracmatrix[5 ] ds[p _ ] : = diracslash[p ] mt[mu _ , nu _ ] : = metrictensor[mu , nu ] fv[p _ , mu _ ] : = fourvector[p , mu ] epsilon[a _ , b _ , c _ , d _ ] : = levicivita[a , b , c , d ] id[n _ ] : = identitymatrix[n ] sp[p _ , q _ ] : = pair[momentum[p ] , momentum[q ] ] li[mu _ ] : = lorentzindex[mu ] prop[p _ , m _ ] : = ds[p ] + m    pv[p_,mu_]:= polarizationvector[p , mu ] v[a_,b_,mu_,p_,k_,q_]:=mt[a , b ] fv[p - k , mu ] + mt[b , mu ] fv[k - q , a ] + mt[mu , a ] fv[q - p , b ]    ( * couplings * ) pl = dm[7 ] pr = dm[6 ]    gr = sw^2 gl=-1/2+sw^2    ( * incoming : p1=e- , p2=e+ outgoing : q1=w- , q2=w+ * ) ( * kinematics * ) vp1=sqrt[s]/2,0,0,betae sqrt[s]/2 vp2=sqrt[s]/2,0,0,-betae sqrt[s]/2 vq1=sqrt[s]/2,sqrt[s]/2 beta steta,0,sqrt[s]/2 beta cteta vq2=sqrt[s]/2,-sqrt[s]/2 beta steta,0,-sqrt[s]/2 beta cteta vq1l = sqrt[s]/2/mw beta , sqrt[s]/2/mw steta,0,sqrt[s]/2/mw cteta vq2l = sqrt[s]/2/mw beta ,-",
    "vq1p=0,cteta / sqrt[2 ] , i / sqrt[2 ] , -steta / sqrt[2 ] vq1m=0,cteta / sqrt[2 ] , -i / sqrt[2 ] , -steta / sqrt[2 ] vq2p=0,-cteta / sqrt[2 ] , i / sqrt[2 ] , steta / sqrt[2 ] vq2m=0,-cteta / sqrt[2 ] , -i / sqrt[2 ] , steta / sqrt[2 ] vq1cl = vq1l vq2cl = vq2l vq1cp=0,cteta / sqrt[2 ] , -i / sqrt[2 ] , -steta / sqrt[2 ] vq1cm=0,cteta / sqrt[2 ] , i / sqrt[2 ] , -steta / sqrt[2 ] vq2cp=0,-cteta / sqrt[2],-i / sqrt[2 ] , steta / sqrt[2 ] vq2cm=0,-cteta / sqrt[2 ] , i / sqrt[2 ] , steta / sqrt[2 ]    geteps = function[a , b , c , d , mat = a , b , c , d ; det[mat ] ] getdot = function[a , b , a[[1]]*b[[1]]-a[[2]]*b[[2]]-a[[3]]*b[[3]]-a[[4]]*b[[4 ] ] ]    vlist = p1,p2,q1,q2,q1l , q2l , q1p , q1m , q2p , q2m , q1cl , q2cl , q1cp , q1cm , q2cp , q2 cm fvlist = vp1,vp2,vq1,vq2,vq1l , vq2l , vq1p , vq1m , vq2p , vq2m , vq1cl , vq2cl , vq1cp , vq1cm , vq2cp , vq2 cm m2list = me^2,me^2,mw^2,mw^2,-1,-1,0,0,0,0,-1,-1,0,0,0,0 onshell = flatten[table[if[i==j , pair[momentum[vlist[[i]]],momentum[vlist[[j]]]]->m2list[[i]],pair[momentum[vlist[[i]]],momentum[vlist[[j]]]]->getdot[fvlist[[i]],fvlist[[j]]]],,j , i,16 ] ] ; onshell = simplify[onshell /.",
    "steta^2->1-cteta^2,beta^2->1 - 4 mw^2/s ] ;    q1=polarization[q1 ] ; q2=polarization[q2 ] ; q1c = momentum[polarization[q1 , -i ] ] ; q2c = momentum[polarization[q2 , -i ] ] ;    vlist = p1,p2,q1,q2,q1,q1c , q2,q2c vlistll = p1,p2,q1,q2,q1l , q1cl , q2l , q2cl vlistlp = p1,p2,q1,q2,q1l , q1cl , q2p , q2cp vlistlm = p1,p2,q1,q2,q1l , q1cl , q2m , q2 cm vlistpl = p1,p2,q1,q2,q1p , q1cp , q2l , q2cl vlistml = p1,p2,q1,q2,q1m , q1cm , q2l , q2cl vlistpp = p1,p2,q1,q2,q1p , q1cp , q2p , q2cp vlistpm = p1,p2,q1,q2,q1p , q1cp , q2m , q2 cm vlistmp = p1,p2,q1,q2,q1m , q1cm , q2p , q2cp vlistmm = p1,p2,q1,q2,q1m , q1cm , q2m , q2 cm    m2list = me^2,me^2,mw^2,mw^2 ms1=flatten[table[sp[vlist[[i]],vlist[[i]]]->m2list[[i]],i,1,4 ] ] ms2=flatten[table[sp[vlist[[i]],vlist[[j]]]- > getdot[fvlist[[i]],fvlist[[j]]],i,1,4,j , i+1,4 ] ] mshell = ms1 ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )    polll = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistll[[i]],vlistll[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; polll = deletecases[deletecases[polll,0->0],-1->-1 ] ; pollp = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistlp[[i]],vlistlp[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; pollp = deletecases[deletecases[pollp,0->0],-1->-1 ] ; pollm = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistlm[[i]],vlistlm[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; pollm = deletecases[deletecases[pollm,0->0],-1->-1 ] ; polpl = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistpl[[i]],vlistpl[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; polpl = deletecases[deletecases[polpl,0->0],-1->-1 ] ; polml = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistml[[i]],vlistml[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; polml = deletecases[deletecases[polml,0->0],-1->-1 ] ; polpp = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistpp[[i]],vlistpp[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; polpp = deletecases[deletecases[polpp,0->0],-1->-1 ] ; polpm = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistpm[[i]],vlistpm[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; polpm = deletecases[deletecases[polpm,0->0],-1->-1 ] ; polmp = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistmp[[i]],vlistmp[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; polmp = deletecases[deletecases[polmp,0->0],-1->-1 ] ; polmm = flatten[mshell , table[sp[vlist[[i]],vlist[[j]]]- > ( sp[vlistmm[[i]],vlistmm[[j ] ] ] /.",
    "onshell),i,1,8,j , i+1,8 ] ] ; polmm = deletecases[deletecases[polmm,0->0],-1->-1 ] ;    fvlistll = vp1,vp2,vq1,vq2,vq1l , vq1cl , vq2l , vq2cl fvlistlp = vp1,vp2,vq1,vq2,vq1l , vq1cl , vq2p , vq2cp fvlistlm = vp1,vp2,vq1,vq2,vq1l , vq1cl , vq2m , vq2 cm fvlistpl = vp1,vp2,vq1,vq2,vq1p , vq1cp , vq2l , vq2cl fvlistml = vp1,vp2,vq1,vq2,vq1m , vq1cm , vq2l , vq2cl fvlistpp = vp1,vp2,vq1,vq2,vq1p , vq1cp , vq2p , vq2cp fvlistpm = vp1,vp2,vq1,vq2,vq1p , vq1cp , vq2m , vq2 cm fvlistmp = vp1,vp2,vq1,vq2,vq1m , vq1cm , vq2p , vq2cp fvlistmm = vp1,vp2,vq1,vq2,vq1m , vq1cm , vq2m , vq2 cm    subepsll = deletecases[flatten[table[if[i !",
    "= j & & i !",
    "= k & & i ! = m & & j !",
    "= k & & j ! = m & & k ! = m , eps[momentum[vlist[[i ] ] ] , momentum[vlist[[j ] ] ] , momentum[vlist[[k ] ] ] , momentum[vlist[[m ] ] ] ] - > ( geteps[fvlistll[[i ] ] , fvlistll[[j ] ] , fvlistll[[k ] ] , fvlistll[[m ] ] ] /.",
    "onshell),1 ] , i , 1 , 8 , , k , 1 , 8 , m , 1 , 8]],_integer ] ;    subepslp = deletecases[flatten[table[if[i ! = j & & i !",
    "= k & & i ! = m & & j !",
    "= k & & j !",
    "= m & & k ! = m , eps[momentum[vlist[[i ] ] ] , momentum[vlist[[j ] ] ] , momentum[vlist[[k ] ] ] , momentum[vlist[[m ] ] ] ] - > ( geteps[fvlistlp[[i ] ] , fvlistlp[[j ] ] , fvlistlp[[k ] ] , fvlistlp[[m ] ] ] /.",
    "onshell),1 ] , i , 1 , 8 , , k , 1 , 8 , m , 1 , 8]],_integer ] ;    subepslm = deletecases[flatten[table[if[i ! = j & & i !",
    "= k & & i ! = m & & j !",
    "= k & & j ! = m & & k ! = m , eps[momentum[vlist[[i ] ] ] , momentum[vlist[[j ] ] ] , momentum[vlist[[k ] ] ] , momentum[vlist[[m ] ] ] ] - > ( geteps[fvlistlm[[i ] ] , fvlistlm[[j ] ] , fvlistlm[[k ] ] , fvlistlm[[m ] ] ] /.",
    "onshell),1 ] , i , 1 , 8 , , k , 1 , 8 , m , 1 , 8]],_integer ] ;    subepspl = deletecases[flatten[table[if[i ! = j & & i !",
    "= k & & i ! = m & & j !",
    "= k & & j ! = m & & k ! = m , eps[momentum[vlist[[i ] ] ] , momentum[vlist[[j ] ] ] , momentum[vlist[[k ] ] ] , momentum[vlist[[m ] ] ] ] - > ( geteps[fvlistpl[[i ] ] , fvlistpl[[j ] ] , fvlistpl[[k ] ] , fvlistpl[[m ] ] ] /.",
    "onshell),1 ] , i , 1 , 8 , , k , 1 , 8 , m , 1 , 8]],_integer ] ; ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )    subepsml = deletecases[flatten[table[if[i ! = j & & i !",
    "= k & & i ! = m & & j !",
    "= k & & j ! = m & & k ! = m , eps[momentum[vlist[[i ] ] ] , momentum[vlist[[j ] ] ] , momentum[vlist[[k ] ] ] , momentum[vlist[[m ] ] ] ] - > ( geteps[fvlistml[[i ] ] , fvlistml[[j ] ] , fvlistml[[k ] ] , fvlistml[[m ] ] ] /.",
    "onshell),1 ] , i , 1 , 8 , , k , 1 , 8 , m , 1 , 8]],_integer ] ;",
    "subepsmp = deletecases[flatten[table[if[i ! = j & & i !",
    "= k & & i ! = m & & j !",
    "= k & & j ! = m & & k ! = m , eps[momentum[vlist[[i ] ] ] , momentum[vlist[[j ] ] ] , momentum[vlist[[k ] ] ] , momentum[vlist[[m ] ] ] ] - > ( geteps[fvlistmp[[i ] ] , fvlistmp[[j ] ] , fvlistmp[[k ] ] , fvlistmp[[m ] ] ] /.",
    "onshell),1 ] , i , 1 , 8 , , k , 1 , 8 , m , 1 , 8]],_integer ] ;    subepsmm = deletecases[flatten[table[if[i ! = j & & i !",
    "= k & & i ! = m & & j !",
    "= k & & j ! = m & & k ! = m , eps[momentum[vlist[[i ] ] ] , momentum[vlist[[j ] ] ] , momentum[vlist[[k ] ] ] , momentum[vlist[[m ] ] ] ] - > ( geteps[fvlistmm[[i ] ] , fvlistmm[[j ] ] , fvlistmm[[k ] ] , fvlistmm[[m ] ] ] /.",
    "onshell),1 ] , i , 1 , 8 , , k , 1 , 8 , m , 1 , 8]],_integer ] ;    pol = polll , pollm , pollp , polml , polpl , polpp , polpm , polmp , polmm subeps = subepsll , subepslm , subepslp , subepsml , subepspl , subepspp , subepspm , subepsmp , subepsmm simpbetas = beta - > sqrt[1 - 4 mw^2/s ] , betae - > sqrt[1 - 4 me^2/s ] weakangle = sw->sqrt[1 -cw^2 ]                    writemandel = function[exp , tmpaux1 = exp /.",
    "onshell ; tmpaux2 = simplify[tmpaux1 /.",
    "pol ] ; tmpaux3 = simplify[tmpaux2 /.",
    "ct ] ; tmpaux4=simplify[tmpaux3 /.",
    "beta->sqrt[1 - 4 mw^2/s ] ] ] writetex = function[exp , tmpaux1 = writemandel[exp ] ; tmpaux2=texform[tmpaux1 ] ]      linez = spinor[-p2,me ] .",
    "( gl pl + gr pr ) .",
    "spinor[p1,me ] propz = ( -mt[a , b ] + cw^2 fv[p1+p2,a ] fv[p1+p2,b]/mw^2)/(s - mw^2/cw^2 ) ampsz= - pv[q1,mu ] pv[q2,nu ] linez v[nu , mu , b ,-",
    "q2,-q1,p1+p2 ] propz msz = diracsimplify[contract[ampsz ] /.",
    "onshell ]        ( * high energy limit * ) mtneuaux= diracsimplify[mtneu /.",
    "diracsub1 ] mtneuaux= diracsimplify[mtneuaux /.",
    "diracsub2 ] mtneuaux= diracsimplify[mtneuaux /.",
    "poltype ] mtneuaux= diracsimplify[mtneuaux /.",
    "diracsub1 ] mtneuhel = takelimit[mtneuaux,0 ]            ( * cross section * ) gammanu = - 1/(2 t ) dm[nu ] .",
    "prop[p1-q1,0 ] .",
    "pl gammaz1 = - dm[b ] .",
    "( gl pl + gr pr ) v[nu , mu , b ,- q2,-q1,p1+p2 ] gammaz2 = ( -me ) ( gl pl + gr pr ) v[nu , mu , b",
    ",- q2,-q1,p1+p2 ] cw^2 fv[p1+p2,b]/mw^2 gammaz3 = ( me ) ( gl pr + gr pl ) v[nu , mu , b ,- q2,-q1,p1+p2 ] cw^2 fv[p1+p2,b]/mw^2 gammaz = - 1/(s - mw^2/cw^2 ) ( gammaz1+gammaz2+gammaz3 ) gammag = sw^2/s dm[a ] .",
    "( pl + pr ) v[nu , mu , b ,- q2,-q1,p1+p2 ] ( -mt[a , b ] ) gammah = me/2 ( pl+pr ) mt[mu , nu]/(s - mh^2 ) gammabarnu = - 1/(2 t ) dm[mup ] .",
    "prop[p1-q1,0 ] .",
    "pl gammabarz1 = - dm[bp ] .",
    "( gl pl + gr pr ) v[nup , mup , bp ,- q2,-q1,p1+p2 ] gammabarz2 = ( -me ) ( gl pl + gr pr ) v[nup , mup , bp ,- q2,-q1,p1+p2 ] cw^2 fv[p1+p2,bp]/mw^2 gammabarz3 = ( me ) ( gl pr + gr pl ) v[nup , mup , bp ,- q2,-q1,p1+p2 ] cw^2 fv[p1+p2,bp]/mw^2 gammabarz = - 1/(s - mw^2/cw^2 ) ( gammabarz1+gammabarz2+gammabarz3 ) gammabarg = sw^2/s dm[ap ] .",
    "( pl + pr ) v[nup , mup , bp ,- q2,-q1,p1+p2 ] ( -mt[ap , bp ] ) gammabarh = me/2 ( pl+pr ) mt[mup , nup]/(s - mh^2 )    ( * neutrino + gamma + z cross section * ) linenunu = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarnu msquarenunu = contract[tr[linenunu ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqnunu = table[(msquarenunu /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqnunu = ( msqnunu /.",
    "clear[msquarenunu ]    linenug = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarg msquarenug = contract[tr[linenug ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqnug = table[(msquarenug /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqnug = ( msqnug /.",
    "clear[msquarenug ]    linegnu = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarnu msquaregnu : = contract[tr[linegnu ] pv[q1,mu ] pv[q2,nu]conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqgnuaux:=table[(msquaregnu /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; testgnunug = function[,msq = msquaregnu ; msqgnuaux = table[(msq/. subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; clear[msq , msquaregnu ] ; msqgnu = ( msqgnuaux /.",
    "beta2 //simplify ; table[msqnug[[i]]-msqgnu[[i]],i,1,9 ] ]    linenuz = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarz msquarenuz = contract[tr[linenuz ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqnuz = table[(msquarenuz /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqnuz = ( msqnuz /.",
    "clear[msquarenuz ]    lineznu = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarnu msquareznu : = contract[tr[lineznu ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqznuaux:=table[(msquareznu /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; testznunuz = function[,msq = msquareznu ; msqznuaux = table[(msq /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; clear[msq , msquareznu ] ; msqznu = ( msqznuaux /.",
    "beta2 //simplify ; table[msqnuz[[i]]-msqznu[[i]],i,1,9 ] ]    linegg = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarg msquaregg = contract[tr[linegg ] pv[q1,mu ] pv[q2,nu]conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqgg = table[(msquaregg /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqgg = ( msqgg /.",
    "beta2 //simplify clear[msquaregg ] ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )    linezz = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarz msquarezz = contract[tr[linezz ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqzz = table[(msquarezz /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify ,",
    "i,1,9 ] msqzz = ( msqzz /.",
    "clear[msquarezz ]    linegz = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarz msquaregz = contract[tr[linegz ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqgz = table[(msquaregz /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqgz = ( msqgz /.",
    "clear[msquaregz ]    linezg = prop[p2,-me ] .",
    "prop[p1,me ] . gammabarg msquarezg:=",
    "contract[tr[linezg ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqzgaux:=table[(msquarezg /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; testzggz = function[,msq = msquarezg ; clear[msquarezg ] ; msqzgaux = table[(msq /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; clear[msq , msquarezg ] ; msqzg = ( msqzgaux /.",
    "beta2 //simplify ; table[msqgz[[i]]-msqzg[[i]],i,1,9 ] ]    linehh = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarh msquarehh = contract[tr[linehh ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqhh = table[(msquarehh /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqhh = ( msqhh /.",
    "clear[msquarehh ]    linenuh = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarh msquarenuh = contract[tr[linenuh ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqnuh = table[(msquarenuh /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqnuh = ( msqnuh /.",
    "clear[msquarenuh ]    linehnu = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarnu msquarehnu:= contract[tr[linehnu ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ]   conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqhnuaux:=table[(msquarehnu /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] //",
    "simplify , i,1,9 ] ; testhnunuh = function[,msq = msquarehnu ; clear[msquarehnu ] ; msqhnuaux = table[(msq /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; clear[msq , msquarehnu ] ; msqhnu = ( msqhnuaux /.",
    "beta2 //simplify ; table[msqnuh[[i]]-msqhnu[[i]],i,1,9 ] ]    linegh = prop[p2,-me ] . gammag .",
    "prop[p1,me ] .",
    "gammabarh msquaregh = contract[tr[linegh ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqgh = table[(msquaregh /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqgh = ( msqgh /.",
    "clear[msquaregh ]    linehg = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "contract[tr[linehg ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqhgaux:=table[(msquarehg /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] //",
    "simplify , i,1,9 ] ; testhggh = function[,msq = msquarehg ; clear[msquarehg ] ; msqhgaux = table[(msq /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; clear[msq , msquarehg ] ; msqhg = ( msqhgaux /.",
    "beta2 //simplify ; table[msqgh[[i]]-msqhg[[i]],i,1,9 ] ] ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )    linezh = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "gammabarh msquarezh = contract[tr[linezh ] pv[q1,mu ] pv[q2,nu ] conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqzh = table[(msquarezh /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] msqzh = ( msqzh /.",
    "clear[msquarezh ]    linehz = prop[p2,-me ] .",
    "prop[p1,me ] .",
    "contract[tr[linehz ] pv[q1,mu ] pv[q2,nu]conjugate[pv[q1,mup ] ] conjugate[pv[q2,nup ] ] ] /.",
    "mshell ; msqhzaux:=table[(msquarehz /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; testhzzh = function[,msq = msquarehz ; clear[msquarehz ] ; msqhzaux = table[(msq /.",
    "subeps[[i ] ] ) /.",
    "pol[[i ] ] // simplify , i,1,9 ] ; clear[msq , msquarehz ] ; msqhz = ( msqhzaux /.",
    "beta2 //simplify ; table[msqzh[[i]]-msqhz[[i]],i,1,9 ] ]        msqnugzll = msqnunu[[1 ] ] + msqgg[[1 ] ] + msqzz[[1 ] ] + 2*msqnug[[1 ] ] + 2*msqnuz[[1 ] ] + 2*msqgz[[1 ] ] ; msqnugzll = simplify[msqnugzll*g^4/4 /.",
    "g^4->32 mw^4 gf^2 ; msqnugzll = simplify[msqnugzll /.",
    "simpbetas ] ;          if[xs==1 , setoptions[@xmath11 ;     stmp = openwrite[\"ansnu.f\",formattype - > fortranform ] ;     write[stmp,\"msqnu       =       \" , msqnull ] ;     close[stmp ] ;     stmp = openwrite[\"ansnugz.f\",formattype - > fortranform ] ;     write[stmp,\"msqnugz       =       \" , msqnugzll ] ;     close[stmp ] ;     stmp = openwrite[\"ansll.f\",formattype - > fortranform ] ;     write[stmp,\"msqll       =       \" , msqll ] ;     close[stmp ] ;     stmp = openwrite[\"ansh.f\",formattype - > fortranform ] ;     write[stmp,\"msqh       =       \" , msqhll ] ;     close[stmp ] , print [ \" \" ] ] ;    ( * for the transverse polarization put me=0 , betae->1 * ) ( * recall pol={polll , pollm , pollp , polml , polpl , polpp , polpm , polmp , polmm } * ) ( *                1      2      3      4      5      6      7      8      9     * )       \\begin{center } \\begin{boxedverbatim } msqtl = sum[msqnunu[[i ] ] + msqgg[[i ] ] + msqzz[[i ] ] + \\",
    "2*msqnug[[i ] ] + 2*msqnuz[[i ] ] + 2*msqgz[[i ] ] + \\            msqhh[[i ] ] + 2*msqnuh[[i ] ] + 2*msqgh[[i ] ] + 2*msqzh[[i ] ] \\            /.",
    "{ me->0,betae->1 } //simplify,{i,2,5 } ] ;    msqtl = simplify[msqtl /.",
    "steta->sqrt[1-cteta^2 ] ] ; msqtl = simplify[msqtl /.",
    "ct ] ; msqtl = simplify[msqtl /.",
    "{ me->0,betae->1 } ] ; msqtl = simplify[msqtl*g^4/4 /.",
    "weakangle ] /.",
    "g^4->32 mw^4 gf^2 ; msqtl = simplify[msqtl /.",
    "beta2 ] ;    msqtt = sum[msqnunu[[i ] ] + msqgg[[i ] ] + msqzz[[i ] ] + \\            2*msqnug[[i ] ] + 2*msqnuz[[i ] ] + 2*msqgz[[i ] ] + \\            msqhh[[i ] ] + 2*msqnuh[[i ] ] + 2*msqgh[[i ] ] + 2*msqzh[[i ] ] \\            /.",
    "{ me->0,betae->1 } //simplify,{i,6,9 } ] ;    msqtt = simplify[msqtt /.",
    "steta->sqrt[1-cteta^2 ] ] ; msqtt = simplify[msqtt /.",
    "ct ] ; msqtt = simplify[msqtt /.",
    "{ me->0,betae->1 } ] ; msqtt = simplify[msqtt*g^4/4 /.",
    "weakangle ] /.",
    "g^4->32 mw^4 gf^2 msqtt = simplify[msqtt /.",
    "beta2 ] ;        xs=1 if[xs==1 ,     setoptions[$]output , pagewidth - > 70 ] ; stmp = openwrite[``anstl.f'',formattype - > fortranform ] ; write[stmp,``msqtl = '' , msqtl ] ; close[stmp ] ; stmp = openwrite[``anstt.f'',formattype - > fortranform ] ; write[stmp,``msqtt = '' , msqtt ] ; close[stmp ] ; stmp = openwrite[``anstotal.f'',formattype - > fortranform ] ; write[stmp,``msqtotal = '' , msqtotal ] ; close[stmp ] , print [ `` ' ' ] ] ; ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )"
  ],
  "abstract_text": [
    "<S> we review the role of the higgs boson in preserving unitarity of the scattering amplitudes in the standard model ( ` sm ` ) . </S>",
    "<S> we will look at the processes @xmath0 , @xmath1 and @xmath2 for longitudinally polarized gauge bosons . </S>",
    "<S> special emphasis will be put in using algebraic methods to evaluate the amplitudes and cross sections . </S>",
    "<S> this note is based on lectures given at the idpasc schools at udine ( 2012 ) and braga ( 2014 ) . </S>"
  ]
}