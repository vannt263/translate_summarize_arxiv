{
  "article_text": [
    "quantum information protocols and quantum algorithms are usually designed for a group of two level quantum systems ( qubits ) . with @xmath2 qubits",
    ", we can access hilbert spaces of dimension @xmath3 .",
    "however , in some occasions it is a good idea to look into systems with an arbitrary dimension @xmath0 which is not necessarily a power of two .",
    "quantum information units with @xmath0 possible states are called qudits .",
    "the basic quantum operations performed by the quantum gates of the standard toolbox are not always easy to generalize to the qudit setting . in many cases ,",
    "there is more than one possible generalization , each preserving some of the features of the original qubit gate .",
    "we present an implementation for a swap gate which interchanges two qudits . for two @xmath0-dimensional states , @xmath4 and @xmath5",
    ", the swap gate will act as : @xmath6 the gate is composed of three equal controlled gates .",
    "an elegant way to implement the swap operation for qubits is the cnot circuit shown in figure [ cnotswap ] .",
    "the cnot , or cx , gate is a controlled not operation .",
    "it has a control qubit , represented as a black dot , and a target qubit , represented with the xor symbol @xmath7 .",
    "if the control qubit is in state @xmath8 , the target qubit changes its value from @xmath9 to @xmath8 or from @xmath8 to @xmath9 .",
    "the quantum gate operation can be described as @xmath10 the xor operation is both modulo 2 addition and subtraction .    ]",
    "this swap implementation concatenates three cnot gates to perform a classical xor swapping operation in three steps @xmath11 @xmath12 @xmath13 here , @xmath14 is a cnot gate controlled by qubit @xmath15 and with qubit @xmath16 as target .",
    "the evolution we have described is valid for input states @xmath17 and @xmath18 which are @xmath9 or @xmath8 , but general qubit states @xmath4 and @xmath5 can be written as a superposition of these @xmath9 and @xmath8 states .",
    "all the terms in the superposition are swapped and so are the input general states .",
    "the resulting swap circuit works for arbitrary @xmath19 inputs .",
    "an input @xmath20 will also be swapped . due to this symmetry of operation ,",
    "the alternative `` reflected '' circuit of figure [ altcnotswap ] is also a swap gate .    ]",
    "there are many qudit generalizations of the cnot operation .",
    "some of them help to build partial swapping circuits @xcite , but , in general , they do not offer a complete swap gate unless combined with additional gates @xcite .",
    "we propose a new qudit swap gate with a symmetric configuration that generalizes the circuits of figures [ cnotswap ] and [ altcnotswap ] .",
    "the basic building block is what we call the @xmath21 gate , an alternative generalization of the cnot gate which is particularly useful for the swap operation .",
    "the @xmath21 gate and the resulting swap circuit will be compared to other generalizations in section [ discussion ] .",
    "we define a gate @xmath21 acting on qudits @xmath17 and @xmath18 from the basis @xmath22 so that @xmath23 @xmath24 denotes a state @xmath25 in the range @xmath26 with @xmath27 .",
    "all the addition and subtraction operations in this paper are considered to be modulo @xmath0 .    when @xmath28 , the @xmath21 gate performs a cnot operation .      ]",
    "the swap gate of figure [ cnotswap ] can be extended to qudit inputs using three @xmath21 gates ( figure [ cxswap ] ) . if @xmath29 is a @xmath21 gate where the control is qudit @xmath15 and the target qudit @xmath16 , the evolution through the qudit swap gate is @xmath30 @xmath31 @xmath32 the final state is a swapped version of the inputs . any possible",
    "qudit from the input pair is a superposition of states from @xmath22 .",
    "therefore , the gate acts as a swap for arbitrary input qudits",
    ".    we can also give an alternative circuit inverting the order of the inputs . as the gate is valid for arbitrary inputs",
    ", the upside - down circuit of figure [ altcxswap ] must also perform the swap operation .    ]",
    "the @xmath21 gate can be decomposed into three elementary qudit gates , two quantum fourier transform operations , qft , and the qudit generalization of the @xmath1 gate , @xmath33 .",
    "the quantum fourier transform is the quantum version of the discrete fourier transform .",
    "it takes any qudit state @xmath17 into a uniform superposition @xmath34    the @xmath33 gate is a selective phase shift .",
    "a control qudit determines the phase shift of the target .",
    "its effect on two input qudits is @xmath35 we also consider its inverse @xmath36    figure [ cx ] shows the decomposition of the @xmath21 gate in terms of these primitives .",
    "we apply a qft on the target ( operation @xmath37 ) , then apply a @xmath33 gate and perform a second @xmath37 .",
    "gate.[cx ] ]    the total evolution is the desired @xmath21 operation , as @xmath38 the last step comes from noticing the geometric sum @xmath39    we can see the @xmath21 gate is its own inverse . if we apply twice the operation @xmath40 , we get @xmath41 all quantum gates are unitary operations . if @xmath21 is its own inverse , then @xmath42 .",
    "the decomposition @xmath43 of figure [ cxinv ] is also a valid implementation of @xmath21 .",
    "gate.[cxinv ] ]    now the elementary gates that give @xmath21 are two inverse quantum fourier transforms ( @xmath44 ) and a @xmath45 gate in the middle .",
    "we have presented an implementation of the swap gate valid for states of any arbitrary dimension @xmath0 .",
    "the gate preserves some nice properties of the cnot decomposition of the qubit swap .",
    "previous qudit swap gate proposals use a different generalization of the cnot gate .",
    "the most extended alternative is the @xmath46 gate that transforms states according to @xmath47 with a modulo @xmath0 addition . for qubits ,",
    "modulo 2 addition and subtraction are the same operation . for qudits ,",
    "we need a different operation for the inverse .",
    "the gate @xmath48 is given by @xmath49 with a modular subtraction . combining @xmath46 and @xmath48 gates",
    ", we can give partial swap circuits if we know one of the input states .",
    "for instance , we can take an input @xmath50 into @xmath51 @xcite .",
    "however , these gates are not enough to complete a qudit swap gate for any value of @xmath0 @xcite .",
    "the resulting circuits need to be completed with the operation @xmath52 which offers the modulo @xmath0 complement of the input .",
    "the three gates , @xmath46 , @xmath48 and @xmath53 , appear in different implementations of the qudit swap gate @xcite . figure [ asymswaps ] shows some possible circuits .",
    "these gates can be directly adapted to produce a quantum swap gate for continuous variables @xcite .",
    "we can similarly give a continuous @xmath21 gate .    the qudit swap circuit presented in this paper",
    "offers a new , simple alternative with only one type of gate .",
    "the @xmath21 gate we have described is its own inverse and can be decomposed into standard qudit gates ."
  ],
  "abstract_text": [
    "<S> we present a quantum swap gate valid for quantum systems of an arbitrary dimension . </S>",
    "<S> the gate generalizes the cnot implementation of the swap gate for qubits and keeps its most important properties , like symmetry and simplicity . </S>",
    "<S> we only use three copies of the same controlled qudit gate . </S>",
    "<S> this gate can be built with two standard higher - dimensional operations , the quantum fourier transform and the @xmath0-dimensional version of the @xmath1 gate . </S>"
  ]
}