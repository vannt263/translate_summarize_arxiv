{
  "article_text": [
    "the development of jetset @xcite , containing several of the components that later were merged with pythia @xcite , was begun in 1978 .",
    "thus the current pythia  6 generator @xcite is the product of almost thirty years of development , and some of the code has not been touched in a very long time .",
    "new options have been added , but old ones seldom removed .",
    "the basic structure has been expanded in different directions , well beyond what it was once intended for , making it rather cumbersome by now .    from the onset",
    ", all code has been written in fortran  77 .",
    "for the lhc era , the experimental community has made the decision to move heavy computing completely to c++ .",
    "fortran support may be poor to non - existing , and young experimenters will not be conversant in fortran any longer .",
    "therefore it is logical also to migrate pythia to c++ , and in the process clean up and modernise various aspects .",
    "a first attempt in this direction was the pythia  7 project @xcite .",
    "however , priority came to be given to the development of a generic administrative structure , renamed thepeg @xcite and adopted by the herwig++ @xcite group , while the physics parts of pythia  7 remained underdeveloped .",
    "pythia  8 is a clean new start , to provide a successor to pythia  6 .",
    "it is a completely standalone generator , thus not relying on thepeg or any other external library .",
    "some optional hooks for links to other programs are provided , however .",
    "the version presented here is the first operational one in the pythia  8 series . as such",
    "it is not yet tested and tuned enough to have reached the same level of maturity as pythia  6 , so we expect the two to coexist for a while .",
    "it is only by an increasing use of the new version that it will mature , however , so we encourage a critical try - out , and look forward to feedback .",
    "the intention is to release a version in time for comparisons with first lhc data .",
    "thus some areas , like @xmath0 and @xmath1 physics , are not yet addressed .",
    "further , some intended processes remain to be implemented . actually , with the rise of automatic matrix - element code generation and phase - space sampling , input of process - level events via the les houches accord ( lha ) @xcite and with les houches event files ( lhef ) @xcite reduces the need to have an extensive process library inside pythia itself .",
    "thus emphasis is more on providing a good description of subsequent steps of the story , involving elements such as initial- and final - state parton showers , multiple parton ",
    "parton interactions , string fragmentation , and decays .",
    "the current article provides an introduction to pythia  8 .",
    "the programming aspects are covered in more detail in a set of interlinked html ( or alternatively php ) pages that comes in the same package as the program files , see below .",
    "much of the physics aspects are unchanged relative to the pythia  6.4 manual @xcite , and so we refer to it and to other physics articles for that .",
    "instead what we here give is an overview for potential users who already have some experience with event generators and want to understand how to get going with pythia  8 .",
    "section [ sec : physics ] contains an ultra - brief summary of the physics of pythia  8 , with particular emphasis on aspects that are different relative to pythia  6 .",
    "the program structure ( including flow , files , documentation , and a few important warnings ) is described in section [ sec : structure ] ; summaries of the main user methods , including the event record and particle classes , in section [ sec : main ] .",
    "section [ sec : databases ] is concerned with the databases of flags , modes , parameters , processes , and particle data which exist in pythia  8 .",
    "those who wish to link to external programs , e.g.  to gain access to external parton distributions , standard input / output formats , and much more , will find the relevant information in section [ sec : external ] .",
    "a brief how - to on getting going is then included in section [ sec : how - to ] .",
    "section [ sec : outlook ] rounds off with an outlook .",
    "this article is not intended to provide a complete description of the physics content . for this",
    "we primarily refer to the pythia  6 manual @xcite and associated literature .",
    "we would like to draw attention to some key points of difference , however .",
    "further details are available on the html / php pages in the program distribution .",
    "some new physics aspects will eventually be covered in separate articles .",
    "the physics components are controlled by many parameters .",
    "these have been assigned sensible default values , based on previous experience with pythia  6 and some first studies with the new code .",
    "we look forward to more extensive tunes by the experimental community , however .",
    "currently the program only works with @xmath2 , @xmath3 , @xmath4 and @xmath5 incoming beams .",
    "in particular , there is no provision for @xmath6 collisions or for incoming photon beams , neither on their own nor as flux around an electron .",
    "the list of processes currently implemented is summarised further down ; it corresponds to most of the ones in pythia  6 , with the exception of the supersymmetry and technicolor sectors , which are yet to come .",
    "the cross - section expressions should be identical , but default scale choices have been changed , so that cross sections may be somewhat different for that reason .    the default parton distribution remains cteq 5l , but ones found in the lhapdf library @xcite can easily be linked .",
    "it is now possible to use separate pdf sets for the hard interaction , on one hand , and for the subsequent showers and multiple interactions , on the other .",
    "the initial- and final - state algorithms are based on the new @xmath7-ordered evolution introduced in pythia  6.3 @xcite , while the older mass - ordered ones have not been implemented .",
    "it is now additionally possible to have a branching of a photon to a fermion pair as part of the final - state evolution .    already in pythia  6.3 the initial - state evolution and",
    "the multiple interactions were interleaved into one common decreasing @xmath7 sequence .",
    "now also the final - state evolution is interleaved with the other two . in this context",
    ", some of that final - state radiation gets to be associated with dipoles stretched between a final - state parton and the `` hole '' left by an initial - state one , which therefore now can take a recoil .",
    "the initial - state - radiation algorithm remains unchanged in this respect , with recoils always taken by the hard scattering subsystem as a whole .",
    "the multiple - interactions machinery as such contains the full functionality introduced in pythia  6.3 @xcite .",
    "rescaled parton densities are defined after the first interaction , that take into account the nature of the previous partons extracted .",
    "currently there is only one scenario for colour - reconnection in the final state , in which there is a certain probability for the partons of two subscatterings to have their colours interarranged in a way that reduces the total string length .",
    "( this is intermediate in character between the original strategy @xcite and the more recent ones @xcite . )",
    "the description of beam remnants is based on the new framework .",
    "in addition to the standard qcd @xmath8 processes , the possibility of multiple interactions producing prompt photons , charmonia and bottomonia , low - mass drell - yan pairs , and @xmath9-channel @xmath10 exchange is now also included .    for dedicated studies of two low - rate processes in coincidence",
    ", two hard interactions can now be set in the same event .",
    "there are no sudakov factors included for these two interactions , similarly to normal events with one hard interaction .",
    "hadronisation is based solely on the lund string fragmentation framework @xcite ; older alternative descriptions have been left out .",
    "particle data have been updated in agreement with the 2006 pdg tables @xcite .",
    "this also includes a changed content of the scalar meson multiplet .",
    "some updated charm and bottom decay tables have been obtained from the delphi and lhcb collaborations .    the be@xmath11 model for bose ",
    "einstein effects @xcite has been implemented , but is not on by default .",
    "standardised procedures have been introduced to link the program to various external programs for specific tasks , see section [ sec : external ] .",
    "finally , some of the old jet finders and other analysis routines are made available .",
    "also included is a utility to generate , display and save simple one - dimensional histograms .",
    "the physics topics that have to come together in a complete event generator can crudely be subdivided into three stages :    1 .   the generation of a `` process '' that decides the nature of the event . often it would be a `` hard process '' , such as @xmath12 , that is calculated in perturbation theory , but a priori we impose no requirement that a hard scale must be involved .",
    "only a very small set of partons / particles is defined at this level , so only the main aspects of the event structure are covered .",
    "the generation of all subsequent activity on the partonic level , involving initial- and final - state radiation , multiple parton  parton interactions and the structure of beam remnants .",
    "much of the phenomena are under an ( approximate ) perturbative control , but nonperturbative physics aspects are also important . at the end of this step ,",
    "a realistic partonic structure has been obtained , e.g. with broadened jets and an underlying - event activity .",
    "3 .   the hadronisation of this parton configuration , by string fragmentation , followed by the decays of unstable particles .",
    "this part is almost completely nonperturbative , and so requires extensive modelling and tuning or , especially for decays , parametrisations of existing data .",
    "it is only at the end of this step that realistic events are available , as they could be observed by a detector .",
    "this division of tasks is not watertight  parton distributions span and connect the two first steps , to give one example  but it still helps to focus the discussion .",
    "( 430,370)(-215,10 ) ( -215,350)(215,380)0.9 ( 0,365)[]the user ( @xmath13 main program ) ( -215,300)(215,330)0.9 ( 0,315)[]`pythia ` ( -215,250)(-170,280)0.9 ( -192.5,265)[]`info ` ( -130,250)(-20,280)0.9 ( -75,265)[]`event  process ` ( 20,250)(215,280)0.9 ( 105,265)[]`event  event ` ( -215,110)(-85,230)0.9(-215,200)(-85,200 ) ( -150,215)[]`processlevel ` ( -150,185)[]`processcontainer ` ( -150,165)[]`phasespace ` ( -150,145)[]`lhainit , lhaevnt ` ( -150,125)[]`resonancedecays ` ( -65,110)(65,230)0.9(-65,200)(65,200 ) ( 0,215)[]`partonlevel ` ( 0,185)[]`timeshower ` ( 0,165)[]`spaceshower ` ( 0,145)[]`multipleinteractions ` ( 0,125)[]`beamremnants ` ( 85,110)(215,230)0.9(85,200)(215,200 ) ( 150,215)[]`hadronlevel ` ( 150,185)[]`stringfragmentation ` ( 150,165)[]`ministringfrag  ` ( 150,145)[]`particledecays ` ( 150,125)[]`boseeinstein ` ( -130,60)(-20,90)0.9 ( -75,75)[]`beamparticle ` ( 20,60)(200,90)0.9 ( 110,75)[]`sigmaprocess , sigmatotal ` ( -215,10)(215,40)0.9 ( 0,25)[]`vec4 , rndm , hist , settings , particledatatable , resonancewidths ,  ` ( 0,350)(0,332 ) ( -150,300)(-150,232 ) ( 0,300)(0,232 ) ( 150,300)(150,280 ) ( 150,280)(150,250)4 ( 150,250)(150,232 ) ( -192.5,230)(-192.5,248 ) ( -192.5,280)(-192.5,300 ) ( -192.5,300)(-192.5,330)4 ( -192.5,330)(-192.5,348 ) ( -107.5,230)(-107.5,248 ) ( -42.5,250)(-42.5,232 ) ( -42.5,280)(-42.5,300 ) ( -42.5,300)(-42.5,330)4 ( -42.5,330)(-42.5,348 ) ( 42.5,230)(42.5,248 ) ( 107.5,250)(107.5,232 ) ( 182.5,230)(182.5,248 ) ( 182.5,280)(182.5,300 ) ( 182.5,300)(182.5,330)4 ( 182.5,330)(182.5,348 ) ( -107.5,100)(-107.5,108 ) ( -107.5,100)(-107.5,92 ) ( -42.5,100)(-42.5,108 ) ( -42.5,100)(-42.5,92 ) ( 42.5,100)(42.5,108 ) ( 42.5,100)(42.5,92 ) ( -160,50)(-160,108 ) ( -160,50)(0,50 ) ( 0,50)(19,59 )    the structure of the pythia  8 generator , as illustrated in fig .",
    "[ fig : generatorstructure ] , is based on this subdivision .",
    "the main class for all user interaction is called ` pythia ` .",
    "it calls on the three classes ` processlevel ` , ` partonlevel ` and ` hadronlevel ` , corresponding to points 1 , 2 and 3 above .",
    "each of these , in their turn , call on further classes that perform the separate kinds of physics tasks .",
    "information is flowing between the different program elements in various ways , the most important being the event record , represented by the ` event ` class . actually , there are two objects of this class , one called ` process ` , that only covers the few partons of the `` hard '' process of point 1 above ( i.e. , containing information corresponding to what might be termed the `` matrix element '' level ) , and another called ` event ` , that covers the full story from the incoming beams to the final hadrons .",
    "a small ` info ` class keeps track of useful one - of - a - kind information , such as kinematical variables of the hard process .",
    "there are also two incoming ` beamparticle`s , that keep track of the partonic content left in the beams after a number of interactions and initial - state radiations , and rescales parton distributions accordingly .",
    "the process library , as well as parametrisations of total , elastic and diffractive cross sections , are used both by the hard - process selection machinery and the multiple - interactions one .",
    "the ` settings ` database keeps track of all integer , double , boolean and string variables that can be changed by the user to steer the performance of pythia , except that ` particledatatable ` is its own separate database .",
    "finally , a number of utilities can be used just about anywhere , for lorentz four - vectors , random numbers , jet finding and simple histograms , and for a number of other `` minor '' tasks .",
    "orthogonally to the subdivision above , there is another , more technical classification , whereby the user interaction with the generator occurs in three phases :    * initialisation , where the tasks to be performed are specified . *",
    "generation of individual events ( the `` event loop '' ) . *",
    "finishing , where final statistics is made available .",
    "again the subdivision ( and orthogonality ) is not strict , with many utilities and tasks stretching across the borders , and with no finishing step required for many aspects .",
    "nevertheless , as a rule , these three phases are represented by different methods inside the class of a specific physics task .",
    "the code is subdivided into a set of files , mainly by physics task .",
    "each file typically contains one main class , but often with a few related helper classes that are not used elsewhere in the program .",
    "normally the files come in pairs .    1 .   a header file , `",
    ".h ` in the ` include ` subdirectory , where the public interface of the class is declared , and inline methods are defined .",
    "2 .   a source code file , ` .cc ` in the ` src ` subdirectory , where the lengthier methods are implemented .    during compilation , related dependency files ,",
    "` .d ` , and compiled code , ` .o ` are created in the ` tmp ` subdirectory .    in part",
    "the ` .xml ` documentation files in the ` xmldoc ` subdirectory have matching names , but the match is broken by the desire to group topics more by user interaction than internal operation .",
    "these files contain information on all settings and particle data , but not in a convenient - to - read format .",
    "instead they are translated into a corresponding set of ` .html ` files in the ` htmldoc ` subdirectory and a set of ` .php ` files in ` phpdoc ` .",
    "the former set can easily be read if you open the ` htmldoc / welcome.html ` file in your favourite web browser , but offers no interactivity .",
    "the latter set must be installed under a webserver ( like a homepage ) to function properly , and then provides a simple graphical user interface if you open the ` phpdoc / welcome.php ` file in a web browser .    for output to the hepmc event record format @xcite , an interface is provided in the `",
    "hepmcinterface ` subdirectory .",
    "there are also interfaces to allow parton distribution functions to be used from the lhapdf library @xcite and hard processes from external programs .",
    "the installation procedure is described in a ` readme ` file ; it involves running a ` configure ` script , whereafter an ordinary ` makefile ` is used .",
    "the former should be invoked with command - line arguments ( or be edited ) to provide the path to the hepmc library if this is going to be used .",
    "compiled libraries are put in the ` lib ` subdirectory .",
    "default is to build archive libraries , but optionally also shared - object ones can be built .",
    "the standard setup is intended for linux systems , but a simplified alternative is provided for windows users .    finally , some examples of main programs , along with input files , or `` cards '' , for them , are found in the ` examples ` subdirectory .",
    "this directory contains its own ` configure ` script and ` makefile ` which will allow you to build executables , see the ` examples / readme ` file . as above ,",
    "command - line arguments or brute - force editing allows you to set the lhapdf and pythia  6.4 paths , if so required .",
    "the executables are placed in the ` bin ` directory , but with links from ` examples ` .      playing with the files in the ` examples ` subdirectory",
    "is encouraged , to familiarise oneself with the program . modifying the ` configure ` files may be required during installation . for the rest",
    ", files should not be modified , at least not without careful consideration of consequences .    in particular , the ` .xml ` files are set read - only , and should not be tampered with .",
    "interspersed in them , there are lines beginning with ` < flag ` , ` < mode ` , ` < parm ` , ` < word ` , ` < particle ` , ` < channel ` , or ` < a ` .",
    "they contain instructions from which ` settings ` and ` particledatatable ` build up their respective databases of user - accessible variables , see further below .",
    "any stupid changes here will cause difficult - to - track errors !",
    "further , sometimes you will see two question marks , `` ? ? '' , in the text or code .",
    "this is for internal usage , to indicate loose ends or preliminary thoughts",
    ". please disregard .",
    "the ` pythia ` class is the main means of communication between the user and the event - generation process .",
    "we here present the key methods for the user to call , ordered by context .",
    "firstly , at the top of the main program , the proper header file must be included : +  ` # include pythia.h ` + to simplify typing , it also makes sense to declare +  ` using namespace pythia8 ; ` + given this , the first step in the main program is to create a generator object , e.g. with +  ` pythia pythia ; ` + in the following we will assume that the ` pythia ` object has been created with this name , but of course you are free to pick another one .",
    "when this object is declared , the ` pythia ` constructor initialises all the default values for the ` settings ` and the ` particledatatable ` data bases .",
    "these data are now present in memory and can be modified in a number of ways before the generator is initialised ( see below ) .",
    "most conveniently , pythia s settings and parameters can be changed by the two methods +  ` pythia.readstring(string ) ; ` + for changing a single variable , and +  ` pythia.readfile(filename ) ; ` + for changing a set of variables , one per line in the input file . the allowed form for a string / line",
    "will be explained as we consider the databases in the next section .",
    "further , methods will be introduced to list all or only the changed settings and particle data .    at this stage",
    "you can also optionally hook up with some external facilities , see section [ sec : external ] .",
    "after this , in the initialisation call all remaining details of the generation are to be specified .",
    "the ` pythia.init ( ... ) ` method allows a few different input formats , so you can pick the one convenient for you : +  ` pythia.init(ida , idb , ea , eb ) ; ` + lets you specify the identities and energies of the two incoming beam particles , with a ( b ) assumed moving in the @xmath14 ( @xmath15 ) direction ; +  ` pythia.init(ida , idb , ecm ) ; ` + is similar , but you specify the cm energy , and you are assumed in the rest frame ; +  ` pythia.init(lhainit * , lhaevnt * ) ; ` + assumes lha initialisation information is available in an ` lhainit ` class object , and that lha event information will be provided by the ` lhaevnt ` class object , see below ; +  `",
    "pythia.init(filename ) ; ` + assumes that the file obeys the lhef standard format and that information can be extracted from it accordingly ; and finally +  ` pythia.init ( ) ; ` + will take its values from the beam specification stored in the ` settings ` database .",
    "it is when the ` init ( ... ) ` call is executed that all the settings values are propagated to the various program elements , and used to precalculate quantities that will be used at later stages of the generation .",
    "further settings changed after the ` init ( ... ) ` call will be ignored ( unless methods are used to force a partial or complete re - initialisation ) . by contrast , the particle properties database is queried all the time , and so a later change would take effect immediately , for better or worse .",
    "the bulk of the code is concerned with the event generation proper . however , all the information on how this should be done has already been specified .",
    "therefore only a command +  ` pythia.next ( ) ; ` + is required to generate the next event .",
    "this method would be located inside an event loop , where a required number of events are to be generated .",
    "the key output of the ` pythia.next ( ) ` command is the event record found in ` pythia.event ` , see below .",
    "a process - level summary of the event is stored in ` pythia.process ` .",
    "when problems are encountered , in ` init ( ... ) ` or ` next ( ) ` , they can be assigned one of three degrees of severity .",
    "abort is the highest . in that case",
    "the call could not complete its tasks , and returns the value ` false ` .",
    "if this happens in ` init ( ... ) ` it is then not possible to generate any events at all . if it happens in ` next ( ) ` only the current event must be skipped . in a few cases",
    "the abort may be predictable and desirable , e.g.  when a file of lha events comes to an end .",
    "errors are less severe , and the program can usually work around them , e.g.  by backing up one step and trying again .",
    "should that not succeed , an abort may result .",
    "warnings are of informative character only , and do not require any corrective actions ( except , in the longer term , to find more reliable algorithms ) .    at the end of the generation process",
    ", you can call +  ` pythia.statistics ( ) ; ` + to get some run statistics , both on cross sections for the subprocesses generated and on the number of aborts , errors and warnings issued .",
    "the ` event ` class for event records is not much more than a wrapper for a vector of ` particle`s .",
    "this vector can expand to fit the event size .",
    "the index operator is overloaded , so that ` event[i ] ` corresponds to the ` i`th particle of an ` event ` object called ` event ` . for instance , given that the pdg identity code @xcite of a particle is provided by the ` i d ( ) ` method , ` event[i].id ( ) ` returns the identity of the ` i`th particle .",
    "line 0 is used to represent the event as a whole , with its total four - momentum and invariant mass , but does not form part of the event history , and only contains redundant information .",
    "when you translate to another event - record format where the first particle is assigned index 1 , such as hepmc , this line should therefore be dropped so as to keep the rest of the indices synchronised .",
    "it is only with lines 1 and 2 , which contain the two incoming beams , that the history tracing begins .",
    "that way unassigned mother and daughter indices can be put 0 without ambiguity .    in this section , first the ` particle ` methods are surveyed , and then the further aspects of the event record .",
    "a ` particle ` corresponds to one entry / slot / line in the event record .",
    "its properties therefore mix ones belonging to a particle - as - such , like its identity code or four - momentum , and ones related to the event - as - a - whole , like which mother it has .",
    "the following properties are stored for each particle , listed by the member functions you can use to extract the information :    * ` i d ( ) ` : the identity of a particle , according to the pdg particle codes . * `",
    "status ( ) ` : status code .",
    "the full set of codes provides information on where and why a given particle was produced .",
    "the key feature is that a particle is assigned a positive status code when it is created , which then is negated if later it branches into other particles .",
    "the mechanism of this branching can be inferred from the status code of the daughters .",
    "thus , at any given stage of the event - generation process , the current final state consists of the particles with positive status code . * ` mother1 ( ) , mother2 ( ) ` : the indices in the event record where the first and last mothers are stored , if any .",
    "a few different cases are possible , to allow for one or many mothers .",
    "the ` motherlist(i ) ` method ( see below ) can return a vector with all the mother indices , based on this info . * ` daughter1 ( ) , daughter2 ( ) ` : the indices in the event record where the first and last daughters are stored , if any .",
    "a few different cases are possible , to allow for one or many daughters .",
    "the ` daughterlist(i ) ` method ( see below ) can return a vector with all the daughter indices , based on this info .",
    "* ` col ( ) , acol ( ) ` : the colour and anticolour tags , lha style . * ` px ( ) , py ( ) , pz ( ) , e ( ) ` : the particle four - momentum components ( in gev , with @xmath16 ) , alternatively extracted as a ` vec4 p ( ) ` . *",
    "` m ( ) ` : the particle mass ( in gev ) . * ` scale ( ) ` : the scale at which a parton was produced ( in gev ) ; model - specific but relevant in the processing of an event . * ` xprod ( ) , yprod ( ) , zprod ( ) , tprod ( ) ` : the production vertex coordinates ( in mm or mm/@xmath17 ) , alternatively extracted as a ` vec4 vprod ( ) ` .",
    "* ` tau ( ) ` : the proper lifetime ( in mm/@xmath17 ) .    the same method names , with a value inserted between the brackets , set these quantities .",
    "in addition , a number of derived quantities can easily be obtained , but can not be set , such as :    * ` isfinal ( ) ` : ` true ` for a remaining particle , i.e. one with positive status code , else ` false ` .",
    "* ` pt ( ) , pt2 ( ) ` : ( squared ) transverse momentum .",
    "* ` mt ( ) , mt2 ( ) ` : ( squared ) transverse mass . * ` pabs ( ) , pabs2 ( ) ` : ( squared ) three - momentum magnitude . * ` theta ( ) , phi ( ) ` : polar and azimuthal angle ( in radians ) . * ` y ( ) , eta ( ) ` : rapidity and pseudorapidity . * ` xdec ( ) , ydec ( ) , zdec ( ) , tdec ( ) ` : the decay vertex coordinates , assuming free - streaming propagation , alternatively extracted as a ` vec4 vdec ( ) ` .    each ` particle ` contains a pointer to the respective ` particledataentry ` object in the particle data tables .",
    "this pointer gives access to properties of the particle species as such .",
    "it is there mainly for convenience , and should be thrown if an event is written to disk , to avoid any problems of object persistency .",
    "this pointer is used by member functions such as :    * ` name ( ) ` : the name of the particle , as a string . * ` spintype ( ) ` : @xmath18 , or 0 where undefined spin . * ` charge ( ) , chargetype ( ) ` : charge , and three times it to make an integer .",
    "* ` ischarged ( ) , isneutral ( ) ` : ` bool`s for charged or not .",
    "* ` coltype ( ) ` : 0 for colour singlets , 1 for triplets , @xmath19 for antitriplets and 2 for octets . * ` m0 ( ) ` : the nominal mass of the particle species .      while the ` particle ` vector is the key component of an ` event ` , a few further methods are available .",
    "the event size can be found with ` size ( ) ` , i.e. valid particles are stored in the range @xmath20`i`@xmath21 ` event.size ( ) ` .",
    "a listing of the whole event is obtained with ` list ( ) ` .",
    "the basic identity , status , mother , daughter , colour , four - momentum and mass data are always given , but optional arguments can be set to provide further information , on the complete lists of mothers and daughters , and on production vertices .",
    "the user would normally be concerned with the ` event ` object that is a public member ` event ` of the ` pythia ` class .",
    "thus ` pythia.event[i].id ( ) ` would be used to return the identity of the ` i`th particle , and ` pythia.event.size ( ) ` to give the size of the event record .",
    "a ` pythia ` object contains a second event record for the hard process alone , similar to the lha process specification , called ` process ` .",
    "this record is used as input for the generation of the complete event .",
    "thus one may e.g. call either ` pythia.process.list ( ) ` or ` pythia.event.list ( ) ` . to distinguish those two rapidly at visual inspection ,",
    "the `` pythia event listing '' header is printed out differently , adding either `` ( hard process ) '' or `` ( complete event ) '' .",
    "there are also a few methods with an individual particle index ` i ` as input , but requiring some search operations in the event record , and therefore not possible to define as methods of the ` particle ` class .",
    "the most important ones are ` motherlist(i ) ` , ` daughterlist(i ) ` and ` sisterlist(i ) ` . these return a ` vector < int > ` containing a list of all the mothers , daughters or sisters of a particle",
    ". this list may be empty or arbitrarily large , and is given in ascending order .",
    "one data member in an event object is used to keep track of the largest ` col ( ) ` or ` acol ( ) ` tag set so far , so that new ones do not clash .",
    "the event record also contains two further sets of vectors .",
    "these are intended for the expert user only , so only a few words on each .",
    "the first is a vector of junctions , i.e.  vertices where three string pieces meet .",
    "this list is often empty or else contains only a very few per event .",
    "the second is a storage area for parton indices , classified by subsystem .",
    "such information is needed to interleave multiple interactions , initial - state showers , final - state showers and beam remnants .",
    "it can also be used in the hadronisation .",
    "a set of one - of - a - kind pieces of event information is stored in the ` info ` object ( an instance of the class ` info ` ) in the ` pythia ` class .",
    "this is mainly intended for processes generated internally , but some of the information is also available for external processes .",
    "you can use ` pythia.info.method ( ) ` to extract e.g.  the following information :    * ` list ( ) ` : list some information on the current event . * ` ecm ( ) , s ( ) ` : the cm energy and its square . * ` name ( ) , code ( ) ` : the name and code of the subprocess . * ` id1 ( ) , id2 ( ) ` : the identities of the two partons coming in to the hard subprocess . * ` x1 ( ) , x2 ( ) ` : @xmath22 fractions of the two partons coming in to the hard subprocess . * ` pdf1 ( ) , pdf2 ( ) , qfac ( ) , q2fac ( ) ` : parton densities @xmath23 evaluated for the two incoming partons , and the associated factorisation scale @xmath24 and its square . * ` mhat ( ) , shat ( ) , that ( ) , uhat ( ) ` : the invariant mass of the hard subprocess and the mandelstam variables for @xmath8 processes . * ` pthat ( ) , thetahat ( ) ` : transverse momentum and polar scattering angle of the hard subprocess for @xmath8 processes . * ` alphas ( ) , alphaem ( ) , qren ( ) , q2ren ( ) ` : @xmath25 and @xmath26 values for the hard process , and the associated renormalisation scale @xmath24 and its square . * ` ntried ( ) , naccepted ( ) , sigmagen ( ) , sigmaerr ( ) ` : the number of trial and accepted events , and the resulting estimated cross section and estimated statistical error , in units of mb , summed over the included processes .    in other classes",
    "there are also methods that can be called to do a sphericity or thrust analysis or search for jets with a clustering or simple cone jet finder .",
    "these take the event record as input .",
    "inevitably one wants to be able to modify the default behaviour of a generator .",
    "currently there are two pythia  8 databases with modifiable values .",
    "one deals with general settings , the other specifically with particle data .",
    "the key method to set a new value is +  ` pythia.readstring(string ) ; ` + the typical form of a string is +  ` variable = value ` + where the equal sign is optional and the variable begins with a letter for settings and a digit for particle data .",
    "a string not beginning with either is considered as a comment and ignored . therefore inserting an initial ! , # , $ , % , or another such character , is a good way to comment out a command . for non - commented strings ,",
    "the match of the name to the database is case - insensitive .",
    "strings that do begin with a letter or digit and still are not recognised cause a warning to be issued , unless a second argument ` false ` is used in the call .",
    "any further text after the value is ignored , so the rest of the string can be used for any comments . for variables with an allowed range , values below the minimum or above the maximum are set at the respective border . for ` bool ` values , the following notation may be used interchangeably : ` true ` = ` on ` = ` yes ` = ` ok ` = 1 .",
    "everything else gives ` false ` ( including but not limited to ` false ` , ` off ` , ` no ` and ` 0 ` ) .",
    "the ` readstring ( ... ) ` method is convenient for changing one or two settings , but becomes cumbersome for more extensive modifications .",
    "in addition , a recompilation and relinking of the main program is necessary for any change of values .",
    "alternatively , the changes can therefore be collected in a file , for historical reasons often called a `` card file '' , where each line is a character string defined in the same manner as above ( without quotation marks ) .",
    "the whole file can then be read and processed with a command +  ` pythia.readfile(filename ) ; ` + as above , comments can be freely interspersed .",
    "we distinguish four kinds of user - modifiable variables , by the way they have to be stored :    1 .   a ` flag ` is an on / off switch , and is stored as a ` bool ` .",
    "2 .   a ` mode ` corresponds to an enumeration of separate options , and is stored as an ` int ` .",
    "3 .   a ` parm `  short for parameter  takes a continuum of values , and is stored as a ` double ` .",
    "a ` word ` is a text string ( with no embedded blanks ) and is stored as as a ` string ` .    collectively the four above kinds of variables are called settings . not surprisingly , the class that stores them is called ` settings ` .    each variable stored in",
    "` settings ` is associated with a few pieces of information .",
    "these are :    * the variable name , of the form ` class : name ` ( or ` file : name ` , or ` task : name ` , usually these agree ) , e.g. ` timeshower : ptmin ` . * the default value , set in the original declaration , and intended to represent a reasonable choice .",
    "this value is not user modifiable . * the current value . during construction of the ` settings ` object",
    ", this value is set equal to the default value .",
    "it can subsequently be modified , e.g.  by the ` pythia.readstring ( ) ` or ` pythia.readfile ( ) ` methods discussed above . during the ` pythia.init ( ) ` initialisation this value will be stored as a local copy in the class(es ) where it is used , and thereby also control the subsequent generation . * an allowed range of values , represented by meaningful minimum and maximum values .",
    "this has no sense for a flag or a word , is usually rather well - defined for a mode , but less so for a parameter .",
    "either of the minimum and maximum may be left free , giving an open - ended range .",
    "often the allowed range exaggerates the uncertainty in our current knowledge , so as not to restrict too much what the user can do .",
    "all the same , this information should not be modified by the user .    technically , the ` settings ` class is implemented with the help of four separate maps , one for each kind of variable , with the name used as key .",
    "the default values are taken from the ` .xml ` files in the ` xmldoc ` subdirectory .",
    "the ` settings ` class is purely static , i.e.  exists only as one global copy , that you can interact with directly by ` settings::command(argument ) ` .",
    "however , a ` settings ` object is a public member of the ` pythia ` class , so an alternative notation would be ` pythia.settings.command(argument ) ` .",
    "as already mentioned , for input the ` pythia.readstring ( ... ) ` method is to be preferred , since it also can handle particle data .",
    "a typical example would be +  ` pythia.readstring(timeshower:ptmin = 1.0 ) ; `    you may obtain a listing of all variables in the database by calling +  ` pythia.settings.listall ( ) ; ` + the listing is strictly alphabetical , which at least means that names in the same area are kept together , but otherwise may not be so well - structured : important and unimportant ones will appear mixed .",
    "a useful alternative is +  ` pythia.settings.listchanged ( ) ; ` + which will only print out a list of those variables that differ from their defaults .",
    "all internal processes available in pythia  8 can be switched on and off via the ordinary settings machinery just discussed , using flags of the generic type ` processgroup : processname ` .",
    "a complete list of processes currently implemented is given in table  [ processes ] .",
    "by default all processes are off .",
    "a whole group can be turned on by a ` processgroup : all = on ` command , then overriding the individual flags .",
    "note that processes in the ` softqcd ` group are of a kind that can not be input via the lha , while essentially all other kinds could .",
    "each process is assigned an integer code .",
    "this code is not used in the internal administration of events ; it is only intended to allow a simpler user separation of different processes .",
    "also the process name is available , as a string .    for many processes it makes sense to apply phase space cuts .",
    "the ones currently available ( in the ` settings ` database ) in particular include    * ` phasespace : mhatmin , phasespace : mhatmax ` : the range of invariant masses of the scattering process . * ` phasespace : pthatmin , phasespace : pthatmax ` : the range of transverse momenta in the rest frame of the process for @xmath8 and @xmath27 processes ( for each of the products ) .",
    "in addition , for any resonance with a breit - wigner mass distribution , the allowed mass range of that particle species is taken into account , both for @xmath28 , @xmath8 and @xmath27 processes , thereby providing a further cut possibility .",
    "note that the ` softqcd ` processes do not use any cuts but generate their respective cross sections in full .",
    "the following particle properties are stored in the ` particledatatable ` class for a given pdg particle identity code ` i d ` , here presented by the method used to access this property :    * ` name(id ) ` : particle and antiparticle names are stored separately , the sign of ` i d ` determines which of the two is returned , with `` void '' used to indicate the absence of an antiparticle . * ` hasanti(id ) ` : ` bool ` whether a distinct antiparticle exists or not . * ` spintype(id ) ` : @xmath18 for particles with defined spin , else 0 . * ` chargetype(id ) ` : three times the charge ( to make it an integer ) ; can also be read as a ` double charge(id ) = chargetype(id)/3 ` . * ` coltype(id ) ` : the colour type , with 0 uncoloured , 1 triplet , @xmath19 antitriplet and 2 octet . * ` m0(id ) ` : the nominal mass @xmath29 ( in gev ) .",
    "* ` mwidth(id ) ` : the width @xmath30 of the breit - wigner mass distribution ( in gev ) . * ` mmin(id ) , mmax(id ) ` : the allowed mass range generated by the breit - wigner , @xmath31 ( in gev ) . * ` tau0(id ) ` : the nominal proper lifetime @xmath32 ( in mm/@xmath17 ) . * ` constituentmass(id ) ` : the constituent mass for a quark , hardcoded as @xmath33 , @xmath34 , @xmath35 and @xmath36 gev , for a diquark the sum of quark constituent masses , and for everything else the same as the ordinary mass . *",
    "` mrun(id , massscale ) ` : the running mass for quarks , else the same as the nominal mass . * ` maydecay(id ) ` : a flag telling whether a particle species may decay or not , offering the main user switch ( whether a given particle of this kind then actually will decay also depends on other flags in the ` particledecays ` class ) .",
    "similar methods can also be used to set most of these properties .",
    "each particle kind in the ` particledatatable ` also has a a vector of ` decaychannel`s associated with it .",
    "the following properties are stored for each decay channel :    * ` onmode ( ) ` : whether a channel is on ( 1 ) or off ( 0 ) , or on only for particles ( 2 ) or antiparticles ( 3 ) . * ` bratio ( ) ` : the branching ratio . * ` memode ( ) ` : the mode of processing this channel , possibly with matrix - element information ; 0 gives isotropic phase space .",
    "* ` multiplicity ( ) ` : the number of decay products in a channel , at most 8 . * ` product(i ) ` : a list of the decay products , 8 products @xmath20`i`@xmath37 , with trailing unused ones set to 0 .",
    "the original particle data and decay table is read in from the ` particledata.xml ` file .",
    "the ` particledatatable ` class is purely static , i.e. exists as one global copy , that you can interact directly with by ` particledatatable::command(argument ) ` .",
    "however , a ` particledata ` object of the ` particledatatable ` class is a public member of the ` pythia ` class , which offers an alternatively notation .",
    "as already mentioned , for input the ` pythia.readstring(string ) ` method is to be preferred , since it also can handle settings .",
    "it is only the form of the ` string ` that needs to be specified slightly differently than for settings , as +  ` id : property = value ` .",
    "+ the ` i d ` part is the standard pdg particle code , i.e.  a number , and ` property ` is one of the ones already described above , with a few minor differences : ` name ` , ` antiname ` , ` spintype ` , ` chargetype ` , ` coltype ` , ` m0 ` , ` mwidth ` , ` mmin ` , ` mmax ` , ` tau0 ` , ` maydecay ` , ` isresonance ` , ` isvisible ` , ` doexternaldecay ` , and ` doforcewidth ` .",
    "as before , several commands can be stored as separate lines in a file , say +  ` 111:name = pizero !",
    "normal notation pi0 ` +  ` 3122:maydecay = false !",
    "lambda0 stable ` +  ` 431:tau0 = 0.15 ! d_s proper lifetime ` + and then be read with ` pythia.readfile(filename ) ` .    for major changes of the properties of a particle , the above one - at - a - time changes can become rather cumbersome .",
    "therefore a few extended input formats are available , where a whole set of properties can be given after the equal sign , separated by blanks and/or by commas .",
    "one line like +  ` id : all = name antiname spintype chargetype coltype m0 mwidth mmin mmax tau0 ` + replaces all the current information on the particle itself , but keeps its decay channels , if any , while using ` new ` instead of ` all ` also removes any previous decay channels .",
    "( the flags ` maydecay ` , ` isresonance ` , ` isvisible ` , ` doexternaldecay ` , and ` doforcewidth ` are in either case reset to their defaults and would have to be changed separately . )    in order to change the decay data , the decay channel number needs to be given right after the particle number , i.e. the command form becomes +  ` id : channel : property = value ` .",
    "+ recognised properties are ` onmode ` , ` bratio ` , ` memode ` and ` products ` , where the latter expects a list of all the decay products , separated by blanks , up until the end of the line , or until a non - number is encountered .",
    "the property ` all ` will replace all the information on the channel , i.e. +  ` id : channel : all = onmode bratio memode products ` + to add a new channel at the end , use +  ` id : addchannel = onmode bratio memode products ` + to remove all existing channels and force decays into one new channel , use +  ` id : onechannel = onmode bratio memode products ` + a first ` onechannel ` command could be followed by several subsequent ` addchannel ` ones , to build up a completely new decay table for an existing particle .",
    "+ it is currently not possible to remove a channel selectively , but setting its branching ratio vanishing is as effective .    often one may want to allow only a specific subset of decay channels for a particle .",
    "this can be achieved e.g.  by a repeated use of ` id : channel : onmode ` commands , but there also is a set of commands that initiates a loop over all decay channels and allows a matching to be carried out .",
    "the ` id : onmode ` command can switch ` on ` or ` off ` all channels .",
    "the ` id : onifany ` and ` id : offifany ` will switch on / off all channels that contain any of the enumerated particles . for instance +  ` 23:onmode = off ` +  ` 23:onifany = 1 2 3 4 5 ` + first switches off all @xmath38 decay modes and then switches back on any that contains one of the five lighter quarks .",
    "other methods are ` id : onifall ` and ` id : offifall ` , and ` id : onifmatch ` and ` id : offifmatch ` , where all the enumerated products must be present for a decay channel to be switched on / off .",
    "the difference is that the former two allow further non - matched particles in a decay channel while the latter two do not .",
    "there are also further methods to switch on channels selectively either for the particle or for the antiparticle .",
    "when a particle is to be decayed , the branching ratios of the allowed channels are always rescaled to unit sum .",
    "there are also methods for by - hand rescaling of branching ratios .",
    "you may obtain a listing of all the particle data by calling +  ` pythia.particledata.listall ( ) ` .",
    "+ the listing is by increasing ` i d ` number . to list only those particles that have been changed , instead use +  ` pythia.particledata.listchanged ( ) ` .",
    "+ to list only one specific particle ` i d ` , use ` list(id ) ` .",
    "it is also possible to ` list ` a ` vector < int > ` of ` i d ` s .",
    "while pythia  8 itself is self - contained and can be run without reference to any external library , often one does want to make use of other programs that are specialised on some aspect of the generation process .",
    "the html / php documentation accompanying the code contains full information on how the different links should be set up . here",
    "the purpose is mainly to point out the possibilities that exist .      the les houches accord for user processes ( lha ) @xcite is the standard way to input parton - level information from a matrix - elements - based generator into pythia .",
    "the conventions for which information should be stored has been defined in a fortran context , as two commonblocks . here a c++ equivalent is defined , as two separate classes .",
    "the ` lhainit ` and ` lhaevnt ` classes are base classes , containing reading and printout methods , plus a pure virtual method ` set ( ) ` each . derived classes have to provide these two virtual methods to do the actual work .",
    "currently the only examples are for reading information at runtime from the respective fortran commonblock or for reading it from a les houches event file ( lhef ) @xcite .",
    "the ` lhainit ` class stores information equivalent to the ` /heprup/ ` commonblock , as required to initialise the event - generation chain .",
    "the ` lhaevnt ` class stores information equivalent to the ` /hepeup/ ` commonblock , as required to hand in the next parton - level configuration for complete event generation .",
    "the ` lhainitfortran ` and ` lhaevntfortran ` are two derived classes , containing ` set ( ) ` members that read the respective lha fortran commonblock for initialisation and event information .",
    "this can be used for a runtime link to a fortran library . as an example",
    ", an interface is provided to the pythia  6.4 process library .",
    "the ` lhainitlhef ` and ` lhaevntlhef ` are two other derived classes , that can read a file with initialisation and event information , assuming that the file has been written in the lhef format .",
    "you do not need to declare these classes yourself , since a shortcut is provided by the ` pythia.init(filename ) ` command .    if you create ` lhainit ` and ` lhaevnt ` objects yourself , pointers to those should be handed in with the ` init ( ... ) ` call , then of the form ` pythia.init(lhainit * , lhaevnt * ) ` .",
    "when you implement new processes via the les houches accord you do all flavour , colour and phase - space selection externally , before your process - level events are input for further processing by pythia .",
    "however , it is also possible to implement a new process in exactly the same way as the internal pythia ones , thus making use of the internal phase - space selection machinery to sample an externally provided cross - section expression .",
    "the matrix - element information has to be put in a new class that derives from one of the existing classes , ` sigma1process ` for @xmath28 processes , ` sigma2process ` for @xmath8 ones , and ` sigma3process ` for @xmath27 ones , which in their turn derive from the ` sigmaprocess ` base class .",
    "note that ` pythia ` is rather good at handling the phase space of @xmath28 and @xmath8 processes , is more primitive for @xmath27 ones and does not at all address higher multiplicities .",
    "this limits the set of processes that you can implement in this framework .",
    "the produced particles may be resonances , however , so it is possible to end up with bigger `` final '' multiplicities through sequential decays , and to include further matrix - element weighting in those decays .    in your new class",
    "you have to implement a number of methods .",
    "chief among them is one to return the matrix - element weight for an already specified kinematics configuration and another one to set up the final - state flavours and colour flow of the process .",
    "further methods exist , some of more informative character , such as providing the name of the process .",
    "should you actually go ahead , it is strongly recommended to shop around for a similar process that has already been implemented , and to use that existing code as a template .",
    "once a class has been written , a pointer of type ` sigmaprocess * ` to a ` new ` instance of your class needs to be created in the main program , and handed in with the ` pythia.setsigmaptr ( ... ) ` method .",
    "from there on the process will be handled on equal footing with internally implemented processes .    if your new process introduces a new particle you have to add it and its decay channels to the particle database , as already explained .",
    "this only allows for a fixed width and fixed branching ratios , however , with only some minor generalisations . to obtain a dynamical calculation , where the width and the branching ratios can vary as a function of the currently chosen mass",
    ", you must also create a new class for it that derives from the ` resonancewidths ` class . in it",
    "you have to implement a method that returns the partial width for each of the possible decay channels .",
    "the structure is simpler than for the ` sigmaprocess ` case , but again it may be convenient to use a similar existing resonance as a template .",
    "you then hand in a pointer to an instance of this new class with the ` pythia.setresonanceptr ( ... ) ` method .",
    "the ` pdf ` class is the base class for all parton distribution function parametrisations , from which specific ` pdf ` classes are derived .",
    "currently the selection of sets that comes with the program is very limited ; for protons only cteq 5l ( default ) and grv 94l are available .",
    "however , a built - in interface to the lhapdf library @xcite allows a much broader selection , if only lhapdf is linked together with pythia .    should this not be enough",
    ", it is possible to write your own class derived from the ` pdf ` base class , wherein you implement the ` xfupdate ( ... ) ` member to do the actual updating of pdfs .",
    "once you have created two distinct ` pdf ` objects , ` pdfa ` and ` pdfb ` , you should supply pointers to these as arguments in a ` pythia.setpdfptr(pdfa * , pdfb * ) ` call .    a word of warning : to switch to a new pdf set implies that a complete retuning of the generator may be required , since the underlying - event activity from multiple interactions and parton showers is changed .",
    "there is an option that allows a replacement of the pdf for the hard process only , so that this is not required .",
    "inconsistent but convenient .",
    "while ` pythia ` is set up to handle any particle decays , decay products are often ( but not always ) distributed isotropically in phase space , i.e.  polarisation effects and nontrivial matrix elements usually are neglected in pythia . especially for the @xmath39 lepton and for some @xmath40 mesons",
    "it is therefore common practice to rely on dedicated decay packages @xcite .    to this end , ` decayhandler ` is a base class for the external handling of decays .",
    "the user - written derived class is called if a pointer to it has been given with the ` pythia.setdecayptr(decayhandler * , vector < int > ) ` method . the second argument to this method should contain the ` i d ` codes of all the particles that should be decayed by the external program .",
    "it is up to the author of the derived class to send different of these particles on to separate packages , if so desired .    the ` decay ( ... ) `",
    "method in the user - written ` decayhandler ` class should do the decay , or return ` false ` if it fails . in the latter case",
    "` pythia ` will try to do the decay itself .",
    "thus one may implement some decay channels externally and leave the rest for ` pythia ` , assuming the ` pythia ` decay tables are adjusted accordingly .",
    "sometimes it may be convenient to step in during the generation process : to modify the built - in cross sections , to veto undesirable events or simply to collect statistics at various stages of the evolution .",
    "there is a base class ` userhooks ` that gives you this access at a few selected places .",
    "this class in itself does nothing ; the idea is that you should write your own derived class for your task .",
    "a few very simple derived classes come with the program , mainly as illustration .",
    "there are four distinct sets of routines",
    ". ordered by increasing complexity , rather than by their appearance in the event - generation sequence , they are :    * ones that gives you access to the event record in between the process - level and parton - level steps , or in between the parton - level and hadron - level ones",
    ". you can study the event record and decide whether to veto this event .",
    "* ones that allow you to set a scale at which the combined multiple - interactions , initial - state and final - state parton - shower downwards evolution in @xmath7 is temporarily interrupted , so the event can be studied and either vetoed or allowed to continue the evolution .",
    "* similar ones that instead gives you access after the first few parton - shower branchings of the hardest subprocess . * ones that gives you access to the properties of the trial hard process , so that you can modify the internal pythia cross section by your own correction factors .      `",
    "rndmengine ` is a base class for the external handling of random - number generation .",
    "the user - written derived class is called if a pointer to it has been handed in with the ` pythia.setrndmengineptr(rndmengine * ) ` method .",
    "since the default marsaglia - zaman algorithm is quite good , there is absolutely no physics reason to replace it , but this may still be required for consistency with other program elements in big experimental frameworks .      the hepmc event format @xcite is a standard format for the storage of events in several major experiments .",
    "the translation from the pythia  8 ` event ` format should be done after ` pythia.next ( ) ` has generated an event .",
    "therefore there is no need for a tight linkage , but only to call the + ` hepmc::i_pythia8::fill_next_event ( pythia.event , hepmcevt ) ` + conversion routine from the main program written by the user .",
    "version 1 of hepmc makes use of the clhep library @xcite for four - vectors , while version 2 is standalone ; this requires some adjustments in the interface code based on which version is used .",
    "pythia  8 does not contain a machinery for calculating masses and couplings of supersymmetric particles from some small set of input parameters . instead the susy les houches accord ( slha ) @xcite is used to provide this information , as calculated by some external program .",
    "you need to supply the name of the file where the slha information is stored , in an appropriate setting , and then the rest is taken care of automatically .",
    "( or at least will be , once susy processes are implemented . )      it is possible to replace the existing timelike and/or spacelike showers in the program by your own .",
    "this is truly for experts , since it requires a rather strict adherence to a wide set of rules .",
    "these are described in detail in the html / php documentation accompanying the code .",
    "the vincia program @xcite offers a first example of a plug - in of an external ( timelike ) shower .",
    "after you download the ` pythia8100.tgz ` ( or later ) package from the pythia webpage , +  ` http://www.thep.lu.se/`@xmath41`torbjorn/pythia.html ` + you can unpack it with ` tar xvfz pythia8100.tgz ` , into a new subdirectory ` pythia8100 ` .",
    "the rest of the installation procedure is described in the ` readme ` file in that directory .",
    "it is assumed you are on a linux system ; so far there is hardly any multiplatform support .",
    "after this , the main program is up to the user to write .",
    "a worksheet ( found on the webpage ) takes you through as step - by - step procedure , and sample main programs are provided in the ` examples ` subdirectory .",
    "these programs are included to serve as inspiration when starting to write your own program , by illustrating the principles involved .",
    "the information available if you open ` htmldoc / welcome.html ` in your web browser will help you explore the program possibilities further . if you install the ` phpdoc ` subdirectory under a web server you will also get extra help to build a file of commands to the ` settings ` and ` particledatatable ` machineries , to steer the execution of your main program .",
    "such `` cards files '' are separate from the main programs proper , so that minor changes can be made without any recompilation .",
    "it is then convenient to collect in the same place some run parameters , such as the number of events to generate , that could be used inside the main program .",
    "therefore some such have been predefined , e.g.`main : numberofevents ` .",
    "whether they actually are used is up to the author of a main program to decide .",
    "as already explained in the introduction , pythia  8.1 is not yet a complete replacement of pythia  6.4 , but it is getting there , and already contains some new features not found elsewhere . in many cases",
    "the quality of the physics should be comparable between the two versions , but obviously the objective is that soon pythia  8 should offer the overall better alternative .",
    "this will occur by further improvements of the existing framework and by the gradual addition of new features .",
    "the support and kind hospitality of the sft group at cern is gratefully acknowledged by ts .",
    "mikhail kirsanov has developed the configure files , the makefiles and the interface to hepmc , and made several valuable suggestions .",
    "ben lloyd has written the php webpage framework .",
    "bertrand bellenot has provided a simple makefile for win32/nmake .",
    "marc montull has helped write the extended higgs sector .",
    "sm and ps are supported by fermi research alliance , llc , under contract no .  de - ac02 - 07ch11359 with the united states department of energy .",
    "this work was supported in part by the european union marie curie research training network mcnet under contract mrtn - ct-2006 - 035606 .",
    "bengtsson , computer physics commun .",
    "* 31 * ( 1984 ) 323 ; + h .- u .",
    "bengtsson and g. ingelman , computer physics commun .",
    "* 34 * ( 1985 ) 251 ; + h .- u .",
    "bengtsson and t. sjstrand , computer physics commun .",
    "* 46 * ( 1987 ) 43 ; + t. sjstrand , computer physics commun .",
    "* 82 * ( 1994 ) 74"
  ],
  "abstract_text": [
    "<S> the pythia program is a standard tool for the generation of high - energy collisions , comprising a coherent set of physics models for the evolution from a few - body hard process to a complex multihadronic final state . </S>",
    "<S> it contains a library of hard processes and models for initial- and final - state parton showers , multiple parton - parton interactions , beam remnants , string fragmentation and particle decays . </S>",
    "<S> it also has a set of utilities and interfaces to external programs . </S>",
    "<S> while previous versions were written in fortran , pythia  8 represents a complete rewrite in c++ . </S>",
    "<S> the current release is the first main one after this transition , and does not yet in every respect replace the old code . </S>",
    "<S> it does contain some new physics aspects , on the other hand , that should make it an attractive option especially for lhc physics studies .    </S>",
    "<S> pacs : 13.66.-a , 13.85.-t , 12.38.-t , 12.15.-y , 12.60.-i    event generators , multiparticle production , parton showers , multiple interactions , hadronisation    cern - lcgapp-2007 - 04 + lu tp 07 - 28 + fermilab - pub-07 - 512-cd - t + october 2007 +    ,    ,    * new version program summary *    _ manuscript title : a brief introduction to pythia 8.1 _ + _ authors : torbjrn sjstrand , stephen mrenna , peter skands _ </S>",
    "<S> + _ program title : pythia 8.1 _ + _ journal reference : _ </S>",
    "<S> + _ catalogue identifier : _ </S>",
    "<S> + _ licensing provisions : gpl version 2 _ + _ programming language : c++ _ + _ computer : commodity pcs _ + _ operating systems : linux ; should also work on other systems _ + _ ram : 8 _ megabytes + _ keywords : event generators , multiparticle production , parton showers , multiple interactions , hadronisation _ + _ pacs : 13.66.-a , 13.85.-t , 12.38.-t , 12.15.-y , 12.60.-i _ + _ classification : 11.2 phase space and event simulation _ </S>",
    "<S> + _ catalogue identifier of previous version : adnn_v1_0 _ + _ journal reference of previous version : t. sjstrand , p. edn , c. friberg , l. lnnblad , g. miu , s. mrenna and e. norrbin , computer physics commun . </S>",
    "<S> * 135 * ( 2001 ) 238 _ + _ does the new version supersede the previous version ? : yes , partly _ </S>",
    "<S> +   + _ nature of problem : high - energy collisions between elementary particles normally give rise to complex final states , with large multiplicities of hadrons , leptons , photons and neutrinos . </S>",
    "<S> the relation between these final states and the underlying physics description is not a simple one , for two main reasons . </S>",
    "<S> firstly , we do not even in principle have a complete understanding of the physics . </S>",
    "<S> secondly , any analytical approach is made intractable by the large multiplicities . </S>",
    "<S> _   +   + _ solution method : complete events are generated by monte carlo methods . the complexity is mastered by a subdivision of the full problem into a set of simpler separate tasks . </S>",
    "<S> all main aspects of the events are simulated , such as hard - process selection , initial- and final - state radiation , beam remnants , fragmentation , decays , and so on . </S>",
    "<S> therefore events should be directly comparable with experimentally observable ones . </S>",
    "<S> the programs can be used to extract physics from comparisons with existing data , or to study physics at future experiments . _ +   + _ reasons for the new version : improved and expanded physics models , transition from fortran to c++ _ +   + _ summary of revisions : new user interface , transverse - momentum - ordered showers , interleaving with multiple interactions , and much more _ </S>",
    "<S> +   + _ restrictions : depends on the problem studied _ </S>",
    "<S> +   + _ unusual features : none _ +   + _ running time : 101000 events per second , depending on process studied _ + </S>"
  ]
}