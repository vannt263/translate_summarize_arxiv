{
  "article_text": [
    "complex networks are useful tools for modeling complicated real life objects and their interactions .",
    "examples include computer networks , social networks , biological networks , etc .",
    "@xcite@xcite@xcite@xcite@xcite@xcite . different from traditional graph theory approach which emphasize on micro - state quantity of each node in the network , recently developed statistical methods @xcite allow us to analyze large networks by summarizing several important statistics out of a massive amount of information carried by the network itself .",
    "these statistics include degree ( number of connections each node has ) , clustering coefficient @xcite , assortativity coefficient @xcite , modularity measure @xcite , etc .",
    "fast algorithms @xcite@xcite have been developed to compute these statistics for any given network , either represented by adjacency matrix or edge list @xcite .",
    "however , for any evolving network , to measure the corresponding evolution of network statistics , the computation based on static network structure has to be done for the network at each time step , resulting in an impractical task even each single computation is fast .",
    "a missing part in the study of evolving network is a development of a dynamic algorithm which updates , rather than re - compute the statistics .    in this paper",
    "we present a dynamical algorithm based on the knowledge of existing network structure and the changes to the network .",
    "we will consider adjacency matrix as the default structure of representing a network .",
    "the results hold very similarly if one uses edge - list instead .",
    "the rest of the paper is organized as follows . in section",
    "ii we review the definition of some network statistics and introduce notation that will be used in the paper for these statistics . in section",
    "iii we derive update formula for network statistics upon the change of network structure and compare the computational complexity to the use of regular methods . in section",
    "iv we show examples of application using updating scheme . in section",
    "v we discuss the main results of the paper and give some overview of potential future research .",
    "a mathematical representation of a network is a graph @xmath0 where @xmath1 is the vertex set and @xmath2 is the edge set .",
    "note that for undirected graphs , if @xmath3 then so is @xmath4 . in @xmath5 if @xmath6 has been put in @xmath5 , but including both of them allows easier generalization to directed graphs . ] in this work , we limit ourselves to undirected , unweighted networks ; their graphs possess a symmetric , binary _ adjacency matrix _",
    "@xmath7 : @xmath8 with @xmath9 as the total number of edges in @xmath10 , then @xmath11 here @xmath12 is the cardinality of a set .",
    "define the neighborhood @xmath13 of node @xmath14 as the set of vertices that are adjacent to @xmath14 , i.e. : @xmath15 likewise , define the _ shared _ neighborhood @xmath16 of nodes @xmath14 and @xmath17 as : @xmath18 the _ degree _ @xmath19 of node @xmath14 is the number of nodes it connects to : @xmath20 since we limit ourselves to undirected networks .",
    "the _ clustering coefficient _ of node @xmath14 is defined by @xcite : @xmath21 where @xmath22 is the number of triangles that contain @xmath14 .",
    "then the _ average clustering coefficient _ can be derived easily based on updating the number of triangles and triples in the network . ] of the whole network",
    "is simply the average of all @xmath23 s : @xmath24    another interesting quantity is the _ assortativity coefficient _",
    "@xmath25 @xcite of a network : @xmath26 ^ 2}{4m\\sum_{(i , j)\\in e}{\\left(k_{i}^2+k_{j}^2\\right ) } - \\left[\\sum_{(i , j)\\in e}{\\left(k_{i}+k_{j}\\right)}\\right]^2 }   \\nonumber\\\\      & = & \\frac{8mu - v^2}{4mw - v^2 } , \\end{aligned}\\ ] ] where @xmath27    _ modularity _",
    "@xmath28 @xcite is a quantity which measures the quality of a community partition , typically defined as : @xmath29,\\end{aligned}\\ ] ] where @xmath30 if nodes @xmath14 and @xmath17 are in the same group and zero otherwise , and @xmath31",
    "suppose @xmath32 ( @xmath33 and @xmath34 , @xmath35 are not connected ) , we analyze the impact of connecting @xmath34 and @xmath35 on the various statistics of the network .",
    "the goal is to derive computations that are as inexpensive as possible .",
    "we use @xmath36 to represent updated statistics : @xmath37 and @xmath38 where we use _ update delta _ @xmath39 to represent the change for statistics upon adding an edge to the existing network , and in the following @xmath40 will be used to denote change for statistics upon deleting an existing edge .",
    "we will not explicitly specify which edge to add or delete in the update delta notation when there is no confusion .",
    "based on the above formulas , we can derive schemes for efficiently updating network statistics .",
    "* degree *    the change in degree for node @xmath14 is simply : @xmath41 where @xmath42 the above formula indicates that the degree changes only for vertex @xmath34 and @xmath35 , so that if one keeps a list of the degree of all vertices of the network , each update takes only @xmath43 operations when a new edge is added .    * clustering coefficient *    to compute the new clustering coefficient of each node , and thus the whole network , we need the updated number of triangles at node @xmath14 : @xmath44 combining this with eq .   and",
    "@xmath45 , from eq .",
    ", we have : @xmath46 note that whenever the denominator of a fraction is zero , we define the fraction to be zero , in eq .   and throughout .",
    "this maintains the consistency that @xmath47 if @xmath48 .",
    "finally , the average clustering coefficient @xmath49 becomes : @xmath50\\ ] ] where @xmath51.\\ ] ]    note that to update the average clustering coefficient , we need to keep the clustering coefficient for each node in order to apply the update formula , which implies an @xmath52 storage complexity .",
    "* assortativity coefficient *    to compute @xmath53 , we need @xmath54 , @xmath55 , and @xmath56 .",
    "the update formula for @xmath57 is : @xmath58 here @xmath59 is the edge set that contains all edges in @xmath5 but @xmath60 and @xmath61 and @xmath62    similarly , we can obtain update formula for @xmath63 and @xmath64 : @xmath65 where @xmath66 for @xmath64 we have : @xmath67 where @xmath68 + 4.\\ ] ]    finally , the new assortativity coefficient can be updated using : @xmath69    * modularity *    for modularity , we assume that after connecting the nodes @xmath34 and @xmath35 , the partitions @xmath70 do not change for any node @xmath14",
    ". then the new modularity measure will be : @xmath71 .",
    "\\label{eqn : updatedaddedq}\\ ] ] we already have @xmath72 , we now derive updating formulas for @xmath73 and @xmath74 . by eq .",
    "( [ modularityfh ] ) , we have : @xmath75 where @xmath76 ;    and @xmath77 + 2 \\big[\\delta(g_p , g_q)+1 \\big ] .",
    "\\label{eqn : null_modeltermupdatealmost}\\end{aligned}\\ ] ]    however , computing the sum in eq .   for every update",
    "is expensive . to avoid this ,",
    "define the following auxiliary statistics : @xmath78 with updating scheme @xmath79 giving @xmath80      \\label{eqn : null_modeltermupdate}\\ ] ] where @xmath81.$ ]    finally , combining and with gives the updating scheme for @xmath28 : @xmath82 + 2[\\delta(g_p , g - q)+1]\\big ) \\big ] .",
    "\\nonumber\\\\\\end{aligned}\\ ] ]    from eq .",
    "( [ updateq ] ) one is able to predict whether the modularity measure @xmath28 increases or decreases with the knowledge of existing partition of the graph as well as the edge to be added .",
    "for example , if there is a preexisting partition of the graph into two groups , then if a new edge is added in between the two groups , then @xmath83 , i.e. , the modularity is to decrease . on the other hand ,",
    "if a new edge is added to vertices belonging to the same group , then the modularity increases if the edge is added to the group with smaller total degree ; however , adding an edge within a group does not necessarily increase @xmath28 if the edge is added into a group with larger total degree , see fig .  [ graphpartitions ] as an example .    .",
    "after a new edge is added between two vertices in the same group ( solid circles ) the updated modularity becomes @xmath84.,scaledwidth=55.0% ]      the operation of adding an edge to a new node can be decomposed into two successive operations : first , introduce an isolated node that connects to nothing in the network ; then add an edge between this node a previously existing node .",
    "we can use the previous results for the second step and need only focus on the first , i.e. adding an empty node to a network .",
    "since no new edge is introduced , it s easy to obtain the following updating relations : @xmath85 and @xmath86 then for other statistics , we have : @xmath87 and @xmath88 so that @xmath89 similarly , @xmath90 since @xmath91 , @xmath92 , and @xmath93 ; and @xmath94 since @xmath95 , and @xmath96 .",
    "now we investigate how network statistics changes when we delete an existing edge in the network .",
    "( @xmath33 and @xmath98 are connected ) , and we delete this edge , @xmath99 , from our edge set @xmath5 . using @xmath100 to represent the updated adjacency matrix , and similarly for other statistics .",
    "then we immediately have : @xmath101 and @xmath102    * degree *    the change in degree for node @xmath14 is : @xmath103 where @xmath104    * clustering coefficient *    for the new clustering coefficient , we first obtain the formula for updating the number of triangles containing node @xmath14 : @xmath105 then we obtain the formula for updating @xmath23 : @xmath106 the average clustering coefficient @xmath49 is updated by : @xmath107,\\end{aligned}\\ ] ] where @xmath108.\\ ] ]    * assortativity coefficient *    the updating formulas for @xmath109 are : @xmath110 - 4 \\nonumber.\\end{aligned}\\ ] ] let @xmath111 - 4 \\nonumber.\\end{aligned}\\ ] ] then we have : @xmath112 and the new assortativity coefficient @xmath113 is given by : @xmath114    * modularity *    for modularity , we again assume that the community partitions @xmath115 are unchanged after disconnecting the edge between @xmath34 and @xmath35 .",
    "it follows that @xmath116 @xmath117\\ ] ] where @xmath118 is now updated using : @xmath119 these now define the updating scheme for @xmath120 .      in table .",
    "[ table : nonlin ] we compare the computational complexity of using updating scheme ( that depends on existing knowledge of statistics ) and regular methods .",
    "note that for regular methods the operations count depends on the data structure used to represent the network , and will be different in general .",
    "the updating scheme requires @xmath121 operations to update for sparse graphs and at most @xmath122 , which has significant advantage comparing to regular method if graph size becomes large .",
    ".comparison of computational complexity [ cols=\"^,^,^,^ \" , ]     [ table : nonlin ]    our primary focus is developing efficient algorithms for application to problems of dynamic networks , and the computation savings is significant .",
    "however , one may also consider the process of building a network , which can be viewed simply as an edge - adding algorithm from a starting set of a graph with @xmath123 nodes and no edges .",
    "then it takes @xmath124 steps to create the network .",
    "so the formulas for degree and modularity indicate that computing the entire time sequence of statistics has the same computational complexity as doing the single computation for the final state ( using the edge list ) .",
    "the formula for clustering coefficient is more efficient to calculate each value along the way rather that the single computation of the final state , although we also need to take the operations of building the network into account and ( possibly ) extra storage .",
    "the time vector of assortativity coefficients requires an additional factor @xmath125 , which is a minor price .",
    "in this subsection we show implementation of the above formula to obtain the evolution of some network statistics .",
    "we will focus on the case of adding edges between existing nodes , the other two operations will be very similear .",
    "the statistics we will calculate are the degree distribution , average clustering coefficient and modularity measure , although again , the evolution of other statistics can be obtained in the same manner by using the updating scheme .",
    "the evolving network models we choose are not intented to mimic real - world nets , but to show the efficiency of the updating scheme .",
    "we implement the updating scheme to track the evolution of degree distribution and average clustering coefficient of a growing random graph @xcite .",
    "the growing graph is obtained as following : start with a random graph of fixed size @xmath126 with average degree @xmath127 , then at each time step , randomly choose two nodes that are not connected , and make an edge between them , until the average degree of the network reaches @xmath128 .",
    "[ er_deg ] and fig .",
    "[ er_clu ] shows the evolution of a typical realization of the above growing model .",
    "the total number of time steps is @xmath129 , which is @xmath52 in this case .",
    "note that using the updating scheme to obtain the evolution of degree in this case requires @xmath130 ( mostly for initial calculation ) operations while using regular method would require @xmath131 operations ( using adjacency matrix ) ; for average clustering coefficient the updating scheme requires @xmath132 operations and direct computation would require @xmath133 operations ( also for adjacency matrix format ) .",
    "the above comparision holds very similarly for using edge list representation .     in the network .",
    "initially the connection probability of any pair of edge is @xmath134 , by adding random edges in the network , this probability increases to @xmath135 in the end .",
    "we show three views of the evolution of the degree distribution as with respect to the process of add successive random edges . in the left and middle panel",
    "we see that for given time , the distribution is mimics a possion distribution , and the peak is moving to larger degree side as time increases ; while in the right panel we give a top view of the evolution.,title=\"fig:\",scaledwidth=32.0% ]   in the network .",
    "initially the connection probability of any pair of edge is @xmath134 , by adding random edges in the network , this probability increases to @xmath135 in the end .",
    "we show three views of the evolution of the degree distribution as with respect to the process of add successive random edges . in the left and middle panel",
    "we see that for given time , the distribution is mimics a possion distribution , and the peak is moving to larger degree side as time increases ; while in the right panel we give a top view of the evolution.,title=\"fig:\",scaledwidth=32.0% ]   in the network .",
    "initially the connection probability of any pair of edge is @xmath134 , by adding random edges in the network , this probability increases to @xmath135 in the end .",
    "we show three views of the evolution of the degree distribution as with respect to the process of add successive random edges . in the left and middle panel",
    "we see that for given time , the distribution is mimics a possion distribution , and the peak is moving to larger degree side as time increases ; while in the right panel we give a top view of the evolution.,title=\"fig:\",scaledwidth=32.0% ]     of a random growing network ( described in fig .  [ er_deg ] ) .",
    "blue curve is the actual evolution of @xmath49 , and red dashed line is the theoretical result given by @xmath136 where @xmath125 is the average degree at that time instant.,scaledwidth=55.0% ]      we artificially create an initial network with clear partition .",
    "the initial network is constructed as follows : generate an empty graph of @xmath123 vertices , prescribe a partition of the set @xmath137 into two groups such that the group sizes are @xmath138 ( such that @xmath139 ) and probability @xmath140 .",
    "randomly connect any pair of vertices in group @xmath141 with probability @xmath142 , and those in group @xmath43 with probability @xmath143 ; then randomly connect a vertice in group @xmath141 to a vertice in group @xmath43 with probability @xmath144 .",
    "@xmath144 is usually chosen to be smaller than @xmath142 and @xmath143 so that the community structure is clear .    in our example , we choose @xmath126 , group @xmath141 to be the set of nodes @xmath145 and the rest group @xmath43 , so that @xmath146 . also we let @xmath147 and @xmath148 .",
    "then we add random edges between the groups until the probability of connecting in between groups are the same as the probability of connecting inside the groups ( resulting in a completely random network in the end ) .",
    "[ q_p_a ] , fig .",
    "[ q_p_b ] and fig .",
    "[ q_evolution ] shows the modularity affected by this process .     and @xmath148 ) , where there is a clear community structure .",
    "the middle panel corresponds to the time when @xmath144 reaches @xmath149 where the community structure becomes less apparent .",
    "the right panel is the end of the growing process such that @xmath150 and the network is totally random with no community structure.,title=\"fig:\",scaledwidth=32.0% ]   and @xmath148 ) , where there is a clear community structure .",
    "the middle panel corresponds to the time when @xmath144 reaches @xmath149 where the community structure becomes less apparent .",
    "the right panel is the end of the growing process such that @xmath150 and the network is totally random with no community structure.,title=\"fig:\",scaledwidth=32.0% ]   and @xmath148 ) , where there is a clear community structure .",
    "the middle panel corresponds to the time when @xmath144 reaches @xmath149 where the community structure becomes less apparent .",
    "the right panel is the end of the growing process such that @xmath150 and the network is totally random with no community structure.,title=\"fig:\",scaledwidth=32.0% ]    ) . in the three lower panels we plot the corresponding sorted components of the fiedler vector.,title=\"fig:\",scaledwidth=32.0% ] ) . in the three lower panels we plot the corresponding sorted components of the fiedler vector.,title=\"fig:\",scaledwidth=32.0% ] ) . in the three lower panels we plot the corresponding sorted components of the fiedler vector.,title=\"fig:\",scaledwidth=32.0% ] ) . in the three lower panels we plot the corresponding sorted components of the fiedler vector.,title=\"fig:\",scaledwidth=32.0% ] ) . in the three lower panels we plot the corresponding sorted components of the fiedler vector.,title=\"fig:\",scaledwidth=32.0% ] ) . in the three lower panels we plot the corresponding sorted components of the fiedler vector.,title=\"fig:\",scaledwidth=32.0% ]    .",
    "three red circles correspond to the time instances that are shown in fig .",
    "[ q_p_a ] and fig .",
    "[ q_p_b].,scaledwidth=55.0% ]",
    "in this paper we derive update formula for important network statistics ( degree , clustering coefficient , assortativity coefficient , modularity ) , to provide theoretical tools for analyzing evolution of large evolving networks .",
    "the update formula are based on singe edge or node updating , while in general any updating of the graph can be decomposed into these basic one edge ( node ) operations and update using the formula we present in this paper .",
    "we also present several examples to illustrate the use of updating scheme , it is the use of update formula that allows us to efficiently track the evolution of network statistics , while traditional methods will require much more operations and become impratical .",
    "the derivation of update formula requires that the statistics depend locally on network structure , for example , the update formula for clustering coefficient only requires the knowledge of local information of the vertices that are going to be connected .",
    "it becomes very hard , or maybe even impossible to derive exact update formula for statistics that depend on global information of the whole network , for example , the diameter , or the fiedler vector of the network .",
    "however , the change of some of these global statistics can be bounded if there is only small change in the graph . for example , the change in the spectra and eigenvectors ( including the fiedler vector ) of the graph laplacian upon adding or deleting a few edges in the graph may be bounded by well - known perturbation results such as those in @xcite and @xcite .",
    "e.m.b , and s.j . are supported by the army research office under 51950-ma .",
    "e.m.b . and j.d.s .",
    "are supported by the national science foundation under , dms-0708083 .",
    "j.p.b . gratefully acknowledges support from a national science foundation graduate research fellowship ."
  ],
  "abstract_text": [
    "<S> in this paper we derive an updating scheme for calculating some important network statistics such as degree , clustering coefficient , etc . , aiming at reduce the amount of computation needed to track the evolving behavior of large networks ; and more importantly , to provide efficient methods for potential use of modeling the evolution of networks . using the updating scheme , the network statistics can be computed and updated easily and much faster than re - calculating each time for large evolving networks . </S>",
    "<S> the update formula can also be used to determine which edge / node will lead to the extremal change of network statistics , providing a way of predicting or designing evolution rule of networks . </S>"
  ]
}