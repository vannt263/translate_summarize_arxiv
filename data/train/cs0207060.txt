{
  "article_text": [
    "preferences constitute a very natural and effective way of resolving indeterminate situations .",
    "for example , in scheduling not all deadlines may be simultaneously satisfiable , and in configuration various goals may not be simultaneously met .",
    "preferences among deadlines and goals may allow for an acceptable , non - optimal solution . in legal reasoning , laws may apply in different situations , but laws may also conflict with each other .",
    "conflicts are resolved by appeal to higher - level principles such as authority or recency .",
    "so federal laws will have a higher priority than state laws , and newer laws will take priority over old .",
    "further preferences , such as authority holding sway over recency , may also be required .",
    "in fact , while logical preference handling constitutes already an indispensable means in legal reasoning systems ( cf .",
    "@xcite ) , it is also advancing in other application areas such as intelligent agents and e - commerce @xcite , information - site selection  @xcite , and the resolution of grammatical ambiguities  @xcite .",
    "the increasing practical interest in preferences is also reflected by the large number of proposals for preference handling in logic programming , including @xcite , and related areas , such as default logic  @xcite .",
    "a common approach in such work has been to employ meta - formalisms for characterizing `` preferred answer sets '' .",
    "this has led to a diversity of approaches that are hardly comparable due to considerably different methods of formal characterization . as a consequence",
    ", there is no homogeneous account of preference .    in @xcite",
    ", we started addressing this shortcoming by proposing a uniform semantical framework for extended logic programming with preferences . to be precise",
    ", we develop an ( alternating ) fixpoint theory for so - called _ ordered logic programs _ , building on the basic ideas in  @xcite .",
    "an ordered logic program is an extended logic program whose rules are subject to a strict partial order . in analogy to standard logic programming , such a program",
    "is then interpreted by means of an associated fixpoint operator .",
    "different semantics are obtained by distinguishing different subsets of the respective set of alternating fixpoints . as a result , several different approaches to defining preferred answer sets , including  @xcite , can all be captured within our framework and each of these preference strategies is based on an operator , which plays the same role as the consequence operator in the setting of normal logic programs .    in this paper , we show that the preference strategies for defining answer sets turn out to be too weak in the setting of well - founded semantics .",
    "for this reason , we propose a new approach to preference handling for logic programs that seems to be more appropriate for well - founded semantics .",
    "in fact , we show that for a resulting instance of this approach some attractive properties .",
    "we also discuss the relation of our preferred well - founded semantics to other approaches  @xcite .",
    "an _ extended logic program _ is a finite set of rules of the form @xmath0 where @xmath1 , and each @xmath2 @xmath3 is a _ literal _ ,",
    "ie .  either an atom @xmath4 or the negation @xmath5 of @xmath4 .",
    "the set of all literals is denoted by @xmath6 . given a rule @xmath7 as in  ( [ eqn : rule ] ) , we let @xmath8 denote the _ head _ , @xmath9 , of @xmath7 and @xmath10 the _ body _ , @xmath11 , of @xmath7 .",
    "further , let @xmath12 and @xmath13 . a program is called _ basic _ if @xmath14 for all its rules ; it is called _ normal _ if it contains no classical negation symbol @xmath15 .",
    "we define the reduct of a rule @xmath7 as @xmath16 .",
    "the _ reduct _ , @xmath17 , of a program @xmath18 _ relative to _ a set @xmath19 of literals is defined by @xmath20 a set of literals @xmath19 is _ closed under _ a basic program @xmath18 iff for any @xmath21 , @xmath22 whenever @xmath23 .",
    "we say that @xmath19 is _ logically closed _",
    "iff it is either consistent ( ie .",
    "it does not contain both a literal @xmath4 and its negation @xmath5 ) or equals @xmath6 .",
    "the smallest set of literals which is both logically closed and closed under a basic program @xmath18 is denoted by @xmath24 . with these formalities at hand , we can define _ answer set semantics _ for extended logic programs : a set @xmath19 of literals is an _ answer set _ of a program @xmath18 iff @xmath25 . for capturing even more semantics within a similar framework , van  gelder defines in  @xcite the operator @xmath26 as @xmath27 .",
    "it is important to note that the operator @xmath28 is anti - monotonic , which implies that the operator @xmath29 is monotonic .",
    "a fixpoint of @xmath30 is called an _ alternating fixpoint _ for @xmath18 .",
    "different semantics are captured by distinguishing different groups of fixpoints of @xmath30 .",
    "for instance , given a program @xmath18 , the least alternating fixed point of @xmath30 is known to amount to its _ well - founded semantics_. answer sets of @xmath18 are simply alternating fixed points of @xmath30 that are also fixed points of @xmath28 .",
    "alternative inductive characterizations for the operators @xmath31 , @xmath32 , and @xmath30 can be obtained by appeal to _ immediate consequence operators _",
    "let @xmath18 be a basic program and @xmath19 a set of literals .",
    "the _ immediate consequence operator _",
    "@xmath33 is defined as follows : @xmath34 if @xmath19 is consistent , and @xmath35 otherwise .",
    "iterated applications of @xmath33 are written as @xmath36 for @xmath37 , where @xmath38 and @xmath39 for @xmath40 .",
    "it is well - known that @xmath41 , for any basic program @xmath18 .",
    "also , for any answer set @xmath19 of program @xmath18 , it holds that @xmath42 .    a reduction from extended to basic programs is avoidable with an extended consequence operator :",
    "let @xmath18 be an extended program and @xmath19 and @xmath43 be sets of literals .",
    "the _ extended immediate consequence operator _",
    "@xmath44 is defined as follows : @xmath45 if @xmath19 is consistent , and @xmath46 otherwise .",
    "iterated applications of @xmath47 are written as those of @xmath33 above .",
    "clearly , we have @xmath48 for any basic program @xmath18 and @xmath49 for any extended program @xmath18 . accordingly",
    ", we have for any answer set @xmath19 of program @xmath18 that @xmath50 .",
    "finally , for dealing with the individual rules in  ( [ eq : def : extended : immediate : consequence : operator ] ) , we rely on the notion of _ activeness _ : ) , the term as such was ( to the best of our knowledge ) coined in approaches dealing with preferences in default logic @xcite . there , however , activeness additionally stipulated that @xmath51 in order to prevent multiple applications of the same rule .",
    "] let @xmath52 be two sets of literals in a program @xmath18 .",
    "a rule @xmath7 in @xmath18 is _ active _ wrt the pair @xmath53 , if @xmath23 and @xmath54 .",
    "alternatively , we thus have that @xmath55 .",
    "lastly , an _ _ ordered logic program _ _ is simply a pair @xmath56 , where @xmath18 is an extended logic program and @xmath57 is an irreflexive and transitive relation",
    ". given , @xmath58 , the relation @xmath59 is meant to express that @xmath60 has _ higher priority _",
    "than @xmath61 .",
    "the inverse meaning . ]",
    "we start by describing the semantical framework given in @xcite , while concentrating on the formal details needed for capturing the approach introduced in  @xcite .",
    "the formal development of the approach in @xcite and @xcite is analogous and thus omitted here .",
    "the overall idea behind the obtained semantics for ordered logic program is to distinguish the `` preferred '' answers of a program @xmath56 by means of fixpoint equations .",
    "that is , a set of literals @xmath19 constitutes a collection of preferred answers from @xmath56 , if it satisfies the equation @xmath62 for some operator @xmath63 . in view of the classical logic programming approach described in section  [ sec : background ] , this makes us investigate semantics that interpret preferences as inducing selection functions on the set of standard answer sets of the underlying non - ordered program @xmath18 .",
    "standard answer sets are defined via a reduction of extended logic programs to basic programs .",
    "such a reduction is inappropriate when resolving conflicts among rules by means of preferences since all such conflicts are simultaneously resolved when turning @xmath18 into @xmath17 .",
    "rather conflict resolution must be addressed among the original rules in order to account for blockage between rules .",
    "in fact , once the negative body @xmath64 is eliminated there is no way to detect whether @xmath65 holds in case of @xmath66 .",
    "our idea is therefore to characterize preferred answer sets by an inductive development that agrees with the given ordering rather than a simultaneous reduction . in terms of a standard answer set @xmath19 , this means that we favor its formal characterization as @xmath50 over @xmath67 .",
    "this leads us to the following definition .",
    "; cf .  @xcite . ]",
    "[ def : tp : w ] let @xmath56 be an ordered logic program and let @xmath19 and @xmath43 be sets of literals .",
    "we define the set of immediate consequences of @xmath19 with respect to @xmath56 and @xmath43 as @xmath68    if @xmath19 is consistent , and @xmath69 otherwise .",
    "note that @xmath70 is a refinement of its classical counterpart @xmath44 . to see this , observe that condition  _ i _ embodies the standard application condition for rules given in  ( [ eq : def : extended : immediate : consequence : operator ] )    the actual refinement takes place in condition  _ ii_. the idea is to apply a rule @xmath7 only if the `` question of applicability '' has been settled for all higher - ranked rules @xmath71 .",
    "let us illustrate this in terms of iterated applications of @xmath72 . in these cases",
    ", @xmath19 contains the set of conclusions that have been derived so far , while @xmath43 provides the putative answer set ( or : @xmath73 provides a set of literals that can be falsified ) .",
    "then , the `` question of applicability '' is considered to be settled for a higher ranked rule @xmath71    * if the prerequisites of @xmath71 will never be derivable , viz .",
    "@xmath74 , or * if @xmath71 is defeated by what has been derived so far , viz .",
    "@xmath75 , or * if @xmath71 or another rule with the same head have already applied , viz .",
    "@xmath76 .",
    "the first two conditions show why activeness of @xmath71 is stipulated wrt @xmath77 , as opposed to @xmath53 in condition  _ i_. the last condition serves somehow two purposes : first , it detects whether the higher ranked rule @xmath71 has applied and , second , it suspends the preference @xmath66 whenever the head of the higher ranked has already been derived by another rule .",
    "this suspension of preference constitutes a distinguishing feature of the approach at hand ; this is discussed in detail in @xcite in connection with other approaches to preference handling .    as with @xmath33 and @xmath47 , iterated applications of @xmath72",
    "are written as @xmath78 for @xmath37 , where @xmath79 and @xmath80 for @xmath40 .",
    "this allows us to define the counterpart of fixpoint operator @xmath32 for ordered programs :    [ def : fixpoint : operator : w ] let @xmath56 be an ordered logic program and let @xmath19 be a set of literals .",
    "we define @xmath81 .    in analogy to @xmath70 and @xmath44 , operator",
    "@xmath63 is a refinement of its classical counterpart @xmath32 .",
    "the major difference of our definition from van  gelder s is that we directly obtain the consequences from @xmath18 ( and @xmath43 ) . unlike this ,",
    "the usual approach ( without preferences ) first obtains a basic program @xmath82 from @xmath18 and then the consequences are derived from this basic program @xmath82 .",
    "a preferred answer set is defined as a fixpoint of @xmath63 .    in analogy to van  gelder  @xcite",
    ", we may define the _ alternating transformation _ for an ordered logic program @xmath56 as @xmath83 .",
    "a fixpoint of @xmath84 is called an _ alternating fixpoint _ of @xmath56 .",
    "given that @xmath63is anti - monotonic  @xcite , we get that @xmath85 is monotonic .",
    "according to results tracing back to tarski  @xcite , this implies that @xmath84 possesses a least and a greatest fixpoint , denoted by @xmath86 and @xmath87 , respectively .",
    "different semantics of ordered logic programs are obtained by distinguishing different subsets of the respective set of alternating fixpoints .",
    "in fact , the preferred answer set semantics constitute instances of the overall framework .",
    "to see this , observe that each fixpoint of @xmath63 is also a fixpoint of @xmath84 .",
    "let us now investigate the least alternating fixpoint of @xmath84and with it the comportment of the previous fixpoint operator in the setting of _ well - founded _ semantics . as opposed to answer sets semantics ,",
    "this semantics relies on 3-valued models ( or , partial models ) .",
    "such a model consists of three parts : the set of true literals , the set of false literals , and the set of unknown literals .",
    "given that the union of these three sets is @xmath6 , it is sufficient to specify two of the three sets for determining a 3-valued interpretation",
    ". accordingly , a 3-valued interpretation @xmath88 is a pair @xmath53 where @xmath19 and @xmath43 are sets of literals with @xmath89 .",
    "that is , @xmath90 means that @xmath91 is true in @xmath88 , while @xmath92 means that @xmath91 is false in @xmath88 .",
    "otherwise , @xmath91 is considered to be unknown in @xmath88 .",
    "well - founded semantics constitutes another major semantics for logic programs .",
    "in contrast to answers sets semantics , it aims at characterizing skeptical conclusions comprised in a single so - called _ well - founded _ model of the underlying program .",
    "this model can be characterized within the alternating fixpoint theory in terms of the least fixpoint of operator @xmath30 .",
    "that is , the well - founded model of a program @xmath18 is given by the 3-valued interpretation @xmath93 .",
    "hence , it is sufficient to consider the least alternating fixpoint of a program , since it determines its well - founded model .",
    "we therefore refer to the least alternating fixpoint of @xmath18 as the _ well - founded set _ of @xmath18 .",
    "the set @xmath94 is usually referred to as the _ unfounded _ set of @xmath18 .    after extending these concepts to preference handling , that is , substituting the classical operators @xmath30 and @xmath32 by @xmath84 and @xmath63 , respectively",
    ", one can show that ( i ) each ordered logic program has a unique preferred well - founded model ; ( ii ) the preferred well - founded set is contained in any preferred answer set ( while the unfounded one is not ) ; and ( iii ) whenever we obtain a two - valued well - founded model , its underlying well - founded set is the unique answer set of the program .",
    "one often criticized deficiency of the standard well - founded model is that it is too skeptical .",
    "unfortunately , this is _ not _ remedied by alternating the fixpoint operators of the previous sections , no matter which strategy we consider . to see this ,",
    "consider the ordered logic program @xmath95 : @xmath96{rcrcl } r_1 & = & a & \\leftarrow & { { \\mathit{not}}\\;}b \\\\ r_2 & = & b & \\leftarrow & { { \\mathit{not}}\\;}a \\end{array }    \\qquad\\qquad    r_2 < r_1\\ ] ] the well - founded model of @xmath97 is given by @xmath98 .",
    "the same model is obtained by alternating operator @xmath99 .",
    "observe that @xmath100 and @xmath101 .",
    "consequently , @xmath102 is the least alternating fixpoint of @xmath95",
    ".    the question is now why these operators are still too skeptical in defining well - founded semantics ( although they work nicely in the setting of answer sets and regular semantics ) . in fact , the great advantage of a setting like that of answer sets semantics is that we deal with _",
    "direct _ fixpoint equations , like @xmath103 , where the context @xmath19 represents the putative answer set .",
    "this is different in the setting of well - founded semantics , where we usually start by applying an operator to a rather small context , eg .",
    "initially the empty set ; this usually results in a larger set , sometimes even @xmath104 , that constitutes then the context of the second application of the operator .",
    "now , looking at the underlying definitions , we see that the actual preference handling condition , eg .",
    "condition  ii in definition  [ def : tp : w ] takes advantage of @xmath19 for deciding applicability .",
    "the alternating character in the well - founded setting does not support this sort of analysis since it can not provide the ( putative ) final result of the computation .",
    "in view of the failure of the above fixpoint operator(s ) in the setting of well - founded semantics , the obvious question is now whether an appropriate _ alternating _ fixpoint operation is definable that yields a reasonable well - founded semantics for ordered logic programs . as informal guidelines , we would like that the resulting semantics ( i ) allows for deriving more conclusions than the standard well - founded semantics by appeal to given preferences ; ( ii ) coincides with standard well - founded semantics in the absence of preferences ; and finally ( iii ) approximates the previous preferred answer sets semantics .",
    "the standard well - founded model is defined by means of the least fixpoint of the operator @xmath105 . as above",
    ", we aim at integrating preferences by elaborating upon the underlying immediate consequence operator @xmath44x given in  ( [ eq : def : extended : immediate : consequence : operator ] ) .",
    "as well , the basic idea is to modify this operator so that more conclusions can be derived by employing preferences .",
    "however , as discussed at the end of the previous section , the alternating iterations of @xmath32 face two complementary situations : those with smaller contexts and those with larger ones . since preferences exploit these contexts , it seems reasonable to distinguish alternating applications or , at least , to concentrate on one such situation while dealing with the other one in the standard way . for strengthening @xmath105",
    ", we thus have two options : either we make the outer operator derive more literals or we make the inner operator derive less literals .    in what follows , we adopt the former option and elaborate upon the outer operator .",
    "the general idea is then to reduce the context considered in the second application of @xmath32 by appeal to preferences in order to make more rules applicable . for this purpose",
    "we remove those literals that are derived by means of less preferred , defeated rules .",
    "[ def : alt : fixpoint : wfs : defeat ] let @xmath56 be an ordered logic program and let @xmath19 and @xmath43 be sets of literals .",
    "we define the set of immediate consequences of @xmath19 with respect to @xmath56 and @xmath43 as @xmath106 where @xmath107 if @xmath19 is consistent , and @xmath108 otherwise .",
    "we say that @xmath7 defeats @xmath71 wrt @xmath19 if @xmath109 .",
    "the set of removed literals @xmath110 consists thus of those rule heads , all of whose corresponding rules are less preferred than @xmath7 and defeated by @xmath7 or @xmath19 , viz .",
    "the literals derived so far .",
    "in fact , this condition only removes a literal such as @xmath111 from @xmath43 , if all of its applicable generating rules like @xmath71 are defeated by the preferred rule @xmath7 .",
    "note that @xmath110 is normally different for different rules @xmath7 .    for illustration",
    "consider the rules in  @xmath97 . for @xmath112 and @xmath113 , we get @xmath114 and @xmath115 . in such a situation ,",
    "activeness of @xmath61 is checked wrt @xmath116 while that of @xmath60 is checked wrt @xmath117 .",
    "when applying @xmath61 , the removal of @xmath118 from context @xmath119 allows us to discard the conclusion of the less preferred rule @xmath60 that is defeated by the preferred rule @xmath61 .",
    "this example is continued below .",
    "notably , the choice of @xmath110 is one among many options .",
    "unfortunately , it leads beyond the scope of this paper to investigate the overall resulting spectrum , so that we concentrate on the above definition and discuss some alternatives at the end of this section . from a general perspective , the above definition offers thus a parameterizable framework for defining well - founded semantics including preferences .    in analogy to the previous sections , we can define a consequence operator as follows .",
    "[ def : fixpoint : operator : wfo : n ] let @xmath56 be an ordered logic program and let @xmath19 be a set of literals .",
    "we define @xmath120 .    of particular interest in view of an alternating fixpoint theory",
    "is that @xmath121  enjoys _ anti - monotonicity _ :    [ thm : cpn : anti : monotonicty ] let @xmath56 be an ordered logic program and @xmath122 sets of literals .    if @xmath123 , then @xmath124 .",
    "given this , we may define a new alternating transformation of @xmath56 as @xmath125 since both @xmath126 and @xmath32 are anti - monotonic , @xmath127 is monotonic .",
    "[ def : alt : fixpoint : wfs : set : n ] let @xmath56 be an ordered logic program and let @xmath19 be a set of literals .",
    "we define @xmath19 as a preferred well - founded set of @xmath56 iff @xmath128 .    by tarski s theorem  @xcite",
    ", we get that each ordered logic program has a unique preferred well - founded set .",
    "[ thm : alt : fixpoint : unique ] let @xmath56 be an ordered logic program .",
    "then , there is a unique preferred well - founded set of @xmath56 .    given the notion of the preferred well - founded set , we define the preferred well - founded model of an ordered program as follows .",
    "[ def : alt : fixpoint : wfs : w ] let @xmath56 be an ordered logic program and let @xmath19 be the well - founded set of @xmath56 .",
    "we define the preferred well - founded model of @xmath56 as @xmath129 .",
    "it is well - known that the standard well - founded semantics for extended logic programs has time complexity @xmath130  @xcite .",
    "the complexity of the preferred well - founded semantics is still in polynomial time but it is in @xmath131 .",
    "the reason is that we have to additionally compute @xmath110 for each @xmath21 .",
    "we first obtain the following corollary to theorem  [ thm : alt : fixpoint : unique ] .",
    "[ thm : alt : wfm : unique ] every ordered logic program has a unique preferred well - founded model .",
    "this result shows that our preferred well - founded semantics is as robust as the standard well - founded semantics .",
    "the relationship between the standard well - founded model and the preferred well - founded model can be stated as follows .",
    "[ thm : relationship : wfm ] let @xmath53 be the preferred well - founded model of @xmath56 and let @xmath132 be the well - founded model of @xmath18 .",
    "then , we have    1 .   @xmath133 and @xmath134 and 2 .",
    "@xmath135 , if @xmath136 .",
    "let us reconsider @xmath95 . while @xmath98 is the well - founded model of @xmath97 , its ordered counterpart @xmath95 has the preferred well - founded model @xmath137 . to see this ,",
    "observe that @xmath138 and @xmath139 .",
    "clearly , @xmath140 is a fixpoint of @xmath141 and @xmath142 .",
    "thus , @xmath140 is an alternating fixpoint of @xmath95 . also , we see that @xmath102 is not an alternating fixpoint .",
    "this implies that @xmath140 is the least alternating fixpoint of @xmath95 .",
    "this example along with the last result show that preferences allow us to strengthen the conclusions obtained by the standard well - founded semantics .",
    "that is , whenever certain conclusions are not sanctioned in the standard framework one may add appropriate preferences in order to obtain these conclusions within the overall framework of well - founded semantics .    for a complement , consider the following variation of @xmath95 , also discussed in  @xcite .",
    "@xmath143{rcrcl }      r_1 & = & a & \\leftarrow & { { \\mathit{not}}\\;}b \\\\      r_2 & = & b & \\leftarrow & { { \\mathit{not}}\\;}c    \\end{array }    \\qquad\\qquad    r_2 < r_1\\ ] ] observe that @xmath144 has well - founded model @xmath145 . in contrast to @xmath95 , the preferred well - founded model of @xmath146",
    "is also @xmath147 .",
    "as discussed in  @xcite this makes sense since preferences should only enrich but not `` override '' an underlying well - founded model .",
    "another attractive property of this instance of preferred well - founded semantics is that it provides an approximation of preferred answer sets semantics .",
    "[ thm : pwfs : approx : b ] let @xmath53 be the preferred well - founded model of @xmath56 and let @xmath148 be a preferred answer set of @xmath56 .",
    "then , we have @xmath149 and @xmath150 .",
    "notably , this can be shown for all aforementioned preferred answer sets semantics , no matter whether we consider the approach in @xcite , @xcite , or @xcite , respectively .",
    "finally , let us briefly discuss some alternative choices for @xmath110 .",
    "in fact , whenever we express the same preferences among ( negative ) rules having the same head the previous definition of @xmath110 is equivalent to @xmath151 .",
    "however , this conceptually simpler definition is inadequate when it comes to attributing different preferences to rules with the same heads as in the following example .",
    "consider the ordered program @xmath152 .",
    "@xmath153{rcrcl }      r_1 & = & a & \\leftarrow & \\\\",
    "r_2 & = & b & \\leftarrow & { { \\mathit{not}}\\;}a \\\\      r_3 & = & a & \\leftarrow & { { \\mathit{not}}\\;}b    \\end{array }    \\qquad\\qquad    r_3<r_2 < r_1\\ ] ] the preferred well - founded semantics of @xmath152 gives @xmath137 , while the conceptually simpler one yields @xmath154 , a clearly wrong result ! in the simplistic setting @xmath155 would contain the head of the third rule , discarding the fact that @xmath61 already defeats @xmath60 .",
    "another alternative choice for @xmath110 is indicated by the difference between the strategies employed in @xcite and @xcite .",
    "in fact , the latter implicitly distinguishes between same literals stemming from different rules .",
    "this amounts to distinguishing different occurrences of literals .",
    "for this , we may rely on the aforementioned simplistic definition of @xmath110 and suppose that @xmath156 provides us with occurrences of literals , like @xmath157 instead of @xmath158 . without entering details , let us illustrate this idea by appeal to @xmath152 .",
    "an approach distinguishing occurrences of literals would yield @xmath159 and @xmath160 .",
    "when considering @xmath60 , we check activeness wrt @xmath161 , viz.@xmath162 . unlike",
    "just above , @xmath163 remains in the reduced context and @xmath60 is inapplicable .",
    "an elaboration of this avenue is beyond the scope of this paper , in particular , since it involves an occurrence - based development of well - founded semantics .",
    "in contrast to answer set semantics , the extension of well - founded semantics to ordered logic program has been rarely studied before . in this section",
    "we will discuss the relation of our approach to @xcite .",
    "brewka defines in  @xcite a well - founded semantics for ordered logic programs .",
    "notably , this approach is based on a paraconsistent extension of well - founded semantics that tolerates inconsistencies among the result of the inner operator without trivializing the overall result . despite this deviation from standard well - founded semantics",
    ", the question remains whether brewka s semantics can be captured within our semantical framework .",
    "in fact , both approaches are based on quite different intuitions . while the underlying idea of brewka s approach is to define a criterion for selecting the intended rules by employing preference , we integrate preferences into the immediate consequence operaor by individually restricting the context of application for each rule .",
    "nonetheless , it turns out that brewka s semantics can be captured through an alternating fixpoint construction .",
    "as we show below , brewka s modification boils down to using an alternate fixpoint operator of the form `` @xmath164 '' . to this end , let us first consider the difference among the underlying operators @xmath165 and @xmath32 .",
    "define @xmath166 as the smallest set of literals which is closed under a basic program @xmath18 .",
    "then , given a set @xmath19 of literals , @xmath167 is defined as @xmath168 . dropping the requirement of logical closure results in a paraconsistent inference operation .",
    "for example , given @xmath169 , we get @xmath170 , while @xmath171 .",
    "although the corresponding adaptions are more involved , the surprising result is now that brewka s semantics can also be captured within our overall framework , if we use the closure operator @xmath172 instead of @xmath173 .",
    "moreover , we need the following .",
    "let @xmath56 be an ordered logic program and @xmath19 be a set of literals .",
    "we define @xmath174 as the set of rules defeated by @xmath7 wrt @xmath19 and @xmath175 as @xmath176 notice that @xmath174 is a set of rules while @xmath110 is a set of literals .",
    "@xmath174 is also different from brewka s _ dom _ ( set of _ _ dom__inated rules ) in that @xmath174 is defined wrt a set @xmath19 of literals rather than a set of rules .",
    "write @xmath177 .",
    "let @xmath178 be the operator obtained from @xmath179 ( in definition  [ def : alt : fixpoint : wfs : defeat ] ) by replacing @xmath180 with @xmath181 .",
    "this results in a fixpoint operator @xmath182 .",
    "as we show in the full version of this paper , brewka s well - founded set corresponds to the least fixpoint of the alternating operator @xmath164 .",
    "this means brewka s well - founded semantics also enjoys an alternating fixpoint characterization .      in @xcite",
    ", it is mentioned that a well - founded semantics with preference can be defined in terms of their operator but default negation is not allowed in their syntax . however , even for ordered logic programs without default negation , our basic semantic approach is different from the well - founded semantics in priority logic  @xcite .",
    "the main reason is that they interpret the priority relation @xmath183 in a quite different way : @xmath7 is blocked whenever @xmath71 is applicable . while we attribute to the program @xmath184{rcrcl }      r_1 & = & p & \\leftarrow & \\\\",
    "r_2 & = & q & \\leftarrow &    \\end{array }    \\qquad\\qquad    r_2 < r_3\\ ] ] a preferred well - founded model , containing both @xmath185 and @xmath186 , the well - founded model of @xmath187 in priority logic is @xmath188 .",
    "that is , @xmath186 can not be inferred .",
    "another skeptical semantics for preference is defeasible logic , which was originally introduced by d. nute  @xcite and received extensive studies in recent years  @xcite .",
    "defeasible logic distinguishes the strict rules from defeasible rules .",
    "this already makes its semantics different from our preferred well - founded semantics .",
    "consider an example from  @xcite .",
    "the following is a theory in defeasible logic :    @xmath189{rcrcl }      r'_1 & & \\rightarrow & p\\\\      r'_2 & p&\\rightarrow & q\\\\      r'_3 & & \\rightarrow & \\neg q     \\end{array }    \\qquad\\qquad    r'_2 < r'_3\\ ] ]    in defeasible logic , @xmath190 is not derivable , i.  e. , @xmath186 can not be defeasibly derived . as pointed out by brewka",
    ", this means a defeasible rule having higher priority can defeat a strict rule .",
    "the above theory can be directly translated into an ordered logic program @xmath56 as follows :    @xmath191{rcrcl }      r_1 & = & p       & \\leftarrow & { { \\mathit{not}}\\;}\\neg p\\\\      r_2 & = & q       & \\leftarrow & p          \\\\      r_3 & = & \\neg q & \\leftarrow & { { \\mathit{not}}\\;}q    \\end{array }    \\qquad\\qquad    r_2 < r_3\\ ] ]    it can be verified that the preferred well - founded model ( in our sense ) is @xmath192 . therefore , @xmath186 is derivable under our preferred well - founded semantics .",
    "we have looked into the issue of how van gelder s alternating fixpoint theory  @xcite for normal logic programs can be suitably extended to define the well - founded semantics for ordered logic programs ( extended logic programs with preference ) .",
    "the key of the alternating fixpoint approach is how to specify a suitable consequence relation for ordered logic programs .",
    "we argue that the preference strategies for defining answer sets are not suitable for defining preferred well - founded semantics and then some informal criteria for preferred well - founded semantics are proposed .",
    "based on this analysis , we have defined a well - founded semantics for ordered logic programs .",
    "this semantics allows an elegant definition and satisfies some attractive properties : ( 1 ) each ordered logic program has a unique preferred well - founded model ; ( 2 ) the preferred well - founded reasoning is no less skeptical than the standard well - founded reasoning ; ( 3 ) any conclusion under the preferred well - founded semantics is also derivable under some major preferred answer sets semantics .",
    "our semantics is different from defeasible logic and the skeptical priority logic .",
    "an important result is the equivalence of brewka s preferred well - founded semantics and our semantics introduced in section  [ sec : wfs : strong ] .",
    "f.  baader and b.  hollunder . how to prefer more specific defaults in terminological default logic . in r.",
    "bajcsy , editor , _ proceedings of the international joint conference on artificial intelligence _ , pages 669674 .",
    "morgan kaufmann publishers , 1993 .",
    "g.  brewka .",
    "adding priorities and specificity to default logic . in l.  pereira and d.  pearce , editors , _",
    "european workshop on logics in artificial intelligence ( jelia94 ) _ , lecture notes in artificial intelligence , pages 247260 .",
    "springer - verlag , 1994 .",
    "g.  brewka . on the relationship between defeasible logic and",
    "well - founded semantics . in t.",
    "eiter , w.  faber , and m.  truszczynski , editors , _ proceedings of the sixth international conference on the logic programming and nonmonotonic reasoning _ , pages 121132 .",
    "springer - verlag , 2001 .",
    "g.  brewka and t.  eiter . prioritizing default logic . in st .",
    "hlldobler , editor , _ intellectics and computational logic  papers in honour of wolfgang bibel _ , pages 2745 .",
    "kluwer academic publishers , 2000 .",
    "j.  delgrande and t.  schaub . compiling reasoning with and about preferences into default logic . in m.",
    "pollack , editor , _ proceedings of the international joint conference on artificial intelligence _ , pages 168174 .",
    "morgan kaufmann publishers , 1997 .",
    "j.  delgrande , t.  schaub , and h.  tompits .",
    "logic programs with compiled preferences . in w.",
    "horn , editor , _ proceedings of the european conference on artificial intelligence _ , pages 392398 .",
    "ios press , 2000 .",
    "t.  eiter , m.  fink , g.  sabbatini , and h.  tompits . a generic approach for knowledge - based information - site selection . in _ proceedings of the eighth international conference on the principles of knowledge representation and reasoning_. morgan kaufmann publishers , 2002 .",
    "m.  gelfond and t.  son .",
    "reasoning with prioritized defaults . in j.  dix , l.  pereira , and t.  przymusinski , editors , _ third international workshop on logic programming and knowledge representation",
    "_ , volume 1471 of _ lecture notes in computer science _ , pages 164223 .",
    "springer - verlag , 1997 .",
    "m.  maher , j.  rock , g.  antoniou , d.  billington , and d.  miller .",
    "efficient defeasible reasoning systems . in _ proceedings of the 12th international conference on tools with artificial intelligence _ , pages 384392 .",
    "ieee press , 2000 .        c.  sakama and k.  inoue .",
    "representing priorities in logic programs . in m.  maher , editor , _ proceedings of the 1996 joint international conference and symposium on logic programming _",
    ", pages 8296 , cambridge , 1996 . the mit press .",
    "t.  schaub and k.  wang . a comparative study of logic programs with preference . in b.  nebel , editor , _ proceedings of the international joint conference on artificial intelligence _ , pages 597602 .",
    "morgan kaufmann publishers , 2001 .",
    "k.  wang , l.  zhou , and f.  lin .",
    "alternating fixpoint theory for logic programs with priority . in",
    "_ proceedings of the first international conference on computational logic _ , volume 1861 of _ lecture notes in computer science _ , pages 164178 .",
    "springer - verlag , 2000 .",
    "y.  zhang and n.  foo .",
    "answer sets for prioritized logic programs . in j.",
    "maluszynski , editor , _ proceedings of the international symposium on logic programming ( ilps-97 ) _ , pages 6984 . the mit press , 1997 ."
  ],
  "abstract_text": [
    "<S> we analyze the problem of defining well - founded semantics for ordered logic programs within a general framework based on alternating fixpoint theory . </S>",
    "<S> we start by showing that generalizations of existing answer set approaches to preference are too weak in the setting of well - founded semantics . </S>",
    "<S> we then specify some informal yet intuitive criteria and propose a semantical framework for preference handling that is more suitable for defining well - founded semantics for ordered logic programs . </S>",
    "<S> the suitability of the new approach is convinced by the fact that many attractive properties are satisfied by our semantics . in particular , our semantics is still correct with respect to various existing answer sets semantics while it successfully overcomes the weakness of their generalization to well - founded semantics . </S>",
    "<S> finally , we indicate how an existing preferred well - founded semantics can be captured within our semantical framework .    </S>",
    "<S> [ [ keywords ] ] keywords : + + + + + + + + +    well - founded semantics , preference , alternating fixpoints , extended logic programs . </S>"
  ]
}