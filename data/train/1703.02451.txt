{
  "article_text": [
    "steganography @xcite is derived from a work by johannes trithemus ( 1462 - 1516 ) entitled _ steganographia _ and comes from the greek name _ steganos _ ( hidden or secret ) and _ graphy _ ( writing or drawing ) and literally means _ hidden writing _",
    "it is an ancient art of hiding information , which it s goal consists in hiding a secret message in a public media ( video , text , sound , image , etc . )",
    "acting as a cover , in a way that sent through a non - secure communication channel , only the sender and the receiver are able to understand it , and anyone else can not distinguish the existence of an hidden message .",
    "+ steganography has been many times used throughout history such that several schemes throughout it were developed .",
    "its scientific study in the open literature began in 1983 when simmons @xcite stated the problem in terms of communication in a prison . in his formulation ,",
    "two inmates , alice and bob , are trying to hatch an escape plan .",
    "the only way they can communicate with each other is through a public channel , which is carefully monitored by the warden of the prison , ward .",
    "if ward detects any encrypted messages or codes , he will throw both alice and bob into solitary confinement .",
    "the problem of steganography is then : how can alice and bob cook up an escape plan by communicating over the public channel in such a way that ward does not suspect that anything ",
    "unusual \" is going on@xcite ? + most of the work in steganography has been done on images , video clips , music , sounds and texts , taken individually .",
    "we have oriented towards text - based steganography as in our study we have found out that it s difficult to use text files as cover media , despite the fact that , with the multiplication of file transfers on networks , they are highly used .",
    "this is due to fact that , by using text files as cover media , hiding techniques face problems of @xcite :    * lack of redundancy whereas lot of redundancy is present in image or sound files , leading to a high use of those files in steganography ; * low embedding capacity of secret data in text files ; * imperceptibility of the modifications done on the cover file not well managed ; * necessity of a cover file with high size to hide only few information .    in this paper",
    ", we present a hiding technique using list of strings of any type ( bit , character , etc . ) as cover , such that ordered in a pseudo - random way by application of a permutation , and sent through a non - secure communication channel , only the sender and the receiver are able to retrieve the hidden message .",
    "+ in the sequel , in section 2 we present some related hiding techniques followed by some permutation methods in section 3 .",
    "after that , our contribution in section 4 is described , followed by the definition of a list in section 5 that helps us to exhibit our hiding technique in section 6 .",
    "we end this paper by presenting experimental results in section 7 and a conclusion in section 8 .",
    "throughout history , many people worked on how to develop hiding techniques using text as cover media . in order to get a clear view of the landscape , in the literature we ve found the following studies .",
    "+ wayner @xcite introduced the mimic functions where , he used the inverse of huffman code by inputting a data stream of randomly distributed bits .",
    "his purpose was to produce a text that fits the statistical profile of a particular normal text .",
    "thus , the generated text by mimic functions is resilient against statistical attacks .",
    "the output of a regular mimic functions is gibberish .",
    "accordingly , this makes the text extremely suspicious @xcite . + in 1995",
    ", text data hiding program called texto is exhibited by maher @xcite , which was designed to transform unencoded or pgp ascii - armored ascii data into english sentences .",
    "it is practical for exchanging binary data , especially encrypted data . here , the secret data is replaced by english words .",
    "+ chapman and davida @xcite introduced a steganographic scheme that consists of two functions called nicetext and scramble .",
    "nicetext transforms a cipher text into a text that looks like natural language .",
    "+ there are synonyms - based approach which attracted the attention of many researchers like winstein @xcite , nakagawa et al .",
    "@xcite and murphy et al .",
    "@xcite . in synonym - based approach",
    ", the cover text may look legitimate from a linguistics point of view given the adequate accuracy of the chosen synonyms . but reusing the same piece of text to hide a message can raise suspicion @xcite .",
    "sun et al .",
    "@xcite proposed a scheme that uses the left and right components of chinese characters .",
    "the proposed scheme is called l - r scheme . in l - r scheme , the mathematical expression of all chinese characters",
    "is introduced into the text data hiding strategy .",
    "it chooses those characters with left and right components as candidates to hide the secret information .",
    "+ in order to increase the hiding capacity of l - r scheme of sun et al . , wang et al .",
    "@xcite revised it by adding the up and down structure of chinese characters as an extra candidate set . besides , a reversible function to sun et al.s l - r scheme has been added to make it possible for receivers to obtain the original cover text and use it repeatedly for later transmission of secrets after the initial hidden secrets have been extracted @xcite . since communications via chat room become more popular in people s lives .",
    "+ wang and chang proposed another new text steganography method .",
    "the proposed method embeds secret information into emotional icons ( also called emoticons ) in chat rooms over the internet . in this method , firstly the sender s emoticon table should be unanimous with the receiver s emoticon table .",
    "next , the sender and the receiver classify those emoticons in the emoticon table into several sets according to their meaning ( like cry , smile laugh ) and every emoticon belongs to one set .",
    "the order number of an emoticon , counting from 0 , in its set is the secret bits that will be embedded .",
    "thus , the proposed steganographic scheme uses a secret key to control the order of emoticons in each constructed set . only the sender and the receiver",
    "keep this key .",
    "the embedding capacity has also been improved due to the tremendous numbers of emoticons used in many kinds of chat rooms @xcite .",
    "+ stutsman et al .",
    "@xcite introduced a new approach that is called translation - based steganographic scheme .",
    "this scheme hides a message in the errors ( noise ) , which are naturally encountered in a machine translation ( mt ) .",
    "the secret message is embedded by performing a substitution procedure on the translated text using translation variations of multiple mt systems @xcite .",
    "another noise - based approach was proposed by topkara et al . in @xcite . here ,",
    "typos and ungrammatical abbreviations in a text , for example , emails , blogs , forums , are employed for hiding data . however , this approach is sensitive to the amount of noise ( errors ) that occurs in a human writing @xcite . + in 2009 ,",
    "desoky presented the development of list - based steganography methodology ( listega ) , which conceals data in textual list of itemized data .",
    "the high demand for textual list of itemized data by a wide variety of people allows the communicating parties to establish a covert channel to transmit hidden messages ( listcover ) rendering textual list of items an attractive steganographic carrier .",
    "listega neither hides data in a noise ( errors ) nor produces noise .",
    "instead , it camouflages data in legitimate list of items by manipulating , mainly the itemized data e.g. , list of books , movie dvd s , music cd s , auto - parts ) in order to embed data without generating any suspicious pattern @xcite . +",
    "por et al .",
    "@xcite proposed a data hiding method based on space character manipulation called unispach .",
    "unispach is proposed to embed information in microsoft word document using unicode space characters .",
    "in addition , white spaces are considered to encode payload because they appear throughout the document ( i.e. , available in large number ) , and the manipulation of white spaces has insignificant effect to the visual appearance of document .",
    "unispach embeds payload into inter - sentence , inter - word , end - of - line and inter - paragraph spacings by introducing unicode space characters @xcite .",
    "+ in 2011 , kumar et al .",
    "@xcite in their paper proposed an email based high capacity text steganography method using combinatorial compression .",
    "the method makes use of forward email platform to hide the secret data in email addresses .",
    "they used the combination of bwt + mtf + lzw coding algorithm to increase the hiding capacity , as it is proved that this combination increases the compression ratio . to further increase the capacity , the numbers of characters of email i d are also used to refer the secret data bits .",
    "furthermore , the method adds some random characters just before the ",
    "@ symbol of email ids to increase the randomness .",
    "+ satir et al .",
    "@xcite considered in their study the improvement of capacity and security issues of text steganography , by proposing a novel approach that employs data compression .",
    "they choose lzw data compression algorithm as it s frequently used in the literature and has a significant compression ratio .",
    "their method constructs  uses stego keys and employs combinatorics - based(use of latin square ) coding in order to increase security .",
    "secret information has been hidden in the chosen text from the previously constructed text base that consists of naturally generated texts .",
    "email has been chosen as communication channel between the two parties , so the stego cover has been arranged as a forward mail platform .",
    "+ in @xcite , h. hioki introduced data embedding methods , called distortion - free ( or distortionless ) steganographic methods , that are not based on modification of the contents of cover objects . which are useful methods when the quality of stego object matters crucially .",
    "* permutation steganography : here , a secret message is embedded as a number corresponding to a permutation that is represented by a tuple of cover elements .",
    "embedding is performed by shuffling cover elements such that the content of a cover object is preserved if the rearrangement of its elements does not affect the content ; * metadata steganography : this method does not modify data in cover objects . instead , it adjusts the metadata of the files , to represent a secret message . due to the low level of embedding capacity of metadata , the method simultaneously uses for embedding , the metadata of files contained in a directory tree ; * cover generation methods : in this method , a cover object is generated so that it becomes a stego object that encodes a message as it is .",
    "hioki described a text - based and image - based methods .",
    "the text - based method is based on a customized context - free grammar . in this method ,",
    "a message is encoded into sentences using production rules of grammars . in image - based methods , an image",
    "is mapped to a bit string , and a message is encoded by a sequence of images to be saved as an image gallery or image mosaic .",
    "a permutation , also called an _ arrangement number _ or _ order _ , is a rearrangement of the elements of an ordered list @xmath8 into a _",
    "one - to - one correspondence _ with @xmath8 itself . the number of permutations on a set of @xmath2 elements is given by @xmath9 @xcite .",
    "for example , there are @xmath10 permutations of @xmath11 , namely @xmath12 and @xmath13 , and @xmath14 permutations of @xmath15 , namely @xmath16 , @xmath17 , @xmath18 , @xmath19 , @xmath20 , and @xmath21 @xcite .",
    "several algorithms have been developed since , to generate all the possible permutations of @xmath22 elements .",
    "most of them have been compared to see what is their best implementations on real computer , on surveys published in the field in 1960 by d.h .",
    "lehmer @xcite , in 1970 - 71 by r.j .",
    "ord - smith @xcite and in 1977 by r. sedgewick @xcite . to have an overview of the history , here we show some studied methods .",
    "+ in @xcite , sedgewick have review many permutation generation algorithms . from that paper , a natural way to permute an array of elements on a computer is to exchange two of its elements .",
    "the fastest permutation algorithms operate in this way : all @xmath9 permutations of @xmath2 elements are produced by a sequence of @xmath23 exchanges . several techniques using exchange such as recursive method and adjacent exchange",
    "is then described . with recursive method , for an array p , to generate all permutations of p[1],@xmath24 , p[n ] .",
    "we repeat n times the step : `` first generate all permutations of p[1 ] , @xmath24 , p[n-1 ] , then exchange p[n ] with one of the elements p[1],@xmath24 , p[n-1 ] '' . as this is repeated , a new value is put into p[n ] each time .",
    "the various methods differ in their approaches to filling p[n ] with the n original elements .",
    "one of the earliest algorithm based on this method was published by m.b .",
    "wells in 1960 @xcite .",
    "+ for adjacent exchanges , perhaps the most prominent permutation enumeration algorithm was formulated in 1962 by s.m .",
    "johnson @xcite and h.f .",
    "trotter @xcite , apparently independently .",
    "they discovered that it was possible to generate all @xmath9 permutations of @xmath2 elements with @xmath25 exchanges of adjacent elements .",
    "the method is based on the natural idea that for every permutation of @xmath26 elements we can generate @xmath2 permutations of @xmath2 elements by inserting the new element into all possible positions .",
    "+ it is the permutation generation method that determines the order of a list of permutations . in fact , there is a natural order of all permutations called lexicographic or alphabetical order @xcite . in the proper sense of the word , a list of permutations is in lexicographic order if these permutations are sorted as they would appear in a dictionary . strictly speaking ,",
    "if the @xmath2 items going through permutations are ordered by a precedence relation @xmath27 , then permutation @xmath28 precedes permutation @xmath29 if and only if , for some @xmath30 , we have @xmath31 for all @xmath32 and @xmath33 @xcite .",
    "furthermore , there is a kind of `` reverse lexicographic '' ordering @xcite , also called `` reverse colex order '' @xcite , which is the result of reading the lexicographic sequence backwards and the permutations from right to left .",
    "+ although various methods have been proposed to generate permutations in lexicographic order , they can be classified into two categories @xcite .",
    "some of these methods require the generation of the next permutation from the beginning while others produce it by a small modification of the predecessor permutation @xcite .",
    "djamegni and m. tchuente @xcite proposed in 1997 an algorithm to solve the open problem of designing a cost - optimal parallel algorithm for generating permutations of @xmath34 elements out of the set @xmath35 , in lexicographic order . in 2009 , ting kuo @xcite have proposed a new method for generating permutations in lexicographic order using ranking an unranking functions .",
    "+ in the case where @xmath2 is so large , it is difficult to generate all permutations of @xmath2 elements .",
    "many authors have studied random generation permutations @xcite . in their paper ,",
    "wendy myrvold and frank ruskey @xcite propose a ranking function for the permutations on n symbols wich assigns a unique integer in the range @xmath36 $ ] to each of the @xmath9 permutations .",
    "also , they propose an unranking function for which , given an integer between 0 and @xmath25 , the value of the function is the permutation having this rank .",
    "this is normally done by establishing some one - to - one correspondence between a permutation and a random number between 0 and @xmath25 .",
    "their algorithms are presented as follows .",
    "first of all , let s remind that a permutation of order n is an arrangement of n symbols .",
    "we denoted by @xmath37 the set of all permutations over @xmath38 .",
    "the array @xmath39 $ ] is initialized to the identity permutation ( or some other permutation ) and then the following loop is executed @xcite + @xmath40 * for * @xmath41 * do * + @xmath42,\\pi[rand(k)])$ ] ; + where the call @xmath43 should produce a random integer in the range @xmath44 . +",
    "this algorithm produces a permutation selected uniformly at random from amongst all permutations in @xmath37 .",
    "let @xmath45 be the sequence of random elements produced by the algorithm , where @xmath46 .",
    "since there are exactly @xmath47 such sequences , each different sequence must produce a different permutation .",
    "thus we should be able to unrank if we can take an integer @xmath48 in the range @xmath49 and turn it into a unique sequence of values @xmath50 , where @xmath46 .",
    "the details are given below @xcite .",
    "+ to unrank a permutation we first initialize @xmath51 to be the identity permutation : @xmath52 = i$ ] , for @xmath53 @xcite . + * procedure * @xmath54 + @xmath40 * if * @xmath55 * then * + @xmath56,\\pi[r$ ] mod @xmath57)$ ] ; + @xmath58 ; + @xmath40 * fi * ; + @xmath59*end * ;      to rank , first compute @xmath60 .",
    "this can be done by iterating + @xmath61 = i$ ] , for @xmath62 . in the algorithm",
    "below , both @xmath51 and @xmath60 are modified @xcite .",
    "+ * function * @xmath63:integer + @xmath40 * if * @xmath64 * then * return(0 ) * fi * ; + @xmath65 $ ] ; + @xmath56,\\pi[\\pi^{-1}[n-1]])$ ] ; + @xmath66,\\pi^{-1}[n-1])$ ] ; + @xmath67return@xmath68 ; + @xmath59*end * ;",
    "as presented in the related work section , the main problem that all hiding techniques face in text steganography is the low embedding capacity of secret data in text files .",
    "thus , in the frame of designing hiding techniques using text files as cover media , our work focused on how to take advantage of permutations to generate an innocent - looking list of pseudo - randomly sorted strings and thus increase its embedding capacity .",
    "+ in that frame , we have been interested by the work of hioki @xcite , who defined a permutation steganography that embeds a secret message as a number corresponding to a permutation that is represented by a tuple of cover elements .",
    "he exhibited an embedding capacity equal to @xmath69 .",
    "what we noticed in his work , is the fact that his embedding capacity does nt take into account the size of the cover elements , where as in many papers ( @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xmath24 ) the embedding capacity is expressed by the following formula : thus by applying the above formula in the work of hioki @xcite , one can see that , his embedding capacity will be subject to reduction according to the cover elements used to hide a secret message .",
    "+ also in that method , he raised the fact that data of the cover object , subject to modification in order to embed a secret message , might be detected by an attacker trying to intercept or eliminate the message .",
    "the detection can be effective if that attacker finds some unusual arrangements of data inside the stego object .",
    "+ subsequently , in our work we have looked for and selected a particular cover media with the property that data contained inside can be modify without raising , up to a certain limit , suspicions : _ list _ , more precisely _ list of strings_. this choice have been guided by the work of desoky on list - based steganography methodology @xcite , in which data are concealed in textual lists of itemized data .",
    "+ also , as we wished to make use of the power of permutations , and looked for a way to scramble data differently from the standard way ( standard permutation of @xmath2 ordered elements ) used by hioki @xcite , we have studied permutation algorithms . in the literature ,",
    "we have been interested by the unranking and ranking permutation algorithms of wendy et al .",
    "@xcite , to sort a given list of strings , in a way that the queueing number of a permutation allows us to get the secret message and also to find in which order that list should be reordered .",
    "as below , we are making use of cover lists to hide secret message , it is important to understand the structure of a list .",
    "we define a list as follows :     + a list @xmath0 is a matrix of dimensions @xmath70 , where @xmath2 is the number of lines , @xmath1 the number of columns and @xmath71 $ ] a string of characters ( 0@xmath72i@xmath27n , 0@xmath72j@xmath27 m ) .",
    "we can have as example of lists : market list , sports betting ticket , flight board , bank account history , registration lists , @xmath24 further forward , to illustrate our work we take as an example list , a recording sheet of all payment transactions made by the members of a development association .     +",
    "a list @xmath0 with semantically low dependancy between columns is a matrix of dimensions @xmath70 , where @xmath2 is the number of lines , @xmath1 the number of columns , @xmath71 $ ] a string of characters @xmath73 and there is no or a low semantic relationship between any couple of columns taken from @xmath0 .",
    "this definition is introduced to show that in order to reduce as much as possible the factors that may raise the doubt of a cover communication by an eavesdropper , it is important that the columns taken in pairs have no semantic relationship .",
    "+ for example , a couple of columns _ ( name , phone number ) _ , or _ ( name , address ) _ , shortly after swapping the information will raise suspicion if the attacker notices mistakes ( lack of correspondence ) between a phone number or address and certain names .",
    "the notion of _ semantic relationship _ is similar to the definition of _ functional dependancy _ seen in relational database theory@xcite , stated as follows : +     + given a relation r , a set of attributes x in r is said to functionally determine another set of attributes y , also in r , ( written @xmath74 ) if , and only if , each x value in r is associated with precisely one y value in r ; r is then said to satisfy the functional dependency @xmath74 .",
    "in other words , if the values for the x attributes are known ( say they are x ) , then the values for the y attributes corresponding to x can be determined by looking them up in any tuple of r containing x.@xcite + thus , to achieve a better embedding capacity , one may ensure that the cover list selected contains columns with no functional dependency .",
    "here we present two different approaches , using the power of permutations , to hide a secret message .",
    "each one of these approaches is described by a stegosystem which is a couple of algorithms to hide and recover a secret message .",
    "note that , before beginning a cover communication , alice and bob can decide to encrypt or not their secret messages using a symmetric or asymmetric cipher method .      in this approach , to hide a secret message in a cover list containing @xmath2 lines and @xmath1 columns @xmath75 , alice needs to split her secret message in binary blocks of decimal values less than @xmath9 and hide each block in each column , using this approach s hiding method .      without loss of generality ,",
    "we assume that @xmath76 ( binary length of the secret message ) is less or equal to @xmath77 , which is the maximum number of bits that can be embedded in @xmath0 .",
    "the hiding method proceeds as follows : + * pre - condition : * the cover list @xmath0 does not have any functional dependancy . + * input : * @xmath4 : secret message ; @xmath0 : list of @xmath1 columns containing @xmath2 lines of strings . + * output : * @xmath0 : stego - list with @xmath4 embedded in it + * step 1 * : compute the number of blocks @xmath78 : @xmath79 .",
    "+ * step 2 * : divide @xmath4 in @xmath78 blocks of length less or equal to @xmath80 , and for each block @xmath81 $ ] obtained @xmath82 , add a control bit with value @xmath83 at the beginning , to keep , if there exists , _",
    "`` 0 '' _ found at first bit position of @xmath81 $ ] .",
    "thus each block would be with a maximal length equal to @xmath84 ; + * step 3 * : for each block @xmath85 compute its decimal value @xmath86 $ ] ; + * step 4 * : for ( @xmath87 ) do : + @xmath40 * step 4.1 * : sort column @xmath88 $ ] in the ascending order ; + @xmath40 * step 4.2 * : generate an array @xmath89 , filled with integers taken between @xmath90 and @xmath26 as follows :    _ for ( @xmath91 ) do @xmath92 = i$ ] ; + _",
    "@xmath40 * step 4.3 * : use the unranking algorithm of wendy et al .",
    "@xcite , specified previously , to generate a permutation corresponding to the computed value @xmath86 $ ] as follows :    @xmath93 , a)$ ] ; +    @xmath40 * step 4.4 * : fill @xmath94 , a vector that would contain strings taken from @xmath88 $ ] , the following way :    _ for ( @xmath95 ) do @xmath96 = l[a[i ] , j];$ ] + _    @xmath40 * step 4.5 * : copy @xmath94 in @xmath88 $ ] as follows :    _ for ( @xmath95 ) do @xmath97 = t1[i];$ ] + _    * step 5 * : return @xmath0 ; + * time complexity * : @xmath98 .",
    "this time complexity depends on the sort algorithm used , and here we assume the use of the quicksort algorithm @xcite .      to retrieve secret message from a stego - list @xmath0 encoded with the above procedure using the recovery process , that list must be recovered .",
    "then the following procedure can be applied : + * input : * @xmath0 : stego - list ; + * output : * @xmath4 : secret message + * step 1 * : retrieve dimensions ( @xmath1 and @xmath2 ) of @xmath0 and initialize @xmath99 ; + * step 2 * : for ( @xmath100 ) do : + @xmath40 * step 2.1 * : fill @xmath94 , a vector that would contain strings , with strings of @xmath88 $ ] in the ascending order ; + @xmath40 * step 2.2 * : fill @xmath101 , with the position indexes of each string of @xmath88 $ ] as follows :    _ for ( @xmath91 ) do @xmath102 = getindexof(l[i , j ] , t1)$ ] ; + _",
    "@xmath40 * step 2.3 * : compute @xmath103 as follows :    _ for ( @xmath91 ) do @xmath104 = i;$ ] + _",
    "@xmath40 * step 2.4 * : use the ranking algorithm of wendy et al .",
    "@xcite , specified previously , to generate the rank of the permutation , corresponding to the computed value @xmath86 $ ] as follows :    @xmath86 = rank(n , t2 , t3)$ ] ; +    @xmath40 * step 2.5 * : convert each @xmath86 $ ] into its binary sequence @xmath81 $ ] , @xmath105 + * step 3 * : compute @xmath4 with the following process : + @xmath40 @xmath106 + @xmath40 @xmath107 ) do)\\ { + @xmath108 _ remove control bit from _ @xmath81 $ ] ; + @xmath108 @xmath109 $ ] + @xmath110 } + * step 4 * : return the secret message @xmath4 ; + where @xmath111 , t1)$ ] , is a function that seeks and retrieves the position index of @xmath71 $ ] in @xmath94 , @xmath112 , and is described as follows : + * function * getindexof(element a , vector t ) : int + @xmath40 boolean bool = true ; + @xmath40 int @xmath113 ; + @xmath40 int @xmath114;(the number of elements contained in @xmath115 ) + @xmath40 while@xmath116 do + @xmath67 if @xmath117)$ ] @xmath118 ; + @xmath67 else @xmath119 ; + @xmath40 endwhile ; + @xmath40 return @xmath120 ; + * end ; * + * time complexity * : @xmath121 , as at step 2.2 @xmath122 is called @xmath2 times and does in the worst case , @xmath2 comparisons .      with this approach , blocks of secret message can be independently hidden in the cover list ; meaning it s not compulsory to start by embedding the first block in the first column , then move to the next block and corresponding column .",
    "alice can randomly treat each couple @xmath123 , column[j])$ ] , @xmath124 , before returning a stego list , thus allowing it to be implemented on a parallel computer that would help reducing it s time complexity .",
    "+ this approach is similar to hioki s permutation steganography @xcite , for @xmath125 .",
    "also , the inconvenient faced by this approach is due to the fact that if lines of @xmath0 are sorted by an eavesdropper , the secret message would be lost ; thus to reduce the risk of losing that secret message , we ve developed a second approach .      in this approach , as in the first one , we assume that @xmath126 .",
    "+ to hide a secret message in a cover list containing @xmath2 lines and @xmath1 columns @xmath75 , alice needs to split her secret message in binary blocks of decimal values less than @xmath9 and hide each block @xmath81 $ ] s decimal value @xmath86 $ ] in each column ( as seen in the previous section ) .",
    "+ in this particular approach , we defined and made use of a notion of _ critical column _ , which is a column that must not be touched by the embedding process , in order to let an attacker think that nothing is wrong with the list and also to retrieve the information , even if lines of @xmath0 get sorted or subject to a permutation by an attacker or anybody else .",
    "+ usually , it is the first column that catches the attention of a reader , because it contains information such as , line numbers , names of persons , names of products , @xmath24 ; and if that column is seen unsorted for no reason , a cover communication can be implied .      *",
    "pre - condition : * the cover list @xmath0 does not have any functional dependancy . +",
    "* input : * @xmath0 : list of strings of @xmath2 lines and @xmath1 columns . + * output : * @xmath0 : stego - list with @xmath4 embedded in it + * step 1 * : fix the critical column to the first column of @xmath0 @xmath127)$ ] ; + * step 2 * : compute the number of blocks @xmath78 : @xmath79 .",
    "note that the maximum value of @xmath78 as a critical column has been fixed is @xmath128 . +",
    "* step 3 * : divide @xmath4 in @xmath78 blocks of length less than @xmath129 , and for each block @xmath81 $ ] obtained , add a control bit with value @xmath83 at the beginning , to keep , if there exists , _",
    "`` 0 '' _ found at first bit position of @xmath81 $ ] .",
    "thus each block would be with a maximal length equal to @xmath84 ; + * step 4 * : for each @xmath81 $ ] compute its decimal value @xmath86 $ ] ; + * step 5 * : sort lines of @xmath0 in the ascending ( or descending ) order of elements taken from that critical column ; + * step 6 * : for ( @xmath130 ) do + @xmath40**step 6.1 * * : copy in @xmath34 elements of @xmath0 from the @xmath131 to the @xmath132 column , as follows : + _ @xmath67for ( @xmath133 ) + @xmath134for ( @xmath135 ) do @xmath136 = l[k , l]$ ] ; + _",
    "@xmath40**step 6.2 * * : sort lines of @xmath34 in the ascending ( or descending ) order of elements of its @xmath137 column ; + @xmath40**step 6.3 * * : generate an array @xmath89 , filled with integers taken between @xmath90 and @xmath26 as follows :    _ for ( @xmath91 ) do @xmath92 = i$ ] ; + _",
    "@xmath40**step 6.4 * * : use the unranking algorithm of wendy et al .",
    "@xcite , specified previously , to generate a permutation corresponding to the computed value @xmath86 $ ] as follows :    @xmath138 , a)$ ] ; +    @xmath40**step 6.5 * * : fill @xmath94 with strings taken from the @xmath137 column of @xmath34 , @xmath139)$ ] and fill it the following way :    _ for ( @xmath95 ) do @xmath96 = m[a[i],0];$ ] + _",
    "@xmath40**step 6.6 * * : copy @xmath94 in @xmath140 $ ] :    _ for ( @xmath95 ) do @xmath141 = t[i]$ ] ; + _",
    "@xmath40**step 6.7 * * : copy @xmath34 in @xmath0 as follows : + _ @xmath67for ( @xmath133 ) + @xmath134for ( @xmath135 ) do @xmath142 = m[k , l]$ ] ; + _    * step 7 * : ( optional ) permute randomly lines of @xmath0 ; + * step 8 * : return @xmath0 ; + * time complexity * : @xmath143 .",
    "this time complexity depends on the sort algorithm used at step 6.2 , and here we assume the use of the quicksort algorithm @xcite .      as in the previous recovery method , to retrieve secret message from a stego - list @xmath0 encoded with the above procedure using the recovery process , that list must be recovered .",
    "then the following procedure can be applied : + * input : * @xmath0 : stego - list . +",
    "* output : * @xmath4 : secret message + * step 1 * : retrieve dimensions ( @xmath1 and @xmath2 ) of @xmath0 and initialize @xmath99 ; + * step 2 * : sort lines of @xmath0 in the ascending ( or descending ) of elements of @xmath144 $ ] ; + * step 3 * : for ( @xmath145 ) do : + @xmath40 * step 3.1 * : fill @xmath94 with strings of @xmath88 $ ] in the ascending order ; + @xmath40 * step 3.2 * : fill @xmath101 with position indexes of each string of @xmath88 $ ] as follows :    _ for ( @xmath91 ) do @xmath146 = getindexof(l[i , j ] , t1)$ ] ; + _",
    "@xmath40 * step 3.3 * : compute @xmath103 as follows :    _ for ( @xmath91 ) do @xmath104 = i$ ] ; + _    @xmath40 * step 3.4 * : use the ranking algorithm of wendy et al .",
    "@xcite , specified previously , to generate the rank of the permutation , corresponding to the computed value @xmath86 $ ] as follows :    @xmath86 = rank(n , t2 , t3)$ ] ; +    @xmath40 * step 3.5 * : sort lines of @xmath0 in the ascending ( or descending ) order of elements taken from @xmath131 column of @xmath0 ; + * step 4 * : convert each @xmath86 $ ] into its binary value @xmath81 $ ] , @xmath105 + * step 5 * : compute @xmath4 with the following process : + @xmath40 @xmath106 + @xmath40 @xmath107 ) do)\\ { + @xmath108 _ remove control bit from _ @xmath81 $ ] ; + @xmath108 @xmath109 $ ] + @xmath110 } + * step 6 * : return the secret message @xmath4 ; + where @xmath111 , t1)$ ] , is a function that seeks and retrieves the position index of @xmath71 $ ] in @xmath94 , @xmath112 , as described in the first approach section . +",
    "* time complexity * : @xmath121 , as it depends on the use of the quicksort algorithm @xcite .",
    "the major advantage of this second approach over the first , is that it resists lines sorting of l. if the lexicographical or alphabetically order of lines l , depending on the critical column , is scrambled by an eavesdropper , bob , to retrieve the secret message , just have to sort rows in the lexicographical or alphabetical order of the critical column elements before initiating the recovery method .      as in @xcite",
    ", we define bit rate or hiding capacity as the size of the hidden message relative to the size of the cover",
    ". it can be formulate as follows :    as the number of permutations of @xmath2 distinct elements is @xmath9 , it can be represented on @xmath69 bits .",
    "thus , by applying the hiding method , one can see that the longest secret message that can be hidden using @xmath0 is of bit length @xmath147 , for the first approach and for the second approach we have precisely @xmath148 . without taking in consideration the size of the cover document as in @xcite ,",
    "we ve achieve a better embedding capacity ( ours is @xmath147 and theirs is @xmath69 ) , as they ve taken a line of @xmath1 columns as a line of _ one _ column , which is not our case .",
    "+ now , if we assume @xmath5 to be the average length of a string contained in @xmath0 , then the length of the stego cover would be @xmath149 .",
    "thus , we can express the embedding capacity by the following expression , by taking into consideration the second approach :     + given a secret message @xmath3 and a cover list @xmath0 containing @xmath2 lines and @xmath1 columns , with semantically low dependancy between columns , where each string contained in it is with average length @xmath5 , the embedding capacity is given by :    @xmath150 @xmath151 .",
    "@xmath152    by using stirling s approximation @xcite for factorials , which is a very powerful approximation , leading to accurate results even for small values of @xmath2 , stated as follows :    @xmath153    we can deduce that :    @xmath150 @xmath154 .    thus we have the following corollary :     + given a secret message @xmath3 and a cover list @xmath0 containing @xmath2 lines and @xmath1 columns , with semantically low dependancy between columns , where each string contained in it is with average length @xmath5 , the embedding capacity is given by :    @xmath150 @xmath155 .    @xmath152",
    "we conducted some experiments on our method to analyze its performance .",
    "first of all we ve applied our approaches over a data sample , then made some computation and drawn a curve showing the evolution of the embedding capacity with respect of the size of the cover list .",
    "after that we computed and put in a table de the embedding capacity for lists with 3 columns and finally we ve compared our results with those found in the literature .      in this experiment",
    "we ve considered as cover list @xmath0 ( see table  [ tab : devass ] ) , a text file containing all the payment operations done over a certain period of time by some members of a development association , where the first column contains names of these members , the second one , the minimal amounts of money expected for each one and the remaining columns , amounts of money each one paid per month ; and as secret message the following binary sequence : @xmath156 @xmath157;.        jean kam & 150000 & 20000 & 30000 & 80000",
    "+    sly dolce & 35000 & 5000 & 25000 & 15000 +    menwick & 70000 & 35000 & 5000 & 10000 +    sarah dong & 45000 & 25000 & 10000 & 5000 +    eddy eko & 50000 & 15000 & 20000 & 30000 +    lyne wirl & 180000 & 100000 & 50000 & 70000 +    jack fack & 200000 & 80000 & 40000 & 60000 +    farid al & 450000 & 150000 & 200000 & 100000 +    note that , all columns of @xmath0 contains distinct strings . +      with this approach , to hide the secret message , we made use of all the columns .",
    "we proceeded as follows :    * we computed the maximum number of bits that can be hidden in a column : @xmath158 . then saw that a maximum number of bits @xmath159 than can be hidden in @xmath0 , is greater than the size of @xmath4 @xmath160 ; * we divided @xmath4 in @xmath1 blocks of length less than @xmath161 , and added a control bit with value @xmath83 at the end of each block : @xmath162 = 101000010010 $ ] , @xmath163 = 101111010011 $ ] , @xmath164 = 110010010100 $ ] , @xmath165 = 110011110101 $ ] , @xmath166 = 1010101110010 $ ] ; * we computed for each block its decimal value : @xmath167 = 2578 $ ] , @xmath168 = 3027 $ ] , @xmath169 = 3220 $ ] , @xmath170 = 3317 $ ] , @xmath171 = 5490 $ ] ; * for each column @xmath85 , we ve applied the @xmath86^{th}$ ] permutation , allowing us to hide each block @xmath172 $ ] .",
    "we ve obtained a stego list presented by the table  [ tab:1stapproach ] ; * the embedding capacity : @xmath173 . where the average @xmath5 is obtained by dividing the number of characters used _",
    "( 247 characters ) _ by the number of strings used _ ( 40 strings)_.        jean kam & 450000 & 80000 & 25000 & 60000 + & 50000 & 20000 & 20000 & 70000 + & 180000 & 5000 & 5000 & 80000 + & 45000 & 15000 & 500000 & 30000 + & 150000 & 150000 & 30000 & 10000 + & 200000 & 100000 & 250000 & 100000 + & 35000 & 25000 & 10000 & 5000 + & 70000 & 35000 & 40000 & 15000 +      with this approach , to hide the secret message , we made use of all the columns except the critical one , which is the first column .",
    "we proceeded as follows :    * we computed the maximum number of bits that can be hidden in a column : @xmath158 . then saw that a maximum number of bits @xmath174 than can be hidden in @xmath0 , is greater than the size of @xmath4 @xmath160 ; * we divided @xmath4 in @xmath175 blocks of length less than @xmath161 , and added a control bit with value @xmath83 at the end of each block : @xmath162 = 101000010010011 $ ] , @xmath163 = 111010011100100 $ ] , @xmath164 = 110100100111101 $ ] , @xmath165 = 101010101110010 $ ] ; * we computed for each block its decimal value : @xmath167 = 20627 $ ] , @xmath168 = 29924 $ ] , @xmath169 = 26941 $ ] , @xmath170 = 21874 $ ] ; * for each column @xmath85 , except for the critical one , we ve applied the @xmath86^{th}$ ] permutation , allowing us to hide each block @xmath172 $ ] .",
    "we ve obtained a stego list presented by the table  [ tab:2ndapproach ] ; the different steps are shown by tables  [ tab:2ndapproach1 ] ,  [ tab:2ndapproach2 ] ,  [ tab:2ndapproach3 ] ,  [ tab:2ndapproach4 ] ,  [ tab:2ndapproach5 ] ,  [ tab:2ndapproach6 ] ,  [ tab:2ndapproach7 ] , and  [ tab:2ndapproach8 ] . * the embedding capacity : @xmath176 . where the average @xmath5 is obtained by dividing the number of characters used _ ( 247 characters ) _ by the number of strings used _ ( 40 strings)_.     & 5000 & 25000 & 15000 + & 25000 & 10000 & 5000 + & 15000 & 20000 & 30000 + & 35000 & 5000 & 10000 + & 20000 & 30000 & 80000 + & 100000 & 50000 & 70000 + & 80000 & 40000 & 60000 + & 150000 & 200000 & 100000 +     & 5000 & 25000 & 15000 + & 25000 & 10000 & 5000 + & 15000 & 20000 & 30000 + & 35000 & 5000 & 10000 + & 20000 & 30000 & 80000 + & 100000 & 50000 & 70000 + & 80000 & 40000 & 60000 + & 150000 & 200000 & 100000 +     & 5000 & 25000 & 15000 + & 15000 & 20000 & 30000 + & 20000 & 30000 & 80000 + & 25000 & 10000 & 5000 + & 35000 & 5000 & 10000 + & 80000 & 40000 & 60000 + & 100000 & 50000 & 70000 + & 150000 & 200000 & 100000 +     & 80000 & 25000 & 15000 + & 100000 & 20000 & 30000 + & 25000 & 30000 & 80000 + & 15000 & 10000 & 5000 + & 150000 & 5000 & 10000 + & 5000 & 40000 & 60000 + & 20000 & 50000 & 70000 + & 35000 & 200000 & 100000 +     & 150000 & 5000 & 10000 + & 15000 & 10000 & 5000 + & 100000 & 20000 & 30000 + & 80000 & 25000 & 15000 + & 25000 & 30000 & 80000 + & 5000 & 40000 & 60000 + & 20000 & 50000 & 70000 + & 35000 & 200000 & 100000 +     & 150000 & 25000 & 10000 + & 15000 & 20000 & 5000 + & 100000 & 200000 & 30000 + & 80000 & 30000 & 15000 + & 25000 & 50000 & 80000 + & 5000 & 10000 & 60000 + & 20000 & 5000 & 70000 + & 35000 & 40000 & 100000 +     & 15000 & 20000 & 5000 + & 150000 & 25000 & 10000 + & 80000 & 30000 & 15000 + & 100000 & 200000 & 30000 + & 5000 & 10000 & 60000 + & 20000 & 5000 & 70000 + & 25000 & 50000 & 80000 + & 35000 & 40000 & 100000 +     & 15000 & 20000 & 100000 + & 150000 & 25000 & 30000 + & 80000 & 30000 & 80000 + & 100000 & 200000 & 10000 + & 5000 & 10000 & 70000 + & 20000 & 5000 & 5000 + & 25000 & 50000 & 60000 + & 35000 & 40000 &",
    "15000 +        eddy eko & 150000 & 15000 & 20000 & 100000 + & 35000 & 150000 & 25000 & 30000 + & 180000 & 80000 & 30000 & 80000 + & 450000 & 100000 & 200000 & 10000 + & 50000 & 5000 & 10000 & 70000 + & 200000 & 20000 & 5000 & 5000 + & 45000 & 25000 & 50000 & 60000 + & 70000 & 35000 & 40000 & 15000 +      by fixing the average bit length of a string to @xmath177 bits and varying the length of the cover list @xmath0 as shown on figure  [ fig : embeddingcapacityevolution ] and we ve noticed that , to increase the embedding capacity and thus attain optimal efficiency , the length of @xmath0 must be greater than the average bit length of strings of @xmath0 .",
    "+    ]    here , one can see that , as @xmath5 is fixed , the more @xmath2 grows away from the the average length of a string @xmath5 , the more the embedding capacity grows .",
    "so in the condition that @xmath178 , an optimal embedding capacity can be obtained .      with experiment 2 we ve shown that , the more the length of a list grows the more the embedding capacity does and with experiment 1 that the growth is related to the number of columns found in the cover list .",
    "+ obtained results exposed the fact that , if we couple the length of a list with the number of columns contained in it , we can reach a greater embedding capacity .",
    "thus , by fixing the average bit length of a string to @xmath177 bits , as in experiment 2 and varying the length of the cover list @xmath0 containing 3 columns we ve obtained the following embedding capacities , shown on table  [ tab : variation3cols ] :     & @xmath179 & @xmath180 & @xmath181 & @xmath182 & @xmath183 +     & @xmath184 & @xmath185 & @xmath186 & @xmath187 & @xmath188 +     + several examples can be taken , in order to increase the embedding capacity , as there exists many kind of documents in our environment , containing big lists , with numerous columns , thus allowing it .",
    "we can , for example have :    * list of emails , taking in consideration , the sender s name , the subject , the date of emission and the content of the message ; * registration lists , for travels , bets or other , considering the name , date and time ; * inventory of products of a warehouse , considering the name , quantities , manufacturer s name , and any other useful information that can be played with ; * list of cash deposit per day of clients of a bank or microfinance ; * @xmath24    lists can also be constructed from tables of databases , containing functional dependancies , by creating transient tables with no dependancies , that can be used as cover media .",
    "+ for instance , from a table _ * purchase * ( , date , time , reference , quantity , unit price , total price ) _ , taken from a given database , where sales are done by some clients of a store , containing functional dependancies @xmath189 and @xmath190 , we can construct a transient table ( table  [ tab : dblist ] ) containing _ reference _ , and _",
    "quantity _ as columns , that can be used as cover in our hiding process .",
    "t - shirt & 5 + & 10 + & 2 + & 1 + & 12 +    we can also construct a transient table containing for each product the quantity sold per day over a year , as presented by the table  [ tab : dblist2 ] , that can hide a large amount of data .",
    "+     365 * +    t - shirt & 100 & 150 & 63 & @xmath24 & 45 + & 50 & 96 & 7 & @xmath24 & 33 + & 45 & 35 & 14 & @xmath24 & 10 + & 36 & 23 & 23 & @xmath24 & 5 + & 85 & 75 & 78 & @xmath24 & 20 +    also , if a list of size @xmath2 with several columns , possesses a column which contains for instance only @xmath1 different elements , meaning that each element has an average of @xmath191 occurrences , it is possible to hide @xmath191 blocks of secret message in that column , where each block is hidden , one after one , using the @xmath1 elements allowing the computation of the permutation that hides it .",
    "we have also compared our results with that of the recently developed data hiding schemes , as shown in the table  [ tab : comparison ] , to present the effectiveness of our method .",
    "note that the embedding capacity can grow further , if alice , the sender , choose the right compromise between the average bit length of strings contained in a cover list , the size and number of columns of that list .     &",
    "1.27 & using secret message at spamimc.com + & 0.29 & using the samples of referred articles + & 0.5 & based on the referred paper + & 0.30 & reported in the referred paper + & 0.12 & reported in the referred paper + & 0.33 & noted by authors in referred paper + & 0.35 & based on the referred paper + & 2.17 & using the given sample in @xcite + & 3.53 & using the given sample in @xcite + & 3.87 & based on the referred papers + & 6.91 & using sample message at eberl.net + & 6.92 & using example of the same article + & 7.03 & using the same example of @xcite + & * 25,587% * & using a list of 3 columns of 1000 + *  * & *  * & strings with average length 100 .",
    "a novel approach of list - based steganogaphy have been proposed based on a list of sequences of characters pseudo - randomly reordered , in a way that it can embed a secret message that only the sender ( alice ) and the receiver ( bob ) can retrieve .",
    "experimental results showed the feasibility of the proposed method and a comparative study showed that it performs better than some of the existing schemes in terms of embedding capacity .",
    "further researches can be done to improve this model , and use it on other type of cover documents such as image , sound or video files .",
    "this work was supported by _ ummisco _ , by _ lirima _ , by _ cetic _ and by the _ university of yaounde 1_.            b. murphy & c. vogel , `` the syntax of concealment : reliable methods for plain text information hiding '' , _ proceedings of the spie international conference on security , steganography , and watermarking of multimedia contents _ , pp .",
    "1503 - 1507 , 2007 .",
    "h. nakagawa , k. sampei , t. matsumoto , s. kawaguchi , k. makino & i. murase , `` text information hiding with preserved meaning  a case for japanese documents '' , _ ipsj transactions 42 _ , vol .",
    "9 , pp . 23392350 , 2001 .",
    "l. bin , n. guiqiang , l. jianxin & z. xue , `` bwt - based data preprocessing for lzw '' , _ proceedings of the 2011 international conference on multimedia and signal processing ( cmsp ) _ , vol .",
    "37 - 40 , 2011 .",
    "l. li , l. huang , x. zhao , w. yang & z. chen , `` a statistical attack on a kind of word - shift text - steganography '' , _",
    "4th international conference on intelligent information hiding and multimedia signal processing _ , harbin , china , pp.15031507 , 2008 .",
    "por & b. delina , `` information hiding : a new approach of text steganography '' , _",
    "7th wseas international conference on applied computer and applied computational science ( acacos o8 ) _ , hangzhou , china , pp .",
    "689 - 695 , 2008 .",
    "m. chapman & g.i .",
    "davida , `` hiding the hidden : a software system for concealing cipher text as innocuous text '' , _ the proceedings of the international conference on information and communications security .",
    "lecture notes in computer science _ , vol .",
    "1334 , pp . 335345 , 1997 .",
    "m. chapman & g.i .",
    "davida , `` a practical and effective approach to largescale automated linguistic steganography '' , _ proceedings of the information security conference ( isc 01 ) , lecture notes in computer science _ ,",
    "2200 , pp . 156165 , 2001 .",
    "m. chapman & g.i .",
    "davida , `` plausible deniability using automated linguistic steganography '' , _ international conference on infrastructure security ( infrasec 02 ) .",
    "lecture notes in computer science _ , vol . 2437 , pp .",
    "276287 , 2002 .",
    "m. topkara , u. topkara & m.j .",
    "atallah , `` information hiding through errors : a confusing approach '' , _ proceedings of spie international conference on security , steganography , and watermarking of multimedia contents _ , san jose , ca , usa , january 29february 1 , 2007 .",
    "r. kumar , s. chand & s. singh , `` an email based high capacity text steganography scheme using combinatorial compression '' , _ fifth international conference on innovative mobile and internet services in ubiquitous computing ( imis ) _ , ieee , pp .",
    "503 - 508 , 2011 .                s.r .",
    "govada , b.s .",
    "kumar , m. devarakonda & m.j .",
    "stephen , `` text steganography with multi level shielding '' , _ international journal of computer science issues _ , vol",
    ". 9 , issue 4 , no .",
    "401 - 405 , 2012 .",
    "wang , c.c .",
    "chang , c.c .",
    "lin & m.c .",
    "li , `` a reversible information hiding scheme using left - right and up - down chinese character representation '' , _ journal of systems and software _ , vol .",
    "82 , no . 8 , pp . 1362 - 1369 , 2009 ."
  ],
  "abstract_text": [
    "<S> we propose a new model of steganography based on a list of pseudo - randomly sorted sequences of characters . given a list @xmath0 of @xmath1 columns containing @xmath2 distinct strings each , with low or no semantic relationship between columns taken two by two , and a secret message @xmath3 , our model embeds @xmath4 in @xmath0 block by block , by generating , for each column of @xmath0 , a permutation number and by reordering strings contained in it according to that number . </S>",
    "<S> where , letting @xmath5 be average bit length of a string , the embedding capacity is given by @xmath6 $ ] . </S>",
    "<S> we ve shown that optimal efficiency of the method can be obtained with the condition that @xmath7 . </S>",
    "<S> the results which has been obtained by experiments , show that our model performs a better hiding process than some of the important existing methods , in terms of hiding capacity .    </S>",
    "<S> * keywords : * steganography , pseudorandom sort , permutation , list , strings , embedding capacity . </S>"
  ]
}