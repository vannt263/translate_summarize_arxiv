{
  "article_text": [
    "this survey is an introduction to the state of the art in the area of practical algorithms for routing in transportation networks . although a thorough survey by delling et al .",
    "@xcite has appeared fairly recently , it has become outdated due to significant developments in the last half - decade .",
    "for example , for continent - sized road networks , newly - developed algorithms can answer queries in a few hundred nanoseconds ; others can incorporate current traffic information in under a second on a commodity server ; and many new applications can now be dealt with efficiently . while delling et al .",
    "focused mostly on road networks , this survey has a broader scope , also including schedule - based public transportation networks as well as multimodal scenarios  ( combining schedule - based and unrestricted modes ) .",
    "section  [ sec : p2p ] considers shortest path algorithms for static networks ; although it focuses on methods that work well on road networks , they can be applied to arbitrary graphs .",
    "section  [ sec : road ] then considers the relative performance of these algorithms on real road networks , as well as how they can deal with other transportation applications . despite recent advances in routing in road networks ,",
    "there is still no `` best '' solution for the problems we study , since solution methods must be evaluated according to different measures .",
    "they provide different trade - offs in terms of query times , preprocessing effort , space usage , and robustness to input changes , among other factors .",
    "while solution quality was an important factor when comparing early algorithms , it is no longer an issue : as we shall see , all current state - of - the - art algorithms find provably exact solutions . in this survey , we focus on algorithms that are not clearly dominated by others . we also discuss approaches that were close to the dominance frontier when they were first developed , and influenced subsequent algorithms .",
    "section  [ sec : public ] considers algorithms for journey planning on schedule - based public transportation systems  ( consisting of buses , trains , and trams , for example ) , which is quite different from routing in road networks .",
    "public transit systems have a time - dependent component , so we must consider multiple criteria for meaningful results , and known preprocessing techniques are not nearly as effective .",
    "approximations are thus sometimes still necessary to achieve acceptable performance .",
    "advances in this area have been no less remarkable , however : in a few milliseconds , it is now possible to find good journeys within public transportation systems at a very large scale .",
    "section  [ sec : mm ] then considers a true _ multimodal _ scenario , which combines schedule - based means of transportation with less restricted ones , such as walking and cycling .",
    "this problem is significantly harder than its individual components , but reasonable solutions can still be found .",
    "a distinguishing feature of the methods we discuss in this survey is that they quickly made real - life impact , addressing problems that need to be solved by interactive systems at a large scale .",
    "this demand facilitated technology transfer from research prototypes to practice .",
    "as our concluding remarks  ( section  [ sec : conclusion ] ) will explain , several algorithms we discuss have found their way into mainstream production systems serving millions of users on a daily basis .",
    "this survey considers research published until january 2015 .",
    "we refer to the final  ( journal ) version of a result , citing conference publications only if a journal version is not yet available .",
    "the reader should keep in mind that the journal publications we cite often report on work that first appeared  ( at a conference ) much earlier .",
    "let  @xmath0 be a  ( directed ) graph with a set  @xmath1 of vertices and a set  @xmath2 of arcs .",
    "each arc  @xmath3 has an associated nonnegative _ length",
    "_  @xmath4 .",
    "the length of a path is the sum of its arc lengths . in the _ point - to - point shortest path problem _ , one is given as input the graph  @xmath5 , a source  @xmath6 , and a target  @xmath7 , and must compute the length of the shortest path from  @xmath8 to  @xmath9 in  @xmath5 .",
    "this is also denoted as  @xmath10 , the distance between  @xmath8 and  @xmath9 .",
    "the _ one - to - all _ problem is to compute the distances from a given vertex  @xmath8 to all vertices of the graph .",
    "the _ all - to - one _ problem is to find the distances from all vertices to  @xmath8 .",
    "the _ many - to - many _ problem is as follows : given a set  @xmath11 of sources and a set  @xmath12 of targets , find the distances  @xmath10 for all  @xmath13 ,  @xmath14 .",
    "for  @xmath15 we have the _ all pairs shortest path _ problem .",
    "in addition to the distances , many applications need to find the corresponding shortest paths .",
    "an _ out - shortest path tree _ is a compact representation of one - to - all shortest paths from the root  @xmath16 .",
    "( likewise , the in - shortest path tree represents the all - to - one paths . ) for each vertex  @xmath17 , the path from  @xmath16 to  @xmath18 in the tree is the shortest path .    in this section ,",
    "we focus on the basic point - to - point shortest path problem under the basic _ server model_. we assume that all data fits in ram",
    ". however , locality matters , and algorithms with fewer cache misses run faster . for some algorithms , we consider multi - core and machine - tailored implementations . in our model , preprocessing may be performed on a more powerful machine than queries  ( e.g. , a machine with more memory ) . while preprocessing may take a long time  ( e.g. , hours )",
    ", queries need to be fast enough for interactive applications .    in this section ,",
    "we first discuss basic techniques , then those using preprocessing .",
    "since all methods discussed could in principle be applied to arbitrary graphs , we keep the description as general as possible . for intuition",
    ", however , it pays to keep road networks in mind , considering that they were the motivating application for most approaches we consider .",
    "we will explicitly consider road networks , including precise performance numbers , in section  [ sec : road ] .",
    "the standard solution to the one - to - all shortest path problem is dijkstra s algorithm  @xcite . it maintains a priority queue  @xmath19 of vertices ordered by  ( tentative ) distances from  @xmath8 .",
    "the algorithm initializes all distances to infinity , except  @xmath20 , and adds  @xmath8 to  @xmath19 . in each iteration",
    ", it extracts a vertex  @xmath18 with minimum distance from  @xmath19 and _ scans _ it , i.e. , looks at all arcs  @xmath21 incident to  @xmath18 . for each such arc",
    ", it determines the distance to  @xmath22 via arc  @xmath23 by computing  @xmath24 .",
    "if this value improves  @xmath25 , the algorithm performs an arc _ relaxation _ : it updates  @xmath25 and adds vertex  @xmath22 with key  @xmath25 to the priority queue  @xmath19 .",
    "dijkstra s algorithm has the _ label - setting _ property : once a vertex  @xmath17 is scanned  ( settled ) , its distance value  @xmath26 is correct .",
    "therefore , for point - to - point queries , the algorithm may stop as soon as it scans the target  @xmath9 .",
    "we refer to the set of vertices  @xmath27 scanned by the algorithm as its _",
    "search space_. see  [ fig : literature : dijbisearchastar ] for an illustration .",
    "the running time of dijkstra s algorithm depends on the priority queue used .",
    "the running time is  @xmath28 with binary heaps  @xcite , improving to  @xmath29 with fibonacci heaps  @xcite . for arbitrary  ( non - integral ) costs , generalized versions of",
    "binary heaps  ( such as 4-heaps or 8-heaps ) tend to work best in practice  @xcite .",
    "if all arc costs are integers in the range  @xmath30 $ ] , multi - level buckets  @xcite yield a running time of  @xmath31  @xcite and work well in practice . for the average case",
    ", one can get an  @xmath32  ( linear ) time bound  @xcite .",
    "thorup  @xcite has improved the theoretical worst - case bound of dijkstra s algorithm to  @xmath33 , but the required data structure is rather involved and unlikely to be faster in practice .    in practice",
    ", one can reduce the search space using _ bidirectional search _",
    "@xcite , which simultaneously runs a forward search from  @xmath8 and a backward search from  @xmath9 .",
    "the algorithm may stop as soon as the intersection of their search spaces provably contains a vertex  @xmath34 on the shortest path from  @xmath8 to  @xmath9 . for road networks ,",
    "bidirectional search visits roughly half as many vertices as the unidirectional approach .",
    "an alternative method for computing shortest paths is the bellman - ford algorithm  @xcite .",
    "it uses no priority queue .",
    "instead , it works in rounds , each scanning all vertices whose distance labels have improved .",
    "a simple fifo queue can be used to keep track of vertices to scan next .",
    "it is a _ label - correcting _ algorithm , since each vertex may be scanned multiple times .",
    "although it runs in  @xmath35 time in the worst case , it is often much faster , making it competitive with dijkstra s algorithm in some scenarios .",
    "in addition , it works on graphs with negative edge weights .    finally , the floyd - warshall algorithm  @xcite computes distances between _ all _ pairs of vertices in  @xmath36 time . for sufficiently dense graphs ,",
    "this is faster than  @xmath37 calls to dijkstra s algorithm .",
    "dijkstra s algorithm scans all vertices with distances smaller than  @xmath10 .",
    "goal - directed techniques , in contrast , aim to `` guide '' the search toward the target by avoiding the scans of vertices that are not in the direction of  @xmath9 .",
    "they either exploit the  ( geometric ) embedding of the network or properties of the graph itself , such as the structure of shortest path trees toward  ( compact ) regions of the graph .    [",
    "[ asearch . ] ] a*search .",
    "+ + + + + + + + +    a classic goal - directed shortest path algorithm is a *  search  @xcite .",
    "it uses a potential function  @xmath38 on the vertices , which is a _ lower bound _ on the distance  @xmath39 from  @xmath18 to  @xmath9 .",
    "it then runs a modified version of dijkstra s algorithm in which the priority of a vertex  @xmath18 is set to  @xmath40 .",
    "this causes vertices that are closer to the target  @xmath9 to be scanned earlier during the algorithm .",
    "see  [ fig : literature : dijbisearchastar ] .",
    "in particular , if  @xmath41 were an _",
    "exact _ lower bound  ( @xmath42 ) , _ only _ vertices along shortest  @xmath8@xmath9 paths would be scanned .",
    "more vertices may be visited in general but , as long as the potential function is _ feasible _  ( i.e. , if  @xmath43 for  @xmath44 ) , an  @xmath8@xmath9 query can stop with the correct answer as soon as it is about to scan the target vertex  @xmath9 .",
    "the algorithm can be made bidirectional , but some care is required to ensure correctness .",
    "a standard approach is to ensure that the forward and backward potential functions are consistent . in particular",
    ", one can combine two arbitrary feasible functions  @xmath45 and  @xmath46 into consistent potentials by using  @xmath47 for the forward search and  @xmath48 for the backward search  @xcite .",
    "another approach , which leads to similar results in practice , is to change the stopping criterion instead of making the two functions consistent  @xcite .",
    "o0pt    \\(v ) at ( 0,0 ) @xmath18 ; ( t ) at ( 0,2 ) @xmath9 ; ( l1 ) at ( .5,3.5 ) @xmath49 ; ( l2 ) at ( -.5,-1.5 ) @xmath50 ; ( v ) ",
    "( t ) ; ( t ) edge ( l1 ) ; ( v ) edge [ bend right ] ( l1 ) ; ( l2 ) edge [ bend left ] ( t ) ; ( l2 ) edge ( v ) ;    in road networks with travel time metric , one can use the geographical distance  @xcite between  @xmath18 and  @xmath9 divided by the maximum travel speed  ( that occurs in the network ) as the potential function .",
    "unfortunately , the corresponding bounds are poor , and the performance gain is small or non - existent  @xcite . in practice , the algorithm can be accelerated using more aggressive bounds  ( for example , a smaller denominator ) , but correctness is no longer guaranteed . in practice ,",
    "even when minimizing travel distances in road networks , a*with geographical distance bound performs poorly compared to other modern methods .",
    "one can obtain much better lower bounds  ( and preserve correctness ) with the _ alt _  ( _ a * , landmarks , and triangle inequality _ ) algorithm  @xcite . during a preprocessing phase",
    ", it picks a small set  @xmath51 of _ landmarks _ and stores the distances between them and all vertices in the graph . during an  @xmath8@xmath9 query , it uses triangle inequalities involving the landmarks to compute a valid lower bound on  @xmath39 for any vertex  @xmath18 .",
    "more precisely , for any landmark  @xmath49 , both  @xmath52 and  @xmath53 hold .",
    "if several landmarks are available , one can take the maximum overall bound .",
    "see  [ fig : literature : alt ] for an illustration .",
    "the corresponding potential function is feasible  @xcite .",
    "the quality of the lower bounds  ( and thus query performance ) depends on which vertices are chosen as landmarks during preprocessing . in road networks , picking well - spaced landmarks close to the boundary of the graph leads to the best results , with acceptable query times on average  @xcite . for a small  ( but noticeable ) fraction of the queries ,",
    "however , speedups relative to bidirectional dijkstra are minor .    [ [ geometric - containers . ] ] geometric containers .",
    "+ + + + + + + + + + + + + + + + + + + + +    another goal - directed method is _ geometric containers_. it precomputes , for each arc  @xmath21 , an arc label  @xmath54 that encodes the set  @xmath55 of vertices to which a shortest path from  @xmath18 begins with the arc  @xmath23 . instead of storing  @xmath55",
    "explicitly ,  @xmath54 approximates this set by using geometric information  ( i.e. , the coordinates ) of the vertices in  @xmath55 . during a query ,",
    "if the target vertex  @xmath9 is not in  @xmath54 , the search can safely be pruned at  @xmath23 .",
    "schulz et al .",
    "@xcite approximate the set  @xmath55 by an angular sector  ( centered at  @xmath18 ) that covers all vertices in  @xmath55 .",
    "wagner et al .",
    "@xcite consider other geometric containers , such as ellipses and the convex hull , and conclude that bounding boxes perform consistently well .",
    "for graphs with no geometric information , one can use graph layout algorithms and then create the containers  @xcite .",
    "a disadvantage of geometric containers is that its preprocessing essentially requires an all - pairs shortest path computation , which is costly .",
    "[ [ arc - flags . ] ] arc flags .",
    "+ + + + + + + + + +    the _ arc flags _ approach  @xcite is somewhat similar to geometric containers , but does not use geometry . during preprocessing ,",
    "it partitions the graph into  @xmath56 cells that are roughly _ balanced _  ( have similar number of vertices ) and",
    "have a small number of boundary vertices .",
    "each arc maintains a vector of  @xmath56 bits  ( arc flags ) , where the  @xmath57-th bit is set if the arc lies on a shortest path to some vertex of cell  @xmath57 .",
    "the search algorithm then prunes arcs which do not have the bit set for the cell containing  @xmath9 . for better query performance ,",
    "arc flags can be extended to nested multilevel partitions  @xcite .",
    "whenever the search reaches the cell that contains  @xmath9 , it starts evaluating arc flags with respect to the  ( finer ) cells of the level below .",
    "this approach works best in combination with bidirectional search  @xcite .",
    "the arc flags for a cell  @xmath57 are computed by growing a backward shortest path tree from each boundary vertex  ( of cell  @xmath57 ) , setting the  @xmath57-th flag for all arcs of the tree .",
    "alternatively , one can compute arc flags by running a label - correcting algorithm from all boundary vertices simultaneously  @xcite . to reduce preprocessing space",
    ", one can use a compression scheme that flips some flags from zero to one  @xcite , which preserves correctness .",
    "as section  [ sec : road ] will show , arc flags currently have the fastest query times among purely goal - directed methods for road networks .",
    "although high preprocessing times  ( of several hours ) have long been a drawback of arc flags , the recent phast algorithm  ( cf .",
    "section  [ ssec : extensions ] ) can make this method more competitive with other techniques  @xcite .",
    "[ [ precomputed - cluster - distances . ] ] precomputed cluster distances .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    another goal - directed technique is _ precomputed cluster distances _  ( pcd )  @xcite . like arc flags",
    ", it is based on a  ( preferably balanced ) partition  @xmath58 with  @xmath56 cells  ( or clusters ) .",
    "the preprocessing algorithm computes the shortest path distances between all pairs of cells .",
    "the query algorithm is a pruned version of dijkstra s algorithm . for any vertex  @xmath18 visited by the search , a valid lower bound on its distance to the target",
    "is  @xmath59 , where  @xmath60 is the cell containing  @xmath18 and  @xmath22 is the boundary vertex of  @xmath61 that is closest to  @xmath9 .",
    "if this bound exceeds the best current upper bound on  @xmath10 , the search is pruned . for road networks , pcd has similar query times to alt , but requires less space .",
    "[ [ compressed - path - databases . ] ] compressed path databases .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    the compressed path databases  ( cpd )  @xcite method implicitly stores all - pairs shortest path information so that shortest paths can be quickly retrieved during queries .",
    "each vertex  @xmath17 maintains a label  @xmath62 that stores the _ first move _  ( the arc incident to  @xmath18 ) of the shortest path toward _ every _ other vertex  @xmath22 of the graph .",
    "a query from  @xmath8 simply scans  @xmath62 for  @xmath9 , finding the first arc  @xmath63 of the shortest path  ( to  @xmath9 ) ; it then recurses on  @xmath18 until it reaches  @xmath9 .",
    "explicitly storing the first arc of every shortest path  ( in  @xmath64 space ) would be prohibitive . instead ,",
    "botea and harabor  @xcite propose a lossless data compression scheme that groups vertices that share the same first move  ( out of  @xmath18 ) into nonoverlapping geometric rectangles , which are then stored with  @xmath18 .",
    "further optimizations include storing the most frequent first move as a default and using more sophisticated compression techniques .",
    "this leads to fast queries , but space consumption can be quite large ; the method is thus dominated by other approaches .",
    "cpd can be seen as an evolution of the _ spatially induced linkage cognizance _  ( silc )",
    "algorithm  @xcite , and both can be seen as stronger versions of geometric containers .",
    "( 0,0 ) rectangle ( 5,2.5 ) ; ( 0,0 ) grid ( 5,2.5 ) ;    ( 0,0 ) circle ( .5 cm ) ; ( 111 ) at ( 100:.3 ) ; ( 112 ) at ( 280:.2 ) ;    ( 0,0 ) circle ( .68 cm ) ; ( 121 ) at ( 70:.3 ) ; ( 122 ) at ( 142:.5 ) ; ( 123 ) at ( 310:.4 ) ;    ( 0,0 ) circle ( .56 cm ) ; ( 131 ) at ( 45:.3 ) ; ( 132 ) at ( 270:.35 ) ;    ( 0,0 ) circle ( .4 cm ) ; ( 141 ) at ( 0,0 ) ;    \\(21 ) at ( 1.35,1.25 ) ; ( 22 ) at ( 2.85,1.5 ) ; ( 23 ) at ( 4,1.25 ) ;    \\(21 ) edge ( 111 ) edge ( 112 ) edge ( 121 ) edge ( 122 ) edge ( 123 ) ; ( 22 ) edge ( 121 ) edge ( 122 ) edge ( 123 ) edge ( 131 ) edge ( 132 ) ; ( 23 ) edge ( 131 ) edge ( 132 ) edge ( 141 ) ;    ( 0,0 ) rectangle ( 5,2.5 ) ; ( 0,0 ) grid ( 5,2.5 ) ; ( 21 ) at ( 21 ) ; ( 22 ) at ( 22 ) ; ( 23 ) at ( 23 ) ;    \\(21 ) edge ( 22 ) edge [ bend right , dotted ] ( 23 ) ( 22 ) edge ( 23 ) ;    in 1, ... ,6 ( a ) at ( : -.25 ) ; ; in 1 , ... , ( a ) edge ( a ) ; plot [ smooth cycle , tension=0.8 ] coordinates ;    in 1, ... ,8 ( b ) at ( : -.25 ) ; ; in 1 , ... , ( b ) edge ( b ) ; plot [ smooth cycle , tension=0.8 ] coordinates ;    in 1, ... ,5 ( c ) at ( : -.25 ) ; ; in 1 , ... , ( c ) edge ( c ) ; plot [ smooth cycle , tension=0.8 ] coordinates ;    in 1, ... ,7 ( d ) at ( : -.25 ) ; ; in 1 , ... , ( d ) edge ( d ) ; plot [ smooth cycle , tension=0.8 ] coordinates ;    ( a4 ) edge ( c2 ) ( a6 ) edge ( b4 ) ( a5 ) edge ( c2 ) ( c1 ) edge ( b5 ) ( c5 ) edge ( b6 ) ( d3 ) edge ( c5 ) ( d2 ) edge ( b6 ) ( d2 ) edge ( b7 ) ( c4 ) edge ( d4 ) ;    planar graphs have small  ( and efficiently - computable ) separators  @xcite .",
    "although road networks are not planar  ( think of tunnels or overpasses ) , they have been observed to have small separators as well  @xcite .",
    "this fact is exploited by the methods in this section .    [",
    "[ vertex - separators . ] ] vertex separators .",
    "+ + + + + + + + + + + + + + + + + +    we first consider algorithms based on  _ vertex separators_. a vertex separator is a  ( preferably small ) subset  @xmath65 of the vertices whose removal decomposes the graph  @xmath5 into several  ( preferably balanced ) cells  ( components ) .",
    "this separator can be used to compute an  _ overlay graph _",
    "@xmath66 over  @xmath67 .",
    "shortcut arcs  @xcite are added to the overlay such that distances between _ any _ pair of vertices from  @xmath67 are preserved , i.e. , they are equivalent to the distance in  @xmath5 .",
    "the much smaller overlay graph can then be used to accelerate  ( parts of ) the query algorithm .",
    "schulz et al .",
    "@xcite use an overlay graph over a carefully chosen subset  @xmath67  ( not necessarily a separator ) of `` important '' vertices . for each pair of vertices",
    "@xmath68 , an arc  @xmath69 is added to the overlay if the shortest path from  @xmath18 to  @xmath22 in  @xmath5 does not contain any other vertex  @xmath70 from  @xmath67 .",
    "this approach can be further extended  @xcite to multilevel hierarchies .",
    "in addition to arcs between separator vertices of the same level , the overlay contains , for each cell on level  @xmath57 , arcs between the confining level  @xmath57 separator vertices and the interior level @xmath71 separator vertices .",
    "see  [ fig : literature : separators ] for an illustration .",
    "other variants of this approach offer different trade - offs by adding many more shortcuts to the graph during preprocessing , sometimes across different levels  @xcite .",
    "in particular _ high - performance multilevel routing _  ( hpml )  @xcite substantially reduces query times but significantly increases the total space usage and preprocessing time .",
    "a similar approach , based on path separators for planar graphs , was proposed by thorup  @xcite and implemented by muller and zachariasen  @xcite .",
    "it works reasonably well to find approximate shortest paths on undirected , planarized versions of road networks .",
    "[ [ arc - separators . ] ] arc separators .",
    "+ + + + + + + + + + + + + + +    the second class of algorithms we consider uses _ arc separators _ to build the overlay graphs . in a first step",
    ", one computes a partition  @xmath72 of the vertices into balanced cells while attempting to minimize the number of cut arcs  ( which connect boundary vertices of different cells ) .",
    "shortcuts are then added to preserve the distances between the boundary vertices within each cell .",
    "an early version of this approach is the _ hierarchical multi _  ( hiti ) method  @xcite .",
    "it builds an overlay graph containing all boundary vertices and all cut arcs .",
    "in addition , for each pair  @xmath73 of boundary vertices in  @xmath74 , hiti adds to the overlay a shortcut  @xmath69 representing the shortest path from  @xmath18 to  @xmath22 in  @xmath5 restricted to  @xmath74 .",
    "the query algorithm then  ( implicitly ) runs dijkstra s algorithm on the subgraph induced by the cells containing  @xmath8 and  @xmath9 plus the overlay .",
    "this approach can be extended to use nested multilevel partitions .",
    "hiti has only been tested on grid graphs  @xcite , leading to modest speedups .",
    "see also figure  [ fig : literature : separators ] .    the recent _ customizable route planning _",
    "( crp )  @xcite algorithm uses a similar approach , but is specifically engineered to meet the requirements of real - world systems operating on road networks .",
    "in particular , it can handle turn costs and is optimized for fast updates of the cost function  ( metric ) .",
    "moreover , it uses punch  @xcite , a graph partitioning algorithm tailored to road networks . finally , crp splits preprocessing in two phases : metric - independent preprocessing and customization .",
    "the first phase computes , besides the multilevel partition , the topology of the overlays , which are represented as matrices in contiguous memory for efficiency .",
    "note that the partition does not depend on the cost function .",
    "the second phase  ( which takes the cost function as input ) computes the costs of the clique arcs by processing the cells in bottom - up fashion and in parallel .",
    "to process a cell , it suffices to run dijkstra s algorithm from each boundary vertex , but the second phase is even faster using the bellman - ford algorithm paired with  ( metric - independent ) contraction  @xcite  ( cf .  section  [ sec : literature : road : hierarchical ] ) , at the cost of increased space usage .",
    "further acceleration is possible using gpus  @xcite .",
    "queries are bidirectional searches in the overlay graph , as in hiti .",
    "hierarchical methods aim to exploit the inherent hierarchy of road networks .",
    "sufficiently long shortest paths eventually converge to a small arterial network of important roads , such as highways .",
    "intuitively , once the query algorithm is far from the source and target , it suffices to only scan vertices of this subnetwork .",
    "in fact , using input - defined road categories in this way is a popular heuristic  @xcite , though there is no guarantee that it will find exact shortest paths .",
    "fu et al .",
    "@xcite give an overview of early approaches using this technique . since the algorithms we discuss must find exact shortest paths , their correctness must not rely on unverifiable properties such as input classifications .",
    "instead , they use the preprocessing phase to compute the importance of vertices or arcs according to the actual shortest path structure .",
    "[ [ contraction - hierarchies . ] ] contraction hierarchies .",
    "+ + + + + + + + + + + + + + + + + + + + + + + +    an important approach to exploiting the hierarchy is to use _",
    "shortcuts_. intuitively , one would like to augment  @xmath5 with shortcuts that could be used by long - distance queries to skip over `` unimportant '' vertices .",
    "o0pt    ( 0,0 ) ",
    "( 2.5,5 )  cycle ; ( s ) at ( 0.9,0.6 ) [ label = below:@xmath8 ] ; ( t ) at ( 3.4,1.3 ) [ label = below:@xmath9 ] ; ( m ) at ( 2.6,3.8 ) [ label = above:@xmath77 ; ( s ) ",
    "( m ) ; ( m ) ",
    "( t ) ; ( 5.3,0 ) edge node [ fill = white , text = kit - schwarz , sloped , anchor = center , auto = false ] vertex importance ( 5.3,5 ) ;    the _ contraction hierarchies _  ( ch ) algorithm , proposed by geisberger et al .",
    "@xcite , implements this idea by repeatedly executing a _ vertex contraction _ operation . to contract a vertex  @xmath22 ,",
    "it is  ( temporarily ) removed from  @xmath5 , and a shortcut is created between each pair  @xmath78 of neighboring vertices if the shortest path from  @xmath18 to  @xmath70 is unique and contains  @xmath22 .",
    "during preprocessing , ch  ( heuristically ) orders the vertices by `` importance '' and contracts them from least to most important .",
    "the query stage runs a bidirectional search from  @xmath8 and  @xmath9 on  @xmath5 augmented by the shortcuts computed during preprocessing , but only visits arcs leading to vertices of higher ranks  ( importance ) .",
    "see  [ fig : literature : ch ] for an illustration .",
    "let  @xmath79 and  @xmath80 be the corresponding distance labels obtained by these _ upward _ searches  ( set to  @xmath81 for vertices that are not visited ) .",
    "it is easy to show that  @xmath82 and  @xmath83 ; equality is not guaranteed due to pruning .",
    "nevertheless , geisberger et al .",
    "@xcite prove that the highest - ranked vertex  @xmath84 on the original  @xmath8@xmath9 path will be visited by both searches , and that both its labels will be exact , i.e. ,  @xmath85 and  @xmath86 .",
    "therefore , among all vertices  @xmath18 visited by both searches , the one minimizing  @xmath87 represents the shortest path .",
    "note that , since  @xmath84 is not necessarily the first vertex that is scanned by both searches , they can not stop as soon as they meet .",
    "query times depend on the vertex order . during preprocessing ,",
    "the vertex order is usually determined online and bottom - up .",
    "the overall  ( heuristic ) goal is to minimize the number of edges added during preprocessing .",
    "one typically selects the vertex to be contracted next by considering a combination of several factors , including the net number of shortcuts added and the number of nearby vertices already contracted  @xcite .",
    "better vertex orders can be obtained by combining the bottom - up algorithm with  ( more expensive ) top - down offline algorithms that explicitly classify vertices hitting many shortest paths as more important  @xcite .",
    "since road networks have very small separators  @xcite , one can use nested dissection to obtain reasonably good orders that work for any length function  @xcite .",
    "approximate ch has been considered as a way to accommodate networks with less inherent hierarchy  @xcite .",
    "ch is actually a successor of highway hierarchies  @xcite and highway node routing  @xcite , which are based on similar ideas .",
    "ch is not only faster , but also conceptually simpler .",
    "this simplicity has made it quite versatile , serving as a building block not only for other point - to - point algorithms  @xcite , but also for extended queries  ( cf .",
    "section  [ ssec : extensions ] ) and applications",
    "( cf .  section  [ ssec : applications ] ) .",
    "[ [ reach . ] ] reach .",
    "+ + + + + +    an earlier hierarchical approach is  _ reach _",
    "reach is a centrality measure on vertices .",
    "let  @xmath88 be a shortest  @xmath8@xmath9 path that contains vertex  @xmath18 .",
    "the reach  @xmath89 of  @xmath18 with respect to  @xmath88 is defined as  @xmath90 .",
    "the  ( global ) reach of  @xmath18 in the graph  @xmath5 is the maximum reach of  @xmath18 over _ all _ shortest paths that contain  @xmath18 . like other centrality measures  @xcite",
    ", reach captures the importance of vertices in the graph , with the advantage that it can be used to prune a dijkstra - based search .",
    "a reach - based  @xmath8@xmath9 query runs dijkstra s algorithm , but prunes the search at any vertex  @xmath18 for which both  @xmath91 and  @xmath92 hold ; the shortest  @xmath8@xmath9 path provably does not contain  @xmath18 . to check these conditions",
    ", it suffices  @xcite to run bidirectional searches , each using the radius of the opposite search as a lower bound on  @xmath39  ( during the forward search ) or  @xmath93  ( backward search ) .",
    "reach values are determined during the preprocessing stage .",
    "computing exact reaches requires computing shortest paths for all pairs of vertices , which is too expensive on large road networks . but",
    "the query is still correct if  @xmath94 represents only an upper bound on the reach of  @xmath18 .",
    "gutman  @xcite has shown that such bounds can be obtained faster by computing partial shortest path trees .",
    "goldberg  et  al .",
    "@xcite have shown that adding shortcuts to the graph effectively reduces the reaches of most vertices , drastically speeding up both queries and preprocessing and making the algorithm practical for continent - sized networks .",
    "the idea behind bounded - hop techniques is to precompute distances between pairs of vertices , implicitly adding `` virtual shortcuts '' to the graph .",
    "queries can then return the length of a virtual path with very few hops .",
    "furthermore , they use only the precomputed distances between pairs of vertices , and not the input graph .",
    "a nave approach is to use single - hop paths , i.e. , precompute the distances among _ all _ pairs of vertices  @xmath95 .",
    "a single table lookup then suffices to retrieve the shortest distance . while the recent phast algorithm  @xcite has made precomputing all - pairs shortest paths feasible , storing all  @xmath64 distances is prohibitive already for medium - sized road networks . as we will see in this section ,",
    "considering paths with slightly more hops  ( two or three ) leads to algorithms with much more reasonable trade - offs .",
    "o0pt     in 1, ... ,10 at ( 90 - 60 + 120*rnd:+.25 ) ;     in 1, ... ,15 at ( 90 - 60 + 120*rnd:+.25 ) ; ( s ) at ( 0,5 ) [ label = left:@xmath8 ] ; ( t ) at ( 0,0 ) [ label = right:@xmath9 ] ; ( i1a ) at ( -1.2 , 2.3 ) ; ( i1b ) at ( -1.2 , 2.3 ) ; ( i2a ) at ( .2 , 2.7 ) ; ( i2b ) at ( .2 , 2.7 ) ; ( i3a ) at ( 2.2 , 2.86 ) ; ( i3b ) at ( 2.2 , 2.86 ) ; ( s )  ( i2a ) ; ( i2a )  ( t ) ;    [ [ labeling - algorithms . ] ] labeling algorithms .",
    "+ + + + + + + + + + + + + + + + + + + +    we first consider _ labeling algorithms _  @xcite . during",
    "preprocessing , a _ label _",
    "@xmath62 is computed for each vertex  @xmath18 of the graph , such that , for any pair  @xmath73 of vertices , the distance  @xmath96 can be determined by only looking at the labels  @xmath62 and  @xmath97 .",
    "a natural special case of this approach is _ hub labeling _  ( hl )  @xcite , in which the label  @xmath62 associated with vertex  @xmath18 consists of a set of vertices  ( the _ hubs _ of  @xmath18 ) , together with their distances from  @xmath18 .",
    "these labels are chosen such that they obey the _",
    "cover property _ : for any pair  @xmath98 of vertices ,  @xmath99 must contain at least one vertex on the shortest  @xmath8@xmath9 path",
    ". then , the distance  @xmath10 can be determined in linear  ( in the label size ) time by evaluating  @xmath100 .",
    "see  [ fig : literature : hublabels ] for an illustration . for",
    "directed graphs , the label associated with  @xmath18 is actually split in two : the forward label  @xmath101 has distances from  @xmath18 _ to _ the hubs , while the backward label  @xmath102 has distances _ from _ the hubs to  @xmath18 ; the shortest  @xmath8@xmath9 path has a hub in  @xmath103 .",
    "although the required average label size can be  @xmath104 in general  @xcite , it can be significantly smaller for some graph classes . for road networks , abraham et al .",
    "@xcite have shown that one can obtain good results by defining the label of vertex  @xmath18 as the  ( upward ) search space of a ch query from  @xmath18  ( with suboptimal entries removed ) .",
    "in general , any vertex ordering fully defines a labeling  @xcite , and an ordering can be converted into the corresponding labeling efficiently  @xcite .",
    "the ch - induced order works well for road networks . for even smaller labels",
    ", one can pick the most important vertices greedily , based on how many shortest paths they hit  @xcite .",
    "a sampling version of this greedy approach works efficiently for a wide range of graph classes  @xcite .",
    "note that , if labels are sorted by hub i d , a query consists of a linear sweep over two arrays , as in mergesort . not only is this approach very simple , but it also has an almost perfect locality of access . with careful engineering , one does not even have to look at all the hubs in a label @xcite . as a result ,",
    "hl has the fastest known queries for road networks , taking roughly the time needed for five accesses to main memory  ( see section  [ sec : experiments ] ) .",
    "one drawback is space usage , which , although not prohibitive , is significantly higher than for competing methods . by combining common substructures that appear in multiple labels , _ hub label compression _  ( hlc )",
    "@xcite ( see also  @xcite ) reduces space usage by an order of magnitude , at the expense of higher query times .",
    "[ [ transit - node - routing . ] ] transit node routing .",
    "+ + + + + + + + + + + + + + + + + + + + +    the  _ transit node routing _  ( tnr )  @xcite technique uses distance tables on a subset of the vertices . during preprocessing",
    ", it selects a small set  @xmath105 of _ transit nodes _ and computes all pairwise distances between them . from those , it computes , for each vertex  @xmath106 , a relevant set of _ access nodes _  @xmath107 .",
    "a transit node  @xmath108 is an access node of  @xmath18 if there is a shortest path  @xmath88 from  @xmath18 in  @xmath5 such that  @xmath22 is the first transit node contained in  @xmath88 .",
    "in addition to the vertex itself , preprocessing also stores the distances between  @xmath18 and its access nodes .",
    "an  @xmath8@xmath9 query uses the distance table to select the path that minimizes the combined  @xmath8@xmath109@xmath110@xmath9 distance , where  @xmath111 and  @xmath112 are access nodes .",
    "note that the result is incorrect if the shortest path does not contain a vertex from  @xmath113 . to account for such cases ,",
    "a _ locality filter _ decides whether the query might be local  ( i.e. , does not contain a vertex from  @xmath113 ) . in that case",
    ", a fallback shortest path algorithm  ( typically ch ) is run to compute the correct distance .",
    "note that tnr is still correct even if the locality filter occasionally misclassifies a global query as local .",
    "see  [ fig : literature : tnr ] for an illustration of a tnr query .",
    "interestingly , global tnr queries  ( which use the distance tables ) tend to be faster than local ones  ( which perform graph searches ) . to accelerate local queries , tnr can be extended to multiple  ( hierarchical ) layers of transit  ( and access ) nodes  @xcite .",
    "o0pt    ( 0,0 ) rectangle ( 5,2.5 ) ;    ( 0,0 ) circle ( .73 cm ) ; ( s1 ) at ( 90:.73 ) ; ( ns1 ) at ( s1 ) ; ( s2 ) at ( 210:.73 ) ; ( ns2 ) at ( s2 ) ; ( s3 ) at ( 330:.73 ) ; ( ns3 ) at ( s3 ) ; ( s ) at ( 0,0 ) ; ( s ) edge ( ns1 ) edge ( ns2 ) edge ( ns3 ) ;    ( 0,0 ) circle ( .7 cm ) ; ( t1 ) at at ( 0:.7 cm ) ; ( nt1 ) at ( t1 ) ; ( t2 ) at ( 180:.7 cm ) ; ( nt2 ) at ( t2 ) ; ( t ) at ( 0,0 ) ; ( t ) edge ( nt1 ) edge ( nt2 ) ;    ( 0,0 ) rectangle ( 2.5,2.5 ) ; ( 0,.5 ) rectangle ( 2.5,1 ) ; ( 1.5,0 ) rectangle ( 2,2.5 ) ; ( 0,0 ) grid ( 2.5,2.5 ) ; ( 1.5,0.5 ) rectangle ( 2,1 ) ; ( ds1 ) at ( 0,2.25 ) ; ( ds1c ) at ( -1,2.25 ) ; ( ds2 ) at ( 0,1.25 ) ; ( ds2c ) at ( -1,1.25 ) ; ( ds3 ) at ( 0,0.75 ) ; ( ds3c ) at ( -1,0.75 ) ; ( dt1 ) at ( 1.75,0 ) ; ( dt1c ) at ( 1.75,-1 ) ; ( dt2 ) at ( 0.75,0 ) ; ( dt2c ) at ( 0.75,-1 ) ; ( dp ) at ( 0.25,2.5 ) ;    ( s1 ) .. controls ( s1 ) and ( ds1c ) .. ( ds1 ) ; ( s2 ) .. controls ( s2 ) and ( ds2c ) .. ( ds2 ) ; ( s3 ) .. controls ( s3 ) and ( ds3c ) .. ( ds3 ) ; ( t1 ) .. controls ( t1 ) and ( dt1c ) .. ( dt1 ) ; ( t2 ) .. controls ( t2 ) and ( dt2c ) .. ( dt2 ) ;    at ( dp ) ; at ( s ) ; at ( t ) ;    the choice of the transit node set is crucial to the performance of the algorithm .",
    "a natural approach is to select vertex separators or boundary vertices of arc separators as transit nodes . in particular",
    ", using grid - based separators yields natural locality filters and works well enough in practice for road networks  @xcite .",
    "( although an optimized preprocessing routine for this grid - based approach was later shown to have a flaw that could potentially result in suboptimal queries  @xcite , the version with slower preprocessing reported in  @xcite is correct and achieves the same query times . )    for better performance  @xcite , one can pick as transit nodes vertices that are classified as important by a hierarchical speedup technique  ( such as ch ) .",
    "locality filters are less straightforward in such cases : although one can still use geographical distances  @xcite , a graph - based approach considering the voronoi regions  @xcite induced by transit nodes tends to be significantly more accurate  @xcite .",
    "a theoretically justified tnr variant  @xcite also picks important vertices as transit nodes and has a natural graph - based locality filter , but is impractical for large networks .",
    "[ [ pruned - highway - labeling . ] ] pruned highway labeling .",
    "+ + + + + + + + + + + + + + + + + + + + + + + +    the pruned highway labeling  ( phl )  @xcite algorithm can be seen as a hybrid between pure labeling and transit nodes .",
    "its preprocessing routine decomposes the input into disjoint shortest paths , then computes a label for each vertex  @xmath22 containing the distance from  @xmath22 to vertices in a small subset of such paths .",
    "the labels are such that any shortest  @xmath8@xmath9 path can be expressed as  @xmath8@xmath18@xmath70@xmath9 , where  @xmath18@xmath70 is a subpath of a path  @xmath88 that belongs to the labels of  @xmath8 and  @xmath9 .",
    "queries are thus similar to hl , finding the lowest - cost intersecting path . for efficient preprocessing",
    ", the algorithm uses the pruned labeling technique  @xcite .",
    "although this method has some similarity with thorup s distance oracle for planar graphs  @xcite , it does not require planarity .",
    "phl has only been evaluated on undirected graphs , however .",
    "since the individual techniques described so far exploit different graph properties , they can often be combined for additional speedups .",
    "this section describes such hybrid algorithms .",
    "in particular , early results  @xcite considered the combination of geometric containers , multilevel overlay graphs , and  ( euclidean - based ) a*on transportation networks , resulting in speedups of one or two orders of magnitude over dijkstra s algorithm .",
    "more recent studies have focused on combining hierarchical methods  ( such as ch or reach ) with fast goal - directed techniques  ( such as alt or arc flags ) .",
    "for instance , the _ real _ algorithm combines reach and alt  @xcite .",
    "a basic combination is straightforward : one simply runs an alt query with additional pruning by reach  ( using the alt lower bounds themselves for reach evaluations ) . a more sophisticated variant uses _ reach - aware landmarks _ : landmarks and their distances are only precomputed for vertices with high reach values .",
    "this saves space  ( only a small fraction of the graph needs to store landmark distances ) , but requires two - stage queries  ( goal direction is only used when the search is far enough from both source and target ) .",
    "a similar space - saving approach is used by _ core - alt _",
    "it first computes an overlay graph for the _ core graph _ , a  ( small ) subset  ( e.g. , 1% ) of vertices  ( which remain after `` unimportant '' ones",
    "are contracted ) , then computes landmarks for the core vertices only .",
    "queries then work in two stages : first plain bidirectional search , then alt is applied when the search is restricted to the core .",
    "the  ( earlier )  _ hh * _ approach  @xcite is similar , but uses highway hierarchies  @xcite to determine the core .",
    "another approach with two - phase queries is _ reachflags _  @xcite . during preprocessing",
    ", it first computes  ( approximate ) reach values for all vertices in  @xmath5 , then extracts the subgraph  @xmath114 induced by all vertices whose reach value exceeds a certain threshold .",
    "arc flags are then only computed for  @xmath114 , to be used in the second phase of the query .    the _ sharc _ algorithm  @xcite combines the computation of shortcuts with multilevel arc flags .",
    "the preprocessing algorithm first determines a partition of the graph and then computes shortcuts and arc flags in turn .",
    "shortcuts are obtained by contracting unimportant vertices with the restriction that shortcuts never span different cells of the partition .",
    "the algorithm then computes arc flags such that , for each cell  @xmath115 , the query uses a shortcut arc if and only if the target vertex is not in  @xmath115 .",
    "space usage can be reduced with various compression techniques  @xcite .",
    "note that sharc is unidirectional and hierarchical : arc flags not only guide the search toward the target , but also vertically across the hierarchy .",
    "this is useful when the backward search is not well defined , as in time - dependent route planning  ( discussed in section  [ ssec : extensions ] ) .    combining ch with arc flags results in the _ chase _ algorithm  @xcite . during preprocessing ,",
    "a regular contraction hierarchy is computed and the search graph that includes all shortcuts is assembled .",
    "the algorithm then extracts the subgraph  @xmath114 induced by the top  @xmath116 vertices according to the contraction order .",
    "bidirectional arc flags  ( and the partition ) are finally computed on the restricted subgraph  @xmath114 .",
    "queries then run in two phases .",
    "since computing arc flags was somewhat slow ,  @xmath116 was originally set to a small fraction  ( about  5% ) of the total number  @xmath37 of vertices  @xcite .",
    "more recently , delling et al .  showed that phast  ( see section  [ ssec : extensions ] ) can compute arc flags fast enough to allow  @xmath116 to be set to  @xmath37 , making chase queries much simpler  ( single - pass ) , as well as faster  @xcite .    finally , bauer et al .",
    "@xcite combine transit node routing with arc flags to obtain the tnr+af algorithm . recall that the bottleneck of the tnr query is performing the table lookups between pairs of access nodes from  @xmath117 and  @xmath118 .",
    "to reduce the number of lookups , tnr+af s preprocessing decomposes the set of transit nodes  @xmath113 into  @xmath116 cells . for each vertex",
    "@xmath8 and access node  @xmath119 , it stores a  @xmath116-bit vector , with bit  @xmath57 indicating whether there exists a shortest path from  @xmath8 to cell  @xmath57 through  @xmath18 .",
    "a query then only considers the access nodes from  @xmath8 that have their bits set with respect to the cells of  @xmath118 . a similar pruning",
    "is done at the target .      in various applications ,",
    "one is often interested in more than just the length of the shortest path between two points in a static network .",
    "most importantly , one should also be able to retrieve the shortest path itself .",
    "moreover , many of the techniques considered so far can be adapted to compute batched shortest paths  ( such as distance tables ) , to more realistic scenarios  ( such as dynamic networks ) , or to deal with multiple objective functions . in the following ,",
    "we briefly discuss each of these extensions .",
    "our descriptions so far have focused on finding only the _ length _ of the shortest path .",
    "the algorithms we described can easily be augmented to provide the actual list of edges or vertices on the path . for techniques that do not use shortcuts  ( such as dijkstra s algorithm , a*search , or arc flags )",
    ", one can simply maintain a parent pointer for each vertex  @xmath22 , updating it whenever the distance label of  @xmath22 changes .",
    "when shortcuts are present  ( such as in ch , sharc , or crp ) , this approach gives only a _",
    "compact _ representation of the shortest path  ( in terms of shortcuts ) .",
    "the shortcuts then need to be unpacked .",
    "if each shortcut is the concatenation of two other arcs  ( or shortcuts ) , as in ch , storing the middle vertex  @xcite of each shortcut allows for an efficient  ( linear - time ) recursive unpacking of all shortcuts on the output path . if shortcuts are built from multiple arcs  ( as for crp or sharc ) , one can either store the entire sequence for each shortcut  @xcite or run a local  ( bidirectional ) dijkstra search from its endpoints  @xcite .",
    "these two techniques can be used for bounded - hop algorithms as well .",
    "some applications require computing multiple paths at once .",
    "for example , advanced logistics applications may need to compute all distances between a source set  @xmath11 and a target set  @xmath12 .",
    "this can be trivially done with  @xmath120 point - to - point shortest - path computations . using a hierarchical speedup technique  ( such as ch ) , this can be done in time comparable to  @xmath121 point - to - point queries in practice , which is much faster .",
    "first , one runs a backward upward search from each  @xmath122 ; for each vertex  @xmath18 scanned during the search from  @xmath123 , one stores its distance label  @xmath124 in a bucket  @xmath125 .",
    "then , one runs a forward upward search from each  @xmath126 .",
    "whenever such a search scans a vertex  @xmath22 with a non - empty bucket , one searches the bucket and checks whether  @xmath127 improves the best distance seen so far between  @xmath128 and  @xmath123 .",
    "this _ bucket - based approach _ was introduced for highway hierarchies  @xcite , but can be used with any other hierarchical speedup technique  ( such as ch ) and even with hub labels  @xcite . when the bucket - based approach is combined with a separator - based technique  ( such as crp ) , it is enough to keep buckets only for the boundary vertices  @xcite . note that this approach can be used to compute one - to - many or many - to - many distances .",
    "some applications require one - to - all computations , i.e. , finding the distances from a source vertex  @xmath8 to all other vertices in the graph .",
    "for this problem , dijkstra s algorithm is optimal in the sense that it visits each edge exactly once , and hence runs in essentially linear time  @xcite .",
    "however , dijkstra s algorithm has bad locality and is hard to parallelize , especially for sparse graphs  @xcite .",
    "phast  @xcite builds on ch to improve this .",
    "the idea is to split the search in two phases .",
    "the first is a forward upward search from  @xmath8 , and the second runs a linear scan over the shortcut - enriched graph , with distance values propagated from more to less important vertices . since the instruction flow of the second phase is  ( almost )",
    "independent of the source , it can be engineered to exploit parallelism and improve locality . in road networks",
    ", phast can be more than an order of magnitude faster than dijkstra s algorithm , even if run sequentially , and can be further accelerated using multiple cores and even gpus .",
    "this approach can also be extended to the _ one - to - many problem _ ,",
    "i.e. , computing distances from a source to a subset of predefined targets  @xcite .",
    "similar techniques can also be applied with graph separators  ( instead of ch ) , yielding comparable query times but with faster  ( metric - dependent ) preprocessing  @xcite .",
    "transportation networks tend to be dynamic , with unpredictable delays , traffic , or closures .",
    "if one assumes that the modified network is stable for the foreseeable future , the obvious approach for speedup techniques to deal with this is to rerun the preprocessing algorithm .",
    "although this ensures queries are as fast as in the static scenario , it can be quite costly . as a result ,",
    "four other approaches have been considered .",
    "it is often possible to just `` repair '' the preprocessed data instead of rebuilding it from scratch .",
    "this approach has been tried for various techniques , including geometric containers  @xcite , alt  @xcite , arc flags  @xcite , and ch  @xcite , with varying degrees of success . for ch , for example",
    ", one must keep track of dependencies between shortcuts , partially rerunning the contraction as needed .",
    "changes that affect less important vertices can be dealt with faster .",
    "another approach is to adapt the query algorithms to work around the `` wrong '' parts of the preprocessing phase . in particular ,",
    "alt is resilient to increases in arc costs  ( due to traffic , for example ) : queries remain correct with the original preprocessing , though query times may increase  @xcite .",
    "less trivially , ch queries can also be modified to deal with dynamic changes to the network  @xcite by allowing the search to bypass affected shortcuts by going `` down '' the hierarchy .",
    "this is useful when queries are infrequent relative to updates .",
    "a third approach is to make the preprocessing stage completely metric - independent , shifting all metric - dependent work to the query phase .",
    "funke et al .",
    "@xcite generalize the multilevel overlay graph approach to encode _ all _  @xmath116-hop paths  ( for small  @xmath116 ) in an overlay graph . under the assumption that edge costs are defined by a small number of physical parameters  ( as in simplified road networks )",
    "this allows setting the edge costs at query time , though queries become significantly slower .    for more practical queries ,",
    "the fourth approach splits the preprocessing phase into metric - independent and metric - dependent stages .",
    "the metric - independent phase takes as input only the network topology , which is fairly stable .",
    "when edge costs change  ( which happens often ) , only the  ( much cheaper ) metric - dependent stage must be rerun , partially or in full .",
    "this concept can again be used for various techniques , with alt , ch , and crp being the most prominent . for alt",
    ", one can keep the landmarks , and just recompute the distances to them  @xcite . for ch",
    ", one can keep the ordering , and just rerun contraction  @xcite . for crp",
    ", one can keep the partitioning and the overlay topology , and just recompute the shortcut lengths using a combination of contraction and graph searches  @xcite .",
    "since the contraction is metric - independent , one can precompute and store the sequence of contraction operations and reexecute them efficiently whenever edge lengths change  @xcite .",
    "the same approach can be used for ch with metric - independent orders  @xcite .      in real transportation networks ,",
    "the best route often depends on the departure time in a predictable way @xcite .",
    "for example , certain roads are consistently congested during rush hours , and certain buses or trains run with different frequencies during the day .",
    "when one is interested in the earliest possible arrival given a specified departure time  ( or , symmetrically , the latest departure ) , one can model this as the _ time - dependent _ shortest path problem , which assigns travel time functions to  ( some of ) the edges , representing how long it takes to traverse them at each time of the day .",
    "dijkstra s algorithm still works  @xcite as long as later departures can not lead to earlier arrivals ; this _ non - overtaking _ property is often called first - in first - out  ( fifo ) . although one must deal with functions instead of scalars , the theoretical running time of dijkstra - based algorithms",
    "can still be bounded  @xcite . moreover , many of the techniques described so far work in this scenario , including bidirectional alt  @xcite , ch  @xcite , or sharc  @xcite .",
    "recently , kontogiannis and zaroliagis  @xcite have introduced a theoretical  ( approximate ) distance oracle with sublinear running time .",
    "other scenarios  ( besides fifo with no waiting at vertices ) have been studied  @xcite , but they are less relevant for transportation networks .",
    "there are some challenges , however .",
    "in particular , bidirectional search becomes more complicated  ( since the time of arrival is not known ) , requiring changes to the backward search  @xcite .",
    "another challenge is that shortcuts become more space - consuming  ( they must model a more complicated travel time function ) , motivating compression techniques that do not sacrifice correctness , as demonstrated for sharc  @xcite or ch  @xcite .",
    "batched shortest paths can be computed in such networks efficiently as well  @xcite .",
    "time - dependent networks motivate some elaborate  ( but still natural ) queries , such as finding the best departure time in order to minimize the total time in transit .",
    "such queries can be dealt with by  _ range searches _ , which compute the travel time function between two points . there",
    "exist dijkstra - based algorithms  @xcite for this problem , and most speedup techniques can be adapted to deal with this as well  @xcite .",
    "unfortunately , even a slight deviation from the travel time model , where total cost is a linear combination of travel time and a constant cost offset , makes the problem np - hard  @xcite .",
    "however , a heuristic adaptation of time - dependent ch shows negligible errors in practice  @xcite .",
    "another natural extension is to consider multiple cost functions .",
    "for example , certain vehicle types can not use all segments of the transportation network .",
    "one can either adapt the preprocessing such that these _ edge restrictions _ can be applied during query time  @xcite , or perform a metric update for each vehicle type .",
    "also , the search request can be more flexible .",
    "for example , one may be willing to take a more scenic route even if the trip is slightly longer .",
    "this can be dealt with by performing a multicriteria search .",
    "in such a search , two paths are incomparable if neither is better than the other in all criteria .",
    "the goal is to find a _",
    "pareto set _",
    ", i.e. , a maximum set of incomparable paths . such sets of shortest paths can be computed by extensions of dijkstra s algorithm ; see  @xcite for a survey on multicriteria combinatorial optimization .",
    "more specifically , the _ multicriteria label - setting _  ( mls ) algorithm  @xcite extends dijkstra s algorithm by keeping , for each vertex , a _ bag _ of nondominated labels .",
    "each label is represented as a tuple , with one entry per optimization criterion .",
    "the priority queue maintains labels instead of vertices , typically ordered lexicographically . in each iteration , it extracts the minimum label  @xmath129 and scans the incident arcs  @xmath130 of the vertex  @xmath18 associated with",
    "it does so by adding the cost of  @xmath23 to  @xmath129 and then merging  @xmath129 into the bag of  @xmath22 , eliminating possibly dominated labels on the fly .",
    "in contrast , the _ multi - label - correcting _  ( mlc ) algorithm  @xcite considers the whole bag of nondominated labels associated with  @xmath18 at once when scanning the vertex  @xmath18 .",
    "hence , individual labels of  @xmath18 may be scanned multiple times during one execution of the algorithm .",
    "both mls and mlc are fast enough as long as the pareto sets are small  @xcite .",
    "unfortunately , pareto sets may contain exponentially many solutions , even for the restricted case of two optimization criteria  @xcite , which makes it hard to achieve large speedups  @xcite . to reduce the size of pareto sets",
    ", one can relax domination .",
    "in particular ,  @xmath131-pareto sets have provable polynomial size  @xcite and can be computed efficiently  @xcite . moreover ,",
    "large pareto sets open up a potential for parallelization that is not present for a single objective function  @xcite .",
    "a reasonable alternative  @xcite to multicriteria search is to optimize a linear combination  @xmath132 of two criteria  @xmath133 , with the parameter  @xmath134 set at query time .",
    "moreover , it is possible to efficiently compute the values of  @xmath134 where the path actually changes .",
    "funke and storandt  @xcite show that ch can handle such functions with polynomial preprocessing effort , even with more than two criteria .",
    "most of the algorithms mentioned so far were developed with practical performance in mind .",
    "almost all methods we surveyed are exact : they provably find the exact shortest path . their performance  ( in terms of both preprocessing and queries ) , however , varies significantly with the input graph .",
    "most algorithms work well for real road networks , but are hardly faster than dijkstra s algorithm on some other graph classes .",
    "this section discusses theoretical work that helps understand why the algorithms perform well and what their limitations are .",
    "most of the algorithms considered have some degree of freedom during preprocessing  ( such as which partition , which vertex order , or which landmarks to choose ) .",
    "an obvious question is whether one could efficiently determine the best such choices for a particular input so as to minimize the query search space  ( a natural proxy for query times ) .",
    "bauer et al .",
    "@xcite have determined that finding optimal landmarks for alt is np - hard .",
    "the same holds for arc flags  ( with respect to the partition ) , sharc  ( with respect to the shortcuts ) , multilevel overlay graphs  ( with respect to the separator ) , contraction hierarchies  ( with respect to the vertex order ) , and hub labels  ( with respect to the hubs )  @xcite .",
    "in fact , minimizing the number of shortcuts for ch is apx - hard  @xcite . for sharc , however , a greedy factor-@xmath116 approximation algorithm exists  @xcite . deciding which  @xmath116 shortcuts  ( for fixed  @xmath116 ) to add to a graph in order to minimize the sharc search space is also np - hard  @xcite .",
    "bauer et al .",
    "@xcite also analyze the preprocessing of arc flags in more detail and on restricted graph classes , such as paths , trees , and cycles , and show that finding an optimal partition is np - hard even for binary trees .",
    "besides complexity , theoretical performance bounds for query algorithms , which aim to explain their excellent practical performance , have also been considered .",
    "proving better running time bounds than those of dijkstra s algorithm is unlikely for general graphs ; in fact , there are inputs for which most algorithms are ineffective .",
    "that said , one can prove nontrivial bounds for specific graph classes . in particular , various authors  @xcite have independently observed a natural relationship between ch and the notions of filled graphs  @xcite and elimination trees  @xcite . for planar graphs , one can use nested dissection  @xcite to build a ch order leading to  @xmath135 shortcuts  @xcite .",
    "more generally , for minor - closed graph classes with balanced  @xmath136-separators , the search space is bounded by  @xmath136  @xcite .",
    "similarly , on graphs with treewidth  @xmath116 , the search space of ch is bounded by  @xmath137  @xcite .",
    "road networks have motivated a large amount of theoretical work on algorithms for planar graphs .",
    "in particular , it is known that planar graphs have separators of size  @xmath136  @xcite .",
    "although road networks are not strictly planar , they do have small separators  @xcite , so theoretically efficient algorithms for planar graphs are likely to also perform well in road networks .",
    "sommer  @xcite surveys several approximate methods with various trade - offs . in practice ,",
    "the observed performance of most speedup techniques is much better on actual road networks than on arbitrary planar graphs  ( even grids ) .",
    "a theoretical explanation of this discrepancy thus requires a formalization of some property related to key features of real road networks .",
    "one such graph property is  _ highway dimension _ , proposed by abraham et  al .",
    "@xcite  ( see also  @xcite ) . roughly speaking",
    ", a graph has highway dimension  @xmath138 if , at any scale  @xmath16 , one can hit all shortest paths of length at least  @xmath16 by a hitting set  @xmath11 that is _ locally sparse _",
    ", in the sense that any ball of radius  @xmath16 has at most  @xmath138 elements from  @xmath11 . based on previous experimental observations  @xcite , the authors  @xcite conjecture that road networks have small highway dimension . based on this notion ,",
    "they establish bounds on the performance of  ( theoretically justified versions of ) various speedup techniques in terms of  @xmath138 and the graph diameter  @xmath139 , assuming the graph is undirected and that edge lengths are integral .",
    "more precisely , after running a polynomial - time preprocessing routine , which adds  @xmath140 shortcuts to  @xmath5 , reach and ch run in  @xmath141 time .",
    "moreover , they also show that hl runs in  @xmath142 time and long - range tnr queries take  @xmath143 time .",
    "in addition , abraham et al .",
    "@xcite show that a graph with highway dimension  @xmath138 has doubling dimension  @xmath144 , and kleinberg et al .",
    "@xcite show that landmark - based triangulation yields good bounds for most pairs of vertices of graphs with small doubling dimension .",
    "this gives insight into the good performance of alt in road networks .",
    "the notion of highway dimension is an interesting application of the scientific method .",
    "it was originally used to explain the good observed performance of ch , reach , and tnr , and ended up predicting that hl  ( which had not been implemented yet ) would have good performance in practice .",
    "generative models for road networks have also been proposed and analyzed .",
    "abraham et al .",
    "@xcite propose a model that captures some of the properties of road networks and generates graphs with provably small highway dimension .",
    "bauer et al .",
    "@xcite show experimentally that several speedup techniques are indeed effective on graphs generated according to this model , as well as according to a new model based on voronoi diagrams .",
    "models with a more geometric flavor have been proposed by eppstein and goodrich  @xcite and by eisenstat  @xcite .    besides these results , rice and tsotras",
    "@xcite analyze the  a*algorithm and obtain bounds on the search space size that depend on the underestimation error of the potential function . also , maintaining and updating multilevel overlay graphs have been theoretically analyzed in  @xcite . for transit node routing , eisner and funke  @xcite propose instance - based lower bounds on the size of the transit node set .",
    "for labeling algorithms , bounds on the label size for different graph classes are given by gavoille et al .",
    "approximation algorithms to compute small labels have also been studied  @xcite ; although they can find slightly better labels than faster heuristics  @xcite , their running time is prohibitive  @xcite .    because the focus of this work is on algorithm engineering ,",
    "we refrain from going into more detail about the available theoretical work .",
    "instead , we refer the interested reader to overview articles with a more theoretical emphasis , such as those by sommer  @xcite , zwick  @xcite , and gavoille and peleg  @xcite .",
    "in this section , we experimentally evaluate how the techniques discussed so far perform in road networks .",
    "moreover , we discuss applications of some of the techniques , as well as alternative settings such as databases or mobile devices .      our experimental analysis considers carefully engineered implementations , which is very important when comparing running times .",
    "they are written in c++ with custom - built data structures .",
    "graphs are represented as adjacency arrays  @xcite , and priority queues are typically binary heaps , 4-heaps , or multilevel buckets .",
    "as most arcs in road networks are bidirectional , state - of - the - art implementations use edge compression  @xcite : each road segment is stored at both of its endpoints , and each occurrence has two flags indicating whether the segment should be considered as an incoming and/or outgoing arc .",
    "this representation is compact and allows efficient iterations over incoming and outgoing arcs .",
    "we give data for two models .",
    "the _ simplified model _ ignores turn restrictions and penalties , while the _ realistic model _ includes the turn information  @xcite .",
    "there are two common approaches to deal with turns .",
    "the _ arc - based representation _",
    "@xcite blows up the graph so that roads become vertices and feasible turns become arcs .",
    "in contrast , the _ compact representation _  @xcite keeps intersections as vertices , but with associated _ turn tables_. one can save space by sharing turn tables among many vertices , since the number of intersection types in a road network is rather limited .",
    "most speedup techniques can be used as is for the arc - based representation , but may need modification to work on the compact model .",
    "most experimental studies are restricted to the simplified model . since some algorithms are more sensitive to how turns are modeled than others , it is hard to extrapolate these results to more realistic networks .",
    "we therefore consider experimental results for each model separately .      an important driving force behind the research on speedup techniques for dijkstra s algorithm was its application to road networks .",
    "a key aspect for the success of this research effort was the availability of continent - sized benchmark instances .",
    "the most widely used instance has been the road network of western europe from ptv ag , with 18.0 million vertices and 42.5 million directed arcs . besides ferries ( for which the traversal time was given ) , it has 13 road categories .",
    "category @xmath57 has been assigned an average speed of 10@xmath57 km/h .",
    "this synthetic assignment is consistent with more realistic proprietary data  @xcite .",
    "another popular  ( and slightly bigger ) instance , representing the tiger / usa road network , is undirected and misses several important road segments  @xcite .",
    "although the inputs use the simplified model , they allowed researchers from various groups to run their algorithms on the same instance , comparing their performance .",
    "in particular , both instances were tested during the dimacs challenge on shortest paths  @xcite .    ( af ) at ( axis cs:0.43063572427651 * 2156,0.43063572427651 * 1.1 ) ; ( hh ) at ( axis cs:0.43063572427651 * 13,0.43063572427651 * 0.61 ) ; ( tnr ) at ( axis cs:0.43063572427651 * 164,0.43063572427651 * 0.0056 ) ; ( tnr2 ) at ( axis cs:0.43063572427651 * 112,0.43063572427651 * 0.0034 ) ; ( alt - a16 ) at ( axis cs:0.43063572427651 * 13,0.43063572427651 * 120.1 ) ; ( alt - m16 ) at ( axis cs:0.43063572427651 * 85,0.43063572427651 * 53.6 ) ; ( alt - a64 ) at ( axis cs:0.43063572427651 * 68,0.43063572427651 * 19.6 ) ; ( hh * ) at ( axis cs:0.43063572427651 * 14,0.43063572427651 * 0.49 ) ; ( sharc ) at ( axis cs:0.43063572427651 * 81,0.43063572427651 * 0.29 ) ; ( bisharc ) at ( axis cs:0.43063572427651 * 158,0.43063572427651 * 0.065 ) ; ( ecochase ) at ( axis cs:0.43063572427651 * 32,0.43063572427651 * 0.044 ) ; ( genchase ) at ( axis cs:0.43063572427651 * 99,0.43063572427651 * 0.017 ) ;    ( tnraf ) at ( axis cs:0.37066962847405 * 229,0.37066962847405 * 0.0019 ) ;    ( hpml ) at ( axis cs:0.43063572427651 * 1440,0.43063572427651 * 0.0188 ) [ label = above right : hpml ] ;    ( ecoch ) at ( axis cs:0.37066962847405 * 7.52,0.37066962847405 * 0.214 ) ; ( aggch ) at ( axis cs:0.37066962847405 * 27.4,0.37066962847405 * 0.152 ) ; ( ecocustomch ) at ( axis cs:0.37066962847405 * 0.8,0.37066962847405 * 0.214 ) ; ( aggcustomch ) at ( axis cs:0.37066962847405 * 2.75,0.37066962847405 * 0.152 ) ;    ( cch ) at ( axis cs:1.19509594882729 * 4151.42,1.19509594882729 * 0.413 ) ; ( customcch ) at ( axis cs:1.19509594882729 * 0.05367,1.19509594882729 * 0.413 ) ;    ( ch - tnr ) at ( axis cs:0.6378694788814 * 34,0.6378694788814 * 0.00327 ) ;    ( alt - pfoser-8 ) at ( axis cs:1.2546346782988 * 8/60,1.2546346782988 * 175.3 ) ; ( alt - pfoser-64 ) at ( axis cs:1.2546346782988 * 60/60,1.2546346782988 * 70.6 ) ;    ( phastaf ) at ( axis cs:1.0 * 20,1.0 * 0.408 ) ; ( phastchase ) at ( axis cs:1.0 * 30,1.0 * 0.00576 ) ; ( hl-17 local ) at ( axis cs:320.68,1.0 * 0.000545 ) ; ( hl-15 local ) at ( axis cs:1.0 * 37.38,1.0 * 0.000563 ) ; ( hl-0 local ) at ( axis cs:13.46,1.0 * 0.00067 ) ;    ( hlc-15 ) at ( axis cs:1.0 * 50,1.0 * 0.002554 ) ; ( hlc-0 ) at ( axis cs:1.0 * 30,1.0 * 0.002989 ) ; ( hl - inf global ) at ( axis cs:1.0 * 3600,1.0 * 0.000254 ) ;    ( crp-5mc ) at ( axis cs:1.0 * 0.06283,1.0 * 1.67 ) ; ( crp-5 ) at ( axis cs:1.0 * 0.185,1.0 * 1.67 ) ; ( crp-5 part ) at ( axis cs:1.0 * 60,1.0 * 1.67 ) ;    ( phast ) at ( axis cs:1.0 * 8730,1.0 * 0.000056 ) ;    ( axis cs:0.039,1.0 * 1833.92 )  node [ pos=1,fill = white , anchor = west ] * dijkstra s algorithm * + + ( 0:.3 ) ; ( axis cs:0.039,1.0 * 1017.16 )  node [ pos=1,fill = white , anchor = west ] * bidirectional search * + + ( 0:.3 ) ;    ( ecocustomch ) ",
    "( ecoch ) ; ( aggcustomch ) ",
    "( aggch ) ; ( cch )  ( customcch ) ; ( ecocustomch ) ",
    "node[fill = none , pos=.5,pin=270:(customization ) ] ( aggcustomch ) ; ( crp-5mc )  node [ fill = none , pos=.5,pin=85:(customization ) ] ( crp-5 ) ; ( crp-5 ) ",
    "( crp-5 part ) ; ( phastaf )  ( af ) ; ( tnr )  ( tnr2 ) ; ( tnr2 )  ( ch - tnr ) ; ( alt - a16 )  node [ pos=.5,pin=30:alt ] ( alt - m16 ) ; ( alt - m16 )  ( alt - a64 ) ; ( alt - a16 ) ",
    "( alt - pfoser-64 ) ; ( alt - pfoser-64 )  node [ fill = none , pos=.5,pin=[pin distance=.5cm]270:(customization ) ] ( alt - pfoser-8 ) ; ( sharc )  ( bisharc ) ; ( ecochase ) ",
    "node[fill = none , pos=.5,pin=190:*chase * ] ( genchase ) ; ( genchase )  ( phastchase ) ; ( hl-0 local ) ",
    "( hl-15 local ) ; ( hl-15 local ) ",
    "node[fill = none , pos=.5,pin=270:*hub labels * ] ( hl-17 local ) ; ( hl-17 local ) ",
    "( hl - inf global ) ; ( hlc-0 )  ( hlc-15 ) ; ( aggch )  ( ecoch ) ;    ( re ) at ( axis cs:0.43063572427651 * 70,0.43063572427651 * 6.24 ) ; ( re2 ) at ( axis cs:0.43063572427651 * 45,0.43063572427651 * 3.06 ) ; ( real ) at ( axis cs:0.43063572427651 * 103,0.43063572427651 * 0.91 ) ; ( reachflags ) at ( axis cs:0.43063572427651 * 348,0.43063572427651 * 0.84 ) ; ( hnr ) at ( axis cs:0.43063572427651 * 15,0.43063572427651 * 0.85 ) ; ( calt ) at ( axis cs:0.43063572427651 * 11,0.43063572427651 * 1.34 ) ; at ( af ) ; at ( phastaf ) ;    ( re ) ",
    "( re2 ) ;    figure  [ fig : literature : performance ] succinctly represents the performance of previously published implementations of various point - to - point algorithms on the western europe instance , using travel time as the cost function . for each method",
    ", the plot relates its preprocessing and average query times .",
    "queries compute the length of the shortest path  ( but not its actual list of edges ) between sources and targets picked uniformly at random from the full graph . for readability , space consumption  ( a third important quality measure )",
    "is not explicitly represented .",
    "we reproduce the numbers reported by bauer et al .",
    "@xcite for reach , hh , hnr , alt ,  ( bidirectional ) arc flags , real , hh * , sharc , calt , chase , reachflags and tnr+af . for chase and arc flags",
    ", we also consider variants with quicker phast - based preprocessing  @xcite .",
    "in addition , we consider the recent alt implementation by efentakis and pfoser  @xcite . moreover , we report results for several variants of tnr  @xcite , hub labels  @xcite , hpml  @xcite , contraction hierarchies  ( ch )  @xcite , and customizable contraction hierarchies  ( cch )  @xcite .",
    "crp  ( and the corresponding punch ) figures  @xcite use a more realistic graph model that includes turn costs . for reference , the plot includes unidirectional and bidirectional implementations of dijkstra s algorithm using a 4-heap .",
    "( note that one can obtain a 20% improvement when using a multilevel bucket queue  @xcite . ) finally , the table - lookup figure is based on the time of a single memory access in our reference machine and the precomputation time of  @xmath37 shortest path trees using phast  @xcite .",
    "note that a machine with more than one petabyte of ram  ( as required by this algorithm ) would likely have slower memory access times .",
    "times in the plot are on a single core of an intel x5680 3.33ghz cpu , a mainstream server at the time of writing .",
    "several of the algorithms in the plot were originally run on this machine  @xcite ; for the remaining , we divide by the following scaling factors : 2.322  for  @xcite , 2.698  for  @xcite , 1.568  for  @xcite , 0.837  for  @xcite , and 0.797  for  @xcite . these were obtained from a benchmark  ( developed for this survey ) that measures the time of computing several shortest path trees on the publicly available usa road network with travel times  @xcite . for the machines we did not have access to",
    ", we asked the authors to run the benchmark for us  @xcite .",
    "the benchmark is available from http://algo.iti.kit.edu/~pajor/survey/ , and we encourage future works to use it as a base to compare  ( sequential ) running times with existing approaches .",
    "the figure shows that there is no best technique . to stress this point , techniques with at least one implementation belonging to the pareto set  ( considering preprocessing time , query time , and space usage )",
    "are drawn as solid circles ; hollow entries are dominated .",
    "the pareto set is quite large , with various methods allowing for a wide range of space - time trade - offs .",
    "moreover , as we shall see when examining more realistic models , these three are not the only important criteria for real - world applications .",
    ".performance of various speedup techniques on western europe .",
    "column _ source _ indicates the implementation tested for this survey .",
    "[ cols=\"<,<,^ , > , > , < , > , > \" , ]      as discussed in section  [ ssec : extensions ] , many speedup techniques can handle more than plain point - to - point shortest path computations .",
    "in particular , hierarchical techniques such as ch or crp tend to be quite versatile , with many established extensions .",
    "some applications may involve more than one path between a source and a target .",
    "for example , one may want to show the user several `` reasonable '' paths  ( in addition to the shortest one )  @xcite . in general , these alternative paths should be short , smooth , and significantly different from the shortest path  ( and other alternatives ) .",
    "such paths can either be computed directly as the concatenation of partial shortest paths  @xcite or compactly represented as a small graph  @xcite .",
    "a related problem is to compute a _ corridor _",
    "@xcite of paths between source and target , which allows deviations from the best route  ( while driving ) to be handled without recomputing the entire path .",
    "these robust routes can be useful in mobile scenarios with limited connectivity .",
    "another useful tool to reduce communication overhead in such cases is route compression  @xcite .",
    "extensions that deal with nontrivial cost functions have also been considered . in particular , one can extend ch to handle flexible arc restrictions  @xcite  ( such as height or weight limitations ) or even multiple criteria  @xcite  ( such as optimizing costs and travel time ) . minimizing the energy consumption of electric vehicles  @xcite is another nontrivial application , since batteries are recharged when the car is going downhill .",
    "similarly , optimal cycling routes must take additional constraints  ( such as the amount of uphill cycling ) into account  @xcite .",
    "the ability of computing many  ( batched ) shortest paths fast enables interesting new applications . by quickly analyzing multiple candidate shortest paths",
    ", one can efficiently match gps traces to road segments  @xcite .",
    "traffic simulations also benefit from acceleration techniques  @xcite , since they must consider the likely routes taken by _",
    "all _ drivers in a network .",
    "another application is route prediction  @xcite : one can estimate where a vehicle is  ( likely ) headed by measuring how good its current location is as a via point towards each candidate destination .",
    "fast routing engines allow more locations to be evaluated more frequently , leading to better predictions  @xcite .",
    "planning placement of charging stations can also benefit from fast routing algorithms  @xcite .",
    "another important application is _ ride sharing _",
    "@xcite , in which one must match a ride request with the available offer in a large system , typically by minimizing drivers detours .    finally , batched shortest - path computations enable a wide range of point - of - interest queries  @xcite .",
    "typical examples include finding the closest restaurant to a given location , picking the best post office to stop on the way home , or finding the best meeting point for a group of friends . typically using the bucket - based approach  ( cf .",
    "section  [ ssec : batched ] ) , fast routing engines allow pois to be ranked according to network - based cost functions  ( such as travel time ) rather than geographic distances .",
    "this is crucial for accuracy in areas with natural  ( or man - made ) obstacles , such as mountains , rivers , or rail tracks .",
    "note that more elaborate poi queries must consider concatenations of shortest paths .",
    "one can handle these efficiently using an extension of the bucket - based approach that indexes pairs of vertices instead of individual ones  @xcite .",
    "so far , we have assumed that shortest path computations take place on a standard server with enough main memory to hold the input graph and the auxiliary data .",
    "in practice , however , it is often necessary to run  ( parts of ) the routing algorithm in other settings , such as mobile devices , clusters , or databases .",
    "many of the methods we discuss can be adapted to such scenarios .    of particular interest",
    "are mobile devices , which typically are slower and  ( most importantly ) have much less available ram .",
    "this has motivated external memory implementation of various speedup techniques , such as alt  @xcite , ch  @xcite , and time - dependent ch @xcite .",
    "ch in particular is quite practical , supporting interactive queries by compressing the routing data structures and optimizing their access patterns .",
    "relational databases are another important setting in practice , since they allow users to formulate complex queries on the data in sql , a popular and expressive declarative query language  @xcite .",
    "unfortunately , the table - based computational model makes it hard  ( and inefficient ) to implement basic data structures such as graphs or even priority queues .",
    "although some distance oracles based on geometric information could be implemented on a database  @xcite , they are approximate and very expensive in terms of time and space , limiting their applicability to small instances .",
    "a better solution is to use hl , whose queries can very easily be expressed in sql , allowing interactive applications based on shortest path computations entirely within a relational database  @xcite .",
    "for some advanced scenarios , such as time - dependent networks , the preprocessing effort increases quite a lot compared to the time - independent scenario .",
    "one possible solution is to run the preprocessing in a distributed fashion .",
    "one can achieve an almost linear speedup as the number of machine increases , for both ch  @xcite and crp  @xcite .",
    "[ sec : literature : pt ]    this section considers journey planning in  ( schedule - based ) public transit networks . in this scenario , the input is given by a timetable . roughly speaking ,",
    "a timetable consists of a set of stops  ( such as bus stops or train platforms ) , a set of routes  ( such as bus or train lines ) , and a set of trips .",
    "trips correspond to individual vehicles that visit the stops along a certain route at a specific time of the day .",
    "trips can be further subdivided into sequences of elementary connections , each given as a pair of  ( origin / destination ) stops and  ( departure / arrival ) times between which the vehicle travels without stopping .",
    "in addition , footpaths model walking connections ( transfers ) between nearby stops .",
    "a key difference to road networks is that public transit networks are inherently _ time - dependent _ , since certain segments of the network can only be traversed at specific , discrete points in time . as such , the first challenge concerns modeling the timetable appropriately in order to enable the computation of journeys , i.e.",
    ", sequences of trips one can take within a transportation network . while in road networks computing a single shortest path  ( typically the quickest journey ) is often sufficient , in public transit networks it is important to solve more involved problems , often taking several optimization criteria into account .",
    "section  [ sec : literature : pt : modeling ] will address such modeling issues .",
    "accelerating queries for efficient journey planning is a long - standing problem  @xcite .",
    "a large number of algorithms have been developed not only to answer basic queries fast , but also to deal with extended scenarios that incorporate delays , compute robust journeys , or optimize additional criteria , such as monetary cost .",
    "the first challenge is to model the timetable in order to enable algorithms that compute optimal journeys .",
    "since the shortest - path problem is well understood in the literature , it seems natural to build a graph  @xmath145 from the timetable such that shortest paths in  @xmath5 correspond to optimal journeys .",
    "this section reviews the two main approaches to do so  ( _ time - expanded _ and _ time - dependent _ ) , as well as the common types of problems one is interested to solve . for a more detailed overview of these topics ,",
    "we refer the reader to an overview article by mller - hannemann et al .",
    "@xcite .    [",
    "[ time - expanded - model . ] ] time - expanded model .",
    "+ + + + + + + + + + + + + + + + + + + +    based on the fact that a timetable consists of time - dependent _ events _  ( e.g. , a vehicle departing at a stop ) that happen at _ discrete _ points in time , the idea of the _ time - expanded _",
    "model is to build a space - time graph  ( often also called an event graph )  @xcite that `` unrolls '' time . roughly speaking",
    ", the model creates a vertex for every event of the timetable and uses arcs to connect subsequent events in the direction of time flow .",
    "a basic version of the model  @xcite contains a vertex for every departure and arrival event , with consecutive departure and arrival events connected by _ connection _ ( or _ travel _ ) arcs . to enable transfers between vehicles , all vertices at the same stop are  ( linearly , in chronological order ) interlinked by _ transfer _ ( or _ waiting _ ) arcs .",
    "mller - hannemann and weihe  @xcite extend the model to distinguish trains  ( to optimize the number of transfers taken during queries ) by subdividing each connection arc by a new vertex , and then interlinking the vertices of each trip  ( in order of travel ) .",
    "pyrga et al .",
    "@xcite and mller - hannemann and schnee  @xcite extend the time - expanded model to incorporate _",
    "minimum change times _  ( given by the input ) that are required as buffer when changing trips at a station .",
    "their _ realistic _",
    "model introduces an additional _ transfer vertex _ per departure event , and connects each arrival vertex to the first transfer vertex that obeys the minimum change time constraints .",
    "see  [ fig : railwaymodels ] for an illustration .",
    "if there is a footpath from stop  @xmath146 to stop  @xmath147 , then for each arrival event at stop  @xmath146 one adds an arc to the earliest reachable transfer vertex at  @xmath147 .",
    "this model has been further engineered  @xcite to reduce the number of arcs that are explored `` redundantly '' during queries .",
    "a timetable is usually valid for a certain period of time  ( up to one year ) . since the timetables of different days of the year are quite similar , a space - saving technique  ( _ compressed model _ ) is to consider events modulo their traffic days  @xcite .    [",
    "[ time - dependent - model . ] ] time - dependent model",
    ". + + + + + + + + + + + + + + + + + + + + +    o0pt    coordinates    ( 1982 - 10 - 31 00:00,6.5 ) ( 1982 - 10 - 31 03:00,3.5 )    ( 1982 - 10 - 31 03:00,6 ) ( 1982 - 10 - 31 06:00,3 )    ( 1982 - 10 - 31 06:00,6 ) ( 1982 - 10 - 31 09:00,3 )    ( 1982 - 10 - 31 09:00,3.5 ) ( 1982 - 10 - 31 11:00,1.5 )    ( 1982 - 10 - 31 11:00,4 ) ( 1982 - 10 - 31 12:00,3 )    ( 1982 - 10 - 31 12:00,7 ) ( 1982 - 10 - 31 14:00,5 )    ( 1982 - 10 - 31 14:00,5.5 ) ( 1982 - 10 - 31 16:30,3 )    ( 1982 - 10 - 31 16:30,4.5 ) ( 1982 - 10 - 31 18:00,3 )    ( 1982 - 10 - 31 18:00,4.5 ) ( 1982 - 10 - 31 21:00,1.5 )    ; ( axis cs:1982 - 10 - 31 03:00,3.5 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 06:00,3 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 09:00,3 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 11:00,1.5 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 12:00,3 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 14:00,5 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 16:30,3 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 18:00,3 ) circle ( 2pt ) ; ( axis cs:1982 - 10 - 31 21:00,1.5 ) circle ( 2pt ) ;    the main disadvantage of the time - expanded model is that the resulting graphs are quite large  @xcite . for smaller graphs , the time - dependent approach  ( see section  [ ssec : extensions ] ) has been considered by brodal and jacob  @xcite . in their model",
    ", vertices correspond to stops , and an arc is added from  @xmath18 to  @xmath22 if there is at least one elementary connection serving the corresponding stops in this order .",
    "precise departure and arrival times are encoded by the travel time function associated with the arc  @xmath69 .",
    "[ fig : traveltimefunction ] shows the typical shape of a travel time function : each filled circle represents an elementary connection ; the line segments  ( with slope  @xmath148 ) reflect not only the travel time , but also the waiting time until the next departure .",
    "pyrga et al .",
    "@xcite further extended this basic model to enable minimum change times by creating , for each stop  @xmath149 and each route that serves  @xmath149 , a dedicated _ route vertex_. route vertices at  @xmath149 are connected to a common _ stop vertex _ by arcs with constant cost depicting the minimum change time of  @xmath149 .",
    "trips are distributed among _ route arcs _ that connect the subsequent route vertices of a route , as shown in  [ fig : railwaymodels ] .",
    "they also consider a model that allows arbitrary minimum change times between pairs of routes within each stop  @xcite .",
    "footpaths connecting nearby stops are naturally integrated into the time - dependent model  @xcite .",
    "for some applications , one may merge route vertices of the same stop as long as they never connect trips such that a transfer between them violates the minimum change time  @xcite .",
    "[ [ frequency - based - model . ] ] frequency - based model .",
    "+ + + + + + + + + + + + + + + + + + + + + +    in real - world timetables trips often operate according to specific frequencies at times of the day .",
    "for instance , a bus may run every 5 minutes during rush hour , and every 10 minutes otherwise .",
    "bast and storandt  @xcite exploit this fact in the _ frequency - based model _ : as in the time - dependent approach , vertices correspond to stops , and an arc between a pair of stops  @xmath150 is added if there is at least one elementary connection from  @xmath151 to  @xmath152 .",
    "however , instead of storing the departures of an arc explicitly , those with coinciding travel times are compressed into a set of tuples consisting of an initial departure time  @xmath153 , a time interval  @xmath154 , and a frequency  @xmath155 .",
    "the corresponding original departures can thus be reconstructed by computing each  @xmath156 for those  @xmath157 that satisfy  @xmath158 .",
    "bast and storandt compute these tuples by covering the set of departure times by a small set of overlapping arithmetic progressions , then discarding duplicate entries  ( occurring after decompression ) at query time  @xcite .",
    "[ [ problem - variants . ] ] problem variants .",
    "+ + + + + + + + + + + + + + + + +    most research on road networks has focused on computing the shortest path according to a given cost function  ( typically travel times ) .",
    "for public transit networks , in contrast , there is a variety of natural problem formulations .",
    "the simplest variant is the _ earliest arrival problem_. given a source stop  @xmath159 , a target stop  @xmath160 , and a departure time  @xmath161 , it asks for a journey that departs  @xmath159 no earlier than  @xmath161 and arrives at  @xmath160 as early as possible .",
    "a related variant is the _ range _  ( or _ profile _ ) _ problem _",
    "@xcite , which replaces the departure time by a time range  ( e.g.  810am , or the whole day ) .",
    "this problem asks for a set of journeys of minimum travel time that depart within that range .    both the earliest arrival and the range problems only consider  ( arrival or travel ) time as optimization criterion .",
    "in public - transit networks , however , other criteria  ( such as the number of transfers ) are just as important , which leads to the _ multicriteria problem _",
    "given source and target stops  @xmath162 and a departure time  @xmath161 as input , it asks for a  ( maximal ) pareto set  @xmath163 of nondominating journeys with respect to the optimization criteria considered .",
    "a journey  @xmath164 is said to dominate journey  @xmath165 if  @xmath164 is better than or equal to  @xmath165 in all criteria .",
    "further variants of the problem relax or strengthen these domination rules  @xcite .",
    "this section discusses algorithms that can answer queries without a preprocessing phase , which makes them a good fit for dynamic scenarios that include delays , route changes , or train cancellations .",
    "we group the algorithms by the problems they are meant to solve .    [",
    "[ earliest - arrival - problem . ] ] earliest arrival problem .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + +    earliest arrival queries on the time - expanded model can be answered in a straightforward way by dijkstra s algorithm  @xcite , in short  ted  ( time - expanded dijkstra ) .",
    "it is initialized with the vertex that corresponds to the earliest event of the source stop  @xmath159 that occurs after  @xmath161  ( in the realistic model , a transfer vertex must be selected ) .",
    "the first scanned vertex associated with the target stop  @xmath160 then represents the earliest arrival  @xmath8@xmath9 journey . in the compressed time - expanded model , slight modifications to dijkstra s algorithm are necessary because an event vertex may appear several times on the optimal shortest path ( namely for different consecutive days ) .",
    "one possible solution is to use a bag of labels for each vertex as in the multicriteria variants described below .",
    "another solution is described in pyrga et al .",
    "@xcite .    on time -",
    "dependent graphs , dijkstra s algorithm can be augmented to compute shortest paths  @xcite , as long as the cost functions are nonnegative and fifo  @xcite .",
    "the only modification is that , when the algorithm scans an arc  @xmath69 , the arc cost is evaluated at time  @xmath166 .",
    "note that the algorithm retains the label - setting property , i.e. , each vertex is scanned at most once . in the time - dependent public transit model ,",
    "the query is run from the stop vertex corresponding to  @xmath159 and the algorithm may stop as soon as it extracts  @xmath160 from the priority queue . the algorithm is called  tdd  ( time - dependent dijkstra ) .    another approach is to exploit the fact that the time - expanded graph is directed and acyclic .",
    "( note that overnight connections can be handled by unrolling the timetable for several consecutive periods . ) by scanning vertices in topological order , arbitrary queries can be answered in linear time .",
    "this simple and well - known observation has been applied for journey planning by mellouli and suhl  @xcite , for example .",
    "while this idea saves the relatively expensive priority queue operations of dijkstra s algorithm , one can do even better by not maintaining the graph structure explicitly , thus improving locality and cache efficiency .",
    "the recently developed _",
    "connection scan algorithm _  ( csa )",
    "@xcite organizes the elementary connections of the timetable in a single array , sorted by departure time .",
    "the query then only scans this array once , which is very efficient in practice .",
    "note that csa requires footpaths in the input to be closed under transitivity to ensure correctness .",
    "[ [ range - problem . ] ] range problem .",
    "+ + + + + + + + + + + + + +    the range problem can be solved on the time - dependent model by variants of dijkstra s algorithm . the first variant  @xcite maintains , at each vertex  @xmath18 , a travel - time function  ( instead of a scalar label ) representing the optimal travel times from  @xmath8 to  @xmath18 for the considered time range . whenever the algorithm relaxes an arc  @xmath69 , it first _ links _ the full travel - time function associated with  @xmath18 to the  ( time - dependent ) cost function of the arc  @xmath69 , resulting in a function that represents the times to travel from  @xmath8 to  @xmath22 via  @xmath18 .",
    "this function is then _ merged _ into the  ( tentative ) travel time function associated with  @xmath22 , which corresponds to taking the element - wise minimum of the two functions .",
    "the algorithm loses the label - setting property , since travel time functions can not be totally ordered . as a result",
    "the algorithm may reinsert vertices into the priority queue whenever it finds a journey that improves the travel time function of an already scanned vertex .",
    "another algorithm  @xcite exploits the fact that trips depart at discrete points in time , which helps to avoid redundant work when propagating travel time functions .",
    "when it relaxes an arc , it does not consider the full function , but each of its encoded connections individually .",
    "it then only propagates the parts of the function that have improved .",
    "the _ self - pruning connection setting _",
    "algorithm  ( spcs )  @xcite is based on the observation that _ any _ optimal journey from  @xmath8 to  @xmath9 has to start with one of the trips departing from  @xmath8 .",
    "it therefore runs , for each such trip , dijkstra s algorithm from  @xmath8 at its respective departure time .",
    "spcs performs these runs simultaneously using a shared priority queue whose entries are ordered by arrival time . whenever the algorithm scans a vertex  @xmath18 , it checks if  @xmath18 has been already scanned for an associated  ( departing ) trip with a _ later _ departure time  ( at  @xmath8 ) , in which case it prunes  @xmath18 .",
    "moreover , spcs can be parallelized by assigning different subsets of departing trips from  @xmath8 to different cpu cores .",
    "bast and storandt  @xcite propose an extension of dijkstra s algorithm that operates on the  ( compressed ) frequency - based model directly .",
    "it maintains with every vertex  @xmath18 a set of tuples consisting of a time interval , a frequency , and the travel time .",
    "hence , a single tuple may represent multiple optimal journeys , each departing within the tuple s time interval .",
    "whenever the algorithm relaxes an arc  @xmath69 , it first extends the tuples from the bag at  @xmath151 with the ones stored at the arc  @xmath69 in the compressed graph .",
    "the resulting tentative bag of tuples  ( representing all optimal journeys to  @xmath152 via  @xmath151 ) is then _ merged _ into the bag of tuples associated with  @xmath22 .",
    "the main challenge of this algorithm is efficiently merging tuples with incompatible frequencies and time intervals  @xcite .    finally , the connection scan algorithm has been extended to the range problem  @xcite .",
    "it uses the same array of connections , ordered by departure time , as for earliest arrival queries .",
    "it still suffices to scan this array once , even to obtain optimal journeys to all stops of the network .",
    "[ [ multicriteria - problem . ] ] multicriteria problem .",
    "+ + + + + + + + + + + + + + + + + + + + + +    although pareto sets can contain exponentially many solutions  ( see section  [ ssec : extensions ] ) , they are often much smaller for public transit route planning , since common optimization criteria are positively correlated .",
    "for example , for the case of optimizing earliest arrival time and number of transfers , the _ layered dijkstra _  ( ld )",
    "algorithm  @xcite is efficient .",
    "given an upper bound  @xmath167 on the number of transfers , it  ( implicitly ) copies the timetable graph into  @xmath167 layers , rewiring transfer arcs to point to the next higher level .",
    "it then suffices to run a time - dependent  ( single criterion ) dijkstra query from the lowest level to obtain pareto sets .    in the time - expanded model ,",
    "mller - hannemann and schnee  @xcite consider the multicriteria label - setting  ( mls ) algorithm  ( cf .",
    "section  [ ssec : extensions ] ) to optimize arrival time , ticket cost , and number of transfers . in the time - dependent model , pyrga et al .",
    "@xcite compute pareto sets of journeys for arrival time and number of transfers .",
    "disser et al .",
    "@xcite propose three optimizations to mls that reduce the number of queue operations : hopping reduction , label forwarding , and dominance by early results  ( or _ target pruning _ ) .",
    "bast and storandt  @xcite extend the frequency - based range query algorithm to also include number of transfers as criterion .",
    "a different approach is _ raptor _  ( round - based public transit optimized router )  @xcite .",
    "it is explicitly developed for public transit networks and its basic version optimizes arrival time and the number of transfers taken . instead of using a graph",
    ", it organizes the input as a few simple arrays of trips and routes .",
    "essentially , raptor is a dynamic program : it works in rounds , with round  @xmath57 computing earliest arrival times for journeys that consist of exactly  @xmath57 transfers .",
    "each round takes as input the stops whose arrival time improved in the previous round  ( for the first round this is only the source stop ) .",
    "it then _ scans _ the routes served by these stops . to scan route  @xmath168",
    ", raptor traverses its stops in order of travel , keeping track of the earliest possible trip  ( of  @xmath168 ) that can be taken .",
    "this trip may improve the tentative arrival times at subsequent stops of route  @xmath168 .",
    "note that raptor scans each route at most once per round , which is very efficient in practice  ( even faster than dijkstra s algorithm with a single criterion ) .",
    "moreover , raptor can be parallelized by distributing non - conflicting routes to different cpu cores .",
    "it can also be extended to handle range queries  ( rraptor ) and additional optimization criteria  ( mcraptor ) .",
    "note that , like csa , raptor also requires footpaths in the input to be closed under transitivity .",
    "this section presents an overview of preprocessing - based speedup techniques for journey planning in public transit networks .",
    "a natural  ( and popular ) approach is to adapt methods that are effective on road networks  ( see  [ fig : literature : performance ] ) .",
    "unfortunately , the speedups observed in public transit networks are several orders of magnitude lower than in road networks .",
    "this is to some extent explained by the quite different structural properties of public transit and road networks  @xcite .",
    "for example , the neighborhood of a stop can be much larger than the number of road segments incident to an intersection .",
    "even more important is the effect of the inherent time - dependency of public transit networks .",
    "thus , developing efficient preprocessing - based methods for public transit remains a challenge .",
    "some road network methods were tested on public transit graphs without performing realistic queries  ( i.e. , according to one of the problems from section  [ sec : literature : pt : modeling ] ) . instead , such studies simply perform point - to - point queries on public - transit graphs . in particular , holzer et al .",
    "@xcite evaluate basic combinations of bidirectional search , goal directed search , and geometric containers on a simple stop graph  ( with average travel times ) .",
    "bauer et al .",
    "@xcite also evaluated bidirectional search , alt , arc flags , reach , real , highway hierarchies , and sharc on time - expanded graphs .",
    "core - alt , chase , and contraction hierarchies have also been evaluated on time - expanded graphs  @xcite .",
    "[ [ asearch.-1 ] ] a*search .",
    "+ + + + + + + + +    on public transit networks , basic a *  search has been applied to the time - dependent model  @xcite . in the context of multicriteria optimization , disser et al .",
    "@xcite determine lower bounds for each vertex  @xmath18  to the target stop  @xmath160  ( before the query ) by running a backward search  ( from  @xmath160 ) using  the  ( constant ) lower bounds of the travel time functions as arc cost .",
    "[ [ alt . ] ] alt .",
    "+ + + +    the  ( unidirectional ) alt  @xcite algorithm has been adapted to both the time - expanded  @xcite and the time - dependent  @xcite models for computing earliest arrival queries . in both cases , landmark selection and distance precomputation",
    "is performed on an auxiliary stop graph , in which vertices correspond to stops and an arc is added between two stops  @xmath169 if there is an elementary connection from  @xmath146 to  @xmath147 in the input .",
    "arc costs are lower bounds on the travel time between their endpoints .",
    "[ [ geometric - containers.-1 ] ] geometric containers .",
    "+ + + + + + + + + + + + + + + + + + + + +    geometric containers  @xcite have been extensively tested on the time - expanded model for computing earliest arrival queries .",
    "in fact , they were developed in the context of this model . as mentioned in section  [ sec : p2p ] , bounding boxes perform best  @xcite .    [",
    "[ arc - flags - and - sharc . ] ] arc flags and sharc .",
    "+ + + + + + + + + + + + + + + + + + + +    delling et al .",
    "@xcite have adapted arc flags  @xcite to the time - expanded model as follows .",
    "first , they compute a partition on the stop graph  ( defined as in alt ) .",
    "then , for each boundary stop  @xmath149 of cell  @xmath115 , and each of its arrival vertices , a backward search is performed on the time - expanded graph .",
    "the authors observe that public transit networks have many paths of equal length between the same pair of vertices  @xcite , making the choice of tie - breaking rules important .",
    "furthermore , delling et al .",
    "@xcite combine arc flags , alt , and a technique called _ node blocking _ , which avoids exploring multiple arcs from the same route .",
    "sharc , which combines arc flags with shortcuts  @xcite , has been tested on the time - dependent model with earliest arrival queries by delling  @xcite .",
    "moreover , arc flags with shortcuts for the multi - label - setting algorithm  ( mls ) have been considered for computing full  ( i.e. , using strict domination ) pareto sets using arrival time and number of transfers as criteria  @xcite . in time - dependent graphs ,",
    "a flag must be set if its arc appears on a shortest path toward the corresponding cell at least once during the time horizon  @xcite . for better performance",
    ", one can use different sets of flags for different time periods  ( e.g. , every two hours ) .",
    "the resulting total speedup is still below 15 , from which it is concluded that `` accelerating time - dependent multicriteria timetable information is harder than expected ''  @xcite .",
    "slight additional speedups can be obtained if one restricts the search space to only those solutions in the pareto set for which the travel time is within an interval defined by the earliest arrival time and some upper bound .",
    "berger et al .",
    "@xcite observed that in such a scenario optimal substructure in combination with lower travel time bounds can be exploited and yield additional pruning during search .",
    "it is worth noting that this method does not require any preprocessing and is therefore well - suited for a dynamic scenario .",
    "[ [ overlay - graphs . ] ] overlay graphs .",
    "+ + + + + + + + + + + + + + +    to accelerate earliest arrival queries , schulz et al .",
    "@xcite compute single - level overlays between `` important '' hub stations in the time - expanded model , with importance values given as input .",
    "more precisely , given a subset of important stations , the overlay graph consists of _ all _ vertices  ( events ) that are associated with these stations .",
    "edges in the overlay are computed such that distances between any pair of vertices  ( events ) are preserved . extending this approach to overlay graphs over multiple levels of hub stations  ( selected by importance or degree ) results in speedups of about 11  @xcite .",
    "[ [ separator - based - techniques . ] ] separator - based techniques .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    strasser and wagner  @xcite combine the connection scan algorithm  @xcite with ideas of customizable route planning  ( crp )  @xcite resulting in the accelerated connection scan algorithm  ( acsa ) .",
    "it is designed for both earliest arrival and range queries .",
    "acsa first computes a multilevel partition of stops , minimizing the number of elementary connections with endpoints in different cells .",
    "then , it precomputes for each cell the partial journeys  ( transit connections ) that cross the respective cell . for queries , the algorithm essentially runs csa restricted to the elementary connections of the cells containing the source or target stops , as well as transit connections of other  ( higher - level ) cells . as shown in section  [ sec : pt : experiments ] , it achieves excellent query and preprocessing times on country - sized instances .",
    "[ [ contraction - hierarchies.-1 ] ] contraction hierarchies .",
    "+ + + + + + + + + + + + + + + + + + + + + + + +    the contraction hierarchies algorithm  @xcite has been adapted to the realistic time - dependent model with minimum change times for computing earliest arrival and range queries  @xcite .",
    "it turns out that simply applying the algorithm to the route model graph results in too many shortcuts to be practical .",
    "therefore , contraction is performed on a condensed graph that contains only a single vertex per stop .",
    "minimum change times are then ensured by the query algorithm , which must maintain multiple labels per vertex .",
    "[ [ transfer - patterns . ] ] transfer patterns .",
    "+ + + + + + + + + + + + + + + + + +    a speedup technique specifically developed for public transit networks is called _ transfer patterns _",
    "it is based on the observation that many optimal journeys share the same transfer pattern , defined as the sequence of stops where a transfer occurs . conceptually , these transfer patterns are precomputed using range queries for all pairs of stops and departure times . at query time",
    ", a query graph is built as the union of the transfer patterns between the source and target stops .",
    "the arcs in the query graph represent direct connections between stops  ( without transfers ) , and can be evaluated very fast .",
    "algorithm  ( or mls ) is then applied to this much smaller query graph .",
    "if precomputing transfer patterns between _ all _ pairs of stops is too expensive , one may resort to the following two - level approach .",
    "it first selects a subset of  ( important ) hub stops . from the hubs ,",
    "global transfer patterns are precomputed to all other stops . for the non - hubs ,",
    "local transfer patterns are computed only towards relevant hub stops .",
    "this approach is similar to tnr , but the idea is applied asymmetrically : transfer patterns are computed from all stops to the hub stops , and from the hub stops to everywhere .",
    "if preprocessing is still impractical , one can restrict the local transfer patterns to at most three legs  ( two transfers ) .",
    "although this restriction is heuristic , the algorithm still almost always finds the optimal solution in practice , since journeys requiring more than two transfers to reach a hub station are rare  @xcite .",
    "[ [ transit . ] ] transit .",
    "+ + + + + + + +    finally , transit node routing  @xcite has been adapted to public transit journey planning in  @xcite .",
    "preprocessing of the resulting _ transit _ algorithm uses the  ( small ) stop graph to determine a set of transit nodes  ( with a similar method as in  @xcite ) , between which it maintains a distance table that contains sets of journeys with minimal travel time  ( over the day ) .",
    "each stop  @xmath149 maintains , in addition , a set of access nodes  @xmath170 , which is computed on the time - expanded graph by running local searches from each departure event of  @xmath149 toward the transit stops .",
    "the query then uses the access nodes of  @xmath159 and  @xmath160 and the distance table to resolve global requests . for local requests , it runs goal - directed  a*search .",
    "queries are slower than for transfer patterns .      besides computing journeys according to one of the problems from section  [ sec : literature : pt : modeling ]",
    ", extended scenarios  ( such as incorporating delays ) have been studied as well .    [",
    "[ uncertainty - and - delays . ] ] uncertainty and delays .",
    "+ + + + + + + + + + + + + + + + + + + + + + +    trains , buses and other means of transport are often prone to delays in the real world .",
    "thus , handling delays  ( and other sources of uncertainty ) is an important aspect of a practical journey planning system .",
    "firmani et al .",
    "@xcite recently presented a case study for the public transport network of the metropolitan area of rome .",
    "they provide strong evidence that computing journeys according to the published timetable often fails to deliver optimal or even high - quality solutions .",
    "however , incorporating real - time gps location data of vehicles into the journey planning algorithm helps improve the journey quality  ( e.g. , in terms of the experienced delay )  @xcite .",
    "mller - hannemann and schnee  @xcite consider the online problem where delays , train cancellations , and extra trains arrive as a continuous stream of information .",
    "they present an approach which quickly updates the time - expanded model to enable queries according to current conditions . delling et al .",
    "@xcite also discuss updating the time - dependent model and compare the required effort with the time - expanded model .",
    "cionini et al .",
    "@xcite propose a new graph - based model which is tailored to handle dynamic updates , and they experimentally show its effectiveness in terms of both query and update times .",
    "berger et al .",
    "@xcite propose a realistic stochastic model that predicts how delays propagate through the network .",
    "in particular , this model is evaluated using real  ( delay ) data from deutsche bahn .",
    "bast et al .",
    "@xcite study the robustness of transfer patterns with respect to delays .",
    "they show that the transfer patterns computed for a scenario without any delays give optimal results for 99% of queries , even when large and area - wide  ( random ) delays are injected into the networks .",
    "disser et al .",
    "@xcite and delling et al .",
    "@xcite study the computation of _ reliable _ journeys via multicriteria optimization .",
    "the reliability of a transfer is defined as a function of the available buffer time for the transfer .",
    "roughly speaking , the larger the buffer time , the more likely it is that the transfer will be successful . according to this notion ,",
    "transfers with a high chance of success are still considered reliable even if there is no backup alternative in case they fail .    to address this issue , dibbelt et al .",
    "@xcite minimize the _ expected arrival time _  ( with respect to a simple model for the probability that a transfer breaks ) . instead of journeys , their method  ( which is based on the csa algorithm ) outputs a _ decision graph _ representing optimal instructions to the user at each point of their journey , including cases in which a connecting trip is missed . interestingly , minimizing the expected arrival time implicitly helps minimizing the number of transfers , since each `` unnecessary '' transfer introduces additional uncertainty , hurting the expected arrival time .",
    "finally , goerigk et al .",
    "@xcite study the computation of _ robust _ journeys , considering both strict robustness  ( i.e. , computing journeys that are always feasible for a given set of delay scenarios ) and light robustness  ( i.e. , computing journeys that are most reliable when given some extra slack time ) .",
    "while strict robustness turns out to be too conservative in practice , the notion of light robustness seems more promising . _",
    "recoverable robust _ journeys  ( which can always be updated when delays occur ) have recently been considered in  @xcite . a different , new robustness concept has been proposed by bhmov et al .  @xcite . in order to propose solutions that are robust for typical delays , past observations of real traffic situations are used . roughly speaking , a route is more robust the better it has performed in the past under different scenarios .",
    "[ [ night - trains . ] ] night trains .",
    "+ + + + + + + + + + + + +    gunkel et al .",
    "@xcite have considered the computation of overnight train journeys , whose optimization goals are quite different from regular `` daytime '' journeys . from a customer s point of view , the primary objective is usually to have a reasonably long sleeping period .",
    "moreover , arriving too early in the morning at the destination is often not desired .",
    "gunkel et al .",
    "present two approaches to compute overnight journeys .",
    "the first approach explicitly enumerates all overnight trains  ( which are given by the input ) and computes , for each such train , the optimal feeding connections .",
    "the second approach runs multicriteria search with sleeping time as a maximization criterion .",
    "[ [ fares . ] ] fares .",
    "+ + + + + +    mller - hannemann and schnee  @xcite have analyzed several pricing schemes , integrating them as an optimization criterion  ( cost ) into motis , a multicriteria search algorithm that works on the time - expanded model . in general , however , optimizing exact monetary cost is a challenging problem , since real - world pricing schemes are hard to capture by a mathematical model  @xcite .    delling et al .",
    "@xcite consider computing pareto sets of journeys that optimize fare zones with the mcraptor algorithm . instead of using  ( monetary ) cost as an optimization criterion directly",
    ", they compute all nondominated journeys that traverse different combinations of fare zones , which can then be evaluated by cost in a quick postprocessing step .    [ [ guidebook - routing . ] ] guidebook routing .",
    "+ + + + + + + + + + + + + + + + + +    bast and storandt  @xcite introduce _ guidebook routing _",
    ", where the user specifies only source and target stops , but neither a day nor a time of departure .",
    "the desired answer is then a set of routes , each of which is given by a sequence of train or bus numbers and transfer stations .",
    "for example , an answer may read like _ take bus number 11 towards the bus stop at x , then change to bus number 13 or 14  ( whichever comes first ) and continue to the bus stop at y_. guidebook routes can be computed by first running a multicriteria range query , and then extracting from the union of all pareto - optimal time - dependent paths a subset of routes composed by arcs which are most frequently used .",
    "the transfer patterns algorithm lends itself particularly well to the computation of such guidebook routes . for practical guidebook routes  ( excluding `` exotic '' connections at particular times ) , the preprocessing space and query times of transfer patterns",
    "can be reduced by a factor of 4 to 5 .",
    "this section compares the performance of some of the journey planning algorithms discussed in this section . as in road networks ,",
    "all algorithms have been carefully implemented in c++ using mostly custom - built data structures .",
    "table  [ tab : public_transit ] summarizes the results . running times are obtained from a sequential execution on one core of a dual 8-core intel xeon e5 - 2670 machine clocked at 2.6ghz with 64gib of ddr3 - 1600 ram .",
    "the exceptions are transfer patterns and contraction hierarchies , for which we reproduce the values reported in the original publication  ( obtained on a comparable machine ) .    for each algorithm ,",
    "we report the instance on which it has been evaluated , as well as its total number of elementary connections  ( a proxy for size ) and the number of consecutive days covered by the connections . unfortunately",
    ", realistic benchmark data of country scale  ( or larger ) has not been widely available to the research community .",
    "some metropolitan transit agencies have recently started making their timetable data publicly available , mostly using the general transit feed format .",
    "still , research groups often interpret the data differently , making it hard to compare the performance of different algorithms .",
    "the largest metropolitan instance currently available is the full transit network of london .",
    "it contains approximately 21 thousand stops , 2.2 thousand routes , 133 thousand trips , 46 thousand footpaths , and 5.1 million elementary connections for one full day .",
    "we therefore use this instance for the evaluation of most algorithms .",
    "the instances representing germany and long - distance trains in europe are generated in a similar way , but from proprietary data .",
    "lrlrrccccccrrrr & & & & & & + & & & conn . & & & & & & & & prep . & comp . & & time + algorithm & & name & [ @xmath171 & dy . & &    70arr .    &",
    "70tran .    &    70rng .    &    70fare    &    70rel .    &",
    "[ h ] & /stop & jn . &",
    "[ ms ] + ted & & london & 5.1 & 1 & & @xmath172 & @xmath173 & @xmath173 & @xmath173 & @xmath173 &  & 50.6 & 0.9 & 44.8 + tdd &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath173 & @xmath173 & @xmath173 & @xmath173 &  & 7.4 & 0.9 & 11.0 + ch &  @xcite & europe(lng ) & 1.7 & p & & @xmath172 & @xmath173 & @xmath173 & @xmath173 & @xmath173 & @xmath1740.1 & @xmath1740.1 & n / a & 0.3 + csa &  @xcite & london & 4.9 & 1 & & @xmath172 & @xmath173 & @xmath173 & @xmath173 & @xmath173 &  & 26.6 & n / a & 2.0 + acsa &  @xcite & germany & 46.2 & 2 & & @xmath172 & @xmath173 & @xmath173 & @xmath173 & @xmath173 &  & n / a & n / a & 8.7 + t.patterns &  @xcite & germany & 90.4 & 7 & & @xmath172 & @xmath173 & @xmath173 & @xmath173 & @xmath173 & 541 &  & 1.0 & 0.4 + ld &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath172 & @xmath173 & @xmath173 & @xmath173 &  & 15.6 & 1.8 & 28.7 + mls &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath172 & @xmath173 & @xmath173 & @xmath173 &  & 23.7 & 1.8 & 50.0 + raptor &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath172 & @xmath173 & @xmath173 & @xmath173 &  & 10.9 & 1.8 & 5.4 + t.patterns &  @xcite & germany & 90.4 & 7 & & @xmath172 & @xmath172 & @xmath173 & @xmath173 & @xmath173 & 566 &  & 2.0 & 0.8 + ch &  @xcite & europe(lng ) & 1.7 & p & & @xmath172 & @xmath173 & @xmath172 & @xmath173 & @xmath173 & @xmath1740.1 & @xmath1740.1 & n / a & 3.7 + spcs &  @xcite & london & 4.9 & 1 & & @xmath172 & @xmath173 & @xmath172 & @xmath173 & @xmath173 &  & 372.5 & 98.2 & 843.0 + csa &  @xcite & london & 4.9 & 1 & & @xmath172 & @xmath173 & @xmath172 & @xmath173 & @xmath173 &  & 436.9 & 98.2 & 161.0 + acsa &  @xcite & germany & 46.2 & 2 & & @xmath172 & @xmath173 & @xmath172 & @xmath173 & @xmath173 & 8 & n / a & n / a & 171.0 + t.patterns &  @xcite & germany & 90.4 & 7 & & @xmath172 & @xmath173 & @xmath172 & @xmath173 & @xmath173 & 541 &  & 121.2 & 22.0 + rraptor &  @xcite & london & 4.9 & 1 & & @xmath172 & @xmath172 & @xmath172 & @xmath173 & @xmath173 &  & 1634.0 & 203.4 & 922.0 + csa &  @xcite & london & 4.9 & 1 & & @xmath172 & @xmath172 & @xmath172 & @xmath173 & @xmath173 &  & 3824.9 & 203.4 & 466.0 + t.patterns &  @xcite & germany & 90.4 & 7 & & @xmath172 & @xmath172 & @xmath172 & @xmath173 & @xmath173 & 566 &  & 226.0 & 39.6 + mls &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath172 & @xmath173 & @xmath172 & @xmath173 &  & 818.2 & 8.8 & 304.2 + mcraptor &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath172 & @xmath173 & @xmath172 & @xmath173 &  & 277.5 & 8.8 & 100.9 + mls &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath172 & @xmath173 & @xmath173 & @xmath172 &  & 286.6 & 4.7 & 239.8 + mcraptor &  @xcite & london & 5.1 & 1 & & @xmath172 & @xmath172 & @xmath173 & @xmath173 & @xmath172 &  & 89.6 & 4.7 & 71.9 +    the table also contains the preprocessing time  ( where applicable ) , the average number of label comparisons per stop , the average number of journeys computed by the algorithm , and its running time in milliseconds .",
    "note that the number of journeys can be below 1 because some stops are unreachable for certain late departure times .",
    "references indicate the publications from which the figures are taken  ( which may differ from the first publication ) ; ted was run by the authors for this survey .",
    "( our ted implementation uses a single - level bucket queue  @xcite and stops as soon as a vertex of the target stop has been extracted . ) the columns labeled `` criteria '' indicate whether the algorithm minimizes arrival time  ( arr ) , number of transfers  ( tran ) , fare zones  ( fare ) , reliability  ( rel ) , and whether it computes range queries  ( rng ) over the full timetable period of 1 , 2 , or 7 days .",
    "methods with multiple criteria compute pareto sets .    among algorithms without preprocessing ,",
    "observe that those that do not use a graph  ( raptor and csa ) are consistently faster than their graph - based counterparts .",
    "moreover , running dijkstra on the time - expanded graph model  ( ted ) is significantly slower than on the time - dependent graph model  ( tdd ) , since time - expanded graphs are much larger .",
    "for earliest arrival queries on metropolitan areas , csa is the fastest algorithm without preprocessing , but preprocessing - based methods  ( such as transfer patterns ) can be even faster . for longer - range transit networks , preprocessing - based methods",
    "scale very well .",
    "ch takes 210 seconds to preprocess the long - distance train connections of europe , while acsa takes 8 hours to preprocess the full transit network of germany .",
    "transfer patterns takes over 60 times longer to preprocess  ( a full week of ) the full transit network of germany , but has considerably lower query times .    for multicriteria queries ,",
    "raptor is about an order of magnitude faster than dijkstra - based approaches like ld and mls .",
    "raptor is twice as fast as tdd , while computing twice as many journeys on average .",
    "adding further criteria  ( such as fares and reliability ) to mls and raptor increases the pareto set , but performance is still reasonable for metropolitan - sized networks .",
    "thanks to preprocessing , transfer patterns has the fastest queries overall , by more than an order of magnitude . note that in public transit networks the optimization criteria are often positively correlated  ( such as arrival time and number of transfers ) , which keeps the pareto sets at a manageable size .",
    "still , as the number of criteria increases , exact real - time queries become harder to achieve .",
    "the reported figures for transfer patterns are based on preprocessing leveraging the frequency - based model with traffic days compression , which makes quadratic  ( in the number of stops ) preprocessing effort feasible .",
    "consequently , hub stops and the three - leg heuristic are not required , and the algorithm is guaranteed to find the optimal solution .",
    "the data produced by the preprocessing is shown to be robust against large and area - wide delays , resulting in much less than 1% of suboptimal journeys",
    "@xcite  ( not shown in the table ) .    for range queries , preprocessing - based techniques  ( ch , acsa , transfer patterns ) scale better than csa or spcs . for full multicriteria range queries  ( considering transfers ) ,",
    "transfer patterns is by far the fastest method , thanks to preprocessing . among search - based methods , csa is faster than rraptor by a factor of two , although it does twice the amount of work in terms of label comparisons .",
    "note , however , that while csa can not scale to smaller time ranges by design  @xcite , the performance of rraptor depends linearly on the number of journeys departing within the time range  @xcite . for example , for 2-hour range queries rraptor computes  15.9  journeys taking only  61.3ms on average  @xcite  ( not reported in the table ) .",
    "guidebook routes covering about  80%  of the optimal results  ( for the full period ) can be computed in a fraction of a millisecond  @xcite .",
    "we now consider journey planning in a multimodal scenario . here , the general problem is to compute journeys that _ reasonably _ combine different modes of transportation by a _ holistic _",
    "algorithmic approach .",
    "that is , not only does an algorithm consider each mode of transportation in isolation , but it also optimizes the choice  ( and sequence ) of transportation modes in some integrated way .",
    "transportation modes that are typically considered include  ( unrestricted ) walking ,  ( unrestricted ) car travel ,  ( local and long - distance ) public transit , flight networks , and rental bicycle schemes .",
    "we emphasize that our definition of `` multimodal '' requires some diversity from the transportation modes , i.e. , both unrestricted and schedule - based variants should be considered by the algorithm . for example , journeys that only use buses , trams , or trains are not truly multimodal  ( according to our definition ) , since these transportation modes can be represented as a single public transit schedule and dealt with by algorithms from section  [ sec : public ] .",
    "in fact , considering modal transfers explicitly by the algorithm is crucial in practice , since the solutions it computes must be _ feasible _ , excluding sequences of transportation modes that are impossible for the user to take  ( such as a private car between train rides ) .",
    "ideally , even user preferences should be respected .",
    "for example , some users may prefer taxis over public transit at certain parts of the journey , while others may not .",
    "a general approach to obtain a multimodal network is to first build an individual graph for each transportation mode , then merge them into a single multimodal graph with _ link arcs _  ( or vertices ) added to enable modal transfers  @xcite .",
    "typical examples  @xcite model car travel and walking as time - independent  ( static ) graphs , public transit networks using the realistic time - dependent model  @xcite , and flight networks using a dedicated flight model  @xcite . beyond that , kirchler et al .",
    "@xcite compute multimodal journeys in which car travel is modeled as a time - dependent network in order to incorporate historic data on rush hours and traffic congestion  ( see section  [ ssec : extensions ] for details ) .",
    "[ [ overview . ] ] overview .",
    "+ + + + + + + + +    the remainder of this section discusses three different approaches to the multimodal problem .",
    "the first  ( section  [ sec : mm : cost ] ) considers a combined cost function of travel time with some penalties to account for modal transfers .",
    "the second approach  ( section  [ sec : mm : lcsp ] ) uses the label - constrained shortest path problem to obtain journeys that explicitly include  ( or exclude ) certain sequences of transportation modes .",
    "the final approach  ( section  [ sec : mm : mc ] ) computes pareto sets of multimodal journeys using a carefully chosen set of optimization criteria that aims to provide diverse  ( regarding the transportation modes ) alternative journeys .      to aim for journeys that reasonably combine different transport modes , one may use penalties in the objective function of the algorithm .",
    "these penalties are often considered as a linear combination with the primary optimization goal  ( typically travel time ) .",
    "examples for this approach include aifadopoulou et al .",
    "@xcite , who present a linear program that computes multimodal journeys .",
    "the transit algorithm  @xcite also uses a linear utility function and incorporates travel time , ticket cost , and `` inconvenience '' of transfers .",
    "finally , modesti and sciomachen  @xcite consider a combined network of unrestricted walking , unrestricted car travel , and public transit , in which journeys are optimized according to a linear combination of several criteria , such as cost and travel time .",
    "moreover , their utility function incorporates user preferences on the transportation modes .",
    "the _ label - constrained shortest paths _",
    "@xcite approach computes journeys that explicitly obey certain constraints on the modes of transportation .",
    "it defines an alphabet  @xmath175 of modes of transportation and labels each arc of the graph by the appropriate symbol from  @xmath175 .",
    "then , given a language  @xmath129 over  @xmath175 as additional input to the query , any journey  ( path ) must obey the constraints imposed by the language  @xmath129 , i.e. , the concatenation of the labels along the path must satisfy  @xmath129 .",
    "the problem of computing _ shortest _ label - constrained paths is tractable for _ regular _ languages  @xcite , which suffice to model reasonable transport mode constraints in multimodal journey planning  @xcite .",
    "even restricted classes of regular languages can be useful , such as those that impose a hierarchy of transport modes  @xcite or kleene languages that can only globally exclude  ( and include ) certain transport modes  @xcite .",
    "barrett et al .",
    "@xcite have proven that the label - constrained shortest path problem is solvable in deterministic polynomial time .",
    "the corresponding algorithm , called _ label - constrained shortest path problem dijkstra _",
    "( lcspp - d ) , first builds a product network  @xmath176 of the input  ( the multimodal graph ) and the  ( possibly nondeterministic ) finite automaton that accepts the regular language  @xmath129 . for given source and target vertices  @xmath177  ( referring to the original input ) , the algorithm determines origin and destination sets of product vertices from  @xmath176 , containing those product vertices that refer to  @xmath178/@xmath179 and an initial / final state of the automaton .",
    "dijkstra s algorithm is then run on  @xmath176 between these two sets of product vertices . in a follow - up experimental study , barrett et al .",
    "@xcite evaluate this algorithm using linear regular languages , a special case .",
    "basic speedup techniques , such as bidirectional search  @xcite , a *  @xcite , and heuristic a *  @xcite have been evaluated in the context of multimodal journey planning in  @xcite and  @xcite .",
    "also , pajor  @xcite combines the lcspp - d algorithm with time - dependent dijkstra  @xcite to compute multimodal journeys that contain a time - dependent subnetwork .",
    "he also adapts and analyzes bidirectional search  @xcite , alt  @xcite , arc flags  @xcite , and shortcuts  @xcite with respect to lcspp .",
    "[ [ access - node - routing . ] ] access - node routing .",
    "+ + + + + + + + + + + + + + + + + + + +    the _ access - node routing _",
    "( anr )  @xcite algorithm is a speedup technique for the label - constrained shortest path problem  ( lcspp ) .",
    "it handles _ hierarchical languages _ , which allow constraints such as restricting walking and car travel to the beginning and end of the journey .",
    "it works similarly to transit node routing  @xcite and precomputes for each vertex  @xmath18 of the road  ( walking and car ) network its relevant set of entry  ( and exit ) points  ( _ access nodes _ ) to the public transit and flight networks .",
    "more precisely , for any shortest path  @xmath88 originating from vertex  @xmath18  ( of the road network ) that also uses the public transit network , the first vertex  @xmath22 of the public transit network on  @xmath88 must be an access node of  @xmath18 .",
    "the query may skip over the road network by running a multi - source multi - target algorithm on the  ( much smaller ) transit network between the access nodes of  @xmath8 and  @xmath9 , returning the journey with earliest combined arrival time .",
    "the _ core - based anr _",
    "@xcite method further reduces preprocessing space and time by combining anr with contraction . as in core - alt  @xcite , it precomputes access nodes only for road vertices in a much smaller core  ( overlay ) graph .",
    "the query algorithm first  ( quickly ) determines the relevant core vertices of  @xmath8 and  @xmath9  ( i.e. , those covering the branches of the shortest path trees rooted at  @xmath8 and  @xmath9 ) , then runs a multi - source multi - target anr query between them .",
    "access - node routing has been evaluated on multimodal networks of intercontinental size that include walking , car travel , public transit , and flights .",
    "queries run in milliseconds , but preprocessing time strongly depends on the density of the public transit and flight networks  @xcite .",
    "moreover , since the regular language is used during preprocessing , it can no longer be specified at query time without loss of optimality .    [ [ state - dependent - alt . ] ] state - dependent alt .",
    "+ + + + + + + + + + + + + + + + + + + +    another multimodal speedup technique for lcspp is _ state - dependent alt _",
    "( sdalt )  @xcite .",
    "it augments the alt algorithm  @xcite to overcome the fact that lower bounds from a vertex  @xmath18 may depend strongly on the current state  @xmath180 of the automaton  ( expressing the regular language ) with which  @xmath18 is scanned .",
    "sdalt thus uses the automaton to precompute state - dependent distances , providing lower bound values per vertex _ and _ state . for even better query performance , sdalt can be extended to use more aggressive  ( and potentially incorrect ) bounds to guide the search toward the target , relying on a label - correcting algorithm  ( which may scan vertices multiple times ) to preserve correctness  @xcite .",
    "sdalt has been evaluated  @xcite on a realistic multimodal network covering the le - de - france area  ( containing paris ) incorporating rental and private bicycles , public transit , walking , and a time - dependent road network for car travel .",
    "the resulting speedups are close to 30 .",
    "note that sdalt , like anr , also predetermines the regular language constraints during preprocessing .",
    "[ [ contraction - hierarchies.-2 ] ] contraction hierarchies .",
    "+ + + + + + + + + + + + + + + + + + + + + + + +    finally , dibbelt et al .",
    "@xcite have adapted contraction hierarchies  @xcite to lcspp , handling arbitrary mode _ sequence _ constraints .",
    "the resulting user - constrained contraction hierarchies  ( ucch ) algorithm works by  ( independently ) only contracting vertices whose incident arcs belong to the same modal subnetwork .",
    "all other vertices are kept uncontracted .",
    "the query algorithm runs in two phases .",
    "the first runs a regular ch query in the subnetworks given as initial or final transport modes of the sequence constraints until the uncontracted _ core graph _ is reached . between these entry and exit vertices ,",
    "the second phase then runs a regular lcspp - dijkstra restricted to the  ( much smaller ) core graph .",
    "query performance of ucch is comparable to access - node routing , but with significantly less preprocessing time and space .",
    "also , in contrast to anr , ucch also handles arbitrary mode sequence constraints at query time .      while label constraints are useful to define feasible journeys , computing the  ( single ) shortest label - constrained path has two important drawbacks .",
    "first , in order to define the constraints , users must know the characteristics of the particular transportation network ; second , alternative journeys that combine the available transportation modes differently are not computed . to obtain a set of diverse alternatives ,",
    "multicriteria optimization has been considered .",
    "the criteria optimized by these methods usually include arrival time and , for each mode of transportation , some mode - dependent optimization criterion  @xcite .",
    "the resulting pareto sets will thus contain journeys with different usage of the available transportation modes , from which users can choose their favorites .    delling et al .",
    "@xcite consider networks of metropolitan scale and use the following criteria as proxies for `` convenience '' : number of transfers in public transit , walking duration for the pedestrian network , and monetary cost for taxis .",
    "they observe that simply applying the mls algorithm  @xcite to a comprehensive multimodal graph turns out to be slow , even when partial contraction is applied to the road and pedestrian networks , as in ucch  @xcite . to get better query performance , they extend raptor  @xcite to the multimodal scenario , which results in the _ multimodal multicriteria raptor _ algorithm  ( mcr )  @xcite . like raptor",
    ", mcr operates in rounds  ( one per transfer ) and computes pareto sets of optimal journeys with exactly  @xmath57 transfers in round  @xmath57 .",
    "it does so by running , in each round , a dedicated subalgorithm  ( raptor for public transit ; mls for walking and taxi ) which obtains journeys with the respective transport mode as their last leg .    since with increasing number of optimization criteria",
    "the resulting pareto sets tend to get very large , delling et al .",
    "identify the most significant journeys in a quick postprocessing step by a scoring method based on fuzzy logic  @xcite . for faster queries , mcr - based heuristics  ( which relax domination during the algorithm )",
    "successfully find the most significant journeys while avoiding the computation of insignificant ones in the first place .",
    "bast et al .",
    "@xcite use mls with contraction to compute multimodal multicriteria journeys at a metropolitan scale . to identify the significant journeys of the pareto set ,",
    "they propose a method called _ types and thresholds _  ( tnt ) .",
    "the method is based on a set of simple _ axioms _ that summarize what most users would consider as unreasonable multimodal paths .",
    "for example , if one is willing to take the car for a large fraction of the trip , one might as well take it for the whole trip .",
    "three types of reasonable trips are deduced from the axioms : ( 1 )  only car , ( 2 )  arbitrarily much transit and walking with no car , and ( 3 )  arbitrarily much transit with little or no walking and car . with a concrete threshold for `` little ''  ( such as 10 minutes ) , the rules",
    "can then be applied to filter the reasonable journeys . as in  @xcite ,",
    "filtering can be applied during the algorithm to prune the search space and reduce query time .",
    "the resulting sets are fairly robust with respect to the choice of threshold .",
    "the last decade has seen astonishing progress in the performance of shortest path algorithms on transportation networks . for routing in road networks , in particular",
    ", modern algorithms can be up to seven orders of magnitude faster than standard solutions .",
    "successful approaches exploit different properties of road networks that make them easier to deal with than general graphs , such as goal direction , a strong hierarchical structure , and the existence of small separators .",
    "although some early acceleration techniques relied heavily on geometry  ( road networks are after all embedded on the surface of the earth ) , no current state - of - the - art algorithm makes explicit use of vertex coordinates  ( see table  [ tab : road_simple ] ) . while one still sees the occasional development  ( and publication ) of geometry - based algorithms they are consistently dominated by established techniques .",
    "in particular , the recent arterial hierarchies  @xcite algorithm is compared to ch  ( which has slightly slower queries ) , but not to other previously published techniques  ( such as chase , hl , and tnr ) that would easily dominate it .",
    "this shows that results in this rapidly - evolving area are often slow to reach some communities ; we hope this survey will help improve this state of affairs .",
    "note that experiments on real data are very important , as properties of production data are not always accurately captured by simplified models and folklore assumptions .",
    "for example , the common belief that an algorithm can be augmented to include turn penalties without significant loss in performance turned out to be wrong for ch  @xcite .",
    "another important lesson from recent developments is that careful engineering is essential to unleash the full computational power of modern computer architectures .",
    "algorithms such as crp , csa , hl , phast , and raptor , for example , achieve much of their good performance by carefully exploiting locality of reference and parallelism  ( at the level of instructions , cores , and even gpus ) .",
    "the ultimate validation of several of the approaches described here is that they have found their way into systems that serve millions of users every day .",
    "several authors of papers cited in this survey have worked on routing - related projects for companies like apple , esri , google , mapbox , microsoft , nokia , ptv , telenav , tomtom , and yandex .",
    "although companies tend to be secretive about the actual algorithms they use , in some cases this is public knowledge .",
    "tomtom uses a variant of arc flags with shortcuts to perform time - dependent queries  @xcite .",
    "microsoft s bing maps use crp for routing in road networks .",
    "osrm  @xcite , a popular route planning engine using openstreetmap data , uses ch for queries . the transfer patterns  @xcite algorithm has been in use for public - transit journey planning on google maps since 2010 .",
    "raptor is currently in use by opentripplanner .",
    "these recent successes do not mean that all problems in this area are solved .",
    "the ultimate goal , a worldwide multimodal journey planner , has not yet been reached .",
    "systems like rome2rio provide a simplified first step , but a more useful system would take into account real - time traffic and transit information , historic patterns , schedule constraints , and monetary costs .",
    "moreover , all these elements should be combined in a personalized manner .",
    "solving such a general problem efficiently seems beyond the reach of current algorithms .",
    "given the recent pace of progress , however , a solution may be closer than expected .",
    "ittai abraham , daniel delling , amos fiat , andrew  v. goldberg , and renato  f. werneck .",
    "-dimension and shortest path algorithms . in _ proceedings of the 38th international colloquium on automata , languages , and programming ( icalp11 ) _ , volume 6755 of _ lecture notes in computer science _ , pages 690699 .",
    "springer , 2011 .",
    "ittai abraham , daniel delling , amos fiat , andrew  v. goldberg , and renato  f. werneck . :",
    "location - based services in databases . in _ proceedings of the 20th acm sigspatial international symposium on advances in geographic information systems ( gis12 ) _ , pages 339348 .",
    "acm press , 2012 .",
    "best paper award .",
    "ittai abraham , daniel delling , amos fiat , andrew  v. goldberg , and renato  f. werneck .",
    "highway dimension and provably efficient shortest path algorithms .",
    "technical report msr - tr-2013 - 91 , microsoft research , 2013 .",
    "ittai abraham , daniel delling , andrew  v. goldberg , and renato  f. werneck .",
    "a hub - based labeling algorithm for shortest paths on road networks . in _ proceedings of the 10th international symposium on experimental algorithms ( sea11 )",
    "_ , volume 6630 of _ lecture notes in computer science _ , pages 230241 .",
    "springer , 2011 .",
    "ittai abraham , daniel delling , andrew  v. goldberg , and renato  f. werneck .",
    "hierarchical hub labelings for shortest paths . in _ proceedings of the 20th annual european symposium on algorithms ( esa12 )",
    "_ , volume 7501 of _ lecture notes in computer science _ , pages 2435 .",
    "springer , 2012 .",
    "ittai abraham , amos fiat , andrew  v. goldberg , and renato  f. werneck .",
    "highway dimension , shortest paths , and provably efficient algorithms . in _ proceedings of the 21st annual acm ",
    "siam symposium on discrete algorithms ( soda10 ) _ , pages 782793 .",
    "siam , 2010 .",
    "georgia aifadopoulou , athanasios ziliaskopoulos , and evangelia chrisohoou .",
    "multiobjective optimum path algorithm for passenger pretrip planning in multimodal transportation networks .",
    ", 2032(1):2634 , december 2007 .",
    "10.3141/2032 - 04 .",
    "takuya akiba , yoichi iwata , ken ichi kawarabayashi , and yuki kawata .",
    "fast shortest - path distance queries on road networks by pruned highway labeling . in _ proceedings of the 16th meeting on algorithm engineering and experiments ( alenex14 )",
    "_ , pages 147154 .",
    "siam , 2014 .",
    "takuya akiba , yoichi iwata , and yuichi yoshida .",
    "fast exact shortest - path distance queries on large networks by pruned landmark labeling . in _ proceedings of the 2013 acm",
    "sigmod international conference on management of data ( sigmod13 ) _ , pages 349360 .",
    "acm press , 2013 .",
    "luca allulli , giuseppe  f.  italiano , and federico santaroni .",
    "exploiting gps data in public transport journey planners . in _ proceedings of the 13th international symposium on experimental algorithms ( sea14 ) _ ,",
    "volume 8504 of _ lecture notes in computer science_. springer , 2014 . to appear .",
    "julian arz , dennis luxen , and peter sanders .",
    "transit node routing reconsidered . in _ proceedings of the 12th international symposium on experimental algorithms ( sea13 )",
    "_ , volume 7933 of _ lecture notes in computer science _ ,",
    "pages 5566 .",
    "springer , 2013 .",
    "maxim babenko , andrew  v. goldberg , anupam gupta , and viswanath nagarajan .",
    "algorithms for hub label optimization . in _ proceedings of the 40th international colloquium on automata , languages , and programming ( icalp13 )",
    "_ , volume 7965 of _ lecture notes in computer science _ , pages 6980 .",
    "springer , 2013 .",
    "roland bader , jonathan dees , robert geisberger , and peter sanders .",
    "alternative route graphs in road networks . in _ proceedings of the 1st international icst conference on theory and practice of algorithms in ( computer ) systems ( tapas11 ) _ , volume 6595 of _ lecture notes in computer science _ , pages 2132 .",
    "springer , 2011 .",
    "chris barrett , keith bisset , martin holzer , goran konjevod , madhav  v. marathe , and dorothea wagner .",
    "engineering label - constrained shortest - path algorithms . in _ proceedings of the 4th international conference on algorithmic aspects in information and management ( aaim08 ) _ , volume 5034 of _ lecture notes in computer science _ ,",
    "pages 2737 .",
    "springer , june 2008 .",
    "chris barrett , keith bisset , martin holzer , goran konjevod , madhav  v. marathe , and dorothea wagner .",
    "engineering label - constrained shortest - path algorithms . in _ the shortest path problem : ninth dimacs implementation challenge _ ,",
    "volume  74 of _ dimacs book _ , pages 309319 .",
    "american mathematical society , 2009 .",
    "chris barrett , keith bisset , riko jacob , goran konjevod , and madhav  v. marathe .",
    "classical and contemporary shortest path problems in road networks : implementation and experimental analysis of the transims router . in _ proceedings of the 10th annual european symposium on algorithms ( esa02 ) _ ,",
    "volume 2461 of _ lecture notes in computer science _ , pages 126138 .",
    "springer , 2002 .",
    "hannah bast , mirko brodesser , and sabine storandt .",
    "result diversity for multi - modal route planning . in _ proceedings of the 13th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos13 ) _ , openaccess series in informatics ( oasics ) , pages 123136 , 2013 .",
    "hannah bast , erik carlsson , arno eigenwillig , robert geisberger , chris harrelson , veselin raychev , and fabien viger .",
    "fast routing in very large public transportation networks using transfer patterns . in _ proceedings of the 18th annual european symposium on algorithms ( esa10 )",
    "_ , volume 6346 of _ lecture notes in computer science _ , pages 290301 .",
    "springer , 2010 .",
    "hannah bast , jonas sternisko , and sabine storandt .",
    "delay - robustness of transfer patterns in public transportation route planning . in _ proceedings of the 13th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos13 ) _ , openaccess series in informatics ( oasics ) , pages 4254 , 2013 .",
    "hannah bast and sabine storandt .",
    "frequency - based search for public transit . in _ proceedings of the 22nd acm sigspatial international conference on advances in geographic information systems_. acm press ,",
    "november 2014 .",
    "holger bast , stefan funke , and domagoj matijevic .",
    "ultrafast shortest - path queries via transit nodes . in _ the shortest path problem : ninth dimacs implementation challenge _ ,",
    "volume  74 of _ dimacs book _ , pages 175192 .",
    "american mathematical society , 2009 .",
    "holger bast , stefan funke , domagoj matijevic , peter sanders , and dominik schultes .",
    "in transit to constant shortest - path queries in road networks . in _ proceedings of the 9th workshop on algorithm engineering and experiments ( alenex07 ) _ , pages 4659 .",
    "siam , 2007 .",
    "gernot  veit batz , robert geisberger , dennis luxen , peter sanders , and roman zubkov .",
    "efficient route compression for hybrid route planning . in _ proceedings of the 1st mediterranean conference on algorithms_. springer , 2012 .",
    "gernot  veit batz and peter sanders .",
    "time - dependent route planning with generalized objective functions . in _ proceedings of the 20th annual european symposium on algorithms ( esa12 )",
    "_ , volume 7501 of _ lecture notes in computer science_. springer , 2012 .",
    "reinhard bauer , tobias columbus , bastian katz , marcus krug , and dorothea wagner .",
    "preprocessing speed - up techniques is hard . in _ proceedings of the 7th conference on algorithms and complexity ( ciac10 )",
    "_ , volume 6078 of _ lecture notes in computer science _ , pages 359370 .",
    "springer , 2010 .",
    "reinhard bauer , tobias columbus , ignaz rutter , and dorothea wagner .",
    "search - space size in contraction hierarchies . in _ proceedings of the 40th international colloquium on automata , languages , and programming ( icalp13 ) _ , volume 7965 of _ lecture notes in computer science _ , pages 93104 .",
    "springer , 2013 .",
    "reinhard bauer , daniel delling , peter sanders , dennis schieferdecker , dominik schultes , and dorothea wagner . combining hierarchical and goal - directed speed - up techniques for dijkstra s algorithm .",
    ", 15(2.3):131 , january 2010 .",
    "special section devoted to wea08 .",
    "reinhard bauer , marcus krug , sascha meinert , and dorothea wagner . synthetic road networks . in _ proceedings of the 6th international conference on algorithmic aspects in information and management ( aaim10 ) _ , volume 6124 of _ lecture notes in computer science _ , pages 4657 .",
    "springer , 2010 .",
    "moritz baum , julian dibbelt , lorenz hbschle - schneider , thomas pajor , and dorothea wagner .",
    "speed - consumption tradeoff for electric vehicle route planning . in _ proceedings of the 14th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos14 )",
    "_ , openaccess series in informatics ( oasics ) , pages 138151 , 2014 .    moritz baum , julian dibbelt , thomas pajor , and dorothea wagner . energy - optimal routes for electric vehicles . in _ proceedings of the 21st acm sigspatial international conference on advances in geographic information systems",
    ", pages 5463 .",
    "acm press , 2013 .",
    "annabell berger , daniel delling , andreas gebhardt , and matthias mller  hannemann .",
    "accelerating time - dependent multi - criteria timetable information is harder than expected . in _ proceedings of the 9th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos09 ) _ , openaccess series in informatics ( oasics ) , 2009 .",
    "annabell berger , andreas gebhardt , matthias mller ",
    "hannemann , and martin ostrowski .",
    "stochastic delay prediction in large train networks . in _ proceedings of the 11th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos11 )",
    "_ , volume  20 of _ openaccess series in informatics ( oasics ) _ , pages 100111 , 2011 .",
    "annabell berger , martin grimmer , and matthias mller  hannemann .",
    "fully dynamic speed - up techniques for multi - criteria shortest path searches in time - dependent networks . in _ proceedings of the 9th international symposium on experimental algorithms ( sea10 )",
    "_ , volume 6049 of _ lecture notes in computer science _ , pages 3546 .",
    "springer , may 2010 .",
    "kateina bhmov , mat mihalk , tobias prger , rastislav rmek , and peter widmayer .",
    "robust routing in urban public transportation : how to find reliable journeys based on past observations . in _ proceedings of the 13th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos13 ) _ , openaccess series in informatics ( oasics ) , pages 2741 , 2013 .",
    "adi botea .",
    "ultra - fast optimal pathfinding without runtime search . in _ proceedings of the seventh aaai conference on artificial intelligence and interactive digital entertainment ( aiide11 )",
    "_ , pages 122127 .",
    "aaai press , 2011 .",
    "ulrik brandes , frank schulz , dorothea wagner , and thomas willhalm .",
    "travel planning with self - made maps . in _ proceedings of the 3rd international workshop on algorithm engineering and experiments ( alenex01 ) _ , volume 2153 of _ lecture notes in computer science _ ,",
    "pages 132144 .",
    "springer , 2001 .",
    "gerth brodal and riko jacob .",
    "time - dependent networks as models to achieve fast exact time - table queries . in _ proceedings of the 3rd workshop on algorithmic methods and models for optimization of railways ( atmos03 )",
    "_ , volume  92 of _ electronic notes in theoretical computer science _ , pages 315 , 2004 .",
    "edith brunel , daniel delling , andreas gemsa , and dorothea wagner .",
    "space - efficient sharc - routing . in _ proceedings of the 9th international symposium on experimental algorithms ( sea10 )",
    "_ , volume 6049 of _ lecture notes in computer science _ , pages 4758 .",
    "springer , may 2010 .",
    "boris  v. cherkassky , andrew  v. goldberg , and craig silverstein .",
    "buckets , heaps , lists , and monotone priority queues . in _ proceedings of the 8th annual acm ",
    "siam symposium on discrete algorithms ( soda97 ) _ , pages 8392 .",
    "ieee computer society press , 1997 .",
    "alessio cionini , gianlorenzo dangelo , mattia demidio , daniele frigioni , kalliopi giannakopoulou , and andreas paraskevopoulos . engineering graph - based models for dynamic timetable information systems . in _ proceedings of the 14th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos14 ) _ , openaccess series in informatics ( oasics ) , pages 4661 , 2014 .",
    "gianlorenzo dangelo , mattia demidio , daniele frigioni , and camillo vitale .",
    "fully dynamic maintenance of arc - flags in road networks . in _ proceedings of the 11th international symposium on experimental algorithms ( sea12 )",
    "_ , volume 7276 of _ lecture notes in computer science _ , pages 135147 .",
    "springer , 2012 .",
    "daniel delling , julian dibbelt , thomas pajor , dorothea wagner , and renato  f. werneck .",
    "computing multimodal journeys in practice . in _ proceedings of the 12th international symposium on experimental algorithms ( sea13 ) _ , volume 7933 of _ lecture notes in computer science _ ,",
    "pages 260271 .",
    "springer , 2013 .",
    "daniel delling , kalliopi giannakopoulou , dorothea wagner , and christos zaroliagis .",
    "timetable information updating in case of delays : modeling issues .",
    "technical report 133 , arrival technical report , 2008 .",
    "daniel delling , andrew  v. goldberg , thomas pajor , and renato  f. werneck .",
    "customizable route planning . in _ proceedings of the 10th international symposium on experimental algorithms ( sea11 ) _ ,",
    "volume 6630 of _ lecture notes in computer science _ , pages 376387 .",
    "springer , 2011 .",
    "daniel delling , andrew  v. goldberg , thomas pajor , and renato  f. werneck .",
    "robust distance queries on massive networks . in _ proceedings of the 22nd annual european symposium on algorithms ( esa14 )",
    "_ , volume 8737 of _ lecture notes in computer science _ , pages 321333 .",
    "springer , september 2014 .",
    "daniel delling , andrew  v. goldberg , ilya razenshteyn , and renato  f. werneck .",
    "graph partitioning with natural cuts . in _ 25th international parallel and distributed processing symposium ( ipdps11 ) _ , pages 11351146 .",
    "ieee computer society , 2011 .",
    "daniel delling , andrew  v. goldberg , ruslan savchenko , and renato  f. werneck .",
    "hub labels : theory and practice . in _ proceedings of the 13th international symposium on experimental algorithms ( sea14 )",
    "_ , volume 8504 of _ lecture notes in computer science _ , pages 259270 .",
    "springer , 2014 .",
    "daniel delling , andrew  v. goldberg , and renato  f. werneck .",
    "faster batched shortest paths in road networks . in _ proceedings of the 11th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos11 )",
    "_ , volume  20 of _ openaccess series in informatics ( oasics ) _ , pages 5263 , 2011 .",
    "daniel delling , andrew  v. goldberg , and renato  f. werneck .",
    "hub label compression . in _",
    "proceedings of the 12th international symposium on experimental algorithms ( sea13 ) _ , volume 7933 of _ lecture notes in computer science _ , pages 1829 .",
    "springer , 2013 .",
    "daniel delling , martin holzer , kirill mller , frank schulz , and dorothea wagner . high - performance multi - level routing . in _ the shortest path problem : ninth dimacs implementation challenge _ ,",
    "volume  74 of _ dimacs book _ , pages 7392 .",
    "american mathematical society , 2009 .",
    "daniel delling , giuseppe  f.  italiano , thomas pajor , and federico santaroni .",
    "better transit routing by exploiting vehicle gps data . in _ proceedings of the 7th acm sigspatial international workshop on computational transportation science_. acm press ,",
    "november 2014 .",
    "daniel delling , moritz kobitzsch , dennis luxen , and renato  f. werneck .",
    "robust mobile route planning with limited connectivity . in _ proceedings of the 14th meeting on algorithm engineering and experiments ( alenex12 ) _ , pages 150159 .",
    "siam , 2012 .",
    "daniel delling , moritz kobitzsch , and renato  f. werneck .",
    "customizing driving directions with gpus . in _ proceedings of the 20th international conference on parallel processing ( euro - par 2014 )",
    "_ , volume 8632 of _ lecture notes in computer science _ ,",
    "pages 728739 .",
    "springer , 2014 .",
    "daniel delling , thomas pajor , and dorothea wagner .",
    "accelerating multi - modal route planning by access - nodes . in _ proceedings of the 17th annual european symposium on algorithms ( esa09 ) _ ,",
    "volume 5757 of _ lecture notes in computer science _ , pages 587598 .",
    "springer , september 2009 .",
    "daniel delling , thomas pajor , and dorothea wagner . engineering time - expanded graphs for faster timetable information . in _ robust and online large - scale optimization _ ,",
    "volume 5868 of _ lecture notes in computer science _ , pages 182206 .",
    "springer , 2009 .",
    "daniel delling , thomas pajor , dorothea wagner , and christos zaroliagis .",
    "efficient route planning in flight networks . in _ proceedings of the 9th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos09 ) _ , openaccess series in informatics ( oasics ) , 2009 .",
    "daniel delling , thomas pajor , and renato  f. werneck .",
    "round - based public transit routing . in _ proceedings of the 14th meeting on algorithm engineering and experiments ( alenex12 ) _ , pages 130140 .",
    "siam , 2012 .",
    "daniel delling , peter sanders , dominik schultes , and dorothea wagner .",
    "engineering route planning algorithms . in _ algorithmics of large and complex networks _ , volume 5515 of _ lecture notes in computer science _ , pages 117139 .",
    "springer , 2009 .",
    "daniel delling , peter sanders , dominik schultes , and dorothea wagner .",
    "highway hierarchies star . in _ the shortest path problem : ninth dimacs implementation challenge _ ,",
    "volume  74 of _ dimacs book _ , pages 141174 .",
    "american mathematical society , 2009 .",
    "daniel delling and dorothea wagner .",
    "landmark - based routing in dynamic graphs . in _ proceedings of the 6th workshop on experimental algorithms ( wea07 ) _ ,",
    "volume 4525 of _ lecture notes in computer science _ , pages 5265 .",
    "springer , june 2007 .",
    "daniel delling and dorothea wagner .",
    "pareto paths with sharc . in _ proceedings of the 8th international symposium on experimental algorithms ( sea09 )",
    "_ , volume 5526 of _ lecture notes in computer science _ , pages 125136 .",
    "springer , june 2009 .",
    "daniel delling and renato  f. werneck .",
    "customizable point - of - interest queries in road networks . in _ proceedings of the 21st acm sigspatial international symposium on advances in geographic information systems ( gis13 ) _ , pages 490493 .",
    "acm press , 2013 .",
    "daniel delling and renato  f. werneck .",
    "faster customization of road networks . in _ proceedings of the 12th international symposium on experimental algorithms ( sea13 ) _ ,",
    "volume 7933 of _ lecture notes in computer science _ ,",
    "pages 3042 .",
    "springer , 2013 .",
    "ugur demiryurek , farnoush banaei - kashani , and cyrus shahabi .",
    "a case for time - dependent shortest path computation in spatial networks . in _ proceedings of the 18th acm sigspatial international conference on advances in geographic information systems ( gis10 )",
    "_ , pages 474477 , 2010 .",
    "julian dibbelt , thomas pajor , ben strasser , and dorothea wagner .",
    "intriguingly simple and fast transit routing . in _ proceedings of the 12th international symposium on experimental algorithms ( sea13 ) _ ,",
    "volume 7933 of _ lecture notes in computer science _ , pages 4354 .",
    "springer , 2013 .",
    "julian dibbelt , thomas pajor , and dorothea wagner .",
    "user - constrained multi - modal route planning . in _ proceedings of the 14th meeting on algorithm engineering and experiments ( alenex12 ) _ , pages 118129 .",
    "siam , 2012 .",
    "julian dibbelt , ben strasser , and dorothea wagner .",
    "customizable contraction hierarchies . in _ proceedings of the 13th international symposium on experimental algorithms ( sea14 )",
    "_ , volume 8504 of _ lecture notes in computer science _ , pages 271282 .",
    "springer , 2014 .",
    "yann disser , matthias mller ",
    "hannemann , and mathias schnee .",
    "multi - criteria shortest paths in time - dependent train networks . in _ proceedings of the 7th workshop on experimental algorithms ( wea08 )",
    "_ , volume 5038 of _ lecture notes in computer science _ , pages 347361 .",
    "springer , june 2008 .",
    "alexandros efentakis and dieter pfoser . optimizing landmark - based routing and preprocessing . in _ proceedings of the 6th acm sigspatial international workshop on computational transportation science _ , pages 25:2525:30 .",
    "acm press , november 2013 .",
    "alexandros efentakis and dieter pfoser . .",
    "extending graph separators for the single - source shortest - path problem . in _ proceedings of the 22nd annual european symposium on algorithms ( esa14 ) _ , volume 8737 of _ lecture notes in computer science _ , pages 358370 .",
    "springer , september 2014 .",
    "alexandros efentakis , dieter pfoser , and agnes voisard .",
    "efficient data management in support of shortest - path computation . in _ proceedings of the 4th acm sigspatial international workshop on computational transportation science _ , pages 2833 .",
    "acm press , 2011 .",
    "alexandros efentakis , dimitris theodorakis , and dieter pfoser .",
    "crowdsourcing computing resources for shortest - path computation . in _ proceedings of the 20th acm sigspatial international symposium on advances in geographic information systems ( gis12 ) _ , pages 434437 .",
    "acm press , 2012 .",
    "jochen eisner and stefan funke .",
    "sequenced route queries : getting things done on the way back home . in _ proceedings of the 20th acm sigspatial international symposium on advances in geographic information systems ( gis12 ) _ , pages 502505 .",
    "acm press , 2012 .",
    "jochen eisner and stefan funke .",
    "transit nodes  lower bounds and refined construction . in _ proceedings of the 14th meeting on algorithm engineering and experiments ( alenex12 ) _ , pages 141149 .",
    "siam , 2012 .",
    "jochen eisner , stefan funke , andre herbst , andreas spillner , and sabine storandt .",
    "algorithms for matching and predicting trajectories . in",
    "_ proceedings of the 13th workshop on algorithm engineering and experiments ( alenex11 ) _ , pages 8495 .",
    "siam , 2011 .",
    "jochen eisner , stefan funke , and sabine storandt .",
    "optimal route planning for electric vehicles in large network . in _ proceedings of the twenty - fifth aaai conference on artificial intelligence_. aaai press , august 2011 .",
    "david eppstein and michael  t. goodrich . studying ( non - planar ) road networks through an algorithmic lens . in _ proceedings of the 16th acm sigspatial international conference on advances in geographic information systems",
    "( gis 08 ) _ , pages 110 .",
    "acm press , 2008 .",
    "stephan erb , moritz kobitzsch , and peter sanders .",
    "parallel bi - objective shortest paths using weight - balanced b - trees with bulk updates . in _ proceedings of the 13th international symposium on experimental algorithms ( sea14 )",
    "_ , volume 8504 of _ lecture notes in computer science _ , pages 111122 .",
    "springer , 2014 .",
    "donatella firmani , giuseppe  f.  italiano , luigi laura , and federico santaroni . is timetabling routing always reliable for public transport ? in _ proceedings of the 13th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos13 ) _ , openaccess series in informatics ( oasics ) , pages 1526 , 2013 .",
    "stefan funke , andr nusser , and sabine storandt . on k - path covers and their applications . in _ proceedings of the 40th international conference on very large databases ( vldb 2014 ) _ , pages 893902 , 2014 .",
    "stefan funke , andr nusser , and sabine storandt .",
    "placement of loading stations for electric vehicles : no detours necessary ! in _",
    "proceedings of the twenty - eighth aaai conference on artificial intelligence_. aaai press , 2014 .",
    "stefan funke and sabine storandt .",
    "polynomial - time construction of contraction hierarchies for multi - criteria objectives . in _ proceedings of the 15th meeting on algorithm engineering and experiments ( alenex13 ) _ , pages 3154 .",
    "siam , 2013 .",
    "robert geisberger .",
    "contraction of timetable networks with realistic transfers . in",
    "_ proceedings of the 9th international symposium on experimental algorithms ( sea10 ) _ , volume 6049 of _ lecture notes in computer science _ , pages 7182 .",
    "springer , may 2010 .",
    "robert geisberger , moritz kobitzsch , and peter sanders .",
    "route planning with flexible objective functions . in _ proceedings of the 12th workshop on algorithm engineering and experiments ( alenex10 ) _ , pages 124137 .",
    "siam , 2010 .",
    "robert geisberger , dennis luxen , peter sanders , sabine neubauer , and lars volker .",
    "fast detour computation for ride sharing . in _ proceedings of the 10th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos10 ) _ , volume  14 of _ openaccess series in informatics ( oasics ) _ , pages 8899 , 2010 .",
    "robert geisberger and peter sanders .",
    "engineering time - dependent many - to - many shortest paths computation . in _ proceedings of the 10th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos10 ) _ , volume  14 of _ openaccess series in informatics ( oasics ) _ , 2010 .",
    "robert geisberger and dennis schieferdecker .",
    "heuristic contraction hierarchies with approximation guarantee . in _ proceedings of the 3rd international symposium on combinatorial search ( socs10)_. aaai press , 2010 .",
    "robert geisberger and christian vetter .",
    "efficient routing in road networks with turn costs . in _ proceedings of the 10th international symposium on experimental algorithms ( sea11 )",
    "_ , volume 6630 of _ lecture notes in computer science _ , pages 100111 .",
    "springer , 2011 .",
    "marc goerigk , sascha hee , matthias mller ",
    "hannemann , and marie schmidt .",
    "recoverable robust timetable information . in _ proceedings of the 13th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos13 ) _ , openaccess series in informatics ( oasics ) , pages 114 , 2013 .",
    "andrew  v. goldberg and chris harrelson .",
    "computing the shortest path : a * search meets graph theory . in _ proceedings of the 16th annual acm ",
    "siam symposium on discrete algorithms ( soda05 ) _ , pages 156165 .",
    "siam , 2005 .",
    "andrew  v. goldberg , haim kaplan , and renato  f. werneck .",
    "reach for a * : shortest path algorithms with preprocessing . in _ the shortest path problem : ninth dimacs implementation challenge _ , volume  74 of _ dimacs book _ ,",
    "pages 93139 .",
    "american mathematical society , 2009 .",
    "andrew  v. goldberg and renato  f. werneck .",
    "computing point - to - point shortest paths from external memory . in _ proceedings of the 7th workshop on algorithm engineering and experiments ( alenex05 ) _ , pages 2640 .",
    "siam , 2005 .",
    "roy goldman , n.r .",
    "shivakumar , suresh venkatasubramanian , and hector garcia - molina .",
    "proximity search in databases . in _ proceedings of the 24th international conference on very large databases ( vldb 1998 ) _ , pages 2637 .",
    "morgan kaufmann , august 1998 .",
    "michael  t. goodrich and pawe pszona .",
    "two - phase bicriterion search for finding fast and efficient electric vehicle routes . in _ proceedings of the 22nd acm sigspatial international conference on advances in geographic information systems_. acm press ,",
    "november 2014 .",
    "ronald  j. gutman .",
    "reach - based routing : a new approach to shortest path algorithms optimized for road networks . in _ proceedings of the 6th workshop on algorithm engineering and experiments ( alenex04 ) _ , pages 100111 .",
    "siam , 2004 .",
    "moritz hilger , ekkehard khler , rolf  h. mhring , and heiko schilling .",
    "fast point - to - point shortest path computations with arc - flags . in _ the shortest path problem : ninth dimacs implementation challenge _ , volume  74 of _ dimacs book _ , pages 4172 .",
    "american mathematical society , 2009 .",
    "petr hlinn and ondrej mori .",
    "scope - based route planning . in _ proceedings of the 19th annual european symposium on algorithms ( esa11 )",
    "_ , volume 6942 of _ lecture notes in computer science _ , pages 445456 .",
    "springer , 2011 .",
    "eric horvitz and john krumm .",
    "some help on the way : opportunistic routing under uncertainty . in _ proceedings of the 2012 acm conference on ubiquitous computing ( ubicomp12 )",
    "_ , pages 371380 .",
    "acm press , 2012 .",
    "t.  ikeda , min - yao hsu , h.  imai , s.  nishimura , h.  shimoura , t.  hashimoto , k.  tenmoku , and k.  mitoh . a fast algorithm for finding better routes by ai search techniques . in _ proceedings of the vehicle navigation and information systems conference ( vnsi94 ) _ , pages 291296 .",
    "acm press , 1994 .",
    "tim kieritz , dennis luxen , peter sanders , and christian vetter .",
    "distributed time - dependent contraction hierarchies . in _ proceedings of the 9th international symposium on experimental algorithms ( sea10 )",
    "_ , volume 6049 of _ lecture notes in computer science _ , pages 8393 .",
    "springer , may 2010 .",
    "dominik kirchler , leo liberti , and roberto  wolfler calvo .",
    "a label correcting algorithm for the shortest path problem on a multi - modal route network . in _ proceedings of the 11th international symposium on experimental algorithms ( sea12 ) _ , volume 7276 of _ lecture notes in computer science _ , pages 236247 .",
    "springer , 2012 .",
    "dominik kirchler , leo liberti , thomas pajor , and roberto  wolfler calvo . for regular language constraint shortest paths on a multi - modal transportation network . in _ proceedings of the 11th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos11 )",
    "_ , volume  20 of _ openaccess series in informatics ( oasics ) _ , pages 6475 , 2011 .",
    "jon  m. kleinberg , aleksandrs slivkins , and tom wexler .",
    "triangulation and embedding using small sets of beacons . in _ proceedings of the 45th annual ieee symposium on foundations of computer science ( focs04 ) _ , pages 444453 .",
    "ieee computer society press , 2004 .",
    "sebastian knopp , peter sanders , dominik schultes , frank schulz , and dorothea wagner .",
    "computing many - to - many shortest paths using highway hierarchies . in _ proceedings of the 9th workshop on algorithm engineering and experiments ( alenex07 ) _ , pages 3645 .",
    "siam , 2007 .",
    "moritz kobitzsch . : an alternative approach to alternative routes . in _ proceedings of the 21st annual european symposium on algorithms ( esa13 )",
    "_ , volume 8125 of _ lecture notes in computer science _ , pages 613624 .",
    "springer , 2013 .",
    "moritz kobitzsch , marcel radermacher , and dennis schieferdecker .",
    "evolution and evaluation of the penalty method for alternative graphs . in _ proceedings of the 13th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos13 ) _ , openaccess series in informatics ( oasics ) , pages 94107 , 2013 .",
    "spyros kontogiannis and christos zaroliagis .",
    "distance oracles for time - dependent networks . in _ proceedings of the 41st international colloquium on automata , languages , and programming ( icalp14 )",
    "_ , volume 8572 of _ lecture notes in computer science _ , pages 713725 .",
    "springer , july 2014 .",
    "ulrich lauther .",
    "an experimental evaluation of point - to - point shortest path calculation on roadnetworks with precalculated edge - flags . in _ the shortest path problem : ninth dimacs implementation challenge _ , volume  74 of _ dimacs book _ , pages 1940 .",
    "american mathematical society , 2009 .",
    "dennis luxen and peter sanders .",
    "hierarchy decomposition for faster user equilibria on road networks . in _ proceedings of the 10th international symposium on experimental algorithms ( sea11 )",
    "_ , volume 6630 of _ lecture notes in computer science _ , pages 242253 .",
    "springer , 2011 .",
    "dennis luxen and dennis schieferdecker .",
    "candidate sets for alternative routes in road networks . in _ proceedings of the 11th international symposium on experimental algorithms ( sea12 )",
    "_ , volume 7276 of _ lecture notes in computer science _ , pages 260270 .",
    "springer , 2012 .",
    "dennis luxen and christian vetter .",
    "real - time routing with openstreetmap data . in _ proceedings of the 19th acm sigspatial international conference on advances in geographic information systems_. acm press , 2011 .",
    "kamesh madduri , david  a. bader , jonathan  w. berry , and joseph  r. crobak .",
    "parallel shortest path algorithms for solving large - scale instances . in _ the shortest path problem : ninth dimacs implementation challenge _ ,",
    "volume  74 of _ dimacs book _ , pages 249290 .",
    "american mathematical society , 2009 .",
    "t.  mellouli and l.  suhl .",
    "passenger online routing in dynamic networks . in d.  c. mattfeld and l.  suhl , editors , _ informationsprobleme in transport und verkehr _ , volume  4 , pages 1730 .",
    "ds&or lab , universitt paderborn , 2006 .",
    "ulrich meyer .",
    "single - source shortest - paths on arbitrary directed graphs in linear average - case time . in _ proceedings of the 12th annual acm ",
    "siam symposium on discrete algorithms ( soda01 ) _ , pages 797806 , 2001 .",
    "nikola milosavljevi . on optimal preprocessing for contraction hierarchies . in _ proceedings of the 5th acm sigspatial international workshop on computational transportation science _ , pages 3338 .",
    "acm press , 2012 .",
    "rolf  h. mhring .",
    "verteilte verbindungssuche i m ffentlichen personenverkehr  graphentheoretische modelle und algorithmen . in _",
    "insbesondere informatik , beispiele erfolgreicher wege zwischen mathematik und informatik _ , pages 192220 .",
    "vieweg , 1999 .",
    "matthias mller  hannemann and mathias schnee .",
    "paying less for train connections with motis . in _ proceedings of the 5th workshop on algorithmic methods and models for optimization of railways ( atmos05 ) _ , openaccess series in informatics ( oasics ) , page 657 , 2006 .",
    "matthias mller  hannemann and mathias schnee . finding all attractive train connections by multi - criteria pareto search . in _ algorithmic methods for railway optimization _ ,",
    "volume 4359 of _ lecture notes in computer science _ , pages 246263 .",
    "springer , 2007 .",
    "matthias mller  hannemann and mathias schnee .",
    "efficient timetable information in the presence of delays . in _ robust and online large - scale optimization _ ,",
    "volume 5868 of _ lecture notes in computer science _ , pages 249272 .",
    "springer , 2009 .",
    "matthias mller ",
    "hannemann , frank schulz , dorothea wagner , and christos zaroliagis .",
    "timetable information : models and algorithms . in _ algorithmic methods for railway optimization _ ,",
    "volume 4359 of _ lecture notes in computer science _ , pages 6790 .",
    "springer , 2007 .",
    "matthias mller  hannemann and karsten weihe .",
    "pareto shortest paths is often feasible in practice . in _ proceedings of the 5th international workshop on algorithm engineering ( wae01 ) _ ,",
    "volume 2141 of _ lecture notes in computer science _ , pages 185197 .",
    "springer , 2001 .",
    "laurent  flindt muller and martin zachariasen .",
    "fast and compact oracles for approximate distances in planar graphs . in _ proceedings of the 14th annual european symposium on algorithms ( esa07 )",
    "_ , volume 4698 of _ lecture notes in computer science _ , pages 657668 .",
    "springer , 2007 .",
    "stefano pallottino and maria  grazia scutell .",
    "shortest path algorithms in transportation models : classical and innovative aspects . in _ equilibrium and advanced transportation modelling _ , pages 245281 .",
    "kluwer academic publishers group , 1998 .",
    "christos  h. papadimitriou and mihalis yannakakis . on the approximability of trade - offs and",
    "optimal access of web sources . in _ proceedings of the 41st annual ieee symposium on foundations of computer science ( focs00 ) _ , pages 8692 , 2000 .",
    "andreas paraskevopoulos and christos zaroliagis .",
    "improved alternative route planning . in _ proceedings of the 13th workshop on algorithmic approaches for transportation modeling , optimization , and systems ( atmos13 ) _ , openaccess series in informatics ( oasics ) , pages 108122 , 2013 .",
    "evangelia pyrga , frank schulz , dorothea wagner , and christos zaroliagis . experimental comparison of shortest path approaches for timetable information . in _ proceedings of the 6th workshop on algorithm engineering and experiments ( alenex04 ) _ , pages 8899 .",
    "siam , 2004 .",
    "michael rice and vassilis tsotras .",
    "exact graph search algorithms for generalized traveling salesman path problems . in _ proceedings of the 11th international symposium on experimental algorithms ( sea12 )",
    "_ , volume 7276 of _ lecture notes in computer science _ , pages 344355 .",
    "springer , 2012 .",
    "peter sanders and lawrence mandow .",
    "parallel label - setting multi - objective shortest path search . in _",
    "27th international parallel and distributed processing symposium ( ipdps13 ) _ , pages 215224 .",
    "ieee computer society , 2013 .",
    "peter sanders and dominik schultes .",
    "highway hierarchies hasten exact shortest path queries . in _ proceedings of the 13th annual european symposium on algorithms ( esa05 ) _ , volume 3669 of _ lecture notes in computer science _ , pages 568579 .",
    "springer , 2005 .",
    "peter sanders and dominik schultes .",
    "robust , almost constant time shortest - path queries in road networks . in _ the shortest path problem : ninth dimacs implementation challenge _ , volume  74 of _ dimacs book _ , pages 193218 .",
    "american mathematical society , 2009 .",
    "peter sanders , dominik schultes , and christian vetter . mobile route planning . in _ proceedings of the 16th annual european symposium on algorithms ( esa08 ) _ ,",
    "volume 5193 of _ lecture notes in computer science _ , pages 732743 .",
    "springer , september 2008 .",
    "jagan sankaranarayanan , houman alborzi , and hanan samet .",
    "efficient query processing on spatial networks . in",
    "_ proceedings of the 13th annual acm international workshop on geographic information systems ( gis05 ) _ , pages 200209 , 2005 .",
    "dominik schultes and peter sanders .",
    "dynamic highway - node routing . in _ proceedings of the 6th workshop on experimental algorithms ( wea07 ) _ ,",
    "volume 4525 of _ lecture notes in computer science _ , pages 6679 .",
    "springer , june 2007 .",
    "frank schulz , dorothea wagner , and christos zaroliagis . using multi - level graphs for timetable information in railway systems . in _ proceedings of the 4th workshop on algorithm engineering and experiments ( alenex02 ) _ , volume 2409 of _ lecture notes in computer science _ , pages 4359 .",
    "springer , 2002 .",
    "sabine storandt .",
    "route planning for bicycles ",
    "exact constrained shortest paths made practical via contraction hierarchy . in _ proceedings of the twenty - second international conference on automated planning and scheduling _ , pages 234242 , 2012 .",
    "sabine storandt and stefan funke .",
    "enabling e - mobility : facility location for battery loading stations . in _ proceedings of the twenty - seventh aaai conference on artificial intelligence_.",
    "aaai press , 2013 .",
    "mikkel thorup .",
    "integer priority queues with decrease key in constant time and the single source shortest paths problem . in _",
    "35th acm symposium on theory of computing _ , pages 149158 , new york , ny , usa , 2003 .",
    "acm .",
    "dorothea wagner and thomas willhalm .",
    "drawing graphs to speed up shortest - path computations . in _ proceedings of the 7th workshop on algorithm engineering and experiments ( alenex05 ) _ ,",
    "pages 1524 .",
    "siam , 2005 .",
    "ruicheng zhong , guoliang li , kian - lee tan , and lizhu zhou .",
    "-tree : an efficient index for knn search on road networks . in _ proceedings of the 22nd international conference on information and knowledge management _ , pages 3948 .",
    "acm press , 2013 .",
    "andy  diwen zhu , hui ma , xiaokui xiao , siqiang luo , youze tang , and shuigeng zhou . shortest path and distance queries on road networks : towards bridging theory and practice . in _ proceedings of the 2013 acm",
    "sigmod international conference on management of data ( sigmod13 ) _ , pages 857868 .",
    "acm press , 2013 .",
    "uri zwick .",
    "exact and approximate distances in graphs  a survey . in _ proceedings of the 9th annual european symposium on algorithms ( esa01 )",
    "_ , volume 2161 of _ lecture notes in computer science _ , pages 3348 , 2001 ."
  ],
  "abstract_text": [
    "<S> we survey recent advances in algorithms for route planning in transportation networks . for road networks , we show that one can compute driving directions in milliseconds or less even at continental scale . </S>",
    "<S> a variety of techniques provide different trade - offs between preprocessing effort , space requirements , and query time . </S>",
    "<S> some algorithms can answer queries in a fraction of a microsecond , while others can deal efficiently with real - time traffic . </S>",
    "<S> journey planning on public transportation systems , although conceptually similar , is a significantly harder problem due to its inherent time - dependent and multicriteria nature . although exact algorithms are fast enough for interactive queries on metropolitan transit systems , dealing with continent - sized instances requires simplifications or heavy preprocessing . </S>",
    "<S> the multimodal route planning problem , which seeks journeys combining schedule - based transportation  ( buses , trains ) with unrestricted modes  ( walking , driving ) , is even harder , relying on approximate solutions even for metropolitan inputs . </S>"
  ]
}