{
  "article_text": [
    "given a finite set @xmath7 of @xmath0 points , the diameter of @xmath7 denoted by @xmath8 is the maximum distance between two points of @xmath7 . computing the diameter of a set of points has a large history and it may be required in various fields such as database , data mining and vision . a trivial algorithm for",
    "this problem is as follows : compute the distance between each pair of points and then choose the maximum distance .",
    "since , computing the distance takes constant time , this algorithm takes @xmath9 time .",
    "but , this is too slow for large - scale data sets that occur in the fields .",
    "hence , we need a faster algorithm which may be exact or approximation .    by reduction to set disjointness problem",
    ", it can be shown that computing the diameter of @xmath0 points in @xmath10 requires @xmath11 operations in algebraic computation - tree model  @xcite .",
    "it is shown by yao that , it is possible to compute the diameter in sub - quadratic time in each dimension  @xcite . in two and three dimensions ,",
    "there are well - known solutions . in the plane",
    ", this problem can be computed in optimal time @xmath12 , but , in three dimensions , it is hard .",
    "clarkson and shor  @xcite present an @xmath13-time randomized algorithm .",
    "their algorithm needs to compute the intersection of @xmath0 balls ( with the same radius ) in @xmath14 .",
    "it may be slower than the brute - force algorithm for the most practical data sets .",
    "moreover , it is not an efficient method for higher dimensions , because the intersection of @xmath0 balls with the same radius has a large size .",
    "some deterministic algorithms with running time @xmath15  @xcite and @xmath16  @xcite are found for solving this problem .",
    "finally , ramos  @xcite found an optimal deterministic @xmath13-time algorithm in @xmath14 .",
    "cheong et.al  @xcite present an @xmath17 randomized algorithm that computes the all - pairs farthest neighbors for @xmath0 points on the convex position in @xmath14 .    in the absence of fast algorithms , many attempts have been done to approximate the diameter in low and high dimensions .",
    "a 2-approximation algorithm with @xmath18 time in @xmath1 dimensions can be found easily by selecting a point @xmath19 of @xmath7 and then finding the farthest point @xmath20 from it by brute - force manner  @xcite .",
    "the first non - trivial approximation algorithm for this problem is presented by egeciogln and kalantari  @xcite that approximates the diameter with factor @xmath21 and operations cost @xmath18 in @xmath1 dimensions .",
    "also , they present an iteration algorithm with @xmath22 iterations and the cost @xmath18 for each iteration that has approximate factor @xmath23 .    agarwal et .",
    "al  @xcite present a @xmath2-approximation algorithm in @xmath10 with @xmath24 running time by projecting to directions .",
    "barequet and har peled  @xcite present a @xmath25-approximate diameter method with @xmath18 time , since @xmath1 is fixed , it can be denoted by @xmath4 .",
    "they also describe a @xmath2-approximate approach for computing the diameter @xmath26 such that @xmath27 with @xmath28 time in @xmath10 .",
    "they show that , the running time can be improved to @xmath29 .",
    "similarly , chan  @xcite observes that a combination of two approaches in  @xcite and  @xcite yields an @xmath2-approximate algorithm with @xmath30 and an @xmath31-approximate algorithm with @xmath32 time .",
    "he also introduces a core - set theorem , and shows that using this theorem , an @xmath31-approximation for the diameter in @xmath33 time can be found  @xcite .    also , har peled  @xcite present an approach which for the most inputs , it is able to compute the exact diameter or an approximation very fast .",
    "although , in the worst case , the algorithm running time is still quadratic , and is sensitive to the hardness of the input . his algorithm is able to return a pair of points @xmath34 and @xmath35 such that @xmath36 , for each value @xmath37 in each dimension , with @xmath38 running time .",
    "he shows that with a complicated analysis , this running time can be reduced to @xmath39 .",
    "simultaneously , maladain and boissonnat  @xcite present an exact algorithm for the diameter by computing the double normals in each dimension .",
    "but , their algorithm is not worst - case optimal .",
    "they also show , with having double normals , a @xmath21-approximation of the diameter in each dimension is provided .",
    "moreover , finocchiaro and pellegrini  @xcite describe an algorithm that finds in @xmath40 time with high probability a @xmath2-approximation of the diameter of a set of @xmath0 points in @xmath1-dimensional euclidean space .",
    "as previously mentioned , some @xmath31-approximation algorithms have been presented in literatures .",
    "the first result is an @xmath2-approximate with running time @xmath41 due to agarwal et .",
    "al  @xcite which is based on projection to directions",
    ". other methods which present approximate approaches with running time @xmath42 , where they have usually a hidden constant @xmath43 with exponential dependency on @xmath1 .",
    "they include barequet and har peled  @xcite method , chan s  @xcite results which are a combination of two approaches in  @xcite and  @xcite , and finally , har peled  @xcite approach .",
    "however , most of these methods use a similar idea ( except the last one ) .",
    "they first compute a 2-approximation @xmath44 of the diameter of the point set @xmath45 in @xmath18 time by choosing a point @xmath19 of @xmath45 , and then finding its farthest point @xmath20 , and use @xmath44 for constructing a grid . then , round each point to its nearest grid - point and find the diameter in this new point set .",
    "but , using this idea has the following properties .",
    "firstly , it leads to a rounded point set with @xmath46 points ( balls ) which needs @xmath47 time to compute its diameter .",
    "secondly , it uses a 2-approximation , which choices a point randomly .",
    "this means that , if we run these algorithms twice on an input set , they might result different value for the approximate diameter .",
    "thus , the precisely running time of barequet and har peled  @xcite method is @xmath48  @xcite . since , @xmath1 is fixed , they assume that @xmath49 and then result the running time @xmath50 .",
    "this condition also holds for chan s results  @xcite . finally , har peled  @xcite applied a different approach which is used a fair - split tree .",
    "his algorithms running time precisely is @xmath51 . by assuming that @xmath52 , he obtains the running time @xmath38 .      in this paper",
    ", we propose a new @xmath2-approximation algorithm for computing the diameter of a set @xmath7 of @xmath0 points in @xmath10 with @xmath3 time and @xmath4 space , where @xmath5 .",
    "our proposed algorithm obtains new results by applying a different approach in compare with the previous methods .",
    "firstly , we use a constant value @xmath53 for constructing our grids instead of using the 2-approximate diameter @xmath44 .",
    "the value @xmath53 is the largest side of the axis - parallel bounding box of the point set .",
    "so , our algorithm produces same results , if we run it twice or more , because , it depends on a constant value @xmath53 .",
    "secondly , we round each points to its central - cell points in a grid which helps us to get a better running time by decreasing the search domain .",
    "moreover , we propose an approximate algorithm with @xmath6 time .",
    "so , we obtain some approximation algorithms which have some improvements in the running time in compare with previous algorithms for computing the diameter in fixed dimensions .",
    "the reminder of this paper is organized as follows : in section 2 , we describe our proposed algorithm .",
    "subsection 2.1 includes our analysis over the algorithm .",
    "section 3 is conclusions .",
    "in this subsection , we describe our new @xmath2-approximate algorithm to compute the diameter of a set @xmath7 of @xmath0 points in @xmath10 . in this problem , we want find a diametrical pair @xmath54 and @xmath55 such that @xmath56 . to this end , we first find extreme points in each coordinate and compute the axis - parallel bounding box of @xmath7 , which is denoted by @xmath57 .",
    "we use the largest length side of the @xmath57 to impose two grids on it .",
    "in fact , we decompose @xmath57 to a grid of regular hypercubes with side length @xmath58 , where @xmath59 .",
    "we call each hypercube as a cell . then , each point of @xmath7 is rounded to its corresponding central cell - point .",
    "fig  [ fig : round ] shows an example of the rounding process for a point set in @xmath60 .     and an @xmath58-gird .",
    "initial points are shown by blue points and their corresponding central cell - points are shown by circle points .",
    "( b ) rounded point set @xmath61.,title=\"fig:\",height=4 ]    and an @xmath58-gird .",
    "initial points are shown by blue points and their corresponding central cell - points are shown by circle points .",
    "( b ) rounded point set @xmath61.,title=\"fig:\",height=4 ]    [ fig : round ]    as can be seen in fig  [ fig : round ] , many points may be rounded to a point in @xmath61 .",
    "but , for improving the running time of the algorithm , in this stage , we impose an @xmath62-grid to @xmath57 , for @xmath63 and round each point of the new point set @xmath61 to its central cell - point in this new grid .",
    "this results a new rounded point set @xmath64 .",
    "note that , we only need @xmath18 time to round points to its central - cell points .",
    "let , @xmath65 be a hypercube with side length @xmath62 and central - point @xmath34 .",
    "this step reduces regions which may be include the diametrical pairs to two hypercubes @xmath66 and @xmath67 , and helps us to give a better running time .",
    "let , two point sets @xmath68 and @xmath69 include points of the rounded point set @xmath61 , which are inside two hypercubes @xmath66 and @xmath67 , respectively .",
    "it is sufficient to find diameter between points of @xmath61 , which are in two sets @xmath68 and @xmath69 .      in this subsection",
    ", we analysis the proposed algorithm .",
    "[ enumi ] theorem * * _ _    the proposed approximate algorithm computes the diameter of a set @xmath7 of @xmath0 points in @xmath10 in @xmath70 time and @xmath4 space , where @xmath71 .    finding the extreme points in all",
    "coordinate and finding the largest side of @xmath57 can be done in @xmath18 time .",
    "rounding step takes @xmath72 time for each point and for all of them takes @xmath18 time .",
    "since , @xmath1 is fixed , this can be shown by @xmath4 .",
    "but , for computing the approximate diameter over the rounded point set @xmath64 , we need to know the number of points in the set @xmath64 . we know that the largest side of the bounding box @xmath57 has length @xmath53 and",
    "the side length of each cell is @xmath73 . on the other hand ,",
    "the volume of a hypercube of side length @xmath74 in @xmath1-dimensional space is @xmath75 , therefore , the number of central cell - points in the bounding box @xmath57 is at most @xmath76 .",
    "so , the number of points in @xmath64 is at most @xmath77 .",
    "hence , by brute - force we need @xmath78 time for computing the diameter of rounded point set @xmath64 .    in the next step of the algorithm , we need to compute two sets @xmath68 and @xmath69 , which include points of @xmath61 are in two hypercubes @xmath66 and @xmath67 , respectively .",
    "clearly , this work takes @xmath18 time .",
    "then , for finding the diameter between two sets @xmath68 and @xmath69 , we need to know number of points on each of them . on the other hand ,",
    "maximum number of points in two sets @xmath68 and @xmath69 is @xmath79 .",
    "so , for computing @xmath80 , we need to @xmath81 time .",
    "but , we may be have more than one diametrical pairs @xmath68 and @xmath69 . since , we may be have at most @xmath82 different diametrical pairs @xmath68 and @xmath69 , this step takes at most @xmath83 time .",
    "so , total complexity of our algorithm is as follows : @xmath84 since , @xmath1 is fixed , we have : @xmath85 .",
    "we can reduce running time of the proposed algorithm by discarding some central cell - points which do not have any potential to be the diametrical pairs in rounded point set @xmath64 , and similarly , in two point sets @xmath68 and @xmath69 . if we consider all the points which are same in their first @xmath86 coordinates , and keep only highest and lowest . then",
    ", number of points in @xmath64 , and two point sets @xmath68 and @xmath69 can be reduced to @xmath87 .",
    "so , using the brute - force quadratic algorithm we need @xmath88 time to find the diametrical pair .",
    "hence , this gives us the total running time @xmath89 .",
    "about required space , we only need to @xmath4 space for storing required points sets .",
    "so , this completes the proof .",
    "our last result is based on a combination of two approaches which are used in  @xcite and  @xcite .",
    "let , we round initial point set and obtain a reduced point set with @xmath87 points in @xmath4 time .",
    "after rounding step , in the agrawal et . al  @xcite method instead of projecting the points on @xmath90 different directions which need many projection operations , we project points on some hyperplanes and compute the approximate diameter in these hyperplanes .",
    "this results in an improved approximation that we have presented in the following corollary .",
    "[ enumi ] corollary * * _ _    an @xmath31-approximate for the diameter of a set of n points in @xmath1-dimensional euclidean space , can be computed in @xmath91 time , where @xmath92 .",
    "now , back to the details of the approximation . in the next lemma",
    ", we show that the proposed algorithm computes an approximate diameter @xmath26 with error range @xmath93 from the true diameter @xmath94 , where @xmath92 .",
    "[ enumi ] lemma * * _ _    algorithm 1 computes an approximate diameter @xmath26 such that : @xmath95 , where @xmath92 .",
    "let @xmath96 and @xmath97 be two central cell - points that are used by the algorithm for computing the approximate diameter @xmath98 .",
    "then , we have two corresponding exact points @xmath34 and @xmath35 for these two approximate points .",
    "fig  [ fig : exam ] illustrates a rounded point set and its diameter .",
    "is computed over rounded point set @xmath61 in @xmath60 .",
    "two central cell - points @xmath96 and @xmath97 are used to compute @xmath98 .",
    "their corresponding initial points are @xmath34 and @xmath35 . ]",
    "so , we have : @xmath99 now , we can simplify ( 2 ) as following : @xmath100 by setting @xmath101 , we have : @xmath102 since @xmath103 , and by setting @xmath104 , we can result : @xmath105 therefore , the lemma is resulted .",
    "we have presented an efficient @xmath2-approximation algorithm to compute the diameter of a point set @xmath7 in @xmath10 , for a fixed dimension @xmath1 in @xmath3 time , when @xmath106 .",
    "the proposed algorithm used new approach that results a method which are simple in implementation . moreover , we show that the running time of the proposed algorithm can be improved to an @xmath107-approximate with @xmath6 time .",
    "thus , these results provide some improvements in the running time of this problem .",
    "cheong , o , shin , c. s. , vigneron a. : computing farthest neighbors on a convex polytope . in proceedings of the 7th annual international computational and combinatoric conference ,",
    "volume 2108 of lncs , pp .",
    "159 - 169 , ( 2001 )"
  ],
  "abstract_text": [
    "<S> in this paper , we study the problem of computing the diameter of a set of @xmath0 points in @xmath1-dimensional euclidean space , for a fixed dimension @xmath1 , and propose a new @xmath2-approximation algorithm with @xmath3 time and @xmath4 space , where @xmath5 . </S>",
    "<S> the proposed algorithm is simple in implementation and does not need complicated data structures . </S>",
    "<S> we also improve the proposed algorithm to another algorithm with @xmath6 running time . </S>",
    "<S> diameter , point sets , approximation algorithm , higher dimensions . </S>"
  ]
}