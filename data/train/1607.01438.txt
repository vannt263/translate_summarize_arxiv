{
  "article_text": [
    "social networks have certainly become an important center of attention in our modern information society by transforming human relationships into a huge interchange of , very often , _ sensitive _ data .",
    "there are many truly beneficial consequences when social network data are released for justified mining and analytical purposes .",
    "for example , researchers in sociology , economics and geography , as well as vendors in service - oriented systems and internet advertisers can certainly benefit and improve their performances by a fair study of the social network data .",
    "but , such benefits are definitely _ not _ free of cost as dishonest individuals or organizations may compromise the _ privacy _ of its users while scrutinizing a public social network and may deliberately use such privacy violations for harmful or other unfair commercial purposes . a common way to handle this kind of unwelcome intrusion on the user s privacy",
    "is to somehow _ anonymize _ the data by removing most potentially identifying attributes .",
    "however , even after such anonymization , often it may still be possible to infer many sensitive attributes of a social network that may be linked to its users , such as node degrees , inter - node distances or network connectivity , and therefore _ further _ privacy - preserving methods need to be investigated and analyzed .",
    "these additional privacy - preserving methods of social networks are based on the concept of @xmath0-anonymity introduced for microdata in  @xcite , aiming to ensure that _ no _ record in a database can be re - identified with a probability higher than @xmath1 .",
    "crucial to modelling a social network anonymization process are of course the adversary s background knowledge of any object and the structural information about the network that is available . for example , assuming the involved social network as a simple graph in which individuals are represented by nodes and relationships between pairs of individuals are represented by edges , the adversary s background knowledge about a target ( a node ) could be the node degree  @xcite , the node neighborhood  @xcite , _ etc_. in such scenarios , it frequently suffices to develop attacks to re - identify the individuals and their relationships .",
    "such attacks are usually called _ passive _ ( see  @xcite for more information ) .",
    "some examples of passive attacks and the corresponding privacy - preserving methods for social networks can be found in references  @xcite .",
    "in contrast , backstrom _",
    "_  introduced the concept of the so - called _ active _ attacks in  @xcite .",
    "such attacks are mainly based on creating and inserting in a network some nodes ( the `` attacker nodes '' ) under control by the adversary .",
    "these attacker nodes could be newly created accounts with pseudonymous or spoofed identities ( commonly called sybil nodes ) , or existing legitimate individuals in the network which are in the adversary s proximity .",
    "the goal is then to establish links with some other nodes in the network ( or even links between other nodes ) in order to create some sort of `` fingerprints '' in the network that will be further released .",
    "clearly , once the releasing action has been achieved , the adversary could retrieve the fingerprints already introduced , and use them to re - identify other nodes in the network .",
    "et  al . _  in  @xcite showed that @xmath2 attacker nodes in a network could in fact seriously compromise the privacy of any arbitrary node . in recent years",
    ", several research works have appeared that deal with decreasing the impact of these active attacks ( see , for instance , @xcite ) . for other related publications on privacy - preserving methods in social networks ,",
    "see  @xcite .",
    "there are already many well - known active attack strategies for social networks in order to find all possible vulnerabilities .",
    "however , somewhat surprisingly , not many prior research works have addressed the goal of measuring how resistant is a given social network against these kinds of active attacks to the privacy . to this effect ,",
    "very recently a novel privacy measure for social networks was introduced in  @xcite .",
    "the privacy measure proposed there was called the _ @xmath3-anonymity _ , where @xmath0 is a number indicating a privacy threshold and @xmath4 is the _ maximum _ number of attacker nodes that can be inserted into the network ; @xmath4 may be estimated through some statistical methods - anonymity where @xmath4 represented the number of common neighbors of two nodes . ] .",
    "trujillo - rasua and yero in  @xcite showed that graphs satisfying @xmath3-anonymity can prevent adversaries who control at most @xmath4 nodes in the network from re - identifying individuals with probability higher than @xmath1 .",
    "this privacy measure relies on a graph parameter called the @xmath0-metric anti - dimension .",
    "consider a simple connected unweighted graph @xmath5 and let @xmath6 be the length ( number of edges ) of a shortest path between two nodes @xmath7 .",
    "for an ordered sequence @xmath8 of nodes of @xmath9 and a node @xmath10 , the vector @xmath11 is called the _ metric representation _ of @xmath12 with respect to @xmath13 .",
    "based on the above definition , a set @xmath14 of nodes is called a @xmath0-_anti - resolving set _ for @xmath9 if @xmath0 is the largest positive integer such that for every node @xmath15 there exist at least @xmath16 different nodes @xmath17 such that @xmath18 , _",
    "i.e. _ , @xmath12 and @xmath19 have the same metric representation with respect to @xmath13 . the @xmath0-_metric anti - dimension _ of @xmath9 , denoted by @xmath20 , is then the minimum cardinality of any @xmath0-anti - resolving set in @xmath9 .",
    "note that @xmath0-anti - resolving sets may _ not _ exist in a graph for every @xmath0 .",
    "the connection between @xmath21-anonymity privacy measure and the @xmath0-metric anti - dimension can be understood in the following way .",
    "suppose that an adversary takes control of a set of nodes @xmath13 of the graph ( _ i.e. _ , @xmath13 plays the role of attacker nodes ) , and the background knowledge of such an adversary regarding a target node @xmath12 is the metric representation of the node @xmath12 with respect to @xmath13 .",
    "the @xmath3-anonymity privacy measure is then a privacy metric that naturally evolves from the adversary s background knowledge .",
    "intuitively , if @xmath13 ( the attacker nodes of an adversary ) is a @xmath0-anti - resolving set then the adversary can not uniquely re - identify other nodes in the network ( based on the metric representation ) from these attacker nodes with a probability higher than @xmath1 ( based on uniform sampling of other nodes ) , and if the @xmath0-metric anti - dimension of the graph is @xmath4 then the adversary must use at least @xmath4 attacker nodes to get the probability of privacy violation down to @xmath1 .",
    "there is a rich literature on theoretical investigations of privacy measures and privacy preserving computational models in several other application areas such as multi - party communications , distributed computing and game - theoretic settings ( _ e.g. _ , see  @xcite ) .",
    "however , none of these settings apply directly to our application scenario of active attack model for social networks .",
    "the differential privacy model , introduced by dwork  @xcite in the context of privacy preservation in statistical databases against malicious database queries , works by computing the correct answer to a query and adding a noise drawn from a specific distribution , and is quite different from the anonymization approach studied in this paper .",
    "it is obviously desirable to know how secure a given social network is against active attacks .",
    "this necessitates the study of computational complexity issues for computing @xmath3-anonymity .",
    "currently known results only include some heuristic algorithms with no provable guarantee on performances such as in  @xcite , or algorithms for very special cases .",
    "in fact , it is not even known if any version of the related computational problems is @xmath22-hard . to this effect , we formalize three computational problems related to measuring the @xmath3-anonymity of graphs and present non - trivial computational complexity results for these problems . the rest of the paper is organized as follows :    1 .   in section  [ sec - termi ]",
    "we review some basic terminologies and notations and then present the three computational problems that we consider in this paper . for the benefit of the reader",
    ", we also briefly review some standard algorithmic complexity concepts and results that will be used later .",
    "2 .   in section  [ sec - statementofresults ] ,",
    "we state the results in this paper mathematically precisely along with some informal remarks .",
    "we group our results based on the problem definitions and the expected size of the attacker nodes .",
    "sections  [ sec - pfb][sec - pfe ] are devoted to the proofs of the results stated in section  [ sec - statementofresults ] .",
    "we finally conclude in section  [ sec - conc ] with some possible future research directions .",
    "in this section , we first describe the terminologies and notations required to describe our computational problems , and subsequently describe several versions of the problems we consider .      an example to illustrate the notations in section  [ sec - termi-2 ] . ]",
    "let @xmath5 be our _ undirected unweighted _ input graph over @xmath23 nodes @xmath24 .",
    "we use @xmath25 to denote the distance ( number of edges in a shortest path ) between nodes @xmath26 and @xmath27 . for illustrating various notations",
    ", we use the example in fig .",
    "[ fignew ] .    1 .   @xmath28 . for example , @xmath29 .",
    "@xmath30 is the _ diameter _ ( length of a longest shortest path ) of the graph @xmath5 .",
    "for example , @xmath31 .",
    "@xmath32 is the ( open ) _ neighborhood _ of node @xmath33 in @xmath5 .",
    "for example , @xmath34 .",
    "4 .   for a subset of nodes @xmath35 and any @xmath36",
    ", @xmath37 denotes the metric representation of @xmath26 with respect to @xmath38 , _",
    "i.e. _ , the vector of @xmath39 elements obtained from @xmath40 by deleting @xmath25 for every @xmath41 .",
    "for example , @xmath42 .",
    "@xmath43 for any @xmath44 .",
    "for example , if @xmath45 then @xmath46 . 6 .",
    "@xmath47 is a partition of @xmath48 if and only if @xmath49 and @xmath50 for @xmath51 .",
    "partition @xmath52 is called a _ _ refinement__. ] of partition @xmath53 , denoted by @xmath54 , provided @xmath55 and @xmath56 can be obtained from @xmath53 in the following manner : 1 .   for every node @xmath57 ,",
    "remove @xmath26 from the set containing it in @xmath53 .",
    "optionally _ , for every set @xmath58 in @xmath53 , replace @xmath58 by a partition of @xmath58 .",
    "3 .   remove empty sets , if any .",
    "+ for example , if @xmath59 and @xmath60 then @xmath54 . 7 .",
    "the equality relation over a set of vectors , all of same length , obviously defines an _",
    "equivalence relation_. the following notations are used for such an equivalence relation over the set of vectors @xmath61 for some @xmath62 .",
    "the set of equivalence classes , which forms a partition of @xmath61 , is denoted by @xmath63 .",
    "for example , + @xmath64 .",
    "2 .   abusing terminologies slightly , two nodes @xmath65 will be said to belong to the _ same _ equivalence class if @xmath37 and @xmath66 belong to the same equivalence class in @xmath63 , and thus @xmath63 also defines a partition into equivalence classes of @xmath67 .",
    "for example , @xmath68 will also denote @xmath69 .",
    "the _ measure _ of the equivalence relation is defined as @xmath70 .",
    "thus , if a set @xmath13 is a @xmath0-anti - resolving set then @xmath71 defines a partition into equivalence classes whose measure is _ exactly _ @xmath0 .",
    "for example , @xmath72 and @xmath73 is a @xmath74-anti - resolving set .",
    "it is obviously desirable to know how secure a given social network is against active attacks .",
    "this necessitates the study of computational complexity issues for computing @xmath3-anonymity . to this effect , we formalize three computational problems related to measuring the @xmath3-anonymity of graphs for all the problem versions , let @xmath5 be the ( connected undirected unweighted ) input graph representing the social network under study .",
    "[ prob1 ] given @xmath9 , find a subset of nodes @xmath38 that _ maximizes _ @xmath75 .",
    "* notation related to problem  [ prob1 ] * @xmath76 .",
    "problem  [ prob1 ] simply finds a @xmath0-anti - resolving set for the largest possible @xmath0 .",
    "intuitively , it sets an absolute bound on the privacy violation probability of an adversary assuming that the adversary can use _ any _ number of attacker nodes . in practice , however , the number of attacker nodes employed by the adversary may be limited , which leads us to the second problem formulation stated below .",
    "[ prob2 ] given @xmath9 and a positive integer @xmath0 , find a subset of nodes @xmath38 of _ minimum _ cardinality such that @xmath77 , if such a @xmath38 exists .",
    "* notation and assumption related to problem  [ prob2 ] * @xmath78 for some @xmath79 . if @xmath80 for _ no _",
    "@xmath38 then we set @xmath81 and @xmath82 .",
    "problem  [ prob2 ] finds a @xmath0-anti - resolving set for largest @xmath0 while simultaneously minimizing the number of attacker nodes .    the remaining third version of our problem formulation relates to a trade - off between privacy violation probability and the corresponding minimum number of attacker nodes needed to achieve such a violation .",
    "to understand this motivation , suppose that @xmath9 has a @xmath0-metric anti - dimension of @xmath4 , a @xmath83-metric anti - dimension of @xmath84 , @xmath85 and @xmath86 .",
    "then , this provides a trade - off between privacy and number of attacker nodes , namely we may allow a smaller privacy violation probability @xmath87 but the network can tolerate _ adversarial control _ of a _ fewer _ number @xmath84 of nodes or we may allow a larger privacy violation probability @xmath1 but the network can tolerate adversarial control of a larger number @xmath4 of nodes .",
    "such a trade - off may be crucial for a network administrator in administering privacy of a network or for an individual in its decision to join a network . clearly , this necessitates solving a problem of the following type .",
    "[ prob3 ] given @xmath9 and a positive integer @xmath0 , find a subset of nodes @xmath38 of _ minimum _ cardinality such that @xmath88 , if such a @xmath38 exists .",
    "* notation and assumption related to problem  [ prob3 ] * @xmath89 for some @xmath90 . if @xmath88 for _ no _",
    "@xmath38 then we set @xmath91 and @xmath92      for the benefit of the reader , we summarize the following concepts and results from the computational complexity theory domain .",
    "_ we assume that the reader is familiar with standard @xmath93 , @xmath94 , @xmath95 and @xmath96 notations used in asymptotic analysis of algorithms @xmath97_e.g . _ , see  @xcite@xmath98_.    an algorithm @xmath99 for a minimization ( resp . ,",
    "maximization ) problem is said to have an _ approximation ratio _ of @xmath100 ( or is simply an _ @xmath100-approximation _ )",
    "@xcite provided @xmath99 runs in polynomial time in the size of its input and produces a solution with an objective value _ no larger than _ @xmath100 times ( resp .",
    ", _ no smaller than _ @xmath101 times ) the value of the optimum .",
    "dtime@xmath102 refers to the class of problem that can be solved by a deterministic algorithm running in @xmath103 time when @xmath23 is the size of the input instance ; it is widely believed that @xmath104dtime@xmath103 .    the minimum set - cover problem ( sc ) is a well - known combinatorial problem that is defined as follows  @xcite .",
    "our input is an universe @xmath105 of @xmath23 elements , and a collection of @xmath106 sets @xmath107 over this universe with @xmath108 .",
    "a valid solution of sc   is a subset of indices @xmath109 such that every element in @xmath110 is `` covered '' by a set whose index is in @xmath111 , _",
    "i.e. _ , @xmath112 .",
    "the objective of sc  is to _ minimize _ the number @xmath113 of selected sets .",
    "we use the notation @xmath114 to denote the size ( number of sets ) in an optimal solution of an instance of sc . on the inapproximability side ,",
    "sc  is @xmath22-hard  @xcite and , assuming @xmath115dtime@xmath102 , sc  does not admit a @xmath116-approximation for any constant @xmath117  @xcite . on the algorithmic side , sc  admits a @xmath118-approximation using a simple greedy algorithm  @xcite that can be easily implemented to run in @xmath119 time  @xcite .",
    "in this section we provide precise statements of our results , leaving their proofs in sections  [ sec - pfb][sec - pfe ] .",
    "[ thm1 ]   + * ( a ) * both adim  and adim@xmath120   can be solved in @xmath121 time .    *",
    "( b ) * both adim  and adim@xmath120   can also be solved in @xmath122 time `` with high probability '' @xmath97_i.e .",
    "_ , with a probability of at least @xmath123 for some constant @xmath124@xmath98 .",
    "the randomized algorithm in theorem  _ [ thm1](b ) _ runs faster that the deterministic algorithm in theorem  _ [ thm1](a ) _ provided @xmath125 .",
    "[ k - large ]   + * ( a ) * adim@xmath126  is @xmath22-complete for any integer @xmath0 in the range @xmath127 where @xmath128 is any arbitrary constant , even if the diameter of the input graph is @xmath129 .    *",
    "( b ) * assuming @xmath130__dtime__@xmath131 , there exists a universal constant @xmath132 such that adim@xmath126  does not admit a @xmath133-approximation for any integer @xmath0 in the range @xmath127 where @xmath128 is any arbitrary constant , even if the diameter of the input graph is @xmath129 .    *",
    "( c ) * if @xmath134 for some constant @xmath135 then @xmath136 if a solution exists and adim@xmath126  can be solved in polynomial time .",
    "[ rem - opt ]   + * ( a ) * for @xmath137 , the inapproximability ratio in theorem  _ [ k - large](a ) _ is asymptotically optimal up to a constant factor because of the @xmath138-approximation of adim@xmath139  in theorem  _ [ k - one](a)_.    * ( b ) * the result in theorem  _ [ k - large](b ) _ provides a much stronger inapproximability result compared to that in theorem  _ [ k - large](a ) _ at the expense of a slightly weaker complexity - theoretic assumption @xmath97_i.e . _ , @xmath140__dtime__@xmath131 vs. @xmath141@xmath98 .",
    "note that even when @xmath137 adim@xmath126  is @xmath22-hard and even hard to approximate within a logarithmic factor due to theorem  [ k - large ] .",
    "we show the following algorithmic results for adim@xmath126  when @xmath137 .",
    "[ k - one ]   + * ( a ) * adim@xmath142  admits a @xmath143-approximation in @xmath144 time .    *",
    "( b ) * if @xmath9 has at least one node of degree @xmath74 then @xmath145 and thus adim@xmath142  can be solved in @xmath144 time .    *",
    "( c ) * if @xmath9 does not contain a cycle of @xmath146 edges then @xmath147 and thus adim@xmath142  can be solved in @xmath144 time .",
    "* ( a ) * we first consider the claim for adim@xmath120 .",
    "we begin by proving some structural properties of valid solutions for adim@xmath120 .",
    "[ prop1 ] consider two subsets of nodes @xmath148 .",
    "let @xmath149 be two nodes such that they do not belong to the same equivalence class in @xmath150 .",
    "then @xmath26 and @xmath27 do not belong to the same equivalence class in @xmath151 also .",
    "since @xmath26 and @xmath27 are not in the same equivalence class in @xmath150 , we have @xmath152 which in turn implies ( since @xmath153 ) @xmath154 which implies @xmath26 and @xmath27 are not in the same equivalence class in @xmath151 .    [ cor1 ] proposition  [ prop1 ] implies @xmath155 .    note that @xmath155 in corollary  [ cor1 ] does not necessarily imply that @xmath156 .",
    "the following proposition gives some condition for this to happen .",
    "[ prop2 ] consider two subsets of nodes @xmath148 , and let @xmath157 be the only @xmath158 equivalence classes @xmath97subsets of nodes@xmath98 in @xmath150 such that @xmath159 .",
    "then ,    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 1 .",
    "@xmath160 implies @xmath161 , and 2 .   if @xmath162 for some @xmath163 then @xmath164 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    since @xmath165 , there exists a node @xmath166 such that @xmath167 and @xmath168 . similarly , since @xmath169 , there exists a node @xmath170 such that @xmath171 and @xmath172 . by corollary  [ cor1 ] , @xmath155 and thus the following implications",
    "hold :    * if @xmath173 then @xmath151 contains an equivalence class ( subset of nodes ) @xmath174 such that @xmath175 .",
    "this implies @xmath176 . *",
    "if there exists a @xmath177 such that @xmath162 then @xmath151 contains an equivalence class @xmath178 with @xmath179 .",
    "this implies @xmath180 .",
    "based on the above structural properties , we design algorithm  i for adim@xmath120  as shown below .",
    "r l l   + & + [ 5pt ] * 2 .",
    "* & + [ 5pt ] * 3 . * & + [ 5pt ] * 3.1 * & & @xmath181 ; @xmath182 + [ 5pt ] * 3.2 * & & * while *  @xmath183 @xmath184",
    "@xmath185 @xmath186 * do * + [ 5pt ] * 3.2.1 * & & compute @xmath187 + [ 5pt ] * 3.2.2 * & & * if *   @xmath188 and @xmath189 + * 3.2.3 * & & * then*@xmath190 @xmath191 ; @xmath192 ; @xmath193 + [ 5pt ] * 3.2.4 * & & * else*@xmath194 let @xmath195 be the _ only _ @xmath158 equivalence classes ( subsets of nodes ) + & & in @xmath63 such that @xmath196 + [ 5pt ] * 3.2.5 * & & @xmath197 + [ 5pt ] * 4 . * & +    algorithm",
    "i returns an optimal solution for adim@xmath120 .",
    "assume that @xmath198 since otherwise obviously our returned solution is correct .",
    "fix any optimal solution ( subset of nodes ) @xmath199 of measure @xmath200 and select any arbitrary node @xmath201 . consider the iteration of the * for *  loop in step  3 when @xmath26 is equal to @xmath33 .",
    "we now analyze the run of _ this particular iteration_.    let @xmath202 be the @xmath203 subsets of nodes that were assigned to @xmath38 in _ successive _ iterations of the * while *  loop in step  3.2 .",
    "we have the following cases to consider .",
    "case 1 : @xmath204 for some @xmath205 .",
    ": :    then , our solution is a set    @xmath206 such that +    @xmath207    and    @xmath208 .",
    "case 2 : @xmath209 for any @xmath205 . : :    since    @xmath210    and @xmath211 for any    @xmath205 , only one of the following    cases is possible :    +    case 2.1 : there exists @xmath212 such    that @xmath213 but    @xmath214 . ; ;      let +      @xmath215      be all the @xmath216 equivalence classes ( subsets of nodes )      in @xmath217 such that      @xmath218 .",
    "now we note the following :      +      * by step  3.2.5 ,      @xmath219 .      * thus , @xmath213 and      @xmath214      implies @xmath220 , and therefore there      exists an index @xmath221 such that @xmath222 .",
    "let @xmath223 ( @xmath224 could be empty ) .",
    "then , for some      @xmath225 , @xmath226 is      an equivalence class in @xmath227      implying @xmath228 since      @xmath229 , we      have @xmath230      +      thus ,      @xmath231      and      @xmath232 ,      contradicting the optimality of      @xmath233 .    case 2.2 :    @xmath234 .",
    "; ;      if @xmath235 was set to      @xmath236 at the last iteration of the      * while *  loop , then      @xmath237      and      @xmath238 ,      contradicting the optimality of      @xmath233 .",
    "thus ,      @xmath235 must have remained      @xmath239 after the last iteration of the      * while *  loop , which implies      @xmath240 .",
    "let      @xmath241      be all the @xmath216 equivalence classes ( subsets of nodes )      in @xmath242 such that      @xmath243 .      since @xmath244 , we have      @xmath245",
    "thus ,      @xmath246      contradicting our assumption of      @xmath240 .    algorithm i runs in @xmath121 time .",
    "there are @xmath23 choices for the * for *  loop in step  3 . for each such choice",
    ", we analyze the execution of the * while *  loop in step  3.2 .",
    "the running time in each iteration of the * while *  loop is dominated by the time taken to compute @xmath247 from @xmath248 .",
    "suppose that @xmath249 . by corollary  [ cor1 ] , @xmath250",
    "thus , it follows that the _ total _ time to execute _ all _ iterations of the * while *  loop _ for a specific choice _ of @xmath26 in step  3 is of the order of @xmath23 times the time taken to solve a problem of the following kindfor a subset of nodes @xmath251 , given @xmath252 and a node @xmath253 , compute @xmathsince @xmath254 is a refinement of @xmath252 by corollary  [ cor1 ] , we can use the following simple strategy .",
    "for every set @xmath255 , we split @xmath256 into two or more parts , if needed , by doing a bucket - sort ( with @xmath23 bins ) in @xmath257 time on the sequence of values @xmath258 .",
    "the total time taken for all sets in @xmath248 is thus @xmath259 .",
    "this completes the proof for adim@xmath120 .",
    "now we consider the claim for adim .",
    "obviously , adim  can be solved in @xmath260 time by solving adim@xmath120  for @xmath261 in this order and selecting the largest @xmath0 as @xmath262 for which @xmath263 .",
    "however , we can modify the steps of algorithm  i directly to solve adim  in @xmath121 time , as shown in algorithm  ii .",
    "r l l   +   + * 1 . * & + [ 5pt ] * 2 . * & + [ 5pt ] * 3 . * & + [ 5pt ] * 3.1 * & & @xmath181 + [ 5pt ] * 3.2 * & & * while *  @xmath264",
    "* do * + [ 5pt ] * 3.2.1 * & & compute @xmath187 + [ 5pt ] * 3.2.2 * & & * if *  @xmath265 + * 3.2.3 * & & * then *  @xmath266 @xmath267 ; @xmath192 + [ 5pt ] * 3.2.4 * & & * else*@xmath194 let @xmath195 be the _ only _",
    "@xmath158 equivalence classes ( subsets of nodes ) + & & in @xmath63 such that @xmath196 + [ 5pt ] * 3.2.5 * & & @xmath197 + [ 5pt ] * 4 . * & +    the proof of correctness is very similar ( and , in fact simpler due to elimination of some cases ) to that of adim@xmath120 .    * ( b ) * our solution is the obvious randomization of algorithm  ii ( for adim@xmath120 ) or algorithm - ii ( for adim ) as shown below .",
    "l l l l + * 1 . * & + [ 5pt ] * 2 .",
    "* & + [ 3pt ] & or & & + [ 3pt ] & + [ 5pt ] * 3 . * & + [ 5pt ] & * 3.1 * & + [ 5pt ] & * 3.2 * & execute step 3.1 and step  3.2 ( and its sub - steps ) of algorithm  i & ( for adim@xmath120 ) + [ 3pt ] & & or & + [ 3pt ] & & execute step 3.1 and step  3.2 ( and its sub - steps ) of algorithm  ii & ( for adim ) + [ 5pt ] * 4 . * & +    the success probability @xmath268 is given by @xmath269 \\\\ = 1- \\pr\\left[\\!\\!{\\hbox{\\rm \\ $ v_i\\notin { v_{\\mathrm{opt}}^{\\geq k } } $ in \\emph{each } of the $ \\left\\lceil\\frac{2 n\\ln n}{k}\\right\\rceil$ iterations\\ \\/}}\\!\\!\\right ] \\geq 1- \\left ( 1 - \\frac{k}{n } \\right)^ { \\left\\lceil\\frac{2n\\ln n}{k}\\right\\rceil } > 1 - \\frac{1}{{{\\mathbf{e}}}^{2\\ln n } } = 1 - \\frac{1}{n^2}\\end{gathered}\\ ] ]",
    "* ( a ) * adim@xmath126  trivially belongs to @xmath22 for any @xmath0 , thus we need to show that it is also @xmath22-hard .",
    "the standard @xmath22-complete _ minimum dominating set _ ( mds ) problem for a graph is defined as follows  @xcite .",
    "our input is a connected undirected unweighted graph @xmath5 .",
    "a subset of nodes @xmath35 is called a _ dominating set _ if and only if every node in @xmath67 is adjacent to some node in @xmath38 .",
    "the objective of mds  is to find a dominating set of nodes of _ minimum _ cardinality .",
    "let @xmath270 denote the cardinality of a minimum dominating set for a graph @xmath9 .",
    "it is well - known that the mds  and sc  problems have precisely the same approximability via approximation - preserving reductions in both directions and , in particular , there exists a standard reduction from sc  to mds  as follows .",
    "given an instance @xmath105 and @xmath107 of sc , we create the following instance @xmath271 of mds .",
    "@xmath272 has an _ element node _",
    "@xmath273 for every element @xmath274 and a _ set node _",
    "@xmath275 for every set @xmath177 with @xmath276 .",
    "there are two types of edges in @xmath277 .",
    "every set node @xmath275 has an edge to every other set node @xmath278 and the collection of these edges is called the set of _ clique edges_. moreover , a set node @xmath275 is connected to an element node @xmath273 if and only if @xmath279 and the collection of these edges is called the set of _ membership edges_. a standard straightforward argument shows that @xmath280 is a solution of sc  if and only if the collection of set nodes @xmath281 is a solution of mds  on @xmath282 and thus @xmath283 .    for the purpose of our @xmath22-hardness reduction , it would be more convenient to work with a restricted version of sc  known as the _ exact cover by @xmath284-sets _ ( x3c ) problem . here",
    "we have exactly @xmath23 elements and exactly @xmath23 sets where @xmath23 is a multiple of three , every set contains exactly @xmath284 elements and every element occurs in exactly @xmath284 sets .",
    "obviously we need at least @xmath285 sets to cover all the @xmath23 elements . letting @xmath286 to denote the number of sets in an optimal solution of x3c , it is well - known that problem of deciding whether @xmath287 is in fact @xmath22-complete .",
    "let @xmath288 be the real - valued solution of the quadratic equation @xmath289 .",
    "note that since @xmath290 for some constant @xmath291 , we have @xmath292 , _",
    "i.e. _ , @xmath23 and @xmath293 are `` polynomially related '' .",
    "illustration of the @xmath22-hardness reduction in theorem  [ k - large](a ) .",
    "only a part of the graph @xmath9 is shown for visual clarity . ]",
    "we assume without loss of generality that @xmath293 is an even integer , and start with an instance of x3c  of @xmath294 elements and transform it to an instance graph @xmath271 having @xmath293 nodes of mds  via the reduction outlined before . since @xmath294 is polynomially related to @xmath23 , such an instance of x3c  is @xmath22-complete with respect to @xmath23 being the input size .",
    "we reduce @xmath282 to an instance @xmath5 of adim@xmath126  in polynomial time as follows ( see fig .  [ fig2 ] for an illustration ) :    * we `` clone '' each element node @xmath295 to get @xmath296 copies , _",
    "i.e. _ , every node @xmath297 is replaced by @xmath296 new nodes @xmath298 .",
    "we refer to these nodes as _ clones _ of the element node @xmath297 ( or , sometimes simply as _ element - clone nodes _ ) .",
    "there are precisely @xmath299 such nodes .",
    "* we `` clone '' each set node @xmath300 to get @xmath296 copies , _",
    "i.e. _ , every node @xmath275 is replaced by @xmath296 new nodes @xmath301 .",
    "we refer to these nodes as _ clones _ of the set node @xmath275 ( or , sometimes simply as _ set - clone nodes _ ) .",
    "there are precisely @xmath299 such nodes .",
    "* we add @xmath0 new nodes @xmath302 .",
    "we refer to these nodes as _",
    "clique nodes_. * we add an edge between every pair of clique nodes @xmath303 and @xmath304 .",
    "we refer to these edges as _",
    "clique edges_. there are precisely @xmath305 such edges .",
    "* we add an edge between every clique node and every non - clique node , _ i.e. _ , we add every edge in the set @xmath306 we refer to these edges as the _ partition - fixing _ edges .",
    "there are precisely @xmath307 such edges .",
    "* we add an edge between every pair of distinct element - clone nodes @xmath308 and @xmath309 .",
    "we refer to these as the _ element - clone edges_. there are precisely @xmath310 such edges . * for every element @xmath311 and every set @xmath177 such that @xmath312 , we add the following @xmath313 edges : @xmath314 we refer to these edges as the _ non - member _ edges corresponding to the element node @xmath311 and the set node @xmath177 .",
    "there are precisely @xmath315 such edges .",
    "note that @xmath9 has precisely @xmath316 nodes and thus our reduction is polynomial time in @xmath23 .",
    "since any clique node is adjacent to every other node in @xmath9 , it follows that @xmath317 .",
    "we now show the validity of our reduction by showing that @xmath318    * proof of @xmath319 *    consider an optimal solution @xmath320 of mds  on @xmath282 with @xmath321 .",
    "we now construct a solution @xmath35 of adim@xmath126  on @xmath9 by setting @xmath322 .",
    "note that @xmath323 .",
    "we claim that @xmath38 is a valid solution of adim@xmath126  by showing that    ( _ a _ ) : :    @xmath324    and ( _ b _ ) : :    any other equivalence class in    @xmath248 has at least @xmath0    nodes .    to prove ( _ a _ ) ,",
    "consider a clique node @xmath303 and any other non - clique node .",
    "then , the following cases apply :    * suppose that the non - clique node is a element - clone node @xmath325 for some @xmath326 and @xmath4 . since @xmath327 is a solution of mds  on @xmath282 , there exists a set node @xmath328 such that @xmath329 and consequently @xmath330 .",
    "this implies that there exists a node @xmath331 such that @xmath332 , and therefore @xmath308 _ can not _ be in the same equivalence class with @xmath303 . *",
    "suppose that the non - clique node is a set - clone node @xmath333 .",
    "pick any set - clone node @xmath334 . then ,",
    "@xmath335 , and therefore @xmath336 _ can not _ be in the same equivalence class with @xmath303 .    to prove ( _ b _ ) , note the following :    * since @xmath317 , @xmath337 for any two _ distinct _ set - clone nodes @xmath338 and @xmath339 , and thus all the set nodes in @xmath67 belong together in the _ same _ equivalence class in @xmath248 .",
    "there are at least @xmath340 such nodes in @xmath67 .",
    "thus , any equivalence class that contains these set - clone nodes can not have less than @xmath0 nodes .",
    "* consider now an equivalence class in @xmath248 that contains a copy @xmath341 of the element node @xmath273 for some @xmath342 and @xmath326 .",
    "consider another copy @xmath343 of the element node @xmath273 for some @xmath344 .",
    "for any set node @xmath331 , if @xmath345 then @xmath346 , whereas if @xmath347 then , since @xmath317 , it follows that @xmath348 .",
    "thus , any equivalence class that contains at least one clone of an element node must contain all the @xmath349 clones of that element node and thus such an equivalence class can not have a number of nodes that is less than @xmath0 .",
    "* proof of @xmath350 *    since we know that @xmath351 is always at least @xmath352 , it suffices to show that @xmath353 . consider an optimal solution @xmath354 with @xmath355 .",
    "since @xmath356 is a solution of adim@xmath126  on @xmath9 , there exists a subset of nodes , say @xmath357 , such that @xmath358 and @xmath359 .",
    "[ no - element - set ] @xmath360 does not contain any set - clone or element - clone nodes and thus @xmath361 .",
    "suppose that @xmath360 contains at least one element - clone node @xmath341 for some @xmath342 and @xmath326 .",
    "but , @xmath362 contains at least @xmath363 other clones of the element node @xmath311 and all these clones must belong together with @xmath341 in the _ same _ equivalence class .",
    "this implies @xmath364 , a contradiction .",
    "similarly , suppose that @xmath360 contains at least one set - clone node @xmath365 for some @xmath342 and @xmath326 .",
    "but , @xmath362 contains at least @xmath363 other clones of the set node @xmath366 and all these clones must belong together with @xmath365 in the _ same _ equivalence class .",
    "this implies @xmath364 , a contradiction .",
    "[ no - set - clone ] @xmath356 does not contain two or more clones of the same set node .",
    "suppose that @xmath356 contains two set - clone nodes @xmath336 and @xmath339 of the same set node @xmath275 .",
    "but , @xmath362 contains at least @xmath363 other clones of the element node @xmath311 and all these clones must belong together in the _ same _ equivalence class @xmath13 .",
    "if we remove @xmath336 from @xmath356 then @xmath336 gets added to this equivalence class .",
    "thus , such a removal produced another valid solution but with one node less than @xmath367 , contradicting the optimality of @xmath368 .",
    "[ no - element - clone ] @xmath356 does not contain any element - clone node .",
    "suppose that @xmath356 contains at least one element - clone node and thus at most @xmath369 set - clone nodes .",
    "note that @xmath362 contains at least @xmath370 clones of every element node @xmath311 .",
    "consider an element - clone node @xmath371 and a clique node @xmath304 .",
    "since @xmath372 , there must be a node in @xmath356 such that the distance of this node to @xmath304 is different from the distance to @xmath373 .",
    "such a node in @xmath356 can not be an element - clone node , say @xmath374 since @xmath375 .",
    "since there is an edge between every set - clone node and every clique node , such a node must be a set - clone node , say @xmath376 for some @xmath377 and @xmath378 , such that @xmath379 , _",
    "i.e. _ , @xmath380 .",
    "since every set in x3c  contains exactly @xmath284 elements and @xmath381 , there must then exist an element - clone node @xmath373 such that the distance of @xmath373 to any node in @xmath356 is exactly the same as the distance of @xmath304 to that node in @xmath356 .",
    "this implies @xmath382 , contradicting proposition  [ no - element - set ] .    by proposition  [ no - set - clone ] and proposition  [ no - element - clone ]",
    ", @xmath356 contains exactly one clone of a subset of set nodes . without loss of generality , assume that @xmath383 and let @xmath384 .",
    "note that @xmath385 .",
    "we are now ready to finish our proof by showing @xmath327 is indeed a valid solution of mds  on @xmath282 .",
    "suppose not , and let @xmath273 be an element - node that is not adjacent to any node in @xmath327 .",
    "then , @xmath386 which contradicts proposition  [ no - element - set ] .    *",
    "( b ) * the proof is similar to that of ( a ) but this time we start with a general version of sc  as opposed to the restricted x3c  version , and show that the reduction is approximation - preserving in an appropriate sense . in the sequel , we use the standard notation poly@xmath387 to denote a polynomial @xmath388 of @xmath23 ( for some constant @xmath124 ) .",
    "we recall the following details of the inapproximability reduction of feige in  @xcite .",
    "given an instance formula @xmath389 of the standard boolean satisfiability problem ( sat ) , feige reduces @xmath389 to an instance @xmath390 of sc   ( with @xmath391 ) in @xmath392 time such that the following properties are satisfied for any constant @xmath117 :    * for some @xmath393 , either @xmath394 or @xmath395 . *",
    "the reduction satisfies the following completeness and soundness properties : + ( completeness ) : :    if @xmath389 is satisfiable then    @xmath394 .",
    "( soundness ) : :    if @xmath389 is not satisfiable then    @xmath396 .    since @xmath391 , by adding duplicate copies of a set , if necessary , we can ensure that @xmath397 for some constant @xmath398 .",
    "our reduction from sc  to mds  to adim@xmath126  is same as in  ( a ) except that some details are different , which we show here .",
    "* we start with an instance of sc  as given by feige in  @xcite with @xmath293 elements and @xmath399 sets , where @xmath400 is a real - valued solution of the equation @xmath401 .",
    "note that since @xmath290 for some constant @xmath291 , we have @xmath402 , _",
    "i.e. _ , @xmath23 and @xmath293 are polynomially related . *",
    "we make @xmath403 copies of each element node and each set node as opposed to @xmath296 copies that we made in the proof of ( a ) .",
    "note that @xmath9 has again precisely @xmath404 nodes .",
    "* let @xmath132 be the constant given by @xmath405 .",
    "our claim @xmath406 in the proof of ( a ) is now modified to + l @xmath406 + [ cols= \" > , < \" , ]    * our proof of the _ completeness _ claim follows the `` proof of @xmath319 '' in the proof of ( a ) with the obvious replacement of @xmath352 by @xmath407 .",
    "* note that our soundness claim is equivalent to its contra - positive @xmath408 and the proof of this contra - positive follows the `` proof of @xmath350 '' in the proof of ( a ) . in the proof , the quantity @xmath296 corresponding to the number of copies for each set and element node needs to be replaced by @xmath403 ; note that @xmath409 .    * ( c ) * since @xmath134 for some constant @xmath135 , @xmath410 contains a single equivalence class @xmath35 such that @xmath411 .",
    "thus , we can employ the straightforward exhaustive method of selecting every possible subset @xmath38 of @xmath0 nodes to be in @xmath248 and checking if the chosen subset of nodes provide a valid solution .",
    "there are @xmath412 such possible subsets and therefore the asymptotic running time is @xmath413 which is polynomial in @xmath23 .",
    "note that for this case @xmath136 if a solution exists .",
    "* ( a ) * note that trivially @xmath414 and thus @xmath415 .",
    "our algorithm , shown as algorithm  v , uses the greedy logarithmic approximation of johnson  @xcite for sc  that selects , at each successive step , a set that contains the maximum number of elements that are still not covered .",
    "l l l   + * 1 . * & + [ 5pt ] * 2 . * & + [ 5pt ] * 3 . * & + [ 5pt ] & * 3.1 * & create the following instance of sc  containing @xmath416 elements and @xmath416 sets : + & & @xmath417 , + & & @xmath418 for @xmath419 + [ 5pt ] & * 3.2 * & * if *  @xmath420 * then * + [ 5pt ] & & * 3.2.1 * run the greedy approximation algorithm  @xcite for this instance of sc + & & giving a solution @xmath421 + [ 5pt ] & & * 3.2.2 * @xmath422 + [ 5pt ] & & * 3.2.3 * * if *   @xmath423 * then * @xmath424 ; @xmath425 + [ 5pt ] * 4 . * & +    algorithm  v returns a valid solution for adim@xmath142 .",
    "suppose that our algorithm returns an invalid solution in the iteration of the * for *  loop in step  3 when @xmath26 is equal to @xmath33 for some @xmath426 .",
    "we claim that this can not be the case since @xmath427 .",
    "indeed , since @xmath111 is a valid solution of the sc  instance , for every @xmath428 , the following holds : @xmath429 and thus @xmath33 can not be together with any other node in any equivalence class in @xmath248 .    algorithm  v solves adim@xmath142  with an approximation ratio of @xmath430 .",
    "fix any optimal solution @xmath431 . since @xmath432 , @xmath433 for some @xmath426 .",
    "consider the iteration of the * for *  loop in step  3 when @xmath26 is equal to @xmath33 .",
    "we now analyze the run of _ this particular iteration _ , and claim that the set - cover instance created during this iteration satisfies @xmath434 . to see this , construct the following solution of the set - cover instance from @xmath435 containing exactly @xmath367 sets : @xmath436 to see that this is indeed a valid solution of the set - cover instance , consider any @xmath437 .",
    "then , the following cases apply showing that @xmath438 belongs to some set selected in our solution of sc :    * if @xmath439 then @xmath440 and @xmath441 is a selected set in the solution . * if @xmath442 then @xmath443 .    using the approximation bound of the algorithm of",
    "@xcite it now follows that the quality of our solution @xmath444 satisfies @xmath445    algorithm  v runs in @xmath144 time .",
    "there are a total of @xmath23 instances of set cover that we need to build in step  3.1 and solve by the greedy heuristic in step  3.2.1 .",
    "building the set - cover instance can be trivially done in @xmath446 time by comparing @xmath25 for all appropriate pairs of nodes @xmath26 and @xmath27 .",
    "since the set - cover instance in step  3.1 has @xmath416 sets each having no more than @xmath416 elements , each implementation of the greedy heuristic in step  3.2.1 takes @xmath446 time .    *",
    "( b ) * let @xmath26 be the node of degree @xmath74 .",
    "let @xmath33 be the unique node adjacent to @xmath26 ( _ i.e. _ , @xmath447 ) .",
    "consider the following solution of adim@xmath139 : @xmath448 .",
    "we claim that is a valid solution of adim@xmath139  by showing that @xmath449 .",
    "consider any node @xmath450 , then , @xmath451 .",
    "illustration of the proof of theorem  [ k - one](c ) .",
    "edges marked by @xmath452 can not exist .",
    "no node in @xmath453 can have an edge to _ both _ @xmath26 and @xmath27 . ]    * ( c ) * since @xmath9 does not contain a @xmath146-cycle , @xmath454 .",
    "thus , there exists two nodes @xmath455 such that @xmath456 .",
    "let @xmath457 be a node at a distance of @xmath74 from both @xmath26 and @xmath27 on a shortest path between @xmath26 and @xmath27 ( see  fig .",
    "[ fig1 ] ) .",
    "consider the following solution of adim@xmath139 : @xmath458 .",
    "note that @xmath459 .",
    "we claim that this is a valid solution of adim@xmath139  by showing that @xmath449 ( _ i.e. _ , no node @xmath460 can belong together with @xmath33 in the same equivalence class of @xmath248 ) in the following manner :    * if @xmath461 then @xmath462 but @xmath463 since @xmath9 has no @xmath146-cycle ( see the edges marked @xmath452 in fig .",
    "[ fig1 ] ) . *",
    "if @xmath464 then @xmath465 but @xmath466 since @xmath9 has no @xmath146-cycle ( see the edges marked @xmath452 in fig .",
    "[ fig1 ] ) . *",
    "if @xmath467 then @xmath166 can not be adjacent to _ both _ @xmath26 and @xmath27 since @xmath9 does not contain a @xmath146-cycle .",
    "this implies that @xmath468 but at least one of @xmath469 and @xmath470 is not equal to @xmath74 . * if @xmath166 is any node not covered by the above cases , then @xmath471 but @xmath465 .",
    "prior to our work , known results for these privacy measures only included some heuristic algorithms with no provable guarantee on performances such as in  @xcite , or algorithms for very special cases .",
    "in fact , it was not even known if any version of these related computational problems is @xmath22-hard .",
    "our work provides the first non - trivial computational complexity results for effective computation of these measures .",
    "theorem  [ thm1 ] shows that both adim  and adim@xmath120  are _ provably _ computationally easier problems than adim@xmath126 .",
    "in contrast , theorem  [ k - large](a)(b ) and theorem  [ k - one ] show that adim@xmath126  is in general computationally hard but admits approximations or exact solution for specific choices of @xmath0 or graph topology .",
    "we believe that our results will stimulate further research on quantifying and computing privacy measures for networks .",
    "in particular , our results raise the following interesting research questions :    1 .",
    "we have only provided a logarithmic approximation algorithm for adim@xmath142 .",
    "is it possible to design a non - trivial approximation algorithm for adim@xmath126  for @xmath472 ?",
    "we conjecture that a @xmath473-approximation is possible for adim@xmath126for every fixed @xmath0 .",
    "we have provided a logarithmic inapproximability result for adim@xmath126  for every @xmath0 _ roughly _ up to @xmath474 .",
    "can this approximability result be further improved when @xmath0 is not a constant ?",
    "we conjecture that the inapproximability factor can be further improved to @xmath475 for some constant @xmath117 when @xmath0 is around @xmath474 .",
    "99 l. backstrom , c. dwork and j. kleinberg .",
    "_ wherefore art thou r3579x ? :",
    "anonymized social networks , hidden patterns , and structural steganography _ , proc .",
    "@xmath476 international conference on world wide web , 181 - 190 , new york , ny , usa , 2007 .",
    "s. mauw , r. trujillo - rasua and b. xuan .",
    "_ counteracting active attacks in social network graphs _ ,",
    "@xmath479 annual ifip wg 11.3 working conference on data and applications security and privacy , trento , italy , 2016 .",
    "m. netter , s. herbst and g. pernul .",
    "_ analyzing privacy in social networks  an interdisciplinary approach _ , ieee @xmath480 international conference on privacy , security , risk and trust and ieee @xmath480 international conference on social computing , 1327 - 1334 , 2011 .",
    "b. viswanath , m. mondal , k. p. gummadi , a. mislove and a. post .",
    "_ canal : scaling social network - based sybil tolerance schemes _ , proc .",
    "@xmath481 acm european conference on computer systems , 309 - 322 , new york , ny , usa , 2012 .",
    "x. wu , x. ying , k. liu and l. chen . _ a survey of privacy - preservation of graphs and social networks _ , in c. c. aggarwal and h. wang ( eds . ) , managing and mining graph data , vol .",
    "40 of advances in database systems , 421 - 453 .",
    "springer , 2010 ."
  ],
  "abstract_text": [
    "<S> with the arrival of modern internet era , large public networks of various types have come to existence to benefit the society as a whole and several research areas such as sociology , economics and geography in particular . however , the societal and research benefits of these networks have also given rise to potentially significant privacy issues in the sense that malicious entities may violate the privacy of the users of such a network by analyzing the network and deliberately using such privacy violations for deleterious purposes . </S>",
    "<S> such considerations have given rise to a new active research area that deals with the quantification of privacy of users in large networks and the corresponding investigation of computational complexity issues of computing such quantified privacy measures . </S>",
    "<S> in this paper , we formalize three such privacy measures for large networks and provide non - trivial theoretical computational complexity results for computing these measures . </S>",
    "<S> our results show the first two measures can be computed efficiently , whereas the third measure is provably hard to compute within a logarithmic approximation factor . </S>",
    "<S> furthermore , we also provide computational complexity results for the case when the privacy requirement of the network is severely restricted , including an efficient logarithmic approximation . </S>"
  ]
}