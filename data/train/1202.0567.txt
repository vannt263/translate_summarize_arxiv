{
  "article_text": [
    "in the spectrum of formality , from completely informal prose proofs intended for human readers , to proof scripts checkable by automated theorem provers or proof assistants , we propose a light level of formalism which we shall refer to as the _ flow _ level , in comparison to flow charts . at this level we formally register which assertions are said to follow from which others , thus capturing the inferential structure of the proof , without formalizing the assertions themselves , or demanding that the inferences be justifiable in any particular proof system .    proofs written in english muster their declarative statements and assumptions into an argument using a standard battery of words and phrases , such as _ so , therefore , by , then , hence , using , it follows that _ , etc .",
    "these words provide some indication as to which assertions are being used when others are inferred , but the information is usually incomplete .    for example , six assertions @xmath0 might so far have been made in an informal proof , at which point the author might write , `` therefore @xmath1 . ''",
    "the author will have it in mind that @xmath1 follows from @xmath2 , @xmath3 , and @xmath4 , say , and will expect the reader to see this as well , but will not make this information explicit .",
    "the word ` therefore ' really just says , `` at this point you have enough to infer @xmath1 .",
    "figure out how . ''    at the flow level of representation of proofs , we make this information complete and explicit . in the language of formal natural deduction systems , a claim that an assertion @xmath5 follows from assertions @xmath6 is called a _",
    "judgment _ , and may be written @xmath7 . in a flow - level formalization then , while the formalizer need not add any justification for any judgment over and above what is already present in the proof , the judgments themselves are to be made explicit .",
    "we show in section [ sec : lang ] how this is done in the proofflow language .",
    "the primary purpose of formalizing a proof in the proofflow system is to improve its comprehensibility .",
    "we provide software that will take a proof written in the proofflow language and produce a flow chart representation of it .",
    "the system is deployed through a wiki at proofflow.org .",
    "many _ argument mapping systems _ exist , and a long list can be found at @xcite . most of these , however , seem to cater to the needs of real - world arguments , while none seem to address the special demands of diagraming mathematical proof structure .",
    "moreover , it is suggested in @xcite that more sophisticated layout is needed in such systems , and new layout techniques are applied .",
    "the proofflow system could benefit from similar techniques .",
    "proofflow should aid comprehension of proofs in at least two ways : ( 1 ) readers are not left wondering which prior assertions should be used in inferring a given one .",
    "( 2 ) the diagram gives an overview of the proof .",
    "the reader can see at a glance how all the parts of the proof fit together , including how many times and where in the proof each assertion is used .",
    "in particular this should counteract the sensation often experienced on finishing a proof , that one has confirmed each separate inference well enough , but has lost the forest for the trees .    though the feature has not been implemented yet , in a future version of the system we plan to allow users to expand and collapse parts of proofs which authors have prepared as `` further clarifications '' .",
    "thus , a proof will be presented at an initial level of discourse , with some inferential gaps being perhaps quite large , while further information as to how these gaps are to be filled in may be held in reserve .",
    "if the user requested it , this information could be depicted by adding new nodes and directed edges to the diagram .",
    "expansion and collapse techniques were implemented in @xcite . in @xcite separation constraint techniques",
    "are discussed which allow smooth alteration of graphs , so that viewers mental models are not disturbed .",
    "in sections [ sec : diag ] and [ sec : lang ] we discuss the semantics of proofflow diagrams , and present the input language .",
    "we discuss our goals for the proofflow.org web site in section [ sec : website ] , and the possibility of data mining in section [ sec : dm ] .",
    "in a flow diagram for a proof , we put statements into boxes , and draw arrows connecting the boxes both in order to show the inferential structure of the proof , and in order to direct the reader through the proof from start to finish .",
    "see for example fig .",
    "[ fig : basicpfd ] .",
    "( the input for fig .",
    "[ fig : basicpfd ] is given in fig .",
    "[ fig : input ] , and will be explained in section [ sec : lang ] . )        .... i01 { s let $ x$ be an object } a02 { s some observation } a03 { s some consequence } c04 ( citation of some theorem ) e05 [ { s $ \\exists a \\in s$ such that }        { s $ a$ has this property }        { s and that property } ] a06 { s a consequence } a07 { s $ a = b$ } a08 { s $ = c$ } a09 { s $ = d$ } a10 { s $ a = d$ } a11 { s a supposition $ p$ } a12 { s a consequence } p13 { s a premise } a14 { s not $ p$ } a15 { s $ q(a)$ } a16 { s one case } a17 { s some consequence } a18 { l { s the common } { s conclusion } } a19 { s the other case } a20 { s a consequence } a21",
    "{ l { s another } { s consequence } } a22 { l { s the common } { s conclusion } } a23 { l { s the common } { s conclusion } } a24 { s what follows } a25 { s wolog } a26 { s the final result }    link (      i01 go a02",
    ". so a03 by c04 .",
    "now e05 . and a06 by p13 .",
    "now proof          a07 by a06 go a08 go a09      end",
    ".      so a10 .",
    "next suppose a11 .",
    "then a12 , then falsum , by a10 , a03 .",
    "then a15 by ? , e05_1",
    ".      now cases ,          case a19 . then a20 , so a21 , so a22 .",
    "now case a16 .",
    "then a17 , so a18 .      end .",
    "so a23 . then a24 using a25 .",
    "so a26 by a15 .      but ?",
    "by e05_2 . )",
    "....    beyond this we use a few additional graphical conventions , but overall the diagram semantics are quite simple .",
    "the set of _ graphemes _ , or the graphical vocabulary that we use , is very small : the boundaries of boxes may be solid or dashed , plain or bold ; the arrows between boxes may be solid or dashed .",
    "we explain the meanings of these different styles in the subsections below .",
    "we use the graphviz program dot to lay out and draw our diagrams , since they are really directed graphs .",
    "accordingly , we may discuss our diagrams , which we refer to as _ proofflow _",
    "diagrams , not just in terms of boxes and arrows , but also in terms of nodes ( or vertices ) and edges .",
    "apart from a few exceptions ( to be discussed in sections [ sec : c - nodes ] , [ sec : qf - nodes ] and [ sec : e - nodes ] ) , the text appearing on each node in a proofflow diagram must give either ( 1 ) a mathematical assertion , ( 2 ) the introduction of a mathematical object , ( 3 ) a premise from the statement of the theorem being proved , or ( 4 ) an assumption , to be discharged somewhere in the proof .",
    "for each of these possibilities we provide a special kind of node , whose boundary is drawn in a special way .",
    "assertions are the declarative statements that make up most of a proof .",
    "these appear on nodes with solid ( i.e. not dashed ) , plain ( i.e. not bold ) boundary , called assertion nodes , or a - nodes .",
    "statements defining or introducing objects into a proof will appear on nodes with a solid , bold boundary , called introduction nodes , or i - nodes .",
    "the bold boundary makes i - nodes easy to find , in case the viewer wants a reminder of the definition of an object .",
    "also we feel that since assertions have a truth value whereas definitions do not , it is only proper that assertions and introductions take place in nodes that look different .    here",
    "we introduce some technical terminology : typically a theorem statement will involve assumptions , and we refer to these as _ premises _ , whereas any additional assumptions employed during a proof , such as for proof by cases or proof by contradiction , will be called simply _",
    "assumptions_.    in proofflow diagrams we write all premises and assumptions inside boxes with dashed boundaries .",
    "in addition , the boundary is bold for a premise , and plain for an assumption .",
    "this makes premises and assumptions easily distinguishable from one another , so that viewers will not accidentally expect premises to be discharged .",
    "we hope that the convention is also intuitive : the dashed lines represent the contingent nature of all premises and assumptions , whereas the bold lines for premises represent their essential role in a theorem statement , as opposed to the transient nature of assumptions which will be discharged by the end of the proof .",
    "there is a special premise node , or p - node , for premises .",
    "there is no special node for assumptions .",
    "instead , they are made from a - nodes , and get their dashed boundary from the key word suppose , as explained in section [ sec : lang ] .      in order to represent a judgment",
    "@xmath7 we draw solid arrows , called _ deduction arrows _ , from the @xmath8 to @xmath5 .",
    "deduction arrows are visible in fig .",
    "[ fig : basicpfd ] .      when we read a prose proof we always know what objects have been introduced since they are defined before they are used , and we always know what assumptions are in force since they are stated before they are used .",
    "questions as to where in a proof objects or assumptions are in effect are questions of _",
    "scope_.    in a flow diagram for a proof we stand to find ourselves confused on matters of scope , since we throw away much of the linear order of the prose , and we are liable to view the nodes in the graph in the wrong order .",
    "in order to avoid this problem we employ what we call _ flow arrows _ in a proofflow diagram . a flow arrow from node @xmath9 to node @xmath5",
    "is drawn dashed rather than solid , and rather than saying that @xmath9 is used in deducing @xmath5 it simply says that after you have considered @xmath9 the author of the proof wants you to consider @xmath5 next .",
    "see fig .",
    "[ fig : basicpfd ] for examples .",
    "so that the proof has a starting point , we automatically include a single oval - shaped node reading `` proof , '' which points with a flow arrow toward the first node declared in the proof .",
    "( see section [ sec : lang ] on node declarations . )    in this way we ensure that the viewer is directed through a proofflow diagram in an appropriate order , so that he or she will not encounter a statement about an object @xmath10 without already having seen the definition of @xmath10 , and so that it will be clear which assumptions are in force at any given point .",
    "while in completely formal proofs , such as fitch - style proofs , both the beginning _ and the end _ of the scope of any assumption is made clear by means of clearly delimited subproofs , in general we get away without taking such care in prose proofs .",
    "the linear order of the discussion seems to suffice .",
    "flow arrows therefore should also suffice in proofflow diagrams .",
    "if not , formalizers may choose to put certain deduction chains into boxed subproofs .",
    "( see section [ sec : subproofs ] . )    formalizers and viewers of proofflow diagrams should follow these rules regarding the use of flow and deduction arrows :    1 .",
    "there should not be both a flow and a deduction arrow going from a node @xmath9 to a node @xmath5 ; in this case only the deduction arrow should be used ; the viewer will understand that it is to be followed .",
    "2 .   a single node @xmath9 might have a flow arrow to a node @xmath5 and deduction arrows to one or more other nodes @xmath11 . in this case",
    "the viewer should follow the flow arrow ; the deduction arrows will naturally come into consideration later in the proof .",
    "3 .   there should never be more than one flow arrow leaving a single node .",
    "4 .   in general",
    ", the viewer should never be left wondering where to go next .      when a theorem or lemma is cited in support of a claim",
    ", we put the name of the result in a special citation node , or c - node , and draw a deduction arrow from the c - node to the claim .",
    "the proofflow.org web site is still largely under construction , but when more infrastructure is in place then c - nodes will provide clickable links to the results that they name .",
    "when the contradiction is reached in a proof by contradiction , this should be shown in a proofflow diagram by deducing an a - node displaying only the falsum symbol , @xmath12 .",
    "we provide a convenient way to generate such a node , which we discuss in section [ sec : lang ] .    a formalizer may be unsure about certain parts of a proof , and in this case _ question nodes _ should be used .",
    "a question node is an a - node displaying only a question mark , and again we provide a convenient way to generate such a node , to be discussed in section [ sec : lang ] .    specifically , if the formalizer feels that a ( possibly empty ) set of nodes @xmath13 are used in inferring node @xmath5 , but that something more is also needed , though he or she is not sure what , then in addition to a deduction arrow from each @xmath8 to @xmath5 , there should also be a deduction arrow from a question node to @xmath5 .",
    "on the other hand , if the formalizer does not know where an assertion @xmath14 is used in a proof , but feels that it should be used somewhere , then there should be a deduction arrow from @xmath14 to a question node .",
    "care should be taken to maintain flow in this case ; in particular , it may be necessary to draw a flow arrow leaving the question node .",
    "see fig .",
    "[ fig : basicpfd ] for demonstration of both uses of question nodes .      in a highly formal proof ,",
    "it is one thing to say that an object of a certain kind exists , and it is another thing to introduce such an object .",
    "these form two separate steps in the proof . in informal proofs , however , these steps usually occur simultaneously , with the existence being stated explicitly , and the introduction of such an object being implicit .",
    "for example , the author of a proof in group theory might say that there exists a group homomorphism @xmath15 having certain properties , and in the next breath proceed to talk about @xmath15 . as the reader of the proof",
    "we understand that @xmath15 now refers to an arbitrary object of the kind just stated to exist .    in order to accurately model informal proofs ,",
    "we too combine these steps in proofflow diagrams . after drawing a node that states the existence of an object",
    ", the formalizer may then proceed immediately to draw nodes that discuss such an object .",
    "it is important however that later on in the proof we have a way to cite not just the existential statement itself , but also the individual statements of the properties of the existing object .",
    "for this reason we provide a special existence node , or e - node , with which to make the existence statement .",
    "( its syntax is described in section [ sec : lang ] . )",
    "let us consider for example the following three steps from the proof of theorem 90 in @xcite :    1 .",
    "@xmath16 an integer @xmath17 such that @xmath18 .",
    "2 .   define @xmath19 .",
    "3 .   @xmath20 .    in line 1",
    "we state the existence of an integer @xmath21 with a certain property , in line 2 we then go on to use such an integer @xmath21 to construct a number @xmath22 , and in line 3 we assert an equation involving @xmath22 .",
    "when we infer line 3 , we rely on the fact that @xmath18 , _ not _ on the _ existence _ of such an integer @xmath21 . therefore in a proofflow diagram",
    "we need to be able to draw an arrow not from a box around the existential statement , but from another box , around the statement that @xmath18 .",
    "e - nodes provide for this in proofflow diagrams .",
    "see example at bottom of fig .",
    "[ fig : basicpfd ] .      sometimes in an informal proof",
    "we make a claim , and then devote a special subproof to the support of this claim .",
    "such a subproof will be depicted in a proofflow diagram by surrounding all the nodes of the subproof within a box .",
    "deduction and flow arrows may be drawn from the surrounding box of a subproof to other nodes in the diagram .",
    "the box is also `` transparent '' in that it is still possible to draw arrows connecting the nodes inside to nodes outside the subproof .",
    "it is not possible to draw a deduction arrow _ to _ a subproof , since a subproof is not the sort of thing which , in its entirety , is to be supported by a reason !",
    "a flow arrow can however be drawn to a subproof .",
    "one particular type of subproof is proof by cases : we consider a series of assumptions @xmath23 in order , and show that under each assumption ( without any of the others ) we can reach one and the same conclusion @xmath14 .",
    "while we entertain the possibility of using special graphemes for proof by cases in the future , at present we simply depict each of the assumptions @xmath8 with a dashed boundary , as with any other assumption , and collect each of the @xmath24 deductions from @xmath8 to @xmath14 together inside a subproof box . see key words cases and case in section [ sec : lang ] for further details .",
    "relation chains are a common feature in informal proofs .",
    "these may be chains of equations , inequalities , subset relations , or other infix relations .",
    "such displays might have the following form : @xmath25    since each relation in the chain represents a separate assertion which may need to be justified or may be used in later justifications , there should be a separate box around each relation , in a proofflow diagram .    therefore we make the following graphical convention for relation chains : the first relation ( e.g. @xmath26 ) should go in a node @xmath2 , and subsequent relations ( e.g. @xmath27 , ... , @xmath28 ) should be written , starting with the relation symbol , in nodes @xmath29 .",
    "flow arrows should be used to link @xmath2 to @xmath30 , @xmath30 to @xmath31 , and so forth up to @xmath32 .",
    "see again fig .",
    "[ fig : basicpfd ] for an example .",
    "a label may be put along a deduction arrow in order to give some indication of the method of inference that is being used . at present",
    "we support only text , not graphical , edge labels .",
    "two important examples will be the labels `` by induction , '' and `` wolog '' or `` without loss of generality '' .",
    "formally speaking , `` wolog '' is really a way of saying , `` we re going to do proof by cases , but we re actually only going to discuss one of the cases , since all the others can be reduced to it . '' in a proofflow diagram , the assumption @xmath9 introduced `` without loss of generality '' should be led to by an arrow labeled `` wolog '' .",
    "the proofflow language is very simple . in an input file , the user first declares all nodes , giving them names and giving the text that should appear in them .",
    "the user then writes a paragraph called a _ proof script _ that links the nodes together by edges , labels edges if desired , makes nodes into assumptions as appropriate , and can put nodes into subproofs .",
    "see fig .",
    "[ fig : input ] for the input file that produced fig .",
    "[ fig : basicpfd ] .",
    "each node in a proofflow diagram gets a name , which may use only capital and lowercase letters , and digits .",
    "the first character must be one of the capital letters in the set , and this indicates what _ type _ of node it is .",
    "we review the different types of node below .",
    "recommended practice is to simply number the nodes in order of their use in the proof , so that the name of each node consists of an initial letter indicating its type , followed by a numeral .",
    "for example : i00 , a01 , a02 , a03 , c04 , e05 , and so forth .",
    "the text displayed on nodes is typeset using latex .",
    "since a node is a small rectangular box , we will often want the text to be laid out not as it would be on a page , but rather in short lines arranged in a left- center- or right - aligned column .",
    "the user may achieve this through standard latex commands , but we also provide convenient shortcut syntax for this purpose .",
    "text is placed inside a _ text object _ , which is delimited by braces \\ { } and which must begin either with a sequence of the letters to indicate that a table environment with left- center- and right - aligned columns is desired , or else with the letter s to indicate that no such formatting is desired .",
    "text objects may be nested to as great a depth as latex will accept .",
    "for example , the text object    ....       { l           { s $ k$ a number field , }           { s $ l$ its normalization . }       } ....    produces two left - aligned lines of text : @xmath33        the name of an assertion node must begin with an a. to declare an assertion node the user simply types the name of the node , followed by a text object giving the text that should appear on the node .",
    "for example :    ....       a01 { s $ a \\in k$ } ....      a citation node is used in order to cite a separate theorem or lemma .",
    "the name of a citation node must begin with a c. it takes a single argument given in parentheses ( ) , which gives the name of the result being cited , and within the context of the wiki at proofflow.org will also provide a hyperlink to a page devoted to that result .",
    "( as of the time of this writing , the hyperlink feature is not yet implemented . ) for example :    ....       c02 ( zahlbericht_thm_148 ) ....      recall from section [ sec : e - nodes ] that existence nodes achieve the special purpose of both stating the existence of an object or objects , and at the same time introducing those objects .",
    "an existence node must have a name beginning with an e. it takes a square - bracket - delimited sequence of text objects as its argument .",
    "for example :    ....    e03 [      { s $ \\exists$ an integer $ a \\in \\mathbb{z}$ such that }      { s $ \\psi(a ) \\neq 0$. }    ] ....    in general , if @xmath34 are the text objects passed to an existence node named e_name _",
    ", then @xmath35 should name a mathematical object and state its existence , while @xmath36 should state the properties of the object . in the above example",
    ", the two text objects    [ cols=\">,^ , < \" , ]     follow this rule . in order to refer to the individual text objects @xmath34 later",
    ", they are automatically assigned the names e_name__0 , e_name__1 , ... , e_name__@xmath24 . in our example , the assertion @xmath18 will appear in a boxed node that can be referenced as e03_1 .",
    "note however that whereas each of the two text objects @xmath35 , @xmath37 in our example will have a box around it so that it can play a role in the proof , we can not meanwhile cite the substatement of @xmath35 which says `` @xmath17 . ''",
    "this might be desirable , as a way of saying , `` here we are using the fact that @xmath21 is an integer . '' while at present there is no way to do this in the proofflow syntax , we hope to provide this feature in the future .",
    "an introduction node has a name beginning with i , and introduces new objects into the proof .",
    "it takes a single text object as argument .",
    "for example :    ....",
    "i04 { s let $ l$ be the normalization of $ k$. } ....      the name of a premise node begins with the letter p. it recalls one of the premises made in the statement of the theorem being proved .",
    "it takes a single text object as argument .",
    "for example :    ....       p05 { s $ n(a ) = 1 $ } ....      once all nodes have been declared it is time to link them together into a proof . to achieve this",
    "the user writes a paragraph in the proofflow linking language , which we call a _ proof script _ , and passes it to the link function , as in fig .  2 .",
    "the language uses only the names of the declared nodes together with the following key words ( words written on the same line are synonyms ) :    ....       so , then       by       go , next       now , and , but       suppose , case       proof , cases       end       using       ?",
    "falsum ....    white space is ignored , the key words are _ not _ case - sensitive , and the three punctuation symbols are also ignored . thus the paragraph may be organized into `` sentences '' if desired , although this is not necessary .",
    "see the example at the bottom of fig .",
    "[ fig : input ] .      by : key word by introduces supporting reasons .",
    "thus ,    ....          a0 by a1 a2 a3 ... ....    will cause deduction arrows to be drawn to node a0 from each of the nodes a1 , a2 , a3 , ....    in general the head of the deduction arrows will be the most recent node named .",
    "thus ,    ....          a0 by a1 by a2 ....    will yield two deduction arrows : one from a1 to a0 , and one from a2 to a1 .",
    "so , then : key word so ( and synonym then ) introduces logical consequences .",
    "thus ,    ....          a0 so a1 a2 a3 ... ....    will cause deduction arrows to be drawn from node a0 to nodes a1 , a2 , a3 , ....    in general the tail of the deduction arrows will be the most recent node that has been _ deduced _ ( not named as a supporting reason ) .",
    "thus ,    ....          a0 by a1 so a2 ....    will yield two deduction arrows : one from a1 to a0 , and one from a0 to a2 .",
    "go , next : key word go ( and synonym next ) introduces a flow arrow .",
    "thus ,    ....          a0 go a1 ....    draws a flow arrow from node a0 to node a1 . as with so and then , the tail of the flow arrow will be the most recent node that has been deduced .    now , and , but : key word now and its synonyms allow the user to introduce a node that is not connected to any of those already named .",
    "thus , if we have just shown that node a0 implies node a1 , say , and want to now start a separate chain of reasoning , in which node a2 will imply node a3 , we may write    ....          now a2 so a3 ....    suppose : if the key word suppose is placed before a node a1 then node a1 will be taken as an assumption , and will be given a dashed boundary .    proof and end : the key word proof starts a subproof , and the key word end ends it .",
    "everything inside the subproof will be drawn inside a box in the proofflow diagram .",
    "syntactically , the entire subproof can be used precisely as any node name is used , except that a subproof can not come after the so and then key words .",
    "( thus , a subproof can be a reason , but can not be a consequence . )    cases and case : the key word cases is meant to initiate a special kind of subproof , namely , a proof by cases .",
    "within such a subproof the key word case indicates the start of a new case . the entire subproof is terminated by the key word end .    in future versions of the system we may use more specialized graphical conventions to represent proof by cases , but for now cases is just a synonym for proof , and case is just a synonym for suppose .",
    "the user should not forget to put now ( or a synonym ) before each case after the first .    using : after a deduction arrow is introduced by either the so or by key words or their synonyms , the key word using will put a label on the arrow . the label for the arrow should have been declared in an assertion node , using plain text in the text object for the node , since the text will _ not _ be typeset by latex .",
    "falsum and ?",
    ": anywhere in the proof script where a node name may appear , the user may write falsum or ? , which will automatically generate a node featuring only a typeset ` @xmath12 ' or ` ? ' , respectively . as was discussed in section [ sec : qf - nodes ] , the former is for use in proof by contradiction , and the latter in case the author of the proof script is unsure how an inference is to be made .",
    "if it is clear , for example , that a1 and a2 were used in inferring a0 , but the formalizer thinks that something more still is needed , then a question node should be used , as in :    ....          a0 by a1 a2 ? ....    on the other hand , if an assertion a3 has been made in the proof , but the formalizer does not see where a3 is used , then a question node should be placed as the consequence of a3 , as in :    ....          a3",
    "....      a complete proof script might read something like the example at the bottom of fig .",
    "[ fig : input ] .",
    "the proofflow system is available in a wiki at proofflow.org , where we aim to build a catalog of proofs displayed in flow diagrams .",
    "the site is built on the mediawiki wiki engine , and the proofflow software is deployed via an extension to the wiki editor : proofflow input is to be placed inside a pair of , tags .            by formalizing the inferential structure of a proof as it is presented to human readers , we provide ourselves with a data set in which we can hope to discover patterns of reasoning at a tactical level on which mathematicians are accustomed to thinking .",
    "we might hope that mining for patterns at this level could reveal generalizations about writing proofs comparable to those that are often made about a tactical but enormously complex game like chess , where advice takes the form of statements such as `` control the center , '' `` activate your minor pieces early , '' etc .",
    "the prospects might be improved here if we were to concentrate on one area of mathematics at a time , say , algebraic number theory .",
    "perhaps we would learn generalizations about the kinds of objects that are often constructed in proofs under certain circumstances , for example .",
    "the possibilities for data mining could be improved if some semantic markup was added to the assertions stated on the nodes of the proof .",
    "of course when we ask users to add semantic markup we ask them to do more work than is necessary in order to see a nice diagram , and it is therefore reasonable to consider lightweight or easy markup systems that might be less off - putting than full formalization .",
    "one easy technique which could improve searchability of the database would be the mere indication of the _ type _ of each object named in the proof .",
    "thus , if @xmath38 is a number field , the user should say so ; if @xmath21 is an element of @xmath38 , the user should say so .",
    "even if we asked nothing more than this , searches through the text written on the nodes would be much more meaningful , since we would know what kinds of objects were being discussed .",
    "a markup scheme like this could be enforced by requiring that type arguments be passed to i - nodes .",
    "the diagram semantics employed in proofflow diagrams remain experimental .",
    "if enough proofs are formalized , and enough users comment on the comprehensibility of the diagrams , we will learn whether our graphical conventions work well or not .",
    "in particular we hope to answer the following questions : will proper use of flow arrows always make it clear which assumption is being negated in a proof by contradiction ? will proof by cases be clear ? while it is expected that in most real - world proofs the logic seldom gets terribly complex , will it be possible in exceptionally complex cases to use subproofs to organize a proofflow diagram so that the logic remains clear and unambiguous ?",
    "the highest priority in improving the system at present is to allow authors to include optional clarifications for inferential gaps , and viewers to show and hide the corresponding subgraphs , as discussed in section [ sec : intro ] . ideally , graph transformations might be performed as animations , using smooth graph redrawing techniques such as have been discussed in work such as @xcite , @xcite .",
    "overall the hope for proofflow.org is that it will provide users with a new way to read and understand proofs , and a collaborative environment in which the logic of proofs can be worked out , discussed , and elaborated upon .",
    "perhaps it can offer a new gateway into classic mathematical literature .",
    "in the future , depending on how much effort we put into the addition of semantic markup , we may mine the data in attempt to learn interesting tactical generalizations about proofs belonging to various areas of mathematics .",
    "p. sbarski , k. marriott , t. van gelder , d. prager and a. bulka . visualizing argument structure .",
    "4th international symposium on visual computing ( isvc08 ) .",
    "lecture notes in computer science , springer - verlag , berlin germany , pp .",
    "129 - 138 , 2008 ."
  ],
  "abstract_text": [
    "<S> we present a light formalism for proofs that encodes their inferential structure , along with a system that transforms these representations into flow - chart diagrams . </S>",
    "<S> such diagrams should improve the comprehensibility of proofs . </S>",
    "<S> we discuss language syntax , diagram semantics , and our goal of building a repository of diagrammatic representations of proofs from canonical mathematical literature . </S>",
    "<S> the repository will be available online in the form of a wiki at proofflow.org , where the flow chart drawing software will be deployable through the wiki editor . </S>",
    "<S> we also consider the possibility of a semantic tagging of the assertions in a proof , to permit data mining . </S>"
  ]
}