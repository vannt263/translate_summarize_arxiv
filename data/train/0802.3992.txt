{
  "article_text": [
    "we consider the problem of distributed consensus @xcite that has become recently very interesting especially in the context of ad hoc sensor networks . in particular , the problem of distributed average consensus has attracted a lot of research efforts due to its numerous applications in diverse areas .",
    "a few examples include distributed estimation @xcite , distributed compression @xcite , coordination of networks of autonomous agents @xcite and computation of averages and least - squares in a distributed fashion ( see e.g. , @xcite and references therein ) .    in general the main goal of distributed consensus",
    "is to reach a global solution using only local computation and communication while staying robust to changes in the network topology . given the initial values at the sensors , the problem of distributed averaging is to compute their average _ at each sensor _ using distributed linear iterations .",
    "each distributed iteration involves local communication among the sensors . in particular",
    ", each sensor updates its own local estimate of the average by a weighted linear combination of the corresponding estimates of its neighbors .",
    "the weights that are represented in a network weight matrix @xmath0 typically drive the importance of the measurements of the different neighbors .",
    "one of the important characteristics of the distributed consensus algorithms is the rate of convergence to the asymptotic solution . in many cases",
    ", the average consensus solution can be reached by successive multiplications of @xmath0 with the vector of initial sensor values .",
    "furthermore , it has been shown in @xcite that in the case of fixed network topology , the convergence rate depends on the second largest eigenvalue of @xmath0 , @xmath1 .",
    "in particular , the convergence is faster when the value of @xmath1 is small .",
    "similar convergence results have been proposed recently in the case of random network topology @xcite , where the convergence rate is governed by the expected value of the @xmath1 , @xmath2 $ ] .",
    "the main research direction so far focuses on the computation of the optimal weights @xmath0 that yield the fastest convergence rate to the consensus solution @xcite . in this work , we diverge from methods that are based on successive multiplications of @xmath0 , and we rather allow the sensors to use their previous estimates , in order to accelerate the convergence rate .",
    "this is similar in spirit to the works proposed @xcite that reach the consensus solution in a finite number of steps .",
    "they use respectively extrapolation methods and linear dynamical system formulation for fixed network topologies . in order to address more generic network topologies , we propose here to use a matrix polynomial @xmath3 applied on the weight matrix @xmath0 in order to shape its spectrum . given the fact that the convergence rate is driven by @xmath1 , it is therefore possible to impact on the convergence rate by careful design of the polynomial @xmath3 . in the implementation viewpoint , working with @xmath4 is equivalent to each sensor aggregating its value periodically using its own previous estimates .",
    "we further formulate the problem of the computation of the optimal coefficients for both static and dynamic network topologies .",
    "we show that this problem can be efficiently and globally solved in both cases by the definition of a semi - definite program ( sdp ) .",
    "the rest of this paper is organized as follows . in section [ sec : background ]",
    "we review the main convergence results of average consensus in both fixed and dynamic random network topologies .",
    "next , in section [ sec : polfilt ] we introduce the polynomial filtering methodology and discuss its implementation for distributed consensus problems .",
    "we compute the optimal polynomial filter in section [ sec : polopt ] for both static and dynamic network topologies . in section [ sec : experiments ] we provide simulation results that verify the validity and the effectiveness of our method .",
    "related work is finally presented in section [ sec : related ] .",
    "let us first define formally the problem of distributed consensus averaging .",
    "assume that initially each sensor @xmath5 reports a scalar value @xmath6 .",
    "we denote by @xmath7^\\top \\in \\mathbb{r}^n$ ] the vector of initial values on the network .",
    "denote by @xmath8 the average of the initial values of the sensors .",
    "however , one rarely has a complete view of the network .",
    "the problem of distributed averaging therefore becomes typically to compute @xmath9 _ at each sensor _ by distributed linear iterations . in what follows we review the main convergence results for distributed consensus algorithms on both fixed and random network topologies .",
    "we model the static network topology as an undirected graph @xmath10 with nodes @xmath11 corresponding to sensors .",
    "an edge @xmath12 is drawn if and only if sensor @xmath5 can communicate with sensor @xmath13 .",
    "we denote the set of neighbors for node @xmath5 as @xmath14 .",
    "unless otherwise stated , we assume that each graph is simple i.e. , no loops or multiple edges are allowed .    in this work ,",
    "we consider distributed linear iterations of the following form @xmath15 for @xmath16 , where @xmath17 represents the value computed by sensor @xmath13 at iteration @xmath18 .",
    "since the sensors communicate in each iteration @xmath18 , we assume that they are synchronized .",
    "the parameters @xmath19 denote the edge weights of @xmath20 . since each sensor communicates only with its direct neighbors , @xmath21 when @xmath22 .",
    "the above iteration can be compactly written in the following form @xmath23 or more generally @xmath24    we call the matrix @xmath0 that gathers the edge weights @xmath19 , as the weight matrix .",
    "note that @xmath0 is a sparse matrix whose sparsity pattern is driven by the network topology .",
    "we assume that @xmath0 is symmetric , and we denote its eigenvalue decomposition as @xmath25 .",
    "the ( real ) eigenvalues can further be arranged as follows : @xmath26    the distributed linear iteration given in eq . ( [ eq : distliniter2 ] ) converges to the average if and only if @xmath27 where @xmath28 is the vector of ones @xcite . indeed , notice that in this case @xmath29    it has been shown that for fixed network topology the convergence rate of eq .",
    "( [ eq : distliniter2 ] ) depends on the magnitude of the second largest eigenvalue @xmath1 @xcite .",
    "the asymptotic convergence factor is defined as @xmath30 and the per - step convergence factor is written as @xmath31    furthermore , it has been shown that the convergence rate relates to the spectrum of @xmath0 , as given by the following theorem @xcite .",
    "[ thm : convfixed ] the convergence given by eq .",
    "( [ eq : condw ] ) is guaranteed if and only if @xmath32 where @xmath33 denotes the spectral radius of a matrix .",
    "furthermore , @xmath34    according to the above theorem , @xmath35 is a left and right eigenvector of @xmath0 associated with the eigenvalue one , and the magnitude of all other eigenvalues is strictly less than one .",
    "note finally , that since @xmath0 is symmetric , the asymptotic convergence factor coincides with the per - step convergence factor , which implies that the relations ( [ eq : condasym ] ) and ( [ eq : condstep ] ) are equivalent .",
    "we give now an alternate proof of the above theorem that illustrates the importance of the second largest eigenvalue in the convergence rate .",
    "we expand the initial state vector @xmath36 to the orthogonal eigenbasis @xmath37 of @xmath0 ; that is , @xmath38 where @xmath39 and @xmath40 .",
    "we further assume that @xmath41 .",
    "then , eq . ( [ eq : x_t ] ) implies that @xmath42 observe now that if @xmath43 , then in the limit , the second term in the above equation decays and @xmath44    we see that the smaller the value of @xmath1 , the faster the convergence rate .",
    "analogous convergence results hold in the case of dynamic network topologies discussed next .",
    "let us consider now networks with random link failures , where the state of a link changes over the iterations .",
    "in particular , we use the random network model proposed in @xcite .",
    "we assume that the network at any arbitrary iteration @xmath18 is @xmath45 , where @xmath46 denotes the edge set at iteration @xmath18 , or equivalently at time instant @xmath18 . since the network is dynamic , the edge set changes over the iterations , as links fail at random .",
    "we assume that @xmath47 , where @xmath48 is the set of realizable edges when there is no link failure .",
    "we also assume that each link @xmath49 fails with a probability @xmath50 , independently of the other links .",
    "two random edge sets @xmath51 and @xmath52 at different iterations @xmath53 and @xmath54 are independent . the probability of forming a particular @xmath46 is thus given by @xmath55 .",
    "we define the matrix @xmath56 as @xmath57 the matrix @xmath56 is symmetric and its diagonal elements are zero , since it corresponds to a simple graph .",
    "it represents the probabilities of edge formation in the network , and the edge set @xmath46 is therefore a random subset of @xmath58 driven by the @xmath56 matrix .",
    "finally , the weight matrix @xmath0 becomes dependent on the edge set since only the weights of existing edges can take non zero values .    in the dynamic case , the distributed linear iteration of eq .",
    "( [ eq : distliniter1 ] ) becomes @xmath59 or in compact form , @xmath60 where @xmath61 denotes the weight matrix corresponding to the graph realization @xmath62 of iteration @xmath18 .",
    "the iterative relation given by eq .",
    "( [ eq : distliniter2dyn ] ) can be written as @xmath63 clearly , @xmath64 now represents a stochastic process since the edges are drawn randomly .",
    "the convergence rate to the consensus solution therefore depends on the behavior of the product @xmath65 .",
    "we say that the algorithm converges if @xmath66    we review now some convergence results from @xcite , which first shows that    for any @xmath67 , @xmath68    it leads to the following convergence theorem @xcite for dynamic networks .",
    "[ thm : convdyn ] if @xmath69 < 1 $ ] , the vector sequence @xmath70 converges in the sense of eq .",
    "( [ eq : mss ] ) .",
    "we define the convergence factor in dynamic network topologies as @xmath71 .",
    "\\label{eq : mssconvfactor}\\ ] ] this factor depends in general on the spectral properties of the induced network matrix and drives the convergence rate of eq .",
    "( [ eq : distliniter2dyn ] ) .",
    "the authors in @xcite show that @xmath72)| < 1 $ ] is also a necessary and sufficient condition for asymptotic ( almost sure ) convergence of the consensus algorithm in the case of random networks , where both network topology and weights are random ( in particular i.i.d and independent over time ) .",
    "finally , it is interesting to note that the consensus problem in a random network relates to gossip algorithms . distributed averaging under the synchronous gossip constraint implies that multiple node pairs may communicate simultaneously only if these node pairs are disjoint . in other words ,",
    "the set of links implied by the active node pairs forms a matching of the graph .",
    "therefore , the distributed averaging problem described above is closely related to the distributed synchronous algorithm under the gossip constraint that has been proposed in ( * ? ? ?",
    "it has been shown in this case that the averaging time ( or convergence rate ) of a gossip algorithm depends on the second largest eigenvalue of a doubly stochastic network matrix .",
    "as we have seen above , the convergence rate of the distributed consensus algorithms depends in general on the spectral properties of an induced network matrix .",
    "this is the case for both fixed and random network topologies .",
    "most of the research work has been devoted to finding weight matrix @xmath0 for accelerating the convergence to the consensus solution when sensors only use their current estimates .",
    "we choose a different approach where we exploit the memory of sensors , or the values of previous estimates in order to augment to convergence rate .",
    "therefore , we have proposed in our previous work @xcite the scalar epsilon algorithm ( sea ) for accelerating the convergence rate to the consensus solution .",
    "sea belongs to the family of extrapolation methods for accelerating vector sequences , such as eq .",
    "( [ eq : distliniter2 ] ) .",
    "these methods exploit the fact that the fixed point of the sequence belongs to the subspace spanned by any @xmath73 consecutive terms of it , where @xmath74 is the degree of the minimal polynomial of the sequence generator matrix ( for more details , see @xcite and references therein ) .",
    "sea is a low complexity algorithm , which is ideal for sensor networks and it is known to reach the consensus solution in @xmath75 steps .",
    "however , @xmath74 is unknown in practice , so one may use all the available terms of the vector sequence . hence , the memory requirements of sea are @xmath76 , where @xmath77 is the number of terms .",
    "moreover , sea assumes that the sequence generator matrix ( e.g. , @xmath0 in the case of eq .",
    "( [ eq : distliniter2 ] ) ) is fixed , so that it does not adapt easily to dynamic network topologies .    in this paper",
    ", we propose a more flexible algorithm based on the polynomial filtering technique .",
    "polynomial filtering permits to",
    " shape \" the spectrum of a certain symmetric weight matrix , in order to accelerate the convergence to the consensus solution . similarly to sea",
    ", it allows the sensors to use the value of their previous estimates .",
    "however , the polynomial filtering methodology introduced below presents three main advantages : ( i ) it is robust to dynamic topologies ( ii ) it has explicit control on the convergence rate and ( iii ) its memory requirements can be adjusted to the memory constraints imposed by the sensor .",
    "starting from a given ( possibly optimal ) weight matrix @xmath0 , we propose the application of a polynomial filter on the spectrum of @xmath0 in order to impact the magnitude of @xmath1 that mainly drives the convergence rate .",
    "denote by @xmath78 the polynomial filter of degree @xmath79 that is applied on the spectrum of @xmath0 , @xmath80 accordingly , the matrix polynomial is given as @xmath81 observe now that @xmath82 which implies that the eigenvalues of @xmath83 are simply the polynomial filtered eigenvalues of @xmath0 i.e. , @xmath84 .",
    "in the implementation level , working on @xmath83 implies a periodic update of the current sensor s value with a linear combination of its previous values . to see why this is true",
    ", we observe that : @xmath85 a careful design of @xmath86 may impact the convergence rate dramatically .",
    "then , each sensor typically applies polynomial filtering for distributed consensus by following the main steps tabulated in algorithm [ algo : pfconsensus ] .",
    "[ 1 ] * input * : polynomial coefficients @xmath87 , tolerance @xmath88 . *",
    "output * : average estimate @xmath89 .",
    "* initialization * : @xmath90 .",
    "set the iteration index @xmath91 .",
    "@xmath92 @xmath93 .",
    "@xmath94 . increase the iteration index @xmath95 .",
    "@xmath96 .    note that , for both fixed and random network topology cases , the @xmath97 s are computed off - line assuming that @xmath0 and respectively @xmath98 $ ] are known a priori . in",
    "what follows , we propose different approaches for computing the coefficients @xmath99 of the filter @xmath86 .",
    "one simple and rather intuitive approach for the design of the polynomial @xmath78 is to use hermite interpolation .",
    "recall that the objective is to dampen the smallest eigenvalues @xmath100 of @xmath0 , while keeping the eigenvalue one intact .",
    "therefore , we assume that the spectrum of @xmath0 lies in an interval @xmath101 $ ] and we impose smoothness constraints of @xmath86 at the left endpoint @xmath102 .",
    "in particular , the polynomial @xmath103 \\rightarrow \\mathbb{r}$ ] that we seek , will be determined by the following constraints : @xmath104 where @xmath105 denotes the @xmath5-th derivative of @xmath78 evaluated at @xmath102 .",
    "the dampening is achieved by imposing smoothness constraints of the polynomial on the left endpoint of the interval .",
    "the computed polynomial will have degree equal to @xmath79 .",
    "finally , the coefficients of @xmath86 that satisfies the above constraints can be computed by the newton s divided differences table .",
    "figure [ fig : newtonpol ] shows the form of @xmath78 for @xmath106 and different values of the degree @xmath79 . as @xmath79 increases",
    ", the dampening of the small eigenvalues becomes more effective .",
    "it is worth mentioning that the design of newton s polynomial does not depend on the network size or the size of the weight matrix @xmath0 .",
    "what is only needed is a left endpoint @xmath102 , which encloses the spectrum of @xmath0 , as well as the desired degree @xmath79 , which moreover may be imposed by memory constraints .",
    "this feature of newton s polynomial is very interesting and it is particularly appealing in the case of dynamic network topologies .",
    "however , the above polynomial design is mostly driven by intuitive arguments , which tend to obtain small eigenvalues for faster convergence . in the following section , we provide an alternative technique for computing the polynomial filter that optimizes the convergence rate .",
    "we are now interested in finding the polynomial that leads to the fastest convergence of linear iteration described in eq .",
    "( [ eq : distliniter2 ] ) , for a given weight matrix @xmath0 and a certain degree @xmath79 . for notational",
    "ease , we call @xmath107 . according to theorem [ thm : convfixed ] ,",
    "the optimal polynomial is the one that minimizes the second largest eigenvalue of @xmath108 , i.e. , @xmath109 .",
    "therefore , we need to solve an optimization problem where the optimization variables are the @xmath110 polynomial coefficients @xmath111 and the objective function is the spectral radius of @xmath112 .",
    "interestingly , the optimization problem opt1 is convex .",
    "first , its objective function is convex , as stated in lemma [ lemma : objfunconvexity ] .",
    "[ lemma : objfunconvexity ] for a given symmetric weight matrix @xmath0 and degree @xmath79 , @xmath113 is a convex function of the polynomial coefficients @xmath99 s .",
    "_ proof _ : let @xmath114 and @xmath115 .",
    "since @xmath0 is symmetric , @xmath116 is also symmetric .",
    "hence , the spectral radius is equal to the matrix 2-norm",
    ". thus , we have @xmath117 which proves the lemma . in addition , the constraint of opt1 is linear which implies that the set of feasible @xmath99 s is convex .",
    "as opt1 minimizes a convex function over a convex set , the optimization problem is indeed convex .    in order to solve opt1",
    ", we use an auxiliary variable @xmath118 to bound the objective function , and then we express the spectral radius constraint as a linear matrix inequality ( lmi ) .",
    "thus , we need to solve the following optimization problem .    recall that since @xmath0 is symmetric , @xmath119 will be symmetric as well .",
    "hence , the constraint @xmath120 is sufficient to ensure that @xmath28 will be also a left eigenvector of @xmath108 .",
    "the spectral radius constraint , @xmath121 ensures that that all the eigenvalues of @xmath108 other than the first one , are less or equal to @xmath118 . due to the lmi ,",
    "the above optimization problem becomes equivalent to a semi - definite program ( sdp ) @xcite .",
    "sdps are convex problems and can be globally and efficiently solved .",
    "the solution to opt2 is therefore computed efficiently in practice , where the sdp only has a moderate number of @xmath122 unknowns ( including @xmath118 ) .",
    "we extend now the idea of polynomial filtering to dynamic network topologies .",
    "theorem [ thm : convdyn ] suggests that the convergence rate in the random network topology case is governed by @xmath123 $ ] .",
    "since @xmath0 depends on a dynamic edge set , @xmath83 now becomes stochastic .",
    "following the same intuition as above , we could form an optimization problem , similar to opt1 , whose objective function would be @xmath124 $ ] . although this objective function can be shown to be convex , its evaluation is hard and typically requires several monte carlo simulations steps .",
    "recall that the convergence rate of eq .",
    "( [ eq : distliniter2dyn ] ) is related to the second largest eigenvalue of @xmath125 $ ] , which is much easier to evaluate .",
    "let @xmath126 denote the average weight matrix @xmath125 $ ] .",
    "we then observe that @xmath127 \\geq \\rho \\big(\\overline{w } - \\frac{\\textbf{1 } \\textbf{1}^\\top}{n } \\big),\\ ] ] which is due to lemma [ lemma : objfunconvexity ] and jensen s inequality .",
    "the above inequality implies that the spectral radius @xmath128 shall be small in order @xmath129 $ ] to be small too .",
    "additionally , the authors provide experimental evidence in @xcite , which indicates that @xmath130 seems to be closely related to the convergence rate of eq .",
    "( [ eq : distliniter2dyn ] ) .",
    "based on the above facts , we propose to build our polynomial filter based on @xmath126 .",
    "hence , we formulate the following optimization problem for computing the polynomial coefficients @xmath99 s in the random network topology case .",
    "opt3 could be viewed as the analog of opt1 for the case of dynamic network topology .",
    "the main difference is that we work on @xmath126 , whose eigenvalues can be easily obtained . using again the auxiliary variable @xmath118 , we reach the following formulation for obtaining the @xmath99 s .",
    "once @xmath126 has been computed , this optimization problem is solved efficiently by a sdp similarly to the case of static networks .",
    "in this section , we provide simulation results which show the effectiveness of the polynomial filtering methodology .",
    "first we introduce a few weight matrices that have been extensively used in the distributed averaging literature .",
    "suppose that @xmath131 denotes the degree of the @xmath5-th sensor .",
    "it has been shown in @xcite that iterating eq .",
    "( [ eq : distliniter2 ] ) with the following matrices leads to convergence to @xmath132 .    * _ maximum - degree _ weights .",
    "the maximum - degree weight matrix is @xmath133 * _ metropolis _ weights .",
    "the metropolis weight matrix is @xmath134 * _ laplacian _ weights .",
    "suppose that @xmath135 is the adjacency matrix of @xmath20 and @xmath136 is a diagonal matrix which holds the vertex degrees .",
    "the laplacian matrix is defined as @xmath137 and the laplacian weight matrix is defined as @xmath138 where the scalar @xmath139 must satisfy @xmath140 @xcite .",
    "the sensor networks are built using the random geographic graph model @xcite .",
    "in particular , we place @xmath141 nodes uniformly distributed on the 2-dimensional unit area .",
    "two nodes are adjacent if their euclidean distance is smaller than @xmath142 in order to guarantee connectedness of the graph with high probability @xcite .    finally , the sdp programs for optimizing the polynomial filters are solved in matlab using the sedumi @xcite solver .",
    "we illustrate first the effect of polynomial filtering on the spectrum of @xmath0 .",
    "we build a network of @xmath143 sensors and we apply polynomial filtering on the maximum - degree weight matrix @xmath0 , given in ( [ eq : maxdeg ] ) .",
    "we use @xmath144 and we solve the optimization problem opt2 using the maximum - degree matrix @xmath0 as input .",
    "figure [ fig : polfiltmaxdeg ] shows the obtained polynomial filter @xmath78 , when @xmath145 $ ] .",
    "next , we apply the polynomial on @xmath0 and figure [ fig : eigsmaxdeg ] shows the spectrum of @xmath0 before ( star - solid line ) and after ( circle - solid line ) polynomial filtering , versus the vector index .",
    "observe that polynomial filtering dramatically increases the spectral gap @xmath146 , which further leads to accelerating the distributed consensus , as we show in the simulations that follow .",
    "then we compare the performance of the different distributed consensus algorithms , with all the aforementioned weight matrices ; that is , maximum - degree , metropolis and laplacian weight matrices for distributed averaging .",
    "we compare both newton s polynomial and the sdp polynomial ( obtained from the solution of opt2 ) with the standard iterative method , which is based on successive iterations of eq .",
    "( [ eq : distliniter2 ] ) . for the sake of completeness",
    ", we also provide the results of the scalar epsilon algorithm ( sea ) that uses all previous estimates @xcite .",
    "first , we explore the behavior of polynomial filtering methods under variable degree @xmath79 from 2 to 6 with step 2 .",
    "we use the laplacian weight matrix for this experiment .",
    "figures [ fig : exper6sdp ] and [ fig : exper6herm ] illustrate the evolution of the absolute error @xmath147 versus the iteration index @xmath18 , for polynomial filtering with sdp and newton s polynomials respectively .",
    "we also provide the curve of the standard iterative method as a baseline .",
    "observe first that both polynomial filtering methods outperform the standard method by exhibiting faster convergence rates , across all values of @xmath79 .",
    "notice also , that the degree @xmath79 governs the convergence rate , since larger @xmath79 implies more effective filtering and therefore faster convergence . finally , the stagnation of the convergence process of the sdp polynomial filtering and large values of @xmath79 is due to the limited accuracy of the sdp solver .",
    "next , we show the results obtained with the other two weight matrices on the same sensor network",
    ". figures [ fig : exper1maxdeg ] and [ fig : exper1metr ] show the convergence behavior of all methods for the maximum - degree and metropolis matrices respectively . in both polynomial filtering methods we use a representative value of @xmath79 , namely 4 .",
    "notice again that polynomial filtering accelerates the convergence of the standard iterative method ( solid line ) .",
    "as expected , the optimal polynomial computed with sdp outperforms newton s polynomial , which is based on intuitive arguments only .",
    "finally , we can see from figures [ fig : fixedtopologyvariablek ] and [ fig : fixedtopology ] that in some cases the convergence rate is comparable for sea and sdp polynomial filtering .",
    "note however that the former uses all previous iterates , in contrast to the latter that uses only the @xmath110 most recent ones .",
    "hence , the memory requirements are smaller for polynomial filtering , since they are directly driven by @xmath79 .",
    "this moreover allows more direct control on the convergence rate , as we have seen in fig .",
    "[ fig : fixedtopologyvariablek ] .",
    "interestingly , we see that the convergence process is smoother with polynomial filtering , which further permits easy extension to dynamic network topologies .",
    "we study now the performance of polynomial filtering for dynamic networks topologies .",
    "we build a sequence of random networks of @xmath143 sensors , and we assume that in each iteration the network topology changes independently from the previous iterations , with probability @xmath148 and with probability @xmath149 it remains the same as in the previous iteration .",
    "we compare all methods for different values of the probability @xmath148 .",
    "we use the laplacian weight matrix ( [ eq : lapweight ] ) . in the sdp polynomial filtering method",
    ", we solve the sdp program opt4 ( see sec .",
    "[ sec : pfrandomtopology ] ) .",
    "[ fig : randomtopology ] shows the average performance of polynomial filtering for some representative values of the degree @xmath79 and the probability @xmath148 .",
    "the average performance is computed using the median over the 100 experiments .",
    "we have not reported the performance of the sea algorithm , since it is not robust to changes of the network topology .",
    "notice that when @xmath150 ( i.e. , each sensor uses only its current value and the right previous one ) polynomial filtering accelerates the convergence over the standard method . at the same time",
    ", it stays robust to network topology changes .",
    "also , observe that in this case , the sdp polynomial outperforms newton s polynomial .",
    "however , when @xmath151 , the roles between the two polynomial filtering methods change as the probability @xmath148 increases .",
    "for instance , when @xmath152 , the sdp method even diverges .",
    "this is expected if we think that the coefficients of newton s polynomial are computed using hermite interpolation in a given interval and they do not depend on the specific realization of the underlying weight matrix .",
    "thus , they are more generic than those of the sdp polynomial that takes @xmath126 into account , and therefore less sensitive to the actual topology realization . algorithms based on optimal polynomial",
    "filtering become inefficient in a highly dynamic network , whose topology changes very frequently .",
    "several works have studied the convergence rate of distributed consensus algorithms . in particular , the authors in @xcite and @xcite have shown that the convergence rate depends on the second largest eigenvalue of the network weight matrix , for fixed and random networks , respectively .",
    "they both use semi - definite programs to compute the optimal weight matrix , and the optimal topology .",
    "other works have addressed the consensus problem , and we mention here only the most relevant ones .",
    "a. olshevsky and j. n. tsitsiklis in @xcite propose two consensus algorithms for fixed network topologies , which build on the  agreement algorithm \" .",
    "the proposed algorithms make use of spanning trees and the authors bound their worst - case convergence rate . for dynamic network topologies",
    ", they propose an algorithm which builds on a previously known distributed load balancing algorithm . in this case , the authors show that the algorithm has a polynomial bound on the convergence time ( @xmath88-convergence ) .",
    "the authors in @xcite study the convergence properties of agreement over random networks following the erds and rnyi random graph model . according to this model , each edge of the graph exists with probability @xmath3 , independently of other edges and",
    "the value of @xmath3 is the same for all edges . by agreement",
    ", we consider the case where all nodes of the graph agree on a particular value .",
    "the authors employ results from stochastic stability in order to establish convergence of agreement over random networks .",
    "also , it is shown that the rate of convergence is governed by the expectation of an exponential factor , which involves the second smallest eigenvalue of the laplacian of the graph .",
    "gossip algorithms have also been applied successfully to solving distributed averaging problems . in @xcite provide convergence results on randomized gossip algorithm in both synchronous and asynchronous settings .",
    "based on the obtained results , they optimize the network topology ( edge formation probabilities ) in order to maximize the convergence rate of randomized gossip . this optimization problem is also formulated as a semi - definite program ( sdp ) . in a recent study ,",
    "the authors in @xcite have been able to improve the standard gossip protocols in cases where the sensors know their geometric positions .",
    "the main idea is to exploit geographic routing in order to aggregate values among random nodes that are far away in the network .    under the same assumption of knowing the geometric positions of the sensors , the authors in @xcite propose a fast consensus algorithm for geographic random graphs . in particular , they utilize location information of the sensors in order to construct a nonreversible lifted markov chain that mixes faster than corresponding reversible chains .",
    "the main idea of lifting is to distinguish the graph nodes from the states of the markov chain and to  split \" the states into virtual states that are connected in such a way that permits faster mixing .",
    "the lifted graph is then  projected \" back to the original graph , where the dynamics of the lifted markov chain are simulated subject to the original graph topology .",
    "however , the proposed algorithm is not applicable in the case where the nodes geographic location is not available .",
    "in @xcite the authors propose a cluster - based distributed averaging algorithm , applicable to both fixed linear iteration and random gossiping .",
    "the induced overlay graph that is constructed by clustering the nodes is better connected relatively to the original graph ; hence , the random walk on the overlay graph mixes faster than the corresponding walk on the original graph . along the same lines ,",
    "k. jung et al . in @xcite , have used nonreversible lifted markov chains to accelerate consensus .",
    "they use the lifting scheme of @xcite and they propose a deterministic gossip algorithm based on a set of disjoint maximal matchings , in order to simulate the dynamics of the lifted markov chain .    finally , even if we have mostly considered synchronous algorithms in this paper , it is worth mentioning that the authors in @xcite propose two asynchronous algorithms for distributed averaging .",
    "the first algorithm is based on blocking ( that is , when two nodes update their values they block until the update has been completed ) and the other algorithm drops the blocking assumption .",
    "the authors show the convergence of both algorithms under very general asynchronous timing assumptions .",
    "moreover , the authors in @xcite propose _ consensus propagation _",
    ", which is an asynchronous distributed protocol that is a special case of belief propagation . in the case of singly - connected graphs ( i.e. , connected with no loops )",
    ", synchronous consensus propagation converges in a number of iterations that is equal to the diameter of the graph .",
    "the authors provide convergence analysis for regular graphs .",
    "in this paper , we proposed a polynomial filtering methodology in order to accelerate distributed average consensus in both fixed and random network topologies .",
    "the main idea of polynomial filtering is to shape the spectrum of the polynomial weight matrix in order to minimize its second largest eigenvalue and subsequently increase the convergence rate .",
    "we have constructed semi - definite programs to compute the optimal polynomial coefficients in both static and dynamic networks .",
    "simulation results with several common weight matrices have shown that the convergence rate is much higher than for state - of - the - art algorithms in most scenarios , except in the specific case of highly dynamic networks and small memory sensors .",
    "the first author would like to thank prof .",
    "yousef saad for the valuable and insightful discussions on polynomial filtering .",
    "i.  d. schizas , a.  ribeiro , and g.  b. giannakis , `` consensus in ad hoc wsns with noisy links - part i : distributed estimation of deterministic signals , '' _ ieee transactions on singal processing _ ,",
    "56 , no .  1 ,",
    "350364 , january 2008 .",
    "m.  rabbat , j.  haupt , a.  singh , and r.  nowak , `` decentralized compression and predistribution via randomized gossiping , '' _",
    "5th acm int . conf . on information processing in sensor networks ( ipsn )",
    "_ , pp . 51  59 , april 2006 .    v.  d. blondel , j.  m. hendrickx , a.  olshevsky , and j.  n. tsitsiklis , `` convergence in multiagent coordination , consensus and flocking , '' _ ieee conf . on decision and control , and the european control conference",
    ", pp . 29963000 , december 2005 .",
    "l.  xiao , s.  boyd , and s.  lall , `` a scheme for robust distributed sensor fusion based on average consensus , '' _ int .",
    "conf . on information processing in sensor networks _ , pp .",
    "6370 , april 2005 , los angeles .",
    "s.  sundaram and c.  n. hadjicostis , `` distributed consensus and linear functional calculation in networks : an observability perspective , '' _",
    "6th acm int . conf . on information processing in sensor networks ( ipsn )",
    "_ , april 25 - 27 2007 .",
    "j.  f. sturm , `` implementation of interior point methods for mixed semidefinite and second order cone optimization problems , '' _ econpapers 73 _ , august 2002 , tilburg university , center for economic research .",
    "m.  mehyar , d.  spanos , j.  pongsajapan , s.  h. low , and r.  m. murray , `` asynchronous distributed averaging on communication networks , '' _ ieee / acm transactions on networking _ , vol .",
    "15 , no .  3 , pp .",
    "512520 , june 2007 ."
  ],
  "abstract_text": [
    "<S> in the past few years , the problem of distributed consensus has received a lot of attention , particularly in the framework of ad hoc sensor networks . </S>",
    "<S> most methods proposed in the literature address the consensus averaging problem by distributed linear iterative algorithms , with asymptotic convergence of the consensus solution . </S>",
    "<S> the convergence rate of such distributed algorithms typically depends on the network topology and the weights given to the edges between neighboring sensors , as described by the network matrix . in this paper </S>",
    "<S> , we propose to accelerate the convergence rate for given network matrices by the use of polynomial filtering algorithms . </S>",
    "<S> the main idea of the proposed methodology is to apply a polynomial filter on the network matrix that will shape its spectrum in order to increase the convergence rate . </S>",
    "<S> such an algorithm is equivalent to periodic updates in each of the sensors by aggregating a few of its previous estimates . </S>",
    "<S> we formulate the computation of the coefficients of the optimal polynomial as a semi - definite program that can be efficiently and globally solved for both static and dynamic network topologies . </S>",
    "<S> we finally provide simulation results that demonstrate the effectiveness of the proposed solutions in accelerating the convergence of distributed consensus averaging problems . </S>"
  ]
}