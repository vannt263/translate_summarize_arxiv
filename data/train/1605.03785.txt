{
  "article_text": [
    "a set of codewords is _ fix - free _ ( sometimes called _ affix code _ , _ biprefix code _ or _ never - self - synchronizing code _ ) if it is both prefix - free and suffix - free : no codeword in the set is a prefix or a suffix of any other . in a fix - free code",
    ", any finite sequence of codewords can be decoded in both directions , thus reducing the decoding time and error propagation .",
    "this kind of variable - length codes , introduced six decades ago by schtzenberger @xcite and by gilbert and moore @xcite , have several applications , for example they have been recently used in certain international video compression standards for robustness to channel errors @xcite .    a string @xmath0 over a finite alphabet @xmath1 is called _ bifix - free _ ( or equivalently _ unbordered _ or _ self non - overlapping _ ) if it does not contain proper prefixes which are also proper suffixes .",
    "in other words , a string @xmath2 is bifix - free if it can not be factorized as @xmath3 with @xmath4 and @xmath5 , denoting by @xmath6 the set of all finite strings over @xmath1 and by @xmath7 the subset of @xmath6 excluding the _",
    "empty string_.    nielsen in @xcite provided the set @xmath8 of all @xmath9-length bifix - free strings by means of a recursive construction .",
    "more recently , several researches @xcite have been conducted in order to define particular subsets of @xmath10 constituted by _ cross - bifix - free _ ( or _ non - overlapping _ ) strings : two @xmath9-length strings @xmath11 are called cross - bifix - free if any non - empty proper prefix of @xmath0 is different from any non - empty proper suffix of @xmath12 , and vice versa .",
    "a set of @xmath9-length strings over a given alphabet is said to be a cross - bifix - free set ( also known as _ cross - bifix - free code _ or _ non - overlapping code _ ) if and only if any two elements in the set are cross - bifix - free .",
    "cross - bifix - free codes are involved in the study of frame synchronization @xcite which is an essential requirement in a digital communication systems to establish and maintain a connection between a transmitter and a receiver . in particular , this kind of codes have the strong property that an error in a codeword or in a state of a certain decoding automaton does not propagate into incorrect decoding of subsequent codewords .    the problem of determining such sets is also related to several other scientific applications , for instance , in the theory of formal languages for the generation and the enumeration of particular binary words avoiding a set of given factors @xcite , and in the dna - based storage systems for the characterization of dna mutually uncorrelated codes @xcite .    in this paper , we are interested in the study of a set of codewords which can be seen an extension of cross - bifix - free and fix - free codes . since the theory of such codes are widely used in several fields of applications , we are expected that the present extension could have the same usefulness and it could constitute a starting point for a fruitful and intriguing theory . to achieve this purpose",
    ", we have to extend the concept of cross - bifix - free set to strings having not necessarily the same length , taking into account that no string in the set is a prefix or a suffix of any other .    in the next section",
    "we define a set of codewords over a binary alphabet satisfying such constraints . in section 3",
    "we analyze its cardinality considering some similarities with the well - known _",
    "@xmath13-generalized fibonacci numbers _ and we give a rational generating function for the enumeration of our set according to the length of its codewords . in section 4",
    "we generalize the study to codes having greater cardinality than the above one , and we determine a code , by using the well - known _ dyck words _ , having the property to be non - expandable .",
    "we introduce the following definition which is based on the natural extension of the notion of cross - bifix - free or non - overlapping strings to strings having variable - length .",
    "[ defcode ] a variable - length code is said to be a _ cross - fix - free code _ or _",
    "variable - length non - overlapping code _ if and only if for any two codewords in the set no ( non - empty ) prefix of the first one is a suffix of the second one , and vice versa .    please notice that in the above definition if the prefix of a codeword coincides exclusively with the codeword itself , then the resulting code is fix - free .",
    "+ in order to construct one among all of the possible cross - fix - free sets over a binary alphabet , we first consider the following set of @xmath9-length strings .        in other words , for any fixed @xmath13 , the set @xmath15 contains the @xmath9-length binary strings starting with a prefix of @xmath13 consecutive 1 s ( denoted by @xmath20 ) , ending by a suffix of @xmath13 consecutive 0 s ( denoted by @xmath21 ) , and the factor which is included between them begins with 0 , ends with 1 and avoids both @xmath21 and @xmath20 .          _ proof .",
    "_ it consists of two distinguished steps .",
    "first we prove that each @xmath27 is bifix - free , then we show that @xmath15 is a cross - bifix - free code .",
    "each @xmath27 can be written as @xmath28 where @xmath29 are necessarily non - empty strings while @xmath30 can also be empty . denoting by @xmath31 the length of the string @xmath32",
    ", we consider two cases . if @xmath33 , then @xmath34 , so @xmath0 is bifix - free . if @xmath35 , then @xmath36 where @xmath37 can be empty and @xmath38 avoids both @xmath21 and @xmath20 , and @xmath39 where @xmath40 and @xmath41 avoids both @xmath21 and @xmath20 .",
    "supposing ad absurdum that @xmath0 is not bifix - free , if @xmath42 , then @xmath43 would contain @xmath20 against the hypothesis @xmath27 , otherwise , if @xmath44 , then there would be a mismatch between @xmath45 and @xmath46 which are equal to 1 and 0 , respectively .",
    "therefore , @xmath0 is bifix - free .",
    "the proof that @xmath0 and @xmath12 are cross - bifix - free for each @xmath47 is quite analogous to the one just illustrated , considering @xmath48 and @xmath49 and comparing the proper prefix @xmath32 of @xmath0 and the proper suffix @xmath50 of @xmath12 when @xmath51 .",
    "@xmath52                    [ expa ] let @xmath10 be a cross - fix - free code and @xmath63 be the subset of @xmath10 containing the strings having length at most @xmath9 . for any fixed @xmath9 , we say that @xmath63 is _ non - expandable _ if and only if for each binary bifix - free string @xmath64 having length at most @xmath9 , with @xmath65 , we have that @xmath66 is not a cross - fix - free code .    for example , @xmath67 is an expandable cross - fix - free code , since it can be expanded by the set of binary strings @xmath68 maintaining the cross - fix - free property . on the contrary , for the code @xmath61 we have the following proposition .",
    "_ fixed @xmath70 , let @xmath64 be a binary bifix - free string having length at most @xmath9 such that @xmath71 , and consider @xmath72 . if @xmath64 begins with @xmath73 ( ends with 1 ) then @xmath74 is not cross - fix - free since any string in @xmath61 ends with @xmath73 ( begins with 1 ) .",
    "consequently we have to consider @xmath64 as a string beginning with 1 and ending with @xmath73 .      *",
    "if @xmath79 , then @xmath64 admits a ( non - empty ) proper prefix @xmath80 having length at most @xmath81 such that @xmath82 , otherwise if such a prefix @xmath80 would not exist , then @xmath64 should be in @xmath61 against our assumption . let @xmath80 be the smallest proper prefix @xmath80 of @xmath64 such that @xmath82 , then @xmath83 where @xmath32 is a dyck word which can be also empty .",
    "so , @xmath84 and @xmath74 is not a cross - fix - free code . *",
    "if @xmath77 , @xmath64 can be written as @xmath85 where @xmath86 is a word ( possibly empty ) satisfying @xmath87 and beginning with @xmath88 , and @xmath89 are dyck words with @xmath90 non - empty as @xmath64 ends with @xmath73 .",
    "since @xmath90 is a dyck word having length at most @xmath91 , then it can be factorized as @xmath92 , where @xmath93 are two dyck words ( possibly empty ) .",
    "so , the suffix @xmath94 of @xmath64 is a word in @xmath61 and @xmath74 is not a cross - fix - free code . * if @xmath78 , @xmath64 can be written as @xmath95 where @xmath86 is a word ( possibly empty ) satisfying @xmath87 and ending with @xmath73 , and @xmath96 are dyck words with @xmath97 non - empty as @xmath64 begins with 1 . since @xmath97 is a dyck word having length at most @xmath91 , then it can be factorized as @xmath98 , where @xmath99 are two dyck words ( possibly empty ) .",
    "so , the prefix @xmath94 of @xmath64 is a word in @xmath61 and @xmath74 is not a cross - fix - free code",
    ".      definition [ expa ] can be easily adapted to the strong cross - fix - free codes .",
    "unfortunately , for any fixed @xmath101 , the code @xmath54 presented in section 2 is an expandable strong cross - fix - free code , since for instance the string @xmath102 can be added to @xmath54 maintaining the strong cross - fix - free property ( this is also valid if we consider @xmath103 ) .",
    "a more deep inspection is needed in this direction , and a further line of research could take into consideration strong cross - fix - free codes which are non - expandable ."
  ],
  "abstract_text": [
    "<S> we define a variable - length code having the property that no ( non - empty ) prefix of each its codeword is a suffix of any other one , and vice versa . </S>",
    "<S> this kind of code can be seen as an extension of two well - known codes in literature , called respectively _ fix - free code _ and _ non - overlapping code_. in this paper , some constructive algorithms for such codes are presented as well as numerical results about their cardinality .    </S>",
    "<S> * keyword : * variable - length codes , non - overlapping codes , fix - free codes , fibonacci numbers . </S>"
  ]
}