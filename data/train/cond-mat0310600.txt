{
  "article_text": [
    "the possibility of automatically discovering communities in large network systems opens a promising set of new research areas in a number of knowledge domains . from informal social networks that can be discovered through their communication patterns @xcite to genetic clusters that lie hidden in the biological literature @xcite",
    "the unveiling of community structures within these networks allows for the investigation of information flow within organizations , the discovery of causal effects in complex gene networks and the dynamics of virus propagation in computer networks .",
    "a central issue in the automatic discovery of communities is the type of algorithms to be used with very large graphs , many of which display a scale free structure .",
    "not only are there problems with the definition of communities per se , but also with the speed with which these algorithms can uncover these communities .    by finding community structure within a network we mean that a graph can be divided into groups so that edges appear within a group much more often than across two groups . but this apparently natural definition of community is problematic if a node connects two clusters that have about the same number of edges . in this case if becomes hard to tell to which cluster the node belongs .",
    "furthermore , large graphs often possess a hierarchical community structure and hence the number of communities in a graph depends on the level at which the graph is being partitioned .    concerning the type of algorithms that have been used to discover community structure , a recent one that has been used",
    "is based on the idea of betweenness centrality , or betweenness , first proposed by freeman @xcite .",
    "the betweenness of an edge is defined as the number of shortest paths that traverse it .",
    "this property distinguishes inter - community edges , which link many vertices in different communities and have high betweenness , from intra - community edges , whose betweenness is low .",
    "the original algorithm , developed by girvan and newman @xcite , was also extended to gene community discovery by wilkinson and huberman @xcite , who partition a graph into discrete communities of nodes using random sampling techniques . in these cases ,",
    "the time involved to discover the community structure of the graph scales as @xmath0 .",
    "more recently , newman and girvan @xcite proposed a different technique , which focuses on currents flowing on edges of a network in order to discover communities.in this edge cutting algorithm the time involved , is of order @xmath1 , with @xmath2 the number of nodes in the graph .",
    "this is because it first calculates a matrix inverse , which usually takes @xmath0 time and then it computes the voltage vector , @xmath3 , for each possible source / sink pair resistor networks .",
    "these polynomial scalings make these algorithms hard to use when computing the community structure of very large graphs .    in the computer science literature",
    ", there are a number of fast heuristics , such as `` fm - mincut''@xcite that can cluster a graph in linear time .",
    "however , since their approach consists in breaking up a graph by recursively cutting it so as to end up with the desired number of partitions , they are inefficient when trying to find out the community around a given node .    in this paper we present a different method that allows for the discovery of communities within graphs of arbitrary size in times that scale linearly with their size ( @xmath4 ) .",
    "this method avoids edge cutting and is based on notions of voltage drops across networks that are both intuitive and easy to solve regardless of the complexity of the graph involved .",
    "we additionally show how this algorithm allows for the discovery of a community surrounding a given node without having to extract all the communities out of a graph .    in what follows",
    "we present the algorithm in the context of a very simple problem , and then extend it to the general case .",
    "we then apply it to problems that have been considered earlier using much slower algorithms , such as membership in karate clubs and the discovery of conferences within us college football data .",
    "finally we exhibit the power of our method in the discovery of communities around given nodes without having to compute the full community structure of the graph , and we test it on email data collected from hp laboratories .",
    "a final section discusses these results and outlines possible applications .",
    "we start by exhibiting the workings of this algorithm in the simplest problem , i.e , how to divide a graph into two communities .",
    "we then extend our method to more general @xmath2-community graphs .",
    "consider a graph @xmath5 .",
    "suppose we already know that node @xmath6 and @xmath7 belong to different communities , which we call @xmath8 and @xmath9 ( we will talk later what if we do not have this information beforehand ) .",
    "the idea is that we imagine each edge to be a resistor with the same resistance , and we connect a battery between @xmath6 and @xmath7 so that they have fixed voltages , say 1 and 0 .",
    "having made these assumptions the graph can be viewed as an electric circuit with current flowing through each edge ( resistor ) . by solving kirchhoff equations we can obtain the voltage value of each node , which of course should lie between 0 and 1 .",
    "we claim that , from a node s voltage value we are able to judge whether it belongs to @xmath8 or @xmath9 .",
    "more specifically , we can say a node belongs to @xmath8 if its voltage is greater than a certain threshold , say 0.5 , and it belongs to @xmath9 if its voltage is less than that threshold .",
    "first let us consider the simplest case that node @xmath10 has only one neighbor @xmath11 , so logically @xmath10 should belong to the same community as @xmath11 ( fig .",
    "[ degree1 ] ) .",
    "our idea indeed applies to this case . because no current can flow through the edge @xmath12",
    ", the two endpoints must have the same voltage , thus they belong to the same community .",
    "next we consider the case that node @xmath10 connects to two neighbors @xmath11 and @xmath13 . because the edges @xmath12 and @xmath14 have the same resistance , we must have @xmath15 . hence if @xmath11 and @xmath13 belong to the same community , i.e. , @xmath16 and @xmath17 both lie above or below the threshold , then @xmath18 lying between @xmath16 and @xmath17 should be above or below the threshold as well , therefore belonging to the same community as @xmath11 and @xmath13 , which makes sense . on the other hand , if @xmath11 and @xmath13 belong to different communities , then it is comparatively hard to tell which community @xmath10 belongs to ( @xmath18 might be near the threshold ) , but this is exactly where ambiguity arises - a node has connections with more than one communities .",
    "last we consider the most general case : @xmath10 connects to @xmath2 neighbors @xmath19 .",
    "the kirchhoff equations tell us the total current flowing into @xmath10 should sum up to zero , i.e. , @xmath20 where @xmath21 is the current flowing from @xmath22 to @xmath10 .",
    "thus @xmath23 that is , the voltage of a node is the average of its neighbors .",
    "if the majority of @xmath10 s neighbors belongs to a community which has voltage greater than the threshold , then @xmath18 tends to exceed the threshold as well , hence our method tends to classify @xmath10 into that community .",
    "our method can be easily extended to weighted graphs .",
    "all we need to do is to set each edge s conductivity proportional to its weight : @xmath24 the average appearing in eq .",
    "( [ neighboraverage ] ) becomes weighted average accordingly .",
    "following eq .",
    "( [ neighboraverage ] ) , the kirchhoff equations of a @xmath2-node circuit can be written as : @xmath25 where @xmath26 is the degree of node @xmath27 and @xmath28 is the adjacency matrix of the graph . without loss of generality",
    ", we have labelled the nodes in such a way that the battery is attached to node 1 and 2 , which we call _ poles _ , accordingly eq .",
    "( [ battery1 ] ) and ( [ battery2 ] ) .",
    "( [ kirchhoff1 ] ) is a set of linear equations of @xmath29 variables @xmath30 that can be put into a more symmetrical form : @xmath31 define @xmath32 then the kirchhoff equations can be further put into a matrix form @xmath33 which has the unique solution @xmath34    in general it takes @xmath0 time to solve a set of equations like eq .",
    "( [ solution ] ) .",
    "however , we can actually cut the time down to @xmath4 , as described in the next section .    before closing",
    "we point out that if we define @xmath35 then the kirchhoff equations can also be written as @xmath36 which has the unique solution @xmath37 interestingly enough , @xmath38 is the laplacian matrix of the subgraph of @xmath39 containing nodes @xmath40 .",
    "the well - known spectral partitioning method partitions the graph based on the eigenvector of the second smallest eigenvalue of @xmath39 s laplacian matrix @xcite .",
    "we point out however that our method does not compute the eigenvectors of @xmath39 .",
    "we first set @xmath41 in @xmath42 time .",
    "starting from node 3 , we consecutively update a node s voltage to the average voltage of its neighbors , according to eq .",
    "( [ neighboraverage ] ) .",
    "the updating process ends when we get to the last node @xmath2 .",
    "we call this a round . because any node @xmath27 has @xmath26 neighbors ,",
    "one has to spend an amount of @xmath43 time calculating its neighbor average , thus the total time spent in one round is @xmath44 . after repeating the updating process for a finite number of rounds , one reaches an approximate solution within a certain precision , which _ does not depend on the graph size @xmath2 but",
    "only depends on the number of iteration rounds_. in other words , to obtain a certain precision , say 0.01 , one only needs to repeat , say , 100 rounds , no matter how large the graph is , so the total running time is always @xmath4 .    to show conceptually the fast convergence of the algorithm , we expand eq .",
    "( [ solution ] ) into a series : @xmath45 now if we define @xmath46 then @xmath47 as @xmath48 the remainder @xmath49 , so we see the iteration algorithm amounts to a simple cutoff of the power series . the convergence speed is determined by the matrix norm @xmath50 which is usually insensitive to @xmath51 .",
    "we tested our algorithm against the friendship network data from zachary s karate club study @xcite .",
    "the graph includes two communites of roughly equal size ( fig .",
    "[ zachnet ] ) .",
    "the results of our linear time algorithm are shown in fig .",
    "[ club ] .    in the figures ,",
    "a node is represented as a vertical line at the abscissa equal to its voltage , and is painted either red if it belongs to the first community , or blue if it belongs to the second , based on zachary s real data . if our algorithm works , the red lines and the blue lines should separate at the two ends .",
    "this is indeed the case for the first three examples , when the external voltage is added between a pair of nodes lying in different communities .",
    "we also show in the last panel how the algorithm fails when the poles lie in the same community .          after obtaining the complete voltage spectrum two critical questions remain to be answered :    * how to pick the two poles so that they lie in different communities ? * what threshold should be used to separate the two communities ?",
    "the first question is hard because we do not have any prior information about the graph and the problem has to be solved in linear time .",
    "we first describe a heuristic that works although inconsistently , and then present a better statistical method in the next section .",
    "because nodes are densely connected inside a community , the average distance between two nodes chosen from one community is generally shorter than the average distance between two nodes chosen from different communities .",
    "thus , there is a high probability that two far apart nodes sit in different communities , qualifying for the poles .    to find a far apart pair of nodes one can use the following linear - time method .",
    "first randomly pick a node , then find the node farthest from it , using a simple breadth - first search which takes time @xmath4 .",
    "if more than one node qualifies , pick any of them .",
    "next , use another breadth - first search to find the node farthest from the second node , and so on .",
    "after a few steps this procedure would identify a pair of nodes very far away .",
    "the diameter of the graph is defined by the largest distance of all pairs .",
    "the graph of the karate club has diameter 5 .",
    "all pairs of nodes with this distance apart indeed belong to different communities .",
    "one example @xmath52 is shown in fig .",
    "[ club](b ) .",
    "the second question , i.e. what threshold to use in order to separate the two communities , is easier to answer .",
    "because edges are sparser between two communities , the local resistivity should be large compared to the local resistivity within the two communities .",
    "thus the voltage drops primarily at the junction ( see fig .",
    "[ voltage_difference ] ) between communities .",
    "this suggests placing the threshold at the largest voltage gap near the middle .",
    "note that the global largest gap often appears at the two ends of the voltage spectrum ( see e.g.  fig .",
    "[ club](b ) and ( c ) ) , but it does not make sense to cut there at all , which would divide the graph into two extremely asymmetrical communities , one of which has only one or two nodes . of course this is not what we want .    to be more definitive , we now define rigorously the term  near the middle \" .",
    "we distinguish two cases :    1 .  dividing the graph into exactly two equal - sized communities .",
    "we simply cut at the right middle gap .",
    "the median - selection problem can be done in @xmath42 time by a good selection algorithm @xcite .    2 .",
    "finding communities of roughly the same size , which for the karate club example implies @xmath53 nodes each .",
    "we define a _ tolerance _ to describe the range of allowed community sizes .",
    "a tolerance 0.2 means we only search for communities of the size @xmath54 , which is @xmath55 .",
    "first we sort the voltage values .",
    "then we find the the largest gap among the middle @xmath56 gaps and cut there .",
    "note that the sort can be done in @xmath42 time by using a standard linear time sort , e.g.  counting sort @xcite , which applies to our problem since the voltage can only take a finite number of values ( 101 choices for precision 0.01 ) . the green dashed lines in fig .",
    "[ club ] were found this way .",
    "we emphasize that this method does not always work , as illustrated in fig .",
    "[ largest_distance ] .",
    "a statistical method can be used to avoid the `` poles problem '' instead of solving it .",
    "the idea is to randomly pick two poles , apply the algorithm to divide the graph into two communities , and repeat it for many times ( the total time is still @xmath4 ) .",
    "about one half of the results would give correct results , for the poles would happen to lie in different communities , while the other half would give incorrect results .",
    "if we now improve our pole - picking method by only choosing two nodes that are not neighbors ( i.e. , there is no edge between them ) , then the probability that our randomly chosen poles lie in different communities becomes higher than a half , suggesting the majority of the results is correct .",
    "thus we should be able to use a majority vote to determine the communities .",
    "we tested our method against the karate club data .",
    "each time we randomly picked two nodes whose distance @xmath57 , and then ran the algorithm to find two communities .",
    "we repeated the process 50 times to obtain 100 groups altogether , among which 50 groups contained node 16 ( 16 has no special meaning - we arbitrarily chose it ) .",
    "we counted , for each node , how many times it appeared in the same group as node 16 , the maximal possible value being 50 and the minimal value 0 .",
    "the result is shown as a bar graph in fig .",
    "[ majority_vote ] . comparing the graph with the real data we see that those nodes in node 16 s community indeed all have high votings ( above the green horizontal line in fig .",
    "[ majority_vote ] ) .",
    "we now extend our method to @xmath2-community graphs .",
    "we test our algorithm against the us college football data studied by girvan and newman @xcite .",
    "a total of 115 teams are divided into 13 `` conferences '' containing around 8 to 12 teams each .",
    "our task is to find all those conferences ( communities ) .",
    "as we proceeded in the karate club case , we first randomly pick two poles whose distance @xmath57 , then apply our algorithm to get the voltage spectrum .",
    "( note that the probability that two poles belong to the same community decreases as the number of commuties increases , roughly in the manner @xmath58 , where @xmath59 is the number of communities . )",
    "we set the tolerance to be 0.5 , which means that we only search for communties whose size is in the range @xmath60 , or between 4 and 13 , roughly .    to be more precise , we sort all 115 voltage values in an increasing order and label them as @xmath61 .",
    "we then measure the gaps @xmath62 one by one to pick out the largest one , say @xmath63 , which indicates a group of nodes having voltages @xmath64 .",
    "similarly , we obtain a group of nodes at the @xmath65 end .",
    "the two groups thus found are both candidates for the 13 communities we are looking for .",
    "an example is shown in fig .",
    "[ football_spectrum ] .",
    "we repeated the process 50 times to collect 100 candidates .",
    "we then found out all the groups containing a specific node to apply a majority vote , just like what we did before to 2-community graphs .",
    "the specific node can be chosen rather freely , but to use most information , we chose the one that appears most frequently in the 100 groups ( frequency test takes @xmath42 time ) .",
    "an example of such a majority vote is shown in fig .",
    "[ football_vote ] .",
    "after we found the first community this way , we again picked a node in the rest of the graph which appears most frequently , and applied a majority vote to all groups containing that node in order to find the second community . repeating this procedure 13 times",
    ", we were able to find out all 13 communities .",
    "we can further save time if we are only required to find the community of a given node instead of all communities . to this end , instead of randomly picking two nodes at a time",
    ", we fix the given node as one pole , and choose the second pole to be another random node that is at least a distance 2 away from the first one . the rest steps",
    "( setting the tolerance , calculating voltages , cutting through the biggest gap , etc . )",
    "remain the same . by doing so each round we are guaranteed to acquire a group containing the given node , so we can further reduce the total number of rounds from 50 to , say , 20 , which gives us 20 candidates , sufficient for the majority vote .",
    "we also tested our method against the hp labs email data , which was collected from a roughly power - law network consisting of 396 nodes .",
    "we joined two nodes with an edge if the they exchanged more than 30 emails a month .",
    "as an example , we tried to find out the closest colleagues of the node `` jaap '' .",
    "our results show a total number of 20 nodes to lie above the threshold . comparing this result with the communities extracted from the email data",
    ", we discovered that all these nodes belong to the same laboratory as does the node jaap , as was indeed the case .",
    "distance information is not sufficient to detect the community of a given node .",
    "one can not simply pick out the nodes within a radius @xmath66 from the given node and say they form a community , because    1 .",
    "two nodes separated by a short distance need not to be in the same community . in our last example , 57 nodes have distance @xmath67 from jaap , among which only 27 belongs to jaap s lab . 2 .   for a small - world network",
    ", even the number of second neighbors or third neighbors can be very large . in our last example jaap",
    "has 157 neighbors within a distance 3 , which is already about 40% of the total size .",
    "3 .   two nodes with a large distance apart can still be in the same community .",
    "for example , `` jshan '' is among one of the 20 nodes found by our algorithm but has a distance 3 away from jaap , which is quite large .",
    "in our 2-community example the voltage is regarded as an index indicating which community a node belongs to .",
    "its absolute value has no special meaning , for we can freely change its range from @xmath68 $ ] to any other range .    despite its clear physical meaning",
    ", we can reinterpret the voltage as a weight function measuring to what extent the node belongs to a community .",
    "for example , if we set the voltage range to @xmath69 $ ] , we can then say a node `` strongly '' belongs to the @xmath70 community if its voltage is @xmath71 , or a node `` weakly '' belongs to the 1 community if its voltage is @xmath72 , etc .",
    "this second interpretation of voltage inspires us to try other possible choices of weight functions .",
    "the voltage , being a scalar , can only separate two communities because the real line only has two directions .",
    "if we generalize however our weight function to a _ vector _ , we can then achieve extra dimensions to separate more communities .",
    "for example , consider the 3-community graph in fig .",
    "[ vec_weight ] .",
    "suppose we have already found three poles dispersed in three communities .",
    "we assign each pole a unit - length vector weight in such a way that the angle between any two of the them is exactly 120 degrees , shown in fig .",
    "[ vec_weight ] as @xmath73 , @xmath74 and @xmath75 .",
    "those vectors have the nice properties @xmath76 , @xmath77 and @xmath78 .",
    "thus , if a node is strongly connected to , say , communities @xmath73 and @xmath74 but not to @xmath75 , then there is a strong signal to separate the node from community @xmath75 ( because @xmath76 ) .",
    "also , if a node connects to all three communities , we see that the relation @xmath79 indeed reflects the obscurity of the node s belonging .",
    "after we have fixed the vector weights of the three poles , we can continue with our method to solve kirchhoff equations .",
    "we only need to replace the sums in eq .",
    "( [ kirchhoff1 ] ) by vector sums .",
    "once we solve out the vector weights of all nodes , we can tell a node belongs which community according to its pointing direction in the 2-dimensional plane .",
    "for example , if a node s vector weight is pointing basically upward then we can say it belongs to community @xmath73 .",
    "hence vector weights allow us to separate three communities at a time .    while one might wish to further extend the method to higher dimensional spaces to separate more communities at a time , we point out that we have not yet succeeded in finding a symmetrical set of vectors in three or higher dimensional spaces .",
    "there is one more interesting probabilistic interpretation of voltage @xcite : when a unit voltage is applied between @xmath80 and @xmath81 , making @xmath82 and @xmath83 , the voltage @xmath84 at any point @xmath85 represents the probability that a walker starting from @xmath86 will return to @xmath80 before reaching @xmath81 .",
    "there is also a probabilistic interpretation of current .",
    "in this paper we presented a method that allows for the discovery of communities within graph of arbitrary size in times that scale linearly with its size .",
    "the method avoids edge cutting altogether and is based on notions of voltage drops across networks that are both intuitive and easy to solve regardless of the complexity of the graph involved .",
    "additionally , this method allows for the discovery of a community surrounding a given node without having to extract all the communities out of a graph .",
    "we then tested the algorithm by applying it to several problems such as membership in karate clubs and the discovery of conferences within us college football data .",
    "we also show how it can be used to discover of communities around given nodes by working with a graph of email data collected from hp laboratories .",
    "the reason behind the speed of this method lies in its focus on communities themselves and not on their hierarchical structures .",
    "in contrast , newman s betweenness method @xcite detects not only the communities but also the complete hierarchy tree using much longer times .",
    "while our method lacks the ability to find the hierarchy tree , it also saves a lot of time since it does not need to find out all the big communities before looking for the small ones .",
    "in fact , it can identify the community of any given node , without knowing the full structure of the graph or the composition of other communities .",
    "a possible defect of our method is that we have to specify the number of communities we wish to divide the graph into , a piece of information which one does not often have beforehand .",
    "a natural solution would be to first divide the graph into two big communities and then break them down into smaller ones by recursively applying the method described before .",
    "unfortunately , the statistical method of attaching the battery to random sites over the graph works poorly when the graph is not `` divisible '' enough , and this will happen whenever the graph itself is a big community , and thus not divisible , or when the graph can be divided into two parts in many ways ( `` too divisible '' ) , each having about the same contribution to the majority vote ( fig .  [ not_divisible ] ) .    in order to explain why our statistical method works poorly in the second case , consider the graph shown in fig .",
    "[ not_divisible](b ) , which is composed of four communities , @xmath6 , @xmath7 , @xmath10 and @xmath11 .",
    "suppose @xmath87 , @xmath88 , @xmath89 and @xmath12 are loosely connected by some inter community edges but not @xmath90 and @xmath91 .",
    "if we happen to choose two poles separately in @xmath6 and @xmath7 , then our algorithm would tend to divide the graph into two parts : @xmath88 and @xmath89 .",
    "however , we have a roughly equal chance to choose two poles in @xmath6 and @xmath10 , which would imply the division @xmath87 and @xmath12 .",
    "thus our statistical method becomes puzzled as to where to cut .",
    "we emphasize that , the reason our statistical method would fail sometimes is due to the ambiguity of the graph itself . in our previous example ,",
    "any algorithm would and should hesitate whether to cut the graph into @xmath92 or @xmath93 .",
    "a good algorithm should be able to yield at least one reasonable result .",
    "in fact , if we are just interested in finding one solution , no matter which , we could always apply the quick - and - dirty method by choosing two poles far away .",
    "this would lead to a reasonable solution . in this sense , our method might better be taken as a graph partitioning method rather than a community detecting method .",
    "in closing we point out a number of possible extensions of our method that could make it even more effective when dealing with complex graphs .",
    "the first one is a better statistical method that still works well when the graph is `` too divisible '' .",
    "second , one could also search for better weight functions and a better definition of average other than the one in eq .",
    "( [ kirchhoff1 ] ) .",
    "third , there is information in the complete voltage spectrum that has not yet been fully exploited .",
    "for example , nodes belonging to the same community usually concentrate closely in the spectrum , and yet the voltages between the two green lines in fig .",
    "[ football_spectrum ] were simply discarded .",
    "finally , one could use the result of a majority vote to evaluate the correctness of the partition .",
    "l. freeman , a set of measures of centrality based on betweenness , sociometry , * 40 * , 3541 ( 1977 ) m. e. j. newman and m. girvan , finding and evaluating community structure in networks , cond - mat/0308217 ( 2003 ) m. girvan and m. e. j. newman , community structure in social and biological networks , proc .",
    "usa * 99 * , 82718276 ( 2002 ) d. wilkinson and b. a. huberman , a method for finding communities of related genes ( to appear in proc .",
    "usa ) ( 2004 ) j. tyler , d. wilkinson , and b. a. huberman , email as spectroscopy : automated discovery of community structure within organizations , communities and technologies , m. huysman , e. wegner and v. wulf , eds .",
    "kluwer academic ( 2003 ) b. kernighan and s. lin , an effective heuristic procedure for partitioning graphs , the bell system technial journal , * 29 * , 291307 ( feb 1970 ) c. fiduccia and r. mattheyses , a linear - time heuristic for improving network partitions , proceedings of the 19th ieee design automation conference , 175181 ( 1982 ) a. pothen , h. simon , and k. p. liou , partitioning sparse matrices with eigenvectors of graphs , siam j. matrix anal .",
    ", * 11 * , 430452 ( 1990 ) m. fiedler , algebraic connectivity of graphs , czech .",
    "j. * 23 * , 298305 ( 1973 ) m. fiedler , a property of eigenvectors of nonnegative symmetric matrices and its application to graph theory , czech .",
    "j. , * 25 * , 619637 ( 1975 ) t. h. cormen , c. e. leiserson , r. l. rivest , c. stein , introduction to algorithms , 2nd ed .",
    ", p.  189 , p.  168",
    "w. w. zachary , an information flow model for conflict and fission in small groups , journal of anthropological research , * 33 * , 452473 ( 1977 ) boris rabinovich and anna rapoport , graphs , geometry and probability , lecture 7 ( march 2003 )"
  ],
  "abstract_text": [
    "<S> we present a method that allows for the discovery of communities within graphs of arbitrary size in times that scale linearly with their size . </S>",
    "<S> this method avoids edge cutting and is based on notions of voltage drops across networks that are both intuitive and easy to solve regardless of the complexity of the graph involved . </S>",
    "<S> we additionally show how this algorithm allows for the swift discovery of the community surrounding a given node without having to extract all the communities out of a graph . </S>"
  ]
}