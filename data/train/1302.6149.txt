{
  "article_text": [
    "robot design deals with complexity in a manner similar to personal computers .",
    "robots have input / output devices that either provide output by acting in the environment or sensors that provide input . like pcs ,",
    "robot peripherals contain firmware ( device controllers ) to predictably and efficiently manage resources in real - time .",
    "data is provided via a well - defined interface ( set of system calls over a transport ) .",
    "however , pcs abstract the differences in internal organization and chipsets through classifying devices in terms of their roles in the system .",
    "these roles define an appropriate set of access and control functions that generally apply across the entire classification .",
    "subsequent differences in devices are accommodated through the use of custom device drivers .    robots also contain a mechanism for providing input and output to the higher - level algorithms , but the placement of the hardware abstraction layer is different than in personal computers .",
    "although most devices are classified according to the data type they produce and consume , classification occurs within the framework , not at the firmware level .",
    "the disadvantage of this approach is that customized links from each hardware platform to each framework must be created . in the current robotics landscape",
    ", this is a huge burden given the rate of innovation on new hardware platforms for many research and education purposes .",
    "this ongoing backlog of creating one - to - one connections between platforms and hardware stifles innovation of control architectures .",
    "the small number of developers comfortable with device driver creation either due to the unfamiliarity of the transports or the complexity of the threaded management of connections is source of slow progress .",
    "fortunately , we can leverage some commonalities found at the device driver level that link salient concepts both in the device driver domain and the robotics domain .",
    "we propose a domain specific language based on these concepts called robot device interface specification ( rdis ) .",
    "the rdis describes the robot interface in terms of connection , primitives and interfaces .",
    "an accurate characterization of the device domain enables some important innovations .",
    "first , the rdis enables a declarative , rather than a programmed interface to frameworks .",
    "this approach benefits both device manufacturers and framework developers and users by separating the device semantics from the framework semantics .",
    "robot designers can describe the interface that they provide via onboard firmware and how it maps to abstract concepts via the rdis .",
    "the framework developers are only responsible for providing a mapping from the abstract concepts to the framework .",
    "the abstract interface allows a many - to - many mapping between devices and frameworks using only a single map for each device and framework .",
    "this is beneficial because manufacturers typically only provide device drivers for a single , often proprietary framework .",
    "specific device drivers for many frameworks are left to either framework developers ( in the case of popular robots ) or framework users ( as needed ) .",
    "the lack of available drivers for a specific device on a specific framework can be a barrier to leveraging existing software components .",
    "second , an abstraction that maps device semantics to domain specific concepts enables a new generation of development and runtime tools that can discover and manage available resources at both development and runtime .",
    "expertise in creating efficient threaded drivers for specific frameworks can be reused .",
    "this approach would simplify development by presenting developers with available resources that conform to specific domain concepts .    in this paper",
    ", we present the rdis work in progress including rdis specification and tools as well as a use of the rdis to generate device specific programs . the rest of this paper is organized as follows : section [ rw ] discusses work related to declarative descriptions of robot hardware .",
    "section [ rdis ] presents the preliminary domain model and its applicability to existing platforms .",
    "the current implementation is discussed in section [ case ] .",
    "the summary and future work directions are detailed in section [ summary ] .",
    "although the literature reveals very few attempts at using dsls for hardware device drivers , thibault et al @xcite report the creation of efficient video device drivers using a novel dsl @xcite .",
    "this language is targeted at the hardware interface layer and creates device driver code rather than interpreting code for efficiency .",
    "urbi ( universal robotic body interface ) focuses on creating a model that controls the low level layer of robots and is independent from the robot and client system due to the client / server architecture .",
    "others @xcite have attempted to address the lack of standardization in abstraction layers but have not considered moving abstractions to drivers using device descriptions .",
    "some frameworks use a declarative description of the robots for simulation .",
    "player / stage  @xcite is both a 2d simulator and a robot control framework .",
    "robot description files are broken into two pieces : 1 ) a 2d description of the robot and its sensors and 2 ) a set of interfaces that abstract the data produced by hardware to a standard format .",
    "the description , used for simulating the robot , consists of a polygon - based footprint with sensor locations marked .",
    "actuation and sensor characteristics along with parameters for simplified error models are used to complete the model of the robot .",
    "a domain - specific set of classes and message types describe what data can be obtained or how the robot can be manipulated ( i.e. pose2d for position and laser or ir for distance to other objects ) .",
    "the classes and message types represent the interface that abstracts the robot hardware to the data that it can produce or consume .",
    "writing software to the interfaces that a robot can utilize ( rather than the specific robot ) allows software to be written either for a simulated robot or a real robot , which in turns eases the transition from simulation to physical implementation .",
    "ros @xcite targets a 3d simulation framework ( gazebo ) and more sophisticated intelligent controller , which require a more rigorous description",
    ". urdf ( uniform robot description format ) provides a 3d physical description broken into links and joints to facilitate not only mobile robots but manipulators as well . geometric bounding boxes and meshes allow for collision detection and realistic visualization . like player / stage",
    ", ros utilizes a message - based model to decouple data providers from data producers .",
    "ideally robots that provide and consume similar data types can be controlled similarly . unlike player stage , urdf not only serves as a mechanism for simulating robots , but also allows for the visualization of real robots in both real - time and off - line ( through saved messages ) .",
    "a select number of robot control frameworks move beyond visualization information and relevant interface declaration in the hardware description .",
    "preop , an alice - based programming interface @xcite for robots takes this paradigm further .",
    "not only is 3d visualization information supplied , but also the programming interface is completely specified by the selection of the robot object .",
    "this is accomplished by linking the real - time control mechanism and exposed api available to the user within the robot object .",
    "frameworks and general reuse within the robotics research community rely upon the relatively invariant nature of mobile robots in several ways .",
    "first , in an effort to reduce the complexity of control software , many robots reuse certain kinematic designs .",
    "for example , differential drive is a fairly common choice as a configuration .",
    "there is a computationally simple , closed form solution for forward and inverse kinematics and when combined with wheel encoders , provides a method for calculating pose relative to a starting position ( which in turn enables closed loop control ) .",
    "although manipulators can contain arbitrary linkages , typically robots are constrained to configurations that provide a closed form inverse kinematic formulation and are numerically conducive to path planning ( avoiding singularities ) @xcite .",
    "therefore , software that takes advantage of the kinematic control inherent in one configuration could be applied to other robots that reuse that configuration with appropriate parameterization .",
    "second , many robots including the popular mobile robots pioneer class , irobot creates , k - team robots , erratic er-1 , white box robotics model 914 , ar.drones , and birdbrain finches contain an embedded firmware controller that accepts commands via a serial , bluetooth , wifi or usb interface rather than require the users to download a program to onboard memory .",
    "this approach is popular because it allows the hardware designers to hide the complexity of hardware control within the firmware .",
    "there are a few designs that still expect developers to download code to the firmware .",
    "the benefits of the low latency of local control are far outweighed by the burden of identifying a local toolchain to build the remote executables and the complexity of testing on a remote platform . to that end ,",
    "robots that utilize local control often provide modes where the local software program presents an api to an external computer ( i.e. lego mindstorms via lejos and e - puck ) .",
    "rdis , robot device interface specification , is a domain specific language that defines the connection to robot firmware and maps data types to defacto standard messages for use in frameworks .",
    "this mechanism provides an abstraction layer between the device and frameworks that negates the need for device drivers as point solutions .",
    "the rdis has three purposes : 1 ) provide enough information for simulation and visualization of hardware and controllers , 2 ) declaratively specify the mechanism for requesting data and actuation , and 3 ) inform users of standard message types that can be obtained from the hardware to facilitate connections to existing frameworks .",
    "the rdis enables several efficiencies in robotics controller development .",
    "although the long term goal is to embed the rdis within the firmware as a response to a request , it could also be requested via the internet from a repository .",
    "however manufacturers that provide access to the rdis within their hardware would benefit from being able to take advantage of the rdis connectors available for frameworks without specifically providing device drivers .",
    "then the rdis serves as a discovery message to the development architecture regarding the services available and how to manage the services at runtime . making the hardware the system of record for its abilities is in line with other modern technologies ( bluetooth for example ) .",
    "the challenge in successfully defining the rdis is in creating a model that captures the generalizable aspects of robots and appropriately identifies the aspects that vary .",
    "domain models , when designed properly , can be somewhat invariant to changes and can provide a stable basis for deciding the structure and parameters of the specification .",
    "primary concepts include connection , message formats , primitives and exposed interfaces ( figure [ er ] ) .",
    "figure [ circles ] shows a diagram of the domain and the scope of the rdis .",
    "connections are generally through standard transports and describe how the robot connects to external controllers .",
    "message formats either encode parameters in ascii formats or send natively as byte values .",
    "primitives describe the device invariant features which are requests that can be made and ingoing and outgoing parameters .",
    "exposed interfaces describe a more convenient exposed interface that may map directly to primitives or may add value to a primitive by data conversion or specific parameterization .",
    "there are some cross - cutting concerns .",
    "messaging paradigms are either request - reply ( service - based and adhoc ) or publish / subscribe ( periodic updates that are published or expected ) .",
    "threading models include single ( one loop that services incoming and outgoing data ) , dual threaded ( one thread for servicing incoming requests and one thread for periodic requests ) , or multiple threads ( requests create threads and periodic requests are on different frequencies ) .",
    "some drivers maintain state",
    "( i.e. current position relative to the starting point ) and the validation routines for incoming data and read and write routines can vary .",
    "a preliminary rdis that meets requirements 2 and 3 has been implemented for the finch robot from bird brain and the koala from k - team .",
    "figure [ generate ] shows how the rdis is used to create robot specific driver code for frameworks .",
    "the rdis and the resulting templates contain attributes to describe several functions including connection , basic primitives , external interfaces and mapping to abstract robotic concepts .",
    "the connection statement delineates the physical connection parameters , the overall threading model and functions to call upon the creation of the connection ( excerpt shown in figure  [ connect ] ) . depending upon the physical connection",
    ", other parameters could include port i d , serial connection parameters , or usb i d .",
    "although we intend to support three threading models , the single threading model is used which processes requests and publishing of data in a single active loop .",
    "a callback is used to process any subscriptions ( if supported by the framework and indicated by the abstract mapping ) and second thread is used to issue a keepalive command if required by the platform .",
    "all data protection , including appropriate mutexes are generated by the rdis handler based on the threading model selected .",
    "basic primitives describe the mechanism for sending information to and from the robot .",
    "primitive specifications indicate the associated connection ( described in connection statement ) , frequency and message formatting .",
    "frequency indicates whether the method is a request / reply or periodic .",
    "request / reply methods ( indicated as adhoc ) are only submitted when a request is received .",
    "parameters can be provided by the client and data can be returned to the calling client .",
    "periodic requests are executed on a schedule and utilize a set of state variables ( defined in state variables section ) to retrieve and save method data .",
    "message formats for communicating with robot firmware are either position based or delimited .",
    "the interim specification presented here encodes the messages along with the input and output fields .",
    "an example of the setmotor function in figure  [ setmotorc ] and the underlying abstract syntax tree is shown in figure  [ setmotor ] .",
    "the external interface exposes the api available to client programs .",
    "each interface is composed of one or more primitive methods or can return state variables ( updated asynchronously by periodic primitives ) . the separation between the external interface and primitives encapsulates the robot firmware and its parameters from developers .",
    "for example , actuation commands are sometimes provided in encoder units where an external api would utilize a standard measure such as meters per second .    a mapping to abstract concepts in sensing and locomotion provides a link between robots and existing frameworks . rather than specify framework",
    "specific information within the rdis , abstract concepts that describe the data available are used instead .",
    "for example , since a differential drive robot can be controlled via linear and rotational velocity , we provide a mapping between linear and rotational velocity and robot primitives ( left and right velocity ) .",
    "an example is shown in figure  [ am ] .    in the current design , the rdis is modeled as a json subset ( excerpt in figure  [ rdisjson ] ) .",
    "the intermediate product is an abstract syntax tree that represents the robot details in a domain specific model .",
    "this intermediate format can be further processed to verify conformance to the specification .",
    "end products are generated from the verified syntax tree , either in a single or multiple passes , using templates that format data based on the model .",
    "the preliminary result of this approach includes rdis specifications and grammars that generate a command line program , websocket server and a ros driver .",
    "the ros driver looks for specific interface signatures in the abstract mapping section that match to ros message structures .",
    "it is important to note that the rdis toolset is enabled by antlr and stringtemplate .",
    "these are open source libraries that parse and process data according to grammars .",
    "these grammars are often used to define domain specific languages that are subsequently processed either by interpreters or translators .",
    "the sample rdis and the translation to a c - based command line controller and a websocket server and a c++ ros node were achieved through the use of grammars and the antlr and stringtemplate libraries .",
    "although these libraries provide many built - in features , the ability to embed code to customize processing is important to using these tools effectively .",
    "this preliminary result supports the idea that general robot devices can be described declaratively in a manner that supports discovery and that links to the backend processes .",
    "the ultimate goal to enable more accessible programming by embedding the robot device descriptions within the device .",
    "discovery occurs when the design environment queries the device for its supported services ( or apis ) .",
    "the initial approach for platforms that support onboard reconfigurable firmware is to augment the firmware to support a single command that communicates the rdis .",
    "the information provided by the rdis can be used by any rdis - enabled development environment .",
    "it is expected that manufacturers will choose to rdis enable their devices once there are more rdis - enabled environments are available .",
    "the rdis must be expanded to be useful in a larger context .",
    "these tasks include but are not limited to : 1 ) addition of a complete kinematic , visual and collision description consistent with existing simulators and frameworks , 2 ) error handling at both the communication and primitive levels , 3 ) implementation of additional threading models , 4 ) refinement of the state concept and how it matches to primitives and interfaces , 5 ) management of sensor and actuator error models consistent with existing frameworks , and 6 ) match internal mechanisms to framework standard interfaces and message types through linking the description and the exposed api instead of relying upon matching external interface signatures .",
    "these changes require updates to the specification and the underlying parsers , lexers , tree grammars and string templates .",
    "the authors gratefully acknowledge the partial support nsf via grants cns-1042360 and eec-1005191 .          b p gerkey , r t vaughan , k stoy , a howard , g s sukhatme , m j mataric , most valuable player : a robot device server for distributed control _ proc . of the ieee / rsj intl . conf . on intelligent robots and systems ( iros ) _ , 2001    m. quigley , b. gerkey , k. conley , j. faust , t. foote , j. leibs , e. berger , r. wheeler , and a. ng , `` ros : an open - source robot operating system , '' _ international conference on robotics and automation _ , 2009 .",
    "s. cooper , w. dann , and r. pausch , `` alice : a 3-d tool for introductory programming concepts , '' _ proceedings of the fifth annual ccsc northeastern conference on the journal of computing in small colleges _ ,",
    "107 - 116 .",
    "2000        s.a .",
    "thibault , r.marlet , c.consel , domain - specific languages : from design to implementation application to video device drivers generation , _ ieee transactions on software engineering _ volume : 25 issue : 3 , may / jun 1999"
  ],
  "abstract_text": [
    "<S> there is no dearth of new robots that provide both generalized and customized platforms for learning and research . </S>",
    "<S> unfortunately as we attempt to adapt existing software components , we are faced with an explosion of device drivers that interface each hardware platform with existing frameworks . </S>",
    "<S> we certainly gain the efficiencies of reusing algorithms and tools developed across platforms but only once the device driver is created .    </S>",
    "<S> we propose a domain specific language that describes the development and runtime interface of a robot and defines its link to existing frameworks . </S>",
    "<S> the robot device interface specification ( rdis ) takes advantage of the internal firmware present on many existing devices by defining the communication mechanism , syntax and semantics in such a way to enable the generation of automatic interface links and resource discovery . </S>",
    "<S> we present the current domain model as it relates to differential drive robots as a mechanism to use the rdis to link described robots to html5 via web sockets and ros ( robot operating system ) . </S>"
  ]
}