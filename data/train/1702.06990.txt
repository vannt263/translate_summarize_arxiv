{
  "article_text": [
    "for every @xmath3 $ ] stabilizer code @xmath4 there is a quantum circuit @xmath5 composed entirely of clifford gates that extracts the logical qubit of the code to the first physical qubit .",
    "we use this to define a ` recovery ' superoperator @xmath6 from operators in the physical hilbert space to operators in the code space .",
    "if @xmath7 is a projector onto the code space then :    @xmath8    where @xmath9 is a trace over all qubits but the first .",
    "@xmath6 can act on both density matrices and unitary operators .",
    "all @xmath10-to-1 magic state distillation procedures @xmath11 with a single output qubit can be brought into the form @xmath12 for some code @xmath4 without reducing distillation quality @xcite .",
    "therefore understanding @xmath6 is the key to understanding magic state distillation thresholds .",
    "let @xmath13 be the @xmath10-qubit pauli group . for @xmath14 ,",
    "the weight of a pauli operator @xmath15 is the number of qubits it acts on non - trivially , i.e. not with the identity operator .",
    "we denote phase of an operator with @xmath16 .",
    "an @xmath17 $ ] stabilizer code @xmath4 is a _ list _ of @xmath18 commuting pauli operators that generate an abelian subgroup @xmath19 .",
    "the code space is the common @xmath20 eigenspace of these operators . for this",
    "to be well defined all @xmath21 must have real eigenvalues , and thus real @xmath22 .",
    "the product of two commuting pauli operators with real phase also has real phase , and clifford operations preserve realness of phase .",
    "let us inspect how @xmath6 acts on @xmath13",
    ". the code space projector can be written like this : @xmath23 .",
    "if a pauli operator @xmath14 anticommutes with some @xmath24 then @xmath25 , so @xmath26 . preservation of the code space of a stabilizer code means to commute with the stabilizer @xmath27 .",
    "we have @xmath28 if and only if @xmath29 where @xmath30 is the normalizer of @xmath27 .",
    "we know that if @xmath31 is a pauli operator then either @xmath32 is also a pauli operator or @xmath26 .",
    "the normalizer @xmath33 contains all pauli operators that correspond to valid logical operations .",
    "therefore for @xmath34 we have @xmath35 , and for @xmath36 we have @xmath26 . since @xmath6 preserves group structure , we see that restricting @xmath6 to @xmath33 gives a homomorphism from @xmath37 .",
    "since the code space consists of eigenstates of @xmath27 , operators @xmath38 leave encoded states unchanged .",
    "thus @xmath39 if @xmath38 , i.e. @xmath27 is the kernel of @xmath6 . similarly if @xmath40 then @xmath41 . the rest of @xmath33 must be mapped to @xmath42",
    ". if we have an operator @xmath43 where @xmath44 , then for any @xmath45 we have @xmath46 . therefore the set of elements mapped to @xmath47 is the coset @xmath48 . similarly , the rest of @xmath33 can be divided into cosets , where each coset has a single real - phased element of @xmath49 as its image .    in summary",
    ", @xmath6 sends elements of @xmath13 to @xmath50 unless they are in @xmath33 .",
    "@xmath6 is a homomorphism from @xmath33 to @xmath49 with @xmath27 as its kernel .",
    "each coset of @xmath27 in @xmath33 is mapped to one of @xmath51 .",
    "this classification will be very important in the following derivation .",
    "now we explore how @xmath6 acts on density matrices interesting for magic state distillation . employing the bloch sphere formalism",
    ", an arbitrary single - qubit state can be written using a three - component vector @xmath52 with magnitude @xmath53 : @xmath54    the @xmath55 and @xmath0 magic states are defined by the bloch vectors @xmath56 and @xmath57 respectively , as in @xcite .",
    "@xmath55 is an eigenstate of the hadamard gate .",
    "@xmath0 is an eigenstate of what @xmath58 refers to as the @xmath59 gate , but to avoid confusion with the @xmath60-gate which also often carries that name , we will refer to as the @xmath61 gate as coined by gottesman in @xcite .",
    "it is defined by how it acts on pauli matrices by conjugation : @xmath62    clifford eigenstates like @xmath0 are valuable because _ any _ qubit state can be projected onto an axis given by @xmath63 with @xmath64 .",
    "this is achieved via an operation called _ twirling _ @xcite : @xmath65    twirling is achieved using classical randomness and clifford operations .",
    "now we can restrict our attention to density matrices whose bloch vectors @xmath52 are proportional to those of the @xmath55 and @xmath0 states .",
    "in fact , since tight magic state distillation for @xmath55 states is known to be possible @xcite , we focus only on the @xmath0 state . in this study",
    "we consider a class of input states where @xmath66 :    @xmath67    the derivation can also be done for arbitrary qubit mixed states .",
    "however , in this study we only consider the states on the positive half of the @xmath0-axis for simplicity .",
    "now we are ready to investigate @xmath68 .",
    "what follows is an expansion of this expression from which the signed weight enumerator pops out naturally from how @xmath6 acts on @xmath13 .",
    "first we expand the tensor product @xmath69 using the bloch sphere decomposition . in the expansion we encounter @xmath70 , the subset of @xmath13 with @xmath71 .",
    "@xmath72    now we apply @xmath6 , which acts linearly on the sum .",
    "all terms with @xmath36 will have @xmath26 and drop out .",
    "therefore we can assume that @xmath73 for the remaining terms .",
    "we also introduce the shorthand @xmath74 .",
    "@xmath75    notice that for every @xmath29 where @xmath76 , we also have @xmath77 where @xmath78",
    ". only one of @xmath79 is in @xmath70 .",
    "thus for each @xmath80 , only one of the constraints @xmath81 and @xmath82 can be satisfied .",
    "we can eliminate this redundancy by switching to a sum over all @xmath13 rather than just @xmath83 , and omitting the sum with @xmath82 .",
    "_ it is crucial that we take sign into account by writing @xmath84 instead of @xmath85 : _ when @xmath76 and @xmath86 then @xmath80 and @xmath87 as before . when @xmath76 and @xmath88 , then @xmath89 so @xmath90 correctly recovers the sum above .",
    "@xmath91    * definition 1 : * _ for an @xmath17 $ ] stabilizer code @xmath4 with recovery map @xmath6 , the * signed quantum weight enumerator * for a pauli operator @xmath92 is : _",
    "@xmath93    allowing the parameter @xmath85 gives this definition the flexibility to describe coset weight enumerators , which is related to the weight distribution of translates in a classical linear code .",
    "now we can simplify ( [ eq : esunsimp ] ) and calculate the output state of the distillation procedure .",
    "@xmath94\\ ] ]    @xmath95    from this calculation we can draw two conclusions , which we package into a theorem . + * theorem 1 : * let @xmath4 be an @xmath17 $ ] stabilizer code with a recovery map @xmath6 . let the input state @xmath1 have bloch vector @xmath96 and let @xmath97 .",
    "when using this code to distill magic states via the map @xmath98 , then :    1 .   for operators and bloch vector components @xmath99",
    ", the output state @xmath2 has a bloch vector @xmath100 whose components are given by @xmath101 , and 2 .",
    "the procedure succeeds with probability @xmath102 .",
    "weight enumerators are key ideas in classical coding theory @xcite . in the theory of quantum stabilizer codes",
    "weight enumerators appear less frequently . in this section",
    "we speculate why this is the case , and discuss some previous work involving quantum weight enumerators .",
    "we also prove that the signed quantum weight enumerator is np - hard to compute in general , but discuss why the proof may be unsatisfying for practical codes .    for quantum codes",
    "the situation is more complicated than that of classical codes . _ if the sign of operators is ignored _ , then a quantum code corresponds to a classical code over @xmath103 .",
    "following the construction in @xcite , we define for @xmath104 : @xmath105    then a signless pauli operator is a pair of vectors @xmath106 and can be written as @xmath107 .",
    "pairs of vectors in @xmath108 correspond to a vector space over @xmath109 with @xmath110 , via the map @xmath111 . using this connection to vector spaces",
    "we can define _ two _ different inner products of pauli operators : @xmath112 @xmath113    the standard inner product @xmath114 is useful when viewing a code @xmath27 as a vector space and calculating the null space which we write as @xmath115 .",
    "the _ symplectic _",
    "inner product @xmath116 is @xmath50 iff two operators commute , so @xmath117 is the normalizer of @xmath27 ( which we just called @xmath33 earlier ) .",
    "@xmath27 is abelian , so @xmath118 .",
    "the most important fact about classical weight enumerators is the macwilliams identity , which relates the weight enumerator of a code @xmath119 to its dual code @xmath120 .",
    "but what is the dual of a quantum code , @xmath115 or @xmath121 ?",
    "since @xmath27 has dimension @xmath18 and is part of a space with dimension @xmath122 ( pairs of vectors of @xmath108 ) , both of these potential duals must have dimension @xmath123 , which is too many to define a quantum code .",
    "even if the dimension were correct , self orthogonality according to @xmath116 is not guaranteed .",
    "so the dual of a quantum code does not have a satisfying definition for @xmath3 $ ] codes .",
    "it can only be done for @xmath124 $ ] codes , also known as stabilizer states .",
    "a quantum code s corresponding @xmath125 code has a dual , but that dual does not correspond to a quantum code .",
    "this limits the amount of meaning a quantum macwilliams identity can have , possibly explaining why weight enumerators show up less in quantum coding theory .",
    "however , that a quantum dual code can not always be defined does not imply that a quantum macwilliams identity can not be useful . in 1996 ,",
    "shor and laflamme @xcite defined a weight distribution of a quantum code that equaled the weight distribution of the corresponding @xmath125 code . since @xmath118",
    ", the coefficient on @xmath126 in the distribution of @xmath27 must be less than the @xmath126 coefficient in the distribution of @xmath117 .",
    "this gives a set of inequalities that any code must satisfy .",
    "these inequalities were used to show the non - existence of degenerate 5-qubit codes and [ [ 9 , 1 , 5 ] ] codes .",
    "quantum weight enumerators have also been used more recently : in 2017 ashikhmin used the shor - laflamme weight enumerators to give fidelity lower bounds for stabilizer codes @xcite .",
    "the shor - laflamme definition of quantum weight enumerators ignores the sign of the operators in @xmath27 .",
    "indeed , allowing negative weights complicates the mathematics , and disconnects the discussion from the well - studied classical codes over @xmath125 .",
    "however , for magic state distillation sign plays a key role .",
    "for example , @xcite showed that the 5 qubit code generated by : @xmath127 is viable for distilling @xmath0 states .",
    "but if the sign of any of these operators is flipped , the code becomes useless for this kind of distillation , so sign can not be ignored .",
    "one connection to classical coding theory seems to remain : the np - hardness of computing the weight enumerator .",
    "the difficulty of obtaining the weight distribution , or often even calculating the minimum weight of a code , plagues classical coding theory .",
    "even when restricting to a particular family of codes , for many of the important families including bch and reed - mller codes an efficient method for calculating the weight enumerator is not known @xcite .",
    "since the signed quantum weight distribution @xmath128 characterizes magic state distillation , this hardness may explain why finding good codes for distillation is so challenging .",
    "* theorem 2 : * calculating @xmath128 for an arbitrary @xmath17 $ ] code @xmath4 is np - hard .",
    "_ we give a standard reduction to the following np - hard problem @xcite : _ given a set @xmath4 of @xmath129 binary vectors in @xmath108 decide if the span of the vectors contains a vector with hamming weight @xmath130 .",
    "_ we focus on the case when @xmath131 .",
    "we construct a stabilizer code from the @xmath18 binary vectors , with a generator @xmath132 for every @xmath133 .",
    "the stabilizer group @xmath27 of this quantum code contains @xmath132 iff the span of @xmath4 contains @xmath134 .",
    "this code has no negative weight operators , so no cancellation can occur in the weight enumerator .",
    "thus if the @xmath126 coefficient in @xmath135 is zero then @xmath27 contains no operators of weight @xmath130 , so the span of @xmath4 can not contain any vectors with hamming weight @xmath130 .",
    "otherwise if the coefficient is nonzero such a vector must exist .",
    "@xmath136    in the general case there exist quantum codes with no negative phase operators , which is necessary for this proof to work .",
    "however , @xcite showed that under a reasonable set of assumptions every _ useful _",
    "@xmath17 $ ] code contains a negative operator .",
    "proving hardness for these codes is less obvious because negative terms can cancel positive terms , so an @xmath126 coefficient of @xmath128 can be zero even though weight @xmath130 operators exist .",
    "however , brute - force searches show that this cancellation never happens for codes with @xmath137 : operators with different sign tend to have different weight .    if one can show that for these useful codes the reduction can not hold , it would foster hope that a systematic way for constructing codes with good distillation thresholds exists .",
    "however , it may be more productive to simply find any non - trivial family of quantum codes for which the weight distribution can be calculated efficiently . given our current understanding this is at least as hard as the classical version of the problem , which already seems very difficult .",
    "in this section we apply signed quantum weight enumerators to the problem of finding the @xmath0 state distillation threshold of a quantum code . for positive @xmath138 ,",
    "all stabilizer codes which map @xmath139 have a distillation threshold @xmath140 , such that fidelity is only improved if @xmath138 is above the threshold .",
    "otherwise fidelity is lowered : @xmath141 .",
    "the threshold @xmath140 is an unstable fixed point of the distillation .",
    "often @xmath142 , meaning that the code is useless for @xmath0-state distillation because it always reduces fidelity .",
    "the best known threshold is that of the 5 qubit code ( [ eq:5qubit ] ) with @xmath143 .",
    "the lowest threshold imaginable is the surface of the stabilizer polytope @xmath144 , since if it were lower the code could distill states that can be prepared with clifford operations . in 2010",
    "@xcite showed that this threshold is unachievable by showing that the fidelity of the polytope surface state is decreased for all codes , so by continuity @xmath140 is strictly greater than @xmath145 .",
    "this restriction shows that tight magic state distillation of @xmath0 states is impossible using only a single code .",
    "this means that we must pursue infinite families of codes where @xmath146 as @xmath147 . in the previous section we argued how daunting this task is",
    ": we must give a family of codes where the weight enumerators are always known .",
    "in addition , we require that a property of the enumerators , @xmath140 , approaches @xmath145 .",
    "the difficulty of the challenge might be partially circumvented if @xmath140 could be extracted from the code without knowing the weight enumerator , but no method for doing this is known .",
    "now we describe how to extract @xmath140 given enumerators @xmath148 for all @xmath92 .",
    "recall from theorem 1 that the output bloch vector components are given by : @xmath149 if we twirl this state back into the form @xmath150 then all components are transformed @xmath151 .",
    "this may first require a clifford rotation of the output state into the positive octant , which just redefines @xmath5 in @xmath6 .",
    "we now impose an additional requirement on the code @xmath4 , which eliminates the need for twirling .",
    "* definition 2 : * _ an @xmath3 $ ] stabilizer code is * @xmath0-axis preserving * if it has a recovery map @xmath6 such that _ @xmath152    here it is necessary to mention @xmath6 because the recovery map has the symmetry @xmath153 for qubit clifford gates @xmath119 .",
    "this gate can permute the set @xmath154 , altering the equation in the definition .",
    "we do not consider a more general construction where the averaging over the different axes is taken into account , since this complicates matters and tends to worsen the performance of the code for @xmath0 state distillation .",
    "furthermore , there are so many quantum codes that restricting to codes that are easier to analyze is often a good idea . for a @xmath0-axis preserving code",
    ", we can label all weight enumerators @xmath155 as just @xmath156 :    @xmath157 now we rearrange this equation to define a polynomial that has a root whenever distillation has a fixed point .",
    "sketch of @xmath158 for some codes .",
    "the 5 qubit code s ( [ eq:5qubit ] ) polynomial is positive for some values , meaning it improves the fidelity of the input state .",
    "the same is true for a 7 qubit @xmath61-code defined by ( [ eq:7qubit ] ) . both intersect the @xmath138-axis at @xmath159 .",
    "if the sign of a single generator in the 5 qubit code is flipped , it fails to distill any states .",
    "the steane code ( [ eq : steane ] ) also fails at distilling @xmath0 states .",
    "the vertical bar at @xmath160 is the boundary of the stabilizer polytope.,scaledwidth=51.0% ]    * definition 3 : * _ if an @xmath3 $ ] stabilizer code is @xmath0-axis preserving then its * distillation polynomial * is : _",
    "@xmath161 the sign of @xmath158 determines if @xmath6 improves or worsens input state fidelity .",
    "the potential values for @xmath162 are given by the roots of the distillation polynomial .",
    "we can see @xmath163 is the increase in @xmath164 scaled by the success probability ( without the @xmath165 ) , so greater values indicate better distillation performance .",
    "the polynomial has some trivial roots . since @xmath166",
    "the coset @xmath167 can not contain @xmath168 , so @xmath169 .",
    "thus @xmath170 , implying that the maximally mixed state is a fixed point . the @xmath0 state @xmath171 is a fixed point , since @xmath6 contains only projections which map pure states to pure states .",
    "the result of @xcite that @xmath172 for all @xmath173 can now be regarded purely as a property of stabilizer codes , proved via results from magic state distillation .",
    "a search for @xmath174 shows that all codes that are @xmath0-axis preserving and have non - trivial fixed points have : @xmath175 @xmath176 all these codes have the same distillation properties as the 5 qubit code ( [ eq:5qubit ] ) . flipping the sign of any generator in any of these codes yields a useless ( @xmath142 ) , but @xmath0-axis preserving code .",
    "the search shows that no 5 qubit @xmath0-axis preserving code does better than @xmath159 .",
    "the steane code is a 7 qubit code with generators : @xmath177 this code achieves the optimal threshold for distillation of @xmath55 states , and is @xmath0-axis preserving .",
    "however it has @xmath142 , so it is no good for @xmath0 states .",
    "we plot the distillation polynomials for the codes we just described in fig .",
    "[ fig : examples ] .",
    "in the previous section we restricted our attention to @xmath0-axis preserving codes so that we could define the distillation polynomial @xmath158 .",
    "however , when numerically searching over the @xmath178 stabilizer codes this restriction does not significantly reduce the amount of work . in this section",
    "we restrict our set of codes with the goal of improving the runtime of search algorithms .",
    "* definition 4 : * _ an @xmath61**-code * * is an @xmath3 $ ] stabilizer code where the transversal @xmath61 gate , @xmath179 , is a logical operator . _",
    "* theorem 3 : * @xmath61 gates and @xmath61-codes have the following properties .    1 .   the 5 qubit ( [ eq:5qubit ] ) and steane codes ( [ eq : steane ] ) are @xmath61-codes",
    ". 2 .   if @xmath14 , then @xmath180 , i.e. acting on an operator by conjugation preserves weight .",
    "( this is true for all local clifford gates ) .",
    "3 .   if @xmath14 , then @xmath181 . @xmath182 and @xmath168",
    "are unique among single - qubit clifford gates in their operator sign preservation .",
    "@xmath61-codes are @xmath0-axis preserving .",
    "5 .   generators of an @xmath61-code have even weight .",
    "if the weight of an @xmath61-code generator @xmath183 is divisible by 4 , then @xmath71 .",
    "otherwise @xmath88 .",
    "@xmath61-codes have an even number of generators , which can be seen as pairs of @xmath31 and @xmath184 .",
    "_ see the appendix .",
    "@xmath136    searching over @xmath61-codes is made easier by their structure .",
    "since generators come in pairs by part 8) , the number of choices for pauli operators is cut in half .",
    "furthermore the sign of each generator is fixed by its weight , so searching over sign choices is no longer necessary . since @xmath61-codes are @xmath0-axis preserving by design , there is no need to verify this property .",
    "we use a recursive algorithm that tries to cut the amount of exponential searching as much as possible and aborts if an odd weight operator is encountered .",
    "we also use a standard form developed for graph states @xcite adapted to stabilizer codes by @xcite to even further reduce the number of possible generators .",
    "the algorithm is detailed in the appendix .",
    "ultimately , the search still runs in @xmath178 but the removal of some @xmath185 factors improves runtime .",
    "a python implementation on an quad - core computer was able to search @xmath186 overnight .",
    "all codes with a useful distillation threshold have : @xmath187 @xmath188    an example of such a code is : @xmath189 this code s distillation polynomial is shown in fig .  [",
    "fig : examples ] .",
    "we showed that for distillation of @xmath0 states the signed quantum weight enumerators @xmath148 characterize the distillation output .",
    "since calculating these weight enumerators is just as challenging as it is for classical codes , finding an infinite family of quantum codes that achieves tight magic state distillation will be challenging .",
    "it is exciting how this insight may play together with other approaches to studying qcsi resource states , such as hidden variable theories , and how this would impact the theory of quantum codes",
    ".    signed quantum weight enumerators give a direct method of calculating the distillation properties which can be tractable for small enough codes .",
    "a search over @xmath174 codes showed that all @xmath0-axis preserving codes that were useful had the same properties as the 5 qubit code , with threshold @xmath159 . by requiring a transversal @xmath61 gate which gives the code lots of structure",
    ", we were able to search @xmath190 , finding more codes with the same threshold as the 5 qubit code .",
    "the astronomical size of the search space for even small values of @xmath10 is still an obstacle for finding good codes for distillation . by searching different regions of the space , such as the @xmath61-codes in this study",
    ", we may eventually develop some intuition for devising methods for construction .",
    "we suspect that signed quantum weight enumerators will be a focal point for such systematic methods .",
    "the author acknowledges financial support from the ut austin physics department .",
    "scott aaronson at the ut austin cs department gave valuable advice throughout the project .",
    "the author also thanks dan browne at university college london for some helpful conversations .    2 sergei bravyi , alexei kitaev .",
    "`` universal quantum computation with ideal clifford gates and noisy ancillas '' http://journals.aps.org/pra/abstract/10.1103/physreva.71.022316[phys .",
    "rev . a 71 , 022316 ]",
    ", https://arxiv.org/abs/quant-ph/0403025[quant-ph/0403025 ] ( 2004 ) cecilia cormick , ernesto galvao , daniel gottesman , juan pablo paz , arthur pittenger `` classicality in discrete wigner functions '' http://journals.aps.org/pra/abstract/10.1103/physreva.73.012301[phys .",
    "a 73 , 012301 ] , https://arxiv.org/abs/quant-ph/0506222[quant-ph/0506222 ] ( 2005 ) earl campbell , dan browne .",
    "`` on the structure of protocols for magic state distillation '' https://arxiv.org/abs/0908.0838[quant-ph/0908.0838 ] ( 2009 ) earl campbell and dan browne",
    ". `` bound states for magic state distillation in fault - tolerant quantum computation '' http://journals.aps.org/prl/abstract/10.1103/physrevlett.104.030503[physical review letters 104 030503 ] https://arxiv.org/abs/0908.0836[quant-ph/0908.0836 ] ( 2009 ) maarten van den nest , jeroen dehaene , bart de moor .",
    "`` graphical description of the action of local clifford transformations on graph states '' http://journals.aps.org/pra/abstract/10.1103/physreva.69.022316[phys .",
    "a 69 , 022316 ] , https://arxiv.org/abs/quant-ph/0308151[quant-ph/0308151 ] ( 2003 ) ben reichardt .",
    "`` quantum universality from magic states distillation applied to css codes '' _ quantum inf .",
    "proc . 4(3):251 - 264 , 2005 _ , https://arxiv.org/abs/quant-ph/0411036[quant-ph/0411036 ] ( 2004 ) ben reichardt .",
    "`` quantum universality by state distillation '' _ quantum inf .",
    "9:1030 - 1052 _ , https://arxiv.org/abs/quant-ph/0608085[quant-ph/0608085 ] ( 2006 )",
    "bei zeng , andrew cross , isaac chuang .",
    "`` transversality versus universality for additive quantum codes '' _ ieee transactions on information theory 57 ( 9 ) , 6272 - 6284 _ , https://arxiv.org/abs/0706.1382[quant-ph/0706.1382 ] ( 2007 ) a. calderbank , e. rains , p. shor , n. sloane .",
    "`` quantum error correction via codes over gf(4 ) '' _ ieee trans .",
    "theory , 44(4):1369 - 1387 , 1998 _ https://arxiv.org/abs/quant-ph/9608006[quant-ph/9608006 ] ( 1998 ) peter shor , raymond laflamme .",
    "`` quantum macwilliams identities '' http://journals.aps.org/prl/abstract/10.1103/physrevlett.78.1600[phys . rev .",
    "78 , 1600 ] https://arxiv.org/abs/quant-ph/9610040[quant-ph/9610040 ] ( 1996 ) eric rains .",
    "`` quantum weight enumerators '' _ ieee trans .",
    "theory , 44(4):1388 - 1394 , 1998 _ https://arxiv.org/abs/quant-ph/9612015[quant-ph/9612015 ] ( 1996 ) eric rains .",
    "`` nonbinary quantum codes '' _ ieee trans .",
    "theory , 45(6):1827 - 1832 , 1999 _ https://arxiv.org/abs/quant-ph/9703048[quant-ph/9703048 ] ( 1997 )    daniel gottesman . `` stabilizer codes and quantum error correction '' https://arxiv.org/abs/quant-ph/9705052[quant-ph/9705052 ] ( 1997 )    alexander vardy .",
    "`` the intractability of computing the minimum distance of a code '' _ ieee transactions on information theory , vol 43 .",
    "( 1996 ) elwyn berlekamp , robert mceliece , henk van tilborg .",
    "`` on the inherent intractability of certain coding problems '' _ ieee transactions on information theory , vol .",
    "it-24 , no .",
    "3 _ ( 1978 ) gerardo vega .",
    "`` determining the full weight distribution of any irreducible cyclic code over any finite field of dimension two '' https://arxiv.org/abs/1606.08510[cs/1606.08510 ] ( 2016 ) daniel grier , luke schaeffer . `` the classification of stabilizer operations over qubits '' https://arxiv.org/abs/1603.03999[quant-ph/1603.03999 ] ( 2016 ) hillary dawkins , mark howard .",
    "`` qutrit magic state distillation tight in some directions '' http://journals.aps.org/prl/abstract/10.1103/physrevlett.115.030501[phys .",
    "115 , 030501 ] , http://arxiv.org/abs/1504.05965[quant-ph/1504.05965 ] ( 2015 ) mark howard , hillary dawkins .",
    "`` small codes for magic state distillation '' http://epjd.epj.org/articles/epjd/abs/2016/03/d150682/d150682.html[eur .",
    "j. d 70 : 55 ] , http://arxiv.org/abs/1512.04765[quant-ph/1512.04765 ] ( 2015 ) hussain anwar , earl campbell , dan browne .",
    "`` qutrit magic state distillation '' http://iopscience.iop.org/article/10.1088/1367-2630/14/6/063006/[new j. phys .",
    "14 , 063006 ] , https://arxiv.org/abs/1202.2326[quant-ph/1202.2326 ] ( 2012 ) victor veitch , christopher ferrie , david gross , joseph emerson .",
    "`` negative quasi - probability as a resource for quantum computation '' http://iopscience.iop.org/article/10.1088/1367-2630/14/11/113011/meta[new j. phys .",
    "15 039502 ] , https://arxiv.org/abs/1201.1256v4[quant-ph/1201.1256v4 ] ( 2012 ) earl campbell , hussain anwar , dan browne .",
    "`` magic state distillation in all prime dimensions using quantum reed - muller codes '' http://journals.aps.org/prx/abstract/10.1103/physrevx.2.041021[phys .",
    "x 2 041021 ] , https://arxiv.org/abs/1205.3104[quant-ph/1205.3104 ] ( 2012 ) mark howard , joel j. wallman , victor veitch , joseph emerson .",
    "`` contextuality supplies the magic for quantum computation '' http://www.nature.com/nature/journal/v510/n7505/full/nature13460.html[doi:10.1038/nature13460 ] , https://arxiv.org/abs/1401.4174[quant-ph/1401.4174 ] ( 2014 ) robert raussendorf , dan browne , nicolas delfosse , cihan okay , juan bermejo - vega . ``",
    "contextuality and wigner function negativity in qubit quantum computation '' http://journals.aps.org/prx/abstract/10.1103/physrevx.5.021003[phys rev x 5 , 021003 ] , http://arxiv.org/abs/1511.08506[quant-ph/1511.08506 ] , ( 2015 ) juan bermejo - vega , nicolas delfosse , dan browne , cihan okay , robert raussendorf . ``",
    "contextuality as a resource for qubit quantum computation '' https://arxiv.org/abs/1610.08529[quant-ph/1610.08529 ] ( 2016 ) f.j .",
    "macwilliams , n.j.a .",
    "`` the theory of error - correcting codes '' _ north - holland mathematical library .",
    "( 1993 ) john preskill `` fault - tolerant quantum computation '' https://arxiv.org/abs/quant-ph/9712048[quant-ph/9712048 ] ( 1997 ) victor veitch , seyed ali hamed mousavian , daniel gottesman , joseph emerson .",
    "`` the resource theory of stabilizer computation '' http://iopscience.iop.org/article/10.1088/1367-2630/16/1/013009/meta;jsessionid=3e7fd419de6442746a2eb15603239e00.c5.iopscience.cld.iop.org[new j. phys .",
    "16 , 013009 ] , https://arxiv.org/abs/1307.7171[quant-ph/1307.7171 ] ( 2013 ) nicolas delfosse , cihan okay , juan bermejo - vega , dan browne , robert raussendorf .",
    "`` equivalence between contextuality and negativity of the wigner function for qudits '' https://arxiv.org/abs/1610.07093[quant-ph/1610.07093 ] ( 2016 ) sergey bravyi , jeongwan haah `` magic state distillation with low overhead '' http://journals.aps.org/pra/abstract/10.1103/physreva.86.052329[phys . rev .",
    "a 86 , 052329 ] , https://arxiv.org/abs/1209.2426[quant-ph/1209.2426 ] ( 2012 ) alexei ashikhmin",
    ". `` fidelity lower bounds for stabilizer and css quantum codes '' _ ieee transactions on information theory , vol 60 , no 6 _ , https://arxiv.org/abs/1702.02591[quant-ph/1702.02591 ]",
    "1 .   verifiable by brute - force calculation .",
    "the steane code s generators ( [ eq : steane ] ) are already in the standard form described in part 8) .",
    "2 .   single - qubit clifford gates acting ( by conjugation ) on single - qubit pauli operators can not map @xmath42 to @xmath191 or vice versa .",
    "3 .   sign preservation follows immediately from the definition of the @xmath61 gate ( [ eq : m3gate ] ) . since single - qubit clifford gates permute @xmath154 a sign - preserving gate must permute @xmath192 and @xmath193 separately . a gate that is not @xmath182 or @xmath168 could hold one operator , say @xmath194 , fixed , and swap @xmath195 .",
    "then @xmath196 are eigenstates of the gate , so the gate must be @xmath194 or @xmath31 . but @xmath197 and @xmath198 .",
    "4 .   let us choose @xmath6 such that @xmath199 all have @xmath71 .",
    "each logical operator in @xmath200 or @xmath201 can be reached by another element of the same set by applying @xmath179 once or twice . since acting with @xmath179 preserves weight and sign ,",
    "@xmath202 is preserved by the map and all same - sign cosets have the same weight enumerator .",
    "thus @xmath203 so the code is @xmath0-axis preserving .",
    "+   + _ for the next three proofs we define a short hand . for @xmath204",
    "we write @xmath205 and @xmath206 .",
    "@xmath129 is to be inferred from the presence of a subscript as either @xmath10 or 1 . _ 5 .",
    "consider a generator @xmath207 for an @xmath61-code .",
    "notice that @xmath208 and @xmath209 always anticommute unless @xmath210 . in an @xmath61-code @xmath21 implies @xmath211 .",
    "we also require @xmath31 and @xmath212 commute , so @xmath208 and @xmath209 must anticommute for an even number of qubits .",
    "since the operators anticommute for all non - trivial qubits , @xmath15 must be even .",
    "6 .   consider some @xmath21 and @xmath211 in an @xmath61-code . by group closure",
    "their product must also be in @xmath27 .",
    "for single - qubit pauli operators @xmath208 different from @xmath168 notice that @xmath213 .",
    "therefore @xmath214 .",
    "but since @xmath215 is also in @xmath27 , and @xmath216 , we must have @xmath217 which is @xmath218 since @xmath15 is even . 7 .",
    "let us call a set @xmath219 a ` cycle ' .",
    "if we have two cycles @xmath219 and @xmath220 that share one element , e.g. @xmath221 , then @xmath222 and @xmath223 so the cycles are identical .",
    "thus two different cycles must be disjoint .",
    "we can thus decompose @xmath27 into some number of cycles and the identity .",
    "we can also multiply cycles together , so the cycles sort - of form a group on their own , except that there are three different ways to multiply cycles : @xmath224 @xmath225 @xmath226 .",
    "+ we can select some set of ` generator cycles ' that are defined to be independent of one another .",
    "generators of the code must be independent , and each cycle @xmath219 only contains two independent generators since @xmath227 .",
    "thus we can construct a generating set for the code out of @xmath228 for each generator cycle .",
    "since this construction can be done for all @xmath61-codes , all @xmath61-codes have an even number of generators .",
    "here we describe a method for searching over quantum codes , and adapt the method for @xmath61-codes using the results from theorem 3 . naively , an @xmath3 $ ] code is a list of @xmath18 pauli operators , which each have @xmath10 elements of @xmath229 as well as a sign .",
    "we need 2 bits per qubit pauli operator and one sign bit , resulting in @xmath230 bits worth of freedom in the code , so @xmath231 possibilities must be checked .",
    "our goal is to decrease the number of bits as much as possible , which will require some amount of polynomial overhead which we neglect in our runtime analysis .",
    "we would like to immediately force the generators to be in the standard form described in @xcite .",
    "for an arbitrary code , we can use the gram - schmidt process to diagonalize the @xmath47 part of the first @xmath18 qubits of each generator . this way , for the @xmath232th generator only the @xmath232th and last qubits can be @xmath47 or @xmath233 . in other words ,",
    "the @xmath232th generator of @xmath4 lies in the space spanned by : @xmath234      we know that generators in @xmath4 must be independent and commute .",
    "say we are given a partial generating set with @xmath237 generators , @xmath238 , and would like to construct a space containing all possible new generators .",
    "we can obtain this space by pruning @xmath239 so that all of the operators it spans commute with @xmath238 , and it is disjoint with span(@xmath238 ) excluding the identity .",
    "the space @xmath247 is the subspace of @xmath239 that commutes with @xmath238 .",
    "we can also use the routine to calculate the null space @xmath248 which can be used as a parity check matrix to test for membership in @xmath249 span(@xmath238 ) .",
    "we can use repeated membership tests to prune span(@xmath239 ) to be disjoint from span(@xmath238 ) .",
    "we begin by removing any operators in @xmath239 contained in span(@xmath238 ) .",
    "this is not enough , because products of operators in @xmath239 could still be in span(@xmath238 ) . to deal with these , we move operators one - by - one into an output list @xmath250 , and maintain a parity check matrix that checks for membership in span(@xmath251 ) .",
    "now we have developed techniques to enforce three different constraints on the space of @xmath232th operators to extend @xmath238 : it must be in @xmath239 , it must commute with @xmath238 and it must be disjoint ( excluding the identity ) from @xmath238 .",
    "we employ a recursion technique to iterate over all quantum codes over @xmath10 qubits that satisfy these constraints .",
    "we also demand that for all operators @xmath258 we have @xmath259 since smaller weights give trivial stabilizers .",
    "there are so many codes that the procedure can get quite memory intensive .",
    "we therefore analyze the codes immediately and aggregate the results as they are computed .      when diagonalizing the @xmath47 part of the generators we reduced the number of bits to search over per operator from @xmath268 to @xmath269 . analyzing the number of bits needed after applying the @xmath270 and @xmath271 routines , as well as requiring wt@xmath272 , is difficult because these steps do not reduce the number of generators consistently , especially if used together .",
    "however , they can only serve to reduce the total number of bits needed .",
    "table 1 shows the maximum number of bits needed until a code was found , showing a performance improvement up to a factor of @xmath273 for @xmath174 .",
    ".a quantum code in the standard form has @xmath274 bits worth of freedom ignoring sign . by enforcing independence and commutativity",
    "the maximum number of bits actually needed by algorithm 4 is less . [",
    "cols=\"^,^,^,^,^\",options=\"header \" , ]     the standard form described in @xcite is designed to eliminate degrees of freedom under which the code is invariant : we can multiply generators and rearrange qubits without changing the distillation properties of the code .",
    "however , the form does not completely eliminate all such redundancies . consider a code whose generators have no @xmath47 s or @xmath233 s .",
    "then there is no @xmath47-part to diagonalize , and we are simply searching over all @xmath275 binary matrices even though we would now be free to diagonalize the @xmath194-part .",
    "refining the standard form to account for this redundancy and possibly others could yield more efficiency boosts .",
    "now we discuss searching over @xmath61-codes , whose structure improves the runtime of the search algorithm . for general codes",
    "the analyze procedure must consider all possible signs of the generators , adding another @xmath165 possibilities .",
    "for an @xmath61-code the sign is determined by the weight of an operator by theorem 3 part 7 ) , so this is not necessary .",
    "from theorem 3 part 8) we know that an @xmath61-code has a standard from @xmath276 , where @xmath277 .",
    "thus for every new generator @xmath31 we select , we can immediately add @xmath212 .",
    "this halves the number of recursion steps , and brings the total number of bits to @xmath278 . doing so breaks the diagonalization of the @xmath47-part of the generators in @xmath4 , but this is not an issue .",
    "we can simply restrict the standard form even further by first diagonalizing the @xmath47-part of the generators , then taking the first half of the operators @xmath279 and writing those as @xmath280 .",
    "the general search algorithm was able to search all @xmath174 codes , and the @xmath61-code search algorithm was able to search all @xmath190 codes .",
    "the design goal of these algorithms was to minimize the number of generators in @xmath282 before for loop on line 8 ( for both algorithms ) iterates over the exponentially large @xmath283 .",
    "however , for such small values of @xmath10 , the exponential part of the algorithm may be comparable to the polynomial overhead incurred by truncating @xmath282 .",
    "we therefore tested several versions of the algorithms that traded polynomial and exponential elements and found that for @xmath284 most versions were quite similar in speed . for larger values of @xmath10",
    "we found the full version of the algorithms were best .",
    "good search algorithms use standard forms of the output to reduce the size of the search space .",
    "one can look for general symmetries in all codes , or one can impose additional symmetry as in @xmath61-codes or codeword stabilized codes as in @xcite .",
    "one further symmetry present in all codes interesting for @xmath0 state distillation is the distillation polynomial itself .",
    "thus if a standard form can be developed using clifford operations that preserve the distillation polynomial , the runtime can be improved even further .",
    "searching is most useful for finding small codes with good distillation properties in terms of threshold , distillation rate , and success probability .",
    "but for showing the possibility or impossibility of achieving tight distillation along the @xmath0-axis there is no substitute for a systematic analysis ."
  ],
  "abstract_text": [
    "<S> many proposals for fault - tolerant quantum computation require injection of ` magic states ' to achieve a universal set of operations . </S>",
    "<S> some qubit states are above a threshold fidelity , allowing them to be converted into magic states via ` magic state distillation ' , a process based on stabilizer codes from quantum error correction .    </S>",
    "<S> we define quantum weight enumerators that take into account the sign of the stabilizer operators . </S>",
    "<S> these enumerators completely describe the magic state distillation behavior when distilling @xmath0-type magic states . while it is straightforward to calculate them directly by counting exponentially many operator weights , it is also an np - hard problem to compute them in general . </S>",
    "<S> this suggests that finding a family of distillation schemes with desired threshold properties is at least as hard as finding the weight distributions of a family of classical codes .    additionally , we develop search algorithms fast enough to analyze all useful 5 qubit codes and some 7 qubit codes , finding no codes that surpass the best known threshold .    </S>",
    "<S> protection of quantum states via quantum error correction codes is crucial for achieving experimental quantum computation @xcite . </S>",
    "<S> however , implementing a full set of universal gates can be challenging inside an error correction code @xcite . in 2004 , </S>",
    "<S> bravyi and kitaev showed that clifford operations , a non - universal gate set , can be extended to universality via injection of certain ` magic states ' . </S>",
    "<S> furthermore , they showed that magic states could be distilled from several copies of lower - fidelity mixed resource states @xcite . </S>",
    "<S> this is known as quantum computing via state injection ( qcsi ) . </S>",
    "<S> more than a decade later , we still do not have a complete classification of mixed single - qubit states in terms of usefulness in qcsi , or a definitive method to distill an arbitrary useful state .    a discrete wigner function defined on prime - dimensional qudit states </S>",
    "<S> is a helpful tool for this classification . in the case of odd primes negativity of the wigner function </S>",
    "<S> is a necessary condition for usefulness of qcsi resource states @xcite . in the case of qubits </S>",
    "<S> the situation is more complicated , and is a subject of active study . </S>",
    "<S> wigner function negativity is no longer necessary for qubit resource states @xcite , and must be replaced with a classification in terms of non - contextual hidden variable theories @xcite . for odd - dimensional qudits </S>",
    "<S> these two notions coincide @xcite , so classification is easier .    </S>",
    "<S> resource states are distilled into magic states using stabilizer codes @xcite . </S>",
    "<S> several copies of the resource state @xmath1 are projected onto the code space of a stabilizer code , and an output state @xmath2 is decoded . </S>",
    "<S> codes vary in terms of the rate at which they improve the fidelity of resource states , and often several iterations are necessary to obtain a high - fidelity magic state . </S>",
    "<S> codes can also worsen the fidelity of resource states , and have a threshold input fidelity that is required for fidelity improvement . </S>",
    "<S> classification of resource states can be achieved by finding stabilizer codes with low - enough threshold fidelity @xcite , because they give an explicit scheme for constructing magic states from low - fidelity resource states .    </S>",
    "<S> our current picture of qubit resource states stems primarily from such explicit code constructions found in 2004 and 2006 . </S>",
    "<S> current works are attempting to classify qubit states using non - contextual hidden variable theories , which worked very well for odd prime dimensions @xcite . </S>",
    "<S> but even if a classification theory is available , it does not give an obvious method for code construction and searching over codes and states may still be needed @xcite . in the end </S>",
    "<S> , an explicit distillation scheme will be necessary for use in experiment . </S>",
    "<S> furthermore , we can not rule out the existence of resource states that according to hidden variable theories should be useful , but for some reason still can not be distilled by clifford operations . such resource states , if they exist , would be exciting because they might give a model of computation slightly weaker than bqp .    </S>",
    "<S> thus , understanding the distillation thresholds of stabilizer codes remains pivotal for qcsi research . </S>",
    "<S> the study presented in this paper is restricted to qubit systems , and codes with a single - qubit code space . after reviewing preliminaries in section  i , </S>",
    "<S> section  ii derives the main result : _ the distillation behavior of a stabilizer code is fully characterized by a signed version of its weight enumerators_. in section  iii we briefly compare these to previous studies of quantum weight enumerators @xcite from the late 1990s , and show that computing them in general is np - hard . in section  iv we show how to extract interesting distillation properties from the weight enumerators , and define a ` distillation polynomial ' summarizing this information . in section  </S>",
    "<S> v we analyze a class of codes with a particular transversal gate . </S>"
  ]
}