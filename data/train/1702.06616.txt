{
  "article_text": [
    "algorithmic problems in group theory we extensively studied since dehn @xcite introduced the word problem ( given a word over the generators , does it represent the identity ? ) and several other problems in 1911 . while , in general , all these problems are undecidable @xcite , for many particular classes of groups decidability results",
    "have been established   not just for the word problem but also for a wide range of other problems .",
    "finitely generated nilpotent groups are a class where many algorithmic problems are ( efficiently ) decidable ( although there are some exceptions like the problem of solving equations   see e.g.@xcite ) . in 1958 , malcev  @xcite established decidability of the word and subgroup membership problems by investigating finite approximations of nilpotent groups . in 1965 , blackburn  @xcite showed decidability of the conjugacy problem .",
    "however , these methods did not allow any efficient algorithms .",
    "nevertheless , in 1966 mostowski provided `` practical '' algorithms for the word problem and several other problems @xcite . in terms of complexity ,",
    "an important step for the word problem was the result by lipton and zalcstein @xcite that linear groups have word problem in  . together with the fact that finitely generated nilpotent groups are linear ( see e.g.  @xcite or  @xcite ) this gives a solution to the word problem in nilpotent groups , which was later improved to uniform @xmath0by robinson @xcite .",
    "a typical algorithmic approach to nilpotent groups is using so - called malcev ( or hall ",
    "malcev ) bases ( see e.g.  @xcite ) , which allow to carry out group operations by evaluating polynomials ( see lemma  [ lem : malcev ] ) .",
    "this approach was systematically used in  @xcite and @xcite or   in the more general setting of polycyclic presentations   in  @xcite for solving ( among others ) the membership and conjugacy problems in polycyclic groups . recently in @xcite polynomial time bounds for the equalizer and subgroup membership problems in nilpotent groups have been given .",
    "finally , in @xcite the following problems were shown to be in using the malcev basis approach . here , @xmath3 denotes the class of nilpotent groups of nilpotency class at most @xmath2 generated by at most @xmath1 elements .    *",
    "[ prob : wp ] the _ word problem _ : given @xmath4 and @xmath5 , is @xmath6 in @xmath7 ? * [ prob : nf ] given @xmath4 and @xmath5 , compute the ( malcev ) normal form of @xmath8 . *",
    "[ prob : mp ] the _ subgroup membership problem _ : given @xmath4 and @xmath9 , decide whether @xmath10 and if so express @xmath8 as a word over the subgroup generators @xmath11 . *",
    "[ prob : kp ] given @xmath12 and @xmath13 , a homomorphism @xmath14 specified by @xmath15 , and @xmath16 , compute a generating set for @xmath17 and find @xmath5 such that @xmath18 . *",
    "[ prob : p ] given @xmath4 and @xmath13 , compute a presentation for @xmath19 . *",
    "[ prob : c ] given @xmath4 and @xmath5 , compute a generating set for the centralizer of @xmath8 . *",
    "[ prob : cp ] the _ conjugacy problem _ : given @xmath4 and @xmath20 , decide whether or not there exists @xmath21 such that @xmath22 and if so find such an element @xmath23 .",
    "notice that these problems are not only of interest in themselves but also might serve as building blocks for solving the same problems in polycyclic groups   which are of particular interest because of their possible application in non - commutative cryptography @xcite . in this work",
    "we follow @xcite and extend the results of in several ways :    * we give a complexity bound of uniform @xmath0for all the above problems . *",
    "our description of circuits is for the uniform setting where @xmath4 is part of the input ( in @xcite the uniform setting is also considered ; however , only in some short remarks ) . *",
    "since nilpotent groups have polynomial growth , it is natural to allow compressed inputs : we give a uniform @xmath0solution for the word problem allowing words with binary exponents as input   this contrasts with the situation with straight - line programs ( also a method of exponential compression ) as input : then the word problem is hard for @xmath24 @xcite .",
    "thus , the difficulty of the word problem with straight - line programs is not due to their ability of compression but rather due to the difficulty of evaluating a straight - line program .",
    "* we show that the other of the above problems are uniform-@xmath0-turing - reducible to the extended gcd problem ( compute the greatest common divisor and express it as a linear combination ) when the inputs are ( both the ambient group and the subgroup etc . )",
    "are given as words with binary exponents .",
    "* we show how to solve the _ power problem _ in nilpotent groups .",
    "this allows us to apply a result from @xcite in order to show that iterated wreath products of nilpotent groups have conjugacy problem in @xmath0 .",
    "notice that while in @xcite explicit length bounds on the outputs for all these problems are proven , we obtain polynomial length bounds simply by the fact that everything can be computed in uniform @xmath0(for which in the following we only write @xmath0 ) . throughout the paper",
    "we follow the outline of @xcite . also many of our definitions are copies from @xcite .",
    "most of our theorems involve two statements : one for unary encoded inputs and one for binary encoded inputs . in order to have a concise presentation ,",
    "we always put them in one statement .",
    "we only consider finitely generated nilpotent groups without mentioning that further .",
    "[ [ outline . ] ] outline .",
    "we start with basic definitions on complexity as well as on nilpotent groups . in we describe how subgroups of nilpotent groups can be represented and develop a `` nice '' presentation for all groups in @xmath25 .",
    "deals with the word problem and computation of normal forms .",
    "after that we introduce the so - called matrix reduction and solve the subgroup membership problem .",
    "in we present our result for the remaining of the above problems , in we explain how to compute `` nice '' presentations , and in we apply the results of @xcite in order to show that the conjugacy problem of iterated wreath products of nilpotent groups is in @xmath0 . finally , we conclude with some open questions .",
    "for a finite _ alphabet _ @xmath26 , the set of _ words _ over @xmath26 is denoted by @xmath27 .",
    "computation or decision problems are given by functions @xmath28 for some finite alphabets @xmath29 and @xmath26 .",
    "a decision problem ( @xmath30 formal language ) @xmath31 is identified with its characteristic function @xmath32 with @xmath33 if , and only if , @xmath34 .",
    "( in particular , the word and conjugacy problems can be seen as functions @xmath35 . )    [ [ circuit - classes . ] ] circuit classes .",
    "the class @xmath36 is defined as the class of functions computed by families of circuits of constant depth and polynomial size with unbounded fan - in boolean gates ( and , or , not ) and majority gates .",
    "a majority gate ( denoted by @xmath37 ) returns @xmath38 if the number of @xmath38s in its input is greater or equal to the number of @xmath39s . in the following",
    "we always assume that the alphabets @xmath29 and @xmath26 are encoded over the binary alphabet @xmath40 such that each letter uses the same number of bits .",
    "we say a function @xmath41 is _",
    "@xmath0-computable _ if @xmath42 .    in the following ,",
    "we only consider @xmath43-uniform circuit families and we simply write @xmath44 as shorthand for @xmath43-uniform @xmath44 .",
    "@xmath43-uniform means that there is a deterministic turing machine which decides in time @xmath45 on input of two gate numbers ( given in binary ) and the string @xmath46 whether there is a wire between the two gates in the @xmath47-input circuit and also decides of which type some gates is .",
    "note that the binary encoding of the gate numbers requires only @xmath45 bits   thus , the turing machine is allowed to use time linear in the length of the encodings of the gates . for more details on these definitions",
    "we refer to @xcite .",
    "we have the following inclusions ( note that even @xmath48 is not known to be strict ) : @xmath49    [ [ reductions . ] ] reductions .",
    "a function @xmath41 is _ @xmath0-turing - reducible _ to a function @xmath8 if there is a @xmath43-uniform family of @xmath0circuits computing @xmath41 which , in addition to the boolean and majority gates , also may use oracle gates for @xmath8 ( i.e. , gates which on input @xmath50 output @xmath51 ) .",
    "this is expressed by @xmath52 .",
    "note that if @xmath53 are in @xmath0 , then @xmath54 .    in particular ,",
    "if @xmath41 and @xmath8 are @xmath44-computable functions , then also the composition @xmath55 is @xmath0-computable .",
    "we will extensively make use of this observation   which will also guarantee the polynomial size bound on the outputs of our circuits without additional calculations .",
    "we will also use another fact frequently without giving further reference : on input of two alphabets @xmath26 and @xmath29 ( coded over the binary alphabet ) , a list of pairs @xmath56 with @xmath57 and @xmath58 such that each @xmath57 occurs in precisely one pair , and a word @xmath59 , the image @xmath60 under the homomorphism @xmath61 defined by @xmath62 can be computed in @xmath0@xcite .",
    "[ [ encoding-numbers-unary-vs.binary . ] ] encoding numbers : unary vs.  binary .",
    "there are essentially two ways of representing integer numbers : the usual way as a binary number where a string @xmath63 with @xmath64 represents @xmath65 , and as a unary number where @xmath66 is represented by @xmath67 ( respectively by @xmath68 if @xmath47 is the number of input bits ) .",
    "we will state most results in this paper with both representations .",
    "the unary representation corresponds to group elements given as words over the generators , whereas the binary encoding will be used if inputs are given in a compressed form .",
    "[ ex : counttc ] the following problem @xmath69 is in @xmath0 : given a bit - string @xmath23 of length @xmath47 and a number @xmath70 ( we assume that it is given in unary as @xmath71 ) , decide whether the number of ones @xmath72 in @xmath23 is exactly @xmath73 .",
    "we have @xmath74 if , and only if , @xmath75 .",
    "thus , @xmath76 in particular , the word problem of @xmath77 when @xmath38 is encoded as @xmath38 and @xmath78 as @xmath39 , which is simply the question whether @xmath79 and @xmath47 even , is in @xmath0 .    [ [ arithmetic - in - mathsftc0 . ] ] arithmetic in @xmath0 .",
    "iterated addition ( resp .",
    "iterated multiplication ) are the following computation problems : on input of @xmath47 binary integers @xmath80 each having @xmath47 bits ( i.e. , the input length is @xmath81 ) , compute the binary representation of the sum @xmath82 ( resp .",
    "product @xmath83 ) .",
    "for integer division , the input are two binary @xmath47-bit integers @xmath84 ; the binary representation of the integer @xmath85 has to be computed .",
    "the first statement of is a standard fact , see @xcite ; the other statements are due to hesse , @xcite .",
    "[ thm : divisiontc][thm : additiontc ] the problems iterated addition , iterated multiplication , integer division are all in @xmath0no matter whether inputs are given in unary or binary .",
    "note that if the numbers @xmath86 and @xmath87 are encoded in unary ( as strings @xmath88 and @xmath89 ) , division can be seen to be in @xmath0very easily : just try for all @xmath90 whether @xmath91 .",
    "[ [ representing - groups - for - algorithmic - problems . ] ] representing groups for algorithmic problems .",
    "we consider a finitely generated groups @xmath7 together with finite generating sets @xmath92 .",
    "group elements are represented as words over the generators and there inverses ( i.e. , as elements of @xmath93 ) .",
    "we make no distinction between words and the group elements they represent .",
    "whenever it might be unclear whether we mean equality of words or of group elements , we write `` @xmath94 in @xmath7 '' for equality in @xmath7 .    words over the generators of @xmath77 corresponds to unary representation of integers . as a generalization of binary encoded integers , we introduce the following notion : a _ word with binary exponents _ is a sequence @xmath95 where the @xmath96 are from a fixed generating set of the group together with a sequence of exponents @xmath97 where the @xmath98 are encoded in binary .",
    "the word with binary exponents represents the word ( or group element ) @xmath99 .",
    "note that in a fixed nilpotent group _ every _ word of length @xmath47 can be rewritten as a word with binary exponents using @xmath45 bits ( this fact is well - known and also a consequence of below ) ; thus , words with binary exponents are a natural way of representing inputs for algorithmic problems in nilpotent groups .",
    "let @xmath7 be a group .",
    "for @xmath100 we write @xmath101 ( @xmath50 _ conjugated _ by @xmath102 ) and @xmath103 = x^{-1 } y^{-1 } xy$ ] ( _ commutator _ of @xmath50 and @xmath102 ) . for subgroups @xmath104 , we have @xmath105 = { \\left < \\mathinner{{\\left\\{[h_1,h_2]\\ ; \\middle|\\ ;   h_1 \\in h_1 , h_2 \\in h_2\\right\\ } } } \\right>}$ ] . a group @xmath7 is called _ nilpotent _ if it has central series , i.e. @xmath106 such that @xmath107\\leq g_{i+1}$ ] for all @xmath108 .",
    "if @xmath7 is finitely generated , so are the abelian quotients @xmath109 , @xmath110 . let @xmath111 be a standard basis of @xmath109 , i.e. a generating set in which @xmath109 has a presentation @xmath112 in the class of abelian groups , where @xmath113 and @xmath114 ( be aware that we explicitly allow @xmath115 ) .",
    "formally put @xmath116 for @xmath117 .",
    "note that @xmath118 is a polycyclic generating sequence for @xmath7 , and we call @xmath92 a _ malcev basis associated to the central series _  .",
    "sometimes we use @xmath92 interchangeably also for the set @xmath119 .    for convenience , we will also use a simplified notation , in which the generators @xmath120 and exponents @xmath121 are renumbered by replacing each subscript @xmath122 with @xmath123 , so the generating sequence @xmath92 can be written as @xmath124 .",
    "we allow the expression @xmath122 to stand for @xmath123 in other notations as well .",
    "we also denote @xmath125 by the choice of @xmath126 , every element @xmath5 may be written uniquely in the form @xmath127 where @xmath128 and @xmath129 whenever @xmath130 .",
    "the @xmath131-tuple @xmath132 is called the _ coordinate vector _ or _",
    "malcev coordinates _ of @xmath8 and is denoted @xmath133 , and the expression @xmath134 is called the _ ( malcev ) normal form _ of @xmath8 .",
    "we also denote @xmath135 .    to a malcev basis",
    "@xmath92 we associate a presentation of @xmath7 as follows . for each @xmath136 , let @xmath137 be such that @xmath138 ( 3.5pt,0pt ) -- ( 0,5.2pt);}}}}}{{{\\raisebox{.8pt}{\\hbox{\\tikz{\\draw[line width=0.6pt , line cap = round ] ( 3.5pt,0pt ) -- ( 0,5.2pt);}}}}}}{{\\raisebox{.5pt}{\\hbox{\\tikz{\\draw[line width=0.45pt , line cap = round ] ( 2.2pt,0 ) -- ( 0,3.8pt);}}}}}{{\\raisebox{.35pt}{\\hbox{\\tikz{\\draw[line width=0.4pt , line cap = round ] ( 1.5pt,0 ) -- ( 0,2.8pt);}}}}}}}}g_{n_i+1}$ ] .",
    "if @xmath130 , then @xmath139 , hence a relation @xmath140 holds in @xmath7 for @xmath141 and @xmath142 such that @xmath143 .",
    "let @xmath144 .",
    "since the series   is central , relations of the form @xmath145 hold in @xmath7 for @xmath146 and @xmath147 such that @xmath148 .",
    "now , @xmath7 is the group with generators @xmath126 subject to the relation of the the form ( [ stdpolycyclic1])([stdpolycyclic3 ] ) .",
    "a presentation with relations of the form ( [ stdpolycyclic1])([stdpolycyclic3 ] ) is called _",
    "nilpotent presentation_.    indeed , any presentation of this form will define a nilpotent group .",
    "it is called _ consistent _ if the order of @xmath149 modulo @xmath150 is precisely @xmath151 .",
    "while presentations of this form need not , in general , be consistent , those derived from a central series of a group @xmath7 as above are consistent .",
    "given a consistent nilpotent presentation , there is an easy way to solve the word problem : simply apply the rules of the form ( [ stdpolycyclic2 ] ) and ( [ stdpolycyclic3 ] ) to move all occurrences of @xmath152 in the input word to the left , then apply rules of the form ( [ stdpolycyclic1 ] ) to reduce their number modulo @xmath153 ; finally , continue with @xmath154 and so on .",
    "[ [ multiplication - functions . ] ] multiplication functions .",
    "an essential feature of the coordinate vectors for nilpotent groups is that the coordinates of a product @xmath155 may be computed as a `` nice '' function ( a polynomial if @xmath156 ) of the integers @xmath157 , and the coordinates of a power @xmath158 may similarly be computed as a function of @xmath159 and @xmath160 .",
    "the existence of such polynomial functions for torsion - free nilpotent groups is proved in @xcite and @xcite , and an explicit algorithm to construct them from a nilpotent presentation of @xmath7 is given in @xcite .",
    "if @xmath161 , the coordinate functions involve the extraction of quotients and remainders modulo @xmath151 : for @xmath130 , we define functions @xmath162 and @xmath163 by the decomposition @xmath164 where @xmath165 .",
    "let @xmath166 denote the set of all functions @xmath167 formed as a finite composition of the functions from the set @xmath168 using constants from @xmath169 , where @xmath170 and @xmath171 denote multiplication and addition in @xmath169 .",
    "hence , @xmath166 are essentially polynomials up to taking division with remainder by @xmath172 for @xmath173 .",
    "note that every @xmath174 is bounded by some polynomial .",
    "the next lemma is the crucial ingredient for solving algorithmic problems in nilpotent groups .",
    "[ lem : malcev ] let @xmath7 be a nilpotent group with malcev basis @xmath175 .",
    "there exist @xmath176 and @xmath177 satisfying the following properties . for every @xmath20 and @xmath178 , writing @xmath179 and @xmath180 ,    a.   @xmath181 , b.   @xmath182 , c.   if @xmath130 then @xmath183 and @xmath184 for some @xmath185 and @xmath186 , and d.   [ le : ab_operation ] if @xmath187 for all @xmath188 , or @xmath189 for all @xmath188 , then for all @xmath190 a.   @xmath191 and @xmath192 if @xmath193 , and b.   @xmath194 and @xmath195 if @xmath196 .",
    "let @xmath197 be elements of @xmath7 given in normal form by @xmath198 , for @xmath199 , and let @xmath200 . to the tuple @xmath201 we associate the _ matrix of coordinates _ @xmath202 and conversely , to any @xmath203 integer matrix",
    ", we associate an @xmath47-tuple of elements of @xmath7 , whose malcev coordinates are given as the rows of the matrix , and the subgroup @xmath204 generated by the tuple . for each @xmath199 where row @xmath205 is non - zero , let @xmath206 be the column of the first non - zero entry ( ` pivot ' ) in row @xmath205 .",
    "the sequence @xmath201 is said to be in _ standard form _ if the matrix of coordinates @xmath92 is in row - echelon form and its pivot columns are maximally reduced , more specifically , if @xmath92 satisfies the following properties :    a.   all rows of @xmath92 are non - zero ( i.e. no @xmath207 is trivial),[li : std_nontrivial ] b.   @xmath208 ( where @xmath209 is the number of pivots),[li : std_echelon ] c.   @xmath210 , for all @xmath199,[li : std_positive ] d.   @xmath211 , for all @xmath212 [ li : std_reduced ] e.   if @xmath213 , then @xmath214 divides @xmath215 , for @xmath216.[li : std_torsion ]    the sequence ( resp .",
    "matrix ) is called _ full _ if in addition    a.   [ li : std_full ] @xmath217 is generated by @xmath218 , for all @xmath136 .    in [ li : std_full ] , note that @xmath218 consists of those elements having 0 in their first @xmath219 coordinates .",
    "let us remark here that [ li : std_full ] holds for a given @xmath205 if and only if the following two properties hold :    1 .   for all @xmath220 with @xmath221 , @xmath222 and @xmath223",
    "are elements of @xmath224 .",
    "2 .   for all @xmath225 with @xmath221 and @xmath226 , @xmath227 .    indeed , ,",
    "[ le : ab_operation ] implies that @xmath228 , @xmath229 , and @xmath230 have coordinates 1 through @xmath231 being 0 so the forward implication is clear . for the converse ,",
    "see @xcite .",
    "we will use full sequences and the associated matrices in full form interchangeably without mentioning it explicitly . for simplicity",
    "we assume that the inputs of algorithms are given as matrices .",
    "the importance of full sequences is described in the following lemma   a proof can be found in @xcite propositions 9.5.2 and 9.5.3 .",
    "[ lem : uniquestandardform ] let @xmath232 .",
    "there is a unique full sequence @xmath233 that generates @xmath204 .",
    "we have @xmath234 and @xmath235    thus , computing a full sequence will be the essential tool for solving the subgroup membership problem . before we focus on subgroup membership , we will first solve the word problem and introduce how the nilpotent group can be part of the input .",
    "[ sec : presentation ]    let @xmath236 be fixed .",
    "the free nilpotent group @xmath237 of class @xmath2 and rank @xmath1 is defined as @xmath238 = 1 \\text { for } x_1 , \\dots , x_{c+1 } \\in f_{k , c } } \\ , \\right>}$ ] where @xmath239 = [ [ x_1 , \\dots , x_{c}],x_{c+1}]$ ] , i.e. , @xmath237 is the @xmath1-generated group only subject to the relations that weight @xmath240 commutators are trivial . throughout",
    ", we fix a malcev basis @xmath241 ( which we call the _",
    "standard malcev basis _ )",
    "associated to the lower central series of @xmath237 such that the associated nilpotent presentation consists only of relations of the form ( [ stdpolycyclic2 ] ) and ( [ stdpolycyclic3 ] ) ( such a presentation exists since @xmath237 is torsion - free ) , @xmath242 generates @xmath237 , and all other malcev generators are iterated commutators of @xmath242 .    denote by @xmath3 the set of @xmath1-generated nilpotent groups of class at most  @xmath2 .",
    "every group @xmath243 is a quotient of the free nilpotent group @xmath237 , i.e. , @xmath244 for some normal subgroup @xmath245 .",
    "assume that @xmath246 is a full sequence generating @xmath247 .",
    "adding @xmath248 to the set of relators of the free nilpotent group yields a new nilpotent presentation .",
    "this presentation will be called _",
    "quotient malcev presentation _ of @xmath7 . for inputs of algorithms",
    ", we assume that a quotient malcev presentation is always given as its matrix of coordinates in full form .",
    "depending whether the entries of the matrix are encoded in unary or binary , we call the quotient malcev presentation be given in _",
    "unary _ or _",
    "binary_.    [ lem : quotient_presentation ] let @xmath2 and @xmath1 be fixed integers and let @xmath241 be the standard malcev basis of @xmath237 .",
    "moreover , denote by @xmath249 the set of relators of @xmath237 with respect to @xmath92 .",
    "let @xmath4 with @xmath250 and let @xmath248 be the full - form sequence for the subgroup @xmath247 of @xmath237 .",
    "then , @xmath251 is a consistent nilpotent presentation of @xmath7 .",
    "clearly , we have @xmath252 . since @xmath253 is a nilpotent presentation and the elements of @xmath248 add relators of the form ( [ stdpolycyclic1 ] ) , the presentation is nilpotent . to prove that it is consistent , suppose some @xmath254 has order @xmath255 modulo @xmath256 in @xmath257 .",
    "since the order is infinite in @xmath258 , there must be element of the form @xmath259 in @xmath247 .",
    "but then , by , @xmath248 must contain an element @xmath260 where @xmath261 divides @xmath255 .",
    "hence @xmath255 can not be smaller than @xmath261 and so the presentation is consistent .",
    "for the following we always assume that a quotient malcev presentation is part of the input , but @xmath2 and @xmath1 are fixed .",
    "later , we will show how to compute quotient presentations from an arbitrary presentation .",
    "ensures that each group element has a unique normal form with respect to the quotient malcev presentation ; thus , it guarantees that all our manipulations of malcev coordinates are well - defined .",
    "in this section we deal with the word problem of nilpotent groups , which is well - known to be in @xmath0@xcite . here , we generalize this result by allowing words with binary exponents ( recall that _ word with binary exponents _ is a sequence @xmath99 where @xmath262 and the @xmath98 ) . by using words with binary exponents",
    "the input can be compressed exponentially   making the word problem , a priori , harder to solve .",
    "nevertheless , it turns out that the word problem still can be solved in @xmath0when allowing the input to be given as a word with binary exponents .",
    "notice that this contrasts with the situation where the input is given as straight - line program ( which like words with binary exponents allow an exponential compression )   then the word problem becomes complete for the counting class @xmath24 @xcite .",
    "[ thm : nilpotentexpwp ] let @xmath263 be fixed and let @xmath264 be the standard malcev basis of @xmath237 .",
    "the following problem is @xmath0-complete : on input of    * @xmath4 given as a binary encoded quotient malcev representation * a word with binary exponents @xmath99 ,    compute integers ( in binary ) @xmath265 such that @xmath266 in @xmath7 and @xmath267 for @xmath268 .",
    "moreover , if the input is given in unary ( both @xmath7 and @xmath269 ) , then the output is in unary .",
    "note that the statement for unary inputs is essentially the one of @xcite .",
    "be aware that in the formulation of this theorem , @xmath270 and @xmath172 for @xmath173 depend on the input group @xmath7 .",
    "these parameters can be read from the full matrix of coordinates representing @xmath7 as follows : as before denote the column index of the @xmath205-th pivot by @xmath271 .",
    "then @xmath272 ( i.e. , all columns which have a pivot ) and @xmath273 if @xmath274 .    as an immediate consequence of , we have :    [ cor : nilpotentexpwp ] let @xmath263 be fixed .",
    "the uniform , binary version of the word problem for groups in @xmath3 given as quotient malcev presentations is @xmath0-complete ( where the input is given as in ) .",
    "the hardness part is clear since already the word problem of @xmath77 is @xmath0-complete . for describing a @xmath0circuit",
    ", we proceed by induction along the standard malcev basis @xmath264 of the free nilpotent group @xmath237 .",
    "if @xmath269 does not contain any letter @xmath275 , we have @xmath276 and we can compute @xmath277 for @xmath278 by induction .    otherwise , we rewrite @xmath279 as @xmath280 with @xmath281 and a word with binary exponents @xmath282 not containing @xmath275 ( this is possible by [ le : ab_operation ]   as explained above , @xmath172 can be read directly from the quotient malcev presentation by checking whether there is a pivot in the @xmath205-th column ) .",
    "once we have this , @xmath283 can be rewritten as @xmath284 by induction .",
    "the exponent @xmath285 can be computed by iterated addition and division ( if @xmath286 ) , which by in in @xmath0(notice that in the unary case @xmath285 can be also written down in unary ) .",
    "the computation of @xmath287 , comprises two parts : the first part @xmath23 is introduced due to the fact that we reduce @xmath285 modulo @xmath153 ( and it is only necessary , in the case that @xmath286 ) , the second part @xmath288 consists of what remains from @xmath269 after @xmath275 has been `` eliminated '' .",
    "let @xmath289 be the power relation for @xmath275 ( which can be read from the quotient presentation   it is just the row where the pivot is in column @xmath38 ) and write @xmath290 .",
    "now , @xmath23 should be equal to @xmath291 in @xmath7 .",
    "we use the functions @xmath292 from ( ii ) ( these are fixed functions for @xmath237   for a definition , see ) yielding @xmath293 ( which , in the binary setting , is a word with binary exponents , and in the unary setting a word without exponents of polynomial length ) .    for the computation of @xmath288",
    ", we proceed as follows : for every position @xmath205 in @xmath269 such that @xmath294 , we compute @xmath295 using iterated addition . let @xmath296 . by there are fixed functions @xmath297 such that in the free nilpotent group @xmath298 hence , in order to obtain @xmath283 , it remains to replace every @xmath299 with @xmath300 by the empty word and every @xmath299 with @xmath301 by @xmath302 , which is a word with binary exponents ( resp .  as a word of polynomial length in the unary case ) , for @xmath303 .",
    "the exponents can be computed in @xmath0by . since",
    "the @xmath304 are bounded by polynomials , also in the unary case , @xmath302 can be written as a word without exponents .",
    "now , we have @xmath305 in @xmath7 as desired .",
    "computing greatest common divisors and expressing them as a linear combination is an essential step for solving the subgroup membership problem . indeed , consider the nilpotent group @xmath77 and let @xmath306 .",
    "then @xmath307 if , and only if , @xmath308 .    [ [ binary - gcds . ] ] binary gcds .",
    "the _ extended gcd problem _ ( @xmath309 ) is the following problem : on input of binary encoded numbers @xmath310 , compute @xmath311 such that @xmath312 in @xcite it is shown that when requiring the @xmath313 to be minimal ( with respect to the maximum norm ) the problem becomes @xmath314-complete . the unrestricted problem is in  , but it is not known whether it is actually in @xmath315 . since we need to compute greatest common divisors , we will reduce the subgroup membership problem to the computation of gcds .",
    "[ [ unary - gcds . ] ] unary gcds .",
    "computing the @xmath316 of numbers encoded in unary is straightforward in @xmath0by an exhaustive search ; however , it is not obvious how to compute the coefficients when expressing the @xmath316 of an arbitrary number of unary numbers as a linear combination in @xmath0 . in @xcite",
    "it is shown that the following can be computed in  : given integers @xmath317 as unary numbers , compute @xmath318 such that @xmath319 with @xmath320 . however , the algorithm there uses a logarithmic number of rounds   so it does not work in @xmath0 .",
    "[ ex : gcdeasy ] let @xmath321",
    ". then , there are @xmath322 with @xmath323 such that @xmath324 .",
    "this is easy to see : assume @xmath325 ( the other cases are similar ) and we are given @xmath326 with @xmath324 and @xmath327 , then we can replace @xmath50 with @xmath328 and @xmath102 with @xmath329 .",
    "this does not change the sum and by iterating this step , we can assure that @xmath330 .",
    "then we have @xmath331 ; hence , @xmath332 .",
    "if @xmath86 and @xmath87 are given in unary , the coefficients @xmath326 can be computed in @xmath0by simply checking all ( polynomially many ) values for @xmath50 and @xmath102 with @xmath323 .    however ,",
    "if we want to express the @xmath316 of unboundedly many numbers @xmath333 as a linear combination , we can not check all possible values for @xmath97 in @xmath0because there are @xmath334 ( i.e. , exponentially ) many .",
    "nevertheless , recently , in ( * ? ? ?",
    "* thm .  3.14 )",
    "the unary version of so - called @xmath335-integer - linear - programming ( in particular , systems of unary encoded integral linear equations ) has been shown to be in @xmath0 . expressing the greatest common divisor as a linear combination is such a system ( with only one equation ) .",
    "thus , ( * ? ? ?",
    "* thm .  3.14 ) allows to compute gcds and solves the subgroup membership problem for abelian groups . since the proof in @xcite involves a general meta - theorem on monadic second order logic on a special tree structure , we give a direct elementary proof   with the cost of weakening the bound on the coefficients slightly :    [ prop : gcd ] the following problem is in @xmath0 : given integers @xmath317 as unary numbers , compute @xmath318 ( either in unary or binary ) such that @xmath336 with @xmath337 .",
    "let @xmath338 , which clearly can be computed in @xmath0 .",
    "w.l.o.g .",
    "we assume that all the @xmath333 are positive .",
    "we assume that all numbers which appear as intermediate results are encoded in binary ( indeed , these numbers will grow to fast too encode them in unary ) .",
    "first observe that @xmath339 can be computed in @xmath0for all @xmath340 .",
    "the reason is simply that there are only linearly many numbers less than each @xmath333 .",
    "in fact , for computing @xmath341 , the circuit just checks for all @xmath342 whether for every @xmath205 there is some @xmath343 with @xmath344 .",
    "if for some @xmath345 there are such @xmath346 for all @xmath205 , we have found a common divisor .",
    "the @xmath316 is simply the largest one .",
    "thus , it remains to compute the coefficients @xmath313 .",
    "since we can compute @xmath341 in @xmath0 , we can divide all numbers @xmath333 by the @xmath316 and henceforth assume that @xmath347 ( note that this does not change the coefficients @xmath313 ) .",
    "the first step for computing the @xmath313s , is to compute @xmath348 for @xmath349 and @xmath350 ( note that by our assumption , @xmath351 ) .",
    "we have @xmath352 using this observation , the next step computes for each @xmath205 integers @xmath277 and @xmath353 such that @xmath354 .",
    "for all @xmath205 this can be done in parallel in @xmath0by simply trying all possible values with @xmath355 as in .",
    "we set @xmath356 these @xmath313 can be computed in @xmath0using iterated multiplication @xcite .",
    "moreover , an easy induction shows that @xmath357 there is only one problem with the numbers @xmath313 : in general , they to not meet the bounds @xmath358 .",
    "so , the next step will be to modify these @xmath313 in such a way that they meet the desired bound .",
    "the idea is to apply a sequence of operations as in in to make the coefficients small .",
    "the difficulty here is to find out where exactly to add / subtract a multiple of which @xmath333 .",
    "let @xmath359 and @xmath360 .",
    "note that @xmath361 and w.l.o.g .",
    "we can assume that @xmath362 .",
    "for all @xmath363 , we set    @xmath364    obviously , we have @xmath365 for @xmath366 and @xmath367 for @xmath368 .",
    "the non - zero @xmath369 correspond to those indices which have a too large positive @xmath313 and the non - zero @xmath370 to those indices which have a too small negative @xmath313 ( this is because we assumed the @xmath333 to be positive ) .",
    "moreover , @xmath313 should be decreased ( resp . increased ) by @xmath371 ( resp .",
    "@xmath372 ) in order to make it reasonably small .",
    "we will not be able to reach this aim completely , but with a sufficiently small error .",
    "next , we set @xmath373 and @xmath374 .",
    "all the @xmath369 , @xmath370 , @xmath375 , @xmath376 and @xmath377 and @xmath378 can be computed in @xmath0using iterated addition and division   see .",
    "[ lem : pnbound ] @xmath379    for @xmath380 , we have @xmath381 by definition of @xmath382 .",
    "likewise , we have @xmath383 for @xmath366 . since @xmath361 and @xmath362 , we obtain @xmath384 since we assumed @xmath385 that means @xmath386",
    ". the same argument yields @xmath387 , and thus @xmath388 .",
    "let @xmath389 . for @xmath368 and @xmath390",
    ", we set @xmath391 and @xmath392 and @xmath393 . because of , we have @xmath394 . clearly , the @xmath395 can be computed in @xmath0and from now on we will work with these numbers .",
    "also , as an immediate consequence of and , we have @xmath396 now , for @xmath380 and @xmath390 , we define @xmath397 note that the cases overlap .",
    "however , then the different definitions of @xmath398 agree . for @xmath399 and @xmath400 , we set @xmath401 and in all other cases @xmath402 .",
    "we have @xmath403    we set @xmath404 for @xmath405 .",
    "notice that , since @xmath406 , this means that @xmath407    finally , we define our new coefficients @xmath408 as follows : @xmath409 it remains to show the following :    1 .   the numbers @xmath408 can be computed in @xmath0 2 .",
    "@xmath410 3 .",
    "@xmath411 for all @xmath205 .",
    "the first point is straightforward : we already remarked that the @xmath412 , @xmath413 , @xmath414 , @xmath415 and @xmath377 and @xmath378 can be computed in @xmath0 .",
    "hence , also the @xmath416 can be computed in @xmath0(as simple boolean combination resp .",
    "addition of the previous numbers ) .",
    "now , the @xmath417 can be computed using division @xcite .",
    "finally , the computation of the @xmath418 is simply another application of iterated addition .    for the second point observe that @xmath419 the last equality is due to the fact that @xmath420 for all @xmath421 and that @xmath422 if @xmath205 and @xmath73 are both in @xmath377 or both in @xmath378 .    the third point will be shown in the below",
    "this concludes the proof .",
    "[ lem : xibound ] @xmath423    let @xmath368 .",
    "then , @xmath424 let us distinguish the two cases : first , let @xmath425 for some @xmath73 .",
    "then , @xmath426 for all @xmath427 , i.e. , we have @xmath428 . therefore , by , it follows that @xmath429    now , let @xmath430 for any @xmath73 .",
    "we define @xmath431 then we have @xmath432 because @xmath433 and @xmath434 . now , @xmath435 by and because @xmath436 .",
    "this completes the proof for @xmath368 .",
    "the case @xmath366 is completely symmetric .",
    "notice that it is straightforward to improve the bounds of further ( e.g.getting rid of the factor @xmath47 ) .",
    "however , since there is no need for that in order to perform the matrix reduction , we do not do this additional effort .",
    "also we could not find an explicit description of a @xmath0circuit which yields the bound @xmath437   although it is clear that such a circuit exists by ( * ? ? ?",
    "* thm .  3.14 ) .",
    "[ se : presentation ]    in @xcite , the so - called matrix reduction procedure converts an arbitrary matrix of coordinates into its full form and , thus , is an essential step for solving the subgroup membership problem and several other problems .",
    "it was first described in @xcite   however , without a precise complexity estimate . in this section",
    ", we repeat the presentation from @xcite and show that for fixed @xmath2 and @xmath1 , it can be actually computed uniformly for groups in @xmath25by a uniform family of @xmath0circuits   in case the inputs are represented as words .",
    "if the inputs are represented as words with binary exponents , then we still can show that it is @xmath0-turing - reducible to @xmath309 . in , we defined the matrix representation of subgroups of nilpotent groups .",
    "we adopt all notation from .",
    "as before , let @xmath263 be fixed and let @xmath264 be the standard malcev basis of @xmath237 .",
    "let @xmath4 be given as quotient malcev presentation , i.e. , as a matrix in full form ( either with unary or binary coefficients ) .",
    "we define the following operations on tuples @xmath201 ( our subgroup generators ) of elements of @xmath7 , and the corresponding operations on the associated matrix , with the goal of converting @xmath201 to a sequence in full form generating the same subgroup @xmath200 :    1 .",
    "swap @xmath207 with @xmath438 .",
    "this corresponds to swapping row @xmath205 with row @xmath73.[row : swap ] 2 .",
    "replace @xmath439 by @xmath440 ( @xmath441 ) .",
    "this corresponds to replacing row @xmath205 by @xmath442.[row : substraction ] 3 .   add or remove a trivial element from the tuple",
    "this corresponds to adding or removing a row of zeros ; or ( 3 ) a row of the form @xmath443 , where @xmath444 and @xmath445.[row : trivial ] 4 .",
    "replace @xmath439 with @xmath446 .",
    "this corresponds to replacing row @xmath205 by @xmath447 .",
    "[ row : inverse ] 5 .",
    "append to the tuple an arbitrary product @xmath448 of elements already in the tuple : add a new row with @xmath449.[row : add_linear ]    clearly , all three of these operations preserve @xmath204 .",
    "[ lem : operationstc ] on input of a quotient presentation of @xmath450 in unary ( resp .",
    "binary ) and a matrix of coordinates @xmath92 given in unary ( resp .",
    "binary ) , operations ( 1)(5 ) can be done in @xmath0(with the results being encoded in unary again ) . for operations ( 2 ) and ( 5 ) , we require that the exponents @xmath160 , @xmath451 are given in unary ( resp .",
    "the output matrix will be also encoded in unary ( resp .",
    "binary ) .",
    "moreover , as long as the rows in the matrix which are changed are pairwise distinct , a polynomial number of such steps can be done in parallel in @xmath0 .",
    "operations ( 1 ) and ( 3 ) , clearly can be done in @xmath0 .",
    "notice that operation ( 3 ) means simply that a row of the quotient presentation of @xmath7 is appended to the matrix .    in the unary case",
    ", it follows directly from that operations ( 2 ) , ( 4 ) , and ( 5 ) are in @xmath0because , since @xmath160 , @xmath451 are given in unary , the respective group elements can be written down as words .    in the case of binary inputs , ( 5 ) works as follows ( ( 2 ) and ( 4 ) analogously ) : by ( ii ) , there are functions @xmath177 such that for every @xmath452 with @xmath453 and every @xmath178 , we have @xmath454 in @xmath237 .",
    "these functions can be used to compute @xmath455 for @xmath456 .",
    "after that , @xmath448 can be written down as word with binary exponents and can be applied yielding the result .    using the row operations defined above , in @xcite it",
    "is shown how to reduce any coordinate matrix to its unique full form , thus producing the unique full sequence for @xmath204 .",
    "let us repeat these steps :    let @xmath457 be a matrix of coordinates , as in ( [ eqn : coordinatematrix ] ) in . recall that @xmath458 denotes the column index of the @xmath459-th pivot ( of the full form of @xmath460 ) .",
    "we produce matrices @xmath461 , where @xmath209 is the number of pivots in the full form of @xmath457 , such that for every @xmath462 the first @xmath458 columns of @xmath463 form a matrix satisfying conditions [ li : std_echelon]-[li : std_torsion ] of being a full sequence , condition [ li : std_full ] is satisfied for all @xmath464 , and @xmath465 is the full form of @xmath457 . here",
    "we formally denote @xmath466 .",
    "set @xmath467 and assume that @xmath468 has been constructed for some @xmath469 .",
    "in the steps below we construct @xmath463 .",
    "we let @xmath47 and @xmath131 denote the number of rows and columns , respectively , of @xmath468 . at all times during the computation , @xmath207 denotes the group element corresponding to row @xmath205 of @xmath463 and @xmath470 denotes the @xmath471-entry of @xmath463 , which is @xmath472 .",
    "these may change after every operation .",
    ": :    locate the column @xmath473 of the next    pivot , which is the minimum integer    @xmath474    such that @xmath475 for    at least one @xmath476 .",
    "if no such integer exists ,    then @xmath477 and @xmath465 is already    constructed .",
    "otherwise , set @xmath463 to be a copy of    @xmath468 and denote    @xmath478 .",
    "compute a linear expression of    @xmath479    let @xmath480 and    note that @xmath481 has coordinates of the form    @xmath482    with @xmath345 occurring in position    @xmath483 .",
    "perform    operation  [ row : add_linear ] to append @xmath481 as row    @xmath484 of @xmath463 .",
    ": :    for each @xmath485 , perform    operation  [ row : substraction ] to replace row @xmath205 by    @xmath486 and for each @xmath487 , use [ row : substraction ]    to replace row @xmath205 by @xmath488 after that , swap row @xmath459 with row @xmath484    using [ row : swap ] . at this point , properties    [ li : std_echelon]-[li : std_reduced ] hold on the first @xmath459    columns of @xmath463 .",
    ": :    if @xmath489 , we    additionally ensure condition  [ li : std_torsion ] as follows .",
    "perform row    operation  ( 3 ) , with respect to @xmath483 ,    to append a trivial element @xmath490 with    @xmath491    to @xmath463 .",
    "let    @xmath492 and compute    the linear expression    @xmath493 , with    @xmath494 .",
    "let @xmath495 and append    this row to @xmath463 , as row @xmath496 .",
    "note that    @xmath497 ,    with @xmath498 in position    @xmath483 .",
    "replace row @xmath459 by    @xmath499    and row @xmath500 by    @xmath501 ,    producing zeros in column @xmath483 in    these rows .",
    "swap row @xmath459 with row @xmath496 . at    this point , [ li : std_echelon ] , [ li : std_positive ] , and [ li : std_torsion ]    hold ( for the first @xmath473 columns )    but [ li : std_reduced ] need not , since the pivot entry is now    @xmath498 instead of @xmath345 . for each    @xmath502 ,",
    "replace row @xmath73 by    @xmath503 ,    ensuring [ li : std_reduced ] .",
    ": :    identify the next pivot @xmath504 ( like    in step 1 ) .",
    "if @xmath473 is the last    pivot , we set @xmath505 .",
    "we now    ensure condition [ li : std_full ] for @xmath506 .",
    "observe    that steps 1 - 3 preserve    @xmath507    for all @xmath508 .",
    "hence [ li : std_full ]    holds in @xmath463 for    @xmath508 since it holds in    @xmath468 for the same range .",
    "now consider @xmath205    in the range    @xmath509 .",
    "it suffices to establish ( vi.i ) for all @xmath510 and ( vi.ii )    for @xmath473 only . to obtain ( vi.i ) ,",
    "notice that    @xmath511    if , and only if ,    @xmath512\\in { \\left < \\ , \\mathinner { h_{\\ell}}\\ ; \\middle|\\;\\mathinner { \\ell > k } \\ , \\right>}$ ] .",
    "further , note that the subgroup generated by    @xmath513,\\ldots , [ h_j , h_k,\\ldots , h_k]\\},\\ ] ]    where @xmath514 appears    @xmath515 times in the last commutator ,    is closed under commutation with @xmath514 since if    @xmath516 appears more than    @xmath515 times then the commutator is    trivial .",
    "an inductive argument shows that the subgroup    @xmath517 coincides with    @xmath518 .",
    "similar observations can be made for conjugation by    @xmath519 .",
    "therefore , appending via operation    [ row : add_linear ] rows    @xmath520 for all    @xmath521 and all    @xmath522 delivers ( vi.i ) for all @xmath510 .",
    "note that ( vi.i ) remains true for    @xmath508 .",
    "+    to obtain ( vi.ii ) , in the case @xmath523 , we    add row    @xmath524 .    note that this element commutes with @xmath514 and",
    "therefore    ( vi.i ) is preserved .",
    ": :    using operation [ row : trivial ] , eliminate all zero rows .",
    "the matrix    @xmath463 is now constructed .",
    "we have to show that each step can be performed in @xmath0given that all malcev coordinates are encoded in unary ( resp .",
    "in @xmath525 if malcev coordinates are encoded in binary ) . since the total number of steps is constant ( only depending on the nilpotency class and number of generators ) , this gives a @xmath0(resp .",
    "@xmath525 ) circuit for computing the full form of a given subgroup .",
    ": :    the next pivot can be found in @xmath0since it is    simply the next column in the matrix with a non - zero entry , which can    be found as a simple boolean combination of test whether the entries    are zero . in the unary case , by ,",
    "@xmath526    can computed in @xmath0together with    @xmath527 encoded in unary such that    @xmath528 .",
    "now , by , step 1 can be done in @xmath0 .",
    "+    in the binary case , @xmath345 and @xmath527    can be computed using @xmath309 .",
    "hence , by , step    1 can be done in    @xmath525 .",
    ": :    the numbers    @xmath529    ( either in unary or binary ) can be computed in    @xmath0for all @xmath205 in parallel by .",
    "after that one operation ( 2 ) is applied to each row of the matrix . by    , this can be done in parallel for all rows in    @xmath0 . finally , swapping rows @xmath459    and @xmath484 can be done in @xmath0 .",
    ": :    as explained in , @xmath270 and @xmath530    for @xmath173 can be read directly from the    quotient malcev presentation .",
    "thus , it can be decided in    @xmath0whether step 3 has to be executed .    appending a new row",
    "is in @xmath0 .",
    "computing    @xmath531 is in    @xmath0by ( in the unary case ) and in    @xmath525    in the binary case .",
    "after that one operation ( 5 ) is followed by two    operations ( 2 ) , one operation ( 1 ) , and , finally , @xmath532    times operation ( 2 ) , which all can be done in    @xmath0again by .",
    ": :    the next pivot can be found in @xmath0as outlined    in step 1 .",
    "after that , step 4 consists of an application of a constant    number ( only depending on the nilpotency class and number of    generators ) of operations ( 5 ) and thus , by , is in    @xmath0 .",
    ": :    clearly that is in @xmath0 .",
    "thus , we have completed the proof of the following theorem :    [ thm : compute_std_form ] let @xmath263 be fixed .",
    "the following problem is in @xmath0 : given a unary encoded quotient malcev presentation of @xmath450 and @xmath533 , compute the full form of the associated matrix of coordinates encoded in unary and hence the unique full - form sequence @xmath534 generating @xmath535 .",
    "moreover , if the @xmath7 and @xmath11 are given in binary , then the full - form sequence with binary coefficients can be computed in @xmath525 .",
    "[ se : presentation ]    we can now apply the matrix reduction algorithm to solve the subgroup membership problem in @xmath0 .    [ thm : logspace_membership ] let @xmath263 be fixed .",
    "there is a uniform family of @xmath0(resp .",
    "@xmath525 for binary inputs ) circuits that , given a quotient malcev presentation of @xmath450 , elements @xmath533 and @xmath536 , decides whether or not @xmath537 is an element of the subgroup @xmath538 .",
    "moreover , if @xmath539 , the circuit computes the unique expression @xmath540 where @xmath534 is the full - form sequence for @xmath204 with the @xmath541 encoded in unary ( resp .",
    "binary ) .",
    "alternatively , for unary inputs , the output can be given as word @xmath542 where @xmath543 and @xmath544 .",
    "note that we do not know whether there is an analog of the second type of output for binary inputs",
    ". a possible way of expressing the output would be as a word with binary exponents over @xmath11 . however , simply applying the same procedure as for unary inputs will not lead to a word with binary exponents .",
    "the circuit works as follows : first , the the full form @xmath92 of the coordinate matrix corresponding to @xmath204 and the standard - form sequence @xmath545 are computed in @xmath0(resp .",
    "@xmath525 ) using .",
    "as before , denote by @xmath470 the @xmath471-entry of @xmath92 and by @xmath546 its pivots .    by lemma  [ lem : uniquestandardform ] ,",
    "any element of @xmath204 can be written as @xmath547 .",
    "we show how to find these exponents .",
    "denote @xmath548 and @xmath549 , with @xmath550 being defined below . for @xmath551 ,",
    "do the following . if @xmath552 for any @xmath553 , then @xmath554 . otherwise , check whether @xmath555 divides @xmath556 . if not , then @xmath554 .",
    "if yes , let @xmath557 if @xmath558 , continue to @xmath559 . if @xmath560 , then @xmath561 if @xmath562 and @xmath554 otherwise .",
    "since @xmath209 is bounded by a constant , there are only a constant number of steps .",
    "each step can be done in @xmath0by ( division ) and ( computation of malcev coordinates ) .    for the second type of output in the unary case , while performing the matrix reduction , we store for every row of the matrix also how that row can be expressed as a word over the subgroup generators @xmath563 ( here , we need the unary inputs , as otherwise the group elements can not be expressed as words in polynomial space ) . in every operation on the matrix",
    "these words are updated correspondingly , which clearly can be done in @xmath0 . in the end after writing @xmath540 , every @xmath564 can be substituted by the respective word .    since abelian groups are nilpotent , we obtain :    [ cor : smpab ] let @xmath1 be fixed .",
    "the following problem is in @xmath0 : given a list @xmath565 and @xmath566 ( all as words over the generators ) , decide whether @xmath567 .",
    "the full - form sequence associated to a subgroup @xmath204 forms a malcev basis for @xmath204 .",
    "this allows us to compute a consistent nilpotent presentation for @xmath204 .",
    "note , however , that the resulting presentation is _ not _ a quotient malcev presentation ( although it can be transformed into one , see )   partly this is due to the fact that , in general , @xmath568 .",
    "the following is the extended version of ( * ? ? ?",
    "* thm .  3.11 ) :    [ thm : effectivecoherence ] let @xmath263 be fixed .",
    "the following is in @xmath0for unary inputs and in @xmath525 for binary inputs :    _ input : _ a quotient malcev presentation for @xmath450 and elements @xmath569 .",
    "_ output : _ a consistent nilpotent presentation for @xmath570 given by a list of generators @xmath534 and numbers @xmath571 encoded in unary ( resp .",
    "binary ) for @xmath572 representing the relations ( [ stdpolycyclic1])-([stdpolycyclic3 ] ) .",
    "first , the full sequence @xmath534 for @xmath204 is computed in @xmath0(resp .",
    "@xmath525 ) according to .",
    "let @xmath573 . in the proof of (",
    "* thm .  3.11 ) ,",
    "it is shown that @xmath534 is a malcev basis for @xmath204 .",
    "hence , it remains to compute the relators ( [ stdpolycyclic1])-([stdpolycyclic3 ] ) in order to give a consistent nilpotent presentation of @xmath204 .",
    "the order @xmath574 of @xmath575 modulo @xmath576 is simply @xmath577 ( as before @xmath270 and @xmath530 for @xmath173 can be read from the quotient malcev presentation ) .",
    "each relation ( [ stdpolycyclic1 ] ) can be computed using the @xmath0(resp .",
    "@xmath525 ) circuit of with input @xmath578 and @xmath579 .",
    "since @xmath580 and @xmath581 is the unique full sequence for @xmath576 , the membership algorithm returns the expression on the right side of ( [ stdpolycyclic1 ] ) .",
    "relations ( [ stdpolycyclic2 ] ) and ( [ stdpolycyclic3 ] ) are established using the same method .",
    "note that there are only a constant number of relations to establish   so everything can be done in @xmath0(resp .",
    "@xmath525 ) .",
    "given nilpotent groups @xmath7 and @xmath204 and a subgroup @xmath582 and a generating set @xmath583 of @xmath19 , a homomorphism @xmath584 can be specified by a list of elements @xmath11 where @xmath15 for @xmath199 . for a homomorphism , we consider the problem of finding a generating set for its kernel , and given @xmath585 finding @xmath5 such that @xmath18 . following @xcite ,",
    "both problems are solved using matrix reduction in the group @xmath586 .",
    "[ thm : kernelandpreimage ] let @xmath263 be fixed .",
    "the following is in @xmath0for unary inputs and in @xmath525 for binary inputs : on input of    * @xmath587 given as quotient malcev presentations , * a subgroup @xmath588 , * a list of elements @xmath11 defining a homomorphism @xmath14 via @xmath15 , and * optionally , an element @xmath539 guaranteed to be in the image of @xmath61 ,    compute    1 .   a generating set @xmath589 for the kernel of @xmath61 , and [ kernel ] 2 .",
    "an element @xmath5 such that @xmath18.[preimage ]    in case of unary inputs , @xmath589 and @xmath8 will be returned as words , and for binary inputs , as words with binary exponents .",
    "let @xmath264 be the standard malcev basis of @xmath237 and @xmath590 the standard malcev basis of @xmath591 we have two embeddings of @xmath592 with @xmath593 and @xmath594 for @xmath595 .",
    "we can assume that the malcev basis of @xmath591 is chosen in such a way that these embeddings send all malcev generators of @xmath237 to malcev generators of @xmath591 .",
    "note that we have @xmath596 .",
    "thus , we can read all relators of @xmath204 and @xmath7 in @xmath591 via the embeddings @xmath597 and @xmath598 , respectively . to obtain a quotient malcev presentation of @xmath599 , we simply need to add the relations that @xmath204 and @xmath7 commute   that is we need to introduce additional relations @xmath600 for all malcev generators which are not in the image of neither @xmath598 nor @xmath597 . as the new quotient malcev presentation is basically a copy of those of @xmath204 and @xmath7 ,",
    "it can be computed in @xmath0 . from now on we work only in the direct product @xmath601 and identify @xmath7 and @xmath204 with their images under @xmath598 and @xmath597 .",
    "let @xmath602 and let @xmath603 be the sequence in full form for the subgroup @xmath604 , where @xmath605 and @xmath606 .",
    "let @xmath607 be the greatest integer such that @xmath608 ( with @xmath609 if all @xmath610 are 1 ) .",
    "set @xmath611 and @xmath612 . in (",
    "4.1 ) it is shown that @xmath589 is the full - form sequence for the kernel of @xmath61 and @xmath613 is the full - form sequence for the image .    now , to solve [ kernel ] , it suffices to compute @xmath614 using and return the corresponding @xmath589 as defined above . for [ preimage ] , apply to express @xmath537 as @xmath615   then return @xmath616 .",
    "before we focus on the conjugacy problem , we need one more preliminary result : the problem of computing centralizers .",
    "[ thm : centralizer ] let @xmath263 be fixed .",
    "the following is in @xmath0for unary inputs and in @xmath525 for binary inputs :    on input of some @xmath4 given as quotient malcev presentation and an element @xmath5 , compute a generating set @xmath589 for the centralizer of @xmath8 in @xmath7 ( in case of binary inputs , the generating set will be given as set of words with binary exponents ) .",
    "let @xmath617 be the lower central series of @xmath237 .",
    "clearly this central series project to a central series of @xmath7 and we simply write @xmath618 for its projection in @xmath7 .",
    "denote with @xmath619 the standard malcev basis of @xmath237 , which is associated to the lower central series   in particular @xmath242 is a generating set for @xmath237 .",
    "we proceed by induction on @xmath2 .",
    "if @xmath620 , then @xmath237 and @xmath7 are abelian and @xmath621 so the output is @xmath622 .",
    "assume that the theorem holds for groups in @xmath623   in particular , for @xmath624 ( we obtain a quotient malcev presentation of @xmath624 by simply forgetting about the malcev generators in @xmath625 ) .",
    "a generating set @xmath626 for the centralizer of @xmath627 in @xmath624 can be computed in @xmath0(resp .",
    "@xmath525 ) by induction . let @xmath628 where @xmath629 .",
    "then @xmath630 is the preimage of @xmath631 under the homomorphism @xmath632 . define @xmath633 by @xmath634.\\ ] ] since @xmath635 , @xmath23 commutes with @xmath8 modulo @xmath636 , hence @xmath637\\in \\gamma_{c}$ ] and so @xmath638 . we claim that @xmath41 is a homomorphism .",
    "indeed , @xmath639=[g , u_{2}][g , u_{1}][[g , u_{1}],u_{2}],\\ ] ] but @xmath640\\in \\gamma_{c}$ ] hence @xmath641,u_{2}]\\in \\gamma_{c+1}=1 $ ] , and @xmath640 $ ] and @xmath642 $ ] commute , both being elements of the abelian group @xmath636 .",
    "the centralizer of @xmath8 is precisely the kernel of @xmath643 since ,",
    "if @xmath537 commutes with @xmath8 , then @xmath644 so @xmath645 .",
    "a generating set can be computed in @xmath0(resp .",
    "@xmath525 ) using .",
    "now , we can combine the previous theorems to solve the conjugacy problem in @xmath0following ( * ? ? ?",
    "[ thm : cp ] let @xmath263 be fixed .",
    "the following is in @xmath0for unary inputs and in @xmath525 for binary inputs : on input of some @xmath4 given as quotient malcev presentation and elements @xmath20 , either    * produce some @xmath21 such that @xmath646 , or * determine that no such element @xmath23 exists .    in case of unary inputs , @xmath23 will be returned as a word , for binary inputs , as a word with binary exponents .",
    "again we proceed by induction on @xmath2 . if @xmath620 , then @xmath7 is abelian and @xmath8 is conjugate to @xmath537 if and only if @xmath94 .",
    "if so , we return @xmath647 .",
    "now let us assume @xmath648 and that the theorem holds for any nilpotent group of class @xmath649   in particular , for @xmath624 .",
    "we use the notation as in the proof of .",
    "the first step of the circuit is to check conjugacy of @xmath650 and @xmath651 in @xmath624 which can be done in @xmath0by induction .",
    "if these elements are not conjugate , then @xmath8 and @xmath537 are not conjugate and the overall answer is ` no ' . otherwise , we obtain some @xmath652 such that @xmath653 .",
    "let @xmath654 be the canonical homomorphism , @xmath655 ( where @xmath656 denotes the centralizer of @xmath627 ) , and define @xmath643 by @xmath657 $ ] .",
    "as in the proof of , the image of @xmath41 is indeed in @xmath636 and @xmath41 is a homomorphism .",
    "we claim that @xmath8 and @xmath537 are conjugate if and only if @xmath658 . indeed , if there exists @xmath659 such that @xmath660 , then @xmath661 \\cdot \\gamma_{c},\\ ] ] hence @xmath662 , so @xmath663 as well .",
    "then @xmath664 \\in f(j)$ ] , as required .",
    "the converse is immediate .",
    "so it suffices to express , if possible , @xmath665 as @xmath666 $ ] with @xmath662 , in which case the conjugator is @xmath667 .",
    "now , the circuit computes a generating set @xmath668 for @xmath669 using .",
    "then @xmath630 is generated by @xmath670 , where again @xmath629 .",
    "after that , @xmath671 is computed and used to determine whether @xmath672 .",
    "if so , is applied to find some @xmath659 such that @xmath673 .",
    "finally , @xmath667 is returned in case all previous tests succeed . since we only concatenate a fixed constant number of @xmath0(resp .",
    "@xmath525 ) computations , the whole computation is in @xmath0(resp .",
    "@xmath525 ) again .    we want to outline briefly how in the unary case the bounds of ( * ? ? ?",
    "4.6 ) can be used to directly solve the conjugacy problem of nilpotent groups in @xmath0 .",
    "since ( * ? ? ?",
    "4.6 ) is for a non - uniform setting , we fix a nilpotent group @xmath7 with generating set @xmath92 .",
    "let @xmath674 be words over @xmath675 as inputs for the conjugacy problem with of total length @xmath47 . by ( * ?",
    "4.6 ) , the length of conjugators is polynomial in @xmath47 . by using binary exponents ,",
    "the conjugators can be written with respect to a malcev basis of @xmath7 using only @xmath676 bits for some constant @xmath677 which only depends on @xmath7 ( this is a well - known fact   see e.g. ( * ? ? ?",
    "* thm .  2.3 ) ) . in particular , for all possible conjugators @xmath23 which have bit - length at most @xmath676 , it can be checked in parallel by a uniform family of @xmath0circuits whether @xmath678 in @xmath7 by using the circuits for the word problem @xcite ( note that for this purpose each @xmath23 can be written down in unary since it is of length at most @xmath679 ) .",
    "the results in the previous sections always required that the group is given as a quotient malcev presentation .",
    "however , we can use to transform an arbitrary presentation with at most @xmath1 generators of a group in @xmath25into a quotient malcev presentation .",
    "[ prop : find_presentation_poly ] let @xmath2 and @xmath1 be fixed integers .",
    "the following is in @xmath0 : given an arbitrary finite presentation with generators @xmath242 of a group @xmath4 ( as a list of relators given as words over @xmath680 ) , compute a quotient malcev presentation of @xmath7 ( encoded in unary ) and an explicit isomorphism .",
    "moreover , if the relators are given as words with binary exponents , then the binary encoded quotient malcev presentation can be computed in @xmath525 .",
    "let @xmath681 and let @xmath682 be the set of relators , i.e. , @xmath7 is presented as @xmath683 .",
    "let @xmath684 be the free nilpotent group of class @xmath2 on generators @xmath92 .",
    "let @xmath685 be the standard malcev basis of @xmath258 such that @xmath686 for @xmath687 and let @xmath249 denote the set of relations such that @xmath688 is a consistent nilpotent presentation for @xmath258 .",
    "consider the natural surjection @xmath689 and let @xmath690 , which is the normal closure of @xmath682 in @xmath258 . denoting @xmath691 ,",
    "@xmath247 is generated by iterated commutators @xmath692,x_2],\\ldots , x_j]$ ] , where @xmath693 , @xmath694 , and @xmath695 .",
    "the total length of these generators is linear since @xmath2 and @xmath1 are constant . using in the group @xmath258",
    ", we can produce the full - form sequence @xmath248 for @xmath247 in @xmath0(resp .  in @xmath525 for binary inputs ) .",
    "now @xmath696 and by this is a ( consistent ) quotient malcev presentation .    because of",
    ", in all theorems above where the input is a quotient malcev presentation , we can also take an arbitrary @xmath1-generated presentation of a group in @xmath3 as input .",
    "however , be aware that for the word problem ( and ) the complexity changes from @xmath0to @xmath525 in the binary case .",
    "in @xcite , the conjugacy problem in iterated wreath products of abelian is shown to be in @xmath0(for a definition of iterated wreath products we refer to @xcite ) .",
    "the crucial step there is the transfer result that the conjugacy problem in a wreath product @xmath697 is @xmath0-turing - reducible to the conjugacy problems of @xmath92 and @xmath698 and the so - called power problem of @xmath698 . likewise the power problem of @xmath697 is @xmath0-turing - reducible to the power problems of @xmath92 and @xmath698 given that torsion elements of @xmath698 have uniformly bounded order .",
    "the latter condition is also preserved by wreath products .    in the light of @xcite , it remains to show that the power problem of nilpotent groups is in @xmath0and that the order of torsion elements is uniformly bounded , in order to establish the following theorem ( note that @xcite is only for fixed groups ; therefore , we formulate also the following results in a non - uniform setting ) :    let @xmath92 and @xmath698 be finitely generated nilpotent groups and let @xmath699 , then the conjugacy problem of the @xmath345-fold iterated wreath products @xmath700 as well as @xmath701 is in @xmath0 .",
    "the following two lemmas together with a repeated application of theorem 3 , lemma 5 , and theorem 5 of @xcite .",
    "every finitely generated nilpotent group has a uniform bound on the order of torsion elements .",
    "we proceed by induction along a malcev basis @xmath264 of @xmath7 .",
    "if @xmath275 has infinite order , we are done by induction .",
    "otherwise , let @xmath459 be the order of @xmath275 and @xmath702 be such that @xmath703 for all torsion elements @xmath704 .",
    "consider a torsion element @xmath705 .",
    "then @xmath706 .",
    "thus , @xmath707 . therefore , @xmath708 is an upper bound on the order of torsion elements in @xmath7 .",
    "the _ power problem _ of @xmath7 is defined as follows : on input of @xmath709 ( as words over the generators ) decide whether @xmath537 is a power of @xmath8 that is whether there is some @xmath710 such that @xmath711 in @xmath7 . in the `` yes '' case",
    "compute this @xmath459 in binary representation .",
    "if @xmath8 has finite order in @xmath7 , the computed @xmath459 has to be the smallest non - negative such @xmath459 .",
    "for every finitely generated nilpotent group @xmath7 , the power problem of @xmath7 is in uniform @xmath44 .",
    "we show a slightly more general statement by induction along a malcev basis @xmath264 of @xmath7 : for every fixed arithmetic progression @xmath712 , the power problem restricted to @xmath712 is in @xmath0 , i.e. , given @xmath20 it can be decided in @xmath0whether there is some @xmath713 with @xmath714 in @xmath7 and , if so , that @xmath47 can be computed in @xmath0 .",
    "we consider the input words @xmath8 and @xmath537 in the quotient @xmath715 .",
    "let @xmath716 and @xmath717 in this quotient .",
    "if @xmath718 , it remains to solve the power problem in the subgroup @xmath719 , which can be done by induction .",
    "next , we distinguish the two cases that @xmath275 has infinite order and that it has finite order ( in @xmath715 ) .    in the case of infinite order ,",
    "the only possible value for @xmath47 can be computed as @xmath720 ( in @xmath0by ) . if this is not an integer or not contained in the arithmetic progression ( i.e. , , @xmath721 )",
    ", then @xmath537 is not a power of @xmath8 .",
    "otherwise , one simply checks whether @xmath722 in @xmath7 ( i.e. , , solving the word problem ) .",
    "as @xmath335 is bounded by the input length , this can be done in @xmath0by .    in the case of finite order ,",
    "let @xmath345 denote the order of @xmath333 .",
    "it can be checked for all @xmath723 in parallel whether @xmath724 . in case",
    "that there is such an @xmath205 , the answer to the power problem is the same as the answer to the power problem in the subgroup @xmath725 restricted to the arithmetic progression @xmath726 ( the intersection can be hard - wired since there are only finitely many possibilities for a fixed group since the modulo is bounded by the least common multiple of the orders of finite order elements of the malcev basis ) .",
    "we have seen that most problem which in @xcite were shown to be in  , indeed are in @xmath0also in the uniform setting where the number of generators and nilpotency class is fixed . moreover , their binary version is in @xmath525 .",
    "several generalizations of these results can be imagined ( loosening the assumptions on generators / nilpotency class ) .",
    "we conclude with mentioning some of them :        is there a way to solve the conjugacy problem for nilpotent groups with binary exponents in @xmath0 ?",
    "notice that we needed to compute greatest common divisors for solving the subgroup membership problem .",
    "however , there might be a way of solving the conjugacy problem using another method .",
    "william hesse .",
    "division is in uniform tc@xmath727 . in fernando",
    "orejas , paul  g. spirakis , and jan van leeuwen , editors , _ icalp _ , volume 2076 of _ lecture notes in computer science _ , pages 104114 .",
    "springer , 2001 .",
    "daniel knig and markus lohrey .",
    "evaluating matrix circuits . in _ computing and combinatorics _ ,",
    "volume 9198 of _ lecture notes in comput .",
    "_ , pages 235248 .",
    "springer , cham , 2015 .",
    "url : http://dx.doi.org/10.1007/978-3-319-21398-9_19 , http://dx.doi.org/10.1007/978-3-319-21398-9_19 [ ] .",
    "klaus - jrn lange and pierre mckenzie . on the complexity of free monoid morphisms . in kyung - yong chwa and oscar  h. ibarra , editors , _ algorithms and computation , 9th international symposium , isaac 98 , taejon , korea , december 14 - 16 , 1998 , proceedings _ , volume 1533 of _ lecture notes in computer science _ , pages 247256 .",
    "springer , 1998 .",
    "url : http://dx.doi.org/10.1007/3-540-49381-6_27 , http://dx.doi.org/10.1007/3-540-49381-6_27 [ ] .    c.  r. leedham - green and leonard  h. soicher .",
    "symbolic collection using deep thought .",
    ", 1:924 ( electronic ) , 1998 .",
    "url : http://dx.doi.org/10.1112/s1461157000000127 , http://dx.doi.org/10.1112/s1461157000000127 [ ] .",
    "jeremy macdonald , alexei  g. myasnikov , andrey nikolaev , and svetla vassileva .",
    "logspace and compressed - word computations in nilpotent groups . ,",
    "abs/1503.03888 , 2015 .",
    "url : http://arxiv.org/abs/1503.03888 .",
    "bohdan  s. majewski and george havas .",
    "the complexity of greatest common divisor computations . in _",
    "algorithmic number theory ( ithaca , ny , 1994 ) _ , volume 877 of _ lecture notes in comput .",
    "_ , pages 184193 .",
    "springer , berlin , 1994 .",
    "url : http://0-dx.doi.org.mercury.concordia.ca/10.1007/3-540-58691-1_56 , http://dx.doi.org/10.1007/3-540-58691-1_56 [ ] .",
    "alexei miasnikov , svetla vassileva , and armin wei .",
    "the conjugacy problem in free solvable groups and wreath product of abelian groups is in tc@xmath727 . ,",
    "abs/1612.05954 , 2016 .",
    "url : http://arxiv.org/abs/1612.05954 , http://arxiv.org/abs/1612.059541 [ ] .",
    "werner nickel .",
    "matrix representations for torsion - free nilpotent groups by deep thought .",
    ", 300(1):376383 , 2006 .",
    "computational algebra special issue celebrating the 65th birthday of charles leedham - green .",
    "charles  c. sims . , volume  48 of _ encyclopedia of mathematics and its applications_. cambridge university press , cambridge , 1994 .",
    "url : http://dx.doi.org/10.1017/cbo9780511574702 , http://dx.doi.org/10.1017/cbo9780511574702 [ ] ."
  ],
  "abstract_text": [
    "<S> recently , macdonald et.al .  showed that many algorithmic problems for nilpotent groups including computation of normal forms , the subgroup membership problem , the conjugacy problem , and computation of presentations of subgroups can be done in  . here </S>",
    "<S> we follow their approach and show that all these problems are actually complete for the uniform circuit class @xmath0   uniformly for all @xmath1-generated nilpotent groups of class at most @xmath2 for fixed @xmath1 and @xmath2 .    moreover , </S>",
    "<S> if we allow a certain binary representation of the inputs , then the word problem and computation of normal forms is still in uniform @xmath0 , while all the other problems we examine are shown to be @xmath0-turing reducible to the problem of computing greatest common divisors and expressing them as a linear combination . </S>"
  ]
}