{
  "article_text": [
    "selecting information from lists on a mobile device is a common task , but the process can be quite cumbersome . a typical example of this is finding a name in an address book to make a phone call .",
    "if the list contains more than a dozen entries , scrolling through it to reach a name becomes impractical .",
    "not all mobile devices have a keyboard . navigating using virtual keyboard displayed on a touch screen",
    "usually requires use of a stylus . taking out a stylus adds additional time , and the use of a stylus itself is relatively slow .",
    "one can use a regular phone keyboard to search for a name , but most selection methods offered by modern mobile phones are not very efficient .",
    "also , some modern mobile phones and pdas are using sliding design , where the keyboard is normally hidden and has to be slid out to be used ( e.g. siemens sx66 ) . sliding out or opening",
    "keyboard takes additional time .    in this paper , we would like to present a novel approach to this problem . instead of phone keyboards , a user would use a joystick , a trackball or 4-way key pad .",
    "most modern mobile phones are equipped with one of these navigation devices . in figure",
    "[ fig : phones ] , you can see some actual mobile phones which are suitable for use with the _ accelkey _ input method .",
    "the device shown in [ fig : blackberrypearl ] uses a trackball , [ fig : imatesp3i ] , [ fig : nokia2865],[fig : sonyericssonz520a ] use joysticks , and [ fig : ipaqh6315 ] , [ fig : motorolarazr ] , [ fig : sanyomm8300],[fig : motorolav710 ] each use a four - button pad .",
    "the presented method is a _ selection method _",
    ", not an _ input method_. it does not allow the user to enter arbitrary data . rather , it simply selects an entry from the existing dataset .",
    "? * mackenzie , soukoreff ( 2002 ) ) provides a good overview of various text input methods.    the presented method is suitable for one - handed , `` eyes - free '' operation .",
    "in this section , we will give a formal description of the algorithm .",
    "please see appendix  [ fast4hs ] for a sample implementation of the algorithm in a haskell programming language .",
    "a user is presented with a list of entries .",
    "his goal is to select one of the entries from the list using a 4-way navigation device .",
    "the device is capable of generating at least five events triggered by user actions .",
    "directional events _ up _ , _ down _ , _ left _ , and _",
    "right _ are generated when the joystick is tilted or the trackball is rotated in the appropriate direction . an additional _ select _ event is generated when the user pushes the joystick or trackball down , or presses a dedicated button .",
    "additional events , such as _ backspace _ or _ reset _ could be assigned to to further keys to improve user experience , but are not strictly necessary for this algorithm .",
    "they are covered in section  [ extrasig ] .",
    "each directional event is associated with a group of letters from the alphabet from which elements of the list are composed .",
    "we will call such assignments a `` layout '' .",
    "issues related to layout selection will be covered in the section  [ layoutsel ] . for now , let us just assume the letter assignment is non - overlapping  i.e. , each letter is associated only with one of four directional events .",
    "not all characters of the alphabet have to be associated with directional events .",
    "characters which are not associated with events ( e.g punctuation marks and whitespace ) are deemed insignificant and ignored by the algorithm .",
    "the algorithm could be in one or two modes : _ selection _ or _",
    "scrolling_. the initial state is _",
    "when in this mode , the algorithm maintains a sequence of directional events generated by the user .",
    "we will call this sequence a _",
    "prefix_. initially , the prefix is empty .",
    "each new directional event generated by the user is appended to the end of the prefix .",
    "the list is then filtered by excluding all entries except ones matching the current prefix .",
    "the entry is matching the prefix if , and only if in the current layout each of its letters belongs to the group associated with the prefix event with the same index .    at any moment",
    "the user can chose to generate a _",
    "select _ event .",
    "when this happens , if the current , filtered list contains only one element the selection process is completed .",
    "if the list contains more than one element , we switch to the _ scrolling _ mode described in section  [ sst ] to narrow down the selection further .",
    "this mode can be likened to presenting a user with a keyboard with 4 keys : the four keys have groups of letters on them , and there is an additional _ select _ key . the user types his search term using this keboard , and the algorithm performs disambiguation using list content as a dictionary . in some respects this is similar to the tegic t9^^ input method .      upon entering this mode one of the list elements",
    "is selected as current . using _ up _ and _ down _ events , the user then navigates towards the entry he is looking for and selects it using the _ select _ event .",
    "directional events _ up _ and _ down _ move the selection pointer , selecting previous or next list elements as current . any events of _ left _ or _",
    "right _ will bring the algorithm back to _",
    "selection _ state , using the last used prefix .",
    "finally , _ select _ will indicate that the current element is the ultimate user selection .      in this section",
    ", we will compare _ accelkey _ to a few other selection algorithms .",
    "the algorithms we have chosen to evaluate are :    [ [ scroll ] ] scroll + + + + + +    - this is the simplest possible algorithm .",
    "a user is presented with the list and a cursor .",
    "the cursor initially points to the first element .",
    "using up and down arrows , a user can select the desired list element .",
    "[ [ multi - tap - first ] ] multi - tap first + + + + + + + + + + + + + + +    - this is the only selection algorithm which is implemented in some mobile phones ( for example motorola v600 ) besides _ scroll _ algorithm .",
    "a user can select the first letter of the name using the _ multi - tap _ method@xcite .",
    "once the first letter is selected , the cursor is positioned to the first entry starting with this letter and then , user can scroll down to select a desired name using _ scroll _ method .    [",
    "[ multi - tap - match ] ] multi - tap match",
    "+ + + + + + + + + + + + + + +    - this is a more advanced method , implemented in some phones ( e.g. sony ericsson k750 ) .",
    "a user can type part of the name using multi - tap input method .",
    "as he types the cursor moves to the first name that matches the typed prefix . at any moment",
    "the user can switch to the _ scroll _ method to continue selection . in our evaluation",
    ", we implemented the best possible strategy , deciding when it was the best time to switch from typing to scrolling .",
    "we suspect most users might not perform as well as our program , but we will use these numbers for an evaluation , as a best case scenario . to compare the efficiency of these algorithms we took several datasets and ran all algorithms on each of them .",
    "the measure of efficiency was an average number of _ events _ ( user actions such as key presses or joystick movements ) required to select any name from the dataset .",
    "the evaluation was performed using a program which is included in the appendix  [ src ] .",
    "the _ accelkey _",
    "algorithm used a _",
    "qwerty _ layout ( see section  [ layoutsel ] ) .",
    "the results are shown in the table  [ tb : mcmp ] .",
    ".selection methods efficiency evaluation ( average number of events per entry ) [ cols= \" < , < , < , < , < \" , ]     as we can see , on the _ writers _ and _ graduates _ datasets , an _",
    "layout has shown to give better results , while _ qwerty _ layout fared better with the _ representatives _ dataset .",
    "for user convenience , we can introduce some additional events .",
    "these events are not essential to the core algorithm operation , and their implementation is optional .",
    "_ backspace _ - eliminates effects of the previous event and brings the algorithm to the previous state . _",
    "reset _ - resets the algorithm to the initial state , which is _ scrolling _ mode , with an empty prefix .      on devices equipped with a keyboard in addtition to a 4-directional input device",
    ", accelkey selection algorithm could be combined with more traditional input methods .",
    "for example , on mobile phones equipped with a standard phone numeric keyboard , numbered keys could be generating events which are treated as an additional nine events using special layout : _ [ a , b , c ] _",
    "( _ key `` 2 '' _ ) , _ [ d , e , f ] _ ( _ key `` 3 '' _ ) , _ [ g , h , j ] _ ( _ key `` 4 '' _ ) , _ [ j , k , l ] _ ( _ key `` 5 '' _ ) , _ [ m , n , o ] _ ( _ key `` 6 '' _ ) , _ [ p , q , r , s ] _ ( _ key `` 7 '' _ ) , _ [ t , u , v ] _ ( _ key `` 8 '' _ ) , _ [ w , x , y , z ] _ ( _ key `` 9 '' _ ) .",
    "thus , the user could mix directional events from a joystick and keypad events during the selection process .    on devices equipped with a _",
    "qwerty _ ( or similar ) keyboard , users should be able to combine accelkey directional events with keypreses from a keyboard during the selection process .",
    "for example , tilting a joystick upwards and then pressing the `` z '' key on a keyboard would select all entries which start from any letter associated with the _ up _ event in the current layout , followed by the letter `` z '' .",
    "it is possible to use accelkey with devices equipped with a trackball ( for example , blackberry pearl ) . unlike a joystick which generates descrete directional events",
    ", a trackball generates events containing the following values :    @xmath0 : :    magnitude of navigational motion : negative for a move left and postive    for a move right .",
    "@xmath1 : :    magnitude of navigational motion : negative for an downwards move , and    positive for a upwards .",
    "mapping between these values and directional events used by accelkey algorithm could be expessed as :    @xmath2    this mapping for @xmath0 and @xmath0 in @xmath3 $ ] interval is shown in figure  [ fig : joydir ] .",
    "some trackball devices are very sensitive and report even very slight movements , which makes it necessary to implement _",
    "jitter elimination_. the simplest form is to ignore trackball events with movement amplitude less than a certain value . in other words ,",
    "ignore trackball events if @xmath4 is less than some pre - defined small value .",
    "the algorithm could also be extended to handle lists with multiple words per entry .",
    "one example of such a list is an address book , where for each entry you can commonly have a combination of first , last , and middle names .",
    "the most obvious approach here is to simultaneously match the _ prefix _ to the beginning of the first , last and middle names , thus allowing a user to select using any of these fields .",
    "for example , to select _ jorge luis borges _ the user can enter _",
    "jorge _ or _ luis _ or _ borges_.    though a multiple word match approach is useful , it could be further improved upon .",
    "for example , selecting a prefix or matching a common first name presents us with a fairly long list of choices which can not be narrowed down further without switching to a selection mode .",
    "one example of such a case is shown in figure  [ fig : johns ] .        to solve this",
    ", we can allow for prefix matching to span boundaries of adjacent words .",
    "thus , in the example shown in figure  [ fig : johns ] , the user should be able to generate events matching letters : `` j '' , `` h '' , `` o '' , `` n '' , `` u '' to narrow the list down to single entry : `` john updike '' . of course",
    ", prefix match could span more than two words , as long as all of them match sequentially ( for example `` arthur , c.,clarke '' could be matched as `` a '' , `` r '' , `` t '' , `` h '' , `` u '' , `` r '' , `` c '' , `` c '' ) .    in some applications",
    ", we might want to allow matching to `` wrap '' at the end of the last word in a sequence and to proceed from the beginning of first word .",
    "for example , this would allow us to match `` smith , john '' as `` j '' , `` h '' , `` o '' , `` n '' , `` s '' . if matching is always to stop at the last word in a group , there is a no way to disambiguate `` smith , john '' from `` blake , john '' after the first name was matched .",
    "the algorithm was implemented as a java applet , blackberry application , j2me midlet and symbianos application , and has been tested on several mobile phones .",
    "the latest demo version can be downloaded from the following url : http://www.accelkey.com/    the _ accelkey _ application is shown running on a mobile phone in figure  [ fig : fast4sefull ] .",
    "let us examine the screen in more detail",
    ". in the middle of the screen is the list of names from which we will be selecting .",
    "they are displayed in _",
    "first , middle , last name _ format . as",
    "a user sends more events using the joystick , the content of this list is narrowed down to contain only names matching the current _ prefix_. in each name , the letters matching the current _ prefix _ are shown in red . during selection , we ignore all punctuation marks , and other symbols not represented in the current layout .",
    "thus , to select _ thomas stearns eliot _ , abbreviated in our list as _ t.s .",
    ", eliot _ , a user must generate events for letters `` t '' ( _ up _ ) and `` s''(_left _ ) , omitting punctuation marks and spaces . on the top , bottom , and sides of the list",
    ", we can see groups of letters displayed .",
    "this is a visual aid , showing the current layout .",
    "the groups are arranged in accordance with the direction in which a user must tilt the joystick to generate an event for this group .",
    "some of these letters are grayed out .",
    "that means that in the current list , with given selection _",
    "prefix _ , there are no entries which contain this letter as the next choice .",
    "graying them out helps a user to find the next letter more easily .",
    "the _ accelkey _ selection method could be used with languages using alphabets besides the latin .",
    "for example on figure  [ fig : screen_cyr ] we can see an example using the cyrillic alphabet .",
    "one direction for future research is the development of algorithms which would help to minimize the average number of events per list element , thereby optimizing layout .",
    "another interesting direction to explore is the use of touch - sensitive screens with this algorithm . it should be possible to use `` gestures '' performed by the user touching the screen as an input method .    on the implementation side",
    ", we would like to experiment further with different screen arrangements and visual and possibly audible feedback to users during selection process .",
    "a trackball jitter elimination algorithm could also be further fine tuned .",
    "a more precise comparative evaluation of the alogrithm efficiency using hicks - hayman@xcite and fitts@xcite laws is also in our plans .",
    "office of the clerk , u.s .",
    "house of representatives , _ official mailing labels of member addresses .",
    "_ , http://clerk.house.gov/member_info/asciimemberlabels_110.txt , 110th congress , 1st session , _",
    "( accessed march 28 , 2007)_."
  ],
  "abstract_text": [
    "<S> portable electronic devices usually utilize a small screen with limited viewing area and a keyboard with a limited number of keys . </S>",
    "<S> this makes it difficult to perform quick searches in data arrays containing more than dozen items such an address book or song list . in this article </S>",
    "<S> we present a new data selection method which allows the user to quickly select an entry from a list using 4-way navigation device such as joystick , trackball or 4-way key pad . </S>",
    "<S> this method allows for quick navigation using just one hand , without looking at the screen . </S>"
  ]
}