{
  "article_text": [
    "the last decade has seen extensive denationalizations and a fundamental change in economic patterns brought about by the use of the internet as a world - wide market place .",
    "both phenomena promoted the use of auctions to a central place among economic mechanisms .",
    "the study of complex auctions is now a most active area of research , drawing from the fields of mechanism design in economics and from the theory of algorithms in computer science .",
    "combinatorial auctions in which a large number of items are sold and in which bidders may express preferences over bundles , i.e. , subsets , of items have drawn a lot of attention recently  @xcite .    we consider here the `` winner determination '' problem , i.e. , the algorithmic problem of finding the allocation that maximizes the declared social welfare .",
    "we consider both ( single - unit ) combinatorial auctions and multi - unit combinatorial auctions in which a number of identical items of each type are sold . in  @xcite , this problem was shown to be np - hard . in  @xcite",
    ", it is shown that it is even hard to find a non - trivial approximation to the optimal allocation .",
    "those results consider worst - case complexity and do not necessarily imply that , in practice , one can not find the optimal solution of real - life large combinatorial auctions .",
    "some of the papers above proposed winner - determination algorithms and tried to show they perform well even on large auctions .",
    "others proposed mechanisms based on non - optimal allocations . a number of researchers proposed sets of problems on which to test candidate algorithms : most notably leyton - brown , shoham and tennenholtz  @xcite , leyton - brown , pearson and shoham  @xcite and de vries and vohra  @xcite .",
    "we implemented a branch - and - bound search program along the lines of  @xcite for finding the optimal allocation in multi - unit combinatorial auctions .",
    "this program makes heavy use of a linear programming routine to bound from above the value of extensions of partial allocations .",
    "common wisdom in the field has it that linear programming is too time - consuming to be used in practice , and one should use lighter , if if less accurate , methods to obtain upper - bounds .",
    "we report here results that go against this common wisdom : pruning is of the essence and one should not hesitate to devote all the time necessary to compute tight upper - bounds in order to prune aggressively .",
    "such conclusions hold for all the distributions described above .",
    "we present , in section  [ subsec : save ] , an important way of saving on those expensive calls to the lp routine .",
    "section  [ sec : bb ] presents the algorithm we used and the remainder of the paper discusses our experimental results .",
    "we assume @xmath0 different commodities and @xmath1 identical items of commodity @xmath2 for .",
    "the problem we are trying to solve is that of determining the optimal allocation of the items .",
    "a set of bids is given : each bid requests a number of units ( possibly zero ) from each commodity and offers a price @xmath3 for the whole set .",
    "a subset of the set of all bids is conflict - free if , for each commodity , the sum of the units requested does not surpass the number of units for sale .",
    "the problem is to find a conflict - free subset that maximizes the sum of the prices proposed .",
    "the algorithm we experimented with is very similar to the one described in  @xcite .",
    "we assume that none of the bids submitted requests more units than available , i.e. , each singleton set of bids is conflict - free .",
    "our algorithm consists of an initialization phase and a main ( recursive ) routine .    in the initialization phase",
    ", we use a host of fast heuristics to find a _ good _ allocation . in practice",
    ", this initialization phase is performed very fast and gives an allocation that is not much less than the optimal one .",
    "many times , one , in fact , gets the optimal allocation , but one , obviously , does not know it is optimal .",
    "the heuristics used are all members of the greedy family : one chooses a bid @xmath4 , grants it , subtracts the quantities requested by @xmath4 from the stock of available units , eliminates all bids that can not be granted anymore , i.e. , those that are not conflict - free , chooses a bid , and so on .",
    "each heuristic provides a feasible allocation .",
    "one keeps the best one .",
    "the different heuristics we propose to use differ only in the way they choose the next bid to be granted .",
    "the best allocation found is kept .    the main ( recursive ) routine",
    "is given :    1 .   a partial allocation , i.e.",
    ", a set of bids already granted , 2 .",
    "a stock of units available , 3 .",
    "a set of bids not yet granted , each of them requesting only a number of units not larger than the number of units in stock , and 4 .",
    "it uses a global variable describing the best allocation found so far .",
    "the problem is solved by calling the main routine with an empty partial allocation , the full stock of available units , the set of all bids , and after having initialized the best allocation to the best allocation found in the initialization phase .",
    "the main routine is :    1 .   [ empty ] * stop * if the third argument is empty , i.e. , no more bids waiting , return , 2 .",
    "[ update ] * update * if the value of the partial allocation is larger than that of the best solution found so far , update this best solution , 3 .",
    "[ bound ] * bound * bound from above the value of the optimal allocation of the units left in stock to the bids that are the third argument of the routine .",
    "this is done by solving the linear programming problem that is the fractional relaxation of the integer programming problem describing the optimal allocation , 4 .",
    "[ prune ] * prune * checks whether the search can be stopped , i.e. , the subtree rooted at the current node can be pruned .",
    "the condition for pruning is that the sum of the values of the partial allocation and the solution of the linear programming problem just found be not greater than the value of the best allocation found so far .",
    "if the condition holds , return .",
    "if the condition does not hold , go on to the next step , 5 .",
    "[ choose ] * choose * choose a bid from the third argument , 6 .",
    "[ left ] * left call * call recursively the main routine with a partial allocation augmented by the bid just chosen , the stock of available units diminished by subtracting the units requested by the bid chosen and the list of bids diminished by subtracting the chosen bid and all bids that request more units than available in ( the diminished ) stock , 7 .",
    "[ right ] * right call * call recursively the main routine with the original partial allocation , the original stock and the list of bids without the chosen bid .",
    "the * left call * solves the auction obtained after the chosen bid has been granted .",
    "the * right call * solves the auction obtained after the chosen bid has been denied .",
    "the only step under - specified in this routine is * choose * : we shall discuss at length how the next bid to branch on should be chosen in section  [ sec : order ] .",
    "the only time - consuming step in the main routine is the linear programming step in * bound*. we have a way to save on those expensive calls to the lp routine .",
    "notice that , in * right call * , the problem to be solved is very similar to the original one : same partial allocation , same stock .",
    "this recursive call will trigger a call to the lp routine ( call it lp2 ) solving a lp problem that is very similar to the one just solved ( call it lp1 ) .",
    "the only difference is that the bid just chosen has disappeared from the list of bids considered by lp2 .",
    "if this bid did not enter the optimal ( fractional ) solution of lp1 , i.e. , if its coefficient in the solution of lp1 was equal to zero , then , the solution of lp2 is the same as that of lp1 and therefore one can save a call to the lp routine .",
    "one can easily see that , in this case , no pruning can take place .",
    "figure  [ fig : nodes_linprogcalls ] shows that the saving can be considerable .",
    "the auctions are taken from  @xcite .",
    "on the x - axis : the number of bids considered , on the y - axis : under log scale , the number of nodes visited or the number of calls to the lp routine .",
    "we ran all our experiments on a pentium pro 930 mhz with 512k of memory , running windows 2000 .",
    "our programs were coded in matlab ( r12 ) .",
    "we used the linprog facility of the optimization toolbox for linear programming : this is a primal - dual algorithm .",
    "all our results are averages over fifteen auctions drawn from a distribution to be specified for each graph .",
    "we did experience some memory problems ( probably due to some remaining bugs in matlab release 12 ) , but found matlab extremely easy to use and its linprog facility excellent .",
    "the remainder of the paper presents , in graphic form , the results of our experiments .",
    "some of those graphs are difficult to decipher in black and white : we apologize and will produce more readable graphs for the conference paper .",
    "figure  [ fig : gr_opt_lp ] describes the quality of the optimal solution , the lower bound obtained in the initialization phase and two upper bounds for multi - unit auctions .",
    "the upper curve ( extended norm bound ) describes the easy to compute upper bound proposed in  @xcite .",
    "the second ( from the top ) curve describes the upper bound given by linear programming .",
    "the latter can be proved to be always at most equal to the former . on the x - axis : the number of bids considered ( from 250 to 750 ) and the y - axis the average value ( in monetary terms , numbers are not important ) of the allocations .",
    "this graph shows two things .",
    "first , that the lower bound computed in the initialization phase and the upper bound computed by lp are very close .",
    "the optimal solution is , obviously , in - between . the larger the auction , the better the convergence of those three values .",
    "the second thing is that the easy - to - compute upper - bound of  @xcite is not even close to the lp bound and seems to get ( relatively ) worse as the number of bids increases .",
    "the main claim of this paper is that using the time - consuming lp routine is preferable to the use of a lighter but easier to compute upper bound in * bound*. figure  [ fig : bounds ] compares the running times of the algorithm above that uses lp and the running time of the same algorithm using the easy - to - compute upper bound proposed by leyton - brown and al .        the distribution of auctions is taken from  @xcite , for auctions of different sizes . on the x - axis : the number of bids . on the y - axis : the running time in seconds ( log scale ) . by using lp ,",
    "one gains two orders of magnitude for large auctions .",
    "the lighter upper bound is better for very small numbers of bidders .",
    "in the initialization phase , in order to find a good solution to be used for pruning , we propose to use many greedy heuristics and keep the best solution found .",
    "figure  [ fig : appratio ] describes the quality of 16 different greedy heuristics on auctions of varying size ( 100 to 1000 bids , always 10 goods ) taken from the distribution of  @xcite .        on the y - axis : the percentage of the value of the optimal solution reached by the approximation : 100 means perfect approximation , 50 means half of the optimal solution .",
    "one expects that criteria that pick up more promising bids first give better results .",
    "this is what happens .",
    "one sees three main groups .",
    "the middle group includes two criteria : picking at random and picking following the ( in fact random ) order with which bids were given .",
    "the lower ( worst ) group of criteria comprises criteria that choose unattractive bids first .",
    "the higher group contains all criteria we thought attractive .",
    "it contains both unnormalized and normalized criteria ( see  @xcite ) .",
    "the square - root criterion : @xmath5 that has been proved to be theoretically optimal , gives the best approximation .",
    "the average price per unit gives markedly inferior results .",
    "two criteria based on linear programming give pretty good results .",
    "the first one solves the relaxed lp problem for the original auction and orders the bids according to their coefficient in the optimal solution , in descending order .",
    "the second , improved one , is an adaptative version of the first : it solves a lp problem before choosing each bid ( after having eliminated all bids that can not be granted in full ) .",
    "more on those criteria is found in section  [ sec : order ] .",
    "the main factor in determining the efficiency of our branch - and - bound algorithm is the criterion used in choosing the next bid on which to branch in step * choose*. figure  [ fig : sort_100_1000 ] compares different such criteria .        the graph compares six different criteria .",
    "the auctions were taken from  @xcite .",
    "the x - axis shows the number of bids and the y - axis , with a log scale , shows the average number of the nodes visited .",
    "the square root criterion of equation  [ eq : unnorm0 ] seems best .",
    "nevertheless the lp coefficient criterion and the lp improved criterion described in section  [ sec : iniphase ] did very well and even seem better than the square root criterion for large numbers of bids .",
    "figure  [ fig : sort_1500_2500 ] extends the previous graph to larger auctions , for the best criteria only ( for the other criteria we could not finish the search ) .",
    "the criteria based on lp are definitely best .",
    "we now describe running times for auctions of different sizes , under different distributions . figure  [ fig : camus ] uses the distribution proposed in  @xcite .",
    "auctions have been generated for 10 , 12 , 14 and 16 goods .",
    "on the x - axis : the number of bids . on the y - axis : running times in seconds ( log scale ) .",
    "the curves are sub - linear on a logarithmic scale and exhibit the sub - exponential running time of our algorithm .",
    "this graph improves substantially on the similar graph found in  @xcite , showing , again , the advantage of using lp .",
    "this graph also shows faster running times for large auctions than the ones presented in  @xcite .",
    "figure  [ fig : goods ] presents similar results for a fixed number of bids ( 125 ) , for different numbers of goods .",
    "the curve is very clearly sub - linear .",
    "contrary to camus , our bb algorithm exhibits a sub - exponential dependence on the number of goods .",
    "figures  [ fig : devries1 ] , [ fig : devries2 ] , [ fig : devries3 ] and  [ fig : devries4 ] describe the running times of our algorithm over four distributions described by de vries and vohra  @xcite .",
    "the auctions generated there are single - unit combinatorial auctions .                , height=302 ]    figure  [ fig : paths_max ] concerns auctions drawn according to the cats multipaths distribution of the test suite in  @xcite .",
    "notice that our algorithm solves quite easily even auctions with up to 20000 bids .",
    "it seems , then , that the cats multipaths distribution generates problems that are much easier , on average , than those generated by the distribution previously proposed in  @xcite .",
    "this claim is supported by  [ fig : pathscomp ] .        for large numbers of bids ,",
    "the cats multipaths distribution indeed generates problems that are easier to solve .",
    "there is a simple explanation as to why our bb algorithm solves easily cats auctions with very large numbers of bids : in fact , one call to the lp routine is typically enough .",
    "what happens is that the initialization phase finds an allocation of value @xmath6 and the first call to the lp routine finds a fractional solution of same value @xmath6 .",
    "this means that the lp fractional problem has an integer solution and the initialization phase found an optimal solution .",
    "our bb algorithm prunes the first node .",
    "figure  [ fig : catssingle ] shows the running times of our algorithm for the distributions of single unit combinatorial auctions suggested by cats .",
    "our first conclusion is that , even though winner determination is theoretically intractable , it can be performed in practice for auctions of a few hundreds goods among a few thousands bids , without a super - computer and without low - level programming optimization .",
    "the suggestion of  @xcite to consider approximately - efficient mechanisms , may have been premature .",
    "the challenge is now to tackle auctions of a few thousands goods ( such as the fcc auction ) .",
    "but for such situations , the conceptual framework we have worked with in this paper is most probably not adequate : bidders can not be expected to describe their preferences by an explicit list of bids .",
    "suitable languages for expressing preferences must be found and algorithmic problems studied in such a new framework .",
    "our second conclusion is that the difficulty in solving combinatorial auctions stems more from the number of items for sale than from the number of bids .",
    "if the number of bids is large , with respect to the number of items , linear programming often finds the optimal integer solution in one call .",
    "our third conclusion is that the method of choosing the next bid on which to branch is extremely important in determining the efficiency of the search .",
    "more work is needed to understand what makes a good choice and why the square - root criterion of equation  [ eq : unnorm0 ] and the lp adaptative criterion described in section  [ sec : order ] are so good .",
    "s.  de  vries and r.  vohra .",
    "combinatorial auctions : a survey .",
    "http://www.kellogg.nwu.edu/faculty/vohra/htm/res.htm,test problems at : http://www-m9.mathematik.tu-muenchen.de/devries/comb_auction_supplement/ , january 2001 .",
    "y.  fujishima , k.  leyton - brown , and y.  shoham . taming the computational complexity of combinatorial auctions : optimal and approximate approaches . in _ proceedings of ijcai99",
    "_ , stockholm , sweden , july 1999 .",
    "morgan kaufmann .",
    "r.  gonen and d.  lehmann .",
    "optimal solutions for multi - unit combinatorial auctions : branch and bound heuristics . in _",
    "second acm conference on electronic commerce ( ec-00 ) _ , pages 1320 , minneapolis , minnesota , october 2000 .",
    "d.  lehmann , l.  i. ocallaghan , and y.  shoham .",
    "truth revelation in rapid , approximately efficient combinatorial auctions . in _ proceedings of the first acm conference on electronic commerce .",
    "ec99 _ , pages 96102 , denver , colorado , november 1999 .",
    "sigecom , acm press .    k.  leyton - brown , m.  pearson , and y.  shoham . towards a universal test suite for combinatorial auction algorithms . in _ proceedings of ec00",
    "_ , pages 6676 , minneapolis , minnesota , october 2000 .",
    "acm press .",
    "t.  sandholm and s.  suri . improved algorithms for optimal winner determination in combinatorial auctions and generalizations . in _ proceedings of the national conference on artificial intelligence ( aaai )",
    "_ , austin , tx , july 1999 ."
  ],
  "abstract_text": [
    "<S> previous works suggested the use of branch and bound techniques for finding the optimal allocation in ( multi - unit ) combinatorial auctions . </S>",
    "<S> they remarked that linear programming could provide a good upper - bound to the optimal allocation , but they went on using lighter and less tight upper - bound heuristics , on the ground that lp was too time - consuming to be used repetitively to solve large combinatorial auctions . </S>",
    "<S> we present the results of extensive experiments solving large ( multi - unit ) combinatorial auctions generated according to distributions proposed by different researchers . </S>",
    "<S> our surprising conclusion is that linear programming is worth using . </S>",
    "<S> investing almost all of one s computing time in using lp to bound from above the value of the optimal solution in order to prune aggressively pays off . </S>",
    "<S> we present a way to save on the number of calls to the lp routine and experimental results comparing different heuristics for choosing the bid to be considered next . </S>",
    "<S> those results show that the ordering based on the square root of the size of the bids that was shown to be theoretically optimal in a previous paper by the authors performs surprisingly better than others in practice . choosing to deal first with the bid with largest coefficient ( typically 1 ) in the optimal solution of the relaxed lp problem , is also a good choice . </S>",
    "<S> the gap between the lower bound provided by greedy heuristics and the upper bound provided by lp is typically small and pruning is therefore extensive . for most distributions , auctions of a few hundred goods among a few thousand bids </S>",
    "<S> can be solved in practice . </S>",
    "<S> all experiments were run on a pc under matlab . </S>"
  ]
}