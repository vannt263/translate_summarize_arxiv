{
  "article_text": [
    "the size of astronomical data archives continues to increase enormously , so it is in the interests of both data providers and users to make use of the most effective image compression techniques .",
    "compression reduces the storage media costs and the network bandwidth needed to transmit the files to users .",
    "image compression also reduces the number of bytes of data that are transfered to or from local disks during data analysis operations .",
    "the extensive literature on astronomical image compression can be divided into 2 main categories : lossy compression techniques , in which some of the hard to compress information ( ideally only noise ) is discarded , and lossless compression techniques where all the information is preserved so that the original data can be exactly reconstructed from the compressed data .",
    "lossy compression techniques ( e.g. , * ? ? ?",
    "* and references therein ) can provide higher compression than lossless techniques however users must be careful to ensure that the required amount of photometric and astrometric precision in the compressed image is preserved .",
    "lossless compression ( see * ? ? ?",
    "* for a comprehensive summary of previous work ) by definition preserves all the information in the images and is often preferred or required in situations where the data provider must be certain that no information is lost , even if that means having to deal with larger volumes of data .    in this paper",
    "we compare several lossless compression techniques on a large sample of astronomical images .",
    "we describe the different compression methods used in this study in section [ s : tiledimage ] .",
    "then in section [ s : noisecalc ] we review how the noise content of an image sets an upper limit on the lossless compression ratio .",
    "we use 2 sets of synthetic images with known noise properties to compare how well the compression ratios agree with the theoretical expectations .",
    "this is followed in sections [ s : shortimages ] and [ s : intimages ] with a detailed comparison of",
    "how well the different algorithms perform on actual 16-bit and 32-bit integer astronomical images taken mainly with ccd detectors .",
    "section [ s : floatimages ] briefly discusses compression methods for floating point images , and section [ s : tilesize ] discusses how the choice of tiling pattern affects the compression performance .",
    "section [ s : summary ] then summarizes the main results of this study .",
    "finally , the appendix gives a derivation of the formula for the equivalent number of noise bits in an image and shows how this relates to the seminal work by @xcite on entropy in communication theory .",
    "in this study we use a relatively new compressed image format that is based on the fits tiled - image compression convention @xcite . under this convention ,",
    "the image is first divided into a rectangular grid of `` tiles '' .",
    "usually the image is tiled on a row by row basis , but any other rectangular tile size may be specified .",
    "each tile of pixels is then compressed using one of several available compression algorithms ( described below ) , and the compressed stream of bytes is stored in a variable length array column in a fits binary table .",
    "each row of the fits binary table corresponds to one tile in the image .",
    "our software uses the cfitsio library @xcite to transparently read and write these compressed files as if they were ordinary fits images , even though they are physically stored in a table format .",
    "one of the advantages of using this tiled image convention , compared to the other technique currently used by most observatories and data archive centers of externally compressing the entire fits image with the gzip utility , is that the compressed fits image is itself a valid fits file and the image header keywords remain uncompressed , which provides faster read and write access .",
    "another advantage is that each image in a multi - extension fits file is compressed separately and can be read without having to uncompress the entire fits file .",
    "similarly , when reading a small section of the image , only the corresponding tiles need to be uncompressed .",
    "the current implementation of this convention in the cfitsio library supports 4 lossless compression algorithms : rice , hcompress , plio , and gzip . in principle , any other compression algorithm , e.g. , jpeg 2000 or bzip2 , could be added in the future .",
    "we note however that the jpeg 2000 lossless algorithm , jpeg - ls , uses the golomb - rice coding which is similar to the rice algorithm , and the bzip2 algorithm typically only provides a few percent more compression than gzip , but requires much more cpu processing time , especially when uncompressing the image @xcite .",
    "the main features of each of the algorithms used in this study are described below .",
    "* rice * : the rice algorithm @xcite is very simple ( additions , subtractions , and some bit masking and shifts ) , making it computationally efficient . in fact , it has been implemented in hardware for use on spacecraft and in embedded systems , and has been considered for use in compressing images from future space telescopes @xcite . in its usual implementation , it encodes the differences of consecutive pixels using a variable number of bits .",
    "pixel differences near zero are coded with few bits and large differences require more bits .",
    "the algorithm adapts to the noise by determining the number of pure noise bits to strip off the bottom of the difference and include directly in the output bitstream ( with no coding ) .",
    "the best value for this noise scale is computed independently for each block of 16 or 32 pixels . with such short blocks ,",
    "the algorithm requires little memory and adapts quickly to any variations in pixel statistics across the image .    *",
    "hcompress * : the hcompress algorithm was written to compress the space telescope science institute digitized sky survey images @xcite .",
    "it involves ( 1 ) a wavelet transform called the h - transform ( a haar transform generalized to two dimensions ) , followed by ( 2 ) an optional quantization that discards noise in the image while retaining the signal on all scales , followed by ( 3 ) a quadtree coding of the quantized coefficient bitplanes . in this study",
    "we omitted the quantization step , which makes hcompress lossless .",
    "the h - transform computes sums and differences within pixel blocks , starting with small 2x2 blocks and then increasing by factors of two to 4x4 , 8x8 , etc .",
    "this is an exactly reversible , integer arithmetic operation , so a losslessly encoded set of the h - transform coefficients can be uncompressed and inversely transformed to recover the original image . the h - transform can be performed in - place in memory and requires enough memory to hold the original image ( or image tile ) . to avoid overflow problems when summing the pixel values ,",
    "the memory array is expanded by a factor of 2 so that each pixel has twice as many bits as in the original image .",
    "the hcompress bitplane coding , which proceeds by first compressing the most significant bit of each coefficient ( mostly zeros ) and working down to the least significant bit ( usually noise ) , has the effect of ordering the image description so that the data stream gives a progressively better approximation to the original image as more bits are received .",
    "this was used to create an efficient adaptive scheme for image transmission @xcite .",
    "* plio * : the iraf @xcite pixel list i / o ( plio ) algorithm was developed to store integer image masks in a compressed form .",
    "this special - purpose run - length encoding algorithm is very effective on typical masks consisting of isolated high or low values embedded in extended regions that have a constant pixel value .",
    "our implementation of this algorithm only supports pixel values in the range 0 to @xmath3 .",
    "because of the specialized nature of the plio algorithm , we only discuss its use with compressing data masks , in section [ s : datamask ] .",
    "* gzip * : [ s : gzip ] the popular gzip file compression utility @xcite is the defacto standard compression method currently used in the astronomical community .",
    "nearly all major observatories and data archive centers distribute their data as gzip compressed files . for this reason",
    ", gzip serves as the baseline of comparison for the other compression methods in our study .",
    "gzip uses a variation of the lempel - ziv algorithm @xcite to build a dictionary of repeated sequences of bytes occurring in the input and using a short code for each sequence .",
    "the most important distinguishing characteristic of gzip compared to the other compression algorithms used in this study is that gzip treats each 8-bit byte of the input data stream as an independent datum , whereas the other compression methods operate on the numerical value of the input image pixels as multi - byte quantities .",
    "this puts gzip at a distinct disadvantage when compressing astronomical images with 16-bit or 32-bit pixel values because , unlike the rice and hcompress algorithms , gzip can not use the numerical difference between adjacent pixels as a means of improving the compression . as a result",
    ", it becomes less effective when increasing noise makes repeated bit patterns less common .",
    "it should be noted that the gzip algorithm has a user - selectable parameter for fine tuning the trade off between speed and compression ratio , where a value of 1 gives the fastest compression at the expense of file size and 9 gives the highest compression at the expense of speed . using the fastest value of 1 instead of the default value of 6 can increase the compression speed by a factor of 2 or more while only increasing the compressed file size by a few percent",
    ", therefore we have used this in all the speed comparison tests in this study .",
    "one small side effect , however , is that it increases the subsequent image uncompression time by about 10% .    within this study , the gzip algorithm is used in 2 different processing contexts which have significantly different speeds . in the first context , the gzip program on the host computer is used to externally compress the fits image , and in the other context the gzip algorithm is used within the fits tiled image convention to compress each image tile .",
    "the numerical algorithm is identical in both cases , however the host gzip program only takes about half as much cpu time as the tiled gzip method to compress the same image .",
    "this difference is mainly due to the fact that the host gzip program can more efficiently read and write the input and output files as sequential streams of bytes , whereas the tiled image compression method requires random access to the fits files , which in turn requires that the input and output data be copied to intermediate storage buffers in memory .",
    "as will be demonstrated later , in spite of this extra processing overhead the tiled image rice algorithm can still compress images several times faster than the host gzip program .",
    "the fundamental principle that limits the amount of lossless image compression is the well known fact that noise ( that is , entropy ) is inherently incompressible . in this section",
    "we quantitatively demonstrate how the amount of noise in an image can be measured and used to predict the lossless image compression ratio .    in order to study the affect of noise on image compression in a large sample of images , we need an algorithm that can reliably estimate the amount of noise in any given image without manual interaction or iterations .",
    "such an algorithm was recently developed by @xcite for measuring the signal - to - noise in spectroscopic data .",
    "it is based on the median absolute deviation ( mad ) method of quantifying the variations in a sample of values , which is less sensitive to the presence of outlying values than other simple statistical measures such as the standard deviation . to help mitigate against the possible presence of correlations in the noise between adjacent pixels in an image",
    ", @xcite developed a series of higher - order mad equations that use the differences between the values of every other pixel in each row of the image . in our study",
    "we have adopted their 3rd order mad equation ( as they did as well ) as a good compromise between simplicity and accuracy .",
    "this mad value for each row of the image is given by : @xmath4 where @xmath5 is the vector index of the pixel within each row of the image , and @xmath6 is the value of the indicated pixel . the median value is computed over all the pixels in the row . ( a c - language implementation of this algorithm is available in our image compression software which can be downloaded as described at the end of this paper ) .",
    "the use of the median in this formula is very effective at eliminating any outlying large deviations , for instance , close to the images of star and galaxies in typical astronomical images . also , this formula is insensitive to large - scale gradients in the mean background across the image . as a result",
    "this formula provides a good measure of the pixel variations relative to the _ local background _",
    "regions of the image , in between any localized brighter objects in the image .",
    "it is easier to understand how noise affects image compression by considering a hypothetical image that has bitpix bits per pixel ( where bitpix is usually 8 , 16 , or 32 in astronomical images ) and where the lowest @xmath7 bits of each pixel contain only noise ( i.e. , where each bit is randomly assigned a value of 0 or 1 ) , and the higher order @xmath8 bits are all set to 0 .",
    "a histogram of the integer pixel values in such an image will have a flat distribution ranging from 0 to @xmath9 .",
    "since the @xmath7 noise bits in each pixel are incompressible , the maximum possible compression ratio that can be achieved , if all the remaining bits are infinitely compressed to 0 , is given simply by @xmath10 where @xmath11 is the ( average ) number of noise bits per pixel in the image .",
    "@xmath11 is equivalent to the @xcite entropy expressed in bits ( see appendix ) . in practice",
    ", no actual algorithm can infinitely compress all the non - noise bits , and instead can only compress them , on average , down to @xmath2 bits per pixel .",
    "this @xmath2 parameter can be viewed as a measure of the efficiency of a compression algorithm , where better algorithms have smaller values of @xmath2 .",
    "thus , the compression ratio achieved by actual compression algorithms is given by @xmath12    unlike in the above example , the noise in astronomical images is usually not neatly confined to the lowest @xmath7 bits of each pixel .",
    "the actual noise distribution in the types of astronomical ccd images studied in this paper is a complex sum of the poisson photon noise plus multiple noise sources in the detector , such as from the charge transfer and read - out electronics . in practice , the sum of all these noise contributions near to the background level in a ccd image can be closely approximated by a gaussian .",
    "( fitting a gaussian to the histogram of the pixel values is a common image processing technique for measuring the mean background level . )",
    "if one assumes that the noise in the image pixels has a gaussian distribution , with standard deviation @xmath13 , then we show in the appendix that the _ equivalent _ number of noise bits per pixel in the image is given by @xmath14 and the expected compression ratio for this image is then given by @xmath15 thus , in summary , we can use the mad equation  [ eq : noise3 ] to estimate the noise in the background regions of an image , and then use equation  [ eq : ratio2 ] to predict how much that image can be losslessly compressed .",
    "for example , a 16-bit integer image with mad @xmath16 contains about 6 bits per pixel of uncompressible noise and will compress by a factor of 2.3 when using a compression algorithm that has @xmath2 = 1 .      before measuring the performance of the different compression algorithms on real astronomical images , it is instructive to first study the behavior of the algorithms on 2 sets of synthetic 16-bit and 32-bit integer images that by construction have noise properties that match the 2 cases discussed in the previous section . in the first set of synthetic images",
    "the lowest @xmath7 bits of each integer pixel were randomly assigned a value of 0 or 1 and the upper bitpix ",
    "@xmath7 bits are all set to 0 . in the second set of synthetic images ,",
    "the pixels were assigned values randomly selected from a gaussian distribution , with @xmath13 ranging from 1.0 to 500 .",
    "( we also added a constant offset to the pixels in these images to avoid negative values , however we verified , as expected , that the magnitude of this offset has no effect on the performance of the compression algorithms . ) the equivalent number of noise bits per pixel in this second set of images is given by equation  [ eq : nbits ] .",
    "we then measured how the compression ratio of these synthetic images varies as a function of the number of noise bits ( or equivalent noise bits ) in the image when using the 3 general - purpose tiled - image compression algorithms , rice , gzip , and hcompress . instead of directly plotting the compression ratio , @xmath17 ,",
    "it is more informative to plot the reciprocal quantity @xmath18 as a function of the number of noise bits per pixel , because in this coordinate frame the lines of constant @xmath2 value have a slope = 1.0 and a y - intercept = @xmath2 .",
    "the results for the 16-bit integer synthetic images are shown in figure [ f : compbit_v_noise16 ] where the solid lines are derived from the images with uniformly distributed @xmath7 bits of noise , and the circular or triangular points are derived from the other set of images with a gaussian noise distribution .",
    "the lowest line and set of points is derived using hcompress , the middle ones using rice , and the upper ones using gzip .",
    "the diagonal dotted lines represent the different constant @xmath2 values , and the horizontal dashed lines show the image compression ratio that corresponds to the compressed bits per pixel scale on the y axis .    in the case of the hcompress and rice algorithms",
    ", it can be seen that the points lie almost exactly on top of the corresponding line .",
    "this provides strong empirical confirmation of the @xmath19 horizontal offset ( derived in the appendix ) that is needed to produce this good agreement .",
    "a least squares solution for the offset that produces the best agreement between the 2 sets of images gives @xmath20 for hcompress , and @xmath21 for rice , in excellent agreement with the expected value of @xmath22 .",
    "it can also be seen that the hcompress and rice lines have a slope very close to 1.0 , which means that the @xmath2 compression efficiency factor for these 2 algorithms is nearly constant and is independent of the amount of noise in the image . the best fitting @xmath2 values are @xmath23 bits per pixel for hcompress and @xmath24 for rice .",
    "close inspection of the figure shows however that the @xmath2 value does increase slightly for images with less than about 5 bits of noise .",
    "we attribute this trend to the fixed - size disk space `` overhead '' in the fits tiled - image compression format which becomes relatively more significant as the image becomes more highly compressed .",
    "( see also the discussion in the appendix of another non - linear effect at small values of @xmath7 ) .",
    "it is apparent that gzip behaves very differently from rice or hcompress in figure [ f : compbit_v_noise16 ] .",
    "gzip can not be parameterized with a single value of @xmath2 , and instead ranges from about 2 to 5 bits per pixel , depending on the amount and distribution of the noise in the image . unlike the other 2 algorithms , gzip does not compress the 2 types of synthetic noise images equally well ; it compresses the images in which the noise is confined to the lowest @xmath7 bits better than the images with a gaussian noise distribution .",
    "it is interesting that @xmath2 appears to reach a maximum at @xmath25 which is where the noise propagates into the more significant byte of the 2-byte pixel values .",
    "we attribute most of these differences between gzip and the other 2 algorithms to the fact that hcompress and rice treat each 16-bit pixel value as a single integer number , whereas gzip treats each 8-bit byte as an independent datum .",
    "the equivalent plot for the synthetic 32-bit integer images is shown in figure [ f : compbit_v_noise32 ] .",
    "the relations for rice and hcompress are virtually identical to those for the 16-bit integers , and in particular , the @xmath2 values are the same . as was the case with 16-bit images , gzip behaves quite differently and has a variable @xmath2 value that approaches 8 bits per pixel for the noisiest images ( i.e. , has a full byte per pixel of overhead compared to the ideal @xmath2 = 0 algorithm ) .",
    "in this section we examine how well the different compression methods perform on real 16-bit integer astronomical images .",
    "the primary data set used in these tests is the set of images that were taken during the night of 27  28 july 2006 at cerro tololo inter - american observatory using the mosaic ccd camera .",
    "this data set contains a variety of different types of images that are typically taken during an observing session , including 0s exposure bias frame images , heavily exposed flat - field images , short exposures ( 10s  30s ) of bright calibration stars , and longer exposures ( 500s  600s ) containing randomly distributed images of stars , faint galaxies , and diffuse emission .",
    "these are typical of the types of images obtained by many sky - survey projects .",
    "the mosaic camera contains 8 individual ccd detectors , and each detector has 2 amplifiers that read out half of the chip each .",
    "thus , every exposure with this camera results in a fits file containing 16 image extensions that are each 1112 by 4096 pixels in size . in total",
    ", this data set consists of 102 fits files containing 1632 separate fits image extensions .    to complement this large homogeneous set of images taken with the mosaic camera",
    ", we also included in our test sample a smaller set of 16-bit integer images taken with a variety of other instruments .",
    "first we included the suite of test images that were collected by @xcite for use in testing image processing techniques .",
    "this sample of images has been used in many previous studies @xcite and remains available from ftp://iraf.noao.edu/iraf/extern/focas.std.tar.z . in order to further increase the diversity of images in our sample ,",
    "we included 9 other more recent deep - sky images obtained from the archives of the hubble space telescope , eso , and the anglo - australian observatory .",
    "we compressed and uncompressed each of these images using the rice , gzip , and hcompress algorithms supported by our tiled - image compression software , and in each case recorded the compression ratio and the elapsed compression and uncompression cpu times .",
    "these same parameters were measured using the gzip utility program on the host computer to externally compress and uncompress the images .",
    "these host gzip tests were performed on a single fits image extension instead of on the whole multi - extension file , to be comparable with the tiled - image compression tests which also operate on a single image extension at a time .",
    "we also calculated the mad pixel dispersion in the background regions of each image from equation [ eq : noise3 ] and the corresponding equivalent number of noise bits from equation [ eq : nbits ] .",
    "one of most striking results of this study , as shown in figure [ f : rice_v_noise ] , is the very tight correlation between the compression ratio and the measured number of equivalent noise bits in the mosaic camera images ( plotted with small + symbols ) .",
    "the gray line going through these points is derived from the 2 sets of synthetic noise images discussed in the previous section and corresponds closely to the @xmath2 = 1.2 line in figure [ f : compbit_v_noise16 ] .",
    "( the compression ratio @xmath17 , is plotted here , rather than the reciprocal quantity @xmath26 that was use in the previous figures , because @xmath17 is the quantity of more direct interest to most users . )",
    "the larger points in this figure are derived from the comparison sample of images , and show that they also generally follow the same relation as the mosaic images , but with somewhat larger scatter .",
    "the close agreement between the mosaic camera images and the synthetic noise images in figure [ f : rice_v_noise ] demonstrates that the presence of `` objects '' in the astronomical images ( e.g. , the stars and galaxies ) has little impact on the compressibility of these images .",
    "this is also demonstrated by the continuity between the mosaic camera bias and flat field images ( which contain no objects ) and the images of the sky .",
    "this is simply a result of the fact that most of the pixels in the mosaic camera sky images have values close to the background level and only a few percent of the total image area is significantly affected by the brighter objects .",
    "thus , even if the algorithms do not compress the regions close to these bright objects very effectively , the overall compression ratio of the image will still mainly be determined by the compressibility of the background regions . since our mad noise estimation algorithm ( equation [ eq : noise3 ] ) measures the noise in the background regions",
    ", it is an excellent predictor of the overall image compression ratio of these images .",
    "obviously there can be exceptions to this general rule if the objects in the image occupy a significant fraction of the image area .",
    "this is the case for the 2 images in our comparison sample that are plotted with open circles in figure [ f : rice_v_noise ] .",
    "these are a pair of long and short exposures of the ngc 3201 globular cluster ( the ngc0001.fits and ngc0002.fits files from the * ? ? ?",
    "* image suite ) which contain an unusually dense pattern of star images . in cases like this",
    "the overall image compression ratio can be significantly less than what would be predicted simply from the pixel variations in the local background regions between the stars images .",
    "it is also interesting to note in figure [ f : rice_v_noise ] that the mosaic camera images are segregated into 3 distinct groups that correspond to the bias frame images ( containing the least amount of noise ) , the short exposures of calibration stars ( the middle group ) , and the deeper exposures of the sky and flat fields ( containing the most noise ) .",
    "this grouping is just a reflection of the fact that these three different types of images have distinctly different average pixel values , and the noise ( mainly from poisson statistics ) scales roughly as the square root of that value .",
    "the insert in figure [ f : rice_v_noise ] shows a magnified section of the data in which it can be seen that the points tend to lie along distinct bands which correspond to the 16 different detectors in the mosaic camera .",
    "the points from a single detector are tightly correlated and thus most of the scatter seen in this figure is due to the systematic differences between image detectors .",
    "we will come back to this effect in the discussion of the newfirm images in the following section which show an even more pronounced banding pattern .",
    "figure [ f : all_v_noise ] compares the compression ratios achieved by all three algorithms plotted as a function of the equivalent number of noise bits in the mosaic camera ccd images . as can be seen , rice and hcompress achieve very similar compression ratios that are about 1.4 times greater than when using gzip .",
    "the bottom panel shows that this ratio varies from about 1.5 for images with low to moderate amounts of noise , to about 1.3 for the noisest images .",
    "the middle panel shows that hcompress produces about 2% to 5% better compression than rice , but as discussed below , this small gain is usually not worth the much higher required cpu times .",
    "the upper solid curve in figure [ f : all_v_noise ] shows the theoretical maximum compression ratio , given by bitpix / @xmath11 , of an ideal lossless algorithm that infinitely compresses all the non - noise bits in the image ( i.e. , an algorithm with @xmath27 ) .",
    "the rice and hcompress algorithms have measured @xmath2 values of 1.2 and 0.8 bits per pixel , respectively , and thus produce about 75% to 90% of the ideal amount of compression , depending on the noise level .",
    "the relative compression and uncompression speeds of the different methods are shown in figures [ f : mosaic_relative_pk_times ] and [ f : mosaic_relative_unpk_times ] .",
    "the rice compression algorithm is 23 times faster than hcompress ( depending on the amount of noise ) and 46 times faster than tiled - gzip ( or about 23 times faster than the host gzip utility , as explained in section [ s : tiledimage ] ) .",
    "when uncompressing images , rice is 2.53 times faster than hcompress , and 1.6 to 2 times faster than tiled - gzip ( or about the same speed as the host gunzip utility ) .",
    "the mean compression ratios and the mean compression and uncompression cpu times for all 1632 mosaic camera images are given in table 1 for each of the compression methods .",
    "the cpu times are relative to the rice algorithm . as a benchmark reference , a linux pc with a 2.4 ghz amd",
    "opteron 250 dual core processor ( using only one of the processors ) can rice - compress a 50 mb 16-bit integer fits image in 1 second . uncompressing",
    "this image also takes about 1 second .",
    "lcccc compression ratio & 2.11 & 2.18 & 1.53 & 1.64 + compression cpu time & 1.0 & 2.8 & 5.6 & 2.6 + uncompression cpu time & 1.0 & 3.1 & 1.9 & 0.85 +      data mask images are often used in processing environments as a means of flagging special conditions that affect the corresponding pixels in an associated astronomical image .",
    "the pixel values in a data mask contain essentially no noise , so the general relationship between noise and compression ratio as discussed previously does not apply . instead of being limited by noise ,",
    "the maximum compression ratio of a data mask is determined by internal limits within each compression method . with the rice algorithm , for example ,",
    "each block of 32 image pixels (= 64 bytes ) can at most be compressed to a single 4-bit code value for a maximum compression ratio of 128 .",
    "similarly , the maximum compression ratio is about 200 for gzip and about 700 for both hcompress and plio .",
    "other factors , such as the image tile size , can further limit the compression ratio , but in practice , large compression ratios of 50 or more can often be achieved .    in many cases , choosing the algorithm that produces the very highest compression ratio is of secondary importance because the masks compress so well with any algorithm that the size is insignificant compared to the rest of the associated data set .",
    "the compression and uncompression speed of the algorithm can be a more significant consideration in this case .",
    "our tests on a sample of data masks show that rice and the iraf plio algorithm are the fastest , but gzip and hcompress are less than a factor of 2 slower .",
    "overall , plio provides the best combination of compression ratio and speed when compressing data masks , but the difference with the other algorithms is not great . in practice",
    "it may be simplest to just use the same compression algorithm on the data mask as is used on the associated astronomical image .",
    "astronomical images in 32-bit integer format are less frequent than 16-bit integer images because few imaging detectors produce more than 16 bits per pixel of precision .",
    "one of the few such instruments in general use is the newfirm near - infrared camera at the kitt peak national observatory . in order to measure the performance of the different compression methods on 32-bit integer images",
    ", we used a sample of fits images taken with this camera during the night of 24  25 february 2008 .",
    "these images are similar to the mosaic data set , and include bias frames , flat fields , short exposures of calibration stars , and longer exposures of the sky containing images of stars and faint galaxies .",
    "the newfirm instrument contains a mosaic of 4 imaging detectors , each of which is 2112 by 2048 pixels in size .",
    "there are 447 newfirm observations in our data sample , giving a total of 1788 separate images .",
    "we repeated the same analysis as was done in the previous section on the 16-bit images to measure the compression ratios and the cpu times required to compress and uncompress each of the 32-bit integer newfirm images with each different compression method .",
    "figure [ f : newfirm_ratio_v_noise ] shows how the rice and tiled - gzip compression ratios depend on the measured number of equivalent noise bits in each image .",
    "( the points for the hcompress algorithm have been omitted for clarity because they lie only slightly above the rice points . )",
    "this figure is similar to the corresponding figure [ f : all_v_noise ] for 16-bit integer images , except that the compression ratios are twice as large , given the same amount of noise .",
    "this is to be expected from equation [ eq : ratio ] and is a natural consequence of the fact that a 32-bit integer image is a factor of 2 larger than a similar 16-bit image , but if they both have the same equivalent number of noise bits per pixel then the compressed images will be identical in size when using algorithms like rice and hcompress that have a constant @xmath2 value .",
    "this 2:1 relationship in compression ratios does not hold for the gzip algorithm because @xmath2 is larger for 32-bit integer images , as can be seen by comparing figures [ f : compbit_v_noise16 ] and [ f : compbit_v_noise32 ] .",
    "thus , the compression ratio of a 32-bit image when using gzip is only about 1.6 times greater then that of a 16-bit image with the same equivalent number of noise bits .",
    "as was also the case for the 16-bit astronomical images , the different types of images are segregated into separate regions of figure [ f : newfirm_ratio_v_noise ] because the mean pixel value , and hence the amount of noise , is distinctly different .",
    "the clump of points with @xmath28 are the 0s exposure ` bias ' calibration exposures , the points with @xmath29 are the short exposures of calibration stars , and the remaining points with larger noise values are the deep sky images and the heavily exposed flat field images .",
    "the upper solid curve in figure [ f : newfirm_ratio_v_noise ] shows the maximum possible lossless compression ratio that would be achieved by an ideal compression algorithm that has @xmath27 .",
    "hcompress and rice , with @xmath2 values of 0.8 and 1.2 , respectively , are within 75% to 90% of this theoretical limit , depending on the amount of noise , just as with 16-bit integer images .    finally , one other prominent feature in figure [ f : newfirm_ratio_v_noise ] is that the points are split into distinct bands that correspond to the 4 different detectors in the newfirm camera .",
    "this is similar to the banding seen in the 16-bit mosaic camera image , but on a larger scale . unlike the ccd detectors in the mosaic camera , which are closely matched in image quality , the 4 infrared imaging devices in the newfirm camera have distinctive characteristics .",
    "one notable feature is that these images show faint streaks in the background , and the streaks run vertically in 2 of the chips and horizontally in the other 2 ( as a result of the way the chips are oriented in the camera ) .",
    "since our mad algorithm calculates the noise on a row by row basis , the noise value is larger in the cases where the rows cut across the grain of the streak pattern .",
    "this causes a systematic displacement of the points from the different chips in the figure .    naively , one would expect the displacements would fall along the gray line in the figure that is derived from synthetic images with uniformly or gaussian distributed noise , so that any change in the noise level causes a corresponding change in the compression ratio according to equation  [ eq : ratio2 ] .",
    "but as can be seen , there are instances where 2 images taken with different detectors have the same equivalent number of noise bits but have systematically different compression ratios ( i.e. , there is a vertical displacement between the points from the different chips in the figure ) .",
    "this indicates that these images have properties that differ in some way from the assumptions that went in to the derivation of equation  [ eq : ratio2 ] . as a simple example ,",
    "if one were to add a small constant value to all pixels in the even - numbered columns of an image , this would increase the dispersion in the pixel values along each row of the image , causing the compression ratio to decrease , however the calculated mad noise value would remain unchanged because that calculation is based on the differences between every other pixel value in the row .",
    "more generally , any deviations from the assumed pure gaussian distribution in the image pixel values can lead to systematic offsets in the calculated equivalent number of noise bits , or in the efficiency of the compression algorithm ( i.e. , the @xmath2 value ) , or both . at some level",
    "every physical device will show deviations from an ideal detector .",
    "these effects are relatively large in the newfirm detectors , but the banding seen in the insert in figure [ f : rice_v_noise ] indicates that they are also present in the 16-bit mosaic camera image at a smaller level .",
    "this effect probably also accounts for some of scatter seen in that figure in the comparison sample of images taken with other instruments .",
    "if one were to analyze a larger sample of images from each of those instruments , they would likely fall within a fairly narrow region in that figure .",
    "a comparison of the cpu times required to compress and uncompress the 32-bit integer images with gzip or hcompress , relative rice , is shown in figures [ f : newfirm_relative_pk_times ] and [ f : newfirm_relative_unpk_times ] . the average compression ratios and the relative compression and uncompression cpu times for all 1788 newfirm images are also summarized in table [ t:32int ] . as can be seen ,",
    "the speed advantage of rice over hcompress or gzip is even greater when compressing or uncompressing 32-bit images than with 16-bit images . our benchmark linux machine ( 2.4 ghz amd opteron 250 dual core processor ) , can rice - compress a 90 mb 32-bit integer fits image in about 1 second and can uncompress the same image in about 1.2 seconds .",
    "lcccc compression ratio & 3.76 & 3.83 & 2.30 & 2.32 + compression cpu time & 1.0 & 5.2 & 7.8 & 4.7 + uncompression cpu time & 1.0 & 3.4 & 2.2 & 1.3 +      instead of storing real - valued images using the 32-bit ieee floating point number representation , a widely used fits convention converts the floating - point values into scaled integers , where the ( approximate ) floating point value is then given by @xmath30 and where bscale and bzero are linear scaling constants given as keywords in the header of the fits image .",
    "this is technically a ` lossy ' compression technique that quantizes all the pixel values into a set of discrete levels , spaced at intervals of 1/bscale .",
    "ideally , the quantization levels should be spaced finely enough so as to not lose any scientific information in the image , but without recording each value with an excessive amount of precision .",
    "unfortunately , a common practice is to simply scale the image so that the pixel values span the full 32-bit integer range .",
    "this has the effect of greatly _ magnifying _ the dispersion in the scaled integer values which makes them virtually incompressible .    in order to achieve higher compression ,",
    "a better technique , as described in detail by @xcite , is to choose the bscale value so that the quantized levels are spaced at some reasonably small fraction of the noise in the image , such that , @xmath31 and where @xmath13 is calculated from equation [ eq : noise3 ] .",
    "the number of noise bits per pixel that are preserved in this case , from equation [ eq : nbits ] , is simply @xmath32 . in order to achieve the best compression",
    ", data providers should choose the smallest value of @xmath33 that still preserves the required scientific information in the compressed image .",
    "this can be determined by performing the same photometric and astrometric data analysis on both the original and the compressed version of the image .",
    "the amount of precision that needs to be retained of course depends on the particular application ( e.g. , quick - look or preview images need much less precision than those intended for full scientific analysis ) , but previous experiments ( see for example figure 2 in * ? ? ? * ) suggest that values of @xmath33 in the range of 10 to 100 ( about 5 to 8 equivalent noise bits per pixel ) may be sufficient to retain all the scientifically useful information in the image .",
    "compressing astronomical images that have 32-bit floating point format pixel values presents special challenges .",
    "one difficulty is that many compression algorithms , including rice and hcompress , can by design only operate on integer data .",
    "another problem is that in many cases the floating point image is derived from what was originally a 16-bit integer image ( after applying various calibration operations such as bias subtraction , flat - fielding , sky subtraction , flux calibration , etc . ) and the resulting expansion from a 16-bit to a 32-bit representation can leave the less significant bits of the mantissa effectively filled with uncompressible noise .",
    "one way to mitigate this effect is to artificially set some of the least significant bits in every pixel to zero which serves to more coarsely quantize the pixel values .",
    "this is particularly effective when compressing the floating point image file with the gzip utility , because this reduces the number of different byte patterns present in the file , thus increasing the compression efficiency of the algorithm .",
    "some observatories , such as the swift x - ray and gamma - ray satellite , have used this quantization technique in their processing pipeline to significantly reduce the size of the gzip - compressed files in their data archive .    rather than directly quantize the floating point values , we use an equivalent quantization technique of converting the floating - point values into scaled 32-bit integers as described in section [ s : scaled ] .",
    "these integers are then compressed using the rice algorithm .",
    "the linear scaling parameters are calculated independently for each tile ( row ) of the image so that the quantization levels are spaced at a user - specified fraction of the measured noise in the tile .",
    "this effectively discards some of the lower - order bits in the mantissa of the floating point values , which typically do not contain any significant information .",
    "depending on how many bits are discarded , the image compression ratio of the scaled integer image can be dramatically increased . as is discussed in section [ s : scaled ] , however , it is incumbent upon the user to determine the appropriate scaling level so as to not degrade the scientific usefulness of the image .",
    "there are a number of considerations in choosing an appropriate tiling pattern when compressing an image .",
    "first , the tile must be sufficiently large for the compression algorithm to operate efficiently . as a general guide line ,",
    "the lower limit is about 500 pixels for the rice algorithm and about 2000 pixels for gzip .",
    "below these levels , the compression time for the image and the size of the compressed file both begin to increase .",
    "the hcompress algorithm is inherently different from rice and gzip in that the wavelet transform only operates on 2-dimensional arrays of data . at a minimum it requires tiles containing at least 4 rows of the image , and it reaches near maximum efficiency when the tiles contain about 16 rows . for this reason we adopted 16 rows of the image at a time as the default tiling pattern in our software when using hcompress .",
    "the other main consideration when choosing a tile size is how the software that reads the image will access the pixels .",
    "the 2 most common access methods used by astronomical software are either to read the entire array of pixels in the image into computer memory all at once , or to read the image sequentially one row at a time . in the first case ,",
    "the specific tiling pattern makes little difference because the reading routine simply has to uncompress each and every tile in the image once and pass the array of uncompressed pixels back to the application program .",
    "if the application program reads the image one row at a time , then the tiling pattern can have a major effect on the reading speed .",
    "if each tile contains multiple rows of the image ( and in the extreme case , the whole image could be compressed as one big tile ) , then the fits file reading routine must uncompress the whole tile in order to extract a single row .",
    "it would obviously be very inefficient to repeatedly uncompress the same tile each time the application program requests the next row of pixels .",
    "instead , a recommended implementation strategy is to temporarily store the most recently accessed uncompressed tile in memory , so that it is still available in case the application program reads more pixels from that same tile .",
    "this caching technique adds some computational overhead , however , so in general the default single row tiling pattern is more efficient for applications that read an image row by row .",
    "a third type of image access occurs in applications that read a rectangular ` cutout ' from a much larger compressed image . in this case",
    "it can be efficient to use a rectangular tile pattern that approximates the size of the typical cutout .",
    "only those tiles that overlap the cutout region will then have to be uncompressed .",
    "this tiling pattern may be grossly inefficient however , for software that accesses the image one row at a time , unless a fairly sophisticated caching mechanism is implemented to store all the uncompressed tiles along a row .    in summary ,",
    "the default row by row tiling pattern ( or 16 rows at a time in the case of hcompress ) should work well in most situations .",
    "the main exception is if the images are very small , in which case it may be more efficient to compress multiple rows , or the entire image , as a tile .",
    "in this paper we have performed a detailed evaluation of various lossless compression techniques on a large sample of astronomical images that are representative of the types of images from many sky survey projects .",
    "using optimal compression methods on such images can make a large difference in the amount of disk space and network bandwidth needed to analyze , archive , and distribute the images .",
    "we focus on lossless compression techniques because they may be adopted by data providers without any risk of losing information in the data .",
    "lossy compression techniques can provide higher compression and may be appropriate in some situations , but the data provider must ensure that the required amount of astrometric and photometric precision is retained .    as we show in section [ s : noisecalc ] , the amount by which an image can be losslessly compressed basically depends on 2 quantities : the amount of noise in the image , and on the compression efficiency of the algorithm .",
    "the first quantity can be expressed as the average number of bits of noise , @xmath11 in each pixel value . by definition",
    "these noise bits can not be compressed , therefore the total number of noise bits in the image sets the lower limit on the size of the compressed file .",
    "the efficiency of a compression algorithm is a measure of how well , on average , it is able to compress the remaining non - noise bits in each pixel ; we represent this quantity with the letter @xmath2 , in units of bits per pixel .",
    "the lossless compression ratio is then simply given by the number of bits per pixel ( e.g. , 16 or 32 ) divided by the sum of @xmath11 and @xmath2 .",
    "the noise in astronomical images is usually not neatly packed into the lowest @xmath11 of each pixel value ( otherwise they could simply be discarded since they contain no useful information ) .",
    "we measure the _ equivalent _ number of noise bits per pixel from the fluctuations ( i.e. , noise ) in the pixel values in the background regions of the image .",
    "we use a mad algorithm that was originally developed to calculate the signal - to - noise ratio in spectroscopic data to robustly estimate the background fluctuations in any image . as we show in the appendix , if one assumes that the pixel fluctuations have a gaussian distribution ( which is a reasonable assumption in the ccd images discussed here ) with standard deviation @xmath13 , then the equivalent number of noise bits per pixel in that image is given by @xmath34 .",
    "in section [ s : synthimages ] we constructed synthetic images containing these 2 different noise distributions ( i.e. , @xmath11 of noise and gaussian - distributed noise ) to verify that the general purpose compression algorithms used in our study , rice , hcompress , and gzip , actually behave as expected .",
    "we found that rice and hcompress , which operate on the numerical 16-bit or 32-bit integer value of each pixel , do indeed show the expected relationship between the amount of noise in the image and the compression ratio .",
    "in particular , we confirmed that the offset of @xmath19 that was derived in the appendix is needed to bring the images with the 2 different noise distributions into agreement in figures [ f : compbit_v_noise16 ] and [ f : compbit_v_noise32 ] .",
    "the rice and hcompress algorithms also have nearly constant @xmath2 efficiency values of 1.2 and 0.8 bits per pixel , respectively , independent of the amount of noise in the images .",
    "the gzip algorithm on the other hand shows quite different behavior , which can be attributed to the fact that it treats each byte in the 16-bit and 32-bit pixel values as independent quantities .",
    "the @xmath2 value for gzip is much larger ( worse ) than for rice and hcompress , and it varies depending on the magnitude and the distribution of the noise in the image .    we then compared the various compression methods on a large homogeneous sample of 16-bit integer astronomical images taken with the noao mosaic ccd camera , as well as on a smaller diverse sample of images taken with other instruments .",
    "one of the striking results shown in figure [ f : rice_v_noise ] is how closely the real astronomical images follow the same tight correlation between compression ratio and noise content as in the synthetic images .",
    "this demonstrates that the presence of the stars and faint galaxies in many of these ccd images has very little effect on the lossless compression ratio .",
    "this is because these objects cover only a small faction of the image area , and the overall compression ratio of the image is mainly determined by the compressibility of the large majority of pixels with values close to the local background .",
    "of course if the density of the objects in the image is large enough , it will have a negative impact on the compression ratio of the image , as was seen the case of a couple images of the central region of a rich globular cluster .",
    "another interesting result seen in figure [ f : rice_v_noise ] is that the different major types of images ( i.e. , the bias frames , the short exposures of calibrations stars , and deeper exposures of the sky and flat fields ) all follow the same continuous relation between compression ratio and noise content .",
    "they are segregated into different regions in the figure simply because the average pixel value , and hence the noise , is distinctly different .",
    "this can have significant consequences when estimating the storage needs of a data archive , because the bias frame and short calibration exposures compress much better than the flat field and deep exposures of the sky .",
    "the comparison of the compression ratios achieved by the different algorithms in figure [ f : all_v_noise ] shows that rice and hcompress produce 1.31.5 times better compression that gzip on 16-bit integer astronomical images .",
    "hcompress produces a few percent better compression than rice , but it also requires about 3 times more cpu time .",
    "rice is 23 times faster than the host gzip utility when compressing images , and has about the same uncompression speed as gunzip .",
    "overall rice provides the best combination of speed and compression efficiency of the algorithms studied here .",
    "since the compression ratios produced by rice and hcompress are already within 75% to 90% of an ideal algorithm with @xmath2 = 0 , any further improvements to the compression algorithms will produce relatively little gain in the size of the compressed images .",
    "32-bit integer astronomical images are relatively uncommon , but our compression tests on one such set of images taken with the newfirm camera shows that rice has an even larger performance advantage over gzip in both speed and compression ratios than was the case with the 16-bit images . one interesting consequence of the fact that the compression ratio of 32-bit images is twice that of 16-bit images ( assuming the images contain the same amount of noise ) , and hence the compressed files have the same size , is that there is no disk space penalty in storing the compressed images as 32-bit integers instead of 16-bit integers .",
    "this might be desired to allow for a greater range of pixel values during subsequent data processing operations on that image .",
    "one of the motivations of our work is to publicize and promote a better alternative to simply using the gzip utility to compress fits images , as is currently done by most astronomical data providers .",
    "the fits tiled image compression format is more efficient for accessing individual images within a multi - image fits file , and for reading a small section from a larger image , and the rice algorithm produces much better compression and is faster than gzip in most cases .",
    "this new compression format is also supported by major astronomical software packages such as the cfitsio library and the ds9 image display program . to further encourage the use of this compression method , 2 open - source image compression programs that were used in this study ( called _ fpack _ and _ funpack _ ) are publicly available for general use from the heasarc web site ( http://heasarc.gsfc.nasa.gov/fitsio/fpack ) .",
    "these programs run on all major computer platforms and are invoked on the command line , just like the gzip and gunzip utilities , to compress or uncompress any fits image file .",
    "various options can be specified on the command line to control the programs .",
    "more information about using these utility programs is available in the companion user s guide .",
    "\\1 ) for images with a gaussian noise distribution ( for instance , the readout floor of a ccd ) , we derive the equivalent number of noise bits .",
    "start by assuming n bits of uniform noise and average over the range of data numbers ( @xmath6 = dn ) for the expected values of @xmath6 and @xmath35 : @xmath36 / 2^n   \\;\\;\\;\\;\\;\\ ; ( \\mbox{$\\sigma$ of dn series , with $ k = 2^n - 1 $ } )   \\\\    & = & ( 2^n - 1 ) / 2   \\\\ \\mbox{and } \\;\\;\\;\\;\\ ; \\left\\langle x^2 \\right\\rangle & = & [ k ( k + 1 ) ( 2k + 1 ) / 6 ] /2^",
    "n   \\;\\;\\;\\;\\;\\ ; ( \\mbox{$\\sigma$ of series of squares } ) \\\\    & = & ( 2^n - 1 ) ( 2^{n+1}- 1 ) / 6 \\\\ \\mbox{solve for the variance , } \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\ ; \\\\ \\sigma^2 & = & \\langle x^2 \\rangle - { \\langle x \\rangle}^2 \\\\        & = &    ( 2^{2n } - 1 ) / 12 \\\\ \\mbox{in the limit of large $ n$ : } \\;\\;\\;\\;\\;\\;\\;\\;\\;\\ ; \\\\ \\sigma & = &   2^n / \\sqrt{12 } \\\\ \\mbox{solving for $ n$ then gives , } \\;\\;\\;\\;\\;\\;\\;\\;\\;\\ ; \\\\ n_{bits } & = & { \\log}_2 ( \\sigma \\sqrt{12 } ) \\\\ & = & \\log_2 ( \\sigma ) + 1.792 \\;\\;\\;\\;\\;\\ ;   \\mbox{(equation 4 in section 3)}\\end{aligned}\\ ] ] the factor of @xmath37 can be identified as the familiar analog - digital quantization noise @xcite",
    ". the same result also follows with continuous variables by integrating the second moment of a stepwise probability density symmetrically over @xmath38 quanta .",
    "this discrete derivation makes the non - linear limiting behavior at small values of n evident .",
    "\\2 ) our quantity @xmath11 is equivalent to the shannon entropy ( really just a definition of terms ) .",
    "entropy is a sum over all possible states of some discrete random variable ( pixels in our case ) , and depends only on the probabilities of each state , not on their values : @xmath39 for uniform noise , all states are equally probable , so @xmath40 : @xmath41 the sum equals unity since it is over @xmath38 states where @xmath42 , thus @xmath43 .",
    "\\3 ) for a continuous random variable with probability @xmath44 , the differential entropy is : @xmath45 there are caveats as with any integral , e.g. , one must consider whether a solution exists in each case .",
    "more fundamentally , the differential case ( as the name suggests ) provides a measure of entropy that can be understood only relative to a particular coordinate frame  unlike the discrete entropy that provides an absolute measure of randomness .",
    "\\4 ) how does our equation 4 correspond to the previous result ? to answer this , consider massey s bound on the discrete entropy .",
    "starting with the fact that the gaussian probability distribution has the maximum entropy for a given variance , the differential expression leads to a bound on the entropy of a discrete random variable ( a similar inequality holds for all permutations ) : @xmath47\\end{aligned}\\ ] ] as before , assume n bits of uniform noise such that @xmath48 .",
    "use the same expressions to sum the two series as above , but with limits from 1 to @xmath38 ( i.e. , k = @xmath38 since we are counting states here , not calculating statistical moments as in equation 4 ) : @xmath49 \\\\ & = & ( 1/2 ) * \\log [ 2 \\pi e ( p_i ( k ( k+1)(2k+1)/6 ) - { p_i}^2 ( k(k+1)/2)^2 + 1/12 ) ] \\;\\;\\ ; ( etc . ) \\\\",
    "& = & ( 1/2 ) * \\log [ 2 \\pi e ( 2^{2n})/12 ] \\\\   & = & n + \\log_2 \\sqrt{\\pi e / 6 } = n + 0.2546\\end{aligned}\\ ] ] however , we have already shown the identity @xmath43 , such that : @xmath50 the units of bits for the entropy are fixed when choosing the base-2 logarithm .",
    "it is beyond the scope of the current work to ponder the origin of this one - quarter bit offset .",
    "it is sufficient to note that the inequality is satisfied , and further to attribute the difference of @xmath51 to a coordinate transformation in the differential entropy .",
    "\\5 ) in particular , to motivate equation 4 we can remove this same coordinate offset from the gaussian differential entropy ( @xmath52 ) to obtain a measure of the shannon entropy ( @xmath53 ) : @xmath54 in summary , equation 4 was derived by calculating the variance of @xmath11 of uniform random noise .",
    "a coordinate transformation of the differential entropy of a gaussian leads to the same equation .",
    "( a gaussian maximizes the entropy for a given variance , suggesting this equivalence is an identity . )",
    "given @xmath11 , one can estimate the variance . on the other hand ,",
    "given the statistical variance of some random variable ( easily estimated from the pixel values of an astronomical image ) , an estimate follows of the equivalent number of effective noise bits , that is , of the image s entropy in bits . with an estimate of entropy in hand ,",
    "the compression factor is calculable .",
    "\\6 ) figures 1 and 2 demonstrate empirical agreement of synthetic gaussian data with the @xmath11 relation for both 16-bit and 32-bit integer pixels",
    ". figures 3 and 7 empirically confirm this relation for the gaussian read - noise dominated background of real world optical and infrared data sets , and further , for both on - sky and calibration data products .",
    "grunler , c. , weghorn , h. , & chibelushi , c. c. 2006 , in asp conf .",
    "351 , astronomical data analysis software and systems xv , eds . c. gabriel ,",
    "c. arviset , d. ponz , & e. solano ( san francisco : asp ) , 177            nieto - santisteban , m. a. , fixsen , d. j. , offenberg , j. d. , hanisch , r. j. & stockman , h. s. 1999 , in asp conf .",
    "172 , astronomical data analysis software and systems viii , eds .",
    "d. m. mehringer , r. l. plante , & d. a. roberts ( san francisco : asp ) , 487      pence , w. d. , white , r. l. , greenfield , p. , & tody , d. 2000 , in asp conf .",
    "216 , astronomical data analysis software and systems ix , eds .",
    "n. manset , c. veillet , & d. crabtree ( san francisco : asp ) , 551              seaman , r. , pence , w. d. , white , r. , dickinson , m. , valdes , f. , & zarate , n. 2007 , in asp conf .",
    "376 , astronomical data analysis software and systems xvi , eds .",
    "r. a. shaw , r. hill , & d. j. bell ( san francisco : asp ) , 483"
  ],
  "abstract_text": [
    "<S> we compare a variety of lossless image compression methods on a large sample of astronomical images and show how the compression ratios and speeds of the algorithms are affected by the amount of noise ( that is , entropy ) in the images . in the ideal case where the image pixel values have a random gaussian distribution , </S>",
    "<S> the equivalent number of uncompressible noise bits per pixel is given by @xmath0 and the lossless compression ratio is given by @xmath1 where bitpix is the bit length of the pixel values ( typically 16 or 32 ) , and @xmath2 is a measure of the efficiency of the compression algorithm . </S>",
    "<S> we show that real astronomical ccd images also closely follow these same relations , by using a robust algorithm for measuring the equivalent number of noise bits from the dispersion of the pixel values in background regions of the image .    </S>",
    "<S> we perform image compression tests on a large sample of 16-bit integer astronomical ccd images using the gzip compression program and using a newer fits tiled - image compression method that currently supports 4 compression algorithms : rice , hcompress , plio , and the same lempel - ziv algorithm that is used by gzip . </S>",
    "<S> overall , the rice compression algorithm strikes the best balance of compression and computational efficiency ; it is 23 times faster and produces about 1.4 times greater compression than gzip ( the uncompression speeds are about the same ) . </S>",
    "<S> the rice algorithm has a measured @xmath2 value of 1.2 bits per pixel , and thus produces 75%90% ( depending on the amount of noise in the image ) as much compression as an ideal algorithm with @xmath2 = 0 . </S>",
    "<S> hcompress produces slightly better compression but at the expense of 3 times more cpu time than rice . </S>",
    "<S> compression tests on a sample of 32-bit integer images show similar results , but the relative speed and compression ratio advantage of rice over gzip is even greater . </S>",
    "<S> we also briefly discuss a technique for compressing floating point images that converts the pixel values to scaled integers .    </S>",
    "<S> the image compression and uncompression utility programs used in this study ( called fpack and funpack ) are publicly available from the heasarc web site . </S>",
    "<S> a simple command - line interface may be used to compress or uncompress any fits image file . </S>"
  ]
}