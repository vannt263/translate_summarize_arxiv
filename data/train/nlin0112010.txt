{
  "article_text": [
    "an iterated function system ( ifs ) can be used to construct a fractal interpolating function for a given set of data @xcite .",
    "the simplest such system defines an ifs @xmath1 with coefficients @xmath2 , and @xmath3 determined from discrete data points ( @xmath4 ) , @xmath5 .",
    "such an ifs interpolates the data set in the sense that , under certain assumptions on the coefficients @xcite , the attractor of the ifs is a graph that passes through the data points . in this particular case",
    ", the ifs can be written as @xmath6 which shows that a linear ( in @xmath7 ) interpolating function between the points ( @xmath8 ) and ( @xmath9 ) is used .",
    "various generalizations of fractal interpolating functions have been given , including those for higher dimensional functions , the use of hidden variables , and extensions to certain non  linear distortions @xcite .",
    "in this note we describe a generalization whereby the transformation incorporates a @xmath0order polynomial interpolation between adjacent points .",
    "we also discuss certain classes of non  linear functions that can arise in such interpolating functions , and show how such functions can , with the use of a particular escape  time algorithm , be used to generate certain fractal images .",
    "the paper is organized as follows . in section [ lin ]",
    "we describe simple linear fractal interpolating functions , and discuss how particular non  linear functions can arise .",
    "section [ quadratic ] generalizes these considerations to @xmath0order interpolating functions .",
    "section [ escape ] describes a certain escape  time algorithm which may be used for these systems to generate fractal images like those associated with mandelbrot or julia sets .",
    "section [ end ] contains some brief conclusions .",
    "we first describe how a standard linear fractal interpolating function is constructed .",
    "suppose we have data points ( @xmath4 ) , @xmath10 , describing a function @xmath11 .",
    "consider the ifs @xmath12 imposing the conditions , for @xmath13 , @xmath14 leads to determination of the coefficients as @xmath15 the transformation can then be written as @xmath16 thus , @xmath17 is determined by a linear ( in @xmath7 ) interpolating function constructed between the points ( @xmath8 ) and ( @xmath9 ) .",
    "a generalization of this type of fractal interpolating function can be found by considering an ifs of the form @xmath18 where @xmath19 is , at this stage , an arbitrary function .",
    "imposing the conditions ( [ lincond ] ) leads to determination of the coefficients as @xmath20 the transformation can then be written as @xmath21 where @xmath22 and the identity @xmath23 for arbitrary @xmath24 has been used .",
    "the interpolating function of the last section used a linear ( in @xmath7 ) approximation between adjacent points . in this section",
    "we indicate how a quadratic approximation may be constructed ; the generalization to an arbitrary @xmath0order polynomial approximation will be straightforward .",
    "let us consider a transformation of the form @xmath25 and impose the conditions , for @xmath26 , @xmath27 the point @xmath28 is determined as @xmath29 with corresponding point @xmath30 .",
    "the coefficients of the ifs are determined as @xmath31 with this , the transformation can be written as @xmath32 which thus uses a quadratic ( in @xmath24 ) interpolating function between the points ( @xmath9 ) , ( @xmath8 ) , and ( @xmath33 ) .",
    "as in the previous section , including an arbitrary function @xmath19 in the ifs transformation via @xmath34 is straightforward . the conditions ( [ quadcond ] ) leads to determination of the point @xmath28 of eq .",
    "( [ tm ] ) as before , together with the accompanying point @xmath30 .",
    "the transformation itself can be written as @xmath35 where @xmath36 and the identity @xmath37 for arbitrary @xmath24 has been used .    from these considerations ,",
    "the pattern to constructing a @xmath0order fractal interpolating function is apparent .",
    "start with a transformation of the form @xmath38 and impose the conditions , for @xmath39 , @xmath40 the @xmath41 intermediate points @xmath42 , with @xmath43 , are determined as @xmath44 along with the corresponding @xmath45 points .",
    "the resulting transformation will be of the form given by lagrange s formula for a @xmath0order polynomial interpolating function constructed from @xmath46 points : @xmath47 the inclusion of an arbitrary function @xmath19 in the transformation @xmath48 of eq .",
    "( [ arb ] ) , as was done for the linear and quadratic transformations of eqs .",
    "( [ ling ] ) and ( [ quadg ] ) respectively , is straightforward .",
    "as might be expected , the use of these higher  order interpolating functions can increase the accuracy of the interpolation significantly , at least for smooth functions ",
    "some informal tests on known functions suggest an improvement of almost an order of magnitude in general in using a quadratic interpolating function over a linear one . of course , as for polynomial interpolation",
    ", there is a limit to the net gain in employing a higher  order interpolating function .",
    "assuming that the corresponding ifs transformation is contractive , so that the distance @xmath49 between any two points in the range of interest satisfies @xmath50 where @xmath51 is the contractivity factor , graphs of the functions represented by fractal interpolating functions can be made by applying the standard random iteration algorithm to the ifs :    * initialize ( @xmath52 ) to a point in the interval of interest * for a set number of iterations * * randomly select a transformation @xmath53 * * plot ( @xmath54 ) @xmath55 * * set ( @xmath52 ) @xmath56 ( @xmath54 ) * end for    alternatively , one can relate an ifs @xmath53 to a shift dynamical system @xmath57 , and on this system perform an escape time algorithm to generate an image @xcite . in this section",
    "we describe an algorithm for generating fractal images like those for julia or mandelbrot sets from ifs interpolating functions .",
    "suppose we have an ifs transformation @xmath53 , generated by some data points ( @xmath58 ) , @xmath5 , which includes a non  linear function @xmath19 , as was done for the linear and quadratic transformations of eqs .",
    "( [ ling ] ) and ( [ quadg ] ) respectively .",
    "we now continue the real variable @xmath59 of this transformation to complex values : @xmath60 ( @xmath61 ) , so that the transformation @xmath62 is defined on the complex plane .",
    "we can then , in analogy with the algorithm used for julia sets , define the following escape  time algorithm to generate a fractal pattern :    * for each pixel in a region of interest * * initialize @xmath7 * * initialize @xmath63 ( @xmath61 ) to the pixel coordinates * * for @xmath64 * * * calculate ( @xmath65 ) @xmath66 * * * break if @xmath67 exceeds a maximum * * * set ( @xmath68 ) @xmath56 ( @xmath65 ) * * end for * * plot the pixel * end for    where the pixel is plotted using a coloring algorithm based upon , amongst perhaps other factors , the number of iterations attained when the break condition was met @xcite .",
    "the preceding can be interpreted as follows .",
    "a general @xmath0order fractal interpolating ifs @xmath69 with the coefficients @xmath70 determined from the data ( @xmath4 ) , @xmath5 , can be viewed , with the continuation @xmath71 , as defining a complex map @xmath72 for @xmath64 .",
    "the escape  time algorithm described above is then just the standard one used for julia sets of complex maps .",
    "the arbitrariness of the function @xmath19 and the data set ( @xmath4 ) used to fix the ifs leads to a wide variety of possible fractal images generated in this way .",
    "an interesting class of functions @xmath19 to consider in this context are those for which , when continued to the complex plane @xmath60 ( @xmath61 ) , lead to a map having a fixed point @xmath73 : @xmath74 in such a case one could augment the usual condition of the escape  time algorithm to cease iteration : @xmath75 , where @xmath76 is some suitably large value , to also cease iteration when @xmath77 , where @xmath78 is a suitably small value .",
    "the coloring algorithm used to plot a pixel , which depends on the number of iterations attained when this break  out condition was met ( if at all ) , will then lead to structure in the region where the break  out condition on the magnitude of @xmath79 is not met .",
    "we give two examples of fractal images generated this way for the choice @xmath80 , with the data generated from the logistic map @xmath81 , with @xmath82 .",
    "the first one , appearing in fig .",
    "[ ifs1 ] , corresponds to the generalization ( [ ling ] ) of a linear ( in @xmath7 ) fractal interpolating function , while the second image of fig .",
    "[ ifs2 ] corresponds to the generalization ( [ quadg ] ) of a quadratic ( in @xmath7 ) interpolating function .",
    "a coloring algorithm that simply mapped a color to the number of iterations attained when the break  out condition became satisfied was used in both cases .",
    "linear interpolating function ]    quadratic interpolating function ]    these figures illustrate , in the interior of the fractal object , the richer structure arising from the quadratic over the linear interpolation function . in this region",
    "the break  out condition @xmath83 is satisfied , which numerically for @xmath84 is attained after a relatively small number ( 1030 ) of iterations .",
    "we have considered two non  linear generalizations of fractal interpolating functions constructed from iterated function systems .",
    "one  using a @xmath0order interpolating polynomial  can potentially improve the accuracy of fractal interpolating functions .",
    "the other generalization  the use of certain arbitrary functions in the ifs  can , together with an appropriate escape  time algorithm , generate fractal images .",
    "this last point is of interest as , first of all , there is a rich variety of such images possible due to the arbitrariness of the functions used , and secondly , it shows how fractal images as normally associated with julia or mandelbrot sets can also be associated with discrete data sets .",
    "this work was supported by the natural sciences and engineering research council of canada .",
    "99 m.  f.  barnsley , _ fractals everywhere _ ( academic press , san diego , ca , 1993 ) h.  o.  peitgen , h.  jrgens , and d.  saupe , _ chaos and fractals  new frontiers of science _ ( springer , new york , 1992 )",
    ". m.  f.  barnsley , j.  elton , d.  hardin , and p.  massopust , _ hidden variable fractal interpolation functions _",
    ", siam j. math .",
    "20 * ( 1989 ) , 1218 - 1242 .",
    "r.  massopust , _ fractal functions , fractal surfaces and wavelets _ ( academic press , san diego , ca , 1994 ) . l.  m.  kocic and a.  c.  simoncelli , _ fractal interpolation in creating prefractal images _ , visual mathematics * 2 * , no .  2 ( 2000 ) .",
    "h.  o.  peitgen and d.  saupe , _ the science of fractal images _ ( springer , new york , 1988 ) .",
    "e.  grller , _ modeling and rendering of nonlinear iterated function systems _ , institute of computer graphics , technical university of vienna report tr-186 - 2 - 94 - 12 ( 1994 ) .",
    "j.  barrallo and d.  m.  jones , _ coloring algorithms for dynamical systems in the complex plane _ , visual mathematics * 1 * , no .  4 ( 1999 ) ."
  ],
  "abstract_text": [
    "<S> we consider two non  linear generalizations of fractal interpolating functions generated from iterated function systems . </S>",
    "<S> the first corresponds to fitting data using a @xmath0order polynomial , while the second relates to the freedom of adding certain arbitrary functions . </S>",
    "<S> an escape  time algorithm that can be used for such systems to generate fractal images like those associated with julia or mandelbrot sets is also described . </S>"
  ]
}