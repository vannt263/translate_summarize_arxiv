{
  "article_text": [
    "dags and other graphical models encode conditional independence ( ci ) relationships in probability distributions .",
    "therefore , ci tests are a natural building block of algorithms that infer such models from data . for example",
    ", the pc algorithm for learning dags @xcite and the fci @xcite and rfci @xcite algorithms for learning maximal ancestral graphs are all based on ci tests .",
    "ci testing is still an ongoing research topic , to which the uai community is contributing ( e.g. * ? ? ?",
    "* ; * ? ? ?",
    "but at least for continuous variables , ci testing will always remain more difficult than testing marginal independence for quite fundamental reasons @xcite . intuitively , the difficulty is that two variables @xmath0 and @xmath1 could be dependent `` almost nowhere '' , e.g. , for only a few values of the conditioning variable @xmath2 .",
    "this suggests a two - staged approach to structure learning : first try to learn as much as possible from simpler independence tests before applying ci tests . here , we present a theoretical basis for extracting as much information as possible from the simplest kind of stochastic independence ",
    "pairwise marginal independence .",
    "more precisely , we will consider the following problem .",
    "we are given the set of pairwise marginal independencies that hold amongst some variables of interest .",
    "such sets can be represented as graphs whose missing edges correspond to independencies ( figure  [ fig : marginalbutnotmarkov]a ) .",
    "we call such graphs _ marginal independence graphs_. we wish to find dags on the same variables that entail exactly the given set of pairwise marginal independencies ( figure  [ fig : marginalbutnotmarkov]b ) .",
    "we call such dags _ faithful_. sometimes no such dags exist ( e.g. , figure  [ fig : marginalbutnotmarkov]c ) .",
    "else , we are interested in finding the set of _ all _ faithful dags , hoping that this set will be substantially smaller than the set of all possible dags on the same variables .",
    "those candidate dags could then be probed further by using joint marginal or conditional independence tests .",
    "= [ circle , fill , inner sep=1pt ] ; = [ bi ] ; ( a1 ) at ( -0.5,0 ) ; ( a2 ) at ( 0,0 ) ; ( a3 ) at ( 0.5,0 ) ; ( b1 ) at ( -0.25,0.5 ) ; ( b2 ) at ( 0.25,0.5 ) ; ( c1 ) at ( 0,1 ) ; ( b1 ) edge ( c1 ) edge ( b2 ) edge ( a1 ) edge ( a2 ) ( a2 ) edge ( b2 ) edge ( a3 ) edge ( a1 ) ( b2 ) edge ( c1 ) edge ( a3 ) ; at ( 0,-.5 ) ( a ) ;    = [ circle , fill , inner sep=1pt ] ; = [ dir ] ; ( a1 ) at ( -0.5,0 ) ; ( a2 ) at ( 0,0 ) ; ( a3 ) at ( 0.5,0 ) ; ( b1 ) at ( -0.25,0.5 ) ; ( b2 ) at ( 0.25,0.5 ) ; ( c1 ) at ( 0,1 ) ; ( a1 ) edge ( b1 ) edge ( a2 ) ; ( a3 ) edge ( a2 ) edge ( b2 ) ; ( c1 ) edge ( b2 ) edge ( b1 ) ; at ( 0,-.5 ) ( b ) ;    = [ circle , fill , inner sep=1pt ] ; = [ bi ] ; ( a1 ) at ( -0.5,0 ) ; ( a2 ) at ( 0,0 ) ; ( b1 ) at ( -0.25,0.5 ) ; ( b2 ) at ( 0.25,0.5 ) ; ( c1 ) at ( 0,1 ) ; ( b2 ) edge ( c1 ) ( a2 ) edge ( b1 ) edge ( b2 ) ( a1 ) edge ( a2 ) edge ( b1 ) ( b1 ) edge ( b2 ) edge ( c1 ) ; at ( 0,-.5 ) ( c ) ;    other authors have represented marginal ( in)dependencies using bidirected graphs @xcite , instead of undirected graphs like we do here .",
    "we hope that the reader is compensated for this small departure from community standards by the lower amount of clutter in our figures , and the greater ease to link our work to standard graph theoretical results .",
    "we also emphasize that we model only pairwise , and not higher - order joint dependencies .",
    "however , for gaussian data , pairwise independence entails joint independence . in that case ,",
    "our marginal independence graphs are equivalent to _ covariance graphs _",
    "@xcite , whose missing edges represent zero covariances .",
    "our results generalize the work of @xcite who showed ( but did not prove ) how to find _ some _ faithful dags for a given covariance graph .",
    "we review these and other connections to related work in section  [ sec : concepts ] where we also link our problem to the theory of partially ordered sets ( posets ) .",
    "this connection allows us to identify certain maximal and minimal faithful dags .",
    "based on these `` boundary dags '' we then derive a characterization of all faithful dags ( section  [ sec : consistency ] ) , and construct related enumeration algorithms ( section  [ sec : algo ] ) .",
    "we use these algorithms to explore the combinatorial structure of faithful dag models ( section  [ sec : combinatorics ] ) which leads , among other things , to a quantification of how much pairwise marginal independencies reduce structural causal uncertainty . finally , we ask what happens when a set of independencies can _ not _ be explained by any dag . how many additional variables will we need ?",
    "we prove that this problem is np - hard ( section  [ sec : latents ] ) .",
    "preliminary versions of many of the results presented in this paper were obtained in the master s thesis of the second author @xcite .",
    "in this paper we use the abbreviation _",
    "iff _ for the connective `` if and only if '' .",
    "a graph @xmath3 consists of a set of nodes ( variables ) @xmath4 and set of edges @xmath5 .",
    "we consider undirected graphs ( which we simply refer to as graphs ) , directed graphs , and mixed graphs that can have both undirected edges ( denotes as @xmath6 ) and directed edges ( denoted as @xmath7 ) .",
    "two nodes are _ adjacent _ if they are linked by any edge .",
    "a _ clique _ in a graph is a node set @xmath8 such that all @xmath9 are adjacent .",
    "conversely , an _",
    "independent set _ is a node set @xmath10 in which no two nodes @xmath11 are adjacent .",
    "maximal clique _ is a clique for which no proper superset of nodes is also a clique . for any @xmath12 ,",
    "the _ neighborhood _ @xmath13 is the set of nodes adjacent to @xmath14 and the _ boundary _ @xmath15 is the neighborhood of @xmath14 including @xmath14 , i.e. @xmath16 . a node @xmath14 is called _ simplicial _ if @xmath15 is a clique .",
    "equivalently , @xmath14 is simplicial iff @xmath17 for all @xmath18 @xcite .",
    "a clique that contains simplicial nodes is called a _",
    "simplex_. every simplex is a maximal clique , and every simplicial node belongs to exactly one simplex .",
    "the _ degree _ @xmath19 of a node @xmath14 is @xmath20 .",
    "if for two graphs @xmath21 and @xmath22 we have @xmath23 , then @xmath24 is an _ edge subgraph _ of @xmath25 and @xmath25 is an _ edge supergraph _ of @xmath24 .",
    "the _ skeleton _ of a directed graph @xmath24 is obtained by replacing every edge @xmath26 by an undirected edge @xmath27 .",
    "a _ path _ of length @xmath28 is a sequence of @xmath29 distinct nodes in which successive nodes are pairwise adjacent . a _ directed path _ @xmath30 consists of directed edges that all point towards @xmath1 . in a directed graph",
    ", a node @xmath31 is an _ ancestor _ of another node @xmath14 if @xmath32 or if there is a directed path @xmath33 . for each edge @xmath26",
    ", we say that @xmath31 is a _ parent _ of @xmath14 and @xmath14 is a _ child _ of @xmath31 .",
    "if two nodes @xmath34 in a directed graph have a common ancestor @xmath35 ( which can be @xmath31 or @xmath14 ) , then the path @xmath36 is called a _ trek _ connecting @xmath31 and @xmath14 .",
    "a dag is called _ transitive _ if , for all @xmath37 , it contains an edge @xmath26 whenever there is a directed path from @xmath31 to @xmath14 .",
    "given a dag @xmath24 , the _ transitive closure _ is the unique transitive graph that implies the same ancestor relationships as @xmath24 , whereas the _ transitive reduction _ is the unique edge - minimal graph that implies the same ancestor relationships .    in this paper",
    "we encounter several well - known graph classes , e.g. , chordal graphs and trivially perfect graphs",
    ". we will give brief definitions when appropriate , but we direct the reader to the excellent survey by @xcite for further details .",
    "in this section we define the class of graphs which can be explained using a directed acyclic graph ( dag ) on the same variables . we will refer to such graphs as _ simple marginal independence graphs _ ( smigs ) .    [ definition : dependency : graph ] a graph @xmath38 is called the _ simple marginal independence graph _ ( smig ) , or _ marginal independence graph _ of a dag @xmath39 if for all @xmath40 , @xmath41 iff @xmath14 and @xmath35 have a common ancestor in  @xmath24 . if @xmath42 is the marginal independence graph of @xmath24 then we also say that @xmath24 is _ faithful _ to @xmath42 .",
    "@xmath43 is the set of all graphs @xmath42 for which there exists a faithful dag @xmath44 .",
    "note that each dag has exactly one marginal independence graph .",
    "again , we point out that marginal independence graphs are often called ( and drawn as ) _ bidirected graphs _ in the literature , though the term `` marginal independence graph '' has also been used by various authors ( e.g. * ? ? ?",
    "in this subsection we recall briefly the general setting for modeling ( in)dependencies proposed by @xcite and show the relationship between that model and smigs . in the definitions below @xmath45 denotes a set of variables and @xmath46 , @xmath47 and @xmath48 are three disjoint subsets of @xmath45 .",
    "a _ dependency model _ @xmath49 over @xmath45 is any subset of triplets @xmath50 which represent independencies , that is , @xmath51 asserts that @xmath46 is independent of @xmath47 given @xmath48 .",
    "a _ probabilistic dependency model _ @xmath52 is defined in terms of a probability distribution @xmath53 over  @xmath45 . by definition @xmath54 iff for any instantiation @xmath55 , @xmath56 and @xmath57 of the variables in these subsets @xmath58 .    a _ directed acyclic graph dependency model _",
    "@xmath59 is defined in terms of a dag @xmath24 . by definition @xmath60 iff @xmath46 and @xmath47",
    "are @xmath61-separated by @xmath48 in  @xmath24 ( for a definition of @xmath61-separation by a set @xmath48 see @xcite ) .",
    "we define a _ marginal _ dependency model , resp . marginal probabilistic and marginal dag dependency model , analogously as @xcite with the restriction that the second component of any triple @xmath50 is the empty set .",
    "thus , such marginal dependency models are sets of pairs @xmath62 .",
    "it is easy to see that the following properties are satisfied .",
    "let @xmath49 be a marginal probabilistic dependency model or a marginal dag dependency model .",
    "then @xmath49 is closed under : + symmetry : @xmath63 and + decomposition : @xmath64 .",
    "+ moreover , if @xmath49 is a marginal dag dependency model then it is also closed under + union : @xmath65 .",
    "the marginal probabilistic dependency model is not closed under union in general .",
    "for instance , consider two independent , uniformly distributed binary variables @xmath1 and @xmath35 and let @xmath66 , where @xmath67 denotes xor of two bits .",
    "for the model @xmath52 defined in terms of probability over @xmath68 we have that @xmath69 and @xmath70 belong to @xmath52 but @xmath71 does not .",
    "in this paper we will _ not _ assume that the marginal independencies in the data are closed under union .",
    "instead , we only consider pairwise independencies , which we formalize as follows .",
    "let @xmath49 be a marginal probabilistic dependency model over @xmath4 .",
    "then the simple marginal independence graph @xmath72 of @xmath49 is the graph in which @xmath73 iff @xmath74 .",
    "thus , in general , marginal independence graphs do not contain any information on higher - order _ joint _ independencies present in the data .",
    "however , under certain common parametric assumptions , dependency models would be closed under union as well .",
    "this holds , for instance , if the data are normally distributed . in that case ,",
    "marginal independence is equivalent to zero covariance , pairwise independence implies joint independence , and marginal independence graphs become covariance graphs .",
    "the following is not difficult to see .",
    "a marginal dependency model @xmath49 which is closed under symmetry , decomposition , and union coincides with the transitive closure of @xmath75 over symmetry and union .",
    "this proposition entails that if the marginal dependencies in the data are closed under these properties , then the entire marginal dependency model is represented by the marginal independence graph .      to reach our aim of a complete and constructive characterization of the dags faithful to a given smig",
    ", it is useful to observe that marginal independence graphs are invariant with respect to the insertion or deletion of transitive edges from the dag .",
    "we formalize this as follows .",
    "a ( labelled ) _ poset _ @xmath76 is a dag that is identical to its transitive closure .",
    "the marginal independence graphs of a dag @xmath24 and its transitive closure @xmath77 are identical .",
    "two nodes are not adjacent in the marginal independence graph iff they have no common ancestor in the dag .",
    "transitive edges do not influence ancestral relationships .",
    "we thus restrict our attention to finding _ posets _ that are faithful to a given smig .",
    "note that faithful dags can then be obtained by deleting transitive edges from faithful posets ; since no dag obtained in this way can be an edge subgraph of two different posets , this construction is unique and well - defined .",
    "in particular , by deleting _ all _ transitive edges from a poset , we obtain a sparse graphical representation of the poset as defined below .",
    "given a poset @xmath78 , its _ transitive reduction _ is the unique dag @xmath79 for which @xmath80 and @xmath81 is the smallest set where @xmath82 .",
    "transitive reductions are also known as _",
    "hasse diagrams _ , though hasse diagrams are usually unlabeled .",
    "different posets can have the same marginal independence graphs , e.g. the posets with hasse diagrams @xmath83 and @xmath84 .",
    "similarly , markov equivalence is a sufficient but not necessary condition to inducing the same marginal independence graphs ( adding an edge @xmath85 to @xmath86 changes the poset and the markov equivalence class , but not the marginal independence graph ) .",
    "we first recall existing results that show which graphs admit a faithful dag at all , and how to find such dags if possible .",
    "note that many of these results have been stated without proof @xcite , but our connection to posets will make some of these proofs straightforward .",
    "the following notion related to posets is required .    for a poset @xmath78 , the _ bound graph _",
    "@xmath87 of @xmath76 is the graph where @xmath88 iff @xmath0 and @xmath1 share a _ lower bound _ , i.e. , have a common ancestor in @xmath76 .",
    "[ definition : boundgraph ]    [ thm : graphcharact ] @xmath43 is the set of all graphs for which every edge is contained in a simplex .",
    "this is theorem  2 in @xcite ( who referred to simplexes as `` exterior cliques '' ) .",
    "alternatively , we can observe that the marginal independence graph @xmath42 of a poset @xmath76 ( definition  [ definition : dependency : graph ] ) is equal to its bound graph ( definition  [ definition : boundgraph ] ) .",
    "the characterization of bound graphs as `` edge simplicial '' graphs has been proven by @xcite by noting that simplicial nodes in @xmath42 correspond to possible minimal elements in @xmath76 .",
    "we note that this result predates the equivalent statement in @xcite .",
    "though all bound graphs have a faithful poset , not all bound graphs have one with the same skeleton ; see figure  [ fig : marginalbutnotmarkov]a , b for a counterexample .",
    "however , the graphs for which a poset with the same skeleton can be found are nicely characterizable in terms of forbidden subgraphs .    given a graph @xmath42 , a dag @xmath24 that is faithful to @xmath42 and has the same skeleton exists iff @xmath42 is trivially perfect ( i.e.",
    ", @xmath42 has no @xmath89= ( 1,0 ) edge [ - ] ( 0,0 ) edge [ - ] ( 2,0 ) ( 3,0 ) edge [ - ] ( 2,0 ) ; nor a @xmath90= ( 0,0 ) edge [ - ] ( 1,0 ) edge [ - ] ( 0,1 ) ( 1,1 ) edge [ - ] ( 0,1 ) edge [ - ] ( 1,0 ) ;   as induced subgraph ) .",
    "[ thm : triviallyperfect ]    it is known that the trivially perfect graphs are the intersection of the bound graphs and the chordal graphs ( figure  [ fig : inclusions ] ; * ? ? ? * ) .",
    "( cog ) at ( 1,1.5 ) chordal ; ( mdg ) at ( -1,1.5 ) @xmath43 ; ( tpg ) at ( 0,0 )   +   + trivially + perfect ;    = [ bi ] = [ circle , fill = black , inner sep=1pt ] ;    \\(a ) at ( -0.5,-0.5 ) ; ( b ) at ( 0.5,-0.5 ) ; ( c ) at ( -0.5,0.5 ) ; ( d ) at ( 0.5,0.5 ) ; ( a ) edge ( b ) ; ( a ) edge ( c ) ; ( b ) edge ( d ) ; ( c ) edge ( d ) ; ( a ) edge ( d ) ; ( b ) edge ( c ) ;    ( -1,0 ) ellipse ( 2 cm and 1.2 cm ) ; ( 1,0 ) ellipse ( 2 cm and 1.2 cm ) ;    \\(a ) at ( -0.5,-0.5 ) ; ( b ) at ( 0.5,-0.5 ) ; ( c ) at ( -0.5,0.5 ) ; ( d ) at ( 0.5,0.5 ) ; ( a ) edge ( b ) ; ( a ) edge ( c ) ; ( b ) edge ( d ) ;    \\(a ) at ( -0.5,-0.5 ) ; ( b ) at ( 0.5,-0.5 ) ; ( c ) at ( -0.5,0.5 ) ; ( d ) at ( 0.5,0.5 ) ; ( e ) at ( 1.25,0 ) ; ( f ) at ( -1.25,0 ) ; ( g ) at ( 0,-1.25 ) ; ( h ) at ( 0,1.25 ) ; ( b ) edge ( a ) edge ( d ) ( c ) edge ( a ) edge ( d ) ; ( e ) edge ( b ) edge ( d ) ; ( f ) edge ( a ) edge ( c ) ; ( g ) edge ( a ) edge ( b ) ; ( h ) edge ( c ) edge ( d ) ;    this nice result begs the question whether a similar characterization is also possible for @xmath43 . as the following observation shows , that is not the case .",
    "every graph @xmath42 is an induced subgraph of some graph @xmath91 .",
    "[ proposition : induced : subgraph : mdg ]    take any graph @xmath92 and construct a new graph @xmath93 as follows . for every edge @xmath94 in @xmath95 , add a new node @xmath96 to @xmath4 and add edges @xmath97 and @xmath98 . obviously @xmath99 is an induced subgraph of @xmath93 . to see that @xmath93 is in @xmath43 ,",
    "consider the dag @xmath44 consisting of the nodes in @xmath93 and the edges @xmath100 and for each newly added node in @xmath93 .",
    "then @xmath95 is the marginal independence graph of @xmath44 .",
    "the graph class characterization implies efficient recognition algorithms for smigs .",
    "it can be tested in polynomial time whether a graph @xmath42 is a smig .",
    "[ thm : recognize : sdgs ]    verifying the graphical condition of theorem  [ thm : graphcharact ] amounts to testing whether all edges reside within a simplex .",
    "however , knowing that smigs are bound graphs , we can apply an efficient algorithm for bound graph recognition that uses radix sort and simplex elimination and achieves a runtime of @xmath101 @xcite , where @xmath102 is the number of simplexes in the graph .",
    "this is typically better than @xmath103 because large @xmath104 implies small @xmath105 and vice versa .",
    "alternatively , we can apply known fast algorithms to find all simplicial nodes @xcite .",
    "we now ask how to find faithful dags for simple marginal independence graphs .",
    "we observed that marginal independence graphs can not distinguish between transitively equivalent dags , so a perhaps more natural question is : which _ posets _ are faithful to a given graph ? as pointed out before , we can obtain all dags from faithful posets in a unique manner by removing transitive edges . a further advantage of the poset representation will turn out to be that the `` smallest '' and `` largest '' faithful posets can be characterized uniquely ( up to isomorphism ) ; as we shall also see , this is not as easy for dags , except for marginal independence graphs in a certain subclass .",
    "our first aim is to characterize the `` upper bound '' of the faithful set .",
    "that is , we wish to identify those posets for which no edge supergraph is also faithful .",
    "we will show that a construction described by @xcite solves exactly this problem .    for a graph @xmath106",
    ", the _ sink graph _",
    "@xmath107 is constructed as follows : for each edge @xmath27 in @xmath42 , add to @xmath108 : ( 1 ) an edge @xmath26 if @xmath109 ; ( 2 ) an edge @xmath110 if @xmath111 ; ( 3 ) an edge @xmath27 if @xmath112 .    for instance",
    ", the sink graph of the graph in figure  [ fig : marginalbutnotmarkov]a is the graph in figure  [ fig : marginalbutnotmarkov]b .",
    "a _ sink orientation _ of a graph @xmath42 is any dag obtained by replacing every undirected edge of @xmath113 by a directed edge .",
    "we first need to state the following .",
    "every sink orientation of @xmath42 is a poset .",
    "[ thm : sinkposet ]    fix a sink orientation @xmath24 and consider any chain @xmath114 . by construction , this implies that @xmath115 .",
    "hence , if @xmath0 and @xmath2 are adjacent in the sink graph , then the only possible orientation is @xmath116 .",
    "there can be two reasons why @xmath0 and @xmath2 are not adjacent in the sink graph : ( 1 ) they are not adjacent in @xmath42 .",
    "but then @xmath24 would not be faithful , since @xmath24 implies the edge @xmath117 .",
    "( 2 ) the edge was not added to the sink graph . but this contradicts @xmath115 .",
    "this lemma allows us to strengthen theorem  2 by @xcite in the sense that we can replace `` dag '' by `` maximal poset '' ( emphasized ) :    @xmath76 is a _ maximal poset _",
    "faithful to @xmath42 iff @xmath76 is a sink orientation of @xmath42 .",
    "[ thm : sinkor ]    the following is also not hard to see .    for a smig @xmath42 ,",
    "every dag @xmath24 that is faithful to @xmath42 is a subgraph of some sink orientation of @xmath42 .",
    "[ thm : sinkor2 ]    obviously the skeleton of @xmath24 can not contain edges that are not in @xmath42 .",
    "so , suppose @xmath7 is an edge in @xmath24 but conflicts with the sink orientation ; that is , the sink graph contains the edge @xmath118 .",
    "that is the case only if @xmath119 is a proper subset of @xmath120 .",
    "however , in the marginal independence graph of @xmath24 , any node that is adjacent to @xmath0 ( has a common ancestor ) must also be adjacent to @xmath1 .",
    "thus , the marginal independence graph of @xmath24 can not be @xmath42 .",
    "every maximal faithful poset for @xmath42 can be generated by first fixing a topological ordering of @xmath113 and then generating the dag that corresponds to that ordering , an idea that has also been mentioned by  @xcite .",
    "this construction makes it obvious that all maximal faithful posets are isomorphic .    for curiosity of the reader",
    ", we note that @xmath113 can also be viewed as a _ complete partially directed acyclic graph _ ( cpdag ) , which represents the markov equivalence class of edge - maximal dags that are faithful with @xmath42 .",
    "cpdags are used in the context of inferring dags from data @xcite , which is only possible up to markov equivalence .",
    "a minimal faithful poset to @xmath42 is one from which no further relations can be deleted without entailing more independencies than are given by @xmath42 .",
    "let @xmath121 be a graph and let @xmath10 be an independent set . then @xmath122 is the poset consisting of the nodes in @xmath123 , their neighbors in @xmath42 , and directed edges @xmath124 for each @xmath125 where @xmath126 .",
    "for example , figure  [ fig : minposet]b shows the unique @xmath122 for the graph in figure  [ fig : minposet]a .    .22     = [ circle , fill , inner sep=1pt ] ; = [ bi ] ( a ) at ( 0.5,0.25 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 2,0 ) ; ( d ) at ( 1.5,0.25 ) ; ( e ) at ( 1.5,-0.25 ) ; ( b ) edge ( a ) edge ( c ) edge [ bend left=35 ] ( d ) edge [ bend right=35 ] ( e ) ( c ) edge [ bend left=35 ] ( e ) edge [ bend right=35 ] ( d ) ;    .22     = [ circle , fill , inner sep=1pt ] ; = [ bi ] ( a ) at ( 0.5,0.25 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 2,0 ) ; ( d ) at ( 1.5,0.25 ) ; ( e ) at ( 1.5,-0.25 ) ; ( b ) edge [ rdir ] ( a ) edge [ rdir , bend left=35 ] ( d ) edge [ rdir , bend right=35 ] ( e ) ( c ) edge [ rdir , bend left=35 ] ( e ) edge [ rdir , bend right=35 ] ( d ) ;    .22     = [ circle , fill , inner sep=1pt ] ; = [ bi ] ( a ) at ( 0.5,0.25 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 2,0 ) ; ( d ) at ( 1.5,0.25 ) ; ( e ) at ( 1.5,-0.25 ) ; ( b ) edge [ rdir ] ( a ) ( c ) edge [ rdir , bend left=35 ] ( e ) edge [ rdir , bend right=35 ] ( d ) ( c ) edge [ dir ] ( b ) ;    .22    = [ circle , fill , inner sep=1pt ] ; = [ draw,- ] = [ circle , fill , inner sep=1pt ] ; = [ bi ] ( a ) at ( 0.5,0.25 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 2,0 ) ; ( d ) at ( 1.5,0.25 ) ; ( e ) at ( 1.5,-0.25 ) ; ( b ) edge [ rdir ] ( a ) edge [ rdir , bend left=35 ] ( d ) edge [ rdir , bend right=35 ] ( e ) ( c ) edge [ rdir , bend left=35 ] ( e ) edge [ rdir , bend right=35 ] ( d ) ( c ) edge [ dir ] ( b ) ;    let @xmath127 . then a poset @xmath76 is a minimal poset faithful to @xmath128 iff @xmath129 for a set @xmath130 consisting of one simplicial vertex for each simplex .",
    "[ thm : minimalposet ]    we first show that if @xmath123 is a set consisting of one simplicial node for each simplex , then @xmath122 is a minimal faithful poset .",
    "every edge @xmath131 resides in a simplex , so it is either adjacent to @xmath123 or both of its endpoints are adjacent to some @xmath132 . in both cases , @xmath122 implies @xmath133 .",
    "also @xmath122 does not imply more edges than are in @xmath42 . now , suppose we delete an edge @xmath134 from @xmath122 .",
    "this edge must exist in @xmath42 , else @xmath135 was not simplicial .",
    "but now @xmath122 no longer implies this edge .",
    "thus , @xmath122 is minimal .",
    "second , assume that @xmath76 is a minimal faithful poset .",
    "assume @xmath76 would contain a sequence of two directed edges @xmath114",
    ". then @xmath76 would also contain the edge @xmath116 .",
    "but then @xmath136 could be deleted from @xmath76 without changing the dependency graph , and @xmath76 was not minimal .",
    "so , @xmath76 does not contain any directed path of length more than 1 .",
    "next , observe that for each simplex in @xmath128 , the nodes must all have a common ancestor in @xmath76 . without paths of length @xmath137 , this is only possible if one node @xmath135 in the simplex is a parent of all other nodes , and there are no edges among the child nodes of @xmath135 .",
    "finally , each such @xmath135 must be a simplicial node in @xmath42 ; otherwise , it would reside in two or more simplexes , and would have to be the unique parent in those simplexes .",
    "but then the children of @xmath135 would form a single simplex in @xmath42 .",
    "like the maximal posets , all minimal posets are thus isomorphic .",
    "we point out that the minimal posets contain no transitive edges and therefore , they are also edge - minimal faithful dags",
    ". however , this does not imply that minimal posets have the smallest possible number of edges amongst all faithful dags ( figure  [ fig : minposet ] ) .",
    "there appears to be no straightforward characterization of the dags with the smallest number of edges for marginal independence graphs in general .",
    "however , a beautiful one exists for the subclass of trivially perfect graphs .",
    "a _ tree poset _ is a poset whose transitive reduction is a tree ( with edges pointing towards the root ) .",
    "a connected smig @xmath42 has a faithful tree poset iff it is trivially perfect .",
    "the bound graph of a tree poset is identical to its _ comparability graph _ @xcite , which is the skeleton of the poset .",
    "comparability graphs of tree posets coincide with trivially perfect graphs @xcite .",
    "since no connected graph on @xmath29 nodes can have fewer edges than the transitive reduction of a tree poset on the same nodes ( i.e. , @xmath28 ) , tree posets coincide with faithful dags having the smallest possible number of edges .",
    "how do we construct a tree for a given trivially perfect graph ?",
    "every such graph must have a _ central point _",
    ", which is a node that is adjacent to all other nodes .",
    "we set this node as the sink of the tree , and continue recursively with the subgraphs obtained after removing the central point .",
    "each subgraph is also trivially perfect and can thus be oriented into a tree .",
    "after we are done , we link the sinks of the trees of the subgraphs to the original central point to obtain the full tree @xcite .",
    "if a given marginal independence graph @xmath42 admits faithful dag models , then it is of interest to enumerate these .",
    "a trivial enumeration procedure is the following : start with the sink graph of @xmath42 , choose an arbitrary edge @xmath133 , and form all 2 or 3 subgraphs obtained by keeping @xmath133 ( if it is directed ) , orienting @xmath133 ( if it is undirected ) , or deleting it .",
    "apply the procedure recursively to these subgraphs . during the recursion , do not touch edges that have been previously chosen .",
    "if the current graph is a dag that is faithful to @xmath42 , output it ; otherwise , stop the recursion .",
    "however , we can do better by exploiting the results of the previous section , which will allow us to derive enumeration algorithms that generate representations of multiple dags at each step .      having characterized the maximal and minimal faithful posets , we are now ready to construct an enumeration procedure for all dags that are faithful to a given graph .",
    "we first state the following combination of theorem  [ thm : sinkor ] and theorem  [ thm : minimalposet ] .",
    "a dag @xmath21 is faithful to a smig @xmath106 iff ( 1 ) @xmath24 is an edge subgraph of some sink orientation of @xmath42 and ( 2 ) the transitive closure of @xmath24 is an edge supergraph of @xmath122 for some node set @xmath130 consisting of one simplicial node for each simplex .",
    "[ prop : dagcharact ]    from this observation , we can derive our first construction procedure for faithful dags .",
    "a dag @xmath24 is faithful to a smig @xmath106 iff it can be generated by the following steps .",
    "( 1 ) pick any set @xmath10 consisting of one simplicial node for each simplex .",
    "( 2 ) generate any dag on the nodes @xmath138 that is an edge subgraph of some sink orientation of @xmath42 .",
    "( 3 ) add any subset of edges from @xmath122 such that the transitive closure of the resulting graph contains all edges of @xmath122 .",
    "[ prop : dagalgorithm ]    while step ( 3 ) may seem ambiguous , figure  [ fig : dagalgorithm ] illustrates that after step ( 2 ) , the edges from @xmath122 decompose nicely into _ mandatory _ and _ optional _ ones .",
    "this means that we can in fact stop the construction procedure after step ( 2 ) and output a `` graph pattern '' , in which some edges are marked as optional .",
    "this is helpful in light of the potentially huge space of faithful models , because every graph pattern can represent an exponential number of dags .",
    "= [ circle , fill , inner sep=1pt ]    = [ bi ]    .16    \\(a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge ( b ) edge ( d ) edge ( e ) ( c ) edge ( b ) edge ( d ) edge ( e ) ( b ) edge ( d ) edge ( e ) ;    .64    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge ( b ) edge ( d ) edge ( e ) ( c ) edge ( b ) edge ( d ) edge ( e ) ;    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge [ dashed ] ( b ) edge ( d ) edge ( e ) ( c ) edge [ dashed ] ( b ) edge ( d ) edge ( e ) ( d ) edge [ thick ] ( b ) ;    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge ( b ) edge ( d ) edge [ dashed ] ( e ) ( c ) edge ( b ) edge ( d ) edge [ dashed ] ( e ) ( b ) edge [ thick ] ( e ) ;    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge [ dashed ] ( b ) edge ( d ) edge [ dashed ] ( e ) ( c ) edge [ dashed ] ( b ) edge ( d ) edge [ dashed ] ( e ) ( d ) edge [ thick ] ( b ) ( b ) edge [ thick ] ( e ) ;    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge ( b ) edge ( d ) edge [ dashed ] ( e ) ( c ) edge ( b ) edge ( d ) edge [ dashed](e ) ( d ) edge [ thick , bend right=90 ] ( e ) ;    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge [ dashed ] ( b ) edge ( d ) edge[dashed ] ( e ) ( c ) edge [ dashed ] ( b ) edge ( d ) edge [ dashed](e ) ( d ) edge [ thick , bend right=90 ] ( e ) ( d ) edge [ thick ] ( b ) ;    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge ( b ) edge ( d ) edge [ dashed](e ) ( c ) edge ( b ) edge ( d ) edge [ dashed](e ) ( d ) edge [ thick , bend right=90 ] ( e ) ( b ) edge [ thick ] ( e ) ;    = [ dir ] ( a ) at ( 0.5,0 ) ; ( b ) at ( 1,0 ) ; ( c ) at ( 1.5,0 ) ; ( d ) at ( 1,1 ) ; ( e ) at ( 1,-1 ) ; ( e ) edge [ bi , bend left=90 ] ( d ) ; ( a ) edge [ dashed ] ( b ) edge ( d ) edge [ dashed](e ) ( c ) edge [ dashed ] ( b ) edge ( d ) edge [ dashed](e ) ( d ) edge [ thick , bend right=90 ] ( e ) ( d ) edge [ thick ] ( b ) ( b ) edge [ thick ] ( e ) ;      the dags resulting from the procedure in proposition  [ prop : dagalgorithm ] are in general redundant because no care is taken to avoid generating transitive edges . by combining propositions  [ prop : dagcharact ] and  [ prop : dagalgorithm ] , we obtain an algorithm that generates sparse , non - redundant representations of the faithful dags .    a poset @xmath76 is faithful to @xmath106 iff it can be generated by the following steps .",
    "( 1 ) pick any set @xmath10 consisting of one simplicial node for each simplex .",
    "( 2 ) generate a poset @xmath76 on the nodes @xmath138 that is an edge subgraph of some sink orientation of @xmath42 .",
    "( 3 ) add @xmath122 to @xmath76 .",
    "[ th : posetenum ]    a nice feature of this construction is that step ( 3 ) is unambiguous : every choice for @xmath123 in step ( 1 ) and @xmath76 in step ( 2 ) yields exactly one poset .",
    "figure  [ algo : enumsep ] gives an explicit pseudocode for an algorithm that uses theorem  [ th : posetenum ] to enumerate all faithful posets .",
    "our algorithm is efficient in the sense that at every internal node in its recursion tree , it outputs a faithful poset . at every node",
    "we need to evaluate whether the current @xmath24 is acyclic and atransitive ( i.e. , contains no transitive edges ) , which can be done in polynomial time .",
    "also simplexes and their simplicial vertices can be found in polynomial time @xcite .",
    "thus , our algorithm is a _ polynomial delay enumeration algorithm _ similar to the ones used to enumerate adjustment sets for dags @xcite .",
    "figure  [ fig : consistentposets ] shows an example output for this algorithm .",
    "= [ circle , fill , inner sep=1pt ] = [ draw = black , fill = white ]     ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ bi ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v1 ) edge ( v6 ) ( v3 ) edge ( v6 ) ( v4 ) edge ( v6 ) ( v5 ) edge ( v6 ) ( v1 ) edge ( v7 ) ( v3 ) edge ( v7 ) ( v4 ) edge ( v7 ) ( v5 ) edge ( v7 ) ( v6 ) edge ( v7 ) ( v1 ) edge ( v8 ) ( v2 ) edge ( v8 ) ( v3 ) edge ( v8 ) ( v5 ) edge ( v8 ) ( v6 ) edge ( v8 ) ( v7 ) edge ( v8 ) ;        ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ dir ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v1 ) edge ( v6 ) ( v3 ) edge ( v6 ) ( v4 ) edge ( v6 ) ( v7 ) edge [ bi ] ( v6 ) ( v1 ) edge ( v7 ) ( v3 ) edge ( v7 ) ( v4 ) edge ( v7 ) ( v1 ) edge ( v8 ) ( v2 ) edge ( v8 ) ( v3 ) edge ( v8 ) ( v5 ) edge ( v8 ) ;     ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ dir ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v1 ) edge ( v6 ) ( v3 ) edge ( v6 ) ( v4 ) edge ( v6 ) ( v1 ) edge ( v7 ) ( v3 ) edge ( v7 ) ( v4 ) edge ( v7 ) ( v1 ) edge ( v8 ) ( v2 ) edge ( v8 ) ( v3 ) edge ( v8 ) ;     ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ dir ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v1 ) edge ( v6 ) ( v3 ) edge ( v6 ) ( v4 ) edge ( v6 ) ( v1 ) edge ( v7 ) ( v3 ) edge ( v7 ) ( v4 ) edge ( v7 ) ( v3 ) edge ( v8 ) ( v5 ) edge ( v8 ) ;     ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ dir ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v7 ) edge ( v6 ) ( v1 ) edge ( v7 ) ( v3 ) edge ( v7 ) ( v4 ) edge ( v7 ) ( v1 ) edge ( v8 ) ( v2 ) edge ( v8 ) ( v3 ) edge ( v8 ) ;     +     ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ dir ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v7 ) edge ( v6 ) ( v1 ) edge ( v7 ) ( v3 ) edge ( v7 ) ( v4 ) edge ( v7 ) ( v3 ) edge ( v8 ) ( v5 ) edge ( v8 ) ;     ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ dir ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v1 ) edge ( v6 ) ( v3 ) edge ( v6 ) ( v4 ) edge ( v6 ) ( v7 ) edge [ rdir ] ( v6 ) ( v1 ) edge ( v7 ) ( v1 ) edge ( v8 ) ( v2 ) edge ( v8 ) ( v3 ) edge ( v8 ) ;     ( v1 ) at ( 1.5,1.5 ) ; ( v2 ) at ( 3.5,0 ) ; ( v3 ) at ( 4,1 ) ; ( v4 ) at ( 2.25,1.5 ) ; ( v5 ) at ( 1,0.5 ) ; ( v8 ) at ( 2.5,.5 ) ; ( v6 ) at ( 3,1 ) ; ( v7 ) at ( 2.5,2 ) ; = [ dir ] ( v1 ) edge ( v5 ) ( v2 ) edge ( v5 ) ( v1 ) edge ( v6 ) ( v3 ) edge ( v6 ) ( v4 ) edge ( v6 ) ( v7 ) edge [ rdir ] ( v6 ) ( v1 ) edge ( v7 ) ( v3 ) edge ( v8 ) ( v5 ) edge ( v8 ) ;",
    "in this section , we apply the previous results to explore some explicit combinatorial properties of smigs and their faithful dags .      we revisit the question : when can a marginal independence graph allow a causal interpretation @xcite ?",
    "more precisely , we ask _ how many _ marginal independence graphs on @xmath29 variables are smigs .",
    "we reformulate this question into a version that has been investigated in the context of poset theory .",
    "let the _ height _ of a poset @xmath76 be the length of a longest path in @xmath76 .",
    "the following is an obvious implication of theorem  [ thm : minimalposet ] .",
    "the number @xmath139 of non - isomorphic smigs with @xmath29 nodes is equal to the number of non - isomorphic posets on @xmath29 variables of height 1 .",
    "enumeration of posets is a highly nontrivial problem , and an intensively studied one .",
    "the online encyclopedia of integer sequences ( oeis ) tabulates @xmath139 for @xmath29 up to 40 @xcite .",
    "we give the first 10 entries of the sequence in table  [ tab : numbers ] and compare it to the number of graphs in general ( up to isomorphism ) . as we observe , the fraction of graphs that admit a dag on the same variables decreases swiftly as @xmath29 increases .    .",
    "comparison of the number of unlabeled connected graphs with @xmath29 nodes to the number of such graphs that are also smigs . for @xmath140 (",
    "not shown ) , non - smigs outnumber smigs by more than @xmath141 . [ cols= \" > , > , > , > \" , ]     we note that a similar but more technical analysis is possible for uncertainty reduction with respect to dags instead of posets .",
    "we omit this due to space limitations .",
    "in this section we consider situations in which a graph @xmath42 is not a smig ( which can be detected using the algorithm in theorem  [ thm : recognize : sdgs ] ) .",
    "similarly to the definition proposed in @xcite for the general dependency models , to obtain faithful dags for such graphs we will extend the dags with some auxiliary nodes .",
    "we generalize definition  [ definition : dependency : graph ] as follows .",
    "let @xmath38 be a graph and let @xmath142 , with @xmath143 , be a set of auxiliary nodes .",
    "a dag @xmath144 is faithful to @xmath42 if for all @xmath40 , @xmath41 iff @xmath14 and @xmath35 have a common ancestor in @xmath24 .",
    "the result below follows immediately from proposition  [ proposition : induced : subgraph : mdg ] .",
    "for every graph @xmath42 there exists a faithful dag @xmath42 with some auxiliary nodes .",
    "obviously , if @xmath145 then there exists a faithful dag to @xmath42 with @xmath146 . for @xmath147 , from the proof of proposition  [ proposition : induced : subgraph : mdg ] it follows that there exists a set @xmath142 of at most @xmath148 nodes and a dag @xmath24 such that @xmath24 is faithful to @xmath42 with auxiliary nodes @xmath142 .",
    "but the problem arises to minimize the cardinality of  @xmath142 .    the problem to decide if for a given graph @xmath42 and an integer @xmath149",
    ", there exists a faithful dag with at most @xmath149 auxiliary nodes , is np - complete .",
    "it is easy to see that the problem is in np . to prove that it is np - hard",
    ", we show a polynomial time reduction from the edge clique cover problem , that is known to be np - complete  @xcite . recall that the problem edge clique cover is to decide if for a graph @xmath42 and an integer @xmath149 there exist a set of @xmath149 subgraphs of @xmath42 , such that each subgraph is a clique and each edge of @xmath42 is contained in at least one of these subgraphs ?",
    "let @xmath121 and @xmath149 be an instance of the edge clique cover problem , with @xmath150 .",
    "we construct the marginal independence graph @xmath151 as follows .",
    ". then @xmath153 and @xmath154 .",
    "obviously , @xmath151 can be constructed from @xmath42 in polynomial time .",
    "we claim that @xmath121 can be covered by @xmath155 cliques iff for @xmath151 there exists a faithful dag @xmath24 with at most @xmath149 auxiliary nodes .",
    "assume first that @xmath121 can be covered by at most @xmath149 cliques , let us say @xmath156 , with @xmath157 .",
    "then we can construct a faithful dag @xmath24 for @xmath151 with @xmath158 auxiliary nodes as follows .",
    "its set of nodes is @xmath159 , where @xmath160 .",
    "the edges @xmath161 can be defined as @xmath162 it is easy to see that @xmath24 is faithful to @xmath151 .",
    "now assume that a dag @xmath24 , with at most @xmath149 auxiliary nodes @xmath142 , is faithful to @xmath151 . from the construction of @xmath151",
    "it follows that for all different nodes @xmath163 there is no directed path from @xmath164 to @xmath165 in @xmath24 .",
    "if such a path exists , then @xmath164 is an ancestor of @xmath165 in @xmath24 .",
    "since @xmath166 is an edge of @xmath151 , the nodes @xmath164 and @xmath167 have a common ancestor in @xmath24 , which must be also a common ancestor of @xmath167 and @xmath165  a contradiction because @xmath167 and @xmath165 are not incident in @xmath151 .",
    "thus , all treks connecting pairs of nodes from @xmath45 in @xmath24 must contain auxiliary nodes .",
    "next , we slightly modify @xmath24 : for each @xmath167 we remove all incident edges and add the new edge @xmath168 .",
    "the resulting graph @xmath25 , is a dag which remains faithful to @xmath151 .",
    "indeed , we can not obtain a directed cycle in the @xmath25 since no @xmath167 has an in - edge and the original @xmath24 was a dag . to see that the obtained dag remains faithful to @xmath151 note first that after the modifications , @xmath167 and @xmath164 have a common ancestor in @xmath24 whereas @xmath167 and @xmath165 , with @xmath169 , do not .",
    "otherwise , it would imply a directed path from @xmath164 to @xmath165 since @xmath167 is the only possible ancestor of both nodes  a contradiction .",
    "finally , note that any trek connecting @xmath164 and @xmath165 in @xmath24 can not contain a node from @xmath170 .",
    "similarly , no trek between @xmath164 and @xmath165 in @xmath25 contains a node from @xmath170 .",
    "we get that @xmath164 and @xmath165 have a common ancestor in @xmath24 iff they have a common ancestor in @xmath25 .",
    "thus , in @xmath25 the auxiliary nodes @xmath142 are incident to @xmath45 , but not to nodes from @xmath170 .",
    "below we modify @xmath25 further and obtain a dag @xmath171 , in which every auxiliary node is incident with a node in @xmath4 via an out - edge only .",
    "to this aim we remove from @xmath25 all edges going out from a node in @xmath4 to a node in  @xmath172 .    obviously , if @xmath164 and @xmath165 have a common ancestor in @xmath171 , then they also have a common ancestor in @xmath25 , because @xmath173 .",
    "the opposite direction follows from the fact we have shown at the beginning of this proof that for all different nodes @xmath163 there is no directed path from @xmath164 to @xmath165 in @xmath24 .",
    "this is true also for @xmath25 .",
    "thus , if @xmath164 and @xmath165 have a common ancestor , say @xmath0 , in @xmath25 then @xmath174 and there exist directed paths @xmath175 and @xmath176 such that also all @xmath177 and @xmath178 belong to @xmath142 . but from the construction of @xmath171 it follows that both paths belong also to @xmath171 .",
    "since @xmath171 is faithful to @xmath42 , for every auxiliary node @xmath172 the subgraph induced by its children @xmath179 in @xmath171 is a clique in @xmath151 .",
    "moreover every edge @xmath180 of the graph @xmath42 belongs to at least one such clique .",
    "thus the subgraphs induced by @xmath181 , with @xmath182 , are cliques that cover @xmath42 .",
    "given a graph that represents a set of pairwise marginal independencies , which causal structures on the same variables might have generated this graph ?",
    "here we characterized all these structures , or alternatively , all maximal and minimal ones .",
    "furthermore , we have shown that it is possible to deduce how many exogenous variables ( which correspond to simplicial nodes ) the causal structure might have , and even to tell whether it might be a tree . for graphs that do not admit a dag on the same variables , we have studied the problem of explaining the data with as few additional variables as possible , and proved it to be np - hard .",
    "this may be surprising ; the related problem of finding a mixed graph that is markov equivalent to a bidirected graph and has as few bidirected edges as possible is efficiently solvable @xcite .",
    "the connection to posets emphasizes that sets of faithful dags have complex combinatorics . indeed ,",
    "if there are no pairwise independent variables , then we obtain the classical poset enumeration problem @xcite .",
    "our current , unoptimized implementation of the algorithm in figure  [ algo : enumsep ] allows us to deal with dense graphs up to about 12 nodes ( sparse graphs are easier to deal with ) .",
    "we point out that our enumeration algorithms operate with a `` template graph '' , i.e. , the sink orientation .",
    "it is possible to incorporate certain kinds of background knowledge , like a time - ordering of the variables , into this template graph by deleting some edges .",
    "such further constraints could greatly reduce the search space .",
    "another additional constraint that could be used for linear models is the precision matrix @xcite , though finding dags that explain a given precision matrix is np - hard in general @xcite ,    we observed that the pairwise marginal independencies substantially reduce structural uncertainty even in the worst case ( table  [ tab : numbers ] ) . causal inference algorithms could exploit this to reduce the number of ci tests .",
    "the pc algorithm @xcite , for instance , forms the marginal independence graph as a first stage before performing any ci tests . at that stage",
    ", it could be immediately tested if the resulting graph is a smig , and if not , the algorithm can terminate as no faithful dag exists . in summary , we have mapped out the space of causal structures that are faithful to a given set of pairwise marginal independencies using constructive criteria that lead to well - structured enumeration procedures .",
    "the central idea underlying our results is that faithful models for marginal independencies are better described by posets than by dags .",
    "our results allow to quantify how much our uncertainty about a causal structure is reduced when we invoke the faithfulness assumption and observe a set of marginal independencies ."
  ],
  "abstract_text": [
    "<S> we consider graphs that represent pairwise marginal independencies amongst a set of variables ( for instance , the zero entries of a covariance matrix for normal data ) . </S>",
    "<S> we characterize the directed acyclic graphs ( dags ) that faithfully explain a given set of independencies , and derive algorithms to efficiently enumerate such structures . </S>",
    "<S> our results map out the space of faithful causal models for a given set of pairwise marginal independence relations . </S>",
    "<S> this allows us to show the extent to which causal inference is possible without using conditional independence tests . </S>"
  ]
}