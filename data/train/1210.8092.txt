{
  "article_text": [
    "in graphical security modeling , the main focus lies on the visual representation of a scenario .",
    "a common requirement of graphical models is their user friendliness , and hence their intuitiveness .",
    "however , intuitive models are prone to be ambiguous .",
    "while this in itself may already be undesirable , ambiguity is detrimental for computer supported processing .",
    "contrary to intuitive models , formal frameworks prevent ambiguity and are able to support automated quantitative evaluation .",
    "a disadvantage of formal frameworks is however that they are , not seldom , more difficult to understand .",
    "defense trees  @xcite form a systematic , graphical methodology for analysis of attack  defense scenarios .",
    "they represent a game between an attacker , whose goal is to attack a system , and a defender who tries to protect the system .",
    "the widespread formalism of attack trees is a subclass of attack  defense trees , where only the actions of the attacker are considered .",
    "the attack ",
    "defense tree methodology combines intuitive and formal components . on the one hand , the intuitive visual attack ",
    "defense tree representation is used in practice to answer qualitative and quantitative questions , such as `` what are the minimal costs to protect a server ? '' , or ``",
    "is the scenario satisfiable ? '' on the other hand , there exist attack  defense terms and a precise mathematical framework for quantitative analysis using a recursive bottom - up procedure introduced for attack trees in  @xcite and extended to attack  defense trees in  @xcite .    several case studies performed using the attack",
    " defense tree methodology showed that there exist a significant discrepancy between users focusing on the intuitive components of the model and users working with the formal components .",
    "this is due to the fact that intuitive models are user friendly but often ambiguous .",
    "in contrast , formal models are rigorous and mathematically sound .",
    "this , however , makes them difficult to understand for users without a formal background .",
    "this discrepancy between the two worlds is especially visible in the case of quantitative analysis .",
    "correct numerical evaluation can only be performed when all users have precise and consistent understanding of considered quantities also called attributes .",
    "_ * contributions . *",
    "_ this work is an attempt to bridge the gap between the intuitive and the formal components of the attack ",
    "defense tree methodology for quantitative security analysis .",
    "our goal is to provide a precise relation between intuitive questions and their formal models called attribute domains .",
    "we elaborate which kind of intuitive questions occurring in practical security analysis can be answered with the help of the bottom - up procedure on attack  defense trees .",
    "we empirically classify questions that were collected during case studies and literature reviews .",
    "we distinguish and formally analyze three different classes of questions : those referring to one player , those where answers for both players can be deduced from each other and those relating to an outside third party .",
    "for each class we provide detailed guidelines how the questions should be specified , so that they are unambiguous and can be answered correctly .",
    "simultaneously , we discuss templates of the attribute domains corresponding to each class .",
    "_ * related work . * _ an excellent historical overview on graphical security modeling , starting from fault trees  @xcite , over threat trees  @xcite and privilege graphs  @xcite leading up to schneier s attack trees  @xcite , was given by pitre - cambacds and bouissou in  @xcite .",
    "when schneier introduced the attack trees formalism in  @xcite , he proposed how to evaluate , amongst others , attack costs , success probability of an attack , and whether there is a need for special equipment .",
    "since then , many authors have not only extended the attack tree formalism syntactically , but also followed in his footsteps and included the possibility of quantitative analysis in their extended formalisms .",
    "baca and petersen  @xcite , for example , have extended attack trees to countermeasure graphs and quantitatively analyzed an open - source application development .",
    "bistarelli  et  al .",
    "@xcite , edge  et  al .",
    "@xcite and roy  et  al .",
    "@xcite have augmented attack trees with a notion of defense or mitigation nodes .",
    "they all analyze specific types of risk using particular risk formulas , adjusted to their models .",
    "willemson and jrgenson  @xcite introduced an order on the leaves of attack trees to be able to optimize the computation of the expected outcome of the attacker .",
    "there also exist a number of case studies and experience reports that quantitatively analyze real - life systems .",
    "notable examples are henniger  et  al .",
    "@xcite , who have conducted a study using attack trees for vehicular communications systems , abdulla  et  al .",
    "@xcite , who analyzed the gsm radio network using attack jungles , and tanu and arreymbi  @xcite , who assessed the security of mobile scada system for a tank and pump facility .",
    "since all previously mentioned papers focus on specific attributes , they do not address the general problem of the relation between intuitive and formal quantitative analysis .",
    "the formalism of attack  defense trees considered in this work was introduced by kordy et al . in  @xcite .",
    "formal aspects of the attack ",
    "defense methodology have been discussed in  @xcite and  @xcite . in  @xcite ,",
    "bagnato et al . provided guidelines for how to use attack  defense trees in practice .",
    "they analyzed a dos attack scenario on an rfid - based goods management system by evaluating a number of relevant attributes , including cost , time , detectability , penalty , required skill level , impact , difficulty and profitability .",
    "_ * paper structure . * _ the necessary background concerning the attack ",
    "defense tree methodology is briefly explained in section  [ sec : attributes ] .",
    "the relation between intuitive and formal quantitative analysis of attack ",
    "defense scenarios is presented in  section  [ sec : first_classification ] .",
    "this section also introduces our classification of questions that can be answered on attack  defense trees with the help of a bottom - up procedure .",
    "the classification contains three classes of questions which are treated in sections  [ sec : two - op - case ] ,  [ sec : winning ] and  [ sec : environmental ] .",
    "section  [ sec : tool ] presents a software tool , that has been developed to support quantitative analysis of attack  defense scenarios .",
    "section  [ sec : conclusion ] concludes the paper .",
    "an _ attack  defense tree _ ( adtree ) constitutes an intuitive graphical model describing the measures an attacker might take in order to attack a system and the defenses that a defender can employ to protect the system .",
    "an adtree is a node - labeled rooted tree having nodes of two opposite types : _ attack nodes _ represented with circles and _ defense nodes _ represented with rectangles .",
    "the root node of an adtree depicts the main goal of one of the players .",
    "each node of an adtree may have one or more children of the same type which _ refine _ the node s goal into subgoals .",
    "the refinement relation is indicated by solid edges and can be either disjunctive or conjunctive .",
    "the goal of a _",
    "disjunctively _ refined node is achieved when _ at least one _ of its children s goals is achieved .",
    "the goal of a _",
    "conjunctively _ refined node is achieved when _ all _ of its children s goals are achieved . to distinguish between the two refinements we indicate the conjunctive refinement with an arc . a node which does not have any children of the same type",
    "is called a _",
    "non - refined _ node .",
    "non - refined nodes represent _ basic actions _ ,",
    "i.e. , actions which can be easily understood and quantified .",
    "every node in an adtree may also have one child of the opposite type , representing a _",
    "countermeasure_. the countermeasure relation is indicated by dotted edges .",
    "nodes representing countermeasures can again be refined into subgoals and countered by a node of the opposite type .",
    "[ ex : main ] an example of an adtree is given in  figure  [ fig : main ] .",
    "the root of the tree represents an attack on a server .",
    "three ways to accomplish this attack are depicted : insider attack , outsider attack ( oa ) and stealing the server ( ss ) . to achieve his goal",
    ", an insider needs to be internally connected ( ic ) and have the correct user credentials ( uc ) . to not be caught easily ,",
    "an insider uses a colleague s and not his own credentials .",
    "attack by an outsider can be prevented if a properly configured firewall ( fw ) is installed .",
    "graphical visualization of potential attacks and possible countermeasures constitutes a first step towards a systematic security analysis .",
    "the next step is to assign numerical values to adtree models , i.e. , to perform a quantitative analysis .",
    "intuitively speaking , performing a quantitative security analysis means _ answering questions related to specific aspects or properties influencing the security of a system or a company_. these questions may be of boolean type , e.g. , `` is the attack satisfiable ? '' , or may concern physical or temporal aspects , e.g. , `` what are the minimal costs of attacking a system ? '' , or `` how long does it take to detect the attack ? '' in order to facilitate and automate the analysis of vulnerability scenarios using adtrees , the formal model of adterms and their quantitative analysis have been introduced .",
    "we briefly describe them in the next section .      in this section",
    "we recall formal definitions related to our methodology . for more details and explanatory examples",
    "we refer the reader to  @xcite . to formally represent and analyze adtrees , typed terms over a particular typed signature , called the ad  signature ,",
    "have been introduced in  @xcite . to be able to capture adtrees rooted in an attacker s node as well as those rooted in a defender s node , we distinguish between the _ proponent _ ( denoted by  @xmath0 ) , which refers to the root player , and the _ opponent _ ( denoted by  @xmath1 ) , which is the other player .",
    "for instance , for the adtree in figure  [ fig : main ] , the proponent is the attacker and the opponent is the defender .",
    "conversely , if the root of an adtree is a defense node , the proponent is the defender and the opponent is the attacker . furthermore , given a set  @xmath2 , we denote by  @xmath3 the set of all finite strings over  @xmath2 , and by  @xmath4 the empty string . for @xmath5 ,",
    "we denote by @xmath6 a string composed of a finite number of symbols @xmath7 .    [ ad  signature ] the _ ad  signature _ is a pair  @xmath8 , where    * @xmath9 is a set of types , and * @xmath10 is a set of function symbols , such that the sets  @xmath11 , @xmath12 and  @xmath13 are pairwise disjoint .",
    "every function symbol  @xmath14 is equipped with a mapping  @xmath15 , where @xmath16 is defined as a pair @xmath17 .",
    "the first component of the pair describes the type of the arguments of @xmath18 and the second component describes the type of the values of @xmath18 .",
    "we have @xmath19    given @xmath14 and @xmath5 , we say that @xmath18 is of type @xmath7 , if @xmath20 .",
    "the elements of  @xmath11 and  @xmath12 are typed constants , which represent basic actions of the proponent s and opponent s type , respectively . by  @xmath21",
    "we denote the union  @xmath22 .",
    "the functions , and  @xmath23 represent unranked functions , i.e. , they stand for families of functions @xmath24 . ]",
    "@xmath25 , and  @xmath23 represent disjunctive and conjunctive refinement operators for the proponent and the opponent , respectively .",
    "we set  @xmath26 and  @xmath27 .",
    "the binary functions  @xmath28 , for  @xmath29 , represent countermeasures and are used to connect components of type  @xmath7 with components of the opposite type  @xmath30 .",
    "[ de : adterm ] typed ground terms over the ad ",
    "signature  @xmath31 are called attack  defense terms ( adterms ) .",
    "the set of all adterms is denoted by  @xmath32 .    for  @xmath33 , we denote by  @xmath34 the set of all adterms with the head symbol of type  @xmath7 .",
    "we have  @xmath35 .",
    "the elements of  @xmath36 and  @xmath37 are called _ adterms of the proponent s _ and _ of the opponent s type _ , respectively .",
    "the adterms of the proponent s type constitute formal representations of adtrees .    [ ex : main_term ] consider the adtree given in figure  [ fig : main ] .",
    "the corresponding adterm is @xmath38 the entire adterm , as well as its six subterms  @xmath39 ,  @xmath40 ,  ic ,  uc ,  ss , and  oa , are of the proponent s type .",
    "term @xmath41 also contains a subterm of the opponent s type , namely  fw .    in order to facilitate and automate quantitative analysis of vulnerability scenarios , the notion of an attribute for adterms",
    "has been formalized in  @xcite .",
    "an attribute expresses a particular property , quality , or characteristic of a scenario , such as the minimal costs of an attack or the expected impact of a defensive measure .",
    "a specific bottom - up procedure for evaluation of attribute values on adterms ensures that the user , for instance a security expert , only needs to quantify the basic actions . from these",
    ", the value for the entire scenario is deduced automatically .",
    "attributes are formally modeled using attribute domains .    [",
    "def : attribute - domain ] an attribute domain for adterms is a tuple @xmath42 where  @xmath43 is a set of values and , for  @xmath33 ,    * @xmath44 ,  @xmath45 are unranked operations on  @xmath43 , * @xmath28 are binary operations on  @xmath43 .",
    "let  @xmath46 be an attribute domain for adterms .",
    "the bottom - up computation of attribute values on adterms is formalized as follows .",
    "first , a value from @xmath43 is assigned to each basic action , with the help of function @xmath47 , called a _ basic assignment_. then , a recursively defined function  @xmath48 assigns a value to every adterm  @xmath41 , as follows @xmath49 where  @xmath50 and  @xmath51 .",
    "the example below illustrates the bottom - up procedure for an attribute called _",
    "[ ex : sat ] the question `` is the considered scenario satisfiable ? '' is formally modeled using the satisfiability attribute .",
    "the corresponding attribute domain is @xmath52 , where  @xmath53 , for all  @xmath54 .",
    "the basic assignment  @xmath55 assigns the value @xmath56 to every basic action which is satisfiable and the value @xmath57 to every basic action which is not satisfiable . using the recursive evaluation procedure defined by equation",
    ", we evaluate the satisfiability attribute on the adterm from example  [ ex : main_term ] . assuming that all basic actions are satisfied , i.e. , that @xmath58 for @xmath59",
    ", we obtain @xmath60    the satisfiability attribute , as introduced in the previous example , allows us to define which player is the _ winner _ of the considered attack  defense scenario . if the satisfiability value calculated for an adterm is equal to  @xmath56 , the winner of the corresponding scenario is the proponent , otherwise the winner is the opponent . in example",
    "[ ex : sat ] , the root attack is satisfied , so the winner is the attacker .",
    "one of the goals of this paper is to describe how to correctly specify a question for an adtree .",
    "this allows us to construct the corresponding formal model and deduce an answer using the bottom - up procedure .",
    "let us motivate our approach with the following example .",
    "[ eg : imprecise ] `` what are the costs of the considered scenario ? '' seems to be a valid question on an adtree .",
    "however , this question is underspecified , because we do not know whether we should quantify the attacker s costs , the defender s costs or both .",
    "clarifying this information is necessary to correctly define the corresponding basic assignment .",
    "we improve the question and ask `` what are the costs of the attacker ? ''",
    "the new question is still underspecified , since it is not clear whether we are interested in the minimal , maximal , average or other costs .",
    "making also this information explicit is necessary to correctly define the way how to aggregate the values for disjunctively refined nodes of the attacker .    in this paper",
    ", we provide a pragmatic taxonomy of quantitative questions that can be asked about adtrees .",
    "the presented classification results from case studies , e.g. ,  @xcite , as well as from a detailed literature overview concerning quantitative analysis of security .",
    "our study allowed us to identify three main classes of empirical questions , as described below .",
    "_ * class  1 : questions referring to one player . *",
    "_ most of the typical questions for adtrees have an explicit or implicit reference to one of the players which we call _ owner _ of the question .",
    "this is motivated by the fact that the security model is usually analyzed from the point of view of one player only .",
    "examples of questions referring to one player are `` what are the _ minimal costs of the attacker _ ? ''",
    "( here the owner is the attacker ) or `` how much does it _ cost to protect _ the system ? ''",
    "( here implicitly mentioned owner is the defender ) .",
    "when we ask a question of class  @xmath56 , we assume that its owner does not have extensive information concerning his adversary .",
    "thus , we always consider the worst case scenario with respect to the actions of the other player .",
    "most of the questions usually asked for attack trees can be adapted so that they can be answered on adtrees as well .",
    "thus , questions related to attributes such as _ attackers / defender s costs _",
    "@xcite , _ attack / defense time _",
    "@xcite , _ attack detectability _",
    "@xcite , _ attacker s special skill _",
    "@xcite , _ difficulty of attack / protection _ @xcite , _ penalty _",
    "@xcite , _ impact of the attack _",
    "@xcite , _ attacker s profit _",
    "@xcite , etc . , all belong to class  @xmath56 .",
    "we analyze questions of this class in  section  [ sec : two - op - case ] .",
    "_ * class  2 : questions where answers for both players can be deduced from each other . *",
    "_ exemplary questions belonging to class  @xmath61 are `` is the _ scenario satisfiable _ ? '' , or `` how _",
    "probable is it that the scenario will succeed _ ? '' .",
    "we observe that if the scenario is satisfied for the attacker , then it is not satisfied for the defender , and vice versa . similarly , knowing that one player succeeds with probability @xmath62 , we also know that the other player succeeds with probability @xmath63 .",
    "the foremost goal of attack trees and all their extensions is to represent whether attacks are possible .",
    "thus , the _ satisfiability _ attribute is considered , either explicitly or implicitly , in all works concerning attack trees and their extensions . as for _ _ probability _ _",
    ", the attribute has been extensively studied in  @xcite .",
    "we perform a detailed analysis of questions of class  @xmath61 in section  [ sec : winning ] .    _ * class  3 : questions referring to an outside third party . *",
    "_ questions belonging to class  @xmath64 relate to a universal property which is influenced by actions of both the attacker and the defender .",
    "they quantify attack  defense scenarios from the point of view of an outside third party which is neither the attacker nor the defender .",
    "for instance , one could ask about `` how much _ data traffic is involved in the attack ",
    "defense scenario _ ? '' . in this case",
    ", we do not need to distinguish between traffic resulting from the attacker s and the defender s actions , as both players contribute to the total amount .",
    "another example of a question of class  @xmath64 is `` what is the _ global environmental impact _ of the scenario ? '' .",
    "instances of environmental impact could be @xmath65 emission or water pollution .",
    "attributes corresponding to questions in class  @xmath64 have not been addressed in the attack tree literature , since attack trees focus on a single player .",
    "the importance of those questions becomes apparent when actions of two opposite parties are considered .",
    "the case study  @xcite that we have performed using the attack  defense tree methodology showed that such attributes relate to essential properties which should not be disregarded by the security assessment process .",
    "questions of class  @xmath64 are discussed in section  [ sec : environmental ] .",
    "the following three sections set up guidelines for how to correctly specify quantitative questions of all three classes .",
    "the guidelines main purpose is to enable us to find a corresponding attribute domain in order to correctly compute an answer using the bottom - up procedure .",
    "figure  [ fig : types ] depicts the three classes of questions , as well as general templates for the corresponding attribute domains , as introduced in definition  [ def : attribute - domain ] .",
    "symbols @xmath66 and @xmath67 serve as placeholders for specific operators .",
    "corresponding symbols within a tuple indicate that the functions coincide .",
    "for instance , @xmath68 means that @xmath69 and that @xmath70 .",
    "we motivate these equalities and give possible instantiations of @xmath66 and @xmath67 in the following three sections .",
    "( -4.7,0.1)(7.6,3.8 ) ( -4.4 , 2.45 )    ( -0.3,2.5)(0.2,3.3 ) ( -0.3,2.5)(0.2,1.7 ) ( 0.2,3.3 ) ( 2.2,2 ) ( 0.2,1.5 ) ( 3.7,1.5)(4.2,2.3 ) ( 4.2,2.2 ) ( 3.7,1.5)(4.2,0.7 ) ( 4.2,0.6 )",
    "questions belonging to class  @xmath56 refer to exactly one player , which we call the question s _ owner_. as we explain below , in the attack ",
    "defense tree setting , only two situations occur for a question s owner : either he needs to choose _ at least one _ option or he needs to execute _ all _ options .",
    "therefore , two operators suffice to answer questions of class  @xmath56 and the generic attribute domain is of the form  @xmath71 .",
    "furthermore , if we change a question s owner , the attribute domain changes from @xmath71 into @xmath72 .",
    "we illustrate the construction of the formal model for class  @xmath56 using the question `` what are the minimal costs of the attacker ? '' , where the owner is the attacker . in the case of class",
    "@xmath56 , all values assigned to nodes and subtrees express the property that we are interested in from the perspective of the question s owner . in the minimal costs example , this means that even subtrees rooted in defense nodes have to be quantified from the attacker s point of view , i.e. , a value assigned to the root of a subtree expresses what is the minimal amount of money that the attacker needs to invest in order to be successful in the current subtree .",
    "subtrees rooted in uncountered attacker s nodes can either be disjunctively or conjunctively refined .",
    "in the first case the attacker needs to ensure that he is successful in _ at least one _ of the refining nodes , in the second case he needs to be successful in _ all _ refining nodes . the situation for subtrees rooted in uncountered defender s nodes",
    "is reciprocal .",
    "if a defender s node is disjunctively refined , the attacker needs to successfully counteract _ all _ possible defenses to ensure that he is successful at the subtree s root node ; if the defender s node is conjunctively refined , successfully counteracting _ at least one _ of the refining nodes already suffices for the attacker to be successful at the subtree s root node .",
    "this reciprocality explains that two different operators suffice to quantify all possible uncountered trees : the operator that we use to combine attribute values for disjunctively refined nodes of one player is the same as the operator we use for conjunctively refined nodes of the other player .",
    "furthermore , the same two operators can also be used to quantify all remaining subtrees .",
    "if a subtree is rooted in a countered attacker s node , the attacker needs to ensure that he is successful at the action represented by the root node _ and _ that he successfully counteracts the existing defensive measure .",
    "dually , for the attacker to be successful in a subtree rooted in a defender s countered node , it is sufficient to successfully overcome the defensive action _ or _ to successfully perform the attack represented by the countering node .",
    "this implies that we can use the same operator as for conjunctively refined attacker s nodes in the first case and the same operator as for disjunctively refined attacker s nodes in the second case .",
    "for attributes in class  @xmath56 , we are only interested in one player , the owner of a question . therefore for this class , we should disregard subtrees that do not lead to a successful scenario for the owner .",
    "we achieve this with the help of the _ pruning _ procedure illustrated in the following example .",
    "consider the adtree in figure  [ fig : main ] and assume that we are interested in calculating the minimal costs of the attacker . in this case , there is no need to consider the subtree rooted in `` outsider attack '' , because it is countered by the defense `` firewall '' and thus does not lead to a successful attack .",
    "the subtree rooted in `` outsider attack '' therefore should be removed .",
    "this simultaneously eliminates having to provide values for the non - refined nodes `` outsider attack '' and ` firewall'. the computation of the minimal costs is then executed on the term corresponding to the tree in the right of figure  [ fig : for_pruning ] .",
    "@xmath73    to motivate the use of the pruning procedure , let us distinguish two situations .",
    "if a non - refined node of the non - owner is countered , its assigned value should not influence the result of the computation .",
    "if a non - owner s node is not countered , its value should indicate that the owner does not have a chance to successfully perform this subscenario .",
    "mathematically , it means that the value assigned to the non - refined nodes of the non - owner needs to be neutral with respect to one operator and simultaneously absorbing with respect to the other .",
    "since , in general , such an element may not exist , we use pruning to eliminate one of the described situations . which results in elimination of the absorption condition .",
    "below we explain how to intuitively prune an adtree and how to model the pruning in a mathematical way .    _",
    "* pruning intuitively . * _ [ para : intuitive_pruning ] let us consider a question of class  @xmath56 and its owner . in order to graphically prune an adtree",
    ", we perform the following procedure . starting from a leaf of the non - owner",
    ", we traverse the tree towards the root until we reach the first node  @xmath74 satisfying one of the following conditions , as illustrated in figures  [ fig : for_pruning_1 ] ,  [ fig : for_pruning_2 ] ,  [ fig : for_pruning_3 ] , and  [ fig : for_pruning_4 ] .",
    "@xmath73    @xmath73    @xmath73    @xmath73    * @xmath74 is a node of the owner and part of a proper disjunctive refinement ( see figure  [ fig : for_pruning ] ) ; * @xmath74 is a node of the non - owner and part of a proper conjunctive refinement ( see figure  [ fig : for_pruning_2 ] ) ; * @xmath74 is a node of the owner that counteracts a refined node of the non - owner ( see figure  [ fig : for_pruning_3 ] ) ; * @xmath74 is the root of the adtree ( see figure  [ fig : for_pruning_4 ] ) .",
    "the subtree rooted in node  @xmath74 is removed from the adtree .",
    "the procedure is repeated , starting from all leaves of the non - owner .",
    "we note that the order in which we perform the procedure does not influence the final result . also , in some cases the pruning procedure results in the removal of the entire adtree .",
    "this is the case when the owner of the question does not have any way of successfully achieving his goal .    _",
    "* pruning formally . * _ [ sub : formal_pruning ] let @xmath75 be a question  @xmath75 of class  @xmath56 and let  @xmath76 denotes the owner of @xmath75 .",
    "in order to model the pruning procedure in a mathematical way , we construct the formal model answering the question `` can the owner of  @xmath75 succeed in a considered attack ",
    "defense scenario ? ''",
    "the idea is to assign the boolean value  @xmath56 to all subtrees in which the owner of  @xmath75 can succeed and the value @xmath57 to the subtrees in which he can not .",
    "formally , we evaluate an attribute that we denote by  @xmath77 , defined as follows .",
    "first we set the basic assignment @xmath78 then , given an adterm @xmath41 , we use the following attribute domain succeed in the scenario ? '' also falls into class  @xmath56 , as it is referring to a specific player .",
    "this explains why the corresponding attribute domain conforms to the template deduced in section  [ sec : reduction_class_1 ] . ] to derive the values of the attribute  @xmath77 at all subterms of  @xmath41 : @xmath79 the following theorem shows that  @xmath77 models the pruning procedure soundly and correctly .",
    "[ th : equiv_pruning ] consider a question  @xmath75 of class  @xmath56 , its owner  @xmath76 , an adtree  @xmath80 and the corresponding adterm  @xmath41 .",
    "furthermore , let  @xmath81 and @xmath82 be defined by equations   and  .",
    "the intuitive pruning procedure presented in section  [ sec : pruning ] removes a subtree  @xmath83 of  @xmath80 if and only if the evaluation of the  @xmath77 attribute on the corresponding subterm  @xmath84 of  @xmath41 results in the value  @xmath57 .",
    "we need to show that    1 .   if a subtree is removed by pruning , the evaluation of  @xmath77 on the corresponding term results in  @xmath57 .",
    "[ case : removed_0 ] 2 .   if a subtree is not removed by pruning , evaluation of  @xmath77 on the corresponding term results in  @xmath56 .",
    "[ case : non - removed_1 ]    [ case : removed_0 ] ) let  @xmath85 be a leaf of the non - owner , from which we start the current step of the pruning procedure . we show that if a tree rooted in a node  @xmath74 is removed by pruning , then all subterms corresponding to subtrees rooted in the nodes on the path from  @xmath85 to  @xmath74 ( including  @xmath85 and  @xmath74 ) evaluate to  @xmath57 .",
    "we prove by contraposition .",
    "assume that there exists a node  @xmath86 on the path between  @xmath85 and  @xmath74 , such that the term corresponding to the tree rooted in  @xmath86 evaluates to  @xmath56 .",
    "moreover , let  @xmath86 be the first node with such property encountered when starting from  @xmath85 .",
    "note that  @xmath87 , because the basic assignment  @xmath82 assigns the value  @xmath57 to every non - refined node of the non - owner .",
    "this means that there exists a node  @xmath88 which is a child of  @xmath86 lying on the path from  @xmath85 to  @xmath74 . according to our assumptions",
    ", the term corresponding to the tree rooted in  @xmath86 evaluates to  @xmath56 while the term corresponding to the subtree rooted in  @xmath88 evaluates to  @xmath57 .",
    "this implies that operator  @xmath89 has been used .",
    "according to the attribute domain given by  , there are only three situations where the logical disjunction is used :    * either  @xmath86 is a properly , disjunctively refined node of the owner ; * or  @xmath86 is a properly , conjunctively refined node of the non - owner ; * or  @xmath86 is a refined node of the non - owner and  @xmath88 is its countermeasure .",
    "it is now sufficient to notice that in all the three cases , the pruning procedure should have had stopped at node  @xmath88 .",
    "contradiction .",
    "[ case : non - removed_1 ] ) first , let us remark that the pruning procedure stops at node  @xmath74 if the value of the term corresponding to the tree rooted in the parent node of  @xmath74 is not uniquely determined by the value of the subterm corresponding to the tree rooted in  @xmath74 .",
    "this is because , in all three cases where pruning stops at  @xmath74 , the calculation of the  @xmath77 attribute for the subterm corresponding to the tree rooted in the parent of  @xmath74 uses operator  @xmath89 which is applied to the value  @xmath57 ( quantifying the term corresponding to the tree rooted in  @xmath74 ) and another value which can not be deduced from the currently considered path .",
    "the tree rooted in the parent of  @xmath74 will either be removed by the pruning procedure starting from another leaf of the non - owner or it will not be removed after all possible steps of the pruning are performed .",
    "let  @xmath80 be an adtree and  @xmath83 be its subtree which is not removed by any step of the pruning procedure .",
    "in the remaining part of this proof we show that the evaluation of  @xmath77 on a term  @xmath84 corresponding to  @xmath83 results in value  @xmath56 .",
    "the proof is by induction on the structure of  @xmath83 .",
    "if  @xmath83 is a leaf of  @xmath80 , then it needs to represent a basic action of the owner .",
    "this is because all leaves of the non - owner are removed by pruning .",
    "according to the basic assignment  @xmath82 the term  @xmath84 is quantified with  @xmath56 .",
    "let us now consider a tree  @xmath83 which has not been removed by any step of the pruning procedure and which is not a leaf of  @xmath80 .",
    "as induction hypothesis , we assume that the evaluation of  @xmath77 on all subterms corresponding to the subtrees of  @xmath83 not removed by pruning results in  @xmath56 .",
    "this implies that the evaluation of  @xmath77 on  @xmath84 yields  @xmath56 , because the only possible ways of combining the values quantifying the subterms of the considered term are  @xmath89 or  @xmath90 .",
    "next , we show how to combine the evaluation of an attribute from class  @xmath56 with pruning , in one procedure .",
    "we have argued that , in order to evaluate an attribute  @xmath91 of class  @xmath56 in a correct way , we first need to prune a considered adtree with respect to the owner of the corresponding question . in this section ,",
    "we show how the two procedures of attribute evaluation and pruning can be modeled using an extended attribute domain .",
    "consider a question @xmath75 of class  @xmath56 , the corresponding attribute domain @xmath92 and a basic assignment @xmath93 .",
    "for ease of presentation , in this section we assume that the owner of @xmath75 is the proponent , i.e. , that @xmath94 is the _ at least one _ operator and @xmath95 is the _ all _ operator . in order to be able to answer  @xmath75 without the necessity of first pruning the adtree , we extend  @xmath96 with an additional boolean dimension that represents which actions are relevant for our considerations .",
    "therefore , instead of the value domain  @xmath96 , we are using the cartesian product  @xmath97 denoted by @xmath98 .",
    "furthermore , we define  @xmath99 and  @xmath100 as two internal operations on @xmath98 , by setting @xmath101 and @xmath102 where , for all  @xmath103 , we set  @xmath104 and  @xmath105 , and where @xmath106 denotes the neutral element with respect to @xmath94 . in order to define the extended basic assignment  @xmath107 , we set  @xmath108 , for every basic action  @xmath109 of the owner of  @xmath75 , and  @xmath110 , for every basic action  @xmath109 of the non - owner of  @xmath75 .",
    "theorem  [ th : eval+pruning ] shows that the attribute domain defined by @xmath111 constitutes a formal model allowing us to correctly evaluate attribute  @xmath91 , and thus answer @xmath75 , without requiring any prior pruning .",
    "[ th : eval+pruning ] let @xmath75 , @xmath112 , @xmath113 , @xmath114 and @xmath115 be as defined in this section .",
    "for every adterm  @xmath41 , we have    * @xmath116 , for some  @xmath103 , if the tree corresponding to  @xmath41 is removed by the pruning procedure related to  @xmath75 ; * @xmath117 , if the tree corresponding to  @xmath41 is not removed by the pruning procedure related to  @xmath75 .",
    "first observe that the calculation of the second component of the pair  @xmath118 corresponds to the calculation of attribute  @xmath77 formalized in section  [ sec : pruning ] .",
    "theorem  [ th : equiv_pruning ] ensures that the second component of @xmath118 is  @xmath57 if and only if the corresponding adterm is removed by the pruning procedure related to  @xmath75 . in this case",
    ", the first component of  @xmath118 does not have any conclusive meaning .",
    "this corresponds to the fact that answering the question  @xmath75 for the pruned subtrees of an adtree does not make any sense , since these subtrees do not contribute to the success of the owner of  @xmath75 .",
    "let  @xmath41 be a term corresponding to a subtree which is not removed by pruning related to  @xmath75 .",
    "in order to prove that  @xmath119 , it is sufficient to notice that , according to theorem  [ th : equiv_pruning ] , the evaluation of  @xmath77 on all subterms of  @xmath41 results in the value  @xmath56 .",
    "this means that , when calculating  @xmath118 we perform operations of the form @xmath120 where  @xmath121 .",
    "this obviously leads to the desired result .",
    "we illustrate the use of the extended attribute domain introduced in this section on the following example .    as in example",
    "[ ex : cost_pruned ] , we would like to answer the question `` what are the minimal costs of the proponent , assuming that reusing tools is infeasible ? '' , on the tree in the left of figure  [ fig : for_pruning ] .",
    "from example  [ ex : cost_pruned ] , we know that the corresponding attribute domain is @xmath122 .",
    "we extend @xmath123 to the attribute domain @xmath124 , as defined in this section . since @xmath125 is the neutral element with respect to @xmath126 on @xmath127 , operation @xmath128",
    "is defined as @xmath129 , for every @xmath130 .",
    "we evaluate the minimal costs attribute on the adterm corresponding to the non - pruned adtree from figure  [ fig : for_pruning ] , as follows : @xmath131 this result shows that the scenario is satisfiable for the proponent and that his minimal costs are @xmath132 .",
    "it is the same as the result obtained in example  [ ex : cost_pruned ] .      in this section",
    "we analyze how a question of class  @xmath56 should look like , in order to be able to instantiate the attribute domain template @xmath133 with specific value set and operators . to correctly instantiate @xmath134 , we need a value domain @xmath96 , two operators ( for _ all _ and _ at least one _ ) and we need to know which of those operators instantiates @xmath94 and which @xmath95 .",
    "thus , a well specified question of class  @xmath56 contains exactly four parts , as illustrated on the following question :    [ cols= \" < , < , < \" , ]     _ * notion . * _ in class  @xmath64 , we use notions that express universal properties covering both players",
    ". found examples are :    * social costs , * global costs , * third party costs ,    * environmental costs , * environmental damage , * information flow ,    * combined execution time , * required network traffic , * energy consumption .",
    "_ * modality . *",
    "_ the question should also contain enough information to allow us to specify how to deal with _ at least one _ option .",
    "in general , modalities used in class  @xmath64 are the same as those in class  @xmath56 , e.g. , minimal , maximal and average .",
    "_ * execution .",
    "* _ finally , we need to know what is the execution style , so that we can define the correct operator for _ all _ options .",
    "the choices for execution style in class  @xmath64 are again the same as in class  @xmath56 .",
    "these three parts now straightforwardly define an algebraic structure @xmath135 that we use to construct the attribute domain @xmath136 .",
    "consider the question `` what is the maximal energy consumption for the scenario depicted in figure  [ fig : main ] , knowing that sharing of power is impossible ? '' both , the proponent s as well as the opponent s actions may require energy .",
    "we assume that being `` internally connected '' , performing an `` outsider attack '' and running a `` firewall '' all consume 20 .",
    "obtaining `` user creds '' requires 1 , whereas `` stealing server '' does not require any energy .",
    "these numbers constitute the basic assignment for the considered attribute . from the question we know that , when we have a choice , we should consider the option which consumes the most energy .",
    "furthermore , since sharing of power is impossible , values for actions which require execution of several subactions should be added .",
    "thus , we use the attribute domain @xmath137 and compute the maximal possible energy consumption in the scenario as @xmath138    due to similarities for modality and execution style for questions of class  @xmath56 and class  @xmath64 , we can make use of table  [ tab : determination_structure ] , to choose the structure @xmath135 that determines an attribute domain for a question of class  @xmath64 .",
    "the table corresponds to the case where the owner is the proponent .",
    "adtrees extend the well - known formalism of attack trees  @xcite by incorporating defensive measures to the model .",
    "hence , every attack tree is in particular an adtree .",
    "as visible in example  [ eg : imprecise ] , underspecified questions are not a new phenomenon of adtrees , but already occur in the case of pure attack trees . thus , the formalization of quantitative questions , proposed in this paper , is not only useful in the attack ",
    "defense tree methodology but , more importantly , it helps users of the more widely spread formalism of attack trees .    given a well specified question on adtrees and the corresponding attribute domain , we can answer the question on attack trees as well .",
    "formally , attack trees are represented with terms involving only operators @xmath139 and @xmath140 .",
    "if @xmath46 is an attribute domain for adterms , the corresponding attribute domain for attack trees is @xmath141 , which corresponds to the formalization introduced in  @xcite .",
    "furthermore , due to the fact that attack trees involve only one player ( the attacker ) , the notions of attacker , proponent , and question s owner coincide in this simplified model .",
    "this in turn implies that , in the case of attack trees , the three classes of questions considered in this paper form in fact one class .",
    "in order to automate the analysis of security scenarios using the attack  defense methodology , we have developed a prototype software tool , called _ adtool_. it is written in java and is compatible with multiple platforms ( windows , linux , mac os ) .",
    "adtool is publicly available  @xcite .",
    "its main functionalities include the possibility of creation and modification of adtree and adterm models as well as attributes evaluation on adtrees .",
    "adtool combines the features offered by graphical tree representations with mathematical functionalities provided by adterms and attributes .",
    "the user can choose whether to work with intuitive adtrees or with formal adterms .",
    "when one of these models is created or modified , the other one is generated automatically .",
    "the possibility of modular display of adtrees makes adtool suitable for dealing with large industrial case studies which may correspond to very complex scenarios and may require large models .",
    "the software supports attribute evaluation on adtrees , as presented in this paper .",
    "a number of predefined attribute domains allow the user to answer questions of classes  @xmath56 , @xmath61 and @xmath64 .",
    "implemented attributes include : costs , satisfiability , time and skill level , for various owners , modalities and execution styles ; scenario s satisfiability and success probability ; reachability of the root goal in less than @xmath142 minutes , where @xmath142 can be customized by the user ; and the maximal energy consumption .",
    "a useful feature of the attack ",
    "defense tree methodology is that it combines an intuitive representation and algorithms with formal mathematical modeling . in practice we model",
    "attack  defense scenarios in a graphical way and we ask intuitive questions about aspects and properties that we are interested in . to formally analyze the scenarios , we employ attack  defense terms and attribute domains . in this paper , we have guided the user in how to properly formulate a quantitative question on an adtree and how to then construct the corresponding attribute domain .",
    "since attack trees are a subclass of attack  defense trees , our results also advance the practical use of quantitative analysis of attack trees .",
    "we are currently applying the approach presented in this paper to analyze socio - technical weaknesses of real - life scenarios , such as internet web filtering , which involve trade offs between security and usability . in the future",
    ", we also plan to investigate the relation between attribute domains of all three classes and the problem of equivalent representations of the same scenario , formalized in  @xcite .",
    "we would like to thank piotr kordy for his contributions to the development of adtool .",
    "this work was supported by the fonds national de la recherche luxembourg under the grants c@xmath143/is/@xmath144 and phd-@xmath145-@xmath146 .",
    "abdulla , p.a . , cederberg , j. , kaati , l. : analyzing the security in the gsm radio network using attack jungles . in : margaria , t. , steffen , b. ( eds . ) isola ( 1 ) .",
    "lncs , vol .",
    "6415 , pp . 6074 . springer ( 2010 )",
    "baca , d. , petersen , k. : prioritizing countermeasures through the countermeasure method for software security ( cm - sec ) . in : babar ,",
    "vierimaa , m. , oivo , m. ( eds . ) profes .",
    "lnibp , vol .",
    "6156 , pp .",
    "springer ( 2010 )      bistarelli , s. , dallaglio , m. , peretti , p. : strategic games on defense trees . in : dimitrakos , t. , martinelli , f. , ryan , p.y.a . ,",
    "schneider , s.a .",
    "lncs , vol . 4691 , pp .",
    "springer ( 2006 ) , http://www.springerlink.com/content/83115122h9007685/    buldas , a. , laud , p. , priisalu , j. , saarepera , m. , willemson , j. : rational choice of security measures via multi - parameter attack trees . in : lpez , j. ( ed . )",
    "lncs , vol . 4347 , pp .",
    "springer ( 2006 )    byres , e.j .",
    ", franz , m. , miller , d. : the use of attack trees in assessing vulnerabilities in scada systems . in : international infrastructure survivability workshop ( iisw04 ) , institute of electrical and electronics engineers , lisbon ( dec 2004 )    dacier , m. , deswarte , y. : privilege graph : an extension to the typed access matrix model . in : gollmann , d. ( ed . ) esorics94 , lncs , vol .",
    "springer berlin / heidelberg ( 1994 ) , http://dx.doi.org/10.1007/3-540-58618-0_72      fung , c. , chen , y.l . ,",
    "wang , x. , lee , j. , tarquini , r. , anderson , m. , linger , r. : survivability analysis of distributed systems using attack tree methodology . in : proceedings of the 2005 ieee military communications conference .",
    "vol .  1 , pp .",
    "583589 ( oct 2005 )    henniger , o. , apvrille , l. , fuchs , a. , roudier , y. , ruddle , a. , weyl , b. : security requirements for automotive on - board networks . in : 9th international conference on intelligent transport systems telecommunications ( itst09 ) .",
    "lille ( oct 2009 )      kordy , b. , mauw , s. , melissen , m. , schweitzer , p. : attack  defense trees and two - player binary zero - sum extensive form games are equivalent . in : alpcan , t. , buttyn , l. , baras ,",
    "lncs , vol .",
    "6442 , pp .",
    "springer ( nov 2010 )      kordy , b. , mauw , s. , radomirovi , s. , schweitzer , p. : attack  defense trees . journal of logic and computation pp . 133 ( 2012 ) , available online http://logcom.oxfordjournals.org/content/early/2012/06/21/logcom.exs029.short?rss=1    [ http://logcom.oxfordjournals.org/content/early/2012/06/21/logcom.exs029.short?rss=1    ]        li , x. , liu , r. , feng , z. , he , k. : threat modeling - oriented attack path evaluating algorithm .",
    "transactions of tianjin university 15(3 ) , 162167 ( 2009 ) , http://www.springerlink.com/content/v76g872558787214/    manikas , t.w . , thornton , m.a . ,",
    "feinstein , d.y .",
    ": using multiple - valued logic decision diagrams to model system threat probabilities . in : 41st ieee international symposium on multiple - valued logic ( ismvl-11 ) .",
    "263 267 ( 2011 )      pitre - cambacds , l. , bouissou , m. : beyond attack trees : dynamic security modeling with boolean logic driven markov processes ( bdmp ) . in : european dependable computing conference .",
    ". 199208 .",
    "ieee computer society , los alamitos , ca , usa ( 2010 )    roy , a. , kim , d.s . ,",
    "trivedi , k.s . : cyber security analysis using attack countermeasure trees . in : proceedings of the sixth annual workshop on cyber security and information intelligence research .",
    "csiirw 10 , acm , new york , ny , usa ( 2010 ) , http://doi.acm.org.proxy.bnl.lu/10.1145/1852666.1852698    roy , a. , kim , d.s . ,",
    "trivedi , k.s . : attack countermeasure trees ( act ) : towards unifying the constructs of attack and defense trees .",
    "security and communication networks 5(8 ) , 929943 ( 2012 ) , http://dx.doi.org/10.1002/sec.299        tanu , e. , arreymbi , j. : an examination of the security implications of the supervisory control and data acquisition ( scada ) system in a mobile networked environment : an augmented vulnerability tree approach . in : proceedings of advances in computing and technology , ( ac&t ) the school of computing and technology 5th annual conference .",
    ". 228242 .",
    "university of east london , school of computing , information technology and engineering ( 2010 ) , http://hdl.handle.net/10552/994    vesely , w.e . ,",
    "goldberg , f.f . ,",
    "roberts , n.h . , haasl , d.f . :",
    "fault tree handbook .",
    "tech . rep .",
    "nureg-0492 , u.s .",
    "regulatory commission ( 1981 ) , http://www.nrc.gov/reading-rm/doc-collections/nuregs/staff/sr0492/sr0492.pdf    wang , j. , whitley , j.n . , phan , r.c.w . ,",
    "parish , d.j . : unified parametrizable attack tree . international journal for information security research 1(1 ) , 2026 ( 2011 ) , http://www.infonomics-society.org/ijisr/unified%20parametrizable%20attack%20tree.pdf    willemson , j. , jrgenson , a. : serial model for attack tree computations . in : lee , d. , hong , s. ( eds . ) icisc .",
    "lncs , vol . 5984 , pp .",
    "springer ( 2010 ) , http://research.cyber.ee/~jan/publ/serialattack.pdf"
  ],
  "abstract_text": [
    "<S> attack  defense trees are a novel methodology for graphical security modeling and assessment . </S>",
    "<S> the methodology includes visual , intuitive tree models whose analysis is supported by a rigorous mathematical formalism . both , the intuitive and the formal components of the approach can be used for quantitative analysis of attack  </S>",
    "<S> defense scenarios . in practice , we use intuitive questions to ask about aspects of scenarios we are interested in . </S>",
    "<S> formally , a computational procedure , defined with the help of attribute domains and a bottom - up algorithm , is applied to derive the corresponding numerical values .    </S>",
    "<S> this paper bridges the gap between the intuitive and the formal way of quantitatively assessing attack </S>",
    "<S>  defense scenarios . </S>",
    "<S> we discuss how to properly specify a question , so that it can be answered unambiguously . given a well specified question , </S>",
    "<S> we then show how to derive an appropriate attribute domain which constitutes the corresponding formal model . since any attack tree is in particular an attack  defense tree , </S>",
    "<S> our analysis is also an advancement of the attack tree methodology .    </S>",
    "<S> attack trees , attack  defense trees , attributes , quantitative analysis , quantitative questions . </S>"
  ]
}