{
  "article_text": [
    "the study of vertex separators and associated combinatorial problems has been a fascinating research in the field of combinatorial computing .",
    "one such classical problem , namely _ connectivity augmentation _ focuses on increasing the vertex connectivity by one by augmenting a minimum number of edges .",
    "this study was initiated by eswaran et al @xcite and they studied the fundamental problem _ bi - connectivity augmentation _ : given a 1-connected graph @xmath2 , find a minimum number of edges whose augmentation to @xmath2 makes it 2-vertex connected ( bi - vertex connected ) . subsequently , hsu @xcite studied the tri - connectivity augmentation of bi - vertex connected graphs , making a bi - vertex connected graph 3-vertex connected by augmenting a minimum number of edges .",
    "the complexity of general vertex connectivity augmentation , i.e. , given a @xmath0-vertex connected graph , find a minimum number of edges whose augmentation to the given graph makes it @xmath3-vertex connected , was settled by vegh @xcite and this result has been a breakthrough result as the complexity of which was open for al most three decades .",
    "+ there are some note - worthy results as far as bi ( tri)-connectivity augmentation problems are concerned . to solve bi - connectivity augmentation , in @xcite , the given 1-vertex connected graph is transformed into a _ block tree _ and the augmentation is done with the help of the block tree . in @xcite ,",
    "a bi - connected component tree transforms the 1-connected graph and helps in obtaining a biconnectivity augmentation set .",
    "interestingly , in both the approaches a minimum bi - vertex connectivity augmentation can be obtained with the help of proposed tree - like graphs .",
    "recent work due to surabhi et .",
    "al @xcite developed a strategy using which one can augment many edges in parallel , thus obtaining a simpler approach for sequential and parallel bi - vertex connectivity augmentation .",
    "however , their work is restricted to the class of trees which are 1-vertex connected . similarly , for tri - connectivity augmentation of 2-vertex connected graphs ,",
    "a 3-block tree of 2-vertex connected graphs was used to obtain a minimum tri - connectivity augmentation set @xcite .",
    "+ in this article , we initiate the study of @xmath4-vertex connectivity augmentation which is to find a @xmath5-vertex connected graph from a @xmath0-vertex connected graph by augmenting a minimum number of edges .",
    "having known the results of @xcite , it is natural to know whether iterative application of algorithm mentioned in @xcite @xmath4 times will yield a @xmath5-vertex connected graph",
    ". it is important to highlight the fact that even for tri - connectivity augmentation of 1-connected graphs the chain approach fails to produce a minimum connectivity augmentation set , i.e , the approach of making a 1-vertex connected graph 2-vertex connected and making a 2-vertex connected graph 3-vertex connected does not yield an optimum augmentation set .",
    "this calls for a good understanding of minimum vertex separators of @xmath0-vertex connected graphs and their role in @xmath4-vertex connectivity augmentation . towards this attempt",
    ", we shall explore the study of tri - connectivity augmentation in trees .",
    "in particular , we present the following results in this paper ;    * given a tree @xmath11 , any minimum tri - connectivity augmentation set has at least @xmath12 edges , where @xmath9 and @xmath10 denote the number of degree one vertices and degree two vertices , respectively . * a polynomial - time algorithm to compute a minimum tri - connectivity augmentation set meeting the above bound .",
    "we believe that the results presented in this paper can be extended to tri - connectivity augmentation of 1-connected graphs .",
    "+ * roadmap : * in the next section , we present lower bound results for tri - connectivity augmentation followed by an algorithm which will yield the minimum tri - connectivity augmentation set in polynomial time .",
    "we conclude this paper with some directions for @xmath4-connectivity augmentation of 1-connected graphs , @xmath13 .",
    "notation and definitions are as per @xcite .",
    "let @xmath14 be an undirected connected graph where @xmath15 is the set of vertices and @xmath16 , @xmath17",
    ". for @xmath18 , @xmath19 and @xmath20 refers to the degree of @xmath21 in @xmath2 .",
    "let @xmath18 is said to be a _ leaf _ if @xmath22 .",
    "@xmath23 and @xmath24 refers to the minimum and maximum degree of @xmath2 , respectively . for simplicity , we use @xmath25 and @xmath26 when the associated graph is clear from the context .",
    "@xmath27 is a _ path _ defined on @xmath28 such that @xmath29 . for a graph @xmath2 , we define @xmath30 such that @xmath31 refers to the number of vertices in @xmath32 and we define @xmath33 such that @xmath34 refers to the number of vertices in @xmath35 . for @xmath36 ,",
    "@xmath37 $ ] denotes the graph induced on the set @xmath38 and @xmath39 is the induced graph on the vertex set @xmath40 .",
    "vertex separator _ of a graph @xmath2 is a set @xmath41 such that @xmath39 has more than one connected component . a vertex separator @xmath38 is said to be _ minimal _ if there no proper subset @xmath42 of @xmath38 such that @xmath42 is a vertex separator .",
    "a _ minimum vertex separator _",
    "@xmath38 is a vertex separator of least size and the cardinality of such @xmath38 is the vertex connectivity of a graph @xmath2 , written @xmath43 .",
    "a graph is @xmath0-_vertex connected _ if @xmath44 .",
    "if @xmath45 then the graph is 1-connected ( also known as singly connected ) and in such a graph a minimum vertex separator @xmath38 is a singleton set and the vertex @xmath46 is a _ cut - vertex _ of @xmath2 .",
    "cycle _ is a connected graph in which the degree of each vertex is two .",
    "a _ tree _ is a connected and an acyclic graph .",
    "for a graph @xmath2 with @xmath44 , a minimum connectivity augmentation set @xmath47 is such that the graph obtained from @xmath2 by augmenting @xmath48 is of vertex connectivity @xmath49 , @xmath50 .",
    "this paper is written in the context of augmenting @xmath48 edges to a tree such that the obtained graph is @xmath51-connected .",
    "in this section , we shall first present the lower bound analysis which is a number representing the number of edges to be augmented in any minimum connectivity augmentation set to make a tree 3-vertex connected . in the subsequent sections , we first give an sketch of the algorithm and",
    "then we shall present an algorithm with analysis which will output a connectivity augmentation set meeting the lower bound .",
    "our approach finds a minimum tri - connectivity augmentation set for trees with @xmath52 ( which are called paths ) and for trees with @xmath53 ( called non - path trees ) separately .",
    "let @xmath11 be a tree and @xmath9 and @xmath10 denote the number of degree one and degree two vertices , respectively .",
    "then , any tri - connectivity augmentation set @xmath48 is such that @xmath54 .",
    "it is well - known that for any @xmath51-connected graph @xmath2 , @xmath55 .",
    "therefore to make @xmath11 a @xmath51-connected graph , we must increase the degree of elements in @xmath32 by at least two and the degree of elements in @xmath35 by at least one . since an edge joins a pair of vertices , any augmentation set @xmath48 has at least @xmath56 edges .",
    "this completes the proof of the lemma . @xmath57",
    "our approach varies for the path and the non - path , for the input tree on @xmath58 vertices .",
    "if the input is a path , the algorithm converts the path to a cycle and then augments edges in such a way that every edge creates a cycle of length @xmath59 .",
    "if the input is a non - path tree , @xmath11 : first root the tree @xmath11 at the maximum degree vertex , @xmath4 .",
    "let @xmath60 denotes the set of leaves in @xmath11 .",
    "now , we group the vertex set into branches , namely @xmath61 .",
    "the branch @xmath61 contains the vertices in the path from the root @xmath4 to the leaf @xmath62 .",
    "thus , the number of branches in the input tree is the number of degree one vertices .",
    "next we perform a level ordering and label the degree two vertices as per the ordering as @xmath63 .",
    "let @xmath64 .",
    "now we initialize every vertex in @xmath65 as unmarked .",
    "as we iterate , we augment edges as follows : for every unmarked vertex @xmath66 find the least unmarked vertex @xmath67 of different branch and if such @xmath67 exists for @xmath68 , mark the vertices @xmath67 and @xmath68 and augment an edge between @xmath67 and @xmath68 .",
    "once this process is done , group the unmarked vertices in @xmath65 .",
    "if there are no unmarked vertices then we form a cycle among the degree one vertices , if there are odd number of unmarked vertices we form a cycle among the degree one vertices and then we augment edges between the remaining degree two vertices using the ordering of vertices . if there are even number of unmarked vertices we form a path among the leaves and then we augment edges between the remaining degree two vertices using the ordering of vertices .",
    "interestingly , this new approach guarantees that the algorithm augments exactly @xmath56 edges .",
    "we now present an algorithm for tri - connectivity augmentation of trees .",
    "further , we show that our algorithm is optimal followed by the proof of correctness .",
    "let t be a tree with @xmath69 vertices .",
    "algorithm @xmath70 yields a graph @xmath71 , where @xmath72 .",
    "the algorithm , first converts the path @xmath73 to a cycle @xmath74 , by adding an edge between two end vertices , i.e. , the algorithm augments an edge @xmath75 in _",
    "step 2_. now , the degree of each vertex in the resultant graph is two . in",
    "_ steps 3 - 8 _ , for each vertex @xmath62 of degree two in the set @xmath76 , we identify a vertex @xmath77 such that the length of the path @xmath78 and further , we augment an edge between @xmath62 and @xmath77 . thus , in the resulting graph , degree of every vertex is three if @xmath58 is even and degree of all vertices other than the vertex @xmath79 is three , if @xmath58 is odd .",
    "so , if @xmath58 is odd , the algorithm augments an edge @xmath80 in _ step 9 - 11_. this completes the path augmentation and in the resulting graph @xmath71 degree of each vertex is at least three .",
    "@xmath57    let t be a tree with @xmath69 vertices .",
    "algorithm @xmath81-@xmath82 yields a graph @xmath71 , where @xmath72 .",
    "the algorithm , collects all degree two vertices and augment edges between those vertices which satisfies the condition in _ step 11 _ and marks the end vertices of the augmented edges .",
    "now , the marked vertices are of degree three .",
    "collect the unmarked vertices ( remaining vertices of degree 2 ) into the set @xmath83 .",
    "we shall now analyze the _ steps 18 - 37 _ of the algorithm by considering the following cases .",
    "@xmath84 + i.e. , all the degree two vertices in the given tree have become the degree three vertices in @xmath71 .",
    "we now augment edges among the leaves such that there is a cycle @xmath85 .",
    "we can easily see that in the resultant graph @xmath71 , for every vertex @xmath86 , @xmath87 .",
    "@xmath88 and @xmath89 is even , say @xmath90 .",
    "+ we first form a path among leaves from @xmath91 to @xmath92 such that all the degree one vertices are converted to degree three vertices except @xmath91 and @xmath92 , which is of degree two .",
    "now , augment the edges @xmath93 , @xmath94 ",
    ", @xmath95,@xmath96 .",
    "thus , the only remaining degree two vertices are @xmath97 , @xmath98 , @xmath91 and @xmath92 .",
    "therefore , if @xmath99 , then augment @xmath100 and @xmath101 and if @xmath102 , then augment @xmath103 and @xmath104 .",
    "hence in the resultant graph @xmath71 every vertex is of degree three .",
    "@xmath88 and @xmath89 is odd , say @xmath90 .",
    "+ we first form a cycle among leaves such that all the degree one vertices are converted to degree three vertices .",
    "now , augment the edges @xmath105 , @xmath106  ,",
    "thus , the only remaining degree two vertex is @xmath109 .",
    "therefore , if @xmath110 , then augment @xmath111 such that @xmath112 and @xmath113 and if @xmath114 , then augment @xmath115 such that @xmath112 and @xmath116 . hence in the resultant graph @xmath71",
    "every vertex is of degree at least three .",
    "@xmath57    let t be a tree with @xmath69 vertices .",
    "algorithm @xmath70 precisely augments @xmath117 edges .",
    "_ step 2 _ of algorithm augments an edge between two leaves and this increases @xmath10 by two .",
    "thus there are @xmath118 degree two vertices and _ steps 3 - 8 _ augments @xmath119 new edges , if @xmath58 is even and @xmath120 new edges , if @xmath58 is odd . if @xmath58 is odd , _ steps 9 - 12 _ augments an edge .",
    "thus , if @xmath58 is odd , we have augmented @xmath121 ( since , @xmath10 is odd ) .",
    "if @xmath58 is even , we have augmented @xmath122 edges . in total , since @xmath123 , the algorithm augments @xmath124 .",
    "therefore , the algorithm augments @xmath56 edges in total .",
    "@xmath57    let t be a tree with @xmath69 vertices . algorithm @xmath81-@xmath70 precisely augments @xmath125 edges .",
    "we present a proof by case analysis based on the cardinality of the set @xmath83 generated by _",
    "algorithm 3 _ in _",
    "step 17_.    case 1 : : :    @xmath126 +    @xmath9 edges are augmented in _",
    "step 19 _ by forming a cycle    among leaves . in _",
    "steps 10 - 16 _ , we augment edges between the degree    two vertices and since @xmath127 ,    @xmath10 is even and    @xmath128 edges are augmented . in    total , we have augmented    @xmath129 edges , i.e. , we have    augmented    @xmath130    edges .",
    "case 2 : : :    @xmath131 .",
    "+    let @xmath132 . among @xmath10 degree",
    "two vertices , degree of @xmath133 vertices increases by    one in _ steps 10 - 16 _ , i.e. , @xmath134 edges are    augmented .",
    "note that @xmath135 edges are augmented    in _ step 21 _ , @xmath136 edges are augmented in _",
    ",    @xmath137 edges are augmented in _ steps 23 - 27_. in total , we    have augmented @xmath138    edges . since @xmath10 is even ,    @xmath139 .    therefore , @xmath140 edges are    augmented .",
    "case 3 : : :    @xmath141 .",
    "+    let @xmath132 . among @xmath10 degree",
    "two vertices , degree of @xmath133 vertices increases by    one in _ steps 10 - 16 _ i.e. , @xmath134 edges are    augmented in _ steps 10 - 16_. @xmath142 edges are    augmented in _",
    "step 29 _ , @xmath9 edges are augmented in _",
    "step    30 - 31 _ and a edge is augmented in _",
    "steps 32 - 36_. in total , we have    augmented @xmath143    edges .",
    "since @xmath144 is odd and @xmath133 is even ,    @xmath145    edges are augmented in total .",
    "thus , the algorithm augments @xmath56 edges .",
    "@xmath57    for a tree @xmath11 , the graph obtained from the algorithm @xmath70 is 3-connected .",
    "our claim is to prove that every minimal vertex separator is of size at least @xmath51 and there exist at least one vertex of degree @xmath51 . on the contrary ,",
    "assume that there exist at least one minimal vertex separator of size at most 2 , say @xmath146 .",
    "let @xmath147 be the cycle formed in _",
    "step 2 _ of _ algorithm 2 _ , where @xmath148 .",
    "case 1 : : :    @xmath149 .",
    "+    for every vertex @xmath150 ,    @xmath151 .",
    "hence , @xmath152 is    connected .",
    "case 2 : : :    @xmath153 .",
    "let    @xmath154 and    @xmath155 .",
    "+    case 2.1 : ; ;      @xmath156 . since @xmath157 is a      cycle ,",
    "@xmath152 is connected .",
    "case 2.2 : ; ;      @xmath158 or      @xmath159 +      for every internal vertex @xmath160 in the path      @xmath161 there      exist a vertex @xmath162 such that      @xmath163 and      @xmath164 by _ steps 3 - 12 _ of      _ algorithm 2_. thus , @xmath152 is connected .    in all the above cases , the graph @xmath152 is connected , which is a contradiction to the assumption that @xmath38 is a vertex separator .",
    "therefore , every minimal vertex separator of @xmath71 is of size at least 3 .",
    "note that by our augmentation procedure , @xmath165 . clearly , @xmath166 is a minimal vertex separator of size three .",
    "thus , the graph @xmath71 is 3-connected .",
    "@xmath57    for a tree @xmath11 , the graph obtained from the algorithm @xmath81-@xmath70 is 3-connected .",
    "it is enough to prove that the size of every minimal vertex separator is at least 3 and there exists at least one minimal vertex separator of size 3 . on the contrary ,",
    "assume that there exist at least one minimal vertex separator @xmath38 such that @xmath167 .",
    "let @xmath168 be the path formed in _",
    "steps 18 - 37 _ of _ algorithm 3 _ , where @xmath169 .",
    "case 1 : : :    @xmath170 .",
    "let @xmath171 .",
    "the    vertex @xmath172 can be a root node , @xmath4 , or a node    in the path , @xmath173 , or neither . by case analysis",
    ", we prove    that the graph @xmath152 is connected , which forms a    contradiction to the definition of @xmath38 .",
    "+    +    case 1.1 : ; ;      if @xmath174 , then since @xmath173 is the path      @xmath175 is connected .",
    "case 1.2 : ; ;      if @xmath176 , then , since @xmath177 ,      @xmath178 is connected , hence      @xmath175 is also connected .    case 1.3 : ; ;      if @xmath179 , then every      vertex @xmath180 has a path      @xmath181 such that @xmath182 and      every vertex @xmath183 , where      @xmath184 for some @xmath185 such      that @xmath186 exist in @xmath11 , has a path      @xmath187 such that @xmath188 .      thus , the graph @xmath152 is connected .",
    "case 2 : : :    if @xmath189 , say @xmath190 .",
    "@xmath38 can either be a clique or an independent set .",
    "if    @xmath38 is a clique then either the edge is from the tree    @xmath11 or from the augmentation set @xmath48 . in    each case",
    ", we prove that the graph @xmath152 is    connected , which is a contradiction to the definition of    @xmath38 .",
    "+    case 2.1 : ; ;      @xmath191 .",
    "+      * if either @xmath172 or @xmath21 is a root node .      without loss of generality ,",
    "let @xmath172 be the root node . by      the path @xmath173 in @xmath71 ,",
    "every pair of vertex      @xmath192 has a path connecting them in      @xmath152 .",
    "thus , the graph      @xmath152 is connected .      * if neither @xmath172 nor @xmath21 is a root node . in      @xmath152 ,",
    "for every vertex      @xmath193 , there exists a path      @xmath181 such that @xmath194      and for every vertex @xmath195 , where      @xmath184 for some @xmath185 such      that @xmath186 exist in @xmath11 , there exists a      path from @xmath187 such that      @xmath196 .",
    "since      @xmath197 and by the path @xmath173 in      @xmath71 , the graph @xmath152 is connected .",
    "case 2.2 : ; ;      @xmath198 .",
    "+      * if @xmath199 and @xmath200 then , the      graph @xmath201 is connected .",
    "thus , the graph      @xmath152 is connected .      * if either @xmath199 or @xmath200 .",
    "@xmath202 , assume that @xmath200 .      * * if @xmath203 for some      @xmath204 .",
    "+      since @xmath205 , every      internal vertex of @xmath206 in @xmath11      contributes degree 2 to the path @xmath206 and the      remaining degree to the vertices which does not belong to      @xmath207 ( by _ steps 10 - 37 _ ) . for every internal      vertex @xmath208 of @xmath11 ,",
    "there      exists a path from @xmath181 such that      @xmath194 . since      @xmath197 and by the path @xmath173 , the      graph @xmath152 is connected .",
    "* * if @xmath209 and @xmath210 for some      @xmath211 and @xmath212 .",
    "+      since @xmath200 , @xmath213 is      connected .",
    "for every internal vertex @xmath208      of @xmath11 , there exists a path from @xmath181      such that @xmath194 and for every internal      vertex @xmath214 of @xmath11 , where      @xmath184 for some @xmath185 such      that @xmath186 exist in @xmath11 , there exists a      path from @xmath187 .",
    "since      @xmath197 and by the path @xmath173 , the      graph @xmath152 is connected .      * if neither @xmath215 nor      @xmath216 .      * * if @xmath203 for some      @xmath204 .",
    "+      i.e. , the edge @xmath217 is augmented by the _ step 21 _      or the _ step 29_. thus , there exists an internal vertex      @xmath218 in @xmath11 and one of the      internal vertex in the path @xmath206 is adjacent to a      vertex in different branch , by the _",
    "steps 23 - 27 _ or by the _ steps      32 - 36_. for every internal vertex @xmath208 of      @xmath11 , there exists a path @xmath181 such that      @xmath194 , since if      @xmath219 then the vertex @xmath220 is      augmented to a vertex in different branch by the least degree two      vertex condition in _ step 11 _ and if @xmath221      then there exists a path from @xmath220 to a vertex in      different branch in @xmath11 . for every internal vertex      @xmath214 of @xmath11 , where      @xmath184 for some @xmath185 such      that @xmath186 exist in @xmath11 , there exists a      path @xmath187 . since @xmath197 and      by the path @xmath173 , the graph @xmath152      is connected .      * * if @xmath209 and @xmath210 for some      @xmath211 and @xmath212 .",
    "+      i.e. , the edge @xmath217 is augmented by the _ steps      10 - 16_. for every internal vertex @xmath208      ( @xmath222 ) , there exists a path      @xmath181 ( @xmath223 ) such that      @xmath194      ( @xmath224 ) and for every internal vertex      @xmath214 ( @xmath225 ) ,      where @xmath184 for some @xmath185      such that @xmath186 exist in @xmath11 , there      exists a path @xmath187 ( @xmath226 ) . since      @xmath197 and by the path @xmath173 , the      graph @xmath152 is connected .",
    "case 2.3 : ; ;      @xmath227 .",
    "+      * if @xmath174 or @xmath228 without loss of      generality , assume that @xmath174 . then      @xmath229 , @xmath230 .",
    "since , all the      degree one vertices are connected by a path @xmath173 , the      graph @xmath231 is connected .",
    "every internal      vertex @xmath232 of @xmath11 contributes      degree 2 to the path @xmath206 and remaining to the      vertices which are not in the path @xmath206 .",
    "thus , the      graph @xmath152 is connected .      * if @xmath203 for some      @xmath204 .",
    "similar argument as in _ case 2.2_.      * if @xmath209 and @xmath210 for some      @xmath211 and @xmath212 . similar      argument as in _ case 2.2_.    in all the above cases , the graph @xmath152 is connected , which is a contradiction to the fact that @xmath38 is a vertex separator .",
    "therefore , our assumption that there exists at least one minimal vertex separator in @xmath71 of size at most two is wrong .",
    "hence , every minimal vertex separator of @xmath71 is of size at least 3 .",
    "+ now , our claim is to prove that there exists at least one minimal vertex separator of size 3 . by _",
    "lemma 2 _ , the degree of every vertex in @xmath233 is 3 .",
    "the graph @xmath71 is 3-connected .",
    "@xmath57    for a tree @xmath11 , the graph @xmath71 obtained from _ algorithm 1 _ is 3-connected .",
    "further , @xmath71 is obtained from @xmath11 by augmenting a minimum set of edges .",
    "the lower bound for the tri - connectivity augmentation of trees is @xmath56 by _",
    "lemma 1_. if the tree @xmath11 is a path , _ algorithm 1 _ calls _ algorithm 2 _ , which converts the tree to a 3-connected graph @xmath71 by augmenting exactly @xmath56 edges ( by _ lemma 4 _ and _ lemma 6 _ ) .",
    "if the tree @xmath11 is a non - path tree , the _ algorithm 1 _ calls _ algorithm 3 _ , which converts the tree to a 3-connected graph @xmath71 by augmenting exactly @xmath56 edges ( by _ lemma 5 _ and _ lemma 7 _ ) . thus , for a tree @xmath11 the graph obtained from _",
    "algorithm 1 _ is 3-connected .",
    "further , @xmath71 is obtained by using a minimum connectivity augmentation set .",
    "therefore , the claim follows .",
    "@xmath57      let @xmath11 be a tree with the vertex set @xmath234 such that @xmath235 , with the edge set @xmath236 such that @xmath237 and @xmath238 be the number of leaves .",
    "the algorithm @xmath70 takes @xmath239 time in _ step 2 _ , @xmath240 time for _ steps 3 - 8 _ and @xmath239 time for _ steps 9 - 12 _ of _ algorithm 2_. thus , the algorithm @xmath70 takes @xmath240 time .    the algorithm @xmath81-@xmath70 : since , the level ordering can be implemented by the data structure @xmath241 , the _ step 3 _ takes @xmath240 time , takes @xmath242 time for _ steps 4 - 7 _ of _ algorithm 3 _ and @xmath240 time for the _ step 8_. we implement the data structure queue for the _ steps 8 - 16 _ , which is used to keep track of marked and unmarked vertices in @xmath65 .",
    "this process ends after visiting all vertices in @xmath11 and it takes @xmath243 time for _ steps 10 - 16 _ and the algorithm takes @xmath240 time for _ steps 18 - 38_. in total , the algorithm @xmath81-@xmath70 takes @xmath243 time .",
    "therefore , _ algorithm 1 _ takes @xmath243 time .",
    "thus , for a given tree , a minimum tri - connectivity augmentation set can be found in @xmath243 time .       ]      , title=\"fig : \" ] + , title=\"fig : \" ]",
    "in this paper , we have presented an algorithm for finding a minimum tri - connectivity augmentation set in trees .",
    "we believe that the approach can be extended to @xmath244-connected graph with the help of block trees , biconnected component trees proposed in @xcite .",
    "a logical extension of this work would be to look at @xmath4-connectivity augmentation of trees for any @xmath50 ."
  ],
  "abstract_text": [
    "<S> for a connected graph , a _ minimum vertex separator _ is a minimum set of vertices whose removal creates at least two connected components . </S>",
    "<S> the vertex connectivity of the graph refers to the size of the minimum vertex separator and a graph is @xmath0-vertex connected if its vertex connectivity is @xmath0 , @xmath1 . </S>",
    "<S> given a @xmath0-vertex connected graph @xmath2 , the combinatorial problem _ vertex connectivity augmentation _ asks for a minimum number of edges whose augmentation to @xmath2 makes the resulting graph @xmath3-vertex connected . in this paper </S>",
    "<S> , we initiate the study of @xmath4-vertex connectivity augmentation whose objective is to find a @xmath5-vertex connected graph by augmenting a minimum number of edges to a @xmath0-vertex connected graph , @xmath6 . </S>",
    "<S> we shall investigate this question for the special case when @xmath2 is a tree and @xmath7 . </S>",
    "<S> in particular , we present a polynomial - time algorithm to find a minimum set of edges whose augmentation to a tree makes it 3-vertex connected . using lower bound arguments , we show that any tri - vertex connectivity augmentation of trees requires at least @xmath8 edges , where @xmath9 and @xmath10 denote the number of degree one vertices and degree two vertices , respectively . </S>",
    "<S> further , we establish that our algorithm indeed augments this number , thus yielding an optimum algorithm . </S>"
  ]
}