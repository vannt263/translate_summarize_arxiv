{
  "article_text": [
    "a _ mixed graph _ is a graph that may contain both edges and arcs ( i.e. , directed edges ) .",
    "a mixed graph @xmath0 is _ strongly connected _ if for each ordered pair @xmath1 of vertices in @xmath0 there is a path from @xmath2 to @xmath3 that traverses each arc in its direction . in this paper",
    ", we will deal with simple mixed graphs and ( possibly non - simple ) directed multigraphs ( with multiple arcs between each pair of vertices ) .",
    "however , whenever we refer to the treewidth ( pathwidth , tree - depth ) of a graph , we mean the treewidth ( pathwidth , tree - depth ) of the underlying undirected graph .    in this paper",
    ", we study the following well - known problem .",
    "there is numerous literature on various algorithms and heuristics for mcpp ; for informative surveys , see @xcite .",
    "when @xmath4 , we call the problem the undirected chinese postman problem ( ucpp ) , and when @xmath5 , we call the problem the directed chinese postman problem ( dcpp ) .",
    "it is well - known that ucpp is polynomial - time solvable @xcite and so is dcpp @xcite , but mcpp is np - complete , even when @xmath0 is planar with each vertex having total degree @xmath6 and all edges and arcs having weight @xmath7 @xcite .",
    "it is therefore reasonable to believe that mcpp may become easier the closer it gets to ucpp or dcpp and indeed when parameterized by the number of edges in @xmath0 or the number of arcs in @xmath0 , mcpp is proved to be fixed - parameter tractable ( fpt , defined below ) by van bevern _",
    "_ @xcite and gutin , jones and sheng @xcite , respectively . in this paper",
    ", we consider structural parameterizations of mcpp .",
    "van bevern _",
    "_ @xcite noted that fernandes , lee and wakabayashi @xcite proved that mcpp parameterized by the treewidth of @xmath0 is in xp ( when all edges and arcs have weight @xmath7 ) , and asked whether this parameterization of mcpp is fpt .",
    "it is well - known that many graph problems are fpt when parameterized by the treewidth of the input graph ( only a few such problems are w[1]-hard ; see , e.g. , @xcite ) . in this paper , we show that somewhat unexpectedly the mcpp parameterized by treewidth belongs to a small minority of problems , i.e. , it is w[1]-hard . in fact , we prove a stronger result by ( i ) replacing treewidth with pathwidth , and ( ii ) assuming that all edges and arcs have weight @xmath7 .    to complement this , we show a positive result for the parameter tree - depth .",
    "we prove that mcpp parameterized by tree - depth is fpt .",
    "mcpp is unusual in this regard , as this is the first problem we are aware of which is fpt parameterized by tree - depth but w[1]-hard parameterized by treewidth .",
    "following @xcite , we assume that all weights equal 1 , however , we do not foresee any significant difficulty in generalizing our result to the weighted case .    our paper is organised as follows . in the rest of this section ,",
    "we provide some basics definitions on parameterized complexity as well as the definitions of treewidth , pathwidth and tree - depth . in section [ sec2 ]",
    ", we introduce an intermediate problem properly balanced subgraph ( pbs ) , and give a w[1]-hardness proof for a restricted variant of it . in section [ sec3 ] ,",
    "we reduce this variant of pbs into mcpp parameterized by pathwidth , showing that the latter is also w[1]-hard . in section [ sec4 ]",
    "we show that pbs is fpt with respect to tree - depth , as outlined above , and in section [ sec5 ] we reduce mcpp parameterized by tree - depth to pbs parameterized by tree - depth , showing that this parameterization of mcpp is fpt .",
    "we conclude the paper with section [ sec6 ] , where , in particular , we mention an open question from @xcite on another parameterization of mcpp .    for reasons of space , many proofs and figures are deferred to the appendix .",
    "[ [ parameterized - complexity . ] ] parameterized complexity .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + +    a _ parameterized problem _ is a subset @xmath8 over a finite alphabet @xmath9 .",
    "@xmath10 is _ fixed - parameter tractable ( fpt ) _ if the membership of an instance @xmath11 in @xmath10 can be decided in time @xmath12 ( called _ fpt time _ and the corresponding algorithm an _ fpt algorithm _ ) , and in xp if it can be decided in time @xmath13 , where @xmath14 is a computable function of the _ parameter _",
    "@xmath15 only .",
    "many parameterized problems are believed not to be fpt ; one of them is @xmath16-clique , clique parameterized by the number @xmath16 of vertices of the required clique . a problem with parameter @xmath15",
    "is called @xmath17$]-_hard _",
    "if @xmath16-clique can be reduced to it in fpt time with respect to @xmath16 such that @xmath15 is bounded by a computable function of @xmath16 .",
    "for more information on parameterized algorithms and complexity , see @xcite .",
    "[ [ treewidth - pathwidth - and - tree - depth . ] ] treewidth , pathwidth and tree - depth .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    for an undirected graph @xmath18 , a _ tree decomposition _ of @xmath0 is a pair @xmath19 , where @xmath20 is a tree and @xmath21 such that @xmath22 , for each edge @xmath23 there exists @xmath24 with @xmath25 , and for each @xmath26 the set of nodes @xmath27 forms a connected subtree in @xmath20 .",
    "the _ width _ of @xmath19 is @xmath28 .",
    "the _ treewidth _ of @xmath0 is the minimum width of all tree decompositions of @xmath0 .",
    "the _ pathwidth _ of a graph is the minimum width of all tree decompositions @xmath19 for which @xmath20 is a path .",
    "for a directed multigraph @xmath29 , we will use @xmath30 to denote the pathwidth of the underlying undirected graph of @xmath29 .",
    "the _ tree - depth _ of a connected graph @xmath0 is defined as follows .",
    "let @xmath31 be a rooted tree with vertex set @xmath32 , such that if @xmath33 is an edge in @xmath0 then @xmath2 is either an ancestor or a descendant of @xmath3 in @xmath31",
    ". then we say that _",
    "@xmath0 is embedded in @xmath31_. the _ depth _ of @xmath31 is the number of vertices in a longest path in @xmath31 from the root to a leaf .",
    "the _ tree - depth _ of @xmath0 is the minimum @xmath34 such that @xmath0 is embedded in a tree of depth @xmath34 .",
    "thus , for example , a star @xmath35 has tree - depth @xmath36 .",
    "a path of length @xmath37 has tree - depth @xmath38 .",
    "a graph of tree - depth @xmath15 has pathwidth at most @xmath15 .",
    "in this section , we introduce the problem properly balanced subgraph ( pbs ) , and show that it is w[1]-hard parameterized by pathwidth . in section [ sec4 ] , we will show that a special case of the problem with restricted weights is fixed - parameter tractable with respect to tree - depth .",
    "a directed multigraph is called _ balanced _ if the in - degree of each vertex coincides with its out - degree .",
    "double arc _ is a specified pair of arcs @xmath39 such that @xmath40 and @xmath41 have the same heads and tails .",
    "we will say that a subgraph @xmath42 of @xmath43 _ respects double arcs _ if @xmath44 for every double arc @xmath39 .",
    "that is , if @xmath42 uses one arc of a double arc then it must use both of them .",
    "a _ forbidden pair _ is a specified pair of arcs @xmath45 such that @xmath46 is the reverse of @xmath47 .",
    "we say that @xmath42 _ respects forbidden pairs _ if @xmath48 for every forbidden pair @xmath45 .",
    "that is , if @xmath42 uses one arc of a forbidden pair then it can not use the other .",
    "we will say that a subgraph @xmath42 of @xmath43 is _ properly balanced _ if @xmath42 is balanced and respects double arcs and forbidden pairs .",
    "pbs is then defined as follows .",
    "we now describe some simple gadget graphs ( for now we do not assign weights ; we will do this later ) .",
    "each gadget will have some number of _ input _ and _ output _ arcs .",
    "later , we will combine these gadgets by joining the input and output arcs of different gadgets together using double arcs . henceforth , for each positive integer @xmath37 , @xmath49=\\{1,2,\\ldots , n\\}$ ] .",
    "a _ duplication gadget _ has one input arc and @xmath34 output arcs , for some positive integer @xmath34 .",
    "the vertex set consists of vertices @xmath1 , and @xmath50 for each @xmath51 $ ] .",
    "the arcs form a cycle @xmath52 .",
    "the input arc is the arc @xmath33 , and the output arcs are the arcs @xmath53 for each @xmath51 $ ] .",
    "a _ choice gadget _ has one input arc @xmath33 and @xmath34 output arcs @xmath54 $ ] , for some positive integer @xmath34 .",
    "the vertex set consists of the vertices @xmath55 and @xmath56 for each @xmath51 $ ] .",
    "the arcs consist of a path @xmath57 , and the path @xmath58 for each @xmath51 $ ] .",
    "finally , a _ checksum gadget _ has @xmath59 _ left input _",
    "arcs @xmath60 $ ] for some positive integer @xmath59 , and @xmath61 _ right input _",
    "arcs @xmath62 $ ] , and no output arcs .",
    "the vertex set consists of the vertices @xmath63 together with @xmath64 for each @xmath65 $ ] and @xmath56 for each @xmath66 $ ] . the arc set consists of the path @xmath67 for each @xmath65 $ ] , and @xmath58 for each @xmath66 $ ] .",
    "proposition [ prop : gadgets ] below is easy to prove and thus its proof is omitted .",
    "[ prop : gadgets ] let @xmath43 be one of the gadgets described above , and let @xmath42 be a properly balanced subgraph of @xmath43 . then if @xmath42 does not contain any input arcs of @xmath43 , it does not contain any other arcs of @xmath43 .",
    "otherwise : if @xmath43 is a duplication gadget , then @xmath42 contains every output arc of @xmath43 ; if @xmath43 is a choice gadget , then @xmath42 contains exactly one output arc of @xmath43 ; and if @xmath43 is a checksum gadget , then @xmath42 contains the same number of left input arcs as right input arcs of @xmath43 .",
    "furthermore , for any choice of input and output arcs satisfying these conditions , there is subgraph @xmath42 containing exactly those input and output arcs .",
    "observe that in all of our gadgets , the vertices in input or output arcs all have in - degree and out - degree @xmath7 .",
    "we next describe how to combine these gadgets . for two unjoined arcs @xmath68 and @xmath33 ( possibly in disjoint graphs ) , the operation of _ joining _ @xmath68 and @xmath33 is as follows : identify @xmath69 and @xmath2 , and identify @xmath70 and @xmath3 .",
    "keep both @xmath68 and @xmath33 , and add @xmath71 as a double arc .",
    "[ lem : joincorrectness ] let @xmath72 and @xmath73 be disjoint directed multigraphs .",
    "let @xmath74 be arcs in @xmath72 , and let @xmath75 be arcs in @xmath73 , such that @xmath76 and @xmath77 both have in - degree and out - degree @xmath7 in @xmath72 , and @xmath78 and @xmath79 both have in - degree and out - degree @xmath7 in @xmath73 , for each @xmath51 $ ] .",
    "let @xmath43 be the graph formed by joining @xmath53 and @xmath80 , for each @xmath51 $ ] .",
    "then a subgraph @xmath42 of @xmath43 is a properly balanced graph if and only if ( 1 ) @xmath81 for each @xmath51 $ ] ; and ( 2 ) @xmath42 restricted to @xmath72 is a properly balanced subgraph of @xmath72 , and @xmath42 restricted to @xmath73 is a properly balanced subgraph of @xmath73 .      by joining an output arc of one gadget to the input arc of another gadget , we have that a solution will only pass through the second gadget if it uses the corresponding arc of the first gadget . thus for example , if a duplication gadget has @xmath15 output arcs , each of which is joined to the input arc of a choice gadget , then any solution that uses the input arc of the duplication gadget has to use exactly one output arc from each of the choice gadgets . by combining gadgets in this way",
    ", we can create  circuits \" that represent instances of other problems .",
    "we will use this idea to represent the following w[1]-hard problem . in @xmath15-multicolored clique",
    ", we are given a graph @xmath82 , such that for each @xmath83 $ ] , @xmath84 forms an independent set , and asked to decide whether @xmath0 contains a clique with @xmath15 vertices , where @xmath15 is the parameter .",
    "@xcite @xmath15-multicolored clique is w[1]-hard .",
    "[ thm : mbsdahardness ] pbs is w[1]-hard parameterized by pathwidth , even when there are no forbidden arcs , there is a single arc @xmath85 of weight @xmath86 and @xmath85 is not part of a double arc , and all other arcs have weight @xmath87 .",
    "we give a sketch of the proof ( for a full proof , see the appendix ) :    let @xmath88 be an instance of @xmath15-multicolored clique .",
    "we construct an equivalent instance of pbs as follows .",
    "initially we have a duplication gadget with @xmath15 output arcs , whose input arc is the only arc of weight @xmath86 .",
    "all other arcs will have weight @xmath87 .",
    "thus , any solution to the pbs instance will have to use this duplication gadget and all its output arcs .",
    "then for each @xmath83 $ ] , we choose a vertex @xmath89 ( represented by a choice gadget with @xmath90 output arcs , whose input arc is joined to the initial duplication gadget ) . for each choice of @xmath77 , and for each @xmath91 \\setminus \\{i\\}$ ] ( enforced by a duplication gadget with @xmath92 output arcs )",
    ", we then choose an edge @xmath93 that is adjacent to @xmath77 and a vertex in @xmath94 ( represented by a choice gadget with @xmath95 output arcs ) .",
    "the graph so far looks like a `` tree '' of gadgets , and as such has bounded treewidth .",
    "is easy to show that it also has bounded pathwidth .",
    "it enforces that we choose a set of vertices @xmath96 , and then an edge @xmath93 for each ordered pair @xmath97 .",
    "( each possible choice for @xmath93 is represented by one output arc on the last layer of choice gadgets ) .",
    "now observe that @xmath96 forms a clique if and only if there are choices of @xmath93 such that @xmath98 for each @xmath99 .",
    "we can check for this condition as follows .",
    "firstly , we associate each edge @xmath100 with a unique number @xmath101 .",
    "then , for each output arc corresponding to the edge @xmath100 , we join that arc to a duplication gadget with @xmath101 output arcs .",
    "( this increases the pathwidth of the graph by a constant ) .",
    "then for each unordered pair @xmath102 , we create a checksum gadget @xmath103 .",
    "the left input arcs of this gadget are joined to all the output arcs of all duplication gadgets corresponding to a choice for @xmath93 , and the right input arcs are joined to all the output arcs of all duplication gadgets corresponding to a choice for @xmath104 .",
    "this completes the construction of the graph .",
    "it follows that for any solution to the pbs instance , the number of left input arcs of @xmath103 in the solution is equal to the number associated with the edge chosen for @xmath93 .",
    "similarly the number of right input arcs in the solution is equal to the number associated with the edge chosen for @xmath105 .",
    "as these numbers have to be equal , it follows that there is a solution if and only if the choice for @xmath93 is the same as the choice for @xmath104 for each @xmath106 .",
    "thus , our pbs instance has a solution of negative weight if and only if @xmath0 has a clique .",
    "it remains to check the pathwdith of the graph .    before the addition of the checksum gadgets , the graph has pathwdith bounded by a constant .",
    "as the input arcs of these gadgets are joined to other arcs , adding the checsum gadgets only requires adding @xmath36 vertices for each @xmath99 .",
    "thus , the pathwdith of the constructed graph is @xmath107 .",
    "we now show how to reduce an instance of pbs , of the structure given in theorem  [ thm : mbsdahardness ] , to mcpp .",
    "let ( @xmath108\\ } , y=\\emptyset$ ] ) be an instance of pbs with double arcs @xmath109 and no forbidden pairs , and where @xmath110 for a single arc @xmath85 and @xmath111 for every other arc .",
    "we may assume that @xmath85 is not in a double arc .",
    "we will produce an instance @xmath0 of mcpp and an integer @xmath112 , such that @xmath0 has a solution of weight @xmath112 , and @xmath0 has a solution of weight less than @xmath112 if and only if our instance of pbs has a solution with negative weight .",
    "all edges and arcs in our mcpp instance will have weight @xmath7 .",
    "we derive @xmath0 by replacing every subgraph of @xmath43 between a pair of vertices ( either a double arc , a single arc of weight @xmath87 , or a single arc of weight @xmath86 ) by an appropriate gadget .",
    "the gadgets will be such that within each gadget , there are only two mcpp solutions of reasonable weight : a solution that is balanced within the gadget ( corresponding to not using the original arc / double arc in a solution to @xmath43 ) ; and a solution that is imbalanced at the vertices by the same amount that the original arc / double arc is ( which corresponds to using the original arc / double arc in a solution to @xmath43 ) .",
    "thus , every properly balanced subgraph of @xmath43 corresponds to a balanced subgraph of @xmath0 , and vice versa .    for each gadget , except the gadget corresponding to the negative weight arc , the weights of the two solutions will be the same . in the case of the negative weight arc ,",
    "the solution that correponds to using te arc will be cheaper by @xmath7 .",
    "thus , there are two possible weights for a solution to @xmath0 , and the cheaper weight is only possible if @xmath43 has a properly balanced subgraph of negative weight .    in what follows , we will construct arcs and edges of two weights , _ standard _ and _ heavy_. standard arcs and edges have weight 1 ; heavy arcs and edges have weight @xmath113 , where @xmath113 is a large enough number that we may assume that no solution traverses a heavy arc or edge more than once .",
    "this will be useful to impose structure on the possible solutions when constructing gadgets .",
    "a heavy arc ( edge ) is equivalent to a directed ( undirected ) path of length @xmath113 , and so we also show w[1]-hardness for the unweighted case .    the gadgets are constructed as follows .",
    "it is straightforward to verify that each gadget has only two solutions that traverse each arc or edge exactly once , and that the imbalances and weights of these solutions are as described above .",
    "( for a full proof , see the appendix . )    * for an arc @xmath68 of weight @xmath87 that is not part of a double arc : * construct gadget(@xmath114 ) by creating a new vertex @xmath115 , with standard arcs @xmath116 and @xmath117 , two heavy arcs @xmath118 , and a heavy arc @xmath119 .",
    "* for an arc @xmath68 of weight @xmath86 that is not part of a double arc : * construct gadget(@xmath114 ) by adding two new vertices @xmath120 and @xmath115 , with standard arcs @xmath121 and @xmath122 , two heavy arcs @xmath118 , one heavy arc @xmath123 , and two heavy arcs @xmath124 .",
    "* for a double arc from @xmath69 to @xmath70 : * gadget(@xmath114 ) consists of a heavy arc @xmath68 and a heavy edge @xmath125 . assuming a solution traverses each heavy arc / edge exactly once , the only thing to decide is in which direction to traverse the undirected edge .",
    "we note that each of our gadgets has pathwidth bounded by a constant .",
    "it can be shown that replacing the arcs of @xmath43 with gadgets in this way will only increase the pathwdith by a constant .",
    "we now have that , given an instance @xmath126 of pbs of the type specified in theorem [ thm : mbsdahardness ] , we can in polynomial time create an equivalent instance @xmath0 of mcpp with pathwidth bounded by @xmath127 .",
    "we therefore have a parameterized reduction from this restriction of pbs , parameterized by pathwidth , to mcpp parameterized by pathwidth . as this restriction of pbs",
    "is w[1]-hard by theorem [ thm : mbsdahardness ] , we have the following theorem .",
    "[ thm : mcpptreewidthhardness ] mcpp is w[1]-hard parameterized by pathwidth .",
    "in this section we show that a certain restriction of pbs is fixed - parameter tractable with respect to tree - depth .",
    "the restriction we require is that all arcs in double arcs have weight @xmath87 , all arcs in forbidden pairs have weight @xmath86 , and all other arcs have weight @xmath7 or @xmath86 .",
    "we choose this restriction , as this is the version of pbs that we get when we reduce from mcpp .    aside from the familiar tool of courcelle s theorem ( cf .",
    "@xcite ) , our main technical tool is lemma [ lem : subgraphbound ] , which shows that we may assume there exists a solution with size bounded by a function of tree - depth",
    ". the following simple observation will be useful in the proof of lemma  [ lem : subgraphbound ] .",
    "[ lem : combiningimbalances ] let @xmath128 be a family of pairwise arc - disjoint subgraphs of @xmath0 , such that each @xmath129 respects double arcs .",
    "then @xmath130 is a properly balanced subgraph of @xmath0 if and only if @xmath29 is balanced and @xmath29 respects forbidden pairs .",
    "we are now ready to prove that any properly balanced subgraph decomposes into properly balanced subgraphs of size bounded by a function of tree - depth .",
    "this will allow us to assume , in theorem [ thm : balancedsubgraphfpt ] , that a solution has bounded size .",
    "[ lem : subgraphbound ] let @xmath0 be a directed multigraph ( with double arcs and forbidden pairs ) of tree - depth @xmath15 , and let @xmath29 be a properly balanced subgraph of @xmath0 . then @xmath29 is a union of pairwise arc - disjoint graphs @xmath129 , each of which is a properly balanced subgraph of @xmath0 , with @xmath131 where @xmath132 .",
    "we prove the claim by induction on the tree - depth @xmath15 . for the base case , observe that if @xmath133 then @xmath0 has no arcs , and the claim is trivially true .",
    "so now assume that @xmath134 , and that the claim holds for all graphs of tree - depth less than @xmath15 .",
    "we also assume that @xmath29 is 2-connected , as otherwise a block decomposition of @xmath29 is a decomposition into properly balanced subgraphs , and we may apply our result to each block of @xmath29 . similarly ,",
    "if @xmath0 is not 2-connected but @xmath29 is , then @xmath29 lies inside one block of @xmath0 , and we may restrict our attention to this block . hence assume that @xmath0 is 2-connected as well .",
    "let @xmath0 be embedded in a tree @xmath31 of depth @xmath15 , and let @xmath2 be the root of @xmath31 .",
    "observe that @xmath2 has only one child in @xmath31 , as otherwise @xmath2 is a cut - vertex in @xmath0 .",
    "let @xmath3 be this child , and let @xmath135 be the multigraph derived from @xmath0 by identifying @xmath2 and @xmath3 .",
    "similarly , let @xmath136 be the subgraph of @xmath135 derived from @xmath29 by identifying @xmath2 and @xmath3 .",
    "observe that @xmath136 is balanced as @xmath29 is balanced and so the number of arcs into @xmath137 equals the number of arcs out of it .",
    "let @xmath138 be the set of arcs in @xmath29 between @xmath2 and @xmath3 , and observe that there is a one - to - one correspondence between the arcs of @xmath136 and the arcs of @xmath29 not in @xmath138 . by identifying @xmath2 and @xmath3 in @xmath31",
    ", we get that @xmath135 has tree - depth at most @xmath92 .    by the induction hypothesis",
    ", @xmath136 can be partitioned into a family @xmath139 of pairwise arc - disjoint properly balanced subgraphs of @xmath135 , each having at most @xmath140 arcs . for each @xmath141 , let @xmath142 be the subgraph of @xmath0 corresponding to @xmath143 .",
    "observe that @xmath138 can also be partitioned into a family @xmath144 of subgraphs with at most @xmath36 arcs , that respect double arcs ( we add any double arc from @xmath138 as a subgraph @xmath142 , and add every other arc as a single - arc subgraph ) .    letting @xmath145 , we have that @xmath146 is a partition of @xmath29 , each @xmath142 has at most @xmath140 arcs , and each @xmath142 respects double arcs and is balanced everywhere except possibly at @xmath2 and @xmath3 .",
    "we now combine sets of these subgraphs into subgraphs that are balanced everywhere .    for each @xmath147 ,",
    "let @xmath148 be the imbalance of @xmath142 at @xmath2 , i.e. @xmath149 .",
    "observe that @xmath150 for each @xmath151 and , as @xmath29 is balanced , @xmath152 .",
    "we now show that there exists a subset @xmath153 such that @xmath154 and @xmath155 to see this , let @xmath156 be a set containing a single @xmath148 , of minimum absolute value , and iteratively construct sets @xmath157 by adding @xmath151 such that @xmath158 to @xmath159 if @xmath160 , and adding @xmath151 such that @xmath161 otherwise .",
    "now note that either @xmath162 for every @xmath147 , in which case we have a subset @xmath163 with @xmath164 , or @xmath165 for each @xmath166 , and therefore there are at most @xmath167 possible values that @xmath168 can take .",
    "then there exist @xmath169 such that @xmath170 , @xmath171 , and @xmath172 .",
    "so let @xmath173 .",
    "now let @xmath174 .",
    "then by construction , @xmath175 is balanced at every vertex ( as it is balanced for every vertex other than @xmath3 , and a directed multigraph graph can not be imbalanced at a single vertex ) , and @xmath175 respects double arcs . as @xmath175 is a subgraph of @xmath29",
    ", @xmath175 also respects forbidden pairs .",
    "therefore @xmath175 is a properly balanced subgraph , with number of arcs at most @xmath176 . observe that @xmath177 is a solution to the recursion @xmath178 with @xmath179 .",
    "thus , @xmath175 has at most @xmath180 arcs , as required .    by applying a similar argument to @xmath181",
    ", we get a properly balanced subgraph @xmath182 with at most @xmath183 arcs . repeating this process",
    ", we get a partition of @xmath29 into properly balanced subgraphs each with at most @xmath183 arcs .    using lemma [ lem : subgraphbound ]",
    ", we may now assume that if @xmath0 has a properly balanced subgraph with negative weight , then it has a properly balanced subgraph of negative weight with at most @xmath183 arcs ( as any negative weight properly balanced subgraph can be partitioned into properly balanced subgraphs of at most @xmath183 arcs , at least one of which must have negative weight ) .      as the tree - depth of @xmath0 is at most @xmath15 , it follows that it has pathwidth at most @xmath92 @xcite .",
    "using this fact , and the fact that we may assume that a solution has at most @xmath183 arcs , we have the following :    [ thm : balancedsubgraphfpt ] pbs is fpt with respect to tree - depth , provided that all arcs in double arcs have weight @xmath87 , all arcs in forbidden pairs have weight @xmath86 , and all other arcs have weight @xmath7 or @xmath86 .",
    "let @xmath43 be an instance of pbs and let @xmath15 be the tree - depth of @xmath43 .",
    "by lemma [ lem : subgraphbound ] , we may assume that a solution has at most @xmath183 arcs .",
    "we will prove the theorem by guessing all possible solutions @xmath42 ( up to isomorphism ) , and then checking whether @xmath42 is isomorphic to a subgraph of @xmath43 using courcelle s theorem .",
    "first , we assign each arc @xmath40 of @xmath43 the label double if @xmath40 is in a double arc , the label forbidden if @xmath40 is in a forbidden pair , and otherwise the label negative if @xmath40 has weight @xmath86 and positive if @xmath40 has weight @xmath7 .",
    "next , enumerate all balanced directed multigraphs @xmath42 with at most @xmath183 arcs , together with all possible labelings @xmath184 .",
    "this can be done in time @xmath185 .",
    "for each constructed directed multigraph @xmath42 , we first check whether @xmath42 would be a properly balanced subgraph of @xmath43 , if it existed as a subgraph of @xmath43",
    ". this can be done by checking , for each pair of vertices , that @xmath42 has at most one arc labelled forbidden , and either @xmath87 or @xmath36 arcs ( in the same direction ) labelled double .",
    "if @xmath42 is not a properly balanced subgraph , we disregard it .",
    "otherwise , we then check whether @xmath42 has negative weight .",
    "( this can be done by checking that the number of negative and forbidden arcs is greater than the number of positive arcs . )",
    "if @xmath42 has negative weight , it remains to check whether @xmath42 is isomorphic to a subgraph of @xmath43 ( respecting the labels ) .",
    "as @xmath43 has treewidth at most @xmath15 and @xmath42 has at most @xmath183 vertices , this can be done in fixed - parameter time by courcelle s theorem ( see theorem 11.37 in @xcite ) .",
    "in this section , we consider mcpp with all weights equal 1 parameterized by tree - depth .",
    "in contrast to pathwidth , we will show that mcpp parameterized by tree - depth is fpt .",
    "hereinafter , @xmath186 denotes the imbalance of @xmath29 , i.e. @xmath187 . in the problem comp - mcpp , we are given an instance of mcpp together with a solution @xmath29 , and asked to find a solution @xmath136 of weight less than @xmath188 , if one exists . to solve an instance of mcpp",
    ", it would be enough to find some ( not necessarily optimal ) solution of weight @xmath113 , then repeatedly apply comp - mcpp to find better solutions , until we find a solution which can not be improved by comp - mcpp and is therefore optimal . as comp - mcpp returns an improved solution",
    "if one is available , we would have to apply comp - mcpp at most @xmath113 times .    to show that our approach leads to an fpt algorithm for mcpp , we first show that we may assume that @xmath113 is bounded by an appropriate value .",
    "[ lem : naivecppbound ] given an instance @xmath189 of mcpp with @xmath190 arcs and edges , we can , in polynomial time , find closed walk of of @xmath0 that traverses each edge and arc at least once , if such a walk exists , and this walk traverses each arc at most @xmath191 times .    as with the hardness proof",
    ", we will use pbs as an intermediate problem .",
    "we now reduce comp - mcpp to pbs , in the following sense : for any input graph @xmath0 and initial solution @xmath29 , we produce a directed multigraph @xmath43 ( with double arcs and forbidden pairs ) , such that @xmath43 has a properly balanced subgraph of negative weight if and only if @xmath0 has a solution of weight less than @xmath188 .    for any adjacent vertices @xmath114 in @xmath0 , let @xmath192 be the subgraph of @xmath0 induced by @xmath125 , and similarly let @xmath193 be the subgraph of @xmath29 induced by @xmath125 .",
    "let @xmath194 .",
    "thus , we may assume that any improved solution has weight less than @xmath113 .",
    "by lemma [ lem : naivecppbound ] and the assumption that the weight of every arc and edge is 1 , we may assume @xmath195 .    for each edge and arc @xmath68 in @xmath0",
    ", we will produce a gadget @xmath196 , based on @xmath192 and @xmath193 and the value @xmath113 .",
    "the gadget @xmath196 is a directed multigraph , possibly containing double arcs or forbidden pairs , and by combining all the gadgets , we will get an instance @xmath43 of pbs .",
    "we now construct @xmath196 according to the following cases ( roughly speaking , a positive weight arc represents adding an arc in that direction , and a negative weight arc represents removing an arc in the opposite direction ) :    * if @xmath192 is an arc from @xmath69 to @xmath70 and @xmath193 traverses @xmath68 @xmath197 times : * then @xmath196 has @xmath198 arcs from @xmath70 to @xmath69 of weight @xmath86 , and @xmath199 arcs from @xmath69 to @xmath70 of weight @xmath7 .    *",
    "if @xmath192 is an edge between @xmath69 and @xmath70 , and @xmath193 traverses @xmath68 from @xmath69 to @xmath70 @xmath197 times , and from @xmath70 to @xmath69 @xmath87 times : * then @xmath196 has a double arc @xmath39 , where @xmath40 and @xmath41 are both arcs from @xmath70 to @xmath69 of weight @xmath87 .",
    "in addition , @xmath196 has @xmath198 arcs from @xmath70 to @xmath69 of weight @xmath86 , @xmath199 arcs from @xmath69 to @xmath70 of weight @xmath7 , and @xmath200 arcs from @xmath70 to @xmath69 of weight @xmath7 .    *",
    "if @xmath192 is an edge between @xmath69 and @xmath70 and @xmath193 traverses @xmath68 from @xmath69 to @xmath70 @xmath201 times , and from @xmath70 to @xmath69 @xmath202 times : * then we may assume @xmath203 , as otherwise we may remove a pair of arcs @xmath204 from @xmath29 and get a better solution to mcpp",
    ". then @xmath196 has @xmath200 arcs from @xmath69 to @xmath70 of weight @xmath7 , @xmath200 arcs from @xmath70 to @xmath69 of weight @xmath7 , and a forbidden pair @xmath39 , where @xmath40 is an arc from @xmath69 to @xmath70 , @xmath41 is an arc from @xmath70 to @xmath69 , and both @xmath40 and @xmath41 have weight @xmath86 .    [",
    "lem : changegadgets ] let @xmath68 be an edge or arc in @xmath0 , and let @xmath138 and @xmath112 be arbitrary integers such that @xmath205 .",
    "then the following are equivalent .    1 .",
    "[ condh ] there exists a graph @xmath206 with vertex set @xmath125 that covers @xmath192 , such that @xmath207 and @xmath208 ; 2 .",
    "[ condd ] @xmath196 has a subgraph @xmath209 which respects double arcs and forbidden pairs , such that @xmath210 and @xmath211 .",
    "note that in a graph @xmath212 with two vertices @xmath69 and @xmath70 , @xmath213 .",
    "thus , in addition to implying that @xmath214 , the claim also implies that @xmath215 .",
    "[ lem : mcpptopbscorrectness ] let @xmath43 be the directed multigraph derived from @xmath0 and @xmath29 by taking the vertex set @xmath32 and adding the gadget @xmath196 for every arc and edge @xmath68 in @xmath0 . then there exists a solution @xmath136 with weight less than @xmath29 if and only if @xmath43 has a properly balanced subgraph of weight less than @xmath87 .",
    "lemma [ lem : mcpptopbscorrectness ] implies that we have a parameterized reduction from comp - mcpp parameterized by tree - depth to pbs parameterized by tree - depth .",
    "then by theorem [ thm : balancedsubgraphfpt ] , we have the following theorem .",
    "[ thm : mcppfpt ] mcpp with all weights equal 1 is fpt with respect to tree - depth .",
    "in this paper , we proved that mcpp parameterized by pathwidth is w[1]-hard even if all edges and arcs of input graph @xmath0 have weight @xmath7 .",
    "this solves the second open question of van bevern _",
    "@xcite on parameterizations of mcpp ; the first being the parameterization by the number of arcs in @xmath0 , which was proved to be fpt in @xcite .",
    "we also showed that the unweighted version of mcpp is fpt with respect to tree - depth .",
    "this is the first problem we are aware of that has been shown to be w[1]-hard with respect to treewidth but fpt with respect to tree - depth .",
    "the pathwidth of a graph lies between its treewidth and tree - depth .",
    "the problem we studied is w[1]-hard with respect to both treewidth and pathwidth .",
    "it is an open question whether there is a natural parameterized problem which is w[1]-hard with respect to treewidth but fpt with respect to pathwidth .",
    "we call a vertex @xmath70 of @xmath0 _ even _ if the total number of arcs and edges incident to @xmath70 is even .",
    "another parameterization of mcpp in @xcite is motivated by the fact that if each vertex of @xmath0 is even , then mcpp is polynomial - time solvable @xcite .",
    "van bevern _",
    "@xcite ask whether mcpp parameterized by the number of non - even vertices is fpt .    * acknowledgement .",
    "* research of gg was supported by royal society wolfson research merit award",
    ".    10    e.  j. beltrami and l.  d. bodin .",
    "networks and vehicle routing for municipal waste collection . , 4(1):6594 , 1974 .",
    "h.  l. bodlaender , j.  r. gilbert , h.  hafsteinsson , and t.  kloks . approximating treewidth , pathwidth , frontsize , and shortest elimination tree .",
    ", 18(2):238255 , 1995 .",
    "p.  brucker .",
    "the chinese postman problem for mixed graphs .",
    ", lncs 100:354366 , 1981 .",
    "n.  christofides .",
    "the optimum traversal of a graph . , 1(6):719  732 , 1973 .",
    "m.  dom , d.  lokshtanov , s.  saurabh , and y.  villanger .",
    "capacitated domination and covering : a parameterized perspective . in _ proc .",
    "iwpec 2008 _ , 7891 , 2008 .",
    "r.  g. downey and m.  r. fellows . .",
    "springer , 2013 .",
    "j.  edmonds and e.  l. johnson .",
    "matching , euler tours and the chinese postman .",
    ", 5(1):88124 , 1973 .",
    "h.  a. eiselt , m.  gendreau , and g.  laporte .",
    "arc routing problems . i. the chinese postman problem .",
    ", 43:231242 , 1995 .",
    "m.  fellows , f.  fomin , d.  lokshtanov , f.  rosamond , s.  saurabh , s.  szeider , and c.  thomassen . on the complexity of some colorful problems parameterized by treewidth .",
    "( iandc ) 209(2):143153 , 2011 .",
    "m.  r. fellows , d.  hermelin , f.  rosamond , and s.  vialette . on the parameterized complexity of multiple - interval graph problems . , 410:5361 , 2009 .",
    "c.  g. fernandes , o.  lee , and y.  wakabayashi .",
    "minimum cycle cover and chinese postman problems on mixed graphs with bounded tree - width .",
    ", 157(2):272279 , 2009 .",
    "j.  flum and m.  grohe . .",
    "springer -verlag , 2006 .",
    "a. golovach , j.  kratochvil , and o.  suchy .",
    "parameterized complexity of generalized domination problems .",
    ", 160(6):780792 , 2012 .",
    "g.  gutin , m.  jones , and b.  sheng .",
    "parameterized complexity of the k - arc chinese postman problem . in _ proc .",
    "esa 2014 _ , 530541 , 2014 . c.  h. papadimitriou . on the complexity of edge traversing .",
    ", 23:544554 , 1976 .",
    "y.  peng .",
    "approximation algorithms for some postman problems over mixed graphs .",
    ", 8:7680 , 1989 .",
    "r.  van bevern , r.  niedermeier , m.  sorge , and m.  weller . .",
    "in _ arc routing : problems , methods and applications _ , siam , 2014 .",
    "we begin by giving figures for the choice and checksum gadgets described in section [ sec2 ] ( a duplication gadget is simply an even cycle with each even numbered arc being the input arc or an output arc ) .    at ( -1,4)(x)[city ]",
    "[ label = above : @xmath2 ] ; at ( -2.5,4)(y)[city ] [ label = above : @xmath3 ] edge[<- , very thick ] node[auto , above]input ( x ) ; at ( -4,2.5)(z)[city][label = left:@xmath218 edge[<- ] ( y ) ; at ( 0.5,2.5)(w)[city][label = right:@xmath219 edge [ - > ] ( x ) ;    at ( -6,0)(u1)[city][label = below:@xmath220 edge[<-](z ) ; at ( -4.5,0)(v1)[city][label = below:@xmath221 edge[<- , very thick ] node[auto , above ] output(u1 ) edge[->](w ) ; at ( -3,0)(u2)[city][label = below:@xmath222 edge[<-](z ) ; at ( -1.5,0)(v2)[city][label = below:@xmath223 edge[->](w ) edge[<- , very thick ] node[auto , above]output(u2 ) ;    at ( 0,0)(dots)@xmath224 ;    at ( 1.5,0)(ut)[city][label = below:@xmath225 edge[<-](z ) ; at ( 3,0)(vt)[city][label = below:@xmath226 edge[->](w ) edge[<- , very thick ] node[auto , above]output(ut ) ;    at(0,0)(w)[city ] [ label = below : @xmath219 ; at(0,2)(z)[city ] [ label = below : @xmath218 ;    at ( -6,4 ) ( x1)[city ] [ label = above : @xmath227 edge [ < - ] ( w ) ; at ( -5,4 ) ( y1)[city ] [ label = above : @xmath228 edge [ < - , very thick ] ( x1 ) edge [ - > ] ( z ) ;    at ( -4,4 ) ( dots ) @xmath224 ;    at ( -3,4 ) ( xtl)[city ] [ label = above : @xmath229 edge [ < - ] ( w ) ; at ( -2,4 ) ( ytl)[city ] [ label = above : @xmath230 edge [ < - , very thick ] ( xtl ) edge [ - > ] ( z ) ;    ( -6.5,3.5 ) rectangle ( -1.5,4.7 ) [ label = above : left input arcs ] ; at ( -4,5)left input arcs ;    at ( 2,4 ) ( u1)[city ] [ label = above : @xmath220 edge [ < - ] ( z ) ; at ( 3,4 ) ( v1)[city ] [ label = above : @xmath221 edge [ < - , very thick ] ( u1 ) edge [ - > ] ( w ) ;    at ( 4,4 ) ( dots ) @xmath224 ;    at ( 5,4 ) ( utr)[city ] [ label = above : @xmath231 edge [ < - ] ( z ) ; at ( 6,4 ) ( vtr)[city ] [ label = above : @xmath232 edge [ < - , very thick ] ( utr ) edge [ - > ] ( w ) ;    ( 1.5,3.5 ) rectangle ( 6.5,4.7 ) [ label = above : left input arcs ] ; at ( 4,5)right input arcs ;    recall proposition [ prop : gadgets ] :    we now give a proof of lemma [ lem : joincorrectness ] .",
    "suppose first that @xmath42 is a properly balanced subgraph of @xmath43 .",
    "the first condition holds by definition , since @xmath233 is a double arc in @xmath43 for each @xmath51 $ ] . for the second condition ,",
    "let @xmath234 be @xmath42 restricted to @xmath72 .",
    "it is clear that @xmath234 respects double and forbidden arcs in @xmath72 .",
    "furthermore , every vertex except @xmath76 or @xmath77 , @xmath51 $ ] , has the same in- and out - degree in @xmath234 as in @xmath42 , hence @xmath234 is balanced for these vertices . finally ,",
    "for a vertex @xmath76 or @xmath77 , @xmath51 $ ] , note that such a vertex has in- and out - degree 2 in @xmath43 , and by the double arc @xmath233 either both these arcs are used in @xmath42 , or neither . in both cases , we find that the restriction @xmath234 is balanced . hence @xmath234 is balanced at every vertex , and respects both double and forbidden arcs , i.e. , @xmath234 is a properly balanced subgraph of @xmath72 .",
    "an analogous argument holds for @xmath73 .",
    "conversely , suppose that @xmath81 for each @xmath51 $ ] , @xmath42 restricted to @xmath72 is a properly balanced subgraph of @xmath72 , and @xmath42 restricted to @xmath73 is a properly balanced subgraph of @xmath73 . then by construction @xmath42 respects double arcs and forbidden arcs .",
    "as @xmath235 partition the arcs of @xmath43 , and @xmath42 is balanced when restricted to either of these graphs , we have that @xmath42 is balanced .",
    "thus , @xmath42 is a properly balanced subgraph of @xmath43 , as required .",
    "the following technical lemma will also be useful in the proof of theorem [ thm : mbsdahardness ] .",
    "[ lem : joinpathwidth ] let @xmath236 be disjoint directed multigraphs , let @xmath237 be distinct arcs in @xmath42 , and let @xmath43 be a graph formed by joining the arc @xmath238 to an arc in @xmath239 , for each @xmath240 $ ]",
    ". then @xmath241 .",
    "consider a minimum width path decomposition of @xmath42 .",
    "for each @xmath240 $ ] , let @xmath78 be the bag in the path decomposition of @xmath42 that contains both vertices of @xmath238 ( if there is a choice of bags , let @xmath78 be the bag of smallest size ) .",
    "now replace @xmath78 with two identical bags @xmath242 , and in between @xmath243 and @xmath244 add a sequence of bags formed by taking a minimum width path decomposition of @xmath239 and adding all the vertices of @xmath78 to each bag . do this for each @xmath240 $ ] .",
    "the resulting decomposition is a path decomposition of @xmath43 . by construction and by choice of @xmath78 ,",
    "the width of this decomposition is at most @xmath245 .",
    "we are now ready to give a full proof of theorem [ thm : mbsdahardness ] .",
    "given an instance @xmath82 of @xmath15-multicolored clique , let @xmath246 be an arbitrary enumeration of the edges of @xmath247 .",
    "for each unordered pair @xmath248 $ ] with @xmath249 , let @xmath250 be the subset of edges in @xmath247 with one vertex in @xmath84 and the other in @xmath94 .",
    "note that any @xmath15-clique in @xmath0 will have exactly one edge from @xmath250 for each choice of @xmath251 .",
    "the structure of our pbs instance will force us to choose a vertex @xmath77 from each class @xmath84 , corresponding to the vertices of a @xmath15-clique .",
    "in addition , for each chosen vertex @xmath77 and each @xmath252 , we choose an edge @xmath253 between @xmath77 and @xmath94 .",
    "a set of @xmath107 checksum gadgets will ensure that for each @xmath106 , the chosen edges @xmath93 and @xmath104 must be the same .",
    "this ensures that @xmath77 and @xmath254 are adjacent for each @xmath106 , and that therefore the vertices @xmath255 form a clique .",
    "we build our pbs instance @xmath256 out of duplication , choice and checksum gadgets , as follows .",
    "let start be a duplication gadget with input arc @xmath85 , and @xmath15 output arcs .",
    "label each output arc with a different integer @xmath151 from @xmath257 $ ] .",
    "for each @xmath83 $ ] , let choosevertex@xmath258 be a choice gadget with @xmath90 output arcs . label each output arc with a different vertex @xmath70 from @xmath84 . join the input arc of choosevertex@xmath258 to the output arc of start with label @xmath151 .    for each @xmath83 , v \\in v_i$ ] , let assignvertex@xmath259",
    "be a duplication gadget with @xmath92 output arcs .",
    "label the output arcs with the integers from @xmath257\\setminus\\{i\\}$ ] . join the input arc of assignvertex@xmath259 to the output arc of choosevertex@xmath258 with label @xmath70 .    for each @xmath83 ,",
    "v \\in v_i , j \\in [ k ] \\setminus \\{i\\}$ ] let chooseedge@xmath260 be a choice gadget with @xmath261 output arcs .",
    "label each output arc with a different edge @xmath262 between @xmath70 and @xmath94 . join the input arc of chooseedge@xmath260 to the output arc of assignvertex@xmath259 with label @xmath263 .    for each @xmath83 ,",
    "v \\in v_i , j \\in [ k ] \\setminus \\{i\\}$ ] and edge @xmath262 between @xmath77 and @xmath94 , let assignedge@xmath264 be a duplication gadget with @xmath166 output arcs .",
    "label this whole set of output arcs as output@xmath265 .",
    "join the input arc of assignedge@xmath264 to the output arc of chooseedge@xmath260 with label @xmath262 .    finally , for each @xmath266 $ ] with @xmath267 , let checkedge@xmath99 be a checksum gadget with @xmath268 left input arcs and @xmath268 right input arcs .",
    "partition the left and right input arcs of checkedge@xmath99 as follows . for each @xmath269 , let input@xmath265 be a set of @xmath166 left input arcs , where @xmath70 is the endpoint of @xmath262 in @xmath84 . similarly , let input@xmath270 be a set of @xmath166 right input arcs , where @xmath69 is the endpoint of @xmath262 in @xmath94 .",
    "now , join each set of arcs of the form input@xmath265 to the set of arcs of the form output@xmath265 from the gadget assignedge@xmath265 .",
    "finally , we assign weights .",
    "let @xmath85 have weight @xmath86 and let all other arcs have weight @xmath87 .",
    "this concludes the construction of @xmath43 .",
    "observe that every output arc is joined to an input arc , and every input arc except @xmath85 is joined to an output arc .",
    "we now show that @xmath43 has a properly balanced subgraph of negative weight if and only if @xmath0 has a clique with @xmath15 vertices .",
    "observe that by repeated use of lemma [ lem : joincorrectness ] , a subgraph @xmath42 of @xmath43 is a properly balanced subgraph if and only if    * @xmath42 restricted to any gadget start , choosevertex@xmath258 , assignvertex@xmath259 , chooseedge@xmath260 , assignedge@xmath264 or checkedge@xmath99 is a properly balanced subgraph ; and * for each output arc @xmath40 that is joined to an input arc @xmath41 , @xmath40 is in @xmath42 if and only if @xmath41 is in @xmath42 .",
    "first suppose @xmath0 has a clique on @xmath15 vertices . by definition of @xmath0",
    ", this clique must have exactly one vertex from each class @xmath271 $ ] .",
    "for each @xmath83 $ ] , let @xmath77 be the vertex of @xmath84 that is in the clique .",
    "for each @xmath106 , let @xmath272 be the index such that @xmath273 is the edge between @xmath77 and @xmath254 .",
    "we will now describe a graph @xmath42 by describing its restriction to each gadget .",
    "the construction will be such that an output arc is in @xmath42 if and only if the input arc it is joined to is also in @xmath42 .",
    "refer to a gadget as _ passive _ if no arcs in it are contained in @xmath42 , and _ active _ otherwise ; further , for a choice gadget , say that it _ selects _ arc @xmath151 of the @xmath151th output arc is contained in @xmath42 .",
    "note by previous propositions that these options all correspond to restrictions of balanced subgraphs to @xmath42 .",
    "the graph @xmath42 is constructed as follows .",
    "the start gadget is active ; for every @xmath83 $ ] , the choosevertex@xmath258 gadget is active and selects the output arc labelled @xmath77 , and the assignvertex@xmath259 gadget is active for @xmath274 ; and for every @xmath83 $ ] and every @xmath91 \\setminus \\{i\\}$ ] , the gadget chooseedge@xmath260 with @xmath274 is active , selecting the output arc labelled @xmath273 , and the assignedge@xmath275 gadget is active for @xmath274 and @xmath276 .",
    "all other assignvertex , chooseedge and assignedge gadgets are passive .",
    "note that @xmath42 contains an arc set output@xmath264 if and only if @xmath274 and @xmath277 .    finally , for each @xmath266 $ ] with @xmath267 , let @xmath42 restricted to checkedge@xmath99 be a properly balanced subgraph containing the left input arcs from input@xmath278 , the right input arcs from input@xmath279 , and no other input arcs . as @xmath280 ,",
    "such a subgraph exists by proposition [ prop : gadgets ] .",
    "this concludes the construction of @xmath42 . as @xmath42 restricted to each gadget",
    "is a properly balanced subgraph , and an output arc is in @xmath42 if and only if the input arc it is joined to is in @xmath42 , we have that @xmath42 is a properly balanced subgraph of @xmath43 . as @xmath42 contains the arc @xmath85 of weight @xmath86 and all other arcs have weight @xmath87 , @xmath42 is a properly balanced subgraph with negative weight , as required .",
    "now for the converse , suppose that @xmath43 has a properly balanced subgraph @xmath42 of negative weight",
    ". then @xmath42 must contain @xmath85 , the input arc of start with weight @xmath86 . by proposition",
    "[ prop : gadgets ] , @xmath42 must contain all of the output arcs of start .",
    "thus for each @xmath83 $ ] , @xmath42 contains the input arc of choosevertex@xmath258 . by proposition [ prop : gadgets ]",
    ", @xmath42 contains exactly one output arc of choosevertex@xmath258 ; let @xmath89 be the unique vertex in @xmath0 such that @xmath42 restricted to choosevertex@xmath258 contains the output arc labelled @xmath77 .",
    "it now follows that for each @xmath83 , v \\in v_i$ ] , @xmath42 contains the input arc of assignvertex@xmath259 if and only if @xmath281 . then by proposition [ prop : gadgets ] , if @xmath281 then @xmath42 contains the all the output arcs of assignvertex@xmath259 , and otherwise @xmath42 contains none of the output arcs of assignvertex@xmath259 .",
    "it follows that for each @xmath83 , v \\in v_i , j \\in [ k ] \\setminus \\{i\\}$ ] , @xmath42 contains the input arc of chooseedge@xmath260 if and only if @xmath281 . if @xmath282 then by proposition [ prop : gadgets ] @xmath42 contains none of the output arcs of chooseedge@xmath260 . if @xmath281 , then again by proposition [ prop : gadgets ] @xmath42 contains exactly one output arc of chooseedge@xmath260 .",
    "so for each @xmath83 , j \\in [ k ] \\setminus \\{i\\}$ ] , let @xmath283 be the index such that @xmath42 contains the output arc of chooseedge@xmath284 labelled with @xmath285 .",
    "( later we will show that @xmath286 , implying that @xmath77 and @xmath254 are adjacent . )",
    "it now follows that for each @xmath83 , v \\in v_i , j \\in [ k ] \\setminus \\{i\\}$ ] and edge @xmath262 between @xmath77 and @xmath94 , @xmath42 contains the input arc of assignedge@xmath264 if and only @xmath281 and @xmath287 .",
    "furthermore by proposition [ prop : gadgets ] , @xmath42 contains the set of output arcs output@xmath264 if @xmath281 and @xmath287 , and otherwise @xmath42 contains none of the arcs from output@xmath264 .",
    "we now have that for each @xmath266 $ ] with @xmath267 , the left input arcs of checkedge@xmath99 in @xmath42 are exactly those in input@xmath288 , and the right input arcs of checkedge@xmath99 in @xmath42 are exactly those in input@xmath289 . by proposition [ prop : gadgets ] , we have that @xmath290 and so @xmath291 .",
    "it follows that @xmath285 and @xmath292 are the same edge , and that therefore this is an edge in @xmath0 between @xmath77 and @xmath254 .",
    "thus we have that @xmath255 form a clique in @xmath0 , as required .    .",
    "having showed that @xmath43 represents the instance of @xmath15-multicolored clique , it remains to show that @xmath43 satisfies the specified properties , that @xmath293 is bounded by a function of @xmath15 , and that it can be constructed in fixed - parameter time .",
    "we now address the properties of @xmath43 in turn .",
    "it is clear that there exists a single arc @xmath85 of weight @xmath86 , that @xmath85 is not part of a double arc , that all other arcs have weight @xmath87 , and that there are no forbidden pairs . to see that pathwidth",
    "is bounded , let @xmath294 be the graph derived from @xmath43 by deleting the vertices @xmath295 and @xmath296 from every checkedge gadget , along with incident arcs .",
    "( that is , @xmath294 is the graph we had before adding checkedge gadgets in the construction of @xmath43 . )",
    "we constructed @xmath294 by joining arcs in start to the input arcs of the choosevertex@xmath258 gadgets , then joining arcs of the resulting graph to the input arcs of the assignvertex@xmath259 gadgets , then joining arcs of the resulting graph to the input arcs of the chooseedge@xmath260 gadgets , then joining arcs of the resulting graph to the input arcs of the assignedge@xmath264 gadgets .",
    "observe that a duplication gadget can be turned into a path by the removal of one vertex , and choice and checksum gadgets can be turned into disjoint unions of paths by the removal of two vertices .",
    "therefore duplication gadgets have pathwidth @xmath36 , and choice and checksum gadgets have pathwidth @xmath6 . hence by repeated use of lemma [ lem : joinpathwidth ]",
    ", @xmath294 has pathwidth at most @xmath297 .",
    "there are @xmath298 checkedge gadgets , and therefore we can remove @xmath299 vertices from @xmath43 to get @xmath294 .",
    "it follows that @xmath43 has pathwidth at most @xmath300 ( as we can add the @xmath299 extra vertices to every bag in a path decomposition of @xmath294 ) .",
    "finally , it is clear that the reduction can be performed in polynomial time , as we construct a polynomial number of gadgets and each gadget can be constructed in polynomial time .",
    "thus we have provided a fixed - parameter time reduction from any instance of @xmath15-multicolor clique to an instance of pbs with the required properties and with pathwidth @xmath107 .",
    "this concludes the proof .",
    "we first describe the gadgets of section [ sec3 ] , and their solutions , in more detail .",
    "let ( @xmath108\\ } , y=\\emptyset$ ] ) be an instance of pbs with double arcs @xmath109 and no forbidden pairs , and where @xmath110 for a single arc @xmath85 and @xmath111 for every other arc .",
    "for each pair of vertices @xmath114 such that there is an arc from @xmath69 to @xmath70 in @xmath43 , we produce a gadget gadget(@xmath114 ) that contains @xmath114 and new vertices appearing in gadget(@xmath114 ) recall that we may assume that between any pair of vertices , there is either an arc of weight @xmath86 , an arc of weight @xmath87 , or a double arc with both arcs having weight @xmath87 .",
    "given a directed multigraph @xmath29 ( corresponding to part of a solution to an mcpp instance ) and a vertex @xmath70 , the _ imbalance _ of @xmath70 is @xmath301 .    at ( 0,0 ) ( u)[city ] [ label = above : @xmath69 ] ; at ( 3,0 ) ( v)[city ] [ label = above : @xmath70 ] edge[<- ] node[above ] @xmath87(u ) ; at ( 0,-2.4 ) ;    [ subfig : zeroarcoriginal ]    at ( 0,0 ) ( u)[city ] [ label = above right : @xmath69 ] ; at ( 2,0 ) ( zuv)[city ] [ label = above right:@xmath115 ] edge[->](u ) ; at ( 4,0 ) ( v)[city ] [ label = above right : @xmath70 ] edge[<-](zuv ) ; ( u ) to[out=90,in=100,looseness=3 ] ( zuv ) ; ( u ) to[out=270,in=260,looseness=3 ] ( zuv ) ; ( v ) to[out=90,in=80,looseness=3 ] ( zuv ) ; at ( 0,-2.4 ) ;    [ subfig : zeroarcgadget ]    at ( 0,0 ) ( u)[city ] [ label = right : @xmath69 ] ; at ( 2,0 ) ( zuv)[city ] [ label = above right:@xmath115 ] edge[- > , bend left = 50](u ) edge[- > , bend right = 50](u ) ; at ( 4,0 ) ( v)[city ] [ label = above right : @xmath70 ] edge[<-](zuv ) ; ( u ) to[out=90,in=100,looseness=3 ] ( zuv ) ; ( u ) to[out=270,in=260,looseness=3 ] ( zuv ) ; ( v ) to[out=90,in=80,looseness=3 ] ( zuv ) ; at ( 0,-2.4 ) ;    [ subfig : zeroarcpassive ]    at ( 0,0 ) ( u)[city ] [ label = above right : @xmath69 ] ; at ( 2,0 ) ( zuv)[city ] [ label = above right:@xmath115 ] edge[->](u ) ; at ( 4,0 ) ( v)[city ] [ label = above right : @xmath70 ] edge[<- , bend left = 50](zuv ) edge[<- , bend right = 50](zuv ) ; ( u ) to[out=90,in=100,looseness=3 ] ( zuv ) ; ( u ) to[out=270,in=260,looseness=3 ] ( zuv ) ; ( v ) to[out=90,in=80,looseness=3 ] ( zuv ) ; at ( 0,-2.4 ) ;    [ subfig : zeroarcactive ]    construct gadget(@xmath114 ) by creating a new vertex @xmath115 , with standard arcs @xmath116 and @xmath117 , two heavy arcs @xmath118 , and a heavy arc @xmath119 .",
    "( see figure [ fig : zeroarcgadget ] . )    for any solution in which each heavy arc is traversed exactly once , @xmath115 has in - degree exactly @xmath6 .",
    "the remaining arcs are the two out - arcs of @xmath115 , which must be traversed exactly three times between them .",
    "there are therefore two possible choices :    * * passive solution : * traverse @xmath116 twice and @xmath117 once . in this solution ,",
    "every vertex is balanced within gadget(@xmath114 ) and the cost is @xmath304 . *",
    "* active solution : * traverse @xmath116 once and @xmath117 twice . in this solution ,",
    "every vertex is balanced except for @xmath69 , which has imbalance @xmath7 , and @xmath70 , which has imbalance @xmath86 .",
    "the cost of this solution is also @xmath304 .",
    "observe that the difference between the weight of the passive and active solutions is @xmath87 , and the imbalance at @xmath69 and @xmath70 for the active solution is the same as in an arc from @xmath69 to @xmath70 .",
    "the total weight of gadget(@xmath114 ) is @xmath305 .    at ( 0,0 ) ( u)[city ] [ label = above : @xmath69 ] ; at ( 2,0 ) ( v)[city ] [ label = above : @xmath70 ] edge[<- ] node[above ] @xmath86(u ) ; at ( 0,-2.4 ) ;    [ subfig : negativearcoriginal ]    at ( 0,0 ) ( u)[city ] [ label = above right : @xmath69 ] ; at ( 2,0 ) ( zuv)[city ] [ label = above right:@xmath115 ] edge[->](u ) ; at ( 4,0 ) ( wuv)[city ] [ label = above right:@xmath120 ] edge[<-](zuv ) ; at ( 6,0 ) ( v)[city ] [ label = above right : @xmath70 ] edge[->](wuv ) ; ( u ) to[out=90,in=100,looseness=3 ] ( zuv ) ; ( u ) to[out=270,in=260,looseness=3 ] ( zuv ) ; ( wuv ) to[out=90,in=80,looseness=3 ] ( zuv ) ; ( wuv ) to[out=90,in=100,looseness=3 ] ( v ) ; ( wuv ) to[out=270,in=260,looseness=3 ] ( v ) ; at ( 0,-2.4 ) ;    [ subfig : negativearcgadget ]       at ( 0,0 ) ( u)[city ] [ label = right : @xmath69 ] ; at ( 1.5,0 ) ( zuv)[city ] [ label = above right:@xmath115 ] edge[- > , bend left = 50](u ) edge[- > , bend right=50](u ) ; at ( 3,0 ) ( wuv)[city ] [ label = right:@xmath120 ] edge[<-](zuv ) ; at ( 4.5,0 ) ( v)[city ] [ label = above right : @xmath70 ] edge[- > , bend right=50](wuv ) edge[- > , bend left=50](wuv ) ; ( u ) to[out=90,in=100,looseness=3 ] ( zuv ) ; ( u ) to[out=270,in=260,looseness=3 ] ( zuv ) ; ( wuv ) to[out=90,in=80,looseness=3 ] ( zuv ) ; ( wuv ) to[out=90,in=100,looseness=3 ] ( v ) ; ( wuv ) to[out=270,in=260,looseness=3 ] ( v ) ; at ( 0,-2.4 ) ;    [ subfig : negativearcpassive ]    at ( 0,0 ) ( u)[city ] [ label = above right : @xmath69 ] ; at ( 1.5,0 ) ( zuv)[city ] [ label = right:@xmath115 ] edge[->](u ) ; at ( 3,0 ) ( wuv)[city ] [ label = above right:@xmath120 ] edge[<- , bend left=50](zuv ) edge[<- , bend right=50](zuv ) ; at ( 4.5,0 ) ( v)[city ] [ label = above right : @xmath70 ] edge[->](wuv ) ; ( u ) to[out=90,in=100,looseness=3 ] ( zuv ) ; ( u ) to[out=270,in=260,looseness=3 ] ( zuv ) ; ( wuv ) to[out=90,in=80,looseness=3 ] ( zuv ) ; ( wuv ) to[out=90,in=100,looseness=3 ] ( v ) ; ( wuv ) to[out=270,in=260,looseness=3 ] ( v ) ; at ( 0,-2.4 ) ;    [ subfig : negativearcactive ]    * for an arc @xmath68 of weight @xmath86 that is not part of a double arc : * construct gadget(@xmath114 ) by adding two new vertices @xmath120 and @xmath115 , with standard arcs @xmath121 and @xmath122 , two heavy arcs @xmath118 , one heavy arc @xmath123 , and two heavy arcs @xmath124 .",
    "( see figure [ fig : negativearcgadget ] . )    for any solution in which each heavy arc is traversed exactly once , @xmath115 will have exactly @xmath6 in - arcs , and @xmath120 will have exactly @xmath6 out - arcs .",
    "it remains to decide how many times to use the arcs out of @xmath115 and into @xmath120 .",
    "there are two possible solutions :    * * passive solution : * traverse @xmath116 twice , @xmath306 once and @xmath122 twice . in this solution ,",
    "every vertex is balanced within gadget(@xmath114 ) and the cost is @xmath307 . *",
    "* active solution : * traverse @xmath115 once , @xmath306 twice and @xmath122 once . in this solution ,",
    "every vertex is balanced except for @xmath69 , which has imbalance @xmath7 , and @xmath70 , which has imbalance @xmath86 .",
    "the cost of this solution is @xmath308 .",
    "observe that the active solution costs @xmath7 less than the passive solution , and the imbalance at @xmath69 and @xmath70 for the active solution is again the same as in an arc from @xmath69 to @xmath70 .",
    "the weight of this gadget is @xmath309 .    at ( 0,0 ) ( u)[city ] [ label = above : @xmath69 ] ; at ( 2,0 ) ( v)[city ] [ label = above : @xmath70 ] edge[<- , bend left = 50 ] node[below ] @xmath87(u ) edge[<- , bend right = 50 ] node[above ] @xmath87(u ) ;    [ subfig : doublearcoriginal ]    at ( 0,0 ) ( u)[city ] [ label = above : @xmath69 ] ; at ( 2,0 ) ( v)[city ] [ label = above : @xmath70 ] edge[dotted , bend right = 50](u ) edge[<- , dashed , bend left = 50 ] ( u ) ;    [ subfig : doublearcgadget ]    at ( 0,0 ) ( u)[city ] [ label = above : @xmath69 ] ; at ( 2,0 ) ( v)[city ] [ label = above : @xmath70 ] edge[- > , dashed , bend right = 50 ] ( u ) edge[<- , dashed , bend left = 50 ] ( u ) ;    [ subfig : doublearcpassive ]    at ( 0,0 ) ( u)[city ] [ label = above : @xmath69 ] ; at ( 2,0 ) ( v)[city ] [ label = above : @xmath70 ] edge[<- , dashed , bend right = 50 ] ( u ) edge[<- , dashed , bend left = 50 ] ( u ) ;    [ subfig : doublearcactive ]    * for a double arc from @xmath69 to @xmath70 : * gadget(@xmath114 ) consists of a heavy arc @xmath68 and a heavy edge @xmath125 .",
    "( see figure [ fig : doublearcgadget ] . )",
    "assuming a solution traverses each heavy arc / edge exactly once , the only thing to decide is in which direction to traverse the undirected edge .",
    "thus there are two possible solutions :    * * passive solution : * traverse the edge from @xmath70 to @xmath69 . in this solution ,",
    "every vertex is balanced within gadget(@xmath114 ) and the cost is @xmath310 . *",
    "* active solution : * traverse the edge from @xmath69 to @xmath70 . in this solution ,",
    "every vertex is balanced except for @xmath69 , which has imbalance @xmath36 , and @xmath70 , which has imbalance @xmath311 .",
    "the cost of this solution is also @xmath310 .",
    "observe that the difference between the weight of the passive and active solutions is @xmath87 , and the imbalance at @xmath69 and @xmath70 for the active solution is the same as in a double arc from @xmath69 to @xmath70 .    the weight of this gadget is @xmath310 .    * removing heavy arcs and edges .",
    "* finally , we replace every heavy arc ( edge , respectively ) we just created , of weight @xmath113 , by a directed ( undirected ) path of length @xmath113 , where all internal vertices have degree two .",
    "note that in any minimal solution , each arc or edge in such a path will be traversed the same number of times ( if one edge in the path is traversed more times than its neighbor , then it must be traversed at least twice more , including at least once in each direction , and so the solution is not minimal ) .",
    "thus in the analysis , we may treat such a path as effectively being a single edge or arc of weight @xmath113 .    in the proof of theorem [ thm : mcpptreewidthhardness ] we will us the following technical lemma , whose proof is identical to that of lemma [ lem : joinpathwidth ] ( see section [ appendixa ] ) .",
    "[ lem : gadgetpathwidth ] let @xmath29 be a mixed multigraph , and @xmath0 the mixed multigraph derived by replacing each arc or double arc from @xmath69 to @xmath70 with a gadget @xmath192",
    ". then @xmath312 .",
    "we now give the full proof of theorem [ thm : mcpptreewidthhardness ] .",
    "let ( @xmath108\\ } , y=\\emptyset$ ] ) be an instance of pbs with double arcs @xmath109 and no forbidden pairs , and where @xmath110 for a single arc @xmath85 and @xmath111 for every other arc .",
    "let @xmath0 be the graph in which every arc / double arc in @xmath43 is replaced with its corresponding gadget .",
    "let @xmath313 be the number of arcs of weight 0 not in a double arc in @xmath43 . by theorem [ thm : mbsdahardness ]",
    ", we may assume there is only one arc of weight @xmath86 not in a double arc in @xmath43 .",
    "let @xmath314 be the number of double arcs in @xmath43 .",
    "if we use the passive solution for every gadget , then every vertex is balanced , every arc and edge is covered , and the total cost is @xmath315 . therefore this is an upper bound on the weight of a optimal solution .",
    "the total weight of the graph is @xmath316 .",
    "therefore , any minimal solution that does not traverse each heavy arc / edge exactly once will have weight at least @xmath317 .",
    "this is @xmath318 greater than the solution in which we use the passive solution for every gadget .",
    "so by setting @xmath113 to be @xmath319 , we may assume that the optimal solution traverses each heavy arc / edge exactly once .",
    "therefore we may assume that we use either the active or passive solution for each gadget .",
    "let @xmath320 , the cost of using the passive solution for each gadget .",
    "we now show that @xmath0 has a solution of weight less than @xmath112 if and only if @xmath43 has a solution of negative weight .",
    "suppose first that @xmath0 has a solution of weight less than @xmath112 .",
    "as discussed above , we may assume that every gadget is either given the active or passive solution .",
    "let @xmath321 be the vertices such that @xmath322 is the only arc in @xmath43 of weight @xmath86 .",
    "then gadget(@xmath321 ) is the only gadget for which one solution weighs less than the other .",
    "therefore we may assume gadget(@xmath321 ) is given the active solution .",
    "let @xmath42 be the subgraph of @xmath43 whose arc set is the set of all arcs whose corresponding gadget in @xmath0 has the active solution ( with both arcs in a double arc included if their gadget has the active solution , and neither if it has the passive solution ) .",
    "then @xmath42 contains @xmath322 and so @xmath43 has negative weight . by construction ,",
    "@xmath42 respects double arcs , and as there are no forbidden pairs @xmath42 trivially respects forbidden pairs .",
    "it remains to show that @xmath42 is balanced .    in our mcpp solution ,",
    "the imbalance of a vertex @xmath70 is equal to the sum of its imbalance in the active gadgets containing it .",
    "the imbalance of @xmath70 in an active gadget is @xmath323 if the gadget corresponds to a single out - arc of @xmath70 , @xmath86 if the gadget corresponds to a single in - arc of @xmath70 , @xmath324 if the gadget corresponds to a double arc starting at @xmath70 , and @xmath311 if the gadget corresponds to a double arc ending at @xmath70 .",
    "it follows that the imbalance of @xmath70 in our mcpp solution is equal to its imbalance in @xmath42 , then as our mcpp solution is balanced , @xmath42 is also balanced , as required .",
    "suppose on the other hand that @xmath43 has a solution @xmath42 of negative weight .",
    "construct a solution to mcpp on @xmath0 by assigning each gadget the active assignment if the corresponding arc / double - arc appears in @xmath42 , and the passive assignment otherwise .",
    "as @xmath43 has negative weight , it must use @xmath322 and so gadget(@xmath321 ) gets the active solution .",
    "it follows that the cost of this solution is @xmath325 .",
    "it is clear that every arc and edge is traversed at least once .",
    "as before , the imbalance of each vertex in this solution is equal to its imbalance in @xmath42",
    ". therefore this solution is balanced , and so corresponds to a closed walk , as required .",
    "we now show that @xmath0 has pathwidth bounded by a function of @xmath293 , the pathwidth of @xmath43 .",
    "observe that for each gadget gadget(@xmath114 ) in our construction of @xmath0 , gadget(@xmath114 ) can be turned into a disjoint union of paths by the removal of at most @xmath326 vertices , and therefore gadget(@xmath114 ) has pathwidth at most @xmath327 .",
    "furthermore , @xmath0 can be derived from @xmath43 by replacing each arc or double arc with a corresponding gadgets .",
    "it follows from lemma [ lem : gadgetpathwidth ] that @xmath0 has pathwidth at most @xmath328 .",
    "let @xmath190 be the number of arcs in @xmath43 .",
    "then @xmath0 is derived from @xmath43 by introducing at most @xmath190 gadgets , and each gadget has at most @xmath329 arcs .",
    "therefore @xmath0 can be constructed in @xmath330 time .",
    "we now have that , given an instance @xmath126 of pbs of the type specified in theorem [ thm : mbsdahardness ] , we can in polynomial time create an instance @xmath0 of mcpp with pathwidth bounded by @xmath331 .",
    "we therefore have a parameterized reduction from this restriction of pbs , parameterized by pathwidth , to mcpp parameterized by pathwidth . as this restriction of pbs",
    "is w[1]-hard by theorem [ thm : mbsdahardness ] , this completes the proof .",
    "* lemma [ lem : naivecppbound ] . *",
    "_ given an instance @xmath189 of mcpp with @xmath190 arcs and edges , we can , in polynomial time , find closed walk of of @xmath0 that traverses each edge and arc at least once , if such a walk exists , and this walk traverses each arc at most @xmath191 times . _    for each arc or edge @xmath40 in @xmath0",
    ", we will construct a closed walk @xmath332 that contains @xmath40 .",
    "if @xmath40 is an edge , we may let @xmath332 be a walk that traverses @xmath40 once in each direction .",
    "then this is a closed walk that traverses @xmath40 twice and traverses no other arcs or edges .",
    "if @xmath40 is an arc , let @xmath69 be the start vertex and @xmath70 the end vertex of @xmath40 . in polynomial time",
    ", find a simple walk from @xmath70 to @xmath69 .",
    "( if no such walk exists , then @xmath189 has no solution ) .",
    "adding @xmath333 to this walk , we have a closed walk that traverse @xmath40 once and each other edge or arc at most once . taking the union of walks @xmath332 for every edge and arc @xmath40",
    ", we get a walk that traverses each arc or edge @xmath40 at most @xmath191 times ( at most twice by @xmath332 , and at most once for all other walks ) .",
    "( [ condh ] ) @xmath335 ( [ condd ] ) : observe that @xmath336 . as @xmath206 covers @xmath192 , we have @xmath337 , and therefore @xmath338 . if @xmath339 , let @xmath209 have no arcs .",
    "if @xmath340 , let @xmath209 have @xmath112 positive weight arcs from @xmath69 to @xmath70 . if @xmath341 , let @xmath209 have @xmath342 negative weight arcs from @xmath70 to @xmath69 .",
    "observe that in each case @xmath209 is a subgraph of @xmath196 and satisfies condition [ condd ] .",
    "( [ condd ] ) @xmath335 ( [ condh ] ) : observe that by construction of @xmath196 , @xmath343 , and also observe that @xmath344 . if @xmath339 , then let @xmath345 and observe that @xmath206 satisfies condition [ condh ] . if @xmath340 , let @xmath206 be @xmath193 with the addition of @xmath112 extra arcs from @xmath69 to @xmath70 .",
    "then @xmath346 , and @xmath206 satisfies condition [ condh ] . if @xmath341 , let @xmath206 be @xmath193 with @xmath342 arcs from @xmath69 to @xmath70 removed . as @xmath347 , @xmath206 still has at least one arc from @xmath69 to @xmath70 and so covers @xmath192 , and condition [ condh ] is satisfied .    * if @xmath192 is an edge between @xmath69 and @xmath70 , and @xmath193 traverses @xmath68 @xmath197 times from @xmath69 to @xmath70 , and from @xmath70 to @xmath69 @xmath87 times : * then recall that @xmath196 has a double arc @xmath39 , where @xmath40 and @xmath41 are both arcs from @xmath70 to @xmath69 of weight @xmath87 .",
    "in addition , @xmath196 has @xmath198 arcs from @xmath70 to @xmath69 of weight @xmath86 , @xmath199 arcs from @xmath69 to @xmath70 of weight @xmath7 , and @xmath200 arcs from @xmath70 to @xmath69 of weight @xmath7 .",
    "( [ condh ] ) @xmath335 ( [ condd ] ) : let @xmath348 be the number of arcs from @xmath69 to @xmath70 in @xmath206 , and @xmath349 the number of arcs from @xmath70 to @xmath69 in @xmath206 . observe that @xmath350 and @xmath351 .    if @xmath352 , then @xmath353 and we have @xmath354 .",
    "if @xmath339 , then let @xmath209 have no arcs . if @xmath340 , then note that @xmath355 and let @xmath209 have @xmath112 positive weight arcs from @xmath69 to @xmath70 . if @xmath341 , then note that @xmath356 ( as otherwise @xmath206 does not cover @xmath68 ) and let @xmath209 have @xmath342 negative weight arcs from @xmath70 to @xmath69 .",
    "observe that in each case @xmath209 satisfies condition [ condd ] .    if @xmath357 , then @xmath358 and we have @xmath359 and @xmath360 .",
    "then let @xmath209 have all @xmath198 negative weight arcs from @xmath70 to @xmath69 , both arcs in the double arc from @xmath70 to @xmath69 , and @xmath361 positive weight arcs from @xmath70 to @xmath69 .",
    "observe that @xmath209 has weight @xmath362 and @xmath363 , and @xmath209 respects double arcs , and so @xmath209 satisfies condition [ condd ] .    if @xmath364 and @xmath365 , then if @xmath366 we may remove a pair of arcs @xmath204 from @xmath136 and get a better solution to mcpp .",
    "therefore we may assume @xmath367 and so @xmath368 and @xmath369 . if @xmath370 let @xmath209 contain @xmath371 negative weight arcs from @xmath70 to @xmath69 , and both arcs of the double arc from @xmath70 to @xmath69 .",
    "otherwise @xmath372 . in this case",
    ", let @xmath209 contain both arcs of the double arc from @xmath70 to @xmath69 , and one positive weight arc from @xmath69 to @xmath70 . in either case , @xmath209 has weight @xmath373 and @xmath374 , and @xmath209 respects double arcs , and so @xmath209 satisfies condition [ condd ] .",
    "( [ condd ] ) @xmath335 ( [ condh ] ) : let @xmath349 be the number of positive weight arcs from @xmath69 to @xmath70 in @xmath209 , @xmath348 the number of negative weight arcs from @xmath70 to @xmath69 in @xmath209 , and @xmath375 the number of positive weight arcs from @xmath70 to @xmath69 in @xmath209",
    ". then @xmath376 .",
    "suppose first that @xmath209 does not contain the double arc . then @xmath377 . if @xmath378 , then let @xmath206 be @xmath193 with @xmath375 arcs from @xmath70 to @xmath69 added .",
    "if @xmath379 , then let @xmath206 be @xmath193 with @xmath380 arcs from @xmath69 to @xmath70 added and @xmath375 arcs from @xmath70 to @xmath69 added . if @xmath381 , then let @xmath206 be @xmath193 with @xmath382 arcs from @xmath69 to @xmath70 removed and @xmath375 arcs from @xmath70 to @xmath69 added ( note that as @xmath383 , removing @xmath382 arcs from @xmath69 to @xmath70 still leaves @xmath68 covered ) . observe that in each case , @xmath206 satisfies condition [ condh ] .    now suppose that @xmath209 contains the double arc . then @xmath384 .",
    "if @xmath378 , then let @xmath206 be @xmath193 with one arc from @xmath69 to @xmath70 removed and @xmath385 arcs from @xmath70 to @xmath69 added .",
    "if @xmath379 , then let @xmath206 be @xmath193 with @xmath386 arcs from @xmath69 to @xmath70 added and @xmath385 arcs from @xmath70 to @xmath69 added .",
    "it @xmath381 , then let @xmath206 be @xmath193 with @xmath387 arcs from @xmath69 to @xmath70 removed and @xmath385 arcs from @xmath70 to @xmath69 added .",
    "observe that in each case , @xmath206 satisfies condition [ condh ] .    *",
    "if @xmath192 is an edge between @xmath69 and @xmath70 and @xmath193 traverses @xmath68 @xmath201 times from @xmath69 to @xmath70 , and @xmath202 times from @xmath70 to @xmath69 : * then recall that we may assume @xmath203 , and @xmath196 has a forbidden pair @xmath39 , where @xmath40 is an arc from @xmath69 to @xmath70 , @xmath41 is an arc from @xmath70 to @xmath69 , and both @xmath40 and @xmath41 have weight @xmath86 .",
    "in addition , @xmath196 has @xmath200 arcs from @xmath69 to @xmath70 of weight @xmath7 , and @xmath200 arcs from @xmath70 to @xmath69 of weight @xmath7 .",
    "( [ condh ] ) @xmath335 ( [ condd ] ) : if @xmath388 , then let @xmath209 have no arcs .",
    "otherwise , we may assume all arcs in @xmath206 are in the same direction ( as otherwise we may remove a pair of arcs @xmath389 to get a better solution ) .",
    "so assume that all arcs in @xmath206 are from @xmath69 to @xmath70 ( the other case is symmetric ) .",
    "let @xmath364 be the number of arcs from @xmath69 to @xmath70 in @xmath206",
    ". then @xmath390 and @xmath391 .",
    "then let @xmath209 contain the arc @xmath68 from the forbidden pair , together with @xmath392 positive weight arcs from @xmath69 to @xmath70 .",
    "observe that @xmath209 satisfies condition [ condd ] .",
    "( [ condd ] ) @xmath335 ( [ condh ] ) : let @xmath348 be the number of positive weight arcs from @xmath69 to @xmath70 in @xmath209 , and let @xmath349 be the number of positive weight arcs from @xmath70 to @xmath69 in @xmath209 .",
    "suppose first that @xmath209 does nt contain either arc from the forbidden pair . then @xmath393 and @xmath394 .",
    "then let @xmath206 be @xmath193 with @xmath348 arcs added from @xmath69 to @xmath70 and @xmath349 arcs added from @xmath70 to @xmath69 .",
    "observe that @xmath206 satisfies condition [ condh ] .",
    "so now suppose that @xmath42 contains one arc from the forbidden pair ; assume @xmath42 contains the arc @xmath68 ( the other case is symmetric ) . then @xmath395 and @xmath396 .",
    "then let @xmath206 be @xmath193 with @xmath348 arcs added from @xmath69 to @xmath70 , @xmath349 arcs added from @xmath70 to @xmath69 and one arc from @xmath70 to @xmath69 removed ( note that even if @xmath397 , removing the arc from @xmath70 to @xmath69 still leaves an arc from @xmath69 to @xmath70 covering @xmath68 ) .",
    "observe that @xmath206 satisfies condition [ condh ] .",
    "* lemma [ lem : mcpptopbscorrectness ] . *",
    "_ let @xmath43 be the directed multigraph derived from @xmath0 and @xmath29 by taking the vertex set @xmath32 and adding the gadget @xmath196 for every arc and edge @xmath68 in @xmath0 .",
    "then there exists a solution @xmath136 with weight less than @xmath29 if and only if @xmath43 has a properly balanced subgraph of weight less than @xmath87 .",
    "_    suppose first that @xmath136 is a solution with weight less than @xmath188 , and let @xmath206 be the subgraph of @xmath136 induced by @xmath125 , for every edge or arc @xmath68 in @xmath0 .",
    "for each edge and arc @xmath68 , let @xmath209 be the subgraph of @xmath196 corresponding to @xmath206 in the claim ( which exists as @xmath398 for each @xmath68 , which in turn implies @xmath399 for each @xmath68 ) .",
    "let @xmath42 be the union of all such @xmath209 .",
    "as each @xmath209 respects double arcs and forbidden pairs , so does @xmath42 . by lemma [ lem : changegadgets ]",
    ", the weight of @xmath42 is @xmath400 ( where the sums are taken over all edges and arcs @xmath68 ) .",
    "finally , for each vertex @xmath69 , the imbalance of @xmath42 at @xmath69 is @xmath401 ( where @xmath402 is the set of all edges or arcs containing @xmath69 ) .",
    "thus , @xmath42 is balanced .",
    "it follows that @xmath42 is a properly balanced subgraph of @xmath43 of negative weight , as required .",
    "conversely , suppose that @xmath42 is a properly balanced subgraph of @xmath43 with weight less than @xmath87 , and let @xmath209 be the subgraph of @xmath42 induced by @xmath125 , for every edge or arc @xmath68 in @xmath0 .",
    "for each edge and arc @xmath68 , let @xmath206 be the graph corresponding to @xmath209 in the claim .",
    "( to see that this exists , observe that for arc or edge @xmath40 such that @xmath403 it must be the case that @xmath404 , and so @xmath405 exists , which implies that @xmath406 .",
    "thus @xmath407 for all @xmath40 , and as @xmath408 , this implies that @xmath409 for all @xmath40 . )",
    "let @xmath136 be the union of all such @xmath206 . as each @xmath206 covers @xmath68",
    ", @xmath136 covers all edges and arcs of @xmath0 . by lemma [ lem : changegadgets ] ,",
    "the weight of @xmath136 is @xmath410 ( where the sums are taken over all edges and arcs @xmath68 ) .",
    "finally , for each vertex @xmath69 , the imbalance of @xmath136 at @xmath69 is @xmath411 ( where @xmath402 is the set of all edges or arcs containing @xmath69 ) .",
    "thus , @xmath136 is balanced .",
    "it follows that @xmath136 is a solution with weight less than @xmath188 , as required ."
  ],
  "abstract_text": [
    "<S> in the mixed chinese postman problem ( mcpp ) , given a weighted mixed graph @xmath0 ( @xmath0 may have both edges and arcs ) , our aim is to find a minimum weight closed walk traversing each edge and arc at least once . </S>",
    "<S> the mcpp parameterized by the number of edges in @xmath0 or the number of arcs in @xmath0 is fixed - parameter tractable as proved by van bevern _ </S>",
    "<S> et al . _ </S>",
    "<S> ( in press ) and gutin , jones and sheng ( esa 2014 ) , respectively . in this paper </S>",
    "<S> , we consider the unweighted version of mcpp . </S>",
    "<S> solving an open question of van bevern _ </S>",
    "<S> et al . _ </S>",
    "<S> ( in press ) , we show that somewhat unexpectedly mcpp parameterized by the ( undirected ) treewidth of @xmath0 is w[1]-hard . </S>",
    "<S> in fact , we prove that even the mcpp parameterized by the pathwidth of @xmath0 is w[1]-hard . on the positive side </S>",
    "<S> , we show that the unweighted version of mcpp parameterized by tree - depth is fixed - parameter tractable . </S>",
    "<S> we are unaware of any natural graph parameters between pathwidth and tree - depth and so our results provide a dichotomy of the complexity of mcpp . </S>",
    "<S> furthermore , we believe that mcpp is the first problem known to be w[1]-hard with respect to treewidth but fpt with respect to tree - depth . </S>"
  ]
}