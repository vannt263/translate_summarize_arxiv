{
  "article_text": [
    "after a successful experimental detection of bose - einstein condensates ( bec ) of dilute trapped bosonic alkali - metal atoms @xmath0li , @xmath1na , and @xmath2rb @xcite at ultra - low temperatures , there have been intense theoretical activities in studying properties of the condensate using the time - dependent mean - field gross - pitaevskii ( gp ) equation under different trap symmetries . among many possibilities ,",
    "the following traps have been used in various studies : three - dimensional ( 3d ) spherically - symmetric , axially - symmetric and anisotropic harmonic traps , two - dimensional ( 2d ) circularly - symmetric and anisotropic harmonic traps , and one - dimensional ( 1d ) harmonic trap .",
    "the inter - atomic interaction leads to a nonlinear term in the gp equation , which complicates its accurate numerical solution , specially for a large nonlinearity .",
    "the nonlinearity is large for a fixed harmonic trap when either the number of atoms in the condensate or the atomic scattering length is large and this is indeed so under many experimental conditions .",
    "special care is needed for the solution of the time - dependent gp equation with large nonlinearity and there has been an extensive literature on this topic @xcite .    the time - dependent gp equation is a partial differential equation in space and time variables involving first - order time and second - order space derivatives together with a harmonic and a nonlinear potential term , and has the structure of a nonlinear schrdinger equation with a harmonic trap .",
    "one commonly used procedure for the solution of the time - dependent gp equation makes use of a discretization of this equation in space and time and subsequent integration and time propagation of the discretized equation . from a knowledge of the solution of this equation at a specific time",
    ", this procedure finds the solution after a small time step by solving the discretized equation .",
    "a commonly used discretization scheme for the gp equation is the semi - implicit crank - nicolson discretization scheme @xcite which has certain advantages and will be used in this work .    in the simplest one - space - variable form of the gp equation",
    ", the solution algorithm is executed in two steps . in the first step , using a known initial solution , an intermediate solution after a small interval of time @xmath3 is found neglecting the harmonic and nonlinear potential terms .",
    "the effect of the potential terms is then included by a first - order time integration to obtain the final solution after time @xmath3 . in case of two or three spatial variables , the space derivatives are dealt with in two or three steps and the effect of the potential terms are included next .",
    "as the time evolution is executed in different steps it is called a split - step real - time propagation method .",
    "this method is equally applicable to stationary ground and excited states as well as non - stationary states , although in this paper we do not consider stationary excited states .",
    "the virtues of the semi - implicit crank - nicolson scheme @xcite are that it is unconditionally stable and preserves the normalization of the solution under real - time propagation . a simpler and efficient variant of the scheme called the split - step imaginary - time propagation method obtained by replacing the time variable by an imaginary time is also considered .",
    "( the gp equation involves complex variables .",
    "however , after replacing the time variable by an imaginary time the resultant partial differential equation is real , and hence the imaginary - time propagation method involves real variables only .",
    "this trick leads to an imaginary - time operator which results in exponential decay of all states relative to the ground state and can then be applied to any initial trial wave function to compute an approximation to the actual ground state rather accurately .",
    "we shall use imaginary - time propagation to compute the ground state in this paper . )",
    "the split - step imaginary - time propagation method involving real variables yields very precise result at low computational cost ( cpu time ) and is very appropriate for the solution of stationary problems involving the ground state .",
    "the split - step real - time propagation method uses complex quantities and yields less precise results for stationary problems ; however , they are appropriate for the study of non - equilibrium dynamics in addition to stationary problems involving excited states also .",
    "most of the previous studies @xcite on the numerical solution of the gp equation are confined to a consideration of stationary states only .",
    "some used specifically the imaginary - time propagation method @xcite .",
    "there are few studies @xcite for the numerical solution of the time - dependent gp equation using the crank - nicolson method @xcite .",
    "other methods for numerical solution of the time - dependent gp equation have also appeared in the literature @xcite .",
    "these time - dependent methods can be used for studying non - equilibrium dynamics of the condensate involving non - stationary states .",
    "the purpose of the present paper is to develop a simple and efficient algorithm for the numerical solution of the gp equation using time propagation together with the semi - implicit crank - nicolson discretization scheme @xcite specially useful to newcomers in this field interested in obtaining a numerical solution of the time - dependent gp equation .",
    "easy - to - use fortran 77 programs for different trap symmetries with adequate explanation are also included . in case of two and three space variables , fortran",
    "90/95 programs are more compact in nature and these programs are also included .",
    "we include programs using both real- and imaginary - time propagation . for stationary ground states the imaginary - time method",
    "has a much quicker convergence rate compared to the real - time method and should be used for the calculation of chemical potential , energy and root - mean - square ( rms ) sizes .",
    "we calculate the chemical potential and rms sizes of the condensate for stationary problems and compare these results with those previously obtained by other workers for different trap symmetries .",
    "these results can be easily calculated in a decent pc using the fortran programs provided .",
    "in addition to the results for the stationary states , the real - time propagation routines can also be used to study the non - stationary transitions , as in collapse dynamics @xcite and non - equilibrium oscillation @xcite .",
    "this paper is organized as follows . in sec .",
    "[ gpe ] we present the gp equations with different traps that we consider in this paper , e.g. , the 3d spherically - symmetric , 2d circularly - symmetric and 1d harmonic traps involving one space variable , the anisotropic 2d and axially - symmetric 3d harmonic traps in two space variables and the fully anisotropic 3d harmonic trap in three space variables . in sec .",
    "[ cn1d ] we elaborate the numerical algorithm for solving the gp equation in one space variable ( the 1d , circularly - symmetric 2d , and spherically - symmetric 3d cases ) and for calculating the chemical potential , energy and rms sizes employing both the real- and imaginary - time propagation methods . in sec .",
    "[ cn23d ] we present the same for solving the gp equation in two and three space variables ( the anisotropic 2d and axially - symmetric and anisotropic 3d cases ) . in sec .",
    "[ for ] we present a description of the fortran programs , an explanation about how to use them , and some sample outputs . in sec .",
    "[ num ] we present the numerical results for chemical potential , rms size , value of the wave function at the center , for the ground - state problem using the imaginary - time propagation routines and compare our finding with previous results for different trap symmetries in 1d , 2d , and 3d .",
    "we also present a study of non - stationary oscillation in some of these cases using the real - time propagation routines when the nonlinear coefficient in the gp equation with a stationary solution was suddenly reduced to half its value . finally , in sec .",
    "[ sum ] we present a brief summary of our study .",
    "at zero temperature , the time - dependent bose - einstein condensate wave function @xmath4 at position @xmath5 and time @xmath6 may be described by the following mean - field nonlinear gp equation @xcite @xmath7\\psi({\\bf r};\\tau ) , \\label{eqn : gp0}\\end{aligned}\\ ] ] with @xmath8 . here",
    "@xmath9 is the mass of an atom and @xmath10 the number of atoms in the condensate , @xmath11 the strength of inter - atomic interaction , with @xmath12 the atomic scattering length .",
    "the normalization condition of the wave function is @xmath13 .      in this case",
    "the trap potential is given by @xmath14 , where @xmath15 is the angular frequency and @xmath16 the radial distance .",
    "after a partial - wave projection the radial part @xmath17 of the wave function @xmath18 can be written as @xmath19 .",
    "after a transformation of variables to dimensionless quantities defined by @xmath20 , @xmath21 , @xmath22 and @xmath23^{1/2}$ ] , the gp equation ( [ eqn : gp0 ] ) in this case becomes @xmath24 \\varphi ( r;t)=0 , \\label{sph}\\end{aligned}\\ ] ] where @xmath25 .",
    "the purpose of changing the wave function from @xmath17 to @xmath26 is a matter of taste and it has certain advantages .",
    "first , this transformation removes the first derivative @xmath27 from the differential equation ( [ sph ] ) and thus results in a simpler equation @xcite .",
    "secondly , at the origin @xmath28 , @xmath17 is a constant , or @xmath29 . but the new variable satisfies @xmath30 .",
    "hence , while solving the differential equation ( [ sph ] ) , we can implement the simple boundary condition that as @xmath31 or @xmath32 , @xmath33 vanishes .",
    "the boundary condition for the differential equation in @xmath17 will be a mixed one , e.g. , the function @xmath17 should vanish at infinity and its first space derivative should vanish at the origin .",
    "the normalization condition for the wave function is @xmath34    however , eq . ( [ sph ] ) is not the unique form of dimensionless gp equation in this case .",
    "other forms of dimensionless equations have been obtained and used by different workers .",
    "for example , using the transformations @xmath35 , @xmath21 , @xmath36 and @xmath37 , the gp equation ( [ eqn : gp0 ] ) becomes @xmath38 \\varphi ( r;t)=0 , \\label{sph2}\\end{aligned}\\ ] ] where @xmath39 with normalization ( [ n1 ] ) .",
    "finally , using the transformations @xmath35 , @xmath40 , @xmath36 and @xmath37 , the gp equation ( [ eqn : gp0 ] ) becomes @xmath41 \\varphi ( r;t)=0 , \\label{sph3}\\end{aligned}\\ ] ] where @xmath42 with normalization ( [ n1 ] ) .",
    "these three sets of dimensionless gp equations have been widely used in the literature and will be considered here .",
    "equations ( [ sph ] ) , ( [ sph2 ] ) , and ( [ sph3 ] ) allow stationary solutions @xmath43 where @xmath44 is the chemical potential .",
    "the boundary conditions for the solution of these equations are @xmath30 and @xmath45 @xcite .",
    "the three - dimensional trap potential is given by @xmath46 , where @xmath47 , @xmath48 , and @xmath49 are the angular frequencies in the @xmath50 , @xmath51 and @xmath52 directions , respectively , and @xmath53 is the radial vector . in terms of dimensionless variables",
    "@xmath54 , and @xmath55 , the gp equation ( [ eqn : gp0 ] ) becomes @xmath56 \\varphi(x , y , z;t)= 0,\\label{ani}\\end{aligned}\\ ] ] with @xmath57 and normalization @xmath58 , and @xmath59 , the gp equation ( [ eqn : gp0 ] ) becomes @xmath60 \\varphi(x , y , z;t)= 0,\\label{ani2}\\end{aligned}\\ ] ] with @xmath61 and normalization ( [ n3 ] ) .",
    "now with scaling @xmath62 , eq .",
    "( [ ani2 ] ) can be rewritten as @xmath63 \\varphi(x , y , z;t)= 0,\\label{ani3}\\end{aligned}\\ ] ] with @xmath64 .",
    "the boundary conditions for solution are @xmath65 @xcite .      in the special case of axial symmetry ( @xmath66 ) eqs .",
    "( [ ani ] ) , ( [ ani2 ] ) and ( [ ani3 ] ) can be simplified considering @xmath67 where @xmath68 is the radial coordinate and @xmath52 is the axial coordinate",
    ". then eq .",
    "( [ ani ] ) becomes @xmath69 \\varphi(\\rho , z;t)= 0,\\label{axi }   \\end{aligned}\\ ] ] with @xmath70 and normalization @xmath71 \\varphi(\\rho , z;t)= 0,\\label{axi2}\\end{aligned}\\ ] ] with @xmath72 and @xmath73 \\varphi(\\rho , z;t)= 0,\\label{axi3}\\end{aligned}\\ ] ] with @xmath74 . in this case",
    "@xmath75 is not zero but a constant .",
    "convenient boundary conditions for solution in this case are @xmath76 and @xmath77 @xcite .      in case of an elongated cigar - shaped trap , which is essentially an axially - symmetric trap with strong transverse confinement , eq .",
    "( [ ani ] ) reduces to a quasi one - dimensional form .",
    "this is achieved by assuming that the system remains confined to the ground state in the transverse direction . in this case",
    "the wave function of eq .",
    "( [ ani ] ) can be written as @xmath78 $ ] with @xmath79^{1/4 } \\exp(-\\kappa y^2/4)$ ] and @xmath80^{1/4 } \\exp(-\\lambda z^2/4)$ ] the respective ground state wave functions in @xmath51 and @xmath52 directions . using this ansatz in eq .",
    "( [ ani ] ) , multiplying by @xmath81 , integrating over @xmath51 and @xmath52 , dropping the tilde over @xmath33 , and setting @xmath82 we obtain @xmath83 \\varphi ( x;t)=0   , \\label{1d}\\end{aligned}\\ ] ] with @xmath84 and normalization @xmath85 instead if we employ @xmath86 $ ] with @xmath87 and @xmath88 in eq .",
    "( [ ani2 ] ) , in a similar fashion we obtain @xmath89 \\varphi ( x;t)=0   , \\label{1d2}\\end{aligned}\\ ] ] with @xmath90 and normalization ( [ n5 ] ) . now with scaling @xmath62 eq . ( [ 1d2 ] ) can be rewritten as @xmath91 \\varphi ( x;t)=0   , \\label{1d3}\\end{aligned}\\ ] ] with @xmath92 and normalization ( [ n5 ] ) . for numerical solution",
    "we take @xmath93 .",
    "[ 1d ]      in case of a disk - shaped trap , which is essentially an anisotropic trap in two dimensions with strong axial binding eq .",
    "( [ ani ] ) reduces to a two - dimensional form .",
    "this is achieved by assuming that the system remains confined to the ground state in the axial direction . in this case",
    "the wave function of eq .",
    "( [ ani ] ) can be written as @xmath94 $ ] with @xmath80^{1/4 } \\exp(-\\lambda z^2/4)$ ] the ground state wave function in @xmath52 direction .",
    "using this ansatz in eq .",
    "( [ ani ] ) , multiplying by @xmath95 , integrating over @xmath52 , dropping the tilde over @xmath33 and setting @xmath96 we obtain @xmath97 \\varphi ( x , y;t)=0   , \\label{2d}\\end{aligned}\\ ] ] now with @xmath98 and normalization @xmath99 ) @xmath100 $ ] with @xmath101^{1/4 } \\exp(-\\lambda z^2/2)$ ] , then in a similar fashion we obtain @xmath102 \\varphi ( x , y;t)=0   , \\label{2d2}\\end{aligned}\\ ] ] now with @xmath103 and normalization ( [ n6 ] ) . finally , with scaling @xmath62 , eq .",
    "( [ 2d2 ] ) can be written as @xmath104 \\varphi ( x , y;t)=0   , \\label{2d3}\\end{aligned}\\ ] ] with @xmath98 and normalization ( [ n6 ] ) .",
    "for numerical solution we take @xmath105 and @xmath106 .      in the special case of circular symmetry the equations of sec . [",
    "2.5 ] can be written in one - dimensional form . in this case",
    "@xmath107 , and we introduce the radial variable @xmath108 , and rewrite the wave function as @xmath109 . then the gp equation ( [ 2d ] ) become @xmath110 \\varphi ( r;t)=0 . \\label{cir}\\end{aligned}\\ ] ] the normalization of the wave function is @xmath111 in the circularly - symmetric case eq .",
    "( [ 2d2 ] ) becomes @xmath112 \\varphi ( r;t)=0 . \\label{cir2}\\end{aligned}\\ ] ] finally , eq . ( [ 2d3 ] )",
    "can be written as @xmath113 \\varphi ( r;t)=0 . \\label{cir3}\\end{aligned}\\ ] ] the convenient boundary condition in this case is @xmath114 and @xmath115 @xcite .    in this section",
    "we have exhibited gp equations for different trap symmetries . in the next section",
    "we illustrate the crank - nicolson method for the gp equation in one space variable , which is then extended to other types of equations in sec .",
    "[ cn23d ] .",
    "to introduce the crank - nicolson method @xcite for gp equation we consider first the one - dimensional case of sec .",
    "[ 1d ] . the nonlinear gp equation ( [ 1d ] ) in this case can be expressed in the following form : @xmath116 \\varphi ( x;t )   , \\notag \\\\   & \\equiv h   \\varphi ( x;t ) \\label{e1d}\\end{aligned}\\ ] ] where the hamiltonian @xmath117 contains the different linear and nonlinear terms including the spatial derivative .",
    "( the spherically - symmetric gp equation in 3d has a similar structure and can be treated similarly . )",
    "we solve this equation by time iteration @xcite .",
    "a given trial input solution is propagated in time over small time steps until a stable final solution is reached .",
    "the gp equation is discretized in space and time using the finite difference scheme .",
    "this procedure results in a set of algebraic equations which can be solved by time iteration using an input solution consistent with the known boundary condition . in the present split - step method @xcite this iteration",
    "is conveniently done in few steps by breaking up the full hamiltonian into different derivative and non - derivative parts .",
    "the time iteration is performed by splitting @xmath117 into two parts : @xmath118 , with @xmath119 , \\;\\ ; \\\\ \\label{h2 } h_2 & = -\\frac { \\partial ^2}{\\partial x^2}.\\end{aligned}\\ ] ] essentially we split eq .",
    "( [ e1d ] ) into @xmath120 \\varphi ( x;t )   \\equiv h_1   \\varphi ( x;t ) \\label{e1d_1 } \\\\",
    "\\mbox{i}\\frac{\\partial } { \\partial t } \\varphi ( x;t ) & = -\\frac{\\partial^2 } { \\partial x^2}\\varphi ( x;t )    \\equiv h_2   \\varphi ( x;t ) \\label{e1d_2 } \\end{aligned}\\ ] ] we first solve eq .",
    "( [ e1d_1 ] ) with a initial value @xmath121 at @xmath122 to obtain an intermediate solution at @xmath123 , where @xmath3 is the time step .",
    "then this intermediate solution is used as initial value to solve eq .",
    "( [ e1d_2 ] ) yielding the final solution at @xmath123 as @xmath124 .",
    "this procedure is repeated @xmath125 times to get the final solution at a given time @xmath126 .",
    "the time variable is discretized as @xmath127 where @xmath3 is the time step .",
    "the solution is advanced first over the time step @xmath3 at time @xmath128 by solving the gp equation ( [ e1d ] ) with @xmath129 to produce an intermediate solution @xmath130 from @xmath131 , where @xmath131 is the discretized wave function at time @xmath128 . as there is no derivative in @xmath132 , this propagation",
    "is performed essentially exactly for small @xmath3 through the operation @xmath133 where @xmath134 denotes time - evolution operation with @xmath132 and the suffix ` nd ' denotes non - derivative .",
    "next we perform the time propagation corresponding to the operator @xmath135 numerically by the semi - implicit crank - nicolson scheme ( described below ) @xcite : @xmath136 the formal solution to ( [ gp2 ] ) is @xmath137 which combined with eq .",
    "( [ al1 ] ) yields @xmath138 where @xmath139 denotes time - evolution operation with @xmath135 and the suffix ` cn ' refers to the crank - nicolson algorithm .",
    "operation @xmath139 is used to propagate the intermediate solution @xmath140 by time step @xmath3 to generate the solution @xmath141 at the next time step @xmath142 .",
    "the advantage of the above split - step method with small time step @xmath3 is due to the following three factors @xcite .",
    "first , all iterations conserve normalization of the wave function .",
    "second , the error involved in splitting the hamiltonian is proportional to @xmath143 and can be neglected and the method preserves the symplectic structure of the hamiltonian formulation .",
    "finally , as a major part of the hamiltonian including the nonlinear term is treated fairly accurately without mixing with the delicate crank - nicolson propagation , the method can deal with an arbitrarily large nonlinear term and lead to stable and accurate converged result .",
    "now we describe explicitly the semi - implicit crank - nicolson algorithm .",
    "the gp equation is mapped onto @xmath144 one - dimensional spatial grid points in @xmath50 .",
    "equation ( [ e1d ] ) is discretized with @xmath145 of ( [ h2 ] ) by the following crank - nicolson scheme @xcite : @xmath146,\\end{aligned}\\ ] ] where for the spherically - symmetric eq .",
    "( [ sph ] ) @xmath147 refers to @xmath148 @xmath149 and @xmath150 is the space step . in the case of the 1d eq .",
    "( [ 1d ] ) , we choose @xmath151 @xmath149 .",
    "( the choice @xmath152 even @xmath144 @xmath152 has the advantage of taking an equal number of space points on both sides of @xmath153 in the 1d case setting the point @xmath154 at @xmath153 . )",
    "equation ( [ kn1 ] ) is the explicit form of the formal eq .",
    "( [ gp2 ] ) .",
    "this scheme is constructed by approximating @xmath155 by a two - point formula connecting the present ( @xmath156 ) to future ( @xmath157 ) .",
    "the spatial partial derivative @xmath158 is approximated by a three - point formula averaged over the present and the future time grid points .",
    "this procedure results in a series of tridiagonal sets of equations ( [ kn1 ] ) in @xmath159 , @xmath160 , and @xmath161 at time @xmath162 , which are solved using the proper boundary conditions .",
    "the crank - nicolson scheme ( [ kn1 ] ) possesses certain properties worth mentioning @xcite .",
    "the error in this scheme is both second order in space and time steps so that for small @xmath3 and @xmath150 the error is negligible .",
    "this scheme is also unconditionally stable @xcite .",
    "the boundary condition at infinity is preserved for small values of @xmath163@xcite .    the tridiagonal equations emerging from eq .",
    "( [ kn1 ] ) are written explicitly as @xcite @xmath164 where @xmath165 and @xmath166 .",
    "all quantities in @xmath167 refer to time step @xmath168 and are considered known .",
    "the only unknowns in eq .",
    "( [ eq1 ] ) are the wave forms @xmath169 and @xmath160 at time step @xmath162 .",
    "to solve eq .",
    "( [ eq1 ] ) , we assume the one - term forward recursion relation @xmath170 where @xmath171 and @xmath172 are coefficients to be determined . substituting eq .",
    "( [ eq2 ] ) in eq .",
    "( [ eq1 ] ) we obtain @xmath173 which leads to the solution @xmath174 with @xmath175 from eqs .",
    "( [ eq2 ] ) and ( [ eq4 ] ) we obtain the following backward recursion relations for the coefficients @xmath171 and @xmath172 @xmath176 we shall use the recursion relations ( [ eq4 ] ) , ( [ eq41 ] ) and ( [ eq5 ] ) in a backward sweep of the lattice to determine @xmath171 and @xmath172 for @xmath177 running from @xmath178 down to 0 .",
    "the initial values chosen are @xmath179 this ensures the correct value of @xmath33 at the last lattice point . after determining the coefficients @xmath180 and @xmath181 , we can use the recursion relation ( [ eq2 ] ) from @xmath182 to @xmath183 to determine the solution for the entire space range using the starting value @xmath184 ( = 0 ) known from the boundary conditions . the value at the last lattice point is also taken to be known (= 0 ) .",
    "thus we have determined the solution by using two sets of recursion relations across the lattice each involving about @xmath144 operations .    in the numerical implementation of cn real - time propagation the initial state at @xmath185",
    "is usually chosen to be the analytically known solution of the harmonic potential with zero nonlinearity : @xmath186 .",
    "in the course of time iteration the nonlinearity is slowly introduced until the desired final nonlinearity is attained .",
    "this procedure will lead us to the final solution of the problem .",
    "although , real - time propagation as described above has many advantages , in this approach one has to deal with complex variables for a complex wave function for non - stationary states . for stationary ground state",
    "the wave function is essentially real- and the imaginary - time propagation method dealing with real variables seems to be convenient . in this approach time",
    "@xmath187 is replaced by an imaginary quantity @xmath188 and eq .",
    "( [ e1d ] ) now becomes @xmath189 \\varphi ( x;\\bar t ) , \\notag \\\\ &",
    "\\equiv h   \\varphi ( x;\\bar t ) \\label{imt}\\end{aligned}\\ ] ] in this equation @xmath190 is just a mathematical parameter .    from eq .",
    "( [ imt ] ) we see that an eigenstate @xmath191 of eigenvalue @xmath192 of @xmath117 satisfying @xmath193 behaves under imaginary - time propagation as @xmath194 , so that @xmath195 .",
    "hence , if we start with as arbitrary initial @xmath196 which can be taken as a linear combination of all eigenfunctions of @xmath117 , then upon imaginary - time propagation all the eigenfunctions will decay exponentially with time .",
    "however , all the excited states with larger @xmath192 will decay exponentially faster compared to the ground state with the smallest eigenvalue .",
    "consequently , after some time only the ground state survives .",
    "as all the states are decaying with time during imaginary - time propagation , we need to multiply the wave function by a number greater than unity to preserve its normalization so that the solution does not go to zero .",
    "the imaginary - time iteration is performed by splitting @xmath117 into two parts as before : @xmath118 , with @xmath132 and @xmath135 given by eqs .",
    "( [ h1 ] ) and ( [ h2 ] ) .",
    "it is realized that the entire analysis of sec .",
    "[ rt ] remains valid provided we replace @xmath197 by 1 in eq .",
    "( [ al1 ] ) and by @xmath198 in the remaining equations .",
    "however , there appears one trouble .",
    "the cn real - time propagation preserves the normalization of the wave function , whereas the cn imaginary - time propagation does not preserve the normalization .",
    "this problem can be circumvented by restoring the normalization of the wave function after each operation of crank - nicolson propagation . once this is done the imaginary - time propagation method for stationary ground state problems",
    "yields very accurate result at low computational cost .",
    "compared to the real - time propagation method , the imaginary - time propagation method is very robust .",
    "the initial solution in the imaginary - time method could be any reasonable solution and not the analytically known solution of a related problem as in the real - time method .",
    "also , the full nonlinearity can be added in a small number of time steps or even in a single step and not in a large number of steps as in the real - time method . in the programs using the imaginary - time method we include the nonlinearity in a single step",
    ". these two added features together with the use of real algorithm make the imaginary - time propagation method very accurate with quick convergence for stationary ground states as we shall see below .",
    "the crank - nicolson discretization for real- and imaginary - time propagation for the circularly - symmetric gp equation ( [ cir ] ) is performed in a similar fashion as for eq .",
    "( [ e1d ] ) , apart from the difference that here we also have a first derivative in space variable in addition to the second derivative .",
    "another difference is that the wave function is not zero at @xmath28 . in the case of eq .",
    "( [ e1d ] ) we took the boundary condition as @xmath199 at the boundaries .",
    "for the circularly - symmetric case , the convenient boundary conditions are @xmath200 and @xmath115 .",
    "we describe below the crank - nicolson discretization and the solution algorithm in this case for the following equation @xmath201 \\varphi ( r;t)=0 , \\label{cncir}\\ ] ] required for the solution of eq .",
    "( [ cir ] ) .",
    "the remaining procedure is similar to that described in detail above in the one - dimensional case",
    ".    equation ( [ cncir ] ) is discretized by the following crank - nicolson scheme as in eq .",
    "( [ kn1 ] ) @xcite : @xmath202\\nonumber \\\\ -\\frac{1}{4r_ih } \\left[(\\varphi^{n+1}_{i+1}-\\varphi^{n+1}_{i-1})+(\\varphi^{n+1/2}_{i+1}- \\varphi^{n+1/2}_{i-1 } ) \\right],\\end{aligned}\\ ] ] where again @xmath203 , @xmath204 @xmath205 and @xmath150 is the space step .",
    "this scheme is constructed by approximating @xmath206 by a two - point formula averaged over present and future time grid points .",
    "the discretization of the first - order time and second - order space derivatives is done as in eq .",
    "( [ kn1 ] ) .",
    "this procedure results in the tridiagonal sets of equations ( [ knx ] ) in @xmath159 , @xmath160 , and @xmath161 at time @xmath162 , which are solved using the proper boundary conditions .",
    "the tridiagonal equations emerging from eq .",
    "( [ knx ] ) are written explicitly as @xmath207 where @xmath208 and @xmath209 , a_i^+= -\\mbox{i}\\delta[1/(4hr_i ) + 1/(2h^2 ) ] , a_i^0 = 1+\\mbox{i } \\delta / h^2 $ ] . all quantities in @xmath167 refer to time step @xmath168 and are considered known .",
    "the only unknowns in eq .",
    "( [ ep1 ] ) are the wave forms @xmath169 and @xmath160 at time step @xmath162 .",
    "to solve eq .",
    "( [ ep1 ] ) , we assume the one - term backward recursion relation @xmath210 where @xmath171 and @xmath172 are coefficients to be determined . substituting eq .",
    "( [ ep2 ] ) in eq .",
    "( [ ep1 ] ) we obtain @xmath211 which leads to the solution @xmath212 with @xmath213 from eqs .",
    "( [ ep2 ] ) and ( [ ep4 ] ) we obtain the following forward recursion relations for the coefficients @xmath171 and @xmath172 @xmath214 we shall use the recursion relations ( [ ep4 ] ) , ( [ ep41 ] ) and ( [ ep5 ] ) in a forward sweep of the lattice to determine @xmath171 and @xmath172 for @xmath177 running from @xmath215 to @xmath216 .",
    "the initial values chosen are @xmath217 this ensures the correct value of the space derivative of @xmath218 at @xmath28 . after determining the coefficients @xmath219 and @xmath181 , we can use the recursion relation ( [ ep2 ] ) from @xmath220 to @xmath215 to determine the solution for the entire space range using the starting value @xmath221 ( = 0 ) known from the boundary condition .",
    "thus we have determined the solution by using two sets of recursion relations across the lattice each involving about @xmath222 operations .",
    "for stationary states the wave functions for the 1d case have the trivial time dependence @xmath223 , where @xmath224 is the chemical potential . substituting this condition in eq .",
    "( [ 1d ] ) we obtain",
    "@xmath225 \\hat \\varphi ( x ) =    \\mu \\hat \\varphi ( x).\\end{aligned}\\ ] ] assuming that the wave form is normalized to unity @xmath226 , the chemical potential can be calculated from the following expression obtained by multiplying eq .",
    "( [ mueq ] ) by @xmath227 and integrating over all space @xmath228 dx,\\end{aligned}\\ ] ] where the second derivative has been simplified by an integration by parts .",
    "all the programs also calculate the many - body energy , which is of interest .",
    "the analytical expression for energy is the same as that of the chemical potential but with the nonlinear term multiplied by 1/2 , e.g. , @xcite @xmath229 dx.\\end{aligned}\\ ] ] the programs will write the value of energy as output . however , we shall not study or tabulate the results for energy and we shall not write the explicit algebraic expression of energy in the case of other trap symmetries .    the gp equation ( [ sph ] ) with spherically - symmetric potential is also an one - variable equation quite similar in structure to the one - dimensional equation ( [ 1d ] ) considered above . hence the entire analysis of secs .",
    "[ rt ] , [ it ] , and [ ch ] will be applicable in this case with @xmath230 replaced by @xmath231 in the nonlinear term .",
    "now if we consider stationary states of the form @xmath232 , the expression for the chemical potential becomes @xmath233 dr.\\end{aligned}\\ ] ] we shall use eqs . ( [ muz ] ) and ( [ mueq2 ] ) for the calculation of chemical potential from eqs . ( [ 1d ] ) and ( [ sph ] ) .",
    "the energy will be calculated from eq .",
    "( [ energy ] ) .",
    "the expressions for chemical potential in other cases can be written down in a straight - forward fashion .",
    "in this case the gp equation ( [ 2d ] ) can be written as @xmath234 with @xmath235 .",
    "the hamiltonian @xmath117 can be conveniently broken into three pieces @xmath236 , where @xmath237 now we adopt a policy quite similar to that elaborated in sec .",
    "[ rt ] where the hamiltonian was broken into two parts and where the time propagation over time step @xmath3 using the two parts were carried out alternatively .",
    "the same procedure will be adopted in the present case where we perform the time propagation using the pieces @xmath132 , @xmath135 , and @xmath238 of the hamiltonian successively in three independent time sub - steps @xmath3 to complete a single time evolution over time step @xmath3 of the entire gp hamiltonian @xmath117 . the time propagation over @xmath132",
    "is performed as in eq .",
    "( [ al1 ] ) and those over @xmath135 and @xmath238 as in eqs .",
    "( [ gp3 ] ) and ( [ kn1 ] ) . the chemical potential in this case for the stationary state @xmath239",
    "can be written as @xmath240 , \\end{aligned}\\ ] ] where we have performed integrations by parts to obtain this form for the chemical potential in terms of first derivatives only .      in this case the gp equation ( [ axi ] ) can be written as @xmath241 the hamiltonian @xmath117 can be conveniently broken into three pieces @xmath236 , where @xmath242 now we adopt a policy quite similar to that elaborated in sec .",
    "[ anp ] where the hamiltonian was broken into three parts and where the time propagation over time step @xmath3 using the three parts were carried out alternatively .",
    "the time propagation over @xmath132 is performed as in eq .",
    "( [ al1 ] ) and those over @xmath135 and @xmath238 as in eqs .",
    "( [ knx ] ) and ( [ kn1 ] ) . the chemical potential in this case for the stationary state @xmath243",
    "can be written as @xmath244 , \\end{aligned}\\ ] ] where we have again used integrations by parts to simplify the final expression .      in this case the gp equation ( [ ani ] ) can be written as @xmath245 with @xmath246 .",
    "the hamiltonian @xmath117 can be conveniently broken into four pieces @xmath247 , where @xmath248 now we adopt a policy quite similar to that elaborated in sec .",
    "[ rt ] where the hamiltonian was broken into two parts and where the time propagation over time step @xmath3 using the two parts were carried out alternatively .",
    "the same procedure will be adopted in the present case where we perform the time propagation using the pieces @xmath132 , @xmath135 , @xmath238 and @xmath249 of the hamiltonian successively in four independent time sub - steps @xmath3 to complete a single time evolution over time step @xmath3 of the entire gp hamiltonian @xmath117 . the time propagation over @xmath132",
    "is performed as in eq .",
    "( [ al1 ] ) and those over @xmath135 , @xmath238 and @xmath249 as in eqs .",
    "( [ gp3 ] ) and ( [ kn1 ] ) . the chemical potential in this case for the stationary state @xmath250",
    "can be written as @xmath251 , \\end{aligned}\\ ] ] where we have again used integrations by parts to simplify the final expression .",
    "in this subsection we describe six fortran codes involving gp equation in one space variable .",
    "these are programs for solving the 1d gp equation ( program * imagtime1d.f * ) , the circularly - symmetric 2d gp equation ( program * imagtimecir.f * ) and the radially - symmetric 3d gp equation ( program * imagtimesph.f * ) using imaginary - time propagation .",
    "the similar routines using real - time propagation are * realtime1d.f * , * realtimecir.f * and * realtimesph.f * , respectively .",
    "these real- and imaginary - time routines in one space variable have similar structures . however , the wave function is real in imaginary - time propagation , whereas it is complex in real - time propagation . to accommodate this fact many variables in the real - time propagation routines are complex .",
    "the principal variables employed in the main program are : n = number of space mesh points , nstp = number of time iterations during which the nonlinearity is introduced in real - time propagation , ( in imaginary - time propagation the nonlinearity is introduced in one step , ) npas = number of subsequent time iterations with fixed nonlinearity , nrun = number of final time iterations with ( a ) fixed nonlinearity in imaginary - time propagation and ( b ) modified nonlinearity to study dynamics in real - time propagation , x(i ) = space mesh , x2(i ) = x(i)*x(i ) , v(i ) = potential , cp(i ) = wave function at space point x(i ) , g , g0 = coefficient of nonlinear term , mu = chemical potential , en = energy , znorm = normalization of wave function , rms = rms size or radius , dx = space step , dt = time step , option and xop decide which equation to solve . also important",
    "is the subroutine initialize , where the space mesh x(i ) , potential v(i ) , and the initial wave function cp(i ) , are calculated .",
    "( an advanced user may need to change the variables v(i ) and cp(i ) so as to adopt the program to solve a different equation with different nonlinearity . )",
    "the functions and variables not listed above are auxiliary variables , that the user should not need to modify .",
    "now we describe the function of the subroutines , which the user should not need to change .",
    "the subroutine norm calculates by simpson s rule the normalization of the wave function and sets the normalization to unity , the preassigned value .",
    "the real - time propagation preserves the normalization of the wave function and hence the subroutine norm is not used during time propagation .",
    "the subroutines rad and chem calculate the rms size ( length or radius ) , and chemical potential ( and energy ) of the system .",
    "the subroutines coef and lu together implement the time propagation with the spatial and temporal time derivative terms .",
    "the subroutine nu performs the time propagation with the nonlinear term and the potential .",
    "in the imaginary - time program the action of the subroutine lu does not preserve normalization and hence each time the subroutine lu is called , the subroutine norm has to be called to set the normalization of the wave function back to unity .",
    "( this is not necessary in the real - time programs which preserve the norm . )",
    "the subroutine nonlin calculates the nonlinear term .",
    "the subroutine diff calculates the space derivative of the wave function by richardson s extrapolation formula needed for the computation of the chemical potential and energy .",
    "the function simp does the numerical space integrations with the simpson s rule .",
    "the programs implement the splitting method described in sec .",
    "[ rt ] and [ gp2dc ] and calculate the wave function , chemical potential , size , normalization , etc .",
    "the number of points in the one - dimensional space grid represented by the integer variable n has to be chosen consistent with space step dx such that the total space covered n@xmath252dx is significantly larger than the size of the condensate so that at the boundaries the wave function attains the asymptotic limits ( e.g. , the absolute value of the wave function or its space derivative becomes less than 10@xmath253 or so for imaginary - time propagation and less than 10@xmath254 for real - time propagation .",
    "note that in the 1d and spherically - symmetric 3d problems we are using the asymptotic condition that the wave function is zero at both boundaries . in case of the circularly - symmetric 2d problem we use a mixed boundary condition ,",
    "e.g. , at origin the derivative of the wave function is zero and at infinity the wave function is zero . ) in the imaginary - time routine the total space covered should be about 1.5 times the extension of the condensate . in the real - time routines , to obtain good precision the total space covered should be at least 2 times the extension of the condensate .",
    "this is because the imaginary - time routine is more precise and the solution attains its limiting asymptotic value at the boundary very rapidly as the total space covered is increased .",
    "the real - time routine is less accurate and one has to go to a larger distance before the solution or its derivative drops to zero .",
    "a couple of runs with a sufficiently large n and large dx are recommended to have an idea of the size / extension of the system",
    ". a smaller value of dx leads to a more accurate result provided an appropriate dt is chosen .",
    "the crank - nicolson method , described , for example , by eq .",
    "( [ kn1 ] ) , is unconditionally stable for all @xmath163 . nevertheless , for a numerical application to a specific problem one has to fix the time step dt ( @xmath255 ) and space step dx ( @xmath256 ) for good convergence .",
    "space and time steps are given in the main program , as  data dx/0.0025d0/ , dt/0.00002d0/ \" with correlated dx and dt values obtained by trial .",
    "( if the user wants to use other values of dx and dt , a set of correlated values obtained by trial is given in table [ table1 ] . ) the total number of space points n in calculation has to be fixed in the line , e.g. , ",
    "parameter ( n = 6000 , n2 = n/2 , nx = n-1 ) \" , in the main program , so that the final wave function is within the space range and its value is negligibly small at the boundaries .",
    "the total numbers of time iterations are fixed in the line , e.g. ,",
    " parameter ( nstp = 500000 , npas = 10000 , nrun = 20000 ) \" , in the main program as described below in sec .",
    "[ howto ] .",
    "the integer parameter option should be set 1 , 2 or 3 in the main routine for solution of equations of type ( [ sph3 ] ) , ( [ sph2 ] ) , or ( [ sph ] ) , [ or for solution of equations of type ( [ 1d3 ] ) , ( [ 1d2 ] ) , or ( [ 1d ] ) , ] respectively .",
    "the difference between these three types of equations is in the values of the coefficients in the first two terms .",
    "the nonlinear term calculated in the subroutine nonlin is of the form @xmath257 with coefficient g. if a different type of nonlinear term ( with different functional dependence on the wave function ) is to be introduced , it should be done in the subroutine nonlin .",
    "otherwise , this subroutine should not be changed .",
    "a different type of nonlinear term is appropriate for a fermi super - fluid @xcite or a tonks - girardeau gas @xcite .",
    "in addition to the programs in one space variable we have six programs in two and three space variables .",
    "the programs * imagtime2d.f * and * realtime2d.f * apply to 2d cartesian space using imaginary- and real - time propagations , respectively .",
    "similarly , * imagtime3d.f * and * realtime3d.f * apply to 3d cartesian space using imaginary- and real - time propagation , respectively . finally , programs * imagtimeaxial.f * and * realtimeaxial.f * apply to an axially symmetric trap in 3d .",
    "the fortran 90/95 versions of these programs are somewhat more condensed and provide some advantage .",
    "hence we also include these programs as * imagtime2d.f90 * , * realtime2d.f90 * , * imagtime3d.f90 * , * realtime3d.f90 * , * imagtimeaxial.f90 * , and * realtimeaxial.f90*. the output of the fortran 90/95 programs are identical with their corresponding fortran 77 versions .",
    "all these programs are written using a very similar logic used in the programs in one space variable .",
    "so most of the considerations described earlier also applies to these cases .",
    "we describe the principal differences below .    in case of total number of space points",
    "n , one now has the variables nx , ny , and nz for total number of space points in x , y and z directions in case of three space variables . in case of two space variables",
    "the z component is absent .",
    "these variables should be chosen equal to each other for a nearly symmetric case . however , if the problem is anisotropic in space , these variables can and should be chosen differently .",
    "similarly , the space variable x(i ) is now replaced by space variables x(i ) , y(j ) , and z(k ) in three directions .",
    "now there are space steps dx , dy , and dz in place of dx in one space variable .",
    "the variables dx , dy , and dz can now be chosen differently in three directions in case of an anisotropic problem .",
    "however , they should be chosen together with nx , ny , and nz so that the wave function lies entirely inside the chosen space and becomes negligibly small at the boundaries . if the spatial extension of the wave function is much smaller in one space direction than another , one should take a smaller space step in the direction in which the spatial extension of the wave function is small .",
    "the potential v and wave function cp are now functions of 2 or 3 space variables and are represented by matrices in place of a column in the case of one space variable .",
    "the variables al ( or kap ) and bl ( or lam ) now define the anisotropy of the trap and are used in the subroutine initialize to define the trap .",
    "the subroutine lu is now replaced by lux , luy , and luz to implement the solution in different space directions . in the imaginary - time propagation each time the subroutines lux , luy , and luz operate , one has to set the normalization of the wave function to unity by calling the subroutine norm .      the programs , as supplied , solve the gp equations for a specific value of nonlinearity and write the wave function , chemical potential , energy , rms size or radius , wave function at the center , and nonlinearity , for specific values of space and time steps .",
    "the real- and imaginary - time programs for a specific equation , for example , spherically - symmetric 3d equation , employ similar set of parameters like space and time steps .",
    "the real - time programs use a larger value of n , so that the discretization covers a larger region in space . in all cases the supplied programs",
    "solve an equation of type ( [ sph2 ] ) with a factor of 1/2 in front of the space derivative , selected by setting the integer parameter option = 2 in the main routine .",
    "other types of equations can be obtained by setting option = 1 for equations of type ( [ sph3 ] ) or = 3 for equations of type ( [ sph ] ) .    for solving a stationary ground state problem ,",
    "the imaginary - time programs are far more accurate and should be used .",
    "the real - time programs should be used for studying non - equilibrium problems often using an initial wave function calculated by the imaginary - time program .",
    "the non - equilibrium problems include the study of soliton dynamics @xcite , expansion @xcite , collapse dynamics @xcite , and other types of problems .",
    "each program is preset at a fixed nonlinearity g0 (= g ) , correlated dx - dt values and nstp , npas , and nrun .",
    "smaller the steps dx and dt , more accurate will be the result .",
    "the correlated values of dx and dt on a data line should be found by trial to obtain good convergence .",
    "each supplied program produces result up - to a desired precision consistent with the parameters employed @xmath152 g0 , dx , dt , n , nstp , npas , and nrun .",
    "if the nonlinearity g0 is increased , one might need to increase n to achieve similar precision .",
    "in many cases one may need an approximate solution ( with lower accuracy ) involving less cpu time or one may need to solve the gp equation for a different value of nonlinearity .",
    "\\(a ) if g0 is reduced , just change the card defining g0 . however ,",
    "if g0 is increased , changing the value of g0 may not be enough .",
    "for an increased g0 , the wave function extends to a larger region in space . one may need to increase the  number of space mesh points \" . for a new g0 , just plot the output file fort.3 for all programs except realtime3d.f , realtime3d.f90 , imagtime3d.f and imagtime3d.f90 , where one should plot output files fort.11 , fort.12 , and fort.13 and see that the wave function is fully and adequately accommodated in the space domain .",
    "if not , one needs to increase the number in input cards ",
    "number of space mesh points \" until the wave function is fully and adequately accommodated in the space domain .",
    "( b)the cpu time involved can be reduced by sacrificing the precision .",
    "this can be done by increasing the space step(s ) and time step and reducing the `` number of space mesh points '' .",
    "if the space step dx is increased by a factor of f = 2 , the number of space mesh points should be reduced by the same factor .",
    "the time step dt should be increased by a larger factor , more like f**2 .",
    "the optimum increase in time step should be determined by some experimentation .",
    "( a set of correlated dx - dt values is given in tables [ table1 ] and [ table4 ] for the solution of corresponding equations . )",
    "the cpu time is the largest in the case of programs realtime3d.f , realtime3d.f90 , imagtime3d.f and imagtime3d.f90 and we give an example of changes below in these cases to reduce the cpu time and precision .",
    "for example , for realtime3d.f , just change the lines 15 , 16 , 17 , and 39 .",
    "the new set of lines should be    parameter ( nx=40 , nxx = nx-1 , nx2 = nx/2 )    parameter ( ny=32 , nyy = ny-1 , ny2 = ny/2 )    parameter ( nz=24 , nzz = nz-1 , nz2 = nz/2 )    data dx /0.5d0/ , dy /0.5d0/ , dz /0.5d0/ , dt/0.05d0/    for imagtime3d.f , just change the lines 15 , 16 , 17 , and 37 .",
    "the new set of lines should be    parameter ( nx=24 , nxx = nx-1 , nx2 = nx/2 )    parameter ( ny=20 , nyy = ny-1 , ny2 = ny/2 )    parameter ( nz=16 , nzz = nz-1 , nz2 = nz/2 )    data dx /0.5d0/ , dy /0.5d0/ , dz /0.5d0/ , dt/0.04d0/    please verify , by running the corresponding programs , that the new results so obtained are quite similar to the existing results .",
    "the integer parameter nstp refers to the number of time iterations during which the nonlinear term is slowly introduced in the real - time propagation .",
    "this number should be large ( typically more than 100,000 for small nonlinearity , for larger nonlinearity could be 1000,000 ) for good convergence ; this means that the nonlinearity should be introduced in small amounts over a large number of time iterations . in real - time propagation",
    ", npas refers to certain number of time iterations with the constant nonlinear term already introduced in nstp and should be small ( typically 1000 ) .",
    "nrun refers to time iterations with a modified nonlinearity so as to generate a non - equilibrium dynamics . in the imaginary - time propagation",
    "the parameters npas and nrun refer to certain number of time iterations with the constant nonlinear term already introduced in one step and should be large ( typically npas = 200,000 or more ) for good convergence .",
    "the programs write via statements write(1 , * ) , write(2 , * ) write(3 , * ) in files 1 , 2 , and 3 , respectively , the initial stationary wave function and that after nstp , and npas time iterations for real - time propagation and after npas and nrun time iterations for imaginary - time propagation .",
    "file 3 gives the final stationary wave function of the calculation .",
    "however , in the case of the anisotropic 3d programs realtime3d.f and imagtime3d.f , sections of the wave function as plotted in fig .",
    "[ fig4 ] ( b ) are written in files 1 , 2 , and 3 before nstp ( realtime3d.f ) and after npas ( imagtime3d.f ) iterations , and in files 11 , 12 , and 13 after npas ( realtime3d.f ) and nrun ( imagtime3d.f ) iterations .    in the real - time program",
    "a non - stationary oscillation is initiated by suddenly modifying the nonlinearity from g to g/2 after npas time iterations . during nrun time iterations the non - stationary dynamics",
    "is studied .",
    "the real - time programs write on file 8 the running time and rms size during non - stationary oscillation .",
    "in addition , these programs write in file 7 the values of nonlinearity g , space steps dx , dy , dz , time step dt , number of space mesh points n , number of time iterations nstp , npas , and nrun together with the values of normalization of the wave function , chemical potential , energy , rms size , value of the wave function at center , nonlinearity coefficient g.    below we provide some sample output listed on file 7 from the different programs using option = 2 . file 7 ( fort.7 ) represents the comprehensive result in each case .",
    "\\(1 ) program * imagtime1d.f *    ....      option =    2    # space stp n =      8000 # time stp :   npas =     200000 , nrun =      20000    nonlinearity g =       62.74200000    space step dx =      0.002500 , time step dt =      0.000020                       ----------------------------------------------------                      norm        chem         ener",
    "< x >        psi(0 )                     ---------------------------------------------------- initial :           1.0000     0.500000     0.500000     0.70711     0.75113 after npas iter . :",
    "0.9996    10.369462     6.256976     2.04957     0.40606 after nrun iter . :   0.9996    10.369462     6.256976     2.04957     0.40606                     ---------------------------------------------------- ....",
    "\\(2 ) program * imagtimesph.f *    ....      option =    2    # space stp n =      3000 # time stp : , npas =     200000 , nrun =      20000    nonlinearity g =      125.48400000    space step dx =      0.002500 , time step dt =      0.000020                       ----------------------------------------------------                      norm        chem         ener        < r >        psi(0 )                     ---------------------------------------------------- initial :           1.0000     1.500000     1.500000     1.22474     0.42378 after npas iter . :   0.9998     4.014113     3.070781     1.88214     0.17382 after nrun iter .",
    ":   0.9998     4.014113     3.070781     1.88214     0.17382                     ---------------------------------------------------- ....",
    "\\(3 ) program * imagtimecir.f *    ....      option =    2    # space stp n =      2000 # time stp : , npas =     200000 , nrun =     200000    nonlinearity g =       -2.50970000    space step dx =      0.002500 , time step dt =      0.000020                       ----------------------------------------------------                      norm        chem         ener",
    "< r >        psi(0 )                     ---------------------------------------------------- initial :           1.0000     1.000000     1.000000     1.00000     0.56419 after npas iter . :   1.0000     0.499772     0.770107     0.87758     0.67535 after nrun iter . :",
    "1.0000     0.499772     0.770107     0.87758     0.67535                     ---------------------------------------------------- ....",
    "\\(4 ) program * imagtime2d.f and imagtime2d.f90 *    ....       option =    2    anisotropy al =      2.000000    # space stp nx =       800 , ny =       800 # time stp : npas =      30000 , nrun =       5000    nonlinearity g =       12.54840000    space step dx =    0.020000 , dy =    0.020000    time step   dt =    0.000100                       -----------------------------------------------------",
    "norm        chem         ener        < r >        psi(0,0 )                     ----------------------------------------------------- initial :           1.0000     1.500000     1.500000     0.86603     0.67094 after npas iter .",
    ":   0.9999     3.254878     2.490493     1.17972     0.46325 after nrun iter .",
    ":   0.9999     3.254878     2.490493     1.17972     0.46325                     ----------------------------------------------------- ....",
    "\\(5 ) program * imagtimeaxial.f and imagtimeaxial.f90 *    ....    option =    2    anisotropy kap =      1.000000 , lam =      4.000000    # space stp nx =       500 ,",
    "ny =       500 # time stp : npas =      100000 , nrun =      20000    nonlinearity g =       18.81000000    space step dx =    0.020000 , dy =    0.020000    time step   dt =    0.000040                ------------------------------------------------------------------               norm     chem       energy     < rho >       < z >        < r >      psi(0 )              ------------------------------------------------------------------ initial    : 1.000    3.00000    3.00000    1.00000    0.35355",
    "1.06066    0.59883 npas iter : 1.000    4.36113    3.78228    1.32490    0.38049    1.37846    0.38129 nrun iter : 1.000    4.36113    3.78228    1.32490    0.38049    1.37846    0.38129              ------------------------------------------------------------------ ....    \\(6 ) program * imagtime3d.f and imagtime3d.f90 *    ....   option =    2    anisotropy al =      1.414214 , bl = 2.000000    # space stp nx =       240 , ny =       200 , nz =       160 # time stp : npas =       5000 , nrun =        500    nonlinearity g =       44.90700000    space step dx =    0.050000 , dy =    0.050000 , dz =    0.050000    time step   dt =    0.000400                      ------------------------------------------------------                      norm       chem         ener         < r >      psi(0,0,0 )                    ------------------------------------------------------ initial          :   1.0000       2.2071       2.2071      1.0505      0.5496 after npas iter . :   0.9997       4.3446       3.4862      1.4583      0.2888 after nrun iter . :   0.9997       4.3446       3.4862      1.4583      0.2888                    ------------------------------------------------------ ....    \\(7 ) program * realtime1d.f *    ....    option =    2    # space stp n =      5000 # time stp : nstp   1000000 , npas =      1000 , nrun =      40000    nonlinearity g =       62.74200000    space step dx =      0.010000 , time step dt =      0.000100                       ----------------------------------------------------                      norm        chem         ener",
    "< x >        psi(0 )                     ---------------------------------------------------- initial :           1.0000        0.500        0.500       0.707       0.751 after nstp iter . :",
    "1.0000       10.368        6.257       2.050       0.406 after npas iter . :   1.0000       10.375        6.257       2.047       0.406                     ---------------------------------------------------- ....",
    "\\(8 ) program * realtimesph.f *    ....    option =    2    # space stp n =      2000 # time stp : nstp =    1000000 , npas =       1000 , nrun =      40000    nonlinearity g =      125.48400000    space step dx =      0.010000 , time step dt =      0.000100                       ----------------------------------------------------                      norm        chem         ener",
    "< r >        psi(0 )                     ---------------------------------------------------- initial :           1.0000        1.500        1.500       1.225       0.424 after nstp iter . :   1.0000        4.015        3.071       1.881       0.174 after npas iter . :",
    "1.0000        4.011        3.071       1.884       0.174                     ---------------------------------------------------- ....",
    "\\(9 ) program * realtimecir.f *    ....    option =    2    # space stp n =      2000 # time stp : nstp =    1000000 , npas =       1000 , nrun =      40000    nonlinearity g =       12.54840000    space step dx =      0.010000 , time step dt =      0.000100                       ----------------------------------------------------                      norm        chem         ener",
    "< r >        psi(0 )                     ---------------------------------------------------- initial :           1.0000        1.000        1.000       1.000       0.564 after nstp iter . :   1.0000        2.255        1.708       1.308       0.391 after npas iter . :",
    "1.0000        2.255        1.708       1.308       0.391                     ---------------------------------------------------- ....",
    "\\(10 ) program * realtime2d.f and realtime2d.f90 *    ....      option =    2    anisotropy al =      1.000000    # space stp nx =       200 , ny =       200 # time stp : nstp =     100000 , npas =       1000 , nrun =       5000    nonlinearity g =       12.54840000    space step dx =    0.100000 , dy =    0.100000    time step   dt =    0.001000                       -----------------------------------------------------                      norm        chem         ener        < r >        psi(0,0 )                     ----------------------------------------------------- initial :            1.000        1.000        1.000       1.000       0.564 after nstp iter . :    1.000        2.256        1.708       1.307       0.392 after npas iter . :    1.000        2.257        1.708       1.305       0.392                     ----------------------------------------------------- ....    \\(11 ) program * realtimeaxial.f and realtimeaxial.f90 *    ....      option =    2    anisotropy kap =      1.000000 , lam =      4.000000    # space stp nx =       130 , ny =       130 # time stp : nstp =     100000 , npas =       1000 , nrun =      20000    nonlinearity g =       18.81000000    space step dx =    0.100000 , dy =    0.100000    time step   dt =    0.001000                -------------------------------------------------------                norm     chem      energy     < rho >      < z >        psi(0 )              ------------------------------------------------------- initial :    1.000      3.000      3.000      1.000",
    "0.354      0.587 nstp iter : 0.999      4.362      3.782      1.323",
    "0.381      0.376 npas iter : 1.000      4.362      3.782      1.327      0.379      0.376              ------------------------------------------------------- ....    \\(12 ) program * realtime3d.f and realtime3d.f90 *    ....    option =    2    anisotropy al =      1.414214 , bl =      2.000000    # space stp nx =       200 , ny =       160 , nz =       120 # time stp : nstp =      60000 , npas =       1000 , nrun =       4000    nonlinearity g =       22.45400000    space step dx =    0.100000 , dy =    0.100000 , dz =    0.100000    time step   dt =    0.002000                      ------------------------------------------------------                      norm       chem         ener         <",
    "r >      psi(0,0,0 )                    ------------------------------------------------------ initial :            1.000       2.207       2.207      1.051      0.550 after nstp iter . :    1.000       3.572       2.992      1.321      0.347 after npas iter . :    1.000       3.572       2.992      1.320      0.347                    ------------------------------------------------------ ....    [ 5.3 ]",
    ".convergence of result in the 1d ( x ) and radially - symmetric 3d ( @xmath258 ) cases for nonlinearities @xmath259 and 627.4 , calculated using the imaginary - time propagation programs imagtime1d.f [ eq . ( [ 1d2 ] ) , option 2 ] and imagtimesph.f [ eq . ( [ sph2 ] ) ,",
    "option 2 ] respectively , for various space step dx and time step dt .",
    "[ cols=\">,>,>,>,>,>\",options=\"header \" , ]     in table [ table5 ] we present results for the wave function at the center , rms size , and chemical potential for different nonlinearities in the anisotropic and circularly - symmetric 2d case calculated using the imaginary - time routine imagtime2d.f and imagtimecir.f , respectively . in the anisotropic case we used space step 0.02 and time step 0.0001 and in the circularly - symmetric case we used space step 0.0025 and time step 0.00002 .",
    "we also compare these results with those of ref .",
    "@xcite and establish more accurate results in the present numerical calculation .    in figs .",
    "[ fig3 ] ( a ) and ( b ) we plot the wave function profiles for the circularly - symmetric and anisotropic 2d cases using the programs imagtimecir.f and imagtime2d.f , respectively . in the anisotropic 2d case the anisotropy @xmath260 and nonlinearity @xmath261 . because of anisotropy the wave function in fig .",
    "[ fig3 ] ( b ) is compressed in the @xmath51 direction ( note the different scales in @xmath50 and @xmath51 directions of the plot . )    in table [ table6 ] we present results for the wave function at the center , rms sizes , and chemical potential for different nonlinearities in the axially - symmetric 3d case with @xmath262 and @xmath263 calculated using the imaginary - time routine imagtimeaxial.f and space step @xmath264 and time step @xmath265 0.0004 .",
    "we compare with the results of ref .",
    "@xcite and establish more accurate results .    in figs .",
    "[ fig4 ] ( a ) and ( b ) we plot the wave function profiles for the axially - symmetric and fully anisotropic 3d cases using the programs imagtimeaxial.f and imagtime3d.f , respectively . in the axially - symmetric 3d case the anisotropy",
    "@xmath266 @xmath267 and nonlinearity @xmath268 were employed . in the fully anisotropic 3d case the anisotropies @xmath82 , @xmath269 , and @xmath270 and nonlinearities @xmath271 and 11496.3",
    "the effect of the anisotropy is explicit in the 3d case in generating different profiles of the wave function along @xmath50 , @xmath51 , and @xmath52 directions for a fixed nonlinearity .",
    "next we consider the fully anisotropic case in three dimensions and compare our results with those of ref .",
    "@xcite calculated using the program imagtime3d.f .",
    "this case mimics a realistic case of experimental interest with na atoms .",
    "the completely anisotropic trap considered here is time - orbiting potential ( top ) trap with angular frequencies in the natural ratio ( @xmath272 , with @xmath273 rad / s .",
    "bec in such a system has been observed by kozuma _",
    "we also consider the spherical potential with @xmath274 rad / s @xcite .",
    "the s - wave scattering length of na is taken as @xmath275 nm , with @xmath276  the bohr radius @xcite .    in table",
    "[ table7 ] we exhibit the results for our calculations with the fully anisotropic potential together with those for the spherically - symmetric potential in three dimensions .",
    "the results for the spherically - symmetric potential are also calculated using the one - dimensional radially symmetric imaginary - time program imagtimesph.f in addition to the fully anisotropic program imagtime3d.f . in the anisotropic case",
    "the present results are consistent with those of ref .",
    "@xcite . in the spherical case",
    "the two sets of the present results ( calculated with the spherically - symmetric and anisotropic programs ) as well as those of ref .",
    "@xcite are consistent with each other .    ) , ( b ) spherically - symmetric case ( using program realtimesph.f with @xmath277 ) , ( c ) 2d circularly - symmetric case ( using program realtime2d.f with @xmath278 and @xmath262 ) , and ( d ) 3d axially - symmetric case ( using program realtimeaxial.f with @xmath279 and @xmath280 ) . the oscillation is started during time evolution by suddenly reducing the nonlinearity @xmath281 to half after the formation of the stationary condensate.,title=\"fig : \" ] ) , ( b ) spherically - symmetric case ( using program realtimesph.f with @xmath277 ) , ( c ) 2d circularly - symmetric case ( using program realtime2d.f with @xmath278 and @xmath262 ) , and ( d ) 3d axially - symmetric case ( using program realtimeaxial.f with @xmath279 and @xmath280 ) . the oscillation is started during time evolution by suddenly reducing the nonlinearity @xmath281 to half after the formation of the stationary condensate.,title=\"fig : \" ] ) , ( b ) spherically - symmetric case ( using program realtimesph.f with @xmath277 ) , ( c ) 2d circularly - symmetric case ( using program realtime2d.f with @xmath278 and @xmath262 ) , and ( d ) 3d axially - symmetric case ( using program realtimeaxial.f with @xmath279 and @xmath280 ) . the oscillation is started during time evolution by suddenly reducing the nonlinearity @xmath281 to half after the formation of the stationary condensate.,title=\"fig : \" ] ) , ( b ) spherically - symmetric case ( using program realtimesph.f with @xmath277 ) , ( c ) 2d circularly - symmetric case ( using program realtime2d.f with @xmath278 and @xmath262 ) , and ( d ) 3d axially - symmetric case ( using program realtimeaxial.f with @xmath279 and @xmath280 ) .",
    "the oscillation is started during time evolution by suddenly reducing the nonlinearity @xmath281 to half after the formation of the stationary condensate.,title=\"fig : \" ]    the input to our calculation is the nonlinearity coefficient @xmath282 , which is related to the scattering length @xmath12 , number of atoms @xmath10 and harmonic oscillator length @xmath283 via @xmath284 in eq .",
    "( [ ani2 ] ) .",
    "we provide the nonlinearity values of our calculations .",
    "although the present results are in agreement with those of ref .",
    "@xcite , a very precise comparison of the two calculations is not to the point as schneider and feder did not provide the nonlinearity coefficient @xmath285 used in their calculation .",
    "the real - time propagation programs calculate the stationary states under different trap symmetries .",
    "however , they are less efficient than the imaginary - time propagation programs in this task requiring more cpu time and producing less accurate results . however , unlike the imaginary - time propagation programs , the real - time programs can produce time evolution of non - stationary states also and next we present results of such time evolution using the real - time propagation programs under different trap symmetries .    in this subsection",
    "we present results for non - stationary oscillation obtained with the use of the real - time programs . after the calculation of the stationary profile",
    ", the nonlinearity is suddenly reduced to half .",
    "the wave function is no longer an eigenstate of the new nonlinear equation .",
    "this sets the system into non - stationary oscillation which continues for ever . in fig .",
    "[ fig5 ] we plot the rms size of the wave function vs. time @xmath187 showing this oscillation using the output from file 8 for ( a ) 1d case ( using program realtime1d.f ) , ( b ) radially - symmetric 3d case ( using program realtimesph.f ) , ( c ) cartesian 2d case with anisotropy @xmath262 ( using program realtime2d.f ) , and ( d ) 3d axially - symmetric case ( using program realtimeaxial.f ) with respective nonlinearities @xmath286 62.742 , 125.484 , 12.5484 , and 18.81 . the rms size at @xmath185 is the rms size of the stationary wave function obtained after npas time iterations .",
    "because of transverse instability , the real - time program realtime3d.f in 3d does not lead to stable sinusoidal oscillation as in other cases for a large change in nonlinearity ( nonlinearity reduced to half of its initial value ) as shown in fig .",
    "[ fig5 ] . only for small perturbation",
    "a sinusoidal oscillation is observed .",
    "however , we do not present a systematic study of such oscillation .",
    "in this paper we describe a split - step method for the numerical solution of the time - dependent nonlinear gp equation under the action of a general anisotropic 3d trap using real- and imaginary - time propagation .",
    "similar methods for 1d and anisotropic 2d traps are also described .",
    "the time propagation is carried with an initial input .",
    "the full hamiltonian is split into several spatial derivative and a non - derivative parts .",
    "the spatial derivative parts are treated by the crank - nicolson method .",
    "different spatial derivative and non - derivative parts are dealt in independent steps .",
    "this , so called split - step , method leads to highly stable and accurate results .",
    "we considered two types of time iterations @xmath152 real - time propagation and imaginary - time propagation . in the real - time propagation time evolution",
    "is performed with the original complex equation .",
    "the numerical algorithm in this case requires the use of complex variable but produces solution of non - stationary problems . in the imaginary - time propagation",
    ", the time variable is replaced by i ( @xmath287 times a new time variable , consequently the gp equation becomes real .",
    "the numerical solution of this equation can no longer yield the solution of non - stationary problems ; but yields very accurate solution of stationary ground state problems only , requiring much smaller cpu time .",
    "we provide the numerical algorithm in detail in 1d , 2d , and 3d for real- and imaginary - time propagations .",
    "we consider six different harmonic oscillator trap symmetries , e.g. , a 1d trap , a circularly - symmetric 2d trap , a radially - symmetric 3d trap , an anisotropic trap in 2d , an axially - symmetric 3d trap , and an anisotropic trap in 3d .",
    "each of these cases are treated with real- and imaginary - time propagation algorithms resulting in twelve different fortran 77 programs supplied .",
    "we use the imaginary - time propagation programs to provide results for different stationary properties of the condensate ( chemical potential , rms size , etc ) in 1d , 2d , 3d , for different nonlinearities @xmath288 and compare with previously obtained results @xcite .",
    "in addition we study a non - stationary oscillation initiated by suddenly altering the nonlinearity to half its initial value on these preformed condensates using the real - time propagation programs .",
    "in addition six fortran 90/95 programs are supplied in the case of two and three space variables .",
    "although the present programs are valid for the standard gp equation with cubic nonlinearity in a harmonic potential , they can be easily adopted for other types of bosonic @xcite or fermionic equations @xcite with different nonlinearities and under different types of potentials . to change the potential one should change the variable v in the subroutine initialize and the change in the nonlinearity can be performed in the subroutine nonlin .",
    "we thank dr .",
    "a. gammal for helpful comments regarding the solution of the gp equation in the circularly - symmetric and axially - symmetric cases .",
    "we thank prof .",
    "w. bao for the hospitality at the national university of singapore when this project was started .",
    "the research was partially supported by the cnpq and fapesp of brazil , and the institute for mathematical sciences of the national university of singapore .",
    "pm thanks the third world academy of sciences ( twas - unesco associateship at the center of excellence in the south ) , and department of science and technology , government of india for partial support .",
    "m. m. cerimele , m. l. chiofalo , f. pistella , s. succi , m. p. tosi , numerical solution of the gross - pitaevskii equation using an explicit finite - difference scheme : an application to trapped bose - einstein condensates , phys .",
    "e 62 ( 2000 ) 1382 - 1389 .",
    "m. c. lai , c. y. huang , t. s. lin , a simple dufort - frankel - type scheme for the gross - pitaevskii equation of bose - einstein condensates on different geometries , numerical methods partial diff . eqs . 20",
    "( 2004 ) 624 - 638 .",
    "m. m. cerimele , m. l. chiofalo , f. pistella , numerical solution of the stationary gross - pitaevskii equation : tests of a combined imaginary - time - marching technique with splitting , nonlinear analysis - theory methods applications 47 ( 2001 ) 3345 - 3356 .",
    "s. k. adhikari , stabilization of bright solitons and vortex solitons in a trapless three - dimensional bose - einstein condensate by temporal modulation of the scattering length , phys .",
    "a 69 ( 2004 ) 063613 ;      s. rajendran , p. muruganandam , m. lakshmanan , non - stationary excitations in bose - einstein condensates under the action of periodically varying scattering length with time - dependent frequencies , physica d 227 ( 2007 ) 1 - 7 .",
    "m. kozuma , l. deng , e. w. hagley , j. wen , r. lutwak , k. helmerson , s. l. rolston , w. d. phillips , coherent splitting of bose - einstein condensed atoms with optically induced bragg diffraction , phys .",
    "82 ( 1999 ) 871 - 880 .",
    "l. v. hau , b. d. busch , c. liu , z. dutton , m. m. burns , j. a. golovchenko , near - resonant spatial images of confined bose - einstein condensates in a 4-dee magnetic bottle , phys .",
    "a 58 ( 1998 ) r54-r57 ."
  ],
  "abstract_text": [
    "<S> here we develop simple numerical algorithms for both stationary and non - stationary solutions of the time - dependent gross - pitaevskii ( gp ) equation describing the properties of bose - einstein condensates at ultra low temperatures . </S>",
    "<S> in particular , we consider algorithms involving real- and imaginary - time propagation based on a split - step crank - nicolson method . in a one - space - variable form of the gp equation </S>",
    "<S> we consider the one - dimensional , two - dimensional circularly - symmetric , and the three - dimensional spherically - symmetric harmonic - oscillator traps . in the two - space - variable form we consider the gp equation in two - dimensional anisotropic and three - dimensional axially - symmetric traps . </S>",
    "<S> the fully - anisotropic three - dimensional gp equation is also considered . </S>",
    "<S> numerical results for the chemical potential and root - mean - square size of stationary states are reported using imaginary - time propagation programs for all the cases and compared with previously obtained results . also presented </S>",
    "<S> are numerical results of non - stationary oscillation for different trap symmetries using real - time propagation programs . </S>",
    "<S> a set of convenient working codes developed in fortran 77 are also provided for all these cases ( twelve programs in all ) . in the case of two or three space variables , </S>",
    "<S> fortran 90/95 versions provide some simplification over the fortran 77 programs , and these programs are also included ( six programs in all ) .    and    </S>",
    "<S> bose - einstein condensate ; gross - pitaevskii equation ; split - step crank - nicolson scheme ; real- and imaginary - time propagation ; fortran program ; partial differential equation    02.60.lj ; 02.60.jh ; 02.60.cb ; 03.75.-b    * program summary ( 1 ) *    title of program : imagtime1d.f    title of electronic file : imagtime1d.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 1 gbyte    programming language used : fortran 77    typical running time : minutes on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in one space dimension with a harmonic trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in imaginary time over small time steps . </S>",
    "<S> the method yields the solution of stationary problems .    </S>",
    "<S> * program summary ( 2 ) *    title of program : imagtimecir.f    title of electronic file : imagtimecir.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 1 gbyte    programming language used : fortran 77    typical running time : minutes on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in two space dimensions with a circularly - symmetric trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in imaginary time over small time steps . </S>",
    "<S> the method yields the solution of stationary problems .    </S>",
    "<S> * program summary ( 3 ) *    title of program : imagtimesph.f    title of electronic file : imagtimesph.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 1 gbyte    programming language used : fortran 77    typical running time : minutes on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in three space dimensions with a spherically - symmetric trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate </S>",
    "<S> .    method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in imaginary time over small time steps . </S>",
    "<S> the method yields the solution of stationary problems .    </S>",
    "<S> * program summary ( 4 ) *    title of program : realtime1d.f    title of electronic file : realtime1d.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 2 gbyte    programming language used : fortran 77    typical running time : minutes on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in one space dimension with a harmonic trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in real time over small time steps . </S>",
    "<S> the method yields the solution of stationary and non - stationary problems .    </S>",
    "<S> * program summary ( 5 ) *    title of program : realtimecir.f    title of electronic file : realtimecir.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 2 gbyte    programming language used : fortran 77    typical running time : minutes on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in two space dimensions with a circularly - symmetric trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in real time over small time steps . </S>",
    "<S> the method yields the solution of stationary and non - stationary problems .    </S>",
    "<S> * program summary ( 6 ) *    title of program : realtimesph.f    title of electronic file : realtimesph.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 2 gbyte    programming language used : fortran 77    typical running time : minutes on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in three space dimensions with a spherically - symmetric trap . the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in real time over small time steps . </S>",
    "<S> the method yields the solution of stationary and non - stationary problems .    </S>",
    "<S> * program summary ( 7 ) *    title of programs : imagtimeaxial.f and imagtimeaxial.f90    title of electronic file : imagtimeaxial.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 2 gbyte    programming language used : fortran 77 and fortran 90    typical running time : few hours on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in three space dimensions with an axially - symmetric trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in imaginary time over small time steps . </S>",
    "<S> the method yields the solution of stationary problems .    </S>",
    "<S> * program summary ( 8) *    title of program : imagtime2d.f and imagtime2d.f90    title of electronic file : imagtime2d.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 2 gbyte    programming language used : fortran 77 and fortran 90    typical running time : few hours on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in two space dimensions with an anisotropic trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in imaginary time over small time steps . </S>",
    "<S> the method yields the solution of stationary problems .    </S>",
    "<S> * program summary ( 9 ) *    title of program : realtimeaxial.f and realtimeaxial.f90    title of electronic file : realtimeaxial.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 4 gbyte    programming language used : fortran 77 and fortran 90    typical running time : hours on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in three space dimensions with an axially - symmetric trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in real time over small time steps . </S>",
    "<S> the method yields the solution of stationary and non - stationary problems .    </S>",
    "<S> * program summary ( 10 ) *    title of program : realtime2d.f and realtime2d.f90    title of electronic file : realtime2d.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 4 gbyte    programming language used : fortran 77 and fortran 90    typical running time : hours on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in two space dimensions with an anisotropic trap . the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in real time over small time steps . </S>",
    "<S> the method yields the solution of stationary and non - stationary problems .    </S>",
    "<S> * program summary ( 11 ) *    title of program : imagtime3d.f and imagtime3d.f90    title of electronic file : imagtime3d.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 4 gbyte    programming language used : fortran 77 and fortran 90    typical running time : few days on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in three space dimensions with an anisotropic trap . the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in imaginary time over small time steps . </S>",
    "<S> the method yields the solution of stationary problems .    </S>",
    "<S> * program summary ( 12 ) *    title of program : realtime3d.f and realtime3d.f90    title of electronic file : realtime3d.tar.gz    catalogue identifier :    program summary url :    program obtainable from : cpc program library , queen s university of belfast , n. ireland    distribution format : tar.gz    computers : pc / linux , workstation / unix    maximum ram memory : 8 gbyte    programming language used : fortran 77 and fortran 90    typical running time : days on a medium pc    unusual features : none    nature of physical problem : this program is designed to solve the time - dependent gross - pitaevskii nonlinear partial differential equation in three space dimensions with an anisotropic trap . </S>",
    "<S> the gross - pitaevskii equation describes the properties of a dilute trapped bose - einstein condensate .    </S>",
    "<S> method of solution : the time - dependent gross - pitaevskii equation is solved by the split - step crank - nicolson method by discretizing in space and time . the discretized equation is then solved by propagation in real time over small time steps . </S>",
    "<S> the method yields the solution of stationary and non - stationary problems . </S>"
  ]
}