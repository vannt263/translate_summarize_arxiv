{
  "article_text": [
    "companies assign their employees to different departments , large decision - making bodies split their members into expert committees , and university faculty form research groups : division of labor , and thus group formation , is everywhere . for a given assignment of agents to activities ( such as management , product development , or marketing ) to be successful , two considerations are particularly important : the agents need to be capable to work on their activity , and they should be willing to cooperate with other members of their group .",
    "many relevant aspects of this setting are captured by the _ group activity selection problem _ ( ) , introduced by darmann et al .  .",
    "in  players have preferences over pairs of the form ( activity , group size ) .",
    "the intuition behind this formulation is that certain tasks are best performed in small or large groups , and agents may differ in their preferences over group sizes ; however , they are indifferent about other group members identities . in the analysis of",
    ", desirable outcomes correspond to _ stable _ and/or _ optimal _ assignments of players to activities , i.e. , assignments that are resistant to player deviations and/or maximize the total welfare . in the work of darmann",
    ", players are assumed to have approval preferences , and a particular focus is placed on individually rational assignments with the maximum number of participants ; subsequently , @xcite   investigated a model where players submit ranked ballots .",
    "however , the basic model of  ignores the relationships among the agents : do they know each other ? are their working styles and personalities compatible ?",
    "typically , we can not afford to ask each agent about her preferences over all pairs of the form ( coalition , activity ) , as the number of possible coalitions grows quickly with the number of agents .",
    "a more practical alternative is to adopt the ideas of @xcite and assume that the relationships among the agents are encoded by a _ social network _",
    ", i.e. , an undirected graph where nodes correspond to players and edges represent communication links between them ; one can then require that each group is connected with respect to this graph .",
    "[ cols=\"<,<,^,^,^\",options=\"header \" , ]     [ table ]    in this paper we extend the basic model of  to take into account the agents social network .",
    "we formulate several notions of stability for this setting , including nash stability and core stability , and study the complexity of computing stable outcomes in our model .",
    "these notions of stability are inspired by the hedonic games literature @xcite and were applied in the  setting by @xcite and @xcite .",
    "now , hedonic games on social networks were recently considered by @xcite , who showed that if the underlying network is acyclic , stable outcomes are guaranteed to exist and some of the problems known to be computationally hard for the unrestricted setting become polynomial - time solvable .",
    "we obtain a similar result for , but only if several groups of agents can simultaneously engage in the same activity , i.e. , if the activities are _ copyable_. in contrast , we show that if each activity can be assigned to at most one coalition , finding a stable outcome is hard even if the underlying network is very simple .",
    "specifically , checking the existence of nash stable or core stable outcomes turns out to be np - hard even for very restricted classes of graphs , including paths , stars , and graphs with constant - size connected components .",
    "we believe that this result is remarkable since , in the context of cooperative games , such restricted networks usually enable one to design efficient algorithms for computing stable solutions ( see , e.g. , @xcite @xcite ; @xcite @xcite ; @xcite @xcite ) .    given these hardness results ,",
    "we switch to the fixed parameter tractability paradigm . in the context of ,",
    "a particularly relevant parameter is the number of activities : generally speaking , we expect the number of players to be considerably larger than the number of available activities .",
    "we show that for the restricted classes of networks used in our hardness proofs ( i.e. , paths , stars , and graphs with small connected components ) finding a nash stable outcome is in fpt with respect to the number of activities ; some of our results extend to the core stable outcomes and to somewhat more general networks ( though not to arbitrary networks ) .",
    "our results are summarized in table  [ table ] .",
    "for @xmath0 , let @xmath1=\\{1,2,\\ldots , s\\}$ ] .",
    "an instance of the _ group activity selection problem _ ( ) is given by a finite set of _ players _",
    "@xmath2 $ ] , a finite set of _ activities _ @xmath3 where @xmath4 and @xmath5 is the _ void activity _ , and a _ profile _",
    "@xmath6 of complete and transitive preference relations over the set of _ alternatives _",
    "\\{(a_{\\emptyset},1)\\}$ ] . intuitively , @xmath8 corresponds to staying alone and doing nothing ; multiple agents can make that choice independently from each other .",
    "we refer to subsets @xmath9 of players as _",
    "coalitions_. we say that two non - void activities @xmath10 and @xmath11 are _ equivalent _ if for every player @xmath12 and every @xmath13 $ ] it holds that @xmath14 . a non - void activity @xmath15 is called _ copyable _ if @xmath16 contains at least @xmath17 activities that are equivalent to @xmath10 ( including @xmath10 itself ) .",
    "we say that player @xmath12 _ approves _ an alternative @xmath18 if @xmath19 .",
    "an outcome of a  is an _",
    "assignment _ of activities @xmath20 to players @xmath21 , i.e. , a mapping @xmath22 . given an assignment @xmath22 and a non - void activity @xmath15 ,",
    "we denote by @xmath23 the set of players assigned to @xmath10 .",
    "also , if @xmath24 , we denote by @xmath25 the set of players assigned to the same activity as player @xmath12 ; we set @xmath26 if @xmath27 .",
    "an assignment @xmath22 of a  is _ individually rational _ ( ir ) if for every player @xmath12 with @xmath24 we have @xmath28 .",
    "a coalition @xmath29 and an activity @xmath15 _ strongly block _ an assignment @xmath22 if @xmath30 and @xmath31 for all @xmath32 .",
    "an assignment @xmath22 of a  is called _ core stable _ ( cr ) if it is individually rational , and there is no coalition @xmath29 and activity @xmath15 such that @xmath33 and @xmath10 strongly block @xmath34 . given an assignment @xmath22 of a , a player @xmath12 is said to have an _",
    "ns - deviation _ to activity @xmath15 if @xmath35 , that is , if @xmath36 would prefer to join the group @xmath37 .",
    "an assignment @xmath22 of a  is called _ nash stable _ ( ns ) if it is individually rational and no player @xmath38 has an ns - deviation to some @xmath15 .",
    "we now define a group activity selection problem where communication structure among players is restricted by an undirected graph .",
    "an instance of the _ group activity selection problem with graph structure _ ( ) is given by an instance @xmath39 of a  and a set of communication links between players @xmath40 .",
    "a coalition @xmath29 is said to be _ feasible _ if @xmath33 is connected in the graph @xmath41 .",
    "an outcome of a  is a _ feasible assignment _",
    "@xmath22 such that @xmath42 is a feasible coalition for every @xmath12 .",
    "we adapt the definitions of stability concepts to our setting as follows .",
    "we say that a deviation by a group of players is feasible if the deviating coalition itself is feasible ; a deviation by an individual player where player @xmath36 joins activity @xmath10 is feasible if @xmath43 is feasible .",
    "we modify the definitions in the previous section by only requiring stability against feasible deviations .",
    "note that an ordinary  ( without graph structure ) is equivalent to a   where the underlying graph @xmath41 is complete . in this paper",
    ", we will be especially interested in s where @xmath41 is _",
    "acyclic_. this restriction guarantees the existence of stable outcomes in many other cooperative game settings .",
    "however , this is not the case for s : here , both core and nash stable outcomes may fail to exist , even if @xmath41 is a path or a star .    [ ex : core : empty ] consider a  with @xmath44 , @xmath45 , @xmath46 , where preferences @xmath6 are given as follows : @xmath47 there are only four individually rational feasible assignments ; in each case , @xmath34 admits a strongly blocking feasible coalition and activity .",
    "first , when @xmath48 , @xmath49 , @xmath50 , the coalition @xmath51 together with activity @xmath10 strongly blocks  @xmath34 .",
    "second , when @xmath52 , @xmath53 , @xmath54 , the coalition @xmath55 together with activity @xmath11 strongly blocks @xmath34 .",
    "third , when @xmath52 , @xmath56 , @xmath57 , the coalition @xmath58 together with activity @xmath10 strongly blocks @xmath34 . finally , when @xmath59 , @xmath53 , and @xmath54 , the coalition @xmath60 together with activity @xmath11 strongly blocks @xmath34 .",
    "similarly , a nash stable outcome is not guaranteed to exist even for s on paths .",
    "[ ex : ns : empty ] consider a two - player   where player 1 is happy to participate in any activity as long as she is alone , and player 2 always wants to participate in an activity with player 1 .",
    "this instance admits no nash stable outcomes : if player 1 engages in an activity , then player 2 wants to join her coalition , causing player 1 to deviate to another ( possibly void ) activity .",
    "however , if all activities are copyable , we can effectively treat  as a hedonic game on a graph .",
    "in particular , we can invoke a famous result of @xcite concerning the stability of non - transferable utility games on trees .",
    "thus , requiring all activities to be copyable allows us to circumvent the non - existence result for the core ( example  [ ex : core : empty ] ) .",
    "the argument is constructive .",
    "[ thm : core : copyable ] for every  where each activity @xmath15 is copyable and @xmath41 is acyclic , a core stable feasible assignment exists and can be found in time polynomial in @xmath61 and  @xmath17 .",
    "now , the stalker game in example  [ ex : ns : empty ] does not admit a nash stable outcome even if we make all activities copyable .",
    "however , for copyable activities we can still find a nash stable outcome in polynomial time if the social network is acyclic .",
    "[ thm : ns : copyable ] given an instance @xmath62 of  where each activity @xmath15 is copyable and the graph @xmath41 is acyclic , one can decide whether it admits a nash stable outcome in time polynomial in @xmath61 and @xmath17 .",
    "if the input graph @xmath63 is a forest , we can process each of its connected components separately , so we assume that @xmath63 is a tree .",
    "we choose an arbitrary node as the root and construct a rooted tree by orienting the edges in @xmath64 towards the leaves . then , for each player @xmath36 , each activity",
    "@xmath10 and each @xmath65 $ ] and @xmath66 $ ] we set @xmath67 to _ true _ if the following condition holds : there exists a feasible assignment @xmath34 for the subtree rooted at @xmath36 where @xmath68 , @xmath69 , each player in @xmath70 likes @xmath71 at least as much as any alternative she can deviate to ( including the void activity ) , and no player who is not in @xmath70 has an ns - deviation .",
    "otherwise , we set @xmath67 to _ false_.    for each player @xmath12 , each alternative @xmath72 , and each @xmath73 $ ] , we initialize @xmath74 to _ true _ if @xmath75 and @xmath36 weakly prefers @xmath18 to any alternative of size @xmath76 , and we set @xmath74 to _ false _ otherwise .",
    "then , for @xmath12 from the bottom to the root , we iterate through all the children of @xmath36 and update @xmath67 one by one ; more precisely , for each child @xmath77 of @xmath36 and for @xmath78 , we set @xmath67 to _ true _ if there exists an @xmath79 $ ] such that both @xmath80 and @xmath81 are _ true _ , or @xmath67 is _ true _ and there exists @xmath82 such that @xmath83 is _ true _ and neither @xmath36 nor @xmath77 want to move across the `` border '' , i.e. , @xmath84 and @xmath85 .",
    "it is easy to see that a nash stable assignment exists if and only if @xmath86 is _ true _ for some alternative @xmath72 , where @xmath87 is the root of the rooted tree .",
    "if this is the case , a nash stable feasible assignment can be found using dynamic programming .",
    "we now move on to the case where each activity can be used at most once .",
    "we will show that computing nash stable outcomes of s is np - complete even when the underlying network is a path , a star , or a graph with constant size connected components .",
    "this problem is in np for any social network : given an assignment , we can easily check whether it is nash stable .",
    "our proof for paths is by reduction from a restricted version of the np - complete problem rainbow matching . given a graph @xmath88 , a _ proper edge coloring _ is a mapping @xmath89 where @xmath90 for all edges @xmath91 such that @xmath92 , @xmath93 .",
    "without loss of generality , we assume that @xmath94 is surjective .",
    "a _ properly edge - colored graph _",
    "@xmath95 is a graph together with a proper edge coloring . a matching @xmath96 in an edge colored graph @xmath95",
    "is called a _ rainbow matching _ if all edges of @xmath96 have different colors .",
    "an instance of rainbow matching is a graph @xmath88 with a proper edge coloring @xmath94 and an integer @xmath97 .",
    "it is a `` yes''-instance if @xmath88 admits a rainbow matching with at least @xmath97 edges and a `` no''-instance otherwise .",
    "@xcite show that rainbow matching remains np - complete even for properly edge - colored paths .",
    "[ thm : hardness : path : ns ] given an instance of  whose underlying graph is a path , it is np - complete to determine whether it has a nash stable feasible assignment .",
    "the hardness proof proceeds by a reduction from path rainbow matching .",
    "given an instance @xmath98 of path rainbow matching where the set of colors is given by @xmath99 where @xmath100 , we construct an instance of  on a path as follows .",
    "we create a vertex player @xmath101 for each @xmath102 and an edge player @xmath103 for each @xmath104 , and align them in the order consistent with @xmath105 ; specifically , we let @xmath106 and @xmath107 . to the right of the graph @xmath108",
    ", we attach a path that consists of `` garbage collectors '' @xmath109 and @xmath110 copies @xmath111 of the stalker game where @xmath112 and @xmath113 for each @xmath114 .",
    "we introduce a color activity @xmath115 for each color @xmath114 .",
    "each vertex player @xmath101 approves color activities @xmath116 of its adjacent edges @xmath103 with size @xmath117 ; each edge player @xmath103 approves the color activity @xmath116 of its color with size @xmath117 ; each garbage collector @xmath118 approves any color activity @xmath115 with size @xmath76 ; finally , for players in @xmath119 , @xmath114 , player @xmath120 approves its color activity @xmath115 with size @xmath76 , whereas player @xmath121 approves @xmath115 with size @xmath122 .",
    "we will now argue that @xmath88 contains a rainbow matching of size at least @xmath97 if and only if there exists a nash stable feasible assignment .",
    "suppose that there exists a rainbow matching @xmath96 of size @xmath97 .",
    "we construct a feasible assignment @xmath34 where for each @xmath123 we set @xmath124 , each garbage collector @xmath118 , @xmath125 $ ] , is arbitrarily assigned to one of the remaining @xmath126 color activities , and the remaining players are assigned to the void activity .",
    "the assignment @xmath34 is nash stable , since every garbage collector as well as every edge or vertex player assigned to a color activity are allocated their top alternative , and no remaining player has an ns feasible deviation .",
    "conversely , suppose that there is a nash stable feasible assignment @xmath34 .",
    "let @xmath127 .",
    "we will show that @xmath96 is a rainbow matching of size at least @xmath97 . to see this , notice that @xmath34 can not allocate a color activity to a member of @xmath119 , since otherwise no feasible assignment would be nash stable .",
    "further , at most @xmath126 color activities are allocated to the garbage collectors , which means that at least @xmath97 color activities should be assigned to vertex and edge players . the only individually rational way to do",
    "this is to select triples of the form @xmath128 where @xmath129 and assign to them their color activity @xmath116 .",
    "thus , @xmath96 is a rainbow matching of size at least @xmath97 .    for s on stars we provide a reduction from the np - complete problem minimum maximal matching ( mmm ) .",
    "an instance of mmm is a graph @xmath88 and a positive integer @xmath130 .",
    "it is a `` yes''-instance if @xmath88 admits a maximal matching with at most @xmath97 edges , and a `` no''-instance otherwise .",
    "the problem remains np - complete for bipartite graphs @xcite .",
    "[ thm : hardness : star : ns ] given an instance of  whose underlying graph is a star , it is np - complete to determine whether it has a nash stable feasible assignment .    to prove np - hardness ,",
    "we reduce from mmm on bipartite graphs . given a bipartite graph @xmath131 and an integer @xmath97",
    ", we create a star with center @xmath115 and @xmath132 leaves : one leaf for each vertex player @xmath133 plus one stalker @xmath134 .",
    "we introduce an activity @xmath135 for each @xmath136 , and two additional activities @xmath10 and @xmath11 .",
    "a player @xmath133 approves @xmath137 for each activity @xmath135 such that @xmath138 as well as @xmath139 and prefers the former to the latter .",
    "that is , @xmath140 for every @xmath136 with @xmath138 ; @xmath101 is indifferent among the activities associated with its neighbors in the graph , that is , @xmath141 for all @xmath142 such that @xmath143 . the center player @xmath115 approves both @xmath139 and @xmath144 , and prefers the former to the latter , i.e. , @xmath145 .",
    "finally , the stalker @xmath134 only approves @xmath146 .",
    "we now show that @xmath88 admits a maximal matching @xmath96 with at most @xmath97 edges if and only if our instance of  admits a nash stable assignment .",
    "suppose that @xmath88 admits a maximal matching @xmath96 with at most @xmath97 edges .",
    "we construct a feasible assignment @xmath34 by setting @xmath147 for each @xmath148 , assigning @xmath149 vertex players and the center to @xmath10 , and assigning the remaining players to the void activity .",
    "clearly , the center @xmath115 has no incentive to deviate and no vertex player in a singleton coalition wants to deviate to the coalition of the center .",
    "further , no vertex @xmath101 has an ns - deviation to an unused activity @xmath135 , since if @xmath34 admits such a deviation , this would mean that @xmath150 forms a matching , a contradiction with the maximality of @xmath96 .",
    "finally , the stalker player has no incentive to deviate since the center player does not play @xmath11 .",
    "hence , @xmath34 is nash stable .",
    "conversely , suppose that there exists a nash stable feasible assignment @xmath34 and let @xmath151 .",
    "we will show that @xmath96 is a maximal matching of size at most @xmath97 . by nash stability",
    ", the stalker player should not have an incentive to deviate , and hence the center player and @xmath149 vertex players are assigned to activity @xmath10 .",
    "it follows that @xmath97 vertex players are not assigned to @xmath10 , and therefore @xmath152 .",
    "moreover , @xmath96 is a matching since each vertex player is assigned to at most one activity , and by individual rationality each activity can be assigned to at most one player .",
    "now suppose towards a contradiction that @xmath96 is not maximal , i.e. , there exists an edge @xmath153 such that @xmath150 is a matching .",
    "this would mean that under @xmath34 no player is assigned to @xmath135 and @xmath101 is assigned to the void activity ; hence , @xmath101 has an ns - deviation to @xmath135 , contradicting the nash stability of  @xmath34 .",
    "in the analysis of cooperative games on social networks one can usually assume that the social network is connected : if this is not the case , each connected component can be processed separately .",
    "this is also the case for  as long as all activities are copyable . however , if each activity can only be used by a single group , different connected components are no longer independent , as they have to choose from the same pool of activities .",
    "indeed , we will now show that the problem of finding nash stable outcomes remains np - hard even if the size of each connected component is at most four .",
    "our hardness proof for this problem proceeds by reduction from a restricted version of 3sat .",
    "specifically , we consider ( 3,b2)-sat : in this version of 3sat each clause contains exactly @xmath117 literals , and each variable occurs exactly twice positively and twice negatively .",
    "this problem is known to be np - complete @xcite .",
    "[ thm : hardness : smallcomponent : ns ] given an instance of  where each connected component of the underlying graph has size at most @xmath154 , it is _ np_-complete to determine whether it has a nash stable feasible assignment .",
    "we reduce from ( 3,b2)-sat .",
    "consider a formula @xmath94 with variable set @xmath155 and clause set @xmath156 , where for each variable @xmath157 we write @xmath158 and @xmath159 for the two positive occurrences of @xmath160 , and @xmath161 and @xmath162 for the two negative occurrences of @xmath160 .",
    "for each @xmath157 , we introduce four players @xmath163 , which correspond to the four occurrences of @xmath160 . for each clause @xmath164",
    ", we introduce one stalker @xmath165 and three other players @xmath166 , and @xmath167 .",
    "the network @xmath41 consists of one component for each clause  a star with center @xmath165 and leaves @xmath120 , @xmath121 , and @xmath167and of two components for each variable @xmath157 consisting of a single edge each : @xmath168 and @xmath169 .",
    "thus , the size of each component of this graph is at most  @xmath154 .    for each @xmath157",
    "we introduce one variable activity @xmath160 , two positive literal activities @xmath158 and @xmath159 , two negative literal activities @xmath170 and @xmath171 , and two further activities @xmath172 and @xmath173 .",
    "also , we introduce an activity @xmath115 for each clause @xmath174 . thus ,",
    "@xmath175 for each @xmath157 the preferences of the positive literal players @xmath158 and @xmath159 are given as follows : @xmath176 similarly , for each @xmath157 the preferences of the negative literal players @xmath170 and @xmath171 are given as follows : @xmath177 in a nash stable assignment none of the activities @xmath172 , @xmath173 , @xmath8 can be assigned to literal players . hence , there are only two possible cases : first , both players @xmath158 and @xmath159 are assigned to @xmath160 , and players @xmath170 and @xmath171 are assigned to @xmath170 and @xmath171 , respectively ; second , both players @xmath170 and @xmath171 are assigned to @xmath160 , and players @xmath158 and @xmath159 are assigned to @xmath158 and @xmath159 , respectively .    for players in @xmath119 where @xmath178 , the preferences are given by @xmath179 that is , players @xmath120 , @xmath121 , and @xmath167 prefer to engage alone in their approved literal activity , whereas @xmath165 wants to join one of the adjacent leaves whenever @xmath180 and that leaf is assigned a literal activity ; however , the leaf would then prefer to switch to the void activity .",
    "this means that if there exists a nash stable outcome , at least one of the literal activities must be used outside of @xmath119 , and some leaf and the stalker @xmath165 must be assigned to activity @xmath115 .",
    "we will show that @xmath94 is satisfied by some assignment if and only if there exists a nash stable outcome .",
    "suppose that there exists a truth assignment that satisfies @xmath94 .",
    "first , for each variable @xmath160 that is set to true , we assign positive literal activities @xmath158 and @xmath159 to the positive literal players @xmath158 and @xmath159 , respectively , and assign @xmath160 to the negative literal players @xmath170 and @xmath171 . for each variable @xmath160 that is set to false ,",
    "we assign negative literal activities @xmath170 and @xmath171 to the negative literal players @xmath170 and @xmath171 , respectively , and assign @xmath160 to the positive literal players @xmath158 and @xmath159 .",
    "note that this procedure uses at least one of the literal activities @xmath181 , @xmath182 and @xmath183 of each clause @xmath174 , since the given truth assignment satisfies @xmath94 .",
    "then , for each clause @xmath174 , we select a player @xmath184 whose approved activity @xmath185 has been assigned to some literal player , and assign @xmath184 and the stalker to @xmath115 , and the rest of the clause players to their approved literal activity if it is not used yet , and to the void activity otherwise .",
    "it is easy to see that the resulting assignment @xmath34 is nash stable .",
    "conversely , suppose that there exists a nash stable feasible assignment @xmath34 . by nash stability , for each variable @xmath186 , either a pair of positive literal players @xmath158 and @xmath159 or a pair of negative literal players @xmath187 and @xmath171 should be assigned to the corresponding pair of literal activities ; in addition , for each clause @xmath174 , the stalker @xmath165 and one of the players @xmath120 , @xmath121 , and @xmath167 should engage in the activity @xmath115 , thereby implying that the approved literal activity of the respective leaf should be assigned to some literal players .",
    "then , take the truth assignment that sets the variable @xmath160 to true if its positive literal players @xmath158 and @xmath159 are assigned to positive literal activities @xmath158 and @xmath159 ; otherwise , @xmath160 is set to false .",
    "this assignment can be easily seen to satisfy @xmath94 .",
    "in the instances of  that are created in our hardness proofs , the number of activities is unbounded .",
    "it is thus natural to wonder what can be said when there are few activities to be assigned .",
    "we will show that for each of the restricted families of graphs considered in the previous section ,  is fixed parameter tractable with respect to the number of activities .",
    "the basic idea behind each of the three algorithms is that we fix a set of activities that will be assigned to the players , and for each possible subset @xmath188 of activities we check whether there exists a stable assignment using the activities from that subset only .",
    "our algorithms for paths and for small components use dynamic programming , allowing us to build up the set @xmath189 step - by - step .",
    "we begin by giving the dynamic program that works for paths .",
    "we consider the path from left to right , and , for each initial segment of the path , guess a set @xmath190 of activities that will be used in that segment of players . for each choice of these sets ,",
    "we keep track of whether it is possible to construct an assignment that does not admit an ns - deviation within the initial segment under consideration .",
    "[ thm : fpt : path : ns ] there exists an algorithm that , given an instance of  whose underlying graph is a path , checks whether this instance has a nash stable feasible assignment and finds one if it exists , and runs in time @xmath191    suppose that @xmath2 $ ] and @xmath192 .",
    "first , we guess a subset @xmath188 of non - void activities to be used ; there are @xmath193 possibilities , so we try them all . for each @xmath189 , we solve the problem by dynamic programming . for each @xmath194 $",
    "] , each @xmath190 , each alternative @xmath195 \\cup \\{(a_{\\emptyset},1)\\}$ ] , and each number @xmath73 $ ] , we let @xmath196 be _ true _ if there exists a feasible assignment @xmath197 \\rightarrow b^{\\prime}\\cup \\{a_{\\emptyset}\\}$ ] with the following properties :    * each activity in @xmath198 is assigned to some player in @xmath199 $ ] ; * the @xmath200 players in @xmath201 belong to the same group as @xmath36 and weakly prefer @xmath18 to @xmath202 for each @xmath203 ; * player @xmath204 weakly prefers @xmath18 to the coalition he would end up in by joining his predecessor ; * player @xmath205 weakly prefers his alternative at @xmath34 to @xmath206 ; and * the rest of the players in @xmath207 weakly prefer their alternative under @xmath34 to engaging alone in any of the activities in @xmath208 and have no ns feasible deviation to activities in @xmath198 .",
    "otherwise , we let @xmath196 be _",
    "false_.    for player",
    "@xmath209 , if @xmath210 , @xmath75 , and player @xmath76 weakly prefers @xmath18 to each alternative @xmath202 such that @xmath203 , we set @xmath211 to _ true _ and otherwise to _ false_.    for @xmath212 , @xmath196 is _ true _ only if player @xmath36 weakly prefers @xmath18 to @xmath202 for each @xmath203 , and in addition , either    * @xmath75 , and players @xmath36 and @xmath213 can be _ separated _ from each other , i.e. , there exists @xmath82 such that @xmath214 is true , @xmath215 and @xmath216 , or * @xmath217 and @xmath218 is _",
    "true_.    if the condition above is not satisfied , then @xmath196 is set to _ false_. it is not difficult to see that a nash stable assignment exists if and only if @xmath219 is _ true _ for some alternative @xmath72 and some @xmath220 .",
    "the bound on the running time is immediate .",
    "our algorithm for networks with small connected components is similar to the dynamic program we just discussed .",
    "we essentially pretend that the components are arranged in a `` path '' , and run the algorithm as before . within each component",
    ", we have enough time to consider all possible assignments , allowing us to treat components as `` big vertices '' .",
    "the resulting algorithm is fpt with respect to the combined parameter @xmath221 , where @xmath115 is a bound on the size of the components of the network .",
    "[ thm : fpt : smallcomponents : ns ] there exists an algorithm that given an instance of  on a graph with constant - size connected components checks whether it has a nash stable feasible assignment , finds one if it exists , and runs in time @xmath222 , where @xmath115 is the maximum size of a connected component and @xmath97 is the number of connected components .",
    "we give a dynamic programming algorithm .",
    "suppose our graph @xmath41 has @xmath97 connected components @xmath223 .",
    "for each @xmath224 $ ] , each set @xmath220 of activities assigned to @xmath21 , and each set @xmath190 of activities assigned to @xmath225 , we let @xmath226 denote whether there is such an assignment that gives rise to a nash stable outcome . specifically , @xmath226 is _ true _ if and only if there exists an individually rational feasible assignment @xmath227 such that    * @xmath34 uses exactly the activities in @xmath198 , i.e. , @xmath228 for all @xmath229 and @xmath230 for all @xmath231 , and * no player in @xmath225 has an ns - deviation to an activity in @xmath198 or to an activity in @xmath232 .    for @xmath209 , each @xmath220 , and each @xmath233 ,",
    "we compute the value of @xmath234 by trying all possible mappings @xmath235 , and checking whether it is an individually rational feasible assignment using all activities in @xmath198 and such that no player in @xmath236 has an ns - deviation to a used activity in @xmath198 or an unused activity in @xmath232 . for @xmath237 , each @xmath220 , and @xmath190",
    ", we set @xmath226 to _ true _ if there exists a bipartition of @xmath198 into @xmath238 and @xmath239 such that @xmath240 is true and there exists a mapping @xmath241 such that @xmath34 is an individually rational feasible assignment using all the activities in @xmath239 , and no player in @xmath242 has an ns - deviation to a used activity in @xmath239 or an unused activity in @xmath243 .",
    "it is not difficult to see that a nash stable solution exists if and only if @xmath244 is _ true _ for some @xmath220 .",
    "if this is the case , such a stable feasible assignment can be found using standard dynamic programming techniques .",
    "the bound on the running time is immediate .    for networks given by star graphs",
    ", we use a different technique to obtain an fpt result , namely ( derandomized ) color coding .",
    "the algorithm begins by guessing the alternative @xmath18 assigned to the center player .",
    "next , we again guess the precise set @xmath189 of activities in use by the players not assigned to alternative @xmath18 .",
    "we then randomly color leaf players by activities in @xmath189 ( or by the void activity ) , rejecting colorings that are infeasible or must lead to ns deviations .",
    "crucially , the latter task reduces to straightforward counting questions , which allows this method to succeed .",
    "[ thm : fpt : star : ns ] there exists an algorithm that given an instance of  on a star checks whether it has a nash stable feasible assignment , finds one if it exists , and runs in time @xmath245 .    for each @xmath72 and @xmath246",
    ", we will check whether there exists a nash stable assignment such that the center @xmath115 and @xmath247 leaves engage in @xmath10 , exactly @xmath248 leaf players are assigned to activities in @xmath189 , and the rest of the players are assigned to the void activity .",
    "we will check whether the center player @xmath115 weakly prefers @xmath18 to every alternative @xmath249 .",
    "if this is the case , we will proceed ; otherwise , there is no nash stable outcome with the above properties , since the center player would have an incentive to deviate .",
    "now we will check whether there is an assignment of activities in @xmath189 to leaf players that gives rise to a nash stable outcome . to this end",
    ", we use the color - coding technique to design a randomized algorithm .",
    "we ` color ' each leaf player using colors in @xmath189 independently and uniformly at random .",
    "suppose that there exists a nash stable assignment @xmath34 as described above . then , the probability that the players who engage in activities from @xmath189 on their own ( denote this set by @xmath33 ) are assigned these activities by a coloring @xmath250 chosen at random is @xmath251 : there are @xmath252 possible colorings , and @xmath253 of them coincide with @xmath34 on @xmath33",
    ". we can then derandomize our algorithm using a family of @xmath97-perfect hash functions @xcite .",
    "now , fix a coloring @xmath254 .",
    "we seek to assign each player @xmath255 to one of the activities , namely either to @xmath10 , to @xmath256 , or to @xmath5 , in such a way that exactly one agent of each color engages in the color activity and @xmath97 players including the center are assigned to @xmath10 .",
    "we will show that there exists a polynomial - time algorithm that finds a nash stable outcome compatible with @xmath250 , or determines that no such assignment exists .",
    "for each @xmath257 , we denote by @xmath258 the set of players of color @xmath11 .    for each color @xmath257 , each @xmath259 , and @xmath260",
    ", we will first determine whether @xmath36 can be assigned to @xmath11 , and exactly @xmath261 players in @xmath262 can be assigned to activity @xmath10 ; we denote this subproblem by @xmath263 .",
    "we initialize @xmath263 to _ true _",
    "if @xmath264 , player @xmath36 weakly prefers @xmath144 to every alternative @xmath265 such that @xmath266 , and the players @xmath36 and @xmath115 can be _ separated _ from each other , i.e. , @xmath267 or @xmath36 weakly prefers @xmath144 to @xmath206 . otherwise , we set @xmath263 to _",
    "we then iterate through all the players @xmath268 and update @xmath263 one by one . specifically , we set @xmath263 to _ true _ if    * @xmath269 is true and player @xmath77 can be assigned to @xmath10 , i.e. , @xmath77 weakly prefers @xmath18 to every alternative @xmath265 such that @xmath266 ; or * @xmath263 is true and player @xmath77 can be assigned to @xmath5 , i.e. , @xmath77 weakly prefers @xmath270 to every alternative @xmath265 such that @xmath266 and @xmath206 .",
    "otherwise , we set @xmath263 to _ false_.    now , we will determine whether there are exactly @xmath261 players in @xmath21 who can be engaged in @xmath10 ; we denote this subproblem by @xmath271 . for each @xmath272 $ ] , we initialize @xmath271 to _ true _ if @xmath273 and @xmath271 to _ false _ otherwise . then , we iterate through all the colors @xmath257 and update @xmath271 : for each @xmath257 and each @xmath274 , we set @xmath271 to _ true _ if there exists @xmath275 such that @xmath276 is true for some @xmath277 and @xmath278 is true ; otherwise , we set @xmath271 to _",
    "false_.    finally , we reject the coloring if @xmath279 is false .",
    "it is clear that the algorithm does not reject the coloring if there exists a nash stable feasible assignment that is compatible with @xmath250 .",
    "we omit the proof for the bound on the running time .",
    "by adapting the reductions for nash stability , we can show that checking the existence of a core stable outcome is also np - hard .",
    "this result holds for all classes of graph families that we have considered .",
    "[ thm : hardness : path : core ] given an instance of  whose underlying graph is a path , a star , or has connected components whose size is bounded by @xmath117 , it is _",
    "np_-complete to determine whether it has a core stable feasible assignment .    to verify that a given feasible assignment is core stable , it suffices to check that for every alternative @xmath18",
    "there is no connected coalition with at least @xmath97 players who strictly prefer @xmath18 to the alternative of their current coalition . for the networks we consider this can be done in polynomial time , and hence our problem is in np .",
    "the hardness reductions are similar to the respective reductions for nash stability ; essentially , we have to replace copies of the stalker game with copies of the game with an empty core .    * paths * we prove the hardness via a reduction from path rainbow matching .",
    "given such an instance @xmath98 where @xmath100 , we first construct the graph @xmath280 as defined in the proof of theorem [ thm : hardness : path : ns ] .",
    "to the right of the graph @xmath280 , we attach a path that consists of garbage collectors @xmath109 and @xmath110 copies @xmath111 of empty - core instances of example [ ex : core : empty ] where @xmath281 and @xmath282 for each @xmath114 .",
    "for each color @xmath114 , we introduce a color activity @xmath115 , and introduce additional activity @xmath283 , which will be used only among players in @xmath119 ; specifically , we set @xmath284 .",
    "each vertex player @xmath102 , edge player @xmath104 and garbage collector @xmath118 has the same approval preference as in the proof of theorem [ thm : hardness : path : ns ] .",
    "the preference for players in @xmath119 @xmath285 is cyclic and given by @xmath286    we will now argue that @xmath88 contains a rainbow matching of size at least @xmath97 if and only if there exists a core stable feasible assignment .",
    "suppose that there exists a rainbow matching @xmath96 of size @xmath97 .",
    "we construct a feasible assignment @xmath34 where for each @xmath123 we set @xmath124 , each garbage collector @xmath118 , @xmath125 $ ] , is arbitrarily assigned to one of the remaining @xmath126 color activities , each triple of @xmath120 , @xmath121 , and @xmath167 @xmath285 is assigned to @xmath283 , and the remaining players are assigned to the void activity .",
    "the assignment @xmath34 is core stable , since every garbage collector as well as every edge or vertex player assigned to a color activity are allocated their top alternative , and no connected subsets of the remaining players together with color activity can strongly block @xmath34 .",
    "conversely , suppose that there is a core stable feasible assignment @xmath22 .",
    "let @xmath127 .",
    "we will show that @xmath96 is a rainbow matching of size at least @xmath97 . to see this , notice that at @xmath34 , all the color activities should be played outside @xmath119 s , since otherwise no core stable assignment would exist as we have seen in example [ ex : core : empty ] .",
    "further , at most @xmath126 colour activities are played among the garbage collectors , which means that at least @xmath97 colour activities should be assigned to vertex and edge players .",
    "again , the only individual rational way to do this is to select triples of the form @xmath128 where @xmath129 and assign to them their colour activity @xmath116 ; thus , @xmath96 is a rainbow matching of size at least @xmath97 .    * stars * we reduce from a restricted variant of mmm where the graph is a bipartite graph .    given a bipartite graph @xmath131 and an integer @xmath97",
    ", we create a star with center @xmath115 and the @xmath287 leaves : one leaf for each vertex @xmath133 plus two other players @xmath288 and @xmath289 .",
    "we then introduce an activity @xmath135 for each @xmath136 , and three other simple activities @xmath10 , @xmath160 , and @xmath290 .",
    "a player @xmath133 approves @xmath291 for each @xmath136 such that @xmath292 as well as @xmath293 and prefers the former to the latter .",
    "that is , @xmath140 for any @xmath136 with @xmath292 ; @xmath101 is indifferent among activities associated with its neighbors in the graph , that is , @xmath141 for all @xmath142 such that @xmath294 . the center player @xmath115 strictly prefers @xmath293 to any other alternative , and has the same cyclic preferences over the alternatives of @xmath160 and @xmath290 as in example [ ex : core : empty ] together with players @xmath288 and @xmath289 , given by @xmath295 here , @xmath288 s ( respectively , the center @xmath115 and the player @xmath289 ) preference corresponds to the one for player @xmath76 ( respectively , player @xmath122 and player @xmath117 ) in example [ ex : core : empty ] .",
    "we will show that @xmath88 contains a maximal matching of size at most @xmath97 if and only if there exists a core stable feasible assignment in a similar manner to the previous proof .",
    "suppose that @xmath88 admits a maximal matching @xmath96 with at most @xmath97 edges .",
    "we construct a feasible assignment @xmath34 by setting @xmath147 for each @xmath296 , and assigning @xmath149 non - matched vertex players and the center to @xmath10 , assigning @xmath289 to @xmath290 , and assigning the remaining players to the void activity .",
    "the center @xmath115 is allocated to her top alternative , and hence no connected subset of the three players @xmath297 and @xmath289 together with activity @xmath298 , and @xmath299 strongly blocks @xmath34 .",
    "further , no vertex player @xmath101 together with an unused vertex activity @xmath135 strongly blocks @xmath34 , since if such a pair @xmath300 existed , this would mean that @xmath300 is not included in @xmath96 , and hence @xmath150 forms a matching , which contradicts the maximality of @xmath96 .",
    "hence , @xmath34 is core stable .",
    "conversely , suppose that there exists a core stable feasible assignment @xmath34 and let @xmath301 .",
    "we will show that @xmath96 is a maximal matching of size at most @xmath97 . by core stability , the center player and @xmath149 vertex players",
    "are assigned to the activity @xmath10 ; otherwise , no core stable outcome would exist as we have seen in example @xmath122 ; thus , @xmath152 .",
    "notice further that @xmath96 is a matching since each vertex player plays at most one activity , and by individual rationality each vertex activity should be assigned to at most one player .",
    "now suppose towards a contradiction that @xmath96 is not maximal , i.e. , there exists an edge @xmath153 such that @xmath136 , @xmath133 , and @xmath150 is a matching .",
    "this would mean that @xmath34 assigns no player to @xmath135 and no vertex activity to @xmath101 , and hence the coalition @xmath302 together with the vertex activity @xmath135 strongly blocks @xmath34 , contradicting the stability of @xmath34 .    *",
    "small components * we reduce from ( 3,b2)-sat . consider a formula @xmath94 with variable set @xmath155 and clause set @xmath156 , where for each variable @xmath303 we write @xmath158 and @xmath159 for the two positive occurrences of @xmath160 , and @xmath170 and @xmath171 for the two negative occurrences of @xmath160 .",
    "corresponding to the variable occurrences , we introduce four players @xmath158 , @xmath159 , @xmath170 , and @xmath171 for each variable @xmath303 .",
    "we also introduce two other players @xmath160 and @xmath304 for each variable @xmath303 . for each clause @xmath174",
    ", we introduce three players @xmath166 , and @xmath167 .",
    "the network consists of one component for each clause @xmath174 : a star with center @xmath121 and leaves @xmath120 and @xmath167 , and of two components for each variable @xmath303 : a star with center @xmath160 and leaves @xmath158 and @xmath159 , and a star with center @xmath304 and leaves @xmath170 and @xmath171 .",
    "hence , the size of each connected component of this graph is at most @xmath117 .",
    "we then construct the set of activities given by @xmath305 for each @xmath303 , the preferences of the positive literal players @xmath158 and @xmath159 and the positive variable player @xmath160 are given as follows : @xmath306 similarly , for each @xmath303 , the preferences of the negative literal players @xmath161 and @xmath162 , and the negative variable player @xmath307 are given as follows : @xmath308 notice that the preferences of each triple contains a cyclic relation , and hence in a core stable assignment , there are only two possible case : first , all the three players @xmath158 , @xmath159 , and @xmath160 are assigned to @xmath160 , and players @xmath170 , @xmath171 , and @xmath304 are assigned to activities @xmath170 , @xmath171 , and @xmath309 , respectively ; second , all the players @xmath170 , @xmath171 , and @xmath304 are assigned to @xmath160 , and players @xmath158 , @xmath159 , and @xmath160 are assigned to activities @xmath158 , @xmath159 , and @xmath310 , respectively .    for each clause @xmath174",
    "where @xmath178 , the preferences for clause players @xmath120 , @xmath121 , and @xmath167 are again cyclic and given as follows : @xmath311 if there exists a core stable outcome , it must be the case that at least one of the literal activities @xmath312 , @xmath313 , and @xmath314 must be used outside of the three players @xmath120 , @xmath121 , and @xmath167 ; otherwise , no feasible assignment would be core stable .    now we will show that @xmath94 is satisfied by some truth assignment if and only if there is a core stable feasible assignment .",
    "suppose that there exists a truth assignment that satisfies @xmath94 .",
    "we construct a core stable feasible assignment @xmath34 as follows .",
    "first , for each variable @xmath160 that is set to true , we assign positive literal activities @xmath158 , @xmath159 , and @xmath310 to positive literal players @xmath158 , @xmath159 , and a variable player @xmath160 , respectively , and assign a variable activity @xmath160 to players @xmath170 , @xmath171 , and @xmath304 . for each variable @xmath160 that is set to false ,",
    "we assign negative literal activities @xmath170 , @xmath171 , and @xmath309 to negative literal players @xmath170 , @xmath171 , and a variable player @xmath304 , respectively , and assign a variable activity @xmath160 to players @xmath158 , @xmath159 , and @xmath160 .",
    "note that this procedure uses at least one of the literal activities @xmath312 , @xmath313 and @xmath314 of each clause @xmath115 , since the given truth assignment satisfies @xmath94 .",
    "then , for each clause @xmath174 , we assign activities by constructing a digraph with vertices being potential assignments and identifying an `` undominated '' activity .",
    "let @xmath315 and delete from @xmath316 vertices whose activities @xmath317 are already assigned to some players . then , orient from @xmath318 to @xmath319 if there exists a common player @xmath320 who strictly prefers @xmath321 to @xmath322 .",
    "this digraph is acyclic since at least one of the literal activities @xmath312 , @xmath313 , and @xmath314 has been already assigned to some literal players .",
    "if the digraph is empty , i.e. , all the activities are already assigned in a previous step , we assign the void activity to all the clause players @xmath120 , @xmath121 , and @xmath167 .",
    "otherwise , we assign the activity of a source vertex of the digraph to its coalition and the void activity to the rest .",
    "the resulting assignment @xmath34 of players to activities is core stable , because no variable and literal player wishes to change their alternative and no connected subset of each @xmath119 can not strongly block @xmath34 .",
    "conversely , suppose that there exists a core stable feasible assignment @xmath34 . by core stability , for each variable @xmath303 , either a pair of positive literal activities @xmath158 and @xmath159 or a pair of negative literal activities @xmath170 and @xmath171 should be assigned to the corresponding pair of literal players ; further , for each clause @xmath115 , at least one of the literal activities @xmath312 , @xmath313 , and @xmath314 should be played outside of the clause players @xmath120 , @xmath121 , and @xmath167",
    ". then , take the truth assignment that sets the variables @xmath160 to true if their positive literal players @xmath158 and @xmath159 are assigned to positive literal activities @xmath158 and @xmath159 ; otherwise , @xmath160 is set to false ; this can be easily seen to satisfy @xmath94 .    our fpt result for graphs with small connected components can also be adapted to the core .",
    "in contrast , our approach for nash stability for paths and stars does not seem to generalize to core stability , and we leave these cases for future work .",
    "[ thm : fpt : smallcomponents : core ] there exists an algorithm that given an instance of   checks whether it has a core stable feasible assignment , finds one if it exists , and runs in time @xmath323 , where @xmath115 is the maximum size of the connected components and @xmath97 is the number of connected components .",
    "we give a dynamic programming .",
    "suppose our graph @xmath41 has @xmath97 connected components @xmath324 .",
    "for each @xmath325 , each set @xmath220 of activities assigned to @xmath21 , and each set @xmath190 of activities assigned to @xmath225 , we denote by @xmath326 whether there is an assignment of @xmath225 that gives rise to a core stable outcome .",
    "specifically , @xmath226 is _ true _ if and only if there exists an individually rational feasible assignment @xmath227 such that    * @xmath34 only uses the activities in @xmath198 , i.e. , @xmath228 for all @xmath229 and @xmath327 for all @xmath328 , and * no connected subset @xmath329 together with activity in @xmath330 strongly blocks @xmath34 .    for @xmath209 , each @xmath220 , and @xmath233 , we compute the value of @xmath331 by trying all possible mappings @xmath332 , and check whether it is an individually rational feasible assignment using all activities in @xmath198 and such that no connected subset @xmath333 together with activity in @xmath330 strongly blocks @xmath34 . for @xmath334 from @xmath237 , each @xmath220 , and @xmath190 , we set @xmath226 to true if there exists a bipartition of @xmath198 into @xmath238 and @xmath239 such that @xmath240 is true and there exists an individually rational feasible assignment @xmath241 such that each activity in @xmath239 is assigned to some player in @xmath335 , and no connected subset @xmath336 together with activity in @xmath337 strongly blocks @xmath34 .",
    "it is not difficult to see that a core stable solution exists if and only if @xmath244 for some @xmath220 .",
    "if this is the case , such a stable feasible assignment can be found using standard dynamic programming techniques .",
    "the bound on the running time is immediate .",
    "in this paper , we have initiated the study of group activity selection problems with network structure , and found that even for very simple families of graphs computing stable outcomes is np - hard .",
    "we identified several ways to circumvent this computational intractability .",
    "for s with copyable activities , we showed that there exists a polynomial time algorithm to compute stable outcomes , and for s with few activities , we provided fixed parameter algorithms for restricted classes of networks .",
    "we leave several interesting questions for future work .",
    "our fixed - parameter tractability results can be extended to more general graph families , such as graphs with bounded pathwidth and graphs with a bounded number of internal nodes .",
    "however , for general graphs , the exact parameterized complexity of determining the existence of stable outcomes is unknown . when the underlying graph is complete",
    ", one can adapt techniques of @xcite to show that the problem of computing nash stable outcomes is in xp with respect to @xmath61 ; for other networks , including trees , it is not even clear whether our problem is in xp with respect to @xmath61",
    ". it would be also interesting to investigate the parameterized complexity of s using other parameters .",
    "another promising research direction is to study analogues of other solution concepts from the hedonic games literature for s ; in particular , it would be interesting to understand the complexity of computing individually stable outcomes in s.      aziz , h. , and savani , r. 2016 .",
    "hedonic games . in brandt , f. ; conitzer , v. ; endriss , u. ; lang , j. ; and procaccia , a.  d. , eds . ,",
    "_ handbook of computational social choice_. cambridge university press .",
    "chapter  15 .",
    "darmann , a. ; elkind , e. ; kurz , s. ; lang , j. ; schauer , j. ; and woeginger , g. 2012 .",
    "group activity selection problem . in",
    "_ proceedings of the 8th international conference on internet and network economics _ , wine 2012 , 156169 .",
    "demange , m. , and ekim , t. 2008 .",
    "minimum maximal matching is np - hard in regular bipartite graphs . in _ proceedings of the 5th international conference on theory and applications of models of computation _ ,",
    "tamc 2008 , 364374 .",
    "igarashi , a. , and elkind , e. 2016 .",
    "hedonic games with graph - restricted communication . in _ proceedings of the 15th international conference on autonomous agents and multiagent systems",
    "_ , aamas 2016 , 242250 ."
  ],
  "abstract_text": [
    "<S> we propose a new variant of the group activity selection problem ( ) , where the agents are placed on a social network and activities can only be assigned to connected subgroups . </S>",
    "<S> we show that if multiple groups can simultaneously engage in the same activity , finding a stable outcome is easy as long as the network is acyclic . </S>",
    "<S> in contrast , if each activity can be assigned to a single group only , finding stable outcomes becomes intractable , even if the underlying network is very simple : the problem of determining whether a given instance of a  admits a nash stable outcome turns out to be np - hard when the social network is a path , a star , or if the size of each connected component is bounded by a constant . on the other hand , we obtain fixed - parameter tractability results for this problem with respect to the number of activities .    @topnum0 @botnum0 </S>"
  ]
}