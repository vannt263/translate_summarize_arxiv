{
  "article_text": [
    "this paper concerns the computational complexity of an optimisation problem with strong connections to the _ constraint satisfaction problem _ ( csp ) .",
    "an instance of the constraint satisfaction problem consists of a finite set of variables , a set of values ( the domain ) , and a finite set of constraints .",
    "the goal is to determine whether there is an assignment of values to the variables such that all the constraints are satisfied .",
    "csps provide a general framework for modelling a variety of combinatorial decision problems  @xcite .",
    "various optimisation variations of the constraint satisfaction framework have been proposed and many of them can be seen as special cases of the valued constraint satisfaction problem ( ) , introduced by schiex et al .",
    "this is an optimisation problem which is general enough to express such diverse problems as max csp , where the goal is to maximise the number of satisfied constraints , and the minimum cost homomorphism problem ( ) , where all constraints must be satisfied , but each variable - value tuple in the assignment is given an independent cost . to accomplish this , instances of the assign costs ( possibly infinite ) to individual tuples of the constraints .",
    "it is then convenient to replace relations by _ cost functions _ , _",
    "i.e. _ functions from tuples of the domain to some set of costs .",
    "this set of costs can be relatively general , but much is captured by using @xmath1 , where denotes the set of non - negative rational numbers .",
    "we arrive at the following formal definition .",
    "let @xmath2 be a finite domain , and let @xmath3 be a set of functions @xmath4 .",
    "by vcsp(@xmath3 ) we denote the following minimisation problem :    instance : : :    a set of variables @xmath5 , and a sum    @xmath6 , where    @xmath7 ,    @xmath8 , and @xmath9 is    a list of @xmath10 variables from @xmath5 . solution : : :    a function @xmath11 .",
    "measure : : :    @xmath12 ,    where @xmath13 is the list of elements    from @xmath2 obtained by applying @xmath14    component - wise to @xmath9 .",
    "the set @xmath3 is often referred to as the _ constraint language_. we will use @xmath3 as our parameter throughout the paper . for instance , when we say that a class of vcsps @xmath15 is polynomial - time solvable , then we mean that vcsp@xmath16 is polynomial - time solvable for every @xmath17 . finite - valued functions , _ i.e. _ functions with a range in , are sometimes called _ soft constraints_. a prominent example is given by functions with a range in @xmath0 ; they can be used to express instances of the well - known min csp and max csp problems ( which , for instance , include max @xmath18-cut , max @xmath18-sat , and nearest codeword as subproblems ) . on the other side",
    "we have _ crisp constraints _ which represent the standard type of csp constraints .",
    "these can be expressed by cost functions taking values in @xmath19 .    a systematic study of the computational complexity of the was initiated by cohen et al .  @xcite ; for instance , they prove a complexity dichotomy for @xmath16 over two - element domains .",
    "this was the starting point for an intensive research effort leading to a large number of complexity results for vcsp : examples include complete classifications of conservative constraint languages ( _ i.e. _ languages containing all unary cost functions )  @xcite , @xmath0 languages on three elements  @xcite , languages containing a single @xmath0 cost function  @xcite , and arbitrary languages with @xmath19 cost functions  @xcite .",
    "we note that some of these results have been proved by computer - assisted search  something that drastically reduces the readability , and insight gained from the proofs .",
    "we also note that there is no generally accepted conjecture stating which vcsps are polynomial - time solvable .",
    "the picture is clearer when considering the approximability of finite - valued vcsp .",
    "raghavendra  @xcite have presented algorithms for approximating any finite - valued vcsp .",
    "these algorithms achieve an optimal approximation ratio for the constraint languages that can not be solved to optimality in polynomial time , given that the unique games conjecture ( ugc ) is true . for the constraint languages that can be solved to optimality",
    ", one gets a ptas from these algorithms . furthermore , no characterisation of the set of constraint languages that can be solved to optimality follows from raghavendra s result .",
    "thus , raghavendra s result does not imply the complexity results discussed above ( not even conditionally under the ugc ) .",
    "the goal of this paper is to prove a dichotomy result for vcsp with @xmath0 cost functions over four - element domains : we show that every such problem is either solvable in polynomial time or np - hard .",
    "such a dichotomy result is not known for csps on four - element domains ( and , consequently , not for unrestricted vcsps on four - element domains ) .",
    "our result proves that , in contrast to the two - element , three - element , and conservative case , submodularity is not the only source of tractability . in order to outline the proof ,",
    "let @xmath3 denote a constraint language with @xmath0 cost functions over a four - element domain @xmath2 .",
    "we will need two tractability results in our classification .",
    "the first one is well - known : if every function in @xmath3 is submodular on a chain ( _ i.e. _ a total ordering of @xmath2 ) , then vcsp@xmath16 is solvable in polynomial time .",
    "the second result is new and can be found in section  [ sec : tractable ] : we introduce _",
    "1-defect chain multimorphisms _ and prove that if @xmath3 has such a multimorphism , then vcsp@xmath16 is tractable .",
    "a multimorphism is , loosely speaking , a pair of functions such that @xmath3 satisfies certain invariance properties under them .",
    "the algorithm we present is based on a combination of submodular and bisubmodular minimisation  @xcite .",
    "the hardness part of the proof consists of four parts ( sections [ sec : endo][sec : full ] ) .",
    "we begin by introducing some tools in section  [ sec : endo ] and  [ sec : graph ] .",
    "section  [ sec : endo ] concerns the problem of adding ( crisp ) constant unary relations to @xmath3 without changing the computational complexity of the resulting problem .",
    "the main tool for doing this is using the concept of _ indicator problems _ introduced by jeavons et al .",
    "@xcite ( see also cohen et al .",
    "section  [ sec : graph ] introduces a graph construction for studying @xmath3 . in principle",
    ", this graph provides information about the complexity of vcsp@xmath16 based on the two - element sublanguages of @xmath3 .",
    "similar graphs has been used repeatedly in the study of vcsp , _ cf .",
    "_  @xcite . equipped with these tools ,",
    "we determine the complexity of vcsp@xmath16 over a four - element domain in section  [ sec : binary ] .",
    "the graph introduced in section  [ sec : graph ] allows us to prove that , when @xmath3 is a _ core _ ( _ cf . _ section  [ sec : endo ] ) , vcsp@xmath16 is polynomial - time solvable if and only if @xmath3 is submodular on a chain or @xmath3 has a 1-defect chain multimorphism ( theorem  [ thm : fourclass ] ) .",
    "some proofs of intermediate results are deferred to section  [ sec : full ] .",
    "throughout this paper , we will assume that @xmath3 is a finite set of \\{0,1}-valued functions .",
    "by @xmath16 we denote the problem @xmath16 .",
    "it turns out to be convenient to introduce a generalisation of this problem in which we allow additional constraints on the solutions . from a perspective",
    ", this means that we allow _ crisp _ as well as @xmath0-valued cost functions . to make the distinction clear , and since we will not be using any _ mixed _ cost functions , we represent the crisp constraints with relations instead of @xmath19-valued cost functions .",
    "let @xmath3 be a set of @xmath0-valued functions on a domain @xmath2 , and let @xmath20 be a set of finitary relations on @xmath2 . by ( @xmath21 )",
    "we denote the following minimisation problem :    instance : : :    a @xmath16-instance @xmath22 , and a finite    set of constraint applications    @xmath23 , where    @xmath24 and @xmath25 is a    matching list of variables from @xmath5 .",
    "solution : : :    a solution @xmath14 to @xmath22 such that    @xmath26 for all    @xmath27 .",
    "measure : : :    the measure of @xmath14 as a solution to    @xmath22 .",
    "we will generally omit the parenthesis surrounding singletons in unary relations , as in the following definition : let @xmath28 be the set of constant unary relations over @xmath2 .",
    "it is often possible to enrich a set of functions @xmath3 without changing the computational complexity of . in this paper",
    ", we will make use two distinct , but related notions aimed at this purpose .",
    "[ def : wpp ] let @xmath29 be an instance of @xmath30 , and let @xmath31 be a sequence of distinct variables from @xmath32 .",
    "let @xmath33 _ i.e. _ the projection of the set of optimal solutions onto @xmath34 .",
    "we say that such a relation _ has a weighted pp - definition in @xmath30_. let @xmath35 denote the set of relations which have a weighted pp - definition in @xmath36 .    for an instance @xmath37 of , we define @xmath38 to be the optimal value of a solution to @xmath37 , and to be undefined if no solution exists .",
    "the following definition is a variation of the concept of the _ expressive power _ of a valued constraint language , see for example cohen et al .",
    "@xcite .",
    "[ def : express ] let @xmath22 be an instance of @xmath30 , and let @xmath39 be a sequence of distinct variables from @xmath32 . define the function @xmath40 by letting @xmath41 .",
    "we say that @xmath42 is _ expressible over _ @xmath36 .",
    "let @xmath43 denote the set of _ total functions _",
    "expressible over @xmath36 .",
    "[ prop:1 ] let @xmath44 and @xmath45 be finite sets .",
    "then , @xmath46 is polynomial - time reducible to @xmath30 .",
    "the reduction from @xmath47 to @xmath48 is a special case of theorem 3.4 in  @xcite .",
    "we allow weights as a part of our instances , but this makes no essential difference .",
    "for the remaining part , we will assume that @xmath49 contains a single relation @xmath50 .",
    "the case when @xmath51 , for @xmath52 can be handled by eliminating one relation at a time using the same argument .",
    "let @xmath53 be an instance of @xmath48 .",
    "for each application @xmath54 , @xmath55 , we create a copy @xmath56 of @xmath37 in which the variables @xmath34 have been replaced by @xmath57 .",
    "we now create an instance @xmath22 of @xmath36 as follows : let @xmath58 , @xmath59 , and let the set of constraint applications of @xmath22 consist of all applications from @xmath60 apart from those involving the relation @xmath61 , and all applications from @xmath56 , @xmath55 .",
    "we will choose @xmath62 large enough , so that if @xmath53 is satisfiable , then in any optimal solution @xmath14 to @xmath29 , the restriction of @xmath14 to the set @xmath63 is forced to be an optimal solution to the instance @xmath64 .",
    "it then follows that @xmath65 , so we can recover an optimal solution to @xmath66 from @xmath14 .",
    "the value of @xmath62 is chosen as follows : if all solutions to @xmath67 have the same measure , we can let @xmath68 .",
    "otherwise , let @xmath69 be the minimal difference in measure between a sub - optimal solution , and an optimal solution to @xmath67 .",
    "assume that @xmath70 , and let @xmath71 .",
    "note that if @xmath14 is any solution to the instance obtained from @xmath60 by removing all constraint applications , then @xmath72 .",
    "we can then let @xmath73 ; the representation size of @xmath62 is linearly bounded in the size of the instance @xmath60 .",
    "it is easy to check that if @xmath22 is unsatisfiable , or if @xmath74 , then @xmath60 is unsatisfiable .",
    "otherwise @xmath75 .",
    "we now turn our attention to _ multimorphisms _ and tractable minimisation problems .",
    "let @xmath2 be a finite set .",
    "let @xmath76 be a function , and let @xmath77 , with components @xmath78 .",
    "then , we let @xmath79 denote the @xmath80-tuple @xmath81 .",
    "a ( binary ) _ multimorphism _ of @xmath3 is a pair of functions @xmath82 such that for any @xmath83 , and matching tuples @xmath34 and @xmath84 , @xmath85 the concept of multimorphisms was introduced by cohen et al .",
    "@xcite as an extension of the notion of _ polymorphisms _ to the analysis of the problem .",
    "let @xmath15 be a finite set of triples @xmath86 , where @xmath87 is a finite set and @xmath88 are functions mapping @xmath89 to @xmath87 .",
    "mfm@xmath90 is a minimisation problem with    instance : : :    a positive integer @xmath80 , a function    @xmath91 \\to [ |x|]$ ] , and a function    @xmath92 where    @xmath93 .",
    "furthermore ,    @xmath94    for all @xmath95 .",
    "the    function @xmath96 is given to the algorithm as an oracle ,    _ i.e. _ , for any @xmath97 we can query the    oracle to obtain @xmath98 in unit time .",
    "solution : : :    a tuple @xmath97 .",
    "measure : : :    the value of @xmath98 .    for a finite set @xmath15",
    "we say that mfm@xmath90 is _ oracle - tractable _ if it can be solved in time @xmath99 for some constant @xmath100 .",
    "it is not hard to see that if @xmath101 is a multimorphism of @xmath3 , and mfm@xmath102 is oracle - tractable , then @xmath16 is tractable .",
    "we now give two examples of oracle - tractable problems .",
    "a partial order on @xmath2 is called a _ lattice _ if every pair of elements @xmath103 has a greatest lower bound @xmath104 ( meet ) and a least upper bound @xmath105 ( join ) .",
    "a _ chain _",
    "on @xmath2 is a lattice which is also a total order .    for @xmath106 ,",
    "let @xmath107 be a lattice on @xmath87 .",
    "the _ product lattice _",
    "@xmath108 is defined on the set @xmath109 by extending the meet and join component - wise : for @xmath110 and @xmath111 , let @xmath112 , and let @xmath113 .",
    "a function @xmath114 is called _ submodular _ on the lattice @xmath115 if @xmath116 for all @xmath117 .",
    "a set of functions @xmath3 is said to be submodular on @xmath118 if every function in @xmath3 is submodular on @xmath118 .",
    "this is equivalent to @xmath119 being a multimorphism of @xmath3 .",
    "it follows from known algorithms for submodular function minimisation that mfm@xmath90 is oracle - tractable for any finite set @xmath15 of finite _ distributive lattices _ ( _ e.g. _ chains )  @xcite .    the second example is strongly related to submodularity , but here we use a partial order that is not a lattice to define the multimorphism .",
    "let @xmath120 , and define the functions @xmath121 by letting @xmath122 , @xmath123 if @xmath124 , and @xmath125 otherwise .",
    "we say that a function @xmath126 is _ bisubmodular _ if @xmath96 has the multimorphism @xmath127 .",
    "it is possible to minimise a @xmath18-ary bisubmodular function in time polynomial in @xmath18 , provided that evaluating @xmath96 on a tuple is a primitive operation  @xcite .",
    "in this section , we introduce a new multimorphism which ensures tractability for ( and more generally for ) .",
    "let @xmath128 and @xmath100 be two distinct elements in @xmath2 .",
    "let @xmath129 be a partial order which relates all pairs of elements except for @xmath128 and @xmath100 .",
    "assume that @xmath82 are two commutative functions satisfying the following conditions :    * if @xmath130 , then @xmath131 and @xmath132 .",
    "* if @xmath133 , then @xmath134 , and @xmath135 .",
    "we call @xmath136 a _ 1-defect chain _ ( over @xmath137 ) , and say that @xmath138 is the _ defect _ of @xmath136 .",
    "if a function has the multimorphism @xmath101 , then we also say that @xmath101 is a _",
    "1-defect chain multimorphism_.    three types of 1-defect chains are shown in fig .",
    "[ fig:1](a  c ) .",
    "note this is not an exhaustive list , _",
    "e.g. _ for @xmath139 , there are 1-defect chains similar to fig .",
    "[ fig:1](b ) , but with @xmath140 .",
    "when @xmath141 , type ( b ) is precisely the product lattice shown in fig .",
    "[ fig:1](d ) .",
    "we denote this lattice by @xmath142    ( -1.5,-1.75 ) rectangle ( 1.25,1.7 ) ; ( ) at ( 0,-2 ) ( a ) ; ( ua1 ) at ( 0,-1.2 cm ) [ ] ; ( ua ) at ( 0,-0.6 cm ) [ ] edge[edged](ua1 ) ; ( ual ) at ( -0.6,-0.6 cm ) [ ] @xmath143 ; ( ud ) at ( 0,0 ) [ ] edge[edged](ua ) ; ( udl ) at ( -0.6,0 ) [ ] @xmath144 ; ( ud1 ) at ( 0,0.6 cm ) [ ] edge[edged](ud ) ; ( ub ) at ( -0.7cm,1.2 cm ) [ label = left:@xmath128 ] edge[edge](ud1 ) ; ( uc ) at ( 0.7cm,1.2 ) [ label = right:@xmath100 ] edge[edge](ud1 ) ;    ( -1.5,-1.75 ) rectangle ( 1.25,1.7 ) ; ( ) at ( 0,-2 ) ( b ) ; ( ua1 ) at ( 0,-1.5 cm ) [ ] ; ( ua ) at ( 0,-0.9 cm ) [ ] edge[edged](ua1 ) ; ( ual ) at ( -0.6,-0.9 cm ) [ ] @xmath143 ; ( ua2 ) at ( 0,-0.3 cm ) [ ] edge[edged](ua ) ; ( ub ) at ( -0.7cm,0 ) [ label = left:@xmath128 ] edge[edge](ua2 ) ; ( uc ) at ( 0.7cm,0 ) [ label = right:@xmath100 ] edge[edge](ua2 ) ; ( ud1 ) at ( 0,0.3 cm ) [ ] edge[edge](ub ) edge[edge](uc ) ; ( ud ) at ( 0,0.9 cm ) [ ] edge[edged](ud1 ) ; ( udl ) at ( -0.6,0.9 cm ) [ ] @xmath144 ; ( ud2 ) at ( 0,1.5 cm ) [ ] edge[edged](ud ) ;    ( -1.5,-1.75 ) rectangle ( 1.25,1.7 ) ; ( ) at ( 0,-2 ) ( c ) ; ( ua1 ) at ( 0,1.2 cm ) [ ] ; ( ua ) at ( 0,0.6 cm ) [ ] edge[edged](ua1 ) ; ( ual ) at ( -0.6,0.6 cm ) [ ] @xmath144 ; ( ud ) at ( 0,0 ) [ ] edge[edged](ua ) ; ( udl ) at ( -0.6,0 ) [ ] @xmath143 ; ( ud1 ) at ( 0,-0.6 cm ) [ ] edge[edged](ud ) ; ( ub ) at ( -0.7cm,-1.2 cm ) [ label = left:@xmath128 ] edge[edge](ud1 ) ; ( uc ) at ( 0.7cm,-1.2 ) [ label = right:@xmath100 ] edge[edge](ud1 ) ;    ( -1.5,-1.75 ) rectangle ( 1.25,1.7 ) ; ( ) at ( 0,-2 ) ( d ) ; ( ua ) at ( 0,-1 cm ) [ label = below:@xmath147 ; ( ub ) at ( -0.7cm,0 ) [ label = left:@xmath128 ] edge[edge](ua ) ; ( uc ) at ( 0.7cm,0 ) [ label = right:@xmath100 ] edge[edge](ua ) ; ( ud ) at ( 0,1 cm ) [ label = above:@xmath148 edge[edge](ub ) edge[edge](uc ) ;    [ ex:1defect ] let @xmath149 , and assume that @xmath136 is a 1-defect chain , with defect @xmath138 , and that @xmath150",
    ". if @xmath151 , then @xmath152 and @xmath153 are the meet and join of @xmath142 , _ cf . _ fig .  [ fig:1](d ) . when",
    "@xmath154 we have the situation in fig .  [",
    "fig:1](a ) , and when @xmath155 we have the situation in fig .",
    "[ fig:1](c ) . in the two latter cases , @xmath152 and @xmath153",
    "are given by the two following multimorphisms ( rows and columns are listed in the order @xmath156 , _ e.g. _",
    "@xmath157 ) : @xmath158    the proof of tractability for languages with 1-defect chain multimorphisms is inspired by krokhin and larose s  @xcite result on maximising supermodular functions on maltsev products of lattices .",
    "first we will need some notation and a general lemma on oracle - tractability of mfm problems .",
    "for an equivalence relation @xmath159 on @xmath2 we use @xmath160 $ ] to denote the equivalence class containing @xmath161 .",
    "the relation @xmath159 is a _ congruence _ on @xmath136 , if @xmath162 = f(x_2,y_2)[\\theta]$ ] and @xmath163 = g(x_2,y_2)[\\theta]$ ] whenever @xmath164 = x_2[\\theta]$ ] and @xmath165 = y_2[\\theta]$ ] .",
    "we use @xmath166 to denote the set @xmath167 \\mid x \\in d\\}$ ] and @xmath168 to denote the function @xmath169 , y[\\theta ] ) \\mapsto f(x , y)[\\theta]$ ] .",
    "[ lem : maltsev ] let @xmath170 be two functions that map @xmath171 to @xmath2 . if there is a congruence relation @xmath159 on @xmath102 such that 1 ) mfm@xmath172 is oracle - tractable ; and 2 ) mfm@xmath173 is oracle - tractable , then mfm@xmath102 is oracle - tractable .",
    "let @xmath174 be the function we want to minimise .",
    "we define a new function @xmath175 by @xmath176 it is clear that @xmath177 . by assumption 2 in the statement of the lemma",
    "we can compute @xmath178 given @xmath179 . to simplify the notation we let @xmath180 and @xmath181 .",
    "we will now prove that @xmath178 is an instance of mfm@xmath182 .",
    "let @xmath183 and choose @xmath184 $ ] and @xmath185 $ ] so that @xmath186 ) = h({\\boldsymbol{x}}')$ ] and @xmath187 ) = h({\\boldsymbol{y}}')$ ] .",
    "we then have @xmath188)+h'({\\boldsymbol{y}}[\\theta ] ) & =     h({\\boldsymbol{x } } ' ) + h({\\boldsymbol{y } } ' ) \\label{eq:1 } \\\\                                              & \\geq h(f({\\boldsymbol{x}}',{\\boldsymbol{y } } ' ) ) + h(g({\\boldsymbol{x}}',{\\boldsymbol{y } } ' ) ) \\label{eq:2 } \\\\",
    "& \\geq h'(f({\\boldsymbol{x}}',{\\boldsymbol{y}}')[\\theta ] ) + h'(g({\\boldsymbol{x}}',{\\boldsymbol{y}}')[\\theta ] ) \\label{eq:3 } \\\\                                              & =     h'(f({\\boldsymbol{x}},{\\boldsymbol{y}})[\\theta])+h'(g({\\boldsymbol{x}},{\\boldsymbol{y}})[\\theta ] ) ) \\label{eq:4 } \\\\                                              & =     h'(u({\\boldsymbol{x}}[\\theta],{\\boldsymbol{y}}[\\theta]))+h'(v({\\boldsymbol{x}}[\\theta],{\\boldsymbol{y}}[\\theta ] ) ) .",
    "\\label{eq:5}\\end{aligned}\\ ] ] here   follows from our choice of @xmath189 and @xmath190 , follows from the fact that @xmath96 is an instance of mfm@xmath102 , follows from the definition of @xmath178 , and finally and follows as @xmath159 is a congruence relation of @xmath152 and @xmath153 .",
    "hence , @xmath178 is an instance of mfm@xmath182 and can be minimised in polynomial time by the first assumption in the lemma .",
    "armed with this lemma and the oracle - tractability of submodular and bisubmodular functions described in the previous section , we can now present a new tractable class of -problems .",
    "[ prop:1defecttract ] if @xmath3 has a 1-defect chain multimorphism , then @xmath16 is tractable .",
    "assume that @xmath3 has a 1-defect chain multimorphism @xmath101 over @xmath137 with defect @xmath138 .",
    "we prove that mfm@xmath102 is oracle - tractable .",
    "assume that @xmath128 and @xmath100 are maximal elements , _",
    "@xmath191 for all @xmath192 . in this case the equivalence relation @xmath159 with classes @xmath193 , @xmath194 , @xmath195 is a congruence relation of @xmath102",
    "furthermore , mfm@xmath196 and mfm@xmath197 are oracle - tractable  @xcite .",
    "it now follows from lemma  [ lem : maltsev ] that mfm@xmath102 is oracle - tractable .",
    "the same argument works for the case when @xmath128 and @xmath100 are minimal elements .",
    "if @xmath198 , but @xmath128 and @xmath100 are not maximal , then we can use the congruence relation @xmath199 with classes @xmath200 and @xmath201 .",
    "here , @xmath202 and @xmath203 are chains , and @xmath197 is a 1-defect chain of the previous type .",
    "one can show that when mfm(@xmath15 ) and mfm(@xmath204 ) are both oracle - tractable , then so is mfm@xmath205 . combining this with the technique used above",
    ", we can now solve the minimisation problem .",
    "an analogous construction works in the case when @xmath206 , using the congruence consisting of the class @xmath207 and its complement . finally , when @xmath208 , we can use the congruence relation @xmath209 with classes @xmath210 and @xmath211 . here , @xmath212 , @xmath213 , and @xmath214 are all chains and thus the mfm problem for these triples is oracle - tractable  @xcite",
    "we now turn to prove a different property of functions with 1-defect chain multimorphisms .",
    "it is based on the following result for submodular functions on chains , which was derived by queyranne et al .",
    "@xcite from earlier work by topkis  @xcite ( see also burkard et al .",
    "this formulation is due to deineko et al .",
    "@xcite :    [ lem : burkard ] a function @xmath114 is submodular on a chain @xmath215 if and only if the following holds : every binary function obtained from @xmath152 by replacing any given @xmath216 variables by any constants is submodular on this chain .",
    "it is straightforward to extend this lemma to products of chains , such as @xmath142 . here",
    ", we outline the proof of the corresponding property for arbitrary 1-defect chains , which will be needed in section  [ sec : binary ] .",
    "we will use the following observation .    a binary operation @xmath217",
    "is called a _ 2-semilattice _ if it is idempotent , commutative , and @xmath218 for all @xmath219 .",
    "[ prop : fg ] let @xmath136 be a 1-defect chain with a defect on @xmath138 .    1 .   if @xmath220 , then @xmath152 is a 2-semilattice and @xmath221 for @xmath219 .",
    "if @xmath222 , then @xmath153 is a 2-semilattice and @xmath223 for @xmath219 .",
    "3 .   for @xmath224 , we have @xmath225 and @xmath226 .",
    "for @xmath130 , the equalities @xmath218 and @xmath221 follow from the underlying partial order .",
    "assume instead that @xmath133 , and that @xmath227 . since @xmath228 , we have that @xmath229 is the greatest lower bound of @xmath230 and @xmath231 , which is @xmath230 .",
    "we also have that @xmath232 is the lowest upper bound of @xmath230 and @xmath231 , which is @xmath231 .",
    "an analogous argument proves ( 2 ) .",
    "the first equality of ( 3 ) follows from ( 1 ) if @xmath220 , and the second equality follows from ( 2 ) if @xmath222 .",
    "at least one of @xmath220 and @xmath222 holds .",
    "if both holds , there is nothing to prove , so assume that @xmath220 , but @xmath233 .",
    "we then have @xmath234 and @xmath235 for @xmath133 , so the second equality of ( 3 ) also holds .",
    "the remaining case follows similarly .",
    "[ lem:1defectburkard ] a function @xmath126 , @xmath236 , has the 1-defect chain multimorphism @xmath101 if and only if every binary function obtained from @xmath96 by replacing any given @xmath216 variables by any constants has the multimorphism @xmath237 .",
    "let @xmath138 be the defect of @xmath101 .",
    "we prove the statement for the case @xmath220 .",
    "the other case follows analogously .",
    "every function obtained from @xmath96 by fixing a number of variables is clearly invariant under every multimorphism of @xmath96 .    for",
    "the opposite direction , assume that @xmath96 does not have the multimorphism @xmath237 .",
    "we want to prove that there exist vectors @xmath183 such that @xmath238 with @xmath239 , where @xmath240 denotes the _ hamming distance _ on @xmath241 , _",
    "i.e. _ the number of coordinates in which @xmath34 and @xmath84 differ .    assume to the contrary that the result does not hold .",
    "we can then choose a function @xmath96 of minimal arity such that @xmath242 the arity of @xmath96 must in fact be equal to the least @xmath243 ; otherwise , we could obtain a function @xmath178 of strictly smaller arity by fixing the variables in @xmath96 on which @xmath34 and @xmath84 agree .",
    "this would contradict the minimality in the choice of @xmath96 .",
    "we will first show that it is possible to choose @xmath34 and @xmath84 so that @xmath244 for all @xmath245 .",
    "let @xmath246 so that @xmath247 , and let @xmath248 be two vectors with @xmath249 , satisfying ( [ eqn : hineq ] ) . now , assume that @xmath250 .",
    "we then have @xmath251 since both @xmath252 and @xmath253 are strictly less that the arity of @xmath96 , we have by assumption @xmath254 @xmath255 by combining these inequalities , we get @xmath256 @xmath257 let @xmath258 , @xmath259 , @xmath260 , and @xmath261 . by proposition  [ prop : fg](3 ) , we have @xmath262 @xmath263 hence , we can rewrite the previous inequality :",
    "@xmath265    it follows that either the pair @xmath34 and @xmath84 , or the pair @xmath266 and @xmath267 satisfies condition ( [ eqn : hineq ] ) .",
    "furthermore , @xmath244 and @xmath268 , for all @xmath245 .",
    "if instead we have vectors @xmath34 and @xmath84 satisfying ( [ eqn : hineq ] ) such that @xmath244 for _ some _ , but not all @xmath245 , then we proceed as follows .",
    "note that @xmath244 implies @xmath269 .",
    "without loss of generality , we may therefore assume that @xmath270 , with @xmath271 for @xmath272 , are such that @xmath273 and @xmath274 , possibly by first exchanging @xmath34 and @xmath84 .",
    "for these vectors , condition ( [ eqn : hineq ] ) now reads : @xmath275 due to the minimality of @xmath96 s arity , we must have @xmath276 we therefore have @xmath277 let @xmath278 and @xmath279 . by proposition",
    "[ prop : fg](1 ) , @xmath152 is a 2-semilattice , so we have @xmath280 , and thus @xmath281 furthermore , @xmath282 , so @xmath283 we therefore conclude that @xmath284 so that condition ( [ eqn : hineq ] ) holds for @xmath34 and @xmath84 with @xmath244 for all @xmath245 . from now on",
    ", we assume that @xmath34 and @xmath84 are chosen in this way .",
    "let @xmath285 . for each @xmath245 ,",
    "let @xmath286 be an injection which fixes @xmath287 , and sends @xmath288 to @xmath128 or @xmath100 in such a way that @xmath289 .",
    "let @xmath290 be the chain defined by @xmath291 if @xmath292 and @xmath293 , @xmath294 if @xmath191 , and @xmath295 if @xmath296 .",
    "then , @xmath297 , and @xmath298 , for all @xmath245 .",
    "let @xmath299 , and let @xmath300 be such that @xmath301 and @xmath302 . define @xmath303 .",
    "then , @xmath304 @xmath305 it follows that @xmath178 is not submodular on @xmath306 . by lemma  [ lem : burkard ] ,",
    "there are elements @xmath307 with @xmath308 such that @xmath309 .",
    "hence , @xmath310 @xmath311 and @xmath312 .",
    "this contradicts the original choice of @xmath96 .",
    "in this section , we show that under a natural condition , it is possible to add constant unary relations to @xmath3 without changing the computational complexity of the corresponding -problem .",
    "let @xmath313 .",
    "a function @xmath314 is called an _ endomorphism of @xmath96 _ if for every @xmath18-tuple @xmath315 , it holds that @xmath316 .",
    "the function @xmath153 is an endomorphism of @xmath3 if it is an endomorphism of each function in @xmath3 .",
    "the set of all endomorphisms of @xmath3 is denoted by ( @xmath3 ) .",
    "a bijective endomorphism is called an _ automorphism_. the automorphisms of @xmath3 form a group under composition .",
    "[ def : core1 ] a set of functions , @xmath3 , is said to be a _ core _ if all of its endomorphisms are injective .",
    "the idea is that if @xmath3 it not a core , then we can apply a non - injective endomorphism to every function in @xmath3 , and obtain a polynomial - time equivalent problem on a strictly smaller domain .",
    "we can then use results previously obtained for smaller domains  @xcite .",
    "thus , we can restrict our attention to the case when @xmath3 is a core .",
    "jeavons et al .",
    "@xcite defined the notion of an _ indicator problem of order @xmath18 _ for csps .",
    "we will exploit indicator problems of order 1 here , adapted to the setting of .",
    "[ def : indicator ] let @xmath3 be a finite set of @xmath0-valued functions over @xmath2 . let @xmath317 denote the set containing a variable @xmath318 for each @xmath319 , and for @xmath320 , let @xmath321 .",
    "the indicator problem @xmath322 is defined as the instance of @xmath16 with variables @xmath317 , and sum @xmath323 , where @xmath10 is the arity of the function @xmath324 .",
    "let @xmath325 be the function defined by @xmath326 .",
    "theorem  3.5 in @xcite implies the following property of @xmath322 :    for any finite set of functions , @xmath3 , the set of optimal solutions to @xmath322 is equal to @xmath327 .",
    "the proof of the following result follows the lines of similar results for related problems , such as the csp decision problem .",
    "[ prop : constants ] let @xmath3 be a core over @xmath2 . then , @xmath328 is polynomial - time reducible to @xmath16 .",
    "let @xmath37 be an instance of @xmath328 .",
    "the only way for @xmath37 to be unsatisfiable is if it contains two contradicting constraint applications @xmath329 and @xmath330 , with @xmath331 .",
    "this is easily checked in polynomial time .",
    "otherwise , let @xmath34 be a list of the variables @xmath317 , and let @xmath332 .",
    "now modify @xmath37 to an instance @xmath333 of @xmath334 as follows .",
    "add the variables in @xmath317 to @xmath335 , and add the constraint application @xmath336 .",
    "furthermore , remove each constraint @xmath329 , and replace @xmath337 by @xmath338 throughout the instance .",
    "let @xmath339 be an optimal solution to @xmath333 . since @xmath3 is a core",
    ", @xmath340 is an automorphism of @xmath3 , and so is its inverse , @xmath341 .",
    "hence , @xmath342 is also an optimal solution to @xmath333 . from @xmath14",
    "we easily recover a solution to @xmath37 of equal measure , and conversely , any solution to @xmath37 can be interpreted as a solution to @xmath333 .",
    "it follows that we have a reduction from @xmath343 to @xmath344 . by proposition  [ prop:1 ]",
    ", we finally have a reduction from @xmath344 to @xmath16 .    for @xmath345 ,",
    "let @xmath346 denote the function @xmath347 and @xmath348 for @xmath349 .",
    "[ lem : noend ] if @xmath350 , then @xmath351 contains a unary @xmath0-valued function @xmath352 such that @xmath353 and @xmath354 .",
    "let @xmath313 be a function in @xmath3 , and @xmath355 be elements such that @xmath356 , but @xmath357 .",
    "let @xmath37 be the instance of @xmath328 with variables @xmath358 , sum @xmath359 , and constraint applications @xmath360 for @xmath361 .",
    "then , @xmath362 is a unary function in @xmath351 , with @xmath353 and @xmath354 .",
    "let @xmath3 be a core over @xmath2 . in this section ,",
    "we define a graph @xmath363 which encodes either the -hardness of @xmath328 or provides a multimorphism for the binary functions in @xmath351 .",
    "the graph is a variation of a graph defined by kolmogorov and ivn  @xcite , with changes made to accommodate for additional multimorphisms .",
    "let @xmath5 be the set of partial functions @xmath364 such that    * @xmath152 and @xmath153 are defined on a subset @xmath365 ; * @xmath152 and @xmath153 are idempotent and commutative ; and * @xmath366 or @xmath367 .",
    "we do allow @xmath368 in the definition of @xmath5 , _",
    "i.e. _ there is precisely one vertex for each singleton in @xmath2 . for @xmath345 ,",
    "we let @xmath369 $ ] denote the graph induced by the set of vertices defined on @xmath370 .",
    "let @xmath371 $ ] and @xmath372 $ ] .",
    "there is an edge in @xmath373 between @xmath374 and @xmath375 if there is a binary function @xmath376 such that @xmath377 the following lemma shows how @xmath378 can be used to construct multimorphisms of binary functions in @xmath351 :    [ lem : indset ] let @xmath379 be an independent set in @xmath378 with precisely one vertex @xmath380 from each subgraph @xmath381 $ ] .",
    "then , every binary function @xmath376 has the multimorphism @xmath237 defined by @xmath382 and @xmath383 .",
    "assume to the contrary that @xmath101 is not a multimorphism of @xmath96 .",
    "then , there are tuples @xmath384 such that @xmath385 but this would imply that @xmath386 , which is a contradiction since @xmath387 is an independent set .    for distinct @xmath103 ,",
    "let @xmath388 denote the vertex @xmath389 $ ] such that @xmath390 and @xmath391 .",
    "we say that such a vertex is _",
    "conservative_. let @xmath392 denote the set of all conservative vertices , and let @xmath393 $ ] be the subgraph of @xmath378 induced by @xmath392 .",
    "let @xmath394 be the set of vertices @xmath395 such that @xmath396 . for conservative vertices @xmath397 and @xmath398 , condition ( [ eq : basic ] ) reduces to : @xmath399    for a vertex @xmath400 , we let @xmath401 denote the vertex @xmath402 .",
    "it follows immediately from @xmath403 that @xmath404 iff @xmath405 .",
    "next , we prove a number of basic properties of the graph @xmath378 .",
    "[ lem : niceh ] if @xmath406 , then there exists a function @xmath376 such that @xmath407 .    by definition of @xmath378 , we can find @xmath408 such that @xmath409 since @xmath3 is assumed to be a core , lemma  [ lem : noend ] is applicable for all choices of @xmath410 and @xmath128 .",
    "using the unary functions obtained from this lemma , it is possible to ensure that the inequality in ( [ eqn : a1b2 ] ) holds for a function @xmath152 with @xmath411 .",
    "we will also assume that @xmath412 so that @xmath413 .",
    "let @xmath414 and @xmath415 be unary functions such that @xmath416 and @xmath417 , and let @xmath418 and @xmath419 , and note that @xmath420 .",
    "now , define @xmath421 the function @xmath96 satisfies the inequality @xmath422 , and furthermore , @xmath423 and @xmath424 the lemma follows .    [ gprop ]    1 .",
    "[ item : xyz ] let @xmath231 , @xmath337 , and @xmath425 be conservative vertices , with @xmath426 , @xmath427 , and assume that @xmath428",
    ". then , @xmath429 .",
    "[ item : paths ] for @xmath430 , let @xmath431 be a path of conservative vertices in @xmath378 , with @xmath432 . if @xmath80 is even , then @xmath433 , otherwise @xmath434 .",
    "[ item : loop ] for @xmath435 , let @xmath436 be an odd cycle of conservative vertices in @xmath378 , with @xmath437 . then , there is a loop on @xmath438 .",
    "[ item : prop1 ] if @xmath406 , then for each element @xmath439 , either @xmath440 or @xmath441 .",
    "[ item : trans2 ] if @xmath442 and @xmath443 , then @xmath444",
    "[ item : abac ] if there is a loop on @xmath445 , but @xmath395 and @xmath446 are loop - free , then @xmath447 .    properties ( 1)(3 ) are minor variations of lemma 11@xmath448 and @xmath449 in  @xcite .",
    "we include the proofs here for completeness .",
    "( [ item : xyz ] ) let @xmath450 , @xmath451 , and @xmath452 . by lemma [ lem : niceh ] , we have @xmath453 such that @xmath454 and @xmath455 .",
    "let @xmath456 , which is in @xmath351 since @xmath457 .",
    "now , @xmath458 .",
    "we also have @xmath459 .",
    "it follows that @xmath460 , so @xmath461 .",
    "( [ item : paths ] ) and ( [ item : loop ] ) these two properties follow by repeated application of ( [ item : xyz ] ) , keeping in mind that @xmath404 iff @xmath405 .",
    "( [ item : prop1 ] ) by definition there exists a function @xmath376 such that @xmath462 . if @xmath463 , then we are in the first case",
    ". otherwise , @xmath464 , so @xmath465 , which shows that we are in the second case .",
    "( [ item : trans2 ] ) by ( [ item : prop1 ] ) , @xmath466 implies @xmath447 or @xmath467 . in the first case , we are done , so we assume that the latter holds . again by ( [ item : prop1 ] ) , @xmath468 implies @xmath469 or @xmath470 . in the latter case ,",
    "we are done , hence it follows that if @xmath471 , then we have both @xmath472 and @xmath473 in @xmath373 .",
    "( [ item : abac ] ) by ( [ item : prop1 ] ) , @xmath474 implies @xmath475 or @xmath476 . in the first case , this in turn implies either @xmath477 or @xmath478 . in the second case",
    ", it implies either @xmath479 or @xmath480 .",
    "hence , if both @xmath395 and @xmath446 are loop - free , then @xmath447 .",
    "we are now ready to derive a classification of the computational complexity of over a four - element domain . from here on , we assume that @xmath2 is the domain @xmath481 .",
    "first , we prove a result which describes the structure of the unary functions in @xmath482 , when @xmath3 is a core .",
    "let @xmath483 , @xmath484 , @xmath485 , and let @xmath486 . for distinct @xmath219 ,",
    "let @xmath487 if @xmath488 , and @xmath489 otherwise .",
    "[ prop : corecases ] let @xmath3 be a core over @xmath481 and assume that @xmath490 .",
    "then , @xmath491 and for all unary functions @xmath492 , we have @xmath493 . if @xmath494 , then @xmath495 .",
    "let @xmath496 be the set of unary functions in @xmath351 .",
    "in order to simplify notation we will denote a unary function @xmath352 by the vector @xmath497 . to exclude the functions @xmath498 , @xmath499 , @xmath500 , and @xmath501 from the endomorphisms of @xmath3 , lemma  [ lem : noend ] states that @xmath496 must contain certain unary @xmath0-valued functions .",
    "the following table lists the possibilities , provided that @xmath490 , so in particular @xmath502 .    [ cols=\"^,^,^,^\",options=\"header \" , ]     for each of the four functions @xmath503 , it is necessary that at least one of the three functions in the corresponding column is in @xmath496 .",
    "first assume that @xmath504 .",
    "we note that @xmath505 , so we conclude that @xmath506 .",
    "since @xmath501 is not an endomorphism of @xmath3 , we must therefore either have @xmath507 or @xmath508 in @xmath496 . in the former case",
    ", we can add @xmath509 to obtain @xmath508 , so we know that @xmath510 . by a similar argument , considering the function @xmath500 , we conclude that @xmath511 . since @xmath512 , we have reached a contradiction .",
    "a similar argument shows that @xmath506 .",
    "assume instead that @xmath513 , @xmath511 .",
    "as noted above , we must have @xmath514 , and consequently @xmath515 .",
    "but @xmath516 so again we have a contradiction .",
    "thus , the only possibility is that @xmath517 , so @xmath491 .",
    "it is not hard to see that one can write every unary function @xmath352 such that @xmath495 as a linear combination of functions from @xmath518 with non - negative coefficients .",
    "we show that if @xmath519 is a unary function in such that @xmath520 , then @xmath521 .",
    "the full statement follows similarly .",
    "let @xmath522 , and let @xmath523 .",
    "define @xmath524 if @xmath525 , and @xmath526 otherwise .",
    "then , @xmath527 , and @xmath528 can be written as a linear combination of functions from @xmath529 with non - negative coefficients .",
    "hence @xmath530 , and @xmath521 .",
    "we need the following two propositions in order to prove theorem  [ thm : fourclass ] .",
    "their proofs are deferred to the next section .",
    "[ prop:6 ] assume that @xmath491 , and that @xmath531 is bipartite .",
    "then , the set of binary functions in @xmath351 is submodular on a chain .    [",
    "prop : fullprop ] assume that @xmath491 , that @xmath531 is not bipartite , but that @xmath532 $ ] is .",
    "then , the set of binary functions in @xmath351 has a 1-defect chain multimorphism .",
    "[ thm : fourclass ] let @xmath3 be a core over @xmath2 with @xmath533 . if @xmath3 is submodular on a chain , or if @xmath3 has a 1-defect chain multimorphism , then @xmath16 is tractable .",
    "otherwise , it is -hard .",
    "assume that @xmath532 $ ] has a loop on a vertex @xmath395 .",
    "it then follows from lemma  [ lem : niceh ] that there is a function @xmath376 such that @xmath534 , and @xmath396 . by proposition  5.1 in  @xcite",
    ", @xmath328 is -hard . by proposition  [ prop : constants ] , @xmath328 reduces to @xmath16 .",
    "hence , the latter is also -hard .",
    "if instead @xmath532 $ ] is loop - free , then it is bipartite , by lemma  [ gprop]([item : loop ] ) .",
    "we may assume that @xmath491 : this is trivial if @xmath535 .",
    "if @xmath536 is strictly contained in @xmath537 , then up to an automorphism we may assume that @xmath490 , and the inclusion follows by proposition  [ prop : corecases ] .",
    "for a @xmath18-ary function @xmath83 , let @xmath538 be the set of binary which can be obtained from @xmath96 by fixing at least @xmath216 variables , and let @xmath539 be the union of @xmath538 over all @xmath83 .",
    "now , if @xmath531 is bipartite , then by proposition  [ prop:6 ] , the set of binary functions in @xmath351 is submodular on a chain .",
    "since this set contains @xmath539 , we may conclude , by lemma  [ lem : burkard ] , that @xmath3 is submodular on this chain as well .",
    "it follows that @xmath16 is tractable  @xcite .",
    "otherwise , @xmath531 is not bipartite , and by proposition  [ prop : fullprop ] , the set of binary functions in @xmath351 have a 1-defect chain multimorphism .",
    "since this set contains @xmath539 , we may conclude , by lemma  [ lem:1defectburkard ] this time , that @xmath3 has a 1-defect chain multimorphism .",
    "it now follows from proposition  [ prop:1defecttract ] that @xmath16 is tractable .",
    "[ lem : noniso ] if @xmath491 , and @xmath540 is not isolated in @xmath531 , then @xmath541 .    by assumption , there is an edge @xmath542 . if @xmath543 , then @xmath544 since @xmath491 .",
    "if instead @xmath545 , then it follows from lemma  [ gprop]([item : prop1 ] ) that either @xmath546 or @xmath547 , and @xmath548 due to @xmath491 . in either case , @xmath541 follows from lemma  [ gprop]([item : xyz ] ) .    for an independent set @xmath387 in @xmath531 ,",
    "let @xmath549 denote the binary relation on @xmath2 defined by @xmath550 iff @xmath551 .",
    "let @xmath552 be a 2-colouring of the subgraph of @xmath531 induced by the non - isolated vertices .",
    "we first show that @xmath549 is a partial order on @xmath2 .",
    "let @xmath553 .",
    "then , @xmath395 and @xmath446 have the same colour in @xmath387 , and it follows that @xmath554 .",
    "hence , by lemma  [ gprop]([item : trans2 ] ) , we have @xmath555 . by lemma  [ lem : noniso ] , @xmath556 , so @xmath557 and @xmath558 . now , let @xmath137 be a linear extension of @xmath549 , and let @xmath559 be the corresponding subset of @xmath392 .",
    "the set @xmath560 is independent since @xmath387 is independent and @xmath561 is a set of isolated vertices in @xmath531 .",
    "since there are no edges from @xmath392 to the singleton vertices in @xmath378 , we can add all of these to @xmath560 as well .",
    "thus , by lemma  [ lem : indset ] , every binary function in @xmath351 is submodular on the chain @xmath562 , where @xmath563 and @xmath564 are defined with respect to the total order @xmath137 .    in the following",
    ", we will let @xmath101 denote the vertex in @xmath378 given by @xmath565 and @xmath566 .",
    "[ lem : fgz ] assume that @xmath567 and that there is an edge @xmath568 , @xmath569 .",
    "then , @xmath570 or @xmath571 , and @xmath572 or @xmath573 .",
    "let @xmath574 .",
    "by definition , there exists a function @xmath376 such that @xmath575 . if @xmath576 , then @xmath577 since @xmath578 by proposition  [ prop : corecases ] .",
    "thus , @xmath579 .",
    "if @xmath580 , then we obtain @xmath581 following a similar argument , and the remaining two cases can be deduced in the same way .",
    "[ lem : u0 ] if @xmath582 , and there is a loop on @xmath583 or @xmath584 , then there is a loop on at least one of the vertices @xmath388 , @xmath585 , @xmath586 , @xmath587 .",
    "assume , without loss of generality , that there exists an @xmath376 such that @xmath588 . by proposition  [ prop : corecases ]",
    ", @xmath582 implies the relations @xmath589 , @xmath590 , @xmath591 , @xmath592 , and @xmath593 .",
    "it follows that @xmath594 , which implies that the inequality @xmath595 holds in at least one of the cases @xmath596 .",
    "we follow a strategy similar to that of proposition  [ prop:6 ] .",
    "however , instead of using @xmath531 we now consider the graph @xmath597 $ ] , where @xmath598 .",
    "first , we show that @xmath599 $ ] is bipartite .",
    "if @xmath600 , then @xmath599 = g[{v'}_\\gamma]$ ] is bipartite by assumption . otherwise , @xmath601 .",
    "since @xmath532 = g[{v'}_0]$ ] is loop - free , we know from lemma  [ lem : u0 ] that there is no loop on @xmath583 , nor on @xmath584 .",
    "thus , by lemma  [ gprop]([item : loop ] ) , @xmath599 $ ] is bipartite .",
    "assume for the moment that the following holds : @xmath602 $ from $ { \\overrightarrow{by}}$ to $ { \\overrightarrow{yc}}$\\,}}.\\ ] ]    let @xmath552 be a 2-colouring of the subgraph of @xmath599 $ ] induced by the non - isolated vertices .",
    "we claim that @xmath549 is a partial order on @xmath2 .",
    "let @xmath553 and observe that ( [ eqn : property ] ) implies @xmath603 .",
    "as in the proof of proposition  [ prop:6 ] , we can argue that @xmath445 is connected by even paths to both @xmath395 and @xmath446 . since @xmath603",
    ", it follows that @xmath604 .",
    "now take a transitive extension of @xmath549 which orders all pairs of elements except for @xmath128 and @xmath100 , and let @xmath559 be the corresponding subset of @xmath605 .",
    "we can assume ( possibly by swapping @xmath387 and @xmath606 ) that @xmath607 .",
    "next we show that @xmath608 is independent .",
    "this will ensure that @xmath609 holds in the constructed multimorphism . if @xmath101 is not connected to any vertex in @xmath605 , then @xmath608 is trivially independent .",
    "otherwise , by lemma  [ lem : fgz ] , ( [ eqn : property ] ) , and lemma  [ lem : noniso ] , we can show that from any @xmath610 such that @xmath568 , there are odd paths in @xmath599 $ ] to each vertex in the set @xmath611 . since @xmath599 $ ] is bipartite , it follows that @xmath612 , so @xmath613 by lemma  [ gprop]([item : trans2 ] ) .",
    "hence , @xmath614 , and @xmath615 .",
    "it remains to verify that @xmath608 together with the singleton vertices in @xmath378 also form an independent set , _",
    "i.e. _ that there is no edge between a singleton and @xmath101 .",
    "but by condition ( [ eq : basic ] ) this is equivalent to saying that each row and column of every binary function in @xmath351 is submodular on @xmath142 , which follows from proposition  [ prop : corecases ] . by lemma  [ lem : indset ] , every binary function in @xmath351 has the 1-defect chain multimorphism corresponding to @xmath608 .",
    "finally , we prove property ( [ eqn : property ] ) .",
    "if @xmath600 , then by lemma  [ gprop]([item : loop ] ) , and the fact that @xmath531 contains an odd cycle , we have a loop on @xmath583",
    ". since @xmath616 and @xmath617 are loop - free for @xmath618 , we have @xmath619 by lemma  [ gprop]([item : abac ] )",
    ". otherwise , @xmath601 .",
    "we argued above that @xmath531 does not contain any loop in this case .",
    "thus , by lemma  [ gprop]([item : loop ] ) , every odd cycle @xmath620 in @xmath531 must intersect both @xmath621 and @xmath622 .",
    "now , by repeatedly applying lemma  [ gprop]([item : paths ] ) to @xmath620 , we obtain a triangle on a subset of @xmath623 . by lemma  [ lem : noniso ]",
    ", we can conclude that @xmath531 in fact contains the complete graph on these four vertices .",
    "in particular , we have both @xmath624 and @xmath625 . by lemma  [ gprop]([item : prop1 ] ) , we therefore have either @xmath626 or @xmath627 , and furthermore , either @xmath628 or @xmath629 . since there is no loop on @xmath584 ,",
    "we conclude that either the path @xmath630 or the path @xmath631 is in @xmath599 $ ] .",
    "in the same way , we find an odd path from @xmath586 to @xmath632 .",
    "we have presented a complete complexity classification for over a four - element domain .",
    "more importantly , we have compiled a powerful set of tools which will allow further systematic study of this problem .",
    "in particular , we have shown that it is possible to add ( crisp ) constants to an arbitrary core , without changing the complexity of the problem .",
    "this result holds in the more general case of as well ( although this requires a slightly different definition of endomorphisms ) , thus answering question  4 in ivn  @xcite .",
    "we have also demonstrated that the techniques used by krokhin and larose  @xcite for lattices can be used effectively in the context of arbitrary algebras as well , and in doing so , we have given the first example of an instance where submodularity does not suffice as an origin of tractability for .",
    "we hope that this insight will inspire an interest in the search for more tractable cases which are not explained by submodularity .",
    "finally , we have shown that graph representations such as the one defined by kolmogorov and ivn  @xcite can be used to great effect , even in non - conservative settings .",
    "the curious readers may ask themselves several questions at this point , and the following one is particularly important : do 1-defect chain multimorphisms define genuinely new tractable classes ? there is still a possibility that the tractability can be explained in terms of submodularity .",
    "we answer this question negatively with the following example .",
    "consider the language @xmath633 where @xmath634 is defined such that @xmath635 if and only if @xmath636 or @xmath637 .",
    "then , @xmath3 is a core on @xmath481 but it is not submodular on any lattice .",
    "however , @xmath3 has the 1-defect chain multimorphisms @xmath374 and @xmath375 from example  [ ex:1defect ] .",
    "a related question is why bisubmodularity does not appear in the classification of min csp over domains of size three  @xcite .",
    "the reason is that for any cost function @xmath638 which is bisubmodular , the tuple @xmath639 minimises @xmath96 .",
    "it follows that any @xmath0 constraint language over three elements which is bisubmodular is not a core .",
    "there are several ways of extending this work , and one obvious way is to study  instead of .",
    "it is known that the _ fractional polymorphisms _ of the constraint language , introduced by cohen et al .",
    "@xcite , characterise the complexity of this problem ( see also  @xcite ) .",
    "multimorphisms are a special case of such fractional polymorphisms . as in the case of ,",
    "it is currently not known if submodularity over every finite lattice implies tractability for .",
    "distributive lattices imply tractability , and certain constructions on lattices preserve tractability ( homomorphic images and maltsev products )  @xcite .",
    "furthermore , the five element modular non - distributive lattice ( also known as the diamond ) implies tractability for _ unweighted _  @xcite .",
    "finally , it is known that submodularity over finite modular lattices implies containment in * np * @xmath640 * conp *  @xcite .",
    "it is thus clear that in order to approach further classification of either or , it will be necessary to study the complexity of minimising submodular cost functions over new finite lattices .    as a last note",
    ", we mention that it seems to be possible to adapt proposition  [ prop:6 ] to the classification in  @xcite of for conservative finite - valued languages .",
    "this would yield a simpler description of those tractable cases ."
  ],
  "abstract_text": [
    "<S> we report new results on the complexity of the valued constraint satisfaction problem ( vcsp ) . under the unique games conjecture , </S>",
    "<S> the approximability of finite - valued vcsp is fairly well - understood . </S>",
    "<S> however , there is yet no characterisation of vcsps that can be solved exactly in polynomial time . </S>",
    "<S> this is unsatisfactory , since such results are interesting from a combinatorial optimisation perspective ; there are deep connections with , for instance , submodular and bisubmodular minimisation . </S>",
    "<S> we consider the min and max csp problems ( _ i.e. _ where the cost functions only attain values in @xmath0 ) over four - element domains and identify all tractable fragments . </S>",
    "<S> similar classifications were previously known for two- and three - element domains . in the process , we introduce a new class of tractable vcsps based on a generalisation of submodularity . </S>",
    "<S> we also extend and modify a graph - based technique by kolmogorov and ivn ( originally introduced by takhanov ) for efficiently obtaining hardness results in our setting . </S>",
    "<S> this allow us to prove the result without relying on computer - assisted case analyses ( which otherwise are fairly common when studying the complexity and approximability of vcsps . ) </S>",
    "<S> the hardness results are further simplified by the introduction of powerful reduction techniques .    * keywords * : constraint satisfaction problems , combinatorial optimisation , computational complexity , submodularity    = [ draw , circle , fill = black , text = white , minimum size=4pt , inner sep=0pt ] = [ ] = [ dotted ] </S>"
  ]
}