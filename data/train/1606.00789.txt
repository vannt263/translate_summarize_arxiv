{
  "article_text": [
    "in manipulating geometric objects , it is essential to possess robust algorithms for changing representation .",
    "this paper considers three fundamental representations , on the one hand implicit , and on the other parametric ( including the case of base points ) , and point samples .",
    "in particular , we offer three results on algorithms operating on the latter two representations .",
    "our algorithms construct two different matrix representations of implicit curves and surfaces by means of some type of interpolation through points .",
    "such representations of implicit objects are very robust , since they do not require computation of the implicit equation ; instead , they reduce geometric operations on the object to matrix algebra . in general , approaches to implicitization include resultants , grbner bases , moving lines and surfaces , and interpolation techniques .",
    "our first implicit representation uses interpolation matrices .",
    "the method has been developed for plane curves , surfaces , and hypersurfaces .",
    "the columns of the matrix are indexed by a superset of the implicit monomials , i.e. , the monomials that appear in the implicit polynomial with non - zero coefficient .",
    "this monomial set is determined quite tightly for parametric models , by using the sparse resultant of the parametric polynomials , thus exploiting any sparseness of the parametric and implicit polynomials . when the object is given as a point cloud",
    ", this superset is taken to be all monomials with total degree @xmath2 , where @xmath3 is an educated guess of the total degree of the implicit polynomial .    in this context ,",
    "our contribution is twofold .",
    "first , we extend the method to varieties of codimension higher than  1 . starting with the powerful and classic theory of chow forms , which generalizes resultant theory , we design an original algorithm that uses randomization in order to compute implicit hypersurfaces containing the variety by a simple and practical method .",
    "namely , the question is reduced to interpolating a ( sparse ) resultant . for space curves in 3d - space",
    ", our method yields a small number of implicit polynomials defining the curve set - theoretically .",
    "their degree is twice the optimal degree , but the algorithm is significantly simpler and is expected to be much faster than computing the optimal - degree polynomials .     and its 2 implicit surfaces.,title=\"fig : \" ]   and its 2 implicit surfaces.,title=\"fig : \" ]    second , we reduce certain geometric operations , most notably ray shooting , to univariate solving , after preprocessing by means of matrix operations . to check whether the computed intersections of the ray with the implicit surface lie on the given parametric patch , we employ inversion by means of bivariate solving .",
    "our method is not sensitive to intersections of high multiplicity , nor to surfaces with base points .",
    "however , it exhibits numerical issues when the interpolation matrix dimension is large , say of a few hundreds . on the other hand , the straightforward method of solving the system obtained by equating the parametric expressions to the ray",
    "coordinates typically exhibits robustness issues , especially at the presence of base points .",
    "we present several experiments based on an open - source implementation in maple .",
    "our third result refers to another matrix representation obtained by the theory of syzygies .",
    "the corresponding theory , including @xmath1-bases , has been developed for parametric models .",
    "our contribution is to show how to compute the required syzygies by interpolation , when the input curve or surface is given by a point cloud whose sampling satisfies mild assumptions . even when noise corrupts the sampling ,",
    "it is possible to estimate the necessary degree of the syzygies and interpolate them , thus constructing the matrix representing the implicit object .",
    "let us start with planar curves , and generalize the method in the sequel to space curves and surfaces .",
    "we assume that the curve admits some ( unknwon ) rational parameterization @xmath4 and we are given a parametric trail of points , that is a set of triplets @xmath5 such that @xmath6 for all @xmath7 . for sampling such a set of points",
    ", @xmath4 is an arc - length parameterization and the triplets can be obtained by a scanner capable of measuring the distance it has covered when moving on the curve , e.g.  if equipped with a gps system .",
    "when given a set of points that is dense enough , the distances between consecutive points can be used to approximate the arc length of the curve .",
    "of course , very long curves or large surface patches have to be considered in pieces ( possibly after segmentation , see figure  [ fsegpointcloud ] ) .",
    "this paper is organized as follows : section  [ sprevious ] overviews previous work , whereas subsection  [ smatrixmethod ] outlines the basic method of implicitization of parametric hypersurfaces by interpolation matrices .",
    "section  [ schow ] employs the chow form to handle higher codimension varieties .",
    "section  [ srayshoot ] examines ray shooting when the surface is represented by interpolation matrices .",
    "section  [ ssyzygies ] provides the method for computing a matrix representation via syzygies of a parametric curve given by a set of parametric points .",
    "we conclude with future work and open questions .",
    "this section sketches the most relevant existing work .",
    "the most direct method to reduce implicitization to linear algebra is to construct a square matrix @xmath8 , indexed by all possible monomials in the implicit equation ( columns ) and different values ( rows ) at which all monomials get evaluated .",
    "then the vector of coefficients of the implicit equation is in the kernel of @xmath8 .",
    "this idea has been extensively used , e.g.  in @xcite .",
    "the method , as introduced in @xcite , exploits sparse resultant theory so as to predict the monomials in the implicit equation and thus build the interpolation matrix .",
    "it handles objects with base points .",
    "resultants , and their matrix formulae , have been used to express the implicit surface equation , e.g. , in @xcite , under the assumption of no base points .",
    "this technique reduces ray shooting ( and surface - surface intersection ) to substituting the parameterization of one object into the resultant matrix , then solving the resulting univariate polynomial .    our method ,",
    "unlike previous methods , works also for objects defined by point clouds .",
    "moreover , the interpolation matrices are mostly numeric , except for one symbolic row that expresses the second object , namely the ray or the second surface .",
    "this allows for several preprocessing operations to be executed numerically . in @xcite",
    "they formulated membership and sidedness predicates in terms of operations on the interpolation matrix .",
    "their approach is extended to ray shooting in section  [ srayshoot ] ( and surface - surface intersections in section  [ sfuture ] ) .",
    "a modern method for representing implicit equations by matrices is based on the theory of syzygies , see e.g. , @xcite .",
    "this approach handles objects with base points ; it yields matrices in the implicit variables whose rank drop is equivalent to a symbolic point lying on the implicit surface or curve .",
    "hence , they indirectly represent implicit objects and allow for geometric operations , such as surface - surface intersection @xcite and , more recently , ray shooting @xcite , to be executed by linear algebra operations .",
    "their advantage is that the matrices are much smaller than interpolation matrices , and allow for inversion by an eigenproblem on these matrices . on the other hand ,",
    "their construction is a two - step process of matrix operations , hence more involved than the construction of interpolation matrices .",
    "moreover , they are symbolic with entries linear polynomials in the implicit variables .",
    "chow forms have been extensively studied in computational algebra , in particular for varieties of codimension @xmath9 , since they provide a method to express the variety by a single polynomial , @xcite , @xcite , @xcite , etc .",
    "given a @xmath3-dimensional irreducible variety @xmath10 in @xmath11-dimensional space , and @xmath12 linear forms @xmath13 on @xmath10 , the _ chow form _ @xmath14 of @xmath10 is a polynomial whose variables are the coefficients of the linear forms and that vanishes whenever the linear forms vanish on @xmath10 .",
    "for example , the chow form of a space curve in 3d - space is a polynomial in the indeterminates @xmath15 that vanishes whenever the planes @xmath16 & \\\\[-6pt ] \\nonumber & h_1 = v_0 x_0 + v_1 x_1 + v_2 x_2 + v_3 x_3 = 0,\\end{aligned}\\ ] ] intersect on the curve .",
    "there are many ways to express @xmath14 .",
    "the most common is by using the maximal minors of the @xmath17 matrix whose rows are the normals to the hyperplanes @xmath13 , see also section  [ ssrewrite ] .",
    "these are known as _ plcker coordinates _ or _ brackets _ and are the variables of @xmath14 .",
    "equivalently , the _ dual plcker coordinates _ or _",
    "dual brackets _ can be used ; these are the maximal minors of a @xmath18 matrix whose rows are @xmath19 points that span @xmath20",
    ".    there are methods and algorithms to recover the implicit or affine equations of @xmath10 from @xmath14 , see @xcite .",
    "here we adopt a more practical tack that avoids conversion but may yield a multiple of @xmath14 .",
    "this section describes the implicit representation of parametric objects or objects given as point clouds , by interpolation matrices .",
    "the method constructs an interpolation matrix @xmath8 for a plane curve or a ( hyper)surface given either in parametric form , or , as a point cloud .",
    "if the input object is given in parametric form , then it is possible to predict the implicit monomials .",
    "this set is included in a polytope , called the _ predicted ( implicit ) polytope _ computed in @xcite by software ` respol ` ( ` http://sourceforge.net/projects/respol ` ) .",
    "if the input is a point cloud , we consider a coarse estimation of the monomial set based on total degree .",
    "the set @xmath21 of monomials is used to construct a numerical matrix @xmath8 .",
    "this is the matrix of a linear system whose unknowns are the coefficients @xmath22 of the monomials with exponents in @xmath21 in the implicit polynomial .",
    "thus implicitization is reduced to kernel computation .",
    "a linear system in the @xmath22 is obtained from equation @xmath23 , by plugging in the parametric expressions for @xmath24 , and choosing _ generic _",
    "points @xmath25 , for the parameters @xmath26 , avoiding values that make the denominators of the parametric expressions close to  0 .",
    "letting @xmath27 denote the monomial @xmath28 and @xmath29 its evaluation at @xmath30 , we end up with a matrix @xmath8 of the form : @xmath31 \\vdots                      & \\cdots &   \\vdots    \\\\[3pt ] m_1 |_{t=\\tau_{\\mu } } & \\cdots & m_{|s| } |_{t=\\tau_{\\mu } }        \\end{bmatrix}.\\ ] ] typically @xmath32 for performing exact kernel computation , and @xmath33 for approximate numeric computation .",
    "when constructing matrix @xmath8 it is assumed that the parametric hyper - surface is sampled sufficiently generically by evaluating the parametric expressions at random points @xmath34 .",
    "let us recall some further properties .",
    "the construction of the interpolation matrix @xmath8 is slightly modified to obtain matrix @xmath35 which is numeric except for its last row .",
    "let @xmath36 be the @xmath37 numeric matrix obtained by evaluating the monomials @xmath21 at @xmath38 points @xmath39 , and let @xmath35 be the @xmath40 matrix obtained by appending the monomials @xmath21 to matrix @xmath36 : @xmath41 \\dots & \\dots & \\dots\\\\ \\dots & { s}(x ) & \\dots \\end{bmatrix}.\\ ] ]    notice that matrices @xmath36 , @xmath8 and @xmath42 , for @xmath43 a point on the ( hyper)surface have the same kernel of corank @xmath44 .",
    "matrix @xmath35 has an important property :    [ lmatrix ] assuming @xmath36 is of full rank , then @xmath45 equals the implicit polynomial @xmath46 up to a constant .",
    "this section examines the case of varieties of codimension greater than  1 . a fundamental tool in algebraic elimination is the chow form of a variety .",
    "[ dchow ] let @xmath47 be a @xmath3-dimensional irreducible variety and @xmath48 be linear forms where @xmath49 and @xmath50 are new variables , @xmath51 .",
    "the chow form @xmath14 of @xmath10 is a polynomial in the variables @xmath50 such that @xmath52    the intersection of the @xmath12 hyperplanes @xmath13 in is a @xmath53-dimensional linear subspace @xmath20 of @xmath54 .",
    "the set of @xmath55-dimensional linear subspaces @xmath20 of @xmath54 is called the grassmannian @xmath56 .",
    "those subspaces @xmath20 that intersect @xmath10 form a hypersurface @xmath57 on the grassmannian @xmath58 by ( * ? ? ?",
    "* prop.2.2 , p.99 ) .",
    "the chow polynomial is the unique up to scalar factor polynomial that defines @xmath57 .    a classic property which is the following .    [ pgkz ] a @xmath3-dimensional irreducible subvariety @xmath59 is uniquely determined by its chow form .",
    "more precisely , a point @xmath60 lies in @xmath10 if and only if any @xmath53-dimensional plane containing @xmath61 belongs to the chow form .    consider any irreducible variety @xmath10 of dimension @xmath3 , with parameterization @xmath62 and @xmath12 hyperplanes @xmath63 , where @xmath13 is defined as in .",
    "substituting @xmath64 in every equation @xmath65 , we obtain an overdetermined system of equations in @xmath66 which we can eliminate by using resultants .",
    "the discussion above leads to the following result reducing the computation of any chow form to the computation of a multivariate resultant .    consider any @xmath67 of dimension  @xmath3 , with affine parameterization @xmath64 , @xmath68 .",
    "then , the chow form @xmath14 is the resultant of the hyperplane equations @xmath13 where we eliminate @xmath69 .",
    "recall that @xmath14 is a polynomial in the plcker coordinates , i.e. , the maximal minors of the @xmath70 matrix whose rows are the normals to the hyperplanes @xmath13 . to obtain a representation for @xmath10 as intersection of implicit hypersurfaces from its chow form one can apply ( * ? ? ?",
    "* cor.2.6 , p.102 ) , or ( * ? ? ?",
    "* prop.3.1 ) .",
    "both methods reduce to applying a rewriting algorithm such as the one in @xcite and typically yield more implicit polynomials than necessary , all of degree equal to the degree of @xmath10 .",
    "to illustrate the approach in @xcite , let us focus on varieties of codimension  2 in @xmath71 , i.e. , space curves .",
    "consider the planes @xmath72 in equation .",
    "the chow form @xmath14 is a polynomial in the brackets @xmath73 $ ] , where @xmath73 $ ] denotes the maximal minor indexed by the columns @xmath74 , of the matrix @xmath75 v_0 & v_1 & v_2 & v_3 \\end{bmatrix}.\\ ] ] @xmath14 is then rewritten as a polynomial in the dual brackets @xmath76 $ ] .",
    "the dual brackets are substituted by the determinant @xmath77 of the corresponding minor of @xmath78 .",
    "finally , the result is expanded as polynomial whose variables are polynomials in the @xmath79 and its coefficients are polynomials in the @xmath80 .",
    "the latter polynomials are all of degree equal to the degree of @xmath10 and form a system of implicit equations of @xmath10 .    to avoid complex computations , such as the rewriting algorithm , we follow a different approach .",
    "suppose that we have a parameterization @xmath81 of the space curve @xmath10 .",
    "let line @xmath20 be defined by a symbolic point @xmath82 and a sufficiently generic point @xmath83 .",
    "define two planes @xmath72 that intersect along @xmath20 , by choosing one more random point @xmath84 and @xmath85 , respectively , such that @xmath86 .",
    "let their equations be as in , where the coefficients now are _ linear polynomials _ in @xmath61 .",
    "the sylvester resultant of this system where we set @xmath87 , eliminates @xmath26 and returns a polynomial in @xmath61 which vanishes on @xmath10 ( but not only on @xmath10 ) , thus offering a necessary but not sufficient condition .",
    "let @xmath88 .",
    "the degree of the sylvester resultant in the coefficients of the @xmath89 , equals @xmath90 , and its total degree is @xmath91 .",
    "the symbolic point @xmath61 is involved ( linearly ) in the coefficients of both @xmath92 and @xmath93 , since it is taken to lie in the intersection of the two planes .",
    "hence the degree of the sought polynomial in @xmath61 is @xmath91 .      for arbitrary codimension ,",
    "the construction above can be generalized as follows .",
    "let @xmath47 be a @xmath3-dimensional variety and @xmath94 be a set of @xmath95 sufficiently generic points @xmath94 not in @xmath10 .",
    "let @xmath20 be the @xmath53-dimensional linear subspace defined by a symbolic point @xmath96 and the points in @xmath94",
    ". chose @xmath12 sets of @xmath3 random points @xmath97 , @xmath98 . let @xmath99 be the hyperplane defined as the span of the points @xmath100 .",
    "substitute @xmath64 in each @xmath13 to obtain @xmath101    the resultant of the obtained polynomials eliminates @xmath69 and returns a polynomial @xmath102 in @xmath61 which vanishes on @xmath10 ( but not only on @xmath10 ) , thus offering a necessary but not sufficient condition .",
    "one may repeat the procedure for a few distinct points @xmath94 so as to obtain several implicit hypersurfaces @xmath103 whose intersection is @xmath10 and essentially achieve the hypothesis of proposition  [ pgkz ] .    to compute the",
    "resultant ( see also step  3 of algorithm  [ achow ] below ) , one option is to use interpolation in conjunction with information on its support .",
    "this might be obtained from degree bounds on @xmath104 , as explained in the sequel , or by the computation of the monomials of the polynomials in   using software ` respol ` from  @xcite .",
    "the latter is analogous to the basic approach for defining the interpolation matrix by the support obtained from the resultant polytope , see section  [ smatrixmethod ] .    to find the degree of @xmath102 in @xmath61 , first note that the degree in @xmath26 of every @xmath105 @xmath106 is @xmath107 , and that the coefficients of the @xmath13 s are linear polynomials in @xmath61 .",
    "the resultant of these polynomials has degree in the coefficients of each @xmath13 equal to @xmath108 , therefore total degree @xmath109 , see e.g.  ( * ? ? ?",
    "* thm.3.1 ) .",
    "a tighter bound on the degree of @xmath104 can be obtained by considering sparse resultants and _ mixed volumes _ ( * ? ? ?",
    "let us denote by @xmath110 the mixed volume of all polynomials excluding @xmath13 .",
    "the degree of the sparse resultant in the coefficients of @xmath13 is known to equal @xmath111 , therefore its total degree equals @xmath112 .",
    "both degree bounds above are typically much larger than the degree of @xmath10 .",
    "we can avoid interpolation if there exist compact formulas for the resultant , preferably determinantal formulas or , otherwise , rational formulas .",
    "one such determinantal formula is the sylvester matrix for the case of space curves .",
    "further classes of polynomial systems admit determinantal formulas , see e.g.  @xcite . of course ,",
    "sylvester - type formulas as optimal for generic coefficients and special care must be taken for arbitrary coefficients , possibly by applying an infinitesimal perturbation or by finding a more compact formula adapted to the specific system .",
    "let us now state the algorithm for any @xmath3-dimensional variety @xmath10 .",
    "[ achow ]    1 .",
    "define @xmath53-dimensional linear subspace @xmath20 by picking affinely independent random points @xmath113 , and consider symbolic point @xmath96 .",
    "2 .   define @xmath12 hyperplanes @xmath13 through @xmath114 , for points @xmath115 such that points in @xmath94 and points @xmath115 are affinely independent .",
    "3 .   set @xmath64 in the hyperplane equations .",
    "the resultant of the hyperplane equations , where we eliminate @xmath69 is the sought polynomial in @xmath61 .",
    "we compute it by compact formulas or by the standard interpolation method : 1 .   compute the sparse resultant s monomials and define implicit monomials @xmath21 .",
    "2 .   define matrix @xmath8 with columns indexed by @xmath21 .",
    "sampling @xmath69 generates points on @xmath10 , thus constructing @xmath8 .",
    "4 .   return the kernel of @xmath8 , or an adequate vector in it .",
    "an issue arises of course at sampling : all generated points @xmath61 lie on @xmath10 , whereas we are trying to compute a hypersurface containing @xmath10 .",
    "we expect that the kernel of @xmath8 will have large dimension and among the kernel vectors we may choose one or more  small \" vectors to define the implicit equation . here",
    "`` small '' may refer to the number of non - zero vector entries , or to the total degree of the monomials corresponding to its non - zero entries ; see section  [ sfuture ] .    in step  2 ,",
    "we have experimented with the idea of choosing specific points @xmath115 so that the hyperplanes are pairwise orthogonal , but this offers no advantage .    in the examples below , which concern space curves , we compute the resultant directly using the sylvester matrix , and also by interpolation , employing the above degree bounds relying on mixed volume .",
    "the sylvester matrix leads to polynomials of the same degree for any choice of random points @xmath94 , namely twice the degree of the curve . interpolating the resultant leads to matrices with very large kernels :",
    "on the upside , the polynomials we obtain from the kernel vectors are at most of degree no greater than those of the former method . moreover ,",
    "among them we can find a number of polynomials of small degree and , often , smaller than the degree predicted by degree bounds : these polynomials define the space curve set - theoretically , in other words , as the intersection of a few surfaces .    in the implicit representations computed in the examples below , we set @xmath116 , for emphasizing these are the implicit variables",
    ". moreover , we switch from the projective to the affine setting .    [ exam : twistedcubic ] consider the twisted cubic curve _ affinely _ parameterized as : @xmath117 the implicit equations of @xmath10 are @xmath118    let @xmath20 be the line passing through symbolic point @xmath119 , and generic point @xmath83 ( here the set @xmath94 consists of only one point also denoted @xmath94 ) .",
    "we define two random planes @xmath120 , @xmath121 , intersecting at @xmath20 by considering random points @xmath122 , respectively .",
    "then , the sylvester resultant of @xmath123 is a polynomial of degree  6 in @xmath61 which factors into the degree  3 polynomial @xmath124 and an extraneous linear factor raised to the power 3 .",
    "this yields a surface containing @xmath10 but not of minimal degree . repeating the procedure 4 times",
    ", the ideal of the resulting polynomials equals the ideal defined from the polynomials in .",
    "note that all iterations produce polynomials of degree 6 , all of which factor as the one above .",
    "alternatively , we may interpolate the sylvester resultant above .",
    "we take as predicted support the lattice points in a 3-simplex of size 6 .",
    "the @xmath125 matrix constructed has a kernel of dimension 65 .",
    "the corresponding 65 kernel polynomials are of degrees from 2 to 6 . among them ,",
    "the three polynomials of minimal degree 2 : @xmath126 , define the twisted cubic exactly .",
    "in contrast , ( * ? ? ?",
    "3.3 ) gives 16 ( homogeneous ) implicit equations , all of degree 3 .",
    "[ exam:2cylinders ] consider the space curve in fig .",
    "[ f2cylinders ] affinely parameterized as : @xmath127 it is the intersection of two cylinders : @xmath128    let line @xmath20 be defined from the symbolic point @xmath119 , and",
    " generic \" point @xmath83 .",
    "define two random planes @xmath129 and @xmath130 that intersect at @xmath20 , by choosing random points @xmath122 , respectively .",
    "then , the sylvester resultant of @xmath131 is a polynomial of degree  8 in @xmath61 which factors into the following degree  4 polynomial : @xmath132 and an extraneous linear factor raised to the power  4 .",
    "this yields a surface containing @xmath10 but not of minimal degree .",
    "interestingly , as in the previous example , repeating the procedure 4 times , the ideal of the resulting polynomials equals the ideal defined from the polynomials in .",
    "note that all iterations produce polynomials of degree 8 which all factor in two degree  4 polynomials one of which vanishes on @xmath10 .",
    "alternatively , we interpolate the sylvester resultant above using as support the lattice points in a 3-simplex of size 8 .",
    "the @xmath133 matrix constructed has a kernel of dimension 133 .",
    "the degrees of the corresponding 133 kernel polynomials vary from 2 to 8 . among them , there are two polynomials of degree 2 .",
    "they coincide with those in .",
    "this section examines geometric operations , implemented by means of linear algebra so as to avoid computation of the implicit equation .",
    "our main motivation is to complete the properties of interpolation matrices used in expressing the implicit form of objects initially given either by a parameterization or a point cloud .",
    "our experimental results are preliminary but show that our approach can be competitive to well - established methods possessing optimized implementations .    in particular , the representation by interpolation matrices reduces ray shooting at a surface patch to operations on the interpolation matrix and univariate equation solving .",
    "an analogous approach applies to computing surface - surface intersections by determining the implicit curve of the intersection in the plane of the parameters of one surface , discussed in section  [ sfuture ] .    in this section",
    "we consider the hypersurfaces are given affinely , hence implicit coordinates are @xmath134 , parameterized by @xmath135 .",
    "the standard case of surfaces is @xmath136 .",
    "the ( hyper)surface is represented by an interpolation matrix of the form  ( [ ematx ] ) , we substitute the parametric ray into the monomials @xmath137 of the surface s implicit support .",
    "this defines the last row of the interpolation matrix .",
    "then , the intersections of the ray with the surface correspond to the real roots of the univariate polynomial defined by the matrix s determinant .",
    "lastly , our algorithm uses inversion of the parameterization to check whether the intersection points lie on the patch . in the sequel",
    "we explain the algorithm .",
    "let the ray be given by @xmath138 where the @xmath139 $ ] are linear polynomials in @xmath140 .",
    "the ray may lie in arbitrary dimension but again , the standard 3d case is @xmath136 . starting with the square matrix @xmath8 in expression  ( [ ematx ] ) , we substitute @xmath141 by @xmath142 in the monomials of the last row @xmath137 : @xmath143 s(\\rho ) \\end{bmatrix } , \\ ] ] where @xmath144 is a row vector of monomials in @xmath140 .",
    "the intersection points correspond to the real roots of polynomial equation @xmath145 , which expresses the implicit equation by lemma  [ lmatrix ] , evaluated at @xmath146 .",
    "the structure of @xmath147 allows us to perform numeric operations so as to obtain another matrix with same determinant , easier to compute it .",
    "our goal is to use some preprocessing time , without knowledge of the ray , so as to accelerate the actual ray shooting computation .",
    "this preprocessing can be considered as a better representation of the surface , amenable to geometric operations .",
    "we apply a plu - decomposition or qr - decomposition on @xmath36 .      it shall be easier to discuss matrix operations on the transpose matrices , namely @xmath148 and @xmath149 , although mathematically equivalent with operations on the original matrices .",
    "below , we employ the plu - decomposition , but we have also experimented with the qr - decomposition .",
    "first , consider the standard plu - decomposition on @xmath150 matrix @xmath149 : @xmath151 where @xmath152 are square @xmath153 permutation and lower - triangular matrices , respectively , where @xmath20 has a unit diagonal , and @xmath78 is a numeric rectangular @xmath150 upper triangular matrix , with the last row equal to zero .",
    "we use the above decomposition to derive an analogous decomposition of @xmath154 . clearly , @xmath155 ,",
    "hence we can write square @xmath153 matrix @xmath156 as follows : @xmath157 =      [ \\ , u\\ , | \\ ; l^{-1}p^{t } s(\\rho)^t ] , \\ ] ] where @xmath158 $ ] indicates concatenation of matrices , and @xmath144 is a row vector , hence the right - hand side is clearly a square @xmath153 matrix .",
    "now , @xmath159 because @xmath160 . to compute the determinant",
    ", we use the right - hand side of equation  ( [ emm ] ) , which is a square upper triangular matrix .",
    "its diagonal is the diagonal of @xmath78 with one last element equal to the last element of column @xmath161 .",
    "since @xmath78 is numeric , the determinant equals , up to a constant nonzero factor , the last element on the column @xmath161 .",
    "hence , it suffices to store the last row of @xmath162 , which depends on the surface , and compute its inner product with vector @xmath163 , for any given ray .",
    "this discussion establishes the following :    [ ldecomp ] given @xmath164 $ ] as defined above , consider the plu - decomposition @xmath165 , which can be computed at preprocessing , and does not require knowledge of the particular ray .",
    "it is possible to compute the determinant @xmath166 , up to a nonzero scalar factor , as the inner product of the last row of @xmath162 multiplied by column vector @xmath163 .",
    "an analogous result follows if one computes the qr - decomposition @xmath167 .",
    "then , the inner product of the last row of @xmath168 with @xmath163 yields @xmath166 , up to a nonzero scalar factor .    given @xmath169",
    ", we employ any state - of - the - art real solver to approximate all positive real roots @xmath170 . for every root @xmath171 , for some @xmath172",
    ", we obtain the intersection point @xmath173 in implicit space .",
    "an alternative is to use solvers than only require values of the polynomial @xmath174 and , eventually , its derivative @xmath175 , such as the newton - raphson method . at every iteration",
    ", an approximate root @xmath170 is improved by computing @xmath176 in particular , having computed and stored the last row of @xmath162 as above , every iteration computes its inner product with vector @xmath177 , for a given ray and value @xmath170 , which yields @xmath178 $ ] up to a scalar factor @xmath179 .",
    "the method also needs the vector of monomials differentiated with respect to variable @xmath140 , denoted @xmath180 , and evaluated at @xmath170 .",
    "now @xmath181 $ ] equals , up to the same scalar factor @xmath179 , the inner product @xmath182 , and equation  ( [ enewton ] ) becomes : @xmath183 } { \\det [ m ' | s'(\\rho_0 ) ] } .\\ ] ] we have experimented with this method and the results are comparable in terms of numerical accuracy and speed .",
    "further experiments are needed to determine whether one method is preferable to the other on certain classes of inputs .",
    "the last step consists in computing the corresponding vector @xmath184 that maps to this implicit point , by inverting the parameterization .",
    "hence we check whether the point lies on the patch of interest . assuming a proper parameterization",
    ", there is a unique solution @xmath184 such that @xmath185 .",
    "there are several ways to solve the inversion problem , including methods for solving the overconstrained system @xmath186 for every @xmath187 .",
    "alternatively , we have used real solving methods applied to the following well - constrained polynomial system : one defines a system of @xmath11 polynomials in @xmath188 , namely @xmath189 , for @xmath68 .",
    "then , we substitute all real roots into the last polynomial @xmath190 , and keep the root that satisfies it , or best satisfies it if approximate numerical computation is involved .",
    "this approach works satisfactorily for @xmath136 in our experiments .",
    "let us first consider the asymptotic bit complexity , if we omit preprocessing .",
    "let @xmath191 be the maximum total degree of any monomial in @xmath21 , hence polynomial @xmath174 has degree @xmath191 .",
    "real solving of this polynomial costs @xmath192 , e.g.  @xcite .",
    "inversion is then required to check which solutions belong to the relevant patch ; it reduced to bivariate solving and evaluation of the polynomials @xmath193 defined by the parametric equations , for every real root @xmath187 of @xmath194 .",
    "if these polynomials have total degree @xmath3 in @xmath195 and bitsize @xmath196 , then each system is solved in bit complexity @xmath197 , see e.g.  @xcite , and this is repeated for each of the @xmath198 roots @xmath187 .",
    "it turns out that this is the bottleneck in practice , which can be explained by the analysis since @xmath191 is only a few times larger than @xmath3 .",
    "for example , the bicubic surface has @xmath199 and @xmath200 .",
    "we now experiment with code developed on top of the public domain maple implementation of the basic method running maple  14 on a laptop with a 3  ghz intel core  i5 processor .",
    "the basic method can be found at : http://ergawiki.di.uoa.gr/experiments/simpl.mpl .",
    "runtimes are averaged over at least  3 runs .",
    "we use the standard benchmark of a bicubic surface : @xmath201 recall that the implicit equation has total degree  18 , with a support of  715 monomials . in this example , the predicted support is optimal , containing  715 monomials",
    ". however , the size of the matrix makes computations over the rationals unfeasible , in particular plu- or qr - decompositions are too hard .",
    "we use floating - point numbers , but then numerical error becomes significant .",
    "this illustrates a current limitation of our approach .",
    "a concrete ray we experimented with was @xmath202 let us examine the various steps and their runtimes .    *",
    "given the vertices of the predicted implicit polytope , constructing the interpolation matrix with real values takes less than @xmath203  sec . almost all the time is taken for evaluating the entries of matrix @xmath36",
    "* the plu - decomposition of @xmath36 , inverting @xmath20 , transposing @xmath204 and , eventually , computing the last row of @xmath162 takes less than 0.5  sec .",
    "all steps so far may be considered as preprocessing .",
    "* computing the one relevant entry of @xmath205 yields a polynomial @xmath174 of degree  18 ; it takes about @xmath206  sec .",
    "* solving the univariate equation with ` rootfinding[isolate ] ` returns all real roots . since the polynomial is very ill - conditioned , we check the accuracy of the output roots by back - substitution .",
    "typically , this rejects up to half of the roots for @xmath140 . for the above ray",
    ", there are two real roots .",
    "the entire step takes about @xmath206  sec .",
    "* for each value of @xmath207 , there is an intersection point @xmath208 .",
    "we invert the parameterization so as to check whether @xmath208 lies in the patch or not .",
    "one way is to solve a @xmath209 system obtained from two parametric equations at the intersection point .",
    "we compute a number of real solutions @xmath210 by ` rootfinding[isolate ] ` .",
    "each solution is substituted into the third equation for verification . in this example , we obtain better accuracy if the two equations for which we solve include the parameterization of @xmath211 , which has highest degree . the entire step takes less than @xmath212  sec .    in conclusion ,",
    "if we omit preprocessing , the total runtime is up to @xmath213  sec , and the bottleneck of the entire procedure is clearly the last step of inversion .",
    "the runtime of our method on the bicubic may be juxtaposed to the direct approach of solving the @xmath214 system @xmath215 , @xmath216 , which takes about @xmath217  sec on maple , for the above example , and is substantially more accurate numerically on this example .",
    "numerical issues arise for the direct approach when the parameterization has base points , as in example  [ emobius ] below . on the other hand , both direct and our method can handle intersection points with high multiplicity very easily , since real solvers can identify multiple roots and report their multiplicity .",
    "let us also compare with the matrix representation based on the theory of syzygies and employed for ray shooting by @xcite .",
    "this method is very robust and can handle bicubic surfaces with preprocessing and ray - shooting runtimes both below 1  msec , using a c++ implementation and state - of - the - art libraries such as lapack and eigen .",
    "the second runtime may increase in the case of multiple intersection points , but base points pose no limitation to this approach .",
    "we have focused on methods potentially offering exact solutions if given enough precision ; hence , we have not compared to methods relying on a triangular mesh since they are completely different and may need to refine candidate solutions against the parametric patch .    to avoid numerical issues ,",
    "our approach may employ exact rational computation for the plu- or qr - decompositions .",
    "this is feasible with medium - size inputs .",
    "[ emobius ] let us consider the moebius surface , parameterized as follows : @xmath218 with implicit equation @xmath219 one predicted support has 398 monomials , and the method finds the exact implicit polynomial after performing gcd among certain candidate polynomials .",
    "another support with 21 monomials yields an interpolation matrix whose unique kernel vector readily gives the implicit equation .",
    "working with the latter matrix , it is possible to perform qr - decomposition over the rationals and follow lemma  [ ldecomp ] for computing a univariate polynomial which is solved very accurately .",
    "in particular we compute @xmath167 , hence the inner product of the last row of @xmath168 with @xmath163 yields @xmath166 , up to a nonzero scalar factor .",
    "our approach on this example takes about 2  sec .",
    "it is important to note that this surface has complex base points .",
    "this poses no problem for our method , however it makes certain real solvers , such as maple s ` rootfinding[isolate ] ` , find no real solution for very simple rays such as @xmath220    on simpler examples the direct method is up to  2 times faster and equally accurate as our method .",
    "let us illustrate with a simpler surface .",
    "the crossed surface has the following parameterization @xmath221 implicit equation @xmath222 .",
    "our method computes a superset of 4 implicit monomials hence , yields 4 columns in @xmath8 indexed by @xmath223 .",
    "a concrete ray we experimented with was @xmath224 which has a double intersection point at @xmath225 or , equivalently , @xmath226 .",
    "our method computes polynomial @xmath174 of degree  4 on which ` rootfinding[isolate ] ` returns the following roots : @xmath227 where the double root is reported as two nearby roots .",
    "inversion easily computes the parameter values at these roots .",
    "if we omit preprocessing , the total runtime is about @xmath228  msec , and the bottleneck of the entire procedure is again the last step of inversion , taking almost half of this time . the direct method of solving the @xmath214 system takes about @xmath229  msec .",
    "this section describes matrix representation via syzygies , and our approach for constructing such matrices using interpolation .",
    "the basic method is well known and sketched below , for details see  @xcite .",
    "we first describe the general method for computing a matrix representation of a rational planar curve via syzygy computations .",
    "consider the parameterization @xmath230 @xmath231 where @xmath232 $ ] are homogeneous polynomials of the same degree @xmath3 and for simplicity we assume @xmath233 , i.e.  @xmath4 has no base points .",
    "extensions for addressing base points are well - established @xcite .",
    "the dehomogenization of @xmath4 gives the rational planar curve @xmath234 parameterized by @xmath235 where @xmath236 is short for @xmath237 .",
    "a triplet @xmath238 of homogeneous polynomials @xmath239 $ ] , which verifies the linear relation @xmath240 , is called a _",
    "syzygy _ on the polynomials @xmath241 .",
    "we write @xmath242 by homogenization , the @xmath243 have the same degree , which is the degree of their syzygy .",
    "the set of syzygies @xmath244 can be partitioned according to their degree ; formally , @xmath244 is a graded module . by fixing a degree @xmath245",
    ", we can consider the set of syzygies of degree @xmath246 , denoted by @xmath247 , which is known to be an @xmath248-vector space .",
    "let @xmath249 be an @xmath248-basis of @xmath247 , where @xmath250 denotes the basis cardinality .    assuming @xmath208 are the homogeneous coordinates of @xmath251 , an equation of the form @xmath252 is called a _",
    "moving line_. we associate each @xmath253 to its moving line and we develop it in terms of the @xmath254 as follows : @xmath255 where @xmath256 is a linear polynomial in @xmath257 $ ] .",
    "now , we can define @xmath258 as a @xmath259-matrix whose entry @xmath260 is the linear polynomial @xmath256 . for @xmath261 , the matrix @xmath258 is an implicit matrix representation of the curve @xmath234 , since it holds the following property : for any point @xmath262 the rank of @xmath258 evaluated at @xmath263 drops if and only if @xmath263 belongs to the algebraic closure of @xmath264 @xcite .",
    "we dehomogenize by setting @xmath265 and have the equivalent property that a point @xmath266 belongs to @xmath234 if and only if the rank of @xmath267 drops ; the latter denotes the matrix in the non - homogeneous setting .",
    "now , consider a planar curve @xmath234 for which there exists a rational parameterization @xmath268 , @xmath269 where @xmath4 is not known .",
    "the input is a set of triplets of the form @xmath270 such that @xmath6 , for a range of @xmath55 to be defined below .",
    "these triplets are sampled following the scenarios described in section  [ sintro ] , for instance when @xmath4 is an arc - length parameterization and the triplets are sampled by a scanner following @xmath234 .",
    "we now provide an algorithm for computing an implicit matrix representation of the curve @xmath234 described by this parametric trail of points .",
    "initially , the algorithm fixes a degree @xmath245 , and shall compute an @xmath248-basis for @xmath271 : since the rational functions of @xmath272 are not explicitly known , we compute the basis in the following manner . consider the moving line @xmath273 .",
    "the expanded form of each @xmath274 is @xmath275,\\ i=1,2,3,\\ ] ] where the @xmath276 are ( unknown ) coefficients .",
    "hence , we can rewrite the moving line as @xmath277 such equations are going to be used to determine the @xmath278 unknown coefficients @xmath276 by interpolation at the sampled triplets . for this",
    ", we define a @xmath279 matrix @xmath280 whose rows are indexed by evaluations @xmath30 , and each row expresses the above equation as follows : @xmath281.\\ ] ] we compute a basis of the kernel of matrix @xmath280 and rewrite each kernel basis vector @xmath282 as @xmath283 following equation ( [ eq : kexpanded ] ) . we can easily show that the triplets @xmath283 , @xmath284 form an @xmath248-basis of @xmath271 .",
    "we use this basis to construct the matrix @xmath285 .    in order for the matrix @xmath285 to be a matrix representation of the implicit curve @xmath234",
    ", @xmath246 must verify the inequality @xmath261 .",
    "since @xmath3 is unknown in our setting , we establish the following lemma .",
    "[ lkdegree ] consider a rational parametric curve @xmath234 of the form ( [ eq : kparam ] ) .",
    "let @xmath3 be the homogeneous degree of the ( unknown ) @xmath241 , @xmath216 , @xmath245 be the degree chosen by the algorithm and @xmath286 be the cardinality of the kernel basis of @xmath280 . then ,    1 .",
    "@xmath287 if and only if @xmath288 .",
    "2 .   @xmath289 if and only if @xmath290 .",
    "3 .   @xmath291 if and only if @xmath292 .",
    "_ proof sketch .",
    "_ by construction , the kernel basis of @xmath280 corresponds to an @xmath248-basis of @xmath293 and , thus , @xmath294 .",
    "the idea behind the proof is that @xmath295 @xcite and that @xmath296 is an increasing function of @xmath246 .    as a consequence , in the case @xmath297",
    ", the algorithm yields a valid @xmath285 .",
    "lemma [ lkdegree ] further allows us to compute @xmath3 by constructing matrix @xmath280 and comparing @xmath298 with the selected @xmath246 .",
    "[ exam : kplanecurve ] consider the folium of descartes curve _ affinely _ parameterized as : @xmath299    we will be using equation ( [ eq : kfolium ] ) only to sample random points of @xmath234 for various values of the parameter @xmath26 and using them as triplet @xmath5 to construct the matrix @xmath280 as described above , so we imply that we have no knowledge of the parametric equation .",
    "we try different values of @xmath246 .    for @xmath300 ,",
    "the @xmath248-basis of @xmath301 is @xmath302 , that is we are in case 1 of lemma [ lkdegree ] since @xmath303 . for @xmath304 , the computed basis of",
    "@xmath305 is @xmath306 , that is case 2 of lemma [ lkdegree ] .",
    "that is to be expected since we picked @xmath307 ( notice @xmath308 for curve @xmath234 ) .",
    "any @xmath309 is a valid choice to construct the implicit representation matrix @xmath285 .",
    "the method we have described extends naturally to the case of space curves and surfaces . in the case of space",
    "curves the degree for computing the matrix representation is @xmath310 , meaning @xmath246 must be @xmath311 , where @xmath3 is similarly defined as the homogeneous degree of the polynomials @xmath312 , @xmath313 . the same property holds for rational surfaces , where @xmath3 is defined as the total degree of the polynomials @xmath314 , @xmath313 .",
    "hence our method reduces the computation of syzygies , and eventually an implicit matrix representation , to interpolation through a point sample obtained by one of the aforementioned scenarios .",
    "we devised a practical method based on the theory of chow forms for computing implicit representations of parametric objects , e.g , surfaces containing a space curve .",
    "in particular , the chow form expresses an implicit hypersurface equation by a resultant , which can effectively be represented by interpolation matrices , where we first compute the equation s support .",
    "interesting mathematical questions arise in studying the complexity of our method , namely how to bound the degree and the number of computed implicit surfaces .",
    "our second contribution is that we used the interpolation representation to implement ray shooting to surface patches without developing the implicit equation .",
    "it turns out that our method may be less accurate than the direct approach provided the surface parameterization is available .",
    "however , our representation can handle objects defined by point clouds .",
    "it also completes the set of geometric operations that are possible with the representation of interpolation matrices .",
    "moreover , interpolation matrices extend to other geometric operations such as surface - surface intersection , assuming one surface is either parameterized or given by a point cloud , and the second is parameterized .",
    "the first surface is captured by matrix @xmath36 through a point sample .",
    "the parameterization of the second surface is substituted into the last row @xmath137 .",
    "now @xmath315 is an implicit equation of the intersection curve , defined in the parametric plane of the second surface .",
    "we may avoid developing the determinant but instead we may operate on the matrix .",
    "for instance , we can sample the intersection curve by fixing values of one parameter and solving the resulting univariate polynomial @xmath316 $ ] in the other parameter @xmath26 , much like we did with ray shooting .",
    "the third contribution of this paper is to provide a method for computing a matrix representation of a rational planar or space curve , or a rational surface , when we are only given a sufficiently large set of points on the object sampled in such a way that the value of the parameter is known .",
    "current work involves numerical experiments for interpolating such a matrix representation .",
    "when dealing with numerical computations , the results are approximate and we are currently testing the quality of the approximate implicit matrix representation derived from numerical computations .",
    "so far , numerical computation of the kernel of the interpolation matrix yields a basis of full dimension .",
    "the first and third authors are partially supported by h2020 marie sklodowska curie initial training network `` arcades : algebraic representations in computer - aided design for complex shapes '' , 2016 - 2019 .",
    "+ all authors thank laurent bus for useful discussions during the preparation of this manuscript .",
    "j.  dalbec and b.  sturmfels .",
    "introduction to chow forms . in neil",
    "l. white , editor , _ invariant methods in discrete and computational geometry : proceedings of the curaao conference , 1317 june , 1994 _ , pages 3758 .",
    "springer , netherlands , 1995 .",
    "b.  sturmfels and j.  yu .",
    "tropical implicitization and mixed fiber polytopes . in",
    "_ software for algebraic geometry _ ,",
    "volume 148 of _ i m a volumes in math .  & its applic .",
    "_ , pages 111131 .",
    "springer , new york , 2008 ."
  ],
  "abstract_text": [
    "<S> we examine two different matrix representations of curves and surfaces based on or constructed by interpolation through points . both are essentially implicit representations of objects given as parametric models or given as a point cloud , and both are quite powerful since they reduce geometric operations to linear algebra .    </S>",
    "<S> first , we examine a representation by interpolation matrices , developed for plane curves , surfaces , and hypersurfaces , which is not sensitive to base points . </S>",
    "<S> we extend the method to parametric space curves and , generally , objects of codimension higher than  1 , by computing the equations of ( hyper)surfaces intersecting precisely at the given object . </S>",
    "<S> we propose a practical algorithm that uses interpolation and always produces correct output but possibly with a number of surfaces higher than minimal . </S>",
    "<S> our experiments indicate that , typically , a small number of computed surfaces defines exactly any given space curve .    </S>",
    "<S> our second contribution concerns the same representation and completes its properties by showing how it can be used for ray shooting of a parametric ray with a surface patch , given by a parametric or point cloud model . </S>",
    "<S> most matrix operations are executed in pre - processing since they solely depend on the surface but not on the ray . for a given ray , </S>",
    "<S> the bottleneck is equation solving . </S>",
    "<S> we present experiments in maple : ray shooting for a bicubic patch takes @xmath0  sec , though numerical issues might arise . </S>",
    "<S> our approach covers the case of intersection points of high multiplicity . </S>",
    "<S> it is extendable to surface - surface intersections yielding an implicit representation of the intersection curve in the plane of one surface s parameters .    </S>",
    "<S> the second representation examined is based on syzygies . </S>",
    "<S> the corresponding theory , including @xmath1-bases , has been developed for parametric models . </S>",
    "<S> our third contribution is to show how to compute the required syzygies by interpolation , when the input curve or surface is given by a point cloud whose sampling satisfies mild assumptions ; this significantly generalizes the method . </S>",
    "<S> even when noise corrupts the sampling , it is possible to estimate the necessary degree of the syzygies and interpolate them numerically , thus constructing the matrix representing the implicit object .    _ </S>",
    "<S> keywords : _ matrix representation , sparse resultant , chow form , ray shooting , bicubic surface , implicitization , space curve </S>"
  ]
}