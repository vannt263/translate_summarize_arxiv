{
  "article_text": [
    "local search is one of the most common approaches applied in practice to solve hard optimization problems .",
    "it is used as a subroutine in several kinds of heuristics , such as evolutionary algorithms and hybrid heuristics that combine local search and genetic algorithms .",
    "the history of employing local search in combinatorial optimization and operations research dates back to the 1950s with the first edge - exchange algorithms for the traveling salesperson  @xcite .    in general ,",
    "such algorithms start from a feasible solution and iteratively try to improve the current solution . local search algorithms , also known as neighborhood search algorithms , form a large class of improvement algorithms .",
    "to perform local search , a problem specific neighborhood distance function is defined on the solution space and a better solution is searched in the neighborhood of the current solution . in particular ,",
    "many local search algorithms are based on searching the _",
    "@xmath0-exchange neighborhood_. this is the set of solutions that can be obtained from the current solution by exchanging at most @xmath0 elements .",
    "most of the literature on local search is primarily devoted to experimental studies of different heuristics .",
    "the theoretical study of local search has developed mainly in four directions .",
    "the first direction is the study of performance guarantees of local search , i.e. , the quality of the solution  @xcite .",
    "the second direction of the theoretical work is on the asymptotic convergence of local search in probabilistic settings , such as simulated annealing  @xcite .",
    "the third direction concerns the time required to reach a local optimum .",
    "the fourth direction is concerned with so - called kernelization techniques @xcite for local search , and aims at providing the basis for putting our theoretical results to work in practice .    in a recent paper by @xcite  ( @xcite )",
    "another twist in the study of local search has been taken with the goal of answering the following natural question .",
    "is there a faster way of searching the @xmath0-exchange neighborhood than brute - force ?",
    "this question is important because the typical running time of a brute - force algorithm is @xmath2 , where @xmath1 is the input length .",
    "such a running time becomes a real obstacle in using @xmath0-exchange neighborhoods in practice even for very small values of @xmath0 . for many years",
    "most algorithms searching an improved solution in the @xmath0-exchange neighborhood had an @xmath2 running time , creating the impression that this can not be done significantly faster than brute - force search .",
    "but is there mathematical evidence for this common belief ? or is it possible for some problems to search @xmath0-exchange neighborhoods in time @xmath3 , where @xmath4 is a small constant , which can make local search much more powerful ?",
    "an appropriate tool to answer all these questions is _",
    "parameterized complexity_. in the parameterized complexity framework , for decision problems with input size @xmath1 , and a parameter @xmath0 , the goal is to design an algorithm with running time @xmath5 , where @xmath6 is a function of @xmath0 alone .",
    "problems having such an algorithm are said to be _ fixed parameter tractable ( fpt)_. there is also a theory of hardness that allows us to identify parameterized problems that are not amenable to such algorithms .",
    "the hardness hierarchy is represented by @xmath7 $ ] for @xmath8 .",
    "the theory of parameterized complexity was developed by @xcite  ( @xcite ) . for recent developments ,",
    "see the book by @xcite  ( @xcite ) .",
    "in this paper we consider two variants of the local search problem for the well - known vertex cover problem , that is , the _ strict _ and the _ permissive _ variant of local search  ( marx and schlotter 2011 ; krokhin and marx ) . in the strict variant",
    "the task is to either determine that there is no better solution in the @xmath0-exchange neighborhood , or to find a better solution in the @xmath0-exchange neighborhood . in the permissive variant , however , the task is to either determine that there is no better solution in the @xmath0-exchange neighborhood , or to find a better solution , which may or may not belong to the @xmath0-exchange neighborhood .",
    "thus , permissive local search does not require the improved solution to belong to the local neighborhood , but still requires that at least the local neighborhood has been searched before abandoning the search .",
    "it can therefore be seen as a natural relaxation of strict local search with the potential to make local search applicable to a wider range of problems or instances . indeed",
    ", we will present a class of instances for vertex cover where strict local search is @xmath9}$]-hard , but permissive loal search is fpt .",
    "in heuristic local search , there is an abundance of techniques , such as random restarts and large neighborhood search , to escape local minima and boost the performance of algorithms @xcite .",
    "permissive local search is a specific way to escape the strictness of local search , but allows a rigorous analysis and performance guarantees .",
    "[ [ relevant - results . ] ] relevant results .",
    "+ + + + + + + + + + + + + + + + +    recently , the parameterized complexity of local search has gained more and more attention . starting with the first breakthrough in this area by  @xcite  ( @xcite ) who investigated the parameterized complexity of tsp ,",
    "several positive and negative results have been obtained in many areas of ai .",
    "for instance , the local search problem has already been investigated for a variant of the feedback edge set problem  @xcite , for the problem of finding a minimum weight assignment for a boolean constraint satisfaction instance  ( krokhin and marx ) , for the stable marriage problem with ties  @xcite , for combinatorial problems on graphs  @xcite , for feedback arc set problem on tournaments  @xcite , for the satisfiability problem  @xcite , and for bayesian network structure learning  @xcite .",
    "[ [ our - results . ] ] our results .",
    "+ + + + + + + + + + + +    we investigate local search for the fundamental vertex cover problem .",
    "this well - known combinatorial optimization problem has many applications @xcite and is closely related to two other classic problems , independent set and clique .",
    "all our results for vertex cover also hold for the independent set problem , and for the clique problem on the complement graph classes .",
    "* we give the first compelling evidence that it is possible to enhance the tractability of local search problems if permissive local search is considered instead of strict local search .",
    "indeed , the permissive variant allows us to solve the local search problem for vertex cover for a significantly larger class of sparse graphs than strict local search .",
    "* we show that the strict local search vertex cover problem remains @xmath10$]-hard for special sparse instances , improving a result from  @xcite  ( @xcite ) . on the way to this result",
    "we introduce a size - restricted version of a hall set problem which be believe to be interesting in its own right . *",
    "we answer a question of krokhin and marx in the affirmative , who asked whether there was a problem where finding the optimum is hard , strict local search is hard , but permissive local search is fpt .",
    "the _ distance _ between two sets @xmath11 and @xmath12 is @xmath13 .",
    "we say that @xmath11 is in the _ @xmath0-exchange neighborhood _ of @xmath12 if @xmath14 . if we consider a universe @xmath15 with @xmath16 , the characteristic functions of @xmath11 and @xmath12 with respect to @xmath15 are at hamming distance at most @xmath0 if @xmath14 .",
    "all graphs considered in this paper are finite , undirected , and simple .",
    "let @xmath17 be a graph , @xmath18 be a vertex set , and @xmath19 be vertices .",
    "the _ distance _ @xmath20 between @xmath21 and @xmath22 is the minimum number of edges on a path from @xmath21 to @xmath22 in @xmath23 .",
    "the _ ( open ) neighborhood _ of @xmath22 is @xmath24 , i.e. , the vertices at distance one from @xmath22 , and its _ closed neighborhood _ is @xmath25=n(v)\\cup { \\left\\ { v \\right\\}}$ ] .",
    "we also define @xmath26 and @xmath27 = n(s ) \\cup s$ ] .",
    "more generally , @xmath28 and @xmath29 $ ] denote the set of vertices at distance @xmath30 and at distance at most @xmath30 from a vertex in @xmath31 , respectively .",
    "we write @xmath32 and @xmath33 $ ] for @xmath34 and @xmath35 $ ] , respectively .",
    "the _ degree _ of @xmath22 is @xmath36 .",
    "these notations may be subscripted by @xmath23 , especially if the graph is not clear from the context .",
    "the graph @xmath37 is obtained from @xmath23 by removing all vertices in @xmath31 and all edges incident to vertices in @xmath31 .",
    "the subgraph of @xmath23 _ induced _ by @xmath31 is @xmath38 and it is denoted @xmath39 $ ] .",
    "the set @xmath31 is a _ vertex cover _ of @xmath23 if @xmath37 has no edge .",
    "the set @xmath31 is an _",
    "independent set _ of @xmath23 if @xmath39 $ ] has no edge .",
    "the graph @xmath23 is _ bipartite _ if its vertex set can be partitioned into two independent sets @xmath40 and @xmath41 . in this case",
    ", we also denote the graph by a triple @xmath42 .",
    "the instances considered in this paper are @xmath30-degenerate graphs .",
    "the _ degeneracy _ of @xmath23 is the minimum @xmath30 such that every subgraph of @xmath23 has a vertex of degree at most @xmath30 .",
    "degeneracy is a fundamental sparsity measure of graphs .",
    "a graph @xmath43 is obtained from @xmath23 by _ subdividing _ an edge @xmath44 if @xmath43 is obtained by removing the edge @xmath45 , and adding a new vertex @xmath46 and edges @xmath47 and @xmath48 .",
    "a graph @xmath43 is obtained from @xmath23 by _ subdividing _ an edge @xmath44 _ twice _ if @xmath43 is obtained by removing the edge @xmath45 , and adding new vertices @xmath46 and @xmath49 and edges @xmath47 , @xmath50 and @xmath51 .",
    "the graph @xmath23 is _ @xmath52-subdivided _ if @xmath23 can be obtained from a graph @xmath43 by subdividing each edge of @xmath43 twice .",
    "in this section we show that strict local search for vertex cover is [ 1]-hard on 2-subdivided graphs .",
    "0.98 ls - vertex cover +    [ cols= \" < , < \" , ]     the initial algorithm will be randomized , and we will exploit the following pseudo - random object and theorem to derandomize it .",
    "an _ @xmath53-universal set _",
    "@xmath54 is a set of functions from @xmath55 to @xmath56 , such that for every subset @xmath57 with @xmath58 , the set @xmath59 is equal to the set @xmath60 of all the functions from @xmath31 to @xmath56 .",
    "[ propuniversalsets ] there is a deterministic algorithm with running time @xmath61 that constructs an @xmath53-universal set @xmath54 such that @xmath62 .",
    "our fpt algorithm will take as input a @xmath63-separable graph .    for a fixed non - negative integer @xmath63 , a graph @xmath17 is _",
    "@xmath63-separable _ if there exists a bipartition of @xmath15 into @xmath64 and @xmath65 such that    * for each @xmath66 , @xmath67 , and * for each @xmath68 , @xmath69 .",
    "a bipartition of @xmath15 satisfying these properties is a partition _ certifying @xmath63-separability_. by @xmath70 we denote the set of all @xmath63-separable graphs .",
    "observe that a graph of degree at most @xmath30 is @xmath30-separable .",
    "similarly every @xmath52-subdivided graph is @xmath52-separable .",
    "the following lemma characterizes solutions for pls - vertex coverthat belong to the @xmath0-exchange neighborhood of @xmath31 .",
    "[ lem : structurallemma ] let @xmath17 be a graph , @xmath31 be a vertex cover of @xmath23 and @xmath0 be a positive integer .",
    "then there exists a vertex cover @xmath71 such that @xmath72 and @xmath73 if and only if there exists a set @xmath74 such that    1 .  @xmath75 is an independent set , + 2 .",
    "@xmath76 , and + 3 .",
    "@xmath77 .",
    "we first show the forward direction of the proof .",
    "let @xmath78 . since @xmath79 is an independent set and @xmath80 we have that @xmath75 is an independent set .",
    "furthermore , since @xmath75 is in @xmath81 we have that @xmath82 and in particular @xmath83 is the set of vertices that are present in @xmath71 but not in @xmath31 . since @xmath72",
    "we have that @xmath76 and by the fact that @xmath73 we have that @xmath77 . for the reverse",
    "direction it is easy to see that @xmath84 is the desired @xmath71 .",
    "this completes the proof .    to obtain the fpt algorithm for pls - vertex coveron @xmath70 we will use lemma  [ lem : structurallemma ] .",
    "more precisely , our strategy is to obtain an fpt algorithm for finding a subset @xmath85 such that @xmath86 is an independent set and @xmath87 . here",
    ", @xmath75 is as described in lemma  [ lem : structurallemma ] .",
    "thus , our main technical lemma is the following .",
    "[ lem : mainlemma ] let @xmath63 be a fixed non - negative integer .",
    "let @xmath23 be a @xmath63-separable graph , @xmath31 be a vertex cover of @xmath23 and @xmath0 be a positive integer .",
    "there is a @xmath88 time algorithm finding a family @xmath89 of subsets of @xmath31 such that ( a ) @xmath90 , ( b ) each @xmath91 is an independent set , and ( c ) if there exists a @xmath75 as described in lemma  [ lem : structurallemma ] , then there exists a @xmath92 such that @xmath87 . here , @xmath93 .",
    "we postpone the proof of lemma  [ lem : mainlemma ] and first give the main result that uses lemma  [ lem : mainlemma ] crucially .",
    "[ thm : fptplsvc ] let @xmath63 be a fixed non - negative integer .",
    "pls - vertex coveris fpt on @xmath70 with an algorithm running in time @xmath94 , where @xmath93 .",
    "let @xmath23 be the input graph from @xmath70 , @xmath31 be a vertex cover of @xmath23 , and @xmath0 be a positive integer .",
    "fix @xmath93 and @xmath95 .",
    "we first apply lemma  [ lem : mainlemma ] and obtain a family @xmath89 of subsets of @xmath31 such that ( a ) @xmath90 and ( b ) each @xmath91 is an independent set .",
    "the family @xmath86 has the additional property that if there exists a set @xmath75 as described in lemma  [ lem : structurallemma ] , then there exists a @xmath92 such that @xmath87 .    for every @xmath92",
    ", the algorithm proceeds as follows .",
    "consider the bipartite graph @xmath96 $ ] . now in polynomial time check whether there exists a subset @xmath97 such that @xmath98 in @xmath96 $ ] .",
    "this is done by checking halls condition that says that there exists a matching saturating @xmath86 if and only if for all @xmath99 , @xmath100 . a polynomial time algorithm that finds a maximum matching in a bipartite graph",
    "can be used to find a violating set @xmath40 if there exists one .",
    "see  @xcite  ( @xcite ) for more details . returning to our algorithm ,",
    "if we find such set @xmath101 then we return @xmath102 . clearly , @xmath71 is a vertex cover and @xmath72 .",
    "now we argue that if for every @xmath92 we do not obtain the desired @xmath101 , then there is no vertex cover @xmath71 such that @xmath72 and @xmath73 .",
    "however , this is guaranteed by the fact that if there would exist such a set @xmath71 , then by lemma  [ lem : structurallemma ] there exist a desired @xmath75 .",
    "thus , when we consider the set @xmath92 such that @xmath103 then we would have found a @xmath97 such that @xmath98 in @xmath96 $ ] .",
    "this proves the correctness of the algorithm .",
    "the running time of the algorithm is governed by the size of the family @xmath104 .",
    "this completes the proof .    to complete the proof of theorem  [ thm : fptplsvc ] , the only remaining component is a proof of lemma  [ lem : mainlemma ] which we give below .",
    "let @xmath23 be a @xmath63-separable graph , @xmath31 be a vertex cover of @xmath23 , and @xmath0 be a positive integer . by the proof of lemma",
    "[ lem : structurallemma ] we know that if there exists a vertex cover @xmath71 such that @xmath72 and @xmath73 then there exists a set @xmath74 such that    1 .",
    "@xmath75 is an independent set , + 2 .",
    "@xmath76 , and + 3 .",
    "@xmath77 .",
    "we first give a randomized procedure that produces a family @xmath104 satisfying the properties of the lemma with high probability . in a second stage , we will derandomize it using universal sets . for our argument",
    "we fix one such @xmath75 and let @xmath64 and @xmath65 be a partition certifying @xmath63-separability of @xmath23 .",
    "let @xmath105 and @xmath106 .",
    "since @xmath23 is a @xmath63-separable graph , we have that @xmath107\\cap ( v_1\\cap s)|+|n[s_2]\\cap s| \\leq \\beta |s_1| + |s_1| + \\beta |s_2| + |s_2| \\leq k+\\beta k$ ] .",
    "we also know that @xmath108 .",
    "let @xmath93 and @xmath109\\cap ( v_1\\cap s))\\cup ( n[s_2]\\cap s)$ ] .",
    "now , uniformly at random color the vertices of @xmath31 with @xmath56 , that is , color each vertex of @xmath31 with @xmath110 with probability @xmath111 and with @xmath112 otherwise . call this coloring @xmath6 .",
    "the probability that for all @xmath113 , @xmath114 and for all @xmath115 , @xmath116 , is @xmath117 given the random coloring @xmath6 we obtain a set @xmath118 with the following properties    * @xmath119 is an independent set ; and * with probability at least @xmath120 , @xmath121 .",
    "we obtain the set @xmath119 as follows .    _",
let @xmath122 , that is , @xmath123 contains all the vertices of @xmath31 that have been assigned @xmath110 by @xmath6 .",
    "let @xmath124 be the set of vertices that have degree at least 1 in @xmath125 $ ] .",
    "let @xmath126 .",
    "let @xmath127 be the set of edged in the induced graph @xmath128 $ ] and @xmath129 be the set of end - points of the edges in @xmath127 .",
    "define @xmath130 .",
    "_ _ _ _ _ _ _ _ _",

by the procedure it is clear that @xmath119 is an independent set",
    ". however , note that it is possible that @xmath131 .",
    "now we show that with probability at least @xmath132 , @xmath133 .",
    "let @xmath134 , @xmath135 . by the probability computation above",
    "we know that with probability at least @xmath132 , @xmath136 and @xmath137 .",
    "now we will show that the procedure that prunes @xmath123 and obtains @xmath119 does not remove any vertices of @xmath75 .",
    "all the vertices in the set @xmath138 are contained in @xmath139 and thus there are no edges incident to any vertex in @xmath12 in @xmath125 $ ] .",
    "therefore the only other possibility is that we could remove vertices of @xmath140 .",
    "however , to do so there must be an edge between a vertex in @xmath11 and a vertex in @xmath141 , but we know that all such neighbors of vertices of @xmath11 are in @xmath139 .",
    "this shows that with probability at least @xmath120 , @xmath121 .",
    "we can boost the success probability of the above random procedure to a constant , by independently repeating the procedure @xmath142 times .",
    "let the random functions obtained while repeating the above procedure be @xmath143 , @xmath144 and let @xmath145 denote the corresponding set obtained after applying the above pruning procedure .",
    "the probability that one of the @xmath145 contains @xmath146 is at least @xmath147 thus we obtain a collection @xmath104 of subsets of @xmath31 with the following properties .",
    "* @xmath148 , where @xmath149 , * every set @xmath92 is an independent set , and * with probability at least @xmath111 , there exists a set @xmath92 such that @xmath103 .    finally , to derandomize the above procedure we will use theorem  [ propuniversalsets ] .",
    "we first compute a @xmath150-universal set @xmath151 with the algorithm described in theorem  [ propuniversalsets ] in time @xmath152 of size @xmath153 .",
    "now every function @xmath154 can be thought of as a function from @xmath31 to @xmath56 . given this @xmath6",
    "we obtain @xmath119 as described above .",
    "let @xmath155 . clearly , @xmath156 .",
    "now if there exists a set @xmath75 of the desired type then the @xmath119 corresponding to the function @xmath154 , that assigns @xmath110 to every vertex in @xmath75 and @xmath112 to every vertex in @xmath157 , has the property that @xmath121 and @xmath119 is an independent set .",
    "this completes the proof .",
    "it is easily seen that finding minimum vertex cover of a 2-subdivided graph is -hard .",
    "indeed , it follows from the -hardness of the vertex cover problem on general graphs since : if @xmath43 is a 2-subdivision of a graph @xmath23 with @xmath158 edges , then @xmath23 has a vertex cover of size at most @xmath0 if and only if@xmath43 has a vertex cover of size at most @xmath159 .",
    "thus , theorems  [ thm : hardnessvc ] and [ thm : fptplsvc ] together resolve a question raised by ( krokhin and marx ) , who asked for a problem where finding the optimum is hard , strict local search is hard , but permissive local search is fpt .",
    "in this paper we have shown that from the parameterized complexity point of view , permissive local search is indeed more powerful than the strict local search and thus may be more desirable .",
    "we have demonstrated this on one example , namely vertex cover , but it would be interesting to find a broader set of problems where the complexity status of the strict and permissive versions of local search differ .",
    "we believe that the results in this paper have opened up a complete new direction of research in the domain of parameterized local search , which is still in nascent stage",
    ". it would be interesting to undertake a similar study for feedback vertex set , even on planar graphs .",
    "all authors acknowledge support from the oead ( austrian indian collaboration grant , in13/2011 ) .",
    "serge gaspers , sebastian ordyniak , and stefan szeider acknowledge support from the european research council ( complex reason , 239962 ) .",
    "serge gaspers acknowledges support from the australian research council ( de120101761 ) .",
    "eun jung kim acknowledges support from the anr project agape ( anr-09-blan-0159 ) .",
    "abu - khzam , f.  n. ; collins , r.  l. ; fellows , m.  r. ; langston , m.  a. ; suters , w.  h. ; and symons , c.  t. 2004 .",
    "kernelization algorithms for the vertex cover problem : theory and experiments . in _ proceedings of the 6th workshop on algorithm engineering and experiments ( alenex 2004 ) _ , 6269 .",
    "siam .",
    "fellows , m.  r. ; rosamond , f.  a. ; fomin , f.  v. ; lokshtanov , d. ; saurabh , s. ; and villanger , y. 2009 .",
    "local search : is brute - force avoidable ? in boutilier , c. , ed . , _",
    "ijcai 2009 , proceedings of the 21st international joint conference on artificial intelligence , pasadena , california , usa , july 11 - 17 , 2009 _ , 486491 .",
    "fomin , f.  v. ; lokshtanov , d. ; raman , v. ; and saurabh , s. 2010 .",
    "fast local search algorithm for weighted feedback arc set in tournaments . in fox , m. , and poole , d. , eds . , _ proceedings of the twenty - fourth aaai conference on artificial intelligence , aaai 2010 , atlanta , georgia , usa , july 11 - 15 , 2010_. aaai press .",
    "naor , m. ; schulman , l.  j. ; and srinivasan , a. 1995 .",
    "splitters and near - optimal derandomization . in _ proceedings of the 36th annual symposium on foundations of computer science ( focs 1995)_. ieee computer society . 182191 .",
    "ordyniak , s. , and szeider , s. 2010 .",
    "algorithms and complexity results for exact bayesian structure learning . in grnwald , p. , and spirtes , p. ,",
    "eds . , _ proceedings of uai 2010 , the 26th conference on uncertainty in artificial intelligence , catalina island , california , usa , july 8 - 11 , 2010_. auai press , corvallis , oregon ."
  ],
  "abstract_text": [
    "<S> local search is one of the fundamental approaches to combinatorial optimization and it is used throughout ai . </S>",
    "<S> several local search algorithms are based on searching the @xmath0-exchange neighborhood . </S>",
    "<S> this is the set of solutions that can be obtained from the current solution by exchanging at most @xmath0 elements . as a rule of thumb , the larger </S>",
    "<S> @xmath0 is , the better are the chances of finding an improved solution . </S>",
    "<S> however , for inputs of size @xmath1 , a nave brute - force search of the @xmath0-exchange neighborhood requires @xmath2 time , which is not practical even for very small values of @xmath0 .    </S>",
    "<S> fellows et al .  </S>",
    "<S> ( ijcai 2009 ) studied whether this brute - force search is avoidable and gave positive and negative answers for several combinatorial problems . </S>",
    "<S> they used the notion of local search in a strict sense . </S>",
    "<S> that is , an improved solution needs to be found in the @xmath0-exchange neighborhood even if a global optimum can be found efficiently .    </S>",
    "<S> in this paper we consider a natural relaxation of local search , called _ permissive _ local search ( marx and schlotter , iwpec 2009 ) and investigate whether it enhances the domain of tractable inputs . </S>",
    "<S> we exemplify this approach on a fundamental combinatorial problem , vertex cover . </S>",
    "<S> more precisely , we show that for a class of inputs , finding an optimum is hard , strict local search is hard , but permissive local search is tractable .    </S>",
    "<S> we carry out this investigation in the framework of parameterized complexity . </S>"
  ]
}