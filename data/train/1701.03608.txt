{
  "article_text": [
    "cloud robotics is a field of robotics that attempts to invoke cloud technologies such as cloud computing , cloud storage , and other internet technologies centered around the benefits of converged infrastructure and shared services for robotics  @xcite .",
    "`` cloud robotics '' was firstly introduced by james kuffner  @xcite . in a few short years",
    ", cloud robotics as a newly emerged field has already received much research and industrial attention .",
    "the use of cloud computing for robotics and automation brings some potential benefits largely ameliorating the performance of robotic systems .",
    "due to the limited capacities of on - board processing , storage and battery capacities , robotic devices are constrained to numerous limitations .",
    "it not only solves the problems of robotic systems , such as on - board computation and storage limitation , asynchronization communication , compatibility problem of multi - robot systems@xcite , but also makes possibility of different directions or enhances their performance , such as remote brain , big data and shared knowledge - base , collective learning and intelligent behavior@xcite .",
    "however , beyond these advantages , cloud robotics also brings us many challenges .",
    "for example , from the view of architectures , how to construct the architectures of cloud robotic systems ? how to model these architectures ? how to deploy these architectures in clouds ?",
    "how to reuse these architectures ? how to manage the variability of these architectures ?    in this paper",
    ", we propose a domain specific language ",
    "crala trying to response the above questions .",
    "our main contributions are to propose :    * an architecture - centric design process for cloud robotic systems , * a domain specific language for architecture - centric cloud robotic systems named crala .",
    "the rest of the paper is organized as follows : we begin with an introduction of related concepts , background and related work of architecture - centric cloud robotics .",
    "we then present an overview of the architecture - centric design process for cloud robotic systems .",
    "then we describe the metamodel of crala with examples and how crala manages the variability of cloud robotic systems .",
    "afterwards , we present the implementation of crala . finally , we finish with a discussion and future work .",
    "[ sec : rc ] architecture - centric cloud robotics is a methodology of developing robotics systems on clouds using architecture - centric development techniques .",
    "* cloud computing * cloud computing is defined by the national institute of standards and technology ( nist ) as : `` cloud computing as a model for enabling ubiquitous , convenient , on - demand network access to a shared pool of configurable computing resources ( e.g. , networks , servers , storage , applications , and services ) that can be rapidly provisioned and released with minimal management effort or service provider interaction  @xcite ''",
    ".    clouds offer services that can be grouped into three categories : software as a service ( saas ) , platform as a service ( paas ) , and infrastructure as a service ( iaas )  @xcite .",
    "1 .   infrastructure as a service : iaas refers to on - demand provisioning of infrastructural resources , usually in terms of vms ( virtual machines ) .",
    "the cloud owner who offers iaas is called an iaas provider .",
    "2 .   platform as a service : paas refers to providing platform layer resources , including operating system support and software development frameworks .",
    "3 .   software as a service : saas refers to providing on - demand applications over the internet .",
    "an explicit architecture of cloud robotic system should cover these three design services in its architecture .    * system / software architectures .",
    "* traditionally , software architecture is a collection of models that capture a software system s principal design decisions in the form of components ( foci of system computation and data management ) , connectors ( foci of component interaction ) , and configurations ( specific arrangements of components and connectors intended to solve specific problems ) @xcite . generally speaking",
    ", a software system architecture  @xcite gathers design decisions of the system .",
    "as the development of computer science , nowadays , a system is much more complex than before such as with the integration of `` internet of things '' , `` cloud computing '' and `` robotics '' etc .",
    "* architectures modeling language .",
    "* architecture models are often expressed using adls ( architecture description language ) that , in most cases , provides information on the structure of the software system listing the components / services and connectors that the system is composed of .",
    "a system architecture could cover different abstraction levels , such as specification , configuration and assembly @xcite and from different viewpoints @xcite . for cloud robotic system , architecture model also needs to capture cloud and robot design decisions .",
    "the description of cloud robotic systems should cover robot description , web services / component description and cloud robotic system global architecture description",
    ".    * robot description .",
    "* robot description languages provide models of a robot and then design and implemented software components that work on the model components rather than the particular robot instance .",
    "the representative example of robot description language is the unified robot description format ( urdf )  @xcite , which can be used to specify the kinematics and dynamics , the visual representation and the collision model of a robot .",
    "however , urdf is not designed for specifying robot components such as sensors , actuators , and control programs .",
    "collada  @xcite is an xml schema designed for describing 3d objects including their kinematics .",
    "it mainly focuses on modeling information about scenes , geometry , physics , animations , and effects . but similar to urdf , it lacks elements for describing sensors , actuators and software .",
    "srdl  @xcite focuses on modeling robot components , i.e. sensors , actuators and control programs , especially via capabilities to actions .",
    "many work try to develop an owl ( web ontology language ) ontology to describe robots , such as  @xcite in specific domains or  @xcite focusing on sensor ontology .    * web service description . *",
    "web service description in robotics often serves to match the capabilities with robot components , such as phosphorus  @xcite , larks  @xcite , owl - s  @xcite and srdl@xcite . in general",
    ", the term capability matchmaking refers to the process of matching an advertisement of a capability with a request .    * cloud robotic description . * all above work cover a part description of cloud robotic systems , referring to robot description or web service description .",
    "however , it misses a language that fully covers all necessary aspects of cloud robotic architecture , including the description of clouds , robots and components / web services .",
    "the architecture design for cloud robotic system is different from traditional software design , as it concerns two special aspects : cloud - based systems and robotic systems .",
    "we identify the architecture - centric development process for cloud robotic systems into three main phases , as shown in figure  [ fig_process ] .        1",
    ".   _ specification design . _ architect or robotics engineers should choose a robotic architecture pattern for the system according the models of robots ( hardware ) and its functional tasks ( objective ) , for example , a pioneer robot with a task of path planning .",
    "configuration design .",
    "_ * first of all , architect should consider how to distribute intelligence among robots and cloud .",
    "that means , which components should be placed on the robot itself and which services should be placed on cloud . how to choose the appropriate components or services from component or service repository .",
    "this design decision refers to different factors , including robot capacities , system non - functional properties such as real - time , security etc . * secondly , architect should choose operating system for their services , as in robotics domain , there exists some operating systems that are widely used , such as ros@xcite .",
    "then , how to distribute these services in different virtual machines",
    ". 3 .   _ assembly deployment . _",
    "lastly , how to deploy this architecture model in clouds , automatically or not ? how to reflect and supervise a runtime model to prevent vms failure etc . ?",
    "during the process , five factors affect architecture design decisions _",
    "robot models , tasks , intelligence , non - functional properties _ , and _ clouds _ , as shown in figure  [ fig_global ] .",
    "* _ robot model _ describes the hardware model of the robots consisting of sensors and actuators etc .",
    "* _ task _ is the objective realized by robots . * _ intelligence distribution _ defines how to distribute the intelligence to robots and clouds . *",
    "_ non - functional properties _ are non - functional requirements required to be exposed by cloud robotic systems , such as security , realtime , safety etc . * _ clouds _ represent cloud infrastructures ( iaas ) used to deploy robotics services .",
    "clouds can be mono - cloud or multi - cloud .",
    "crala is a domain specific language for architecture - centric cloud robotics , and it is also an architecture description language .",
    "crala models architectures at three separate abstraction levels , each designed in a different development phase as shown in fig .",
    "[ fig_process ] . for",
    "now , the first version of crala presented in this paper mainly focuses on modeling essential elements of architectures and their basic properties , as the design concept of crala is to auto - develop and enrich the language by experimentation and real use cases .",
    "the three levels are as follows :    1 .",
    "_ specification _ defines the abstract architecture specification .",
    "it defines which functionality should be supplied by robotic systems .",
    "all the constituents of this architectural models are abstract and without any consideration of cloud etc .",
    "configuration _ defines the sets of component or service implementations ( classes ) by searching and selecting from the component / service repository and defines how to group services and components in different virtual or physical machines by consideration of system requirements .",
    "assembly _ depicts how configuration is deployed on clouds .",
    "this architecture model exactly depicts the current state of cloud robotic system on cloud .",
    "table [ tab : term ] presents the design decisions that should be made in each architecture level .",
    "[ 1]>=#1x[1]>=#1x    0.48| l0.8 | l1.2 | architecture & defined aspects + architecture specification & 1 ) functionalities of the system , 2 ) system non - functional properties + architecture configuration & 1 ) component / service selection ( for reuse ) or implementation ( for from scratch ) , 2 ) component / service group , and 3 ) operating system selection + system assembly & 1 ) cloud deployment , 2 ) running state +      architecture specification is composed by _ component roles _ , _ connections _ and _ concept robots_. the metamodel of specification is illustrated in fig .",
    "[ fig_spec](a ) .",
    "+    * component roles describe the roles that components should play in the system . in cloud robotic systems , a roles could be a function ( such as algorithm ) , a database , or a driver etc .",
    "a component role lists the minimum list of interfaces ( both required and provided ) the component / service ( will be selected or implemented in configuration level ) should expose . on the one",
    "had , as they define the requirements of the architect ( its ideal view ) to guide the search for corresponding concrete components ( or service ) in component ( or service ) repository , component roles are abstract and partial component ( or service ) representations .",
    "on the other hand , they can be used as the design specification for implementing new components or services from scratch .",
    "for example in fig .",
    "[ fig_spec](b ) , _",
    "spec1 _ defines three component roles to fulfill three different functionalities .",
    "* concept robots define the robots that will be included in the system with certain sensors or actuators to realize the functionalities of the system . at this level ,",
    "concept robot is totally abstract , and it only defines the types of sensor and actuators . in specification , we do not precise the model of robot used . as shown in fig .",
    "[ fig_spec](b ) , _",
    "robot1 _ could be any robot with an camera , such as pionner , nao etc .",
    "* connections define the communication between architecture elements including roles , robots , actuators and sensors .",
    "with crala connection constraints , the communication allowed could be categorized in three types : ( 1 ) the communication between component roles , ( 2 ) the communication between component roles ( drivers ) and sensors and ( 3 ) the communication between component roles ( drivers ) and actuators . however at specification level , we define also one kind of `` abstract '' connection between robots and component roles . the connection signifies the connected component roles must communicate with robots at next configuration level ( components could locate directly in robots or connect with robots from cloud . ) .",
    "architecture configurations are the second level of system architecture descriptions .",
    "they result from the search and selection of real component classes ( or web services ) in a component ( or service ) repository .",
    "the metamodel is shown in fig .",
    "[ fig_config ] .    1 .",
    "we precise which robots ( _ robotmodel _ ) will be used in configuration .",
    "robot models should expose all sensors and actuators specified in concept robot of _ specification_. 2 .",
    "component roles will be implemented by component classes or web services by selection or implementations according to different system requirements or used robot models .",
    "+    +    * component class : a component class often can be characterized as : attributes , component interface , behaviors and properties . *",
    "web service : a more formal and extended definition is the one offered by the w3c web services working group@xcite : a web service is a software system designed to support interoperable machine - to - machine interaction over a network . it has an interface described in a machine - processable format ( specifically wsdl ) . other systems interact with the web service in a manner prescribed by its description using soap - messages , typically conveyed using http with an xml serialization in conjunction with other web - related standards .",
    "3 .   then , components and services will be placed in robots or virtual machines . 4 .",
    "lastly , the connections should be established , for example which kind of communication protocols will be used in different situations .",
    "we could find the connection between robots and components are not permitted at this level ( the same for next assembly level ) .    according to the selection of different component classes and services and the distribution of these components in robots and vms",
    ", it could lead to different configuration architectures , which implement the same specification architecture .",
    "figure  [ fig_config_ex1](a ) and [ fig_config_ex1](b ) represent two different possible configuration architectures of specification _",
    "spec1 _ in fig .",
    "[ fig_spec](a ) . in _",
    "config1 _ , two services _ localisationservice _ and _ pathplanningservice _ locate in two separated vms , and in _ config2 _ , they are located in the same vm . the reliability of _ config1 _ is better than _ config2 _ , as if the vm of _ config2 _ is broken , both two services are lost at the same time .",
    "however , in _",
    "config1 _ , two services use more calculating resource , as they are located in two vms compared to one .",
    "system assemblies are the third level of system architecture descriptions . at the macroscopic level",
    ", they result from the deployment of vms of configuration in clouds . at the microscopic level",
    ", they result from the instantiation of the component classes and the deployment of the web services from a configuration .",
    "the important thing is that they should provide a description of runtime software systems including cloud deployment description .",
    "the metamodel of cloud is illustrated in fig .",
    "[ fig_ass ] .",
    "each component or service are defined clearly which vms or robots they are deployed and each vm is illustrated with which physical machine of which cloud it is deployed .",
    "system assemblies are the most related level to cloud .",
    "* cloud : different clouds directly affect the deployment results of configurations . * * network : for example , if cloud is an openstack  @xcite nova - network ( flat ) cloud .",
    "the network of this kind of cloud is linux - bridge , so all the vms locate in the same network .",
    "if we want two vms located in two subnets , it s impossible . however , with openstack neutron ( sdn : software - defined network ) cloud , it s possible . *",
    "* scheduling : scheduling in clouds is complicated and it s extremely important for cloud robotic systems .",
    "some nfps such as reliability , security could be directly applied by using different scheduling algorithms .",
    "one cloud could apply multiple scheduling algorithms with different priorities .",
    "normally different clouds use different scheduling algorithms according to different requirements . according to different scheduling algorithms of cloud",
    ", architecture configuration could be deployed in different ways , as shown in fig .",
    "[ fig_ass_ex](a ) and [ fig_ass_ex](b ) . for the first example , two vms are located in different physical machines , and for the second example , two vms are located in the same physical machine . in _",
    "ass2 _ , two vms communicate faster than _",
    "ass1 _ , as they locate in the same physical machine .",
    "however , in _",
    "ass1 _ , two vms could profit the maximize ram , as they are the only vm in each physical machine . *",
    "physical machine : normally in one cloud , clients ( tenants ) could not see which physical machines locate their vms . only administrators could know this kind of information for security . in order to raise the clarity of cloud",
    ", we add this information to assembly level .",
    "this could make easier to control cloud robotic systems .",
    "the variability of software architecture often cites spl ( software product line ) . in spl ,",
    "the variability is inside in configuration level .",
    "a reference architecture could be implemented by different possible configurations with certain limit choices .",
    "in crala , variability is horizontal , which is reflected in the relationships between three levels .",
    "we use illustrating examples to explain how crala manages the variability of cloud robotic systems from microscopic and macroscopic views .",
    "firstly , from macroscopic view , the variability of architectures could be captured by their relationships between different architecture levels , as shown in fig .",
    "[ fig_ex ] ( a ) .",
    "figure  [ fig_ex](b ) illustrates the relationships of example architectures _",
    "arch1 _ presented earlier in this section and it s generated automatically by crala toolsuite according to the relationships defined in architecture models ( fig .",
    "[ fig_spec](b ) , [ fig_config_ex1](a , b ) and [ fig_ass_ex](a , b ) ) .",
    "secondly from microscopic view , the variability is reflected by components .",
    "[ fig_cmex ] presents an example of components in three levels .",
    "it shows the relationship of different component forms in three levels : component roles ( specification ) , component / service ( configuration ) and component or service instance ( assembly ) .        in our viewpoint , if we could combine these two kinds of variability : horizontal and vertical in our future work , it will greatly increase the feasibility and reusability of crala .",
    "we used the ecore framework  @xcite and sirius  @xcite for crala .",
    "ecore allows create a tree editor for a dsl according to its metamodel , as show in fig .",
    "[ fig_ecore ] .",
    "sirius is an eclipse project which allows you to easily create your own graphical modeling workbench including generating graph of models or editing graphical models .",
    "the models created by crala ecore plugins could be automatically expressed in graphs .",
    "figures  [ fig_spec](b ) , [ fig_config_ex1](a , b ) , [ fig_ass](a , b ) and [ fig_ex ] are graphs generated from crala models .",
    "in this paper we investigate architecture design process for cloud robotic systems and propose a domain - specific architecture description language for architecture - centric cloud robotics .",
    "we present crala for describing cloud robotic architectures , and show that linking architecture descriptions with cloud deployment aspect allows mastering and controlling cloud robotic systems and their variability . the proposed language is implemented by emf and sirius and we use a use case to illustrate crala .    in future work",
    ", we aim to extend crala in several ways .",
    "we would like to develop some mechanisms to support the automatically developing process of architecture - centric cloud robotic systems .",
    "first of all , how to search the correspondent and appropriate components or services in repository to construct architecture configuration automatically . secondly , how to deploy the configuration on cloud automatically . then how to reorganize the system on clouds when service failure .",
    "our overall goal is to construct an intelligent development environment to construct cloud robotic systems .",
    "h.  y. zhang , c.  urtado , and s.  vauttier , `` architecture - centric component - based development needs a three - level adl , '' in _",
    "software architecture_. 1em plus 0.5em minus 0.4emspringer , 2010 , pp . 295310 .",
    "l.  kunze , t.  roehm , and m.  beetz , `` towards semantic robot description languages , '' in _ robotics and automation ( icra ) , 2011 ieee international conference on_.1em plus 0.5em minus 0.4emieee , 2011 , pp .",
    "55895595 .    c.  schlenoff and e.  messina , `` a robot ontology for urban search and rescue , '' in _ proceedings of the 2005 acm workshop on research in knowledge representation for autonomous systems_.1em plus 0.5em minus",
    "0.4emacm , 2005 , pp . 2734",
    ".    r.  chatterjee and f.  matsuno , `` robot description ontology and disaster scene description ontology : analysis of necessity and scope in rescue infrastructure context , '' _ advanced robotics _ , vol .",
    "19 , no .  8 , pp . 839859 , 2005 .",
    "k.  sycara , s.  widoff , m.  klusch , and j.  lu , `` larks : dynamic matchmaking among heterogeneous software agents in cyberspace , '' _ autonomous agents and multi - agent systems _ , vol .  5 , no .  2 ,",
    "pp . 173203 , 2002 .",
    "d.  martin , m.  burstein , d.  mcdermott , s.  mcilraith , m.  paolucci , k.  sycara , d.  l. mcguinness , e.  sirin , and n.  srinivasan , `` bringing semantics to web services with owl - s , '' _ world wide web _ , vol .",
    "10 , no .  3 , pp .",
    "243277 , 2007 .",
    "v.  viyovic , m.  maksimovic , and b.  perisic , `` sirius : a rapid development of dsm graphical editor , '' in _ intelligent engineering systems ( ines ) , 2014 18th international conference on_.1em plus 0.5em minus 0.4em ieee , 2014 , pp ."
  ],
  "abstract_text": [
    "<S> cloud robotics is a field of robotics that attempts to invoke cloud technologies such as cloud computing , cloud storage , and other internet technologies centered around the benefits of converged infrastructure and shared services for robotics . in a few short years </S>",
    "<S> , cloud robotics as a newly emerged field has already received much research and industrial attention . </S>",
    "<S> the use of the cloud for robotics and automation brings some potential benefits largely ameliorating the performance of robotic systems . however , there are also some challenges . </S>",
    "<S> first of all , from the viewpoint of architecture , how to model and describe the architectures of cloud robotic systems ? how to manage the variability of cloud robotic systems ? how to maximize the reuse of their architectures ? in this paper , we present an architecture approach to easily design and understand cloud robotic systems and manage their variability . </S>"
  ]
}