{
  "article_text": [
    "the cbd approach using standard cell libraries greatly reduces the dificulties faced while designing custom chips with high performance targets , as compared to transistor level _ in situ _ customization of cell designs . the intel pentium 4 microprocessor is one of the most notable examples of a chip using cbd for a significant portion of its design . but to ensure a successful design , the timing and functionality of the standard cells must be rigorously verified .",
    "though an algorithm for verifying combinational cells is known  @xcite , currently there is no similar strategy for addressing sequential cells . here , we pursue a simulation based technique to generate exhaustive test stimuli for any sequential cell given only its state table ( st ) . due to the fact that single input change ( sic ) test vectors are more effective than classical multiple input change ( mic ) test vectors in terms of delay fault coverage  @xcite , we have ensured that the test vector sequence from this method will guarantee 100% sic transition coverage .",
    "the paper is organized as follows : section 2 presents the theoretical concepts that form the basic framework of our approach .",
    "section 3 illustrates the algorithm for test - vector generation . in concluding remarks ( section 4 ) , possibilities for extending this work",
    "is explored .",
    "we define a sic transition as a single change amongst all input pins and memory elements of the cell . in our approach ,",
    "the complete functionality of the circuit along with sic transition information is represented in the form of a modified state transition graph , hence forth referred to as the single input change state transition graph ( sicstg ) .",
    "this is a directed graph , and every edge in the graph represents a sic from the source vertex to the destination vertex .",
    "the vertices and edges of the sicstg are defined as follows:-      any sequential cell can be considered as having @xmath0 input pins and @xmath1 output pins , with @xmath2 internal memory elements(by memory elements , we mean elements that change their output(s ) both as a function of the its previous output(s ) and the current values of input pins ) .",
    "we define the _ current value _ of a input pin or a memory as the digital signal level ( 0 or 1 ) on it . by _ previous value _ , we refer to the logic level on the pin ( or memory element ) immediately prior to its present logic level . for convenience of reference",
    ", the input pins can be further classified into 2 kinds as per its interpretation by the cell - level sensitive and edge sensitive . for the level sensitive pins",
    ", the cell considers only the current value of the pin as input to the circuit .",
    "but for edge sensitive pins , the immediate previous value at the pin along with the current value is interpreted as an edge input to the circuit .",
    "for example , in an edge - triggered d flip - flop , the d input pin is a level sensitive pin but the clk is an edge sensitive pin .",
    "any sequential cell has a finite number of defined _ configurations _ , where each configuration is uniquely identified by the following : -    1 .",
    "current values of all level sensitive input pins 2 .   for each edge - sensitive input pin , its immediate previous value and current value 3 .   for each internal memory element ,",
    "its immediate previous value and current value    we can determine all the configurations of any sequential cell given only its state table ( st ) , each entry in it being a vertex in the sicstg .",
    "the vertex label of each vertex consists of the above 3 tuples in respective order .",
    "take the example of a positive edge - triggered d - type flip - flop :    .state table for d flip - flop [ cols=\"^,^,^,^\",options=\"header \" , ]     combining table  [ dffq_2 ] & table  [ dffq_new ] , we can now define the list of vertices ( figure  [ vertices ] ) .",
    "each vertex has a vertex label , which stores an unique configuration of the cell .",
    "no two vertices can have the same vertex label since the expanded st has no duplicate entries .",
    "the fields in the vertex label are @xmath3,@xmath4 } $ ] , @xmath5}$],@xmath6}$],@xmath7}$ ] respectively .",
    "taking the first vertex from the list , we can list the outgoing sic edges from it by using the constraints given in section  [ edge_defn ] .",
    "the edges satisfying the constraints are listed in figure  [ edge ] . in this way",
    ", we can determine all edges in the sicstg .",
    "after the sicstg for d flip - flop is completely defined , we check if it is strongly connected .",
    "it is found to be so as no vertices have indegree or outdegree as 0 . on running the dcpw algorithm  @xcite on this graph",
    ", we get a walk which covers all edges in the sicstg at least once . as each edge effectively represents a sic test vector",
    ", we have a sequence of test vectors giving 100% sic coverage with minimum repetitions .",
    "vertex - labels of the vertices of sicstg , written in the order they appear in the walk , form the desired test - vector for the given cell .",
    "we have proposed an efficient method to generate an optimal set of sic test vectors for the verification of sequential cells .",
    "the algorithm generates an optimal test vector sequence using a standard implementation of the dcpw algortihm . the time taken by our algorithm",
    "is bounded by the time taken to solve the integer linear programming ( ilp ) problem , which is itself np - complete .",
    "if a better heuristic is implemented which reduces the worst - case time bound on ilp significantly , then our test vector generation algortihm would also improve by the same degree ."
  ],
  "abstract_text": [
    "<S> for application specific integrated circuits ( asic ) and system - on - chip ( soc ) designs , cell - based design ( cbd ) is the most prevalent practice as it guarantees a shorter design cycle , minimizes errors and is easier to maintain . in modern asic design , </S>",
    "<S> standard cell methodology is practiced with sizeable libraries of cells , each containing multiple implementations of the same logic functionality , in order to give the designer differing options based on area , speed or power consumtion . for such library cells , </S>",
    "<S> thorough verification of functionality and timing is crucial for the overall success of the chip , as even a small error can prove fatal due to the repeated use of the cell in the design . </S>",
    "<S> both formal and simulation based methods are being used in the industry for cell verification . </S>",
    "<S> we propose a method using the latter approach that generates an optimised set of test vectors for verification of sequential cells , which are guaranteed to give complete single input change transition coverage with minimal redundancy . </S>",
    "<S> knowledge of the cell functionality by means of the state table is the only prerequisite of this procedure .    </S>",
    "<S> sequential cell verification , single input change state transition graph , directed chinese postman problem </S>"
  ]
}