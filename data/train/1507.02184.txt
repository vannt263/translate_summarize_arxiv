{
  "article_text": [
    "in telecommunication , a message sent through a communication channel is exposed to noise which corrupts the original message . decoding the original message from a received signal stream is a major issue in coding theory .",
    "a linear code is an error - correcting code , for which the alphabet is a finite field @xmath7 and its codewords form a subspace of a fixed vector space over @xmath7 .",
    "many algorithms for decoding a linear ( block or convolutional ) code rely on a graphic interpretation of a linear code called the trellis .",
    "trellis _ for a linear code @xmath8 of length @xmath0 is a layered directed graph such that the following hold :    * the vertex set is partitioned into @xmath9 . * every edge starts at a vertex in @xmath10 and ends at a vertex in @xmath11 for some @xmath12 . *",
    "every vertex is on a path from a vertex in @xmath13 to a vertex in @xmath14 . *",
    "every edge is labeled by one of the alphabets in @xmath7 . *",
    "each path from @xmath13 to @xmath14 corresponds to a codeword in @xmath8 .",
    "the weight of an edge is defined by the square of the error , that is the difference between the label on the edge and the received signal at position @xmath4 .",
    "many decoding algorithms , such as the monumental algorithm by viterbi  @xcite , for a linear ( block or convolutional ) code compute a minimum - weight path from @xmath13 to @xmath14 on the trellis .",
    "such a path corresponds to the most likely original message .",
    "obtaining a small trellis is crucial in reducing the complexity of a trellis - based decoding algorithm , because its space complexity depends on ( log of ) @xmath15 . by permuting the coordinates of a linear code",
    ", one may produce an equivalent code with a smaller trellis .",
    "massey  @xcite asks whether one can find a good permutation of the coordinates to make a smallest trellis , calling it the `` art of trellis decoding '' of a linear code .",
    "the example in figure  [ fig : trellis ] from the excellent survey of vardy  @xcite on trellises depicts two equivalent @xmath16 $ ] linear codes .",
    "the first one corresponds to the linear code @xmath8 generated by the basis @xmath17 , @xmath18 , and @xmath19 and the second code @xmath20 is generated by @xmath21 , @xmath22 , and @xmath23 , obtained by a permutation @xmath24 on coordinates .",
    "the _ trellis - width _ , also called the _ trellis - state complexity _ , measures the minimum bit size of memory registers required for the decoding after reordering the coordinates .",
    "one can write this problem in terms of vectors as follows .",
    "input : :    @xmath0 vectors @xmath25 in a vector space    over a fixed finite field @xmath7 , an integer    @xmath5 .",
    "parameter : :    @xmath5 .",
    "problem : :    determine whether there exists a permutation @xmath26 of    @xmath27 such that    @xmath28    for all @xmath29 and find a linear layout    @xmath30 if one    exists .",
    "the minimum @xmath5 having such a linear layout is called the _ trellis - width _ of a linear code whose generator matrix is @xmath31 $ ] . this problem and its equivalent variants",
    "have been studied under various names in the coding theory literature , such as maximum partition rank permutation  @xcite , maximum width  @xcite , and trellis state - complexity  @xcite .",
    "in matroid theory , such a linear layout is called a _ path - decomposition _ ( of width at most @xmath5 ) of a matroid @xmath32 represented by vectors @xmath33 , @xmath34 , @xmath35 , @xmath36 and the minimum such @xmath5 is called the _ path - width _ of the matroid @xmath32 .",
    "kashyap  @xcite proved that it is np - complete to decide whether such a linear layout exists when @xmath5 is a part of an input . to prove its hardness",
    ", he first observed that the trellis - width is actually equal to the path - width of a matroid represented by the same set of vectors .",
    "path - width has been widely studied in structural graph theory , notably by robertson and seymour  @xcite , and is also investigated in the context of matroid theory , for instance , in @xcite .",
    "this link allowed him to deduce the np - completeness of trellis - width from the np - completeness of the path - width of graphs .",
    "when @xmath5 is a fixed constant , then the problem is solvable in polynomial time , thanks to a simple and general algorithm by nagamochi  @xcite .",
    "his algorithm can decide in time @xmath37 whether such a linear layout exists , even if the input matroid is given by an independence oracle .",
    "we present a _",
    "fixed - parameter tractable _ algorithm to decide whether such a linear layout exists when @xmath5 is a parameter .",
    "in other words , we have an algorithm that runs in time @xmath38 for some function @xmath39 and a constant @xmath40 when @xmath0 is the number of elements .",
    "our algorithm does not only decide whether such a linear layout exists , but also output such a linear layout if one exists .",
    "more precisely we will prove the following theorem .",
    "let @xmath7 be a fixed finite field .",
    "there exists an @xmath41-time algorithm that , for an input vectors @xmath42 in @xmath43 for some @xmath44 and a parameter @xmath5 , either finds a linear layout @xmath30 for a permutation @xmath26 on @xmath27 such that @xmath45 for all @xmath46 or confirms that no such linear layout exists .",
    "equivalently we have the following .",
    "let @xmath7 be a fixed finite field .",
    "there is an algorithm that , for an input @xmath0-element matroid given with its matrix representation over @xmath7 having at most @xmath0 rows and a parameter @xmath5 , decides in time @xmath41 whether its path - width is at most @xmath5 and if so , outputs a path - decomposition of width at most @xmath5 .",
    "the existence of a fixed - parameter tractable algorithm for the decision version of the problem is not new , but no prior algorithm was able to construct a linear layout of width at most @xmath5 even if one exists . for the existence of a decision algorithm we use branch - width .",
    "branch - width of a graph or a matroid is a width parameter , introduced by robertson and seymour  @xcite , that measures how easy it is to decompose a graph or a matroid into a tree - like structure by cutting through a separation of small order .",
    "in particular path - width of a matroid is always greater than or equal to branch - width .",
    "geelen , gerards , and whittle  @xcite proved that for a fixed finite field @xmath7 , @xmath7-representable matroids of bounded branch - width are well - quasi - ordered by the matroid minor relation .",
    "( recently they announced a stronger theorem that does not require bounded branch - width . ) as a corollary , we deduce that there are finitely many @xmath7-representable minor obstructions for the class of matroids of path - width at most @xmath5 , because all those minor obstructions have branch - width at most @xmath47 .",
    "hlinn  @xcite proved that for a fixed matroid @xmath48 , it is possible to decide in time @xmath49 whether an input @xmath0-element matroid given by a matrix representation over @xmath7 having branch - width at most @xmath5 has a minor isomorphic to @xmath48 . as path - width is always greater than or equal to branch - width , by checking the existence of obstructions as a minor , we can decide whether path - width of an input matroid given by a matrix representation over @xmath7 has path - width at most @xmath5 . however , this approach has problems .",
    "* there are a lot of minor obstructions .",
    "koutsonas , thilikos , and yamazaki  @xcite proved that there are at least @xmath50 minor obstructions for matroid path - width at most @xmath5 in any field @xmath7 .",
    "furthermore there is no algorithm known to generate all @xmath7-representable minor obstructions . and",
    "@xmath51 in a manuscript posted on arxiv on december 2014 , but later we were told by the authors that the proof is incorrect and not yet fixed [ private communication , 2015 ] . ] * even if we know the complete list of minor obstructions , it is still non - trivial to construct a linear layout of width at most @xmath5 when it exists . claimed that this is possible by the self - reduction technique .",
    "] this is because non - existence of forbidden minors in the input matroid does not provide any hint of how to construct a linear layout .    the current situation for matroid path - width is somewhat similar to the status for path - width of graphs 25 years ago .",
    "for a fixed constant @xmath5 , the problem of deciding whether a graph has path - width at most @xmath5 has been studied by various researchers . in 1983 ,",
    "ellis , sudborough , and turner  @xcite presented an @xmath52-time algorithm .",
    "robertson and seymour  @xcite proved the existence of a fixed - parameter tractable @xmath53-time algorithm based on the finiteness of minor obstructions , thus only solving the decision problem .",
    "fellows and langston  @xcite developed a _ self - reduction _ technique to convert such a decision algorithm into a construction algorithm and therefore a path - decomposition of a graph witnessing small path - width can be found in time @xmath54 .",
    "however @xmath55 depends on the number of minor obstructions , which is only known to be finite . for matroid path - width",
    ", we do not know any self - reduction algorithm that converts a decision algorithm into a construction algorithm .",
    "bodlaender and kloks  @xcite proved the first constructive algorithm for path - width and tree - width of graphs based on dynamic programming , developing important techniques to be used in other papers @xcite .",
    "in fact , we present an algorithm for a more general problem as described below .",
    "input : :    @xmath0 subspaces @xmath2 of a vector    space @xmath43 over a fixed finite field    @xmath7 , an integer @xmath5 .",
    "parameter : :    @xmath5 .",
    "problem : :    determine whether there exists a permutation @xmath26 of    @xmath27 such that    @xmath56    for all @xmath29 and find a linear layout    @xmath57 if one    exists .    a set of subspaces",
    "is called a _ subspace arrangement _ and let us call minimum such @xmath5 the _ path - width _ of a subspace arrangement .",
    "one can call this problem the problem of computing path - width of an @xmath7-represented polymatroid or path - width of an @xmath7-represented partitioned matroid .",
    "clearly if we restrict input subspaces to have dimension at most @xmath6 , then this problem is equivalent to the problem on vectors .",
    "let @xmath7 be a fixed finite field .",
    "given an input @xmath0 subspaces of @xmath43 for some @xmath58 and a parameter @xmath5 , in time @xmath59 , we can either find a linear layout @xmath2 of the subspaces such that @xmath60 for all @xmath46 , or confirm that no such linear layout exists , where each @xmath61 is given by its spanning set of @xmath62 vectors and @xmath63 .",
    "this generalization to subspaces , when applied to subspaces of dimension at most @xmath64 , allows us to produce an algorithm for linear rank - width .",
    "the linear rank - width of a graph is a linearized variant of the rank - width introduced by oum and seymour  @xcite , measuring the complexity of arranging vertices in a linear order such that each cut induces a matrix of small rank . deciding linear rank - width",
    "at most @xmath5 is np - complete when @xmath5 is a part of an input , implied by the result of kashyap  @xcite and oum  @xcite .",
    "if @xmath5 is a fixed parameter , then , there exists an @xmath41-time algorithm to decide whether the linear rank - width is at most @xmath5 obtained by combining two results :    1 .",
    "graphs of bounded rank - width are well - quasi - ordered by the vertex - minor relations , shown by oum  @xcite .",
    "this implies that for each @xmath5 , there exists a finite list @xmath65 of graphs such that a graph has linear rank - width at most @xmath5 if and only if it has no vertex - minor isomorphic to a graph in @xmath65 .",
    "if @xmath66 is a fixed graph and the input @xmath0-vertex graph has bounded rank - width , then one can decide whether it has a vertex - minor isomorphic to @xmath66 in time @xmath41 shown by courcelle and oum  @xcite .",
    "jeong , kwon , and oum  @xcite showed that @xmath67 but there is no known upper bound on the size of graphs in @xmath65 .",
    "furthermore , there is no known algorithm to generate @xmath65 and even if we know the list @xmath65 , it still does not produce a linear rank - decomposition .",
    "our algorithm is the first fixed - parameter tractable algorithm that provides a linear rank - decomposition of width at most @xmath5 for graphs of linear rank - width at most @xmath5 .",
    "there is an algorithm that , for an input @xmath0-vertex graph and a parameter @xmath5 , decides in time @xmath41 whether its linear rank - width is at most @xmath5 and if so , outputs a linear rank - decomposition of width at most  @xmath5 .",
    "rank - width was initially developed as a tool to approximate clique - width , introduced by courcelle and olariu  @xcite .",
    "linear rank - width can also be used as a tool to approximate linear clique - width , a linearized variant of clique - width .",
    "fellows , rosamond , rotics , and szeider  @xcite showed that it is np - complete to decide whether a graph has linear clique - width at most @xmath5 when @xmath5 is a part of an input .",
    "however , when @xmath5 is a fixed parameter , then by theorem  [ thm : lrw ] , we obtain the following approximation algorithm for linear clique - width , which was not known previously .",
    "there is an @xmath41-time algorithm that , for an input @xmath0-vertex graph @xmath68 and a parameter @xmath5 , finds a linear @xmath69-expression of @xmath68 confirming that @xmath68 has linear clique - width at most @xmath70 or certifies that @xmath68 has linear clique - width larger than @xmath5 .",
    "we also present a polynomial - time algorithm that can    * compute the path - width of an @xmath7-represented matroid of bounded branch - width , * compute the linear rank - width of a graph of bounded rank - width .",
    "this is analogous to the polynomial - time algorithm to compute path - width of a graph of bounded tree - width by bodlaender and kloks  @xcite and generalizes polynomial - time algorithms to compute the path - width of the cycle matroid of outerplanar graphs by koutsonas , thilikos , and yamazaki  @xcite and compute the linear rank - width of graphs of rank - width @xmath6 by adler , kant , and kwon  @xcite .",
    "our algorithm share the same framework introduced by bodlaender and kloks  @xcite .",
    "we assume that we are given a branch - decomposition of small width and then use dynamic programming to solve the problem based on the tree - like structure given by the branch - decomposition .",
    "we also use the idea of _ typical sequences _ introduced by bodlaender and kloks  @xcite to encode and compress the amount of information needed to track partial solutions .",
    "one of our key contribution is to come up with an encoding of partial solutions with respect to a fixed subspace . unlike usual encodings of partial solutions on graphs ,",
    "our encoding needs to handle subspaces and keep track of how subspaces interact .",
    "we develop an encoding scheme , operations and relations on encodings to this aim .",
    "we also invent an alternative definition of path - width , that makes it easier to prove the correctness of our algorithm , and present a framework to perform dynamic programming on branch - decompositions .",
    "the paper is organized as follows .",
    "section  [ sec : prelim ] will review basic concepts and present an alternative definition of path - width and a framework to perform dynamic programming on branch - decompositions .",
    "section  [ sec : traj ] will introduce @xmath71-trajectories , which will be a key concept to be stored in the set of partial solutions , called the full set .",
    "section  [ sec : fullset ] will present the definition of full sets and show key propositions on how to combine two full sets coming from child nodes of a node to obtain the full set",
    ". this will be our key section to prove the correctness of the algorithm .",
    "we will present our algorithm in section  [ sec : algorithm ] based on the operations discussed in section  [ sec : fullset ] . since our algorithm is based on dynamic programming , up to section 5 we assume that some branch - decomposition is given .",
    "section  [ sec : approx ] will discuss how to provide this branch - decomposition in two different ways .",
    "section  [ sec : matroid ] will discuss how the path - width of @xmath7-represented matroids can be decided by our algorithm when applied to subspaces of dimension at most one .",
    "section  [ sec : linearrankwidth ] will discuss how our algorithm can be applied to the linear rank - width of graphs , when applied to subspaces of dimension at most two and we will see its connection to the linear clique - width . section  [ sec : exact ] will present a polynomial - time algorithm to compute path - width when the input has small branch - width .",
    "section  [ sec : disc ] concludes this paper by presenting some open problems on matroids .",
    "we assume readers are familiar with linear algebra . for a set @xmath72 of vectors , we write @xmath73 to denote the _ span _ of @xmath72 , which is the set of all vectors that are linear combinations of vectors in @xmath72 .",
    "we say that @xmath72 is a _ spanning set _ of a vector space @xmath74 if @xmath75 . for simplicity",
    ", we also write @xmath76 for a sequence of vectors @xmath33 , @xmath34 , @xmath35 , @xmath36 .    a _ subspace arrangement _ @xmath77 over a field @xmath7 is a finite set of subspaces @xmath78 , @xmath79 , @xmath35 , @xmath14 of a finite - dimensional vector space over @xmath7 . formally a subspace arrangement is a multiset @xmath80 of subspaces for a finite set @xmath81 of indices . for two subspaces @xmath82 , @xmath71",
    ", we write @xmath83 . for a subspace arrangement @xmath77 ,",
    "let us write @xmath84 to denote @xmath85 .",
    "let @xmath77 be a subspace arrangement over a field @xmath7 .",
    "a _ linear layout _ of @xmath77 is a permutation @xmath86 of @xmath77 .",
    "the width of a linear layout @xmath86 is @xmath87 the _ path - width _ of @xmath77 is the minimum width of all possible linear layouts of @xmath77 .",
    "( if @xmath88 , then the path - width is @xmath89 . )",
    "we now define the branch - width of @xmath77 .",
    "we say a tree is _ subcubic _ if all its internal vertices have degree @xmath90 .",
    "branch - decomposition _ of @xmath77 is a pair @xmath91 of a subcubic tree @xmath92 and a bijection @xmath93 from the set of leaves of @xmath92 to @xmath77 .",
    "each edge @xmath94 induces a partition @xmath95 of the leaves given by @xmath96 and the _ width _ of @xmath94 is defined to be @xmath97 the _ width _ of a branch - decomposition @xmath91 is the maximum width of all edges of @xmath92 .",
    "the _ branch - width _ of @xmath77 is the minimum width of all possible branch - decompositions .",
    "( if @xmath88 , then there is no branch - decomposition and we define the branch - width of @xmath77 to be @xmath89 . )    [ prop : submodular ] let @xmath77 be a subspace arrangement . for a subset @xmath72 of @xmath77 , let @xmath98 .",
    "then @xmath39 satisfies the following .",
    "a.   @xmath99 for all @xmath100 .",
    "( _ symmetric _ ) b.   @xmath101 for all @xmath102 .",
    "( _ submodular _ )",
    "\\(i ) is trivial .",
    "let us prove ( ii ) .",
    "it is enough to prove the following .",
    "@xmath103 this follows from the facts that @xmath104 , @xmath105 , and @xmath106 for all @xmath107 .",
    "[ prop : pwbw ] if @xmath77 is a subspace arrangement of path - width at most @xmath5 , then @xmath108 for all @xmath109 and the branch - width of @xmath77 is at most @xmath110 .",
    "let @xmath111 be a linear layout of @xmath77 of width at most @xmath5 .",
    "clearly @xmath112 and @xmath113 . for @xmath114 ,",
    "@xmath115 by proposition  [ prop : submodular ] , we deduce that @xmath116 , because @xmath117 .",
    "this proves that @xmath118 for all @xmath109 .",
    "let @xmath92 be a tree obtained from the path graph @xmath119 on @xmath0 vertices by attaching one leaf to each internal node of the path .",
    "note that @xmath92 has @xmath0 leaves .",
    "let @xmath93 be a function that maps all leaves of @xmath92 to @xmath78 , @xmath79 , @xmath35 , @xmath14 bijectively in the order of the path .",
    "then @xmath91 is a branch - decomposition . for every edge @xmath94 in @xmath119 ,",
    "the width of @xmath94 is clearly at most @xmath5 by the assumption and so @xmath91 has width at most @xmath110 .",
    "we now present an alternative definition of path - width .",
    "path - decomposition _ of a subspace arrangement @xmath77 over @xmath7 is a sequence @xmath120 of subspaces of @xmath84 such that there exists an injective function @xmath121 with @xmath122 for all @xmath123 .",
    "we call each @xmath124 a _ bag _ of @xmath125 . the _ width _ of a path - decomposition @xmath120 is @xmath126    [ prop : pathwidth - layout ] a subspace arrangement @xmath77 has a linear layout of width at most @xmath5 if and only if it has a path - decomposition of width at most @xmath5 .",
    "if @xmath2 is a linear layout of width @xmath5 , then clearly @xmath127 is a path - decomposition of width @xmath5 .",
    "conversely , let @xmath120 be a path - decomposition of width @xmath5 with an injective function @xmath121 such that @xmath128 for all @xmath129 .",
    "we may assume that @xmath130 such that @xmath131 .",
    "then @xmath132 and therefore the linear layout @xmath2 has width at most @xmath5 .    by proposition  [ prop : pathwidth - layout ]",
    ", we conclude that @xmath77 has path - width at most @xmath5 if and only if it has a path - decomposition of width at most @xmath5",
    ". this alternative definition will be useful for our proof on the correctness of the algorithm .",
    "bodlaender and kloks  @xcite introduced typical sequences for their works on path - width and tree - width . for an integer @xmath133 ,",
    "let @xmath134 be a finite sequence of integers of length @xmath0 .    for a sequence @xmath135",
    ", we define its _ typical sequence _ @xmath136 to be the sequence obtained by iterating the following _ compression _ operations until no further operations can be applied :    * if two consecutive entries are equal , then remove one . *",
    "if there exist @xmath4 and @xmath137 such that @xmath138 and @xmath139 for all @xmath140 or @xmath141 for all @xmath140 then remove all entries from the @xmath142-th entry to the @xmath143-th entry .    a sequence @xmath135 is called _ typical _ if @xmath144 .",
    "for example , if @xmath145 , then @xmath146 .",
    "bodlaender and kloks  @xcite not only showed that @xmath136 is uniquely defined but also proved that the length of typical sequences of bounded integers and the number of distinct typical sequences of bounded integers are bounded as follows .",
    "these lemmas are fundamental to our applications .",
    "[ lem : lentypical ] the length of a typical sequence of integers consisting of @xmath147 is at most @xmath148 .",
    "the following lemma was originally proved for the number of typical sequences only .",
    "in fact , the proof is constructive and it is not difficult to see that all sequences can be generated with polynomial delay . here , we will base our algorithm on a weaker result .    [",
    "lem : typical ] there are at most @xmath149 distinct typical sequences of integers consisting of @xmath147 .",
    "furthermore , the set of all typical sequences can be generated in @xmath150 steps .",
    "we present the data structure to store subspaces and review algorithms performing elementary operations on subspaces .",
    "let @xmath71 be an ordered basis of a subspace @xmath151 of dimension @xmath152 .",
    "let @xmath153 be an @xmath154 matrix whose column vectors are vectors in @xmath71 .    in our application",
    ", @xmath152 will be usually a lot smaller than @xmath58 and so we will use the coordinate system with respect to @xmath71 in order to represent a vector in @xmath74 . in other words , for each vector @xmath155 , we write @xmath156_b$ ] to denote the coordinate vector with respect to @xmath71 as a column vector . it is easy to obtain the coordinates @xmath157 by multiplying @xmath158 with @xmath156_b$ ] .    by using this coordinate system , a @xmath159-dimensional subspace @xmath160 of @xmath74 can be represented by a @xmath161 matrix @xmath162 whose range is exactly @xmath160 in this coordinate system .",
    "we say that @xmath163 _ represents _ @xmath160 .",
    "* given a matrix @xmath163 representing @xmath160 , we can test @xmath164 in time @xmath165 , when @xmath166 is given as a coordinate vector in @xmath167 with respect to @xmath74 .",
    "* given two matrices @xmath168 , @xmath169 representing subspaces @xmath170 , @xmath171 of @xmath74 , we can test whether @xmath172 in time @xmath165 .",
    "this can be answered by solving a linear equation @xmath173 ; this is feasible if and only if @xmath172 . * given two matrices @xmath168 , @xmath169 representing subspaces @xmath170 , @xmath171 of @xmath74 , we can compute a matrix @xmath163 representing @xmath174 in time @xmath165 .",
    "this can be done by finding a basis for the column vectors . *",
    "given a @xmath161 matrix @xmath32 with @xmath175 , a matrix representing the null space can be computed in time @xmath165 by solving @xmath176 . *",
    "given two matrices @xmath168 , @xmath169 representing subspaces @xmath170 , @xmath171 of @xmath74 , we can compute a matrix @xmath163 representing @xmath177 in time @xmath165 .",
    "this can be done by finding a matrix @xmath178 to represent the space of all vectors @xmath179 satisfying @xmath180 where @xmath181 and @xmath182 and then computing the range of @xmath183 .      for many discrete objects ,",
    "tree - like structures allow us to view the given input structure as a composition of simple objects in a tree - like structure , making it very efficient to run algorithms based on dynamic programming .",
    "tree - width of graphs has been widely used as a decomposition tree for the dynamic programming algorithm .    for matroids ,",
    "hlinn  @xcite introduced `` matroid parse trees '' for the purpose of dynamic programming on matroids of bounded branch - width , represented over a fixed finite field .",
    "we are going to provide a similar yet different framework for the same purpose that is easier for us to handle .",
    "let @xmath91 be a branch - decomposition of width at most @xmath184 .",
    "we may assume that @xmath92 is a rooted binary tree by picking an arbitrary edge @xmath94 and subdividing @xmath94 to create a degree-@xmath64 vertex called the _",
    "root_. by orienting each edge of @xmath92 towards the root , we may further assume that @xmath92 is a rooted binary directed tree . for a node @xmath185 of @xmath92 , let @xmath186 be the set of all subspaces in @xmath77 associated with @xmath185 and its descendants by @xmath93 .",
    "we define the _ boundary space _ @xmath187 as @xmath188 . from now on ,",
    "when we call @xmath91 a branch - decomposition , @xmath92 is always a rooted binary directed tree .",
    "the following easy lemma is essential for our dynamic programming .",
    "it is well known that @xmath189 .",
    "[ lem : subspace ] let @xmath185 be an internal node of @xmath92 and @xmath190 , @xmath191 be two children of @xmath185 .",
    "let @xmath71 , @xmath192 , @xmath193 be the boundary space of @xmath185 , @xmath190 , @xmath191 , respectively .",
    "then @xmath194    let @xmath195 for each node @xmath196 of @xmath92 .",
    "since @xmath197 and @xmath198 , trivially @xmath199 .",
    "note that @xmath200 and @xmath201 .",
    "then @xmath202 because @xmath203 and @xmath204 .",
    "thus , @xmath205 .",
    "now we claim that @xmath206 .",
    "let @xmath207 .",
    "clearly @xmath208 .",
    "let @xmath209 , @xmath210 be vectors such that @xmath211 . since @xmath212 and @xmath213 , we deduce that @xmath214 .",
    "similarly , @xmath215 .",
    "thus , @xmath216 is in @xmath217 .",
    "note that @xmath218 and @xmath219 . thus @xmath220\\\\          & = \\dim(m_{w_1})+\\dim(b_2)-\\dim m_{w_1}\\cap m_{w_2}\\cap { \\langle { \\mathcal v}-{\\mathcal v}_{w_2 } \\rangle}\\\\          & \\quad+\\dim(m_{w_2})+\\dim(b_1)-\\dim m_{w_2}\\cap m_{w_1}\\cap { \\langle { \\mathcal v}-{\\mathcal v}_{w_1 } \\rangle}\\\\      & \\quad-\\dim(m_{w_1}+m_{w_2 } ) \\displaybreak[3]\\\\      & = \\dim(m_{w_1})+\\dim(m_{w_2})+\\dim(b_1)+\\dim(b_2)\\\\&\\quad-2\\dim(m_{w_1}\\cap m_{w_2 } )        - \\dim(m_{w_1}+m_{w_2 } ) \\displaybreak[3]\\\\      & = \\dim(b_1)+\\dim(b_2)-\\dim(m_{w_1}\\cap m_{w_2})\\\\      & = \\dim(b_1 + b_2 ) .",
    "\\end{aligned}\\ ] ] as @xmath221 , we deduce that @xmath222 .",
    "given a branch - decomposition @xmath91 of @xmath77 of width at most @xmath184 , let us assume that the boundary space @xmath187 has been computed for every node @xmath185 of @xmath92 .",
    "consider @xmath186 at a node @xmath185 of @xmath92 . to design an algorithm based on dynamic programming",
    ", we need to keep a bounded ( in terms of @xmath184 , @xmath5 , and @xmath51 ) amount of information which encodes all `` good '' path - decompositions of @xmath186 .",
    "suppose that @xmath223 is a path - decomposition of @xmath186 . to be a `` good '' partial solution",
    ", we need @xmath224 for all @xmath225",
    ". what information do we need to keep in order to determine whether this can be extended to a path - decomposition of @xmath77 of width at most @xmath5 ?",
    "we only need to keep @xmath226 , @xmath227 and the extra dimension of the intersection not shown in @xmath187 , that is @xmath228 for each @xmath229 .",
    "this motivates the definition of a _",
    ", that is a triple of two subspaces of bounded dimension and one integer , and the definition of a _ @xmath71-trajectory _",
    ", that is a sequence of statistics .",
    "while the number of @xmath71-trajectories can be arbitrarily large , it can be shown that the number of _ compact _ ones is bounded in terms of @xmath184 , @xmath5 , and @xmath51 .",
    "hence , at each node @xmath185 of @xmath92 , we carry over _ only _ compact @xmath187-trajectories for dynamic programming .      for a vector space @xmath71 ,",
    "a _ statistic _ is a triple @xmath230 of two subspaces @xmath231 , @xmath232 of @xmath71 and a nonnegative integer @xmath233 .",
    "we write @xmath234 , @xmath235 , and @xmath236 . for two statistics @xmath237 and @xmath238 , we write @xmath239 if @xmath240    [ lem : submodular ] if @xmath241 and @xmath242 are subspaces of @xmath43 and @xmath72 is a subspace of @xmath241 , then @xmath243    we may assume that @xmath244 as we can apply the induction on @xmath245 .",
    "let @xmath185 be a vector in @xmath241 but not in @xmath72 . if @xmath246 , then @xmath247 . if @xmath248 , then @xmath249 .",
    "[ lem : submodel ] let @xmath72 , @xmath250 , @xmath241 , @xmath251 , and @xmath71 be subspaces of @xmath43 and let @xmath252 and @xmath253 be statistics .",
    "if @xmath254 and @xmath255 , then @xmath239 .",
    "the statement trivially follows from lemma  [ lem : submodular ] .",
    "a _ @xmath71-trajectory _ of length @xmath256 is a sequence @xmath257 of statistics for @xmath71 such that @xmath258 and @xmath259 for all @xmath46 .",
    "the _ width _ of @xmath260 is @xmath261 .",
    "we write @xmath262 to denote the length @xmath0 of @xmath260 .",
    "we write @xmath263 to denote the @xmath4-th statistic @xmath264 .",
    "a @xmath71-trajectory @xmath265 is an _ extension _ of a @xmath71-trajectory @xmath260 if @xmath265 is obtained from @xmath260 by repeating some of its entries .",
    "the set of all extensions of @xmath260 is denoted as @xmath266 .",
    "the _ compactification _ @xmath267 of @xmath257 is a @xmath71-trajectory obtained from @xmath260 by applying the following operations until no further operation can be applied .",
    "* we remove an entry @xmath268 if @xmath269 . *",
    "if there exist @xmath4 and @xmath137 such that @xmath138 , @xmath270 , @xmath271 and @xmath272 for all @xmath140 or @xmath273 for all @xmath140 , then remove @xmath274 from the sequence .",
    "it is clear that the width of @xmath267 and @xmath260 are equal .",
    "we say that @xmath260 is _ compact _ if @xmath275 .",
    "[ lem : lenlr ] let @xmath71 be a vector space over @xmath7 of dimension @xmath184 . for a compact @xmath71-trajectory @xmath276 ,",
    "the number of distinct pairs @xmath277 is at most @xmath278 .",
    "let @xmath279 be distinct pairs of subspaces of @xmath71 such that @xmath280 and @xmath281 . then @xmath282 and @xmath283 .",
    "as they are all distinct , @xmath284 or @xmath285 for all @xmath4 .",
    "it follows that @xmath286 this implies that @xmath287 .",
    "[ lem : lentraj ] let @xmath71 be a vector space over @xmath7 of dimension @xmath184 .",
    "every compact @xmath71-trajectory of width @xmath5 has length at most @xmath288 .",
    "let @xmath276 be a compact @xmath71-trajectory .",
    "by lemma  [ lem : lenlr ] , there are at most @xmath278 distinct pairs @xmath277 in @xmath260 .",
    "each maximal consecutive subsequence @xmath289 with @xmath270 and @xmath271 forms a typical sequence of integers , whose length is bounded by @xmath148 by lemma  [ lem : lentypical ] .",
    "this proves the claim .",
    "a _ lattice path _ from @xmath290 to @xmath291 is a path @xmath292 on the plane such that @xmath293 , @xmath294 , @xmath295 and @xmath296 for all @xmath46 .",
    "let @xmath71 be a vector space over @xmath7 and @xmath297 be the set of all compact @xmath71-trajectories of width at most @xmath5 .",
    "[ lem : numtra ] let @xmath71 be a vector space over @xmath7 of dimension @xmath184",
    ". then @xmath297 contains at most @xmath298 elements .",
    "furthermore , the set @xmath297 can be generated in @xmath299 steps .",
    "let @xmath300 .",
    "first let us assume that @xmath301 .",
    "the number of length-@xmath302 _ chains _ @xmath303 of subspaces of @xmath71 is precisely @xmath304 where @xmath305 , known as gaussian binomial coefficients . since @xmath306 , we deduce that the number of chains of length @xmath307 is at most @xmath308 .",
    "each @xmath71-trajectory @xmath276 induces a set @xmath309 and there exist length-@xmath302 chains @xmath310 , @xmath311 of subspaces of @xmath71 such that @xmath312 and @xmath313 . furthermore there exists a lattice path @xmath314 , @xmath315 , @xmath35 , @xmath316 from @xmath317 to @xmath318 such that @xmath319 .    by the previous observation , there are at most @xmath308 ways of choosing each of @xmath320 and @xmath321 and there are @xmath322 ways of selecting a lattice path @xmath323 from @xmath324 to @xmath325 and let @xmath326 . since @xmath309 is a subset of @xmath327 , there are at most @xmath328 distinct sets @xmath329 induced by @xmath71-trajectories @xmath260 .",
    "it is not difficult to see that all such sets @xmath329 can be generated in @xmath330 for some fixed polynomial function in @xmath5 .",
    "each maximal consecutive subsequence @xmath331 of a @xmath71-trajectory @xmath332 with @xmath270 and @xmath271 induces a ` typical sequence ' @xmath333 .",
    "there are at most @xmath149 distinct such typical sequences and they can be generated in @xmath150 steps by lemma  [ lem : typical ] .",
    "therefore , the number of compact @xmath71-trajectories of width at most @xmath5 is at most @xmath334    if @xmath335 , then the number of compact @xmath71-trajectories is precisely the number of typical sequences , that is at most @xmath336 .",
    "the running time for producing @xmath297 follows immediately .",
    "let @xmath337 and @xmath338 be two @xmath71-trajectories .",
    "we write @xmath339 if @xmath337 and @xmath338 have the same length , say @xmath0 , and @xmath340 for all @xmath341 .",
    "we say that @xmath342 if there are extensions @xmath343 and @xmath344 such that @xmath345 .",
    "[ lem : width ] let @xmath260 , @xmath346 be two @xmath71-trajectories . if @xmath347 , then the width of @xmath260 is less than or equal to the width of @xmath346 .",
    "this is trivial from definitions .",
    "a _ lattice path with diagonal steps _ from @xmath290 to @xmath348 on @xmath349 is a sequence @xmath350 of distinct points in @xmath349 such that @xmath293 , @xmath351 , and @xmath352 for all @xmath353 .",
    "obviously the number of lattice paths with diagonal steps from @xmath290 to @xmath348 depends only on @xmath237 and @xmath238 .",
    "the following lemma indicates that comparing two @xmath71-trajectories can be done without going through infinitely many extensions .",
    "[ lem : comparison ] let @xmath260 , @xmath346 be two @xmath71-trajectories .",
    "then @xmath347 if and only if there exists a lattice path @xmath354 with diagonal steps from @xmath290 to @xmath355 such that @xmath356 when @xmath357 for each @xmath358 .",
    "suppose that there exist @xmath359 and @xmath360 such that @xmath361 .",
    "we may assume that @xmath362 is chosen to be minimum .",
    "let @xmath363 be integers such that @xmath364 for all @xmath365 and @xmath366 for all @xmath367 .",
    "similarly choose integers @xmath368 so that @xmath369 for all @xmath365 and @xmath370 for all @xmath371 .",
    "let @xmath357 for @xmath372 .    if @xmath373 and @xmath374 , then we can remove @xmath375 and @xmath376 from @xmath265 and @xmath377 , respectively , contradicting our assumption that @xmath378 is chosen to be minimum .",
    "thus we conclude that @xmath379 for all @xmath4 .",
    "this proves the forward implication .    to prove the converse ,",
    "let us define @xmath364 and @xmath369 for all @xmath358 .",
    "then @xmath359 , @xmath360 and @xmath361 and therefore @xmath347 .",
    "we say that @xmath380 if @xmath381 and @xmath382 .",
    "[ lem : transitive ] the binary relation @xmath383 on @xmath71-trajectories is transitive .",
    "suppose @xmath381 and @xmath384 .",
    "then there are extensions @xmath343 and @xmath344 such that @xmath385 .",
    "it is easy to see that @xmath386 and therefore there exists extensions @xmath387 and @xmath388 such that @xmath389 .",
    "we can easily find an extension @xmath390 of @xmath337 such that @xmath391 and therefore @xmath392 .",
    "[ lem : bothways ] for a @xmath71-trajectory @xmath260 , there are @xmath393 such that @xmath394 furthermore , @xmath337 and @xmath338 satisfy that @xmath395 and @xmath396 for all @xmath4 .",
    "we proceed by induction on @xmath262 .",
    "let @xmath276 .",
    "if @xmath275 , then this is trivial .",
    "if @xmath269 for some @xmath4 , then we apply the induction hypothesis to @xmath397 and deduce this lemma .",
    "thus , we may assume that there exist @xmath4 and @xmath137 such that @xmath398 , @xmath270 , @xmath271 and @xmath272 for all @xmath140 or @xmath399 for all @xmath140 .",
    "note that @xmath400 and @xmath401 for all @xmath140 .",
    "let @xmath402 . by definition , @xmath403 and",
    "therefore by the induction hypothesis , there exist @xmath404 such that @xmath405 .",
    "let @xmath406 ( we intentionally skip some indices for the convenience of the proof . )    if @xmath407 , then define @xmath408 , @xmath409 , @xmath35 , @xmath410 to be equal to @xmath411 and define @xmath412 , @xmath413 , @xmath35 , @xmath414 to be equal to @xmath415 .",
    "let @xmath416 and @xmath417 .",
    "clearly @xmath418 . for all @xmath419 , @xmath420 .",
    "this proves that @xmath421 and @xmath422 and @xmath423 for all @xmath424 .",
    "similarly we can find appropriate @xmath337 , @xmath338 if @xmath425 .",
    "the following is an immediate consequence of lemma  [ lem : bothways ] .",
    "[ lem : tauequivsame ] for all @xmath71-trajectories @xmath260 , @xmath426 .",
    "the next lemma follows from lemma  [ lem : tauequivsame ] and the transitivity of @xmath383 .",
    "[ lem : tautrans ] for two @xmath71-trajectories @xmath337 and @xmath338 , @xmath381 if and only if @xmath427 .      for a path - decomposition @xmath120 , the _",
    "canonical @xmath71-trajectory of @xmath125 _ is the @xmath71-trajectory @xmath428 such that @xmath429 for all @xmath430 .",
    "( note that @xmath431 , @xmath432 , @xmath433 and @xmath434 . )",
    "we say that a @xmath71-trajectory is _ strongly realizable _ in @xmath77 if it is the canonical @xmath71-trajectory of some path - decomposition of @xmath77 .",
    "a @xmath71-trajectory @xmath260 is _ realizable _ in @xmath77 if there exists an extension @xmath265 of @xmath260 that is strongly realizable in @xmath77 .      for subspaces",
    "@xmath71 and @xmath435 , we will define how to obtain a @xmath435-trajectory from a @xmath71-trajectory . for a statistic @xmath230 , we write @xmath436 for a @xmath71-trajectory @xmath257 , its _ projection _",
    "@xmath437 is the @xmath435-trajectory @xmath438 , @xmath439 , @xmath35 , @xmath440 .",
    "observe that the width of @xmath260 is less than or equal to the width of @xmath437 .",
    "[ lem : projstat ] let @xmath71 be a subspace of @xmath43 . if @xmath237 , @xmath238 are statistics such that @xmath239 , then @xmath441 .",
    "let @xmath442 and @xmath443 .",
    "it is easy to see that , by lemma  [ lem : submodular ] , @xmath444 therefore @xmath441 .",
    "[ lem : projcomp ] let @xmath71 , @xmath435 be subspaces of @xmath43 and let @xmath260 , @xmath346 be @xmath71-trajectories .",
    "if @xmath347 , then @xmath445 .",
    "it is enough to prove when @xmath446 .",
    "lemma  [ lem : projstat ] easily implies that @xmath447 .",
    "[ lem : projcan ] let @xmath77 be a subspace arrangement of subspaces of @xmath43 and let @xmath125 be a path - decomposition of @xmath77 .",
    "let @xmath71 be a subspace of @xmath43 and let @xmath435 be a subspace of @xmath71 . if @xmath260 is the canonical @xmath71-trajectory of @xmath125 , then @xmath437 is the canonical @xmath435-trajectory of @xmath125 .",
    "let @xmath120 .",
    "let @xmath448 be the canonical @xmath435-trajectory of @xmath125 . for all @xmath449",
    ", we observe that @xmath450 and @xmath451 .",
    "therefore @xmath452 and so @xmath453 .",
    "[ lem : proj ] let @xmath77 be a subspace arrangement of subspaces of @xmath43 .",
    "let @xmath71 be a subspace of @xmath43 and let @xmath435 be a subspace of @xmath71 . if @xmath260 is a realizable @xmath71-trajectory in @xmath77 , then @xmath437 is realizable in @xmath77 .",
    "let @xmath359 be strongly realizable in @xmath77 .",
    "then there is a path - decomposition @xmath120 whose canonical @xmath71-trajectory is @xmath265 . by lemma  [ lem : projcan ]",
    ", @xmath454 is the canonical @xmath435-trajectory of @xmath125 .",
    "observe now that @xmath454 is a strongly realizable extension of @xmath437 in @xmath77 and therefore @xmath437 is realizable in @xmath77 .      for two statistics @xmath237 and",
    "@xmath238 , let @xmath455 denote the statistic @xmath456 .    for two @xmath71-trajectories @xmath337 and @xmath338 and a lattice path @xmath292 from @xmath290 to @xmath457",
    ", we define the _ sum _ @xmath458 as the @xmath71-trajectory @xmath260 of length @xmath459 such that @xmath460 for all @xmath461 .",
    "the _ sum set _ @xmath462 of two @xmath71-trajectories @xmath337 and @xmath338 is the set of all sums @xmath463 for all possible lattice paths @xmath119 from @xmath290 to @xmath457 .",
    "[ lem : joinext ] let @xmath464 be @xmath71-trajectories and @xmath343 and @xmath344 .",
    "then for every lattice path @xmath119 from @xmath290 to @xmath465 , there is a lattice path @xmath466 from @xmath290 to @xmath457 such that @xmath467 is an extension of @xmath468 .    by induction ,",
    "it is enough to prove this when @xmath469 and @xmath470 .",
    "suppose that @xmath471 for all @xmath472 and @xmath473 for all @xmath474 .",
    "let @xmath354 with @xmath475 .",
    "let @xmath476 be the coordinate of @xmath477 .",
    "let @xmath478 be the maximum such that @xmath479 .",
    "let @xmath424 be the minimum such that @xmath480 .",
    "let us consider the subpath @xmath481 of @xmath119 .",
    "then the points on @xmath482 are @xmath483 where @xmath484 .",
    "let us construct @xmath485 as follows : @xmath486 let @xmath487 be the coordinate of @xmath488 . then for @xmath489 , @xmath490 and @xmath491 .",
    "let @xmath492 and @xmath493 . for @xmath494 , @xmath495 . for @xmath489 , @xmath496 .",
    "thus we conclude that @xmath448 is an extension of @xmath260 .",
    "[ lem : join - key ] let @xmath497 be subspace arrangements of subspaces of @xmath43 and let @xmath71 be a subspace of @xmath43 . if @xmath498 , then @xmath499 for each subspace @xmath72 of @xmath500 and each subspace @xmath241 of @xmath501 .",
    "it is enough to prove that if @xmath502 , then @xmath503 .",
    "clearly , @xmath504 .",
    "note that @xmath505 because @xmath506 .",
    "now , @xmath507\\\\      & = \\dim(x)+\\dim(b)+\\dim(y)+\\dim(b)\\\\&\\quad-\\dim(x+b)-\\dim(y+b)-\\dim x\\cap y\\\\      & = \\dim(x)+\\dim(b)+\\dim(y)+\\dim(b)\\\\&\\quad-\\dim(x+y+b)-\\dim(x+b)\\cap ( y+b)-\\dim x\\cap y \\displaybreak[3]\\\\      & = \\dim(x)+\\dim(b)+\\dim(y)-\\dim(x+y+b)-\\dim x\\cap y\\\\      & = \\dim(x+y)+\\dim(b)-\\dim(x+y+b)\\\\      & = \\dim ( x+y)\\cap b.\\qedhere    \\end{aligned}\\ ] ]    [ lem : dim - join ] for finite - dimensional subspaces @xmath231 , @xmath508 , @xmath232 , and @xmath509 , @xmath510    recall that for two finite - dimensional subspaces @xmath82 and",
    "@xmath71 , @xmath189 . using this fact , we deduce as follows .",
    "@xmath511    [ prop : join - one ] let @xmath497 be subspace arrangements of subspaces of @xmath43 and @xmath71 be a subspace of @xmath43 such that @xmath512 .",
    "if @xmath260 is realizable in @xmath513 , then there exist @xmath71-trajectories @xmath337 , @xmath338 and a lattice path @xmath119 from @xmath290 to @xmath457 such that    1 .",
    "@xmath514 is realizable in @xmath515 for @xmath516 , 2 .",
    "@xmath517 .",
    "we may assume that @xmath260 is strongly realizable in @xmath513 by taking an extension .",
    "let @xmath120 be a path - decomposition of @xmath513 with the injection @xmath518 such that its canonical @xmath71-trajectory is @xmath260 . by lemma  [ lem : submodel ] , we may also assume that @xmath519 is surjective , by taking a subsequence of @xmath125 .",
    "we may also assume that @xmath520 for all @xmath358 , since this will decrease @xmath260 with respect to @xmath383 by lemma  [ lem : submodel ] . for @xmath516 , let @xmath521 be a subsequence of @xmath125 by taking all @xmath522 with @xmath523 and",
    "let @xmath514 be the canonical @xmath71-trajectory of @xmath524 .",
    "clearly @xmath525 , and @xmath524 is a path - decomposition of @xmath515 and so @xmath514 is strongly realizable on @xmath515 .",
    "also observe that @xmath526 for all @xmath4 and @xmath137 .",
    "let @xmath527 be a lattice path from @xmath290 to @xmath528 such that for @xmath358 , @xmath529 we claim that @xmath530 .",
    "as @xmath260 has length @xmath531 and @xmath514 has length @xmath532 for @xmath516 , both sides have the same length .",
    "let @xmath533 be the @xmath137-th statistic of @xmath534 for @xmath71 .",
    "it remains to prove that @xmath535 for all @xmath536 .",
    "let @xmath537 .",
    "let @xmath538 , @xmath539 , @xmath540 , and @xmath541 . by the construction , @xmath542 and @xmath543 by lemma  [ lem :",
    "join - key ] . since @xmath544",
    ", we deduce that @xmath545 .",
    "similarly @xmath546 .",
    "it remains to prove that @xmath547 .",
    "first observe that @xmath548 and @xmath549 . since we assumed @xmath520 , @xmath231 and @xmath232",
    "are subspaces of @xmath500 and @xmath508 and @xmath509 are subspaces of @xmath501 .",
    "therefore @xmath550 and so @xmath551 similarly @xmath552 . by lemmas  [ lem : join - key ] and [ lem : dim - join ] , @xmath553 we deduce that @xmath554 .",
    "[ prop : composition ] let @xmath555 be @xmath71-trajectories . if @xmath556 and @xmath557 , then for all @xmath558 , there exists @xmath559 such that @xmath560 .    to prove this proposition , we use the following lemma .    [ lem : latticejoin ]",
    "let @xmath561 be @xmath71-trajectories such that @xmath562 .",
    "let @xmath119 be a lattice path from @xmath290 to @xmath457",
    ". then @xmath563 .",
    "observe that @xmath564 is well defined because @xmath565 .",
    "let @xmath566 and @xmath567 .",
    "it is enough to prove that for @xmath568 , we have @xmath569 .",
    "let @xmath570 be the @xmath137-th point of @xmath119 .",
    "let @xmath571 , @xmath572 , and @xmath573 .",
    "first , observe that @xmath574 and similarly @xmath575 .",
    "finally , @xmath576 .",
    "this proves the lemma .",
    "[ lem : naturalext ] let @xmath337 and @xmath338 be two @xmath71-trajectories , and @xmath119 be a lattice path from @xmath290 to @xmath577 .",
    "for any @xmath578 , @xmath579 , there exists a lattice path @xmath482 from @xmath290 to @xmath580 such that @xmath581 is an extension of @xmath582 .",
    "it is enough to prove the statement when @xmath583 and @xmath584 , from which we can inductively deduce our main statement .",
    "the lattice path @xmath119 is denoted as @xmath585 with @xmath357 .",
    "let @xmath237 be a statistic of @xmath337 such that @xmath586 is obtained by repeating @xmath237 once .",
    "we arbitrarily choose @xmath587 such that @xmath588 .",
    "notice that @xmath589 for @xmath590 .",
    "take @xmath591 with @xmath592 as follows : @xmath593 we claim that @xmath594 is an extension of @xmath463 . for @xmath595 , @xmath596 . for @xmath597 , @xmath598 .",
    "therefore , @xmath448 can be obtained from @xmath463 by repeating the statistic @xmath599 .    since @xmath600 and @xmath383 is transitive by lemma  [ lem : transitive ] , it is enough to prove it for the case that @xmath601 .",
    "let @xmath602 and @xmath343 such that @xmath603 .",
    "let @xmath119 be a lattice path from @xmath290 to @xmath457 such that @xmath567 . from lemma  [ lem : naturalext ]",
    ", there is a lattice path @xmath482 from @xmath290 to @xmath604 such that @xmath605 is an extension of @xmath260 .",
    "note that @xmath606 . by lemma  [ lem : latticejoin ] , @xmath607 . by lemma  [ lem : joinext ] , there is @xmath608 such that @xmath609 is an extension of @xmath448 .",
    "[ prop : compreal ] let @xmath497 be subspace arrangements of subspaces of @xmath43 and let @xmath71 be a subspace of @xmath43 such that @xmath498 .",
    "let @xmath337 and @xmath338 be two @xmath71-trajectories realizable in @xmath610 and @xmath611 respectively .",
    "then every @xmath612 is realizable in @xmath513 .",
    "let us delay proving proposition  [ prop : compreal ] by presenting a helpful lemma for the proof first .",
    "[ lem : psumreal ] let @xmath497 be subspace arrangements of subspaces of @xmath43 and let @xmath71 be a subspace of @xmath43 such that @xmath498 .",
    "let @xmath337 and @xmath338 be two @xmath71-trajectories and @xmath119 be a lattice path from @xmath290 to @xmath457 . if @xmath337 and @xmath338 are strongly realizable in @xmath610 and @xmath611 , then the sum @xmath458 is strongly realizable in @xmath613 .",
    "let @xmath614 be a lattice path from @xmath290 to @xmath457 with @xmath537 .",
    "since @xmath337 and @xmath338 are strongly realizable , there are two path - decompositions @xmath615 of @xmath610 and @xmath616 of @xmath611 whose canonical @xmath71-trajectories are @xmath337 and @xmath338 , respectively .",
    "we build a path - decomposition @xmath125 from @xmath617 and @xmath618 as follows : for @xmath619 , @xmath620= \\begin{cases } s_{x_i } & \\text{if } v_{i+1}=v_i+(1,0),\\\\ t_{y_i } & \\text{if } v_{i+1}=v_i+(0,1 ) .",
    "\\end{cases}\\ ] ] it is clear that @xmath125 is a path - decomposition of @xmath513 . let @xmath260 be the canonical @xmath71-trajectory of @xmath125 .",
    "we claim that @xmath621 .",
    "let @xmath622 .",
    "we shall show that @xmath623 .",
    "let @xmath624 , @xmath625 , @xmath626 and @xmath627 .",
    "note that @xmath628 and @xmath629 , and thus @xmath630 and @xmath631 .",
    "this allows us to use lemma  [ lem : join - key ] .",
    "we deduce from lemma  [ lem : join - key ] that @xmath632 where the last equality follows from the definition of the sum @xmath633 similarly @xmath634    from @xmath498 , it holds that for any subspace @xmath72 of @xmath500 and subspace @xmath241 of @xmath501 , @xmath635 . by lemma  [ lem",
    ": join - key ] , we have @xmath636 by lemma  [ lem : dim - join ] and the above , we deduce that @xmath637 hence we conclude that @xmath621 . since @xmath260 is a canonical @xmath71-trajectory of @xmath125 , @xmath534 is strongly realizable in @xmath513 .",
    "now we are ready to finish the proof of proposition  [ prop : compreal ] .    since @xmath337 and @xmath338 are realizable in @xmath610 and @xmath611 respectively , there are @xmath343 and @xmath344 which are strongly realizable in @xmath610 and @xmath611 respectively .",
    "let @xmath119 be a lattice path from @xmath290 to @xmath457 such that @xmath621 and let @xmath482 be a lattice path from @xmath290 to @xmath465 such that @xmath638 is an extension of @xmath260 .",
    "such @xmath482 exists due to lemma  [ lem : naturalext ] . by lemma  [ lem : psumreal ] ,",
    "@xmath638 is strongly realizable in @xmath513 and thus @xmath260 is realizable .",
    "let @xmath77 be a subspace arrangement of subspaces of @xmath43 and @xmath71 be a subspace of @xmath43 .",
    "the _ full set _ of @xmath77 of width @xmath5 with respect to @xmath71 , denoted by @xmath639 , is the set of all compact @xmath71-trajectories @xmath260 of width at most @xmath5 such that there exists a @xmath71-trajectory @xmath346 realizable in @xmath77 with @xmath640 . for a set @xmath641 of @xmath71-trajectories and @xmath642",
    ", we define @xmath643 as the set of all compact @xmath435-trajectories @xmath260 of width at most @xmath5 such that there exists @xmath644 with @xmath640 ( considering @xmath346 as a @xmath435-trajectory ) .",
    "we will now describe in detail @xmath639 when @xmath645 , which may help readers to review definitions .",
    "we may assume @xmath646 .",
    "let us first describe all strongly realizable @xmath71-trajectories of @xmath77 .",
    "in this situation , a path - decomposition of @xmath77 is a sequence @xmath120 such that @xmath647 for all @xmath4 and there is at least one @xmath137 such that @xmath648 .",
    "let @xmath649 be the minimum such that @xmath650 and let @xmath651 be the maximum such that @xmath652 .",
    "let @xmath428 be the canonical @xmath71-trajectory of @xmath125 .",
    "then @xmath653 where @xmath654 and @xmath655 .",
    "note that if @xmath656 , then @xmath657 never appears in @xmath658 .",
    "( we allow @xmath659 or @xmath660 . )",
    "let @xmath661 be a @xmath71-trajectory .",
    "notice that @xmath346 is strongly realizable because it is the canonical @xmath71-trajectory of a path - decomposition @xmath662 .",
    "furthermore @xmath663 for all strongly realizable @xmath71-trajectories @xmath658 .",
    "thus the full set @xmath664 is equal to @xmath665 .",
    "observe that for every @xmath71-trajectory @xmath260 , @xmath640 if and only if @xmath666 .",
    "therefore we conclude as follows .",
    "[ prop : single ] let @xmath71 be a subspace in @xmath43 such that @xmath667",
    ". then @xmath664 is the set of all compact @xmath71-trajectories @xmath668 such that @xmath669 and @xmath670 for all  @xmath4 , or equivalently @xmath671 where @xmath661 .",
    "[ prop : expand ] let @xmath77 be a subspace arrangement of subspaces of @xmath43 .",
    "let @xmath71 , @xmath435 be subspaces of @xmath43 such that @xmath642 . if @xmath672 , then @xmath673 .    because @xmath672 , for any subspace @xmath674 of @xmath84 , we have @xmath675 .",
    "this implies that for any path - decomposition @xmath125 of @xmath77 , the canonical @xmath71-trajectory of @xmath125 is also the canonical @xmath435-trajectory of @xmath125 and vice versa .",
    "thus @xmath260 is a realizable @xmath71-trajectory if and only if it is a realizable @xmath435-trajectory .",
    "the conclusion follows easily , as @xmath383 is transitive by lemma  [ lem : transitive ] .      in this subsection",
    ", we describe how to obtain @xmath676 from @xmath639 for a subspace @xmath435 of @xmath71 . for subspaces @xmath677 and a set @xmath678 of @xmath71-trajectories , let @xmath679 be the set of all @xmath435-trajectories @xmath437 where @xmath680 .",
    "[ prop : shrink ] let @xmath77 be a subspace arrangement of subspaces of @xmath43 and @xmath71 , @xmath435 be subspaces of @xmath43 . if @xmath677 , then @xmath681 .",
    "we first prove @xmath682 .",
    "let @xmath683 and @xmath346 be a @xmath435-trajectory realizable in @xmath77 such that @xmath684 .",
    "let @xmath125 be a path - decomposition whose canonical @xmath435-trajectory is an extension of @xmath346 .",
    "let @xmath685 be the canonical @xmath71-trajectory of @xmath125 .",
    "since @xmath260 is a compact @xmath435-trajectory of width at most @xmath5 , it is enough to show that ( i ) @xmath686 and ( ii ) @xmath687 is in @xmath639 . for ( i )",
    ", @xmath688 is an extension of @xmath346 because it is the canonical @xmath435-trajectory of @xmath125 .",
    "thus , @xmath689 . by lemmas  [ lem : tauequivsame ] and [ lem : projcomp ] , @xmath690 and",
    "we conclude that @xmath686 . for ( ii ) , by lemma  [ lem : width ] , we know that @xmath691 . by lemma  [ lem : tauequivsame ]",
    ", we have @xmath692 . since @xmath685 is realizable in @xmath77",
    ", @xmath687 is in @xmath639 .",
    "next , let us show @xmath693 .",
    "choose an arbitrary @xmath260 from @xmath694 and let @xmath695 such that @xmath696 .",
    "by the definition of the full set @xmath639 , there exists a @xmath71-trajectory @xmath685 which is realizable in @xmath77 and @xmath697 . by lemma  [ lem : proj ]",
    ", @xmath688 is realizable in @xmath77 . by lemma  [ lem : projcomp ] , @xmath698 . recall that @xmath260 is compact and of width at most @xmath5 , and thus @xmath699 .      for two sets @xmath700 , @xmath701 of @xmath71-trajectories ,",
    "we define @xmath702 .",
    "[ prop : join ] let @xmath497 be subspace arrangements of subspaces of @xmath43 and let @xmath71 be a subspace of @xmath43 . if @xmath703 then @xmath704    we prove the  @xmath705\"-direction first .",
    "let @xmath706 . by definition",
    ", there exists @xmath707 for some @xmath708 , @xmath709 satisfying @xmath684 . again by definition , there exist two @xmath71-trajectories @xmath710 and @xmath711 with @xmath712 and @xmath713 such that @xmath710 and @xmath711 is realizable in @xmath610 and @xmath611 , respectively . by applying proposition  [ prop : composition ] to @xmath714 and @xmath715 , we deduce that there exists @xmath716 such that @xmath697 .",
    "proposition  [ prop : compreal ] implies that all elements of @xmath717 are realizable in @xmath513 , and so is @xmath685 .",
    "from the fact that @xmath685 is realizable in @xmath513 and @xmath718 , we conclude that @xmath260 belongs to the set @xmath719 .",
    "now we prove the  @xmath720\"-direction .",
    "consider an arbitrary @xmath260 from @xmath721 . by the definition of the full set",
    ", there exists a @xmath71-trajectory @xmath346 realizable in @xmath513 such that @xmath640 . by proposition  [ prop",
    ": join - one ] , there exist two @xmath71-trajectories @xmath722 , @xmath723 and a lattice path @xmath119 from @xmath290 to @xmath724 such that    1 .",
    "@xmath725 is realizable in @xmath515 for @xmath516 , 2 .",
    "@xmath726 .",
    "we apply proposition  [ prop : composition ] to @xmath71-trajectories @xmath727 and @xmath728 ; since @xmath729 and @xmath730 there exists @xmath731 such that @xmath732 , and thus @xmath718 . note that both @xmath733 and @xmath734 have width at most @xmath5 by lemma  [ lem : width ] , because the width of @xmath722 and @xmath723 are less than the width of @xmath735 , @xmath736 and @xmath260 has width at most @xmath5 .",
    "since @xmath725 is realizable in @xmath515 and @xmath737 , we have @xmath738 for @xmath516 .",
    "to summarize , we have @xmath731 for some @xmath739 , @xmath516 , satisfying @xmath740 and therefore , @xmath741 .",
    "we are ready to describe our algorithm to solve this problem .",
    "we first describe how subspaces are given as an input . for",
    "an @xmath742 matrix @xmath32 and @xmath743 , @xmath744 , let us write @xmath745 $ ] to denote the submatrix of @xmath32 induced by the rows in @xmath72 and the columns in @xmath241 and @xmath746:=m[\\{1,2,\\ldots , r\\ } , y]$ ] .",
    "input : :    an @xmath742 matrix @xmath32 over a fixed finite    field @xmath7 with a partition    @xmath747 of    @xmath748 , an integer @xmath5 .",
    "parameter : :    @xmath5 .",
    "problem : :    for each @xmath341 , let @xmath61 be the    column space of @xmath749 $ ] and let    @xmath750 be a subspace    arrangement .",
    "+    decide whether there exists a permutation @xmath26 of    @xmath27 such that    @xmath751    for all @xmath46 and if it exists , then output    such a permutation @xmath26 .",
    "if such a permutation @xmath26 exists , then we say that @xmath752 is a yes instance .",
    "otherwise it is a no instance .    in this section",
    ", we assume that a branch - decomposition @xmath91 of @xmath77 of width at most @xmath184 is given as a part of the input . by proposition  [ prop : pwbw ]",
    ", there exists a branch - decomposition of width @xmath753 if the input instance has path - width at most @xmath5 .",
    "finding such a branch - decomposition and the corresponding running time shall be discussed in detail in section  [ sec : approx ] .",
    "let us assume that @xmath92 is a rooted binary tree by picking an arbitrary edge @xmath94 and subdividing @xmath94 to create a degree-@xmath64 vertex called the root .",
    "our aim is to obtain a uniform bound on the running time of our algorithm in terms of @xmath0 for each fixed @xmath5 .",
    "however , it is possible that @xmath378 or @xmath58 is very large or @xmath61 has huge dimension .",
    "thus , our first step is to preprocess the input so that both @xmath58 and @xmath378 are bounded by functions of @xmath5 and @xmath0 .",
    "let us say that an @xmath742 matrix @xmath32 is _ of the standard form _ if the submatrix induced by the first @xmath58 columns is the @xmath754 identity matrix . clearly in every matrix of the standard form ,",
    "row vectors are linearly independent .",
    "[ lem : rowreduction ] let @xmath7 be a finite field . given an @xmath742 matrix @xmath32 over @xmath7 with a partition @xmath747 of @xmath748 , we can find , in time @xmath755 , an @xmath756 matrix @xmath757 over @xmath7 with a partition @xmath758 of @xmath748 such that    a.   @xmath757 is of the standard form , b.   @xmath759 and @xmath760 for all @xmath761 , c.   for all @xmath5 , @xmath762 is a yes instance with a permutation @xmath26 of @xmath27 if and only if @xmath763 is a yes instance with @xmath26 .",
    "let @xmath764 be the rank of @xmath32 .",
    "this is easily achieved by applying elementary row operations and removing dependent rows to make the @xmath765 identity submatrix and then permuting columns of @xmath32 and adjusting @xmath766 accordingly so that the first @xmath764 columns form the @xmath765 identity matrix .",
    "note that @xmath767 for all @xmath4 .",
    "[ lem : columnreduction ] let @xmath7 be a finite field and let @xmath184 be an integer .",
    "let @xmath32 be an @xmath742 matrix @xmath32 over @xmath7 of the standard form with a partition @xmath747 of @xmath748 .",
    "let @xmath61 be the column space of @xmath768 $ ] and let @xmath130 .    in time @xmath769 , we can either find an @xmath770 matrix over @xmath7 and a partition @xmath758 of @xmath771 such that    a.   the column vectors of @xmath772 $ ] are linearly independent for every @xmath129 , b.   @xmath773 for all @xmath129 , c.   for all @xmath5",
    ", @xmath762 is a yes instance with a permutation @xmath26 of @xmath27 if and only if @xmath763 is a yes instance with @xmath26 .    or find @xmath761 such that @xmath774 .",
    "let @xmath775 .",
    "let @xmath776 and @xmath777 .    for this algorithm , we will either find @xmath4 such that @xmath778 or reduce the instance @xmath32 and @xmath766 to a smaller instance @xmath757 and @xmath779 whose subspaces @xmath780 ( the column space of @xmath772 $ ] ) have dimension at most @xmath184 by replacing @xmath61 with @xmath781 .",
    "let @xmath782 and let @xmath783 .",
    "we first claim that for a subset @xmath784 and @xmath785 , @xmath786 as @xmath787 for all @xmath4 , it is enough to show that @xmath788 .",
    "suppose @xmath789 .",
    "let @xmath790 so that @xmath791 . if @xmath792 , then @xmath793 and therefore @xmath794 .",
    "similarly @xmath794 for @xmath795 .",
    "thus @xmath796 .",
    "this claim proves that for each permutation @xmath26 of @xmath27 , @xmath797 , @xmath798 , @xmath35 , @xmath799 is a linear layout of width at most @xmath5 if and only if @xmath800 , @xmath801 , @xmath35 , @xmath802 is a linear layout of width at most @xmath5 .",
    "now we describe how to output an @xmath770 matrix @xmath757 with a partition @xmath758 of @xmath771 such that @xmath780 is the column space of @xmath772 $ ] for each @xmath12 or find @xmath4 such that @xmath803 .    for each @xmath12",
    ", we find the column basis @xmath804 of @xmath805 $ ] and the column basis @xmath806 of @xmath807 $ ] and let @xmath808 &   0 \\\\      0 & m[b - i_i , y_i ]    \\end{pmatrix}.\\ ] ] let @xmath809    we claim that the column space of @xmath810 is exactly @xmath782 .",
    "this can be seen from the following representation of @xmath32 after permuting rows and columns : @xmath811 the column spaces of @xmath749 $ ] and @xmath812 $ ] do not change if we replace @xmath813 , @xmath814 with @xmath89 and therefore for the computation of @xmath780 , we may assume that @xmath815 and @xmath816 .",
    "then @xmath817 is equal to the column space of the matrix @xmath818 .",
    "as we take the column basis @xmath819 of @xmath820 and @xmath821 of @xmath822 , the column space of @xmath823 is equal to @xmath780 . since @xmath824",
    ", we can find @xmath4 with @xmath825 if @xmath826 .",
    "thus our algorithm can output @xmath757 with @xmath758 or find @xmath4 such that @xmath803 .",
    "let us now estimate its running time .",
    "it takes @xmath827 time to compute @xmath819 and @xmath828 time to compute @xmath821 or verify that @xmath826 by applying the elementary row operations .",
    "( note that we only need to apply at most @xmath184 pivots because if the rank is big , then @xmath829 is big . ) since @xmath830 the total running time of the algorithm is at most @xmath769 .",
    "we apply the row reduction lemma first , the column reduction lemma second , and the row reduction lemma last to reduce the input instance @xmath32 and @xmath766 to an equivalent instance @xmath757 and @xmath779 , or find @xmath4 such that @xmath825 , in time @xmath831 .",
    "if there exists @xmath4 such that @xmath825 , then we verify that the branch - width of @xmath77 is larger than @xmath184 .",
    "thus from now on , we may assume the following for the input instance @xmath32 and @xmath766 .",
    "* @xmath832 and the columns of @xmath749 $ ] are linearly independent for each @xmath4 . *",
    "the number @xmath58 of rows of @xmath32 is at most @xmath833 .    as usual",
    ", we let @xmath834 be the column space of @xmath749 $ ] and @xmath130 be the subspace arrangement given by @xmath32 and @xmath766 . then by the above assumptions",
    ", we have the following .",
    "* @xmath835 for all @xmath4 .",
    "* @xmath836 .",
    "if @xmath837 for all @xmath4 , then the path - width of @xmath77 is @xmath89 and therefore we may assume that @xmath838 for some @xmath4 and the path - width of @xmath77 is at least @xmath6 .",
    "therefore , we may further assume that @xmath839 , @xmath840 and @xmath838 for all @xmath4 by discarding such a subspace from @xmath77 .",
    "given a branch - decomposition @xmath91 of width at most @xmath184 , we compute a basis for the boundary space at each node and the sum of two boundary spaces of children at each internal node of @xmath92 in time @xmath769 . therefore , the following information will be computed in time @xmath769 , which we assume as given throughout the current section .    * a branch - decomposition @xmath841 of @xmath77 of width at most @xmath184 .",
    "* a basis @xmath842 of the boundary space @xmath187 at every node @xmath185 of @xmath92 . * a basis @xmath843 of @xmath844 extending @xmath842 at every internal node @xmath185 of @xmath92 having two children @xmath190 and @xmath191 . * for each @xmath845 , a transition matrix @xmath846 from @xmath847 to @xmath843 such that @xmath848_{\\mathcal{b}_{w_i}}=[x]_{\\mathcal{b}_v ' } \\text { for all } x\\in b_{w_i}\\ ] ] at every internal node @xmath185 of @xmath92 having two children @xmath190 and @xmath191 .",
    "[ prop : preprocess - alg ] let @xmath7 be a fixed finite field and @xmath184 be a nonnegative integer .",
    "let @xmath32 be an @xmath742 matrix of the standard form over @xmath7 given with a partition @xmath747 of @xmath748 .",
    "let @xmath61 be the column space of @xmath749 $ ] and @xmath849 be a subspace arrangement .",
    "given a branch - decomposition @xmath91 of @xmath77 having width @xmath184 , we can compute the following for all nodes @xmath185 of @xmath92 , in time @xmath850 .    *",
    "a basis @xmath851 of the boundary space @xmath187 . *",
    "if @xmath185 has two children @xmath190 and @xmath191 , then * * a basis @xmath852 of @xmath853 such that @xmath854 , * * for each @xmath845 , a transition matrix @xmath846 from @xmath855 to @xmath852 such that @xmath856_{{\\mathcal b}_{w_i}}=[x]_{{\\mathcal b}_v'}$ ] for all @xmath857 .",
    "let @xmath775 .",
    "for each node @xmath185 of @xmath92 , we need to compute the basis @xmath851 of @xmath187 .",
    "let @xmath858 be the union of all @xmath859 such that @xmath860 is @xmath185 or the descendants of @xmath185 in @xmath92 .",
    "let @xmath861 .",
    "then @xmath187 is the intersection of the column spaces of @xmath862 $ ] and @xmath863 $ ] .",
    "now observe the following representation of @xmath32 after permuting rows and columns , similar to the proof of lemma  [ lem : columnreduction ] : @xmath864 the column space of @xmath862 $ ] is independent of @xmath813 and so we may assume @xmath865 .",
    "similarly we may assume @xmath866 as it does not affect the column space of @xmath863 $ ] .",
    "then @xmath187 is indeed equal to the column space of @xmath867 .",
    "furthermore @xmath868 and therefore a basis @xmath869 of @xmath187 can be found in time @xmath870 .",
    "as @xmath871 , and @xmath872 , we deduce that in time @xmath850 , we can compute @xmath851 for all nodes @xmath185 of @xmath92 .",
    "if @xmath185 is an internal node of @xmath92 with two children @xmath190 and @xmath191 , we need to compute a basis @xmath873 of @xmath853 such that @xmath874 .",
    "let @xmath32 be a matrix of @xmath58 rows and @xmath875 columns of the form @xmath876 where each of @xmath851 , @xmath877 , and @xmath878 is considered as a matrix whose column vectors are the vectors in each of those sets . by applying the elementary row operations to @xmath32 , we can find , in time @xmath879 , a column basis @xmath72 of @xmath32 .",
    "note that @xmath880 because @xmath32 is of a standard form . as @xmath881 , we can choose @xmath72 such that @xmath882",
    ". then the column vectors of @xmath883 $ ] form a basis @xmath873 of @xmath853 . since we do this for each internal node @xmath185 , it takes the time @xmath769 to compute @xmath852 for all internal nodes @xmath185 of @xmath92 .",
    "it remains to compute the transition matrices @xmath884 and @xmath885 for each internal node @xmath185 with two children @xmath190 and @xmath191 .",
    "let @xmath845 .",
    "our goal is to find a matrix @xmath846 such that @xmath886_{{\\mathcal b}_{w_i } } = [ x]_{{\\mathcal b}_v'}\\ ] ] for all @xmath887 .",
    "let @xmath888 .",
    "then if @xmath889 , then @xmath890_{{\\mathcal b}_{w_i}}=e_j\\in { \\mathbb f}^\\ell$ ] .",
    "thus the @xmath137-th column vector of @xmath846 is equal to the coordinate of @xmath891 with respect to @xmath852 . in other words",
    ", we have @xmath892 where @xmath846 is a @xmath893 matrix .",
    "this matrix equation can be solved in time @xmath894 .",
    "thus we can compute @xmath884 and @xmath885 for all @xmath185 in time @xmath769 .      before describing the algorithm , we present our data structure to store a @xmath71-trajectory in the full set @xmath639 when we have a precomputed basis @xmath895 of @xmath71 . for a @xmath71-trajectory @xmath276 with @xmath896 , we need to store subspaces @xmath897 and @xmath898 of @xmath71 .",
    "let @xmath899 .",
    "we will make sure that @xmath900 .",
    "if we want to represent a @xmath159-dimensional subspace @xmath74 of @xmath71 such as @xmath897 and @xmath898 , a naive method is to pick a basis and make a matrix . as our vector space is a subspace of @xmath43",
    ", one might use an @xmath901 matrix to represent @xmath74 .",
    "however , our @xmath58 depends on the input and may grow very large even if @xmath902 is bounded .    instead ,",
    "as we discussed in subsection  [ subsec : linear ] , we store such a subspace @xmath903 or @xmath898 by picking a basis represented by coordinates with respect to @xmath895 to construct a @xmath904 matrix to represent @xmath74 .",
    "this will ensure that each compact @xmath71-trajectory of width at most @xmath5 can be stored in bounded amount of space when @xmath902 is bounded by a function of @xmath184 .",
    "the procedure full - set@xmath905 aims to construct the full set @xmath906 at the root node of @xmath92 .",
    "we compute a set @xmath907 at each node @xmath185 , which will be shown to be @xmath908 later . to this end",
    ", full - set@xmath905 recursively chooses a node @xmath185 of @xmath92 , farthest from the root ( ties broken arbitrarily ) , such that @xmath907 is not computed yet .",
    "the core of full - set@xmath905 is the _ join _",
    "operation at an internal node @xmath185 which combines the two full sets obtained at its children @xmath190 and @xmath191 . for this , the two full sets , which are represented with respect to the individual boundary spaces @xmath909 and @xmath910 of @xmath190 and @xmath191 , respectively , are adjusted via the _ expand _ operation .",
    "after that , two full sets which are represented with respect to the same subspace @xmath853 become amenable for join . after the join operation",
    ", the full set is again adjusted via the _ shrink _ operation and now represented with respect to the boundary space @xmath187 at node @xmath185 . in this way ,",
    "all subspaces under consideration have dimension at most @xmath911 .",
    "choose an unmarked node @xmath185 farthest from the root .",
    "set @xmath907 as in proposition  [ prop : single ] .",
    "[ line : init ] recall @xmath912 .",
    "@xmath913 for @xmath516 .",
    "[ line : expand ] @xmath914 .",
    "[ line : join ] @xmath915 .",
    "[ line : shrink ] mark @xmath185 .",
    "recall that @xmath297 is the set of all compact @xmath71-trajectories of width at most @xmath5 and that @xmath916 is at most @xmath917 by lemma  [ lem : numtra ] , where @xmath918 . clearly , @xmath919 and therefore we consider the elements of @xmath297 as candidates for @xmath639 . to evaluate the number of steps carried out by full - set@xmath905 , we need the following lemmas .    [",
    "lem : numpaths ] there are at most @xmath920 distinct lattice paths with diagonal steps from @xmath290 to @xmath921 .    for any lattice path with diagonal steps",
    "@xmath922 from @xmath290 to @xmath921 , we have @xmath923 . at each @xmath4",
    ", we have three possible choices .",
    "[ lem : algcomp ] let @xmath71 , @xmath435 be subspaces of dimension at most @xmath911 given with bases @xmath924 and @xmath925 , respectively , such that @xmath642 .",
    "let @xmath92 be the transition matrix from @xmath924 to @xmath925 so that @xmath926_{\\mathcal b}=[x]_{\\mathcal b'}$ ] for all @xmath927 .",
    "then , for a @xmath71-trajectory @xmath346 represented with respect to @xmath924 and a @xmath435-trajectory @xmath260 represented with respect to @xmath925 , we can decide @xmath640 in time @xmath928 .",
    "first we transform the representation of @xmath346 into a representation with respect to @xmath925 .",
    "this can be done by multiplying @xmath92 to each of matrices representing bases of subspaces appearing in @xmath346 .",
    "since both the number of rows and the number of columns are at most @xmath911 and each subspace in @xmath346 has dimension at most @xmath911 , we can transform the representation of @xmath346 in time @xmath929 .",
    "now we are prepared with @xmath346 and @xmath260 , both represented with respect to @xmath925 . in order to test @xmath640",
    ", we need to consider all possible lattice paths from @xmath290 to @xmath930 . by lemma  [ lem : numpaths ]",
    ", there are at most @xmath931 such paths . for each path , we need to compare an extension of @xmath346 with an extension of @xmath260 . comparing two subspaces of @xmath435 takes time @xmath932 and there are @xmath933 comparisons of subspaces to make for each path .",
    "thus , we can decide @xmath640 in time @xmath934 .",
    "[ lem : numcomp ] let @xmath5 be an integer .",
    "let @xmath71 , @xmath435 be subspaces such that @xmath642 and let @xmath678 be a set of @xmath71-trajectories . to compute @xmath935 , it is enough to perform at most @xmath936 comparisons , each deciding whether @xmath684 for some @xmath644 and @xmath937 .",
    "recall that @xmath938 if and only if @xmath939 and there exists @xmath940 such that @xmath640 . therefore , for each pair @xmath941 and @xmath942 we verify whether @xmath684 .",
    "below , we explain how to perform each operation in full - set@xmath905 and argue ( in the proof of proposition  [ prop : fsruntime ] ) that each operation takes at most @xmath943 steps .",
    "* initialization : * at each leaf @xmath185 of @xmath92 , which is handled at line  [ line : init ] , proposition  [ prop : single ] states that the set @xmath907 equals @xmath944 , where @xmath945 . by lemma  [ lem : numcomp ]",
    ", computing @xmath907 requires at most @xmath946 comparisons for @xmath640 between @xmath346 and @xmath947 .",
    "* expand : * at line  [ line : expand ] , for @xmath516 , we compute the set @xmath948 . by lemma  [ lem : numcomp ] ,",
    "this requires at most @xmath949 comparisons between @xmath950 and @xmath951 .",
    "* join : * at line  [ line : join ] , computing @xmath952 , where @xmath844 , consists of two steps : ( a ) to compute @xmath953 , and ( b ) to take @xmath954 .",
    "note that , for ( b ) , the set @xmath954 can be computed in at most @xmath955 comparisons by lemma  [ lem : numcomp ] since @xmath956 .",
    "* shrink : * at line  [ line : shrink ] , we compute the set @xmath957 in two steps : ( a ) to compute @xmath958 , and ( b ) to compute @xmath957 . here , by lemma",
    "[ lem : numcomp ] , the set @xmath957 can be computed by comparing at most @xmath959 pairs @xmath346 and @xmath260 , where @xmath960 and @xmath961 .    [ prop : fsruntime ] let @xmath962 . the procedure full - set@xmath905 runs in @xmath963 steps , when @xmath184 is the width of @xmath91 .    in each operation ,",
    "when we compare two trajectories @xmath346 and @xmath260 to decide @xmath640 , we know @xmath964 and @xmath965 ; the worst case happens at the join operation .",
    "thus , by lemma  [ lem : algcomp ] , one comparison can be done in time @xmath966 note that @xmath967 .",
    "recall that @xmath968 , @xmath969 , and @xmath970 for @xmath516 . by lemma  [ lem : numtra ] , @xmath971",
    "when @xmath71 is a vector space with @xmath972 , lemma  [ lem : numtra ] implies that @xmath297 can be generated in @xmath973 steps .",
    "let us analyze the time complexity for each operation .",
    "* initialization : * since computing @xmath907 requires at most @xmath974 comparisons , it can be computed in time @xmath975    * expand : * the set @xmath948 can be computed in time @xmath976    * join : * recall that @xmath977 . since @xmath978 for @xmath516 after an expanding operation , there are at most @xmath979 pairs @xmath722 , @xmath723 to consider . for each pair @xmath722 and @xmath723",
    ", computing @xmath980 requires considering all lattice paths from @xmath290 to @xmath981 .",
    "the number of such paths is at most @xmath982 and thus , ( a ) takes at most @xmath983 steps . by lemma  [",
    "lem : lentraj ] , @xmath984    for ( b ) , the set @xmath954 can be constructed in time @xmath985 therefore , the join operation can be performed in @xmath986 steps .",
    "* shrink : * for ( a ) , we consider every @xmath987 and take @xmath988 .",
    "for each @xmath987 , computing @xmath988 can be done in time @xmath989 ( see subsection  [ subsec : linear ] ) . since @xmath990 , there are at most @xmath991 elements to consider . by lemma  [ lem : lentraj ] , @xmath992 .",
    "it follows that ( a ) can be done in @xmath993 steps . to compute @xmath957",
    ", we need to compare two trajectories at most @xmath959 times .",
    "thus , ( b ) takes at most @xmath994 steps .",
    "hence the shrink operation can be done in @xmath995 steps .    therefore , the running time of one iteration of the repeat - loop is @xmath996 .",
    "notice that the tree @xmath92 contains @xmath0 leaf nodes and @xmath997 internal nodes .",
    "this completes the proof .",
    "[ prop : fsroot ] the path - width of @xmath77 is at most @xmath5 if and only if @xmath998 at the root node of @xmath92 .",
    "first , we claim that for each node @xmath185 of @xmath92 , we have @xmath999 , and furthermore @xmath1000 and @xmath1001 for @xmath516 when @xmath185 has two children @xmath190 and @xmath191 .",
    "we prove this by induction on the number of steps executed by full - set@xmath905 .",
    "the claim holds for @xmath907 produced at line  [ line : init ] by proposition  [ prop : single ] . at line  [ line :",
    "expand ] , lemma  [ lem : subspace ] implies @xmath1002 .",
    "since the condition of proposition  [ prop : expand ] holds , it follows that @xmath1001 for @xmath516 .",
    "for @xmath1003 produced at line  [ line : join ] , notice that @xmath1004 by lemma  [ lem : subspace ] .",
    "hence , the condition of proposition  [ prop : join ] is satisfied . by induction hypothesis and proposition  [ prop :",
    "join ] , we have @xmath1000 . at line  [",
    "line : shrink ] , observe that @xmath881 by lemma  [ lem : subspace ] .",
    "the condition of proposition  [ prop : shrink ] holds , which implies @xmath999 .",
    "this completes the proof of our claim .    from the above claim",
    ", it immediately follows that the forward implication holds . for the opposite direction , let @xmath1005 be a compact @xmath1006-trajectory of width at most @xmath5 .",
    "note that @xmath1007 and @xmath1008 . by definition , there exists a @xmath1009-trajectory @xmath346 realizable in @xmath77 such that @xmath684 .",
    "this means that there exists a path - decomposition @xmath1010 of @xmath77 whose canonical @xmath1009-trajectory @xmath1011 is an extension of @xmath346 .",
    "since @xmath260 is of width at most @xmath5 and @xmath684 , lemma  [ lem : width ] implies that @xmath346 is indeed of width at most @xmath5 . recall that @xmath1012 and @xmath1013 are subspaces of @xmath1009 , and we have @xmath1014 for every @xmath1015 .",
    "therefore , @xmath125 is a path - decomposition of @xmath77 of width at most  @xmath5 .      in this subsection",
    ", we illustrate how to construct an optimal linear layout of @xmath77 if @xmath906 is nonempty .",
    "first let @xmath1016 be a tree obtained from @xmath92 as follows :    * the vertex set of @xmath1016 is given as the disjoint union of @xmath1017 for each internal node @xmath185 of @xmath92 and @xmath1018 for each leaf node @xmath185 of @xmath92 .",
    "* for each internal node @xmath185 of @xmath92 , @xmath1019 , @xmath1020 , @xmath1021 , @xmath1022 , @xmath1023 are edges of @xmath1016 induced on @xmath1017 .",
    "* for each leaf node @xmath185 of @xmath92 , @xmath1024 is an edge of @xmath1016 .",
    "* for each internal node @xmath185 of @xmath92 and its two children @xmath190 and @xmath191 , @xmath1016 has edges @xmath1025 and @xmath1026 .",
    "this tree @xmath1016 is called the _ composition tree _ of @xmath92 .",
    "the composition tree describes how our dynamic programming works .",
    "there are four kinds of nodes in @xmath1016 .",
    "* vertices @xmath1027 of @xmath1016 for all internal nodes @xmath185 of @xmath92 and vertices @xmath185 of @xmath1016 for all nodes @xmath185 of @xmath92 are _ up nodes_. * vertices @xmath1028 of @xmath1016 for all internal nodes @xmath185 of @xmath92 are _ join nodes_. * vertices @xmath1029 of @xmath1016 for all leaf nodes @xmath185 of @xmath92 are _ leaf nodes_. * vertices @xmath1030 of @xmath1016 for all internal nodes @xmath185 of @xmath92 are called _",
    "shrink nodes_.    we choose @xmath1031 with the minimum width .",
    "the width of @xmath260 is going to be equal to the path - width of @xmath77 . by backtracking how @xmath260 is placed in @xmath906 in our algorithm",
    ", we can label each node @xmath166 of @xmath1016 by a @xmath1032-trajectory @xmath1033 for some @xmath1032 and other necessary information satisfying the following .    *",
    "@xmath1034 if @xmath1035 , @xmath1036 , or @xmath1037 and @xmath1038 if @xmath1039 , @xmath1040 , @xmath1041 , or @xmath1042 for some node @xmath185 of @xmath92 .",
    "* if @xmath166 is a shrink node with a child @xmath1043 , then @xmath1044 . * if @xmath166 is a up node with a child @xmath1043 , then @xmath1045 and there is a lattice path @xmath1046 with diagonal steps as given in lemma  [ lem : comparison ] .",
    "then there is a sequence @xmath1047 of integers such that @xmath1046 goes through points @xmath1048 for all @xmath137 .",
    "this sequence @xmath1049 is also stored at @xmath166 . * if @xmath166 is a join node with two children @xmath1043 and @xmath1050 , then @xmath1051 for some lattice path @xmath1046 .",
    "this lattice path @xmath1046 is stored at the node @xmath166 . * if @xmath166 is a leaf node @xmath1029 for a leaf node @xmath185 of @xmath92 , then @xmath1052 * if @xmath166 is the root node of @xmath1016 , then @xmath1053 .",
    "we modify full - set@xmath905 so that whenever an operation is carried out , for every @xmath260 which is placed in @xmath907 , @xmath1003 , @xmath1054 , or @xmath1055 , a _ certificate _ for @xmath260 is stored so that later when we find @xmath1031 , we can construct the _ labeled composition tree _ @xmath1016 by backtracking .",
    "[ prop : timeorder ] the algorithm order in algorithm  [ alg : order ] correctly finds a linear layout of @xmath77 of width at most @xmath5 in time @xmath1056 when a labeled composition tree @xmath1016 obtained from a branch - decomposition @xmath91 of width at most @xmath184 and a @xmath1009-trajectory @xmath1031 are given .",
    "we sketch the proof for the correctness .",
    "a path - decomposition @xmath120 of @xmath77 of width at most @xmath5 is always equipped with an injection @xmath1057 .",
    "this injection @xmath1058 allows us to decode the linear layout of width at most @xmath5 by sorting @xmath77 according to @xmath1058 . if @xmath668 is the canonical @xmath71-trajectory of @xmath125 , then for each gap between @xmath268 and @xmath1059 , we may or may not have a subspace @xmath123 that is mapped to @xmath124 by @xmath1058 .",
    "in other words , for every strongly realizable @xmath71-trajectory @xmath1060 , we have a sequence @xmath1061 of ` blocks ' such that @xmath1062 is a partition of @xmath77 and @xmath1063 induced by the injection @xmath1058 . in general , for every realizable @xmath71-trajectory @xmath1060 , we still have a sequence @xmath1062 of blocks such that @xmath1062 is a partition of @xmath77 . here",
    "we consider @xmath819 as the set of subspaces in @xmath77 that is mapped by @xmath1058 to bags of a fixed path - decomposition that lies between @xmath268 and @xmath1059 .",
    "thus we can regard each realizable @xmath71-trajectory to be equipped with such an ordered partition of @xmath77 .",
    "for each @xmath260 in the full set , there is a realizable @xmath346 with @xmath640 and so we can also give such an ordered partition to @xmath260 .",
    "the only place where we mix two ordered partitions is at the join node of @xmath1016 and we have the complete description how to combine path - decompositions in the proof of lemma  [ lem : psumreal ] .",
    "( for a leaf @xmath166 with @xmath1064 and @xmath1065 , it does not matter where this subspace @xmath123 is placed in the linear layout and so we simply put it in the beginning of the linear layout . )",
    "now let us discuss the running time .",
    "each node @xmath166 of @xmath1016 is visited by @xmath1066 times because @xmath1067 is always ensured in printorder .",
    "if a node @xmath166 of @xmath1016 is neither a join node nor a shrink node , then @xmath166 is labeled by a compact @xmath1032-trajectory and @xmath1068 and therefore @xmath1069 by lemma  [ lem : lentraj ] .",
    "if @xmath166 is a join node with two children @xmath1043 and @xmath1050 , then @xmath1033 might not be compact , but @xmath1070 for a compact @xmath1071-trajectory @xmath1072 and a compact @xmath1073-trajectory @xmath1074 . since @xmath1075 and @xmath1076 , both @xmath1072 and @xmath1074 have length at most @xmath288 .",
    "then @xmath1033 has length at most @xmath1077 .",
    "if @xmath166 is a shrink node with a child @xmath1043 , then @xmath1044 and @xmath1072 is a @xmath1071-trajectory with @xmath1078 and so @xmath1079 .    in all cases",
    ", we deduce that @xmath1080 .",
    "thus the algorithm visits each node of @xmath1016 at most @xmath1081 times and @xmath1016 has @xmath1082 nodes and therefore the running time of this algorithm is bounded by @xmath1056 .",
    "the following theorem summarizes the procedure and the time complexity for an algorithm that solves the problem introduced at the beginning of section  [ sec : algorithm ] .",
    "[ thm : timecomplexity ] let @xmath5 , @xmath184 , and @xmath58 be integers and let @xmath7 be a fixed finite field .",
    "let @xmath130 be a subspace arrangement of subspaces of @xmath43 and @xmath91 be a branch - decomposition of @xmath77 of width at most @xmath184 .",
    "one can find in time @xmath1083 a linear layout of @xmath77 of width at most @xmath5 , or confirm that no such linear layout exists , where each @xmath61 is given by its spanning set of @xmath62 vectors and @xmath63 .",
    "we remark that the algorithm can output a linear layout of the minimum width if there is a linear layout of width at most @xmath5 , by choosing a @xmath1009-trajectory of the minimum width in the full set .",
    "first , apply the preprocessing steps discussed in subsection  [ subsec : preprocess ] using lemmas  [ lem : rowreduction ] and [ lem : columnreduction ] in time @xmath1084 in order to simplify the input . if @xmath1085 after the preprocessing , then the path - width of @xmath77 is @xmath89 and so we can output an arbitrary linear layout if @xmath1086 . thus we may assume that @xmath133 , both path - width and branch - width are positive , and so we may assume that @xmath839 and @xmath301 .",
    "then we run an algorithm in proposition  [ prop : preprocess - alg ] in time @xmath769 so that we are ready to run algorithm  [ alg : fullset ] .    by proposition  [ prop : fsruntime ] ,",
    "algorithm  [ alg : fullset ] can be executed in @xmath963 steps .",
    "if algorithm  [ alg : fullset ] outputs an empty full set for the root node , then no linear layout of width at most @xmath5 exists . if algorithm  [ alg : fullset ] outputs a nonempty full set for the root node , then we construct a linear layout of width at most @xmath5 using algorithm  [ alg : order ] , which takes time @xmath1087 by proposition  [ prop : timeorder ] .",
    "therefore , the total time complexity is @xmath1088 .",
    "up to the previous section , we assumed that we are given a branch - decomposition of width at most @xmath184 in which algorithm is based on . but how do we obtain such a branch - decomposition in the beginning ?",
    "we present two methods to accomplish this goal .",
    "our first method is to use our algorithm iteratively .",
    "this strategy is sometimes called iterative compression ; for a subspace arrangement @xmath1089 and @xmath1090 , we will iteratively apply the algorithm in section  [ sec : algorithm ] to a subset @xmath1091 and then modify the output to obtain a branch - decomposition of small width of @xmath1092 , which is need for the next step .",
    "this requires to run the algorithm in section  [ sec : algorithm ] @xmath1082 times and has an advantage of making this paper self - contained .    for this approach ,",
    "we need the following simple lemma , which we omit its trivial proof .",
    "a tree is a _ caterpillar tree _ if it has a path @xmath119 such that every vertex is either a vertex in @xmath119 or is adjacent to some vertex in @xmath119 .",
    "[ lem : compression ] let @xmath1089 be a subspace arrangement over @xmath7 with @xmath1093 and @xmath1094 for all @xmath129 .",
    "if @xmath1095 is a linear layout of width at most @xmath5 , then @xmath2 is a linear layout of width at most @xmath1096 .",
    "we argue that for a subspace arrangement @xmath1089 of subspaces of @xmath43 , in time @xmath1097 we can either find a linear layout of width at most @xmath5 or confirm that no such linear layout exists , where each @xmath61 is given by its spanning set of @xmath62 vectors and @xmath63 . given a subspace arrangement @xmath1089 of subspaces of @xmath43 , we run the preprocessing of subsection  [ subsec : preprocess ] . by proposition  [ prop : pwbw ] ,",
    "the branch - width of @xmath77 is at most @xmath110 and so after the preprocessing , we can assume that @xmath1094 for all @xmath129 as in subsection  [ subsec : preprocess ] .",
    "note that the preprocessing takes time @xmath1098 .",
    "now we iterate over @xmath1099 and we may assume that we are given a linear layout of width at most @xmath5 for a subspace arrangement @xmath1100 . if this is not the case , we declare that @xmath77 allows no linear layout of width at most @xmath5 and terminate . for the base case",
    "when @xmath1101 , we test if @xmath1102 and obtain a linear layout @xmath1103 of width at most @xmath5 if this holds . by lemma  [ lem : compression ] , we can construct a linear layout of width at most @xmath1096 for a subspace arrangement @xmath1104 .",
    "this can be converted into a branch decomposition @xmath91 of @xmath1104 whose width is at most @xmath1096 by taking a subcubic caterpillar tree @xmath92 whose leaves are mapped to @xmath1105 following the order of the linear layout . given @xmath91 of @xmath1104 whose width is at most @xmath1096 , we first prepare bases of the boundary spaces by running the algorithm of subsection  [ subsec : prepare ] .",
    "this takes @xmath1106 .",
    "then , we run algorithm  [ alg : fullset ] and algorithm  [ alg : order ] to produce a linear layout of width at most @xmath5 if one exists .",
    "the second step can be done in time @xmath1107 by propositions  [ prop : fsruntime ] and  [ prop : timeorder ] .",
    "as we iterate this procedure for @xmath1108 , the running time follows .",
    "one can relate a subspace arrangement @xmath77 with a partitioned matroid in hlinn and oum  @xcite .",
    "a _ partitioned matroid _ is a pair @xmath1109 of a matroid @xmath32 and a partition @xmath1110 of @xmath1111 ; the precise definition of matroids will be introduced in subsection  [ subsec : matroid ] .",
    "hlinn and oum  @xcite defined the branch - width of a partitioned matroid in order to devise an algorithm to construct a branch - decomposition of an @xmath7-represented matroid of width at most @xmath5 if it exists . indeed ,",
    "if @xmath1109 is the partitioned matroid and @xmath32 is @xmath7-represented , then we can construct a subspace arrangement @xmath77 by taking the span of the vectors in @xmath119 for each part @xmath1112 as an element of @xmath77 .",
    "one can also convert @xmath77 into a partitioned matroid easily by taking a basis for each @xmath123 .",
    "thus the problem of computing branch - width of @xmath1109 is equivalent to that of branch - width of @xmath77 .",
    "thus , we can identify @xmath7-represented partitioned matroids with subspace arrangements over @xmath7 .",
    "then an algorithm by hlinn  and oum for partitioned matroids naturally translates for a subspace arrangement .",
    "[ thm : decomposition2 ] let @xmath7 be a fixed finite field .",
    "there is an @xmath1113-time algorithm that , for an input subspace arrangement @xmath1089 of subspaces of @xmath43 with @xmath1114 and an integer @xmath184 , either    * outputs a branch - decomposition of @xmath77 of width at most @xmath184 * or confirms the branch - width of @xmath77 is larger than @xmath184 .",
    "proposition  [ prop : pwbw ] states that if the path - width of @xmath77 is at most @xmath5 , then the branch - width of @xmath77 is at most @xmath110 .",
    "thus by applying theorem  [ thm : decomposition2 ] for @xmath1115 , we obtain a branch - decomposition of width at most @xmath110 unless @xmath77 has path - width larger than @xmath5 . by running the algorithm in section  [ sec : algorithm ] once with this branch - decomposition",
    ", we deduce an @xmath41-time algorithm to find a linear layout of width at most @xmath5 if it exists for an input subspace arrangement @xmath1089 over a fixed finite field @xmath7 .",
    "( note that after the preprocessing in subsection  [ subsec : preprocess ] , @xmath1116 and therefore @xmath1117 . )",
    "this completes the proof of the following theorem .",
    "[ thm : subspace ] let @xmath7 be a fixed finite field . given an input @xmath0 subspaces of @xmath43 for some @xmath58 and a parameter @xmath5 , in time @xmath59 , we can either find a linear layout @xmath2 of the subspaces such that @xmath60 for all @xmath46 , or confirm that no such linear layout exists , where each @xmath61 is given by its spanning set of @xmath62 vectors and @xmath63 .    this approach gives a better asymptotic running time in terms of @xmath0 , but the hidden constant as a function of @xmath5 is bigger here .",
    "the algorithm in theorem  [ thm : decomposition2 ] is based on the fact that forbidden minors for matroid branch - width at most @xmath5 has at most @xmath1118 elements , proved by geelen , gerards , robertson and whittle  @xcite .",
    "is one bigger than ours and therefore their bound @xmath1119 is translated into our bound @xmath1118 .",
    "] though this bound allows the algorithm to search all forbidden @xmath7-representable minors in `` constant '' time , it would take extremely long , as a function of @xmath5 , to search all of them because there are too many @xmath7-representable matroids to consider . thus the approach in subsection  [ subsec : compression ]",
    "would be a lot easier to implement and more practical , though it gives an algorithm that runs in time @xmath1120 .",
    "so far our paper focused on path - width of a subspace arrangement and presented the algorithm in a self - contained manner . in this section",
    "we will discuss how to avoid using theorem  [ thm : decomposition2 ] of hlinn and oum by adapting a simpler algorithm of hlinn while keeping the running time to be still @xmath41 for the path - width of @xmath0-element matroids .",
    "we will first present the definition of path - width and branch - width in its full generality so that we can use in the next section as well .",
    "an integer - valued function @xmath39 on the set @xmath1121 of all subsets of a finite set @xmath81 is a _ connectivity function _ on @xmath81 if    1 .",
    "_ symmetric _ ; @xmath1122 for all @xmath1123 , 2 .",
    "_ submodular _ ; @xmath1124 for all @xmath1125 , 3 .",
    "@xmath1126 .",
    "let @xmath39 be a connectivity function on @xmath81 .",
    "a _ linear layout _ of @xmath81 is a permutation @xmath1127 of @xmath81 .",
    "the _ width _ of a linear layout @xmath1127 of @xmath81 with respect to @xmath39 is @xmath1128 .",
    "the _ path - width _ of @xmath39 is the minimum width of all possible linear layouts of @xmath81 .",
    "( if @xmath1129 , then the path - width is @xmath89 . )",
    "a _ branch - decomposition _ of @xmath81 is a pair @xmath841 of a subcubic tree @xmath92 and a bijection @xmath93 from all leaves of @xmath92 to @xmath81 .",
    "every edge @xmath94 of @xmath92 induces a partition @xmath95 of @xmath81 given by components of @xmath96 and @xmath93 .",
    "the _ width _ of @xmath94 is defined as @xmath1130 .",
    "the _ width _ of a branch - decomposition @xmath91 is the maximum width of all edges of @xmath92 .",
    "the _ branch - width _ of @xmath39 is the minimum width of all possible branch - decompositions of @xmath81 .",
    "( if @xmath1129 , then there is no branch - decomposition and we say @xmath39 has branch - width @xmath89 . )      a _ matroid _",
    "@xmath32 is a pair @xmath1131 of a finite set @xmath81 and a set @xmath1132 of subsets of @xmath81 satisfying the following .    *",
    "the empty set is in @xmath1132 . * if @xmath1133 , then every subset of @xmath72 is contained in @xmath1132 . *",
    "if @xmath1134 and @xmath1135 , then there exists an element @xmath1136 such that @xmath1137 .",
    "we write @xmath1138 . for a subset @xmath72 of @xmath81 ,",
    "the _ rank _",
    "@xmath1139 of @xmath72 is the maximum size of an independent subset of @xmath72 .",
    "let @xmath1140 for all subsets @xmath72 of @xmath81 .",
    "it is well known that @xmath1141 is a connectivity function on @xmath81 .",
    "the _ path - width _ of a matroid @xmath32 is the path - width of @xmath1141 and a _ path - decomposition _ of width @xmath5 is a linear layout of @xmath1111 whose width with respect to @xmath1141 is @xmath5 . similarly _ branch - width _ and _ branch - decompositions _ of a matroid @xmath32 are branch - width and branch - decompositions , respectively , of @xmath1141 .    for a matrix @xmath82 over a field @xmath7 , let @xmath1142 be the set of all column vectors of @xmath82 and @xmath1143 be the set of all linearly independent subsets of @xmath1142 . then @xmath1144 is a matroid , called the _",
    "vector matroid_. if a matroid @xmath32 admits a matrix @xmath82 over @xmath7 such that @xmath1145 , then we say @xmath32 is _",
    "@xmath7-representable _ or @xmath32 is _ representable _ over @xmath7 and such a matrix @xmath82 is called an _ @xmath7-representation _ of @xmath32 or a _ matrix representation _ of @xmath32 over @xmath7 .",
    "a matroid is _ binary _ if it is representable over the field of two elements . when @xmath1145 , then it is easy to observe @xmath1146    we remark that in general we can not hope to find an @xmath7-representation of a matroid efficiently , even if we assume such a representation exists  @xcite , unless @xmath1147 .",
    "so we will need that a representation of a matroid , or equivalently a multiset of vectors , is given as an input .",
    "let us say that a matroid is _",
    "@xmath7-represented _ if it is given with an @xmath7-representation .",
    "recall that we give an algorithm that , for a parameter @xmath5 and an input subspace arrangement @xmath77 with its branch - decomposition of small width , decides in time @xmath41 whether its path - width at most @xmath5 and if so , outputs a path - decomposition of width at most @xmath5 . in subsection",
    "[ subsec : exact ] we use an algorithm by hlinn and oum in theorem  [ thm : decomposition2 ] to obtain a branch - decomposition of bounded width",
    ". however , that algorithm by hlinn and oum @xcite uses the huge but finite list of forbidden @xmath7-representable minors for the class of matroids of branch - width at most @xmath5 and so in practice it would be too slow to implement it .",
    "the alternative in subsection  [ subsec : compression ] is more direct and implementable but slower , only giving the time @xmath1148 .    for the path - width of matroids , we can instead use more constructive @xmath41-time algorithm by hlinn that does not depend on the existence of finitely many forbidden minors .",
    "[ thm : decomposition ] let @xmath5 be a fixed constant , @xmath7 be a finite field .",
    "let @xmath77 be a subspace arrangement of @xmath0 @xmath6-dimensional subspaces of @xmath43 with @xmath44 .",
    "there exists an @xmath41-time algorithm that , for a given @xmath77 , either    * outputs a branch - decomposition of @xmath77 of width at most @xmath1096 * or confirms the branch - width of @xmath77 is larger than @xmath5 .",
    "we associate a matroid @xmath32 represented by vectors @xmath42 in a vector space over a finite field @xmath7 with a subspace arrangement @xmath1149 .",
    "then a linear layout of @xmath77 of width @xmath5 is precisely a path - decomposition of @xmath32 having width @xmath5 .",
    "this relation allows us to deduce the following .",
    "in addition , we do not need to apply the preprocessing step discussed in subsection  [ subsec : preprocess ] , as long as we remove all loops and coloops from @xmath32 .",
    "[ thm : mainthm ] let @xmath7 be a fixed finite field .",
    "there is an algorithm that , for an input @xmath0-element matroid given with its matrix representation over @xmath7 having at most @xmath0 rows and a parameter @xmath5 , decides in time @xmath41 whether its path - width is at most @xmath5 and if so , outputs a path - decomposition of width at most @xmath5 .",
    "as it is discussed in section  [ sec : intro ] , our full theorem on subspace arrangements provides a nice corollary to linear rank - width of graphs when applied to subspaces of dimension at most two . as linear rank - width",
    "is closely related to linear clique - width , this will also give a fixed - parameter tractable approximation algorithm for linear clique - width as well .",
    "we will review the definitions and discuss how to obtain the desired results from theorem  [ thm : subspace ] .",
    "let @xmath1150 be a graph and @xmath1151 be its adjacency matrix , which is the @xmath1152 matrix over the binary field whose @xmath1153-entry is @xmath6 if and only if @xmath4 and @xmath137 are adjacent in @xmath68 .",
    "for an @xmath1154 matrix @xmath1155 and subsets @xmath1156 and @xmath1157 , let @xmath1158 $ ] be the @xmath1159 submatrix @xmath1160 of @xmath32 .",
    "the _ cut - rank function _ of @xmath68 , denoted by @xmath1161 , is defined to be @xmath1162)\\ ] ] for all subsets @xmath74 of @xmath1163 .",
    "oum and seymour  @xcite showed that the cut - rank function is a connectivity function on @xmath1163 ( which is defined in subsection  [ subsec : conn ] ) . in subsection  [ subsec : conn ] , we discussed how to define path - width and branch - width of a connectivity function .",
    "we define _ linear rank - width _ and _ rank - width _ of a graph @xmath68 to be path - width and branch - width , respectively , of the cut - rank function @xmath1161 . for a graph @xmath68 , a _ linear rank - decomposition _ of width",
    "@xmath5 is a linear layout of @xmath1163 whose width with respect to @xmath1161 is @xmath5 . for a graph @xmath68 , a _",
    "rank - decomposition _ of width @xmath5 is a branch - decomposition of @xmath1161 having width @xmath5 .",
    "we now explain how to relate the linear rank - width of a graph with the path - width of a subspace arrangement .",
    "let @xmath68 be a graph with @xmath1164 .",
    "let @xmath1165 be the standard basis of @xmath1166 .",
    "each vertex @xmath4 is associated with a vector @xmath1167 such that @xmath1168 let @xmath1169 for each @xmath4 .",
    "let @xmath1170 be _ the subspace arrangement associated with",
    "_ @xmath68 .",
    "the following lemma is equivalent to ( * ? ? ?",
    "* lemma 7.1 ) and easily implies that the path - width of @xmath1171 is precisely twice the linear rank - width of @xmath68 .",
    "[ lem : lrw ] for @xmath1172 , @xmath1173 .",
    "observe that @xmath1174 .",
    "since @xmath1175)$ ] and @xmath1176)$ ] , the conclusion follows .",
    "therefore , a linear rank - decomposition of width @xmath5 of a graph @xmath68 precisely corresponds to a linear layout of @xmath1171 of width @xmath110 and a rank - decomposition of width @xmath5 of a graph @xmath68 is exactly a branch - decomposition of width @xmath110 of @xmath1171 .      in order to run the algorithm in theorem  [ thm : subspace ]",
    ", we need a branch - decomposition of small width to be given . instead of using methods in section  [ sec : approx ] , we may use the following algorithm by oum  @xcite for rank - width .    for fixed @xmath5",
    ", there is an @xmath41-algorithm that , for an input @xmath0-vertex graph @xmath68 , either obtains a rank - decomposition of @xmath68 of width at most @xmath1177 or confirms that the rank - width of @xmath68 is larger than  @xmath5 .",
    "so , if the input graph has rank - width at most @xmath5 , then this gives a branch - decomposition of @xmath1171 having width at most @xmath1178 .",
    "we then apply the algorithm proven in theorem  [ thm : subspace ] to deduce the following .",
    "there is no need to apply the preprocessing algorithm discussed in subsection  [ subsec : preprocess ] , as long as we remove isolated vertices of @xmath68 .",
    "[ thm : lrw ] there is an algorithm that , for an input @xmath0-vertex graph and a parameter @xmath5 , decides in time @xmath41 whether its linear rank - width is at most @xmath5 and if so , outputs a linear rank - decomposition of width at most  @xmath5 .      for an integer @xmath5 , a _",
    "@xmath5-expression _ is an algebraic expression that consists of the following operations on graphs whose vertices are labeled by integers in @xmath1179 :    * @xmath1180 ( a graph with a single vertex labeled by @xmath1181 ) . * @xmath1182 ( the disjoint union of two vertex - labeled graphs @xmath1183 and @xmath1184 ) . *",
    "@xmath1185 with @xmath1186 ( adding an edge from each pair of a vertex of label @xmath4 and a vertex of label @xmath137 ) . *",
    "@xmath1187 ( relabeling all vertices of label @xmath4 to label @xmath137 ) .",
    "a @xmath5-expression is _ linear _ if one operand of each disjoint union @xmath1188 has at most one vertex .",
    "the _ clique - width _ of a graph @xmath68 is the minimum @xmath5 such that there is a @xmath5-expression representing @xmath68 after ignoring labels of the vertices @xcite .",
    "similarly the _ linear clique - width _ of a graph @xmath68 is defined as the minimum @xmath5 such that there exists a linear @xmath5-expression representing @xmath68 after ignoring labels of the vertices .    by modifying the proof of oum and seymour  ( * ? ? ?",
    "* proposition 6.3 ) , it is straightforward to prove the following .",
    "we omit its easy proof .",
    "if @xmath68 has linear rank - width @xmath5 , then the linear clique - width of @xmath68 is at least @xmath5 and at most @xmath70 .",
    "this relation gives an algorithm that makes an approximate linear expression of an input graph , which was unknown .",
    "[ cor : cwd ] there is an @xmath41-time algorithm that , for an input @xmath0-vertex graph @xmath68 and a parameter @xmath5 , finds a linear @xmath69-expression of @xmath68 confirming that @xmath68 has linear clique - width at most @xmath70 or certifies that @xmath68 has linear clique - width larger than @xmath5 .",
    "in this section , we present a polynomial - time algorithm to compute path - width with an optimal layout for an input subspace arrangement of branch - width at most @xmath184 for a fixed @xmath184 .",
    "our idea is similar to the idea of bodlaender and kloks  @xcite who showed a polynomial - time algorithm to compute path - width of graphs of bounded tree - width .",
    "this algorithm is possible because our algorithm in section  [ sec : algorithm ] has the running time @xmath1189 for some @xmath40 depending only on the underlying field @xmath7 and @xmath184 . therefore if we can make sure that @xmath1190 , then we can run the algorithm with @xmath1191 and deduce the exact path - width from the full set .    the following proposition shows why the path - width is at most @xmath1192 .",
    "its proof follows proofs of a theorem of kwon  @xcite ( also in adler , kant , and kwon  @xcite ) on an inequality between rank - width and linear rank - width of graphs and a theorem of bodlaender , gilbert , hafsteinsson , and kloks  @xcite on an inequality between tree - width and path - width of graphs .",
    "[ prop : logn ] let @xmath130 be a subspace arrangement . if the branch - width of @xmath77 is @xmath5 , then the path - width of @xmath77 is at most @xmath1193 .",
    "let @xmath91 be a branch - decomposition of width @xmath5 . by picking an edge @xmath94 of @xmath92 and subdividing @xmath94 to add a root @xmath58 of degree @xmath64",
    ", we may make @xmath92 a rooted binary tree .",
    "for each internal node @xmath185 of @xmath92 , let @xmath1194 be the subset of @xmath77 that corresponds to all leaves below the left child of @xmath185 by @xmath93 and let @xmath187 the subset of @xmath77 that corresponds to all leaves below the right child of @xmath185 by @xmath93 .",
    "we may assume that @xmath1195 for all internal nodes @xmath185 of @xmath92 .    by permuting labels",
    ", we may assume that for all @xmath1196 , if @xmath185 is the common ancestor of @xmath61 and @xmath1197 with the maximum distance from @xmath58 , then @xmath61 is a descendant of the left child of @xmath185 and @xmath1197 is a descendant of the right child of @xmath185 .",
    "we claim that this linear layout @xmath2 has width at most @xmath1193 .    to see this , we need to prove that @xmath1198 for each @xmath1199 .",
    "let @xmath119 be the unique path @xmath1200 in @xmath92 from @xmath58 to a leaf @xmath1201 with @xmath1202",
    ".    now observe that @xmath1203 and therefore @xmath1204 .",
    "thus if @xmath1205 is the right child of @xmath1206 , then @xmath1207 if @xmath1205 is the left child of @xmath1206 , then trivially @xmath1208 note that @xmath1209 because @xmath1210 .",
    "let @xmath1211 .",
    "then @xmath1212 this implies that @xmath1213 .",
    "let @xmath1214 . then by the definition of @xmath119 , @xmath1215 .",
    "since @xmath1216 and @xmath1217 , by proposition  [ prop : submodular ] , we deduce that @xmath1218 .",
    "this completes the proof .    by using this inequality",
    ", we can prove the following main theorem .",
    "[ thm : exact ] let @xmath184 be a constant and @xmath7 be a fixed finite field .",
    "there exists a polynomial - time algorithm that computes the path - width of a given subspace arrangement @xmath77 over @xmath7 if the branch - width of @xmath77 is at most @xmath184 .",
    "furthermore , we can find an optimal linear layout of  @xmath77 .",
    "let @xmath130 .",
    "since the branch - width of @xmath77 is at most @xmath184 , using an algorithm by hlinn and oum in theorem  [ thm : decomposition2 ] , we obtain a branch - decomposition of @xmath77 of width at most @xmath184 in polynomial time .",
    "we will run an algorithm in theorem  [ thm : timecomplexity ] for @xmath1219 whose time complexity is @xmath1220 .",
    "this is a polynomial in the size of the input .    by proposition  [ prop : logn ] ,",
    "the path - width of @xmath77 is at most @xmath1221 . and",
    "therefore the full set @xmath906 is non - empty .",
    "find a @xmath1009-trajectory @xmath1031 with minimum width @xmath196 .",
    "then @xmath196 is the path - width of @xmath77 and we can find a corresponding linear layout by using the algorithm in algorithm  [ alg : order ] .      computing the path - width of a given @xmath7-represented matroid is np - hard , shown by kashyap  @xcite .",
    "however , if we restrict our input matroid to a small class , then it may be possible to compute path - width in polynomial time .",
    "for instance , koutsonas , thilikos , and yamazaki  @xcite presented a polynomial - time algorithm to compute path - width exactly for the cycle matroids of outerplanar graphs .",
    "we remark that all cycle matroids of outerplanar graphs have very small branch - width .",
    "theorem  [ thm : exact ] implies that there exists a polynomial - time algorithm to compute path - width with an optimal linear layout if the input matroid has bounded branch - width .",
    "let @xmath184 be a constant and @xmath7 be a fixed finite field .",
    "we have a polynomial - time algorithm that computes the path - width of an @xmath7-represented matroid @xmath32 of branch - width at most @xmath184 .",
    "furthermore , it outputs an optimal linear layout of @xmath32 .",
    "computing the linear rank - width of a given graph is also np - hard by the result of kashyap  @xcite and oum  @xcite .",
    "adler , kant , and kwon  @xcite announced that the linear rank - width of graphs of rank - width at most @xmath6 can be computed in polynomial time .",
    "they also asked the following question :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ can we compute in polynomial time the linear rank - width of graphs of rank - width at most @xmath5 , for fixed @xmath1222 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we answer this question in the affirmative by deducing corollary  [ coro : exactlrw ] from theorem  [ thm : exact ] by using the method in section  [ sec : linearrankwidth ] .",
    "[ coro : exactlrw ] let @xmath184 be a constant .",
    "we have a polynomial - time algorithm that computes the linear rank - width of graphs of rank - width at most @xmath184 .",
    "furthermore , it outputs an optimal linear rank - decomposition of @xmath68 .",
    "can we decide whether the path - width of an input matroid is at most @xmath5 for a fixed @xmath5 when the input matroid is general ?",
    "our algorithm only works if the input matroid is @xmath7-represented .",
    "first we have to clarify our question .",
    "binary strings of length @xmath1223 can not represent all @xmath0-element matroids , because there are too many @xmath0-element matroids  @xcite . to study algorithmic problems on general matroids",
    ", typically we assume that a matroid is given by an independence oracle , which answers whether a given set is independent in the matroid in the unit time .",
    "the algorithm by nagamochi  @xcite can still decide in time @xmath37 for some @xmath40 whether the path - width of an input matroid is at most @xmath5 , even if the input matroid is given by its independence oracle .",
    "however , the exponent of @xmath0 depends on @xmath5 and so his algorithm is not fixed - parameter tractable when @xmath5 is a parameter .",
    "does there exist , for each fixed @xmath5 , an algorithm that runs in time @xmath1224 for an input @xmath0-element matroid given with its independence oracle whether its path - width is at most @xmath5 for some  @xmath40 ?",
    "does there exist , for each fixed @xmath5 , an algorithm that runs in time @xmath1224 for an input @xmath0-element matroid given with its independence oracle and confirms one of the following three outcomes for some  @xmath40 ?",
    "one may attempt to construct a binary representation of the input matroid and then apply theorem  [ thm : mainthm ] .",
    "however , no polynomial - time algorithm can verify whether an input matroid given by its independence oracle is binary @xcite and so that strategy is not going to work .",
    "let @xmath32 be the input matroid . by assuming the input matroid is binary",
    ", we can construct a potential binary representation , representing a binary matroid @xmath757 .",
    "this representation can be constructed in time @xmath53 by picking a base and finding fundamental circuits for each element outside of the chosen base .",
    "the problem is that we do not yet know whether @xmath1225 .",
    "but if @xmath32 is binary , then @xmath1225 .",
    "we apply our algorithm in theorem [ thm : mainthm ] with @xmath757 to decide whether the path - width of @xmath757 is at most @xmath5 .",
    "if the path - width of @xmath757 is at most @xmath5 , then we also obtain a linear layout of @xmath757 having width at most @xmath5 .",
    "it is now easy to verify whether this linear layout also has width at most @xmath5 in @xmath32 and if not , then @xmath1226 and so @xmath32 is not binary .",
    "h.  l. bodlaender and d.  m. thilikos .",
    "computing small search numbers in linear time . in r.",
    "downey , m.  fellows , and f.  dehne , editors , _ parameterized and exact computation .",
    "first international workshop , iwpec 2004 , bergen , norway , september 14 - 17 , 2004 .",
    "_ , volume 3162 of _ lecture notes in comput .",
    "_ , pages 3748 .",
    "springer , 2004 .",
    "j.  a. ellis , i.  h. sudborough , and j.  s. turner .",
    "graph separation and search number . in _ twenty - first annual allerton conference on communication , control , and computing ( monticello , ill . , 1983 ) _ , pages 224233 .",
    "illinois , urbana , il , 1983 .",
    "j.  jeong , e.  j. kim , and s.  oum .",
    "constructive algorithm for path - width of matroids . in _ proceedings of the twenty - seventh annual acm - siam symposium on discrete algorithms ( soda 2016 ) _ , pages 16951704 , philadelphia , pa , usa , 2016 . society for industrial and applied mathematics .",
    "h.  nagamochi .",
    "linear layouts in submodular systems . in k .-",
    "chao , t .- s .",
    "hsu , and d .-",
    "lee , editors , _",
    "isaac 12 _ , volume 7676 of _ lecture notes in comput .",
    "_ , pages 475484 .",
    "springer berlin heidelberg , 2012 ."
  ],
  "abstract_text": [
    "<S> given @xmath0 subspaces of a finite - dimensional vector space over a fixed finite field @xmath1 , we wish to find a linear layout @xmath2 of the subspaces such that @xmath3 for all @xmath4 ; such a linear layout is said to have width at most @xmath5 . when restricted to @xmath6-dimensional subspaces , this problem is equivalent to computing the trellis - width ( or minimum trellis state - complexity ) of a linear code in coding theory and computing the path - width of an @xmath1-represented matroid in matroid theory . </S>",
    "<S> we present a fixed - parameter tractable algorithm to construct a linear layout of width at most @xmath5 , if it exists , for input subspaces of a finite - dimensional vector space over @xmath1 . as corollaries , </S>",
    "<S> we obtain a fixed - parameter tractable algorithm to produce a path - decomposition of width at most @xmath5 for an input @xmath1-represented matroid of path - width at most @xmath5 , and a fixed - parameter tractable algorithm to find a linear rank - decomposition of width at most @xmath5 for an input graph of linear rank - width at most @xmath5 . in both corollaries , </S>",
    "<S> no such algorithms were known previously . </S>",
    "<S> our approach is based on dynamic programming combined with the idea developed by bodlaender and kloks ( 1996 ) for their work on path - width and tree - width of graphs .    </S>",
    "<S> it was previously known that a fixed - parameter tractable algorithm exists for the decision version of the problem for matroid path - width ; a theorem by geelen , gerards , and whittle  ( 2002 ) implies that for each fixed finite field @xmath1 , there are finitely many forbidden @xmath1-representable minors for the class of matroids of path - width at most @xmath5 . </S>",
    "<S> an algorithm by hlinn ( 2006 ) can detect a minor in an input @xmath1-represented matroid of bounded branch - width . </S>",
    "<S> however , this indirect approach would not produce an actual path - decomposition . </S>",
    "<S> our algorithm is the first one to construct such a path - decomposition and does not depend on the finiteness of forbidden minors . </S>"
  ]
}