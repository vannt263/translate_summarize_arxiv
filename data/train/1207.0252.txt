{
  "article_text": [
    "the impact of randomization on computation is one of the most central questions in computer science . in particular , in the context of distributed computing , the question of whether randomization helps in improving locality for construction problems has been studied extensively . while most of these studies were problem - specific , several attempts have been made for tackling this question from a more general and unified perspective .",
    "for example , naor and stockmeyer  @xcite focus on a class of problems called lcl ( essentially a subclass of the class @xmath26 discussed below ) , and show that if there exists a randomized algorithm that constructs a solution for a problem in lcl in a constant number of rounds , then there is also a constant time deterministic algorithm constructing a solution for that problem .",
    "recently , this question has been studied in the context of _ local decision _ , where one aims at deciding locally whether a given global input instance belongs to some specified language  @xcite .",
    "the localities of deterministic algorithms and randomized monte carlo algorithms are compared in  @xcite , in the @xmath23 model ( cf .",
    "one of the main results of  @xcite is that randomization does not help for locally deciding _ hereditary _ languages if the success probability is beyond a certain guarantee threshold .",
    "more specifically , a _",
    "@xmath0-decider _ for a language @xmath1 is a distributed randomized monte carlo algorithm that _ accepts _ instances in @xmath1 with probability at least @xmath2 and _ rejects _ instances outside of @xmath1 with probability at least @xmath3 .",
    "it was shown in  @xcite that every hereditary language that can be decided in @xmath4 rounds by a @xmath0-decider , where @xmath5 , can actually be decided _ deterministically _ in @xmath6 rounds . on the other hand",
    ", @xcite showed that the aforementioned threshold is sharp , at least when hereditary languages are concerned . in particular , for every @xmath2 and @xmath3 , where @xmath7 , there exists an heredirtary language that can not be decided deterministically in @xmath27 rounds , but can be decided in zero number of rounds by a @xmath0-decider .    in one of our results we provide evidence supporting the conjecture that the above statement holds for all distributed languages and not only for hereditary ones .",
    "this is achieved by considering the restricted case of path topologies .",
    "in addition , we present a more refined analysis for the family of languages that can be decided randomly but not deterministically .",
    "that is , we focus on the family of languages that can be decided locally by a @xmath0-decider , where @xmath7 , and introduce an infinite hierarchy of classes within this family , characterized by the specific relationships between the parameters @xmath2 and @xmath3 .",
    "as we shall see , our results imply that the distributed computing setting contrasts significantly with the sequential one as far as randomization is concerned .",
    "indeed , we prove that in some cases , the ability to increase the success probability for deciding distributed languages is very limited .",
    "we consider the @xmath23 model ( cf .",
    "@xcite ) , which is a standard distributed computing model capturing the essence of spatial locality . in this model",
    ", processors are woken up simultaneously , and computation proceeds in fault - free synchronous rounds during which every processor exchanges messages of unlimited size with its neighbors , and performs arbitrary computations on its data .",
    "it is important to stress that all the algorithmic constructions that we employ in our positive results use messages of constant size ( some of which do not use any communication at all ) .",
    "hence , all our results apply not only to the @xmath23 model of computation but also to more restricted models , for example , the @xmath24 model model is similar to the @xmath23 model , except that the message size is assumed to be bounded by at most @xmath28 bits ( for more details , see  @xcite ) . ] , where @xmath25 .",
    "a distributed algorithm @xmath29 that runs on a graph @xmath30 operates separately on each connected component of @xmath30 , and nodes of a component @xmath31 of @xmath30 can not distinguish the underlying graph @xmath30 from @xmath31 .",
    "for this reason , we consider connected graphs only .",
    "we focus on _ distributed decision tasks_. such a task is characterized by a finite or infinite set @xmath32 of symbols ( e.g. , @xmath33 , or @xmath34 ) , and by a _ distributed language _ @xmath1 defined on this set of symbols ( see below ) .",
    "an _ instance _ of a distributed decision task is a pair @xmath35 where @xmath30 is an @xmath36-node connected graph , and @xmath37 , that is , every node @xmath38 is assigned as its _ local input _ a value @xmath39 .",
    "( in some cases , the local input of every node is empty , i.e. , @xmath40 , where @xmath41 denotes the empty binary string . )",
    "we define a _ distributed language _ as a decidable collection @xmath1 of instances . in the context of distributed computing ,",
    "each processor must produce a boolean output , and the decision is defined by the conjunction of the processors outputs , i.e. , if the instance belongs to the language , then all processors must output `` yes '' , and otherwise , at least one processor must output `` no '' . formally , for a distributed language @xmath1 , we say that a distributed algorithm @xmath29 _ decides _",
    "@xmath1 if and only if for every instance @xmath35 and id - assignment @xmath42 , every node @xmath43 of @xmath30 eventually terminates and produces an output denoted @xmath44 , which is either or , satisfying the following decision rules :    if @xmath45 then @xmath46 for every node @xmath38  ;    if @xmath47 then @xmath48 for at least one node @xmath38  .    observe that decision problems provide a natural framework for tackling fault - tolerance : the processors have to collectively check whether the network is fault - free , and a node detecting a fault raises an alarm .",
    "in fact , many natural problems can be phrased as decision problems , for example :  is the network planar ? \" or `` is there a unique leader in the network ? '' .",
    "moreover , decision problems occur naturally when one aims at checking the validity of the output of a computational task , such as  is the produced coloring legal ? \" , or  is the constructed subgraph an mst ? \" .",
    "the class of decision problems that can be solved in at most @xmath4 communication rounds is denoted by @xmath49 , for _ local decision_. more precisely , let @xmath4 be a function of triplets @xmath50 , where @xmath42 denotes the identity assignment to the nodes of @xmath30 . then @xmath49 is the class of all distributed languages that can be decided by a distributed algorithm that runs in at most @xmath4 communication rounds .",
    "the randomized ( monte carlo 2-sided error ) version of the class @xmath49 is denoted @xmath51 , which stands for _ bounded - error probabilistic local decision _ , and provides an analog of bpp for distributed computing , where @xmath2 and @xmath3 respectively denote the yes - error and the no - error guarantees .",
    "more precisely , a _",
    "randomized _ distributed algorithm is a distributed algorithm @xmath29 that enables every node @xmath43 , at any round @xmath52 during its execution , to generate a certain number of random bits . for constants",
    "@xmath53 $ ] , we say that a randomized distributed algorithm @xmath29 is a _",
    "@xmath0-decider _ for @xmath1 , or , that it decides @xmath1 with success probability @xmath2 and success probability @xmath3 , if and only if for every instance @xmath35 and id - assignment @xmath42 , every node of @xmath30 eventually terminates and outputs or , and the following properties are satisfied :    if @xmath45 then @xmath54 , + @xmath55 \\ge p$ ]  ;    if @xmath47 then @xmath56 , + @xmath57 \\ge q$ ]  .",
    "the probabilities in the above definition are taken over all possible coin tosses performed by the nodes .",
    "the running time of a @xmath0-decider executed on a node @xmath43 depends on the triple @xmath50 and on the results of the coin tosses . in the context of a randomized algorithm",
    ", @xmath58 denotes the maximal running time of the algorithm on @xmath43 over all possible coin tosses , for the instance @xmath35 and id - assignment @xmath42 .",
    "now , just as in the deterministic case , the running time @xmath59 of the @xmath0-decider is the maximum running time over all nodes .",
    "note that by definition of the distributed monte - carlo algorithm , both @xmath60 and @xmath59 are deterministic . for constant @xmath53 $ ] and a function @xmath4 of triplets",
    "@xmath50 , @xmath51 is the class of all distributed languages that have a randomized distributed @xmath0-decider running in time at most  @xmath4 ( i.e. , can be decided in time at most @xmath4 by a randomized distributed algorithm with success probability @xmath2 and success probability @xmath3 ) .",
    "our main interest within this context is in studying the connections between the classes @xmath51 . in particular , we are interested in the question of whether one can `` boost '' the success probabilities of a @xmath0-decider .",
    "( recall that in the _ sequential _ monte carlo setting , such `` boosting '' can easily be achieved by repeating the execution of the algorithm a large number of times . )",
    "our starting point is the recent result of  @xcite that , for the class of hereditary languages ( i.e. , closed under sub - graphs ) , the relation @xmath22 is a sharp threshold for randomization .",
    "that is , for hereditary languages , @xmath61 collapses to @xmath62 , but for any @xmath53 $ ] such that @xmath7 there exists a language @xmath63 , while @xmath64 for any @xmath18 .",
    "we conjecture that the hereditary assumption can be removed and we give some evidence supporting this conjecture .",
    "aiming at analyzing the collection of classes @xmath65 , we consider the following set of classes : @xmath66 for any positive integer @xmath67 , as well as the class @xmath68 hence , our conjecture states that @xmath69 .",
    "note that the class @xmath70 contains _ all _ languages , using a @xmath71-decider that systematically returns at every node ( without any communication ) .",
    "hence , the classes @xmath12 provide a smooth spectrum of randomized distributed complexity classes , from the class of deterministically decidable languages ( under our conjecture ) to the class of all languages .",
    "the ability of boosting the success probabilities of a @xmath0-decider is directly related to the question of whether these classes are different , and to what extent .",
    "one of the main outcomes of this paper is a proof that boosting success probabilities in the distributed setting appears to be quite limited . by definition , @xmath72 for any @xmath67 and @xmath4 .",
    "we prove that these inclusions are strict .",
    "in fact , our separation result is much stronger .",
    "we prove that there exists a language in @xmath73 that is not in @xmath9 for any @xmath18 .",
    "moreover , we prove that @xmath74 for any @xmath18 , where @xmath75 .",
    "hence , @xmath19 does not contain all languages , even for @xmath18 . in summary , we obtain the following hierarchy .",
    "@xmath21 these results demonstrate that boosting the probability of success might be doable , but only from a @xmath0 pair satisfying @xmath76 to a @xmath0 pair satisfying @xmath77 ( with the extremes excluded ) .",
    "it is an open question whether @xmath78 actually collapses to @xmath79 , where @xmath80 , or whether there exist intermediate classes .",
    "recall that every hereditary language in @xmath81 is also in @xmath62  @xcite .",
    "we conjecture that this derandomization result holds for all languages and not only for hereditary ones .",
    "we give evidence supporting this conjecture by showing that restricted to path topologies , finite input and constant running time @xmath4 , the statement @xmath82 holds without assuming the hereditary property .",
    "this evidence seems to be quite meaningful especially since all our separation results hold even if we restrict ourselves to decision problems on path topologies .",
    "finally , we show that the situation changes drastically if the distribution of inputs can be restricted in certain ways . indeed",
    ", we show that for every two reals @xmath83 , there exists a language in @xmath84 that is not in @xmath85 for any @xmath18 , where the @xmath31-classes are the extension of the @xmath28-classes to decision problems in which the inputs can be restricted .",
    "all our results hold not only with respect to the @xmath23 model but also with respect to more restrictive models of computation such as the @xmath24 model ( for @xmath25 ) .",
    "the notion of local decision and local verification of languages has received quite a lot of attention recently .",
    "in the @xmath86 model , for example , solving a decision problem requires the processors to independently inspect their local neighborhood and collectively decide whether the global instance belongs to some specified language .",
    "inspired by classical computation complexity theory , fraigniaud et al .",
    "@xcite suggested that the study of decision problems may lead to new structural insights also in the more complex distributed computing setting .",
    "indeed , following that paper , efforts were made to form a fundamental computational complexity theory for distributed decision problems in various other aspects of distributed computing @xcite .",
    "the classes @xmath26 , @xmath87 and @xmath88 defined in @xcite are the distributed analogues of the classes p , np and bpp , respectively .",
    "the contribution of @xcite is threefold : it establishes the impact of nondeterminism , randomization , and randomization + nondeterminism , on local computation .",
    "this is done by proving structural results , developing a notion of local reduction and establishing completeness results .",
    "one of the main results is the existence of a sharp threshold for randomization , above which randomization does not help ( at least for hereditary languages ) .",
    "more precisely the @xmath88 classes were classified into two : below and above the randomization threshold .",
    "the current paper `` zooms '' into the spectrum of classes below the randomization threshold , and defines a hierarchy of an infinite set of @xmath88 classes , each of which is separated from the class above it in the hierarchy .    the question of whether randomization helps in improving locality for construction problems has been studied extensively .",
    "naor and stockmeyer  @xcite considered a subclass of @xmath89 , called lcl restricted to languages involving graphs of constant maximum degree and processor inputs taken from a set of constant size . ] , and studied the question of how to compute in @xmath90 rounds the constructive versions of decision problems in lcl .",
    "the paper demonstrates that randomization does not help , in the sense that if a problem has a local monte carlo randomized algorithm , then it also has a local deterministic algorithm .",
    "there are several differences between the setting of @xcite and ours .",
    "first , @xcite considers the power of randomization for _ constructing _ a solution , whereas we study the power of randomization for _ deciding _ languages .",
    "second , while @xcite deals with constant time computations , our separation results apply to arbitrary time computations , potentially depending on the size of the instance ( graph and input ) .",
    "to summarize , the different settings imply different impacts for randomization : while this current paper as well as @xcite show that randomization can indeed help for improving locality of decision problems , @xcite shows that when it comes to constructing a solution for a problem in lcl in constant time , randomization does not help . from a less unified approach , the question of whether randomization helps for constructing solutions to some _ specific _ problems in localized computational models such as mis , @xmath91-coloring , and maximal",
    "matching has been also studied in @xcite .",
    "to date , there exists evidence that , for some problems at least , randomization does not help .",
    "for instance , @xcite proves this for 3-coloring the ring .",
    "in fact , for low degree graphs , the gaps between the efficiencies of the best known randomized and deterministic algorithms for problems like mis , @xmath91-coloring , and maximal matching are very small . on the other hand , for graphs of arbitrarily large degrees , there seem to be indications that randomization does help , at least in some cases . for instance , @xmath91-coloring can be randomly computed in expected @xmath92 communication rounds on @xmath36-node graphs  @xcite , whereas the best known deterministic algorithm for this problem performs in @xmath93 rounds  @xcite .",
    "@xmath91-coloring algorithms whose performance is expressed also in terms of the maximum degree @xmath94 illustrate this phenomenon as well .",
    "specifically , @xcite shows that @xmath91-coloring can be randomly computed in expected @xmath95 communication rounds , whereas the best known deterministic algorithm performs in @xmath96 rounds  @xcite .",
    "the original theoretical basis for nondeterminism in local computation was laid by the theories of _ proof - labeling schemes _",
    "@xcite , which resemble the notion of nld , and _ local computation with advice _ @xcite .",
    "these notions also bear some similarities to the notions of _ local detection _",
    "@xcite , _ local checking _",
    "@xcite , or _ silent stabilization _",
    "@xcite , which were introduced in the context of self - stabilization  @xcite .",
    "in addition , nld seems to be related also to the theory of _ lifts _  @xcite .",
    "finally , the classification of decision problems in distributed computing has been studied in several other models .",
    "for example , @xcite and @xcite study specific decision problems in the @xmath97 model .",
    "in addition , decision problems have been studied in the asynchrony discipline too , specifically in the framework of _ wait - free computation _ @xcite and _ mobile agents computing _ @xcite . in the wait - free model ,",
    "the main issues are not spatial constraints but timing constraints ( asynchronism and faults ) .",
    "the main focus of @xcite is deterministic protocols aiming at studying the power of the `` decoder '' , i.e. , the interpretation of the results . while this paper essentially considers the and - checker , ( as a global  yes \" corresponds to all processes saying  yes \" ) , @xcite deals with other interpretations , including more values ( not only  yes \" and  no \" ) , with the objective of designing checkers that use the smallest number of values .",
    "this section recalls some previous results from the literature , to be used throughout in the paper .",
    "let us first recall that in the @xmath23 ( respectively @xmath24 ) model , processors perform in synchronous rounds , and , in each round , every processor ( 1 )  sends messages of arbitrary ( resp .",
    ", @xmath98 bits ) size to its neighbors , ( 2 )  receives messages from its neighbors , and ( 3 )  performs arbitrary individual computations . after a number of rounds ( that may depend on the network @xmath30 connecting the processors , and may vary among the processors , since nodes have different identities , potentially different inputs , and are typically located at non - isomorphic positions in the network ) , every processor @xmath43 terminates and generates its output . consider a distributed @xmath0-decider @xmath29 running in a network @xmath30 with input @xmath99 and identity assignment @xmath42 ( assigning distinct integers to the nodes of @xmath30 ) .",
    "the output of processor @xmath43 in this scenario is denoted by @xmath44 , or simply @xmath100 when the parameters are clear from the context . in the case of decision problem , @xmath101 for every processor @xmath43 .",
    "an @xmath36-node path @xmath102 is represented as a sequence @xmath103 , oriented from left to right .",
    "( however , node @xmath104 does not know its position in the path . )",
    "given an instance @xmath105 with i d s @xmath42 and a subpath @xmath106 , let @xmath107 ( respectively @xmath108 ) be the restriction of @xmath99 ( resp . , @xmath42 ) to @xmath109 .",
    "we sometimes refer to subpath @xmath110 as @xmath111 $ ] . for a set @xmath112 ,",
    "let @xmath113 denote the event that , when running @xmath29 on @xmath35 with id - assignment @xmath42 , all nodes in @xmath114 output `` yes '' .",
    "given a language @xmath1 , an instance @xmath35 is called _ legal _ iff @xmath115 .",
    "given a time bound @xmath4 , a subpath @xmath111 $ ] is called an _",
    "internal _ subpath of @xmath102 if @xmath116 and @xmath117 .",
    "note that if the subpath @xmath109 is internal to @xmath102 , then when running a @xmath4-round algorithm , none of the nodes in @xmath109 `` sees '' the endpoints of @xmath102 .",
    "we now define an important concept , which is crucial in the proofs of our separation results .",
    "let @xmath109 be a subpath of @xmath102 . for @xmath118 $ ]",
    ", @xmath109 is said to be a @xmath119-_secure _ subpath if @xmath120 and @xmath121 \\geq 1-\\delta$ ] .",
    "we typically use @xmath119-secure subpaths for values of @xmath122 where @xmath4 is the running time of the @xmath0-decider @xmath29 on @xmath123 for some fixed identity assignment @xmath42 .",
    "indeed , it is known  @xcite that if @xmath124 , then every long enough subpath @xmath109 of @xmath102 contains an internal @xmath119-secure subpath  @xmath125 .",
    "more precisely , define @xmath126 we have the following :    [ fact - secure ] [ cl : sec_zone_guarantee ] let @xmath124 , @xmath118 $ ] , @xmath127 .",
    "then for every @xmath128-length subpath @xmath109 there is a subpath @xmath125 ( internal to @xmath109 ) that is @xmath119-secure .    for completeness",
    ", we provide the proof of this fact in the appendix .",
    "to avoid cumbersome notation , when @xmath129 , we may omit it and refer to @xmath130-secure subpaths as @xmath131-secure subpaths .",
    "in addition , set @xmath132 let us next illustrate a typical use of fact  [ fact - secure ] . recall that @xmath4 denotes the running time of the @xmath0-decider @xmath29 on @xmath124 with ids @xmath42 .",
    "let @xmath109 be a subpath of @xmath102 of length @xmath133 .",
    "denote by @xmath134 ( resp .",
    ", @xmath135 ) the subpath of @xmath102 to the `` left '' ( resp .",
    ", `` right '' ) of @xmath109",
    ". informally , if the length of @xmath109 is larger than @xmath136 , then @xmath109 serves as a separator between the two subpaths @xmath134 and @xmath135 .",
    "this follows since as algorithm @xmath29 runs in @xmath4 rounds , each node in @xmath102 is affected only by its @xmath4 neighborhood . as the @xmath4 neighborhood of every node @xmath137 and @xmath138 do not intersect , the events @xmath139 and @xmath140 are independent .",
    "the secureness property becomes useful when bounding the probability that at least some node in @xmath102 says .",
    "a natural approach to upper bound this probability is by applying a union bound on the events @xmath141 and @xmath142 . letting @xmath143 denote the event complementary to @xmath144 , we have @xmath145 & = & 1-\\pr[\\ce(p,{\\mbox{\\rm\\bf x}},{\\mbox{\\rm id}},v(p ) ) ] \\\\ & \\leq & ( 1-\\pr[\\ce(p,{\\mbox{\\rm\\bf x}},{\\mbox{\\rm id}},v(l ) ) ] \\\\ & & \\hbox{\\hskip 20pt } \\cdot \\pr[\\ce(p,{\\mbox{\\rm\\bf x}},{\\mbox{\\rm id}},v(r ) ) ] )",
    "\\\\ & & + ~ ( 1-\\pr[\\ce(p,{\\mbox{\\rm\\bf x}},{\\mbox{\\rm id}},v(s ) ) ] ) \\\\ & \\leq & 1-\\pr[\\ce(p,{\\mbox{\\rm\\bf x}},{\\mbox{\\rm id}},v(l ) ) ]",
    "\\\\ & & \\hbox{\\hskip 20pt } \\cdot \\pr[\\ce(p,{\\mbox{\\rm\\bf x}},{\\mbox{\\rm id}},v(r))]+\\delta~.\\end{aligned}\\ ] ] the specific choice of @xmath146 and @xmath131 depends on the context . informally , the guiding principle is to set @xmath131 small enough so that the role of the central section @xmath109 can be neglected , while dealing separately with the two extreme sections @xmath134 and",
    "@xmath135 become manageable for they are sufficiently far apart .",
    "in this section we show that the classes @xmath12 , @xmath15 , form an infinite hierarchy of distinct classes , thereby proving that the general ability to boost the probability of success for a randomized decision problem is quite limited .",
    "in fact , we show separation in a very strong sense : there are decision problems in @xmath73 , i.e. , that have a @xmath0-decider running in zero rounds with @xmath76 , which can not be decided by a @xmath0-decider with @xmath77 , even if the number of rounds of the latter is as large as @xmath147 for every fixed @xmath148 .",
    "[ thm : seperation ] @xmath149 for every @xmath150 and every @xmath18 .",
    "let @xmath67 be any positive integer .",
    "we consider the following distributed language , which is a generalized variant @xmath151 of the problem @xmath152 introduced in  @xcite . as in @xmath152 ,",
    "the input @xmath99 of @xmath151 satisfies @xmath153 , i.e. , each node @xmath43 is given as input a boolean @xmath154 .",
    "the language -@xmath67 is then defined by : @xmath155 namely , @xmath151 consists of all instances containing at most @xmath67 selected nodes ( i.e. , at most @xmath67 nodes with input  1 ) , with all other nodes unselected ( having input  0 ) . in order to prove theorem  [ thm : seperation ] , we show that @xmath156 for every @xmath18 .",
    "we first establish that @xmath151 belongs to @xmath73 .",
    "we adapt algorithm @xmath29 presented in  @xcite for @xmath152 to the case of @xmath151 .",
    "the following simple randomized algorithm runs in @xmath157 time : every node @xmath43 which is not selected , i.e. , such that @xmath158 , says  with probability @xmath159 ; and every node which is selected , i.e. , such that @xmath160 , says  with probability @xmath161 , and with probability @xmath162 .",
    "if the graph has @xmath163 nodes selected , then all nodes say with probability @xmath164 , as desired . on the other hand , if there are @xmath165 selected nodes , then at least one node says with probability @xmath166 .",
    "we therefore get a @xmath0-decider with @xmath167 , that is , such that @xmath168 .",
    "thus @xmath169 .",
    "we now consider the harder direction , and prove that @xmath170 , for any @xmath18 . to prove this separation , it is sufficient to consider @xmath151 restricted to the family of @xmath36-node paths .",
    "fix a function @xmath18 , and assume , towards contradiction , that there exists a distributed @xmath171-decider @xmath29 for @xmath151 that runs in @xmath6 rounds , with @xmath77 .",
    "let @xmath172 be such that @xmath173 .",
    "let @xmath102 be an @xmath36-node path , and let @xmath174 be a subpath of @xmath102 .",
    "let @xmath118 $ ] be a constant satisfying @xmath175 consider a positive instance and a negative instance of @xmath151 , respectively denoted by @xmath176 both instances are defined on the same @xmath36-node path @xmath102 , where @xmath177    recall that @xmath178 ( see eq .",
    "( [ eq : defsecuritysize ] ) ) .",
    "we consider executions of @xmath29 on these two instances , where nodes are given the same i d s .",
    "both instances have almost the same input . in particular ,",
    "the only difference is that instance @xmath179 contains @xmath67 selected nodes , whereas @xmath180 has the same selected nodes as @xmath179 plus one additional selected node .",
    "therefore @xmath179 is legal , while @xmath180 is illegal . in @xmath180 , the path @xmath102 is composed of @xmath181 sections , each containing a unique selected node , and where each pair of consecutive sections separated by a @xmath131-secure subpath .",
    "more precisely , let us enumerate the nodes of @xmath102 from @xmath159 to @xmath36 , with node @xmath43 adjacent to nodes @xmath182 and @xmath183 , for every @xmath184 .",
    "consider the @xmath67 subpaths of @xmath102 defined by : @xmath185\\ ] ] for @xmath186 .",
    "let the selected nodes in @xmath180 be positioned as follows .",
    "let @xmath187 and let @xmath188 for @xmath189 . then set @xmath190",
    "[ fig : amos_k](a ) for a schematic representation of @xmath180 .",
    "our next goal is to define the legal instance @xmath191 .",
    "to do so , we begin by claiming that each @xmath192 contains a @xmath131-secure internal subpath @xmath193 $ ] .",
    "naturally , we would like to employ fact  [ cl : sec_zone_guarantee ] .",
    "however , fact  [ cl : sec_zone_guarantee ] refers to subpaths of _ valid _ instances @xmath124 , and @xmath180 is illegal .",
    "so instead , let us focus on the instance @xmath194 .",
    "since @xmath194 contains no leaders , @xmath195 , it follows that @xmath196 , and fact  [ cl : sec_zone_guarantee ] can be applied on it .",
    "subsequently , since @xmath197 it follows that @xmath192 contains an internal @xmath131-secure subpath @xmath198 $ ] , whose @xmath4 neighborhood is strictly in @xmath192 .",
    "therefore , when applying algorithm @xmath29 on @xmath199 and on @xmath200 , the nodes in the @xmath201-length segment @xmath202 behave the same , thus @xmath203=\\pr[\\ce(s_i,{\\mbox{\\rm\\bf x}}'_{s_i},{\\mbox{\\rm id}}_{s_i},v(s'_i))]$ ] . hence , @xmath202 is a @xmath131-secure subpath in @xmath204 as well , for every @xmath205 , see fig .",
    "[ fig : amos_k](b ) .",
    "the @xmath131-secure subpaths @xmath202 s are now used to divide @xmath102 into @xmath206 segments . specifically , there are @xmath181 segments @xmath207 , @xmath208 , each with one selected node .",
    "the @xmath131-secure subpaths @xmath209 $ ] separate @xmath207 from @xmath210 .",
    "more precisely , set @xmath211 $ ] , @xmath212 $ ] for @xmath213 , and @xmath214 $ ] , getting @xmath215 where @xmath216 denotes path concatenation .",
    "let @xmath217 be the event that all nodes in the subpath @xmath207 say in the instance @xmath180 , for @xmath218 and let @xmath219 $ ] be its probability .",
    "let @xmath220 be such that @xmath221 .",
    "we are now ready to define the valid instance @xmath222 : @xmath223 note that @xmath224 and @xmath225 , thus @xmath226 while @xmath227 .",
    "[ fig : amos_k](c , d ) for an illustration of @xmath179 versus @xmath180 .",
    "we now make the following observation .",
    "@xmath228=p_i$ ] .",
    "this follows since the distance between any two nodes @xmath229 ( resp . ,",
    "@xmath43 ) in distinct @xmath230 is greater than @xmath4 , which implies that @xmath231 where @xmath232 ( resp . , @xmath233 )",
    "is the subpath of length @xmath4 to the left ( resp .",
    ", to the right ) of @xmath234 in @xmath102 , from which it follows that under @xmath29 the nodes of @xmath234 have the same behavior in both instances @xmath179 and @xmath180 .",
    "let @xmath235 ( resp . ,",
    "@xmath236 ) be the event that there exists at least one node in @xmath179 ( resp .",
    ", @xmath180 ) that says when applying algorithm @xmath29 . similarly ,",
    "let @xmath237 ( resp . ,",
    "@xmath238 ) be the event stating that all nodes in the configuration @xmath179 ( resp .",
    ", @xmath180 ) say .",
    "let @xmath239 be the event that all nodes in each subpaths @xmath207 , for @xmath240 say in the instance @xmath180 .",
    "for every @xmath205 , let @xmath241 be the event that all nodes in the @xmath131-secure subpath @xmath202 say in the instance @xmath180 .",
    "we have @xmath242 \\ ; \\mbox{and } \\ ; \\pr(\\cy')=\\pr[\\ce(p,{\\mbox{\\rm\\bf x}}',{\\mbox{\\rm id}},v(p))$ ] , while @xmath243 and @xmath244 .    since @xmath29 is a @xmath0-decider ,",
    "as we assume by contradiction that @xmath151 in @xmath12 , we have @xmath245 , and thus @xmath246 .",
    "therefore , @xmath247 . moreover , since @xmath226 , we also have that @xmath248 .",
    "therefore , the ratio @xmath249 satisfies @xmath250 on the other hand , note that by applying the union bound to the @xmath181 events @xmath251 , we get @xmath252 \\right)+\\left(\\sum_{i=1}^{k}(1-\\pr[\\mathcal{s}_{i } ] ) \\right ) \\\\ & \\leq & 1-p_j \\cdot \\prod_{i \\neq j } p_i + k \\cdot \\delta,\\end{aligned}\\ ] ] where the last inequality follows by the fact that each @xmath202 is a @xmath130-secure subpath , thus the events @xmath253 are independent for every @xmath254 ( since the distance between any two nodes @xmath255 and @xmath256 is at least @xmath136 ) .",
    "this implies that @xmath257 since @xmath258 ( by the independence of the events @xmath253 , for every @xmath259 ) , it then follows that the ratio @xmath260 satisfies @xmath261 where the last inequality follows by the fact that @xmath226 and thus @xmath262 . finally , note that @xmath263 .",
    "this follows since @xmath264 for every @xmath265 , so @xmath266 . by eq .",
    "( [ eqn : ratio_k_lower ] ) , we then have that @xmath267 . combining this with eq .",
    "( [ eqn : ratio_k_upper ] ) , we get that @xmath268 which is in contradiction to the definition of @xmath131 in eq .",
    "( [ eq : lambda ] ) .",
    "finally , we show that the @xmath269 hierarchy does not capture all languages even for @xmath14 and @xmath4 as large as @xmath27 .",
    "the proof of the following theorem is deferred to the appendix .",
    "[ thm : seperationinfty ] there is a language not in @xmath19 , for every @xmath18 .",
    "it is known  @xcite that beyond the threshold @xmath22 , randomization does not help .",
    "this result however holds only for a particular type of languages , called _ hereditary _ , i.e. , closed under inclusion . in this section ,",
    "we provide one more evidence supporting our belief that the threshold @xmath22 identified in  @xcite holds for _ all _ languages , and not only for hereditary languages .",
    "indeed , we prove that , restricted to path topologies and finite inputs , _ every _ language @xmath1 for which there exists a @xmath0-decider running in constant time , with @xmath5 , can actually be decided deterministically in constant time .",
    "[ thm : hard - direction ] let @xmath1 be a distributed language restricted to paths , with a finite set of input values . if @xmath270 , then @xmath271 .",
    "let @xmath272 be a distributed language restricted to paths , and defined on the ( finite ) input set @xmath273 .",
    "consider a distributed @xmath171-decider @xmath29 for @xmath1 that runs in @xmath274 rounds , with @xmath275 .",
    "fix a constant @xmath131 such that @xmath276 .    given a subpath @xmath109 of a path @xmath102 ,",
    "let us denote by @xmath277 ( respectively , @xmath278 ) the subpath of @xmath102 to the left ( resp .",
    ", right ) of @xmath109 , so that @xmath279 .",
    "informally , a collection of three paths @xmath280 , and @xmath281 ( of possibly different lengths ) is called a _ @xmath146-path triplet _ if ( 1 ) the inputs of those paths agree on some `` middle '' subpath of size at least @xmath146 , ( 2 ) paths @xmath102 and @xmath281 coincide on their corresponding `` left '' parts , and ( 3 ) paths @xmath282 and @xmath281 coincide on their `` right '' parts .",
    "see  figure  [ path - triplet ] .",
    "formally , a _ @xmath146-path triplet _ is a triplet @xmath283 $ ] such that @xmath284 , @xmath285 are inputs on these paths , respectively , and @xmath174 , @xmath286 , @xmath287 are three subpaths satisfying ( 1 ) @xmath288 , ( 2 ) @xmath289 , and ( 3 ) @xmath290 and @xmath291 .",
    "the proof of the following claim is deferred to the appendix .",
    "[ claim - path ] let @xmath283 $ ] be a @xmath146-path triplet . if @xmath292 , for  @xmath293 as defined in eq .",
    "( [ eq : defsecuritysize ] ) , then @xmath294    we now observe that , without loss of generality , one can assume that in all instances @xmath123 of @xmath1 , the two extreme vertices of the path @xmath102 have a special input symbol  @xmath295 . to see why this holds ,",
    "let  @xmath295 be a symbol not in @xmath273 , and consider the following language @xmath296 defined over @xmath297 .",
    "language @xmath296 consists of instances @xmath123 such that ( 1 ) the endpoints of @xmath102 have input  @xmath295 , and ( 2 ) @xmath298 , where @xmath282 is the path resulting from removing the endpoints of @xmath102 , and where @xmath299 for every node @xmath43 of @xmath282 .",
    "any @xmath0 decider algorithm for @xmath1 ( resp . , @xmath296 ) , can be trivially transformed into a @xmath0 decider algorithm for @xmath296 ( resp . ,",
    "@xmath1 ) with the same success guarantees and running time .",
    "hence , in the remaining of the proof , we assume that in all instances @xmath300 , the two extreme vertices of the path @xmath102 have input  @xmath295 .",
    "we say that a given instance @xmath123 is _ extendable _ if there exists an extension of it in @xmath1 , i.e. , if there exists an instance @xmath298 such that @xmath301 and @xmath302 .",
    "the proof of the following claim is deferred to the appendix .",
    "[ claim - extendable ] there exists a ( centralized ) algorithm @xmath303 that , given any configuration @xmath123 with @xmath304 , decides whether @xmath123 is extendable .",
    "moreover , algorithm @xmath303 uses messages of constant size .",
    "we may assume , hereafter , that such an algorithm @xmath303 , as promised by claim  [ claim - extendable ] , is part of the language specification given to the nodes .",
    "we show that @xmath305 by proving the existence of a deterministic algorithm @xmath306 that recognizes @xmath1 in @xmath6 rounds . given a path @xmath102 , an input @xmath99 over @xmath102 , and an identity assignment @xmath42 , algorithm @xmath306 applied at a node @xmath229 of @xmath102 operates as follows . if @xmath307 then @xmath229 outputs `` yes '' if and only if @xmath229 is an endpoint of @xmath102 . otherwise , i.e. , if @xmath308 , then @xmath229 outputs `` yes '' if and only if @xmath309 is extendable ( using algorithm @xmath303 ) , where @xmath310 is the ball centered at @xmath229 , and of radius @xmath133 in @xmath102 .",
    "algorithm @xmath306 is a deterministic algorithm that runs in @xmath133 rounds .",
    "we claim that algorithm @xmath306 recognizes @xmath1 .",
    "to establish that claim , consider first an instance @xmath311 .",
    "for every node @xmath229 , @xmath311 is an extension of @xmath309 .",
    "therefore , every node @xmath229 outputs `` yes '' , as desired . now consider an instance @xmath312 .",
    "assume , for the purpose of contradiction , that there exists an identity assignment @xmath42 such that , when applying @xmath306 on @xmath313 , every node @xmath229 outputs `` yes '' .    in this case , @xmath314 .",
    "assume by contradiction that @xmath315 , and consider the middle node @xmath316 of @xmath102 . since @xmath316 outputs `` yes '' , it follows that @xmath123 can be extended to @xmath317 such that @xmath318 .",
    "since the extremities of @xmath102 output `` yes '' , it means that their input is  @xmath295 .",
    "therefore , as @xmath319 , we get that there is an internal node of @xmath282 which has input @xmath295 , contradicting @xmath318 .",
    "let @xmath320 be the longest subpath of @xmath102 such that there exists an extension @xmath317 of @xmath321 , with @xmath298 .",
    "since @xmath314 , and since the middle node of @xmath102 outputs `` yes '' , we have @xmath322 .",
    "the proof carries on by distinguishing two cases for the length of @xmath109 .",
    "if @xmath323 , then @xmath123 can be extended to @xmath318 . by the same arguments as above , since each extremity @xmath324 of @xmath102 has input @xmath295 , we conclude that @xmath325 , with @xmath326 .",
    "contradicting the fact that @xmath312 .",
    "therefore @xmath327 .",
    "let @xmath328 and @xmath329 be such that @xmath330 $ ] .",
    "as @xmath109 is shorter than @xmath102 , it is impossible for both @xmath328 and @xmath329 to be endpoints of @xmath102 . without loss of generality , assume that @xmath328 is not an endpoint of @xmath102 . since @xmath328 outputs `` yes '' , there exists an extension @xmath331 of @xmath332 .",
    "in fact , @xmath333 is also an extension of @xmath334}$ ] . since @xmath335 and @xmath336 agree on @xmath337 $ ] , and since both @xmath317 , and @xmath333 are in @xmath1 , we get from lemma  [ claim - path ] that @xmath338}$ ] can be extended to an input @xmath339 , which contradicts the choice of @xmath109 .",
    "the theorem follows .",
    "theorems  [ thm : seperation ] and  [ thm : seperationinfty ] demonstrate that boosting the probability of success might be doable , but only from @xmath0 satisfying @xmath76 to @xmath0 satisfying @xmath77 ( with the extremes excluded ) . in this section , we prove that once the inputs may be restricted in certain ways , the ability to boost the success probability become almost null .",
    "more precisely , recall that so far we considered languages as collections of pairs @xmath35 where @xmath30 is a ( connected ) @xmath36-node graph and @xmath37 is the input vector to the nodes of @xmath30 , in some finite of infinite alphabet  @xmath32 , that is , @xmath340 for all @xmath38 .",
    "an instance of an algorithm @xmath29 deciding a language @xmath1 was defined as _ any _ such pair @xmath35 .",
    "we now consider the case where the set of instances is restricted to some specific subset of inputs @xmath341 .",
    "that is , the distributed algorithm @xmath29 has now the _ promise _ that in the instances @xmath35 admissible as inputs , the input vector @xmath99 is restricted to @xmath342 .",
    "we define the classes @xmath85 in a way identical to the classes @xmath9 , but generalized in two ways .",
    "first , the parameter @xmath52 is not bounded to be integral , but can be any positive real .",
    "second , the decision problems under consideration are extended to the ones in which the set of input vectors @xmath99 can be restricted .",
    "so , in particular , @xmath343 , for every positive integer @xmath67 , and every function @xmath4 .",
    "the following theorem proves that boosting can made as limited as desired .",
    "the proof of this theorem is deferred to the appendix .",
    "[ theo : seperation_rationals ] let @xmath344 be any two positive reals .",
    "then , @xmath345 for every @xmath18 .",
    "note that theorem  [ theo : seperation_rationals ] demonstrates not only the ( almost ) inability of boosting the probability of success when the inputs to the nodes are restricted to specific kinds , but also the inability of derandomizing , even above the threshold @xmath22 .",
    "indeed , the following is a direct consequence of theorem  [ theo : seperation_rationals ] .",
    "[ lem : non - seperation - rest - input ] for every positive real @xmath52 , there is a decision problem in @xmath346 which can not be decided _ deterministically _ in @xmath27 rounds .",
    "proof of fact [ fact - secure ] :    proof of theorem [ thm : seperationinfty ] :    proof of claim [ claim - path ] :    proof of claim [ claim - extendable ] :    proof of theorem [ theo : seperation_rationals ] :"
  ],
  "abstract_text": [
    "<S> the paper tackles the power of randomization in the context of locality by analyzing the ability to `` boost '' the success probability of deciding a distributed language . </S>",
    "<S> the main outcome of this analysis is that the distributed computing setting contrasts significantly with the sequential one as far as randomization is concerned . </S>",
    "<S> indeed , we prove that in some cases , the ability to increase the success probability for deciding distributed languages is rather limited .    informally , a _ </S>",
    "<S> @xmath0-decider _ for a language @xmath1 is a distributed randomized algorithm which _ accepts _ instances in @xmath1 with probability at least @xmath2 and _ rejects _ instances outside of @xmath1 with probability at least @xmath3 . </S>",
    "<S> it is known that every hereditary language that can be decided in @xmath4 rounds by a @xmath0-decider , where @xmath5 , can actually be decided _ deterministically _ in @xmath6 rounds . in one of our results we give evidence supporting the conjecture that the above statement holds for all distributed languages and not only for hereditary ones . </S>",
    "<S> this is achieved by considering the restricted case of path topologies .    </S>",
    "<S> we then turn our attention to the range below the aforementioned threshold , namely , the case where @xmath7 . for @xmath8 </S>",
    "<S> , we define the class @xmath9 to be the set of all languages decidable in at most @xmath4 rounds by a @xmath0-decider , where @xmath10 . </S>",
    "<S> it is easy to see that every language is decidable ( in zero rounds ) by a @xmath0-decider satisfying @xmath11 . </S>",
    "<S> hence , the hierarchy @xmath12 provides a spectrum of complexity classes between determinism ( @xmath13 , under the above conjecture ) and complete randomization ( @xmath14 ) . </S>",
    "<S> we prove that all these classes are separated , in a strong sense : for every integer @xmath15 , there exists a language @xmath1 satisfying @xmath16 but @xmath17 for any @xmath18 . </S>",
    "<S> in addition , we show that @xmath19 does not contain all languages , for any @xmath18 . </S>",
    "<S> in other words , we obtain the following hierarchy : @xmath20 @xmath21 finally , we show that if the inputs can be restricted in certain ways , then the ability to boost the success probability becomes almost null , and , in particular , derandomization is not possible even beyond the threshold @xmath22 .    </S>",
    "<S> all our results hold with respect to the @xmath23 model of computation as well as with respect to the @xmath24 model , for @xmath25 . </S>"
  ]
}