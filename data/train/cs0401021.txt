{
  "article_text": [
    "even though the set - sharing domain is , in a sense , remarkably precise , more precision is attainable by combining it with other domains .",
    "in particular , freeness and linearity information has received much attention by the literature on sharing analysis ( recall that a variable is said to be free if it is not bound to a non - variable term ; it is linear if it is not bound to a term containing multiple occurrences of another variable ) .",
    "as argued informally by sndergaard  @xcite , the mutual interaction between linearity and aliasing information can improve the accuracy of a sharing analysis .",
    "this observation has been formally applied in  @xcite to the specification of the abstract @xmath0 operator for the domain @xmath1 . in his phd thesis",
    "@xcite , langen proposed a similar integration with linearity , but for the set - sharing domain .",
    "he has also shown how the aliasing information allows to compute freeness with a good degree of accuracy ( however , freeness information was not exploited to improve aliasing ) .",
    "king  @xcite has also shown how a more refined tracking of linearity allows for further precision improvements .",
    "the synergy attainable from a bi - directional interaction between aliasing and freeness information was initially pointed out by muthukumar and hermenegildo @xcite . since then , several authors considered the integration of set - sharing with freeness , sometimes also including additional explicit structural information @xcite .",
    "building on the results obtained in  @xcite ,  @xcite and  @xcite , but independently from  @xcite , hans and winkler  @xcite proposed a combined integration of freeness and linearity information with set - sharing .",
    "similar combinations have been proposed in  @xcite . from a more pragmatic point of view ,",
    "codish et al .",
    "@xcite integrate the information captured by the domains of  @xcite and  @xcite by performing the analysis with both domains at the same time , exchanging information between the two components at each step .",
    "most of the above proposals differ in the carrier of the underlying abstract domain .",
    "even when considering the simplest domain combinations where explicit structural information is ignored , there is no general consensus on the specification of the abstract unification procedure . from a theoretical point of view , once the abstract domain has been related to the concrete one by means of a galois connection , it is always possible to specify the best correct approximation of each operator of the concrete semantics .",
    "however , empirical observations suggest that sub - optimal operators are likely to result in better complexity / precision trade - offs @xcite . as a consequence ,",
    "it is almost impossible to identify `` the right combination '' of variable aliasing with freeness and linearity information , at least when practical issues , such as the complexity of the abstract unification procedure , are taken into account .    given this state of affairs , we will now consider a domain combination whose carrier is essentially the same as specified by langen  @xcite and hans and winkler  @xcite .",
    "( the same domain combination was also considered by bruynooghe et al .",
    "@xcite , but with the addition of compoundness and explicit structural information . )",
    "the novelty of our proposal lies in the specification of an improved abstract unification procedure , better exploiting the interaction between sharing and linearity . as a matter of fact",
    ", we provide an example showing that all previous approaches to the combination of set - sharing with freeness and linearity are not uniformly more precise than the analysis based on the @xmath1 domain  @xcite , whereas such a property is enjoyed by our proposal .    by extending the results of  @xcite to this combination ,",
    "we provide a new abstraction function that can be applied to any logic language computing on domains of syntactic structures , with or without the occurs - check ; by using this abstraction function , we also prove the correctness of the new abstract unification procedure .",
    "moreover , we show that the same notion of redundant information as identified in  @xcite also applies to this abstract domain combination . as a consequence , it is possible to implement an algorithm for abstract unification running in polynomial time and",
    "still obtain the same precision on all the considered observables : groundness , independence , freeness and linearity .",
    "this paper is based on  ( * ? ? ?",
    "* chapter  6 ) , the phd thesis of the second author . in section  [ sec : prelims ] , we define some notation and recall the basic concepts used later in the paper . in section  [ sec : sfl - domain ] , we present the domain @xmath2 that integrates set - sharing , freeness and linearity . in section  [ sec : sfl - asub - comparison ] , we show that @xmath2 is uniformly more precise than the domain @xmath1 , whereas all the previous proposals for a domain integrating set - sharing and linearity fail to satisfy such a property . in section  [ sec : sfl - redundant ] , we show that the domain @xmath2 can be simplified by removing some redundant information . in section  [ sec : exp - eval ] , we provide an experimental evaluation using the analyzer @xcite . in section  [ sec : related ] , we discuss some related work .",
    "section  [ sec : conclusion ] concludes with some final remarks .",
    "the proofs of the results stated here are not included but all of them are available in an extended version of this paper  @xcite .",
    "for a set @xmath3 , @xmath4 is the powerset of @xmath3 .",
    "the cardinality of @xmath3 is denoted by @xmath5 and the empty set is denoted by @xmath6 .",
    "the notation @xmath7 stands for the set of all the _ finite _ subsets of @xmath3 , while the notation @xmath8 stands for @xmath9 .",
    "the set of all finite sequences of elements of @xmath3 is denoted by @xmath10 , the empty sequence by @xmath11 , and the concatenation of @xmath12 is denoted by @xmath13 .",
    "let @xmath14 denote a possibly infinite set of function symbols , ranked over the set of natural numbers .",
    "let @xmath15 denote a denumerable set of variables , disjoint from @xmath14 .",
    "then @xmath16 denotes the free algebra of all ( possibly infinite ) terms in the signature @xmath14 having variables in @xmath15 .",
    "thus a term can be seen as an ordered labeled tree , possibly having some infinite paths and possibly containing variables : every inner node is labeled with a function symbol in @xmath14 with a rank matching the number of the node s immediate descendants , whereas every leaf is labeled by either a variable in @xmath15 or a function symbol in @xmath14 having rank @xmath17 ( a constant ) .",
    "it is assumed that @xmath14 contains at least two distinct function symbols , with one of them having rank  @xmath17 .",
    "if @xmath18 then @xmath19 and @xmath20 denote the set and the multiset of variables occurring in @xmath21 , respectively .",
    "we will also write @xmath22 to denote the set of variables occurring in an arbitrary syntactic object @xmath23 .",
    "suppose @xmath24 : @xmath25 and @xmath21 are _ independent _ if @xmath26 ; we say that variable @xmath27 _ occurs linearly in @xmath21 _ , more briefly written using the predication @xmath28 , if @xmath27 occurs exactly once in @xmath20 ; @xmath21 is said to be _ ground _ if @xmath29 ; @xmath21 is _ free _ if @xmath30 ; @xmath21 is _ linear _ if , for all @xmath31 , we have @xmath28 ; finally , @xmath21 is a _ finite term _ ( or _ herbrand term _ ) if it contains a finite number of occurrences of function symbols .",
    "the sets of all ground , linear and finite terms are denoted by @xmath32 , @xmath33 and @xmath34 , respectively .",
    "a _ substitution _ is a total function @xmath35 that is the identity almost everywhere ; in other words , the _ domain _ of  @xmath36 , @xmath37 is finite . given a substitution @xmath35 , we overload the symbol ` @xmath36 ' so as to denote also the function @xmath38 defined as follows , for each term @xmath39 : @xmath40",
    "if @xmath39 , we write @xmath41 to denote @xmath42 .",
    "note that , for each substitution @xmath36 and each finite term @xmath39 , if @xmath43 , then @xmath30 .    if @xmath44 and @xmath45 , then @xmath46 is called a _",
    "binding_. the set of all bindings is denoted by @xmath47 .",
    "substitutions are denoted by the set of their bindings , thus a substitution @xmath36 is identified with the ( finite ) set @xmath48 we denote by @xmath49 the set of variables occurring in the bindings of @xmath36 .",
    "we also define @xmath50 .",
    "a substitution is said to be _ circular _ if , for @xmath51 , it has the form @xmath52 where @xmath53 ,  , @xmath54 are distinct variables .",
    "a substitution is in _ rational solved form _ if it has no circular subset .",
    "the set of all substitutions in rational solved form is denoted by @xmath55 .",
    "a substitution @xmath36 is _ idempotent _ if , for all @xmath18 , we have @xmath56 .",
    "equivalently , @xmath36 is idempotent if and only if @xmath57 .",
    "the set of all idempotent substitutions is denoted by @xmath58 and @xmath59 .",
    "the composition of substitutions is defined in the usual way .",
    "thus @xmath60 is the substitution such that , for all terms @xmath39 , @xmath61 and has the formulation @xmath62 as usual , @xmath63 denotes the identity function ( i.e. , the empty substitution ) and , when @xmath64 , @xmath65 denotes the substitution @xmath66 .    for each @xmath67 and @xmath68",
    ", the sequence of finite terms @xmath69 converges to a ( possibly infinite ) term , denoted @xmath70  @xcite .",
    "therefore , the function @xmath71 such that @xmath72 is well defined .",
    "note that , in general , this function is not a substitution : while having a finite domain , its `` bindings '' @xmath73 can map a domain variable @xmath74 into a term @xmath75 .",
    "however , as the name of the function suggests , the term @xmath76 is granted to be _ rational _ , meaning that it can only have a finite number of distinct subterms and hence , be finitely represented .",
    "consider the substitutions @xmath77 note that there are substitutions , such as @xmath78 , that are not idempotent and nonetheless define finite trees only ; namely , @xmath79 .",
    "similarly , there are other substitutions , such as @xmath80 , whose bindings are not explicitly cyclic and nonetheless define rational trees that are infinite ; namely , @xmath81 .",
    "finally note that the ` @xmath82 ' function is not defined on @xmath83 .",
    "an _ equation _ is of the form @xmath84 where @xmath85 .",
    "@xmath86 denotes the set of all equations .",
    "a substitution @xmath36 may be regarded as a finite set of equations , that is , as the set @xmath87 .",
    "we say that a set of equations @xmath88 is in _ rational solved form _ if @xmath89 . in the rest of the paper , we will often write a substitution @xmath67 to denote a set of equations in rational solved form ( and vice versa ) . as is common in research work involving equality",
    ", we overload the symbol ` @xmath90 ' and use it to denote both equality and to represent syntactic identity .",
    "the context makes it clear what is intended .",
    "let @xmath91 .",
    "we assume that any equality theory @xmath92 over @xmath16 includes the _ congruence axioms _ denoted by the following schemata : @xmath93    in logic programming and most implementations of prolog it is usual to assume an equality theory based on syntactic identity .",
    "this consists of the congruence axioms together with the _ identity axioms _ denoted by the following schemata , where @xmath94 and @xmath95 are distinct function symbols or @xmath96 : @xmath97 the axioms characterized by schemata  ( [ eq - ax : injective - functions ] ) and  ( [ eq - ax : diff - funct ] ) ensure the equality theory depends only on the syntax .",
    "the equality theory for a non - syntactic domain replaces these axioms by ones that depend instead on the semantics of the domain and , in particular , on the interpretation given to functor symbols .",
    "the equality theory of clark  @xcite , denoted @xmath98 , on which pure logic programming is based , usually called the _ herbrand _ equality theory , is given by the congruence axioms , the identity axioms , and the axiom schema @xmath99 axioms characterized by the schema  ( [ eq - ax : occ - check ] ) are called the _ occurs - check axioms _ and are an essential part of the standard unification procedure in sld - resolution .",
    "an alternative approach used in some implementations of logic programming systems , such as prolog  ii , sicstus and oz , does not require the occurs - check axioms .",
    "this approach is based on the theory of rational trees  @xcite , denoted @xmath100 .",
    "it assumes the congruence axioms and the identity axioms together with a _",
    "uniqueness axiom _ for each substitution in rational solved form . informally speaking these state that , after assigning a ground rational tree to each variable which is not in the domain , the substitution uniquely defines a ground rational tree for each of its domain variables .",
    "note that being in rational solved form is a very weak property .",
    "indeed , unification algorithms returning a set of equations in rational solved form are allowed to be much more `` lazy '' than one would expect .",
    "we refer the interested reader to @xcite for details on the subject .    in the sequel we use the expression `` equality theory '' to denote any consistent , decidable theory @xmath92 satisfying the congruence axioms .",
    "we also use the expression `` syntactic equality theory '' to denote any equality theory @xmath92 also satisfying the identity axioms .",
    "we say that a substitution @xmath67 is _ satisfiable _ in an equality theory @xmath92 if , when interpreting @xmath36 as an equation system in rational solved form , @xmath101 let @xmath102 be a set of equations in an equality theory @xmath92 .",
    "a substitution @xmath67 is called a _ solution for @xmath88 in @xmath92 _ if @xmath36 is satisfiable in @xmath92 and @xmath103 ; we say that @xmath88 is satisfiable if it has a solution .",
    "if @xmath104 , then @xmath36 is said to be a _ relevant _",
    "solution for @xmath88 .",
    "in addition , @xmath36 is a _",
    "most general solution for @xmath88 in @xmath92 _ if @xmath105 . in this paper ,",
    "a most general solution is always a relevant solution of @xmath88 .",
    "when the theory @xmath92 is clear from the context , the set of all the relevant most general solutions for @xmath88 in @xmath92 is denoted by @xmath106 .",
    "[ ex : equations ] let @xmath107 and @xmath108 then , for any syntactic equality theory @xmath92 , we have @xmath109 . since @xmath67 , then @xmath36 and hence @xmath88 is satisfiable in @xmath100 . intuitively ,",
    "whatever rational tree @xmath110 is assigned to the parameter variable @xmath111 , there exist rational trees @xmath112 , @xmath113 and @xmath114 that , when assigned to the domain variables @xmath74 , @xmath27 and @xmath115 , will turn @xmath36 into a set of trivial identities ; namely , let @xmath112 and @xmath113 be both equal to the infinite rational tree @xmath116 , which is usually denoted by @xmath117 , and let @xmath114 be the rational tree @xmath118 .",
    "thus @xmath36 is a relevant most general solution for @xmath88 in @xmath100 .",
    "in contrast , @xmath119 is just a relevant solution for @xmath88 in @xmath100 .",
    "also observe that , for any equality theory @xmath92 , @xmath120 so that @xmath36 does not satisfy the occurs - check axioms",
    ". therefore , neither @xmath36 nor @xmath88 are satisfiable in the herbrand equality theory @xmath98 .",
    "intuitively , there is no finite tree @xmath112 such that @xmath121 .",
    "we have the following useful result regarding ` @xmath82 ' and satisfiable substitutions that are equivalent with respect to any given syntactic equality theory .",
    "[ prop : rt - preserves - vars - gterms - lterms ] let @xmath122 be satisfiable in the syntactic equality theory @xmath92 and suppose that @xmath123 . then @xmath124      given two complete lattices @xmath125 and @xmath126 , a _ galois connection _ is a pair of monotonic functions @xmath127 and @xmath128 such that @xmath129 the functions @xmath130 and @xmath131 are said to be the abstraction and concretization functions , respectively .",
    "galois insertion _ is a galois connection where the concretization function @xmath131 is injective .",
    "an _ upper closure operator _",
    "( uco ) @xmath132 on the complete lattice @xmath125 is a monotonic , idempotent and extensive for each @xmath133 . ]",
    "self - map .",
    "the set of all uco s on @xmath134 , denoted by @xmath135 , is itself a complete lattice . for any @xmath136 , the set @xmath137 , i.e.",
    ", the image under @xmath138 of the lattice carrier , is a complete lattice under the same partial order @xmath139 defined on @xmath134 .",
    "given a galois connection , the function @xmath140 is an element of @xmath135 .",
    "the presentation of abstract interpretation in terms of galois connections can be rephrased by using uco s . in particular",
    ", the partial order @xmath141 defined on @xmath135 formalizes the intuition of an abstract domain being more precise than another one ; moreover , given two elements @xmath142 , their reduced product  @xcite , denoted @xmath143 , is their @xmath144 on @xmath135 .",
    "the set - sharing domain of jacobs and langen @xcite , encodes both aliasing and groundness information .",
    "let @xmath145 be a fixed and finite set of variables of interest .",
    "an element of the set - sharing domain ( a _ sharing set _ ) is a set of subsets of @xmath146 ( the _ sharing groups _ ) .",
    "note that the empty set is not a sharing group .",
    "[ def : sh ] let @xmath147 be the set of _ sharing groups_. the set - sharing lattice is defined as @xmath148 , ordered by subset inclusion .",
    "the following operators on @xmath149 are needed for the specification of the abstract semantics .",
    "[ def : aux - funcs - sh ] for each @xmath150 and each @xmath151 , we define the following functions :    the _ star - union _",
    "function @xmath152 , is defined as @xmath153    in  @xcite it was shown that the domain @xmath149 contains many elements that are redundant for the computation of the actual _ observable _ properties of the analysis , definite groundness and definite independence .",
    "the following formalization of these observables is a rewording of the definitions provided in  @xcite .",
    "[ def : sh - observables ] the _ groundness _ and _ independence _ observables ( on @xmath149 ) @xmath154 are defined , for each @xmath155 , by @xmath156    note that , as usual in sharing analysis domains , definite groundness and definite independence are both represented by encoding possible non - groundness and possible pair - sharing information .",
    "the abstract domain @xmath157  @xcite is the simplest abstraction of the domain @xmath149 that still preserves the same precision on groundness and independence .",
    "[ def : rhopsd ] the operator @xmath158 is defined , for each @xmath155 , by @xmath159 the _ pair - sharing dependency _ lattice is @xmath160 .    in the following example we provide an intuitive interpretation of the approximation induced by the three upper closure operators of definitions  [ def : sh - observables ] and  [ def : rhopsd ] .",
    "[ ex : con - ps ] let @xmath161 and consider , omitting inner braces .",
    "for instance , we will write @xmath162 to denote @xmath163 . ] @xmath164 .",
    "then @xmath165 when observing @xmath166 , the only information available is that variable @xmath111 does not occur in a sharing group ; intuitively , this means that @xmath111 is definitely ground .",
    "all the other information encoded in @xmath167 is lost ; for instance , in @xmath167 variables @xmath168 and @xmath115 never occur in the _ same _ sharing group ( i.e. , they are definitely independent ) , while this happens in @xmath166 .",
    "when observing @xmath169 , it should be noted that two distinct variables occur in the same sharing group if and only if they were also occurring together in a sharing group of @xmath167 , so that the definite independence information is preserved ( e.g. , @xmath168 and @xmath115 keep their independence ) . on the other hand ,",
    "all the variables in @xmath146 occur as singletons in @xmath169 whether or not they are known to be ground ; for instance , @xmath170 occurs in @xmath169 although @xmath111 does not occur in any sharing group in @xmath167 .    by noting that @xmath171 , it follows that @xmath172 preserves both the definite groundness and the definite independence information of @xmath167",
    "; moreover , as the inclusion is strict , @xmath172 encodes other information , such as variable covering ( the interested reader is referred to  @xcite for a more formal discussion ) .",
    "one of the key concepts used in  @xcite for the proofs of the correctness results stated in this paper is that of variable - idempotence .",
    "for the interested reader , we provide here a brief introduction to variable - idempotent substitutions , although these are not referred to elsewhere in the paper .",
    "the definition of idempotence requires that repeated applications of a substitution do not change the syntactic structure of a term and idempotent substitutions are normally the preferred form of a solution to a set of equations .",
    "however , in the domain of rational trees , a set of solvable equations does not necessarily have an idempotent solution ( for instance , in example  [ ex : equations ] , the set of equations @xmath88 has no idempotent solution ) . on the other hand ,",
    "several abstractions of terms , such as the ones commonly used for sharing analysis , are only interested in the set of variables occurring in a term and not in the concrete structure that contains them .",
    "thus , for applications such as sharing analysis , a useful way to relax the definition of idempotence is to ignore the structure of terms and just require that the repeated application of a substitution leaves the set of variables in a term invariant .",
    "[ def : vsubst ] a substitution @xmath67 is _ _ variable - idempotent _ _ if and only if for all @xmath39 we have @xmath173 the set of variable - idempotent substitutions is denoted @xmath174 .    as any idempotent substitution is also variable - idempotent , we have @xmath175 .",
    "consider the following substitutions which are all in @xmath55 .",
    "the abstract domain @xmath2 is made up of three components , providing different kinds of sharing information regarding the set of variables of interest @xmath146 : the first component is the set - sharing domain @xmath149 of jacobs and langen @xcite ; the other two components provide freeness and linearity information , each represented by simply recording those variables of interest that are known to enjoy the corresponding property .",
    "let @xmath177 and @xmath178 be partially ordered by reverse subset inclusion .",
    "the abstract domain @xmath2 is defined as @xmath179 and is ordered by @xmath180 , the component - wise extension of the orderings defined on the sub - domains . with this ordering",
    ", @xmath2 is a complete lattice whose least upper bound operation is denoted by @xmath181 .",
    "the bottom element @xmath182 will be denoted by @xmath183 .",
    "when the concrete domain is based on the theory of finite trees , idempotent substitutions provide a finitely computable _ strong normal form _ for domain elements , meaning that different substitutions describe different sets of finite trees . in contrast , when working on a concrete domain based on the theory of rational trees , substitutions in rational solved form , while being finitely computable , no longer satisfy this property : there can be an infinite set of substitutions in rational solved form all describing the same set of rational trees ( i.e. , the same element in the `` intended '' semantics ) .",
    "for instance , the substitutions @xmath184 for @xmath185 , @xmath186 ,   , all map the variable @xmath74 into the same infinite rational tree @xmath117 .    ideally , a strong normal form for the set of rational trees described by a substitution @xmath67 can be obtained by computing the limit @xmath187 .",
    "the problem is that @xmath187 can map domain variables to infinite rational terms and may not be in @xmath55 .",
    "this poses a non - trivial problem when trying to define `` good '' abstraction functions , since it would be really desirable for this function to map any two equivalent concrete elements to the same abstract element .",
    "as shown in  @xcite , the classical abstraction function for set - sharing analysis  @xcite , which was defined only for substitutions that are idempotent , does not enjoy this property when applied , as it is , to arbitrary substitutions in rational solved form . in  @xcite , this problem is solved by replacing the sharing group operator ` @xmath188 ' of  @xcite by an occurrence operator , ` @xmath189 ' , defined by means of a fixpoint computation . however , to simplify the presentation , here we define ` @xmath189 ' directly by exploiting the fact that the number of iterations needed to reach the fixpoint is bounded by the number of bindings in the substitution .    [",
    "def : occ ] for each @xmath67 and @xmath190 , the _ occurrence operator _",
    "@xmath191 is defined as @xmath192    the operator ` @xmath193 ' is introduced for notational convenience only .",
    "[ ex : occ ] let @xmath194 then @xmath195 so that @xmath196 , for @xmath197 , @xmath186 , @xmath198 and @xmath199 . as a consequence , supposing that @xmath200 , we obtain @xmath201 .    in a similar way , it is possible to define suitable operators for groundness , freeness and linearity . as",
    "all ground trees are linear , a knowledge of the definite groundness information can be useful for proving properties concerning the linearity abstraction .",
    "groundness is already encoded in the abstraction for set - sharing provided in definition  [ def : occ ] ; nonetheless , for both a simplified notation and a clearer intuitive reading , we now explicitly define the set of variables that are associated to ground trees by a substitution in @xmath55 .",
    "[ def : gvars ] the _ groundness operator _",
    "@xmath202 is defined , for each @xmath67 , by @xmath203    [ ex : gvars ] consider @xmath67 where @xmath204 then @xmath205 .",
    "observe that @xmath206 although @xmath207 .",
    "also , @xmath208 although @xmath209 for all @xmath210 .    as for possible sharing",
    ", the definite freeness information can be extracted from a substitution in rational solved form by observing the result of a bounded number of applications of the substitution .",
    "[ def : fvars ] the _ freeness operator _",
    "@xmath211 is defined , for each @xmath67 , by @xmath212    as @xmath67 has no circular subset , @xmath213 implies @xmath214 .",
    "[ ex : fvars ] let @xmath215 and consider @xmath67 where @xmath216 then @xmath217 .",
    "thus @xmath218 although @xmath207 .",
    "also , @xmath219 although @xmath220 .    as in previous cases ,",
    "the definite linearity information can be extracted by observing the result of a bounded number of applications of the considered substitution .",
    "[ def : lvars ] the _ linearity operator _",
    "@xmath221 is defined , for each @xmath67 , by @xmath222    in the next example we consider the extraction of linearity from two substitutions .",
    "the substitution @xmath36 shows that , in contrast with the case of set - sharing and freeness , for linearity we may need to compute up to @xmath223 applications , where @xmath224 ; the substitution @xmath225 shows that , when observing the term @xmath226 , multiple occurrences of domain variables have to be disregarded .",
    "[ ex : lvars ] let @xmath227 and consider @xmath67 where @xmath228",
    "then @xmath229 .",
    "observe that @xmath230 .",
    "this is because @xmath231 , @xmath232 so that @xmath233 and @xmath234 so that @xmath235 does not hold .",
    "note also that @xmath236 holds for @xmath237 , @xmath238 ,  @xmath239 .",
    "consider now @xmath240 where @xmath241 then @xmath242 .",
    "note that we have @xmath243 although , for all @xmath64 , @xmath244 occurs more than once in the term @xmath245 .",
    "the occurrence , groundness , freeness and linearity operators are invariant with respect to substitutions that are equivalent in the given syntactic equality theory .",
    "[ prop : iff - rsubst - occ - f - g - l ] let @xmath246 be satisfiable in the syntactic equality theory @xmath92 and suppose that @xmath247 .",
    "then @xmath248    moreover , these operators precisely capture the intended properties over the domain of rational trees .",
    "[ prop : occ - f - g - l - rt - rsubst ] if @xmath67 and @xmath249 then @xmath250    it follows from ( [ case : rsubst - occ ] ) and ( [ case : rsubst - free ] ) that any free variable necessarily shares ( at least , with itself ) .",
    "also , as @xmath251 , it follows from ( [ case : rsubst - ground ] ) , ( [ case : rsubst - free ] ) and ( [ case : rsubst - linear ] ) that any variable that is either ground or free is also necessarily linear .",
    "thus we have the following corollary .",
    "[ cor : f - g - l - rsubst ] if @xmath67 , then @xmath252    we are now in position to define the abstraction function mapping rational trees to elements of the domain @xmath2 .",
    "[ def : abstrsfl ] for each substitution @xmath67 , the function @xmath253 is defined by @xmath254    with definition  [ def : abstrsfl ] and proposition  [ prop : iff - rsubst - occ - f - g - l ] , one of our objectives is fulfilled : substitutions in @xmath55 that are equivalent have the same abstraction .",
    "[ cor : iff - rsubst - same - abstrsfl ]",
    "let @xmath246 be satisfiable in the syntactic equality theory @xmath92 and suppose @xmath247",
    ". then @xmath255 .",
    "observe that the galois connection defined by the functions @xmath256 and @xmath257 is not a galois insertion since different abstract elements are mapped by @xmath257 to the same set of concrete computation states . to see this it is sufficient to observe that , by corollary  [ cor : f - g - l - rsubst ] , any abstract element @xmath258 such that @xmath259 , as is the case for the bottom element @xmath183 , satisfies @xmath260 ; thus , all such @xmath261 s will represent the semantics of those program fragments that have no successful computations .",
    "similarly , by letting @xmath262 , it can be seen that , for any @xmath263 such that @xmath264 we have , again by corollary  [ cor : f - g - l - rsubst ] , @xmath265 .    of course",
    ", by taking the abstract domain as the subset of @xmath2 that is the co - domain of @xmath256 , we would have a galois insertion .",
    "however , apart from the simple cases shown above , it is somehow difficult to _ explicitly _ characterize such a set . for instance , as observed in  @xcite , if @xmath266 we have @xmath267 .",
    "it is worth stressing that these `` spurious '' elements do not compromise the correctness of the analysis and , although they can affect the precision of the analysis , they rarely occur in practice  @xcite .",
    "the specification of the abstract unification operator on the domain @xmath2 is rather complex , since it is based on a very detailed case analysis . to achieve some modularity , that will be also useful when proving its correctness , in the next definition we introduce several auxiliary abstract operators .",
    "[ def : aux - funcs - sfl ] let @xmath85 be finite terms such that @xmath268 . for each @xmath269",
    "we define the following predicates :    @xmath25 and @xmath21 are _ independent in @xmath270 _ if and only if @xmath271 holds for @xmath272 , where @xmath273    the function @xmath274 yields the set of variables of interest that may share with the given term . for each @xmath39 ,",
    "@xmath275    the function @xmath276 strengthens the sharing set @xmath167 by forcing the coupling of @xmath74 with @xmath21 . for each @xmath155 and each @xmath277 ,",
    "@xmath278    as a first correctness result , we have that the auxiliary operators correctly approximate the corresponding concrete properties .    [ thm : soundness - of - sfl - preds ] let @xmath279 , @xmath280 and @xmath281 .",
    "let also @xmath85 be two finite terms such that @xmath268 .",
    "then @xmath282    let @xmath161 and consider the abstract element @xmath283 , where @xmath284 then , by applying definition  [ def : aux - funcs - sfl ] , we obtain the following .",
    "* @xmath285 does not hold whereas @xmath286 holds .",
    "* @xmath287 holds but @xmath288 does not hold . * both @xmath289 and @xmath290 hold whereas @xmath291 does not hold ; note that , in the second case , the two arguments of the predicate do share @xmath27 , but this does not affect the independence of the corresponding terms , because @xmath27 is definitely ground in the abstract element @xmath270 . * let @xmath292 ; then @xmath293 does not hold because @xmath294 ; @xmath295 does not hold because @xmath74 occurs more than once in @xmath21 ; @xmath296 holds , even though @xmath27 occurs twice in @xmath21 , because @xmath27 is definitely ground in @xmath270 ; @xmath297 does not hold because both @xmath74 and @xmath115 occur in term @xmath21 and , as observed in the point above , @xmath291 does not hold . * for the reasons given in the point above , @xmath298 does not hold ; in contrast , @xmath299 holds . * @xmath300 and @xmath301 ; thus , both @xmath111 and @xmath74 may share one or more variables with @xmath115 ; since we observed that @xmath111 and @xmath74 are definitely independent in @xmath270 , this means that the set of variables that @xmath111 shares with @xmath115 is disjoint from the set of variables that @xmath74 shares with @xmath115 .",
    "* let @xmath302 ; then @xmath303 an intuitive explanation of the usefulness of this operator is deferred until after the introduction of the abstract @xmath0 operator ( see also example  [ ex : amgusfl - cyclicreduce ] ) .",
    "we now introduce the abstract @xmath0 operator , specifying how a single binding affects each component of the domain @xmath2 in the context of a syntactic equality theory @xmath92 .",
    "[ def : amgusfl ] the function @xmath304 captures the effects of a binding on an element of @xmath2 . let @xmath269 and @xmath277 , where @xmath305 .",
    "let also @xmath306 where @xmath307 @xmath308    letting @xmath309 and @xmath310 , we also define @xmath311",
    "l '      & { { \\mathrel{\\buildrel \\mathrm{def } \\over { = } } } } \\bigl ( { \\mathord{\\mathit{vi}}}{\\setminus}{\\mathop{\\mathrm{vars}}\\nolimits}({\\mathord{\\mathit{sh } } } ' ) \\bigr ) { \\cup}f ' { \\cup}l '' , \\\\ \\intertext{where }    l ''      & { { \\mathrel{\\buildrel \\mathrm{def } \\over { = } } } } \\begin{cases }          l { \\setminus}(s_x { \\cap}s_t ) ,            & \\text{if $ { \\mathop{\\mathrm{lin}}\\nolimits}_{{\\mathit{d}}}(x )                         \\land                       { \\mathop{\\mathrm{lin}}\\nolimits}_{{\\mathit{d}}}(t)$ ; } \\\\",
    "l { \\setminus}s_x ,            & \\text{if $ { \\mathop{\\mathrm{lin}}\\nolimits}_{{\\mathit{d}}}(x)$ ; } \\\\",
    "l { \\setminus}s_t ,            & \\text{if $ { \\mathop{\\mathrm{lin}}\\nolimits}_{{\\mathit{d}}}(t)$ ; } \\\\",
    "l { \\setminus}(s_x { \\cup}s_t ) ,            & \\text{otherwise . } \\\\",
    "\\end{cases } \\intertext{then }    { { \\mathop{\\mathrm{amgu}}\\nolimits}_{\\scriptscriptstyle s}}\\bigl({\\mathit{d } } , x \\mapsto t\\bigr )      & { { \\mathrel{\\buildrel \\mathrm{def } \\over { = } } } } \\begin{cases }          { \\bot_{\\scriptscriptstyle s } } ,            & \\text{if \\ ( { \\mathit{d}}= { \\bot_{\\scriptscriptstyle s}}\\lor                         \\bigl(t = { \\ensuremath{\\mathcal{ft}}}\\land x \\in { \\mathop{\\mathrm{vars}}\\nolimits}(t)\\bigr )                      \\ ) ; } \\\\",
    "\\langle { \\mathord{\\mathit{sh } } } ' , f ' , l ' \\rangle            & \\text{otherwise . }",
    "\\end{cases}\\end{aligned}\\ ] ]    the next result states that the abstract @xmath0 operator is a correct approximation of the concrete one .",
    "[ thm : soundness - of - amgusfl ] let @xmath279 and @xmath277 , where @xmath305 . then , for all @xmath280 and @xmath312 in the syntactic equality theory @xmath92 , we have @xmath313    we now highlight the similarities and differences of the operator @xmath314 with respect to the corresponding ones defined in the `` classical '' proposals for the integration of set - sharing with freeness and linearity , such as  @xcite . note that , when comparing our domain with the proposal in  @xcite , we deliberately ignore all those enhancements that depend on properties that can not be represented in @xmath2 ( i.e. , compoundness and explicit structural information ) .    * in the computation of the set - sharing component , the main difference can be observed in the second , third and fourth cases of the definition of @xmath315 : here we omit one of the star - unions even when the terms @xmath74 and @xmath21 possibly share .",
    "in contrast , in  @xcite the corresponding star - union is avoided only when @xmath316 holds .",
    "note that when @xmath316 holds in the second case of @xmath315 , then we have @xmath317 ; thus , the whole computation for this case reduces to @xmath318 , as was the case in the previous proposals .",
    "* another improvement on the set - sharing component can be observed in the definition of @xmath319 : the @xmath320 operator allows the set - sharing description to be further enhanced when dealing with _ explicitly cyclic bindings _ , i.e. , when @xmath321 .",
    "this is the rewording of a similar enhancement proposed in  @xcite for the domain @xmath322 in the context of groundness analysis .",
    "its net effect is to recover some groundness and sharing dependencies that would have been unnecessarily lost when using the standard operators .",
    "when @xmath323 , we have @xmath324 . * the computation of the freeness component @xmath325 is the same as specified in  @xcite , and is more precise than the one defined in  @xcite . *",
    "the computation of the linearity component @xmath263 is the same as specified in  @xcite , and is more precise than those defined in  @xcite .    in the following examples we show that the improvements in the abstract computation of the sharing component allow , in particular cases , to derive better information than that obtainable by using the classical abstract unification operators .",
    "[ ex : amgusfl - both - lin - share ] let @xmath326 and @xmath67 such that @xmath327 by definition  [ def : abstrsfl ] , we have @xmath328 , where @xmath329 consider the binding @xmath330 . in the concrete domain ,",
    "we compute ( a substitution equivalent to ) @xmath331 , where @xmath332 note that @xmath333 , where @xmath334 , so that the pairs of variables @xmath335 and @xmath336 keep their independence .",
    "when evaluating the sharing component of @xmath337 , using the notation of definition  [ def : amgusfl ] , we have @xmath338 since both @xmath339 and @xmath340 hold , we apply the second case of the definition of @xmath315 so that @xmath341 finally , as the binding is not cyclic , we obtain @xmath342 .",
    "thus @xmath314 captures the fact that pairs @xmath343 and @xmath344 keep their independence .",
    "in contrast , since @xmath345 does not hold , all of the classical definitions of abstract unification would have required the star - closure of both @xmath346 and @xmath347 , resulting in an abstract element including , among the others , the sharing group @xmath348 . since @xmath349",
    ", this independence information would have been unnecessarily lost .",
    "similar examples can be devised for the third and fourth cases of the definition of @xmath315 , where only one side of the binding is known to be linear .",
    "the next example shows the precision improvements arising from the use of the @xmath320 operator .",
    "[ ex : amgusfl - cyclicreduce ] let @xmath350 and @xmath351 . by definition  [ def :",
    "abstrsfl ] , we have @xmath328 , where @xmath352 let @xmath353 and consider the cyclic binding @xmath277 .",
    "in the concrete domain , we compute ( a substitution equivalent to ) @xmath354 , where @xmath355 note that if we further instantiate @xmath225 by grounding @xmath27 , then variables @xmath74 , @xmath53 and @xmath356 would become ground too .",
    "formally we have @xmath333 , where @xmath357 .",
    "thus , as observed above , @xmath27 covers @xmath74 , @xmath53 and @xmath356 .",
    "when abstractly evaluating the binding , we compute @xmath358 since both @xmath339 and @xmath298 hold , we apply the second case of the definition of @xmath315 , so that @xmath359 thus , as @xmath321 , we obtain @xmath360 note that , in the element @xmath361 ( which is the abstract element that would have been computed when not exploiting the @xmath320 operator ) variable @xmath27 covers none of variables @xmath74 , @xmath53 and @xmath356 . thus , by applying the @xmath320 operator , this covering information is restored .    the full abstract unification operator @xmath362 , capturing the effect of a sequence of bindings on an abstract element , can now be specified by a straightforward inductive definition using the operator @xmath314 .",
    "[ def : aunifysfl ] the operator @xmath363 is defined , for each @xmath279 and each sequence of bindings @xmath364 , by @xmath365    note that the second argument of @xmath362 is a _ sequence _ of bindings ( i.e. , it is not a substitution , which is a _ set _ of bindings ) , because @xmath314 is neither commutative nor idempotent , so that the multiplicity and the actual order of application of the bindings can influence the overall result of the abstract computation .",
    "the correctness of the @xmath362 operator is simply inherited from the correctness of the underlying @xmath314 operator . in particular , any reordering of the bindings in the sequence @xmath366 still results in a correct implementation of @xmath362 .",
    "the ` merge - over - all - path ' operator on the domain @xmath2 is provided by @xmath181 and is correct by definition .",
    "finally , we define the abstract existential quantification operator for the domain @xmath2 , whose correctness does not pose any problem .",
    "[ def : aprojsfl ] the function @xmath367 provides the _ abstract existential quantification _ of an element with respect to a subset of the variables of interest . for each @xmath368 and @xmath151 , @xmath369    the intuition behind the definition of the abstract operator",
    "@xmath370 is the following . as explained in section  [ sec : prelims ] ,",
    "any substitution @xmath67 can be interpreted , under the given equality theory @xmath92 , as a first - order logical formula ; thus , for each set of variables @xmath371 , it is possible to consider the ( concrete ) existential quantification @xmath372 .",
    "the goal of the abstract operator @xmath370 is to provide a correct approximation of such a quantification starting from any correct approximation for @xmath36 .",
    "let @xmath373 and @xmath374 , so that , by definition  [ def : abstrsfl ] , @xmath375 let @xmath376 and consider the concrete element corresponding to the logical formula @xmath372 . note that @xmath377 , where @xmath378 . by applying definition  [ def : aprojsfl ]",
    ", we obtain @xmath379 it is worth stressing that such an operator does not affect the set @xmath146 of the variables of interest .",
    "in particular , the abstract element @xmath380 still has to provide correct information about variables @xmath27 and @xmath115 .",
    "intuitively , since all the occurrences of @xmath27 and @xmath115 in @xmath372 are bound by the existential quantifier , the two variables of interest are un - aliased , free and linear .",
    "note that an abstract _ projection _ operator , i.e. , an operator that actually modifies the set of variables of interest , is easily specified by composing the operator @xmath370 with an operator that simply removes , from all the components of @xmath2 _ and _ from the set of variables of interest @xmath146 , those variables that have to be projected out .",
    "as we have already observed , example  [ ex : amgusfl - both - lin - share ] shows that the abstract domain @xmath2 , when equipped with the abstract mgu operator introduced in section  [ subsec : sfl - operators ] , can yield results that are strictly more precise than all the classical combinations of set - sharing with freeness and linearity information . in this section",
    "we show that the same example has another interesting , unexpected consequence , since it can be used to formally prove that all the classical combinations of set - sharing with freeness and linearity , including those presented in  @xcite , are not _ uniformly _ more precise than the abstract domain @xmath1  @xcite , which is based on pair - sharing .    to formalize the above observation",
    ", we now introduce the @xmath1 domain and the corresponding abstract semantics operators as specified in  @xcite .",
    "the elements of the abstract domain @xmath1 have two components : the first one is a set of variables that are known to be definitely ground ; the second one encodes both possible pair - sharing and possible non - linearity into a single relation defined on the set of variables .",
    "intuitively , when @xmath381 and @xmath382 occurs in the second component , then @xmath74 and @xmath27 may share a variable ; when @xmath383 occurs in the second component , then @xmath74 may be non - linear .",
    "the second component always encodes a symmetric relation ; thus , for notational convenience and without any loss of generality  @xcite , we will represent each pair @xmath384 in such a relation as the sharing group @xmath385 , which will have cardinality 1 or 2 depending on whether @xmath386 or not , respectively .",
    "[ def : asub ] the abstract domain @xmath387 is defined as @xmath388 , where @xmath389 for @xmath390 , let @xmath391 . then @xmath392 the partial order @xmath393 is extended on @xmath394 by letting @xmath395 be the bottom element .",
    "let @xmath396 and @xmath397 .",
    "then @xmath398 is a shorthand for the condition @xmath399 , whereas @xmath400 is a shorthand for @xmath401 .",
    "it is well - known that the domain @xmath394 can be obtained by a further abstraction of any domain such as @xmath2 that is based on set - sharing and enhanced with linearity information .",
    "the following definition formalizes this abstraction .",
    "[ def : abstrasub ] let @xmath269 .",
    "then @xmath402 where @xmath403    the definition of abstract unification in  @xcite is based on a few auxiliary operators .",
    "the first of these introduces the concept of abstract multiplicity for a term under a given abstract substitution , therefore modeling the notion of definite groundness and definite linearity .",
    "[ def : chi ] let @xmath397 and let @xmath39 be a term such that @xmath404 .",
    "we say that @xmath31 _ occurs linearly ( in @xmath21 ) in @xmath405 _ if and only if @xmath406 holds for @xmath407 , where @xmath408    it is worth noting that , modulo a few insignificant differences in notation , the multiplicity operator @xmath409 defined above corresponds to the abstract multiplicity operator @xmath410 , which was introduced in  ( * ? ? ?",
    "* definition  3.4 ) and provided with an executable specification in  ( * ? ? ?",
    "* definition  4.3 ) .",
    "similarly , the next definition corresponds to  ( * ? ? ?",
    "* definition  4.3 ) .",
    "[ def : soln ] for each @xmath411 and @xmath277 , where @xmath412 and @xmath413 are such that @xmath414 , the function @xmath415 is defined as follows @xmath416    the next definition corresponds to  ( * ? ? ?",
    "* definition  4.5 ) .",
    "[ def : abstract - composition ] let @xmath417 , where @xmath418 and @xmath419 .",
    "then @xmath420 , where @xmath421    we are now ready to define the abstract @xmath0 operator for the domain @xmath394 .",
    "this operator can be viewed as a specialization of  ( * ? ? ?",
    "* definition  4.6 ) for the case when we have to abstract a single binding .",
    "[ def : amguasub ] let @xmath422 and @xmath277 , where @xmath305 .",
    "then @xmath423    by repeating the abstract computation of example  [ ex : amgusfl - both - lin - share ] on the domain @xmath1 , we provide a formal proof that all the classical approaches based on set - sharing are not uniformly more precise than the pair - sharing domain @xmath1 .    [",
    "ex : amguasub - both - lin - share ] consider the substitutions @xmath122 and the abstract element @xmath279 as introduced in example  [ ex : amgusfl - both - lin - share ] .    by definition  [ def : abstrasub ] ,",
    "we obtain @xmath424 , where @xmath425    when abstractly evaluating the binding @xmath426 according to definition  [ def : amguasub ] , we compute the following : @xmath427 where @xmath428 note that @xmath429 and @xmath430 , so that these pairs of variables keep their independence . in contrast , as observed in example  [ ex : amgusfl - both - lin - share ] , the operators in  @xcite will fail to preserve the independence of these pairs .",
    "we now show that the abstract domain @xmath2 , when equipped with the operators introduced in section  [ subsec : sfl - operators ] , is uniformly more precise than the domain @xmath1 .",
    "in particular , the following theorem states that the abstract operator @xmath314 of definition  [ def : amgusfl ] is uniformly more precise than the abstract operator @xmath431 .",
    "[ thm : amgusfl - uniformly - more - precise - than - amguasub ] let @xmath279 and @xmath432 be such that @xmath433 .",
    "let also @xmath277 , where @xmath305 .",
    "then @xmath434    similar results can be stated for the other abstract operators , such as the abstract existential quantification @xmath370 and the merge - over - all - path operator @xmath181 .",
    "it is worth stressing that , when sequences of bindings come into play , the specification provided in  ( * ? ? ?",
    "* definition  4.7 ) requires that the _ grounding _ bindings ( i.e. , those bindings such that @xmath435 ) are evaluated before the non - grounding ones .",
    "clearly , if we want to lift the result of theorem  [ thm : amgusfl - uniformly - more - precise - than - amguasub ] so that it also applies to the operator @xmath362 , the same evaluation strategy has to be adopted when computing on the domain @xmath2 ; this improvement is well - known  @xcite and already exploited in most implementations of sharing analysis  @xcite .",
    "as done in  @xcite for the plain set - sharing domain @xmath149 , even when considering the richer domain @xmath2 it is natural to question whether it contains redundancies with respect to the computation of the observable properties .",
    "it is worth stressing that the results presented in  @xcite and  @xcite can not be simply inherited by the new domain .",
    "the concept of `` redundancy '' depends on both the starting domain and the given observables : in the @xmath2 domain both of these have changed .",
    "first of all , as can be seen by looking at the definition of @xmath314 , freeness and linearity positively interact in the computation of sharing information : _ a priori _ it is an open issue whether or not the `` redundant '' sharing groups can play a role in such an interaction . secondly ,",
    "since freeness and linearity information can be themselves usefully exploited in a number of applications of static analysis ( e.g. , in the optimized implementation of concrete unification or in occurs - check reduction ) , these properties have to be included in the observables .",
    "we will now show that the domain @xmath2 can be simplified by applying the same notion of redundancy as identified in @xcite .",
    "namely , in the definition of @xmath2 it is possible to replace the set - sharing component @xmath149 by @xmath157 without affecting the precision on groundness , independence , freeness and linearity . in order to prove such a claim , we now formalize the new observable properties .",
    "[ def : sfl - observables ] the ( overloaded ) _ groundness _ and _ independence _",
    "observables @xmath437 are defined , for each @xmath438 , by @xmath439    the overloading of @xmath440 working on the domain @xmath2 is the straightforward extension of the corresponding operator on @xmath149 : in particular , the freeness and linearity components are left untouched .",
    "[ def : rhopsd - for - sfl ] for each @xmath438 , the operator @xmath441 is defined by @xmath442 this operator induces the lattice @xmath443 .",
    "as proved in  @xcite , we have that @xmath444 ; by the above definitions , it is also clear that @xmath445 ; thus , @xmath440 is more precise than the reduced product @xmath446 .",
    "informally , this means that the domain @xmath436 is able to _ represent _ all of our observable properties without precision losses .",
    "the next theorem shows that @xmath440 is a congruence with respect to the @xmath362 , @xmath181 and @xmath370 operators .",
    "this means that the domain @xmath436 is able to _ propagate _ the information on the observables as precisely as @xmath2 , therefore providing a completeness result .",
    "[ thm : psd - precise - for - sfl ] let @xmath447 be such that @xmath448 .",
    "then , for each sequence of bindings @xmath364 , for each @xmath449 and @xmath450 , @xmath451    finally , by providing the minimality result , we show that the domain @xmath436 is indeed the generalized quotient  @xcite of @xmath2 with respect to the reduced product @xmath452    [ thm : psd - aunifysfl : minimality ] for each @xmath453 , let @xmath454 be such that @xmath455 .",
    "then there exist a sequence of bindings @xmath364 and an observable property @xmath456 such that @xmath457    as far as the implementation is concerned , the results proved in  @xcite for the domain @xmath157 can also be applied to @xmath436 .",
    "in particular , in the definition of @xmath314 every occurrence of the star - union operator can be safely replaced by the self - bin - union operator . as a consequence ,",
    "it is possible to provide an implementation where the time complexity of the @xmath314 operator is bounded by a polynomial in the number of sharing groups of the set - sharing component .",
    "the following result provides another optimization that can be applied when both terms @xmath74 and @xmath21 are definitely linear , but none of them is definitely free ( i.e. , when we compute @xmath315 by the second case stated in definition  [ def : amgusfl ] ) .",
    "[ thm : psd - precise - for - sfl : inner - bin - unions - useless ] let @xmath155 and @xmath458 , where @xmath305 .",
    "let @xmath459 , @xmath460 , @xmath461 , @xmath462 , @xmath463 , where @xmath464 , and @xmath465 then it holds @xmath466    therefore , even when terms @xmath74 and @xmath21 possibly share ( i.e. , when @xmath467 ) , by using @xmath436 we can avoid the expensive computation of at least one of the two inner binary unions in the expression for @xmath468 .",
    "example  [ ex : amgusfl - both - lin - share ] shows that an analysis based on the new abstract unification operator can be strictly more precise than one based on the classical proposal .",
    "however , that example is artificial and leaves open the question as to whether or not such a phenomenon actually happens during the analysis of real programs and , if so , how often .",
    "this was the motivation for the experimental evaluation we describe in this section .",
    "we consider the abstract domain @xmath469  @xcite , where the non - redundant version @xmath436 of the domain @xmath2 is further combined , as described in  ( * ? ? ?",
    "* section  4 ) , with the definite groundness information computed by @xmath322 and compare the results using the ( classical ) abstract unification operator of  ( * ? ? ?",
    "* definition  4 ) with the ( new ) operator @xmath314 given in definition  [ def : amgusfl ] . taking this as a starting point",
    ", we experimentally evaluate eight variants of the analysis arising from all possible combinations of the following options :    1 .   the analysis can be goal independent or goal dependent ; 2 .",
    "the set - sharing component may or may not have widening enabled  @xcite ; 3 .   the abstract domain may or may not be upgraded with structural information using the @xmath470 operator ( see  @xcite and  ( * ? ? ?",
    "* section  5 ) ) .",
    "the experiments have been conducted using the analyzer  @xcite on a gnu / linux pc system .",
    "is a data - flow analyzer for ( constraint ) logic programs performing bottom - up analysis and deriving information on both call - patterns and success - patterns by means of program transformations and optimized fixpoint computation techniques .",
    "an abstract description is computed for the call- and success - patterns for each predicate defined in the program .",
    "the benchmark suite , which is composed of 372 logic programs of various sizes and complexity , can be considered representative .",
    "the precision results for the goal independent comparisons are summarized in table  [ tab : oldmodes - vs - newmodes - precision ] . for each benchmark",
    ", precision is measured by counting the number of independent pairs as well as the numbers of definitely ground , free and linear variables detected . for each variant of the analysis ,",
    "these numbers are then compared by computing the relative precision improvements and expressing them using percentages .",
    "the benchmark suite is then partitioned into several precision equivalence classes and the cardinalities of these classes are shown in table  [ tab : oldmodes - vs - newmodes - precision ] .",
    "for example , when considering a goal independent analysis without structural information and without widenings , the value 5 found at the intersection of the row labeled ` @xmath471 ' with the column labeled ` i ' should be read : `` for five benchmarks there has been a ( positive ) increase in the number of independent pairs of variables which is less than or equal to two percent . ''",
    "note that we only report on independence and linearity ( in the columns labeled ` i ' and ` l ' , respectively ) , because no differences have been observed for groundness and freeness .",
    "the precision class labeled ` unknown ' identifies those benchmarks for which the analyses timed - out ( the time - out threshold was fixed at 600 seconds ) .",
    "hence , for goal independent analyses , a precision improvement affects from 1.6% to 3% of the benchmarks , depending on the considered variant .    when considering the goal dependent analyses , we obtain a single , small improvement , so that no comparison tables are included here : the improvement , affecting linearity information ,",
    "can be observed when the abstract domain includes structural information .    with respect to differences in the efficiency",
    ", the introduction of the new abstract unification operator has no significant effect on the computation time : small differences ( usually improvements ) are observed on as many as 6% of the benchmarks for the goal independent analysis without structural information and without widenings ; other combinations register even less differences .",
    "we note that it is not surprising that the precision and efficiency improvements occur very rarely since the abstract unification operators behave the same except under very specific conditions : the two terms being unified must not only be definitely linear , but also possibly non - free and share a variable .     & & & & + prec .",
    "class & & & & & & & & + @xmath472 &  & 2 &  & 2 &  & 2 &  & 2 + @xmath473 &  &  &  &  &  &  &  & 1 + @xmath474 & 5 & 5 & 9 & 6 & 6 & 6 & 12 & 8 + same precision & 357 & 355 & 337 & 338 & 366 & 364 & 360 & 361 + unknown & 10 & 10 & 26 & 26 &  &  &  &  +",
    "sharing information has been shown to be important for finite - tree analysis  @xcite .",
    "this aims at identifying those program variables that , at a particular program point , can not be bound to an infinite rational tree ( in other words , they are necessarily bound to acyclic terms ) .",
    "this novel analysis is irrelevant for those logic languages computing over a domain of finite trees , while having several applications for those ( constraint ) logic languages that are explicitly designed to compute over a domain including rational trees , such as prolog  ii and its successors @xcite , sicstus prolog @xcite , and oz @xcite .",
    "the analysis specified in  @xcite is based on a parametric abstract domain @xmath475 , where the @xmath476 component ( the herbrand component ) is a set of variables that are known to be bound to finite terms , while the parametric component @xmath477 can be any domain capturing aliasing , groundness , freeness and linearity information that is useful to compute finite - tree information .",
    "an obvious choice for such a parameter is the domain combination @xmath2 . it is worth noting that , in  @xcite , the correctness of the finite - tree analysis is proved by _ assuming _ the correctness of the underlying analysis on the parameter @xmath477 .",
    "thus , thanks to the results shown in this paper , the proof for the domain @xmath478 can now be considered complete .",
    "codish et al .",
    "@xcite describe an algebraic approach to the sharing analysis of logic programs that is based on _ set logic programs_. a set logic program is a logic program in which the terms are sets of variables and standard unification is replaced by a suitable unification for sets , called",
    "_ aci1-unification _",
    "( unification in the presence of an associative , commutative , and idempotent equality theory with a unit element ) .",
    "the authors show that the domain of _ set - substitutions _ , with a few modifications , can be used as an abstract domain for sharing analysis .",
    "they also provide an isomorphism between this domain and the set - sharing domain @xmath149 of jacobs and langen .",
    "the approach using set logic programs is also generalized to include linearity information , by suitably annotating the set - substitutions , and the authors formally state the optimality of the corresponding abstract unification operator @xmath479 ( lemma  a.10 in the appendix of  @xcite ) .",
    "however , this operator is very similar to the classical combinations of set - sharing with linearity  @xcite : in particular , the precision improvements arising from this enhancement are only exploited when the two terms being unified are definitely independent . as we have seen in this paper , such a choice results in a sub - optimal abstract unification operator , so that the optimality result can not hold . by looking at the proof of lemma  a.10 in  @xcite",
    ", it can be seen that the case when the two terms possibly share a variable is dealt with by referring to an example : this one is supposed to show that all the possible sharing groups can be generated .",
    "however , even our improved operator correctly characterizes the given example , so that the proof is wrong .",
    "it should be stressed that the @xmath314 operator presented in this paper , though remarkably precise , is not meant to subsume all of the proposals for an improved sharing analysis that appeared in the recent literature ( for a thorough experimental evaluation of many of these proposals , the reader is referred to  @xcite ) . in particular , it is not difficult to show that our operator is not the optimal approximation of concrete unification .    in a very recent paper  @xcite ,",
    "j.  howe and a.  king consider the domain @xmath2 and propose three optimizations to improve both the precision and the efficiency of the ( classical ) abstract unification operator .",
    "the first optimization is based on the same observation we have made in this paper , namely that the independence check between the two terms being unified is not necessary for ensuring the correctness of the analysis .",
    "however , the proposed enhancement does not fully exploit this observation , so that the resulting operator is strictly less precise than our @xmath314 operator ( even when the operator @xmath320 does not come into play ) . in fact , the first optimization of  @xcite is not uniformly more precise than the classical proposals .",
    "the following example illustrates this point .",
    "[ ex : amguhw - less - precise - than - classical - amgu ] let @xmath480 , @xmath330 and @xmath481 , where @xmath482 .",
    "since @xmath74 and @xmath27 are linear and independent , @xmath314 as well as all the classical abstract unification operators will compute @xmath483 , where @xmath484 in contrast , a computation based on  , results in the less precise abstract element @xmath485 , where @xmath486    the second optimization shown in  @xcite is based on the enhanced combination of set - sharing and freeness information , which was originally proposed in  @xcite . in particular , the authors propose a slightly different precision enhancement , less powerful as far as precision is concerned , which however seems to be amenable for an efficient implementation .",
    "the third optimization in  @xcite exploits the combination of the domain @xmath2 with the groundness domain @xmath322 .",
    "in this paper we have introduced the abstract domain @xmath2 , combining the set - sharing domain @xmath149 with freeness and linearity information .",
    "while the carrier of @xmath2 can be considered standard , we have provided the specification of a new abstract unification operator , showing examples where this operator achieves more precision than the classical proposals .",
    "the main contributions of this paper are the following :    * we have defined a precise abstraction function , mapping arbitrary substitutions in rational solved form into their _ most precise _ approximation on @xmath2 ; * using this abstraction function , we have provided the mandatory proof of _ correctness _ for the new abstract unification operator , _ for both finite - tree and rational - tree languages _ ; * we have formally shown that the domain @xmath2 is _ uniformly _ more precise than the domain @xmath1 ; we have also provided an example showing that all the classical approaches to the combinations of set - sharing with freeness and linearity fail to satisfy this property ; * we have shown that , in the definition of @xmath2 , we can replace the set - sharing domain @xmath149 by its non - redundant version @xmath157 . as a consequence ,",
    "it is possible to implement an algorithm for abstract unification running in _ polynomial time _ and still obtain the same precision on all the considered observables , that is groundness , independence , freeness and linearity .",
    "we recognize the hard work required to review technical papers such as this one and would like to express our real gratitude to the journal referees for their critical reading and constructive suggestions for preparing this improved version .      ,",
    "gori , r. , hill , p.  m. , and zaffanella , e. 2001 .",
    "finite - tree analysis for constraint logic - based languages . in _",
    "static analysis : 8th international symposium , sas 2001 _ , p.  cousot , ed .",
    "lecture notes in computer science , vol .",
    "springer - verlag , berlin , paris , france , 165184 .    , hill , p.  m. , and zaffanella , e. 1997 .",
    "set - sharing is redundant for pair - sharing . in _",
    "static analysis : proceedings of the 4th international symposium _ , p.  van hentenryck , ed .",
    "lecture notes in computer science , vol . 1302 .",
    "springer - verlag , berlin , paris , france , 5367 .    , hill , p.  m. , and zaffanella , e. 2000 .",
    "efficient structural information analysis for real clp languages . in _ proceedings of the 7th international conference on logic for programming and automated reasoning ( lpar 2000 ) _ ,",
    "m.  parigot and a.  voronkov , eds .",
    "lecture notes in artificial intelligence , vol . 1955 .",
    "springer - verlag , berlin , runion island , france , 189206 .      , zaffanella , e. , gori , r. , and hill , p.  m. 2001 .",
    "boolean functions for finite - tree dependencies . in _ proceedings of the 8th international conference on logic for programming , artificial intelligence and reasoning ( lpar 2001 ) _ , r.  nieuwenhuis and a.  voronkov , eds .",
    "lecture notes in artificial intelligence , vol .",
    "springer - verlag , berlin , havana , cuba , 579594 .    , zaffanella , e. , and hill , p.  m. 2000 . enhanced sharing analysis techniques : a comprehensive evaluation . in _ proceedings of the 2nd international acm sigplan conference on principles and practice of declarative programming _ ,",
    "m.  gabbrielli and f.  pfenning , eds .",
    "association for computing machinery , montreal , canada , 103114 .",
    "freeness , sharing , linearity and correctness  all at once . in _ static analysis , proceedings of the third international workshop _ , p.  cousot , m.  falaschi , g.  fil , and a.  rauzy , eds .",
    "lecture notes in computer science , vol .",
    "springer - verlag , berlin , padova , italy , 153164 .",
    "an extended version is available as technical report cw  179 , department of computer science , k.u .",
    "leuven , september 1993 .    ,",
    "codish , m. , and mulkers , a. 1994a .",
    "abstract unification for a composite domain deriving sharing and freeness properties of program variables . in _ verification and analysis of logic languages , proceedings of the w2 post - conference workshop , international conference on logic programming _",
    ", f.  s. de boer and m.  gabbrielli , eds .",
    "santa margherita ligure , italy , 213230 .    , codish , m. , and mulkers , a. 1994b . a composite domain for freeness , sharing , and compoundness analysis of logic programs .",
    "technical report cw  196 , department of computer science , k.u .",
    "leuven , belgium .",
    "july .    , codish , m. , and mulkers , a. 1995 . abstracting unification : a key step in the design of logic program analyses . in",
    "_ computer science today : recent trends and developments _ , j.  van leeuwen , ed .",
    "lecture notes in computer science , vol .",
    "springer - verlag , berlin , 406425 .      , dams , d. , fil , g. , and bruynooghe , m. 1993 .",
    "freeness analysis for logic programs  and correctness ?",
    "in _ logic programming : proceedings of the tenth international conference on logic programming _ , d.  s. warren , ed .",
    "mit press series in logic programming . the mit press , budapest , hungary , 116131 .",
    "an extended version is available as technical report cw  161 , department of computer science , k.u .",
    "leuven , december 1992 .          , mulkers , a. , bruynooghe , m. , garca de  la banda , m. , and hermenegildo , m. 1993 . improving abstract interpretations by combining domains . in _ proceedings of the acm sigplan symposium on partial evaluation and semantics - based program manipulation_. acm press , copenhagen , denmark , 194205 . also available as technical report cw  162 ,",
    "department of computer science , k.u .",
    "leuven , december 1992 .",
    "abstract interpretation : a unified lattice model for static analysis of programs by construction or approximation of fixpoints . in _ proceedings of the fourth annual acm symposium on principles of programming languages_. acm press , new york , 238252 .",
    ", ranzato , f. , and scozzari , f. 1998 .",
    "complete abstract interpretations made constructive .",
    "in _ proceedings of 23rd international symposium on mathematical foundations of computer science ( mfcs98 ) _ , j.  gruska and j.  zlatuska , eds .",
    "lecture notes in computer science , vol . 1450 .",
    "springer - verlag , berlin , 366377 .      ,",
    "bagnara , r. , and zaffanella , e. 1998 .",
    "the correctness of set - sharing . in _",
    "static analysis : proceedings of the 5th international symposium _ , g.  levi , ed .",
    "lecture notes in computer science , vol . 1503 .",
    "springer - verlag , berlin , pisa , italy , 99114 .      , bagnara , r. , and zaffanella , e. 2003 . on the analysis of set - sharing , freeness and linearity for finite and rational tree languages .",
    "tech . rep .",
    "2003.08 , school of computing , university of leeds .",
    "available at http://www.comp.leeds.ac.uk/research/pubs/reports.shtml .",
    "accurate and efficient approximation of variable aliasing in logic programs .",
    "in _ logic programming : proceedings of the north american conference _ ,",
    "e.  l. lusk and r.  a. overbeek , eds . mit press series in logic programming .",
    "the mit press , cleveland , ohio , usa , 154165 .        \\1994 . a synergistic analysis for sharing and groundness which traces linearity . in _ proceedings of the fifth european symposium on programming _ , d.  sannella , ed .",
    "lecture notes in computer science , vol . 788 .",
    "springer - verlag , berlin , edinburgh , uk , 363378 .",
    "\\1994 . depth-@xmath488 sharing and freeness . in _ logic programming : proceedings of the eleventh international conference on logic programming _ , p.  van hentenryck , ed .",
    "mit press series in logic programming . the mit press , santa margherita ligure , italy , 553568 .      \\1988 .",
    "complete axiomatizations of the algebras of finite , rational and infinite trees . in _ proceedings , third annual symposium on logic in computer science_. ieee computer society press , edinburgh , scotland , 348357 .",
    "an application of abstract interpretation of logic programs : occur check reduction . in _ proceedings of the 1986 european symposium on programming _ , b.  robinet and r.  wilhelm , eds .",
    "lecture notes in computer science , vol .",
    "springer - verlag , berlin , 327338 .",
    "correctness , precision and efficiency in the sharing analysis of real logic languages .",
    "ph.d . thesis ,",
    "school of computing , university of leeds , leeds , u.k .",
    "available at http://www.cs.unipr.it/~zaffanella/.    , bagnara , r. , and hill , p.  m. 1999 .",
    "widening sharing . in _ principles and practice of declarative programming _",
    ", g.  nadathur , ed .",
    "lecture notes in computer science , vol . 1702 .",
    "springer - verlag , berlin , paris , france , 414431 .    , hill , p.  m. , and bagnara , r. 1999 .",
    "decomposing non - redundant sharing by complementation . in _",
    "static analysis : proceedings of the 6th international symposium _ ,",
    "a.  cortesi and g.  fil , eds .",
    "lecture notes in computer science , vol . 1694 .",
    "springer - verlag , berlin , venice , italy , 6984 ."
  ],
  "abstract_text": [
    "<S> it is well - known that freeness and linearity information positively interact with aliasing information , allowing both the precision and the efficiency of the sharing analysis of logic programs to be improved . in this paper </S>",
    "<S> we present a novel combination of set - sharing with freeness and linearity information , which is characterized by an improved abstract unification operator . </S>",
    "<S> we provide a new abstraction function and prove the correctness of the analysis for both the finite tree and the rational tree cases . </S>",
    "<S> moreover , we show that the same notion of redundant information as identified in  @xcite also applies to this abstract domain combination : this allows for the implementation of an abstract unification operator running in polynomial time and achieving the same precision on all the considered observable properties .    abstract interpretation ; logic programming ; abstract unification ; rational trees ; set - sharing ; freeness ; linearity . </S>"
  ]
}