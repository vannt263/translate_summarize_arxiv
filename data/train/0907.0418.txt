{
  "article_text": [
    "the goal of this paper is to post - process the output from an optical character recognition ( ocr ) program and identify a list of words which the program got correct .",
    "the motivation is to use these correct words to build new ocr models based upon training data from the document itself , i.e. , to build a document - specific model .    in this paper , we focus on the first step  identifying the correct words in someone else s ocr program output .",
    "while this may seem like an easy thing to do , to our knowledge , there are no existing techniques to perform this task with very high accuracy .",
    "there are many methods that could be used to produce lists of words that are mostly correct , but contain some errors .",
    "unfortunately , such lists are not much good as training data for document - specific models since they contain errors , and these errors in training propagate to create more errors later .",
    "thus , it is essential that our error rate be very low in the list of words we choose as correct .",
    "as described below , we do not in fact make any errors at all in our generated lists , which makes them appropriate for training document specific models . before going into the details of our method and how we achieve an empirical error rate of 0% for this task",
    ", we give some background on why we believe this problem and our approach are interesting .",
    "humans and machines both make lots of errors in recognition problems . however , one of the most interesting differences between people and machines is that , for some inputs , humans are extremely confident of their results and appear to be well - justified in this confidence .",
    "machines , on the other hand , while producing numbers such as posterior probabilities which are supposed to represent confidences , are often wrong even when posterior probabilities are extremely close to 1 .",
    "this is a particularly vexing problem when using generative models in areas like computer vision and pattern recognition .",
    "consider a two class problem in which we are discriminating between two similar image classes , @xmath0 and @xmath1 .",
    "because images are so high - dimensional , likelihood exponents are frequently very small , and small errors in these exponents can render the posteriors meaningless .",
    "for example , suppose that @xmath2 and @xmath3 , where @xmath4 and @xmath5 represent errors in the estimates of the image distributions .",
    "assuming an equal prior on @xmath0 and @xmath1 , if @xmath4 and @xmath5 are gaussian distributed with standard deviation similar to the differences in the exponents , then we will frequently conclude , incorrectly , that @xmath6 and @xmath7 .",
    "this phenomenon , which is quite common in computer vision , makes it quite difficult to assess confidence values in recognition problems .    as an alternative to estimating posterior probabilities very accurately in order to be sure of certain results",
    ", we suggest an alternative .",
    "we formulate our confidence estimate as an hypothesis test that a certain result is _ incorrect _ , and if there is sufficient evidence , we reject the hypothesis that the result is incorrect .",
    "as we shall see , this comes closer to _ bounding _ the probabilities of certain results , which can be done with greater confidence , than _ estimating _ the probability of results , which is much more difficult .",
    "a critical aspect of our approach is that if there is insufficient evidence to reject a hypothesis , then _ we make no decision at all . _",
    "our process only makes decisions when there is enough evidence , and avoids making decisions when there is not .",
    "more formally , we search for cases in which our conservative bounds on the probability of error are non - vacuous ",
    "if they are vacuous , we make no decision .      despite claims to the contrary , getting ocr systems to obtain very high accuracy rates on moderately degraded documents",
    "continues to be a challenging problem @xcite .",
    "one promising approach to achieving very high ocr accuracy rates is to incorporate _ document specific modeling _",
    "this set of approaches attempts to refine ocr models to specifically model the document currently being processed by adapting to the fonts in the document , adapting to the noise model in the document , or adapting to the lexicon in the document .",
    "if one had some method for finding a sample of words in a document which were known to be correct with high confidence , one could effectively use the characters in such words as training data with which to build document specific models of the fonts in a document .",
    "this chicken - and - egg problem is not easy to solve , however . *",
    "our main result in this paper is to present a method for post - processing third party ocr outputs , in moderately difficult documents , to produce lists of words that are 100% correct .",
    "* as a comparison with our results , we do experiments using a public domain ocr system that maintains a built - in confidence measure for its own outputs .",
    "we show that there is no threshold on this confidence value that produces clean word lists for most documents without either an unacceptably small number of correct words ( usually 0 ) , or an unacceptably large percentage of errors .    in this paper , we consider a completely new approach to obtaining a `` clean word list '' for document specific modeling . rather than trying to estimate the probability that an intermediate output of an ocr system ( like an hmm or crf ) is correct and",
    "then thresholding this probability , we instead form a set of hypotheses about each word in the document .",
    "each hypothesis poses that one particular word of the first - pass ocr system is incorrect .",
    "we then search for hypotheses that we can reject with high confidence .",
    "more formally , we treat a third party ocr system ( in this case , the open source ocr program tesseract @xcite ) as a null hypothesis generator , in which each attempted transcription @xmath8 produced by the ocr system is treated as the basis for a separate null hypothesis . the null hypothesis for word @xmath8",
    "is simply `` _",
    "transcription @xmath8 is incorrect . _ '' .",
    "letting @xmath9 be the true identity of a transcription @xmath8 , we notate this as @xmath10    our goal is to find as many hypotheses as possible that can be rejected _ with high confidence_. for the purposes of this paper , we take high confidence to mean with fewer than 1 error in a million rejected hypotheses .",
    "since we will only be attempting to reject a few hundred hypotheses , this implies we should nt make any errors at all . as our results section shows , we do not make any errors in our clean word lists , even when they come from quite challenging documents .    before proceeding",
    ", we stress that the following are * not * goals of this paper :    * to present a complete system for ocr , * to produce high area under a precision recall curve for all of the words in a document , * to produce accurate estimates of the probability of error of particular words in ocr .",
    "once again , our goal is simply to produce large lists of clean words from ocr output so that we can use them for document - specific modeling . after presenting our method for producing clean word lists",
    ", we provide a formal analysis of the bounds on the probability of incorrectly including a word in our clean word list , under certain assumptions .",
    "when our assumptions hold , our error bound is very loose , meaning our true probability of error is much lower .",
    "however , some documents do in fact violate our assumptions .",
    "finally , we give an example of what can be done with the clean word lists by showing some simple error correction results on a real - world ocr problem .",
    "in this section , we present our method for taking a document and the output of an ocr system and producing a so - called _ clean word list , _ i.e. a list of words which we believe to be correct , with high confidence",
    ". our success will be measured by the number of words that can be produced , and whether we achieve a very low error rate . a priori",
    ", we decided that our method would be a failure if it produced more than a single error per document processed . to be a success",
    ", we must produce a clean word list which is long enough to produce an interesting amount of training data for document - specific processing .",
    "we assume the following setup .",
    "* we are provided with a document @xmath11 in the form of a grayscale image .",
    "* we are provided with an ocr program . from here",
    "forward , we will use the open source ocr program tesseract as our default ocr program . *",
    "we further assume that the ocr program can provide an _ attempted _ segmentation of the document @xmath11 into words , and that the words are segmented into characters . _",
    "it is not necessary that the segmentation be entirely correct , but merely that the program produces an attempted segmentation . _ * in addition to a segmentation of words and letters , the program should produce a best guess for every character it has segmented , and hence , by extension , of every word ( or string ) it has segmented . of course",
    ", we do not expect all of the characters or words to be correct , as that would make our exercise pointless . * using the segmentations provided by the ocr program , we assume we can extract the gray - valued bitmaps representing each guessed character from the original document . * finally , we assume we are given a lexicon .",
    "our method is relatively robust to the choice of lexicon , and assumes there will be a significant number of non - dictionary words .",
    "we define a few terms before proceeding .",
    "we define the _ hamming distance _ between two strings of the same number of characters to be the number of character substitutions necessary to convert one string to the other .",
    "we define the _ hamming ball _ of radius @xmath12 for a word @xmath9 , @xmath13 , to be the set of strings whose hamming distance to @xmath9 is less than or equal to @xmath12 . later , after defining certain equivalence relationships among highly confusable characters such as `` o '' and `` c '' , we define a _ pseudo - hamming distance _ which is equivalent to the hamming distance except that it ignores substitutions among characters in the same equivalence class .",
    "we also use the notions of edit distance , which extends hamming distance by including joins and splits of characters , and pseudo - edit distance , which is edit distance using the aforementioned equivalence classes .",
    "our method for identifying words in the clean list has three basic steps .",
    "we consider each word @xmath8 output by tesseract .    1 .   first ,",
    "if @xmath8 is not a dictionary word , we discard it and make no attempt to classify whether it is correct .",
    "that is , we will not put it on the clean word list .",
    "2 .   second , given that @xmath8 is a dictionary word , we evaluate whether @xmath14 is non - empty , i.e. whether there are any dictionary words for which a single change of a letter can produce another dictionary word .",
    "if so , we discard the word , and again make no attempt to classify whether it is correct .",
    "3 .   assuming we have passed the first two tests , we now perform a _ consistency check _ ( described below ) of each character in the word .",
    "if the consistency check is passed , we declare the word to be correct .    [ [ consistency - check ] ] consistency check + + + + + + + + + + + + + + + + +    in the following , we refer to the bitmap associated with a character whose identity is unknown as a _",
    "glyph_. let @xmath15 be the true character class of the @xmath16th glyph of a word @xmath9 , and let @xmath17 be the tesseract interpretation of the same glyph .",
    "the goal of a consistency check is to try to ensure that the tesseract interpretation of a glyph is reliable",
    ". we will assess reliability by checking whether other similar glyphs usually had the same interpretation by tesseract .    to understand the purpose of the consistency check , consider the following situation .",
    "imagine that a document had a stray mark that did not look like any character at all , but was interpreted by tesseract as a character .",
    "if tesseract thought that the stray mark was a character , it would have to assign it to a character class like `` t '' .",
    "we would like to detect that this character is unreliable .",
    "our scheme for doing this is to find other characters that are similar to this glyph , and to check the identity assigned to those characters by tesseract . if a large majority of those characters are given the same interpretation by tesseract , then we consider the original character to be reliable . since it is unlikely that the characters closest to the stray mark",
    "are clustered tightly around the true character `` t '' , we hope to detect that the stray mark is atypical , and hence unreliable .    more formally , to test a glyph @xmath18 for reliability , we first find the @xmath19 characters in the document that are most similar to @xmath18 .",
    "we then run the following procedure :    * step 1 .",
    "initialize @xmath20 to 1 . *",
    "record the class of the character that is @xmath20th most similar to @xmath18 .",
    "we use normalized correlation as a similarity measure .",
    "if any character class @xmath21 has matched @xmath18 a number of times @xmath22 such that @xmath23 , then declare the character @xmath18 to be * @xmath24-dominated * by the class @xmath21 , and terminate the procedure . *",
    "otherwise , add 1 to i. if @xmath25 , go to step 2 .",
    "if , after the top @xmath19 most similar characters to @xmath18 are evaluated , no character class @xmath21 dominates the glyph , then we declare that the glyph @xmath18 is * undominated*.    there are three possible outcomes of the consistency check .",
    "the first is that the glyph @xmath18 is dominated by the same class @xmath21 as the tesseract interpretation of @xmath18 , namely @xmath17 .",
    "the second outcome is that @xmath18 is dominated by some other class that does not match @xmath17 .",
    "the third outcome is that @xmath18 is undominated . in the latter two cases , we declare the glyph @xmath18 to be _",
    "unreliable_. only if the glyph @xmath18 is dominated by the same class as the tesseract identity of @xmath18 do we declare @xmath18 to be reliable .",
    "furthermore , only if all of the characters in a word are reliable do we declare the word to be reliable or `` clean '' .",
    "the constants used in our experiments were @xmath26 and @xmath27 .",
    "that is , we compared each glyph against a maximum of 20 other glyphs in our reliability check , and we insisted that a `` smoothed '' estimate of the number of similarly interpreted glyphs was at least 0.66% before declaring a character to be reliable .",
    "we now analyze the probability of making an error in the clean set .",
    "for a word in a document , let @xmath9 be the ground truth label of the word , @xmath8 be the tesseract labeling of the word , and @xmath28 be a binary indicator equal to 1 if the word passed the consistency check .",
    "we want to upper bound the probability @xmath29 when @xmath30 is a dictionary word and has an empty hamming ball of size 1 .",
    "@xmath31      we will rewrite the @xmath32 terms as bounds involving @xmath33 using bayes rule . we will make the assumption that the individual character consistency checks are independent , although this is not exactly true , since there may be local noise that degrades characters in a word in the same way .    assume that each character is formed on the page by taking a single true , latent appearance based on the font and the particular character class and adding some amount of noise .",
    "let @xmath34 be an upper bound on the probability that noise has caused a character of any given class to look like it belongs to another specific class other than its own class .",
    "more formally , letting @xmath35 be the probability of a character appearance @xmath36 for a given class @xmath21 under the noise model , @xmath34 satisfies , for all character classes @xmath37 ,    @xmath38    in order to obtain a small value for @xmath34 , and hence later a small probability of error , we revise eq .",
    "[ eq : eps - c ] to be a bound only on _ non - confusable _ character classes . in other words , since some character classes are highly confusable , such as o , c , and e , we ignore such substitutions when computing hamming and edit distance .",
    "we ll refer to these distances as modified distances , so mode and mere have a true hamming distance of 2 but a modified hamming distance of 1 .",
    "this is similar to defining an equivalence relation where confusable characters belong to the same equivalence class , and computing distance over the quotient set , but without transitivity , as , for example , h may be confusable with n , and n may be confusable with u , but h may not necessarily be confusable with u.    for a character to pass a consistency check with the label @xmath39 when the true underlying label is @xmath40 , roughly one of two things must happen : ( a ) either the character was corrupted and looked more like @xmath39 than @xmath40 , or ( b ) some number of other characters with label @xmath39 were corrupted and looked like @xmath40 s .",
    "the probability ( a ) is clearly upper bounded by @xmath34 , since it requires both the corruption and most of its neighbors to have the same label @xmath39 . since @xmath41 and ( b ) requires several other characters with label @xmath39 to be corrupted to look like @xmath40 , the probability of ( b ) should be bounded by ( a ) , and thus @xmath34 , as well .",
    "therefore the probability of the consistency check giving a label @xmath39 when the true underlying label is @xmath40 is less than @xmath42 , for any classes @xmath43 .",
    "we will also need a lower bound on the probability that a character consistency check will succeed if the tesseract label of the character matches the ground truth label .",
    "let @xmath44 be a lower bound on this quantity , which is dependent on both the amount of noise in the document and the length of the document .",
    "( the latter condition is due to the fact that the character consistency check requires a character to match to at least a certain number of other similarly labeled characters , so , for example , if that number is nt present in the document to begin with , then the check will fail with certainty . )",
    "consider , bounding @xmath32 :    @xmath45      for dictionary words @xmath46 , we will assume that    @xmath47    or , equivalently ,    @xmath48    eq .",
    "[ eq : balance ] can be thought of as balance between tesseract s word level accuracy @xmath49 and the words prior probabilities @xmath50 . in our documents ,",
    "word level accuracy @xmath51 is generally around .9 , and the numerator in the first ratio @xmath52 is the probability of tesseract making a specific mislabeling , and so is upper bounded by .1 but generally will be much lower .    applying this to eq .",
    "[ eq : a ] , we get    @xmath53      consider a word @xmath46 that is a modified hamming distance @xmath20 from @xmath30 .",
    "we can then simplify eq .",
    "[ eq : b ] as    @xmath54    by making use of the assumption that the character consistency checks are independent , and that @xmath46 and @xmath30 only differ in @xmath20 characters . for those @xmath20 characters ,",
    "@xmath46 does not match the tesseract label and @xmath30 does match the tesseract label , so we use the bounds @xmath42 and @xmath44 .",
    "now let @xmath55 be the number of dictionary words of modified hamming distance @xmath20 away from @xmath30 .",
    "let @xmath56 be the rate of growth of @xmath55 as a function of @xmath20 , e.g. @xmath57 .",
    "assume , since @xmath41 , that @xmath58 .",
    "( experiments on the dictionary used in our main experiments showed that @xmath56 is generally about 3 . )    to get the total contribution to the error from all dictionary hamming words , we sum over @xmath55 for all @xmath59 ,    @xmath60      traditionally , edit distance is computed in terms of number of substitutions , insertions , and deletions necessary to convert one string to another string . in our context , a more natural notion may be splits and joins rather than insertions and deletions .",
    "for example , the interpretation of an m may be split into an r and a n , or vice - versa for a join .",
    "the probability that a split or a join passes the consistency check is upper bounded by @xmath61 .",
    "we can see this from two perspectives .",
    "first , a split or join has traditional edit distance of 2 , since it requires an insertion or deletion and a substitution ( m to mn insertion followed by mn to rn substitution ) .",
    "a more intuitive explanation is that , for a split , one character must be corrupted to look like the left hand side of the resulting character and another character corrupted to look like the right hand side , and for a join , the left hand side of a character must be corrupted to look like one character and the right hand side corrupted to look like another .",
    "similar to the case of confusable characters for substitutions , we also ignore confusable characters for splits and joins , namely r followed by n with m , and v followed by v with w. thus , corn and comb have an edit distance of 2 but a modified edit distance of 1 .",
    "consider a word @xmath46 with modified edit distance @xmath20 from @xmath30 , and involving at least one insertion or deletion ( so @xmath62 ) .",
    "similar to the dictionary hamming words , we can simplify eq .",
    "[ eq : b ] for @xmath46 as    @xmath63    since each substitution contributes a @xmath64 and each insertion or deletion , of which there is at least one , contributes a @xmath65 .",
    "let @xmath66 be the number of dictionary words @xmath46 with a modified edit distance @xmath20 away from @xmath30 and @xmath62 .",
    "again , also assume that @xmath67 , the rate of growth of @xmath66 , satisfies @xmath68 .",
    "summing the total contribution to the error from dictionary edit words ,    @xmath69      let @xmath70 be the set of non - dictionary words with a modified edit distance @xmath20 from @xmath30 , and let @xmath71 .",
    "assume the rate of growth of @xmath72 of @xmath73 satisfies @xmath74 .",
    "rearranging eq .",
    "[ eq : a ] and summing over all non - dictionary words :    @xmath75      @xmath76    for @xmath77 , @xmath78 , @xmath79 , @xmath80 ,    @xmath81    the bounds for the constants chosen above were selected conservatively to hold for a large range of documents , from very clean to moderately noisy .",
    "not all documents will necessarily satisfy these bounds . in a sense , these inequalities define the set of documents for which our algorithm is expected to work , and for heavily degraded documents that fall outside this set , the character consistency checks may no longer be robust enough to guarantee a very low probability of error .    our final bound on the probability of error , 0.002 , is the result of a _ worst case analysis _ under our assumptions .",
    "if our assumptions hold , the probability of error will likely be much lower for the following reasons .",
    "for most pairs of letters , @xmath82 is not a tight upper bound .",
    "the quantity on the right of eq .",
    "[ eq : balance ] is typically much lower than 1 .",
    "the rate of growths @xmath83 are typically much lower than assumed .",
    "the bound on @xmath84 , the non - dictionary word probabilities , is not a tight upper bound , as non - dictionary words mislabeled as dictionary words are rare . finally , the number of hamming and edit distance neighbors @xmath85 and @xmath86 will typically be less than assumed .",
    "on the other hand , for sufficiently noisy documents , and certain types of errors , our assumptions do not hold .",
    "some of the problematic cases include the following . as discussed , the assumption that the individual character consistency checks are independent is not true .",
    "if a document is degraded or has a font such that one letter is consistently interpreted as another , then that error will likely pass the consistency check ( e.g. @xmath34 will be very large ) .",
    "if a document is degraded or is very short , then @xmath44 may be much smaller than @xmath87 .",
    "( the character consistency check requires a character to match to at least a certain number of other similarly labeled characters , so , for example , if that number is nt present in the document to begin with , then the check will fail with certainty . ) finally , if the dictionary is not appropriate for the document then @xmath79 may not hold .",
    "this problem is compounded if the ocr system projects to dictionary words .",
    "we analyzed 10 short documents ( 4 - 5 pages each ) with tesseract word accuracy rates between 58% and 95% ( see table 1 ) @xcite .",
    "a portion of one document is shown in figure  [ fig : mackay ] .",
    "note that in order to simulate document degradation , we downsampled some of the documents from the project gutenberg corpus .    applying the method of section  3 , we produced `` conservative '' clean word lists as shown in table 1 . *",
    "our main result is that we are able to extract an average of 6% of the words in each document without making a single error . *",
    "the total number of words in all of the conservative clean lists was 843 , giving some informal support to the legitimacy of our bound , which suggests we would expect between 1 and 2 errors in a worst case scenario , and fewer than that under average conditions .",
    "we found that we could relax the requirement that a word have empty hamming ball of radius 1 ( step 2 of our method ) and replace it with a less stringent requirement , while only introducing a single error into what we called an `` aggressive clean word list '' ( see table 1 ) .",
    "in particular , we replaced the empty hamming ball requirement with a requirement that a word either have an empty hamming ball of radius 1 , _ or _",
    ", if it had neighbors of hamming distance 1 , that those neighbors not occur elsewhere in the document .",
    "this less restrictive definition of the clean word sets , no longer subject to our analytic bound , produces much larger clean lists ( 2661 words ) while producing just a single error .       as mentioned in the introduction , many ocr programs come with some notion of a confidence estimate for each word or character that is produced .",
    "tesseract has two separate functions which are related to its confidence of word accuracy .",
    "an obvious approach to producing clean word lists is to simply learn a threshold on the confidence values output by an ocr program .",
    "consider the heavy black line in figure  [ fig : means ] .",
    "this line shows the precision / recall curve for the words in _ all _ of our test documents together as the threshold on the tesseract confidence value is changed .",
    "it is easy to see that there is no threshold of the confidence value that achives a word accuracy rate of higher than about 95% .",
    "hence , there is no confidence level which can be used to produce clean word lists across all documents .",
    "the individual colored curves show precision / recall curves for individual documents .",
    "while there exist tesseract confidence thresholds that produce error - free clean word lists for some documents , the same confidence levels do not work for other documents , showing , that as a general technique , using a threshold on the tesseract confidence value can not be used in a naive fashion to produce such clean word lists .",
    "finally , notice the black and red xes at the top of the figure .",
    "the black x ( on the left ) represents the average recall rate of about 6% and the perfect precision of our conservative clean word generation scheme averaged across all documents .",
    "the red x ( on the right ) shows the slightly lower precision and significantly higher recall of our aggressive clean word generation scheme , again averaged across all documents .",
    "while it is not the main thrust of this paper , we have begun to experiment with using the clean word sets to improve ocr results . in our first experiment",
    ", we extract all examples of a pair of confusable characters ( `` o '' and `` c '' ) from the conservative list of the mackay document .",
    "we then trained a linear support vector machine classifier on this list , and reclassified all instances of `` o '' and `` c '' not in the conservative list .",
    "while tesseract made four errors confusing `` o ' 's and `` c ' 's in the original document , all of these were corrected using our document - specific training set , and no new errors were introduced .",
    "while this clearly represents just a beginning , we believe it is a promising sign that document specific training sets will be useful in correcting a variety of errors in ocr documents .",
    "it is interesting to note that no new data needed to be labeled for this experiment .",
    "everything was done fully automatically",
    ".      there has been significant work done in post - processing the output of ocr . while none of it is very similar to what we have presented here , we present some points of reference for completeness .",
    "kolak et al .",
    "@xcite developed a generative model to estimate the true word sequence from noisy ocr output and kukich et al .",
    "@xcite survey various methods to correct text using natural language processing techniques .",
    "hong et al .",
    "@xcite examine the inter - word relationships of character patches to help constrain possible interpretations .",
    "the distinguishing feature of our work is that we examine the document images themselves to build document - specific models of the characters .",
    "our work is also related to a variety of approaches that leverage inter - character similarity in documents in order to reduce the dependence upon a priori character models .",
    "some of the most significant developments in this area are found in these papers @xcite .",
    "the inability to attain high confidence in either the identity or equivalence of characters in these papers has hindered their use in subsequent ocr developments .",
    "we hope that the high confidence values we obtained will spur the use of these techniques for document - specific modeling ."
  ],
  "abstract_text": [
    "<S> we consider models for which it is important , early in processing , to estimate some variables with high precision , but perhaps at relatively low rates of recall . </S>",
    "<S> if some variables can be identified with near certainty , then they can be conditioned upon , allowing further inference to be done efficiently . </S>",
    "<S> specifically , we consider optical character recognition ( ocr ) systems that can be bootstrapped by identifying a subset of correctly translated document words with very high precision . </S>",
    "<S> this `` clean set '' is subsequently used as document - specific training data . </S>",
    "<S> while many current ocr systems produce measures of confidence for the identity of each letter or word , thresholding these confidence values , even at very high values , still produces some errors .    </S>",
    "<S> we introduce a novel technique for identifying a set of correct words with very high precision . rather than estimating posterior probabilities , we * bound * the probability that any given word is incorrect under very general assumptions , using an approximate worst case analysis . </S>",
    "<S> as a result , the parameters of the model are nearly irrelevant , and we are able to identify a subset of words , even in noisy documents , of which we are highly confident . on our set of 10 documents , </S>",
    "<S> we are able to identify about 6% of the words on average _ without making a single error . </S>",
    "<S> _ this ability to produce word lists with very high precision allows us to use a family of models which depends upon such clean word lists . </S>"
  ]
}