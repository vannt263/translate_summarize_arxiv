{
  "article_text": [
    "the fair allocation of indivisible items is a central problem in economics , computer science , and operations research  @xcite .",
    "we focus on the setting in which we have a set of @xmath0 agents and a set of items with each agent expressing utilities over the items .",
    "the goal is to allocate the items among the agents in a fair manner without allowing transfer of money .",
    "if all agents have positive utilities for the items , we view the items as goods .",
    "on the other hand , if all agents have negative utilities for the items , we can view the items as chores . throughout",
    ", we assume that all agents utilities over items are additive .    in order to identify fair allocations",
    ", one needs to formalize what fairness means . a compelling fairness concept called _ max - min share ( mms ) _ was recently introduced which is weaker than traditional fairness concepts such as envy - freeness and proportionality  @xcite .",
    "an agent s mms is the `` most preferred bundle he could guarantee himself as a divider in divide - and - choose against adversarial opponents ''  @xcite .",
    "the main idea is that an agent partitions the items into @xmath0 sets in a way that maximizes the utility of the least preferred set in the partition .",
    "the utility of the least preferred set is called the _ mms guarantee _ of the agent .",
    "an allocation satisfies _ mms fairness _ if each agent gets at least as much utility as her mms guarantee .",
    "we refer to such an allocation as _",
    "mms allocation_.    although mms is a highly attractive fairness concept and a natural weakening of proportionality and envy - freeness  @xcite , @xcite showed that an mms allocation of goods does not exist in general .",
    "this fact initiated research on approximate mms allocations of goods in which each agents gets some fraction of her mms guarantee . on the positive side , not only do mms allocations of goods exist for most instances  @xcite , but there also exists a polynomial - time algorithm that returns a 2/3-approximate mms allocation  @xcite .",
    "algorithms for computing mms allocations of goods have been deployed and are being used for fair division  @xcite .    in this paper",
    ", we turn to mms allocations for chores , a subject which has not been studied previously . even in the more general domain of fair allocation",
    ", there is a paucity of research on chore allocation compared to goods despite there being many settings where we have chores not goods  @xcite . in general , the problem of chore allocation can not be transformed into a problem for goods allocation  @xcite .",
    "[ [ contributions ] ] contributions + + + + + + + + + + + + +    we consider mms allocation of chores for the first time and present some fundamental connections between mms allocation of goods and chores especially when the positive utilities of the agents in the case of goods are negated to obtain a chores setting .",
    "we also show that there are differences between the two settings with no known reductions between the settings . in particular , reductions such as negating the utility values and applying an algorithm for one setting does not give an algorithm for other setting .",
    "we show that an mms allocation does not need to exist for chores . in view of the non - existence results ,",
    "we introduce a new concept called _ optimal mms _ for both goods and chores .",
    "an allocation is an _ optimal mms allocation _ if it represents the best possible approximation of the mms guarantee .",
    "an optimal mms allocation has two desirable properties : ( 1 ) it always exists and ( 2 ) it satisfies mms fairness whenever an mms allocation exists ( see figure  [ fig : fairness - relations ] ) . consequently ,",
    "optimal mms is a compelling fairness concept and a conceptual contribution of the paper .",
    "we present bounds to quantify the gap between optimal mms fairness and mms fairness . for chores , we present a linear - time round - robin algorithm for this purpose that provides a 2-approximation for mms .",
    "we show that the bound proved is _ tight _ for the round robin algorithm .",
    "we also show that , as in the case of goods , the computation of an mms allocation for chores is strongly np - hard and so is the computation of an optimal mms allocation .    in view of the computational hardness results ,",
    "we develop approximation algorithms for optimal mms fairness . for both goods and chores",
    ", we use connections to parallel machine scheduling and some well established scheduling algorithms to derive an exponential - time exact algorithm and a ptas ( polynomial - time approximation scheme ) when the number of agents is fixed .",
    "these are the first ptas results related to mms . as long as an mms allocation exists ( that does exist in most instances as shown analytically by @xcite and experimentally by @xcite )",
    ", our algorithm for goods also provides a ptas for standard mms which in terms of approximation factor is a significant improvement over previous constant - factor approximation results  @xcite .",
    "in addition to the literature on mms allocations for goods discussed in the introduction , our work is based on parallel machine scheduling theory .",
    "there is a natural connection between mms allocations and parallel machine scheduling , which we outline later .",
    "this connection turns out to be very fruitful for both exact and approximate computations of optimal mms allocations .",
    "we briefly introduce the concept of parallel machine scheduling in the following .",
    "we have a set @xmath1 of jobs and a set @xmath2 $ ] of @xmath0 machines .",
    "each of the jobs has to be processed exactly once on exactly one machine without preemption .",
    "furthermore , we have a processing time matrix @xmath3 where @xmath4 indicates how long machine @xmath5 requires to finish job @xmath6",
    ". if there are no further restrictions on the values of @xmath7 , we deal with unrelated parallel machines .",
    "if @xmath8 for all @xmath9 $ ] and @xmath10 then machines are considered identical .",
    "the goal of each machine scheduling problem is to find a schedule ( i.e. , an ordered allocation ) that optimizes a certain objective function .",
    "the problems that we focus on in this paper either minimize the time where the latest machine finishes ( this is also called the makespan of a schedule ) or maximize the time where the earliest machine finishes .",
    "we show that the former objective is related to mms allocation of chores whereas the latter is related to mms allocation of goods .",
    "an extensive overview on all important machine scheduling problems is provided by @xcite .",
    "@xcite established a notation for machine scheduling problems where @xmath7 stands for identical machines , @xmath11 for unrelated machines , @xmath12 for minimizing the latest machine s finishing time , and @xmath13 for maximizing the earliest machine s finishing time .",
    "according to this notation , we will use the problems @xmath14 , @xmath15 , @xmath16 , and @xmath17 in this paper .",
    "the latter problem is also equivalent to maximizing egalitarian welfare under additive utilities  @xcite .",
    "all of these problems are np - hard in the strong sense but they are well investigated and plenty of research has been conducted on approximation algorithms which we will take advantage of @xcite .",
    "we introduce the basic notation and definitions for our approach in this section . for a set of items @xmath1 and a number @xmath18 , let @xmath19 be the set of all @xmath0-partitions of @xmath1 ( i.e. , item allocations ) and let @xmath20 denote the power set of @xmath1 .    1 .",
    "a * non - negative instance * is a tuple @xmath21,(u_i)_{i\\in [ n]})$ ] consisting of a set of items @xmath1 , a set @xmath2 $ ] of @xmath0 agents , and a family of additive utility functions @xmath22}$ ] .",
    "the set of all non - negative instances is denoted by @xmath23 .",
    "a * non - positive instance * is a tuple @xmath21,(d_i)_{i\\in[n]})$ ] consisting of a set of items @xmath1 , a set @xmath2 $ ] of @xmath0 agents , and a family of additive utility functions @xmath24}$ ] .",
    "the set of all non - positive instances is denoted by @xmath25 .",
    "an * instance * is a tuple @xmath21,(v_i)_{i\\in[n]})$ ] which is a non - negative instance or a non - positive instance .",
    "the set of all instances is denoted by @xmath26 .    for an instance @xmath27,(v_i)_{i\\in [ n]})\\in\\mathcal{i}$ ]",
    ", we define the * corresponding instance * by @xmath28,(-v_i)_{i\\in [ n]})\\in\\mathcal{i}.\\ ] ]    let @xmath27,(v_i)_{i\\in[n]})\\in\\mathcal{i}$ ] be an instance and @xmath29 $ ] be an agent .    1",
    ".   agent @xmath5 s * max - min share ( mms ) guarantee * for @xmath30 is defined as @xmath31 } v_i(s_j).\\ ] ] 2 .",
    "agent @xmath5 s * min - max share ( mms ) guarantee * for @xmath30 is defined as @xmath32 } v_i(s_j).\\ ] ]    let @xmath27,(v_i)_{i\\in[n]})\\in\\mathcal{i}$ ] be an instance and @xmath33 be an allocation .    1 .   @xmath34 is called an * mms allocation * for @xmath30 iff @xmath35 for all agents @xmath29 $ ] .",
    "@xmath34 is called a * perverse mms allocation * for @xmath30 iff @xmath36 for all agents @xmath29 $ ] .",
    "the concept of a perverse mms allocation seems counterintuitive but turns out to be helpful to obtain results on mms allocations for chores .",
    "we can also relax the mms fairness concept as follows .",
    "given an instance @xmath27,(v_i)_{i\\in[n]})\\in\\mathcal{i}$ ] and a constant @xmath37 .    1 .",
    "the * @xmath38-max - min problem * for @xmath30 is about finding an allocation @xmath39 with @xmath40 for all @xmath29 $ ] .",
    "the * perverse @xmath38-min - max problem * for @xmath30 is about finding an allocation @xmath39 with @xmath41 for all @xmath29 $ ] .",
    "first , we present a fundamental connection between the allocation of chores ( non - positive utilities ) and goods ( non - negative utilities ) . later in this section , we discuss non - existence examples for mms allocations and show that existence and non - existence examples do not transfer straightforwardly from goods to chores and vice - versa . finally , we give a complexity result for the computation of mms allocations for both goods and chores .",
    "the following result shows an interesting connection between mms and mms when changing signs in all utility functions .",
    "[ mms =- mms ] let @xmath21,(v_i)_{i\\in[n]})\\in\\mathcal{i}$ ] be an instance .",
    "then we have @xmath42 for all agents",
    "@xmath29 $ ] .",
    "this leads us to the following result discussing the equivalence of mms allocations for an instance and perverse mms allocations for its corresponding instance .",
    "[ transfer_goods_chores ] let @xmath27,(v_i)_{i\\in[n]})\\in\\mathcal{i}$ ] be an instance and let @xmath33 be an allocation .    1 .",
    "@xmath34 is an mms allocation for @xmath30 if and only if @xmath34 is a perverse mms allocation for the corresponding instance @xmath43 .",
    "2 .   in particular , there is an mms allocation for @xmath30 if and only if there is a perverse mms allocation for the corresponding instance @xmath43 .    for all @xmath29",
    "$ ] , we have @xmath44 . which proves both claims .",
    "this fundamental connection shows also a difference between the allocation of chores and goods since finding mms allocations and finding perverse mms allocations involve different objectives .",
    "a similar statement can be made for the approximations .",
    "[ transfer_lambda ] let @xmath27,(v_i)_{i\\in[n]})\\in\\mathcal{i}$ ] be an instance and let @xmath33 be an allocation .",
    "let @xmath37 be arbitrary .",
    "then @xmath34 is a solution of the @xmath38-mms problem for @xmath30 if and only if @xmath34 is a solution of the perverse @xmath38-mms problem for the corresponding instance @xmath43 .",
    "the proof is the same as the proof of prop .",
    "[ transfer_goods_chores ] with just an additional factor @xmath38 on the right side of each inequality .",
    "@xcite showed that an mms allocation for goods does not necessarily exist .",
    "we construct an instance @xmath45,(u_i)_{i\\in[3]})\\in\\mathcal{i}^+$ ] by a subtle modification of their example to obtain an analogous result for chores .",
    "consider a set @xmath46=\\{1,2,3\\}$ ] of three agents and a set of twelve items ( represented by pairs ) @xmath47 we define matrices @xmath48 @xmath49 @xmath50 for each agent @xmath51 $ ] , we define her utility function by @xmath52 we obtain the following result by a careful adaption of the argument presented by @xcite .",
    "[ non_existence_chores ] there is no mms allocation for @xmath43 . in particular , an mms allocation for chores does not need to exist .    another interesting difference between mms for goods and chores is the fact that existence and non - existence examples for mms allocations can not be simply converted into each other by just changing the signs of the utility functions .    the only difference from @xmath30 to the instance of the example presented by @xcite are changed signs in the @xmath53 matrices .",
    "let @xmath54,(w_i)_{i\\in[3]})\\in\\mathcal{i}^+$ ] denote their instance .",
    "we get the following interesting result .",
    "[ non_transferability ] there is an mms allocation for @xmath30 but no mms allocation for @xmath43 .",
    "there is no mms allocation for @xmath55 but an mms allocation for @xmath56 .",
    "not only do mms allocations not exist in general , computing an mms allocation is strongly np - hard if it exists .",
    "the reduction is straight forward from integer partition to an allocation instance in which each agent has the same utility function .",
    "[ complexity_goods_chores ] for both goods and chores , computing an mms allocation - if it exists - is strongly np - hard .",
    "the problem is weakly np - hard even for two agents .",
    "the purpose of this section is to present a polynomial - time @xmath57-approximation algorithm for mms for chores .",
    "each agent is guaranted at most twice her ( non - positive ) max - min share guarantee .    through the entire section ,",
    "let @xmath27,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ] be a non - negative instance .",
    "we define @xmath58 for all @xmath29 $ ]    if we are given a chores instance @xmath43 , we run a round robin protocol in which in which agents come in round robin manner and are given a most preferred available item . framed in terms of insance @xmath30 , we consider the round - robin protocol in which agents come in round robin manner and are given an available item with the lowest utility .",
    "[ greedyupperbound_help ] let @xmath39 be the allocation obtained by the round - robin greedy protocol for @xmath30 .",
    "then we have @xmath59 for all agents",
    "@xmath9 $ ] .",
    "the result is trivial for @xmath60 .",
    "if @xmath61 , i.e. , @xmath5 always chooses before @xmath62 , then the result is also obvious because @xmath5 will choose her lowest valued item in every round and has to pick at most one item more than @xmath62 in total ( which is compensated by @xmath63 ) .",
    "therefore , we can assume that @xmath64 , i.e. , @xmath62 picks before @xmath5 in every round .",
    "the protocol has exactly @xmath65 rounds .",
    "the pick of agent @xmath5 ( @xmath62 resp . ) in round @xmath66 is denoted by @xmath67 ( @xmath68 resp . ) .",
    "we have @xmath69    we separate two cases . in the case that agent",
    "@xmath62 has to pick an item in the last round , we have @xmath70 for all @xmath71 ( picking rule ) and therefore @xmath72 in the other case where agent @xmath62 does not have to pick anymore in the last round , agent @xmath5 also does not have to pick since she picks after @xmath62 .",
    "it follows that @xmath73 since @xmath70 for all @xmath74 ( picking rule ) .    combining both cases",
    ", this gives us @xmath75 with @xmath76 and finally @xmath77    [ greedyupperbound ] let @xmath39 be the allocation obtained by the round - robin greedy protocol .",
    "then we have @xmath78 for each agent @xmath29 $ ] .",
    "we have @xmath79 } u_i(s_{i ' } ) + ( n-1)\\cdot u_{max}^{i } = u_i(\\mathcal{m } ) + ( n-1)\\cdot u_{max}^{i}.$ ] division by @xmath0 yields the result .",
    "[ 2approxgoods ] the round - robin greedy allocation protocol gives an allocation @xmath39 with @xmath80 for all @xmath29 $ ] .",
    "the inequality can not be improved for general instances .    by definition of the min - max share guarantee and the additivity of @xmath81",
    ", we obtain @xmath82 and @xmath83 for all @xmath29 $ ]",
    ".    then we have @xmath84 for each agent @xmath29 $ ] , which proves the first part of the result .",
    "the bound can not be improved in general . to show this",
    ", we give an example where the bound is tight .",
    "consider a set @xmath85 of @xmath86 items .",
    "let the utility function @xmath87 be the same for all agents with @xmath88 for all @xmath89 and @xmath90 .",
    "then we have @xmath91 because we get a ( perfectly balanced ) @xmath0-partition by packing @xmath92 sets with exactly @xmath0 of the @xmath93-valued items and a last set consisting just of the one @xmath94-valued item .",
    "since @xmath87 is the same for all agents , the greedy round - robin algorithm gives agent @xmath94 the allocation @xmath95 for which @xmath96 holds true .    [ greedy_approx_chores ]",
    "let @xmath27,(d_i)_{i\\in[n]})\\in \\mathcal{i}^-$ ] be a non - positive instance and denote the round - robin greedy allocation for @xmath43 by @xmath39 .",
    "then we have @xmath97 for all @xmath29 $ ] and the inequality can not be improved for general instances",
    ".    follows immediately from [ 2approxgoods ] with [ transfer_lambda ] .",
    "before we can introduce the optimal mms fairness concept , we have to define an instance - specific parameter .    1 .   for a non - negative instance @xmath98 , the * optimal mms ratio * @xmath99 is defined as the maximal @xmath100 $ ] for which the @xmath38-max - min - problem for @xmath30 has a solution .",
    "2 .   for a non - positive instance @xmath101 , the * optimal mms ratio * @xmath99 is defined as the minimal @xmath102 for which the @xmath38-max - min - problem for @xmath30 has a solution .    note that both the maximum and the minimum exist in this definition since for a fixed instance @xmath30",
    ", there is only a finite number of possible allocations .",
    "we have the following initial bounds for the optimal mms ratio .    [ optimal_mms_bounds ]    1 .",
    "let @xmath27,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ] be a non - negative instance .",
    "then we have @xmath103 , with @xmath104 if and only if @xmath105 for all @xmath29 $ ] .",
    "2 .   let @xmath27,(d_i)_{i\\in[n]})\\in\\mathcal{i}^-$ ] be a non - positive instance .",
    "then we have @xmath106 , and @xmath107 if @xmath108 for an @xmath29 $ ] .    1 .",
    "the inequality @xmath109 is a result of the approximation algorithm presented by @xcite while the inequality @xmath110 is trivial .",
    "the equality @xmath104 holds if and only if the @xmath38-max - min problem for @xmath30 has a solution for all @xmath37 .",
    "this is equivalent to @xmath105 for all @xmath29 $ ] .",
    "the inequality @xmath111 holds per definition while @xmath112 follows from the previous section .",
    "finally , if there is an agent @xmath29 $ ] with @xmath113 this implies @xmath114 and therefore allocating all items to agent @xmath5 gives a solution of the @xmath115-max - min problem for @xmath30 .",
    "we do not claim that the introduced bounds of @xmath116 and @xmath57 are tight .",
    "the proof of the lemma shows another difference between mms for goods and mms for chores . if in the case of chores , the mms guarantee of an agent is @xmath115 , then the utility function of this agent is equal to @xmath115 .",
    "the same result does not hold true for goods . based on the previous notations ,",
    "we define a new fairness concept called _ optimal mms _ , which is a natural variant of mms fairness .    for an instance @xmath27,(v_i)_{i\\in[n]})\\in\\mathcal{i}$ ] , an * optimal mms allocation * for @xmath30 is an allocation @xmath39 with @xmath117 for all @xmath29 $ ] .",
    "there are two main advantages to the introduced concept .",
    "first , for each specific instance @xmath118 , we can guarantee the existence of an optimal mms allocation . according to lemma  [ optimal_mms_bounds ] .",
    "] second , an optimal mms allocation is always an mms allocation if the latter exists .",
    "both observations follow immediately from the definitions .",
    "we will give an introductory example for optimal mms allocations both for goods and chores in the following .",
    "define an instance @xmath119,(u_i)_{i\\in[2]})\\in\\mathcal{i}^+$ ] with a set @xmath120=\\{1,2\\}$ ] of two agents and a set of two items @xmath121 .",
    "we define @xmath122 , @xmath123 , @xmath124 , and @xmath125 for some @xmath126 .    1",
    ".   we have @xmath127 which means that @xmath128 and @xmath129 is an mms allocation for @xmath30 where each agent gets a total utility of @xmath94 . the optimal mms allocation for @xmath30 would be @xmath130 and @xmath131 giving each agent a total utility of @xmath132 .",
    "in particular , @xmath133 .",
    "we have @xmath134 which means that @xmath130 and @xmath131 is an mms allocation for @xmath43 where each agent gets a total utility of @xmath135 .",
    "the optimal mms allocation for @xmath43 would be @xmath128 and @xmath129 giving each agent a total utility of @xmath136 .",
    "in particular , @xmath137 .    these examples also show that each agent s ratio of the utility in an optimal mms allocation to the utility in an mms allocation can be arbitrarily large ( for goods ) or small ( for chores ) as @xmath126 can be any real number .",
    "another natural question is the worst case for the optimal mms allocation in comparison to the mms guarantee .",
    "this is addressed by the following definition .    1 .",
    "the * universal mms ratio for goods * is defined as @xmath138 2 .",
    "the * universal mms ratio for chores * is defined as @xmath139    we can give bounds for and connections between the instance - dependent _ optimal _ and the instance - independent _ universal _ mms ratios .    clearly , we have by definition @xmath140 for all @xmath98 and @xmath141 for all @xmath101 .",
    "furthermore , we have :    1 .",
    "@xmath142 by lemma  [ optimal_mms_bounds ] and the non - existence example presented by @xcite .",
    "2 .   @xmath143 by prop .",
    "[ non_existence_chores ] and lemma  [ optimal_mms_bounds ] .",
    "we presented some properties of optimal mms allocations .",
    "but since the complexity of computing an mms allocation for both goods and chores - if it exists - is strongly np - hard ( prop . [ complexity_goods_chores ] ) , the same holds true for the computation of an optimal mms allocation . however , we will show in the next sections that there is a ptas for the computation of such an allocation as long as the number of agents is fixed .",
    "in this section , we develop a ptas for finding an optimal mms allocation for chores when the number of agents is fixed .",
    "the ptas is based on the following exact algorithm .",
    "[ alg : makespan_chores ] given a non - negative instance @xmath21,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ] , we state an algorithm consisting of the following steps .    1 .",
    "compute @xmath144 for each agent @xmath29 $ ] .",
    "2 .   define new additive utility functions @xmath145 for all @xmath29 $ ] by @xmath146 if @xmath147 and @xmath148 if @xmath149 .",
    "3 .   solve the @xmath15 problem where each machine represents one agent and the processing times are defined as @xmath150 for all @xmath29 $ ] and @xmath10 .",
    "denote the optimal objective function value by @xmath151 and the corresponding allocation by @xmath152 .",
    "given a non - positive instance @xmath27,(d_i)_{i\\in[n]})\\in\\mathcal{i}^-$ ] .",
    "execute algorithm [ alg : makespan_chores ] for the corresponding instance @xmath21,(u_i)_{i\\in[n]}):=-i\\in\\mathcal{i}^+$ ] .",
    "then we have @xmath153 and @xmath154 is an optimal mms allocation for @xmath30 .",
    "we will show that @xmath151 is the minimal @xmath155 for which a solution to the perverse @xmath38-min - max problem for @xmath43 exists and @xmath154 is a corresponding solution .",
    "the claim follows then with prop .",
    "[ transfer_lambda ] .    if @xmath149 ( and therefore @xmath156 ) for an agent @xmath29 $ ] , we have @xmath157 ( because we can give all items to @xmath5 ) and there is nothing to show .",
    "let us now assume @xmath147 for all @xmath29 $ ] .",
    "@xmath151 is by definition the minimal @xmath158 for which an allocation @xmath39 with @xmath159 for all @xmath29 $ ] exists .",
    "but this condition is equivalent to @xmath160 for all @xmath29 $ ] . to sum up",
    ", @xmath151 is the minimal @xmath158 for which a solution of the perverse @xmath38-min - max problem for @xmath43 exists and @xmath154 is a corresponding solution .",
    "there are two steps in algorithm [ alg : makespan_chores ] that are exponential in time .",
    "first , each computation of @xmath161 may require exponential time and second , finding an optimal solution to @xmath15 may require exponential time .",
    "the computation of @xmath162 for an agent @xmath29 $ ] is equivalent to the computation of a job partition that minimizes the makespan on @xmath0 identical parallel machines ( @xmath14 ) where the processing time of a job @xmath10 is defined as @xmath163 .",
    "@xcite present a ptas for @xmath14 and @xcite present a ptas for @xmath164 ( which means that the number of agents is fixed to @xmath0 ) .",
    "this implies that we can run the following algorithm in polynomial time when the number of agents is fixed and therefore , it will be suitable to formulate a ptas for the computation of an optimal mms allocation when the number of agents is fixed .",
    "[ alg : makespan_chores_approx ] given a non - negative instance @xmath27,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ] and an @xmath165 , we state an algorithm consisting of the following steps .    1 .",
    "select @xmath166 and @xmath167 with @xmath168 .",
    "2 .   compute @xmath169 with @xmath170 for each agent @xmath29 $ ] .",
    "3 .   define new additive utility functions @xmath145 for all @xmath29 $ ] by @xmath171 if @xmath147 and @xmath172 if @xmath149 .",
    "4 .   consider the corresponding @xmath15 problem where the processing times are defined as @xmath150 for all @xmath29 $ ] and @xmath10 .",
    "denote the optimal objective function value by @xmath151 .",
    "compute an approximate solution @xmath173 with @xmath174 for all @xmath29 $ ] .",
    "[ ptas_maxmin_chores ] let a non - positive instance @xmath27,(d_i)_{i\\in[n]})\\in\\mathcal{i}^-$ ] , @xmath175 , and @xmath165 be given .",
    "assume that a solution of the @xmath38-max - min problem for @xmath30 exists and execute algorithm [ alg : makespan_chores_approx ] for the pair @xmath176 .",
    "then @xmath177 is a solution of the @xmath178-max - min problem for @xmath30 .",
    "let @xmath81 refer to @xmath179 for all @xmath29 $ ] .",
    "since a solution of the @xmath38-max - min problem for @xmath30 exists , we can conclude by [ transfer_lambda ] that a solution of the perverse @xmath38-min - max problem for @xmath43 exists .",
    "this implies the existence of @xmath39 with @xmath180 for all @xmath29 $ ] . from this",
    "we have @xmath181 for all @xmath29 $ ] ( note that @xmath149 implies @xmath182 ) and we can conclude @xmath183 .    define @xmath2_{>0}:=\\{i\\in[n]|c_i>0\\}$ ] .",
    "this gives us @xmath184_{>0 } } \\frac{u_i(s^\\varepsilon_i)}{c_i}=\\max_{i\\in[n]_{>0 } } u_i'(s^\\varepsilon_i)\\le\\beta\\lambda^\\ast\\le \\beta \\lambda.\\ ] ]    since @xmath185 , this leads us to @xmath184_{>0}}\\frac{u_i(s^\\varepsilon_i)}{mms_{u_i}^n(\\mathcal{m } ) } \\le \\alpha\\beta \\lambda \\le ( 1+\\varepsilon)\\cdot\\lambda\\ ] ] which is equivalent to @xmath186 for all @xmath29_{>0}$ ] and the same is true for all @xmath29\\backslash [ n]_{>0}$ ] ( since this means @xmath187 ) .",
    "this proves that @xmath177 is a solution of the perverse @xmath178-min - max problem for @xmath43 .",
    "the result follows now by [ transfer_lambda ] .",
    "since algorithm  [ alg : makespan_chores_approx ] runs in polynomial time when the number of agents is fixed , this general result gives us immediately the following important corollary .",
    "[ ptas_maxmin_chores_coro ] let the number of agents be fixed to @xmath0 and let @xmath101 be a non - positive instance with @xmath0 agents .    1 .",
    "executing algorithm [ alg : makespan_chores_approx ] for @xmath43 and @xmath165 gives a ptas for the computation of an optimal mms allocation for @xmath30 .",
    "if an mms allocation for @xmath30 exists , then executing algorithm [ alg : makespan_chores_approx ] for @xmath43 and @xmath165 gives a ptas for the computation of an mms allocation for @xmath30 .",
    "set @xmath188 in [ ptas_maxmin_chores ] for the first result .",
    "the second statement follows since each optimal mms allocation for @xmath30 is also an mms allocation for @xmath30 if the latter exists .",
    "this is a strong result since it gives a ptas for the computation of an optimal mms allocation of a given chore instance , no matter if an mms allocation exists or not ( assuming the number of agents is fixed ) .",
    "in addition , if an mms allocation for a chore instance exists , we have a ptas ( assuming the number of agent is fixed ) to compute an mms allocation .",
    "an analogous result for goods will be obtained in the next section .",
    "in this section , we present a ptas for finding an optimal mms allocation for goods when the number of agents is fixed . the ptas is based on the following exact algorithm .",
    "the techniques for the proofs are basically the same as in the previous section .",
    "[ alg : makespan_goods ] given a non - negative instance @xmath21,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ] , we state an algorithm consisting of the following steps .    1 .",
    "compute @xmath189 for each agent @xmath29 $ ] and set @xmath190_{>0}:=\\{i\\in[n]|c_i > 0\\}.\\ ] ] 2 .   if @xmath2_{>0}=\\emptyset$ ] , set @xmath191 and choose an arbitrary allocation @xmath192 .",
    "terminate the algorithm .",
    "3 .   define new additive utility functions @xmath193 for all @xmath29_{>0}$ ] .",
    "4 .   solve the @xmath17 problem on @xmath194_{>0}|$ ] machines where each machine represents one agent @xmath195_{>0}$ ] and the processing times are defined as @xmath150 for all @xmath29_{>0}$ ] and @xmath10 .",
    "denote the optimal objective function value by @xmath151 and the corresponding allocation by @xmath196_{>0}}\\in\\pi_{|[n]_{>0}|}(\\mathcal{m})$ ] .",
    "set @xmath197 for all @xmath195\\backslash [ n]_{>0}$ ] and @xmath198 .",
    "note that this algorithm aims at finding an optimal mms allocation by maximizing egalitarian welfare according to the new utility functions @xmath199 .",
    "[ optimal_mms_goods ] execute algorithm  [ alg : makespan_goods ] for a non - negative instance @xmath27,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ]",
    ". then we have @xmath200 and @xmath154 is an optimal mms allocation for @xmath30 .",
    "there are again two steps in algorithm  [ alg : makespan_goods ] that are exponential in time .",
    "first , each computation of @xmath201 may require exponential time and second , finding an optimal solution to @xmath17 may require exponential time .",
    "the computation of @xmath202 for an agent @xmath29 $ ] is equivalent to the computation of a job partition that maximizes the minimum finishing time on @xmath0 identical parallel machines ( @xmath16 ) where the processing time of a job @xmath10 is defined as @xmath163 .",
    "@xcite present a ptas for @xmath16 and @xcite present a ptas for @xmath203 ( which means that the number of agents is fixed to @xmath0 ) . agents .",
    "] this implies that we can run the following algorithm in polynomial time when the number of agents is fixed .",
    "[ alg : makespan_goods_approx ] given a non - negative instance @xmath27,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ] and an @xmath165 , we state an algorithm consisting of the following steps .    1 .",
    "select @xmath204 and @xmath205 with @xmath206 .",
    "2 .   compute @xmath169 with @xmath207 for each agent @xmath29 $ ] .",
    "define a set @xmath2_{>0}:=\\{i\\in[n]|c_i>0\\}$ ] .",
    "3 .   if @xmath2_{>0}=\\emptyset$ ] , set @xmath191 and choose an arbitrary allocation @xmath208 . terminate the algorithm .",
    "4 .   define new additive utility functions @xmath193 for all @xmath29_{>0}$ ] .",
    "5 .   consider the corresponding @xmath17 problem on @xmath209 machines where each machine represents one agent @xmath29_{>0}$ ] and the processing times are defined as @xmath150 for all @xmath29_{>0}$ ] and @xmath10 .",
    "denote the optimal objective function value by @xmath151 .",
    "compute an approximate solution @xmath210_{>0}}\\in\\pi_{|[n]_{>0}|}(\\mathcal{m})$ ] with @xmath211 for all @xmath29_{>0}$ ] .",
    "set @xmath212 for all @xmath29\\backslash[n]_{>0}$ ] and @xmath213 .",
    "[ ptas_maxmin_goods ] let a non - negative instance @xmath27,(u_i)_{i\\in[n]})\\in\\mathcal{i}^+$ ] , @xmath175 , and @xmath165 be given .",
    "assume that a solution of the @xmath38-max - min problem for @xmath30 exists and execute algorithm [ alg : makespan_goods_approx ] for the pair @xmath214 .",
    "then @xmath215 is a solution of the @xmath216-max - min problem for @xmath30 .",
    "since algorithm  [ alg : makespan_goods_approx ] runs in polynomial time when the number of agents is fixed , this general result gives us the following important corollary .",
    "let the number of agents be fixed to @xmath0 and let @xmath98 be a non - negative instance with @xmath0 agents .    1 .",
    "algorithm [ alg : makespan_goods_approx ] gives a ptas for the computation of an optimal mms allocation for @xmath30 .",
    "2 .   if an mms allocation for @xmath30 exists , then algorithm  [ alg : makespan_goods_approx ] gives a ptas for the computation of an mms allocation for @xmath30 .",
    "we initiated work on mms allocation of chores , proposed a new fairness concept called optimal mms , and presented interesting connections and differences between fair allocation of goods and chores . for a fixed number of agents , we proposed compelling approximation algorithms for fair allocation with respect to mms for both chores and goods . for goods",
    ", we provided a connection between computation of mms allocations and egalitarian welfare maximizing allocations .",
    "there is much potential for further work on the fair allocation of chores as this has largely been overlooked in contrast to the case of goods .",
    "one interesting direction are problems containing a mixture of goods and chores . for such settings , an approximate mms allocation will require approximation guarantees on either side depending on whether the mms guarantee is positive or negative .",
    "the matrix @xmath217 gets the following labeling : @xmath218    as @xcite point out , each 4 elements in @xmath217 sum up to 55 if and only if they have a common label .",
    "suppose agent 1 divides the items along the labels @xmath219 , agent 2 divides the items along the labels @xmath220 and agent @xmath221 divides the items along the labels @xmath222 , then every agent has perfectly balanced bundles where the utility is always @xmath223 .",
    "therefore , we can conclude @xmath224    consider an arbitrary allocation @xmath225 .",
    "we will show that there is always an agent @xmath51 $ ] with @xmath226 .",
    "if there is an agent @xmath51 $ ] which receives at least five items , we have @xmath227 .",
    "consequently , we can focus on the case where each agent receives exactly four items .",
    "if there is an agent @xmath51 $ ] which receives items with a sum of more than @xmath228 in the o - matrix , we have @xmath229 .",
    "consequently , we can focus on the case where all agents get a bundle with common labels ( i.e. , with a sum of exactly 55 in the @xmath217-matrix ) .",
    "if the items are divided along the labels @xmath219 then agent 2 or agent 3 receive items labeled by 2 or 3 giving them a utility of @xmath230 .",
    "if the items are divided along the labels @xmath220 then agent 1 or agent 3 receive items labeled by @xmath231 or @xmath232 giving them a utility of at least @xmath230 .",
    "if the items are divided along the labels @xmath222 then agent 1 or agent 2 receive items labeled by @xmath233 or @xmath234 giving them a utility of at least @xmath230 .",
    "we showed that for an arbitrary allocation @xmath225 there is always an agent @xmath51 $ ] with @xmath226 which means that there is no perverse mms allocation for the instance @xmath30 .",
    "the result follows from [ transfer_goods_chores].@xmath235      we define @xmath236 for all @xmath51 $ ] .",
    "as pointed out in appendix  [ sec : non_existence_chores_proof ] , we can achieve a perfectly balanced partition with @xmath237 for all @xmath51 $ ] .",
    "furthermore , we have @xmath238 and @xmath239 , which means @xmath240 for all @xmath51 $ ] and therefore @xmath241 is an mms allocation for @xmath26 .",
    "the non - existence of an mms allocation for @xmath43 was shown in [ non_existence_chores ] .",
    "the utility functions @xmath242 for each @xmath51 $ ] are defined by @xmath243    this implies @xmath244 and @xmath245 . as @xcite point out , we have @xmath246 for all @xmath51 $ ] , which means that @xmath241 is a perverse mms allocation for @xmath55 and therefore an mms allocation for @xmath56 by [ transfer_goods_chores ] .",
    "the non - existence of an mms allocation for @xmath55 was shown by @xcite.@xmath235      we show the strong np - hardness by a reduction from 3-partition .",
    "we consider a setting with numbers @xmath247 , a set @xmath248 of @xmath249 elements , and an additive valuation function @xmath250 such that @xmath251 for all @xmath252 and @xmath253 .",
    "question : can @xmath1 can be partitioned into @xmath0 disjoint subsets where the total valuation of the elements in each subset is @xmath254 ?",
    "this decision problem is a strongly np - complete restricted version of the @xmath221-partition problem @xcite .",
    "the computation of an mms ( resp .",
    "perverse mms ) allocation for the corresponding instance @xmath21,(u)_{i\\in[n]})$ ] where each agent has the same utility function @xmath87 is equivalent to the computation of an mms ( resp .",
    "perverse mms ) partition for any single agent .    but",
    "this would answer the above mentioned strongly np - complete decision problem and therefore the computation of an mms allocation for both goods and chores ( by [ transfer_goods_chores ] ) - if it even exists - is strongly np - hard .",
    "let us now fix the number of agents to @xmath57 .",
    "we consider a number @xmath255 , a set @xmath256 and an additive valuation function @xmath250 .",
    "question : can @xmath1 can be partitioned into @xmath57 disjoint subsets where the total valuation of the elements in both subsets is the same ?",
    "this is a general instance of the integer partition problem which is np - complete @xcite .    the computation of an mms ( resp .",
    "perverse mms ) allocation for the corresponding instance @xmath257,(u)_{i\\in[2]})$ ] where both agents have the same utility function @xmath87 is equivalent to the computation of an mms ( resp .",
    "perverse mms ) partition for any single agent .    but",
    "this would answer the np - complete integer partition decision problem and therefore the computation of an mms allocation for both goods and chores ( by [ transfer_goods_chores ] ) - if it even exists - is np - hard for @xmath258.@xmath235      if @xmath149 for all @xmath29 $ ] then we have @xmath259 by [ optimal_mms_bounds ] .",
    "so let us assume that @xmath260 for at least one @xmath29 $ ] . by construction",
    ", @xmath151 is the maximal @xmath175 for which an allocation @xmath261_{>0}}\\in\\pi_{|n_{>0}|}(\\mathcal{m})$ ] with @xmath262 for all @xmath29_{>0}$ ] exists .",
    "if @xmath149 for an agent @xmath29 $ ] then even @xmath263 holds true for all @xmath155 .    in summary",
    ", @xmath151 is the maximal @xmath175 for which an allocation @xmath261}\\in\\pi_{n}(\\mathcal{m})$ ] with @xmath264 for all @xmath29 $ ] exists and therefore @xmath200.@xmath235",
    "if @xmath149 for all @xmath29 $ ] , there is nothing to show .",
    "so let us assume @xmath2_{>0}\\neq\\emptyset$ ] . since we know that a solution of the @xmath38-max - min problem for @xmath30 exists , there must be an allocation @xmath39 with @xmath265 for all @xmath29 $ ] . from this , we have @xmath266 for all @xmath29_{>0}$ ] , which implies @xmath267 .",
    "g.  amanatidis , e.  markakis , a.  nikzad , and a.  saberi .",
    "approximation algorithms for computing maximin share allocations . in _ proceedings of the 35th international colloquium on automata , languages , and programming ( icalp ) _ , pages 3951 , 2015 .",
    "s.  bouveret and m.  lematre . characterizing conflicts in fair division of indivisible goods using a scale of criteria . in _ proceedings of the 13th international conference on autonomous agents and multi - agent systems ( aamas )",
    "_ , pages 13211328 .",
    "ifaamas , 2014 .",
    "s.  bouveret , y.  chevaleyre , and n.  maudet .",
    "fair allocation of indivisible goods . in f.",
    "brandt , v.  conitzer , u.  endriss , j.  lang , and a.  d. procaccia , editors , _ handbook of computational social choice _",
    ", chapter  12 .",
    "cambridge university press , 2015 .",
    "r.  j. lipton , e.  markakis , e.  mossel , and a.  saberi . on approximately fair allocations of indivisible goods . in _ proceedings of the 5th acm conference on electronic commerce ( acm - ec ) _ ,",
    "pages 125131 .",
    "acm press , 2004 ."
  ],
  "abstract_text": [
    "<S> we consider max - min share ( mms ) allocations of items both in the case where items are goods ( positive utility ) and when they are chores ( negative utility ) . </S>",
    "<S> we show that fair allocations of goods and chores have some fundamental connections but differences as well . </S>",
    "<S> we prove that like in the case for goods , an mms allocation does not need to exist for chores and computing an mms allocation - if it exists - is strongly np - hard . in view of these non - existence and complexity results , </S>",
    "<S> we present a polynomial - time 2-approximation algorithm for mms fairness for chores . </S>",
    "<S> we then introduce a new fairness concept called optimal mms that represents the best possible allocation in terms of mms that is guaranteed to exist . for both goods and chores , </S>",
    "<S> we use connections to parallel machine scheduling to give ( 1 ) an exponential - time exact algorithm and ( 2 ) a polynomial - time approximation scheme for computing an optimal mms allocation when the number of agents is fixed . </S>"
  ]
}