{
  "article_text": [
    "on - line security plays a vital role to prevent users sensitive data from falling into wrong hands . jasta security model(_jasm _ ) can be used for providing higher degree of security to system / application where users authentication is required . by using this model ,",
    "the problem of phishing can be solved to a greater extent .",
    "this model can be deployed in banking systems , mailing systems , and in high security zones .",
    "here we mention two most commonly used security models .",
    "this security model typically requires a unique username and a password to login to an application .",
    "the attacker could easily get the user s credentials through phishing techniques and the user could end up being totally unaware of the event at all .",
    "example for such systems could be email systems , where user keys in his userid and password to login to his account .      in systems implementing _",
    "initially user will be prompted for his username and password and these details will be sent to the application .",
    "if they are verified to be correct , then as part of the second step , the user will be prompted for verifying the one - time verification passcode(_otp _ ) sent to the user s registered mobile number with the application . on successful verification , the user will be able to login to his account .",
    "example for such system is a 2-step verification mechanism provided by gmailfor ( google inc . ) .",
    "_ esm2 _ is more secure than _",
    "esm1_.      _ esm2 _ is more secure than _ esm1 _ , because it uses 2-step 2-channel verification . though _ esm2 _ is secure to some extent , it is having disadvantages . through man - in - the - middle attack(_mitm _ )",
    ", the attacker can easily get hold of user s password as well as his _",
    "otp_. in this way _",
    "esm2 _ can be completely compromised .",
    "_ esm2 _ depends on what user knows(password ) and what user receives(_otp _ ) to what he has(registered mobile ) to provide security .",
    "_ jasm _ is also a 2-step 2-channel verification model but it attempts to increase the level of security of the authorisation systems .      * _ secret code(sc ) _ : _ sc _ can be user s lucky number or a favorite dish or a common phrase or anything that user intends to maintain as a secret . * _ otpsc _ : _ otp _ followed by _ sc _",
    "is called _",
    "otpsc_. for example , if _ otp _ sent by the system is @xmath0 and @xmath1 of the user is @xmath2 , then _",
    "otpsc _ is @xmath3 . *",
    "_ account access ip(aaip )",
    "_ : client - side ip address from which the request for accessing user s account was made .",
    "* there will be seamless internet connectivity * there will be seamless mobile connectivity * with each user account two mobile numbers are registered . mobile number",
    "to which all account access related activities are to be sent by default is registered as",
    "_ primary mobile number_. another mobile number is registered as _ secondary mobile number _ , so that it can act as primary mobile number in case of loss / non - accessibility of the _ primary mobile number_.          the flowchart of _ jasm _ is represented in _",
    "figure 1_.    1 .",
    "user enters username to login to his account .",
    "2 .   the system , sends _",
    "otp _ to the user s _ primary mobile number _ to access his account .",
    "if the user selects _ secondary mobile number _ to receive _ otp _ , then the _ otp _ that was already sent to the _ primary mobile number _ will be re - sent to the _ secondary mobile number_. 3 .",
    "user will enter _ otpsc _ of the corresponding account .",
    "system verifies the _",
    "otpsc_. + here there will be 3 possible cases . *",
    "_ case 1 _ : if the _ otp _ portion is wrong , then the system will prompt for re - entering _",
    "otpsc_. * _ case 2 _ : if the _ otp _ portion is correct but _ sc _",
    "portion is wrong , then there may be a possibility that attacker got hold of user s _ otp _ and he is trying to crack the _ sc_. system will test if such scenario is repeated for a certain threshold . if that threshold is exceeded , then it will send _ aaip _ stating that _ sc _ is wrong to both the user s registered mobile numbers .",
    "thus , it alerts the user . *",
    "_ case 3 _ : if _ otpsc _ is entered correctly , then _",
    "aaip _ is sent to either user s _ primary _ or _ secondary _ mobile number based on what he has chosen .",
    "then user verifies the correctness of _ aaip _ and can access his account by entering the password .",
    "* user will get _ otp _ once he enters his username .",
    "_ otp _ will be valid only for a certain time - frame(_e.g .",
    ", 2hrs , 6hrs _ ) .",
    "if _ otp _ is not used in that time - frame , user will get a new _ otp _ when he tries to access his account next time . *",
    "if someone types in other user s username , the mobile will not be flooded with _",
    "otps_. user will get a new _ otp _ only after using the current _ otp _ or after the _ otp s _ time - frame expires , whichever is earlier . * in case of loss / non - accessibility of both the user s registered mobiles , then spl - passcodes should be available with the user as in 2-step verification mechanism provided by gmailfor ( google inc . ) .",
    "so the user enters spl - passcode along with his @xmath1 . even in this case , _ aaip _ will be sent to the user s registered mobile as a security measure .      * _ in the absence of client - side proxy _ : the ip address verification through _ aaip _ will help the user to verify whether the _ otpsc _ received by the server is from his ip . + for _ e.g. _ , if the user s ip is _",
    "x.y.z _ and he receives _",
    "aaip _ as _ a.b.c _ , then he can be sure that he is under _",
    "mitm_. on the other hand if the _ aaip _ is _",
    ", then he can be sure that he is not under _",
    "mitm_. * _ in the presence of client - side proxy _ : the ip address verification through _ aaip _ will help the user to verify whether the _ otpsc _ received by the server is via his proxy itself . + for _ e.g. _ , if the user s proxy ip is _",
    "x.y.z _ and he receives _",
    "aaip _ as _ a.b.c _ , then he can be sure that he is under _",
    "mitm_. on the other hand if the _",
    "aaip _ is _",
    ", then he can be sure that either himself or someone behind the same proxy have given the _ otpsc _ to the server .",
    "note that in the case of a proxy , _ jasm _ may fail if the attacker is behind the same proxy .",
    "* all advantages of _",
    "esm2 _ are applicable to _ jasm_. * as mentioned in _",
    "section 2.2.1 _ , the attacker can not get the user s password in _",
    "jasm_. the reason is , the system will verify the user through _ otpsc _ entered by him and the user will make sure that the _ otpsc _ received by the server is from his ip .",
    "this is verified through _ aaip _ he receives .",
    "so , this mechanism acts as a _ 2_-way handshake , before the user enters his password .",
    "so , it results in high security . *",
    "if the attacker gets hold of user s _ otp _ then also he can not crack _"
  ],
  "abstract_text": [
    "<S> _ jasm _ is a model designed to increase the security level in authentication systems . </S>",
    "<S> it uses ip address of the user in the authentication process to enhance the security . </S>"
  ]
}