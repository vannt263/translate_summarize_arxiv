{
  "article_text": [
    "cylindrical algebraic decomposition ( cad ) is a fundamental tool in real algebraic geometry .",
    "it was invented by g.e .",
    "collins in 1973  @xcite for solving real quantifier elimination ( qe ) problems . in the last forty years , following collins original projection - lifting scheme , many enhancements have been performed in order to ameliorate the efficiency of cad construction , including adjacency and clustering techniques  @xcite , improved projection methods  @xcite , partially built cads  @xcite , improved stack construction  @xcite , efficient projection orders  @xcite , making use of equational constraints  @xcite , and so on .",
    "moreover , cads can be computed by several software packages , such as qepcad  @xcite , mathematica  @xcite , redlog  @xcite and synrac  @xcite .    in  @xcite , together with b. xia and l. yang , we presented a different way for computing cads based on triangular decomposition of polynomial systems . in that paper",
    ", we introduced the concept of cylindrical decomposition of the complex space ( ccd ) , from which a cad can be easily derived .",
    "the concept of ccd is reviewed in section  [ sec : complex ] . in the rest of the present paper",
    ", we use tcad to denote cad based on triangular decompositions while pcad refers to cad based on collins projection - lifting scheme .",
    "the ccd part of tcad can be seen as an enhanced projection phase of pcad .",
    "however , w.r.t .",
    "pcad ( especially when the projection operator is using collins",
    "@xcite or hong s  @xcite ) , the `` case discussion '' scheme of tcad avoids unnecessary computations that projection operator performs on unrelated branches .",
    "in addition , one observes that the reason why mccallum s  @xcite ( including brown s  @xcite ) projection operators may fail for some examples is due to the fact that they are missing a `` case discussion '' scheme .",
    "mccallum s operator relies on the assumption that generically all coefficients of a polynomial will not vanish simultaneously above a positive - dimensional component .",
    "if this assumption fails , then this operator is replaced by collins - hong projection - operator  @xcite .",
    "the fact that all coefficients of polynomial could vanish simultaneously above some component is never a problem in tcad .",
    "for this reason , we view it as an improvement of previous works .",
    "trying to use sophisticated algebraic elimination techniques to improve cad constructions is not a new idea . in papers",
    "@xcite , the authors investigated how to use grbner bases to preprocess the input system in order to make the subsequent cad computations more efficient .",
    "the main difference between these two works and the work of  @xcite is that the former approach is about preprocessing input for cad while the latter one presents a different way of constructing cads .    in  @xcite ,",
    "the focus was on how to apply triangular decomposition techniques to compute cads .",
    "to this end , lots of existing high - level routines were used to facilitate explaining ideas .",
    "these high - level routines involve many black - boxes , which hide many unnecessary or redundant computations . as a result ,",
    "the computation time of tcad is much higher than that of pcad , although tcad computes usually less cells  @xcite .    in the present paper , we abandon those black - boxes and compute tcad from scratch .",
    "it turns out that the key solution for avoiding redundant computations is to compute ccd in an _",
    "incremental manner_. the same motivation and a similar strategy appeared in  @xcite in the context of triangular decomposition of algebraic sets .",
    "the core operation of such an incremental algorithm is an intersect operation , which refines an existing cylindrical tree w.r.t .",
    "a polynomial .",
    "we dedicate section  [ sec : incremental ] to presenting a complete incremental algorithm for computing tcad by means of this intersect operation .",
    "in  @xcite , the author presented an algorithm for computing with semi - algebraic sets represented by cylindrical algebraic formulas .",
    "that algorithm also allows computing cad in an incremental manner .",
    "the underlying technique is based on the projection - lifting scheme where one first computes projection factor sets by a global projection operator .",
    "in contrast , the incremental algorithm presented here , is conducted by refining different branches of an existing tree via gcd computations .",
    "this intersect operation can systematically take advantage of equational constraints .",
    "the problem of making use of equational constraints in cad has been studied by many researchers  @xcite . in section  [ sec :",
    "equation ] , we provide a detailed discussion on how we solve this problem .",
    "when applied to a polynomial system having finitely many complex solutions , our incremental ccd algorithm specializes into computing a triangular decomposition , say @xmath0 , such that the zero sets of the output regular chains are disjoint .",
    "moreover , such a decomposition has no critical pairs in the sense of the equiprojectable decomposition algorithm of  @xcite .",
    "this implies that only the `` merge '' part of the `` split & merge '' algorithm of  @xcite is required for turning @xmath0 into an equiprojectable decomposition ( which is a canonical representation of the input variety , once the variable order is fixed ) .",
    "consequently , one could hope extending the notion of equiprojectable decomposition ( and related algorithms ) to positive dimension by means of our incremental ccd algorithm .",
    "this perspective can be seen as an indirect application of cad to triangular decomposition .",
    "as we shall review in section  [ sec : complex ] , a ccd is encoded by a tree data - structure .",
    "then each path of this tree is a simple system in the sense of  @xcite .",
    "so the work presented here can also be used to compute a thomas decomposition of a polynomial system  @xcite .",
    "moreover , the decomposition we compute is not only disjoint , but also cylindrically arranged",
    ".    the complexity of our algorithm can not be better than doubly exponential in the number of variables  @xcite .",
    "so the motivation of our work is to suggest possible ways to improve the practical applicability of cad .",
    "the benchmark in section  [ sec : benchmark ] shows that tcad outperforms qepcad  @xcite and mathematica  @xcite for many well - known examples .",
    "the algorithm presented in this paper can support qe .",
    "we have realized a preliminary implementation of an algorithm for doing qe via tcad .",
    "we will report on this work in a future paper .",
    "throughout this paper , we consider a field @xmath1 of characteristic zero and denote by @xmath2 the algebraic closure of @xmath1 .",
    "let @xmath3 $ ] be the polynomial ring over the field @xmath1 with ordered variables @xmath4 .",
    "let @xmath5 $ ] be a non - constant polynomial and @xmath6 be a variable .",
    "we denote by @xmath7 and @xmath8 the degree and the leading coefficient of @xmath9 w.r.t .",
    "the greatest variable appearing in @xmath9 is called the _ main variable _ , denoted by @xmath11 .",
    "the leading coefficient , the degree , the reductum of @xmath9 w.r.t .",
    "@xmath11 are called the _ initial _ , the _ main degree _ , the _ tail _ of @xmath9 ; they are denoted by @xmath12 , @xmath13 , @xmath14 respectively .",
    "the integer @xmath15 such that @xmath16 is called the _ level _ of the polynomial @xmath9 .",
    "we denote by @xmath17 the derivative of @xmath9 w.r.t .",
    "the notions presented below were introduced in  @xcite and they are illustrated at the beginning of section  [ sec : datastructure ] .    *",
    "* let @xmath18 be a subset of @xmath19 and @xmath20 $ ] be a finite set of level @xmath21 polynomials .",
    "we say that @xmath22 _ separates above _",
    "@xmath18 if for each @xmath23",
    ":    for each @xmath24 , the polynomial does not vanish at @xmath25 ,    the polynomials @xmath26 $ ] , for all @xmath24 , are squarefree and coprime .",
    "note that this definition allows @xmath18 to be a semi - algebraic set , see theorem  [ theorem : stack ] .    * cylindrical decomposition .",
    "* by induction on @xmath21 , we define the notion of a _ cylindrical decomposition of _ @xmath27 together with that of the _ tree associated with a cylindrical decomposition of _ @xmath27 . for @xmath28 , a cylindrical decomposition of @xmath2",
    "is a finite collection of sets @xmath29 , where either @xmath30 and @xmath31 , or @xmath32 and there exists @xmath33 non - constant coprime squarefree polynomials @xmath34 of @xmath35 $ ] such that for @xmath36 we have @xmath37 and @xmath38 note that the @xmath39 s , for all @xmath40 , form a partition of @xmath2 .",
    "the tree associated with @xmath41 is a rooted tree whose nodes , other than the root , are @xmath42 which all are leaves and children of the root .",
    "now let @xmath43 , and let @xmath44 be any cylindrical decomposition of @xmath19 . for each @xmath39 ,",
    "let @xmath45 be a non - negative integer and let @xmath46 be a set of polynomials which separates above @xmath39 .",
    "if @xmath47 , set @xmath48 .",
    "if @xmath49 , set @xmath50 for @xmath51 and set @xmath52 the collection @xmath53 is called a _ cylindrical decomposition _ of @xmath54 .",
    "the sets @xmath55 are called the _ cells _ of @xmath41 .",
    "if @xmath56 is the tree associated with @xmath57 then the tree @xmath58 associated with @xmath41 is defined as follows . for each @xmath59 ,",
    "the set @xmath39 is a leaf in @xmath56 which has all @xmath55 s for children in @xmath58 ; thus the @xmath55 s are the leaves of @xmath58 .",
    "note that each node @xmath60 of @xmath58 is either associated with no constraints , or associated with a polynomial constraint , which itself is either an equation or an inequation .",
    "note also that , if the level of the polynomial defining the constraint at @xmath60 is @xmath61 , then @xmath61 is the length of a path from @xmath60 to the root .",
    "moreover , the polynomial constraints along a path from the root to a leaf form a polynomial system called a _ cylindrical system _ _ of _ @xmath62 $ ] _ induced by _ @xmath58 .",
    "let @xmath63 be such a cylindrical system .",
    "we denote by @xmath64 the zero set of @xmath63 .",
    "therefore , each cell of @xmath41 is the zero set of a cylindrical system induced by @xmath58 .",
    "let @xmath65 be a sub - tree of @xmath58 such that the root of @xmath65 is that of @xmath58 .",
    "then , we call @xmath65 a _ cylindrical tree of _",
    "@xmath62 $ ] _ induced by _ @xmath58 .",
    "this cylindrical tree @xmath65 is said _ partial _ if it admits a non - leaf node @xmath60 such that the zero set of the constraint of @xmath60 is not equal to the union of the zero sets of the constraints of the children of @xmath60 .",
    "if @xmath65 is not partial , then it is called _",
    "complete_.    in the algorithms of section  [ sec : incremental ] , the cylindrical tree is an essential data structure .",
    "section  [ sec : datastructure ] discusses the main properties and operations on this data structure .",
    "let @xmath66 be a finite set of polynomials of @xmath67 $ ] .",
    "a cylindrical decomposition @xmath41 of @xmath54 is called _ @xmath68-invariant _",
    "if for any given cell @xmath69 of @xmath41 and any given polynomial @xmath70 , either @xmath71 vanishes at all points of @xmath69 or @xmath71 vanishes at no points of @xmath69 .",
    "let @xmath72 . an @xmath68-invariant cylindrical decomposition of @xmath73",
    "is illustrated by figure  [ fig : tree ] .",
    "we observe that every cylindrical system induced by a cylindrical tree is a _ simple system _ , as defined by wang in  @xcite .",
    "this notion was first introduced by thomas in 1937  @xcite .",
    "simple systems have many nice properties .",
    "for example , if @xmath74 $ ] is a simple system , then the pair @xmath75 $ ] is a squarefree regular system , as defined by wang in  @xcite .",
    "let @xmath65 be a cylindrical system of @xmath76 $ ] and let @xmath9 be a polynomial of @xmath76 $ ] .",
    "we say that @xmath9 is _ invertible modulo _",
    "@xmath65 if for any @xmath77 , we have @xmath78 .",
    "we say that @xmath9 is _ zero modulo _",
    "@xmath65 if for any @xmath77 , we have @xmath79 .",
    "we say that @xmath9 is _ sign invariant above _",
    "@xmath65 if @xmath9 is either zero or invertible modulo @xmath65 . let @xmath80 be another polynomial of @xmath76 $ ] .",
    "we say that @xmath81 modulo @xmath65 if @xmath82 .",
    "* greatest common divisor ( gcd ) .",
    "* let @xmath9 and @xmath71 be two level @xmath21 polynomials in @xmath76 $ ] .",
    "let @xmath65 be a cylindrical system of @xmath83 $ ] .",
    "for any @xmath84 of @xmath85 , assume at least one of @xmath86 and @xmath87 is not zero . a polynomial @xmath88 $ ] is called a _ gcd of _",
    "@xmath9 _ and _ @xmath71 _ modulo _",
    "@xmath65 if for any @xmath84 of @xmath85 ,    @xmath89 is a gcd of @xmath90 and @xmath91 in @xmath92 $ ] , and    we have @xmath93 .",
    "let @xmath94 , @xmath95 .",
    "recall that we assume @xmath96 .",
    "let @xmath97 .",
    "let @xmath65 be a cylindrical system of @xmath83 $ ] .",
    "let @xmath98 be the subresultant polynomials  @xcite of @xmath9 and @xmath71 w.r.t .",
    "let @xmath100 be the principle subresultant coefficient of @xmath101 , for @xmath102 .",
    "if @xmath103 , we define @xmath104 , @xmath105 , @xmath106 and @xmath107 . if @xmath108 , we define @xmath109 , @xmath110 , @xmath111 and @xmath112 .    [",
    "theorem : gcd ] let @xmath113 be an integer , with @xmath114 , such that @xmath115 is invertible modulo @xmath65 and such that for any @xmath116 , we have @xmath117 modulo @xmath65 . then @xmath118 is a gcd of @xmath9 and @xmath71 modulo @xmath65",
    ".    it can be easily proved by the specialization property of subresultant chains . in particular , it is a direct corollary of theorem 5 in  @xcite .",
    "in this section , we describe the data - structures that are used by the algorithms presented in this paper for computing cylindrical decompositions . to understand the motivation of our algorithm design ,",
    "let us consider a simple example with @xmath119 variables .",
    "let @xmath120 be two coprime squarefree non - constant univariate polynomials in @xmath121 $ ] .",
    "observe that @xmath122 / \\langle a \\ , b \\rangle$ ] is a direct product of fields .",
    "let also @xmath123 be two bivariate polynomials of @xmath124 $ ] , such that @xmath125 , @xmath126 , and @xmath127 hold and such that @xmath123 are coprime and squarefree univariate as polynomials of @xmath128 $ ] .",
    "therefore the following four polynomial systems are simple systems @xmath129 that we denote respectively by @xmath130 .",
    "it is easy to check that the zero sets @xmath131 , @xmath132 , @xmath133 , @xmath134 are the cells of a cylindrical decomposition @xmath41 of @xmath135 .",
    "let @xmath136 $ ] be another univariate polynomial .",
    "assume that one has to _ refine _",
    "@xmath41 into a cylindrical decomposition of @xmath135 which is required to be @xmath137-invariant .",
    "that is , one has to test whether @xmath71 is invertible or zero modulo each of the systems @xmath130 , and further decompose when appropriate .",
    "assume that the polynomial @xmath138 divides @xmath71 whereas @xmath139 are coprime .",
    "assume also that the system @xmath140 is processed first in time . by computing @xmath141 , which yields @xmath138 , one splits @xmath140 into the following two sub - systems that we denote by @xmath142 and @xmath143 .",
    "@xmath144 assume that @xmath145 is processed next . by computing @xmath141 ( again )",
    "one splits @xmath145 into the following two sub - systems that we denote by @xmath146 and @xmath147 .",
    "@xmath148 consequently , in the course of the creation of @xmath149 , @xmath146 and @xmath147 , the same polynomial gcd and the same field extensions ( namely @xmath121 / \\langle a \\rangle$ ] and @xmath121 / \\langle b \\rangle$ ] ) were computed twice .",
    "this duplication of calculation and data is a common phenomenon and a performance bottleneck in most algorithms for decomposing polynomial systems .",
    "mathematically , each constructible set should not be represented more than once in a computer program .",
    "to implement this idea , all constructible sets manipulated during the execution of a given computer program should be seen as part of the same _ universe _ , say @xmath27 .",
    "moreover , the subroutines of this program should have the same view on the universe , which is then a _ shared data - structure _ , such that whenever a subroutine modifies the universe all subroutines have immediate access to the modified universe . satisfying these requirements",
    "is a well - known challenge in computer science , an instance of which is the question of _ memory consistency _ for shared - memory parallel computer architectures , such as multicores . with our above example ,",
    "even if we do not intend to run computations concurrently , we are concerned with the practical efficiency and ease - of - use of the mechanisms that maintain _ up - to - date _",
    "all views on the universe .",
    "recall that a cylindrical decomposition can be identified to a tree where each node is a constructible set of @xmath27 given by either an equation constraint , or an inequation constraint , or no constraints at all . in this latter case , the corresponding constructible set is the whole space .",
    "all algorithms in section  [ sec : incremental ] work on a given cylindrical decomposition @xmath41 encoded by a tree @xmath58 ( as defined in section  [ sec : complex ] ) .",
    "that is , the tree @xmath150 is regarded as the universe .",
    "we assume that there is a procedure for updating the tree @xmath58 , which , given a `` node - to - be - replaced '' @xmath60 and its `` replacing nodes '' @xmath151 , is called split@xmath152 and works as follows :    for @xmath153 , for each child @xmath18 of @xmath60 deeply copy ( thus creating new nodes ) the sub - tree rooted at @xmath18 and make that copy of @xmath18 a child of @xmath154 ,    update the parent of @xmath60 such that @xmath151 are new children of the the parent of @xmath60 ,    remove the entire sub - tree rooted at @xmath60 from the universe , including @xmath60 .",
    "we assume that all updates are performed sequentially ( thus using mutual exclusion mechanism in case of concurrent execution of the algorithms of section  [ sec : incremental ] ) such that no data - races can occur .",
    "we also assume that each node @xmath60 ( whether it is a node in the present or has been removed from the universe ) has a unique key , called key@xmath155 , and a data field , called value@xmath155 , storing various information including :    a time stamp past or present ,    if past , the list of its replacing nodes ( as specified with the split procedure ) and the list of its children at the time it was replaced ,    if present , the list of its children and a pointer to the parent .",
    "all nodes are stored in a _ dictionary _ @xmath156 which can be accessed by all subroutines . modifying the universe means updating @xmath156 using the split procedure . since all our algorithms stated in section  [ sec : incremental ]",
    "are sequential , no synchronization issue has to be considered .",
    "the mechanism described above allows us to achieve our goals .",
    "in this section , we present an incremental algorithm for computing a cylindrical tree , as defined in section  [ sec : complex ] .",
    "we start by commenting on the style of the pseudo - code . secondly , we present the specifications of the algorithm and related subroutines .",
    "thirdly , we state all the algorithms in pseudo - code style .",
    "finally , proof sketches of the algorithms are provided at the end of this section .    following the principles introduced in section  [ sec : datastructure ] , our procedures operate on a `` universe '' ( which is a cylindrical tree @xmath150 ) that they modify when needed .",
    "these modifications are of two types :    splitting a node ,    attaching information to a node .",
    "in addition to the attributes described in section  [ sec : datastructure ] , a node has attributes corresponding to the results of operations like squarefree , gcd , intersect . in other words ,",
    "our procedures do not return values ; instead they store their results in the nodes of the universe .",
    "this technique greatly simplifies pseudo - code .",
    "since attributes of nodes are intensively used in our pseudo - code , we use the standard `` dot '' notation of object oriented programming languages .",
    "in addition , since a node can have many attributes , we make the following convention .",
    "suppose that a node @xmath157 is split into two nodes @xmath158 and @xmath159 .",
    "some attributes are likely to have different values in @xmath158 ( resp .",
    "@xmath159 ) and @xmath157 .",
    "but most of them will often have the same values in both nodes . therefore , after setting up the values of the attributes that differ , we simply write @xmath158.others : = @xmath157.others to define the attributes of @xmath158 whose values are unchanged w.r.t .",
    "@xmath157 .",
    "several procedures iterate through all the paths of the universe @xmath150 . by path , we mean a path ( in the sense of graph theory ) from the root of @xmath150 to a leaf of @xmath150",
    ". the current path is often denoted by @xmath65 or @xmath18 .",
    "recall from section  [ sec : complex ] that a path in @xmath150 corresponds to a simple system , say @xmath63 .",
    "computing modulo @xmath63 may split @xmath63 and thus modify the universe _ automatically _ , that is , in a transparent manner in the pseudo - code .",
    "however , splitting @xmath63 also changes the current path . for clarity ,",
    "we explicitly invoke a function called updatepath , which updates its first argument ( namely the current path ) from the universe .    in order to iterate through all the paths of the universe @xmath150",
    ", we use a function nextpathtodo .",
    "this command is a _ generator _ or an _ iterator _ in the sense of the theory of programming languages .",
    "that is , it views @xmath150 as a stream of paths and returns the next path - to - be - visited , if any . thanks to the fact that the universe is always up - to - date , the function nextpathtodo is able to return the next path - to - be - visited in the current state of the universe .    a frequently used operation on the universe and its paths is extractprojection ,",
    "see for instance algorithm  [ algo : intersectpath ] .",
    "when applied to the universe @xmath150 and an integer @xmath15 ( for @xmath160 , where @xmath21 is the length of a path from the root of @xmath150 to a leaf of @xmath150 ) extractprojection returns a `` handle '' on the universe `` truncated '' at level @xmath15 , that is , the universe where all nodes of level higher than @xmath15 are ignored ( thus viewing the level @xmath15 nodes as leaves ) . when applied to path",
    ", extractprojection has a similar output .",
    "we often say that a function ( see for instance algorithm  [ algo : intersect ] ) returns a refined cylindrical decomposition .",
    "this is another way of saying that the universe is updated to a new state corresponding to a cylindrical decomposition refining ( in the sense of a partition of a set refining another partition of the same set ) the cylindrical decomposition of the previous state .",
    "after these preliminary remarks on the pseudo - code , we present the specifications of the algorithm and related subroutines .",
    "the top level algorithm for computing a cylindrical tree is described by algorithm  [ algo : cylindricaldecompose ] .",
    "it takes a set @xmath68 of non - constant polynomials in @xmath67 $ ] as input and returns an @xmath68-invariant cylindrical decomposition of @xmath54 .",
    "this algorithm relies on a core operation , called intersect , which computes a cylindrical decomposition in an incremental manner .",
    "the intersect operation is described by algorithm  [ algo : intersect ] .",
    "it takes a cylindrical tree @xmath150 and a polynomial @xmath9 of @xmath67 $ ] as input .",
    "it refines tree @xmath150 such that @xmath9 is sign invariant above each path of the refined tree @xmath150 .",
    "this operation is achieved by refining each path of @xmath150 with intersectpath .",
    "the intersectpath operation is described by algorithm  [ algo : intersectpath ] .",
    "it takes a polynomial @xmath9 , a cylindrical tree @xmath150 and a path @xmath65 of @xmath150 in @xmath67 $ ] as input .",
    "it refines @xmath65 and updates the tree @xmath150 accordingly such that @xmath9 is sign invariant above each path derived from @xmath65 in the updated tree @xmath150 .",
    "this operation finds the node @xmath60 in @xmath65 whose level is the same as that of @xmath9 .",
    "let @xmath161 be the sub - path of @xmath65 from @xmath60 to the root of @xmath150 .",
    "the intersectpath operation then calls the routine intersectmain so as to refine @xmath161 into a tree @xmath162 such that @xmath9 becomes sign invariant w.r.t . @xmath162 .",
    "the routine intersectmain is described by algorithm  [ algo : intersectmain ] .",
    "it takes a cylindrical tree @xmath150 , a path @xmath65 of @xmath150 , and a polynomial of the same level as the leaves of @xmath150 in @xmath67 $ ] as input .",
    "it refines @xmath65 and updates the tree @xmath150 accordingly such that @xmath9 becomes sign invariant above each path derived from @xmath65 in the updated tree .",
    "the routine intersectmain works in the following way .",
    "it first splits @xmath65 such that above the projection @xmath163 of each new branch @xmath18 of @xmath65 in @xmath19 , the number of distinct roots of @xmath9 w.r.t .",
    "@xmath99 is invariant .",
    "this is achieved by the operation squarefree , described by algorithm  [ algo : squarefree ] .",
    "the squarefree part of @xmath9 above a branch @xmath18 is denoted by @xmath164 .",
    "if @xmath9 has no roots or is identically zero above @xmath163 , the sign of @xmath9 above @xmath18 is determined immediately .",
    "otherwise , a case discussion is made according to the structure of the leaf node @xmath157 of @xmath18 .",
    "if @xmath157 has no constraints associated to it , then @xmath157 is simply split into two new nodes @xmath165 and @xmath166 .",
    "assume now that @xmath157 has a constraint , which can be either of the form @xmath167 or of the form @xmath168 , where @xmath71 is a level @xmath21 polynomial squarefree modulo @xmath163 .",
    "this case is handled by computing the gcd @xmath169 of @xmath164 and @xmath71 modulo @xmath163 .",
    "the node @xmath157 then splits based on the gcd @xmath169 and the co - factors of @xmath164 and @xmath71 .",
    "the gcd is computed by the operation @xmath170 , described by algorithm  [ algo : gcd ] and  [ algo : gcdi ] .",
    "the co - factors are computed by algorithm  [ algo : cofactor ] .",
    "the squarefree and gcd operations rely on the operation makeleadingcoefficientinvertible , described by algorithm  [ algo : invertleadingcoefficient ] .",
    "this latter operation takes as input a polynomial @xmath9 of @xmath67 $ ] , a cylindrical tree @xmath150 of @xmath171 $ ] and a path @xmath65 of @xmath150 .",
    "then , it refines @xmath65 and updates @xmath150 accordingly such that above each path @xmath18 of @xmath150 derived from @xmath65 , the polynomial @xmath9 is either zero or its leading coefficient is invertible .",
    "all the algorithms also rely on the following three operations which perform manipulations and traversal of the tree data structure .",
    "for these three operations , only specifications are provided below while their algorithms are explained in section  [ sec : datastructure ] .",
    "input : a cylindrical tree @xmath150 .",
    "a path @xmath65 in some past state of @xmath150 .",
    "output : a subtree @xmath172 in present state of @xmath150 .",
    "@xmath172 is derived from @xmath65 according to the historical data of @xmath150 .",
    "input : a cylindrical tree @xmath150 of @xmath173 $ ] .",
    "an integer @xmath15 , @xmath174 .",
    "output : a cylindrical tree @xmath175 in @xmath176 $ ] such that @xmath175 is the projection of @xmath150 in @xmath177 $ ] .",
    "[ algo : nextpathtodo ]    input : a cylindrical tree @xmath150 in @xmath67 $ ] .",
    "output : for a fixed traversal order of a tree , return the first `` todo '' path @xmath65 of @xmath150 .",
    "[ algo : cylindricaldecompose ]    [ algo : intersect ]    [ algo : intersectpath ]    [ algo : intersectmain ]    [ algo : squarefree ]    [ algo : gcdi ]    [ algo : cofactor ]    [ algo : invertleadingcoefficient ]    for a set of polynomials in @xmath62 $ ] , algorithm  [ algo : cylindricaldecompose ] computes an @xmath68-invariant cylindrical decomposition of @xmath54 .",
    "firstly , we prove the termination .",
    "the basic mutual calling graph of its subroutines are : @xmath178 and @xmath179 so the termination is easily proved by induction .",
    "the correctness follows from the specification of its subroutines and theorem  [ theorem : gcd ] .    in this example",
    ", we illustrate the operation intersectpath .",
    "let @xmath72 .",
    "the incremental algorithm first computes an @xmath180 sign invariant complex cylindrical tree , which is described by the following tree @xmath150 .",
    "@xmath181 let @xmath65 be the path @xmath182 of @xmath150 .",
    "calling @xmath183 will update @xmath150 into the following tree .",
    "in this section , we review briefly how to compute a cad of @xmath185 from a cylindrical decomposition of @xmath186",
    ". the reader may refer to  @xcite for more details . recall that @xmath187 holds .",
    "we denote by @xmath188 the standard projection from @xmath189 to @xmath190 that maps @xmath191 onto @xmath192 .    * stack over a connected semi - algebraic set .",
    "* let @xmath63 be a connected semi - algebraic subset of @xmath193 .",
    "the _ cylinder _ over @xmath63 in @xmath185 is defined as @xmath194 .",
    "let @xmath195 be continuous semi - algebraic functions defined on @xmath63 .",
    "the intersection of the graph of @xmath196 with @xmath197 is called the _ @xmath196-section _ of @xmath197 .",
    "the set of points between two consecutive sections of @xmath197 is a connected semi - algebraic subset of @xmath185 , called a _ sector _ of @xmath197 .",
    "all the sections and sectors of @xmath197 form a disjoint decomposition of @xmath197 , called a _ stack _ over @xmath63 .    * cylindrical algebraic decomposition . * a finite partition @xmath41 of @xmath185",
    "is called a _ cylindrical algebraic decomposition _ ( cad ) of @xmath185 if one of the following properties holds .    either @xmath28 and @xmath41 is a stack over @xmath198 .    or the set of @xmath199 is a cad of @xmath193 and each @xmath200 is a section or sector of the stack over @xmath201 .",
    "when this holds , the elements of @xmath41 are called _ cells_.    * sign invariance and delineability .",
    "* let @xmath9 be a polynomial of @xmath202 $ ] , and let @xmath63 be a subset of @xmath185 .",
    "the polynomial @xmath9 is called _ sign invariant _ on @xmath63 if the sign of @xmath203 does not change when @xmath25 ranges over @xmath63 .",
    "let @xmath204 $ ] be a finite polynomial set .",
    "we say @xmath63 is @xmath68-invariant if each @xmath205 is invariant on @xmath63 .",
    "a cylindrical algebraic decomposition @xmath41 is @xmath68-invariant if @xmath68 is invariant on each cell @xmath206 .",
    "let @xmath9 be a polynomial of @xmath202 $ ] , and let @xmath63 be a connected semi - algebraic set of @xmath193 .",
    "we say that @xmath9 is _ delineable _ on @xmath63 if the real zeros of @xmath9 define continuous semi - algebraic functions @xmath207 such that , for all @xmath208 we have @xmath209 .",
    "in other words , @xmath9 is delineable on @xmath63 if its real zeros naturally determine a stack over @xmath63 .",
    "we recall the following theorem introduced in  @xcite .    [",
    "theorem : stack ] let @xmath210 be a finite set of polynomials in @xmath211 $ ] of level @xmath21 .",
    "let @xmath63 be a connected semi - algebraic subset of @xmath193 . if @xmath22 _ separates _ above @xmath63",
    ", then each @xmath212 is delineable on @xmath63 .",
    "moreover , the product of the @xmath213 is also delineable on @xmath63 .",
    "let @xmath68 be a finite set of polynomials in @xmath214 $ ] .",
    "let @xmath215 be an @xmath68-invariant complete cylindrical tree of @xmath186 .",
    "applying theorem  [ theorem : stack ] to polynomials in @xmath215 , we can derive an @xmath68-invariant cylindrical algebraic decomposition of @xmath185 by induction on @xmath21 .",
    "a procedure makesemialgebraic , was introduced in  @xcite to derive a cad from a @xmath215 via real root isolation of zero - dimensional regular chains .",
    "let @xmath216 .",
    "an @xmath68-invariant cylindrical algebraic decomposition is described by the following tree . @xmath217",
    "in this section , we discuss several possible optimizations to algorithms presented in section  [ sec : incremental ] .",
    "firstly , we discuss how to compute a cad dedicated to a semi - algebraic system , which provides a systematic solution for making use of equational constraints when computing cads .",
    "the motivation for making use of equational constraints comes from quantifier elimination .",
    "let @xmath218 be a prenex formula , where @xmath219 is a dnf formula . to perform qe by cad ,",
    "the first computation step is to collect all the polynomials appearing in @xmath219 as a polynomial set @xmath68 and compute an @xmath68-invariant cad of @xmath185 .",
    "this process of computing an @xmath68-invariant cad exhausts all possible sign combinations of @xmath68 , including those which do not appear in @xmath219 , and thus often computes much more than needed for solving the input qe problem .",
    "different techniques in the literature have been proposed for taking advantage of the structure of the input problem .",
    "these methods include partial cad  @xcite for lazy lifting , simplified projection operator for handling pure strict inequalities  @xcite , smaller projection sets for making use of equational constraints  @xcite .    to make the discussion clear , we first quote a paragraph of  @xcite .",
    "`` the idea is as follows : if an input formula includes the constraint @xmath167 , then decompose @xmath220 into regions in which @xmath71 has invariant sign , and then refine the decomposition so that the other polynomials have invariant sign in those cells in which @xmath167 .",
    "the signs of the other polynomials in cells in which @xmath221 are , after all , irrelevant . additionally , the method of equational constraints seeks to deduce and use constraints that are not explicit in the input formula , but rather arise as consequences of two or more explicit constraints ( e.g. if @xmath167 and @xmath222 are explicit constraints , then @xmath223 is also a constraint . ) ''",
    "this idea , of course , is attractive .",
    "much progress on it has also been made .",
    "however , the reason why it is a generally hard problem for cad is that the framework of pcad does not have much flexibility to allow propagation of equational constraints . in the world of pcad",
    ", one always tries to obtain a generic projection operator and then applies the same projection operator recursively . to obtain a generic projection operator for handling equational constraints is hard because many problems inherently require different projection operators during projection .",
    "therefore case discussion is important .",
    "in fact , case discussion is very common in algorithms for computing triangular decompositions . for such algorithms ,",
    "equational constraints are natural input of these algorithms .",
    "the two keys ideas `` splitting only above @xmath167 '' and `` if @xmath167 and @xmath222 are explicit constraints , then @xmath223 is also a constraint '' have already been systematically taken care of in the intersect operation of the authors paper for computing triangular decompositions  @xcite .",
    "next we explain how to modify algorithms presented in section  [ sec : incremental ] to automatically implement these ideas .",
    "suppose now that the input of algorithm cylindricaldecompose is a system of equations or inequations , this algorithm will then compute a partial cylindrical tree such that its zero set is exactly the zero set of input system .",
    "this can be simply achieved by passing an equation or inequation to the function intersect . w.l.o.g .",
    ", let us assume that an equation @xmath224 is passed as an argument of intersect . then for this function and",
    "all its called subroutines , we will cut the computation branches above which @xmath9 is known to be nonzero and never proceed with computation branches above which @xmath9 can not be zero . for example , we will not create a new vertex at step @xmath225 in algorithm intersectmain .",
    "we will delete the vertex @xmath157 at step @xmath226 , @xmath227 , @xmath228 since @xmath9 is nonzero on @xmath157 .",
    "the first important optimization in intersectmain which can be implemented is to avoid squarefree computation at step @xmath229 if @xmath230 is an equational constraint .",
    "this idea is quite close to `` splitting only above @xmath167 '' .",
    "another important optimization can be done at step @xmath231 of intersectmain .",
    "assume that @xmath232 is an equational constraint @xmath167 , then when gcd is called , in step @xmath233 of algorithm  [ algo : gcdi ] , we can do as follows .",
    "if @xmath234 , then @xmath235 is the resultant of @xmath9 and @xmath71 .",
    "thus we should pass @xmath117 to the intersectpath operation in order to avoid useless computations on the branch @xmath236 .",
    "this addresses the idea `` if @xmath167 and @xmath222 are explicit constraints , then @xmath223 is also a constraint . ''",
    "moreover , these optimizations are systematically performed during the whole computation .",
    "next we briefly mention several other important optimizations .",
    "let @xmath157 be a leaf of a path @xmath65 of a cylindrical tree .",
    "assume that @xmath232 is of the form @xmath168 or of the form @xmath167 .",
    "we can safely replace @xmath71 by its primitive part since @xmath237 is invertible modulo @xmath238 .",
    "replacing @xmath71 by its irreducible factors over @xmath239 is often a more efficient choice .",
    "last but not least , recall that a path @xmath65 in the cylindrical tree is a simple system . writing @xmath65 as two parts @xmath240 $ ] , where @xmath150 is a set of equations and @xmath156 is a set of inequations . we know that @xmath150 is a regular chain and @xmath65 is a squarefree regular system . thus the zariski closure of @xmath65 is the variety of the saturated ideal of @xmath150 .",
    "we can call the pseudo division operation @xmath241 or @xmath242 to test whether @xmath9 or @xmath71 is zero modulo @xmath65 . and sometimes replacing @xmath9 by @xmath241 and @xmath71 by @xmath242 also ease the computations .",
    "let @xmath243 be a system of equations .",
    "taking @xmath68 as input , algorithm cylindricaldecompose generates the following partial cylindrical tree @xmath150 of @xmath73 such that the zero set of @xmath68 is exactly the union of the zero sets of the paths in @xmath150 .",
    "in this section , we report on the experimental results of a preliminary implementation in the regularchains library of maple of the algorithms of sections  [ sec : incremental ] and [ sec : cad ] .",
    "the examples in table  [ table : cd ] and table  [ table : cad ] are from papers on polynomial system solving , such as  @xcite and the references therein .",
    "all the tests were launched on a machine with intel core 2 quad cpu ( 2.40ghz ) and 8.0 gb total memory .",
    "the time - out is set as @xmath244 hour . in the tables ,",
    "the symbol @xmath245 means time - out .",
    "the maple functions are launched in maple  15 with the latest regularchains library .",
    "the memory usage is limited to @xmath246 of total memory .",
    "the software qepcad is launched with the option @xmath247 , where the first option specifies the memory to be pre - allocated ( about @xmath248 of total memory for our machine ) and the second option specifies the number of prime numbers to be used .",
    ".timings for computing cylindrical decomposition of the complex space [ cols=\"^,^,^,^,^,^,^,^\",options=\"header \" , ]     in table  [ table : cd ] , we report on timings for computing cylindrical decomposition of the complex space with different algorithms and options .",
    "each input system is a set of polynomials .",
    "the notation tcd - rec denotes an implementation of the original recursive algorithm in  @xcite , while the notation tcd - inc denotes the incremental algorithm presented in section  [ sec : incremental ] .",
    "both tcd - rec and tcd - inc take a set of polynomials as input .",
    "the notation tcd - eqs refers to an optimized version of tcd - inc which makes use of equational constraints , as explained in section  [ sec : equation ] . with the implementation tcd - eqs ,",
    "every input polynomial set is regarded as a set of equations ( equating each input polynomial to zero ) .",
    "as we can see in table  [ table : cd ] , the incremental algorithm presented in this paper is much more efficient than the original recursive algorithm .",
    "the timings of tcd - eqs show that the optimizations presented in section  [ sec : equation ] for making use of equational constraints are very effective .    in table",
    "[ table : cad ] , we report on timings for computing cad with three different computer algebra packages : qepcad , the cylindricaldecomposition command of mathematica and the algorithm presented in section  [ sec : incremental ] . each system is a set of polynomials .",
    "two categories of experimentation are conducted .",
    "the first category is concerned with the timings for computing a full cad of a set of polynomials . for mathematica",
    ", we can not find any options of cylindricaldecomposition for computing a full cad of a set of polynomials .",
    "therefore for this category , only the timings of qepcad and tcad are reported .",
    "the second category is concerned with the timings for computing a cad of a variety . for this category ,",
    "the timings for qepcad , mathematica and tcad are all reported .",
    "the notation qepcad denotes computations that qepcad performs by ( 1 ) treating each input system as a set of non - strict inequalities and , ( 2 ) treating all variables as free variables and , ( 3 ) executing with the `` full - cad '' option .",
    "the notation tcad corresponds to computations that tcad performs by ( 1 ) treating each input system as a set of non - strict inequalities and , ( 2 ) computing a sign invariant full cad of polynomials in the input system and , ( 3 ) selecting the cells which satisfy those non - strict inequalities . in this way ,",
    "both qepcad and tcad compute a full cad of a set of polynomials .",
    "the notation qepcad - eqs denotes the computations that qepcad performs by ( 1 ) treating each input system as a set of equations and , ( 2 ) treating all variables as free variables and , ( 3 ) executing with the default option .",
    "the notation mathematica - eqs represents computations where the cylindricaldecomposition command of mathematica treats each input system as a set of equations .",
    "the notation tcad - eqs corresponds to computations where tcad treats each input system as a set of equations .    from table  [",
    "table : cad ] , we make the following observations . when full cads are computed , within one hour time limit , qepcad only succeeds on @xmath249 out of @xmath250 examples while tcad succeeds on @xmath251 out of @xmath250 examples .",
    "when cads of varieties are computed , for all the @xmath252 out of @xmath250 examples that qepcad can solve within one hour time limit , both mathematica and tcad succeed with usually less time . for the rest @xmath251 examples , tcad solves all of them while mathematica only succeeds on @xmath253 of them .",
    "in this paper , we present an incremental algorithm for computing cads .",
    "a key part of the algorithm is an intersect operation for refining a given complex cylindrical tree .",
    "if this operation is supplied with an equational constraint , it only computes a partial cylindrical tree , which provides an automatic solution for propagating equational constraints .",
    "we have implemented our algorithm in maple .",
    "the experimentation shows that the new algorithm is much more efficient than our previous recursive algorithm .",
    "we also compared our implementation with the software packages qepcad and mathematica .",
    "for many examples , our implementation outperforms the other two .",
    "this incremental algorithm can support quantifier elimination .",
    "we will present this work in a future paper .",
    "the authors would like to thank the readers who helped improve the earlier versions of this paper .",
    "this research was supported by academic development fund adf - major-27145 of the university of western ontario .",
    "b.  buchberger and h.  hong .",
    "speeding - up quantifier elimination by grbner bases .",
    "technical report 91 - 06 , risc ( research institute for symbolic computation ) , johannes kepler university , linz , austria , february 1991 .",
    "c.  chen , o.  golubitsky , f.  lemaire , m.  moreno maza , and w.  pan .",
    "comprehensive triangular decomposition . in _ proc . of casc07",
    "_ , volume 4770 of _ lecture notes in computer science _ , pages 73101 .",
    "springer verlag , 2007 .",
    "g.  e. collins .",
    "quantifier elimination by cylindrical algebraic decomposition - twenty years of progress . in b.",
    "caviness and j.  johnson , editors , _ quantifier elimination and cylindrical algebraic decomposition _ , pages 823 .",
    "springer , 1998 .",
    "h.  iwane , h.  yanami , h.  anai , and k.  yokoyama .",
    "an effective implementation of a symbolic - numeric cylindrical algebraic decomposition for quantifier elimination . in _ proc . of snc2009",
    "_ , pages 5564 , 2009 .",
    "s.  mccallum .",
    "an improved projection operator for cylindrical algebraic decomposition . in b.",
    "caviness and j.  johnson , editors , _ quantifier elimination and cylindical algebraic decomposition , texts and mongraphs in symbolic computation_. springer , 1998 ."
  ],
  "abstract_text": [
    "<S> in this paper , we propose an incremental algorithm for computing cylindrical algebraic decompositions . </S>",
    "<S> the algorithm consists of two parts : computing a complex cylindrical tree and refining this complex tree into a cylindrical tree in real space . </S>",
    "<S> the incrementality comes from the first part of the algorithm , where a complex cylindrical tree is constructed by refining a previous complex cylindrical tree with a polynomial constraint . </S>",
    "<S> we have implemented our algorithm in maple . </S>",
    "<S> the experimentation shows that the proposed algorithm outperforms existing ones for many examples taken from the literature .    </S>",
    "<S> = 1     * an incremental algorithm for computing cylindrical algebraic decompositions *   +   changbo chen , marc moreno maza   + orcca , university of western ontario ( uwo ) + london , ontario , canada + \\{cchen252,moreno}@csd.uwo.ca + </S>"
  ]
}