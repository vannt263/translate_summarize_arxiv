{
  "article_text": [
    "a binary _ de bruijn sequence _ of order @xmath2 is a binary sequence with period @xmath3 in which each @xmath2-tuple occurs exactly once in one period of the sequence .",
    "there are @xmath4 such sequences  @xcite .",
    "some of the earliest applications of de bruijn sequences are in communication systems .",
    "these sequences are generated in a deterministic way , yet satisfy the randomness criteria in  ( * ? ? ?",
    "* ch .  5 ) and",
    "are balanced , containing the same number of @xmath5s and @xmath6s .",
    "many of the sequences achieve the upper bound on the linear complexity , making them hard to guess . in cryptography",
    ", they have been used as a source of pseudo - random numbers and in key - sequence generators of stream ciphers  ( * ? ? ?",
    "6.3 ) . in computational molecular biology , one of the three assembly paradigms in dna sequencing",
    "is called the de bruijn graph assemblers model  ( * ? ? ?",
    "* box 2 ) .",
    "a work by bruckstein _ et al._@xcite highlighted some important roles that de bruijn sequences play in robust positioning patterns .",
    "such objects have numerous useful applications , _",
    "e.g. _ , in robotics , smart pens , and camera localization .",
    "there has also been an increased interest in deploying de bruijn sequences in various spread spectrum applications @xcite . given comparable parameters ,",
    "the number of de bruijn sequences is much larger than that of the other sequences that had been previously considered .",
    "some of the de bruijn sequences may have just the right cross- and auto - correlation properties to fit perfectly in .    on the construction of binary de bruijn sequences ,",
    "two yardsticks are often used to measure the goodness of a method or algorithm , namely , the number of constructed sequences and the efficiency of the construction in terms of both time and memory requirements . in numerous applications of de bruijn sequences that we are aware of , it is crucial to have a lot of sequences to choose from .",
    "methods to generate all binary de bruijn sequences have been available in the literature ( see , _",
    "e.g. _ , @xcite and @xcite ) .",
    "these methods , however , require a large memory space or long running time or , worse , both .",
    "many consider fredricksen s survey  @xcite a good starting point to recall various properties and construction methods up to the early @xmath7s . a well - known construction approach called the _ cycle joining ( cj ) method",
    "_ begins with a given feedback shift register ( fsr ) and joins all cycles produced by the fsr into a single cycle by identifying the conjugate pairs shared by any pair of cycles .",
    "the cycle structure of a linear fsr ( lfsr ) can be studied using tools from the algebra of polynomial rings .",
    "it is then natural to construct de bruijn sequences by applying the cycle joining method to lfsrs .",
    "some lfsrs with simple cycle structure , such as the maximal length lfsrs , pure cycling registers , and pure summing registers , have been used to generate de bruijn sequences using the said method in  @xcite .",
    "hauge and helleseth established a connection between the cycles generated by lfsrs and irreducible cyclic codes in  @xcite .",
    "the number of de bruijn sequences obtained from these lfsrs is related to cyclotomic numbers , which in general are hard to determine precisely .",
    "recently , some classes of de bruijn sequences are studied by c.  li _ et al._. in  @xcite and  @xcite respectively the sequences are derived from lfsrs with characteristic polynomials @xmath8 and @xmath9 , where @xmath10 is a primitive polynomial of degree @xmath11 .",
    "further generalized results are given in  @xcite to include products of primitive polynomials whose degrees are pairwise coprime , leading to coprime periods of the sequences that form the cycle structure .",
    "this generalization yields a relatively small number of de bruijn sequences when compared to the one we are proposing .    in a recent work  @xcite we proposed an efficient construction from lfsrs whose characteristic polynomials are products of two distinct irreducible polynomials and showed that the construction generates a large number of de bruijn sequences . in a paper @xcite presented at seta 2016 , we discussed in detail how to determine the cycle structure and find a state for each cycle for an arbitrary polynomial @xmath12 $ ] .",
    "drawing insights from them , this present work generalizes the construction to de bruijn sequences from lfsrs with arbitrary polynomials as their characteristic polynomials .",
    "the main contributions are as follows .    1 .",
    "we propose a construction of de bruijn sequences by the cycle joining method from lfsrs with an arbitrary characteristic polynomial @xmath13 $ ] .",
    "the cycle structure and adjacency graph are studied in sufficient details .",
    "this allows us to propose a fast method to find a state belonging to a particular cycle and to design practical algorithms to find all conjugate pairs shared by any two cycles .",
    "our construction covers all previously - studied constructions of de bruijn sequences by the said method as special cases .",
    "2 .   we exhibit how our method can be implemented to build a practical de bruijn sequence generator , which is a first to the best of our knowledge .",
    "worked - out examples highlight the crucial steps .",
    "3 .   we support our theoretical results with actual implementation , confirming the practicality of our method for reasonable values of @xmath2 , even without several possible optimization tricks .    after this introduction",
    "come preliminary notions and known results in section [ sec : prelims ] .",
    "section [ sec : cycle ] presents the cycle structure . a method to find a state belonging to a given cycle follows in section [ sec : state ] .",
    "section [ sec : graph ] determines the adjacency graph and is divided into two main parts .",
    "subsection [ subsec : pro - cp ] establishes important properties of the conjugate pairs .",
    "these are then used to design an efficient algorithm to find all conjugate pairs between any pair of cycles in subsection [ subsec : cp ] .",
    "section [ sec : reproots ] discusses the complexity that arises from using a polynomial with repeated roots as a characteristic polynomial and highlights some parts of our method that can still be useful to analyze the situation . combining the algorithms , section [ sec : generate ] shows how the tools fit together nicely .",
    "it uses the examples presented in the preceding sections to derive a large number of de bruijn sequences of order @xmath14 .",
    "we implemented the algorithms and present a summary of our implementation in section [ sec : implem ] .",
    "the last section contains a brief conclusion and some possible future directions .",
    "for convenience , we recall needed definitions and results , mostly from  ( * ? ? ?",
    "* ch .  4 ) .",
    "an _ @xmath2-stage shift register _ is a circuit consisting of @xmath2 consecutive storage units , each containing a bit , regulated by a clock . when it pulses , the bit in each storage unit is shifted to the next stage in line .",
    "a shift register turns into a binary code generator when one adds a feedback loop which outputs a new bit @xmath15 based on the @xmath2 bits @xmath16 called an _ initial state _ of the register . the corresponding _ feedback function _",
    "@xmath17 is the boolean function that outputs @xmath15 on input @xmath18 .",
    "a feedback shift register ( fsr ) outputs a binary sequence @xmath19 satisfying the recursive relation @xmath20 for @xmath21 , if @xmath22 for all @xmath23 , then @xmath24 is _ @xmath25-periodic _ or _ with period @xmath25 _ and one writes @xmath26 .",
    "the period of the all zero sequence @xmath27 is @xmath5 . when the context is clear",
    ", @xmath27 also denotes a string of zeroes or a zero vector .",
    "we call @xmath28 _ the @xmath29-th state _ of @xmath24 and states @xmath30 and @xmath31 the _ predecessor _ and _ successor _ of @xmath32 respectively .",
    "let @xmath33 and @xmath34 denote the logical and and or respectively .",
    "given a constant @xmath35 and binary sequences ( or vectors ) @xmath36 and @xmath37 , let @xmath38    in an fsr , distinct initial states generate distinct sequences , forming the set @xmath39 of cardinality @xmath40 .",
    "all sequences in @xmath39 are periodic if and only if the feedback function @xmath41 is _ nonsingular _ , _",
    "i.e. _ , @xmath41 can be written as @xmath42 , where @xmath43 is some boolean function with domain @xmath44  @xcite . in this paper , the feedback functions are all nonsingular .",
    "an fsr is called _ linear _ or an lfsr if its feedback function is linear , and _ nonlinear _ or an nlfsr otherwise .",
    "the _ characteristic polynomial _ of an @xmath2-stage lfsr with feedback function @xmath45 is the polynomial @xmath46 $ ] .",
    "a sequence @xmath24 may have many characteristic polynomials .",
    "we call the characteristic polynomial with the lowest degree the _ minimal polynomial _ of @xmath24 .",
    "it represents the lfsr of shortest length that generates @xmath24 .",
    "given an lfsr with characteristic polynomial @xmath0 , the set @xmath39 is also denoted by @xmath1 .",
    "for a sequence @xmath24 , the _",
    "( left ) shift operator _",
    "@xmath47 is given by @xmath48 with the convention that @xmath49 .",
    "the set @xmath50:=\\{\\s , l\\s , l^2\\s,\\ldots , l^{n-1}\\s \\}\\ ] ] is a _",
    "shift equivalent class _ or a _ cycle _ in @xmath39 .",
    "the set of sequences in @xmath39 can be partitioned into cycles .",
    "if @xmath39 consists of exactly @xmath51 cycles @xmath52,[\\s_2],\\ldots , [ \\s_r]$ ] for some @xmath53 , then the _ cycle structure _ of @xmath39 is @xmath54 \\cup [ \\s_2 ] \\cup \\ldots \\cup [ \\s_r].\\ ] ]    a _ conjugate pair _ consists of a state @xmath55 and its _ conjugate _ @xmath56 .",
    "cycles @xmath57 and @xmath58 are _ adjacent _ if they are disjoint and there exists @xmath59 in @xmath57 whose conjugate @xmath60 is in @xmath58 .",
    "adjacent cycles @xmath57 and @xmath58 with the same feedback function @xmath61 can be joined into a single cycle by interchanging the successors of @xmath59 and @xmath60 .",
    "the feedback function of the resulting cycle is @xmath62    the feedback functions of the new de bruijn sequences are completely determined once the corresponding conjugate pairs are found .",
    "it is therefore crucial to find all pairs and to place them in the adjacency graph .",
    "@xcite[def : adjgraph ] for an fsr with feedback function @xmath41 , its _ adjacency graph _",
    "@xmath63 is an undirected multigraph whose vertices correspond to the cycles in @xmath39 .",
    "there exists an edge between two vertices if and only if they are adjacent . a conjugate pair labels",
    "every edge .",
    "the number of edges between any pair of cycles is the number of conjugate pairs that they share .    by definition",
    ", @xmath63 contains no loops .",
    "there is a one - to - one correspondence between the spanning trees of the adjacency graph @xmath63 and the de bruijn sequences constructed by the cycle joining method .",
    "the details can be found in  @xcite and  @xcite .",
    "the following result , a variant of the best ( de * b*ruijn , * e*hrenfest , * s*mith , and * t*utte ) theorem adapted from  ( * ? ? ?",
    "7 ) , provides the counting formula .",
    "( best)[best ] let @xmath63 be the adjacency graph of an fsr with vertex set @xmath64 .",
    "let @xmath65 be the @xmath66 matrix derived from @xmath63 in which @xmath67 is the number of edges incident to vertex @xmath68 and @xmath69 is the negative of the number of edges between vertices @xmath68 and @xmath70 for @xmath71 .",
    "then the number of the spanning trees of @xmath63 is the cofactor of any entry of @xmath72 .",
    "the _ cofactor _ of entry @xmath69 in @xmath72 is @xmath73 times the determinant of the matrix obtained by deleting the @xmath29-th row and @xmath74-th column of @xmath72 .",
    "an important tool we will need later is the generalized chinese remainder theorem ( crt ) .",
    "( generalized crt )  ( * ? ? ?",
    "2.4.2)[crt ] + let @xmath75 . given integers @xmath76 and positive integers @xmath77 ,",
    "there exists @xmath78 such that @xmath79 if and only if for arbitrary distinct integers @xmath80 , we have @xmath81 .    if @xmath82 is a solution of this system of congruences , then @xmath83 is also a solution if and only if @xmath84 .",
    "let @xmath85 be a set of @xmath86 pairwise distinct irreducible polynomials over @xmath87 and @xmath88 . from hereon ,",
    "let @xmath90 $ ] be an irreducible polynomial of degree @xmath2 with a root @xmath91 .",
    "then there exists a primitive element @xmath92 such that @xmath93 for some @xmath94 and @xmath95 is the order of @xmath96 .    using the _ zech logarithmic representation _ ( see .",
    "_ e.g. _ , @xcite ) , write @xmath97 where @xmath98 is the zech logarithm relative to @xmath99 .",
    "it induces a permutation on @xmath100 .",
    "note that @xmath101 for @xmath102 and @xmath103 .",
    "the _ cyclotomic classes _",
    "@xmath104 , for @xmath105 , are @xmath106 the _ cyclotomic numbers _",
    "@xmath107 , for @xmath108 , are @xmath109 requiring @xmath110 and @xmath111 is equivalent to requiring that there exist @xmath86 and @xmath112 , with @xmath113 , such that @xmath114 thus , an equivalent expression to  ( [ eq : cycnum ] ) is @xmath115 notice , in particular , that @xmath116 .    using @xmath117 as a basis for @xmath118 as an @xmath87-vector space , for @xmath119 , one can uniquely express @xmath120 as @xmath121 or , in vector form , @xmath122 since @xmath123 , @xmath124    define the mapping @xmath125 by @xmath126 where the subscripts are reduced modulo @xmath127 . by the recursive relation determined by ( [ eq : vecform ] ) ,",
    "@xmath128 is a one - to - one mapping .",
    "let @xmath129 note that @xmath128 induces a correspondence between the class @xmath130 and the cycle @xmath131 $ ] ( see  ( * ? ? ?",
    "3 ) ) . in other words , @xmath132 and the sequence of states of @xmath132 , namely @xmath133 , where , for @xmath134 , @xmath135 are equivalent , and the state @xmath136 corresponds to the element @xmath137 in the cyclotomic class @xmath130 . hence , @xmath138 and we take @xmath139 as the initial state of @xmath132 for @xmath140 .",
    "the theory of lfsrs in  ( * ? ? ? * ch .",
    "4 ) tells us that @xmath141\\cup[\\u_0]\\cup[\\u_1]\\cup\\ldots\\cup[\\u_{t-1}].\\ ] ]    if @xmath142 is primitive , then @xmath143 , @xmath144 , and there exists only one cyclotomic class .",
    "hence , @xmath145\\cup[\\u]$ ] , where @xmath146 is the @xmath147-sequence ( also known as _ maximal length sequence _ ) with period @xmath127 having the following _ shift - and - add property_.    ( * ? ? ?",
    "5.3)[lem : saa ] let @xmath146 be an @xmath147-sequence with period @xmath127 .",
    "then , for @xmath148 , there exists @xmath149 such that @xmath150 with @xmath151 .",
    "the preceding discussion shows that when @xmath142 is irreducible but not primitive , the situation is more involved .",
    "[ lem : irr - saa ] let @xmath152 $ ] be an irreducible polynomial of degree @xmath2 and order @xmath153 ( making @xmath154 ) with @xmath155 as presented in ( [ equ : g ] ) . then , for each triple @xmath156 with @xmath157 , we have @xmath158    it is clear from the correspondence @xmath159 that @xmath160 corresponds to @xmath161 . as @xmath162 runs through @xmath163 , there are @xmath164 of them , each satisfying @xmath165 for some @xmath166 . on each occasion , @xmath167 .",
    "the corresponding sequences are shifts of @xmath168 .",
    "4.2)[lemma1 ] let @xmath169 $ ] be two nonzero polynomials .",
    "denote by @xmath170 the set of sequences @xmath171 .    1 .",
    "@xmath172 if and only if @xmath173 .",
    "2 .   @xmath174 .",
    "3 .   @xmath175 .",
    "since @xmath176 is irreducible of degree @xmath177 and order @xmath178 , we have @xmath179 and write @xmath180 \\cup \\left[\\s^i_0\\right ] \\cup \\left[\\s^i_1\\right ] \\cup \\ldots \\cup \\left[\\s^i_{t_i-1}\\right].\\ ] ]    [ thm : cycle - f ] the cycle structure of @xmath1 is given by ( [ eq : longf ] ) with @xmath181 .",
    "letting @xmath182 @xmath1 is more succinctly expressed in ( [ eq : shortf ] ) .",
    "@xmath183~\\cup~\\left(\\bigcup_{i=1}^s~\\bigcup_{j=0}^{t_i-1 } \\left[\\s^i_j\\right]\\right)~\\cup ~\\left(\\bigcup_{1 \\leq i_1 < i_2 \\leq s}~\\left(\\bigcup_{j_1=0}^{t_{i_1}-1 } ~\\bigcup_{j_2=0}^{t_{i_2}-1 } ~\\bigcup_{\\ell_2=0}^{\\gcd(e_{i_2},e_{i_1})-1 } \\left[\\s^{i_1}_{j_1}+l^{\\ell_2}\\s^{i_2}_{j_2}\\right ] \\right ) \\right ) ~\\cup~\\cdots \\\\ \\cup~\\left(\\bigcup_{j_1=0}^{t_1 - 1 } \\cdots \\bigcup_{j_s=0}^{t_s-1 } ~\\bigcup_{\\ell_2=0}^{\\gcd(e_2,e_1)-1 } \\cdots \\bigcup_{\\ell_{s}=0}^{\\gamma-1 } \\left[\\s_{j_1}^{1}+l^{\\ell_2}\\s_{j_2}^{2}+ \\cdots + l^{\\ell_{s}}\\s_{j_s}^{s}\\right]\\right).\\end{gathered}\\ ] ] @xmath184.\\ ] ]    there are some noticeable facts regarding the representation of the cycles .    1 .",
    "lemma  [ lemma1 ] and equation ( [ eq : longf ] ) highlight the _ types _ of nonzero cycles in @xmath1 .",
    "cycles @xmath185 $ ] are in @xmath186 . for @xmath187 with @xmath188 for @xmath189 , cycles @xmath190 $ ] are in @xmath191 .",
    "2 .   expressing the cycles as specified by equation ( [ eq : shortf ] ) allows us to write distinct cycles more uniformly .",
    "we prove equation ( [ eq : shortf ] ) by induction .",
    "the statement clearly holds when @xmath192 .",
    "suppose that it holds for @xmath193 .",
    "hence , letting @xmath194 , we have @xmath195.\\end{gathered}\\ ] ] since @xmath196 , sequences in @xmath1 are sums of the shifts of sequences @xmath197 and the shifts of sequences @xmath198 with @xmath199 and @xmath200 .",
    "it suffices to consider the case when @xmath201 for @xmath202 .",
    "let @xmath203 .",
    "the period of @xmath24 is @xmath204 . for @xmath205 and @xmath206 ,",
    "the period of @xmath207 is @xmath208 .",
    "such sequences can be divided into @xmath209 distinct cycles .",
    "next , we show that @xmath210 and @xmath211 are shift equivalent for @xmath212 and @xmath213 .",
    "since @xmath214 and @xmath215 are coprime , there exist @xmath216 such that @xmath217 or equivalently , @xmath218 .",
    "since the periods of @xmath24 and @xmath219 are respectively @xmath220 and @xmath221 , @xmath222 hence , sequences of the form ( [ eq : sumts ] ) can be partitioned into at most @xmath223 cycles .",
    "thus , for given @xmath24 and @xmath224 , they can be partitioned into exactly @xmath223 cycles , each written as @xmath225\\ ] ] where @xmath226 .",
    "equation ( [ eq : longf ] ) follows directly from equation ( [ eq : shortf ] ) by the fact that if @xmath227 , then @xmath228 , which can be safely ignored in the representation of the cycles .",
    "consider the number of cycles in @xmath1 that contain sequences with a given period .",
    "the @xmath229 possible periods can be expressed as @xmath230 .    1 .",
    "there exists one all - zero cycle @xmath231 $ ] .",
    "there are @xmath232 cycles containing sequences with period @xmath233 for @xmath234 .",
    "this generalizes  ( * ? ? ?",
    "* proof of lem . 4 where @xmath235 ) .",
    "3 .   let @xmath236 .",
    "sequences with period @xmath237 are partitioned into @xmath238 cycles .",
    "sequences with period @xmath239 , in particular , are partitioned into @xmath240 cycles .",
    "once the number of cycles in @xmath1 is determined , we want to efficiently store them .",
    "since the periods of some of the cycles can be fairly large , one should avoid taking the naive approach of storing the whole cycle .",
    "in fact , if the feedback function is known , it suffices to store only one state belonging to each cycle .",
    "this section provides a method to determine a state of every cycle in @xmath1 and proposes a new state representation .",
    "recall the state @xmath32 and its successor @xmath31 of an @xmath2-stage fsr sequence @xmath24 with feedback function @xmath17 from section [ sec : prelims ] . a _ state operator _",
    "@xmath241 turns @xmath32 into @xmath31 with @xmath242 .",
    "the subscript @xmath2 of @xmath243 indicates that @xmath32 is an @xmath2-stage state and is often omitted when no confusion arises .",
    "if @xmath244 $ ] and @xmath153 is the period of @xmath24 , then the @xmath153 distinct states of @xmath245 $ ] are @xmath246 it suffices to identify just one state in a given cycle since applying @xmath247 a suitable number of times generates all @xmath153 distinct states . to reduce clutters",
    ", we use @xmath247 to denote the state operator for distinct cycles with distinct stages .",
    "let @xmath152 $ ] be an irreducible polynomial of degree @xmath2 and order @xmath153 .",
    "hence , @xmath248 and @xmath155 is as given in ( [ equ : g ] ) .",
    "exhaustive search is obviously an option to find one of the @xmath153 distinct states belonging to each cycle @xmath131 \\in \\omega(g(x))$ ] .",
    "we provide a much better method here .",
    "recall the @xmath99-basis and the @xmath96-basis for @xmath118 as an @xmath87-vector space from section  [ sec : cycle ] .",
    "there is an @xmath249 invertible matrix @xmath250 such that @xmath251 .",
    "one can build @xmath250 from the minimal polynomial of @xmath99 and the fact that @xmath93 .",
    "conversely , using the @xmath96-basis , the representation of @xmath252 for @xmath253 can be easily derived by using @xmath254 .    for @xmath255 ,",
    "using the representation of @xmath252 in the @xmath96-basis and by ( [ eq : alphatobeta ] ) , we derive the initial state @xmath256 of sequence @xmath132 .",
    "algorithm  [ algo : state ] details the procedure to find a state for each nonzero cycle in @xmath155 .    an irreducible polynomial @xmath152 $ ] .",
    "a state @xmath257 of each nonzero cycle @xmath258 \\in \\omega(g(x))$ ] .",
    "@xmath259 root of @xmath142 ; @xmath260 order of @xmath142 ; @xmath261 .",
    "@xmath262 and break . @xmath263 primitive polynomial with root @xmath99 satisfying @xmath93.[primpoly ] write @xmath264 in the @xmath99-basis .",
    "compute the matrices @xmath250 and @xmath254 . determine the @xmath96-basis vector representation of @xmath120",
    "( see  ( [ eq : vecform ] ) ) .",
    "@xmath265 .    [ cols=\"^,^,^,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     a software implementing algorithms  [ algo : state ] to [ algo : sptree ] and the cycle joining routine was written in ` python ` version 2.7 .",
    "the platform was a laptop with ubuntu 16.04 lts operating system powered by an intel hasswell processor i5 - 4300u cpu 1.90ghz .",
    "we used only one core and capped the available memory to 3 gb .",
    "table  [ table : implem ] presents some of the implementation results based on four basic scenarios .    1 .",
    "users want to determine the number @xmath266 of distinct cycles in @xmath1 , the adjacency graph @xmath63 and its corresponding matrix @xmath72 , the number @xmath267 of de bruijn sequences that can be generated , and the number @xmath268 of all spanning trees in @xmath269 .",
    "we implemented algorithms  [ algo : state ] to  [ algo : all ] , derived @xmath269 from @xmath63 , and applied the best theorem to produce the desired results .",
    "the running time was @xmath270 .",
    "2 .   users need to build a library of de bruijn sequences of order @xmath2 .",
    "our implementation covered the whole process .",
    "once a tree in @xmath269 had been identified , the corresponding set of tree(s ) in @xmath63 was generated .",
    "for each of these trees , we applied the cycle joining method to generate all de bruijn sequences in this class . the running time to generate and write @xmath271 de bruijn sequences to a file was @xmath272 with @xmath273 as the initial state in the cycle joining process .",
    "users require a number of randomly generated de bruijn sequences . to generate a de bruijn sequence",
    ", we chose a random tree @xmath274 before choosing one among the corresponding trees in @xmath63 randomly , say @xmath275 .",
    "we then used an arbitrary @xmath276 as the initial state in the cycle joining routine . to generate and write @xmath277 sequences to a file from the inputted @xmath0 took @xmath278 .",
    "4 .   users require only one de bruijn sequence chosen uniformly at random from among all of the constructible de bruijn sequences .",
    "after the adjacency graph @xmath63 has been determined , we applied broder s elegant algorithm  ( * ? ? ? * alg .",
    "generate ) on @xmath63 ( not on @xmath269 ) to get a uniformly random tree @xmath275 .",
    "note that the algorithm s expected running time per generated tree is @xmath279 for most graphs .",
    "the worst case value is @xmath280 .",
    "we chose an arbitrary initial state @xmath59 from @xmath281 and performed the cycle joining routine with @xmath282 and @xmath59 as ingredients .",
    "once @xmath63 had been determined , the rest of the process was very fast .",
    "entry 3 is our example while entry 6 is an example in  @xcite . often , using only one non - primitive irreducible polynomial as @xmath0 ,",
    "especially the one with the lowest possible order @xmath153 for a given @xmath2 , is sufficient to generate a comparatively large number of sequences as shown , _",
    "e.g. _ , in entries 16 and 18 .",
    "in this work , we put forward a method to generate a large class of binary de bruijn sequences from lfsrs with an arbitrary characteristic polynomial .",
    "we pay special attention to the case where @xmath0 is the product of @xmath86 pairwise distinct irreducible polynomials .",
    "the related structures are studied in details .",
    "our approach covers all previously proposed constructions utilizing the cycle joining method as special cases .",
    "we build a practical de bruijn sequence generator based on our method and back our claims with solid implementation results .",
    "our basic implementation scenarios can be extended to cover more application - dependent purposes .",
    "several open problems remain . determining the exact structure of lfsrs whose characteristic polynomials have repeated roots is a worthy challenge . deriving a reasonably tight lower bound on the number of de bruijn sequences that can be constructed",
    "also merits a closer look .",
    "two important generalization projects naturally emerge .",
    "one is to consider an arbitrary characteristic polynomial in the ring @xmath283 $ ] .",
    "the other is to use the cycle joining method to generate de bruijn sequences from nfsrs .",
    "adamas aqsa fahreza wrote the ` python ` code that we implemented .              a.  m. bruckstein , t.  etzion , r.  giryes , n.  gordon , r.  j. holt , and d.  shuldiner , `` simple and robust binary self - location patterns , '' _ ieee trans .",
    "inform . theory _",
    "58 , no .  7 , pp . 48844889 , jul 2012 .                c.  li , x.  zeng , t.  helleseth , c.  li , and l.  hu , `` the properties of a class of linear fsrs and their applications to the construction of nonlinear fsrs , '' _ ieee trans .",
    "inform . theory _",
    "60 , no .  5 , pp .",
    "30523061 , may 2014 .      c.  li , x.  zeng , c.  li , t.  helleseth , and m.  li , `` construction of de bruijn sequences from lfsrs with reducible characteristic polynomials , '' _ ieee trans .",
    "inform . theory _",
    "62 , no .  1 ,",
    "610624 , jan 2016 .              c.  ding , d.  pei , and a.  salomaa , _",
    "chinese remainder theorem : applications in computing , coding , cryptography_.1em plus 0.5em minus 0.4em river edge , nj , usa : world scientific publishing co. , inc .",
    ", 1996 .",
    "f.  hemmati , d.  l. schilling , and g.  eichmann , `` adjacencies between the cycles of a shift register with characteristic polynomial @xmath284 , '' _ ieee trans .",
    "_ , vol .",
    "33 , no .  7 , pp . 675677 , jul .",
    "m.  li , y.  jiang , and d.  lin , `` the adjacency graphs of some feedback shift registers , '' _ designs , codes and cryptography _ , pp . 119 , 2016 .",
    "[ online ] .",
    "available : http://dx.doi.org/10.1007/s10623-016-0187-6"
  ],
  "abstract_text": [
    "<S> we propose a construction of de bruijn sequences by the cycle joining method from linear feedback shift registers ( lfsrs ) with arbitrary characteristic polynomial @xmath0 . </S>",
    "<S> we study in detail the cycle structure of the set @xmath1 that contains all sequences produced by a specific lfsr on distinct inputs and provide an efficient way to find a state of each cycle . our structural results lead to an efficient algorithm to find all conjugate pairs between any two cycles , yielding the adjacency graph . </S>",
    "<S> the approach provides a practical method to generate a large class of de bruijn sequences . </S>",
    "<S> many recently - proposed constructions of de bruijn sequences are shown to be special cases of our construction .    binary periodic sequence , lfsr , de bruijn sequence , cycle structure , adjacency graph , cyclotomic number . </S>"
  ]
}