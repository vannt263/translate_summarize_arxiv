{
  "article_text": [
    "in  @xcite , j.w . cannon proved certain geometrical properties of the cayley graph of cocompact discrete hyperbolic groups .",
    "two years later , in 1986 , w. thurston noticed that some of these properties could be reformulated in terms of finite state automata (; this abbreviation will be used for both the singular and plural ) .",
    "in particular , the goedesic paths in the cayley graph that start at the origin form a regular set or , equivalently , they form the language of an . furthermore ,",
    "any pair of such geodesic paths that end at the same or neighbouring vertices lie within a bounded distance of each other .",
    "it can be deduced that such geodesic pairs also form the language of an .",
    "this led thurston to formulate the following general definition .",
    "[ aut ] let @xmath0 be a group with finite generating set @xmath1 , let @xmath2 , and let @xmath3 , where @xmath4 .",
    "then @xmath0 is said to be _ automatic _ ( with respect to @xmath1 ) , if there exist fsa @xmath5 and @xmath6 for each @xmath7 , such that + ( i)@xmath5 has input alphabet @xmath8 , and accepts at least one word in @xmath9 mapping onto each element of @xmath0 .",
    "+ ( ii)each @xmath6 has input alphabet @xmath10 , it accepts only padded pairs , and it accepts the padded pair @xmath11 for @xmath12 if and only if @xmath13 and @xmath14 .    here @xmath9 as usual denotes the set of words in @xmath8 . for @xmath15",
    ", @xmath16 denotes the element of @xmath0 onto which @xmath17 maps ; for @xmath18 , we also use @xmath19 to mean that @xmath20 map onto the same element of @xmath0 .",
    "the extra symbol @xmath21 maps onto the identity element of @xmath0 . for @xmath12 , the associated _ padded pair _",
    "@xmath22 is obtained by adjoining symbols @xmath21 to the end of the shorter of @xmath17 and @xmath23 to make them have equal length . the language of the  @xmath5 is denoted by @xmath24 . for general properties of finite state automata , the user is referred to any textbook on automata or formal language theory , such as  @xcite .    in the definition",
    ", @xmath5 is called the _ word - acceptor _ and the @xmath6 the _ multiplier _ automata . the complete collection @xmath25 is known as an _",
    "automatic structure _ for @xmath0 .",
    "note that the multiplier @xmath26 recognises equality in @xmath0 between words in @xmath24 . from a given automatic structure ,",
    "we can always use @xmath26 to construct another one such that @xmath5 accepts a unique word mapping onto each element of @xmath0 ; we simply choose the lexicographically least amongst the shortest words that map onto each element as the ` normal form ' representative of that element .",
    "we shall call such a @xmath5 a word - acceptor with uniqueness .",
    "the best general reference for the theory of automatic groups is the multi - author book  @xcite . in particular , it turns out that the automaticity of @xmath0 is independent of the choice of generating set @xmath1 .",
    "this immediately suggests that the definition is a sensible one , because it means that automaticity is an algebraic property of the group , rather than just a geometrical property of its cayley graph .",
    "all finite groups are easily seen to be automatic ; in fact the class of automatic groups is invariant under finite variations , such as sub- and super - groups of finite index .",
    "it is also closed under direct and free products , and includes , for example , all word - hyperbolic groups , braid groups , coxeter groups and artin groups of finite and of ` large ' type .",
    "all automatic groups have finite presentations .",
    "some of the most important and useful applications of this theory only involve an explicit knowledge of a word acceptor with uniqueness , particularly in the frequently occurring case when the accepted words are all geodesics in the cayley graph .",
    "from such a word - acceptor , one can quickly enumerate unique representatives of all words up to a given length .",
    "this can serve as an invaluable time - saving device in certain computer graphics applications , such as drawing tessellations of hyperbolic space on which these groups act freely .",
    "one can also use @xmath5 to compute the growth function for the group ( see  @xcite ) .",
    "another important application of automatic structures for groups @xmath0 is their use for the efficient ( quadratic time ) solution of the word problem in @xmath0 .",
    "more precisely , the multiplier automata can be used to reduce an arbitrary word in @xmath9 in quadratic time to the @xmath0equivalent word in @xmath24 .    with these applications in mind ,",
    "a collection of programs was written at warwick in the late 1980 s for computing automatic structures .",
    "these programs take a finite presentation of the group @xmath0 as input .",
    "currently , they only work for so - called _ shortlex _ structures , which are those in which @xmath24 consists of the lexicographically least amongst the shortest words that map onto each group element .",
    "( so @xmath5 depends upon the order of @xmath8 as well as on @xmath8 itself . )",
    "many , but not all , of the known classes of automatic groups are known to possess shortlex structures .",
    "the programs are described in some detail in  @xcite and  @xcite , and in a much more general setting in  @xcite .",
    "the latest version is part of a package called  and is available by anonymous ` ftp ` from ` ftp.maths.warwick.ac.uk ` in the directory ` people / dfh / kbmag2 ` .    from an algorithmic point of view , there is a close connection between automatic groups and rewriting systems for groups , and the programs used make use of the knuth  bendix completion process in groups .",
    "however , typically , this process alone would not terminate and in fact automatic groups normally have infinite regular rather than finite complete rewriting systems . when the automatic structure is successfully computed it is , in some sense , enabling this infinite regular system to be used to solve the word problem in a manner that is typically at least as efficient as could be done with a finite rewriting system .",
    "the idea of trying to use infinite regular rewriting systems for this purpose was first proposed by gilman in  @xcite .    given a word - acceptor automaton for a group , it turns out that the existence and properties of the multiplier automata are equivalent to the so - called ( synchronous ) fellow - traveller property , which was one of the geometrical properties of hyperbolic groups observed originally by j. w. cannon , and is defined as follows .    for a word @xmath15",
    "we denote the length of @xmath17 by @xmath27 and , for @xmath28 , @xmath29 ( or more precisely @xmath30 ) denotes the length of the shortest word @xmath15 with @xmath31 . for @xmath32",
    ", @xmath33 denotes the prefix of @xmath17 of length @xmath34 when @xmath35 , and @xmath36 for @xmath37 .",
    "the fellow - traveller property asserts that there exists a constant @xmath38 such that , for all @xmath39 and @xmath40 such that @xmath14 , and all @xmath32 , we have @xmath41 . in other words ,",
    "two travellers proceeding at the same speed along the words @xmath17 and @xmath23 from the base point in the cayley graph of @xmath0 would always remain a bounded distance away from each other .",
    "the fellow - traveller property enables the multiplier automata @xmath6 to be defined in a uniform manner ( see definition 2.3.3 of  @xcite ) .",
    "their state set is the set of triples @xmath42 , where @xmath43 are states of @xmath5 , and @xmath28 with @xmath44 .",
    "the start state is @xmath45 , where @xmath46 is the start state of @xmath5 . for @xmath47 ,",
    "there is a transition from @xmath42 to @xmath48 with label @xmath49 if and only if there are transitions @xmath50 and @xmath51 in @xmath5 with labels @xmath52 and @xmath53 , respectively , and if @xmath54 . the state @xmath42 is a success state of @xmath6 if and only if @xmath55 and @xmath56 are success states of @xmath5 , and @xmath57 .",
    "thus the @xmath6 differ only in their accept states .",
    "( we have omitted a technicality from this definition . to deal with the padding symbol , we have to add an extra state to @xmath5 which is reached when @xmath5 is in an accept state and the padding symbol is read . )",
    "it is clear that the @xmath6 behave precisely according to condition ( ii ) of definition  [ aut ] .",
    "this method is used to construct the @xmath6 in the programs mentioned above .",
    "note also that it follows from the fellow - traveller property that if @xmath58 is any fixed element of @xmath0 and @xmath13 with @xmath59 , then @xmath17 and @xmath23 fellow - travel with constant at most @xmath60 .",
    "finally , we must mention the weaker concept of an asynchronously automatic group , because it will arise in the next section .",
    "the definition is the same as before , except that the multiplier automata are allowed to read their two input strings at different rates .",
    "more precisely , rather than reading one symbol from each of the two input words at each transition , they read a symbol from one of the two words only , where the choice of which word to read is a function of the state of @xmath6 .",
    "of course , when the end of one of the words is reached , the other word must be selected .",
    "see chapter  7 of  @xcite for the formal definition .",
    "again there is a corresponding fellow - traveller property , in which the imaginary travellers are allowed to move at different speeds .",
    "see  @xcite or section 7 , part ii of  @xcite for details .",
    "the word problem is still solvable for asynchronously automatic groups , but it is unknown whether this can be done in polynomial time .",
    "there are examples known , such as the baumslag  solitar groups @xmath61 with @xmath62 , which are asynchronously automatic but not automatic .",
    "there is a more detailed treatment , with references to the literature , of the synchronous and asynchronous fellow - traveller properties in groups in the article  @xcite in these proceedings .",
    "let @xmath63 be the language of the word - acceptor in an automatic structure of a group @xmath0 .",
    "a subgroup @xmath64 of @xmath0 is called @xmath65rational if @xmath66 is a regular language ( ie the language of an ) .",
    "such subgroups were studied in  @xcite , where it is proved that @xmath65rational is equivalent to @xmath65quasiconvex .",
    "this means that any prefix of a word in @xmath66 lies within a bounded distance of @xmath64 in the cayley graph of @xmath0 .",
    "such subgroups are always finitely generated .",
    "an algorithm for constructing an  @xmath67 with language @xmath66 , which takes as input an automatic structure for @xmath0 and a set of generators for an @xmath65rational subgroup @xmath64 of @xmath0 , is described in  @xcite .",
    "a practical and efficient version is described in  @xcite , and an implementation is available in .    the  @xmath67 can be used together with the automatic structure to determine whether a given word in @xmath9 lies in @xmath64 ; that is , to solve the generalised word problem for @xmath64 in @xmath0 .",
    "first use the the multiplier automata to reduce the word to one in @xmath65 , and then use @xmath67 to test whether it lies in @xmath64 . given @xmath67 and @xmath68 for two subgroups @xmath64 and @xmath69 of @xmath0 ,",
    "it is easy to intersect their languages to obtain a  @xmath70 for their intersection , which can then be used to construct a finite generating set for @xmath71 .",
    "it is possible to generalise the concept of an automatic group from a notion about the elements of the group to one about the cosets of a given subgroup @xmath64 of @xmath0 .",
    "this has been carried out by two doctoral students of the author ( see  @xcite and  @xcite ) .",
    "the definition is as follows .",
    "let @xmath0 be a group with finite generating set @xmath1 , let @xmath2 , @xmath3 , and let @xmath64 be a subgroup of @xmath0 .",
    "then @xmath0 is said to be _ coset automatic _ with respect to @xmath64 , if there exist fsa @xmath5 , and @xmath6 for each @xmath7 , such that : + ( i)@xmath5 has input alphabet @xmath8 , and accepts at least one word in each right coset of @xmath64 in @xmath0 ; + ( ii)each @xmath6 has input alphabet @xmath10 , it accepts only padded pairs , and it accepts the padded pair @xmath11 for @xmath12 if and only if @xmath13 and @xmath72 .    here",
    "@xmath5 is called the _ coset word - acceptor _ and the @xmath6 the _ coset multiplier _ automata . the complete collection @xmath25 is known as an _",
    "automatic coset system _ for the pair @xmath73 .",
    "again the existence of such a system turns out to be independent of the generating set @xmath1 of @xmath0 , and we can , if we wish , always find a new system in which @xmath5 accepts a unique word in each right coset .",
    "it is proved in  @xcite that if @xmath65 is the language of the shortlex automatic structure of a word - hyperbolic group @xmath0 ( or even the set of all geodesics in the cayley graph of @xmath0 ) , and if the subgroup @xmath64 is @xmath65quasiconvex , then @xmath0 is coset automatic with respect to @xmath64 . in  @xcite the converse",
    "is proved for word - hyperbolic groups , although we shall see from the example in the next section that the converse does not hold in general .",
    "an interesting application to the drawing of limit sets of kleinian groups is described in  @xcite . as in the graphical applications of ordinary automatic structures , this involves only the use of @xmath5 to enumerate unique shortest words in each coset .",
    "an algorithm for computing automatic coset systems in the shortlex case was first described in  @xcite , and was implemented by him as a standalone program .",
    "it has the disadvantage that it is not usually possible to prove conclusively that the system computed is correct .",
    "a different approach is described in  @xcite .",
    "this does enable the output to be proved correct , but it requires an additional hypothesis , to be described below , for it to work at all .",
    "it has the further advantage that it has an optional extension to compute a finite presentation for the subgroup @xmath64 of @xmath0 after the automatic coset system has been found .",
    "this second algorithm , together with the subgroup presentation facility , has been implemented and is available in . the theory , implementation details and performance statistics can also be found in  @xcite .",
    "these algorithms provide an alternative method to that described in the previous subsection for solving the generalised word problem for @xmath64 in @xmath0 .",
    "the given word in @xmath15 is reduced ( in quadratic time , using the coset multiplier automata ) to the unique word @xmath74 in the language of the coset word - acceptor for which @xmath75 . then @xmath76 if and only if @xmath74 is the empty word .",
    "the two methods of solving the generalised word problem are to some extent complementary to each other , since there can exist @xmath65quasiconvex subgroups that are not coset automatic and vice versa , although the two concepts are equivalent in word - hyperbolic groups .",
    "the additional hypothesis required for the algorithm developed by hurt is the following generalisation of the fellow - traveller condition .",
    "let @xmath25 be the shortlex automatic coset system for @xmath73 that we are trying to compute . then ,",
    "if @xmath77 for some @xmath40 , there exists @xmath78 such that @xmath79 .",
    "the hypothesis is that there exists a constant @xmath80 such that for all such @xmath81 and @xmath82 , and all @xmath32 , we have @xmath83 . in particular , taking @xmath84 , we get @xmath85 , and so in all such equations , only a finite number of elements @xmath82 occur .",
    "one step in the algorithm is to define the states of the @xmath6 as triples @xmath42 , as in the automatic group case , but now the initial states are @xmath86 , where @xmath46 is the initial state of @xmath5 , and @xmath82 is one of the elements of @xmath64 occurring in the above equations .",
    "so the @xmath6 are in fact constructed initially as non - deterministic automata with multiple initial states ,    if the hypothesis holds , then we shall say that @xmath0 is _ strongly coset automatic _ with respect to @xmath64 , and call @xmath25 a _ strong automatic coset system _ for @xmath73 .",
    "it is proved in  @xcite that word - hyperbolic groups are always strongly coset automatic with respect to their quasiconvex subgroups .",
    "it is easy to construct examples in which the hypothesis does not hold , by choosing @xmath64 to be normal in @xmath0 , in which case @xmath0 coset automatic with respect to @xmath64 is equivalent to @xmath87 automatic , but we do not know of any example in which @xmath88 .",
    "for the application to be described in this section , we need to strengthen the hypothesis defined at the end of the preceding section for strong automatic coset systems .",
    "let @xmath25 be a strong automatic coset system for @xmath73 with respect to the generating set @xmath1 of @xmath0 .",
    "let @xmath89 be a finite set of generators of @xmath64 , and let @xmath90 .",
    "then @xmath89 is said to be efficient with respect to @xmath25 if , for any @xmath13 and any @xmath91 such that @xmath92 , we have either @xmath93 or @xmath94 .    we are not currently aware of any particular situations under which an efficient generating set could be shown to exist ; it would be interesting to investigate this question . in specific examples of automatic coset systems that we have calculated with the programs ,",
    "it is often possible to observe directly from the calculation that a particular @xmath89 is efficient .",
    "the concept is useful to us here , because it enables us to prove the following result about hnn extensions , which can then be applied to a specific example .",
    "note that a rather different condition under which an hnn extension of an automatic group is asynchronously automatic has been proved by shapiro in  @xcite , and results of a similar nature for amalgamated free products are proved in  @xcite .",
    "let @xmath25 be a strong automatic coset system for @xmath73 , let @xmath95 be a finite presentation of @xmath0 , and suppose that @xmath64 has the efficient generating set @xmath89 .",
    "suppose also that @xmath64 is automatic , and let @xmath96 be an automorphism of @xmath64 such that @xmath97 .",
    "let @xmath99 be a right transversal for @xmath64 in @xmath0 .",
    "then by the normal form theorem for hnn extensions ( see , for example , theorem 2.1 ( ii ) , page 182 of  @xcite ) , each element of @xmath100 has a unique expression of the form @xmath101 where @xmath78 , @xmath102 , @xmath103 , @xmath104 for @xmath105 and @xmath106 for @xmath107 .",
    "we use this normal form in the natural manner to construct a regular language @xmath108 for @xmath69 on the alphabet @xmath109 where , as before , @xmath2 and @xmath90 .",
    "we are assuming that @xmath64 is automatic , so we can use the language @xmath110 of the word - acceptor from an associated automatic structure with alphabet @xmath111 to obtain a word @xmath112 for the element @xmath78 in the normal form .",
    "for @xmath99 we choose the image in @xmath0 of @xmath24 , and to represent @xmath113 , we choose the unique word @xmath114 with @xmath115 .",
    "this clearly yields a regular language @xmath108 mapping bijectively onto @xmath69 .",
    "we now have to show how to construct the asynchronous multiplier automata @xmath116 for @xmath117 .",
    "since this is fairly routine , we describe the construction in outline only .",
    "suppose that @xmath118 and @xmath119 , and let the hnn normal form of @xmath120 be @xmath121 as above .",
    "if @xmath122 or @xmath123 , then the hnn normal form for @xmath124 in @xmath69 is just @xmath125 , and it is easy to construct @xmath116 .",
    "so suppose @xmath126 .",
    "we shall suppose that @xmath127 and omit the details of the case @xmath128 , which are similar .",
    "there exist words @xmath129 and @xmath130 such that @xmath131 .",
    "let @xmath132 .",
    "then , from the assumptions that the generating set @xmath89 of @xmath64 is efficient and that @xmath97 , it follows that the hnn normal form in @xmath69 for @xmath124 is @xmath133 where there are elements @xmath134 , all having @xmath111length at most @xmath38 , such that @xmath135 , @xmath136 for @xmath137 , @xmath138 for @xmath139 , and @xmath140",
    ". thus we have @xmath141 and @xmath142 , where @xmath143 map onto @xmath144 , and @xmath145 map onto @xmath146 for @xmath137 .",
    "the multiplier @xmath116 proceeds by reading the words @xmath147 and @xmath148 in parallel at the same rate ,",
    "then the @xmath149 together , then @xmath150 and @xmath151 together , and so on . if either of @xmath147 or @xmath148 is longer than the other , then it will wait at the end of the shorter one until the longer word has been read , and similarly for @xmath113 and @xmath152 .",
    "( this explains why @xmath116 needs to be asynchronous .",
    "although @xmath153 and @xmath154 are all bounded , there is no bound on @xmath155 , and so one of the two tapes of the input of @xmath116 may conceivably get indefinitely ahead of the other ; indeed , we have verified that this really can happen in the example below . )",
    "of course , if either of the two words input to @xmath116 is not in @xmath108 , or if they do not both have the same pattern with respect to the occurrences of @xmath156 , then they are rejected .",
    "otherwise , if after @xmath34 transitions , @xmath116 has read @xmath157 symbols from @xmath158 and @xmath159 from @xmath160 , then the element @xmath161 of @xmath69 is remembered as a function of the state of @xmath116 . as in the synchronous case",
    ", it is sufficient to show that @xmath162 is bounded .      1",
    ".   @xmath164 and @xmath165 are prefixes of @xmath147 and @xmath166 , where @xmath167 is bounded .",
    "then the the boundedness of @xmath162 from the automaticity of @xmath64 , and the fact that @xmath168 with @xmath169 .",
    "2 .   @xmath170 for some @xmath171 and some prefix @xmath172 of @xmath173 , and @xmath174 , where @xmath175 is bounded .",
    "then @xmath176 , and its boundedness follows from the assumptions that @xmath177 and that @xmath25 is a strong automatic coset system for @xmath73 .",
    "3 .   @xmath178 for some @xmath171 and some @xmath179 , and @xmath180 , where @xmath181",
    ". then @xmath182 , and its boundedness follows from @xmath183 and the assumption that @xmath97 .",
    "4 .   @xmath184 and @xmath185 .",
    "then @xmath186 which is clearly bounded .      as an application",
    ", we shall use this theorem together with the results of some machine computations that were done with , to prove that the group defined by the presentation @xmath187 is asynchronously automatic .",
    "this group , which we shall denote by @xmath69 , was originally proposed by mark sapir as a possible building block in his attempts to construct groups with given dehn functions .",
    "however , he later found a different approach to his problem , and so the example is no longer relevant from that viewpoint .",
    "he had hoped that it could be proven automatic , but the methods we have been discussing in this paper only appear to be sufficient to prove it asynchronously automatic .",
    "the computer programs could make no progress with the presentation as given above , but matters improved after manipulating it a little .",
    "eliminating @xmath188 , we get @xmath189 now , putting @xmath190 and @xmath191 , and eliminating @xmath192 and @xmath193 , we get @xmath194 finally , using @xmath195 to simplify the second relation , we get @xmath196    this is now visibly an hnn extension of the group @xmath197 with respect to the subgroup @xmath198 , where @xmath64 is centralised by the new generator @xmath156 .",
    "( in fact @xmath0 is itself an hnn extension with extra generator @xmath155 , but we shall not make use of that fact . )    running the automatic coset system program from  on the subgroup @xmath64 of @xmath0 verifies that @xmath0 is strongly coset automatic with respect to @xmath64 . ( the coset word acceptor has 302 states , and the coset multiplers about 1400 states . )",
    "the presentation of @xmath64 computed by the program proves that @xmath64 is free of rank 2 , and so it is certainly automatic .",
    "the programs can also be used to verify that the set @xmath199 is an efficient generating set for @xmath64 .",
    "( briefly , this is done by constructing the multiple initial state multiplier automata for the elements @xmath200 and @xmath201 .",
    "the elements of @xmath64 corresponding to the initial states of these automata can then be inspected from the output , and it turns out that these are just the identity and elements of @xmath90 . ) we can now deduce from the theorem that sapir s group @xmath69 is asynchronously automatic .    as a final remark about this example , it turns out ( again using calculations carried out by ) that the subgroup @xmath64 is not @xmath65quasiconvex , where @xmath65 is the language of the word - acceptor of the shortlex automatic structure of @xmath0 . the element @xmath202 of @xmath65 lies in @xmath64 for all @xmath203 , but the coset representative of @xmath204 in the language of the coset word acceptor is @xmath205 .                  , _ the warwick automatic groups software _ , from : `` geometrical and computational perspectives on infinite groups '' , gilbert baumslag et al ( editors ) , dimacs series in discrete mathematics and theoretical computer science 25 ( 1995 ) 6982          , _ detecting quasiconvexity : algorithmic aspects _ , from : `` geometric and computational perspectives on infinite groups '' , gilbert baumslag et al ( editors ) , dimacs series in discrete mathematics and theoretical computer science 25 ( 1995 ) 9199"
  ],
  "abstract_text": [
    "<S> the history , definition and principal properties of automatic groups and their generalisations to subgroups and cosets are reviewed briefly , mainly from a computational perspective . </S>",
    "<S> a result about the asynchronous automaticity of an hnn extension is then proved and applied to an example that was proposed by mark sapir .    </S>",
    "<S> the concept of an automatic group was introduced in 1986 by thurston , motivated by some results of jim cannon on hyperbolic groups . </S>",
    "<S> much of the basic theory of this important class of groups was developed by david epstein during the following few years .    in the first section of this paper , </S>",
    "<S> we review briefly the history , definition and properties of automatic groups and their generalisation to subgroups and cosets , mainly from a perspective of carrying out efficient computations within such groups and their subgroups . in the second section , </S>",
    "<S> we prove a result about the ( asynchronous ) automaticity of an hnn extension , and use it , together with the results of some machine computations , to prove that a particular group , defined by mark sapir , is asynchronously automatic . </S>"
  ]
}