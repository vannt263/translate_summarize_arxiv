{
  "article_text": [
    "let @xmath0 be a connected undirected graph with @xmath1 vertices and @xmath2 edges .",
    "let @xmath3 be a linear cost function for the set of edges and @xmath4 be a quadratic cost function to weight each pair of edges ( without loss of generality , assume @xmath5 for all @xmath6 ) .",
    "quadratic minimum spanning tree problem ( qmstp ) _ requires to determine a spanning tree @xmath7 , so as to minimize its total cost @xmath8 , i.e. , the sum of the linear costs plus the quadratic costs .",
    "naturally , this problem can be formulated as follows ( cordone & passeri , 2012 ) :    @xmath9    @xmath10    @xmath11    @xmath12    where @xmath13 if edge @xmath14 belongs to the solution , @xmath15 otherwise .",
    "@xmath16 is a subset of @xmath17 and @xmath18 denotes the set of edges with both end vertices in @xmath16 .    as an extension of the classical _ minimum spanning tree problem ( mst ) _ in graphs , the qmstp has various practical applications in network design problems , where the linear function models the cost to build or use edges , while the quadratic function models interference costs between pairs of edges .",
    "for example , in transportation , telecommunication or oil supply networks , the linear function represents the costs for building each road , communication link or pipe , and the quadratic function represents the extra costs needed for transferring from one road ( link , pipe ) to another one .",
    "normally , the interference costs are limited to pairs of adjacent edges ( maia , goldbarg , & goldbarg , 2013 ; pereira , gendreau , & cunha , 2013 ) , but in some special cases , the interference costs also exist between any pair of edges , especially for situations where the topology has little relation to the physical layout .",
    "as discussed in ( assad & xu , 1992 ; ncan & punnen , 2010 ; palubeckis , rubliauskas , & targamadz , 2010 ) , the qmstp has several equivalent formulations such as the _ stochastic minimum spanning tree problem ( smstp ) _ , the _ quadratic assignment problem ( qap ) _ , and the _ unconstrained binary quadratic optimization problem ( ubqp)_.    during the last two decades , the qmstp has been extensively investigated and many heuristic and exact approaches have been proposed . since the qmstp is @xmath19-hard and is even difficult to approximate ( xu , 1995 ) ,",
    "exact methods are often applied only to solve very small instances . for larger instances",
    ", heuristics are preferred to obtain feasible solutions within a reasonable time .    as for exact methods , assad and xu ( assad & xu , 1992 ; xu , 1995 )",
    "propose a lagrangian branch - and - bound method .",
    "ncan and punnen ( 2010 ) combine the lagrangian relaxation scheme with an extended formulation of valid inequalities to obtain tighter bounds .",
    "cordone and passeri ( 2012 ) re - implement the lagrangian branch - and - bound procedure in ( assad & xu , 1992 ) with some improvements .",
    "very recently , several exact algorithms are proposed for solving other closely related variants . respectively ,",
    "buchheim and klein ( 2013a ; 2013b ) consider a special case of the qmstp with exactly one quadratic term in the objective function , and propose a branch and bound approach to solve it .",
    "the description of this problem is further completed in ( fischer & fischer , 2013 ) .",
    "pereira , gendreau , and cunha ( 2013 ) propose a dynamic column and row generation based linear programming approach , to obtain strong lower bounds for the qmstp with adjacency costs , for which the interference costs are only limited to adjacent edges .",
    "on the other hand , heuristics which attempt to obtain near - optimal results within a reasonable time become the main approaches for solving the _ qmstp _ , especially for large instances .",
    "for instance , two greedy algorithms are proposed in ( xu , 1984 ; assad & xu , 1992 ; xu , 1995 ) .",
    "several genetic algorithms are implemented by zhou and gen ( 1998 ) and tested on instances with up to 50 vertices , showing that their algorithms dominate the above greedy algorithms .",
    "another evolutionary algorithm is proposed for a fuzzy variant of the qmstp ( gao , lu , & li , 2004 ; gao & lu , 2005 ) , using the prfer number to encode a spanning tree .",
    "soak , corne , and ahn ( 2005 ; 2006 ) report remarkable results with an evolutionary algorithm using an edge - window - decoder strategy .",
    "in addition to these early methods , even more heuristics have been proposed in recent years , mostly based on local search .",
    "for example , the tabu thresholding algorithm ( ncan & punnen , 2010 ) alternatively performs local search and random moves . in ( palubeckis , rubliauskas , & targamadz , 2010 ) , an iterated tabu search ( its ) is proposed and compared to a multi - start simulated annealing algorithm and a hybrid genetic algorithm , showing that its performs the best . an artificial bee colony algorithm is developed by sundar and singh ( 2010 ) .",
    "cordone and passeri ( 2012 ) adopt a novel data structure and updating technique to reduce the amortized time at each iteration of neighborhood exploration from @xmath20 to @xmath21 , based on which they further propose a tabu search ( ts ) algorithm and report a number of improved results over previous best known results .",
    "very recently , lozano et al .",
    "( 2013 ) propose an iterated greedy ( ig ) and a strategic oscillation ( so ) heuristic , and combine them with the its ( palubeckis , rubliauskas , & targamadz , 2010 ) algorithm to obtain a powerful hybrid algorithm named hsii .",
    "in addition to the standard qmstp , for the variant only with adjacency costs , maia , goldbarg , & goldbarg ( 2013 ) propose a pareto local search algorithm and adapt the 108 instances in ( cordone & passeri , 2012 ) as benchmarks to evaluate the proposed algorithm .    in this paper , we are interested in the qmstp and propose a three - phase search approach named tps , which uses a randomized constructive procedure for solution initialization , and integrates a descent - based neighborhood search phase based on two different move operators to reach a local optimum from any given starting solution , a local optima exploring phase to discover different local optima within a given regional search area , and a perturbation - based diversification phase to jump out of the current search area and move to unexplored search areas . as a supplementary technique , a fast examination technique is implemented to identify and discard hopeless neighboring solutions , so as to avoid useless computations .",
    "computational results based on 7 sets of 659 representative benchmarks demonstrate that tps yields highly competitive results with respect to the best performing heuristics , showing its effectiveness and efficiency for solving the qmstp .",
    "in particular , for the 630 conventional qmstp instances mostly with unknown optimal results , tps improves the best known results for 31 instances and matches the best known results for the remaining instances only except two cases . for the set of the 29 instances transformed from the _ quadratic assignment problem _ which are known to be difficult for existing qmstp algorithms , tps consistently solve them to optimality within a very short time .",
    "the rest of this paper is organized as follows : section [ secapproach ] describes the proposed approach . after providing the computational results in section [ secresults ] , section [ secanalyze ]",
    "analyzes the influence of several important ingredients of the proposed algorithm .",
    "finally , conclusions from this study are drawn in section [ secconclude ] .",
    "the proposed three - phase search approach tps for the qmstp is outlined in algorithm [ algorithmoutline ] , which is composed of several subroutines . respectively , _ init_solution _",
    "is used to randomly generate an initial starting solution .",
    "the first search phase is ensured by _ descent_neighborhood_search _ which is a descent - based neighborhood search procedure and aims to reach a local optimal solution from a given starting solution . the second search phase _ explore_local_optima _ is used to discover nearby local optima of better quality within the current regional search space .",
    "if no further improvement can be attained , the search turns into a diversified perturbation phase _ diversified_perturb _ , which strongly perturbs the incumbent solution to jump out of the current regional search area in order to displace the search into a new area .",
    "after that , the search enters into a new round of _",
    "descent_neighborhood_search _ and _ explore_local_optima _ search phases again .",
    "this process is iterated until the terminal criterion is met .",
    "graph @xmath22 , linear function @xmath23 , quadratic function @xmath24 the best solution found / * construct an initial solution , section [ subsecinit ] * / @xmath25 / * find a local optimum with the descent - based neighborhood search phase , section [ subsecns ] * / @xmath26 / * explore nearby local optima of better quality , alg .",
    "[ algorithmintensivesearch ] and section [ subsecintensivesearch ] * / @xmath27 / * @xmath28 records the best solution found so far * / @xmath29 / * strongly perturb the incumbent solution to a new solution , section [ subsecdiversearch ] * / @xmath30 / * call the neighborhood search phase to reach a local optimum again * / @xmath26 / * enter the local optima exploring phase again * / @xmath27 / * update @xmath28 if an improved solution is found * / @xmath29 @xmath28    fig .",
    "[ figsearchprocedure ] illustrates the idea followed by the tps procedure , where @xmath31-axis indicates all the feasible solutions @xmath32 , and @xmath33-axis indicates the corresponding objective values @xmath8 . as shown in fig .",
    "[ figsearchprocedure ] , @xmath34 are local optima of different qualities , while @xmath35 being feasible solutions . starting from a randomly generated initial solution ,",
    "say @xmath36 , the search calls _",
    "descent_neighborhood_search _ to reach a first local optimum @xmath37 , and then uses the _",
    "explore_local_optima _ search phase to discover nearby local optima @xmath38 and @xmath39 . at this point ,",
    "the _ diversified_perturb _ phase is executed to jump from @xmath39 to a faraway enough solution @xmath40 , which is subsequently optimized by _ descent_neighborhood_search _ ( @xmath41 ) and _ explore_local_optima _ ( @xmath42 ) , to obtain a high - quality solution @xmath43 .    in its most general form , the proposed procedure can be considered as an iterated local search algorithm ( lourenco , martin , sttzle , 2003 ) . nevertheless , tps is distinguished by its local optima exploring phase and its perturbation mechanisms which share similarities with breakout local search ( benlic & hao , 2013a ; 2013b ; 2013c ; fu & hao , 2014 ) .      like the compact tree representation used in ( cordone & passeri , 2012 ;",
    "fu & hao , 2014 ) , we uniquely represent each feasible solution @xmath32 as a rooted tree ( with vertex 1 fixed as the root vertex , being different from ( cordone & passeri , 2012 ) where the root changes dynamically during the search process ) , corresponding to a one - dimensional vector @xmath44 , where @xmath45 denotes the parent vertex of vertex @xmath46 only except the root vertex 1 ( let @xmath47 ) .",
    "inversely , given a vector @xmath44 , the corresponding solution tree can be easily reconstructed .",
    "tps requires an initial solution to start its search .",
    "moreover , given its stochastic nature , multiple runs of tps from different initial solutions are typically applied to find the best possible solutions for a problem instance . for the qmstp ,",
    "starting from an empty solution @xmath32 containing only the root vertex and no edge , we iteratively select at random one edge from @xmath40 and add it to @xmath32 ( without leading to any closed loop ) , until @xmath48 such edges are added , meaning that a feasible initial solution is generated . in the rest of the paper , a feasible tree will be noted by @xmath7 where @xmath17 and @xmath49 are respectively the vertex set of the graph and the set of edges of the tree .      as the basis of the proposed approach , a descent - based neighborhood search phase _",
    "descent_neighborhood_search _ is used to reach a local optimum from a given starting solution @xmath7 .",
    "for this , we develop two different move operators to generate neighboring solutions .",
    "the first one is the conventional _ swap - edge move operator _ inherited from ( palubeckis , rubliauskas , & targamadz , 2010 ; cordone & passeri , 2012 ; lozano et al . , 2013 ) .",
    "this operator first adds to @xmath31 one of the @xmath50 unused edges @xmath51 , thus closing a loop @xmath52 of @xmath53 edges , and then removes an edge @xmath54 from @xmath55 , to obtain a feasible neighboring solution denoted by @xmath56 .",
    "the corresponding difference of the objective function ( also called move gain ) is denoted by @xmath57 .",
    "the above move operator swaps only one pair of edges .",
    "it is tempting to introduce a move operator by swapping two pairs of edges to obtain an enlarged neighborhood .",
    "nevertheless , such a move operator induces a neighborhood with a total of @xmath58 neighboring solutions , which is extremely expensive for neighborhood examination . to control the size of the neighborhood , we develop a restricted _ swap - vertex move operator _ as follows .",
    "let @xmath59 denote the subset containing all the vertices with degree equal to 1 ( including all the leaf vertices and possibly the root vertex ) , and for each vertex @xmath60 , let @xmath61 denote the related vertex , i.e. , the vertex connected to @xmath46 . then , for each pair of vertices @xmath62 with @xmath63 and @xmath64 , a feasible neighboring solution denoted by @xmath65 could be generated by swapping vertices @xmath46 and @xmath66 , leading to a difference @xmath67 of the objective function .",
    "note that , if we denote edges @xmath68 , @xmath69 , @xmath70 , @xmath71 by @xmath72 , @xmath73 , @xmath74 , @xmath75 respectively , @xmath76 is indeed equivalent to @xmath77 .",
    "clearly , @xmath76 defines a neighborhood whose size is bounded by @xmath78 .",
    "for example , fig .",
    "[ figmoveoperator ] illustrates several neighboring solutions generated by the above move operators . respectively , based on the original solution @xmath79 , solution @xmath80 is generated by adding edge @xmath81 and subsequently deleting edge @xmath82 , while solutions @xmath83 and @xmath84 are obtained by swapping the related vertices corresponding to vertices @xmath85 and @xmath86 , @xmath87 and @xmath85 respectively .",
    "note that , after applying the move operators , the parent - child relationship of some vertices should be reversed ( for example , the relationship between vertices 2 and 3 in sub - figure ( d ) ) , to ensure that vertex 1 is always fixed as the root .",
    "based on these move operators ( @xmath88 and @xmath76 ) , two different neighborhoods @xmath89 and @xmath90 are defined as follows :    @xmath91    where @xmath7 is a feasible solution , and @xmath92 designates the neighboring solution obtained by applying @xmath93 or @xmath94 to @xmath32 .    typically , _",
    "descent_neighborhood_search _ examines ( in random order ) the feasible neighboring solutions belonging to @xmath95 ( i.e. the union of the two neighborhoods ) and applies the first met improving one ( with @xmath96 or @xmath97 ) to replace the incumbent solution .",
    "this process is iterated until no such improving solution exists in the neighborhood , meaning that a local optimum is reached .",
    "additionally , one observes that @xmath98 , and @xmath99 , being statistically much less than @xmath100 . to ensure a fast exploration of neighborhood @xmath89 , in the following subsection",
    ", we develop a pre - estimation technique which is able to identify and discard a large number of useless @xmath88 moves , consequently to reduce the computational complexity needed for _",
    "descent_neighborhood_search_.      like in ( cordone & passeri , 2012 ) , we maintain a vector @xmath101 , whose values indicate the actual or potential contribution of each edge @xmath102 to the overall cost of the incumbent solution @xmath7 .",
    "@xmath103    with this vector , for each of the @xmath21 possible swap - edge moves @xmath88 corresponding to the neighborhood @xmath89 , the objective function varies by ( cordone & passeri , 2012 ) :    @xmath104    which can be calculated in constant time @xmath105 . additionally , after performing the chosen move @xmath88 , vector @xmath101 is updated as follows ( cordone & passeri , 2012 ) :    @xmath106    which takes a total time of @xmath107 .",
    "clearly , the overall complexity for exploring the first neighborhood @xmath89 at each iteration is @xmath108 .",
    "similarly , since each of the @xmath78 possible swap - vertex moves @xmath76 ( i.e. neighborhood @xmath90 ) is equivalent to @xmath77 , where @xmath72 , @xmath73 , @xmath74 , @xmath75 denote edges @xmath68 , @xmath69 , @xmath70 , @xmath71 respectively , the difference of the objective function is obtained by :    @xmath109    where each term can be evaluated in constant time @xmath105 . then , vector @xmath101 is updated in @xmath107 as follows :    @xmath110    clearly , the computational complexity needed for exploring @xmath90 at each iteration is at most @xmath111 .",
    "furthermore , we attempt to reduce the computational time needed for the examination of neighborhood @xmath89 , which is the most expensive part of the first search phase . as mentioned above , at each iteration of _",
    "descent_neighborhood_search _ , up to @xmath21 legal swap - edge moves are possible .",
    "however , many of these moves are definitely hopeless since no improvement over the incumbent solution can be gained .",
    "descent_neighborhood_search _ only accepts improved solutions with @xmath96 , it is interesting to identify these hopeless moves with @xmath112 and discard them directly to avoid irrelevant computations .    based on this idea , we develop a pre - estimation criterion as follows .",
    "let @xmath113 denote the maximum cost value of @xmath114 of all the edges @xmath115 belonging to the incumbent solution @xmath7 , and let @xmath116 denote the maximum possible value of quadratic costs between any pair of edges .",
    "note that @xmath117 is a variable which should be updated at each iteration , within an amount of @xmath118 extra time , while @xmath119 is a constant .",
    "then , it is clear that , for each edge @xmath51 , if we add it to @xmath31 , the objective function would increase by @xmath120 . at this point",
    ", one can observe that no matter which edge @xmath121 we choose to remove from @xmath31 , the decreased cost is strictly bounded within @xmath122 . obviously , if @xmath123 , it means that all the possible moves @xmath124 lead to a solution no better than the incumbent solution @xmath32 .",
    "in other words , it is definitely impossible to obtain an improved solution by exchanging @xmath14 against any other edge belonging to the incumbent solution .",
    "consequently , we can directly discard all these moves to avoid useless evaluations , thus reducing the computation time .",
    "while exploring the neighboring solutions belonging to neighborhood @xmath89 , for each edge @xmath125 , we first use the above pre - estimation criterion to check if it is possible to gain any improvement by exchanging @xmath14 against some other edge @xmath121 .",
    "if this is not the case , we discard all the moves involving @xmath14 and skip to the next edge in @xmath126 .",
    "otherwise , we evaluate one by one the possible legal moves @xmath124 to identify an improving neighboring solution . as shown in section [ secanalyze ] , this fast examination technique allows the algorithm to identify and discard a high number of hopeless moves , accelerating considerably the neighborhood exploration without any sacrifice of solution quality .      obviously , the _ descent_neighborhood_search _ procedure described in section [ subsecns ] alone can not go beyond the achieved local optimum . in order to be able to discover nearby local optima which are possibly of better quality and to intensify the search in a given regional search space , we develop a local optima exploring ( _ explore_local_optima _ ) phase ( algorithm [ algorithmintensivesearch ] ) . the local optima exploring phase is based on",
    "two directed perturbation operators ( denoted by _ directed_perturb _ ) .",
    "inspired by the idea of breakout local search ( benlic & hao , 2013a ; 2013b ; 2013c ) , these directed perturbation operators rely on the tabu search principle ( glover & laguna , 1997 ) , which favors the moves with the weakest deterioration of the objective function .",
    "precisely , _",
    "directed_perturb _ takes one of the following two forms .    the incumbent local optimal solution @xmath32 the best found local optimal solution near @xmath32 / * @xmath127 records the best local optimum found during the current local optima exploring phase * / @xmath128 / * @xmath129 counts the number of consecutive non - improving rounds of directed perturbation followed by neighborhood search * / @xmath130 / * _ explore_local_optima _ stops once @xmath129 reaches its upper bound @xmath131 * / / * apply a directed perturbation operator to perturb @xmath32 * / @xmath132 / * optimize the incumbent solution to a new local optimum * / @xmath26 / * if @xmath32 is better than @xmath127 , update @xmath127 and reset @xmath129 ; otherwise increase @xmath129 * / @xmath128 @xmath130 @xmath133 @xmath127    1 .",
    "the _ swap - edge directed perturbation _ operator applies the swap - edge move operator ( see section [ subsecns ] ) . for each edge",
    "@xmath102 , this perturbation operator saves in an array the last iteration @xmath134 when edge @xmath115 is added into or removed from the current solution . with this information , before exchanging edge @xmath135 and edge @xmath136 , we check at first whether the current iteration index is larger than both @xmath137 and @xmath138 , where @xmath139 and @xmath140 are parameters indicating the length of the prohibition , i.e. , the tabu tenures ( glover & laguna , 1997 ) . if this is not the case , the corresponding move _",
    "swapedge(e , f ) _ is marked tabu .",
    "this prohibition aims to avoid the inclusion of a recently removed edge or the removal of a recently included edge , unless the move meets the aspiration criterion , i.e. , leading to a solution better than the overall best found solution . otherwise , _",
    "swapedge(e , f ) _ is declared non - tabu .",
    "typically , the perturbation operator examines all the non - tabu legal moves and iteratively applies the best legal move to the incumbent solution ( no matter it leads to an improved solution or not ) , until a given number @xmath141 ( called perturbation strength ) of such moves are performed .",
    "the _ swap - vertex directed perturbation _",
    "operator is based on the swap - vertex move operator ( see section [ subsecns ] ) . for each vertex @xmath142 ,",
    "we save in an array the last iteration @xmath143 when vertex @xmath144 is swapped with some other vertex .",
    "then , before swapping any pair of vertices @xmath145 , we check at first whether the current iteration index is larger than both @xmath146 and @xmath147 , where @xmath148 is a parameter indicating the tabu tenure . the moves satisfying this condition",
    "are marked non - tabu , while the others are declared tabu , unless they meet the same aspiration criterion used above .",
    "similarly , this perturbation operator iteratively applies the best non - tabu move to the incumbent solution , until a given number @xmath141 of such moves are performed .",
    "given these two types of directed perturbation operators , the local optima exploring ( _ explore_local_optima _ ) phase applies them probabilistically : selecting the swap - edge perturbation with probability @xmath149 ( parameter ) , and applying the swap - vertex directed perturbation with probability @xmath150 .",
    "then , the _ descent_neighborhood_search _ phase is applied again to the perturbed incumbent solution to obtain a new local optimum .",
    "typically , the local optima exploring phase alternates between _ directed_perturb _ and _ descent_neighborhood_search _ , until no further improvement is gained after @xmath131 consecutive such rounds ( @xmath131 is fixed to be 5 in this paper ) , meaning that it is difficult to find better local optima within the current search region . at this point , the search turns into a diversified perturbation phase described below , in order to jump out of the current region .",
    "the diversified perturbation phase aims to jump out of the current regional search area and displace the search to more distancing search areas , while retaining a certain degree of structure information of the incumbent solution . for this",
    ", we develop a diversified perturbation operator _ diversified_perturb _ , which iteratively removes at random an edge @xmath54 from @xmath7 and subsequently adds the best feasible edge @xmath151 into @xmath32 , without leading to any closed loop ( to ensure the feasibility of the solution after insertion ) , until a given number @xmath152 ( parameter for controlling the perturbation strength ) of such perturbation moves are performed .",
    "given the definition of the _ directed_perturb _ and _ diversified_perturb _ operators , we understand that they introduce different degrees of diversification to the search process . indeed , with tabu principle , _",
    "directed_perturb _ modifies the incumbent solution more gradually and keeps the search within areas close to the incumbent solution . on the other hand , by random moves , _",
    "diversified_perturb _ may disrupt strongly the incumbent solution and leads the search to a completely new region . by combining these two different types of perturbations",
    ", it is expected that a better trade - off between intensification and diversification would be reached in the general search procedure .    finally , in our tps algorithm",
    "( see algorithm [ algorithmoutline ] ) , each time the _ diversified_perturb _ phase is applied to modify the incumbent local optimum @xmath32 , the resulting solution is subsequently optimized by _ descent_neighborhood_search _ followed by _",
    "explore_local_optima_. this process is repeated , until the terminal criterion is satisfied .",
    "then , the best found solution @xmath28 is returned as the obtained solution .",
    "in order to evaluate the performance of our tps algorithm , which is coded in c , we test it on a large number of well - known benchmarks , and then compare the results with respect to previous state - of - the - art heuristics in the literature . for comparisons ,",
    "we consider the objective function values , i.e. , the consumed cost as our main evaluation criterion , and include the runtime for indicative purposes . for information , the tps algorithm is executed on an intel xeon e5440 2.83 ghz processor and 2 gb ram , while a 1.6 ghz pentium iv processor is used in ( soak , corne , & ahn , 2006 ) , a 3 ghz pentium iv cpu and 2 gb ram in ( ncan & punnen , 2010 ) , a 3.0 ghz core 2 duo system with 2 gb ram in ( sundar & singh , 2010 ) , a 3.0 ghz intel core 2 duo in ( palubeckis , rubliauskas , & targamadz , 2010 ) , a 2.6 ghz intel pentium core 2 duo e6700 and 2 gb ram in ( cordone & passeri , 2012 ) , a 3.2 ghz intel processor and 12 gb ram in ( lozano et al . , 2013 ) .",
    "one can observe that the clock frequency of our processor is about 80% faster than the computer used in ( soak , corne , & ahn , 2006 ) , while being similar to the machines used in ( ncan & punnen , 2010 ; sundar & singh , 2010 ; palubeckis , rubliauskas , & targamadz , 2010 ; cordone & passeri , 2012 ; lozano et al .",
    ".      given the importance of the qmstp , a large number of benchmark instances are generated for evaluation .",
    "to the best of our knowledge , the following benchmarks are currently available , which could be further classified into seven groups as follows . and the rand and soak instances are available at http://sci2s.ugr.es/qmst/qmstpinstances.rar .",
    "the others can be provided on request to the authors ( fu@info.univ-angers.fr or hao@info.univ-angers.fr ) . ]    * benchmark cp ( cordone & passeri , 2008 ) consists of 108 instances , with vertices number @xmath153 ranging from 10 to 50 , and graph density @xmath154 , @xmath155 or @xmath156 .",
    "the linear costs and the quadratic costs are randomly distributed in [ 1,10 ] or [ 1,100 ] . *",
    "benchmark op1 ( ncan & punnen , 2010 ) consists of 480 complete graphs , with @xmath153=6 - 18 , 20 , 30 , 50 respectively , each group having 30 instances .",
    "these instances are further divided into three subclasses : 1 .",
    "sym : with linear costs uniformly distributed at random within [ 1,100 ] , and quadratic ones within [ 1,20 ] ; 2 .",
    "vsym : the linear costs are uniformly distributed at random in [ 1,10000 ] , for the quadratic costs , each vertex is assigned with a value randomly distributed in [ 1,10 ] and the quadratic cost @xmath157 is obtained by multiplying the four values associated with the end vertices of edges @xmath14 and @xmath54 ; 3 .",
    "esym : the vertices are randomly distributed in a square of side 100 , then the linear costs are the euclidean distances between the end vertices of each edge , and the quadratic costs are the euclidean distances between the mid - points of the edges . * benchmark sca ( soak , corne , & ahn , 2006 ) includes 6 complete graphs , with vertices number ranging from 50 to 100 , by steps equal to 10 .",
    "for each instance , the vertices are uniformly spread in a square of side 500 , then the linear costs are the euclidean distances between the vertices and the quadratic costs are uniformly distributed within [ 0,20 ] . *",
    "benchmark ss ( sundar & singh , 2010 ) consists of 18 complete graphs with @xmath15825 , 50 , 100 , 150 , 200 and 250 ( each corresponds to 3 instances ) , the linear costs are uniformly distributed at random within [ 1,100 ] and the quadratic costs are randomly distributed within [ 1,20 ] . *",
    "benchmark rand ( lozano et al . , 2013 ) : this group consists of 9 large instances ( with @xmath158150 , 200 or 250 ) recently generated by lozano et al .",
    "( 2013 ) , with linear costs uniformly distributed in [ 1 , 100 ] , and quadratic ones uniformly distributed in [ 1 , 20 ] . *",
    "benchmark soak ( lozano et al . , 2013 ) : this group also includes 9 large instances ( with @xmath158150 , 200 or 250 ) , with vertices uniformly distributed at random on a 500@xmath159500 grid .",
    "the edge costs are the integer euclidean distances between any pair of vertices , and the quadratic ones are uniformly distributed between [ 1 , 20 ] . *",
    "benchmark qap - qmstp consists of 29 special qmstp instances converted from the nug ( nugent , vollman , & ruml , 1968 ) and chr ( christofides & benavent , 1989 ) benchmarks of the _ quadratic assignment problem ( qap ) _ , using a one - to - one transformation procedure between these two different problems ( ncan & punnen , 2010 ) .",
    "note that , although all the original qap instances have already been solved to optimality by previous qap algorithms ( burkard , karisch , & rendl , 1997 ) , they are difficult for existing qmstp algorithms to reach the optimal solutions , due to the quite special problem structures after transformation .",
    "even the best qmstp algorithm misses 17 optimal solutions .",
    "as mentioned above , the cp and op1 groups contains a large number of small sized instances , with up to @xmath160 vertices .",
    "in fact , for all the 108 instances of group cp and almost all ( 476 out of 480 ) the instances of group op1 , our tps algorithm can easily match the previous best known results .",
    "more importantly , for the left 4 instances of group op1 , tps succeeds in finding several improved solutions .",
    "in addition to these two groups , the following five groups of instances are much more challenging , due to their large - scale problem sizes or special problem structures . to emphasize the effectiveness of tps for solving challenging instances , in this paper , we just provide in detail the results obtained on the five groups of challenging instances , with respect to previous state - of - the - art heuristics , while summarizing the results on groups cp and op1 , to shorten the paper .",
    "as described in section [ secapproach ] , tps requires several parameters : the tabu tenures @xmath139 , @xmath140 , @xmath148 used in the directed perturbation operators , the perturbation strength @xmath141 and @xmath152 , as well as the probability @xmath149 for selecting a directed perturbation operator . generally , these parameters could be tuned with respect to each benchmark group given that the groups have different characteristics and structures . however , to show the efficiency and the robustness of the proposed approach , we uniformly adopt a fixed set of parameter values for all the test instances only except those of group qap - qmstp .",
    "first , we observe in our preliminary experiments that the swap - edge based directed perturbation operator alone performs quite well for all the benchmarks except the group qap - qmstp .",
    "thus we set @xmath161 ( thus disable the swap - vertex directed perturbation operator , rending parameter @xmath148 unnecessary ) .",
    "the tabu tenures @xmath139 , @xmath140 are distributed at random within @xmath162 $ ] , @xmath163 $ ] , and the perturbation strengths @xmath141 , @xmath152 are distributed with random integers belonging to @xmath164 $ ] and @xmath165 $ ] respectively .",
    "second , for the group qap - qmstp , we observe that the swap - vertex based directed perturbation operator is extremely useful ( as further discussed in section [ subsecanalyzedirectedperturb ] ) , and the tabu mechanism plays a more important role for solving these instances . following these observations , we set parameter @xmath166 , and enlarge parameter @xmath141 to @xmath167 $ ] , while keeping the same values for the other parameters as above . additionally , for the extra tabu tenure @xmath148 used in the swap - vertex based directed perturbation operator , it is distributed at random within @xmath168 $ ] .",
    "the stopping criterion of our algorithm is provided in the next subsection along with the presentation of the computational results of each benchmark group .",
    "finally , one notices that there is no uniform terminal criterion used by the previous heuristics , various terminal conditions have been adopted by different researchers , for solving different instances .      among the 108 instances generated in ( cordone & passeri , 2008 ) ,",
    "tens of the largest ones have been selected to evaluate several algorithms , i.e. , its ( palubeckis , rubliauskas , & targamadz , 2010 ) , qmst - ts ( cordone & passeri , 2012 ) , hsii ( lozano et al .",
    "respectively , both its and qmst - ts solve each instance 10 times , each run continues until the previous best known solution is reached . ] .",
    "experimental results show that for all these selected instances , each run of its and qmst - ts can unexceptionally reach the best known solution , with a mean computing time ( average of each independent run ) ranging from less than 1 second to about 2 minutes .",
    "hsii also executed 10 independent times to solve each instance , with a cutoff time of 10 seconds for each run . however , for many test instances , hsii occasionally fails to match the previous best known results within the allowed time .    to evaluate the performance of our tps algorithm on this set of 108 instances , we follow its and qmst - ts . in other words , we independently run tps 10 times to solve each instance , each run continues until the best known result is reached .",
    "our results show that , each tps run unexceptionally succeeds in reaching the best known result , with an average time from less than 1 second to less than 2 minutes , indicating that tps performs similarly with respect to its and qmst - ts for this group of small benchmarks .",
    "since these instances are not challenging enough , we do not show our detailed results .",
    "this group consists of three subclasses ( sym , esym , vsym ) , each includes 160 instances , with @xmath153 ranging from 6 to 50 ( a total of 480 instances ) .",
    "these benchmarks have been used to evaluate several previous algorithms , including two exact approaches , i.e. , the refined lagrangian lower bounding procedure in ( ncan & punnen , 2010 ) and the branch - and - bound algorithm qmst - bb in ( cordone & passeri , 2012 ) , as well as two heuristics , i.e. , the rls - tt algorithm in ( ncan & punnen , 2010 ) and the tabu search algorithm qmst - ts in ( cordone & passeri , 2012 ) .",
    "nevertheless , the existing exact approaches can only solve small sized instances with up to @xmath169 vertices . for larger instances ,",
    "only heuristics are able to produce feasible solutions within a reasonable time .",
    "in addition , rls - tt just provides summarized results for these benchmarks , without giving detailed results for each instance .",
    "unfortunately , some of the results reported by rls - tt exhibit internal inconsistencies , probably due to typos mistakes , as pointed out in ( cordone & passeri , 2012 ) .",
    "it means that it is impossible to reproduce the results reported by rls - tt on the inconsistent instances . due to these reasons",
    ", we mainly compare tps with the latest and best heuristic qmst - ts on this group of benchmarks .    to ensure that the computation time required by tps is comparable to that of qmst - ts , we independently apply our tps algorithm 10 times to each instance",
    ", each run continues until the best found solution can not be further improved after 10 consecutive rounds of _ diversified_perturb _ followed by _",
    "descent_neighborhood_search _ and _ explore_local_optima _ search phases , or up to 50 such rounds have been applied .",
    "experimental results show that , for all these 480 instances , tps finds solutions no worse than the previous best known solutions , with an accumulated cpu time ranging from less than one second to about 15 seconds , which is competitive to the runtime required by rls - tt and qmst - ts .",
    "specifically , for four largest instances ( with @xmath153=50 ) of subclass sym , tps succeeds in finding improved solutions missed by previous heuristics .",
    "the results for these four instances are detailed in table [ tblresultsym ] , where the first three columns indicate the instances , and the next two columns best , t(s) respectively report the best objective value and the cpu time ( in seconds ) corresponding to qmst - ts , and the last four columns indicate the same information corresponding to tps , as well as the times that tps improves ( column @xmath170 ) or matches ( column @xmath171 ) the previous best known result among 10 runs .",
    ".four improved results of the sym subclass of group op1 [ cols= \" < ,",
    "< , < , < , < , < , < , < , < , < , < , < , < , < \" , ]      p2cmp0.8cmp1.0cmp0.8cmp0cmp0.8cmp1.0cmp0.8cmp0cmp0.8cmp1.0cmp0.8cmp0 cm instanceas mentioned in section [ subsecintensivesearch ] , the proposed three - phase search algorithm relies on two tabu - based directed perturbation operators , using a parameter @xmath149 to control the probability for selecting each operator . to analyze the impact of different directed perturbation operators , we respectively let @xmath149 equal to 1 ( using the swap - edge directed perturbation operator alone ) , 0.5 ( combining two operators ) , 0 ( using the swap - vertex directed perturbation operator alone ) , while keeping all the other ingredients and parameters unchanged as described in section [ secresults ] , to get three variants of the proposed algorithm for comparisons .",
    "for this experiment , we select a subset of 44 most challenging instances out of all the 659 instances , including the 12 instances with @xmath172 of group ss , all the 18 instances of groups rand and soak , together with the 14 instances with @xmath173 of group qap - qmstp , and then compare the performance of each variant based on these selected instances . for each instance",
    ", we independently run each variant 10 times , each run using the same terminal criterion like in section [ secresults ] .",
    "the obtained results are provided in table [ tblanaylyzedirectperturb ] , including the best and average cost of the 10 independent runs , as well as the accumulated cpu times ( in seconds ) .    as shown in table [ tblanaylyzedirectperturb ] , on one hand , for the general qmstp instances of groups ss , rand and soak , the variant with @xmath161 yields the best results on almost all ( only with two exceptions ) the test instances , in terms of both best and average costs , while consuming statistically much less time on group ss and the same cutoff time on groups rand and soak . by contrast",
    ", the variant with @xmath174 performs the worst .    on the other hand , for the special instances transformed from qap",
    ", we observe that the variants with @xmath166 and @xmath174 yield the same best results ( with all instances solved to optimality ) , being much better than the ones obtained by the variant with @xmath161 .",
    "furthermore , considering the average cost and computation time , the variant with @xmath174 performs slightly better than the variant with @xmath166 , and much better than the variant with @xmath161 , indicating the importance of the swap - vertex based directed perturbation operator for solving these special instances .    following these observations , in the standard tps algorithm",
    ", we just use the swap - edge based directed perturbation operator alone ( @xmath161 ) for solving the general qmstp instances , and combine these two directed perturbation operators ( @xmath166 ) together for solving the special instances transformed from qap .",
    "now we turn our attention to the impact of the diversified perturbation operator . for this purpose , based on the standard tps ( denoted by tps - v0 hereafter ) algorithm described in section [ secapproach ] ,",
    "we implement as follows two compared variants by varying the diversified perturbation operator . respectively",
    ", variant tps - v1 adopts a random starting strategy which uses the randomized initialization procedure described in section [ subsecinit ] instead of the original diversified perturbation operator in section [ subsecdiversearch ] , and variant tps - v2 uses the directed perturbation operator in section [ subsecintensivesearch ] instead .",
    "all the other ingredients and parameters keep in accordance with tps - v0 .",
    "again , we use the 44 most challenging instances of section [ subsecanalyzedirectedperturb ] as benchmarks to evaluate the performances of these compared tps variants . for each instance",
    ", we also independently run each variant 10 times , each run using the same parameters and terminal criterion like in section [ secresults ] .",
    "the results are detailed in table [ tblanaylyzediversifyperturb ] , with each column having the same meanings as in table [ tblanaylyzedirectperturb ] .",
    "p2cmp0.8cmp1.0cmp0.8cmp0cmp0.8cmp1.0cmp0.8cmp0cmp0.8cmp1.0cmp0.8cmp0 cm instanceas shown in table [ tblanaylyzediversifyperturb ] , we observe that tps - v0 yields better results than tps - v2 on 8 out of the 12 ss instances , and dominates tps - v1 on all the 12 ss instances , while consuming statistically much less computation time with respect to these two compared variants .",
    "furthermore , for the groups rand and soak , tps - v0 performs clearly much better than the two compared variants in terms of both best and average solution quality , while consuming the same computation time . finally , for the special instances transformed from the qap instances , tps - v0 yields slightly better results than the two other variants , without a significant statistical difference , in terms of both solution quality and runtime .",
    "this experiment clearly confirms the importance of the diversified perturbation operator to the proposed algorithm , especially for solving conventional qmstp instances .",
    "we have originally proposed a three - phase heuristic algorithm named tps for the _ quadratic minimum spanning tree problem ( qmstp ) _ , which could be used to model a number of network designing problems .",
    "tps consists of a descent - based neighborhood search phase for local optimization , a local optima exploring phase for intensive search in a given regional search space , a diversified perturbation phase for jumping out of the current regional search space .",
    "tps integrates a fast evaluation technique to avoid useless computations .",
    "an extensive experimental comparison on all the available benchmarks shows that tps produces highly competitive results with respect to the state - of - the - art heuristics .",
    "for the 630 conventional qmstp instances , tps succeeds in discovering improved best known solutions for 31 challenging instances , while for almost all ( only with two exceptions ) the remaining instances , tps matches the best known results , with a reasonable computational time . in particular , for all the 29 special instances transformed from the qap problem , tps can unexceptionally reach the optimal solutions within a short time , while the previous best qmstp algorithm can only solve 12 out of these 29 instances to optimality with much more computing times .",
    "furthermore , we analyze the influences of several important ingredients of the proposed algorithm .",
    "experimental results based on a subset of selected most challenging instances show that : ( 1 ) the fast examination technique used in the first search phase is able to identify and discard a large number of useless moves , and thus contributes significantly to the efficiency of the proposed algorithm .",
    "( 2 ) the directed perturbation operators used in the second search phase are extremely important to the search process , specifically , the swap - edge based directed perturbation operator is suitable for the conventional qmstp instances , while the swap - vertex based directed perturbation operator is particularly important for the special instances transformed from the qap instances .",
    "( 3 ) the diversified perturbation operator plays an important role to the proposed algorithm , especially for solving the conventional qmstp instances .",
    "the work is partially supported by the pays de la loire region within the radapop ( 2009 - 2013 ) and ligero ( 2010 - 2014 ) projects , and the pgmo project ( 2013 - 2015 ) .",
    "sincere thanks to dr .",
    "roberto cordone for kindly making their instances available and answering our questions .",
    "buchheim , c. , & klein , l. , 2013a .",
    "the spanning tree problem with one quadratic term . in : 12th cologne - twente workshop ( ctw2013 ) on graphs and combinatorial optimization , enschede , netherlands , p.31 - 34 .",
    "cordone , r. , & passeri , g. , 2008 .",
    "heuristic and exact algorithms for the quadratic minimum spanning tree problem . in : proceedings of the 7th cologne - twente ctw08 workshop on graphs and combinatorial optimization , gargnano , italy , p.168 - 171 .",
    "gao , j. , lu , m. , & li , l. , 2004 .",
    "chance - constrained programming for fuzzy quadratic minimum spanning tree problem . in : proceedings of the 2004 ieee international conference on fuzzy systems , piscataway , nj , ieee press , p. 983 - 987 .",
    "lozano , m. , glover , f. , garca - martnez c. , rodrguez , f.j .",
    ", & mart , r. , 2013 .",
    "tabu search with strategic oscillation for the quadratic minimum spanning tree .",
    "iie transactions ( doi : 10.1080/0740817x.2013.768785 ) .",
    "pereira , d. l. , gendreau , m. , & cunha , a. s. d. , 2013 .",
    "stronger lower bounds for the quadratic minimum spanning tree problem with adjacency costs .",
    "electronic notes in discrete mathematics , 41 , 229 - 236 ."
  ],
  "abstract_text": [
    "<S> given an undirected graph with costs associated with each edge as well as each pair of edges , the _ quadratic minimum spanning tree problem ( qmstp ) _ consists of determining a spanning tree of minimum total cost . </S>",
    "<S> this problem can be used to model many real - life network design applications , in which both routing and interference costs should be considered . for this problem </S>",
    "<S> , we propose a three - phase search approach named tps , which integrates 1 ) a descent - based neighborhood search phase using two different move operators to reach a local optimum from a given starting solution , 2 ) a local optima exploring phase to discover nearby local optima within a given regional search area , and 3 ) a perturbation - based diversification phase to jump out of the current regional search area . </S>",
    "<S> additionally , we introduce dedicated techniques to reduce the neighborhood to explore and streamline the neighborhood evaluations . </S>",
    "<S> computational experiments based on hundreds of representative benchmarks show that tps produces highly competitive results with respect to the best performing approaches in the literature by improving the best known results for 31 instances and matching the best known results for the remaining instances only except two cases . </S>",
    "<S> critical elements of the proposed algorithms are analyzed .    </S>",
    "<S> _ keywords _ : minimum spanning tree problems ; network design ; neighborhood search ; multiple perturbations . </S>"
  ]
}