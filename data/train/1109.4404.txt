{
  "article_text": [
    "in two recent papers , a denial of service ( dos ) attack has been discussed that exploits a vulnerability of current content delivery networks ( cdns ) @xcite .",
    "cdns are commonly believed to offer their customers protection against application - level dos attacks @xcite .",
    "in fact , it is well known that , due to its vast resources , a cdn can absorb typical dos attacks without causing any noticeable effect to users .",
    "however , authors of @xcite have found an attack where the presence of a cdn actually amplifies the attack against a customer web site .",
    "a cdn is composed of several _ edge servers _ that are utilized to answer users requests .",
    "usually , a request to a web site ( _ origin server _ ) employing cdn technologies is invisibly routed to these other nodes that maintain replicated contents geographically distributed across the cdn . upon a request routed to an edge server , if it does not have the content , which might be a large file , it retrieves it from the origin server where the web site is hosted .",
    "then , it passes that resource to the user .",
    "from that moment , the edge server maintains a copy of the resource ; this way , subsequent requests for that content might be successfully completed without retrieving again that resource from the origin server .",
    "this operation mode allows to distribute the workload and protects the origin server from being swamped with requests .    according to @xcite ,",
    "the basic problem is that based on the current implementation of cdns , edge servers are not allowed to manage `` query strings '' .",
    "a query string is a string that is appended to the url the client is targeting ; these strings are usually employed to communicate parameters to the server during some http request .",
    "now , since edge servers do not contain any logic related to the web site , but they simply maintain replicated resources to distribute the load , when they receive some http request with a random query string which is added to a url , they treat such a request as new and pass it on to the origin server .",
    "the problem is that if the origin server is not expecting a query string , it removes it from the http request and supplies the file .",
    "summing up , if an attacker asks an edge server for a resource and appends to that request a random query string , the edge server will request such a resource to the origin server in turn , even if it already has it . for this request",
    ", the origin server sends such a resource to the edge server .",
    "this way , an attacker can force an edge server to retrieve a copy of a large file from the origin server several times . not only",
    ", it has been noticed that if the attacker cancels the connection immediately after requesting the resource , that resource transmission from the origin server to the edge server continues anyway .",
    "a dos attack can thus be implemented as follows @xcite .",
    "the attacker can retrieve a list of edge servers and send http requests ( with random query strings appended to such requests ) to a large number of edge servers from a single machine .",
    "for each single request , the connection can be canceled after a while ; hence , each single request requires little computing power .",
    "such random query string dos attack is directed towards the origin server , that spends a lot of its work and its bandwidth to send such resources to several , distinct edge servers .",
    "it is shown that a single attack can have a long - lasting effect on the origin server .    to cope with it ,",
    "approaches such as data mining would at most enable to understand that an attack has been done to a server , ex - post .",
    "some mitigation schemes are outlined in @xcite , that nevertheless do not solve completely the problem .",
    "for instance , to protect against the random query string vulnerability , a content provider can setup its cdn service so that only urls without query strings are accelerated by the cdn .",
    "however , this limits the flexibility of the cdn . in response to the identification of such a threat of cdns",
    ", it seems that no modifications are going to be accomplished @xcite .    to prevent the attacker from hiding behind a cdn ,",
    "the edge server can pass the client s ip address to the origin server any time it forwards a request to the origin .",
    "this can be done by adding an optional http header into the request . of course , the attacker can still attempt to hide by coming through its own intermediaries , such as a botnet , or public web proxies @xcite .    in this work ,",
    "we propose a simple strategy to face this attack .",
    "the idea is to resort to a simple gossip protocol among edge servers ( and the origin server ) .",
    "every time a request with a false query string is received by the origin server from an edge server , the origin server answers by sending the requested resource , as usual .",
    "however , it informs the edge server ( via some additional information ) that the query string was a false one .",
    "of course , such information does not mean that the user is a malicious node , the request might be malformed for a number of other reasons . in any case , the edge server transmits an alert of an such erroneous request to other edge servers , via a gossip algorithm . this way , edge servers can become aware of a random query string dos attack , if more edge servers notice that an high number of erroneous query string requests have been generated for a particular origin site . upon detection of the attack",
    ", appropriate schemes may be adopted to solve the problem .",
    "for instance , edge servers can stop sending requests containing appended query strings to the origin server .",
    "we provide some simulation results that confirm that such a simple approach can be adopted to detect a random query string dos attack , by just adding such a gossip algorithm between servers , without altering the basic behavior of the origin site and edge servers .",
    "a final remark is related to the use of cdns within clouds , and in general to the integration between these two worlds @xcite .",
    "these types of attacks may represent a possible threat for cloud technologies , where the allocation of the number of nodes ( e.g.  edge servers ) is optimized based on the traffic and the workload the service is subject to .",
    "our solution can be viably exploited also within these kinds of architectures .",
    "the remainder of the paper is organized as follows .",
    "section [ sec : attack ] outlines the random query string dos attack .",
    "section [ sec : alg ] presents the approach proposed in this work to cope with it .",
    "section [ sec : exp ] describes the simulation scenario and obtained results .",
    "finally , section [ sec : conc ] provides some concluding remarks .",
    "figure [ fig : attack ] shows how the random query string qos attack works . for",
    "a detailed discussion the reader may refer to @xcite .",
    "first , the attacker needs to collect the addresses of edge servers @xmath0 ; there are several mechanisms to obtain their ip addresses @xcite .",
    "then , it starts to make http requests for some resources belonging to the origin server @xmath1 to edge servers ; it appends random query strings to such requests , so that each @xmath0 will ask @xmath1 to provide it the resource . after a while",
    ", the attacker can cancel the http request by closing the connection with @xmath0 . for each received request",
    ", @xmath1 will send the requested resource to the corresponding @xmath0 nevertheless .    in the figure ,",
    "requests from the attacker to the edge servers and requests from the edge servers to the origin server are depicted as horizontal lines , differently to resource transmissions from the origin server , to stress the fact that requests are lightweight , almost instantaneous messages , while file transmissions can take a while to be completed .",
    "this clearly wastes computational and communication resources of the origin server , and may cause a dos .",
    "the target of a random query string dos attack is the origin server .",
    "in fact , nodes in the cdn ( edge servers ) are exploited by the attacker to create a burst of requests towards it .",
    "there are several problems concerned with mechanisms that simply try to detect such an attack at the origin server .",
    "for instance , one might try to determine the attacker by looking at the source of the request .",
    "however , the attacker may resort to mechanisms to vary the ip address , or it can hide behind some public proxy .",
    "another problem is that the attacker may change the file requested through edge servers ; hence the origin server should look at all incoming requests .",
    "this implies an high computational load for the control .",
    "summing up , the origin server can not do much by itself .    on the other hand , to tackle the problem it is probably better to avoid some complicated coordination scheme that involves all the edge servers for each request .",
    "in fact , this could easily slow down the edge servers responsiveness and strongly impact the effectiveness and the general performance of the cdn .    in this sense ,",
    "the use of gossip algorithms could be of help @xcite .",
    "indeed , it has been recognized that gossip schemes can easily spread information through networks . in this section ,",
    "we propose a scheme that employs a gossip algorithm among edge servers to detect a random query string dos attack .",
    "the scheme requires a simple extension at the origin and edge server and works as follows .",
    "any time the origin server @xmath1 receives a request with a false query string from an edge server @xmath0 ( as made during the attack ) , @xmath1 replies as usual by discarding the invalid query string and sending the resource .",
    "but in addition , @xmath1 alerts @xmath0 that the query string was invalid . such an additional information can be included as an option within the http message containing the resource , or it might be included in a different message as well .",
    "upon reception of the alert from the origin server @xmath1 , the edge server @xmath0 gossips it to other edge servers , including other alerts ( if any ) it received previously from @xmath1 or from other edge servers .",
    "this allows edge servers to understand if more that an edge server has received a false query string directed to the same origin server @xmath1 .",
    "if so , then maybe @xmath1 is under a random query string dos attack .",
    "it is worth mentioning that the reception of an erroneous query string does not implies that the origin server is under attack .",
    "such kinds of requests can be received for a variety of reasons , including human errors and incorrect implementations of external mashups that exploit some kind of web resources coming from the origin server .",
    "these external factors should not affect the behavior of the origin server and false positive detections must be avoided .",
    "thus , the identification of a possible attack should happen only after a `` sufficient '' number of occurrences .",
    "then , appropriate counter - measures can be employed such as , for instance , alerting ( through a broadcast ) all edge servers , which from that moment will process only http requests without any appended query strings .",
    "a central point of the approach is to quantify the `` sufficient '' number of alerts to suspect that an origin server is under a random query string dos attack .",
    "considering the percentage of erroneous requests over the total number of requests on a given time interval probably does not represent an appropriate choice , since such metric would take into consideration the popularity of the web service hosted on the origin server .",
    "instead , we employ the following simple heuristics .",
    "each edge server collects all the alert messages coming from the origin server or from the gossip protocol executed among edge servers in the cdn .",
    "this number is divided by the number @xmath2 of edge servers .",
    "when this value exceeds a given threshold , then a random query string dos attack is suspected .",
    "such a measure is an estimation of the number of erroneous query string received per edge server during a time interval @xmath3 .",
    "an erroneous query string is assumed to be a rare event ; hence a non - negligible value of these received requests , when considered globally , for the whole cdn , may clearly indicate a possible attack .",
    "@xmath4 chooseprobability ( )    _ msg _ = collect all suspected activities towards @xmath1 during @xmath3 send(_msg_,@xmath5 )    reception of an alert timeout idle status @xmath1",
    "= select the origin server to control gossip(@xmath1 )    the gossip protocol is shown in algorithm [ alg : simple ] @xcite .",
    "it is a very simple push dissemination scheme that exploits a constant probability to spread information .",
    "the term `` push '' means that nodes decide to send information to other ones via independent and local decisions . differently to pull based schemes , no direct requests are performed by receivers . in substance ,",
    "when an alert must be propagated , the edge server @xmath0 randomly selects the receivers using a probability value @xmath6 .",
    "in particular , each edge server @xmath7 is gossiped based on a probability determined by @xmath8 . on average ,",
    "the alert is thus propagated from @xmath0 to @xmath9 edge servers , if @xmath2 is the number of edge servers in the cdn .",
    "a dos attack is accomplished during a limited time interval , since the goal is to overflow the origin server with a huge number of requests that should waste all the origin server s resources and saturate its network bandwidth .",
    "this claims for a rapid detection of a random query string dos attack . for this reason ,",
    "each edge server sends gossip messages to others not only after a reception of an alert from an origin server , but also periodically .",
    "the origin server @xmath1 to consider is determined based on the source of the received alert message ( if any has been received ) , or randomly chosen among those for which an alert message has been received previously .",
    "then , @xmath0 executes the gossip ( ) procedure to disseminate information related to @xmath1 .",
    "another consequence , which is concerned with such a sudden spike in the requests to the origin server , is that the activity of edge servers can be monitored taking into consideration limited time intervals .",
    "for this reason , edge servers exchange suspected activities monitored during a moving time window @xmath3 .",
    "this reduces the amount of data to be managed , processed and exchanged among edge servers .",
    "gossip messages are thus limited in size and the control procedure executed at edge servers requires limited computational efforts .",
    "in this section , we report on a simulation we performed to assess whether the approach is able to detect random query string dos attacks , when varying the configuration of a cdn , and to assess if the scheme is subject to false positives .",
    "we developed our own simulator to assess the proposed scheme .",
    "it was a discrete - event simulator written in c code ; pseudo - random number generation was performed by employing the gnu scientific library @xcite .",
    "the simulator allows to test the behavior of a given amount of edge servers for a settable number of time steps .",
    "the attacker is simulated as a random process that sends random query strings to some of the edge servers during the simulation .",
    "such a query is transformed into a resource request , and in turn into an alert generated by the origin server to the edge server .",
    "the simulator allows also to simulate non - malicious requests containing erroneous query strings towards some edge servers .",
    "also these requests are generated by a random process ( whose generation probability can be varied ) .",
    "the behavior of edge servers in the cdn was implemented as detailed in the previous section . in particular",
    ", the simulator allows to vary all the parameters related to the protocol , such as the dissemination probability @xmath10 for gossiping messages , the threshold for suspecting that an origin server is under attack and the size of the time window employed to consider the aggregate of received alerts .",
    "we performed a time - stepped simulation of duration @xmath11 steps .",
    "we varied the size of the moving time window .",
    "we varied the probability of generation of a novel random query string request by the attacker to a given edge server @xmath12 from @xmath13 up to @xmath14 , while keeping the probability of a honest erroneous query string at a constant lower value ( when not differently stated , its value is set equal to @xmath15 ) .    in the following charts we show outlines when the probability of gossip @xmath16 among edge servers was set equal to @xmath17 .",
    "we varied such value up to @xmath18 obtaining very similar results .",
    "another varied parameter is the size of the time window exploited to include alerts within gossip messages .",
    "we varied such value from @xmath19 up to @xmath20 .",
    "also in this case , we did not noticed significant differences . in the following ,",
    "we show outcomes with a window size set equal to @xmath19 time steps ( a lower value might have some impact on results ) .",
    "a delicate aspect related to the success of the attack is concerned with the hardware configuration of the origin server , its computational capacity and network bandwidth , as well as the dimension of the resources requested by the edge servers to the origin server . due to the extreme variability of these parameters",
    ", we decided to not exploit these metrics as those which determine if the attack succeeded .",
    "rather , we exploited the already mentioned threshold to determine if the amount of received alerts at a given edge server enables to detect the attack .",
    "we varied the value set for such threshold from @xmath21 up to @xmath22 .",
    "as discussed in the previous sections , we assume that when the system is not under attack , an erroneous query string is a rare event .",
    "the value compared against the threshold is an estimation of alerts received on average by each edge server during the considered time interval .",
    "thus , given the typical number of edge servers @xmath2 in a cdn , the selected values represent non - negligible thresholds that might indicate an attack .    for each configuration setting ,",
    "we run a corpus of 15 different simulations using different seed numbers .",
    "results shown in the charts are obtained as the average of outcomes from the different simulation runs .",
    "the metrics we measured are mainly the number of steps needed by edge servers to detect that the origin server is under a random query string dos attack , and the percentage of detected attacks .",
    "figure [ fig : varia_es ] shows the results of four different configuration scenarios in which we varied the number of edge servers in the cdn .",
    "in particular , the four charts refer to a configuration with @xmath23 edge servers .",
    "each chart reports the average step of detection after the beginning of the attack ( red continuous line , y - axis on the left ) and the percentage of detected attacks ( green , dashed line , y - axis non the right ) . as shown in the charts , the higher @xmath12 ( i.e.  the stronger the attack to the origin server ) , the lower the number of steps required for detecting it and the higher the probability of detection .",
    "it is clear that with an increased number of edge servers , more steps of interaction among these nodes is required to detect an attack .",
    "moreover , in certain configurations the system is not able to detect all the attacks , when @xmath12 has a low value , as shown in the figure .",
    "figure [ fig : varia_thr ] shows the average detection step and percentage of detection obtained when the threshold employed to suspect a random query string dos attack was varied from @xmath21 to @xmath22 . in this cases , the number of edge servers was set equal to @xmath24 and the probability of gossip among edge servers was @xmath17 .",
    "charts show that , as expected , the tuning of this parameter influences the outcomes of the distributed scheme .",
    "in fact , we have very similar results when such parameter is kept below @xmath14 ; above it , results change and it becomes more difficult to detect an attack , mostly when a low probability of gossip @xmath16 is employed among edge servers .",
    "it is worth mentioning that when we simulate the system not being under attack , but with possible generation of non - malicious erroneous query string requests , the system does not detect any dos .",
    "in particular , we varied the rate of generation of such erroneous requests using a probability of a novel generation at each step , for each edge server , varying from @xmath15 up to @xmath25 , with @xmath26 and varying all other parameters as in the scenarios mentioned above . in this case , the cdn would behave normally .",
    "this paper presented a scheme that may be effectively employed to mitigate random query string dos attacks employed on cdns .",
    "the idea is to exploit a gossip protocol executed by edge servers to detect if some origin server is under attack .",
    "the distributed scheme is simple and does not require particular efforts for the coordination among edge servers .",
    "outcomes from simulations showed the viability of the proposed approach .",
    "further investigation may be devoted to understand if these kinds of dos attacks can be led to cloud architectures , since these novel technologies may exploit cdns ( or similar solutions ) to store and manage web resources .",
    "b.  ager , w.  mhlbauer , g.  smaragdakis , and s.  uhlig .",
    "comparing dns resolvers in the wild . in _ proceedings of the 10th annual conference on internet measurement _ , imc 10 , pages 1521 , new york , ny , usa , 2010 .",
    "g.  dangelo and s.  ferretti .",
    "simulation of scale - free networks . in _",
    "simutools 09 : proc .  of the 2nd international conference on simulation tools and techniques _ ,",
    "pages 110 , icst , brussels , belgium , 2009 .",
    "g.  dangelo , s.  ferretti , and m.  marzolla .",
    "adaptive event dissemination for peer - to - peer multiplayer online games . in _ proceedings of the international workshop on distributed simulation and online gaming ( disio 2011 ) - icst conference on simulation tools and techniques ( simutools 2011 ) _ , pages 18 , icst , brussels , belgium , 2011 . icst .",
    "i.  poese , b.  frank , b.  ager , g.  smaragdakis , and a.  feldmann .",
    "improving content delivery using provider - aided distance information .",
    "in _ proceedings of the 10th annual conference on internet measurement _ , imc 10 , pages 2234 , new york , ny , usa , 2010 .",
    "s.  triukose , z.  al - qudah , and m.  rabinovich .",
    "content delivery networks : protection or threat ? in _ proceedings of the 14th european conference on research in computer security _ , esorics09 , pages 371389 , berlin , heidelberg , 2009 .",
    "springer - verlag ."
  ],
  "abstract_text": [
    "<S> this paper presents a mitigation scheme to cope with the random query string denial of service ( dos ) attack , which is based on a vulnerability of current content delivery networks ( cdns ) . </S>",
    "<S> the attack exploits the fact that edge servers composing a cdn , receiving an http request for a resource with an appended random query string never saw before , ask the origin server for a ( novel ) copy of the resource . such characteristics can be employed to take an attack against the origin server by exploiting edge servers . </S>",
    "<S> our strategy adopts a simple gossip protocol executed by edge servers to detect the attack . </S>",
    "<S> based on such a detection , countermeasures can be taken to protect the origin server and the cdn against the attack . </S>",
    "<S> we provide simulation results that show the viability of our approach . </S>"
  ]
}