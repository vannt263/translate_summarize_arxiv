{
  "article_text": [
    "efficient algorithms for linear transformations , such as the fast fourier transform of cooley and tukey  @xcite and yates algorithm  @xcite , are fundamental tools both in computing theory and in practical applications .",
    "therefore it is surprising that some arguably elementary transformations have apparently not been investigated from an algorithmic perspective .",
    "this paper contributes by studying an `` intersection transform '' of functions defined on subsets of a ground set . in precise terms , let @xmath5 be a finite set with @xmath0 elements ( the ground set ) , let @xmath6 be a ring , and denote by @xmath7 the set of all subsets of @xmath5 .",
    "the _ intersection transform _ maps a function @xmath8 to the function @xmath9 , defined for all @xmath10 and @xmath11 by @xmath12    our interest here is in particular to restrict ( or `` trim '' ) the domains of the input @xmath13 and the output @xmath14 from @xmath7 to given subsets of @xmath7 .    for a subset @xmath15 ,",
    "denote by @xmath16 the _ down - closure _ of @xmath17 , that is , the family of sets consisting of all the sets in @xmath17 and their subsets .",
    "the notation @xmath4 in what follows suppresses a factor polynomial in @xmath0 .",
    "the following theorem states our main result .",
    "[ thm : fast - intersection - transform ] there exists an algorithm that , given @xmath15 and @xmath18 as input , in time @xmath19 constructs an @xmath6-arithmetic circuit with input gates for @xmath20 and output gates that evaluate to @xmath21 .",
    "this result supplies yet another tool aimed at the resolution of a long - standing open problem , namely that of improving upon the classical ( early 1960s ) dynamic programming algorithm for the travelling salesman problem ( tsp ) . with an @xmath22 running time for an instance with @xmath0 cities , the classical algorithm , due to bellman  @xcite , and , independently , held and",
    "karp  @xcite , remains the fastest known exact algorithm for the tsp .",
    "moreover , progress has been equally stuck at @xmath22 even if one considers the more restricted hamiltonian path ( hp ) and the hamiltonian cycle ( hc ) problems .",
    "armed with theorem  [ thm : fast - intersection - transform ] , we show that the @xmath22 bound can be broken in a _ counting _ context , assuming one cares only for _ long _ paths or cycles , as opposed to the _ spanning _ paths or cycles required by the tsp / hp / hc .",
    "( see  [ sect : earlier ] for a contrast with earlier work . )",
    "denote by @xmath23 the binary entropy function @xmath24    [ thm : long - simple - walks ] there exists an algorithm that , given as input    * a directed graph @xmath25 with @xmath0 vertices and bounded integer weights at the edges , * two vertices , @xmath26 and @xmath27 , and * a length @xmath28 ,    counts , by total weight , the number of paths of length @xmath29 from @xmath26 to @xmath27 in @xmath25 in time @xmath30    for example , theorem  [ thm : long - simple - walks ] implies that we can count in @xmath31 time with length @xmath32 and in @xmath33 time with length @xmath34 .",
    "for length @xmath35 the bound reduces to the classical bound @xmath22 .    we observe that counting implies , by self - reducibility , that we can construct examples of the paths within the same time bound .",
    "similarly , we can count cycles of a given length within the same bound . however , the efficient listing ( in the form of vertex supports , weights , and ends @xmath36 ) of all the paths for any length @xmath37 appears not to be possible with present tools in @xmath38 time for @xmath39 independent of @xmath0 . indeed ,",
    "if it were possible , we would obtain the breakthrough @xmath38 algorithm for generic tsp by starting the classical algorithm from the output of the listing algorithm .",
    "we expect theorem  [ thm : fast - intersection - transform ] to have applications beyond theorem  [ thm : long - simple - walks ] ; for example , in the context of subset query problems discussed by charikar , indyk , and panigrahy  @xcite .    given @xmath15 and @xmath18 as input , we can count in @xmath19 time for each @xmath40 the number of @xmath41 that intersect @xmath42 in a given number of points ; in particular , for each @xmath42 we can count the number of disjoint @xmath43 .    by duality of disjointness and set inclusion , we can thus count in @xmath44 time for each @xmath40 the number of @xmath41 with @xmath45 . here",
    "@xmath46 denotes the _ up - closure _ of @xmath47 , that is , the family of sets consisting of all the sets in @xmath47 and their supersets in @xmath7 .",
    "theorem  [ thm : fast - intersection - transform ] has its roots in yates algorithm  @xcite for evaluating the product of a vector with the @xmath48 kronecker power of a @xmath49 matrix . while yates algorithm is essentially optimal , running in @xmath22 ring operations given an input vector with @xmath50 entries , in certain cases the evaluation",
    "can be `` trimmed '' , assuming one requires only sporadic entries of the output vector .",
    "in particular , the present authors have observed @xcite that the zeta and moebius transforms on @xmath7 are amenable to trimming ( see lemma  [ lem : fzt ] below for a precise statement ) .",
    "the proof of theorem  [ thm : fast - intersection - transform ] relies on a trimmed concatenation of two `` dual '' zeta transforms , one that depends on supersets of a set ( the `` up '' transform ) , and one that depends on subsets of a set ( the `` down '' transform ) . to provide a rough intuition , we first use the up - zeta transform to drive information about @xmath13 on @xmath17 `` down '' to @xmath16",
    ". then we use a `` ranked ''  @xcite down - zeta transform to assemble information `` up '' from @xmath51 to @xmath47 .",
    "finally , we extract the intersection transform from the information gathered at each @xmath40 .",
    "this essentially amounts to solving a fixed system of @xmath6-linear equations at each @xmath40 .",
    "this proof strategy yet again highlights a basic theme : the use of fast linear transformations to distribute and assemble information across a domain ( e.g. time , frequency , subset lattice ) so that `` local '' computations in the domain ( e.g. pointwise multiplication , solving local systems of linear equations ) alternated with transforms enable the extraction of a desired result ( e.g. convolution , intersection transform ) . compared with earlier works such as @xcite ,",
    "the present approach establishes the serendipity of the up / down dual transforms and introduces the `` linear equation trick '' into the toolbox of local computations .",
    "once theorem  [ thm : fast - intersection - transform ] is available , theorem  [ thm : long - simple - walks ] stems from the observation that a path can be decomposed into two paths , each having half the length of the original path , with exactly one vertex in common .",
    "theorem  [ thm : fast - intersection - transform ] then enables us to `` glue halves '' in @xmath17 and @xmath47 , where @xmath16 and @xmath51 consist of sets of size at most @xmath52 .",
    "this prompts the observation that theorem  [ thm : fast - intersection - transform ] is useful only when the bound @xmath19 improves upon the trivial bound @xmath53 obtained by a direct iteration over all pairs @xmath54 .    we know at least one alternative way of proving theorem  [ thm : long - simple - walks ] , without using theorem  [ thm : fast - intersection - transform ] . indeed ,",
    "assuming knowledge of trimming  @xcite , one can use an algorithm of kennes  @xcite to evaluate a sum @xmath55 for given @xmath20 and @xmath56 in @xmath19 ring operations ( take the trimmed up - zeta transform of @xmath13 and @xmath57 , take pointwise product of transforms , take the trimmed up - moebius transform , and sum over all @xmath58-subsets in @xmath59 ) .",
    "this enables one to evaluate the right - hand side of below in time , thus giving an alternative proof of theorem  [ thm : long - simple - walks ] .",
    "to contrast kennes algorithm with theorem  [ thm : fast - intersection - transform ] , kennes algorithm computes for each @xmath60 the sum over pairs @xmath54 with @xmath61 , whereas computes , for each @xmath40 the sum over @xmath41 with @xmath62 .",
    "thus , kennes algorithm provides control over the intersection @xmath63 but lacks control over the pairs @xmath64 , whereas provides control over @xmath42 but lacks control over the intersection ( except for size ) .    as regards the tsp / hp / hc",
    ", earlier work on exact exponential - time algorithms can be divided roughly into three lines of study .",
    "( for a broader treatment of tsp / hp / hc and exact exponential - time algorithms , we refer to @xcite , and @xcite , respectively . )",
    "one line of study has been to restrict the input graph , whereby a natural restriction is to place an upper bound @xmath65 on the degrees of the vertices .",
    "eppstein  @xcite has developed an algorithm that runs in time @xmath66 for @xmath67 and in time @xmath68 for @xmath69 .",
    "iwama and nakashima @xcite have improved the @xmath67 case to @xmath70 , and gebauer  @xcite the @xmath69 case to @xmath71 .",
    "the present authors established @xcite an @xmath38 bound for all @xmath65 , with @xmath39 depending on @xmath65 but not on @xmath0 .",
    "a second line of study has been to ease the space requirements of the algorithms from exponential to polynomial in @xmath0 .",
    "karp  @xcite and , independently , kohn , gottlieb , and kohn  @xcite have shown that tsp with bounded integer weights can be solved in time @xmath22 and space polynomial in @xmath0 .",
    "combined with restrictions on the graph , one can arrive at running times @xmath72 and polynomial space @xcite .",
    "a third line of study relaxes the requirement on spanning paths / cycles to `` long '' paths / cycles . in this",
    "setting , a simple backtrack algorithm finds a path of length @xmath29 in time @xmath73 .",
    "monien  @xcite observed that this can be expedited to @xmath74 time by a dynamic programming approach .",
    "alon , yuster , and zwick  @xcite introduced a seminal colour - coding procedure and improved the running time to @xmath75 expected and @xmath76 deterministic time , @xmath77 a large constant .",
    "subsequently , combining colour - coding ideas with a divide - and - conquer approach , chen , lu , sze , and zhang  @xcite , and , independently , kneis , mlle , richter , and rossmanith  @xcite , developed algorithms with @xmath78 expected and @xmath79 deterministic time .",
    "a completely different approach was taken by koutis  @xcite , who presented an @xmath80 expected time algorithm relying on a randomised technique for detecting whether a given @xmath0-variate polynomial , represented as an arithmetic circuit with only sum and product gates , has a square - free monomial of degree @xmath29 with an odd coefficient .",
    "recently , williams  @xcite extended koutis technique and obtained an @xmath81 expected time algorithm .",
    "to contrast with theorem  [ thm : long - simple - walks ] , while the @xmath81 bound of the koutis ",
    "williams  @xcite algorithm is superior to the bound in theorem  [ thm : long - simple - walks ] , it is not immediate whether the koutis ",
    "williams approach extends to counting problems .",
    "furthermore , it appears challenging to derandomise the koutis ",
    "williams algorithm without increasing the running time ( see  @xcite ) , whereas the algorithm in theorem  [ thm : long - simple - walks ] is deterministic .",
    "for a logical proposition @xmath82 , we use iverson s bracket notation @xmath83 $ ] to denote a @xmath84 if @xmath82 is true , and a @xmath85 if @xmath82 is false .",
    "let @xmath15 and @xmath20 .",
    "define the _ up - zeta transform _",
    "@xmath86 for all @xmath11 by @xmath87    define the _ down - zeta transform _",
    "@xmath88 for all @xmath11 by @xmath89    the following lemma condenses the essential properties of the `` trimmed '' fast zeta transform @xcite .",
    "[ lem : fzt ] there exist algorithms that construct , given @xmath15 and @xmath18 as input , an @xmath6-arithmetic circuit with input gates for @xmath20 and output gates that evaluate to    1 .",
    "@xmath90 , with construction time @xmath91 ; 2 .",
    "@xmath90 , with construction time @xmath92 ; 3 .",
    "@xmath93 , with construction time @xmath94 ; and 4 .",
    "@xmath93 , with construction time @xmath95 .",
    "we work with the standard extension of the binomial coefficients to arbitrary integers ( see graham , knuth , and patashnik  @xcite ) . for integers @xmath96 and @xmath97 , we let @xmath98    the following lemma is folklore , but we recall a proof here for convenience of exposition .    [ lem : ab ] the integer matrices @xmath99 and @xmath100 with entries @xmath101 are mutual inverses .",
    "let us first consider the @xmath102-entry of @xmath103 : @xmath104 . \\end{split}\\ ] ] here the second equality follows by observing that @xmath105 implies @xmath106 for all @xmath107 ; similarly , @xmath108 implies @xmath109 for all @xmath110 .",
    "the third equality follows from an application of the identity @xmath111 , valid for all integers @xmath112 ( see ( * ? ? ?",
    "* equation 5.21 ) ) .",
    "the last equality follows from an application of the binomial theorem .",
    "the analysis for the @xmath102-entry of @xmath113 is similar : @xmath114 . \\end{split}\\ ] ]    it follows from lemma  [ lem : ab ] that the matrices @xmath99 and @xmath100 are mutual inverses over an arbitrary ring @xmath6 , where the entries of the matrices are understood to be embedded into @xmath6 via the natural ring homomorphism @xmath115 , where @xmath116 is the multiplicative identity element of @xmath6 , and @xmath117 is an integer .",
    "we first describe the algorithm and then prove its correctness . all arithmetic in the evaluations , and all derivations in subsequent proofs , are carried out in the ring @xmath6 .",
    "let @xmath15 and @xmath18 be given as input to the algorithm .",
    "the circuit is a sequence of three `` modules '' starting at the input gates for @xmath20 .    _",
    "@xmath84 .  up - transform .",
    "_ evaluate the up - zeta transform @xmath118 with a circuit of size @xmath119 using lemma  [ lem : fzt](1 ) .",
    "observe that implies that all nonzero values of @xmath86 are in @xmath16 .    _",
    "@xmath120 .",
    "down - transform by rank .",
    "_ for each @xmath121 , evaluate @xmath122 , the component of @xmath57 with rank @xmath123 , on @xmath16 ; that is , for all @xmath124 , set @xmath125 then , for each @xmath121 , evaluate @xmath126 with a circuit of size @xmath19 using lemma  [ lem : fzt](3 ) .    _",
    "@xmath127 .",
    "recover the intersection transform .",
    "_ let @xmath128 be the matrix in lemma  [ lem : ab ] with entries embedded to @xmath6 .",
    "associate with each @xmath40 the column vector @xmath129 for each @xmath40 , evaluate the column vector @xmath130 as the matrix  vector product @xmath131 because the matrix @xmath128 is fixed , this can be implemented with @xmath132 fixed @xmath6-arithmetic gates .",
    "the circuit thus consists of @xmath19 @xmath6-arithmetic gates .",
    "it remains to show that the circuit actually evaluates the intersection transform of @xmath13 .    for all @xmath40 and @xmath10",
    "it holds that @xmath133 .",
    "let @xmath40 and @xmath121 .",
    "consider the following derivation : @xmath134 here the first equality expands the definitions , , , , and .",
    "the second equality follows by changing the order of summation and observing that @xmath135 if and only if both @xmath136 and @xmath137 .",
    "the fourth equality follows by collecting the terms with @xmath62 together .",
    "the last equality follows from and .",
    "now let @xmath10 , and observe that , , and lemma  [ lem : ab ] imply @xmath138_r\\,f\\iota_k(y ) \\\\ & = f\\iota_j(y ) .",
    "\\end{split}\\ ] ]",
    "let @xmath25 be an @xmath0-vertex digraph with vertex set @xmath139 and edge set @xmath140 , possibly with loops and parallel edges .",
    "( however , to avoid further technicalities in the bound , we assume that the number of edges in @xmath25 is bounded from above by a polynomial in @xmath0 . ) associated with each edge @xmath141 is a _",
    "weight _ @xmath142 . for an edge @xmath141 ,",
    "denote by @xmath143 ( respectively , @xmath144 ) the start vertex ( respectively , the end vertex ) of @xmath145 .",
    "it is convenient to work with the terminology of walks instead of paths .",
    "a _ walk _ of _ length _",
    "@xmath29 in @xmath25 is a tuple @xmath146 such that @xmath147 , @xmath148 , and , for each @xmath149 , it holds that @xmath150 and @xmath151 .",
    "the walk @xmath152 is said to be _ from _ @xmath153 _ to _ @xmath154 .    a walk is _ simple _ if @xmath155 are distinct vertices .",
    "the set of distinct vertices occurring in a walk is the _ support _ of the walk .",
    "we denote the support of a walk @xmath152 by @xmath156 .",
    "the _ weight _ of a walk @xmath152 is the sum of the weights of the edges in the walk ; a walk with no edges has zero weight .",
    "we write @xmath157 for the weight of @xmath152 .",
    "let @xmath117 be a polynomial indeterminate , and define an associated polynomial generating function by @xmath164 put otherwise , the coefficient of each monomial @xmath165 of @xmath166 enumerates the simple walks from @xmath26 to @xmath27 with support @xmath161 and weight @xmath167 .      for @xmath28 , define a polynomial generating function by @xmath171 put otherwise , the coefficient of each monomial @xmath165 of @xmath172 enumerates the simple walks from @xmath26 to @xmath27 with length @xmath29 and weight @xmath167 .          to compute @xmath172 ,",
    "proceed as follows .",
    "first observe that the generating polynomials can be computed by the following recursion on subsets of @xmath139 .",
    "the singleton sets @xmath176 , @xmath177 , form the base case of the recursion : @xmath178 the recursive step is defined for all @xmath158 and @xmath159 , @xmath179 , by @xmath180    now , using and , evaluate @xmath181 for each @xmath182 .",
    "then , using and again , evaluate @xmath183 next , using the algorithm in theorem  [ thm : fast - intersection - transform ] with @xmath184 and @xmath185 , evaluate @xmath186 finally , evaluate the right - hand side of @xmath187 by direct summation .      to justify the equality in , consider the following derivation : @xmath189 here the first two equalities expand , , , , and .",
    "the third equality follows by observing that @xmath190 and @xmath191 are both nonempty only if @xmath192 and @xmath193 .",
    "thus , @xmath194 implies that only terms with @xmath195 appear in the sum .",
    "the fourth equality is justified as follows .",
    "first observe that an arbitrary walk @xmath152 of length @xmath29 from @xmath26 to @xmath27 has the property that there exists a @xmath196 with @xmath197 if and only if the walk is simple .",
    "moreover , a simple walk @xmath152 of length @xmath29 from @xmath26 to @xmath27 has a bijective decomposition @xmath198 into two simple subwalks , @xmath199 and @xmath200 , with @xmath201 for some @xmath182 .",
    "indeed , @xmath199 is the length-@xmath202 prefix of @xmath152 from @xmath26 to some @xmath182 , and @xmath200 is the length-@xmath203 suffix of @xmath152 from @xmath204 to @xmath27 .",
    "conversely , prepend @xmath199 to @xmath200 , deleting one occurrence of @xmath204 in the process , to get @xmath152 .",
    "the fifth equality follows from and .",
    "because @xmath100 is fixed , all the ring operations are carried out on polynomials of degree at most @xmath205 . moreover , denoting by @xmath206 the number of edges in @xmath25 , the coefficients in the polynomials are integers bounded in absolute value by @xmath207 , where @xmath208 is an upper bound for the coefficients in and , and @xmath209 is an upper bound for the expansion in intermediate values in the transforms .",
    "( both bounds are far from tight . ) recalling that we assume that @xmath206 is bounded from above by a polynomial in @xmath0 , we have that the coefficients can be represented using a number of bits that is bounded from above by a polynomial in @xmath0 .",
    "it follows that each ring operation runs in time bounded from above by a polynomial in @xmath0 .    to conclude that the algorithm runs within the claimed upper bound , combine with the observation that for every @xmath210 it holds that @xmath211 where @xmath23 is the binary entropy function .",
    "( for a proof of , see jukna  @xcite . )",
    "a.  bjrklund , t.  husfeldt , p.  kaski , m.  koivisto , trimmed moebius inversion and graphs of bounded degree , 25th international symposium on theoretical aspects of computer science ( stacs 2008 ) , dagstuhl seminar proceedings 08001 , ibfi schloss dagstuhl , 2008 , pp .",
    "a.  bjrklund , t.  husfeldt , p.  kaski , m.  koivisto , the travelling salesman problem in bounded degree graphs , 35th international colloquium on automata , languages and programming ( icalp 2008 ) , part i , lncs  5125 , springer , 2008 , pp .",
    "198-209 .",
    "m.  charikar , p.  indyk , r.  panigrahy , new algorithms for subset query , partial match , orthogonal range searching , and related problems , 29th international colloquium on automata , languages and programming ( icalp 2002 ) , part i , lncs  2380 , springer , 2002 , pp ."
  ],
  "abstract_text": [
    "<S> we present an algorithm for evaluating a linear `` intersection transform '' of a function defined on the lattice of subsets of an @xmath0-element set . in particular </S>",
    "<S> , the algorithm constructs an arithmetic circuit for evaluating the transform in `` down - closure time '' relative to the support of the function and the evaluation domain . as an application </S>",
    "<S> , we develop an algorithm that , given as input a digraph with @xmath0 vertices and bounded integer weights at the edges , counts paths by weight and given length @xmath1 in time @xmath2 , where @xmath3 , and the notation @xmath4 suppresses a factor polynomial in @xmath0 .        </S>",
    "<S> andreas bjrklund    thore husfeldt    petteri kaski </S>"
  ]
}