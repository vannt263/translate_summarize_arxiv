{
  "article_text": [
    "iterative rounding and relaxation have arguably become the method of choice in dealing with unconstrained and constrained network design problems . starting with jain s elegant _ iterative rounding _",
    "scheme for the generalized steiner network problem in @xcite , an extension of this technique ( iterative _ relaxation _ ) has more recently lead to breakthrough results in the area of constrained network design , where a number of linear constraints are added to a classical network design problem .",
    "such constraints arise naturally in a wide variety of practical applications , and model limitations in processing power , bandwidth or budget .",
    "the design of powerful techniques to deal with these problems is therefore an important goal .",
    "the most widely studied constrained network design problem is the _ minimum - cost degree - bounded spanning tree _ problem . in an instance of this problem ,",
    "we are given an undirected graph , non - negative costs for the edges , and positive , integral degree - bounds for each of the nodes .",
    "the problem is easily seen to be @xmath0-hard , even in the absence of edge - costs , since finding a spanning tree with maximum degree two is equivalent to finding a hamiltonian path .",
    "a variety of techniques have been applied to this problem @xcite , culminating in singh and lau s breakthrough result in @xcite .",
    "they presented an algorithm that computes a spanning tree of at most optimum cost whose degree at each vertex @xmath1 exceeds its bound by at most @xmath2 , using the _ iterative relaxation _ framework developed in  @xcite .",
    "the iterative relaxation technique has been applied to several constrained network design problems : spanning tree  @xcite , survivable network design  @xcite , directed graphs with intersecting and crossing super - modular connectivity  @xcite .",
    "it has also been applied to degree bounded versions of matroids and submodular flow  @xcite .    in this paper",
    "we further extend the applicability of iterative relaxation , and obtain new or improved bicriteria approximation results for minimum crossing spanning tree ( mcst ) , crossing contra - polymatroid intersection , and crossing lattice polyhedra .",
    "we also provide some hardness results and integrality gaps for these problems",
    ".    * notation .",
    "* as is usual , when dealing with an undirected graph @xmath3 , for any @xmath4 we let @xmath5 .",
    "when the graph is clear from context , the subscript is dropped .",
    "a collection @xmath6 of vertex - sets is called _ laminar _",
    "if for every pair @xmath7 in this collection , we have @xmath8 , @xmath9 , or @xmath10 . a @xmath11 approximation for minimum cost degree bounded problems refers to a solution that ( 1 ) has cost at most @xmath12 times the optimum that satisfies the degree bounds , and ( 2 ) satisfies the relaxed degree constraints in which a bound @xmath13 is replaced with a bound @xmath14 .",
    "[ [ laminar - mcst . ] ] laminar mcst .",
    "+ + + + + + + + + + + + +    our main result is for a natural generalization of bounded - degree mst ( called laminar minimum crossing spanning tree or _",
    "laminar mcst _ ) , where we are given an edge - weighted undirected graph with a laminar family @xmath15 of vertex - sets having bounds @xmath16 ; and the goal is to compute a spanning tree of minimum cost that contains at most @xmath17 edges from @xmath18 for each @xmath19 $ ] .",
    "the motivation behind this problem is in designing a network where there is a hierarchy ( i.e. laminar family ) of service providers that control nodes ( i.e. vertices ) .",
    "the number of edges crossing the boundary of any service provider ( i.e. its vertex - cut ) represents some cost to this provider , and is therefore limited .",
    "the laminar mcst problem precisely models the question of connecting all nodes in the network while satisfying bounds imposed by all the service providers .    from a theoretical viewpoint ,",
    "cut systems induced by laminar families are well studied , and are known to display rich structure .",
    "for example , _ one - way cut - incidence matrices _ are matrices whose rows are incidence vectors of directed cuts induced by the vertex - sets of a laminar family ; it is well known ( e.g. , see @xcite ) that such matrices are totally unimodular . using the laminar structure of degree - constraints and the iterative relaxation framework , we obtain the following main result , and present its proof in section [ sec : cpt ] .    [ thm : lam ] there is a polynomial time @xmath20 bicriteria approximation algorithm for laminar mcst .",
    "that is , the cost is no more than the optimum cost and the degree violation is at most additive @xmath21 .",
    "this guarantee is relative to the natural lp relaxation .",
    "this guarantee is substantially stronger than what follows from known results for the general _",
    "minimum crossing spanning tree _ ( mcst )",
    "problem : where the degree bounds could be on arbitrary edge - subsets @xmath22 .",
    "in particular , for general mcst a @xmath23  @xcite is known where @xmath24 is the maximum number of degree - bounds an edge appears in . however , this guarantee is not useful for laminar mcst as @xmath24 can be as large as @xmath25 in this case .",
    "if a multiplicative factor in the degree violation is allowed , chekuri et al .",
    "@xcite recently gave a very elegant @xmath26 guarantee ( which subsumes the previous best @xmath27  @xcite result ) .",
    "however , these results also can not be used to obtain a small additive violation , especially if @xmath13 is large . in particular , both the results @xcite for general mcst are based on the natural lp relaxation , for which there is an integrality gap of @xmath28 even without regard to costs and when @xmath29  @xcite . on the other hand ,",
    "theorem  [ thm : lam ] shows that a purely additive @xmath21 guarantee on degree ( relative to the lp relaxation and even in presence of costs ) is indeed achievable for mcst , when the degree - bounds arise from a laminar cut - family .    the algorithm in theorem  [ thm : lam ]",
    "is based on iterative relaxation and uses two main new ideas .",
    "firstly , we drop a carefully chosen _ constant fraction of degree - constraints _ in each iteration .",
    "this is crucial as it can be shown that dropping one constraint at a time as in the usual applications of iterative relaxation can indeed lead to a degree violation of @xmath30 .",
    "secondly , the algorithm does not just drop degree constraints , but in some iterations it also _ generates new degree constraints _ , by merging existing degree constraints .",
    "all previous applications of iterative relaxation to constrained network design treat connectivity and degree constraints rather asymmetrically .",
    "while the structure of the connectivity constraints of the underlying lp is used crucially ( e.g. , in the ubiquitous uncrossing argument ) , the handling of degree constraints is remarkably simple .",
    "constraints are dropped one by one , and the final performance of the algorithm is good only if the number of side constraints is small ( e.g. , in recent work by grandoni et al .",
    "@xcite ) , or if their structure is simple ( e.g. , if the ` frequency ' of each element is small ) .",
    "in contrast , our algorithm for laminar mcst exploits the structure of degree constraints in a non - trivial manner .",
    "[ [ hardness - results . ] ] hardness results .",
    "+ + + + + + + + + + + + + + + + +    we obtain the following hardness of approximation for the _ general mcst _ problem ( and its matroid counterpart ) . in particular",
    "this rules out any algorithm for mcst that has additive constant degree violation , even without regard to costs .",
    "[ th : mcst - hard ] unless  has quasi - polynomial time algorithms , the mcst problem admits no polynomial time @xmath31 additive approximation for the degree bounds for some constant @xmath32 ; this holds even when there are no costs .    the proof for this theorem is given in section [ sec : hard ] , and uses a a two - step reduction from the well - known _ label cover _ problem .",
    "first , we show hardness for a _ uniform _ matroid instance . in a second step ,",
    "we then demonstrate how this implies the result for mcst claimed in theorem [ th : mcst - hard ] .",
    "note that our hardness bound nearly matches the result obtained by chekuri et al . in @xcite .",
    "we note however that in terms of _ purely _ additive degree guarantees , a large gap remains .",
    "as noted above , there is a much stronger lower bound of @xmath28 for lp - based algorithms  @xcite ( even without regard to costs ) , which is based on discrepancy . in light of the small number of known hardness results for discrepancy type problems ,",
    "it is unclear how our bounds for mcst could be strengthened .",
    "[ [ degree - bounds - in - more - general - settings . ] ] degree bounds in more general settings .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we consider crossing versions of other classic combinatorial optimization problems , namely _ contra - polymatroid intersection _ and _ lattice polyhedra _",
    "@xcite .",
    "[ def.boundedpolymatroidintersection ] let @xmath33 be two supermodular functions , @xmath34 and @xmath35 be a collection of subsets of @xmath36 with corresponding bounds @xmath37 .",
    "then the goal is to minimize : @xmath38    in particular , this definition captures the degree - bounded version of spanning - set intersection in two matroids ( for eg .",
    "bipartite edge - cover _ problem ) .",
    "we note that this definition does not capture alternate notions of matroid intersection , such as intersection of bases in two matroids ; hence it does not apply to the degree - bounded arborescence problem .",
    "let @xmath39 \\mid e \\in e_i\\}|$ ] be the largest number of sets @xmath40 that any element of @xmath36 belongs to , and refer to it as _",
    "frequency_.    [ t.matroidintersection ] any optimal basic solution @xmath41 of the linear relaxation of the minimum crossing contra - polymatroid intersection problem can be rounded into an integral solution @xmath42 such that : @xmath43    the algorithm for this theorem again uses iterative relaxation , and its proof is based on a ` fractional token ' counting argument similar to the one used in  @xcite .",
    "we also observe that the natural iterative relaxation steps are insufficient to obtain a better approximation guarantee . +",
    "* crossing lattice polyhedra .",
    "* classical _ lattice polyhedra _ form a unified framework for various discrete optimization problems and go back to hoffman and schwartz  @xcite who proved their integrality .",
    "they are polyhedra of type @xmath44^e\\mid x(\\rho(s))\\ge r(s),\\quad \\forall s\\in \\mathcal{f}\\}\\ ] ] where @xmath45 is a _ consecutive submodular _ lattice , @xmath46 is a mapping from @xmath45 to subsets of the ground - set @xmath36 , and @xmath47 is supermodular .",
    "a key property of lattice polyhedra is that the uncrossing technique can be applied which turns out to be crucial in almost all iterative relaxation approaches for optimization problems with degree bounds .",
    "we refer the reader to @xcite for a more comprehensive treatment of this subject .",
    "we generalize our work further to _ crossing lattice polyhedra _ which arise from classical lattice polyhedra by adding  degree - constraints \" of the form @xmath48 for a given collection @xmath49 and lower and upper bounds @xmath50 .",
    "we can show that the standard lp relaxation for the general crossing lattice polyhedron problem is weak ; in section [ sec : lph - gap ] we give instances of crossing planar min - cut ( i.e. , example  2 above ) where the lp - relaxation is feasible , but any integral solution violates some degree - bound by @xmath51 .",
    "for this reason , we henceforth focus on a restricted class of crossing lattice polyhedra in which the underlying lattice @xmath52 satisfies the following monotonicity property    @xmath53    we obtain the following theorem whose proof is given in    [ t.boundedlatticepolyhedra ] for any instance of the crossing lattice polyhedron problem in which @xmath45 satisfies property @xmath54 , there exists an algorithm that computes an integral solution of cost at most the optimal , where all rank constraints are satisfied , and each degree bound is violated by at most an additive @xmath55 .    we note that the above property @xmath54 is satisfied for matroids , and hence theorem  [ t.boundedlatticepolyhedra ] matches the previously best - known bound  @xcite for degree bounded matroids ( with both upper / lower bounds ) .",
    "also note that property @xmath54 holds whenever @xmath45 is ordered by inclusion . in this special case",
    ", we can improve the result to an additive @xmath56 approximation if only upper bounds are given .      as mentioned earlier ,",
    "the basic bounded - degree mst problem has been extensively studied  @xcite .",
    "the iterative relaxation technique for degree - constrained problems was developed in  @xcite .",
    "mcst was first introduced by bilo et al .",
    "@xcite , who presented a randomized - rounding algorithm that computes a tree of cost @xmath21 times the optimum where each degree constraint is violated by a multiplicative @xmath21 factor and an additive @xmath57 term .",
    "subsequently , bansal et al .",
    "@xcite gave an algorithm that attains an optimal cost guarantee and an additive @xmath56 guarantee on degree ; recall that @xmath24 is the maximum number of degree constraints that an edge lies in .",
    "this algorithm used iterative relaxation as its main tool .",
    "recently , chekuri et al .",
    "@xcite obtained an improved @xmath58 approximation algorithm for mcst , for any @xmath59 ; this algorithm is based on pipage rounding .",
    "the minimum crossing matroid basis problem was introduced in  @xcite , where the authors used iterative relaxation to obtain ( 1 ) @xmath23-approximation when there are only upper bounds on degree , and ( 2 ) @xmath60-approximation in the presence of both upper and lowed degree - bounds .",
    "the  @xcite result also holds in this matroid setting .",
    "@xcite also considered a degree - bounded version of the _ submodular flow _ problem and gave a @xmath61 approximation guarantee .",
    "the bounded - degree arborescence problem was considered in lau et al .",
    "@xcite , where a @xmath62 approximation guarantee was obtained .",
    "subsequently bansal et al .",
    "@xcite designed an algorithm that for any @xmath63 , achieves a @xmath64 approximation guarantee .",
    "they also showed that this guarantee is the best one can hope for via the natural lp relaxation ( for every @xmath65 ) . in the absence of edge - costs ,",
    "@xcite gave an algorithm that violates degree bounds by at most an additive two .",
    "recently nutov  @xcite studied the arborescence problem under _ weighted _ degree constraints , and gave a @xmath66 approximation for it .",
    "lattice polyhedra were first investigated by hoffman and schwartz  @xcite and the natural lp relaxation was shown to be totally dual integral .",
    "even though greedy - type algorithms are known for all examples mentioned earlier , so far no combinatorial algorithm has been found for lattice polyhedra in general .",
    "two - phase greedy algorithms have been established only in cases where an underlying rank function satisfies a monotonicity property  @xcite ,  @xcite .",
    "in this section we prove theorem  [ thm : lam ] by presenting an iterative relaxation - based algorithm with the stated performance guarantee . during its execution ,",
    "the algorithm selects and deletes edges , and it modifies the given laminar family of degree bounds .",
    "a generic iteration starts with a subset @xmath67 of edges already picked in the solution , a subset @xmath36 of _ undecided _ edges , i.e. , the edges not yet picked or dropped from the solution , a laminar family @xmath68 on @xmath69 , and residual degree bounds @xmath70 for each @xmath71 .    the laminar family @xmath68 has a natural forest - like structure with _ nodes _ corresponding to each element of @xmath68 .",
    "a node @xmath71 is called the _",
    "parent _ of node @xmath72 if @xmath73 is the inclusion - wise minimal set in @xmath74 that contains @xmath75 ; and @xmath75 is called a _ child _ of @xmath73 .",
    "node @xmath76 is called a _ grandchild _ of node @xmath71 if @xmath73 is the parent of @xmath77 s parent .",
    "nodes @xmath78 are _ siblings _ if they have the same parent node .",
    "a node that has no parent is called _",
    "root_. the _ level _ of any node @xmath71 is the length of the path in this forest from @xmath73 to the root of its tree .",
    "we also maintain a _ linear ordering _ of the children of each @xmath68-node .",
    "a subset @xmath79 is called _ consecutive _ if all nodes in @xmath80 are siblings ( with parent @xmath73 ) and they appear consecutively in the ordering of @xmath73 s children . in any iteration @xmath81",
    ", the algorithm solves the following lp relaxation of the residual problem .",
    "@xmath82    for any vertex - subset @xmath83 and edge - set @xmath84 , we let @xmath85 denote the edges induced on @xmath86 ; and @xmath87 the set of edges crossing @xmath86 .",
    "the first two sets of constraints are spanning tree constraints while the third set corresponds to the degree bounds .",
    "let @xmath88 denote an optimal _ extreme point solution _ to this lp . by reducing degree bounds",
    "@xmath70 , if needed , we assume that _ @xmath88 satisfies all degree bounds at equality _ ( the degree bounds may therefore be fractional - valued ) .",
    "let @xmath89 .",
    "an edge @xmath90 is said to be _ local _ for @xmath71 if @xmath91 has at least one end - point in @xmath73 but is neither in @xmath92 nor in @xmath93 for any grandchild @xmath75 of @xmath73 .",
    "let @xmath94 denote the set of local edges for @xmath73 .",
    "a node @xmath71 is said to be _ good _ if @xmath95 .    ]",
    "figure  [ fig : local - edges ] shows a set @xmath73 , its children @xmath96 and @xmath97 , and grand - children @xmath98 ; edges in @xmath94 are drawn solid , non - local ones are shown dashed .",
    "initially , @xmath36 is the set of edges in the given graph , @xmath99 , @xmath68 is the original laminar family of vertex sets for which there are degree bounds , and an arbitrary linear ordering is chosen on the children of each node in @xmath100 . in a generic iteration @xmath81 ,",
    "the algorithm performs one of the following steps ( see also figure  [ fig : mcst - iter ] ) :    1 .",
    "if @xmath101 for some edge @xmath90 then @xmath102 , @xmath103 , and set @xmath104 for all @xmath71 with @xmath105 .",
    "2 .   if @xmath106 for some edge @xmath90 then @xmath107 .",
    "* dropn : * suppose there at least @xmath108 good non - leaf nodes in @xmath68",
    ". then either odd - levels or even - levels contain a set @xmath109 of @xmath110 good non - leaf nodes .",
    "drop the degree bounds of all _ children _ of @xmath111 and modify @xmath68 accordingly .",
    "the ordering of siblings also extends naturally .",
    "* dropl : * suppose there are more than @xmath108 good leaf nodes in @xmath68 , denoted by @xmath112",
    ". then partition @xmath112 into parts corresponding to siblings in @xmath68 . for any part @xmath113 @xmath114 consisting of ordered ( not necessarily contiguous ) children of some node @xmath73 : 1 .",
    "define @xmath115 for all @xmath116 ( if @xmath117 is odd @xmath118 is not used ) .",
    "2 .   modify @xmath68 by removing leaves @xmath119 and adding new leaf - nodes @xmath120 @xmath121 as children of @xmath73 ( if @xmath117 is odd @xmath118 is removed ) .",
    "the children of @xmath73 in the new laminar family are ordered as follows : each node @xmath122 takes the position of either @xmath123 or @xmath124 , and other children of @xmath73 are unaffected .",
    "3 .   set the degree bound of each @xmath122 to @xmath125 .",
    "examples of the degree constraint modifications dropn and dropl . ]    assuming that one of the above steps applies at each iteration , the algorithm terminates when @xmath126 and outputs the final set @xmath67 as a solution .",
    "it is clear that the algorithm outputs a spanning tree of @xmath127 .",
    "an inductive argument ( see e.g.  @xcite ) can be used to show that the lp   is feasible at each each iteration and @xmath128 where @xmath129 is the original lp value , @xmath130 is the current lp value , and @xmath67 is the chosen edge - set at the current iteration .",
    "thus the cost of the final solution is at most the initial lp optimum @xmath129 .",
    "next we show that one of the four iterative steps always applies .    in each iteration ,",
    "one of the four steps above applies .",
    "let @xmath41 be the optimal basic solution of , and suppose that the first two steps do not apply .",
    "hence , we have @xmath131 for all @xmath132 .",
    "the fact that @xmath41 is a basic solution together with a standard uncrossing argument ( e.g. , see @xcite ) implies that @xmath41 is uniquely defined by @xmath133 where @xmath134 is a laminar subset of the tight spanning tree constraints , and @xmath135 is a subset of tight degree constraints , and where @xmath136 .",
    "a simple counting argument ( see , e.g. ,  @xcite ) shows that there are at least @xmath137 edges induced on each @xmath138 that are not induced on any of its children ; so @xmath139 .",
    "thus we obtain @xmath140 .    from the definition of local edges",
    ", we get that any edge @xmath141 is local to at most the following six sets : the smallest set @xmath142 containing @xmath143 , the smallest set @xmath144 containing @xmath1 , the parents @xmath145 and @xmath146 of @xmath147 and @xmath148 resp . , the least - common - ancestor @xmath149 of @xmath145 and @xmath146 , and the parent of @xmath149 . thus @xmath150 .",
    "from the above , we conclude that @xmath151",
    ". thus at least @xmath152 sets @xmath71 must have @xmath153 , i.e. , must be good . now either at least @xmath108 of them must be non - leaves or at least @xmath108 of them must be leaves . in the first case , step 3 holds and in the second case , step 4 holds .",
    "it remains to bound the violation in the degree constraints , which turns out to be rather challenging .",
    "we note that this is unlike usual applications of iterative rounding / relaxation , where the harder part is in showing that one of the iterative steps applies .",
    "it is clear that the algorithm reduces the size of @xmath68 by at least @xmath110 in each dropn or dropl iteration .",
    "since the initial number of degree constraints is at most @xmath154 , we get the following lemma .",
    "[ lem : mcst - iter - num ] the number of drop iterations ( dropn and dropl ) is @xmath155 .    * performance guarantee for degree constraints . *",
    "we begin with some notation .",
    "the iterations of the algorithm are broken into periods between successive drop iterations : there are exactly @xmath156 drop - iterations ( lemma  [ lem : mcst - iter - num ] ) . in",
    "what follows , the @xmath157-th drop iteration is called _ round _ @xmath157 .",
    "time @xmath157 _ refers to the instant just after round @xmath157 ; time @xmath158 refers to the start of the algorithm . at any time @xmath157 , consider the following parameters .",
    "* @xmath159 denotes the laminar family of degree constraints . *",
    "@xmath160 denotes the undecided edge set , i.e. , support of the current lp optimal solution . * for any set @xmath80 of _ consecutive siblings _ in @xmath159 , @xmath161 equals the sum of the residual degree bounds on nodes of @xmath80 . * for any set @xmath80 of _ consecutive siblings _ in @xmath159 , @xmath162 equals the number of edges from @xmath163 included in the final solution .",
    "recall that @xmath13 denotes the _ residual _ degree bounds at any point in the algorithm .",
    "the following lemma is the main ingredient in bounding the degree violation .",
    "[ l : key ] for any set @xmath80 of consecutive siblings in @xmath159 ( at any time @xmath157 ) , @xmath164 .",
    "observe that this implies the desired bound on each original degree constraint @xmath73 : using @xmath165 and @xmath166 , the violation is bounded by an additive @xmath167 term .",
    "+    the proof of this lemma is by induction on @xmath168 .",
    "the base case @xmath169 is trivial since the only iterations after this correspond to including 1-edges : hence there is no violation in _ any _ degree bound , i.e. @xmath170 for all @xmath171 .",
    "hence for _ any _ @xmath172 , @xmath173 .",
    "now suppose @xmath174 , and assume the lemma for @xmath175 .",
    "fix a consecutive @xmath176 .",
    "we consider different cases depending on what kind of drop occurs in round @xmath175 . +",
    "* dropn round . * here either all nodes in @xmath80 get dropped or none gets dropped .",
    "case 1 : _ none of @xmath80 is dropped . _ then observe that @xmath80 is consecutive in @xmath177 as well ; so the inductive hypothesis implies @xmath178 .",
    "since the only iterations between round @xmath157 and round @xmath175 involve edge - fixing , we have @xmath179 .",
    "case 2 : _ all of @xmath80 is dropped .",
    "_ let @xmath180 denote the set of all children ( in @xmath159 ) of nodes in @xmath80 .",
    "note that @xmath180 consists of consecutive siblings in @xmath177 , and inductively @xmath181 .",
    "let @xmath182 denote the parent of the @xmath80-nodes ; so @xmath180 are grand - children of @xmath73 in @xmath159 .",
    "let @xmath88 denote the optimal lp solution _",
    "just before _ round @xmath175 ( when the degree bounds are still given by @xmath159 ) , and @xmath183 the support edges of @xmath88 .",
    "at that point , we have @xmath184 for all @xmath185 . also let @xmath186 be the sum of bounds on @xmath80-nodes just before round @xmath175 . since @xmath73 is a good node in round @xmath175 , @xmath187 .",
    "the last inequality follows since @xmath73 is good ; the factor of @xmath137 appears since some edges , e.g. , the edges between two children or two grandchildren of @xmath73 , may get counted twice .",
    "note also that the symmetric difference of @xmath188 and @xmath189 is contained in @xmath94 .",
    "thus @xmath188 and @xmath189 differ in at most @xmath190 edges .    again",
    "since all iterations between time @xmath157 and @xmath175 are edge - fixing : @xmath191 the first inequality above follows from simple counting ; the second follows since @xmath188 and @xmath189 differ in at most @xmath190 edges ; the third is the induction hypothesis , and the fourth is @xmath192 ( as shown above ) .",
    "* dropl round . * in this case , let @xmath73 be the parent of @xmath80-nodes in @xmath159 , and @xmath193 be all the ordered children of @xmath73 , of which @xmath80 is a subsequence ( since it is consecutive ) .",
    "suppose indices @xmath194 correspond to good leaf - nodes in @xmath112 .",
    "then for each @xmath195 , nodes @xmath196 and @xmath197 are merged in this round .",
    "let @xmath198 ( possibly empty ) denote the indices of good leaf - nodes in @xmath80 .",
    "then it is clear that the only nodes of @xmath80 that may be merged with nodes outside @xmath80 are @xmath199 and @xmath200 ; all other @xmath80-nodes are either not merged or merged with another @xmath80-node .",
    "let @xmath180 be the inclusion - wise minimal set of _ children of @xmath73 in @xmath177 _ s.t .",
    "* @xmath180 is consecutive in @xmath177 , * @xmath180 contains all nodes of @xmath201 , and * @xmath180 contains all new leaf nodes resulting from merging _ two good leaf nodes _ of @xmath80 .    note that @xmath202 consists of some subset of @xmath80 and at most two good leaf - nodes in @xmath203 . these two extra nodes ( if any ) are those merged with the good leaf - nodes @xmath199 and @xmath200 of @xmath80 .",
    "again let @xmath204 denote the sum of bounds on @xmath80 just before drop round @xmath175 , when degree constraints are @xmath159 .",
    "let @xmath183 be the undecided edges in round @xmath175 . by the definition of bounds on merged leaves , we have @xmath205 .",
    "the term @xmath206 is present due to the two extra good leaf - nodes described above .",
    "[ cl : leaf - drop ] we have @xmath207 .",
    "we say that @xmath208 is represented in @xmath180 if either @xmath209 or @xmath210 is contained in some node of @xmath180 .",
    "let @xmath211 be set of nodes of @xmath80 that are _ not _ represented in @xmath180 and the nodes of @xmath203 that are represented in @xmath180 .",
    "observe that by definition of @xmath180 , the set @xmath212 ; in fact it can be easily seen that @xmath213 .",
    "moreover @xmath211 consists of only good leaf nodes .",
    "thus , we have @xmath214 .",
    "now note that the edges in @xmath215 must be in @xmath216 .",
    "this completes the proof .    as in the previous case",
    ", we have : @xmath217    the first inequality follows from simple counting ; the second uses claim  [ cl : leaf - drop ] , the third is the induction hypothesis ( since @xmath180 is consecutive ) , and the fourth is @xmath192 ( from above ) .",
    "this completes the proof of the inductive step and hence lemma  [ l : key ] .",
    "the first step to proving this result is a hardness for the more general minimum crossing matroid basis problem : given a matroid @xmath111 on a ground set @xmath69 of elements , a cost function @xmath218 , and degree bounds specified by pairs @xmath219 ( where each @xmath220 and @xmath221 ) , find a minimum cost basis @xmath222 in @xmath111 such that @xmath223 for all @xmath224 $ ] .",
    "[ th : mat - hard ] unless  has quasi - polynomial time algorithms , the unweighted minimum crossing matroid basis problem admits no polynomial time @xmath225 additive approximation for the degree bounds for some fixed constant @xmath226 .",
    "we reduce from the label cover problem  @xcite .",
    "the input is a graph @xmath227 where the vertex set @xmath228 is partitioned into pieces @xmath229 each having size @xmath230 , and all edges in @xmath36 are between distinct pieces .",
    "we say that there is a _ superedge _ between @xmath231 and @xmath232 if there is an edge connecting some vertex in @xmath231 to some vertex in @xmath232 .",
    "let @xmath157 denote the total number of superedges ; i.e. ,        it is well known that there exists a universal constant @xmath235 such that for every @xmath236 , there is a reduction from any instance of sat ( having size @xmath210 ) to a label cover instance @xmath237 such that :    * if the sat instance is satisfiable , the label cover instance has optimal value @xmath157 . *",
    "if the sat instance is not satisfiable , the label cover instance has optimal value @xmath238 .",
    "* @xmath239 , @xmath240 , @xmath241 , and the reduction runs in time @xmath242 .",
    "we consider a uniform matroid @xmath111 with rank @xmath157 on ground set @xmath36 ( recall that any subset of @xmath157 edges is a basis in a uniform matroid ) .",
    "we now construct a crossing matroid basis instance @xmath243on @xmath111 .",
    "there is a set of degree bounds corresponding to each @xmath244 $ ] : for every collection @xmath75 of edges incident to vertices in @xmath231 such that no two edges in @xmath75 are incident to the same vertex in @xmath231 , there is a degree bound in @xmath243requiring _ at most one _ element to be chosen from @xmath75 .",
    "note that the number of degree bounds @xmath245 is at most @xmath246 .",
    "the following claim links the sat and crossing matroid instances .    _",
    "[ ] _ if the sat instance is satisfiable , there is a basis ( i.e. subset @xmath247 with @xmath248 ) satisfying all degree bounds .",
    "+ _ [ ] _ if the sat instance is unsatisfiable , every subset @xmath249 with @xmath250 violates some degree bound by an additive @xmath251 .",
    "the steps described in the above reduction can be done in time polynomial in @xmath245 and @xmath252 . also , instead of randomly choosing vertices from the sets @xmath253",
    ", we can use conditional expectations to derive a deterministic algorithm that recovers at least @xmath254 edges . setting @xmath255 ( recall that @xmath210 is the size of the original sat instance ) , we obtain an instance of bounded - degree matroid basis of size @xmath256 and @xmath257 , where @xmath258 are constants .",
    "note that @xmath259 , which implies @xmath260 for @xmath261 , a constant .",
    "thus it follows that for this constant @xmath226 the bounded - degree matroid basis problem has no polynomial time @xmath225 _ additive approximation _ for the degree bounds , unless  has quasi - polynomial time algorithms .",
    "we show how the bases of a uniform matroid can be represented in a suitable instance of the crossing spanning tree problem .",
    "let the uniform matroid from theorem  [ th : mat - hard ] consist of @xmath91 elements and have rank @xmath262 ; recall that @xmath263 and clearly @xmath264 .",
    "we construct a graph as in figure  [ fig : xsp - hard ] , with vertices @xmath265 corresponding to elements in the uniform matroid .",
    "each vertex @xmath266 is connected to the root @xmath267 by two vertex - disjoint paths : @xmath268 and @xmath269 .",
    "there are no costs in this instance .",
    "corresponding to each degree bound ( in the uniform matroid ) of @xmath270 on a subset @xmath271 $ ] , there is a constraint to pick at most @xmath272 edges from @xmath273 .",
    "additionally , there is a _ special degree bound _ of @xmath274 on the edge - set @xmath275 ; this corresponds to picking a basis in the uniform matroid .",
    "observe that for each @xmath276 $ ] , any spanning tree must choose exactly three edges amongst @xmath277 , in fact any three edges suffice .",
    "hence every spanning tree @xmath156 in this graph corresponds to a subset @xmath278 $ ] such that : ( i ) @xmath156 contains both edges in @xmath279 and one edge from @xmath280 , for each @xmath281 , and ( ii ) @xmath156 contains both edges in @xmath280 and one edge from @xmath279 for each @xmath282\\setminus x$ ] .",
    "there is a basis @xmath283 ( i.e. @xmath284 $ ] , @xmath285 ) satisfying all degree bounds .",
    "consider the spanning tree @xmath286\\setminus b^*\\}.\\ ] ] since @xmath283 satisfies its degree - bounds , @xmath287 satisfies all degree bounds derived from the crossing matroid instance . for the special degree bound on @xmath288 , note that @xmath289 ; so this is also satisfied .",
    "thus there is a spanning tree satisfying all the degree bounds .    every subset @xmath290 $ ] with @xmath250 ( i.e. near basis ) violates some degree bound by an additive @xmath291 term , where @xmath226 is a fixed constant .",
    "consider any spanning tree @xmath156 that corresponds to subset @xmath292 $ ] as described above .    1 .",
    "suppose that @xmath293 ; then we have @xmath294 , i.e. the special degree bound is violated by @xmath295 .",
    "2 .   now suppose that @xmath296 .",
    "then by the guarantee on the no - instance , @xmath156 violates some degree - bound derived from the crossing matroid instance by additive @xmath12 .",
    "k. chaudhuri , s. rao , s. riesenfeld , and k. talwar , _ a push - relabel approximation algorithm for approximating the minimum - degree mst problem and its generalization to matroids _ ,",
    "sci . , 2009 , 410(44 )",
    ", 4489 - 4503 ."
  ],
  "abstract_text": [
    "<S> iterative rounding and relaxation have arguably become the method of choice in dealing with unconstrained and constrained network design problems . in this paper </S>",
    "<S> we extend the scope of the iterative relaxation method in two directions : ( 1 ) by handling more complex degree constraints in the minimum spanning tree problem ( namely _ laminar _ crossing spanning tree ) , and ( 2 ) by incorporating ` degree bounds ' in other combinatorial optimization problems such as _ matroid intersection _ and _ lattice polyhedra_. we give new or improved approximation algorithms , hardness results , and integrality gaps for these problems . </S>"
  ]
}