{
  "article_text": [
    "a graph ( digraph ) @xmath0 with a distinguished subset @xmath3 of nodes is said to be _ inner eulerian _ if each node @xmath12 has even degree ( resp .",
    "the indegree and outdegree of @xmath2 are equal ) .",
    "the nodes in @xmath3 and in @xmath13 are called _ terminals _ and _ inner _ nodes , respectively . a simple path in @xmath4 is called a @xmath3-_path _ if its ends are distinct terminals and the other nodes are inner .",
    "there is a nice max - min relation established by cherkassky  @xcite and lovsz  @xcite for graphs , and by lomonosov  @xcite for digraphs :    if @xmath14 is inner eulerian , then the maximum number @xmath15 of pairwise edge - disjoint @xmath3-paths is equal to @xmath16 .",
    "[ eq : cll ]    here and later on , for a subset @xmath17 of nodes , @xmath18 denotes the set of edges with one end in @xmath17 and the other in @xmath19 , called the _ cut _ induced by @xmath17 . for @xmath20",
    ", we refer to a subset @xmath21 with @xmath22 as an @xmath7-_set_. then @xmath23 is defined to be the minimum cardinality @xmath24 among the @xmath7-sets @xmath17 .",
    "the above max - min relation has an obvious extension to the capacitated case .",
    "given a nonnegative integer function @xmath25 of edge _ capacities _ , let us say that the triple ( _ network _ ) @xmath26 is _ inner eulerian _ if for each inner node @xmath2 , the total capacity of edges incident with @xmath2 is even when @xmath4 is a graph , and the total capacity of edges entering @xmath2 is equal to that of edges leaving @xmath2 when @xmath4 is a digraph",
    ". then  ( [ eq : cll ] ) yields the following relation for an inner eulerian @xmath26 : @xmath27 where @xmath28 denotes the minimum cut capacity @xmath29 among the @xmath7-sets @xmath17 , the maximum is taken over all collections @xmath30 of @xmath3-paths",
    "@xmath31 along with nonnegative _ integer _",
    "weights @xmath32 that satisfy the packing condition @xmath33 and @xmath34 denotes the _ total value _ of @xmath30 , defined to be @xmath35 ) was stated for fractional multiflows @xmath30 in  @xcite , with a flaw in the proof . ] .",
    "( hereinafter for a function @xmath36 and a subset @xmath37 , @xmath38 stands for @xmath39 . )    a collection @xmath30 consisting of @xmath3-paths @xmath40 with real weights @xmath41 that obeys  ( [ eq : pack ] ) is called a _ free multiflow _ (",
    "the adjective `` free '' is used to emphasize that any pair of distinct terminals is allowed to be connected by a path , i.e. , the commodity graph in the multiflow maximization problem is complete ) .",
    "a multiflow achieving the equality in  ( [ eq : mm ] ) is called _",
    "maximum_. thus , whenever @xmath26 is inner eulerian , there exists an _",
    "integer _ maximum free multiflow ( i.e. , having the weights of all paths integral ) .",
    "cherkassky  @xcite showed that such a multiflow in an inner eulerian undirected network can be found in strongly polynomial time .",
    "subsequently much faster algorithms both for graphs and digraphs have been developed .",
    "they apply a `` divide - and - conquer '' approach in which a current network @xmath26 with @xmath42 is recursively replaced by two networks @xmath43 and @xmath44 such that @xmath45 .",
    "originally , such an approach was applied in  @xcite to find , in @xmath46 time , a _",
    "half - integer",
    "_ maximum multiflow in a graph @xmath4 with integer edge capacities ( but not guaranteeing integrality in the inner eulerian case ) .",
    "hereinafter , in notation involving functions of numerical arguments or time bounds , we indicate sets for their cardinalities , and @xmath47 stands for the complexity of an algorithm for finding a maximum flow in a network with @xmath48 nodes and @xmath49 edges .    this algorithm was improved and extended in  @xcite so as to find an integer maximum free multiflow in an inner eulerian undirected network in the same time @xmath46 , and in an inner eulerian directed network in @xmath50 time .    * remark 1 . *",
    "the inner eulerianness condition is important .",
    "withdrawing it makes the undirected problem more difficult , though still polynomially solvable in the noncapacitated case ( a max - min relation is due to mader  @xcite and an original polynomial algorithm is due to lovsz  @xcite ) , and makes the directed noncapacitated problem np - hard already for two terminals  @xcite .",
    "the purpose of this paper is to extend the above theoretical and algorithmic results to bidirected graphs .",
    "( this sort of nonstandard graphs was introduced by edmonds and johnson  @xcite in connection with one important class of integer linear programs generalizing problems on flows and matchings ; for a survey , see also  @xcite . )",
    "recall that in a _ bidirected _ graph @xmath0 three types of edges are allowed : ( i ) a usual directed edge , or an _ arc _ , that leaves one node and enters another one ; ( ii ) an edge _ from both _ of its ends ; or ( iii ) an edge _ to both _ of its ends . when @xmath51 , the edge becomes a loop",
    "; in what follows we admit only loops of types ( ii ) and ( iii ) ( as loops of type ( i ) do not affect our problem and can be excluded from consideration ) .",
    "a nonloop edge entering a node @xmath2 contributes one unit to the indegree @xmath52 of @xmath2 , while a loop of type ( iii ) at @xmath2 contributes two units to @xmath52 ; the outdegree @xmath53 of @xmath2 is specified in a similar way .",
    "edges @xmath54 connecting nodes @xmath55 are called _ parallel _ if @xmath56 enters @xmath57 if and only if @xmath58 does so , and similarly for @xmath2 . if @xmath4 has no parallel edges , then @xmath59 .",
    "an instance of bidirected graphs is drawn in fig .",
    "[ fig : bidir ] .",
    "the notion of inner eulerianness for a bidirected graph @xmath4 with a set @xmath3 of terminals is analogous to that for usual digraphs : @xmath60 for all inner nodes @xmath2 .",
    "inner eulerian triples @xmath26 , where @xmath25 , are those that turn into inner eulerian pairs @xmath61 when each edge @xmath56 is replaced by @xmath62 parallel edges .    in order to be able to extend the above results to bidirected graphs , we need to admit @xmath3-paths with restricted self - intersections .",
    "( in undirected or directed graphs , when one node is reachable from another one by a path , then it is reachable by a simple path as well , but this need not hold in a bidirected graph . ) a _ walk _ in a bidirected graph @xmath4 is an alternating sequence @xmath63 of nodes and edges such that each edge @xmath64 connects nodes @xmath65 and @xmath66 , and for @xmath67 , the edges @xmath68 form a _ transit pair _ at @xmath66 , which means that one of @xmath68 enters and the other leaves @xmath66 .",
    "note that @xmath69 may enter @xmath7 and @xmath70 may leave @xmath71 ; nevertheless , we refer to @xmath72 as a walk from @xmath7 to @xmath71 , or an @xmath7@xmath71 _",
    "walk_. @xmath72 is a _ cycle _ if @xmath73 and the pair @xmath74 is transit at @xmath75 ; a cycle is usually considered up to cyclically shifting .",
    "observe that an @xmath7@xmath7 walk is not necessarily a cycle . by a _ path _ in a bidirected graph @xmath4 we mean an _ edge - simple _",
    "walk @xmath72 , i.e. , a walk with all edges different .",
    "similar to usual graphs / digraphs , a @xmath3-path ( a @xmath3-walk ) is meant to be a path ( resp .",
    "walk ) whose ends are distinct terminals and the other nodes are inner .",
    "define the number @xmath23 for @xmath20 as before .",
    "we show the following    [ tm : main ] property ( [ eq : cll ] ) remains valid for a bidirected graph @xmath4 and the set of @xmath3-paths in it .",
    "* remark 2 . * in this theorem it suffices to consider only minimal @xmath3-paths , where a path ( edge - simple cycle ) @xmath76 is called _ minimal _ if no part of @xmath72 from @xmath66 to @xmath77 with @xmath78 ( resp .",
    "@xmath79 ) forms a cycle .",
    "( a minimal path / cycle need not be simple but it passes any node of @xmath4 at most twice . )",
    "moreover , one can consider only those @xmath3-paths whose induced bidirected graphs contain no cycle .",
    "( in the underlying undirected graph of such a path , each edge belongs to at most one circuit . )",
    "a usual digraph is a special case of bidirected graphs and theorem  [ tm : main ] generalizes the above - mentioned result in  @xcite .",
    "also there is a natural correspondence between the @xmath3-paths in an undirected graph @xmath4 and the minimal @xmath3-paths in the bidirected graph @xmath80 formed from @xmath4 as follows : direct each edge of @xmath4 from both of its ends , and for each inner node @xmath2 , assign @xmath81 loops entering ( twice ) @xmath2 .",
    "then a @xmath3-path @xmath72 in @xmath4 is turned into a @xmath3-path in @xmath80 by adding one loop to each intermediate node of @xmath72 .",
    "moreover , @xmath61 is inner eulerian if @xmath14 is such . due to this correspondence ,",
    "theorem  [ tm : main ] generalizes the above - mentioned cherkassky ",
    "lovsz result for undirected graphs as well .",
    "like the pure graph and digraph cases , one can reformulate theorem  [ tm : main ] in capacitated terms : relation  ( [ eq : mm ] ) concerning integer free multiflows @xmath30 remains valid when @xmath4 is bidirected and @xmath26 is inner eulerian . in this case one should consider @xmath3-walks , rather than @xmath3-paths , and refine the packing condition  ( [ eq : pack ] ) as @xmath82 where @xmath83 is the number of occurrences of an edge @xmath56 in a walk @xmath40 .",
    "thus , the above problem for undirected and directed networks is generalized as :    * _ given an inner eulerian network @xmath26 , where @xmath4 is bidirected , find a collection ( free multiflow ) @xmath30 of @xmath3-walks @xmath31 with weights @xmath84 that satisfies  ( [ eq : packbd ] ) and maximizes the value @xmath85 .",
    "_    * remark 3 .",
    "* let @xmath17 be an arbitrary subset of nodes of @xmath4 .",
    "one can modify @xmath4 as follows : for each node @xmath86 and each edge @xmath56 incident with @xmath2 , reverse the direction of @xmath56 at @xmath2 . also for an arbitrary arc @xmath56 incident with a terminal @xmath7 , one can reverse the direction of @xmath56 at @xmath7 .",
    "both transformations preserve the inner euleriannes of @xmath26 and the set of @xmath3-walks .",
    "therefore , problem  ( p ) remains equivalent under such transformations .",
    "another appealing class of nonstandard graphs was introduced by tutte  @xcite who originated a mini - theory , parallel to  @xcite in a sense , aiming to unify and generalize flow and matching problems .",
    "these are so - called _ skew - symmetric graphs _ ( or anti - symmetrical digraphs , in tutte s terminology ) , digraphs with involutions on the nodes and on the arcs which reverse the orientation of each arc ( a precise definition is given in section  [ sec : skew ] ) .",
    "his and other researchers study of structural and optimization problems on skew - symmetric graphs has resulted in a number of interesting theorems , methods and applications .    there is a close relationship between skew - symmetric and bidirected graphs , and typically results on the former can be reformulated for the latter , and vice versa .",
    "so is for the problem of our study , too .",
    "we take advantage from both representations .",
    "the language of bidirected graphs is more preferable for us to work in the non - capacitated case ; we prove theorem  [ tm : main ] directly and obtain its analog for skew - symmetric graphs as a corollary .",
    "on the other hand , we prefer to deal with skew - symmetric graphs in algorithmic design for the capacitated case .",
    "( a serious reason is that a flow in a bidirected network is defined as a packing of @xmath3-paths and we do not see reasonable alternative settings for it , while a flow in a skew - symmetric network can be given in a more compact form , via a function on the arc set . ) some facts about skew - symmetric flows and technical tools elaborated for them help us to devise a fast algorithm for the skew - symmetric analog of problem  ( p ) concerning _ integer skew - symmetric free multiflows _ in an inner eulerian skew - symmetric network .",
    "this yields a fast algorithm for  ( p ) as well .",
    "the paper is organized as follows . in section  [ sec : proof ] we prove theorem  [ tm : main ] ( which is relatively simple ) relying on the fact that an inner eulerian bidirected graph can be decomposed into cycles and paths with both ends in @xmath3 .",
    "section  [ sec : skew ] explains the correspondence between bidirected and skew - symmetric graphs , reviews some known results about the latter ( in particular , tutte s result on symmetric decompositions of skew - symmetric flows ) and gives a skew - symmetric analog of theorem  [ tm : main ] .",
    "section  [ sec : alg ] develops an algorithm for finding a maximum integer skew - symmetric free multiflow in an inner eulerian skew - symmetric network .",
    "it relies on a general approach in  @xcite and some ingredients from  @xcite and attracts additional combinatorial ideas and techniques . as a consequence ,",
    "problem  ( p ) is solved in time @xmath10 ( if the @xmath87-algorithm of goldberg and tarjan  @xcite is applied for finding a maximum flow in a directed network with @xmath48 nodes and @xmath49 arcs ) .",
    "this improves the bound in  @xcite for digraphs . to achieve this bound",
    ", we use a faster procedure for the particular flow decomposition problem : given an integer flow @xmath88 with @xmath11 sources and sinks in a digraph with @xmath48 nodes and @xmath49 arcs , decompose @xmath88 into the sum of integer flows , each connecting one source to one sink . the procedure developed in section  [ sec : decom ]",
    "solves this problem in @xmath89 time . in the concluding",
    "section  [ sec : sdecom ] , this procedure is extended to symmetric flows in skew - symmetric graphs ( it is not used in the algorithm for  ( p ) but may be of interest for other applications ) .",
    "let @xmath0 be an inner eulerian bidirected graph with a terminal set @xmath3 .",
    "one may assume that @xmath4 has no loops incident with terminals . since @xmath14 is inner eulerian , for each inner node @xmath2",
    ", one can choose a set @xmath90 of transit pairs at @xmath2 so that each non - loop edge incident with @xmath2 occurs in exactly one pair and each loop at @xmath2 ( if any ) occurs in two pairs .",
    "the collection @xmath91 determines a decomposition of ( the edge - set of ) @xmath4 into a collection @xmath92 of edge - simple cycles and a collection @xmath93 of paths with both ends at @xmath3 .",
    "more precisely , each edge @xmath94 belongs to exactly one member @xmath72 of @xmath95 and satisfies the following condition : for each end @xmath2 of @xmath56 , if @xmath12 and @xmath96 , then either @xmath97 or @xmath98 are three consecutive elements in @xmath72 , while if @xmath99 , then @xmath72 begins with @xmath100 or ends with @xmath101 .",
    "note that all nodes of any cycle in @xmath92 and all intermediate nodes of any path in @xmath93 are inner .",
    "so each path in @xmath93 is a @xmath3-path unless it connects equal terminals .",
    "when needed , we may reverse some paths in @xmath93 .    for @xmath20 ,",
    "let @xmath102 ( @xmath103 ) denote the set of paths in @xmath93 with exactly one end ( resp . with both ends ) at @xmath7 .",
    "since @xmath104 ( where @xmath105 is the full degree @xmath106 of @xmath2 ) , the theorem becomes trivial when all sets @xmath103 are empty . in a general case , we try to transform the decomposition so as to increase the `` useful value '' @xmath107 , by applying a certain augmenting approach .",
    "consider @xmath20 and assume , w.l.o.g . , that all paths in @xmath102 begin at @xmath7 .",
    "let @xmath108 be a sequence of distinct nodes such that    either @xmath109 , or @xmath110 belongs to a path in @xmath103 , and for @xmath111 , the nodes @xmath112 occur in a cycle in @xmath92 or occur in _ this order _ in a path in @xmath102 .",
    "[ eq : aug ]    we say that @xmath113 is augmenting if @xmath114 belongs to a path in @xmath93 having both ends in @xmath8 . consider two cases .    .",
    "there is no augmenting sequence for @xmath7 .",
    "let @xmath115 be the set of all nodes occurring in sequences @xmath113 as in  ( [ eq : aug ] )",
    ". clearly @xmath116 .",
    "consider an edge @xmath56 of the cut @xmath117 ; let @xmath55 be the ends of @xmath56 in @xmath115 and @xmath118 , respectively .",
    "observe that @xmath56 belongs to neither a cycle in @xmath92 nor a path in @xmath119 .",
    "also ( by  ( [ eq : aug ] ) ) if @xmath56 belongs to a path @xmath120 , then all nodes of @xmath72 from @xmath7 to ( the last occurrence of ) @xmath57 are contained in @xmath115 , i.e. , @xmath72 traverses the cut @xmath117 exactly once .",
    "this implies @xmath121 .",
    "hence , if none of terminals admits an augmenting sequence as above , then the number of @xmath3-paths in @xmath93 is at least @xmath16 , as required .",
    "an augmenting sequence @xmath108 for @xmath7 exists .",
    "let @xmath113 be chosen so that no proper subsequence in it is augmenting .",
    "then :    any cycle in @xmath92 meets at most two nodes in @xmath113 and these nodes are consecutive in @xmath113 ; [ eq : intc ]    if a path @xmath120 contains a node @xmath122 , then the part of @xmath72 from @xmath7 to ( the last occurrence of ) @xmath122 can contain at most one node @xmath123 with @xmath124 ; moreover , if such an @xmath123 exists then @xmath125 .",
    "[ eq : intp ]    we transform @xmath126 along @xmath113 , step by step , as follows .",
    "choose a @xmath127 containing @xmath110 .",
    "at the first step , if ( a ) @xmath128 belong to a cycle @xmath129 , then we combine @xmath130 and @xmath131 into one @xmath7@xmath7 path . and if ( b ) @xmath128 belong to a path @xmath120 from @xmath7 to @xmath71 , say , and if @xmath132 occurs in @xmath72 earlier than @xmath110 , then we replace @xmath130 by the concatenation of the part @xmath133 of @xmath72 from @xmath7 to ( the last occurrence of ) @xmath110 and the part @xmath134 of @xmath130 from @xmath110 to @xmath7 , and replace @xmath72 by the concatenation of the rest of @xmath130 ( from @xmath7 to @xmath110 ) and the rest of @xmath72 ( from @xmath110 to @xmath71 ) .",
    "( we assume , w.l.o.g . , that the last edge of @xmath133 and the first edge of @xmath134 form a transit pair at @xmath110 ; otherwise reverse @xmath130 . ) as a result , we obtain an @xmath7@xmath7 path , denoted by @xmath130 as before , that contains @xmath132 . in case ( a ) ,",
    "the cycle @xmath131 vanishes , and in case ( b ) , the new path @xmath72 goes from @xmath7 to @xmath71 as before , and its part from @xmath110 to @xmath71 preserves .",
    "this together with  ( [ eq : intc ] ) and  ( [ eq : intp ] ) implies validity of  ( [ eq : aug ] ) for the remaining sequence @xmath135 ; moreover , ( [ eq : intc ] ) and  ( [ eq : intp ] ) are maintained as well . at the second step , we consider the pair @xmath136 and act in a similar way , and so on .    eventually , after @xmath137 steps , the current @xmath7@xmath7 path @xmath130 contains the node @xmath114 .",
    "since @xmath113 is augmenting , @xmath114 also belongs to some @xmath71@xmath138 path @xmath139 with @xmath140 ( possibly @xmath141 ) . now splitting @xmath142 at @xmath114 and concatenating the arising four pieces in another way",
    ", we obtain two @xmath3-paths , one connecting @xmath7 and @xmath138 and the other connecting @xmath7 and @xmath71 .",
    "this gives a new decomposition @xmath126 of @xmath4 having a larger value of @xmath143 , and the theorem follows .",
    "in fact , the above proof is constructive and prompts a polynomial algorithm for finding a maximum number of pairwise edge - disjoint @xmath3-paths in an inner eulerian bidirected graph . a more efficient and more general algorithm ( dealing with the capacitated case )",
    "is described in section  [ sec : alg ] .",
    "this section contains terminology and some basic facts concerning skew - symmetric graphs and explains the correspondence between these and bidirected graphs . for a more detailed survey on skew - symmetric graphs ,",
    "see , e.g. ,  @xcite .",
    "a _ skew - symmetric graph _ is a digraph @xmath0 endowed with two bijections @xmath144 such that : @xmath145 is an involution on the nodes ( i.e. , @xmath146 and @xmath147 for each @xmath148 ) , @xmath149 is an involution on the arcs , and for each arc @xmath56 from @xmath57 to @xmath2 , @xmath150 is an arc from @xmath151 to @xmath152 . for brevity , we combine the mappings @xmath144 into one mapping @xmath153 on @xmath154 and call @xmath153 the _ symmetry _ ( rather than skew - symmetry ) of @xmath4 . for a node ( arc ) @xmath155 , its symmetric node ( arc ) @xmath156 is also called the _ mate _ of @xmath155 , and we will often use notation with primes for mates , denoting @xmath156 by @xmath157 . obviously , @xmath158 for each @xmath148 .    we admit parallel arcs , but not loops , in @xmath4 .",
    "observe that if @xmath4 contains an arc @xmath56 from a node @xmath2 to its mate @xmath159 , then @xmath58 is also an arc from @xmath2 to @xmath159 ( so the number of arcs of @xmath4 from @xmath2 to @xmath159 is even and these parallel arcs are partitioned into pairs of mates ) .    by a path ( circuit ) in @xmath4 we mean a simple directed path ( cycle ) , unless explicitly stated otherwise .",
    "the symmetry @xmath153 is extended in a natural way to paths , subgraphs , and other objects in @xmath4 .",
    "in particular , two paths or circuits are symmetric to each other if the elements of one of them are symmetric to those of the other and go in the reverse order : for a path ( circuit ) @xmath76 , the symmetric path ( circuit ) @xmath160 is @xmath161 .",
    "one easily shows that @xmath4 can not contain self - symmetric circuits ( cf .",
    "@xcite ) .",
    "following terminology in  @xcite , a path or circuit in @xmath4 is called _ regular _ if it contains no pair of symmetric arcs ( while symmetric nodes in it are allowed ) . for a function @xmath162 on @xmath163 , its symmetric function @xmath164",
    "is defined by @xmath165 , @xmath94 , and @xmath162 is called ( self-)_symmetric _ if @xmath166 .    for a function @xmath167 and a node @xmath148 ,",
    "define @xmath168 ( the _ divergency _ of @xmath88 at @xmath2 ) , where @xmath169 ( @xmath170 ) denotes the set of arcs of @xmath4 leaving ( resp .",
    "entering ) @xmath2 .",
    "let @xmath88 be nonnegative , integer - valued and symmetric , and let @xmath171 be a subset of nodes not intersecting @xmath172 .",
    "when @xmath173 is nonnegative at each @xmath174 and zero at each @xmath175 , @xmath88 is said to be an _ is - flow _",
    "( integer symmetric flow ) from @xmath171 to @xmath176 .",
    "the _ value _",
    "@xmath177 of @xmath88 is @xmath178 . by a multiterminal version of a theorem due to tutte  @xcite ,",
    "an is - flow @xmath88 from @xmath171 to @xmath176 has an _ integer symmetric decomposition_. this means that    @xmath88 is representable as @xmath179 , where for @xmath180 , @xmath40 is a path from @xmath171 to @xmath176 or a circuit , @xmath181 is the path ( also going from @xmath171 to @xmath176 ) or circuit symmetric to @xmath40 , and @xmath182 .",
    "[ eq : sdecom ]    here @xmath183 denotes the incidence vector of the arc - set of a path / circuit @xmath72 , i.e. , for @xmath94 , @xmath184 if @xmath56 belongs to @xmath72 , and 0 otherwise .",
    "note that paths / circuits in  ( [ eq : sdecom ] ) need not be regular .",
    "considering @xmath185 as the weight of @xmath40 and of @xmath181 , observe that the total weight of paths from @xmath171 to @xmath176 is equal to @xmath177 .",
    "similar to flow decomposition in usual digraphs , an integer symmetric decomposition of an is - flow @xmath88 can be found in @xmath186 time .",
    "let @xmath14 be inner eulerian , where the terminal set @xmath3 is ( self-)symmetric .",
    "take a partition @xmath187 of @xmath3 such that @xmath188 for all @xmath189 .",
    "since the all - unit function @xmath88 on @xmath163 represents an is - slow from @xmath171 to @xmath176 , ( [ eq : sdecom ] ) implies that    there exists a symmetric collection @xmath93 of circuits and paths from @xmath171 to @xmath176 in @xmath4 such that the members of @xmath93 are pairwise arc - disjoint and cover @xmath163 , and each terminal @xmath189 is the beginning of exactly @xmath190 paths in @xmath93 .",
    "[ eq : decomp ]    moreover , the members of @xmath93 are regular ( for if some @xmath191 contains mates @xmath192 , then @xmath54 are in @xmath160 as well , which is impossible ) .",
    "next we explain the correspondence between skew - symmetric and bidirected graphs ( cf .",
    "2 ) ) . for sets",
    "@xmath193 , we may use notation @xmath194 when @xmath195 and @xmath196 .",
    "given a skew - symmetric graph @xmath0 , choose an arbitrary partition @xmath197 of @xmath198 such that @xmath199 is symmetric to @xmath200 .",
    "then @xmath201 determine bidirected graph @xmath202 with node set @xmath200 whose edges correspond to the pairs of symmetric arcs in @xmath4 .",
    "more precisely , arc mates @xmath203 of @xmath4 generate one edge @xmath56 of @xmath202 connecting nodes @xmath204 such that : ( i ) @xmath56 goes from @xmath57 to @xmath2 if one of @xmath203 goes from @xmath57 to @xmath2 ( and the other goes from @xmath159 to @xmath205 in @xmath199 ) ; ( ii ) @xmath56 leaves both @xmath55 if one of @xmath203 goes from @xmath57 to @xmath159 ( and the other from @xmath2 to @xmath205 ) ; ( iii ) @xmath56 enters both @xmath55 if one of @xmath203 goes from @xmath205 to @xmath2 ( and the other from @xmath159 to @xmath57 ) .",
    "in particular , @xmath56 is a loop if @xmath203 connect a pair of symmetric nodes .",
    "conversely , a bidirected graph @xmath202 with node set @xmath200 , say , determines skew - symmetric graph @xmath0 with symmetry @xmath153 as follows .",
    "take a copy @xmath206 of each element @xmath2 of @xmath200 , forming the sets @xmath207 and @xmath208 .",
    "for each edge @xmath56 of @xmath202 connecting nodes @xmath57 and @xmath2 , assign two `` symmetric '' arcs @xmath203 in @xmath4 so as to satisfy ( i)-(iii ) above ( where @xmath209 and @xmath210 ) .",
    "an example is depicted in fig .",
    "[ fig : sk - bi ] .",
    "* remark 4 . *",
    "a bidirected graph generates one skew - symmetric graph , while a skew - symmetric graph generates a number of bidirected ones , depending on the partition @xmath211 of @xmath198 that we choose in the first construction .",
    "the latter bidirected graphs are produced from each other by the edge reversing transformation with respect to a subset of nodes as indicated in remark 3 in the introduction , so they are equivalent for us .",
    "a terminal set @xmath171 in @xmath202 generates the symmetric terminal set @xmath212 in @xmath4 , and vice versa .",
    "one easily checks that @xmath213 is inner eulerian if and only if @xmath14 is such .",
    "also there is a correspondence between the @xmath171-paths in @xmath202 and certain @xmath3-paths in @xmath4 .",
    "more precisely , let @xmath214 be the natural mapping of @xmath154 to @xmath215 ( where @xmath216 is the edge set of @xmath202 ) .",
    "each walk ( cycle ) @xmath217 in @xmath4 induces the sequence @xmath218 of nodes and edges in @xmath202 .",
    "conversely , for a walk ( cycle ) @xmath219 in @xmath202 , form the sequence @xmath220 of nodes and arcs in @xmath4 by the following rule :    * @xmath221 if @xmath69 leaves @xmath222 , and @xmath223 if @xmath69 enters @xmath222 ; and for @xmath180 : ( a ) if @xmath64 leaves @xmath224 , then @xmath225 is the arc in @xmath226 that leaves @xmath224 , and @xmath66 is the head of @xmath225 ; ( b ) if @xmath64 enters @xmath224 , then @xmath225 is the arc in @xmath226 that leaves @xmath227 , and @xmath66 is the head of @xmath225 .",
    "( when @xmath64 is a loop , the arcs in @xmath226 are parallel , and the arc @xmath225 in this set is chosen arbitrarily . )",
    "it is not difficult to conclude that ( r ) provides :    for a walk ( cycle ) @xmath130 in @xmath202 ,    * @xmath228 is a walk ( cycle ) in @xmath4 and @xmath229 ; * if @xmath130 is edge - simple and minimal ( see remark 2 in the introduction ) , then @xmath228 is a regular path ( circuit ) .    [",
    "eq : corresp ]    also the walk ( cycle ) reverse to @xmath130 determines the walk ( cycle ) in @xmath4 symmetric to @xmath228 ( up to the choice of arcs @xmath225 for loops @xmath64 ) . the corresponding converse properties to those in  ( [ eq : corresp ] ) also take place .",
    "let us say that a @xmath3-walk @xmath72 from @xmath7 to @xmath71 in @xmath4 is _ essential _ if @xmath71 is different from @xmath230 .",
    "thus , we have a natural bijection between the essential regular @xmath3-paths in @xmath4 ( considered up to parallel arc mates ) and the minimal @xmath171-paths in @xmath202 .",
    "this gives @xmath231 where @xmath232 is the maximum cardinality of a symmetric collection of pairwise arc - disjoint essential @xmath3-paths in @xmath4 .",
    "note also that for a terminal @xmath189 and an @xmath7-set @xmath17 in @xmath202 , each edge of the cut @xmath233 generates two arc mates in the symmetric cut @xmath234 in @xmath4 .",
    "therefore , @xmath235 where @xmath236 is the minimum cardinality of a symmetric cut in @xmath4 separating @xmath237 and @xmath238 .    in view of relations  ( [ eq : twice1 ] ) and  ( [ eq : twice2 ] ) , theorem  [ tm : main ] is equivalent to the following    [ cor : skew ] for a skew - symmetric graph @xmath0 with a symmetric set @xmath3 of terminals , if @xmath14 is inner eulerian , then @xmath239 .    in the capacitated case ,",
    "we are given a symmetric function @xmath25 of arc capacities in a skew - symmetric graph @xmath0 with a symmetric set @xmath240 of terminals . by an integer symmetric free multiflow ( or , briefly , an is-_multiflow _ ) in the network @xmath26 we mean a collection @xmath241 of integer flows @xmath242 for the ordered pairs @xmath243 of distinct terminals in @xmath171 such that : ( a ) @xmath244 is a flow from @xmath237 to @xmath245 ( i.e. , @xmath173 is nonnegative for @xmath246 , nonpositive for @xmath247 , and 0 otherwise ) ; ( b ) each @xmath242 is symmetric to @xmath248 ; and ( c ) @xmath241 is @xmath249-_admissible _ , i.e. , @xmath250 the ( total ) _ value _ @xmath251 of @xmath241 is @xmath252 .",
    "the problem is :    * _ given an inner eulerian network @xmath26 , where @xmath4 is a skew - symmetric graph and @xmath3 and @xmath249 are symmetric , find a _",
    "maximum is - multiflow _ , i.e. , an is - multiflow @xmath241 maximizing @xmath251 .",
    "_    to see how this problem is related to  ( p ) , let @xmath14 correspond to @xmath213 , where @xmath202 is bidirected .",
    "let @xmath253 be the corresponding capacity function in @xmath202 , i.e. , @xmath254 for an edge @xmath255 and its images @xmath203 in @xmath4 .",
    "the inner eulerianness of @xmath26 implies that of @xmath256 , and vice versa .",
    "given an is - multiflow @xmath241 in @xmath26 , represent each flow @xmath242 in the path packing form :    @xmath257 , where @xmath258 and @xmath40 is a circuit or a ( simple ) path from @xmath237 to @xmath245 .",
    "[ eq : fst ]    we assume that the representation of each flow @xmath242 is symmetric to that of @xmath248",
    ". then the set @xmath93 of ( essential ) @xmath3-paths in these representations is symmetric , with @xmath259 for each @xmath191 , and we have @xmath260 .",
    "now each pair @xmath261 of path mates determines an @xmath171-walk @xmath262 in @xmath202 ( considered up to reversing ) , and taking together these paths @xmath262 with weights @xmath263 , we obtain a multiflow @xmath30 in @xmath256 satisfying @xmath264 .",
    "conversely , let @xmath265 be an integer multiflow in @xmath256 , where @xmath266 consists of @xmath171-walks .",
    "one may assume that for each edge @xmath56 of @xmath202 , no path @xmath267 traverses @xmath56 twice in the same direction ( for otherwise one can remove a cycle from @xmath262 ) .",
    "then each @xmath7@xmath71 walk @xmath262 determines an arc - simple directed walk @xmath72 from @xmath237 to @xmath245 and its mate @xmath133 from @xmath245 to @xmath237 in @xmath4 .",
    "assign @xmath268 .",
    "let @xmath242 be the sum of functions @xmath269 over the obtained walks @xmath72 from @xmath237 to @xmath245 .",
    "then @xmath248 is symmetric to @xmath242 .",
    "these flows form an is - multiflow @xmath241 in @xmath26 satisfying @xmath270 .",
    "thus , problems  ( ps ) and  ( p ) ( regarding @xmath271 ) are reduced to each other . in the next section",
    "we devise an efficient algorithm for finding an optimal solution to  ( ps ) and then explain that it can be transformed into an optimal solution to the corresponding instance of  ( p ) without increasing the time bound .",
    "in this section we describe an algorithm to solve problem  ( ps ) and estimate its complexity .",
    "we use terminology and facts from the previous section .",
    "let @xmath272 be an inner eulerian skew - symmetric network .",
    "as before , we represent the terminal set @xmath3 as @xmath273 and associate with @xmath26 the corresponding bidirected network @xmath256 .",
    "one may assume that no arc in @xmath4 connects a pair of terminal mates .",
    "also if @xmath4 has an arc entering a terminal @xmath189 , then replacing its head @xmath7 by @xmath274 and symmetrically replacing the tail @xmath274 of the symmetric arc @xmath58 by @xmath7 does not affect the problem in essence .",
    "so we may assume that @xmath275 for each terminal @xmath189 in @xmath4 .",
    "then any flow from @xmath237 to @xmath245 , where @xmath276 , is essentially a flow from @xmath7 to @xmath277 , and its symmetric flow is a flow from @xmath71 to @xmath274 ; this property will simplify technical details in our construction . in terms of @xmath202",
    ", the latter assumption says that each edge incident with a terminal @xmath7 in @xmath202 leaves @xmath7 ( cf .",
    "remark  3 in section  [ sec : intr ] ) .",
    "the algorithm uses a recursion analogous to that in  @xcite , and the case @xmath278 is the base in it .",
    "we first consider this special case ( which generalizes the case @xmath279 ) .",
    "the algorithm for this case uses one auxiliary skew - symmetric graph @xmath280 .",
    "it is obtained from @xmath4 by adding , for each pair @xmath281 of inner node mates , four _ auxiliary arcs _",
    "connecting @xmath2 and @xmath159 : two arc mates @xmath282 going from @xmath2 to @xmath159 and two arc mates @xmath283 from @xmath159 to @xmath2 , regardless of the existence of such arcs in @xmath4 .",
    "this @xmath284 corresponds to the bidirected graph @xmath285 obtained from @xmath202 by adding two auxiliary loops at each inner node @xmath2 , one leaving @xmath2 ( twice ) and the other entering @xmath2 .",
    "the algorithm consists of three stages .",
    "let @xmath286 .    at _ stage 1 _",
    ", we apply the algorithm for inner eulerian graphs from  @xcite to find a maximum integer free multiflow in the underlying undirected graph @xmath287 for @xmath202 having the same set @xmath171 of terminals and the same capacities @xmath253 .",
    "it runs in @xmath288 time ( since @xmath289 ) and outputs ( simple ) @xmath171-paths @xmath290 in @xmath287 and weights @xmath84 satisfying the packing condition w.r.t .",
    "( recall that @xmath291 is a bound for the applied max flow algorithm ; we assume @xmath292 ) .",
    "it also outputs pairwise disjoint @xmath293-sets @xmath294 , @xmath295 , such that for each @xmath296 , the sum of weights @xmath297 of paths @xmath298 connecting @xmath293 and @xmath299 is equal to @xmath300 .",
    "however , some pairs of consecutive edges in @xmath298 may be non - transit in @xmath202 , i.e. , @xmath298 is not necessarily a path in @xmath202 .    at _",
    "stage 2 _ , we transform @xmath290 into paths in the auxiliary bidirected graph @xmath285 .",
    "more precisely , for each @xmath301 and for each non - transit pair @xmath302 in it , if both edges @xmath302 enter ( leave ) @xmath77 , then the element @xmath77 of @xmath303 is replaced by the string @xmath304 , where @xmath305 is the auxiliary loop leaving ( resp . entering ) @xmath77 .",
    "this results in minimal @xmath171-paths @xmath306 in @xmath285 .",
    "and its images in the graphs @xmath285 and @xmath284,title=\"fig : \" ] and its images in the graphs @xmath285 and @xmath284,title=\"fig : \" ]   and its images in the graphs @xmath285 and @xmath284,title=\"fig : \" ]    each path @xmath307 and its reverse one are then lifted to @xmath284 ( by the method explained in section  [ sec : skew ] ) , giving regular @xmath3-paths @xmath308 symmetric to each other .",
    "( figure  [ fig : pi ] illustrates paths @xmath309 . ) for each pair @xmath310 ( @xmath311 ) , the functions @xmath312 or @xmath313 for the paths from @xmath314 to @xmath315 are added up , forming @xmath314@xmath315 flow @xmath316 .",
    "this gives a symmetric collection of six integer flows in @xmath284 ; see figure  [ fig:3term ] .",
    "the @xmath253-admissibility of the above multiflow in @xmath287 and the fact that each path @xmath40 is regular imply that the total flow though each arc @xmath56 of @xmath4 does not exceed @xmath62 .",
    "also the fact that the cuts @xmath317 are saturated implies that    for @xmath295 , the arcs in @xmath318 are saturated by @xmath319 , and symmetrically , the arcs in @xmath320 are saturated by @xmath321 , [ eq : satur ]    where @xmath322 and the indices are taken modulo 3 .",
    "so the is - multiflow consisting of these six flows has maximum value .     in @xmath284 ]    at _ stage 3 _ , we improve the above flows @xmath324 in @xmath284 by reducing their values on the auxiliary arcs to zero , eventually obtaining the desired multiflow in @xmath4 . in view of  ( [ eq : satur ] ) , for @xmath295 , one may assume that @xmath325 and @xmath326 take zero values on all arcs of the subgraph @xmath327 of @xmath284 induced by @xmath328 .",
    "take the residual capacities @xmath329 of arcs @xmath94 .",
    "the divergency of @xmath249 ( w.r.t .",
    "@xmath163 ) and of each @xmath324 ( w.r.t .",
    "@xmath330 ) at any inner node is zero , therefore , @xmath331 where @xmath332 denotes @xmath333 ( recall that @xmath334 are the auxiliary arcs from @xmath2 to @xmath159 ) .",
    "the function @xmath335 on @xmath163 is nonnegative , integer - valued and symmetric .",
    "also  ( [ eq : divdelta ] ) and @xmath336 imply that @xmath337 is even for each @xmath12 .",
    "hence we can extend @xmath335 to the auxiliary arcs so as to obtain an is - flow in @xmath338 .",
    "( the extended @xmath335 satisfies @xmath339 for each @xmath12 . )",
    "notice that @xmath340 for each arc @xmath56 in the cut @xmath341 , @xmath295 , by  ( [ eq : satur ] ) .",
    "therefore , the restriction @xmath342 of @xmath335 to the set @xmath343 of arcs of the subgraph @xmath344 is an is - flow from @xmath293 to @xmath345 . in its turn",
    ", the restriction @xmath346 of @xmath335 to the set @xmath347 of arcs with both ends in @xmath348 is an integer symmetric circulation in the subgraph @xmath349 .",
    "( recall that the sets @xmath350 are pairwise disjoint . )",
    "we start with getting rid of nonzero arc values of the above flows on the auxiliary arcs within the subgraph @xmath351 . to this aim , apply the integer symmetric decomposition procedure to @xmath352 ( cf .",
    "( [ eq : sdecom ] ) ) to represent it as the sum of integer @xmath353@xmath354-flows @xmath355 , where @xmath164 is symmetric to @xmath162 .",
    "combine @xmath356 and @xmath357 ( where @xmath355 are formally extended by zeros on @xmath358 ) .",
    "then @xmath359 is an integer flow from @xmath353 to @xmath176 , and @xmath360 is the flow from @xmath171 to @xmath354 symmetric to @xmath359 . also @xmath361 in view of @xmath362 , @xmath363 and @xmath364 for all @xmath365 .",
    "so we can reduce @xmath366 to zero on all auxiliary arcs in @xmath367 . now using standard flow decomposition",
    ", we represent the new flow @xmath359 as the sum of three integer flows @xmath368 , from @xmath353 to @xmath354 , from @xmath353 to @xmath369 , and from @xmath353 to @xmath370 , respectively .",
    "note that @xmath371 for each @xmath372 implies that @xmath373 is zero on all arcs of the cut @xmath374 .",
    "update @xmath375 and @xmath376 ; the flows @xmath377 and @xmath378 are updated symmetrically .",
    "then the resulting four flows together with the remaining flows @xmath379 satisfy  ( [ eq : satur ] ) as before ( thus forming a maximum is - multiflow ) and take zero values on the auxiliary arcs in @xmath351 , as required .",
    "do similarly for @xmath380 and @xmath381 .",
    "the task of improving the flows within the subgraph @xmath382 is a bit more involved .",
    "first of all we modify @xmath383 ( and @xmath377 ) so as to get @xmath384 ( this situation is technically simpler ) .",
    "this is done by decomposing the above - mentioned symmetric circulation @xmath346 in @xmath385 into the sum of an integer circulation @xmath386 and its symmetric circulation @xmath387 and then by updating @xmath388 and @xmath389 ( with @xmath390 extended by zeros to @xmath391 )",
    ". then the equality @xmath363 provides  ( [ eq : zero ] ) .",
    "the process of improving the flows within @xmath385 consists of @xmath392 iterations ( the idea is borrowed from the algorithm for digraphs in  @xcite ) . at a current iteration ,",
    "we choose a node @xmath393 where some @xmath394 is nonzero .",
    "w.l.o.g , one may assume that @xmath395 and @xmath396 .",
    "let @xmath397 and @xmath398 ) .",
    "let @xmath399 be the set of ( four ) auxiliary arcs connecting @xmath2 and @xmath159 .",
    "first of all we represent @xmath383 as the sum of two integer @xmath353@xmath400 flows @xmath401 such that @xmath402 and @xmath403 .",
    "to do so , replace @xmath399 by new terminals @xmath404 and arcs @xmath405 , @xmath406 and @xmath407 , and add an arc @xmath408 from @xmath400 to @xmath353 . define @xmath409 , @xmath410 , @xmath411 , @xmath412 and @xmath413 for the remaining arcs @xmath56",
    "this turns @xmath162 into a flow from @xmath71 to @xmath414 , and we decompose it into the sum of integer flows @xmath415 , from @xmath71 to @xmath416 and from @xmath71 to @xmath417 , respectively .",
    "these @xmath415 determine the desired @xmath401 in a natural way .",
    "combine @xmath418 .",
    "then @xmath419 .",
    "update @xmath420 for each @xmath421 and decompose the updated @xmath353@xmath422 flow @xmath88 into the sum of integer flows @xmath423 , from @xmath353 to @xmath400 and from @xmath353 to @xmath424 , respectively . then @xmath425 and @xmath426 .",
    "doing similarly for the flow @xmath427 and the flow @xmath428 symmetric to @xmath429 ( which have the source @xmath430 in common ) , we obtain corresponding @xmath430@xmath424 flow @xmath431 and @xmath430@xmath354 flow @xmath432 .",
    "finally , update @xmath433 ( where @xmath373 is symmetric to @xmath432 ) , @xmath434 and @xmath435 .",
    "the updated flows @xmath324 together with their symmetric ones satisfy @xmath436 for each arc @xmath421 .",
    "then we choose a next pair of node mates in @xmath437 , and so on . upon termination of the process ,",
    "the resulting flows @xmath324 take zero values on all auxiliary arcs , and it is easily seen from the construction that @xmath438 preserves for all pairs @xmath439 .",
    "so their restrictions to @xmath163 form a maximum is - multiflow in @xmath26 , as required .",
    "the above algorithm runs in @xmath288 time plus the time needed to perform @xmath392 , or @xmath440 , flow decompositions during the iterative process at stage 3 ( the other operations including those in @xmath11 symmetric decompositions take @xmath186 time ) .",
    "each of these decompositions is applied to a flow with @xmath11 sources and sinks , and we use the procedure in section  [ sec : decom ] to implement it in @xmath441 time .",
    "this gives the bound @xmath442 for the six ( or four ) terminal case .",
    "we now describe the algorithm for an arbitrary @xmath443 .",
    "it is based on a recursive network partition approach .    for a _ current _ inner eulerian skew - symmetric network @xmath444 , with @xmath240 , the _ network partition procedure _",
    "partitions @xmath171 into two sets @xmath445 such that @xmath446 and @xmath447 and finds a symmetric subset @xmath21 with @xmath448 whose induced cut @xmath449 has minimum capacity @xmath29 .",
    "this is done by finding a minimum capacity cut @xmath450 with @xmath451 in the underlying undirected network for @xmath452 , and by making the symmetrization @xmath453 ( relying on @xmath454 ) .",
    "next we shrink the subgraph @xmath455 of @xmath4 into two new ( _ extra _ ) terminals @xmath456 , making each arc in @xmath457 enter @xmath458 , and each arc in @xmath459 leave @xmath417 .",
    "similarly , @xmath460 is shrunk into extra terminals @xmath461 , each arc in @xmath459 becomes entering @xmath462 and each arc in @xmath457 becomes leaving @xmath463 .",
    "this produces two smaller inner eulerian networks @xmath464 with @xmath465 , @xmath466 , satisfying @xmath467 ( since @xmath468 when @xmath469 ) . also for @xmath470",
    ", the cut @xmath341 of @xmath471 has minimum capacity among the cuts separating @xmath472 and @xmath473 .",
    "one application of the network partition procedure , to a current @xmath474 , takes one minimum cut computation , so it runs in @xmath288 time .",
    "let @xmath475 be a ( recursively found ) maximum free is - multiflow in @xmath476 .",
    "the _ aggregation procedure _ transforms @xmath477 into a maximum free is - multiflow @xmath241 in @xmath474 .",
    "the flows in @xmath475 going from @xmath478 to @xmath479 are combined into one ( multisource ) flow @xmath480 from @xmath478 to @xmath479 , and symmetrically , the flows from @xmath481 to @xmath482 are combined into one flow @xmath483 . by the maximality of @xmath475 and the minimality of @xmath484 ,",
    "@xmath480 saturates @xmath320 and @xmath483 saturates @xmath318 .",
    "we glue together ( the images of ) @xmath373 and @xmath485 , obtaining @xmath486@xmath487 flow @xmath88 in @xmath474 , and do symmetrically for @xmath488 , obtaining @xmath489 .",
    "these @xmath490 are decomposed symmetrically into a symmetric collection of integer one - source - one - sink flows .",
    "then the flows formed from @xmath490 together with the remaining flows in @xmath477 connecting pairs of terminals in @xmath491 or in @xmath492 give the desired @xmath241 .",
    "( the maximality of @xmath241 follows from the fact that for each @xmath493 , the total value of flows in @xmath494 leaving @xmath7 or entering @xmath274 is equal to the minimum capacity of a cut in @xmath495 separating @xmath237 and @xmath496 , and similarly for @xmath497 .",
    "the above construction maintains such an equality for @xmath241 and each @xmath189 . )    at the bottom level ( @xmath278 ) , we apply the algorithm described in  [ ssec : three ] .",
    "one application of the aggregation procedure , to current @xmath498 , takes @xmath499 time to create the flows @xmath500 as above plus @xmath186 time to decompose @xmath88 , or @xmath186 time in total ( in view of  ( [ eq : tve ] ) ) .",
    "it remains to explain that the resulting multiflow @xmath241 in the initial network @xmath474 can be efficiently transformed into a maximum integer free multiflow in the corresponding bidirected network @xmath256 .",
    "we show that @xmath501 time is sufficient to create from @xmath241 a corresponding symmetric collection @xmath502 of weighted @xmath3-paths in @xmath474 ; these paths determine weighted @xmath3-walks in @xmath202 forming an optimal solution to problem  ( p ) with @xmath256 , by the relationship explained in section  [ sec : skew ] .",
    "we assume that each flow @xmath88 in @xmath241 is explicitly given only within its support @xmath503 .",
    "let @xmath504 be the binary rooted tree formed by all networks arising during the recursion , with the natural ordering on them .",
    "the height of @xmath504 ( or the depth of the recursion ) is @xmath9 , in view of the first inequality in  ( [ eq : tve ] ) . for a network @xmath505 in @xmath504 ,",
    "let @xmath506 be the set of terminals from the initial @xmath3 that are contained in @xmath505 , and @xmath507 the set of flows in @xmath241 with both terminals in @xmath508 .",
    "we use the fact that for incomparable @xmath509 in @xmath504 , the supports of flows in @xmath510 are disjoint from those in @xmath511 .",
    "( indeed , for the closest common predecessor @xmath505 of @xmath509 , the minimum cut found by the network partition procedure for @xmath505 separates @xmath512 and @xmath513 and is saturated by the flows not in @xmath514 . )",
    "we proceed as follows . for each non - leaf network @xmath505 with children @xmath498 ,",
    "combine the flows in @xmath241 with the source in @xmath515 and the sink in @xmath516 into one multiterminal flow @xmath517 ( in the initial network ) , and then decompose @xmath517 into a set @xmath518 of weighted paths from @xmath515 to @xmath516 ( the circuits appeared in the decomposition are removed ) .",
    "this takes @xmath519 time .",
    "taken together , the sets @xmath518 , their symmetric sets and corresponding paths appeared by decomposing the flows in @xmath241 having both terminals in one leaf network , constitute the desired symmetric collection @xmath502 . to estimate the complexity , consider the networks @xmath505 at height @xmath296 in @xmath504 .",
    "they are incomparable , so the supports of flows @xmath517 as above in them are pairwise disjoint . hence to form the sets @xmath518 for these @xmath505 takes @xmath186 time in total .",
    "this gives the bound @xmath501 for the whole procedure , as declared .",
    "we show that the above algorithm runs in @xmath520 time , where @xmath521 , assuming @xmath522 ( as in goldberg  tarjan s max flow algorithm ) .",
    "we use induction on the height @xmath523 of the binary tree @xmath504 ( it depends only on @xmath524 ) .",
    "when @xmath525 ( i.e. @xmath526 ) , the required time bound was shown in  [ ssec : three ] .",
    "let @xmath527 and let @xmath498 be the children of @xmath474 in @xmath504 . for @xmath466 , we have @xmath528 , and by induction the time @xmath529 of the algorithm to solve the problem for @xmath476 is bounded from above as @xmath530 for some appropriately chosen constant @xmath531 ( specified later ) . here",
    "@xmath532 and @xmath533 , keeping notation from  [ ssec : gen ] . the network partition and aggregation procedures applied to @xmath474",
    "take time @xmath534 and @xmath535 , respectively , or @xmath536 time together , where @xmath537 is some constant @xmath538 , @xmath539 and @xmath540 .",
    "therefore , the time @xmath214 to solve the problem for @xmath474 is estimated as @xmath541    we have @xmath542 ( since @xmath543 ) and @xmath544 ( this follows from @xmath545 and from @xmath546 for @xmath547 and @xmath548 ) .",
    "also @xmath549 and @xmath550 , by  ( [ eq : tve ] )",
    ". then  ( [ eq : time1 ] ) implies @xmath551    since @xmath552 and @xmath553 grows faster than @xmath554 , one can choose constants @xmath555 and @xmath131 ( depending on @xmath537 ) such that the right hand side value in  ( [ eq : time2 ] ) becomes smaller than @xmath556 for any @xmath557 .",
    "( for the networks with @xmath558 , the problem is solved in @xmath559 time . )",
    "this yields the desired time bound .",
    "[ tm : time ] a maximum is - multiflow ( resp . a maximum integer free multiflow ) in an inner eulerian skew - symmetric ( resp .",
    "bidirected ) network @xmath272 can be found in @xmath10 time .",
    "for a fixed @xmath560 , we consider the problem :    * _ given a flow ( integer flow ) @xmath88 from @xmath171 to @xmath3 , with @xmath561 , in a digraph @xmath0 , find a decomposition @xmath562 , where each @xmath242 is a flow ( resp .",
    "integer flow ) from @xmath7 to @xmath71 , _    and show the following ( allowing parallel arcs in @xmath4 and assuming @xmath563 ) .    [ tm : decom ] ( d ) can be solved in @xmath441 time .",
    "note that when @xmath4 is acyclic , a decomposition ( into one - source - one - sink flows or into weighted paths ) of any flow in @xmath4 is carried out in @xmath559 time by using a topological sorting of the nodes .",
    "sleator and tarjan  @xcite showed that any flow @xmath88 in an arbitrary digraph can be decomposed , in @xmath564 time , into a circulation and a flow whose support induces an acyclic subgraph of @xmath4 ( so a decomposition of @xmath88 into one - source - one - sink flows can be found with the same complexity @xmath564 ) .",
    "the algorithm in  @xcite uses sophisticated computational tools , so - called dynamic trees .",
    "our approach to solve  ( d ) is based on a node splitting technique and uses only simple data structures .",
    "let @xmath565 be the set of pairs @xmath566 with @xmath189 and @xmath567 .    in the beginning of the algorithm , we delete from @xmath4 the arcs @xmath56 with @xmath568 .",
    "also we sort the nodes @xmath2 by increasing their degrees @xmath105 .",
    "( this takes @xmath559 time . )",
    "the algorithm applies @xmath569 iterations .    at each iteration",
    ", we choose a node @xmath2 with @xmath105 minimum in the current graph @xmath0 .",
    "first of all we scan the arcs incident with @xmath2 to select parallel arcs among them .",
    "each tuple of parallel arcs is merged into one arc ( and the flows on these are added up ) .",
    "the node degrees and the ordering on @xmath198 are updated accordingly .",
    "( this preliminary stage is performed in @xmath570 time . as a result ,",
    "the degree of @xmath2 becomes less than @xmath571 . )",
    "then we make at most @xmath105 splittings at @xmath2 .",
    "more precisely , at a current step of the iteration , we choose an arc entering @xmath2 and an arc leaving @xmath2 , say , @xmath572 and @xmath573 .",
    "if @xmath56 or @xmath58 is a loop , we simply delete it from @xmath4 .",
    "otherwise define @xmath574 .",
    "the _ splitting - off operation _ applied to @xmath575 creates a new arc @xmath576 from @xmath57 to @xmath577 , assigns @xmath578 , updates @xmath579 and @xmath580 , and deletes from @xmath4 the arc ( or arcs ) for which the new value becomes zero ; it takes @xmath11 time .",
    "the ordering on @xmath198 is updated accordingly ( in @xmath11 time ) .",
    "clearly the operation maintains both the divergency at each node and the flow integrality ( when the original flow is integer ) . also @xmath581 decreases and the number of all arcs does not increase .    at the next step of the iteration ,",
    "the operation is applied to another pair of arcs , one entering and the other leaving @xmath2 , and so on until such pairs no longer exist .",
    "after that , if @xmath582 , then @xmath2 is removed from @xmath4 ( as @xmath583 implies @xmath584 ) .    at the next iteration , we again choose a vertex where the current degree is minimum , and so on .",
    "one can see that after @xmath569 iterations , each arc of the resulting graph @xmath585 goes from a source @xmath189 to a sink @xmath567 .",
    "the decomposition @xmath586 for the resulting @xmath88 in @xmath585 is trivial : @xmath587 and @xmath588 for @xmath589 ( letting @xmath590 if the arc @xmath243 does not exist in @xmath585 ) .",
    "now going in the reverse order and applying the corresponding _",
    "restoration procedure _ reverse to the splitting - off one , we transform @xmath591 into the desired decomposition of the initial flow . more precisely , consider a current graph @xmath4 and the arcs @xmath572 , @xmath573 , @xmath592 as above , and let @xmath242 , @xmath593 , be the flows already obtained for the graph @xmath80 formed from @xmath4 by the splitting - off operation w.r.t .",
    "@xmath575 . for each @xmath593 , add @xmath594 to @xmath595 and to @xmath596 and then delete @xmath576 .",
    "( the backward iteration concerning @xmath2 finishes with restoring the corresponding tuples of parallel arcs incident with @xmath2 and assigning , in a due way , the flows @xmath242 on these arcs . ) eventually , we obtain the desired decomposition @xmath597 of the initial @xmath88 .",
    "( strictly speaking , we have @xmath598 and @xmath599 for all @xmath148 ; so one should add the circulation @xmath600 to one of the flows @xmath242 . )",
    "next we estimate complexity of the above algorithm .",
    "let @xmath601 be the sequence of nodes in the splitting - off process .",
    "since @xmath602 , the restoration process is only @xmath11 times slower than the splitting - off one .",
    "( this is just where we essentially use the condition that @xmath88 has @xmath11 terminals . ) using this fact , one can conclude that the algorithm runs in @xmath603 time for the initial @xmath163 , where @xmath604 and @xmath605 denotes the degree of @xmath2 at the beginning of splitting at @xmath2 .",
    "each iteration @xmath296 in the former process does not increase the number of arcs of the current graph and decreases the number of nodes by one , unless @xmath606 .",
    "so @xmath607 is at most @xmath608 . summing up the latter numbers over @xmath296",
    ", we obtain @xmath609 , which is worse than the time bound in theorem  [ tm : decom ] .    however , we can estimate @xmath335 more carefully , by using the inequality @xmath610 ( provided by merging parallel arcs incident with @xmath66 ) . for any integer @xmath611 ,",
    "apply the first bound on @xmath612 for @xmath613 , and the second bound for @xmath614 .",
    "this gives @xmath615 or @xmath616 .",
    "now taking @xmath617 , we obtain @xmath618 , and the theorem follows .",
    "in this section theorem  [ tm : decom ] is extended to ( skew-)symmetric flows . for a fixed @xmath560",
    ", we consider the problem :    * _ given an integer symmetric flow @xmath88 from @xmath619 to @xmath172 in a skew - symmetric graph @xmath0 , find a decomposition of @xmath88 of the form @xmath620 where each @xmath621 is an integer flow from @xmath293 to @xmath622 and @xmath623 is symmetric to @xmath621 .",
    "_    note that @xmath623 is a flow from @xmath314 to @xmath624 .",
    "so in the above decomposition , for @xmath625 , @xmath293 and @xmath622 are connected by the only flow @xmath621 if @xmath78 , by only @xmath626 if @xmath627 , and by the two flows @xmath628 and @xmath629 if @xmath630 .",
    "we show the following      this generalizes theorem  [ tm : decom ] for integer flows because a digraph @xmath537 with an integer @xmath171@xmath3 flow @xmath359 is turned into a skew - symmetric graph with an integer symmetric @xmath631@xmath632 flow by adding a disjoint copy of the reverse to @xmath537 with the flow reverse to @xmath359 in it .",
    "[ lm : lem ] let @xmath359 be a ( not necessarily symmetric ) half - integer flow from @xmath171 to @xmath3 in a skew - symmetric graph @xmath0 such that @xmath633 is an integer for each @xmath148 .",
    "let @xmath634 be integer .",
    "then there exists , and can be found in @xmath559 time , an integer flow @xmath162 in @xmath4 such that @xmath635 and @xmath636 for all @xmath148 .",
    "let @xmath637 be the set of arcs @xmath56 with @xmath638 .",
    "the integrality of @xmath634 implies @xmath639 , so the subgraph @xmath640 induced by @xmath637 is skew - symmetric .",
    "also the half - integrality of @xmath359 and the integrality of @xmath641 imply that each node is incident with an even number of arcs in @xmath637 .",
    "so the underlying undirected graph @xmath202 of @xmath642 is eulerian .",
    "we grow a ( simple ) path @xmath72 in @xmath642 such that @xmath643 , starting with an arbitrary node @xmath75 and allowing backward arcs in @xmath72 .",
    "let @xmath2 be the last node of the current @xmath72 , and choose an arc @xmath644 incident with @xmath2 and different from the last arc of @xmath72 ( @xmath56 exists as @xmath202 is eulerian ) .",
    "let @xmath57 be the end of @xmath56 different from @xmath2 .",
    "three cases are possible .",
    "( i ) if both @xmath645 are not in @xmath72 , we increase @xmath72 by adding @xmath646 , and continue the process .",
    "( ii ) if @xmath647 , we remove the part of @xmath72 from @xmath57 to @xmath2 , obtaining the new current path from @xmath75 to @xmath57 , and add @xmath56 to the removed part , forming circuit @xmath131 ( with possible backward arcs ) .",
    "( iii ) if @xmath648 , we remove the part @xmath130 of @xmath72 from @xmath205 to @xmath2 , obtaining the new current path , and add @xmath649 and @xmath58 to @xmath130 , forming circuit @xmath131 ( which is reverse to @xmath650 ) .    in case ( ii )",
    ", we update @xmath359 by pushing half - unit along @xmath131 ( i.e. , by setting @xmath651 for the forward arcs @xmath652 in @xmath131 , and @xmath653 for the backward arcs @xmath652 ) and by pushing half - unit along the circuit reverse to @xmath650 .",
    "accordingly , we update @xmath360 by pushing half - unit along @xmath650 and along the circuit reverse to @xmath131 . and in case ( iii ) , @xmath359 ( @xmath360 ) is updated by pushing half - unit along @xmath131 ( resp .",
    "@xmath650 ) . in both cases , the new @xmath360 is symmetric to the new @xmath359 and each of the functions @xmath634 and @xmath641 preserves",
    ". also @xmath637 decreases by the set of arcs occurring in @xmath654 , and the new @xmath202 is eulerian .",
    "we continue the process with the new @xmath72 .",
    "return to problem ( ds ) .",
    "add to @xmath4 new nodes @xmath655 and arcs @xmath656 and @xmath657 , forming skew - symmetric graph @xmath284 , and extend @xmath88 to an is - flow from @xmath71 to @xmath277 in @xmath284 in a natural way .",
    "the fact that @xmath88 is integer and symmetric implies that @xmath658 is even .",
    "so we can apply lemma  [ lm : lem ] to the flows @xmath659 , obtaining corresponding integer flows @xmath355 .",
    "the restriction @xmath660 of @xmath162 to @xmath163 is an integer flow from @xmath171 to @xmath176 , and we apply the @xmath441-algorithm from section  [ sec : decom ] to decompose it as @xmath661 where @xmath662 is an integer flow from @xmath293 to @xmath622",
    ". then the flows @xmath663 for @xmath180 , and @xmath664 for @xmath665 are as required , and theorem  [ tm : sdecom ] follows .",
    "[ cor : cor ] let @xmath88 be an is - flow from @xmath171 to @xmath176 in a skew - symmetric graph @xmath666 ( where @xmath667 is not fixed ) , and let @xmath173 be even for all @xmath148 .",
    "then there exists , and can be found in @xmath559 time , an integer flow @xmath359 from @xmath171 to @xmath176 such that @xmath668 and @xmath669 for all @xmath148 ."
  ],
  "abstract_text": [
    "<S> a graph ( digraph ) @xmath0 with a set @xmath1 of terminals is called _ inner eulerian _ if each nonterminal node @xmath2 has even degree ( resp . </S>",
    "<S> the numbers of edges entering and leaving @xmath2 are equal ) . </S>",
    "<S> cherkassky  @xcite and lovsz  @xcite showed that the maximum number of pairwise edge - disjoint @xmath3-paths in an inner eulerian graph @xmath4 is equal to @xmath5 , where @xmath6 is the minimum number of edges whose removal disconnects @xmath7 and @xmath8 . </S>",
    "<S> a similar relation for inner eulerian digraphs was established by lomonosov  @xcite . </S>",
    "<S> considering undirected and directed networks with `` inner eulerian '' edge capacities , ibaraki , karzanov , and nagamochi  @xcite showed that the problem of finding a maximum integer multiflow ( where partial flows connect arbitrary pairs of distinct terminals ) is reduced to @xmath9 maximum flow computations and to a number of flow decompositions .    in this paper </S>",
    "<S> we extend the above max - min relation to inner eulerian _ bidirected _ and _ skew - symmetric _ graphs and develop an algorithm of complexity @xmath10 for the corresponding capacitated cases . </S>",
    "<S> in particular , this improves the bound in  @xcite for digraphs . </S>",
    "<S> our algorithm uses a fast procedure for decomposing a flow with @xmath11 sources and sinks in a digraph into the sum of one - source - one - sink flows .    </S>",
    "<S> _ keywords _ : bidirected graph , skew - symmetric graph , edge - disjoint paths , multiflow .    _ ams subject classification _ : 90c27 , 90b10 </S>"
  ]
}