{
  "article_text": [
    "suppose @xmath0 is a long transaction with data operations on various variables while @xmath1 and @xmath2 are short transactions which just want to read the value of @xmath3 . in 2pl",
    ", we saw that the ` ro ` or likewise transactions ( here @xmath1 and @xmath2 ) suffer from time - lag until @xmath0 starts to unlock locks on @xmath3 .",
    "al resolved this problem to an extent in which once @xmath0 is done with @xmath3 , it donates the lock to @xmath1 and @xmath1 reads the current version of x and similarly for @xmath2 . by current ,",
    "most recent committed version is implied ( here @xmath4 ) .",
    "now , if no further writes on @xmath3 take place , the write of @xmath0 on @xmath3 is useless since @xmath1 and @xmath2 read from @xmath5 .",
    "if we know that @xmath0 will not abort , we can read from uncommitted versions as well i.e. @xmath1 and @xmath2 turn by turn can read either from @xmath4 or from @xmath6 if versions are assigned .",
    "hence more usefulness in terms of garbage collection and donation of locks is seen with a multiversion variant .",
    "the notion of a multiversion variant of altruistic locking can be seen from the motivation provided above . from now on , we ll abbreviate this protocol as mal .",
    "+ the key point in this protocol like al would be donation of locks . like al",
    ", locks would be donated on variables but now since read operations have multiple choices of versions to read from , the field of conflicts ( now multiversion ) would be less and thus would allow more concurrency than al ; its single - version counterpart protocol .      the first three rules would be similar to al of course . + `",
    "mal1 ` : items can not be read or written by @xmath7 once it has donated them ; that is , if @xmath8 and @xmath9 occur in a schedule @xmath10 , then @xmath11 .",
    "+ ` mal2 ` : donated items are eventually unlocked ; that is , if @xmath8 occurs in a schedule @xmath12 following an operation @xmath9 , then @xmath13 is also in @xmath12 and @xmath14 .",
    "+ ` mal3 ` : transactions can not hold conflicting locks simultaneously , unless one has donated the data item in question ; that is , if @xmath9 and @xmath15 , are conflicting operations in a schedule @xmath12 and @xmath16 , then either @xmath17 , or @xmath8 is also in @xmath12 and @xmath18 . + the terminology of wake , completely in wake , indebted also is on similar lines .",
    "intuitively , if transaction @xmath19 locks a data item that has been donated and not yet unlocked by transaction @xmath7 , @xmath20 , we say that @xmath19 is in the wake of @xmath7 .",
    "more formally , we have the following :    1 .",
    "an operation @xmath21 from transaction @xmath19 is in the wake of transaction @xmath7 , @xmath22 , in the context of a schedule @xmath12 if @xmath23 and @xmath24 for some operation @xmath9 from @xmath7 .",
    "a transaction @xmath19 is in the wake of transaction @xmath7 if some operation from @xmath19 is in the wake of @xmath7 .",
    "transaction @xmath19 is completely in the wake of @xmath7 if all of its operations are in the wake of @xmath7 .",
    "a transaction @xmath19 is indebted to transaction @xmath7 in a schedule @xmath12 if @xmath9,@xmath8,@xmath25 such that @xmath21 is in the wake of @xmath7 and either @xmath9 and @xmath21 are in conflict or some intervening operation @xmath26 such that @xmath27 is in conflict with both @xmath9 and @xmath21 .",
    "@xmath28    @xmath29 is conflict serializable .",
    "but if @xmath30 would be replaced by @xmath31 , @xmath29 would not be in csr but still would be allowed by al .",
    "so we had introduced al4 .",
    "+ ` al4 ` : when a transaction @xmath19 is indebted to another transaction @xmath7 , @xmath19 must remain completely in the wake of @xmath7 until @xmath7 begins to unlock items .",
    "that is , for every operation @xmath21 occurring in a schedule @xmath12 , either @xmath21 is in the wake of @xmath7 or there exists an unlock operation @xmath32 in @xmath12 such that @xmath33 .",
    "+ so @xmath29 with either @xmath30 or @xmath31 is not passed by al .",
    "@xmath30 schedule is in csr though .",
    "thus a valid schedule is not passed through al and hence poses an eminent shortcoming .      in mal ,",
    "the conflicts are only @xmath35 since only multiversion conflicts are considered . thus consider two cases in the above @xmath29 :    1 .   when @xmath30 , no problem is faced anyways .",
    "2 .   when @xmath31 , a new version of @xmath36 is created and no new @xmath35 conflict is created . hence the schedule is still in mvcsr and hence also passed by mal .",
    "hence mal is more flexible and allows more concurrency than al .",
    "thus mal4 is a more flexible version of al4 in which the conflicts are of the form @xmath35 instead of all @xmath35 , @xmath37 and @xmath38 .",
    "therefore it can be concluded that al @xmath34 mal .",
    "@xmath39    in schedule @xmath12 , @xmath35 conflicts exist from @xmath40 to @xmath41 and @xmath41 to @xmath40 .",
    "hence the schedule is not in mvcsr .",
    "however it will get passed using mal1 - 3 rules which should be prohibited .",
    "therefore it is required to define another rule mal4 to handle the problem .",
    "+ ` mal4 ` : when a transaction @xmath19 is indebted ( @xmath35 conflicts only ) to another transaction @xmath7 , @xmath19 must remain completely in the wake of @xmath7 until @xmath7 begins to unlock items .",
    "that is , for every operation @xmath21 occurring in a schedule @xmath12 , either @xmath21 is in the wake of @xmath7 or there exists an unlock operation @xmath32 in @xmath12 such that @xmath33 .",
    "+ we have now completely described the rules of mal .",
    "* _ gen(mal ) @xmath34 mvcsr _ * + it essentially follows a standard argument , namely , that any mal - generated history @xmath12 has an acyclic conflict graph .",
    "it can be shown that each edge of the form @xmath42 in such a graph @xmath43 is either a `` wake edge , '' indicating that @xmath19 is completely in the wake of @xmath7 , or a `` crest edge , '' indicating that @xmath7 unlocks some item before @xmath19 locks some item .",
    "in addition , for every path @xmath44 in @xmath43 , there is either a wake edge from @xmath40 or @xmath45 , or there exists some @xmath46 on the path such that there is a crest edge from @xmath40 to @xmath46 .",
    "these properties suffice to prove the claim .",
    "+ strict inclusion of mal @xmath34 mvcsr has been shown later with an example .",
    "we know that al is an extension of 2pl where donation of locks is permitted .",
    "long transactions hold onto locks until they commit and do not allow other transactions to execute .",
    "similar problem can be observed in case of mv2pl as well .",
    "if a secondary small transaction needs to access a subset of data items which are currently locked by the primary transaction , read and write operation will get executed however commit will get delayed due to unavailability of the certify lock ( certify lock is a type of lock that a transaction needs to acquire on all data items it has written to at the time of commit ) .",
    "hence the secondary transaction will have to delay itself until the primary transaction releases all its locks .",
    "+ if donation of locks is allowed in mv2pl then lock on certain data item can be donated to the secondary transaction which can commit without delaying itself by acquiring the certify lock .",
    "handling of individual steps remains same as followed by mv2pl .",
    "inclusion of donation of locks into mv2pl inspires the mal scheduling protocol . in the next section",
    "we will infact see that + mv2pl @xmath34 mal .",
    "@xmath47    either @xmath3 or @xmath48 ( or both ) must be locked by @xmath40 between operations @xmath49 and @xmath50 . by rule al1 , either @xmath3 or @xmath48 ( or both )",
    "must be donated by @xmath40 for @xmath51 and @xmath52 to occur , so either @xmath41 or @xmath53 ( or both ) must be indebted to @xmath40 .",
    "however , neither @xmath54 nor @xmath55 are allowed to be in the wake of @xmath40 if the latter is well formed , since @xmath40 later reads @xmath56 .",
    "hence either @xmath41 or @xmath53 violate rule al4 .",
    "+ however as mal allows donation of locks @xmath40 can donate lock to @xmath41 for certification and can commit . hence @xmath40 need not acquire lock read lock on @xmath48 along with lock on @xmath3 . lock on @xmath48 can be obtained at read time .",
    "we know that 2pl@xmath34 al as al is a relaxed version of 2pl .",
    "following the previous comparison 2pl@xmath34 mal .",
    "hence we can also conclude that 2pl@xmath34mal .",
    "@xmath57    generating the output as per mv2pl rules , @xmath58 will get executed by acquiring locks on respective data items .",
    "however @xmath41 can not acquire certify lock on @xmath3 due to conflict with @xmath59 and will have to wait .",
    "@xmath53 will acquire @xmath60 and execute @xmath61 . following this",
    "no transaction would proceed due to deadlock .",
    "@xmath40 ca nt acquire lock on @xmath56 due to conflict with @xmath53 , @xmath41 can not acquire certify lock on @xmath3 due to conflict with @xmath40 and @xmath53 can not acquire write lock on @xmath48 due to conflict with @xmath41 .",
    "hence the schedule wo nt get accepted under mv2pl protocol .",
    "+ in case of mal @xmath40 can donate lock on @xmath3 to @xmath41 so that @xmath41 can commit using certify lock on @xmath3 and @xmath48 . following",
    "which @xmath53 can acquire write lock on @xmath48 and commit as well . at the end",
    "@xmath40 will commit by obtaining certify lock on @xmath56 .",
    "2v2pl is just a special case of mv2pl where only two versions of a particular data item are allowed .",
    "hence we conclude that 2v2pl @xmath34 mal .",
    "@xmath62    the @xmath35 conflicts in schedule @xmath12 are from @xmath40 to @xmath41 .",
    "the conflict is acyclic and the schedule is in mvcsr .",
    "but the mal runs into a deadlock while scheduling @xmath12 .",
    "@xmath63 get executed by acquiring locks on respective data items . as @xmath40 can not acquire write lock on @xmath48 due to conflict with @xmath41 the operation will get delayed .",
    "@xmath40 would have to donate its lock to @xmath41 for it certify write on @xmath3 and @xmath48 .",
    "as per rule 1 of mal , once a lock on a data item has been donated by a transaction , then that transaction can not carry out any operation on that data item .",
    "hence @xmath64 will not get executed .",
    "therefore the schedule can not be generated by mal .",
    "as mvsr @xmath34 mvcsr , using transitivity we can conclude that mal @xmath34 mvsr .",
    "* mal + mvto * +     due to donations of locks , detection of aborted transactions of late writers can be done quickly saving both storage space and time . +",
    "if we know that a long transaction has only reads after a short span of the transaction time , it wo nt abort in mvto ( since aborts happen only due to write operations ) . in this case",
    ", @xmath41 is one such transaction .",
    "@xmath53 has a donated lock on @xmath3 from @xmath41 .",
    "the altruism is predominant in the fact that a transaction ca nt commit until all transactions it has read from have committed .",
    "we change this .",
    "if we know @xmath41 has only reads after writing @xmath3 , we know it wo nt abort . if @xmath53 reading from @xmath41 commits , @xmath65 is aborted since it has a late writer on @xmath56 ( @xmath66 reads @xmath56 from @xmath53 ) .",
    "@xmath66 is able to read @xmath56 from @xmath53 since it is committed ; otherwise it would have to read from @xmath67 and hence @xmath68 and @xmath69 would have gone to waste due to @xmath53 waiting for @xmath41 to complete which would be a waste of space . +",
    "thus mal + mvto is more successful than mvto in this scenario .",
    "1 .   storage space would be required to store all versions of all variables .",
    "2 .   this could be expensive if there are more ` rw ` transactions than ` ro ` transactions .",
    "3 .   to avoid rollback , which would be very expensive considering the versions assigned , we should be pretty sure that there would not be any or very less number of aborts ."
  ],
  "abstract_text": [
    "<S> _ this paper builds on altruistic locking which is an extension of 2pl . </S>",
    "<S> it allows more relaxed rules as compared to 2pl . but altruistic locking too enforces some rules which disallow some valid schedules ( present in vsr and csr ) to be passed by al . </S>",
    "<S> this paper proposes a multiversion variant of al which solves this problem . </S>",
    "<S> the report also discusses the relationship or comparison between different protocols such as mal and mv2pl , mal and al , mal and 2pl and so on . </S>",
    "<S> this paper also discusses the caveats involved in mal and where it lies in the venn diagram of multiversion serializable schedule protocols . </S>",
    "<S> finally , the possible use of mal in hybrid protocols and the parameters involved in making mal successful are discussed . _ </S>"
  ]
}