{
  "article_text": [
    "we give some basic definitions in this section .",
    "considered by many , to be the most famous np - complete problem , the traveling salesman problem ( tsp ) takes any graph , @xmath4 with edge weights , as an input and outputs a minimum length tour , which spans all the vertices , such that each vertex , @xmath5 appears exactly once on the tour .",
    "consider that we have an edge weight function , @xmath6 , such that it satisfies the triangle inequality , @xmath7 for some @xmath8 .",
    "the metric version takes a complete graph and the weight function as an input and it is known that a metric version of the problem always has a cyclic tour , while a non - metric version may not have a tour at all .",
    "so , we are generally interested in finding poly time approximation schemes for the metric tsp.the symmetric version has edge weights exactly the same in both the directions of the edge from two vertices and hence , does not apply to directed graphs while the asymmetric problem ( atsp ) deals with graphs , where the anti - parallel edges do not have the same weights .",
    "it is easy to see that the symmetric version is a spacial case of the asymmetric one .",
    "we will consider the metric atsp for our analysis.section 2 gives the total analysis of the feige - singh algorithm and section 3 gives the analysis of the algorithm of asadpour et.al .",
    "[ 1 ] provides a modest improvement in the leading constant of the approximation ratio , which was achieved by [ 3 ] and the total result is summarized in the following theorem below._theorem 1 : _",
    "there exists a polynomial time algorithm which returns a hamiltonian cycle of weight at most @xmath9 of the weight of the minimum cost hamltonian cycle in a given directed graph , @xmath4 , having a weight function , @xmath10 satisfying the triangle inequality.let us look at some of the definitions , that we will be using throughout .",
    "consider that , we are given a graph @xmath4 , a starting vertex @xmath11 and a terminal vertex @xmath12._definition 2.1 : _",
    "we call a @xmath13 walk in @xmath14 _ * spanning * _ if it visits every vertex of @xmath14 at least once and thus , vertices and edges can appear more than once in the walk .",
    "a tour is an @xmath15 walk which is spanning._definition 2.2 : _  given a directed path @xmath16 and vertices @xmath17 and @xmath18 on @xmath16 , such that @xmath18 occurs after @xmath17 on @xmath16 , we denote @xmath19 to be the _ * subpath of p * _ , starting at @xmath17 and ending at @xmath18._definition 2.3 : _  given two paths , @xmath16 and @xmath20 , we say that _ * q respects the ordering of p * _ if @xmath20 contains all the vertices of @xmath16 and for every two vertices @xmath17 and @xmath18 in @xmath16 , @xmath17 appears before @xmath18 in @xmath20 iff @xmath17 appears before @xmath18 in @xmath16 .",
    "the asymmetric traveling salesman path problem ( atspp ) is an interesting variant of the atsp , in which we need to find a minimum weight hamiltonian path from nodes @xmath11 to @xmath12 , given an instance of the graph , the weight function @xmath10 , satisfying triangle inequality and the two nodes , @xmath11 and @xmath12.it will be shown in the next subsections , that the atspp can be approximated nearly as well as the atsp.say , we have the starting node @xmath11 and the ending node , @xmath12 as an instance to the atspp and let @xmath21 denote the spanning path from @xmath11 to @xmath12 of minimum cost .",
    "we assume wlog , that for every two vertices @xmath17 and @xmath18 in the graph , there exists an edge @xmath22 which is the shortest distance between them .",
    "there is a spanning minimum weight non - simple path between @xmath11 and @xmath12 and if we have the value of @xmath21 lesser than the distance between @xmath12 and @xmath11 ( denoted by @xmath23 ) , we simply remove all incoming and outgoing edges from @xmath11 and @xmath12 respectively(hence , we formally made them the starting and ending nodes ) and update the edge weight of the newly constructed edge @xmath24 , by @xmath25 and thus , we get a non - simple atsp tour of weight @xmath26 , which can be at most @xmath27 . assuming that we have the @xmath28-approximation algorithm for the atsp , we find a simple atsp tour of weight not exceeding @xmath29 and remove the edge @xmath24 , thus having a spanning path from @xmath11 to @xmath12 of weight at most @xmath30 .",
    "but , if the weight of the edge @xmath22 becomes smaller than the original graph when we added the edge @xmath24 , then we add the path @xmath31 and hence , the edge @xmath24 re - appears again .",
    "hence , if we do this for @xmath32 times , @xmath24 gets added @xmath32 times and we have to remove it from all the @xmath32 cases to get @xmath32 spanning paths covering all the vertices together as a whole , such that the summation of all the path weights is at most @xmath33 .",
    "now , we show in lemma 1 , that such a single path from @xmath11 to @xmath12 exists , which respects the order of each of the paths and does not have much increase in its weight .",
    "now , we construct an algorithm for the atspp , given an @xmath28 approximation algorithm for the atsp.let us have an instance , @xmath34 for the atspp , where @xmath35 is the @xmath28-approximation algorithm for the atsp , @xmath36 is some parameter and @xmath10 satisfies the triangle inequality for the directed graph @xmath14 , having @xmath37 vertices .",
    "consider the algorithm , @xmath38 below for atspp.@xmath39 1 .",
    "find some positive @xmath40 $ ] .",
    "2 . construct graph @xmath41 by removing incident edges on @xmath11 and outgoing edges from @xmath12 and adding an edge @xmath24 of weight @xmath42.let the weight function of this graph be @xmath43 .",
    "3 . call @xmath35 on the complete directed graph ( say @xmath44 ) on the set of vertices of @xmath14 and let @xmath45 be the edge weights of @xmath44.let the @xmath28-approximate solution be @xmath46 .",
    "( @xmath47 is nothing but the shortest distance from @xmath17 to @xmath18 under @xmath43 ) 4 .",
    "replace each edge @xmath22 in @xmath41 by its corresponding shortest path and obtain a tour , say @xmath48 in @xmath41 .",
    "decompose @xmath48 into a collection of @xmath32 subpaths ,  @xmath16 spanning all the vertices ,  where @xmath32 is the no . of times",
    "the edge @xmath24 appears and then shortcut them to a single path , where each vertex ( except of course @xmath11 and @xmath12 ) appears exactly once in one of the paths .",
    "return @xmath49 .",
    "@xmath50 is the algorithm , which actually tries to construct a single path , out of all the @xmath32 subpaths , such that the weight of the resulting path is not very large and follows the order of all the original paths .",
    "it takes the collection @xmath51 of @xmath13-paths and @xmath52 as its input.@xmath49 1 .",
    "if @xmath53 return @xmath54 , else let @xmath55 2 .",
    "find minimum weight path @xmath56 , spanning all the vertices of @xmath57 , which respects their order .",
    "@xmath58 4 . return @xmath59 the construction and performance of the algorithms described above , which help in the conversion of atsp to atspp are based on the lemma described next .",
    "_ lemma 1 : _  consider we have a collection of @xmath60 paths @xmath61 from @xmath11 to @xmath12 , such that no vertex appears in more than one path , then we can construct a single path from @xmath11 to @xmath12 that spans all the vertices in the @xmath60 paths , respects the order of each of the original paths and weighs no more than the sum of the summation of the weights of all the @xmath60 paths and @xmath62 , where @xmath21 is the weight of the minimum atspp .",
    "though , we wo nt give the whole proof , but would mention the main points , on which the proof stands .",
    "the proof is simple and the reader can refer [ 1 ] for the details . for each path , @xmath63 we create prefix paths @xmath64 and a path , @xmath20 , which is to be constructed from @xmath11 to @xmath12 in each iteration , such that it covers all the vertices of the prefix paths and maintain their order .",
    "we maintain nodes , known as the front nodes for each path @xmath63 and it is nothing but the successor of each @xmath64 in @xmath63 , when the algorithm runs iteratively . in simple words ,",
    "@xmath65 for each path @xmath63 is the vertex , such that all the ordered vertices before it in the path have already been explored by the algorithm .",
    "let us assume that the optimal atspp from @xmath11 to @xmath12 is the path @xmath16 and @xmath19 is the subpath from any two vertices @xmath17 and @xmath18 in the path @xmath16.let @xmath18 be the last vertex of the path @xmath20 . _",
    "the main argument of the proof is an invariant , that all the front vertices for each path , @xmath63 occur in the subpath , @xmath66.(the front vertex of some path @xmath67 , which contains @xmath18 may or may not be in the subpath @xmath66)_. so , if we initialize the path @xmath20 and all the prefix paths to be @xmath68 and the front vertex for each path , to be the second vertex for each given @xmath63 , then the invariant gets trivially satisfied . in every iterative step of the algorithm ,",
    "one or two paths advance their front vertex and @xmath20 continues to be created till it reaches the terminal vertex , @xmath12 .",
    "[ 1 ] also shows that any edge of @xmath16 can be used at most @xmath60 times.moreover , the subpaths of @xmath63 in the path , @xmath20 are edge disjoint for all @xmath69 , which can be easily deduced from the statement of the invariant and the functioning of the iterative steps of the algorithm .",
    "hence , the weight of the single path , which we constructed from @xmath11 to @xmath12 , can never exceed the sum of the summation of the weights of all the paths , @xmath63 and @xmath60 times the weight of the optimal path , @xmath16 .",
    "thus , @xmath70 .",
    "now , by simple observation , if we replace all the @xmath71s by @xmath20 , then in each iteration , the weight of the new collection of paths increase by @xmath62 , by lemma 1 and number of paths reduce by @xmath72 .",
    "the maximum number of iterations of algorithm @xmath50 could be @xmath73 and hence , the maximum increase in weight could be @xmath74 , for a collection of @xmath32 @xmath13 paths .",
    "thus , for the final constructed path , @xmath20 by the algorithm , we have @xmath75.we know that @xmath21 is the weight of the optimal spanning path from @xmath11 to @xmath12 in @xmath41 , under the weight function @xmath43.since , the weight of the edge @xmath24 in @xmath44 is @xmath42 , hence the optimal hamiltonian path in @xmath44 has a weight of @xmath76.if we remember the functioning of algorithm @xmath38 , we called @xmath35 on @xmath44 and hence , returns a hamiltonian cycle , say @xmath50 of @xmath44 , of a weight not exceeding @xmath77 .",
    "now , if we remove all the @xmath32 copies of the edge @xmath24 , having a weight @xmath42 and decompose the path , @xmath48 into a single path spanning all the vertices , then the summation of the weights of all the initial @xmath32 @xmath13 paths gets decreased by @xmath78 from the previous value and hence , @xmath79 .",
    "also , algorithm @xmath50 returns a single path , @xmath20 such that @xmath75 in time @xmath80 .",
    "thus , @xmath81 .  using , @xmath82 and @xmath83",
    ", we get @xmath84 .",
    "now , we are in a position to construct a theorem and is written below . _ theorem 2 _ :  consider that , we are provided with a directed graph , @xmath14 with a weight function @xmath10 , satisfying triangle equality , vertices @xmath11 and @xmath12 and an @xmath28 approximation algorithm to the atsp , such that @xmath21 is the minimum weight hamiltonian path from @xmath11 to @xmath12",
    ". then , there exists an algorithm , which gives a hamiltonian path from @xmath11 to @xmath12 of weight no more than @xmath85 , for some constant positive @xmath52 .",
    "finally , they showed that the klss algorithm has not tight bounds and could be improved to @xmath86 approximation and ending by further improving the approximation ratio to @xmath87 , by slightly modifying the algorithm .",
    "the klss analysis , uses the following lp for atsp , which enforces sub - tour elimination constraints for subsets of size two .",
    "minimize @xmath88 s.t  @xmath89 @xmath90 @xmath91 @xmath92 and @xmath93 are the set of edges going out and coming in , of the vertex @xmath18 and @xmath94 for an edge @xmath95 is set to 1 , if it is in the hamiltonian cycle .",
    "the main lemma , on which the klss construction depends , is stated below .",
    "_ lemma 2 _ :  consider , we are given a directed graph , @xmath14 whose edges are weighted and let us have an optimal solution,@xmath21 ,  to the lp - atsp problem , described above .",
    "then , there exists an efficient algorithm which finds two cycle covers , @xmath96 and @xmath97 such that they do not have a common 2-cycle and the summation of their weights , does not exceed @xmath98 .",
    "klss algorithm finds such a @xmath96 and @xmath97 and constructs another cover , @xmath99 and chooses only that cover , such that it satisfies , @xmath100 , where @xmath101 is the number of nodes for the @xmath102 iteration and @xmath103 gives the number of components , for the cover .  finally , for each connected component",
    ", we pick one representative vertex and delete the rest of them and continue the iteration to the next stage , until we have only one component left .",
    "we simply return the solution , @xmath104 , where @xmath105 denotes the cover selected in the @xmath102 iteration and @xmath60 is the total number of iterations .",
    "the improvement in the approximation ratio is achieved by scaling down the values of @xmath106 and @xmath107 , such that we have new variables , @xmath108 and @xmath109 and formulating a new lp problem on these variables and also , adding all the previous lp constraints as a representation of these variables .",
    "( refer [ 1 ] for the algebraic proof . ) at the end , klss algorithm is slightly modified , where instead of choosing one of the covers , @xmath96 , @xmath97 or @xmath110 minimizing the potential function , @xmath111 , we decompose @xmath110 into two eulerian sub - graphs .",
    "the construction relies on the main lemma below .",
    "_ lemma 3 _ :  consider , we have a directed graph , @xmath4,where @xmath112 , which is connected and does not contain self - loops , such that every vertex has both in and out degrees to be two .",
    "then , there exists either two vertex disjoint cycles of length 2 or one cycle of length at least 3 , such that if we remove all the edges of these cycles from the graph , the graph still remains connected .",
    "now , initially we had three cycle covers and we chose , the best of them in each iteration .",
    "but , in this case of modified version , we create @xmath113 and @xmath114 , where @xmath114 is the set of cycles , chosen from each component of @xmath110 ( each of the components remains connected by lemma 3 ) and @xmath115 .  in this case ,",
    "for each iteration , we choose either @xmath113 or @xmath114 , whoever minimizes the function , @xmath111 , where @xmath101 is the number of nodes in the current graph .",
    "the remaining algorithm stays the same as the previous .",
    "finally , using the scaled down version of the functions , @xmath116 and @xmath103 and slightly modifying the lp relaxation problem , we obtain that for each iteration,@xmath69 , @xmath117 , where @xmath105 must be either @xmath113 or @xmath114 and thus , giving a deterministic @xmath0 approximation algorithm for the atsp , with an improved leading constant .",
    "[ 2 ] provides an @xmath118 randomized algorithm for the asymmetric tsp , for edge weights satisfying the triangle inequality .",
    "let us describe some notations .",
    "we use @xmath22 to denote a directed edge from @xmath17 to @xmath18 , while @xmath119 for an undirected edge and @xmath35 and @xmath120 to be the set of directed and undirected edges in a directed and undirected graph respectively .",
    "the cost of a function ,  @xmath121,denoted by @xmath122 , can be defined as @xmath123 and consider that we have a subset , @xmath46 of @xmath35 , then we have @xmath124 .  for a directed graph , with the vertex set as @xmath125 ,",
    "consider the following notations below for @xmath126 : @xmath127 @xmath128 @xmath129 now , similar notations can be written for an undirected graph , with edge set @xmath120 and the same vertex set , @xmath125 as below for @xmath126 : @xmath130 @xmath131 now , let us discuss the held - karp relaxation and obtain , a scaled down symmetric solution lying within a convex spanning tree polytope . before defining the relaxation , let us define the variable @xmath132 , for an edge @xmath133 .",
    "we have , @xmath134 , if the edge @xmath135 is in the optimal tour , otherwise it is @xmath136 .",
    "we relax this variable , from @xmath137 to @xmath138 $ ] .",
    "consider , we are given an instance of the atsp , such that the cost function , @xmath139 is well defined , then a lower bound could be obtained on the optimal tour cost if we solve the following lp below , defined on the complete bi - directed graph with @xmath125 as the vertex set :  minimize @xmath140  s.t  @xmath141  @xmath142 @xmath143",
    "@xmath144 @xmath145  @xmath146",
    "let the optimal tour solution of the lp be @xmath147 , such that the cost of this tour is @xmath148 , i.e @xmath149 and hence , we could assume that @xmath147 is an extreme point of the corresponding polytope . for , an undirected edge , @xmath150 , we define a symmetric scaled down version of the held - karp solution , so that the resuting vector supports edmond s characterization of the base polytope of a matroid and thus , can be made to fall in the relative interior of a spanning tree polytope.(refer [ 2 ] for the short proof ) .",
    "we have , @xmath151 thus , we have , @xmath152 let , @xmath35 and @xmath120 denote the support of the vectors @xmath147 and @xmath153 respectively and let the cost , @xmath154 of an undirected edge , @xmath155 be the minimum of the cost of the two directed edges , @xmath22 and @xmath156 common to the support , @xmath35 .",
    "hence , it is easy to see that @xmath157 .",
    "hence , we could see that the vector , @xmath153 can be expressed as a convex combination of the spanning trees , such that the co - efficient corresponding to every spanning tree is positive .",
    "now , the next goal is to round @xmath153 from a point in the relative interior of the spanning tree polytope to a spanning tree , using a distribution over the spanning trees of the graph , @xmath14 , such that the marginal probability imposed by @xmath153 is preserved .",
    "consider , we have a collection of all the spanning trees , @xmath48 of the graph , @xmath4 and we denote this set , by @xmath158 .",
    "let the entropy distribution function function be represented by @xmath159 .",
    "then , the maximum entropy distribution , say @xmath160 , with respect to given marginal probabilities , say @xmath161 is known to be the optimum solution of the following convex program  ( t denotes a spanning tree ) : infimum  @xmath162 s.t  @xmath163  @xmath164 @xmath165 let us construct a lagrange function , @xmath166 , by associating a lagrange multiplier , @xmath167 for every edge @xmath168 , for which the marginal probability is @xmath169 and we have , @xmath170 .",
    "we have , @xmath171 @xmath172 hence , for the lagrange dual , we have to calculate the supremum of the infimum of the lagrange function , i.e @xmath173 . for the infimum",
    ", we could actually minimize the function , @xmath174 , use basic differential calculus of analyzing the maxima / minima and then find the function , @xmath175 .",
    "the function , @xmath175 is found to be an exponential function after the calculations .",
    "we have @xmath176 , where @xmath177 .",
    "( thus , for each edge we have @xmath178 )  the value of the infimum becomes , @xmath179 .  hence , for the lagrange dual , we need to find the supremum of this infimumn , for all values of @xmath180 .",
    "let , the vector , which makes the value of this dual , equal to the optimum value of the original convex program , be @xmath181 .  by the analysis of saddle points",
    ", we can say that @xmath182 is the unique minimizer of the lagrange dual , @xmath183 .",
    "hence , we have @xmath184 .",
    "so , we are in a position to write the first theorem , after the construction of the exponential distribution , for sampling the spanning trees , which preserves the values of the marginal probabilities of the edges .",
    "_ theorem 1 _ :  there exist @xmath185 for all edges , @xmath95 , such that if we sample a spanning tree , @xmath48 of the graph , @xmath14 according to the exponential distribution , @xmath184 , then the marginal probability of an edge belonging to the tour is preserved with respect to a given vector , which lies in the relative interior of a spanning tree polytope .",
    "let us define an exponential family distribution,@xmath186 .",
    "consider , for a collection of spanning trees , @xmath158 , we define @xmath187 .",
    "after , constructing this distribution , a combinatorial approach for efficiently calculating the values of the @xmath188s for all edges , @xmath168 can be developed , such that for a given @xmath161 in the spanning tree polytope of the graph , @xmath4 and some @xmath189 , if we sample a spanning tree according to the distribution , the value of @xmath190 for each edge , never exceeds @xmath191 and hence , the marginals are preserved .",
    "( the detailed analysis has not been provided due to space limitations .",
    "reader may refer [ 2 ] for the technical details of the combinatorial approach ) .",
    "now , the authors note that the sampling of spanning trees , according to the exponential family distribution , constructed above , follows many rules of @xmath192-random trees .",
    "so , we need to define what is a @xmath192-random tree . given , values @xmath193 , for all edges @xmath168 , a @xmath192-random tree @xmath48 of the graph @xmath14 is a tree chosen from the set of all spanning trees of @xmath14 , with a probability which is proportional to the product of the values of all the @xmath194  s , for the edges @xmath95 in the tree @xmath48 .",
    "if we do a careful observation of the method of sampling the spanning trees of @xmath14 according to the exponential family distribution , we could see that the tree @xmath48 sampled is indeed a @xmath192-random tree for @xmath195.the main idea for constructing a @xmath192-random tree is by an iterative approach , in which we order all the edges of @xmath14 in an arbitrary fashion and then deciding probabilistically , whether to add a given edge to the tree or discard it .",
    "more precisly , if we know one edge that is in the tree for our initial assumption and all the values , @xmath194  s , then the probability , @xmath196 for an edge @xmath197 to be in the tree can be obtained by contracting all edges that have already been decided to be added to the tree and deleting all the other edges , that have already been decided to be deleted .  hence , we need to calculate the probability that some edge is in a @xmath192-random tree , given all the @xmath194  s to find the @xmath196  s to construct the tree and efficient methods for this calculation are well known .",
    "now , we will define the thinness property of a tree , @xmath48 and use a known theorem for the concentration bound of the @xmath192-random trees to show that if we sample @xmath0 independent trees according to the distribution , @xmath198 , then we have high chances that the tree minimizing the cost , among all the sampled ones , is thin and can not exceed two times the optimal solution cost of the held - karp bound . _",
    "definition 1 _ : a tree @xmath48 is @xmath199 thin if for each possible set @xmath200 , we have @xmath201 and the cost of it does not exceed , @xmath202 .",
    "moreover , for each edge @xmath168 and a tree @xmath48 consider that , we have a random variable , @xmath203 , such that @xmath204 , when @xmath205 and is 0 , otherwise .",
    "if , for some @xmath206 , we have @xmath207 , then the authors use the fact ( it is also a theorem ) that @xmath208\\leq \\left(\\frac{e^{\\delta}}{(1+\\delta)^{1+\\delta}}\\right)^{\\mathbb{e}[x(c)]}$ ] .",
    "now , we define the following lemma . _ lemma 1 _ : consider , we sample a spanning tree @xmath48 according to the exponential family distribution , @xmath198 , of a graph @xmath4 , where @xmath209 , then for any set , @xmath200 , we have @xmath210\\leq n^{-2.5z^{*}\\delta(u)}$ ] , for some @xmath211 and @xmath212 . _ proof _ : since , we are approximating the vector , @xmath153 with the vector @xmath213 and we are sampling the tree , @xmath48 according to @xmath198 , hence , as mentioned earlier , we have @xmath214=\\tilde{z}(\\delta(u))\\leq ( 1+\\epsilon)z^{*}\\delta(u)$ ] for @xmath200 .",
    "let us take @xmath215 .",
    "we also , have @xmath216}{1+\\epsilon}$ ] and using , @xmath217 , we have @xmath218\\leq pr[|t\\cap \\delta(u)|>(1+\\delta).\\mathbb{e}[|t\\cap \\delta(u)|]\\ ] \\ ] ] @xmath219}=\\left(\\frac{e^{\\delta}}{(1+\\delta)^{1+\\delta}}\\right)^{\\tilde{z}(\\delta(u))}\\ ] ] @xmath220 @xmath221^{z^{*}(\\delta(u))}\\leq n^{-2.5z^{*}(\\delta(u))}\\ ] ] which , could be obtained by basic algebra and taking @xmath212 .",
    "now , we are in a position , to state one of the most important theorems of the section , below . _",
    "theorem 2 _ : consider , we have a collection of @xmath222 , independently drawn sample trees of @xmath4 , according to the distribution @xmath198 and let , @xmath223 be the tree , with the minimum cost among all of them .",
    "then , @xmath223 is @xmath224 thin with a high probability , for @xmath225 and some @xmath226 .",
    "_ proof _ : let us have the trees , @xmath227 and for any , @xmath228 $ ] and a cut , @xmath229 , we know , from the previous lemma that @xmath230\\leq n^{-2.5z^{*}\\delta(u)}\\ ] ] also , due to karger , we know that , there can be at most @xmath231 cuts whose sizes do not exceed @xmath232 times the value of the minimum cut size , hence , we have at most @xmath233 cuts @xmath229 , such that @xmath234 , for @xmath235 .  hence , the probability that there exists some cut , @xmath229 , which violates the @xmath236 thin - ness of some tree @xmath237 is at most , @xmath238 , for @xmath225 , which is a very low value .",
    "again , @xmath239\\leq \\sum_{e\\in e}\\tilde{z_{e}}\\leq \\sum_{e\\in e}(1+\\epsilon)z_{e}^{*}\\leq ( 1+\\epsilon)opt_{hk}$ ] .  by markov s inequality",
    ", we have @xmath240\\leq \\frac{(1+\\epsilon)opt_{hk}}{2opt_{hk}}=\\frac{(1+\\epsilon)}{2}$ ] . since , we drew @xmath241 independent samples , hence the probability that the cost of the minimum tree exceeds @xmath242 , can not exceed @xmath243 .  hence ,",
    "@xmath244 > 1-\\frac{1}{n}$ ] , which is a very high value .",
    "so , we finally have our thin spanning tree , @xmath223 and we will finally , convert it to an eulerian walk and finally convert it to a hamiltonian cycle , by shortcutting , of no greater cost .",
    "at first , we will modify our tree , @xmath223 to a directed tree , @xmath245 , then construct upper and lower circulation capacity functions according to the rules of hoffman s circulation theorem and formulate the problem as a minimum cost circulation problem and finally show , that the resulting hamiltonian cycle , has not much higher cost .",
    "let us re - orient each undirected edge , @xmath119 in the tree @xmath223 by looking the corresponding directed edges , @xmath22 and @xmath156 , if they are present in the directed edge set @xmath35 ( at least one must be present ) and then choosing the one with minimum cost .",
    "also , due to the undirected nature of the cost function , @xmath246 we have @xmath247 . for , each edge",
    "@xmath135 , the lower capacity function , @xmath248 could be designed as @xmath249 if @xmath250 , otherwise it is 0 .  similarly , the upper capacity function , @xmath251 is @xmath252 , if @xmath250 , else it is @xmath253 .",
    "the optimum solution of the minimum cost circulation problem , say @xmath254 , which could be computed in polynomial time , corresponds to a directed multigraph , say @xmath255 , which has the directed tree , @xmath245 and @xmath255 is an eulerian directed multigraph , which could be shortcutted to obtain a hamiltonian cycle of cost not exceeding @xmath256 .",
    "we have , @xmath257 and since , @xmath258 , if the edge @xmath135 belongs to the directed tree , @xmath245 , thus @xmath259 .  again , since @xmath245 is @xmath260 thin , hence we have @xmath261 .",
    "so , @xmath262 .",
    "these could be summarized as a theorem , as stated below .",
    "_ theorem 3 _ :  given an @xmath260 thin spanning tree , @xmath223 , corresponding to the solution of the lp relaxation , @xmath147 , we can always find a hamiltonian cycle efficiently of cost not exceeding @xmath263 , where @xmath264 is the optimal cost .",
    "since , we already obtained a @xmath265 thin spanning tree with high probability , hence by the above theorem , a hamiltonian cycle could be found out efficiently of cost at most @xmath266 of the optimal value .",
    "the overall algorithm could be summarized as below : _ input _ : a set of @xmath37 vertices and a positive real cost function , satisfying the triangle inequality 1 .",
    "solve held - karp , find the optimal solution , @xmath147 and construct scaled down symmetric vector , @xmath153 2 .",
    "sample @xmath0 spanning trees from the exponential family distribution , @xmath198 and find the tree with the minimum cost .",
    "3 .  orient the edges of the tree to form a directed graph , find a minimum cost circulation that contains the tree and shortcut this multigraph to form a hamiltonian cycle .",
    "output the cycle .",
    "1 feige uriel , mohit singh , _ improved approximation ratios for traveling salesperson tours and paths in directed graphs _ , approximation , randomization , and combinatorial optimization .",
    "algorithms and techniques .",
    "springer berlin heidelberg , ( 2007 ) 104 - 118    asadpour arash , michel x. goemans , aleksander madry , shayan oveis gharan , and amin saberi , _ an o ( log n / log log n)-approximation algorithm for the asymmetric traveling salesman problem _ , soda ( 2010 ) vol . 10 , pp . 379 - 389"
  ],
  "abstract_text": [
    "<S> the paper provides a description of the two recent approximation algorithms for the asymmetric traveling salesman problem , giving the intuitive description of the works of feige - singh[1 ] and asadpour et.al  [ 2 ] . [ 1 ] improves the previous @xmath0 approximation algorithm , by improving the constant from 0.84 to 0.66 and modifying the work of kaplan et . </S>",
    "<S> al  [ 3 ] and also shows an efficient reduction from atspp to atsp . combining both the results </S>",
    "<S> , they finally establish an approximation ratio of @xmath1 for atspp ,  considering a small @xmath2 ,   improving the work of chekuri and pal.[4 ] asadpour et.al , in their seminal work  [ 2 ] , gives an @xmath3 randomized algorithm for the atsp , by symmetrizing and modifying the solution of the held - karp relaxation problem and then proving an exponential family distribution for probabilistically constructing a maximum entropy spanning tree from a spanning tree polytope and then finally defining the thin - ness property and transforming a thin spanning tree into an eulerian walk .  </S>",
    "<S> the optimization methods used in  [ 2 ] are quite elegant and the approximation ratio could further be improved , by manipulating the thin - ness of the cuts . </S>"
  ]
}