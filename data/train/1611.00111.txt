{
  "article_text": [
    "let @xmath0 be a dense motion - planning roadmap with @xmath1 vertices embedded in some configuration space ( c - space ) .",
    "we consider the problem of finding a shortest path between two vertices of @xmath0 .",
    "specifically , we are interested in settings , prevalent in motion planning , where testing if an edge of the graph is collision free or not is computationally expensive .",
    "we call such graphs explicit graphs with expensive edge - evaluation or e@xmath6-graphs . moreover , we are interested in the case where  @xmath1 is very large . this makes any path - finding algorithm that directly searches  @xmath0 , subsequently performing @xmath2 edge evaluations , impractical .",
    "we wish to obtain an approximation of the shortest path quickly and refine it as time permits .",
    "we refer to this problem as _ anytime planning on large e@xmath6-graphs_.    our problem is motivated by previous work ( sec .",
    "[ sec : related_work ] ) on sampling - based motion - planning algorithms  @xcite that construct a _ fixed _ roadmap as part of a preprocessing stage  @xcite .",
    "these methods are used to efficiently approximate the structure of the c - spaceusing a graph , or a roadmap data structure . when the size of the roadmap is large , even finding a solution , let alone an optimal one , becomes a non - trivial problem requiring specifically - tailored search algorithms  @xcite .",
    "0.25 -disk subgraphs of the roadmap @xmath0 . the @xmath7-axis and the @xmath8-axis",
    "represent the number of vertices and the number of edges ( induced by @xmath3 ) of the subgraph , respectively .",
    "a particular subgraph is defined by a point in this space . _",
    "edge batching _ searches over all samples and adds edges according to an increasing radius of connectivity . _",
    "vertex batching _",
    "searches over complete graphs induced by progressively larger subsets of vertices .",
    "_ hybrid batching _ uses the minimal connection radius @xmath9 required to ensure connectivity until it reaches  @xmath10 and then proceeds like edge batching .",
    "the harder a problem , i.e. the lower the clearance between obstacles , the more vertices are needed by vertex and hybrid batching ( @xmath11 ) to get their first feasible solution.,title=\"fig : \" ]    0.7 -disk subgraphs of the roadmap @xmath0 .",
    "the @xmath7-axis and the @xmath8-axis represent the number of vertices and the number of edges ( induced by @xmath3 ) of the subgraph , respectively .",
    "a particular subgraph is defined by a point in this space .",
    "_ edge batching _ searches over all samples and adds edges according to an increasing radius of connectivity . _",
    "vertex batching _",
    "searches over complete graphs induced by progressively larger subsets of vertices .",
    "_ hybrid batching _ uses the minimal connection radius @xmath9 required to ensure connectivity until it reaches  @xmath10 and then proceeds like edge batching .",
    "the harder a problem , i.e. the lower the clearance between obstacles , the more vertices are needed by vertex and hybrid batching ( @xmath11 ) to get their first feasible solution.,title=\"fig : \" ]    our key insight for solving the anytime planning problem in large e@xmath6-graphs is to provide existing path - planning algorithms with a sequence of subgraphs .",
    "specifically , we consider a sequence of increasingly dense subgraphs of  @xmath0 using some _ densification strategy_. at each iteration , we run a shortest - path algorithm on the current subgraph to obtain an increasingly tighter approximation of the true shortest path .",
    "we present a number of such strategies , and we are interested in the following question :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ how does the densification strategy affect the time at which the first solution is found , and the quality of the solutions obtained ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we focus on @xmath3-disk subgraphs of @xmath0 , i.e. graphs defined by a specific set of vertices where every two vertices are connected if their distance is at most @xmath3 .",
    "this induces a space of subgraphs ( fig .",
    "[ fig : ve_batching ] ) defined by the number of vertices and the connection radius ( which , in turn , defines the number of edges ) .",
    "we observe two natural ways to traverse this space .",
    "the first is to define each subgraph over the entire set of vertices and incrementally add _ batches of edges _ by increasing  @xmath3 ( vertical line at @xmath10 in fig .",
    "[ fig : ve_batching ] ) .",
    "alternatively , we can incrementally add _ batches of vertices _ and , at each iteration , consider the complete graph ( @xmath12 ) defined over the current set of vertices ( parabolic arc @xmath13 in fig .",
    "[ fig : ve_batching ] ) .",
    "we call these variants _ edge batching _ and _ vertex batching _ , respectively .",
    "roughly speaking , vertex batching and edge batching are suitable for easy and hard problems , respectively , as visualized and explained in fig .",
    "[ fig : viz2d_easy ] and fig .",
    "[ fig : viz2d_hard ] .",
    "this analysis motivates our hybrid batching strategy , which is more suitable for all ranges of problem difficulty .",
    "our main contribution is the formulation and analysis of various densification strategies to traverse the space of subgraphs of  @xmath0 ( sec .",
    "[ sec : approach ] ) .",
    "we demonstrate this general formulation and analysis for the specific case where  @xmath0 is constructed using a low - dispersion deterministic sequence ( sec .",
    "[ sec : instantiation ] ) .",
    "specifically , we describe the structure of the space of subgraphs and analytically demonstrate the tradeoff between effort and bounded suboptimality for our densification strategies .",
    "furthermore , we explain how this tradeoff varies with problem difficulty , which is measured in terms of the clearance of the shortest path in  @xmath0 .",
    "we discuss various implementation decisions and parameters that allow us to efficiently use our strategies in dense  e@xmath6 graphs(sec .",
    "[ sec : implementation ] ) .",
    "we then empirically validate our analysis on a number of random scenarios in @xmath4 and @xmath5 and on manipulation planning problems for a 7 dof robot arm ( sec .",
    "[ sec : experiments ] ) . finally , we discuss directions of future work ( sec .",
    "[ sec : conclusion ] ) .",
    "0.325    0.325    0.325    0.325    0.325    0.325",
    "sampling - based approaches have been used to solve motion - planning problems that were previously considered intractable  @xcite .",
    "these planners build a graph , or a roadmap , in the c - space , where vertices are configurations and edges are local paths connecting configurations . a path",
    "is then found by traversing this roadmap while checking if the vertices and edges are collision free .",
    "initial sampling - based motion - planning algorithms such as prm  @xcite and rrt  @xcite were concerned with finding _ a feasible _ solution . however , in recent years , there has been growing interest in finding high - quality solutions .",
    "karaman and frazzoli  @xcite introduced variants of the prm and rrt algorithms , called prm * and rrt * , respectively and proved that , asymptotically , the solution obtained by these algorithms converges to the optimal solution .",
    "however , the running times of these algorithms is often significantly slower than their non - optimal counterparts .",
    "thus , subsequent algorithms have been suggested to increase the rate of convergence to high - quality solutions .",
    "they use different approaches such as lazy computation  @xcite , informed sampling  @xcite , pruning vertices  @xcite , relaxing optimality  @xcite , exploiting local information  @xcite and lifelong planning together with heuristics  @xcite . indeed ,",
    "in this work we employ several of these techniques in order to speed up the convergence rate of our algorithms .",
    "0.325    0.325    0.325    0.325    0.325    0.325      most analysis on sampling - based motion - planning algorithms has concentrated on _ asymptotic _ properties , i.e. properties such as connectivity and optimality when the number of samples tends to infinity  @xcite .    however , we are interested in bounding the quality of a solution obtained using a _ fixed _ roadmap . when the samples are generated from a _ deterministic _ sequence , janson et .",
    "* thm2 ) give a closed - form solution bounding the quality of the solution of a prm whose roadmap is an @xmath3-disk graph .",
    "the bound is a function of @xmath3 , the number of vertices @xmath1 and the _ dispersion _ of the set of points used .",
    "( see sec .",
    "[ sec : problem_formulation ] for an exact definition of dispersion and for the exact bound given by janson et .",
    "al . ) .",
    "dobson et .",
    "al .  @xcite provide similar bounds when randomly sampled i.i.d points are used .",
    "specifically , they consider a prm whose roadmap is an @xmath3-disk graph for a _ specific _ radius @xmath14 where @xmath1 is the number of points , @xmath15 is the dimension and @xmath16 is some constant .",
    "they then give a bound on the probability that the quality of the solution will be larger than a given threshold .",
    "both bounds and analyses assume that the optimal path has some _ clearance _ @xmath17 .",
    "namely , that each point along the path is at least distance @xmath17 from any obstacle .",
    "path - planning algorithms , which compute the shortest path between two vertices of a given graph , have been studied for many decades .",
    "we are interested in algorithms that attempt to reduce the amount of edge expansions performed in a search .",
    "this is typically done using heuristics such as for a *  @xcite , for iterative deepening a *  @xcite and for lazy weighted a *  @xcite .",
    "some of these algorithms , such as lifelong planning a *  @xcite allow recomputing the shortest path in an efficient manner when the graph undergoes changes .",
    "_ anytime _ variants of a * such as anytime repairing a *  @xcite and anytime nonparametric a *  @xcite efficiently run a succession of a * searches , each with an inflated heuristic .",
    "this potentiallys obtain a fast approximation and refines its quality as time permits .",
    "having said that , there is no formal guarantee that these approaches will decrease search time and they may still search all edges of a given graph  @xcite . for a unifying formalism of such algorithms relevant to e@xmath6 graphs and additional references , see  @xcite .",
    "we provide standard notation and define our problem concretely .",
    "we then provide necessary mathematical background about the _ dispersion _ of a set of points .",
    "let  @xmath18 denote a @xmath15-dimensional c - space , @xmath19 the collision - free portion of @xmath18 , @xmath20 its complement and let @xmath21 be some distance metric . for simplicity",
    ", we assume that @xmath22^d$ ] and that @xmath23 is the euclidean norm .",
    "let @xmath24 be some sequence where @xmath25 and denote by @xmath26 the first @xmath27 elements of @xmath28 .",
    "we define the @xmath3-disk graph @xmath29 where @xmath30 , @xmath31 and each edge @xmath32 has a weight @xmath33 .",
    "see  @xcite for various properties of such graphs in the context of motion planning .",
    "finally , set  @xmath34 , namely , the complete ensures that every two points will be connected due to the assumption that @xmath22^d$ ] and that @xmath23 is euclidean .",
    "] graph defined over @xmath28 .    for ease of analysis",
    "we assume that the roadmap is complete , but our densification strategies and analysis can be extended to _ dense _ roadmaps that are not complete .",
    "furthermore , our definition assumes that @xmath0 is embedded in the c - space .",
    "thus , we will use the terms _ vertices _ and _ configurations _ as well as _ edges _ and _ paths _ in c - spaceinterchangeably .",
    "a query @xmath35 is a scenario with start and target configurations .",
    "let the start and target configurations be @xmath36 and @xmath37 , respectively .",
    "the obstacles induce a mapping @xmath38 called a _ collision detector _ which checks if a configuration or edge is collision - free or not .",
    "typically , edges are checked by densely sampling along the edge , hence the term _ expensive edge evaluation_. a feasible path is denoted by @xmath39 \\rightarrow { \\ensuremath{{\\ensuremath{\\mathcal{x}}\\xspace}_{\\rm free}}\\xspace}$ ] where @xmath40 = s_1 $ ] and @xmath41 = s_2 $ ] . slightly abusing this notation , set @xmath42 to be the shortest collision - free path from @xmath36 to @xmath37 that can be computed in @xmath43 , its clearance as @xmath44 and denote by @xmath45 and @xmath46 the shortest path and its clearance that can be computed in @xmath0 , respectively .",
    "our problem calls for finding a sequence of increasingly shorter feasible paths @xmath47 , @xmath48 in @xmath0 , converging to @xmath49",
    ". finally , because @xmath50 is very large , any path - finding algorithm that directly searches  @xmath0 , thereby performing @xmath2 calls to  @xmath51 may be too time - consuming to be practical .",
    "the _ dispersion _ @xmath52 of a sequence @xmath28 is defined as @xmath53 .",
    "intuitively , it can be thought of as the radius of the largest empty ball ( by some metric ) that can be drawn around any point in the space @xmath18 without intersecting any point of @xmath28 .",
    "a lower dispersion implies a better _ coverage _ of the space by the points in @xmath28 .",
    "when @xmath18 is the @xmath15-dimensional euclidean space and @xmath23 is the euclidean distance , deterministic sequences with dispersion of order @xmath54 exist .",
    "a simple example is a set of points lying on grid or a lattice .",
    "other low - dispersion deterministic sequences exist which also have low discrepancy , i.e. they appear to be random for many purposes .",
    "one such example is the _ halton sequence _  @xcite .",
    "we will use them extensively for our analysis because they have been studied in the context of deterministic motion planning@xcite .",
    "halton sequences are constructed by taking @xmath15 prime numbers , called generators , one for each dimension . each generator",
    "@xmath55 induces a sequence , called a van der corput sequence .",
    "the @xmath56th element of the halton sequence is then constructed by taking the @xmath56th element of each of the @xmath15 van der corput sequences .    for halton sequences , tight bounds on dispersion",
    "specifically , @xmath57 where @xmath58 is the @xmath59 prime number . in the rest of the paper ,",
    "when the sequence  @xmath28 is clear from the context , we will omit it and use @xmath60 ( and not  @xmath52 ) to denote the dispersion of the first @xmath1 points of  @xmath28 .",
    "janson et .",
    "al . bound the length of shortest path computed over an @xmath3-disk roadmap constructed using a low - dispersion deterministic sequence  ( * ? ? ?",
    "* thm2 ) . specifically , given start and target vertices , consider all paths @xmath61 connecting them which have @xmath17-clearance for some @xmath17 . set @xmath62 to be the maximal clearance over all such @xmath17 . if @xmath63 , then for all @xmath64 set @xmath65 to be the cost of the shortest path in @xmath61 with @xmath17-clearance .",
    "let @xmath66 be the length of the path returned by a shortest - path algorithm on @xmath67 with @xmath26 having dispersion @xmath68 . for @xmath69 , we have that @xmath70    interestingly , for @xmath1 random i.i.d .",
    "points , the lower bound on the dispersion is @xmath71  @xcite which is strictly larger than for deterministic samples .",
    "we now discuss our general approach of searching over the space of all ( @xmath3-disk ) subgraphs of @xmath0 .",
    "we start by characterizing the boundaries and different regions of this space .",
    "subsequently , we introduce two densification strategies  edge batching and vertex batching .",
    "as we will see , these two are complementary in nature which motivates our third strategy , which we call hybrid batching .      to perform an anytime search over @xmath0 ,",
    "we suggest iteratively considering a sequence of graphs @xmath72 . at the @xmath73 iteration , we perform a shortest - path query over  @xmath74 .",
    "is too low to guarantee connectivity . ]",
    "we use an incremental path - planning algorithm that allows us to efficiently recompute shortest paths . however , any alternative shortest - path algorithm may be used .",
    "we emphasize that here we focus on approaches for the meta - algorithm of choosing which subgraphs to search .",
    "further details on the implementation of these approaches are provided in sec .  [",
    "sec : implementation ] .",
    "[ fig : ve_starvation ] depicts the set of possible graphs  @xmath43 for all choices of @xmath75 and @xmath76 .",
    "specifically , the graph depicts @xmath77 as a function of @xmath78 .",
    "we discuss in detail fig .",
    "[ fig : ve_starvation ] to motivate our approach for solving the problem of anytime planning in large e@xmath6-graphs and the specific sequence of graphs we use .",
    "first , consider the curves that define the boundary of all possible graph s : the vertical line @xmath10 , corresponds to subgraphs defined over the entire set of vertices where batches of edges are added as @xmath3 increases .",
    "the parabolic arc @xmath79 , corresponds to complete subgraphs defined over increasingly larger sets of vertices .",
    "recall that we wish to approximate the path @xmath80 which has some minimal clearance @xmath81 .",
    "given a specific graph , to ensure that a path that approximates @xmath80 is found , two conditions should be met : ( i )  the graph includes some minimal number @xmath11 of vertices .",
    "the exact value of  @xmath11 will be a function of the dispersion @xmath82 of the sequence @xmath28 and the clearance @xmath81 .",
    "( ii )  a minimal connection radius @xmath83 is used to ensure that the graph is connected .",
    "its value will depend on the sequence @xmath28 ( and not on  @xmath81 ) .",
    "requirement ( i ) induces a vertical line at @xmath84 . any point to",
    "the left of this line corresponds to a graph with too few vertices to prove any guarantee that a solution will be found .",
    "we call this the _ vertex - starvation _ region",
    ". requirement  ( ii ) induces a curve @xmath9 such that any point below this curve corresponds to a graph which may be disconnected .",
    "we call this the _ edge - starvation _ region",
    ". the exact form of the curve depends on the sequence  @xmath28 that is used .",
    "the specific value of @xmath85 and the form of @xmath9 when halton sequences are used is provided in  sec .",
    "[ sec : instantiation ] . for a comment on random i.i.d sequences , see  sec .",
    "[ sec : conclusion ] .",
    "any point outside the starvation regions represents a graph  @xmath67 such that the length of @xmath86 may be bounded . for a discussion on specific bounds ,",
    "see sec .",
    "[ subsec : finite ] . for a visualization of the different regions ,",
    "see  fig .",
    "[ fig : ve_starvation ] .",
    "our goal is to search increasingly dense subgraphs of  @xmath0 .",
    "this corresponds to a sequence of points on the space of subgraphs ( fig .",
    "[ fig : ve_starvation ] ) that ends at the upper right corner of the space .",
    "two natural strategies emerge from this .",
    "we defer the discussion on the choice of parameters used for each strategy to  sec .",
    "[ sec : implementation ] .",
    "all subgraphs include the complete set of vertices @xmath28 and the edges are incrementally added via an increasing connection radius . specifically , @xmath87 and @xmath88 where @xmath89 and @xmath90 is some small intial radius . here",
    ", we choose @xmath91 using fig .  [",
    "fig : ve_starvation ] , this induces a sequence of points along the vertical line at @xmath10 starting from @xmath92 and ending at @xmath93 .      in this variant ,",
    "all subgraphs are complete graphs defined over increasing subsets of @xmath28 .",
    "specifically @xmath94 , @xmath95 where @xmath96 and @xmath97 is some small number of vertices .",
    "using fig .",
    "[ fig : ve_starvation ] , this induces a sequence of points along the parabolic arc @xmath98 starting from @xmath99 and ending at @xmath93 .",
    "the vertices are chosen in the same order with which they are generated by  @xmath28 .",
    "so @xmath100 has the first @xmath97 samples of @xmath28 , and so on .",
    ", the amount of work required by edge batching remains the same regardless of problem difficulty . for vertex batching the amount of work required depends on the hardness of the problem .",
    "here we visualize an easy and a hard problem using  @xmath85 ( easy ) and @xmath85 ( hard ) , respectively .",
    "]    intuitively , the relative performance of these densification strategies depends on problem hardness .",
    "we use the clearance of the shortest path , @xmath101 , to represent the hardness of the problem .",
    "this , in turn , defines @xmath85 which bounds the vertex - starvation region .",
    "specifically we say that a problem is easy ( resp .",
    "hard ) when @xmath102 ( resp .",
    "@xmath103 ) . for easy problems , with larger gaps between obstacles",
    "vertex batching can find a solution quickly with fewer samples and long edges , thereby restricting the work done for future searches .",
    "in contrast , assuming that @xmath104 , edge batching will find a solution on the first iteration but the time to do so may be far greater than for vertex batching because the number of samples is so large . for hard problems",
    "vertex batching requires multiple iterations until the number of samples it uses is larger than @xmath11 and it is out of the vertex - starvation region .",
    "each of these searches would exhaust the fully connected subgraph before terminating .",
    "this cumulative effort is expected to exceed that required by edge batching for the same problem , which is expected to find a feasible path on the first search . a visual depiction of this intuition is given in fig .  [ fig : ve_comparitive ] .",
    "vertex and edge batching exhibit complementary properties for problems with varying difficulty . yet , when a query  @xmath35 is given , the hardness of the problem is not known a - priori . in this section",
    "we propose a hybrid approach that exhibits favourable properties , regardless of the hardness of the problem .",
    "this hybrid batching strategy commences by searching over a graph @xmath105 where @xmath97 is the same as for vertex batching and @xmath106 .",
    "as long as @xmath107 , the next batch has @xmath108 and @xmath109 .",
    "when @xmath110 ( and @xmath111 ) , all subsequent batches are similar to edge batching , i.e. , @xmath112 ( and @xmath113 ) .",
    "this can be visualized on the space of subgraphs as sampling along the curve @xmath9 from @xmath99 until @xmath9 intersects @xmath10 and then sampling along the vertical line  @xmath10 .",
    "see  fig .",
    "[ fig : ve_batching ] and  fig .",
    "[ fig : ve_comparitive ] for a mental picture .",
    "as we will see in our experiments , hybrid batching typically performs comparably ( in terms of path quality ) to vertex batching on easy problems and to edge batching on hard problems .",
    "in this section we consider the space of subgraphs and the densification strategies that we introduced in sec .  [",
    "sec : approach ] for the specific case that @xmath28 is a halton sequence .",
    "we start by describing the boundaries of the starvation regions .",
    "we then continue by simulating the bound on the quality of the solution obtained as a function of the work done for each of our heuristics .      to bound the vertex starvation region we wish to find  @xmath11 after which bounded sub - optimality",
    "can be guaranteed to find the first solution .",
    "note that @xmath81 is the clearance of the shortest path @xmath114 in @xmath0 connecting @xmath36 and @xmath37 , that  @xmath115 denotes the @xmath59 prime and @xmath116 for halton sequences . for  eq .",
    "( [ eq : dispersion_suboptimality ] ) to hold we require that @xmath117 .",
    "thus , @xmath118    indeed , one can see that as the problem becomes harder ( namely , @xmath81 decreases ) , @xmath11 and the entire vertex - starvation region grows .",
    "we now show that for halton sequences , the edge - starvation region has a linear boundary .",
    "namely that @xmath119 . using eq .",
    "( [ eq : dispersion_suboptimality ] ) we have that the minimal radius @xmath120 required for a graph with @xmath121 vertices is @xmath122 for any graph  @xmath43 , the number of edges is @xmath123 .",
    "in our case we have that , @xmath124    0.49   and @xmath125 .",
    "the easy and hard problems have @xmath126 and @xmath127 , respectively .",
    "the plot is produced by sampling points along the curves @xmath10 and @xmath128 and using the respective values in eq .",
    "( [ eq : dispersion_suboptimality ] ) .",
    "note that @xmath7-axis is in log - scale .",
    ", title=\"fig : \" ]    0.49   and @xmath125 .",
    "the easy and hard problems have @xmath126 and @xmath127 , respectively .",
    "the plot is produced by sampling points along the curves @xmath10 and @xmath128 and using the respective values in eq .",
    "( [ eq : dispersion_suboptimality ] ) .",
    "note that @xmath7-axis is in log - scale .",
    ", title=\"fig : \" ]      we now compare our densification strategies in terms of their worst - case anytime performance . specifically , we plot the cumulative amount of work as subgraphs are searched , measured by the maximum number of edges that may be evaluated , as a function of the bound on the quality of the solution that may be obtained using eq .",
    "( [ eq : dispersion_suboptimality ] ) .",
    "we fix a specific setting ( namely @xmath15 and @xmath1 ) and simulate the work done and the suboptimality using the necessary formulae .",
    "this is done for an easy and a hard problem .",
    "see  fig .",
    "[ fig : ratio ] .    indeed , this simulation coincides with our discussion on properties of both batching strategies with respect to the problem difficulty .",
    "vertex batching outperforms edge batching on easy problems and vice versa .",
    "hybrid batching lies somewhere in between the two approaches with the specifics depending on problem difficulty .",
    "we choose the parameters for each densification strategy such that the number of batches is @xmath129 .",
    "we set @xmath130 .",
    "recall that for @xmath3-disk graphs , the average degree of vertices is  @xmath131 , therefore this value ( and hence the number of edges ) is doubled after each iteration .",
    "we set @xmath132 .",
    "we set the initial number of vertices  @xmath97 to be @xmath133 and set @xmath134 .",
    "namely , after each batch we double the number of vertices .",
    "the parameters are derived from those used for vertex and edge batching .",
    "we begin with @xmath135 , and after each batch we increase the vertices by a factor of  @xmath134 . for these searches ,",
    "i.e. in the region where @xmath107 , we use @xmath136 .",
    "this ensures the same radius at @xmath1 as for edge batching .",
    "subsequently , we increase the radius as @xmath137 , where @xmath130 .",
    "our analysis and intuition is agnostic to any specific algorithms or implementations .",
    "however , for these densification strategies to be useful in practice , we employ certain optimizations .",
    "each subgraph is searched using lazy @xmath138  @xcite with incremental rewiring as in @xmath139  @xcite . for details , see the search algorithm used for a single batch of @xmath140  @xcite .",
    "this lazy variant of @xmath138 has been shown to outperform other path - planning techniques for motion - planning search problems with expensive edge evaluations  @xcite .",
    "each time the collision - detector  @xmath51 is called for an edge , we store the i d of the edge along with the result using a hashing data structure .",
    "subsequent calls for that specific edge are simply lookups in the hashing data structure which incur negligible running time . thus ,  @xmath51 is called for each edge at most once .    0.5     0.5     0.5     0.5       for anytime algorithms ,",
    "once an initial solution is obtained , subsequent searches should be focused on the subset of states that could potentially improve the solution .",
    "when the space @xmath141 is euclidean , this , so - called `` informed subset '' , can be described by a prolate hyperspheroid @xcite . for our densification strategies ,",
    "we prune away all existing vertices ( for all batching ) , and reject the newer vertices ( for vertex and hybrid batching ) , that fall outside the informed subset . in practice ,",
    "successive prunings due to intermediate solutions significantly reduces the average - case complexity of future searches @xcite .",
    "we analyse this for edge batching under the assumption of free space .",
    "[ lem : ellipse ] running edge batching in an obstacle - free @xmath15-dimensional euclidean space over a roadmap constructed using a deterministic low - dispersion sequence with @xmath142 and @xmath143 , while using sample pruning and rejection makes the worst - case complexity of the total search , measured in edge evaluations , @xmath144 .    for a proof see appendix  [ sec : proof ] .    0.5     0.5     0.5     0.5",
    "our implementations of the various strategies are based on the publicly available ompl @xcite implementation of @xmath140@xcite .",
    "other than the specific parameters and optimizations mentioned earlier , we use the default parameters of @xmath140 .",
    "the notable ones are using euclidean distance for heuristics , using an approximately sorted queue , and limiting graph pruning to changes in path length greater than 1% .",
    "the different batching strategies are compared to each other on problems in @xmath145 for @xmath146 .",
    "the domain is the unit hypercube @xmath147^{d}$ ] while the obstacles are randomly generated axis - aligned @xmath15-dimensional hyper - rectangles .",
    "all problems have a start configuration of @xmath148 $ ] and a goal configuration of @xmath149 $ ] .",
    "we used the first @xmath150 and @xmath151 points of the halton sequence for the  @xmath4 and  @xmath5 problems , respectively .",
    "two parameters of the obstacles are varied to approximate the notion of problem hardness described earlier - the number of obstacles and the fraction of @xmath141 which is in @xmath152 , which we denote by @xmath153 .",
    "specifically , in @xmath4 , we have easy problems with @xmath133 obstacles and @xmath154 , and hard problems with @xmath155 obstacles and @xmath156 . in @xmath5",
    "we maintain the same values for @xmath153 , but use @xmath157 and @xmath158 obstacles for easy and hard problems , respectively . for each problem setting",
    "( @xmath4/@xmath5 ; easy / hard ) we generate  @xmath159 different random scenarios and evaluate each strategy with the same set of samples on each of them .",
    "each random scenario has a different set of solutions , so we show a representative result for each problem setting in fig .  [",
    "fig : results_2d_4d ] .",
    "the results align well with our intuition about the relative performance of the densification strategies on easy and hard problems .",
    "notice that the naive strategy of searching @xmath0 directly , requires considerably more time to report the optimum solution than any other strategy .",
    "we mention the numbers in the accompanying caption of fig .",
    "[ fig : results_2d_4d ] but avoid plotting them so as not to stretch the figures .",
    "it is also encouraging to observe that hybrid batching does perform the best on average across all problems and difficulty levels .",
    "we also run simulated experiments on herb @xcite , a mobile manipulator designed and built by the personal robotics lab at carnegie mellon university .",
    "the planning problems are for the 7-dof right arm , on the problem scenarios shown in fig .  [",
    "fig : results_herb ] .",
    "we use a roadmap of @xmath160 vertices defined using a halton sequence  @xmath28 which was generated using the first @xmath161 prime numbers .",
    "in addition to the batching strategies , we also evaluate the performance of @xmath140  @xcite , which has been shown to achieve anytime performance superior to contemporary anytime algorithms .",
    "we use the default parameters of @xmath140 as available from the ompl implementation , only modifying it to use the same set of samples  @xmath28 .",
    "the hardness of the problems in terms of clearance is difficult to visualize in terms of the c - space of the arm , but the goal regions are considerably constrained . as our results show ( fig .",
    "[ fig : results_herb ] ) , all densification strategies solve the difficult planning problem in reasonable time , and generally outperform the bit * strategy on the same set of samples .",
    "we present , analyze and implement several densification strategies for anytime planning on large e@xmath6 graphs .",
    "we provide theoretical motivation for these densification techniques , and show that they outperform the naive approach significantly on difficult planning problems .",
    "we now discuss several interesting questions that arise from our work which we wish to pursue in the future . in this work",
    "we demonstrate our analysis for the case where the set of samples is generated from a low - dispersion deterministic sequence .",
    "a natural extension is to provide a similar analysis for a sequence of random i.i.d . samples . some changes such as the structure of the edge - starvation region are straightforward to analyze . here , @xmath162",
    "@xcite instead of @xmath163 . when out of the starvation regions we would like to bound the quality obtained similar to the bounds provided by  eq .",
    "( [ eq : dispersion_suboptimality ] ) .",
    "a starting point would be to leverage recent results by dobson et .",
    "@xcite for random geometric graphs under expectation .",
    "however , their analysis is stated only for a _ specific _ radius @xmath3 and should be extended in order to be used in our framework .",
    "a second line of research we wish to pursue is alternative possibilities to traverse the subgraph space of @xmath0 . as depicted in fig .",
    "[ fig : ve_batching ] , our densification strategies are essentially ways to traverse this space .",
    "we discuss three techniques that traverse relevant boundaries of the space .",
    "but there are innumerable trajectories that a strategy can follow to reach the optimum",
    ". it would be interesting to compare our current batching methods , both theoretically and practically , to those that go through the interior of the space .",
    "running edge batching in an obstacle - free @xmath15-dimensional euclidean space over a roadmap constructed using a deterministic low - dispersion sequence with @xmath142 and @xmath143 , while using sample pruning and rejection makes the worst - case complexity of the total search , measured in edge evaluations , @xmath144 .",
    "let @xmath164 denote the cost of the solution obtained after @xmath165 iterations by our edge batching algorithm , and @xmath166 denote the cost of the optimal solution .",
    "using eq .",
    "( [ eq : dispersion_suboptimality ] ) , @xmath167 where @xmath168 . using the parameters for edge batching , @xmath169      note that the fact that vertices and edges are pruned away , does not change the bound provided in eq .",
    "( [ eq : cbest ] ) . to compute the actual number of edges",
    "considered at the @xmath165th iteration , we bound the volume of the the prolate hyperspheriod @xmath172 in @xmath145 ( see  @xcite ) by , @xmath173 where @xmath174 is the volume of an @xmath145 unit - ball . using eq .",
    "( [ eq : cbest ] ) in eq .",
    "( [ eq : ellipse ] ) , @xmath175 where @xmath176 is a constant . using eq .",
    "( [ eq : epsdec ] ) we can bound the volume of the ellipse used at the @xmath165th iteration , where @xmath177 , @xmath178 furthermore , we choose @xmath83 such that @xmath179 .",
    "now , the number of vertices in @xmath180 can be bounded by , @xmath181 recall that we measure the amount of work done by the search at iteration @xmath165 using @xmath182 , the number of edges considered .",
    "thus , @xmath183 finally , the total work done by the search over all iterations is @xmath184            s.  choudhury , j.  d. gammell , t.  d. barfoot , s.  s. srinivasa , and s.  scherer .",
    "regionally accelerated batch informed trees ( rabit * ) : a framework to integrate local information into optimal path planning . in _ 2016 ieee international conference on robotics and automation ( icra ) _ , pages 42074214 .",
    "ieee , 2016 .        c.  m. dellin and s.  s. srinivasa . a unifying formalism for shortest path problems with expensive edge evaluations via lazy best - first search over paths with edge selectors .",
    "in _ international conference on automated planning and scheduling _ , pages 459467 , 2016 .",
    "a.  dobson , g.  v. moustakides , and k.  e. bekris .",
    "geometric probability results for bounding path quality in sampling - based roadmaps after finite computation . in _",
    "ieee international conference on robotics and automation _ , 2015 .",
    "j.  d. gammell , s.  s. srinivasa , and t.  d. barfoot .",
    "informed rrt * : optimal sampling - based path planning focused via direct sampling of an admissible ellipsoidal heuristic . in _",
    "ieee / rsj international conference on intelligent robots and systems _ , pages 29973004 , 2014 .",
    "j.  d. gammell , s.  s. srinivasa , and t.  d. barfoot .",
    "batch informed trees ( bit * ) : sampling - based optimal planning via the heuristically guided search of implicit random geometric graphs . in _",
    "ieee international conference on robotics and automation _ , pages 30673074 , 2015 ."
  ],
  "abstract_text": [
    "<S> we consider the problem of computing shortest paths in a dense motion - planning roadmap @xmath0 . </S>",
    "<S> we assume that  @xmath1 , the number of vertices of @xmath0 , is very large . </S>",
    "<S> thus , using any path - planning algorithm that directly searches  @xmath0 , running in @xmath2 time , becomes unacceptably expensive . </S>",
    "<S> we are therefore interested in anytime search algorithms that obtain successively shorter feasible paths and converge to the shortest path in  @xmath0 . </S>",
    "<S> our key insight is to leverage existing path - planning algorithms and provide them with a sequence of subgraphs of  @xmath0 . </S>",
    "<S> to do so , we study the space of all ( @xmath3-disk ) subgraphs of @xmath0 . </S>",
    "<S> we then formulate and present two densification strategies for traversing this space which exhibit complementary properties with respect to problem difficulty . </S>",
    "<S> this inspires a third , hybrid strategy which has favourable properties regardless of problem difficulty . </S>",
    "<S> this general approach is then demonstrated and analyzed using the specific case where a low - dispersion deterministic sequence is used to generate the samples used for  @xmath0 . finally we empirically evaluate the performance of our strategies for random scenarios in @xmath4 and @xmath5 and on manipulation planning problems for a 7 dof robot arm , and validate our analysis . </S>"
  ]
}