{
  "article_text": [
    "many of network service provider s pain points can be traced back to a fundamental issue : the lack of network visibility .",
    "for example , the network congestion collapse can be avoided in many cases if we know exactly when and where the congestion is happening or even better , if we can precisely predict it well before any impact is made ; sophisticated network attacks can be prevented through stateful and distributed network behavior analysis ; in order to monetize the traffic and provide application - centric service , user flows and their interaction with networks need to be tracked and understood .",
    "all these pose vast needs on generalized network data , either passing through networks or generated by network devices .",
    "not surprisingly , people start to model the network visibility as a big data problem",
    ". traditional algorithms can still apply , but more advanced big data analytics such as machine learning can provide unlimited opportunities to mine values from network data . if we can retrieve any data of interest in real time with direct helps from the data source ( i.e. , the network data plane ) , then most problems can be solved by the comprehensive data analytics at the application plane . therefore , our value proposition is to _ build a unified and general - purpose network data analytics platform with integrated data plane support to provide the omni network visibility_. this is in contrast to the ad - hoc solutions which only deal with one single problem a time with a special means to acquire the relevant data .",
    "sdn appears to be an ideal architecture to support the omni network visibility .",
    "the logically centralized controller is at the unique vantage point to see any data in networks .",
    "however , so far the sdn controller has limited view of network data and states , because the data plane is incapable of providing enough data to sustain all application requirements .",
    "therefore , we need to make the data plane programmable so any data can be collected if needed .",
    "more importantly , the programmability must be open to the upper layer applications so service provider can directly take advantage of this flexibility for application layer data collection .",
    "we further argue that the data plane should also support on - demand and real - time programming to meet the dynamic data needs from various runtime applications ( detailed in sec .",
    "[ motiv ] ) .",
    "this interactive programming capability is in contrast to the conventional programming with static languages .",
    "with such a data plane , we can add network probes anywhere and anytime through a standard interface .",
    "these passive probes will not alter the forwarding behavior but add the monitor points which are responsible to collect and preprocess data for applications .",
    "we make two major contributions in this paper .",
    "first , we devise the dynamic network probe ( dnp ) as a flexible and dynamic means for sdn data plane data collection .",
    "second , we show the possibility to build a universal network data analytics platform in which network devices play an integrated role .",
    "the first contribution forms the foundation for the second one .",
    "data collected from data plane provide input to the sdn control loop .",
    "what data to collect is determined by the purpose of the data - consuming application .",
    "the most basic application is routing and forwarding decision for which the network topology and link states need to be collected .",
    "other applications , such as traffic engineering , network security , network health monitoring , trouble shooting , and fault diagnosis , require different type of data . the data are either normal traffic packets that are filtered , sampled , or digested , or metadata generated by network devices to convey network states and status . in either case , data collection is meant to be passive and should not change the network forwarding behavior .",
    "the sdn controller analyzes the collected data and then makes decisions accordingly to actively change the network behavior .",
    "forwarding information base ( fib ) and access control list ( acl ) table updates are the most notable examples , as well as traffic manager ( tm ) parameters .",
    "a few other possible changes are less obvious . for example , some applications keep refining the ways to collect data based on previous observations .",
    "the control loop algorithm continuously interacts with the data plane and modify the data source and content .",
    "we can also imagine that in some other applications , new network and packet processing functions can be enabled to alter the forwarding behavior at runtime .",
    "this paper concerns with the passive data collection only .",
    "although the technology discussed in this paper can also be applied to actively modify the network behavior , we leave that topic to future work .",
    "ideally , we want to gain the full visibility to know any states anytime anywhere in the entire network data plane . in reality , this is extremely difficult if not impossible .",
    "theoretically , any network state can be inferred if all the traffic through it can be seen , so a simple option is to mirror all the raw traffic to servers where data analytical engine is running .",
    "however , this brute - force method requires to double the device port count and the traffic bandwidth , and poses enormous computing and storage cost . as a tradeoff",
    ", test access port ( tap ) or switch port analyzer ( span ) is used to selectively mirror only a portion of the overall traffic .",
    "network packet broker ( npb ) is deployed along with tap or span to process and distribute the raw data to various data analytical tools .",
    "there are some other ad - hoc solutions ( e.g. , sflow  @xcite and everflow  @xcite ) which can provide sampled and digested packet data and some traffic statistics .",
    "meanwhile , network devices also generate various log files to record miscellaneous events in the system .",
    "when aggregating all these solutions together , we can gain a relatively comprehensive view of the network .",
    "however , the main problem here is the lack of a unified platform to deal with the general data collection problem .",
    "moreover , each ad - hoc solution inevitably loses information due to data plane resource limitation which makes the data analytical results suboptimal , so does the follow - up data plane control based on the results .",
    "we also note that application s requests on data are often dynamic and realtime .",
    "when third party applications run on top of the network operator s controller , their data needs are diversified and unpredictable .",
    "even a single application may need to constantly adjust what data to collect ( e.g. , an elephant flow detector continues to narrow down the flow granularities and gather their statistics ) .",
    "trying to design an omnipotent system to support all possible runtime data requests is inviable because the resources required are prohibitive ( e.g. , even a simple counter per flow is impossible in practice ) .",
    "an alternative is to reprogram or reconfigure the data plane device whenever an unsupported data request appears .",
    "this is possible thanks to the recently available programmable chips  @xcite and the trend to open the programmability to service providers  @xcite .",
    "unfortunately , the static programming approach can not meet the realtime requirements due to the latency incurred by the programming and compiling process .",
    "the reprogramming process also risks breaking the normal operation of network devices .",
    "then a viable solution left to us is : whenever applications request data which is unavailable in the data plane , the data plane can be configured in real time to return the requested data .",
    "that is , we do not attempt to make the network data plane provide all data all the time . instead , we only need to ensure that _ any application can acquire any necessary data instantly whenever it actually asks for it .",
    "_ this data - on - demand model can support effectively `` omni '' network visibility , but it is still unthinkable with the current stiff and black - boxed data plane .",
    "so we first introduce the recent technology advance to ground the feasibility of our vision in sec .",
    "[ tech ] and [ pof ] .",
    "driven by sdn , network data plane is evolving to become open programmable  @xcite .",
    "this means the network operators are in control of customizing the network device s function and forwarding behavior .",
    "several ongoing trends in industry , as shown in figure  [ fig_opdp ] , are validating this idea .",
    "these trends are shaping new forms of network devices and inspiring innovative ways to use them .",
    "the first trend is led by the ocp networking project  @xcite , which advocates the decoupling of the network operating system and the network device hardware .",
    "a common switch abstract interface ( sai ) allows applications to run on heterogeneous substrate devices .",
    "however , such devices are built with fixed function asics , which provide limited flexibility for application customization .",
    "the second trend is built upon the first one yet makes a big leap . chip and device vendors are working on opening the programmability of the npu , cpu , and fpga - based network devices to network operators .",
    "most recently , programmable asics has been proved feasible  @xcite .",
    "high level language such as p4  @xcite is developed to make the network device programming easy and fast .",
    "now a network device can be incarnated into different functioning boxes depending on the program installed .    however , such programming process is considered static .",
    "even a minor modification to the existing application requires to recompile the updated source code and reinstall the application .",
    "this incurs long deployment latency and may also temporarily break the normal data plane operation .",
    "hence , although this generation of trend is still in its infancy , we have seen some of its limitations .",
    "open programmable data plane should be stretched further to support runtime interactive programming in order to extend its scope of usability .",
    "dynamic application requirements can not be foreseen at design time , and runtime data plane modifications are required to be done in real time ( for agile control loop ) and on demand ( to meet data plane resource constraints ) . meanwhile , the data plane devices are capable of doing more complex things such as stateful processing without always resorting to controller for state tracking .",
    "this allows network devices to offload a significant portion of the data processing task and only hand off the preprocessed data to the data - requesting applications .",
    "we introduced the pof programming model to support this trend as shown in figure  [ fig_pof1 ]  @xcite .",
    "we still use static programing with high level languages to define the main data plane processing and forwarding function .",
    "but at runtime , whenever an application requires to make some modification to the data plane , we deploy the incremental modification directly through the runtime control channel . the key to make this dynamic and interactive programming work is to maintain a unified interface to devices for both configuration and runtime control , because both programming paths share the same data plane abstraction and use the same back - end adapting and mapping method .",
    "the data plane processing and forwarding function is abstracted as the standard intermediate representation ( ir ) .",
    "ir contains high - level and abstract objectives that structurize the data plane components and flow logic  @xcite .",
    "these objectives are not deviated too much from the high level language such as p4  @xcite .",
    "this means for incremental changes , it is possible to provide apis directly at ir level .",
    "user can therefore interactively apply data plane changes and avoid the full source - code compiling process .    of course",
    ", the network devices need to be flexible enough to support the interactive programming .",
    "we have implemented an npu - based hardware prototype to support it .",
    "the virtual network device running on cpu / gpu can certainly support it easily .",
    "asics and fpgas are also possible to support it but do need some architectural innovations which will be briefly discussed in section  [ conclude ] .",
    "the forwarding application in data plane can be modeled in different ways ( e.g. , forces  @xcite ) , but so far the most popular abstract model is the match - action table pipeline@xcite . in this model ,",
    "the streaming packets coming from some physical or logical input ports enter a pipeline . at each pipeline stage",
    ", some data extracted form the packet or the metadata is used as key to search a table .",
    "the matching entry triggers some associated action .",
    "the action may lead the packet to another pipeline stage or an output port .",
    "a single network device may contain multiple such pipelines , segregated by logical ports ( e.g. , controller , switch fabric , or black box modules ) .",
    "this simple yet expressive model is sufficient to describe arbitrary data plane forwarding applications .",
    "we make several enhancements to the basic model in order to support the runtime interactive programming .",
    "first , the actions are no longer statically associated with flow table entries as in openflow  @xcite and p4  @xcite . as the chief programming point",
    ", actions contain primitive packet processing instructions and control instructions .",
    "each custom action can be dynamically loaded into network devices .",
    "each flow entry has a pointer field which holds a pointer to an action , and a parameter field which holds the parameters used by the associated action[multiblock footnote omitted ] .",
    "this mechanism allows users to change flow actions at runtime .",
    "it also allows each action to have different number of instructions , as long as the performance and action storage can sustain the size . with this mechanism , users are free to download new actions to change a flow s behavior on the run .",
    "even new pipeline stages ( i.e. , new tables ) can be inserted into the pipeline dynamically without interrupting the data path .",
    "second , some data plane resources are maintained in a dynamically shared pool .",
    "such resources include meters , counters , timers , and global registers and tables .",
    "the rationale is multifold : ( 1 ) network devices can not afford to statically allocated counters or meters to all the flows and flow tables . for example , a two - million - entry ip forwarding table alone can consume 64 mb memory for counters . since it is impossible to know a priori how to reasonably allocate these limited resources at design time ,",
    "counters and meters must be shared dynamically ; ( 2 ) it is easy to see if a counter or meter can be allocated to multiple flows , the aggregated flow statistics and measurement can be realized with ease .",
    "likewise , multiple counters and meters can also be allocated to a single flow so various aspects of the flow can be counted and metered with conditional instructions ; ( 3 ) a global register or table is essentially a persistent storage . when it is assigned to a flow",
    ", the flow packet can assess and update its value , therefore some stateful processing can be realized .",
    "similarly , a register can be assigned to multiple flows to enable inter - flow information sharing , and a flow can be assigned with multiple registers to hold more stateful data .    at last , for better stateful processing support , actions are given the privilege to write tables ( i.e. , insert , modify , or delete table entries ) .",
    "this can effectively turn a table into a state table while the search key is no longer a flow signature but a state signature .",
    "this idea was originated in @xcite and further developed in @xcite .",
    "figure  [ fig_dpmodel ] summarizes the major data plane features that support interactive programming .",
    "such data plane is so flexible that the inattentive use of interactive programming may accidentally break the device operation or even paralyze the entire network .",
    "however , we will see at least in one scenario we are immune from the negative effects yet can still enjoy the benefits of interactive programming .",
    "network probes are passive monitors which are installed at specific forwarding data path locations to collect specific data .",
    "dnps are _ dynamically _ deployed and revoked probes by applications at runtime .",
    "the customizable dnps can collect simple statistics or conduct more complex data preprocessing .",
    "since dnps may require actively modifying the existing data path pipeline beyond simple flow entry manipulation , these operations need to be done through interactive programming process . when a dnp is revoked , the involved shared resources are automatically recycled and returned back to the global resource pool .",
    "dnps can be deployed at various data path locations including port , queue , buffer , table , and table entry . when the data plane programmability is extended to cover other components ( e.g. , cpu load , fan speed , gps coordinations , etc . ) , dnps can be deployed to collect corresponding data as well .",
    "a few data plane objectives can be composed to form probes .",
    "these objectives are counter , meter , timer , timestamp , and register . combining these with the packet filter through flow table entry configuration",
    ", one can easily monitor and catch arbitrary states on the data plane .",
    "the simplest probe is just a counter .",
    "the counter can be configured to count bytes or packets and the counting can be conditional .",
    "the more complex probes are modeled as finite state machines ( fsm ) which are configured to capture specific events[multiblock footnote omitted ] .",
    "we have shown how stateful processing is supported in section  [ pof ] .",
    "fsms essentially preprocess the raw stream data and only report the necessary data to controller - side applications .",
    "these complex dnps help reduce the device to controller bandwidth consumption and also alleviate the controller s processing load .",
    "applications can use pull mode or push mode to access probes and collect data .",
    "the normal counter probes are often accessed via pull mode .",
    "applications decide what time and how often the counter value is read . on the other hand ,",
    "the complex fsm probes are usually accessed in push mode .",
    "when the target event is triggered , a report is generated and pushed to the application .",
    "below is the pseudo code of a push - mode packet counter : whenever a counter is incremented by a predefined amount , a packet is generated to report the event to the subscribing application .    ....",
    "cntr[i ] + + ; if(cntr[i ] = = threshold ) {    gen_pkt(to_app , flow_id , now ) ;    cntr[i ] = 0 ; } ....    to install this probe , we first identify the target action . if the action @xmath0 exists , we generate a new action @xmath1 by inserting this piece of code to the code of old action @xmath0 .",
    "then we download this new action @xmath1 to the target device .",
    "next we issue a command to switch the flow pointer from @xmath0 to @xmath1 . now",
    "the probe in @xmath1 takes effect and @xmath0 can be deleted if no longer needed .",
    "sometimes the target action does not exist which means a new flow entry needs to be installed along with the action .",
    "a solid example is that the application wants to gather the statistics of a new flow @xmath2 that does not exist .",
    "we need to choose a target table @xmath3 first and then analyze the normal processing action @xmath0 to this flow at the table @xmath3 .",
    "we augment @xmath0 with the probe code to get @xmath1 and download @xmath1 to the target device .",
    "next we issue commands to insert @xmath2 to @xmath3 and associate @xmath2 to @xmath1 .",
    "note that if the flow @xmath2 overlaps with another flow @xmath4 in table @xmath3 , the action of @xmath4 may also need to be modified .",
    "timer is a special global resource .",
    "a timer can be configured to link to some action . when the time is up , the corresponding action is executed .",
    "for example , to get notification when a port load exceeds some threshold , we can set a timer with a fixed time - out interval , and link the timer to an action which reads the counter and generates the report packet if the condition is triggered .",
    "this way , the application avoids the need to keep pulling statistics from the data plane .",
    "the pseudo code of the action is as follows :    .... if(cntr[i ] > = threshold ) {    gen_pkt(to_app , port_id , cntr[i ] , now ) ; }    cntr[i ] = 0 ; ....    with the use of global registers and state tables , more complex fsm probes can be implemented .",
    "for example , to monitor the half - open tcp connections , for each syn request , we store the flow signature to a state table",
    ". then for each ack packet , the state table is checked and the matched entry is removed .",
    "the state table can be periodically pulled to acquire the list of half - open connections .",
    "the application can also choose to only retrieve the counter of half - open connections .",
    "when the counter exceeds some threshold , further measure can be taken to examine if a syn flood attack is going on .",
    "the pseudo code is shown below .    ....",
    "if(tcp ) {    if(syn ) {      write flow_sig to stb ;      cntr[i ] + + ;    } else if(ack ) {      remove flow_sig from stb ;      cntr[i ] -- ;      }    }    ....    registers can be considered mini state tables which are good to track a single flow and a few state transitions .",
    "for example , to get the duration of a particular flow , when the flow is established , the state and the timestamp are recorded in a register ; when the flow is teared down , the flow duration can be calculated with the old timestamp and the new timestamp .",
    "in another example , we want to monitor a queue by setting a low water mark and a high water mark for the fill level . every time when an enqueue or a dequeue event happens ,",
    "the queue depth is compared with the marks and a report packet is generated when a mark is crossed .",
    "some probes are essentially packet filters which are used to filter out a portion of the traffic and mirrored the traffic to the application or some other target port for further processing .",
    "there are two ways to implement a packet filter : use a flow table that matches on the filtering criteria and specify the associated action ; or directly make decision in the action .",
    "an example of the former case is to filter all packets with a particular source ip address .",
    "an example of the latter case is to filter all tcp fin packets at edge .",
    "although we can always use a flow table to filter traffic , sometimes it is more efficient and convenient to directly work on the action . as being programmed by the application ,",
    "the filtered traffic can be further processed before being sent .",
    "two most common processes are digest and sample , both aiming to reduce the quantity of raw data .",
    "the digest process prunes the unnecessary data from the original packet and only pack the useful information in the digest packet .",
    "the sample process picks a subset of filtered traffic to send based on some predefined sampling criteria .",
    "the two processes can be used jointly to maximize the data reduction effect .",
    "an application may need to install multiple dnps in one device or across multiple devices to finish one data analytical task .",
    "for example , to measure the latency of any link in a network .",
    "we install a dnp on the source node to generate probe packets with timestamp .",
    "we install another dnp at the sink node to capture the probe packets and report both the source timestamp and the sink timestamp to the application for link latency calculation .",
    "the probe packets are also dropped by the sink dnp .",
    "the source dnp can be configured to generate probe packets at any rate .",
    "it can also generate just one probe packet per application request .",
    "the pseudo code of the sink dnp action is as follows :    .... if(is_probe_packet ) {     gen_pkt(to_app , old_time , now ) ;     drop(this ) ; }    ....    using the similar idea , we can deploy dnps to measure the end - to - end flow latency or trace exact flow paths",
    ". the information can be piggybacked on packets of normal traffic or on generated probe packets .",
    "since potentially we may have many such tasks but each of such tasks may not be constantly needed and each consumes some network resources , making them dynamic is no doubt more efficient . in summary",
    ", dnp is a versatile tool to prepare and generate just - in - time data for data analytical applications .",
    "in the past , network data analytics is considered a separate function from networks .",
    "they consume raw data extracted from networks through ad hoc protocols and interfaces . with the open programmable data plane",
    ", we expect a paradigm shift that makes the data plane be an active component of the data analytical solution .",
    "the programmable in - network computing is efficient and flexible to offload the data preprocessing through interactive data plane programming . a universal network data analytical platform built on top of this",
    "enables a tight and agile sdn control loop .",
    "while dnp is a passive data plane data collection mechanism , we need to provide a declarative interface for applications to use the target - specific dnps for data analytics .",
    "a proposed dynamic networking data analytical system is illustrated in figure  [ fig_platform ] .",
    "an application translates its data requirements into some dynamic transactional queries .",
    "the queries are then compiled into a set of dnps targeting a subset of data plane devices and the instructions for data post - processing after data are collected from the data plane . after the dnps are deployed , each dnp conducts in - network data preprocessing and feeds the preprocessed data to the collector .",
    "the collector finishes the data post - processing and presents the results to the data - requesting application",
    ".        a query can be either continuous or one - shot .",
    "the continuous query may require the application to continuously refine the existing dnps or deploy new dnps .",
    "when an application revokes its queries , the idle dnp resource is released .",
    "since one dnp may be subscribed by multiple applications , the runtime system needs to keep track of the active dnps .    as our future work",
    ", we aim to build a dnp - based network data analytics platform which can address multiple business requirements of network service providers , including qoe measurement , security enforcement , customer care , and network optimization .",
    "we have built a hardware - based dnp prototype based on huawei ne40e device .",
    "the device line card is equipped with a 200gbps npu . the pof interface protocol , essentially an extension of openflow 1.4 , is used as the device programming interface  @xcite .",
    "the preliminary results are promising .",
    "we can deploy an arbitrary counter probe and start to collect results in less than @xmath5-ms without interrupting the normal service and impacting the forwarding performance .",
    "in contrast , to achieve the same effect with the static programming approach , we need to edit and recompile the source code of the entire design , delete the old device configuration , and download the new configuration .",
    "the compiling process consumes about @xmath6 second and the normal service is interrupted by about @xmath6 second for new program download .",
    "dnp reduces the deployment latency by 40 times .",
    "note that this is only for a small forwarding application with 3 flow tables and 10 instruction blocks . for a larger forwarding application ,",
    "the advantage of dnp is even more prominent , because deploying a dnp has a fixed cost but compiling and downloading a larger design consume more time .",
    "we also evaluated the dnp s performance impact to the normal forwarding throughput on our platform by keeping inserting more flow counters and observing the achievable forwarding throughput .",
    "the results are shown in figure  [ fig_eval ] .",
    "the factors that affect the performance include the additional instructions and memory accesses incurred by the dnps .",
    "our analysis shows the extra memory accesses is the dominant factor .",
    "one counter operation needs one read and one write to an sram block reserved for counters .",
    "our platfom s counter memory can sustain at most 425 m accesses per second . the memory bandwidth and latency",
    "interact with the limited number of cores and threads , which eventually drags down the throughput .",
    "our evaluation shows that our platform can support line speed forwarding with up to 14k flow counters .",
    "when more complex dnps are applied , we expect the performance impact will be noticeable with fewer dnps .",
    "the results also serve as an evidence why dynamic rather than static probes are needed .",
    "interested readers may use the open source software provided at pof website  @xcite to conduct the similar experiments on a software target .",
    "many technique challenges need to be addressed to realize dnp and the universal network data analytics platform on general sdn data plane .",
    "we list a few here and also provide our initial thoughts on potential solutions .",
    "\\a ) allowing applications to modify the data plane has security and safety risks ( e.g. , dos attack ) .",
    "the counter measure is to supply a standard and safe api to segregate applications from the runtime system and provide applications limited accessibility to the data plane .",
    "each api can be easily compiled and mapped to standard dnps . an sql - like query language which adapts to the stream processing system",
    "might be feasible for the applications .",
    "\\b ) when multiple correlated dnps are deployed across multiple network devices or function blocks , or when multiple applications request the same dnps , the deployment consistency needs to be guaranteed for correctness .",
    "this requires a robust runtime compiling and management system which keeps track of the subscription to dnps and controls the dnp execution time and order .",
    "\\c ) the performance impact of dnps must be evaluated before deployment to avoid unintentionally reducing the forwarding throughput .",
    "fortunately , the resource consumption and performance impact of standard dnps can be accurately profiled in advance .",
    "a device is usually over provisioned and is capable of absorbing extra functions up to a limit .",
    "moreover , programmable data plane allows users to tailor their forwarding application to the bare bones so more resources can be reserved for probes . the runtime system needs to evaluate the resulting throughput performance before committing a dnp .",
    "if it is unacceptable , either some old dnps need to be revoked or the new request must be denied .",
    "\\d ) while dnp is relatively easy to be implemented in software - based platform ( e.g. , npu and cpu ) , it is harder in asic - based programmable chips .",
    "architectural and algorithmic innovations are needed to support a more flexible pipeline which allows new pipeline stage , new tables , and new custom actions to be inserted at runtime through hitless in - service updates .",
    "an architecture with shared memory and flexible processor cores might be viable to meet these requirements . alternatively , dnps can be implemented using an `` out - of - band '' fashion .",
    "that is , some reserved pipeline stages are dedicated for dnps .",
    "relevant data and/or packets are configured to be passed to these stages for processing and counting .",
    "mainly working on fixed function network devices , sflow  @xcite , planck  @xcite , flexam  @xcite , and everflow  @xcite are all packet - based mirroring and sampling techniques , through setting flow filters or relying on particular sampling policies .",
    "such techniques can only provide partial data plane visibility with information loss .",
    "netsight  @xcite aggressively collects the complete packet history in order to achieve full network visibility with the significant storage and computing cost at control plane .    some other work ( e.g. , tpp  @xcite , int  @xcite , and flowradar  @xcite ) builds on programmable network devices ,",
    "therefore non - packet data can be retrieved from data plane through programming means .",
    "tpp revives the idea of active network  @xcite but keeps it simple .",
    "it allows packets to carry a tiny program in header so the program instructions can be executed by network devices and data collected along the forwarding path .",
    "int realizes the similar idea by using p4  @xcite as the high level programming language .",
    "flowradar can maintain full flow statistics with succinct data structure .",
    "this group of techniques falls into the static programming category in which the custom functions are predefined at design time . to collect data that were not supported by the current design ,",
    "one has to reprogram the data plane .",
    "some techniques are introduced to enhance the data plane data processing capability .",
    "opensketch  @xcite proposes a set of data plane primitives to facilitate the network measurement .",
    "openstate  @xcite devises a stateful data plane programming abstraction which can be used to implement fsms .",
    "insp  @xcite provides a generic data plane packet generation api which can be used to preprocess and encapsulate collected data from data plane .",
    "dpt  @xcite suggests to augment a timestamp header to all packets for various data analytical applications .",
    "interactive control on what data to collect based on network dynamics is discussed in some work ( e.g. , tpp  @xcite , dream  @xcite , and mozart  @xcite ) . however , due to the lack of interactive programming capability , new data can only be collected through selecting existing probes or configuring new flow table entries .",
    "gigascope  @xcite and path query  @xcite provide sql - like languages for applications to initiate interactive queries for network states and data .",
    "frenetic queries manipulate flow entries with the assumption that each flow entry has its counters and rely on the controller - side runtime system to aggreagte the data collected  @xcite .",
    "the high - level and network - wide queries can be compiled into dnps to collect preprocessed data direclty through data plane programming .",
    "while the network data plane is naturally a data streaming system , a data stream management system ( dsms )  @xcite would rely on dnps to realize in - network sampling and sketching techniques .",
    "based on ebpf , io - visor  @xcite is a kernel i / o and networking infrastructure which can be used to implement virtual switch .",
    "it supports dynamic tracing by installing virtual probes converted from high level programs at runtime .",
    "this is inline with the idea of dnp .",
    "dnp is enabled by the most recent technology advances : open programmable data plane and interactive data plane programming .",
    "it takes advantage of the data plane processing capability and provides real - time and on - demand network visibility at low cost and high performance .",
    "we believe dnp is a solid stepping stone to a network data analytical platform which can help service providers to gain deeper insight and mine more values from their networks ."
  ],
  "abstract_text": [
    "<S> effective sdn control relies on the network data collecting capability as well as the quality and timeliness of the data . </S>",
    "<S> as open programmable data plane is becoming a reality , we further enhance it with the support of runtime interactive programming in order to cope with application dynamics , optimize data plane resource allocation , and reduce control - plane processing pressure . </S>",
    "<S> based on the latest technologies , we propose the dynamic network probes ( dnp ) as a means to support real - time and on - demand network visibility . </S>",
    "<S> dnps serve as an important building block of an integrated networking data analytics platform which involves the network data plane as an active component for in - network computing . in this paper , we show the types of dnps and their role in the big picture . </S>",
    "<S> we have implemented an np - based hardware prototype to demonstrate the feasibility and efficiency of dnps . </S>",
    "<S> we lay out the research challenges and our future work to realize the omni network visibility based on dnps . </S>"
  ]
}