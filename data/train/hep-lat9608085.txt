{
  "article_text": [
    "a topological line - defect , i.e.  a cosmic string , a line disclination in a nematic liquid crystal ( nlc ) , a vortex line in superconductors , or a vortex in liquid he , has a shape determined by the field map from 3-space into the ground state manifold after a phase transition , if the ground state manifold @xmath0 ( or vacuum manifold ) has a non - trivial first homotopy group @xmath1 , i.e.  if it contains non - contractable loops . the appropriate @xmath0-symmetric field undergoing the phase transition is uncorrelated beyond a certain scale @xmath2 .",
    "if a closed path in space is mapped  through the field map  onto a non - contractable loop on @xmath0 , the spatial path encloses a string defect , which is topologically stable . in cosmology this is known as the kibble mechanism @xcite .",
    "tracing a string initially is a matter of knowing the particular field value at each space - point close enough to the string . for the late - time dynamical simulations ,",
    "it is permissible and more practical to consider the string as an infinitely thin classical object with its mass and string tension as the only relevant parameters @xcite , although the vachaspati - vilenkin method is commonly used to give the initial conditions of the string network to evolve in such simulations .    to model the kibble mechanism , the lattice spacing in the vachaspati vilenkin ( vv ) algorithm",
    "is interpreted as @xmath3 , so that random field values @xmath4 can be assigned to each lattice point . in a second order transition , @xmath2 is just the compton wavelength of the scalar particle , while in a first order transition , such as in a rapid quench in a liquid crystal , it is interpreted as the average bubble separation  . to see where",
    "the strings will be located initially , one connects the field values along the spatial links by using the geodesics on the vacuum  manifold which connect the field values assigned to the end points of the link  @xcite .",
    "it is reasonable to assume that the field will fall into this configuration because this minimises the gradient  energy in the field . along any closed path consisting of consecutive lattice links ,",
    "it is then easy to demonstrate that the total string flux in any area enclosed by this path is given by the number that specifies the homotopy class containing the resulting closed walk image in @xmath0 . in this paper",
    ", we do not restrict the definition of the vv algorithm to any particular lattice , to any particular manifold @xmath0 , or to particular discretisations thereof .    in the simple case of a @xmath5 symmetry on a cubic lattice for example ,",
    "the total string flux through a lattice plaquette is just the number of times the series of geodesics on the vacuum manifold ( corresponding to the field map of the lattice links ) winds around the @xmath5 manifold .",
    "taking an elementary quadratic face of the cubic lattice , one can get winding numbers of -1 , 0 , or 1 , so that one can just identify the nonzero numbers with the existence of a string somewhere through this face .",
    "this concept is sketched in fig .",
    "[ fig : vv ] .     +",
    "under fairly unrestrictive conditions  which we investigate below  this algorithm has two important properties :    1 .",
    "the string flux through adjacent lattice areas obeys the addition defined through @xmath1 .",
    "this means that the string flux through any lattice area is equal to the topological winding number of the mapping of a walk along the bounding lattice links , but _ also _ equal to the @xmath1-sum of the string fluxes through the constituting lattice plaquettes . for @xmath5 strings for example ,",
    "the ( quantised ) flux @xmath6 through a lattice surface @xmath7 can be expressed by the changes of the @xmath5 angular parameter @xmath8 when walking along all links of the boundary @xmath9 of @xmath7 : @xmath10 where @xmath11 has an orientation as well as a position on the lattice . from this equation",
    "we also see that the flux for _ any _ two adjacent surfaces must be additive , as long as @xmath12 which is generally a very unrestrictive requirement , which can be satisfied in several ways , and which reflects the vectorial structure of the field gradients in the continuum picture .",
    "this means that even the geodesic rule may be broken @xcite , without affecting the topological definition of strings in the vv algorithm .",
    "the proof is now straightforward : if we form one surface @xmath7 from the two adjacent ones @xmath13 and @xmath14 , the sum of walks in both directions along the parts of the edges that disappear cancels out . in the following",
    "we will assume that @xmath15 is a partition of @xmath7 , i.e.  @xmath16 and @xmath17 .",
    "we should have @xmath18 \\,\\,\\,\\,\\,,\\,\\,\\,\\,\\ , \\label{equation:3}\\ ] ] the parts that @xmath19 and @xmath20 have in common are traversed in both directions , when calculating the sum of string fluxes , so that , according to equation [ equation : abel ] , the `` inner '' contributions to the total string flux cancel out , and only the outer parts of the boundary contribute .",
    "thus , we have @xmath21 this means that _ eq .  [ equation : abel ] ensures that the string flux survives in its lattice definition as a topological quantity . _",
    "the proof is trivially generalised to other vacuum manifolds @xmath0 , by simply letting @xmath8 be in the representation of a parameterisation of @xmath0 , but the addition @xmath22 defined through the group @xmath1 has to be used in eqs .",
    "[ equation:3 ] and [ equation : flux ] , since any @xmath23 is an element of this group , if @xmath9 is the boundary of a surface @xmath7 , i.e.  if @xmath9 is a ( collection of ) closed walk(s ) .",
    "we adopt this general notation from now on .",
    "flux conservation _ is another direct consequence of eq .",
    "[ equation : abel ] .",
    "the general form of eq .",
    "[ equation:3 ] is @xmath24 where @xmath22 is the addition appropriate for the group @xmath1 , i.e.  for example the usual addition of integers in the case @xmath25 , or the addition of @xmath26 for so - called @xmath26 strings like e.g.  strings with @xmath27 .",
    "one consequence of eq .",
    "[ equation : addition ] is that no strings terminate except by running into themselves and forming closed loops : for any _ closed _",
    "surface @xmath7 and any partition thereof into two surfaces @xmath13 and @xmath14 , @xmath19 and @xmath20 are identical except for their orientation , and the total string flux through @xmath7 is therefore @xmath28 as long as eq .",
    "[ equation : abel ] is satisfied .",
    "thus we conclude that _ eq .  [ equation : abel ] also ensures that the strings in the vv algorithm do not terminate anywhere unless they close back onto themselves to form closed loops . _",
    "we have now shown that  after assigning random field values to each lattice point  we can uniquely define which elementary faces are penetrated by a string without running into problems with the topological nature of strings or the infinite volume limit .",
    "this is valid for _ any _ lattice and _ any _ vacuum manifold , as long as eq .",
    "[ equation : abel ] is satisfied , but only concerns the string flux .",
    "the problem with combining particular lattices with certain vacuum manifolds , like e.g.  a cubic lattice where the manifold is @xmath5 , is one of uniqueness , not in terms of a position of some short piece of string penetrating an elementary face , but in the way those short pieces connect to form distinctly infinite strings or string loops .",
    "a case of this happening is depicted in fig .",
    "[ fig : cubic_problem ] , where a cube is penetrated by two strings , and it is not clear how the ends are to be connected within the cube .",
    "+    random reconnection of the free ends has often been used as a way to resolve this problem , but this introduces an unphysical bias towards brownian statistics on large scales ( i.e.  on scales where , on average , a large number of such ambiguities will arise ) .      for many vacuum manifolds ( or discretisations thereof ) , a tetrahedral lattice avoids such ambiguities .",
    "effectively , we have to obtain a proof , for any new representation of @xmath0 , that the string defect will be a self - avoiding walk on the dual lattice , i.e .",
    "no tetrahedron can ever bear more than one string .",
    "let us give two examples for such proofs : if we discretise the vacuum manifold @xmath25 minimally , i.e.  by three points with equal spacing @xmath29 between them , a tetrahedron lets at most one string pass through it .",
    "_ proof : _    for a string to pass through a particular triangular face , the vertices of the face all have to have different vacuum angles .",
    "no triangular face where any two of the three vertices have the same phase can carry a string .",
    "if @xmath0 is discretised by three points , at least two points of the tetrahedron must have the same field value , i.e.  at least two triangles can not carry a string .",
    "as it turns out , there is a proof for the full continuous @xmath5 symmetry that a tetrahedron can not have elements of @xmath5 assigned to its vertices in such a fashion to make it carry more than one string inside ( if the geodesic rule is to hold ) .",
    "this proof trivially extends to any discretisation of @xmath5 .    _",
    "proof for continuous @xmath5 : _    say that two vertices are assigned the phases @xmath30 and @xmath31 . in order for the triangle @xmath32 to carry a string",
    ", @xmath33 has to be in the interval @xmath34 , indicated in fig .",
    "[ fig : gamma ] , i.e.  @xmath33 has to be between the angles @xmath35 and @xmath36 (  between \" means in the shorter of the two ways this interval can be defined on a circle , which is the interval that does not include @xmath30 and @xmath31 ) .",
    "+    by the symmetry of the problem , it follows not only that @xmath37 and @xmath38 , but also that @xmath39 , and that all sets @xmath40 have no overlap of non - zero measure , i.e.  @xmath41 ( cf .",
    "[ fig : proof2 ] ) .",
    "+    any fourth vertex of the tetrahedron therefore has to have a field value within exactly one @xmath40   is exactly on one of the borderlines .",
    "since any numerical representation of @xmath5 is a ( although very fine ) discretisation , it is easy to ensure that such points do in fact not occur , by choosing for instance a discretisation of @xmath5 in terms of a very large but odd number of equally spaced points . ] , which means that it will form a string on exactly one other tetrahedron  face , namely the face @xmath42 .    for a minimal discretisation of",
    "an @xmath43 manifold the proof is shown in ref .  @xcite .",
    "however , one also finds that this uniqueness of the string shapes gets lost  even on a tetrahedral lattice  if the vacuum manifold has an @xmath43 symmetry with a continuous representation .      in attempting to create easy - to - handle tetrahedral lattices we first focused on subdividing the elements of a cubic lattice into tetrahedra .",
    "however , there are two essential problems with this : firstly , not only cubic edge lengths , but also facial and spatial diagonals will show up as edges of tetrahedra , making the correspondence between lattice cell edge  lengths and the correlation length of the field a poor one .",
    "secondly , rotational symmetry gets broken , even in a statistical sense . in ref .",
    "@xcite we showed the lengthy proof that there are only two ways of subdividing a cubic lattice into tetrahedra with matching faces , and that both subdivisions spoil the rotational invariance of the large  length limit . here",
    "we will just present the two possible tetrahedral subdivisions of cubes ( cf .",
    "[ figure : cubes ] ) :    * for this case we have drawn all the tetrahedral edges except for a spatial diagonal , which can be chosen freely to be any of the three spatial diagonals _ not _ drawn in that figure .",
    "the drawing ( a ) in fig .",
    "[ figure : cubes ] has a @xmath44 symmetry , which gets spoiled by the necessary choice of a spatial diagonal to create the four `` inner '' tetrahedra . in order for the vv algorithm to work , we need to match the triangular faces of a cubic cell with the faces of the neighbouring cells .",
    "it therefore makes no difference whether any of the cubic cells are randomly rotated by multiples of @xmath45 around the drawn axis .",
    "if we allow a lattice to consist of random rotations of such cubes , the @xmath46 symmetry can be restored in a statistical sense . *",
    "this case is easier to interpret , since all the tetrahedral edges occurring have actually been drawn .",
    "we see that there is again a @xmath46 symmetry ( @xmath47 around the drawn axis , plus inversion , plus a mirror symmetry ) , but this time this symmetry is manifest even in the cubic unit cell .",
    "+    in either case we end up ( at best ) with a @xmath46 symmetry , which singles out a spatial direction .",
    "unsurprisingly , we found that vv measurements of e.g.  the inertia tensor of string defects on both lattices have anisotropic monte carlo averages",
    ".    however , there exists a tetrahedral lattice which beats subdivisions of a cubic lattice in both that it re  establishes rotational symmetry of the measurables  @xcite and that its edge lengths do not vary by a large ratio   strings ( under the name of tricolor walks ) in ref .",
    "@xcite . ]",
    "it actually beats the previously presented ones also in terms of simplicity , because all tetrahedra are exactly identical .",
    "imagine a body  centred cubic ( bcc ) lattice , where all the next nearest and second  nearest neighbours are thought of as being connected by lattice links .",
    "then this lattice draws out tetrahedra , all of the same shape , with two edges of length @xmath48 , the cubic edge length , not touching each other , but being connected by four edges of length @xmath49 , the nearest neighbour distance on the bcc lattice .",
    "all edges of the tetrahedra are nearly equally long and are therefore a reasonable representation of a given correlation length @xmath2 .",
    "this is also reflected in the fact that the first brillouin zone of the body - centred cubic lattice , which builds up the tetrakaidekahedral lattice , is nearly spherical .",
    "we will discuss the dual lattice below .",
    "the tetrahedral lattice is sketched in fig .",
    "[ fig : tetrakai ] .",
    "+    its point - group symmetries are the same as the ones of the bcc lattice , i.e.  @xmath50 , and rotational symmetry of measurables is re - established for the monte carlo averages .",
    "the _ elementary _ unit cell of this lattice , together with it s triangulation , is drawn in fig .",
    "[ fig : unit - cell ] .",
    "we see that this lattice is interpretable as _ a simple cubic lattice subdivided as in type ( b ) , and then tilted triclinically until rotational symmetry is restored . _",
    "the necessary tilt turns the simple cubic lattice into a body  centred cubic one .",
    "+     +    fig .",
    "[ fig : tetrakai ] may be easier to interpret as far as lattice symmetries are concerned , but fig .",
    "[ fig : unit - cell ] is more supportive in the development of an efficient programming style .",
    "as mentioned already , the unit cells of the dual lattice are almost spherical .",
    "this is desirable because the random phases assigned to lattice points live in the centres of the elementary unit cells of the dual lattice ( or , more accurately , in the centre of the first brillouin zone , which is only one representation of a minimal unit cell for the dual lattice ) .",
    "the unit cells of the dual lattice are therefore required to correspond to a correlation volume , which should obviously be close to spherical .",
    "the dual to our lattice is the tetrakaidekahedral lattice .",
    "the unit cell is essentially a cube with its vertices cut off half  way between the centre and the vertex of the cube ( cf .",
    "[ fig : tetrakaiii ] ) .    to have a lattice which is both unique in its string configurations and rotationally symmetric in its predictions",
    "is an improvement to the vv method which we regard as highly necessary . yet",
    ", another improvement has been made for the measurements in @xcite : the data structures corresponding to the string - data allow the lattice to be formally infinite .",
    "cosmic strings in the vv algorithm are a kind of locally self  interacting walk : there is no need to keep track of vacuum field values further away from the string than one correlation length .",
    "effects from other strings are hidden in the randomly assigned vacuum field values .",
    "every string can be traced from the information in the field values on the lattice sites . unless a site has been visited by the _",
    "same _ string already , we can just assign a _",
    "random _ field value , and if a site is never visited by the string in question , we need not assign a field value at all .    in effect , we can ignore the whole lattice , and build up a corresponding data structure as we need it in the process of tracing the string .",
    "this data structure has to store the coordinates and assigned field values of only those lattice points which have been needed to tract the string .",
    "we then want a fast algorithm to check whether a particular lattice point has already needed an assignment of a random field value already during previous steps while tracing the same string , i.e.  a fast way of checking whether given lattice coordinates are actually present in the data structure or not .",
    "if they are not , a random field value is assigned and the appropriate values are added to the walk data , otherwise the formerly assigned field value is re - used and nothing has to be added to the walk data ( apart from whichever measurables one is interested in , of course ; they are stored in a different data structure ) .    on a finite and storable lattice such a search algorithm is not needed because we can address each variable in the computer s memory just by the lattice coordinates , without ever needing to worry whether there are any other pieces of ( the same ) string nearby .",
    "polymer physicists have studied the saw , which is meant to describe configurational statistics of polymers in a low density solution @xcite . to trace out a saw one has to check at every step whether the walk has already been at the lattice site which was randomly chosen to be the next one to be visited by the walk , and an efficient search algorithm is an essential ingredient for any method of tracing long walks   @xcite .",
    "naively one would expect the computational time for this to diverge as the square of the walk length ( or even worse , since the possibility of running into a ` dead end ' would have to be avoided at every step , which involves looking ahead an indefinite number of steps ) .",
    "however , much more sophisticated methods have become customary in that field @xcite , and the computational time spent on tracing the walk is usually just proportional to the walk length , i.e.  the search time for nearby walk segments is of order one .    in the following sections we will introduce these methods into the vv type calculations , and argue that hash tables with collision resolution by double hashing @xcite may be the most efficient data structure for such simulations .",
    "seeing that the rest of the lattice can be ignored , one could store @xmath51 data elements in the computer s memory , with @xmath51 being the total length of the walk .",
    "every data element stores the coordinates of the lattice site which was needed to calculate the direction of the appropriate string segment together with the assigned field value .",
    "when making the next step in the walk , one looks through all the present array entries . the time it takes to search whether a given set of coordinates has occurred already in a walk of length @xmath51",
    "is of order @xmath51 .",
    "the total time it takes to trace such a walk is therefore proportional to @xmath52 .",
    "although the array will usually be much smaller than having @xmath51 elements ( because of the high coordination number of our lattice a lattice site can be approached by the walk many times ) , this would be bad news if one wants to improve on the measurements made on finite lattices .      as an improvement to this unstructured array",
    ", one can maintain separate lists for different subsets of the universe of coordinates .",
    "the set of coordinates is then used as a _",
    "key _ from which we can compute which list we should search in .",
    "of course one would like the given lists to be approximately equally populated in order to ensure that the algorithm does not effectively search in one long list most of the time , while leaving many short lists largely untouched .",
    "apart from this the criterion by which to classify the universe of keys is entirely arbitrary . in @xcite",
    "we used an algorithm of this kind , classifying the lattice points by their distance to the origin .",
    "the distance intervals were stacked such that they were expected to be equally strongly populated by walk elements . since one does not know",
    "how far a given walk will distance itself from the origin , it is necessary to link the data lists dynamically , so that only as many lists as required for every particular walk are maintained .",
    "every first element of the lists has therefore in addition to the pointer to the next element a pointer to the first element of the next list , which is only created when needed .",
    "a search for a given key involves then also a run through all the pointers of the first elements corresponding to all the distances shorter than the one of the key to the origin .",
    "a sketch of how the list of lists works is given in fig .",
    "[ fig : listoflists ] .     +    keeping the length intervals too narrow slows down the search _ for _ the right list , whereas keeping them too wide slows down the search _ through _ the correct list .",
    "therefore the width of these intervals has to be gauged to achieve a reasonable compromise . for well  tuned length intervals ,",
    "one expects the average search time to diverge as the square root of the walk length .",
    "the time it takes to trace a walk then diverges proportionally to @xmath53 .",
    "note that the tuning procedure involves knowing the expected hausdorff dimension of the walk , so that several runs may have to be done with probably non - uniform list lengths until the hausdorff dimension is known .",
    "a better technique has been used already in dynamical simulations of cosmic strings @xcite . there",
    "the lattice volume was divided into small boxes of dimensions comparable to the average string  string separation , and separate linked lists containing data for the string segments living within each of these boxes were maintained .",
    "this results initially in an array of lists , many of which could be empty . however , in the work for ref .",
    "@xcite , empty lists were eliminated from the array , and the remaining lists were sorted by a radix sort . if we were to use such a method for an infinitely large lattice in a vv simulation , the time it takes to search _ for _ the right list is of order @xmath54 , where @xmath55 is the number of maintained ( i.e.  occupied ) lists .",
    "it can easily be shown that search performance is optimised if @xmath56 , i.e.  if the average length of an occupied list is as small as possible .",
    "every lattice site therefore gets its own box in the ideal adaptation of this algorithm to vv simulations .",
    "the average time of a search is then of order @xmath57 , but an _ unsuccessful _ search , i.e.  a search for lattice coordinates which have not yet been stored , has to be followed by an insertion of the new walk data somewhere in the array , taking a time of order @xmath51 to shift the subsequent array elements .",
    "this kind of insertion is not needed in the work of refs .",
    "@xcite , because all searches are performed at time - slices of the string evolution , i.e.  the whole array of lists is known from the beginning .",
    "while building up a self - interacting walk , the number of unsuccessful searches is proportional to @xmath51 , thus the time to trace a string is dominated by those searches , and will be proportional to @xmath52 .    it should be noted that the algorithm of @xcite works even without the elimination of empty lists from the array , because the lattices are finite . the sort algorithm is essential , however , for our gradually built - up lattice , such that the time - costly insertions can not be eliminated .",
    "the proper adaptation of the algorithm in section [ section : sortlist ] , in spite of its other drawbacks for vv type simulations , eliminated entirely the @xmath51-dependence of the search time _ through _ the lists , by storing the data directly in the array without the use of lists ( if we set @xmath58 , i.e.  the box size contains only one lattice point ) . how can the @xmath51-dependence of both the search _ for _ the right list and the time it takes to insert a new element be eliminated ?",
    "let us see what the problem in section [ section : lol ] was .",
    "the origin of the search - time associated with looking _ for _ the right list was that we did nt know in advance how many lists would have to be maintained , i.e.  how many classes of keys would be needed to describe the walk coordinates .",
    "let us now suppose we have a partition of the universe of keys into a fixed number of classes of keys .",
    "then we can write the data into an array of lists , where the correct index is computed from the key and the appropriate list can be accessed directly without the use of pointers .",
    "the number of maintainable lists is then almost arbitrarily large ( of order @xmath51 or larger ) , and search times through the lists become of order one .",
    "the prescription of how to compute the index  giving the position of the list in the array  from a given set of coordinates is called the _ hash function _ @xmath59 .",
    "given that the set of coordinates one is likely to need is mapped onto the image of @xmath60 uniformly , the average search time needed to find a given set of coordinates which has been stored already is @xmath61 where @xmath6 is the number of lattice point which have already been stored , and @xmath55 is the number of linked lists ( @xmath62 is the average length of a list , called the _ load factor _",
    "@xmath63 of the hash table ) .",
    "if the size of the array of lists is comparable to the walk length , then @xmath63 is of order one and the average search time is also of order one .    such an array of lists is called a hash table with collision resolution by chaining @xcite .",
    "collision resolution is the term for the method that tells us where to keep looking for the key ( i.e.  the set of coordinates of interest ) if another key has been stored in the initially addressed data element .",
    "chaining is the name for this method , if the place where we keep looking is a dynamically linked list .",
    "there is an even more efficient method for our purposes , which avoids the use of pointers altogether .",
    "it can only be used if no data entry has to be deleted until the whole hash table can be erased , but this is the case when one traces a static walk . in collision resolution by open addressing",
    ", every data element is stored in the original array , the hash table @xmath64 , where @xmath65 is the index that counts the lattice coordinates and other variables to be stored for every point on the walk , and @xmath55 is of the order of , but larger than ,",
    "the maximum length of any walk we would like to trace . first we compute the array index from the set of coordinates , using a hash function as the arbiter of the class partition of lattice points .",
    "if @xmath66 is the universe of keys  or the set or lattice sites  the hash function maps @xmath67 and appropriate variables for the key @xmath68 , plus they key itself , will be stored in the slot @xmath69 of the hash table @xmath70 .",
    "any @xmath71 therefore contains @xmath72 and some set of variables @xmath73 .",
    "obviously , collisions will occur for certain keys , i.e.  @xmath74 .",
    "these can only be identified because the key itself has also been stored in the slots of @xmath70 . to make collisions as unlikely as possible",
    ", one should make sure that all @xmath75 are expected to be uniformly distributed over @xmath76 , and keep a low load factor @xmath63 . the time it takes to find a given set of coordinates in the hash table then depends on @xmath63 and the method used for collision resolution .",
    "if we know that we can keep @xmath77 and that we do not have to delete single elements from the hash table , collision resolution is best achieved by so - called _ open addressing _ , which gives us a rule by which to find an alternative slot in the hash table , if the slot we are searching in is already occupied by another key and its field data",
    ". then we select a new @xmath55 which might still be empty , instead of appending a list of elements to the slot @xmath78      there are many ways of selecting alternative slots ( cf .  ref .",
    "@xcite ) . the one we used in @xcite is called _",
    "double hashing _ : one uses two hash functions @xmath79 .",
    "the search algorithm looks first at the slot @xmath80 .",
    "if this slot is occupied by a different key from the one we are looking for , it looks at the slot with index @xmath81\\bmod m)$ ] , and so forth through all the @xmath82\\bmod m)$ ] for @xmath83 .",
    "if one encounters an empty slot before finding the key , then the key simply has not been used yet . a search",
    "in which the key is not found ( since it has not been stored yet ) is called an unsuccessful search .",
    "insertion of new data is therefore preceded by an unsuccessful search , and the data is inserted at the first empty slot found . for collision resolution by double hashing",
    "the average time of an unsuccessful search is at most @xmath84 , while the average time of a successful search is at most @xmath85 , but in any case less than the time for the average unsuccessful search ( since it corresponds to an unsuccessful search at the time the given key was inserted , which was always at a time of a lower load factor ) , given that two restrictions on the choice of hash functions apply @xcite :    * the set of @xmath86 is uniformly distributed in @xmath76 .",
    "+ condition ( 1 ) * @xmath87 must be relatively prime to @xmath55 for all @xmath88 , so that the whole hash table is searched if no empty slot can be found , i.e. + @xmath89\\bmod m\\ , |\\,n\\in \\{0,\\ldots , m-1\\}\\ } \\equiv \\{0,\\ldots , m-1\\}$ ] .",
    "+ condition ( 2 )    reasonable compromises between the desire for good memory utilisation and computational speed can be reached at load factors of about @xmath90 or @xmath91 , although higher load factors are possible .",
    "one can gauge the desired compromise between efficient memory - utilisation and speed better than one can while using chaining for collision resolution , since the ( essentially unknown ) number or data collisions do not claim additional memory . moreover , the absence of pointers reserves more memory for data in any case .",
    "double hashing seems to be the most efficient method of open addressing .",
    "others are linear and quadratic probing , which search the sequences @xmath92 and @xmath93 respectively . for linear probing one gets clusters of occupied slots , which increase the probability of a further data collision , if one collision has occurred already in the search , and for quadratic probing it is generally quite difficult to ensure that all slots are searched through .",
    "it is now straightforward to apply hash tables with double hashing in vv - type algorithms .",
    "remember that the assignment of field values happens randomly when the string comes into the vicinity of a lattice point for the first time , but that these values have to be recalled if the string approaches this point again at any later time . using a hash table",
    ", we can simulate an arbitrarily large lattice , without considering more points than necessary .",
    "one can easily trace strings with lengths of up to @xmath94 lattice units on a small workstation without prohibitive memory requirements .",
    "this is a necessity for the accurate determination of the statistical measurables of e.g.  the percolation model of string statistics in ref .",
    "@xcite .",
    "it is particularly easy to create a uniformly distributed @xmath95 on a simple cubic lattice @xmath96 .",
    "for example , we could set @xmath55 to be of the form @xmath97 , so that the set of all slots corresponds to the elements of @xmath98 , and cubes of edge - length @xmath99 can be stacked and mapped identically onto @xmath100 @xmath101\\,\\,\\,\\,\\,.\\,\\,\\,\\,\\ , \\label{eq : hash1}\\ ] ] condition ( 2 ) is fulfilled if @xmath87 is relatively prime to @xmath99",
    ". this can be achieved by making @xmath99 a power of two , and ensuring that @xmath87 is odd , for example @xmath102 + 1\\right\\ } \\bmod m\\,\\,\\,\\,\\,.\\,\\,\\,\\,\\ , \\label{eq : hash2}\\ ] ] note that @xmath87 does not map every cube of size @xmath103 onto @xmath76 in identical ways , so that coordinates that are identical modulo @xmath99 do have the same starting slot @xmath104 , but a different search - sequence thereafter . since @xmath105 has to be relatively prime to @xmath55 , the uniformity of @xmath105 is somewhat restricted , but on average we still map onto all odd numbers @xmath106 equally often .",
    "obviously , we can not use eq .",
    "[ eq : hash1 ] on the body - centred cubic lattice , since all the points have either only even or only odd coordinates , and @xmath107 would not be very uniform . we therefore create a unique map from the body - centred cubic lattice to a simple cubic one , and use as hash functions @xmath108,\\left[\\frac{y+1}{2}\\right ] , z\\right)\\ , , \\label{eq : map}\\ ] ] with @xmath60 being defined as @xmath109 , and @xmath6 the number of data collisions that had to be resolved to search for the desired slot in @xmath70 .",
    "the gauss bracket @xmath110 $ ] denotes the nearest integer not larger than @xmath48 .",
    "the hash functions eqs .",
    "[ eq : hash1],[eq : hash2 ] , and [ eq : map ] are the ones used in ref .",
    "@xcite . there , this algorithm allowed us to investigate a known percolation transition in string defect statistics @xcite much closer than it is possible on a finite lattice .",
    "the transition was postulated in @xcite , but before the infinite lattice view it has been impossible to measure critical exponents of the transition appropriately .",
    "we found that the critical exponents of the percolation transition are in the same universality class as  and therefore identical with  standard bond or site percolation exponents .",
    "we were also able to measure the fractal dimension of string defects to higher accuracy , and to observe subtle differences between strings of only slightly different symmetry groups , while transforming @xmath5 strings smoothly into @xmath43 strings .",
    "not specifying a lattice boundary also eliminates dramatic finite size errors , which are both very clearly observable @xcite and well understood theoretically @xcite .",
    "we have discussed necessary consistency requirements and improvements to the vachaspati vilenkin algorithm for monte carlo measurements of the statistics of cosmic strings and line disclinations .",
    "we have shown a simple criterion which ensures that vv type simulations preserve the topological definition of the string flux through a given surface in the lattice description .",
    "we have suggested the use of a tetrahedral lattice to solve problems of uniqueness present on cubic lattices , although there are symmetry groups which escape a unique determination of the string shapes even on those lattices .",
    "we have argued that the lattice which is dual to the tetrakaidekahedral lattice combines further two desirable properties : it preserves the rotational symmetry of monte carlo averages , and it has only slightly varying edge lengths , making their correspondence to a well - defined physical correlation length more sensible .",
    "the first brillouin zone of the dual lattice , which corresponds to a correlation volume after the string - forming phase transition , is close to spherical .",
    "we have introduced the possibility to view string defects as locally self - interacting walks , allowing us to use a formally infinite lattice , which is built up as one needs it to construct the defects , and avoiding the specification of any boundary conditions .",
    "this requires an efficient search algorithm to look up phase values on lattice sites lying on lattice plaquette which have been pierced by the string already .",
    "we find that a hash table algorithm with collision resolution by open addressing allows us to search for such points in a computational time of order one , permitting to trace a string in the time it takes to only write down the walk coordinates .",
    "typically , a computer with 128 mb of ram will allow to trace strings of up to @xmath94 lattice units , which improves on measurements on finite lattices by two to three orders of magnitude .",
    "this work is supported by pparc fellowship gr / k94836 .    999 t.  vachaspati and a.  vilenkin , phys .",
    "* d30 * ( 1984 ) 2036 . k.  strobl and m.  hindmarsh , sussex university preprint susx - th-96 - 011 ( hep - th/9608098 ) .",
    "kibble , j.  phys .  a * 9 * ( 1976 ) 1387 .",
    "i.  chuang , r.  drrer , n.  turok and b.  yurke , science * 251 * ( 1991 ) 1336 ; + i.  chuang , b.  yurke , a.n .",
    "pargelis and n.  turok , phys .",
    "* e47 * ( 1993 ) 3343 .",
    "bowick , l.  chandar , e.a .  schiff and a.m.  srivastava ,",
    "science * 264 * ( 1994 ) 943 .",
    "hendry , n.s .",
    "lawson , r.a.m .",
    "lee , p.v.e .",
    "macclintock and c.d.h .",
    "williams , nature * 368 * ( 1994 ) 315 .",
    "zurek , los alamos preprint la - ur-95 - 2269 ( cond - mat/9607135 ) , to be published in phys .  rep .",
    "de gennes , _ scaling concepts in polymer physics _ , ( cornell university press , ithaca , 1979 ) .",
    "edwards and m.  warner , phil .  mag .",
    "* a40 * ( 1979 ) 257 .",
    "n.  rivier and d.m .",
    "duffy , j.  phys .",
    "* c15 * ( 1982 ) 2867 .",
    "r.  hagedorn , nuovo cim",
    ".  supp .  * 3 * ( 1965 ) 147 .",
    "b.  sundborg , nucl .",
    "* b254 * ( 1985 ) 583 .",
    "bowick and l.c.r .",
    "wijewardhana , phys .",
    "* 54 * ( 1985 ) 2485 .",
    "d.  mitchell and n.  turok , nucl .",
    "* b294 * ( 1987 ) 1138 .",
    "m.  hindmarsh and k.  strobl , nucl .",
    "* b437 * ( 1995 ) 471 .",
    "t.  vachaspati , phys .",
    "* d44 * ( 1991 ) 3723 .",
    "a.m.  allega , l.a .",
    "fernndez and a.  taranon , nucl .",
    "* b344 * ( 1990 ) 793 ; t.w.b .",
    "kibble , phys .",
    "* 166b * ( 1986 ) 311 .",
    "shellard and b.  allen , in `` formation and evolution of cosmic strings '' , eds .",
    "g.  gibbons , s.  hawking and t.  vachaspati ( cambridge university press , cambridge , 1990 ) .",
    "d.  bennett , _ ibid .",
    "sokal , in _",
    "monte carlo and molecular dynamics simulations in polymer science _ , kurt binder ed .",
    "( oxford university press , oxford , 1994 ) .",
    "hindmarsh and t.w.b .",
    "kibble , rep .",
    "* 58 * ( 1995 ) 477 .",
    "vincent , m.  hindmarsh and m.  sakellariadou , sussex university preprint susx - th-96 - 008 ( astro - ph/9606173 ) .",
    "n.  turok , in `` formation and evolution of cosmic strings '' , eds .",
    "g.  gibbons , s.  hawking and t.  vachaspati ( cambridge university press , cambridge , 1990 ) . s.  rudaz and a.m.  srivastava , mod .",
    "* a8 * ( 1993 ) 1443 .",
    "m.  hindmarsh , a.c .",
    "davis and r.  brandenberger phys .",
    "* d49 * ( 1994 ) 1944 . e.j .",
    "copeland and p.m.  saffin , sussex university preprint susx - th-96 - 006 ( hep - ph/9604231 ) .",
    "k.  strobl , _ aspects of approximate symmetry in cosmology and nematic liquid crystals _ ( phd thesis , cambridge university , 1995 ) + ( http://starsky.pcss.maps.susx.ac.uk/users/karls/thesis/index.html ) .",
    "scherrer and j.a .",
    "frieman , phys .",
    "* d33 * ( 1986 ) 3556 .",
    "e.  copeland , d.  haws , t.w.b .",
    "kibble , d.  mitchell and n.  turok , nucl .",
    "* b298 * ( 1988 ) 445 .",
    "r.  leese and t.  prokopec , phys .",
    "* b260 * ( 1991 ) 27 .",
    "leese and t.  prokopec , phys .",
    "* d44 * ( 1991 ) 3749 .",
    "bradley , p.n .",
    "strensky , and j .-",
    "debierre , phys .  rev .",
    "* a45 * ( 1992 ) 8513 .",
    "b.  li , n.  madras and a.d .",
    "sokal , new york univ .",
    " th940901 ( sep .",
    "cormen , c.e .",
    "leiserson and r.l .",
    "rivest , _ introduction to algorithms _",
    "( mit press / mcgraw hill , cambridge ma / ny , 1990 ) .",
    "d.  austin , e.  copeland and r.  rivers , phys .  rev .",
    "* d49 * ( 1994 ) 4089 ."
  ],
  "abstract_text": [
    "<S> we derive various consistency requirements for vachaspati - vilenkin type monte - carlo simulations of cosmic string formation @xcite or disclination formation in liquid crystals @xcite . </S>",
    "<S> we argue for the use of a tetrakaidekahedral lattice in such simulations .    </S>",
    "<S> we also show that these calculations can be carried out on lattices which are formally infinite , and do not necessitate the specification of any boundary conditions . this way string defects can be traced up to much larger lengths than on finite lattices .    </S>",
    "<S> the simulations then fall into a more general class of simulations of self - interacting walks , which occupy the underlying lattice very sparsely . </S>",
    "<S> an efficient search algorithm is essential . </S>",
    "<S> we discuss various search strategies , and demonstrate how to implement hash tables with collision resolution by open addressing , as used in @xcite . </S>",
    "<S> the time to trace a string defect is then proportional only to the string length .    </S>",
    "<S> line defects are formed after a phase transition if the manifold of equilibrium states @xmath0 ( the vacuum manifold ) is not simply connected @xcite . </S>",
    "<S> they are studied theoretically in the context of field theories in the early universe under the name of cosmic strings , but also exist in the laboratory in the form of superfluid vortices , super  </S>",
    "<S> conductor flux tubes , and line disclinations in nematic liquid crystals . </S>",
    "<S> the interest in the formation of defects in cosmological phase transitions has also been reflected in laboratory experiments studying the formation and evolution of defects in nematic liquid crystals @xcite and he - ii @xcite ( for a comprehensive review of such experiments see ref .  </S>",
    "<S> @xcite ) .    </S>",
    "<S> the properties of ensembles of one - dimensional objects have importance in many problems in physics : polymer science @xcite ; dislocation melting @xcite ; the liquid - gas transition @xcite ; and the hagedorn transitions in effective @xcite and fundamental @xcite theories of strings at high temperature . in refs .  @xcite we presented vachaspati - vilenkin type monte carlo simulations of cosmic string formation . </S>",
    "<S> the algorithms used in those measurements contained many improvements to the usual vachaspati - vilenkin algorithm on finite cubic lattices @xcite .    </S>",
    "<S> in this paper we present the details of these improvements . </S>",
    "<S> we suggest the use of a tetrakaidekahedral lattice , to ensure uniqueness in tracing the shape of a string defect . </S>",
    "<S> we show that vachaspati - vilenkin calculations can be reduced to a treatment of the string defects as self - interacting walks , independent of the neighbouring walks . in this case </S>",
    "<S> , one needs to store only the walk coordinates in the computer memory , and a very sparsely populated lattice results . </S>",
    "<S> this suggests the use of hash tables to search for occupied lattice sites . </S>",
    "<S> we explain how hash tables with collision resolution by open addressing have been implemented for the work of ref .  </S>",
    "<S> @xcite .    </S>",
    "<S> similar search algorithms  discussed in section [ section : sortlist ]  have been used in simulations of string dynamics @xcite , where the lattice has also been sparsely populated by strings . in the simulations for string _ </S>",
    "<S> formation _ one can , however , take advantage of two additional facts : firstly , we do not take account of the string dynamics , such that no data base entry has to be deleted , allowing us to use the slightly more efficient collision resolution by open addressing . </S>",
    "<S> secondly , the string defects can be interpreted as mutually non - interacting , such that the lattice can be made formally infinite and no ( unphysical ) boundary condition has to be imposed in order to insure numerical tractability of the problem . </S>",
    "<S> this realisation is inspired by monte carlo techniques to measure the statistics of self - avoiding walks ( see e.g.  ref .  </S>",
    "<S> @xcite and references therein ) , but is valid for any mutually non - interacting walks .    in section [ section:1 ] </S>",
    "<S> we define the vachaspati - vilenkin construction of string defects for general lattices and ground state symmetries of the underlying field theory . in section [ section:2 ] </S>",
    "<S> we show that this algorithm has only very unrestrictive requirements in order to preserve both the topological definition of a string defect and satisfies string flux conservation in the lattice prescription . in section [ section:3 ] various advantages of using the dual to the tetrakaidekahedral lattice </S>",
    "<S> are presented . </S>",
    "<S> finally , section [ section:4 ] introduces a numeric representation of the vachaspati - vilenkin strings which allows to consider a formally infinite lattice . an efficient data structure and search algorithm </S>",
    "<S> are needed to put this representation to practical use . </S>",
    "<S> we introduce various different possible data structures , and show that there is one which allows to trace a string in a computational time of the order of the string length only . in this method , we build up a lattice as it is needed to trace the walk , and entirely disregard lattice sites which are never visited by the string defect or dislocation . </S>",
    "<S> we can build up the lattice ad infinitum , and computer memory is only needed to store the coordinates of a _ single _ walk , allowing us to trace much longer strings than possible on finite size lattices , without ever running into a lattice boundary . </S>",
    "<S> the realisation of this method on a bcc lattice , used in ref .  </S>",
    "<S> @xcite is presented as an example . </S>"
  ]
}