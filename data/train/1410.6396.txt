{
  "article_text": [
    "permutation reconstruction has been studied as a variation of the graph reconstruction problem that arose from an unsolved conjecture of ulam @xcite .",
    "given an unlabeled graph @xmath5 , deleting one of its vertex together with its incident edges in each possible way we obtain the minors @xmath6 .",
    "ulam s conjecture says that given two graphs @xmath7 with @xmath8 vertices , if there exists a bijection @xmath9 such that @xmath10 is isomorphic to @xmath11 then @xmath5 is isomorphic to @xmath12 . in the permutation reconstruction variant ,",
    "we consider a permutation @xmath13 with @xmath14 entries ; we can delete @xmath15 of the entries in each possible way and renumber them with respect to order and obtain @xmath16 permutations of the numbers from @xmath17 to @xmath18 that are called @xmath19-minors .",
    "smith @xcite introduced the problem of reconstructing the original permutation @xmath13 from the multiset @xmath20 of its @xmath19-minors and looked at the number @xmath21 defined to be the smallest number such that we can reconstruct permutations of length @xmath22 .",
    "raykova @xcite proved the existence of @xmath21 for every positive integer @xmath15 and gave an upper bound of @xmath23 and a lower bound @xmath24 .",
    "monks @xcite studied the reconstruction of a permutation @xmath13 from its set of cycle minors , where each @xmath25-th cycle minor is obtained deleting the entry @xmath25 from the decomposition of @xmath13 into disjoint cycles and reducing each remaining entry larger than @xmath25 by @xmath17 .",
    "he showed that any permutation of @xmath26 can be reconstructed from its set of cycle minors if and only if @xmath27 .    in this paper",
    "we focus our attention to another variant that has an even simpler formulation : the problem of reconstructing a permutation @xmath0 of the integers @xmath1 $ ] given the absolute differences @xmath2 , @xmath3 .",
    "up to our knowledge , the first formulation of the problem was proposed by mohammad al - turkistany in a question posted on mathoverflow.net , a question and answer site for professional mathematicians @xcite .",
    "we will prove that deciding if such a permutation exists is @xmath4complete : any given solution can be quickly verified in polynomial time , but there is no known way to build an efficient polynomial time algorithm that find a solution in the first place . and such an efficient algorithm does nt exist unless @xmath28 , which is the major open problem in computer science .    in order to prove our result we first introduce a new puzzle game , the _ crazy frog puzzle _",
    ", with the following rules : a frog is placed on a square grid board ; some cells of the grid are blocked , some are empty",
    ". the frog must follow a given sequence of horizontal , vertical or diagonal jumps of varying length ; at every jump the frog can only decide to follow the given direction or jump in the opposite direction . for example , when facing an horizontal jump of length two , the frog placed on cell @xmath29 can jump left on cell @xmath30 or right on cell @xmath31 .",
    "the frog can not jump outside the board , on a blocked cell , or on a cell that has already been visited .",
    "the aim of the game is to choose the correct directions of the jumps and make the frog visit all the empty cells of the board exactly once .",
    "figure  [ fig : crazyfrog ] shows an instance of the crazy frog puzzle and its solution .        in line with the recent interest in the complexity of puzzle games",
    "@xcite @xcite , we study how hard it can be to solve a crazy frog puzzle game . in section  [ sec :",
    "cfp ] we formally define the _ decision _ version of the crazy frog puzzle ( cfp ) and give some terminology ; in section  [ sec : npc ] we prove that deciding if a given crazy frog puzzle has a solution is @xmath4complete . in section  [ sec:1d ]",
    "we prove that cfp remains @xmath4-complete even if the board is 1-dimensional . finally in section  [ sec : permutation ]",
    "we prove that the problem remains @xmath4complete even if the initial board has no blocked cells and we will show that the 1-dimensional cfp without blocked cells is equivalent to the permutation reconstruction from differences problem .",
    "we define the decision problem @xcite that asks whether a given crazy frog puzzle has a solution or not :     +   + * input * : an @xmath32 partially filled board : some cells are _",
    "empty _ some cells are _ blocked _ , a starting cell @xmath33 and a sequence of @xmath34 _ jumps _",
    "@xmath35 , @xmath36 ( @xmath34 equals the number of the initial empty cells ) . +",
    "* question * : does there exist a sequence of integers @xmath37 such that if a frog is placed on the starting cell , it can _ visit _ ( we will equivalently use the term _ fill _ ) every empty cell of the board exactly once following the sequence of jumps : @xmath38 ( i.e. the frog can choose only the _ direction _ of the given jumps ) ? the frog can not jump outside the board , on a blocked cell or on an already visited cell .",
    "we briefly introduce the terminology used in the next sections .    horizontal jump",
    ": :    : a jump of the form @xmath39 ( _ horizontal step _",
    "if    @xmath40 ) ; vertical jump : :    : a jump of the form @xmath41 ( _ vertical step _",
    "if    @xmath42 ) ; diagonal jump : :    : a jump of the form @xmath43 ( _ diagonal    step _ if @xmath40 ) ; sequence of jumps : :    : a ( sub)sequence @xmath44    of jumps that are part of the input ; the frog at each step    @xmath45 must choose a direction    ( @xmath46 ) and make the jump    ( @xmath47 or @xmath48 ) .",
    "when there is no ambiguity horizontal / vertical / diagonal jumps are abbreviated with a single letter or a single number ; for example if we are describing a horizontal sequence of jumps , we can write @xmath49 instead of @xmath50 , or write @xmath51 instead of @xmath52 .    line",
    ": :    : a row of the board ; we use a string to represent it using these    characters : @xmath12=blocked cell , @xmath53=empty cell ,    @xmath54=frog , @xmath55=visited cell ; repeated cells can    be represented with power notation ( e.g.    @xmath56 ) ; strip : :    : two or more lines ; configuration : :    : the status of the board cells ( @xmath12,@xmath53 or    @xmath54 ) and the sequence of the next jumps ; a configuration    is _ valid _ , if the frog can complete the sequence of jumps choosing a    @xmath57 direction for each of them ; gadget : :    : the configuration of a part of the board that have a particular role    in the reduction ; a gadget can have one or more _ entrance cells _ and    one or more _",
    "exit cells_. a _ ( valid ) traversal _ of the gadget is a    sequence of jump directions that can lead the frog from an entrance    cell to an exit cell .",
    "we will use capital letters : ( e.g.    @xmath58 ) to indicate gadgets , capital letters with a tilde    ( e.g @xmath59 to indicate jump    sequences .    in the figures we will use the following notation : gray cells represent blocked cells ; a cell with a @xmath54 represents the frog position ; a cell with a @xmath60 represents the target cell ; a cell with a @xmath55 represents an already visited cell ;",
    "numbered cells represent a ( valid ) sequence of jumps that the frog can make .",
    "the horizontal coordinates @xmath61 are from left to right , the vertical coordinates @xmath62 are from top to bottom .",
    "we will prove that the cfp problem is @xmath4hard giving a polynomial time reduction from the hamiltonian path problem on grid graphs @xcite .",
    "first we underline a general property that we will use in the gadget construction .    given a sequence of jumps @xmath63 and a @xmath64 rectangular area @xmath65 of the board , we can construct a corresponding gadget in which all jumps of the sequence must be made inside it and the frog can exit it only at the end .",
    "it is sufficient to extend the area adding a @xmath66 border of blocked cells on the left / right , a @xmath67 border of blocked cells on the top / bottom",
    ". then we can make the frog enter the gadget with a vertical jump @xmath68 and leave it with another vertical jump @xmath69 .",
    "the extended sequence of jumps for the traversal is :    @xmath70    note that _ a ) _ if @xmath65 contains @xmath71 empty cells ( the number of jumps is equal to the number of empty cells minus one ) , then a valid traversal of the gadget implies that the frog must visit ( fill ) all its empty cells ; _ b ) _ instead of vertical jumps we can use long enough horizontal or diagonal jumps .",
    "figure  [ fig : gadgetcons ] shows an example of a @xmath72 partially filled region and a sequence of 6 jumps ; the region can be embedded in a @xmath73 gadget that can be traversed in 4 different ways ; all traversals completely fill the original inner region .",
    "partially filled region and a sequence of 6 jumps ; the region can be embedded in a @xmath73 gadget ; two of the four possible traversals are showed on the right.,width=453 ]      the reduction is from the @xmath4complete hamiltonian path problem on grid graphs ( which may also contain holes ) @xcite .",
    "let @xmath74 be the infinite graph whose vertex set consists of all points of the plane with integer coordinates and in which two vertices are connected if and only if the ( euclidean ) distance between them is equal to 1 .",
    "a _ grid graph _ is a finite , node  induced subgraph of @xmath74 .",
    "given an @xmath75 grid graph @xmath76 in which @xmath77 , @xmath78 are the source and target nodes ; and the coordinates of node @xmath79 on the grid are @xmath80 .",
    "pick the first @xmath81 such that @xmath82 and build a @xmath83 board @xmath65 with all the cells blocked except the cells at coordinates @xmath84 corresponding to the _ nodes _ of @xmath76 and the empty _ target cell _ @xmath85 one step aside from the node @xmath60 .",
    "we call this part of the board the _ graph area_. the frog is initially positioned on cell @xmath86 .    for brevity , throughout the paper we will denote its size with @xmath87 and @xmath88 .",
    "we extend the board at the bottom with @xmath89 _ edge gadgets _",
    "@xmath90 ; each edge gadget @xmath91 has an associated _ cleanup gadget _",
    "@xmath92 placed on its right",
    ". we will generate a fixed sequence of jumps that will force the following logical _ phases _ :    * @xmath93}$ ] enter gadget @xmath94 , choose one of the four directions up , down , left , right and return to cell @xmath95 or @xmath96 in the graph area ; * @xmath97}$ ] enter gadget @xmath98 , choose one of the four directions and return to cell @xmath99 or @xmath100 in the graph area ; *  * @xmath101}$ ] enter gadget @xmath102 , choose one of the four directions and return to cell @xmath103 or @xmath104 in the graph area ; * @xmath105}$ ] jump to the target cell @xmath106 ; * enter the cleanup gadgets area ; * @xmath107}$ ] completely fill the lines of the edge gadget @xmath94 that have an already visited cell ( visited during phase @xmath108 ) ; then completely fill the lines that are still empty ; *  * @xmath109}$ ] completely fill the lines of the edge gadget @xmath102 that have an already visited cell ( visited during phase @xmath110 ) ; then completely fill the lines that are still empty .",
    "an outline of the whole board is shown in figure  [ fig : outline ] .",
    "each edge gadget @xmath91 is a rectangular area that has the same width @xmath111 of the graph area , and @xmath112 lines : @xmath113 blocked lines ; a first _ top inner strip _ of height @xmath111 in which even lines are empty and odd lines are blocked ; @xmath111 blocked lines ; a second _ bottom inner strip _ of height @xmath111 in which even lines are empty and odd lines are blocked ; and finally @xmath113 blocked lines . if the gadget is positioned at row @xmath114 its structure is :         r c l row # & cells & repetitions + @xmath114 : & @xmath115 & @xmath116 +    [ cols=\"^ \" , ]      + @xmath117 & @xmath118    the sequence is : @xmath119 where : @xmath120 @xmath121 @xmath122 is the sequence of vertical jumps : @xmath123 ; and @xmath124 is the reverse of @xmath122 . in other words",
    "we are using the sequence of jumps of lemma  [ binarylemma ] and lemma  [ binarylemmarev ] , but here the jumps are vertical .",
    "the ( vertical ) sequence @xmath122 selects a cell on an even row , then , after an horizontal right jump @xmath125 , the reverse @xmath124 allows the frog to reach the center row again .",
    "figure  [ fig : vertsel ] shows the possible traversal of a @xmath126 area using the vertical selector sequence .",
    "area ( @xmath127 ) . ]",
    "the horizontal inner jumps @xmath128 in the vertical selector sequences @xmath129 can be replaced by an horizontal hole sequence or by an horizontal fill sequence ( extending their first and last jump ) .",
    "so we can build a sequence of jumps that allows the frog to : _ a ) _ select 2 even rows of the inner strip with a visited cell and fill them ; _ b ) _ select the remaining @xmath130 empty even rows and fill them .",
    "the complete inner strip sequence @xmath131 is :    @xmath132    figure  [ fig : final ] shows a possible traversal of the strip cleanup gadget of figure  [ fig : cleanup2 ] .",
    ", that combines the vertical selector sequence with the horizontal sequences . ]",
    "finally we can link together the cleanup sequences @xmath133 ; first we add an empty cell at coordinates @xmath134 that allows the frog to jump from the target cell @xmath106 to the entrance cell of the top inner strip gadget @xmath135 ; then we add a vertical jump from gadget @xmath92 to gadget @xmath136 , @xmath137 :    @xmath138    the crazy frog puzzle is @xmath4complete .",
    "the problem is @xmath4hard : by construction if the original grid graph problem has a solution , then there is a valid traversal of the graph area and the frog can complete the board using the cleanup gadget .",
    "if the board has a valid traversal , as seen above the sequences of nodes traversed in the graph area corresponds to a hamiltonian path in @xmath76 from @xmath139 to @xmath60 .",
    "the instance of the cfp can be constructed in polynomial time because the size of the whole board is @xmath140 , where @xmath141 , and @xmath142 ; so the board can be constructed in time @xmath143 .",
    "the problem is in @xmath4 because a solution can easily be checked in polynomial time .",
    "it is easy to see that even if we restrict the board to be one dimensional the problem remains @xmath4complete .",
    "the crazy frog puzzle remains @xmath4complete even if restricted to 1-dimensional boards ( 1-d crazy frog puzzle ) , i.e. boards of size @xmath144 .",
    "the immediate reduction is from the crazy frog puzzle : given an instance of the cfp , i.e. a @xmath32 partially filled board and a sequence of jumps : @xmath35 check the sequence and if there is a jump @xmath145 such that @xmath146 or @xmath147 reject ( the jump brings the frog outside of the board )",
    ". otherwise expand it to size @xmath148 adding a border of blocked cells of width @xmath14 in all the four directions . then build an equivalent one dimensional crazy frog puzzle of size @xmath149 putting the lines of the expanded board side by side ( cells @xmath29",
    "is mapped to cell @xmath150 ) and converting every bidimensional jump @xmath151 to the one dimensional jump : @xmath152 . by construction",
    "every one dimensional @xmath152 jump will lead the frog from @xmath153 to the cell @xmath154 that corresponds to the original bidimensional cell @xmath155 .",
    "borders prevent the frog to make moves that are invalid in the corresponding bidimensional configuration ; for example using a left jump @xmath156 from cell @xmath157 ( on the left border in the bidimensional board ) to reach another part of the one dimensional board .",
    "figure  [ fig:1d2 ] shows a simple example of a @xmath158 cfp instance transformed to a 1-dimensional cfp board of length @xmath159 .",
    "cfp instance transformed to a 1-dimensional cfp board of length @xmath159.,width=548 ]    we can also fix the starting position of the frog :    without loss of generality we can assume that in the 1-d cfp instance the frog is placed on the leftmost cell .",
    "suppose that the 1-d board is @xmath160 and the sequence of jumps is : @xmath161 .",
    "we can extend the board with a cell on the left that will be the new starting position of the frog : @xmath162 and add a jump to the sequence : @xmath163 .",
    "the first jump , that must be towards the right , places the frog on the original position .",
    "we first prove that 1-d cfp is hard even if the initial board is empty .",
    "1-d cfp remains @xmath4-complete even if the initial board is empty .",
    "given an instance of the 1-d cfp , i.e. a configuration @xmath164 and a sequence @xmath165 of @xmath34 jumps ; suppose that @xmath65 contains @xmath166 blocked cells at coordinates @xmath167 ; let @xmath168 , @xmath169 , @xmath170 .",
    "we start with an empty line of length @xmath171 : @xmath172 and extend the jump sequence in this way : @xmath173 ( note that @xmath174 ) .",
    "the @xmath89 steps forces a sequence of @xmath14 contiguous visited cells , and it must be aligned with the rightmost part of the board otherwise the frog will never be able to reach that cell during jumps @xmath175 , because @xmath176 ( otherwise the original instance does nt have a solution ) .",
    "but , by construction , the only way to align it to the right is to make the @xmath177 jumps towards the right , and they recreate exactly the @xmath13 blocked cells of @xmath65 . the jump @xmath178 forces the frog to the second cell , which is also the starting cell of the original configuration @xmath65 .",
    "the modified instance with the empty board has a solution if and only if the original instance has a solution .",
    "figure  [ fig : empty ] shows a reduction from 1-d cfp to 1-d cfp with initial empty board .",
    "+   + * input : * a set of @xmath89 distances @xmath179 with @xmath180 + * question : * does there exist a permutation @xmath181 of the integers @xmath182 $ ] such that @xmath183 , @xmath184 ?",
    "note that if @xmath181 is a valid solution , then the _ mirrored _ sequence @xmath185 is also a valid solution .",
    "figure  [ fig : prd ] shows an example of a permutation reconstruction from differences problem .",
    "the reduction from the 1-d cfp with initial empty board to the permutation reconstruction from differences problem is straightforward .",
    "are @xmath186 and the reconstructed permutation is @xmath187 ; the mirrored valid permutation is @xmath188 .,width=264 ]    permutation reconstruction from differences ( prd ) is @xmath4complete .",
    "given an instance of the 1-d cfp with initial empty board of length @xmath14 and jumps @xmath189 it has a solution if and only if a valid permutation of @xmath190 $ ] can be reconstructed from differences @xmath191 and @xmath192 .",
    "( @xmath193 ) the frog visits all the cells of the board exactly once , so its positions @xmath194 during the traversal ( where @xmath195 is its starting position ) is a permutation of @xmath196 $ ] and it can be transformed to a permutation of @xmath197 $ ] setting @xmath198 and @xmath199 .",
    "( @xmath200 ) suppose that @xmath201 is a valid permutation that satisfy the difference constraints ; we have that @xmath202 must be @xmath17 or @xmath203 because the first difference @xmath191 .",
    "suppose that @xmath204 , then @xmath205 and @xmath206 are a valid sequence of positions of the frog because @xmath207 , and they represent a valid solution to the 1-d cfp instance , too : the sign of jump @xmath175 is positive if @xmath208 , negative otherwise . if @xmath209 we can simply mirror the values replacing every @xmath210 with @xmath211 because their absolute differences do nt change .",
    "we proved the hardness of a simple problem on permutations that could shed light on other combinatorial or arithmetic open problems .",
    "for example there could be a correlation with the graceful labeling problem , indeed if the @xmath212 are themselves a permutation of @xmath182 $ ] ( all values are distinct ) then the permutation reconstruction from differences ( prd ) problem is equivalent to verify that the sequence is a graceful labeling of the line of @xmath203 .",
    "so it would be interesting to study some restricted versions of the prd problem ; for example what is its complexity if the differences are from a finite set of size @xmath15 . as an intermediate step we introduced a new addictive puzzle game that we hope will be soon playable online or as a smartphone application .",
    "erik  d. demaine and robert  a. hearn .",
    "playing games with algorithms : algorithmic combinatorial game theory . in michael  h.",
    "albert and richard  j. nowakowski , editors , _ games of no chance 3 _ , volume  56 of _ mathematical sciences research institute publications _ , pages 356 . cambridge university press , 2009 ."
  ],
  "abstract_text": [
    "<S> we prove that the problem of reconstructing a permutation @xmath0 of the integers @xmath1 $ ] given the absolute differences @xmath2 , @xmath3 is @xmath4complete . as an intermediate step </S>",
    "<S> we first prove the @xmath4completeness of the decision version of a new puzzle game that we call _ crazy frog puzzle_. the permutation reconstruction from differences is one of the simplest combinatorial problems that have been proved to be computationally intractable . </S>"
  ]
}