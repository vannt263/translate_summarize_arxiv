{
  "article_text": [
    "despite a significant increase in network bandwidth and computing resources , major online service providers ( and not only ) still face extremely volatile revenues due to the high variability of latencies ( aka response times / delays ) , especially in their tails ( e.g. , the @xmath2-percentile ) .",
    "several well - cited and convincing studies reported significant potential revenue loss by google , bing , or amazon , were the latencies higher  @xcite ; a typical cited argument is that an additional @xmath3ms in latency would cost amazon @xmath4 of sales .    given the late abundance of computing resources , a natural and yet very simple way to improve latencies is _ replication _",
    ", a concept which was traditionally used to improve the reliability of fault - tolerant systems  @xcite . in the context of a multi - server ( parallel )",
    "system , the idea is merely to replicate a task into multiple copies / replicas , and to execute each replica on a different server . by leveraging the statistical variability of the servers themselves , as execution platforms",
    ", it is expected that some replicas would finish much faster than others ; for a discussion of various system / os factors affecting execution times see  @xcite .",
    "the key gain of executing multiple replicas is not to reduce the average latency , but rather the latency tail which is recognized as critically important for ensuring a consistently fluid / natural responsiveness of systems .",
    "therefore , replication can be regarded as being instrumental to the development of  latency tail - tolerant systems \" , similarly to its role in fault - tolerant systems  @xcite .",
    "while the idea of using redundant requests is not new , as it has been used to demonstrate significant speedups in parallel programs @xcite , it has become very attractive with its implementation in the mapreduce framework through the so - called ` backup - tasks '  @xcite .",
    "thereafter there has been a surge of very high - quality empirical work which has convincingly demonstrated the benefits of using redundancy for significant latency improvement , both in the mean and also top percentiles .",
    "such works include latency reductions in google s distributed systems  @xcite , in dns queries and database servers  @xcite , key - value storage systems  @xcite , cloud storage systems  @xcite , or significant speed - ups of small jobs in data - centers  @xcite or short tcp flows  @xcite .",
    "such empirical work has been complemented by several excellent analytical studies ( see the related work section ) , which have provided fundamental insight into the benefits of replication . constrained by analytical tractability ,",
    "most of these works make several strong assumptions : not only the arrivals are poisson and the service times are exponentially distributed ( i.e. , typical assumptions in the queueing literature ) , but the service times of the replicas plus the corresponding original tasks are statistically independent . by challenging these assumptions , especially the last two ,",
    "we first provide some elementary analytical arguments , along with some simulation results , that the benefits of replication are highly dependent on both the distributional and correlation structures of the service times .",
    "a convincing example is that the stability region of a system is not monotonous in the replication factor .",
    "for instance , by adding a replica server an overloaded system can be stabilized , an advantage which however vanishes by adding additional replica servers , whence the subtitle of this paper .",
    "the contribution of this paper is a general analytical framework to compute stochastic bounds on the response time distributions in replication systems . in particular",
    ", our framework covers scenarios with markovian arrivals , general service time distributions ( subject to a finite moment generating function ) , and a correlation model amongst the original and replicated tasks . using back - of - the - envelope calculations ,",
    "our results can be immediately used for engineering purposes ( e.g. , to determine the optimum number of replicated servers to minimize the top percentiles of latencies ) .",
    "a key feature of our methodology is that it relies on a powerful martingale methodology which was recently shown to provide remarkably accurate stochastic bounds in various and challenging queueing systems with non - poisson arrivals  ( see , e.g. ,  @xcite ) .",
    "according to several numerical / simulation illustrations , our results exhibit a similar high accuracy , including the challenging case of markovian arrivals .    to concretely illustrate the applicability of our results we consider two applications .",
    "the first is to improve the performance of mapreduce systems ( which can be abstracted by a fork - join ( fj ) queueing model ) through replication .",
    "in particular , we design an elementary replication policy which can significantly improve not only delay quantiles ( e.g. , by a factor of roughly @xmath5 ) , but more fundamentally the stability region of a fj system by a logarithmic factor @xmath0 in the number of servers @xmath1 ; our analysis provides a theoretical understanding of the benefits of using back - up tasks in mapreduce , as a proposal to alleviate the problem of stragglers  @xcite .",
    "albeit such a theoretical benefit is obtained under strong exponential and statistical independence assumptions , simulation results show that the underlying numerical benefits carry over to realistic scenarios subject to correlations amongst replicas .",
    "the second application investigates the analytical tradeoff between resource usage and response times under replication , a matter which has recently been addressed through google and bing empirical studies .",
    "the key analytical insight is that increasing resource usage through replication yields a substantial reduction of response time upper quantiles if the service times of the replicas are sufficiently independent ( i.e. , subject to a low correlation factor , to be later formally described ) .",
    "the rest of the paper is organized as follows . in section  [ sec : rmrw ] we introduce the analytical models and discuss related work . in section  [ sec : eai ] we provide several insights into the benefits of replication , by following elementary models and derivations . in section",
    "[ sec : theory ] we provide our general theoretical framework dealing with both poisson and markovian arrivals , and also independent and correlated replicas ( i.e. , four scenarios ) . in section  [ sec : app ] we investigate the two applications of our analytical framework . in section  [ sec : con ] we conclude the paper .",
    "we consider a parallel system with @xmath1 homogeneous servers with identical speeds ( see figure  [ fig : replica ] ) .",
    "a stream of tasks arrives at a dispatcher according to some stationary and ergodic point process ; the interarrival times are denoted by @xmath6 with the mean @xmath7=\\frac{1}{\\lambda}$ ] , whereas their number within the ( continuous ) time interval @xmath8 $ ] is denoted by @xmath9 .",
    "this process can have a markov structure , to be more precisely defined in section [ subsec : mair ] .",
    "= [ circle , fill = black!2,minimum size=0.8cm , inner sep=0pt ]    at ( 6.4,-2.25 cm ) ( 9 ) @xmath10 ; at ( 2.5,-1.75 cm ) ( 11 ) dispatcher ; at ( 3.5,-1.75 cm ) ( 12 ) ; at ( 1.5,-1.75 cm ) ( 5 ) ; at ( 0,-1.75 cm ) ( 6 ) ; ( 6 ) edge node tasks ( 5 ) ; in 1,2,4 ( 5,-+1 )  + +",
    "( 1cm,0 )  + + ( 0,-0.5 cm )  + + ( -1cm,0 ) ; iin 1, ... ,4 ( 6cm - i5pt,-+1 )  + ( 0,-0.5 cm ) ;",
    "at ( 6.4,--0.25 + 1 ) ( + 6 ) 4 @xmath1 ; ( 6.9,--0.25 + 1 )  + ( 15pt,0 ) ; at ( 5,--0.25 + 1 ) ( ) ; ( 12 ) edge node ( ) ;    the service times of the tasks are denoted by @xmath11 and are drawn from some general distribution subject to a finite moment generating function ; the average is set to @xmath12=\\frac{1}{\\mu}$ ] . for numerical purposes , we will occasionally use the analytically convenient pareto distribution , which can be approximated within our theoretical framework through a hyperexponential distribution .",
    "the _ utilization _ of one server , in a system without replicas where tasks are symmetrically distributed , is denoted by @xmath13 in general , it is assumed for stability that @xmath14 . however , in a system with replication , the expression of the utilization @xmath15 may change depending on various factors ( e.g. , the distribution of tasks service times ) whereas the stability condition may fail ( such occurrences will be specifically indicated ) .",
    "a crucial design component in the parallel server system is the task assignment policy , i.e. , how are the incoming tasks assigned to the @xmath1 servers for processing ?",
    "while many such policies have been analytically and empirically studied , we focus on few relevant ones in terms of both performance and overhead :    * * random * :  each task is dispatched , uniformly at random , to one of the @xmath1 servers ; in the particular case of a poisson ( overall ) arrival stream , the tasks arrived at some server follow a poisson distribution with rate @xmath16 . *",
    "* round - robin * :  tasks are deterministically dispatched in a circular fashion to the @xmath1 servers , i.e. , task @xmath17 is assigned to server @xmath18 ( with the convention that @xmath19 stands for @xmath1 ) ; in the case of a poisson stream , the interarrival times at some server follow an erlang @xmath20 distribution . *",
    "* g / g / k * :  unlike the previous two schemes , which immediately dispatch the incoming tasks , and whereby tasks enqueue at the assigned servers , in @xmath21 it is the responsibility of each server to fetch a single task , from a centralized queue at the dispatcher , once they become idle . * * ( full-)replication * ( @xmath1-replication factor ) :  each incoming task @xmath17 is replicated to all the @xmath1 servers ; the corresponding service times are denoted by @xmath22 for @xmath23 . alike in _",
    "random _ and _ round - robin _ , each server maintains a local ( fifo ) queue . *",
    "* partial - replication * ( @xmath24-replication factor ) :  besides _ full _ replication , a task may be replicated to only @xmath25 servers ; for simplicity , we will assume that both @xmath1 and @xmath24 are powers of @xmath5 , and that consecutive blocks of @xmath24 replicas are allocated to the @xmath1 servers in a round - robin manner .",
    "we call the underlying strategy ( strict ) _ partial - replication _ when @xmath26 , and _ no - replication",
    "_ when @xmath27 .    in terms of analytical tractability ,",
    "_ random _ and _ round - robin _ are significantly more amenable than @xmath21 ; in fact , exact results are known for @xmath21 only in the case of poisson arrivals and exponential service times ( in which case the model is denoted by @xmath28 ) .",
    "however , @xmath21 yields significantly better performance ( i.e. , much smaller response times of the tasks ) than _ random _ and _ round - robin _ , especially in the case of high variability of the tasks service times ; in turn _ round - robin _ slightly outperforms _ random _ ( for an excellent related discussion see  @xcite , pp .",
    "408 - 430 ) .",
    "it is to be noted however that the superiority of @xmath21 is ( partly ) due to the availability of additional system information , i.e. , each task is ` informed ' about which server is idle such that it can minimize its response time . in turn , amongst policies which are oblivious to such information , _ round - robin _ was shown to be optimal for exponential  @xcite and increasing failure rate distributions  @xcite ; for a recent state - of - the - art queueing analysis of round - robin see  @xcite .",
    "a more sophisticated replication strategy was proposed in the context of massively parallel data processing systems in which ( large ) jobs are forked / split into ( smaller ) tasks , each assigned to a server ; once a fraction of the tasks finish their executions , each of the remaining ( and straggling ) tasks are further replicated .",
    "this model appeared in the mapreduce specification  @xcite , and was formally studied in terms of the underlying response time / resource usage tradeoff , albeit by disregarding queueing effects in  @xcite .",
    "another strategy used by google is to defer the start of executing the second replica for some suitable time , in order to reduce resource usage  @xcite .      before discussing the relative performance of _ replication _ to other policies ,",
    "we first define how replication strategies deal with residual resources .    *",
    "* purging * :  a task is considered to complete ( and hence its response time is determined ) when the fastest replica finishes its execution ; at the same time , the residual replicas are all purged / cancelled from the system ( with some negligible related cost ) . * * non - purging * :  a task response time is determined as in the _ purging _ case , but the remaining replicas leave the system no sooner than their execution end .    _",
    "purging _ is clearly more efficient from a purely _ task response - time _ perspective , as it frees resources once the first replica completes ; this operation demands however synchronization overhead amongst the servers .",
    "one basic reason for this superiority is that in the _ non - purging _ model the utilization increases @xmath24-fold for a @xmath24-replication factor , for any task service time distribution ; in particular , a @xmath5-replication factor requires the replica - free system to have a utilization under @xmath29 ( otherwise the response times get unbounded ) . in turn",
    ", the growth of the utilization is less pronounced in the _ purging _ model , depending on the type of distribution of the service times ; in fact , and perhaps counterintuitively , there is no increase in the case of the exponential distribution regardless the replication factor ( for a follow - up discussion see [ sec : stability ] ) .    besides the advantage of a better queueing performance , the _ purging _ model is much easier to analyze .",
    "in fact , the only analytical study of _ non - purging _ is considered in  @xcite ; besides the classical and simplifying assumptions of poisson arrivals and exponential service times , the underlying queueing analysis critically relies on an artificial statistical independence assumption amongst the queues . using this assumption , it is shown that below a utilization threshold of @xmath30 , a @xmath5-replication factor strategy does improve the response time despite the inherent doubling of the utilization .    a generalized version of _ partial - replication _ considers the situation",
    "when the fastest @xmath31 replicas finish their execution ( the residual ones being subsequently purged ) ; a practical use of this generalization is in coded distributed storage systems  @xcite .",
    "the central result is that under arrivals with _ independent increments _ , and exponential ( or ` _ _ heavier _ _ ' ) service times , _ full - replication _ minimizes the ( average ) response times . in turn , in the case of ` _ _ lighter _ _ ' service times and @xmath32 utilization , a replication factor greater than one is detrimental .",
    "the underlying proofs use an ingenious coupling argument , but do not provide quantitative results .",
    "another set of qualitative results , on the superiority of _ full - replication _ for a specific type of service time distributions ( including the exponential ) is presented in  @xcite .",
    "interestingly , under a discrete time model with geometric service time distributions , is is shown in  @xcite through quantitative results that _ no - replication _ is optimal ( for an explanation of the apparent contradiction between exponential and geometric service time distributions , with respect to the optimality of the replication model , see  @xcite ) .",
    "recently , an _ early purging _",
    "model , in which residual replicas are purged once the first one starts its execution , has been mentioned in  @xcite and further analyzed in  @xcite ; besides reducing the resource usage , it was shown that this model can also significantly reduce response times despite the apparent loss of diversity , at high utilizations .",
    "the perhaps most fundamental related result obtained so far is a recent exact analysis under the purging model  @xcite .",
    "while the analysis critically relies on the poisson / exponential models , a key analytical contribution is capturing multi - class arrivals ( i.e. , different arrival streams are served by different sets of ( replicated ) servers ) .",
    "the elegance of the results lends itself to several fundamental and contriving insights into the properties of replication , especially accounting for the multi - class feature of the model .",
    "more general stochastic bounds in replication systems are obtained in  @xcite , including the very challenging multi - stage case , by leveraging the analytical power of the stochastic network calculus methodology . while the underlying arrival and service models from  @xcite are more general than ours , the crucial difference is in handling the underlying correlation structures : concretely , while  @xcite deals with arbitrary correlation structures yielding stochastic bounds holding in great generality , we exploit the specific correlation structures through the martingale methodology .",
    "here we complement the previous discussion by providing several motivating examples .",
    "after quickly contrasting the task assignment policies introduced earlier , under the poisson / exponential models , we explore more general service time distributions .",
    "the key insight is that the stability region of replicated systems is not necessarily monotonous in the number of replicas ; depending on the service distribution , any of the policies _ no - replication _ , _ full - replication _ , or _",
    "partial - replication _ can yield the largest stability region .      for some immediate analytical insight , consider the classical example of poisson arrivals and exponential service times .",
    "due to a lack of closed - form formulas for all considered policies , for large number of servers , we assume that @xmath33 ; recall that the ( server ) utilization is @xmath34 .",
    "the average response times for the four policies ( i.e. , _ random _ , _ round - robin _ , _ m / m/2 _ , and _ replication _ ) are , respectively , @xmath35&=&\\frac{1}{\\mu(1-\\rho)}\\\\ e\\left[t_{rr}\\right]&=&\\frac{2}{\\mu\\left(1 - 4\\rho+\\sqrt{1 + 8\\rho}\\right)}\\\\ e\\left[t_{mm2}\\right]&=&\\frac{1}{\\mu\\left(1-\\rho^2\\right)}\\\\ e\\left[t_{rep}\\right]&=&\\frac{1}{2\\mu(1-\\rho)}~.\\end{aligned}\\ ] ] note that _ replication _ induces an @xmath36 queueing model , in which the service time is the first order statistics of two i.i.d .",
    "random variables ( in the current case being an exponential with half of the mean of the original ) .",
    "immediate comparisons reveal that the minimum ( ` best ' ) response time is attained by _ replication _ ; a key reason is that the gain of sampling the minimum of exponential random variables , together with the _ purging _ model , significantly dominates the cost of temporary redundant resource usage . in turn",
    ", the maximum ( ` worst ' ) response time is attained by _",
    "random _ ; the relative performance of _ round - robin _ and _ m / m/2 _ depends on the value of @xmath15 .",
    "lastly , we point out that the superiority of _ replication _ immediately extends to larger values of @xmath1 .    more general results in terms of lower and upper bounds on the average response time in the case of a variant of _ replication _ , in which only the fastest @xmath37 tasks are required to complete ( whilst the residual tasks are purged ) ( and which was _ qualitatively _ studied in  @xcite ) , appeared in  @xcite ;",
    "in particular , it was shown that _ replication _ outperforms the corresponding _",
    "m / m / k _ model .",
    "further upper bounds were derived in the case of general service time distributions , using existing bounds on the first two moments of the @xmath38 order statistics .      in the previous example with exponential service times ,",
    "the stability region is invariant to the replication factor ; the reason is that the @xmath39 order statistic of @xmath1 ( independent ) exponential random variables @xmath40 is an exponential random variable @xmath41 .",
    "the next elementary examples show that any strategy amongst _ no - replication _",
    ", _ full - replication _ , or _",
    "partial - replication _ can yield the strictly largest stability regions ( and hence ` best ' response times , at least in some subset of the stability region ; a follow - up discussion will be given in section  [ subsec : iacr ] ) .",
    "a fundamental reason is the assumption of independent service times of the replicas , which motivates the need for accounting for some correlation structures .",
    "recall that in the _ no - replication _",
    "scenario , a necessary and sufficient condition for stability ( or , equivalently , for finite response times ) is @xmath42<k\\e[t_1]~.\\ ] ]    in the case of _ full - replication _ , the corresponding stability condition is given by @xmath43<\\e[t_1]~,\\ ] ] whereas in the case of _ partial - replication _ with replication factor @xmath24 by @xmath44<\\frac{k}{k}\\e[t_1]~.\\ ] ]    denoting the ccdf of @xmath11 by @xmath45 we observe from the previous stability conditions that the ` best ' replication - factor @xmath24 is @xmath46    we next present examples of different distributions for @xmath11 resulting in ` best ' scenarios for each of the three replication strategies .",
    "assume uniformly distributed service times , i.e. , @xmath47}$ ] .",
    "the following argument shows that in this case replication is detrimental , i.e. , @xmath48<k\\e\\left[\\min\\left\\{x_1,\\ldots , x_k\\right\\}\\right]~,\\ ] ] for any @xmath49  : @xmath50 = & k\\int_0^{\\infty}\\p\\left(\\min \\left\\{x_1,\\ldots , x_k\\right\\}\\ge x\\right)dx\\\\   = & k\\int_0^{\\infty}\\p\\left(x_1\\ge x\\right)^k dx\\\\   = & \\int_0^{1}kx^kdx = \\frac{k}{k+1}>\\frac{1}{2}=\\e\\left[x_1\\right]~.\\end{aligned}\\ ] ] the same argument additionally shows that _ partial - replication _ is better than _ full - replication_. this result extends the qualitative observation from  @xcite ( i.e. , theorem  4 therein , restricted to a @xmath32 utilization , and hence an unstable regime ) to any ( stable ) utilization .",
    "let the @xmath11 now be weibull distributed , i.e. , @xmath51 . for @xmath52 , a higher degree of replication is ` better ' , as shown below : @xmath53 = & k\\int_0^{\\infty}\\p(\\min \\left\\{x_1,\\ldots , x_k\\right\\}\\ge x)dx\\\\   = & k\\int_0^{\\infty}e^{-k\\left(x/\\lambda\\right)^{\\alpha}}dx\\\\   = & k\\frac{\\lambda}{k^{1/\\alpha}}\\gamma(1 + 1/\\alpha)~.\\end{aligned}\\ ] ] by the assumption on @xmath54 , the last term is monotonically decreasing in @xmath24  . note that in the special case of exponentially distributed @xmath11 , i.e. , @xmath55 , replication is neither beneficial nor detrimental ( from the point of view of the stability region ) , as pointed out earlier .",
    "this result also extends the qualitative observation from  @xcite ( i.e. , theorem  3 ) to any ( stable ) utilization .",
    "lastly we consider the pareto distribution , i.e. , @xmath56 for @xmath57 . for a suitably chosen @xmath58 , it can be shown that ( strict ) _ partial - replication _ can become ` better ' than both _",
    "full - replication _ and _ no - replication _ : @xmath50 = & k\\int_0^{\\infty}\\p\\left(\\min \\left\\{x_1,\\ldots , x_k\\right\\}\\ge x\\right)dx\\\\   = & k+k\\int_1^{\\infty } x^{-k\\alpha}dx = k+\\frac{k}{k\\alpha-1}~.\\end{aligned}\\ ] ] it is clear that for sufficiently small @xmath58 , the minimal value is attained for @xmath59  .",
    "this last example highlights that the performance of replication strategies heavily depends on the replication factor @xmath24 , the service time distribution , and other underlying assumptions .",
    "in particular , performance is not monotonic in @xmath24 , and thus an optimization framework is desirable ( related results , on the actual response time distributions as a function of @xmath24 will be provided in the next section ) .    ) to underload ( @xmath59 ) and back ( @xmath60 ) ( @xmath61 , @xmath62 , @xmath63 , and utilization @xmath64 ( for the non - replicated @xmath27 case)),scaledwidth=48.0% ]    for complementary numerical results illustrating the counterintuitive effect of @xmath24 , consider the pareto distribution with the assumption of independent service times of the @xmath24 replicas .",
    "let @xmath61 , arrival rate @xmath63 , @xmath62 ( for the pareto distribution ) , yielding a utilization @xmath64 ( i.e. , @xmath65 ) . by plotting the simulated latencies of the first @xmath66 packets ,",
    "figure  [ fig : pareto ] shows that while the system without replication is in overload , a replication factor of @xmath59 stabilizes the system ( reducing the utilization to @xmath67 ) , whereas a replication factor of @xmath68 puts the system back in overload ( increasing the utilization to @xmath69 ) .",
    "the non - monotonic behavior in @xmath24 disappears when the service times are sufficiently correlated .",
    "indeed , by taking the service times of the replicas as @xmath70 ( where the @xmath11 are pareto distributed , and @xmath71 is arbitrary ) , it holds : @xmath72 & = k\\e[y ] + k\\e[\\min\\{x_1,\\ldots , x_k\\}]\\\\   & = k\\e[y ] + k+\\frac{k}{k\\alpha-1}\\\\   & = k\\left(\\e[y ] + \\frac{k\\alpha}{k\\alpha-1}\\right)~,\\end{aligned}\\ ] ] so that ( for a suitably chosen @xmath58 , and a sufficiently large value of @xmath73 $ ] ) the optimal value of @xmath24 in eq .",
    "( [ eq : bestk ] ) is @xmath74 ( i.e. , _ no - replication _ is ` best ' ) .",
    "we assume a queueing system with @xmath1 servers and interarrival times between jobs @xmath17 and @xmath75 denoted by @xmath6 . upon its arrival , job @xmath17",
    "is replicated to @xmath76 servers where they are processed with service times @xmath77 , respectively . for simplicity ,",
    "we throughout assume that @xmath1 is an integral multiple of @xmath24 .",
    "further , the jobs are assigned to the @xmath78 batches in a round robin scheme , i.e. the interarrival times for one batch can be described as : @xmath79    the following recursion describes the response time @xmath80 of job @xmath75 , i.e. , the time between the job s arrival and its service being complete : @xmath81 resulting in a representation of the _ steady - state _ response time @xmath82 as : @xmath83 where @xmath84 stands for equality in distribution , and the empty sum is by convention equal to @xmath19 .",
    "depending on the correlation between either the interarrival times and the service times , respectively , we consider four different scenarios : in subsection  [ subsec : iair ] , all random variables @xmath6 , @xmath22 are assumed to be independent . in subsection",
    "[ subsec : mair ] , the interarrival times are driven by a certain markov chain , whereas in subsection  [ subsec : iacr ] the service times are correlated through a common additive factor .",
    "finally , in subsection  [ subsec : macr ] , a combination of both correlation models is considered .      as stated above",
    ", we consider the scenario of _ independent replication _ , i.e. , @xmath85 is an independent family of random variables .",
    "the next theorem provides an upper bound on the ccdf of @xmath82 as defined in eq  ( [ eq : responsetime ] ) :    [ tm : iair ] let @xmath86 be defined by @xmath87\\e\\left[e^{-\\theta t_i}\\right]^{\\frac{k}{k}}\\le    1\\right\\}~.\\ ] ] then the following bound on the response time holds for all @xmath88 : @xmath89e^{-\\theta_{\\text{ind}}\\sigma}~.\\ ] ]    note that , given the stability conditions from eq .",
    "( [ eq : stability ] ) , @xmath90 as @xmath91\\e\\left[e^{-\\theta t_i}\\right]^{\\frac{k}{k}}\\right|_{\\theta=0}\\\\   & = \\e\\left[\\min_{j\\le k}\\{x_{i , j}\\}\\right]-\\frac{k}{k}\\e\\left[t_i\\right ] < 0~.\\end{aligned}\\ ] ]    define the process @xmath92 by @xmath93 @xmath92 is a martingale : @xmath94\\\\    & = \\e\\left[e^{\\theta_{\\text{ind}}\\left(\\min_{j\\le k}\\{x_{i , j}\\}-\\tilde{t}_n\\right)}\\right]\\\\    & = \\e\\left[e^{\\theta_{\\text{ind}}\\min_{j\\le k}\\{x_{i , j}\\}}\\right ] \\e\\left[e^{-\\theta_{\\text{ind}}t_n}\\right]^{\\frac{k}{k}}\\\\    & = 1~.   \\end{aligned}\\ ] ] now define the stopping @xmath95 as @xmath96 and note that @xmath97 . with the optional stopping theorem @xmath98 & = \\e\\left[m(1)\\right]\\\\    & = \\e\\left[m(n\\wedge l\\right]\\\\    & \\ge",
    "\\e\\left[m(n\\wedge l)1_{n\\le l}\\right]\\\\    & \\ge e^{\\theta_{\\text{ind}}\\sigma}\\p(n\\le l )   \\end{aligned}\\ ] ] now let @xmath99 .",
    "we point out that the proof essentially follows the bounding technique for gi / gi/1 queues from  @xcite .",
    "we now turn to the more realistic scenario where the interarrival times are correlated : a two - state markov chain @xmath100 alternates between _ active _ and _ inactive _ periods ; while in the active state , exponentially distributed interarrival times are generated with parameter @xmath101 , and the chain turns inactive with probability @xmath102 . in the inactive state ,",
    "_ one _ interarrival time ( exponentially distributed , parameter @xmath103 ) is generated , and the chain jumps back to the active state ( see figure  [ fig : markovchain ] ) . formally , let @xmath104 be i.i.d .",
    "random variables and define the sequence of interarrival times @xmath6 by @xmath105    = [ circle , fill = black!2,minimum size=25pt , inner sep=0pt ]    \\(0 ) @xmath106 ; ( 1 ) @xmath107 ; ( 2 ) @xmath108 ; ( 3 ) @xmath108 ; ( 1 ) edge[loop right ] node @xmath109 ( 1 ) ( 0 ) edge[bend left=33 ] node @xmath74 ( 1 ) ( 1 ) edge[bend left=33 ] node @xmath110 ( 0 ) ( 0 ) edge node @xmath111 ( 2 ) ( 1 ) edge node @xmath101 ( 3 ) ;    the steady state distribution @xmath112 of the markov chain is given by @xmath113 such that for the average of the interarrival times holds @xmath114 = \\left(\\lambda_{\\text{act}}^{-1 } + p\\lambda_{\\text{iact}}^{-1}\\right)\\big/\\left(1+p\\right)\\ ] ]    note that the transition matrix of @xmath100 is given by : @xmath115    in order to state the main result of this section , we need the following transform of matrix @xmath116 :    for @xmath117 , let @xmath118 denote the following matrix : @xmath119 further , let @xmath120 denote the spectral radius of @xmath118 , and @xmath121 be a corresponding eigenvector .",
    "note that @xmath118 is an exponential transform of @xmath116 which has the laplacians of the respective arrival times as an additional factor in each column .",
    "in particular , with @xmath122 we recover the transition matrix itself , i.e. , @xmath123 .",
    "the following theorem is the analogous result to theorem  [ tm : iair ] ( note that the service times @xmath22 are still assumed to be i.i.d . ) :    [ tm : mair ] let @xmath124 and @xmath125 be defined by @xmath126\\xi^{\\frac{k}{k}}(\\theta)\\le    1\\right\\}~.\\ ] ] then , for the system with replication to @xmath24 out of @xmath1 servers , the following bound on the response time holds for all @xmath127 : @xmath128e^{-\\theta_{\\text{mkv}}\\sigma}~.\\ ] ]    proceeding similarly as in the proof of theorem  [ tm : iair ] , define the process @xmath92 by @xmath129 @xmath92 is a martingale : by induction over @xmath130 one shows that : @xmath131\\\\    & = \\left(t_{\\theta_{\\text{mkv}}}^{\\frac{k}{k}}\\right)_{z((n\\frac{k}{k}-1)),\\text{iact } } + \\left(t_{\\theta_{\\text{mkv}}}^{\\frac{n}{l}}\\right)_{z(n\\frac{k}{k}-1),\\text{act}}~.   \\end{aligned}\\ ] ] now : @xmath132\\\\    & =   \\e\\left[e^{\\theta_{\\text{mkv}}\\min_{j\\le k}\\{x_{n , j}\\}}\\right]\\left(t_{\\theta_{\\text{mkv}}}^{\\frac{k}{k}}h\\right)_{\\text{act}}\\\\    & = \\e\\left[e^{\\theta_{\\text{mkv}}\\min_{j\\le k}\\{x_{n+1,j}\\}}\\right]\\;\\xi^{\\frac{k}{k}}(\\theta_{\\text{mkv}})h_{\\text{act}}\\\\    & = h_{\\text{act}}~ ,   \\end{aligned}\\ ] ] and similarly one obtains : @xmath133 = h_{\\text{iact}}~,\\ ] ] so that : @xmath134 = h_{z(n)}~.\\ ] ] now multiply both sides by @xmath135 .",
    "the proof completes along the same kind of lines as in the proof of theorem  [ tm : iair ] .      we now address the more realistic scenario when the replicas @xmath22 are no longer independent",
    "; we consider the following correlation model ( from @xcite ) : @xmath136 where the random variables @xmath137 and @xmath138 are i.i.d . here , the parameter @xmath139 describes the degree of correlation amongst the replicas : @xmath140 corresponds to the i.i.d .",
    "case from section  [ subsec : iair ] , whereas for @xmath141 the @xmath1 servers are entirely synchronized so that no replication gain is achieved .    for simplicity the interarrival times @xmath6 are first assumed to be i.i.d . as in section  [ subsec : iair ] .",
    "[ tm : iacr ] let @xmath142 be defined by @xmath143 & \\e\\left[e^{\\theta\\left(1-\\delta\\right)\\min_{j\\le k}\\{y_{i , j}\\}}\\right]\\\\    & \\e\\left[e^{-\\theta t_i}\\right]^{\\frac{k}{k}}\\le 1\\bigg\\}~.   \\end{aligned}\\ ] ] then the following bound on the response time holds for all @xmath88 : @xmath144\\e\\left[e^{\\left(1-\\delta\\right)\\theta_{\\text{cor}}\\min_{j\\le k}\\{y_{i , j}\\}}\\right]e^{-\\theta_{\\text{cor}}\\sigma}~.\\ ] ]    entirely analogous to the proof of theorem  [ tm : iair ] .    to illustrate the impact of the correlation parameter @xmath139 we consider the special case when",
    "@xmath137 and @xmath138 are exponentially distributed with parameter @xmath145 .",
    "clearly , @xmath146 so that @xmath147 is the solution of @xmath148    -percentile as a function of the degree of correlation @xmath139 ( @xmath149 , @xmath150 , @xmath61 , @xmath151),scaledwidth=48.0% ]    further , figure  [ fig : deltaplotdelay ] illustrates the @xmath152-percentile of the delay as a function of the degree of correlation @xmath139 for several numbers of replicas @xmath24 .",
    "strictly from the point of view of the stability region , as it was also considered in section  [ sec : stability ] , we observe that replication ( both @xmath59 and @xmath60 ) is detrimental as the corresponding systems quickly become unstable . in contrast",
    ", from the point of view of delays , replication can be beneficial within a subset of the corresponding stability region notwithstanding its strict inclusion in the stability region of the non - replicated system .",
    "this fundamental observation can be intuitively explained in that for larger values of the degree of correlation @xmath139 , the servers become more synchronized and consequently no significant _ replication gain _ can be achieved ; a further follow - up discussion concerning a convergence result depending on @xmath139 will be given in section  [ sec : forkjoin ] .",
    "as a side remark , the symmetry in the delay for @xmath27 is due to the underlying erlang distribution , which minimizes its variance at @xmath153 .",
    "we briefly state the results for the combination of the scenario from sections  [ subsec : mair ] and [ subsec : iacr ] :    [ tm : macr ] with the same notation as in sections  [ subsec : mair ] and [ subsec : iacr ] , let @xmath154 be defined by @xmath155     \\e\\left[e^{\\theta\\left(1-\\delta\\right)\\min_{j\\le k}\\{y_{i , j}\\}}\\right]\\\\     & \\xi^{\\frac{k}{l}}(\\theta)\\le 1\\bigg\\}~.   \\end{aligned}\\ ] ] then the following bound on the response time holds for all @xmath88 : @xmath156\\e\\left[e^{\\left(1-\\delta\\right)\\theta_{\\text{mkv , cor}}\\min_{j\\le k}\\{y_{i , j}\\}}\\right]e^{-\\theta_{\\text{mkv , cor}}\\sigma}~.\\ ] ]    entirely analoguous to the proofs of theorems  [ tm : iair ] and [ tm : mair ] .    to numerically compare our stochastic bounds from theorems  [ tm : iair ] ,  [ tm : iacr ] ,  [ tm : mair ] , and  [ tm : macr ] to simulation results we refer to figures  [ fig : markov](a)-(d ) , respectively .",
    "in all four scenarios , addressing combinations of independent / correlated arrivals and replications , jobs are replicated to @xmath151 out of a total number of @xmath61 servers .",
    "the parameters of the respective models are chosen such that the ( server ) utilization remains constant , i.e. , @xmath157 .",
    "in particular , in figure  [ fig : boundiid ] , both the interarrival- and service times are exponentially distributed with parameters @xmath158 and @xmath150 . in figure",
    "[ fig : boundcor ] , the interarrival times are again exponential with @xmath159 , the correlation factor is @xmath160 , whereas the components @xmath137 and @xmath138 of the service times @xmath22 from eq .",
    "( [ eq : cormod ] ) are exponential with parameter @xmath161 such that @xmath162=1 $ ] . in figure",
    "[ fig : boundmarkov ] , the parameters for the markov chain are @xmath163 , @xmath164 , @xmath165 , whereas the services times are exponential with parameter @xmath150 . according to eq .",
    "( [ eq : averaget ] ) the average of the interarrival times is @xmath166=1/3 $ ] , such that @xmath157 .",
    "finally , in figure  [ fig : boundcormar ] , the parameters for the service times from figure  [ fig : boundcor ] are combined with the parameters for the interarrival times from figure  [ fig : boundmarkov ] .",
    "we remark that in all four scenarios the stochastic bounds from theorems  [ tm : iair ] ,  [ tm : iacr ] ,  [ tm : mair ] , and  [ tm : macr ] are remarkably accurate .",
    "in this section we present two practical applications of our theoretical framework . the first concerns integrating replication with a fork - join queueing model ; a major outcome is the construction of an intuitive class of assignment policies which can fundamentally improve response times .",
    "the second investigates the analytical tradeoff between resource usage and response times , an issue which was subject to several measurement studies involving google and bing traces .      in this section",
    "we consider replication in the context of a fork - join ( fj ) queueing system . in a fj system ,",
    "arriving jobs are split into @xmath1 different tasks which are mapped to @xmath1 servers to be processed independently . a job is considered finished once _ all _ of its corresponding tasks have finished .",
    "we consider the special case of a _ blocking _ system whereby jobs can not be forked before all of the tasks of the previous job have left the system ( this mode is in particular characteristic to hadoop , through a particular coordination service  @xcite ) .",
    "the obvious drawback of this blocking model is that it is no longer work - conserving : servers can become idle once some but not all tasks of one job are complete .",
    "moreover , the stability condition of the system becomes a function of the number of servers .",
    "consider for instance the case of poisson arrivals with rate @xmath167 and exponential and identically distributed service times @xmath11 , @xmath168 , with rate @xmath145 . as the distribution of the maximum of i.i.d .",
    "exponential random variables satisfies @xmath169  @xcite , the stability condition is roughly @xmath170    to overcome the issue of decaying stability regions ( in the number of servers @xmath1 ) we propose the following task assignment policy which suitably triggers replicas on top of the standard fj model .",
    "_ policy fjr ( fork - join with replication ) _ : once a server finishes its task , it immediately replicates a remaining task from another running server . when either the original task or one of its replica has finished , the others are immediately purged .",
    "fjr can be regarded as a concrete implementation of backup - tasks in mapreduce ( which is not explicitly presented in the original mapreduce description  @xcite ) .",
    "our policy is quite flexible in that the executing task to be replicated can be chosen randomly ( yet independently of the current state ) ; moreover , as multiple servers can become idle at the same time ( due to the underlying purging model ) , each can replicate any executing tasks . intuitively , this flexibility is due to the underlying assumption of exponentially distributed and independent service times .",
    "the main result of the fjr policy is the following :    [ tm : fjrstab ] the _ overall _ service time @xmath171 of jobs processed by fjr follows an @xmath172-distribution .",
    "consequently , the corresponding stability condition is @xmath173    let @xmath174 denote the times where the tasks ( original or replica ) finish ( see figure  [ fig : forkjoin ] ) .",
    "obiviously , it holds @xmath175 .",
    "we first show ( with the convention @xmath176 ) that the family @xmath177 is independent and identically exponentially distributed with parameter @xmath178 .    for @xmath179",
    ", this follows directly from the well known fact that the minimum over @xmath1 independent , exponential random variables with rate @xmath145 is exponentially distributed with rate @xmath180 .",
    "now , suppose @xmath181 tasks finish , or are purged , at time @xmath137 .",
    "denote by @xmath182 the corresponding service times of the respective replicas starting at @xmath137 .",
    "for the remaining @xmath183 servers , denote by @xmath184 the service times of the current tasks and by @xmath185 the length of time they started before @xmath137 .",
    "now we can write @xmath186 note that the family @xmath187 is independent from one another and from @xmath188 .",
    "( 0,3 ) node[left , xshift=-0.2cm]@xmath189 ; ( 0,2 ) node[left , xshift=-0.2cm]@xmath190 ; ( 0,1 ) node[left , xshift=-0.2cm]@xmath191 ; ( 0,0 ) node[left , xshift=-0.2cm]@xmath192 ;    ( 0,3 ) ",
    "( 1.3,3 ) ; ( 1.3,3.05 ) ",
    "( 2.7,3.05 ) ; ( 2.7,3.05 ) ",
    "( 3.2,3.05 ) ; ( 2.7,3.1 ) ",
    "( 3.7,3.1 ) ; ( 0,3.11 ) ",
    "( 0,2.89 ) ;    ( 0,2 ) ",
    "( 2.7,2 ) ; ( 2.7,2 )  ( 4.3,2 ) ; ( 2.7,2.05 ) ",
    "( 3.7,2.05 ) ; ( 3.7,2.05 ) ",
    "( 4.7,2.05 ) ; ( 0,2.11 ) ",
    "( 0,1.89 ) ;    ( 0,1 ) ",
    "( 2,1 ) ; ( 2,1.05 ) ",
    "( 2.7,1.05 ) ; ( 2.7,1.1 ) ",
    "( 3.7,1.1 ) ; ( 2.7,1.1 ) ",
    "( 4.1,1.1 ) ; ( 0,1.11 ) ",
    "( 0,0.89 ) ;    ( 0,0 ) ",
    "( 3.7,0 ) ; ( 3.7,0 ) ",
    "( 5,0 ) ; ( 0,0.11 ) ",
    "( 0,-0.11 ) ;    ( 0,3.5 )  ( 0,-0.5 ) ; ( 0,-0.5 ) node[below]@xmath193 ; ( 1.3,3.5 )  ( 1.3,-0.5 ) ; ( 1.3,-0.5 ) node[below]@xmath194 ; ( 2,3.5 )  ( 2,-0.5 ) ; ( 2,-0.5 ) node[below]@xmath195 ; ( 2.7,3.5 )  ( 2.7,-0.5 ) ; ( 2.7,-0.5 ) node[below]@xmath196 ; ( 3.7,3.5 )  ( 3.7,-0.5 ) ; ( 3.7,-0.5 ) node[below]@xmath197 ;    now , with @xmath198 @xmath199 , and @xmath200 the common density of @xmath201 : @xmath202    so that @xmath203 is exponentially distributed for any @xmath204 .",
    "it follows that @xmath205 has an erlang distribution with parameters @xmath1 and @xmath180 .",
    "therefore @xmath206=\\frac{1}{\\mu}$ ] , which completes the proof .",
    "-percentile of delays in fj systems by replication , scaledwidth=48.0% ]    it is evident that the stability region of fjr improves the stability region of the standard fj queueing model ( given in eq .",
    "( [ eq : fjstab ] ) ) by a logarithmic factor . to further visualize the numerical difference between fjr and fj in the actual delays , we first observe that the response time distribution can be expressed as in theorem  [ tm : iair ] by letting @xmath207 and replacing the ` @xmath208 ' by a ` @xmath209 ' ( see also  @xcite for explicit results ) .",
    "figure  [ fig : fjcompare ] shows the @xmath210 percentile of the delays as a function of @xmath1 ( @xmath150 and poisson arrivals with rate such @xmath157 when @xmath211 ; the utilization consequently decays for larger @xmath1 ) .",
    "the numerical benefit of fjr is that it roughly halves the fj delays .",
    "while the fundamental improvements achieved by the fjr policy , relative to the standard fj model , are remarkable , we point out that they are mainly due to the exponential and independence assumptions on the triggered replicas .",
    "unfortunately , a clean analysis in the case of correlated replicas ( even of the form @xmath212 , with @xmath171 and @xmath11 s being exponentially distributed ) appears prohibitive .",
    "for this reason , we resort to simulations to illustrate that the benefits of fjr ( proven in the ideal i.i.d . and exponential case ) carry over to more practical scenarios with correlated replicas .",
    "concretely , figure  [ fig : fjrconv ] shows the bounds on the delay distributions for fj and three fjr scenarios , depending on the degree of correlation @xmath139 ( the service times of an original and its replicated tasks are @xmath212 , with @xmath171 and @xmath11 s being exponentially distributed with rate @xmath150 ; poisson arrivals such that the utilization for fj is @xmath213 ( the corresponding utilizations for fjr are not analytically determined ) ) .",
    "the figure essentially illustrates the convergence of fjr to fj ; we remark in particular that fj is invariant to @xmath139 , whereas @xmath214 behaves identically as @xmath215 when @xmath141 ( i.e. , when the replicas are identical to the originals ) .      for the second application we investigate the analytical tradeoff between resource usage and response times under replication .",
    "this application is motivated by empirical observations from google  @xcite and bing  @xcite traces that a slight increase in the resource budget may yield substantial reductions of the upper quantiles of response times .",
    "for example ,  @xcite reports that the @xmath210 percentile of the delay improves by as much as @xmath216 under a @xmath217 increase of the resource budget . to compensate for",
    "the inherent increase of resource usage under replication , the schemes from @xcite defer the execution time of the replicas until the original request has been outstanding for a given _ replication offset _ @xmath218 .",
    "( @xmath61).,scaledwidth=48.0% ]    ( 0,0 )  ( 2,0 ) ; ( 0,-0.11 )  ( 0,0.11 ) ; ( 2,-0.11 )  ( 2,0.11 ) ; ( 2,0 )  ( 4,0 ) ; ( 4,-0.11 )  ( 4,0.11 ) ; ( 1,0 ) node[above]@xmath218 ; ( 3,0 ) node[above]@xmath219 ; ( 0,1 )  ( 3,1 ) ; ( 0,0.89 )  ( 0,1.11 ) ; ( 3,0.89 ) ",
    "( 3,1.11 ) ; ( 1.5,1 ) node[above]@xmath171 ; ( 0,0 ) node[left , xshift=-0.2cm]@xmath190 ; ( 0,1 ) node[left , xshift=-0.2cm]@xmath189 ; ( 4,0 ) node[right]@xmath220 ; ( 3,1 ) node[right]@xmath220 ;    consider a scenario with two servers .",
    "jobs arrive with rate @xmath167 at the first server with interarrival times @xmath6 and service times @xmath221 ; if the processing time of a job is larger than some fixed @xmath218 , then the job is replicated at the second server with service times @xmath222 ( see figure  [ fig : replicadelta ] for a time - line illustration of a generic job with execution time @xmath171 and its replica , should @xmath223 ) .",
    "whenever either of the original job or its replica finishes execution , the residual service time of the other is cancelled ( i.e. , the purging replication model ) .    the utilization at the first server is thus given by @xmath224~,\\label{eq : rhos1}\\ ] ] whereas the utilization at the second is @xmath225~.\\label{eq : rhos2}\\ ] ] we note that unlike previous models , where the utilization is server independent , the current model is subject to different server utilizations due to the lack of symmetry in dispatching the load .",
    "the measure for _ resource usage _ is the total utilization at the two servers and is denoted by @xmath226 to avoid confusion @xmath227    aiming for explicit results , we assume for convenience the exponential service model , i.e. , @xmath228 and @xmath229 , with @xmath150 .",
    "moreover , we consider both the independent and correlated replication models .",
    "given the statistical independence of @xmath11 s and @xmath137 s , straightforward computations of integrals yield @xmath230 which means that the resource usage @xmath231 is invariant to the choice of @xmath218 .",
    "in turn , @xmath218 can have a major impact on the response times : for instance , if @xmath232 then the response times can be either unbounded for sufficiently large values of @xmath218 , and in particular when @xmath233 ( i.e. , no replicas are executed ) , or finite for some values of @xmath218 .    in fact , an immediate application of theorem  [ tm : iair ] yields that the response time is non - decreasing in @xmath218 .",
    "thus , the optimal choice of @xmath218 , which minimizes both the resource usage and the response times , is @xmath234 .",
    "the explanation for the seemingly sharp contrast between this theoretical result and the empirical results from  @xcite is the underlying independence assumption of the replication model .",
    "a non - trivial tradeoff between resource usage and response times manifests itself under the more realistic correlated replication model from section [ subsec : iacr ] .",
    "the original and replica response times are modelled by @xmath235 where @xmath236 and @xmath237 are exponential with rate @xmath150 .",
    "the parameter @xmath139 sets the degree of correlation ; in particular , small values of @xmath139 indicate a small degree of correlation .",
    "rather tedious computations of integrals , due to several conditions stemming from the absolute value operator in @xmath238 , yield the individual utilizations @xmath239 and further the resource usage @xmath240 under the assumptions that @xmath241 and @xmath242 .    to illustrate a quantitative tradeoff between resource usage ( eq .",
    "( [ eq : rhocore ] ) ) and response times ( theorem  [ tm : iacr ] ) , we refer to figure  [ fig : deltadelta ] which shows the increase of the top percentiles of the response times ( @xmath243 , @xmath244 , and @xmath210 ) as a function of the replication offset @xmath218 .",
    "both small ( @xmath245 ) and high ( @xmath246 ) correlation degrees are considered ; in figure  [ fig : rhoplot ] , the resource usage @xmath226 corresponding to eq .",
    "( [ eq : rhocore ] ) is shown .",
    "we observe that under the small correlation degree , a @xmath247 decrease of resource usage from @xmath248 ( when @xmath234 ) to @xmath249 ( when @xmath233 ) yields a dramatic increase of the @xmath210 percentile of the response times of roughly @xmath250 . in turn , under the high correlation degree , the same @xmath247 decrease of resource usage from @xmath251 ( when @xmath234 ) to @xmath252 ( when @xmath253 ) yields an increase of the same response time percentile of only roughly @xmath254 .",
    "these numerical results , which are clearly dependent on the model s assumptions and numerical values , indicate nevertheless that a drastic reduction of the top percentiles of response times at the expense of a small increase of resource usage  @xcite is due to a low correlation of the service times .",
    "conversely , if the service times of the replicas are sufficiently correlated , increasing the resource usage only yields a marginal gain in response time reductions .     from eq .",
    "( [ eq : rhocore ] ) ( @xmath255 , @xmath150),scaledwidth=48.0% ]",
    "in this paper we have developed an analytical framework to compute stochastic bounds on the response time distribution in quite general replicated queueing systems . unlike existing models , ours cover practical scenarios including correlated interarrivals , general service time distributions , and not necessarily independent service times for original tasks and their replicas . by employing a powerful methodology based on martingale transformations",
    ", we were able to derive numerically accurate bounds by exploiting the specific correlation structures of the underlying processes .",
    "remarkably , we have shown both analytically and through simulations that the choices of the underlying models and assumptions play a fundamental role concerning the effects of replication in parallel systems , thus motivating our general framework . in terms of applications ,",
    "we have developed a novel task replication policy in fork - join systems which is similar to the implementation of back - up tasks in mapreduce .",
    "for the analytically convenient poisson arrivals and i.i.d .",
    "exponential service times model , our policy improves the performance of the standard fork - join model by a fundamental logarithmic factor ."
  ],
  "abstract_text": [
    "<S> task replication has recently been advocated as a practical solution to reduce latencies in parallel systems . </S>",
    "<S> in addition to several convincing empirical studies , some others provide analytical results , yet under some strong assumptions such as poisson arrivals , exponential service times , or independent service times of the replicas themselves , which may lend themselves to some contrasting and perhaps contriving behavior . </S>",
    "<S> for instance , under the second assumption , an overloaded system can be stabilized by a replication factor , but can be sent back in overload through further replication . in turn , under the third assumption , strictly larger stability regions of replication systems do not necessarily imply smaller delays .    </S>",
    "<S> motivated by the need to dispense with such common and restricting assumptions , which may additionally cause unexpected behavior , we develop a unified and general theoretical framework to compute tight bounds on the distribution of response times in general replication systems </S>",
    "<S> . these results immediately lend themselves to the optimal number of replicas minimizing response time quantiles , depending on the parameters of the system ( e.g. , the degree of correlation amongst replicas ) . as a concrete application of our framework , </S>",
    "<S> we design a novel replication policy which can improve the stability region of classical fork - join queueing systems by @xmath0 , in the number of servers @xmath1 . </S>"
  ]
}