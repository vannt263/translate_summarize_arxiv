{
  "article_text": [
    "gradiar et al .  presented a novel self - assembly strategy for polypeptide nanostructure design in @xmath0  @xcite .",
    "their research was already improved by koar et al .  in 2015 , who developed another alternative strategy to design topofolds",
    " nanostructures built from polypeptide arrays of interacting modules that define their topology  @xcite .",
    "such approaches are paving the way to a significant breakthrough in the field of protein origami , an area advancing a step ahead of dna origami , where many researchers have spent the better part of the past decade by folding the molecules into dozens of intricate shapes .",
    "a polyhedron @xmath1 that is composed from a single polymer chain can be naturally represented by a graph @xmath2 of the polyhedron . as every edge of @xmath2 corresponds to a coiled - coil dimer in the self - assembly process ,",
    "exactly two biomolecular segments are associated with every edge of @xmath2 .",
    "hence , every edge of @xmath2 is in its biomolecular structure replaced by two copies , resulting in a graph @xmath3 obtained from @xmath2 by replacing every edge with a digon .",
    "the graph @xmath3 is therefore eulerian , and its eulerian walks ( i.e. , walks that traverse every edge of @xmath2 precisely twice ) , called _",
    "double traces _ of @xmath2 , play a key role in modeling the construction process .",
    "note that the argument shows that every graph admits a double trace .",
    "double traces with additional properties related to stability of the constructed polyhedra were introduced as a combinatorial model underlying these approaches to polypeptide polyhedra design in  @xcite and  @xcite .",
    "stability of the resulting polyhedron depends on two additional properties : one relates to whether in the double trace the neighborhoods of vertices can be split , and the other defines whether the edges of the double trace are traversed twice in the same or in different directions .    to define the first property ,",
    "let an alternate sequence @xmath4 , where @xmath5 is an edge between vertices @xmath6 and @xmath7 , be a double trace  a closed walk which traverses every edge of graph exactly twice .",
    "note that we always consider vertex sequence of a double trace with indices taken modulo @xmath8 .",
    "( since the graph @xmath2 is simple , so are all our other graphs , except @xmath3 .",
    "hence , a double trace is completely described by listing the vertices of the corresponding walk and we sometimes write double trace as a sequence consisting only from vertices . ) for a set of vertices @xmath9 , a double trace @xmath10 has a _",
    "@xmath11-repetition _ at vertex @xmath12 ( nontrivial @xmath11-repetition in  @xcite ) , if @xmath11 is nonempty , @xmath13 , and whenever @xmath10 comes to @xmath12 from a vertex in @xmath11 it also continues to a vertex in @xmath11 .",
    "more formally @xmath10 has a @xmath11 repetition at @xmath12 if the following implication holds : @xmath14 then , @xmath10 is a _ strong trace _ if @xmath10 is for every veretex @xmath12 without @xmath11-repetitions at @xmath12 .",
    "it is a nontrivial result of  @xcite that every graph admits a strong trace .",
    "a weaker concept of _ @xmath15-stable trace _ requires that whenever @xmath10 has an @xmath11-repetition at some vertex @xmath12 , then @xmath16 .",
    "fijav et al",
    ".  showed that @xmath17 admits a @xmath15-stable trace if and only if @xmath18  @xcite .",
    "for the second property , note that there are precisely two directions to traverse an edge @xmath19 .",
    "if the same direction is used both times @xmath10 traverses @xmath20 , then @xmath20 is a _ parallel _ edge w.r.t .",
    "@xmath10 , otherwise it is an _",
    "a double trace @xmath10 is _ parallel _ , if all edges of @xmath17 are parallel w.r.t .",
    "@xmath10 and is _ antiparallel _ , if all the edges are antiparallel .",
    "interestingly , antiparallel traces appeared ( under a different name ) two centuries ago in a study of properties of labyrinths by tarry  @xcite , who observed ( in our language ) that every connected graph admits an antiparallel double trace .",
    "fijav et al .",
    "extended this by characterizing the graphs that admit an antiparallel strong trace  @xcite , and rus upgraded the result to characterize graphs that admit an antiparallel @xmath15-stable trace  @xcite .",
    "the former characterization can be algorithmically verified using algorithms of  @xcite , but regarding the latter , it is only known that the existence of antiparallel @xmath21-stable traces can be verified using thomassen s modification of the aforementioned algorithm , as published in  @xcite and later corrected by benevant l ' opez and soler fern ' andez in  @xcite .",
    "similar modification of algorithm for spanning tree parity problem presented in  @xcite would work for @xmath22 as well , rendering the problem  does there exist an antiparallel @xmath15-stable trace in @xmath17 ? \" polynomially tractable .",
    "some additional research was also made in  @xcite and  @xcite .",
    "it is easy to obtain new traces from a given trace : one can change direction of tracing or start at a different vertex . also , if graph possesses certain symmetries , these may reflect in the trace .",
    "such changes do not alter any properties of the trace , hence we call the resulting traces equivalent , and we are interested in non - equivalent traces , as introduced in  @xcite :    [ def : equal ] two double traces @xmath10 and @xmath23 are called _ equivalent _ if @xmath23 can be obtained from @xmath10 ( i ) by reversion of @xmath24 ( ii ) by shifting @xmath24 ( iii ) by applying a permutation on @xmath10 induced by an automorphism of @xmath17 , or ( iv ) using any combination of the previous three operations .",
    "if that is not the case , @xmath10 and @xmath23 are _ non - equivalent_.    two double traces @xmath10 and @xmath23 are called _ different _ if their vertex sequences are not the same .",
    "two different double traces may be equivalent .",
    "it is easy to see that equivalence of double traces is an equivalence relation on the _ set @xmath25 of all different double traces _ , and hence on any subset ( such as strong traces , @xmath15-stable traces etc . ) .",
    "the main contribution of our paper is designing for each of the subsets of interest an algorithm that , for a given graph as an input , outputs precisely one representative of each equivalence class .",
    "this representative will be the unique minimal element for the following linear ordering , called _ lexicographical ordering _ of double traces .",
    "we assume that the vertices of @xmath17 are linearly ordered as @xmath26 , and that @xmath27 , @xmath28 are adjacent .",
    "this linear ordering induces an ordering on the set of double traces as follows :    [ def : lex ] given two double traces @xmath29 and @xmath30 , @xmath10 is _ lexicographically smaller or equal _ to @xmath23 , denoted @xmath31 , if and only if @xmath32 or the first @xmath7 , which is different from @xmath33 , is smaller than @xmath33 .    as",
    "lexicographical order is a linear order , it is clear that any finite set @xmath34 of double traces has a unique lexicographically smallest member .",
    "we call that member the _ canonical representative _ of @xmath34 .    for a more detailed treatment of double - trace related definitions",
    "we refer the reader to  @xcite . for other terms and concepts from graph theory",
    "not defined here , we refer to  @xcite .",
    "let the _ automorphism group _ @xmath35 of @xmath17 be denoted by @xmath36 .",
    "an automorphism @xmath37 acts on @xmath25 by mapping a double trace @xmath29 to @xmath38 .",
    "let @xmath39 be a reversal that maps @xmath29 to @xmath40 , and , for @xmath41 , let @xmath42 be an @xmath43-shift that maps @xmath29 to @xmath44 . note that @xmath45",
    ". then the group @xmath36 , the group @xmath46 , and the group @xmath47 are three groups acting on @xmath25 ( or any of its subsets ) .",
    "note that groups @xmath48 and @xmath34 do not commute and @xmath49 is a dihedral group of symmetries of a regular @xmath50-gon , where @xmath51 .",
    "therefore the orbits of the direct product @xmath52 are precisely the equivalence classes of double traces for the relation from definition  [ def : equal ] . hence",
    ", a canonical representative of each equivalence class is the lexicographically smallest element of each class .",
    "we say that a double trace is _ canonical _ , if it is the lexicographically smallest element of its orbit , meaning that every element of @xmath53 maps it to a lexicographically larger ( or equal ) element .",
    "note that to verify canonicity of a particular double trace , it is not enough to check whether the generators of @xmath53 map it to a larger element ( we leave finding an example to the reader ) .",
    "it is easy to see that every canonical double trace starts with @xmath54 ( by assumption , these two vertices are adjacent ) and that every double trace is equivalent to at least one canonical double trace .",
    "double traces ( not necessary canonical ) starting with @xmath54 are called _ simple_. more details on graph automorphisms can be found in  @xcite , but we do conclude this introduction with an example of the action of @xmath53 on @xmath25 in the case of the tetrahedron .    in figure  [",
    "fig : acting ] we graphically present the action of @xmath53 on @xmath25 in the case of the tetrahedron .",
    "the vertices of a graph on each subfigure represent all @xmath55 different strong traces of tetrahedron ( generated with simple backtracking without eliminating the non - canonical traces ) .",
    "two vertices @xmath56 and @xmath57 are then adjacent if they lie in the same orbit of @xmath53 .",
    "note that @xmath53 partitions @xmath25 into @xmath58 orbits of orders @xmath59 , @xmath59 , and @xmath60 .",
    "this fact coincides with the results of table  [ tab : platonic ] .",
    "subgroups @xmath36 , @xmath48 , and @xmath34 partition @xmath25 into @xmath61 orbits of order @xmath62 , @xmath63 orbits of order @xmath64 , and @xmath65 orbits of order @xmath66 , respectively .    [ cols=\"^,^ \" , ]     all the calculations were made using algorithm  [ alg : branch ] and computational resources at sagemathcloud  @xcite . it was observed in  @xcite , that a graph @xmath17 admits a parallel strong trace if and only if @xmath17 is eulerian , and that @xmath17 admits an antiparallel strong trace if and only if there exists a spanning tree @xmath67 of @xmath17 with the property that every component of the co - tree @xmath68 is even . therefore , we omit the information about antiparallel and parallel strong traces for graphs not admitting them . some of these calculations were already presented in  @xcite and  @xcite .",
    "another possible approach to strong trace construction exploits the observation that a strong trace can be nicely drawn on a surface in which the given graph is embedded .",
    "this surface can be cut along certain edges which results in one or more surfaces with boundary .",
    "each of the resulting surfaces with boundary carries a part of the information about the strong trace .",
    "the strong trace can be reconstructed by gluing those smaller pieces back together .",
    "this topological approach will be elaborated in  @xcite .",
    "the authors would like to thank to anders skovgaard knudsen who independently calculated the number of strong traces in platonic solids and shared the results for comparison .",
    "h.  gradisar , s.  boi , t.  doles , d.  vengust , i.  hafner  bratkovi , a.  mertelj , b.  webb , a.  ali , s.  klavar , and r.  jerala , _ design of a single - chain polypeptide tetrahedron assembled from coiled - coil segments _ , nat . chem . biol .",
    "* 9 * ( 2013 ) , no .  6 , 362366 .",
    "v.  koar , s.  boi  abram , t.  doles , n.  bai , h.  gradiar , t.  pisanski , and r.  jerala , _ topofold , the designed modular biomolecular folds : polypeptide - based molecular origami nanostructures following the footsteps of dna _ , wires nanomed .",
    "* 7 * ( 2015 ) , no .  2 , 218237 .",
    "g.  sabidussi , _ tracing graphs without backtracking _ , methods of operations research xxv , part 1 ( r.  henn , p.  kall , b.  korte , o.  krafft , w.  oettli , k.  ritter , j.  rosenmller , n.  schmitz , h.  schubert , and w.  vogel , eds . ) , first symposium on operations research , university of heidelberg , verlag anton hain , june 1977 , pp ."
  ],
  "abstract_text": [
    "<S> recently designed biomolecular approaches to build single chain polypeptide polyhedra as molecular origami nanostructures have risen high interest in various double traces of the underlying graphs of these polyhedra . </S>",
    "<S> double traces are walks that traverse every edge of the graph twice , usually with some additional conditions on traversal direction and vertex neighborhood coverage . </S>",
    "<S> given that double trace properties are intimately related to the efficiency of polypeptide polyhedron construction , enumerating all different possible double traces and analyzing their properties is an important step in the construction . in the paper , we study the automorphism group of double traces and present an algebraic approach to this problem , yielding a branch - and - bound algorithm .    </S>",
    "<S> * keywords : * nanostructure design ; self - assembling ; topofold ; polypeptide origami ; double trace ; strong trace ; automorphism group of double trace ; branch - and - bound .    * </S>",
    "<S> math . </S>",
    "<S> subj . class . </S>",
    "<S> ( 2010 ) : * 05c30 , 05c45 , 05c85 , 68r10 , 92e10 . </S>"
  ]
}