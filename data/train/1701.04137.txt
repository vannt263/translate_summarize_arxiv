{
  "article_text": [
    "physical unclonable function ( puf ) , as a hardware security primitive , exploits manufacturing variations to extract secrets on demand  @xcite . pufs are increasingly adopted to provide security for pervasive and ubiquitous distributed resource - constraint smart internet of thing ( iot ) devices as an alternative to storing a digital secret in the non - volatile memory ( nvm ) .",
    "in fact , digital keys in the nvm is vulnerable to various attacks , especially , when there is no dedicated room in cost sensitive iot devices to implement expensive protection mechanisms . by using a puf",
    ", there is no digital secret  must be securely stored  involved , the hardware itself is the secret key that is originated from true randomness , therefore , the secret can not be duplicated and holds higher resistance to attacks , especially invasive attacks  @xcite .    since the first silicon puf",
    ", arbiter puf ( apuf ) , being coined in 2002  @xcite , the puf community has never stopped pursuing on the so - called strong pufs that not only have a large challenge response pair ( crp ) space but also resilient to modeling attacks .",
    "applications of the strong puf range from elementary identifications and authentications to key generations and more advanced cryptographic protocols such as key exchange and oblivious transfer  @xcite .",
    "though there does exist strong pufs such as the optical puf  @xcite and the shic puf  @xcite , a practical and lightweight strong puf realization seamlessly compatible with current cmos technology turns out to be challenging  @xcite in front of modeling attacks such as logistic regression ( lr ) and recently revealed more powerful covariance matrix adaptation evolution strategy ( cma - es ) attacks , which have broken previously deemed practical strong pufs including xor - apuf , feedforward apuf , lightweight secure puf  @xcite and even slender puf  @xcite .",
    "et al . _",
    "@xcite recently presented a practical strong puf through upper - bounding the available number of crps by an adversary . in this work ,",
    "gaining new crps materials has to be implicitly authorized by the trusted entity , the concept of limiting access to crps is alike to controlled pufs  @xcite , detailed in section  [ sec : controllpuf ] .",
    "et al . _",
    "@xcite further introduce a puf device side nonce to prevent fault attacks or noise side - channel information based attacks  @xcite .",
    "we continue the efforts into pursuing a practical and lightweight strong puf coined as the puf - fsm . for authentication",
    ", the puf - fsm gets around one major limitation of  @xcite in terms of available secure authentication times ( rounds ) . beyond authentication",
    ", it enables key generation , key exchange and more advanced cryptographic applications with _ no reliance on on - chip ecc and the associated helper data_. eventually , the puf - fsm is a _ practical _ controlled puf realization .",
    "contributions of our work are fourfold :    * we present a _ practical and lightweight strong _ puf realization termed as puf - fsm , also a controlled strong puf , enabling a wide spread of applications .",
    "* we , for the first time , eschew the ecc and helper data to build a controlled puf .",
    "we only employ large number of available error - free responses in absence of the apufs .",
    "* we post - process the responses to prevent traditional machine learning attacks such as lr that usually requires direct relationship between challenge and response .",
    "* we prevent noise side - channel information based attacks ( fault attacks ) such as the cma - es attacks by using device side nonce inherited from  @xcite to disable observing repeated evaluated responses or outputs when the same challenge is maliciously applied .",
    "section  [ sec : relwork ] introduces related work , especially , judiciously selection of error - free responses from a statistical apuf model .",
    "section  [ sec : puf - fsm ] details the puf - fsm design and analyzes its security ; wide spread of applications of the puf - fsm are presented in section  [ sec : discussion ] ; section  [ sec : conclusion ] concludes this paper .",
    "the apuf consists of @xmath0 stages of two 2-input multiplexers as shown in fig .",
    "[ apuf ] , or any other units forming two signal paths . to generate a response bit ,",
    "a signal is applied to the first stage input , while the challenge @xmath1 determines the signal path to the next stage .",
    "the input signal will race through each multiplexer path ( top and bottom paths ) in parallel with each other . at the end of the apuf architecture ,",
    "an arbiter , e.g. , a latch , determines whether the top or bottom signal arrives first and hence results in a logic ` 0 ' or ` 1 ' accordingly .",
    "it has been shown that an apuf can be modelled via a linear additive model because a response bit is generated by comparing the summation of each time delay segment in each stage ( two 2-input multiplexers ) depending on the challenge @xmath2 , where @xmath2 is made up of ( @xmath3 )  @xcite .",
    "the notations in this section following  @xcite .",
    "the final delay difference @xmath4 between these two paths is expressed as : @xmath5    where @xmath6 and @xmath7 are the delay determined vector and the parity vector , respectively , of dimension @xmath8 as a function of @xmath2 .",
    "we denote @xmath9 as the delay in stage @xmath10 for the crossed ( @xmath11 ) and uncrossed ( @xmath12 ) signal path through the multiplexers , respectively .",
    "hence @xmath13 is the delay of stage @xmath10 when @xmath11 , while @xmath14 is the delay of stage @xmath10 when @xmath15 .",
    "then @xmath16 where @xmath17 , @xmath18 for all @xmath19 and @xmath20 , also @xmath21 where @xmath22 for @xmath23 .",
    "[ t ]       suppose the @xmath6 is known , given a challenge @xmath1 , the @xmath7(@xmath1 ) is determined",
    ". then the @xmath4 is calculated .",
    "noting that @xmath4 eventually comprises two important useful information : i ) sgn(@xmath4 ) determines the binary response ; ii ) the reliability of this response .",
    "if the @xmath4 is far alway from zero , then this gives such a challenge with full confidence to reproduce the response without any erroneous .    in practice , physically measuring the @xmath4 is hard , if not possible .",
    "et al . _",
    "@xcite recently exploit machine learning techniques , specifically support vector machine ( svm ) , to learn the @xmath6 using a small collection of crps .",
    "once an accurate @xmath6 is learned through the svm , the @xmath4 is able to be accurately predicted given an unseen @xmath1 . then the corresponding response and its associated reliability",
    "is judiciously determined .",
    "if a challenge results in a @xmath4 that is far way from zero , then its corresponding response is error - free .",
    "et al . _",
    "@xcite demonstrate that almost 80% randomly given challenges guarantee error - free responses across a wide range of operating conditions ( temperature , voltage ) as well as considering aging effects .",
    "however , exploiting those error - free responses , especially , in a secure manner was not considered .",
    "we take the first step towards to securely exploiting those error - free responses to construct a strong puf      the controlled puf  @xcite proposed by gassend _",
    "et al . _ is a strong puf construction .",
    "a controlled puf is a puf that is combined with a control logic limiting the ways in which the puf can be evaluated . in general , without permission from a trusted entity ,",
    "the controlled puf is locked , no response will be meaningfully evaluated . when a user is authorized a crp , more crps can be extracted .",
    "this is alike key management , where more session keys can be derived from a master key . in practice ,",
    "the controlled puf is built as a means that the puf and its control logic play complementary roles . as illustrated in fig .",
    "[ fig : cpuf ] , the puf prevents invasive attacks on the control logic , at the same time , the control logic protects the puf from protocol level attacks .",
    "for example , the apuf delay wires wrap the control logic . if invasive attacks attempt to probing the control logic , it is more likely that the puf secret will be altered and damaged .",
    "the control logic halts adaptively evaluations on pufs with no permission from the trusted entity .",
    "the responses in the controlled puf have to be post - processed , e.g. , hashed .",
    "previous works  @xcite usually held an assumption that the error correction code ( ecc ) logic and the associated helper data are default parts of a puf . in practice , the ecc logic and storing of helper data are always expensive , especially for most low - end iot devices .",
    "in addition , availability of the helper data is a non - trivial task in practice , especially when the key renewal is occurred . in this context",
    ", the user randomly picks up a seed challenge and queries the output  e.g .",
    ", hashed responses  from the controlled puf .",
    "fully characterization of all possible crp given a puf that has exponential number of crps , in particular the popular employed apuf , and sequentially computing all possible helper data is infeasible .",
    "the helper data given the user randomly chosen challenges can not be always guaranteed .",
    "most importantly , usage of helper data poses the controlled puf under potential threaten from modeling attacks exploiting noise side - channel information leakage  @xcite .",
    "the puf - fsm is the first practical controlled puf without using ecc along with the associated helper data and with an explicit countermeasure to reliability - based fault attacks .",
    "finite state machine ( fsm ) is a popular sequential logic . in a fsm ,",
    "the next state depends on both the input ( transaction edge ) and the current state .",
    "the fsm has been employed for ic active metering  @xcite . in this context",
    ", the fsm combines with a unique chip identifier , usually a weak puf , where puf responses act as transaction edges to unlock a function such as an intellectual property ( ip ) . the puf response given a challenge , here ,",
    "act as a secret key .",
    "previous works  @xcite extract a constant secret or a key from the noisy puf responses .",
    "please note that requirements on the on - chip ecc and helper data are still existed .",
    "our work employs the fsm as a control logic to realize the said controlled puf .",
    "we release large number of challenge secret pairs .",
    "neither ecc nor the helper data is necessary . beyond ic active metering ,",
    "our work enables authentication , key generation , key exchange and more advanced cryptographic protocols where a shared secret is required .",
    "can unlock the @xmath24 .",
    "if the enable signal @xmath24 is disabled , the hash output is meaningless by presenting random values . otherwise , the key is generated based on _",
    "part _ of the response @xmath25 , @xmath26 , _ and _ the nonce , where key = hash(@xmath26 , nonce).,scaledwidth=30.0% ]    the puf - fsm structure is generalized in fig .  [",
    "fig : puffsm ] .",
    "it consists of a puf , a fsm , a hash and a random number generator ( rng ) block .",
    "similar to priori work  @xcite , the direct puf responses can only be evaluated by the trusted entity in a secure environment to build apuf statistical model(s ) , and the direct access is destroyed afterwards , e.g. , through fusing the wire .    during deployment , a set of @xmath27 sequential challenges , @xmath28 , is issued by the trusted entity , e.g. , the server , the corresponding error - free responses @xmath25 with length @xmath27 is produced .",
    "the @xmath25 is sequentially fed into the fsm controlling the transitions of the fsm states .",
    "note that before the operation , the fsm resets to @xmath29 . only a series of correct @xmath30sub - response enabling the state traverse from the current state to the next state  is able to guarantee the fsm transitioning into the @xmath24 that is an activation to unlock the key output . in this context ,",
    "only the server who owns the statistical apuf model is capable of issuing a correct challenge set , @xmath28 to unlock the @xmath31 to generate a meaningful output as a key .",
    "the key is hash(@xmath26 , nonce ) , the @xmath26 is partial of @xmath25 and formation of @xmath26 will be described and clear soon . whenever the @xmath24 is disabled , the output presents random values .",
    "an exemplary fsm construction is depicted in fig .",
    "[ fig : fsm ] . at the beginning of the puf - fsm operation ,",
    "the fsm resets to its initial state @xmath29 .",
    "let s assume that the @xmath32 is 0110 , then @xmath33 .",
    "similarly if the @xmath32 is 0001 , then @xmath34 .",
    "if @xmath32 is from none of @xmath35 , or in other words the @xmath36 is fed , then @xmath37 .",
    "note that when the @xmath38 is fed , the fsm remains at its current state . in this case example , for even states @xmath39 , the @xmath40 having @xmath41 transition edges that can lead it to any of the following @xmath41 states , rest @xmath40 have only one correct transition edge that leads it to the following state .    ) and three depths ( @xmath42 ) .",
    "when the transition edge @xmath43 , eg . , 1100 , is fed , current state @xmath44 , eg . ,",
    "@xmath45 , transitions into @xmath46 , eg . , @xmath47 .",
    "the applied @xmath48 remains the fsm at its current state , marked by the returning arrow.,scaledwidth=48.0% ]    though other fsm structures can be envisioned , the fsm in our proposal has @xmath49always an odd number  internal state layers ( levels ) ; each odd internal layer has @xmath41 parallel states . a constant number , @xmath50 , of @xmath40 is a must to reach to the @xmath24 .",
    "both the @xmath40 and @xmath51 are 4-bit in this case example , therefore , the number of @xmath40 , and the _ maximum _ number of @xmath51 , @xmath52 , in together is @xmath53 , where we assume that the @xmath27 is always a multiplication of 4 for convenience . in practice , the @xmath24 can be activated in a way by applying @xmath50 @xmath40 and @xmath54 @xmath51 , noting that @xmath55 .",
    "the meaningful key will be given only after all @xmath27 bits in @xmath25 are fed into fsm  or @xmath27 clock cycles past _ and _ the @xmath24 is activated / reached .",
    "the key is a hash function of part of the @xmath25 that is the all sequentially fed @xmath50 @xmath40 and @xmath54 @xmath51 .",
    "an example illustration of the key formation is shown in fig .",
    "[ fig : hash]the",
    "state traverse path is illustrated in fig .",
    "[ fig : fsm ] in the dotted red line .",
    "once the @xmath24 is reached , the rest @xmath51 are neglected  will not be hashed to generate the key .",
    "it is worth to stress again that the rest response bits are still fed into the fsm as redundant bits to hide the length of @xmath26 .",
    "-bit @xmath25 , @xmath26 is hashed to generate the key .",
    "all rest bits after reaching the enable signal @xmath24 are not contributing to the key .",
    "note that the fsm example in fig .",
    "[ fig : fsm ] is used for state traverse illustration that is marked by the dotted red line.,scaledwidth=40.0% ]      the device nonce is exploited to prevent observing repeatedly evaluated responses given the same challenge  @xcite .",
    "the security rationale shall be clear in section  [ sec : securityanalysis ] .",
    "nonce is part of the key , where the key = hash(@xmath26 , nonce ) .",
    "it is reminded that the key will differ under each evaluation considering the freshed nonce even the same @xmath28 issued by the trusted entity is repeatedly applied .",
    "the nonce is visible , the security relies on the @xmath26 .",
    "\\(1 ) only under a correct set of sequential challenges , @xmath28 , the final state @xmath24 of the fsm can be reached or activated ; ( 2 ) the number of @xmath51 , @xmath56 , before reaching the @xmath24 and the number of @xmath57 , @xmath58 , after reaching the @xmath24 are flexible configured that is controlled and only known by the trusted entity ; ( 3 ) a meaningful key is presented only when the @xmath24 is activated and all @xmath27 error - free response bits are fed into the fsm . if the @xmath24 is disabled , a random value is presented ; ( 4 ) device nonce is employed to prevent repeatedly responses observations given the same maliciously applied challenge .",
    "we consider the same assumption for controlled pufs  @xcite that physical attacks on the control logic is more likely to alter or even destroy the puf itself .",
    "the adversary can eavesdrop the communication channel and arbitrarily apply challenges to the puf - fsm input to observe the puf - fsm output .",
    "furthermore , the nonce is visible .",
    "the adversary attempts to obtain useful information to learn the apuf model in the puf block .      as for an adversary ,",
    "the probability of discovering a meaningful key through guessing a correct @xmath28 without the assistance from the trusted entity is expressed : @xmath59 where the @xmath60 is the length of @xmath40 . in the case example of fig .",
    "[ fig : fsm ] , the @xmath60 is four . for each even layer ,",
    "the probability of guessing one correct transition edge is @xmath61 , while the probability of guessing a correct transition edge for given an old layer is @xmath62 .",
    "the brute - force attack becomes computationally infeasible as the fsm state layer @xmath49 or the @xmath60 increases .",
    "in addition , even an adversary luckily guesses a correct @xmath28 that unlocks the @xmath24 , ( s)he is actually incapable of recognizing it .",
    "output from the puf - fsm looks random to the adversary under each evaluation without prior knowledge of a correct @xmath28 attributing to the refreshed nonce .",
    "the plausible attacks on strong pufs are modeling attacks .",
    "numerous works  @xcite have shown the vulnerability of the strong pufs to modeling attacks .",
    "those deemed but later breakable strong pufs include xor - apuf , feedforward apuf , lightweight secure puf and even slender puf .    in puf - fsm ,",
    "arbitrarily crp collection is disabled by any party except the trusted entity during the secure enrollment phase .",
    "after the enrollment phase , the response is never directly exposed unless hashing and its usage is further controlled by the fsm .",
    "the control logic as shown in fig .",
    "[ fig : puffsm ] first protects the underlying apuf(s ) from modeling attacks such as lr and svm where knowledge of responses is necessary  @xcite .",
    "as to perform recent revealed modeling attacks exploiting the helper data information  @xcite , in other words , the unreliability information of a given crp , knowledge of which challenge is unreliable is a premise .",
    "unlike traditional modeling attacks , e.g , lr , reliability - based fault cma - es attacks  @xcite do not require the knowledge of the response value for a given challenge .",
    "such a powerful cma - es attack even threatens the security of a controlled puf that employs the helper data . in our puf - fsm",
    ", there is no helper data involved .",
    "thus , exploitation of information leakage from the helper data to perform reliability - based attacks is excluded .",
    "now without using the device nonce , we examine the means of finding unreliable challenges by observing the puf - fsm output rather than gaining information from the helper data . by applying arbitrarily challenges to the puf - fsm and without priori knowledge of a correct @xmath28",
    ", there is no information that can be observed and used by the adversary to discover the unreliable challenges .",
    "this lies on the fact that the output of the puf - fsm is random or meaningless , if the enable signal @xmath24 is locked / disabled .",
    "the complexity of unlocking the @xmath24 without the participation of the trusted entity is same to the brute - force attacks given in ( [ eq : complexity ] ) .",
    "we note that there still exists a potential way to determine an unreliable challenge through exhaustive search under the assumption that a priori @xmath28 has been eavesdropped and now the adversary is holding the physical puf - fsm .",
    "the adversary chooses an unused challenge @xmath63 to replace one challenge @xmath64 in the eavesdropped @xmath28 to observe the output of the puf - fsm .",
    "if @xmath63 is an unreliable challenge and its response contributes to the @xmath65 . then under repeatedly evaluations",
    ", the adversary can determine such an unreliable challenge when the key and random output are iteratively exhibited .",
    "if @xmath63 is unreliable and its response contributes to the @xmath51 .",
    "then under repeatedly evaluations , an unreliable challenge is determined when two differing keys are iteratively exhibited . through continuous exhaustive",
    "searching , other unreliable challenges can be determined as well to perform reliability - based attacks . by employing the device nonce alike  @xcite ,",
    "no matter the @xmath63 is unreliable or not , due to the nonce being refreshed each evaluation , observing the same key by repeatedly applying the same challenge is infeasible .",
    "thus , discovery of the unreliable challenge is disabled . the reliability - based attack  @xcite is , as a result , prevented",
    "the puf - fsm achieves mutual rather than common unidirectional authentication . recall that only a trusted entity has the capability of issuing a correct challenge sequence to activate the @xmath24 . as a consequence ,",
    "only the puf - fsm device and the trusted entity know the @xmath66 .    when the puf - fsm is transfered to the user .",
    "the trusted entity issues a @xmath28 and sends them to the user may through insecure communication channels .",
    "the user presents the @xmath28 to the puf - fsm and sends both the nonce and the puf - fsm output ( key ) back to the trusted entity .",
    "the trusted entity _ computes _ a key , hash(@xmath26 , nonce ) , and compares it with the key received . if they are same , the user holding the puf - fsm is authenticated .",
    "once the user is authenticated , the user applies the same @xmath28 again to the puf - fsm to obtain a refreshed output ( key ) .",
    "the user asks the refreshed key computed by the trusted entity after sending out the nonce .",
    "the trusted entity is authenticated by the user only if the received computed key is same to the key produced by the puf - fsm .",
    "following the foregoing mutual authentication , we consider the key exchange scenario between the user and the trusted entity .",
    "the user applies the same @xmath28 and sends the nonce to the trusted entity .",
    "but there is no key ( shared key ) sending between two parties .",
    "now only the user who holds the puf - fsm and the trusted entity know the shared key .",
    "the user obtains it from the puf - fsm , while the server _ computes _ it by hashing the @xmath26 and the nonce",
    ".      served as a controlled puf , intermediate benefits of the puf - fsm are the exclusion of the on - chip ecc logic and the usage of helper data , which finally release the constraints on a practical realization of the controlled puf .",
    "in addition , no ecc and helper data eliminates potential security concerns on previous controlled puf designs from modeling attacks , where the helper data leaks information  @xcite .      as an intentional design purpose",
    ", the controlled puf restricts the means in which a puf can be evaluated .",
    "who holds the puf - fsm is unable to evaluate it to obtain a @xmath67@xmath68 means a tuple  without permission from the trusted entity . to acquire a @xmath67 ,",
    "first , the mutual authentication is performed to establish trustiness between the trusted entity and the user who needs to hold the physical puf - fsm . then the trusted entity issues a fresh set of challenges to the user who is now authorized with a @xmath67 .",
    "once the user is authorized with a @xmath69 , ( s)he is able to renew arbitrary keys from the puf - fsm .",
    "the @xmath26 can be treated as a master secret , where all other sub - keys , hash(@xmath26 , nonce ) , are available .",
    "given a known nonce , the user and the trusted entity can retrieve sub - keys or sub - session keys without issuing a new challenge set .",
    "a shared key between two parties indeed enable a wide variety of standard cryptographic protocols to be implemented  @xcite .",
    "we have presented a practical controlled strong puf , puf - fsm , by ( 1 ) exploiting error - free responses in absence of an apuf and ( 2 ) controlling the means of evaluating the puf by using a control logic .",
    "the puf - fsm requires neither on - chip ecc nor helper data that were usually must when extracting a key . as a controlled puf",
    ", it holds the promise of a cost - effective way to increase resistance to various attacks , especially invasive attacks , for iot devices .",
    "security analyses demonstrate that the puf - fsm is resilient to modeling attacks .",
    "b.  gassend , m.  v. dijk , d.  clarke , e.  torlak , s.  devadas , and p.  tuyls , `` controlled physical random functions and applications , '' _ acm transactions on information and system security _ , vol .",
    "10 , no .  4 , p.  3",
    ", 2008 .",
    "u.  ruhrmair , c.  jaeger , m.  bator , m.  stutzmann , p.  lugli , and g.  csaba , `` applications of high - capacity crossbar memories in cryptography , '' _ ieee trans .",
    "_ , vol .",
    "10 , no .  3 , pp .",
    "489498 , 2011 .",
    "a.  vijayakumar , v.  c. patil , c.  b. prado , and s.  kundu , `` machine learning resistant strong puf : possible or a pipe dream ? '' in _ int .",
    "symp . hardware oriented security and trust ( host)_.1em plus 0.5em minus 0.4emieee , 2016 , pp .",
    "u.  ruhrmair , j.  solter , f.  sehnke , x.  xu , a.  mahmoud , v.  stoyanova , g.  dror , j.  schmidhuber , w.  burleson , and s.  devadas , `` puf modeling attacks on simulated and silicon data , '' _ ieee trans .",
    "forensics security _ , vol .  8 , no .  11 , pp . 18761891 , 2013 .",
    "g.  t. becker , `` the gap between promise and reality : on the insecurity of xor arbiter pufs , '' in _ cryptographic hardware and embedded systems ( ches)_.1em plus 0.5em minus 0.4emspringer , 2015 , pp . 535555 .",
    "yu , m.  hiller , j.  delvaux , r.  sowell , s.  devadas , and i.  verbauwhede , `` a lockdown technique to prevent machine learning on pufs for lightweight authentication , '' _ ieee transactions on multi - scale computing systems _ , 2016 , doi:10.1109/tmscs.2016.2553027 .",
    "j.  delvaux , d.  gu , d.  schellekens , and i.  verbauwhede , `` helper data algorithms for puf - based key generation : overview and analysis , '' _ ieee trans .",
    ".- aided design integr .",
    "circuits syst .",
    "_ , vol .",
    "34 , no .  6 , pp .",
    "889902 , 2015 ."
  ],
  "abstract_text": [
    "<S> physical unclonable functions ( puf ) , as hardware security primitives , exploit manufacturing randomness to extract instance - specific challenge ( input ) response ( output ) pairs ( crps ) . since its emergence , the community started pursuing a strong puf primitive that is with large crp space and resilient to modeling building attacks . a practical realization of a strong puf is still challenging to date . </S>",
    "<S> this paper presents the puf finite state machine ( puf - fsm ) that is served as a practical _ controlled _ strong puf . </S>",
    "<S> previous controlled puf designs have the difficulties of stabilizing the noisy puf responses where the error correction logic is required . in addition , the computed helper data to assist error correcting , however , leaks information , which poses the controlled puf under the threatens of fault attacks or reliability - based attacks . </S>",
    "<S> the puf - fsm eschews the error correction logic and the computation , storage and loading of the helper data on - chip by only employing error - free responses judiciously determined on demand in the absence of an arbiter puf with a large crp space . </S>",
    "<S> in addition , the access to the puf - fsm is controlled by the trusted entity . </S>",
    "<S> control in means of i ) restricting challenges presented to the puf and ii ) further preventing repeated response evaluations to gain unreliability side - channel information are foundations of defensing the most powerful modeling attacks . </S>",
    "<S> the puf - fsm goes beyond authentications / identifications to such as key generations and advanced cryptographic applications built upon a shared key .    </S>",
    "<S> shell : bare demo of ieeetran.cls for journals    physical uncloanble function , apuf , error - free responses , statistical model , modeling attacks , fault attacks . </S>"
  ]
}