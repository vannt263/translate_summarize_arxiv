{
  "article_text": [
    "it is quite important that the modular squaring map @xmath0 from @xmath1 to itself , where @xmath1 , is the reduced residue system mod @xmath2 .",
    "the algorithmic complexity of the modular quadratic equation @xmath3 for quadratic residue @xmath4 is equivalent to factoring @xmath2 .",
    "thus , @xmath5 has one - wayness if factoring @xmath2 is sufficiently difficult .",
    "there are various applications of the modular squaring map with @xmath6 for large distinct primes @xmath7 and @xmath8 .",
    "for example , blum et al .  @xcite constructed a unpredictable pseudorandom sequence to take the parity of @xmath9 for @xmath10 with a secret initial value @xmath11 .",
    "this is known as the blum - blum - shub pseudorandom number generator , and it is theoretically quite important .",
    "another important example is the rabin cryptosystem developed by michael c. rabin  @xcite .",
    "the rabin cryptosystem is a public key cryptosystem with public key @xmath2 and secret keys @xmath7 and @xmath8 . in this system ,",
    "message @xmath12 is encrypted as @xmath13 and decrypted as four possible roots of @xmath14 using @xmath15 and @xmath16 and the chinese remainder theorem  ( crt )  ( see section [ rabin ] ) .",
    "the security of the rabin cryptosystem , similar to that of rsa , is related to the practical difficulty of factoring @xmath6 .",
    "the rabin cryptosystem has a theoretical advantage in that there exists an exact proof of its security equivalent to factoring @xmath2 , which is not currently known to be true for rsa .",
    "being theoretically important , the rabin cryptosystem is also useful for passive radio frequency identification  ( rfid ) .",
    "the use of passive rfid tags to prevent counterfeiting by embedding them in a product is an emerging application .",
    "rfid systems comprises tags and interrogators .",
    "rfid tags are low - cost wireless devices that associate a unique i d  ( uid ) with the product .",
    "these tags are powered passively by the interrogator .",
    "implementation of a public key cryptosystem on rfid tags is challenging , because the hardware limited .",
    "therefore ,  lightweight \" cryptosystems are required for rfid tags .",
    "rsa is a well - known and effective public key cryptosystem ; however , it is not suitable for rfid tags .",
    "rsa encryption requires many modular multiplications , relatively long processing time , and a relatively large data - path area .",
    "in addition , rsa consumes a significant amount of energy .",
    "there are two major lightweight public key cryptosystems suitable for rfid tags , i.e. , the elliptic curve cryptosystem  ( ecc ) and the rabin cryptosystem .",
    "ecc can be applied to small devices and has shorter processing time than rsa .",
    "moreover , ecc is suitable for various rfid applications .",
    "many academic papers on ecc for rfid tags have been published .",
    "for example , frbass - wolkerstorfer  @xcite , lee - sakiyama - batina - verbauwhede  @xcite , hutter - feldhofer - plos  @xcite , hutter - feldhofer - wolkerstorfer  @xcite , hutter - joye - sierra  @xcite , pessl - hutter  @xcite , and kern - feldhofer  @xcite have reported remarkable results on ecc implementation for rfid tag chip .",
    "the rabin cryptosystem requires only one modular squaring , which is advantageous for use with rfid tags .",
    "indeed , oren - feldhofer  @xcite , @xcite , arbit et al .",
    "@xcite successfully applied rabin encryption variant to rfid tags .",
    "the variant , known as wipr  ( weizmann - iaik[institute for applied information processing and communications ] public key for rfid ) was developed by naccache  @xcite and shamir  @xcite , @xcite .",
    "wipr is smaller , faster , and requires less power than ecc implementations .",
    "giesecke & devrient gmbh  @xcite proposed proposed the rabin - montgomery cryptosystem  ( ramon ) , a public key protocol for rfid tags based on the rabin cryptosystem .",
    "ramon uses montgomery reduction  @xcite to avoid trial division .",
    "therefore , it is very likely that the rabin cryptosystem will be implemented on various types of rfid tag chips . since the publication of boneh , demillo , and lipton s landmark paper  @xcite , differential fault analysis(dfa ) has been an active area in cryptography .",
    "dfa is a technique to extract secret information from a cryptographic device by provoking a computational fault .",
    "dfa is a real threat for cryptographic devices , such as smartcard  @xcite ; therefore , a vast number of research papers about dfa have been published .",
    "the monograph edited by joye - tunstall  @xcite is a good guide to this field .",
    "however , conventional fault attack research for public key cryptosystems has focused on dfa for smartcards , particularly signature schemes using rsa and ecc .",
    "little attention has been paid to rabin cryptosystem implemented on an rfid tag chip .",
    "we propose a powerful fault attack by one - byte perturbation of public key @xmath2 based on the assumption that an attacker can induce faults as the device moves one byte of @xmath2 from non - volatile memory to a register . under this assumption ,",
    "the attacker can create a new faulted public key @xmath17 , where @xmath18 are mutually distinct primes and @xmath19 are positive integers .",
    "we provide a mathematical analysis and demonstrate the effectiveness of the proposed fault attack through simulation .",
    "although there have been some related studies  @xcite , @xcite , they are not directly applicable to our target .",
    "an attack against rsa , first developed by seifert  @xcite and extended to the general case by muir et al .",
    "@xcite , can obtain a new secret exponent @xmath20 , where @xmath21 is a public exponent and @xmath22 is euler s totient function .",
    "this approach is not applicable to rabin cryptosystems ; therefore , a secret message @xmath12 including uid must be reconstructed directly .",
    "conversely , it is known that an attacker can obtain modular quadratic equation @xmath23 by solving each @xmath24 and computing @xmath12 using crt only if @xmath25 holds . however , generally , some prime factors of @xmath26 are small . as a result , cases in which @xmath27 occur frequently",
    ". we also present a complete mathematical method to reconstruct the message in such cases .",
    "the remainder of this paper is organized as follows .",
    "section ii presents a brief description of quadratic residues , the rabin cryptosystem , and basic facts about the target implementation of a rabin cryptosystem in an rfid tag .",
    "section iii presents the general principle and procedure of our attack , as well as a complete and mathematically rigorous message reconstruction algorithm .",
    "we show an exact formula to obtain the number of candidate message in section iv .",
    "simulated attack results are presented in section v , and conclusions are presented in section vi .",
    "let @xmath7 be an odd prime .",
    "an integer @xmath28 is called a quadratic residue mod @xmath7 if there exists @xmath29 such that @xmath30 .",
    "we denote the set of all quadratic residues mod @xmath7 by @xmath31 .",
    "we can use euler s criterion to claim that @xmath32 to determine @xmath33 or not .",
    "in other words , @xmath32 holds if @xmath33 , or @xmath34 holds if @xmath35 . using euler s criterion , square roots of @xmath14 mod @xmath7 can be represented as @xmath36 if @xmath37 . note that @xmath38 is a positive integer under the condition and @xmath39 . if @xmath40 , i.e. , @xmath41 , then we require the tonelli - shanks algorithm to find the square roots .",
    "the tonelli - shanks algorithm runs in polynomial time assuming that the generalized riemann hypothesis is true .",
    "we can find the roots mod @xmath42 of @xmath14 as follows .",
    "first , we find all square roots mod @xmath7 . then using the hensel lift(see e.g. , section 13.3.2 of shoup s book  @xcite ) , we lift each of these square roots to obtain all of the roots @xmath43 , and then lift these to obtain all square roots mod @xmath44 , and so on",
    ". quadratic residue can be generalized for the mod of an odd composite number @xmath45 .",
    "a quadratic residue mod @xmath2 is an integer @xmath46 such that there exists an @xmath47 that satisfies @xmath48 . using the crt",
    ", it can be demonstrated that @xmath46 is a quadratic residue mod @xmath2 if and only if it is a quadratic residue mod of each @xmath49 , and one obtain every root mod @xmath2 from all roots mod @xmath49 s .",
    "the rabin cryptosystem  @xcite is a public key system based on the factorization difficulty of @xmath6 where @xmath7 and @xmath8 are large and distinct balanced primes .",
    "the length @xmath50 of @xmath2 must be greater than or equal to 1,024 to be safe .",
    "@xmath2 is its public key , and @xmath7 and @xmath8 are its secret keys . to reduce decryption complexity , choose @xmath7 and @xmath8 that satisfy @xmath51 should be chosen .",
    "according to the dirichlet s theorem on arithmetic progressions ( see e.g. , theorem 5.52 of shoup s book  @xcite ) , infinitely many prime numbers @xmath7 that satisfy @xmath37 exist .",
    "let @xmath1 be the reduced residue system mod @xmath2 .",
    "generally , the plaintext @xmath52 is generated from a shorter message , including the uid , in our case . in the rabin cryptosystem , to encrypt @xmath52 , the sender computes its square mod @xmath2 : @xmath53    to decrypt the ciphertext @xmath14 , the receiver computes its square roots @xmath54 of @xmath14 mod @xmath2 using @xmath7 and @xmath8 as follows .",
    "first , compute @xmath55 and @xmath56 using an efficient exponentiation algorithm .",
    "second , using the crt , the four roots are computed as follows : @xmath57 finally , the receiver recognizes the valid plaintext based on its format , such as redundancy and structure .",
    "the rabin cryptosystem has two significant advantages with respect to alternative public key schemes .",
    "first , it is provably difficult to factor @xmath2 .",
    "second , it imposes a small computational burden , has relatively lightweight implementation , and requires only a single squaring and modular reduction for encryption .",
    "lightweight implementation , and requires      the most time consuming process of rabin encryption is trial division by @xmath2 because it is a ram - intensive process .",
    "there are two well - known ways to avoid trial division .",
    "one is using montgomery reduction  @xcite , and the other is using the wipr scheme .",
    "when we use montgomery reduction , we compute @xmath58 rather than @xmath59 , where @xmath2 is @xmath50-bits long ; therefore , it is simply a data format problem .",
    "conversely , the wipr scheme includes an essentially different process .",
    "thus , we describe only the wipr scheme .    to reduce the trial division process , naccache  @xcite and shamir  @xcite",
    ", @xcite proposed a variant by replacing the modular multiplication by adding a large random multiple of @xmath2 , where the size of the random number @xmath60 is at least 80 bits longer than the size of @xmath2 : @xmath61 obviously , @xmath62 , and @xmath63 is fully randomized .",
    "the decryption process is identical to rabin s original process .",
    "this randomized variant of rabin s scheme is easier to implement because it has only multiplications without modular reduction . it is lighter than the original rabin scheme ; however , it requires a register that is approximately twice as long for the ciphertext .",
    "the wipr scheme replaces @xmath60 with the output of a light stream cipher , which was developed by oren - feldhofer  @xcite .",
    "this stream cipher is implemented by creating a feistel network .",
    "arbit et al .",
    "@xcite reported that their successful implementation had a data - path area of 4,184 gate equivalents , an encryption time of 180 ms and an average power consumption of 11 @xmath64w .",
    "we describe the wipr challenge - response protocol as follows .    1 .",
    "challenge : the interrogator sends the challenge(random bit string ) @xmath65 of length @xmath66 to the tag .",
    "response : the rfid tag generates two random bit strings @xmath67 and @xmath60 , where @xmath68 , and @xmath69 . the tag generates a message as follows : @xmath70 where @xmath71 denotes concatenation operator , and transmits the following ciphertext : @xmath72 and is a simple byte - interleaving operation  ( see oren - feldhofer  @xcite for details ) .",
    "verify : the interrogator decrypts @xmath63 using the secret key @xmath73 and finds the correct message , including the uid , in four square roots .    here ,",
    "@xmath66 and @xmath74 are security parameters  ( originally set to @xmath75 ) .",
    "note that using the rabin function @xmath76 to encrypt a message @xmath12 that satisfies @xmath77 requires some kind of random padding .",
    "some padding schemes with short random padding are vulnerable to attacks based on coppersmith s theorem for a univariate polynomial  @xcite and franklin - reiter s related message attack  @xcite , @xcite .",
    "another way to avoid trial division is using montgomery reduction  @xcite .",
    "when we use montgomery reduction , we compute @xmath78 rather than @xmath79 , where @xmath2 is @xmath50-bits long .",
    "montgomery reduction computes @xmath80 that satisfies the following diophantine equation : @xmath81 clearly , @xmath82 .",
    "ramon was proposed by giesecke & devrient gmbh  @xcite .",
    "rfid tag sends the following ciphertext : @xmath83 where @xmath84 . in 1024 bit @xmath2 case , the message @xmath12 is formatted as follows : @xmath12(128 bytes ) = challenge(10 bytes ) @xmath71 tag random number(10 bytes ) @xmath71 tlv - coded signed tag uid(n bytes ) @xmath71 variable length filling(x bytes ) @xmath71 checksum(2 bytes ) @xmath71 the last byte must be left free ; i.e. , set to zero  ( 1 byte ) .    note that @xmath85 ; therefore , the interrogator transforms @xmath86 into normal ciphertext as follows : @xmath87 then , the interrogator computes four roots of @xmath14 mod @xmath2 using the secret key @xmath73 and finds the correct @xmath12 based on its format .",
    "in the following , we consider only the wipr protocol for convenience .",
    "the fundamental idea of our attack method uses perturbed public key @xmath26 of @xmath2 . in this case , the ciphertext changes as follows : @xmath88 generally , the attacker can not factor the coprime @xmath2 in realistic time .",
    "conversely , a perturbation @xmath26 of @xmath2 can be factored at high probability .",
    "if the attacker has factored @xmath26 successfully , such as @xmath17 , then the modular quadratic equation @xmath89 derived from ( [ perturbed_eq ] ) splits into @xmath90 smaller equations : @xmath91 equation ( [ perturbed_eq_splitted ] ) can be solved using the tonelli - shanks algorithm and the hensel lift .",
    "crt leads us to all roots of ( [ perturbed_eq ] ) from the roots @xmath92 of ( [ perturbed_eq_splitted ] ) , i.e. , we obtain : @xmath93 where @xmath94 .",
    "the attacker obtains the correct roots @xmath12 by modifying the above @xmath95 as @xmath96 for the smallest @xmath97 such that @xmath98 . the perturbed modular quadratic equation ( [ perturbed_eq ] )",
    "typically has @xmath99 roots , and these roots contain the correct message including the uid .",
    "the number of roots exceeds @xmath99 in some cases depending on the values of @xmath100 for @xmath101 .",
    "we discuss these problems in sections [ roots ] and [ num ] .",
    "the wipr protocol requires two online multiplications to compute @xmath102 .",
    "optimal implementation of wipr with 1,024 bit @xmath2 was shown by arbit et al .",
    "this multiplication process is performed on a multiply - accumulate register by convolution . assuming a word size of one byte , a single multiply - accumulate register perform this multiplication in approximately @xmath103 steps .",
    "the public key @xmath2 moves from non - volatile memory to the register byte by byte .",
    "we assume that the attacker can inject a one - byte fault into this data moving process . in this paper",
    ", we consider two fault models .      the first fault model that we choose to perform our attack with is derived from those used by berzati et al .",
    "@xcite , @xcite to successfully attack standard rsa .    here",
    "let @xmath104 $ ] be a set of integers in the interval @xmath105 $ ] .",
    "we assume that the attacker can inject a transient fault that public key @xmath2 modifies by byte , that is , the injected fault affects only one byte of the public key by modifying it randomly as follows : @xmath106 where @xmath107 is bitwise exclusive or and @xmath108 , @xmath109 $ ] for @xmath110 which is required to preserve the parity of @xmath26 .",
    "we assume the attacker knows the position @xmath111 , but the correct value of the faulty public key @xmath26 is unknown by the attacker .",
    "the attacker must factor 255  ( @xmath112 ) candidates of @xmath26 .",
    "our attack also works for a fault that affects several bytes of @xmath2 .",
    "however , the attacker s task grows in proportion to the number of candidates @xmath26 of perturbed @xmath2 .",
    "this is a natural assumption for both wipr and ramon . in the wipr case ,",
    "the attack target is the time at which the @xmath111-th byte @xmath113 $ ] of @xmath2 moves from non - volatile memory to the register for multiplication before multiplying @xmath60 and @xmath2 . in the ramon case ,",
    "the fault is injected while @xmath2 moves from non - volatile memory , such as eeprom , to a register at the trensfer time of the @xmath111-th byte prior to montgomery squaring @xmath114 .",
    "the second fault model is based on the instruction skip technique .",
    "instruction skip is equivalent to replacing an instruction with a no operation in assembly language .",
    "several researchers have investigated dfa using an instruction skip , or a bypass operation @xcite , @xcite , @xcite .",
    "instruction skip does not affect the registers , internal memory , and calculation process .",
    "successful instruction skip attacks have been reported for pic16f877  @xcite , atmega 128  @xcite , and atmega 168  @xcite microcontrollers .",
    "choukri - tunstall  @xcite and park et al .",
    "@xcite showed that an entire advanced encryption standard secret key could be reconstructed by skipping a branch instruction used to check the number of rounds .",
    "kaminaga et al .",
    "@xcite showed that it is possible to reconstruct an entire secret exponent with @xmath115 faulted signatures in a short time for a 1536-bit rsa implementation with the @xmath116-ary method using instruction skipping technique in precomputation phase .",
    "our attack target is a conditional branch operation for moving the last byte of @xmath2 at the counter @xmath117 .",
    "if the conditional branch operation is skipped , the attacker obtains the faulted public key @xmath26 as follows : @xmath118(2 ^ 8)^i,\\ ] ] where each @xmath113\\in \\mathbb{z}[0,255]$ ] .",
    "clearly , @xmath26 is one byte shorter than the original @xmath2 , and preserves its parity .",
    "some rabin cryptosystems for rfid tags adopt special types of modulus @xmath2 for restricted hardware resources .",
    "wipr for rfid proposed by oren - feldhofer  @xcite uses modulus @xmath2 with a predefined upper half to reduce rom cost by half .",
    "ramon uses modulus @xmath2 to satisfy the condition @xmath119 , which means that approximately one - half of the least significant bits of @xmath2  ( except for the last one ) are zeroes to reduce multiplications  @xcite .",
    "half of the processes in which modulus data is transferring from eeprom to a register are reduced in such cases .",
    "therefore , the attacker must set the location of the target byte to the lower half bytes of @xmath2 for implementation of oren - feldhofer s proposal  @xcite , and the attack must set the location of the byte to upper half bytes of @xmath2 for ramon  @xcite .      the attacker s goal is to reconstruct the secret message @xmath12 , including the uid .",
    "the following steps provide an example of our attack process .",
    ": :    create a perturbed public key @xmath26 by injecting a    fault to a byte of the public key @xmath2 .",
    ": :    factorize 255 candidates @xmath120    of @xmath26 .",
    "when factoring consumes too much amount of    time , perturb another byte of @xmath2 and attempt this process    again .",
    ": :    solve modular quadratic equation    @xmath121 .",
    ": :    find the correct message @xmath12 based on data format in all    roots of @xmath121 .",
    "step 2 is the most time concuming process in computation for the attacker .",
    "most of @xmath120 have relatively small factors ; thus , these can be factored in a short time . however , some cases require more time to factor @xmath122",
    ". then , the attacker shifts the position of the target byte and attempt the factoring process again .",
    "step 3 is a technical process , and we must consider the degenerate case , @xmath123 .",
    "mathematicians have paid little attention to the degenerate case ; however , such case arises in our attack .",
    "our attack method comes down to finding all roots of the following modular quadratic equation with a square number @xmath124 : @xmath125 where @xmath7 is an odd prime and @xmath21 is a positive integer .",
    "the oddness of @xmath7 obeys the fact that our attack targets a byte of @xmath2 that is not the lowest byte .",
    "we use assumption ( a ) , i.e. , @xmath124 is squared @xmath126 , throughout this paper .",
    "assumption ( a ) is very natural because @xmath127 is derived from our target equation @xmath128 .",
    "we denote @xmath129 by @xmath124 .",
    "the algorithm for finding the roots of ( [ qe ] ) depends on whether @xmath130 .",
    "we distinguish the  degenerate \" case @xmath131 from the  non - degenerate \" case @xmath132 .      here",
    ", let @xmath133 for some @xmath134 . for @xmath130 , finding the roots of ( [ qe ] ) is not difficult  ( see e.g. , section 2.8.2 of shoup s book  @xcite ) .",
    "( theorem 2.25  @xcite)[justtwo ] if @xmath130 , then the modular quadratic equation ( [ qe ] ) is equivalent to @xmath135 .",
    "in particular , ( [ qe ] ) has only two roots .    here",
    ", we show the proof for theorem  [ justtwo ] .",
    "since @xmath136 , there exists the inverse @xmath137 mod @xmath7 .",
    "therefore , ( [ qe ] ) is equivalent to @xmath138 .",
    "let @xmath139 be @xmath140 , and we obtain @xmath141 thus , there exists non - negative integers @xmath142 such that @xmath143 or @xmath144 .",
    "then , @xmath145 divides @xmath7 if both @xmath146 and @xmath147 are positive , which leads to a contradiction because @xmath7 is an odd prime , therefore , @xmath148 or @xmath149 .    for @xmath37 and @xmath130 ,",
    "all the roots of ( [ qe ] ) are given by : @xmath150 where @xmath22 is euler s totient function .",
    "it is easy to verify ( [ easyroot ] ) directly . from theorem  [ justtwo ] ,",
    "the number of roots of ( [ qe ] ) is two .",
    "note that @xmath151 follows from @xmath37 . by using euler s totient theorem @xmath152 and squaring @xmath124",
    ", we obtain : @xmath153 using ( [ sqrt_eu ] ) , we obtain @xmath154 .",
    "this means that @xmath155 is a square root mod @xmath42 of @xmath124 , therefore , all square roots mod @xmath42 of @xmath14 are given by @xmath156 .",
    "for @xmath41 , we first solve the following equation : @xmath157    we require the tonneli - shanks algorithm to solve ( [ diffcase ] ) .",
    "the tonneli - shanks algorithm can be described as follows .    1 .",
    "determine @xmath66 such that @xmath158 where @xmath74 is odd .",
    "2 .   find a non - quadratic residue @xmath159 mod @xmath7 .",
    "3 .   compute @xmath160 .",
    "4 .   find @xmath161 such that @xmath162 .",
    "compute @xmath163 .",
    "output @xmath164 as a solution .",
    "it is easy to check if @xmath164 is a square root mod @xmath7 of @xmath124 . indeed , using fermat s little theorem , we obtain @xmath165 .    after solving ( [ diffcase ] )",
    ", the roots can be lifted to mod @xmath166 using the following .",
    "( hensel s lifting lemma ) let @xmath167 $ ] and @xmath168 satisfy @xmath169 and @xmath170 .",
    "then , there is unique @xmath171 such that @xmath172 and @xmath173 .",
    "furthermore , this x is unique in mod @xmath174 , and can be represented explicitly as : @xmath175 where @xmath176 the division by @xmath177 denotes ordinary integer division , and the inversion @xmath178 is computed in @xmath179 .",
    "here we consider the degenerate case , i.e. , @xmath131 .",
    "[ zerothm ] all roots of the modular quadratic equation @xmath180 are given by @xmath181 for @xmath182 $ ] .",
    "in particular , the number of its roots is @xmath183 .",
    "it is clear that @xmath181 for @xmath182 $ ] satisfies @xmath180 .",
    "thus , we only have to show that other forms of the roots do not exist .",
    "let @xmath184 with @xmath185 .",
    "since @xmath186 , @xmath29 is a multiple number of @xmath7 , therefore , @xmath187 . then @xmath188 if and only if @xmath189 holds .",
    "[ nonzerothm ] all roots of @xmath190 for @xmath191 , which is squared , and @xmath192 are given by @xmath193,\\ ] ] where @xmath194 is a root of @xmath195 .",
    "in particular , the number of its roots is @xmath196 .",
    "note that @xmath197 must be even under assumption ( a ) .",
    "let @xmath198 such that @xmath199 , and substitute @xmath29 into the quadratic equation ; thus , we obtain : @xmath200 suppose that @xmath201 , @xmath202 holds , which means that @xmath194 is a multiple of @xmath7 and is contradictory .",
    "conversely , suppose that @xmath203 , @xmath204 holds , which means that @xmath205 is a multiple of @xmath7 and is contradictory .",
    "therefore , @xmath206 holds , and we obtain : @xmath207 from theorem [ justtwo ] , ( [ yeq ] ) has only two roots in modulo @xmath208 .",
    "therefore , the root @xmath29 of @xmath209 can be represented as : @xmath210 for some @xmath211 .",
    "( [ genrep ] ) satisfies @xmath209 .",
    "then , we have @xmath212 . we learn @xmath213 .",
    "since @xmath7 is odd and @xmath194 is invertible , @xmath214 is a multiple of @xmath215 .",
    "then , @xmath216 for some @xmath217 . substituting @xmath216 into ( [ genrep ] ) , we reach @xmath218 for @xmath219 $ ] . since only two @xmath194 satisfy ( [ yeq ] ) ,",
    "the number of @xmath29 is @xmath196 .",
    "the degenerate case occurs frequently when @xmath26 has a small prime factor .",
    "therefore , in many cases , we can easily find the desired roots by brute force without using hensel s lifting lemma .",
    "we really need for the perturbed public key @xmath26 is to be easily factorable . after factoring ,",
    "the problem breaks down to find the roots of the modular quadratic equation .",
    "complexity of finding square roots mod @xmath26 depends on prime factor decomposition of @xmath26 .",
    "complicated cases arise when @xmath26 is not square - free . here",
    "we denote the function the number of distinct prime factor of @xmath26 by @xmath220 , and the number of roots of @xmath221 by @xmath222 .",
    "crt equality ( [ crt ] ) says that @xmath222 is a multiplicative function .",
    "combining theorem [ justtwo ] , [ zerothm ] , and [ nonzerothm ] , each @xmath223 can be represented explicitly as follows .",
    "[ th : numberofroots ] @xmath224 for @xmath225 , and where @xmath226    it is well known that the following asymptotic estimate for @xmath227 , which is the number of square - free numbers below @xmath29 .",
    "( theorem 333 , hardy - write  @xcite , p.355 ) [ hwasym ] @xmath228    this estimate tells us that the probability that a number should be square - free is approximated as @xmath229 for large @xmath29 . note that @xmath197 is even because @xmath124 is squared , and @xmath230 if and only if @xmath231 . theorem [ th : numberofroots ] implies the following upper bound for square - free @xmath26 : @xmath232 the equality holds in ( [ bound ] ) if and only if @xmath233",
    "therefore , theorem [ th : numberofroots ] and [ hwasym ] mean that the probability that the inequality ( [ bound ] ) holds is greater than or equal to @xmath234 asymptotically .",
    "the asymptotic behavior of @xmath220 is described by theorem  [ ek ] .",
    "( erds and kac@xcite ) [ ek ] the function @xmath235 is normally distributed in the sense that , for any fixed @xmath236 , one has : @xmath237 as @xmath238 , where we denote the cardinality of a set @xmath239 as @xmath240 .",
    "theorem [ ek ] tells us the distribution of @xmath220 obeys normal distribution with mean @xmath241 and variance @xmath241 .",
    "we use the rough estimate @xmath242 for 1,024-bit @xmath26",
    ". however , convergence is slow because the term @xmath241 increases very slowly as @xmath26 becomes large .    since both wipr and ramon uses at east an 80 bit challenge , the probability that a candidate correct message @xmath12 has the same data format accidentally is less than or equal to @xmath243 .",
    "according to the above mathematical observations , it is quite rare that plural candidates of @xmath12 will appear .",
    "in the attack procedure discused in section [ ap ] , the most time - consuming process is the factorization of @xmath26 at step 2 . when this process takes too much time , another fault injection is required ( step 1 ) .",
    "the other steps are straightforward .    therefore , in this section , the number of repeated fault injections and the time for factorization are evaluated by computer simulation . for simplicity , we explain only the case ` crash of a byte of @xmath2 ' .",
    "the simulation procedure is as follows where @xmath244 is the average calculation time in steps ( 3 ) and ( 4 ) .",
    "step ( 0 ) : : :    generate a 1,024 bit @xmath2  ( 128 bytes ) .",
    "let    @xmath245(2 ^ 8)^i$ ] .",
    "step ( 1a ) : : :    decide fault position @xmath246 .",
    "@xmath247 in uniform distribution .",
    "step ( 1b ) : : :    decide fault pattern @xmath248 .",
    "@xmath249 in uniform distribution . as a    notation , @xmath250=\\left\\{\\begin{array}{ll }",
    "n[i]\\oplus k_0 , & \\mbox{if } i = j \\\\",
    "\\mbox{otherwise }    \\end{array }    \\right.\\ ] ] and    @xmath251(2",
    "^ 8)^i$ ] .    attackers know @xmath246 , but do not know @xmath248 .",
    "step ( 2 ) : : :    let @xmath252 .",
    "reset timer @xmath253 , which    accumulates the processing time of steps ( 2a ) through ( 4 ) .",
    "reset    counter @xmath65 , which counts successful factorization .",
    "step ( 2a ) : : :    make @xmath122 and attempt to factorize it within 1    min .",
    "if factorization is successful , proceed to steps 3 and 4 in    section iii - d .",
    "let @xmath254 . if factorization does not    finish , proceed to step ( 4 ) .",
    "step ( 3 ) : : :    if @xmath255 , go to step ( 5 ) .",
    "step ( 4 ) : : :    @xmath256 .",
    "when @xmath257 , go back to step    ( 2a ) ; otherwise , proceed to step ( 6 ) .",
    "step ( 5 ) : : :    the attack is successful .",
    "time consumed is @xmath258 .",
    "the simulation ends .",
    "step ( 6 ) : : :    the attack is in fail . consuming time is @xmath258 .",
    "simulation ends .      using a desktop pc with a core i7 - 2600 cpu at 3.4 ghz with 12 gb ram , the simulation runs on mathematica 9 for windows 7 pro 64 bit .",
    "a simulated one attack begins at step ( 0 ) .",
    "if this attack ends at step ( 5 ) , the attack can find the correct message , i.e. , the attack is successful .",
    "otherwise , it ends at step ( 6 ) , which means the attack has failed . as a result ,",
    "28 cases were successful among 195 simulated attacks , which is an 14.4% success rate .",
    "according to this result , attack with @xmath259 fault injections has a success rate of @xmath260 .",
    "the success rate is 54% for @xmath261 .",
    "figure  [ fig : a ] shows the distribution of time consumed @xmath253 per single attack . for successful attacks , the mean @xmath253 is 115.4 min , the median is 136.8 min , and the standard deviation is 78.1 min . for failed attacks ,",
    "the mean , median , and standard deviation of @xmath253 are 226.4 min , 226.6 min , and 4 min , respectively .",
    "@xmath253 can be 255 min at most .",
    "however , when factorization finishes within 1 min , @xmath253 will be less than 255 min .",
    "moreover , the attack is complete when the correct message is found ; thus , @xmath253 becomes much less than 255 min . if the factorized fault pattern @xmath97 is the true fault pattern , @xmath248 .",
    "the distribution of the number of successful factorizations , @xmath65 is shown in fig.[fig : b ] . here",
    ", @xmath65 is 30.91 on average for failed attack cases . for successful attacks ,",
    "the factorization will break at step ( 3 ) ; therefore , it does not reach the final fault pattern @xmath262 with high probability .",
    "thus , the successful factorization rate is estimated as @xmath263% .",
    "note that , in this simulation , the time limit for the factorization process is 1 min at step ( 2a ) , which is just an example .",
    "the time limit for factorization would be optimized by considering total attack time and/or the cost of fault injections .",
    "this issue will be the focus of future study .",
    ", width=302 ]    , width=302 ]",
    "in this paper , we have proposed a powerful fault attack technique against a rabin cryptosystem implemented in a passive rfid tag chip .",
    "our attack uses one byte perturbation @xmath26 of public key @xmath2 .",
    "one difficulty with our attack is how to reconstruct the message @xmath12 , including the uid , when @xmath27 .",
    "we have provideed a complete algorithm to reconstruct @xmath12 for such cases .",
    "this attack requires only one fault in the public key if its perturbed public key can be factored .",
    "the most time consuming process of our attack is the factorization of @xmath26 .",
    "empirically , the successful factorization rate is estimated as 12.2% of @xmath26 , even if factorization is limited within 1 min using a desktop pc .",
    "when this process takes too much time , another fault injection is preferable .",
    "this work was supported by the japan society for the promotion of science kakenhi grant number 25330157 .",
    "l. blum , m. blum , and m. shub ,  a simple unpredictable pseudo - random number generator \" , siam journal on computing , vol . 15 , pp . 364 - 383(1986 ) .",
    "m. rabin , digitalized signatures and public - key functions as intractable as factorization , tech .",
    "report , mit , 1979 .",
    "frbass and wolkerstorfer ,  ecc processor with low die size for rfid applications , \" ieee international symposium on circuits and systems , 2007 , pp .",
    "1835 - 1838(2007 ) .",
    "y. k. lee , k. sakiyama , l. batina , and i. verbauwhede ,  elliptic - curve - based security processor for rfid , \" ieee transactions on computers , 57(11 ) , pp .",
    "1514 - 1527(2008 ) . m. hutter , m. feldhofer , and t. plos ,  an ecdsa processor for rfid authentication , \" in s. b. o. yalcin , editor , rfidsec 2010 , 6th workshop , istanbul , turkey , june 7 - 9 , volume 6370 of lncs , springer , pp .",
    "189 - 202(2010 )",
    ". m. hutter , m. feldhofer , and j. wolkerstorfer .  a cryptographic processor for low resource devices : canning ecdsa and aes like sardines , \" in c. a. ardagna and j. zhou , editors , information security theory and practices - wistp , heraklion , crete , greece , june 1 - 3 , volume 6633 of lncs , springer , pp .",
    "144 - 159(2011 ) .",
    "m. hutter , m. joye , and y. sierra .",
    "memory - constrained implementations of elliptic curve cryptography in co - z coordinate representation . in a. nitaj and d. pointcheval , editors , africacrypt 2011 , dakar , senegal , july 5 - 7 ,",
    "volume 6737 of lncs , springer , pp .",
    "170 - 187(2011 ) .",
    "p. pessl and m. hutter ,  curved tags - a low - resource ecdsa implementation tailored for rfid , \" radio frequency identification : security and privacy issues lecture notes in computer science volume 8651 , pp .",
    "156 - 172(2014 )",
    ". t. kern and m. feldhofer ,  low - resource ecdsa implementation for passive rfid tags , \" in icecs , december 12 - 15 , athens , greece , pp .",
    "1236 - 1239(2010 ) . y. oren and m. feldhofer ,  wipr  public - key identification on two grains of sand , \" proc .",
    "workshop on rfid security 2008 , pp .",
    "15 - 27(2008 )",
    ". y. oren and m. feldhofer ,  a low - resource public - key identification scheme for rfid tags and sensor nodes , \" proc .",
    "2nd international conf . wireless network security ( wisec 09 ) , acm , pp .",
    "59 - 68(2009 ) .",
    "a. arbit , y. livne , y. oren , a. wool ,  implementing public - key cryptography on passive rfid tags is practical , \" international journal of information security , february 2015 , volume 14 , issue 1 , pp 85 - 99(2015 ) d. naccache , method , sender apparatus and receiver apparatus for modulo operation , european patent application 91402958.2 , filed 27 oct .",
    "a. shamir , ",
    "memory efficient variants of public - key schemes for smart card applications , \" proc .",
    "advances in cryptology ( eurocrypt94 ) , lncs 950 , pp .",
    "445 - 449(1995 ) .",
    "a. shamir ,  squash - a new mac with provable security properties for highly constrained devices such as rfid tags \" in fast software encryption , springer , pp .",
    "144 - 157(2008 )",
    ". w. hinz , k. finkenzeller , m. seysen ,  secure uhf tags with strong cryptography - development of iso / iec 18000 - 63 compatible secure rfid tags and presentation of first results , \" sensornets , pp .",
    "5 - 13(2013 ) p.",
    "montgomery ,  modular multiplication without trial division , \" math .",
    "computation , vol .",
    "44 , pp . 519521(1985 ) .",
    "d. boneh , r.a .",
    "demillo , and r.j .",
    "lipton ,  on the importance of eliminating errors in cryptographic computations , \" j. cryptol .",
    "vol.14 , no.2 , pp .",
    "101 - 119 , springer - verlag , berlin , 2001 .",
    "earlier version published in eurocrypt 97 .",
    "h. bar - ei , h. choukri , d. naccache , m. tunstall , and c. whelan ,  the sorcerer s apprentice guide to fault attacks , \" in proc . of the ieee 94(2 ) , pp .",
    "370 - 382(2006 ) .",
    "j. seifert ,  on authenticated computing and rsa - based authentication .",
    "\" in proc .",
    "of the 12th acm conference on computer and communications security ( ccs 2005 ) , pp .",
    "122 - 127(2005 ) .",
    "j. a. muir , ",
    "seifert s rsa fault attack : simplified analysis and generalizations , \" in icics06 proc .",
    "of the 8th international conference on information and communications security , pp.420 - 434(2006 ) .",
    "v. shoup , _ a computational introduction to number theory and algebra - second ed .",
    "_ , cambridge university press , 2009 .",
    "d. coppersmith , small solutions to polynomial equations , and low exponent rsa with vulnerabilities , journal of cryptology 10 , pp.233 - 260(1997 ) .",
    "m. franklin and m. reiter , a linear protocol failure for rsa with exponent three , in crypto95 rump session , aug",
    "d. coppersmith , m. franklin , j. patarin , and m. reiter , low - exponent rsa with related messages , in eurocrypt98 , vol .",
    "1403 of lncs , pp .",
    "58 - 71(1998 ) .",
    "a. berzati , and l. goubin , perturbing rsa public keys : an improved attack . in e. oswald , p. rohatgi ( eds . ) : cryptographic hardware and embedded systems ( ches 2008 ) , lecture notes in computer science vol . 5154 , springer , pp .",
    "380 - 395(2008 ) .",
    "a. berzati , c. canovas - dumas , and l. goubin , fault attacks on rsa public keys : left - to - right implementations are also vulnerable . in m.",
    "fischlin ( ed . ) : ct - rsa 2009 , lecture notes in computer science vol .",
    "5473 , springer , pp .",
    "414 - 428(2009 ) .",
    "h. choukri and m. tunstall ,  round reduction using faults , \" in proc . of fdtc 2005 , pp.13 - 24(2005 ) .",
    "j. park , s. moon , d. choi , y. kang , and j. ha ,    differential fault analysis for round - reduced aes by fault injection , \"   etri j. vol .",
    "33 , no.3 , pp.434 - 441(2011 ) .",
    "h. yoshikawa , m. kaminaga , and a. shikoda ,    round addition using faults for generalized feistel network , \"   _ ieice trans . inf . & syst .",
    "_ , vol.e96-d , no.1 , pp.146 - 150(2013 ) . m. kaminaga , h. yoshikawa , and t. suzuki , double counting in @xmath264-ary rsa precomputation reveals the secret exponent , ieee trans . on inform .",
    "forensics & sec .",
    ", pp.1394 - 1401(2015 ) .",
    "v. shoup , a computational introduction to number theory and algebra(2nd ed . ) , cambridge university press , 2009 .",
    "g. h. hardy and e. m. wright(revised by d. r. heath - brown and j. h. silverman ) , _ an introduction to the theory of numbers(sixth edition ) _ , oxford university press , 2008 .",
    "p. erds and m. kac , the gaussian law of errors in the theory of additive number theoretic functions , american journal of mathematics 62 , pp .",
    "738 - 742(1940 ) ."
  ],
  "abstract_text": [
    "<S> the rabin cryptosystem has been proposed protect the unique i d ( uid ) in radio - frequency identification tags . </S>",
    "<S> the rabin cryptosystem is a type of lightweight public key system that is theoretetically quite secure ; however it is vulnerable to several side - channel attacks . in this paper , </S>",
    "<S> a crashing modulus attack is presented as a new fault attack on modular squaring during rabin encryption . </S>",
    "<S> this attack requires only one fault in the public key if its perturbed public key can be factored . </S>",
    "<S> our simulation results indicate that the attack is more than 50% successful with several faults in practical time . </S>",
    "<S> a complicated situation arises when reconstrucing the message , including the uid , from ciphertext , i.e. , the message and the perturbed public key are not relatively prime . </S>",
    "<S> we present a complete and mathematically rigorous message reconstruction algorithm for such a case . </S>",
    "<S> moreover , we propose an exact formula to obtain a number of candidate messages . </S>",
    "<S> we show that the number is not generally equal to a power of two .    </S>",
    "<S> kaminaga : crashing modulus attack on modular squaring </S>"
  ]
}