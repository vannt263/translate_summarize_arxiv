{
  "article_text": [
    "there are deep connections between formal language theory and group theory , and this relationship has been used to successfully explore the structure of groups by mathematicians . for example , in the foundational work of epstein et al @xcite , the authors introduce the notion of automatic structures on groups which are defined in terms of regular languages . they show that many naturally occurring groups admit automatic structures , such as the braid groups , mapping class groups , and many 3-manifold groups .",
    "moreover , they show that the word problem is solvable for any automatic group , and in fact can be solved in quadratic time .",
    "further , automatic groups share a number of other appealing algorithmic properties , and this is an example of a fruitful application of formal languages to the study of groups .    in order to describe the relationship between formal languages and groups ,",
    "one typically uses a finite generating set for the group .",
    "for instance , given a class @xmath0 of formal languages , one interesting question is whether a given ( finitely generated ) group has word problem in @xmath1 in @xcite muller and schupp show that a finitely generated group @xmath2 has a word problem that is a context - free language if and only if @xmath2 is virtually free .",
    "their work has been extended by considering other formal language classes , see @xcite , @xcite , @xcite , and @xcite , and similar results have been obtained by considering the complement of the word problem , see @xcite and @xcite .    in this article",
    "we extend the definition of the word problem to languages of nested words .",
    "these were first introduced by alur and madhusudan in @xcite as a way to model programming languages such as html more efficiently .",
    "a nested word contains additional structure called a matching relation which specifies how letters in the word should be paired together .",
    "this additional structure means that the standard definition of word problem is not meaningful for nested words , so we provide an appropriate one . using this definition we study groups with a word problem that is a visibly pushdown language of nested words ( vpl ) .",
    "vpls have a close relationship to both regular languages and context - free languages .",
    "our main result is : + * theorem [ thm - nwp ] * a finitely generated group admits a visibly pushdown nested word problem if and only if it is virtually free . + in other words , groups with a vpl nested word problem are the same as those with a context - free word problem .",
    "however , we show that it can be more natural to consider nested words .",
    "for example in the free group any trivial word has a canonical matching relation associated to it , corresponding to successive cancellations of generators .",
    "furthermore , vpls have nicer closure properties than context - free languages . by proving some additional closure properties",
    "we demonstrate that trivial words for two different classes of virtually free groups also have a canonical matching relation .",
    "this in turn provides a nice correspondence between the group theoretic properties of direct / semi - direct product and closure properties of vpls .",
    "the paper is organized as follows . in the second section ,",
    "we provide the necessary background on formal languages .",
    "standard material on regular and context - free languages is presented using pushdown automata , which allows for an easy introduction to nested words and vpls .",
    "section three describes how formal languages are typically used to study the word problem . in the fourth and final section ,",
    "we introduce the nested word problem and use vpls to study the structure of virtually free groups .",
    "in this section , we review basic results on context - free languages , regular languages , and visibly pushdown languages .",
    "there are many different ways to describe context - free and regular languages , for example via grammars or regular expressions .",
    "our presentation uses a machine theoretic approach which is convenient for introducing visibly pushdown languages .",
    "let @xmath3 be a finite set , which we will call an alphabet . for each @xmath4 , we let @xmath5 is a function}. an element @xmath6 is called a word of length @xmath7 and denoted by @xmath8 , where @xmath9",
    ". for @xmath10 let @xmath11=a_1\\cdots a_i$ ] be the prefix of @xmath12 of length @xmath13 , and set @xmath11=w$ ] for @xmath14 .",
    "denote by @xmath15 the unique element @xmath16 of @xmath17 called the empty word .",
    "finally let @xmath18 be the set of all finite words over the alphabet @xmath3 .",
    "given an alphabet @xmath3 , a language over @xmath3 is any subset @xmath19 .    for @xmath20 to be a meaningful collection of words one would expect ( at least ) an algorithm to recognize when an arbitrary word @xmath21 lies in @xmath22 .",
    "in fact , one way to define formal languages classes is precisely by the type of algorithm which recognizes words .",
    "the notion of algorithm is formalized by defining machines ( automata ) , which can be thought of as reading in words and deciding whether or not they belong to the language .",
    "[ ch - def-1.10 ] a deterministic pushdown automaton ( pda ) m is a tuple + @xmath23 such that :    1 .",
    "@xmath3 is an alphabet , 2 .",
    "@xmath24 is a finite set of states , 3 .",
    "@xmath25 is a finite stack alphabet , 4 .",
    "@xmath26 is the start state , and @xmath27 is the bottom of stack symbol , 5 .",
    "@xmath28 is the set of accept states , 6 .",
    "@xmath29 is the transition function defined on a subset @xmath30 .",
    "+ it is deterministic with respect to epsilon transitions , i.e. @xmath31 for all @xmath32 .    to make transitions",
    ", a pda needs to know the current state @xmath33 , the input symbol being read in @xmath34 , and the current top of stack symbol @xmath35 .",
    "it transitions to a new state @xmath36 , erases @xmath35 , and replaces it on the top of the stack by a finite word @xmath37 .",
    "we think of @xmath38 as being added to the stack one letter at a time , starting with @xmath39 and ending with @xmath40 which becomes the new top of stack symbol . we interpret",
    "@xmath41 as the machine performing a stack operation without having to read an input symbol .",
    "[ id - of - pda ] given a deterministic pda @xmath42 , an instantaneous description of @xmath43 is a triple @xmath44 .",
    "for @xmath45 we let @xmath46 if @xmath47 .",
    "denote by @xmath48 the reflexive and transitive closure of @xmath49 .",
    "the language of words accepted by m is @xmath50    a language @xmath51 is deterministic context - free ( cf ) if there exists some pda @xmath43 such that @xmath52 .",
    "we denote the class of all deterministic context - free languages by @xmath53 .",
    "[ ch - ex-1.14 ]    consider the alphabet @xmath54 .",
    "the language of words given by @xmath55 is cf , where @xmath56 and @xmath57 .",
    "a pda accepting @xmath22 has stack alphabet @xmath58 with @xmath59 , and set of states @xmath60 with @xmath61 .",
    "the transition function satisfies :    @xmath62    the class of cf languages satisfies two important closure properties .    let @xmath63 be a cf language over the alphabet @xmath64 . the following languages are also cf :    1 .",
    "@xmath65 , 2 .",
    "@xmath66 , the prefix closure of @xmath22 .    by restricting stack operations of a pda",
    "we obtain an important subclass of cf languages called regular languages .",
    "a deterministic finite state automaton ( fsa ) is a pda m satisfying :    1 .",
    "@xmath67 , 2 .",
    "@xmath68 , i.e. epsilon transitions are not allowed .",
    "a language of words @xmath19 is called regular if there exists some fsa @xmath43 such that @xmath69 .",
    "we denote the class of all regular languages by @xmath70 .",
    "[ ch - ex-1.4 ]    consider the alphabet @xmath71 and the language of words given by @xmath72 .",
    "figure [ fig : fsa1 ] below depicts a fsa recognizing this language which demonstrates that it is regular .",
    "note that @xmath22 contains the language in example [ ch - ex-1.14 ] .",
    "the fsa reads in a number of @xmath34 s ( possibly none ) followed by a number of @xmath73 s ( possibly none ) , but can not keep track of how many letters it has read in since @xmath74 .",
    "regular languages have nice closure properties ( see @xcite or @xcite ) , some of which do not hold in general for cf languages .",
    "[ ch - thm-1.9 ] let @xmath22 , @xmath75 , and @xmath76 be regular languages over the alphabet @xmath64 .",
    "the following languages are also regular :    1 .",
    "@xmath77 , 2 .",
    "@xmath78 , 3 .",
    "@xmath79 , 4 .",
    "@xmath80 , the kleene - star closure of l , 5 .",
    "@xmath81 , 6 .",
    "@xmath65 , 7 .",
    "@xmath66 , the prefix closure of @xmath22 .",
    "properties 1 - 5 do not hold in general for cf languages .",
    "visibly pushdown languages ( vpls ) are a relatively new class of language introduced by alur and madhusudan in @xcite .",
    "vpls are comprised of nested words , which are words with an associated matching relation .",
    "one can interpret a vpl as being accepted by a particular type of pda over an extended alphabet .",
    "[ definition - nestedword ] a nested word is a pair @xmath82 with @xmath83 and @xmath84 is a subset of @xmath85 satisfying :    1 .",
    "( matching edges go forward ) @xmath86 , 2 .",
    "( uniqueness ) @xmath87 @xmath88 , @xmath89 and @xmath90 , 3 .",
    "( nesting property ) if @xmath91 and @xmath92 with @xmath93 , then either @xmath94 or @xmath95 .",
    "if @xmath96 then we say that @xmath97 is a call and @xmath98 is return .",
    "when @xmath99 @xmath97 is called a pending call , and similarly @xmath100 makes @xmath98 a pending return .",
    "if @xmath97 is neither a call nor a return , then it is called an internal symbol .",
    "let @xmath101 be the set of all nested words over @xmath64 .",
    "we may encode nested words over @xmath64 by extending the alphabet to the tagged alphabet @xmath102 .",
    "the alphabets @xmath103 and @xmath104 are disjoint copies of @xmath64 where each element @xmath32 is replaced with @xmath105 and @xmath106 , respectively .",
    "the idea is that we can tag the letters of any word @xmath21 to be either a call or return , or left as an internal symbol .",
    "we use @xmath107 to denote an element in the tagged alphabet , so @xmath108 .",
    "a tagged word @xmath109 can then be written as @xmath110 .",
    "[ lem - encode ] there is a natural bijection @xmath111 given by extending the map : @xmath112    therefore a language of nested words over @xmath64 is any subset @xmath113 .",
    "this leads to a convenient way of defining visibly pushdown languages , which are also called regular languages of nested words .",
    "given an alphabet @xmath64 , a visibly pushdown automaton ( vpa ) is a pda over the extended alphabet @xmath114 satisfying the additional property :    * @xmath115 is the transition function , which depends on the symbol @xmath116 , @xmath117    given an alphabet @xmath64 , a language of nested words @xmath113 is called visibly pushdown ( or a regular language of nested words ) if there exists a vpa @xmath118 such that @xmath119 .",
    "the following results emphasize how vpls are closely related to cf languages .",
    "[ thm - vpltocfl ] if @xmath113 is a visibly pushdown language , then it is also a cf language over the alphabet @xmath114 .",
    "[ thm - vplontocfl ] if @xmath51 is a cf language over the alphabet @xmath64 then there exists a visibly pushdown language @xmath120 such that @xmath121 is a surjection , where @xmath122 is the map that forgets the matching relation ; i.e. @xmath123 .",
    "this result relies on lemma [ lem - encode ] which establishes a correspondence between words over the tagged alphabet @xmath114 and nested words over @xmath64 . in other words , for a tagged word @xmath124 , there is only one way to interpret the tagging such that it satisfies the properties of being a matching relation .",
    "lemma [ lem - encode ] also provides a natural way to define operations on nested words by using standard word operations over the tagged alphabet .",
    "given an alphabet @xmath64 , we define concatenation of two words @xmath125 to be @xmath126 , and the prefix of a word @xmath127 of length @xmath13 to be @xmath128 $ ] . to define reversal consider a word @xmath129 with @xmath130 .",
    "the reversal of @xmath131 is given by @xmath132 , where @xmath133    using these operations for nested words , the following analogue of theorem [ ch - thm-1.9 ] is true for vpls .",
    "[ thm - closurevpl ]",
    "let @xmath22 , @xmath75 , and @xmath134 be vpls over the extended alphabet @xmath114 .",
    "the following languages are also visibly pushdown :    1 .",
    "@xmath77 , 2 .",
    "@xmath78 , 3 .",
    "@xmath135 , 4 .",
    "@xmath136 , 5 .",
    "@xmath137 , 6 .",
    "@xmath138 , 7 .",
    "@xmath139 , the prefix closure of @xmath22 .",
    "here we show how formal languages are typically used to study the word problem for groups . given a finitely generated group with presentation @xmath140 , consider the alphabet @xmath141 .",
    "there is a canonical monoid epimorphism @xmath142 taking @xmath21 to the group element @xmath143 that it represents . for any two words",
    "@xmath144 , the word problem asks for an algorithm to check whether @xmath145 in g. taking @xmath146 this is equivalent to asking for an algorithm that checks whether a given word @xmath21 is equal to the identity in @xmath2 .",
    "[ defn - wp ] given a formal language class @xmath0 , we say that a finitely generated group @xmath147 admits an @xmath0 word problem with respect to @xmath64 if there exists an @xmath148 such that @xmath149    for regular languages , anisimov showed that this notion is independent of the choice of generating set .",
    "[ lem - regwpcog ] let @xmath150 and @xmath151 be two presentations of a finitely generated group @xmath2 .",
    "then @xmath2 admits a regular word problem with respect to @xmath152 if and only @xmath2 admits a regular word problem with respect to @xmath153 .",
    "this means that having a regular word problem is truly a property of the group itself , as it does not depend on any particular presentation .",
    "it is often said the such a property is invariant under a change of generators .",
    "this allows for a complete characterization of groups with a regular word problem .",
    "[ thm - regfinwp ] a finitely generated group @xmath2 has a regular word problem if and only if @xmath2 is finite .",
    "muller and schupp proved analogous results for context - free languages in @xcite .",
    "for example , lemma 2 of @xcite shows that , for context - free languages , the notion of a group @xmath2 admitting a cf word problem is independent of the choice of generating set . before stating their main result , recall that a group @xmath2 is called _ virtually free _ if it contains a free subgroup of finite index .",
    "any free product @xmath154 where @xmath155 and @xmath156 are finite is virtually free .",
    "this follows from considering the natural map from @xmath154 to the direct product @xmath157 which is finite .",
    "nielsen showed in @xcite that we have the following exact sequence @xmath158 the kernel @xmath159 is the free group generated by all the commutators @xmath160 , which is the required finite index free group .",
    "the modular group @xmath161 is isomorphic to @xmath162 , hence virtually free by above .",
    "let @xmath2 be a finite group and @xmath163 a homomorphism .",
    "then @xmath164 is virtually free .",
    "the following is the main result of @xcite and it completely characterizes those groups @xmath2 admitting a context - free word problem .",
    "[ ch - thm-3.9 ] a finitely generated group @xmath2 has a cf word problem if and only if @xmath2 is virtually free .",
    "in this section we prove new results which allow us to study the word problem of a finitely generated group using visibly pushdown languages of nested words .",
    "we denote a presentation of @xmath2 by @xmath165 and recall that we take @xmath141 . also , recall that the word problem of @xmath2 is denoted by @xmath166 . a nested word",
    "may be denoted by @xmath82 with @xmath21 , or by @xmath109 . finally recall that @xmath113 denotes a language of nested words .",
    "first it is necessary to give an appropriate definition of the word problem for nested words .",
    "nested words have additional data of the matching relation meaning that the standard definition ( i.e. [ defn - wp ] here ) does not make sense ; lemma [ lem - encode ] says that we must work over the extended alphabet @xmath114 when thinking about nested words .",
    "[ def - vplwpdef ] let @xmath2 be a finitely generated group with presentation @xmath167 .",
    "we say that @xmath2 admits a nested word problem with respect to @xmath64 if there is a nested word language @xmath113 such that the forgetful map is a surjection @xmath168    [ rmk - nwpdefn ] we note that this definition includes groups with a regular word problem ( i.e. finite groups ) in the following sense .",
    "the regular language @xmath169 for a finite group @xmath2 can be considered as a vpl by identifying @xmath64 with the internal symbols of @xmath114 . in this case",
    "we have a natural bijection @xmath170 .",
    "of course , the full pre - image of @xmath166 under @xmath122 also maps to the word problem .",
    "in other words , the nested word problem for finite groups essentially ignores any matching relations .",
    "we may now state our main theorem which relates the nested word problem to groups with a context - free word problem .",
    "[ thm - nwp ] a finitely generated group @xmath2 admits a vpl nested word problem if and only if it is virtually free .",
    "if @xmath2 admits a nested word problem , then there exists a vpl @xmath113 such that @xmath122 is a surjection .",
    "note that @xmath122 is also a language homomorphism ( see @xcite ) . by theorem [ thm - vpltocfl ] ,",
    "@xmath22 is context - free over @xmath114 .",
    "it is known that context - free languages are closed under language homomorphism , hence @xmath171 is also context - free , and @xmath2 is virtually free by [ ch - thm-3.9 ] .",
    "conversely , if @xmath2 is virtually free there is a cf language @xmath22 such that @xmath172 .",
    "theorem [ thm - vplontocfl ] then gives a vpl @xmath113 mapping onto @xmath166 .    [ cor - changeofgen ]",
    "let @xmath173 and @xmath174 be two presentations for a finitely generated group @xmath2 .",
    "then @xmath2 admits a nested word problem with respect to @xmath152 if and only if @xmath2 admits a nested word problem with respect to @xmath153 .",
    "if @xmath2 admits a nested word problem with respect to @xmath152 , then @xmath2 is virtually free and @xmath175 is context - free .",
    "having a context - free word problem is independent of the choice of generating set , hence @xmath176 is also context - free .",
    "theorem [ thm - vplontocfl ] gives a vpl mapping onto @xmath176 so @xmath2 admits a nested word problem with respect to @xmath153 .",
    "the advantage of working with nested words is that matching relations provide an intuitive way of thinking about the word problem , as is shown by the next example .",
    "let @xmath177 and consider the free group on @xmath178 generators , @xmath179 .",
    "any word over @xmath64 that represents the identity can be reduced to the empty word by successively deleting pairs of the form @xmath180 or @xmath181 for @xmath182 , and this gives rise to a matching relation defining such words .",
    "a particular example is the nested word @xmath183 , where the matching relation is given by @xmath184 . for the word @xmath185 , the cancellation",
    "could be represented by the matching relation @xmath186 or @xmath187 .",
    "a canonical choice would be @xmath188 as it is associated to the path traveled by the word in the cayley graph of @xmath189 .",
    "this suggests that for the free group we can find a vpl such that @xmath122 actually provides a bijection with the word problem . in other words ,",
    "every word representing the identity in the free group is associated to a canonical matching relation .    [ prop - freegpvpl ]",
    "let @xmath190 . the free group on @xmath178 generators",
    "@xmath191 admits a vpl nested word problem where @xmath122 is a bijection .",
    "we construct a vpa over @xmath192 to recognize the matching relation defined by successive cancellations as described above .",
    "the vpa has states @xmath193 } , with accept states @xmath194 , initial state @xmath195 , and @xmath196 the fail state .",
    "the stack alphabet is @xmath197 and @xmath198 , implying that accepted words do not contain any pending calls or returns .",
    "there are transitions from @xmath199 to @xmath200 described below , but there are no transitions out of @xmath200 .",
    "the machine keeps track of adjacent trivial relations using the second component of @xmath199 as follows .",
    "consider the machine in state @xmath199 and reading in the next letter @xmath201 such that @xmath202 .",
    "it transitions to @xmath195 only if @xmath203 and @xmath204 ; otherwise it transitions to @xmath200 .",
    "this ensures the tagging corresponds to the cancellation associated to the path of the word in the cayley graph .    in the case where @xmath205 the action of the machine is determined by the tagging of @xmath201 .",
    "if an internal symbol is read the transition is to @xmath200 . on reading a call the underlying letter @xmath206",
    "is written to the stack and the machine transitions to @xmath207 .",
    "finally , on reading a return , @xmath208 is compared to the letter on the top of the stack . if the pair is of the form @xmath180 or @xmath181 for @xmath209 the machine transitions to @xmath207 ; if not the machine transitions to @xmath200 .",
    "it also transitions to the fail state on reading a return if the bottom of stack symbol @xmath210 is exposed .",
    "finally , we prove some additional closure properties of vpls . though somewhat ad - hoc , these properties - together with the above proposition [ prop - freegpvpl ] - enable us to construct further examples of bijections ( under @xmath122 ) between vpls and the word problem of certain virtually free groups .",
    "this establishes a direct correspondence between language theoretic closure properties and the group theoretic properties of direct and semi - direct product .",
    "we conjecture that a similar bijection can be constructed in general for any virtually free group , but this lies outside the scope of the current paper .",
    "consider @xmath211 and @xmath212 over the alphabets @xmath64 and @xmath213 respectively .",
    "the shuffle of @xmath75 and @xmath134 is denoted by @xmath214 and is given by @xmath215    [ thm - closurescramble ] visibly pushdown languages are closed under shuffle with regular languages ; i.e. if @xmath113 is a vpl and @xmath216 is regular then @xmath217 is a vpl .",
    "we construct a vpa @xmath218 that accepts @xmath217 .",
    "take @xmath219 such that @xmath119 , and @xmath220 such that @xmath221 .",
    "we think of @xmath118 and @xmath222 as operating side by side .",
    "the set of states of @xmath218 is the product @xmath223 , the initial state @xmath224 , and the stack alphabet and hierarchical accept states @xmath225 and @xmath226 respectively .",
    "the transition function @xmath227 for @xmath218 is then defined based on the symbol being read in .",
    "if in state @xmath228 and reading in @xmath107 , the transition is given by @xmath229 , where the appropriate stack operation takes place as it would have in @xmath118 .",
    "on reading @xmath230 while in state @xmath228 , the transition is given by @xmath231 .",
    "the set of accept states is @xmath232 , and a processed word is accepted if @xmath218 is in an accept state with stack contents @xmath233 .",
    "let @xmath234 be a language over @xmath64 .",
    "a finite re - labeling of @xmath22 is a map @xmath235 satisfying :    1 .",
    "@xmath236 , 2 .",
    "there exists a fsa @xmath237 over @xmath238 such that @xmath239    [ rmk - finiterelabeling1 ] to apply this definition to vpls it is necessary to add to condition 1 the requirement that @xmath240 , i.e. that the matching relation is preserved .",
    "[ rmk - finiterelabeling2 ] condition 2 says that @xmath241 may change the letters of any word @xmath242 but only in a controlled way in the sense that the re - labeling can not depend on an unbounded amount of information .",
    "[ thm - closurerelabeling ] visibly pushdown languages are closed under finite re - labeling ;",
    "i.e. if @xmath113 is a vpl and @xmath243 is a finite re - labeling then @xmath244 is a vpl .",
    "the proof is similar to that of lemma [ thm - closurescramble ] .",
    "the vpa @xmath118 accepting @xmath22 keeps track of the matching relation , while @xmath237 keeps track of the re - labeling .    using these properties we provide explicit constructions for vpls that are in bijection with the word problem for two classes of virtually free groups .",
    "[ thm - dpvpl ] let @xmath2 be a finite group .",
    "the direct product @xmath245 admits a vpl nested word problem where @xmath122 is a bijection .",
    "again take @xmath246 and consider @xmath179 with alphabet @xmath141 .",
    "for @xmath247 take the alphabet @xmath248 .",
    "denote by @xmath249 the union @xmath250 . by proposition [ prop - freegpvpl ]",
    "we have a vpl @xmath113 such that @xmath251 is a bijection , and by theorem [ thm - regfinwp ] we have a regular language @xmath252 .",
    "the language @xmath217 is a vpl by lemma [ thm - closurescramble ] and @xmath253 is a bijection .",
    "[ thm - sdpvpl ] let @xmath254 be the symmetric group on @xmath255 letters , and consider the canonical homomorphism @xmath256 where @xmath257 acts on @xmath189 by permuting generators .",
    "the semi - direct product @xmath258 admits a vpl nested word problem where @xmath122 is a bijection .    as above",
    "take @xmath259 for the word problem of @xmath189 and @xmath260 , with @xmath250 . the map @xmath261 induces a finite re - labeling @xmath262 .",
    "the language @xmath263 is a vpl by lemmas [ thm - closurescramble ] and [ thm - closurerelabeling ] and @xmath264 is a bijection .",
    "i am grateful to my advisor hans u. boden for guidance , encouragement , and many useful discussions .",
    "i would also like to thank kim p. huynh , caroline junkins , and kyle vincent for commenting on drafts of the paper .",
    "this work was partially supported by nserc ."
  ],
  "abstract_text": [
    "<S> in this article we provide a new perspective on the word problem of a group by using languages of nested words . </S>",
    "<S> these were introduced by alur and madhusudan as a way to model programming languages such as html . </S>",
    "<S> we demonstrate how a class of nested word languages called visibly pushdown can be used to study the word problem of virtually free groups in a natural way .    </S>",
    "<S> * ams msc classes : * 20f10,20e05,68q45,03d40 .    </S>",
    "<S> * key - words : * word problem , formal languages , visibly pushdown languages . </S>"
  ]
}