{
  "article_text": [
    "binary and nonbinary ldpc codes @xcite have attracted much attention in the research community in the past decade .",
    "ldpc codes are generally decoded by the iterative bp algorithm which performs remarkably well at moderate snr levels . due to their capacity achieving performance , ldpc codes are used in many current communications systems .",
    "they are also a promising candidate for future high data rate communication systems as well as for memory applications .",
    "however , bp suffers from a so called _ error floor _ problem at high snr .",
    "also , the heuristic nature of bp makes it difficult to analyze , and simulations are too time consuming for the prediction of the error floor .    in recent years ,",
    "the new approach of lp decoding is emerging as an attractive alternative to the bp decoding .",
    "lp decoding for binary ldpc codes was proposed by feldman _",
    "_ @xcite . in lp decoding ,",
    "the maximum likelihood decoding problem is modeled as an lp problem .",
    "in contrast to bp decoding , lp decoding relies on a well studied branch of mathematics which provides a basis for better understanding of the decoding algorithms .",
    "the work of @xcite extended the lp decoding framework of feldman _",
    "_ to nonbinary linear codes .",
    "binary and nonbinary lp decoding algorithms rely on standard lp solvers based on simplex or interior point methods .",
    "however , the time complexity of these solvers is known to be exponential in number of variables , which limits the use of lp decoding to codes of small block length . to decode longer codes ,",
    "a specialized low complexity lp decoding algorithm is necessary .",
    "such a low - complexity algorithm for binary ldpc codes was proposed by vontobel _",
    "_ in @xcite .",
    "the present authors , in @xcite , extended the binary lclp decoding algorithm @xcite to nonbinary codes .",
    "the complexity of the proposed nonbinary lclp decoding algorithm is linear in the block length .",
    "as opposed to binary lclp decoding , nonbinary lclp decoding is not directly related to nonbinary bp . due to this",
    ", the complexity of the check node calculations of nonbinary lclp decoding is exponential in the maximum check node degree . in this paper",
    ", we propose a modified bcjr algorithm for the check node processing of nonbinary lclp decoding .",
    "the proposed algorithm has complexity linear in the check node degree and allows for efficient implementation of nonbinary lclp decoding .",
    "we also propose an alternative state metric which can be used for faster check node processing .",
    "this paper is organized as follows .",
    "notation and background information is given in section ii .",
    "section iii reviews the nonbinary lclp decoding algorithm from @xcite .",
    "section iv contains the modified bcjr algorithm for check node processing and also explains the alternative state metric .",
    "section v presents the simulation results , and section vi concludes the paper .",
    "let @xmath3 be a finite ring with @xmath4 elements with @xmath5 as its additive identity .",
    "we define @xmath6 .",
    "let @xmath7 be a linear code of length @xmath8 over the ring @xmath3 , defined by @xmath9 , where @xmath10 is a @xmath11 parity - check matrix with entries from @xmath3 .",
    "@xmath12 is the rate of code @xmath7 .",
    "hence , the code @xmath7 is an @xmath13 $ ] linear code over @xmath3 .",
    "the row indices and column indices of @xmath10 are denoted by the sets @xmath14 and @xmath15 respectively .",
    "the @xmath16-th row of @xmath10 is denoted by @xmath17 and the @xmath18-th column of @xmath10 is denoted by @xmath19 .",
    "supp@xmath20 denotes the support of the vector @xmath21 . for each @xmath22 , let @xmath23 and for each @xmath24 , let @xmath25 .",
    "also let @xmath26 and @xmath27 .",
    "we define the set @xmath28 .",
    "moreover for each @xmath22 we define the local single parity check ( spc ) code @xmath29 for each @xmath24 , @xmath30 denotes the repetition code of the appropriate length and indexing .",
    "we also use variables @xmath31 and @xmath32 for all @xmath24 , @xmath33 ; also for @xmath24 , @xmath34 and similarly for @xmath22 , @xmath35 .",
    "we use the following mapping given in @xcite , @xmath36 by @xmath37 such that , for each @xmath38 @xmath39 we extend this mapping to define @xmath40 where , @xmath41    for @xmath42 , we define the function @xmath43 and its inverse @xmath44 we also use the soft - minimum operator introduced in @xcite . for any @xmath45 , @xmath46 ,",
    "the soft - minimum operator is defined as @xmath47 where @xmath48 with equality attained in the limit as @xmath49 .",
    "we assume transmission over a @xmath4-ary input memoryless channel and also assume a corrupted codeword @xmath50 has been received . here , the channel output symbols are denoted by @xmath51 .",
    "based on this , we define a vector @xmath52 where , for each @xmath53 , @xmath54 , @xmath55 here @xmath56 denotes the channel output probability ( density ) conditioned on the channel input .",
    "to develop a low complexity lp solver for nonbinary linear codes , the present authors in @xcite proposed a primal lp formulation which is equivalent to the original lp formulation proposed in @xcite .",
    "this primal lp formulation has an advantage that , it has one - to - one corresponding with the forney - style factor graph of the code and can be used to derive a suitable dual lp ( see section iv in @xcite ) .",
    "the dual lp is then `` softened '' by using the `` soft - min '' operator which is used to derive the update equations given in _",
    "lemma 6.1 _ in @xcite .",
    "the softened dual lp is given below .",
    "@xmath57 the update equation can be used to update the dual variable @xmath58 related to an edge @xmath59 while all other edge variables are held constant .",
    "the updated value of the @xmath58 is given by @xmath60 where , @xmath61 here the vector @xmath62 is the vectors @xmath63 where the subvector @xmath64 is excluded .",
    "similarly vector @xmath65 is obtained by excluding the subvector @xmath66 from @xmath67 .",
    "vector @xmath68 is same as @xmath69 where the @xmath16-th position is omitted and vector @xmath70 is obtained by excluding the @xmath18-th position from @xmath71 .",
    "now by updating all the edges @xmath59 with some schedule ( e.g. circular ) , the low - complexity lp decoding algorithm converges to the maximum of the * sdnblpd*. ( see _ lemma 6.2 _ in @xcite ) .",
    "the overall complexity of this algorithm is linear in the block length .",
    "the terms @xmath72 are related to the variable node ( vn ) @xmath24 and check node ( cn ) @xmath22 respectively . in the binary case , these terms can be efficiently calculated with the vn and cn calculations of the binary sum - product ( sp ) algorithm respectively @xcite . however , for nonbinary codes , the calculation of @xmath72 is not related to the vn and cn calculations of the nonbinary sp algorithm @xcite .",
    "hence , the cn calculations are carried out by processing exhaustively all of the possible codewords of the spc code @xmath73 .",
    "consequently , the complexity of calculating @xmath74 ( i.e of cn calculation ) is in exponential in the maximum check - node degree @xmath75 .",
    "in @xcite , the authors suggested that the equations for @xmath76 and @xmath77 can be rewritten as follows : @xmath78    it may be observed from the above equations that the calculation of the @xmath79 is in the form of the marginalization of a product of functions .",
    "hence it is possible to compute @xmath80 with the help of a trellis based variant of the sp algorithm ( i.e. bcjr - type algorithm ) .",
    "one possibility is to use the trellis of the binary nonlinear code @xmath81 .",
    "however , due to nonlinear nature of this binary code , the state complexity at the center of its trellis would be exponential in @xmath82 . here",
    "state merging is also not possible .",
    "hence there is no complexity advantage when we use the trellis of the binary nonlinear code @xmath83 .",
    "however if the trellis for the nonbinary spc code @xmath73 is used , then the state complexity at each trellis step is @xmath84 and is independent of @xmath82 .",
    "the branch complexity of this trellis is @xmath85 . in the following , we prove that the marginals @xmath76 and @xmath77 can be efficiently calculated with some modifications to the bcjr algorithm which uses the trellis of the nonbinary code @xmath73 . for this purpose",
    "we define the following for the trellis of the spc code @xmath73 :    1 .",
    "the set of all states at time @xmath86 2 .",
    "@xmath87 represents a branch in the trellis which is related to the symbol @xmath88 .",
    "since we have trellis for spc code , each state @xmath89 represents the sum of all symbols from @xmath90 to @xmath91 .",
    "we define @xmath92 5 .",
    "branch metric for each @xmath87 is @xmath93 .",
    "state metric for forward recursion , @xmath94 and state metric for backward recursion , @xmath95        [ fig : trellis_alpha ]        [ fig : trellis_alpha_bar ]    [ lm : bcjr_compute ] @xmath96 and @xmath76 can be efficiently computed on the trellis of the nonbinary code @xmath73 as follows , @xmath97 where state metrics @xmath98 and @xmath99 are calculated recursively from previous state metrics via @xmath100    first we prove that the state metrics can be computed recursively .",
    "the following may be observed from the definition of @xmath101 , @xmath102 hence @xmath103 can be calculated recursively from the previous state metrics .",
    "similarly , we can prove that the @xmath104 can be calculated from previous state metrics .",
    "now we prove the other part of the lemma .",
    "for ease of exposition we assume @xmath105 in the following .",
    "@xmath106 @xmath107 the right - hand side of ( [ eq : alpha_bar ] ) is , @xmath108 @xmath109 using ( [ eq : bcjr ] ) in ( [ eq : lc_lp ] ) we get ( [ eq : alpha_bar ] ) . equation ( [ eq : alpha ] ) can be proved in a similar manner .",
    "the overall algorithm works in two phases : in the first phase , the forward and backward state metrics are calculated and stored ; in the second phase the marginals @xmath96 and @xmath76 are computed with lemma  [ lm : bcjr_compute ] where the state metrics computed in first phase are utilized .",
    "it may be observed that the aforementioned algorithm is essentially the same as the bcjr algorithm except for the second phase where marginals are calculated .",
    "the calculations of the lemma  [ lm : bcjr_compute ] can be visualized with the help of the trellis diagram .",
    "figures [ fig : trellis_alpha ] and [ fig : trellis_alpha_bar ] shows the trellis for the nonbinary spc code of length @xmath110 which is defined over @xmath2 .",
    "@xmath90 to @xmath111 represent the symbols , and states are represented by @xmath112 , where @xmath113 indicates the symbol after which the state occurs and @xmath18 represents the sum of the symbols from @xmath90 to @xmath91 . the dotted branches in figure  [ fig : trellis_alpha ] represents the transitions related to the symbol @xmath114 .",
    "the state pairs which are connected by these branches are used for the calculation of the @xmath115 .",
    "similarly , the dotted branches in figure  [ fig : trellis_alpha_bar ] represent transitions related to the symbol @xmath116 . here",
    "the metrics of the corresponding state pairs are used for the calculation for the @xmath117 .",
    "the forward state metric @xmath118 as defined in ( [ eq : mu ] ) needs to be computed for the calculation of @xmath77 and can be reused for the calculation of @xmath76 . in ( [ eq : alpha_bar ] ) the algorithm needs to go through all branches @xmath119 for the calculation of @xmath76 . if the proposed algorithm is implemented in hardware or on multicore architectures , then the computation time for @xmath76 can be reduced by parallelizing its calculation .",
    "one possibility to parallelize calculation of @xmath76 is to define a new forward state metric @xmath120 , which can be computed in parallel with @xmath118 in the first phase and reduces the calculations required during the second phase of the algorithm . for this",
    "we define an alternative forward state metric as follows , @xmath121 @xmath122 it should be noted that due to the condition @xmath123 , @xmath124 can not be calculated recursively from @xmath125 ; instead it is calculated together with @xmath126 from @xmath127 as follows , @xmath128 with the help of the alternative forward state metric given in equation  ( [ eq : new_mu ] ) , the expression ( [ eq : alpha_bar ] ) of lemma  [ lm : bcjr_compute ] can be rewritten as @xmath129    the forward state metric @xmath130 requires the calculation and storage of an additional @xmath131 values for each state @xmath132 during the first phase .",
    "hence the storage requirement for the calculation of @xmath76 with ( [ eq : new_alpha_bar ] ) increases by a factor of @xmath4 .",
    "however , all additional state metric values can be calculated in parallel with @xmath118 which does not effect the run time of the first phase of the algorithm .",
    "also , the second phase of the algorithm needs to go through only @xmath4 states instead of @xmath133 branches , hence the overall run time for computing @xmath76 is reduced with the state metric @xmath120 .      in lemma",
    "[ lm : bcjr_compute ] , @xmath134 is assumed to be finite .",
    "however , for many practical applications we are interested in @xmath49 .",
    "according to lemma 6.3 of @xcite , for @xmath49 we again need to calculate @xmath135 to update the corresponding variables .",
    "however , the marginals @xmath77 and @xmath76 are here obtained as the limit of equation  ( [ eq : c_alpha ] ) and ( [ eq : c_alpha_bar ] ) respectively as @xmath49 , i.e. , @xmath136 thus @xmath96 and @xmath76 can be obtained by replacing all  product \" operations with ",
    "sum \" operations and similarly by replacing all  sum \" operations with  min \" operations in ( [ eq : c_alpha ] ) and ( [ eq : c_alpha_bar ] ) ( marginals with finite @xmath134 ) . in ( [ eq : c_alpha ] ) and ( [ eq : c_alpha_bar ] ) the marginalization is performed in the sum - product semiring .",
    "however for @xmath49 the marginalization is performed in the min - sum semiring and hence the marginals of ( [ eq : new_c ] ) can be computed with a trellis based variant of the min - sum algorithm . if we redefine the branch metric as @xmath137 and replace all  product \" operations with ",
    "sum \" operations and similarly replace all  sum \" operations with ",
    "min \" operations in equation  ( [ eq : mu ] ) , ( [ eq : nu ] ) , ( [ eq : alpha ] ) , ( [ eq : new_mu ] ) and ( [ eq : new_alpha_bar ] ) then the resulting equations can be used on the trellis of the nonbinary spc code @xmath73 to compute the marginals of ( [ eq : new_c ] ) .",
    "this trellis based variant of the min - sum algorithm is related to the viterbi algorithm .     and",
    "@xmath1 quaternary ldpc code under qpsk modulation .",
    "the performance of low complexity lp decoding is compared with that of the min - sum algorithm . ]",
    "[ fig : fer_all ]",
    "this section presents simulation results for low complexity lp decoding which uses the trellis based check node calculations described above .",
    "we consider @xmath49 for all simulations .",
    "we use the binary @xmath0 and @xmath1 mackay ldpc codes , but with parity - check matrix entries taken from @xmath2 instead of @xmath138 .",
    "these ldpc codes are @xmath139-regular codes ; hence there are @xmath140 nonzero entries in each row of their parity - check matrix .",
    "we set the second and third nonzero entry in each row to @xmath141 , and all other nonzero entries are set to 1 .",
    "furthermore , we assume transmission over the awgn channel where nonbinary symbols are directly mapped to quaternary phase - shift keying ( qpsk ) signals . we simulate up to @xmath142 frame errors per simulation point .",
    "the error - correcting performance of the @xmath0 and @xmath1 ldpc code is shown in figure  [ fig : fer_all ] where the frame error rate ( fer ) of the lclp decoding algorithm is compared with that of the min - sum ( ms ) algorithm .",
    "the ms algorithm also uses the trellis of the nonbinary spc code for check node processing .",
    "the maximum number of iterations is set to @xmath143 for both decoding algorithms . for the @xmath0 code , the fer of low complexity lp decoding is within @xmath144 db from that of ms algorithm and for @xmath1 code , it is within @xmath145 db .",
    "these results are comparable to that of the binary lclp decoding algorithm of @xcite .",
    "finally , it is important to note that these ldpc codes are significantly longer then the quaternary @xmath146 ldpc code tested in @xcite .",
    "in this paper , we proposed a modified bcjr algorithm for efficient check node processing in the nonbinary lclp decoding algorithm .",
    "the proposed algorithm has complexity linear in the check node degree .",
    "we also proposed an alternative state metric which can be used to reduce the run time of the proposed algorithm .",
    "the authors would like to thank p. o. vontobel for many helpful suggestions and comments .",
    "this work was supported in part by the claude shannon institute , ucd , ireland .",
    "99 m. c. davey and d. j. c. mackay ,  low density parity check codes over @xmath147 , \" _ ieee communication letters _ , vol .",
    "2 , no . 6 , pp . 165167 , june 1998 . j. feldman , m.  j. wainwright and d.  r. karger ,  using linear programming to decode binary linear codes , \" _ ieee transactions on information theory _",
    "3 , pp . 954972 , march 2005 .",
    "p. o. vontobel and r. koetter ,  towards low - complexity linear - programming decoding , \" in _ proc . of 4th international conference on turbo codes and related topics _ , munich , germany , april 37 , 2006 .",
    "m. f. flanagan , v. skachek , e. byrne , and m. greferath ,  linear - programming decoding of nonbinary linear codes , \" _ ieee transactions on information theory _ , vol .",
    "41344154 , september 2009 .",
    "m. punekar and m. f. flanagan ,  low complexity lp decoding of nonbinary linear codes , \" the _ forty - eighth annual allerton conference on communication , control , and computing _ ,",
    "september 29  october 1 , 2010 ."
  ],
  "abstract_text": [
    "<S> linear programming ( lp ) decoding is emerging as an attractive alternative to decode low - density parity - check ( ldpc ) codes . </S>",
    "<S> however , the earliest lp decoders proposed for binary and nonbinary ldpc codes are not suitable for use at moderate and large code lengths . to overcome this problem , vontobel _ et al . </S>",
    "<S> _ developed an iterative low - complexity lp ( lclp ) decoding algorithm for binary ldpc codes . </S>",
    "<S> the variable and check node calculations of binary lclp decoding algorithm are related to those of binary belief propagation ( bp ) . </S>",
    "<S> the present authors generalized this work to derive an iterative lclp decoding algorithm for nonbinary linear codes . </S>",
    "<S> contrary to binary lclp , the variable and check node calculations of this algorithm are in general different from that of nonbinary bp . </S>",
    "<S> the overall complexity of nonbinary lclp decoding is linear in block length ; however the complexity of its check node calculations is exponential in the check node degree . in this paper </S>",
    "<S> , we propose a modified bcjr algorithm for efficient check node processing in the nonbinary lclp decoding algorithm . </S>",
    "<S> the proposed algorithm has complexity linear in the check node degree . </S>",
    "<S> we also introduce an alternative state metric to improve the run time of the proposed algorithm . </S>",
    "<S> simulation results are presented for @xmath0 and @xmath1 nonbinary ldpc codes over @xmath2 . </S>"
  ]
}