{
  "article_text": [
    "logic and its axiomatization is fundamental to the whole field of computer science . traditionally , boolean logic is axiomatized in terms of conjunction ( and ) , disjunction ( or ) and complementation ( inv ) operators .",
    "virtually , all of today s digital computation is performed by using these operators with their associated laws .",
    "recently , it was shown that more efficient logic computation is possible by using a majority operator in place of conjunction and disjunction operators@xcite . moreover ,",
    "the properties of majority operators , such as stability , have been proved to be the best fit for solving important problems in computer science @xcite . regarding emerging technologies , majority operators are the natural logic primitives for several beyond - cmos candidates @xcite . in order to exploit the unique opportunity led by majority in computer applications ,",
    "a sound and complete set of manipulation rules is required .",
    "most of the recent studies on majority logic based computation consider ternary majority ( maj-3 ) operators because the axiomatization in this context is well understood . to unlock the real expressive power of majority logic , it is of interest to extend such axiomatization to @xmath0-ary ( @xmath0 odd ) majority operators ( maj-@xmath0 ) .",
    "we introduce in this paper a sound and complete axiomatization of maj-@xmath0 logic .",
    "our axiomatization is the natural extension of existing majority logic systems with fixed number of inputs .",
    "based on the majority axioms introduced in this work , computing systems can use at its best the expressive power of majority logic .",
    "the remainder of this paper is organized as follows .",
    "section [ back ] gives background and notations useful for the rest of this paper .",
    "section [ axiom ] introduces our sound and complete axiomatization for maj-@xmath0 logic .",
    "section [ disc ] discusses relevant applications of our majority logic system in logic optimization , boolean satisfiability , repetition codes and emerging technologies .",
    "section [ concl ] concludes the paper .",
    "we provide hereafter terms and notions useful in the rest of the paper . we start by introducing basic notation and symbols for logic operators and we continue by presenting special properties of boolean functions .",
    "we define a compact vector notation for boolean variables and discuss boolean algebras with a particular emphasis on maj-3/inv boolean algebra .      in the binary boolean domain ,",
    "the symbol @xmath1 indicates the set of binary values @xmath2 ; the symbols @xmath3 and @xmath4 represent the conjunction ( and ) and disjunction ( or ) operators ; the symbol @xmath5 represents the complementation ( inv ) operator ; and ` 0`/`1 ` represent the false / true logic values .",
    "alternative symbols for @xmath3 , @xmath4 and @xmath5 are @xmath6 , @xmath7 , and @xmath8 , respectively .",
    "a logic function @xmath9 is said to be _ self - dual _ if @xmath10 @xcite . by complementation , an equivalent _ self - dual _ formulation is @xmath11 .",
    "an @xmath0-input ( @xmath0 being odd ) majority function @xmath12 is defined on reaching a threshold @xmath13 of true inputs @xcite . for example , the three input majority function @xmath14 can be expressed as @xmath15 by @xmath16 .",
    "also @xmath17 is a valid representation for @xmath14 .",
    "the majority function is _ self - dual _",
    "@xcite . note that an @xmath12 operator filled with @xmath18 ` 0`/`1 ` collapses into a and/or operator @xcite .      for the sake of compactness",
    ", we denote a container ( vector ) of @xmath19 boolean variables by @xmath20 , where the notation starts from index @xmath21 and ends at index @xmath0 . when the actual length of the vector is not important , a simpler notation for @xmath20 is boldface .",
    "the element at index @xmath22 in vector @xmath20 is denoted by @xmath23 .",
    "the complementation of a vector @xmath20 is denoted by @xmath24 which means @xmath25 @xmath26 $ ] . with this notation",
    ", the aforementioned self - dual property becomes @xmath27 .",
    "for the sake of clarity , we give an example about the vector notation .",
    "let @xmath28 be 5 boolean variables to be represented in vector notation . here , the start / end indeces are @xmath29  /  @xmath30 , respectively , and the vector itself is @xmath31 .",
    "the elements of @xmath31 are @xmath32 , @xmath33 , @xmath34 , @xmath35 and @xmath36 .",
    "the standard binary boolean algebra ( originally axiomatized by huntington @xcite ) is a non - empty set @xmath37 subject to _ identity , commutativity , distributivity , associativity , and complement _ axioms over @xmath15 and @xmath5@xcite . for the sake of completeness",
    ", we report these basic axioms in eq .",
    "[ traditional ] .",
    "@xmath38    this axiomatization for boolean algebra is sound and complete @xcite .",
    "informally , it means that , logic arguments or formulas , proved by axioms in @xmath39 are valid ( soundness ) and all true logic arguments are provable ( completeness ) .",
    "more precisely , it means that , in the induced logic system , all theorems are tautologies ( soundness ) and all tautologies are theorems ( completeness ) .",
    "we refer the reader to @xcite for a more formal discussion on mathematical logic . in computer logic applications ,",
    "only sound axiomatizations are of interest @xcite .",
    "complete and sound axiomatizations are desirable @xcite .",
    "other boolean algebras exist , with different operators and axiomatizations , such as robbins algebra , freges algebra , nicods algebra , maj-3/inv algebra , etc . @xcite . in the immediate following , we give details on the maj-3/inv boolean algebra .      the maj-3/inv boolean algebra introduced in @xcite is defined over the set @xmath40 , where @xmath41 is the ternary majority operator and @xmath5 is the unary complementation operator .",
    "the following set of five primitive transformation rules , referred to as @xmath42 , is an _ axiomatic system _ for @xmath40 .",
    "all variables belong to @xmath1 .",
    "@xmath43    it has been shown that this axiomatization is sound and complete with respect to @xmath40 @xcite .",
    "the maj-3/inv boolean algebra finds application in circuit optimization and has already showed some promising results @xcite .",
    "note that early attempts to majority logic have already been reported in the 60 s @xcite but they mostly focused on three input majority operators . also , derived logic manipulation methods failed to gain momentum due to their inherent complexity .    while traditional boolean algebras can be naturally extended from 2 to @xmath0 variables , it is currently unclear how such a majority axiomatization extends to an arbitrary number of variables @xmath0 ( odd ) . in the following ,",
    "we address this question by proposing a natural axiomatization of maj-@xmath0/inv logic .",
    "in this section , we present the generic axiomatization of maj-@xmath0 logic .",
    "we first extend the set of five axioms presented in @xcite to @xmath0-variables , with @xmath0 being an odd integer .",
    "then , we show their validity in the boolean domain .",
    "finally , we demonstrate their completeness by inclusion of other complete boolean axiomatizations .",
    "the five axioms for maj-3/inv logic in @xcite deal with _ commutativity _ , _ majority _ , _ associativity _ , _ distributivity _ , and _",
    "inverter propagation _ laws .",
    "the following set of equations extends their domain to an arbitrary odd number @xmath0 of variables .",
    "note that all axioms , hold with @xmath44 .",
    "@xmath45    commutativity means that changing the order of the variables in @xmath12 does not change the result .",
    "majority defines a logic decision threshold ( over @xmath46 variables ) and a hierarchical reduction of majority operators with complementary variables .",
    "note that @xmath47 as boundary condition .",
    "associativity says that swapping pairs of variables between cascaded @xmath12 sharing @xmath48 variables does not change the result . in this context , it is important to recall that @xmath48 is an odd number if @xmath0 is an odd number .",
    "distributivity delimits the re - arrangement freedom of variables over cascaded @xmath12 operators .",
    "inverter propagation moves complementation freely from the outputs to the inputs of a @xmath12 operator , and _",
    "viceversa_.    for the sake of clarity , we give an example for each axiom over a finite @xmath0-arity .    commutativity with @xmath30 : + @xmath49",
    ".    majority with @xmath50 : + @xmath51 .",
    "associativity with @xmath30 : + @xmath52 .",
    "distributivity with @xmath50 : + @xmath53 .",
    "inverter propagation with @xmath54 : + @xmath55 .      to demonstrate the validity of these laws , and thus the validity of the maj-@xmath0 axiomatization",
    ", we need to show that each equation in @xmath56 is sound with respect to the original domain , i.e. , @xmath57 . , it is intended any @xmath58 with @xmath59 .",
    "indeed , any @xmath58 operator with @xmath60 can be emulated by a fully - fed @xmath12 operator with pairs of regular / complemented variables , e.g. , @xmath61 the following theorem addresses this requirement .    [ sound ]",
    "each axiom in @xmath56 is sound ( valid ) w.r.t . @xmath57 .",
    "* commutativity * since majority is defined on reaching a threshold @xmath13 of true inputs then it is independent of the order of its inputs .",
    "this means that changing the order of operands in @xmath12 does not change the output value .",
    "thus , this axioms is valid in @xmath57 .    * majority * majority first defines the output behavior of @xmath12 in the boolean domain .",
    "being a definition , it does not need particular proof for soundness .",
    "consider then the second part of the majority axiom .",
    "the recursive inclusion of @xmath62 derives from the mutual cancellation of complementary variables . in a binary majority voting system of @xmath0 electors , two electors voting to opposite values",
    "annihilate themselves .",
    "the final decision is then just depending on the votes from the remaining @xmath48 electors . therefore , this axiom is valid in @xmath57 .",
    "* associativity * we split this proof in three parts that cover the whole boolean space .",
    "thus , it is sufficient to prove the validity of the associativity axiom for each of these parts . *",
    "( 1 ) the vector @xmath63 contains at least one logic 1 and one logic 0 . * in this case , it is possible to apply @xmath64 and reduce @xmath12 to @xmath62 . if we remain in case ( 1 )",
    ", we can keep applying @xmath64 . at some point",
    ", we will end up in case ( 2 ) or ( 3 ) . *",
    "( 2 ) the vector @xmath63 contains all logic 1 . * for @xmath65 ,",
    "the final voting decision is 1 for both equations , so the equality holds . in case @xmath66 and the the vector @xmath63 contains all logic 1 , the majority operator collapses into a disjunction operator . for example , @xmath67 . here , the validity of the associativity axiom follows then from traditional disjunction associativity . *",
    "( 3 ) the vector @xmath63 contains all logic 0 . * for @xmath65 ,",
    "the final voting decision is 0 for both equations , so the equality holds . in case @xmath66 and the vector @xmath63 contains all logic 0 , the majority operator collapses into a conjunction operator .",
    "for example , @xmath68 . here",
    ", the validity of the associativity axiom follows then from traditional conjunction associativity .",
    "* distributivity * we split this proof in three parts that cover the whole boolean space .",
    "thus , it is sufficient to prove the validity of the distributivity axiom for each of these parts .",
    "note that the distributivity axiom deals with a majority operator @xmath12 where one inner variable is actually another independent majority operator @xmath12 .",
    "distributivity rearranges the computation in @xmath12 moving up the variables at the bottom level and down the variables at the top level . in this part of the proof",
    "we show that such rearrangement does not change the functionality of @xmath12 , i.e. , the final voting decision in @xmath69 .",
    "recall that @xmath0 is an odd integer greater than @xmath70 so @xmath71 must be an even integer . *",
    "( 1 ) half of @xmath72 values are logic 0 and the remaining half are logic 1 . * in this case , the final voting decision in axiom @xmath69 only depends on @xmath73 .",
    "indeed , all elements in @xmath72 annihilate due to axiom @xmath64 . in the two identities of @xmath69",
    ", we see that when @xmath72 annihilate the equations simplify to @xmath74 , according to the predicted behavior . *",
    "( 2 ) at least @xmath13 of @xmath72 values are logic 0 . * owing to @xmath64 ,",
    "the final voting decision in this case is logic 0 .",
    "this is because more than half of the variables are logic 0 matching the prefixed voting threshold . in the two identities of @xmath69",
    ", we see that more than half of the inner @xmath12 evaluate to logic 0 by direct application of @xmath64 .",
    "in the subsequent phase , also the outer @xmath12 evaluates to logic 0 , as more than half of the variables are logic 0 , according to the predicted behavior . *",
    "( 3 ) at least @xmath13 of @xmath72 values are logic 1 . *",
    "this case is symmetric to the previous one .    * inverter propagation * inverter propagation moves complementation from output to inputs , and _",
    "viceversa_. this axiom is a special case of the self - duality property previously presented .",
    "it holds for all majority operators in @xmath57 .    the soundness of @xmath56 in @xmath57 guarantees that repeatedly applying @xmath56 axioms to a boolean formula we do not corrupt its original functionality .",
    "this property is of interest in logic manipulation systems where functional correctness is an absolute requirement .      while soundness speaks of the correctness of a logic systems , completeness speaks of its manipulation capabilities . for an axiomatization to be complete , all possible manipulations of a boolean formula must be attainable by a sequence , possibly long , of primitive axioms .",
    "we study the completeness of @xmath56 axiomatization by comparison to other complete axiomatizations of boolean logic .",
    "the following theorem shows our main result .",
    "[ complete ] the set of five axioms in @xmath56 is complete w.r.t . @xmath57 .",
    "we first consider @xmath42 and we show that it is complete w.r.t .",
    "we need to prove that every valid argument , i.e. , @xmath40-formula , has a proof in the system @xmath42 . by contradiction , suppose that a true @xmath40-formula , say @xmath75 , can not be proven true using @xmath42 rules .",
    "such @xmath40-formula @xmath75 can always be reduced into a @xmath37-formula . indeed , recall that @xmath76 . using @xmath39 ,",
    "all @xmath37-formulas can be proven , including @xmath75 . however , every @xmath37-formula is also contained by @xmath40 , where @xmath3 and @xmath4 are emulated by majority operators .",
    "moreover , rules in @xmath42 with one input fixed to @xmath77 and @xmath70 behaves as @xmath39 rules ( eq . [ traditional ] ) .",
    "for example , @xmath78 with variable @xmath79 fixed to logic 1 ( 0 ) behaves as @xmath80 for disjunction ( conjunction ) .",
    "the other axioms follow analogously .",
    "this means that also @xmath42 is capable to prove the reduced @xmath81-formula @xmath75 , contradicting our assumption .",
    "thus @xmath42 is complete w.r.t . @xmath40 .",
    "we consider now @xmath56 .",
    "first note that @xmath57 naturally includes @xmath40 .",
    "similarly , @xmath56 axioms inherently extend the ones in @xmath42 .",
    "thus , the completeness property is inherited provided that @xmath56 axioms are sound . however , @xmath56 soundness is already proven in theorem [ sound ] .",
    "thus , @xmath56 axiomatization is also complete .",
    "being sound and complete , the axiomatization @xmath56 defines a consistent framework to operate on boolean logic via @xmath0-ary majority operators and inverters . in the following section",
    ", we discuss some promising applications in computer science of such majority logic system .",
    "in this section , we discuss relevant application of @xmath56 axiomatization .",
    "we first present the potential of logic optimization performed via maj-@xmath0 operators and inverters . then",
    ", we show how boolean satisfiability can be described in terms of majority operators and solved using @xmath56 .",
    "successively , we demonstrate the manipulation of repetition codes via @xmath56 under a majority logic decoding scheme .",
    "finally , we discuss the application of majority logic to several emerging technologies , such as quantum - dot cellular automata , spin - wave devices , threshold logic and others .",
    "logic optimization is the process of manipulating a logic data structure , such as a logic circuit , in order to minimize some target metric @xcite .",
    "usual optimization targets are size ( number of nodes / elements ) , depth ( maximum number of levels ) and interconnections ( number of edges / nets ) .",
    "more elaborated targets use a combination of size / depth / interconnections metrics , such as nodes@xmath82interconnections and others .",
    "theoretical results from computer science show that majority logic circuits are much more compact than traditional ones based on conjunction and disjunction operators @xcite . for example , majority logic circuits of depth 2 and 3 possess the expressive power to represent arithmetic functions , such as powering , multiplication , division , addition etc . , in polynomial size",
    "@xcite . on the other hand , the traditional and / or - based counterparts",
    "are exponentially sized @xcite .",
    "given the existence of very compact majority logic circuits , we need an efficient set of manipulation laws to reach those circuits automatically . in this context , the axiomatic system previously introduced is the natural set of tools addressing this need .",
    "for example , consider a logic circuit ( or boolean function ) @xmath83 . in circuit optimization ,",
    "a common problem is to minimize the number of elements while keeping short some input - output paths .",
    "suppose we want to minimize the number of majority operators while keeping the path @xmath84 to @xmath85 as short as possible , i.e. , one majority operator .",
    "the original circuit cost is 5 majority operators . to manipulate this formula , we first equalize the @xmath0-arity of the majority operators using axiom @xmath64 , i.e. , by adding a fake annihilated variable @xmath86 , as :    @xmath87    at this point",
    ", we can apply @xmath69 and save one majority operator as :    @xmath88 .",
    "finally , we can reduce the majority @xmath0-arity to its minimum via @xmath64 as :    @xmath89 .",
    "the resulting circuit cost is 4 majority operators .      as emerged from the previous optimization example ,",
    "an intuitive heuristic to optimize majority logic circuits consists of majority inflation rules ( from @xmath56 ) followed by majority reduction rules ( from @xmath56 ) .",
    "[ topcontrol ] depicts a simple optimization script and a brief description follows .",
    "* input : * majority logic network . + * output : * optimized majority logic network .",
    "[ topcontrol ]    first , the @xmath0-arity of all majority operators in the logic circuit is temporarily increased by using @xmath64 rule from right to left , for example @xmath90 .",
    "this operation unlocks new simplification opportunities .",
    "then , redundant majority operators are identified and deleted through @xmath91 rules .",
    "finally , the @xmath0-arity of all majority operators in the logic circuit is decreased to the minimum via @xmath64 rule from left to right .",
    "this approach naturally targets depth and size reductions in the majority logic network .",
    "however , it can be extended to target more elaborated metrics , such as @xmath92 or @xmath93 , where @xmath94 is the total number of nodes and @xmath95 is the number of inverters .",
    "the best metric depends on the considered technology for final implementation .      in order to prove the efficacy of the majority optimization heuristic in alg .",
    "[ topcontrol ] , we consider as case study the full - adder logic circuit .",
    "the full - adder logic circuit is fundamental to most arithmetic circuits .",
    "consequently , the effective optimization of full - adders is of paramount importance .",
    "a full - adder represents a three - input and two - output boolean function :    @xmath96    @xmath97    using just majority operators with @xmath0-arity equal to three , the best full - adder implementation counts 3 majority nodes , inverters apart , as depicted by fig .",
    "[ fam3 ] .",
    "-arity equal to 3 .",
    "complementation is represented by bubbles on the edges . ]",
    "however , a more compact majority logic network is possible by exploiting higher @xmath0-arity degrees and manipulating such majority logic circuit via @xmath56 .",
    "in particular , the critical operation is @xmath98 because @xmath99 is naturally represented by a single @xmath41 operator .",
    "so , for @xmath98 our optimization heuristic first expands the top majority operator from an @xmath0-arity of three    @xmath100    to an @xmath0-arity of 5 as    @xmath101 .",
    "after that , derived simplification rules from @xmath56 , called relevance rules in @xcite , reduce the number of majority operators to 2 as    @xmath102 .    in its graph representation , depicted by fig .",
    "[ fam5 ] , this representation of _ sum _ just consists of two majority operators as the internal @xmath103 is shared .",
    "complementation is represented by bubbles on the edges .",
    "]    moreover , @xmath104 is also generating the @xmath99 function which can be further shared .",
    "this means that the optimized logic circuit in fig .",
    "[ fam5 ] , counting just two majority operators , is a minimal implementation for the full - adder in terms of majority logic .        to provide a reference , an optimized and - inverter graph representation for the full - adder",
    "is depicted by fig .",
    "it counts 8 nodes and has been optimized using the state - of - the - art academic abc optimizer @xcite which manipulates and - inverter graphs .",
    "we can see that the majority logic circuit produced by our optimization heuristic is much more compact thanks to the majority logic expressiveness and to the properties of our axiomatic system , @xmath56 .",
    "the minimality of the majority logic circuit in fig .",
    "[ fam5 ] is formally proved in the following theorem .",
    "[ faopt ] the majority logic circuit in fig .",
    "[ fam5 ] for the full - adder has the minimum number of majority operators .",
    "the full - adder consists of two distinct functions .",
    "being distinct , they require at least two separate majority operators fed with different signals .",
    "the majority logic circuit in fig .",
    "[ fam5 ] actually consists of two majority operators thus being minimal .    on top of having the minimum number of operators , the majority network in fig .",
    "[ fam5 ] has lower @xmath92 metric ( equal to 8) as compared to the majority network in fig .",
    "[ fam3 ] ( equal to 9 ) .",
    "the number of inverters is 2 in both cases .",
    "we see that the axiomatic system @xmath56 can be used to optimize majority logic circuits and produces excellent results .",
    "as the @xmath56 rules are simple enough to be programmed on a computer , maj-@xmath0 logic optimization can be automated and applied to large systems .",
    "boolean _ satisfiability _ ( sat ) is the first known np - complete problem @xcite .",
    "traditionally , sat is formulated in _",
    "conjunctive normal form _ ( cnf ) @xcite .",
    "recently , majority logic has been considered as an alternative to cnf to speed - up sat @xcite . in @xcite ,",
    "a _ majority normal form _ ( mnf ) has been introduced , which is a majority of majorities , where majorities are fed with literals , ` 0 ` or ` 1 ` .",
    "the mnf - sat problem is np - complete in its most general definition @xcite .",
    "however , there are interesting restrictions of mnf whose satisfiability can instead be decided in polynomial time .",
    "for example , when there are no mixed logic constants appearing in the mnf , the mnf - sat problem can be solved in polynomial time .",
    "this result is valid not just for mnf but for majority logic circuits in general @xcite .    in order to solve the general problem of majority logic satisfiability , and thus of mnf - sat , a set of manipulation rules",
    "is needed .",
    "indeed , the core of most modern sat solving tools make extensive use of boolean logic axioms . when dealing with majority logic , our proposed axiomatic system @xmath56 is the natural tool to operate on mnf forms , or alike , and prove their satisfiability .    for the sake of clarity , we give an example of majority sat solving via @xmath56 laws .",
    "we consider not just an mnf , which is a two level logic representation form , but a general formula in @xmath57 .",
    "our example is the _ unsat _ function @xmath105 . in oder to check the satisfiability of @xmath85 , a majority sat solver",
    "first tries to enforce at least 3 over 5 logic ` 1 ` in the top @xmath106 @xcite .",
    "otherwise , a conflict in the input assignment appears .",
    "if all possible input assignments lead to a conflict the function is declared unsatisfiable @xcite .",
    "let us first focus on the element @xmath107 . here , even before looking for possible assignments ,",
    "our axiom @xmath108 re - arranges the variables as @xmath109 . in this formula ,",
    "our axiom @xmath64 directly annihilates @xmath110 and @xmath111 leading to @xmath112 .",
    "furthermore , @xmath64 still applies twice corresponding to @xmath113 and then @xmath77",
    ". we can substitute this to the original formula as @xmath114 which symplifies the sat problem .",
    "now , we need both @xmath115 and @xmath111 to be ` 1 ` in order to do avoid an immediate conflict .",
    "this means @xmath116 and @xmath117 .",
    "however , this assigment evaluates always to ` 0 ` the term @xmath118 generating a conflict for all input patterns .",
    "thus , the original formula is declared unsatisfiable .",
    "as we can see , our majority logic axiomatic system @xmath56 is the ground for proving the satisfiability of formula in @xmath57 . without @xmath56 ,",
    "sat tools would need to decompose all majority operators in and / ors because with conjunctions and disjunctions the classic set of boolean manipulation rules apply .",
    "however , such decomposition would nullify the competitive advantage enabled by the majority logic expressiveness . in this scenario ,",
    "our @xmath56 rules fill the gap for manipulating majority operators natively .",
    "repetition codes are basic error - correcting codes .",
    "the main rationale in using repetition codes is to transmit a message several times over a noisy channel hoping that the channel corrupts only a minority of the bits@xcite . in this scenario ,",
    "decoding the received message via majority logic is the natural way to correct transmission errors .",
    "consider safety - critical communication systems .",
    "it is common to have hierarchical levels of coding to decrease the chance of error and thus resulting in system malfunction .",
    "when applied on several levels , majority logic decoding is nothing but a majority logic circuit .",
    "the maximum number of cascaded majority operators determines the decoding performance .",
    "we want to maximize the decoding performance while keeping the error probability low .",
    "in this scenario , we can use our axiomatic system @xmath56 to explore different tradeoffs in depth / size manipulation of the corresponding majority decoding scheme .    for the sake of clarity",
    ", we give an example of the optimization for majority logic decoding via @xmath56 .",
    "consider a safety - critical communication system sending the same binary message @xmath119 over 5 different channels @xmath120 , @xmath121 , @xmath122 , @xmath123 and @xmath124 .",
    "each channel is affected by different levels of noise requiring just 1 repetition for @xmath120 , @xmath121 , @xmath122 , and @xmath123 but 5 repetitions for @xmath124 .",
    "suppose also the communication over channel 5 is much slower than in the other channels .",
    "the final decoded message is the majority of the each decoded message per channel .",
    "if we name @xmath23 the decoded message @xmath119 for @xmath22-th channel and @xmath125 the final decoded message , the system can be represented in majority logic as @xmath126 .",
    "note that for @xmath127 , @xmath128 , @xmath129 , @xmath130 the decoded message is actually identical to the received message because only 1 repetition is sent over the channels .",
    "the element @xmath131 is the only one needing further majority decoding , namely @xmath132 where @xmath133 are the received @xmath119 messages over channel @xmath124 .",
    "the final system is then expressable as @xmath134 . to decode the final message @xmath125 , the critical element for perfomance is @xmath135 , with @xmath136 being the latest arriving message to be processed . in this context",
    ", we can use @xmath69 axiom to redistribute the decoding operations and obtain an improvement in performance , which is not a trivial process .",
    "the idea is to push to the top majority level @xmath133 variables , with the highest possible @xmath22 index . for this purpose ,",
    "axioms @xmath69 transforms @xmath134 into @xmath137 . in this latter model of majority decoding ,",
    "most of the computation is performed in advance before the late messages @xmath138 and @xmath136 arrive .",
    "this means that , when the late @xmath136 arrives , there is need for just one level of majority computation and not two as in the initial model .",
    "majority gates with more than @xmath139 inputs have been simulated and implemented for a variety of non - cmos technologies .",
    "a further generalization of majority gates is threshold logic gate @xcite , which performs weighted sum of multiple inputs and once the sum is more than a pre - determined threshold , the output is true . as such",
    ", a threshold logic gate can be configured to function as a majority logic gate . in the following ,",
    "we describe a few published works that describes majority or threshold gates with more than @xmath139 inputs .",
    "majority logic gates were experimentally demonstrated with _ quantum - dot cellular automata _ ( qca ) in  @xcite and  @xcite . for facilitating qca circuit design ,",
    "a tool named qcadesigner is developed  @xcite .",
    "simulation of @xmath106 gate using qcadesigner is presented in several papers , including  @xcite .",
    "[ maj5impl ] depicts two possible qca implementations for a @xmath106 gate .",
    "gate in qca technology @xcite . ]    applications of large majority gates towards efficient adder construction were also discussed .",
    "for example , a @xmath140 has also been proposed .",
    "[ maj7impl ] depicts a possible qca implementation for a @xmath106 gate .",
    "gate in qca technology @xcite . ]",
    "note that a @xmath106 gate , a @xmath41 gate and an inverter gate are sufficient to build a full - adder , as highlighted by the theoretical case study in section [ optimization ] . in this scenario ,",
    "the proposed @xmath56 axiomatic system is key to unveil such efficient circuit implementations in qca nanotechnology , where majority gates are the logic primitives for computation .",
    "very recently , a majority logic circuit based on domain - wall nanowires has been proposed in  @xcite .",
    "the circuit is used for computing binary additions efficiently and can be shown to scale for majority gates with arbitrary number of inputs .",
    "all - spin logic gates are originally proposed in  @xcite .",
    "majority logic gates using all - spin logic is proposed in  @xcite . there ,",
    "layout of @xmath41 gate using all - spin logic is shown and it is noted that majority gates with larger number of inputs can also be implemented . indeed , a high fan - in majority gate is realizable by a simple superposition of spin - waves with same amplitude but different phases @xcite .",
    "[ cswd ] depicts a sketch of a high fan - in majority gate in spin - wave technology .        in  @xcite , a _",
    "spin - memeristor threshold logic _",
    "( smtl ) gate using memristive crossbar array is proposed . there , an array of smtl gates is designed and simulated with experimentally validated device model characteristics . by varying the threshold input count , different possible mappings are demonstrated with good performance improvement over cmos fpga structures .    a programmable cmos / memristor threshold logic is proposed in  @xcite . a @xmath141-input threshold logic gate is experimentally demonstrated using ag / a - si / pt memristive devices .",
    "they also propose a threshold logic network similar to  @xcite with programmable fan - in .",
    "it is to be noted that none of the aforementioned implementations employed any automated synthesis flow to exploit majority gates with larger than @xmath139 inputs .",
    "thus , the potential of compact realization of diverse applications , even if feasible with these technologies , is hardly experimented due to the lack of an efficient synthesis flow .",
    "our proposed sound and complete axiomatization aims at filling this gap .",
    "note that the aforementioned examples are just few of the possible applications of @xmath0-ary majority logic and of its sound and complete axiomatization .",
    "more opportunities exist in other fields of computer science but their discussion is out of the scope of this paper .",
    "in this paper , we proposed a sound and complete axiomatization of majority logic . stemming from previous work on maj-3/inv logic , we extended fundamental axioms to arbitrary @xmath0-ary majority operators .",
    "based on this general set of axioms , computer applications can now fully exploit the expressive power of majority logic .",
    "we discussed the potential impact in the fields of logic optimization , boolean satisfiability , repetition codes and emerging technologies . from a general standpoint",
    ", the possibility of manipulating logic in terms of majority operators paves the way for more efficient computer applications where the core reasoning tasks are performed in the boolean domain .",
    "in particular , possible directions for future work include the development of ( i ) a complete majority satisfiability solver and ( ii ) a majority synthesis tool targeting nanotechnologies .",
    "the authors would like to thank prof .",
    "maciej ciesielski for valuable discussions .",
    "this research was supported by erc-2009-adg-246810 .",
    "y. hao , et al . _",
    "energy efficient in - memory machine learning for data intensive image - processing by non - volatile domain - wall memory _",
    ", ieee asia and south pacific design automation conference ( asp - dac ) , 2014 .",
    "r. zhang , p. gupta , n. k. zhong , jha , _ threshold network synthesis and optimization and its application to nanotechnologies_. ieee transactions on computer - aided de - sign of integrated circuits and systems 24 , 107 - 118 ( 2005 ) .                      ,  a theorem for deriving majority - logic networks within an augmented boolean algebra , \" in _ ire transactions on electronic computers _ , vol .",
    "ec-9 , no .  3 , pp .  338342 , sept .",
    "1960 , doi : 10.1109/tec.1960.5219856 ."
  ],
  "abstract_text": [
    "<S> manipulating logic functions via majority operators recently drew the attention of researchers in computer science . </S>",
    "<S> for example , circuit optimization based on majority operators enables superior results as compared to traditional synthesis tools . </S>",
    "<S> also , the boolean satisfiability problem finds new solution approaches when described in terms of majority decisions . to support computer logic applications based on majority , a sound and complete set of axioms </S>",
    "<S> is required . </S>",
    "<S> most of the recent advances in majority logic deal only with ternary majority ( maj-3 ) operators because the axiomatization with solely maj-3 and complementation operators is well understood . </S>",
    "<S> however , it is of interest extending such axiomatization to @xmath0-ary majority operators ( maj-@xmath0 ) from both the theoretical and practical perspective . in this work </S>",
    "<S> , we address this issue by introducing a sound and complete axiomatization of maj-@xmath0 logic . </S>",
    "<S> our axiomatization naturally includes existing maj-3 and maj-5 axiomatic systems . </S>",
    "<S> based on this general set of axioms , computer applications can now fully exploit the expressive power of majority logic .    </S>",
    "<S> _ index terms _ majority logic , boolean algebra , axiomatization , soundness , completeness . </S>"
  ]
}