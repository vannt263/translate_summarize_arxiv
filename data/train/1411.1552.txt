{
  "article_text": [
    "uncertainties are often modeled using stationary gaussian fields @xcite . efficient generation of samples from stationary gaussian fields is crucial for using monte carlo techniques , which are the backbone of uncertainty quantification simulations , in studying behavior of systems subject to uncertainties .",
    "there are a few numerical techniques for sampling gaussian random fields on a grid .",
    "for instance , one can find a square - root of the corresponding covariance matrix using cholesky s decomposition and then multiply the square - root by a vector of independent gaussian random variables to simulate a sample .",
    "this is an exact method but it is rarely used in applications due to the high cost of cholesky s decomposition in high dimensions .",
    "another possibility is the karhunen - loeve expansion ( see , e.g. @xcite ) , which requires knowledge of eigenvalues and eigenfunctions of the covariance operator for the gaussian random field . in many cases of practical interest",
    "the eigenvalue problem has to be solved numerically which can be expensive , especially when eigenvalues decay slowly . also , this method is not exact .",
    "the fast and exact method of generating large samples from stationary gaussian fields on regular grids is the circulant embedding method ( cem ) @xcite which is widely used in various uncertainty quantification ( uq ) applications such as groundwater flow simulation @xcite , weather field forecasting @xcite , and liquid composite molding processes @xcite .",
    "the two main drawbacks of cem are ( i ) the requirement imposed on the grid to be regular while irregular grids of a block structure naturally appear in many applications ( see three typical examples below ) and ( ii ) the need to deal with non - positive definiteness of circular embedding matrices which often occur in practical applications . the remedies for the latter were considered in @xcite , here we deal with the first deficiency of cem . to this end",
    ", we propose a new block circulant embedding method ( bcem ) .",
    "let us clarify the matter using the following three examples which come from sampling a random permeability field in groundwater flow simulations .",
    "[ ex : fem2d ] _ triangular finite element with a quadrature point located at the barycentre of the triangle .",
    "_    consider generation of a stationary log - normal random permeability field to be used in simulations based on triangular finite elements and the gaussian quadrature rule of degree 1 within a rectangular domain .",
    "assume that the rectangular domain consists of small rectangles ( see figure [ fig:2d_fem ] ) and that there is no overlap of these rectangles . to perform the finite element simulation , it is sufficient to have sampled values of the permeability field at the quadrature points only ( see the black circles in fig .",
    "[ fig:2d_fem ] ) .",
    "the covariance matrix of the corresponding stationary gaussian random field at all quadrature ( black ) points is symmetric block - toeplitz , but the blocks themselves are not symmetric .",
    "hence , in order for the standard cem to be applicable , 7 extra ( i.e. , artificial from the point of view of sampling permeability values sufficient for the finite element simulation ) points should be added to each rectangle ( the gray circles in figure [ fig:2d_fem ] are regular grid points involving black circles ) .",
    "in contrast to cem , the new method - bcem - allows to sample values at the required points ( black circles ) without adding extra nodes to the grid and it does so in a very efficient way as we will see in the next sections .    7.5 ( , ) (+ , ) ; ( , ) (,+ ) ; ( , + ) (+,+ ) ; ( + , ) (+,+ ) ; ( , + ) (+ , ) ; at ( + 1/3,+1/3)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 2/3,+2/3)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; ( , ) (+ , ) ; ( , ) (,+ ) ; ( , + ) (+,+ ) ; ( + , ) (+,+ ) ; ( , + ) (+ , ) ; at ( + 0/3,+0/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 0/3,+1/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 0/3,+2/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/3,+0/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/3,+1/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/3,+1/3)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 1/3,+2/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 2/3,+0/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 2/3,+1/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 2/3,+2/3)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 2/3,+2/3)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ;    .comparison of the number of nodes needed by bcem and cem in example  [ ex : mlmc ] . [ cols=\"^,^,^,^\",options=\"header \" , ]     [ ex : mlmc ] _ cell - centered finite volume discretization in multilevel monte carlo ( mlmc ) computation . _    the multilevel monte carlo ( mlmc ) method is a monte carlo technique , which can give a substantial reduction of computational complexity in comparison with the standard monte carlo method thanks to making use of a hierarchical sampling @xcite . in the mlmc algorithm ,",
    "when computing the difference of quantities on two consecutive grids with mesh sizes @xmath0 and @xmath1 , the pair of fine and coarse random samples must come from the same realization of the random field .",
    "in the cell - centered finite volume discretization , which uses permeability values at the centers of cells , the locations of coarse random filed do not coincide with nodes on the fine grid ( see fig .",
    "[ fig:2d_mlmc ] ) . in this case",
    "there exists a uniform grid with the mesh size @xmath2 containing both fine and coarse points , and hence it is possible to generate the required pair from the same realization by applying cem on this finer uniform grid ( grey circles in fig .",
    "[ fig:2d_mlmc ] ) .",
    "however , this leads to an increase of both simulation time and memory requirements and , hence , to deterioration of the mlmc performance .",
    "table [ tab : mlmc ] compares the number of nodes at which the random field actually needed to be sampled for mlmc ( which will be the same as the number of nodes used in bcem ) against the ones on the fine , regularized grid required by cem .",
    "the portion of unused values grows as dimension increases .",
    "the benefit of bcem is that exploiting the block - regular structure of grids used in mlmc , it allows us to sample at the points used in finite volume simulation without need to regularize the grid by adding extra points , which can result in substantial savings of both computational time and memory in comparison with applying cem .",
    "7.5 ( , ) (+ , ) ; ( , ) (,+ ) ; ( , + ) (+,+ ) ; ( + , ) (+,+ ) ; ( + 1/2,)(+1/2,+ ) ; ( , + 1/2)(+,+1/2 ) ; ( , )  ( + 1/2 , ) node[black , midway , yshift=-0.6 cm ] @xmath0 ; ( , -.2 ) ",
    "( + , -.2 ) node[black , midway , yshift=-0.6 cm ] @xmath1 ; at ( + 1/4,+1/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 3/4,+1/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 1/4,+3/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 3/4,+3/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 2/4,+2/4)[circle , draw , inner sep=0pt , minimum size=4pt ] ; ( , ) (+ , ) ; ( , ) (,+ ) ; ( , + ) (+,+ ) ; ( + , ) (+,+ ) ; at ( + 0/4,+0/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 0/4,+1/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 0/4,+2/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 0/4,+3/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/4,+0/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/4,+1/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/4,+1/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 1/4,+2/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/4,+3/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 1/4,+3/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 2/4,+0/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 2/4,+1/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 2/4,+2/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 2/4,+2/4)[circle , draw , inner sep=0pt , minimum size=4pt ] ; at ( + 2/4,+3/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 3/4,+0/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 3/4,+1/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 3/4,+1/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( + 3/4,+2/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 3/4,+3/4)[circle , fill = gray , inner sep=0pt , minimum size=8pt ] ; at ( + 3/4,+3/4)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; ( , )  ( + 1/4 , ) node[black , midway , yshift=-0.6 cm ] @xmath2 ;    [ ex : cond ] _ conditional random field generation on block regular grids . _    the conditional random field generation based on cem was considered in @xcite . in this approach one",
    "builds a symmetric matrix of the form @xmath3,\\ ] ] where @xmath4 is a ( block ) circulant matrix , and @xmath5 is a covariance matrix of filed values at locations of measurements , and generate random vectors using its square root @xmath6,\\ ] ] where @xmath7 and @xmath8 is a matrix such that @xmath9 .",
    "here @xmath10 denotes a discrete fourier transform matrix , and @xmath11 is a diagonal matrix whose entries are eigenvalues of @xmath12 .",
    "the computational costs of forming @xmath13 and @xmath14 are @xmath15 flops , @xmath16 flops , and @xmath17 flops , respectively .",
    "bcem can also be used for generation of random fields conditioned on observations .",
    "as with the unconditional sampling discussed above , applications of conditional sampling often deal with grids which are not regular but have a regular block structure ( see , e.g. conditional mlmc simulation in @xcite ) .",
    "since bcem requires smaller @xmath18 value as it does in the unconditional case , bcem in the conditional random field setting can outperform cem .",
    "bcem also has the remarkable feature that it is paralellizable in contrast to the standard cem which is a serial algorithm ( of course , cem can exploit parallelism of the fast fourier transform ( fft ) but bcem s main ingredient is also fft and it can benefit from fft parallelism as well ) , i.e. , bcem has a further significant advantage over cem .",
    "the rest of the paper is organized as follows . in section  [ section:1d ]",
    "we illustrate the idea of bcem in the case of one - dimensional space . in section  [ section : md ]",
    "we present a multi - dimensional bcem .",
    "computational complexity of bcem is discussed in section  [ sec : comp ] , where some numerical experiments comparing bcem with the standard cem show that already in 2d bcem can be three time faster in sample generation than cem .",
    "to illustrate the idea of bcem , we start with presenting it in the 1d case .",
    "( 0,0)(6,0 ) ; ( 6,0)(8,0 ) ; ( 8,0)(10,0 ) ; ( 0,-.1 ) node[below]@xmath19  ( 0,0.1 ) ; ( 2,-.1 ) node[below]@xmath20  ( 2,0.1 ) ; ( 4,-.1 ) node[below]@xmath21  ( 4,0.1 ) ; ( 6,-.1 ) node[below]@xmath22  ( 6,0.1 ) ; ( 8,-.1 ) node[below , xshift=.2cm]@xmath23  ( 8,0.1 ) ; ( 10,-.1 ) node[below , xshift=.1cm]@xmath24  ( 10,0.1 ) ; at ( 0.33,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 0.33,0)[above]@xmath25 ; at ( 1.67,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 1.67,0)[above]@xmath26 ; at ( 2.33,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 2.33,0)[above]@xmath27 ; at ( 3.67,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 3.67,0)[above]@xmath28 ; at ( 4.33,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 4.33,0)[above]@xmath29 ; at ( 5.67,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 5.67,0)[above]@xmath30 ; at ( 8.33,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 8.33,0)[above , xshift=.3cm]@xmath31 ; at ( 9.67,0)[circle , fill = black , inner sep=0pt , minimum size=4pt ] ; at ( 9.67,0)[above , xshift=.3cm]@xmath32 ; at ( 1.0,0)[below]@xmath33 ; at ( 3.0,0)[below]@xmath34 ; at ( 5.0,0)[below]@xmath35 ; at ( 9.0,0)[below , xshift=.3cm]@xmath36 ; at ( 1,0)[circle , fill = gray , inner sep=0pt , minimum size=4pt ] ; at ( 3,0)[circle , fill = gray , inner sep=0pt , minimum size=4pt ] ; at ( 5,0)[circle , fill = gray , inner sep=0pt , minimum size=4pt ] ; at ( 9,0)[circle , fill = gray , inner sep=0pt , minimum size=4pt ] ;    consider a uniform grid @xmath37 on the interval @xmath38 $ ] with a grid size @xmath39 , and sets of points @xmath40 $ ] with @xmath41 , where @xmath42 ( see figure [ fig:1d_grid ] ) .",
    "note that @xmath43 are independent of the index @xmath44 .",
    "the grid @xmath45 is , in general , non - uniform ( it is uniform if @xmath46 ) but it is block - uniform , i.e. , the distribution of points in each sub - interval ( in other words , block ) @xmath47 is the same .",
    "let @xmath48 , @xmath49 , be a stationary gaussian random field with zero mean and covariance function @xmath50 .",
    "our aim is to sample from @xmath48 on the grid @xmath51 .",
    "if @xmath51 is not a grid of equispaced points , then the covariance matrix of the field @xmath48 on @xmath51 is not toeplitz . in this case",
    "the standard cem @xcite can not be applied to this covariance matrix in order to perform highly efficient computing of its square - root with subsequent generation of the required gaussian field samples .",
    "the simplest remedy is to extend the non - uniform grid @xmath51 to the uniform grid @xmath52 by adding points ( see figure  [ fig:1d_grid ] ) and then apply the standard circulant embedding method , but this approach results in a substantial increase of computational costs . in this paper",
    ", we propose a different approach which does not need in adding points to @xmath51 and which is cheaper than the use of the standard cem on the extended uniform grid @xmath52 .",
    "consider the covariance matrix @xmath53 of the random vector @xmath54 , @xmath55 , written in the block matrix form : @xmath56_{n\\ell \\times n\\ell},\\ ] ] where each block matrix @xmath57 is defined as @xmath58_{1 \\leq j , l \\leq \\ell}.\\ ] ]    now note that , by construction , @xmath59 property ( [ eq : property_block_toeplitz ] ) implies that the covariance matrix @xmath53 from ( [ eq:1d_covmat ] ) can be uniquely determined by its first block row and hence it is symmetric and block toeplitz , having identical blocks along diagonals .",
    "then @xmath53 can be rewritten as @xmath60.\\ ] ]    we now illustrate how cem @xcite can be extended so that its new version , bcem , is applicable to the symmetric block toeplitz matrix @xmath53 from ( [ eq:1d_covmat2 ] ) . to this end , we embed @xmath53 in the @xmath61 symmetric block toeplitz matrix @xmath62 for some even integer @xmath63 : @xmath64 , \\]]where @xmath65_{1 \\leq i , j \\leq \\ell}\\ ] ] and @xmath66 note that @xmath67 for @xmath68 and that @xmath62 is the covariance matrix for @xmath48 defined in the circular manner on the grid @xmath69 $ ] , where @xmath70 and @xmath71 are defined in the same way as before .",
    "it is not difficult to see that the matrix @xmath62 has the following properties @xmath72 the properties ( [ eq : sym_c0 ] ) and ( [ eq : sym_cb ] ) imply that @xmath62 is a symmetric block circulant matrix .",
    "let @xmath73 be the tensor product of a one - dimensional discrete fourier matrix @xmath74 of order @xmath75 and an identity matrix @xmath76 of size @xmath77 : @xmath78.\\ ] ] the matrix @xmath62 is unitarily block diagonalizable by @xmath73 @xcite , i.e. , there exists @xmath79 matrices @xmath80 , @xmath81 , such that @xmath82.\\ ] ] here @xmath83 denotes the conjugate transpose .",
    "similarly to the eigenvalue decomposition of a symmetric circulant matrix whose eigenvalues can be calculated by performing a discrete fourier transform of its first row ( or column ) , the block matrices on the diagonal of @xmath11 can be computed as @xmath84 f_b = \\left[\\lambda_0 \\quad \\lambda_1 \\cdots \\lambda_{m-1 } \\right]\\ ] ] or in the component - wise form : @xmath85 f_m^1 = \\left[\\lambda_0^{i , j } \\quad \\lambda_1^{i , j } \\cdots \\lambda_{m-1}^{i , j } \\right ] , \\text { where } 1 \\leq i , j \\leq \\ell.\\ ] ]    since the block circulant matrix @xmath62 is real and symmetric , @xmath80 are hermitian .",
    "furthermore , all the diagonal elements of @xmath80 are equal .",
    "therefore , only @xmath86 applications of @xmath74 are required for computing @xmath11 .",
    "consider a uniform grid , i.e. , a block - regular grid with the size of regular grid being a multiple of the number of blocks or , in other words , the points in each @xmath71 being uniformly located .",
    "then bcem is applicable on the uniform grid ( recall that cem works on regular grids only ) .",
    "since the covariance depends on the distance between points only , the block circulant matrix @xmath62 on the uniform grid satisfies the relationship @xmath87 consequently , @xmath80 in ( [ eq : eigdecmp_bc ] ) are toeplitz and the number of 1d fft @xmath74 to compute distinctive values of @xmath11 is equal to @xmath88 .",
    "thus , in bcem the block circulant matrix can be diagonalized by using @xmath88 ffts of order @xmath75 followed by using a cholesky decomposition of the block diagonal matrix @xmath11 , whose block entries are of size @xmath89 . for small @xmath88 ,",
    "the overall computational cost is dominated by @xmath90 . on the other hand ,",
    "the complexity of cem is dominated by ffts of order @xmath91 , which gives the overall cost @xmath92 .",
    "hence , bcem can outperform cem on the uniform grid , where both cem and bcem use the same covariance matrix ( see also remark  [ rem41 ] ) .",
    "the symmetricity of @xmath62 also guaranties the spectral decomposition @xmath93 where @xmath94 is unitary and @xmath95 is a real - valued diagonal matrix .",
    "the following proposition implies that @xmath11 from ( [ eq : block_factorisation ] ) can be decomposed with @xmath96 applications of the spectral decompositions ( [ eq : decomp_lambdak ] ) .",
    "[ prop : symmetricity ] the block diagonal matrix @xmath11 from ( [ eq : block_factorisation ] ) has the property @xmath97 where the bar denotes the matrix with conjugate complex entries .",
    "let @xmath98 be a root of unity .",
    "then ( see ( [ eq : sym_cb ] ) and ( [ eq : eigdecmp_pointwise ] ) ) : @xmath99    it follows from ( [ eq : block_factorisation ] ) and ( [ eq : decomp_lambdak ] ) that @xmath62 has the eigenvalue decomposition @xmath100 where the unitary block - diagonal matrix @xmath101 and the diagonal matrix @xmath102 are of the form @xmath103 \\text { and } d = \\left [ \\begin{array}{c c c c } d_0 & 0 & \\cdots & 0",
    "\\\\ 0 & d_1 & \\cdots & 0\\\\ \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0 & 0 & \\cdots & d_{m-1 } \\end{array } \\right].\\ ] ] we note that c is non - negative definite if and only if @xmath104 for each @xmath105 and @xmath106 .",
    "assume for the moment that all the eigenvalues of @xmath62 are non - negative .",
    "let two independent random vectors @xmath107 and @xmath108 , each of size @xmath75 , be normally distributed @xmath109 , i.e. , @xmath110 = \\delta_{ij}{{\\mathrm{i}}}_m$ ] , where @xmath111 denotes the kronecker delta .",
    "set @xmath112 .",
    "then the real and imaginary parts of the vector @xmath113 give two independent random vectors @xmath114 and @xmath115 that are both distributed as @xmath116 . since @xmath53 is embedded in @xmath62 , the corresponding parts of @xmath114 and @xmath115 are distributed as @xmath117 .",
    "note that the matrix - vector multiplication @xmath118 can be calculated component - wise by @xmath88 applications of @xmath74 .",
    "the algorithm described above depends on non - negative definiteness of the symmetric block circulant matrix @xmath62 .",
    "the sufficient conditions for symmetric circulant matrices to have all non - negative eigenvalues were developed for 1d case in @xcite and @xcite .",
    "here we extend these conditions to the symmetric block circulant matrix @xmath62 from ( [ eq : block_circ ] ) . to this end , introduce a uniform grid @xmath119 such that @xmath120 and consider the covariance matrix @xmath121 defined on @xmath119 .",
    "as @xmath51 is a subset of @xmath119 , @xmath53 is a sub - matrix of the matrix @xmath121 .",
    "let a uniform grid @xmath122 contain all points of @xmath123 . then the symmetric block circulant matrix @xmath62 is a sub - matrix of a symmetric circulant matrix @xmath124 : @xmath125,\\ ] ] where the function @xmath126 is as in ( [ eq : def_ext_covf ] ) and @xmath127 .",
    "therefore , there exists an injection matrix @xmath128 such that @xmath129 an injection matrix can be built by eliminating rows of the identity matrix , which correspond to points not in @xmath130 .",
    "for instance , @xmath131\\ ] ] is an injection matrix from @xmath132 to @xmath133 .",
    "the relationship ( [ eq : relationc ] ) leads to the following proposition .",
    "if @xmath124 is non - negative definite , then so is @xmath62 .",
    "when the circulant matrix @xmath124 fails to be non - negative definite , wood and chen @xcite suggested to increase the size of @xmath124 until it becomes non - negative definite ( the so - called padding technique ) . from the relationship ( [ eq : relationc ] ) between @xmath62 and @xmath124 , the same strategy can be used for the matrix @xmath62 .",
    "that is , increase @xmath75 until @xmath62 becomes non - negative definite .",
    "therefore , the number of blocks @xmath75 , which is required for @xmath62 to be non - negative definite , depends on the grid size of the uniform grid @xmath134 , not on the number of points in @xmath51 .",
    "thus , the number of paddings needed for bcem is the same as for cem ( see also remark  [ rempad ] ) .",
    "in the previous section we illustrated the idea of bcem in the simpler setting of 1d space . in this section",
    "we present multi - dimensional bcem which computational complexity is discussed in the next section .",
    "= [ circle , fill = black , inner sep=0pt , minimum size=2pt ]    ( 0,0 ) rectangle ( 11.99,11.99 ) ; ( 0,0 ) rectangle ( 5.99,5.99 ) ; ( 0,0 ) grid ( 12,12 ) ;    at ( 0,0)[]@xmath135 ; at ( 1.5,0)[]@xmath136 ; at ( 3,0)[]@xmath137 ; at ( 4.5,0)[]@xmath138 ; at ( 6,0)[]@xmath139 ; at ( 7.5,0)[]@xmath140 ; at ( 9,0)[]@xmath141 ; at ( 10.5,0)[]@xmath142 ; at ( 12,0)[]@xmath143 ;    at ( 0,1.5)[]@xmath144 ; at ( 1.5,1.5)[]@xmath145 ; at ( 3,1.5)[]@xmath146 ; at ( 4.5,1.5)[]@xmath147 ; at ( 6,1.5)[]@xmath148 ; at ( 7.5,1.5)[]@xmath149 ; at ( 9,1.5)[]@xmath150 ; at ( 10.5,1.5)[]@xmath151 ; at ( 12,1.5)[]@xmath152 ;    at ( 0,3)[]@xmath153 ; at ( 1.5,3)[]@xmath154 ; at ( 3,3)[]@xmath155 ; at ( 4.5,3)[]@xmath156 ; at ( 6,3)[]@xmath157 ; at ( 7.5,3)[]@xmath158 ; at ( 9,3)[]@xmath159 ; at ( 10.5,3)[]@xmath160 ; at ( 12,3)[]@xmath161 ;    at ( 0,4.5)[]@xmath162 ; at ( 1.5,4.5)[]@xmath163 ; at ( 3,4.5)[]@xmath164 ; at ( 4.5,4.5)[]@xmath165 ; at ( 6,4.5)[]@xmath166 ; at ( 7.5,4.5)[]@xmath167 ; at ( 9,4.5)[]@xmath168 ; at ( 10.5,4.5)[]@xmath169 ; at ( 12,4.5)[]@xmath170 ;    at ( 0,6)[]@xmath171 ; at ( 1.5,6)[]@xmath172 ; at ( 3,6)[]@xmath173 ; at ( 4.5,6)[]@xmath174 ; at ( 6,6)[]@xmath175 ; at ( 7.5,6)[]@xmath176 ; at ( 9,6)[]@xmath177 ; at ( 10.5,6)[]@xmath178 ; at ( 12,6)[]@xmath179 ;    at ( 0,7.5)[]@xmath180 ; at ( 1.5,7.5)[]@xmath181 ; at ( 3,7.5)[]@xmath182 ; at ( 4.5,7.5)[]@xmath183 ; at ( 6,7.5)[]@xmath184 ; at ( 7.5,7.5)[]@xmath185 ; at ( 9,7.5)[]@xmath186 ; at ( 10.5,7.5)[]@xmath187 ; at ( 12,7.5)[]@xmath188 ;    at ( 0,9)[]@xmath189 ; at ( 1.5,9)[]@xmath190 ; at ( 3,9)[]@xmath191 ; at ( 4.5,9)[]@xmath192 ; at ( 6,9)[]@xmath193 ; at ( 7.5,9)[]@xmath194 ; at ( 9,9)[]@xmath195 ; at ( 10.5,9)[]@xmath196 ; at ( 12,9)[]@xmath197 ;    at ( 0,10.5)[]@xmath198 ; at ( 1.5,10.5)[]@xmath199 ; at ( 3,10.5)[]@xmath200 ; at ( 4.5,10.5)[]@xmath201 ; at ( 6,10.5)[]@xmath202 ; at ( 7.5,10.5)[]@xmath203 ; at ( 9,10.5)[]@xmath204 ; at ( 10.5,10.5)[]@xmath205 ; at ( 12,10.5)[]@xmath206 ;    at ( 0,12)[]@xmath207 ; at ( 1.5,12)[]@xmath208 ; at ( 3,12)[]@xmath209 ; at ( 4.5,12)[]@xmath210 ; at ( 6,12)[]@xmath211 ; at ( 7.5,12)[]@xmath212 ; at ( 9,12)[]@xmath213 ; at ( 10.5,12)[]@xmath214 ; at ( 12,12)[]@xmath215 ;    at ( 0,0)[above , xshift=.3cm , yshift=-.1cm]@xmath216 ; at ( 1.5,0)[above , xshift=.3cm , yshift=-.1cm]@xmath217 ; at ( 3,0)[above , xshift=.3cm , yshift=-.1cm]@xmath218 ; at ( 4.5,0)[above , xshift=.3cm , yshift=-.1cm]@xmath219 ; at ( 6,0)[above , xshift=.3cm , yshift=-.1cm]@xmath220 ; at ( 7.5,0)[above , xshift=.3cm , yshift=-.1cm]@xmath221 ; at ( 9,0)[above , xshift=.3cm , yshift=-.1cm]@xmath222 ; at ( 10.5,0)[above , xshift=.3cm , yshift=-.1cm]@xmath223 ;    at ( 0,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath224 ; at ( 1.5,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath225 ; at ( 3,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath226 ; at ( 4.5,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath227 ; at ( 6,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath228 ; at ( 7.5,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath229 ; at ( 9,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath230 ; at ( 10.5,1.5)[above , xshift=.3cm , yshift=-.1cm]@xmath231 ;    at ( 0,3)[above , xshift=.3cm , yshift=-.1cm]@xmath232 ; at ( 1.5,3)[above , xshift=.3cm , yshift=-.1cm]@xmath233 ; at ( 3,3)[above , xshift=.3cm , yshift=-.1cm]@xmath234 ; at ( 4.5,3)[above , xshift=.3cm , yshift=-.1cm]@xmath235 ; at ( 6,3)[above , xshift=.3cm , yshift=-.1cm]@xmath236 ; at ( 7.5,3)[above , xshift=.3cm , yshift=-.1cm]@xmath237 ; at ( 9,3)[above , xshift=.3cm , yshift=-.1cm]@xmath238 ; at ( 10.5,3)[above , xshift=.3cm , yshift=-.1cm]@xmath239 ;    at ( 0,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath240 ; at ( 1.5,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath241 ; at ( 3,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath242 ; at ( 4.5,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath243 ; at ( 6,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath244 ; at ( 7.5,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath245 ; at ( 9,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath246 ; at ( 10.5,4.5)[above , xshift=.3cm , yshift=-.1cm]@xmath247 ;    at ( 0,6)[above , xshift=.3cm , yshift=-.1cm]@xmath248 ; at ( 1.5,6)[above , xshift=.3cm , yshift=-.1cm]@xmath249 ; at ( 3,6)[above , xshift=.3cm , yshift=-.1cm]@xmath250 ; at ( 4.5,6)[above , xshift=.3cm , yshift=-.1cm]@xmath251 ; at ( 6,6)[above , xshift=.3cm , yshift=-.1cm]@xmath252 ; at ( 7.5,6)[above , xshift=.3cm , yshift=-.1cm]@xmath253 ; at ( 9,6)[above , xshift=.3cm , yshift=-.1cm]@xmath254 ; at ( 10.5,6)[above , xshift=.3cm , yshift=-.1cm]@xmath255 ;    at ( 0,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath256 ; at ( 1.5,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath257 ; at ( 3,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath258 ; at ( 4.5,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath259 ; at ( 6,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath260 ; at ( 7.5,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath261 ; at ( 9,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath262 ; at ( 10.5,7.5)[above , xshift=.3cm , yshift=-.1cm]@xmath263 ;    at ( 0,9)[above , xshift=.3cm , yshift=-.1cm]@xmath264 ; at ( 1.5,9)[above , xshift=.3cm , yshift=-.1cm]@xmath265 ; at ( 3,9)[above , xshift=.3cm , yshift=-.1cm]@xmath266 ; at ( 4.5,9)[above , xshift=.3cm , yshift=-.1cm]@xmath267 ; at ( 6,9)[above , xshift=.3cm , yshift=-.1cm]@xmath268 ; at ( 7.5,9)[above , xshift=.3cm , yshift=-.1cm]@xmath269 ; at ( 9,9)[above , xshift=.3cm , yshift=-.1cm]@xmath270 ; at ( 10.5,9)[above , xshift=.3cm , yshift=-.1cm]@xmath271 ;    at ( 0,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath272 ; at ( 1.5,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath273 ; at ( 3,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath274 ; at ( 4.5,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath275 ; at ( 6,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath276 ; at ( 7.5,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath277 ; at ( 9,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath278 ; at ( 10.5,10.5)[above , xshift=.3cm , yshift=-.1cm]@xmath279 ;    in 0,1.5, ... ,10.5 in 0,1.5, ... ,10.5 at ( + .5,+.5)[spt ] ; at ( + 1,+.5)[spt ] ; at ( + .5,+1)[spt ] ; at ( + 1,+1)[spt ] ;    ( , ) rectangle ( + 6,+3 ) ; ( , ) (+6 , ) ; ( + 6,+3)(,+3 ) ; ( , ) (,+3 ) ; ( + 6,+3)(+6 , ) ; ( + 3,+3)(+3 , ) ; at ( + 1,+1)[spt ] ; at ( + 1,+2)[spt ] ; at ( + 2,+1)[spt ] ; at ( + 2,+2)[spt ] ; at ( + 4,+1)[spt ] ; at ( + 4,+2)[spt ] ; at ( + 5,+1)[spt ] ; at ( + 5,+2)[spt ] ; at ( + 1,+1)[xshift=-.2cm , yshift=.1cm]@xmath280 ; at ( + 1,+2)[xshift=-.2cm , yshift=.1cm]@xmath281 ; at ( + 2,+1)[xshift=-.2cm , yshift=.1cm]@xmath282 ; at ( + 2,+2)[xshift=-.2cm , yshift=.1cm]@xmath283 ; at ( + 4,+1)[xshift=-.2cm , yshift=.1cm]@xmath284 ; at ( + 4,+2)[xshift=-.2cm , yshift=.1cm]@xmath285 ; at ( + 5,+1)[xshift=-.2cm , yshift=.1cm]@xmath286 ; at ( + 5,+2)[xshift=-.2cm , yshift=.1cm]@xmath287 ; ( 1.5,0.75 ) ellipse ( 2 cm and 1 cm ) ; at ( , ) [ above , xshift=.5cm , yshift=-.1cm]@xmath288 ; at ( + 3,)[above , xshift=.5cm , yshift=-.1cm]@xmath289 ; at ( , ) [ ] @xmath290 ; at ( + 3,)[]@xmath291 ; at ( + 6,)[]@xmath292 ; at ( , + 3)[]@xmath293 ; at ( + 3,+3)[]@xmath145 ; at ( + 6,+3)[]@xmath146 ; at ( 1.5,-.25)(start ) ; at ( , + 1.5)(end ) ; ( start ) .. controls ( [ xshift=2 cm ] start ) and ( [ xshift=-1 cm ] end ) .. ( end ) ;    we start with introducing the notation which largely follows @xcite .",
    "let @xmath294 be the set of @xmath295-vectors with non - negative integer components and @xmath296 and @xmath297 be the @xmath295-dimensional vectors whose all components equal to 0 and 1 , respectively .",
    "for @xmath298,\\ldots,{{\\mathbf{i}}}[d])^t$ ] , @xmath299,\\ldots,{{\\mathbf{j}}}[d])^t   \\in   \\mathbb{z}^d$ ] , we define addition in @xmath294 : @xmath300+{{\\mathbf{j}}}[1 ] , \\ldots , { { \\mathbf{i}}}[d]+{{\\mathbf{j}}}[d])^t\\ ] ] and also the product of elements of @xmath301 : @xmath302.\\ ] ] for any @xmath303 all components of which are strictly positive , we define the set @xmath304 : @xmath305 \\leq { { \\mathbf{j}}}[k ] - 1 \\mbox { for all } 1 \\leq k",
    "\\leq d\\}.\\ ] ] note that the cardinality of @xmath304 is equal to @xmath306 .",
    "introduce a @xmath295-dimensional rectangular parallelepiped @xmath307 , x_{{{\\mathbf{n}}}}[i ] ] \\subset { { \\mathbb{r}}}^d,\\ ] ] where @xmath308,\\ldots,{{\\mathbf{n}}}[d])^t \\in \\mathbb{z}^d$ ] and the vector @xmath309 with the components @xmath310 =   ( x_{{{\\mathbf{n}}}}[i ] - x_\\textbf{0}[i])/{{\\mathbf{n}}}[i]$ ] .",
    "further , points @xmath311,\\ldots , x_{{{\\mathbf{i}}}_k}[d])^t$ ] with @xmath312 = x_\\textbf{0}[j]+{{\\mathbf{i}}}_k[j]{{\\mathbf{h}}}[j]$ ] form a regular grid @xmath313 on the rectangular parallelepiped @xmath314 ( see fig .",
    "[ fig:2d_grid ] ) .",
    "the domain @xmath314 in ( [ eq : omega1 ] ) can be divided into @xmath295-dimensional rectangular parallelepipeds as @xmath315 where @xmath316 ,   x_{{{\\mathbf{j}}}_k}[i]+{{\\mathbf{h}}}[i ] ] , \\ , { { \\mathbf{j}}}_k \\in \\mathcal{i}({{\\mathbf{n } } } ) .",
    "\\label{eq : omjj}\\ ] ] for the purpose of algorithm development , we use a lexicographic ordering of @xmath317 with respect to @xmath318 , i.e. , row after row and layer after layer ( see fig .  [ fig:2d_grid ] ) .",
    "consider a stationary gaussian random field @xmath48 , @xmath319 , with zero mean and covariance function @xmath50 .",
    "we assume that the problem at our hands is such that we need to sample @xmath48 at the nodes",
    "@xmath320 defined as follows ( see the examples in the introduction and also fig .  [ fig:2d_grid ] ) : @xmath321 where @xmath322,\\ldots,\\delta_j[d])^t$ ] with @xmath323 < { { \\mathbf{h}}}[i]$ ] for @xmath324 .",
    "here @xmath88 is the number of sampling points in each subdomain @xmath325 .",
    "that is , in each @xmath325 the points from the set @xmath326 are distributed according to the same pattern for all @xmath327 .",
    "denote the grid : @xmath328    note that @xmath43 are independent of the index vector @xmath317 .",
    "the covariance matrix @xmath53 of @xmath329 , @xmath330 , is block - toeplitz . in the one - dimensional - case it consists of non - toeplitz blocks of order @xmath88",
    "( see section  [ section:1d ] ) . in the @xmath295-dimensional case with @xmath331 ,",
    "it consists of blocks which have all the properties of a correlation matrix in the @xmath332 dimensional space .",
    "we emphasize that the matrix @xmath53 is not toeplitz and hence cem is not directly applicable here .",
    "analogously to cem , in order to build a block - circulant matrix , we consider an extended domain @xmath333 , x_{{{\\mathbf{m}}}}[i]]$ ] , where @xmath334,\\ldots,{{\\mathbf{m}}}[d])^t$ ] with @xmath335 \\geq 2 { { \\mathbf{n}}}[i]$ ] and @xmath336 = x_\\textbf{0}[i ] + { { \\mathbf{m}}}[i]{{\\mathbf{h}}}[i]$ ] for @xmath337 .",
    "figure [ fig:2d_grid ] shows an example of the computation domain @xmath314 with @xmath338 and the extended domain @xmath339 with @xmath340 .",
    "vectors @xmath341 form the extended regular grid @xmath342,\\ldots , x_{{{\\mathbf{j}}}_k}[d])^t\\mathrel{}|\\mathrel{}{{\\mathbf{j}}}_k \\in \\mathcal{i}({{\\mathbf{m}}}+\\mathbf{1})\\ } \\subset \\omega^{\\text{e}}$ ] .",
    "there are @xmath343 regular grid points in the set @xmath344 .",
    "the parallelepiped @xmath345 can be divided into @xmath295-dimensional small parallelepipeds as ( see also fig .  [ fig:2d_grid ] ) : @xmath346 where @xmath325 , @xmath347 , are as in ( [ eq : omjj ] ) .",
    "we now describe bcem in the @xmath295-dimensional case , which is applicable to our block - toeplitz covariance matrix @xmath53 .",
    "in contrast to the 1d setting , where the covariance function is always even because of its symmetry , further classifications of covariance functions are needed in higher dimensional cases .",
    "we say that @xmath348 is _ component - wise even _ in @xmath44th coordinate if @xmath349,\\ldots ,- x[i],\\ldots , x[d ] ) = r(x[1],\\ldots , x[i]\\ldots , x[d ] ) \\label{even}\\ ] ] for all @xmath350 ; otherwise , we say that @xmath348 is _ component - wise uneven _ in some coordinates .    for simplicity of the exposition ,",
    "let us assume for now that @xmath50 is component - wise even in all coordinates ( we will discuss a modification of bcem in the uneven case in remark  [ rk : uneven ] ) .",
    "we first build the block circulant embedding of the block - toeplitz matrix @xmath53 .",
    "consider the first row of the block circulant matrix @xmath62 , which is an @xmath351 matrix @xmath352 of the form @xmath353,\\ ] ] where @xmath354-th element of @xmath355 is equal to @xmath356 and the vector function @xmath357 is defined by @xmath358 , & \\text{if $ |x_{{{\\mathbf{j}}}}[i]| < { { \\mathbf{m}}}[i]{{\\mathbf{h}}}[i]/2 $ , } \\\\   { { \\mathbf{m}}}[i]{{\\mathbf{h}}}[i ] - |x_{{{\\mathbf{j}}}}[i]| , & \\text{otherwise . }",
    "\\end{cases}\\ ] ] the block circulant matrix @xmath62 is generated by its first row @xmath352 in the usual way .",
    "also note that @xmath359_{{{\\mathbf{j}}}_k \\in \\mathcal{i}({{\\mathbf{n}}})}.\\ ] ]    the block circulant matrix @xmath62 is block diagonalizable by a block discrete fourier transform ( bdft ) matrix , @xmath360 , where @xmath361 is a @xmath295-dimensional dft matrix . that is , we have @xmath362 , where @xmath363 .",
    "the blocks on the diagonal of @xmath11 can be found by simply taking bdft of first block row @xcite .",
    "furthermore , using the fact that @xmath73 is the tensor product involving the identity matrix , we derive the following component - wise computation : @xmath364 = { { \\mathrm{fft}_d}}([c_0^{i , j } \\cdots c_{\\overline{{{\\mathbf{m}}}}-1}^{i , j}]),\\ ] ] where @xmath365 and @xmath366 is the @xmath295-dimensional fft . note that instead of @xmath367 we will write fft .    due to the fact that @xmath11 is hermitian and all diagonal entries of @xmath80 are the same , the required number of @xmath366 of size @xmath368 ( which is equivalent to fft of order @xmath369 ) in ( [ eq : fft_pw ] ) is @xmath86 .",
    "if @xmath11 is positive - definite , the cholesky decomposition @xmath370 exists , where @xmath8 is a block diagonal matrix with each block being a lower triangular matrix . then , we obtain the decomposition @xmath371 .    as in the one - dimensional case",
    "( see section  [ section:1d ] ) , let @xmath372 be a complex - valued random vector of order @xmath373 with @xmath107 and @xmath108 being real , normal random vectors such that @xmath374 = 0 $ ] and @xmath110 = \\delta_{ij}i$ ] . set @xmath375 and @xmath376 .",
    "multiplying the square root of @xmath62 by @xmath377 , we obtain the complex - valued vector @xmath378 with the properties : @xmath379 = { { \\mathrm{e}}}[\\zeta_2 \\zeta_2^t]=c$ ] and @xmath114 and @xmath115 are independent . using tensor - product properties of @xmath73 , @xmath380 can be computed in the component - wise manner : @xmath381\\quad \\zeta[i+\\ell]\\ldots \\zeta[i+(\\overline{{{\\mathbf{m}}}}-1)\\ell ] = { { \\mathrm{fft}_d}}([\\eta[i]\\quad \\eta[i+\\ell]\\ldots \\eta[i+(\\overline{{{\\mathbf{m}}}}-1)\\ell])\\ ] ] for @xmath106 .    to summarize",
    ", the new bcem can be presented in the algorithmic form as follows .",
    "given @xmath382 , and strictly positive valued vector @xmath383 ,    _ step _ 1 .",
    "choose a vector @xmath384 such that @xmath335 \\geq 2 { { \\mathbf{n}}}[i]$ ] for all @xmath324 .",
    "[ step01 ] _ step _ 2 .",
    "compute the first block row of the circulant matrix @xmath62 as described in ( [ eq : first_block_circ])-([eq : gmm ] ) .",
    "[ step02 ] _ step _ 3 .",
    "compute the block diagonal matrix @xmath385 using ( [ eq : fft_pw ] ) .",
    "[ step03 ] _ step _ 4 .",
    "compute the square - root of @xmath11 applying cholesky decompositions to diagonal blocks of @xmath11 : @xmath386 where @xmath8 is a block diagonal matrix with lower triangular block of order @xmath88 .",
    "[ step04 ] _ step _ 5 .",
    "if the cholesky decomposition fails in _ step _ 4 , increase @xmath335 $ ] by one or more and go to _ step _ 2 .",
    "[ step05 ]    _ step _ 6 .",
    "compute @xmath375 .",
    "[ step06 ] _ step _ 7 .",
    "generate a random complex vector of dimension @xmath387 , with two independent vectors @xmath107 and @xmath108 being @xmath388 .",
    "compute @xmath376 .",
    "[ step07 ] _ step _ 8 .",
    "compute @xmath389,\\ldots,\\zeta[\\overline{{{\\mathbf{m}}}}\\ell])^t$ ] by applying  times as in ( [ eq : componentwise ] ) .",
    "[ step08 ]    note that if @xmath390 , then @xmath391 is regular , @xmath62 is circular , @xmath11 becomes diagonal instead of block diagonal and algorithm  [ alg : bcem ] degenerates to the standard cem .",
    "[ rk : uneven ] algorithm  [ alg : bcem ] is applicable when the covariance function is component - wise even ( ) .",
    "although the covariance function is even by definition , i.e. , @xmath392 , it could be component - wise uneven , e.g. , @xmath393 , \\,\\ , x \\in { { \\mathbb{r}}}^2,\\ ] ] is uneven . in this case , the matrix @xmath62 defined by the vector function @xmath394 in ( [ eq : gmm ] ) usually does not have block circulant structure because of conflicting definitions at the points @xmath395 with @xmath396 = { { \\mathbf{m}}}[i]{{\\mathbf{h}}}[i]/2 $ ] , if @xmath348 is uneven in @xmath44th coordinate .",
    "two adjustments to make cem work in uneven cases were suggested in @xcite , which can be applied to bcem by modifying algorithm  [ alg : bcem ] as follows .",
    "+ if @xmath348 is uneven in the @xmath44 th coordinate , either    * choose @xmath335 $ ] to be an odd integer , e.g. , a power of three ;    or    * still choose @xmath335 $ ] to be an even integer and define @xmath355 using ( [ eq : cjb ] ) and ( [ eq : gmm ] ) , except put @xmath397 for all @xmath395 such that @xmath398| = { { \\mathbf{m}}}[i]{{\\mathbf{h}}}[i]/2 $ ] for some @xmath44 .    in either case , the resulting matrix @xmath62 has a block circulant structure and thus algorithm [ alg : bcem ] can be seamlessly extended to the uneven case with aforementioned modifications .    as mentioned earlier , the matrix @xmath62 is often negative definite in practical applications of cem and bcem .",
    "following @xcite , we increase the matrix @xmath62 in algorithm  [ alg : bcem ] ( see its step 5 ) until it becomes non - negative definite ( the padding technique ) .",
    "the padding technique is universal and usually efficient when the correlation length of a random field is in a range from small to medium relative to the size of a computational domain and the field is not too smooth .",
    "otherwise , the use of the padding technique could be very expensive .",
    "there are two recently developed alternatives to padding ( a cut - off of the circulant matrix @xcite and smoothing window circulant embedding @xcite ) , which can deal with the problem of negative definiteness of circulant matrices effectively .",
    "the techniques from @xcite are applicable to bcem as they are for cem .",
    "[ rempad ]    the equispaced fft is highly parallelizable in high dimensions , and its highly scalable implementations are proposed in @xcite .",
    "this could be beneficial in the standard cem because its computation is dominated by the fft .",
    "still equipped with the parallelism of the fft , bcem can be further parallelized in a natural way because the applications of @xmath366 in _ step _ [ step03 ] and _ step _ [ step08 ] of algorithm  [ alg : bcem ] can be performed separately and simultaneously .",
    "moreover , block - diagonal matrix operations in _ step _ [ step04 ] and _ step _ [ step07 ] can be performed separately and simultaneously .",
    "therefore , the overall bcem algorithm contains two - level parallelism , giving us significant advantage over the standard cem .    as we will see in the next section ,",
    "bcem can be faster than cem both in taking square - roots of the corresponding circulant matrices ( performed , of course , only once per the whole monte carlo simulation ) and in sampling the random field required in each monte carlo run .",
    "the latter is usually more important in monte carlo - type simulations .",
    "in this section we analyze the computational complexity of bcem . to this end",
    ", we use the same convention as in golub and van loan @xcite for counting the number of floating point operations : @xmath399 flops for fft of size @xmath75 and @xmath400 flops for the cholesky decomposition of a matrix of order @xmath401 .",
    "_ step _ [ step03 ] of algorithm  [ alg : bcem ] is the initial factorization of the block circulant matrix @xmath62 by taking bdft of its first block row which can be computed using the ordinary dft in ( [ eq : fft_pw ] ) at the cost @xmath402 here we took into account that each @xmath80 is hermitian and its diagonal elements have the same value .    in _ step _ [ step04 ] , the square - root operation on the block diagonal matrix @xmath11 with @xmath373 blocks of order @xmath88 can be performed on each block separately using the cholesky decomposition method . in proposition",
    "[ prop : symmetricity ] , we proved in the one - dimensional case that @xmath11 has pairs of complex - conjugate blocks , @xmath80 and @xmath403 , which allows us to compute the square - root of @xmath80 and use its complex - conjugate as a square - root of its complex - conjugate pair @xmath403 .",
    "this is based on the periodicity and conjugate symmetry of fft .",
    "hence , proposition  [ prop : symmetricity ] can be extended to the higher dimensional cases .",
    "then the matrix @xmath11 can be decomposed at the cost @xmath404}{2}+1\\right)\\frac{\\ell^3}{3 } \\text { flops}.\\ ] ]    note that if the nodes of @xmath405 are regularly ( uniformly ) distributed in @xmath325 for all @xmath406 which is often the case in applications ( see , e.g. , example  1.1 ) , then all blocks on the diagonal of @xmath11 are block toeplitz ( toeplitz ) .",
    "toeplitz matrix and block toeplitz matrix can be decomposed using schur s algorithm @xcite and block schur s algorithm @xcite , respectively , which have @xmath407 complexity as opposed to @xmath408 for the standard cholesky decomposition .",
    "making use of schur s algorithms can reduce the cost of algorithm  [ alg : bcem ] .    in _ step _ [ step08 ] , computing a realization of @xmath380 requires block diagonal matrix - vector multiplication @xmath409 and @xmath88 applications of fft of order @xmath373 in ( [ eq : componentwise ] ) at the cost @xmath410 and @xmath411 respectively .    to conclude , the cost of bcem is @xmath412 flops . in practical applications of bcem ( see , e.g. examples in the introduction ) the size of blocks",
    "@xmath88 is relatively small while the number of blocks @xmath373 is large .",
    "recall that bcem is designed for block - regular grids @xmath51 .",
    "its main computational advantage in comparison with cem ( which is designed for regular grids ) comes from the fact that the use of cem in the case of simulations on a block - regular grid @xmath51 requires regularization of @xmath51 , i.e. , adding a significant number of extra nodes which bcem does not need .",
    "hence bcem works on a grid with a smaller number of nodes than cem and needs to generate random vectors @xmath380 of smaller size than cem ( and hence makes less number of calls to a random number generator to sample @xmath377 ) .",
    "it can be shown that the use of bcem on a _ regular _ grid split in blocks of a size @xmath88 can be more effective in sampling the random field than cem but it is computationally more expensive in the matrix decomposition than cem .",
    "the latter can be overcome by exploiting the fact that bcem is parallelizable in comparison with cem .",
    "thus bcem can be more effective than cem even in the case of regular grids for which cem is designed .",
    "[ rem41 ]    we now compare computational complexity of bcem and cem using the first two examples from the introduction and the following exponential covariance function ( cf .",
    "( [ eq : cjb ] ) ) : @xmath413 where @xmath414 means @xmath415-norm .",
    "we note that the circulant matrix @xmath62 ( cf .",
    "( [ eq : first_block_circ ] ) , ( [ eq : cjb ] ) ) of the size @xmath416 formed by ( [ eq : exp_cov ] ) is always positive definite ( see , e.g. @xcite ) .",
    "this means , in particular , that step [ step05 ] ( i.e. , padding ) of algorithm  [ alg : bcem ] is not needed in this case . for simplicity",
    ", we consider the domain @xmath314 to be the unit square in the examples .    .",
    "]    [ ex : agfem2d ] _ triangular finite element with a quadrature point located at the barycentre of the triangle .",
    "_    in example  [ ex : fem2d ] ( see figure [ fig:2d_fem ] ) , each rectangular block contains 9 uniform grid nodes .",
    "hence the order of the circulant matrix used by cem is @xmath417 , where @xmath416 and @xmath373 is the number of rectangular blocks in the extended domain @xmath418 .",
    "then the matrix decomposition cost for cem is @xmath419 flops , and generation of each realization of the random field requires another @xmath420 flops .    here bcem uses only two points in each rectangular block , so the order of the block - circulant matrix is @xmath421 .",
    "substituting @xmath422 into ( [ eq : cost1 ] ) and ( [ eq : cost2 ] ) , the total matrix decomposition cost for bcem is @xmath423/2 + 1)({{\\mathbf{m}}}[2]/2 + 1)(8/3)$ ] flops .",
    "each realization of the random field is generated at the cost of @xmath424 flops ( see ( [ eq : cost3 ] ) and ( [ eq : cost4 ] ) ) .",
    "figure [ fig : fem_costs ] shows the floating point operations required by the two algorithms .",
    "one can see that bcem is more effective in both procedures and that the complexity of bcem grows at roughly the same rate as for cem .",
    "compared to cem , bcem reduces the matrix decomposition cost and the generation cost approximately in @xmath425 time and @xmath426 time , respectively .",
    "the improvement in computational efficiency is due to the fact that bcem works with just 2/9 of nodes that cem uses to build the circulant matrix .",
    "this also means that bcem requires 4.5 time less memory than cem .",
    "computed using 1000 independent samples . ]",
    "c|rr||c & + @xmath427 & bcem & cem & speed - up + 32 & 0.60&2.71 & 4.5 + 64 & 2.32&11.39 & 4.9 + 128 & 11.34&48.55 & 4.3 + 256 & 49.37&212.21 & 4.3 +   +   +   +   +   +    [ tab : fem_generation ]    to compare performance of bcem and cem further , we generated samples of the random field by these two methods on an intel xeon e5 - 2450 , 96 gb ram computer using matlab r2014a .",
    "figure [ fig : fem_generation ] shows the average computational time of generation of a single realization of the random field by both methods and how it increases with increasing @xmath428 .",
    "table  [ tab : fem_generation ] gives the cpu time and the speed up in generating a random vector using bcem against the ones using cem .",
    "for both methods , the cpu time increases with increase of @xmath428 at about the same rate as the theoretical rate shown in figure [ fig : fem_costs ] ( right ) .",
    "we see that bcem is about @xmath429 faster than cem , which is close to the theoretical cost estimation in figure [ fig : fem_costs ] .",
    ".,scaledwidth=100.0% ]    [ ex : agmlmc ] _ cell - centered finite volume discretization in multilevel monte carlo ( mlmc ) computation . _    in example  [ ex : mlmc ] , bcem uses 5 out of 16 uniform nodes required for cem in each individual block to generate random variables located at the centers of both the fine and coarse cells . that is , cem should generate random variables at the extra 11 nodes that are not used in the finite volume discretization and are not used by bcem .",
    "then memory requirement for cem and bcem are @xmath430 and @xmath431 , respectively , which makes bcem more attractive when the number of blocks is large .",
    "whereas the matrix decomposition and sampling costs in cem both require @xmath432 flops , the computational costs of the matrix decomposition and sampling in bcem are @xmath433/2 + 1)({{\\mathbf{m}}}[2]/2 + 1)(125/3)$ ] flops and @xmath434 flops , respectively ( see ( [ eq : cost1 ] ) - ( [ eq : cost4 ] ) with @xmath435 ) .",
    "note that the total costs are dominated by @xmath436 .",
    "hence , for large @xmath373 , the ratio of the matrix decomposition in cem to one in bcem is close to @xmath437 . for the sample generation cost ,",
    "the ratio is close to @xmath438 .",
    "these theoretical computational costs are shown in figure  [ fig : mlmc_costs ] .",
    "computed using 1000 independent samples . ]",
    "c|rr||c & + @xmath427 & cem & bcem & speed - up + 32 & 0.94 & 3.08&3.3 + 64 & 4.62 & 13.71&3.0 + 128 & 23.37 & 68.28&2.9 + 256 & 101.82 & 301.24 & 3.0 +   +   +   +   +   +    [ tab : mlmc_generation ]    figure [ fig : mlmc_generation ] gives the cpu times for the random field generation .",
    "we see that the actual computational cost increases with increase of @xmath428 similarly to the theoretical one as in figure  [ fig : mlmc_costs ] .",
    "table [ tab : mlmc_generation ] demonstrates that bcem is nearly 3 time faster than cem as we expected from table [ tab : mlmc ] and figure   [ fig : mlmc_costs ] .",
    "also note that bcem is highly parallelizable , so the computation cost can be further reduced using parallel algorithms .",
    "we have compared bcem and cem on the 2d examples here .",
    "it is not difficult to see ( cf .",
    "table  [ tab : mlmc ] ) that in 3d cases bcem can outperform cem even more dramatically .",
    "the matlab codes for bcem used for examples  [ ex : agfem2d ] and  [ ex : agmlmc ] are available at _ https://www.maths.nottingham.ac.uk / personal / pmzmp / bcem.html_.",
    "this work was partially supported by the epsrc grant ep / k031430/1 .              , _ a fast and exact method for multidimensional gaussian stochastic simulations : extension to realizations conditioned on direct and indirect measurements _ , water resour .",
    ", 32(6 ) ( 1996 ) , pp .",
    "16431652 .      ,",
    "_ performance measurements of the 3d fft on the blue gene / l supercomputer _ , in in euro - par 2005 parallel processing : 11th international euro - par conference , lisbon , portugal , august 30-september2 , 2005 , j.  cunha and p.  medeiros , eds . , vol .",
    "3648 of lecture notes in computer science , springer - verlag , 2005 , pp ."
  ],
  "abstract_text": [
    "<S> we propose a new method for sampling from stationary gaussian random field on a grid which is not regular but has a regular block structure which is often the case in applications . </S>",
    "<S> the introduced block circulant embedding method ( bcem ) can outperform the classical circulant embedding method ( cem ) which requires a regularization of the irregular grid before its application . </S>",
    "<S> comparison of bcem vs cem is performed on some typical model problems .    * _ keywords : _ * stationary gaussian random field , irregular grids , sampling techniques , circulant embedding method , symmetric block - toeplitz matrices , block fast fourier transform . </S>"
  ]
}