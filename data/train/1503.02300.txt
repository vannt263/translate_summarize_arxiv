{
  "article_text": [
    "modern industrial control applications , such as the automotive control , are characterized by the use of shared networks to replace excessive wiring .",
    "deterministic timing is crucial in time - critical industrial applications , because uncertainty in timing may cause embarrassing , or even life - threatening , sudden decreases in systems performance .",
    "real - time networks have been developed to support networking with deterministic timing , with the control area network , or can , being the most mature and accepted one @xcite .",
    "a can connects a number of nodes that are able to send and receive messages .",
    "each message on the can is broadcasted to all nodes , and only one message can be transmitted at any time . to resolve contention among multiple messages , the can",
    "utilizes a media access control protocol called carrier sense multiple access with bitwise arbitration ( or csma / ba ) .",
    "each message is assigned a unique identifier , which is used as an assigned priority when contention occurs .",
    "since each identifier is unique , each message has a unique priority .",
    "therefore , when two or more nodes attempt to send messages at the same time , the node with the highest priority message will be granted access to the can to transmit , and the other nodes will need to defer their message transmission until the communication link becomes idle , which can be detected after receiving a bit field indicating the end of the message being transmitted .",
    "the length of each can message can be determined up to certain accuracy and uncertainties so that the value well approximate the real timing and there is no randomness in the mechanism to resolve conflicts .",
    "therefore , the timings of message transmission and reception events on can can be well predicted .",
    "using can to support networked control systems increases flexibility .",
    "however , most networked control system designs are usually constrained by limited bandwidth of the communication link , which does not allow message transmission at an arbitrarily high rate . the can based control systems are no exception .",
    "when multiple control loops must share access to a common communication link , the bandwidth must be distributed appropriately so that all control loops are stable and all achieve a desired level of performance .",
    "hence , one must design both the controller and the distribution of bandwidth to guarantee stability and optimal and robust performance @xcite .    over the last several decades ,",
    "hardware and software systems supporting the can have improved significantly , resulting in very reliable message transmission and timing accuracy .",
    "therefore , the probability of packet drops , and the possible randomness in timing caused by clock drift , can be practically ignored for controller design .",
    "however , since the csma / ba used by can is a contention based protocol , it alone can not provide sufficient control over the distribution of bandwidth among networked controllers .",
    "while the timing is still deterministic , contention may cause large variations in timing , a phenomenon generally known as jitters @xcite . if not handled well , jitters may cause controls to be faulty at unexpected ( or even life threatening ) times .",
    "these timing variations can not be ignored by any controller design . but some jitters happen with small probability , and so are hard to diagnose @xcite . since the contention based media access protocol is not sufficient to avoid timing variations , a higher level scheduling algorithm is often designed to allocate the bandwidth among control loops . in @xcite , authors discuss the design of self - triggered controllers that can reduce the number of required messages for control systems , which can save communication bandwidth for other applications .",
    "also , authors of @xcite propose an optimal strategy to allocate communication bandwidth to different control loops implemented on a can , and the article @xcite analyzes the effect of response time on the control performance .",
    "however , these methods can not completely avoid contention .",
    "when unexpected contention occurs , classical real - time scheduling resolves these contentions by priority based scheduling algorithms @xcite , such as the popular rate monotonic scheduling ( or rms ) and earliest deadline first ( or edf ) algorithms @xcite .",
    "model predictive controllers , or mpcs , were originally developed for industrial process control @xcite .",
    "the success led to a new general approach for controller design that has been used in many other applications , including vehicle and robot control @xcite .",
    "the basic idea of model predictive control is to use a model of the physical system to predict future system behavior over a finite time horizon , starting from each sampling time where new sensor measurements are available .",
    "the control effort in the finite time horizon is computed by solving an optimization problem . at each sampling time , only the first value of the resulting control is applied to the plant , and then the entire calculation is repeated at subsequent sampling time instants . model predictive control offers a natural way to incorporate state and control constraints @xcite to the design .",
    "however , it requires sufficient online computing resources and computing time .",
    "chemical process control , where model predictive control has seen great success over many years , allows for both .",
    "while other applications , such as the control of automobiles or robots , are more constrained in terms of timing and computing resources because of their reliance on ( networked ) embedded computers @xcite , recent advances in embedded processors show considerable promise for applying model predictive control in automotive and robotic applications as well .",
    "effective mpc designs rely on accurate , high fidelity models of the control loops . however , the jitters associated with messages on the can incur time - varying delays into the control loops .",
    "such time - varying delays make it difficult to derive a reliable model used by mpc .",
    "this challenge may be answered by the approach of _ control - scheduling co - design _ where a controller and the timing of control related events can be jointly determined .",
    "two categories of methods exist in the literature : the offline methods and the online methods .",
    "offline methods perform optimization at an offline design stage @xcite .",
    "typically , a scheduling algorithm is first determined , and then computer simulation is used to generate a sequence of timings of all possible events under the scheduling algorithm .",
    "optimization techniques can then be applied to tune the parameters of the scheduling algorithm and the controller design until a predefined performance criteria is optimized @xcite .",
    "offline methods are feasible .",
    "however , they lead to overly conservative designs , and they are not completely compatible with model predictive control that requires control efforts to be computed online for a finite time window using predictions .",
    "online methods for handling jitters involve co - designing a schedule of events and a model predictive control at each sampling time for a finite horizon @xcite , which reduce the amount of computation required compared to offline methods since a shorter time window is concerned .",
    "furthermore , the controllers that are designed in such methods are usually less conservative than the ones designed with offline methods , because they only need to compensate for the worst case delay in a relatively short time window .",
    "a key requirement for the online approach is a computationally efficient method to predict the timing of events for the finite horizon used by the model predictive control .",
    "while timing can be computed by simulations for offline methods , such simulations are too expensive for online methods . to the best of our knowledge ,",
    "the existing works do not offer a general method for accurate timing prediction on real - time networks .",
    "for example , the works @xcite obtain a timing prediction from a lookup table that is generated offline by computer simulation . in @xcite ,",
    "the timing is assumed to be periodic , while @xcite models the timing as a markov process , where the transition probabilities are assumed to be known .",
    "these methods all have certain degrees of inaccuracy that must be tolerated by a model predictive control design .",
    "if a message takes longer than expected to transmit , or is perturbed by other messages that were not considered at the design stage so that its deadline is missed , then the schedule would not adjust for this fault .",
    "the work @xcite is perhaps the first to introduce a deterministic timing model that connects real - time priority based scheduling algorithms with model predictive control designs .",
    "this timing model may be leveraged by model predictive control designs to improve performance , by better compensating for timing variations , which serves as the starting point of the work of this paper .",
    "this paper develops a novel methodology that focuses on handling the timing constraints ( e.g. jitters and delays ) associated with mpc on can .",
    "the major contributions are summarized as below :    * * model . *",
    "we develop a receding horizon timing model for event - triggered model predictive control on can .",
    "existing real - time scheduling analysis of the can focuses on modeling time - varying delays as either constant values in worst - case scenarios@xcite or stochastic variables obeying certain distribution@xcite .",
    "these results do not provide a process model with sufficient accuracy . moreover , many control systems nowadays are operating in dynamic and uncertain environments . as a result ,",
    "the system workload will change accordingly .",
    "for instance , some messages on the can may need to be removed in some cases , while new messages may be added in other cases .",
    "this variability of messages inevitably further increases delay variation in feedback control loop .",
    "our model is able to capture the variations of timing caused by the changes of number of messages , message length , and priorities at run - time over a finite time window .",
    "this is particularly suitable for model predictive control . *",
    "* mpc design .",
    "* we propose an effective design for an event - triggered mpc that incorporates both the timing model and the control loop model to find the optimal controlling effort under the timing constraints on can .",
    "networked model predictive control designs exist for contention based protocols over the ethernet ; see , for example , @xcite .",
    "however , the ethernet is very different from the can bus , since it does not offer predictable timing .",
    "therefore , these works can not be applied directly to the model predictive control design problem for the can bus .",
    "our mpc design is triggered by the deterministic timing events on the can .",
    "we have discovered that a state observer is necessary to estimate the states of the timing model .",
    "an observer with proved convergence is thus incorporated into the mpc design .",
    "the observer and the event triggered mpc controller design have not appeared in previous works . *",
    "* simulations . *",
    "we perform simulations to demonstrate that our mpc design can lead to improved mpc performance .",
    "the design is compared to mpc designs without the timing model to show the performance improvement .    to the best of our knowledge",
    ", these contributions do not exist in the literatures reviewed and have not been previously published .",
    "the technical content of the paper is organized as follows .",
    "section [ section : problem ] first review the can protocol and its message properties .",
    "then a structure for mpc is introduced , which formulates the co - design problem studied in this paper .",
    "this problem motivates the need for an efficient timing model that is necessary to enable the co - design .",
    "section [ section : timingmodel ] then derives the timing model that is needed to solve the co - design problem .",
    "the timing model consists state vectors , selected to represent the status of all messages on the can bus , and transition rules that determine the values of state vectors over time . using the timing model",
    ", one can check for schedulability of all messages at significant moments .",
    "not all states in the state vectors are directly observable on a can bus , section [ section : stateobserver ] discusses how to estimate the state vectors in the hybrid timing model from measurements collected in each can node .",
    "we rigorously prove that the algorithm used for estimation converges to the true values of the state vectors .",
    "section [ section : mpc ] presents the solution of mpc design proposed in this paper .",
    "the timing model is used to determine controller delays so that the mpc can be determined more accurately than using worst case response times .",
    "section [ section : simulation ] presents simulations to show the effectiveness of our approach .",
    "we demonstrate that the timing model is at least as accurate as other simulation based methods , but significantly reduced computational cost .",
    "we also demonstrate that the co - designed mpc with timing model achieves better tolerance to disturbances in timing than using worst - case timing .",
    "for ease of reading , we have summarized all major notations used throughout the paper in table 1 .",
    "[ allnotation ]    cl + & can bus messages +   + @xmath0 & message chain consisting of sensor and control messages + @xmath1 & 1st sub - message of @xmath0 , i.e. the sensor message + @xmath2 & 2nd sub - message of @xmath0 , i.e. the control message + @xmath3 & transmission duration of @xmath4 + @xmath5 & transmission duration of @xmath6 + @xmath7 & time for preparing @xmath4 + @xmath8 & time for preparing @xmath6 + @xmath9 & sampling interval of @xmath0 + @xmath10 & priority of @xmath0 + @xmath11 & sampling instant of @xmath0 + @xmath12 & time instant when @xmath4 finishes transmission + @xmath13 & time instant when @xmath6 finishes transmission + @xmath14 & time delay between @xmath13 and @xmath11 +   + & mpc control design +   + @xmath15 & state variable of a physical plant + @xmath16 & output of a physical plant + @xmath17 & mpc control signal applied on the physical plant + @xmath18 & cost function for mpc design + @xmath19 & length of mpc prediction horizton + @xmath20 & reference trajectory that mpc tracks +   + & timing model +   + @xmath21 & number of total message chains on the can bus + @xmath22 & deadline state of a message chain @xmath0 + @xmath23 & residue state of a message chain @xmath0 + @xmath24 & delay state of a message chain @xmath0 + @xmath25 & deadline state of all message chains , i.e. @xmath26 $ ] + @xmath27 & residue state of all message chains , @xmath28 $ ] + @xmath29 & delay state of all message chains , @xmath30 $ ] + @xmath31 & index of the message chain being transmitted on can + @xmath32 & state vector of the model , i.e. @xmath33 $ ] + @xmath34 & the timing model +",
    "our main goal is to establish an event - triggered model predictive control design approach for real - time networks .",
    "event \" is defined as a significant moment that should be accounted for by the controller .",
    "for example , each time a sensor message finishes transmission , a model predictive controller can be initiated to leverage the new information .",
    "event - triggered model predictive control fits nicely with the can bus , since the can hardware can generate hardware interrupts when  end of transmission \" events happen .",
    "we propose a timing model so that whenever the model predictive control is triggered by an event , one can predict the timing of future events within a finite time horizon and compute control effort accordingly .",
    "for example , one can predict when a future sensor message will arrive and when the corresponding control effort will be applied , and then compute the control effort for that future time .    without loss of generality , we make the following technical assumptions about message transmission and reception on the can bus :    1 .",
    "the can bus is reliable such that no error occurs in sending and receiving messages .",
    "2 .   at each node , among all messages that are ready for transmission , the message with the highest priority will be sent first .",
    "these two assumptions are valid in real applications , and have been used in many theoretical works related to can @xcite .",
    "consider a set of feedback control loops designed to share a can as illustrated in figure [ fig : network ] .",
    "each feedback control loop utilizes the can to send sampled data from sensors to an mpc controller , and to send control commands from the mpc controller to actuators .",
    "the sensors , mpc controllers , and actuators are connected to the can and are named as sensor nodes , mpc controller nodes , and actuator nodes .",
    "we simplify the design so that each feedback control loop has one sensor node , one mpc controller node , and one actuator node .",
    "this is not to be considered as only allowing single - input - single - output systems because multiple sensors can be integrated into a sensor node , and multiple actuators can be integrated into an actuator node .",
    "the following rules are imposed by this system :    * at the sensor node , a user specified software program samples the state of the plants , and then combines sampled data into a single sensor message for transmission ; * at the mpc controller node , upon reception of a sensor message , a user specified software program extracts sampled data from the sensor message .",
    "the node then computes mpc algorithms , and combines the resulting control commands into a single control message for transmission ; * at the actuator node , upon reception of a control message , a user specified software program extracts control commands from the control message .",
    "the node then issues the control on the actuator ; * all control loops are mutually independent , which means that the sensor messages and control messages of one control loop do not rely on messages from other loops for computation .    therefore , we consider two types of messages related to the control : sensor messages and actuator messages .",
    "the above rules imply a * causality constraint * between sensor and control messages as follows : in each feedback control loop , a sensor message must be transmitted * before * the mpc controller starts computing the control law .",
    "a control message can only be transmitted * after * the control law is computed .      for causality in each feedback control loop , one requires that the transmission of a sensor message be followed by the computation of the control effort , which is then followed by the transmission of a control message .",
    "this process iteratively repeats .",
    "each iteration of this process , beginning from the sampling of sensor and ending at the actuation , is called an _ instance _ , and then the above process for any @xmath35-th feedback control loop is called a _ message chain _ and denoted by @xmath0 . thus , each message chain @xmath0 is composed of recurring instances .",
    "let the indices @xmath36 indicate each of the recurring instances in @xmath0 for the @xmath35-th loop i.e. the @xmath37-th instance of @xmath0 is denoted by @xmath38 $ ] .",
    "figure [ fig : nctask ] illustrates the timing of a message chain when there is no contention .",
    "when no contention occurs , scaledwidth=90.0% ]    the horizontal line in figure [ fig : nctask ] represents the progression of time .",
    "suppose that @xmath38 $ ] starts at the @xmath37-th sampling instant @xmath39 $ ] .",
    "the instance @xmath38 $ ] contains two sub - messages , namely , @xmath40 $ ] and @xmath41 $ ] , where @xmath40 $ ] represents the sensor message , and @xmath41 $ ] represents the control message . also , @xmath42 $ ] is the amount of time for the user specified software program on the sensor node to sample plants and prepare @xmath40 $ ] ; @xmath43 $ ] is the transmission duration of @xmath40 $ ] ; @xmath44 $ ] is the time instant when the transmission of @xmath45 $ ] is completed ; @xmath46 $ ] is the amount of time for the user specified software program on the controller node to extract sensor information , compute the model predictive control , and prepare @xmath41 $ ] .",
    "@xmath46 $ ] can be viewed as the worst case execution time over the finite time horizon that our timing model applies .",
    "we assume that the constant value @xmath46 $ ] approximate its true executing time well ; @xmath47 $ ] is the transmission duration of @xmath41 $ ] ; @xmath48 $ ] is the time instant when the transmission of @xmath49 $ ] is completed ; and @xmath50 $ ] is the sampling interval between @xmath39 $ ] and @xmath51 $ ] . then @xmath44 $ ] represents the time when the sensor message finishes transmission , and @xmath48 $ ] represents the time when the control message finishes transmission .",
    "note that the potential randomness and variations in @xmath43 $ ] and @xmath47 $ ] , which are caused by the possible bit - stuffing , can be significantly reduced by effectively encoding the original payload@xcite .",
    "even when the transmission time is not completely deterministic , the values of @xmath43 $ ] and @xmath47 $ ] will provide a good approximation of the actual transmission time . here again we want to emphasize that the timing model applies to a finite time horizon only and is updated dynamically as part of the mpc scheme .",
    "so the small ( unexpected ) variations in the values of @xmath43 $ ] and @xmath43 $ ] will be tolerated by the control .",
    "there may also exist some general - purpose messages that are not related to the control , but that share the can bus with the feedback control loops .",
    "these general - purpose messages can also be represented by message chains .",
    "for example , one can let a message chain @xmath52 represent a general purpose message by choosing @xmath53=0 $ ] and @xmath54=0 $ ] .",
    "the following equations are satisfied by the parameters of a message chain when there is _ no contention _ : @xmath55 & = \\alpha_n(k)+i_n^1[k]+c_n^1[k ] \\cr \\gamma_n[k]&=\\beta_n[k ] + i_n^2[k]+c_n^2[k ]",
    "\\cr \\alpha_n[k+1]&= \\alpha_n[k ] + t_n[k]\\end{aligned}\\ ] ]    the above equations will not hold when there is contention between messages . since only one message can be transmitted on the can bus at a time , @xmath40 $ ] and @xmath49 $ ] in @xmath38 $ ] may not be transmitted immediately after they are generated .",
    "instead , they have to compete with other messages for access to the can bus , under the csma / ba arbitration scheme .",
    "the priority of @xmath38 $ ] can be represented by @xmath56 $ ] . since each sub - message",
    "@xmath45 $ ] and @xmath49 $ ] in @xmath38 $ ] may have its own priority , we have @xmath57=\\left\\ { \\begin{array}{ll } p_n^1[k ] & { \\rm when}\\ , \\tau_n^{1}[k ] { \\rm \\ ; is\\ ,   transmitted } \\vspace{1mm}\\\\ p_n^2[k ] & { \\rm when}\\ , \\tau_n^{2}[k ] { \\rm \\ ; is\\ ,   transmitted } \\end{array } \\right.\\ ] ] where @xmath58 $ ] and @xmath59 $ ] represent the priorities ( identifier fields ) of @xmath45 $ ] and @xmath49 $ ] , respectively .",
    "we will see in section [ section : timingmodel ] that equation ( [ nocon ] ) will be replaced by a timing model which is able to answer the challenge .",
    "mpc is an advanced control algorithm with increasing popularity in applications .",
    "it iteratively uses a model of the feedback control loop to predict the future control strategy over a finite time horizon @xcite .",
    "however , only the first step of the predicted control strategy is implemented . at the next step ,",
    "the process of predictions are repeated again , yielding a new control strategy .",
    "such prediction horizon keeps shifting forward as time propagate .",
    "for the @xmath35-th feedback control loop in figure [ fig : network ] where @xmath60 , we assume that the plant is an independent , multiple input multiple output , and linear time - invariant system @xmath61 where @xmath62 is the control command , @xmath63 is the plant output , @xmath64 is the plant state , and @xmath65 , @xmath66 and @xmath67 are matrices of proper dimensions .",
    "can based mpc relies on the controller nodes to compute the control effort @xmath62 over a finite time window into the future .",
    "this finite time window is called the prediction horizon .",
    "when a controller node is triggered by the end of the transmission of a sensor message in the same feedback control loop , the time when the sensor reading is obtained will be used as the start time of the prediction horizon . denoting this start time by @xmath68 , an estimate @xmath69 of the state",
    "is first obtained by a filtering algorithm .",
    "let the finite prediction horizon be @xmath70 $ ] , where @xmath19 is the length of the prediction horizon .",
    "the goal of the mpc is to find control commands @xmath62 that brings the predicted plant output @xmath63 as close as possible to a reference trajectory @xmath71 for all @xmath72 $ ] .",
    "a controller is triggered by the end of transmission of sensor messages , and an actuator node can only take actions when receiving a control message .",
    "hence , each model predictive controller only needs to generate one control command for each sensor message received .",
    "the resulting control command is applied to the plant , and remains constant until the next sensor message triggers the controller again .",
    "time delay exists between the moment when the sensor takes measurements , and the moment when the actuator implements the control command .",
    "therefore , the control command @xmath62 in ( [ equation : plant ] ) must be a piecewise constant function @xmath73,\\ , \\ ; t\\in \\big[\\alpha_n[k]\\hspace{-0.7mm}+\\hspace{-0.7mm}\\delta_n[k ] , \\alpha_n[k+1]\\hspace{-0.7mm}+\\hspace{-0.7mm}\\delta_n[k\\hspace{-0.7mm}+\\hspace{-0.7mm}1]\\big)\\ ; , \\ ] ] where @xmath39 $ ] is the @xmath37-th sampling instant of the sensor as shown in figure [ fig : nctask ] , and @xmath74 $ ] is the optimal control command that is generated by the model predictive controller in the sampling interval @xmath75 , \\alpha_n[k+1]\\,)$ ] . also , @xmath76=\\gamma_n[k]-\\alpha_n[k]$ ] is the time delay between the sampling time instant @xmath39 $ ] , and the end time @xmath48 $ ] of the transmission of the control message , as shown in figure [ fig : nctask ] .",
    "let @xmath77 represents the piecewise constant control policy , defined by @xmath62 , where @xmath78 $ ] .",
    "if one can perform online prediction of @xmath76 $ ] for all @xmath37 that fall within the prediction horizon , then the piecewise constant control policy @xmath77 is a finite dimensional vector @xmath79 , \\mu_n[2], ... ,\\mu_n[k], ... ]$ ] for all @xmath37 that fall within the finite prediction horizon @xmath70 $ ] .",
    "a cost function @xmath80 can be defined for the model predictive controller to optimize .",
    "one typical example of the cost function @xcite is @xmath81 where @xmath82 , @xmath83 , and @xmath84 are positive semidefinite weighting matrices chosen by design .",
    "the first term in the integral penalizes the difference between the future plant output and the reference trajectory during the prediction horizon , and the second term is the control penalty .",
    "the last term in the cost function is the terminal cost that ensures the system is stabilized by the controller . in ( [ equation : j ] ) , @xmath63 must be predicted as a function of @xmath64 and @xmath62 for @xmath85 $ ] through the process model in ( [ equation : plant])-([equation : delay ] ) .",
    "if the delays @xmath76 $ ] for all tasks , indexed by @xmath37 , that falls within the interval @xmath70 $ ] can be predicted , then the model predictive control design problem can be formulated as a optimization problem that needs to compute at every @xmath37 : @xmath86 , \\;\\ ; { \\rm solve}\\ ; \\ ; \\min_{\\mathbf{u}_n } j(x_n(t_0 ) , \\mathbf{u}_n)\\end{aligned}\\ ] ] subject to the following constraints : @xmath87 @xmath88 @xmath89,\\ , t\\in \\big[\\alpha_n[k]\\hspace{-0.7mm}+\\hspace{-0.7mm}\\delta_n[k ] , \\alpha_n[k\\hspace{-0.7mm}+\\hspace{-0.7mm}1]\\hspace{-0.7mm}+\\hspace{-0.7mm}\\delta_n[k\\hspace{-0.7mm}+\\hspace{-0.7mm}1]\\big)\\ ; , \\ ] ] where ( [ equation : finaloptimization].a ) represents the constraints on the control command and the plant states . the sets @xmath90 and @xmath91",
    "are assumed to be known .",
    "equations ( [ equation : finaloptimization].b ) and ( [ equation : finaloptimization].c ) represent the physical plant in the process model . the physical plant and the can timing model",
    "are coupled through the delay @xmath76 $ ] in ( [ equation : finaloptimization].c ) .",
    "note that in the cost function @xmath80 , @xmath92 for @xmath93 $ ] must be predicted as a function of @xmath64 and @xmath94 for @xmath93 $ ] through the process model in equation ( [ equation : finaloptimization].b ) and ( [ equation : finaloptimization].c ) .",
    "if there was no contention on the can , the prediction of the time delays @xmath76 $ ] would be trivial .",
    "in fact , using equation ( [ nocon ] ) , the delay @xmath76=\\gamma_n[k]-\\alpha_n[k]=i_n^1[k]+c_n^1[k]+i_n^2[k]+c_n^2[k]$ ] . in this special case the mpc design problem would be the classical problem which would be relatively easy to solve .",
    "we emphasize here that even in this special case , a continuous time mpc may be preferred than the discrete time one since the @xmath76 $ ] may be time - varying .",
    "real - time scheduling of messages under contention introduces time - varying delays @xmath76 $ ] in equation ( [ equation : finaloptimization].c ) .",
    "since mpc design relies on the process model in equation ( [ equation : finaloptimization].b ) and ( [ equation : finaloptimization].c ) , the accurate prediction of @xmath76 $ ] is important to mpc performance .",
    "using the worst case delay would result in poor performance .",
    "figure [ fig : delayeffect ] shows an example of mpc performance under either accurate or inaccurate prediction of @xmath76 $ ]",
    ". the inaccurate prediction of @xmath76 $ ] is chosen as a constant delay from the worst - case analysis @xcite and the accurate prediction of @xmath76 $ ] is the actual time - varying delay of @xmath76 $ ] .",
    "the solid line represents the plant output @xmath63 and the dashed line represents the reference trajectory @xmath95 .",
    "as we can see , using an inaccurate @xmath76 $ ] would lead to an unreliable process model , which severely degrades the performance of mpc .",
    "mpc procedure treats the delay @xmath76 $ ] as a timing constraint",
    ". the accurate prediction of @xmath76 $ ] for messages under contention and priority based scheduling is difficult . to our knowledge",
    ", such model does not exist in the previous literature . to answer this challenge ,",
    "our contribution is to derive a timing model that is able to predict the timing constraints on the can - based control systems .",
    "our goal in this section is to derive a timing model for message chains under contentions that are resolved via the assigned priorities .",
    "this timing model generates predictions for @xmath39 $ ] , @xmath44 $ ] , and @xmath48 $ ] for all @xmath35 and @xmath37 for a finite length time window into the future , which will replace equation ( [ nocon ] ) and then enable the mpc control design in ( [ equation : finaloptimization ] ) . using the timing model , all transmission events , including the start and the end of all sensor and control messages can be inferred . from these timing information",
    "we will be able to estimate the delays @xmath76 $ ] that are needed when computing the mpc .",
    "due to the time varying delays under contention , a continuous - time mpc design approach is a natural choice over discrete time mpc . to support the continuous time mpc , we need to model the scheduled behaviors of message chains as a ( piecewise ) continuous function of @xmath96 .",
    "therefore , we redefine the message chain characteristics in continuous time domain as follows :    for any message chain @xmath0 , an instance @xmath38 $ ] is _ active _ at time @xmath96 if and only if it starts before @xmath96 and its next instance starts after @xmath96 , i.e. @xmath39<t<\\alpha_n[k+1]$ ] . at any time @xmath96",
    ", @xmath0 has only one active instance denoted as @xmath97 , i.e. @xmath98 \\leq t < \\alpha_n[k+1]\\quad { \\rm then\\ ; } \\tau_n(t)\\hspace{-0.1mm}=\\hspace{-0.1mm}\\tau_n[k]\\ ] ]    at any time @xmath96 , we define @xmath99 and @xmath100 as the first and second sub - messages in @xmath97 , i.e. @xmath98 \\leq t < \\alpha_n[k+1 ] , { \\rm then\\ ; } \\tau_n^1(t)\\hspace{-0.1mm}=\\hspace{-0.1mm}\\tau_n^1[k ] \\;\\ ; { \\rm and } \\;\\;\\tau_n^2(t)\\hspace{-0.1mm}=\\hspace{-0.1mm}\\tau_n^2[k ] \\\\\\ ] ]    based on the above definitions , we can convert the message chain characteristics in figure [ fig : nctask ] into a continuous time description for the active task instance @xmath97 . @xmath101 and @xmath102 are the time needed for preparing @xmath99 and @xmath100 .",
    "@xmath103 and @xmath104 are the transmission duration of @xmath99 and @xmath100 .",
    "@xmath105 is the sampling interval of @xmath97 , and @xmath106 is the priority of @xmath97 .",
    "these notations are summarized in table 2 .",
    "[ notation ]    .characteristics of a message chain @xmath0 [ cols=\"^,^ \" , ]         for illustration , we examine the delay @xmath107 $ ] in the third feedback control loop .",
    "the delays in other feedback control loops can be studied using the exactly same procedure .",
    "we know that @xmath107 $ ] is a time interval between the moment when the sensor take measurements and the moment when the actuator take actions .",
    "the sensor in the third feedback control loops take measurements at @xmath108ms , @xmath109ms , @xmath110ms , and @xmath111ms . by closely examining figure [ fig :",
    "truetime ] , we observe that the control message @xmath112 in the third feedback control loop finishes transmission at @xmath113ms , @xmath114ms , @xmath115ms , and @xmath116ms .",
    "therefore , the observation of figure [ fig : truetime ] shows that the value of @xmath107 $ ] is @xmath113ms , @xmath117ms , @xmath118ms , and @xmath113ms , for @xmath119 .",
    "this observation exactly matches the value of @xmath107 $ ] listed in table [ fig : hybriddelay ] .",
    "similarly , we can see that the values of @xmath120 $ ] and @xmath121 $ ] observed from figure [ fig : truetime ] also match that listed in table [ fig : hybriddelay ] .",
    "therefore , we can claim that the hybrid timing model can accurately describe the timing of message chains on the can .      even though truetime and other event - based simulation tools are able to generate the timing sequences of the message chains , running such simulation",
    "takes significant amount of computation resources .",
    "hence these simulations may be too slow for realtime embedded applications .",
    "our timing model is discontinuous at limit number of time points , but continuous the rest of time .",
    "so , running our model only requires significant computation at a small fraction of discrete time points , and the system transition between any two consecutive discrete time points can be directly derived using mathematical equations .",
    "this has caused a significant reduction of computing load when compared to typical simulation based methods . to verify this computational advantage",
    ", we evaluate the computational time of generating scheduled behavior in figure [ fig : truetime ] using both the hybrid timing model and truetime .",
    "the experiment is performed on a macbook computer with processor 2.26 ghz intel core 2 duo , and memory 4 gb 1067mhz ddr3 .",
    "since truetime is written in c++ mex , we also implement the analytical timing model in the same way as truetime .",
    "matlab version 2010rb and the trutime version 2.0 are used for the comparison . for each simulation window length that falls within [ 0 , 100]s , we run both methods 50 times and then calculate the averaged computation time for each method .",
    "fig [ fig : computationalcost ] shows the comparison .",
    "the horizontal axis denotes the window length used for all simulated scheduled behaviors , and the vertical axis denotes the time spent to compute the simulation . in both figures , the computational time linearly increases with window length .",
    "more importantly , we can see that the hybrid timing model is approximately 4000 times faster than truetime , which is a significant improvement for embedded system applications .",
    "we demonstrate the performance of the mpc using the hybrid timing model for a can - based control system operating in dynamic , uncertain environment .",
    "suppose the messages on the can are changed at runtime .",
    "we consider two types of messages adjustments on the can within the time interval @xmath122$]s .",
    "one is the adjustment of the message period as @xmath123=[20 , 40 , 50]\\;{\\rm ms}\\ ] ] the other type of adjustments is the activation of two sporadic messages on the can , which have the following characteristics @xmath124\\hspace{-0.6mm}=\\hspace{-0.6mm}[40 , 0.2 , 1 , 0 , 0]\\,{\\rm ms}\\cr \\left[\\hspace{0mm}t_5(t ) , i_5 ^ 1(t ) , \\hspace{0mm}c_5 ^ 1(t ) , \\hspace{0mm}i_5 ^ 2(t),\\hspace{0mm}c_5 ^ 2(t )   \\hspace{0mm}\\right]\\hspace{-0.6mm}=\\hspace{-0.6mm}[60 , 0.2 , 1 , 0 , 0]\\,{\\rm ms}\\end{aligned}\\ ] ] the sporadic messages are assigned unique identifier field such that @xmath125<p_4[k]<p_1^{1}[k]$ ] .",
    "note that since these adjustments happen at runtime , their characteristics are not available at the off - line design stage .",
    "it is then expected that the timing of the message chains will be disturbed and the controller performance will be affected .",
    "we compare two different approaches of designing mpc for the can - based control system .",
    "the two approaches differ in their way of predicting @xmath76 $ ] . in the first approach ,",
    "the delay @xmath76 $ ] is predicted off - line through the worst - case analysis discussed in @xcite . in the second approach ,",
    "the delay @xmath76 $ ] is predicted online through the hybrid timing model .",
    "figure 6 shows the mpc performance of three feedback control loops under the above two different approaches .",
    "the solid line represents the plant output @xmath63 and the dashed line represents the reference trajectory @xmath95 .",
    "the left plots are results of the first approach that uses the worst - case response time and the right plots are results of the second approach that uses the hybrid timing model .",
    "it is obvious that the second approach ( right plots ) gives better performance than the first approach ( left plots ) .",
    "this is because in the second approach , delays are predicted online using the hybrid timing model of the can , which can accurately predict delay and dynamically compensate for the delay .    also , it is worth mentioning that even in the first approach(left plots ) , mpc performance in the first feedback control loop is better than the other two loops .",
    "this is because the messages in the first feedback control loop are assigned the highest priorities among all messages on the can .",
    "therefore , the difference between the actual delay and the worst - case response time is small in the first feedback control loop .",
    "using even the worst - case response time for mpc design can still give out the acceptable performance for the first feedback control loop .",
    "however , such difference in the second and third feedback control loop will increases , which leads to the degraded mpc performance .",
    "[ fig : twoapproaches ]",
    "the main contribution of this paper is a hybrid timing model for messages scheduled on the can .",
    "we have shown that such timing model enables a model predictive control approach on the can .",
    "it also provides convenient ways to check for schedulability of messages .",
    "this model may be used for co - design of scheduling and mpc for real - time embedded systems on the can . moreover ,",
    "the timing model is a generic mathematical model that can be extended to many applications@xcite .",
    "our simulations show that using the hybrid timing model for mpc can achieve improved performance than using worst case timing .",
    "our future work will extend this hybrid timing model to other real - time communication networks that use message priorities for arbitration , for example , the dynamic segment of flexray @xcite .",
    "almeida l , pedreiras p , fonseca j ( 2002 ) the ftt - can protocol : why and how .",
    "ieee transactions on industrial electronics 49(6):11891201 anta a , tabuada p ( 2009 ) on the benefits of relaxing the periodicity assumption for networked control systems over can . in : proc . of ieee international conference on real - time systems symposium , pp 312    arzen ke ,",
    "cervin a , eker j , sha l ( 2000 ) an introduction to control and scheduling co - design . in : proceedings of the 39th ieee conference on decision and control , ieee , sydney , australia , vol vol.5 , pp 48654870 baruah sk , chen d , mok ak ( 1997 ) jitter concerns in periodic task systems . in : proceedings of the 18th ieee real time systems symposium , ieee , piscataway , nj , usa , pp 6877 camacho ef , bordons alba c ( 2004 ) model predictive control , advanced textbooks in control and signal processing , vol  57 .",
    "springer      cervin a , arzen ke , henriksson d , lluesma m , balbastre p , ripoll i , crespo a ( 2006 ) control loop timing analysis using truetime and jitterbug . in : proceedings of the 2006 ieee international conference on computer - aided control systems design , ieee , munich , germany , pp 11941199      clarke d , mohtadi c , tuffs p ( 1987 ) generalized predictive control algorithm part i. the basic algorithm .",
    "automatica 23(2):137148 davis ri , burns a , bril rj , lukkien jj ( 2007 ) controller area network ( can ) schedulability analysis : refuted , revisited and revised .",
    "real - time systems 35:239272    m , zeng h , giusto p , ghosal a ( 2012 ) understanding and using the controller area network communication protocol .",
    "springer , new york , ny gaid m , cela a , hamam y ( 2006 ) optimal integrated control and scheduling of networked control systems with communication constraints : application to a car suspension system .",
    "control systems technology ,  14(4):776787 gmbh rb ( 1991 ) can specification version 2.0 . tech . rep . ,",
    "stuttgart , germany        henriksson d , cervin a , akesson j , arzen ke ( 2002 ) on dynamic real - time scheduling of model predictive controllers . in : ieee",
    "2002 conf . on decision and control , ieee , las vegas , nv , usa , vol vol.2 , pp 13251330 hespanha jp , naghshtabrizi p , xu y ( 2007 ) a survey of recent results in networked control systems .",
    "ieee proceedings 95(1 )    imer oc , yksel s , baar t ( 2006 ) optimal control of lti systems over unreliable communication links .",
    "automatica 42(9):14291439 jeon jm , kim dw , kim hs , cho yj , lee bh ( 2001 ) an analysis of network - based control system using can ( controller area network ) protocol .",
    "proc of ieee international conference on robotics and automation 4:35773581 lee j , morari m , garcia c ( 1994 ) state - space interpretation of model predictive control .",
    "automatica 30(4):707717 leen g , heffernan d ( 2002 ) ttcan : a new time - triggered controller area network .",
    "microprocessors and microsystems 26(2):7794 liu cl , layland jw ( 1973 ) scheduling algorithms for multiprogramming in a hard - real - time environment .",
    "journal of the acm 20(1):4661    liu g , sun j , zhao y ( 2013 ) design , analysis and real - time implementation of networked predictive control systems .",
    "acta automatica sinica 39(11 ) liu gp , xia y , chen j , rees d , hu w ( 2007 ) networked predictive control of systems with random network delays in both forward and feedback channels .",
    "ieee transactions on industrial electronics 54(3):12821297    loontang p , de  silva cw ( 2006 ) compensation for transmission delays in an ethernet - based control network using variable - horizon predictive control .",
    "ieee transactions on control systems technology 14(4):707718      mayne dq , rawlings jb , rao cv , scokaert pom ( 2000 ) constrained model predictive control : stability and optimality .",
    "automatica 36(6):789814 montestruque la , antsaklis p ( 2004 ) stability of model - based networked control systems with time - varying transmission times .",
    "ieee transactions on automatic control 49(9):15621572 pop t , pop p , eles p , peng z , andrei a ( 2008 ) timing analysis of the flexray communication protocol .",
    "real - time systems 39(1 - 3):205235 rawlings jb ( 2000 ) tutorial overview of model predictive control .",
    "ieee control systems magazine 20(3):3852    richalet j , rault a , testud j , papon j ( 1978 ) model predictive heuristic control : applications to industrial processes .",
    "automatica 14(5):413428 sha l , abdelzaher t , arzen ke , cervin a , baker t , burns a , buttazzo g , caccamo m , lehoczky j , mok ak ,   rzn ke ( 2004 ) real time scheduling theory : a historical perspective .",
    "real - time systems 28(2 - 3):101155 http://dx.doi.org/10.1023/b:time.0000045315.61234.1e    shi z , zhang f ( 2012 ) an analytical model of the can bus for online schedulability test . in : proc.of the third analytic virtual integration of cyber - physical systems workshop ( avicps ) , held in conjunction with the 33rd ieee real - time systems symposium ( rtss2012 ) .",
    "shi z , zhang f ( 2013 ) predicting time - delays under real - time scheduling for linear model predictive control . in : proc.of 2013 international conference on computing , networking and communication ,",
    "workshops cyber physical system , pp 205209 .",
    "zeng h , natale md , giusto p , sangiovanni - vincentelli a ( 2010 ) using statistical methods to compute the probability distribution of message response time in controller area network .",
    "ieee transactions on industrial informatics 6(4):678691    zhang f , szwaykowska k , mooney v , wolf w ( 2008 ) task scheduling for control oriented requirements for cyber - physical systems . in : proc . of 29th ieee real - time systems symposium ( rtss 2008 ) , barcelona , spain ,",
    "pp 4756      zhang l , shi y , chen t , huang b ( 2005 ) a new method for stabilization of networked control with random delays .",
    "automatic control , ieee ",
    "50(8):11771181 zhao y , liu g , rees d ( 2008 ) integrated predictive control and scheduling co - design for networked control systems .",
    "control theory & applications , iet gianluca cena , ivan cibrario bertolotti , adriano valenzano an efficient fixed - length encoding scheme for can . in : proc of 9th ieee international workshop on factory communication systems , pp .",
    "265 - 274 , 2012          shi z , yao n , zhang f ( 2016 ) scheduling feasibility of energy management in micro - grids based on significant moment analysis .",
    "cyber - physical systems foundations , principls , and applications , pp .",
    "431 - 449 , 2016"
  ],
  "abstract_text": [
    "<S> when multiple model predictive controllers are implemented on a shared controller area network ( can ) , their performance may degrade due to the variable timing and delays among messages . </S>",
    "<S> the priority based real - time scheduling of messages on the can introduces complex timing of events , especially when the types and number of messages change at runtime . </S>",
    "<S> this paper introduces a novel hybrid timing model to make runtime predictions on the timing of the messages for a finite time window . </S>",
    "<S> controllers can be designed using the optimization algorithms for model predictive control by considering the timing as optimization constraints . </S>",
    "<S> this timing model allows multiple controllers to share a can without significant degradation in the controller performance . </S>",
    "<S> the timing model also provides a convenient way to check the schedulability of messages on the can at runtime . </S>",
    "<S> simulation results demonstrate that the timing model is accurate and computationally efficient to meet the needs of real - time implementation . </S>",
    "<S> simulation results also demonstrate that model predictive controllers designed when considering the timing constraints have superior performance than the controllers designed without considering the timing constraints . </S>"
  ]
}