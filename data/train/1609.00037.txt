{
  "article_text": [
    "computers are now essential in all branches of science , but most researchers are never taught the equivalent of basic lab skills for research computing . as a result , they take days or weeks to do things that could be done in minutes or hours , are often unable to reproduce their own work ( much less the work of others ) , and have no idea how reliable their computational results are .",
    "this paper presents a set of good computing practices that every researcher can adopt regardless of their current level of technical skill .",
    "these practices , which encompass data management , programming , collaborating with colleagues , organizing projects , tracking work , and writing manuscripts , are drawn from a wide variety of published sources , from our daily lives , and from our work with volunteer organizations that have delivered workshops to over 11,000 people since 2010 .",
    "two years ago a group of researchers involved in software carpentry and data carpentry wrote a paper called `` best practices for scientific computing '' @xcite .",
    "it was well received , but many novices found its litany of tools and techniques intimidating . also , by definition , the `` best '' are a small minority",
    ". what practices are comfortably within reach for the `` rest '' ?",
    "this paper therefore presents a set of `` good enough '' practices for scientific computing , i.e. , a minimum set of tools and techniques that we believe every researcher can and should adopt .",
    "it draws inspiration from many sources @xcite , from our personal experience , and from the experiences of the thousands of people who have taken part in software carpentry and data carpentry workshops over the past six years .",
    "our intended audience is researchers who are working alone or with a handful of collaborators on projects lasting a few days to a few months , and who are ready to move beyond emailing themselves a spreadsheet named ` results-updated-3-revised.xlsx ` at the end of the workday .",
    "a practice is included in our list if large numbers of researchers use it , and large numbers of people are _",
    "still _ using it months after first trying it out .",
    "we include the second criterion because there is no point recommending something that people wo nt actually adopt .",
    "many of our recommendations are for the benefit of the collaborator every researcher cares about most : their future self .",
    "change is hard and if researchers do nt see those benefits quickly enough to justify the pain , they will almost certainly switch back to their old way of doing things .",
    "this rules out many practices , such as code review , that we feel are essential for larger - scale development ( section  [ sec : omitted ] ) .",
    "we organize our recommendations into the following topics :    * data management : saving both raw and intermediate forms ; documenting all steps ; creating tidy data amenable to analysis . *",
    "software : writing , organizing , and sharing scripts and programs used in an analysis . *",
    "collaboration : making it easy for existing and new collaborators to understand and contribute to a project .",
    "* project organization : organizing the digital artifacts of a project to ease discovery and understanding . * tracking changes : recording how various components of your project change over time . *",
    "manuscripts : writing manuscripts in a way that leaves an audit trail and minimizes manual merging of conflict .",
    "we are grateful to arjun raj ( university of pennsylvania ) , steven haddock ( monterey bay aquarium research institute ) , stephen turner ( university of virginia ) , elizabeth wickes ( university of illinois ) , and garrett grolemund ( rstudio ) for their feedback on early versions of this paper , to those who contributed during the outlining of the manuscript , and to everyone involved in data carpentry and software carpentry for everything they have taught us .",
    "data within a project may need to exist in various forms , ranging from what first arrives to what is actually used for the primary analyses .",
    "our recommendations have two main themes .",
    "one is to work towards ready - to - analyze data incrementally , documenting both the intermediate data and the process .",
    "we also describe the key features of `` tidy data '' , which can be a powerful accelerator for analysis @xcite .    1 .",
    "* _ save the raw data  ( 1a)_*. where possible , save data as originally generated ( i.e. by an instrument or from a survey ) .",
    "it is tempting to overwrite raw data files with cleaned - up versions , but faithful retention is essential for re - running analyses from start to finish ; for recovery from analytical mishaps ; and for experimenting without fear .",
    "consider changing file permissions to read - only or using spreadsheet protection features , so it is harder to damage raw data by accident or to hand edit it in a moment of weakness .",
    "+ some data will be impractical to manage in this way .",
    "for example , you should avoid making local copies of large , stable repositories . in that case , record the exact procedure used to obtain the raw data , as well as any other pertinent info , such as an official version number or the date of download .",
    "* _ create the data you wish to see in the world  ( 1b)_*. create the raw dataset you _ wish _ you had received .",
    "the goal here is to improve machine and human readability , but _ not _ to do vigorous data filtering or add external information .",
    "machine readability allows automatic processing using computer programs , which is important when others want to reuse your data .",
    "specific examples of non - destructive transformations that we recommend at the beginning of analysis : + _ file formats _ : convert data from closed , proprietary formats to open , non - proprietary formats that ensure machine readability across time and computing setups @xcite .",
    "csv is good for tabular data , json , yaml , or xml for non - tabular data such as graphs , and hdf5 for certain kinds of structured data .",
    "+ _ variable names _ : replace inscrutable variable names and artificial data codes with self - explaining alternatives , e.g. , rename variables called ` name1 ` and ` name2 ` to ` personal_name ` and ` family_name ` , recode the treatment variable from ` 1 ` vs. ` 2 ` to ` untreated ` vs. ` treated ` , and replace artificial codes for missing data , such as `` -99 '' , with ` na`s , a code used in most programming languages to indicate that data is `` not available '' @xcite .",
    "+ _ filenames _ : store especially useful metadata as part of the filename itself , while keeping the filename regular enough for easy pattern matching . for example , a filename like ` 2016-05-alaska-b.csv ` makes it easy for both people and programs to select by year or by location .",
    "3 .   * _ create analysis - friendly data  ( 1c ) _ * : analysis can be much easier if you are working with so - called `` tidy '' data @xcite .",
    "two key principles are : + _ make each column a variable _ : do nt cram two variables into one , e.g. , `` male_treated '' should be split into separate variables for sex and treatment status .",
    "store units in their own variable or in metadata , e.g. , `` 3.4 '' instead of `` 3.4 kg '' .",
    "+ _ make each row an observation _ :",
    "data often comes in a wide format , because that facilitated data entry or human inspection .",
    "imagine one row per field site and then columns for measurements made at each of several time points .",
    "be prepared to gather such columns into a variable of measurements , plus a new variable for time point .",
    "fig  [ fig : tidy ] presents an example of such a transformation .",
    "* _ record all the steps used to process data  ( 1d ) _ * : data manipulation is as integral to your analysis as statistical modelling and inference . if you do not document this step thoroughly , it is impossible for you , or anyone else , to repeat the analysis .",
    "+ the best way to do this is to write scripts for _ every _ stage of data processing .",
    "this might feel frustratingly slow , but you will get faster with practice",
    ". the immediate payoff will be the ease with which you can re - do data preparation when new data arrives .",
    "you can also re - use data preparation logic in the future for related projects .",
    "+ when scripting is not feasible , it s important to clearly document every manual action ( what menu was used , what column was copied and pasted , what link was clicked , etc . ) .",
    "often you can at least capture _ what _ action was taken , if not the complete _",
    "why_. for example , choosing a region of interest in an image is inherently interactive , but you can save the region chosen as a set of boundary coordinates .",
    "* _ anticipate the need to use multiple tables  ( 1e ) _ * : raw data , even if tidy , is not necessarily complete . for example , the primary data table might hold the heart rate for individual subjects at rest and after a physical challenge , identified via a subject i d .",
    "demographic variables , such as subject age and sex , are stored in a second table and will need to be brought in via merging or lookup .",
    "this will go more smoothly if subject i d is represented in a common format in both tables , e.g. , always as `` 14025 '' versus `` 14,025 '' in one table and `` 014025 '' in another .",
    "it is generally wise to give each record or unit a unique , persistent key and to use the same names and codes when variables in two datasets refer to the same thing .",
    "* _ submit data to a reputable doi - issuing repository so that others can access and cite it .",
    "( 1f ) _ * your data is as much a product of your research as the papers you write , and just as likely to be useful to others ( if not more so ) .",
    "sites such as figshare , dryad , and zenodo allow others to find your work , use it , and cite it ; we discuss licensing in section  [ sec : collaboration ] below . follow your research community s standards for how to provide metadata .",
    "note that there are two types of metadata : metadata about the dataset as a whole and metadata about the content within the dataset .",
    "if the audience is humans , write the metadata ( the readme file ) for humans .",
    "if the audience includes automatic metadata harvesters , fill out the formal metadata and write a good readme file for the humans @xcite .    taken in order",
    ", the recommendations above will produce intermediate data files with increasing levels of cleanliness and task - specificity .",
    "an alternative approach to data management would be to fold all data management tasks into a monolithic procedure for data analysis , so that intermediate data products are created `` on the fly '' and stored only in memory , not saved as distinct files .",
    "while the latter approach may be appropriate for projects in which very little data cleaning or processing is needed , we recommend the explicit creation and retention of intermediate products . saving intermediate files makes it easy to re - run _ parts _ of a data analysis pipeline , which in turn makes it less onerous to revisit and improve specific data processing tasks . breaking a lengthy workflow into pieces makes it easier to understand , share , describe , and modify .",
    "if you or your group are creating tens of thousands of lines of software for use by hundreds of people you have never met , you are doing software engineering . if you re writing a few dozen lines now and again , and are probably going to be its only user , you may not be doing engineering , but you can still make things easier on yourself by adopting a few key engineering practices .",
    "what s more , adopting these practices will make it easier for people to understand and ( re)use your code .",
    "the core realization in these practices is that _ readable _ , _ reusable _ , and _",
    "are all side effects of writing _",
    "modular _ code , i.e. , of building programs out of short , single - purpose functions with clearly - defined inputs and outputs .    1 .",
    "* _ place a brief explanatory comment at the start of every program  ( 2a ) _ * , no matter how short it is .",
    "that comment should include at least one example of how the program is used : remember , a good example is worth a thousand words . where possible , the comment should also indicate reasonable values for parameters .",
    "an example of such a comment is show below .",
    "+ .... synthesize image files for testing circularity estimation algorithm .",
    "usage : make_images.py -f fuzzing -n flaws -o output -s seed -v -w size    where : -f fuzzing = fuzzing range of blobs ( typically 0.0 - 0.2 ) -n flaws    = p(success ) for geometric distribution of # flaws / sample ( e.g. 0.5 - 0.8 ) -o output   = name of output file -s seed     = random number generator seed ( large integer ) -v          = verbose -w size     = image width / height in pixels ( typically 480 - 800 ) .... 2 .",
    "* _ decompose programs into functions  ( 2b ) _ * that are no more than one page ( about 60 lines ) long , do not use global variables ( constants are ok ) , and take no more than half a dozen parameters . the key motivation here is to fit the program into the most limited memory of all : ours .",
    "human short - term memory is famously incapable of holding more than about seven items at once @xcite",
    ". if we are to understand what our software is doing , we must break it into chunks that obey this limit , then create programs by combining these chunks .",
    "* _ be ruthless about eliminating duplication  ( 2c)_*. write and re - use functions instead of copying and pasting source code , and use data structures like lists rather than creating lots of variables called ` score1 ` , ` score2 ` , ` score3 ` , etc .",
    "+ the easiest code to debug and maintain is code you did nt actually write , so * _ always search for well - maintained software libraries that do what you need  ( 2d ) _ * before writing new code yourself , and * _ test libraries before relying on them  ( 2e)_*. 4 .",
    "* _ give functions and variables meaningful names  ( 2f ) _ * , both to document their purpose and to make the program easier to read .",
    "as a rule of thumb , the greater the scope of a variable , the more informative its name should be : while it s acceptable to call the counter variable in a loop ` i ` or ` j ` , the major data structures in a program should _ not _ have one - letter names .",
tab completion * + almost all modern text editors provide _ tab completion _ , so that typing the first part of a variable name and then pressing the tab key inserts the completed name of the variable . employing",
    "this means that meaningful longer variable names are no harder to type than terse abbreviations .",

    "* _ make dependencies and requirements explicit .",
    "( 2 g ) _ * this is usually done on a per - project rather than per - program basis , i.e. , by adding a file called something like ` requirements.txt ` to the root directory of the project , or by adding a `` getting started '' section to the ` readme ` file . 6 .   * _ do not comment and uncomment sections of code to control a program s behavior  ( 2h ) _ * , since this is error prone and makes it difficult or impossible to automate analyses . instead ,",
    "put if / else statements in the program to control what it does .",
    "_ provide a simple example or test data set  ( 2i ) _ * that users ( including yourself ) can run to determine whether the program is working and whether it gives a known correct output for a simple known input . such a `` build and smoke test '' is particularly helpful when supposedly - innocent changes are being made to the program , or when it has to run on several different machines , e.g. , the developer s laptop and the department s cluster .",
    "* _ submit code to a reputable doi - issuing repository  ( 2j ) _ * upon submission of paper , just as you do with data .",
    "your software is as much a product of your research as your papers , and should be as easy for people to credit .",
    "dois for software are provided by figshare and zenodo .",
    "you may start working on projects by yourself or with a small group of collaborators you already know , but you should design it to make it easy for new collaborators to join",
    ". these collaborators might be new grad students or postdocs in the lab , or they might be _ you _ returning to a project that has been idle for some time . as summarized in @xcite ,",
    "you want to make it easy for people to set up a local workspace so that they _ can _ contribute , help them find tasks so that they know _ what _ to contribute , and make the contribution process clear so that they know _ how _ to contribute .",
    "you also want to make it easy for people to give you credit for your work .    1 .",
    "* _ create an overview of your project .",
    "( 3a ) _ * have a short file in the project s home directory that explains the purpose of the project .",
    "this file ( generally called ` readme ` , ` readme.txt ` , or something similar ) should contain the project s title , a brief description , up - to - date contact information , and an example or two of how to run various cleaning or analysis tasks .",
    "it is often the first thing users of your project will look at , so make it explicit that you welcome contributors and point them to ways they can help .",
    "+ you should also create a ` contributing ` file that describes what people need to do in order to get the project going and contribute to it , i.e. , dependencies that need to be installed , tests that can be run to ensure that software has been installed correctly , and guidelines or checklists that your project adheres to .",
    "* _ create a shared public `` to - do '' list  ( 3b)_*. this can be a plain text file called something like ` notes.txt ` or ` todo.txt ` , or you can use sites such as github or bitbucket to create a new _ issue _ for each to - do item .",
    "( you can even add labels such as `` low hanging fruit '' to point newcomers at issues that are good starting points . )",
    "whatever you choose , describe the items clearly so that they make sense to newcomers .",
    "* _ make the license explicit .",
    "( 3c ) _ * have a ` license ` file in the project s home directory that clearly states what license(s ) apply to the project s software , data , and manuscripts .",
    "lack of an explicit license does not mean there is nt one ; rather , it implies the author is keeping all rights and others are not allowed to re - use or modify the material . + we recommend creative commons licenses for data and text , either cc-0 ( the `` no rights reserved '' license ) or cc - by ( the `` attribution '' license , which sharing and reuse but requires people to give appropriate credit to the creators ) . for software , we recommend a permissive license such as the mit , bsd , or apache license @xcite .",
what not to do * + we recommend _ against _ the `` no commercial use '' variations of the creative commons licenses because they may impede some forms of re - use .",
    "for example , if a researcher in a developing country is being paid by her government to compile a public health report , she will be unable to include your data if the license says `` non - commercial '' .",
    "we recommend permissive software licenses rather than the gnu general public license ( gpl ) because it is easier to integrate permissively - licensed software into other projects , see chapter three in @xcite .",
make the project citable  ( 3d ) _ * by including a ` citation ` file in the project s home directory that describes how to cite this project as a whole , and where to find ( and how to cite ) any data sets , code , figures , and other artifacts that have their own dois .",
    "the example below shows the ` citation ` file for the ecodata retriever ; for an example of a more detailed ` citation ` file , see the one for the khmer project .",
    "+ .... please cite this work as :    morris , b.d . and",
    "white . 2013 . \"",
    "the ecodata retriever : improving access to existing ecological data . \"",
    "plos one 8:e65848 .",
    "organizing the files that make up a project in a logical and consistent directory structure will help you and others keep track of them .",
    "our recommendations for doing this are drawn primarily from @xcite",
    ".    1 .   *",
    "_ put each project in its own directory , which is named after the project .",
    "( 4a ) _ * like deciding when a chunk of code should be made a function , the ultimate goal of dividing research into distinct projects is to help you and others best understand your work .",
    "some researchers create a separate project for each manuscript they are working on , while others group all research on a common theme , data set , or algorithm into a single project . + as a rule of thumb , divide work into projects based on the overlap in data and code files .",
    "if two research efforts share no data or code , they will probably be easiest to manage independently .",
    "if they share more than half of their data and code , they are probably best managed together , while if you are building tools that are used in several projects , the common code should probably be in a project of its own . 2 .",
    "* _ put text documents associated with the project in the ` doc ` directory .",
    "( 4b ) _ * this includes files for manuscripts , documentation for source code , and/or an electronic lab notebook recording your experiments .",
    "subdirectories may be created for these different classes of files in large projects .",
    "* _ put raw data and metadata in a ` data ` directory , and files generated during cleanup and analysis in a ` results ` directory  ( 4c ) _ * , where `` generated files '' includes intermediate results , such as cleaned data sets or simulated data , as well as final results such as figures and tables .",
    "+ the ` results ` directory will _ usually _ require additional subdirectories for all but the simplest projects .",
    "intermediate files such as cleaned data , statistical tables , and final publication - ready figures or tables should be separated clearly by file naming conventions or placed into different subdirectories ; those belonging to different papers or other publications should be grouped together .",
    "* _ put project source code in the ` src ` directory .",
    "( 4d ) _ * ` src ` contains all of the code written for the project .",
    "this includes programs written in interpreted languages such as r or python ; those written compiled languages like fortran , c++ , or java ; as well as shell scripts , snippets of sql used to pull information from databases ; and other code needed to regenerate the results . +",
    "this directory may contain two conceptually distinct types of files that should be distinguished either by clear file names or by additional subdirectories .",
    "the first type are files or groups of files that perform the core analysis of the research , such as data cleaning or statistical analyses .",
    "these files can be thought of as the `` scientific guts '' of the project .",
    "+ the second type of file in ` src ` is controller or driver scripts that combine the core analytical functions with particular parameters and data input / output commands in order to execute the entire project analysis from start to finish . a controller script for a simple project , for example , may read a raw data table , import and apply several cleanup and analysis functions from the other files in this directory , and create and save a numeric result .",
    "for a small project with one main output , a single controller script should be placed in the main ` src ` directory and distinguished clearly by a name such as `` runall '' .",
    "* _ put external scripts , or compiled programs in the ` bin ` directory  ( 4e)_*. ` bin ` contains scripts that are brought in from elsewhere , and executable programs compiled from code in the ` src ` directory .",
    "projects that have neither will not require ` bin ` .",
scripts vs.  programs * + we use the term `` script '' to mean `` something that is executed directly as - is '' , and `` program '' to mean `` something that is explicitly compiled before being used '' .",
    "the distinction is more one of degree than kind ",
    "libraries written in python are actually compiled to bytecode as they are loaded , for example  so one other way to think of it is `` things that are edited directly '' and `` things that are not
    "_ name all files to reflect their content or function .",
    "( 4f ) _ * for example , use names such as ` bird_count_table.csv ` , ` manuscript.md ` , or ` sightings_analysis.py ` .",
    "do _ not _ using sequential numbers ( e.g. , ` result1.csv ` , ` result2.csv ` ) or a location in a final manuscript ( e.g. , ` fig_3_a.png ` ) , since those numbers will almost certainly change as the project evolves .",
    "the diagram below provides a concrete example of how a simple project might be organized following these recommendations :    .... .",
    "....    the root directory contains a ` readme ` file that provides an overview of the project as a whole , a ` citation ` file that explains how to reference it , and a ` license ` file that states the licensing .",
    "the ` data ` directory contains a single csv file with tabular data on bird counts ( machine - readable metadata could also be included here ) .",
    "the ` src ` directory contains ` sightings_analysis.py ` , a python file containing functions to summarize the tabular data , and a controller script ` runall.py ` that loads the data table , applies functions imported from ` sightings_analysis.py ` , and saves a table of summarized results in the ` results ` directory .",
    "this project does nt have a ` bin ` directory , since it does not rely on any compiled software .",
    "the ` doc ` directory contains two text files written in markdown , one containing a running lab notebook describing various ideas for the project and how these were implemented and the other containing a running draft of a manuscript describing the project findings .",
    "keeping track of changes that you or your collaborators make to data and software is a critical part of research .",
    "being able to reference or retrieve a specific version of the entire project aids in reproducibility for you leading up to publication , when responding to reviewer comments , and when providing supporting information for reviewers , editors , and readers .",
    "we believe that the best tools for tracking changes are the version control systems that are used in software development , such as git , mercurial , and subversion . they keep track of what was changed in a file when and by whom , and synchronize changes to a central server so that many users can manage changes to the same set of files .",
    "although all of the authors use version control daily for all of their projects , we recognize that many newcomers to computational science find version control to be one of the more difficult practices to adopt .",
    "we therefore recommend that projects adopt _ either _ a systematic manual approach for managing changes _ or _ version control in its full glory .",
    "whatever system you chose , we recommend that you use it in the following way :    1 .   * _ back up ( almost ) everything created by a human being as soon as it is created .",
    "( 5a ) _ * this includes scripts and programs of all kinds , software packages that your project depends on , and documentation .",
    "a few exceptions to this rule are discussed below .",
    "* _ keep changes small .",
    "( 5b ) _ * each change should not be so large as to make the change tracking irrelevant .",
    "for example , a single change such as `` revise script file '' that adds or changes several hundred lines is likely too large , as it will not allow changes to different components of an analysis to be investigated separately .",
    "similarly , changes should not be broken up into pieces that are too small . as a rule of thumb , a good size for a single change",
    "is a group of edits that you could imagine wanting to undo in one step at some point in the future .",
    "_ share changes frequently .",
    "( 5c ) _ * everyone working on the project should share and incorporate changes from others on a regular basis .",
    "do not allow individual investigator s versions of the project repository to drift apart , as the effort required to merge differences goes up faster than the size of the difference .",
    "this is particularly important for the manual versioning procedure describe below , which does not provide any assistance for merging simultaneous , possibly conflicting , changes .",
    "* _ create , maintain , and use a checklist for saving and sharing changes to the project .",
    "( 5d ) _ * the list should include writing log messages that clearly explain any changes , the size and content of individual changes , style guidelines for code , updating to - do lists , and bans on committing half - done work or broken code .",
    "see @xcite for more on the proven value of checklists .",
    "our first suggested approach , in which everything is done by hand , has three parts :    1 .",
    "* _ store each project in a folder that is mirrored off the researcher s working machine  ( 5e ) _ * by a system such as dropbox , and synchronize that folder at least daily .",
    "it may take a few minutes , but that time is repaid the moment a laptop is stolen or its hard drive fails .",
    "2 .   * _ add a file called ` changelog.txt ` to the project s ` docs ` subfolder  ( 5f ) _ * , and make dated notes about changes to the project in this file in reverse chronological order ( i.e. , most recent first ) .",
    "this file is the equivalent of a lab notebook , and should contain entries like those shown below .",
    "+ .... # # 2016 - 04 - 08    * switched to cubic interpolation as default .",
    "* moved question about family 's tb history to end of questionnaire .",
    "# # 2016 - 04 - 06    * added option for cubic interpolation . * removed question about staph exposure ( can be inferred from blood test results ) . ....",
    "* _ copy the entire project whenever a significant change has been made  ( 5 g ) _ * ( i.e. , one that materially affects the results ) , and store that copy in a sub - folder whose name reflects the date in the area that s being synchronized .",
    "this approach results in projects being organized as shown below : + .... .                ....",
    "+ here , the ` project_name ` folder is mapped to external storage ( such as dropbox ) , ` current ` is where development is done , and other folders within ` project_name ` are old versions .",
data is cheap , time is expensive * + copying everything like this may seem wasteful , since many files wo nt have changed , but consider : a terabyte hard drive costs about $ 50 retail , which means that 50 gbyte costs less than a latte . provided large data files are kept out of the backed - up area ( discussed below ) , this approach costs less than the time it would take to select files by hand for copyingthis manual procedure satisfies the requirements outlined above without needing any new tools . if multiple researchers are working on the same project , though",
    ", they will need to coordinate so that only a single person is working on specific files at any time .",
    "in particular , they may wish to create one change log file per contributor , and to merge those files whenever a backup copy is made .",
    "what the manual process described above requires most is self - discipline .",
    "the version control tools that underpin our second approach  the one all authors use for their projects  dont just accelerate the manual process : they also automate some steps while enforcing others , and thereby require less self - discipline for more reliable results .    box  2 briefly explains how version control systems work .",
    "it s hard to know what version control tool is most widely used in research today , but the one that s most talked about is undoubtedly git .",
    "this is largely because of github , a popular hosting site that combines the technical infrastructure for collaboration via git with a modern web interface .",
    "github is free for public and open source projects and for users in academia and nonprofits .",
    "gitlab is a well - regarded alternative that some prefer , because the gitlab platform itself is free and open source .    for those who find git s command - line syntax inconsistent and confusing ,",
    "mercurial is a good choice ; bitbucket provides free hosting for both git and mercurial repositories , but does not have nearly as many scientific users .",
    "the benefits of version control systems do nt apply equally to all file types .",
    "in particular , version control can be more or less rewarding depending on file size and format .",
    "first , today s version control systems are not designed to handle megabyte - sized files , never mind gigabytes , so large data or results files should not be included .",
    "what s `` large '' ? as a benchmark , note that the limit for an individual file on github is 100 mb .",
    "raw data should not change , and therefore should not absolutely require version tracking .",
    "keeping intermediate data files and other results under version control is also not strictly necessary if you can re - generate them from raw data and software .",
    "however , if data and results are small , we still recommend placing them under version control for ease of access by collaborators and for comparison across versions .",
    "second , file comparison in version control systems is optimized for plain text files , such as source code .",
    "the ability to see so - called `` diffs '' is one of the great joys of version control .",
    "unfortunately , microsoft office files ( like the ` .docx ` files used by word ) or other binary files , e.g. , pdfs , can be stored in a version control system , but it is not possible to pinpoint specific changes from one version to the next .",
    "tabular data ( such as csv files ) can be put in version control , but changing the order of the rows or columns will create a big change for the version control system , even if the data itself has not changed .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ * inadvertent sharing * + researchers dealing with data subject to legal restrictions that prohibit sharing ( such as medical data ) should be careful not to put data in public version control systems .",
    "some institutions may provide access to private version control systems , so it is worth checking with your it department .",

    "an old joke says that doing the research is the first 90% of any project ; writing up is the other 90% .",
    "while writing is rarely addressed in discussions of scientific computing , computing has changed scientific writing just as much as it has changed research .",
    "a common practice in academic writing is for the lead author to send successive versions of a manuscript to coauthors to collect feedback , which is returned as changes to the document , comments on the document , plain text in email , or a mix of all three .",
    "this results in a lot of files to keep track of , and a lot of tedious manual labor to merge comments to create the next master version .    instead of an email - based workflow",
    ", we recommend mirroring good practices for managing software and data to make writing scalable , collaborative , and reproducible . as with our recommendations for version control in general",
    ", we suggest that groups choose one of two different approaches for managing manuscripts .",
    "the goals of both are to :    * ensure that text is accessible to yourself and others now and in the future by making a single master document that is available to all coauthors at all times . *",
    "reduce the chances of work being lost or people overwriting each other s work .",
    "* make it easy to track and combine contributions from multiple collaborators . *",
    "avoid duplication and manual entry of information , particularly in constructing bibliographies , tables of contents , and lists . *",
    "make it easy to regenerate the final published form ( e.g. , a pdf ) and to tell if it is up to date .",
    "* make it easy to share that final version with collaborators and to submit it to a journal .",
the first rule is  * + the workflow you choose is less important than having all authors agree on the workflow _ before _ writing starts .",
    "make sure to also agree on a single method to provide feedback , be it an email thread or mailing list , an issue tracker ( like the ones provided by github and bitbucket ) , or some sort of shared online to - do listour first alternative has two parts :    1 .",
    "* _ write manuscripts using online tools with rich formatting , change tracking , and reference management  ( 6a ) _ * , such as google docs . with the document",
    "online , everyone s changes are in one place , and hence do nt need to be merged manually .",
    "* _ include a ` publications ` file in the project s ` doc ` directory  ( 6b ) _ * with metadata about each online manuscript ( e.g. , their urls ) .",
    "this is analogous to the ` data ` directory , which might contain links to the location of the data file(s ) rather than the actual files .",
    "we realize that in many cases , even this solution is asking too much from collaborators who see no reason to move forward from desktop gui tools . to satisfy them",
    ", the manuscript can be converted to a desktop editor file format ( e.g. , microsoft word s ` .docx ` or libreoffice s ` .odt ` ) after major changes , then downloaded and saved in the ` doc ` folder .",
    "unfortunately , this means merging some changes and suggestions manually , as existing tools can not always do this automatically when switching from a desktop file format to text and back ( although pandoc can go a long way ) .",
    "the second approach treats papers exactly like software , and has been used by researchers in mathematics , astronomy , physics , and related disciplines for decades :    1 .",
    "* _ write the manuscript in a plain text format that permits version control  ( 6c ) _ * such as latex or markdown , and then convert them to other formats such as pdf as needed using scriptable tools like pandoc .",
    "2 .   * _ include tools needed to compile manuscripts in the project folder  ( 6d ) _ * and keep them under version control just like tools used to do simulation or analysis .",
    "using a version control system provides good support for finding and merging differences resulting from concurrent changes .",
    "it also provides a convenient platform for making comments and performing review .",
    "this approach re - uses the version control tools and skills used to manage data and software , and is a good starting point for fully - reproducible research .",
    "however , it requires all contributors to understand a much larger set of tools , including markdown or latex , make , bibtex , and git / github .",
    "the first draft of this paper recommended always using plain text in version control to manage manuscripts , but several reviewers pushed back forcefully .",
    "for example , stephen turner wrotetry to explain the notion of compiling a document to an overworked physician you collaborate with .",
    "oh , but before that , you have to explain the difference between plain text and word processing . and text editors . and markdown / latex compilers . and bibtex . and git . and github .",
    "meanwhile he / she is getting paged from the or      as much as we want to convince ourselves otherwise , when you have to collaborate with those outside the scientific computing bubble , the barrier to collaborating on papers in this framework is simply too high to overcome .",
    "good intentions aside , it always comes down to `` just give me a word document with tracked changes , '' or similarsimilarly , arjun raj said in a blog postgoogle docs excels at easy sharing , collaboration , simultaneous editing , commenting and reply - to - commenting .",
    "sure , one can approximate these using text - based systems and version control .",
    "the question is why anyone would like to     the goal of reproducible research is to make sure one can  reproduce  computational analyses .",
    "the goal of version control is to track changes to source code .",
    "these are fundamentally distinct goals , and while there is some overlap , version control is merely a tool to help achieve that , and comes with so much overhead and baggage that it is often not worth the effort .",
in keeping with our goal of recommending `` good enough '' practices , we have therefore included online , collaborative editing in something like google docs .",
    "we still recommend _ against _ traditional desktop tools like libreoffice and microsoft word because they make collaboration more difficult than necessary .",
    "supplementary materials often contain much of the work that went into the project , such as tables and figures or more elaborate descriptions of the algorithms , software , methods , and analyses . in order to make these materials as accessible to others as possible ,",
    "do not rely solely on the pdf format , since extracting data from pdfs is notoriously hard .",
    "instead , we recommend separating the results that you may expect others to reuse ( e.g. , data in tables , data behind figures ) into separate , text - format files .",
    "the same holds for any commands or code you want to include as supplementary material : use the format that most easily enables reuse ( source code files , unix shell scripts etc ) .",
    "we have deliberately left many good tools and practices off our list , including some that we use daily , because they only make sense on top of the core practices described above , or because it takes a larger investment before they start to pay off .    * branches * : :    a _ branch _ is a `` parallel universe '' within a version control    repository .",
    "developers create branches so that they can make multiple    changes to a project independently .",
    "they are central to the way that    experienced developers use systems like git , but they add an extra    layer of complexity to version control for newcomers .",
    "programmers got    along fine in the days of cvs and subversion without relying heavily    on branching , and branching can be adopted without significant    disruption after people have mastered a basic edit - commit workflow .",
    "* build tools * : :    tools like make were    originally developed to recompile pieces of software that had fallen    out of date .",
    "they are now used to regenerate data and entire papers :    when one or more raw input files change , make can automatically re - run    those parts of the analysis that are affected , regenerate tables and    plots , and then regenerate the human - readable pdf that depends on    them .",
    "however , newcomers can achieve the same behavior by writing    shell scripts that re - run everything ; these may do unnecessary work ,    but given the speed of today s machines , that is unimportant for small    projects .",
    "* unit tests * : :    a _ unit test _ is a small test of one particular feature of a piece of    software . projects rely on unit tests to prevent _ regression _ , i.e. ,    to ensure that a change to one part of the software does nt break    other parts . while unit tests are essential to the health of large    libraries and programs , we have found that they usually are nt    compelling for solo exploratory work .",
    "( note , for example , the lack of    a ` test ` directory in noble s rules @xcite . ) rather than advocating    something which people are unlikely to adopt , we have left unit    testing off this list . * continuous integration * : :    tools like travis - ci automatically    run a set of user - defined commands whenever changes are made to a    version control repository .",
    "these commands typically execute tests to    make sure that software hasnt regressed , i.e. , that things which used    to work still do .",
    "these tests can be run either before changes are    saved ( in which case the changes can be rejected if something fails )    or after ( in which case the project s contributors can be notified of    the breakage ) .",
    "ci systems are invaluable in large projects with many    contributors , but pay fewer dividends in smaller projects where code    is being written to do specific analyses . * profiling and performance tuning * : :    _ profiling _ is the act of measuring where a program spends its time ,    and is an essential first step in _ tuning _ the program ( i.e. , making    it run faster ) .",
    "both are worth doing , but only when the program s    performance is actually a bottleneck : in our experience , most users    spend more time getting the program right in the first place .",
    "* coverage * : :    every modern programming language comes with tools to report the    _ coverage _ of a set of test cases , i.e. , the set of lines that are and    are nt actually executed when those tests are run . but as with unit    testing , this only starts to pay off once the project grows larger ,    and is therefore not recommended here . * the semantic web *",
    ": :    ontologies and other formal definitions of data are useful , but in our    experience , even simplified things like dublin    core are rarely encountered in the    wild .",
    "* documentation * : :    good documentation is a key factor in software adoption , but in    practice , people wo nt write comprehensive documentation until they    have collaborators who will use it . they will , however , quickly see    the point of a brief explanatory comment at the start of each script ,    so we have recommended that as a first step . *",
    "a bibliography manager * : :    researchers should use a reference manager of some sort , such as    zotero , and should also obtain and use    an orcid to identify themselves in their    publications , but discussion of those is outside the scope of this    paper . * code reviews and pair programming * : :    these practices are valuable in projects with multiple people making    large software contributions , which is not typical for the intended    audience for this paper @xcite .",
    "one important observation about this list is that many experienced programmers actually do some or all of these things even for small projects .",
    "it makes sense for them to do so because ( a ) they ve already paid the learning cost of the tool , so the time required to implement for the `` next '' project is small , and ( b ) they understand that their project will need some or all of these things as it scales , so they might as well put it in place now .",
    "the problem comes when those experienced developers give advice to people who",
    "_ havent _ already mastered the tools , and _ do nt _ realize ( yet ) that they will save time if and when their project grows .",
    "in that situation , advocating unit testing with coverage checking and continuous integration is more likely to scare newcomers off than to aid them .",
    "we have outlined a series of practices for scientific computing based on our collective experience , and the experience of the thousands of researchers we have met through software carpentry , data carpentry , and similar organizations .",
    "these practices are pragmatic , accessible to people who consider themselves computing novices , and can be applied by both individuals and groups .",
    "most importantly , these practices make researchers more productive individually by enabling them to get more done in less time and with less pain .",
    "they also accelerate research as a whole by making computational work ( which increasingly means _",
    "all _ work ) more reproducible .    but",
    "progress will not happen by itself .",
    "universities and funding agencies need to support training for researchers in the use of these tools .",
    "such investment will improve confidence in the results of computational work and allow us to make more rapid progress on important research questions .",
    "10    wilson g , aruliah da , brown ct , hong npc , davis m , guy rt , et  al .",
    "best practices for scientific computing . plos biology .",
    "2014;12(1):e1001745 . doi:10.1371/journal.pbio.1001745 .",
    "gentzkow m , shapiro jm .",
    "code and data for the social sciences : a practitioner s guide ; 2014 .",
    "available from : http://faculty.chicagobooth.edu/matthew.gentzkow/research/codeanddata.pdf .",
    "noble ws . .",
    "plos computational biology .",
    "2009;5(7 ) .",
    "doi:10.1371/journal.pcbi.1000424 .",
    "brown ct . how to grow a sustainable software development process ; 2015 . available from : http://ivory.idyll.org/blog/2015-growing-sustainable-software-development-process.html .",
    "wickham h. tidy data .",
    "journal of statistical software . 2014;59(1):123 .",
    "doi:10.18637/jss.v059.i10 .    kitzes j. reproducible workflows ; 2016 . available from : http://datasci.kitzes.com/lessons/python/reproducible_workflow.html .",
    "sandve gk , nekrutenko a , taylor j , hovig e. ten simple rules for reproducible computational research .",
    "plos computational biology .",
    "2013;9(10 ) .",
    "doi : doi:10.1371/journal.pcbi.1003285 .",
    "hart e , barmby p , lebauer d , michonneau f , mount s , poisot t , et  al .. ten simple rules for digital data storage ; 2015 .    of  illinois  library u. file formats and organization;. available from : http://www.library.illinois.edu/sc/services/data_management/file_formats.html .",
    "white ep , baldridge e , brym zt , locey kj , mcglinn dj , supp sr .",
    "nine simple ways to make it easier to ( re)use your data .",
    "ideas in ecology and evolution .",
    "2013;6(2 ) .",
    "doi : doi:10.4033/iee.2013.6b.6.f .",
    "wickes e. comment on `` metadata '' ; 2015 .",
    "available from : https://github.com/swcarpentry/good-enough-practices-in-scientific-computing/issues/3#issuecomment-157410442 .",
    "miller ga .",
    "the magical number seven , plus or minus two : some limits on our capacity for processing information . psychological review . 1956;63(2):8197 .",
    "doi : doi:10.1037/h0043158 m .",
    "steinmacher i , graciotto silva m , gerosa m , redmiles df . a systematic literature review on the barriers faced by newcomers to open source software projects . information and software technology .",
    "2015;59(c ) . doi:10.1016/j.infsof.2014.11.001 .",
    "understanding open source and free software licensing .",
    "oreilly media ; 2004 .",
    "available from : http://www.oreilly.com / openbook / osfreesoft / book/.    gawande a. the checklist manifesto : how to get things right .",
    "picador ; 2011 .",
    "petre m , wilson g. code review for and by scientists . in : katz d ,",
    "editor . proc .",
    "wssspe 2014 ; 2014 .",
    "1 .   data management a.   save the raw data .",
    "b.   create the data you wish to see in the world . c.",
    "create analysis - friendly data .",
    "d.   record all the steps used to process data .",
    "e.   anticipate the need to use multiple tables . f.   submit data to a reputable doi - issuing repository so that others can access and cite it .",
    "software a.   place a brief explanatory comment at the start of every program .",
    "b.   decompose programs into functions .",
    "c.   be ruthless about eliminating duplication .",
    "d.   always search for well - maintained software libraries that do what you need .",
    "e.   test libraries before relying on them .",
    "f.   give functions and variables meaningful names .",
    "g.   make dependencies and requirements explicit .",
    "h.   do not comment and uncomment sections of code to control a program s behavior .",
    "i.   provide a simple example or test data set .",
    "j.   submit code to a reputable doi - issuing repository .",
    "collaboration a.   create an overview of your project .",
    "b.   create a shared public `` to - do '' list .",
    "c.   make the license explicit .",
    "d.   make the project citable .",
    "project organization a.   put each project in its own directory , which is named after the project .",
    "b.   put text documents associated with the project in the ` doc ` directory .",
    "c.   put raw data and metadata in a ` data ` directory , and files generated during cleanup and analysis in a ` results ` directory .",
    "d.   put project source code in the ` src ` directory .",
    "e.   put external scripts , or compiled programs in the ` bin ` directory .",
    "f.   name all files to reflect their content or function .",
    "5 .   keeping track of changes",
    "a.   back up ( almost ) everything created by a human being as soon as it is created .",
    "b.   keep changes small .",
    "c.   share changes frequently .",
    "d.   create , maintain , and use a checklist for saving and sharing changes to the project .",
    "e.   store each project in a folder that is mirrored off the researcher s working machine .",
    "f.   add a file called ` changelog.txt ` to the project s ` docs ` subfolder .",
    "g.   copy the entire project whenever a significant change has been made .",
    "manuscripts a.   write manuscripts using online tools with rich formatting , change tracking , and reference management .",
    "b.   include a ` publications ` file in the project s ` doc ` directory .",
    "c.   write the manuscript in a plain text format that permits version control .",
    "d.   include tools needed to compile manuscripts in the project folder .",
    "a version control system stores snapshots of a project s files in a repository .",
    "users modify their working copy of the project , and then save changes to the repository when they wish to make a permanent record and/or share their work with colleagues .",
    "the version control system automatically records when the change was made and by whom along with the changes themselves .",
    "crucially , if several people have edited files simultaneously , the version control system will detect the collision and require them to resolve any conflicts before recording the changes .",
    "modern version control systems also allow repositories to be synchronized with each other , so that no one repository becomes a single point of failure .",
    "tool - based version control has several benefits over manual version control :    * instead of requiring users to make backup copies of the whole project , version control safely stores just enough information to allow old versions of files to be re - created on demand . * instead of relying on users to choose sensible names for backup copies ,",
    "the version control system timestamps all saved changes automatically . * instead of requiring users to be disciplined about completing the changelog ,",
    "version control systems prompt them every time a change is saved .",
    "they also keep a 100% accurate record of what was _ actually _ changed , as opposed to what the user _ thought _ they changed , which can be invaluable when problems crop up later . * instead of simply copying files to remote storage , version control checks to see whether doing that would overwrite anyone else s work .",
    "if so , they facilitate identifying conflict and merging changes ."
  ],
  "abstract_text": [
    "<S> we present a set of computing tools and techniques that every researcher can and should adopt . </S>",
    "<S> these recommendations synthesize inspiration from our own work , from the experiences of the thousands of people who have taken part in software carpentry and data carpentry workshops over the past six years , and from a variety of other guides . unlike some other guides , </S>",
    "<S> our recommendations are aimed specifically at people who are new to research computing . </S>"
  ]
}