{
  "article_text": [
    "the goal of this article is to describe a general methodology guided by well - established quality attributes used in the development of the architecture of an integrated e - learning system which will be further referred as _ iels_. throughout the presentation we will refer to the reasons that led to various architectural decisions related to the division of the system into logical components and also to the interaction between the sub - systems involved in the development of the project .    the objective of iels is to create an ( online ) integrated system that is to be used in the creation of educational content for standard _ lmss _ ( learning management systems ) .",
    "we believe that the main obstacle in the use of lmss is the development of proper material on which learning sessions are based .",
    "iels aims to fix this problem with intuitive and easy to use tools targeted towards the exact individuals that are going to guide the learners during the interactive lectures .",
    "for start we set up five basic functionalities of iels :    * a teacher will access the system to design a lesson , * he will be able to access the platform regardless on the operating system and the architecture of his machine , * the system will facilitate the development of attractive and intuitive educational content , * the system will be able to use existing content ( from integrated repositories ) , * system requirements for both client and server will be minimized , with the possibility of extension for the server side .    using standard technologies and accessible tools",
    "the teacher will be able to create , aggregate , reuse an publish educational content with ease .",
    "+ the main actor is the content creator and one fundamental requirement of the system is that inexperienced users can be trained quickly referring to knowledge acquired using other tools .",
    "the _ architecture _ of a software system refers to the structural presentation of the system as a grouping of components that are connected through relations with specific properties .",
    "the software architecture also comprises the principles that conduct the design and development of the system .",
    "the conceptual framework that lies at the foundations of the software architecture design is presented in figure  [ fig : cf ] .        a starting point in developing",
    "a software system architecture lies in the definition of stakeholders and their concerns .    in developing a software architecture",
    "a _ stakeholder _ is an entity ( most often an individual , community or organization ) which is involved in the development or use of the system and shows interest in the decisions that are made during the entire development phase .",
    "+ during the development of iels we have identified two classes of stakeholders :    * people who will interact with the deployed system : customers , owners , operators , system engineers , * people who are an active part in the development of the system : architects , designers , developers , distributors .",
    "the _ concerns _ of the stakeholders are generally focused on simplifying the development or use of the system . starting from concerns one can identify issues or functional requirements of the system specific to each stakeholder .",
    "the _ architectural description _ includes those products which occur during the development of the system that reveal useful information about the architecture .",
    "these products can have various uses in :    * brief description of the system and its evolution , * communication between stakeholders , * assessment and comparison of architectures in a consistent way , * planning and execution of activities , * the degree of compatibility between the implementation and the architectural description .    in order to reduce the complexity of the architectural description",
    "one can identify _ views _",
    ", i.e. small collections of concerns , mostly related , of one or more stakeholders . from this perspective we can say that the architectural description is a consistent collection of views , each of them contributing with new information to the description of the architecture .",
    "each view is built on a set of resources and structuring rules well - defined by a _",
    "viewpoint_. one can describe a viewpoint by specifying its name , the stakeholders and the concerns it addresses to and the modeling techniques used in building views .",
    "software architecture focuses on general decisions about the elements of the system and the interactions between them , thus making abstraction of more specific issues such as data structures or algorithms .",
    "based on the architecture one can derive a design plan that describes the hierarchical layout of the system and how elements of the system are integrated to form subsystems that meet requirements . also the design plan can be used to sketch the development of the system , deal with possible answers to concerns of stakeholders and to set expectations for the clients .",
    "from the perspective of software engineering , in the analysis of a system one can identify two types of requirements : functional and non - functional . + in general ,",
    "functional requirements define the functionality of the system or what system should do .",
    "these requirements define the behavior of the system , referring to the transformations applied by components on some input data to get output data .",
    "+ _ non - functional requirements _ are defined in terms of system properties or qualities .",
    "in contrast to functional requirements , non - functional requirements do not describe what the system does but focus on some characteristics of how the system operates .",
    "examples of non - functional requirements include external interface requirements , design restrictions and _ quality attributes_. due to their nature , the task of assessing the response to a non - functional requirement is difficult and mostly subjective .",
    "depending on how their value is determined , quality attributes fall into two main categories :    * attributes that can be evaluated by analyzing the static structure of the system : scalability , extensibility , maintenance , testing effort , etc .",
    "* attributes that can be evaluated only while the system is running : performance , security , usability , etc .    in general ,",
    "quality attributes are not unique to a development stage and should be considered throughout the entire development process , from design to implementation and deployment .",
    "some quality attributes are considered critical so their value is assessed at the level of the architecture .",
    "other attributes are too particular and can be evaluated only by analyzing the implementation .    in the development of iels",
    "we have identified the following quality attributes :    * system qualities : availability , adaptability , maintenance , performance , security , creating logs , usability , * business qualities : time to market , integration , platform independence .",
    "we will formally specify quality attributes through _",
    "scenarios_. for each quality attribute a scenario should include :    source : : :    the software system or actor that produces a trigger , trigger : : :    the situation in which the quality attribute is evaluated , environment : : :    the state of the system , artifact : : :    the region of the system in which the assessment takes place , response : : :    the behavior of the system , assessment : : :    how the evaluation of the response is performed .",
    "the _ performance _ of a system refers to the number of tasks performed by the system in relation to used resources .",
    "the system performance is evaluated differently depending on context . in our project",
    "we will refer to four types of measurements :    * response time relative to a user s request , * rate of data processing , * utilization of computing resources , * volume of transmitted data .    the general scenario for performance is presented in table  [ table : gsp ] .",
    ".general scenario for performance [ cols= \" > , < \" , ]      _ architectural tactics _ are fundamental design decisions that significantly contribute to the design and analysis of the system architecture .",
    "they are closely related to quality attributes and have a direct influence on the response to a single quality attribute .",
    "architectural tactics are therefore sufficiently simple such that one could easily understand their properties and effects .",
    "most design decision have side effects , meaning that they affect other quality attributes besides those directly concerned .",
    "it follows that the use of an architectural tactic must be preceded by an estimation of both positive and negative impact of its implementation on other significant quality attributes .",
    "we will further focus on architectural tactics aimed at the scenarios of three quality attributes described in the previous section : performance , security and usability .",
    "_ performance _ targets various aspects of the system including computing time , response time , resource consumption , throughput and efficiency .",
    "we will simplify the analysis and concentrate on the response time relative to the messages or requests submitted by users . from this restricted point of view",
    ", performance related tactics can be classified as :    * resource management tactics , * resource arbitration tactics .    _ resource management tactics _ lead to improvement in the performance of the system by a better organization of the resources that have a major impact on the response time .",
    "+ one such tactic is _ induced concurrency_. under this tactic threads or distinct processes are associated with resources .",
    "thus concurrent accesses on resources translates into concurrent executions of threads . in this way the waiting time",
    "can be reduced through techniques specific to concurrent processing , e.g. load balancing . +",
    "another resource management tactic is _ targeted redundancy_.",
    "it is achieved by maintaining multiple copies , in various and usually distant regions of the system , of the data that is frequently used .",
    "the immediate consequence of the existence of multiple copies of the same resources is a weaker competition between the sub - systems that request access to those resources . in the case of raw data , using this tactic involves the existence of a data storage space with a cache and a cache manager .",
    "the cache aims to retain the data that is most often required , while the cache manager has to update the cache such that it reflects frequently requested data .",
    "it is also responsible with synchronizing the cache with the main storage space in situations when cached data gets changed .    _ resource arbitration",
    "_ is used to improve performance by scheduling requests to essential resources such as cpu or network .",
    "there are two well known methods of scheduling requests :    * _ fifo _",
    "( first in first out ) tactics : all requests are treated equally in the order they are received , * tactics based on _ priorities _ : the order the requests are processed is determined by ( static or dynamic ) priorities associated with each request .",
    "the _ security _ of the system deals with prevention of unauthorized access while providing services for legitimate users .",
    "security related tactics can be tactics targeted towards resisting attacks , detecting attacks or recovering from attacks .",
    "the first class of tactics offers several ways to protect the system during an attack .",
    "one protective measure is _ user authentication _ , for example through ids and passwords .",
    "in this case we have two possible tactics :    * i d / password : the i d and the password are chosen by the user , * onetime password : the i d and the password are automatically generated by the system .",
    "another method of protection is the use of an integrated _",
    "authorization system_. under this tactic users access to data and services is restricted depending on their privileges .",
    "these tactics are mostly used in combination with other user authentication tactics .",
    "other ways to ensure safety increase the _ resistance _ of the system to attacks by using _ encrypted communication channels_. in such situations , specialized components are needed to efficiently encrypt / decrypt messages .",
    "+ resistance to attacks is strongly related to the _ detection _ of attacks .",
    "such tactics include limiting the attacker s possibilities , for example by disabling certain ports or through a firewall .",
    "other methods consist of continuously monitoring network traffic and compare it with patterns calculated from records of previous attacks .",
    "_ recovery tactics _ have applicability in situations in which it is necessary to restore the system after a successful attack is recorded or as an attempt to minimize the damage produced by a successful attack .",
    "the basic restoration tactic consists of separating critical , security related data from ordinary data .",
    "this is achieved in iels by separating the administrative data referring to the creators of educational content from actual data like the one used during learning sessions .",
    "tactics targeted towards _ usability _ aim to develop a product with a low learning curve which users can use quickly and efficiently .",
    "such tactics are divided into two categories :    * _ run - time tactics _ : consist of interface design principles and are strongly influenced by customer feedback , * _ design - time tactics _",
    ": focused on the user interface design phase and on developers involved in this process .",
    "according to these tactics , a number of interface design principles were considered in the development of iels :    * early focus on users and activities through direct interactions between the interface design team and the target group , * testing the system since the first stages of development , * constant evaluation of the learning curve of the system , * applying an iterative design process via a cycle of prototyping , testing , analyzing , and refining .",
    "patterns and architectural styles are ways of managing the complexity and size of the design of software architecture .",
    "their use greatly reduces the process of designing the architecture to understanding , selection , combination or adjustment of well - established architectural patterns .    because architectural patterns retain much of the complexity of the system , the results of their interaction are generally difficult to predict . in order to have a high degree of applicability architectural patterns",
    "are often specified generically .",
    "for this reason , during the design process , the patterns are altered with system - specific information",
    ".    an _ architectural pattern _ shows an image of the system without being a complete architecture .",
    "more specifically an architectural pattern describes some essential elements of the software system architecture .",
    "similar to architectural tactics , an important characteristic of architectural patterns is that each pattern is related to a well - defined set of quality attributes .",
    "it follows that the choice of architectural patterns that provide the best response to requirements determined by quality attributes must be done in the early stages of design .    according to the notions presented in the previous sections ,",
    "the description of a software architecture includes :    * _ components _ responsible with computations or storing data : objects , filters , databases , etc . * _ connectors _ that ensure interaction between components : procedure calls , communication channels , events , etc . * _ attributes _ that provide the useful information in analysis and design of the architecture : signatures , pre - conditions , post - conditions , etc .",
    "components are the basic elements used in the development of the architecture .",
    "most of the times they are active entities of the system , with well - defined computational properties .",
    "communication of a component with the environment is done through ports or interfaces .",
    "a port may be a user interface , a shared variable , a reference to a procedure of another component , a collection of events that can be triggered , etc .",
    "each component defines one or more interfaces that specify its communication capabilities .",
    "each interface can connect to multiple interfaces of other components .",
    "the analysis of the communication between components must consider a number of attributes like the direction of data flow , the existence of a buffer and its capacity , the supported communication protocols , etc .    an _ architectural style _ defines a family of architectures that have a common architectural description , topology and other semantic constraints .    in this context , the _ topology _ or configuration of an architectural style is a graph in which vertices and edges are the core elements of the architectural description : components and connectors .",
    "thus the analysis of components and connectors extends to the analysis of topologies .",
    "frequent tests are related to the overall performance of an architecture , concurrent and distributed computing properties , reliability , etc .    in general the architecture of a system",
    "is obtained by combining several architectural styles .",
    "the architecture considered for iels falls into this category although the predominant model is the _ ria _ ( rich internet application ) client - server model .",
    "_ rias _ are web applications with most of the features of regular desktop applications but generally run in a web browser or a virtual machine . among the most popular ria technologies we mention flex , ajax , javafx and silverlight .",
    "applications developed using these technologies share a similar architecture based on a client module and a distinct level of services .",
    "ria is more suited to a client - server development than to a traditional web development where the state of the system is part of the session . in a client - server approach",
    "the client has its own state , it knows the data it needs and also the types of the data received from the server .    among the immediate benefits of this approach we mention a well organized service level , simple requests to the server and a reduced computation demand on the server by running some calculations on the client side .",
    "the global architecture of a _ client - server application _ includes a series of sub - architectures .",
    "the system can be briefly described as the communication between the client and the server using a level of services .",
    "each component of the global architecture has its own local architecture .",
    "_ mvc _ ( model - view - controller ) is an architectural pattern in which the system is divided into a series of sub - systems responsible for data access , business logic and user interface .",
    "the name of the pattern is given by the roles of its components :    the model : :    is a convenient representation of data on which the application runs .",
    "when the state of a model changes the views associated with the model    are automatically informed to update the interface .",
    "generally it is    assumed that the level of data access is integrated within the model .",
    "the view : :    is generally an element specific to the user interface that displays a    particular model .",
    "more insights on the model can be obtained using    multiple views .",
    "views are also responsible for interacting with the    user .",
    "the controller : :    provides communication between views and models .",
    "a control module    receives input and generates a response after querying a model .    in a ria application",
    "one can identify two levels that implement the mvc architectural pattern :    * an implementation at the client level , * an implementation at the service level .    although both levels display features specific to mvcs , a complete functionality is rarely implemented .",
    "the _ client mvc _ manages the interaction between user and user interface ( by invoking commands , loading data , updating the interface etc . ) .",
    "the main objectives of a client mvc are maintaining the state of the application , mediating requests to the server and displaying control data .",
    "the task of the _ server mvc _ is to manage the requests received from the client . for this",
    "it processes the requests and triggers actions on the server",
    ". these actions may include :    * saving information in the database , * updating information , * returning requested information , * analytical calculations .    the major difference compared to the corresponding client mvc is that in this situation there is no user interface .",
    "instead , views consist in the format of the data returned to the client application .",
    "common technologies appropriate to ria development can be :    * java , php , rails , .net for the service level , * flex , ajax , javafx for the client .",
    "this work was partially supported by the grant of the minsitry of education , research , youth and sports , no .",
    "136/2007 , through the program `` innovation '' .",
    "r. aust , designing network information services for educators , journal of machine - mediated learning . 4(2 - 3 ) , 1994 , 251 - 267 .",
    "deniau , m.t swink , r aust , j.b .",
    "evans , s. gauch , j. miller , d. niehaus , the unite system : distributed delivery and contribution of multimedia objects over the internet . proceedings of the internet society conference , 1995 ( www.isoc.org/hmp/paper/248/ ) .",
    "internet society .",
    "reston , virginia .",
    "meyen , final report : online delivery model project ",
    "office of special education programs , u.s .",
    "department of education ( lawrence , ks : center for research on learning , university of kansas , 2003 ) .",
    "meyen , y.n .",
    "bui , online academy : content validation through a juror process , journal of technology and teacher education , ii(3 ) , 2003 , 443- 454 .",
    "j. neilson , designing web usability ( pp .",
    "16 - 17 ) .",
    "( indianapolis , in : new riders publishing , 2000 ) .",
    "wiley , connecting learning objects to instructional design theory : a definition , a metaphor , and a taxonomy .",
    "wiley ( ed . ) , the instructional use of learning objects : online version .",
    "andriole , l. adelman , cognitive systems engineering for user - computer interface design , prototyping and evaluation ( pp . 4 - 6 )",
    "( hillsdale , nj : lawrence erlbaum associates , 1995 ) .",
    "kovitz , practical software requirements : a manual of content and style ( pp .",
    "27 - 29 ) .",
    "( greenwich , ct : manning publications co. , 1990 ) . m.m .",
    "gardiner , b. christie , applying cognitive psychology to user - interface design ( pp.4 - 5 ) .",
    "( rochester ; ny : wiley , 1987 ) .",
    "t. mandel , the elements of user interface design ( new york : wiley , 1997 ) .",
    "b. shneiderman , designing the user interface : strategies for effective human - computer - interaction ( 3rd ed . ) .",
    "( reading , ma : addison wesley longman , 1998 ) .",
    "l. rosenfeld , p. morville , information architecture for the world wide web .",
    "( oriely , 1998 ) .",
    "lynch , s. horton , web style guide : basic design principles for creating web sites ( new haven , ct : yale university press , 1999 ) .",
    "r. aust , m.j .",
    "kelly , w. roby , the use of hyperreference and conventional dictionaries educational technology research and development , 41(4 ) , 1993 , 63 - 73 .",
    "meyen , r.j .",
    "aust , y.n .",
    "bui , e. ramp , s.j .",
    "smith , the online academy formative evaluation approach to evaluating online instruction , the internet and higher education , 5 , 2002 , 89 - 108 ."
  ],
  "abstract_text": [
    "<S> this study presents a methodological approach to the development of integrated e - learning systems that is used in the creation of educational content for standard learning management systems . </S>"
  ]
}