{
  "article_text": [
    "many problems in the physical sciences and engineering involve substantial amounts of vector calculus ; the manipulation of expressions involving derivatives of smooth scalar , vector and tensor fields in 3-d euclidean space .",
    "while multiple popular computer algebra systems include some basic native vector operations as well as external vector packages @xcite , almost all emphasize the expansion of expressions into components .",
    "although this can be an important tool , particularly when performing calculations in non - cartesian co - ordinates , the results obtained from this approach to simplification can not be easily translated into a co - ordinate independent form . a natural way to overcome",
    "this problem is to encode the properties of vector operators such as @xmath0 , @xmath1 , and @xmath2 . due to the non - trivial nature of these operators",
    ", expressions can often be greatly simplified without ever considering the underlying co - ordinate representation .    as a concrete example of a problem that requires this approach to vector simplification ,",
    "consider the derivation of the single particle guiding center lagrangian from plasma physics @xcite . through this procedure",
    ", one can systematically derive a set of reduced equations of motion for a particle moving in a strong magnetic field that varies weakly in space and time .",
    "such equations have proved invaluable in both computational and analytic studies , since they eliminate the need to follow the fast gyro - motion of particles . in principle , the procedure can be carried out to any desired order in magnetic field non - uniformity ; however , the complexity of the algebra increases dramatically at every step , and even a second order calculation is a daunting task to perform by hand .",
    "naturally , one can gain a great deal by performing the required calculations on a computer .",
    "some obvious benefits include the reduction in human workload , greater confidence in final results and an improved ability to verify intermediate steps .",
    "however , any attempt to carry out such a calculation in co - ordinates would lead to expressions of such enormity ( most likely upwards of @xmath3 terms at intermediate steps ) that reverting back to co - ordinate free vector notation would be inconceivable .    in this communication , we present a new symbolic algebra package , _ vest _ ( vector einstein summation tools ) , implemented in _ mathematica _ , that simplifies abstract vector calculus expressions .",
    "functions are designed to be simple and intuitive to use and we hope that it can be a practical tool for anyone working with vector calculus , both for simple checking of work and for more substantial computations . a thorough illustration of the capabilities of _ vest _ can be found in a companion paper @xcite , where we present the first automated calculation of high - order guiding center lagrangians discussed in the previous paragraph .",
    "much of the functionality of _ vest _ is made possible through the use of abstract index notation for internal manipulation , rather than standard vector notation .",
    "this allows _",
    "vest _ to _ derive _ vector identities , both through a systematic reduction to standard form and by inserting pairs of the levi - civita symbol , rather than relying on the relatively limited set found in standard reference ( for instance @xcite ) .",
    "the obvious advantage of this is that even for expressions and operations that are rarely used ( _ e.g. , _ higher order derivative tensors ) , a full simplification may still be performed without the necessity of hard - coding these into the package . of course , in principle one of the many existing abstract tensor manipulation packages designed for general relativistic calculations ( _ e.g. , _ refs .",
    "@xcite ) could be used for these types of computations ; however , the increased generality required for curved spaces in any dimension necessitates features that would be very cumbersome for vector calculations ( a possible exception is ref .",
    "@xcite , which is designed for continuum mechanics ) .",
    "for example , in euclidean @xmath4 there is never any need to store properties of the riemann or torsion tensors and one may elect to use the identity metric .",
    "in addition , since the levi - civita symbol plays such a prominent role in vector calculus , it is desirable to have its expansions and contractions incorporated directly into routines . indeed , the multi - term simplification functions are certainly the most novel feature of _ vest _ , and to our knowledge there exists no other software package that uses a similar technique . while such capabilities could have been added as an extension to an existing tensor manipulation package , with the recent addition of efficient tensor canonicalization functions in _ mathematica 9.0 _ , we felt that there was little to be gained through such an approach .",
    "there are only a handful of previous software packages that are designed for working with abstract vector expressions . as well as some of the new functionality in _ mathematica 9.0 _ @xcite and functions in the _ maple _ physics package @xcite , the packages detailed in refs .",
    "@xcite include some abstract simplification capability ( but only ref .",
    "@xcite provides examples of simplifications that would be difficult to carry out by hand ) .",
    "out of these previous packages , _ vest _ is the first to work with general rules for gradient tensors and thus provide non - trivial simplifications of expressions involving gradient , divergence and curl .",
    "in addition , all of the vector algebra examples given in ref .",
    "@xcite can be simplified , see fig .",
    "[ fig : tocanonical ] for a selection of these .",
    "we note that all but one of the aforementioned examples are verified through reduction to standard form , without necessitating the use of the multi - term simplification capabilities of _ vest_. utilization of these capabilities allows _ vest _ to derive in real time many types of vector identities that have not ( to our knowledge ) appeared in any previous publications .",
    "the remainder of the manuscript is organized as follows . in section",
    "[ sec : index - notation - as ] we outline the foundations of the _ vest _ package , including the use of abstract index notation and definition of a standard form .",
    "we then describe the function ` tocanonical ` , which reduces any vector or scalar expression to standard form and is the main workhorse of the _ vest _ package .",
    "several relevant examples are given , illustrating various standard vector properties as well as more complex examples from the literature .",
    "while ` tocanonical ` usually provides a thorough simplification , there are more complicated multi - term identities that are not recognized , and in section  [ sec : simplification - through - levi - civi ] we explore some methods to provide further simplification of expressions .",
    "we discuss the algorithm used in the function ` fullsimplifyvectorform ` , which expands pairs of levi - civita symbols to generate identities for all terms in an expression , and applies these in an attempt to find the shortest standard form .",
    "a more general method of deriving vector identities based on symmetry properties is then given , with the idea that a similar technique will be implemented in a future version of _ vest .",
    "_ finally , in section  [ sec : additional - vest - functionalit ] , we describe some additional tools provided in _ vest _ with the aim of improving the usefulness of the package .",
    "these include ; simple but very general input and output , explicit equality checking through expansion of sums , substitution capabilities , and automatic unit vector rule generation and simplification .",
    "while adequate for simple calculations , standard vector calculus notation ( @xmath5 , @xmath6 , _ etc .",
    "_ ) has numerous deficiencies when more complex expressions are involved .",
    "for instance , the meaning of the dot product can become ambiguous for higher rank tensors ( _ e.g. , _ derivatives ) and seemingly disparate rules or `` vector identities '' @xcite are needed to deal with specific cases of the cross product anti - symmetry . to illustrate this latter point , although the exact correspondence between the identities @xmath7 and @xmath8 is not entirely clear , both are simply expansions of the double cross product . in contrast , with a representation of vector objects in index notation using the einstein summation convention , there is no trouble whatsoever with higher rank tensors .",
    "in addition , many simple vector identities are an obvious consequence of the product rule and properties of the levi - civita symbol , @xmath9 .",
    "this systemization makes index notation far more convenient for a computer algebra system . for the sake of input and output , it is straightforward ( where possible ) to convert between indexed and vector expressions using @xmath10 for @xmath11 @xmath12 vectors and @xmath13 a scalar .",
    "_ vest _ includes functions to automatically perform the above conversions for both input and output .",
    "note that , since by definition vector calculus is confined to euclidean space , there is no need to distinguish between covariant and contravariant indices .",
    "we emphasize that this is not a restriction on a subsequent expansion into a curvilinear co - ordinate system , although an indexed expression can not be interpreted in the literal sense ( _ i.e. , _ a sum over components ) if a non - cartesian system is used .",
    "_ vest _ also allows the use of a derivative with respect to a second co - ordinate ( labelled @xmath14 ) , since this situation commonly occurs in kinetic physics . for compactness , we notate this in a non - standard way with a semi - colon @xmath15 , since it is not necessary to distinguish between the covariant and partial derivatives in euclidean space .",
    "we now describe the ` tocanonical ` function in _ vest _ that reduces expressions to the standard form defined by :    1 .   the expression is expanded into a sum of monomials .",
    "2 .   there are no products inside partial derivatives and no nested derivatives .",
    "3 .   each term contains either no levi - civita symbols or one levi - civita symbol and no @xmath16 ( always possible for vector or scalar expressions ) .",
    "the dummy indices in each monomial are re - ordered according to symmetry properties ensuring like terms appear as such . as a simple example of this type of re - ordering",
    ", @xmath17 becomes @xmath18 due to the anti - symmetry of @xmath9 .",
    "we note that this is not a canonical form , since it is unique only for sufficiently simple expressions .",
    "the function name ` tocanonical ` was chosen because the dummy re - ordering process ( step 4 ) ensures that each monomial is in canonical form .",
    "multi - term vector identities can lead to multiple polynomials being non - trivially equal after application of ` tocanonical ` , motivating the implementation of _ vest _",
    "s simplification functions ( see sec .  [",
    "sec : simplification - through - levi - civi ] ) .    to bring an expression to the standard form defined above , `",
    "tocanonical ` uses the following sequence of steps :    1 .",
    "expand out products in partial derivatives and concatenate nested derivatives .",
    "for example , @xmath19 2 .   expand expression and find all dummy indices in each term .",
    "check that these occur in pairs and free indices match across sum .",
    "rename dummy indices in a consistent internal form so the procedure is not limited by the set number of user defined indices .",
    "detailed information on the internal representation of objects and indices can be found in the tutorial supplied with _",
    "vest_. 3 .",
    "expand pairs of levi - civita tensors according to @xmath20 4 .",
    "remove all @xmath16 using @xmath21 .",
    "5 .   apply user defined rules .",
    "as a special case of this , rules associated to unit vectors are automatically derived and applied to relevant objects ( see sec .",
    "[ sec : additional - vest - functionalit ] ) . 6 .",
    "reorder dummy indices into a canonical form for each monomial in the expression .",
    "the problem of permuting indices can be very complex in large contractions and has historically been a major difficulty for tensor manipulation software , see for instance refs .",
    "_ vest _ uses the _ mathematica _",
    "function ( new in version 9.0 ) , which has proven to be very reliable and efficient for our needs . 7 .",
    "print objects and dummy indices in a user - friendly output format ( see sec .  [",
    "sec : additional - vest - functionalit ] ) .    `",
    "tocanonical ` is relatively efficient and handles very large vector expressions with ease . as an example",
    ", a direct calculation of the guiding center poisson tensor , which involves up to 1500 terms ( after expansion of levi - civita symbols ) and returns over 100 terms , takes approximately 15 seconds on a 2.26ghz intel core 2 duo .",
    "the whole procedure can be parallelized in a straightforward way if desired , but we leave this to future work .",
    "the procedure detailed above effectively contains all of the most common vector identities ( for instance all identities in ref .",
    "@xcite , a standard resource used in the plasma physics community ) , as well as many more complex identities .    , scaledwidth=100.0% ]    in figure  [ fig : tocanonical ] , we give examples of the operation of ` tocanonical ` on various vector expressions .",
    "note that input and output can be in standard vector notation , indexed notation , or a mix of both .",
    "several vector algebra examples have been taken from refs .",
    "@xcite , with some examples involving gradients taken from ref .  @xcite .",
    "while adequate for simpler problems , the canonicalization of individual terms as carried out by ` tocanonical ` does not recognize certain types of multi - term vector identities .",
    "in many cases , these can lead to substantial simplification of large expressions .",
    "we have found very few instances of this type of identity given in previous literature ; two examples are @xmath22 which is relatively well known , and @xmath23 which is given in @xcite .",
    "there are in fact whole families of similar relations , including those involving gradient tensors and more than four monomials .",
    "in essence , the ability to simplify expressions using these types of multi - term vector identities requires two somewhat separate operations .",
    "firstly , we need to be able to generate vector identities that involve any given monomial in the polynomial expression we wish to simplify .",
    "these identities can be used to construct substitution rules for each term .",
    "secondly , we require a way to sift through different combinations of these substitutions in order to arrive at the shortest possible manifestation of the expression .    in this section",
    "we describe the _ vest _ function ` fullsimplifyvectorform ` , which simplifies vector polynomials . ` fullsimplifyvectorform ` handles both of the aforementioned operations , _ deriving _ vector identities for each term before applying these in an attempt to find the simplest form of an expression .",
    "we have found the function to be very useful when carrying out large calculations , in many cases reducing the size of expressions by more than a factor of two .",
    "vector identities such as eq .",
    "( [ eq : simplest multi - term ] ) can be derived systematically using properties of the levi - civita symbol . a simple technique used in ` fullsimplifyvectorform `",
    "is based on the identity @xmath24 starting from a single monomial , one substitutes eq .",
    "( [ eq : simple levic identity ] ) for a chosen index or indices ( using @xmath25 ) , obtaining an equivalent term involving more levi - civita symbols . expanding pairs of levi - civita symbols in various orders using eq .",
    "( [ eq : levic expansion ] ) will then sometimes generate a non - trivially equivalent form , essentially a vector identity involving the original monomial .",
    "we illustrate this process with a simple example that generates eqs .",
    "( [ eq : simplest multi - term ] ) and ( [ eq : simplest multi - term 2 ] ) above . starting with @xmath26 and inserting eq .",
    "( [ eq : simple levic identity ] ) into the free index , one obtains @xmath27 there are now three ways to expand pairs of levi - civita symbols using eq .",
    "( [ eq : levic expansion ] ) ; expanding @xmath28 , we are led to eq .",
    "( [ eq : simplest multi - term ] ) , while expanding @xmath29 gives eq .",
    "( [ eq : simplest multi - term 2 ] ) . of course",
    ", an expansion of @xmath30 will simply generate the original term .",
    "as another example , the identities @xmath31 are generated from the monomial @xmath32 .",
    "these identities [ eq .  ( [ eq : multi - term grad ] ) ]",
    "are of course strongly related to those in eqs .",
    "( [ eq : simplest multi - term ] ) and ( [ eq : simplest multi - term 2 ] ) , although in vector notation the exact correspondence may not be immediately obvious .    finally , we note that the same process can be applied using more than one pair of levi - civita symbols , replacing multiple indices in a monomial",
    ". this will generate both a greater number of identities ( due to the large number of possible expansion orders ) and larger individual identities ( since more symbols are involved ) at the expense of computation time .",
    "we now describe the algorithm implemented in ` fullsimplifyvectorform ` .",
    "the general technique is to find equivalent forms ( vector identities ) for each term and subsequently use these to bring the polynomial to its shortest form .",
    "the method is iterative , continuing until the expression is unchanged since the previous iteration .",
    "an outline of the procedure goes as follows :    1 .",
    "ensure expression is in canonical form .",
    "2 .   for each monomial in the expansion , perform the procedure detailed in sec .",
    "[ sub : derivation - of - multi - term ] .",
    "the identities generated are stored as substitution rules so as to facilitate the subsequent search for the shortest form .",
    "if desired , this step can be performed with multiple pairs of levi - civita symbols , generating more substitution rules at the expense of computational speed .",
    "3 .   consider the set of rules for each of the @xmath33 monomials generated in the previous step , denoting the rule set for monomial @xmath34 by @xmath35 ( @xmath35 includes the trivial substitution of a monomial into itself ) .",
    "it is desirable to search through the entire set @xmath36 rather than substituting just individual rules , since rules containing similar terms can sometimes cancel when substituted concurrently . since the number of elements in @xmath37 can be very large ( the product of the lengths of the @xmath35 ) , ` fullsimplifyvectorform ` reduces the size of this set by choosing only those elements that contain rules that have the possibility of canceling in a concurrent substitution .",
    "it then searches through all elements of this reduced set , recording the length of the expression obtained for the substitutions given by each element .",
    "4 .   choose the shortest expression obtained in step 3 and : 1 .",
    "return to step 1 if the expression has changed since the previous iteration .",
    "store rules found in previous step to save computation time",
    "return result if expression is unchanged since the previous iteration .",
    ", scaledwidth=100.0% ]    in figure  [ fig : fullsimplifyvectorform ] we give several examples of the operation of ` fullsimplifyvectorform ` . due to the large number of expansions to explore",
    ", the function can be relatively processor intensive ( especially if multiple pairs of levi - civita tensors are used ) .",
    "the first two examples given in figure  [ fig : fullsimplifyvectorform ] take approximately 2 seconds to compute , while the final one requires approximately 10 seconds .",
    "memory use is not an issue for reasonable expressions ; we have simplified expressions of up to 600 monomials without using more than roughly 100 mb of memory .",
    "while the method currently implemented in ` fullsimplifyvectorform ` ( described above in sec .",
    "[ sub : derivation - of - multi - term ] ) can easily and reliably generate many vector identities that have not appeared in previous literature , there are certain more complicated identities that can not be recognized .",
    "specifically , any non - trivial polynomial identity with no levi - civita symbols ( _ i.e. , _ involving _ only _ dot products ) will not be identified by the above technique .",
    "if only one pair of levi - civita symbols is expanded at step 2 in the procedure this property is evident ; insertion of the levi - civita pair into an expression without a levi - civita symbol leaves only one possibility of expansion ( @xmath38 ) , trivially reproducing the original form .",
    "interestingly , it seems that it is also not possible to produce identities lacking a levi - civita symbol when multiple pairs are expanded in all possible combinations , although we have no proof that this is always true .",
    "these identities that involve only dot products necessarily include more terms and larger monomials ( see below ) than identities with levi - civita symbols , meaning they are only required for simplification when very large expressions ( or expressions with multiple derivatives ) are encountered .",
    "to give an example , with up to two derivatives and without involving unit vector properties , the shortest such identity we have derived is given by @xmath39 for general vectors @xmath40 , @xmath12 and @xmath41 .",
    "for this collection of objects ( two of each @xmath40 , @xmath42 and @xmath41 ) , there also exists a slightly longer , very similar identity of 17 monomials .",
    "when unit vectors and/or more derivative tensors are included , much shorter identities exist ; for instance @xmath43 is given in ref .",
    "@xcite for a unit vector @xmath12 and can also be derived through the method detailed in this section satisfying @xmath44 .",
    "this method can not be generalized to obtain other multi - term identities , but an interesting point is that the cayley - hamilton theorem is a simple consequence of the anti - symmetrization procedure detailed in this section .",
    "eq .   is the sole vector identity we have found in previous literature that can not be recognized by the current version of ` fullsimplifyvectorform ` ] . as another example , eq .",
    "reduces to 8 terms when @xmath40 or @xmath41 is set to @xmath12 and this is set as a unit vector .",
    "this identity turned out to provide an important and non - trivial simplification in our work described in ref .",
    "@xcite .    in this section",
    "we describe a very general technique for deriving vector identities that is not limited to identities that involve the cross - product .",
    "the method encompasses relations such as eqs .   and , as well identities with cross - products , _",
    "e.g. , _ eqs .   and .",
    "while not implemented in the current version of ` fullsimplifyvectorform ` , we will provide this functionality in a future release .",
    "the overall approach is based on the idea that anti - symmetrization of an @xmath33-dimensional tensor over @xmath45 indices will automatically give a tensor polynomial that is identically zero .",
    "such a polynomial is necessarily of relatively high rank , so the construction of interesting identities entails contracting over various pairs of indices .",
    "note that almost all such contractions trivially canonicalize to zero and finding identities in this way by hand would be a very arduous task .",
    "the method is essentially an application of lovelock s `` dimensionally dependent identities '' of the riemann tensor @xcite to tensor products of vectors and their gradients .    to be more precise ,",
    "consider a general tensor @xmath46 , where the @xmath47 represent an arbitrary number of indices ( note that we work in 3-d euclidean space with all lower indices ) .",
    "for the cases we will consider @xmath46 will be the product of vector objects , _",
    "@xmath48 . representing anti - symmetrization by @xmath49 $ ] around relevant indices ,",
    "the identity @xmath50}^{b_{3}}=0\\label{eq : asym tensor id}\\ ] ] must hold for for all @xmath51 , since the tensor is anti - symmetric over four indices in three dimensions . in eq .",
    "( [ eq : asym tensor i d ] ) @xmath52 is simply the standard kronecker delta @xmath16 , we write with an `` up '' index to more clearly show the anti - symmetrization , note the non - standard use of this notation .",
    "one can also anti - symmetrize over more indices of @xmath53 ( and fewer @xmath16 ) if desired , but the resulting identity will involve only the relevant anti - symmetric part of @xmath53 . of course , in the case where @xmath53 is already anti - symmetric in some set of indices ( in our case due to @xmath9 ) , an identity involving the entirety of @xmath53 with fewer @xmath16 can be obtained by anti - symmetrizing over these indices .",
    "for example , with @xmath53 anti - symmetric over @xmath54 , @xmath55}^{b_{1}}=0.\\label{eq : asym ten i d 2}\\ ] ] this insight explains why vector identities that involve @xmath9 can be so much simpler than those that do not ; any tensor with anti - symmetry will naturally have identities with fewer terms than those without anti - symmetry , since non - trivial identities in the form of eq .",
    "( [ eq : asym tensor i d ] ) can be constructed with fewer indices .",
    "the ideas of the previous paragraph can be used to automatically generate vector identities from a given set of vector objects .",
    "although certainly not the most efficient method , a simple algorithm goes as follows :    1 .   for a given vector monomial ,",
    "consider the tensor obtained by removing all contractions between dummy indices _",
    "e.g. , _ for @xmath56 this is @xmath57 .",
    "2 .   choose an index over which to anti - symmetrize and form the polynomial given by eq .",
    "( [ eq : asym tensor i d ] ) . if one of the objects from step 1 is @xmath9 , construct eq .",
    "( [ eq : asym ten i d 2 ] ) instead , antisymmetrizing over the indices of @xmath9 ( the reason for this is simply to generate shorter identities ) .",
    "for instance , with the tensor example given in step 1 , one could use @xmath58}^{f}$ ] .",
    "3 .   contract the polynomial between index pairs . aside from those contractions that are known",
    "_ a priori _ to give identically zero ( see ref .",
    "@xcite ) all possible contractions should be evaluated .",
    "for example , @xmath59}^{k}$ ] is the scalar formed by contraction of the tensor given above between the index pairs + @xmath60 . if one wishes to generate only those identities involving the original scalar monomial ( _ i.e. , _",
    "@xmath56 in the running example ) , consider only the set of contractions that have a possibility of generating this .",
    "4 .   canonicalize the resulting list of scalar or vector expressions to remove @xmath16 and cancel relevant terms .",
    "we have applied this procedure to various forms , systematically generating identities that involve a given set of objects , both with and without the levi - civita symbol .",
    "for instance , applying the method to the objects @xmath61 ( _ i.e. , _ the tensor @xmath48 at step 2 ) generates eqs .",
    "( [ eq : simplest multi - term ] ) and ( [ eq : simplest multi - term 2 ] ) , eq .",
    "is generated with @xmath62 , and eq .",
    "( [ eq : littlejohn b identity ] ) is generated with @xmath63 and a subsequent application of various unit vector identities .",
    "there are of course many other similar relations that we have not listed here .",
    "we note that the _ invar _ package @xcite uses a similar anti - symmetrization based method as part of its algorithm to generate scalar invariants of the riemann tensor .",
    "in addition to the functions described in sections  [ sec : index - notation - as ] and [ sec : simplification - through - levi - civi ] , _ vest _ contains several other features than can be very useful when carrying out large calculations . in this section",
    "we briefly describe some of this functionality .      while very precise and straightforward to interpret , index notation can be inconvenient for the user , since expressions often look jumbled and confusing . as illustrated in figs .",
    "[ fig : tocanonical ] and [ fig : fullsimplifyvectorform ] , _ vest _ includes several features to facilitate user input and output , both in index and vector notation .",
    "expressions can be input in standard vector notation omitting indices ( e.g. , @xmath64}$ ] ) , full index notation , or a mix of both ( e.g. , @xmath65v[i]b[j]]+a\\centerdot\\left(t[i , j]b[j]\\right)}$ ] ) .",
    "this allows for fast and reliable user input with the ability to represent more complex expressions where vector notation becomes ambiguous .",
    "in addition to coloring dummy index pairs so contractions are more immediately obvious , the function ` vectorform ` prints expressions using vector notation where possible ( up to first order derivatives ) , see figs .  [ fig : tocanonical ] and [ fig : fullsimplifyvectorform ] .",
    "the function ` checktensorzero ` provides a very reliable check of whether an expression is identically zero .",
    "this is useful both for when one is not confident that ` fullsimplifyvectorform ` has reached the shortest possible form and for rapid verification of results .",
    "the function works in a very straightforward way by expanding an expression into cartesian co - ordinates , which amounts to explicitly evaluating all sums over dummy indices .",
    "if so desired , the user can specify particular forms for some ( or all ) objects in an expression .",
    "this is useful both for when non - trivial relationships exist between different objects ( e.g. , @xmath66 ) and in the expansion of very large expressions where memory use becomes an issue and a numerical check is necessary .",
    "` checktensorzero ` also includes functionality to search through an expression for subsets that are zero , which has occasionally proved useful for simplification purposes .",
    "a very common application of a computer algebra package is the substitution of some explicit expression into a given form , _",
    "i.e. , _ given a specific @xmath67 , calculate @xmath68 .",
    "while this is a very simple process for standard algebraic expressions , the task becomes more awkward when the substitution involves indexed expressions . to illustrate this , consider as a basic example the evaluation of @xmath69 there are two issues that arise if one attempts a naive substitution of @xmath70 ; first , the free index of @xmath71 must be replaced with the correct indices in @xmath72 , and second , one must ensure that dummy indices in the substituted @xmath70 do not conflict with those in @xmath72 .",
    "while these issues are in principle not complicated , forcing the user to keep track of all indices would be a particularly inconvenient characteristic that would significantly reduce the utility of an index notation based package .    in _ vest",
    "_ substitution of arbitrary expressions is handled through a new assignment operator @xmath73 , which automatically manages assignment of free indices and ensures dummies do not overlap . rather than simply assigning an expression to the left hand side , @xmath73 assigns a call to the function ` finddummies ` , which is used in step 2 of ` tocanonical ` ( see sec .",
    "[ sub : canonicalization ] ) and can generate a new set of indices at every call .",
    "after assignment with @xmath73 , an object can be used in exactly the same way as a standard indexed object without the user having to worry about its underlying structure . to illustrate with the example of eq .",
    "( [ eq : ind sub ] ) , after assigning @xmath74d[j]d[i]}$ ] , evaluating @xmath75@xmath72 in the standard way will generate a valid indexed expression .",
    "expressions involving unit vectors arise often in certain types of calculations , including the guiding center calculation that we have discussed regularly throughout the manuscript .",
    "as several examples earlier in the text have illustrated ( _ e.g. , _ sec .  [ sub : more - general - methods ] ) , unit vector identities can provide very substantial simplifications and it is important to make provision for these .",
    "representing an arbitrary unit vector by @xmath76 , _ vest _ automatically generates identities by differentiating @xmath77 up to a user - specified order and applies these rules as part of ` tocanonical ` . in addition , unit vectors are automatically accounted for in ` fullsimplifyvectorform ` by multiplying each term by @xmath78 before each levi - civita expansion ( see sec .",
    "[ sub : derivation - of - multi - term ] ) , and in ` checktensorzero ` by setting @xmath79 for any unit vectors in an expression .",
    "a related feature is the ability for the user to define rules that are applied as part of ` tocanonical ` .",
    "this is very useful both when non - trivial relationships between objects need to be identified ( e.g. , @xmath80 ) and when working with expressions that involve non - trivial scalar expressions in the denominator .",
    "in this paper , we have presented a new _ mathematica _ package , _ vest _ ( vector einstein summation tools ) , for performing abstract vector calculus computations .",
    "routines for reduction to standard form and simplification are based on representation of vector polynomials using index notation with the einstein summation convention .",
    "the utility of the package has been illustrated through multiple calculations of the single particle guiding center lagrangian in our companion paper @xcite , which is usually a long and arduous process requiring months of tedious algebra .",
    "the ` tocanonical ` function in _ vest _ encompasses almost all previously published vector identities @xcite and provides a very thorough reduction for most expressions . for larger polynomials ,",
    "more comprehensive simplification capabilities are provided by the function ` fullsimplifyvectorform ` , which uses expansions of levi - civita symbols to derive multi - term vector identities . `",
    "fullsimplifyvectorform ` has proven to be very useful in practice , often reducing the length of expressions dramatically in ways that would be very difficult to find by hand .",
    "we note that in previous literature we have found only a handful of examples of the type of identity derived by ` fullsimplifyvectorform ` .",
    "in addition to the method of levi - civita expansions , we have illustrated a more general technique based on anti - symmetrization that can be used to derive very general non - trivial identities for a given set of objects . as future work , we hope to implement some variant of this technique into ` fullsimplifyvectorform ` , which would allow the simplification of expressions that do not contain cross - products .",
    "to improve computational efficiency , rules can be pre - calculated and stored in look - up tables , a method that is used in the _ invar _ package @xcite to simplify polynomials of the riemann tensor .",
    "while the generation of basic identities will be simpler than those for the riemann tensor ( due to its complex symmetries ) , the substitution of known identities will be complicated somewhat by allowing multiple different objects , including those of different rank .",
    "another significant complication will be the inclusion of unit vectors , the properties of which can significantly change identities in non - trivial ways .",
    "_ vest _ has been designed to be very user - friendly , with intuitive and simple input and output .",
    "we invite the reader to try out the package , which can be found along with a comprehensive tutorial from the cpc program library .",
    "this research is supported by u.s .",
    "doe ( de - ac02 - 09ch11466 ) ."
  ],
  "abstract_text": [
    "<S> we present a new package , _ vest _ ( vector einstein summation tools ) , that performs abstract vector calculus computations in _ mathematica_. through the use of index notation , _ vest _ is able to reduce three - dimensional scalar and vector expressions of a very general type to a well defined standard form . </S>",
    "<S> in addition , utilizing properties of the levi - civita symbol , the program can derive types of multi - term vector identities that are not recognized by reduction , subsequently applying these to simplify large expressions . in a companion paper @xcite </S>",
    "<S> , we employ _ vest _ in the automation of the calculation of high - order lagrangians for the single particle guiding center system in plasma physics , a computation which illustrates its ability to handle very large expressions . </S>",
    "<S> _ vest _ has been designed to be simple and intuitive to use , both for basic checking of work and more involved computations .    </S>",
    "<S> vector calculus , computer algebra , tensors , mathematica    * program summary *    _ programming language : _ </S>",
    "<S> mathematica + _ computer : _ any computer running mathematica + _ operating system : _ linux , unix , windows , mac os x + _ ram : _ usually under 10 mbytes + _ supplementary material : _ tutorial notebook + _ keywords : _ vector calculus , mathematica , tensors + _ nature of problem : _ large scale vector calculus computations + _ solution method : _ reduce expressions to standard form in index notation , automatic derivation of multi - term vector identities + _ restrictions : _ current version can not derive vector identities without cross products or curl + _ additional comments : _ intuitive user input and output in a combination of vector and index notation + _ running time : _ reduction to standard form is usually less than one second </S>",
    "<S> . simplification of very large expressions can take much longer . </S>"
  ]
}