{
  "article_text": [
    "in this section we show the following :      the np - membership is obvious . as a polynomial certificate we use a list of coordinates denoting start- and end - points of axis",
    "aligned straight - line segments .",
    "such a representation has polynomial size w.r.t . the given graph .    for the np - hardness we use a polynomial reduction from pure - nae-3-sat .",
    "this problem is derived from classical 3-sat ( satisfiability of formula in conjunctive normal form where each clause has at most 3 literals ) .",
    "nae-3-sat asks for truth - assignment where neither all three literals are true nor false .",
    "pure - nae-3-sat is a version without negations ( i.e. , all variable - occurences in the formula are positive ) .",
    "pure - nae-3-sat is a well - known np - complete problem whose np - hardness witnesses the problem of bicoloring 3-uniform hypergraph .",
    "first we present the idea of the reduction , then we focus on technical details .",
    "the idea is that each variable - occurence gets represented by a vertex and in the line - bend representation it turns up as either vertical or horizontal segment .",
    "vertical segments correspond to the assignment true , horizontal segments correspond to the assignment false ( thus it is necessary to keep all the occurences synchronized ) .",
    "each clause gets also represented by a vertex adjacent to the appropriate vertices . considering a representation of variables by straight - line segments such that no pair of these segments lies on a common line , note that it is impossible to represent the appropriate clause - gadget and , conversely",
    ", it is possible to represent , both , a clause with one literal true and two false and a clause with one literal false and two true , see figure [ aa : claumean ] .",
    "the construction uses two types of tricks .",
    "one type of tricks is a `` quantitative trick '' and it uses the fact that when a particular problem may occur only constantly many times in the whole construction ( when representing the formula ) , we do not have to care about it and we bypass the problem by repeating the whole formula several times ( we could also add sufficiently large non - satisfiable part of the formula and force the construction to use those `` singularities '' to represent the artificial non - satisfiable part of the formula ) .",
    "a typical representant of the problems solved by this trick is that considering a representant of a vertex adjacent to many other mutually non - adjacent vertices ( e.g. , a vertex adjacent to all vertces representing variables ) , only constantly ( namely at most 6 ) many among the other vertices may leave the representation of the main vertex without using an extra bend for it ( they pass through the endpoints of individual segments ) , see figure [ aa:6exits ] .",
    "also some variable - representants may be cheating if the representants of @xmath1 and @xmath2 mutually intersect , but it is also a constant number .",
    "the other type of tricks are technical tricks ( that are either necessary for enforcing the properties of the construction or that are enforced by geometrical structure of the recognition problem , e.g. , intersections or non - intersections of clause - representants ) .      after explaining the idea , we start describing the technical background of the construction .",
    "first point is , how to represent individual occurences just by vertical or horizontal segment and how to keep the occurences synchronized : this gets done by representing variables and occurences .",
    "the representant of a variable is responsible for the synchronization of the occurences .",
    "each variable , in general , get represented ( in the graph ) an individual vertex attached to special vertices @xmath1 and @xmath2 .",
    "vertices @xmath1 and @xmath2 get represented by at most twice bending sequence of segments and in order to intersect this pair of curves by the curves representing the variables , at most 12 representants of the variables may avoid wasting one bend for intersecting @xmath1 and also one for intersecting @xmath2 .",
    "therefore the first and the third segment in their representation will be covered by one of the segments representing @xmath1 and @xmath2 . in this way",
    "we obtain the representation of variables .",
    "those 12 exceptional variables get solved by replicating the formula 13 times ( `` quantitative trick '' ) .    for a variable @xmath3",
    "we represent its occurences @xmath4 by vertices adjacent to @xmath5 and @xmath3 .",
    "note that in order to represent intersection with @xmath1 and @xmath2 we need two segments ( that get covered by segments representing @xmath1 and @xmath2 ) and yet we have to intersect @xmath3 .",
    "how to do this ?",
    "we have to intersect @xmath3 simultaneously with either @xmath1 or @xmath2 .",
    "this ( together with the fact that first and third segment are wasted by intersection with @xmath1 and @xmath2 , respectivelly ) forces the occurences of a particular variable to have the vertical - horizontal orientation of the middle - segment to be synchronized with the orientation of the middle - segment of the whole variable .",
    "the clauses get represented by vertices adjacent to the appropriate occurences of the appropriate ( three ) variables .",
    "the representants of the clauses in an arrangement where no pair of occurence - vertices is represented by curves having the middle - segment on a common line , it is impossible to represent an unsatisfied clause .",
    "now , it remains to add the technical details that disallow two occurences from the same clause to have the middle - segment on a common line .",
    "note that such a situation for a pair occurence - vertices @xmath6 and @xmath7 ( whose middle - segments should occur on a common line ) is incompatible with adding a pair of non - adjacent vertices when both newly added vertices shall be adjacent to both occurence - vertices , i.e. , @xmath6 and @xmath7 .",
    "also note that if @xmath6 s middle segment was vertical and @xmath7 s horizontal , we could nt represent the clause - vertex now .",
    "thus instead of a pair of vertices we add just one of them and instead of the second one we use the representation of the clause , see figure [ aa : dvespojky ] .",
    "now , it is clear that for an unsatisfiable formula we can not obtain a representation ( as the variable - representants can not be divided into vertical and horizontal ones in such a way that each clause contains at least one vertical and at least one horizontal ) . what remains is to show that the satisfiable formula can always be represented . for the explanation we use figure [ aa :",
    "variables evaluated to `` true '' we represent as the vertical ones , variables evaluated to `` false '' we represent horizontally .",
    "individual occurences get represented in the close neighborhood of the appropriate variables .",
    "representants of the clauses should now intersect such a triple of segments that w.l.o.g .",
    ", two are horizontal and one vertical . moreover ,",
    "the vertical one intersects both horizontal ones .",
    "thus we obtain the appropriate representation by picking the ( sub)segment of the vertical segment between the intersections with the horizontal ones and to such a segment we add small particles passing along both horizontal segments . yet it remains , how to represent the `` colinearity - obstructions '' .",
    "for the mutually intersecting pairs of segments ( i.e. , vertical against horizontal ) we represent it opposite to the variable - representation , see figure [ aa : dvespojky ] , the middle picture . for a pair of w.l.o.g .",
    "vertical segments , we attach them by a horizontal segment and we add two small vertical segments inside those two vertical segments .",
    "note that it is simple to avoid representation of clauses as on each segment at most one representation of a clause appears and none of those clause - representants appears near `` the end of that segment '' , i.e. , near the representation of extra vertex @xmath1 and @xmath2 ( mentioned at the beginning of the construction ) ."
  ],
  "abstract_text": [
    "<S> we show np - completeness for the recognition problem of classical 2-line - bend graphs .    </S>",
    "<S> # 1    * fixme ! ! ! * </S>",
    "<S> # 1    bend - number is an interesting topic for graphs with geometrical representations . </S>",
    "<S> recently classes of @xmath0-line - bend graphs were explored @xcite after being defined already in 1980s @xcite and plenty of properties got proven .    </S>",
    "<S> the aim of this preprint is to share the proof with colleagues who have asked me about this proof before it gets published with further results . </S>",
    "<S> thus we expect the reader to know the problem and also we expect the reader to understand the motivation of this problem .    for these graph - classes , it is known that 0-line - bend graphs can be recognized in polynomial time ( as these are interval graphs , i.e. , intersection graphs of intervals on a line , see , e.g. , @xcite ) and that the recognition of 1-line - bend graphs is np - complete @xcite . it is also known that given prescribed sets of 1-bend objects , the recognition problem is still np - hard @xcite . </S>"
  ]
}