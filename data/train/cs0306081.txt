{
  "article_text": [
    "experiments in high energy physics ( hep ) are becoming increasingly more complex .",
    "the construction of a new particle accelerator and associated detectors is a technological challenge that also encompasses the development of an associated software system .",
    "the large hadron colider ( lhc ) currently being built at the european organization for nuclear research ( cern ) , will support four different detectors installed .",
    "the atlas @xcite ( a toroidal lhc apparatus ) at lhc will require a complex trigger system . this trigger will have to reduce the original 40mhz of p - p interaction rate to a manageable 100hz for storage .",
    "the total mass storage , including raw , reconstructed , simulated and calibration data exceeds 1 petabyte per year .",
    "the three major types of data to be stored by atlas are :    * _ raw event data _ , data collected by the detector resulting from the particle collisions ( events ) * [ conditions]_conditions and meta - data _ , which includes calibration constants , run conditions , accelerator conditions , trigger settings , detector configuration , and detector control system ( dcs ) conditions that determine the conditions under which every physics event occurred .",
    "these conditions are stored with an interval of validity ( typically time or run number ) and retrieved using time ( or run number ) as a key @xcite .",
    "also the daq status and time evolution of the configuration database is included in this type of data . *",
    "_ reconstructed data _ , corresponding to objects with physical meaning ( e.g. electrons , tracks , etc .",
    ") that are the result of applying software algorithms to the raw data , taking into consideration the conditions under which the raw data was taken .",
    "an important part of the conditions database data is associated with the trigger and data aquisition system @xcite ( tdaq ) . through the tdaq system",
    "flow very different types of data ( e.g. calibration and alignment information , configuration databases information ) @xcite that appear as conditions data for storage .",
    "some types of this data , such as the accelerator s beam parameters , detector configuration , test - beam table position , are recorded by a specific component of the tdaq system , the online bookkeeper ( obk ) .",
    "the obk is important as a source of data for the conditions database , as an entry point to analysis jobs on the raw data and as a debug resource for the daq system .",
    "for this reason , obk can be qualified as one of the biggest collectors and managers of meta - data produced online for the atlas experiment .",
    "the aim of the obk is to store information describing the data acquired by the daq and to provide offline access to this information @xcite .",
    "it is also a powerful tool for users in the control room who can use it as a run log book to attach their comments , or other types of support information .",
    "this section will provide an overview of how obk works in the online softare framework . as obk is a software package of the online software system for the atlas tdaq",
    ", the architecture of both , online software and obk , will be briefly described .",
    "the role of the online software is to provide to other tdaq systems , configuration , control and monotoring services .",
    "it does not include the processing and transportation of physics data .",
    "all packages of the online software create a framework generic enough to allow supervision of many distinct data taking configurations . from the architectural point of view",
    "there are three different _ group of components _ : _ group of components _ are the * configuration * , * control * and * monitoring*. table [ tab - online ] shows these main packages and their components .",
    "the obk is part of the * configuration * group .",
    "a first prototype was developed 4 years ago and since it has evolved significantly .",
    "figure [ gen - arch ] shows a simplified diagram of obk in which are the other online packages that obk interacts with .",
    "namely , the information service ( is ) , message reporting system ( mrs ) and configuration databases ( conf .",
    "db ) .    both is and mrs use the ipc ( inter process comunication ) package , a corba implementation , as messaging backbone @xcite .",
    "mrs provides the facility which allows all software components in the atlas daq system and related processes to report error messages to other components of the distributed tdaq system .",
    "is provides the possibility for inter - application information exchange in the distributed environment .",
    "these three components of the online sw are the providers of information to obk databases .",
    "the data stored in obk databases the information will be automatically available worldwide .",
    "this process begins with the data acquisition process in the distributed environment and ends up with the final users that will query the database for the most relevant informations about each data taking period .",
    "figure [ gen - arch ] also shows schematically a general architecture of obk .",
    "the obk acquisition software subscribes to relevant mrs and is servers in order to receive mrs / is massages exchanged between components via corba / iiop callbacks .",
    "the information is then stored using an per - run basis philosophy .",
    "the information stored includes the date / time of each run , the basic physics parameters , the status of a run - if it was a successfully completed or not , etc .    the data is then made available for offline usage . the users dispose of a set of tools like the web interface and the c++ api which can be used to interact with obk databases .",
    "they can retrieve data for a particular run , or a set of runs , or append new relevant information if needed .",
    "the web browser can display all the information of a run including all is informations stored , and with the c++ api there is also the facility to search for instances of a particular is class parameter or to cicle all the run headers ( startdate , enddate , triggertype , etc . ) in a partition .",
    "during the last 4 years , three different obk prototypes were implemented .",
    "the aim was both to learn with the experience while trying to implement a package that meets the requirements @xcite , and to use different data base management systems ( dbms ) .",
    "this provided a better understanding of which dbms most fulfills the obk needs inside the online software framework . with this multi - technology approach",
    "we re gaining technological expertise about different dbms technologies and are then able to make a solid recommendation for a technological and design solution for a production bookkeeper tool .",
    "this prototyping approach seems to achieve very good results in a long term experience like this one because each of the new obk prototypes provides more functionality and performance gains over its predecessor .",
    "all of the prototypes use c++ as programming language and the same basic architecture but different dbms for the persistent storage .      at the begining ,",
    "lhc experiments selected objectivity / db for the official dbms persistent storage .",
    "an obk implementation using this dbms was then the first natural choice .",
    "this prototype was designed to take full advantage of the pure object oriented ( oo ) model of the dbms . the model used with the objecivity / db",
    "is organized in federations , databases , containers and object , obk was able to map the data coming from the tdaq system in a repository structured in such a way .    the obk objectivity / db based prototype was used in 2000 testbeams with success . for data retrieval a web browser was also developed .",
    "this allows users to get in  touch  with the data in a very natural fashion .",
    "since 2001 , this prototype was abandoned and is no longer maintained .",
    "the second prototype implemented uses oks as a persistency mechanism .",
    "oks is a c++ based , in - memory persistent object manager developed as a package inside the online software @xcite .",
    "oks is also oo but not so sophisticated as objectivity / db .",
    "the data files used for storage are created as xml files .",
    "they are stored in the file system which can be local , afs or nfs .",
    "the access to the data is done by reading directly the files and not through a centralized server .",
    "the usage of xml files to store data is a very interesting feature because they are human readable and also highly portable .",
    "the main reasons that led to this implementation were the fact that oks is _ open source _ software ( which makes it usable in any place without having any problems with licencing ) and also that this dbms is lighter and more oriented to systems with very high demands in terms of performance than the objectivity / db .",
    "there are of course some disadvantages of using oks , mainly the lack of features that other dbms provide like transactions .",
    "the persistent object schema of this prototype is very similar to the first one beacause it is also oo featured and the intrinsic data storage philosophy can be very similar . a web browser with the same approach as the one from objectivity",
    "is also provided .",
    "this prototype provides extended features while compared to the first one , such as more programs to control the databases and a full featured c++ api .",
    "all it s new improvements were used in 2001 test beams at cern by the users .",
    "it behaved well and acquired several megabytes of data to the local file system of a machine and later on afs . despite the good behavior from obk the problem of data dispersion and consistency soon arrived because this prototype uses several xml files to store information about each run .",
    "this is the only obk prototype that uses a relational dbms .",
    "mysql @xcite is a well known , fast and reliable _ open source _ dbms .",
    "it started a new phase in the obk development - the phase of the relational model .",
    "the decision to implement a package such as obk using mysql was driven from the power of its underlying sql engine and also due to the desire of trying a relational approach to obk databases .",
    "technically a new database schema was implemented to allow mapping of data coming mainly from oo sources forcing us to completely redesign the internal structure of obk .",
    "we have achieved a mapping between an oo and a relational schema that is suitable for obk needs and started to use it .",
    "this prototype provides all the features of the previous ones , plus further enhancements regarding the users needs and also the very important aspect of performance . in this implementation",
    "the concept of log book was also introduced and successfully deployed ( see section [ sec - logbook ] for details ) and successfully used .",
    "the mysql implementation was used successfully in the 2002 test beam .",
    "it recorded more than 1 gbyte of data , including data coming from the dcs .",
    "obk provides a set of interfaces that allow users to interact with the databases .",
    "there are also available some tools coded in c++ which make some tasks very easy to execute . in this section",
    "the focus will be on the c++ interfaces ( the query api ) and on the web interface used to store information directly related to the users .",
    "both oks and mysql prototype are distributed with a c++ query api .",
    "this api exposes methods that allow data retrieval in a very user oriented approach .",
    "the api encapsulates all the necessary mechanisms to get the correct values from the obk databases .",
    "the users do not need any special skill ( like how to perform sql queries ) regarding the database schema .",
    "this also allows to preserve the integrity of the database because it does nt allow users to manipulate it directly in what concerns for example the addiction of new information retated to a run .",
    "the latest version of the obk browser includes several functionalities making it a powerful tool .",
    "it provides not only the functionalities of displaying the data coming from the obk data acquisition process just after it was collected through the online system but also the possibility of behaving like a run log book .",
    "it was built with an excellent searching mechanism oriented to the final users which will be the physicists .",
    "+ figure [ obk - websearch ] shows all the options of this search mechanism .",
    "there are a set of options on which the users can base their criteria of selection such as : +    * * runstatus * good / bad * * maxenvents * the maximum number of events of the runs * * start date / end date*. for the start and end of a run .",
    "this allows to ` map ' the obk run bases data type in a time interval * * beamtype * muons , electrons , etc . *",
    "* triggertype * cosmic , calibration , physics    sorting options are also included .",
    "the obk data display in this browser was driven by the need of a clear and very user friendly interface where the data would be easily accessible to the users .",
    "after the selection of all the criteria that the user wants to meet , the result will appear in another web page similar to the one in figure [ obk - seeruns ] .",
    "the result presents to the users some relevant information about each run : partition to which each run belongs ; run number ; start and end date of the run ; run status ; number of events ; maximum number of events ; trigger type , detector mask and beam type .",
    "it is also possible to display more specific information , like for example which messages from the mrs were transfered between the various components of the online software .",
    "this is accessible by following the link provided for each run .",
    "figure [ obk - insiderun ] shows a typical page generated when selecting the option to display more detailed information on a particular run . through this new page",
    "it is possible to browse information including the messages from the mrs , from the is and the users comments and attached files .",
    "there are two different approaches to storing comments in obk databases :    * using binary programs provided for both online and offline comments * using the web browser        adding comments through the web browser gives also the option of attaching any type of files to a comment .",
    "this allows users to add information that they think might be relevant to the run .",
    "afterwards every one can see the comments and their respectively attached files .",
    "some types of files are supported and will immediately be displayed in a different window .",
    "file types that are not supported will have to be downloaded and the appropriate program must be used to open them .",
    "the obk browser itself also provides administrative tools , for example to create databases with the correct structure for obk , and gives a set of options for user management : authentication , permissions , etc .",
    "for the evaluation of the various prototypes the focus was to analyse the different functionalites , how easy it was to map the data coming from the online sytem or on how complex the code of each one became . on all of these issues a set of scalablity and performance tests were addressed .",
    "one other objective of these tests was also to evaluate if obk can handle all the information produced in the final system .    in figure [ obk - performance ] it",
    "can be seen the time to store a typical is message in function of the number of obk data acquisition programs running simultaneously .",
    "this test was one of the tests performed in the scalability context regarding the final system .",
    "a comparison between the three prototypes was also addressed .",
    "this test was performed with a typical start of run message coming from the mrs .",
    "the time for this test is not only the time spent to store the message itself but also all operations that this implies .",
    "this operation includes the creation of a new run in the database with all associated operations like the creation of new files ( in the oks prorotype ) or containers ( in the case of the objectivity / db prototype ) .",
    "more details about this tests can be found in @xcite .",
    "the mysql prototype proved to be the faster one while the objectivity / db is the slowest .",
    "it was clear from the test that there is a dependency on the run number for the time spent to store a message of this kind in case of both objectivity / db and oks prototypes .",
    "the slope of the oks line is less than the objectivity / db but when a transaction becomes commited , the objectivity / db prototype gets better .",
    "we attribute these results not only to the evolution in the design from prototype to prototype but also because mysql provides a faster engine that makes the time to store these messages negligible when compared with the other prototypes .",
    "some other performance results are displayed in tables [ tab - perf1 ] and [ tab - perf2 ] .",
    "the results presented for the start of run , end of run and comment , represent the the minimum value and the maximum observed during the tests .",
    "tests were performed to a maximum of 500 runs .",
    "for the is time it s the mean time to store a is message from obk because it was observed that there was no significant growth .",
    "more information about these tests can be found in obk test report @xcite .",
    "this document includes a detailed description of the test procedure and other results such as functionality tests .",
    "in this paper we presented a general overview of our experience of using different dbmss in prototyping obk in the atlas online software framework . since the beginning of the project we tried to understand the problem of bookkeeping for the atlas experiment .",
    "for that reason , obk evolved and it now provides some tools that can be qualified as run log book tools . the last version of obk which is the most performant and robust one is the result of this experience .",
    "but obk work is still in progress . included in the list of future improvements for obk"
  ],
  "abstract_text": [
    "<S> in the context of the atlas experiment there is growing evidence of the importance of different kinds of meta - data including all the important details of the detector and data acquisition that are vital for the analysis of the acquired data . </S>",
    "<S> the online bookkeeper ( obk ) is a component of atlas online software that stores all information collected while running the experiment , including the meta - data associated with the event acquisition , triggering and storage . </S>",
    "<S> the facilities for acquisition of control data within the on - line software framework , together with a full functional web interface , make the obk a powerful tool containing all information needed for event analysis , including an electronic log book .    in this paper </S>",
    "<S> we explain how obk plays a role as one of the main collectors and managers of meta - data produced on - line , and we ll also focus on the web facilities already available . </S>",
    "<S> the usage of the web interface as an electronic run logbook is also explained , together with the future extensions .    </S>",
    "<S> we describe the technology used in obk development and how we arrived at the present level explaining the previous experience with various dbms technologies . </S>",
    "<S> the extensive performance evaluations that have been performed and the usage in the production environment of the atlas test beams are also analysed . </S>"
  ]
}