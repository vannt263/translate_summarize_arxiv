{
  "article_text": [
    "string repetitions called runs and the lempel - ziv factorization are structures that are of a great importance for data compression and play a significant role in stringology . recall that a run of a string is a nonextendable ( with the same minimal period ) substring whose minimal period is at most half of its length .",
    "the definition of the lempel - ziv factorization is given below . in the decision tree model , a widely used model to obtain lower bounds on the time complexity of various algorithms , we consider algorithms finding these structures .",
    "we prove that any algorithm finding the lempel - ziv factorization on a general ordered alphabet must perform @xmath3 denotes the logarithm with the base  @xmath6 .",
    "] comparisons in the worst case , where @xmath1 denotes the length of input string and @xmath2 denotes the number of distinct letters in it . since until recently , the only known efficient way to find all runs of a string was to use the lempel - ziv factorization , one might expect that there is a nontrivial lower bound in the decision tree model on the number of comparisons in algorithms finding all runs .",
    "these expectations were also supported by the existence of such a bound in the case of unordered alphabet . in this paper",
    "we obtain a somewhat surprising fact : in the decision tree model with an ordered alphabet , there exists a linear algorithm finding all runs .",
    "this can be interpreted as one can not have lower bounds on the decision tree model for algorithms finding runs ( a similar result for another problem is provided in  @xcite for example ) but on the other hand , this result supports the conjecture by breslauer  ( * ? ? ?",
    "* chapter  4 ) that there is a linear ram algorithm finding all runs .",
    "the lempel - ziv factorization @xcite is a basic technique for data compression and plays an important role in stringology .",
    "it has several modifications used in various compression schemes .",
    "the factorization considered in this paper is used in lz77-based compression methods .",
    "all known efficient algorithms for computation of the lempel - ziv factorization on a general ordered alphabet work in @xmath0 time ( see  @xcite ) , though all these algorithms are time and space consuming in practice .",
    "however for the case of polynomially bounded integer alphabet , there are efficient linear algorithms  @xcite and space efficient online algorithms  @xcite",
    ".    repetitions of strings are fundamental objects in both stringology and combinatorics on words .",
    "the notion of run , introduced by main in  @xcite , allows to grasp the whole periodic structure of a given string in a relatively simple form . in the case of unordered alphabet , there are some limitations on the efficiency of algorithms finding periodicities ; in particular , it is known @xcite that any algorithm that decides whether an input string over a general unordered alphabet has at least one run , requires @xmath7 comparisons in the worst case . in  @xcite , kolpakov and kucherov",
    "proved that any string of length @xmath1 contains @xmath5 runs and proposed a ram algorithm finding all runs in linear time provided the lempel - ziv factorization is given .",
    "thereafter much work has been done on the analysis of runs ( e.g. see  @xcite ) but until the recent paper  @xcite , all efficient algorithms finding all runs of a string on a general ordered alphabet used the lempel - ziv factorization as a basis .",
    "bannai et al .",
    "@xcite use a different method based on lyndon factorization but unfortunately , their algorithm spends @xmath0 time too .",
    "clearly , due to the found lower bound , our linear algorithm finding all runs does nt use the lempel - ziv factorization yet our approach differs from that of  @xcite .",
    "the paper is organized as follows .",
    "section  [ sectprel ] contains some basic definitions used throughout the paper . in section  [ sectlempelziv ]",
    "we give a lower bound on the number of comparisons required to construct the lempel - ziv factorization . in section  [ sectruns ] we present additional definitions and combinatorial facts that are necessary for section  [ sectlin ] , where we describe our linear decision tree algorithm finding all runs .",
    "a _ string of length @xmath1 _ over the alphabet @xmath8 is a map @xmath9 , where @xmath1 is referred to as the length of @xmath10 , denoted by @xmath11 .",
    "we write @xmath12 $ ] for the @xmath13th letter of @xmath10 and @xmath14 $ ] for @xmath12w[i{+}1]\\ldots w[j]$ ] .",
    "let @xmath14 $ ] be the empty string for any  @xmath15 .",
    "a string @xmath16 is a _ substring _ ( or a _ factor _ ) of @xmath10 if @xmath17 $ ] for some @xmath13 and @xmath18 .",
    "the pair @xmath19 is not necessarily unique ; we say that @xmath13 specifies an _ occurrence _ of @xmath16 in @xmath10 .",
    "a string can have many occurrences in another string .",
    "an integer @xmath20 is a _ period _ of @xmath10 if @xmath21 and @xmath12 = w[i{+}p]$ ] for @xmath22 . for any integers @xmath23 , the set @xmath24 ( possibly empty )",
    "is denoted by @xmath25 .",
    "the only computational model that is used in this paper is the _ decision tree _ model .",
    "informally , a decision tree processes input strings of given _ fixed _ length and each path starting at the root of the tree represents the sequence of pairwise comparisons made between various letters in the string .",
    "the computation follows an appropriate path from the root to a leaf ; each leaf represents a particular answer to the studied problem .",
    "more formally , a decision tree processing strings of length @xmath1 is a rooted directed ternary tree in which each interior vertex is labeled with an ordered pair @xmath19 of integers , @xmath26 , and edges are labeled with the symbols `` @xmath27 '' , `` @xmath28 '' , `` @xmath29 '' ( see fig .  [",
    "fig : tree ] ) .",
    "height _ of a decision tree is the number of edges in the longest path from the root to a leaf of the tree .",
    "consider a path @xmath20 connecting the root of a fixed decision tree to some vertex @xmath30 .",
    "let @xmath31 be a string of length @xmath1 .",
    "suppose that @xmath20 satisfies the following condition : it contains a vertex labeled with a pair @xmath19 with the outgoing edge labeled with @xmath27 ( resp .",
    ", @xmath29 , @xmath28 ) if and only if @xmath32<t[j]$ ] ( resp . ,",
    "@xmath32>t[j]$ ] , @xmath32=t[j]$ ] ) .",
    "then we say that the vertex @xmath30 is _ reachable _ by the string @xmath31 or the string @xmath31 _ reaches _ the vertex @xmath30 .",
    "clearly , each string reaches exactly one leaf of any given tree .     processing strings of length @xmath33 . the strings @xmath34 and @xmath35 reach the shaded vertex .",
    "the lempel - ziv factorization of a string @xmath31 is the decomposition @xmath36 , built by the following greedy procedure processing @xmath31 from left to right :    * @xmath37 $ ] ; * let @xmath38 $ ] ; if @xmath39 $ ] does not occur in @xmath40 $ ] , put @xmath41 $ ] ; otherwise , put @xmath42 to be the longest prefix of @xmath43 $ ] that has an occurrence starting at some position @xmath44 .",
    "for example , the string @xmath45 has the lempel - ziv factorization @xmath46 .",
    "let @xmath31 and @xmath47 be strings of length @xmath1 .",
    "suppose @xmath48 and @xmath49 are their lempel - ziv factorizations .",
    "we say that the lempel - ziv factorizations of @xmath31 and @xmath47 are equivalent if @xmath50 and @xmath51 for each @xmath52 .",
    "we say that a decision tree processing strings of length @xmath1 finds the lempel - ziv factorization if for any strings @xmath31 and @xmath47 of length @xmath1 such that @xmath31 and @xmath47 reach the same leaf of the tree , the lempel - ziv factorizations of @xmath31 and @xmath47 are equivalent .",
    "the construction of the lempel - ziv factorization for a string of length @xmath1 with at most @xmath2 distinct letters requires @xmath3 comparisons of letters in the worst case .",
    "[ lempelziv ]    let @xmath53 be an alphabet . to obtain the lower bound , we construct a set of input strings of length @xmath1 such that the construction of the lempel - ziv factorization for these strings requires performing @xmath54 binary searches on the @xmath55-element alphabet .    without loss of generality , we assume that @xmath1 and @xmath2 are even and @xmath56 .",
    "denote @xmath57 , @xmath58 , and @xmath59 .",
    "we view @xmath60 as a `` dictionary '' containing all letters @xmath61 with even @xmath13 .",
    "note that @xmath62 . consider a string @xmath31 of the following form : @xmath63 informally , the string @xmath31 represents a sequence of queries to our `` dictionary '' @xmath60 ; any decision tree finding the lempel - ziv factorization of the string @xmath64 must identify each @xmath65 of @xmath31 with some letter of @xmath60 .",
    "otherwise , we can replace @xmath65 with the letter @xmath66 or @xmath67 thus changing the lempel - ziv factorization of the whole string ; the details are provided below .",
    "obviously , @xmath68 and there are @xmath69 possible strings @xmath31 of the form  .",
    "let us take a decision tree which computes the lempel - ziv factorization for the strings of length @xmath1 .",
    "it suffices to prove that each leaf of this tree is reachable by at most one string @xmath64 with @xmath31 of the form  .",
    "indeed , such decision tree has at least @xmath69 leafs and the height of the tree is at least @xmath70 .",
    "suppose to the contrary that some leaf of the decision tree is reachable by two distinct strings @xmath71 and @xmath72 such that @xmath31 and @xmath47 are of the form  ; then for some @xmath73 , @xmath74 \\ne r[l]$ ] .",
    "obviously @xmath75 for some @xmath76 and therefore @xmath77 = a_p$ ] for some even @xmath78",
    ". suppose @xmath74",
    "< r[l]$ ] .",
    "let @xmath79 be the set of all integers @xmath80 such that for any string @xmath81 of the form  , if the string @xmath82 reaches the same leaf as the string @xmath83 , then @xmath84 = r_0[l]$ ] .",
    "consider a string @xmath85 that differs from @xmath83 only in the letters @xmath86 , \\ldots , r''[l_m]$ ] and put @xmath86 = \\ldots = r''[l_m ] = a_{p-1}$ ] .",
    "let us first prove that the string @xmath85 reaches the same leaf as @xmath83 . consider a vertex of the path connecting the root and the leaf reachable by @xmath83 .",
    "let the vertex be labeled with a pair @xmath19 .",
    "we have to prove that the comparison of @xmath87 $ ] and @xmath88 $ ] leads to the same result as the comparison of @xmath89 $ ] and @xmath90 $ ] .",
    "the following cases are possible :    1 .",
    "@xmath91 for all @xmath92 ; then @xmath89 = r''[i]$ ] and @xmath90 = r''[j]$ ] ; 2 .",
    "@xmath93 for some @xmath92 and @xmath89 < r[j]$ ] ; then since @xmath94 = a_{p-1 } < a_p = r[l_q ] = r[i]$ ] and @xmath90 = r''[j]$ ] , we obtain @xmath87 < r''[j]$ ] ; 3 .",
    "@xmath93 for some @xmath92 and @xmath89 > r[j]$ ] ; then we have @xmath95 because @xmath96 = r'[p/2 ] = a_{p-1 } > r'[i]$ ] while @xmath97 > r'[j]$ ] , and thus since @xmath89 = a_p > r[j]$ ] , we see that @xmath98 > r[j ] = r''[j]$ ] ; 4 .",
    "@xmath93 for some @xmath92 and @xmath89 = r[j]$ ] ; then , by definition of the set @xmath99 , @xmath100 for some @xmath101 and @xmath87 = r''[j ] = a_{p-1}$ ] ; 5 .",
    "@xmath102 for some @xmath92 ; this case is symmetric to the above cases .",
    "thus @xmath85 reaches the same leaf as @xmath83 .",
    "but the strings @xmath83 and @xmath85 have the different lempel - ziv factorizations : the lempel - ziv factorization of @xmath85 has one letter factor @xmath103 at position @xmath104 while @xmath83 does not since @xmath105 = a_\\sigma a_pa_\\sigma$ ] is a substring of @xmath106 $ ] .",
    "this contradicts to the fact that the analyzed tree computes the lempel - ziv factorization .",
    "in this section we consider some combinatorial facts that will be useful in our main algorithm described in the following section .",
    "the _ exponent _ of a string @xmath31 is the number @xmath107 , where @xmath20 is the minimal period of @xmath31 .",
    "run _ of a string @xmath31 is a substring @xmath108 $ ] of exponent at least  @xmath6 and such that both substrings @xmath109 $ ] and @xmath110 $ ] , if defined , have strictly greater minimal periods than @xmath108 $ ] .",
    "a run whose exponent is greater than or equal to  @xmath33 is called a _",
    "cubic run_. for a fixed @xmath111 , a _ @xmath112-short run _ of a string @xmath31 is a substring @xmath108 $ ] which can be represented as @xmath113 for nonempty strings @xmath114 and @xmath115 such that @xmath116 , @xmath117 is the minimal period of @xmath108 $ ] , and both substrings @xmath109 $ ] and @xmath110 $ ] , if defined , have strictly greater minimal periods .",
    "the string @xmath118 has four runs @xmath119 = aa$ ] , @xmath120 = aa$ ] , @xmath121 = aabaaba$ ] , @xmath122 = abab$ ] and one @xmath123-short run @xmath124 = aba$ ] .",
    "the sum of exponents of all runs is equal to @xmath125 .",
    "as it was proved in @xcite , the number of all runs is linear in the length of string .",
    "we use a stronger version of this fact .",
    "the number of all runs in any string of length @xmath1 is less than @xmath1 .",
    "[ runsnum ]    the following lemma is a straightforward corollary of ( * ? ? ?",
    "* lemma 1 ) .    for a fixed @xmath111 ,",
    "any string of length @xmath1 contains @xmath5 @xmath112-short runs .",
    "[ almostrunsnum ]    we also need a classical property of periodic strings .",
    "suppose a string @xmath10 has periods @xmath20 and @xmath126 such that @xmath127 ; then @xmath128 is a period of @xmath10 .",
    "[ finewilflemma ]    let @xmath129 and @xmath130 be substrings with the periods @xmath131 and @xmath132 respectively",
    ". suppose @xmath129 and @xmath130 have a common substring of the length @xmath133 or greater ; then @xmath129 and @xmath130 have the period @xmath134 .",
    "[ stringsintersect ]    it is immediate from lemma  [ finewilflemma ] .",
    "unfortunately , in a string of length @xmath1 the sum of exponents of runs with the minimal period @xmath20 or greater is not equal to @xmath135 as the following example from @xcite shows : @xmath136 .",
    "indeed , for any @xmath137 , the string @xmath136 contains at least @xmath138 runs with the shortest period @xmath20 or greater : @xmath139 for @xmath140 .",
    "however , it turns out that this property holds for cubic runs .",
    "for any @xmath141 and any string @xmath31 of length @xmath1 , the sum of exponents of all cubic runs in @xmath31 with the minimal period @xmath20 or greater is less than @xmath142 .",
    "[ cubicrunexp ]    consider a string @xmath31 of length @xmath1 .",
    "denote by @xmath143 the set of all cubic runs of @xmath31 .",
    "let @xmath144 $ ] and @xmath145 $ ] be distinct cubic runs such that @xmath146 .",
    "for any string @xmath16 , @xmath147 denotes the exponent of @xmath16 and @xmath148 denotes the minimal period of @xmath16 .",
    "it follows from lemma  [ stringsintersect ] that @xmath129 and @xmath130 can not have a common substring of length @xmath149 or longer .",
    "let @xmath150 be a positive integer .",
    "suppose @xmath151 ; then either @xmath152 or @xmath153 .",
    "the later easily implies @xmath154 and therefore @xmath155 .",
    "moreover , we have @xmath156 .",
    "hence @xmath157 and then @xmath158 .",
    "denote @xmath159 and @xmath160 .",
    "evidently @xmath161 .",
    "finally , we obtain @xmath162 .",
    "we say that a decision tree processing strings of length @xmath1 _ finds all runs with a given property @xmath163 _ if for each distinct strings @xmath129 and @xmath130 such that @xmath164 and @xmath129 and @xmath130 reach the same leaf of the tree , the substring @xmath165 $ ] is a run satisfying @xmath163 iff @xmath166 $ ] is a run satisfying @xmath163 for all @xmath167 .",
    "we say that two decision trees processing strings of length @xmath1 are equivalent if for each reachable leaf @xmath168 of the first tree , there is a leaf @xmath169 of the second tree such that for any string @xmath31 of length @xmath1 , @xmath31 reaches @xmath168 iff @xmath31 reaches @xmath169 .",
    "the _ basic height _ of a decision tree is the minimal number @xmath170 such that each path connecting the root and a leaf of the tree has at most @xmath170 edges labeled with the symbols `` @xmath27 '' and `` @xmath29 '' .    for a given positive integer @xmath20",
    ", we say that a run @xmath83 of a string is _",
    "@xmath20-periodic _ if @xmath171 and @xmath20 is a ( not necessarily minimal ) period of @xmath83 .",
    "we say that a run is a _",
    "@xmath20-run _ if it is @xmath126-periodic for some @xmath126 which is a multiple of @xmath20 .",
    "note that any run is @xmath123-run .",
    "let us describe a `` naive '' decision tree finding all @xmath20-runs in strings of length @xmath1 .",
    "denote by @xmath31 the input string .",
    "our tree simply compares @xmath32 $ ] and @xmath172 $ ] for all @xmath167 such that @xmath173 is a multiple of @xmath20 .",
    "the tree has the height @xmath174 and the same basic height .",
    "note that a decision tree algorithm finding runs does nt report runs in the same way as ram algorithms do .",
    "the algorithm only collects sufficient information to conclude where the runs are ; once its knowledge of the structure of the input string becomes sufficient to find all runs without further comparisons of symbols , the algorithm stops and does nt care about the processing of obtained information . to simplify the construction of an efficient decision tree , we use the following lemma that enables us to estimate only the basic height of our tree .",
    "suppose a decision tree processing strings of length @xmath1 has basic height  @xmath170 .",
    "then it is equivalent to a decision tree of height @xmath175 .",
    "[ equalcomp ]    to construct the required decision tree of height @xmath176 , we modify the given decision tree of basic height @xmath170 .",
    "first , we remove all unreachable vertices of this tree . after this",
    ", we contract each non - branching path into a single edge , removing all intermediate vertices and their outgoing edges .",
    "indeed , the result of a comparison corresponding to such an intermediate vertex is determined by the previous comparisons .",
    "so , it is straightforward that the result tree is equivalent to the original tree .",
    "now it suffices to prove that there are at most @xmath177 edges labeled with the symbol `` @xmath28 '' along any path connecting the root and some leaf .",
    "observe that if we perform @xmath177 comparisons on @xmath1 elements and each comparison yields an equality , then either all elements are equal or the result of at least one comparison can be deduced by transitivity from other comparisons .",
    "suppose a path connecting the root and some leaf has at least @xmath1 edges labeled with the symbol `` @xmath28 '' . by the above observation",
    ", the path contains an edge labeled with `` @xmath28 '' leaving a vertex labeled with @xmath19 such that the equality of the @xmath13th and the @xmath18th letters of the input string follows by transitivity from the comparisons made earlier along this path .",
    "then this vertex has only one reachable child .",
    "but this is impossible because all such vertices of the original tree were removed during the contraction step .",
    "this contradiction finishes the proof .    for any integers @xmath1 and @xmath20 ,",
    "there is a decision tree that finds all @xmath20-periodic runs in strings of length @xmath1 and has basic height at most @xmath178.[construn ]    denote by @xmath31 the input string .",
    "the algorithm is as follows ( note that the resulting decision tree contains only comparisons of letters of @xmath31 ) :    1 .",
    "assign @xmath179 ; 2 .",
    "if @xmath32 \\ne t[i{+}p]$ ] , then assign @xmath180 , @xmath181 and for @xmath182 , compare @xmath183 $ ] and @xmath184 $ ] until @xmath183 \\ne t[i'{+}p]$ ] ; [ lst : pnt ] 3 .",
    "increment @xmath13 and if @xmath185 , jump to line [ lst : pnt ] .",
    "obviously , the algorithm performs at most @xmath178 symbol comparisons yielding inequalities .",
    "let us prove that the algorithm finds all @xmath20-periodic runs .",
    "let @xmath186 $ ] be a @xmath20-periodic run .",
    "for the sake of simplicity , suppose @xmath187 . to discover this run , one must compare @xmath188 $ ] and @xmath189 $ ] for each @xmath190 .",
    "let us show that the algorithm performs all these comparisons .",
    "suppose , to the contrary , for some @xmath191 , the algorithm does nt compare @xmath188 $ ] and @xmath189 $ ] .",
    "then for some @xmath192 such that @xmath193 , the algorithm detects that @xmath194 \\ne t[i_0{+}p]$ ] and `` jumps '' over @xmath195 by assigning @xmath196 at line  [ lst : pnt ] .",
    "obviously @xmath197 . then @xmath198 and",
    "hence for each @xmath199 , the algorithm compares @xmath183 $ ] and @xmath184 $ ] . since @xmath200 ,",
    "@xmath188 $ ] and @xmath189 $ ] are compared , contradicting to our assumption .",
    "there is a constant @xmath201 such that for any integer @xmath1 , there exists a decision tree of height at most @xmath202 that finds all runs in strings of length @xmath1 .    by lemma  [ equalcomp ] ,",
    "it is sufficient to build a decision tree with linear basic height .",
    "so , below we count only the comparisons yielding inequalities and refer to them as `` inequality comparisons '' .",
    "in fact we prove the following more general fact : for a given string @xmath31 of length @xmath1 and a positive integer @xmath20 , we find all @xmath20-runs performing @xmath203 inequality comparisons .",
    "to find all runs of a string , we simply put @xmath204 .",
    "the algorithm consists of five steps .",
    "each step finds @xmath20-runs of @xmath31 with a given property .",
    "let us choose a positive integer constant @xmath205 ( the exact value is defined below . )",
    "the algorithm is roughly as follows :    1 .",
    "find in a straightforward manner all @xmath20-runs having periods @xmath206 ; 2 .",
    "using the information from step  1 , build a new string @xmath47 of length @xmath207 such that periodic factors of @xmath31 and @xmath47 are strongly related to each other ; 3 .",
    "find @xmath20-runs of @xmath31 related to periodic factors of @xmath47 with exponents less than  @xmath33 ; 4 .",
    "find @xmath20-runs of @xmath31 related to periodic factors of @xmath47 with periods less than  @xmath112 ; 5 .",
    "find @xmath20-runs of @xmath31 related to other periodic factors of @xmath47 by calling steps  15 recursively for some substrings of  @xmath31 .",
    "* initially , we split the string @xmath31 into @xmath207 contiguous blocks of length @xmath20 ( if @xmath1 is not a multiple of @xmath20 , we pad @xmath31 on the right to the required length with a special symbol which is less than all other symbols . ) for each @xmath208 and @xmath209 , we denote by @xmath210 the minimal @xmath211 such that @xmath212 \\ne t[(i{-}1)p{+}k{+}jp]$ ] and we put @xmath213 if @xmath214 or there is no such @xmath170 . to compute @xmath210 , we simply compare @xmath212 $ ] and @xmath215 $ ] for @xmath216 until @xmath212 \\ne t[(i{-}1)p{+}k{+}jp]$ ] .",
    "[ texample ] let @xmath217 , @xmath218 , @xmath219 .",
    "the following table contains @xmath210 for @xmath220 : @xmath221 &   bbba    &   aada    &   aaaa    &   aaaa    &   aada    &   aaaa    &   aaab    &    bbbb    &   bbbb \\\\",
    "\\hline m_{i,1},m_{i,2 }     &   1,1     &   3,3     &   -1,3     &   3,-1    &   3,3     &   4,1     &   1,1     &    -1,-1   &   -1,-1\\\\ \\end{array}\\ ] ]    to compute a particular value of @xmath210 , one needs at most one inequality comparison ( zero inequality comparisons if the computed value is  @xmath222 . )",
    "further , for each @xmath208 and @xmath209 , we compare @xmath223 $ ] and @xmath224 $ ] ( if defined ) for @xmath225 until @xmath223 \\ne t[ip{-}k{+}jp]$ ] ; similar to the above computation of @xmath210 , this procedure performs at most one inequality comparison for any given @xmath13 and @xmath18 .",
    "hence , the total number of inequality comparisons is at most @xmath226 .",
    "once these comparisons are made , all @xmath227-periodic runs in the input string are determined for all @xmath228",
    ".    * step 2 .",
    "* now we build an auxiliary structure induced by @xmath210 on the string @xmath31 . in this step ,",
    "no comparisons are performed ; we just establish some combinatorial properties required for further steps .",
    "we make use of the function : @xmath229 we create a new string @xmath47 of length @xmath207 .",
    "the alphabet of this string can be taken arbitrary , we just describe which letters of @xmath47 coincide and which do not .",
    "for each @xmath230 , @xmath231 = t'[i_2]$ ] iff for each @xmath232 , either @xmath233 or the following conditions hold simultaneously : @xmath234 , t[(i_1{-}1)p{+}m_{i_1,j}{+}jp ] ) = { \\operatorname{sgn}}(t[(i_2{-}1)p{+}m_{i_2 } ] , t[(i_2{-}1)p{+}m_{i_2,j}{+}jp])\\enspace . \\end{array}\\ ] ] note that the status of each of these conditions is known from step  1 .",
    "also note that the values @xmath235 are not used in the definition of @xmath47 ; we computed them only to find all @xmath236-periodic @xmath20-runs .",
    "denote @xmath237 , t[(i{-}1)p{+}m_{i,1}{+}p])$ ] .",
    "let @xmath238 be a new alphabet for the string @xmath47 .",
    "the following table contains @xmath239 , @xmath240 , and @xmath47 : @xmath241   &   bbba    &   aada    &   aaaa    &   aaaa    &   aada    &   aaaa    &   aaab    &   bbbb    &   bbbb    \\\\",
    "\\hline m_{i,1 }               &     1     &     3     &     -1    &     3     &     3     &     4     &     1     &    -1     &    -1     \\\\",
    "\\hline s_i                   &     1     &     1     &     -     &    -1     &     1     &    -1     &    -1     &    -      &     -     \\\\",
    "\\hline t'[i ]                 &     j     &     e     &     f     &     g     &     e     &     h     &     i     &    f      &      f \\end{array}\\ ] ]    if @xmath31 contains two identical sequences of @xmath112 blocks each , i.e. , @xmath242 = t[(i_2{-}1)p{+}1 .. (i_2{-}1{+}d)p]$ ] for some @xmath243 , @xmath244 , then @xmath245 for each @xmath232 and hence @xmath231 = t'[i_2]$ ] .",
    "this is why @xmath246 = t'[5]$ ] in example  [ texample ] . on the other hand , equal letters in @xmath47",
    "may correspond to different sequences of blocks in @xmath31 , like the letters @xmath247 = t'[8]$ ] in example  [ texample ] .",
    "the latter property makes the subsequent argument more involved but allows us to keep the number of inequality comparisons linear .",
    "let us point out the relations between periodic factors of @xmath31 and @xmath47 .",
    "let for some @xmath248 , @xmath249 $ ] be a @xmath227-periodic @xmath20-run , i.e. , @xmath249 $ ] is a @xmath20-run that is not found on step  1 .",
    "denote @xmath250 .",
    "since @xmath249 $ ] is @xmath227-periodic , @xmath47 has some periodicity in the corresponding substring , namely , @xmath251 $ ] has the period @xmath126 ( see example below ) .",
    "let @xmath252 $ ] be the largest substring of @xmath47 containing @xmath16 and having the period @xmath126 .",
    "since @xmath253 , @xmath252 $ ] is either a @xmath112-short run with the minimal period @xmath126 or a run whose minimal period divides @xmath126 .",
    "consider fig .",
    "[ fig : corrun ] .",
    "let @xmath254 , @xmath255 .",
    "the string @xmath249 = a\\cdot aada\\cdot aaaa\\cdot aaaa\\cdot aada\\cdot aaaa\\cdot aaa$ ] is a @xmath20-run with the minimal period @xmath256 ( here @xmath257 ) .",
    "denote @xmath258 , @xmath259 , and @xmath260 .",
    "the string @xmath261 = t'[k_1 .. k_2 ] = t'[2 .. 5 ] = efge$ ] is a @xmath112-short run of @xmath47 with the minimal period  @xmath262 .",
    "-run corresponding to @xmath112-short run @xmath252 = efge$ ] , where @xmath259 , @xmath260 , @xmath218 , @xmath219 , @xmath262 , @xmath254 , @xmath263 , @xmath264 , @xmath265 . ]",
    "conversely , given a run or @xmath112-short run @xmath252 $ ] with the minimal period @xmath126 , we say that a @xmath20-run @xmath249 $ ] _ corresponds to @xmath252 $ ] _ ( or @xmath266 $ ] is a @xmath20-run _ corresponding to @xmath252 $ ] _ ) if @xmath249 $ ] is , for some integer @xmath83 , @xmath267-periodic and @xmath261 $ ] , where @xmath250 , is a substring of @xmath252 $ ] ( see fig .  [",
    "fig : corrun ] and example  [ texample ] ) .",
    "the above observation shows that each @xmath20-run of @xmath31 that is not found on step  1 corresponds to some run or @xmath112-short run of @xmath47 .",
    "let us describe the substring that must contain all @xmath20-runs of @xmath31 corresponding to a given run or @xmath112-short run @xmath252 $ ] .",
    "denote @xmath268 and @xmath269 .",
    "now it is easy to see that if @xmath249 $ ] is a @xmath20-run corresponding to @xmath252 $ ] , then @xmath249 $ ] is a substring of @xmath108 $ ] .    for @xmath254 and @xmath255 ,",
    "the string @xmath249 = a\\cdot aada\\cdot aaaa\\cdot aaaa\\cdot aada\\cdot aaaa\\cdot aaa$ ] is a @xmath20-run corresponding to @xmath252 = efge$ ] , where @xmath259 , @xmath260 .",
    "indeed , the string @xmath261 = t'[2 .. 5]$ ] , for @xmath270 , is a substring of @xmath252 $ ] .",
    "denote @xmath271 , @xmath272 .",
    "observe that @xmath249 = t[4 .. 27]$ ] is a substring of @xmath108 = t[1 .. 28]$ ] .",
    "it is possible that there is another @xmath20-run of @xmath31 corresponding to the string @xmath252 $ ] .",
    "consider the following example .",
    "[ twocorr ] let @xmath273 , @xmath274 , @xmath219 .",
    "denote @xmath237 , t[(i{-}1)p{+}m_{i,1}{+}p])$ ] .",
    "let @xmath275 be a new alphabet for the string @xmath47 .",
    "the following table contains @xmath239 , @xmath240 , and @xmath47 : @xmath276 & fa & bc & de & da & bc & de & da & ai & fj & fa & ai & fj & ff \\\\",
    "m_{i,1 }              & 1   & 1   & 2   & 1   & 1   & 2   & 1   & 1   & 2   & 1   & 1   & 2   & -1 \\\\ s_i                  & 1   & -1   & 1   & 1   & -1   & 1   & 1   & -1   & 1   & 1   & -1   & 1   & -   \\\\ t'[i ]                & x   & y   & z   & x   & y   & z   & x   & y   & z   & x   & y   & z   & w \\end{array}\\ ] ] note that @xmath20-runs @xmath277 = abcded\\cdot abcded$ ] and @xmath278 = aaifjf\\cdot aaifjf$ ] correspond to the same @xmath20-run of @xmath47 , namely ,",
    "@xmath279 = xyz\\cdot xyz\\cdot xyz\\cdot xyz$ ] .    thus to find for all @xmath248 all @xmath227-periodic @xmath20-runs of @xmath31",
    ", we must process all runs and @xmath112-short runs of  @xmath47 .",
    "* step 3 . *",
    "consider a noncubic run @xmath252 $ ] .",
    "let @xmath126 be its minimal period .",
    "denote @xmath268 and @xmath269 .",
    "the above analysis shows that any @xmath20-run of @xmath31 corresponding to @xmath252 $ ] is a @xmath280-periodic run of @xmath108 $ ] for some @xmath281 , where @xmath282 . since @xmath283",
    ", we have @xmath284 . hence to find all @xmath20-runs of @xmath108",
    "$ ] , it suffices to find for each @xmath281 all @xmath280-periodic runs of @xmath108 $ ] using lemma  [ construn ] .",
    "thus the processing performs @xmath285 inequality comparisons .",
    "analogously we process @xmath112-short runs of @xmath47 .",
    "therefore , by lemmas  [ runsnum ] and  [ almostrunsnum ] , only @xmath286 inequality comparisons are required to process all @xmath112-short runs and noncubic runs of @xmath47 .",
    "now it suffices to find all @xmath20-runs of @xmath31 corresponding to cubic runs of @xmath47 .",
    "* step 4 . *",
    "let @xmath252 $ ] be a cubic run with the minimal period @xmath126 . in this step",
    "we consider the case @xmath287 .",
    "it turns out that such small - periodic substrings of @xmath47 correspond to substrings in @xmath31 that are either periodic and discovered at step  1 , or aperiodic .",
    "therefore this step does not include any comparisons .",
    "the precise explanation follows .",
    "suppose that @xmath288 for all @xmath289 .",
    "then @xmath288 for all @xmath290 by periodicity of @xmath252 $ ] .",
    "therefore by the definition of @xmath291 , we have @xmath292 = t[k{+}pq]$ ] for all @xmath293 . hence the substring @xmath294 $ ] has the period @xmath227 .",
    "now it follows from lemma  [ stringsintersect ] that any @xmath20-run of @xmath31 corresponding to @xmath252 $ ] is @xmath227-periodic and therefore was found on step  1 because @xmath295 .",
    "suppose that @xmath296 for some @xmath289 .",
    "denote @xmath297 , @xmath298 .",
    "let @xmath299 . since @xmath300 = t'[k{+}rq]$ ] , we have @xmath301 and @xmath302 , t[s{+}pq ] ) = { \\operatorname{sgn}}(t[s{+}rpq ] , t[s{+}(r{+}1)pq])$ ] ( see fig .  [",
    "fig : cubicrun ] ) .",
    "therefore , one of the following sequences of inequalities holds : @xmath303",
    "< t[s{+}pq ] < t[s{+}2pq ] < \\ldots < t[s{+}lpq ] , \\\\",
    "t[s ] > t[s{+}pq ] > t[s{+}2pq ] > \\ldots > t[s{+}lpq]\\enspace .",
    "\\label{eq : chains } \\end{array}\\ ] ]     with the shortest period @xmath304 , where @xmath218 , @xmath259 , @xmath305 , @xmath306 , @xmath307 , @xmath308 , @xmath309 . ]",
    "let @xmath280 be a multiple of @xmath227 such that @xmath310 .",
    "now it suffices to show that due to the found `` aperiodic chain '' , there are no @xmath280-periodic @xmath20-runs of @xmath31 corresponding to @xmath252 $ ] .",
    "suppose , to the contrary , @xmath311 $ ] is a @xmath280-periodic @xmath20-run corresponding to @xmath252 $ ] ( see fig .",
    "[ fig : cubicrun ] ) . denote @xmath312 and @xmath313 . by the definition of corresponding @xmath20-runs ,",
    "@xmath314 $ ] is a substring of @xmath252 $ ] . since @xmath315 and @xmath310",
    ", we have @xmath316 .",
    "therefore , @xmath317 and the inequalities   imply @xmath318 \\ne t[r'p{+}m_{r'{+}1,q } + p']$ ] , a contradiction .",
    "* step 5 . *",
    "let @xmath252 $ ] be a cubic run with the minimal period @xmath126 such that @xmath319 .",
    "denote @xmath268 and @xmath269 . to find all @xmath20-runs corresponding to the run @xmath252 $ ]",
    ", we make a recursive call executing steps  15 again with new parameters @xmath320 , @xmath321 , and @xmath322 $ ] .    after the analysis of all cubic runs of @xmath47 , all @xmath20-runs of @xmath31 are found and the algorithm stops .",
    "now it suffices to estimate the number of inequality comparisons performed during any run of the described algorithm .    *",
    "time analysis .",
    "* as shown above , steps  14 require @xmath203 inequality comparisons .",
    "let @xmath323 , \\ldots , t'[i_k .. j_k]$ ] be the set of all cubic runs of @xmath47 with the minimal period @xmath112 or greater .",
    "for @xmath324 , denote by @xmath325 the minimal period of @xmath326 $ ] and denote @xmath327 .",
    "let @xmath328 be the number of inequality comparisons required by the algorithm to find all @xmath20-runs in a string of length @xmath1 .",
    "then @xmath328 can be computed by the following formula : @xmath329 for @xmath330 , the number @xmath331 is , by definition , the exponent of @xmath326 $ ] .",
    "it follows from lemma  [ cubicrunexp ] that the sum of exponents of all cubic runs of @xmath47 with the shortest period @xmath112 or larger is less than @xmath332 .",
    "note that for any @xmath330 , @xmath333 and therefore @xmath334 . thus assuming @xmath335",
    ", we obtain @xmath336 .",
    "finally , we have @xmath337 .",
    "the reference to lemma  [ equalcomp ] ends the proof .",
    "it remains an open problem whether there exists a linear ram algorithm finding all runs in a string over a general ordered alphabet .",
    "however , it is still possible that there are nontrivial lower bounds in some more sophisticated models that are strongly related to ram model .",
    "abouelhoda , s. kurtz , e. ohlenbusch .",
    "_ replacing the suffix trees with enhanced suffix arrays _ , j. discrete algorithms 2 ( 2004 ) 5386 .",
    "aho , d.s .",
    "hirschberg , j.d .",
    "_ bounds on the complexity of the longest common subsequence problem _ , j. acm 23(1 ) ( 1976 ) 112 .",
    "h. bannai , t. i , s. inenaga , y. nakashima , m. takeda , k. tsuruta . _",
    "the `` runs '' theorem _ , preprint ( 2014 ) arxiv : 1406.0263v4 d. breslauer .",
    "_ efficient string algorithmics _ , ph.d . thesis ( 1992 ) .",
    "g. chen , s.j .",
    "puglisi , w.f .",
    "_ lempel - ziv factorization using less time and space _ , mathematics in computer science 1(4 ) ( 2008 ) 605623 .",
    "m. crochemore . _ transducers and repetitions _ , theoret .",
    "45(1 ) ( 1986 ) 6386 .",
    "m. crochemore , l. ilie , w.f .",
    "_ a simple algorithm for computing the lempel - ziv factorization _ , data compression conference 18 ( 2008 ) 482488 .",
    "m. crochemore , l. ilie , l. tinta . _",
    "the `` runs '' conjecture_. theoretical computer science 412(27 ) ( 2011 ) 29312941 .",
    "m. crochemore , m. kubica , j. radoszewski , w. rytter , t. wale .",
    "_ on the maximal sum of exponents of runs in a string _ , journal of discrete algorithms 14 ( 2012 ) 2936",
    ". s. even , v.r .",
    "pratt , m. rodeh . _",
    "linear algorithm for data compression via string matching _ , j. acm 28(1 ) ( 1981 ) 1624 .",
    "fiala , d.h .",
    "_ data compression with finite windows _ , communications of the acm 32(4 ) ( 1989 ) 490505 .",
    "n. j. fine , h. s. wilf . _ uniqueness theorem for periodic functions _ , proc .",
    "( 1965 ) 109114 . r. kolpakov . _ on primary and secondary repetitions in words _ , theoretical computer science 418 ( 2012 ) 7181 .",
    "r. kolpakov , g. kucherov .",
    "_ finding maximal repetitions in a word in linear time _ , focs 40 ( 1999 ) 596604 .",
    "r. kolpakov , m. podolskiy , m. posypkin , n. khrapov .",
    "_ searching of gapped repeats and subrepetitions in a word _ , combinatorial pattern matching ( 2014 ) 212221 .",
    "a. lempel , j. ziv .",
    "_ on the complexity of finite sequences _ , ieee trans .",
    "inform . theory 92(1 ) ( 1976 ) 7581 .",
    "_ detecting leftmost maximal periodicities _ , discrete appl",
    "25 ( 1989 ) 145153 .",
    "main , r.j .",
    "lorentz . _ linear time recognition of squarefree strings _ , combinatorial algorithms on words ( 1985 ) 271278 .",
    "d. okanohara , k. sadakane . _ an online algorithm for finding the longest previous factors _ , algorithms - esa 2008 .",
    "springer berlin heidelberg ( 2008 ) 696707",
    ". t. starikovskaya .",
    "_ computing lempel - ziv factorization online _ , mfcs 2012 ( 2012 ) 789799 .",
    "j. yamamoto , t. i , h. bannai , s. inenaga , m. takeda .",
    "_ faster compact on - line lempel - ziv factorization _",
    ", preprint ( 2013 ) arxiv : 1305.6095v1"
  ],
  "abstract_text": [
    "<S> the complexity of computing the lempel - ziv factorization and the set of all runs (= maximal repetitions ) is studied in the decision tree model of computation over ordered alphabet . </S>",
    "<S> it is known that both these problems can be solved by ram algorithms in @xmath0 time , where @xmath1 is the length of the input string and @xmath2 is the number of distinct letters in it . </S>",
    "<S> we prove an @xmath3 lower bound on the number of comparisons required to construct the lempel - ziv factorization and thereby conclude that a popular technique of computation of runs using the lempel - ziv factorization can not achieve an @xmath4 time bound . </S>",
    "<S> in contrast with this , we exhibit an @xmath5 decision tree algorithm finding all runs in a string . </S>",
    "<S> therefore , in the decision tree model the runs problem is easier than the lempel - ziv factorization . </S>",
    "<S> thus we support the conjecture that there is a linear ram algorithm finding all runs . </S>"
  ]
}