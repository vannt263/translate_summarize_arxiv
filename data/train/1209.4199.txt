{
  "article_text": [
    "in this paper , we consider the following unconstrained integer optimization problem @xmath0 where , @xmath1 , @xmath2 , @xmath3 .",
    "+ generally speaking ,",
    "the above optimization problem is np - hard , which can not be solved in polynomial time ( by enumeration , there exist @xmath4 choices ) .",
    "a direct method is to adopt the so called  divide - and - conquer \" strategy , which separates the optimization problem into several subproblems and then solve these subproblems step by step .",
    "branch and bound ( b&b ) , branch and cut ( b&c ) , and branch and price ( b&p ) belong to this kind ; however , these methods are essentially in exponential time .",
    "an indirect method is to relax the optimization problem by loosening its integrality constraints to continuity and then solve the continuous relaxation problem or its lagrangian dual problem , including lp - based relaxation , sdp - based relaxation , lagrangian relaxation , etc .",
    "nevertheless , when rounding off the relaxation solution , there may cause some infeasibility or can only get approximate solution , and when using lagrangian dual , there may exist duality gap between the primal and the dual problem @xcite .",
    "+ on the other hand , some stochastic algorithms , such as genetic algorithm ( ga ) @xcite , simulated annealing ( sa ) @xcite , ant colony optimization ( aco ) @xcite , are also widely used for combinatorial optimization problems , which aim to obtain  good solutions \" in reasonable time . in terms of the concepts of state and state transition , a new heuristic search algorithm called state transition algorithm ( sta ) has been proposed recently , which exhibits fantastic results in continuous function optimization @xcite . in @xcite ,",
    "three intelligent operators ( geometrical operators ) named swap , shift and symmetry have been designed for discrete sta to solve the traveling salesman problem ( tsp ) , and it shows that the discrete sta outperforms its competitors in respect to both time complexity and search ability . to better develop discrete sta for medium - size or large - size discrete optimization problems , in the study , we firstly build the framework of discrete state transition algorithm and propose the five key elements for discrete sta , of which , the representation of a decision variable in discrete sta , the local and global operators and the dynamic adjustment strategy are mainly studied .",
    "four geometrical operators named swap , shift , symmetry and substitute are designed , which are intelligent due to their adaptability in various types of integer programming .",
    "the mixed strategies of  greedy criterion \" and  risk and restore in probability \" are proposed , in which ,  greedy criterion \" and  restore in probability \" are used to guarantee good convergence performance , and ",
    "risk a bad solution in probability \" aims to escape from local optimality .",
    "some applications ranging from traveling salesman problem to discrete value selection problem are studied .",
    "if a solution to a specific optimization problem is described as a state , then the transformation to update the solution becomes a state transition . without loss of generality ,",
    "the unified form of discrete state transition algorithm can be described as @xmath5 where , @xmath6 stands for a current state , corresponding to a solution of a specific optimization problem ; @xmath7 is a function of @xmath8 and historical states ; @xmath9 , @xmath10 are transformation operators , which are usually state transition matrixes ; @xmath11 is a operation , which is admissible to operate on two states ; @xmath12 is the cost function or evaluation function .",
    "+ the first element we want to mention is the representation of a solution to a discrete optimization problem . in discrete sta , we choose special representations , which can be easily manipulated by the intelligent operators .",
    "why we call the operators  intelligent \" due to its geometrical property ( swap , shift , symmetry and substitute ) , and a intelligent operator has the same geometrical function for different representations . the big advantage of such representations and operators is that , after each state transformation , the newly created state is always feasible , avoiding the trouble in dealing with constraints .",
    "+ the second important thing in state transition algorithm is that , when a transformation operator is exerted on current state , the next state is not deterministic , that is to say , there are possibly different choices for the next state .",
    "it is not difficult to imagine that all possible choices will constitute a set , or a neighborhood .",
    "then we execute several times of transformation ( search enforcement @xmath13 ) on current state , to sampling in the neighborhood .",
    "sampling is the first key element in state transition algorithm , which can reduce the search space and avoid enumeration .",
    "+ as a intelligent optimization algorithm , the discrete state transition algorithm also comprises the following key elements : + ( 1 ) local exploitation and global exploration . in optimization algorithms",
    ", it is very significant to design good local and global operators .",
    "the local exploitation can guarantee high precision of a solution and convergent performance of a algorithm , and the global exploration can avoid getting trapped into local minima or prevent premature convergence . in discrete optimization , it is extremely difficult to define a  good \" local optimal solution due to its dependence on a problem s structure , which leads to the same difficulty in the definition of local exploitation and global exploration .",
    "anyway , in the discrete state transition algorithm , we define the slow change to current solution by a transformation as local exploitation , while the big change to current solution by a transformation as global exploration .",
    "+ ( 2 ) self learning and regular communication .",
    "state transition algorithm behaves in two forms , one is individual - based , the other is population - based , which is certainly a extended version .",
    "the individual - based state transition algorithm focuses on self learning , in other words , with emphasis on the operators designing and dynamic adjustment ( details given in the following ) .",
    "undoubtedly , communication among different states is a promising strategy for state transition algorithm , as indicated in @xcite . through communication",
    ", states can share information and cooperate with each other .",
    "however , how to communicate and when to communicate are key issues . in continuous state transition algorithm , intermittent exchange strategy was proposed , which means that states communicate with each other at a certain frequency in a regular way .",
    "+ ( 3 ) dynamic adjustment .",
    "it is a potentially useful strategy for state transition algorithm . in the iteration process of a algorithm ,",
    "the fitness value can decrease sharply in the early stage , but it stagnates in the late stage , due to the static environment . as a result",
    ", some perturbation should be added to activate the environment .",
    "in fact , dynamic adjustment can be understood and implemented in various ways .",
    "for example , the alternative use of different local and global operators is dynamic adjustment to some extent .",
    "then , we can change the search enforcement , vary the cost function , reduce the dimension , etc .",
    "of course ,  risk a bad solution in probability \" is another dynamic adjustment , which is widely used in simulated annealing ( sa ) . in sa ,",
    "the metropolis criterion @xcite is used to accept a bad solution : @xmath14 where , @xmath15 , @xmath16 is the boltzmann probability factor , @xmath17 is the temperature to regulate the process of annealing . in the early stage",
    ", temperature is high , and it has big probability to accept a bad solution , while in the late stage , temperature is low , and it has very small probability to accept a bad solution , which is the key point to guarantee the convergence .",
    "we can see that the metropolis criterion has the ability to escape from local optimality , but on the other hand , it will miss some  good solutions \" as well .",
    "+ in this study , we focus on the individual - based sta , and the main process of discrete sta is shown in the pseudocode as follows     + as for detailed explanations , swap function in above pseudocode is given as follows for example    from the pseudocodes , we can find that in the simple sta , only  greedy criterion \" is adopted to accept a new  @xmath18 \" , while in dynamic sta , in the whole ,  greedy criterion \" is adopted to keep the incumbent ",
    "@xmath18 \" , in the partial , a bad solution",
    " @xmath19 \" is accepted in each state transformation at a probability @xmath20 , and in the same while , the ",
    "@xmath18 \" is restored in the process at another probability @xmath21 .",
    "the  risk a bad solution in probability \" strategy aims to escape from local optimal , while the  greedy criterion \" and  restore the incumbent best solution in probability \" are to guarantee a good convergence .",
    "firstly , we define the concept of convergence for discrete sta @xmath22 is a global optimum of a discrete optimization problem , @xmath23 is a small constant , and @xmath24 is a natural number .",
    "if @xmath25 , we can say that the algorithm converges to a @xmath26 ; if @xmath27 , we can say that the algorithm converges to a _",
    "global minimum_. however , if @xmath28 is a local minimum solution , then we can say that the algorithm converges to a @xmath26 and a _ local minimum _ for @xmath25 and @xmath27 , respectively .",
    "+ * theorem 1 * the discrete sta can at least converge to a _",
    "local minimum_. + _ proof_. let suppose the maximum number of iterations ( denoted by _ m _ ) is big enough , considering that the  greedy criterion \" is used to keep the incumbent best , then there must exist a number @xmath29 , when @xmath30 , no update of better solution will happen .",
    "that is to say , @xmath31 , where @xmath32 is the solution in the _",
    "_ n__th iteration .",
    "denote @xmath32 as the local minimum solution @xmath28 , and then @xmath33 . + * theorem 2 * the discrete sta can converge to a _",
    "global minimum _ in probability . + _ proof_. let suppose @xmath34 is a global minimum solution , and @xmath35 is the _ _ n__th best solution .",
    "if @xmath36 , according to the  greedy criterion \" , @xmath31 , which means that it converges to @xmath28 . otherwise , there must exist a transformation , either swap , shift , symmetry or substitute , such that @xmath37 , which means that after @xmath38 iterations , @xmath39 will be changed into @xmath40 .",
    "if @xmath41 , the @xmath42 is kept as incumbent best for next iteration , else , @xmath42 is also kept as incumbent best for next iteration in probability . following the similar way , after at most @xmath43 iterations",
    ", @xmath44 will be @xmath45 in probability .",
    "+ from the proof of theorem 2 , we can find that dynamic sta has higher probability than the simple sta to gain the global optimum .",
    "some applications are given to describe the details in the following .",
    "suppose @xmath46 is the set of cities , the traveling salesman problem can be described as : given a set of _ n _ cities and the distance @xmath47 for each pair of cities @xmath48 and @xmath49 , find a roundtrip of minimal total length visiting each city exactly once .",
    "typically , the traveling salesman problem is usually modeled as the following two representations @xcite .",
    "+ ( lp - tsp ) : @xmath50 where , the decision variable @xmath51 is defined by    x_ij= 1 , & if city _",
    "i _ is followed by city _",
    "j _ + 0 , & otherwise    ( qp - tsp ) : @xmath52 here , the decision variable @xmath51 is defined by    x_ij= 1 , & if city _",
    "i _ is in the _ _",
    "j__th position + 0 , & otherwise    we can find that the model of linear programming ( lp ) based tsp is different from the model of quadratic programming ( qp ) based tsp in two aspects , one is the definition of the decision variable @xmath51 , the other is that ( lp - tsp ) has one more constraint than ( qp - tsp ) . taking the difficulty of dealing with constraints into consideration , in discrete sta , we use another simple representation which can be easily manipulated by intelligent operators .      as for a _",
    "n_-city traveling salesman problem , a permutation of @xmath53 is used to represent a solution to the problem in discrete sta .",
    "based on the representation , three special transformation operators are proposed to illustrate local and global search .",
    "+ ( 1 ) swap transformation @xmath54 where , @xmath55 is called swap transformation matrix , @xmath56 is a constant integer called swap factor to control the maximum number of positions to be exchanged , while the positions are random . if @xmath57 , we call the swap operator local exploitation , and if @xmath58 , the swap operator is regarded as global exploration in this case .",
    "figure [ swaptsp ] gives the function of the swap transformation graphically when @xmath57 .",
    "+ ( 2 ) shift transformation @xmath59 where , @xmath60 is called shift transformation matrix , @xmath61 is a constant integer called shift factor to control the maximum length of consecutive positions to be shifted . by the way , the selected position to be shifted after and positions to be shifted are chosen randomly . similarly , shift transformation is called local exploitation and global exploration when @xmath62 and @xmath63 respectively . to make it more clearly , if @xmath62 , we set position 3 to be shifted after position 5 , as described in figure [ shifttsp ] .",
    "+ ( 3 ) symmetry transformation @xmath64 where , @xmath65 is called symmetry transformation matrix , @xmath66 is a constant integer called symmetry factor to control the maximum length of subsequent positions as center . by the way , the component before the subsequent positions and consecutive positions to be symmetrized are both created randomly . considering that the symmetry transformation can make big change to current solution , it is intrinsically called global exploration . for instance , if @xmath67 , let choose component 3 , then the subsequent position or the center is \\{@xmath68 } , the consecutive positions are @xmath69 , and the function of symmetry transformation is given in figure [ symtsp ] .          to evaluate the performance of the simple sta and the dynamic sta ( dsta ) ,",
    "4 medium - size tsp instances are used for test .",
    "we set @xmath70 and the maximum number of iterations at 1500 .",
    "programs are run independently for 20 trails for each algorithms in matlab r2010b ( version of 7.11.0.584 ) on intel(r ) core(tm )",
    "i3 - 2310 m cpu @2.10ghz under window 7 environment , and for each run , it costs about 0.5 minutes .",
    "some statistics as well as the  error \" are computed for comparison , where ,  error \" is defined by @xmath71 where , @xmath72 is the best result achieved by discrete sta , @xmath73 is the incumbent best result in tsplib @xcite .",
    "experimental results for these tsp instances are given in table [ tspinstances ] .",
    "ccccccc _ instance _ & _ optimum _ & _ algorithm _ & _ best _ & _ mean _ & _ s.t .",
    "_ & _ error _",
    "+ gr96.tsp & 512.3094 & sta & 525.0124 & 544.9243 & 13.2005 & 2.48% + & & dsta & 515.5143 & 549.9838 & 17.1709 & 0.63 % + kroa100.tsp & 2.1285e4 & sta & 2.2214e4 & 2.2970e4 & 515.9307 & 4.37% + & & dsta & 2.1910e4 & 2.2740e4 & 700.3377 & 2.94% + kroc100.tsp & 2.0751e4 & sta & 2.1570e4 & 2.2525e4 & 679.3821 & 3.95% + & & dsta & 2.1084e4 & 2.2186e4 & 703.0488 & 1.60% + gr120.tsp & 1.6665e3 & sta & 1.6826e3 & 1.7269e3 & 30.0698 & 0.97% + & & dsta & * 1.6418e3 * & 1.7257e3 & 34.4110 & * -1.48% * +     + as can be seen from table [ tspinstances ] , the biggest error is no more than 5% , and the dsta gets much more better results than the sta . especially for the gr120.tsp , as emphasized by the bold font , dsta achieves the better result than the incumbent best result given in the tsplib , with the sequence of ( 82 11 51 23 9 103 119 4 38 7 56 41 87 14 75 44 46 20 50 98 42 17 118 49 13 113 69 65 68 91 58 79 100 33 52 25 108 43 107 18 19 117 31 66 85 22 81 94 86 78 15 59 76 1 16 61 29 120 32 30 92 28 45 74 105 72 40 60 24 111 96 90 54 8 70 116 34 26 71 47 55 6 89 112 110 48 102 101 114 106 104 36 84 35 10 99 62 37 67 83 39 57 73 63 77 95 12 97 88 21 115 2 93 109 64 53 5 27 80 3 ) and length of route at 1.6418e3 , which is illustrated in figure [ gr120 ] .",
    "in boolean integer programming ( bip ) , a solution comprise a series of boolean values ( @xmath74 or @xmath75 ) .",
    "swap , shift and symmetry operators are also proposed for internal transformation ( operators aiming to change the internal components of a sequence ) , and another operator called substitute is designed for external transformation ( operator aiming to bring new components into a sequence ) . it should be noted that @xmath74 is the same to @xmath75 under such circumstances , although there exists a linear transformation relationship between them in other studies .      as we said previously , the same intelligent operator has the same geometrical property for different applications .",
    "it is not difficult to imagine that the swap , shift and symmetry operators for boolean integer programming have the same formulation as that of traveling salesman problem .",
    "let @xmath74 , the illustrations of internal transformation are given from figure [ bswap ] to figure [ bsymmetry ] .                 + now , let introduce the external transformation .",
    "+ ( 4 ) substitute transformation @xmath76 where , @xmath77 is called substitute transformation matrix , @xmath78 is a constant integer called substitute factor to control the maximum number of positions to be substituted . by the way , the positions are randomly created .",
    "if @xmath79 , we call the substitute operator local exploitation , and if @xmath80 , the substitute operator is regarded as global exploration in this case .",
    "figure [ bsubstitute ] gives the function of the substitute transformation vividly when @xmath79 .",
    "let @xmath81 be an undirected graph with edge weight @xmath82 on @xmath83 vertices and @xmath84 edges , for each edge @xmath85 , the maximum cut problem ( max - cut ) is to find a subset @xmath86 of the vertex set @xmath87 such that the total weight of the edges between @xmath86 and its complementary subset @xmath88 is as large as possible .",
    "+ ( lp based max - cut model)@xcite : + considering a variable @xmath89 for each edge @xmath85 , and assuming @xmath89 to be 1 if @xmath90 is in the cut , and 0 otherwise , the max - cut can be modeled as the following linear programming ( lp ) optimization problem : @xmath91 here the incidence vector @xmath92 , where the @xmath93 is the number of edges in the graph .",
    "+ let cut(@xmath94 ) denote the convex hull of the incidence vectors of cuts in @xmath94 .",
    "since maximizing a linear function over a set of points equals to maximizing it over the convex hull of this set of points , we can rewrite ( [ maxcut1 ] ) to the following @xmath95 where @xmath96 .",
    "+ ( sdp based max - cut model)@xcite : + for a bipartition @xmath97 , with @xmath98 if @xmath99 , and @xmath100 otherwise , the max - cut can also be formulated as the following semidefinite programming optimization problem : @xmath101 without loss of generality , if we fix the value of the last variable at 1 , then the problem ( [ maxcut2 ] ) is equivalent to the integer quadratic optimization problem @xmath102 where , @xmath103 is a symmetric matrix with @xmath104 , and @xmath105 .",
    "it is not difficult to find that a optimal solution @xmath106 to problem ( [ maxcut3 ] ) corresponds to a optimal solution @xmath107 of original problem ( [ maxcut2 ] ) .",
    "+ considering that the sdp based max - cut model is easier to manipulate for intelligent operators , it is adopted in discrete sta for simple representation .",
    "the parameters setting is the same to that in tsp instances . under the circumstance",
    ", it takes about 8 seconds for each run . in the same way",
    ", we define the following  error \" @xmath108 where , @xmath72 is the best result achieved by discrete sta , @xmath73 can be found in @xcite .",
    "experimental results for max - cut instances are given in table [ maxcutinstances ] .",
    "ccccccc _ instance _ & _ optimum _ & _ algorithm _ & _ best _ & _ mean _ & _ s.t .",
    "_ & _ error _",
    "+ gr96 & 105328 & sta & 105328 & 105051 & 567 & 0 + & & dsta & 105328 & 104982 & 614 & 0 + kroa100 & 5897392 & sta & 5897392 & 5864276 & 46302 & 0 + & & dsta & 5897392 & 5887930 & 29122 & 0 + kroc100 & 5890760 & sta & 5890760 & 5860540 & 34277 & 0 + & & dsta & 5890760 & 5870613 & 31573 & 0 + gr120 & 2156667 & sta & 2156667 & 2150378 & 7132 & 0 + & & dsta & 2156667 & 2150378 & 7132 & 0 +     + as can be seen from table [ maxcutinstances ] , the discrete sta has the ability to achieve the global minimum for all of the instances , and the difference between simple sta and dsta is small in this case .",
    "typically , the model of discrete value selection ( dvs ) problem is different from the model in ( [ eqn1 ] ) , because the domain is defined as follows @xmath109 by introducing a linear transformation @xmath110 where @xmath111 then the discrete value selection can be rewritten to the equivalent constrained boolean integer programming problem @xcite . + in discrete sta , we only use the index of @xmath112 to represent a solution , for example , a solution @xmath113 is corresponding to @xmath114 , which is easy to be manipulated by the intelligent operators .",
    "the intelligent operators swap , shift , symmetry and substitute for discrete value selection are similar to that in boolean programming problem . as a result , only illustrations of these transformations are given from figure [ dvsswap ] to figure [ dvssubstitute ] .",
    "the continuous rosenbrock function has been widely studied as a benchmark .",
    "considering that the rosenbrock function also has many integer local minima , in this paper , it is the first time to use it as a benchmark for integer programming problem .",
    "the integer rosenbrock function is defined as @xmath115 , x_i \\in \\{-2,-1,0,1,2\\}. \\nonumber\\end{aligned}\\ ] ] it is not difficult to find that @xmath1 for any @xmath116 is a local minimum of the integer rosenbrock function .",
    "+ the parameters setting is the same to that of max - cut instances except the maximum number of iterations , which is specified as 10 , 20 , 100 , 200 , 500 , 2000 for @xmath117 , respectively . under the circumstance , 0.1 , 0.15 , 0.35 , 0.6 , 1.5",
    ", 6.0 seconds are consumed correspondingly .",
    "experimental results for integer rosenbrock function are given in table [ irosenbrock ] .",
    "n _ & _ optimum _ & _ algorithm _ & _ best _ & _ mean _ & _ s.t . _ & _ error _ + 5 & 0 & sta & 0 & 0 & 0 & 0 + & & dsta & 0 & 0 & 0 & 0 + 10 & 0 & sta & 0 & 0 & 0 & 0 + & & dsta & 0 & 0 & 0 & 0 + 20 & 0 & sta & 0 & 0 & 0 & 0 + & & dsta & 0 & 0 & 0 & 0 + 50 & 0 & sta & 0 & 0 & 0 & 0 + & & dsta & 0 & 0 & 0 & 0 + 100 & 0 & sta & 0 & 78.4500 & 46.0669 & 0 + & & dsta & 0 & 0 & 0 & 0 + 200 & 0 & sta & 107 & 155.4500 & 42.1495 & - + & & dsta & 0 & 0 & 0 & 0 +     + as can be seen from table [ irosenbrock ] , both the simple sta and the dynamic sta do well in the low dimensional cases . for large scale problem ,",
    "the simple sta begins to have poor performance and even fails to find the global optimum . on the other hand ,",
    "the dynamic sta is more robust and adaptable , which verifies the theorem 2 that dynamic sta has higher probability to gain global optimum than the simple sta .",
    "in this paper , a new intelligent optimization algorithm named discrete state transition algorithm is studied for integer programming problem .",
    "it is the first time to build the framework for discrete state transition algorithm , and five key elements are discussed to better develop the algorithm .",
    "the representation of a feasible solution and the dynamic adjustment strategy are mainly studied .",
    "various applications have shown the adaptability of the designed intelligent operators and experimental results have testified the effectiveness and efficiency of the proposed algorithm and strategies .",
    "ahmed , z.h . : genetic algorithm for the traveling salesman problem using sequential constructive crossoveroperator .",
    "international journal of biometrics & bioinformatics .",
    "3(6 ) , 96105 ( 2010 ) dorigo , m. , gambardella , l.m . :",
    "ant colony system : a cooperative learning approach to the traveling salesman problem .",
    "ieee transaction on evolutionary computation .",
    "1(1 ) , 5366 ( 1997 ) darby  dowman , k. , and wilson , jm : developments in linear and integer programming",
    ". journal of the operational research society .",
    "53 , 10651071 ( 2002 ) geoffrion , a.m. , marsten , r.e .",
    ": integer programming algorithms : a framework and state - of - the - art survey .",
    "management science .",
    "18(9 ) , 456491 ( 1972 ) jnger , m. , liebling , th.m . , naddef , d. , nemhauser , g.l . ,",
    "pulleyblank , w.r . ,",
    "reinelt , g. , rinaldi , g. , wolsey , l.a . : 50 years of integer programming 19582008 .",
    "new york : springer ( 2010 ) kirkpatrick , s. , gelatt c.d . and vecchi , m.p .",
    ": optimization by simulated annealing .",
    "220(4590 ) , 671680 ( 1983 ) krishnan , k. , mitchell , j.e . : a semidefinite programming based polyhedral cut and price approach for the maxcut problem .",
    "computational optimization and applications .",
    "35 , 5171 ( 2006 ) li , d. , sun , x.l . : nonlinear integer programming .",
    "new york : springer ( 2006 ) metropolis , n. , rosenbluth , a. , rosenbluth , m. , teller , a. , teller , e. : equation of state calculations by fast computing machines .",
    "journal of chemical physics .",
    "21(6 ) , 10871092 , ( 1953 ) reinelt , g. : tsplib  a traveling salesman problem library .",
    "orsa journal on computing .",
    "3(4 ) , 376384 ( 1991 ) schlter , m. egea , j.a . ,",
    "banga , j.r . : extended ant colony optimization for non - convex mixed integer nonlinear programming .",
    "computers & operations research .",
    "36 , 22172229 ( 2009 ) smith , k. : an argument for abandoning the traveling salesman problem as a neural - network benchmark .",
    "ieee transaction on neural network , 7(6 ) , 15421544 ( 1996 ) wang , z.b . ,",
    "fang , s.c . , gao , d.y .",
    ", xing , w.x",
    ". : canonical dual approach to solving the maximum cut problem .",
    "oneline in journal of global optimization .",
    "( 2012 ) yang , c.h . ,",
    "tang , x.l . , zhou , x.j . ,",
    "gui , w.h . : state transition algorithm for traveling salesman problem .",
    "arxiv:1206.0329v1 , to apear in the 31st chinese control conference ( 2012 ) yokota , t. , gen , m. , li , y.x . : genetic algorithm for non - linear mixed integer programming problems and its applications .",
    "computers & industrial engineering .",
    "30(4 ) , 905917 ( 1996 ) yu , c.j . , teo , k.l . ,",
    "bai , y.q . : an exact penalty function method for nonlinear mixed discrete programmming problems .",
    "optimiation letters .",
    "( 2011 ) doi:10.1007/s11590 - 011 - 0391 - 2 zhang , d.f .",
    ", liu y.k . , hallah , r.m . ,",
    "leung , s.c.h .",
    ": a simulated annealing with a new neighborhood structure based algorithm for high school timetabling problems .",
    "european journal of operational research .",
    "203 , 550558 ( 2010 ) zhou , x.j . , yang , c.h . ,",
    "gui , w.h . : initial version of state transition algorithm . international conference on digital manufacturing and automation ( icdma ) .",
    "pp . 644647 ( 2011 )",
    "zhou , x.j . , yang , c.h . ,",
    "gui , w.h . : a new transformation into state transition algorithm for finding the global minimum . international conference on intelligent control and information processing ( icicip ) .",
    "pp . 674678 ( 2011 )",
    "zhou , x.j .",
    ", yang , c.h . , gui , w.h . : state transition algorithm .",
    "arxiv:1205.6548v1 , to appear in journal of industrial and management optimization ( 2012 )"
  ],
  "abstract_text": [
    "<S> we focus on a recently new intelligent optimization algorithm called discrete state transition algorithm , for solving integer optimization problems . </S>",
    "<S> firstly , we summarize some key elements for discrete state transition algorithm to guide its well development . several intelligent operators are designed for local exploitation and global exploration . </S>",
    "<S> then , a dynamic adjustment strategy  risk and restore in probability \" is proposed to gain global convergence with high probability . </S>",
    "<S> finally , numerical experiments are carried out to test the effectiveness of the proposed algorithm , and they show that the similar intelligent operators can be applied to ranging from traveling salesman problem , boolean integer programming , to discrete value selection problem , which indicates the robustness and adaptability of the proposed intelligent elements . </S>"
  ]
}