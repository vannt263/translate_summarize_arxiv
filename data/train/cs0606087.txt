{
  "article_text": [
    "the framework of lp - type problems , invented by sharir and welzl in 1992 @xcite , has become a well - established tool in the field of geometric optimization .",
    "its origins are in linear programming : sharir and welzl developed a randomized variant of the dual simplex algorithm for linear programming and showed that this algorithm actually works for a more general class of problems they called lp - type problems .",
    "for the theory of linear programming , this algorithm constituted an important progress , since it was later shown to be _ subexponential _ in the ram model @xcite . together with a similar result independently obtained by kalai @xcite , this was the first linear programming algorithm provably requiring a number of arithmetic operations subexponential in the dimension and number of constraints ( independent of the precision of the input numbers ) .",
    "for many other geometric optimization problems in fixed dimension , the algorithm by sharir and welzl was the first to achieve expected linear runtime , simply because these problems could be formulated as lp - type problems .",
    "the class of lp - type problems for example includes the problem of computing the minimum - volume ball or ellipsoid enclosing a given point set in @xmath1 , and the problem of finding the distance of two convex polytopes in @xmath1 .",
    "many other problems have been identified as lp - type problems over the years @xcite .",
    "once it is shown that a particular optimization problem is an lp - type problem , and certain algorithmic primitives are implemented for it , several efficient algorithms are immediately at our disposal : the sharir ",
    "welzl algorithm , two other randomized optimization algorithms due to clarkson @xcite ( see @xcite for a discussion of how it fits the lp - type framework ) , a deterministic version of it @xcite , an algorithm for computing the minimum solution that violates at most @xmath2 of the given @xmath3 constraints @xcite , and probably more are to come in the future .    the framework of lp - type problems is not only a prototype for concrete optimization problems , it also serves as a mathematical tool by itself , in algorithmic @xcite and non - algorithmic contexts @xcite .    an ( abstract ) lp - type problem is given by a finite set @xmath4 of _ constraints _ and a _ value _",
    "@xmath5 for every subset @xmath6 .",
    "the values can be real numbers or , for technical convenience , elements of any other linearly ordered set . intuitively , @xmath5 is the minimum value of a solution that satisfies all constraints in @xmath7 .",
    "the assignment @xmath8 has to obey the axioms in the following definition .",
    "[ def : lptype ] an _ abstract lp - type problem _ is a quadruple @xmath9 , where @xmath4 is a finite set , @xmath10 is a set linearly ordered by @xmath11 , and @xmath12 is a mapping satisfying the following two conditions :    [ cols= \" < , < \" , ]     [ lem : monotonicity ]    assume @xmath13 . then locality yields @xmath14 which contradicts consistency .    recall definition [ def : vbasis ] : a basis is a set @xmath15 satisfying @xmath16 for all proper subsets @xmath17 of @xmath15 .",
    "a basis of @xmath7 is an inclusion - minimal subset of @xmath7 with the same violators .",
    "this can be used to prove the following observation , well - known to hold for lp - type problems @xcite .",
    "[ obs : extreme ] let @xmath18 be a violator space . for @xmath19 and all @xmath20 ,",
    "we have    1 .   @xmath21 if and only if @xmath22 , and 2 .",
    "@xmath23 if and only if @xmath24 is contained in every basis of @xmath25 .",
    "an element @xmath24 such that ( ii ) holds is called _ extreme _ in @xmath25 .",
    "\\(i ) if @xmath26 , we get @xmath27 by lemma [ lem : conseqloc ] . if @xmath28 , then @xmath21 is a consequence of consistency applied to @xmath29 .",
    "( ii ) if @xmath30 , there is a basis @xmath15 of @xmath31 , and this basis is also a basis of @xmath25 not containing @xmath24 .",
    "conversely , if there is some basis @xmath15 of @xmath25 not containing @xmath24 , then @xmath30 follows from monotonicity .",
    "we are particularly interested in violator spaces with small bases .",
    "let @xmath18 be a violator space .",
    "the size of a largest basis is called the _ combinatorial dimension _",
    "@xmath32 of @xmath18 .",
    "observation [ obs : extreme ] implies that in a violator space of combinatorial dimension @xmath33 , every set has at most @xmath33 extreme elements .",
    "this in turn yields a bound for the _ expected _ number of violators of a random subset of constraints , using the _ sampling lemma _ @xcite .",
    "@xcite consider a triple @xmath34 , where @xmath35 is a function mapping subsets of the set @xmath4 to the set @xmath10 ( not necessarily ordered ) .",
    "for @xmath19 , we define @xmath36 for @xmath37 , let @xmath38 be the expected value of @xmath39 , for @xmath25 chosen uniformly at random among all subsets of @xmath4 with @xmath40 elements",
    ". @xmath41 is defined similarly as the expected value of @xmath42",
    ". then for @xmath43 , the following equality holds .",
    "@xmath44    to apply this in our situation , we fix a set @xmath45 , and we define @xmath46 .",
    "since then @xmath47 for all @xmath25 , the following corollary is obtained .",
    "[ cor : sampling ] let @xmath18 be a violator space of combinatorial dimension @xmath33 and @xmath45 some fixed set .",
    "let @xmath38 be the expected number of violators of the set @xmath48 , where @xmath19 is a random subset of size @xmath49 .",
    "then @xmath50      given a violator space @xmath18 of combinatorial dimension @xmath33 , the goal is to find a basis of @xmath4 . for this , we assume availability of the following primitive .    [",
    "prim : viol ] given @xmath6 and @xmath51 , decide whether @xmath52 .",
    "given this primitive , the problem can be solved in a brute - force manner by going through all sets of size @xmath53 , testing each of them for being a basis of @xmath4 .",
    "more generally , @xmath54 is a basis of @xmath7 if and only if @xmath55 consequently , the number of times the primitive needs to be invoked in order to find a basis of @xmath4 is at most @xmath56 the next two subsections show that this can be substantially improved .",
    "fix a violator space @xmath18 of combinatorial dimension @xmath33 , implicitly specified through primitive [ prim : viol ] .",
    "clarkson s first algorithm calls clarkson s second algorithm ( ) as a subroutine .",
    "given @xmath6 , both algorithms compute a basis @xmath15 of @xmath7 .",
    "= = = = @xmath57 : + ( * computes a basis @xmath15 of @xmath7 * ) +   @xmath58   +   @xmath57 +   + @xmath59 + @xmath60 +   + choose @xmath25 to be a random @xmath40-element subset of @xmath7 , @xmath61 + @xmath62 + @xmath63 +   @xmath64   + @xmath65 +   +   @xmath66 +   @xmath67 +   +    assuming is correct , this algorithm is correct as well : if @xmath15 is a basis of @xmath68 that in addition has no violators in @xmath7 , @xmath15 is a basis of @xmath7 .",
    "moreover , the algorithm augments the working set @xmath10 at most @xmath33 times , which is guaranteed by the following observation .",
    "[ obs : basis ] if @xmath69 and @xmath70 , then @xmath71 contains at least one element from every basis of @xmath7 .",
    "let @xmath15 be a basis of @xmath7 .",
    "assuming @xmath72 consistency yields @xmath73 , implying @xmath74 . from locality and monotonicity ( lemma [ lem : monotonicity ] ) , we get @xmath75 meaning that @xmath76 , a contradiction .    it is also clear that is called only with sets of size at most @xmath77 . finally , the expected number of iterations through the loop is bounded by @xmath78 : by corollary [ cor : sampling ] ( applied to @xmath79 ) and the markov inequality , the expected number of calls to before we next augment @xmath10 is bounded by @xmath80 .    algorithm computes a basis of @xmath7 with an expected number of at most @xmath81 calls to primitive [ prim : viol ] , and an expected number of at most @xmath78 calls to , with sets of size at most @xmath77 .",
    "this algorithm calls the trivial algorithm as a subroutine . instead of adding",
    "violated constraints to a working set , it gives them larger probability of being selected in further iterations .",
    "technically , this is done by maintaining @xmath7 as a multiset , where @xmath82 denotes the multiplicity of @xmath24 ( we set @xmath83 ) . sampling from @xmath7",
    "is done as before , imagining that @xmath7 contains @xmath82 copies of the element @xmath24 .",
    "= = = = @xmath57 : + ( * computes a basis @xmath15 of @xmath7 * ) +   @xmath84   +   @xmath57 +   + @xmath85 +   + choose random @xmath61 + @xmath86 + @xmath63 +   @xmath87   + @xmath88 +   +   @xmath66 +   @xmath67 +   +    invoking corollary [ cor : sampling ] again ( which also applies to multisets as we use them ) , we see that the expected number of calls to before we next reweight elements ( a _ successful _ iteration ) , is bounded by @xmath80 .",
    "it remains to bound the number of successful iterations .",
    "let @xmath2 be a positive integer .",
    "after @xmath89 successful iterations , we have @xmath90 for every basis @xmath15 of @xmath7 .",
    "in particular , @xmath91 .",
    "every successful iteration multiplies the total weight of elements in @xmath7 by at most @xmath92 , which gives the upper bound ( not only for @xmath93 but actually for @xmath94 ) . for the lower bound",
    ", we use observation [ obs : basis ] again to argue that each successful iteration doubles the weight of some element in @xmath15 , meaning that after @xmath89 iterations , one element has been doubled at least @xmath2 times . because the lower bound exceeds the upper bound for @xmath95 , the bound on @xmath2 follows .",
    "summarizing , we get the following lemma .",
    "algorithm computes a basis of @xmath7 with an expected number of at most @xmath96 calls to primitive [ prim : viol ] , and expected number of at most @xmath97 calls to , with sets of size @xmath98 .",
    "[ thm : runtime ] using a combination of the above two algorithms , a basis of @xmath4 in a violator space @xmath18 can be found calling primitive [ prim : viol ] expected @xmath99 many times .    using the above bound for the trivial algorithm , can be implemented to require an expected number of at most @xmath100 calls to the primitive . applying this as a subroutine in @xmath101 with @xmath102 , @xmath103",
    "is bounded by @xmath104 , and we get an overall expected complexity of @xmath105 in terms of the number of calls to primitive [ prim : viol ] . the terms @xmath106 and @xmath107 are asymptotically dominated by either @xmath108 or @xmath109 , and we get the simplified bound of @xmath110 .",
    "we show in this section that the problem of finding the sink in a @xmath33-dimensional _ grid unique sink orientation _",
    "@xcite can be reduced to the problem of finding the ( unique ) basis of a violator space of combinatorial dimension @xmath33 .",
    "unique sink orientations of grids arise from various problems , including linear programming over products of simplices and generalized linear complementarity problems ( glcp ) over @xmath0-matrices @xcite .",
    "the glcp has been introduced by cottle and dantzig @xcite as a generalization of the well known lcp @xcite .",
    "there are also applications in game theory ; for instance @xcite show how parity , mean - payoff , and simple stochastic games are related to grid uso .",
    "fix a partition @xmath111 of the set @xmath112 into @xmath33 nonempty subsets , where we refer to @xmath113 as the _ block @xmath114_. a subset @xmath115 is called a _ vertex _ if @xmath116 for all @xmath114 .",
    "the vertices naturally correspond to the cartesian product of the @xmath113 .",
    "let @xmath117 be the set of all vertices .    in the following definition ,",
    "we introduce the _ grid spanned _ by subsets @xmath118 whose union is @xmath6 .",
    "the vertex set of this grid contains all vertices @xmath119 ( @xmath120 ) , with two vertices being adjacent whenever they differ in exactly two elements .",
    "the @xmath33-dimensional _ grid _ spanned by @xmath121 is the undirected graph @xmath122 , with @xmath123 here , @xmath124 is the symmetric difference of sets .",
    "@xmath125 is in one - to - one correspondence with the cartesian product @xmath126 and the edges in @xmath127 connect vertices in @xmath125 whose corresponding tuples differ in exactly one coordinate .",
    "see figure [ fig : grid ] left for an example of a grid .",
    "note that @xmath128 is the empty graph whenever @xmath129 for some @xmath114 .",
    "we say that such a @xmath7 is _ not @xmath130-valid _ , and it is _",
    "@xmath130-valid _ otherwise",
    ".    a _ subgrid _ of @xmath128 is any graph of the form @xmath131 , for @xmath132 .",
    "an orientation @xmath133 of the graph @xmath134 is called a _ unique sink orientation _ ( uso ) if all nonempty subgrids of @xmath135 have unique sinks w.r.t .",
    "@xmath133 .",
    "we are interested in finding the sink in a uso of @xmath135 as fast as possible , since the sink corresponds to the solution of the underlying problem ( the @xmath0-matrix glcp , for example ) .",
    "our measure of complexity will be the expected number of _ edge evaluations _",
    ", see @xcite .",
    "an edge evaluation returns the orientation of the considered edge and can typically be implemented to run in polynomial time ( depending on the underlying problem ) . in the remainder of this paper , we derive the following theorem .",
    "[ thm : uso_algo ] the sink of a unique sink grid orientation can be found by evaluating expected @xmath110 edges .    note that a uso @xmath133 can be cyclic ( see the thick edges in figure [ fig : grid ] right ) .",
    "if @xmath133 induces the directed edge @xmath136 , we also write @xmath137 .",
    "any uso can be specified by associating each vertex @xmath138 with its outgoing edges . given @xmath138 and @xmath139",
    ", we define @xmath140 to be the unique vertex @xmath141 that is different from @xmath138 , and we call @xmath142 the _ neighbor _ of @xmath138 _ in direction _ @xmath143 .",
    "note that @xmath138 is a neighbor of @xmath142 in some direction different from @xmath143 .",
    "given an orientation @xmath133 of @xmath135 , the function @xmath144 , defined by @xmath145 is called the _",
    "outmap _ of @xmath133 .    by this definition ,",
    "any sink w.r.t .",
    "@xmath133 has empty outmap value .",
    "let us fix a unique sink orientation @xmath133 of @xmath135 . given a @xmath130-valid subset @xmath6 ,",
    "we define @xmath146 to be the unique sink vertex in @xmath128 . for a subset @xmath7 that is not @xmath130-valid ,",
    "let @xmath147 thus @xmath148 is the set of elements occurring in blocks of @xmath130 disjoint from @xmath7 .",
    "[ def : gridtoviol ] for @xmath6 , define @xmath149    the pair @xmath18 from definition [ def : gridtoviol ] is a violator space of combinatorial dimension @xmath33 .",
    "moreover , for all @xmath130-valid @xmath6 , the unique sink of the subgrid @xmath150 corresponds to the unique basis of @xmath7 in @xmath18 .    for every @xmath121",
    ", consistency holds by definition of @xmath151 and @xmath148 . in order to prove locality for @xmath152",
    ", we look at three different cases .    [ [ mathbfg - is - not - mathbfpi - valid . ] ] @xmath153 is not @xmath154-valid .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    then , @xmath155 is not @xmath130-valid either .",
    "the condition @xmath156 means that @xmath17 is disjoint from the same blocks as @xmath7 .",
    "this implies @xmath157 , hence @xmath158 .",
    "[ [ mathbfg - and - mathbff - are - both - mathbfpi - valid . ] ] @xmath153 and @xmath159 are both @xmath154-valid .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    then @xmath160 is a nonempty subgrid of @xmath128 , and @xmath161 means that the sink of @xmath160 has no outgoing edges into @xmath128 .",
    "thus the unique sink of @xmath160 is also a sink of @xmath128 and therefore the unique one .",
    "this means that @xmath162 , from which @xmath158 follows .",
    "[ [ mathbfg - is - mathbfpi - valid - mathbff - is - not - mathbfpi - valid . ] ] @xmath153 is @xmath154-valid , @xmath159 is not @xmath154-valid .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    then the condition @xmath161 can never be satisfied since @xmath163 contains at least one full block @xmath113 , and @xmath164 .",
    "next we prove that a largest basis in @xmath18 has at most @xmath33 elements .",
    "for this , let @xmath6 be a set of size larger than @xmath33 . if @xmath7 is @xmath130-valid , we have @xmath165 since @xmath166 for any vertex @xmath138 .",
    "this means that @xmath7 has a subset of size @xmath33 with the same violators , so @xmath7 is not a basis .",
    "if @xmath7 is not @xmath130-valid , we consider some subset @xmath15 that contains exactly one element from every block intersected by @xmath7 . by definition , we have @xmath167 and @xmath168 .",
    "since @xmath15 has less than @xmath33 elements , @xmath7 can not be a basis in this case , either .",
    "it remains to prove that for @xmath7 being @xmath130-valid , the vertex @xmath169 is the unique basis of @xmath7 in @xmath18 .",
    "we have already shown that @xmath170 must hold in this case .",
    "moreover , @xmath171 contains no full block @xmath113 . on the other hand , any proper subset @xmath17 of @xmath169",
    "is not @xmath130-valid , so its violator set _ does _ contain at least one full block .",
    "it follows that @xmath172 , so @xmath169 is a basis of @xmath7 .",
    "the argument is complete when we can prove that no other vertex @xmath119 is a basis of @xmath7 .",
    "indeed , such a vertex @xmath138 is not a sink in @xmath128 , meaning that @xmath173 .",
    "this implies @xmath174 .",
    "note that the global sink of the grid uso corresponds to the unique @xmath33-element ( and @xmath130-valid ) set @xmath15 with @xmath175 .",
    "this is exactly the set output by the call ` basis1`@xmath101 of clarkson s algorithms , when we apply it to the violator space constructed in definition [ def : gridtoviol ] .",
    "primitive [ prim : viol ] corresponds to one edge evaluation in the uso setting . with theorem [ thm : runtime ] ,",
    "we therefore have proved theorem [ thm : uso_algo ] . for small @xmath33 , the running time given in the theorem is faster than the one from the _ product algorithm _",
    "@xcite which needs expected @xmath176 edge evaluations , where @xmath177 is the @xmath3-th harmonic number .",
    "we introduced violator spaces as a new framework for optimization problems and showed that acyclic violator spaces are equivalent to abstract and concrete lp - type problems .",
    "it turned out that the explicit ordering inherent to lp - type problems is not necessary in order to capture the structure of the underlying optimization problem .",
    "violator spaces are more general than lp - type problems , yet clarkson s algorithms still work on them .",
    "the sharir - welzl algorithm is also applicable for violator spaces in a straightforward way .",
    "however , the most obvious translation of this algorithm to the setting of violator spaces is not even guaranteed to finish , since for a general violator space it may run in a cycle and the subexponential analysis thus breaks down .",
    "we have seen that unique sink orientations are models for possibly cyclic violator spaces , and with clarkson s algorithms we therefore have a fast scheme to solve fixed dimensional uso problems like the generalized linear complementarity problem with a @xmath0-matrix .",
    "the glcp with a @xmath0-matrix has in general a cyclic structure and therefore gives rise to a cyclic uso . a violator space obtained from a cyclic",
    "uso is again cyclic .",
    "it is interesting that there are no cycles in a 2-dimensional grid uso @xcite .",
    "whether the same is true for violator spaces of combinatorial dimension 2 is an open question .",
    "we thank an anonymous referee for useful comments .",
    "the second author would like to thank nina amenta for discussions concerning lp - type problems , possibly already forgotten by her as they took place many years ago , but nevertheless helpful for reaching the results in this paper .",
    "m.  sharir , e.  welzl , a combinatorial bound for linear programming and related problems , in : proc .",
    "9th symposium on theoretical aspects of computer science ( stacs ) , vol .",
    "577 of lecture notes in computer science , springer - verlag , 1992 , pp .",
    "569579 .",
    "h.  bjrklund , s.  sandberg , s.  vorobyov , a discrete subexponential algorithm for parity games , in : proc .",
    "20th annual symposium on theoretical aspects of computer science ( stacs ) , springer - verlag , 2003 , pp .",
    "663674 .",
    "b.  grtner , e.  welzl , linear programming - randomization and abstract frameworks , in : proc .",
    "13th annual symposium on theoretical aspects of computer science ( stacs ) , springer - verlag , london , uk , 1996 , pp .",
    "669687 .",
    "b.  grtner , w.  d. morris , jr .",
    ", l.  rst , unique sink orientations of grids , in : proc .",
    "11th conference on integer programming and combinatorial optimization ( ipco ) , vol .",
    "3509 of lecture notes in computer science , springer - verlag , 2005 , pp . 210224 .",
    "i.  schurr , t.  szab , jumping does nt help in abstract cubes , in : proc .",
    "11th conference on integer programming and combinatorial optimization ( ipco ) , vol .",
    "3509 of lecture notes in computer science , springer - verlag , 2005 , pp . 225235 .",
    "h.  bjrklund , s.  sandberg , s.  vorobyov , a combinatorial strongly subexponential strategy improvement algorithm for mean payoff games , in : proc .",
    "29th international symposium on mathematical foundations of computer science ( mfcs ) , vol .",
    "3153 of lecture notes in computer science , springer - verlag , 2004 , pp . 673685 .",
    "b.  grtner , l.  rst , simple stochastic games and p - matrix generalized linear complementarity problems , in : proc .",
    "15th international symposium on fundamentals of computation theory ( fct ) , vol .",
    "3623 of lecture notes in computer science , springer - verlag , 2005 , pp . 209220 .",
    "p.  kovro , generalized linear programming , master s thesis , charles university , prague , faculty of mathematics and physics ( 2002 ) ."
  ],
  "abstract_text": [
    "<S> sharir and welzl introduced an abstract framework for optimization problems , called _ lp - type problems _ or also _ generalized linear programming problems _ , which proved useful in algorithm design . </S>",
    "<S> we define a new , and as we believe , simpler and more natural framework : _ violator spaces _ , which constitute a proper generalization of lp - type problems . </S>",
    "<S> we show that clarkson s randomized algorithms for low - dimensional linear programming work in the context of violator spaces . </S>",
    "<S> for example , in this way we obtain the fastest known algorithm for the _ @xmath0-matrix generalized linear complementarity problem _ with a constant number of blocks . </S>",
    "<S> we also give two new characterizations of lp - type problems : they are equivalent to _ acyclic _ violator spaces , as well as to _ concrete _ lp - type problems ( informally , the constraints in a concrete lp - type problem are subsets of a linearly ordered ground set , and the value of a set of constraints is the minimum of its intersection ) .    ,    ,    ,    lp - type problem , generalized linear programming , violator space , clarkson s algorithms , unique sink orientation , generalized linear complementarity problem </S>"
  ]
}