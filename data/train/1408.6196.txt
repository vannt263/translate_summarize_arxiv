{
  "article_text": [
    "let @xmath0 be a simple undirected graph .",
    "an edge @xmath8 _ dominates _ itself and all edges sharing a common endpoint with it .",
    "a subset @xmath9 of edges is called an _ edge domination _ if each edge in the graph is dominated by at least one edge in @xmath4 .",
    "an edge domination @xmath4 is called _ efficient _ if each edge in the graph is dominated by exactly one edge in @xmath4 .",
    "a graph has many edge dominations but may not have an efficient edge domination . to find an optimal edge domination or",
    "an efficient edge domination in a graph is a hard problem and this problem finds applications in the fields of design and analysis of communication networks , network routing and coding theory  @xcite .",
    "note that an efficient edge domination is an induced matching in the graph such that each edge is dominated by exactly one edge in it .",
    "so an efficient edge domination is also called a _ dominating induced matching_. the dominating induced matching problem ( dominating induced matching ) , also called efficient edge domination in the literature , is to check whether a graph admits a dominating induced matching or not .",
    "this problem has been extensively studied , especially in terms of the computational complexity of it in different graph classes  @xcite .",
    "grinstead et al .",
    "@xcite first established the np - hardness of this problem .",
    "later it is was further shown to be np - hard even in planar bipartite graphs of maximum degree 3  @xcite and @xmath10-regular graphs for @xmath11  @xcite .",
    "on the other hand , this problem is polynomial - time solvable in many graph classes such as at - free graphs  @xcite , hole - free graphs  @xcite , @xmath12-free graphs  @xcite , and claw - free graphs  @xcite .    in terms of exact algorithms ,",
    "the edge domination problem , a problem of finding an edge domination of minimum size , has been extensively studied  @xcite .",
    "most exact algorithms for the edge domination problem are analyzed by using the measure - and - conquer method . however",
    ", none of them can be easily modified for dominating induced matching . some exact algorithms for dominating induced matching",
    "were also introduced recently  @xcite .",
    "lin et al .",
    "@xcite obtained a @xmath13-time algorithm .",
    "their algorithm branches on a vertex by including it to the vertex set of the dominating induced matching or not . in this paper",
    ", we also use this idea to design a branch - and - reduce algorithm .",
    "however , our improvement is not obtained by carefully checking the worst cases of previous algorithms .",
    "we derive several graph properties of the problem , which will reduce some bad cases and allow us to design an improved algorithm .",
    "our paper is organized as follows .",
    "the notation system and our algorithm type are introduced in section  [ sec_pre ] . some conditions for feasibility and several rules to simplify problem instances",
    "are given in section  [ sec_rules ] .",
    "the full algorithm is described in section  [ sec_alg ] and the detailed analysis is given in section  [ sec_analy ] .",
    "finally , some concluding remarks are put in section  [ sec_con ] .",
    "in this paper , a graph stands for a simple undirected graph .",
    "let @xmath0 be a graph and @xmath14 be a subset of vertices .",
    "a vertex in @xmath15 is called an _ @xmath15-vertex _ , and a neighbor @xmath16 of a vertex @xmath17",
    "is called an _ @xmath15-neighbor _ of @xmath17 . the subgraph induced by @xmath15",
    "is denoted by @xmath18 $ ] , and @xmath19 $ ] is also written as @xmath20 . for a subset @xmath21 ,",
    "let @xmath22 denote the subgraph obtained from @xmath23 by deleting edges in @xmath24 .",
    "the vertex set and edge set of a graph @xmath23 are denoted by @xmath25 and @xmath26 , respectively . a vertex @xmath17 ( resp .",
    ", an edge @xmath27 ) in a graph is called a _ cut - vertex _ ( resp . , _ bridge _ ) if removing it increases the number of connected components of the graph . for a vertex @xmath28 , the set of vertices with distance @xmath29 from @xmath17",
    "is denoted by @xmath30 , where @xmath31 and @xmath32 is also simply written as @xmath33 .",
    "the _ degree _ of vertex @xmath17 is defined to be @xmath34 . for an edge @xmath35 ,",
    "let @xmath36 , and @xmath37 for @xmath38 , where @xmath39 is also written as @xmath40 . for a vertex @xmath41 or an edge @xmath42 and an integer @xmath43 ,",
    "we let @xmath44=\\cup_{j=0}^i n_j(x ) $ ] . a path ( resp . ,",
    "cycle ) of _ length _ @xmath29 , i.e. , a path ( resp . , cycle ) containing exactly @xmath29 edges is called a _ @xmath29-path _ ( resp . , _ @xmath29-cycle _ )",
    ". when a given graph is edge - weighted , we use @xmath45 to denote the weight of edge @xmath27 . for a graph with no edges ,",
    "we treat the empty edge subset as a dominating induced matching .",
    "some references , such as  @xcite , address the weighted case of dominating induced matching , in which the edges in the graph have a cost and the goal of the problem is to find a dominating induced matching of minimum cost among all dominating induced matchings ( if they exist ) . to find",
    "a dominating induced matching of minimum cost or maximum cost is np - hard , since it is np - hard to check the existence of dominating induced matchings in an unweighted graph .",
    "we call these two weighted versions of this problem the _ minimum version _ and the _ maximum version_. many search algorithms for the unweighted version , including our algorithms , can be easily modified to the weighted versions .",
    "so in this paper , we describe our algorithms in terms of the unweighted version and point out the arguments where the weighted versions may need additional operations for handling edge weights . in our algorithm ,",
    "non - negativeness of edge weights @xmath46 is not necessary to be assumed .",
    "we treat only the minimum version because the maximum version can be solved as the minimum version just by replacing @xmath46 with @xmath47 .      dominating induced matching",
    "can also be defined as a partition problem : whether the vertex set of a graph can be partitioned into two subsets @xmath7 and @xmath4 such that @xmath7 induces an independent set ( a graph with degree-0 vertices ) and @xmath4 induces a matching ( a graph with degree-1 vertices ) .",
    "we can solve dominating induced matching in @xmath48 time by checking all partitions of the vertex set . by using some branch - and - reduce methods , the searching space can be reduced greatly  @xcite . our algorithm is also a branch - and - reduce algorithm .",
    "we fix some vertices in the two sides of the partition and then try to extend them by some effective operations .    for a subset @xmath49 and an independent set @xmath50 in @xmath23 ,",
    "a dominating induced matching @xmath4 is called an _ @xmath51-dim _ if @xmath52 we may use @xmath53 to denote an instance of the problem to decide whether the graph @xmath23 admits an @xmath51-dim or not . we always let @xmath54 denote @xmath55 , and let @xmath56 denote the set of @xmath57-vertices @xmath58 such that @xmath59 . the vertices in @xmath54 are called _ undecided _ vertices . after setting @xmath60 and @xmath61 initially , we search for an @xmath51-dim @xmath4 , keeping track of subsets @xmath57 and @xmath7 of the vertices of @xmath23 .",
    "the following _ basic conditions _ are kept invariant .    1 .",
    "@xmath7 is an independent set in @xmath23 ; 2 .",
    "@xmath62 , i.e. , no @xmath57-vertex has two or more @xmath57-neighbors ; and 3 .",
    "each @xmath63-vertex has at least one @xmath54-neighbor .",
    "we specify an instance only by @xmath23 , @xmath57 and @xmath7 , from which @xmath54 , @xmath63 and @xmath64 are uniquely determined",
    ".    when there are no undecided vertices in the graph , i.e. , @xmath65 , we can easily know whether or not the current graph has an @xmath51-dim @xmath4 by checking if it satisfies the basic conditions . in our algorithm , we use reduction and branching rules to move @xmath54-vertices to either @xmath57 or @xmath7 until @xmath54 becomes an empty set . in a reduction rule , we move some @xmath54-vertices to @xmath66 directly keeping the optimality of the solution . in a branching rule",
    ", we generate two subinstances by moving a @xmath54-vertex to either @xmath57 or @xmath7 . a branch - and - reduce algorithm consisting of reduction and branching rules",
    "will generate a search tree .",
    "each node of the search tree represents an instance in the algorithm .",
    "in particular , the instance to the root of the search tree is the initial instance , and the instances to the leaves of the search tree are instances with @xmath65 .",
    "our algorithm contains one branching rule that is to branch by moving a @xmath54-vertex to either @xmath57 or @xmath7 . after moving a @xmath54-vertex to @xmath57 or @xmath7",
    ", we may be able to move some other @xmath54-vertices to @xmath57 or @xmath7 directly by some reduction rules .",
    "we assume that the number of @xmath54-vertices decreases by at least @xmath67 and @xmath68 in the two resulting instances , respectively .",
    "let @xmath69 denote the number of the leaves of the search tree generated by the algorithm to solve a problem with @xmath70 @xmath54-vertices .",
    "then we get the following recurrence relation : @xmath71 to derive an upper bound on the size of the search tree , or the exponential part of the running time bound of the algorithm , we need to solve this kind of linear recurrence relation .",
    "a solution to the above recurrence relation is of the form @xmath72 , where @xmath73 is the unique positive real root of the function @xmath74 .",
    "we call @xmath73 the _ branching factor _ of @xmath75 . for the largest branching factor @xmath73 in the algorithm ,",
    "the size of the search tree is @xmath76 . for more details about how to evaluate the size of the search tree and to solve the recurrence relations , the readers are referred to the monograph  @xcite .",
    "we introduce a notation to describe a relationship among recurrence relations , which will be used for us to ignore some recurrence relations without missing the worst recurrence relations with the largest branching factor . for two recurrence relations @xmath77 and @xmath78 with the same number @xmath79 of branches , we denote @xmath80 , if there are indices @xmath81 such that @xmath82 , @xmath83 and @xmath84 for all @xmath85 .",
    "the recurrence relation @xmath86 is _ covered _ by the recurrence relation @xmath87 if @xmath80 or there is a finite sequence of recurrence relations @xmath88 such that @xmath89 .",
    "we see that the branching factor of a recurrence relation is not smaller than that of any recurrence relation covered by it  @xcite .",
    "we may also derive a single recurrence relation for a series of branching operations by combining the recurrence relations of the operations .",
    "given two recurrence relations @xmath90 and @xmath91 , let @xmath92 denote the combined recurrence relation of the branching with @xmath15 and then branching with @xmath93 in the first branch in @xmath15 ; i.e. , @xmath92 is @xmath94 .",
    "the following lemma allows us to ignore some recurrence relations covered by others in our algorithm to find the largest branching factor .    in our algorithm",
    ", @xmath95 is one of the worst recurrence relations , which solves to @xmath96 .",
    "however , we observe that the worst cases will not always happen in our algorithm . after branching with a worst recurrence",
    ", we can branch with a much better recurrence in the next step .",
    "so we combine the bad and good recurrences together to get a single recurrence .",
    "finally we get an upper bound @xmath97 on the size of the search tree .    in the next section ,",
    "we first introduce some properties of dominating induced matching , which show that some @xmath54-vertices can be moved to @xmath66 directly and will be used to design reduction rules for our algorithm .",
    "we design our algorithm so that it returns an @xmath51-dim of a given instance @xmath53 if any or 0 as a message of the infeasibility otherwise .",
    "in this section , we will give some rules to reduce a given instance . a reduction rule is called _ correct _",
    "if it preserves the feasibility of instances ; i.e. , for an instance @xmath98 and the instance @xmath99 obtained from @xmath100 by applying the reduction rule , @xmath100 is an yes - instance if and only if so is @xmath101 .",
    "we will show the correctness of our reduction rules . clearly every instance @xmath53 violating the basic conditions can not have an @xmath51-dim .",
    "this provides the following reduction rule .    in the search steps of our algorithm",
    ", we can ignore any resulting instance that violates the basic conditions .",
    "we also execute the following reduction operations to move @xmath54-vertices to @xmath57 or @xmath7 without branching .",
    "a @xmath54-vertex @xmath17 in an instance @xmath53 is called _",
    "i - reducible _ ( resp . , _ m - reducible _ ) if moving it to @xmath57 ( resp . , @xmath7 ) and applying rules  2 to 4 as much as possible result in an instance that violates the basic conditions .",
    "every i - reducible vertex should not be in the vertex set of any @xmath51-dim of the instance @xmath53 , whereas every m - reducible vertex should be in the vertex set of any @xmath51-dim of the instance @xmath53 if it exists .",
    "a vertex is called _ infeasible _ if it is both i - reducible and m - reducible .",
    "clearly every instance with some infeasible vertex admits no @xmath51-dim . whether a vertex is i - reducible ( resp . , m - reducible ) or not can be checked in polynomial time .",
    "we have the following rules :    next we identify some infeasible , i - reducible and m - reducible vertices from graph structures .    obviously any dominating induced matching contains exactly one vertex in a triangle , whereas no dominating induced matching contains any edge in a 4-cycle . hence a complete graph with size 4 can not admit a dominating induced matching .",
    "we call an instance _ pseudo - feasible _ if none of the above seven rules is applicable .",
    "when applying any other kind of reduction and branching rules , we always assume that the current instance is pseudo - feasible .",
    "it is easy to observe the next .",
    "note that when we regard @xmath102 as a new instance @xmath53 , the associated vertex sets @xmath64 and @xmath7 are empty .",
    "then the lemma provides a method of decomposing an instance into those with connected graphs and no vertices in @xmath103 .",
    "from now on , we consider a pseudo - feasible instance @xmath53 with @xmath104 such that @xmath23 is connected .    from and , we get the following reduction rule .    we can use and to prove the correctness of this rule .",
    "let @xmath105 be the instance after deleting the edge @xmath106 from @xmath53 by applying . by and , we have that @xmath53 is an yes - instance if and only if so is @xmath105 .    from and",
    ", we get the following reduction rule to deal with some @xmath63-vertices contained in 5-cycles",
    ".    from the above lemma and its proof , we get the following reduction rule . ( a ) illustrates the operation of the reduction rule .    in a pseudo - feasible instance @xmath53 with @xmath104 , a 3-path @xmath107",
    "is called a _ chain _",
    "if @xmath108 and @xmath109 are degree-2 vertices and @xmath110 is an @xmath63-vertex . note that @xmath111 is also an @xmath63-vertex and no vertex is adjacent to both of @xmath110 and @xmath111 since the instance is pseudo - feasible .",
    "see ( b ) for an illustration of a chain .    in a pseudo - feasible instance @xmath53 with @xmath104 , the induced subgraph @xmath112 $ ] for an @xmath63-vertex @xmath58",
    "is called a _ tail _ if there is exactly one edge between @xmath113 $ ] and @xmath114 .",
    "see ( c ) for an illustration of a tail .    an instance is _ reduced _ if none of - can be applied .",
    "our algorithm is simple in the sense that it always branches on a @xmath54-vertex @xmath17 in a reduced instance by moving it to either @xmath57 or @xmath7 . in what follows",
    ", we make a basic analysis on how many @xmath54-vertices will be moved to @xmath66 in each of the two branches , and then define a `` good '' vertex to branch on so that the number of @xmath54-vertices efficiently decreases in each of the resulting instances .",
    "recall that @xmath104 and @xmath23 is connected . in our algorithm , there is only one step where @xmath115 may hold . in this step , we branch on a @xmath54-vertex by moving it to either @xmath57 or @xmath7 , which is easy to analyze . for the other steps ,",
    "@xmath63 is not empty and the algorithm will branch on a @xmath54-vertex @xmath17 adjacent to an @xmath63-vertex @xmath58 . in the following , we mainly assume that @xmath17 is adjacent to an @xmath63-vertex @xmath58 , where @xmath116 and @xmath33 have no common vertex and no edge between them since no @xmath63-vertex is in a triangle or 4-cycle by ( ii ) .",
    "we distinguish ( i ) the first branch of moving @xmath17 to @xmath57 and ( ii ) the second branch of moving @xmath17 to @xmath7 in a reduced instance @xmath117 .",
    "\\(i ) the first branch of moving @xmath17 to @xmath57 : then all vertices in @xmath40 , which are all @xmath54-vertices , will be moved to @xmath7 , and all vertices in @xmath118 will be moved to @xmath57 directly by applying our reduction rules .",
    "so in this branch , the number of @xmath54-vertices decreases by at least @xmath119 we also analyze two special cases where some @xmath54-vertices in @xmath120 $ ] can be eliminated .",
    "+ - the first special case is that there are two vertices @xmath121 adjacent to each other , including the case that @xmath58 is contained in a 5-cycle or 6-cycle .",
    "any vertex @xmath122 adjacent to one of @xmath123 or @xmath124 is a @xmath54-vertex , since otherwise @xmath17 would be i - reducible .",
    "such a vertex @xmath46 will be eliminated by , since @xmath123 and @xmath124 will be a pair of adjacent @xmath64-vertices after moving @xmath17 to @xmath57 . + - the second special case is that there is a vertex @xmath125 adjacent to exactly one vertex @xmath122 , where we can assume that @xmath123 has no other @xmath126-neighbor since otherwise the first case can be applied .",
    "the vertex @xmath46 is also a @xmath54-vertex since otherwise @xmath17 would be i - reducible .",
    "we can see that @xmath46 will be moved to @xmath57 directly by .    hence for each of the two special cases we can decrease one more @xmath54-vertex @xmath46 .",
    "moreover any other @xmath54-neighbor @xmath127 of @xmath46 will also be eliminated by the reduction rules . in the following sections , we sometimes prove the existence of such a vertex @xmath127 to ensure that two @xmath54-vertices @xmath46 and @xmath127 can be further eliminated in the first branch .",
    "\\(ii ) the second branch of moving @xmath17 to @xmath7 : note that @xmath128 since @xmath63-vertex @xmath58 has no common @xmath54-vertex with any other @xmath63-vertex by ( ii ) . in this branch",
    "all vertices in @xmath129 will be moved to @xmath57 , and the number of @xmath54-vertices decreases by at least @xmath130 in a reduced instance with a non - empty set @xmath63 , we can always find a @xmath54-vertex @xmath17 with an @xmath63-neighbor @xmath131 and a @xmath54-neighbor @xmath132 by ( iii ) .",
    "such a @xmath54-vertex @xmath17 satisfies @xmath133 .",
    "so in the second branch , the number of @xmath54-vertices decreases by at least 2 .",
    "we show two special cases where more @xmath54-vertices in @xmath134 $ ] can be eliminated .",
    "+ - the first special case is that @xmath17 has a degree-2 @xmath54-neighbor @xmath135 , where we denote @xmath136 .",
    "after @xmath17 is moved to @xmath7 , both of @xmath135 and @xmath137 will be moved to @xmath57 , and any other vertices adjacent to @xmath137 will be moved to @xmath7 . + - the second special case is that @xmath58 is of degree 2 , where we denote @xmath138 .",
    "after @xmath17 is moved to @xmath7 , @xmath135 will be moved to @xmath57 .",
    "thus the second branch is equivalent to the operation of moving @xmath135 to @xmath57 , and we see that the @xmath54-vertices in @xmath139 will be eliminated .",
    "we are ready to define `` good '' vertices to branch on .",
    "a @xmath54-vertex is called an _ effective _ vertex if it is of degree at least 3 and has an @xmath63-neighbor .",
    "our algorithm branches on vertices as follows .",
    "we first select effective vertices to branch on as long as they exist .",
    "after this step , no effective vertex exists and each @xmath54-neighbor of an @xmath63-vertex is of degree at most 2 .",
    "next our algorithm tests whether the graph contains an @xmath63-vertex @xmath58 having only two degree-2 @xmath54-neighbors , and selects a degree-2 @xmath54-neighbor @xmath17 of such an @xmath63-vertex @xmath58 to branch on , if any .",
    "note that every degree-2 @xmath63-vertex has two degree-2 @xmath54-neighbors , since otherwise it would be in a tail .",
    "after this , no @xmath63-vertices of degree 2 exist any more",
    ". then our algorithm tests whether the graph has an @xmath63-vertex contained in 5-cycles and selects one neighbor @xmath17 of such an @xmath63-vertex to branch on , if any .",
    "finally no @xmath63-vertex is contained in a cycle of length 3 , 4 or 5 , and our algorithm selects a neighbor @xmath17 maximum @xmath140 of any @xmath63-vertex @xmath58 or a @xmath54-vertex @xmath17 with some other priority ( if @xmath141 ) to branch on .",
    "the main steps of our algorithm are described in figure  [ dim ] .",
    "note that step  3 is based on .",
    "then it is easy to observe the correctness of the algorithm .",
    "only step  5 in the algorithm creates recurrences . before analyzing each substeps in step  5 , we prove some properties of reduction operations .    no operation in the algorithm will create any new @xmath54-vertex .",
    "it is easy to see the correctness of this lemma .    by and , we know that if a pseudo - feasible instance has the property that each connected component of @xmath143 $ ] contains at least one @xmath63-vertex , then the resulting pseudo - feasible instance still satisfies this property after applying any branching rule or reduction rule except .",
    "this will be used in the analysis in step  5(f ) .",
    "next we give the detailed analysis of each substep in step  5 .",
    "when a vertex @xmath110 is chosen in step  5 , let @xmath144 ( resp . ,",
    "@xmath145 ) denote the number of @xmath54-vertices that decrease by the branch of moving @xmath110 to @xmath57 ( resp .",
    ", to @xmath7 ) and by possible applications of reduction rules to the resulting instance .      for an instance in step  5(a ) , the graph has some effective vertex .",
    "let @xmath110 be an effective vertex adjacent to an @xmath63-vertex @xmath58 and at least two @xmath54-vertices @xmath146 .",
    "we assume that the algorithm will branch on @xmath110 .",
    "first we show that @xmath147 and @xmath148 .",
    "since @xmath58 is of degree at least 2 by and has another @xmath54-neighbor @xmath149 , we have @xmath147 .",
    "now cnsider the vertices in @xmath150 .",
    "note that no pair of vertices in @xmath151 are adjacent to each other , since otherwise @xmath110 would be i - reducible .",
    "neither of @xmath152 and @xmath153 can be a degree-1 vertex , since otherwise @xmath110 would be in @xmath57 .",
    "then each of @xmath152 and @xmath153 is adjacent to a vertex in @xmath150 .",
    "if there is only one vertex @xmath154 in @xmath150 , then @xmath152 and @xmath153 are adjacent to the same vertex @xmath154 , and @xmath110 would be m - reducible .",
    "therefore we have that each of @xmath152 and @xmath153 has an @xmath150-neighbor , and it holds @xmath148 .",
    "next we derive an upper bound on @xmath144 ( resp . , @xmath145 ) .",
    "we define @xmath155 ; i.e. , @xmath156 if @xmath58 is of degree 2 and @xmath157 if @xmath58 is of degree @xmath158 .",
    "let @xmath159 .    in the branch of moving @xmath110 to @xmath57 ,",
    "all vertices in @xmath151 will be moved to @xmath7 and all vertices in @xmath150 will be moved to @xmath57 . in this branch ,",
    "the number of @xmath54-vertices decreases by at least @xmath160 .",
    "note that @xmath151 contains at least three vertices @xmath161 and @xmath153 , and when @xmath58 is of degree @xmath162 it holds @xmath163",
    ". then @xmath164 .",
    "for the other branch of moving @xmath110 to @xmath7 , we prove that @xmath165 by distinguishing five different values of @xmath166 .",
    "@xmath167 : in this case , @xmath150 contains at least two vertices @xmath168 since @xmath148 .",
    "we assume that @xmath169 ( resp . , @xmath170 )",
    "is adjacent to @xmath152 ( resp . , @xmath153 )",
    ", where @xmath169 and @xmath170 are not adjacent to each other , since otherwise they would be in @xmath63 . since no two vertices in @xmath57 have a common @xmath54-neighbor in a reduced instance by , we see that @xmath169 and @xmath170 have different @xmath171-neighbors : @xmath169 is adjacent to say , @xmath172 and @xmath170 is adjacent to say , @xmath173 such that @xmath174 .",
    "illustrates the neighbors of edge @xmath175 .",
    "we easily see that there is no edge between @xmath176 and @xmath177 , since otherwise the graph would have some i - reducible or m - reducible vertex .",
    "since @xmath178 $ ] and @xmath179 $ ] are not tails , we know that there are two vertices @xmath180 such that either ( i ) each of @xmath46 and @xmath127 is adjacent to a vertex in @xmath181 or ( ii ) @xmath46 is adjacent to both of @xmath182 and @xmath183 and a vertex @xmath184 is adjacent to @xmath46 . for the latter case , @xmath184 is possibly an @xmath57-vertex .",
    "since @xmath46 is not an @xmath57-vertex , @xmath184 can not be a degree-1 vertex , and thereby it has a @xmath54-neighbor @xmath127 . in any of ( i ) and ( ii ) ,",
    "when @xmath110 is moved to @xmath7 , at least seven @xmath54-vertices @xmath185 will be eliminated from @xmath54 , implying that @xmath186 when @xmath157 .",
    "furthermore , when @xmath58 is of degree 2 , the other neighbor @xmath108 of @xmath58 will also be moved to @xmath7 and then at least eight @xmath54-vertices @xmath187 will be eliminated from @xmath54 , implying that @xmath188 .",
    "@xmath189 : in this case , @xmath150 contains at least one vertex @xmath190 and one vertex @xmath191 .",
    "note that @xmath169 is not in @xmath114 because no two @xmath57-vertices have a common @xmath54-neighbor .",
    "then @xmath169 is adjacent to some neighbor of @xmath110 . without loss of generality",
    ", we can assume that @xmath169 ( resp . , @xmath192",
    ") is adjacent to @xmath152 ( resp . , @xmath153 ) .",
    "furthermore , @xmath169 and @xmath192 can not be adjacent to each other , since otherwise @xmath110 would be u - reducible .",
    "see for an illustration of the neighbors of edge @xmath175 .",
    "analogously with the above case , we know that @xmath169 is adjacent to a vertex @xmath172 .",
    "let @xmath193 .",
    "there is also a vertex @xmath194 adjacent to either @xmath169 or @xmath195 .",
    "when @xmath110 is moved to @xmath7 , at least six vertices @xmath196 will be eliminated from @xmath54 , implying that @xmath197 when @xmath157 .",
    "furthermore , when @xmath58 is of degree 2 , the other neighbor @xmath108 of @xmath58 will also be moved to @xmath7 and then at least seven @xmath54-vertices @xmath198 will be eliminated from @xmath54 , implying that @xmath186 .",
    "@xmath199 : let @xmath200 . in the branch where @xmath110 is moved to @xmath7 , three @xmath54-vertices @xmath201 will be eliminated .",
    "if @xmath58 is of degree 2 , the other neighbor @xmath108 of @xmath58 will also be eliminated .",
    "we show that at least two more @xmath54-vertices will be eliminated in this branch , which implies that @xmath202 for @xmath157 and @xmath203 for @xmath204 .",
    "we distinguish two subcases .",
    "\\(i ) @xmath192 and @xmath205 have a common neighbor in @xmath206 : see .",
    "if no vertex in @xmath207 has a neighbor in @xmath208 , then @xmath110 would be m - reducible .",
    "then at least one vertex in @xmath207 , say @xmath152 has a neighbor @xmath209 .",
    "since @xmath152 is not in @xmath57 and @xmath169 can not be a degree-1 vertex , we know that @xmath169 has a @xmath54-neighbor @xmath210 .",
    "note that path @xmath211 can not be a tail .",
    "then @xmath169 or @xmath152 should have a @xmath54-neighbor @xmath212 and it will be moved to @xmath7 or @xmath57 after @xmath110 is moved to @xmath7 .",
    "then at least two more @xmath54-vertices , @xmath195 and @xmath46 , will be eliminated from @xmath54 .",
    "\\(ii ) @xmath192 and @xmath205 have no common neighbor in @xmath206 : then each of @xmath152 and @xmath153 is adjacent to at most one vertex in @xmath213 .",
    "if one of @xmath152 and @xmath153 , say @xmath152 is not adjacent to any vertices in @xmath213 , we can assume that @xmath152 is adjacent to a vertex @xmath209 .",
    "from the analysis in case 3(i ) , we see that at least two more @xmath54-vertices @xmath195 and @xmath46 will be eliminated .",
    "next we assume that each of @xmath152 and @xmath153 is adjacent to exactly one vertex in @xmath213 .",
    "without loss of generality , we assume that @xmath192 ( resp . , @xmath205 )",
    "is adjacent to @xmath152 ( resp . , @xmath153 ) .",
    "we see that : for each @xmath214 , @xmath215 will be moved to @xmath7 if @xmath216 has a @xmath217-neighbor , which should be an @xmath63-vertex ; and @xmath215 will be moved to @xmath57 if @xmath216 has no @xmath217-neighbor . then at least two more @xmath54-vertices , @xmath192 and @xmath205 , will be eliminated from @xmath54 .",
    "@xmath218 : at least one of @xmath152 and @xmath153 , say @xmath152 has at most one @xmath213-neighbor .",
    "if @xmath152 has exactly one @xmath213-neighbor @xmath192 , then the four vertices @xmath219 will be eliminated after @xmath110 is moved to @xmath7 .",
    "assume that @xmath152 has no @xmath213-neighbor .",
    "then @xmath152 has an @xmath220-neighbor @xmath169 , which must have a @xmath221-neighbor @xmath46 . for this case , the four vertices @xmath222 will be eliminated .",
    "hence @xmath223 for @xmath157 .",
    "note that when @xmath58 is of degree 2 , the other neighbor @xmath108 of @xmath58 will also be eliminated in any of the above cases , implying that @xmath224 for @xmath204 .",
    "@xmath225 : after moving @xmath110 to @xmath7 , we can always eliminate at least three @xmath54-vertices @xmath201 , implying that @xmath226 for @xmath157 . if @xmath58 is a degree-2 vertex the other neighbor @xmath108 of @xmath58",
    "will also be eliminated directly , implying that @xmath227 for @xmath204 .    from the arguments in cases  1 - 5 , we have that @xmath228",
    ". therefore we can branch with recurrence relations @xmath229 all of which are covered by    before we proceed to analysis on step  5(b ) , we analyze a special case in step  5(a ) , where the neighbor @xmath58 of @xmath110 is an @xmath63-vertex such that all the neighbors are effective vertices .",
    "although it is covered by the above analysis , we here derive better recurrence relations for it , which will be used in the analysis of step  5(e ) .",
    "the algorithm will branch on @xmath110 by including it to @xmath57 or @xmath7 in step  5(a ) , and let @xmath10 be the degree of @xmath58 and @xmath230 , which contains only effective @xmath54-vertices .",
    "we distinguish two cases .",
    "@xmath231 : then the two @xmath54-neighbors @xmath110 and @xmath108 of @xmath58 are of degree at least 3",
    ". choose vertices @xmath232 and @xmath233 .",
    "then @xmath234 is a set of six different @xmath54-vertices since @xmath58 is not contained in any triangle or 4-cycle by ( ii ) .",
    "the second branch of moving @xmath110 to @xmath7 is equivalent to the operation of moving @xmath108 to @xmath57 .",
    "when we move @xmath235 @xmath236 to @xmath57 , all @xmath54-vertices in @xmath237 $ ] will be eliminated .",
    "we can see that @xmath238\\cap n_2[v_2u]$ ] . in each branch , at least six @xmath54-vertices decrease , implying that @xmath239 and @xmath240 .",
    "we will further show that @xmath241 to obtain the following recurrence relation .",
    "for this , we prove that at least one more @xmath54-vertex decreases in one of the two instances generated by branching on @xmath110",
    ". vertices @xmath152 and @xmath153 are not adjacent to each other , since otherwise @xmath110 would be i - reducible .",
    "each of @xmath152 and @xmath153 must be adjacent to a vertex @xmath242 , since otherwise @xmath108 would be i - reducible .",
    "assume that @xmath152 ( resp . , @xmath153 )",
    "has a @xmath243-neighbor @xmath169 ( resp . , @xmath170 ) .",
    "let @xmath73 be the number of @xmath54-vertices in @xmath244 $ ] .",
    "since @xmath238 $ ] , it holds @xmath245 , where if @xmath246 then both of @xmath110 and @xmath108 are of degree 3 and both of @xmath169 and @xmath170 are @xmath63-vertices .",
    "note that two @xmath63-vertices @xmath169 and @xmath170 are not adjacent and have no common @xmath247-neighbors .",
    "then each of @xmath169 and @xmath170 has at least two @xmath54-neighbors , since they can not be degree-1 vertices .",
    "if one of @xmath169 and @xmath170 has a @xmath248-neighbor @xmath46 , then in the branch of moving @xmath110 to @xmath7 , the seven @xmath54-vertices in @xmath249 will decrease , implying that @xmath250 .",
    "now assume that neither of @xmath169 and @xmath170 has a @xmath251-neighbor .",
    "then each of @xmath169 and @xmath170 is a degree-2 vertex adjacent to a vertex in @xmath252 .",
    "at least one @xmath54-vertex @xmath253 is adjacent to @xmath192 or @xmath205 , since the graph contains more than six @xmath54-vertices . in the branch of moving @xmath110 to @xmath57 , vertices @xmath192 and @xmath205 will become @xmath64-vertices and @xmath46 will be included into @xmath7 . again",
    "the seven @xmath54-vertices in @xmath249 will be eliminated , implying that @xmath254 .    case s2 .",
    "@xmath255 : note that each vertex in @xmath116 is of degree at least 3 since it is an effective vertex in the special case . in the branch where @xmath110 is moved to @xmath57 , all @xmath54-vertices in @xmath244 $ ] are eliminated .",
    "there are at least @xmath256 @xmath54-vertices in @xmath257 .",
    "no pair of vertices in @xmath257 are adjacent otherwise @xmath58 would be in a triangle or 4-cycle .",
    "then each vertex in @xmath258 has at least two @xmath259-neighbors , which are @xmath54-vertices since otherwise a vertex in @xmath258 would be adjacent to two @xmath63-vertices and should have been moved to @xmath7 . furthermore , no pair of vertices in @xmath258 can share a common neighbor in @xmath259 since otherwise @xmath58 would be in a 4-cycle",
    ". then there are at least @xmath260 different @xmath54-vertices in @xmath259 . in total , the number of @xmath54-vertices in @xmath259 is at least @xmath261 , implying that @xmath262 . in the other branch of moving @xmath110 to @xmath7 ,",
    "at least three @xmath54-vertices in @xmath263 $ ] decrease , implying that @xmath264 . therefore we get a recurrence relation    this completes our analysis on recurrence relations in step  5(a ) .",
    "we also examine structural property on instances with no effective vertices .",
    "the property will be frequently used in the next analysis .",
    "we derive recurrence relations to step  5(b ) and step  5(c ) . recall that no @xmath63-vertex @xmath58 is in any triangle and there are at least two edges between @xmath116 and @xmath114 by . in step  5(b ) , both of the two neighbors of any @xmath63-vertex @xmath58 are of degree 2 and adjacent to some vertices in @xmath114 , since no neighbor of @xmath58 is of degree @xmath162 by ( i ) .",
    "thus , in step  5(b)-(c ) , every @xmath63-vertex @xmath58 has exactly two degree-2 @xmath54-neighbors , each of which is adjacent to some vertex in @xmath114 , and any other neighbor of @xmath58 is of degree 1 .",
    "let @xmath58 be a degree-2 @xmath54-neighbor @xmath110 of an @xmath63-vertex @xmath58 on which algorithm branch in step  5(b ) or ( c ) .",
    "let @xmath10 be the degree of @xmath58 and @xmath230 , where @xmath110 and @xmath108 are of degree 2 .",
    "denote @xmath265 and @xmath266 , where @xmath267 holds since otherwise @xmath110 and @xmath108 would be i - reducible .",
    "vertex @xmath152 can not be a degree-2 vertex since otherwise @xmath268 would be in a chain .",
    "then @xmath152 has no @xmath257-neighbor since otherwise @xmath110 would be i - reducible .",
    "we know that @xmath152 has at least two @xmath259-neighbors , say @xmath192 and @xmath205 , each of which is a @xmath54-vertex by ( ii ) .",
    "we distinguish with step  5(b ) and step  5(c ) . case  1 .",
    "@xmath231 ( step  5(b ) ) : note that @xmath269 , since @xmath270 would imply that edge @xmath271 can be deleted by .",
    "hence @xmath259 contains at least three different @xmath54-vertices @xmath272 and @xmath205 .",
    "see for an illustration of the neighbors of edge @xmath175 . in the branch where @xmath110 is moved to @xmath57 , all vertices in @xmath257",
    "will be moved to @xmath7 , and all vertices in @xmath259 will be moved to @xmath57 .",
    "the number of @xmath54-vertices eliminated from @xmath273 is at least @xmath274 .",
    "the other branch of moving @xmath110 to @xmath7 is equivalent to moving @xmath108 to @xmath57 . by the same argument",
    ", we see that this branch also decreases at least six @xmath54-vertices .",
    "we get a recurrence relation    when there is a degree-2 @xmath63-vertex in the resulting instance , the next branch will be in either step  5(a ) or step  5(b ) . we have the following lemma .    case  2 .",
    "@xmath255 ( step  5(c ) ) : see .",
    "we show that each of the two branches on @xmath110 decreases at least seven @xmath54-vertices .",
    "first consider the branch of moving @xmath110 to @xmath57 by distinguishing two subcases .",
    "\\(i ) @xmath275 or @xmath58 is of degree @xmath276 : after @xmath110 in moved to @xmath57 , the number of @xmath54-vertices decreases by at least @xmath277 .",
    "\\(ii ) @xmath278 and @xmath58 is of degree @xmath279 : without loss of generality , we assume that @xmath280 , where @xmath281 . for this case , @xmath205 must be a degree-3 vertex , because if @xmath205 is of degree @xmath282 then there would be a chain or tail , and if @xmath205 is of degree @xmath276 then the algorithm must have selected @xmath108 instead of @xmath110 to branch on , since @xmath283 . since the current graph contains more than six @xmath54-vertices after step 1 , if @xmath205 is adjacent to @xmath192 , then @xmath192 is adjacent to a vertex @xmath284 , where the vertex @xmath46 is a @xmath54-vertex since otherwise @xmath110 would be i - reducible . on the other hand , if @xmath205 is not adjacent to @xmath192 , then it must be adjacent to a @xmath54-vertex @xmath284 . in the branch where @xmath110 in moved to @xmath57 , all vertices in @xmath257",
    "will be moved to @xmath7 , and all vertices in @xmath259 will be moved to @xmath57 .",
    "the vertex @xmath46 in any case will also be moved to @xmath7 or @xmath57 directly .",
    "therefore this branch eliminates at least seven @xmath54-vertices in @xmath285 .",
    "second we consider the other branch where @xmath110 is moved to @xmath7 .",
    "after @xmath110 is moved to @xmath7 , vertex @xmath152 will be moved to @xmath57 and the neighbors of @xmath58 together with @xmath58 will form a tail . by reducing this tail by ,",
    "at least two move @xmath54-vertices @xmath108 and @xmath109 will be removed from the graph , which remains connected and contains at least one @xmath63-vertex @xmath152 . hence at least four @xmath54-vertices will be eliminated .",
    "then we get a recurrence relation      in step  5(d ) , the algorithm chooses a 5-cycle @xmath286 passing through an @xmath63-vertex @xmath58 which has at least three degree-2 neighbors , and branches on a degree-2 vertex @xmath110 in @xmath287 .",
    "denote @xmath288 , where @xmath289 .",
    "note that no pair of vertices in @xmath151 are adjacent since otherwise @xmath110 would be i - reducible .",
    "also vertex @xmath68 can not be a degree-2 vertex since otherwise there would be a chain containing a 2-path @xmath290 . then @xmath68 is adjacent to at least two vertices in @xmath150 .",
    "we consider two subcases .",
    "see for an illustration of the neighbors of edge @xmath175 .",
    "@xmath68 is adjacent to both of @xmath152 and @xmath153 : since the graph has more than six @xmath54-vertices , we know that there is a vertex @xmath46 adjacent to some vertex in @xmath291 . the vertex @xmath46 can not be an @xmath57-vertex , because @xmath259 contains no @xmath57-vertices by ( ii ) and if @xmath46 is an @xmath57-neighbor of @xmath152 or @xmath153 then @xmath110 would be i - reducible . in the branch where @xmath110 is moved to @xmath57 , all the seven @xmath54-vertices @xmath292 will be eliminated . in the other branch where @xmath110 is moved to @xmath7 , vertex @xmath68",
    "is moved to @xmath57 .",
    "now can be applied to the 6-cycle @xmath293 . applying the reduction rule",
    "eliminates at least two @xmath54-vertices @xmath108 and @xmath109 .",
    "this branch eliminates at least four @xmath54-vertices in @xmath294 .",
    "we get the same recurrence relation as .",
    "at least one of @xmath152 and @xmath153 , say @xmath153 is not adjacent to @xmath68 : vertex @xmath68 is adjacent to a vertex @xmath295 .",
    "note that @xmath153 has no neighbor in @xmath296 , since otherwise @xmath297 would be contained in a 4-cycle and @xmath109 would be i - reducible .",
    "also @xmath153 has no neighbor in @xmath298 , since otherwise @xmath110 would be i - reducible .",
    "it is also impossible that @xmath153 has no other neighbor than @xmath152 and @xmath109 , since otherwise @xmath108 would be i - reducible .",
    "hence @xmath153 has an @xmath171-neighbor , which must be a @xmath54-vertex since otherwise @xmath110 would be i - reducible .",
    "we know that either @xmath153 has two @xmath54-neighbors @xmath46 and @xmath299 or @xmath153 has only one @xmath54-neighbor @xmath300 . for the latter case , @xmath46 should also have a @xmath54-neighbor @xmath301 , where @xmath127 can not be an @xmath57-vertex since otherwise @xmath108 would be i - reducible . in the first branch where @xmath110 is moved to @xmath57 ,",
    "the @xmath54-vertices in the following set will be eliminated @xmath302 where @xmath147 since @xmath303 and @xmath304 since @xmath305 . in the second branch where @xmath110 is moved to @xmath7 , vertex @xmath68 will be moved to @xmath57 , and two @xmath54-vertices @xmath110 and @xmath68 are eliminated .",
    "therefore we get a recurrence relation @xmath306    we further look at the second branch of moving @xmath110 to @xmath7 .",
    "let @xmath307 be the graph after removing @xmath110 and moving @xmath68 to @xmath57 . recall that any resulting @xmath7-vertices in @xmath307 will be removed in step 3 . in @xmath307 , vertices @xmath58 and @xmath68 are @xmath63-vertices , where no tail is created in @xmath307 .",
    "we distinguish two subcases .",
    "\\(i ) at least one of @xmath58 and @xmath68 is of degree 2 in @xmath307 : then the algorithm executes either some reduction operation other than reducing tails to eliminate at least one more @xmath54-vertex or step  5(a ) or ( b ) in @xmath307 with a recurrence relation covered by in . in the former ,",
    "we obtain a recurrence relation in the latter , we analyze a recurrence relation for the operation combined with the branching on @xmath110 and branching in @xmath307 . by , we can ignore recurrence relations covered by , and we get a recurrence relation    \\(ii ) neither of @xmath58 and @xmath68 is of degree 2 in @xmath307 : we know that before branching on @xmath110 , vertex @xmath58 has at least four neighbors @xmath308 and @xmath111 , and vertex @xmath68 has at least two @xmath54-neighbors @xmath309 such that @xmath310",
    ". therefore @xmath163 and @xmath311 in @xmath23 . in the first branch where @xmath110 is moved to @xmath57 , at least 11 @xmath54-vertices in @xmath312 are eliminated .",
    "we get a recurrence relation      in step  5(e ) , the algorithm chooses an @xmath63-vertex @xmath58 and branches on a @xmath54-neighbor @xmath110 of @xmath58 , where @xmath58 is not contained in 5-cycles and @xmath58 has at least three neighbors @xmath313 and @xmath109 each of which is adjacent to some vertex in @xmath114",
    ". now all of @xmath314 and @xmath109 are degree-2 vertices . for each @xmath315 , let @xmath216 be the other neighbor of @xmath235 than @xmath58 .",
    "the six vertices in @xmath316 are different from each other , because @xmath58 is not contained in a triangle or 4-cycle by .",
    "furthermore , vertex @xmath152 has at least two @xmath259-neighbors @xmath192 and @xmath205 since there is no chain , and no neighbor of @xmath152 is in @xmath317 since @xmath58 is not contained in a 4-cycle or 5-cycle .",
    "see for an illustration of the neighbors of edge @xmath175 .",
    "we distinguish two cases .    case  1 .",
    "@xmath58 is of degree 3 : we further distinguish two subcases .",
    "\\(i ) @xmath152 has at least three @xmath259-neighbors @xmath318 and @xmath319 : then @xmath320 and @xmath321 by @xmath322 . in the first branch where @xmath110 is moved to @xmath57 , @xmath54-vertices in @xmath323",
    "will be eliminated , and the number of @xmath54-vertices decreases by at least @xmath324 . in the second branch where @xmath110 is moved to @xmath7 , @xmath152 is moved to @xmath57 , and the number of @xmath54-vertices decreases by 2 , leaving a degree-@xmath325 @xmath63-vertex @xmath58 in the graph .",
    "analogously with case  2 in step  5(d ) , we can get either or .",
    "\\(ii ) @xmath152 has only two neighbors @xmath192 and @xmath326 : then we can assume that both of @xmath153 and @xmath327 are degree-3 vertices by the choice of @xmath110 and @xmath328 .",
    "now we have that @xmath329 by @xmath320 and @xmath330 by @xmath331 . in the first branch of moving @xmath110 to @xmath57 ,",
    "at least eight @xmath54-vertices will be eliminated . in the second branch of moving @xmath110 to @xmath7 ,",
    "at least two @xmath54-vertices will be eliminated .",
    "then we have only a recurrence relation @xmath332 .",
    "we derive an improved recurrence relation based on the fact that each of the generated instances has a degree-2 @xmath57-vertex but contains no tail : in the first branch where @xmath110 is moved to @xmath57 , vertex @xmath153 will be a degree-2 @xmath57-vertex ; and in the second branch where @xmath110 is moved to @xmath7 , vertex @xmath152 will be a degree-2 @xmath57-vertex .",
    "it is easy to check that each of the instances still contains no tails . to each instance",
    ", the algorithm in the next step either eliminates at least one more @xmath54-vertex by reduction operations except reducing tails or branches with a recurrence relation covered by in . when a @xmath54-vertex is eliminated by a reduction rule in the first instance , analogously with the analysis in case  2 of step  5(d )",
    ", we get recurrence relations and .",
    "when the algorithm branches with a recurrence relation covered by in the first instance and eliminates one @xmath54-vertex by reduction operations in the second instance , we get otherwise the algorithm branches with a recurrence relation covered by in both of the two instances .",
    "we show that the combined operation will create a recurrence relation covered by assume that the algorithm branches with a recurrence @xmath333 and a recurrence @xmath334 in the two instances , respectively , where @xmath86 and @xmath87 are covered by . by , we know that recurrence @xmath335 is covered by @xmath336 , and recurrence @xmath336 is covered by @xmath337",
    ". then @xmath338 is covered by .    case  2 .",
    "@xmath58 is of degree @xmath276 : let @xmath111 denote the fourth neighbor of @xmath58 , and @xmath339 denote the second neighbor of @xmath111 .",
    "now we have that @xmath340 by @xmath341 and @xmath321 by @xmath342 .",
    "we distinguish two subcases .",
    "\\(i ) @xmath152 has only two @xmath259-neighbors @xmath192 and @xmath205 : then by branching on @xmath110 we get a recurrence relation @xmath343 .",
    "the branch of moving @xmath110 to @xmath7 leaves a graph with a degree-2 @xmath54-vertex @xmath152 and no tail .",
    "analogously with case  2 in step  5(d ) , we can get two recurrence relations covered by and , respectively .",
    "\\(ii ) @xmath152 has at least three neighbors @xmath344 and @xmath345 : then @xmath346 by @xmath347 . in the branch where @xmath110 is moved to @xmath57 , at least 11 @xmath54-vertices will be eliminated .",
    "we can branch with in this case .      in step  5(f ) , @xmath141 holds , and the algorithm branches on a @xmath54-vertex @xmath110 of maximum degree , where the degree of @xmath110 is at least 3 since after step  1 the maximum degree of the graph is at least 3 .",
    "also in this step , the graph has no degree-1 vertex , otherwise the unique neighbor of each degree-1 vertex would be in @xmath63 . in the first branch of moving @xmath110 to @xmath57 , at least one @xmath54-vertex will be eliminated . in the second branch of moving @xmath110 to @xmath7 ,",
    "all neighbors of @xmath110 will be moved to @xmath57 by applying reduction rules , and the number of eliminated @xmath54-vertices is at least @xmath348 .",
    "this leads to a recurrence relation @xmath349 . to derive a better recurrence relation , we distinguish four cases .",
    "@xmath110 is contained in a triangle @xmath350 or a 4-cycle @xmath351 : we show that the first branch eliminates at least three @xmath54-vertices .",
    "first consider the case where @xmath110 is contained in a triangle @xmath350 .",
    "let @xmath352 be an @xmath353-neighbor of @xmath110 .",
    "in the first branch of moving @xmath110 to @xmath57 , all vertices in @xmath353 will become i - reducible , at least three @xmath54-vertices in @xmath354 $ ] will be eliminated .",
    "next consider the case where @xmath110 is contained in a 4-cycle @xmath351 .",
    "in the first branch of moving @xmath110 to @xmath57 , the two neighbors @xmath67 and @xmath154 of @xmath110 will become i - reducible , and at least three @xmath54-vertices will be eliminated . in any case",
    ", we can get a recurrence relation @xmath355    in what follows , we assume that @xmath110 is not contained any triangle or 4-cycle .",
    "@xmath110 has a degree-2 neighbor @xmath67 : let @xmath356 be the other neighbor of @xmath67 , where @xmath357 since the condition of case 1 does not hold .",
    "since the graph has no degree-1 vertex and @xmath110 is not contained in a 4-cycle , we know that @xmath356 has an @xmath206-neighbor @xmath46 . in the second branch where @xmath110 is moved to @xmath7 , all vertices in @xmath263\\cup \\{a',w\\}$ ] will be moved from @xmath54 .",
    "at least six @xmath54-vertices will be eliminated in this branch .",
    "therefore we can get @xmath358    case 3 .",
    "@xmath110 is a vertex of degree @xmath276 with no degree-2 neighbors : since @xmath359 , it is easy to see that the algorithm branches on @xmath110 with a recurrence relation @xmath360 .",
    "we further look at the first branch , and denote @xmath307 be the graph obtained by moving @xmath110 to @xmath57 .",
    "if at least one more @xmath54-vertex is moved to @xmath66 by a reduction operation applied to @xmath307 , then we have a recurrence relation @xmath361 assume that no more @xmath54-vertex is moved to @xmath66 in @xmath307 . in @xmath307 , vertex @xmath110 becomes an @xmath63-vertex with all neighbors of degree @xmath158 , and it is an @xmath63-vertex such that all the neighbors are effective vertices . in the next step , the algorithm will branch on an effective vertex adjacent to @xmath110 in @xmath307 with the recurrence relation with @xmath362 , i.e. , @xmath363 , by the analysis in case  s2 in step  5(a ) . by combing this with the above recurrence relation ,",
    "we get @xmath364    case 4 .",
    "@xmath110 is a degree-3 vertex with no degree-2 neighbors : by the choice of @xmath110 , the current graph @xmath23 is a 3-regular graph without any triangle or 4-cycle . since @xmath365 , the algorithm branches on @xmath110 with a recurrence relation @xmath349 .",
    "we further look at both branches .",
    "let @xmath366 and @xmath367 be the graphs obtained by moving @xmath110 to @xmath57 and @xmath7 , respectively .    in @xmath366 ,",
    "all neighbors of @xmath110 will become effective vertices .",
    "if an effective vertex in @xmath366 is eliminated by a reduction rule , before the instance becomes a reduced one , then at least one more @xmath54-vertex will be moved to @xmath66 by the reduction operation . on the other hand",
    ", the algorithm will branch on an effective vertex adjacent to @xmath110 in @xmath366 with the recurrence relation with @xmath368 , i.e. , @xmath369 , by the analysis in step  5(a ) . in @xmath367 ,",
    "all neighbors of @xmath110 are contained in @xmath57 .",
    "each neighbor @xmath135 of @xmath110 will become a degree-2 @xmath63-vertex in @xmath367 satisfying the condition of case  s1 in step  5(a ) .",
    "if no more @xmath54-vertex is eliminated by reduction rules before the next branching , then the algorithm will branch with in @xmath367 , where can not be applied to @xmath367 since the graph has no triangle .",
    "if only one @xmath54-vertex is eliminated by reduction rules before the next branching , then the resulting graph still has at least one degree-2 @xmath63-vertex and the algorithm will branch with .",
    "otherwise , two @xmath54-vertices are eliminated and the resulting graph still has an @xmath63-vertex . therefore we obtain six recurrence relations @xmath370    we have analyzed recurrence relations for all cases in step  5 .",
    "in fact , the recurrence relations in step  5(f ) are not good enough to get our claimed running time bound .",
    "however , the condition of step  5(f ) will not always happen . by and , we know that before creating a connected component @xmath371 of @xmath372 $ ] that contains no @xmath63-vertex , at least one tail adjacent to @xmath371 must have been removed from it except for the case where @xmath371 is the initial connected graph .",
    "a tail contains at least two @xmath54-vertices .",
    "therefore , we see that at least two more @xmath54-vertices have been eliminated before step  5(f ) is executed . considering this",
    ", we can replace the above ten recurrence relations with      among the above recurrence relations , the worst one with the largest branching factor is , which solves to @xmath373",
    ". then we get",
    "by designing several branching rules , we can eliminate @xmath63-vertices contained in some cycles of length at most 6 .",
    "this improves recurrence relations in the several previously worst cases in  @xcite .",
    "finally , the worst case in our algorithm will be to branch on a vertex in a local graph without any special structure and then we get the claimed running time bound .    in our algorithm",
    ", we use the number of undecided vertices as the measure . for most np - hard graph problems ,",
    "the best exact algorithms are designed and analyzed by using the measure and conquer method , which requires a complicated measure .",
    "if we also introduce the measure and conquer method to our algorithm , we may need to set different weights to @xmath54-vertices .",
    "however , we have not found any good weight setting scheme to improve the bound of the running time .",
    "it leaves as a question whether or not the measure and conquer method is also helpful in designing exact algorithms for dominating induced matching .",
    "dominating induced matching is to partition a graph into two parts @xmath86 and @xmath87 which induce an independent set and a matching , respectively . for further study",
    ", we may consider algorithms for the extended problem : for integers @xmath374 , we are asked to partition a given graph into two parts @xmath86 and @xmath87 that @xmath86 induce a degree-@xmath67 graph and a degree-@xmath68 graph , respectively .",
    "some complexity results of this kind of extended problems can be found in  @xcite .",
    "the first author was supported in part by national natural science foundation of china under the grant 61370071 ."
  ],
  "abstract_text": [
    "<S> a _ dominating induced matching _ , also called an _ efficient edge domination _ , of a graph @xmath0 with @xmath1 vertices and @xmath2 edges is a subset @xmath3 of edges in the graph such that no two edges in @xmath4 share a common endpoint and each edge in @xmath5 is incident with exactly one edge in @xmath4 . </S>",
    "<S> it is np - hard to decide whether a graph admits a dominating induced matching or not . in this paper , we design a @xmath6-time exact algorithm for this problem , improving all previous results . </S>",
    "<S> this problem can be redefined as a partition problem that is to partition the vertex set of a graph into two parts @xmath7 and @xmath4 , where @xmath7 induces an independent set ( a 0-regular graph ) and @xmath4 induces a perfect matching ( a 1-regular graph ) . after giving several structural properties of the problem , </S>",
    "<S> we show that the problem always contains some `` good vertices , '' branching on which by including them to either @xmath7 or @xmath4 we can effectively reduce the graph . </S>",
    "<S> this leads to a fast exact algorithm to this problem .    </S>",
    "<S> combinatorial optimization , graph algorithms , graph partition , exact algorithms , dominating induced matching </S>"
  ]
}