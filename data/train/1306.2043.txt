{
  "article_text": [
    "the method to find the global optimal solution of a general non - linear programming does not exist @xcite . thus some randomized and heuristic algorithms @xcite are proposed to find the local optimal or near global optimal solution . in @xcite ( chap .",
    "13 ) , various randomized algorithms are listed to solve the combinatorial optimization and function optimization problems .",
    "the randomized algorithms can find the global optimal solution with a probability @xmath0 , which is defined as success probability to find the global optimal solution . and",
    "generally , @xmath1 will tend to @xmath2 when the time or space complexity tends to infinity .    in the family of randomized algorithms ,",
    "the swarm intelligence algorithms @xcite are famous for their efficiency in solving the combinatorial optimization and function optimization problems . among them",
    ", the ant colony optimization exploits the multi - agents method and find the optimal solution by locally exchange the information of solution among the artificial ants .",
    "another particle swarm optimization ( pso ) model uses the local optimal and temporary global optimal solution to guide the solution update in each iteration .    in this paper",
    ", we solve the non - linear programming with a different method and propose a raindrop method , which is inspired by the nature of raindrop .",
    "when raindrops fall on the ground , they will always move to the ( local ) lowest spots .",
    "thus we use a random walk model @xcite to control the movement of raindrops to find the global optimal point ( solution ) , namely , each raindrop moves with a certain speed on the ground to find the optimal solution ( lowest point on the ground ) .",
    "this paper is organized as follows . in section 2 ,",
    "we give the description of the raindrop algorithm . in section 3",
    ", some properties of this algorithm are provided . in section 4 ,",
    "we give some numerical results . and the conclusions are in section 5 .",
    "the random walk ( rw ) model is illustrated in fig .",
    "[ fig_rw_model ] . in rw model ,",
    "@xmath3 nodes are uniformly deployed in a finite region . then at each time interval",
    "each node randomly chooses an angle @xmath4 $ ] and a velocity @xmath5 , and moves in direction @xmath6 with velocity @xmath5 until the next time interval .",
    "when the next time interval comes , each node updates the direction and velocity following the same rules . in fig .",
    "[ fig_rw_model ] ( a ) , the node can move in continuous direction .",
    "but in fig .",
    "[ fig_rw_model ] ( b ) , the node can only move in four directions , which is a simplification of rw model . in this paper ,",
    "the direction of raindrop s movement is not random .",
    "suppose we deploy @xmath3 raindrops on the `` ground '' , then each raindrop should move in the direction of negative gradient . however , we assume the gradient of the object function is not available .",
    "thus the raindrop should move in the direction of negative quasi gradient direction .",
    "but we simplify the operation to the greatest extent , i.e. , the raindrop just needs to move in one of the four directions in fig .",
    "[ fig_rw_model ] ( b ) which leads to the smallest value of the object function .",
    "a general optimization problem is as follow .",
    "@xmath7 where x is an n - dimensional vector and @xmath8 is a set with finite measure .",
    "we design a raindrop algorithm to solve this general optimization problem .",
    "firstly , @xmath3 raindrops randomly fall on the `` ground '' , where the `` ground '' is @xmath8 in ( [ eq_a_opti_problem ] ) .",
    "we denote the location of @xmath9th raindrop as @xmath10 .",
    "after the raindrop falls , they will move at each time interval . in time",
    "interval @xmath11 , we suppose the raindrop can moves in one of the @xmath12 directions as follows .    @xmath13    where @xmath14 = i_n$ ] with @xmath15 an @xmath16 identity matrix .",
    "the @xmath17 s are illustrated in fig .",
    "[ fig_rw_model ] ( b ) for @xmath18 .",
    "@xmath19 is the velocity of raindrop @xmath9 .",
    "each raindrop moves in one of the @xmath12 directions which leads to the smallest value of the object function , i.e. , the next ( candidate ) movement direction of the raindrop in the next time interval is    @xmath20    if @xmath21 , then the location of @xmath9th raindrop in the next time interval should be    @xmath22    otherwise , namely , when @xmath23 , which means @xmath24 is near a local optimal solution , then this raindrop should slow down to find the accurate ( local ) optimal solution , i.e. , the velocity of @xmath9th raindrop is modified as    @xmath25    when the velocity of all the raindrop tends to @xmath26 , namely , all the raindrops stop moving , then we find all the local optimal solutions , which contain the global optimal solution .",
    "the raindrop algorithm is described in algorithm 1 .",
    "@xmath3 raindrops randomly fall on @xmath8 .",
    "the location and velocity of @xmath9th raindrop are @xmath10 and @xmath19 respectively .",
    "initialize a @xmath27 .",
    "assume @xmath28 $ ] and @xmath29 $ ] .",
    "find the candidate direction by ( [ eq_direction ] ) .",
    "update location by ( [ eq_location_update ] ) .",
    "update the velocity by ( [ eq_velocity_update ] ) .    find the global optimal solution among the local optimal solutions",
    "in this section , we will analyze the time and space complexity of the raindrop algorithm and show the properties of success probability .",
    "the space complexity is @xmath30 , which is the same order as the number of raindrops .",
    "the time complexity is similar to the method of bisection , which is @xmath31 .",
    "thus with the decrease of @xmath32 , namely , the accuracy requirement is high , the time complexity will increase .",
    "the term of _ search vicinity _ is defined as a region , where if a raindrop falls in , this raindrop can move to the global optimal point .",
    "the search vicinity is around the global optimal solution @xmath33 and contains only one global optimal solution ( contains no other local optimal solutions ) . and",
    "the _ maximum search vicinity _ is defined as the region where if a raindrop does not fall in , then this raindrop will not moves to the global optimal point ( solution ) .    therefore ,",
    "if the distances between the global optimal solution and other local optimal solutions do not tend to 0 , then the measure of the maximum search vicinity is not @xmath26 . because we define the measure of @xmath8 as finite , the probability that a raindrop falls in the maximum search vicinity @xmath34 is @xmath35 , where @xmath36 denotes the measure of set @xmath37 .",
    "when no raindrops fall in the maximum search vicinity @xmath34 , the raindrop algorithm can not find the global optimal solution .",
    "the probability of this event is @xmath38 .",
    "thus the success probability , namely , the probability that the raindrop algorithm can find the global optimal solution , is    @xmath39    obviously , @xmath40 . actually ,",
    "in application , a small @xmath3 can also ensure a considerable @xmath0 .",
    ") .,scaledwidth=50.0% ]    we use the raindrop algorithm to solve an optimization problem as follow .",
    "@xmath41    the object function is illustrated in fig .",
    "[ fig_obj ] , the optimal solution is @xmath42 .",
    "we apply the raindrop algorithm to solve ( [ eq_example_problem_sinc ] ) . in fig .",
    "[ fig_rain_fall_steady ] , we plot the procedure of the algorithm . in fig .",
    "[ fig_rain_fall_steady ] ( a ) , the raindrops randomly fall on the `` ground '' , i.e. , the set @xmath8 .",
    "then we run the raindrop algorithm , the raindrops are moving to find the lowest place to stay .",
    "when the sum of the velocity of all raindrops tends to @xmath26 , the raindrops are steady and the local optimal solutions are obtained .",
    "we find the global optimal solution among them . in fig .",
    "[ fig_rain_fall_steady ] ( b ) , the raindrops are steady , namely , the velocity tends to @xmath26 , then the algorithm can stop . fig .",
    "[ fig_rain_fall_steady ] ( c ) and ( d ) illustrate the corresponding situations of ( a ) and ( b ) on the contour .            in fig .",
    "[ fig_velocity_tends_zero ] , we illustrate the sum of the velocity of all raindrops versus the number of iterations .",
    "notice that with @xmath43 iterations , the velocity of all raindrops are nearly @xmath26 , which is the steady state .",
    "in the steady state , the raindrops are nearly static .",
    "we apply the random walk model in designing a raindrop algorithm to find the global optimal solution of a non - linear programming problem",
    ". the raindrop algorithm does not require the operation of finding the first or second order derivatives of the object function .",
    "hence this algorithm is a direct method .",
    "finally , we apply the raindrop algorithm to solve a non - linear optimization problem , where the object function is highly irregular ( neither convex nor concave ) . and",
    "the global optimal solution can be found with limited steps of iterations and the success probability is high .",
    "thanks tianping shuai for the lectures on optimization and algorithm design ."
  ],
  "abstract_text": [
    "<S> in this paper , we apply the random walk model in designing a raindrop algorithm to find the global optimal solution of a non - linear programming problem </S>",
    "<S> . the raindrop algorithm does not require the information of the first or second order derivatives of the object function . </S>",
    "<S> hence it is a direct method . </S>",
    "<S> we investigate the properties of raindrop algorithm . </S>",
    "<S> besides , we apply the raindrop algorithm to solve a non - linear optimization problem , where the object function is highly irregular ( neither convex nor concave ) . and </S>",
    "<S> the global optimal solution can be found with small number of iterations .    </S>",
    "<S> raindrop algorithm ; random walk ; non - linear programming ; global optimal solution </S>"
  ]
}