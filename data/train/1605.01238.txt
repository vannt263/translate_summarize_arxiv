{
  "article_text": [
    "isogeometric analysis has been introduced by the seminal paper @xcite as an extension of the classical finite element method .",
    "it is based on the idea of using the functions that are adopted for the geometry parametrization in computer aided design also to represent the numerical solution of the pde of interest .",
    "these functions are splines , non - uniform rational b - splines ( nurbs ) and extensions .",
    "many papers have demonstrated the advantage of isogeometric methods in various applications . for the interested reader ,",
    "we refer to the book @xcite .    one interesting feature of isogeometric methods is the possibility of using high - degree high - regularity splines as they deliver higher accuracy per degree - of - freedom in comparison to @xmath2 finite elements @xcite .",
    "however , the computational cost per degree - of - freedom is also higher for smooth splines , in currently available isogeometric codes . in practice , quadratic or cubic",
    "splines are preferred as they maximize computational efficiency .",
    "the computational cost of a solver for a linear pde problem is the sum of the cost of the formation of the system matrix and the cost of the solution of the linear system .",
    "the former is dominant in standard isogeometric codes already for low degree ( see e.g. @xcite ) .",
    "recent papers in the literature have addressed this important issue ( see e.g. @xcite ) .    in this paper",
    "we adopt the following definition of _ optimality _ : an algorithm for the formation of the matrix of a galerkin method is _ optimal _ if its computational cost is of the order of the number of non - zero entries of the matrix to be calculated .",
    "optimal algorithms are known in the case of @xmath2 finite elements ( see @xcite ) . however",
    ", this is still an open problem for smooth splines .",
    "we consider in this paper a @xmath3-dimensional scalar poisson model problem on a single - patch domain , and an isogeometric tensor - product space of degree @xmath0 and total dimension @xmath4 , with @xmath5 .",
    "for the sake of simplicity , we focus on the case of @xmath6 continuity , i.e. , the typical setting of the so - called @xmath1-method ( see e.g. @xcite ) .",
    "the resulting stiffness matrix has @xmath7 non - zero entries .",
    "therefore , we assume @xmath8 floating point is a ( reasonably small ) constant that does not depend on @xmath9 and @xmath0 , and is in general different at each occurrence . ] operations ( flops ) is the ( quasi)-optimal computational cost for the formation of the stiffness matrix .",
    "the algorithms currently used in isogeometric codes are suboptimal with respect to the degree @xmath0 , that is , their cost grows with respect to the degree @xmath0 faster than @xmath10 .",
    "the majority of isogeometric codes inherit a finite element architecture , which adopt an element - wise assembly loop with element - wise standard gaussian quadrature ( sgq ) .",
    "each local stiffness matrix has dimension @xmath11 and each entry is calculated by quadrature on @xmath12 gauss points .",
    "the total cost is @xmath13 flops , where @xmath14 is the number of elements and , for the @xmath1-method , @xmath15 .",
    "the standard way to reduce the cost is to reduce the number of quadrature points , for example by _ reduced gaussian _",
    "@xcite ( eventually corrected by variationally consistent constraints @xcite ) or _ generalised gaussian _ quadrature ( ggq ) @xcite . to clarify ggq ,",
    "consider the mass matrix @xmath16 whose entries , calculated on the parametric domain @xmath17^d$ ] , have the form @xmath18 where @xmath19 and @xmath20 are the tensor - product b - spline , and @xmath21 is a coefficient that incorporated the determinant jacobian of the geometry mapping and other possible non - tensor product factors .",
    "the work @xcite has explored the possibility of constructing and using ggq quadrature of the kind @xmath22 where the quadrature weights @xmath23 and points @xmath24 of the quadrature rule @xmath25 fulfil the exactness conditions @xmath26 here @xmath27 is the b - spline basis of degree @xmath28 and continuity @xmath6 .",
    "exact integration of product of a pair of @xmath0 degree splines @xmath29 is then guaranteed by . since the @xmath23 and @xmath24 are not known analytically , they need to be computed numerically as solution of the global non - linear problem , see @xcite , and the recent paper @xcite where the problem is effectively solved by a newton method with continuation",
    ". the paper @xcite uses local exactness conditions instead of .",
    "the number of conditions in is @xmath30 , dropping the lower order terms , and therefore ggq is expected to use about @xmath31 quadrature points , with a saving of a factor @xmath32 with respect to sgq .",
    "the number of quadrature points is not the only issue to consider here , and indeed the element - wise assembling loop has a relevant role as well . on one hand",
    ", it allows the reuse of finite element available routines , which is a clear advantage as it greatly simplifies code development . on the other hand , it is intrinsically not optimal , as each elemental stiffness matrix has size @xmath12 and therefore the total computational cost is bounded from below by @xmath33 .",
    "this ideal threshold is approached by _ sum - factorization _ , that is , by arranging the computations in a way that exploits the tensor - product structure of multivariate spline , with a cost of @xmath34 flops , see @xcite .",
    "further cost reduction is possible with a change of paradigm from element - wise assembly .",
    "this has been explored in some recent papers . in @xcite",
    "the integrand factor due to geometry and pde coefficients is interpolated on the space of splines shape functions on a uniform knot vector , the same space where the approximation is considered , while the integrals arising are pre - computed in exact manner .",
    "the final cost of assembly in this case is @xmath35 .",
    "another approach has been proposed in @xcite where the stiffness matrix is approximated by a low - rank sum of @xmath36 kronecker matrices that can be efficiently formed thanks to their structure .",
    "this is a promising approach with computational cost of @xmath37 flops .",
    "we propose in this paper a new algorithm which does not use the element - wise assembling loop .",
    "instead , we loop over the matrix rows and we use a specifically designed _ weighted quadrature _ ( wq ) rule for each row . in particular , the quadrature rule for the @xmath38-th row of @xmath39 is as follows : @xmath40 unlike , in the right hand side of the integrand function is @xmath41 since the test function is incorporated into the integral weight ( measure ) @xmath42 .",
    "the price to pay is that the quadrature weights depend on @xmath38 , while we select global quadrature points as suitable interpolation points that do not depend on @xmath38 .",
    "again , the quadrature weights are not known analytically and need to be computed numerically as solution of the exactness conditions @xmath43 however , the exactness conditions are linear with respect to the weights .",
    "furthermore , is a local problem as the weights outside @xmath44 can be set to zero a priori .",
    "the knot vectors do not need to be uniform with this approach .",
    "the number of exactness conditions of is @xmath45 .",
    "this is lower than the number of conditions of , which is @xmath46 .",
    "hence , the main advantage of the wq with respect to ggq is that that the former requires significantly fewer quadrature points . in the case of maximum regularity",
    "only @xmath47 points are needed in each direction sufficiently far away from the boundary , while @xmath48 points are taken on boundary knot - spans along directions that end on the boundary . adopting sum - factorization ( see @xcite ) , the proposed algorithm has a total computational cost of @xmath49 flops .    in our numerical benchmarking ,",
    "performed in matlab , we have compared the standard geopdes 3.0 ( see @xcite ) mass matrix formation , based on element - loop sgq , with our row - loop wq - based algorithm , showing the impressive advantage . wq speedup is more than a factor of four for quadratics and rapidly grows with the degree @xmath0 .",
    "for example , the mass matrix on a @xmath50 elements grid is calculated in about 62 hours vs 27 seconds for degree @xmath51 . for high @xmath0 ,",
    "the asymptotic growth of the computational time is slower than the estimated cost from flops counting : for all degrees of practical interest the growth we have measured is at most @xmath52 , that is , optimal .",
    "this is due to the fact that the memory operations dominate : in particular we have verified that the matrix formation time with our implementation is mainly used in allocation ( matlab s ` sparse ` call ) and memory write at least for sufficiently high degree @xmath0 .",
    "the wq we propose is designed in order to fit into the mathematical theory that guarantees optimal order of convergence of the method .",
    "this theory is based on the strang lemma @xcite .",
    "we do not enter into this topic , which is technical , and postpone it to a further work . in this paper",
    "we give numerical evidence of optimal convergence on a simple 1d benchmark .",
    "we also do not investigate parallelisation in this paper , however we think the proposed algorithm is well suited for a parallel implementation since each matrix row is calculated independently , which should alleviate the race condition of typical finite element element - wise assembly ( see @xcite for details ) .    the outline of the paper is as follows . in section 2",
    ", we present the idea of the wq rules for univariate b - splines . in section 3",
    ", we briefly discuss the use of isogeometric analysis on a model problem , and fix the notation for the following sections . in section 4 , we extend the construction of wq rules to the multivariate case ; a pseudo - code is presented in section 5 , where the computational cost is also discussed . in section 6 , we give details on the application of the wq rules for the formation of the mass matrix . in section 7",
    "we test the procedure : a simple 1d test is performed in order to confirm accuracy and tests are presented in order to compare time needed for the formation of mass matrices in 3d .",
    "a complete benchmarking of the proposed procedure is beyond the scope of the present paper and will be the subject of a forthcoming paper .",
    "finally , in section 8 we draw conclusions .",
    "assume we want to compute integrals of the kind : @xmath53 where @xmath54 are @xmath0-degree univariate b - spline basis functions defined on the parametric patch @xmath55 $ ] .",
    "we denote by @xmath56 the knot vector of distinct knots that define the univariate b - splines @xmath57 .",
    "moreover we define _ knot - spans _ as the intervals @xmath58 , k=1,\\dots , n_{\\mathsf{el}}$ ] , where @xmath59 .",
    "the knot vector @xmath60 that defines the univariate b - splines contains knots with repetitions depending on the regularity : if a knot @xmath61 has multiplicity @xmath62 then the univariate spline is @xmath63 continuous at @xmath64 . for simplicity , we consider @xmath65 throughout this paper .",
    "though it is not difficult to consider arbitrary @xmath66 , the proposed strategy takes advantage of high regularity . in order to focus on the relevant properties ,",
    "we restrict our attention in this section to the uniform knot - spans , i.e. @xmath67 @xmath68 . moreover , we do not consider boundary functions , so we assume that the knot vector is periodic . being in the context of galerkin method ,",
    "@xmath69 is denoted as a test function and @xmath70 as a trial function .",
    "we are interested in a fixed point quadrature rule . in the lowest degree case , @xmath71",
    ", exact integration is performed by a composite cavalieri - simpson rule ( note that in this case this quadrature is also the gauss - lobatto @xmath72 points rule ) : @xmath73 where @xmath74 are the quadrature points and @xmath75 the relative weights , see figure [ fig : wq1d ] . in the above hypotheses",
    "the points @xmath74 are the knots and the midpoints of the knot - spans and @xmath76 on knots and @xmath77 on midpoints .",
    "unbalancing the role of the test and the trial factors in , we can see it as a weighted quadrature : @xmath78 where @xmath79 and @xmath80 . because of the local support of the function @xmath81 only in three points the quadrature @xmath82 is non - zero and the weights are equal to @xmath83 see figure [ fig : wq1d ] .",
    "if we go to higher degree , we need more quadrature points in . for @xmath0-degree splines",
    "the integrand @xmath84 is a piecewise polynomial of degree @xmath28 and an element - wise integration requires @xmath85 equispaced points , or @xmath48 gauss points , or about @xmath86 points with generalized gaussian integration ( see @xcite ) . on the other hand",
    ", we can generalize to higher degree still using as quadrature points only the knots and midpoints of the knot spans .",
    "indeed this choice ensures that , for each basis function @xmath81 , @xmath87 , there are @xmath85 `` active '' quadrature points where @xmath81 is nonzero .",
    "therefore we can compute the @xmath85 quadrature weights by imposing conditions for the @xmath85 b - splines @xmath88 that need to be exactly integrated .",
    "clearly , the advantage of the weighted quadrature approach is that its computational complexity , i.e. , the total number of quadrature points , is independent of @xmath0 .    .",
    "cavalieri - simpson quadrature rule ( on the left ) and it s interpretation as weighted quadrature ( on the right ) .",
    "the active points and weights for @xmath82 are highlighted . in this and the next figure we set @xmath89 so that the quadrature points coincide with the integers , being the knots and the midpoints of the knot - spans.,title=\"fig:\",scaledwidth=49.0% ] .",
    "cavalieri - simpson quadrature rule ( on the left ) and it s interpretation as weighted quadrature ( on the right ) .",
    "the active points and weights for @xmath82 are highlighted . in this and",
    "the next figure we set @xmath89 so that the quadrature points coincide with the integers , being the knots and the midpoints of the knot - spans.,title=\"fig:\",scaledwidth=49.0% ] +    for the sake of clarity , we first consider the case @xmath71 in detail .",
    "the exactness conditions are :    [ eq : int_1d_4 ] & _ 0 ^ 1 _ i ( ) _ i-1 ( ) d= h 6 =",
    "_ i^wq ( _ i-1 ) = 1 2 w_1,i^wq , + & _ 0 ^ 1 _ i ^2 ( ) d= = _ i^wq ( _ i ) = 1 2 w_1,i^wq + w_2,i^wq + 1 2 w_3,i^wq , + & _ 0 ^ 1 _ i ( ) _ i+1 ( ) d= h 6 = _ i^wq ( _ i+1 ) = 1 2 w_3,i^wq  .",
    "then it is easy to compute @xmath90 .    in the case @xmath91 ,",
    "five points are active and we have five exactness equations :    [ eq : int_1d_5 ] & _ 0 ^ 1 _ i ( ) _ i-2 ( ) d= = _ i^wq ( _ i-2 ) = 1 8 w_1,i^wq , + & _ 0 ^ 1 _ i ( ) _ i-1 ( ) d= = _ i^wq ( _ i-1 ) = 3 4 w_1,i^wq + 1 2 w_2,i^wq + 1 8 w_3,i^wq , + & _ 0 ^ 1 _ i ^2 ( ) d= = _ i^wq ( _ i ) = 1 8 w_1,i^wq + 1 2 w_2,i^wq + 3 4 w_3,i^wq + 1 2 w_4,i^wq + 1 8 w_5,i^wq , + & _ 0 ^ 1 _ i ( ) _ i+1 ( ) d= = _ i^wq ( _ i+1 ) = 1 8 w_3,i^wq + 1 2 w_4,i^wq + 3 4 w_5,i^wq , + & _ 0 ^ 1 _ i ( ) _ i+2 ( ) d= = _ i^wq ( _ i+2 ) = 1 8 w_5,i^wq  .    in the previous calculation we have used the usual properties of b - splines that can be found , e.g. , in ( * ? ? ? * section 4.4 ) .",
    "the system can be solved and leads to the following solution @xmath92 $ ] .",
    "when @xmath93 , the same approach gives @xmath94 $ ] .",
    "these computations are reported in figure [ fig : wq1d_2 ] .    in general case ( arbitrary degree and non - uniform spacing , boundary functions , lower regularity ... )",
    "the rule can be computed numerically as solution of a linear system , see section [ sect : pseudocodes ] .",
    "( upper left ) , @xmath93 ( upper right ) , @xmath95 ( lower left ) and @xmath96 ( lower right ) .",
    "interestingly , we see that the weights displace around the values of the basis function ( up to the scale factor @xmath97 , which in this case is simply 1 ) . in particular , this gives numerical evidence of the positivity of the weights , which in turn implies the stability of the rules .",
    ", title=\"fig:\",scaledwidth=49.0% ]   ( upper left ) , @xmath93 ( upper right ) , @xmath95 ( lower left ) and @xmath96 ( lower right ) .",
    "interestingly , we see that the weights displace around the values of the basis function ( up to the scale factor @xmath97 , which in this case is simply 1 ) . in particular , this gives numerical evidence of the positivity of the weights , which in turn implies the stability of the rules .",
    ", title=\"fig:\",scaledwidth=49.0% ] +   ( upper left ) , @xmath93 ( upper right ) , @xmath95 ( lower left ) and @xmath96 ( lower right ) .",
    "interestingly , we see that the weights displace around the values of the basis function ( up to the scale factor @xmath97 , which in this case is simply 1 ) . in particular , this gives numerical evidence of the positivity of the weights , which in turn implies the stability of the rules .",
    ", title=\"fig:\",scaledwidth=49.0% ]   ( upper left ) , @xmath93 ( upper right ) , @xmath95 ( lower left ) and @xmath96 ( lower right ) .",
    "interestingly , we see that the weights displace around the values of the basis function ( up to the scale factor @xmath97 , which in this case is simply 1 ) . in particular , this gives numerical evidence of the positivity of the weights , which in turn implies the stability of the rules .",
    ", title=\"fig:\",scaledwidth=49.0% ] +    given a weighted quadrature rule of the kind above , we are then interested in using it for the approximate calculation of integrals as :    @xmath98    for a non - constant function @xmath99 , is in general just an approximation .",
    "in particular , the symmetry of the integral is not preserved , that is @xmath100 is different from @xmath101 .",
    "consider , for example , the case @xmath93 derived above and apply the weighted quadrature rules to the linear function @xmath102 in the case @xmath103 . for simplicity",
    "we take @xmath89 so that the quadrature points are @xmath104 $ ] . then",
    ": @xmath105    a detailed mathematical analysis of the quadrature error of weighted quadrature is of key interest , especially in the context of isogeometric galerkin methods .",
    "this is however beyond the scope of this paper and for its importance deserves future work .",
    "we consider the model reaction - diffusion problem @xmath106 its galerkin approximation on a discrete space @xmath107 requires the formation of the stiffness matrix @xmath108 and mass matrix @xmath109 whose entries are @xmath110    @xmath111    @xmath112 and @xmath113 being two basis functions in @xmath107 .",
    "the dimension of the space @xmath107 is @xmath114 .",
    "non - constant coefficients could be included as well .    in the isogeometric framework",
    ", @xmath115 is given by a spline or nurbs parametrization .",
    "our notation follows ( * ? ? ?",
    "* section 4 ) and @xcite . for the sake of simplicity , we assume @xmath115 is given by a @xmath3-dimensional single patch spline representation , then it is of the form : @xmath116 where @xmath117 are the control points and @xmath118    we denote by @xmath119 the knot vector of distinct knots that define the univariate b - splines @xmath120 along the @xmath121-th direction . for each direction",
    "we have _ knot - spans _",
    "as the intervals @xmath122 , k=1,\\dots , n_{\\mathsf{el},l}$ ] , where @xmath123 . by cartesian product ,",
    "they form a mesh of @xmath124 _ elements _ on @xmath125 .",
    "the knot vector , with possibly repeated knots , that defines the univariate b - spline space in the @xmath126th direction is denoted as @xmath127 as in section [ sect : weighted ] , we restrict to the case of maximum regularity and allow repeated knots only at the endpoints of the open knot vector .    the number of knots in each knot vector @xmath128 is related to the number of degrees of freedom by @xmath129 .",
    "no assumptions are made on the length of the elements . in our flops counts",
    ", we always assume @xmath130 , and then @xmath131 .",
    "the multivariate b - splines are tensor - product of univariate b - splines : @xmath132    above , @xmath133 is a multi - index that , with abuse of notation , is occasionally as a scalar index , as in @xmath134 , with the relation @xmath135 .",
    "we have @xmath136 .",
    "based on the isogeometric / isoparametric paradigm , the basis functions @xmath112 used in - are defined as @xmath137 ; integrals are computed by change of variable .",
    "summarizing , we are interested in the computation of after change of variable , @xmath138 where : @xmath139 for notational convenience we write : @xmath140 in more general cases , the factor @xmath21 incorporates the coefficient of the equation and , for nurbs functions , the polynomial denominator . similarly for the stiffness matrix @xmath141",
    "we have : @xmath142 \\text{det } { \\hat{\\bm{d } } \\bm{f}}\\ , \\right )   \\hat{\\nabla } \\hat{b}_{{\\boldsymbol{j } } } \\ ,   d{\\boldsymbol{\\zeta}}\\ \\end{aligned}\\ ] ] which we write in compact form : @xmath143 here we have denoted by @xmath144 the following matrix : @xmath145 \\ ,   \\text{det } { \\hat{\\bm{d } } \\bm{f}}({\\boldsymbol{\\zeta } } ) \\bigr\\ } _",
    "{ l , m } .\\end{aligned}\\ ] ]    the number of non - zero elements @xmath146 of @xmath39 and @xmath147 ( the same for simplicity ) depends on the polynomial degree @xmath0 and the required regularity @xmath66 . we introduce the following sets , where the support is considered an open set : @xmath148\\chi_{k-1 } , \\chi_{k } [   \\subset \\mbox{supp}\\left(\\hat{b}_{i_l } \\right ) \\right\\}\\,,\\\\     \\mathcal{i}_{l , i_l } = \\left\\{j_l \\in \\{1,\\dots , n _ { \\mathsf{dof},l}\\ } \\ ,    s.t.\\ ,   \\hat{b}_{i_l}\\cdot \\hat{b}_{j_l } \\neq 0   \\right\\ } \\ ; \\end{gathered}\\ ] ] and the related multi - indexes as : @xmath149 we have @xmath150 and @xmath151 .",
    "in particular , with maximal regularity in the case @xmath152 one has @xmath153 .",
    "consider the calculation of the mass matrix . the first step is to write the integral in a nested way , as done in @xcite :    @xmath154 \\cdots   d \\zeta_2\\right ] d \\zeta_1   \\notag\\end{gathered}\\ ] ]",
    "our idea is to isolate the _ test function _",
    "@xmath155 univariate factors in each univariate integral and to consider it as a weight for the construction of the weighted quadrature ( wq ) rule .",
    "this leads to a quadrature rule for each @xmath156 that is : @xmath157 notice that we drop from now on the label wq used in the introduction in order to simplify notation .",
    "the key ingredients for the construction of the quadrature rules that preserve the optimal approximation properties are the exactness requirements . roughly speaking",
    ", exactness means that in   we have @xmath158 whenever @xmath21 is a constant coefficient .",
    "when the stiffness term is considered , also terms with derivatives have to be considered .",
    "we introduce the notation : @xmath159    for each integral in we define a quadrature rule : we look for    * points @xmath160 with @xmath161 , with @xmath162 is @xmath163 ; * for each index @xmath164 , four quadrature rules such that : @xmath165 fulfilling the exactness requirement : @xmath166    for stability we also require that the quadrature rules @xmath167 have support included in the support of @xmath155 , that is @xmath168 where @xmath169 ; recall that here the support of a function is considered an open set .",
    "correspondingly , we introduce the set of multi - indexes @xmath170 .",
    "once the points @xmath171 are fixed , the quadrature rules have to be determined by the exactness requirements , that are a system of linear equations of the unknown weights ( each of the ) .",
    "for that we require @xmath172 see remark [ rem : well - posedness - for - weights ] for a discussion on the well - posedness of the linear systems for the weights .    , @xmath173 , @xmath174 , in the second line the case @xmath175 . on the left panel the proposed wq rule , on the right the sgq rule . ,",
    "title=\"fig:\",scaledwidth=45.0% ] , @xmath173 , @xmath174 , in the second line the case @xmath175 . on the left panel",
    "the proposed wq rule , on the right the sgq rule .",
    ", title=\"fig:\",scaledwidth=45.0% ] + , @xmath173 , @xmath174 , in the second line the case @xmath175 . on the left panel",
    "the proposed wq rule , on the right the sgq rule .",
    ", title=\"fig:\",scaledwidth=45.0% ] , @xmath173 , @xmath174 , in the second line the case @xmath175 . on the left panel",
    "the proposed wq rule , on the right the sgq rule . , title=\"fig:\",scaledwidth=45.0% ]    [ rem : points ] the construction of a global grid of quadrature points is done in order to save computations . for the case of maximum @xmath6 regularity considered here , our choice for quadrature points is endpoints ( knots ) and midpoints of all internal knot - spans , while for the boundary knot - spans ( i.e. those that are adjacent to the boundary of the parameter domain @xmath176 ) we take @xmath48 equally spaced points . globally @xmath177 considering only the dominant term ( remember that @xmath178 ) . in figure",
    "[ fig : nodes ] we plot the quadrature points grid , and a comparison is made with respect to element - by - element standard gaussian quadrature ( sgq ) points .",
    "[ rem : well - posedness - for - weights ] given the quadrature points , the quadrature weights are selected in order to fulfil . when @xmath179 the quadrature weights are not uniquely given from  and are selected by a minimum norm condition . in all cases with our choice of quadrature points and thanks to the schoenberg - whitney interpolation theorem ( * ? ? ?",
    "* theorem 2 xiii ) we can guarantee that the quadrature weights fulfilling the above conditions exist .",
    "[ rem : alt - quad - points ] if there is no need for a global grid of quadrature points ( e.g. , the cost of calculation of the coefficients is negligible ) , it is possible to have quadrature points that depend on the index @xmath156 , as for the weights .",
    "then , one can construct weighted gaussian quadrature rules ( see e.g. @xcite ) in order to minimize the number of quadrature points associated to each row of the stiffness matrix .",
    "in order to simplify the flops count , we assume @xmath180 and @xmath181 . we then have @xmath182 , @xmath183 , etc .",
    "we consider the case of maximum regularity @xmath65 and @xmath184 that implies @xmath185 .",
    "we recall that : @xmath186 with our choice for the quadrature points , the previous two imply @xmath187 .",
    "we first collect all the initialisations needed in algorithm [ algo_iniz ] .",
    "it is not necessary to precompute these quantities -and in most architectures access to stored data is costly- but this used here for flops evaluation .",
    "evaluate @xmath188 on points @xmath189    then we can count operations in algorithm [ algo_iniz ] :    1 .",
    "evaluations of b - splines reported on lines 34 can be done in @xmath190 flops each .",
    "they are repeated @xmath191 times so that this part costs @xmath192 flops .",
    "the calculation of integrals on line 8 needs to be done in an exact manner .",
    "the calculation of the exact integral of products of b - splines has a vast literature @xcite , however , closed forms are available only in some particular cases . for this reason we consider here the usual element - wise gaussian quadrature .",
    "the evaluation of b - splines and their derivatives cost , as reported before , @xmath190 flops for each point . counting all gaussian point ,",
    "the cost is @xmath193 evaluations of each of the @xmath194 univariate basis functions , thus costs @xmath195 flops . + the computation of each of the integrals has the cost of a summation on @xmath196 terms ; and the four calculations are done @xmath197 times so that this costs @xmath198 flops .",
    "3 .   the evaluations of the @xmath199 functions @xmath200 and @xmath21 on lines 12 and 15 have to be performed at the @xmath201 quadrature points .",
    "the actual cost depends on the evaluation cost of @xmath200 and @xmath21 . if these coefficients are obtained by @xmath202 linear combinations of b - spline values ( or derivatives ) , and each multivariate b - spline value is computed from multiplications of univariate b - spline values , the total cost is @xmath203 per quadrature point and in total @xmath204 flops .",
    "the leading cost of algorithm 1 for @xmath205 is @xmath206 .    in algorithm [ algo_quad ]",
    "we summarize the operations needed for the construction of the univariate wq rules .",
    "each calculation in lines 36 consists in the resolution of a linear system of dimension @xmath207 that is possibly under - determined .",
    "the cost of these computations in any case negligible since it is proportional to @xmath208 .",
    "when all the quadrature rules are available we can write the computation of the approximate mass matrix following . similar formulae and algorithms can be written for the stiffness matrix starting from equation .",
    "the mass matrix formation algorithm is mainly a loop over all rows @xmath38 , for each @xmath38 we consider the calculation of @xmath209 the computational cost of is minimised by a sum factorization approach , which is explained below .",
    "if we substitute into we obtain the following sequence of nested summations :    @xmath210    to write in a more compact form , we introduce the notion of matrix - tensor product @xcite .",
    "let @xmath211 be a @xmath212dimensional tensor , and let @xmath213 .",
    "the @xmath214mode product of @xmath215 with a matrix @xmath216 , denoted with @xmath217 , is a tensor of dimension @xmath218 , with components @xmath219 we emphasize that such computation requires @xmath220 flops .    for @xmath221 and @xmath222",
    "we define the matrices @xmath223 where @xmath224 denotes the diagonal matrix obtained by the vector @xmath225 .",
    "we also define , for each index @xmath38 , the @xmath212dimensional tensor @xmath226 using the above notations , we have    @xmath227    since with our choice of the quadrature points @xmath228 and @xmath229 are both @xmath230 , the computational cost associated with is @xmath231 flops .",
    "note that @xmath232 includes all the nonzeros entries of the @xmath233th row of @xmath234 . hence if we compute it for each @xmath235 the total cost amounts to @xmath236 flops .",
    "this approach is summarized in algorithm [ algo_mass ] .",
    "we remark that writing the sums in in terms of matrix - tensor products as in is very useful from an implementation viewpoint .",
    "indeed , in interpreted languages like matlab ( which is the one used in the experiments of the next section ) , it is crucial to avoid loops and vectorize ( in our case , tensorize ) the operations , in order to obtain an efficient implementation of an algorithm ; see also the discussion in @xcite .",
    "in particular , each matrix - tensor product in is computed via a simple matrix - matrix product , which is a blas level 3 operation and typically yields high efficiency on modern computers .",
    "in this section , in order to evaluate numerically the behavior of the proposed procedure we present some numerical tests .",
    "first , in section [ sect5.1 ] we consider the solution of a 1d problem where we see that the application of our row - loop wq - based algorithm leads to optimal order of convergence .",
    "then , in section [ sect5.2 ] we measure the performance of the algorithm .",
    "we consider there the formation of mass matrices in 3d .",
    "the results for all cases refers to a linux workstation equipped with intel i7 - 5820k processors running at 3.30ghz , and with 64 gb of ram .",
    "the row - loop wq - based algorithm is potentially better suited for a parallel implementation than the standart element - wise sgq - based algorithm , however we benchmark here sequential execution and use only one core for the simulations .      as a test with known solution we consider the following : @xmath237 \\\\ u(0 )",
    "= 0 , u(\\pi/6)= \\mbox{exp } ( \\pi/3 ) /2 &   \\end{aligned } \\right.\\ ] ] we compare the numerical solution in the parametric domain , using the geometric transformation @xmath238 , with the exact one @xmath239 .",
    "then we calculate point - wise absolute error , integral error and energy error - namely @xmath240 and @xmath241 norms - with varying spline degree @xmath0 .",
    "figure [ figure:1 ] illustrates that the construction of the matrices with the proposed procedure does not effect the overall convergence properties of the galerkin method , as it can be seen by comparing the convergence curves with those obtained using gaussian quadrature .     and @xmath241 norm for the solution of problem by galerkin based isogeometric analysis with wq ( algorithm [ algo_iniz][algo_mass ] ) for various degrees @xmath0 in dotted lines .",
    "as reference , the solid lines refer to the same calculation made with element - wise sgq .",
    "optimal convergence rate is achieved in all cases .",
    "sgq is sligtly more accurate for even degrees @xmath242 in @xmath243 and @xmath244 norms .",
    ", title=\"fig:\",scaledwidth=49.0% ]   and @xmath241 norm for the solution of problem by galerkin based isogeometric analysis with wq ( algorithm [ algo_iniz][algo_mass ] ) for various degrees @xmath0 in dotted lines . as reference",
    ", the solid lines refer to the same calculation made with element - wise sgq .",
    "optimal convergence rate is achieved in all cases .",
    "sgq is sligtly more accurate for even degrees @xmath242 in @xmath243 and @xmath244 norms .",
    ", title=\"fig:\",scaledwidth=49.0% ] +   and @xmath241 norm for the solution of problem by galerkin based isogeometric analysis with wq ( algorithm [ algo_iniz][algo_mass ] ) for various degrees @xmath0 in dotted lines . as reference",
    ", the solid lines refer to the same calculation made with element - wise sgq .",
    "optimal convergence rate is achieved in all cases .",
    "sgq is sligtly more accurate for even degrees @xmath242 in @xmath243 and @xmath244 norms . , title=\"fig:\",scaledwidth=49.0% ] +    [ rem : symmetry ] as already noted in section [ sect : weighted ]",
    ", wq does not preserve symmetry , that is in general @xmath245 even if @xmath246 .",
    "the lack of symmetry did not cause any deterioration of the order of convergence in energy and lower - order norms in our numerical benchmarking , see figure [ figure:1 ] .",
    "this is an important and interesting behaviour that deserves further study .",
    "we remark that the lack of symmetry occurs also for collocation isogeometric schemes @xcite , where however convergence rates are suboptimal .      in this section",
    "we report cpu time results for the formation on a single patch domain of mass matrices .",
    "comparison is made with geopdes , the optimized but sgq - based matlab isogeometric library developed by rafael vzquez , see @xcite . in figure [ figure:2 ] we plot the time needed for the mass matrix formation up to degree @xmath51 with @xmath247 .",
    "the tests confirm the superior performance of the proposed row - loop wq - based algorithm vs sgq . in the case @xmath51",
    "geopdes takes more than 62 hours to form the mass matrix while the proposed algorithm needs only 27 sec , so that the use high degrees is possible with wq .",
    "clearly we exploit sparsity in our matlab implementation : we compute all the nonzero entries of @xmath234 , the corresponding row and column indices and then call the matlab sparse function , that uses a compressed sparse column format .     elements .",
    "the comparison is between the wq approach proposed ( algorithm [ algo_iniz][algo_mass ] ) and sgq as implemented in geopdes 3.0 .",
    ", scaledwidth=60.0% ]    in the last test , we experimentally study the growth order of the computational effort needed to form @xmath234 , and we highlight which parts of the code mainly contributes to this effort .    in figure [ figure:3 ] , we plot in a log - log scale the total computation time spent by algorithm [ algo_iniz][algo_mass ] for @xmath248 elements and spline degree up to @xmath249 .",
    "we also plot the time spent in the computations of the matrix - tensor products ( i.e. , line 5 of algorithm [ algo_mass ] , which is the dominant step with respect to the number of flops of the whole procedure ) , and the time used by the matlab function sparse , which is responsible of allocating the memory for @xmath234 and copying the entries in the sparse matrix data structure .",
    "these timings were obtained using the profiler of matlab .",
    "if we consider the products time , we can see that the its growth relative to @xmath0 is significantly milder than what is indicated by the theoretical flop counting , i.e. , @xmath250 .",
    "this is probably related to the small dimension of the matrices and tensors involved . on the other hand ,",
    "the times spent by the sparse function is clearly proportional to @xmath251 , as highlighted in the plot by a reference triangle with slope @xmath72 .",
    "this is expected , as the number of nonzero entries of @xmath234 is @xmath252 .",
    "what is surprising is that , for @xmath253 the time of the sparse call dominates the total time of the algorithm .",
    "this indicates that the our approach is in practice giving the best possible performance at least for degree high enough , since the sparse call is unavoidable and well optimised in matlab .",
    "furthermore , the computing time depends linearly on @xmath4 , as expected , but for brevity we do not show the results .    , @xmath254 .",
    "reference slope is @xmath251 .",
    "along with the total time , we show the time spent by the product and by the function sparse , which represent the single most relevant computational efforts of our code .",
    "other timings , which become negligible for large @xmath0 , are not shown .",
    ", scaledwidth=60.0% ]",
    "the proposed algorithm for the formation of isogeometric galerkin matrices is based on three concepts .",
    "first , we use a row loop instead of an element loop .",
    "second , we use wq that gives significant savings in quadrature points .",
    "third , we exploit the tensor - product structure of the b - spline basis functions , adopting an optimized sum - factorization implementation as in @xcite .",
    "our approach also incorporates an idea of a previous work : the numerical computation of univariate quadrature rules as in @xcite and following papers . in the present work",
    ", however , we fix a priori the quadrature points so that the weights are given by solving a linear problem , and we use sum - factorization cycling on rows and not on elements .",
    "the result is a significant gain in performance compared to standard approaches , for all polynomial degrees but especially for high degree .",
    "for example , in the numerical tests that we present , for @xmath175 the time of formation of a mass matrix is seconds vs hours ( comparison made with geopdes 3.0 , which has a well optimised but standard design , see @xcite ) , where in our algorithm the computational time is dominated by the unavoidable matlab sparse function call .",
    "these results pave the way to the practical use of high - degree @xmath1-refinement .",
    "moreover they relight the interest for a comparison between galerkin and collocation formulation , that is nowadays preferred for high - degree isogeometric simulations , see @xcite . curiously , a galerkin formulation with wq is closer to collocation , from the viewpoint of the computational cost and since both do not preserve symmetry , i.e. the matrices formed from symmetric differential operators are not symmetric",
    ". however wq should preserve the other main properties of galerkin formulations .",
    "our work will continue in three different directions .",
    "we need to develop a full mathematical analysis of this approach .",
    "we will work on a full implementation within geopdes .",
    "finally , we will develop the proposed approach in the direction of non - tensor product spaces ( t - splines , hierarchical splines , etc . ) , where we expect that some significant advantages of our approach will be maintained .",
    "the authors would like to thank rafael vzquez for fruitful discussions on the topic of the paper .",
    "francesco calabr was partially supported by indam , through gncs research projects .",
    "giancarlo sangalli and mattia tani were partially supported by the european research council through the fp7 erc consolidator grant n.616563 _ higeom _ , and by the italian miur through the prin `` metodologie innovative nella modellistica differenziale numerica '' . this support is gratefully acknowledged .",
    "99    c.  adam , t.j.r .",
    "hughes , s.  bouabdallah , m.  zarroug , and h.  maitournam , _ selective and reduced numerical integrations for nurbs - based isogeometric analysis _ , computer methods in applied mechanics and engineering * 284 * ( 2015 ) , 732761 .",
    "m.  ainsworth , o.  davydov , and l.l .",
    "schumaker , _ bernstein - bzier finite elements on tetrahedral hexahedral pyramidal partitions _ , computer methods in applied mechanics and engineering * 304 * ( 2016 ) , 140  170 .",
    "r.  ait - haddou , m.  barto , and v.m .",
    "calo , _ explicit gaussian quadrature rules for @xmath255 cubic splines with symmetrically stretched knot sequences _ , journal of computational and applied mathematics * 290 * ( 2015 ) , 543552 .",
    "p.  antolin , a.  buffa , f.  calabr , m.  martinelli , and g.  sangalli , _ efficient matrix computation for tensor - product isogeometric analysis : the use of sum factorization _ ,",
    "computer methods in applied mechanics and engineering * 285 * ( 2015 ) , 817828 .    f.  auricchio , f.  calabr , t.j.r .",
    "hughes , a.  reali , and g.  sangalli , _ a simple algorithm for obtaining nearly optimal quadrature rules for nurbs - based isogeometric analysis _ , computer methods in applied mechanics and engineering * 249 * ( 2012 ) , 1527 .",
    "m.  barto and v.m .",
    "calo , _ optimal quadrature rules for odd - degree spline spaces and their application to tensor - product - based isogeometric analysis _ , computer methods in applied mechanics and engineering * 305 * ( 2016 ) , 217240 .",
    "y.  bazilevs , l.  beira  da veiga , j.a .",
    "cottrell , t.j.r .",
    "hughes , and g.  sangalli , _ isogeometric analysis : approximation , stability and error estimates for h - refined meshes _",
    ", mathematical models and methods in applied sciences * 16 * ( 2006 ) , no .  07 , 10311090 .",
    "hughes , j.a .",
    "cottrell , and y.  bazilevs , _ isogeometric analysis : cad , finite elements , nurbs , exact geometry and mesh refinement _ , computer methods in applied mechanics and engineering * 194 * ( 2005 ) , no .  39 , 41354195 .        a.  karatarakis , p.  karakitsios , and m.  papadrakakis , _ gpu accelerated computation of the isogeometric analysis stiffness matrix _ , computer methods in applied mechanics and engineering * 269 * ( 2014 ) , 334355 .",
    "d.  schillinger , j.  a evans , a.  reali , m.a .",
    "scott , and t.j.r .",
    "hughes , _ isogeometric collocation : cost comparison with galerkin methods and extension to adaptive hierarchical nurbs discretizations _ , computer methods in applied mechanics and engineering * 267 * ( 2013 ) , 170232 .",
    "d.  schillinger , s.j .",
    "hossain , and t.j.r .",
    "hughes , _ reduced bzier element quadrature rules for quadratic and cubic splines in isogeometric analysis _ ,",
    "computer methods in applied mechanics and engineering * 277 * ( 2014 ) , 145 ."
  ],
  "abstract_text": [
    "<S> in this paper we propose an algorithm for the formation of matrices of isogeometric galerkin methods . </S>",
    "<S> the algorithm is based on three ideas . </S>",
    "<S> the first is that we perform the external loop over the rows of the matrix . </S>",
    "<S> the second is that we calculate the row entries by weighted quadrature . </S>",
    "<S> the third is that we exploit the ( local ) tensor product structure of the basis functions . </S>",
    "<S> while all ingredients have a fundamental role for computational efficiency , the major conceptual change of paradigm with respect to the standard implementation is the idea of using weighted quadrature : the test function is incorporated in the integration weight while the trial function , the geometry parametrization and the pdes coefficients form the integrand function . </S>",
    "<S> this approach is very effective in reducing the computational cost , while maintaining the optimal order of approximation of the method . </S>",
    "<S> analysis of the cost is confirmed by numerical testing , where we show that , for @xmath0 large enough , the time required by the floating point operations is less than the time spent in unavoidable memory operations ( the sparse matrix allocation and memory write ) . </S>",
    "<S> the proposed algorithm allows significant time saving when assembling isogeometric galerkin matrices for all the degrees of the test spline space and paves the way for a use of high - degree @xmath1-refinement in isogeometric analysis .    </S>",
    "<S> weighted quadrature , isogeometric analysis , splines , @xmath1-refinement . </S>"
  ]
}