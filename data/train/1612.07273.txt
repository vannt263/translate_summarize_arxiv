{
  "article_text": [
    "as common constructions in the theory of data types and programming language semantics become better understood , there is a natural tendency toward generality .",
    "one desires to isolate common underlying principles , to unify related notions in a common framework , and to provide powerful abstract tools for reasoning and understanding .",
    "a good example of one successful such enterprise is the use of monads in functional and logic programming @xcite .",
    "monads provide a clean way to combine modules or extend functionality of programming languages or data structures with new features such as continuations , state , and concurrency @xcite .",
    "they have been applied to parsing and type checking @xcite , semantics of nondeterministic and probabilistic computation @xcite , and unification in logic programming @xcite .",
    "unfortunately , greater abstraction is often accompanied by reduced accessibility .",
    "many abstract constructions , although well motivated by applications , may at times be difficult to navigate when presented in more abstract form . in particular , reasoning about the basic properties of monads  such as _ monad composition",
    ", the construction that underlies many of the applications above  relies on the combinatorial manipulation of functors and natural transformations .",
    "verification often requires a complicated process of arrow chasing in large diagrams .",
    "specialized verification tasks such as the following example from @xcite are not uncommon .",
    "\\(00 ) @xmath2 ; ( 01 ) [ right of=00 , node distance=35 mm ] @xmath3 ; ( 02 ) [ right of=01 , node distance=25 mm ] @xmath4 ; ( 10 ) [ below of=00 , node distance=1.3 cm ] @xmath5 ; ( 11 ) [ right of=10 , node distance=35 mm ] @xmath6 ; ( 12 ) [ right of=11 , node distance=25 mm ] @xmath7 ; ( 20 ) [ below of=10 , node distance=1.3 cm ] @xmath4 ; ( 21 ) [ right of=20 , node distance=35 mm ] @xmath7 ; ( 22 ) [ right of=21 , node distance=25 mm ] @xmath8 ; ( 00 ) edge node @xmath9 ( 01 ) edge node[swap ] @xmath10 ( 10 ) ; ( 01 ) edge node @xmath11 ( 02 ) edge node[swap ] @xmath12 ( 11 ) ; ( 02 ) edge node @xmath13 ( 12 ) ; ( 10 ) edge node[swap ] @xmath14 ( 11 ) edge node[swap ] @xmath15 ( 20 ) ; ( 11 ) edge node[swap ] @xmath16 ( 12 ) edge node[swap ] @xmath17 ( 21 ) ; ( 12 ) edge node @xmath18 ( 22 ) ; ( 20 ) edge node[swap ] @xmath13 ( 21 ) ; ( 21 ) edge node[swap ] @xmath18 ( 22 ) ;    there are several general accounts of monad composition in the literature @xcite .",
    "in particular , eklund et al .",
    "@xcite make note of the difficulty of monad composition proofs and present a graphical technique aimed at simplifying the process .",
    "their technique provides a pictorial representation of various constructions .    in this note",
    "we take a different approach involving string rewriting .",
    "we show that a given tuple @xmath0 is a monad if and only if @xmath1 is a terminal object in a certain category whose objects are strings and whose morphisms are rewrite rules , and the fact that @xmath1 is terminal can be established by proving confluence of the string rewriting system .",
    "we illustrate the technique on the monad composition problem studied by eklund et al .",
    "we also give a characterization of adjoint functors in terms of rewrite categories .",
    "let @xmath19 be categories . recall that a _ natural transformation _ @xmath20 between functors @xmath21 is a collection of morphisms @xmath22 of @xmath23 , one for each object @xmath24 of @xmath25 , such that for any morphism @xmath26 of @xmath25 , the following diagram commutes : @xmath27     \\scriptsize     \\node ( 00 ) { $ fa$ } ;     \\node ( 01 ) [ right of=00 ] { $ fb$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ ga$ } ;     \\node ( 11 ) [ right of=10 ] { $ gb$ } ;     \\path ( 00 ) edge node { $ fh$ } ( 01 )           edge node[swap ] { $ { \\varphi}_a$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ gh$ } ( 11 ) ;     \\path ( 01 ) edge node { $ { \\varphi}_b$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : nattrans}\\ ] ] categories , functors , and natural transformations form a 2-category @xmath28  in which the 0-cells ( objects ) are the categories , the 1-cells ( morphisms ) are the functors , and the 2-cells ( morphisms of morphisms ) are the natural transformations .    in a general 2-category , composition of 1-cells and composition of 2-cells",
    "are called _ horizontal _ and _ vertical composition _ , respectively , and are often denoted @xmath29 and @xmath30 , respectively ; but we will usually write @xmath31 for @xmath30 and omit the @xmath29 altogether . horizontal composition also acts on 2-cells and satisfies the property : if @xmath32 and @xmath33 are 1-cells and @xmath34 , @xmath35 , @xmath36 , and @xmath37 are 2-cells , then @xmath38    a special case of the action of horizontal composition on 2-cells is the following . if @xmath39 , @xmath21 , and @xmath40 are 1-cells and @xmath20 is a 2-cell , there is a 2-cell @xmath41 obtained from the horizontal composition of @xmath42 with the identities @xmath43 on the left and @xmath44 on the right .",
    "it is helpful to think of this operation as a kind of scalar multiplication .",
    "it satisfies the following properties : @xmath45 thus we can write @xmath46 and @xmath47 without ambiguity .    in the 2-category @xmath28 , if @xmath48 and @xmath1 are functors and @xmath42 is a natural transformation with components @xmath49 , then @xmath50 is the natural transformation with components @xmath51 .",
    "it follows from that the commutativity of diagrams is preserved under scalar multiplication ; that is , if the left - hand diagram in commutes , then so does the right : @xmath27     \\scriptsize     \\node ( 00 ) { $ f$ } ;     \\node ( 01 ) [ right of=00 ] { $ g$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ x$ } ;     \\node ( 11 ) [ right of=10 ] { $ y$ } ;     \\path ( 00 ) edge node { $ { \\varphi}$ } ( 01 )           edge node[swap ] { $ \\psi$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ \\sigma$ } ( 11 ) ;     \\path ( 01 ) edge node { $ \\tau$ } ( 11 ) ;     \\node ( 00 ) [ right of=01 , node distance=25 mm ] { $ sft$ } ;     \\node ( 01 ) [ right of=00 ] { $ sgt$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ sxt$ } ;     \\node ( 11 ) [ right of=10 ] { $ syt$ } ;     \\path ( 00 ) edge node { $ s{\\varphi}t$ } ( 01 )           edge node[swap ] { $ s\\psi t$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ s\\sigma t$ } ( 11 ) ;     \\path ( 01 ) edge node { $ s\\tau t$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : extend}\\ ] ]    from these observations , one can begin to see the motivation for viewing natural transformations as rewrite rules : a rewrite rule @xmath20 can be applied in the context of a string @xmath41 . for this to make sense , though , it had better be the case that the diamond property holds for non - overlapping redexes ; that is , it must be possible to apply two rewrite rules with non - overlapping redexes in either order .",
    "we will see later ( lemma [ lem : disjoint ] ) that this is indeed the case , and in fact holds in all 2-categories as a consequence of .",
    "a _ rewrite category _ is like a string rewrite system , except the semantics of the derivations are taken into account in the definitions of confluence and local confluence .",
    "formally , a _ rewrite category _ is defined in terms of a finitely presented 2-category @xmath52 , where @xmath53 , @xmath54 , and @xmath55 are finite sets of 0-cells , 1-cells , and 2-cells , respectively , and @xmath56 is a finite set of well - typed equations between 2-cell - valued expressions over @xmath54 and @xmath55 generating an equational theory on 2-cells . the 1-cells do not satisfy any equations except those imposed by the axioms of category theory , thus form the free category ( free typed monoid ) freely generated by @xmath54 .",
    "each 1-cell corresponds to a well - typed string @xmath57 , where _",
    "well - typed",
    "_ means @xmath58 , @xmath59 .",
    "we denote by @xmath60 the set of all well - typed strings over @xmath54 .",
    "the elements of @xmath55 are called _ rewrite rules _ and generate the set of all 2-cells under horizontal ( @xmath29 ) and vertical ( @xmath30 ) composition .",
    "the rewrite category itself is a substructure of the category of 1- and 2-cells of this finitely presented 2-category .",
    "it is specified by a tuple @xmath61 , where @xmath62 and @xmath63 is any subset of @xmath60 closed under the action of @xmath64 .",
    "rewrite categories provide a syntax that can be interpreted in the 2-category @xmath28  of categories , functors , and natural transformations . a well - typed string @xmath57",
    "is interpreted as a functor @xmath65 , where concatenation of strings is interpreted as composition of functors .",
    "the rewrite rules describe the action of natural transformations on these strings .",
    "the equations @xmath56 generating the equational theory of the 2-category typically represent an equational axiomatization of the construct under study .",
    "however , from the perspective of string rewriting , they serve a different purpose : they represent local confluence conditions that can be used to establish global confluence in the rewrite category , leading to the existence of terminal objects .",
    "[ ex : monad ] recall that a _ monad _ on a category @xmath25 is a triple @xmath0 , where @xmath1 is an endofunctor on @xmath25 and @xmath66 and @xmath67 are natural transformations such that @xmath68 and @xmath69 ; that is , the diagrams @xmath70     \\scriptsize     \\node ( 00 ) { $ t^3 $ } ;     \\node ( 01 ) [ right of=00 ] { $ t^2 $ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ t^2 $ } ;     \\node ( 11 ) [ right of=10 ] { $ t$ } ;     \\path ( 00 ) edge node { $ t\\mu$ } ( 01 )           edge node[swap ] { $ \\mu t$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ \\mu$ } ( 11 ) ;     \\path ( 01 ) edge node { $ \\mu$ } ( 11 ) ;     \\node ( 00 ) [ right of=01 , node distance=25 mm ] { $ t$ } ;     \\node ( 01 ) [ right of=00 ] { $ t^2 $ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ t^2 $ } ;     \\node ( 11 ) [ right of=10 ] { $ t$ } ;     \\path ( 00 ) edge node { $ t\\eta$ } ( 01 )           edge node[swap ] { $ \\eta t$ } ( 10 )           edge node { $ { \\mathsf{id}}$ } ( 11 ) ;     \\path ( 10 ) edge node[swap ] { $ \\mu$ } ( 11 ) ;     \\path ( 01 ) edge node { $ \\mu$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : monad}\\ ] ] commute .",
    "a typical example is the _ powerset monad _",
    "@xmath71 on @xmath72 , where @xmath73 is the powerset of @xmath24 , @xmath74 , and @xmath75 .",
    "monads are characterized by a rewrite category @xmath76 , where @xmath77 is the free monoid on one generator @xmath1 with rewrite rules @xmath67 and @xmath66 .",
    "the underlying 2-category has one 0-cell .",
    "the equational theory on 2-cells is given by the defining equations for monads .",
    "the properties completely axiomatize the equational theory of monads , but more importantly from the from the point of view of rewriting , they specify local confluence properties in the case of overlapping redexes . for example , the string @xmath78 contains two overlapping redexes for the rule @xmath18 . the left - hand diagram of specifies that this configuration satisfies the diamond property .",
    "we will show later ( theorem [ thm : monad ] ) that @xmath1 is a terminal object in the rewrite category , and that this fact is equivalent to the axiomatization .",
    "[ ex : monads ] the composition of monads is characterized by a rewrite category @xmath79 where @xmath80 is the free monoid on two generators @xmath81 . as in example",
    "[ ex : monad ] , the underlying 2-category has one 0-cell .",
    "the equational theory is given by the axiomatization of two monads on endofunctors @xmath82 and @xmath1 , respectively , and a distributive law @xmath83 connecting them .",
    "we will give more details in  [ sec : monads ] .",
    "again , the axioms can be viewed as local confluence properties for overlapping redexes in the rewrite category .",
    "[ ex : adjunction ] adjunctions are characterized by a rewrite category @xmath84 . in this example",
    ", the underlying 2-category has two 0-cells @xmath19 representing two categories , 1-cells @xmath85 and @xmath86 representing left and right adjoint functors , respectively , and 2-cells @xmath87 and @xmath88 representing the unit and counit of the adjunction , respectively .",
    "given a 1-cell @xmath89 and a rule @xmath90 of a rewrite category , the scalar multiple @xmath91 can be viewed as rewriting the indicated occurrence of @xmath92 to @xmath93 in the context of the string @xmath89 .",
    "this is called a _ reduction_. the _ redex _ of the reduction @xmath50 is the substring @xmath92 of @xmath89 .",
    "a sequence of reductions from @xmath93 to @xmath94 is called a _",
    "derivation_. we write @xmath95 if @xmath96 is such a derivation .",
    "a string is in _ normal form _ if no rules apply .",
    "the rules @xmath55 of the rewrite category each have a type @xmath97 for various @xmath98 , where @xmath99 and @xmath100 . applying these rules to strings in @xmath60",
    ", one can generate diagrams in the rewrite category .",
    "we say that the system @xmath55    * is _ confluent _ if for any two derivations @xmath101 and @xmath102 , there is a word @xmath103 and derivations @xmath104 and @xmath105 such that the resulting diagram commutes ; * is _ locally confluent _ if for any two single reductions @xmath106 and @xmath107 , there is a word @xmath103 and derivations @xmath104 and @xmath105 such that the resulting diagram commutes ; and * has the _ diamond property _ if for any two reductions @xmath106 and @xmath107 , there is a word @xmath103 and reductions @xmath108 and @xmath109 such that the resulting diagram commutes .",
    "this might be a pushout in the rewrite category , but not necessarily .",
    "local confluence does not imply confluence , but the diamond property does .",
    "see @xcite for a thorough treatment of these concepts .",
    "note , however , that our reductions have semantic content as well as syntactic . in our definitions of confluence , local confluence , and the diamond property ,",
    "it is not enough that two derivations derive the same word ; the resulting diagrams must also commute in the rewrite category .",
    "we say that two derivations @xmath110 are _ equivalent _ if the composition of the 2-cells along the two paths are equal .",
    "one of the defining properties for monads , namely the left - hand diagram of , says that @xmath18 as a reduction rule can be applied to the string @xmath78 in two ways to obtain @xmath111 : one way as @xmath112 to the leftmost two occurrences of @xmath1 ( the left arrow of the diagram ) and the other as @xmath113 to the rightmost ( the top arrow ) , in both cases giving @xmath111 . by applying @xmath18 again to the two occurrences of @xmath111",
    ", we obtain a commutative diamond .    by",
    ", we can compose on the left and right with any strings in @xmath77 : @xmath114     \\scriptsize     \\node ( 00 ) { $ t^{m+n+3}$ } ;     \\node ( 01 ) [ right of=00 ] { $ t^{m+n+2}$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ t^{m+n+2}$ } ;     \\node ( 11 ) [ right of=10 ] { $ t^{m+n+1}$ } ;     \\path ( 00 ) edge node { $ t^{m+1}\\mu t^n$ } ( 01 )           edge node[swap ] { $ t^m\\mu t^{n+1}$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ t^m\\mu t^n$ } ( 11 ) ;     \\path ( 01 ) edge node { $ t^m\\mu t^n$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : muext}\\ ] ] this says that any two reductions involving the rewrite rule @xmath18 with overlapping redexes , applied anywhere in a string of length at least three , can be completed to a commutative diamond .    for nonoverlapping redexes",
    ", the diamond property always holds .",
    "this is a consequence of property of 2-categories .",
    "[ lem : disjoint ] any two applications of rewrite rules with disjoint redexes can be applied in either order , and the resulting diagram commutes",
    ". that is , any well - typed diamond of the form @xmath115",
    "\\scriptsize     \\node ( 00 ) { $ pqrst$ } ;     \\node ( 01 ) [ right of=00 ] { $ pqryt$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ pxrst$ } ;     \\node ( 11 ) [ right of=10 ] { $ pxryt$ } ;     \\path ( 00 ) edge node { $ pqr\\tau t$ } ( 01 )           edge node[swap ] { $ p\\sigma rst$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ pxr\\tau t$ } ( 11 ) ;     \\path ( 01 ) edge node { $ p\\sigma ryt$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : disjoint}\\ ] ] commutes , where @xmath116 are 1-cells and @xmath117 and @xmath118 are 2-cells .",
    "it follows from property of 2-categories that if @xmath20 and @xmath119 are 2-cells and the following diagram is well - typed , then it commutes .",
    "@xmath27     \\scriptsize     \\node ( 00 ) { $ fm$ } ;     \\node ( 01 ) [ right of=00 ] { $ fn$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ gm$ } ;     \\node ( 11 ) [ right of=10 ] { $ gn$ } ;     \\path ( 00 ) edge node { $ f\\psi$ } ( 01 )           edge node[swap ] { $ { \\varphi}m$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ g\\psi$ } ( 11 ) ;     \\path ( 01 ) edge node { $ { \\varphi}n$ } ( 11 ) ;     \\path ( 00 ) edge node { $ { \\varphi}\\psi$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : disjoint2}\\ ] ] ( in fact , is equivalent to and . )",
    "the diagram is a special case of with the following substitutions : @xmath120 for @xmath121 , @xmath122 for @xmath123 , @xmath124 for @xmath125 , @xmath126 for @xmath127 , @xmath128 for @xmath42 , and @xmath129 for @xmath130 .",
    "the property of natural transformations is a stronger form of .",
    "in this section we demonstrate the use rewrite categories in the verification of monad composition as presented by eklund et al .",
    "we also give a characterization of monads and adjunctions in terms of rewrite categories .",
    "the following lemma and its proof introduce our approach at a basic level .",
    "[ lem : basic ] let @xmath131 denotes the set of nonnull strings of @xmath1 s and @xmath18 the rewrite rule @xmath132 .",
    "the following are equivalent :    1 .",
    "@xmath18 satisfies the left - hand diagram of ; 2 .",
    "@xmath1 is a terminal object in the rewrite category @xmath133 .",
    "\\(1 ) @xmath134 ( 2 ) : combining lemma [ lem : disjoint ] with the observation , we have that the rewrite system consisting of the single rule @xmath18 on strings @xmath135 for @xmath136 satisfies the diamond property and is therefore confluent .",
    "it follows that any diagram starting from @xmath135 , @xmath136 , and ending with the normal form @xmath1 commutes .",
    "moreover , there exists a reduction sequence from any such @xmath135 to @xmath1 .",
    "thus there is a unique morphism @xmath137 for @xmath136 , so @xmath1 is a terminal object .",
    "\\(2 ) @xmath134 ( 1 ) : conversely , if @xmath1 is a terminal object , then the left - hand diagram of must commute , since there is a unique morphism @xmath138 .",
    "now we add the rewrite rule @xmath139 to the mix .",
    "this rule can be used to introduce a new occurrence of @xmath1 anywhere in the string . in the presence of @xmath139 ,",
    "@xmath1 is no longer a normal form , and in fact normal forms in the strict sense of string rewriting no longer exist .",
    "nevertheless , @xmath1 is still a terminal object .",
    "moreover , @xmath140 can now be included , since there is an arrow @xmath141 .",
    "[ thm : monad ] consider a rewrite category on 1-cells @xmath77 and rules @xmath66 and @xmath67 .",
    "the following are equivalent :    1 .",
    "@xmath18 and @xmath139 satisfy ; 2 .",
    "@xmath1 is a terminal object in the rewrite category @xmath142 .",
    "\\(1 ) @xmath134 ( 2 ) : suppose we have a rewrite system in which the rules can be classified as either _ bad rules _ or _ good rules _ ( in our application , a rule is _ bad _ if it increases the length of the string , e.g.  @xmath139 ) .",
    "call a derivation _ good _ if it uses only good rules .",
    "suppose further that    1 .   every pair of good reductions @xmath106 and @xmath107 can be completed to a diamond using only good reductions @xmath108 and @xmath109 ; and 2 .",
    "every pair of reductions @xmath106 and @xmath107 , good or bad , are confluent using only good derivations @xmath104 and @xmath105 .",
    "these conditions hold for @xmath142 under the assumption ( 1 ) .",
    "we have already argued condition 1 for @xmath18 in lemma [ lem : basic ] .",
    "the right - hand diagram in implies condition 2 by immediately inverting any application of @xmath139 whenever it is applied to a nonnull string . for example , consider applications of @xmath139 and @xmath18 to a substring @xmath111 , where @xmath139 is applied between the two occurrences of @xmath1 .",
    "the two redexes thus overlap .",
    "@xmath143     \\scriptsize     \\node ( 00 ) { $ t^2 $ } ;     \\node ( 01 ) [ right of=00 ] { $ t$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ t^3 $ } ;     \\node ( 11 ) [ right of=10 ] { } ;     \\path ( 00 ) edge node { $ \\mu$ } ( 01 )           edge node[swap ] { $ t\\eta t$ } ( 10 ) ;    \\end{tikzpicture } \\end{array}\\end{aligned}\\ ] ] the top arrow is good , but the left arrow is bad .",
    "however , using the right - hand diagram of , the diagram can be completed using only good arrows : @xmath143     \\scriptsize     \\node ( 00 ) { $ t^2 $ } ;     \\node ( 01 ) [ right of=00 ] { $ t$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ t^3 $ } ;     \\node ( 11 ) [ right of=10 ] { $ t^2 $ } ;     \\node ( 12 ) [ right of=11 ] { $ t$ } ;     \\path ( 00 ) edge node { $ \\mu$ } ( 01 )           edge node[swap ] { $ t\\eta t$ } ( 10 )           edge node { $ { \\mathsf{id}}$ } ( 11 ) ;     \\path ( 10 ) edge node[swap ] { $ t\\mu$ } ( 11 ) ;     \\path ( 11 ) edge node[swap ] { $ \\mu$ } ( 12 ) ;     \\path ( 01 ) edge node { $ { \\mathsf{id}}$ } ( 12 ) ;    \\end{tikzpicture } \\end{array}\\end{aligned}\\ ] ]    now we argue that any system satisfying 1 and 2 is confluent .",
    "let @xmath101 and @xmath102 be any two derivations involving good or bad rules . starting from the apex @xmath92 , move down the two derivations , adding good diamonds to the diagram in the case 1 and good confluent derivations in case 2 .",
    "all new transitions added to the diagram are good .",
    "when done , there are no more exposed bad rules , and the diagram can be completed by filling in with good diamonds .    thus any two derivations @xmath144 are confluent via good derivations , which must be of the form @xmath145 .",
    "but the only good derivation @xmath145 is the identity .",
    "it follows that any two derivations @xmath146 are equivalent ; in other words , @xmath1 is a terminal object .",
    "\\(2 ) @xmath134 ( 1 ) : conversely , if @xmath1 is a terminal object of the rewrite category , then all diagrams starting with any @xmath135 and ending with @xmath1 must commute , in particular those of , the defining conditions for monads .    [",
    "cor : monad ] let @xmath147 be a 2-functor from the free 2-category on one 0-cell , one 1-cell @xmath1 , and two 2-cells @xmath148 to @xmath149 , the 2-category of categories , functors , and natural transformations .",
    "let @xmath56 be the equational theory on 2-cells induced by @xmath150 .",
    "the following are equivalent :    * the equations are a logical consequence of @xmath56 .",
    "* @xmath1 is terminal in the rewrite category @xmath151 modulo @xmath56 .",
    "* the image @xmath152 is a monad .",
    "let @xmath71 and @xmath153 be monads on a category @xmath25 connected by a _ distributive law _ ( or _ swapper _ in the terminology of @xcite ) , which is a natural transformation @xmath83 satisfying the following properties : @xmath154     \\scriptsize     \\node ( 00 ) { $ tp^2 $ } ;     \\node ( 01 ) [ right of=00 ] { $ ptp$ } ;     \\node ( 02 ) [ right of=01 ] { $ p^2t$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ tp$ } ;     \\node ( 12 ) [ below of=02 , node distance=12 mm ] { $ pt$ } ;     \\path ( 00 ) edge node { $ \\theta p$ } ( 01 )           edge node[swap ] { $ t{\\ensuremath{\\mu^p}}$ } ( 10 ) ;     \\path ( 10 ) edge node { $ \\theta$ } ( 12 ) ;     \\path ( 01 ) edge node { $ p\\theta$ } ( 02 ) ;     \\path ( 02 ) edge node { $ { \\ensuremath{\\mu^p}}t$ } ( 12 ) ;     \\node ( 20 ) [ below of=10 , node distance=12 mm ] { $ t^2p$ } ;     \\node ( 21 ) [ right of=20 ] { $ tpt$ } ;     \\node ( 22 ) [ right of=21 ] { $ pt^2 $ } ;     \\path ( 20 ) edge node[swap ] { $ t\\theta$ } ( 21 )           edge node { $ { \\ensuremath{\\mu^t}}p$ } ( 10 ) ;     \\path ( 21 ) edge node[swap ] { $ \\theta t$ } ( 22 ) ;     \\path ( 22 ) edge node[swap ] { $ p{\\ensuremath{\\mu^t}}$ } ( 12 ) ;     \\node ( 00 ) [ right of=02 , node distance=25 mm , yshift=-6 mm ] { $ tp$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ t$ } ;     \\node ( 11 ) [ right of=10 ] { $ pt$ } ;     \\path ( 00 ) edge node { $ \\theta$ } ( 11 ) ;     \\path ( 10 ) edge node { $ t{\\ensuremath{\\eta^p}}$ } ( 00 )           edge node[swap ] { $ { \\ensuremath{\\eta^p}}t$ } ( 11 ) ;     \\node ( 01 ) [ right of=00 ] { $ p$ } ;     \\path ( 01 ) edge node[swap ] { $ { \\ensuremath{\\eta^t}}p$ } ( 00 )           edge node { $ p{\\ensuremath{\\eta^t}}$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : distrib}\\end{aligned}\\ ] ]    distributive laws are discussed in depth in @xcite .",
    "a typical application is the construction of the _ complex algebra _ of an algebra , whose elements are sets of elements of the original algebra . here",
    "@xmath82 would be the powerset monad and @xmath1 the term monad of some variety of algebras , and @xmath155 takes a term of sets @xmath156 and turns it into a set of terms @xmath157 .",
    "these constructions are discussed in @xcite .",
    "another example would be the combination of the additive and multiplicative monoid structures in semirings . here",
    "@xmath82 would be the finite powerset monad and @xmath1 the free monoid construction .    in light of the theme of this note",
    ", it should be clear that the conditions in are nothing more than a way to establish local confluence in the case of overlapping redexes between @xmath155 and the monad operations .",
    "for example , the top rectangle of the left - hand diagram of handles overlapping redexes involving @xmath155 and @xmath158 .",
    "the two monads @xmath82 and @xmath1 can be combined as follows .",
    "define @xmath159 then @xmath160 is again a monad @xcite .",
    "we will verify this using theorem [ thm : monad ] .",
    "most of the work is contained in the following lemma .",
    "[ lem : monadcomp ] consider a rewrite category on 1-cells @xmath80 in a 2-category with a single 0-cell and rules @xmath161 , @xmath162 , @xmath163 , @xmath164 , and @xmath83 , such that @xmath165 and @xmath166 both satisfy the monad axioms with appropriate substitutions ) .",
    "the following statements are equivalent :    1 .",
    "@xmath167 , and @xmath155 satisfy the distributive laws .",
    "@xmath168 is a terminal object in the rewrite category @xmath169 .",
    "\\(1 ) @xmath134 ( 2 ) : first we show that the rewrite system is confluent .",
    "recall that a rule is _ bad _ if it increases length , _ good _ otherwise .",
    "the good rules are @xmath158 , @xmath170 , and @xmath155 , and the bad rules are @xmath171 and @xmath172",
    ".    every pair of good reductions can be completed to a good confluent diagram .",
    "if the redexes do not overlap , this follows from lemma [ lem : disjoint ] .",
    "for redexes that overlap , all cases are covered by the left - hand diagram of and the left - hand diagram of .",
    "given any derivation @xmath173 , possibly containing bad reductions , produce a new derivation @xmath174 as follows :    1 .",
    "extend the derivation to derive @xmath168 .",
    "2 .   rearrange the resulting derivation @xmath175 to obtain an equivalent derivation @xmath176 in which all the bad rules are applied after all the good rules .",
    "step 1 can be accomplished by first introducing an occurrence of @xmath82 and/or @xmath1 using @xmath171 and @xmath172 if necessary , then moving all occurrences of @xmath82 to the left of all occurrences of @xmath1 using @xmath155 , then collapsing the @xmath82 s using @xmath158 and the @xmath1 s using @xmath170 .",
    "step 2 can be done without increasing the length of the derivation . for any bad reduction followed immediately by a good reduction ,",
    "if the symbol introduced by the bad reduction is not part of the redex of the good reduction , then the two reductions can be switched by lemma [ lem : disjoint ] .    otherwise , the symbol introduced by the bad reduction is part of the redex of the good reduction .",
    "there are only six ways this can happen : @xmath177 and symmetrically for @xmath82 .",
    "the first two are equivalent to the identity by the right - hand diagram of and can be deleted .",
    "the last is equivalent to @xmath178 by the right - hand diagram of",
    ". we can continue this process until there are no more bad reductions occurring before good reductions in the derivation .",
    "if @xmath92 contains at least one occurrence each of @xmath82 and @xmath1 , then this must also be true of any string derived from @xmath92 , since all rules preserve this property .",
    "but then @xmath174 can contain no bad reductions at all .",
    "if it did , then the last reduction would be bad .",
    "but it is impossible to derive @xmath168 from such a reduction , since it would have to come from a string of length one , and no such string can be derived from @xmath92 .    by a similar argument , if @xmath179 , then @xmath174 contains exactly one bad reduction to introduce @xmath1 , and it occurs last in the derivation .",
    "this last reduction must be of the form @xmath180 . similarly , if @xmath181 , the last reduction of @xmath174 is of the form @xmath182 , and this is the only bad reduction in the derivation .",
    "if @xmath183 , a similar argument shows that @xmath174 must be either @xmath184    now suppose we are given derivations @xmath185 and @xmath186 , possibly using both good and bad rules .",
    "to show confluence of @xmath96 and @xmath187 , it suffices to show that @xmath176 and @xmath188 are confluent .",
    "as argued above , if @xmath92 contains at least one occurrence each of @xmath82 and @xmath1 , then @xmath174 and @xmath189 are good .",
    "thus we can complete them to a good commutative diagram by filling in with good commutative diamonds and .",
    "this process must terminate , since there is a fixed upper bound , quadratic in the length of @xmath92 , on the length of any good derivation from @xmath92 , since each good reduction strictly decreases the string in length or lexicographic order relative to @xmath190 ( * ? ? ?",
    "* lemma 2.7.2 ) .",
    "if @xmath179 , then as argued above , @xmath174 and @xmath189 are both of the form @xmath191 , where the prefixes @xmath192 contain no occurrence of @xmath1 . by theorem [ thm : monad ] , @xmath82 is terminal in @xmath193 , therefore the two prefixes @xmath192 are equivalent , and consequently so are @xmath174 and @xmath189 .",
    "the argument is similar for @xmath181 .    when @xmath183 , we need only observe that the two derivations form a commutative diamond by lemma [ lem : disjoint ] .",
    "finally we show that @xmath168 is a terminal object .",
    "we have already argued that there is at least one derivation of @xmath168 from every @xmath194 , so there is at least one arrow @xmath195 in the rewrite category . to show that there is at most one , let @xmath196 be any two derivations . by confluence",
    ", we can complete to a pair of equivalent derivations @xmath197 .",
    "rearranging the final portions @xmath198 of these two derivations by step 2 above , we obtain good derivations .",
    "but the only good derivation @xmath198 is the identity , therefore @xmath96 and @xmath187 were already equivalent .",
    "\\(2 ) @xmath134 ( 1 ) : if @xmath168 is a terminal object , then holds , as all maximal paths in all diagrams of lead to @xmath168 .",
    "[ thm : monadcomp ] let @xmath153 and @xmath71 be monads connected by a distributive law @xmath83 satisfying .",
    "let @xmath199 and @xmath200 be defined by .",
    "then @xmath160 is a monad .",
    "consider the rewrite category , @xmath158 , etc .  to refer to the components of the rewrite category as well as their images in @xmath28 .",
    "] @xmath169 . by theorem [ thm : monad ]",
    ", it suffices to show that @xmath168 is a terminal object in the rewrite category @xmath201 . by lemma [ lem : monadcomp ]",
    ", we know that it is terminal in the category @xmath169 , thus for any @xmath202 , there is exactly one arrow @xmath203 in that category .",
    "it follows that there is at most one arrow @xmath203 in the subcategory @xmath201 .",
    "but there is also at least one , since we can derive @xmath168 from @xmath204 by the rule @xmath200 and from @xmath205 for @xmath136 by @xmath206 applications of the rule @xmath199 .      as a final application",
    ", we give a characterization of adjoint functors in terms of rewrite categories .",
    "recall that a functor @xmath85 is a left adjoint of another functor @xmath86 if there are natural transformations @xmath87 and @xmath88 , the _ unit _ and _ counit _ of the adjunction , respectively , satisfying @xmath143     \\scriptsize     \\node ( 00 ) { $ g$ } ;     \\node ( 10 ) [ below of=00 , node distance=12 mm ] { $ gfg$ } ;     \\node ( 11 ) [ right of=10 ] { $ g$ } ;     \\path ( 00 ) edge node { $ { \\mathsf{id}}$ } ( 11 )                edge node[swap ] { $ \\eta g$ } ( 10 ) ;     \\path ( 10 ) edge node[swap ] { $ g{\\varepsilon}$ } ( 11 ) ;     \\node ( 00 ) [ right of=00 , node distance=25 mm ] { $ f$ } ;     \\node ( 01 ) [ right of=00 ] { $ fgf$ } ;     \\node ( 11 ) [ below of=01 , node distance=12 mm ] { $ f$ } ;     \\path ( 00 ) edge node[swap ] { $ { \\mathsf{id}}$ } ( 11 )                edge node { $ f\\eta$ } ( 01 ) ;     \\path ( 01 ) edge node { $ { \\varepsilon}f$ } ( 11 ) ;    \\end{tikzpicture } \\end{array } \\label{dia : adj}\\end{aligned}\\ ] ]    [ thm : adj ] consider a 2-category on two 0-cells @xmath25 , @xmath23 generated by 1-cells @xmath85 and @xmath86 and 2-cells @xmath87 and @xmath88 .",
    "the following statements are equivalent :    1 .",
    "@xmath139 and @xmath207 satisfy . 2 .",
    "@xmath121 is a terminal object in the rewrite category @xmath208 and @xmath125 is a terminal object in the rewrite category @xmath209 .",
    "\\(1 ) @xmath134 ( 2 ) : by arguments similar to the proof of theorem [ thm : monad ] and lemma [ lem : monadcomp ] , in any derivation @xmath173 , all applications of @xmath139 ( the bad rule ) can be moved after all applications of @xmath207 ( the good rule ) , by either lemma [ lem : disjoint ] in the case of disjoint redexes or in the case of overlapping redexes .",
    "the resulting equivalent derivation @xmath210 is no longer than @xmath96 .",
    "now if @xmath174 is of the form @xmath211 , there can be no application of @xmath139 , because the last @xmath139 would produce a string of length at least 2 .",
    "but then all redexes are redexes of @xmath207 , therefore are disjoint and can be done in any order by lemma [ lem : disjoint ] .",
    "thus all derivations of the form @xmath211 are equivalent .",
    "moreover , there exists a derivation @xmath211 consisting of @xmath206 applications of @xmath207 .",
    "thus @xmath121 is terminal in @xmath208 .",
    "a symmetric argument shows that @xmath125 is terminal in @xmath209 .",
    "\\(2 ) @xmath134 ( 1 ) : in , there is a unique morphism to @xmath125 in the left - hand diagram and a unique morphism to @xmath121 in the right - hand diagram , thus the diagrams commute .",
    "[ cor : adj ] let @xmath147 be a 2-functor from the free 2-category on two 0-cells @xmath19 , two 1-cells @xmath85 , @xmath86 , and two 2-cells @xmath87 , @xmath88 to @xmath149 .",
    "let @xmath56 be the equational theory on 2-cells induced by @xmath150 .",
    "the following are equivalent :    * the equations are a logical consequence of @xmath56 . * @xmath121 is terminal in the rewrite category @xmath208 modulo @xmath56 and @xmath125 is terminal in the rewrite category @xmath209 modulo @xmath56 .",
    "* @xmath212 and @xmath213 are adjoint functors with @xmath212 the left adjoint and @xmath213 the right adjoint with unit @xmath214 and counit @xmath215 .",
    "thanks to riccardo pucella for valuable comments .",
    "peter jipsen . a note on complex algebras of semigroups . in r.",
    "berghammer , b.  mller , and g.  struth , editors , _ relational and kleene - algebraic methods in computer science : proc .",
    "7th int . sem . relational methods in computer science and 2nd int .",
    "workshop applications of kleene algebra _ , volume 3051 of _ lecture notes in computer science _ , pages 171177 .",
    "springer - verlag , may 2003 .",
    "prakash panangaden . the category of markov kernels . in christel baier , michael huth , marta kwiatkowska , and mark ryan , editors ,",
    "_ electronic notes in theoretical computer science _ , volume  22",
    "elsevier , 2000 .",
    "norman ramsey and avi pfeffer .",
    "stochastic lambda calculus and monads of probability distributions . in _ proceedings of the 29th acm sigplan - sigact symposium on principles of programming languages _ ,",
    "pages 154165 .",
    "acm press , 2002 .",
    "philip wadler .",
    "monads for functional programming . in johan jeuring and erik",
    "meijer , editors , _ advanced functional programming : 1st int . school on advanced functional programming techniques _ ,",
    "volume 925 of _ lecture notes in computer science _ , pages 2452 .",
    "springer - verlag , 1995 ."
  ],
  "abstract_text": [
    "<S> eklund et al .  ( 2002 ) present a graphical technique aimed at simplifying the verification of various category - theoretic constructions , notably the composition of monads . in this note </S>",
    "<S> we take a different approach involving string rewriting . </S>",
    "<S> we show that a given tuple @xmath0 is a monad if and only if @xmath1 is a terminal object in a certain category of strings and rewrite rules , and that this fact can be established by proving confluence of the rewrite system . </S>",
    "<S> we illustrate the technique on the monad composition problem . we also give a characterization of adjunctions in terms of rewrite categories .    _ in honor of ji admek on the occasion of his seventieth birthday _ </S>"
  ]
}