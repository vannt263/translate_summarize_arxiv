{
  "article_text": [
    "the naive algorithm for matrix multiplication is an @xmath6 algorithm . from volker strassen ( see @xcite ) we know that there is an @xmath7 algorithm for this problem .",
    "winograd optimized strassen s algorithm . while the strassen - winograd algorithm is the variant that is always implemented ( for example in the famous gemmw package ) , there are faster ones ( in theory ) that are impractical to implement .",
    "the fastest known algorithm runs in @xmath8 time ( see @xcite from coppersmith and winograd ) .",
    "most researchers believe that an optimal algorithm with @xmath9 runtime exists , but since 1987 no further progress was made in finding one . because modern microprocessor architectures have complex memory hierarchies and increasing parallelism , performance has become a complex tradeoff , not just a simple matter of counting flops . algorithms which make use of this technology were described in @xcite .",
    "another well known method is _ tiling _ : the normal algorithm can be speeded up by a factor of two by using a six loop implementation that blocks submatrices so that the data passes through the l1 cache only once .",
    "let @xmath10 denote the number of field operations in characteristic @xmath11 required to multiply two @xmath12 matrices .",
    "the exponent @xmath1 of the matrix multiplication is defined as @xmath13 details about the complexity of matrix multiplication and the exponent @xmath1 can be found in @xcite .",
    "the result from coppersmith and winograd says that @xmath14 .",
    "( the reader can find the necessary background on group- and representation theory in @xcite , @xcite and @xcite .",
    "more details about the framework can be found in @xcite and @xcite . )    in 2003 cohn and umans introduced in @xcite a group - theoretic approach to fast matrix multiplication .",
    "the main idea is to embed the matrix multiplication over a ring @xmath15 into the group ring @xmath16 , where @xmath0 is a ( finite ) group .",
    "a group @xmath0 admits such an embedding , if there are subsets @xmath17 , @xmath18 and @xmath19 which fulfill the so - called _ triple product property_.    let @xmath0 be a group and @xmath20 be a nonempty subset of @xmath0 .",
    "right quotient _",
    "@xmath21 of @xmath22 is defined by @xmath23 .",
    "note that @xmath24 holds , if @xmath17 is a subgroup of @xmath0 .",
    "we say that the nonempty subsets @xmath17 , @xmath18 and @xmath19 of a group @xmath0 fulfill the _ triple product property _",
    "( tpp ) if for @xmath25 , @xmath26 and @xmath27 , @xmath28 holds iff @xmath29 .    with @xmath30",
    "we denote the problem @xmath31 of multiplying an @xmath32 with a @xmath33 matrix over @xmath34 .",
    "we say that a group @xmath0 _ realizes _",
    "@xmath35 if there are subsets @xmath36 of sizes @xmath37 , which fulfill the tpp . in this case we call @xmath38 a _ tpp triple _ of @xmath0 .",
    "let us now focus on the embedding of the matrix multiplication into @xmath39 .",
    "let @xmath0 realize @xmath30 through the subsets @xmath40 , @xmath41 and @xmath42 .",
    "let @xmath43 be an @xmath32 and @xmath44 be a @xmath33 matrix .",
    "we index the entries of @xmath43 and @xmath44 with the elements of @xmath17 , @xmath18 and @xmath19 instead of numbers .",
    "now we have @xmath45 cohn and umans showed that this is the same as the coefficient of @xmath46 in the product @xmath47 so we can read off the matrix product from the group ring product by looking at the coefficients of @xmath46 with @xmath48 and @xmath49 .",
    "[ def : tppcap ] we define the _ tpp capacity _ @xmath50 of a nontrivial group @xmath0 as @xmath51 and the _ tpp subgroup capacity _ of @xmath0 as @xmath52 .",
    "note that @xmath53 , because every group @xmath0 realizes @xmath54 through the tpp triple @xmath55 .",
    "[ def : dg ] let @xmath0 be a group with the character degrees @xmath56 .",
    "we define the _ @xmath57-character capacity _ of @xmath0 as @xmath58 .",
    "we can now use @xmath59 and @xmath60 to get new bounds for @xmath1 :    if @xmath61 is a finite group , then @xmath62 .",
    "note that this leads to a nontrivial upper bound for @xmath1 , iff @xmath63 .",
    "therefore , for a fixed group @xmath0 we search for tpp triples @xmath64 which maximize @xmath65 , for example with a brute - force computer search",
    ". note that the maximal @xmath65 equals to @xmath66 .    with their group theoretic framework cohn and umans",
    "were able to construct an algorithm for matrix multiplication with running time @xmath67 , see ( * ? ? ?",
    "6.3 ) .    from cohn and umans we know ( ( * ? ? ?",
    "* lem . 3.1 . ) ) , that @xmath68 if @xmath0 is an abelian group .",
    "therefore we only focus on _ nonabelian groups_. we also only focus on _ finite groups_.      in this article we present two new characterizations of the tpp , which are useful for theoretical considerations and for tpp test algorithms . with this",
    "we describe all known tpp tests and implement them in .",
    "we also compare their runtime .",
    "furthermore we show that the search for subgroup tpp triples of nontrivial size in a nonabelian group can be restricted to the set of all nonnormal subgroups of that group .",
    "finally we describe brute - force search algorithms for maximal subgroup and subset tpp triples .",
    "in addition we present the results of the subset brute - force search for all groups of order less than @xmath2 and selected results of the subgroup brute - force search for @xmath3-groups , @xmath4 and @xmath5 .",
    "in this section we present facts that we use in our search algorithms .",
    "details about the subset and subgroup search can be found in section [ sec : searchalgos ] .",
    "depending on the context , the symbol @xmath69 will denote either the number @xmath69 , the group identity @xmath70 , or the trivial subgroup @xmath71 .    1 .",
    "let @xmath72 be a nonempty subset of a group @xmath0 and @xmath73",
    ". then @xmath74 and @xmath75 .",
    "if @xmath17 , @xmath18 and @xmath19 fulfill the tpp then @xmath76 holds for all @xmath77 .",
    "3 .   if @xmath64 is a tpp triple with @xmath78 , then @xmath79 .    if @xmath64 is a tpp triple of @xmath0 , then @xmath80 .",
    "first we note , that we are only interested in matrix - matrix multiplication , that means , we consider only tpp triples @xmath64 with @xmath81 , @xmath82 , @xmath83 .",
    "furthermore we have : assume that in a tpp triple of @xmath0 one of @xmath17 , @xmath18 or @xmath19 is @xmath0 itself .",
    "then it follows from the lemma above , that the other two sets of the triple have size @xmath69 . because we omit this case , we only use :    [ ob : notoneorg ] it is sufficient to search tpp triples with @xmath81 , @xmath82 , @xmath84 .    from cohn and umans ( see ( * ? ? ?",
    "2.1 ) ) we know the following symmetry property :    if @xmath0 realizes @xmath30 , then it does so for every permutation of @xmath85 , @xmath86 and @xmath87 .    we conclude the following :    [ ob : order ] it is sufficient to search tpp triples with @xmath88 .    we know , that @xmath89 , therefore we are only interested in    [ ob : minimumbeta ] it is sufficient to search tpp triples with @xmath90 .",
    "now we can combine the last two observations : we know that @xmath91 .",
    "therefore we have    [ ob : lower ] it is sufficient to search tpp triples with @xmath92{|g|}\\right\\rceil = : \\ell ( g)$ ] , where @xmath93 denotes the smallest integer not smaller than @xmath94",
    ".    assume the case , where we try to find triples that yield a nontrivial upper bound for @xmath1 instead of only finding nontrivial tpp triples .",
    "in this case we change the @xmath95 in the last two observations to @xmath96 .",
    "according to neumann we call a tpp triple @xmath64 that fulfills @xmath97 a _ basic tpp triple_.    from neumann we know the following facts that reduce the search space enormously :    [ lemm : neumann ] if @xmath64 is a tpp triple of @xmath0 , then @xmath98 is a tpp triple for all @xmath99 , too .",
    "note that any tpp triple can be translated to a basic tpp triple by lemma  [ lemm : neumann ] .",
    "together with ( * * * ) it follows , that :    [ ob : intersec ] it is sufficient to search tpp triples with @xmath100 .    if @xmath64 is a tpp triple , then @xmath101 , @xmath102 and @xmath103 .",
    "[ ob : neumann ] it is sufficient to search tpp triples with @xmath104 .    let us focus on a brute - force search for tpp triples of subgroups in the mathieu group @xmath105 .",
    "we pick out this example because it is a big group , note that @xmath106 , with many ( exactly @xmath107 ) subgroups .",
    "possible orders for @xmath17 , @xmath18 or @xmath19 are ( computed with ):",
    "@xmath108 note that @xmath109 has @xmath110 elements .",
    "if we use observation [ ob : notoneorg ] , we define @xmath111 , so we have @xmath112 .",
    "a naive idea would be @xmath113 . because @xmath114 we would have a large search space for a brute - force search .",
    "now we use observation  [ ob : order ] and achieve @xmath115 .",
    "if we only search for subgroup tpp triples that yield a nontrivial bound for @xmath1 , we use observation  [ ob : minimumbeta ] with @xmath116 ( again computed with ) instead of @xmath95 . with this",
    "it follows that @xmath117 .",
    "finally we use neumanns inequality from observation  [ ob : neumann ] , which yields to @xmath118 .",
    "this example shows that the observations above reduce the search space for a brute - force search enormously . in this case",
    "it is not even necessary to start a search .",
    "in this section we present two new characterizations of the tpp .",
    "they are useful for theoretical considerations ( in particular theorem [ lem : tppold ] ) and for tpp test algorithms which we discuss in section  [ sec : tpptests ] .",
    "[ lem : tppold ] three subsets of @xmath0 form a basic tpp triple @xmath64 iff @xmath119    this is not a limitation , because we only need to search for basic tpp triples .",
    "first assume that @xmath64 is a basic tpp triple .",
    "( i ) follows directly from the definition and ( ii ) from ( * * ) .",
    "furthermore ( * ) implies that @xmath120 .",
    "now assume there is a common element @xmath121 .",
    "then @xmath122 , for some @xmath25 and @xmath123 .",
    "this means @xmath124 , but the tpp for @xmath64 implies that @xmath125 and therefore @xmath126 , a contradiction .",
    "now assume that the equations ( i)(iii ) hold for the subsets @xmath17 , @xmath18 and @xmath19 .",
    "consider the triple quotient product @xmath127 for arbitrary elements @xmath25 , @xmath26 and @xmath128 .",
    "then @xmath129 is equivalent to @xmath130 . now",
    "( iii ) implies that @xmath131 and ( * ) together with ( ii ) imply that @xmath132 and so @xmath64 is a basic tpp triple .",
    "let @xmath133 be a finite nonempty set and @xmath134 a partition of it .",
    "a set @xmath135 is called a _ subtransversal _ for @xmath136 with _ support _",
    "@xmath137 if for all @xmath138 @xmath139 it then follows that @xmath140 . in the special case when the collection @xmath136 is the set of left ( or right ) cosets of a subgroup @xmath17 of a group @xmath0 , then any subtransversal @xmath18 for @xmath141 ( or @xmath142 ) will simply be called a subtransversal for @xmath17 in @xmath0 .    [",
    "th : subtrans ] let @xmath0 be a group , @xmath17 a subgroup of @xmath0 , and @xmath18 , @xmath19 subsets of @xmath0 .    1 .",
    "if @xmath64 is a basic tpp triple of g then @xmath18 and @xmath19 are subtransversals for @xmath17 in @xmath0 such that @xmath143 2 .   if @xmath18 and @xmath19 are also subgroups of @xmath0 , and @xmath18 and @xmath19 are subtransversals for @xmath17 in @xmath0 satisfying then @xmath64 is a tpp triple of @xmath0 .",
    "\\(i ) we have @xmath144 , by ( * * * ) .",
    "let @xmath145 be a nontrivial coset of @xmath17 .",
    "assume distinct elements @xmath146 , where @xmath147 and @xmath148 for distinct @xmath149 .",
    "then @xmath150 , and that contradicts the tpp requirement ( * * ) .",
    "so for any coset @xmath151 , we have @xmath152 .",
    "the same holds for @xmath19 .",
    "therefore @xmath18 and @xmath19 are subtransversals for @xmath153 .",
    "now assume distinct elements @xmath154 and @xmath155 for a nontrivial coset @xmath156 .",
    "then @xmath157 and that contradicts theorem [ lem : tppold ] .",
    "this shows that @xmath18 and @xmath19 fulfill .",
    "\\(ii ) assume @xmath18 and @xmath19 are subtransversals of @xmath153 and fulfill . since @xmath17 , @xmath18 and @xmath19",
    "are subgroups we have @xmath158 and @xmath159 . because the intersection of the supports of @xmath18 and @xmath19 is @xmath160 , @xmath161 holds .",
    "now assume that there is an @xmath162 .",
    "so there are @xmath48 , @xmath163 and @xmath49 with @xmath164",
    ". therefore we have @xmath165 , which is equivalent to @xmath166 .",
    "but then would be @xmath132 , a contradiction .",
    "so @xmath64 is a tpp triple by theorem [ lem : tppold ] .",
    "three subgroups @xmath17 , @xmath18 , @xmath19 of a group @xmath0 form a tpp triple iff @xmath18 and @xmath19 are subtransversals for @xmath17 in @xmath0 , satisfying .",
    "let @xmath0 be a group . if @xmath64 is a tpp triple of subgroups where at least one of @xmath17 , @xmath18 or @xmath19 is normal in @xmath0 , then @xmath167",
    ".    without loss of generality assume that @xmath17 is nontrivial , proper and normal in @xmath0 . because @xmath17 is normal in @xmath0",
    ", we have @xmath168 .",
    "we will work with @xmath141 . from theorem",
    "[ th : subtrans ] we know , that @xmath18 and @xmath19 are subtransversals for @xmath141 that fulfill .",
    "let @xmath169 be the @xmath170\\geq 2 $ ] elements of @xmath141 .",
    "we define @xmath171 and @xmath172 in the same way",
    ". then @xmath173 and @xmath172 are subgroups of @xmath141 with @xmath174 , @xmath175 and @xmath176 . to see this ,",
    "first consider @xmath173 . because @xmath18 and @xmath19 are subtransversals for @xmath141 that fulfill , we have @xmath177 .",
    "now let @xmath178 be cosets of @xmath17 .",
    "so there are @xmath179 such that @xmath180 and @xmath181 , where @xmath149 .",
    "they have the product @xmath182 and so @xmath183 .",
    "since @xmath18 is a subtransversal for @xmath141 it follows that @xmath184 and so @xmath185 .",
    "the inverse of any given @xmath186 is @xmath187 and if @xmath163 is such that @xmath188 then @xmath189 for some @xmath48 , and @xmath190 ( because @xmath17 is normal ) , and so @xmath191 , and we can conclude that @xmath192 as well .",
    "the same holds for @xmath172 . because we know that @xmath176 and so @xmath193 is a tpp triple of @xmath141 by theorem  [ lem : tppold ] . from neumanns inequality",
    "( see lemma [ lemm : neumann ] ) it follows that @xmath194 , which we wanted to show .",
    "we can use the result above to create an additional filter for the search space of subgroup tpp triples :    [ ob : nonnormal ] if we are only interested in subgroup tpp triples of nontrivial size it is sufficient to search for @xmath17 , @xmath18 and @xmath19 that are all nonnormal .",
    "in this section we present some facts about the tpp capacity of nonabelian groups . the following two results state nontrivial lower bounds for @xmath66 .",
    "the ideas behind the proofs are those of the authors , but the proofs as formulated here are those of neumann .",
    "[ lem : nonab ] if @xmath0 is a nonabelian group with a nonnormal subgroup @xmath17 of index @xmath195=3 $ ] , then @xmath196 .",
    "let @xmath153 be the right coset space of @xmath0 of size @xmath195=3 $ ] .",
    "there is a natural homomorphism @xmath197 , defined by @xmath198 for all @xmath73 , where @xmath199 describes a permutation action @xmath200 for all @xmath151 , of @xmath201 on @xmath153 .",
    "the homomorphism @xmath202 has a kernel @xmath203 , which is @xmath204 ( the largest normal subgroup of @xmath0 contained in @xmath17 ) .",
    "the quotient group @xmath205 is isomorphic to a transitive subgroup in @xmath206 .",
    "the nontrivial transitive subgroups of @xmath206 are @xmath207 and @xmath206 itself .",
    "since @xmath17 is nonnormal , @xmath208 is proper and so @xmath209 .",
    "thus @xmath210 . from (",
    "2.2 ) we know that @xmath211 .",
    "it follows ( see table [ tab : small ] ) , that @xmath212 .",
    "[ lem : nonab2 ] if @xmath0 is a nonabelian group with a self - normalising subgroup @xmath17 of index @xmath195=4 $ ] , then @xmath213 .    the subgroup @xmath17 has a normal core @xmath214 which is proper @xmath208 , such that the quotient group @xmath215 is of order @xmath216 .",
    "the core @xmath217 is the kernel of the natural homomorphism @xmath218 which describes the permutation action of @xmath0 on @xmath141 , and so @xmath219 is a transitive subgroup of order greater than @xmath220 .",
    "the only possibilities are @xmath221 , @xmath222 and @xmath223 . because we assume that @xmath17 is self - normalising , the case @xmath224 is not feasible .",
    "the statement follows from @xmath225 ( see table [ tab : small ] ) like in the proof of lemma [ lem : nonab ] .",
    "at the moment there are five algorithms to test the tpp . in this section",
    "we will present them and compare their running time .",
    "we start with two algorithms that directly came from the tpp definition .",
    "we define @xmath226 as a list , not as a set .",
    "then we count , how many @xmath69 s are in it .",
    "the tpp is fulfilled iff there is only one @xmath69 in @xmath227 .",
    "` tpptestnaiv ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   ` @xmath228 + `   if ( # { ` @xmath229 ` } ` @xmath230 ` ) then ` + `     return false ; ` + `   fi ; ` + `   return true ; `    ' '' ''    the algorithm above is very naive , because we use the _ complete _ list @xmath227 .",
    "this needs a lot of time and memory .",
    "it is a better idea to search element - wise for @xmath69 s .",
    "[ algo : tpptest ] ` tpptest ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   ` @xmath231 ` , ` @xmath232 ` , ` @xmath233 + `   for ` @xmath234 ` do ` + `     for ` @xmath235 ` do ` + `       for ` @xmath236 ` do ` + `         if ( ` @xmath237 ` and ( ` @xmath238 ` or ` @xmath239 ` or ` @xmath240 ` ) ) then ` + `           return false ; ` + `         fi ; ` + `   od ; od ; od ; ` + `   return true ; `    ' '' ''    from hendrik orem we know the following equivalent form of the tpp :    subsets @xmath17 , @xmath18 and @xmath19 of @xmath0 satisfy the tpp iff @xmath241    note that for a tpp test based on the lemma above we only need to compute one of the right quotients , instead of all three right quotients in the original tpp definition .",
    "[ algo : tpptestorem ] ` tpptestorem ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   ` @xmath242 ` , ` @xmath243 + `   if ( ` @xmath244 ` ) then ` + `     if ( ` @xmath245 ` ) then ` + `       return true ; ` + `   fi ; fi ; ` + `   return false ; `    ' '' ''    the fourth algorithm comes from the tpp reformulation of theorem [ lem : tppold ] , it requires a basic triple ( @xmath246 ) as input :    [ algo : tpptestmurthy ] ` tpptestmurthy ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   ` @xmath247 ` , ` @xmath248 + `   if ( ` @xmath249 ` ) then ` + `     ` @xmath250 + `     if ( ` @xmath251 ` ) then ` + `       return true ; ` + `   fi ; fi ; ` + `   return false ; `    ' '' ''    now we focus on tpp tests for subgroups .",
    "we start with the tpp test inspired by theorem [ th : subtrans ] about subtransversals .",
    "` tpptestmurthyhedtkegrp ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   if ( ` @xmath252 ` and ` @xmath253 ` ) then ` + `     for ` @xmath254 ` do ` + `       if ( ` @xmath255 ` ) then ` + `         return false ; ` + `     fi ; od ; ` + `   else ` + `     return false ; ` + `   fi ; ` + `   return true ; `    ' '' ''    in the case where @xmath17 , @xmath18 and @xmath19 are subgroups , we have @xmath24 , @xmath256 and @xmath257 .",
    "therefore the remaining test algorithms for subgroups are :    ` tpptestnaivgrp ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   ` @xmath258 + `   if ( # { ` @xmath229 ` } ` @xmath230 ` ) then ` + `     return false ; ` + `   fi ; ` + `   return true ; `    ' '' ''    ` tpptestgrp ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   for ` @xmath259 ` do ` + `     for ` @xmath260 ` do ` + `       for ` @xmath261 ` do ` + `         if ( ` @xmath237 ` and ( ` @xmath238 ` or ` @xmath239 ` or ` @xmath240 ` ) ) then ` + `           return false ; ` + `         fi ; ` + `   od ; od ; od ; ` + `   return true ; `    ' '' ''    ` tpptestoremgrp ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   ` @xmath262 + `   if ( ` @xmath263 ` ) then ` + `     if ( ` @xmath264 ` ) then ` + `       return true ; ` + `   fi ; fi ; ` + `   return false ; `    ' '' ''    ` tpptestmurthygrp ( s , t , u ) `    ' '' ''    ` output : tpp fulfilled : true / false `    `   if ( ` @xmath265 ` ) then ` + `     if ( ` @xmath266 ` ) then ` + `       return true ; ` + `   fi ; fi ; ` + `   return false ; `    ' '' ''",
    "now we compare the running time of the different tpp tests . for this",
    "we use the search algorithms described in the next section with the different test algorithms .",
    "we use a ( @xcite ) implementation of the algorithms in this paper with the sonata package ( @xcite ) for the ` subgroups ` routine .",
    "the interested reader can get the codes from the first author via email .    for the subgroup test algorithms we run the brute - force search algorithm @xmath267 times ( except for the groups of order @xmath268 and @xmath269 , because there are more than @xmath270 such groups ) for each nonabelian group of order less than @xmath271 .",
    "the results in figure  [ fig : subgroupall ] show the mean _ cumulative _ running time of the search algorithm for all nonabelian groups _ up to _ a given order .",
    "we recommend to use ` tpptestmurthygrp ` .    for the subset test algorithms we do the same , but only up to group order @xmath272 and only with 2 repeats to build the mean value .",
    "the results are shown in figure [ fig : smallall ] ( left ) .",
    "it is very obvious , that compared to the naive tpp test the algorithms [ algo : tpptest ] , [ algo : tpptestorem ] and [ algo : tpptestmurthy ] are very fast .",
    "therefore figure [ fig : smallall ] ( right ) shows the details .",
    "again , we recommend to use ` tpptestmurthy ` .",
    "in this section we describe the brute - force search algorithms that we use for our computations .",
    "we use the observations from section [ sec : concepts ] to reduce the search space for @xmath273 and the tpp tests from the last section .",
    "although it is relatively quick to search for subgroup tpp triples , they do not fully describe the tpp capacity of a group , as the following theorem shows .    for every finite group @xmath0",
    ", @xmath274 holds .",
    "there are groups with @xmath275 .",
    "the first statement is trivial , because the search space for @xmath59 includes the one for @xmath276 . for the second statement consider the group @xmath277 of order @xmath267 . from table [",
    "tab : small ] we know that @xmath278 . but",
    "the subsets @xmath279 , @xmath280 and @xmath281 of @xmath282 realize the problem @xmath283 of size @xmath284 , and so @xmath285 .    from the result above we see , that it is necessary so search for _ subset _ tpp triples .",
    "therefore we present search algorithms for either subgroup tpp triples and for subset tpp triples .",
    "we use the following algorithm to search for subgroup tpp triples in a given nonabelian group .",
    "note that we use the ` subgroups ` routine from the sonata package and that the subgroups returned from that command are ordered ascending by the sizes of the subgroups .",
    "our command ` nonnormalsubgroups ` is only a filter for the nonnormal ` subgroups ` of @xmath0 .    `",
    "testgrp ( g ) `    ' '' ''    ` output : subgroups ` @xmath286 ` , ` @xmath287 ` , ` @xmath288 ` that realize a problem of size ` @xmath276`(g ) `    ` 1   ` @xmath289`:=|g| , ` @xmath286`:=g , ` @xmath287`:={`@xmath290 ` } , ` @xmath288`:={`@xmath290 ` } ` + ` 2   c:=nonnormalsubgroups(g ) ; a:=|c|;`__(observation [ ob : nonnormal ] ) _ _ + ` 3   lasts:=| { c`@xmath291`c : |c| < ` @xmath292 ` } | + 1;`__(observation [ ob : lower ] ) _ _ + ` 4   for i in [ a , a-1 ,",
    "... , lasts ] do`__(observation [ ob : lower ] ) _ _ + ` 5     s:=c[i ] ; ` + ` 6     for j in [ i-1 , i-2 , ... , 1 ] do`__(observation [ ob : order ] ) _ _ + ` 7       t:=c[j ] ; ` + ` 8       if ( s ` @xmath293 ` t = 1 ) then`__(observation [ ob : intersec ] ) _ _ + ` 9         for k in [ j-1 , j-2 , ... , 1 ] do`__(observation [ ob : order ] ) _ _ + ` 10           u:=c[k ] ; ` + ` 11           if ( |s|`@xmath294`(|t| + |u| - 1 ) ` @xmath295 ` |g| ) then`__(observation [ ob : neumann ] ) _ _ + ` 12             if ( |s|`@xmath294`|t|`@xmath294`|u| > ` @xmath289 ` ) then`__(observation [ ob : minimumbeta ] ) _ _ + ` 13               if ( t ` @xmath293 ` u = 1 and s ` @xmath293 ` u = 1 ) then`__(observation [ ob : intersec ] ) _ _ + ` 14                 if tppfulfilled(s , t , u ) then ` + ` 15                   ` @xmath289`:=|s|`@xmath294`|t|`@xmath294`|u| ; ` @xmath286`:=s ; ` @xmath287`:=t ; ` @xmath288`:=u ; ` + ` 16                   break ; ` + ` 17               fi ; fi ; ` + ` 18             else ` + ` 19               break ; ` + ` 20   fi ; fi ; od ; fi ; od ; od ; return ` @xmath286 ` , ` @xmath287 ` , ` @xmath288 ` ; `    ' '' ''    for the command ` tppfulfilled ` in line 14 of the code we use one of the tpp tests for subgroups described in the previous section .",
    "the ` break ` command in line 16 is used because all other @xmath19 that occur in the inner ` for ` loop have a size smaller or equal than @xmath296 and we do nt need to test them , because we will not get a bigger tpp triple . the ` break ` command in line @xmath297",
    "is used because the multiplicative size of all other tpp triples with an @xmath19 from the inner loop have a size smaller than @xmath298 .",
    "the search for subset tpp triples is very similar to the subgroup search .",
    "but instead of the ` subgroups ` routine we use a method to generate subsets of @xmath0 .",
    "we followed an idea of e. burnett ( see @xcite ) to generate the subsets on the fly in our code .",
    "( we also had the idea to generate a binary representation of the subsets .",
    "each subset of @xmath0 can be identified as an element of @xmath299 .",
    "but it needs too much memory to generate the whole object @xmath299 and therefore we are glad , that we found a way to generate the subsets one after another . )",
    "gap implementation of the ` generatesubset ` method from e. burnett    ' '' ''    ` generatesubset : = function ( orderg , sizes , numbers ) ` + `   local boolvector , offset , numberzeros , low , high ; ` +   + `   boolvector:= [ ] ; offset:=0 ; numbers:=numbers-1 ; ` + `   ` + `   while true do ` + `     numberzeros:=0 ; low:=0 ; high:=binomial(orderg-1 , sizes-1 ) ; ` + `     ` + `     while ( numbers > = high ) do ` + `       numberzeros:=numberzeros+1 ; low:=high ; ` + `       high:=high+binomial(orderg - numberzeros-1 , sizes-1 ) ; ` + `     od ; ` + `     ` + `     add(boolvector , offset+numberzeros+1 ) ; ` + `     ` + `     if ( sizes = 1 ) then ` + `       return boolvector ; ` + `     else ` + `       orderg:=orderg - numberzeros-1 ; sizes:=sizes-1 ; numbers:=numbers - low ; ` + `       offset:=offset+numberzeros+1 ; ` + `     fi ; ` + `   od ; ` + ` end ; `    ' '' ''    the differences to the subgroup search algorithm are : first we compute the set @xmath300 of all possible values of @xmath81 , @xmath82 and @xmath301 , that means @xmath302 .",
    "then we use all observations from section [ sec : concepts ] to reduce the search space .",
    "now we order the elements of @xmath300 decreasing by their multiplicative size ( we use this to stop the algorithm in the case that we found a tpp triple , because it is the biggest tpp triple of @xmath0 ) . in the outer ` for ` loop we go through all @xmath303 and generate in the inner loops the @xmath304 subsets @xmath17 that contain the identity of @xmath0 and the @xmath19 s and @xmath18 s in the same way .",
    ".... for i in w do    for nrs in [ 1 .. binomial(size(g)-1,i[1]-1 ) ] do      indexs : = generatesubset(size(g),i[1],nrs ) ;      for nrt in [ 1 .. binomial(size(g)-1,i[2]-1 ) ] do        indext : = generatesubset(size(g),i[2],nrt ) ;        if size(intersection(indexs , indext ) ) = 1 then          for nru in [ 1 .. binomial(size(g)-1,i[3]-1 ) ] do            indexu : = generatesubset(size(g),i[3],nru ) ;            if ( size(intersection(indexs , indexu ) ) = 1                and size(intersection(indext , indexu ) ) = 1 ) then              s : = aslist(g){indexs } ; ... ....    of course one has to use a tpp test for subsets ( see the previous section ) .",
    "in this section we present some computational results of the brute - force search with subsets and subgroups .",
    "the values in the following tables are :    * i d : the ` idsmallgroup ` in the smallgroups library .",
    "* @xmath96 resp .",
    "@xmath305 : the @xmath306-character capacity ( see definition [ def : dg ] ) . * @xmath66 resp .",
    "@xmath59 : the tpp capacity ( see definition [ def : tppcap ] ) . * @xmath307 resp .",
    "@xmath276 : the tpp subgroup capacity ( see definition [ def : tppcap ] ) . * @xmath308 resp .",
    "@xmath309 : the so called _ tpp ratio _ or _ tpp subgroup ratio _ , resp . : a parameter that measures the size of the realized problem in relation to the group size . *",
    "@xmath310 : the parameters of the biggest realized problem .",
    "our search algorithms allow us to compute all the relevant information about tpp triples of subsets for all nonabelian groups of order less than @xmath2 .",
    "the results are shown in table [ tab : small ] ( computing tpp triples of subsets in groups of order greater than @xmath311 is too time consuming at present ) .",
    ".computational results for all nonabelian groups of order less than 25 .",
    "( if @xmath59 and @xmath276 differ , the corresponding values are printed bold . ) [ cols= \" < , < , < , < , < , < , < , < \" , ]      at the moment many computations are still running on three supercomputers at the universities of jena and halle - wittenberg .",
    "a first goal is to compute the tpp subgroup capacity @xmath276 for all nonabelian groups of order up to 1000 ( except 512 and 768 ) .",
    "we also hope that there exists an algorithm that can effectively produce _ basic _ subsets , because the computation of the tpp _ subset _ capacity @xmath59 has a complexity of @xmath312 without such an algorithm and it takes @xmath313 hours to compute @xmath59 for one group of order @xmath311 .",
    "all results ( that means of the subset search for groups of order up to 24 and of the subgroup search of groups up to order 1000 ) can be found at ` http://www2.informatik.uni-halle.de/da/hedtke/tpp/ ` .",
    "note that some results are still missing , because they are in computation at the moment .",
    "we would like to thank david j. green , peter m. neumann , luke oeding and maxim petrunin for their helpful comments and suggestions .",
    "we also thank the friedrich - schiller - university jena and the martin - luther - university halle - wittenberg which allowed us to use their supercomputers .",
    "e. burnett , ` indexing and enumerating subsets of a given size ' , blog _ the lowly programmer _ ,",
    "entry from april 2010 , ` http://www.thelowlyprogrammer.com/2010/04/indexing-and-enumerating-subsets-of.html ` .",
    "h. cohn and c. umans , ` a group - theoretic approach to fast matrix multiplication ' , _ proceedings of the 44^th^ annual symposium on foundations of computer science _ , 11 - 14 october 2003 , cambridge , ma , ieee computer society , pp .",
    "438 - 449 .",
    "h. cohn , r. kleinberg , b. szegedy and c. umans , ` group - theoretic algorithms for matrix multiplication ' , _ proceedings of the 46^th^ annual symposium on foundations of computer science _",
    ", 23 - 25 october 2005 , pittsburgh , pa , ieee computer society , pp .",
    "379 - 388 ."
  ],
  "abstract_text": [
    "<S> in 2003 cohn and umans introduced a group - theoretic approach to fast matrix multiplication . </S>",
    "<S> this involves finding large subsets of a group @xmath0 satisfying the triple product property ( tpp ) as a means to bound the exponent @xmath1 of matrix multiplication .    </S>",
    "<S> we present two new characterizations of the tpp , which are useful for theoretical considerations and for tpp test algorithms . with this </S>",
    "<S> we describe all known tpp tests and implement them in algorithms . </S>",
    "<S> we also compare their runtime . </S>",
    "<S> furthermore we show that the search for subgroup tpp triples of nontrivial size in a nonabelian group can be restricted to the set of all nonnormal subgroups of that group . </S>",
    "<S> finally we describe brute - force search algorithms for maximal subgroup and subset tpp triples . </S>",
    "<S> in addition we present the results of the subset brute - force search for all groups of order less than @xmath2 and selected results of the subgroup brute - force search for @xmath3-groups , @xmath4 and @xmath5 . </S>"
  ]
}