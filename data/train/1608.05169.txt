{
  "article_text": [
    "an alignment is a pair @xmath1 , where @xmath2 is a finite set and @xmath3 is a collection of subsets of @xmath2 satisfying    1 .",
    "@xmath4 and @xmath5 , and 2 .",
    "@xmath3 is closed under intersections .",
    "the elements of the set @xmath3 of an alignment are called ` closed . '",
    "let @xmath1 be an alignment and let @xmath6 .",
    "the hull of @xmath7 , denoted @xmath8 , is defined as @xmath9    the hull operator @xmath10 is a closure operator , that is , it satisfies    a.   @xmath11 , b.   @xmath12 for each set @xmath13 , c.   for sets @xmath13 and @xmath14 , if @xmath15 then @xmath16 , and d.   for each set @xmath13 , @xmath17 .",
    "let @xmath18 be a graph .",
    "a set @xmath19 is @xmath0-closed if @xmath20    for a graph @xmath18 , the pair @xmath21 , where @xmath3 is the collection of @xmath0-closed sets in @xmath18 , is an alignment .",
    "two players play the @xmath0-game on a graph by alternately selecting vertices . at the start of the game",
    "all vertices are unlabeled . during",
    "the game players label vertices . prior to every move",
    ", the set of labeled vertices is @xmath0-closed .",
    "let @xmath22 denote the set of labeled vertices .",
    "a move consists of labeling a , previously unlabeled , vertex @xmath23 . in effect , the new set of labeled vertices becomes @xmath24 .    according to the sprague - grundy theory , when the @xmath0-game is played on a finite graph",
    ", there is a winning strategy for one of the two players .",
    "if there is a polynomial - time algorithm to decide whether there is a winning strategy for one of the two players , we call the game decidable ( in polynomial time ) . for example",
    ", when the graph is a clique with at least two vertices , then the second player wins the game .",
    "that is so because the convex hull of any two vertices in a clique is @xmath25 .",
    "another example where the game is easy to decide is the case where the playground is a star .    assume the graph is a star , @xmath26 .",
    "then player one has a winning strategy if and only if the number of leaves , @xmath27 , is even .",
    "assume the graph is a star with an even number of leaves .",
    "a winning move for player one is to choose the center .",
    "assume the playground is a star with an odd number of leaves .",
    "the winning strategy for player two is to choose a vertex which leaves the playground with an even number of unlabeled leaves .    in his acclaimed paper on monophonic alignments",
    ", duchet defines a _ graph - alignment _ as a pair @xmath28 , where @xmath18 is a connected graph and @xmath29 is a collection of subsets of @xmath25 such that @xmath30 is an alignment and the following additional property holds .",
    "@xmath31    the legal moves in the are restricted such that the @xmath0-closed sets induce connected subgraphs .",
    "prior to every move , the playground is a connected graph @xmath18 , with a set @xmath22 of labeled vertices satisfying    1 .",
    "@xmath22 is @xmath0-closed , and 2 .   @xmath32 $ ] , that is the subgraph induced by l , is connected .",
    "a legal move in the connected @xmath0-game is the selection of an unlabeled vertex @xmath23 such that @xmath24 induces a connected graph . in other words , a move is legal if the selected vertex is at distance at most two from the set @xmath22 .",
    "to analyze a game played on graphs , one makes use of the ` game graph . '",
    "this is a directed graph @xmath33 , constructed as follows .",
    "each node in the game graph represents a playground , and there is an arc @xmath34 if the playground corresponding with the node @xmath35 can be reached from the playground corresponding with @xmath36 in one move .    the grundy function @xmath37 is defined on @xmath38 as follows .",
    "if @xmath39 is a sink , that is , a node without outgoing arcs , the grundy value is defined as @xmath40 . for any other node , say @xmath41 , the grundy value is defined as @xmath42 thus , @xmath43 is the smallest nonnegative integer which is not attained by any node in @xmath38 that can be reached from @xmath41 in one move .",
    "we allude that the grundy function is sometimes called the @xmath44-function , which stands for _ minimal excluded value_.    let @xmath45 be the initial playground , before any move has been made .",
    "the grundy value @xmath46 is the grundy value of the game @xmath38 .",
    "the following theorem is easy to check .",
    "[ thm grundy value ] let @xmath45 be the node representing the initial playground .",
    "then player one has a winning strategy if and only if @xmath47 .",
    "notice that , from any node @xmath41 with @xmath48 , a player can move to a node @xmath39 with @xmath40 .",
    "consider a finite collection of games @xmath49 .",
    "the product game @xmath50 is the game where a player is allowed to make a move in _",
    "one _ of the games @xmath51 .",
    "let @xmath52 denote the grundy value for game @xmath51 .",
    "the nim - sum @xmath53 is obtained as follows .",
    "write each grundy value @xmath52 in binary and add them up , _ without a carry_. thus , for example , @xmath54 .",
    "grundy s theorem is the following .",
    "[ thm grundy ] the grundy value @xmath55 for the product game @xmath18 is @xmath56    [ thm connected p_3 on trees ] there exists a polynomial - time algorithm that decides if the first player has a winning strategy in the connected @xmath0-game played on a tree .",
    "let @xmath14 be a tree .",
    "consider a playground @xmath57 , which is characterized by a connected subtree of @xmath14 .",
    "a branch is a subtree with a maximal number of edges , which contains one node of the subtree @xmath57 as a leaf .",
    "we call the leaf the root of the branch .",
    "let @xmath58 be the branches that have at least one edge .",
    "denote the grundy value of @xmath59 as @xmath52 .",
    "the grundy value of @xmath57 is the grundy value of @xmath60 . by grundy s theorem  [ thm grundy ] , this is the nim - sum of the grundy values @xmath52 , that is , @xmath61    for each possible initial move @xmath62 of the first player , the algorithm computes the grundy value @xmath46 , via equation  , by dynamic programming on the branches .    by theorem  [ thm grundy value ] , this proves the theorem .",
    "[ thm p_3 game on paths ] there exists an @xmath63 algorithm that decides the @xmath0-game on paths .    consider the set of paths with @xmath64 up to @xmath65 vertices .",
    "create a set in which each path occurs 4 times as it is bordered by a labeled vertex on either side or not .",
    "so , the set contains @xmath66 elements . for each element ,",
    "the grundy value is computed by considering all possible moves .",
    "each move divides the path into at most two , strictly smaller elements .",
    "the algorithm processes the paths in the set in order of increasing length .    as for now",
    ", we do nt have an easy formula which tells whether @xmath67 is won for player one .",
    "there exists a polynomial - time algorithm to decide th @xmath0-game on cycles .",
    "when the cycle has an even number of vertices , the winning strategy for player two is to choose the vertex opposite player one s choice .    the odd case is , unless it is @xmath68 , less trivial",
    ". we can reduce it to paths and use theorem  [ thm p_3 game on paths ] as follows .",
    "consider a cycle with an odd number @xmath69 vertices .",
    "the first player selects some arbitrary vertex . split the selected vertex in two vertices , creating a path with two selected vertices at the ends , and @xmath70 unselected vertices between them . according to theorem  [ thm p_3 game on paths ]",
    ", there is an @xmath63 algorithm to decide this game .",
    "the first player has a winning strategy when the game is played on a cycle @xmath71 if and only if @xmath72 .    we show how to calculate the grundy value .",
    "consider a cycle with @xmath65 vertices .",
    "let @xmath73 be the grundy value when the playground is a path in @xmath71 with @xmath74 vertices",
    ". then @xmath75 .",
    "there can not be a playground with one vertex not selected , thus we need to leave @xmath76 undefined .",
    "next , we have @xmath77 since the game ends in the next move when two vertices are not selected .",
    "subsequently , we find @xmath78    it is now easy to prove , by induction , that , for @xmath79 , @xmath80 this implies that @xmath81    let @xmath82 be the grundy value for the cycle with @xmath65 vertices .",
    "then @xmath83 this proves the theorem .",
    "we denote a path with @xmath65 vertices as @xmath67 .",
    "the first player has a winning strategy in the connected @xmath0-game played on a path with @xmath65 vertices if @xmath84 .",
    "let @xmath85 denote the grundy value for the path with one of the endpoints labeled .",
    "we claim that @xmath86 this claim is readily checked via the recurrence @xmath87    let @xmath82 be the grundy value for the path @xmath88 .",
    "then we have that @xmath89 it follows that , for @xmath84 , @xmath90 this proves the theorem .",
    "a @xmath91 denotes a path with four vertices .",
    "a cograph is a graph without induced @xmath91",
    ".    one characterization of cographs is that , every induced subgraph with at least two vertices is either a join or a union of two smaller cographs .",
    "there exists an algorithm to decide the @xmath0-game in polynomial time on cographs .",
    "let @xmath18 be a cograph .",
    "when @xmath18 is disconnected , the game reduces to the sum of the games played on the components of @xmath18 . by the sprague - grundy theorem ,",
    "the grundy value of the game is the nim - sum of the grundy values played on the components .",
    "assume that @xmath18 is connected .",
    "then @xmath18 is the join of two smaller cographs @xmath92 and @xmath93 , that is , all vertices of @xmath92 are adjacent to all vertices of @xmath93 .",
    "the algorithm considers all possible playgrounds after both players have made a move .",
    "first assume that both players chose a vertex of @xmath92 .",
    "then all vertices of @xmath93 are added to the hull after the second move .",
    "when @xmath93 has at least two vertices , then the game is over , since all vertices of @xmath92 are also in the @xmath0-closure .",
    "assume that @xmath93 has only one vertex .",
    "notice that this vertex is universal , that is , it is adjacent to all other vertices .",
    "let @xmath94 be the components of @xmath92 .",
    "the components that contain @xmath23 and @xmath95 are subsets of the hull .",
    "the components that do not contain @xmath23 nor @xmath95 are added one by one in every subsequent move .",
    "it follows that , player one wins the game from this position if and only if the number of components that do not contain @xmath23 or @xmath95 is odd .",
    "assume that player one makes his first move in @xmath92 and that player two makes his first move in @xmath93 .",
    "then the next move adds a vertex of @xmath92 or @xmath93 and this reduces the analysis to one of the previous cases .",
    "this proves the theorem .",
    "a ladder is the cartesian product of two paths , one of which has only one edge .",
    "a ladder is denoted as @xmath96 and it has @xmath97 vertices and @xmath98 edges .",
    "it consists of two paths @xmath67 of length @xmath70 and a perfect matching .",
    "the edges of the matching are called the rungs and the two paths @xmath67 are called the ringers , or rails or stiles .    the first player has a winning strategy for the connected @xmath0-game on a ladder @xmath99 if and only if @xmath100 .",
    "first assume that @xmath100 .",
    "partition the ladder into dominoes , that is , @xmath101 . to win the game , player",
    "one starts in a corner of the ladder , that is , a vertex of degree two .",
    "it is easy to check that , no matter what player two plays , player one always completes the first , and then every subsequent domino of the ladder .",
    "now assume that @xmath102 .",
    "assume player one starts in a corner .",
    "then player two chooses a vertex in the other stile , such that the remaining rungs can be partitioned into dominoes .",
    "then , when player one enters a domino , player two can choose a vertex which encloses the domino in the @xmath0-closure .",
    "assume player one starts in some middle rung .",
    "player two chooses a vertex in the other stile , such that the two numbers of rungs below and above the @xmath0-closure are equivalent modulo 3 .",
    "each next move adds either one or two rungs to the @xmath0-closure .",
    "the strategy of player two is to keep the numbers of remaining rungs modulo three , below and above the @xmath0-closure the same .",
    "a caterpillar is a tree that contains a dominating path , that is , a path such that every other vertex is connected to a vertex in the path .",
    "alternatively , a caterpillar is a tree without the subdivision of a star @xmath103 as a subgraph .",
    "the algorithm that decides the connected @xmath0-game for trees simplifies a little bit in case the tree is a caterpillar . in this section",
    "we shortly describe this simplification .    the dominating path of the caterpillar is called the backbone and we denote it by @xmath38 .",
    "assume that @xmath38 is a path with @xmath65 vertices , @xmath104 .",
    "we assume that the endpoints of the backbone are leaves of the caterpillar .",
    "the vertices of the backbone are numbered , @xmath105 .",
    "let the number of feet adjacent to the point @xmath106 be denoted as @xmath107 .",
    "there exists an efficient algorithm to decide if the first player has a winning strategy in the connected @xmath0-game played on a caterpillar .",
    "we analyze all possible positions after two moves have been made .",
    "first assume that the first and second move are the selection of two feet @xmath23 and @xmath95 adjacent to the same vertex @xmath106 in the @xmath38 .",
    "in that case , the @xmath0-closure is the @xmath0 , @xmath108 .",
    "the remaining game is split into a caterpillar with backbone @xmath109 $ ] , one caterpillar with backbone @xmath110 $ ] , and @xmath111 edges with @xmath106 as an endpoint .",
    "the grundy value for this position is the nim - sum of the games described above , with initially labeled vertex @xmath106 .",
    "note that the nim - sum of the @xmath111 edges with labeled vertex @xmath106 is @xmath112    assume that the first move is the selection of a foot @xmath23 adjacent to @xmath106 , and the second move is the selection of the vertex @xmath106 .",
    "the remaining game is split into a game on a caterpillar with backbone @xmath109 $ ] , one caterpillar with backbone @xmath110 $ ] , and @xmath113 games on edges with endpoint @xmath106 .",
    "assume that the first move is the selection of a foot @xmath23 adjacent to @xmath106 and the second move is the selection of the vertex @xmath114 .",
    "the @xmath0-closure is @xmath115 , and the game is split into a game on the caterpillars with backbones @xmath109 $ ] and @xmath116 $ ] , the @xmath113 edges consisting of the remaining leaves adjacent to @xmath106 and the @xmath117 edges connecting leaves to @xmath114 .",
    "the first two moves are the selection of vertices @xmath106 and @xmath114 .",
    "the game is split into two caterpillars , one with backbone @xmath109 $ ] and one with backbone @xmath116 $ ] , and @xmath107 and @xmath117 edges connecting leaves with @xmath106 and @xmath114 respectively .",
    "the remaining case is where two vertices @xmath106 and @xmath118 of the backbone are selected .",
    "the game is split , similar as to that described above .",
    "it follows that the game can be decided by an algorithm that performs dynamic programming on caterpillars with backbones that are subpaths of @xmath38 with one end a labeled vertex of @xmath38 and the other end the point @xmath64 or @xmath65 .",
    "this algorithm can be implemented to run in @xmath119 time ; precisely speaking , it is the number of these subpaths of @xmath38 .",
    "this proves the theorem .",
    "a graph is chordal if it has no induced cycle of length more than three .    the following lemma is easily checked . for a proof see , eg , centeno et al .",
    "if @xmath23 and @xmath95 are two vertices at distance at most two in a biconnected chordal graph @xmath18 , then @xmath120    there exists a polynomial - time algorithm to decide the connected @xmath0-game on connected chordal graphs .",
    "the algorithm considers all possible initial playgrounds after the first two moves have been made .",
    "if the graph is not connected , then the vertices that are not in the initial playground , are partitioned into components for which the neighborhood is a cutvertex .",
    "consider the components , rooted at the cutvertices . by the sprague - grundy theorem ,",
    "the grundy value of the playground is the nim - sum of the games played at these components .",
    "it follows that this is computable in polynomial time by dynamic programming on the biconnected components .",
    "in this section we prove that the connected @xmath0-game on cacti is decidable in polynomial time .    a cactus is a graph without the diamond as a minor .",
    "equivalently , a graph is a cactus if every edge is a subset of at most one cycle of the graph .",
    "also , a graph is a cactus if every biconnected component is an edge or a cycle .",
    "there exists a polynomial - time algorithm to decide the connected @xmath0-game on cacti .",
    "we show that the grundy value is computable in polynomial time .",
    "the algorithm tries all possible vertices as a first move for player one . consider a vertex @xmath23 as a first move .",
    "assume that @xmath23 is in a cycle and let @xmath121 be a cycle containing @xmath23 .",
    "first assume that @xmath23 is a cutvertex .",
    "consider the components of @xmath122 augmented with the vertex @xmath23 . by the sprague - grundy theorem",
    ", the grundy value is the nim - sum of the grundy values of the games played on the augmented components .    for the augmented component that contains @xmath121 , the children of the playground @xmath123 are the playgrounds that are edges that have @xmath23 as an endpoint and those that are @xmath0 s with @xmath23 as an endpoint .",
    "for each of these playgrounds , if it contains a cutvertex @xmath95 , the game is split into components of @xmath124 augmented with @xmath95 .",
    "the grundy value is the nim - sum of these games . for each of the components that do not contain vertices of @xmath125 ,",
    "the algorithm recursively computes the grundy value .",
    "notice that the initial playground for each component is either a single vertex @xmath95 , or an edge incident with @xmath95 .",
    "when it is an edge , the playground extends greedily into maximal biconnected chordal subgraph .",
    "there are only @xmath126 different playgrounds induced on @xmath121 . for each playground",
    "@xmath127 on @xmath121 the algorithm computes the @xmath44 value from its children .",
    "if a child includes a cutvertex , the game is split . for the augmented components that share a cutvertex with @xmath121 , with a playground that is either the cutvertex , or an edge incident with the cutvertex ,",
    "the grundy value is computed recursively .",
    "a graph is outerplanar if it has a plane embedding with all vertices lying on the outerface . alternatively ,",
    "outerplanar graphs are defined as follows .",
    "a graph is outerplanar if it does not contain @xmath128 or @xmath129 as a minor .",
    "there exists a polynomial - time algorithm that decides the connected @xmath0-game on outerplanar graphs .",
    "the proof is similar to that for the cacti .",
    "for ease of description , we assume that @xmath18 is a biconnected outerplanar graph .",
    "the algorithm that we describe extends in an obvious manner for cases when @xmath18 contains cutvertices .",
    "when @xmath18 is biconnected , it forms a ` tree of cycles , ' which can be defined recursively as follows .",
    "any cycle is a biconnected outerplanar graph .",
    "a biconnected outerplanar graph @xmath130 , with an outerface @xmath131 , and a cycle @xmath132 , a new biconnected outerplanar graph is formed by identifying the endpoints of an edge with the endpoints of an edge in @xmath131 .",
    "this recursively defines all biconnected outerplanar graphs .",
    "all minimal separators are edges and for each edge @xmath133 , @xmath134 contains exactly two components .",
    "we call the components with the edge @xmath133 added to it , the augmented components at the edge @xmath133 .    for each separator @xmath133 , and for each augmented component @xmath132 at @xmath133 , the algorithm recursively computes the grundy value for the playground that consists of @xmath133 , and for the playground consisting of @xmath133 plus one additional vertex adjacent to an endpoint of @xmath133 . when the cycle incident with @xmath133 is a triangle , the playground greddily extends .    to process @xmath18",
    ", the algorithm tries all vertices @xmath23 as an initial playground @xmath57 .",
    "the children of @xmath57 are edges incident with @xmath23 and @xmath0 s with @xmath23 as an endpoint .",
    "when a child contains a minimal separator , the game splits into two games played on the augmented components . in that case",
    ", the grundy value is the nim - sum of the two games on the augmented components .",
    "consider a playground @xmath57 that contains only edges of the outerface @xmath131 .",
    "then @xmath57 is a simple path .",
    "the children are all extensions of @xmath57 with an edge or a @xmath0 .",
    "an extension @xmath41 that contains a minimal separator splits the game , and the grundy value is the nim - sum of the two augmented components , each with the induced paths @xmath135 and @xmath136 as a playground .    for the children @xmath41 that extend @xmath57 with edges along @xmath131 , the grundy value is computed by dynamic programming .",
    "finally , for the playground @xmath57 , the grundy value is computed as the @xmath44 function of the grundy values of its children .",
    "this proves the theorem .",
    "gavril initiated the research on circular - arc graphs .",
    "these graphs are the intersection graphs of arcs on a circle .",
    "mcconnell showed that this class can be recognized in linear time .",
    "whilst intervals on the real line satisfy the helly property , this is no longer true for circular arcs on a circle .",
    "that is , there could be a triangle in the graph without any point on the circle that is in all three arcs .",
    "gavril defines a helly circular - arc graph as a graph for which the clique matrix has the circular 1s property for columns .",
    "also the helly circular - arc graphs are recognizable in linear time .",
    "a graph is a helly circular - arc graph if it has a circular maximal clique arrangement .",
    "there exists a polynomial - time algorithm to decide the connected @xmath0-game on helly circular - arc graphs .",
    "obviously , we may assume that the graph is connected .    to reduce the circular problem to a linear one",
    ", the algorithm considers all possible first two moves .    when the first two vertices are selected , these two vertices and their common neighbors are labeled .",
    "the closure recursively labels all vertices in cliques that contain two previously labeled vertices .",
    "there is at least one maximal clique in which all vertices are labeled , and so , the graph can be regarded as an interval graph , i.e. a graph that has an linear order for its maximal cliques",
    ".    there may exist one or two vertices that appear in ( consecutive ) maximal cliques on the lefthand side of the linear order and in the maximal cliques on the righthand side .",
    "these vertices do not appear in consecutive maximal cliques , but , since they are labeled , they can be ignored in subsequent procedures .",
    "the vertices that are not in the initial playground are partitioned into two types of components :    1 .",
    "the components that have a neighborhood consisting of a single labeled cutvertex , and 2 .",
    "the components of which the neighborhood consists of two labeled cutvertices that border the consecutive cliques of the component .    for a component of the first type",
    ", it takes exactly one additional move to label all its vertices .",
    "components of the second type are handled recursively by considering all possible extra moves , rooted at distance at most two from either the cutvertex on the righthand side or the lefthand side .",
    "this shows that the grundy values of components can be computed recursively . by dynamic programming",
    ", the program calculates the grundy value of any sequence of components .",
    "the grundy value for the circular arc graph is computed by considering all possible first two moves .    with a different analysis , the algorithm for helly circular - arc graphs would accommodate general circular - arc graphs . instead of considering max cliques when analyzing the first two moves , we consider _ helly cliques _ , a maximal set of arcs overlapping in one point of the circle .",
    "after the selection of the first two vertices , there is at least one helly clique in which all vertices ( arcs ) are labeled . for",
    "any such labeled helly clique , it cuts the circle with respect to the labeling so that the circle becomes an arc @xmath7 .",
    "the rest of the input arcs ( on @xmath7 ) can be regarded as intervals on a line .",
    "thus the graph of the rest of input becomes an interval graph and the algorithm for helly circular - arc graphs proceeds .",
    "there exists a polynomial - time algorithm to decide the connected @xmath0-game on general circular - arc graphs .",
    "we are aware of only very few problems that are solvable in polynomial time on outerplanar graphs , and that resist efficient algorithms for graphs of treewidth two . at the moment",
    "we do not have an efficient algorithm to decide the connected @xmath0-game for graphs of treewidth two .",
    "we are interested in the connected @xmath0-game on convex geometries .",
    "these are alignments satisfying the anti - exchange property .",
    "we are primarily interested in the question under which additional conditions the connected @xmath0-game becomes decidable on convex geometries ( see  @xcite ) ."
  ],
  "abstract_text": [
    "<S> without further ado , we present the @xmath0-game . the @xmath0-game is decidable for elementary classes of graphs such as paths and cycles . from an algorithmic point of view , the connected @xmath0-game is fascinating . </S>",
    "<S> we show that the connected @xmath0-game is polynomially decidable for classes such as trees , chordal graphs , ladders , cacti , outerplanar graphs and circular arc graphs . </S>"
  ]
}