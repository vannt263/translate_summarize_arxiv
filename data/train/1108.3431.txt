{
  "article_text": [
    "in @xcite , an alternative approach to generate languages by means of p systems was proposed .",
    "an appropriate representation for a string was built by means of a membrane structure and then the string is generated by visiting the membrane structure according to a well - specified strategy .",
    "p systems with active membranes were considered , allowing membrane creation or division or duplication and dissolution , where the output of a computation may be obtained either by visiting the tree associated with the membrane structure , or by following the traces of a specific object , called traveller , or sending out the objects . for each of these approaches , characterizations of recursively enumerable languages",
    "were provided based on p systems that use different sets of operations for modifying the membrane structure .",
    "the output of a computation was considered not as a single entity , which is either sent out of the system or collected in a specific membrane .",
    "instead the output is given by catenating the content or the labels of each region of the whole configuration reached by the system at the end of a computation .",
    "they considered a general class of p systems with active membranes equipped with membrane division , creation , duplication and dissolution operations .",
    "membrane duplication means that , starting from an existing membrane , we can create a new membrane which encloses the existing one .",
    "then three different approaches for collecting the output of a computation was given namely visiting the tree associated with the membrane structure , following the traces of a special object ( traveller traces ) , and sending out the objects ( external mode ) .",
    "the trace mode and external mode were investigated earlier in the literature . for the external mode ,",
    "the main difference with respect to this approach is that , before sending out the objects , we need to prepare an appropriate membrane structure where the output objects are supposed to be distributed according to a specific strategy .",
    "the approach presented in @xcite , is related to the problem of finding alternative ways to define the output of the computation in membrane systems .",
    "in fact , this method puts emphasis on the structure of the membranes whose role is important in successful computations .    in this paper",
    ", we investigate the computational power of p systems with active membranes equipped with membrane creation and membrane dissolution restricted to elementary membranes operating according to all four output modes .",
    "also we analyse the power of p systems without membrane dissolution operating according to the three identified output modes .",
    "we need the label changing feature of _ in _ type rules to obtain the universality in the second case .",
    "the paper is organized as follows .",
    "section 3 recalls the definition of p systems with active membranes together with the definition of three different output modes . in section 3.1 we state the results from @xcite concerning the power of p systems with active membranes generating languages of membrane structures . in sections 4 and 5 ,",
    "we prove characterizations of recursively enumerable languages by means of p systems with active membranes equipped with the membrane creation and dissolution operations .",
    "in this section we introduce some formal language theory notions which will be used in this paper ; for further details , refer to @xcite .    for an alphabet @xmath0 ,",
    "we denote by @xmath1 the set of all strings over @xmath0 , including the empty one , denoted by @xmath2 . by @xmath3",
    "we denote the family of recursively enumerable languages .    in our proofs in the following sections we need the notion of a _ matrix grammar with appearance checking_. such a grammar is a construct @xmath4 , where @xmath5 are disjoint alphabets , @xmath6 , @xmath7 is a finite set of sequences of the form @xmath8 , of context free rules over @xmath9 , and @xmath10 is a set of occurrences of rules in @xmath7 ( @xmath11 is the nonterminal alphabet , @xmath12 is the terminal alphabet , @xmath13 is the axiom , while the elements of @xmath7 are called matrices ) .    for @xmath14",
    "we write @xmath15 if there is a matrix @xmath16 in @xmath7 and the strings @xmath17 , are such that @xmath18 , and , for all @xmath19 , either ( 1 ) @xmath20 , @xmath21 , for some @xmath22 , or ( 2 ) @xmath23 does not appear in @xmath24 , and the rule @xmath25 appears in @xmath10 .",
    "( the rules of a matrix are applied in order , possibly skipping the rules in @xmath10 if they can not be applied - one says that these rules are applied in the _ appearance checking mode _ ) .",
    "the language generated by @xmath26 is defined by @xmath27 .",
    "the family of languages of this form is denoted by @xmath28 .",
    "it is known that @xmath29 .",
    "we say that a matrix grammar with appearance checking @xmath4 is in the _ z - binary normal form _ if @xmath30 , with these sets mutually disjoint , the matrices of type 3 can also be of the form @xmath31 , and the only matrix of type 4 ( terminal matrix ) is of the form @xmath32 .    according to lemma 1.3.7 in @xcite , for each matrix grammar",
    "there is an equivalent matrix grammar in the binary normal form .",
    "next we define a computing device which is equivalent in power with turing machine .",
    "such a machine runs a program consisting of numbered instructions of several simple types .",
    "several variants of register machines with different number of registers and different instruction sets were shown to be computationally universal ( e.g. , see  @xcite ) .",
    "an _ @xmath33-register machine _ is a construct @xmath34 where :    * @xmath33 is the number of registers , * @xmath35 is the set of instruction labels , * @xmath36 is the initial label , * @xmath37 is the final label , and * @xmath38 is a set of labelled instructions of the form @xmath39 , where @xmath40 is an operation on register @xmath41 of @xmath7 , @xmath42 are labels from the set @xmath35 ( which labels the instructions in a one - to - one manner ) ,    the machine is capable of the following instructions :    * @xmath43 : add one to the contents of register @xmath41 and proceed to instruction @xmath44 or to instruction @xmath45 in the deterministic variants usually considered in the literature we demand @xmath46 .",
    "* @xmath47 : if register @xmath41 is not empty , then subtract one from its content and go to instruction @xmath44 , otherwise proceed to instruction @xmath48 . * _ halt _ : stop the machine .",
    "this additional instruction can only be assigned to the final label @xmath37 .    when considering the generation of languages , we use the model of a _",
    "register machine with output tape _",
    "( e.g. , see @xcite ) , which also uses a tape operation :    * @xmath49 : write symbol @xmath50 on the the output tape and go to @xmath51 .",
    "we then also specify the output alphabet @xmath12 in the description of the register machine with output tape , i.e. , we write @xmath52 .",
    "let @xmath53 be a recursively enumerable language .",
    "then @xmath54 can be generated by a register machine with output tape and with 2 registers .",
    "we consider a general class of p systems with active membranes equipped with membrane division , creation , duplication and dissolution operation .",
    "these operations represent abstractions of cellular biology processes of mitosis and membrane formation through self - assembling lipid bilayers @xcite .",
    "we recall the definition of this p system from @xcite .",
    "[ defn1 ] a _ p system with active membranes _ is a construct @xmath55 where    1 .",
    "@xmath0 is an alphabet ; its elements are called objects ; 2 .",
    "@xmath56 is an alphabet ; its elements are called labels ; the symbol @xmath57 is the label of the skin membrane ; 3 .",
    "@xmath58 is a membrane structure containing @xmath59 membranes ; the skin membrane is labelled by 0 and all other membranes are labelled with symbols in @xmath56 ; 4 .",
    "@xmath60 is the multiset associated with the skin membrane ; 5 .",
    "@xmath61 , for @xmath62 , is a multiset of objects associated with the membrane @xmath63 ; 6 .",
    "@xmath64 is a finite set of rules of the form : * @xmath65_i$ ] with @xmath66 , and @xmath67 ( inside a membrane @xmath63 an object @xmath50 is replaced by a multiset @xmath68 ) , * @xmath69_i { \\rightarrow}b[_i]_i$ ] with @xmath70 , and @xmath67 ( an object is sent out from a membrane , maybe modified ) , * @xmath71_i { \\rightarrow}[_ib]_i$ ] with @xmath70 , and @xmath67 ( an object is moved into a membrane , the object may be modified ) , * @xmath72_j]_i$ ] with @xmath70 , @xmath67 , and @xmath73 ( _ membrane creation : _ inside a membrane @xmath63 , starting from an object @xmath50 , a new elementary membrane @xmath74 is created , which contains an object @xmath75 ) , * @xmath69_i { \\rightarrow}[_kb]_k[_jc]_j$ ] with @xmath76 , @xmath77 ( _ membrane division : _ the membrane @xmath63 , in the presence of an object @xmath50 , is divided into two new membranes labelled by @xmath78 and @xmath74 , and the content ( objects and sub - membranes ) of the membrane @xmath63 is copied into each new membrane where the object @xmath50 is respectively replaced by @xmath75 or @xmath79 ) , * @xmath69_i { \\rightarrow}[_kb[_jc]_j]_k$ ] with @xmath70 , @xmath80 ( _ membrane duplication _ the membrane @xmath63 , in the presence of an object @xmath50 , is duplicated , that is , the label @xmath63 is changed into @xmath74 , the object @xmath50 is replaced by @xmath79 , and a new upper membrane labelled by @xmath78 is created , which contains an object @xmath75 ) , * @xmath69_i { \\rightarrow}a$ ] with @xmath81 , and @xmath82 ( _ membrane dissolution : _ in the presence of an object @xmath50 , the membrane @xmath63 is dissolved and its content ( objects and sub - membranes ) is released in the directly upper region ) .    in the above system we have : an initial membrane structure with @xmath83 membranes that contain @xmath83 multisets associated with the regions , and a finite set of evolution rules .",
    "moreover , as usual in p systems with active membranes , we also consider a distinct alphabet @xmath56 which is used to label the membranes and is necessary to precisely identify the rules that can be applied inside every membrane . in general , in a p system with active membranes , the number of membranes can be increased and decreased arbitrarily and there can be many different membranes with the same label , which can be distinguished from each other only by the objects they contain .",
    "thus , the labels from @xmath56 make possible to keep finite the representation of a p systems by specifying a set of `` types '' , each one with its own set of rules , for the membrane possibly present in the system at any time . a membrane with no further membrane inside is called an _ elementary membrane_.    the set @xmath64 contains rules for modifying both the number and the distribution of objects inside the system and the number and type of membranes which define the structure of the system .",
    "the former rules are expressed in the form of transformation and communication rules ( rules of type ( a ) , ( b ) and ( c ) ) whereas the latter ones ( rules of type ( d ) , ( e ) , ( f ) and ( g ) ) comprise the operations of : membrane creation , membrane division , membrane duplication and membrane dissolution , respectively .    here",
    ", we do not consider the feature of membrane polarization for p systems with active membranes as reported in the literature .",
    "however , in the above definition , rules of more general forms are used that are able to change the labels of the membranes involved .    as usual ,",
    "p systems with active membranes evolve according to a non - deterministic maximal parallel strategy",
    ". rules of type ( a ) ,",
    "( b ) , ( c ) , and ( d ) are applied to all the objects which they can be applied to . rules of type ( e ) , ( f ) , ( g ) are applied to all the membranes which they can be applied to .",
    "obviously , in each step , the same membrane can not be used by more than one rule of type ( e ) , ( f ) , ( g ) ( i.e. , a membrane can not simultaneously be divided , duplicated and dissolved ) .",
    "more precisely , we assume that , in each step , the objects first evolve by means of rules of type ( a ) , ( b ) , ( c ) , ( d ) , and then the membranes evolve according to rules of type ( e ) , ( f ) , ( g ) .",
    "a computation is obtained by applying rules of @xmath64 starting from the initial configuration .",
    "a computation is said successful if it reaches a configuration where no more rules can be applied .",
    "we illustrate the application of rules ( d ) - ( g ) by examples . in the following examples , @xmath84 are possible contents of membranes and @xmath85 are objects from @xmath0 .",
    "the effect of the rules on some membrane structures is below :    * @xmath86_i$ ] + _ rule of type ( d ) _ :",
    "we get @xmath87_j]$ ] + _ rule of type ( e ) _ : we get @xmath88_j~[_kp~c]_k$ ] + _ rule of type ( f ) _ : we get @xmath89_j]_k$ ] * @xmath90_i~q]_j$ ] + _ rule of type ( g ) _ : we get @xmath91_j$ ]    the result of a computation may be considered in various forms , which are called output modes .    * _ visiting the tree .",
    "_ the result of a computation is the set of strings obtained by visiting the tree associated with the membrane structure in the final configuration .",
    "the resulting set of strings is obtained by concatenating either the labels of the membranes or the objects inside these membranes , in the order they are visited .",
    "if a membrane contains more than one object , then we consider all the possible permutations of these objects .",
    "when we collect the labels , we do not consider the skin membrane , which is always labelled by 0 .",
    "this output mode is denoted either by _ lab _ , if we collect the labels , or by _ obj _ if we collect the objects . *",
    "_ traveller traces .",
    "_ we assume that the initial configuration contains a special object @xmath92 , called the _",
    "traveller _ , inside some membrane .",
    "the traveller @xmath92 can be moved by using rules of type ( b ) or ( c ) , but it can not be modified by any rule . the resulting string is obtained as follows : initially we start with the empty string associated with the initial configuration , then whenever the object @xmath92 crosses a membrane labelled by @xmath63 , we add the symbol @xmath63 at the rightmost side of the current string .",
    "this output mode is denoted by _",
    "traces_. * _ external mode .",
    "_ the resulting set of strings is defined as follows : we start initially with an empty string outside of the membrane system ; whenever an object is sent out of the skin membrane , we add such an object to the rightmost end of each current string . if some objects are sent out from the skin membrane at the same time , we consider the string formed by all the permutations of these objects . this output mode is denoted by _",
    "we denote by @xmath93 , with @xmath94 , @xmath95 , the family of languages generated by p systems with active membranes with at most @xmath83 membranes in the initial configuration that use at most @xmath33 different labels for the membranes ( the cardinality of @xmath96 is at most  @xmath33 ) , that apply rules of the forms specified in @xmath97 , and has the output mode @xmath98 . as usual ,",
    "if the value of @xmath83 , or the value of @xmath33 , is not bounded , it is replaced by the symbol @xmath99 . moreover , when the rules of type @xmath100 , and @xmath101 are allowed only for elementary membranes , the corresponding operations are denoted by @xmath102 , and @xmath103 .",
    "also , when the rules of type @xmath104 and @xmath105 are allowed to change the label of the membrane , the corresponding operations are denoted by @xmath106 and @xmath107 .      in this section",
    ", we present some results from @xcite .",
    "the universality of p systems with membrane division and membrane dissolution with respect to the output modes _ lab , obj _ was given by the following theorem .",
    "@xmath108 .",
    "a similar result holds for p systems with membrane division and membrane dissolution restricted to elementary membranes .",
    "@xmath109 .    in the proofs of the above theroem , the final configuration has membrane structure of depth 2 .",
    "so a `` predefined '' order among the membranes is necessary to get a suitable representation for the strings of a language .",
    "such an approach does not work well in the case of _ traces _ and _ external _ output modes .",
    "the following theorem shows that such a problem can be avoided by considering the operation of _ membrane duplication_.    @xmath110 and + @xmath111 .",
    "the following cases were left open in @xcite : + the computational power of    1 .",
    "p systems with membrane creation and membrane dissolution ( or membrane division and membrane dissolution ) operating according to the external mode or the traces mode ; 2 .",
    "p systems without membrane dissolution operating according to any of the three identified output modes ; 3 .",
    "p systems with membrane creation and membrane dissolution restricted to elementary membranes .",
    "we settle some of the above cases in the coming sections .",
    "the following is a characterization of recursively enumerable languages by means of p systems with active membranes equipped with the membrane creation and dissolution operation restricted to elementary membranes operating according to all output modes .",
    "@xmath112 and + @xmath113 .",
    "* proof : * the proof is based on the simulation of a register machine @xmath114 .",
    "we construct a p system with active membranes that simulates the register machine @xmath7 such that @xmath115_0 , l^{\\prime}_0 , r)\\ ] ] where @xmath116 @xmath117_0 , [ _ 0l^{{\\prime}{\\prime}}_0 { \\rightarrow}l_0 ] { \\mid}l_0 \\mbox { is the initial label of m } \\}\\\\ & \\cup & \\{[_0 1^{\\prime}{\\rightarrow}[_1]_1]_0 , [ _ 0 2^{\\prime}{\\rightarrow}[_2]_2]_0 , [ _ 0 \\$^{\\prime}{\\rightarrow}[_\\$]_\\$]_0\\}\\\\ & \\cup & \\{[_0l { \\rightarrow}b_il^{\\prime}]_0 , [ _ 0l { \\rightarrow}b_il^{{\\prime}{\\prime}}]_0 { \\mid}l:(add(i ) , l^{\\prime } , l^{{\\prime}{\\prime } } ) , i=1,2\\}\\\\ & \\cup & \\{b_i[_i]_i { \\rightarrow}[_ia_i]_i { \\mid}i=1,2\\}\\\\ & \\cup & \\{l { \\rightarrow}l_i , l_i[_i]_i { \\rightarrow}[_il_i]_i { \\mid}l:(sub(i ) , l^{\\prime } , l^{{\\prime}{\\prime } } , i=1,2\\}\\\\ & \\cup & \\{a_i[_3]_3 { \\rightarrow}[_3a_i]_3 , [ _ 3l^{\\prime}_i { \\rightarrow}l^{{\\prime}{\\prime}}]_3 { \\mid}l:(sub(i ) , l^{\\prime } , l^{{\\prime}{\\prime } } , i=1,2\\}\\\\ & \\cup & \\{[_3a_i]_3 { \\rightarrow}\\lambda , [ _ 3 l^{{\\prime}{\\prime}}_i { \\rightarrow}l^{{\\prime}{\\prime}{\\prime}}_i]_3 , [ _ 3l^{{\\prime}{\\prime}{\\prime}}_i]_3 { \\rightarrow}l^{iv}_i { \\mid}l:(sub(i ) , l^{\\prime } , l^{{\\prime}{\\prime } } , i=1,2\\}\\\\ & \\cup & \\{[_il^{{\\prime}{\\prime}{\\prime}}_i]_i { \\rightarrow}l^{{\\prime } } , [ _ il^{iv}_i]_i { \\rightarrow}l^{{\\prime}{\\prime}}{\\mid}l:(sub(i ) , l^{\\prime } , l^{{\\prime}{\\prime } } , i=1,2\\}\\\\ & \\cup & \\ { [ _ 0l { \\rightarrow}(a , l^{\\prime})]_0 { \\mid}l:(write(a),l^{\\prime})\\}\\\\ & \\cup & \\{(a , l^{\\prime})[_b]_b { \\rightarrow}[_b(a , l^{\\prime})]_b { \\mid}b \\in t \\cup \\{\\$\\}\\}\\\\ & \\cup & \\ { [ _ \\$(a , l^{\\prime})]_\\$ { \\rightarrow}\\overline{(a , l^{\\prime } ) } , [ _ b\\overline{(a , l^{\\prime } ) } { \\rightarrow}[_al^{\\prime}\\$]_a]_b { \\mid}b \\in t\\}\\\\ & \\cup & \\{[_a \\$ { \\rightarrow}[_\\$]_\\$]_a { \\mid}a \\in t\\}\\\\ & \\cup & \\{l_h[_1]_1 { \\rightarrow}[_1l_h]_1 , [ _ 1 l_h]_1 { \\rightarrow}l_h^{\\prime } , l_h^{\\prime}[_2]_2 { \\rightarrow}[_2l_h^{\\prime}]_2 , [ _ 2 l_h^{\\prime}]_2 { \\rightarrow}l_h^{{\\prime}{\\prime}}\\}\\\\ & \\cup & \\{[_0a_i { \\rightarrow}\\lambda]_0 { \\mid}i = 1,2\\}\\\\ & \\cup & \\{l_h^{{\\prime}{\\prime}}[_4]_4 { \\rightarrow}[_4l_h^{{\\prime}{\\prime}}]_4 , [ _ 4 l_h^{{\\prime}{\\prime}}]_4 { \\rightarrow}\\lambda\\}\\end{aligned}\\ ] ] let us see how the p system @xmath118 works . initially , we have the configuration @xmath119_4l_0^{\\prime}]_0 $ ] .",
    "we apply the first 5 rules to produce the configuration @xmath120_1[_2]_2[_\\$]_\\$]_0 $ ] .",
    "the value of the two registers @xmath121 , are represented by the number of objects @xmath122 inside the corresponding membrane @xmath63 .",
    "the membrane labelled  @xmath123 is used to prepare an appropriate membrane structure where the output objects are supposed to be distributed according to a specific strategy .",
    "the add instruction @xmath124 is simulated as follows .",
    "we use the rule @xmath125 or @xmath126 to create an object @xmath127 corresponding to the register @xmath63 . now",
    "the object @xmath127 changes to @xmath122 while entering inside membrane @xmath63 .    in order to simulate a subtract instruction @xmath128",
    ", we send the object @xmath129 into the membrane  @xmath63 and then proceed in the following way : the object @xmath129 creates a membrane with label 3 and an object @xmath130 .",
    "if the register @xmath63 is not empty , then the object @xmath122 will enter membrane 3 and dissolve it ; otherwise the object @xmath131 dissolves membrane 3 there by changing to @xmath132 .",
    "if the register @xmath63 is not empty , then we have @xmath131 in membrane @xmath63 ; otherwise @xmath132 .",
    "now we will send @xmath133 or @xmath51 to the skin membrane depending upon the presence of @xmath131 or @xmath132 in membrane @xmath63 respectively .",
    "this will end the simulation of the sub instruction .",
    "the simulation of the instruction @xmath134 is done as follows .",
    "first we use the rule @xmath135 in the skin membrane . the object",
    "@xmath136 travels deep inside the nested membrane structure until it reaches the membrane @xmath137_\\$$ ] . in membrane @xmath123",
    ", the object @xmath136 changes to @xmath138 and dissolves the membrane .",
    "now the object @xmath138 will create a membrane labelled @xmath50 which contains the objects @xmath133 and @xmath123 .",
    "the object @xmath133 moves toward the skin membrane whereas the object @xmath123 will create a membrane @xmath137_\\$$ ] inside the membrane @xmath139_a$ ] .",
    "the object @xmath133 starts the simulation of the instruction labelled @xmath133 after reaching the skin membrane .",
    "the presence of object @xmath37 in the skin membrane will start the clean - up process .",
    "it will remove both the membranes 1 , 2 and the objects inside them .",
    "finally the object @xmath140 dissolves membrane 4 which contains the object @xmath92 .    at last",
    ", we have a configuration of the form @xmath141_\\$]_{x_h}\\ldots]_{x_2}]_{x_1}]_0 $ ] with @xmath142 , for some @xmath143 .",
    "now we move the traveller @xmath92 by using rules of the form @xmath144_a { \\rightarrow}[_at]_a$ ] , with @xmath145 , and in this way we generates exactly the string @xmath142 .    _",
    "external mode : _ for this mode we consider a p systems @xmath118 whose initial configuration is @xmath146_0 $ ] , where @xmath36 is the starting label of the register machine @xmath7 .",
    "we simulate the register machine @xmath7 in the same way as described above for the traveller traces , and during the clean - up process the object @xmath147 changes to @xmath148 and dissolves membrane 2 instead of changing to @xmath140 .",
    "thus , we have a configuration @xmath149_\\$]_{x_h}\\ldots]_{x_2}]_{x_1}]_0 $ ] , and we can generate the string @xmath142 by using the following rules :    * @xmath150_a { \\rightarrow}[_af^{\\prime}]_a$ ] with @xmath151 * @xmath152_a$ ] with @xmath151 * @xmath153_b { \\rightarrow}a[_b]_b$ ] with @xmath154 * @xmath155_0 { \\rightarrow}a[_0]_0 $ ] with @xmath151    by applying these rules , we can send the objects out of the skin membrane in the right order    we can easily modify the above system @xmath118 to obtain a final configuration of the form@xmath156_\\$]_{x_h}\\ldots]_{x_2}]_{x_1}]_0 $ ] for some @xmath143 , and @xmath142 .",
    "if we visit the tree associated with this membrane structure either by collecting the labels or by collecting the objects , then we get @xmath142 in both cases.@xmath157    the universality of p systems with membrane division and membrane dissolution restricted to elementary membranes with respect to the _ traces _ and _ external _ output modes can be proved in a similar fashion provided the rules of type _ endocytosis _ were allowed .",
    "because a combination of rules of type _ division _ and _ endocytosis _ can simulate rules of type _ creation_.",
    "a similar result holds for p systems that use only the membrane creation operation avoiding the operation membrane dissolution for all output modes except _",
    "traveller traces_. but we need the label changing feature for _ in _ type rules to obtain universality .",
    "@xmath158 .",
    "* proof : * let @xmath4 , with @xmath159 , be a matrix grammar with appearance checking in z - binary normal form where the matrix of type 1 is @xmath160 , the matrices of type 2 are labelled , in one to one manner , by @xmath161 , and matrices of type 3 by @xmath162 .",
    "we construct a p system with active membranes that simulates the matrix grammar @xmath26 as follows : @xmath163_0 , s , r)\\ ] ] where @xmath164 @xmath165_a]_0 , [ _ a x_a { \\rightarrow}[_\\$ x^{\\prime}_a]_\\$]_a { \\mid}(s { \\rightarrow}xa ) \\in m\\}\\\\ & \\cup & \\{[_\\$x^{\\prime}_a]_\\$ { \\rightarrow}x^{\\prime}_a[_\\$]_\\$ , [ _ a x^{\\prime}_a]_a { \\rightarrow}x [ _ a]_a { \\mid}(s { \\rightarrow}xa ) \\in m\\}\\\\ & \\cup & \\{[_0 x { \\rightarrow}y_i]_0 { \\mid}x , y \\in n_1 , 1 \\leq i \\leq n\\}\\\\ & \\cup & \\{y_i[_y]_y { \\rightarrow}[_yy_i]_y { \\mid}y \\in n_2 \\cup t , y \\neq a , m_i : ( x { \\rightarrow}y , a { \\rightarrow}x ) \\in m ,    1 \\leq i \\leq k\\}\\\\ & \\cup & \\{y_i[_\\$]_\\$ { \\rightarrow}[_\\#\\#]_\\ # { \\mid}y \\in n_1 , 1 \\leq i \\leq k\\}\\\\ & \\cup & \\{y_i[_a]_a { \\rightarrow}[_ay^{\\prime}_i]_a { \\mid}m_i : ( x { \\rightarrow}y , a { \\rightarrow}a ) , 1 \\leq i \\leq k\\}\\\\ & \\cup & \\{[_yy^{\\prime}_i]_y { \\rightarrow}y^{\\prime}_i[_y]_y { \\mid}y \\in n_2 \\cup t \\cup \\{\\$\\ } , 1 \\leq i \\leq n\\}\\\\ & \\cup & \\{[_0y^{\\prime}_i { \\rightarrow}y]_0 { \\mid}y \\in n_1 , 1 \\leq i \\leq n\\}\\\\ & \\cup & \\{y_i[_a]_a { \\rightarrow}[_{a_1}y_{i , a_2}]_{a_1 } { \\mid}m_i:(x { \\rightarrow}y , a { \\rightarrow}a_1a_2 ) , 1 \\leq i \\leq k\\}\\\\ & \\cup & \\{y_{i , b}[_c]_c { \\rightarrow}[_by_{i , c}]_b { \\mid}b , c \\in n_2 \\cup t \\cup \\{\\$\\ } , 1 \\leq i \\leq k\\}\\\\ & \\cup & \\{[_b y_{i , \\$ } { \\rightarrow}[_\\$y^{\\prime}_i]_\\$]_b { \\mid}y \\in n_1 , b \\in n_2 , 1 \\leq i \\leq k\\}\\\\ & \\cup & \\{y_i[_a]_a { \\rightarrow}[_\\#\\#]_\\ # , y_i[_\\$]_\\$ { \\rightarrow}[_\\$y^{\\prime}_i]_\\$ { \\mid}m_i:(x { \\rightarrow}y , a { \\rightarrow}\\ # ) , k+1 \\leq i \\leq n\\}\\\\ & \\cup & \\{[_\\#\\ # { \\rightarrow}\\#]_\\ # , [ _ 0 z { \\rightarrow}\\lambda]_0\\}\\end{aligned}\\ ] ]    initially , we have the configuration @xmath166_0 $ ]",
    ". we simulate the unique matrix of type 1 in @xmath26 by applying the first 4 rules to produce the configuration @xmath167_\\$]_a]_0 $ ] .",
    "we need the membrane labelled by @xmath123 in order to identify the end of the string .",
    "assume that we have a configuration of the form @xmath168_\\$]_{x_h}\\ldots]_{x_2}]_{x_1}]_0 $ ] after some steps , where @xmath143 , and @xmath169 is a sentential form of @xmath26 , with @xmath170 .",
    "now we apply the rule @xmath171_0 $ ] , for some @xmath19 .",
    "we have two cases according to the values of @xmath63 .",
    "_ case 1 _ : @xmath172 . in this case",
    ", we are simulating a matrix of type 2 , i.e. , @xmath173 . by using the rule @xmath174_y { \\rightarrow}[_yy_i]_y$ ] , we move @xmath175 deeper inside the nested membranes .",
    "if there is no membrane labelled by @xmath176 in the current configuration , then we use the rule @xmath177_\\$ { \\rightarrow}[_\\#\\#]_\\#$ ] .",
    "the symbol @xmath178 generates an infinite computation by means of the rule @xmath179_\\#$ ] .",
    "if some membrane labelled @xmath176 is present in the current configuration , then we have two cases .    _ case a ) _ : @xmath180 , i.e. , @xmath181 .",
    "+ in this case , we use the rule @xmath182_a { \\rightarrow}[_ay^{\\prime}_i]_a$ ] .",
    "the above rule changes the object @xmath175 into @xmath183 and also changes the label @xmath176 into @xmath50 .",
    "now the object @xmath183 travel towards the skin membrane . once it reaches the skin , it becomes @xmath184 .",
    "_ case b ) _ : @xmath185 , i.e. , @xmath186 .",
    "+ in this case , we use the rule @xmath182_a { \\rightarrow}[_{a_1}y_{i , a_2}]_{a_1}$ ] . here the object @xmath175 changes to @xmath187 and the label @xmath176 changes to @xmath188 .",
    "further we use the rule @xmath189_c { \\rightarrow}[_by_{i , c}]_b$ ] to move the object @xmath190 towards the membrane labelled  @xmath123 .",
    "while moving the objects @xmath190 , we change the labels of the membrane remembering the previous label in their second component .",
    "once we got the object @xmath191 in the innermost membrane , we use it to create a membrane labelled  @xmath123 containing the object @xmath183 .",
    "after this we move @xmath183 towards the skin membrane .",
    "it will become @xmath184 once it reaches the skin membrane .",
    "_ case 2 _ : @xmath192 .",
    "that is we are simulating a matrix of type 3 ( @xmath193 ) . in this case",
    ", we use the object @xmath175 to check for the presence of a membrane labelled @xmath176 in the current configuration .",
    "if there exists a membrane labelled @xmath176 , the object @xmath175 is moved inside by the rule @xmath182_a { \\rightarrow}[_\\#\\#]_\\#$ ] .",
    "this will lead to an infinite computation that yields no result .",
    "otherwise , the object @xmath175 becomes @xmath183 after reaching the innermost membrane labelled by @xmath123 .",
    "now we move the object @xmath183 towards the skin membrane where it changes to @xmath184 .",
    "finally , we erase the symbol @xmath194 in the skin membrane , once it was introduced and the computation halts .",
    "now by applying rules as in the previous theorem , we send out the objects in the right order.@xmath157",
    "this paper explores the idea of defining membrane systems that are able to build up a membrane structure that encodes some meaningful information proposed by @xcite .",
    "we investigated the computational power of p systems with membrane creation and dissolution rules operating according to the external and traces mode .",
    "also we proved the universality of p systems with membrane creation alone , but we allow the label changing feature for _ in _ type rules . at the moment , we are unable to characterize the power of p systems with active membranes equipped with membrane creation alone .    * acknowledgements .",
    "* m. gheorghe and r. rama are grateful to the royal academy of engineering which through a grant supporting _ exchanges with india and china _ ( 2010 ) , partially funded this research .",
    "mg has been also supported by cncsis grant no .",
    "643/2009 , _ an integrated evolutionary approach to formal modelling and testing_. the authors would like to thank the anonymous reviewers for the comments made on an early version of this paper .",
    "1 b. alberts et al .",
    ", _ molecular biology of the cell _ , garland science , 2002 .",
    "a. alhazov , r. freund and a. riscos - nez , one and two polarizations , membrane creation and objects complexity in p systems , _ proc . of synasc",
    "2005 _ , timisoara , romania , 385394 .",
    "f. bernardini and m. gheorghe , languages generated by p systems with active membranes , _ new generation computing _ , 22(4 ) , 2004 , 311329 . j. dassow and gh .",
    "pun , _ regulated rewriting in formal language theory _ , springer - verlag , 1989 . m.l .",
    "minsky , _ computation : finite and infinite machines _",
    ", prentice hall , 1967 .",
    "pun , _ membrane computing : an introduction _ , springer - verlag , berlin , 2002 .",
    "r. rama and h. ramesh , on generating trees by p systems with active membranes , _ proc . of synasc 2005 _ , timisoara , romania , 462466 .",
    "g. rozenberg and a. salomaa ( eds . ) , _ handbook of formal languages _ ( 3 volumes ) , springer - verlag , 1997 ."
  ],
  "abstract_text": [
    "<S> in @xcite , p systems with active membranes were used to generate languages , in the sense of languages associated with the structure of membrane systems . here </S>",
    "<S> , we analyze the power of p systems with membrane creation and dissolution restricted to elementary membranes , p systems without membrane dissolution operating according to certain output modes . </S>",
    "<S> this leads us to characterizations of recursively enumerable languages . </S>"
  ]
}