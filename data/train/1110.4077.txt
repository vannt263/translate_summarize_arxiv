{
  "article_text": [
    "many graph problems that are know to be np - hard in general are fixed parameter tractable when parameterised by the treewidth @xmath0 of the graph , that is they can be solved in time @xmath1 for some function @xmath2 . often there even exists a linear - time algorithm to solve the problem on graphs of fixed treewidth @xcite .",
    "this is the case for a number of graph colouring problems .",
    "although it is np - hard to determine whether an arbitrary graph is 3-colourable , the chromatic number of a graph of treewidth at most @xmath0 can be computed in linear time ( arnborg and proskurowski @xcite ) .",
    "similarly , while it is np - hard to determine the edge - chromatic number of cubic graphs ( holyer @xcite ) and more generally @xmath3-regular graphs for any @xmath4 ( leven and galil @xcite ) , this problem can again be solved in linear time on graphs of bounded treewidth ( zhou , nakano and nishizeki @xcite ) .",
    "the pattern is the same for the total colouring problem : this is np - hard even for regular bipartite graphs ( mcdiarmid and snchez - arroyo @xcite ) but there exists a linear - time algorithm to solve the problem on graphs of bounded treewidth ( isobe , zhou and nishizeki @xcite ) .",
    "however , list versions of such problems can not always be solved so efficiently on graphs of bounded treewith .",
    "the well - known list variant of vertex colouring is clearly np - hard in general ( as it generalises the standard colouring problem ) , but can also be solved in polynomial time on graphs of fixed treewidth @xmath0 , and even in linear time on such graphs if the number of colours is bounded ( jansen and scheffler @xcite ) .",
    "however , in contrast with the linearity result for chromatic number , it has been shown that when the number of colours is unbounded list colouring is w[1]-hard and so not ( up to certain complexity theoretic assumptions ) fixed parameter tractable ( fellows , fomin , lokshtanov , rosamond , saurabh , szeider and thomassen @xcite ) .",
    "the list variants of edge - colouring and total colouring are harder still on graphs of bounded treewidth : both problems are np - hard on series - parallel graphs ( zhou , matsuo and nishizeki @xcite ) , which have treewidth at most two , and list edge - colouring is also np - hard on outerplanar graphs ( marx @xcite ) , another class of graphs with treewidth at most two .",
    "perhaps surprisingly , however , it can be easier to determine the minimum length of lists required to guarantee the existence of a proper list colouring for a graph @xmath5 than to determine whether @xmath5 admits a proper colouring with a particular set of lists . alongside the negative result about the complexity of list colouring , in @xcite the authors also use courcelle s theorem @xcite to prove the following result .",
    "the list chromatic number problem , parameterised by the treewidth bound @xmath6 , is fixed - parameter tractable , and solvable in linear time for any fixed @xmath6 .",
    "[ chi , chi_l ]    in section [ edgechromaticnumber ] we show that the same pattern extends to the list chromatic number problems for edge - colouring and total colouring : although these problems are both np - hard on graphs of treewidth two , it is possible to determine the list edge chromatic number and list total chromatic number of graphs of bounded treewidth in linear time , answering an open question from @xcite .    the situation is similar for the problem of determining whether a given graph contains a hamilton path .",
    "hamilton path is known to be computationally difficult in general , remaining np - hard when restricted to planar , cubic , 3-connected graphs ( garey , johnson and tarjan @xcite ) or bipartite graphs ( krishnamoorthy @xcite ) , but can be solved in linear time on graphs of bounded treewidth ( arnborg and proskurowski @xcite ) . in section [ listhampath ]",
    "we consider a list variant of the problem , and show that it is unlikely to be fixed parameter tractable , even parameterised by pathwidth , answering another open question from @xcite .    in the remainder of this section",
    "we define formally the problems whose complexity we consider , and give some background on the treewidth bound and the theory of parameterised complexity .",
    "a _ proper edge - colouring _ of a graph @xmath5 is an assignment of colours to the edges of @xmath5 so that no two incident edges receive the same colour .",
    "if a set @xmath7 of lists of permitted colours is given , a _ proper list edge - colouring _ of @xmath8 is a proper edge - colouring of @xmath5 in which each edge @xmath9 receives a colour from its list @xmath10 .",
    "list edge chromatic number _ of @xmath5 , @xmath11 , is the smallest integer @xmath12 such that , for any assignment of colour lists to the edges of @xmath5 in which each list has length at least @xmath12 , there exists a proper list edge - colouring of @xmath5 .",
    "we define the following problem . + list edge chromatic number + _ input : _ a graph @xmath13 .",
    "+ _ question : _ what is @xmath11 ?",
    "+ a _ proper total colouring _ of a graph @xmath14 is an assignment of colours to the vertices and edges of @xmath5 such that no two adjacent vertices or incident edges have the same colour , and no edge has the same colour as either of its endpoints .",
    "if a set @xmath15 of lists of permitted colours is given , a _ proper list total colouring _ of @xmath8 is a proper total colouring of @xmath5 in which every vertex and edge receives a colour from its list .",
    "the _ list total chromatic number _ of @xmath5 , @xmath16 , is the smallest integer @xmath12 such that , for any assignment of colour lists to the vertices and edges of @xmath5 in whcih each list has length at least @xmath12 , there exists a proper list total colouring of @xmath5 .",
    "we define the following problem .",
    "+ list total chromatic number + _ input : _ a graph @xmath13 .",
    "+ _ question : _ what is @xmath16 ? +",
    "we also consider a list version of hamilton path , introduced in @xcite , where each vertex has a list of permissible positions on the path .",
    "+ list hamilton path + _ input : _ a graph @xmath13 , and a set of lists @xmath17 of permitted positions .",
    "+ _ question : _ does there exist a path @xmath18\\ldots p[|g|]$ ] in @xmath5 such that , for @xmath19 , we have @xmath20}$ ] ? +      we consider the complexity of these problems restricted to graphs of bounded treewidth or pathwidth . given a graph @xmath5",
    ", we say that @xmath21 is a _ tree decomposition _ of @xmath5",
    "if @xmath22 is a tree and @xmath23 is a collection of non - empty subsets of @xmath24 ( or _ bags _ ) , indexed by the nodes of @xmath22 , satisfying :    1 .",
    "@xmath25 , 2 .   for every @xmath26",
    ", there exists @xmath27 such that @xmath28 , 3 .   for every @xmath29 ,",
    "if @xmath30 is defined to be the subgraph of @xmath22 induced by nodes @xmath6 with @xmath31 , then @xmath30 is connected .",
    "the _ width _ of the tree decomposition @xmath21 is defined to be @xmath32 , and the _ treewidth _ of @xmath5 is the minimum width over all tree decompositions of @xmath5 .",
    "a _ path decomposition _ is a tree decomposition @xmath33 in which the indexing tree is a path , and the _ pathwidth _ of @xmath5 is the minimum width over all path decompositions of @xmath5 .    given a tree decomposition @xmath21 of @xmath5 , we assume that an arbitrary node @xmath34 is chosen to be the _ root _ of @xmath22 , and define the _ height _ , @xmath35 of any @xmath27 to be the distance from @xmath36 to @xmath6 . for any @xmath37 , we then define @xmath38 to be the unique node @xmath6 of minimum height such that @xmath31 ( i.e.  @xmath38 is the node of minimal height in the subtree @xmath39 ) .",
    "we make use of the following bound on the order of a tree indexing a tree decomposition .",
    "let @xmath5 be a graph of order @xmath40 and treewidth @xmath0 .",
    "then there exists a width @xmath0 tree decomposition @xmath21 for @xmath5 with @xmath41 .",
    "[ bounded - tree ]    let @xmath42 be any width @xmath0 tree decomposition of @xmath5 .",
    "we will transform this decomposition into one with the required properties by repeatedly contracting edges of @xmath43 . for @xmath44 , if @xmath45 is an edge of @xmath46 such that either @xmath47 or @xmath48 , we obtain @xmath49 by contracting the edge @xmath45 to a single node @xmath50 , and set @xmath51 ( note @xmath52 ) , with all other bags of @xmath53 the same as @xmath54 .",
    "if there is no such edge @xmath45 , we stop and set @xmath55 .",
    "we claim that the decomposition @xmath21 , obtained when this process terminates , is as required .",
    "observe that for every node @xmath27 we must have @xmath56 for some @xmath37 : this is trivially true for the root ( any vertex in its bag will do ) , and if any other @xmath27 is not equal to @xmath38 for some @xmath29 then all vertices in @xmath57 also belong to the bag indexed by the parent of @xmath6 , and so we would have contracted this edge .",
    "thus we have a surjective mapping from @xmath24 to @xmath58 , implying that @xmath41 , as required .",
    "we shall assume throughout that tree decompositions of this form are given .",
    "graphs having treewidth at most @xmath0 can alternatively be characterised as _",
    "partial @xmath0-trees _ , as in @xcite .",
    "it follows immediately from this equivalent definition that if a graph @xmath5 of order @xmath40 is a partial @xmath0-tree ( i.e.  it has treewidth at most @xmath0 ) then @xmath5 has at most @xmath59 edges .",
    "when considering the class of problems which are solvable in polynomial time on graphs of treewidth at most @xmath0 , we aim , as mentioned above , to distinguish those which can be solved in time @xmath60 . problems in this subclass are said to be _ fixed parameter tractable _ , parameterised by treewidth .",
    "a standard method of showing that a problem does _ not _ belong to this subclass ( and so the best known algorithm has running time @xmath61 for some unbounded function @xmath2 ) is to prove that it is w[1]-hard  the analogue of proving a problem to be np - hard  which implies , up to similar complexity theoretic assumptions , that the problem is not fixed parameter tractable . background on the theory of parameterised complexity can be found in @xcite .    just as with proving that a problem is np - hard",
    ", the primary method for showing the intractability of a parameterised problem is to give a reduction from another problem that is known to be w[1]-hard .",
    "if we know that the parameterised decision problem @xmath62 with parameter @xmath0 is difficult and want to show that @xmath63 is just as hard then , given any instance @xmath64 of @xmath62 , we want to be able to construct an instance @xmath65 of @xmath63 such that @xmath65 is a yes - instance for @xmath63 if and only if @xmath64 is a yes - instance for @xmath62 .",
    "the idea is to show in this way that if @xmath63 is fixed parameter tractable ( with parameter @xmath66 ) then @xmath62 must also be ( with parameter @xmath0 ) .",
    "thus we need to show not only that @xmath65 can be computed from @xmath64 in time polynomial in @xmath67 and that @xmath68 is bounded by a polynomial function of @xmath67 ( as we would for an np - hardness reduction ) , but also that @xmath66 is bounded by some function ( not necessarily polynomial ) of @xmath0 .    one useful w[1]-hard problem , which we use for a reduction in section [ listhampath ] ,",
    "is @xmath69 ( shown to be w[1]-hard by fellows , hermelin , rosamond and vialette in @xcite ) : given a graph @xmath5 , properly coloured with @xmath0 colours , the problem is to determine whether there exists a clique in @xmath5 containing one vertex of each colour .",
    "the main result of this section is the following theorem .",
    "list edge chromatic number and list total chromatic number are fixed parameter tractable , parameterised by the treewidth bound @xmath0 , and are solvable in linear time for any fixed @xmath0 .",
    "[ fpt ]    the key technical tools we use to prove this result are theorems [ chi=ch=delta ] and [ ch=delta+1 ] , which determine the list edge chromatic number and list total chromatic number respectively for graphs with fixed treewidth and large maximal degree .",
    "we begin by recalling some existing results about the edge chromatic number and list edge chromatic number of a graph .",
    "it is easy to see that , for any graph @xmath5 , we have @xmath70 where @xmath71 denotes the edge chromatic number of @xmath5 and @xmath72 is the maximum degree of @xmath5 . for the edge chromatic number , we have the much stronger result of vizing :    @xmath71 is equal to either @xmath72 or @xmath73 .    in order to give a linear time algorithm to solve edge chromatic number on graphs of bounded treewidth , zhou , nakano and nishizeki @xcite prove that , for graphs of fixed treewidth @xmath0 and maximum degree @xmath74 , the edge chromatic number must in fact be equal to @xmath75 .",
    "there is no direct analogue of vizing s theorem for the list edge chromatic number . the _ list ( edge )",
    "colouring conjecture _ ( discussed in @xcite ) asserts that @xmath76 for any graph @xmath5 , and would immediately imply vizing s conjecture ( 1976 ) that @xmath77 .",
    "however , neither of these conjectures has been proved except for certain special classes of graphs , and the best general bound on the list edge chromatic number is due to kahn .    for any @xmath78 ,",
    "if @xmath72 is sufficiently large , @xmath79    in theorem [ chi=ch=delta ] , we show that for a graph @xmath5 of bounded treewidth and large maximum degree , @xmath80 proving a special case of the list ( edge ) colouring conjecture . using this result , the list edge chromatic number problem on graphs of bounded treewidth can be reduced to the case in which the maximum degree of the graph is bounded .",
    "we prove an analogous result for the list total chromatic number .",
    "once again , there exist trivial bounds for the ( list ) total chromatic number of an arbitrary graph : @xmath81 where @xmath82 denotes the total chromatic number of the graph .",
    "it is a long - standing but unproved conjecture ( the _ total colouring conjecture _",
    "@xcite ) that @xmath83 in theorem [ ch=delta+1 ] we prove that for a graph @xmath5 of bounded treewidth and large maximum degree , @xmath84 and so once again it suffices to solve the problem for graphs with bounded maximum degree .",
    "of course , there is a correspondence between these colouring problems and the vertex - colouring problems discussed above . for any graph @xmath13 ,",
    "the _ line graph _ @xmath85 of @xmath5 has vertex set @xmath86 , and @xmath87 are adjacent in @xmath85 if and only if @xmath9 and @xmath2 are incident in @xmath5 . then solving ( for example ) list edge chromatic number for the graph",
    "@xmath5 is equivalent to solving list chromatic number for @xmath85 .",
    "similarly , we define the _ total graph _ @xmath88 of @xmath5 to have vertex set @xmath89 , and edge set @xmath90 , and solving list total chromatic number for @xmath5 is then equivalent to solving list chromatic number for @xmath88 .",
    "however , as the treewidth of @xmath85 or @xmath88 can in general be arbitrarily large even when @xmath5 itself has small treewidth , results about the parameterised complexity of vertex colouring problems do not immediately transfer to the edge and total colouring cases .",
    "if the maximum degree of @xmath5 is bounded , however , the following result ( proved in @xcite ) tells us that the treewidth of @xmath85 is bounded by a constant multiple of that of @xmath5 .",
    "let @xmath5 be a graph of treewidth at most @xmath0 , and maximum degree at most @xmath75 .",
    "then @xmath85 has treewidth at most @xmath91 .",
    "[ line - treewidth ]    a similar result holds for the treewidth of @xmath88 .",
    "let @xmath5 be a graph of treewidth at most @xmath0 , and maximum degree at most @xmath75",
    ". then @xmath88 has treewidth at most @xmath92 .",
    "[ total - treewidth ]    if @xmath21 is a width @xmath0 tree decomposition for @xmath5 , it is easy to verify that @xmath93 , where @xmath94 , is a tree decomposition of @xmath88 of width at most @xmath92 .",
    "we will need two further results for our proofs .",
    "first , a theorem of galvin concerning the list edge chromatic number of bipartite graphs :    let @xmath5 be a bipartite graph",
    ". then @xmath95 [ bipartite ]    finally , we make use of an algorithm of bodlaender :    for all @xmath96 , there exists a linear - time algorithm that tests whether a given graph @xmath13 has treewidth at most @xmath0 and , if so , outputs a tree - decomposition of @xmath5 with treewidth at most @xmath0 .",
    "[ bod - linear - decomp ]      in this section we prove our two technical results about the list edge chromatic number and list total chromatic number of graphs with bounded treewidth and large maximum degree , and then give fixed parameter algorithms to solve list edge chromatic number and list total chromatic number on graphs of bounded treewidth .",
    "let @xmath5 be a graph with treewidth at most @xmath0 and @xmath97 .",
    "then @xmath98 .",
    "[ chi=ch=delta ]    as @xmath99 , it is sufficient to prove that , if @xmath5 is a graph of treewidth at most @xmath0 , we have @xmath100 .",
    "suppose this does not hold , and let @xmath5 be a counterexample with as few edges as possible , so there exists a set @xmath101 of colour - lists , all of length @xmath102 , such that there is no proper list edge - colouring of @xmath8 .",
    "we may assume without loss of generality that @xmath5 contains no isolated vertices and so , by edge - minimality of @xmath5 , we must have @xmath103 for any proper subgraph @xmath104 of @xmath5 .",
    "we may assume that every edge @xmath105 is incident with at least @xmath106 others : if @xmath9 is incident with fewer than @xmath106 other edges then we can extend any proper list edge - colouring of @xmath107 to a proper list edge - colouring of @xmath8 .",
    "we will show that , under this assumption , there must exist a nonempty set of vertices @xmath108 such that any proper list edge - colouring of @xmath109 can be extended to a proper list edge - colouring of @xmath8 , contradicting the choice of @xmath5 as an edge - minimal counterexample ( as the fact there are no isolated vertices in @xmath5 means @xmath110 ) .",
    "let us define @xmath111 to be the set of vertices of degree at least @xmath112 , and note that every edge is incident with at least one vertex from @xmath113 ( as otherwise it can be incident with only @xmath114 other edges ) , so @xmath115 is an independent set .",
    "fix a width @xmath0 tree decomposition @xmath116 of @xmath5 , and choose @xmath117 such that @xmath118 .",
    "we then set @xmath43 to be the subtree of @xmath22 rooted at @xmath38 , that is the subgraph of @xmath22 induced by nodes @xmath119 such that the path from @xmath119 to the root contains @xmath38 .",
    "set @xmath120 to be @xmath121 , and @xmath122 .",
    "we then make the following observations .",
    "1 .   @xmath123 : if any vertex @xmath124 appears in a bag indexed by @xmath43 but does not appear in @xmath125 , we must have @xmath126 , contradicting the choice of @xmath127 .",
    "this implies immediately that @xmath128 .",
    "@xmath129 : no vertex from @xmath130 can appear in a bag of the decomposition not indexed by @xmath43 , so clearly we have @xmath131 ; but also , as @xmath132 , we have @xmath133 and so we see @xmath134 .",
    "@xmath135 : since @xmath127 appears only in bags indexed by @xmath43 , we have @xmath136 , implying @xmath137 , and we know @xmath138 , so we have @xmath139 .    as the neighbourhood of any vertex @xmath140 is contained in @xmath125 , there are at most @xmath141 possibilities for the neighbourhood of such a vertex .",
    "therefore there must exist some subset @xmath142 such that every vertex in @xmath108 has the same neighbourhood , and @xmath143    now let @xmath144 be a proper edge - colouring of @xmath109 . if we can extend @xmath144 to a proper edge - colouring of @xmath5 in which every edge incident with @xmath108 also receives a colour from its list , then we have a proper list edge - colouring of @xmath8 , giving the required contradiction .",
    "set @xmath145 , say @xmath146 ( where @xmath147 ) , and let @xmath148 be the complete bipartite subgraph of @xmath5 induced by @xmath149 .",
    "suppose , for @xmath150 , that @xmath151 is the set of colours already used by @xmath144 on edges incident with @xmath152 , and for each @xmath153 define the list @xmath154 to be @xmath155 .",
    "if we can properly colour the edges of @xmath148 in such a way that each edge @xmath156 is given a colour from @xmath157 , then we can extend @xmath144 as required .",
    "observe that , for each @xmath158 , @xmath159 , and so we have @xmath160 . but",
    "as @xmath148 is bipartite , with maximum degree @xmath161 , we have ( by theorem [ bipartite ] ) @xmath162 therefore , as each list @xmath157 contains at least @xmath161 colours , there exists a proper edge colouring of @xmath148 in which every edge @xmath9 receives a colour from its list @xmath157 , completing the proof .",
    "we use a very similar argument to prove the following result about the list total chromatic number .",
    "let @xmath5 be a graph with treewidth at most @xmath0 and @xmath97",
    ". then @xmath163 .",
    "[ ch=delta+1 ]    as @xmath164 , it suffices to prove that , if @xmath5 is a graph of treewidth at most @xmath0 , we have @xmath165 .",
    "again , we prove the result by contradiction , so suppose this does not hold , and let @xmath5 be a counterexample with as few edges as possible , so there exists a set @xmath166 of colour - lists , all of length @xmath167 , such that there is no proper list total colouring of @xmath8 .",
    "we may assume without loss of generality that @xmath5 contains no isolated vertices and so , by edge - minimality of @xmath5 , we must have @xmath168 for any proper subgraph @xmath104 of @xmath5 .",
    "we may assume that every edge @xmath105 is incident with at least @xmath169 others : if @xmath9 is incident with fewer than @xmath170 other edges then at most @xmath106 colours can appear on vertices or edges incident with @xmath9 , and so any proper list total colouring of @xmath171 can be extended to a proper list total colouring of @xmath8 .",
    "thus , if we define @xmath172 to be the set of vertices of degree at least @xmath173 , every edge is incident with at least one vertex from @xmath174 , and @xmath175 is an independent set .",
    "exactly as in the proof of theorem [ chi=ch=delta ] , we can find a subset @xmath176 such that all vertices of @xmath108 have the same neighbourhood of size at most @xmath177 , and @xmath178    as @xmath179 is a proper subgraph of @xmath5 , there exists a proper list total colouring @xmath144 of @xmath180 where @xmath181 .",
    "if we can extend @xmath144 to a proper total colouring of @xmath5 in which every vertex from @xmath108 and every edge incident with @xmath108 also receives a colour from its list , then we have a proper list total colouring of @xmath8 , giving the desired contradiction .    as in the proof of theorem [ chi=ch=delta ] , set @xmath145 ,",
    "say @xmath146 ( where @xmath147 ) , and let @xmath148 be the complete bipartite subgraph of @xmath5 induced by @xmath149 .",
    "suppose , for @xmath150 , that @xmath151 is the set of colours already used by @xmath144 on @xmath152 and the edges incident with @xmath152 , and for each @xmath153 define @xmath154 to be @xmath182 .",
    "observe that , for each @xmath158 , @xmath183 , and so we have @xmath184 as @xmath148 is bipartite , with maximum degree @xmath161 , we have ( by theorem [ bipartite ] ) @xmath185 .",
    "therefore , as each list @xmath157 contains at least @xmath161 colours that are not already used by @xmath144 on edges or vertices incident with @xmath9 , we can extend @xmath144 to a proper list colouring @xmath186 including the edges incident with @xmath108 .",
    "if we can then colour the vertices of @xmath108 in such a way that no @xmath153 receives a colour used by @xmath186 on an adjacent vertex or incident edge , we can indeed extend @xmath144 to a proper list total colouring of @xmath5 .",
    "note that every @xmath153 has degree at most @xmath177 , and so is adjacent to or incident with at most @xmath187 vertices and edges of @xmath5 .",
    "thus , as @xmath188 , there is at least one colour in @xmath189 that is not used by @xmath186 on a vertex adjacent to @xmath119 or on an edge incident with @xmath119 , and we can extend @xmath186 to the vertices of @xmath108 greedily .",
    "this gives a proper list total colouring of @xmath8 , completing the proof .    using these theorems",
    ", we can now prove our main complexity result .",
    "let @xmath5 be a graph on @xmath40 vertices , with treewidth at most @xmath0 , and set @xmath190 .",
    "we can check in time @xmath191 whether @xmath192 , and if this is the case then , by theorem [ chi=ch=delta ] or theorem [ ch=delta+1 ] , we know the exact value of @xmath11 or @xmath16 respectively .",
    "thus it suffices to solve both problems in the case that @xmath193 .",
    "this is exactly the same as solving list chromatic number on @xmath85 or @xmath88 , when @xmath193 .",
    "but in this case , by lemmas [ line - treewidth ] and [ total - treewidth ] , @xmath85 and @xmath88 have bounded treewidth . note that both graphs can be computed from @xmath5 in time @xmath194 and so we can then use bodlaender s algorithm ( theorem [ bod - linear - decomp ] ) to find a tree decomposition of @xmath85 or @xmath88 , of width at most @xmath195 , in time @xmath196 for any fixed @xmath0 . by theorem [ chi , chi_l ] ,",
    "given this decomposition , we can compute the list chromatic number of @xmath85 or @xmath88 , and hence the list edge chromatic number or list total chromatic number of @xmath5 , in linear time .",
    "our proof also implies a polynomial - time algorithm to compute a proper list edge - colouring of any graph @xmath5 of fixed treewidth and large maximum degree , provided every @xmath197 has length at least @xmath72 .",
    "the same method can also be used to compute a list total colouring of such a graph , provided every list has length at least @xmath73 .",
    "let @xmath5 be a graph of order @xmath40 and treewidth @xmath0 , with maximum degree at least @xmath198 , and let @xmath101 be a set of colour - lists such that @xmath199 for all @xmath105 .",
    "then , for fixed @xmath0 , we can compute a proper list edge - colouring of @xmath8 in time @xmath200 .",
    "the idea of the algorithm is to delete repeatedly edges or sets of vertices , as in the proof of theorem [ chi=ch=delta ] , until the degree of the remaining graph is less than @xmath201 , so the edges of this graph can be list - coloured greedily .",
    "edges and vertices are then reinserted and coloured to extend this colouring to the edges of @xmath5 .",
    "unlike in the proof of theorem [ chi=ch=delta ] , where we identified a set of _ at least _ @xmath177 vertices to delete , in this algorithm",
    "we always delete a set of _ exactly _ @xmath177 vertices .",
    "we begin with some preprocessing . for each vertex",
    ", we construct a list of its neighbours , and we also construct an @xmath40-element array storing the degree of each vertex . for vertices of degree at most @xmath177 , the list of neighbours is sorted into order , and the list of vertices of degree at most @xmath177 is also sorted , in order of neighbourhoods ( so that vertices with the same neighbourhood occur consecutively ) . all this can be done in time @xmath200 .",
    "note that each time we delete an edge , we can update this information in time @xmath202 : we update the neighbour lists of the edge s endpoints and decrement their degrees , and if one or both of the endpoints now has degree at most @xmath177 its neighbours are sorted and it is inserted into the correct position in the list of small - degree vertices . from the point of view of updating information , deleting a set of @xmath177 vertices can be regarded as a series of edge - deletions , each performed in time @xmath202 . as there are @xmath202 edges in total ,",
    "this means we can perform all updates after deletions in time @xmath200 .",
    "given the array of degrees of all vertices , it is straightforward to identify in time @xmath202 an edge incident with fewer than @xmath72 others , if such an edge exists . if there is no such edge , we know from the proof of theorem [ chi=ch=delta ] that ( provided the maximum degree of the graph is still at least @xmath203 ) there exists a set of @xmath177 vertices with a common neighbourhood of size at most @xmath177 .",
    "as the vertices of degree at most @xmath177 are sorted by their neighbourhoods , it is also possible to identify such a set of vertices in linear time .",
    "thus at each step we are able to identify the edge or set of vertices to delete in time @xmath202 , and so all deletions ( and subsequent updating ) can be performed in time @xmath200 .",
    "it therefore remains to show that we can also perform the reinsertions in time @xmath200 .",
    "when we reinsert an edge , we can simply colour it with the first available colour from its colour - list , taking time @xmath202 . when reinserting a set of @xmath177 vertices , we need to colour up to @xmath204 edges which form a complete bipartite subgraph .",
    "recall from the proof of theorem [ chi=ch=delta ] that every such edge still has at least @xmath177 available colours from its list ( i.e.  colours that have not already been used on incident edges ) , and that there exists a proper list edge - colouring of the bipartite graph if every edge has a list of exactly @xmath177 permitted colours . for each of the edges",
    ", we can compute in time @xmath205 a list of @xmath177 colours from its colour - list which have not yet been used on incident edges .",
    "we can then check in constant time all possible colourings of the @xmath204 edges in which each receives one of the @xmath177 colours from its list , to find a proper colouring of this bipartite graph , which is guaranteed to extend the list edge - colouring as required .",
    "thus we can perform all reinsertions in time @xmath200 , completing the proof of the theorem .",
    "given a graph @xmath5 and a set of lists @xmath206 of permitted positions , we say a path @xmath18\\ldots p[|g|]$ ] in @xmath5 is a _",
    "valid _ hamilton path if @xmath20}$ ] for every @xmath158 .",
    "we prove the following result .",
    "list hamilton path , parameterised by pathwidth , is w[1]-hard .",
    "[ lhp - hard ]    we prove the theorem by means of a reduction from multicolour clique .",
    "suppose @xmath5 is the @xmath0-coloured graph in an instance of multicolour clique : we may assume without loss of generality that all @xmath0 vertex classes have the same size , and also that the number of edges between each pair of vertex classes is the same ( as adding isolated edges and vertices does not change the existence or otherwise of a multicolour clique ) .",
    "let the vertex classes be @xmath207 , where @xmath208 contains vertices @xmath209 , \\ldots , v_i[p]$ ] , and assume that there are @xmath210 edges between each pair of vertex classes .",
    "we describe the construction of a graph @xmath148 of pathwidth at most @xmath211 , and a set of lists @xmath212 such that there is a valid hamilton path in @xmath213 if and only if @xmath5 contains a multicolour clique .",
    "lemmas [ mc=>lhp ] , [ lhp=>mc ] and [ bdd - pathwidth ] will demonstrate that @xmath213 does indeed have the required properties .",
    "our construction consists of @xmath177 paths , with some additional edges linking them : paths @xmath214 correspond to the vertex classes @xmath207 , and an additional path @xmath215 is used to connect @xmath214 . each path @xmath216 has @xmath217 vertices ( so @xmath218 ) , and we denote the @xmath219 vertex of @xmath216 by @xmath220 $ ] .",
    "the path @xmath221 is the concatenation of @xmath0 subpaths @xmath222 , each containing @xmath223 vertices and , for @xmath224 , every vertex of @xmath225 is adjacent to both @xmath226 $ ] and @xmath227 $ ] .",
    "in addition , we have a number of edge - gadgets , consisting of edges between pairs of the paths @xmath214 .",
    "suppose @xmath228 .",
    "then , for each edge @xmath229 between @xmath208 and @xmath230 , we have an edge - gadget @xmath231 , involving the @xmath232 group of four vertices in @xmath216 and the corresponding group of vertices from @xmath233 .",
    "@xmath231 has edges @xmath234p_j[4r+1]$ ] , @xmath235p_i[4r+1]$ ] , @xmath236p_j[4r+3]$ ] and @xmath237p_j[4r+2]$ ] , as illustrated in figure [ g(e_r ) ] .",
    "[ h ] , title=\"fig : \" ]    this completes the construction of the graph @xmath148 .",
    "we now define the list of permitted positions for each vertex . for @xmath224 , we set @xmath238 } = \\{(i-1)n^3 + 2 \\alpha n^2 : 1 \\leq \\alpha \\leq p\\},\\ ] ] and @xmath239 } = \\{(i-1)n^3 + 2 \\alpha n^2 + ( 2n^2 - 1 ) + k + 1 - 2i : 1 \\leq \\alpha \\leq p\\}.\\ ] ] we further define the list @xmath240 for every internal vertex @xmath241 $ ]",
    ", the list @xmath242}$ ] will contain @xmath243 . in most cases",
    "we in fact set @xmath242 } = l(i , j)$ ] , the only exceptions being three vertices in each edge - gadget @xmath244 : if @xmath245v_j[s]$ ] and the vertices in @xmath244 are @xmath246 , \\ldots , p_i[l+3 ] , p_j[l],\\ldots , p_j[l+3]$ ] , then the list for @xmath247 $ ] will additionally contain positions @xmath248 while the lists for @xmath249 $ ] and @xmath250 $ ] also contain @xmath251 and @xmath252 respectively .",
    "we place no restriction on the positions that vertices from @xmath215 can take in a valid hamilton path .",
    "the idea is that any valid hamilton path must ( with the exception of a few vertices belonging to the edge - gadgets ) traverse @xmath214 in that order , using sections of @xmath215 before and after each @xmath216 to connect the paths . in this construction",
    ", our choice of position for @xmath226 $ ] corresponds to a choice of vertex from @xmath208 : if @xmath226 $ ] takes position @xmath253 , we say that it _ selects _",
    "@xmath254 $ ] .",
    "note that their lists of permitted positions mean that @xmath255 , \\ldots , p_k[0]$ ] must occur on the path in order , and observe also that every combination of starting positions for these paths can be achieved by linking the paths @xmath214 with vertices from @xmath215 .",
    "the edge - gadgets allow some vertices to be exchanged between each pair of paths @xmath216 and @xmath233 if the vertices selected by @xmath226 $ ] and @xmath256 $ ] are adjacent , and we use this , together with conditions imposed by the lists of permitted positions for @xmath227 $ ] and @xmath257 $ ] , to ensure that the vertices selected by each pair of paths @xmath216 and @xmath233 are adjacent .",
    "we say that a hamilton path _ swaps _ in @xmath231 ( an edge - gadget containing edges between @xmath216 and @xmath233 ) if the segment of the hamilton path between @xmath234 $ ] and @xmath258 $ ] is @xmath259p_j[4r+1]p_j[4r+2]p_i[4r+2]p_i[4r+3],\\ ] ] and that between @xmath235 $ ] and @xmath260 $ ] is @xmath261p_i[4r+1]p_j[4r+3],\\ ] ] as illustrated in figure [ swapping ] .",
    "observe that , if @xmath262 , swapping in @xmath231 increases the number of vertices lying between @xmath226 $ ] and @xmath227 $ ] on the hamilton path by one , and correspondingly decreases by one the number of vertices lying between @xmath256 $ ] and @xmath257 $ ] .",
    "note that a partial swap , in which @xmath216 gains vertices from @xmath233 but @xmath233 does not gain any vertex from @xmath216 ( or vice versa ) , is not possible in any hamilton path , as such a path could not include @xmath236 $ ] ( or @xmath263 $ ] and @xmath264 $ ] ) .",
    "[ h ] , title=\"fig : \" ]    clearly every vertex of @xmath216 that is not involved in a swap must lie between @xmath226 $ ] and @xmath227 $ ] on any hamilton path . the range of permitted positions for each vertex @xmath246 $ ] ( for @xmath224 , @xmath265 ) means that , provided @xmath216 is not involved in more than @xmath266 swaps , @xmath246 $ ] will appear in a position from its list , no matter where the swaps involving @xmath216 take place .",
    "note also that , if @xmath246 $ ] is not involved in a swap , it can only have a position from @xmath267 if @xmath226 $ ] selects the vertex @xmath254 $ ] .    in the following two propositions ,",
    "we demonstrate some useful properties of this construction .    a valid hamilton path can only swap in the edge - gadget @xmath268v_j[s])$ ] if @xmath216 and @xmath233 select vertices @xmath254 $ ] and @xmath269 $ ] respectively .",
    "[ swap - allowed ]    suppose that the vertices of @xmath268v_j[s])$ ] are @xmath246 , \\ldots , p_i[l+3]$ ] and @xmath270,\\ldots , p_j[l+3]$ ] . recall that @xmath271 } = l(i , l+1 ) \\cup \\{(j-1)n^3 + 2sn^2 + ( l+1 ) + \\beta : -(k-1 ) \\leq \\beta \\leq",
    "k -1 \\}\\ ] ] and @xmath272 } = l(j , l)$ ] .",
    "if we swap in @xmath268v_j[s])$ ] , then @xmath247 $ ] comes immediately after @xmath270 $ ] on the hamilton path , but if this is not possible if @xmath247 $ ] takes a position from @xmath273 , as every element of @xmath274 is strictly larger than every element of @xmath273 .",
    "thus @xmath247 $ ] must have a position in @xmath275 , implying that @xmath270 $ ] has a position from the list @xmath276 , which is only possible if @xmath256 $ ] selects @xmath269 $ ] .",
    "similarly , we see that @xmath249 $ ] must take a position from @xmath277 , which implies that @xmath216 selects @xmath254 $ ] .",
    "any valid hamilton path in @xmath148 must involve exactly one swap between each pair of paths from @xmath278 .",
    "[ count - swaps ]    first note that , by proposition [ swap - allowed ] , there can be at most one swap between any pair of paths ( since at most one edge between two given classes has both its endpoints selected ) .",
    "now , the list of possible positions for @xmath279 $ ] means we must gain @xmath266 additional vertices on @xmath280 , and this can only be achieved if there are swaps in @xmath266 gadgets involving @xmath280 , implying that there is exactly one swap between @xmath280 and each other path @xmath281 .",
    "considering @xmath282 , we see that it loses one vertex to @xmath280 , so to achieve its target ( a net gain of @xmath283 vertices ) it must be involved in at least @xmath284 further swaps .",
    "this is the maximum possible , so again implies that in total there is exactly one swap involving @xmath282 and each other path @xmath285 .",
    "continuing in this way we see that we must indeed have exactly one swap between each pair of paths from @xmath278 .",
    "we now use these facts to demonstrate that @xmath286 is a yes - instance for list hamilton path if and only if @xmath5 is a yes - instance for multicolour clique .",
    "if @xmath5 is a yes - instance for multicolour clique , then @xmath286 is a yes - instance for list hamilton path .",
    "[ mc=>lhp ]    suppose we have a multicolour clique that contains @xmath287 $ ] for @xmath224 .",
    "we claim we can then find a hamilton path in @xmath148 in which every vertex has a position from its permitted list .",
    "in such a path , we give @xmath226 $ ] position @xmath288 , using @xmath215 to link up @xmath214 in such a way that each of these paths has the desired starting position .",
    "@xmath226 $ ] occurs on the path immediately after some vertex @xmath289 $ ] ( where , if each path @xmath233 for @xmath290 has a net gain of @xmath291 vertices due to swaps , @xmath292 ) , and @xmath227 $ ] is followed by @xmath293 $ ] , so every vertex of @xmath215 is included on the path .    we know",
    "that , for each pair @xmath294 of vertex classes , there exists an edge @xmath295 between @xmath287 $ ] and @xmath296 $ ] .",
    "thus , for each @xmath297 , there exists a gadget @xmath298 in which we are able to swap .",
    "if we do indeed swap in every such gadget , this gives exactly one swap between each pair of paths , so each path @xmath216 has a net gain of @xmath299 vertices and @xmath227 $ ] has position @xmath300}$ ] .",
    "each path is involved in exactly @xmath266 swaps , so all the internal vertices of @xmath301 that are not involved in swaps also receive positions from their lists .",
    "this path then includes every vertex in @xmath148 , and gives each vertex a position from its permitted list , so @xmath286 is indeed a yes - instance for list hamilton path .    if @xmath286 is a yes - instance for list hamilton path , then @xmath5 is a yes - instance for multicolour clique .",
    "[ lhp=>mc ]    suppose there exists a valid hamilton path in @xmath148 .",
    "for @xmath224 , let @xmath302 be the vertex in @xmath208 that is selected by the position of @xmath226 $ ] in this path .",
    "we claim that the set @xmath303 , which clearly contains one vertex from each colour class , induces a clique in @xmath5 .    we know , by proposition",
    "[ count - swaps ] , that in any valid hamilton path we must have exactly one swap between each pair of paths .",
    "but , by proposition [ swap - allowed ] , a swap can only occur between @xmath216 and @xmath233 in the gadget @xmath304 if @xmath119 and @xmath50 are selected by the positions of @xmath226 $ ] and @xmath256 $ ] respectively .",
    "thus a swap can only occur between paths @xmath216 and @xmath233 if there exists a gadget @xmath305 , which  by construction  is only the case if there exists an edge @xmath306 in @xmath5 . as this holds for every pair @xmath307 with @xmath297 , we see that @xmath303 are pairwise adjacent in @xmath5 , giving the required multicolour clique .",
    "finally , we need to check that @xmath148 bounded pathwidth .",
    "@xmath148 has pathwidth at most @xmath211 .",
    "[ bdd - pathwidth ]    we construct a path decomposition of @xmath148 , indexed by a path @xmath22 with @xmath308 .",
    "every bag of the decomposition contains the vertices @xmath309,p_j[2n^2 - 1 ] : 1 \\leq j \\leq k\\}$ ] . in addition , for @xmath310 , the bag indexed by the @xmath311 node of @xmath22 contains the @xmath311 and @xmath312 vertices of @xmath215 , while , for @xmath313 , the bag indexed by the @xmath311 node of @xmath22 contains all vertices @xmath314,p_j[i-|q|+2],p_j[i-|q|+3 ] : 1 \\leq j \\leq k \\}$ ] .",
    "note that every bag contains at most @xmath211 vertices .",
    "it is immediate from this construction that , for any vertex @xmath315 , the nodes indexing bags that contain @xmath127 induce a subpath of @xmath22 .",
    "so it remains to show that , for every edge @xmath316 , there exists some bag of the decomposition that contains both @xmath119 and @xmath127 .",
    "for all edges within @xmath215 this is clearly true .",
    "note that , for @xmath265 , any vertex @xmath246 $ ] is only adjacent to vertices @xmath317 $ ] where @xmath318 , and so any edge between internal vertices of the paths @xmath214 must have both its endpoints in some bag of the decomposition .",
    "all remaining edges are then incident with some @xmath319 , but @xmath320 is contained in every bag , and so the condition is also satisfied for these edges .    hence we have a path decomposition of @xmath148 of width at most @xmath211 .",
    "we are now ready to prove the main theorem of this section .",
    "it follows immediately from lemmas [ mc=>lhp ] and [ lhp=>mc ] that @xmath286 is a yes - instance for list hamilton path if and only if @xmath5 is a yes - instance for multicolour clique .",
    "@xmath148 has order polynomial in @xmath321 , and can clearly be computed from @xmath5 in polynomial time .",
    "moreover , by lemma [ bdd - pathwidth ] we know that the pathwidth of @xmath148 depends only on the parameter @xmath0 , the number of colours used in @xmath5 .",
    "this completes the reduction to show that list hamilton path , parameterised by treewidth , is w[1]-hard .",
    "we have proved that list edge chromatic number and list total chromatic number are fixed parameter tractable , parameterised by treewidth , although the list edge colouring and list total colouring problems are np - hard on graphs of treewidth at most two .",
    "thus , as for vertex colouring , it is computationally easier to calculate list edge or total chromatic number of a graph than to determine whether a given set of lists admits a proper colouring of the graph .",
    "we also demonstrated that list hamilton path is w[1]-hard , even when parameterised by pathwidth , giving another example of a problem that solvable in linear time on graphs of bounded treewidth but has a w[1]-hard list version .",
    "noga alon , _ restricted colorings of graphs _ , surveys in combinatorics , 1993 , proceedings , 14th british combinatorial conference , ( k.  walker , ed . ) , london mathematical society lecture note series , vol .  187 , cambridge university press , 1993 , pp .  133 .",
    "richard b.  borie , r.  gary parker and craig a.  tovey , _ automatic generation of linear - time algorithms from predicate calculus descriptions of problems on recursively constructed graph families _ , algorithmica * 7 * ( 1992 ) , 555581 .",
    "michael r.  fellows , fedor v.  fomin , daniel lokshtanov , frances rosamond , saket saurabh , stefan szeider and carsten thomassen , _ on the complexity of some colorful problems parameterized by treewidth _ , information and computation * 209 * ( 2011 ) , 143153 .",
    "d.  seese , _ tree - partite graphs and the complexity of algorithms _ , fundamentals of computation theory ( lothar budach , ed . ) , lecture notes in computer science , vol .  199 ,",
    "springer berlin / heidelberg 1985 , pp ."
  ],
  "abstract_text": [
    "<S> we consider the parameterised complexity of several list problems on graphs , with parameter treewidth or pathwidth . </S>",
    "<S> in particular , we show that list edge chromatic number and list total chromatic number are fixed parameter tractable , parameterised by treewidth , whereas list hamilton path is w[1]-hard , even parameterised by pathwidth . </S>",
    "<S> these results resolve two open questions of fellows , fomin , lokshtanov , rosamond , saurabh , szeider and thomassen ( 2011 ) . </S>"
  ]
}