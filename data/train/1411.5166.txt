{
  "article_text": [
    "for helping themselves in writing , debugging and maintaining their software , professional software developers using object - oriented programming languages keep in their minds an image or picture of the subtyping relation between types in their software while they are developing their software . in pre - generics java",
    "@xcite , the number of possible object types ( also called _ reference types _ ) for a fixed set of classes in a program was a _",
    "finite _ number ( however large it was ) , and , more importantly , the structure of the subtyping relation between these types ( and hence of the mental image a developer kept in mind ) was simple : the graph of the subtyping relation between classes and interfaces ( _ i.e. _ , with multiple - inheritance of interfaces ) was a simple directed - acyclic graph ( dag ) , and the graph of the subtyping relation between classes alone ( _ i.e. _ , with single - inheritance only , more accurately called the _ subclassing _ relation ) was simply a tree .",
    "this fact about the graph of the subtyping relation applies not only to java but , more generally , also to the non - generic sublanguage of other mainstream nominally - typed oo languages similar to java , such as c #  @xcite , c++  @xcite , and scala  @xcite .    today , generics and wildcards ( or some other form of ` variance annotations ' ) are a standard feature of mainstream nominally - typed oo languages .",
    "the inheritance relation , between classes ( and interfaces and traits , in oo languages that support these notions ) is still a finite relation , and its shape is still the same as before : a simple dag .",
    "but , given the possibility of arbitrary nesting of generic types , the number of possible object types in a generic java program has become infinite , and the shape of the subtyping relation in nominally - typed oo languages has become more complex than a tree or a simple dag .",
    "it is thus natural to wonder , `` _ _ what is the shape of the subtyping relation in java _",
    "_ , now after the addition of generics and wildcards ? ''",
    "this question on subtyping in java is similar to one benoit mandelbrot , in the 1960s , wondered about : `` how long is the coast of britain ? '' . at that time",
    ", some mathematicians ( including many computer scientists ) used to believe that mathematics was perfect because it had completely banished pictures , even from elementary textbooks .",
    "mandelbrot , using computers , put the pictures back in mathematics , by discovering fractals , and , in the process , finding that britain s coast has infinite length .",
    "the goal of this paper is to present and defend , even if incompletely and unconventionally ( using mainly hierarchy diagrams , and only using equations suggestively ) , a fundamental observation about the graph of the subtyping relation in java .",
    "we observed that , after the addition of generics  and of wildcards , in particular  to java , the graph of the subtyping relation is still a dag , but is no longer a simple dag but is rather one whose structure can be better understood , of all possibilities , also as a _ fractal _  and in fact , as we explain below , an intricately constructed fractal ( albeit a different kind of fractal than that of britain s coast ) .    to motivate our observation",
    ", we use very simple generic class declarations to present in the paper some diagrams for the subtyping relation that represent the iterative construction of the subtyping graph , in the hope of making the construction process very simple to understand and thus make the fractal observation very clear . to further argue for and strengthen the observation , we also suggest algebraic equations for mathematically describing the subtyping fractal and its construction process . ( our equations are akin of recursive domain equations of domain theory that are used to construct ` reflexive domains ' .",
    "the similarity is suggestive of a strong relationship , possibly even suggesting reflexive domains ",
    "useful for giving mathematical meaning for programming languages  might be fractals too , even though we refrain from arguing for this claim here . )",
    "given the popularity fractals enjoy nowadays , we believe the fractal observation about subtyping in nominally - typed oo languages may help oo software developers keep a useful and intuitive mental image of their software s subtyping relation , even if it is a little more frightening , and more amazing one than the one they had before . as an immediate application of the fractal observation , ides ( integrated development environments ) that oo developers use can make developers lives easier , making them develop their software faster and with more confidence , by presenting to them parts of the fractal representing the subtyping relation in their software and allowing developers to `` zoom - in''/``zoom - out '' on sections of the fractal / relation that are of interest to the developers , in order for them to better understand the typing relations in their software and so that they may resolve any type errors in their code more quickly and more confidently .",
    "oo language designers may also benefit from the fractal observation , since having a better understanding of the subtyping relation may enable them to have a better understanding of the interactions between different features of oo languages  such as the three - tiered interaction , in java , between generics ( including wildcard types ) , ` lambdas ' ( formerly known as ` closures ' ) and type inference  leading designers to improve the design of the language , and to better design and implement its compilers . finally , in allusion to joshua bloch s well - known quote when considering adding closures to java , we hope , by making the fractal observation about subtyping , to enable decreasing ( or at least , more accurately estimating ) the `` _ _ complexity budget _ _ '' paid for adding generics and wildcards to java .",
    "as any standard definition ( or an image ) of a fractal will reveal , fractals ( sometimes also called _ recursive graphs _ , or _",
    "self - referential graphs _ ) are drawings or graphs that are characterized by having `` minicopies '' of themselves inside of them  @xcite . given their _ self - similar _ nature , when zooming in on a fractal it is not a surprise to find a copy of the original fractal spring up .",
    "more generally , the minicopy is not an exact copy , but some _ transformation _ of the original : it may be the original rotated , translated , reflected , and so on . as such , when constructing a fractal iteratively ( as is standard ) it is also not a surprise to add details to the construction of the fractal by using ( transformed ) copies of the fractal as constructed so far ( _ i.e. _ , as it exists in the current iteration of the construction ) to get a better , more accurate approximation of the final fractal ( see figure  [ fig : fractals ] , and  @xcite ) .    while it may not be immediately obvious to the unsuspecting , but `` having transformed minicopies of itself '' is exactly what we have noticed also happens in ( the graph of ) the subtyping relation of java  and of other similar generic nominally - typed oo languages such as c # , c++ , and scala  after generics and wildcards were added to the java type system .",
    "figure   presents a drawing of the first steps in the construction of a subtyping graph , to illustrate and give a `` flavor '' of the observation .    in section  [ sec : observation - illustrated ] , to motivate presenting the subsequent _ transformations observation _ in section  [ sec : transformations - observation ] , we present a more precise and more detailed diagram  one that , unlike figure  [ fig : first - iterations ] , uses no ` raw types ' ,    and has an additional class ` d ` .",
    "fractals : ( first steps in constructing ) the koch curve and ( a step in constructing ) a fractal tree ]",
    "to illustrate our main observation and how the subtyping fractal is constructed , let us assume we have the non - generic class ` object ` ( which extends / subclasses no other classes , _",
    "i.e. _ , is at the top of the subclassing / inheritance hierarchy ) , and that we have , as expressed in the two simple lines of code below , two generic classes ` c ` and ` d ` that extend class ` object ` and that take one ( unbounded ) type parameter .",
    "similarly , and crucial to seeing the subtyping graph as a fractal , we also assume we have a `` hidden '' ( _ i.e. _ , inexpressible in some oo languages , such as java ) non - generic class ` null ` at the bottom of the class inheritance hierarchy ( whose only instance is the ` null ` object , which in java is an instance of every class and can be assigned to a variable of any object type , `` the non - terminating object '' . ) ] .    .... class c < t > extends object { } class d",
    "< t > extends object { } ....    figure   demonstrates the subclassing hierarchy ( _ a.k.a .",
    "_ , inheritance hierarchy ) based on assuming these class declarations .",
    "the declared inheritance relation between class ( and interface / trait ) names in a program is the _ _ starting point _ _ for constructing the graph of the subtyping relation in nominally - typed oo languages , including java ( note the use of the identification of type inheritance and subtyping in nominally - typed oop  @xcite to interpret ` class extension ' as ` subtyping between corresponding class types ' .",
    "we discuss the role of nominality in more detail in section  [ sec : nomvsstruct ] ) .",
    "figure   shows that the `` default type argument '' , namely ` ? ` ( the unbounded wildcard type ) , is used in this initial step as the type argument for all generic classes to form type names for corresponding class types .",
    "figure   demonstrates how the ( names of ) types in the next iteration of constructing the subtyping fractal ( _ i.e. _ , of the iteration numbered @xmath0 , which we can `` see '' after looking at iteration @xmath1 if we `` zoom in '' one step ) constructing are constructed by replacing / substituting all the ` ? ` s in level / iteration 0 ( the base step ) with _ three _ different forms of each type ` t ` in the previous level ( level @xmath1 ) , namely `",
    "?  extends  t ` ( covariance ) , ` ?",
    "super  t ` ( contravariance ) , and ` t ` ( invariance ) .",
    "( see below ) . replacing each of the _ innermost _ ( or , all ? ) ` ? `",
    "s of a type ( `` holes '' in the type ) in level @xmath1 with a ` # ` ( a hash , as a placeholder ) , then replacing these ` # ` s with three different forms of each one of the types in the previous level ( level @xmath1 ) , or in level 0 , to construct names of the types of the new level ( corresponding to equation @xmath2 or @xmath3 ) .",
    "see further comments below for a note on the likely equality of the first two equations , and on the likely uselessness of the third equation as defining the fractal . ]",
    "covariant , contravariant and invariant subtyping rules are then used to decide the subtyping relation between all the newly constructed types ( note that , due to the inclusion of types ` object ` and ` null ` in level 0 and in all subsequent levels , all level @xmath1 types are _ also _ types of level / iteration @xmath0 .",
    "this motivates the notion of the rank of a type .",
    "the level / iteration in which a type _ first _ appears is called the _",
    "rank _ of the type . as such , types ` object ` and ` null ` are always of rank 0 ) . in figure",
    "[ fig : fig3 ] we use ` ?",
    "xt ` and ` ?",
    "st ` as short - hands for ` ? extends t ` and ` ? super t ` respectively .",
    "[ [ the - effect - of - variant - subtyping - rules - on - the - subtyping - graph ] ] the effect of variant subtyping rules on the subtyping graph : + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    * covariant subtyping : the level 0 graph is _ copied _ inside ` c < ?",
    "> ` and ` d < ?",
    "> ` ( illustrated by * * arrows in diagrams ) . for ten types `",
    "t ` ( from 2 non - generic classes + 2 generic classes @xmath4 4 types in level 0 ) , we have paths + ` object - > c < ?  extends  t > - > null ` , and + ` object - > d <",
    "?  extends  t > - > null ` + ( note : `",
    "?  extends  null ` is the same as ` null ` .",
    "inexpressible in java ) .",
    "* contravariant subtyping : the level 0 graph is _ flipped _",
    "( turned upside - down ) inside ` c < ?",
    "> ` and ` d < ?",
    "> ` ( illustrated by * * arrows in diagrams ) . for ten types ` t ` , like for covariance , we have paths + ` object - > c < ?",
    "super  t > - > null ` , and + ` object - > d < ?",
    "super  t > - > null ` + ( note : ` ?",
    "super  object ` is the same as ` object ` .",
    "see footnote   regarding current java behavior ) .",
    "* invariant subtyping : the level 0 graph is _ flattened _ inside ` c < ?",
    "> ` and ` d < ?",
    "> ` ( no corresponding arrows in diagrams ) . for ten types",
    "` t ` , like for covariance , we have paths + ` object - > c < t > - > null ` , and + ` object - > d <",
    "t > - > null ` .",
    "figure   illustrates how to use the notion of type intervals  @xcite to combine all three ( _ i.e. _ , covariant , contravariant and invariant ) subtyping rules ( and to add even more types to the subtyping relation in later iterations / nesting levels ) .    in figure",
    "[ fig : fig4 ] , we have all three transformations applied to level 0 graph and embedded inside ` c < ?",
    "> ` and ` d < ?",
    "> ` ( note that bounds of an interval can degenerately be equal types , corresponding to invariance ) . for twenty types",
    "` s ` and ` t ` ( where ` s ` is a subtype of ` t ` in the previous iteration / level ) , from 2 non - generic classes + 2 generic classes @xmath4 9 intervals in level 0 , we have ` object - > c <",
    "s - t > - > null ` , ` object - > d <",
    "s - t > - > null ` ( the notation ` s - t ` means the interval with lowerbound ` s ` and upperbound ` t ` . for brevity , we use ` o ` for ` object ` and ` n ` for ` null ` ) . if class ` c ` or class ` d ` had subclasses other than ` null ` , this graph diagram would have been even richer_i.e . _ , it would have had more types  than the graph in figure  .",
    "( it can be noted that the ` null ` type is useful in expressing intervals . yet",
    "the diagram can be presented without it , using ` extends ` only or ` super ` only , while allowing but not requiring a naked ` ? ` ; or , for brevity , using a symbol like ` < : ` ) .",
    "note : the types ` null ` , ` c < null > ` , and ` d < null > ` , inside dotted graph nodes in figure   and figure  , are currently _ inexpressible _ in java ( _ i.e. _ , as of java 8 , based on the assumption that these types are of little practical use to developers . ) subtyping relations involving these inexpressible types are also currently of little use to java developers ( except in type inference ) .",
    "accordingly , they also are drawn in figure  [ fig : fig4 ] using dotted graph edges.(*a bug in javac * ) : also , as of java 8 , we have noted that java does not currently identify `",
    "?  super  object ` with ` object ` , and as such a variable ` b ` of type ` c <",
    "?  super  object > ` , for example , _ can not _ be assigned to a variable ` a ` of type ` c < object > ` ( _ i.e. _ , for the statement ` a = b ; ` the java compiler ` javac ` currently emits a type error with an unhelpful semi - cryptic error message that involves ` wildcard capturing ' ) even as java allows the opposite assignment of ` a ` to ` b ` ( _ i.e. _ , the statement ` b = a ; ` ) , implying that , even though java currently correctly sees ` c < object > ` as a subtype of ` c < ?",
    "super  object > ` , it currently does _ not _ consider ` c < ?",
    "super  object > ` as a subtype of ` c <",
    "object > ` .",
    "given that there are no supertypes of type ` object ` ( the class type corresponding to class ` object ` ) , and it is not expected there will ever be any , we believe the java type system should be fixed to identify the two type arguments ` ?",
    "super  object ` and ` object ` , and thus correctly allow the mentioned currently - disallowed assignments . ]",
    "it should now be clear how to constructing the rest of the subtyping fractal .",
    "each next nesting level of generics corresponds to `` zooming one level in '' in the subtyping fractal , and the construction of the new `` zoomed - in '' graph is done using the same method above , where wildcards ( or , intervals ) over the previous subtyping graph substitute all the ` ?",
    "` in that graph to produce the next level graph of the subtyping relation .",
    "and there is nothing in generics that disallows arbitrarily - deep , potentially infinite , nesting .",
    "while making the fractal observation , we made yet another observation that helps explain the fractal observation more deeply . in particular , we noted that in constructing the graph of the subtyping relation , when moving from types of a specific level of nesting to types of the next deeper level ( _ i.e. _ , when `` zooming in '' inside the graph of the relation , or when doing the inductive step of the recursive definition of the graph ) , _ three _ kinds of _ transformations _ are applied to the level @xmath1 subtyping graph , in agreement with the general nature of fractals having transformed minicopies of themselves embedded within .",
    "we call these three transformations the _ identity _ ( or , _ copying _ ) transformation , the _ upside - down _ reflection ( or , _ flipping _ transformation ) , and the _ flattening _ transformation . the first transformation ( identity )",
    "makes an exact copy of the input subtyping relation , the second transformation ( upside - down reflection ) flips over the relation ( a subtype in the input relation becomes a supertype , and vice versa ) , while the third transformation `` attempts to do both ( _ i.e. _ , the identity and flipover transformations ) , '' in effect making types that were related in its input subtyping relation be _ unrelated _ in its output subtyping relation ( hence the output of this transformation is a `` flat '' relation , called an _ anti - chain_. )    explaining this observation regarding the subtyping fractal in terms of oo subtyping is done by noting that the three mentioned transformations correspond to ( in fact , result from ) the covariant subtyping rule , contravariant subtyping rule , and invariant subtyping rule , respectively .",
    "this is demonstrated , in a very abridged manner , in figure   ( with the green arrows corresponding to copying the previous level graph , corresponding to covariant subtyping , the red arrows corresponding to flipping over the previous level graph , corresponding to contravariant subtyping . )",
    "it should be noted that _ also _ the level 1 graph as a _ whole _ is the same structure as the level 0 graph when the ` c group ' nodes are lumped into one node and the same for the ` d group ' node .",
    "that means that , in agreement with the graph being a fractal ( where self - similarity must exist at all levels of _ scale _ ) , when the graph of subtyping is `` viewed from far '' it _ looks the same _ as the level 0 graph .",
    "in fact , when looked at from a far enough distance this similarity to the level 0 graph will be the case for all level @xmath1 , where @xmath5 , graphs .",
    "it should be noted that class names information ( _ a.k.a . _ , nominality , and ` nominal type information ' ) of nominally - typed oo languages ( such as java , c # , c++ , and scala ) is used in the base / first construction step in constructing the subtyping relation between generic types as a fractal .",
    "in contrast , structurally - typed oo languages ( such as ocaml  @xcite , moby  @xcite , polytoil  @xcite , and strongtalk  @xcite ) , known mainly among programming languages researchers , do _ not _ have such a simple base step , since a record type corresponding to a class ( with at least one method ) in these languages does _ not _ have a finite number of supertypes to begin with , given that `` superclasses of a class '' in the program , when viewed structurally as supertypes of record types , do _ not _ form a finite set .",
    "any record type has an infinite set of record subtypes ( due to their width - subtyping rule  @xcite ) .",
    "accordingly , a record type with a method_i.e .",
    "_ , a member having a function type  causes the record type to have an infinite set of _ supertypes _ , due to contravariance of the type of the method .",
    "adding - in a depth - subtyping rule makes the subtyping relation between record types with functional member types even more complex .",
    "this motivates suspecting that subtyping in structurally - typed oo language is a _ dense _",
    "relation , in which every pair of non - equal types in the relation has a third type , not equal to either member of the pair , that is `` in the middle '' between the two elements of the pair , _",
    "i.e. _ , that is a subtype of the supertype ( the upperbound ) of the pair and a supertype of the subtype ( the lowerbound ) of the pair .",
    "in fact this may turn out to be simple to prove . due to",
    "a class in generic nominally - typed oo languages having a finite set of superclasses in the subclassing relation , subtyping in generic nominally - typed oo languages languages is not an ( everywhere ) dense relation , and the subclassing relation in these languages forms a simple finite basis ( the `` skeleton '' ) for constructing the subtyping relation . for structurally - typed oo languages ( where record types with functional members are a must , to model structural objects ) , this basis ( the `` skeleton '' ) is infinite and thus the `` fractal '' structural subtyping graph ( if indeed it is a fractal ) is not easy to draw or to even imagine .    for more details on the technical and mathematical differences between nominally - typed and structurally - typed oop , the interested reader may consult  @xcite .",
    "in this paper we presented an observation connecting subtyping in generic nominally - typed oo languages to fractals .",
    "we presented diagram for graphs of the subtyping relation demonstrating the iterative process of constructing the relation as a fractal .",
    "we further made an observation connecting the three variant subtyping rules in generic oop to the three transformations done on the graph of the relation for embedding inside the relation .",
    "we further noted some possible differences between generic nominally - typed oop and polymorphic structurally - typed oop as to the fractal nature of their subtyping relations .",
    "( see the appendix for some further notes , observations and conclusions that may be built on top of the observations and discussions we made , including a suggestive discussion on the use of algebraic equations to precisely describe the generic oo subtyping relation as a fractal ) .    10    c # language specification , version 3.0 .",
    "http://msdn.microsoft.com/vcsharp , 2007 .",
    "nova | hunting the hidden dimension - pbs .",
    "http://www.pbs.org/wgbh/nova/physics/hunting-hidden-dimension.html , 2011 .",
    "http://en.wikipedia.org/wiki/fractal , dec",
    ". 2014 .    moez  a. abdelgawad . .",
    "phd thesis , rice university , 2012 .",
    "moez  a. abdelgawad . .",
    "scholar s press , 2013 .",
    "moez  a. abdelgawad .",
    "an overview of nominal - typing versus structural - typing in object - oriented programming ( with code examples ) . technical report , arxiv.org:1309.2348 [ cs.pl ] , 2013 .    moez  a. abdelgawad . a domain - theoretic model of nominally - typed object - oriented programming .",
    "301:319 , 2014 .    moez  a. abdelgawad .",
    "a comparison of noop to structural domain - theoretic models of object - oriented programming . , 2016 .",
    "moez  a. abdelgawad . towards an accurate mathematical model of generic nominally - typed oop ( extended abstract ) .",
    "moez  a. abdelgawad . towards understanding generics",
    ". technical report , arxiv:1605.01480 [ cs.pl ] , 2016 .",
    "moez  a. abdelgawad .",
    "why nominal - typing matters in oop . , 2016 .",
    "moez  a. abdelgawad and robert cartwright . in nominally - typed oop , objects are not mere records and inheritance _ is _ subtyping . , 2016 .",
    "michael  f barnsley . .",
    "courier dover publications , 2013 .",
    "richard bird et  al .",
    ", volume  2 .",
    "prentice hall europe hemel hempstead , uk , 1998 .",
    "g.  bracha and d.  griswold .",
    "strongtalk : typechecking smalltalk in a production environment . in _ oopsla93 _ , pages 215230 , 1993 .",
    "k.  bruce , a.  schuett , r.  van gent , and a.  fiech .",
    "olytoil : a type - safe polymorphic object - oriented language .",
    ", 25(2):225290 , 2003 .",
    "robert cartwright and moez  a. abdelgawad .",
    "inheritance _ is _ subtyping ( extended abstract ) . in _ the 25^th^ nordic workshop on programming theory ( nwpt ) _ , tallinn , estonia , 2013 .",
    "robert  bruce findler , matthew flatt , and matthias felleisen .",
    "semantic casts : contracts and structural subtyping in a nominal world . in _",
    "ecoop 2004object - oriented programming _",
    ", pages 365389 .",
    "springer , 2004 .",
    "k.  fisher and j.  reppy .",
    "the design of a class mechanism for moby . in _ pldi _ , 1999 .",
    "james gosling , bill joy , guy steele , and gilad bracha . .",
    "addison - wesley , 2005 .",
    "douglas  r. hofstadter . .",
    "basic books , second edition , 1999 .",
    "x.  leroy , d.  doligez , j.  garrigue , d.  rmy , and j.  vouillon .",
    "the objective caml system .",
    "available at http://caml.inria.fr/.    donna malayeri and jonathan aldrich . integrating nominal and structural subtyping . in _",
    "ecoop 2008object - oriented programming _ , pages 260284 .",
    "springer , 2008 .",
    "benoit  b mandelbrot . fractals .",
    "martin odersky .",
    "the scala language specification , v. 2.7 .",
    "http://www.scala-lang.org , 2009 .",
    "klaus ostermann .",
    "nominal and structural subtyping in component - based programming . , 7(1):121145 , 2008 .",
    "benjamin  c. pierce .",
    ". mit press , 2002 .",
    "david  i spivak . .",
    "mit press , 2014 .",
    "the following notes and observations can be added to the ones we made in the main paper :    1 .",
    "relations on type intervals : for type intervals @xmath6 $ ] , where @xmath7 , with lowerbound ( @xmath8 ) and upperbound ( @xmath9 ) , two relations on intervals can be defined that can help in constructing the subtyping fractal : an interval containing another interval ( the _ contains _ relation : @xmath10 ) , and an interval preceding another interval ( the _ precedes _ relation : @xmath11 ) .",
    "the _ pruning transformation _ : bounds , _",
    "i.e. _ , lowerbounds or upperbounds , on a type parameter limit ( _ i.e. _ , decrease ) the types of level @xmath1 that can substitute the holes ( the ` ? `",
    "s ) when constructing a type in level @xmath0 , so pruning means that a substitution _ respects _ these declared bounds .",
    "demonstration software : an interactive mathematica program that demonstrates the iterative construction of the subtyping hierarchy , for multiple simple class hierarchies , up to four nesting levels is available upon request ( the program uses the ` manipulate ` function of mathematica 6 , is formatted as a mathematica 6 demo , and is in the mathematica .nb format , _",
    "i.e. _ , the file format mathematica has used as of 2007 . )",
    "multi - arity : generic classes with _ multiple _ type parameters simply result in types with multiple `` holes '' at the same nesting level for the same class .",
    "graph matrices : representing successive subtyping graphs as adjacency matrices ( 0 - 1 matrices ) is useful in computing ( paths in graph of ) the relation ( and in computing containment of intervals ) .",
    "( using @xmath12 , with binary addition and multiplication of matrices , to compute the transitive closure of the relation and thus paths / intervals over it ) .",
    "category theory : given the use of the notion of _ operads _ in category theory to model self - similarity  @xcite , we intend to consider the possibility of using _ _ operads to express and communicate the fractal nature of the generic oo subtyping relation .",
    "algebraic equations : according to benoit mandelbrot , hermann well wrote that ` the angel of geometry and the devil of algebra share the stage , illustrating the difficulties of both . ' turning to some algebra , we expect the graph of the subtyping relation to be described by a recursive equation , as is the case for many fractals .",
    "we anticipate this equation to be ( something along the lines of ) @xmath13 where @xmath14 stands for the initial graph ( the ` skeleton ' of the subtyping fractal , resulting from turning the subclassing relation into a subtyping relation by using ` ?",
    "` as the default type argument for generic classes ) , and the application of @xmath14 to its argument ( another graph ) means the _ substitution _ ( similar to @xmath15-reduction in @xmath16-calculus ) of its `` holes '' ( the ` ? ` s in its types / nodes ) with the argument graph ( _ i.e. _ , the graph @xmath17 which applies the three above - mentioned transformations to @xmath18 , and where @xmath19 means `` subtyping - respecting union '' of component graphs . )    1 .",
    "more on algebraic equations : 1 .   the @xmath14 in the equation _ _ above__i.e . _",
    "_ , the graph of the first iteration of the subtying relation , which is directly based on the subclassing relation  is what makes ( all iterations / approximations of ) the graph @xmath18 have the same structure `` when viewed from far '' , _",
    "i.e. _ , when zooming out of it , as the subclassing relation ) .",
    "2 .   to construct approximations of @xmath18 iteratively",
    ", the equation can be interpreted to mean @xmath20 which means when constructing approximations to @xmath18 we construct elements of the sequence @xmath21",
    "@xmath22 @xmath23 @xmath24 ... etc .",
    "3 .   another seemingly - equivalent recursive equation for describing the subtyping graph",
    "@xmath18 is @xmath25 which , even though not in the more familiar @xmath26 format , has the advantage of showing that @xmath18 ( the limit , infinite graph ) is equivalent to ( isomorphic to ) substituting its own holes with transformations of @xmath14 , _",
    "i.e. _ , that the substitution does _ not _ affect the final infinite graph @xmath18 ( just as adding 1 to @xmath27 , the limit of natural numbers , does not affect its cardinality ; @xmath28 . )",
    "it also reflects the zooming - in fact ( opposite to the zooming - out fact above ) that when zooming - in into @xmath18 we find ( transformed copies of ) @xmath14 each time we zoom in , ad infinitum .",
    "( see note  [ enu : more - levels / iterations :- to ] below for why we believe this third equation may in fact be _",
    "incorrect_. ) + 2 .   algebraic equations with intervals : with intervals ,",
    "the equation above becomes simpler and more general , where , if @xmath29 is the function computing all the intervals over a graph , we then have @xmath30 or , most accurately , @xmath31 note that the three equations agree on defining @xmath32 .",
    "the three equations disagree however on later terms of the construction sequence .",
    "they , for example , define @xmath33 , @xmath34 , and @xmath35 , respectively .",
    "the equivalence of the three equations ( _ i.e. _ , of the resulting graph from each ) is unlikely , but a mathematical proof or a convincing intuitive proof of that is needed ( see note  [ enu : more - levels / iterations :- to ] below , however ) .",
    "benefits and applications : an obvious benefit of the observation in this paper is to demonstrate one more ( unexpected ? ) place where fractals show up . yet an additional benefit , and practical application , of the observation may be to apply some of the theory developed for fractals to better the understanding of the subtyping relation in oo languages , possibly leading to providing a better understanding of their generic type systems and thus developing better oo language compilers .",
    "parameterizing classes ` object ` and ` null ` : at least one needs to be non - parameterized , if not both ? otherwise we may have an unbounded infinite ascending chain of supertypes ( see section  [ sec : nomvsstruct ] . )",
    "( what will then be the meaning of ` ? ` , and be the default type argument ? ) 5 .",
    "[ enu : more - levels / iterations :- to]more levels / iterations : to further demonstrate the fractal observation , and to help resolve which of the three equations above ( best ) describes the graph of the subtyping relation , we draw the level 2 graph @xmath36 using a simpler initial graph ( _ i.e. _ , the ` skeleton ' ) than we used for the earlier figures . see figure   and figure  . + + subtyping levels 0 , 1 with one generic class ( ` c ` ) ] +    +   + some notes on @xmath14 , @xmath37 , @xmath36 : 1 .",
    "@xmath36 , constructed as @xmath38 , has 32 nodes , and 66 edges . 2 .   the number of levels in graphs @xmath14 ,",
    "@xmath37 , @xmath36 , ...",
    "( _ i.e. _ , the maximum path length ) increases by two each time ( 2 , 4 , 6 , 8 , ... ) .",
    "this is clear in the diagrams , particularly ones with colored arrows .",
    "3 .   the number of nodes and edges in @xmath14 , @xmath37 , @xmath36 , ... : 1 .",
    "nodes : @xmath14**=3**=(2 + 1 ) , @xmath37**=8**=(2 + 3 + 2 + 1 ) , @xmath36**=32**=(2 + 8 + 10 + 7 + 4 + 1 ) , ... * * ? ? ?",
    "* * = ( 2 + 32 + 66+< ... 4 numbers ... >+1 ) .",
    "edges : @xmath14**=2 * * , * * @xmath37**=10 * * , * * @xmath36**=66 * * , ... * ? ? ?",
    "algebraic equations : 1 .",
    "@xmath36 , as constructed above , is the same graph as @xmath39 ... ! !",
    "2 .   thus ,",
    "@xmath40 , meaning that , given @xmath32 , we have @xmath41 3 .",
    "the skeptic reader may trying constructing the graph corresponding to the equation @xmath35 4 .   * proof * : each type / node constructed in @xmath39 is constructed in @xmath38 ( and vice versa , which is easy to see ) .",
    "same for proving @xmath42 , which means we have @xmath43 5 .",
    "( an analogy ) something unknown becoming known . knowing it again does not add new .",
    ".   philosophical observation , using ` old ' = @xmath44 , ` new ' = @xmath45 : 1 .",
    "new in new = new in old 2 .",
    "old in new !",
    "= new in old 3 .",
    "old in old = new = old in new 5 .",
    "in addition to subgraphs highlighted in green and red ( which show an exact copy and a flipped copy , due to covariance and contravariance respectively ) of @xmath37 inside @xmath36 , figure   also shows a miniature _ pruned _ flipped copy of @xmath37 inside @xmath36 , highlighted in blue ( due to bounded contravariance ) ."
  ],
  "abstract_text": [
    "<S> while developing their software , professional object - oriented ( oo ) software developers keep in their minds an image of the subtyping relation between types in their software . </S>",
    "<S> the goal of this paper is to present an observation about the graph of the subtyping relation in java , namely the observation that , after the addition of generics  and of wildcards , in particular  to java , the graph of the subtyping relation is no longer a simple directed - acyclic graph ( dag ) , as in pre - generics java , but is rather a _ fractal_. further , this observation equally applies to other mainstream nominally - typed oo languages ( such as c # , c++ and scala ) where generics and wildcards ( or some other form of ` variance annotations ' ) are standard features . </S>",
    "<S> accordingly , the shape of the subtyping relation in these oo languages is more complex than a tree or a simple dag , and indeed is also a fractal . given the popularity of fractals , the fractal observation may help oo software developers keep a useful and intuitive mental image of their software s subtyping relation , even if it is a little more frightening , and more amazing one than before . with proper support from ides , the fractal observation can help oo developers in resolving type errors they may find in their code in lesser time , and with more confidence . </S>"
  ]
}