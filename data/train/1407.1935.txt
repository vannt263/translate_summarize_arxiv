{
  "article_text": [
    "caching , a technique playing a crucial role in combatting the peak hour network traffic congestion , receives increasing attention recently . a natural way to reduce peak hour traffic",
    "is to duplicate some contents at the end users . in the literature , there are several works focusing on investigating how to duplicate fractions of files at end users so that the peak rate is minimized and network congestion is reduced . usually , caching works in two phases .",
    "one is the placement phase , which is performed during off - peak times .",
    "the other is the delivery phase , performed during rush hours when network resources are scarce .",
    "the general model with caching strategy were discussed in @xcite-@xcite where no coding strategy was applied and the gain comes only from local duplication . however ,",
    "if each user is equipped with a cache with a small size compared with the amount of the content in the server , this gain is readily observed to be negligible .    in @xcite , the index coding strategy was discussed . in @xcite , a new coded caching strategy from an information - theoretic perspective",
    "was proposed to achieve a new achievable rate region for general scenarios , where some finite rate - cache pairs were firstly derived and then the lower convex envelope of these points is shown to be achievable by memory sharing .",
    "this strategy was shown to enjoy both the local gain from duplication as well as the global gain from coding .",
    "this fundamental idea was then extended to @xcite where a decentralized coded caching algorithm was presented and to @xcite where the non - uniform demand scenario was investigated . in @xcite ,",
    "the secure issue with coded caching was investigated .    in this work , however , we investigate the fundamental achievable rate for a special case where all users are equipped with a cache of a small size . in this case , appropriate coded duplication of contents is essential to reduce the delivery rates . to this end",
    ", we introduce a new coded caching strategy and it is shown that the rate of this strategy coincides with the lower cut - set bound when the cache size is rather small . with memory sharing , it is shown that our strategy outperforms the strategy proposed in @xcite in terms of achievable delivery rates when the cache size is relatively small .",
    "a system consisting of one server and @xmath0 users is considered .",
    "an error - free link is assumed to be shared by all users connecting the server , where @xmath1 files are stored for fetching .",
    "we also assume that each user is equipped with a cache of size @xmath2 ( @xmath3 ) and each user is assumed to request only one full file .",
    "the aim is to design a novel coded strategy to achieve a lower peak rate that can guarantee each user obtaining the file requested , compared with the recent results on caching problems in @xcite . in this work",
    ", we turn our interest on the special case that all users are with small buffer sizes ( @xmath4 ) and @xmath5 , i.e. , the amount of users is no smaller than that of the files in the server .    for clarity , we denote the smallest peak rate achieved by our strategy by @xmath6 , i.e. , the cache - rate pair ( @xmath7,@xmath6 ) is on the boundary of the achievable region , where @xmath7 denotes the cache size of all users . for comparison",
    ", we denote the minimum peak rate achieved in @xcite by @xmath8 and the lower cut - set bound by @xmath9 .",
    "[ thm:1 ] for @xmath10 files and @xmath0 ( @xmath11 ) users each with cache of size @xmath12 , the cache - rate pair ( @xmath13 ) is achievable .",
    "furthermore , if @xmath14 $ ] , @xmath15 is achievable .",
    "[ thm:2 ] for @xmath10 files and @xmath0 ( @xmath16 and @xmath17 ) users each with cache of size @xmath18 , the cache - rate pair ( @xmath19 ) is achievable .",
    "furthermore , if @xmath20 $ ] , @xmath15 is achievable .",
    "[ thm:3 ] for @xmath10 files and @xmath0 ( @xmath21 ) users each with cache of size @xmath22 , the achievable rate coincides with the associated cut - set bound .    [ thm:4 ] for @xmath10 files and @xmath0 ( @xmath16 and @xmath17 ) users each with cache of size @xmath23 , the achievable rate coincides with the associated cut - set bound",
    ".    note that in @xcite , the achievable rate with @xmath18 is on the line connecting the two cache - rate pair points ( @xmath24 ) and the first non - trivial point ( @xmath25 ) ( @xmath26 ) are directly derived and then the achievable cache - rate region is determined by the lower convex envelope of these points .",
    "it is readily observed that the non - trivial direct - derived achievable point with the smallest cache size is hence the point with cache size @xmath27 . ] and is hence given by , @xmath28 where the inequalities in ( [ eq : proof : compare_2 ] ) and ( [ eq : proof : compare_3 ] ) follow from the setting that @xmath29 .",
    "note also that the inequality in ( [ eq : proof : compare_3 ] ) strictly holds as long as @xmath30 , which demonstrates the gain achieved by our coding strategy over the strategy designed in @xcite for the small cache size scenario .",
    "furthermore , with our coding strategy , we have @xmath31 which is an encouraging result .",
    "in other words , with a smaller cache size @xmath18 , the designed coding strategy can achieve a rate no smaller than that in @xcite with the cache size @xmath32 if @xmath33 .",
    "therefore , compared with @xcite , the rate with the cache size of @xmath34 is improved by our results through memory sharing , where the exact expression of the achievable rate with @xmath35 is given on top of next page .",
    "* example 1 . * in this example , we set @xmath36 , i.e. , a system consists of three files in the server and three intended users .",
    "let @xmath37 , @xmath38 and @xmath39 .",
    "we would like to show that the @xmath40 pair ( @xmath41 ) is achievable .    with cache size @xmath42",
    ", we split each file into three subfiles with equal size , i.e. , @xmath43 , @xmath44 and @xmath45 . in the placement phase",
    ", the cache content of user @xmath46 is designed to be @xmath47 , which is an xored version of three subfiles from different files in the server .    in the delivery phase ,",
    "let us consider an example that user 1 requires @xmath48 , user @xmath49 requires @xmath50 an user @xmath51 requires @xmath52 .",
    "hence , to obtain the missing files for user 1 , we should transmit @xmath53 and @xmath54 to obtain @xmath55 from the xored subfile in @xmath56 as well as @xmath57 and @xmath58 for the missing files of @xmath48 . in a similar manner , for user 2 requesting file @xmath50 ,",
    "the server need to transmit @xmath59 for the missing part of @xmath50 ( @xmath53 is obtained from the shared link satisfying user 1 ) .",
    "in addition , the server transmits @xmath60 to obtain @xmath61 ( as @xmath57 has been transmitted and received by user 2 ) .",
    "note that the server has satisfied user 3 since the missing subfiles @xmath54 and @xmath60 are already received by it . in addition , with the received @xmath58 and @xmath59 from the shared link user @xmath51 can obtain @xmath62 from the cached @xmath63 .",
    "therefore , the server has to transmit ( @xmath53 , @xmath54 , @xmath57 , @xmath58 , @xmath59 , @xmath60 ) to satisfy the requests of all users in this example . in a similar manner",
    ", all other requests can be satisfied .",
    "since each subfile has rate @xmath64 , the total rate @xmath49 is achievable .",
    "on the other hand , the cut set bound derived in @xcite indicates the minimum rate is @xmath65 and is identical to the achievable rate . by cache sharing , we conclude that the achievable rate coincides with the cut set bound if @xmath66 .",
    "* example 2 . * in this example , we consider a system with a server of @xmath67 files and @xmath67 users , i.e. , @xmath68 .",
    "the four files are termed as @xmath37 , @xmath38 , @xmath39 and @xmath69 .",
    "consider the case with the cache size @xmath70 . in this example , we split each file into four parts of equal size , i.e. , @xmath71 , @xmath72 , @xmath73 and @xmath74 . in the placement phase , we let user @xmath75 caches the xored subfile @xmath76 .    in the delivery phase , for instance , consider that user @xmath75 requires @xmath77 , i.e. , user 1 requests a , user 2 requests b , user 3 requests c and user 4 requests d. we can satisfy all requests of different users by sending ( @xmath57 , @xmath58 , @xmath78 , @xmath53 , @xmath59 , @xmath79 , @xmath54 , @xmath60 , @xmath80 , @xmath81 , @xmath82 , @xmath83 ) .",
    "it is observed that with this transmission subfile list , all missing subfiles can be received by intended users .",
    "in addition , it is readily verified that the intended subfile which is xored in the cache of each user is also obtained by xoring the three other xored subfiles .",
    "for example , for user 1 , it receives @xmath53 , @xmath54 and @xmath81 , hence @xmath55 is also fetched by @xmath84 . in a similar manner , user 2 , user 3 and user 4 can also obtain @xmath61 , @xmath62 and @xmath85 respectively .",
    "therefore , by sending these subfiles , all user requests are satisfied with rate @xmath51 , as the rate of each subfile is @xmath86 .",
    "similarly , we can realize any possible requests with rate @xmath51 with the cache size @xmath70 .",
    "hence , the cache - rate pair ( @xmath86 , @xmath51 ) is achievable and can be verified to coincide with the cut - set bound , which is @xmath87 .",
    "therefore the cut - set bound is achievable if @xmath88 .",
    "akin to * example 1 and 2 * , the cache - rate pair ( @xmath89,@xmath90 ) is achievable for an arbitrary number of files @xmath1 in the server with the same number of users as that of the files in the server , i.e. , @xmath21 .",
    "the proof for this general case is left to the next section .",
    "* example 3 . *",
    "consider a system with @xmath91 files and @xmath92 users .",
    "we term each file as @xmath37 , @xmath38 and @xmath39 .",
    "consider the case with cache size @xmath70 .",
    "we split each file into 12 parts of equal size , i.e. , @xmath93 , @xmath94 and @xmath95 .",
    "each cache can therefore store three subfiles .",
    "in the placement phase , we let user @xmath75 caches the three xored subfiles as @xmath96 hence one user caches 9 exclusive subfiles in an xored version and any subfiles partitioned in the server can be found in the cache of one and only one user .    in the transmissions phase ,",
    "let us assume that user @xmath97 needs @xmath48 , user @xmath49 needs @xmath50 , user @xmath51 needs @xmath52 and user @xmath67 needs @xmath48 . to fully exploit the coded caching strategy , we then delivery the subfiles ( @xmath53 , @xmath54 , @xmath61 , @xmath60 , @xmath59 , @xmath62 ) for user 1 to xor @xmath55 , @xmath57 and @xmath58 . by delivering of these subfiles , @xmath53 , @xmath61",
    "are received by user @xmath49 and @xmath54 , @xmath60 are received by user @xmath51 .",
    "similarly , we deliver ( @xmath78 , @xmath80 , @xmath98 , @xmath99 , @xmath100 , @xmath101 ) for user 2 to obtain @xmath79 , @xmath102 and @xmath103 .",
    "( @xmath104 , @xmath105 , @xmath106 , @xmath107 , @xmath108 , @xmath109 ) for user 3 to obtain @xmath110 , @xmath111 and @xmath112 .",
    "( @xmath113 , @xmath114 , @xmath115 , @xmath116 , @xmath117 , @xmath118 ) for user 4 to obtain @xmath119 , @xmath120 and @xmath121 .",
    "hence , by delivering these @xmath122 subfiles , user @xmath49 receive the complete file @xmath50 and user @xmath51 receive the entire file @xmath52 .",
    "however , user 1 still lacks the subfiles ( @xmath119 , @xmath120 , @xmath121 ) and user 4 is in need of the subfiles ( @xmath55 , @xmath57 , @xmath58 ) . to exploit the side information at the caches , we hence delivery ( @xmath123 , @xmath124 and @xmath125 ) . by doing so , we can fulfil the requests of all users with delivery of 27 subfiles , i.e. , rate @xmath126 is achievable for this case . similarly",
    ", it can be readily shown that this rate is achievable for any other possible requests .",
    "it is worth pointing out that , the cut - set bound at the point @xmath70 is @xmath127 and identical to the achievable rate @xmath128 .",
    "thanks to cache sharing , the cut - set bound is therefore achievable in the interval @xmath129 $ ] in this example .",
    "* example 4*. consider the case of a server with @xmath51 files and 5 users .",
    "we term each file as @xmath37 , @xmath38 and @xmath39 .",
    "consider the case with cache size @xmath130 .",
    "we split each file into @xmath131 parts of equal size , i.e. , @xmath132 , @xmath133 and @xmath134 and each cache can store three subfiles . in the placement phase ,",
    "we let user @xmath75 caches the three xored subfiles as @xmath96 each user then stores @xmath135 exclusive subfiles in an xored version and each subfile can be found in the cache of one and only one user . in the transmissions phase ,",
    "let us assume that user @xmath97 needs @xmath48 , user @xmath49 needs @xmath50 , user @xmath51 needs @xmath52 , user @xmath67 needs @xmath48 and user @xmath136 requests @xmath50 . similar to * example 3 * , we deliver the subfile list ( @xmath53 , @xmath54 , @xmath61 , @xmath60 , @xmath59 , @xmath62 ) for user 1 to xor @xmath55 , @xmath57 and @xmath58 , therefore @xmath53 , @xmath61 are received by user @xmath49 and user @xmath136 , while @xmath54 and @xmath60 are received by user 3 .",
    "similarly , we deliver ( @xmath78 , @xmath80 , @xmath98 , @xmath99 , @xmath100 , @xmath101 ) for user 2 to obtain @xmath79 , @xmath102 and @xmath103 ; ( @xmath104 , @xmath105 , @xmath106 , @xmath107 , @xmath108 , @xmath109 ) for user 3 to obtain @xmath110 , @xmath111 and @xmath112 ; ( @xmath113 , @xmath114 , @xmath115 , @xmath116 , @xmath117 , @xmath118 ) for user 4 to obtain @xmath119 , @xmath120 and @xmath121 ; ( @xmath137 , @xmath138 , @xmath139 , @xmath140 , @xmath141 , @xmath142 ) for user @xmath136 to obtain @xmath143 , @xmath144 and @xmath145 .",
    "hence , by delivering these @xmath146 subfiles , user @xmath51 receive the entire file @xmath52 .",
    "however , user @xmath97 still requests the subfiles ( @xmath119 , @xmath120 , @xmath121 ) , user @xmath49 requests ( @xmath113 , @xmath115 , @xmath117 ) , user @xmath67 requests ( @xmath55 , @xmath57 , @xmath58 ) and user @xmath136 requests ( @xmath147 , @xmath148 , @xmath149 ) . to exploit the side information at the caches",
    ", we can delivery the xored version of the subfiles , i.e. , ( @xmath123 , @xmath124 , @xmath125 , @xmath150 and @xmath151 ) . with this coded transmission , all intended users",
    "can completely obtain the subfiles requested .",
    "we therefore fulfil the requests of all users by delivery of only 36 subfiles , i.e. , rate @xmath152 is achievable for this case . in a similar manner",
    ", it can be readily shown that this rate is achievable for any possible requests .",
    "it is worth pointing out that , the cut - set bound at the point @xmath130 is @xmath153 and equals the achievable rate @xmath154 . by memory sharing , the cut - set bound is therefore achievable in the interval @xmath155 $ ] in this example .",
    "we now present the achievable scheme for an arbitrary number of users with @xmath5 .",
    "we shall show that with the cache size of @xmath156 , the delivery rates presented in theorem [ thm:1]-[thm:2 ] are achievable and the cut - set bound is met for such points with cache size @xmath156 .      here",
    "we prove theorem 1 for the case with an equal number of files and users , i.e. , @xmath157 .",
    "we prove it in two folds .",
    "firstly , we verify that the point ( @xmath89,@xmath90 ) is achievable by a constructed coded caching scheme .",
    "secondly , we show that any points with @xmath158 can achieve a rate of @xmath159 by memory sharing .",
    "let us define the files as @xmath77 ( @xmath160 ) and split each file into @xmath1 subfiles , i.e. , @xmath161 . in the placement phase ,",
    "the cache of user @xmath162 is designed to be @xmath163 , an xored version of subfiles , which contains one and only one subfile from all files . with this coded placement scheme ,",
    "each user caches some exclusive part of all files .    in the delivery phase , if the users request @xmath164 files , we can simply transmit these requested files and the delivery rate is @xmath165 files .",
    "we then move to the case that the users request @xmath1 files , i.e. , each user requests a different file . due to symmetry , we only need to study the case that user @xmath75 requests file @xmath77 .",
    "the transmission algorithm is therefore presented as follows .",
    "* for the first file , we transmit the subfiles @xmath166 , @xmath167 , @xmath168 .",
    "* for the @xmath75th ( @xmath169 ) file , we transmit the subfiles @xmath170 , @xmath167 , @xmath171 , @xmath172 , @xmath167 , @xmath168 .",
    "* for the @xmath1th file , we transmit the subfiles @xmath173 , @xmath167 , @xmath174 .    as for each file",
    "@xmath175 fraction of it is delivered , we totally deliver @xmath90 files .    with this transmission , we argue that each user can obtain the files requested . for instance , for the @xmath75th user requesting @xmath77 , it can obtain all subfiles except @xmath176 from the delivery of @xmath77 directly .",
    "in addition , user @xmath75 receives all @xmath177 ( @xmath178 ) subfiles from file @xmath179 .",
    "hence it can obtain the subfile @xmath176 by @xmath180 therefore , user @xmath75 can obtain all subfiles of @xmath77 and construct the complete file @xmath77 . in a similar manner , all users can obtain the complete file requested and the cache - rate pair @xmath181 is hence achievable for this special case .",
    "moreover , due to symmetry , we can conclude that the cache - rate pair @xmath181 is achievable for all possible requests .",
    "on the other hand , with the two achievable points , i.e. , ( @xmath24 ) and ( @xmath89,@xmath90 ) taken into account , we can achieve a rate of @xmath182 for the cache size @xmath183 by memory sharing .",
    "theorem 1 is hence proved .",
    "here we prove theorem 2 for the case with @xmath184 .",
    "the files are defined by @xmath77 ( @xmath160 ) and we split each file into @xmath185 subfiles , i.e. , @xmath186 .    in the placement phase , the cache of user @xmath75 is designed to store @xmath1 xored version of subfiles , which are , @xmath187 with this coded placement scheme , each user caches some exclusive part of all files and the union set of the caches comprises all @xmath1 files in the server .    in the delivery phase , if all users request @xmath165 ( @xmath164 ) distinct files in total , we can simply transmit these requested files one by one and the total amount of files delivered is @xmath165 files and the associated rate is less than @xmath188 .",
    "we then move to the case that all @xmath1 files are requested .",
    "suppose user @xmath75 requests the file @xmath189 and correspondingly the subfile @xmath190 is requested by totally @xmath191 users . by definition , we hence have @xmath192 .",
    "the transmission procedure can be divided into two steps as follows .    1 .   in the first step",
    ", for the @xmath75th user requesting @xmath189 , we transmit @xmath193 ( @xmath194 and @xmath195 ) , i.e. , @xmath196 subfiles in total are delivered to obtain @xmath197 ( @xmath195 ) via coded operation .",
    "2 .   in the second step , for the rest subfiles requested by users , we apply the following algorithm by firstly grouping the users requesting the same file and then applying coding strategy to reduce transmissions .",
    "the details are presented as follows . 1 .",
    "if @xmath189 ( @xmath198 ) is solely requested by the @xmath75th user , all subfiles of @xmath189 can be completely received in step 1 ) .",
    "hence the amount of remaining requests for @xmath189 is @xmath199 .",
    "2 .   for any @xmath190 requested by @xmath200 users ( @xmath201 ) , where each associated user requesting the residue @xmath202 subfiles , we do 1 .",
    "initialization : list the users requesting @xmath77 in an ascending order with respect to their index . for simplicity , their index",
    "are correspondingly denoted by @xmath203 ( @xmath204 ) .",
    "observe that the exclusive subfiles obtained by user @xmath203 is @xmath205 ( @xmath195 ) and they are requested by the other users in the same group .",
    "set the initial value of the counter as @xmath206 .",
    "2 .   if @xmath206 , deliver the @xmath1 coded subfiles , @xmath207 ( @xmath195 ) and set @xmath208 .",
    "3 .   if @xmath209 ( @xmath210 ) , deliver the @xmath1 coded subfiles , @xmath211 ( @xmath195 ) to all users requesting @xmath77 , set @xmath208 and go to step iv ) .",
    "4 .   if @xmath212 go to step iii ) , otherwise terminate the delivery of subfiles of @xmath77 .",
    "note that in step 2 ) , a ) follows from two facts .",
    "the first is that the @xmath75th user obtains @xmath197 ( @xmath195 ) via coded delivery .",
    "the second is that it receives directly @xmath213 ( @xmath214 and @xmath195 ) in the first step because they are delivered for other users for xoring .",
    "therefore , the @xmath75th user can reconstruct the full file @xmath189 directly after step 1 ) .",
    "similarly for the case that @xmath77 is requested by more than one users ( @xmath201 ) in b ) of step 2 ) , the fact that each user requesting @xmath77 needs @xmath202 follows also from two facts .",
    "the first is that it receives @xmath1 subfiles via coded delivery in step 1 ) .",
    "the second is that it directly receives @xmath215 subfiles for the users requesting other files in step 1 ) .",
    "therefore , only @xmath216 subfiles is requested by each of the users requesting @xmath77 .    in the following",
    ", we shall show that the sub - algorithm in b ) in step 2 ) can help all users requesting @xmath77 receive all the residue files .",
    "note that for user @xmath217 requesting @xmath77 , it receives the subfile list ( @xmath211 ) ( @xmath218 , @xmath195 ) .",
    "it can firstly obtain @xmath219 and @xmath220 ( @xmath195 ) from the @xmath221th and the @xmath222 delivery of subfiles via xoring .",
    "it can then recursively obtain @xmath223 ( @xmath224 ) and @xmath225 ( @xmath226 ) .",
    "hence , user @xmath217 can obtain the complete file @xmath77 . in a similar manner",
    ", we can verify that any other users in the same group requesting @xmath77 can receive the complete file @xmath77 .",
    "as @xmath77 is an arbitrary file in the server , we conclude that all users can obtain the requested file by our algorithm and in the following we shall derive the achievable rate for @xmath18 by applying the algorithm above .",
    "we first denote @xmath227 as the amount of subfiles delivered in step i ) and @xmath228 as the amount of the xored version of subfiles delivered for @xmath77 in step 2 ) .    in step 1 ) , it is observed that the total amount of subfiles delivered is given by , @xmath229 as designed in step 2 ) for file @xmath77 , the total amount of the remaining transmissions is @xmath230 therefore , the total amount of subfiles delivered in the second step is @xmath231 the total amount of subfile deliveries in these two steps is given by @xmath232 the associated delivery rate therefore is @xmath233 and we can claim that @xmath234 is an achievable cache - rate pair .",
    "in addition , regarding the trivial cache - rate pair @xmath235 , for any @xmath236 , the rate pair @xmath237 is achievable by memory sharing .",
    "theorem 2 is hence proved .      here",
    "we show that the achieved rate given in theorem [ thm:3 ] and theorem [ thm:4 ] for the scenario with @xmath238 and @xmath236 coincides with the lower cut - set bound . from @xcite ,",
    "the cut - set lower bound is given by , @xmath239    therefore , with @xmath23 , we obtain @xmath240 where ( [ eq : proof : t4_1 ] ) follows directly from the cut - set bound and ( [ eq : proof : t4_2 ] ) follows from the fact that @xmath241 returns the maximum value of the elements in the brackets .",
    "( [ eq : proof : t4_3 ] ) follows directly from theorem [ thm:1 ] and theorem [ thm:2 ] .    from the above derivation",
    ", it is hence concluded that for the scenario @xmath242 and @xmath23 , the lower cut - set bound is achievable .",
    "theorem [ thm:3 ] and theorem [ thm:4 ] are therefore verified .",
    "in this work , we studied the caching problem when all users are with a small buffer size and the number of users is no less than the amount of files in the server .",
    "a novel coded caching scheme was proposed to achieve the cut - set bound rate for such a scenario .",
    "k. c. almeroth and m. h. ammar , `` the use of multicast delivery to provide a scalable and interactive video - on - demand service , '' _ ieee j. sel .",
    "areas communi .",
    "_ , 0.5em plus 0.5em minus 0.4emvol .",
    "11101122 , aug .",
    "1996 .",
    "s. borst , v. gupta , and a. walid , `` distributed caching algorithms for content distribution networks , '' _ proc .",
    "computer communi .",
    "( infocom10 ) _",
    ", 0.5em plus 0.5em minus 0.4empp .",
    "14781486 , mar .",
    "y. birk and t. kol , `` coding on demand by an informed source ( iscod ) for efficient broadcast of different supplemental data to caching clients , '' _ ieee trans .",
    "inf . theory _",
    ", 0.5em plus 0.5em minus 0.4emvol . 52 , pp . 28252830 , jun ."
  ],
  "abstract_text": [
    "<S> + in this work , the peak rate of the caching problem is investigated , under the scenario that the users are with small buffer sizes and the number of users is no less than the amount of files in the server . </S>",
    "<S> a novel coded caching strategy is proposed for such a scenario , leading to a lower peak rate compared to recent results in the literature . </S>",
    "<S> furthermore , it is verified that our peak rates coincides with the cut - set bound analytically in an information - theoretic view .    </S>",
    "<S> caching , coded caching , content distribution , network coding </S>"
  ]
}