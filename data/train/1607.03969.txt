{
  "article_text": [
    "it is known since dixon s 1902 paper @xcite that every bivariate polynomial of degree @xmath1 admits a determinantal representation with symmetric matrices of order @xmath1 . however , the construction of such matrices is far from trivial and up to now there have been no efficient numerical algorithms , even if we do not insist on matrices being symmetric .",
    "we introduce the first efficient numerical construction of a determinantal representation that uses @xmath2 matrices for a generic bivariate polynomial of degree @xmath1 , which , with the exception of the symmetry , agrees with dixon s result . this algorithm can be applied to almost all bivariate polynomials , for those that it can not be , we give a determinantal representation of order @xmath7 that is smaller than the existing determinantal representations .",
    "plestenjak and hochstenbach showed in @xcite how to apply determinantal representations to numerically find roots of a system of two bivariate polynomials @xmath8 the idea is to construct matrices @xmath9 of size @xmath10 and matrices @xmath11 of size @xmath12 such that @xmath13 \\det(a_2+x b_2 + y c_2)&=q(x , y ) \\end{split}\\ ] ] and then numerically solve the equivalent two - parameter eigenvalue problem @xcite @xmath14 ( a_2+x b_2 + y c_2 ) \\ , u_2&=0 .",
    "\\end{split}\\ ] ] in this approach it does not matter whether the matrices are symmetric . except in some special cases , we get @xmath15 and thus is a singular two - parameter eigenvalue problem . its finite regular eigenvalues , which can be computed numerically with a staircase type algorithm @xcite , are the roots of .",
    "this is a generalization of a well - known approach to numerically compute the roots of a univariate polynomial as eigenvalues of its companion matrix .",
    "the first phase , where we construct determinantal representations , should be computationally simple and return matrices as small as possible .",
    "it is easy to see that for a polynomial of degree @xmath1 we need matrices of order at least @xmath1 .",
    "there exist procedures , which use slow symbolic computation and other expensive steps , that do return representations with @xmath2 matrices for certain bivariate polynomials , but they are computationally too complex .",
    "for example , the method from @xcite , based on the proof from @xcite , returns @xmath2 symmetric matrices for a polynomial of degree @xmath1 that satisfies the so called real zero condition , but it is too slow for our purpose . as the first step of the method from @xcite is to find zeros of a system of bivariate polynomials of degree @xmath1 and @xmath16 , this clearly can not be efficient enough for our needs .",
    "in addition , we need a determinantal representation for any bivariate polynomial of degree @xmath1 .    in our approach to the computation of roots of a system of bivariate polynomials we must find the right balance in the first phase . as we can not exploit the symmetry of the matrices in , it is not necessary that the matrices have this property .",
    "if we want a representation with small matrices this might take too much time in the first phase , while a representation with large matrices slows down the second phase . by using the most efficient determinantal representations at the time with matrices of order",
    "@xmath17 , a numerical method was implemented in matlab @xcite that is competitive to some existing methods for polynomials up to degree 9 , see @xcite for details .    in this paper",
    "we give a new construction of determinantal representations .",
    "its computational complexity is just slightly above that of the construction used in @xcite , yet the matrices are much smaller",
    ". while the matrices in @xcite are of order @xmath17 , the new construction gives matrices of the minimal possible order @xmath1 for a generic bivariate polynomial of degree @xmath1 .",
    "this decreases the overall asymptotic complexity of solving the system via determinantal representations from @xmath18 to @xmath19 when @xmath20 .",
    "moreover , if both polynomials @xmath21 and @xmath22 are generic , then @xmath23 and is a nonsingular two - parameter eigenvalue problem , which is much easier to solve numerically than a singular one .",
    "we show that by applying the new algorithm we can efficiently compute a determinantal representation of order not larger than @xmath7 for any bivariate polynomial .",
    "this worst case order is already strictly smaller than all other known determinantal representation .",
    "the rest of the paper is organized as follows . in section  [ sec : over ] we give a short overview of existing determinantal representations . in section  [ sec : two ] we give a determinantal representation of order @xmath1 for a generic bivariate polynomial of degree @xmath1 .",
    "the algorithm requires that the polynomial satisfies certain initial conditions and we show in section  [ sec : preproc ] that a generic polynomial can always be transformed into an appropriate form . in section  [ sec : three ] we give a representation of order @xmath7 that is feasible for any bivariate polynomial of degree @xmath1 .",
    "we end with some numerical experiments in section  [ sec : numex ] and conclusions in section [ sec : conc ] .",
    "let @xmath24 where @xmath25 for all @xmath26 , be a bivariate polynomial of degree @xmath1 , where we assume that @xmath27 for at least one index such that @xmath28 .",
    "we say that matrices @xmath29 , where @xmath30 , form a _ determinantal representation _ of order @xmath31 of the polynomial @xmath0 if @xmath32 we also refer to a determinantal representation by the term _ linearization _ as a determinantal representation transforms a polynomial problem into a bivariate matrix pencil .",
    "the following definition of linearization was introduced in @xcite .    a linear bivariate pencil @xmath33 of size @xmath34 is a linearization of the polynomial @xmath35 if there exist two polynomial matrices @xmath36 and @xmath37 such that @xmath38 and @xmath39.\\ ] ]    dixon @xcite showed that every scalar bivariate polynomial of degree @xmath1 has a symmetric determinantal representation of order @xmath1 .",
    "up to now , no simple numerical procedure has been known that could compute such a representation .    in the semidefinite programming ( sdp )",
    "there is a large interest in symmetric determinantal representations of the real - zero polynomials , a particular subset of polynomials related to the linear matrix inequality ( lmi ) constraints . for an overview ,",
    "see , e.g. , @xcite .",
    "a real bivariate polynomial @xmath0 satisfies the _ real zero condition _ with respect to @xmath40 if for all @xmath41 the univariate polynomial @xmath42 has only real zeros .",
    "a two - dimensional _ lmi set _ is defined as @xmath43 , where @xmath3 , @xmath4 , and @xmath5 are symmetric matrices of size @xmath34 and @xmath44 stands for positive semidefinite . for this particular subset of polynomials there do exist some procedures that involve slow symbolic computation and other expensive steps , see , e.g. , @xcite . however , besides being too slow these algorithms are limited to the real - zero polynomials only .",
    "while in sdp and lmi the matrices have to be symmetric or hermitian , this is not important in our case .",
    "we are looking for a simple and fast numerical construction of matrices as small as possible that satisfy ( [ eq : detr ] ) .",
    "here is a list of some available determinantal representations for generic bivariate polynomials .",
    "the first group of determinantal representations has the property that the elements of matrices @xmath3 , @xmath4 , and @xmath5 depend affine - linearly on the coefficients of the polynomial @xmath0 .",
    "such determinantal representations are named _ uniform _ in @xcite . the first such representation of order @xmath45",
    "is given by khazanov in @xcite .",
    "this is improved to a representation or order @xmath46 by muhi and plestenjak in ( * ? ? ?",
    "* appendix ) .",
    "quarez @xcite gives a symmetric representation of order @xmath47 .",
    "a smaller nonsymmetric uniform representation of the same asymptotic order is described in @xcite .",
    "very recently , a new uniform representation of order @xmath48 was presented in @xcite , which is the first uniform representation such that the order of matrices grows linearly and not quadratically with @xmath1 .",
    "all uniform representations do not require any computation , the construction is very simple and fast .",
    "one just has to put the coefficients of @xmath0 on prescribed places in the matrices @xmath3 , @xmath4 , and @xmath5 .",
    "let us also remark that the above representations can be generalized to bivariate matrix polynomials in a straightforward way .",
    "if we allow computations , we can obtain representations of smaller order . in @xcite , a representation of order @xmath17",
    "this representation is used in @xcite as a part of a numerical method for the roots of a system of bivariate polynomials that is competitive to the existing numerical methods for polynomials of small degree .    in the following section we upgrade the approach from @xcite to obtain minimal determinantal representations of order @xmath1 while maintaining approximately the same complexity of computations involved in the construction .",
    "the result is the first efficient numerical algorithm for a determinantal representation of order @xmath1 of a generic bivariate polynomial of degree @xmath1 .",
    "let be a bivariate polynomial of degree @xmath1 that we want to linearize .",
    "let us assume that @xmath0 has the following properties :    1 .",
    "@xmath49 , 2 .",
    "@xmath50 , 3 .",
    "all zeros @xmath51 of the polynomial @xmath52 are simple and nonzero .",
    "we show in section [ sec : preproc ] that by a linear change of coordinates we can transform a generic bivariate polynomial into one that has the above properties .",
    "after we construct a determinantal representation of the transformed polynomial , we change the variables back to obtain a representation of the original polynomial @xmath0 .",
    "the construction is based on bivariate polynomials @xmath53 constructed recursively as @xmath54 where each coefficient @xmath55 has a linear form @xmath56 with @xmath57 for @xmath58 .",
    "it follows from the construction that @xmath59 is a bivariate polynomial of degree @xmath60 for @xmath61 .",
    "we will show that it is possible to set the values of @xmath62 , and @xmath63 so that @xmath64 the bivariate pencil with the determinantal representation is then of size @xmath2 and has the form @xmath65.\\ ] ] if the scalars @xmath62 , and @xmath63 are such that holds , then it follows from and the structure of that @xmath66 = \\left[\\begin{matrix}p(x , y ) & \\gamma_1 & \\gamma_2 & \\cdots & \\gamma_{n-2 } & p_{n0}x \\cr 0 & 1 \\cr 0 & -f_{21 } & 1\\cr 0 & -f_{32 } & - f_{31 } & 1\\cr \\vdots & \\vdots & & \\ddots & \\ddots \\cr 0 & -f_{n-1,n-2 } & \\cdots & \\cdots & -f_{n-1,1 } & 1 \\end{matrix}\\right],\\ ] ] therefore @xmath67 and @xmath68 is indeed a linearization of @xmath0 .",
    "one can also see from and the structure of that if @xmath69 for a nonzero vector @xmath70 , then @xmath71 has ( up to a multiplication with a nonzero scalar ) the structure @xmath72^t.\\ ] ]    we start with the partial expansion @xmath73 where @xmath74 and @xmath75 , i.e. , @xmath76 , for @xmath77 . because @xmath78 agrees with the sum of all terms of @xmath0 that have total degree @xmath1 , we get @xmath79 where we take into account that @xmath80 .",
    "now we introduce the coefficients @xmath81 in the following way .",
    "let @xmath82 be the sum of all terms of @xmath83 with total degree @xmath16 .",
    "since @xmath80 , there exists a bivariate polynomial @xmath84 of degree @xmath85 such that @xmath86 we can easily compute the coefficients of @xmath84 by dividing the coefficients of @xmath87 by @xmath88 .",
    "once we have @xmath84 , we set the coefficients @xmath89 , and @xmath90 in @xmath81 so that @xmath91 we show later how this can be done by applying a direct formula for @xmath90 and solving a nonsingular triangular system of linear equations for @xmath89 . as a result , when we update the expansion into @xmath92 we get the new residual @xmath93 which contains only terms with total degree @xmath85 or less .",
    "now we use @xmath94 to update @xmath95 so that the coefficient at @xmath96 becomes zero .",
    "it is easy to see that there exists @xmath97 such that @xmath98    in a similar way we fix the remaining columns .",
    "we start with the residual @xmath99 , which is a bivariate polynomial of degree @xmath100 with a zero coefficient at @xmath101 . in the first part we set the coefficients of @xmath102 so that the new residual @xmath103 is a polynomial of degree @xmath104",
    ". then we compute the coefficient @xmath105 to annihilate the term @xmath106 in @xmath103 .",
    "this gives the starting residual @xmath107 for the next iterative step .",
    "let us show in more details how to obtain the parameters in the @xmath108th column of and @xmath105 .",
    "we start from the residual @xmath109 select the terms of @xmath99 of total order @xmath100 and form @xmath110 from @xmath111 we compute a polynomial @xmath112 of degree @xmath104 such that @xmath113 next , we have to find the coefficients @xmath114 , and @xmath115 such that @xmath116 this is equivalent to finding @xmath114 , and @xmath115 such that @xmath117 by comparing the coefficients at @xmath118 we see that @xmath119 where @xmath120 .",
    "this gives the direct formula @xmath121 from we get that @xmath122 where @xmath123 is a polynomial of degree @xmath124 .",
    "after we compute @xmath123 from , the next step is to find @xmath114 from so that @xmath123 is a linear combination of the polynomials @xmath125 the following lemma shows that such @xmath114 do exist because the above polynomials form a basis for the set of polynomials of degree less than or equal to @xmath124 .    [",
    "lem : nonsm ] polynomials @xmath126 defined in form a basis for all polynomials of degree less than or equal to @xmath124 for @xmath127 .",
    "we have @xmath104 polynomials @xmath126 of degree @xmath124 . if we look at the matrix of values of these polynomials in points @xmath128 , @xmath129,\\ ] ] we see that the matrix is lower triangular with nonzero elements on the diagonal , because it follows from that @xmath130 for @xmath131 and @xmath132 for @xmath133 .",
    "the matrix is therefore nonsingular and the polynomials @xmath126 satisfy the haar condition . as a result @xmath126 form a basis for all polynomials of degree less than or equal to @xmath124 .",
    "we know that two polynomials of degree @xmath124 or less are equal if they obtain the same values at @xmath104 distinct points .",
    "we use this to write down a system of linear equations for @xmath114 by choosing @xmath128 as @xmath104 distinct points .",
    "this gives @xmath134 \\left[\\begin{matrix } \\beta_{kk } \\cr \\beta_{k+1,k } \\cr \\vdots \\cr \\beta_{n-1,k}\\end{matrix}\\right ] = \\left[\\begin{matrix } g_{n - k-1}(\\xi_1 ) \\cr g_{n - k-1}(\\xi_2 ) \\cr \\vdots \\cr g_{n - k-1}(\\xi_{n - k})\\end{matrix}\\right]\\ ] ] and we know from lemma [ lem : nonsm ] that the system is nonsingular .",
    "in addition to being lower triangular the system is also banded , and thus can be solved very efficiently with the forward substitution .    once we have the coefficients @xmath102 , we update the polynomials @xmath135 , while the remaining polynomials @xmath136 do not change anymore .",
    "the updated polynomials give the residual @xmath137 we use @xmath138 to update @xmath103 so that the coefficient at @xmath106 becomes zero .",
    "a simple computation shows that we have to choose @xmath139 which is well defined because @xmath140 .",
    "the new residual is @xmath141 and compared to the degree of the residual is reduced by one .",
    "we repeat the procedure and after @xmath16 steps we get the final residual @xmath142    1 .",
    "compute roots @xmath51 of @xmath143 .",
    "+ 2 . @xmath144 + 3 . for @xmath145 + 4 .",
    "@xmath146 + 5 .",
    "@xmath147 + 6 . for @xmath148 + 7.@xmath149 + 8.@xmath150 + 9.@xmath151 + 10.for @xmath152 + 11.for @xmath153 + 12.@xmath154 + 13.solve @xmath155 \\left[\\begin{matrix } \\beta_{kk }",
    "\\cr \\beta_{k+1,k } \\cr \\vdots \\cr \\beta_{n-1,k}\\end{matrix}\\right ] = \\left[\\begin{matrix } g(\\xi_1 ) \\cr g(\\xi_2 ) \\cr \\vdots \\cr g(\\xi_{n - k})\\end{matrix}\\right ] .",
    "$ ] + 14.@xmath156 + 15.for @xmath157 + 16.@xmath158 + 17.@xmath159 + 18.@xmath160 + 19.@xmath161 + 20.@xmath162 +",
    "return + @xmath163,\\qquad b=\\left[\\begin{matrix } r_{10 } & 0 & \\cdots & 0 & p_{n0 } \\cr -1 & 0\\cr \\vdots & \\ddots & \\ddots \\cr -1 & \\cdots & -1 & 0\\cr -\\alpha_{n-1,n-1 } & \\cdots & -\\alpha_{n-1,2 } & -1 & 0 \\end{matrix}\\right],$ ] + @xmath164.$ ]    the algorithm is presented in algorithm [ alg : osijek ] . to further clarify the algorithm , we give example [ ex : po1l ] with most of the details for the construction of a determinantal representation of a bivariate polynomial of degree 5 .",
    "[ rem : double ] in algorithm [ alg : osijek ] we require that all roots of are simple and nonzero .",
    "the nonzero condition is related to expression for @xmath105 that involves only the roots @xmath165 .",
    "thus it is sufficient that the roots of are simple . if one of the roots is zero and they are ordered so that @xmath166 then everything works just fine .",
    "[ ex : po1l ] we would like to linearize the bivariate polynomial @xmath167 that satisfies the conditions @xmath168 and @xmath169 .    in the initial part before the main loop we compute the roots @xmath170 of the polynomial @xmath171 the roots , which are all simple and nonzero , are @xmath172 this gives the coefficients @xmath173 in the first column of the expansion , @xmath174    the coefficient at @xmath175 in the first row of the final representation is @xmath176 .",
    "the partial expansion of the polynomials @xmath177 after the first part is @xmath178 and the corresponding residual is @xmath179    now we enter the main loop .    1 .   from the terms of @xmath180 with total degree @xmath181",
    "we define @xmath182 and divide @xmath183 by @xmath184 to obtain @xmath185 .",
    "now we have to find the coefficients @xmath186 , and @xmath187 such that @xmath188 we get @xmath187 from as @xmath189 .",
    "this gives @xmath190 for @xmath191 , and @xmath192 we set the linear system @xmath193\\left[\\begin{matrix}\\beta_{22}\\cr \\beta_{32}\\cr \\beta_{42}\\end{matrix}\\right]= \\left[\\begin{matrix}g_2(\\xi_1 ) \\cr g_2(\\xi_2 ) \\cr g_2(\\xi_3)\\end{matrix}\\right].\\ ] ] when we insert the values we get @xmath194\\left[\\begin{matrix}\\beta_{32}\\cr \\beta_{42}\\cr \\beta_{52}\\end{matrix}\\right]= \\left[\\begin{matrix}12 \\\\[0.2em ] { 9\\over 2 } \\\\[0.2em ] -{15\\over 2}\\end{matrix}\\right]\\ ] ] and the solution is @xmath195 , @xmath196 , and @xmath197 .",
    "the updated expansion ( we update only the polynomials that change ) is @xmath198 which gives @xmath199 we compute @xmath200 from to annihilate the term @xmath201 in @xmath202 .",
    "we get @xmath203 .",
    "the residual at the end of step @xmath204 is @xmath205 2 .   in a similar way as before we get from @xmath95 the polynomial @xmath206 .",
    "now we have to find the coefficients @xmath207 , and @xmath208 such that @xmath209 we get @xmath208 from as @xmath210 .",
    "this gives @xmath211 for @xmath212 and @xmath213 we set the linear system @xmath214\\left[\\begin{matrix}\\beta_{33}\\cr \\beta_{43}\\end{matrix}\\right]= \\left[\\begin{matrix}g_1(\\xi_1 ) \\cr g_1(\\xi_2)\\end{matrix}\\right].\\ ] ] when we insert the values we get @xmath215\\left[\\begin{matrix}\\beta_{33}\\cr \\beta_{43}\\end{matrix}\\right]= \\left[\\begin{matrix}-8 \\\\[0.2em ] -{13\\over 2 } \\end{matrix}\\right]\\ ] ] and the solution is @xmath216 and @xmath217 .",
    "the updated expansion @xmath218 gives @xmath219 we compute @xmath220 from to annihilate the term @xmath221 in @xmath222 .",
    "the residual after step @xmath223 is @xmath224 3 .   from @xmath225",
    "we get @xmath226 .",
    "now we have to find coefficients @xmath227 and @xmath228 such that @xmath229 . clearly , the answer is @xmath230 and @xmath231 when we update the expansion to @xmath232 we get the residual @xmath233 from we compute @xmath234 .",
    "the final residual after the main loop is @xmath235    now we can simply write down the @xmath236 determinantal representation as @xmath237 -x-2y & 1 \\\\[0.2em ] -x - y & -x - y & 1 \\\\[0.2em ] -x-2y & -x-{1\\over 2}y & -x + y & 1 \\\\[0.2em ] -x+{3\\over 2}y & -x+{1\\over 2}y & -2x+y & -x+2y & 1\\end{matrix}\\right].\\ ] ]    let us remark that the polynomial in example [ ex : po1l ] was constructed in such way that the roots @xmath51 are all real , which results in real matrices in the determinantal representation . in a generic case , even if the polynomial is real , the roots can be complex and the representation has complex matrices .",
    "let @xmath0 be a bivariate polynomial of degree @xmath1 that does not satisfy the initial conditions of algorithm [ alg : osijek ] .",
    "we show that in the generic case we can always transform the polynomial into one that has the required properties .",
    "in this section we use the homogeneous polynomial form @xmath238 where @xmath239 are points in the projective plane .",
    "it is easy to see that if @xmath0 is such that algorithm [ alg : osijek ] can be applied and matrices @xmath240 are the output of the algorithm , then @xmath6 and @xmath241 this also works in the opposite direction .",
    "if we construct a determinantal representation with matrices of order @xmath1 of the homogeneous polynomial @xmath242 , then we get a determinantal representation of @xmath35 by simply setting @xmath243 .",
    "the homogeneous form gives us are more freedom in the following sense .",
    "we can apply a linear change of variables @xmath244= t \\left[\\begin{matrix}\\widetilde{x } \\cr \\widetilde{y } \\cr \\widetilde{z}\\end{matrix}\\right],\\ ] ] where @xmath245 is a nonsingular @xmath246 matrix .",
    "this transforms @xmath247 into a homogeneous polynomial @xmath248 .",
    "if @xmath249 is such that algorithm [ alg : osijek ] can be applied , we get matrices @xmath250 , @xmath251 , and @xmath252 such that @xmath253 this leads to a determinantal representation of @xmath0 after we substitute @xmath254 back to @xmath255 and set @xmath243 .",
    "let us remark that this works only in the case when the order of the matrices in the determinantal representation is equal to the degree of the polynomial .    keeping in mind the option of the above change of variables , let us transform the polynomial @xmath0 into a polynomial that can be linearized by algorithm [ alg : osijek ] . to do this we apply one or more linear changes of the variables . after we construct a determinantal representation of the transformed polynomial , we change variables back to get a determinantal representation of the initial polynomial .    1 .",
    "the first requirement is that @xmath49 , which is clearly true for a generic bivariate polynomial @xmath0 .",
    "if this is not the case , we apply a linear substitution of variables @xmath256 and @xmath257 , where we pick @xmath258 such that @xmath259 such @xmath258 exists because @xmath0 is of degree @xmath1 and therefore has at least one nonzero coefficient @xmath260 such that @xmath28 .",
    "this ensures that the substituted polynomial in @xmath261 and @xmath262 has a nonzero coefficient at @xmath263 .",
    "because of ( a ) we can assume that @xmath49 . next , we make sure that all roots of @xmath264 are single .",
    "this is equivalent to looking the intersections in the projection plane between the curve defined by @xmath265 and the line @xmath266 .",
    "we know by bzout s theorem ( see , e.g. , @xcite ) that each line intersects the curve , defined by a polynomial of degree @xmath1 , in @xmath1 points , counted by multiplicities .",
    "if these @xmath1 intersection points with the line @xmath266 are not simple , this should be true for a generic line of the form @xmath267 .",
    "thus , by an appropriate linear transformation of variables @xmath268 , @xmath269 , and @xmath270 we should transform polynomial @xmath242 into @xmath249 such that all roots of @xmath271 are simple .",
    "3 .   the remaining requirement is @xmath272 .",
    "we introduce a linear substitution of the form @xmath273 and @xmath274 , where @xmath275 is one of the roots of and @xmath276 because all roots of are simple , @xmath277 and the substitution is well defined . after the substitution we have a polynomial @xmath278 such that its coefficients @xmath279 and @xmath280 are both zero .",
    "the following theorem specifies the set of bivariate polynomials for which we can always find a suitable transformation in point ( b ) and apply algorithm [ alg : osijek ] .",
    "it is easy to see that a generic bivariate polynomial belongs to the set .",
    "[ thm : fact ] let @xmath0 be a bivariate non - constant polynomial of degree @xmath1 with a factorization @xmath281 where @xmath59 is an irreducible non - constant polynomial and each pair of polynomials @xmath282 and @xmath59 for @xmath283 does not have a common non - constant factor . a generic line @xmath284 in the projective plane intersects the curve @xmath265 , where @xmath242 is the homogeneous polynomial , in @xmath1 distinct points if any only if @xmath285 for @xmath286 .",
    "let us first assume that @xmath285 for @xmath286 .",
    "let @xmath287 be the degree of the polynomial @xmath288 and let @xmath289 be its homogeneous form for @xmath286 . since @xmath59 and @xmath290 , where @xmath291 , do not have a common non - constant factor , by bzout s theorem the curves @xmath292 and @xmath293 intersect in @xmath294 points , counted by multiplicities .",
    "if we take all intersections of @xmath292 and @xmath293 for @xmath295 and then add to this set all singular points of @xmath296 , which there are finitely many , for @xmath297 , we get a finite set of points @xmath298 in the projective plane .    a generic line @xmath299 does not intersect with @xmath298 .",
    "as all singular points are included in @xmath298 , by bzout s theorem the line intersects the curve @xmath292 in @xmath287 distinct points , which are distinct from @xmath300 intersections with @xmath293 for any @xmath301 and @xmath291 .",
    "we can conclude that the generic line @xmath299 intersects the curve @xmath265 in @xmath302 distinct points .    on the other hand , if there exists @xmath303 for @xmath286 , then clearly each intersection of an arbitrary line @xmath299 with the curve @xmath292 appears with multiplicity @xmath304 as an intersection of the line with the curve @xmath265 .",
    "we say that a polynomial is _ square - free _ if it is not a multiple of a square of a non - constant polynomial .",
    "it follows from theorem [ thm : fact ] that algorithm [ alg : osijek ] can be applied to a polynomial if and only if the polynomial is square - free .",
    "there do exist bivariate polynomials that can not be transformed into a polynomial that satisfies the conditions of algorithm [ alg : osijek ] .",
    "one such extreme example is the polynomial @xmath305 .",
    "it is easy to see that each line in the projective plane intersects the curve defined by @xmath306 in exactly one point with multiplicity @xmath1 .",
    "thus , we can not transform the polynomial @xmath0 to satisfy the conditions of algorithm [ alg : osijek ] .",
    "although the algorithm can not be applied , it is easy to see that @xmath0 has a trivial @xmath2 determinantal representation @xmath307 .",
    "extreme cases as the above are easy to detect by checking whether @xmath242 has the form @xmath308 .",
    "if the residual @xmath309 is zero , then @xmath0 has a representation of order @xmath1 with @xmath310 , @xmath311 , and @xmath312 .    for all other cases when",
    "the polynomial can not be transformed to satisfy algorithm [ alg : osijek ] , we give a construction that always works and returns a determinantal representation of order @xmath7 .",
    "we can assume that the residual is not zero , therefore a generic line @xmath313 intersects the curve @xmath265 in at least two different points .",
    "since we can apply an appropriate substitution from section [ sec : preproc ] , we can further assume that @xmath314 and that at least one of the roots of is nonzero .",
    "let us denote this particular nonzero root by @xmath315 .",
    "the main idea is to find a determinantal representation of an updated polynomial @xmath316 where we choose the parameters @xmath317 so that all roots of @xmath318 are simple , and then update this representation into a representation of the original polynomial @xmath0 .",
    "one can see that for all choices of @xmath317 two of the roots of are @xmath319 and @xmath320 .",
    "we can now compute an @xmath2 determinantal representation of @xmath321 using the transformations from section [ sec : preproc ] and algorithm [ alg : osijek ] , where in the algorithm we order the roots @xmath322 of so that @xmath323 and @xmath324 .",
    "let @xmath325 be a determinantal representation of @xmath326 .",
    "we extend it to a @xmath327 bivariate pencil @xmath328 such that @xmath329 .",
    "the extension has the block form @xmath330,\\ ] ] where @xmath331 , @xmath332 , and @xmath333 , such that @xmath334,\\quad a_{21}+xb_{21}+yc_{21}= \\left[\\begin{matrix } 0 & -x + \\mu_1 y & 0 & \\cdots & 0 \\cr 0 & 0 & 0 & \\cdots & 0 \\cr \\vdots & \\vdots & \\vdots & & \\vdots \\cr 0 & 0 & 0 & \\cdots & 0 \\end{matrix}\\right],\\ ] ] and @xmath335.\\ ] ] we know from that , except for the first line , @xmath68 is a lower triangular matrix with ones on the diagonal and it is easy to see that @xmath336    we start with the bivariate polynomial @xmath337 which already satisfies the condition @xmath338 . when this is not true",
    ", we first apply the substitution from section [ sec : preproc ] .",
    "the roots @xmath339 of @xmath340 are @xmath341 , @xmath342 , and @xmath343 .",
    "as we have two double roots , we can not apply algorithm [ alg : osijek ] , not even with remark [ rem : double ] in mind .",
    "so , instead of @xmath344 , we first linearize the updated polynomial @xmath345 where we selected the update so that the corresponding roots @xmath339 of @xmath0 are @xmath346 , @xmath347 , @xmath348 , @xmath349 , and @xmath343 , which are all simple .",
    "the algorithm [ alg : osijek ] ( we omit the details as they can be seen in example [ ex : po1l ] ) returns a determinantal representation @xmath350 , where @xmath351.\\ ] ] it follows from that a determinantal representation of order @xmath352 of the initial polynomial @xmath344 is @xmath353.\\ ] ]    if a polynomial @xmath0 of degree @xmath1 is such that we can not apply algorithm [ alg : osijek ] to obtain a determinantal representation of order @xmath1 , we can always construct a determinantal representation of order @xmath7 as described in this section . for small degree polynomials",
    "there are other available constructions that give representations of order smaller or equal to @xmath7 . for @xmath354 , @xmath355 , and @xmath356 , the construction in @xcite always returns representation of order @xmath357 , and @xmath352 , respectively .",
    "let us also remark , that for every polynomial of degree @xmath1 there exists a determinantal representation of order @xmath48 which does not involve any computations @xcite .",
    "a new numerical approach for computing roots of systems of bivariate polynomials was proposed in @xcite .",
    "the main idea is to construct determinantal representations of the polynomials and then treat the system as a two - parameter eigenvalue problem .",
    "the order of the determinantal representation affects the computational time to solve the two - parameter eigenvalue problem and so we are interested in representations as small as possible . using the representation of order @xmath358 for a bivariate polynomial of degree @xmath1 ( we refer to this method as lin2 ) it was shown in @xcite that the approach is competitive for polynomials of degree @xmath359 or less . in @xcite the method was compared to several numerical methods for polynomial systems : nsolve in mathematica  9  @xcite , bertinilab  1.4  @xcite running bertini  1.5  @xcite , naclab  3.0  @xcite , and phclab  1.04  @xcite running phcpack  2.3.84 , which was the fastest of these methods .    using the uniform representation of a smaller order @xmath48 for a bivariate polynomial of degree @xmath1 ( we refer to this method as minunif )",
    ", the computational times were significantly improved in @xcite and the largest degree such that the approach is competitive with the existing numerical methods for polynomial systems was raised to 15 .    in a numerical experiment",
    "we compare the new representation of order @xmath1 from section [ sec : two ] ( we refer to it as minrep ) to lin2 , minunif , and phclab on a similar set of random polynomials as in @xcite and @xcite .",
    "we take systems of full bivariate polynomials of the same degree , whose coefficients are random real numbers uniformly distributed on @xmath360 $ ] or random complex numbers , such that real and imaginary parts are both uniformly distributed on @xmath360 $ ] .    in order to overcome some difficulties that we noticed while testing minrep on polynomials of small degree ,",
    "some heuristics were applied in the implementation . in practice ,",
    "even if the polynomial satisfies the initial conditions of algorithm [ alg : osijek ] , i.e , the roots of are nonzero and simple , the obtained matrices @xmath3 , @xmath4 , and @xmath5 can be such that the error between @xmath35 and @xmath361 , caused by the numerical computation , is too large .",
    "this happens for instance when the roots of are ill - conditioned .",
    "also , when the roots of are close to each other , then linear systems can be ill - conditioned .",
    "a usual remedy for this is to apply a random linear transformation . as discussed in section [ sec : preproc ] , this is equivalent to intersecting the curve @xmath247 with a random line @xmath362 instead of @xmath266 .    to get out of such troubles ,",
    "we compute the determinantal representation and check its quality by computing @xmath363 , @xmath364 . if @xmath365 for a given constant @xmath366 ( in our experiments we use @xmath367 , @xmath368 , and @xmath369 , then we first compute a new representation for the polynomial , where we exchange the roles of @xmath370 and @xmath371 , and , if this does not help , then we apply a random change of variables . in our numerical experiments we noticed that this heuristics does not improve the situation for polynomials of degree 11 or more .",
    "it seems that for a generic bivariate polynomial the largest safe degree , when we can expect that the method works , is 10 .",
    "this does not mean that the method can not fail for polynomials of smaller degree .",
    "similar to other methods based on determinantal representations , this can happen for some systems that appear to be to difficult for this approach and require computation in higher precision .",
    "r|rrrrr    ' '' ''    @xmath372 & minrep & minunif ( @xmath373 ) & minunif ( @xmath374 ) & lin2 & phclab +    ' '' ''    3 & 6 & 6 & 6 & 7 & 210 + 4 & 8 & 9 & 11 & 11 & 247 + 5 & 11 & 15 & 18 & 18 & 289 + 6 & 15 & 25 & 32 & 32 & 344 + 7 & 20 & 40 & 55 & 70 & 409 + 8 & 29 & 70 & 98 & 191 & 499 + 9 & 46 & 112 & 172 & 439 & 607 + 10 & 64 & 184 & 301 & 1111 & 739 +    the results in table [ tbl : prim ] show that the new representation has a big potential as it is much faster than the previous ones .",
    "the results were obtained on a 64-bit windows version of matlab r2015b running on an intel core i5 - 6200u 2.30 ghz processor with 8 gb of ram . for each @xmath1",
    "we apply the methods to the same set of 50 real and 50 complex random polynomial systems of degree @xmath1 and measure the average time .",
    "the accuracy of all methods on this random set of polynomials is comparable . for minunif ,",
    "where determinantal representations have real matrices for real polynomials , we report separate results for polynomials with real and complex coefficients .",
    "although minrep is still the fastest method for @xmath375 , the computed roots are in most cases completely useless and , based on the results from @xcite , we rather suggest that minunif is applied to polynomials of such degree . as in minunif",
    "no computation is involved in the construction of determinantal representations , this phase is not affected by numerical errors . on the other hand , the matrices in minunif",
    "are approximately double size compared to the matrices in minrep and to extract the final solutions we have to compute the finite eigenvalues of a pair of singular pencils , which is more delicate than solving a regular pencil with the qz algorithm in minrep",
    ". a future research might give more insight into the cases when minrep does not perform so well and further improve the method .",
    "we did perform just a limited number of numerical tests using the @xmath7 representation from section [ sec : three ] . as in this case",
    "we obtain a pair of singular pencils , we recommend that minunif is applied to such polynomials .",
    "while the difference in the size of the matrices is minimal , the construction in minunif is free of computation and therefore not exposed to numerical errors .",
    "we presented a numerical construction for the determinantal representation of a generic bivariate polynomial @xmath0 of degree @xmath1 as @xmath376 , where @xmath3 , @xmath4 , and @xmath5 are matrices of order @xmath1 .",
    "the computation is quite straightforward and requires only routines for roots of univariate polynomials of degree @xmath1 and solutions of linear systems of order less than @xmath1 , both should be available in any numerical package .",
    "we believe that this is the first construction that reaches the theoretical lower order from dixon s theorem and can be applied to almost all bivariate polynomials",
    ". we do not get symmetric matrices , but this is not really important in our application .",
    "the new representation can be used to numerically compute the roots of a system of bivariate polynomials as eigenvalues of the related two - parameter eigenvalue problem .",
    "compared to the previous results , the new representation speeds up the computation considerably .    in all exceptional cases , where the assumptions of algorithm [ alg : osijek ] can not be satisfied , we can construct a representation of order @xmath7 .",
    "up to our knowledge this is , except for @xmath377 , the smallest known representation of a bivariate polynomial of degree @xmath1 that can be constructed with a direct procedure .",
    "this is a major improvement compared to the @xmath17 construction in @xcite and a small improvement to the recent representation of order @xmath48 in @xcite .    the algorithms in the paper give the smallest determinantal representations of bivariate polynomials so far .",
    "if we forget about the symmetry , then the only remaining open problem is how to efficiently obtain a representation of order @xmath1 for all polynomials of degree @xmath1 such that theorem [ thm : fact ] can not be applied .",
    "* acknowledgment * the author wishes to thank anita buckley ( university of ljubljana ) and michiel  e. hochstenbach ( tu eindhoven ) for helpful discussions .",
    "part of the research was performed while the author was visiting the department of mathematics at university of osijek .",
    "the author wishes to thank ninoslav truhar ( university of osijek ) for the hospitality .",
    ", phclab : a matlab / octave interface to phcpack . in : m.  stillman , j.  verschelde , and n.  takayama ( eds ) , _ software for algebraic geometry _ ,",
    "volume 148 of the i m a volumes in mathematics and its applications , springer , new york , ( 2008 ) 1532 .                            , lmi representations of convex semialgebraic sets and determinantal representations of algebraic hypersurfaces : past , present , and future , in h.  dym , m.  c.  de oliveira , m.  putinar ( eds . ) , _ mathematical methods in systems , optimization , and control : festschrift in h8onor of j.  william helton . _",
    "operator theory : advances and applications 222 , birkhuser ( 2012 ) 325349 ."
  ],
  "abstract_text": [
    "<S> for a generic bivariate polynomial @xmath0 of degree @xmath1 we introduce a simple and fast numerical algorithm for the construction of @xmath2 matrices @xmath3 , @xmath4 , and @xmath5 such that @xmath6 . </S>",
    "<S> this is the smallest sufficient size to represent a bivariate polynomial of degree @xmath1 and we give the first algorithm that can compute matrices of this size for almost all bivariate polynomials . </S>",
    "<S> the existence of such symmetric matrices for any bivariate polynomial of degree @xmath1 was established by dixon in 1902 , but , up to now , no simple numerical construction has been found , even if we allow that the matrices are not symmetric . </S>",
    "<S> the obtained representations may be used to efficiently numerically compute the roots of a system of two bivariate polynomials of small degree via the eigenvalues of a two - parameter eigenvalue problem . </S>",
    "<S> we show that the new representation speeds up the computation considerably .    </S>",
    "<S> bivariate polynomial , determinantal representation , system of bivariate polynomial equations , two - parameter eigenvalue problem .    65f15 , 65h04 , 65f50 , 13p15 . </S>"
  ]
}