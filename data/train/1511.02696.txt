{
  "article_text": [
    "the moran process describes the spread of a newly introduced mutant into a resident population  @xcite .",
    "its framework has been extended from a well - mixed population , which can be formulated as a one - dimensional markov chain , to a process on graphs  @xcite , where the configuration of the mutants on the graph has to be taken into account .",
    "the graph represents the spatial structure of the population .",
    "individuals are located on the vertices and connected via the edges of the graph .",
    "we study the discrete - time moran process , where there is one birth event and one death event per time step .",
    "mutants have a relative fitness @xmath0 and residents have fitness @xmath1 . in each time step",
    ", individuals have to be picked consecutively for birth and death .",
    "there are several possibilities to implement the details of these updates , however this is not essential for solving the system and is discussed elsewhere  @xcite .",
    "we consider only updating rules where birth happens according to fitness and death happens at random . in birth - death updating",
    ", an individual is selected with probability proportional to its relative fitness .",
    "it produces an identical offspring which replaces a randomly chosen neighbor . in death - birth updating , a randomly picked individual dies .",
    "its neighbors compete with probability proportional to their fitness to fill the empty vertex with their identical offspring .    as we assume no mutations ,",
    "the process eventually gets absorbed in the state with either only wild - type or only mutant individuals .",
    "we use a numerical approach based on the transition matrix to calculate fixation probabilities and times  @xcite .",
    "first , we explain how to compute the transition probabilities , given the adjacency matrix of the graph .",
    "we make use of the full state space approach introduced in  @xcite for birth - death updating .",
    "then , we show how to compute the fixation probability and time by solving a linear system .",
    "this note is wrapped up by a discussion on computational limitations and performance .",
    "given a graph @xmath2 with vertices @xmath3 and edges @xmath4 .",
    "an edge @xmath5 connecting vertices @xmath6 and @xmath7 is denoted by @xmath8 .",
    "an entry of the adjacency matrix @xmath9 is given by @xmath10    the graph can be undirected , i.e. @xmath11 for all @xmath12 , or directed .",
    "we assume the graph to be ( strongly ) connected , meaning that there is a ( directed ) path from vertex @xmath6 to @xmath7 , for all @xmath12 , and simple , i.e. there are no self - loops and parallel edges .",
    "let @xmath13 be a state of the moran process on graph @xmath14 , where @xmath15 mutants are located at the vertices in @xmath16 , i.e.  we exclude the cases with no mutants or only mutants here .",
    "now the transition probability from state s to @xmath17 , whereby increasing the number of mutants to @xmath18 is given by @xmath19 where @xmath20 is is the number of neighbors ( successors in the case of directed graphs ) of vertex @xmath21 , given by the sum of the @xmath21-th row of the adjacency matrix @xmath9 .    decreasing the number of mutants from state @xmath16 to state @xmath22 , where @xmath23 , is given by the following transition probability @xmath24    additionally , the probability to stay in state @xmath16 is given by @xmath1 minus the row sum of the transition matrix @xmath25",
    "the transition probabilities from the states with no mutants or only mutants are @xmath26 .",
    "this transition matrix forms the basis to compute the fixation probability and time in sections [ sec : fixprob ] and [ sec : fixtime ] .      in the moran process with death - birth updating ,",
    "a random individual is selected for death and its neighbors compete for the empty vertex with a probability proportional to their fitness .",
    "let @xmath27 denote the number of mutant neighbors ( predecessors in the case of directed graphs ) of a given vertex @xmath28 , @xmath29 .",
    "then @xmath30 , where @xmath31 is the indicator function , being one if @xmath32 and zero otherwise .",
    "the number of wild - type neighbors ( predecessors ) of the individual located at vertex @xmath28 are therefore given by @xmath33 .    then the transition probabilities are given by @xmath34    with @xmath26 , this transition matrix is used to compute the fixation probability and time for the moran process with death - birth updating .",
    "given the transition matrix from above , the master equation for the transition probabilities is given by    @xmath35    for well - mixed populations , which can be represented by a complete graph , the master equation has a closed form solution given by a sum over a product of the ratio of transition probabilities  @xcite .    ordering the states by the number of mutants first and by their position next",
    ", the transition matrix is given by @xmath36    rewriting this as a block matrix where @xmath37 is the transition matrix between transient states yields    @xmath38    let us write the master equation as an eigenvector problem :    @xmath39    where @xmath40 .",
    "if we use the block formulation of equation , then equation is equivalent to    @xmath41    where @xmath42 .",
    "equations and are always fulfilled .",
    "thus , we need only solve equation .",
    "we can subtract @xmath43 on both sides of equation and bring @xmath44 to the right side :    @xmath45    where @xmath46 is the identity matrix .",
    "now this matrix system can be solved for @xmath43 .",
    "let us here exemplarily calculate the fixation probability of all states of a small sample graph , a line of population size three , cf .",
    "figure [ fig : line3 ] .",
    "the adjacency matrix of the line of size three is @xmath47 with the adjacency matrix , we can now compute the transition matrix using equations and        the matrix @xmath48 and the vector @xmath49 for the system of linear equations as in equation are hence @xmath50    now , we can solve the system of linear equations for a specific value for @xmath51 , here we chose the neutral case @xmath52 , and obtain @xmath53 for the fixation probabilities starting from the different states .",
    "therefore a single mutant placed at a random node has a probability of @xmath54 of taking over the whole population .",
    "next , we compute the unconditional fixation time by modifying the approach above . the unconditional fixation time for a state @xmath55",
    "is the time it takes starting from that state until the absorbing all - mutant state @xmath56 or the absorbing no mutant state @xmath57 is reached .",
    "the unconditional fixation time is recursively given by @xmath58 here , the boundary conditions are @xmath59 .",
    "the transition matrix is the same as for computing the fixation probability ( cf .",
    "equation ) . to account for the addition of the one in equation , we add a column of ones and a row of zeros , where the new @xmath60 entry is @xmath1 .",
    "@xmath61    we can now write the computation of the unconditional fixation times as formulated in equation as an eigenvector problem @xmath62 where @xmath63 .",
    "writing equation in notation of the block matrices as in , we obtain @xmath64 where @xmath65 .",
    "note , that and are always true .",
    "hence , we only need to solve .",
    "we subtract @xmath66 and 1 on both side and thus obtain a linear system of equations @xmath67 we see that we can use the exact same matrix @xmath68 for the computation of the unconditional fixation times . only the vector we solve for changes ( @xmath69 instead of @xmath70 ) .      in this section , we explain how to obtain the transition probabilities conditioned on fixation of the mutant to calculate the conditional fixation time .",
    "the recursive equation for the conditional fixation time is similar to eq .",
    "@xmath71    to compute the conditional transition probabilities , we make use of bayes theorem    @xmath72    and obtain    @xmath73    where @xmath74 is the fixation probability starting from state @xmath75 .",
    "we see that for the calculation of the conditional transition probabilities , we need to weight the unconditional transition probabilities by the ratio of the fixation probabilities between the new ( @xmath16 ) and old ( @xmath76 ) state  @xcite .",
    "these fixation probabilities need to be calculated first , making use of the results of section [ sec : fixprob ] .",
    "otherwise , the approach is the same as for the unconditional times .",
    "the size of the matrix @xmath68 is @xmath77 , where @xmath78 denotes the population size . in a naive implementation",
    ", the matrix would therefore need @xmath79 bytes of memory . for a population of 10 individuals",
    ", this would mean 8355872 bytes @xmath80 8.4 mb .",
    "this is not a problem at all for computers nowadays .",
    "but because the matrix grows quadratic exponentially in population size ( with @xmath81 ) , a population with 20 individuals would need 8796059467808 bytes @xmath80 8796 gb . this is already way beyond possible today s regular computers .",
    "most of the entries in the matrix are zero , however @xcite . by computing the matrix @xmath68 in a sparse fashion ,",
    "the memory needed can be reduced to approximately @xmath82 , because from every state there are at most @xmath83 transitions possible .",
    "this way , the matrix for a population with 20 individuals needs approximately @xmath84 mb of memory . nevertheless ,",
    "also the sparse implementation of the matrix grows linear exponentially in population size ( with @xmath85 ) , and the computational limitations are quickly being reached .    to reduce the working memory needed , one could think of saving the matrix in a file instead of working memory .",
    "alternatively , one could compute the entries dynamically when needed by the solving of the system of linear equations . both approaches , however , would slow down the computation time significantly .",
    "but when working memory is a limiting factor , this would be a feasible possibility to circumvent this limitation .",
    "we have used the sparse bicgstab method implemented in the eigen3 package @xcite for solving the system of linear equations .",
    "this is an iterative method , which means that in theory the speed and accuracy of the algorithm hinges on the condition number of the matrix that is to be solved .",
    "the condition number is the fraction of the highest and the lowest eigenvalue of the matrix .",
    "an alternative would be using direct methods , which have the advantage of not depending on the condition number .",
    "however , these solvers need much more memory as well as cpu time for large matrices .      to test the computational performance ,",
    "we have computed the fixation probability of random graphs of different sizes for neutral mutants .",
    "we have created 20 connected , undirected @xmath86 erds - rnyi random graphs  @xcite with probability @xmath87 for each edge to be present . the transition matrix was created for a neutral mutant with fitness @xmath52 and we have solved the system to calculate the fixation probability . ]    in figure [ fig : performance ] the running time in seconds of building the matrix and solving the system of linear equations for all population sizes between 4 and 23 are given .",
    "we have used a macbook pro with a 3 ghz intel core i7 cpu and 16 gb ddr3 working memory for the tests .",
    "the exact software can be found at https://github.com/hindersin/efficientfixation[github.com/hindersin/efficientfixation ] .",
    "figure [ fig : performance ] shows that both building time and solving time grow linear exponentially in the population size . even though this is quite a fast growth , for size @xmath88 it takes only of the order of a few minutes to calculate the exact fixation probability .",
    "we also tested different fitness values and graph connectivities which led to similar running times . solving the system to compute the unconditional fixation time takes equally long .",
    "in this note we have presented a numerical approach to study evolutionary dynamics of a moran process on graphs .",
    "spatial structure can greatly influence both the fixation probability and the fixation time of a mutant population compared to a well - mixed population .",
    "however , dealing with a moran process on graphs seems to be a difficult undertaking .",
    "analytical solutions for the fixation probability and time have only been found for a small class of graphs  @xcite .",
    "additionally for general graphs there are approximations  @xcite and a recently developed computational method for the case without selection  @xcite .",
    "a method that allows one to directly analyze different parameters , such as population size , connectivity , and fitness of the mutants for general graphs may hence be valuable .",
    "the example of the line in section [ subsec : example ] illustrates the strength of our algorithm . in this line graph",
    "there are only two types of vertices , as the border vertices are transitive . using these kinds of symmetries",
    ", one can typically reduce the state space for many graphs , however this has to be done individually for every graph .",
    "our algorithm instead naively considers the whole state space , which allows for great flexibility and fast changes to the graph structure ."
  ],
  "abstract_text": [
    "<S> the moran process on graphs is an interesting model to study the spread of a new mutant in a spatially structured population . </S>",
    "<S> exact analytical solutions for the fixation probability and time have been found for only a few classes of graphs so far . </S>",
    "<S> simulations are time - expensive and many realizations are necessary , as the variance of the fixation times is high . </S>",
    "<S> we present an algorithm that numerically computes these quantities by an approach based on the transition matrix . </S>",
    "<S> the advantage over simulations is that the calculation has to be executed only once . </S>",
    "<S> building the transition matrix is automated by our algorithm . </S>",
    "<S> this enables a fast and interactive study of different graph structures and their effect on fixation probability and time . </S>",
    "<S> we provide a fast implementation in c with this note . </S>",
    "<S> our code is very flexible , as it can handle two different update mechanisms ( birth - death or death - birth ) , as well as directed or undirected graphs . </S>"
  ]
}