{
  "article_text": [
    "cake cutting is one the most fundamental topics in fair division  ( see * ? ? ?",
    "* ; * ? ? ?",
    "* ; * ? ? ?",
    "it concerns the setting in which a cake is represented by an interval @xmath0 $ ] and each of the @xmath1 agents has a value function over the cake .",
    "the main aim is to divide the cake fairly .",
    "the framework is general enough to encapsulate the important problem of allocating a heterogeneous divisible good among multiple agents with different preferences .",
    "the cake cutting problem applies to many settings including the division of rent among housemates , disputed land between land - owners , and work among co - workers .",
    "it is especially useful in scheduling the use of a valuable divisible resource such as server time .    within the cake cutting literature ,",
    "the most important criteria of a fair allocation are _ envy - freeness _ and _ proportionality_. in an envy - free allocation , each agent considers his allocation at least as good as any other agent s allocation .",
    "an envy - free allocation is guaranteed to exist  ( see * ? ? ? * ; * ? ? ?",
    ". in a proportional allocation , each agent gets at least @xmath2 of the value he assigns to the cake .",
    "a desirable aspect of envy - freeness is that it implies proportionality .",
    "computation of a fair allocation of cake is one of the fundamental problems in algorithmic economics .",
    "@xcite designed an envy - free cake cutting algorithm for an arbitrary number of players .",
    "although their algorithm is guaranteed to eventually terminate , its running time is unbounded .",
    "moreover , the algorithm can divide the cake into infinitely small segments .",
    "since the result of @xcite , researchers have examined restricted value density functions and proposed envy - free algorithms for them . in order to ascertain the running time of a cake cutting algorithm , it is important to know the computational model and input to the problem . in most of the literature",
    "( see * ? ? ?",
    "* ) , it is assumed that the value an agent ascribes to any segment of the cake can be queried or evaluated via an oracle . while the classical literature uses this query model , computer scientists recently looked at the problem from the point of view of full report , as is common in mechanism design . throughout the paper we focus on _",
    "piecewise constant value density functions _ and _ piecewise uniform value density functions_. piecewise constant value density functions are one of the most fundamental class of value functions .",
    "piecewise uniform valuations are a restricted class of piecewise constant valuations .",
    "@xcite presented a discrete , strategyproof , polynomial - time , envy - free and pareto optimal algorithm for piecewise uniform valuations .",
    "they stated that generalizing their results for piecewise constant valuations is an open problem .",
    "they also presented an envy - free and proportional algorithm that satisfies strategyproofness by resorting to randomization .    in this paper , we consider three of the most enduring goals in mechanism design and fair division : fairness , pareto optimality and strategyproofness .",
    "since many fair division algorithms need to be deployed on a large scale , we will also aim for algorithms that are _ computationally _ efficient .",
    "our main research question in this paper is as follows : _ among the different levels of fairness , pareto optimality , strategyproofness , and efficient computability , what are the maximal set of properties that can be satisfied simultaneously for piecewise constant and piecewise uniform valuations ? _ our main contribution is a detailed study of this question including the formulation of a number of desirable cake cutting algorithms satisfying many of the properties .    in the case where pareto optimality can not be satisfied",
    ", we also consider a weaker notion of efficient called _ non - wastefulness_. non - wastefulness dictates that every portion of the cake that is desired by at least one agent is allocated to some agent who desires it .    for fairness , we not only consider the standard notions envy - freeness and proportionality but we also propose the concept of _ robust fairness _",
    " in particular _ robust envy - freeness _ and",
    "_ robust proportionality_. the main idea of an allocation being robust envy - free is that even if an agent readjusts his value density function , as long as the ordinal information of the function is unchanged , then the allocation remains envy - free .",
    "the main advantages of robust envy - freeness are less information requirements and envy - freeness under uncertainty .    for strategic properties ,",
    "we consider three notions of truthfulness namely strategyproofness , weak group - strategyproofness and group - strategyproofness . in",
    "most of the cake - cutting literature , an algorithm is considered ` strategyproof ' if truth - telling is a maximin strategy  @xcite and it need not be dominant strategy incentive compatible . when we refer to strategyproofness , we will mean the reporting the truthful valuations is a dominant strategy .",
    "this stronger notion of strategyproofness has largely been ignored in cake - cutting barring a few recent exceptions  @xcite .",
    "we present _ ccea ( controlled cake eating algorithm ) _ for piecewise constant valuations and show that it is polynomial - time and robust envy - free and robust proportional .",
    "ccea depends on a reduction to the generalizations  @xcite of the _ ps ( probabilistic serial ) _ algorithm introduced by @xcite in the context of random assignments .",
    "the algorithm relies on solving the parametric network flows  ( see * ? ? ?",
    "we show that the algorithm can handle variable claims and private endowments for piecewise constant valuations and also satisfies group - strategyproofness under piecewise uniform valuations .",
    "if we insist on pareto optimality , then we show that there exists an algorithm which we refer to as the _ mea ( market equilibrium algorithm ) _ that is discrete , polynomial - time pareto optimal , envy - free , and proportional for piecewise constant valuations .",
    "the algorithm relies on the walras equilibrium formulation of @xcite for finding an @xmath3-envy - free for general cake cutting valuations and the result of @xcite that market equilibrium for fischer markets with linear utilities can be computed in polynomial time .",
    "both ccea and mea not only coincide on piecewise uniform valuations but are also group - strategyproof .",
    "although ccea and mea are desirable algorithms , they are not strategyproof for piecewise constant valuations .",
    "we present another algorithm called _ csd ( constrained serial dictatorship ) _ which is strategyproof in expectation , robust proportional , and satisfies unanimity . for the important case of two agents , it is polynomial - time , and robust envy - free . to the best of our knowledge",
    ", it is the first cake cutting algorithm for piecewise constant valuations that satisfies strategyproofness , proportionality , and unanimity at the same time .",
    "csd requires some randomization to achieve strategyproof in expectation .",
    "however , csd is discrete in the sense that it gives the same utility guarantee ( with respect to the reported valuation functions ) over all realizations of the random allocation .",
    "although csd uses some essential ideas of the well - known _ serial dictatorship _",
    "rule for discrete allocation , it is significantly more involved .",
    "our main technical results are as follows .",
    "[ th : maintheorem1 ] for cake cutting with piecewise constant valuations , there exists an algorithm ( ccea ) that is discrete , polynomial - time , robust envy - free , and non - wasteful .",
    "[ th : maintheorem3 ] for cake cutting with with piecewise constant valuations , there exists an algorithm ( mea ) that is discrete , polynomial - time , pareto optimal , and envy - free .",
    "[ th : maintheorem2 ] for cake cutting with piecewise uniform valuations , there exists algorithms ( ccea and mea ) that are discrete , group strategyproof , polynomial - time , robust envy - free and pareto optimal .",
    "[ th : maintheorem1b ] for cake cutting with piecewise constant valuations , there exists a randomized implemention of an algorithm ( csd ) that is ( ex post ) robust proportional , ( ex post ) symmetric , and ( ex post ) unanimous and strategyproof in expectation . for two agents ,",
    "it is polynomial - time , robust proportional and robust envy - free .",
    "our positive results are complemented by the following impossibility results .",
    "these impossibility results suggest the properties satisfied by ccea and mea are maximal subsets of properties that can be satisfied by any algorithm for piecewise constant valuation profiles .",
    "[ pe fair impossibility ] for piecewise constant valuation profiles with at least two agents , there exists no algorithm that is both pareto optimal and robust proportional .",
    "[ pe sp prop impossibility ] for piecewise constant valuation profiles with at least two agents , there exists no algorithm that is strategyproof , pareto optimal , and proportional .",
    "[ sp rob prop non w impossibility ] for piecewise constant valuation profiles with at least two agents , there exists no algorithm that is strategyproof , robust proportional , and non - wasteful .    as a consequence of ccea and mea ,",
    "we generalize the positive results regarding piecewise uniform valuations in @xcite and piecewise constant valuations in @xcite in a number of ways such as handling richer cake cutting settings , handling more general valuations functions , achieving a stronger envy - free concept , or a stronger strategyproofness notion .",
    "moreover , we prove that ccea and mea  two different algorithms  are equivalent in the domain of piecewise constant valuations .",
    "furthermore , we show that both ccea and mea are generalizations of the main mechanism in @xcite .",
    "we also show which combinations of properties are impossible to satisfy simultaneously .",
    "some of our main results are summarized in table  [ table : summary : cake ] .    after presenting our main results",
    ", we enrich the cake cutting domain in two ways .",
    "we allow agents to have initial endowments of the cake .",
    "moreover we consider the more general setting in which agents may have different claims or entitlements to the cake .",
    "we show that many of our results carry over to these more general settings .",
    "we consider a cake which is represented by the interval @xmath0 $ ] .",
    "a _ piece of cake _ is a finite union of disjoint subintervals of @xmath0 $ ] .",
    "the length of an interval @xmath4 $ ] is @xmath5 . as usual ,",
    "the set of agents is @xmath6 .",
    "each agent has a piecewise continuous _ value density function _ @xmath7\\rightarrow [ 0,\\infty]$ ] .",
    "the value of a piece of cake @xmath8 to agent @xmath9 is @xmath10 .",
    "as generally assumed , valuations are non - atomic ( @xmath11)=0 $ ] ) and additive : @xmath12 where @xmath8 and @xmath13 are disjoint .",
    "the basic cake cutting setting can be represented by the set of agents and their valuations functions , which we will denote as _ a profile of valuations_. in this paper we will assume that each agent s valuation function is private information for the agent that is not known to the algorithm designer .",
    "each agent reports his valuation function to the designer and the designer then decides how to make the allocations based on the reported valuations .    later on we will also consider two important extensions of cake cutting : claims and private endowments .",
    "we will assume that agents have the following _ claims _ on the cake respectively : @xmath14 .",
    "in the original cake cutting problem agents have equal claims .",
    "each agent @xmath15 has a _ private endowment _",
    "@xmath16 which is a segment of the cake privately owned by @xmath9 .",
    "the cake is assembled by joining the pieces @xmath17 .",
    "therefore the cake cutting setting in its full generality can be represented as a quadruple @xmath18 .",
    "an allocation is a partitioning of the cake into @xmath1 pieces of cake @xmath19 such that the pieces are disjoint ( aside from the interval boundaries ) and @xmath20 is allocated to agent @xmath15 .",
    "a cake cutting algorithm takes as input @xmath18 and returns an allocation .      in this paper",
    "we will only consider _ piecewise uniform _ and _ piecewise constant _ valuations functions .",
    "a function is _ piecewise uniform _ if the cake can be partitioned into a finite number of intervals such that for some constant @xmath21 , either @xmath22 or @xmath23 over each interval .",
    "a function is _ piecewise constant _ if the cake can be partitioned into a finite number of intervals such that @xmath24 is constant over each interval . in order to report his valuation function to the algorithm designer ,",
    "each agent will specify a set of points @xmath25 that represents the consecutive points of discontinuity of the agent s valuation function as well as the constant value of the valuation function between every pair of consecutive @xmath26 s .    for a function @xmath24",
    ", we will refer by @xmath27\\}$ ] as the set of density functions _ ordinally equivalent _ to @xmath24 .",
    "note that if an algorithm takes as input @xmath24 and returns the same output for any @xmath28 , then it is oblivious to the exact cardinal information of @xmath24 .",
    "an _ allocation _ is a partition of the interval @xmath0 $ ] into a set @xmath29 , where @xmath1 is the number of agents and @xmath20 is a piece of cake that is allocated to agent @xmath9 .",
    "and @xmath30 is the piece of the cake that is not allocated .",
    "all of the fairness and efficiency notations that we will discuss next are with respect to the reported valuation functions . in an _ envy - free allocation _",
    ", we have @xmath31 for each pair of agent @xmath32 , . an allocation is _ individually rational _ if @xmath33 . in a _",
    "proportional _ allocation , each agent gets at least @xmath2 of the value he has for the entire cake .",
    "an allocation satisfies _ symmetry or equal treatment of equals _ if any two agents with identical valuations get same utility .",
    "clearly , envy - free implies proportionality and also symmetry .",
    "an allocation @xmath8 is _ pareto optimal _ if no agent can get a higher value without some other agent getting less value .",
    "formally , @xmath8 is pareto optimal if there does not exists another allocation @xmath13 such that @xmath34 for all @xmath15 and @xmath35 for some @xmath15 . for any @xmath36",
    "$ ] , define @xmath37 .",
    "an allocation @xmath8 is _ non - wasteful _",
    "if for all @xmath36 $ ] , @xmath38 . in other words , an allocation is non - wasteful if every portion of the cake desired by at least one agent is allocated to some agent who desires it .",
    "we now define robust analogues of the fairness concepts defined above .",
    "an allocation satisfies _ robust proportionality _ if for all @xmath32 and for all @xmath28 , @xmath39 .",
    "an allocation satisfies _ robust envy - freeness _ if for all @xmath32 and for all @xmath28 , @xmath40 .",
    "notice that both robust envy - freeness and robust proportionality would require each agents to get a piece of cake of the same length if every agent desires the entire cake .",
    "we give an example of piecewise constant value density function and demonstrate how the standard concept of envy - freeness is not robust under uncertainty .",
    "[ example : piecewise ] consider the cake cutting problem in figure  [ figure : piecewise ] . an allocation in which both agents get regions in which their value density function is the highest is envy - free .",
    "agent 1 gets utility one for his allocation and has the same utility for the allocation of agent 2 .",
    "however if its probability density function is slightly lower in region @xmath41 $ ] , then agent 1 will be envious of agent 2 .",
    "@xmath42                      \\centering                      \\draw[- ] ( 0,-.5 ) -- ( 0,15 ) ;                           \\draw[- ] ( -.5,0 ) -- ( 20,0 ) ;                                                                                                            \\draw[- ] ( 20,15 ) -- ( 20,0 ) ;                                                                                                                                                                \\fill[pattern = vertical lines , ] ( 0,0 ) rectangle ( 2,15 ) ;                                  \\fill[pattern = vertical lines ] ( 10,0 ) rectangle ( 20,5 ) ;                                  \\fill[pattern = horizontal lines ] ( 6,0 ) rectangle ( 20,7.5 ) ;                                        \\draw ( 2,-.6 ) node(c){\\small $ 0.1 $ } ;                                  \\draw ( 6,-.6 ) node(c){\\small $ 0.3 $ } ;                                  \\draw ( 20/2,-.6 ) node(c){\\small $ 0.5 $ } ;                                                                                                                      \\draw ( 20,-.6 ) node(c){\\small$1 $ } ;                        \\draw(-.7,15 ) node(z){\\small $ 10 $ } ;                      \\draw(-.7,7.5 ) node(z){\\small $ 3 $ } ;                      \\draw(-.7,5 ) node(z){\\small $ 2 $ } ;                                \\end{tikzpicture}\\ ] ]    @xmath43                      \\centering                      \\draw[- ] ( 0,-.5 ) -- ( 0,15 ) ;                           \\draw[- ] ( -.5,0 ) -- ( 20,0 ) ;                                                                                                            \\draw[- ] ( 20,15 ) -- ( 20,0 ) ;                                                                                                                                                                \\fill[pattern = vertical lines , ] ( 0,0 ) rectangle ( 2,10 ) ;                                  \\fill[pattern = vertical lines ] ( 10,0 ) rectangle ( 20,5 ) ;                                  \\fill[pattern = horizontal lines ] ( 6,0 ) rectangle ( 20,10 ) ;                                        \\draw ( 2,-.6 ) node(c){\\small $ 0.1 $ } ;                                  \\draw ( 6,-.6 ) node(c){\\small $ 0.3 $ } ;                                  \\draw ( 20/2,-.6 ) node(c){\\small $ 0.5 $ } ;                                                                                                                      \\draw ( 20,-.6 ) node(c){\\small$1 $ } ;                        \\draw(-.7,15 ) node(z){\\small $ 10 $ } ;                      \\draw(-.7,7.5 ) node(z){\\small $ 3 $ } ;                      \\draw(-.7,5 ) node(z){\\small $ 2 $ } ;                                \\end{tikzpicture}\\ ] ]      a _",
    "deterministic cake cutting algorithm _ is a mapping from the set of valuation profiles to the set of allocations .",
    "a _ randomized cake cutting algorithm _ is a mapping from the set of valuation profiles to a space of distributions over the set of allocations .",
    "the output of the algorithm in this case for a specific valuation profile is a random sample of the distributional function over the set of allocation for that profile .",
    "an algorithm ( either deterministic or randomized ) satisfies property @xmath44 if it always returns ( with probability 1 ) an allocation that satisfy property @xmath44 .",
    "a deterministic algorithm is _ strategyproof _ if no agent ever has an incentive to misreport in order to get a better allocation .",
    "the notion of strategyproofness is the one well - established in social choice  ( see * ? ? ? * ) and much stronger than the notion of ` strategyproofness ' used in some of the cake - cutting literature  ( see * ? ? ?",
    "* ) . by strategyproof , we mean truthful as has been used in @xcite .",
    "similarly , a deterministic algorithm is _ group - strategyproof _ if there exists no coalition @xmath45 such that members of @xmath46 can misreport their preferences so that each agent in @xmath46 gets as preferred an allocation and at least one agent gets a strictly better payoff .",
    "a deterministic algorithm is _ weak group - strategyproof _ if there exists no coalition @xmath45 such that members of @xmath46 can misreport their preferences so that each agent in @xmath46 gets a strictly more preferred allocation .",
    "a randomized algorithm is _ strategyproof in expectation _ if the expected utility from the random allocation that every agent receives in expectation under a profile where he reported truthfully is at least as large as the expected that he receives under a profile where he misreports while fixing the other agents reports .",
    "we say that a cake cutting algorithm satisfies _ unanimity _ , if when each agent s most preferred @xmath2 length of the cake is disjoint from another agent , @xmath2 length of the cake , then each agent gets their most preferred piece of cake of length @xmath2 .      in this subsection",
    ", we recap the main properties of cake cutting algorithms :    proportionality ,    robust proportionality ,    envy - freeness ,    robust envy - freeness ,    symmetry ,    non - wastefulness ,    pareto optimality ,    unanimity    strategyproofness ,    weak group strategyproofness ,    group strategyproofness ,    polynomial - time .    for cake cutting ,    envy - freeness and non - wastefulness @xmath47 proportionality ;",
    "robust proportionality @xmath47 proportionality ;    robust envy - freeness @xmath47 envy - freeness ;    robust envy - freeness and non - wastefulness @xmath47 robust proportionality ;    group strategyproofness @xmath47 weak group strategyproofness @xmath47 strategyproofness ;    pareto optimality @xmath47 non - wastefulness ;    pareto optimality @xmath47 unanimity ;    two agents , proportionality @xmath47 envy - freeness ;    two agents , robust proportionality @xmath47 robust envy - freeness .",
    "we may assume without lost of generality that every part of the cake is desired by at least one agent .",
    "if that is not the case , then we can discard the parts that are desired by no one and rescale what is left so that we get a @xmath0 $ ] interval representation of the cake .",
    "notice that this procedure preserves the aforementioned properties of fairness , efficiency and truthfulness .",
    "the free disposal assumption that we are making is necessary to ensure strategyproofness for piecewise uniform valuation functions .",
    "see @xcite for a discussion on the necessity of this assumption .",
    "+ before we present our algorithms , we will first take a detour to the literature on random assignments , as some of the algorithms in the random assignment literature are closely related to our algorithms .",
    "an assignment problem is a triple @xmath48 such that @xmath6 is a set of agents , @xmath49 is a set of houses and @xmath50 is the preference profile in which @xmath51 denotes the preferences of agent @xmath9 over houses @xmath52 .",
    "a _ deterministic assignment _ is a one - to - one mapping from @xmath53 to @xmath52 .",
    "a _ random allocation _ is a probability distribution over @xmath52 .",
    "a random assignment @xmath54 gives a random allocation to each agent .",
    "it can be represented by a bistochastic matrix @xmath54 in which the @xmath9th row is denoted by @xmath55 and all @xmath56 , and @xmath57 , @xmath58 , @xmath59 .",
    "holds when there are the same number of agents as there are objects , which can be assumed without lost of generality by adding dummy agents or objects ] the term @xmath60 denotes the probability with which agent @xmath9 gets house @xmath61 .",
    "an assignment problem has commonalities with cake cutting with piecewise constant valuations .",
    "they also have some fundamental differences .",
    "for example , in cake cutting , the agents do not have continuous constant valuations over pre - determined segments of the cake .",
    "given two random assignments @xmath54 and @xmath62 , @xmath63 i.e. , a player @xmath9 weakly sd prefers @xmath55 to @xmath64 if for all @xmath61 , @xmath65 another way to see the sd relation is as follows .",
    "a player @xmath9 weakly sd prefers allocation @xmath55 to @xmath64 if for all vnm utilities consistent with his ordinal preferences , @xmath9 gets at least as much expected utility under @xmath55 as he does under @xmath64 .",
    "furthermore @xmath66 , i.e. , @xmath54 _ stochastically dominates _",
    "@xmath62 if @xmath63 for all @xmath15 and @xmath67 .",
    "an algorithm satisfies _ sd - efficiency _ if each returned assignment is pareto optimal with respect to the sd - relation  ( see * ? ? ?",
    "an algorithm satisfies _ sd envy - freeness _ if each agent ( weakly ) sd prefers his allocation to that of any other agent .",
    "sd envy - freeness is a very demanding notion of fairness .",
    "the reader may be able to notice that our notion of robust envy - freeness in cake cutting is based on a similar idea as sd envy - freeness .",
    "we will consider random allocations as fractional allocations and random assignments as fractional assignments .",
    "viewing the probability of getting a house simply as getting a fraction of the house is especially useful when some houses are not complete but only partial . in this vein , the definition of sd dominance",
    "should also be considered from the perspective of fractional allocations rather than probability distributions .",
    "the most basic assignment problem concerns @xmath1 agents having strict preferences over @xmath1 objects .",
    "for this basic setting a simple yet ingenious _ ps ( probabilistic serial ) _ algorithm introduced by @xcite and  @xcite which uses the _ simultaneous eating algorithm ( sea)_. each house is considered to have a divisible probability weight of one , and agents simultaneously and with the same eating rate consume the probability weight of their most preferred house until no house is left . the random allocation allocated to an agent by ps",
    "is then given by the amount of each object he has eaten until the algorithm terminates .",
    "the main result of @xcite was that the fractional assignment returned by the ps algorithm is sd envy - free and sd - efficient .",
    "the ps algorithm has been extended in various ways .",
    "the eps ( extended ps algorithm ) of @xcite generalized ps to the case for indifferences using parametric network flows .",
    "eps also generalized the _ egalitarian rule _ of @xcite for dichotomous preferences . @xcite and @xcite extended the work of @xcite to propose ps generalization which also takes care of private endowments where @xmath68 indicates the endowment of agent @xmath9 . for the case of endowments",
    ", @xcite introduced the idea of justified envy - freeness .",
    "an assignment @xmath54 satisfies justified envy - freeness if for all @xmath32 , @xmath69 or @xmath70 the algorithms in @xcite satisfy justified envy - freeness in the presence of private endowments . in our algorithm ccea , we rely on the full power of the controlled - consuming ( cc ) algorithm of @xcite which combines almost all the desirable features of other extensions of ps . in particular , we use the following fact .",
    "_ there exists an extension of the ps algorithm which can simultaneously handle indifferences in preferences , unacceptable objects in preferences , allocation of multiple objects to agents , agent owning fractions of houses , partial houses being available , and still returns an assignments which satisfies sd justified envy - freeness and sd - efficiency .",
    "_ in addition , if there are no private endowments , then the extension can also handle variable eating rates .",
    "the controlled - consuming ( cc ) algorithm of @xcite can handle the case where each agent owns fractions of the complete houses .",
    "we also require that for some houses , only an arbitrary fraction of the house is available to the market .",
    "this can be handled by a modification to cc  ( page 30 , * ? ? ?",
    "finally we require the agents to want to be allocated as many houses as possible .",
    "this does not require any modification to cc .",
    "in the absence of endowments but presence of variable eating rates , cc is equivalent to the eps algorithm that can also cater for variable eating rates  ( section 6.4 , * ? ? ? * ) .",
    "ccea is based on cc ( controlled consuming ) algorithm of @xcite . since the original ps algorithm utilized the simultaneous eating algorithm , hence the name _",
    "controlled cake eating algorithm .",
    "_ ccea first divides the cake up into disjoint intervals each of whose endpoints are consecutive points of discontinuity of the agents valuation functions .",
    "we will refer to these intervals as _ intervals induced by the discontinuity points_. the idea is to form a one - to - one correspondence of the set of cake intervals with a set of houses of an assignment problem .",
    "since intervals may have different lengths , we consider the house corresponding to the interval with the maximum length as a complete house where as intervals corresponding to other houses are partial houses .",
    "the preferences of agents over the houses are naturally induced by the relative height of the piecewise constant function lines in the respective intervals .",
    "if an agent @xmath9 owns a sub - interval @xmath71 , then in the housing setting , @xmath72 is set to @xmath73 and not to one .",
    "the reason is that an agent can only own as much of the house as exists .",
    "the technical heart of the algorithm is in cc ( controlled consuming ) algorithm of @xcite .",
    "we recommend the reader to section 3.2 of @xcite in which an illustrative example on cc is presented . once cc has been used to compute a fractional assignment @xmath54 , it is straightforward to compute a corresponding cake allocation .",
    "if an agent @xmath9 gets a fraction of house @xmath74 , then in the cake allocation agent @xmath9 gets the same fraction of subinterval @xmath71 .",
    "piecewise constant value functions . a robust envy - free allocation .",
    "divide the regions according to agent value functions .",
    "let @xmath75 be the set of subintervals of @xmath0 $ ] formed by consecutive marks .",
    "consider @xmath76 where    * @xmath77 where @xmath78 for all @xmath79 * @xmath80 is defined as follows : @xmath81 if and only if @xmath82 for @xmath83 and @xmath84 ; + @xmath85 is defined in the way that each house in the market is unacceptable to agent @xmath86 .",
    "* @xmath87 for @xmath88 ; + @xmath89 + for all @xmath90 ;    @xmath91 for interval @xmath71 , agent @xmath9 is an allocated subinterval of @xmath71 , denoted by @xmath92 , which is of length @xmath93 .",
    "for example , if @xmath94 $ ] , then one possibility of @xmath95 can be @xmath96 $ ] .",
    "+ @xmath97 for all @xmath15 @xmath98    [ algo : f ]    in example  [ example : transform ] , we show how ccea transforms a cake cutting problem with piecewise constant valuations into a random assignment problem .",
    "[ example : transform ] we examine how ccea runs on the cake cutting problem in figure  [ figure : piecewise ] .",
    "firstly , let @xmath99 be the set of subintervals of @xmath0 $ ] formed by consecutive points of discontinuity are identified : @xmath100 , j_2=[0.1,0.3 ] , j_3=[0.3,0.5]$ ] , and @xmath101 $ ] .",
    "@xmath102 is discarded because it is desired by no agent . in set",
    "@xmath103 , each house @xmath74 corresponds to subinterval @xmath71 .",
    "the preferences of the agents over @xmath52 are inferred from their valuation function height in the subintervals so that @xmath104 and @xmath105 we also set the number of units of each house that is available . since @xmath106 is the biggest interval , we consider @xmath107 as complete house .",
    "so , @xmath108 , @xmath109 , and @xmath110 .",
    "if we run cc over the housing market instance with the specified set of agents , houses , fraction of houses available to the market , and agent preferences , then the assignment returned by cc is as follows : @xmath111 , @xmath112 , @xmath113 , @xmath114 , @xmath115 , and @xmath116 .",
    "the house assignment @xmath54 can be used to divide the subintervals among the agents : @xmath117 , [ 0.7,1]\\}$ ] and @xmath118 , [ 0.5,0.7]\\}$ ] .",
    "ccea satisfies the strong fairness property of robust envy - freeness .",
    "[ prop : ccea is robust envy - free ] for piecewise constant valuations , ccea satisfies robust envy - freeness and non - wastefulness .    let @xmath119 be the number of relevant subintervals in a cake cutting problem with piecewise constant valuations .    [",
    "prop : ccea time ] ccea runs in time @xmath120 , where @xmath1 is the number of agents and @xmath119 is the number of subintervals defined by the union of discontinuity points of the agents valuation functions .",
    "although ccea satisfies the demanding property of robust envy - freeness , it is not immune to manipulation .",
    "we show that ccea is not strategyproof even for two agents . in the next section",
    ", we will present a different algorithm that is both robust envy - free and strategyproof for two agents .",
    "[ prop : ccea is not sp ] for piecewise constant valuations , ccea is not strategyproof even for two agents .",
    "if we restricted the preferences to piecewise uniform with no private endowment or variable claims , then ccea is not only strategyproof but group - strategyproof .",
    "we first show that in this restricted setting , ccea is in fact equivalent to the algorithm of @xcite .",
    "[ prop : equivalence ] for piecewise uniform value functions with no private endowments and variable claims , ccea is equivalent to mechanism 1 of @xcite .",
    "since the set of valuations that can be reported is bigger in cake cutting than in the assignment problem , establishing group strategyproofness does not follow automatically from group - strategyproofness of cc for dichotomous preferences  ( theorem 2 , * ? ? ?",
    "using similar arguments , we give a detailed proof that ccea and hence mechanism 1 of @xcite is group strategyproof for piecewise uniform valuations . in section  [ sec : extensions ] , we extend the result to the case where agents may have variable claims .    [ prop : gsp1 ] for cake cutting with piecewise uniform value functions , ccea is group strategyproof .    for piecewise uniform valuations , ccea is also pareto optimal .",
    "the result follows directly from lemma [ prop : equivalence ] along with the fact that mechanism 1 of @xcite is pareto optimal .",
    "[ prop : pareto optimality ] for cake cutting with piecewise uniform value functions , ccea is pareto optimal .",
    "in the previous section we presented ccea which is not pareto optimal for piecewise constant valuations . it turns out that if we relax the robust notion of fairness to envy - freeness , then we can use fundamental results in general equilibrium theory and recent algorithmic advances  @xcite to formulate a convex program that always returns an envy - free and pareto optimal allocation as its optimal solution . for each valuation profile , let @xmath121 be the intervals whose endpoints are consecutive points in the union of break points of the agents valuation functions . let @xmath122 be the length of any subinterval of @xmath123 that is allocated to agent @xmath124",
    ". then we run a convex program to compute a pareto optimal and envy - free allocation .",
    "we will call the convex program outlined in algorithm  [ algo : market ] as the _ market equilibrium algorithm ( mea)_. mea is based on computing the market equilibrium via a primal - dual algorithm for a convex program that was shown to be polynomial - time solvable by @xcite . notice that if we ignore strategyproofness , or in other words , if we assume that agents report truthfully , then agents are truly indifferent between which subinterval they receive since their valuation function is a constant over any @xmath123 . hence , one we determine the length of @xmath71 to be allocated to an agent , we can allocate any subinterval of that length to the agent .",
    "cake - cutting problem with piecewise constant valuations . a proportional , envy - free , and pareto optimal allocation .",
    "let @xmath121 be the intervals whose endpoints are consecutive points in the union of break points of the agents valuation functions .",
    "let @xmath122 be the length of any subinterval of @xmath123 that is allocated to agent @xmath124 .",
    "@xmath125 solve the following convex program .",
    "@xmath126 let @xmath127 , @xmath128 be an optimal solution to the convex program .",
    "partition every interval @xmath123 into @xmath1 subintervals where the @xmath124-th subinterval @xmath129 has length @xmath128 .",
    "@xmath130 be the allocation of each @xmath131 . @xmath132 .",
    "[ algo : market ]    [ pe , ef , prop ] mea is polynomial - time , pareto efficient and envy free .",
    "we mention here that the connection between a fair and efficient algorithm for cake cutting and computing market equilibria was already pointed by @xcite .",
    "@xcite presented an algorithm to compute an approximately envy - free and pareto optimal allocation for cake cutting with general valuations .",
    "however their algorithm is not polynomial - time even for piecewise constant valuations  @xcite .",
    "mea requires the machinery of convex programming .",
    "it remains open whether mea can be implemented via linear programming .",
    "@xcite presented an algorithm that uses a linear program to compute an optimal envy - free allocation .",
    "the allocation is pareto optimal among all envy - free allocations",
    ". however it need not be pareto optimal in general .",
    "although mea is not robust envy - free like ccea , it is pareto optimal because it maximizes the nash product .",
    "what is interesting is that under uniform valuations , both mea and ccea are equivalent . in the next result",
    "we demonstrate this equivalence  ( proposition  [ ccea equivalence ] ) .",
    "the proof requires a careful comparison of both ccea and mea under uniform valuations .",
    "[ ccea equivalence ] for piecewise uniform valuations , the allocation given by ccea is identical to that given by mea .    for piecewise uniform valuations ,",
    "mea is group - strategyproof .",
    "thus if we want to generalize mechanism 1 of @xcite to piecewise constant valuations and maintain robust envy - freeness then we should opt for ccea . on the other hand ,",
    "if want to still achieve pareto optimality , then mea is the appropriate generalization . in both generalization",
    ", we lose strategyproofness .",
    "thus far , we presented two polynomial time algorithms , each of which satisfies a different set of properties .",
    "ccea is robust envy - free and non - wasteful , whereas mea is pareto optimal and envy - free .",
    "this naturally leads to the following question : does there exist an algorithm satisfies all of the properties that ccea and mea satisfy ?",
    "it turns out that the answer is no , as theorem  [ pe fair impossibility ] shows that there is no algorithm that is both pareto efficient and robust proportional .",
    "similarly , theorem  [ pe sp prop impossibility ] argues that there is no algorithm that satisfies the properties ccea satisfies along with strategyproofness .",
    "lastly , theorem  [ sp rob prop non w impossibility ] argues that there is no algorithm that satisfies the properties ccea satisfies plus strategyproofness .",
    "the impossibility results are summarized in table  [ table : summary : impossible ] .",
    "consequently , we may conclude that the properties satisfied by ccea and mea are respectively maximal subsets of properties that an algorithm can satisfy for piecewise constant valuations .",
    "in the previous sections , we saw that ccea and mea are only strategyproof for piecewise uniform valuations . in light of the impossibility results established in the preivous section , it is reasonable to ask what other property along with strategyproofness can be satisfied by some algorithm .",
    "it follows from ( * ? ? ?",
    "* theorem 3 , ) that the only type of strategyproof and pareto optimal mechanisms are dictatorships .",
    "@xcite raised the question whether there exists a strategyproof and proportional algorithm for piecewise constant valuations .",
    "the algorithm csd answers this question partially .    before diving into the csd algorithm ,",
    "it is worth noting that there is some fundamental difference between random assignment setting and the cake cutting setting . in the random assignment",
    "setting , the objects that we are allocating are well defined and known to the public . on the other hand , in the cake cutting setting , the discontinuity points of each agent s valuation function is private information for the agent .",
    "hence , any algorithm that uses the reported discontinuity points to artificially create the objects runs into the risk of having the objects created by the algorithm be manipulated by the reports of the agents . in order to illustrate this difficulty ,",
    "consider the uniform allocation rule .",
    "the uniform allocation rule ( that assigns @xmath2 of each house )  @xcite is both strategyproof and proportional in the random assignment setting .",
    "however it can not be adapted for cake cutting with piecewise constant valuations since strategyproofness is no longer satisfied if allocating @xmath2 of each interval ( induced by the agent valuations ) is done deterministically .",
    "[ prop : uniform allocation is not sp ] the uniform allocation rule ( done deterministically ) is not strategyproof .",
    "now we are ready to present csd . in order to motivate csd",
    ", we will give a randomized algorithm that is strategyproof and robust proportional in expectation .",
    "the algorithm is a variant of random dictatorship : each agent has uniform probability of being chosen as a dictator .",
    "however , if the whole cake is acceptable to each agent , then each time a dictator is chosen , he will take the whole cake .",
    "this approach is not helpful since we return to square one of having to divide the whole cake .",
    "we add an additional requirement which is helpful .",
    "we require that each time a dictator is chosen , the piece he takes has to be of maximum value @xmath2 length of the total size of the cake",
    ". we will call this algorithm constrained random serial dictatorship ( crsd ) . formally speaking , crsd draws a random permutation of the agents .",
    "the algorithm then makes the allocation to agents in the order that the lottery is drawn .",
    "everytime when it is agent @xmath9 s turn to receive his allocation , crsd looks at the remaining portion of the cake and allocates a maximum value @xmath2 length piece of the cake to agent @xmath9 ( break ties arbitrarily ) .",
    "notice that crsd is strategyproof , as in every draw of lottery , it is in the best interest of the agents to report their valuation function truthfully in order to obtain a piece that maximizes his valuation function out of the remaining pieces of cake .",
    "later on we will see , through the proof of proposition  [ prop : csd is robust prop ] , that crsd is robust proportional in expectation .",
    "+ csd is an algorithm that derandomizes crsd by looking at its allocation for all @xmath133 different permutations and aggregate them in a suitable manner . the algorithm is formally presented as algorithm  [ csd - algo ] .",
    "+    cake - cutting problem with piecewise constant valuations . a robust proportional allocation .",
    "@xmath134 $ ] ( intervals left ) @xmath135 maximum preference cake piece of size @xmath2 from @xmath136 @xmath137 .",
    "@xmath138 .",
    "construct a disjoint and exhaustive interval set @xmath139 induced by the discontinuities in agent valuations and the cake cuts in the @xmath133 cake allocations .",
    "@xmath140 empty allocation for each @xmath15 .",
    "let @xmath141 where @xmath142 is the number of permutations in which @xmath9 gets @xmath71 .",
    "generate @xmath143 , which is of length @xmath144 according to some subroutine .",
    "@xmath145    @xmath132    [ algo : csd ]    although csd does not necessarily require @xmath133 cuts of the cake , it may take exponential time if the number of agents is not a constant .",
    "in example  [ example : csd ] , we illustrate how csd works .",
    "[ example : csd ] we implement csd on the cake cutting problem in figure  [ figure : piecewise ] . for permutation",
    "@xmath146 , agent @xmath147 first chooses the cake piece @xmath148,[0.6,1]\\}$ ] and agent @xmath149 then takes the remaining piece @xmath150\\}$ ] . for permutation @xmath151 ,",
    "agent @xmath149 first chooses the cake piece @xmath152\\}$ ] and agent @xmath147 then takes the remaining piece @xmath153,[0.8,1]\\}$ ] .",
    "the set of all relevant subintervals induced by the two permutations are @xmath148 , [ 0.1,0.3],[0.3,0.6],[0.6,0.8],[0.8,1]\\}$ ] .",
    "when we we additionally consider the discontinuities in the players valuations , the set of relevant subintervals is @xmath154 , [ 0.1,0.3],[0.3,0.5],[0.5,0.6 ] , [ 0.6,0.8],[0.8,1].$ ]    then @xmath155,\\frac{1}{2}[0.1,0.3],\\frac{1}{2}[0.6,0.8 ] , [ 0.8,1]\\}\\ ] ] and @xmath156,[0.3,0.5],[0.5,0.6 ] , \\frac{1}{2}[0.6,0.8]\\}.\\ ] ]    [ prop : csd - well - defined ] for piecewise constant valuations , csd is well - defined and returns a feasible cake allocation in which each agents gets a piece of size @xmath2 .    [ prop : csd is robust prop ] for piecewise constant valuations , csd satisfies robust proportionality and symmetry .    notice that unlike crsd , csd interprets the probability of allocating each interval to an agent as allocation a fractional portion of the interval to that agent . unless the actual way of allocating the fractions is specified , one can not discuss the notion of strategyproofness for csd because a deviating agent is unable to properly evaluate his allocation against his true valuation function in the reported profile .",
    "contrary to intuition , csd may or may not be strategproof depending on how the fractional parts of each interval are allocated .",
    "in fact , the following remark illustrates this issue .",
    "[ remark : csd - not - sp ] csd is not strategyproof if the fraction of each interval of @xmath139 is allocated deterministically ( please see the appendix for the proof ) .    in light of difficulty",
    ", we will implement a method ( see algorithm  [ csd : subroutine ] ) that randomly allocating the fractions of intervals to agents . with this implementation , csd is strategyproof in expectation .",
    "generate @xmath157 $ ] . for @xmath158 ,",
    "let @xmath159 if @xmath160 and @xmath161 if @xmath162 .",
    "let @xmath163\\ ] ] if @xmath164 and @xmath165 \\cup [ \\mod(u_j + \\sum_{k = 1}^{i-1}p_{nj}(b_j - a_j ) ) , b_j]\\ ] ] otherwise .",
    "[ csd : subroutine ]    we will refer this randomized implemention of csd as _ constrained mixed serial dictatorship _ , or _",
    "cmsd _ for short .",
    "[ csd : sp ] csd implemented with the aforementioned random allocation rule is strategyproof in expectation .",
    "although csd is strategyproof in expectation , it fails to satisfy truthfulness based on group - based deviations no matter how the fractional parts of each interval are allocated .",
    "[ csd : not gsp for pwc ] for cake cutting with piecewise constant valuations , csd is not weakly group - strategyproof even for two agents .",
    "moreover , for cake cutting with piecewise uniform valuations , csd is not weakly group - strategyproof for at least seven agents .",
    "the statement above follows from the fact that rsd is not weakly group - strategyproof for dichotomous preferences when there are at least seven agents  @xcite .",
    "even though csd satisfies both proportionality and symmetry , it does not satisfy the stronger notion of envy - freeness .",
    "[ prop : csd is not envy - free ] csd is not necessarily envy - free for three agents even for piecewise uniform valuations .",
    "another drawback of csd is that it is not pareto optimal for piecewise constant valuations .",
    "the statement follows from the fact that rsd is not sd - efficient  @xcite .",
    "however for the case of two agents , it is robust envy - free and polynomial - time .    for two agents and piecewise constant valuations ,",
    "csd is robust envy - free , and polynomial - time but not pareto optimal .    for piecewise uniform valuations",
    ", csd can be modified to be made pareto optimal .",
    "the main change is that for each permutation csd , the resultant outcome needs to be made pareto optimal .",
    "this can be done by using the idea in @xcite .",
    "in this section , we show how some of our positive results concerning ccea extend to more general settings where agents may have variable claims or they may have initial endowments ( please see algorithm  [ algo : ccea - extensions ] ) .    piecewise constant value functions with priority claims @xmath166 or private endowments @xmath167 a robust envy - free and individually rational allocation .",
    "let @xmath168 where @xmath86 is the agent owning all public cake but with no interest in any of the cake .",
    "join the segments @xmath169 to assemble a cake .",
    "divide the regions according to agent value functions .",
    "let @xmath75 be the set of subintervals of @xmath0 $ ] formed by consecutive marks .",
    "consider @xmath170 where    * @xmath77 where @xmath78 for all @xmath79 * @xmath80 is defined as follows : @xmath81 if and only if @xmath82 for @xmath83 and @xmath84 ; + @xmath85 is defined in the way that each house in the market is unacceptable to agent @xmath86 .",
    "* @xmath87 for @xmath88 ; + @xmath89 + for all @xmath90 ; * @xmath171 ; * @xmath172 if @xmath173 and zero otherwise .    @xmath174 for interval @xmath71 , agent @xmath9 is allocated a subinterval of @xmath71 , denoted by @xmath92 , which is of length @xmath93 .",
    "+ @xmath175 for all @xmath15 + @xmath98    [ algo : ccea - extensions ]      we consider the concept of _ variable claims _ in cake cutting .",
    "it is generally assumed in the literature that each agent has equal claim to the cake . in this case",
    "we modify the definition of proportionality and envy - freeness accordingly .",
    "reasoning about claims has a long tradition in the fair division literature .",
    "however this strand of research assumes that agents have uniform and identical preferences over the whole of the divisible object and their only concern is the proportion of the object they get  ( see * ? ? ?",
    "* ; * ? ? ?",
    "@xcite refer to variable claims as entitlements and touch upon entitlements in cake cutting at a few places in their book .",
    "they present a general idea of handling entitlements by cloning agents  ( page 152 , * ? ? ?",
    "* ) but doing so can lead to an exponential blowup of time and space . @xcite",
    "also considered entitlements in pie - cutting but presented an impossibility result and also a positive result for two agents . on the other hand ,",
    "one of our algorithms handles variable claims for arbitrary number of agents and does not require cloning .    an allocation satisfies _",
    "proportionality for variable claims _ if @xmath176)$ ] for all @xmath177 .",
    "an allocation satisfies _ robust proportionality for variable claims _ if for all @xmath177 and for all @xmath28 , @xmath178}v_i'(x)dx$ ] .",
    "an allocation satisfies _ envy - freeness for variable claims _ , if @xmath179 for all @xmath32 .",
    "an allocation satisfies _ robust envy - freeness for variable claims _ if for all @xmath180 and for all @xmath28 , @xmath181 .",
    "[ prop : ccea envy for claims ] for cake cutting with variable claims and piecewise constant valuations , ccea satisfies robust envy - freeness for variable claims .    for uniform valuations , group - strategyproofness of ccea even holds when agents have variable claims .",
    "[ prop : sp - with - speed ] for cake cutting with piecewise uniform value functions and variable claims , ccea is group - strategyproof .    on the other hand , it can be shown that the following natural modification of csd does not satisfy proportionality in the presence of variable claims : each agent @xmath9 gets @xmath182 length of the most preferred interval for each permutation .",
    "we note that mea can be easily adapted to cater for variable claims .",
    "each agent s budget is proportional to his claim .",
    "[ th : maintheorem3b ] for cake cutting with with piecewise constant valuations and variable claims , there exists an algorithm ( mea ) that is polynomial - time , pareto optimal , envy - free , and proportional .      in the cake cutting literature , the cake is generally considered to be a public good which is divided among the agents .",
    "it could also be that each agent brings part of the cake and then the assembled cake needs to be reassigned among the agents fairly .",
    "we call the setting cake cutting with _ private endowments_. in this context , individual rationality is a minimal requirement and envy - freeness need to be redefined",
    ". classic cake cutting can be modelled by cake cutting with private endowments in the following manner : none of the agents have any endowments and one additional agents owns the whole cake but has no interest in the cake .",
    "an allocation is _ individually rational _",
    "if @xmath33 . an allocation satisfies _ justified envy - freeness for private endowments _ if @xmath183 or @xmath184 for each pair of agent @xmath32 .",
    "either @xmath9 should not be envious of @xmath124 or if he is envious , then giving @xmath9 s allocation to @xmath124 violates individual rationality .",
    "it is not entirely clear how to obtain the canonical concept of justified envy - freeness which takes into account both private endowments and variable claims .",
    "an allocation satisfies _",
    "robust justified envy - freeness for private endowments _ if for all @xmath32 either @xmath185 or @xmath186 .",
    "if @xmath9 does not get an unambiguously as preferred a piece as @xmath124 s , @xmath124 has a counter claim that @xmath124 s endowment is better than @xmath9 s piece for some ordinally equivalent valuation function of @xmath124 .",
    "[ prop : ccea endowments ] for cake cutting with private endowments and piecewise constant valuations , ccea satisfies robust justified envy - freeness for private endowments .",
    "generalizing csd to handle endowments without losing its properties seems to be a challenging task .",
    "we have not addressed it in this paper .",
    "a mathematical analysis of cake cutting started with the work of polish mathematicians steinhaus , knaster , and banach  @xcite .",
    "as applications of fair division have been identified in various multiagent settings , a topic which was once considered a mathematical curiosity has developed into a full - fledged sub - field of mathematical social sciences  ( see * ? ? ?",
    "* ) . in particular , in the last few decades",
    ", the literature of cake cutting has grown considerably  ( see * ? ? ?",
    "* ; * ? ? ?",
    "* ; * ? ? ?",
    "* ; * ? ? ?",
    "the relation between the random assignment problem and cake cutting has been noticed before  @xcite .",
    "however , in their discussion of related work , @xcite argue that techniques from the random assignment literature can not be directly applied even to piecewise uniform functions  a subclasses of piecewise constant functions .",
    "stumbling blocks identified include the fact that in the random assignment problem , each agents gets one object .",
    "we observed that ps satisfies envy - freeness even when agents get multiple objects .",
    "another issue raised is that ` if two agents desire two subintervals , both agents would value the longer subinterval more than the shorter . '",
    "this problem can be circumvented by using the algorithm to compute the greatest common denominator of the lengths of the intervals and then dividing the intervals in equally sizes subintervals .",
    "however the number of subintervals can be exponential in the input size .",
    "we use the idea of @xcite that some houses may only be partially available .",
    "@xcite stated that generalizing their strategyproof algorithm for piecewise uniform valuations to the case for piecewise constant valuations as an open problem .",
    "we presented two algorithms  ccea and mea  that generalize mechanism 1 of @xcite .",
    "although they both satisfy certain desirable properties , both natural generalizations are not strategyproof .    a number of works in the cake - cutting literature reason about strategyproofness .",
    "however they refer to a very weak notion of strategyproofness which is equivalent to a maximin strategy . apart from the papers of @xcite , we are aware of no positive results regarding discrete , strategyproof , and fair algorithms even for the restricted domain of piecewise constant valuations . in this paper",
    "we present a proportional algorithm ( csd ) for piecewise constant valuations that although not formally strategyproof seems less like likely to manipulate in comparison to ccea .",
    "if we are allowed to use randomization , then we show that csd can be adapted to be strategyproof in expectation .",
    "notice that if we instead require our algorithm to be strategyproof always , and proportional in expectation , then crsd would satify these properties .",
    "moreover , we note that @xcite also presented an algorithm that is randomized , envy - free and proportional , and strategyproof in expectation",
    ". however , it does not satisfy unanimity and requires much more randomization in contrast to csd .",
    "it remains an open question whether there exists an algorithm that always returns a proportional allocation and is always immune to agent manipulation .",
    "a difficulty that arises in coming up with strategyproof and proportional algorithm lies in that there is no restriction on the distribution of the discontinuity points of the agents valuation functions . to illustrate this point ,",
    "suppose the algorithm designer knows that the discontinuity points of the agents valuation functions come from a set @xmath187 , where @xmath188 .",
    "consequently , a mechanism that partitions @xmath0 $ ] into intervals of the form @xmath189 $ ] and allocates @xmath2 of each interval to each agent would be proportional , envy - free and strategyproof .",
    "even if the designer does not know such a @xmath46 , but instead we require the minimum distance between any two consecutive discontinuity points of the agent s valuation function to be at least some @xmath190 , then there exists a strategyproof and @xmath191-proportional algorithm for this setting .    as for private endowments",
    ", we are only aware of @xcite where private endowment are considered in pie - cutting . however , in comparison to our positive results concerning envy - freeness , @xcite presents a negative result concerning the core .",
    "in this paper , we made a number of conceptual and technical contributions .",
    "it will be interesting to consider new results with respect to robust versions of fairness , endowments , and variable claims .",
    "cake cutting is an exciting sub - field of microeconomics with numerous applications to computer science . in order for theory to be more relevant to practice ,",
    "we envision exciting work in much richer models of cake cutting .",
    "the authors acknowledge the helpful comments of jay sethuraman and simina brnzei .",
    "this material is based upon work supported by the australian government s department of broadband , communications and the digital economy , the australian research council , the asian office of aerospace research and development through grant aoard-12405 .",
    "37 [ 1]#1 [ 1]`#1 ` urlstyle [ 1]doi : # 1    s.  athanassoglou and j.  sethuraman . house allocation with fractional endowments . _ international journal of game theory _ , 400 ( 3):0 481513 , 2011 .",
    "h.  aziz , f.  brandt , and p.  harrenstein .",
    "pareto optimality in coalition formation . in g.",
    "persiano , editor , _ proceedings of the 4th international symposium on algorithmic game theory ( sagt ) _ , lecture notes in computer science ( lncs ) , pages 93104 .",
    "springer - verlag , 2011 .",
    "a.  bogomolnaia and h.  moulin . a new solution to the random assignment problem .",
    "_ journal of economic theory _ , 1000 ( 2):0 295328 , 2001 .    a.  bogomolnaia and h.  moulin .",
    "random matching and assignment under dichotomous preferences .",
    "econ / papers/2001papers/03moulin.pdf , 2001 .",
    "a.  bogomolnaia and h.  moulin .",
    "random matching under dichotomous preferences .",
    "_ econometrica _ , 720 ( 1):0 257279 , 2004 .",
    "s.  j. brams . _",
    "mathematics and democracy : designing better voting and fair - division procedures_. princeton university press , 2008 .    s.  j. brams and a.  d. taylor .",
    "an envy - free cake division protocol . _ the american mathematical monthly _ , 1020 ( 1):0 918 , 1995 .",
    "s.  j. brams and a.  d. taylor .",
    "_ fair division : from cake - cutting to dispute resolution_. cambridge university press , 1996 .",
    "s.  j. brams , m.  a. jones , and c.  klamler",
    ". proportional pie - cutting . _",
    "international journal of game theory _",
    ", 36:0 353367 , 2008 .    c.  chambers .",
    "consistency in the probabilistic assignment model .",
    "_ journal of mathematical economics _ , 40:0 953962 , 2004 .",
    "y.  chen , j.  k. lai , d.  c. parkes , and a.  d. procaccia .",
    "truth , justice , and cake cutting . in",
    "_ _ proc .  of 24th aaai conference _ _ , pages 756761 , 2010 .",
    "y.  chen , j.  k. lai , d.  c. parkes , and a.  d. procaccia .",
    "truth , justice , and cake cutting .",
    "_ games and economic behavior _ , 770 ( 1):0 284297 , 2013 .",
    "y.  j. cohler , j.  k. lai , d.  c. parkes , and a.  d. procaccia . optimal envy - free cake cutting . in _ proceedings of the 25th aaai conference on artificial intelligence ( aaai ) _",
    ", pages 626631 , 2011 .",
    "h.  crs and h.  moulin . scheduling with opting out : improving upon random priority .",
    "_ operations research _ , 490 ( 4):0 565577 , 2001 .",
    "n.  devanur , c.  h. papadimitriou , a.  saberi , and v.  vazirani .",
    "market equilibrium via a primal  dual algorithm for a convex program .",
    "_ journal of the acm _",
    ", 550 ( 5 ) , 2008 .",
    "g.  gallo , m.  grigoriadis , and r.  tarjan . a fast parametric maximum flow algorithm and applications , .",
    "_ siam journal on computing _ , 18:0 3055 , 1989 .",
    "a.  gibbard .",
    "manipulation of voting schemes .",
    "_ econometrica _ , 41:0 587602 , 1973 .",
    "katta and j.  sethuraman .",
    "a solution to the random assignment problem on the full preference domain .",
    "_ journal of economic theory _ , 1310 ( 1):0 231250 , 2006 .",
    "f.  kojima .",
    "random assignment of multiple indivisible objects .",
    "_ mathematical social sciences _ , 570 ( 1):0 134142 , 2009 .    a.  maya and n.  nisan .",
    "incentive compatible two player cake cutting . in",
    "_ proceedings of the 8th international workshop on internet and network economics ( wine ) _ , pages 170183 , 2012 .",
    "e.  mossel and o.  tamuz .",
    "truthful fair division . in s.",
    "kontogiannis , e.  koutsoupias , and p.  spirakis , editors , _ proceedings of the 3rd international symposium on algorithmic game theory ( sagt ) _ , volume 6386 of _ lecture notes in computer science ( lncs ) _ , pages 288199 .",
    "springer - verlag , 2010 .",
    "h.  moulin .",
    "_ fair division and collective welfare_. the mit press , 2003 .",
    "a.  d. procaccia .",
    "cake cutting : not just child s play .",
    "_ communications of the acm _ , 560 ( 7):0 7887 , 2013 .",
    "j.  h. reijnierse and j.  a.  m. potters . on finding an envy - free pareto - optimal division .",
    "_ mathematical programming _ ,",
    "83:0 291311 , 1998 .",
    "j.  m. robertson and w.  a. webb .",
    "_ cake cutting algorithms : be fair if you can_. a. k. peters , 1998 .",
    "j.  schummer .",
    "strategy - proofness versus efficiency on restricted domains of exchange economies .",
    "_ social choice and welfare _ , 14:0 4756 , 1997 .",
    "h.  steinhaus .",
    "the problem of fair division .",
    "_ econometrica _ , 16:0 101104 , 1948 .",
    "w.  stromquist . how to cut a cake fairly .",
    "_ american mathematical monthly _ , 870 ( 8):0 640644 , 1980 .",
    "f.  e. su .",
    "rental harmony : sperner s lemma in fair division .",
    "_ american mathematical monthly _ , 10:0 930942 . , 1999",
    "w.  thomson .",
    "axiomatic and game - theoretic analysis of bankruptcy and taxation problems : a survey . _ mathematical social sciences _ , 45:0 249297 , 2003 .",
    "w.  thomson .",
    "children crying at birthday parties .",
    "_ economic theory _ , 31:0 501521 , 2007 .",
    "v.  v. vazirani .",
    "combinatorial algorithms for market equilibria . in n.",
    "nisan , t.  roughgarden ,  .",
    "tardos , and v.  vazirani , editors , _ algorithmic game theory _ , chapter  10 , pages 103134 .",
    "cambridge university press , 2007 .",
    "d.  weller .",
    "fair division of a measurable space . _ journal of mathematical economics _ , 140 ( 1):0 517 , 1985 .",
    "o.  yilmaz .",
    "random assignment under weak preferences . _ games and economic behavior _ , 660 ( 1):0 546558 , 2009 .",
    "h.  p. young .",
    "_ equity : in theory and practice_. princeton university press , 1994 .",
    "l.  zhou . on a conjecture by gale about one - sided matching problems . _ journal of economic theory _ , 520 ( 1):0 123135 , 1990 .",
    "r.  zivan , m.  dudk , s.  okamoto , and k.  sycara . reducing untruthful manipulation in envy - free pareto optimal resource allocation . in _",
    "ieee / wic / acm international conference on web intelligence and intelligent agent technology _ , pages 391398 , 2010 .",
    "consider the following two - agent profile .",
    "agent 1 : @xmath192 , \\",
    "v_1(x ) = v^{1}_b \\ \\text{for } \\ x \\in ( 0.5,1].\\ ] ]    agent 2 : @xmath193 , \\",
    "v_2(x ) = v^{2}_b \\ \\text{for } \\ x \\in ( 0.5,1].\\ ] ]    choose @xmath194 in such a way that @xmath195 and @xmath196 and @xmath197 . by either robust envy - freeness or robust proportionality , the mechanism must make the following allocation @xmath198 where @xmath199 . on the other hand , in order for the mechanism to be pareto efficient , @xmath198 must be an element of @xmath200 hence , we have reached an impossibility .",
    "for cake cutting with piecewise constant valuations and @xmath201 , it follows from ( * ? ? ? * theorem 3 , ) that the only type of strategyproof and pareto optimal mechanisms are dictatorships .",
    "consequently , there exists no strategyproof and pareto optimal mechanism that is also proportional or symmetric .",
    "the following example shows that there exists no cake - cutting algorithm that is strategyproof , robust proportional , and non - wasteful . + profile 1 :    @xmath202 , \\",
    "v_1(x ) = b \\ \\text{if } \\ x \\in [ 0.5,1]\\ ] ] @xmath203 , \\",
    "v_2(x ) = b \\ \\text{if } \\ x \\in [ 0.5,1]\\ ] ]    for some @xmath204 . +",
    "since the algorithm is robust proportional , it must be the case that each agent receive @xmath205 of @xmath206 $ ] and @xmath205 of @xmath207 $ ] .",
    "this is because the fractional parts of @xmath206 $ ] and @xmath208 $ ] that each agent receives must stochastically dominate the uniform allocation , otherwise the allocation would not satisfy proportionality for some valuation function in the ordinal equivalence class .    without lost of generality ( up to reordering and regrouping of the cake )",
    ", we may assume that agent @xmath147 receives @xmath209 \\cup [ 0.5 , 0.75]$ ] and agent @xmath149 receives @xmath210 \\cup [ 0.75 , 1]$ ] .",
    "+ now consider profile 2 :    @xmath211 , \\",
    "v_1(x ) = b \\ \\text{if } \\ x \\in [ 0.5,0.75 ] , \\",
    "v_1(x ) = 0   \\ \\text{otherwise}\\ ] ] @xmath212 , \\",
    "v_2(x ) = b \\ \\text{if } \\ x \\in [ 0.5,1]\\ ] ]    by sp , agent @xmath147 must again receive @xmath209 \\cup [ 0.5 , 0.75]$ ] and agent 2 receives @xmath210 \\cup [ 0.75 , 1]$ ] . if agent @xmath147 receives anything less in profile @xmath149 , then he would deviate from profile @xmath149 to profile @xmath147 .",
    "if agent @xmath147 receives anything more in profile @xmath149 , then he would deviate from profile @xmath147 to profile @xmath149 .",
    "+ now consider profile 3 :    @xmath213 , v_1(x ) = b \\",
    "\\text{if } \\ x \\in [ 0.5,0.75 ] , \\",
    "v_1(x ) = 0   \\",
    "\\text{otherwise}\\ ] ] @xmath214 , v_2(x ) = a \\ \\text{if } \\ x \\in [ 0.25,0.5 ] , v_2 ( x ) = b \\",
    "\\text{if } \\ x \\in [ 0.5,1]\\ ] ]    by robust proportionality , both agent @xmath147 and @xmath149 must receive @xmath205 of @xmath215 $ ] . by non - wastefulness ,",
    "agent @xmath149 must receive @xmath210 $ ] and @xmath216 $ ] since agent @xmath147 has a utility of @xmath217 on these intervals .",
    "hence , agent @xmath149 in profile 2 would misreport so that he receives the allocation in profile @xmath218 .",
    "first of all , ccea is non - wasteful because an agent is never allowed to eat a piece of the cake that he has no desire for . on the other hand ,",
    "the algorithm terminates only when every portion of the cake that is desired by at least one agent is completely consumed by some agent who desires it .",
    "next , we show that the algorithm is robust envy - free . consider a fractional assignment @xmath54 returned by the cc algorithm . without private endowments",
    "cc is equivalent to the eps algorithm of @xcite .",
    "assignment @xmath54 satisfies justified envy - freeness in presence of variable eating rates : @xmath219 for all utilities @xmath220 consistent with preferences of @xmath9 over the houses .",
    "the intuition is that at any point during the running of cc , an agent @xmath9 will be ` eating ' his most favoured object(s ) at the same rate as any other agent @xmath124 even if @xmath124 is also the eating the same object(s ) .",
    "hence , for all @xmath28 , it is the case that for @xmath221 , @xmath40 . +",
    "for a cake cutting instance @xmath222 , @xmath223 is the input size where @xmath1 is the number of agents and @xmath119 is the number of relevant subintervals . once the lengths of the subintervals in @xmath224 are computed , the size of each house can be computed in linear time .",
    "the number of houses in ccea is @xmath119 .",
    "we now analyse the running time of cc on @xmath1 agents and @xmath119 houses  ( section 3.5 , * ? ? ?",
    "* ) . in the cc algorithm ,",
    "the flow network consists of @xmath225 vertices and @xmath226 arcs where @xmath227 and @xmath228 .",
    "the number of parametric flow problems needed to be solved is @xmath229 .",
    "a parametric flow network problem can be solved in time @xmath230 due to @xcite .",
    "hence , the running time of ccea is @xmath231 .",
    "ccea is not strategyproof even if all the piecewise intervals are of equal length , and there are no private endowments or variable claims , and agents have strict preferences over the intervals . in this case",
    "ccea is equivalent to the classic ps algorithm .",
    "it is known that ps is not strategyproof even for strict preferences when there are more objects than agents  @xcite .",
    "in the absence of private endowments and variable claims , ccea can be solved by invoking eps instead of cc but with the slight modification that in the corresponding flow network of eps , the capacity of each arc @xmath232 is set to @xmath233 in step 2 of eps ( algorithm 1 , * ? ? ?",
    "let us refer to this simplified ccea as simpleccea .",
    "when simpleccea is run , it invokes eps and solves repeated parametric network flow problems ( step 3 , algorithm 1 , * ? ? ?",
    "* ) . in the step , eps computes a bottleneck set of agents and houses at each break - point .",
    "simpleccea computes bottleneck sets in the same way as mechanism 1 of @xcite and then allocates the resources in the bottleneck sets to the agents in the bottleneck set .",
    "the flow networks of the slightly modified eps ( figure  2 , * ? ? ?",
    "* ) and that of mechanism 1  ( figure  2 , * ? ? ?",
    "* ) are identical with only two insignificant differences namely that in the flow network of mechanism 1 of @xcite i ) the source and target are swapped and all the arcs are inverted and ii ) the size of the houses / intervals is not normalized",
    ". however , the eventual allocations are same .",
    "in light of lemma [ prop : equivalence ] , it suffices to show that simpleccea is gsp .",
    "we begin with some notations .",
    "+ let @xmath234 denote the length of @xmath235 $ ]",
    ". since the utility function is piecewise uniform , it suffices to consider the length of pieces of the cake that are desired by each agent .",
    "+ let @xmath236 be a coalition of agents who misreport their true preference .",
    "+ let @xmath222 denote the instance where every agent reports truthfully and @xmath237 denote the instance where agents in @xmath46 misreport .",
    "+ let @xmath238 $ ] denote the pieces of cake that are truly desired by each agent .",
    "+ let @xmath239 $ ] denote the desired pieces of cake that are reported by each agent . + let @xmath240 $ ] denote the allocation received by each agent under truthful reports .",
    "+ let @xmath241 $ ] denote the allocation received by each agent when the agents in @xmath46 misreport .",
    "+ let @xmath242 be the bottleneck sets of agents with respect to the true preferences of agents arranged in the order that they are being allocated by the algorithm in instance @xmath222 .",
    "+ let @xmath243 be the bottleneck sets of agents with respect to the true preferences of agents arranged in the order that they are being allocated by the algorithm in instance @xmath237 .",
    "+ let @xmath244 denote the length of the allocation each agent receives in the bottleneck set @xmath20 .",
    "let @xmath245 @xmath246 in other words @xmath247 is the subset of agents of @xmath248 who weakly gain in utility when the agents in @xmath46 misreport , and @xmath249 is the subset of agents of @xmath248 who weakly lose in utility when the agents in @xmath46 misreport .",
    "we will show that for all @xmath250 , @xmath251 . this would then directly imply that @xmath46 must be empty since no coalition @xmath46 can exist such that by misreporting , everyone in the coalition is weakly better off and at least one agent in the coalition is strictly better off",
    ".    we will prove this result via induction on @xmath252 . in order to carry on with the induction",
    ", we will show that no agent in @xmath253 appears in the coalition @xmath46 .",
    "we begin with a lemma .",
    "it is the case that @xmath254 . in other words ,",
    "no agent in @xmath253 is strictly worse off when some subset of agents misreport their preference .",
    "it is clear that @xmath255 .",
    "suppose the claim does not hold , then there exists some agent @xmath256 .",
    "in other words , agent @xmath9 is strictly worse off due to the misreports .",
    "since an agent would only misreport his preference if misreporting weakly improves his utility , we deduce that @xmath257 , which implies that @xmath258 .",
    "consequently , the following set of inequalities hold for agent @xmath9 : @xmath259 where the first equality follows from the fact that @xmath260 by the way the algorithm allocates the pieces of cake to agents .",
    "the second equality follows from @xmath261 .",
    "and the last inequality follows from @xmath256 .",
    "+ we claim that since @xmath253 is the first bottleneck set with respect to the true preference , it can not be the case that @xmath262 , where @xmath263 is the bottleneck set that @xmath9 belongs to in the instance @xmath237 .",
    "suppose this is the case , then we have that @xmath264 .",
    "it is clear that @xmath265 can not contain an agent who misreports in @xmath237 , since a misreporting agent in @xmath265 only receives a piece of cake with length @xmath266 , which is strictly less than what he wouldve gotten had he reported truthfully .",
    "hence , every agent in @xmath265 must report his true preference in @xmath237 .",
    "since @xmath265 is the first bottleneck set in @xmath237 , we have that @xmath267)}{|x'_1| } & =   \\frac{len((\\cup_{j \\in x'_1 } d_j)\\cap [ 0,1])}{|x'_1| } \\\\   \\geq \\frac{len((\\cup_{j \\in x_1 } d_j)\\cap [ 0,1])}{|x_1| } & = len(x_1 ) , \\end{split}\\ ] ]    where the first and third equalities follows from the way the algorithm makes an allocation , the second equality follows from the fact that the agents in @xmath265 have the same reports in @xmath237 as in @xmath222 , and the inequality follows from the fact that @xmath268))}{|s|}$ ] .",
    "this contradicts the fact that @xmath266 .",
    "it is the case that @xmath269 . in other words ,",
    "no agent in @xmath253 is strictly better off when some subset of agents misreport their preference .    since we have established that @xmath254 , and @xmath270 , it suffices to show that @xmath271 .",
    "suppose not , then for all @xmath272 , we have that @xmath273 and there exists some @xmath274 such that @xmath275 .",
    "summing over @xmath272 , we get that @xmath276 where the first two equalities follow from the fact that the @xmath277 s and @xmath278 s are disjoint subsets and the third equality follows from the way the algorithm allocates to the agents in the smallest bottleneck set . but",
    "this set of inequalities contradict the fact that @xmath279 , which implies that @xmath280 .",
    "hence , it must be the case that for every @xmath272 , we have that @xmath281 , which implies that @xmath282 .",
    "no agent in @xmath253 appears in the coalition @xmath46 and @xmath253 is also the first bottleneck set for @xmath237 .    by the previous lemma ,",
    "no agent in @xmath283 is strictly better off by misreporting his preference .",
    "thus , any agent in @xmath253 would potentially be in @xmath46 if by misreporting , he makes himself no worse off and simultaneously make some other agent in @xmath46 strictly better off .",
    "the only way that this can happen is by misreporting , the agents in @xmath253 make their collective claim over their desired pieces smaller , so that agents in later bottleneck set can claim some of their desired pieces . on the other hand , the following inequality @xmath284 implies that if any subset of agents of @xmath253 wants to misreport so they are not worse off , then collectively , they must over - report their preference to obtain allocations that together is weakly larger in total than the allocations they would get had they reported truthfully .",
    "thus , having a subset of agents in @xmath253 misreport will not benefit the other agents in the coalition @xmath46 .",
    "hence , we may conclude that no agent in @xmath253 appears in the coalition @xmath46 .",
    "provided that every agent in @xmath253 also reports truthfully in @xmath237 , there is no incentive for an agent that belongs to a subsequent bottleneck set in @xmath222 to misreport and prevent @xmath253 from being the first bottleneck set in @xmath237 since that would make the misreporting agent strictly worse off , as in doing so , he needs to create a bottleneck set @xmath285 such that @xmath286 and he would consequently receive an allocation of @xmath287 .",
    "+ since no agent in @xmath253 appears in the coalition @xmath46 and @xmath253 is also the first bottleneck set for @xmath237 , we can remove @xmath253 from @xmath53 and @xmath288 from @xmath0 $ ] and do induction on the set of remaining agents @xmath289 and the remaining piece of cake @xmath0 \\backslash \\cup_{i \\in x_1 } a_i$ ] to be allocated and the proof is complete by invoking the inductive hypothesis with @xmath290 being the first bottleneck set in the new instance .",
    "consider the following math program    @xmath291    where @xmath292 , + notice that the feasible region of the math program contains all feasible allocations .",
    "an optimal solution given by the lp is not pareto dominated by any other feasible allocation because that would contradict the optimality of the solution .",
    "hence , it is pareto efficient .",
    "+ to see that the optimal solution of the math program is also an envy free allocation , if we instead view @xmath122 as the fractional amount of @xmath123 that is allocated to agent @xmath124 , then scaling the @xmath293 s appropriately ( i.e. setting @xmath294 ) , then solving the math program stated in the proposition is equivalent to solving the following math program . @xmath295",
    "which in turn equivalent to solving    @xmath296    notice that the above math program is a convex program since we are maximizing a concave function ( or equivalently minimizing a convex function ) subject to linear constraints .",
    "+ in ( pp 105 - 107 , * ? ? ?",
    "* ) , vazirani invites us to consider a market setting of buyers ( agents ) and divisible goods ( intervals ) . each good",
    "is assumed to be desired by at least one buyer ( i.e. for every good @xmath9 , @xmath297 for some buyer @xmath124 ) .",
    "there is a unit of each good and each buyer is given the same amount of money say @xmath147 dollar , for which he uses to purchases the good(s ) that maximizes his utility subject to a set of given prices .",
    "the task is to find a set of equilibrium prices such that the market clears ( meaning all the demands are met and no part of any item is leftover ) when the buyers seek purchase good(s ) to maximize their utility given the equilibrium prices .",
    "+ using duality theory , one can interpret the dual variable @xmath55 associated with the constraints @xmath298 as the price of consuming a unit of good @xmath9 . by invoking the kkt conditions",
    ", @xcite shows the prices given by the optimal dual solution is a unique set of equilibrium prices .",
    "moreover , the primal optimal solution for each buyer @xmath124 is precisely the quantity of good(s ) that the buyer ends up purchasing that maximizes his utility given the equilibrium prices .",
    "+ now we can argue as to why the optimal primal solution is an envy free allocation . because given the equilibrium prices , if a buyer desires another buyer s allocation , since he has the same purchasing power as any other buyer , he would instead use his money to obtain the allocation of the buyer that he envies .",
    "this would result in some surplus and deficit of goods , contradicting the fact that the given prices are equilibrium prices .",
    "for piecewise uniform valuations , it is known that ccea is equivalent to mechanism @xmath147 in @xcite , which we will refer to as _",
    "simpleccea_. the remainder of the proof will focus on showing the equivalence between simpleccea and the convex program for piecewise uniform valuations .",
    "to do so , given an allocation of simpleccea , which is a feasible solution of the convex program , we will find a set of prices corresponding to the allocation and show that the prices are in fact the equilibrium prices defined by vazirani on pages 105 - 107 of @xcite .",
    "moreover , this allocation would be an allocation that maximizes the agents utility given the equilibrium prices .",
    "+ using the same notations as those in @xcite , given a valuation profile , let @xmath299 be the set of buyers / agents and @xmath300 be the set of goods or intervals .",
    "let @xmath301 be the @xmath9-th bottleneck set computed by simpleccea , i.e. @xmath302 in the @xmath9-th iteration of the subroutine of simpleccea .",
    "let @xmath303 be the set of goods that are distributed amongst the buyers in @xmath301 . in the convex program",
    ", since each buyer is endowed with @xmath147 dollar and every buyer in @xmath301 receives @xmath304 units of good(s ) , it is natural to define the price of a unit of each good @xmath305 to be @xmath306 notice that the prices for each good is well defined ( i.e. each good has exactly one nonnegative price ) .",
    "this follows from the following observations :    1 .",
    "@xmath307 ( or every good has at least one price ) .",
    "this follows from the assumption that every good is desired by at least one agent , which means that simpleccea will allocate all of the goods . 2 .",
    "@xmath308 for all @xmath309 ( or every good has at most one price ) .",
    "this follows from the fact that no fractional parts of any good is allocated to agents from two or more bottleneck sets , which another algorithmic property of simpleccea .    to show that the @xmath310 s form a set of equilibrium prices",
    ", we will show that given the @xmath310 s , the buyers in every @xmath301 will choose to purchase _ only _ goods from @xmath303 to maximize their utility function .",
    "we will do induction on the number of bottleneck sets .",
    "consider the first bottleneck set @xmath311 , we will show that    @xmath312 are the only items that are desirable by buyers in @xmath311 .",
    "simpleccea finds @xmath311 by solving a parametrized max flow problem on a bipartite network .",
    "the network has a node for every buyer and a node for every good .",
    "there is a directed edge from a buyer @xmath9 to a good @xmath124 with infinite capacity if good @xmath124 is desired by buyer @xmath9 .",
    "in addition , there is a source @xmath313 and a sink @xmath314 .",
    "there is a directed edge from @xmath313 to each buyer @xmath9 with capacity @xmath315 and a directed edge from edge good @xmath124 to @xmath314 with capacity equaling the quantity of good @xmath124 .",
    "@xmath315 is set to @xmath217 initially so that the unique min cut in the network for @xmath316 is @xmath317 .",
    "@xmath315 is gradually raised until @xmath317 is no longer the unique min cut , at which point @xmath311 and @xmath312 are found by looking for another min cut of the form @xmath318 . since @xmath318 is a min cut , it must be the case that @xmath319 in the network , which proves the lemma .",
    "( if @xmath320 , then there will be an infinite capacity edge crossing the cut .",
    "on the other hand , if @xmath321 , then replacing @xmath312 with @xmath322 on the @xmath313 side of the cut would give a cut with a smaller capacity . )    since the agents have piecewise uniform valuation , in the setting of the convex program , each buyer in @xmath311 has the same utility for the items that he desire in @xmath312 .",
    "moreover , given that the prices of goods are identical in @xmath312 , each buyer is indifferent between choosing among his desirable items for the best item in terms of bang per buck .",
    "hence , for all buyers in @xmath311 , the allocation given by simpleccea maximizes buyer s utility given the prices @xmath310 s . moreover , notice that the money of buyers in @xmath311 and goods in @xmath312 are exhausted by the allocation given by simpleccea .",
    "+ after the goods in @xmath312 are allocated to the buyers in @xmath311 we repeat the same argument for the remaining buyers and goods and the inductive hypothesis allows to conclude that for every @xmath9 and for all buyers in @xmath301 , the allocation given by simpleccea maximizes buyer s utility given the prices @xmath310 s .",
    "moreover , the money of buyers in @xmath301 and goods in @xmath303 are exhausted by the allocation given by simpleccea .",
    "there is a slight difference between the inductive step and the base case , as it is possible that some buyer @xmath323 in @xmath324 also desires certain goods in @xmath325 for some @xmath326 .",
    "however , @xcite state that @xmath304 is a weakly increasing function of @xmath9 , which means that @xmath327 is a weakly decreasing function of @xmath9 .",
    "since we are dealing with piecewise uniform valuations , the utility of a buyer over his desirable goods are identical , this means that for any buyer in @xmath301 , the goods that maximize his bang for buck are in @xmath303 .",
    "+ putting everything together and we have shown that @xmath310 s constitute the set of equilibrium prices and simpleccea gives an equilibrium allocation , which is an optimal solution to the convex program .",
    "consider the following profile of two agents .    profile 1 :    * @xmath328 , \\",
    "v_1(x ) = 0 \\ \\text{if } \\ x \\in ( 0.2 , 1].$ ] * @xmath329 ,   \\",
    "v_2(x ) = 1 \\ \\text{if } \\ x \\in ( 0.6 , 1].$ ]    the uniform allocation rule gives us the allocation :    * @xmath330 ,   \\frac{1}{2}(0.6,1]\\}$ ] . +",
    "* @xmath331 ,   \\frac{1}{2}(0.6,1]\\}$ ] .",
    "let @xmath332 $ ] be the allocation that agent @xmath149 receives in this case .",
    "+ now consider profile 2 :    * @xmath328 , \\",
    "v_1(x ) = 0 \\ \\text{if } \\ x \\in ( 0.2 , 1].$ ] * @xmath333 \\backslash a ,   \\",
    "v_2(x ) = 1 \\ \\text{if } \\ x \\in a.$ ]    the uniform allocation rule gives us the allocation :    * @xmath330 ,   \\frac{1}{2}a\\}$ ] . +",
    "* @xmath331 ,   \\frac{1}{2}a\\}$ ] .",
    "hence , agent @xmath149 in profile @xmath149 would misreport so that the reported profile is profile @xmath147 .",
    "we first prove that csd is well - defined and results in a feasible allocation in which each agent gets @xmath2 size of the cake .",
    "let @xmath334 be a partitioning of the interval @xmath0 $ ] induced by the discontinuities in agent valuations and the cake cuts in the @xmath133 cake allocations .",
    "we make a couple of claims about @xmath139 that following from the way @xmath139 is constructed .",
    "an agent is completely indifferent over each subinterval in @xmath139 .",
    "let @xmath335 denote a maximum preference cake piece of size @xmath2 chosen by agent @xmath9 in the serial order @xmath336 .",
    "for each @xmath337 either @xmath335 contains @xmath338 completely or it does not contain any part of @xmath338 .    now consider a matrix of dimension @xmath339 : @xmath340 such that @xmath341 if @xmath342 and @xmath343 if @xmath344 .",
    "since for each @xmath345 , each agent @xmath15 gets @xmath2 of the cake in @xmath346 , then it follows that @xmath347 .",
    "hence , @xmath348    also consider a matrix of dimension @xmath349 : @xmath350 such that @xmath351 denotes the fraction of @xmath71 that agent @xmath9 gets in @xmath352 . from the algorithm csd ,",
    "we know that @xmath353 where @xmath142 is the number of permutations in which @xmath9 gets @xmath71 .",
    "it is immediately seen that each column sums up to @xmath147 .",
    "hence each @xmath71 is complete allocated to the agents .",
    "we now prove that each agent gets a total cake piece of size @xmath2 .",
    "we do so by showing that @xmath354 .",
    "@xmath355    hence @xmath132 the allocation returned by csd is a proper allocation of the cake in which each agent gets a total cake piece of size @xmath2 .",
    "we first argue for proportionality of csd . in the case where all agents have the same valuations as the valuation of @xmath9 , @xmath9",
    "is guaranteed @xmath2 of the value of the whole cake because of anonymity of csd .",
    "first note that for each @xmath345 and preferences @xmath356 of all agents other than @xmath9 , @xmath357    the reason is that when valuations are not identical , predecessors of @xmath9 in @xmath336 leave weakly better cake for @xmath9 as when their valuations are same as agent @xmath9 .",
    "hence , @xmath358)/n .",
    "$ ]    finally , note that when an agent selects his best possible cake piece in each permutation , the exact height of the valuation function is not relevant and only the relative height matters .",
    "hence , csd in fact satisfies robust proportionality .",
    "symmetry for csd follows directly from symmetry for rsd .",
    "csd would not be strategyproof if the fraction of each subinterval of @xmath139 is allocated deterministically and the allocation is made public information before the agents submit their valuation function . to see this ,",
    "consider the following example of two agents .",
    "profile 1 :    * @xmath359 , \\",
    "v_1(x ) = 0 \\ \\text{if } \\ x \\in ( 0.5 , 1].$ ] * @xmath360 ,   \\",
    "v_2(x ) = 0 \\ \\text{if } \\ x \\in ( 0.5 , 1].$ ]    running csd gives us the allocation :    * @xmath361 ,   \\frac{1}{2}(0.5,1]\\}$ ] .",
    "+ * @xmath362 ,   \\frac{1}{2}(0.5,1]\\}$ ] .",
    "profile 2 :    * @xmath359 , \\",
    "v_1(x ) = 0 \\ \\text{if } \\ x \\in ( 0.5 , 1].$ ] * @xmath363 , \\",
    "v_2(x ) = 1 \\ \\text{if } \\ x \\in ( 0.25 , 0.75 ] , v_2(x ) = 0   \\",
    "\\text{if } \\ x \\in ( 0.75 , 1].$ ]    running csd gives us the allocation :    * @xmath364 , \\frac{1}{2}(0.25,0.5 ] , \\frac{1}{2}(0.75,1]\\}$ ] .",
    "+ * @xmath365 , ( 0.5,0.75 ] ,   \\frac{1}{2}(0.75,1]\\}$ ] .",
    "now it is possible that the csd mechanism decides to gives @xmath215 \\cup ( 0.75,1]$ ] to agent 1 and @xmath366 $ ] to agent 2 in profile 1 .",
    "consequently , knowing this , agent 2 in profile 2 would misreport his valuation function to be @xmath360 , v_2(x ) = 0 \\ \\text{if } \\ x \\in ( 0.5 , 1]$ ] in order to receive the allocation given in profile 1 and gain utility in doing so .",
    "consider the profiles @xmath44 and @xmath367 , where @xmath44 is a profile where every agent reports truthfully and @xmath367 is a profile where agent @xmath9 misreports while fixing every other agent s report to be the same as that in @xmath44 .",
    "let @xmath368 denote a permutation of @xmath369 = \\{1,\\ldots , n\\}$ ] and let @xmath46 denote the set of all permutations of @xmath369 $ ] .",
    "let @xmath370 denote the intervals whose fractional allocations are specified to each agent by csd in profile @xmath44 and @xmath371 denote the intervals whose fractional allocations are specified to each agent by csd in profile @xmath367 .",
    "let @xmath372 denote agent @xmath9 s total utility derived from receiving the interval @xmath338 and @xmath373 and @xmath374 denote the agent @xmath9 s total utility derived from his allocated pieces when the serial ordering of the agents is @xmath368 in profile @xmath44 and @xmath367 respectively .",
    "let @xmath375 denote the probability that interval @xmath71 is assigned to agent @xmath9 .",
    "since random serial dictatorship is strategyproof in expectation , we have that @xmath376 now csd views @xmath375 as allocating a @xmath375 fraction of interval @xmath71 to agent @xmath9 . in order for a deviating agent to properly evaluate the utility derived from his allocation in the deviating profile @xmath367",
    ", we have to come up with an allocation rule that actually _ attains _ the utility @xmath377 for agent @xmath9 ( either deterministically or in expectation ) when the profile of reports is @xmath367 .",
    "in particular , say if we want to allocate a subinterval of @xmath123 with length @xmath375 times that of @xmath123 to agent @xmath9 at random , then this random allocation rule must satisfy the property that @xmath378 = p_{ij}v_i(j'_j)$ ] , where @xmath379 such that @xmath380 . in order to do so , we will show that the randomized allocation rule for csd satisfy the property that every agent @xmath9 and interval @xmath71 , we have that @xmath381 = p_{ij}v_i(j'_j)$ ] for all valuation functions @xmath382 , where @xmath379 such that @xmath380 .",
    "+ notice that @xmath383 is uniformly distributed on @xmath384 $ ] and @xmath385 has length @xmath386 . the fact that @xmath381 = p_{ij}v_i(j'_j)$ ] follows from the following lemma .",
    "[ lemma : csd - random ] let @xmath387 be uniformly distributed on the interval @xmath388 $ ] and let @xmath389 .",
    "let @xmath390 $ ] if @xmath391 and @xmath392 \\cup [ u , b]$ ] if @xmath393 , then we have that @xmath394 = \\alpha v_i([a , b])$ ] , where @xmath395 for any integrable function @xmath24 .",
    "define @xmath396 for @xmath397 and @xmath398 for @xmath198 outside @xmath388 $ ] .",
    "since @xmath399 is periodic , then it suffices to show that @xmath400 = \\int_{a}^{b } \\int_{x}^{x+\\alpha ( b - a ) } \\bar{v_i}(y ) dy \\frac{1}{b - a } dx = \\alpha \\int_{a}^{b } \\bar{v_i}(x ) dx = \\alpha v_i([a , b]).\\ ] ] by drawing a picture of the region that we evaluate the integral over and due to the fact that @xmath399 is periodic , we have that @xmath401 which proves the lemma .",
    "let @xmath402 , b = ( 0.25 , 0.5 ] , c = ( 0.5 , 0.75 ] , d=(0.75,1]$ ] . consider the following two profiles of valuations .",
    "+ profile 1 :    * @xmath403 * @xmath404    running csd gives us the allocation :    * @xmath405 .",
    "+ * @xmath406",
    ".    profile 2 :    * @xmath407 * @xmath408    running csd gives us the allocation :    * @xmath409 .",
    "+ * @xmath410 .",
    "hence , agents with true valuation in profile 1 would misreport together to profile 2 , which means that csd is not group strategyproof for 2 agents .",
    "there are three agents , each with piecewise uniform valuation function . @xmath411 for @xmath412 $ ] and @xmath217 otherwise .",
    "+ @xmath413 for @xmath414 \\cup ( 2/3,1]$ ] and @xmath217 otherwise .",
    "+ @xmath415 for @xmath416 $ ] and @xmath217 otherwise .",
    "+ let @xmath417 $ ] , @xmath418 $ ] , @xmath419 $ ] .",
    "we adopt the following implementation of csd : when it is agent i s turn to pick , out of the pieces of the remaining cake that he likes , he takes the _ left - most _ such piece with length 1/n , where n is the number of agents .",
    "if the priority ordering were @xmath420 , then a feasible assignment that respects the preferences is 1 @xmath421 a , 2 @xmath421 c , 3 @xmath421 b.    if the priority ordering were 1,3,2 , then a feasible assignment that respects the preferences is @xmath422 @xmath423 , @xmath424 .",
    "if the priority ordering were @xmath425 , then a feasible assignment that respects the preferences is @xmath426 , @xmath427 , @xmath428 .",
    "if the priority ordering were @xmath429 , then a feasible assignment that respects the preferences is @xmath426 , @xmath423 , @xmath430 .",
    "if the priority ordering were @xmath431 , then a feasible assignment that respects the preferences is @xmath432 , @xmath433 , @xmath424 .    if the priority ordering were @xmath434 , then a feasible assignment that respects the preferences is @xmath423 , @xmath426 , @xmath430 .",
    "then , the csd allocation is as follows .",
    "@xmath435 , \\frac{1}{6}(1/3 , 2/3 ] , \\frac{1}{3}(2/3 , 1]\\}\\\\          y_2 = & \\quad \\{\\frac{1}{2}[0,1/3 ] , \\frac{1}{2}(2/3,1]\\}\\\\          y_3 = & \\quad \\{\\frac{5}{6}(1/3 , 2/3 ] , \\frac{1}{6}(2/3,1]\\ }      \\end{aligned}\\ ] ]    clearly , agent 1 envies agent 3 in this case .",
    "consider a fractional assignment @xmath54 returned by the cc algorithm . without private endowments",
    "cc is equivalent to the eps algorithm of @xcite .",
    "assignment @xmath54 satisfies justified envy - freeness in presence of variable eating rates : @xmath436 for all utilities @xmath220 consistent with preferences of @xmath9 over the houses .",
    "the informal intuition is that at any point during the running of cc , an agent @xmath9 with a higher eating rate than @xmath124 will be ` eating ' his most favoured object(s ) faster than @xmath124 even if @xmath124 is also has the eating the same object(s ) .",
    "hence , for all @xmath28 , it is the case that for @xmath221 , @xmath181 .",
    "given a variable claim instance @xmath222 of @xmath1 agents where agent @xmath9 has claim rate @xmath437 for @xmath438 .",
    "we may assume without lost of generality that the claim rates are integral .",
    "if they are not , then we can simply multiple each claim rate @xmath437 by a common denominator to make each @xmath437 integral .",
    "doing so will not change the allocation given by the algorithm since only relative claim rates matter to the algorithm . + now consider a cake cutting instance @xmath237 of @xmath439 agents , where the agents have piecewise uniform utility function and there are no private endowments or variable claims . moreover , for every @xmath440 , there are @xmath437 agents in @xmath237 each of whom has the same utility function as that of agent @xmath9 in @xmath222 .",
    "it is not difficult to see that if one aggregates the allocation that the @xmath437 agents in @xmath237 who share agent @xmath9 s valuation in @xmath222 , then one would get an equivalent allocation ( in terms of utility ) to agent @xmath9 s allocation .",
    "suppose for the sake of contradiction that ccea is not gsp for the case of variable claims , then in some instance @xmath222 , there exists some coalition @xmath46 of the agents that weakly gains in utility by misreporting their preference .",
    "now consider the equivalent instance @xmath237 with no variable claims under the aforementioned transformation , then there exists some coalition @xmath441 of the agents in @xmath237 that weakly gains in utility by misreporting their preference , which implies that ccea is not group - strategyproof for the no variable claims case , contradicting the result of proposition  [ prop : gsp1 ] .",
    "the allocation can be obtained by solving the following convex program .",
    "@xmath442    the proof of the desired properties is similar to the case where @xmath443 .",
    "consider a fractional assignment @xmath54 returned by the cc algorithm.we know that @xmath54 satisfies justified envy - freeness for the random / fractional assignment problem  ( prop . 4 ,",
    "* ) . if @xmath69 , then @xmath185 . if @xmath444 , then @xmath186 .",
    "hence @xmath8 satisfies justified envy - freeness for private endowments ."
  ],
  "abstract_text": [
    "<S> cake cutting is one of the most fundamental settings in fair division and mechanism design without money . in this paper , we consider different levels of three fundamental goals in cake cutting : fairness , pareto optimality , and strategyproofness . in particular , </S>",
    "<S> we present robust versions of envy - freeness and proportionality that are not only stronger than their standard counter - parts but also have less information requirements . </S>",
    "<S> we then focus on cake cutting with piecewise constant valuations and present three desirable algorithms : _ ccea ( controlled cake eating algorithm ) _ , _ mea ( market equilibrium algorithm ) _ and _ csd ( constrained serial dictatorship)_. ccea is polynomial - time , robust envy - free , and non - wasteful . </S>",
    "<S> it relies on parametric network flows and recent generalizations of the probabilistic serial algorithm . for the subdomain of piecewise uniform valuations , </S>",
    "<S> we show that it is also group - strategyproof . </S>",
    "<S> then , we show that there exists an algorithm _ ( mea ) _ that is polynomial - time , envy - free , proportional , and pareto optimal . </S>",
    "<S> mea is based on computing a market - based equilibrium via a convex program and relies on the results of @xcite and @xcite . </S>",
    "<S> moreover , we show that mea and ccea are equivalent to mechanism 1 of chen et . </S>",
    "<S> al . for piecewise uniform valuations . </S>",
    "<S> we then present an algorithm _ csd _ and a way to implement it via randomization that satisfies strategyproofness in expectation , robust proportionality , and unanimity for piecewise constant valuations . for the case of two agents , </S>",
    "<S> it is robust envy - free , robust proportional , strategyproof , and polynomial - time . </S>",
    "<S> many of our results extend to more general settings in cake cutting that allow for variable claims and initial endowments . </S>",
    "<S> we also show a few impossibility results to complement our algorithms . </S>",
    "<S> the impossibilities show that the properties satisfied by ccea and mea are maximal subsets of properties that can be satisfied by any algorithm for piecewise constant valuation profiles . </S>"
  ]
}