{
  "article_text": [
    "we consider a problem of scheduling maintenance jobs on the arcs of a network , where each job has a given processing time , release date and deadline .",
    "the network is used to transport flow from a source node to a sink node using capacitated arcs , where the capacity of an arc represents the highest rate in flow units per unit time that it can carry .",
    "while a maintenance job is in progress on an arc , the arc can not carry flow , and the objective is to schedule the maintenance jobs so as to maximize the total flow that can be transported by the network over a given planning time horizon .",
    "this problem is a natural marriage of scheduling with network flow : it unites the diverse and well established field of scheduling ( see any of the many excellent texts available on the topic , e.g.  @xcite ) with dynamic network flows , which have been the subject of intense study in recent years , e.g.  @xcite . yet the problem was only recently introduced , first appearing in  @xcite , where meta - heuristic approaches were explored .",
    "it was motivated by a study of a bulk goods export supply chain  @xcite , in which maintenance jobs on sections of the rail network and equipment in the export terminals were scheduled so as to maximize the throughput of the system .",
    "strong np - hardness of the problem is established in  @xcite using a reduction to a network with only a single transshipment node ( node other than the source or sink ) .",
    "the complexity of a variety of special cases is investigated in  @xcite where it is shown ( among other results ) that even in the case that all jobs have unit processing times and do not have release dates or deadlines , and that all transshipment nodes have equal inbound and outbound capacity , the problem is still strongly np - hard .",
    "the problem exhibits a rich structure , making it attractive for complexity analysis , approximation , combinatorial algorithms , integer programming , and heuristics .",
    "it represents a natural extension to existing network models , and admits many interesting variants .",
    "for example , tawarmalani and li  @xcite , motivated by a problem in highway maintenance , consider a multicommodity flow variant , providing complexity results , combinatorial algorithms , and integer programming models .",
    "the only other work combining network flow and scheduling that we are aware of is that of nurre et al .",
    "@xcite , who schedule arc restoration tasks in the wake of a major disruption so as to maximize weighted flow over time . whilst the problem does involve scheduling over a ( weighted ) maximum flow objective , there are several key differences to the problem we study here . in the problem of  @xcite",
    ", the arc is closed from the start of the planning horizon until its restoration task is completed , from which time it is always open .",
    "the restoration task for each arc must be scheduled for completion by a work group , leading to a parallel machine scheduling structure absent in our case .",
    "all work to date on the problem we study here has ignored the possibility of flow storage at nodes .",
    "the latter is an important feature of real applications : in the export supply chain studied in  @xcite , the port terminal has stockyards for holding stockpiled material , which can provide outbound flow from the system even while maintenance shuts down inbound flow . the optimal schedule in the case that storage is ignored is likely to be far from optimal in the presence of storage .",
    "( we illustrate this point using the example given in section  [ subsec : example ] . )",
    "furthermore , the presence of storage has a fundamental effect on the properties of the problem : when no storage is allowed , integer data implies an optimal solution with integer job start times , but with storage , non - integer job start times may be required for optimality .",
    "this makes the problem with storage a fascinating setting in which to study the role of time discretization in integer programming models .",
    "it motivates questions such as what potential start times are important to consider ?",
    "can we restrict attention to particular times , or must all times in the continuum be considered in order to prove optimality ? what kinds of discretization and what models can guarantee valid bounds on the optimal solution ? in addressing these questions , this paper can be viewed as contributing to a rapidly increasing body of work exploring exact models based on coarser time discretizations , for example big bucket models in lot - sizing  @xcite and discretizations based on job release dates and deadlines in machine scheduling  @xcite , as well as approximate integer programs , for example for traveling salesman problems with time windows  @xcite and for solving continuous - time dynamic network flows  @xcite .    the prior work on close variants of the problem we study here either treats the selection of job start times heuristically , or assumes integer start times .",
    "in order to tackle a real problem in which maintenance jobs must be timed to within 15-minute intervals over a planning horizon of a year , the integer programming model presented in  @xcite is formulated in terms of a sparse set of possible start times selected heuristically for each job .",
    "the problem variants tackled in  @xcite ( all without storage ) simply state the problem as one in which jobs must start at integer times . whilst this property of start times is intuitively reasonable in the case without storage ,",
    "it has not yet been formally proved ; the first such proof is one of the key contributions of this paper .",
    "these are summarized as follows .    1 .",
    "we give the first mixed integer linear programming model that solves the continuous time problem ( with or without storage ) exactly .",
    "we provide the first formal proof that when no storage is allowed , there exists an optimal solution in which all job start times expressed in the form @xmath0 where @xmath1 is a release date or a deadline of some job , @xmath2 for all @xmath3 , @xmath4 is the processing time of some job for all @xmath3 , and the number of terms @xmath5 is less than twice the total number of jobs .",
    "this yields the property that if the data is integer , an optimal solution with integer start times is assured .",
    "we demonstrate that when storage _ is _ allowed , even with integer data , non - integer job start times may be needed in an optimal solution .",
    "we prove that in this case we can ( without loss of generality ) restrict attention to _ rational _ start times , and in particular show that there exist optimal start times that can be expressed as rational numbers with a denominator that is _ independent _ of the job parameters ( processing times , release dates and deadlines ) .",
    "4 .   as a consequence , the time indexed formulations so useful in machine scheduling ( e.g.  @xcite ) can not be applied to this problem directly while assuring optimality . noting that the exact formulation is difficult to solve in practice ,",
    "we provide the first integer programming model to give valid _ dual _ bounds , ( upper bounds ) , based on discretization of time . the model can employ _ any _ discretization .",
    "this property is particularly attractive , as it permits models to be time - scale invariant .",
    "for example , using the release dates and deadlines of jobs to form the time discretization yields a model with a size that is invariant to the length of the time horizon , depending only on the number of jobs ; a unit time discretization based model s size would increase with increasing time horizon as well as with the number of jobs .",
    "we observe that the same model employing a discretization that conforms to the job parameters ( release dates and deadlines are included , as is any time point in the discretization plus or minus any job processing time that stays between the job s release date and deadline ) and with the additional restriction that jobs start at the start of a time interval , also provides feasible solutions when solved as an integer program ( ip ) .",
    "furthermore , if the time discretization is sufficiently fine , this formulation yields optimal solutions .",
    "this allows us to compute primal ( lower ) bounds for test instances with integer data by solving an ip based on the unit time discretization .",
    "we compare this approach with several heuristics that `` repair '' solutions found in the process of solving the integer programs that yield dual bounds .",
    "our computational tests demonstrate the strength of both lower and upper bounds ; we discuss the trade - offs between solution time and quality , and show that for the best approaches , optimality gaps are typically very small .",
    "let @xmath6 be a network with node set @xmath7 , arc set @xmath8 , source node @xmath9 , and sink node @xmath10 .",
    "there is a set @xmath11 of storage nodes , and the capacity vector @xmath12 collects the arc capacities and the storage capacities of the nodes in @xmath13 . for a node @xmath14 ,",
    "let @xmath15 and @xmath16 denote the set of arcs starting at @xmath14 and ending in @xmath14 , respectively .",
    "in addition , we are given a set @xmath17 of arcs that need to be shut for a maintenance job to be done without any preemptions .",
    "for simplicity , assume that for each arc @xmath18 there is exactly one maintenance job , which is specified by its processing time @xmath19 , its release time @xmath20 , and its deadline @xmath21 .",
    "we consider this network over a time horizon @xmath22 .",
    "the problem is to schedule the jobs , hence a feasible solution is a vector @xmath23 of start times with @xmath24 $ ] for all @xmath18 .",
    "let @xmath25 denote the set of all feasible solutions , i.e. @xmath26 $ ] .",
    "a feasible solution @xmath27 is evaluated as follows .",
    "let @xmath28 be the increasing sequence obtained by ordering the set @xmath29 note that the same time point @xmath30 can occur multiple times in this union , since it is possible that several jobs start and end at time @xmath30",
    ". during each of the time intervals @xmath31 , @xmath32 , thus induced by @xmath33 , the state of the network is constant : no maintenance job either starts or ends within the interval .    for @xmath18 ,",
    "let @xmath34 denote the set of intervals in which arc @xmath1 is shut for maintenance , i.e. , @xmath35 .",
    "the value of the solution @xmath27 , denoted by @xmath36 , can be characterized as the optimal value of a maximum flow problem in a time - expanded network . for @xmath37 and @xmath38 , let @xmath39 be the flow on arc @xmath1 in time interval @xmath31 . for @xmath40 and @xmath38 , let @xmath41 be the amount of flow that is stored in @xmath14 at time @xmath42 .",
    "we impose the boundary conditions that the storage nodes are empty in the beginning and in the end of the time horizon , i.e. , @xmath43 for all @xmath40 . finally , @xmath36 is the optimal objective value of the following problem .",
    "@xmath44 the objective function   is the total throughput , i.e. , the sum of the flow values over all time periods .",
    "constraints   and   are flow conservation constraints for non - storage nodes and storage nodes , respectively . the incoming flow of a storage node @xmath40 in time period @xmath45 , i.e. , in the time interval @xmath31 , is the sum of the flow that arrives at node @xmath14 in time period @xmath45 and the flow that that is stored in node @xmath14 at time @xmath46 .",
    "similarly , the outgoing flow of a storage node @xmath40 in time period @xmath45 is the sum of the flow that arrives at node @xmath14 in this period and the flow that that is stored in node @xmath14 at time @xmath47 .",
    "constraints  , and   are arc capacity constraints , where   captures the arc outages",
    ". constraints   are storage capacity constraints , and constraints   capture the boundary conditions .",
    "our optimization problem is to find a start time vector @xmath27 to maximize the total throughput : @xmath48 note that we may assume that in each interval @xmath31 the flow rates for all arcs are constant : on arc @xmath1 , we have a flow rate of @xmath49 units of flow per time unit .      both to illustrate the problem , and to demonstrate the importance of storage in finding an optimal maintenance schedule",
    ", we consider the network and arc maintenance jobs given in figure  [ fig : example_1 ] , where arc labels indicate arc names and capacities ( in parentheses ) . in this example",
    ", the time horizon is @xmath50 , and only the job on arc @xmath1 needs to be scheduled : the job on arc @xmath51 must start at time @xmath52 .",
    "let @xmath53 denote the start time of the job on arc @xmath1 . from job @xmath1 s parameters",
    ", we see that @xmath54 $ ] . as a consequence",
    ", there can only be _",
    "one _ sequence of times @xmath55 resulting from ordering @xmath56 , ( where we have relaxed the strict inequalities to permit the job on @xmath1 to start at @xmath57 or at @xmath58 , the end time of the job on @xmath51 , or to end at time @xmath50 ) , and that is given by @xmath59    \\(1 ) @xmath60 ; ( 2 ) [ right of=1 ] @xmath14 ; ( 3 ) [ right of=2 ] @xmath30 ;    \\(1 ) edge node@xmath61 ( 2 ) ( 2 ) edge node @xmath62 ( 3 ) ;    [ cols=\"^,^,^,^,^\",options=\"header \" , ]",
    "although our focus in this paper is on a problem motivated by practical applications in maintenance scheduling , in order to obtain insights about the nature of the problem and its theoretical properties , we have studied a variant that is simpler than one that might be encountered in practice . in this section",
    ", we mention a few extensions that we have encountered , or that might naturally arise , in practice , and briefly indicate how they might be represented in our model .    in the hvcc application that motivated this research , ( described , for example , in @xcite ) ,",
    "precedence relations between jobs were encountered .",
    "these can easily modeled linearly in the ctip model , for example , with the constraint @xmath63 for all @xmath64 when the job on arc @xmath1 must be completed before the one on arc @xmath65 can start . in the tdip model",
    ", these relations can be approximated , for example , with the constraints @xmath66 which capture that if the job on arc @xmath1 starts at time @xmath46 or later then the job on arc @xmath65 can not start before time @xmath67 .",
    "incompatible sets of maintenance jobs , at most one of which could be in progress at any one time , were also encountered in the hvcc application .",
    "this is readily represented in the ctip model with the constraint @xmath68 , and in the tdip model with @xmath69 , where @xmath70 is a set of arcs with mutually incompatible jobs .    in practical settings",
    ", it may also be the case that resources required to carry out maintenance , such as work crews , or equipment , are limited . in the hvcc setting , such limitations did indeed occur , but their nature led them to be handled by a combination of the release dates and deadlines , precedence constraints , and incompatible job sets .",
    "for example , incompatible jobs sets may consist of jobs that require a special type of maintenance equipment , only one of which is available .",
    "these latter constraints can readily be generalized to the case of a limited number of maintenance jobs that could occur at any one time : in the constraints given in the last paragraph , the right - hand sides of @xmath71 can simply be replaced by the required limit . clearly ,",
    "in general , there are many possible ways in which resources may constrain a maintenance schedule , and the precise nature of these will be application - dependent .",
    "another natural consideration from an application point of view is the possibility of maintenance on nodes , where a job on node @xmath14 prevents flow through this node for the corresponding time period .",
    "this can be easily captured by our model using the standard node - splitting device .    for a non - storage node @xmath72 with a maintenance job , we replace @xmath14 by two nodes @xmath73 and @xmath74 , connected by an arc @xmath75 whose capacity is @xmath76 while every arc @xmath77 in the original network is replaced by an arc @xmath78 of capacity @xmath79 , and every arc @xmath80 in the original network is replaced by an arc @xmath81 of capacity @xmath79 . then the job on node @xmath14 is equivalent to a job on the arc @xmath75 with the same release date , deadline , and processing time .    for storage nodes",
    "the situation is a little bit more complicated .",
    "one could think of situations where a maintenance job blocks only inbound flow , only outbound flows or both . to capture this in full generality",
    "we can replace a storage node @xmath40 by three nodes @xmath73 , @xmath74 and @xmath82 with arcs @xmath75 and @xmath83 , both with capacity  . in the new network @xmath74",
    "is a storage node with capacity @xmath84 , while @xmath73 and @xmath82 are non - storage nodes .",
    "every arc @xmath77 in the original network is replaced by an arc @xmath78 of capacity @xmath79 , and every arc @xmath80 in the original network is replaced by an arc @xmath85 of capacity @xmath79 .",
    "a job on node @xmath14 that blocks only inbound flow can be represented by a job on the arc @xmath75 , a job on node @xmath14 that blocks only outbound flow can be represented by a job on the arc @xmath83 , and a job on node @xmath14 that blocks both inbound and outbound flow can be represented by two jobs on arcs @xmath75 and @xmath83 with the additional constraint that these two jobs have to be processed at the same time .",
    "this can be modeled in the ctip model by asking that @xmath86 for all @xmath45 , and in the tdip model by asking that @xmath87 for all @xmath45 , where @xmath1 and @xmath65 are the arcs on which the two jobs must be processed at the same time .",
    "our results immediately suggest two directions in which further investigation is warranted .",
    "first , tdip offers enormous flexibility in the choice of discretization , so the relationship between the quality of the bounds produced by tdip formulations and the granularity of the discretization used needs to be better understood .",
    "the nature of the discretization , for example , whether it is regular or irregular , and whether or not it contains the job release dates and due dates , may also impact performance of the formulation : this , too , needs to be better understood .",
    "second , the com and proj heuristics themselves are computationally very cheap , but their quality depends on the time at which either lp or integer feasible solutions are extracted from the tdip mip solution process .",
    "the relationships between the instance parameters , this time , and the resulting solution quality need to be better understood and quantified .",
    "these are both directions of future study .",
    "we thank the australian research council ( arc ) , the hunter valley coal chain coordinator ( hvccc ) and triple point technologies for their generous research funding ; this research was supported by arc linkage grant lp110200524 .",
    "we also thank the university of newcastle for funding the phd scholarship of our co - author , simranjit kaur , and thank the university of delhi , in particular the sri guru tegh bahadur khalsa college , for their ongoing support of her phd studies .",
    "10    k.r . baker and d.  trietsch . .",
    "wiley , 2009 .",
    "p.  baptiste and r.  sadykov . on scheduling a single machine to minimize a piecewise linear objective function : a compact mip formulation .",
    ", 56(6):487502 , 2009 .",
    "n.  boland , t.  kalinowski , r.  kapoor , and s.  kaur . scheduling unit time arc shutdowns to maximize network flow over time : complexity results . , 63(2):196202 , 2014 .",
    "n.  boland , t.  kalinowski , h.  waterer , and l.  zheng .",
    "mixed integer programming based maintenance scheduling for the hunter valley coal chain .",
    ", 16(6):649659 , 2013 .",
    "n.  boland , t.  kalinowski , h.  waterer , and l.  zheng . scheduling arc maintenance jobs in a network to maximize total flow over time .",
    ", 163(1):3452 , 2014 .",
    "n.  boland and m.w.p .",
    "savelsbergh . optimizing the hunter valley coal chain . in h.",
    "gurnani , a.  mehrotra , and s.  ray , editors , _ supply chain disruptions : theory and practice of managing risk_. springer - verlag london ltd . , 2011 .",
    "p.  brucker . .",
    "springer - verlag , 5th edition , 2007 .",
    "p.  brucker and s.  knust . .",
    "springer - verlag , 2nd edition , 2012 .",
    "conway , w.l .",
    "maxwell , and l.w .",
    "courier dover publications , 2003 .",
    "s.  dash , o.  gnlk , a.  lodi , and a.  tramontani . a time bucket formulation for the traveling salesman problem with time windows .",
    ", 24(1):132147 , 2012 .",
    "r.  koch , e.  nasrabadi , and m.  skutella .",
    "continuous and discrete flows over time . , 73:301337 , 2011 .",
    "b.  kotnyek .",
    "an annotated overview of dynamic network flows .",
    "technical report 4936 , institut national de recherche en informatique et en automatique ( inria ) , 2003 .",
    "j.  y - t .",
    "leung , editor . .",
    "crc press , 2004 .",
    "s.  mehdi  hashemi and e.  nasrabadi .",
    "on solving continuous - time dynamic network flows .",
    ", 53(3):497524 , 2012 .",
    "r.r . meyer . on the existence of optimal solutions to integer and mixed - integer programming problems .",
    ", 7(1):223235 , 1974 .",
    "nurre , b.  cavdaroglu , j.e .",
    "mitchell , t.c .",
    "sharkey , and w.a .",
    "wallace . restoring infrastructure systems : an integrated network design and scheduling ( inds ) problem .",
    ", 223(3):794806 , 2012 .",
    "m.  pinedo . .",
    "springer , 2012 .",
    "y.  pochet and l.  wolsey . .",
    "springer series in operations research and financial engineering .",
    "springer , 2006 .",
    "r.  robert and f.  vivien , editors . .",
    "crc press , 2010 .",
    "m.  savelsbergh , r.  uma , and j.  wein",
    ". an experimental study of lp - based approximation algorithms for scheduling problems .",
    "17:123136 , 2005 .    m.  skutella .",
    "an introduction to network flows over time . in w.",
    "cook , l.  lovasz , and j.  vygen , editors , _ research trends in combinatorial optimization _ , pages 451482 .",
    "springer , 2009 .",
    "m.  tawarmalani and y.  li .",
    "multi - period maintenance scheduling of tree networks with minimum flow disruption .",
    ", 58(5):507530 , 2011 .",
    "x.  wang and a.c .",
    "regan . on the convergence of a new time window discretization method for the traveling salesman problem with time window constraints .",
    ", 56(1):161164 , february 2009 .",
    "in this appendix we assume that there is no storage , i.e. , @xmath88 .",
    "consider an optimal schedule @xmath89 with associated time discretization @xmath28 .",
    "let @xmath90 be the value of a maximum flow in the network available in time interval @xmath91 $ ] , so that the objective value for the solution @xmath92 is @xmath93 for an index set @xmath94 , let @xmath95 be the set of corresponding time points .",
    "conversely , for a set @xmath96 , let @xmath97 be the corresponding index set .",
    "we define the _ closure _ of @xmath96 to be the set @xmath98 and the closure of an index set @xmath99 is @xmath100 .",
    "the set @xmath99 is called _ closed _ if @xmath101 .",
    "a closed set @xmath99 is called _ free _ if @xmath102 in other words , if @xmath99 is a free closed index set , then there is an @xmath103 such that all jobs whose start and completion times lie in @xmath104 can be moved by @xmath105 to obtain two other feasible solutions which we denote by @xmath106 and @xmath107 .",
    "more precisely , @xmath108    the value @xmath109 can also be chosen sufficiently small , so that the shift affects only the lengths of the time intervals but not the combinations of available arcs .",
    "this can be achieved by choosing @xmath110 let @xmath111 and @xmath112 .",
    "then the objective values for the solutions @xmath113 and @xmath114 are @xmath115 the optimality of @xmath92 implies @xmath116 , hence we have proved the following lemma .",
    "[ lem : shifting ] suppose @xmath88 , @xmath92 is an optimal solution , and @xmath99 is a free closed index set .",
    "then there is an @xmath103 such that the two solutions @xmath106 and @xmath107 are also optimal solutions ."
  ],
  "abstract_text": [
    "<S> we consider a problem that marries network flows and scheduling , motivated by the need to schedule maintenance activities in infrastructure networks , such as rail or general logistics networks . </S>",
    "<S> network elements must undergo regular preventive maintenance , shutting down the arc for the duration of the activity . </S>",
    "<S> careful coordination of these arc maintenance jobs can dramatically reduce the impact of such shutdown jobs on the flow carried by the network . </S>",
    "<S> scheduling such jobs between given release dates and deadlines so as to maximize the total flow over time presents an intriguing case to study the role of time discretization . here </S>",
    "<S> we prove that if the problem data is integer , and no flow can be stored at nodes , we can restrict attention to integer job start times . </S>",
    "<S> however if flow can be stored , fractional start times may be needed . </S>",
    "<S> this makes traditional strong integer programming scheduling models difficult to apply . </S>",
    "<S> here we formulate an exact integer programming model for the continuous time problem , as well as integer programming models based on time discretization that can provide dual bounds , and that can - with minor modifications - also yield primal bounds . </S>",
    "<S> the resulting bounds are demonstrated to have small gaps on test instances , and offer a good trade - off for bound quality against computing time . </S>",
    "<S> * keywords . * network models ; maintenance scheduling ; mixed integer programming ; time discretization ; heuristics </S>"
  ]
}