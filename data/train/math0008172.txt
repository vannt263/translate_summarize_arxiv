{
  "article_text": [
    "peg solitaire is a game for one player .",
    "each move consists of hopping a peg over another one , which is removed .",
    "the goal is to reduce the board to a single peg .",
    "the best - known forms of the game take place on cross - shaped or triangular boards , and it has been marketed as `` puzzle pegs '' and `` hi - q . ''",
    "discussions and various solutions can be found in @xcite .    in @xcite , guy",
    "proposes one - dimensional peg solitaire as an open problem in the field of combinatorial games . here",
    "we show that the set of solvable configurations forms a regular language , i.e.  it can be recognized by a finite - state automaton .",
    "in fact , this was already shown in 1991 by plambeck ( @xcite , introduction and ch.5 ) and appeared as an exercise in a 1974 book of manna @xcite .",
    "more generally , b. ravikumar showed that the set of solvable configurations on rectangular boards of any finite width is regular @xcite , although finding an explicit grammar seems to be difficult on boards of width greater than 2 .",
    "thus there is little new about this result .",
    "however , it seems not to have appeared in print , so here it is .",
    "the set of configurations that can be reduced to a single peg is the regular language @xmath2 where @xmath3\\ , ( 10)^ * 11 \\nonumber \\\\ & + & 11 ( 01)^ * ( 11)^ * 01 + 10 ( 11)^ * ( 10)^ * 11 . \\label{lang}\\end{aligned}\\ ] ] here @xmath4 and @xmath5 indicate a peg and a hole respectively , @xmath6 means ` 0 or more repetitions of @xmath7 , ' and @xmath8 means ` 1 or more repetitions of @xmath7 . '",
    "[ thm ]    to prove the theorem , we follow leibnitz @xcite in starting with a single peg , which we denote @xmath9 and playing the game in reverse .",
    "the first ` unhop ' produces @xmath10 and the next @xmath11 ( as it turns out , @xmath12 is the only configuration that can not be reduced to a single peg without using a hole outside the initial set of pegs .",
    "therefore , for all larger configurations we can ignore the @xmath5 s on each end . )",
    "we take the second of these as our example .",
    "it has two ends , @xmath13 and @xmath14 .",
    "the latter can propagate itself indefinitely by unhopping to the right , @xmath15 when the former unhops , two things happen ; it becomes an end of the form @xmath16 and it leaves behind a space of two adjacent holes , @xmath17 furthermore , this is the only way to create a @xmath18 .",
    "we can move the @xmath18 to the right by unhopping pegs into it , @xmath19 however , since this leaves a solid block of @xmath4 s to its left , we can not move the @xmath18 back to the left . any attempt to do so",
    "reduces it to a single hole , @xmath20 here we are using the fact that if a peg has another peg to its left , it can never unhop to its left .",
    "we prove this by induction : assume it is true for pairs of pegs farther left in the configuration .",
    "since adding a peg never helps another peg unhop , we can assume that the two pegs have nothing but holes to their left .",
    "unhopping the leftmost peg then produces @xmath21 , and the original ( rightmost ) peg is still blocked , this time by a peg which itself can not move for the same reason .",
    "in fact , there can never be more than one @xmath18 , and there is no need to create one more than once , since after creating the first one the only way to create another end of the form @xmath13 or @xmath22 is to move the @xmath18 all the way through to the other side @xmath23 and another @xmath18 created on the right end now might as well be the same one .",
    "we can summarize , and say that any configuration with three or more pegs that can be reduced to a single peg can be obtained in reverse from a single peg by going through the following stages , or their mirror . by unhopping the rightmost peg",
    ", we obtain @xmath24 .",
    "if we like , we then 2 .   unhop the leftmost peg one or more times , creating a pair of holes and obtaining @xmath25 .",
    "we can then 3 .",
    "move the @xmath18 to the right ( say ) , obtaining @xmath26 .",
    "we can stop here , or 4 .",
    "move the @xmath18 all the way to the right , obtaining @xmath27 , or 5 .",
    "fill the pair by unhopping from the left , obtaining @xmath28 .",
    "equation  [ lang ] simply states that the set of configurations is the union of all of these plus @xmath4 , @xmath29 , and @xmath30 , with as many additional holes on either side as we like .",
    "then @xmath2 is regular since it can be described by a regular expression @xcite , i.e.  a finite expression using the operators @xmath31 and @xmath32 .",
    "among other things , theorem  [ thm ] allows us to calculate the number of distinct configurations with @xmath33 pegs , which is @xmath34 here we decline to count @xmath29 and @xmath30 as separate configurations , since many configurations have more than one way to reduce them .",
    "we also have the corollary    [ one - peg - strategy ] there is a linear - time strategy for playing peg solitaire in one dimension .",
    "our proof of theorem  [ thm ] is constructive in that it tells us how to unhop from a single peg to any feasible configuration .",
    "we simply reverse this series of moves to play the game .",
    "more generally , a configuration that can be reduced to @xmath35 pegs must belong to the regular language @xmath36 , since unhopping can not interleave the pegs coming from different origins @xcite .",
    "this leads to the following algorithm :    there is a linear - time strategy for reducing any one - dimensional peg solitaire configuration to the minimum possible number of pegs .",
    "suppose we are given a string @xmath37 where each @xmath38 .",
    "let @xmath39 be a nondeterministic finite automaton ( without @xmath40-transitions ) for @xmath41 , where @xmath42 is the set of states in @xmath39 , @xmath43 is the start state , and @xmath44 is the set of accepting states .",
    "we then construct a directed acyclic graph @xmath45 as follows : let the vertices of @xmath45 consist of all pairs @xmath46 where @xmath47 and @xmath48 .",
    "draw an arc from @xmath46 to @xmath49 in @xmath45 whenever @xmath39 makes a transition from state @xmath50 to state @xmath51 on symbol @xmath52 . also , draw an arc from @xmath53 to @xmath54 for any @xmath55 and any @xmath56 . since @xmath57 , @xmath58 .",
    "then any path from @xmath59 to @xmath60 in @xmath45 consists of @xmath33 arcs of the form @xmath46 to @xmath49 , together with some number @xmath35 of arcs of the form @xmath53 to @xmath54 . breaking the path into subpaths by removing all but",
    "the last arc of this second type corresponds to partitioning the input string into substrings of the form @xmath2 , so the length of the shortest path from @xmath59 to @xmath60 in @xmath45 is @xmath61 , where @xmath35 is the minimum number of pegs to which the initial configuration can be reduced .",
    "since @xmath45 is a directed acyclic graph , we can find shortest paths from @xmath59 by scanning the vertices @xmath46 in order by @xmath62 , resolving ties among vertices with equal @xmath62 by scanning vertices @xmath53 ( with @xmath55 ) earlier than vertex @xmath54 .",
    "when we scan a vertex , we compute its distance to @xmath59 as one plus the minimum distance of any predecessor of the vertex .",
    "if the vertex is @xmath59 itself , the distance is zero , and all other vertices @xmath63 have no predecessors and infinite distance",
    ".    thus we can find the optimal strategy for the initial configuration by forming @xmath45 , computing its shortest path , using the location of the edges from @xmath53 to @xmath54 to partition the configuration into one - peg subconfigurations , and applying corollary  [ one - peg - strategy ] to each subconfiguration .",
    "since @xmath58 , this algorithm runs in linear time .",
    "in contrast to these results , uehara and iwata @xcite showed that in two or more dimensions peg solitaire is np - complete .",
    "however , the complexity of finding the minimum number of pegs to which a @xmath64 configuration can be reduced , for bounded @xmath65 , remains open .",
    "ravikumar @xcite has proposed an impartial two - player game , in which players take turns making peg solitaire moves , and whoever is left without a move loses .",
    "we call this game `` peg duotaire . '' while he considered the version where each move consists of a single hop , in the spirit of the game we will start with the `` multihop '' version where a series of hops with a single peg can be made in a single move .",
    "we recall the definition of the _ grundy number _ or _ nim - value _ @xmath45 of a position in an impartial game , namely the smallest non - negative integer not appearing among the nim - values of its options @xcite . the @xmath0-positions , in which the second ( previous ) player can win , are those with nim - value zero : any move by the first ( next ) player is to a position with a non - zero @xmath45 , and the second player can then return it to a position with @xmath66 .",
    "this continues until we reach a position in which there are no moves , in which case @xmath66 by definition ; then next is stuck , and previous wins .",
    "similarly , the @xmath1-positions , in which the first player can win , are those for which @xmath67 .",
    "the nim - value of a disjunctive sum of games , in which each move consists of a move in the game of the player s choice , is the _ nim - sum _ , or bitwise exclusive or ( binary addition without carrying ) of the nim - values of the individual games .",
    "we notate this @xmath68 , and for instance @xmath69 . like many games , positions in peg duotaire",
    "often quickly reduce to a sum of simple positions :        as in the hawaiian game of konane @xcite , interaction across gaps of size 2 seems to be rare but by no means impossible .",
    "for instance , previous can win from a position of the form @xmath75 by strategy stealing , i.e.  copying each of next s moves , unless next can change the parity by hopping into the gap . in the multihop case , however , previous can sometimes recover by hopping into the gap and over the peg next has placed there :      previous steals next s strategy until next hops into the gap .",
    "previous then hops into the gap and over next s peg , leaving a position of the form in lemma  [ separationlemma ] .",
    "the games then separate and previous can continue stealing next s strategy , so the nim - value is @xmath80 .    to show that this remains true even if next tries to hop from @xmath81 ,",
    "consider the following game : @xmath82 now @xmath83 and @xmath84 are separated by two gaps of the form of lemma  [ separationlemma ] .",
    "since hopping from @xmath7 and @xmath85 into @xmath86 gives @xmath87 , and since hopping into this gives @xmath88 , and since hopping into @xmath89 gives another word of the same form , we re done .",
    "lemma  [ palindromelemma ] seems to be optimal , since @xmath90 and @xmath91 have nim - values @xmath4 and @xmath92 respectively . nor",
    "does it hold in the single - hop version , since there @xmath93 has nim - value 1 .",
    "in fact , the player who desires an interaction across a 00 has more power here than in konane , since she can hop into the gap from either or both sides . in konane , on the other hand , each player can only move stones of their own color , which occur on sites of opposite parity , so that the player desiring an interaction must force the other player to enter the gap from the other side .    using a combination of experimental math and inductive proof",
    ", the reader can confirm the nim - values of the multihop positions shown in table  1 . in these examples",
    "we assume there are holes to either side .      in the previous section",
    ", we showed that the set of winnable configurations in peg solitaire is recognizable by a finite - state automaton , i.e.  is a regular language .",
    "in contrast to this , for the two - player version we can show the following , at least in the multihop case :      let @xmath98 be the set of @xmath0-positions .",
    "since the nim - value of @xmath99 is @xmath100 , the intersection of @xmath98 with the regular language @xmath101 is @xmath102 to simplify our argument , we run this through a finite - state transducer which the reader can easily construct , giving @xmath103 it is easy to show that @xmath104 violates the pumping lemma for context - free languages @xcite by considering the word @xmath105 where @xmath106 , @xmath107 , and @xmath108 where @xmath33 is sufficiently large . since regular and context - free languages are closed under finite - state transduction and under intersection with a regular language , neither @xmath104 nor @xmath98 is regular or context - free .",
    "a more general argument applies to both @xmath98 and the set of @xmath109-positions @xmath110 .",
    "we define @xmath111 similarly to @xmath104 .",
    "now the parikh mapping , which counts the number of times each symbol appears in a word , sends any context - free language to a semilinear set @xcite .",
    "this implies that the set @xmath112 is eventually periodic .",
    "however , it is easy to see that this is @xmath113 suppose @xmath114 is eventually periodic with period @xmath115 , and let @xmath35 be sufficiently large that @xmath116 is both in the periodic part of @xmath114 and larger than @xmath117",
    ". then @xmath118 , but if @xmath119 then @xmath120 , while if @xmath121 then @xmath122 .",
    "this gives a contradiction , and since @xmath114 is not eventually periodic neither is its complement .",
    "thus neither @xmath98 nor @xmath123 is regular or context - free .",
    "we conjecture that theorem  [ multihop ] is true in the single - hop case as well .",
    "however , we have been unable to find a simple family of positions with arbitrarily large nim - values .",
    "the lexicographically first positions of various nim - values , which we found by computer search , are as follows :      it is striking that the first positions with nim - values @xmath125 and @xmath126 coincide on fairly large initial substrings ; this is most noticeable for @xmath127 and @xmath12 , which coincide for the first 17 symbols .",
    "we do not know if this pattern continues ; it would be especially interesting if some sub - family of these positions converged to an aperiodic sequence .    in any case , as of",
    "now it is an open question whether there are positions in single - hop peg duotaire with arbitrarily large nim - values .",
    "we conjecture that there are , and offer the following conditional result :      recall that a language is regular if and only if it has a finite number of equivalence classes , where we define @xmath128 and @xmath83 as equivalent if they can be followed by the same suffixes : @xmath129 if and only if @xmath130 .",
    "since @xmath131 if and only if @xmath132 and @xmath133 have the same nim - value by lemma  [ separationlemma ] , there is at least one equivalence class for every nim - value .",
    "in fact , a computer search for inequivalent initial strings shows that there are at least 225980 equivalence classes for each nim - value .",
    "since we can combine 1 , 2 , 4 , and 8 to get any nim - value between 0 and 15 , any deterministic finite automaton that recognizes the @xmath0-positions must have at least 3615680 states .",
    "we conjecture that single - hop peg duotaire is not described by a context - free language either",
    ". of course , there could still be polynomial - time strategies for playing either or both versions of the one - dimensional game .",
    "one approach might be a divide - and - conquer algorithm , based on the fact that a boundary between two sites can be hopped over at most four times : @xmath134 in two or more dimensions , it is tempting to think that either or both versions of peg duotaire are pspace - complete , since solitaire is np - complete @xcite .",
    "we thank elwyn berlekamp , aviezri fraenkel , michael lachmann , molly rose , b. sivakumar , and spootie the cat for helpful conversations , and the organizers of the 2000 msri workshop on combinatorial games ."
  ],
  "abstract_text": [
    "<S> we solve the problem of one - dimensional peg solitaire . </S>",
    "<S> in particular , we show that the set of configurations that can be reduced to a single peg forms a regular language , and that a linear - time algorithm exists for reducing any configuration to the minimum number of pegs .    </S>",
    "<S> we then look at the impartial two - player game , proposed by ravikumar , where two players take turns making peg moves , and whichever player is left without a move loses . </S>",
    "<S> we calculate some simple nim - values and discuss when the game separates into a disjunctive sum of smaller games . in the version where a series of hops can be made in a single move , we show that neither the @xmath0-positions nor the @xmath1-positions ( i.e.  wins for the previous or next player ) are described by a regular or context - free language . </S>"
  ]
}