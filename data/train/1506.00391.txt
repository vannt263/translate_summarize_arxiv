{
  "article_text": [
    "as ccn offers receiver - driven mode of communication , the distributed applications running on it needs to be modified from their usual sender - driven paradigm@xcite .",
    "checkpointing and rollback - recovery are well known techniques that allow processes to make progress in spite of failures@xcite .",
    "however , ccn is devoid of any such mechanism of failure recovery . keeping the above points in mind",
    ", we bring ccncheck which offers a sender - optimized way of running distributed applications .",
    "ccncheck also implements checkpointing for applications running on ccn .",
    "a typical distributed application in ccn is assumed to be running on multiple nodes and uses a common channel to send / receive interests and data .",
    "we further assume that :    1 .",
    "processes do not have any common clock/ memory .",
    "processes follow a fail - stop model of failing i.e. processes can crash by stopping execution and remain halted until restarted .    checkpoint is saved local state of a process . set of local states and messages in common channel is global state of a system . in checkpointing",
    ", every process takes a local checkpoint to ensure a global consistent state which can later be used to recover a system from failure@xcite . + our work is centered around using interests as notifications / signals in ccn .",
    "formally , a distributed system running on ccncheck works on following model :    1 .",
    "every node knows about other nodes running the same distributed application .",
    "every node is defined by a unique name which is pre - appended by the application name the process is running .",
    "the interest packet is not stored in the router s cache .",
    "the router only forwards the interest using its fib entry .      to run a sender - driven distributed application in ccn we use an approach very similar to solving hidden terminal problem in ieee 802.11 networks .",
    "the sender first issues a * request - to - send ( rts ) * interest to the desired destination process .",
    "this rts packet acts as a notification to destination about an incoming data .",
    "the name of rts contains the identifying name of its issuer using which the destination process issues a * clear - to - send ( cts ) * interest back to the sender .",
    "cts serves as the necessary interest required to send the data in ccn .",
    "figure [ fig:1 ] depicts process a sending some data to process b using ccncheck .",
    "ccncheck communication handler , scaledwidth=30.0% ]      distributed multi - threaded checkpoint ( dmtcp ) is a research - based , transparent , user - level checkpointing tool for distributed applications .",
    "dmtcp follows a blocking type algorithm of checkpointing to ensure a global consistent state at each checkpoint .",
    "it employs a stateless centralized coordinator to coordinate checkpoint requests between nodes@xcite .",
    "+ we have developed a plugin for dmtcp which enables it to work in ccn environment . even though ccn is deployed as an overlay on tcp / ip networks @xcite for which dmtcp works well , however , some more logical changes are necessary to make dmtcp function in ccn",
    ". we also formalize various inconsistent checkpoint scenarios due to uncoordinated checkpointing in ccn and devise a method to overcome such situations .",
    "some of the changes made are :    1 .",
    "dmtcp uses flush token to clear out tcp sockets during checkpoint process to ensure consistent checkpoint . as ccn works atop of interests and data packets ,",
    "we have designed a `` flush interest '' which ensures that checkpoint is consistent from any orphan interests and data .",
    "dmtcp coordinator is modified to detect a ccn network and register itself with ccn daemon on invoking .",
    "the coordinator is run as a stateless process with a name unique to the environment / organization .",
    "we have designed interest packets which is used by coordinator to checkpoint processes in the application .",
    "the restart from checkpoint process is able to resolve any non - responded interests due to lack of pending interest table ( pit ) entries .",
    "the discovery services in reconnect phase on restart from a checkpoint works using ccn namespaces .",
    "* system model * + ccncheck uses three layer abstraction model . 1 .",
    "* communication handler : * it handles the interest and data packets to be sent between communicating nodes .",
    "it is built on ccnx v0.8.2 .",
    "* checkpoint handler : * it provides the checkpoint mechanism in ccn and is based on dmtcp .",
    "* end - user applications : * these are applications to be run in a distributed environment",
    ". it can be in c / c++ language .",
    "* interest naming rules * + the naming format for rts and cts packets in ccnx are as follows : + ccnx://application name / receiver address / type of interest / sender address + the _ request - to - send _ and _ clear - to - send _ interests use signal name rts and cts respectively .",
    "the checkpoint interest , however , is only one - way notification ( i.e. from coordinator to process ) .",
    "thus , interest name does not have the sender s name appended to it and it is denoted by signal type check. similarly , _",
    "flush interest _ has a signal name flush but is appended with the last name of last interest sent figure [ fig:2 ] shows naming rules for ccncheck .",
    "* applications * + ccncheck was deployed on a test - bed of six interconnected nodes in ccn network .",
    "we have developed two sample distributed applications to review our system .",
    "we have also used an existing application to check the compatibility of our system . 1 .",
    "a simple c application which keeps counting till infinity is run locally on each node with different start times and is killed later .",
    "the goal was to check the consistency of checkpoint taken by ccncheck before failure .",
    "2 .   a distributed c++ application in which the participating nodes compute the consecutive numbers of fibonacci sequence in an iterative manner .",
    "this application utilizes the distributed capabilities of ccncheck to send the result to the next node after each subsequent computation .",
    "3 .   a ccn enabled vlc player which can stream videos on a content centric network .",
    "+ we are able to checkpoint all the applications listed above ."
  ],
  "abstract_text": [
    "<S> we consider the problem of checkpointing a distributed application efficiently in content centric networks so that it can withstand transient failures . </S>",
    "<S> we present ccncheck , a system which enables a sender optimized way of checkpointing distributed applications in ccn s and provides an efficient mechanism for failure recovery in such applications . </S>",
    "<S> ccncheck s checkpointing mechanism is a fork of dmtcp repository ccncheck is capable of running any distributed application written in c / c++ language . </S>"
  ]
}