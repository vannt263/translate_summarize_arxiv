{
  "article_text": [
    "answer set programming ( asp ) is a form of logic programming with a fully declarative semantics , centered around the notion of a stable model .",
    "syntactically , an asp program is a set of rules of the form @xmath0 where @xmath1 is true whenever @xmath2 is true .",
    "possibilistic asp ( pasp ) extends upon asp by associating a weight with every rule , which is interpreted as the necessity with which we can derive the head of the rule when the body is known to hold . semantics for pasp have been introduced in  @xcite for possibilistic normal programs and later extended to possibilistic disjunctive programs in  @xcite . under these semantics ,",
    "a  possibilistic rule with certainty  @xmath3 allows us to derive @xmath1 with certainty @xmath4 where @xmath5 denotes the necessity of the body , i.e.  the certainty of @xmath1 is restricted by the least certain piece of information in the derivation chain . specifically , to deal with pasp rules without negation - as - failure ,",
    "the semantics from  @xcite treat such rules as implications in possibilistic logic  @xcite . when faced with negation - as - failure , the semantics from  @xcite rely on the reduct operation from classical asp .",
    "essentially , this means that the weights associated with the rules are initially ignored , the classical reduct is determined and the weights are then reassociated with the corresponding rules in the reduct . given this particular treatment of negation - as - failure",
    ", the underlying intuition of ` @xmath6 ' is `` @xmath7 '' . indeed , as soon as ` @xmath8 ' can be derived with a certainty @xmath9 , ` @xmath8 ' is treated as true when determining the reduct . however , this particular understanding of negation - as - failure is not always the most intuitive one .    consider the following example .",
    "you want to go to the airport , but you notice that your passport will expire in less than three months .",
    "some countries require that the passport is at least valid for an additional three months on the date of entry . as  such , you have some certainty that your passport might be invalid ( @xmath10 ) .",
    "when you are not entirely certain that your passport is invalid , you should still go to the airport ( @xmath11 ) and check - in nonetheless .",
    "indeed , since you are not absolutely certain that you will not be allowed to board , you might still get lucky .",
    "we have the possibilistic program : @xmath12 where @xmath13 and @xmath14 are the weights associated with the rules ( @xmath15 ) and @xmath16 , respectively .",
    "clearly , what we would like to be able to conclude with a high certainty is that you need to go to the airport to check - in .",
    "however , as the semantics from  @xcite adhere to a different intuition of negation - as - failure , the conclusion is that you need to go to the airport with a necessity of @xmath17 . or , in other words",
    ", you should not go to the airport at all .    as a first contribution in this paper , we present new semantics for pasp by interpreting possibilistic rules as constraints on possibility distributions .",
    "these semantics do not correspond with the semantics from @xcite when considering programs with negation - as - failure .",
    "specifically , the semantics presented in this paper can be used in settings in which the possibilistic answer sets according to  @xcite do not correspond with the intuitively acceptable results .",
    "for the example mentioned above , the conclusion under the new semantics is that you need to go to the airport with a necessity of @xmath18 .",
    "in addition , the new semantics allow us to uncover a new characterization of asp in terms of possibility theory . over the years , many equivalent approaches have been proposed to define the notion of an answer set .",
    "one of the most popular characterizations is in terms of the gelfond - lifschitz reduct  @xcite in which an answer set is guessed and verified to be stable .",
    "this characterization is used in the semantics for pasp as presented in @xcite .",
    "alternatively , the answer set semantics of normal programs can be defined in terms of autoepistemic logic @xcite , a well - known non - monotonic modal logic .",
    "an  important advantage of the latter approach is that autoepistemic logic enjoys more syntactic freedom , which opens the door to more expressive forms of logic programming .",
    "however , as has been shown early on in  @xcite , the characterization in terms of autoepistemic logic does not allow us to treat classical negation or disjunctive rules in a natural way , which weakens its position as a candidate for generalizing asp from normal programs to e.g.  disjunctive programs .",
    "equilibrium logic  @xcite offers yet another way for characterizing and extending asp , but does not feature modalities which limits its potential for epistemic reasoning as it does not allow us to reason over the established knowledge of an agent .",
    "the new characterization of asp , as presented in this paper , is a characterization in terms of necessary and contingent truths , where possibility theory is used to express our certainty in logical propositions .",
    "such a characterization is unearthed by looking at asp as a special case of pasp in which the rules are certain and no uncertainty is allowed in the answer sets .",
    "it highlights the intuition of asp that the head of a rule is certain when the information encoded in its body is certain .",
    "furthermore , this characterization stays close to the intuition of the gelfond - lifschitz reduct , while sharing the explicit reference to modalities with autoepistemic logic .",
    "as a second contribution , we show in this paper how this new characterization of asp in terms of possibility theory can be used to uncover a new form of disjunction in both asp and pasp . as indicated , we have that the new semantics offer us an explicit reference to modalities , i.e.  operators with which we can qualify a statement .",
    "epistemic logic is an example of a modal logic in which we use the modal operator  @xmath19 to reason about knowledge , where @xmath19 is intuitively understood as `` _ _ we know that _ _ '' . a  statement such as @xmath20",
    "can then be treated in two distinct ways . on the one hand",
    ", we can interpret this statement as @xmath21 , which makes it explicit that we know that one of the disjuncts is true .",
    "this treatment corresponds with the understanding of disjunction in disjunctive asp and will be referred to as _",
    "strong disjunction_. alternatively , we can interpret @xmath20 as @xmath22 which only states that we know that the disjunction is true , i.e.  we do not know which of the disjuncts is true .",
    "we will refer to this form of disjunction as _",
    "weak disjunction_. this is the new form of disjunction that we will discuss in this paper , as it allows us to reason in settings where a choice can not or should not be made . still , such a framework allows for non - trivial forms of reasoning .",
    "consider the following example .",
    "a  scada ( supervisory control and data acquisition ) system is used to monitor the brewing of beer in an industrialised setting . to control the fermentation , the system regularly verifies an air - lock for the presence of bubbles .",
    "an absence of bubbles may be due to a number of possible causes .",
    "on the one hand there may be a production problem such as a low yeast count or low temperature . adding yeast when the temperature is low results in a beer with a strong yeast flavour , which should be avoided .",
    "raising the temperature when there is too little yeast present will kill off the remaining yeast and will ruin the entire batch . on the other hand , there may be technical problems .",
    "there may be a malfunction in the scada system , which can be verified by running a diagnostic .",
    "the operator runs a diagnostic ( @xmath23 ) , which reports back that there is no malfunction ( @xmath24 ) . or , alternatively , the air - lock may not be sealed correctly ( @xmath25 ) .",
    "the operator furthermore checks the temperature because he suspects that the temperature is the problem ( @xmath26 ) , but the defective temperature sensor returns no temperature when checked ( @xmath27 ) .",
    "these three technical problems require physical maintenance and the operator should send someone out to fix them . technical problems do not affect the brewing .",
    "as such , the brewing process should not be interrupted for such problems as this will ruin the current batch .",
    "if there is a production problem , however , the brewing process needs to be interrupted as soon as possible ( in addition , evidently , to interrupting the brewing process when the brewing is done ) .",
    "this prevents the current batch from being ruined due to over - brewing but also allows the interaction with the contents of the kettle .",
    "in particular , when the problem is diagnosed to be low yeast the solution is to add a new batch of yeast and restart the process .",
    "similarly , low temperature can be solved by raising the kettle temperature and restarting the fermentation process .",
    "obviously , the goal is to avoid ruining the current batch .",
    "an employer radios in that the seal is okay .",
    "we have the following program : @xmath28 the program above does not use the standard asp syntax since we allow for disjunction in the body .",
    "furthermore , the disjunction used in the head and the body is weak disjunction .",
    "the only information that we can therefore deduce from e.g.  the first rule is ( @xmath29 ) . at first , this new form of disjunction may indeed appear weaker that strong disjunction since it does not induce a choice . still , even without inducing a choice , conclusions obtained from other rules may allow us to refine our knowledge .",
    "in particular , note that from @xmath29 together with @xmath30 and @xmath31 we can entail @xmath32 .",
    "similarly , conclusions can also have prerequisites that are disjunctions .",
    "for example , we can no longer deduce @xmath33 since @xmath32 entails @xmath34 . from @xmath35 and @xmath27",
    "we can deduce that we should call maintenance .",
    "however , we do not yet have enough information to diagnose whether yeast should be added or whether the temperature should be raised .",
    "the unique answer set of this program , according to the semantics of weak disjunction which we present in section  [ sec : disjunction ] , is given by @xmath36    the expressiveness of weak disjunction becomes clear when we study its complexity . in  particular , we show that while most complexity results coincide with the strong disjunctive semantics , the complexity of brave reasoning ( deciding whether a literal ` @xmath8 ' is entailed by a consistent answer set of program  @xmath37 ) in absence of negation - as - failure is lower for weak disjunction . still , the expressiveness is higher than for normal programs .",
    "the complexity results are summarized in table  [ tbl : results - extra ] in section  [ sec : complexity ] .",
    "the remainder of this paper is organized as follows . in section  [ sec : background ]",
    "we provide the reader with some important notions from answer set programming and possibilistic logic . in section  [ sec : characterization ]",
    "we introduce new semantics for pasp which can furthermore be used to characterize normal asp programs using possibility theory . in section",
    "[ sec : disjunction ] we characterize disjunctive asp in terms of constraints on possibility distributions and we discuss the complexity results of the new semantics for pasp in detail in section  [ sec : complexity ] .",
    "related work is discussed in section  [ sec : related ] and we formulate our conclusions in section  [ sec : conclusions ] .",
    "this paper aggregates and extends parts of our work from  @xcite and substantially extends a previous conference paper  @xcite , which did not consider classical negation nor computational complexity .",
    "in addition , rather than limiting ourselves to atoms in this paper , we extend our work to cover the case of literals , which offer interesting and unexpected results in the face of weak disjunction .",
    "complexity results are added for all reasoning tasks and full proofs are provided in appendix .",
    "we start by reviewing the definitions from both answer set programming and possibilistic logic that will be used in the remainder of the paper .",
    "we then review the semantics of pasp from  @xcite , a framework that combines possibilistic logic and asp .",
    "finally , we recall some notions from complexity theory .      to define asp programs , we start from a finite set of atoms @xmath38 .",
    "literal _ is defined as an atom @xmath39 or its classical negation @xmath40 . for @xmath41 a set of literals , we use @xmath42 to denote the set @xmath43 where , by definition , @xmath44 . a set of literals @xmath41 is _ consistent _ if @xmath45 .",
    "we write the set of all literals as @xmath46 .",
    "a  _ naf - literal _ is either a literal ` @xmath8 ' or a literal ` @xmath8 ' preceded by @xmath47 , which we call the _ negation - as - failure operator_. intuitively , ` @xmath6 ' is true when we can not prove ` @xmath8 ' .",
    "an expression of the form @xmath48 with @xmath49 a literal for every @xmath50 , is called a _ disjunctive rule_.",
    "we call @xmath51 the _ head _ of the rule ( interpreted as a disjunction ) and @xmath52 the _ body _ of the rule ( interpreted as a conjunction ) . for a rule",
    "@xmath53 we use @xmath54 and @xmath55 to denote the set of literals in the head , _ resp . _  the body .",
    "specifically , we use @xmath56 to denote the set of literals in the body that are not preceded by the negation - as - failure operator ` @xmath47 ' and @xmath57 for those literals that are preceded by ` @xmath47 ' . whenever a disjunctive rule does not contain negation - as - failure , i.e.  when @xmath58 , we say that it is a _ positive _ disjunctive rule . a rule with an empty body , i.e.  a rule of the form ( @xmath59 ) ,",
    "is called a _ fact _ and is used as a shorthand for ( @xmath60 ) with @xmath61 a special language construct that denotes tautology . a rule with an empty head , i.e.  a rule of the form @xmath62 , is called a _ constraint rule _ and is used as a shorthand for the rule of the form ( @xmath63 ) with @xmath64 a special language construct that denotes contradiction .    a  ( positive ) disjunctive program @xmath37 is a set of ( positive ) disjunctive rules .",
    "a  _ normal rule _ is a disjunctive rule with at most one literal in the head .",
    "a  _ simple rule _ is a normal rule with no negation - as - failure .",
    "a  _ definite rule _ is a simple rule with no classical negation , i.e.  in which all literals are atoms .",
    "normal ( _ resp . _  simple , definite ) program _",
    "@xmath37 is a set of normal ( _ resp .",
    "_  simple , definite ) rules .",
    "the _ herbrand base _",
    "@xmath65 of a disjunctive program @xmath37 is the set of atoms appearing in  @xmath37 .",
    "we define the set of literals that are relevant for a disjunctive program @xmath37 as @xmath66 .",
    "an  _ interpretation _ @xmath67 of a disjunctive program @xmath37 is any set of literals @xmath68 .",
    "a _ consistent interpretation _",
    "@xmath67 is an interpretation @xmath67 that does not contain both @xmath39 and @xmath40 for some @xmath69 .",
    "a _ consistent interpretation _",
    "@xmath67 is said to be a _ model _ of a positive disjunctive rule @xmath53 if @xmath70 or @xmath71 , i.e.  the body is false or the head is true .",
    "in particular , a consistent interpretation @xmath67 is a _ model _ of a constraint rule @xmath53 if @xmath72 .",
    "if for an interpretation @xmath67 and a constraint rule @xmath53 we have that @xmath73 , then we say that the interpretation @xmath67 _ violates _ the constraint rule @xmath53 .",
    "notice that for a fact rule we require that @xmath70 , i.e.  at least one of the literals in the head must be true .",
    "indeed , otherwise @xmath67 would not be a model of @xmath53 .",
    "an  interpretation @xmath67 of a positive disjunctive program @xmath37 is a model of @xmath37 either if @xmath67 is consistent and for every rule @xmath74 we have that @xmath67 is a model of @xmath53 , or if @xmath75 .",
    "it follows from this definition that @xmath76 is always a model of @xmath37 , and that all other models of @xmath37 ( if any ) are consistent interpretations , which we will further on also refer to as _ consistent models_. we say that @xmath67 is an _ answer set _ of the positive disjunctive program @xmath37 when  @xmath67 is a minimal model of @xmath37 w.r.t .  set inclusion .",
    "the semantics of an asp program with negation - as - failure is based on the idea of a stable model  @xcite .",
    "the reduct @xmath77 of a disjunctive program @xmath37 w.r.t .",
    "the interpretation @xmath67 is defined as : @xmath78 an interpretation @xmath67 is said to be an answer set of the disjunctive program @xmath37 when @xmath67 is an answer set of the positive disjunctive program @xmath77 ( hence the notion of stable model ) .",
    "note that we can also write the disjunctive program @xmath37 as @xmath79 where @xmath80 is the set of constraint rules in @xmath37 .",
    "an interpretation @xmath67 then is an answer set of the disjunctive program @xmath37 when @xmath67 is an answer set of @xmath81 and @xmath67 is a model of @xmath80 , i.e.  @xmath67 does not violate any constraints in @xmath80 .",
    "whenever @xmath37 has _",
    "consistent answer sets _ , i.e.  answer sets that are consistent interpretations , we say that @xmath37 is a _",
    "consistent program_. when @xmath37 has the answer set @xmath76 , then this is the unique  @xcite inconsistent answer set and we say that @xmath37 is an _",
    "inconsistent program_.    answer sets of simple programs can also be defined in a more procedural way . by using the _ immediate consequence operator _ @xmath82 , which is defined for a simple program @xmath37 without constraint rules and w.r.t .",
    "an interpretation @xmath67 as : @xmath83    we use @xmath84 to denote the fixpoint which is obtained by repeatedly applying @xmath82 starting from the empty interpretation @xmath85 , i.e.  it is the least fixpoint of @xmath82 w.r.t .",
    "set inclusion .",
    "when the interpretation @xmath84 is consistent , @xmath84 is the ( unique and consistent ) answer set of the simple program p without constraint rules .",
    "when we allow constraint rules , an interpretation is a ( consistent ) answer set of @xmath79 iff @xmath67 is a ( consistent ) answer set of @xmath37 and @xmath67 is a model of @xmath80 . for both simple and normal programs , with or without constraint rules , we have that @xmath76 is the ( unique and inconsistent ) answer set of @xmath37 if @xmath37 has no consistent answer set(s ) .      an interpretation in possibilistic logic corresponds with the notion of an interpretation in propositional logic .",
    "we represent such an interpretation as a set of atoms @xmath86 , where @xmath87 if @xmath88 and @xmath89 otherwise with @xmath90 the satisfaction relation from classical logic .",
    "the set of all interpretations is defined as @xmath91 , with @xmath38 a finite set of atoms . at the semantic level ,",
    "possibilistic logic  @xcite is defined in terms of a _ possibility distribution _",
    "@xmath92 on the universe of interpretations . a possibility distribution , which is an @xmath93 $ ] mapping , encodes for each interpretation ( or world ) @xmath86 to what extent it is plausible that @xmath86 is the actual world . by  convention",
    ", @xmath94 means that  @xmath86 is impossible and @xmath95 means that no available information prevents  @xmath86 from being the actual world .",
    "a possibility distribution @xmath92 is said to be _ normalized _ if @xmath96 , i.e.  at least one interpretation is entirely plausible .",
    "we say that a possibility distribution @xmath92 is _ vacuous _ when @xmath97 . note that possibility degrees are mainly interpreted qualitatively : when @xmath98 , @xmath86  is  considered more plausible than  @xmath99 . for two possibility distributions @xmath100 and @xmath101 with the same domain @xmath102 we write @xmath103 when @xmath104 and we write @xmath105 when @xmath103 and @xmath106 .",
    "a possibility distribution @xmath92 induces two uncertainty measures that allow us to rank propositions .",
    "the _ possibility measure _",
    "@xmath107 is defined by  @xcite : @xmath108 and evaluates the extent to which a proposition @xmath109 is consistent with the beliefs expressed by @xmath92 .",
    "the dual _ necessity measure _ @xmath110 is defined by : @xmath111 and evaluates the extent to which a proposition @xmath109 is entailed by the available beliefs  @xcite .",
    "note that we always have @xmath112 for any possibility distribution , while @xmath113 ( and , related , @xmath114 ) only holds when the possibility distribution is normalized ( i.e.  only normalized possibility distributions can express consistent beliefs )  @xcite . to identify the possibility / necessity measure associated with a specific possibility distribution @xmath115",
    ", we will use a subscript notation , i.e.  @xmath116 and @xmath117 are the corresponding possibility and necessity measure , respectively .",
    "we omit the subscript when the possibility distribution is clear from the context .",
    "an important property of necessity measures is the min - decomposability property w.r.t .",
    "conjunction : @xmath118 for all propositions @xmath109 and @xmath119 .",
    "however , for disjunction only the inequality @xmath120 holds .",
    "as possibility measures are the dual measures of necessity measures , they have the property of max - decomposability w.r.t .",
    "disjunction , whereas for the conjunction only the inequality @xmath121 holds .    at the syntactic level , a _",
    "possibilistic knowledge base _",
    "consists of pairs @xmath122 where @xmath109 is a propositional formula and @xmath1230,1]$ ] expresses the certainty that @xmath109 is the case . formulas of the form @xmath124 are not explicitly represented in the knowledge base since they encode trivial information .",
    "a  formula @xmath122 is interpreted as the constraint @xmath125 , i.e.  a possibilistic knowledge base @xmath126 corresponds to a set of constraints on possibility distributions .",
    "typically , there can be many possibility distributions that satisfy these constraints . in practice",
    ", we are usually only interested in the _ least specific possibility distribution _ , which is the possibility distribution that makes minimal commitments , i.e.  the greatest possibility distribution w.r.t .",
    "the ordering  @xmath127 defined above .",
    "such a least specific possibility distribution always exists and is unique  @xcite .    in section  [ sec : disjunction ]",
    "we will also consider constraints that deviate from the form of constraints we just discussed . as a result",
    ", there can be multiple minimally specific possibility distributions rather than a unique least specific possibility distribution . to increase the uniformity throughout the paper we immediately start using the concept of a _ minimally specific possibility distribution _ , which is a maximal possibility distribution w.r.t .",
    "the ordering @xmath127 , even though the distinction between the least specific possibility distribution and minimally specific possibility distributions only becomes relevant once we discuss the characterization of disjunctive programs .",
    "possibilistic asp ( pasp )  @xcite combines asp and possibility theory by associating a weight with each rule , where the weight denotes the necessity with which the head of the rule can be concluded given that the body is known to hold . if it is uncertain whether the body holds , the necessity with which the head can be derived is the minimum of the weight associated with the rule and the degree to which the body is necessarily true .",
    "syntactically , a possibilistic disjunctive ( _ resp . _  normal",
    ", simple , definite ) program is a set of pairs @xmath128 with  @xmath53 a disjunctive ( _ resp .",
    "_  normal , simple , definite ) rule and @xmath1290,1]$ ] a certainty associated with @xmath53 .",
    "possibilistic rules with @xmath130 are generally omitted as only trivial information can be derived from them .",
    "we will also write a possibilistic rule @xmath128 with @xmath53 a disjunctive rule of the form @xmath131 as : @xmath132 for a possibilistic rule @xmath128 we use @xmath133 to denote @xmath53 , i.e.  the classical rule obtained by ignoring the certainty .",
    "similarly , for a possibilistic program @xmath37 we use @xmath134 to denote the set of rules @xmath135 .",
    "the set of all weights found in a possibilistic program @xmath37 is denoted by @xmath136 .",
    "we will also use the extended set of weights @xmath137 , defined as @xmath138 .",
    "semantically , pasp is based on a generalization of the concept of an interpretation . in  classical asp",
    ", an interpretation can be seen as a mapping @xmath139 , i.e.  a literal @xmath140 is either true or false .",
    "this notion is generalized in pasp to a _",
    "valuation _ , which is a function @xmath141}}}$ ] .",
    "the underlying intuition of @xmath142 is that the literal ` @xmath8 ' is true with certainty ` @xmath3 ' , which we will also write in set notation as @xmath143 . as such",
    ", a valuation corresponds with the set of constraints @xmath144 .",
    "note that , like interpretations in asp , these valuations are of an epistemic nature , i.e.  they reflect what we know about the truth of atoms . for notational convenience , we often also use the set notation @xmath145 . in  accordance with this set notation",
    ", we write @xmath146 to denote the valuation in which each literal is mapped to @xmath17 . for @xmath147",
    "$ ] a certainty and @xmath148 a valuation , we use @xmath149 to denote the classical projection @xmath150 .",
    "we also use @xmath151 , i.e.  those literals that can be derived to be true with certainty strictly greater than ` @xmath3 ' .",
    "a valuation is said to be _ consistent _ when @xmath152 is consistent .",
    "in such a case , there always exists a normalized possibility distribution @xmath153 such that @xmath154 .",
    "we now present a straightforward extension of the semantics for pasp introduced in  @xcite .",
    "let the @xmath3-cut @xmath155 of a possibilistic program @xmath37 , with @xmath147 $ ] , be defined as : @xmath156 i.e.  the rules in @xmath37 with an associated certainty higher than or equal to ` @xmath3 ' .",
    "[ def : nicolas : immediate ] let @xmath37 be a possibilistic simple program and @xmath148 a valuation .",
    "the immediate consequence operator @xmath82 is defined as : @xmath157}\\mid{v^\\lambda \\models { { { \\ensuremath{l_{1}, ... ,l_{m } } } } } \\text { and } ( { { \\ensuremath{l_0 \\leftarrow { { { { \\ensuremath{l_{1}, ... ,l_{m } } } } } } } } } ) \\in p_\\lambda}\\right\\}}}}.\\ ] ]    the intuition of definition  [ def : nicolas : immediate ] is that we can derive the head only with the certainty of the weakest piece of information , i.e.  the necessity of the conclusion is restricted either by the certainty of the rule itself or the lowest certainty of the literals used in the body of the rule .",
    "note that the immediate consequence operator defined in definition  [ def : nicolas : immediate ] is equivalent to the one proposed in  @xcite , although we formulate it somewhat differently . also , the work from  @xcite only considered definite programs , even though adding classical negation does not impose any problems .",
    "as before , we use @xmath158 to denote the fixpoint obtained by repeatedly applying @xmath82 starting from the minimal valuation @xmath146 , i.e.  the least fixpoint of @xmath82 w.r.t .",
    "set inclusion .",
    "a valuation @xmath148 is said to be the answer set of a possibilistic simple program if @xmath159 and @xmath148 is consistent .",
    "answer sets of possibilistic normal programs are defined using a reduct .",
    "let @xmath41 be a set of literals .",
    "the reduct @xmath160 of a possibilistic normal program is defined as  @xcite : @xmath161 a consistent valuation @xmath148 is said to be a possibilistic answer set of the possibilistic normal program @xmath37 iff @xmath162 , i.e.  if @xmath148 is the answer set of the reduct @xmath163 .",
    "[ ex : abnormal]consider the possibilistic normal program @xmath37 from the introduction : @xmath12 it is easy to verify that @xmath164 is a possibilistic answer set of @xmath37 .",
    "indeed , @xmath165 is the set of rules : @xmath166 from which it trivially follows that @xmath167 .",
    "the conclusion is thus that we do not need to go to the airport , which differs from our intuition of the problem .",
    "we will revisit this example in example  [ ex : airport : again ] in section  [ sec : characterizing : normal ] .",
    "the semantics we presented allow for classical negation , even though this was not considered in  @xcite .",
    "however , adding classical negation does not impose any problems and could , as an alternative , easily be simulated in asp  @xcite .",
    "finally , we recall some notions from complexity theory .",
    "the complexity classes @xmath168 and @xmath169 are defined as follows  @xcite : @xmath170 where @xmath171 is the class of problems that can be solved in polynomial time on a non - deterministic machine with an @xmath172  oracle , i.e.  assuming a procedure that can solve @xmath172  problems in constant time .",
    "we also consider the complexity class @xmath173  @xcite , which is the class of all languages @xmath41 such that @xmath174 , where @xmath175 is in @xmath172  and @xmath176 is in @xmath177 . for a general complexity class @xmath178 ,",
    "a problem is @xmath178-hard if any problem in @xmath179  can be polynomially reduced to this problem .",
    "a problem is said to be @xmath179-complete if the problem is in @xmath179  and the problem is @xmath179-hard .",
    "deciding the validity of a quantified boolean formula ( qbf ) @xmath180 with @xmath181 in disjunctive normal form ( dnf ) is the canonical @xmath182-complete problem .",
    "the decision problems we consider in this paper are brave reasoning ( deciding whether a literal ` @xmath8 ' ( clause ` @xmath183 ' ) is entailed by a consistent answer set of program @xmath37 ) , cautious reasoning ( deciding whether a literal ` @xmath8 ' ( clause ` @xmath183 ' ) is entailed by every consistent answer set of a program @xmath37 ) and answer set existence ( deciding whether a program @xmath37 has a consistent answer set ) .",
    "brave reasoning as well as answer set existence for simple , normal and disjunctive programs is @xmath184-complete , @xmath185-complete and @xmath186-complete , respectively  @xcite .",
    "cautious reasoning for simple , normal and disjunctive programs is @xmath184-complete , @xmath177-complete and @xmath187-complete  @xcite .",
    "asp lends itself well to being characterized in terms of modalities . for instance",
    ", asp can be characterized in autoepistemic logic by interpreting ` @xmath188 ' as the epistemic formula @xmath189 ( `` @xmath39 is not believed '' )  @xcite . in this paper , as an alternative , we show how asp can be characterized within possibility theory .",
    "to arrive at this characterization , we first note that asp is essentially a special case of pasp in which every rule is certain . as such",
    ", we will show how pasp can be characterized within possibility theory .",
    "this characterization does not coincide with the semantics proposed in  @xcite for pasp , as the semantics from  @xcite rely on the classical gelfond - lifschitz reduct .",
    "rather , the semantics that we propose for pasp adhere to a different intuition of negation - as - failure . a  characterization of asp",
    "is then obtained from these new semantics by considering the special case in which all rules are entirely certain .",
    "this characterization of asp , while still in terms of modalities , stays close in spirit to the gelfond - lifschitz reduct .",
    "in contrast to the characterization in terms of autoepistemic logic it does not require a special translation of literals to deal with classical negation and disjunction .",
    "the core idea of our characterization is to encode the meaning of each rule as a constraint on possibility distributions .",
    "particular minimally specific possibility distributions that satisfy all the constraints imposed by the rules of a program will then correspond to the answer sets of that program .    in this section , we first limit our scope to possibilistic simple programs ( section  [ sec : characterizing : simple ] ) . afterwards",
    "we will broaden the scope and also consider possibilistic normal programs ( section  [ sec : characterizing : normal ] ) .",
    "the most general case , in which we also consider possibilistic disjunctive programs , will be discussed in section  [ sec : disjunction ] .",
    "when considering a fact , i.e.  a rule of the form @xmath190 , we know by definition that this rule encodes that the literal in the head is necessarily true , i.e.  @xmath191 . if we attach a weight to a fact , then this expresses the knowledge that we are not entirely certain of the conclusion in the head , i.e.  for a possibilistic rule @xmath192 we have that @xmath193 .",
    "note that the constraint uses @xmath194 , as there may be other rules in the program that allow us to deduce @xmath195 with a greater certainty .    in a similar fashion",
    "we can characterize a rule of the form ( @xmath196 ) as the constraint @xmath197 which is equivalent to the constraint @xmath198 due to the min - decomposability property of the necessity measure .",
    "indeed , the intuition of such a rule is that the head is only necessarily true when every part of the body is true .",
    "when associating a weight with a rule , we obtain the constraint @xmath199 for a possibilistic rule @xmath192 with @xmath200 .",
    "similarly , to characterize a constraint rule , i.e.  a rule of the form @xmath201 , we use the constraint @xmath202 , or , in the possibilistic case with @xmath192 , the constraint @xmath203 .",
    "[ def : constraintssimple ] let @xmath37 be a possibilistic simple program and @xmath204}}$ ] a possibility distribution .",
    "for every @xmath205 , the constraint @xmath206 imposed by @xmath128 with @xmath1290,1]$ ] , @xmath200 and @xmath207 is given by @xmath208 @xmath209 is the set of constraints imposed by program @xmath37 .",
    "if @xmath92 satisfies the constraints in @xmath210 , @xmath92 is said to be a possibilistic model of @xmath210 , written @xmath211 . a possibilistic model of @xmath210 will also be called a possibilistic model of @xmath37 .",
    "we write @xmath212 for the set of all minimally specific possibilistic models of @xmath37 .",
    "let @xmath37 be a possibilistic simple program .",
    "let @xmath92 be a minimally specific model  of  @xmath37 , i.e.  @xmath213 .",
    "then @xmath214 is called a _ possibilistic answer set _  of  @xmath37 .",
    "consider the possibilistic simple program @xmath37 with the rules : @xmath215 the set @xmath210 consists of the constraints : @xmath216 it is easy to see that the last constraint is trivial and can be omitted and that the other constraints can be simplified to @xmath217 , @xmath218 and @xmath219 .",
    "the least specific possibility distribution that satisfies these constraints is given by : @xmath220 by definition , since the possibility distribution @xmath92 satisfies the given constraints , is a possibilistic model .",
    "furthermore , it is easy to see that @xmath92 is the unique minimally specific possibilistic model ( due to least specificity ) .",
    "we can verify that @xmath221 since we have that @xmath222 and that @xmath223 since @xmath224 .",
    "furthermore it is easy to verify that @xmath225 , @xmath226 and @xmath227 .",
    "hence we find that @xmath228 is a possibilistic answer set of @xmath37 .",
    "in particular , when we consider all the rules to be entirely certain , i.e.  @xmath229 , the results are compatible with the semantics of classical asp .",
    "consider the program @xmath230 .",
    "the set of constraints @xmath210 is given by @xmath231 and @xmath232 .",
    "the first constraint can be rewritten as @xmath233 , i.e.  as @xmath234 .",
    "the last constraint can be rewritten as @xmath235 , i.e.  as @xmath236 .",
    "given these two constraints , we find that @xmath212 contains exactly one element , which is defined by @xmath237 notice how the first constraint turned out to be of no relevance for this particular example . indeed",
    ", due to the principle of minimal specificity and since there is nothing that prevents @xmath238 , we find that @xmath239 .",
    "therefore the first constraint simplifies to @xmath240 .",
    "once more , due to the principle of minimal specificity we thus find that @xmath241 as there is no information that prevents @xmath242 . to find out whether @xmath243 , @xmath40 and @xmath244 are necessarily true w.r.t .",
    "the least specific possibility distribution @xmath213 arising from the program , we verify whether @xmath245 , @xmath246 , @xmath247 and @xmath248 , respectively , with @xmath110 the necessity measure induced by the unique least specific possibility distribution @xmath213 . as desired , we find that @xmath249 whereas @xmath250 .",
    "the unique possibilistic answer set is therefore @xmath251 .",
    "as we will see , it then follows from proposition  [ prop : possiblitydefiniteanswerseta ] that the unique classical answer set of @xmath37 is @xmath252 .",
    "in propositions  [ prop : possiblitydefiniteanswerseta ]  and  [ prop : possiblitydefiniteanswersetb ] , below , we prove that this is indeed a correct characterization of simple programs .",
    "first , we present a technical lemma .    [",
    "lem : constraints : equivalent ] let @xmath41 be a set of literals , @xmath253 a consistent set of literals and let the possibility distribution @xmath92 be defined as @xmath95 if @xmath254 and @xmath255 otherwise",
    ". then @xmath256 .",
    "the proof is given in the online appendix of the paper , pp . 12 .",
    "[ prop : possiblitydefiniteanswerseta ] let @xmath37 be a simple program . if @xmath213 then either the unique consistent answer set of @xmath37 is given by @xmath257 or @xmath92 is the vacuous distribution , in which case @xmath37 does not have any consistent answer sets .    the proof is given in the online appendix of the paper , pp . 24 .",
    "[ prop : possiblitydefiniteanswersetb ] let @xmath37 be a simple program .",
    "if @xmath258 is an answer set of @xmath37 then the possibility distribution @xmath92 defined by @xmath95 iff @xmath254 and @xmath259 otherwise belongs  to  @xmath212 .",
    "the proof is given in the online appendix of the paper , pp .",
    "4 .      to deal with negation - as - failure , we rely on a reduct - style approach in which a valuation is guessed and it is verified whether this guess is indeed stable .",
    "the approach taken in  @xcite to deal with negation - as - failure is to guess an interpretation and verify whether this guess is stable .",
    "we propose to treat a rule of the form @xmath260 as the constraint @xmath261 where @xmath148 is the guess for the valuation and where we assume @xmath262 .",
    "or , when we consider a possibilistic rule @xmath192 , we treat it as the constraint @xmath263    we like to make it clear to the reader that the characterization of normal programs in terms of constraints on possibility distributions in its basic form is little more than a reformulation of the gelfond - lifschitz approach .",
    "the key difference is that this characterization can be used to guess the certainty with which we can derive particular literals from the available rules , rather than guessing what may or may not be derived from it .",
    "nevertheless , this difference plays a crucial role when dealing with uncertain rules .",
    "in particular , this characterization of pasp does not coincide with the semantics of  @xcite and adheres to a different intuition for negation - as - failure .",
    "[ def : semantics ]",
    "let @xmath37 be a possibilistic normal program and let @xmath148 be a valuation . for every @xmath264 ,",
    "the constraint @xmath265 induced by @xmath266 with @xmath2670,1]$ ] , @xmath268 and @xmath148 is given by @xmath269 @xmath270 is the set of constraints imposed by program @xmath37 and valuation @xmath148 , and @xmath271 is the set of all minimally specific possibilistic models of @xmath272 .",
    "[ def : possibilisticanswerset ] let @xmath37 be a possibilistic normal program and let @xmath148 be a valuation .",
    "let @xmath273 be such that @xmath274 then @xmath275 is called a possibilistic answer set of @xmath37 .",
    "[ ex : airport : again ] consider the possibilistic normal program @xmath37 from example  [ ex : abnormal ] .",
    "the constraints @xmath210 induced by @xmath37 are : @xmath276 from the first constraint it readily follows that we need to choose @xmath277 to comply with the principle of minimal specificity . the other constraint",
    "can then readily be simplified to : @xmath278 hence it follows that @xmath279 is the unique possibilistic answer set of @xmath37 .",
    "it is easy to see that the proposed semantics remain closer to the intuition of the possibilistic normal program discussed in the introduction .",
    "indeed , we conclude with a high certainty that we need to go to the airport .    still , it is interesting to further investigate the particular relationship between the semantics for pasp as proposed in  @xcite and the semantics presented in this section .",
    "let the possibilistic rule @xmath53 be of the form : @xmath132 when we determine the reduct w.r.t .",
    "a  valuation  @xmath148 of the possibilistic program containing @xmath53 , then the certainty of the rule in the reduct that corresponds with @xmath53 can be verified to be : @xmath280 with @xmath281 a fuzzy negator , i.e.  where @xmath281 is a decreasing function with @xmath282 and @xmath283 . in particular , for the semantics of  @xcite we have that @xmath281 is the gdel negator  @xmath284 , defined as @xmath285 and @xmath286 with @xmath287 . in  the  semantics for pasp presented in this section , @xmath281 is the ukasiewicz negator @xmath288 with @xmath289 .",
    "thus , for a rule such as : @xmath290 and a valuation @xmath291 we obtain under the approach from  @xcite the reduct @xmath292 , whereas under our approach we obtain the constraint @xmath293 , which can be encoded by the rule @xmath294 .",
    "essentially , the difference between both semantics can thus be reduced to a difference in the choice of negator .",
    "however , even though the semantics share similarities , there is a notable difference in the underlying intuition of both approaches .",
    "specifically , in the semantics presented in this paper , we have that ` @xmath6 ' is understood as `` _ _ the degree to which ` @xmath295 ' is possible _ _ '' , or , equivalently , `` _ _ the degree to which it is not the case that we can derive ` @xmath8 ' with certainty _ _ '' .",
    "this contrasts with the intuition of ` @xmath6 ' in  @xcite as a boolean condition and understood as `` _ _ we can not derive ` @xmath8 ' with a strictly positive certainty _ _ '' .",
    "interestingly , we find that the complexity of the main reasoning tasks for possibilistic normal programs remains at the same level of the polynomial hierarchy as the corresponding normal asp programs .",
    "while we will see in section  [ sec : complexity ] that the complexity of possibilistic normal programs remains unchanged compared to classical normal programs , it is important to note that under the semantics proposed in this section there is no longer a 1-on-1 mapping between the classical answer sets of a normal program and the possibilistic answer sets . indeed ,",
    "if we consider a possibilistic normal program constructed from a classical normal program where we attach certainty @xmath229 to each rule , then we can sometimes obtain additional intermediary answer sets .",
    "consider the next example :    [ ex : extras ] consider the normal program with the single rule @xmath296 .",
    "this program has no classical answer sets .",
    "now consider the possibilistic normal program @xmath37 with the rule @xmath297 the set of constraints @xmath298 is given by @xmath299 this constraint can be rewritten as @xmath300 we thus find that the set @xmath301 is a singleton with @xmath302 defined by @xmath303 and @xmath304 .",
    "we can now establish for which choices of @xmath305 it holds that @xmath306 : @xmath307 and thus , since @xmath308 , we have @xmath309 . the unique possibilistic answer set of @xmath37 is therefore @xmath310 . in the same way",
    ", one may verify that the program @xmath311 has an infinite number of possibilistic answer sets , i.e. @xmath312 for every @xmath313}$ ] .",
    "for practical purposes , however , this behavior has a limited impact as we only need to consider a finite number of certainty levels to perform brave / cautious reasoning .",
    "indeed , we only need to consider the certainties used in the program , their complement to account for negation - as - failure and @xmath314 to account for the intermediary value as in example  [ ex : extras ] .",
    "thus , for the main reasoning tasks it suffices to limit our attention to the certainties from the set @xmath137 .",
    "we now show that when we consider rules with an absolute certainty , i.e.  classical normal programs , we obtain a correct characterization of classical asp , provided that we restrict ourselves to absolutely certain conclusions , i.e.  valuations @xmath148 for which it holds that @xmath315 .",
    "[ ex : constraints ] consider the program @xmath37 with the rules @xmath316 the set @xmath271 then contains exactly one element , which is defined by @xmath317 note that this possibility distribution is independent of the choice for @xmath305 and @xmath318 since there are no occurrences of ` @xmath188 ' and ` @xmath319 ' in @xmath37 .",
    "it remains then to determine for which choices of @xmath320 it holds that @xmath321 , i.e.  for which the guess @xmath320 is stable .",
    "we have : @xmath322 and thus we find that @xmath323 .",
    "we have @xmath324 , @xmath325 and @xmath326 .",
    "as we will see in the next propositions , the unique answer set of @xmath37 is therefore @xmath327 .",
    "[ prop : possiblitynormalanswerset ] let @xmath37 be a normal program and @xmath148 a valuation .",
    "let @xmath273 be such that @xmath328 then @xmath257 is an answer set of the normal program @xmath37 .",
    "this proposition is a special case of proposition  [ prop : disjunctivepossibilistic ] presented below .",
    "note that the requirement stated in can not be omitted .",
    "let us consider example  [ ex : extras ] , in which we considered the normal program @xmath329 .",
    "this normal program @xmath37 has no classical answer sets .",
    "the constraint that corresponds with the rule @xmath330 is @xmath331 . for a choice of @xmath332",
    ", however , we would find that @xmath306 and thus that @xmath148 is an answer set of @xmath37 if we were to omit this requirement .",
    "[ prop : normalanswersetpossibility ] let @xmath37 be a normal program . if @xmath258 is an answer set of @xmath37 , there is a valuation @xmath148 , defined by @xmath333 if @xmath334 and @xmath335 otherwise , and a possibility distribution @xmath336 such that for every @xmath140 we have @xmath337 ( i.e.  @xmath338 if @xmath334 and @xmath339 otherwise ) .",
    "this proposition is a special case of proposition  [ prop : possibilisticdisjunctive ] presented below .",
    "we like to point out to the reader that we could try to encode the information in a rule in such a way that we interpret ` @xmath188 ' as @xmath340 , which closely corresponds to the intuition of negation - as - failure . indeed ,",
    "when it is completely possible to assume that ` @xmath40 ' is true , then surely ` @xmath188 ' is true . under this encoding ,",
    "however , we run into a significant problem .",
    "consider the rules ( @xmath341 ) and ( @xmath342 ) .",
    "these rules would then correspond with the constraints @xmath343 and @xmath344 , respectively .",
    "notice though that both constraints can be rewritten as the constraint @xmath345 .",
    "this would imply that both rules are semantically equivalent in asp , which is clearly not the case .",
    "hence we can not directly encode ` @xmath188 ' as @xmath340 and guessing a valuation is indeed necessary since without the guess @xmath148 we would not be able to obtain a unique set of constraints . as we have shown this only affects literals preceded by negation - as - failure and we can continue to interpret a literal ` @xmath346 ' as @xmath347 .",
    "we now turn our attention to how we can characterize disjunctive rules .",
    "we found in section  [ sec : characterization ] that we can characterize a rule of the form @xmath348 as the constraint @xmath349 , or , similarly , that we can characterize a possibilistic rule @xmath192 as the constraint @xmath350 .",
    "such a characterization works particularly well due the min - decomposability w.r.t .",
    "conjunction . indeed , since the body of e.g.  a simple rule @xmath351 is a conjunction of literals we can write @xmath352 .",
    "then @xmath5 can be rewritten as @xmath353 , which allows for a straightforward simplification . in a similar fashion , for a positive disjunctive rule @xmath354 we can readily write @xmath5 as @xmath355",
    ". we would furthermore like to simplify @xmath356 with @xmath357 .",
    "however , we do not have that @xmath358 .",
    "indeed , in general we only have that @xmath359 .",
    "this means that we can either choose to interpret the head as @xmath360 or @xmath361 . in particular , a _ possibilistic disjunctive rule _ @xmath192 with @xmath362 can either be interpreted as the constraint @xmath363 which we will call the _",
    "strong _ interpretation of disjunction , or as the constraint @xmath364 which we will call the _ weak _ interpretation of disjunction . in the remainder of this paper , we syntactically differentiate between both approaches by using the notation @xmath51 and @xmath365 to denote the strong and the weak interpretation of disjunction , respectively .",
    "the choice of how to treat disjunction is an important one that crucially impacts the nature of the resulting answer sets .",
    "for example , the non - deterministic nature of strong disjunction provides a useful way to generate different ( candidate ) solutions , whereas weak disjunction is oftentimes better suited when we are interested in modelling the epistemic state of an agent since it amounts to accepting the disjunction as being true rather than making a choice of which disjunct to accept . in this section",
    "we consider both characterizations ; the characterization of disjunction as is discussed in section  [ sec : disjunction : strong ] and in section  [ sec : disjunction : weak ] we discuss the characterization as . in particular we will show that the first characterization of disjunction corresponds to the semantics of disjunction found in asp whereas the boolean counterpart of the second characterization has , to the best of our knowledge ,",
    "not yet been studied in the literature .",
    "we first consider the characterization of disjunction in which we treat a disjunction of the form ` @xmath51 ' as @xmath366 .",
    "as it turns out , under these strong possibilistic semantics the disjunction behaves as in classical asp .",
    "[ def : strong ] let @xmath37 be a possibilistic disjunctive program and let @xmath148 be a valuation .",
    "for every possibilistic disjunctive rule @xmath192 with @xmath1290,1]$ ] and @xmath367 the constraint @xmath368 induced by @xmath109 and @xmath148 is given by @xmath369 @xmath370 is the set of constraints imposed by program @xmath37 and @xmath148 , and @xmath371 is the set of all minimally specific possibilistic models of @xmath372 .",
    "whenever @xmath37 is a positive disjunctive program , i.e.  whenever @xmath37 is a disjunctive program without negation - as - failure , is independent of @xmath148 and we simplify the notation to @xmath373 and @xmath374 .",
    "notice that , unlike in possibilistic logic where a unique least specific possibility distribution exists because of the specific form of the considered constraints , the constraint of the form can give rise to multiple minimally specific possibility distributions of which some will correspond with answer sets .",
    "indeed , the program @xmath375 induces the constraint @xmath376 , which has two minimally specific possibility distributions , yet no least specific possibility distribution .",
    "indeed , we have the minimally specific possibility distributions @xmath377 defined by @xmath378    [ def : possibilisticanswersetdisjunctive ] let @xmath37 be a possibilistic disjunctive program and let @xmath148 be a valuation .",
    "let @xmath379 be such that @xmath274 then @xmath275 is called a possibilistic answer set of @xmath37 .",
    "we now further illustrate the semantics and the underlying intuition by considering a possibilistic disjunctive program in detail .",
    "consider the possibilistic ( positive ) disjunctive program @xmath37 with the following rules : @xmath380 the constraints @xmath381 induced by this program are : @xmath382 from the first constraint it follows that we either need to choose @xmath383 or @xmath384 , in accordance with the principal of minimal specificity .",
    "hence , we either obtain @xmath385 or @xmath386 . as such we find that the two unique possibilistic answer sets of @xmath37 are @xmath387 and @xmath388 .    as before , if we restrict ourselves to rules that are entirely certain we obtain a characterization of disjunctive programs in classical asp .",
    "[ ex : strong ] consider the program @xmath37 with the rules @xmath389 intuitively , the first constraint induces a choice . to satisfy this constraint ,",
    "we need to take either @xmath390 or @xmath391 . depending on our choice",
    ", we can consider two possibility distributions .",
    "the possibility distribution @xmath100 is the least specific possibility distribution that satisfies the constraints @xmath390 and @xmath392 , whereas @xmath101 is the least specific possibility distribution satisfying the constraints @xmath391 and @xmath392 : @xmath393 and @xmath394 it is clear that the possibility distribution @xmath101 can not be minimally specific w.r.t .  the constraints @xmath395 and @xmath392 since @xmath396 and @xmath397 for all other interpretations @xmath86 .",
    "we thus have that @xmath374 only contains a single element , namely @xmath100 .",
    "with @xmath110 the necessity measure induced by @xmath100 we obtain @xmath390 and @xmath241 .",
    "as will follow from proposition  [ prop : disjunctivepossibilistic ] and [ prop : possibilisticdisjunctive ] the unique answer set of @xmath37 is therefore @xmath398 .",
    "let us now add the rule ( @xmath399 ) to @xmath37 .",
    "notice that in classical asp this extended program has no answer sets .",
    "the set of constraints @xmath372 is given by : @xmath400 this new constraint , intuitively , tells us that ` @xmath346 ' must necessarily be true , since we force it to be true whenever it is not true .",
    "note , however , that the act of making ` @xmath346 ' true effectively removes the motivation for making it true in the first place .",
    "as  expected , we can not find any minimally specific possibilistic model that agrees with the constraints imposed by @xmath37 and @xmath148 such that @xmath401 .",
    "the problem has to do with our choice of @xmath320 .",
    "if we take @xmath402 then the constraint imposed by the first rule still forces us to choose either @xmath390 or @xmath403 due to the interplay with the constraint imposed by the second rule .",
    "however , @xmath371 contains only one minimally specific possibility distribution , namely the one with @xmath390 .",
    "hence @xmath404 .",
    "if we take @xmath405 then the last rule forces @xmath391 . hence @xmath406 .",
    "now that we have clarified the intuition , we can formalize the connection between the strong possibilistic semantics and classical disjunctive asp .",
    "[ prop : disjunctivepossibilistic ] let @xmath37 be a disjunctive program , @xmath148 a valuation and let @xmath379 be  such  that @xmath407 then @xmath257 is an answer set of the disjunctive program  @xmath37 .    the proof is given in the online appendix of the paper , pp . 45 .",
    "[ prop : possibilisticdisjunctive ] let @xmath37 be a disjunctive program . if @xmath258 is an answer set of @xmath37 , there is a valuation @xmath148 , defined as @xmath333 if @xmath334 and @xmath335 otherwise , and a possibility distribution  @xmath92 , defined as @xmath95 if @xmath254 and @xmath94 otherwise , such that @xmath379 and for every @xmath140 we have @xmath337 .    the proof is given in the online appendix of the paper , pp .",
    "56 .      under the strong possibilistic semantics of disjunction we consider all the disjuncts of a satisfied rule separately . under this non - deterministic view the rule ( @xmath408 )",
    "means that ` @xmath39 ' is believed to be true or ` @xmath346 ' is believed to be true .",
    "when looking at answer sets as epistemic states it becomes apparent that there is also another choice in how we can treat disjunction in the head .",
    "indeed , we can look at the disjunction as a whole to hold , without making any explicit choices as to which of the disjuncts holds .",
    "when trying to reason about one s knowledge there are indeed situations in which we do not want , or simply can not make , a choice as to which of the disjuncts is true .",
    "this implies that we need to look at an answer set as a set of clauses , rather than a set of literals .",
    "an elaborate example using weak disjunction and uncertainty has been given in section  [ sec : introduction ] .",
    "in this subsection we consider the semantics of such programs . for  starters , we will extend the pasp semantics with the notion of clauses , rather than literals , and define an applicable immediate consequence operator for programs composed of clauses .",
    "we then prove some important properties , such as the monotonicity of the immediate consequence operator . for the classical case ( i.e.  when omitting weights ) , we furthermore characterize the complexity of clausal programs , both with and without negation - as - failure in section  [ sec : complexity ] .",
    "in particular , we show how the complexity is critically determined by whether we restrict ourselves to atoms and highlight , as shown by the higher complexity of some of the reasoning tasks , that weak disjunction is a non - trivial extension of asp .",
    "we start by formally defining possibilistic clausal programs , i.e.  possibilistic programs with a syntax that allows for disjunction in the body .",
    "we then define the weak possibilistic semantics of such clausal programs in terms of constraints on possibility distributions .",
    "we also introduce an equivalent characterization based on an immediate consequence operator and a reduct , which is more in line with the usual treatment of asp programs . when all the rules are entirely certain we obtain the classical counterpart , which we name clausal programs .",
    "we rely on the notion of a _ clause _ ,",
    "i.e.  a  finite disjunction of literals . consistency and entailment for sets of clauses are defined as in propositional logic . as  such",
    ", we can derive from the information ` @xmath20 ' and ` @xmath244 ' that ` @xmath409 ' is true .    a  _ clausal rule _",
    "is an expression of the form ( @xmath410 ) with @xmath411 a clause for every @xmath50 .",
    "a  _ positive clausal rule _ is an expression of the form ( @xmath412 ) , i.e.  a  clausal rule without negation - as - failure .",
    "a _ ( positive ) clausal program _ is a finite set of ( positive ) clausal rules .    for a clausal rule , which is of the form @xmath413",
    ", we say that @xmath414 is the _ head _ and that @xmath415 is the _ body _ of the clausal rule .",
    "we use the notation @xmath54 and @xmath55 to denote the clause in the head , _ resp . _",
    "the set of clauses in the body .",
    "the herbrand base @xmath416 of a clausal program @xmath37 is still defined as the set of atoms appearing in @xmath37 . as such , possibility distributions",
    "are defined in the usual way as @xmath417}}$ ] mappings .",
    "until now , we were able to define the possibility distributions that satisfied the constraints imposed by the rules in a program in terms of a valuation @xmath148 , i.e.  a @xmath418}}$ ] mapping .",
    "this need no longer be the case . specifically , note that we will now impose constraints of the form @xmath419 .",
    "assume that we have a possibility distribution @xmath92 defined as @xmath420 this possibility distribution is the least specific possibility distribution that satisfies the constraints @xmath421 and @xmath248 .",
    "however , it can be verified that this possibility distribution can not be defined in terms of a mapping @xmath141}}}$ ] .    instead ,",
    "we  define the set of clauses appearing in the head of the rules of a clausal program @xmath37 as @xmath422 . given a clausal program , it is clear that the only information that can be derived from the program are those clauses that are in the head of a rule . to compactly describe a possibility distribution imposed by clausal programs",
    "we will thus , for the remainder of this section and for section  [ sec : complexity ] , take a valuation @xmath148 to be a @xmath423 $ ] mapping .",
    "as  before , a valuation @xmath148 corresponds with the set of constraints @xmath424 .",
    "the set notation for valuations and the notations @xmath149  and  @xmath425 are extended as usual .",
    "entailment for valuations is defined as in possibilistic logic , i.e.  if we consider the least specific possibility distribution @xmath153 satisfying the constraints @xmath426 then @xmath427 with ` @xmath109 ' a proposition iff @xmath428 . in particular ,",
    "recall from possibilistic logic the inference rules ( gmp ) or graded modus ponens , i.e.  we can infer from @xmath429 and @xmath430 that @xmath431 .",
    "in addition recall the inference rule ( s ) , i.e.  we can infer from @xmath429 that @xmath432 with @xmath433 .    a  _ possibilistic ( positive ) clausal program _",
    "is a set of possibilistic ( positive ) clausal rules , which are pairs @xmath434 with @xmath53 a ( positive ) clausal rule and @xmath1290,1]$ ] a certainty associated with @xmath53 .",
    "we define @xmath134 and the @xmath3-cut @xmath155 as usual .",
    "we are now almost able to define the semantics of weak disjunction . in the previous sections we guessed a valuation and used this valuation to deal with negation - as - failure . however ,",
    "for clausal programs , a new problem arises .",
    "note that the least specific possibility distribution that satisfies the constraints @xmath421 and @xmath248 is also the least specific possibility distribution that satisfies the constraints @xmath435 and @xmath436 . as  such ,",
    "if @xmath437 , there would not be a unique valuation that can be used to define this least specific possibility distribution . indeed , a valuation uniquely defines a possibility distribution , but not vice versa . to avoid such ambiguity , we will instead immediately guess a possibility distribution @xmath153 and use this possibility distribution to deal with negation - as - failure in a clausal program .",
    "[ def : weak ] let @xmath37 be a possibilistic clausal program and let @xmath153 be a possibility distribution . for every @xmath205 , the constraint @xmath438 induced by @xmath192 with @xmath2670,1]$ ] , @xmath413 and @xmath153 under the weak possibilistic semantics is given  by @xmath439 @xmath440 is the set of constraints imposed by program @xmath37 and  @xmath153 , and @xmath441 is the set of all minimally specific possibilistic models of @xmath442 .",
    "whenever @xmath37 is a possibilistic ( positive ) clausal program , i.e.  whenever @xmath37 is a possibilistic clausal program without negation - as - failure , is independent of  @xmath153 and we simplify the notation to @xmath443 and @xmath444 .",
    "[ def : weak : poss : semantics ] let @xmath37 be a possibilistic clausal program .",
    "let @xmath153 be a possibility distribution such that @xmath445 .",
    "we then say that @xmath153 is a possibilistic answer set of  @xmath37 .",
    "as already indicated we can also use a valuation @xmath148 to concisely describe @xmath153 .",
    "when we say that @xmath148 is a possibilistic answer set of the clausal program  @xmath37 we are , more precisely , stating that the possibility distribution induced by @xmath148 is a possibilistic answer set of the clausal program  @xmath37 .",
    "[ lem : singleclausal ] let @xmath37 be a possibilistic positive clausal program . then @xmath441 is a singleton , i.e.  @xmath446 is a least specific possibility distribution .",
    "this readily follows from the form of the constraints imposed by the rules @xmath205 and since a possibilistic positive clausal program is free of negation - as - failure .",
    "[ ex : clausal : example ] consider the possibilistic clausal program @xmath37 with the rules : @xmath447    we have that @xmath448 is the set of constraints : @xmath449 we can rewrite the first constraint as @xmath450 .",
    "given the second constraint @xmath451 we can apply the inference rule ( gmp ) to conclude that @xmath452 . from propositional logic we know that @xmath453 , i.e.  we also have @xmath454 .    for @xmath153 to be an answer set of @xmath37 we know from definition  [ def : weak : poss : semantics ] that we must have that @xmath455 with @xmath456 .",
    "in other words , we must have that @xmath457 . due to the principle of least specificity , which implies that @xmath458 ,",
    "the last constraints can be simplified to @xmath459 or @xmath460 .",
    "as  such , the least specific possibility distribution defined by the constraints @xmath460 , @xmath461 and @xmath451 is a possibilistic answer set of @xmath37 .",
    "notice that we implicitly defined the possibilistic answer set of the previous example as a valuation , i.e.  in terms of clauses that appear in the head .",
    "alternatively we could thus write that @xmath462 defines the possibilistic answer set of @xmath37 .",
    "this idea will be further developed in section  [ sec : weak : syntactic ] to avoid the need to explicitly define a possibility distribution ( which would require an exponential amount of space ) and instead rely on an encoding of a possibility distribution by a ( polynomial ) set of weighted clauses .",
    "for the crisp case , we only want clauses that are either entirely certain or completely uncertain , i.e.  true or false . to this end , we add the constraint , which is similar to from proposition  [ prop : possiblitynormalanswerset ] .",
    "[ def : weak : semantics ] let @xmath37 be a clausal program and @xmath445 a possibility distribution such that @xmath463 then @xmath464 is called an answer set of  @xmath37 .      we now introduce a syntactic counterpart of the semantics for weak disjunction by defining an immediate consequence and reduct operator . as such , it is more in line with the classical gelfond - lifschitz approach .",
    "in addition , the syntactic approach only needs polynomial size ( as we will only consider clauses appearing in the head of the clausal rules ) .",
    "indeed , what we will do is formalise the idea of using a valuation to determine the possibilistic answer sets of a clausal program , rather than relying on an exponential possibility distribution .",
    "[ def : weak : immediate ] let @xmath37 be a possibilistic positive clausal program .",
    "we define the immediate consequence operator  @xmath465  as : @xmath466}\\mid{({{\\ensuremath{e_0 \\leftarrow { { { { \\ensuremath{e_{1}, ... ,e_{m } } } } } } } } } ) \\in p_\\lambda \\text { and } { \\ensuremath{\\forall i \\in { { \\ensuremath{\\left\\{{{\\ensuremath{1, ... ,m}}}\\right\\ } } } } { \\ensuremath { \\cdot } } v^\\lambda \\models e_i}}}\\right\\}}}}.\\end{aligned}\\ ] ] we use @xmath467 to denote the fixpoint which is obtained by repeatedly applying @xmath468 starting from the minimal clausal valuation @xmath469 , i.e.  the least fixpoint of @xmath468 w.r.t .",
    "set inclusion .",
    "when @xmath37 is a positive clausal program we take @xmath470 .",
    "consider the clausal program @xmath37 with the clausal rules @xmath471    we can easily verify that , starting from @xmath146 , we obtain @xmath472 in the next iteration we furthermore find that @xmath473 since @xmath474 and since @xmath475 . in addition , this is the least fixpoint , i.e.  we have @xmath476 .",
    "notice that this definition of the immediate consequence operator is a generalization of the immediate consequence operator for possibilistic simple programs ( see definition  [ def : nicolas : immediate ] ) .",
    "indeed , for a possibilistic positive clausal program where all clauses contain only a single literal , i.e.  a possibilistic simple program , we have that @xmath477 . in addition ,",
    "when all clauses contain only a single literal , we can simplify the immediate consequence operator and simply write @xmath478 instead of @xmath479 .",
    "we now show that the fixpoint obtained from the immediate consequence operator @xmath468 is indeed the answer set of @xmath37 .",
    "[ prop : weak : positive : answerset ] let @xmath37 be a possibilistic positive clausal program without possibilistic constraint rules .",
    "then @xmath480 is a possibilistic answer set of  @xmath37 .",
    "the proof is given in the online appendix of the paper , pp . 67 .",
    "thus far , we only considered possibilistic positive clausal programs .",
    "if we allow for negation - as - failure , we will also need to generalize the notion of a reduct . as usual , in the classical case we want that an expression of the form ` @xmath481 ' is true when ` @xmath183 ' can not be entailed .",
    "furthermore , since we are working in the possibilistic case , we want to take the degrees into account when determining the reduct .",
    "[ def : immediate : weak ] given a possibilistic clausal program @xmath37 and a valuation @xmath148 , the reduct @xmath482 of @xmath37 w.r.t .",
    "@xmath148 is defined as : @xmath483}\\right\\}}}}\\\\    & \\land ( ( { { \\ensuremath{e_0 \\leftarrow { { { { { \\ensuremath{e_{1}, ... ,e_{m } } } } } , { { { \\ensuremath{{not~}e_{m+1}, ... ,{not~}e_{n } } } } } } } } } } ) , \\lambda_{\\mathit{rule } } ) \\in p \\}\\end{aligned}\\ ] ]    this definition corresponds with the gelfond - lifschitz reduct when we consider crisp clausal programs where each clause consists of exactly one literal . indeed ,",
    "if we consider clauses with exactly one literal , we could simplify @xmath484 to @xmath485 .",
    "this new reduct generalises the gelfond - lifschitz reduct in two ways .",
    "firstly , we now have clauses , i.e.  we now need to verify whether the negative body is not entailed by our guess .",
    "secondly , we need to take the weights attached to the rules , which we interpret as certainties , into account .",
    "in particular , the certainty of the reduct of a rule is limited by the certainty of the negative body of the rule and the certainty of the rule itself . in the crisp case",
    "these certainty degrees would become trivial .",
    "[ prop : weak : general : answerset ] a valuation @xmath486 is a possibilistic answer set of the possibilistic clausal program @xmath37 without possibilistic constraint rules iff @xmath486 is a possibilistic answer set of @xmath487 .",
    "the proof is given in the online appendix of the paper , pp . 7 .    before we discuss the complexity results , we look at an example to further uncover the intuition of clausal programs .",
    "consider the possibilistic clausal program @xmath37 with the following rules : @xmath488 since @xmath489 but @xmath490 and @xmath491 .",
    "we then have that @xmath492 , hence @xmath148 is indeed an answer set of @xmath37 .",
    "before we discuss the complexity results of the weak possibilistic semantics for disjunctive rules  ( section  [ sec : disjunction : weak ] ) , we first look at the complexity results of both possibilistic normal programs  ( section  [ sec : characterizing : normal ] ) and the strong possibilistic semantics for disjunctive rules  ( section  [ sec : disjunction : strong ] ) . as such , for proposition  [ prop : simple : bravenpcomplete ] , [ prop : simple : cautiousconpcomplete ] , [ prop : simple : bravesigma2complete ] and [ prop : simple : cautiouspi2complete ] we once again consider a valuation @xmath148 for a possibilistic normal / disjunctive program @xmath37 as a @xmath418}}$ ] mapping . we find that for possibilistic normal programs the addition of weights does not affect the complexity compared to classical normal programs .",
    "[ prop : simple : bravenpcomplete ] let @xmath37 be a possibilistic normal program .",
    "the problem of deciding whether there exists a possibilistic answer set @xmath148 of @xmath37 such that @xmath493 is @xmath185-complete .",
    "the proof is given in the online appendix of the paper , pp",
    "[ prop : simple : cautiousconpcomplete ] let @xmath37 be a possibilistic normal program .",
    "the problem of deciding whether for all possibilistic answer sets @xmath148 of @xmath37 we have that @xmath493 is @xmath177-complete .",
    "the proof is given in the online appendix of the paper , pp .",
    "similarly , we find for possibilistic disjunctive programs under the strong disjunctive semantics that the addition of weights does not affect the complexity compared to classical disjunctive programs .",
    "[ prop : simple : bravesigma2complete ] let @xmath37 be a possibilistic disjunctive program .",
    "the problem of deciding whether there is a possibilistic answer set @xmath148 such that @xmath493 is a @xmath186-complete problem .",
    "the proof is given in the online appendix of the paper , pp . 9 - 10 .",
    "[ prop : simple : cautiouspi2complete ] let @xmath37 be a possibilistic disjunctive program .",
    "the problem of deciding whether for all possibilistic answer sets @xmath148 we have that @xmath493 is a @xmath187-complete problem .",
    "the proof is given in the online appendix of the paper , pp .",
    "10 - 11 .",
    "we now look at the complexity of the weak possibilistic semantics for disjunctive rules for a variety of decision problems and under a variety of restrictions . in  particular , throughout this section we look at the complexity of weak disjunction in the crips case that allows us to compare these results against the complexity of the related decision problems in classical asp and other epistemic extensions of asp , e.g.  @xcite .",
    "as we will see , for certain classes of clausal programs , decision problems exist where weak disjunction is computationally less complex than disjunctive programs while remaining more complex than normal programs .",
    "an overview of the complexity results available in the literature for disjunctive programs as well as the new results for weak disjunction ( in the crisp case ) which we discuss in the remainder of this section can be found in table  [ tbl : results - extra ] .",
    "rccc  no naf , no @xmath494   & existence & brave reasoning   & cautious reasoning +  strong disjunction   & @xmath185  @xmath495   & @xmath186  @xmath495   & @xmath177  @xmath495   + weak disjunction   & @xmath184  @xmath496   & @xmath184  @xmath496   & @xmath184  @xmath496   +  no naf , @xmath494   & existence & brave reasoning   & cautious reasoning +  strong disjunction   & @xmath185  @xmath495   & @xmath186  @xmath495   & @xmath177  @xmath495   + weak disjunction   & @xmath185  @xmath497   & @xmath173  @xmath498 & @xmath177  @xmath499   +  naf , @xmath494 & existence & brave reasoning   & cautious reasoning +  strong disjunction   & @xmath186  @xmath500   & @xmath186  @xmath500   & @xmath187  @xmath500   + weak disjunction   & @xmath186  @xmath501   & @xmath186  @xmath502   & @xmath187  @xmath503   +   +    llll & + & + & + & +    [ prop : bh2hardness ] let @xmath37 be a positive clausal program .",
    "the problem of deciding whether a clause ` @xmath183 ' is entailed by a consistent answer set @xmath486 of @xmath37 is @xmath173-hard .    the proof is given in the online appendix of the paper , pp .",
    "11 - 12 .",
    "[ prop : bh2membership ] let @xmath37 be a positive clausal program .",
    "the problem of deciding whether a clause ` @xmath183 ' is entailed by a consistent answer set @xmath258 of @xmath37 is in @xmath173 .    the proof is given in the online appendix of the paper , pp .",
    "12 - 13 .",
    "[ cor : complete ] let @xmath37 be a positive clausal program .",
    "the problem of deciding whether a clause ` @xmath183 ' is entailed by a consistent answer set @xmath486 of @xmath37 is @xmath173-complete .",
    "[ cor : weak : general : existence ] determining whether a positive clausal program @xmath37 has a consistent answer set is an @xmath185-complete problem .    the proof is given in the online appendix of the paper , pp .",
    "[ cor : weak : general : cautious ] cautious reasoning , i.e.  determining whether a clause ` @xmath183 ' is entailed by every answer set @xmath258 of a positive clausal program @xmath37 is @xmath177-complete .",
    "the proof is given in the online appendix of the paper , pp .",
    "surprisingly , the expressivity of positive clausal programs under the weak interpretation of disjunction is directly tied to the ability to use classical negation in clauses .",
    "if we limit ourselves to positive clausal programs without classical negation we find that the expressiveness is restricted to @xmath504 .    in order to see this ,",
    "let us take a closer look at the immediate consequence operator for clausal programs as defined in definition  [ def : weak : immediate ] .",
    "when there are no occurrences of classical negation we can simplify this immediate consequence operator to @xmath505 where @xmath506 is defined as the subset relation where we interpret @xmath183 and @xmath411 as sets of literals , i.e.  @xmath507 is interpreted as @xmath508 .",
    "[ prop : fixpoint : polynomial ] let @xmath37 be a positive clausal program without classical negation . we can find the unique answer set of @xmath37 in polynomial time .    the proof is given in the online appendix of the paper , pp .",
    "we now examine the complexity of general clausal programs .",
    "we will do this by showing that the problem of determining the satisfiability of a qbf of the form @xmath180 with @xmath181 in dnf can be reduced to the problem of determining whether a clause ` @xmath183 ' is entailed by a consistent answer set @xmath258 of the clausal program @xmath37 .",
    "we start with the definition of our reduction .",
    "[ def : simulationqbf ] let @xmath509 be a qbf with @xmath510 a formula in disjunctive normal form with @xmath511 sets of variables .",
    "we define the clausal program @xmath512 corresponding to @xmath513 as @xmath514 with @xmath515 the clausal representation of the negation of the formula @xmath516 , e.g.  when @xmath517 then @xmath518 .",
    "given the qbf @xmath519 the clausal program @xmath512 is @xmath520 notice how @xmath521 is an answer set of @xmath512 and that @xmath522 .",
    "accordingly we find that the qbf is satisfied .",
    "if we take the qbf @xmath523 then the clausal program @xmath524 corresponding to @xmath525 is the program @xmath512 in which the penultimate rule has been removed .",
    "notice how @xmath524 has no answer sets , because we are not able to entail ` @xmath526 ' from any of the answer sets of @xmath524 .",
    "indeed , the qbf @xmath525 is not satisfiable .    [",
    "prop : sigma2hardness ] let @xmath37 be a clausal program .",
    "the problem of deciding whether a clause ` @xmath183 ' is entailed by a consistent answer set @xmath258 of @xmath37 is @xmath186-hard .",
    "the proof is given in the online appendix of the paper , pp .",
    "14 - 15 .",
    "[ prop : sigma2membership ] let @xmath37 be a clausal program .",
    "the problem of deciding whether a clause ` @xmath183 ' is entailed by a consistent answer set @xmath258 of @xmath37 is in @xmath186 .    the proof is given in the online appendix of the paper , pp . 15 .",
    "[ cor : general : complete ] let @xmath37 be a clausal program . the problem of deciding whether a clause ` @xmath183 ' is entailed by a consistent answer set @xmath486 of @xmath37 is @xmath186-complete .",
    "[ cor : general : existence ] determining whether a clausal program @xmath37 has a consistent answer set is an @xmath186-complete problem .",
    "the proof is given in the online appendix of the paper , pp . 15 .",
    "[ cor : general : cautious ] cautious reasoning , i.e.  determining whether a clause ` @xmath183 ' is entailed by every answer set @xmath258 of a clausal program @xmath37 , is @xmath187-complete .",
    "this problem is complementary to brave reasoning , i.e.  we verify that there does not exist an answer set @xmath527 of @xmath37 such that ` @xmath528 ' is entailed by @xmath527 .",
    "the work presented in this paper touches on various topics that have been the subject of previous research . in this section",
    "we structure our discussion of related existing work along 3 main lines .",
    "previous work on the semantics of disjunctive programs is discussed in section  [ sec : related : disjunctive ] . in section  [ sec : related : epistemic ] we look at how asp and possibility theory have been used in the literature for epistemic reasoning .",
    "finally , in section  [ sec : related : rulesas ] , we look at prior work on characterizing rules with possibility theory and fuzzy logic .      many characterizations of stable models have been proposed in the literature .",
    "we refer the reader to  @xcite for a concise overview of thirteen such definitions .",
    "one of the earliest characterizations of stable models was in terms of autoepistemic logic  @xcite .",
    "formulas in autoepistemic logic are constructed using atoms and propositional connectives , as well as the modal operator @xmath529 , which intuitively stands for `` _ _ it is believed _ _ '' . the characterization of stable models proposed in  @xcite based on autoepistemic logic is to look at ` @xmath188 ' as the expression ` @xmath530 ' , a choice which clearly stands out for its simplicity and intuitively .",
    "for example , to explain the semantics of the rule @xmath531 one would consider the formula @xmath532 .",
    "yet this characterization does have some problems .",
    "indeed , it was soon afterwards realized that this correspondence does not hold for programs with classical negation or disjunction in the head . a more involved characterization based on autoepistemic logic that does work for classical",
    "negation and disjunction has been proposed in  @xcite .",
    "the idea is to look at literals ` @xmath8 ' that are not preceded by negation as failure as the formula ( @xmath533 ) , while one still looks at a literal of the form ` @xmath6 ' as the formula @xmath534 . in our approach , an expression of the form ` @xmath6 '",
    "is essentially identified with @xmath535 , which clearly resembles the first characterization in terms of autoepistemic logic . by staying closer to the gelfond - lifschitz reduct ,",
    "our approach is more elegant in that we do not require a special translation of literals in order to be able to deal with classical negation and disjunction .",
    "several authors have already proposed alternatives and extensions to the semantics of disjunctive programs . ordered disjunction  @xcite falls in the latter category and allows to use the head of the rule to formulate alternative solutions in their preferred order .",
    "for example , a rule such as @xmath536 represents the knowledge that @xmath537 is preferred over @xmath538 which is preferred over @xmath539  , but that at the very least we want @xmath540 to be true . as such it allows for an easy way to express context dependent preferences .",
    "the semantics of ordered disjunction allow certain non - minimal models to be answer sets , hence , unlike the work in this paper , it does not adhere to the standard semantics of disjunctive rules in asp .",
    "annotated disjunctions are another example of a framework that changes the semantics of disjunctive programs  @xcite .",
    "it is based on the idea that every disjunct in the head of a rule is annotated with a probability .",
    "interestingly , both ordered and annotated disjunction rely on split programs , as found in the possible model semantics  @xcite .",
    "these semantics provide an alternative to the minimal model semantics .",
    "the idea is to split a disjunctive program into a number of normal programs , one for each possible choice of disjuncts in the head , of which the minimal herbrand models are then the possible models of the disjunctive programs .",
    "intuitively this means that a possible model represents a set of atoms for which a possible justification is present in the program . in line with our conclusions for weak disjunction , using the possible model semantics",
    "also leads to a lower computational complexity .",
    "not all existing extensions of disjunction allow non - minimal models . for example , in @xcite an extension of disjunctive logic programs is presented which adds the idea of inheritance .",
    "conflicts between rules are then resolved in favor of more specific rules .",
    "such an approach allows for an intuitive way to deal with default reasoning and exceptions .",
    "in particular , the semantics allow for rules to be marked as being defeasible and allows to specify an order or inheritance tree among ( sets of ) rules .",
    "interestingly , the complexity of the resulting system is not affected and coincides with the complexity of ordinary disjunctive programs .      in",
    "@xcite it was argued that classical asp , while later proven to have strong epistemic foundations  @xcite , is not well - suited for epistemic reasoning .",
    "specifically , asp lacks mechanisms for introspection and can thus not be used to e.g.  reason based on cautiously deducible information .",
    "at the same time , however , it was shown that extensions of asp could be devised that do allow for a natural form of epistemic reasoning .",
    "the language @xmath541 proposed in  @xcite allows for modal atoms , e.g.  @xmath542 , where @xmath543 is a modal operator that can intuitively be read as `` _ _ it is known that [ @xmath39 is true ] _ _ '' .",
    "these new modal atoms can in turn be used in the body of rules .",
    "the semantics of @xmath541 were originally based on a three - valued interpretation ( to allow for the additional truth value ` @xmath544 ' ) , but later , in  @xcite , it was shown that this is not essential and that a more classical two - valued possible world structure can also be considered .",
    "in addition , further extensions are discussed that allow for epistemic reasoning over arbitrary theories , where it is shown that @xmath541 can be encoded within these extensions .",
    "the complexity is studied for these extensions and is shown to be brought up one level w.r.t .",
    "asp , e.g.  to @xmath545 for disjunctive epistemic programs .",
    "alternatively , existing extensions of asp can be used to implement some epistemic reasoning tasks , such as reasoning based on brave / cautious conclusions .",
    "this idea is proposed in  @xcite to overcome the need for an intermediary step to compute the desired consequences of the asp program @xmath546 , before being fed into @xmath547 .",
    "rather , they propose a translation to manifold answer set programs , which exploit the concept of weak constraints  @xcite to allow for such programs to access all desired consequences of @xmath546 within a single answer set . as such , for problems that can be cast into this particular form , only a single asp program needs to be evaluated and the intermediary step is made obsolete .    as we mentioned in section",
    "[ sec : related : disjunctive ] , the semantics of asp can also be expressed in terms of autoepistemic logic  @xcite .",
    "these semantics have the benefit of making the modal operator explicit , allowing for an extensions of asp that incorporates such explicit modalities to better express exactly which form of knowledge is required .",
    "however , since autoepistemic logic treats negation - as - failure as a modality , it is quite hard to extend to the uncertain case .",
    "furthermore , as already discussed , it as shown in  @xcite that this characterization does not allow us to treat classical negation or disjunctive rules in a natural way , which weakens its position as a candidate for generalizing asp from normal programs to e.g.  disjunctive programs",
    ".    possibility theory , which can e.g.  be used for belief revision , has a strong epistemic notion and shares a lot of commonalities with epistemic entrenchments  @xcite .",
    "furthermore , in  @xcite a generalization of possibilistic logic is studied , which corresponds to a weighted version of a fragment of the modal logic kd . in this logic ,",
    "epistemic states are represented as possibility distributions , and logical formulas are used to express constraints on possible epistemic states . in this paper",
    ", we similarly interpret rules in asp as constraints on possibility distributions , which furthermore allows us to unearth the semantics of weak disjunction .",
    "a large amount of research has focused on how possibility distributions can be used to assign a meaning to rules .",
    "for example , possibility theory has been used to model default rules  @xcite . specifically , a default rule `` if @xmath39 then @xmath346 '' is interpreted as @xmath548 , which captures the intuition that when @xmath39 is known to hold , @xmath346 is more plausible than @xmath244 , if all that is known is that @xmath39 holds . in this approach entailment",
    "is defined by looking at the least specific possibility distributions which is similar in spirit to our approach for characterizing asp rules ( although the notion of least specific possibility distribution is defined , in this context , w.r.t .",
    "the plausibility ordering on interpretations induced by the possibility degrees ) .    the work on possibilistic logic  @xcite forms the basis of possibilistic logic programming  @xcite .",
    "the idea of possibilistic logic programming is to start from a necessity - valued knowledge base , which is a finite set of pairs @xmath549 , called necessity - valued formulas , with @xmath513 a closed first - order formula and @xmath550 $ ] .",
    "semantically , a necessity - valued formula expresses a constraint of the form @xmath551 on the set of possibility distributions .",
    "a possibilistic logic program is then a set of necessity - valued implications .",
    "as rules are essentially modelled using material implication , however , the stable model semantics can not straightforwardly be characterized using possibilistic logic programming .",
    "for example , the knowledge base @xmath552 , which represents the program @xmath553 , induces that @xmath247 .",
    "indeed , the semantics of this knowledge base indicate that @xmath554 and @xmath555 , i.e.  we find that @xmath556 .",
    "in other words : a direct encoding using possibilistic logic programming allows for contraposition , which is not in accordance with the stable model semantics .",
    "rules in logic can also be interpreted as statements of conditional probability  @xcite . in the possibilistic",
    "setting this notion has been adapted to the notion of conditional necessity measures .",
    "rules can be then also be modelled in terms of conditional necessity measures  @xcite .",
    "the conditional possibility measure @xmath557 is defined as the greatest solution to the equation @xmath558 in accordance with the principle of least specificity .",
    "it can be derived mathematically that this gives us @xmath559 if @xmath560 and @xmath561 otherwise whenever @xmath562 .",
    "when @xmath563 , then by convention @xmath559 for every @xmath564 and @xmath565 , otherwise .",
    "the conditional necessity measure is defined as @xmath566 .",
    "however , there does not seem to be a straightforward way to capture the stable model semantics using conditional necessity measures , especially when classical negation is allowed .",
    "indeed , if we represent the semantics of the program @xmath553 as the constraints @xmath567 and @xmath568 . using the definition of the conditional necessity measure , the first constraint is equivalent to @xmath569 , i.e.  @xmath570 .",
    "the second constraint simplifies to @xmath556 , which , using the convention stated above gives rise to @xmath571 , clearly a contradictory result to the earlier conclusion that @xmath570 .",
    "the work in  @xcite was one of the first papers to explore the idea of combining possibility theory with asp .",
    "rather than defining the semantics of asp in terms of constraints on possibility distributions as we did in this paper , the goal was to allow one to reason with possibilities in asp programs . in this way one can associate certainties with the information encoded in an asp program .",
    "the  approach from  @xcite upholds the 1-on-1 relationship between the classical answer sets of a normal program and the possibilistic answer sets , which brings with it some advantages .",
    "one of those advantages is that it allows us to deal with possibilistic nested programs  @xcite .",
    "the work from nicolas et al .",
    "was later extended to also cover the case of disjunctive asp in  @xcite .",
    "the  latter approach allows us to e.g.  capture qualitative information by considering partially ordered sets , which would not be straightforward to accomplish in our work .",
    "however , the  approaches from  @xcite and  @xcite work by taking a possibilistic asp program and reducing it   by  ignoring the certainty values   to a possibilistic asp program without negation - as - failure . as  such ,",
    "both approaches loose the certainty encoded through negation - as - failure , since the certainty values are not taken into account .",
    "possibility theory has also been used to define various semantics of fuzzy if - then rules  @xcite . rather than working with literals , fuzzy if - then rules consider fuzzy predicates which each have their own universe of discourse . to draw conclusions from a set of fuzzy if - then rules ,",
    "mechanisms are needed that can produce an ( intuitively acceptable ) conclusion from a set of such rules .",
    "finally , a formal connection also exists between the approach from section  [ sec : characterization ] and the work on residuated logic programs  @xcite under the gdel semantics .",
    "both approaches are different in spirit , however , in the same way that possibilistic logic ( which deals with uncertainty or priority ) is different from gdel logic ( which deals with graded truth ) .",
    "the formal connection is due to the fact that necessity measures are min - decomposable and disappears as soon as classical negation or disjunction is considered .",
    "in this paper we defined semantics for possibilistic asp ( pasp ) , a framework that combines possibility theory and asp to allow for reasoning under ( qualitative ) uncertainty .",
    "these semantics are based on the interpretation of possibilistic rules as constraints on possibility distributions .",
    "we showed how our semantics for pasp differ from existing semantics for pasp .",
    "specifically , they adhere to a different intuition for negation - as - failure . as such",
    ", they can be used to arrive at acceptable results for problems where the possibilistic answer sets according to the existing semantics for pasp do not necessarily agree with our intuition of the problem . in  addition",
    ", we showed how our semantics for pasp allowed for a new characterization of asp .",
    "when looking at asp as a special case of pasp , we naturally recover the intuition of a rule that the head is certain whenever we are certain that the body holds .",
    "the resulting characterization stays close to the intuition of the stable model semantics , yet also shares the explicit reference to modalities with autoepistemic logic .",
    "we showed that this characterization not only naturally characterizes normal programs , i.e.  programs with negation - a - failure , but can also naturally characterize disjunctive programs and programs with classical negation .",
    "due to our explicit reference to modalities in the semantics , we are furthermore able to characterize an alternative semantics for disjunction in the head of a rule that has a more epistemic flavour than the standard treatment of disjunction in asp , i.e.  given a rule of the form @xmath572 we do not obtain two answer sets , but rather we have ` @xmath573 ' as - is in the answer set . while such a characterization might seem weak , we showed that the interplay with literals significantly affects the expressiveness .",
    "indeed , we found that the problem of brave reasoning / cautious reasoning under these weak semantics for disjunction for a program without negation - as - failure , but with classical negation , is @xmath173-complete and @xmath177-complete , respectively .",
    "this highlights that weak disjunction is not merely syntactic sugar , i.e.  it can not simply be simulated in normal asp without causing an exponential blow - up . for strong disjunction",
    ", on the other hand , we have obtained that brave and cautious reasoning without negation - as - failure are @xmath186-complete and @xmath177-complete , respectively . as such",
    ", the weak semantics for disjunction detailed in this paper allow us to work with disjunction in a less complex way that still remains non - trivial . if , however , we restrict ourselves to atoms , then brave reasoning under the weak semantics for disjunction is @xmath184-complete .",
    "\\2009 . a simple modal logic for reasoning about revealed beliefs . in _ proceedings of the 10th european conference on symbolic and quantitative approaches to reasoning with uncertainty",
    "( ecsqaru09)_. 805816 .            ,",
    "dubois , d. , and prade , h. 1992 .",
    "representing default rules in possibilistic logic .",
    "in _ proceedings of the 3rd international conference on principles of knowledge representation and reasoning ( kr)_. 673684 .",
    "\\1997 . a new logical characterization of stable models and answer sets . in _ proceedings of the 2nd international workshop on non - monotonic extensions of logic programming ( nmelp)_. lecture notes in artificial intelligence ,",
    "1216 . 5770 .",
    "revisiting epistemic specifications .",
    "in _ logic programming , knowledge representation , and nonmonotonic reasoning_. lecture notes in computer science , vol . 6565 .",
    "springer berlin heidelberg , 315333 .    , verbaeten , s. , and bruynooghe , m. 2004 .",
    "logic programs with annotated disjunctions . in _ proceedings of the 20th international conference on logic programming ( iclp)_. lecture notes in computer science , vol .",
    "3132 . 431445 .    , vennekens , j. , bruynooghe , m. , and denecker , m. 2012",
    ". ordered epistemic logic : semantics , complexity and applications . in _ principles of knowledge representation and reasoning : proceedings of the 13th international conference ( kr12)_."
  ],
  "abstract_text": [
    "<S> answer set programming ( asp ) is a popular framework for modeling combinatorial problems . </S>",
    "<S> however , asp can not easily be used for reasoning about uncertain information . </S>",
    "<S> possibilistic asp ( pasp ) is an extension of asp that combines possibilistic logic and asp . in pasp </S>",
    "<S> a weight is associated with each rule , where this weight is interpreted as the certainty with which the conclusion can be established when the body is known to hold . as such , it allows us to model and reason about uncertain information in an intuitive way . in this paper </S>",
    "<S> we present new semantics for pasp , in which rules are interpreted as constraints on possibility distributions . </S>",
    "<S> special models of these constraints are then identified as possibilistic answer sets . </S>",
    "<S> in addition , since asp is a special case of pasp in which all the rules are entirely certain , we obtain a new characterization of asp in terms of constraints on possibility distributions . </S>",
    "<S> this allows us to uncover a new form of disjunction , called weak disjunction , that has not been previously considered in the literature . </S>",
    "<S> in addition to introducing and motivating the semantics of weak disjunction , we also pinpoint its computational complexity . in  particular </S>",
    "<S> , while the complexity of most reasoning tasks coincides with standard disjunctive asp , we find that brave reasoning for programs with weak disjunctions is easier .    </S>",
    "<S> logic programming , answer set programming , possibility theory </S>"
  ]
}