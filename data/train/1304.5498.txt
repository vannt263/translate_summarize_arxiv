{
  "article_text": [
    "clique - width is a fundamental graph invariant that has been widely studied in combinatorics and computer science .",
    "clique - width measures in a certain sense the `` complexity '' of a graph .",
    "it is defined via a graph construction process involving four operations where only a limited number of vertex labels are available ; vertices that share the same label at a certain point of the construction process must be treated uniformly in subsequent steps .",
    "this graph composition mechanism was first considered by courcelle , engelfriet , and rozenberg @xcite and has since then been an important topic in combinatorics and computer science .",
    "graphs of small clique - width have advantageous algorithmic properties .",
    "algorithmic meta - theorems show that large classes of @xmath0-hard optimization problems and # p - hard counting problems can be solved in _ linear time _ on classes of graphs of bounded clique - width  @xcite .",
    "similar results hold for the graph invariant _ treewidth _ , however , clique - width is more general in the sense that graphs of small treewidth also have small clique - width , but there are graphs of small clique - width but arbitrarily high treewidth @xcite . unlike treewidth , dense graphs ( e.g. , cliques ) can also have small clique - width .",
    "all these algorithms for graphs of small clique - width require that a certificate for the graph having small clique - width is provided .",
    "however , it seems that computing the certificate , or just deciding whether the clique - width of a graph is bounded by a given number , is a very intricate combinatorial problem .",
    "more precisely , given a graph @xmath1 and an integer @xmath2 , deciding whether the clique - width of @xmath1 is at most  @xmath2 is @xmath0complete  @xcite .",
    "even worse , the clique - width of a graph with @xmath3 vertices of degree greater than  2 can not be approximated by a polynomial - time algorithm with an absolute error guarantee of @xmath4 unless @xmath5 , where @xmath6  @xcite .",
    "in fact , it is even unknown whether graphs of clique - width at most  @xmath7 can be recognized in polynomial time  @xcite .",
    "there are approximation algorithms with an exponential error that , for fixed  @xmath2 , compute @xmath8expressions for graphs of clique - width at most  @xmath2 in polynomial time ( where @xmath9 by  @xcite , and @xmath10 by  @xcite ) .",
    "because of this intricacy of this graph invariant , the exact clique - width is not known even for very small graphs .    [ [ clique - width - via - sat . ] ] clique - width via sat .",
    "+ + + + + + + + + + + + + + + + + + + + +    we present a new method for determining the clique - width based on a sophisticated sat encoding which entails the following ideas :    1 .",
    "_ reformulation_. the conventional construction method for determining the clique - width of a graph consists of many steps . in the worst case ,",
    "the number of steps is quadratic in the number of vertices .",
    "translating this construction method into sat would result in large instances , even for small graphs .",
    "we reformulated the problem in such a way that the number of steps is less than the number of vertices .",
    "the alternative construction method allows us to compute the clique - width of much larger graphs .",
    "representative encoding_. applying the frequently - used direct encoding  @xcite on the reformulation results in instances that have no arc consistency  @xcite , i.e. , unit propagation may find conflicts much later than required .",
    "we developed the representative encoding that is compact and realizes arc consistency .",
    "[ [ experimental - results . ] ] experimental results .",
    "+ + + + + + + + + + + + + + + + + + + + +    the implementation of our method allows us for the first time to determine the exact clique - width of various graphs , including famous graphs known from the literature , as well as random graphs of various density .    1 .",
    "_ clique - width of small random graphs_. we determined experimentally how the clique - width of random graphs depends on the density .",
    "the clique - width is small for dense and sparse graphs and reaches its maximum for edge - probability @xmath11 .",
    "the larger @xmath3 , the steeper the increase towards @xmath11 .",
    "these results complement the asymptotic results of lee et al .",
    "_ smallest graphs of certain clique - width_. in general it is not known how many vertices are required to form a graph of a certain clique - width .",
    "we provide these numbers for clique - width @xmath12 .",
    "in fact , we could compute the total number of connected graphs ( modulo isomorphism ) with a certain clique - width with up to 10 vertices .",
    "for instance , there are only  7 connected graphs with 8 vertices and clique - width 5 ( modulo isomorphism ) , and no graphs with 9 vertices and clique - width 6 . there are 68 graphs with 10 vertices and clique - width 6 .",
    "the smallest one has 18 edges .",
    "clique - width of famous named graphs_. over the last 50 years , researchers in graph theory have considered a large number of special graphs .",
    "these special graphs have been used as counterexamples for conjectures or for showing the tightness of combinatorial results .",
    "we considered several prominent graphs from the literature and computed their exact clique - width .",
    "these results may be of interest for people working in combinatorics and graph theory .",
    "[ [ related - work . ] ] related work .",
    "+ + + + + + + + + + + + +    we are not aware of any implemented algorithms that compute the clique - width exactly or heuristically .",
    "however , algorithms have been implemented that compute upper bounds on other width - based graph invariants , including _",
    "treewidth _",
    "@xcite , _ branchwidth _",
    "@xcite , _ boolean - width _",
    "@xcite , and _ rank - width _  @xcite . samer and",
    "veith @xcite proposed a sat encoding for the exact computation of treewidth .",
    "boolean - width and rank - width can be used to approximate clique - width , however , the error can be exponential in the clique - width ; in contrast , treewidth and branchwidth can be arbitrarily far from the clique - width , hence the approximation error is unbounded  @xcite .",
    "our sat encoding is based on a new characterization of clique - width that is based on partitions instead of labels .",
    "a similar partition - based characterization of clique - width , has been proposed by heggernes et al .",
    "there are two main differences to our reformulation .",
    "firstly , our characterization of clique - width uses three individual properties that can be easily expressed by clauses .",
    "secondly , our characterization admits the `` parallel '' processing of several parts of the graph that are later joined together .",
    "we consider propositional formulas in conjunctive normal form ( _ cnf formulas _ , for short ) , which are conjunctions of clauses , where a clause is a disjunction of literals , and a literal is a propositional variable or a negated propositional variables .",
    "a cnf formula is _ satisfiable _ if its variables can be assigned true or false , such that each clause contains either a variable set to true or a negated variable set to false .",
    "the satisfiability problem ( sat ) asks whether a given formula is satisfiable .",
    "all graphs considered are finite , undirected , and without self - loops .",
    "we denote a graph @xmath1 by an ordered pair @xmath13 of its set of vertices and its set of edges , respectively .",
    "an edge between vertices @xmath14 and @xmath15 is denoted @xmath16 or equivalently @xmath17 . for basic terminology on graphs",
    "we refer to a standard text book  @xcite .",
    "let @xmath2 be a positive integer .",
    "a @xmath2-_graph _ is a graph whose vertices are labeled by integers from @xmath18 .",
    "we consider an arbitrary graph as a @xmath2graph with all vertices labeled by  @xmath19 .",
    "we call the @xmath2-graph consisting of exactly one vertex @xmath15 ( say , labeled by @xmath20 ) an _ initial _ @xmath2-graph and denote it by @xmath21 . the _ clique - width _ of a graph @xmath1 is the smallest integer @xmath2 such that @xmath1 can be constructed from initial @xmath2-graphs by means of repeated application of the following three operations",
    "disjoint union ( denoted by @xmath22 ) ; 2 .",
    "relabeling : changing all labels @xmath20 to @xmath23 ( denoted by @xmath24 ) ; 3 .",
    "edge insertion : connecting all vertices labeled by @xmath20 with all vertices labeled by @xmath25 ( denoted by @xmath26 or @xmath27 ) ; already existing edges are not doubled .",
    "a construction of a @xmath2graph using the above operations can be represented by an algebraic term composed of @xmath22 , @xmath28 , and @xmath26 ( @xmath29 , and @xmath30 ) .",
    "such a term is called a _",
    "@xmath2expression _ defining  @xmath1 .",
    "thus , the clique - width of a graph @xmath1 is the smallest integer @xmath2 such that @xmath1 can be defined by a @xmath2expression .",
    "[ ex : p4 ] the graph @xmath31 is defined by the @xmath32expression @xmath33 hence @xmath34 . in fact , one can show that @xmath35 it has no @xmath36expression , and thus @xmath37  @xcite .",
    "as partitions play an important role in our reformulation of clique - width , we recall some basic terminology . a _",
    "partition _ of a set @xmath38 is a set @xmath39 of nonempty subsets of @xmath38 such that any two sets in @xmath39 are disjoint and @xmath38 is the union of all sets in @xmath39 .",
    "the elements of @xmath39 are called _ equivalence classes_. let @xmath40 be partitions of @xmath38 . then @xmath41 is a _ refinement _ of @xmath39 if for any two elements @xmath42 that are in the same equivalence class of @xmath41 are also in the same equivalence class of @xmath39 ( this entails the case @xmath43 ) .",
    "initially , we developed a sat encoding of clique - width based on @xmath2-expressions .",
    "even after several optimization steps , this encoding was only able to determine the clique - width of graphs consisting of at most 8 vertices .",
    "we therefore developed a new encoding based on a reformulation of clique - width which does not use @xmath2expressions . in this section",
    "we explain this reformulation , in the next section we will discuss how it can be encoded into  sat efficiently .",
    "consider a finite set @xmath44 , the _",
    "universe_. a _ template _ @xmath45 consists of two partitions @xmath46 and @xmath47 of  @xmath44 .",
    "we call the equivalence classes in @xmath46 the _ components _ of @xmath45 and the equivalence classes in @xmath47 the _ groups _ of @xmath45 . for some intuition about these concepts , imagine that components represent induced subgraphs and that groups represent sets of vertices in some component with the same label in a @xmath2-expression . a _ derivation _ of length @xmath48 is a finite sequence @xmath49 satisfying the following conditions .",
    "1 .   @xmath50 and @xmath51 .",
    "2 .   @xmath52 is a refinement of @xmath53 , @xmath54 .",
    "3 .   @xmath55 is a refinement of @xmath53 , @xmath56 .",
    "4 .   @xmath57 is a refinement of @xmath52 , @xmath58 .",
    "we would like to note that d1 and d2 together imply that @xmath59 .",
    "thus , in the first template @xmath60 all equivalence classes ( groups and components ) are singletons , and when we progress through the derivation , some of these sets are merged , until all components are merged into a single component in the last template @xmath61 .",
    "the _ width _ of a component @xmath62 is the number of groups @xmath63 such that .",
    "the width of a template is the maximum width over its components , and the width of a derivation is the maximum width over its templates .",
    "@xmath2derivation _ is a derivation of width at most  @xmath2 .",
    "a derivation @xmath49 is a derivation _ of _ a graph @xmath64 if @xmath44 is the universe of the derivation and the following three conditions hold for all @xmath65 .",
    "_ edge property _",
    ": for any two vertices @xmath66 such that @xmath67 , if @xmath68 are in the same group in @xmath69 , then @xmath68 are in the same component in @xmath70 .    _ neighborhood property _ : for any three vertices @xmath71 such that @xmath67 and @xmath72 , if @xmath73 are in the same group in @xmath69 , then @xmath68 are in the same component in @xmath70 .    _ path property _ : for any four vertices @xmath74 , such that @xmath75 and @xmath76 , if @xmath77 are in the same group in @xmath69 and @xmath73 are in the same group in @xmath69 , then @xmath68 are in the same component in @xmath70 .",
    "the neighborhood property and the path property could be merged into a single property if we do not insist that all mentioned vertices are distinct .",
    "however , two separate properties provide a more compact sat encoding .",
    "the following example illustrates that a derivation can define more than one graph , in contrast to a @xmath2expression , which defines exactly one graph .",
    "[ ex : derivation ] consider the derivation @xmath78 with universe @xmath79 and    @xmath80{lclclcl }      { \\text{cmp}}(t_0)&=&\\{\\{a\\},\\{b\\},\\{c\\},\\{d\\}\\ } ,       & \\quad &       { \\text{grp}}(t_0)&= & \\{\\{a\\},\\{b\\},\\{c\\},\\{d\\}\\ } , \\\\",
    "{ \\text{cmp}}(t_1)&=&\\{\\{a , b\\},\\{c\\},\\{d\\}\\ } ,       & \\quad &       { \\text{grp}}(t_1)&=&\\{\\{a\\},\\{b\\},\\{c\\},\\{d\\}\\},\\\\       { \\text{cmp}}(t_2)&=&\\{\\{a , b , c\\},\\{d\\}\\ } ,       & \\quad &       { \\text{grp}}(t_2)&= & \\{\\{a\\},\\{b\\},\\{c\\},\\{d\\}\\ } , \\\\",
    "{ \\text{cmp}}(t_3)&=&\\{\\{a , b , c , d\\}\\ } ,       & \\quad &       { \\text{grp}}(t_3)&= & \\{\\{a , b\\},\\{c\\},\\{d\\}\\}.      \\end{array}$ ]    the width of @xmath81 is @xmath32 .",
    "consider the graph @xmath82 . to see that  @xmath81 is a @xmath32derivation of  @xmath1 , we need to check the edge , neighborhood , and path properties .",
    "we observe that @xmath83 are the only two vertices such that @xmath84 and both vertices appear in the same group of some @xmath69 ( here , we have @xmath85 ) .",
    "to check the edge property , we only need to verify that @xmath83 are in the same component of  @xmath86 , which is true . for the neighborhood property , the only relevant choice of three vertices is @xmath87 ( @xmath88 , @xmath89 , and @xmath83 in a group of  @xmath90 ) . the neighborhood property requires that @xmath91 are in the same component in @xmath86 , which is the case .",
    "the path property is satisfied since there is no template in which two pairs of vertices belong to the same group , respectively .",
    "= [ circle , draw , inner sep=1.5pt , fill = gray ]    ( 0,1 ) node[circle ] ( a ) node[above ] @xmath92 ( 1,1 ) node[circle ] ( b ) node[above ] @xmath93 ( 0,0 ) node[circle ] ( c ) node[below ] @xmath94 ( 1,0 ) node[circle ] ( d ) node[below ] @xmath95 ( b)(a)(c)(d ) ;    ( 0,1 ) node[circle ] ( a ) node[above ] @xmath92 ( 1,1 ) node[circle ] ( b ) node[above ] @xmath93 ( 0,0 ) node[circle ] ( c ) node[below ] @xmath94 ( 1,0 ) node[circle ] ( d ) node[below ] @xmath95 ( a)(b)(c)(a ) ( c)(d ) ;    ( 0,1 ) node[circle ] ( a ) node[above ] @xmath92 ( 1,1 ) node[circle ] ( b ) node[above ] @xmath93 ( 0,0 ) node[circle ] ( c ) node[below ] @xmath94 ( 1,0 ) node[circle ] ( d ) node[below ] @xmath95 ( a)(c)(d ) ( b)(c ) ;    ( 0,1 ) node[circle ] ( a ) node[above ] @xmath92 ( 1,1 ) node[circle ] ( b ) node[above ] @xmath93 ( 0,0 ) node[circle ] ( c ) node[below ] @xmath94 ( 1,0 ) node[circle ] ( d ) node[below ] @xmath95 ( a)(c)(b)(d)(a ) ;    ( 0,1 ) node[circle ] ( a ) node[above ] @xmath92 ( 1,1 ) node[circle ] ( b ) node[above ] @xmath93 ( 0,0 ) node[circle ] ( c ) node[below ] @xmath94 ( 1,0 ) node[circle ] ( d ) node[below ] @xmath95 ( a)(b)(d)(a)(c)(b)(a ) ;    ( 0,1 ) node[circle ] ( a ) node[above ] @xmath92 ( 1,1 ) node[circle ] ( b ) node[above ] @xmath93 ( 0,0 ) node[circle ] ( c ) node[below ] @xmath94 ( 1,0 ) node[circle ] ( d ) node[below ] @xmath95 ( a)(b)(d)(a)(c)(b)(a ) ( c)(d ) ;    similarly we can verify that @xmath81 is a derivation of the graph @xmath96 , @xmath97 , @xmath98 .",
    "in fact , for all connected graphs with four vertices , there exists an isomorphic graph that is defined by @xmath81 ( see figure  [ fig : four ] ) .",
    "however , @xmath81 is not a derivation of the graph @xmath99 since the neighborhood property is violated : @xmath100 and @xmath101 , @xmath83 belong to the same group in @xmath90 , while @xmath102 do not belong to the same component in  @xmath86 .",
    "we call a derivation @xmath103 to be _ strict _ if @xmath104 holds for all @xmath65 .",
    "[ lem : make - strict ] if @xmath1 has a @xmath2derivation , it has a strict @xmath2derivation .",
    "let @xmath49 be a @xmath2derivation of  @xmath1 .",
    "assume there is some @xmath105 such that @xmath106 .",
    "if also @xmath107 , then @xmath108 , and we can safely remove @xmath70 and still have a @xmath2derivation of  @xmath1 .",
    "hence assume @xmath109 .",
    "this implies that @xmath110 .",
    "if @xmath111 , then we can safely remove @xmath61 from the derivation and @xmath112 is clearly a @xmath2 derivation of @xmath1 .",
    "hence it remains to consider the case @xmath113 .",
    "we show that by dropping @xmath69 we get a sequence @xmath114 that is a @xmath2 derivation of @xmath1 .",
    "the new sequence @xmath115 is clearly a @xmath2derivation .",
    "it remains to verify that @xmath115 is a derivation of  @xmath1 .",
    "the template @xmath116 is the only one where these properties might have been violated by the removal of @xmath69 .",
    "however , since all three properties impose a restriction on the set of components of the template preceding @xmath116 , and since @xmath106 , the properties are not effected by the deletion of @xmath69 . hence @xmath115 is indeed a @xmath2derivation of @xmath1 .    by repeated application of the above shortening we can turn any @xmath2derivation into a strict @xmath2derivation .",
    "[ lem : strict - short ] every strict @xmath2derivation of a graph with @xmath3 vertices has length at most @xmath117 .",
    "let @xmath103 be a strict @xmath2derivation of a graph with @xmath3 vertices .",
    "since @xmath118 and @xmath119 , it follows that @xmath120 .    in the proofs of the next two lemmas we need the following concept of a _ @xmath2expression tree _ , which is the parse tree of a @xmath2expression equipped with some additional information .",
    "let @xmath121 be a @xmath2expression for a graph @xmath64 .",
    "let @xmath122 be the parse tree of @xmath121 with root  @xmath123 .",
    "that is , @xmath122 contains a node for each occurrence of an operation @xmath22 , @xmath124 , and @xmath26 in @xmath121 and for each initial @xmath2graph @xmath21 in @xmath121 ; the initial @xmath2graphs are the leaves of @xmath122 , and the other nodes have as children the nodes which represent the two subexpressions of the respective operation .",
    "consider a node @xmath125 of @xmath122 and let @xmath126 be the subexpression of @xmath121 whose parse tree is the subtree of @xmath122 rooted at @xmath125 . then @xmath125 is labeled with the @xmath2graph @xmath127 constructed by the @xmath2expression  @xmath126 .",
    "thus the leaves of @xmath122 are labeled with initial @xmath2graphs and the root @xmath123 is labeled with a labeled version of  @xmath1 .",
    "we call a non - leaf node of @xmath122 an @xmath22node , @xmath128node , or @xmath129node , according to the operation it represents .    one @xmath22node of the parse tree can represent several directly subsequent @xmath22operations ( e.g. , the operation @xmath130 can be represented by a single node with three children ) . for technical reasons we will also allow @xmath22nodes with a single child .",
    "each @xmath2expression gives rise to a @xmath2expression tree where each @xmath22node has no @xmath22nodes as children , let us call such a @xmath2expression tree to be _",
    "succinct_. evidently , @xmath2expressions and their ( succinct ) @xmath2expression trees can be effectively transformed into each other .    [",
    "lem : expression->derivation ] from a @xmath2expression of a graph @xmath1 we can obtain a @xmath2 derivation of  @xmath1 in polynomial time .    let @xmath121 be a @xmath2expression of @xmath64 and let @xmath122 be the corresponding succinct @xmath2expression tree with root @xmath123 . for a node @xmath131 let @xmath132 denote the number of @xmath22-nodes that appear on the path from @xmath123 to @xmath125 ; thus @xmath133 .",
    "we write @xmath134 and @xmath135 for the set of @xmath22nodes and the set of leaves of @xmath122 , respectively .",
    "we let @xmath136 . for @xmath137",
    "we define @xmath138 and @xmath139 .",
    "we observe that for each @xmath140 and @xmath65 there is exactly one @xmath141 such that @xmath142    we define a derivation @xmath49 as follows .",
    "for @xmath143 we put @xmath144 and @xmath145 where @xmath146 denotes the partition of @xmath147 into sets of vertices that have the same label . by construction , @xmath81 is a derivation with universe @xmath44 .",
    "furthermore , since @xmath121 is a @xmath2 expression , @xmath148 for all nodes @xmath125 of @xmath122 . hence @xmath81 is a @xmath2derivation .",
    "it remains to show that  @xmath81 is a @xmath2derivation of  @xmath1 .",
    "let @xmath65 .    to show that the _ edge property _ holds , consider two vertices",
    "@xmath66 such that @xmath67 and @xmath68 are in the same group in  @xmath69 .",
    "assume to the contrary that @xmath68 belong to different components @xmath149 in  @xmath70 .",
    "since @xmath68 are in the same group in  @xmath69 , they are also in the same component of @xmath69 .",
    "hence there is an @xmath22node @xmath150 with @xmath151 .",
    "let @xmath152 be the children of @xmath125 with @xmath153 and @xmath154 .",
    "hence @xmath155 .",
    "however , since @xmath68 are in the same group in @xmath69 , this means that @xmath68 have the same label in @xmath127 .",
    "thus the edge @xmath16 can not be introduced by an @xmath128 operation , and so @xmath156 , a contradiction .",
    "hence the edge property holds .    to show that the _ neighborhood property _ holds , consider three vertices @xmath71 such that @xmath67 , @xmath72 , and @xmath73 are in the same group of  @xmath69 .",
    "assume to the contrary that @xmath68 are in different components of  @xmath70 , say in components @xmath157 and @xmath158 , respectively . since @xmath73 are in the same group of  @xmath69 , they are also in the same component @xmath159 of @xmath69 .",
    "let @xmath150 be the @xmath22node such that @xmath160 , and let @xmath152 be the children of @xmath125 with @xmath153 and @xmath154 .",
    "clearly @xmath161 , hence there must be an @xmath128node @xmath162 somewhere on the path between @xmath125 and @xmath123 where the edge @xmath16 is introduced .",
    "however , since  @xmath15 and @xmath163 share the same label in @xmath127 , they share the same label in @xmath164 . consequently , the @xmath128operation that introduces the edge @xmath16 also introduces the edge @xmath165 .",
    "however , this contradicts the assumption that @xmath72 .",
    "hence the neighborhood property holds as well .    to show that the _ path property _ holds",
    ", we proceed similarly .",
    "consider four vertices @xmath74 , such that @xmath166 and @xmath76 .",
    "assume that @xmath77 are in the same group in @xmath69 and @xmath73 are in the same group in @xmath69 .",
    "assume to the contrary that @xmath68 are in different components of  @xmath70 , say in components @xmath157 and @xmath158 , respectively .",
    "above we have shown that the neighborhood property holds .",
    "hence we conclude that @xmath167 belong to the same component of @xmath70 , and @xmath168 belong to the same component of @xmath70 .",
    "since @xmath77 are in the same group in @xmath69 , they are also in the same component of  @xmath69 , say in component  @xmath159 .",
    "since @xmath167 belong to the same component of @xmath70 , they also belong to the same component of @xmath69 , thus @xmath169 . by a similar argument",
    "we conclude that @xmath170 .",
    "thus all four vertices @xmath171 belong to  @xmath159 .",
    "let @xmath150 be the @xmath22node with @xmath172 , and let @xmath152 be the children of @xmath125 with @xmath153 and @xmath154 .",
    "clearly @xmath173 , hence there must be an @xmath128node @xmath162 somewhere on the path between @xmath125 and @xmath123 where the edge @xmath16 is introduced .",
    "however , since @xmath15 and @xmath163 share the same label in @xmath127 , and @xmath14 and @xmath174 share the same label in @xmath127 , this also holds in  @xmath164 .",
    "hence the @xmath128 operation that introduces the edge @xmath16 also introduces the edge @xmath175 .",
    "however , this contradicts the assumption that @xmath176 .",
    "hence the path property holds as well .",
    "we conclude that  @xmath81 is indeed a @xmath2derivation of  @xmath1 .",
    "the above procedure for generating the @xmath2derivation can clearly be carried out in polynomial time .",
    "[ ex : expression->derivation ] consider the @xmath32expression @xmath121 for the graph @xmath35 of example  [ ex : p4 ] .",
    "applying the procedure described in the proof of lemma  [ lem : expression->derivation ] we obtain the @xmath32 derivation @xmath81 of example  [ ex : derivation ] .",
    "[ lem : derivation->expression ] from a @xmath2derivation of a graph @xmath1 we can obtain a @xmath2 expression of  @xmath1 in polynomial time .    let @xmath49 be a @xmath2derivation of @xmath64 . using the construction of the proof of lemma  [ lem : make - strict ] we can obtain a strict @xmath2derivation of @xmath1 from any given @xmath2derivation of @xmath1 .",
    "hence we may assume , w.l.o.g .",
    ", that @xmath81 is strict . let @xmath177 . we are going to construct in polynomial time a @xmath2 expression tree for @xmath1 , which can clearly be turned into a @xmath2 expression for @xmath1 in polynomial time .",
    "we proceed in three steps .",
    "first we construct a @xmath2expression tree @xmath178 that only contains @xmath22nodes and leaves . for each component @xmath179 of @xmath60",
    "we introduce a leaf @xmath180 with label @xmath181 . for each @xmath65 and each component",
    "@xmath182 we introduce an @xmath22node @xmath183 .",
    "we add edges to @xmath178 such that @xmath184 is a child of @xmath183 if and only if @xmath185 .",
    "properties d1 and d3 of a derivation ensure that @xmath178 is a tree .",
    "note that @xmath178 is not necessarily succinct , and may contain @xmath22 nodes that have only one child .    in the next step",
    "we add to @xmath178 certain @xmath129nodes to obtain the @xmath2expression tree @xmath186 .",
    "we visit the @xmath22nodes of @xmath178 in a depth - first ordering .",
    "let @xmath183 be the currently visited node . between @xmath183 and each child @xmath184 of @xmath183",
    "we add at most @xmath2 @xmath129nodes ( so that the edge between @xmath183 and @xmath184 becomes a path ) such that afterwards @xmath183 has a child @xmath187 with @xmath188 .",
    "this is possible because of properties d2 and d4 of a derivation .    as a final step , we add @xmath128nodes to @xmath186 and the @xmath2expression tree  @xmath122 .",
    "let @xmath67 be an edge of @xmath1 .",
    "we show that there is an @xmath22node @xmath125 in @xmath186 above which we can add an @xmath128node @xmath162 ( @xmath125 is a child of @xmath162 ) which introduces edges including @xmath16 but does not introduce any edge not present in  @xmath189 .",
    "let @xmath183 be the @xmath22node of @xmath186 with smallest @xmath20 such that @xmath190 .",
    "we write @xmath191 and @xmath192 and observe that @xmath182 . among the children of @xmath125",
    "are two distinct nodes @xmath152 such that @xmath193 and @xmath194 .",
    "it follows that there are distinct components @xmath195 with @xmath196 and @xmath197 . by the edge property ,",
    "@xmath14 and @xmath15 belong to different groups of @xmath69 , and so @xmath14 and @xmath15 have different labels in @xmath127 , say the labels @xmath198 and @xmath199 , respectively .",
    "we add an @xmath128node @xmath162 above @xmath125 representing the operation @xmath200 .",
    "this inserts the edge @xmath16 to @xmath127 .",
    "we need to show that @xmath200 does not add any edge that is not in  @xmath189 .",
    "we show that for all pairs of vertices @xmath201 where @xmath202 has label @xmath198 and @xmath203 has label @xmath199 in @xmath127 , the edge @xmath204 is in @xmath189 .",
    "we consider four cases .",
    "case 1 : @xmath205 .",
    "trivially , @xmath206 .",
    "case 2 : @xmath207 .",
    "assume to the contrary that @xmath208 .",
    "since @xmath15 and @xmath203 have the same label in @xmath127 , they belong to the same group of @xmath69 .",
    "the neighborhood property implies that @xmath14 and @xmath15 belong to the same component of @xmath70 , a contradiction to the minimal choice of  @xmath20 .",
    "hence @xmath209 .",
    "case 3 : @xmath210 .",
    "this case is symmetric to case  2 .",
    "case 4 : @xmath211 .",
    "assume to the contrary that @xmath212 .",
    "it follows by from cases  2 and  3 that @xmath213 .",
    "the path property implies that @xmath14 and @xmath15 belong to the same component of @xmath70 , a contradiction to the minimal choice of  @xmath20 .",
    "hence @xmath209 .",
    "consequently , we can successively add @xmath128nodes to @xmath186 until all edges of @xmath189 are inserted , but no edge outside of @xmath189 .",
    "hence we obtain indeed a @xmath2expression tree for @xmath1 .    this procedure for generating the @xmath2expression tree",
    "can clearly be carried out in polynomial time , hence the lemma follows .",
    "we note that we could have saved some @xmath129operations in the proof of lemma  [ lem : derivation->expression ] .",
    "in particular the @xmath2expression produced may contain @xmath129operations where the number of different labels before and after the application of the @xmath129operation remains the same .",
    "it is easy to see that such a @xmath129operations can be omitted if we change labels of some initial @xmath2graphs accordingly .",
    "consider the derivation @xmath81 of graph @xmath1 in example  [ ex : derivation ] .",
    "we construct a @xmath32expression of @xmath1 using the procedure as described in the proof of lemma  [ lem : derivation->expression ] , however , to save space , we give the construction in terms of @xmath2expressions instead of @xmath2expression trees .",
    "first we obtain @xmath214 .",
    "next we insert @xmath129 operations to represent how the groups evolve through the derivation : @xmath215 .",
    "finally we add @xmath128 operations , and obtain @xmath216 .    by lemma  [ lem : strict - short ]",
    "we do not need to search for @xmath2derivations of length @xmath217 when the graph under consideration has @xmath3 vertices .",
    "the next lemma improves this bound to @xmath218 which provides a significant improvement for our sat encoding , especially if the graph under consideration has large clique - width .",
    "[ lem : strict - shorter ] let @xmath219 .",
    "if a graph with @xmath3 vertices has a @xmath2 derivation , then it has a @xmath2derivation of length @xmath218 .",
    "let @xmath220 be fixed .",
    "we define the _ @xmath2length _ of a derivation as the number of templates that contain at least one component of size larger than @xmath2 ( these templates form a suffix of the derivation ) .",
    "let  @xmath221 be the largest @xmath2length of a strict derivation over a universe of size @xmath3 .",
    "before we show the lemma , we establish three claims . for these claims ,",
    "the groups of the considered derivations are irrelevant and hence we will be ignored .",
    "_ claim 1 : _ @xmath222 .    to show the claim , consider a strict derivation @xmath49 over a universe @xmath44 of size @xmath3 with @xmath2 length @xmath223 .",
    "we take a new element @xmath198 and form a strict derivation @xmath115 over the universe @xmath224 by adding the singleton @xmath225 to @xmath226 for @xmath227 and adding a new template @xmath228 with @xmath229 .",
    "the new derivation @xmath115 has @xmath2length @xmath230 .",
    "_ claim 2 : _ let @xmath49 be a strict derivation over a universe @xmath44 of size @xmath3 of @xmath2length @xmath221 .",
    "then , @xmath231 has exactly one component of size @xmath232 and all other components are singletons .",
    "we proceed to show the claim .",
    "let @xmath233 , and observe that @xmath23 is the largest index where all components of @xmath234 have size at most @xmath2 .",
    "let @xmath235 be the components of @xmath236 of size greater than @xmath19 such that @xmath237 .",
    "thus @xmath238 .",
    "we show that @xmath239 .",
    "assume to the contrary that @xmath240 .",
    "we pick some element @xmath241 , @xmath242 , and set @xmath243 .",
    "the derivation @xmath81 induces a strict derivation @xmath115 over the universe @xmath244 .",
    "observe that @xmath245 .",
    "evidently @xmath115 has the same @xmath2 length as @xmath81 , hence @xmath246 , a contradiction to claim  1 .",
    "hence @xmath239 , and @xmath157 is the only component in @xmath236 of size greater than @xmath2 , all other components of @xmath236 are singletons .",
    "we show that @xmath247 .",
    "we assume to the contrary that @xmath248 .",
    "we pick @xmath232 elements @xmath249 and set @xmath250 .",
    "similarly as above , we observe that @xmath81 induces a strict derivation @xmath251 over the universe @xmath252 , and that @xmath251 has the same @xmath2length as @xmath81 .",
    "since @xmath253 we have again a contradiction to  claim  1 . hence claim  2",
    "is established .",
    "_ claim 3 : _ @xmath254 .    to see the claim ,",
    "let @xmath49 be a strict derivation over a universe @xmath44 of size @xmath3 of @xmath2length @xmath221 .",
    "let @xmath233 . by claim  2",
    "we know that @xmath236 has exactly one component of size @xmath232 and all other components are singletons ( hence there are @xmath255 singletons ) .",
    "we conclude that @xmath256 . since @xmath81 is strict , we have @xmath257 .",
    "thus @xmath258 , and the claim follows .",
    "we are now in the position to establish the statement of the lemma .",
    "let @xmath49 be a @xmath2 derivation of a graph @xmath64 with @xmath259 .",
    "by lemma  [ lem : make - strict ] we may assume that @xmath81 is strict . let  @xmath223 be the @xmath2length of @xmath81 and let @xmath260 . by claim  3",
    "we know that @xmath261 .",
    "we define a new template @xmath262 with @xmath263 and @xmath264 , and we set @xmath265 . we claim that @xmath115 is a @xmath2derivation of @xmath1 .",
    "clearly @xmath115 is a derivation , but we need to check the edge , neighborhood , and path property for @xmath262 and @xmath236 in @xmath115 .",
    "the properties hold trivially for @xmath262 since all its groups are singletons . for @xmath236",
    "the properties hold since @xmath262 has the same components as @xmath234 .",
    "thus @xmath115 is indeed a @xmath2derivation of  @xmath1 .",
    "the length of @xmath115 is @xmath266 , hence the lemma follows .",
    "again , consider the derivation @xmath81 of example  [ ex : derivation ] .",
    "@xmath81 defines @xmath35 which has clique - width 3  @xcite . according to lemma  [ lem : strict - shorter ]",
    ", it should have a derivation of length @xmath267 .",
    "we can obtain such a derivation by removing @xmath268 from @xmath81 , which gives @xmath269 .    by combining lemmas [ lem : expression->derivation ] , [ lem : derivation->expression ] , and [ lem : strict - shorter ] ,",
    "we arrive at the main result of this section .",
    "[ pro : expression ] let @xmath270 .",
    "a graph @xmath1 with @xmath3 nodes has clique - width at most @xmath2 if and only if @xmath1 has a @xmath2derivation of length at most @xmath218 .",
    "let @xmath64 be graph , and @xmath271 an integer .",
    "we are going to construct a cnf formula @xmath272 that is satisfiable if and only if @xmath1 has a derivation of length  @xmath48 .",
    "we assume that the vertices of @xmath1 are given in some arbitrary but fixed linear order  @xmath273 .",
    "for any two distinct vertices @xmath14 and @xmath15 of @xmath1 and any @xmath274 we introduce a _ component variable _ @xmath275 .",
    "similarly , for any two distinct vertices @xmath14 and @xmath15 of @xmath1 with @xmath276 and any @xmath274 we introduce a _ group variable _ @xmath277",
    ". intuitively , @xmath275 or @xmath277 are true if and only if @xmath14 and @xmath15 are in the same component or group , respectively , in the @xmath20th template of an implicitly represented derivation of @xmath1 .",
    "the formula @xmath272 is the conjunction of all the clauses described below .",
    "the following clauses represent the conditions  d1d4 .",
    "@xmath278 + for @xmath279 , @xmath276 , @xmath227 .",
    "we further add clauses that ensure that the relations of being in the same group and of being in the same component are transitive .",
    "@xmath280    @xmath281 + for @xmath71 , @xmath282 , @xmath227 .",
    "in order to enforce the _ edge property _ we add the following clauses for any two vertices @xmath66 with @xmath276 , @xmath67 and @xmath65 :    @xmath283 .",
    "further , to enforce the _ neighborhood property _ , we add for any three vertices @xmath71 with @xmath284 and @xmath285 and @xmath65 , the following clauses .",
    "@xmath286    finally , to enforce the _ path property _ we add for any four vertices @xmath171 , such that @xmath75 , and @xmath76 , @xmath287 and @xmath65 the following clauses :    ( @xmath288    the following statement is a direct consequence of the above definitions .",
    "[ lem : der ] @xmath272 is satisfiable if and only if @xmath1 has a derivation of length  @xmath48 .",
    "in this section , we describe how the formula @xmath272 can be extended to encode a derivation of width at most @xmath2 .",
    "ideally , one wants to encode that unit propagation results in a conflict on any assignment of component and group variables representing a derivation containing a component with more than @xmath2 groups .",
    "first we will describe the conventional direct encoding  @xcite followed by our representative encoding .",
    "only the latter encoding realizes arc consistency  @xcite .",
    "we introduce new boolean variables @xmath289 for @xmath140 , @xmath290 , and @xmath227 .",
    "the purpose is to assign each vertex for each template a group number between  @xmath19 and  @xmath2 .",
    "the intended meaning of a variable @xmath289 is that in @xmath69 , vertex @xmath15 has group number  @xmath198 .",
    "let @xmath291 denote the formula obtained from @xmath272 by adding the following three sets of clauses .",
    "the first ensures that every vertex has at least one group number , the second ensures that every vertex has at most one group number , and the third ensures that two vertices of the same group share the same group number .",
    "@xmath292 for @xmath293 , @xmath227 ,    @xmath294 for @xmath295 , @xmath296 , @xmath227 ,    @xmath297 + for @xmath279 , @xmath287 , @xmath298 , @xmath299 .",
    "together with lemma  [ lem : der ] this construction directly yields the following statement .",
    "let @xmath64 be graph and @xmath300",
    ". then @xmath291 is satisfiable if and only if @xmath301 .",
    "[ example : unitprop ] let @xmath64 and @xmath302 .",
    "vertices @xmath303 in template @xmath69 , are in one component , but in different groups",
    ". hence the corresponding component variables are true , and the corresponding group variables are false .",
    "the clauses containing the variables @xmath304 with @xmath305 after removing falsified literals are :    @xmath306 + @xmath307    these clauses can not be satisfied , yet unit propagation will not result in a conflict .",
    "therefore , a sat solver may not be able to cut off the current branch .      to overcome the unit propagation problem of the direct encoding , as described in example  [ example : unitprop ]",
    ", we propose the _ representative encoding _ which uses two types of variables .",
    "first , for each @xmath140 and @xmath65 we introduce a representative variable @xmath308 .",
    "this variable , if assigned to true , expresses that vertex @xmath15 is the representative of a group in template  @xmath69 . in each group",
    ", only one vertex can be the representative and we choose to make the first vertex in the lexicographical ordering the representative .",
    "this results in the following clauses :    @xmath309 for @xmath295 , @xmath227    additionally we introduce auxiliary variables to efficiently encode that the number of representative vertices in a component is at most @xmath2 . these auxiliary variables are based on the _ order encoding _",
    "consider a ( non - boolean ) variable @xmath310 with domain @xmath311 , whose elements denote the group number of vertex @xmath15 in template @xmath69 . in the direct encoding ,",
    "we used @xmath2 variables @xmath289 with @xmath312 .",
    "assigning @xmath313 in that encoding means @xmath314 .",
    "alternatively , we can use _ order variables _ @xmath315 with @xmath295 , @xmath316 , @xmath317 .",
    "assigning @xmath318 means @xmath319 .",
    "consequently , @xmath320 means @xmath321 .    given an assignment to the order variables @xmath315 , one can easily construct the equivalent assignment to the variables in the direct encoding ( and the other way around ) .",
    "below is a visualization of the equivalence relation with @xmath322 . in the middle",
    "is a binary representation of each of the @xmath2 labels by concatenating the boolean values to the order variables .",
    "@xmath80{c@{\\;\\;}c@{\\;\\;}c@{\\;\\;}c@{\\;\\;}c@{\\;\\;}c@{\\;\\;}l } l_v = 1 & \\leftrightarrow & l_{v,1,i } = { \\tt 1 } & \\leftrightarrow &   { \\tt 0000 } & \\leftrightarrow &   o^>_{v,1,i } = o^>_{v,2,i } = o^>_{v,3,i } = o^>_{v,4,i } = { \\tt 0 } \\\\",
    "l_v = 2 & \\leftrightarrow & l_{v,2,i } = { \\tt 1 } & \\leftrightarrow   & { \\tt 1000 } & \\leftrightarrow & o^>_{v,1,i } = { \\tt 1 } , o^>_{v,2,i } = o^>_{v,3,i } = o^>_{v,4,i } = { \\tt 0 } \\\\",
    "l_v = 3 & \\leftrightarrow & l_{v,3,i } = { \\tt 1 } & \\leftrightarrow & { \\tt 1100 } &   \\leftrightarrow & o^>_{v,1,i } =   o^>_{v,2,i } = { \\tt 1 } , o^>_{v,3,i } = o^>_{v,4,i } = { \\tt 0 } \\\\",
    "l_v = 4 & \\leftrightarrow & l_{v,4,i } = { \\tt 1 } & \\leftrightarrow   & { \\tt 1110 } &   \\leftrightarrow & o^>_{v,1,i } = o^>_{v,2,i } = o^>_{v,3,i } = { \\tt 1 } , o^>_{v,4,i } = { \\tt 0 } \\\\ l_v = 5 & \\leftrightarrow & l_{v,5,i } = { \\tt 1 } & \\leftrightarrow & { \\tt 1111 } &   \\leftrightarrow & o^>_{v,1,i } = o^>_{v,2,i } = o^>_{v,3,i } = o^>_{v,4,i } = { \\tt 1 } \\end{array}$ ]    although our encoding is based on the variables from the order encoding , we use none of the associated clauses .",
    "we implemented the original order  @xcite , which resulted in many long clauses and the performance was comparable to the direct encoding .    instead , we combined the representative and order variables .",
    "our use of the order variables can be seen as the encoding of a sequential counter  @xcite .",
    "we would like to point out that if @xmath14 and @xmath15 are both representative vertices in the same component of template @xmath69 and @xmath287 , then @xmath323 and @xmath324 must hold for some @xmath325 .",
    "consequently , @xmath326 ( vertex @xmath14 has not the highest group number in @xmath69 ) , ( vertex @xmath15 has not the lowest group number in @xmath69 ) , and : these constraints can be expressed by the following clauses .",
    "@xmath327for @xmath279 , @xmath287 , @xmath328 .",
    "consider a graph @xmath329 with @xmath330 and the representative encoding with @xmath331",
    ". we will show that if @xmath14,@xmath15,@xmath163 , and @xmath174 are all in the same component and they are all representatives of their respective group numbers in template @xmath69 , then unit propagation will result in a conflict ( because there are four representatives and only three group numbers ) .",
    "observe that all corresponding component and representative variables are true .",
    "this example , with falsified literals removed , contains the clauses @xmath332 , @xmath333 , @xmath334 , @xmath335 , @xmath336 , @xmath337 , @xmath332 , @xmath338 , @xmath339 , @xmath340 , , @xmath337 , @xmath341 , @xmath342 , @xmath343 , @xmath344 , @xmath345 , @xmath346 .",
    "literals that are falsified by unit clauses are shown in bold .",
    "notice that @xmath347 is falsified , i.e. , a conflicting clause .",
    "both the direct and representative encoding require @xmath348 variables .",
    "the number of clauses depends on the set of edges . in worst case",
    ", the number of clauses can be @xmath349 due to the path condition .",
    "in this section we report the results we obtained by running our sat encoding on various classes of graphs . given a graph @xmath350 , we compute that @xmath1 has clique - width @xmath2 by determining for which value of @xmath2 it holds that @xmath351 is satisfiable and latexmath:[$f(g , k-1 ,    2.2  @xcite to solve the encoded problems .",
    "glucose solved the hardest instances about twice as fast ( or more ) as other state - of - the - art solvers such as lingeling  @xcite , minisat  @xcite and clasp  @xcite .",
    "we used a 4-core intel xeon cpu e31280 3.50ghz , 32 gb ram machine running ubuntu 10.04 .",
    "although the direct and representative encodings result in cnf formulas of almost equal size , there is a huge difference in costs to solve these instances . to determine the clique - width of the famous named graphs ( see below )",
    "using the direct encoding takes about two to three orders of magnitude longer as compared to the representative encoding .",
    "for example , we can establish that the paley graph with 13 vertices has clique - width 9 within a few seconds using the representative encoding , while the solver requires over an hour using the direct encoding . because of the huge difference in speed , we discarded the use of the direct encoding in the remainder of this section .",
    "we noticed that upper bounds ( satisfiable formulas ) are obtained much faster than lower bounds ( unsatisfiable formulas ) .",
    "the reason is twofold .",
    "first , the whole search space needs to be explored for lower bounds , while for upper bounds , one can be  lucky \" and find a solution fast .",
    "second , due to our encoding , upper bound formulas are smaller ( due to a smaller @xmath48 ) which makes them easier .",
    "table  [ tab : random20 ] shows this for a random graph with 20 vertices for the direct encoding and the representative encoding .",
    ".runtimes in seconds of the direct and representative encoding on a random graph with 20 vertices and 95 edges for different values of @xmath2 .",
    "up to @xmath353 the formulas are unsatisfiable , afterwards they are satisfiable .",
    "timeout ( to ) is 20,000 seconds . [",
    "cols=\"<,^,^,^,^,^,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]",
    "we have presented a sat approach to the exact computation of clique - width , based on a reformulation of clique - width and several techniques to speed up the search .",
    "this new approach allowed us to systematically compute the exact clique - width of various small graphs .",
    "we think that our results could be of relevance for theoretical investigations .",
    "for instance , knowing small vertex - minimal graphs of certain clique - width could be helpful for the design of discrete algorithms that recognize graphs of bounded clique - width .",
    "such graphs can also be useful as gadgets for a reduction to show that the recognition of graphs of clique - width  4 is @xmath0hard , which is still a long - standing open problem @xcite .",
    "furthermore , as discussed in section  [ sect : intro ] , there are no heuristic algorithms to compute the clique - width directly , but heuristic algorithms for related parameters can be used to obtain upper bounds on the clique - width .",
    "our sat - based approach can be used to empirically evaluate how far heuristics are from the optimum , at least for small and medium - sized graphs .",
    "so far we have focused in our experiments on the exact clique - width , but for various applications it is sufficient to have good upper bounds .",
    "our results ( see table  [ tab : random20 ] ) suggest that our approach can be scaled to medium - sized graphs for the computation of upper bounds .",
    "we also observed that for many graphs the upper bound of lemma  [ lem : strict - shorter ] is not tight .",
    "thus , we expect that if we search for shorter derivations , which is significantly faster , this will yield optimal or close to optimal solutions in many cases",
    ".    finally , we would like to mention that our sat - based approach is very flexible and open .",
    "it can easily be adapted to variants of clique - width , such as linear clique - width @xcite , @xmath354clique - width @xcite , or nlc - width  @xcite .",
    "hence , our approach can be used for an empirical comparison of these parameters .",
    "the authors acknowledge the texas advanced computing center ( tacc ) at the university of texas at austin for providing grid resources that have contributed to the research results reported within this paper .",
    "gilles audemard and laurent simon . predicting learnt clauses quality in modern sat solvers . in _ proceedings of the 21st international jont conference on artifical intelligence _ , ijcai09 , pages 399404 , san francisco , ca , usa , 2009 .",
    "morgan kaufmann publishers inc .",
    "martin bey .",
    "fast algorithm for rank - width . in _",
    "mathematical and engineering methods in computer science , 8th international doctoral workshop , memics 2012 , znojmo , czech republic , october 25 - 28 , 2012 , revised selected papers _ ,",
    "volume 7721 of _ lecture notes in computer science _ , pages 8293 .",
    "springer verlag , 2013 .",
    "armin biere .",
    "lingeling and friends entering the sat challenge 2012 .",
    "in a.  balint , a.  belov , a.  diepold , s.  gerber , m.  jrvisalo , and c.  sinz , editors , _ solver and benchmark descriptions _ , volume b-2012 - 2 of _ department of computer science series of publications b. _ , pages 3334 .",
    "university of helsinki , 2012 .",
    "bruno courcelle , joost engelfriet , and grzegorz rozenberg .",
    "context - free handle - rewriting hypergraph grammars . in hartmut ehrig , hans - jrg kreowski , and grzegorz rozenberg , editors ,",
    "_ graph - grammars and their application to computer science , 4th international workshop , bremen , germany , march 59 , 1990 , proceedings _",
    ", volume 532 of _ lecture notes in computer science _ , pages 253268 , 1991 .          p.  alex dow and richard  e. korf . best - first search for treewidth . in _ proceedings of the twenty - second aaai conference on artificial intelligence , july 22 - 26 , 2007 , vancouver , british columbia , canada _ , pages 11461151 .",
    "aaai press , 2007 .",
    "niklas en and niklas srensson . an extensible sat - solver . in enrico giunchiglia and armando",
    "tacchella , editors , _ theory and applications of satisfiability testing _ ,",
    "volume 2919 of _ lecture notes in computer science _ , pages 502518 .",
    "springer berlin heidelberg , 2004 .",
    "m.  gebser , b.  kaufmann , a.  neumann , and t.  schaub .",
    "clasp : a conflict - driven answer set solver . in c.  baral , g.  brewka , and j.  schlipf , editors , _ proceedings of the ninth international conference on logic programming and nonmonotonic reasoning ( lpnmr07 ) _ , volume 4483 of _ lecture notes in artificial intelligence _ , pages 260265 .",
    "springer - verlag , 2007 .",
    "vibhav gogate and rina dechter . a complete anytime algorithm for treewidth . in _ proceedings of the proceedings of the twentieth conference",
    "annual conference on uncertainty in artificial intelligence ( uai-04 ) _ , pages 201208 , arlington , virginia , 2004 .",
    "auai press .",
    "martin  charles golumbic and udi rotics . on the clique - width of some perfect graph classes .",
    ", 11(3):423443 , 2000 .",
    "selected papers from the workshop on graph - theoretical aspects of computer science ( wg 99 ) , part 1 ( ascona ) .",
    "pinar heggernes , daniel meister , and udi rotics . computing the clique - width of large path powers in linear time via a new characterisation of clique - width . in alexander  s. kulikov and nikolay  k. vereshchagin , editors , _",
    "computer science - theory and applications - 6th international computer science symposium in russia , csr 2011 , st .",
    "petersburg , russia , june 14 - 18 , 2011 .",
    "proceedings _ , volume 6651 of _ lecture notes in computer science _ , pages 233246 .",
    "springer verlag , 2011 .",
    "eivind  magnus hvidevold , sadia sharmin , jan  arne telle , and martin vatshelle .",
    "finding good decompositions for dynamic programming on dense graphs .",
    "in dniel marx and peter rossmanith , editors , _ parameterized and exact computation - 6th international symposium , ipec 2011 , saarbrcken , germany , september 6 - 8 , 2011 . revised selected papers _ , volume 7112 of _ lecture notes in computer science _ , pages 219231 .",
    "springer verlag , 2012 .",
    "hadi katebi , karem  a. sakallah , and igor  l. markov .",
    "conflict anticipation in the search for graph automorphisms . in nikolaj bjrner and andrei",
    "voronkov , editors , _ logic for programming , artificial intelligence , and reasoning - 18th international conference , lpar-18 , mrida , venezuela , march 11 - 15 , 2012 .",
    "proceedings _ , volume 7180 of _ lecture notes in computer science _ , pages 243257 .",
    "springer verlag , 2012 .",
    "marko samer and helmut veith .",
    "encoding treewidth into sat . in _ theory and applications of satisfiability testing - sat 2009 , 12th international conference , sat 2009 , swansea , uk , june 30 - july 3 , 2009 . proceedings _ , volume 5584 of _ lecture notes in computer science _ , pages 4550 .",
    "springer verlag , 2009 .",
    "carsten sinz . towards an optimal cnf encoding of boolean cardinality constraints . in peter van beek , editor ,",
    "_ principles and practice of constraint programming - cp 2005 , 11th international conference , cp 2005 , sitges , spain , october 1 - 5 , 2005 , proceedings _ , volume 3709 of _ lecture notes in computer science _ , pages 827831 .",
    "springer verlag , 2005 .",
    "toby walsh .",
    "v csp . in r.",
    "dechter , editor , _ 6th international conferenc on principles and practice of constraint programming ( cp 2000 ) _ , volume 1894 of _ lecture notes in computer science _ , pages 441456",
    ". springer verlag , 2000 ."
  ],
  "abstract_text": [
    "<S> clique - width is a graph invariant that has been widely studied in combinatorics and computer science . </S>",
    "<S> however , computing the clique - width of a graph is an intricate problem , the exact clique - width is not known even for very small graphs . </S>",
    "<S> we present a new method for computing the clique - width of graphs based on an encoding to propositional satisfiability ( sat ) which is then evaluated by a sat solver . </S>",
    "<S> our encoding is based on a reformulation of clique - width in terms of partitions that utilizes an efficient encoding of cardinality constraints . </S>",
    "<S> our sat - based method is the first to discover the exact clique - width of various small graphs , including famous graphs from the literature as well as random graphs of various density . with our method </S>",
    "<S> we determined the smallest graphs that require a small pre - described clique - width . </S>"
  ]
}