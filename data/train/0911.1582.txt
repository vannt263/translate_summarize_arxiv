{
  "article_text": [
    "the gibbard - satterthwaite theorem proves that , under some modest assumptions , voting systems are always manipulable .",
    "one possible escape proposed by bartholdi , tovey and trick is that the manipulation may be computationally too difficult to find @xcite ( but see @xcite for discussion about whether manipulation is hard not just in the worst case ) . like elections ,",
    "sporting competitions can also be manipulated .",
    "for example a coalition of teams might throw games strategically to ensure that a desired team wins or a certain team loses .",
    "we consider here the computational complexity of computing such manipulations .",
    "we show that , for several common types of competitions , determining when a coalition can manipulate the result is polynomial .",
    "our results adapt manipulation procedures for elections where voters can misrepresent their preferences .",
    "we consider two of the most common methods used for deciding sporting competitions , cups and round robins . these correspond to elections run using sequential majority voting ( also known as the cup rule ) and copeland scoring , respectively",
    ".    manipulating a sporting competition is slightly different to manipulating an election as , in a sporting competition , the voters are also the candidates .",
    "a tournament graph describes the outcome of all fair games between opponents .",
    "manipulating a competition therefore modifies not votes but the tournament graph directly .",
    "since it is hard without bribery or similar mechanisms for a team to play better than it can , we consider manipulations where teams in the coalition are only able to throw games . by comparison , in an election , voters in the manipulating coalition can mis - report their preferences in any way they choose .",
    "tang , shoham and lin @xcite addressed this type of tournament manipulation in team competitions by providing conditions for truthful reporting of player strengths .",
    "their method tries to encourage teams to rank their players honestly so that , when the teams compete in bouts , the best player on one team plays the best on the other , the second best plays the opposing second and so forth .",
    "an example of this type of competition is davis cup tennis .",
    "conitzer , sandholm and lang @xcite give an algorithm to determine if a coalition can manipulate the cup rule .",
    "we modify this algorithm to manipulate directly the tournament graph instead of the votes .",
    "bartholdi , tovey and trick @xcite discuss direct manipulations of the tournament under second order copeland , a round robin like rule with secondary tie breaking . using the work of kern and paulusma @xcite",
    ", we show that the manipulation of round robin competitions is directly tied to the problem of winner determination in sports problems .",
    "altman , procaccia and tenneholtz @xcite construct a social choice rule that is monotonic , pairwise non - manipulable and non - imposing .",
    "round robin and cup competitions are monotonic as a single team losing a game does no better .",
    "pairwise non - manipulability means that no two teams are better off by manipulating the tournament .",
    "our results show that round robin and cup competitions are pairwise manipulable and that manipulations can be calculated in polynomial time .",
    "we modify our algorithms to calculate the smallest number of manipulations needed . for cup competitions ,",
    "we add dynamic programming to conitzer , sandholm and lang s algorithm . for round robin competitions , we modify the flow network used to solve winner determination to include weights on manipulations and calculate a minimum cost feasible flow .",
    "vu , altman and shoham @xcite used a similar method to calculate the probability that a team wins the competition .",
    "vu et al .",
    "@xcite provide several results on determining probabilities of teams winning given a seeding of the tournament .",
    "hazon et al .",
    "@xcite showed that it is np - complete to determine if a team wins a cup with a given probability .",
    "this is similar to determining a possible winner given random reseeding except edges in the tournament are labelled with probabilities .",
    "we look at the complexity of manipulation under reseeding in the deterministic case .",
    "finally , we look at the complexity of double elimination cups .",
    "in many sporting competitions , the final winner of a competition is decided by a tree - like structure , called a _",
    "cup_. the most common type is a _ single elimination cup _ , a tree structure where the root and internal nodes represent games and leaves represent the teams in the tournament .",
    "a cup can include a _ bye game _ , a game where a team skips a game to re - balance the schedule .",
    "usually , the top teams are given a bye game while the lower teams do not so that the number of teams in the next round is strict power of two .",
    "cups need to be _ seeded _ to determine which teams play against each other in each round .",
    "one method for seeding is by rank .",
    "the most common method for ranked seeding or reseeding is to have the top team play the worst team , the second place team play the second worst team and so forth .",
    "an example of ranked seeding using this method is the national basketball association in the us .",
    "another method for determining seeding is randomly , also known as a draw .",
    "an example of this is the uefa champions league where teams reaching the quarter finals are randomly paired for the remainder of the tournament .",
    "seeding may also be more complex ( for instance , it may be based on the group from which teams qualify or some other criteria ) .",
    "another way that cups are modified is between fixed and unfixed cups .",
    "a _ fixed cup _ is a cup where there is a single seeding at the start of the cup .",
    "examples of this are the national basketball association and the world cup of football .",
    "unfixed cup _ is one where seeding may occur not only before the start but between any round .",
    "examples with an unfixed cup are the national hockey league and the uefa champions league",
    ".    cups are not necessarily single elimination .",
    "a double elimination cup is designed so that a team can lose two games instead of one game .",
    "if a team loses , they play other teams that have also lost until they lose a second time or they win the final game of the tournament .",
    "these tournaments are organized as two cups where losers enter the second cup at various stages depending on when they lose their first game . finally , a _ round robin competition _ is a competition where each team plays every other team a given number of times . in a _ single round robin competition _ , each team plays every other team exactly once .",
    "another common variant of this is for teams to play a _",
    "double round robin competition _ where each team plays every other team twice , often at home and away .",
    "a _ tournament _ is a directed graph @xmath0 where the underlying undirected graph is a complete graph .",
    "we assume that the tournament is available for the remainder of the paper .",
    "every directed edge @xmath1 represents a victory by @xmath2 over @xmath3 .",
    "the number of the teams in the competition is @xmath4 .",
    "we define a _ manipulation _ of the tournament as any replacement of an edge @xmath5 in the graph with the edge @xmath6 .",
    "this is equivalent to a manipulation of votes but here we are changing the winner directly instead of just changing the vote .",
    "note that , as in election manipulation where the electoral vote is assumed to be known , we assume that we know , via an oracle , the relative strengths of teams and can represent the winner of the contests in the tournament graph .",
    "we restrict manipulations by only allowing the manipulation of an edge @xmath5 if candidate @xmath2 is a member of the coalition .",
    "this restricts the behaviour of the manipulators to throwing games where they could have won .",
    "this restriction is due to the fact that it is simple to perform worse but more difficult to play better .",
    "we consider two different types of manipulations .",
    "a _ constructive manipulation _ is one that ensures a specific team wins the competition .",
    "a _ destructive manipulation _ is one that ensures a specific team loses the competition . for round robin competitions ,",
    "we generalize the concept of the tournament beyond the simple win - loss scoring model to a complete graph where the edge @xmath5 has a non - negative weight @xmath7 which represents the number of points that would be earned by @xmath2 when playing @xmath3 in a fair game .",
    "we define a manipulation in this case as an outcome where the points earned in the match are different to those given by the tournament .",
    "however , manipulations are restricted so that the manipulator achieves no more points and the team being manipulated achieves no less points .    in this section ,",
    "we restrict ourselves to fixed cups with a known seeding .",
    "we also look just at single round robin tournaments though the results generalize to multi - round robin tournaments .      for cup competitions , finding a constructive or destructive manipulation of the tournament is polynomial .",
    "our results make use of results in @xcite which shows that a manipulation of an election using the cup rule can be found in @xmath8 time where @xmath9 is the number of candidates and @xmath10 is the number of voters .    [ cup - constructive ]",
    "determining if a cup competition can be constructively manipulated using manipulations of the tournament takes polynomial time .",
    "this proof is a bottom up version the proof of theorem 2 from conitzer , sandholm and lang ( csl)@xcite but substitutes tournament manipulations for voting manipulations .",
    "the basic csl algorithm is a recursive method that treats each node in the tree ( which is not a leaf ) as a sub - election ( see algorithm csl ) .",
    "conitzer et al .",
    "@xcite note that a team wins a sub - election if and only if they must win one of its children and they can defeat one of the potential winners on the other side .",
    "it is perhaps simpler to understand this algorithm from a bottom up perspective .",
    "observe that if we have two leaf nodes @xmath2 and @xmath3 and there exists an arc in the tournament @xmath5 then @xmath2 wins the match and is a potential winner of the sub election between @xmath2 and @xmath3 .",
    "now suppose that @xmath2 is in the member of the coalition so it is possible for them to replace @xmath5 with @xmath6 in the tournament and therefore @xmath3 is also a potential winner of the sub - election via manipulation .",
    "assume we have some sub - election in the middle of the tournament with two sets of potential winners @xmath11 and @xmath12 .",
    "any team from @xmath11 is a potential winner of the sub - election if there exists a team in @xmath12 that they can defeat or if a coalition member in @xmath12 throws a game .",
    "the same is true for teams in @xmath12 .",
    "therefore , there is a constructive manipulation if the desired winner is a member of the potential winners at the top node in the cup tree .",
    "the original algorithm looked at @xmath13 pairs of opponents as no two teams were compared more than once .",
    "note that the original analysis provided a looser @xmath14 bound on the number of comparisons , but this can be tightened by an observation of vu et al .",
    "the difference between direct manipulation of the tournament and the method by conitzer , sandholm and lang is that determining if a team could defeat another team meant summing all values of the @xmath10 voters requiring @xmath15 time whilst in the direct manipulation of the tournament this can be done in constant time . therefore , constructive manipulation of the tournament under the cup rule takes just @xmath13 time .",
    "[ elimsetflowalgo ]    @xmath16    we observe that destructive manipulation of a competition using tournament manipulations is similar since this simply requires determining if there is at least one other possible winner of the tournament via manipulations .    determining if a cup tournament can be destructively manipulated using tournament manipulations takes polynomial time .",
    "we just determine if we can constructively manipulate the tournament for each other team in turn than the one we wish to lose .      for round robin competitions , manipulations of the tournament",
    "can be computed in polynomial time for a restricted class of scoring models .",
    "we define a _ scoring model _ to be the set of tuples giving the possible outcomes of a game .",
    "copeland scoring has a simple win - loss ( @xmath17 ) scoring model where the wining team earns one point and the losing team earns none .",
    "bartholdi , tovey and trick@xcite showed that constructive manipulation can be determined in polynomial time for a chess scoring model ( @xmath18 ) .",
    "faliszewski et al .",
    "@xcite showed that for a range of scoring models manipulating copeland voting is np - complete .",
    "first , we discuss the problem of determining which games need to be manipulated to ensure that a given team @xmath19 wins the competition .",
    "clearly , there are some games that can not be affected by the coalition and are fixed .",
    "all other games are manipulable .",
    "games between coalition members can earn any of the possible scores allowed by the scoring model .",
    "we restrict games against non - coalition members by only allowing the manipulator to earn less points and the non - member earns more . determining if a given team can be made a winner is analogous to determining if a team wins a round robin tournament when the fixed games have been played and the manipulable games have not been played .",
    "the restriction of the outcomes on games between coalition and non - coalition members requires that the games have outcomes within only a subset of the scoring model . using this observation",
    ", we obtain the following theorem .    [ round - robin - constructive ]",
    "determining if there exists a constructive manipulation of a round robin competition is polynomial if the normalized scoring model is of the form @xmath20 and np - complete , otherwise .",
    "this proof uses the equivalence of determining whether a team can win a tournament and determining if a constructive manipulation exists with a set of fixed and manipulable games . note that a game between a non - coalition member @xmath2 and a coalition member @xmath3 is unfixed but the scores that can be assigned are restricted .",
    "when the scoring model is of the form @xmath20 and the initial result of the game is @xmath21 , then the remaining valid scores that can be assigned are those from @xmath21 to @xmath22 . by normalizing this new model",
    ", we obtain one in which the non - coalition member earns @xmath23 points by default and the result of the game is scored from the model @xmath24 which is of the form @xmath20 . kern and paulusma",
    "@xcite showed that determining if a team can win a tournament ( i.e. is not eliminated from competition ) takes polynomial time if the normalized scoring model is of the form @xmath20 and is np - complete otherwise .    by comparison",
    ", it is always polynomial to determine if a destructive manipulation exists .",
    "determining if there is a destructive manipulation of a round robin competition takes polynomial time .",
    "assume that @xmath25 is the team that the coalition desires to lose .",
    "it is sufficient to check whether the maximum points of another team via manipulation is greater than the points of @xmath25 . if @xmath25 is a member of the coalition and therefore a manipulator , for each team @xmath26 that we check for points , we apply only manipulations that increase the relative points between @xmath26 and @xmath25 . for all other teams ,",
    "we apply the manipulation which decreases the points of @xmath25 the most .",
    "if @xmath25 is not a member of the coalition , no games involving @xmath25 may be manipulated since we restrict manipulations to allow only those manipulations that increase the points of @xmath25 and increase the relative gap between @xmath25 and the manipulator .",
    "therefore , no other team is better off when games involving @xmath25 are manipulated . in both cases ,",
    "we apply the manipulation that increase the points of the team under consideration against all other teams .",
    "if the total number of points of any other team is greater than the points of @xmath25 under these manipulations , then there is a destructive manipulation of @xmath25 .",
    "this algorithm can be run in @xmath27 time .",
    "a further complication is when the goal of manipulation is just to earn a berth in the next round of the playoffs .",
    "it is np - hard to decide these questions under most playoff systems for all scoring models @xcite .",
    "the number of manipulations required is an important factor",
    ". it may be advantageous for the coalition to manipulate as few games as possible to avoid detection or to minimize the cost of bribing players .",
    "we show that there is a polynomial algorithm to calculate manipulations which throw a minimal number of games .",
    "this highlights the vulnerability of the two most common types of competitions in sports to manipulation .      computing the minimal number of manipulations simply requires keeping a count within our algorithm for computing a manipulation .",
    "we give some notation to identify a specific sub - election in the cup .",
    "we let @xmath28 be the sub - election at level @xmath29 where @xmath2 is a leaf node of a sub tree below @xmath28 .",
    "we denote the level as the height from the bottom of the cup tree , which is assumed to be a perfect binary tree .",
    "we also define level 0 to be the level belonging to the leaves .",
    "we have @xmath30 constants @xmath31 that are 1 if @xmath32 and 0 otherwise , where @xmath33 is the set of edges which can be manipulated by the coalition .",
    "this corresponds to @xmath34 when a manipulation must occur for @xmath2 to win and 0 otherwise .",
    "finally , we define the minimal number of manipulations needed to win a sub - election @xmath28 , @xmath35 , to be sum of the minimal number of the manipulations for @xmath2 to win one of the children of @xmath28 , and the minimum number of manipulations plus @xmath31 over all possible winners of the other child which @xmath2 can defeat .",
    "we denote the set of teams that @xmath2 can defeat either as described in the tournament or by manipulation as @xmath36 .",
    "more formally , the minimal number of manipulations for @xmath2 at @xmath28 ( @xmath37 ) is given by :    @xmath38    [ lemma - cup - min ] the minimal number of manipulations needed to make a team @xmath2 a winner at level @xmath10 in the tree is equal to @xmath39 .",
    "by induction . first , observe that the minimal number of manipulations at a leaf is 0 .",
    "hence , @xmath40 for all leaves @xmath2 .",
    "next note that at level 1 there are only 2 nodes in the possible winner sets of the leaves . therefore if @xmath2 can defeat @xmath3 , @xmath41 which is the exact number of manipulations that have occurred to make @xmath2 a possible winner so far .",
    "we assume the premise for @xmath42 .",
    "now , @xmath43 .",
    "we know that @xmath44 is the minimal number of manipulations for @xmath2 up to level @xmath45 by the assumption and , for every @xmath46 , we know that @xmath47 is also the minimal number of manipulations for each @xmath3 up to level @xmath45 . by definition , @xmath31 is the number of manipulations for @xmath2 to defeat @xmath3 .",
    "since @xmath2 can defeat any @xmath3 in @xmath36 , the one with the fewest previous manipulations to reach @xmath45 plus @xmath31 leads to the fewest manipulations in total to make @xmath2 win the sub election @xmath48 .",
    "this equals the minimum over the set @xmath36 .",
    "therefore the lemma holds for @xmath49 and , by induction , all @xmath10 levels of the tree .",
    "[ theorem - cup - min ] a modified csl algorithm , where the team which minimizes the value of @xmath39 is selected to lose to team @xmath2 at every node @xmath50 , calculates the minimal number of manipulations needed to constructively or destructively manipulate a cup competition in polynomial time .    by lemma [ lemma - cup - min ] ,",
    "the value of @xmath51 at the root node is the minimal number of manipulations which ensures @xmath52 is the winner .",
    "hence , we just need to show that the algorithm remains polynomial .",
    "the modified csl algorithm still makes @xmath53 comparisons .",
    "the only difference is that we have to calculate the minimum which can be done by storing the minimum as each team is checked .",
    "therefore , the time complexity remains @xmath53 and calculating the minimum is polynomial .",
    "constructive manipulation requires calculating @xmath51 whilst destructive manipulation requires the minimum over all other teams .",
    "we consider here just copeland scoring .",
    "we conjecture that similar methods could be developed for other scoring schemes",
    ".    given a tournament @xmath54 where @xmath55 , a set of manipulable edges @xmath33,and a distinguished node @xmath19 , the minimal number of manipulations under copeland scoring is the problem of determining the minimal number of edges in @xmath56 that can be reversed such that @xmath57 .",
    "note that copeland scoring is the simple win - loss method of scoring where the winning team earns 1 point and the losing team earns 0 points .",
    "before we show how to calculate the minimal number of manipulations , we show that we can determine the out degree , i.e.  the copeland score , of the distinguished node using a minimal number of manipulations in isolation with a greedy algorithm .",
    "the intuition behind this is that we select manipulations to increase the out degree of @xmath52 .",
    "the value of @xmath58 can be determined in isolation by greedily using , in sequence , a minimal number of manipulations of edges @xmath59 where @xmath60 until @xmath61 .    first , we prove that it always uses the least number of manipulations to increase the out degree of @xmath52 .",
    "to reduce the out degree of two or more nodes that have an out degree larger than @xmath52 , it takes at least two manipulations but to increase the out degree of @xmath52 by the same amount takes just one . for a single node ,",
    "it is preferred to use the manipulation involving @xmath52 since the other node may increase the out degree of another node requiring more manipulations .",
    "therefore , using manipulations involving @xmath52 is most efficient .",
    "now we show that we never overshoot the stopping criteria and use more than a minimal number of manipulations .",
    "assume that we use more than the minimal number of manipulations .",
    "this means that we selected an edge that did not decrease the maximum out degree when there existed an edge that would have decreased the maximum out degree of all nodes that we did not select .",
    "however , since we always selected the edge where the source node had the maximal out degree within @xmath56 , we always decreased the maximum out degree whenever possible .",
    "this is a contradiction and the greedy algorithm only uses a minimal number of manipulations when reaching the stopping condition .",
    "determining the minimal number of tournament manipulations required under copeland scoring takes polynomial time .",
    "we define @xmath62 to be the out degree of the distinguished node , @xmath52 , calculated using the greedy algorithm .",
    "this corresponds to the number of wins earned by @xmath52 .",
    "if the stopping condition has not been reached , we must use @xmath62 to determine how many more manipulations are necessary .",
    "we construct a winner determination flow graph as described by kern and paulusma @xcite and gusfield and martel@xcite(see fig .",
    "[ tournament - flowgraph ] , for example ) .",
    "we add a weight of 1 to each edge @xmath5 where @xmath63 and therefore represents a manipulation .",
    "all other edges have the weight 0 . the feasible flow which uses the fewest of the non - zero edges",
    "is the minimal number of tournament manipulations to achieve a constructive manipulation . since the value of @xmath62 can be determined in a linear number of steps , we only need to do a single min cost flow computation , which is polynomial , to determine the remainder of the minimum number of manipulations necessary to make @xmath52 the team with the highest copeland score .",
    "an example tournament can be seen in fig .",
    "[ tournament - flowgraph]a .",
    "there are 5 teams in this tournament : @xmath64 to @xmath65 .",
    "suppose teams @xmath64 and @xmath66 form a coalition to manipulate the tournament so that @xmath64 wins . we want to determine the minimum number of manipulations needed to ensure that @xmath64 is the winner .",
    "this requires switching any of the arcs where team @xmath66 wins .",
    "we know that the value of @xmath67 since none of @xmath64 s edges are manipulable in @xmath68 s favour .",
    "we construct the graph seen in fig .",
    "[ tournament - flowgraph]b to determine for @xmath67 if there is a feasible solution .",
    "the solution returned has a minimum cost which is equal to the minimum number of manipulations needed to get a feasible flow with the value @xmath62 plus any used in the greedy algorithm .",
    "p0.05c p0.1c &    = [ font= ] ( v0 ) [ ] @xmath68 ; ( v1 ) [ below right of = v0 ] @xmath69 ; ( v2 ) [ below of = v1 ] @xmath70 ; ( v4 ) [ below left of = v0 ] @xmath71 ; ( v3 ) [ below of = v4 ] @xmath72 ;    = [ font= ] ( v0 ) edge node ( v1 ) ( v0 ) edge node ( v3 ) ( v1 ) edge node ( v2 ) ( v2 ) edge node ( v0 ) ( v2 ) edge node ( v4 ) ( v3 ) edge node ( v1 ) ( v3 ) edge node ( v2 ) ( v3 ) edge node ( v4 ) ( v4 ) edge node ( v0 ) ( v4 ) edge node ( v1 ) ;    & &    = [ font= ] ( b1 ) @xmath73 ; ( b2 ) [ below of = b1 ] @xmath74 ; ( b3 ) [ below of = b2 ] @xmath75 ; ( b4 ) [ below of = b3 ] @xmath76 ; ( b5 ) [ below of = b4 ] @xmath77 ; ( b6 ) [ below of = b5 ] @xmath78 ; ( a ) [ below left of = b2 , node distance=2.125cm]@xmath79 ; ( c1 ) [ right of = b2,node distance=3 cm ] @xmath80 ; ( c2 ) [ right of = b3,node distance=3 cm ] @xmath81 ; ( c3 ) [ right of = b4,node distance=3 cm ] @xmath66 ; ( c4 ) [ right of = b5,node distance=3 cm ] @xmath65 ; ( d ) [ right of = a , node distance=6 cm ] @xmath82 ; = [ font= ] ( a ) edge node [ sloped , pos=0.8 ] @xmath83 $ ] ( b1 ) ( a ) edge node [ sloped , pos=0.95 ] @xmath83 $ ] ( b2 ) ( a ) edge node [ sloped , pos=0.95 ] @xmath83 $ ] ( b3 ) ( a ) edge node [ sloped , pos=0.3 ] @xmath83 $ ] ( b4 ) ( a ) edge node [ sloped , pos=0.45 ] @xmath83 $ ] ( b5 ) ( a ) edge node [ sloped , pos=0.45 ] @xmath83 $ ] ( b6 ) ( b1 ) edge node [ sloped , midway ] @xmath84 $ ] ( c3 ) ( b1 ) edge node [ sloped , very near start ] @xmath84,w=1 $ ] ( c1 ) ( b2 ) edge node [ sloped , midway ] @xmath84 $ ] ( c1 ) ( b3 ) edge node [ sloped , pos=0.3 ] @xmath84,w=1 $ ] ( c2 ) ( b3 ) edge node [ sloped , near start ] @xmath84 $ ] ( c3 ) ( b4 ) edge node [ sloped , near start ] @xmath84 $ ] ( c2 ) ( b5 ) edge node [ sloped , pos=0.6 ] @xmath84,w=1 $ ] ( c4 ) ( b5 ) edge node [ sloped , midway ] @xmath84 $ ] ( c3 ) ( b6 ) edge node [ sloped , midway ] @xmath84 $ ] ( c4 ) ( c1 ) edge node [ sloped , pos=0.2 ] @xmath85 $ ] ( d ) ( c2 ) edge node [ sloped , pos=0.1 ] @xmath85 $ ] ( d ) ( c3 ) edge node [ sloped , pos=0.7 ] @xmath85 $ ] ( d ) ( c4 ) edge node [ sloped , pos=0.7 ] @xmath85 $ ] ( d ) ;     + & ( a ) & & ( b )",
    "if we add multiple seeding rounds then computing a manipulation appears difficult . recall that ranked reseeding matches the best remaining teams against the worst remaining teams in each round .",
    "the csl algorithm can not therefore be applied and a general solution is not known . however ,",
    "if the size of the coalition is a constant @xmath62 , then we can determine a manipulation in polynomial time .",
    "[ ranked - reseeding - cup ] for a ranked reseeding cup competition , if the manipulating coalition is of bounded size @xmath62 , then determining a set of manipulations that makes a team win takes polynomial time .",
    "the key observation is that with a constant sized coalition there are only a polynomial number of ways to manipulate the games by rearranging the tournament graph .",
    "it suffices to check the winner of each of the polynomial number of fixed tournament graphs . for each fixed tournament graph",
    ", the winner can be determined in linear time as there are only @xmath86 matches to check .",
    "we show that there are only a polynomial number of different arrangements of manipulations",
    ". first note that at most @xmath62 of the @xmath87 matches in the first round have more than one team as a possible winner .",
    "this means that there is at most @xmath88 possibilities to examine after each round .",
    "as there are @xmath89 rounds , we consider at most @xmath90 ( = @xmath91 ) possibilities .",
    "hence there are at most @xmath92 arrangements of manipulations for an unfixed cup with ranked reseeding and a constant sized coalition .",
    "it is sufficient to check each arrangement , which can be done in linear time .",
    "this gives a polynomial algorithm for bounded @xmath62 .    with random reseeding",
    "the problem can be separated into two issues : determining whether manipulation is possible to make a team a winner under every possible seeding and determining if there exists any seeding such that the coalition can manipulate the games to make a given team the winner .",
    "it is unknown whether either of these problems have polynomial algorithms .",
    "vu et al .",
    "@xcite and hazon et al .",
    "@xcite tackle some probabilistic variants of possible winners without manipulation of games .",
    "however , the complexity of determining possible winners with a win - loss tournament graph in balanced cup trees remains open @xcite .",
    "in a double elimination competitions , a manipulation of the tournament does not automatically bounce the manipulator out of the tournament as in the single elimination case .",
    "however , it does guarantee that the manipulator will be bounced to the secondary bracket from the primary bracket on the first manipulation and out of the tournament on the second manipulation . as in the case of ranked reseeding ,",
    "a general solution is not known but there is a polynomial algorithm for double elimination tournaments if the coalition is of constant size .    for double elimination tournaments , if the coalition is of a constant size @xmath62 , determining whether there is a constructive manipulation takes polynomial time .",
    "this proof follows similar lines as the proof for ranked reseeding .",
    "we will show that there is a polynomial number of manipulation scenarios which can be checked in linear time .",
    "if there is a coalition of size @xmath62 then a team can manipulate the cup only once if they wish to win the tournament and twice if they desire another team to win . at each step in the tree ,",
    "a team must decided whether they wish to manipulate or not . before and after they have manipulated once , there remains @xmath62 teams which can manipulate .",
    "only after they have manipulated a second time are they removed from the competition .",
    "this means there are at most @xmath88 manipulations at each of the @xmath93 levels .",
    "this gives us @xmath94 possibilities that can be checked in linear time , which gives a polynomial algorithm for determining if there is a constructive manipulation .",
    "in sporting tournaments , teams can directly manipulate the tournament graph .",
    "we showed that algorithms used to compute manipulations of votes in elections can be modified to determine the manipulations needed of the tournament graph .",
    "we proved that such direct manipulation of the fixed cup and round robin competitions can be computed in polynomial time . in a similar way",
    ", we can determine the minimal number of manipulations needed .",
    "for ranked reseeding of cup competitions , we showed that it is easy to calculate the number of manipulations if the size of the manipulating coalition is bounded by a constant .",
    "we also gave a polynomial time algorithm for double elimination tournaments for a constant sized coalition .",
    "a number of open question remain .",
    "the manipulation of various variations of the cup competition have unknown complexity including the ranked and random cup competitions . for random cup competitions ,",
    "the complexity of manipulation is also unknown if the size of the coalition is bounded .",
    "similarly , the complexity of manipulating double elimination competitions is still undetermined when the size of the coalition is unbounded .",
    "m.  s. pini , f.  rossi , k.  b. venable , and t.  walsh .",
    "dealing with incomplete agents preferences and an uncertain agenda in group decision making via sequential majority voting . in _ proc .",
    "of the 11th int .",
    "conf . on principles of knowledge representation and reasoning _ , 2008 ."
  ],
  "abstract_text": [
    "<S> in sports competitions , teams can manipulate the result by , for instance , throwing games . </S>",
    "<S> we show that we can decide how to manipulate round robin and cup competitions , two of the most popular types of sporting competitions in polynomial time . </S>",
    "<S> in addition , we show that finding the minimal number of games that need to be thrown to manipulate the result can also be determined in polynomial time . </S>",
    "<S> finally , we show that there are several different variations of standard cup competitions where manipulation remains polynomial . </S>"
  ]
}