{
  "article_text": [
    "let @xmath5 be a graph with vertices @xmath6 and @xmath7 edges .",
    "@xmath5 is a _ minimally rigid graph _ ( also called _ laman graph _ ) if @xmath8 and every subset of @xmath9 vertices spans at most @xmath10 edges .",
    "an embedding of the graph @xmath11 on a set of points @xmath12 is a mapping of the vertices to points in the euclidean plane @xmath13 .",
    "the edges @xmath14 of @xmath5 are mapped to straight line segments @xmath15 .",
    "an embedding is _ planar _ or _ non - crossing _ if no pair of segments @xmath16 and @xmath17 corresponding to non - adjacent edges @xmath18 have a point in common .",
    "an embedded laman graph on the _ generic _ point sets is called _ laman framework _ and has the special property of being _ minimally rigid _",
    "@xcite , when viewed as bar - and - joint _ frameworks _ with fixed edge - lengths , which motivates the tremendous interest in their properties .",
    "let @xmath19 be a set of non - crossing edge ( bar ) on @xmath20 .",
    "a laman framework containing @xmath19 is called _ f - constrained_. in this paper we give an algorithm for enumerating all the _ f - constrained non - crossing laman frameworks_.    in this paper we only consider planar embedded laman graphs , namely laman frameworks .",
    "then we simply denote a vertex @xmath21 by @xmath22 and an edge @xmath15 by @xmath14 .",
    "* novelty .",
    "* to the best of our knowledge , this is the first algorithm proposed for enumerating ( without repetitions , in polynomial time and without using additional space ) all the @xmath19-constrained non - crossing laman frameworks .",
    "we achieve @xmath3 time per graph in @xmath4 space by using reverse search . for the unconstrained case , using a different method , the same time and space complexity results we obtained in @xcite .",
    "the method presented here uses matroid property and is considerably simpler than @xcite",
    ".    * historical perspective .",
    "* the reverse search enumeration technique of avis and fukuda @xcite has been successfully applied to a variety of combinatorial and geometric enumeration problems .",
    "the necessary ingredients to use the method are an implicitly described connected graph on the objects to be generated , and an implicitly defined spanning tree in this graph . in this paper",
    "we supply these ingredients for the problem of generating laman frameworks .",
    "relevant to the historical context of our work are the results of bereg @xcite using reverse search combined with data - specific lexicographic orderings to enumerate triangulations and pointed pseudo - triangulations of a given point set .",
    "we notice in passing that there exist several other algorithms for enumerating ( pseudo-)triangulations @xcite , but they are based on different techniques .    also relevant is the pebble game algorithm of jacobs and hendrickson @xcite for 2-dimensional rigidity , see also @xcite .",
    "our complexity analysis relies on the recent results , due to lee , streinu and theran @xcite , regarding the detailed data - structure complexity of finding and maintaining rigid components during the pebble game algorithm .",
    "indeed , the time - space trade - off of our algorithm is inherited from @xcite . *",
    "related previous works . * to better put our problem ( and solution ) in context and relate it to previous work , we briefly discuss now the difference between generating arbitrary laman frameworks , as opposed to just pointed pseudo - triangulations .",
    "a _ pointed pseudo - triangulation _ is a special case of a non - crossing laman framework @xcite , where every vertex in the embedding is incident to an angle larger than @xmath23 .",
    "pseudo - triangulations are connected via simple _ flips _ , in which the removal of any non - convex - hull edge leads to the choice of a _",
    "unique _ other edge that can replace it , in order to restore the pointed pseudo - triangulation property .",
    "the flip graph of all pointed pseudo - triangulations is a connected subgraph of the graph of all the laman frameworks .",
    "in fact , it is the one - skeleton of a polytope @xcite , and the reverse search technique can be directly applied to it .",
    "bereg s efficient algorithm makes use of specific properties of pointed pseudo - triangulations which do not extend to arbitrary non - crossing laman frameworks . in particular , remove - add flips are _ not unique _ , relative to the removed edge , in the case of a non - crossing laman framework . in our previous paper @xcite",
    "we showed that a set of all non - crossing laman frameworks on a point set is connected via these flips .",
    "the proof relies on some properties of one - degree - of - freedom mechanisms which is obtained when removing one edge from the laman frameworks , which can not extend to edge constrained case .    in this paper",
    "we use triangulation as an important tool .",
    "we use the fact that ( constrained ) non - crossing laman frameworks form the bases of a matroid defined on any triangulation of @xmath20 to define a parent function . the edge constrained case appears in an application to structural engineering as will be seen below , and the proposed algorithm will much reduce the output size compared with the unconstrained case .",
    "therefore , we can enumerate non - crossing laman frameworks for previously unsolved real problems .",
    "* motivating application .",
    "* we describe now briefly how this problem came to our attention via the work of the third author .",
    "graph theoretical approaches are widely used in _ structural mechanics _",
    "@xcite , where the edges and vertices in the graph represent the bars and rotation - free joints of a structure called a _",
    "truss_. it is well - known that the stiffest truss under static loads is statically determinate that is equivalent to a laman graph @xcite .    another bar - joint system , which is widely used in industrial application , is a link mechanism that is unstable and generates large deformation or changes the direction of the nodal displacement .",
    "the applications of link mechanisms can be found in , e.g. , suspension of automobiles , robot hands , umbrellas , crank shafts , etc .",
    "kawamoto et al.@xcite presented a method by enumeration of the planar graphs to find an optimal mechanism .",
    "however , their method is developed for their specific problem , and no general approach was given .",
    "recently , a new type of mechanism called compliant mechanism has been developed and applied mainly in the field of micro - mechanics .",
    "a compliant mechanism has flexible parts to stabilize the structure , which is contrary to the conventional unstable mechanism .",
    "although a compliant mechanism is usually modelled as a continuum with elastic joints , it is possible to generate the similar mechanism by a bar - joint system .",
    "ohsaki and nishiwaki @xcite presented a method for generating flexible bar - joint mechanisms using nonlinear programming approach , and found that the optimal structure is statically determinate , i.e. minimally rigid .",
    "they utilized snapthrough behaviour to generate multi - stable mechanism that has multiple self - equilibrium states .",
    "such mechanism can be used for switching device , robot hand , gripper , deployable structure , etc . in their method , the optimal locations of bars and joints are found from the highly connected initial structure that has bars between all the pairs of the nodes whose distances are small enough .",
    "combining an implementation of our our earlier method for generating unconstrained laman frameworks @xcite with this nonlinear programming approach , we could obtain many new compliant mechanisms with up to 10 joints @xcite .",
    "however the number of laman frameworks grows too rapidly to allow a complete enumeration for significantly larger examples .    in view of practical requirements ,",
    "the optimal structure should not have intersecting members , and some pre - selected members should always exist .",
    "therefore , the computational cost may be much reduced if the candidate set of statically determinate non - crossing trusses ( non - crossing laman frameworks ) are first enumerated .",
    "thus , it is desirable to enumerate laman frameworks for which the existing edges are specified , and this is the problem considered in the current paper .",
    "let @xmath24 be a non - crossing laman framework on a given point set @xmath20 .",
    "a _ mechanism _ is a flexible framework obtained by removing one or more edges from a laman framework .",
    "its _ number of degrees of freedom _ or _ dof _",
    "s , is the number of removed edges .",
    "we will encounter mostly _ one - degree - of - freedom ( 1dof ) mechanisms _ , which arise from a laman framework by the removal of one edge .",
    "in particular , a mechanism with @xmath25 dofs has exactly @xmath26 edges , and each subset of @xmath27 vertices spans at most @xmath10 edges . a subset of some @xmath27 vertices spanning _",
    "@xmath10 edges is called a _ rigid block_. a _ maximal block _ is called a _ rigid component _ or a _",
    "body_. the laman frameworks on the generic point set with @xmath0 points form the set of _ bases _ of the _ generic rigidity matroid _ ( or simply called _ laman matroid _ ) on @xmath28 , see @xcite .",
    "the bases have all the same size @xmath29 .",
    "bases may be related via the _ base exchange _ operation , which we will call a _ flip _ between two laman frameworks .",
    "two laman frameworks @xmath30 and @xmath31 are connected by a flip if their edge sets agree on @xmath32 elements .",
    "the flip is given by the pair of edges @xmath33 not common to the two bases , @xmath34 , @xmath35 .",
    "using flips , we can define a graph whose nodes are _ all _ the laman frameworks on @xmath0 vertices , and whose edges correspond to flips .",
    "it is well - known that the graph whose nodes are the bases of a matroid connected via flips , is connected . but",
    "a priori , the subset of _ ( constrained ) non - crossing laman frameworks _ may not necessarily be .",
    "we will prove this later in section [ sec : main ] .",
    "reverse search is a memory efficient method for visiting all the nodes of a connected graph that can be defined implicitly by an adjacency oracle .",
    "it can be used whenever a spanning tree of the graph can be defined implicitly by a _ parent _ function .",
    "this function is defined for each vertex of the graph except a pre - specified _",
    "root_. iterating the parent function leads to a path to the root from any other vertex in the graph .",
    "the set of such paths defines a spanning tree , known as the _ search tree_.",
    "let @xmath36 be a triangulation on a given set of @xmath0 points @xmath20 in the plane containing @xmath25 triangles .",
    "the angle vector of @xmath36 is the vector of @xmath37 interior angles sorted into non - decreasing order .",
    "let @xmath19 be a non - crossing edge set on @xmath20 .",
    "an _ f - constrained triangulation _ on @xmath20 is one that contains @xmath19 as a subset .",
    "many facts about these triangulations are contained in the survey by bern and eppstein @xcite . if @xmath19 is an independent set in the laman matroid on @xmath28 , then a laman framework containing @xmath19",
    "is called _",
    "@xmath19-constrained_. the following lemma clearly holds from the known fact about matroids ( see , e.g.@xcite ) .",
    "[ lemma : minor ] let @xmath19 be a non - crossing edge set on @xmath20 that is an independent set in the laman matroid on @xmath28 .",
    "let us fix @xmath19-constrained triangulation @xmath36 on @xmath20 .",
    "then a set of bases of the laman matroid on @xmath36 whose edge set contains @xmath19 forms matroid .",
    "[ lemma : trilam ] let @xmath19 be a non - crossing edge set on @xmath20 that is an independent set in the laman matroid on @xmath28 .",
    "every @xmath19-constrained triangulation @xmath36 on @xmath20 contains an @xmath19-constrained laman framework .",
    "since @xmath36 is statically rigid , it is generically rigid , and hence contains a base @xmath38 of the laman matroid ( see , e.g. whiteley @xcite ) . since @xmath19 is independent in the laman matroid , it can be extended to a base by adding edges from @xmath39 .",
    "two points @xmath40 and @xmath41 are _ visible _ if no edge of @xmath19 properly intersects the segment @xmath42 .",
    "@xmath42 is _ visible _ to point @xmath43 if the triangle @xmath44 is not properly intersected by an edge of @xmath19 .",
    "( cdt ) an f - constrained delaunay triangulation ( cdt ) contains the edge @xmath42 between points @xmath40 and @xmath41 in @xmath20 if and only if @xmath40 is visible to @xmath41 , and some circle through @xmath40 and @xmath41 contains no point of @xmath20 visible to segment @xmath42 .",
    "we call @xmath42 a d(elaunay)-edge .",
    "( definition 1 , @xcite )    if @xmath20 has four or more co - circular points , using a linear transformation as described in @xcite , we may transform @xmath20 into a point set @xmath45 with a unique cdt . @xmath20 and",
    "@xmath45 have the same non - crossing laman frameworks .",
    "then we will assume in what follows that @xmath20 has a unique cdt .",
    "( d - flip ) let @xmath46 be an edge of @xmath47 which is the diagonal of a convex quadrilateral @xmath48 contained in @xmath36 .",
    "the edge flip which replaces @xmath46 by edge @xmath49 is a d - flip if the circumcircle of the triangle @xmath44 contains the point @xmath50 in its interior .",
    "( equivalently the circumcircle of the triangle @xmath51 contains the point @xmath41 in its interior . )",
    "we call @xmath46 a _ @xmath19-illegal edge _ , otherwise it is called _",
    "@xmath19-legal edge_.    note that a d - flip increases the angle vector lexicographically . this can be used to prove the following .",
    "[ fact : angle ] the cdt has the lexicographically maximum angle vector of all @xmath19-constrained triangulations on @xmath20 .",
    "( theorem 1 , @xcite ) .",
    "[ fact : d - flip ] an @xmath19-constrained triangulation @xmath36 can be converted to the cdt by at most @xmath4 d - flips , taken in any order .",
    "( lemma 4 , @xcite ) .",
    "now let us consider non - crossing laman frameworks .",
    "a _ constrained delaunay laman framework ( cdlf ) _ is an @xmath19-constrained laman framework that is a subset of the @xmath52 .",
    "( l - flip ) an l - flip is an edge insertion and deletion that takes a laman framework @xmath24 to a new laman framework @xmath53 .",
    "[ theo1 ] every @xmath19-constrained non - crossing laman framework @xmath24 can be transformed to a cdlf by at most @xmath4 l - flips .    before giving the proof of theorem [ theo1 ]",
    ", we define the underlying triangulation @xmath54 for a non - crossing laman framework @xmath24 , which is @xmath24-constrained delaunay triangulation .",
    "[ teigi : l - constrained_delaunay ] let @xmath24 be a non - crossing laman framework .",
    "the @xmath24-constrained delaunay triangulation @xmath54 is constructed by adding edges to @xmath24 in the following way .",
    "first , we add convex hull edges if missing in @xmath24 , and for each planar face of @xmath24 we compute its ( internal ) constrained delaunay triangulation , and add these new edges .    by this construction",
    ", we have the following fact :    [ fact : under_tri ] let @xmath24 be a @xmath19-constrained non - crossing laman framework .",
    "then all @xmath19-illegal edges in @xmath54 are the edges of @xmath55 .",
    "suppose that @xmath24 has an @xmath19-illegal edge .",
    "then , from fact [ fact : under_tri ] , such a @xmath19-illegal edge , say @xmath46 , is among the edges of @xmath55 .",
    "consider removing @xmath46 .",
    "the updated underlying triangulation @xmath56 contains @xmath57 , and by lemma [ lemma : trilam ] and the matroid property shown by lemma [ lemma : minor ] , there is some edge @xmath58 in @xmath56 such that @xmath59 is a non - crossing laman framework .",
    "the fact that @xmath46 is @xmath19-illegal edge implies that there exists at least one d - flip when updating @xmath54 to @xmath56 , which lexicographically increases the angle vector .",
    "from fact [ fact : angle ] and [ fact : d - flip ] , repeating this procedure @xmath4 times , we eventually reach the @xmath19-constrained delaunay triangulation @xmath60 , and @xmath61 is the required cdlf .    for edges",
    "@xmath62 with @xmath63 and @xmath64 with @xmath65 , we use the notation @xmath66 or @xmath67 when @xmath68 is lexicographically smaller than @xmath69 i.e. , either @xmath70 or @xmath71 and @xmath72 , and @xmath73 when they coincide . for an edge set @xmath74",
    "we use the notations @xmath75 and @xmath76 to denote the lexicographically largest and smallest labelled edges in @xmath74 , respectively .",
    "( lexicographic edge list ) let @xmath77 and @xmath78 be the lexicographically ordered edge lists . then @xmath79 is lexicographically smaller than @xmath80 if @xmath81 for the smallest @xmath22 such that @xmath82 .",
    "[ theo2 ] the set of @xmath19-constrained non - crossing laman frameworks on a point set @xmath20 is connected by @xmath4 edge flip operations .    by the previous theorem , from any non - crossing laman framework",
    "we can perform l - flips @xmath4 time to reach a cdlf , say @xmath24 .",
    "let @xmath83 be the cdlf with lexicographically smallest edge list .",
    "we show that we can do edge flips from @xmath24 to @xmath83 , at most @xmath84 times , maintaining the non - crossing laman property . indeed , delete from @xmath24 the largest indexed edge @xmath46 in @xmath85 . by the matroid properties",
    ", there will always be an edge in @xmath86 to insert that maintains the laman framework property .",
    "in fact , the 1dof mechanism @xmath57 is not maximum component and can be extended to a base by adding an edge from @xmath86 .",
    "planarity is maintained since both @xmath24 and @xmath83 are subsets of the cdt which is non - crossing .",
    "let @xmath87 be the number of edges of the triangulation on @xmath20 .",
    "by euler s formula , @xmath88 holds , where @xmath89 is the number of points on the convex hull of @xmath20 .",
    "then @xmath24 has at most @xmath84 edges which are not in @xmath83 .",
    "since we can replace one of such edges by an edge of @xmath83 by one edge flip , we eventually reach @xmath83 by @xmath84 edge flips .",
    "let @xmath90 be a set of @xmath19-constrained non - crossing laman frameworks on @xmath20 , and @xmath91 be a set of the cdlfs . clearly @xmath92 holds .",
    "let @xmath83 be the cdlf with lexicographically smallest edge list .",
    "we define the following _ parent function _",
    "@xmath93 based on theorem [ theo1 ] and [ theo2 ] .    [ def : parent ] ( parent function ) let @xmath94 with @xmath95 .",
    "@xmath96 is the parent of @xmath24 , where + case 1 : @xmath97 , + @xmath98 and @xmath99 , + case 2 : @xmath100 , + @xmath101 and @xmath102 .    to simplify the notations",
    ", we denote the parent function depending on case 1 and case 2 by @xmath103 and @xmath104 , respectively . in fig.[fig : parent ] , we show the example of @xmath105 in which @xmath24 is not a cdlf : removing the largest indexed @xmath19-illegal edge @xmath106 , and inserting the smallest indexed edge @xmath107 in @xmath108 , we obtain another non - crossing laman framework shown in the rightmost and upper corner of fig .",
    "[ fig : parent ] .    , and the dotted lines represent additional edges for the underlying triangulations . ]",
    "the reverse search algorithm can be considered on the underlying graph in which each vertex corresponds to a non - crossing laman framework and two frameworks are _ adjacent _ if and only if one can be obtained from the other by a l - flip .",
    "then , for @xmath109 the local search is given by an _",
    "adjacency function _ ,",
    "@xmath110 , defined as follows : @xmath111 where @xmath112 and @xmath113 .",
    "the number of candidate edge pairs @xmath33 is @xmath3 .",
    "let @xmath114 and @xmath115 be the list of edges of @xmath53 and @xmath28 ordered lexicographically , let @xmath116 and @xmath117 be the number of elements of @xmath114 and @xmath115 and let @xmath118 and @xmath119 be the @xmath22-th elements of @xmath114 and @xmath115 , respectively .",
    "we also denote the above defined adjacency function by @xmath120 for which @xmath121 with @xmath122 and @xmath123 with @xmath124 . then , based on the algorithm in @xcite , we describe our algorithm in fig .",
    "[ algo : reverse ] .    ' '' ''    height 0.8pt enumerating @xmath19-constrained non - crossing laman frameworks .    ' '' ''    @xmath125 the cdlf with lexicographically smallest edge list ; @xmath126 ; @xmath127 ; @xmath128 ; @xmath129 ; @xmath130 ; @xmath131 ; @xmath132 ; @xmath127 ; @xmath128 ; line 4 ; @xmath133 ; @xmath134 * then * @xmath135 ; @xmath136 ; determine integers pair @xmath137 such that @xmath138 ; @xmath139 ; ;    ' '' ''    as we will show later , both the parent function and the adjacency function need @xmath4 time for each process .",
    "then , the while - loop from line 4 to 17 has @xmath140 iterations which require @xmath141 time if simply checking the line 8 and 10 .",
    "in order to improve @xmath141 time to @xmath3 time we claim the following two lemmas :    [ lemma : parent1 ] let @xmath24 and @xmath53 be two distinct cdlfs which are subgraphs of @xmath142 for which @xmath143 for @xmath112 and @xmath113 .",
    "then , @xmath144 holds if and only if @xmath145 and @xmath146 satisfy the following conditions :    * @xmath147 , * @xmath148 , * @xmath149 , * @xmath150 .",
    "[ lemma : parent2 ] let @xmath24 and @xmath53 be two distinct non - crossing laman frameworks for which @xmath143 for edges @xmath112 and @xmath113 , and let @xmath151 .",
    "then , @xmath152 holds if and only if @xmath145 and @xmath146 satisfy the following conditions :    * @xmath145 is @xmath19-legal edge in @xmath153 , * @xmath154 , * @xmath155 . * @xmath156 .",
    "we will explain later ( in the proof of theorem [ theo : time ] ) how lemmas [ lemma : parent1 ] and [ lemma : parent2 ] are used to obtain @xmath3 time for generating each output of our algorithm .",
    "notice that for @xmath53 and @xmath94 such that @xmath157 , at most one of @xmath144 and @xmath152 holds from the conditions ( b ) of lemmas [ lemma : parent1 ] and [ lemma : parent2 ] .",
    "( `` only if''-part . )",
    "since @xmath144 holds , @xmath145 and @xmath146 must be chosen as @xmath58 and @xmath46 in case 1 of definition [ def : parent ] . from definition [ def : parent ] , @xmath158 holds . since @xmath159 , @xmath160 and @xmath161 holds , thus we have ( b ) .",
    "similarly since @xmath162 , we have ( a ) .    from @xmath163 , we have @xmath164 let @xmath165 .",
    "suppose ( c ) does not hold",
    ". then @xmath166 holds .",
    "( note that the equality does not hold since @xmath112 . )",
    "then from eq.([eq : lem1_eq ] ) and @xmath167 ( which comes from definition [ def : parent ] ) , @xmath168 thus , @xmath69 would have been selected instead of @xmath145 when the parent function @xmath169 is applied to @xmath24 , which contradicts @xmath163 . hence , ( c ) holds .",
    "finally , let @xmath170 , and suppose that ( d ) does not hold and @xmath171 holds .",
    "( note that the equality does not hold since @xmath124 . )",
    "since @xmath172 , @xmath173 then @xmath174 would have been selected instead of @xmath146 when the parent function @xmath169 is applied to @xmath24 , which contradicts @xmath175 .",
    "thus , ( d ) holds .",
    "( `` if''-part . ) from ( a ) and ( b ) , @xmath176 .",
    "since @xmath177 from ( a ) , ( d ) implies @xmath178 thus , @xmath179 holds , and hence @xmath169 chooses @xmath146 for an edge @xmath46 to be deleted from @xmath24 .    from this",
    "we have @xmath180 .",
    "since @xmath181 from ( b ) , ( c ) implies @xmath182 since @xmath183 , @xmath184 .",
    "thus , @xmath169 chooses @xmath145 for an edge to be added , and @xmath185 returns @xmath53 .",
    "( `` only if''-part . )",
    "since @xmath152 holds , @xmath145 and @xmath146 must be chosen as @xmath58 and @xmath46 of definition [ def : parent ] . from @xmath175 , we have @xmath186 since @xmath187 from definition [ def : parent ] and fact [ fact : under_tri ] , @xmath58 is @xmath19-legal in @xmath56 and hence @xmath19-legal in @xmath188 .",
    "thus , from @xmath163 , ( a ) holds .",
    "since @xmath145 is @xmath19-legal in @xmath153 , we have @xmath189 let @xmath190 .",
    "suppose that ( c ) does not hold . then @xmath166 holds .",
    "( note that the equality does not hold since @xmath112 . ) from eq.([eq:1dof2 ] ) and ( [ eq : under_tri ] ) , @xmath191 then , @xmath69 would have been selected when the parent function is applied to @xmath24 , which contradicts @xmath163 .",
    "hence ( c ) holds .",
    "next let us consider @xmath146 .",
    "since @xmath192 is @xmath19-illegal in @xmath54 from definition [ def : parent ] , we have @xmath193 .",
    "thus ( b ) holds .",
    "finally , ( d ) must hold since the parent function remove an lexicographically largest illegal edge in @xmath54 .",
    "( `` if''-part . ) from ( a ) , @xmath145 is @xmath19-legal in @xmath153 .",
    "then , we have @xmath194 .",
    "suppose that @xmath146 is @xmath19-legal in @xmath195 , @xmath196 holds and @xmath146 is in @xmath197 , which contradicts the condition ( b ) .",
    "therefore , @xmath146 is @xmath19-illegal edge in @xmath54 , and ( d ) says that @xmath146 is the lexicographically largest @xmath19-illegal edge in @xmath54 .",
    "thus , @xmath198 chooses @xmath146 for an edge @xmath46 to be deleted from @xmath24 , and @xmath199 holds .    from @xmath199 and",
    "the condition ( c ) , @xmath200 holds .",
    "thus , @xmath201 .",
    "( note that @xmath202 , because @xmath203 and @xmath204 hold from ( a ) . )",
    "thus , @xmath198 chooses @xmath145 for an edge to be added , and @xmath105 returns @xmath53 .    by lemmas [ lemma : parent1 ] and [ lemma : parent2 ]",
    ", we will describe an @xmath3 algorithm in the proof of the following theorem  [ theo : time ] . before it",
    ", we give you the simple observation for checking the condition ( d ) in the lemma  [ lemma : parent2 ] efficiently :    [ ob : condition_d ] let @xmath153 be a @xmath53-constrained delaunay triangulation constrained by edges of a non - crossing laman framework @xmath53 , and let @xmath205 be a @xmath19-legal edge in @xmath153 and @xmath113 be an edge intersecting no edge of @xmath53 .",
    "then @xmath206 holds .",
    "this comes from the following two facts that :    * @xmath194 holds , and * @xmath145 is @xmath19-legal in @xmath207 .",
    "the fact ( 1 ) clearly hold since @xmath145 is @xmath19-legal edge in @xmath153 . using lemma  4.2 in @xcite",
    "the fact ( 2 ) immediately follows .",
    "let us show how to update @xmath153 to @xmath207 .",
    "the edge @xmath146 intersects some edges in @xmath208 , and we denote a set of such edges by @xmath209 .",
    "first , we delete the edges in @xmath209 .",
    "the resulting graph @xmath210 has a hole bounded by the polygon @xmath211 . when inserting @xmath146 into @xmath210 , @xmath146 splits @xmath211 into two polygon @xmath212 and @xmath213 .",
    "then , @xmath214 holds from the fact in @xcite , i.e. @xmath207 is obtained from @xmath153 by ( delaunay ) triangulating only @xmath212 and @xmath213 independently .",
    "this implies that @xmath145 never flips even if @xmath145 is not a constrained edge .",
    "( note that @xmath146 does not intersect @xmath145 from the lemma assumption . ) hence , @xmath145 is @xmath19-legal in @xmath207 .",
    "[ theo : time ] the set of all @xmath19-constrained non - crossing laman frameworks on a given point set can be reported in @xmath3 time per output using @xmath4 space , or @xmath1 time using @xmath2 space .    as described in section [ sec : main ] , we use a linear transformation if necessary to get a unique cdt .",
    "the complexity of testing the uniqueness of a cdt is @xmath4 by simply testing the circumcircle of each triangle in the cdt to see there is another point other than vertices of the triangle on the circumcircle .",
    "given a non - crossing laman framework @xmath109 and @xmath53-constrained delaunay triangulation @xmath153 .",
    "the algorithm will check @xmath215 or @xmath216 at line  10 depending on the edge pair @xmath33 . here",
    "we will show that each condition in lemmas [ lemma : parent1 ] and [ lemma : parent2 ] can be checked in @xmath217 time for each of the @xmath3 edge pairs @xmath33 by the following way .",
    "first , for all edges @xmath218 , we calculate the number of edges @xmath205 intersecting @xmath146 , which we denote by cross_n@xmath219 . if cross_n@xmath220 , we delete @xmath146 from @xmath115 since @xmath221 is never non - crossing for any @xmath222 . if cross_n@xmath223 , we associate a pointer of the edge @xmath145 intersecting @xmath146 with @xmath146 , and we denote such @xmath145 by cross_e@xmath219 .    next , for each @xmath222 , we attach two flags to @xmath145 which represent that @xmath145 satisfies the condition ( a ) of lemmas [ lemma : parent1 ] and [ lemma : parent2 ] , respectively .",
    "this preprocessing can be done in @xmath2 time by simply scanning all edges of @xmath114 . by this",
    "we can check the condition ( a ) in lemmas [ lemma : parent1 ] and [ lemma : parent2 ] in @xmath217 time .",
    "similarly , we attach two flags to @xmath218 which represent that @xmath146 satisfies the condition ( b ) of lemmas [ lemma : parent1 ] and [ lemma : parent2 ] . this process can be done in @xmath4 time . by this",
    "we can check the condition ( b ) in lemmas [ lemma : parent1 ] and [ lemma : parent2 ] in @xmath217 time .",
    "we can calculate the lexicographically largest edge in @xmath224 in @xmath2 time . by this",
    "we can check the condition ( d ) in lemmas [ lemma : parent1 ] in @xmath217 time .",
    "now let us consider how to identify a set of edges @xmath225 satisfying the condition ( d ) in lemma  [ lemma : parent2 ] in @xmath3 time with @xmath4 space .",
    "( in the case of @xmath1 time algorithm this process must be skipped , and the condition ( d ) in lemma  [ lemma : parent2 ] will be checked simply by updating @xmath153 to @xmath226 for each pair @xmath33 using @xmath2 time and @xmath2 space by applying the algorithm by chin and wang@xcite . )",
    "it can be done regardless of the removing edge @xmath145 if the condition ( a ) in lemma  [ lemma : parent2 ] holds . from observation  [ ob :",
    "condition_d ] , we can say that the condition  ( d ) holds if and only if @xmath146 is lexicographically largest @xmath19-illegal edge in @xmath227 when cross_n@xmath228 . and",
    "it is sufficient to check the condition  ( d ) only in @xmath229cross_e@xmath230 when cross_n@xmath223 .",
    "updating the delaunay triangulation takes @xmath2 time ( see @xcite for a linear time update of the constrained delaunay triangulation ) . thus we can attach a flag to @xmath218 in @xmath2 time which represents whether @xmath146 satisfies the condition ( d ) of lemma  [ lemma : parent2 ] or not , thus this preprocessing for all edges in @xmath115 takes @xmath3 time .    by using the above mentioned data , we will show that for a fixed @xmath222 , the inner while - loop from line 6 to 16 can be executed in @xmath4 . in order to efficiently test the condition ( c ) of lemmas [ lemma : parent1 ] and [ lemma : parent2 ]",
    ", we prepare the data structure proposed by lee , streinu and theran @xcite in @xmath4 time for maintaining _ rigid components _ obtained by deleting @xmath145 .",
    "this data structure supports a _ pair - find _ query which determines whether two vertices are spanned by a common component in @xmath217 time using @xmath4 space , or @xmath2 time with @xmath2 space . from this",
    ", we can calculate @xmath231 ( i.e. , determine whether @xmath232 ) in @xmath217 time with @xmath4 space , or @xmath2 time with @xmath2 space , for each edge @xmath218 .",
    "also , we can compute @xmath233 and @xmath234 in @xmath2 time with @xmath4 space , or @xmath4 time with @xmath2 space . from @xmath69 and @xmath174",
    "we can check condition ( c ) in lemmas [ lemma : parent1 ] and [ lemma : parent2 ] in @xmath217 time .",
    "we have to determine which of @xmath215 and @xmath216 should be checked for every edge @xmath218 .",
    "this is simply done by checking whether @xmath235 or @xmath236 .",
    "when @xmath161 , we check whether @xmath215 holds or not .",
    "when @xmath236 , we check whether @xmath216 holds or not . both can be done in @xmath217 time with @xmath237 space , or @xmath2 time with @xmath2 space . by using the above mentioned data structure for maintaining the rigid components",
    ", we can perform both parent function and adjacency function in @xmath4 time with @xmath4 space , or @xmath3 time with @xmath2 space .",
    "thus , we have an @xmath3 algorithm using @xmath4 space , or @xmath1 algorithm using @xmath2 space .",
    "figure [ fig : search_tree ] illustrates an example of the search tree of a set of @xmath19-constrained non - crossing laman frameworks on six points , where @xmath238 .",
    "we have presented an algorithm for enumerating all the constrained non - crossing laman frameworks .",
    "we note in passing that the techniques in this paper can also be used to generate all @xmath19-constrained non - crossing spanning trees of a point set since they also form bases of the graphic matroid on any triangulation of @xmath20 .",
    "the unconstrained case was considered in @xcite .",
    "o. aichholzer , g. rote , b. speckmann , and i. streinu . the zig - zag path of a pseudo - triangulation . in _ proc .",
    "8th international workshop on algorithms and data structures ( wads ) _ , lecture notes in computer science 2748 , pages 377388 , ottawa , canada , 2003 .",
    "springer verlag .",
    "d. avis , n. katoh , m. ohsaki , i. streinu , and s. tanigawa .",
    "enumerating planar minimally rigid graphs . to appear in _ proc .",
    "12th annual international computing and combinatorics conference ( cocoon 2006 ) _ , taipei , 2006    i. beichl , and f. sullivan . coping with degeneracies in delaunay triangulation . in _ modelling ,",
    "mesh generation and adaptive numerical methods for partial differential equations , j.e .",
    "flaherty et al .",
    "_ , pages 2330 , springer , new york , 1995 .        a. berg and t. jordn .",
    "algorithms for graph rigidity and scene analysis . in g.",
    "d. battista and u. zwick , editors , _ proc .",
    "11th annual european symposium on algorithms ( esa ) _ , volume 2832 of _ lecture notes in computer science _ , pages 7889 .",
    "springer , 2003 .",
    "a. dumitrescu , b. grtner , s. pedroni , and e. welzl . enumerating triangulation paths . , 20(1 - 2):312 , 2001 . a preliminary version in proceedings of the twelfth canadian conference on computational geometry , 2000 ( cccg00 ) , 233 - 238 .",
    "n. katoh , m. ohsaki , t. kinoshita , s. tanigawa , d. avis and i. streinu .",
    "enumeration of optimal pin - jointed bistable mechanisms . in _ proc .",
    "4th china - japan - korea symp .",
    "of structural and mechanical systems _ , kunming , nov 2006 .",
    "g. rote , f. santos , and i. streinu .",
    "expansive motions and the polytope of pointed pseudo - triangulations . in j.",
    "p. boris aronov ,",
    "saugata basu and m. sharir , editors , _ discrete and computational geometry - the goodman - pollack festschrift _ , algorithms and combinatorics , pages 699736 .",
    "springer verlag , berlin , 2003 ."
  ],
  "abstract_text": [
    "<S> in this paper we present an algorithm for enumerating without repetitions all the non - crossing generically minimally rigid bar - and - joint frameworks under edge constraints ( also called constrained non - crossing laman frameworks ) on a given generic set of @xmath0 points . </S>",
    "<S> our algorithm is based on the reverse search paradigm of avis and fukuda . </S>",
    "<S> it generates each output graph in @xmath1 time and @xmath2 space , or , slightly different implementation , in @xmath3 time and @xmath4 space . </S>",
    "<S> in particular , we obtain that the set of all the constrained non - crossing laman frameworks on a given point set is connected by flips which restore the laman property .    </S>",
    "<S> _ key words : _ geometric enumeration ; rigidity ; constrained non - crossing minimally rigid frameworks ; constrained delaunay triangulation . </S>"
  ]
}