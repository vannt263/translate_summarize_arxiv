{
  "article_text": [
    "the discovery of quantum algorithms with significant speed - ups over their classical counterparts has spurred interest in the research and development of quantum computing systems @xcite .",
    "several different but computationally equivalent models for quantum computing have emerged including , in particular , the model of adiabatic quantum computing ( aqc ) @xcite .",
    "notionally , the aqc model for universal quantum computation corresponds to adiabatic ( i.e. , slow ) changes in the state of a quantum physical system . while computationally equivalent to other models , aqc promises some intrinsic benefits for ensuring fault - tolerant computation and reducing system complexity @xcite .",
    "additional attention to the aqc model has been stimulated by the recent commercial realization of a special purpose processor that implements the adiabatic quantum optimization ( aqo ) algorithm @xcite .",
    "the processor , manufactured by the company d - wave systems , inc . , realizes a programmable ising spin - glass model in a transverse field @xcite .",
    "this hardware is specialized to the aqo algorithm and it is not capable of universal computation within the aqc model , but it does provide a complete realization of a quantum computational device .",
    "this has spurred vigorous scientific studies into exactly how the current hardware performs quantum computation , including efforts to differentiate its observed behavior from classical physical processes @xcite .",
    "moreover , the aqo algorithm is broadly applicable to combinatorial optimization problems and , consequentlt , the d - wave processor has garnered attention for its potential use in a number of application domains .",
    "examples include problems in classification @xcite , machine learning @xcite , graph theory @xcite , artificial neural networks @xcite , and protein folding @xcite among others @xcite .",
    "the availability of quantum hardware allows for benchmarking performance relative to both quantum and classical metrics of computational power .",
    "understanding observed behavior requires a detailed consideration of how the program and hardware interact as well as how the defined metrics represent performance .",
    "for example , it is known that performance of the aqo algorithm depends strongly on the specific programming and hardware operation schedules as well as the problem input @xcite .",
    "indeed , whereas some studies of the aqo algorithm have reported runtimes that scale polynomially in problem size @xcite , others have suggested worst - case exponential behavior or trapping in local minima @xcite . more generally , it has proven difficult to predict the run times of particular problem instances due to the complexity of the underlying quantum dynamics . an essential step in understanding these behaviors",
    "is to capture the influence that different programming choices have on observed run times @xcite .    .",
    "briefly , a qubo problem serves as the classical input to program synthesis while the computed qubo solution represents the value returned by the program .",
    "each block in the diagram corresponds to a distinct intermediate representation of the quantum program that depends on the choices made in the previous steps.,scaledwidth=35.0% ]    a significant source of the complexity in analyzing implementations of the aqo algorithm arises from the multiple steps undertaken to synthesize the adiabatic quantum program .",
    "we provide a brief summary of the process with elaboration of the detailed synthesis deferred to sec .",
    "[ sec : aqc ] . figure  [ fig : flowchart ] illustrates that an adiabatic quantum programming process begins with the reduction of a classical combinatorial optimization problem to a quadratic unconstrained binary optimization ( qubo ) problem .",
    "the qubo problem is then mapped into the parameters of an equivalent logical ising hamiltonian .",
    "the logical ising hamiltonian must then be mapped onto the processor as a physical ising hamiltonian , a process defined as embedding .",
    "this transformation of the reduced problem into a physically realizable program depends on both the hardware layout and the available hardware controls .",
    "ultimately , the computed solution will depend on all previous decisions as well as the actual physics underlying the processor .",
    "it is currently poorly understood how modifications at the various stages in fig .",
    "[ fig : flowchart ] impact the correctness and efficacy of computed solutions .",
    "reconciling the seemingly contradictory results from previous studies as well as understanding more recent experimental benchmarks requires investigating how programming choices impact performance .",
    "motivated by this , we have developed a software environment that captures each step in deriving a program for the adiabatic quantum optimization algorithm .",
    "our framework does not address programming for a universal adiabatic quantum computer , but instead it is specialized to the aqo algorithm and the ising spin - glass physics underlying the d - wave processors .",
    "the software synthesizes together the steps from fig .",
    "[ fig : flowchart ] into an integrated workflow that includes the development of adiabatic quantum programs as well as the collection of diagnostic information for addressing questions about performance . in the absence of actual hardware , we use numerical simulation to evaluate the variety of programming and operational choices that can effect program behavior .",
    "our simulation capabilities employ multiple numerical methods with the possibility for user extensions .",
    "another important part of the framework is the ability to analyze both the solutions recovered by simulations as well as the intermediate dynamics and hamiltonians . with the publication of recent benchmarks from available hardware @xcite , the ability to make comparisons between simulated and experimental results can be useful for understanding observed behavior .",
    "the jade adiabatic development environment ( jade ) implements the programming steps highlighted in fig .",
    "[ fig : flowchart ] .",
    "jade capabilities include capturing input for a high - level optimization qubo problem as well as generating the low - level quantum physical program representation .",
    "jade is further integrated with a quantum simulation engine that supports user - defined methodologies for running diagnostic analyses .",
    "we present explicit examples of several simulations methodologies based on finite differencing as well as diagnostic derived from the time - dependent eigenspectra and eigenstate populations .    because the jade programming model is tailored to the aqo algorithm and ising spin glass physics , we suggest that jade may be useful supporting ongoing benchmark studies of the d - wave system processor .",
    "we do not address the issue of developing benchmarks or methods of evaluating quantum program efficiency , but we do provide a concrete realization of the integrated computational environment needed to carry out such efforts . in particular , our development environment formalizes methods used for programming the quantum processor while offering an interface to simulation for computing detailed diagnostics about how a program executes . for completeness , we note that there is some superficial similarity between jade and the proprietary blackbox compiler from d - wave systems , which provides an interface for solving problems on hardware .",
    "the primary distinction of jade is that it enables explicit control of the programming steps for the purpose of testing new programming techniques .",
    "conceptually , a jade program could be used to drive the actual quantum processor by interfacing with the hardware control system , but we have not explored that option here .",
    "this paper is organized as follows . in sec .",
    "[ sec : aqc ] , we summarize the theoretical background leading to fig .  [",
    "fig : flowchart ] including the quantum physical basis for aqo . in sec .",
    "[ sec : jademdd ] , we present the model - based design of jade including the system context , implementations of each component , and our test - driven framework for program verification and validation .",
    "we present usage results for the case of a recent benchmark problem in sec .",
    "[ sec : results ] and we offer conclusions in sec .",
    "[ sec : discussion ] .",
    "in this section , we provide a summary of the physical theory and computer science underlying adiabatic quantum programming .",
    "this includes the quantum physical description of aqc as well as the steps taken to map the aqo algorithm to a hardware control schedule .",
    "the physical basis for the aqc model was first established in terms of quantum annealing by kadowaki and nishimori @xcite .",
    "farhi et al .  as well as others later formalized these ideas as a means of universal computation @xcite .",
    "several efforts have since shown the equivalence between the aqc model and other quantum computing models @xcite . in a generalized aqc algorithm @xcite , a quantum physical system of @xmath0 qubits",
    "is evolved under the schrdinger equation @xmath1 according to a time - dependent hamiltonian @xmath2 that interpolates between the initial hamiltonian @xmath3 and the final ( problem ) hamiltonian @xmath4 from an initial time @xmath5 to a final time @xmath6 .",
    "we shall assume @xmath7 .",
    "( [ eq : tdh ] ) , the schedules @xmath8 and @xmath9 satisfy the boundary conditions @xmath10 and @xmath11 , while the quantum system is initially prepared in the lowest - energy eigenstate of @xmath3 . given the instantaneous eigenvalue equations @xmath12 with @xmath13 labeling states of monotonically increasing energy , the initial state condition implies @xmath14 .",
    "we define the energy gap between the ground and first excited state as @xmath15 in which we neglect possible ground state degeneracy for simplicity .",
    "if the energy gap is always strictly greater than zero , i.e. , @xmath16 , then the state @xmath17 will remain in the instantaneous ground state with high probability provided certain bounds on the rate of change of the hamiltonian are satisfied @xcite .",
    "consequently , evolution under eq .",
    "( [ eq : tdse ] ) to the time @xmath18 prepares the final state @xmath19 in the lowest energy eigenstate of @xmath4 . by making a judicious choice of the final hamiltonian @xmath4",
    ", the prepared final state may encode the solution to a computation . in order to ensure",
    "the computation is correct , the adiabatic condition must be satisfied . in its simplest interpretation ,",
    "this implies the global time @xmath18 must be much larger than the inverse of the minimum spectral gap of @xmath20 @xcite .",
    "more sophisticated analysis shows that better results may be obtained by adjusting the evolution schedule according to the local energy gap @xcite . in either case , failure to ensure the adiabatic condition",
    "risks the possibility that the final state will not belong to the ground state manifold of @xmath21 but rather to an excited state and an error in the computation .",
    "it is notable that the spectral gap depends not only on the problem to be solved , but also on how the problem is implemented as a quantum program",
    ". understanding input influence on a program run time and error rates is an open question in quantum computer science .      in specializing to the aqo algorithm",
    ", we require a quantum logical system of @xmath0 qubits with an initial hamiltonian @xmath22 and final ising hamiltonian @xmath23 where @xmath24 and @xmath25 are the pauli operators for the @xmath26-th qubit @xcite , @xmath27 is the bias on the @xmath26-th qubit , and @xmath28 is the coupling between qubits @xmath26 and @xmath29 .",
    "as shown in the section below , the graph @xmath30 with vertex set @xmath31 ( @xmath32 ) and edge set @xmath33 defines an input optimization problem , cf . the weight matrix @xmath34 in eq .",
    "( [ eq : qubo ] ) .",
    "the final hamiltonian is diagonal in the basis defined by the tensor products of the @xmath35 eigenstates of the @xmath25 operators .",
    "this basis will also serve as the computational basis . for comparison ,",
    "the ground state of the initial hamiltonian ( and initial state of the aqo algorithm ) is the symmetric superposition of these computational basis states and has an eigenvalue @xmath36 .    an important consequence arising from the choice of the initial and final hamiltonians , respectively , eqs .",
    "( [ eq : hi ] ) and (  [ eq : ising ] ) , is that the time - dependent hamiltonian @xmath20 of eq .",
    "( [ eq : tdh ] ) is not capable of universal adiabatic quantum computation . extending the form of the hamiltonian beyond the ising model , for example , to the 2-local zzxx hamiltonian of biamonte and love @xcite , would support universal computation but we do not consider that case here .      any binary optimization problem ( bop ) can be mapped into the form of the final hamiltonian in eq .",
    "( [ eq : ising ] ) .",
    "in doing so , we define the classical input to the aqo algorithm as a quadratic unconstrained binary optimization ( qubo ) problem .",
    "this is because non - binary as well as constrained optimization problems can be reduced to qubo @xcite , with multiple methods for performing the reduction available @xcite .",
    "the qubo problem is to find @xmath37 where * x * is a vector of @xmath0 binary variables with @xmath38 and * p * is an @xmath0-by-@xmath0 symmetric real - valued cost matrix .",
    "we use the weight matrix * p * to define the weighted adjacency matrix of the input ( problem ) graph @xmath39 introduced in eq .",
    "( [ eq : ising ] ) .",
    "the graph @xmath39 has a vertex set @xmath31 of size @xmath32 and an edge set @xmath40 defined as @xmath41 iff @xmath42 . from this point of view",
    ", programming the aqo algorithm requires mapping the matrix @xmath34 to the biases and couplings of the ising hamiltonian .",
    "it has been shown previously by choi that parameterization of the logical ising hamiltonian in eq .",
    "( [ eq : ising ] ) may be given in terms of the qubo problem as @xcite @xmath43 and @xmath44 we may also add an energy shift to the ising hamiltonian in eq .",
    "( [ eq : ising ] ) of the form @xmath45 in order to match the energies of the solution state .",
    "although this shift does not affect the solution obtained using aqc , it must be accounted for in reporting the minimal value in eq .",
    "( [ eq : qubo ] ) .      whether or not the logical hamiltonian in eq .",
    "( [ eq : ising ] ) is supported directly on a given hardware depends on the available connectivity of that hardware .",
    "we express the connectivity of a targeted processor in terms of its hardware graph @xmath46 .",
    "when any vertex can be coupled to any other vertex and @xmath47 , then it is possible to support all possible input problems using a one - to - one mapping between the logical and physical qubits and the biases and couplings of the physical hamiltonian .",
    "however , when @xmath48 is less than fully connected , then there are certain input problems that will not map directly into hardware .",
    "in such circumstances , it may be possible to embed the problem graph @xmath39 into the hardware graph @xmath48 via graph _ minor embedding _",
    "@xcite .",
    "we formally define the _ minor embedding _ of a graph @xmath39 into a graph @xmath48 as a mapping @xmath49 such that :    1 .",
    "each vertex @xmath26 in @xmath31 is mapped to the vertex set of a connected subgraph @xmath50 of @xmath48 .",
    "2 .   if @xmath41 , then there exist @xmath51 such that @xmath52 , @xmath53 , and @xmath54 .",
    "if such a mapping @xmath55 exists , then @xmath39 is _ minor - embeddable _ in @xmath48 , or @xmath39 is a _ minor _ of @xmath48 . in subsequent discussions",
    ", we simply use the term embedding as a reference to minor embedding .    in adiabatic quantum programming , the vertices of the input graph @xmath39 represent the bits of a candidate solution to the qubo problem , while the edges represent the presence of nonzero coupling coefficients , as defined in eqs .",
    "( [ eq : ai ] ) and ( [ eq : bij ] ) , respectively .",
    "the vertices of the hardware graph @xmath48 represent the physical qubits and the edges represent the couplings between qubits that are available in the hardware .",
    "an embedding maps each vertex in @xmath31 to a subset of @xmath56 and each edge in @xmath33 to edges between these subsets .",
    "when an embedding exists , then the resulting subgraph @xmath57 of the hardware graph defines the physical ising model @xmath58 the bias and coupling coefficients @xmath59 and @xmath60 depend on the selected embedding @xmath55 per the requirements ( i ) and ( ii ) listed above .",
    "the physical ising coefficients are defined as @xcite @xmath61 and for @xmath62 @xmath63 where @xmath64 is the number of edges between subgraphs @xmath65 and @xmath66 .",
    "the constant @xmath67 is chosen sufficiently large to force the qubits in each subgraph to be strongly correlated , with an upper bound on its value given previously by choi @xcite .",
    "setting the embedded ising model coefficients requires knowledge of the matrix @xmath68 and the selected embedding implied by @xmath69 @xcite . the embedding need not be unique and , consequently , different instances of the hamiltonian in eq .",
    "( [ eq : hfstar ] ) may correspond to the same logical problem of eq .",
    "( [ eq : qubo ] ) .    a key dependency in finding an embedding is the target hardware graph @xmath48 .",
    "the hardware graph defines the vertices and connectivity that are available to express the ising model . an example hardware graph is shown in fig .",
    "[ fig : dw1hw ] . finding those graphs that can be embedded into a fixed hardware graph is an example of subgraph isomorphism , which is known to be np - complete in difficulty @xcite . for small hardware graphs , it is tractable to calculate the maximal minors of the graph , i.e. , the minors of @xmath48 whose subgraphs represent all other graphs contained in @xmath70 @xcite .",
    "however , this is a brute force approach and therefore does not scale favorably with hardware size .",
    "similarly , attempts to find complete graphs as minor of an arbitrary hardware graph as known to be np - complete @xcite .",
    "alternatives to these brute force approaches include heuristic algorithms that incorporate knowledge of @xmath48 or that limit the types of input problems @xcite .    at this point , we emphasize that the role of minor embedding is not as simple as identifying a physical ising model that is equivalent to the logical hamiltonian . indeed , the embedding of a problem into a processor is not unique and , moreover , it is not well understood how different embeddings influence program behavior .",
    "there are known tradeoffs in the amount of time spent finding an embedding relative to the size of the embedded problem @xcite , but it remains unclear how to account for those costs in the benchmarking program performance .",
    "in addition , the current approach to hardware embedding taken by jade follows the decomposition of a bop into a qubo form using quadratization , i.e. , decomposing into quadratic form @xcite .",
    "however , an alternative programming sequence is to map a bop directly into a multi - linear ising model that is then decomposed into bilinear form @xcite .",
    "the latter approach has led to the development of generalized gadgets @xcite and , more recently , to resource efficient gadgets that replace multi - linear terms in the hamiltonian with bilinear ones @xcite .",
    "gadget decompositions introduce additional ancilla qubits in much the same way that quadratization introduces ancilla bits .",
    "biamonte has presented decompositions minimal in the number of gadget ancilla that would be especially relevant to comparing performance @xcite .",
    "we have not explored the use of gadgets in the jade programming model , or compared the overhead using quadratization , but we believe that the impact of this alternative programming model should be investigated .     lattice of interconnected unit cells , with each unit cell is expressed as a @xmath71 graph .",
    "the more recent _ vesuvius _ processor has a similar design using an @xmath72 lattice of unit cells .",
    "the geometry of the hardware plays an important role in determining which graphs can be embedded.,width=192 ]      we restrict our discussion to aqo algorithms that use a time - dependent hamiltonian fitting the form of eq .",
    "( [ eq : tdh ] ) , which interpolates between an initial hamiltonian @xmath73 and the problem hamiltonian @xmath21 according to the time - dependent annealing schedules @xmath8 and @xmath9 . more generally , individual biases and couplings can be time - dependent , e.g. , @xmath74 . in either case ,",
    "the time - dependent schedules specify the rate at which the total hamiltonian @xmath20 changes and , consequently , they play an important role in the computational error rates . in particular , the final time @xmath18 needs to be sufficiently large to ensure the validity of the adiabatic condition , namely , @xmath75 where @xmath76 is the global minimum of the spectral gap defined in eq .",
    "( [ eq : gap ] ) and @xmath77 is the maximal rate of change during evolution @xcite . in the absence of information about @xmath78 , it is difficult to ensure the adiabatic condition is satisfied .",
    "this uncertainty is one source of the difficulty in benchmarking adiabatic quantum programs .",
    "recent results on amplifying spectral gaps @xcite and developing fault tolerant programs @xcite suggest new methods for mitigating this uncertainty .    although the annealing schedules are sufficient for coarsely specifying program execution , it is ultimately necessary to provide the physical implementation of those schedules in terms of hardware controls .",
    "the hardware controls that are available for tuning the biases and coupling of a processor must be capable of expressing programmed schedules .",
    "however , available controls are highly dependent on the physics underlying a processor and ensuring the exact implementation of an arbitrary annealing schedule may not be possible .",
    "limitations on annealing schedules arising from constraints and dependencies of control values creates additional uncertainty in the benchmarking effort .",
    "accounting for control constraints and quantification noise is necessary to provide a clear picture of how processor differences impact program behavior .",
    "for example , in the case of the family of processors from d - wave systems , inc .",
    ", biases and couplings can be mapped directly to models for the underlying superconductor josephson - junction . however , the precision of this mapping is limited by the resolution of the on - board digital to analog converters ( dac s ) @xcite .",
    "in addition to the constraints expected from hardware design , it is also necessary to anticipate the influence of noise on program behavior .",
    "two types of noise affecting quantum dynamics are classical noise in the controls and quantum noise in the system dynamics .",
    "quantum noise may be modeled as an undesired interaction between computational qubits and non - control elements of the hardware .",
    "a specific example is the case of thermal influences on the quantum dynamics , which invalidate the pure state description in sec .",
    "[ sec : aqc ] and undermine the adiabatic conditions @xcite .",
    "similarly , classical noise in the hardware controls yields a mixed - state description of the quantum dynamics and may bias program execution away from the solution of interest .",
    "once the time - dependent behavior of the hamiltonian @xmath20 has been fully specified , it remains to execute the program . as noted before , the typical sequence begins by initializing the quantum computational register in the ground state of the initial hamiltonian @xmath73 .",
    "how initialization is implemented varies with processor and , more important , it may not be implemented perfectly .",
    "this additional source of noise must also be accounted for in evaluating program behavior as it is likely to influence the computational result .",
    "the remaining step in execution is to carry out the hardware control schedule and , therefore , the programmed computation .      after evolving to the final time @xmath18",
    ", the state of the computational register is determined using a suitable measurement or readout method . for the case of the aqo algorithm ,",
    "the ground states at time @xmath18 are computational eigenstates and , therefore , readout implies a direct measurement in the computational ( @xmath79 ) basis . as with program execution ,",
    "it is more realistic to describe the readout process in terms of the hardware controls .",
    "this description includes capturing any noise or uncertainty in the measurement process .",
    "the bit string generated from computational readout is the result of the quantum annealing process .",
    "however , mapping this result back to a solution for the original qubo problem requires decoding measurements according to the inverse of the embedding map .",
    "for those cases where a tree of physical qubits represents a single logical qubit , it is necessary to check the value of all such qubits . in cases",
    "where measurement results within a tree disagree , then various strategies can resolve the uncertainty .",
    "one simple example is to use a majority vote . after decoding the computational readout , a solution to the original qubo problem",
    "is produced and the program is complete .",
    "it may be necessary to repeat the execution of the program , for example , to gather statistics on the readout or solution states , however , the steps performed are similar to those described above .",
    "as presented in sec .  [ sec : aqc ] , programming the aqo algorithm for an arbitrary qubo is a highly tunable process . in this section ,",
    "we describe a software - based implementation of the process that provides control over each of the programming steps shown in fig .",
    "[ fig : flowchart ] .",
    "we also describe the integration of this environment with a computational engine that uses numerical simulation for profiling these programs . the simulator is intended for providing insights into how program choices impact program performance .    the jade adiabatic development environment ( jade )",
    "is motivated by the need to provide theoretical benchmarks for current and future adiabatic quantum computing devices .",
    "in particular , it was designed to capture insights into the behavior of processor architectures .",
    "this is accomplished by using a numerical simulator backend to calculate the time - dependent processor state with respect to programmed algorithm .",
    "jade provides both an engine for simulating the programs that run on adiabatic quantum computing devices and a development environment for specifying program input .",
    "in addition , jade provides methods for constructing adiabatic quantum processor configurations , i.e. , the quantum hardware , and for debugging the implementation .",
    "jade is built using model - driven development , a software development methodology with a strong focus on system use cases as well as architectural extensibility and stability @xcite .",
    "this methodology allows developers to manage system complexity and rigorously verify and validate the final product implementation .",
    "our model - based approach uses the unified modeling language ( uml ) to capture design decisions and trace requirements @xcite .",
    "we also rely heavily on an object - oriented programming paradigm and software design best practices , such as test driven development @xcite .",
    "jade is designed to provide infrastructure for developing aqo programs and a computational engine for simulating them .",
    "this includes functionality for parsing input optimization problems , configuring new quantum hardware , and performing program profiling .",
    "given this broad scope in functionality , jade was designed for two distinct actors : the _ analyst _ and the _",
    "engineer_.        an _ analyst",
    "_ represents a jade user whose primary goal is to solve a discrete optimization problem .",
    "the _ analyst _ requires a development environment that automates programming choices and execution sequences .",
    "in contrast , an _ engineer _ expects to perform additional programming tasks such as customizing low - level hamiltonian parameters , constructing specialized processor configurations , and defining embedding maps or annealing schedules . as seen in fig .",
    "[ fig : ucm ] , this desired jade functionality is encapsulated by the following use case model :    * _ create a problem _ - the _ analyst _ constructs a discrete optimization problem as either a bop or qubo problem . in the case of the former , jade converts the bop to its corresponding qubo representation .",
    "this use case creates a _ problem _ entity . * _ solve a problem _ - the _ analyst _ selects a previously created",
    "_ problem _ to solve using the aqo algorithm .",
    "this use case returns a _ solution _ entity , which is the computed solution to the input problem .",
    "* _ create a processor _ - the _ engineer _ creates a processor configuration by specifying the number and connectivity of physical qubits .",
    "the _ engineer _ may also customize the processor by specifying classical and quantum noise models as well as hardware control constraints .",
    "this use case creates a _ processor _ entity . *",
    "_ create a program _ - the _ engineer _ creates a quantum program that is either a logical program or a physical program .",
    "a logical program is synthesized from selected _ problem _ , _ processor _ , and _ embedding _ entities , while a physical program is synthesized only from a _",
    "processor_. for the physical program , the _ engineer _ sets the parameters of the final ising hamiltonian including biases , coupling , and annealing schedules",
    ". both instances of this use case create a _ program _ entity .",
    "* _ execute a program _ - the _ engineer _ executes a _",
    "program_. with jade , the _ engineer _ submits the _ program _ for simulation along with any profiling and simulations options .",
    "this use case creates a _ result _ entity that corresponds to the computational readout following program execution .",
    "note that the _ result _ of a _ program _ does not correspond necessarily with the _ solution _ to a _",
    ", as the _ result _ may require additional processing to generate a _",
    "solution_.          alongside the use case model , we also present the system context model in fig .  [",
    "fig : scm ] .",
    "the system context describes the communication between jade and its environment as driven by the use case model .",
    "the system context details how the _ analyst _ and _ engineer _ interact with the various input - output ( i / o ) data . as shown in fig .",
    "[ fig : scm ] , the six types of i / o data are : _ problem _ , _ processor _ , _ embedding _ , _ program _ , _ result _ and _ solution_. these i / o entities are further specified in sec .  [ sec : ca ] .",
    "an _ analyst _ only has access to _ problem _ and _ solution _ entities .",
    "however , we anticipate that jade must synthesize other entities internally , for example , a _ program _ is required to generate a _",
    "solution_. consequently , jade will need private non - interactive methods for internal synthesis of the remaining entities .",
    "although _ processor _ , _ embedding _ , and _ program _ are generated by the system during the _ analyst _ workflow , we do not explicitly model that dependency in fig .  [",
    "fig : scm ] .",
    "jade comprises three distinct components : _ jaded _ , _ sapphire _ , and _ nice_. the _ jaded _ component is responsible for data creation , management , synthesis , and verification , i.e. , domain logic .",
    "the _ sapphire _",
    "component is responsible for the simulation of quantum programs according to user - defined plug - ins .",
    "component , a pre - existing open source project , is used to integrate the _ jaded _ and _ sapphire _ components and to manage the computational work flow @xcite .",
    "each component provides an independent api .",
    "figure [ fig : ca ] highlights the interactions between the three components and the associated interfaces . both _",
    "jaded _ and _ sapphire _ couple to _ nice _ , which provides a user - driven coupling between program development and program execution .",
    "there is a dependency between _ jaded _ and _ sapphire _ due the latter s need to parse _ program _ data structures .",
    "this dependency is restricted to a very narrow subset of the _ jaded _ functionality and we expect future versions will isolate it in a separate shared library",
    ".      the _ jaded _ component handles creation and manipulation of quantum programming by exposing a basic create , retrieve , update , and delete interface .",
    "this interface enables generation , manipulation , and persistence of _ entity _ data objects , which represent high - level abstractions of the various types of i / o data .",
    "the functional scope of _ jaded _ includes parsing user - provided input into verified formats , validating that input , and generating subclasses of _ entity _ tailored to specific input types .",
    "we define an _ ijaded _ interface to specify how the _ jaded _ component interacts with clients . by defining a formal interface , we are able to offer the option of supporting multiple _ jaded _ variants .        as shown in fig .",
    "[ fig : jadedwb ] , the _ ijaded _ interface includes a number of methods for creating and storing entity instances .",
    "the _ jaded _ class is a realization of this interface that provides a concrete implementation of the defined functionality .",
    "the _ jaded _ implementation presented here uses a variety of object - oriented design patterns with the factory design pattern being the most significant @xcite .",
    "the factory pattern is used to create and modify entities in an abstract manner , which pushes the underlying details of construction to the varying entity subclasses .",
    "a registry enhances this factory pattern by permitting the sharing of objects across domain boundaries . the use of factories and a data registry allows future developers to add new entity specializations in an easy and efficient manner . in fig .",
    "[ fig : jadedwb ] , the factory pattern and the corresponding data registry are implemented as _ entityfactory _ and _ entityregistry _ , respectively .",
    "the _ graph _ data structure represents a set of vertices together with a set of edges coupling those vertices .",
    "graph structures are common to the _ problem _ , _ processor _ , _ embedding _ , and _ program _ entities .",
    "the _ jaded _ _ graph _ model shown in fig .",
    "[ fig : graph ] provides an abstraction of this structure in a way that promotes customization and extensibility with respect to a given entity type .    in supporting this versatility , the _ graph _ class utilizes two factory design patterns for generating vertices and edges @xcite",
    "this ensures object polymorphism by allowing custom subclasses to inject specialized edges and vertices .",
    "for example , this mechanism allows the production of static graphs for _ problem _ , graphs that evolve in time for _ program _ , and graphs that alter their state according to predefined conditions or controls for _",
    "processor_.     denotes unlimited instances).,width=480 ]      the _ problem _ class is a subclass of _ entity _ that encapsulates the input data describing a discrete optimization problem .",
    "it is created by either an _ analyst _ or _",
    "engineer _ in order to define the logical problem that the system will solve .",
    "the current implementation of _ jaded _ permits users to construct two distinct types of _ problem_. the first is a weighted or pseudo - boolean optimization problem . the user inputs an arbitrary number of boolean clauses in terms of the literals @xmath80 , e.g. , @xmath81 , and each clause also has an associated real - valued weight @xmath82 .",
    "the pseudo - boolean function is then cast into an equivalent bop by converting each boolean literal to a corresponding binary variable , e.g. , @xmath83 , true @xmath84 and false @xmath85 .",
    "the boolean clauses are then recast into equivalent binary arithmetic expressions . denoting the @xmath26-th binary arithmetic clause as @xmath86 and the corresponding weight as @xmath82 ,",
    "the equivalent bop over @xmath87 bits is @xmath88 where @xmath89 is an @xmath87-bit vector @xcite . in jade ,",
    "the _ bop _ class stores both the original boolean clauses and the reductions to algebraic expressions with corresponding weights .    the second type of _ problem _ supported by _",
    "jaded _ is the qubo problem defined in eq .",
    "( [ eq : qubo ] ) . for this type",
    ", the input corresponds to the elements of the matrix @xmath34 .",
    "the matrix @xmath34 is then interpreted as a weighted adjacency matrix and parsed by _ jaded _ into a _",
    "graph_. accordingly , the _ qubo _ class is a subclass of _ graph_. the dependencies between the various _ problem _ subclasses are illustrated in fig .",
    "[ fig : problem ] .    as discussed in sec .",
    "[ sec : aqc ] , a bop of the form in eq .",
    "( [ eq : bop ] ) can be reduced to a corresponding qubo problem of the form in eq .",
    "( [ eq : qubo ] ) .",
    "the reduction , however , requires introduction of penalty terms to replace multilinear terms with quadratic or linear terms @xcite .",
    "expressing these penalties ultimately requires additional ancilla bits which enlarge the binary state space .",
    "instantiates a _ bop _ , the corresponding _ qubo _ is immediately generated as part of the _ problem_. _ jaded _ uses a qubo reduction method that replaces the product of two binary variables by a new binary variables ; the process repeats until a quadratic form remains @xcite .",
    "the relevant _ bop _ information is maintained as part of the _ problem _ in order to facilitate developing the _ solution _ entity returned to the _",
    "analyst_.          the _ processor _ entity encapsulates the structure and behavior of a quantum hardware configuration .",
    "it generalizes _ graph _ by using an adjacency matrix with unit diagonal entries to indicate vertex availability and unit off - diagonal entities for available connections between qubits .",
    "_ processor _ wraps a subclass of _ graph _ referred to as _ hardware _ and provides methods to query and manipulate its structure .",
    "the _ hardware _",
    "subclass can also implement the embedding of an input _ problem _ into the hardware .",
    "this produces an _ embedding _ entity , which subclasses _ graph _ to express the graph @xmath90 that defines the embedded hamiltonian @xmath91 from eq .",
    "( [ eq : hfstar ] ) .",
    "_ processor _ also allows users to specify a functional time dependence for the bias and coupling parameters of vertices .",
    "the _ control _",
    "class encapsulates functions to express the ising model parameters in terms of physical quantities that directly influence hardware behavior . for the example of a d - wave processor ,",
    "the parameters of the ising hamiltonians are mapped into the bias and tunneling energies of the superconducting flux qubits @xcite .",
    "these physical quantities are controlled experimentally in terms of the applied current and magnetic flux , and the _ control _ class allows the developer to express this dependency .",
    "custom noise models for these controls can also be added to _ processor _ through the _ noise _ class , which can express both classical and quantum noise functions .",
    "the _ program _ class is a subclass of _ entity _ that is used to synthesize specific instances of _ problem _ and _ processor _ into an implementation of the aqo algorithm .",
    "a _ program _ is the primary input to the _ sapphire _ simulation component and two different types can be constructed , physical or logical .",
    "the main difference between these two types for _ program _ is the presence or absence of a high - level logical _ problem _ definition .    ]    as shown in fig .",
    "[ fig : prog ] , type - switching is accomplished by composing _",
    "program _ with two classes : _ logical part _ and _ physical part_. the physical part of a _ program _ encapsulates the physical representation of the time - dependent hamiltonian defined in eq .",
    "( [ eq : tdh ] ) .",
    "this includes a reference to a _ processor _ and the parameters defining the final ising hamiltonian as well as the annealing schedule for each qubit .",
    "the logical part of a _ program _ encapsulates a physical program as well as a reference to the specified _ problem _ entity that is being solved .",
    "while the physical part of a _ program _ entity is always required , the logical part is not . for _ analyst _ use cases , the _ program _ always has a logical part . in the absence of a logical input",
    ", the _ program _ corresponds to an _ engineer _ defined instance of an ising hamiltonian .",
    "the mapping of the _ logical part _ into the _ physical part _ generates an _ embedding _ of the _ problem _ into the _ processor_. as described in sec .",
    "[ sec : aqc ] , embedding generates a map between each logical vertex and a connected subgraph in the _ processor_. within _ jaded _",
    ", this is accomplished using a subclass of _ graph _ called _ embedding_. the _ embedding _ class finds an embedding of the _ logical part _ into the provided _ processor _ and _ hardware_. the current _ embedding _ class supports the maximal minors methods described by klymko et al .",
    "its use is limited to a @xmath71 , but the extensibility of _ embedding _ means that the additional , greedy methods described by klymko et al .  can also be incorporated .",
    "the _ nice _ component is responsible for accepting user input , returning jade output , and managing the computational workflow .",
    "it also provides a graphical frontend for jade .",
    "_ nice _ is an existing open - source project that was leveraged for reducing development time and ensuring extensibility .",
    "in addition to i / o management , the _ nice _ component orchestrates the interactions between the _ jaded _ and _ sapphire _ components .",
    "it enables users to create input files , launch simulations and examine program metrics .",
    "_ nice _ is based on a client - server model , where the server handles primary data management and the client acts as the user frontend .",
    "it is also possible for the server to manage remote workloads including , for example , simulations launched on remote hosts .",
    "we use the _ nice _ server as the primary means for launching and monitoring numerical simulations on both local and remote machines .",
    "we have developed several plug - ins for _ nice _ that allow direct interaction with the _ jaded _",
    "component for the creation and revision of the _ problem _ , _ processor _ , and _ program _ entities .",
    "a screenshot of one such _",
    "form is provided in fig .",
    "[ fig : nice ] .",
    "_ nice _ is based on the open source gateway initiative ( osgi ) framework that , among other things , permits dynamic registration of services .",
    "we use _ nice _",
    "s implementation of dynamic registration to recognize and load user - defined plug - ins into jade .",
    "this feature permits , for example , user - defined methods for simulation that are developed independently from jade to be added during runtime .",
    "additional information about _",
    "nice _ is available from its website @xcite .",
    "_ sapphire _ is the jade component responsible for profiling _ program _ entities .",
    "this includes carrying out numerical simulations of the quantum dynamics as well as other characterizations such as computing the time - dependent energy eigenspectra and computational error rates . while its primary use is to compute the _",
    "result _ of a _ program _ , _ sapphire _ permits a robust set of possible use cases . this is a result of our use of a plug - in architecture to support user - defined extensions to _",
    "sapphire_. for example , numerical simulation techniques can be tailored to specific questions or physical assumptions .",
    "this promotes analysis at any desired fidelity and gives the user the ability to compare different simulation techniques against experimental benchmarks .",
    "the extensibility of _ sapphire _ is achieved through the interplay of a number abstractions and design patterns , as shown in fig .",
    "[ fig : sapphire ] .",
    "_ sapphire _ only exposes a few methods to external clients through the _ isapphire _ interface .",
    "this decoupling between behavioral definition and actual implementation allows _ sapphire _ to take on a number of varied forms .",
    "for example , jade currently provides a _ sapphire _",
    "implementation for multi - threaded , shared memory architecture .",
    "we have also implemented _ sapphirempi _ , which uses the mpi ( message passing interface ) library to execute simulations on distributed architectures .",
    "the most significant difference between the two implementations is the mpi dependency and the need to perform unique initialization steps for _ sapphirempi _ prior to beginning the numerical simulation .",
    "all implementations of _ sapphire _ must define the method _",
    "execute_. when _ execute _ is invoked , _ sapphire _ utilizes the _ jaded _ file - parsing capabilities to construct the _ program _ object defining the parameters of the numerical simulation .",
    "_ sapphire _ next parses the simulations options provided by the user to create a _ simulation _ object using the _ simulationfactory_. the _ simulation _ class is the basis for the extensibility of _ sapphire _ using plug - in libraries . a plug - in is essentially a subclass of _ simulation _ that provides a specialized numerical or algorithmic approach to simulation .",
    "the _ simulation _ class is the primary unit of functionality within _ sapphire _ and it is used to encapsulate a specific mathematical evolution of a quantum state .",
    "the factory design pattern allows _ sapphire _ to remain completely agnostic to simulation details .",
    "however , there is a specific sequence of execution statements that are a necessary part of _ sapphire_. program execution always begins with an initialization statement followed by a loop over a time - dependent solver .",
    "once the exit condition is met , i.e. , when @xmath6 , the computational state undergoes readout before the program issues finalization commands .",
    "all plug - ins for _ sapphire _ must adhere to the _ simulation _ class functionality defined below .",
    "* _ initialize _ : this method is used primarily to initialize quantum state of the simulation .",
    "additional tasks include setting up any pre - simulation conditions or parameters .",
    "* _ anneal _ : this method is called every time step by _ sapphire _ to advance the program quantum state .",
    "developers should implement this method to update the state vector with the mathematics inherent to a specific technique for solving the time - dependent schrdinger equation . * _ querystate _ : this method is used to query the state of the simulation , including the computational state of the simulated program .",
    "the output generated by this method is highly variable and it can include the internal representation of the quantum computational state or the complete eigenenergy spectrum written to an output file .",
    "these output files can also be used as checkpoints for restarting the simulation .",
    "* _ measure _ : this method is called after _",
    "anneal _ completes and it represents measurement of the final computational state . * _ finalize _ : this method is used for any final calculations or clean up routines .",
    "developers of simulation plug - ins must subclass _ simulation _ and implement the purely virtual _ anneal _ method .",
    "all other methods have default implementations that can be overwritten for specialized functionality .",
    "jade also provides a specialized _ hamiltoniangenerator _ abstraction that permits decoupling of numerical dynamics from the actual form of the hamiltonian describing the system .",
    "the _ sapphire _ plug - in architecture maintains extensibility to new simulation methodologies .",
    "a plug - in represents a user - created library that implements the _ simulation _ class defined above .",
    "jade users are therefore able to tailor quantum computing simulation techniques to specific problems or metrics of interest .",
    "we provide examples of plug - ins that implement _ simulation _ below .    ]    * _ simulationzero _ : this plug - in provides a zero - th order approximation about the state of the computational register .",
    "specifically , this simulation calculates the time - dependent eigenspectrum and instantaneous eigenstates of the time - dependent hamiltonian defined by a _",
    "program_. simulationzero does not provide information about the quantum dynamics but essentially diagonalizes the hamiltonian at each time step .",
    "this analysis provides information about the time - dependent energy gap .",
    "our implementation makes use of the eigen library , which is an open - source c++ template library for linear algebra @xcite . *",
    "_ rk4simulation _ : this plug - in provides a fourth - order runge - kutta solver for the time - dependent schrdinger equation as in eq .",
    "( [ eq : tdse ] ) .",
    "rk4simulation uses two time steps , one for the outer _ anneal _ method which updates the hamiltonian and a second for the inner _ evolve _ loop that numerically solves a finite - difference equation . for each",
    "_ evolve _ time step , the plug - in updates the quantum state and for each _ anneal _ it computes the instantaneous eigenspectrum .",
    "the plug - in also implements the _ querystate _ method to provide a _ snapshot _",
    "output that contains details about the computational state and eigenspectrum .",
    "simulation options include the time steps , number of _ snapshot _ files created , and number of eigenstates reported by _",
    "querystate_. this plug - in also makes use of the linear algebra functionality provided by the eigen library . *",
    "_ fopsimulation _ : the fopsimulation plug - in is based on a first - order perturbative solution to the time - dependent schrdinger equation .",
    "it evolves a pure state according to a first - order magnus expansion for the time - dependent propagation operator .",
    "numerically , the propagation operator is diagonalized by the _",
    "anneal _ method and applied successively to the state during the _ evolve _ method .",
    "this method has an error of @xmath92 .",
    "similar to the other simulation methods , eigen is used to perform the matrix exponential and matrix - vector multiplications .",
    "the design and implementation of jade relies heavily on test - driven development .",
    "a formal and rigorous testing model was defined before any actual product code was developed .",
    "this has ensured that ( 1 ) the functionality of each test unit was defined prior to its implementation and ( 2 ) the implementation of each source unit was fully compliant with the predetermined functionality .",
    "we employed test - driven development by modeling and designing surrogate classes whose sole purpose was for unit testing critical behavior in actual jade classes .",
    "an example is shown in fig .",
    "[ fig : st ] , where we test the _ simulation _ class using surrogates for most objects in the sapphire component .",
    "there is a corresponding _ simulationtester _ class .",
    "every class in jade has a corresponding test class in order to provide the greatest assurance that the code adheres to design requirements .",
    "as an example of how jade can be used for evaluating quantum programs , we present results based on the recent experimental benchmarks reported by boixo et al . @xcite .",
    "their work was performed on the rainier processor from d - wave systems , inc . and used the 8-qubit ising model represented in fig .",
    "[ fig:8qubit ] .     and vertices 5 - 8 represent biases of @xmath93 .",
    "all the edges represent @xmath94 couplings between connected vertices .",
    "[ fig:8qubit ] _ ]    boixo et al .",
    "showed both theoretically and experimentally that the 8-qubit model in fig .",
    "[ fig:8qubit ] exhibits a unique behavior .",
    "this particular 8-qubit problem exhibited a distinctive behavior that differentiates between the quantum and classical annealing dynamics .",
    "the ising hamiltonian has a 17-fold degenerate ground state .",
    "they used multiple runs of the developed program on the rainier processor to recover all 17 ground states from computational readout .",
    "we have used the benchmark developed by boixo et al .  to demonstrate the functionality of jade . specifically , we defined an 8-qubit _ processor _ supporting the @xmath95 ( bipartite ) connectivity familiar from the unit cell in the rainier processor as shown in fig .",
    "[ fig : dw1hw ] .",
    "we used an _ embedding _ entity based on the maximal minor method discussed by klymko et al .",
    "@xcite and we matched the mapping taken by boixo et al .",
    "we programmed linear annealing schedules , i.e. , @xmath96 and @xmath97 , and a final time of @xmath98 , where @xmath99 defines time relative to the energy scaling @xmath100 of the hamiltonian @xmath20 , i.e. , @xmath101 .",
    "fortuitously , the value of @xmath100 drops out of these calculations as we measure time relative to @xmath18 , i.e. , as @xmath102 .",
    "we have neglected constraints on the controls , as the ising parameters were very simple , and we have neglected all forms of noise in the hardware physics .    the developed _",
    "entity was then simulated using the rksimulation plug - in described in sec .",
    "[ sec : plugins ] .",
    "the simulation options given to this fourth - order runge - kutta finite - difference solver invoked a quasi - static approximation for the hamiltonian . that is to say , we used an _ evolve _ time step of 0.0001 @xmath103 with updates to the hamiltonian made during every _ anneal _ with a time step of 0.05 @xmath103 .",
    "the computational registers were initialized to the exact ground state of the initial hamiltonian in eq .",
    "( [ eq : hi ] ) . for diagnostics",
    ", we computed the complete eigenspectrum every 3 @xmath103 and output both the spectrum and the complete quantum state as part of a _ snapshot_. the _ measure _ method returned an ordered listing of the output states with their associated probabilities in the generated _ result _ entity .",
    "for a total of 11 points for each of the 256 spectra lines .",
    "[ fig : groundspectrum],scaledwidth=45.0% ]     for a total of 11 points for each of the 256 spectra lines .",
    "[ fig : groundspectrum],scaledwidth=45.0% ]    the complete time - dependent eigenspectrum computed by jade is shown in the left panel of fig .",
    "[ fig : groundspectrum ] .",
    "this consists of @xmath104 = 256 lines representing the time - dependent energies of the 256 eigenstates of the hamiltonian . at the final time @xmath18",
    ", there are 17 ground states with eigenenergy @xmath105 .",
    "this matches the eigenenergy and degeneracy derived by boixo et al .",
    "the 17 time - dependent spectra that result in a ground state at the final time are shown in the right panel of fig .",
    "[ fig : groundspectrum ] .",
    "the presence of kinks in the plot indicate that several states undergo avoided crossings with higher energy levels . recall that the definition of the spectral gap @xmath78 in eq .",
    "( [ eq : gap ] ) did not distinguish between those instantaneous excited states that terminate in the final ground state manifold from those excited states that remain excited at time @xmath18 .",
    "states terminating in the ground state manifold are not computational errors , but transitions from those states to higher lying excited states can contribute to the observed error rate .",
    "the computed populations for the 17 ground states at time @xmath18 are presented in table 1 alongside the corresponding computational basis state .",
    "it is evident that the first 16 states , i.e. , the manifold of states with qubits 1 - 4 in the 0 ( spin down ) state , have approximately equal probability while the 17-th state is roughly two orders of magnitude less .",
    "however , all the ground states are significantly more likely than the 18-th most probable state , which has a probability much less than @xmath106 .",
    ".degenerate ground states of the 8-qubit model and their computed probabilities .",
    "[ tab : pop ] [ cols=\">,^,>\",options=\"header \" , ]     $ ] .",
    "[ fig : groundpop]_,height=262 ]    the time - dependence of the instantaneous population in the computational basis is shown in fig .  [",
    "fig : groundpop ] . recall that the system is initialized in the singular computational ground state , as indicated by maximum probability at time @xmath107 .",
    "as time progresses , the population remains in the instantaneous ground state until @xmath108 at this point in the program schedule , the energy gap between the ground state and the lowest lying excited states has narrowed sufficiently to permit population transfer , thereby violating the adiabatic condition . at this point in the dynamics , however , the lowest - lying excited states represent instantaneous states that will terminate in the ground state at time @xmath6 .",
    "there are 16 such states participating in the apparent convergence to approximately 15/16 of the total probability and , as shown in table [ tab : pop ] .",
    "the 17-th ground state is not visible in this plot , due to the scale of its contribution , however it undergoes a similar behavior and contains approximately @xmath109 of the population .",
    "approximately @xmath110 of probability is distributed over the remaining @xmath111 excited states .",
    "our simulation of the 8-qubit program appears to be in qualitative agreement with the experimental and theoretical results of boixo et al .",
    "however , there are several key differences between their program and ours .",
    "first , the annealing schedules used by boixo et al . are not linear and we expect that impacts our comparison of observed and computed probabilities .",
    "second , we have not incorporated any sources of noise into our simulation studies , whereas previous experiments on the d - wave processors have suggested influences of thermal noise may be significant .",
    "nevertheless , our intention of this demonstration has been to provide a verifiable example that jade is useful for developing quantum programs and supporting benchmark analysis .",
    "the present availability and continuing development of adiabatic quantum computing hardware opens up new avenues of research for defining methods of quantum programming and computational benchmarking .",
    "experimental studies are necessary for measuring actual computational power of processors and for improving programming practices .",
    "test vectors appropriate for benchmark studies must be well defined and the associated difficulty well understood in order to reliably measure the influence of programming and processor methodologies .",
    "our contribution has been to develop a software environment that offers an interactive approach to programming the adiabatic quantum optimization algorithm .",
    "jade parametrizes the process of programming the aqo algorithm and it offers opportunities for tuning each step .",
    "jade , or software like it , is needed for standardizing program studies as well as for optimizing program performance .",
    "in particular , we have shown how there are many tunable parameters that contribute to the implementation of the aqo algorithm in a processor modeled by a spin - glass system .",
    "jade offers opportunities for optimizing performance across program parameters by exposing these interfaces to the user .",
    "similarly , the _ program _ entity introduced here is one example of a data structure that captures program instance and , consequently , standardizes program specification .",
    "we have used _ program _ to initialize numerical simulations , but it would also be possible to submit these program directly to the d - wave systems processor . the direct interaction between jade and the underlying hardware is currently under investigation .",
    "jade also provides a plug - in architecture to enable extensions to functionality through user - defined programming , simulation , and diagnostic methodologies .",
    "we have discussed our implementation of two high - level logical input methods ( bop and qubo problems ) , reconfigurable processor definitions in terms of hardware size and connectivity ) , and multiple numerical simulation methods for computing the time - dependent eigenspectra and eigenstates . the extensible design of jade permits each of these features to be easily replaced by newer and potentially more versatile methods without revision to the existing code base .    finally , the programming sequence for the aqo algorithm summarized in fig .",
    "[ fig : flowchart ] is sufficient for the currently available hardware models .",
    "however , we anticipate that future hardware and programming models will modify the steps taken in compiling an adiabatic quantum algorithm down to a ( future ) quantum processor .",
    "in particular , our approach does not account for fault - tolerance , quantum error correction , or quantum control techniques , which are expected to be useful for the broader aqc paradigm @xcite .",
    "nevertheless , we believe jade exemplifies the type of programming environment currently needed by the quantum computer science community for evaluating the performance of current and future quantum processors .",
    "this work was supported by the lockheed martin open innovation program at oak ridge national laboratory .",
    "the authors thank greg tallant and peter stanfill of the lockheed martin aeronautics division for technical assistance .",
    "h.  s.  thanks the department of energy science undergraduate laboratory internship ( suli ) program .",
    "t.  s.  h.  thanks owen s. humble for technical discussions .",
    "this manuscript has been authored by a contractor of the u.s .",
    "government under contract no .",
    "de - ac05 - 00or22725 .",
    "accordingly , the u.s .",
    "government retains a non - exclusive , royalty - free license to publish or reproduce the published form of this contribution , or allow others to do so , for u.s .",
    "government purposes .",
    "developers interested in licensing jade should contact the authors .",
    "10 url # 1#1urlprefix[2][]#2 nielsen m  a and chuang i  l 2000 _ quantum computation and quantum information : 10th anniversary edition _",
    "( new york , ny , usa : cambridge university press )                harris r , johnson m , lanting t , berkley a , johansson j , bunyk p , tolkacheva e , ladizinsky e , ladizinsky n ,",
    "oh t , cioata f , perminov i , spear p , enderud c , rich c , uchaikin s , thom m , chapple e , wang j , wilson b , amin m , dickson n , karimi k , macready b , truncik c , and rose g 2010 _ phys .",
    "b _ * 82 * 024511024526          bunyk p  i , hoskinson e , johnson m  w , tolkacheva e , altomare f , berkley a  j , harris r , hilton j  p , lanting t and whittaker j 2014 architectural considerations in the design of a superconducting quantum annealing processor ( _ preprint _ )                                                mcgeoch c  c and wang c 2013 experimental evaluation of an adiabiatic quantum system for combinatorial optimization _",
    "proceedings of the acm international conference on computing frontiers _",
    "cf 13 ( acm ) pp 23:123:11 isbn 978 - 1 - 4503 - 2053 - 5                            kempe j , kitaev a and regev o 2005 _ fsttcs 2004 : foundations of software technology and theoretical computer science _",
    "( _ lecture notes in computer science _",
    "vol 3328 ) ed lodaya k and mahajan m ( springer berlin heidelberg ) pp 372383 isbn 978 - 3 - 540 - 24058 - 7"
  ],
  "abstract_text": [
    "<S> adiabatic quantum computing is a promising route to the computational power afforded by quantum information processing . </S>",
    "<S> the recent availability of adiabatic hardware has raised challenging questions about how to evaluate adiabatic quantum optimization programs . </S>",
    "<S> processor behavior depends on multiple steps to synthesize an adiabatic quantum program , which are each highly tunable . </S>",
    "<S> we present an integrated programming and development environment for adiabatic quantum optimization called jade that provides control over all the steps taken during program synthesis . </S>",
    "<S> jade captures the workflow needed to rigorously specify the adiabatic quantum optimization algorithm while allowing a variety of problem types , programming techniques , and processor configurations . </S>",
    "<S> we have also integrated jade with a quantum simulation engine that enables program profiling using numerical calculation . </S>",
    "<S> the computational engine supports plug - ins for simulation methodologies tailored to various metrics and computing resources . </S>",
    "<S> we present the design , integration , and deployment of jade and discuss its potential use for benchmarking adiabatic quantum optimization programs by the quantum computer science community . </S>"
  ]
}