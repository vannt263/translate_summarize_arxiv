{
  "article_text": [
    "failure detection constitutes a fundamental building block for crafting fault - tolerant distributed systems , and many researchers have devoted their efforts on this direction during the last decade .",
    "failure detection protocols are often described by their authors making use of informal pseudo - codes of their conception .",
    "often these pseudo - codes use syntactical constructs such as  @xcite ,  @xcite ,  @xcite , or  @xcite , together with several variants ( see table  [ t : syntax ] ) .",
    "we observe that such syntactical constructs are not often found in cots programming languages such as c or c++ , which brings to the problem of translating the protocol specifications into running software prototypes using one such standard language .",
    "furthermore the lack of a formal , well - defined , and standard form to express failure detection protocols often leads their authors to insufficiently detailed descriptions .",
    "those informal descriptions in turn complicate the reading process and exacerbate the work of the implementers , which becomes time - consuming , error - prone and at times frustrating .",
    "several researchers and practitioners are currently arguing that failure detection should be made available as a network service  @xcite . to the best of our knowledge",
    "no such service exists to date .",
    "lacking such tool , it is important to devise methods to express in the application layer of our software even the most complex failure detection protocols in a simple and natural way .    in the following",
    "we introduce one such method  a class of `` time - outs '' , i.e. , objects that postpone a certain function call by a given amount of time .",
    "this feature converts time - based events into non time - based events such as message arrivals and easily expresses the constructs in table  [ t : syntax ] in standard c. in some cases , our class removes the need of concurrency management requirements such as coroutines or thread management libraries .",
    "the formal character of our method allows rapid - prototyping of the algorithms with minimal effort .",
    "this is proved through a literate programming  @xcite framework that produces from a same source file both the description meant for dissemination and a software skeleton to be compiled in standard c or c++ .",
    "the rest of this article is structured as follows : section  [ s : tool ] introduces our tool . in sect .",
    "[ s : cases ] we use it to express three classical failure detectors .",
    "section  [ s : bb ] is a case study describing a software system built with our tool .",
    "our conclusions are drawn in sect .",
    "[ s : end ] .",
    "this section briefly describes the architecture of our time - out management system ( tom ) .",
    "the tom class appears to the user as a couple of new types and a library of functions .",
    "table  [ examp ] provides an idea of the client - side protocol of our tool .",
    "[ cols= \" < , < \" , ]     note that the time - outs alarm functions do not clear / set the flag  doing so a hung dir-@xmath0 would go undetected . on the contrary ,",
    "those functions trigger the transmission of messages that once received by healthy components trigger the execution of the meant actions .",
    "the following is a pseudo - code for the iat algorithm :    aaaaaaa +   + ; + _ activationmessage _ , @xmath1 ; +   + tom_declare ( , tom_cyclic , + tom_set_enable , iat_clear_timeout , 0 , ) ; + tom_set_action ( , actionsend ) ; + tom_insert ( ) ; +   + receive(_activationmessage _ ) ; +   + \\ { + receive(@xmath1 ) ; + ( @xmath1._type _ @xmath2 ) + ( iaf @xmath2 ` true ` ) iaf @xmath3 ` false ` ; + sendall ( , @xmath4 ) ; delete_timeout ( ) ; + } +   + actionsend ( ) \\ { send ( , iat @xmath4 ) ; }    the time - out formulation of the iat algorithm is given in next section .",
    "the resilience of the dir net to crash faults comes from the and the s running the following distributed algorithm of failure detection :    [ [ dirm ] ] algorithm + + + + + + + + + +    let us call mid the node hosting the and @xmath5 the number of processing nodes that host a .",
    "the has to send cyclically a ( `` manager - is - alive '' ) message to all the s each time time - out expires  this is shown in the right side of fig .",
    "[ f : dadm ] .",
    "obviously this is a multiplicity @xmath5 `` repeat '' construct , which can be easily managed through a cyclic time - out with an action that signals that a new cycle has begun . in this case",
    "the action is `` send a message of type to the . ''",
    "the manager also expects periodically a @xmath6 message ( `` this - agent - is - alive '' ) from each node where a is expected to be running .",
    "this is easily accomplished through a vector of @xmath7 time - outs . the left part of fig .",
    "[ f : dadm ] shows this for node @xmath8 .",
    "when time - out @xmath9 expires it means that no @xmath10 message has been received within the current period . in this case the enters what we call a `` suspicion period '' . during such period",
    "the manager needs to distinguish the case of a late from a crashed one .",
    "this is done by inserting a non - cyclic time - out , namely @xmath11 .    during the suspicion period",
    "only one out of the following three events may occur :    1 .   a late @xmath10 is received .",
    "2 .   a @xmath12 from iat at node",
    "@xmath13 is received .",
    "nothing comes in and the time - out expires .    in case 1 .",
    "we get out of the suspicion period , conclude that at node @xmath13 was simply late and go back waiting for the next @xmath10 .",
    "it is the responsibility of the user to choose meaningful values for the time - outs deadlines . by `` meaningful '' we mean that those values should match the characteristics of the environment and represent a good trade - off between the following two risks :    overshooting , : :    i.e. , choosing too large values for the deadlines",
    "this decreases the    probability of false negatives ( regarding a slow process as a failed    process ; this is known as accuracy in failure detection terminology )    but increases the detection latency ; undershooting , : :    namely under - dimensioning the deadlines .",
    "this may increase    considerably false negatives but reduces the detection latency of    failed processes .    under the hypotheses of properly chosen time - outs deadlines , and that of a single , stable environment , the occurrences of late @xmath10 messages should be exceptional .",
    "this event would translate in a false deduction uncovered in the next cycle .",
    "further late messages would postpone a correct assessment , but are considered as an unlikely situation given the above hypotheses . an alternative and better approach",
    "would be to track the changes in the environment .",
    "for the case at hand this would mean that the time - outs deadlines should be adaptively adjusted .",
    "this could be possible , e.g. , through an approach such as in  @xcite .",
    "if 2 . is the case we assume the remote component has crashed though its node is still working properly as the iat on that node still gives signs of life . consequently we initiate an error recovery step .",
    "this includes sending a `` wakeup '' message to the remote iat so that it spawns another on that node .    in case 3 .",
    "we assume the entire node has crashed and initiate node recovery",
    ".    underlying assumption of our algorithm is that the iat is so simple that if it fails then we can assume the whole node has failed .",
    "[ [ dirb ] ] algorithm + + + + + + + + + +    this algorithm is also divided into two concurrent tasks . in",
    "the first one on node @xmath8 has to cyclically send @xmath6 messages to the manager , either in piggybacking or when time - out expires .",
    "this is represented in the right side of fig .",
    "[ dadb ] .",
    "the s in turn periodically expect a @xmath14 message from the . as evident when comparing fig .",
    "[ f : dadm ] with fig .",
    "[ dadb ] , the algorithm is very similar to the one of the manager : also enters a suspicion period when its manager does not appear to respond quickly enough  this period is managed via time - out , the same way as in .",
    "also in this case we can get out of this state in one out of three possible ways : either    1 .",
    "a late @xmath15 is received , or 2 .",
    "a @xmath16 sent by the iat at node mid is received , or 3 .",
    "nothing comes in and the time - out expires .    in case 1 .",
    "we get out of the suspicion period , conclude that the manager was simply late , go back to normal state and start waiting for the next @xmath17 message . also in this case , a wrong deduction shall be detected in next cycles . if 2 .",
    "we conclude the manager has crashed though its node is still working properly , as its iat acted as expected .",
    "consequently we initiate a manager recovery phase structured similarly to the recovery step described in sect .",
    "[ dirm ] . in case 3 .",
    "we assume the node of the manager has crashed , elect a new manager among the s , and perform a node recovery phase .",
    "table  [ t : tandm ] summarizes the and algorithms .",
    "we have developed the dir net using the windows tiran libraries  @xcite and the cweb system of structured documentation .",
    "the management of a large number of time - outs may be an error prone task . to simplify it , we designed a simple configuration language .",
    "figure  [ f : xxx4 ] shows an example of configuration script to specify the structure of the dir net ( in this case , a four node system with three s deployed on nodes 13 and the on node 0 ) and of its time - outs .",
    "a translator produces the c header files to properly initialize an instance of the dir net ( see fig .",
    "[ f : xxx5 ] ) .",
    "time - outs may also be used to specify fault injection actions with fixed or pseudo - random deadlines . in the dir net this",
    "is done as follows .",
    "first we define the time - out :    .... # ifdef inject   tom_declare(&inject , tom_non_cyclic , tom_set_enable ,               inject_fault_timeout , i , inject_fault_deadline ) ;   tom_insert(tom , & inject ) ; # endif ....    the alarm of this time - out sends the local dir-@xmath0 a message of type `` ` inject_fault_timeout ` '' .",
    "figure  [ f : mainloop ] shows an excerpt from the actual main loop of the in which this message is processed .",
    "a service such as tom is indeed a single - point - of - failure in that a failed tom in the dir net would result in all components being unable to perform their failure detection protocols .",
    "such a case would be indistinguishable from that of a crashed node by the other dir net components . as well known from , e.g. , @xcite , a single design fault in tom s implementation could bring the system to a global failure . nevertheless , the isolation of a _ service _ for time - out management may pave the way for a cost - effective adoption of multiple - version software fault tolerance techniques  @xcite such as the well known recovery block  @xcite , or @xmath18-version programming  @xcite .",
    "another possibility would be to use the dir net algorithm to tolerate faults in tom .",
    "no such technique has been adopted in the current implementation of tom .",
    "other factors , such as congestion or malicious attacks might introduce performance failures that would impact on all modules that depend on tom to perform their time - based processing  @xcite .",
    "we have introduced a tentative _ lingua franca _ for the expression of failure detection protocols .",
    "tom has the advantages of being simple , elegant and not ambiguous .",
    "obvious are the many positive relapses that would come from the adoption of a standard , semi - formal representation with respect to the current babel of informal descriptions  easier acquisition of insight , faster verification , and greater ability to rapid - prototype software systems .",
    "the availability of a tool such as tom is also one of the requirements of the timed - asynchronous system model  @xcite .",
    "given the current lack of a network service for failure detection , the availability of standard methods to express failure detectors in the application layer is an important asset : a tool like the one described in this paper isolates and crystallizes a part of the complexity required to express failure detection protocols .",
    "this complexity may become transparent of the designer , with tangible savings in terms of development times and costs , if more efforts will be devoted to time - outs configuration and automatic adjustments through adaptive approaches such as the one described in  @xcite . such optimizations will be the subject of future research .",
    "future plans also include to port our system to aspectj  @xcite so as to further enhance programmability and separation of design concerns .    as a final remark we would like to point out how , at the core of our design choices ,",
    "is the selection of c and literate programming , which proved to be invaluable tools to reach our design goals .",
    "nevertheless we must point out how these choices may turn into intrinsic limitations for the expressiveness of the resulting language .",
    "in particular , they enforce a syntactical and semantic structure , that of the c programming language , which may be regarded as a limitation by those researchers who are not accustomed to that language . at the same time we would like to remark also that those very choices allow us a straightforward translation of our constructs into a language like promela  @xcite , which resembles very much a c language augmented with hoare s csp  @xcite .",
    "accordingly , our future work in this framework shall include the adoption of the promela extension of prof .",
    "bonaki , which allows the verification of concurrent systems that depend on timing parameters  @xcite .",
    "interestingly enough , this version of promela includes new objects , called discrete time countdown timers , which are basically equivalent to our non - cyclic time - outs .",
    "our goal is to come up with a tool that generates from the same literate programming source ( 1 ) a pretty printout in tex , ( 2 ) c code ready to be compiled and run , and ( 3 ) promela code to verify some properties of the protocol .",
    "we acknowledge the work by alessandro sanchini , who developed the communication library used by our tool , and the many and valuable comments of our reviewers .",
    "van renesse , r. , minsky , y. , and hayden , m. : ` a gossip - style failure detection service ' , proceedings of middleware  98 , davies , n. , seitz , j. and raymond , k. ( eds . ) , the lake district , uk , september 1998 , pp .",
    "springer .",
    "botti , o. , de  florio , v. , deconinck , g. , lauwereins , r. , cassinari , f. , donatelli , s. , bobbio , a. , klein , a. , kufner , h. , thurner , e. , and verhulst , e. : ` the tiran approach to reusing software implemented fault tolerance ' . .",
    "rhodos , greece , january 1999 , pp . 325332 , ieee comp .",
    "soc . press .",
    "bonaki , d. , and dams , d. : ` discrete - time promela and spin ' . proc . of formal techniques in real - time and fault - tolerant systems ( ftrtft 98 ) .",
    "1998 , lecture notes in computer science 1486 , pp .",
    "307310 , springer - verlag ."
  ],
  "abstract_text": [
    "<S> failure detection protocols  a fundamental building block for crafting fault - tolerant distributed systems  are in many cases described by their authors making use of informal pseudo - codes of their conception . </S>",
    "<S> often these pseudo - codes use syntactical constructs that are not available in cots programming languages such as c or c++ . </S>",
    "<S> this translates into informal descriptions that call for ad hoc interpretations and implementations . </S>",
    "<S> being informal , these descriptions can not be tested by their authors , which may translate into insufficiently detailed or even faulty specifications . </S>",
    "<S> this paper tackles this problem introducing a formal syntax for those constructs and a c library that implements them  a tool - set to express and reason about failure detection protocols . </S>",
    "<S> the resulting specifications are longer but non ambiguous , and eligible for becoming a standard form . </S>"
  ]
}