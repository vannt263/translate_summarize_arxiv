{
  "article_text": [
    "the colossal amount of data stored or conveyed by network nodes requires a special design of coding structures to protect information against loss or errors and to facilitate its access . at the end - user level , coding is essential for transmitting information towards the network whether it is located in a single node or distributed over many nodes . at the network level , coding should help nodes to reliably save a big amount of data and to efficiently communicate with each others .",
    "powerful capacity - achieving error - correcting codes developed in the last two decades are mainly efficient at large or asymptotic block length , e.g. low - density parity - check codes ( ldpc )  @xcite and their spatially - coupled ensembles  @xcite , parallel - concatenated convolutional ( turbo ) codes  @xcite@xcite , and polar codes derived from channel polarization  @xcite .",
    "data transmission and storage in many nowadays networks may require short - length packets that are not suitable for capacity - achieving codes .",
    "the current interest in finite - length channel coding rates @xcite put back the light on code design for short and moderate block length .",
    "many potential candidates are available for this non - asymptotic length context such as binary and non - binary bch codes , including reed - solomon ( rs ) codes , reed - muller ( rm ) codes , and tensor product codes of all these linear block codes  @xcite@xcite@xcite",
    ".    product codes , introduced by peter elias in 1954  @xcite , are tensor products of two ( or more ) simple codes with a structure that is well - suited to iterative decoding via its graphical description . in the early decades after their invention",
    ", product codes received a great attention due to their capability of correcting multiple burst errors  @xcite@xcite , the availability of erasure - error bounded - distance decoding algorithms @xcite , the ability of correcting many errors beyond the guaranteed correction capacity  @xcite , and their efficient implementation with a variable rate @xcite .",
    "the pioneering work by tanner  @xcite brought new tools to coding theory and put codes on graphs , including product codes , and their iterative decoding in the heart of modern coding theory  @xcite@xcite@xcite .",
    "the graph approach of coding led to new optimal cycle codes on ramanujan / cayley graphs  @xcite and to generalizations of ldpc and product codes , known as gld codes , studied for the binary symmetric channel ( bsc ) and the gaussian channel  @xcite .",
    "the excellent performance of iterative ( turbo ) decoding of product codes on the gaussian channel  @xcite made them compete with turbo codes and ldpc codes for short and moderate block length .",
    "the convergence rate and stability of product codes iterative decoding were studied based on a geometric framework  @xcite .",
    "product codes with mixed convolutional and block components were also found efficient in presence of impulsive noise  @xcite .",
    "in addition , iterated reed - muller product codes were shown to exhibit good decoding thresholds for the binary erasure channel , but at high and low coding rates only  @xcite .",
    "the class of product codes in which the row and the column code are both reed - solomon codes was extensively used since more than two decades in dvd storage media and in mobile cellular networks  @xcite . in these systems ,",
    "the channel is modeled as a symbol - error channel without soft information , i.e. suited to algebraic decoding .",
    "improvements were suggested for these rs - based product codes such as soft information provided by list decoding  @xcite within the iterative process in a reddy - robinson framework  @xcite .",
    "also , rs - based product codes were directly decoded via a guruswami - sudan list decoder  @xcite after being generalized to bivariate polynomials  @xcite . for general tensor products of codes and",
    "interleaved , a recent efficient list decoding algorithm was published @xcite , with an improved list size in the binary case . on channels with soft information",
    ", rs - based product codes may be row - column decoded with soft - decision constituent decoders @xcite@xcite .",
    "tolhuizen found the hamming weight distribution of both binary and non - binary product codes up to a weight less than @xmath7  @xcite .",
    "enumeration of erasure patterns up to a weight less than @xmath8 was realized by sendrier for product codes with mds components @xcite .",
    "rosnes studied stopping sets of binary product codes under iterative ml - component - wise decoding @xcite , where the defined stopping sets and their analysis are based on the generalized hamming distance  @xcite@xcite .",
    "in this paper , we consider non - binary product codes with mds components and their iterative algebraic decoding on the erasure channel .",
    "both independent and block erasures are considered in our paper .",
    "the erasure channel is currently a major area of research in coding theory @xcite@xcite because of strong connections with theoretical computer science @xcite and its model that easily allows to understand the behavior of codes such as for ldpc codes  @xcite , for general linear block codes  @xcite , and for turbo codes  @xcite .",
    "coding for block erasures was examined by lapidoth in the context of convolutional codes  @xcite .",
    "this was a basis to later construct codes for the block - fading channel with additive white gaussian noise  @xcite@xcite .",
    "the notion of _ rootcheck _ introduced in @xcite@xcite for single - parity checknodes was applied to more general checknodes in gld codes @xcite and product codes @xcite to achieve diversity on non - ergodic block - fading channels .",
    "the rootcheck concept is the main tool in this paper , in a way similar to @xcite , to define a compact graph representation and study iterative decoding in presence of block erasures .",
    "edge coloring is one of the most interesting problems in modern graph theory  @xcite . in this paper ,",
    "edge coloring is a tool , when combined to the rootcheck concept , yields double - diversity product codes .",
    "our work is valid for finite - length mds - based product codes only .",
    "product codes for asymptotic block length were studied for single - parity codes constituents @xcite and for the erasure channel with a standard regular structure @xcite and mds - based irregular structures @xcite .    whether a product code is endowed with an edge coloring or not , the analysis of stopping sets , their characterization and their enumeration is a fundamental task to be able to design codes for erasure channels and determine the decoder performance .",
    "our work in this sense is an improvement to previous works cited above by tolhuizen , sendrier , and rosnes .",
    "besides this objective of stopping sets characterization which is useful for independent channel erasures and erasures occurring in blocks of symbols , recent works on locality @xcite stimulated us to search for edge colorings with a large population of edges that admit a minimal rootcheck order .",
    "locality is a concept encountered in distributive storage @xcite@xcite where classic coding theory is adapted to the nature of a network with distributed nodes with its own constraints of load in bandwidth and storage @xcite@xcite .",
    "furthermore , product codes with mds components appear to be suited to distributive storage @xcite owing to their simple and mature techniques of erasure resilience . in our search for good edge colorings ,",
    "we provide a new algorithm based on the concept of differential evolution  @xcite@xcite .",
    "we use no crossover in our evolution loop , only a mutation of the population of bad edges is made to search for a better edge coloring .",
    "our mds - based product codes equipped with a double - diversity edge coloring are suited to distributed storage applications and to wireless networks where diversity is a key parameter . + the paper",
    "is structured as follows .",
    "section ii gives a list of mathematical notations .",
    "the graph representation of product codes is given in section iii , including compact and non - compact graphs .",
    "also the rootcheck concept and its consequences are also found in section iii .",
    "the analysis of stopping sets is made in section iv .",
    "our edge coloring algorithm for bipartite graphs of product codes is described in section v. finally , in section vi , we study the performance of product codes with mds components on erasure channels and we give theoretical and numerical results before the conclusions in the last section .",
    "the main results in this paper are :    * establishing a new compact graph for product codes .",
    "the compact graph has many advantages , the main one being its ability to imitate a tanner graph with parity - check nodes .",
    "the compact graph is also the basis for the differential evolution edge coloring .",
    "see section  [ sec_graph_representations_sub2 ] .",
    "* iterative decoding analysis of finite - length product codes , mainly the proof of new bounds on the number of decoding iterations .",
    "see theorem  [ th_root_order_max ] and corollary  [ cor_rho_max ] . * proving new properties of stopping sets for product codes with mds components .",
    "see propositions  [ prop_not_mds]&[prop_mds_w ] , corollaries  [ coro_not_mds]-[cor_stop_in_gc ] , and lemmas  [ lem_max_support]&[lem_max_zeros ] . * complete enumeration and characterization of stopping sets up to a size @xmath1 , where @xmath9 are the minimum hamming distances of the component codes .",
    "this stopping set enumeration goes beyond the weight @xmath10 of tolhuizen s theorem  3 for codeword enumeration in the mds components case .",
    "see lemmas  [ lem_graph_bipartite_deg2]&[lem_graph_bipartite_deg2_1 ] and theorems  [ th_stopping_sets_d]&[th_stopping_sets_d1_d2 ] . * a new edge coloring algorithm ( deca ) capable of producing double - diversity colorings despite the huge size of the coloring ensembles .",
    "see section  [ sec_edge_coloring_sub2 ] .",
    "* construction via the deca algorithm of product codes maximizing the number of edges with root order @xmath11 , i.e. minimizing the locality when the process of repairing nodes is considered . see section  [ sec_edge_coloring_sub3 ] . * first numerical results for mds - based product codes on erasure channels showing how close iterative decoding is to ml decoding , mainly for small @xmath12 .",
    "we proved that iterative decoding perform as well as ml decoding ( the ratio of error probabilities tends to @xmath11 ) for mds - based product codes at small @xmath12 .",
    "see proposition  [ prop_stop_codewords ] , corollary  [ cor_pewg_pewml ] , and other performance results in section  [ perf_erasure_sub2 ] .",
    "* great advantage of double - diversity colorings of product codes ( with respect to codes without coloring ) in presence of unequal probability erasures .",
    "thus , double - diversity colorings are efficient on both ergodic and non - ergodic erasure channels .",
    "see section  [ perf_erasure_sub3 ] .",
    "we start by the notation related to the product code and its row and column components .",
    "the impatient reader may skip this entire section and then refer to it later to clarify any notation within the text .",
    "basic notions on product codes and fundamental properties are found in main textbooks @xcite@xcite@xcite and the encyclopedia of telecommunications @xcite .",
    "+ the column code @xmath13 is a linear block code over the finite field @xmath14 with parameters @xmath15_q$ ] which may be summarized by @xmath16 $ ] when no confusion is possible .",
    "the integer @xmath17 is the code alphabet size , @xmath18 is the code length , @xmath19 is the code dimension as a vector subspace of @xmath20 , and @xmath2 is the minimum hamming distance of @xmath13 . similarly , the row code @xmath21 is a linear block code with parameters @xmath22_q$ ] .",
    "let @xmath23 and @xmath24 be two matrices of size @xmath25 and @xmath26 containing in their row a basis for the subspaces @xmath13 and @xmath21 respectively . from the two generator matrices @xmath23 and @xmath24 a product code @xmath27 is constructed as a subspace of @xmath28 with a generator matrix @xmath29 , where @xmath30 and @xmath31 denotes the kronecker product @xcite . @xmath27",
    "has dimension @xmath32 and minimum hamming distance @xmath33 .",
    "@xmath13 and @xmath21 are also called component codes , this is a terminology from concatenated codes . in @xcite and @xcite ,",
    "vertices associated to component codes are called subcode nodes .",
    "a linear @xmath34_q$ ] code is said to be mds , i.e. maximum distance separable , if it satisfies @xmath35 .",
    "binary mds codes are the trivial repetition codes and the single parity - check codes . in this paper",
    ", we only consider non - trivial non - binary mds codes where @xmath36 .",
    "a linear code over @xmath14 of rate @xmath37 is said to be mds diversity - wise or mds in the block - fading / block - erasure sense if it achieves a diversity order @xmath38 such that @xmath39 , where @xmath0 is the number of degrees of freedom in the channel . the right term @xmath40 is known as the block - fading singleton bound @xcite@xcite . in this paper , @xmath0 shall denote the number of colors , i.e. the palette size of an edge coloring .",
    "assume that code symbols are partitioned into @xmath0 sub - blocks , a code is said to attain diversity @xmath38 if it is capable of correct decoding when @xmath41 sub - blocks are erased by the channel .",
    "the reader should refer to @xcite , chapter 3 , for an exact definition of diversity on fading channels with additive white gaussian noise .",
    "a product code shall be represented by a non - compact graph @xmath42 .",
    "@xmath43 is a complete bipartite graph where @xmath44 is the set of @xmath45 right vertices , @xmath46 is the set of @xmath18 left vertices , and @xmath47 is the set of @xmath48 edges representing the code symbols .",
    "a compact graph @xmath49 will also be introduced in the next section with @xmath50 .",
    "the number of edges ( also called super - edges ) in the compact graph is @xmath51 .",
    "a super - edge is equivalent to a super - symbol that represents @xmath52 symbols from @xmath14 .",
    "the ensemble of edge colorings is denoted @xmath53 and @xmath54 for @xmath43 and @xmath49 respectively .",
    "an edge coloring will be denoted by @xmath55 .",
    "given @xmath55 , the rootcheck order of an edge is @xmath56 .",
    "the greatest @xmath56 among all edges will be referred to as @xmath57 .",
    "the number of edges @xmath58 satisfying @xmath59 is @xmath60 , this is the number of good edges and will be processed by the deca algorithm in section  [ sec_edge_coloring ] .",
    "the deca parameter @xmath5 shall represent the number of edges to be mutated , i.e. those edges being chosen in the population of bad edges satisfying @xmath61 .    under iterative row - column decoding ,",
    "the rootcheck order @xmath62 is equal to the number of decoding iterations required to solve the edge value ( or the symbol associated to that edge ) . in this paper ,",
    "one decoding iteration is equivalent to decoding all rows or decoding all columns .",
    "a sequence of @xmath18 row decoders followed by a sequence of @xmath45 column decoders is counted as two decoding iterations .",
    "we give now a general definition of a stopping set .",
    "a detailed study is found in section [ sec_stopping_sets ] .",
    "the notion of a stopping set is useful for iterative decoding in presence of erasures @xcite .",
    "[ def_stopping_set ] let @xmath63_q$ ] be a linear code .",
    "assume that the symbols of a codeword are transmitted on an erasure channel .",
    "the decoder @xmath64 is using some deterministic decoding method .",
    "consider a set @xmath65 of @xmath66 fixed positions @xmath67 where @xmath68 .",
    "the set @xmath65 is said to be a stopping set if @xmath64 fails in retrieving the transmitted codeword when all symbols on the @xmath66 positions given by @xmath65 are erased .",
    "this paper focuses on stopping sets of a product code under iterative algebraic row - column decoding , i.e. referred to as type ii stopping sets .",
    "the number of stopping sets of size @xmath69 is @xmath70 .",
    "the rectangular support @xmath71 of a stopping set @xmath72 can be seen as the smallest rectangle containing @xmath72 . after excluding rows and columns",
    "not involved in @xmath72 , the rectangular support has size @xmath73 where @xmath74 .",
    "the word error performance of @xmath27 shall be estimated on erasure channels , @xmath75 is the word error probability under maximum likelihood decoding and @xmath76 is the word error probability under iterative row - column decoding .",
    "three erasure channels are considered : 1- the symbol erasure channel , @xmath77 , where code symbols are independently erased with a probability @xmath12 , 2- the color erasure channel , @xmath78 , where all symbols associated to the same color are block - erased with a probability @xmath12 . on the @xmath78",
    ", block - erasure events are independent from one color to another .",
    "3- the unequal probability symbol erasure channel , @xmath79 , where symbol erasures are independent but their erasure probability varies from one color to another .",
    "efficient graph representation of codes was established by tanner for different types of coding structures @xcite .",
    "bounds on the code parameters and iterative decoding algorithms were also proposed for codes on graphs @xcite . in this paper , we study the edge coloring of a product code graph , where edges represent code symbols . as shown below , the original graph for a product code is too complex , i.e. it leads to a large ensemble of colorings .",
    "hence , we introduce a compact graph where symbols are grouped together with the same color in order to reduce the size of the coloring ensemble .",
    "the compact graph also has another asset : grouping parity symbols together renders check nodes similar to parity - check nodes found in standard low - density parity - check codes  @xcite  @xcite .      consider a product code @xmath80_q \\otimes c_2[n_2,k_2]_q$ ] where @xmath13 is the column code and @xmath21 is the row code .",
    "the product code is defined over the finite field @xmath14 and has length @xmath48 and dimension @xmath81 given by @xcite @xmath82 each code symbol simultaneously belongs to one row and to one column .",
    "product codes studied in this paper are regular , in the sense that all columns are codewords of @xmath13 and all rows are codewords of @xmath21 .",
    "the graph of @xmath80_q \\otimes c_2[n_2,k_2]_q$ ] is built as follows .",
    "we use the same terminology as in @xcite :    * @xmath18 check nodes are drawn on the left .",
    "a left check node represents the coding constraint which states that a row belongs to @xmath21 .",
    "the @xmath18 left check nodes are referred to as @xmath21 check nodes , or row check nodes , or equivalently left vertices .",
    "* @xmath45 check nodes are drawn on the right . a right check node represents the coding constraint which states that a column belongs to @xmath13 .",
    "the @xmath45 right check nodes are referred to as @xmath13 check nodes , or column check nodes , or equivalently right vertices . *",
    "an edge is drawn between a left vertex and right vertex .",
    "it represents a code symbol located on the row of the left vertex and on the column of the right vertex .",
    "the code symbol belongs to @xmath14 .     of a product code",
    "@xmath83^{\\otimes 2}$ ] , i.e. @xmath84 , @xmath85 , @xmath86 , and @xmath87 edges representing 16 symbols in  @xmath14.[complete_graph4_4 ] ]    in summary , the product code graph @xmath88 is a complete biregular bipartite graph built from @xmath18 left vertices , @xmath45 right vertices , and @xmath89 edges representing code symbols .",
    "the left degree is @xmath45 and the right degree is @xmath18 .",
    "irregular product codes can be found in @xcite .",
    "our paper is restricted to regular product codes .",
    "figure  [ complete_graph4_4 ] shows the bipartite graph of a square regular symmetric product code @xmath83 \\otimes [ 4,2]$ ] .",
    "the graph structure reveals @xmath18 , @xmath45 , and @xmath30 .",
    "the dimensions @xmath19 and @xmath90 of the component codes have no effect on the number of vertices and edges in the product code graph .",
    "indeed , a @xmath91 \\otimes [ 4,3]$ ] code can also be defined by the graph in figure  [ complete_graph4_4 ] .",
    "the role of the dimensions @xmath19 and @xmath90 is played within the check constraints inside left and right vertices .",
    "similarly , the size of the finite field defining the code can not be revealed from the graph structure , i.e. the product code graph does not depend on @xmath17 .",
    "+    the non - compact graph @xmath42 for a @xmath16 \\otimes [ n_2,k_2]$ ] product code is a complete bipartite graph with @xmath92 left vertices and @xmath93 right vertices .      in @xcite where the diversity of binary product codes was considered",
    ", vertices of the non - compact graph were grouped together into super - vertices ( or supernodes ) because the different channel states lead to multiple classes of check nodes as in root - ldpc codes @xcite . to render a graph - encodable code , supernodes in @xcite were made by putting @xmath94 nodes together for a @xmath95 $ ] component code . also , @xmath94 is not necessarily a divisor of @xmath96 .",
    "+    the compact graph @xmath97 for a @xmath16 \\otimes [ n_2,k_2]$ ] product code is a complete bipartite graph with @xmath98 left vertices and @xmath99 right vertices .",
    "+ from the above definition , the number of edges in the compact graph @xmath49 is found to be @xmath100 assuming that @xmath101 divides @xmath18 and @xmath102 divides @xmath45 , a left check node in @xmath49 is equivalent to @xmath103 row constraints and a right check node in @xmath49 is equivalent to @xmath104 column constraints .",
    "an edge in the compact graph carries @xmath105 code symbols .",
    "to avoid confusion between edges of @xmath43 and @xmath49 , we may refer to those in @xmath49 as super - edges or equivalently as super - symbols .",
    "if @xmath106 is not multiple of @xmath107 , then the last row or column supernode will contain less than @xmath107 check nodes .",
    "figure  [ compact_graph2_2 ] depicts the compact graph of the @xmath83^{\\otimes 2}$ ] product code . all @xmath108^{\\otimes",
    "2}$ ] product codes have a compact graph identical to that of @xmath83^{\\otimes 2}$ ] , for all @xmath109 , @xmath96 even .",
    "with two supernodes on each side for the product code @xmath108^{\\otimes 2}$ ] , @xmath110 and @xmath111 supersymbols .",
    "each super - symbol ( i.e. super - edge ) contains @xmath112 symbols ( i.e. edges ) .",
    "[ compact_graph2_2 ] ]      from a coding point of view , diversity is the art of creating many replicas of the same information . from a channel point of view , diversity is the number of degrees of freedom available while transmitting information . in distributive storage , independent failure of individual machines",
    "is modeled by independent erasures of code symbols , while the outage of a cluster of machines is modeled as block erasures of code symbols . assuming a storage domain with a large set of machines partitioned into @xmath0 clusters , diversity of distributed coding is defined as",
    "follows : +    consider a product code @xmath27 defined over @xmath14 .",
    "assume that symbols are given @xmath0 different colors .",
    "erasing one color is equivalent to erasing all symbols having this color .",
    "the code is said to achieve a diversity @xmath38 if it is capable of filling all erasures after erasing @xmath41 colors .",
    "the code is full - diversity when @xmath113 .",
    "+ the integer @xmath38 may also be called the diversity order . for gaussian channels with fading",
    ", the diversity order appears as the slope of the error probability , i.e. @xmath114 @xcite . in the above definition",
    ", a cluster has been replaced by a color .",
    "we will use this terminology throughout the paper . notice that coloring symbols is equivalent to edge coloring of the product code graph .",
    "the number of edges is @xmath48 in the non - compact graph and @xmath115 in the compact graph . in the sequel ,",
    "all colorings are supposed to be perfectly balanced , i.e. @xmath0 divides both @xmath48 and @xmath115 and the number of edges having the same color is @xmath116 and @xmath117 for the non - compact graph and the compact graph respectively .",
    "more formally , our edge coloring is defined as follows : an edge coloring @xmath55 of @xmath42 is a mapping associating one color to every edge in @xmath47 , @xmath118 such that @xmath119 for @xmath120 , where @xmath121 is the inverse image of @xmath122 .",
    "similarly , @xmath123 for @xmath97 and @xmath124 .",
    "the set of such mappings for @xmath43 and @xmath49 is denoted @xmath53 and @xmath54 respectively .",
    "+ consider a coloring @xmath55 in @xmath54 .",
    "it can be embedded into @xmath53 by copying the color of a super - edge to its associated @xmath125 edges in @xmath47 .",
    "thus , let @xmath126 be the subset of colorings in @xmath53 obtained by embedding all colorings of @xmath54 into @xmath53 .",
    "we have @xmath127    the size of the edge coloring ensembles @xmath53 and @xmath54 is obviously not the same when @xmath128 , which occurs for both row and column component codes not equal to single parity - check codes .",
    "indeed , when a palette of size @xmath0 is used to color edges , the total number of colorings of @xmath47 is @xmath129^{\\otimes 2}$ ] code and @xmath130 , there are @xmath131 edge colorings for the non - compact graph and @xmath132 edge colorings for the compact graph .",
    "it is clear that the construction of product codes for diversity is much easier when based on @xmath97 because its edge coloring ensemble is smaller .",
    "furthermore , as described below , vertices in @xmath49 act in a way similar to standard ldpc check nodes making the design very simple .",
    "furthermore , we will see in section  [ sec_stopping_sets ] that edge colorings of the compact graph render larger stopping sets than colorings of the non - compact graph .",
    "+ the diversity order @xmath38 attained by a code can never exceed @xmath0 , the latter being the diversity from a channel point of view",
    ". a tighter upper bound of @xmath38 showing the rate - diversity tradeoff is the block - fading singleton bound .",
    "the singleton bound for the maximal achievable diversity order is valid for all types of non - ergodic channels , including block - erasure and block - fading channels .",
    "the block - fading singleton bound states that  @xcite  @xcite @xmath133 where @xmath134 is the coding rate of the product code .",
    "codes satisfying the equality in the above singleton bound are referred to as diversity - wise mds or block - fading mds codes . from ( [ equ_singleton_bound ] )",
    ", we deduce that @xmath135 if @xmath113 ( full - diversity coding ) .",
    "for example , we get @xmath136 with an edge coloring using @xmath137 colors and @xmath138 for @xmath139 colors",
    ". the coding rate can exceed @xmath140 when @xmath141 in applications where full diversity is not mandatory .",
    "an example suited to distributed storage is an edge coloring with a palette of @xmath130 colors , a diversity @xmath142 , and @xmath143 .      in a way similar to root - ldpc codes and product codes built for block - fading channels @xcite@xcite",
    ", we introduce now the notion of root symbols and root - check nodes in product codes to be designed for distributive storage .",
    "a linear @xmath95_q$ ] code with parity - check matrix @xmath144 can fill @xmath94 erasures at positions where the columns of @xmath144 are independent .",
    "these @xmath94 symbols correspond to @xmath94 separate edges in the non - compact graph and to a unique edge ( supersymbol ) in the compact graph .",
    "therefore , for simplicity , we start by defining a root supersymbol in the compact graph where supernodes are equivalent to standard ldpc parity - check nodes .",
    "[ def_root_supersymbol ] let @xmath49 be a compact graph of a product code , let @xmath55 be a given edge coloring , and let @xmath145 be a supersymbol .",
    "@xmath58 is a _ root supersymbol _ with respect to @xmath146 if it admits a neighbor vertex @xmath147 , @xmath148 or @xmath149 , such that all adjacent edges @xmath150 in @xmath147 satisfy @xmath151 .",
    "+ in definition  [ def_root_supersymbol ] , if @xmath148 then @xmath58 is a root supersymbol thanks to the product code column to which it belongs , i.e. @xmath58 can be solved in one iteration by its column component code when the color @xmath146 is erased .",
    "likewise , @xmath58 is protected against erasures by its row component code if @xmath149 in the previous definition .",
    "finally , a root supersymbol may be doubly protected by both its row and its column if both right and left neighbors @xmath152 and @xmath153 satisfy the condition of definition  [ def_root_supersymbol ] .",
    "[ def_root_symbol ] let @xmath43 be a non - compact graph of a product code , let @xmath55 be a given edge coloring , and let @xmath154 be a symbol .",
    "@xmath58 is a",
    "_ root symbol _ with respect to @xmath146 if it admits a neighbor vertex @xmath147 such that : + @xmath155 for at most @xmath156 adjacent edges @xmath150 if @xmath157 , or + @xmath155 for at most @xmath158 adjacent edges @xmath150 if @xmath159 .",
    "+ as mentioned in the paragraph before definition  [ def_root_supersymbol ] , definition  [ def_root_symbol ] implies that the @xmath107 root symbols with the same color should belong to positions of independent columns in the parity - check matrix of the component code @xmath160 .",
    "this constraint automatically disappears for mds component codes since any set of @xmath107 columns of @xmath161 has full rank .",
    "not all symbols of a product code are root symbols . under iterative row - column decoding on channels with block erasures , some symbols may be solved in two decoding iterations or more .",
    "some set of symbols may never be solved and are referred to as stopping sets @xcite@xcite@xcite .",
    "our study is restricted to erasing the symbols of one color out of @xmath0 .",
    "hence , the rest of this paper is restricted to double diversity , @xmath142 .",
    "absence of diversity is equivalent to @xmath162 .",
    "we establish now the root order @xmath62 of a symbol . for root symbols satisfying definitions",
    "[ def_root_supersymbol ] and [ def_root_symbol ] , the root order is @xmath163 . for symbols that can be solved after two decoding iterations , we set @xmath164",
    "the formal definition of the root order @xmath62 can be written in the following recursive manner ( for @xmath165 ) .",
    "+    [ def_root_order ] let @xmath49 be a compact graph of a product code , let @xmath166 be an edge coloring , and let @xmath145 be a super - symbol .",
    "@xmath58 has _ root order _",
    "@xmath167 where : + 1- let @xmath152 be the column neighbor vertex of @xmath58 .",
    "@xmath168 adjacent to @xmath58 in @xmath169 and @xmath155 , we have @xmath170 .",
    "+ 2- let @xmath153 be the row neighbor vertex of @xmath58 .",
    "@xmath168 adjacent to @xmath58 in @xmath171 and @xmath155 , we have @xmath172 .",
    "+ the previous definition implies that @xmath59 if there exists no adjacent edge with the same color .",
    "also , for an edge @xmath58 that does not admit a finite @xmath56 , we set @xmath173 .",
    "when color @xmath146 is erased , symbols belonging to the so - called stopping sets can never be solved ( even after an infinite number of decoding iterations ) and hence their root order is infinite . in the next section",
    "we review stopping sets as known in the literature and we study new stopping sets for product codes based on mds components under iterative algebraic decoding .",
    "definition [ def_root_order ] can be rephrased to make it suitable for the non - compact graph @xmath43 .",
    "we pursue this section to establish an upper bound of the largest finite root order valid for all edge colorings @xmath55 .",
    "[ th_root_order_max ] let @xmath27 be a product code @xmath16 \\otimes [ n_2,k_2]$ ] with a compact graph @xmath97 .",
    "@xmath174 and @xmath175 we have : + case 1 : @xmath176 such that @xmath155 and @xmath177 , then @xmath178 define the minimum number of good edges , @xmath179 then , in case 1 , @xmath180 case 2 : @xmath181 such that @xmath155 and @xmath177 , then @xmath182 where @xmath183 is given by ( [ equ_nc ] ) .",
    "+    case 1 corresponds to a product code with diversity @xmath142 , for a given color @xmath146 , which is capable of solving all symbols when that color is erased .",
    "the graph has no infinite root order symbols .",
    "@xmath62 is recursively built by starting from @xmath163 following two paths in the graph until reaching a common edge @xmath58 that has two neighboring vertices with edges of order @xmath184 .",
    "there are up to @xmath185 edges , including @xmath58 , having color equal to @xmath146 .",
    "the largest @xmath56 is attained in the middle of the longest path of length @xmath185 , hence @xmath186 which is translated into the stated result for case 1 .",
    "an illustrated instance is given for the reader in example  [ ex_path_12_10 ] .",
    "back to the path of length @xmath187 ending with edges of order @xmath11 on both sides , if the population of order @xmath11 edges is @xmath188 for the color @xmath146 , then the path can only use a maximum of @xmath189 edges .",
    "we get the inequality @xmath190 . by plugging @xmath191 instead of @xmath188 ,",
    "this inequality becomes independent from the particular color .",
    "the stated inequality in ( [ equ_rho_etamin ] ) is obtained after grouping @xmath56 and @xmath191 on the left side .",
    "+ case 2 corresponds to bad edge coloring where the product code does not have double diversity , i.e. stopping sets do exist for the color @xmath146 .",
    "the order of @xmath58 may be infinite if @xmath58 is involved in a stopping set with another edge @xmath150 having the same color . otherwise , consider the smallest stopping set of size four symbols ( the smallest cycle in @xmath49 with edges of color @xmath146 ) , then there remains @xmath192 edges of color @xmath146 .",
    "a path of length @xmath192 starting with @xmath163 and ending at @xmath193 may exist .",
    "the largest finite order in this path before reaching the stopping set is @xmath194 .",
    "[ cor_rho_max ] let @xmath27 be a product code @xmath16 \\otimes [ n_2,k_2]$ ] with a compact graph @xmath49 .",
    "let @xmath166 be an edge coloring .",
    "we define @xmath195 @xmath27 attains double diversity under iterative row - column decoding if and only if @xmath196 . in this case",
    ", we say that @xmath55 is a double - diversity coloring and @xmath175 , @xmath58 can be solved after at most @xmath197 decoding iterations where @xmath198 .",
    "+    for colorings in @xmath53 , we extend the same definition as in corollary  [ cor_rho_max ] and we say that @xmath199 is double - diversity if all edges have a finite rootcheck order .",
    "the parameter @xmath197 is important in practical applications to bound from above the amount of conveyed information within a network ( whether it is a local - area or a wide - area network ) .",
    "in fact , in coding for distributed storage , the locality of a product code per decoding iteration is @xmath200 in @xmath43 under algebraic decoding of its row and column components . here",
    ", the locality is the number of symbols to be accessed in order to repair an erased symbol  @xcite .",
    "locality is @xmath201 for mds components under ml decoding of the product code components .",
    "finally , for a product code , the information transfer per symbol is bounded from above by @xmath202 the exact transfer cost to fill all erasures with iterative decoding can be determined by multiplying each order @xmath62 with the corresponding edge population size .",
    "this exact cost may vary in a wide range from one coloring to another .",
    "the deca algorithm presented in section  [ sec_edge_coloring ] dramatically reduces @xmath197 by enlarging the edge population with root order @xmath11 .",
    "the interdependence between @xmath62 and the population of order  @xmath11 was revealed in inequality ( [ equ_rho_etamin ] ) .",
    "this inequality is useful in intermediate cases where @xmath203 is not attained , i.e. outside the case where all edges have order @xmath11 .",
    "the influence of the component decoding method on the performance of a product code via its stopping sets is discussed in section  [ sec_stopping_sets ] .",
    "+    [ ex_path_12_10 ] consider a @xmath204^{\\otimes 2}$ ] product code and a coloring @xmath55 with @xmath130 colors .",
    "the compact graph has @xmath205 edges . instead of drawing @xmath49",
    ", we draw the @xmath206 compact matrix representation of the product code in fig .",
    "[ matrix_max_order6_6 ] .",
    "supersymbols corresponding to a color @xmath207 are shaded .",
    "[ matrix_max_order6_6 ] also shows a path in @xmath49 such that a maximal order @xmath208 is attained for @xmath207 .",
    "if @xmath55 has double diversity then @xmath197 will not exceed @xmath209 for all colors @xmath210 .",
    "note that the parameters of this product code are such that @xmath211 is also equal to 5 for a @xmath55 with a diversity defect .",
    "^{\\otimes 2}$ ] showing a maximal root order of 5.[matrix_max_order6_6 ] ]    consider a @xmath212 \\otimes [ 16,14]$ ] product code and a coloring @xmath55 with @xmath130 colors .",
    "the compact graph has @xmath213 edges . the compact matrix and a path attaining @xmath214 are illustrated in fig .",
    "[ matrix_max_order7_8_not_div2 ] .",
    "@xmath55 is chosen such that the first color has a cycle involving four supersymbols .",
    "starting from the root supersymbol ( @xmath163 ) it is possible to create a path in the graph such that @xmath214 is reached .",
    "note that a double - diversity @xmath55 can not exceed a root order @xmath215 .",
    "\\otimes [ 16,14]$ ] showing a maximal finite root order of 10.[matrix_max_order7_8_not_div2 ] ]    the ideal situation is to construct a product code and its edge coloring in order to obtain @xmath59 for all edges .",
    "we investigate now the conditions on the product code rate and its components rates in this ideal situation .",
    "the analysis based on @xmath216 reveals the existence of a trade - off between minimizing the number of decoding iterations and the valid range of both coding rates for the product code components .",
    "+ firstly , let us look at the upper bound @xmath216 from theorem  [ th_root_order_max ] .",
    "without loss of generality , assume that @xmath107 divides @xmath106 .",
    "then , we have @xmath217 the total coding rate becomes @xmath218 using @xmath219 , we get @xmath220 finally , from ( [ equ_nc_and_r ] ) and theorem  [ th_root_order_max ] , the upper bound of the root order for double - diversity edge coloring of the compact graph can be expressed as @xmath221 fix the product code rate @xmath222 , force the upper bound to @xmath223 , and take @xmath130 colors .",
    "then the denominator in ( [ equ_rho_u_r1_r2 ] ) should be less than @xmath11 or equivalently @xmath224 .",
    "this second - degree polynomial in @xmath225 is non - negative if and only if @xmath226 and @xmath227 as a result , with a palette of four colors , ( [ equ_r_0.41 ] ) tells us that @xmath59 for all edges is feasible for a product code with a rate less than @xmath228 .",
    "it is obvious that ( [ equ_r_0.41 ] ) is a very constraining condition because @xmath216 is an upper bound of @xmath57 for all @xmath166 .",
    "it is worth noting that @xmath225 and @xmath229 vary in a smaller range when @xmath222 approaches @xmath230 , which corresponds to a product code with balanced components .",
    "+ in section  [ sec_edge_coloring_sub1 ] , we will show unbalanced product codes where a sufficient condition on the component rates imposes order @xmath11 to all edges .",
    "the sufficient condition , not based on @xmath216 , is given by lemma  [ lem_rho=1 ] .",
    "but before introducing an efficient edge coloring algorithm in section  [ sec_edge_coloring ] , we analyze stopping sets in product codes with mds components in the next section , we describe the relationship between stopping sets and the product code graph representation , and finally we enumerate obvious and non - obvious stopping sets . stopping sets enumeration is useful to determine the performance of a product code with and without edge coloring .",
    "the purpose of this section is to prepare the way for determining the performance of iterative decoding of non - binary product codes .",
    "the analysis of stopping sets in a product code will yield a tight upper bound of its iterative decoding performance over a channel with independent erasures .",
    "the same analysis will be useful to accurately estimate the performance under edge coloring in presence of block and multiple erasure channels .",
    "an erasure pattern is said to be ml - correctable if the ml decoder is capable of solving all its erased symbols .    for an erasure pattern which is not correctable under ml or iterative decoding",
    ", the decoding process may fill none or some of the erasures and then stay stuck on the remaining ones . before describing the stopping sets of a product code ,",
    "let us recall some fundamental results regarding the decoding of its row and column component codes .",
    "the ml erasure - filling capability of a linear code satisfies the following property .",
    "[ prop_not_mds ] let @xmath231_q$ ] be a linear code with @xmath232 .",
    "assume that @xmath233 is not mds and the @xmath96 symbols of a codeword are transmitted on an erasure channel .",
    "then , there exists an erasure pattern of weight greater than @xmath234 that is ml - correctable .",
    "let @xmath144 be an @xmath235 parity - check matrix of @xmath233 with rank @xmath236 .",
    "for any integer @xmath69 in the range @xmath237 $ ] , there exists a set of @xmath69 linearly independent columns in @xmath144 .",
    "choose an erasure pattern of weight @xmath69 with erasures located at the positions of the @xmath69 independent columns .",
    "then , the ml decoder is capable of solving all these erasures by simple gaussian reduction of @xmath144 .    for mds codes , based on a proof similar to the proof of proposition  [ prop_not_mds ] , we state a well - known result in the following corollary .    [ coro_not_mds ] let @xmath231_q$ ] be an mds code .",
    "all erasure patterns of weight greater than @xmath234 are not ml - correctable .",
    "+    we conclude from the previous corollary that an algebraic decoder for an mds code attains the word - error performance of its ml decoder .",
    "what about symbol - error performance ?",
    "indeed , for general binary and non - binary codes , the ml decoder may outperform an algebraic decoder since it is capable of filling some of the erasures when dealing with a pattern which is not ml - correctable . in the mds case ,",
    "the answer comes from the absence of spectral holes for any mds code beyond its minimum distance .",
    "this basic result is proven via standard tools from algebraic coding theory @xcite@xcite :    [ prop_mds_w ] let @xmath231_q$ ] be a non - binary mds code ( @xmath238 ) . for any @xmath69 satisfying",
    "@xmath239 and any support @xmath240 , where @xmath241 , there exists a codeword in @xmath233 of weight @xmath69 having @xmath242 as its own support .    by assumption",
    "we have @xmath243 .",
    "let @xmath144 be a parity - check matrix of @xmath233 with rank @xmath244 .",
    "recall that the mds property makes full - rank any set of @xmath94 columns of @xmath144 @xcite .",
    "@xmath69 is written as @xmath245 , where @xmath246 .",
    "the @xmath69 positions of @xmath242 are anywhere inside the range @xmath247 $ ] , but for simplicity let us denote @xmath248 the @xmath249 columns of @xmath144 in the first @xmath249 positions .",
    "the last @xmath250 columns are denoted @xmath251 . for any @xmath252 , we have @xmath253 where @xmath254 otherwise it contradicts @xmath35 .",
    "now , select @xmath255 from @xmath256 such that : @xmath257 is arbitrary , @xmath258 is chosen outside the set @xmath259 , then @xmath260 is chosen outside the set @xmath261 , and so on , up to @xmath262 which is chosen outside the set @xmath263 . here , the notation @xmath264 in @xmath256 is equivalent to the standard algebraic notation @xmath265 .",
    "the equality @xmath266 produces a codeword of hamming weight @xmath69 .",
    "hence , there exists a codeword of weight @xmath69 with non - zero symbols in all positions given by @xmath242 .",
    "now , at the symbol level for an mds code and an erasure pattern which is not ml - correctable ( @xmath267 ) , we conclude from proposition  [ prop_mds_w ] that the ml decoder can not solve any of the @xmath69 erasures because they are covered by a codeword .",
    "consequently , an algebraic decoder for an mds code also attains the symbol - error performance of the ml decoder .",
    "this behavior will have a direct consequence on the iterative decoding of a product code with mds components : stopping sets are identical when dealing with algebraic and ml - per - component decoders .",
    "+ a general description of a stopping set was given by definition  [ def_stopping_set ] .",
    "the exact definition of a stopping set depends on the iterative decoding type . for product codes ,",
    "four decoding methods are known :    * type i : ml decoder .",
    "this is a non - iterative decoder .",
    "it is based on a gaussian reduction of the parity - check matrix of the product code . *",
    "type ii : iterative algebraic decoder . at odd decoding iterations , component codes",
    "@xmath13 on each column are decoded via an algebraic decoder ( bounded - distance ) that fills up to @xmath234 erasures .",
    "similarly , at even decoding iterations , component codes @xmath21 on each row are decoded via an algebraic decoder . *",
    "type iii : iterative ml - per - component decoder .",
    "this decoder was considered by rosnes in @xcite for binary product codes . at odd decoding iterations , column codes @xmath13",
    "are decoded via an optimal decoder ( ml for @xmath13 ) . at even decoding iterations",
    ", row codes @xmath21 are decoded via a similar optimal decoder ( ml for @xmath21 ) .",
    "* type iv : iterative belief - propagation decoder based on the tanner graph of @xmath268 , as studied by schwartz et al . for general linear block codes",
    "@xcite and by di et al . for low - density parity - check codes  @xcite .",
    "the three iterative decoders listed above give rise to three different kinds of stopping sets .",
    "as previously indicated , from corollary  [ coro_not_mds ] and propositions  [ prop_mds_w ] , we concluded that type - ii and type - iii stopping sets are identical if component codes are mds .",
    "let @xmath233 be a @xmath17-ary linear code of length @xmath96 , i.e. @xmath233 is a sub - space of dimension @xmath269 of @xmath270 .",
    "the support of @xmath233 , denoted by @xmath271 , is the set of @xmath250 distinct positions @xmath272 , @xmath273 , such that , for all @xmath274 , there exists a codeword @xmath275 with @xmath276 .",
    "this notion of support @xmath242 is applied to rows and columns in a product code .",
    "+ now , we define a rectangular support which is useful to represent a stopping set in a bi - dimensional product code .",
    "let @xmath277 be a set of symbol positions in the product code .",
    "the set of row positions associated to @xmath65 is @xmath278 where @xmath279 and for all @xmath280 there exists @xmath281 .",
    "the set of column positions associated to @xmath65 is @xmath282 where @xmath283 and for all @xmath284 there exists @xmath285 .",
    "the rectangular support of @xmath65 is @xmath286 i.e. the smallest @xmath73 rectangle including all columns and all rows of @xmath65 .",
    "[ def_exact_stop_sets ] consider a product code @xmath287 .",
    "let @xmath277 with @xmath279 and @xmath283 .",
    "consider the @xmath288 rows of @xmath65 given by @xmath289 and the @xmath290 columns of @xmath65 given by @xmath291 .",
    "the set @xmath65 is a stopping set of type  iii for @xmath27 if there exist linear subcodes @xmath292 and @xmath293 such that @xmath294 and @xmath295 for all @xmath280 and for all @xmath284 .",
    "the cardinality @xmath296 is called the size of the stopping set and will also be referred to in the sequel as the weight of @xmath65 .",
    "recall that type ii and type iii stopping sets are identical when both @xmath13 and @xmath21 are mds . stopping sets of type iii were studied for binary product codes by rosnes @xcite .",
    "his analysis is based on the generalized hamming distance  @xcite@xcite because sub - codes involved in definition  [ def_exact_stop_sets ] may have a dimension greater than 1 . in the non - binary mds case , according to proposition  [ prop_mds_w ] , all these sub - codes have dimension 1 , i.e. they are generated by a single non - zero codeword .",
    "consequently , the generalized hamming distance is not relevant when using mds components . in such a case ,",
    "the analysis of type ii stopping sets is mainly combinatorial and does not require algebraic tools .",
    "+ stopping sets for decoder types ii - iv can be characterized by four main properties summarized as follows .    * obvious or not obvious sets , also known as rank-1 sets .",
    "a stopping set @xmath65 is obvious if @xmath297 .",
    "* primitive or non - primitive stopping sets .",
    "a stopping set is primitive if it can not be partitioned into two or more smaller stopping sets .",
    "notice that all stopping sets , whether they are primitive or not , are involved in the code performance .",
    "* codeword or non - codeword .",
    "a stopping set @xmath65 is said to be a codeword stopping set if there exists a codeword @xmath298 in @xmath27 such that @xmath299 . * ml - correctable or non - ml - correctable .",
    "a stopping set @xmath65 can not be corrected via ml decoding if it includes the support of a non - zero codeword .",
    "+    in the remaining material of this paper , we restrict our study to type ii stopping sets .",
    "[ ex_w=9 ] consider a @xmath300_q \\otimes [ n_2,n_2 - 2,3]_q$ ] product code .",
    "a stopping set @xmath65 of size @xmath301 is shown as a weight-@xmath302 matrix of size @xmath303 , where @xmath11 corresponds to an erased position : @xmath304 we took @xmath305 for illustration .",
    "the rectangular support is shown in a compact representation as a matrix of size @xmath306 , @xmath307 the stopping set in ( [ equ_stop_w=9_large ] ) is obvious , it has the same size as its rectangular support .",
    "it corresponds to a matrix of rank 1 .",
    "each row and each column of @xmath65 has weight @xmath308 .",
    "iterative row - column decoding based on component algebraic decoders fails in decoding rows and columns since the number of erasures exceeds the erasure - filling capacity of the mds components .",
    "this stopping set is not ml - correctable because it is a product - code codeword . in the sequel ,",
    "all stopping sets ( type ii ) shall be represented in this compact manner by a smaller rectangle of size @xmath73 .",
    "[ ex_w=12 ] for the same @xmath300_q \\otimes [ n_2,n_2 - 2,3]_q$ ] product code used in the previous example , the following stopping sets of size @xmath309 are not obvious .",
    "@xmath310    @xmath311    in compact form , their rectangular support is @xmath312 these stopping sets have size @xmath309 and a @xmath313 rectangular support . for @xmath314 ,",
    "it is also possible to build an obvious stopping set in a @xmath315 rectangle or a @xmath316 rectangle full of @xmath11 .",
    "@xmath317 is ml - correctable since it does not cover a product code codeword .",
    "@xmath318 covers a codeword hence it is not ml - correctable .",
    "a stopping set as defined by definition  ( [ def_exact_stop_sets ] ) corresponds to erased edges in the non - compact graph @xmath43 introduced in section  [ sec_graph_representations_sub1 ] .",
    "indeed , consider the size-@xmath302 stopping set given by ( [ equ_stop_w=9_large ] ) or ( [ equ_stop_w=9 ] ) .",
    "the nine symbol positions involve nine edges in @xmath43 , three row checknodes , and three column checknodes .",
    "each of these six checknodes has three erased symbols making the @xmath319 $ ] decoder fail .",
    "this stopping set is equivalent to a subgraph of @xmath302 edges in @xmath43 as shown in figure  [ fig_g_12_12_w=9 ] .     representing the size-@xmath302 obvious stopping set . the graph @xmath43 has @xmath320 edges",
    ", @xmath321 left ( row ) checknodes , and @xmath322 left ( column ) checknodes .",
    "only the stopping set edges are drawn .",
    "[ fig_g_12_12_w=9 ] ]    the subgraph in figure  [ fig_g_12_12_w=9 ] has three length-@xmath323 cycles and two length-@xmath324 cycles .",
    "the small cycles of length-@xmath323 are associated to an erasure pattern with a @xmath325 rectangular support which is not a stopping set ( @xmath326 ) .",
    "similarly , length-@xmath324 cycles are not stopping sets and are associated to erasure patterns with a @xmath327 rectangular support .",
    "we will see in the next section that the minimum stopping set size is @xmath328 , i.e. it is equal to the minimum hamming distance of the product code .",
    "a subgraph of @xmath49 can be embedded into @xmath43 by splitting each super - edge into @xmath329 edges .",
    "the converse is not always true .",
    "the subgraph with nine edges in figure  [ fig_g_12_12_w=9 ] can not be compressed into a subgraph of @xmath49 .",
    "for the @xmath319^{\\otimes 2}$ ] product code , a supersymbol in @xmath49 contains four edges .",
    "hence , a necessary condition for a stopping set in @xmath43 to become a valid stopping set in @xmath49 is to erase edges in groups of @xmath323 . knowing that type ii and type iii stopping sets are identical when row and column codes @xmath13 and @xmath21 are mds , definition  ( [ def_exact_stop_sets ] ) leads to the following corollaries .",
    "[ cor_stop_in_g ] let @xmath287 be a product code with mds components @xmath13 and @xmath21 having minimum hamming distance @xmath2 and @xmath3 respectively .",
    "assume that symbols ( edges ) of @xmath42 are sent over an erasure channel .",
    "a stopping set for the iterative decoder is a subgraph of @xmath43 such that all column vertices in @xmath44 have a degree greater than or equal to @xmath2 and all row vertices in @xmath46 have a degree greater than or equal to @xmath3 .",
    "[ cor_stop_in_gc ] let @xmath287 be a product code with mds components @xmath13 and @xmath21 having minimum hamming distance @xmath2 and @xmath3 respectively .",
    "assume that supersymbols ( super - edges ) of @xmath97 are sent over an erasure channel .",
    "a stopping set for the iterative decoder is a subgraph of @xmath49 such that all column vertices in @xmath330 have a degree greater than or equal to @xmath331 and all row vertices in @xmath46 have a degree greater than or equal to @xmath331 .",
    "the above corollaries suppose a symbol ( or a supersymbol ) channel with independent erasures .",
    "when @xmath43 is endowed with an edge coloring @xmath55 , we get the same constraint on the validity of a subgraph embedding from @xmath49 into @xmath43 . we know from section  [ sec_graph_representations_sub1 ] that @xmath126 is a subset of @xmath53 , i.e. some edge colorings of @xmath43 are not edge colorings of @xmath49 .",
    "consequently , on a block - erasure channel , if all super - edges of the same color are erased , stopping sets in @xmath49 are a subset of those in @xmath43 .",
    "the non - compact graph @xmath43 has a larger ensemble of stopping sets , with or without edge coloring . as an example , for the @xmath319^{\\otimes 2}$ ] product code , the smallest stopping set in @xmath49 has size @xmath332 when four super - edges are erased which yields a stopping set of size @xmath333 in @xmath43 .",
    "+    consider the @xmath334_q^{\\otimes 2}$ ] product code where @xmath335 and @xmath336 .",
    "assume that our palette has @xmath337 colors .",
    "the non - compact graph admits an ensemble of @xmath338 edge colorings !",
    "the compact graph has @xmath339 only . in @xmath49 ,",
    "each color is used @xmath340 times . for a channel erasing all symbols of the same color",
    ", the compact graph has no stopping sets ( the @xmath325 rectangular support can not be filled by a single color ) .",
    "a compact matrix representation of @xmath49 attaining double diversity with all symbols of order 1 is given by the trivial matrix @xmath341,\\ ] ] where the color @xmath207 is replaced by the letter r , @xmath342 is replaced by the letter g , and @xmath343 is replaced by the letter b. the non - compact graph has @xmath344 edges , each color is used @xmath345 times .",
    "double diversity is lost in @xmath43 if one of the @xmath313 , @xmath346 , or @xmath347 obvious stopping sets is covered by a unique color .",
    "clearly , @xmath49 makes the design much easier .",
    "this double - diversity product code has a relatively low coding rate .",
    "more challenging product code designs are given in section  [ sec_edge_coloring ] with higher rates up to the one imposed by the block - fading / block - erasure singleton bound .",
    "for a fixed non - zero integer @xmath69 , the number of stopping sets of size @xmath69 , denoted as @xmath70 , falls in two different cases .",
    "firstly , @xmath348 if @xmath69 is small with respect to the minimum hamming distance of the product code",
    ". also , @xmath349 for special erasure patterns obtained by adding a small neighborhood to a smaller obvious set . secondly , for both obvious and non - obvious stopping sets , @xmath70 is non - zero and the weight @xmath69 may correspond to many rectangular supports of different height and width .",
    "the code performance over erasure channels is dominated by not - so - large stopping sets .",
    "non - empty stopping sets of the second case satisfy the general property stated in the following lemma .",
    "[ lem_max_support ] given a weight @xmath350 and assuming @xmath351 , then @xmath352 such that @xmath353 with @xmath354 , we have @xmath355 , where @xmath356    let @xmath69 be equal to @xmath1 . in order to establish an upper bound of the height @xmath288",
    ", we build the highest possible rectangular support for this weight @xmath69 .",
    "assume the rectangle is @xmath357 , each of its rows should have at least @xmath3 erasures to make the type - ii decoder fail .",
    "then @xmath358 which becomes the upper bound given by ( [ equ_ell1_0 ] ) .",
    "now , if @xmath69 is less than @xmath1 , the rectangular support of the stopping set can only shrink in size .",
    "the upper bound of the width in ( [ equ_ell2_0 ] ) is proven in a similar way .",
    "the above lemma states the existence of a maximal rectangular support for a given stopping set size .",
    "the example given below cites stopping sets with a unique - size rectangular support and stopping sets with multiple - size rectangular supports .    consider a @xmath359 product code where @xmath13 and @xmath21 are both mds with minimum hamming distance @xmath308 . the stopping set given by ( [ equ_stop_w=9 ] ) can not have a large rectangular support .",
    "in general , all stopping sets of size @xmath360 have a rectangular support of fixed dimensions @xmath361 . now , let @xmath314 .",
    "as indicated in example  [ ex_w=12 ] , stopping sets of size @xmath309 may be included in rectangular supports of dimensions @xmath315 , @xmath316 , and @xmath313 . for @xmath314 , it is impossible to build a @xmath362 rectangular support ( reductio ad absurdum ) making @xmath363 and @xmath364 . a similar proof by contradiction yields @xmath365 and @xmath366 for @xmath367 .",
    "the next lemma gives an obvious upper bound of the size of @xmath71 by stating a simple limit on the number of zeros ( non - erased positions ) inside @xmath71 .",
    "[ lem_max_zeros ] let @xmath71 be the @xmath73 rectangular support of a stopping set @xmath72 of size @xmath69 .",
    "let @xmath368 be the number of zero positions , or equivalently @xmath369 is the size of the set @xmath370 .",
    "then @xmath371    before stating and proving theorem  [ th_stopping_sets_d ] , we announce two results in lemma  [ lem_graph_bipartite_deg2 ] and lemma  [ lem_graph_bipartite_deg2_1 ] on bipartite graphs enumeration .",
    "we saw in the previous section that stopping sets are sub - graphs of @xmath43 and @xmath49 , see corollary  [ cor_stop_in_g ] and corollary  [ cor_stop_in_gc ] .",
    "in other words , the enumeration of stopping sets represented as matrices of a given distribution of row weight and column weight is equivalent to enumerating bipartite graphs where left vertices stand for rows and right vertices stand for columns .",
    "an edge should be drawn between a left vertex and a right vertex according to some rule , e.g. the rule used in the previous section draws an edge in the bipartite graph for each @xmath11 in the stopping set matrix . stopping sets enumeration in the next theorem",
    "is based on @xmath369 , the number of zeros or the number of non - erased positions .",
    "hence , we shall use the opposite rule .",
    "a stopping set of weight @xmath69 and having a @xmath73 rectangular support shall be represented by a bipartite graph with @xmath288 left vertices , @xmath290 right vertices , and a total of @xmath368 edges .",
    "notice that these bipartite graphs have no length-2 cycles because parallel edges are forbidden .",
    "for finite @xmath288 and @xmath290 , given the left degree distribution and the right degree distribution , there exists no exact formula for counting bipartite graphs .",
    "the best recent results are asymptotic in the graph size for sparse and dense matrices @xcite  @xcite and can not be applied in our enumeration .",
    "the following two lemmas solve two cases encountered in theorem  [ th_stopping_sets_d ] for @xmath372 and @xmath373 both inside a @xmath374 rectangular support .",
    "the definition of special partitions is required before introducing the two lemmas .",
    "[ def_special_partition ] let @xmath375 be an integer .",
    "a _ special partition _ of length @xmath274 of @xmath250 is a partition defined by a tuple @xmath376 such that its integer components satisfy :    * @xmath377 .",
    "* @xmath378 . *",
    "@xmath379 , @xmath380 . * @xmath381",
    ".    a special partition shall be denoted by @xmath382 .",
    "the _ group number _ of a special partition , denoted by @xmath383 , is the number of different integers @xmath384 , for @xmath385 . in other words ,",
    "following set theory , the set including the @xmath274 integers @xmath386 s is @xmath387 .",
    "the group number divides the partition of @xmath250 into @xmath388 groups where the @xmath389 group includes @xmath390 repeated @xmath391 times , and @xmath392 .",
    "[ lem_graph_bipartite_deg2 ] consider bipartite graphs defined as follows : @xmath250  left vertices , @xmath250 right vertices , all vertices have degree 2 , and no length-2 cycles are allowed . for @xmath375 , the total number @xmath393 of such bipartite graphs",
    "is given by the expression @xmath394 where @xmath395 is a summation over all special partitions of the integer @xmath250 , @xmath396 is the group number of the special partition @xmath397 , and @xmath391 is the size of the @xmath389 group .",
    "firstly , let us find the number of hamiltonian bipartite graphs having @xmath398 left vertices , @xmath398 right vertices , all vertices of degree @xmath331 , and no length-@xmath331 cycles allowed .",
    "there are @xmath399 ways to choose the order of all left and right vertices .",
    "if the hamiltonian cycle is represented by a sequence of @xmath400 integers corresponding to the @xmath400 vertices of the bipartite graph , then there are @xmath400 ways to shift the hamiltonian cycle without changing the graph .",
    "hence , the number of hamiltonian bipartite graphs of degree @xmath331 is @xmath401 secondly , given the half - size @xmath250 of the bipartite graph stated in this lemma , all special partitions of @xmath250 are considered . for a fixed special partition @xmath402",
    "the bipartite graph is decomposed into @xmath274 hamiltonian graphs each of length @xmath398 , @xmath403 .",
    "the number of choices for selecting the vertices of the @xmath274 hamiltonian graphs is @xmath404 the above number should be multiplied by the number of hamiltonian graphs for each selection of vertices to get @xmath405 but for a given special partition , each group of size @xmath391 is creating @xmath406 identical bipartite graphs . hence , the final result for a fixed partition becomes @xmath407 then , @xmath393 is obtained by summing ( [ equ_xell_oneterm ] ) over all special partitions of the integer @xmath250 to yield @xmath408 the simplification of the factors @xmath399 yields the expression stated by this lemma .    [ lem_graph_bipartite_deg2_1 ]",
    "consider bipartite graphs defined as follows : @xmath250  left vertices , @xmath250 right vertices , all left vertices have degree @xmath331 except one vertex of degree @xmath11 , all right vertices have degree @xmath331 except one vertex of degree @xmath11 , and finally no length-@xmath331 cycles are allowed . for @xmath409 ,",
    "the total number @xmath410 of such bipartite graphs is @xmath411 where @xmath393 is determined via lemma  [ lem_graph_bipartite_deg2 ] and @xmath412 .",
    "let the first @xmath413 left vertices and the first @xmath413 right vertices be of degree @xmath331 .",
    "there exists two ways to complete this bipartite graph such that the two remaining vertices have degree  @xmath11 .    *",
    "each of the @xmath414 sub - graphs has @xmath415 edges .",
    "break one edge into two edges and connect them to the remaining left and right vertices , the number of such graphs is @xmath416 .",
    "another set of @xmath414 bipartite graphs is built by directly connecting the last two vertices together without breaking any edge in the upper sub - graph .",
    "now , we find @xmath417 bipartite graphs . *",
    "fix a vertex among the @xmath413 upper left vertices and fix one among the @xmath413 upper right vertices ( @xmath418 choices ) . consider a length-@xmath331 cycle including these two vertices .",
    "one edge of this cycle can be broken into two edges and then attached to the degree-@xmath11 vertices at the bottom .",
    "the remaining @xmath419 left and right vertices may involve @xmath420 sub - graphs . consequently , the number of graphs in this second case is @xmath421 .",
    "the total number of bipartite graphs enumerated in the above cases is @xmath422 finally , the degree-@xmath11 left vertex has @xmath250 choices and so has the degree-@xmath11 right vertex .",
    "the number of graphs in ( [ equ_yell_part ] ) should be multiplied by @xmath423 .",
    "we make no claims about a possible generalization of lemma  [ lem_graph_bipartite_deg2 ] and lemma  [ lem_graph_bipartite_deg2_1 ] to finite bipartite graphs with higher vertex degrees .",
    "as mentioned before , for general degree distributions , results on enumeration of asymptotic bipartite graphs were published by brendan mckay and his co - authors @xcite  @xcite .",
    "table  [ tab_seq_spec_parts ] shows the number of special partitions for @xmath424 .",
    "the number of standard partitions ( the partition function ) can be found by a recursion resulting from the pentagonal number theorem @xcite . to our knowledge",
    ", there exists no such recursion for special partitions .",
    "the number of bipartite graphs under the assumptions of lemma  [ lem_graph_bipartite_deg2 ] and lemma  [ lem_graph_bipartite_deg2_1 ] is found in table  [ tab_xell_yell ] for a graph half - size up to @xmath425 . finally , we are ready to state and prove the first theorem on stopping sets enumeration .",
    ".[tab_seq_spec_parts]sequence of the number of special partitions of the integer @xmath250 , for @xmath426 .",
    "special partitions are described in definition  [ def_special_partition ] .",
    "the sequence for standard partitions can be found in  @xcite .",
    "[ cols= \" < \" , ]     * the case @xmath427",
    ". + write @xmath428 , where @xmath429 is in the range @xmath430 $ ] .",
    "for all sizes of @xmath71 in the table in figure  [ fig_rectangle_d1_d2 ] , we find @xmath368 and we notice that it contradicts lemma  [ lem_max_zeros ] .",
    "there are no stopping sets for @xmath69 in the range @xmath431d_1(d_2 + 1 ) , d_1(d_2 + 2)[$ ] . * the case @xmath432 . + * * obvious stopping sets do exist and their number is @xmath433 * * for rectangles larger than @xmath434 we found no other stopping sets , by contradiction on @xmath369 . * the case @xmath435 .",
    "+ write @xmath436 , where @xmath429 is in the range @xmath437 $ ] . for all rectangular supports , from @xmath369",
    "we deduce that @xmath349 .",
    "* the case @xmath438 .",
    "+ obvious stopping sets are given by @xmath439 * * take @xmath71 with size @xmath1 . then @xmath440 .",
    "the number of non - obvious stopping sets for this sub - case is @xmath441 * * take @xmath71 with size @xmath442 .",
    "then @xmath443 .",
    "all rows have two zeros . also , @xmath444 columns have no zeros , while the remaining columns include a unique zero .",
    "the number of non - obvious stopping sets in this sub - case is @xmath445 * * take @xmath71 with size @xmath446 . from lemma  [ lem_max_zeros ]",
    "we find that no stopping sets exist , except for @xmath447 and @xmath448 . in this case ,",
    "each row in the rectangle have three zeros .",
    "the number of stopping sets is @xmath450 for @xmath447 and @xmath448 . * * take @xmath71 with size @xmath451 . then @xmath452 .",
    "the reader can easily check that the bound in lemma  [ lem_max_zeros ] is not satisfied .",
    "we deduce that @xmath349 for this rectangle size and this weight @xmath69 .",
    "all remaining rectangle sizes have no stopping sets . * the case @xmath453 .",
    "+ @xmath349 for @xmath447 .",
    "we pursue this case for @xmath454 .",
    "+ write @xmath455 where @xmath429 belongs to the non - empty interval @xmath456 $ ] . *",
    "* the next rectangular support with a non - zero number of stopping sets is @xmath1 .",
    "the number of zeros is @xmath457 varying in the range @xmath458 $ ] .",
    "non - obvious stopping sets are enumerated by selecting the location and permuting the @xmath369 zeros inside @xmath71 .",
    "their number is @xmath459 * * take @xmath71 with size @xmath442 .",
    "we have @xmath460 inside the interval @xmath461 $ ] . as made before , we find @xmath462 and @xmath463 .",
    "the columns in @xmath71 have at most one zero and rows have at most two zeros .",
    "the number of these non - obvious stopping sets is + @xmath464 * * consider @xmath71 with size @xmath451 . here",
    "@xmath465 contradicts lemma  [ lem_max_zeros ] because @xmath466 .",
    "we have @xmath349 .",
    "all remaining rectangles ( smaller or larger ) have no stopping sets . * the case @xmath467 . * * the number of obvious stopping sets in a @xmath468 rectangular support is @xmath469 * * consider @xmath71 with size @xmath1 . here",
    "@xmath470 is restricted to the interval @xmath4311,d_1[$ ] given the constraints @xmath471 for @xmath454 . for @xmath447",
    ", @xmath448 is the only valid value , with @xmath472 .",
    "the number of non - obvious stopping sets is ( for @xmath473 ) @xmath474 * * consider @xmath71 with size @xmath442 .",
    "the number of zeros is @xmath475d_1 + 2 , 2d_1 + 1[$ ] .",
    "the number of non - obvious stopping sets is given by + @xmath476 where @xmath477 .",
    "for @xmath478 , the above expression is valid for @xmath448 only . * * consider @xmath71 with size @xmath446 . here",
    "all columns in the rectangle have one zero .",
    "rows can have up to three zeros .",
    "the number of non - obvious stopping sets is @xmath480 where @xmath481 .",
    "the above expression is also valid for @xmath482 . * * the rectangular support @xmath71 of size @xmath451 gives no stopping sets .",
    "the remaining rectangular supports from figure  [ fig_rectangle_d1_d2 ] and table  [ tab_d1=2 ] yield no stopping sets for @xmath467 .",
    "+ + recall that a maximal rectangle width of @xmath483 should be considered for @xmath454 and it goes up to @xmath484 for @xmath447 as shown in table  [ tab_d1=2 ] .",
    "new obvious stopping sets are found , they appear for @xmath447 only with a rectangular width equal to @xmath484 .",
    "their rectangular support corresponds to the sizes in boldface in table  [ tab_d1=2 ] for @xmath485 : @xmath486 obvious stopping sets of size @xmath487 , @xmath488 obvious stopping sets of size @xmath489 , and @xmath490 obvious stopping sets of size @xmath491 .",
    "given that this theorem enumerates stopping sets for @xmath492 , one should only count obvious @xmath487 sets . * the case @xmath493 .",
    "+ write @xmath494 where @xmath495 $ ]",
    ". the results for the three rectangles listed below are valid for @xmath473 . * * consider @xmath71 of size @xmath1 .",
    "we have @xmath496 varying in the range @xmath497 $ ] .",
    "the number of non - obvious stopping sets is @xmath498 * * now consider @xmath71 of size @xmath442 .",
    "we have @xmath499 $ ] .",
    "as done before , the expression of the number of non - obvious stopping sets involves @xmath500 and @xmath501 as follows .",
    "+ @xmath502 where @xmath503 . *",
    "* we consider the next @xmath446 rectangular support . now",
    "@xmath504 $ ] .",
    "the number of non - obvious stopping sets is @xmath505 where @xmath481 . * * the remaining larger rectangular supports give no stopping sets , except for @xmath506 for @xmath447 and @xmath448 where @xmath507 .",
    "these @xmath508 rectangles of size @xmath509 , where @xmath510 and @xmath511 , have one zero in each column but a row may have up to four zeros . * the last case @xmath512 . * * obvious stopping sets are given by @xmath513 * * the next @xmath71 from the table is @xmath514 .",
    "we have @xmath440 .",
    "the number of stopping sets is @xmath515 * * now consider the @xmath516 rectangle .",
    "we have @xmath443 .",
    "the number of stopping sets is + @xmath517 + where @xmath481 , the above expression being valid for @xmath518 . + * * no stopping sets are found for the remaining three rectangular supports for @xmath454 . on the other hand , for @xmath447 , stopping sets are found only with a rectangle @xmath506 . in this case",
    ", we have @xmath519 .",
    "the number of non - obvious stopping sets is @xmath520 for @xmath521 and @xmath522 for @xmath482 .",
    "the work of joseph j. boutros was supported by the qatar national research fund ( qnrf ) , a member of qatar foundation , under nprp project 5 - 401 - 2 - 161 on layered coding .",
    "the authors would like to thank dr .",
    "mireille sarkiss , from cea - list paris , for her precious support .",
    "d.  augot , m.  el - khamy , r.j .",
    "mceliece , f.  parvaresh , m.  stepanov , and a.  vardy , `` algebraic list decoding of reed - solomon product codes , '' _ algebraic and combinatorial coding workshop _ , pp .",
    "210 - 213 , sept .",
    "e.  arikan , `` channel polarization : a method for constructing capacity achieving codes for symmetric binary - input memoryless channels , '' _ ieee trans .",
    "inf . theory _ ,",
    "55 , no .  7 , pp .  3051 - 3073 , july 2009 .              j.j .",
    "boutros , g.  zmor , a.  guilln i  fbregas , and e.  biglieri , `` full - diversity product codes for block erasure and block fading channels , '' _ information theory workshop _ , pp .",
    "313 - 317 , porto , may  2008 .",
    "boutros , g. zmor , a.  guilln i fbregas , and e.  biglieri , `` generalized low - density codes with bch constituents for full - diversity near - outage performance , '' _ ieee intern . symp . on inform .",
    "theory ( isit ) _ , pp .",
    "787 - 791 , toronto , july 2008 .",
    "boutros , a.  guilln i  fbregas , e.  biglieri , and g.  zmor , `` low - density parity - check codes for nonergodic block - fading channels , '' _ ieee trans .",
    "inf . theory _",
    "56 , no .  9 , pp .  4286 - 4300 , sept .  2010 .",
    "c.  greenhill and b.d .",
    "mckay , `` asymptotic enumeration of sparse nonnegative integer matrices with specified row and column sums , '' advances in applied mathematics , vol .",
    "41 , pp .",
    "459 - 481 , 2008 , revised april 2012 .    c.  di , d.  proietti , i.e.  telatar , t.j .",
    "richardson , and r.l .",
    "urbanke , `` finite - length analysis of low - density parity - check codes on the binary erasure channel , '' _ ieee trans .",
    "inf . theory _ ,",
    "48 , no .",
    "1570 - 1579 , jun .  2002 .",
    "j.  kubiatowicz , d.  bindel , y.  chen , s.  czerwinski , p.  eaton , d.  geels , r.  gummadi and s. rhea , h.  weatherspoon , w.  weimer , c.  wells , and b. zhao , `` oceanstore : an architecture for global - scale persistent storage , '' _ 9th int",
    ". conf . on architectural support programm _ , pp .  190 - 201 , cambridge , massachusetts , 2000 .",
    "s.  kudekar , t.  richardson , and r.l .",
    "urbanke , `` spatially coupled ensembles universally achieve capacity under belief propagation , '' _ ieee trans .",
    "inf . theory _ ,",
    "59 , no .  12 , pp",
    ".  7761 - 7813 , dec . 2013 .",
    "a.  lapidoth , `` convolutional codes and finite interleavers for the block erasure channel , '' _ mobile communications advanced systems and components _ , lecture notes in computer science , springer berlin heidelberg , vol .  783 , pp .  113 - 120 , may  2005 .",
    "rashmi , n.b .",
    "shah , d.  gu , h.  kuang , d.  borthakur , and k.  ramchandran , `` a solution to the network challenges of data recovery in erasure - coded distributed storage systems : a study on the facebook warehouse cluster , '' _ proc .",
    "usenix hotstorage _ , june 2013 ."
  ],
  "abstract_text": [
    "<S> we consider non - binary product codes with mds components and their iterative row - column algebraic decoding on the erasure channel . both independent and block erasures are considered in this paper . </S>",
    "<S> a compact graph representation is introduced on which we define double - diversity edge colorings via the rootcheck concept . </S>",
    "<S> an upper bound of the number of decoding iterations is given as a function of the graph size and the color palette size @xmath0 . </S>",
    "<S> stopping sets are defined in the context of mds components and a relationship is established with the graph representation . </S>",
    "<S> a full characterization of these stopping sets is given up to a size @xmath1 , where @xmath2 and @xmath3 are the minimum hamming distances of the column and row mds components respectively . </S>",
    "<S> then , we propose a differential evolution edge coloring algorithm that produces colorings with a large population of minimal rootcheck order symbols . </S>",
    "<S> the complexity of this algorithm per iteration is @xmath4 , for a given differential evolution parameter @xmath5 , where @xmath6 itself is small with respect to the huge cardinality of the coloring ensemble . </S>",
    "<S> the performance of mds - based product codes with and without double - diversity coloring is analyzed in presence of both block and independent erasures . in the latter case , ml and iterative decoding are proven to coincide at small channel erasure probability . </S>",
    "<S> furthermore , numerical results show excellent performance in presence of unequal erasure probability due to double - diversity colorings .    </S>",
    "<S> product codes , mds codes , iterative decoding , codes on graphs , differential evolution , distributive storage , edge coloring , diversity , erasure channel , stopping sets . </S>"
  ]
}