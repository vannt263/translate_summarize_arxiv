{
  "article_text": [
    "global constraints are one of the distinguishing features of constraint programming .",
    "they capture common modelling patterns and have associated efficient propagators for pruning the search space . for example , is one of the best known global constraints that has proven useful in the modelling and solving of many real world problems .",
    "a number of efficient algorithms have been proposed to propagate the constraint ( e.g. @xcite ) . whilst there is little debate that is a global constraint ,",
    "the formal definition of a global constraint is more difficult to pin down .",
    "one property often associated with global constraints is that they can not be decomposed into simpler constraints without impacting either the pruning or the efficiency of propagation @xcite .",
    "recently progress has been made on the theoretical problem of understanding what is and is nt a global constraint .",
    "in particular , whilst a bound consistency propagator for the constraint can be effectively simulated with a simple decomposition @xcite , circuit complexity lower bounds have been used to prove that a domain consistency propagator for can not be polynomially simulated by a simple decomposition @xcite .    in this paper",
    ", we turn to a strict generalization of the constraint .",
    "counts the number of values used by a set of variables ; the constraint ensures that this count equals the cardinality of the set . from a theoretical perspective , the constraint is significantly more difficult to propagate than the constraint since enforcing domain consistency is known to be np - hard @xcite .",
    "moreover , as is a generalization of , there exists no polynomial sized decomposition of which achieves domain consistency @xcite .",
    "nevertheless , we show that decomposition can simulate the polynomial time algorithm for enforcing bound consistency on but with a significant space complexity .",
    "we also prove , for the first time , that range consistency on can be enforced in the same worst case time complexity as bound consistency .",
    "this contrasts with the constraint where range consistency takes @xmath0 time @xcite but bound consistency takes just @xmath1 time @xcite .    the main value of these decompositions is theoretical as their space complexity is equal to their worst case time complexity .",
    "when domains are large , this space complexity may be prohibitive . in the conclusion ,",
    "we argue why it appears somewhat inevitable that the space complexity is equal to the worst case time complexity .",
    "these results suggest new insight into what is and is nt a global constraint : a global constraint either provides more pruning than any polynomial sized decomposition or provides the same pruning but with lower space complexity .",
    "there are several other theoretical reasons why the decompositions studied here are interesting .",
    "first , it is technically interesting that a complex propagation algorithm like the bound consistency propagator for can be simulated by a simple decomposition .",
    "second , these decompositions can be readily encoded as linear inequalities and used in linear programs . in fact , we will report experiments using both constraint and integer linear programming with these decompositions . since global constraints are one of the key differentiators between constraint and integer programming , these decompositions provide us with another tool to explore the interface between constraint and integer programming .",
    "third , the decompositions give insights into how we might add nogood learning to a propagator .",
    "a constraint satisfaction problem ( csp ) consists of a set of variables , each with a finite domain of values , and a set of constraints .",
    "we use capitals for variables and lower case for values .",
    "we assume values are taken from the set 1 to @xmath2 .",
    "we write @xmath3 for the domain of possible values for @xmath4 , @xmath5 for the smallest value in @xmath3 , @xmath6 for the greatest , and @xmath7 for the interval @xmath8 $ ] .",
    "constraint solvers typically use backtracking search to explore the space of partial assignments . after each assignment",
    ", propagation algorithms prune the search space by enforcing local consistency properties like domain , range or bound consistency .",
    "a constraint is _ domain consistent _",
    "( _ dc _ ) iff when a variable is assigned any of the values in its domain , there exist compatible values in the domains of all the other variables of the constraint .",
    "such an assignment is called a _",
    "support_. a csp is domain consistent iff every constraint is domain consistent .",
    "a constraint is _ disentailed _ iff there is no possible support .",
    "a propagator which enforces domain consistency will detect disentailment , but a propagator that detects just disentailment will not enforce domain consistency . a constraint is _ range consistent _",
    "( _ rc _ ) iff , when a variable is assigned any of the values in its domain , there exist compatible values between the minimum and maximum domain value for all the other variables of the constraint .",
    "such an assignment is called a _ bound support_. a constraint is _ bound consistent _ ( _ bc _ ) iff the minimum and maximum value of every variable of the constraint belong to a bound support .",
    "a csp is bound consistent iff every constraint is bound consistent .",
    "we compute the total amortized cost of enforcing a local consistency down an entire branch of the search tree .",
    "this captures the incremental cost of propagation .",
    "finally , we will assume that a propagator is invoked at most once for each domain change and that the solver uses an optimal propagator to enforce bc on sum and channeling constraints .",
    "such assumptions hold for modern solvers like gecode and ilog solver .",
    "however , we make no assumption about the order of invocation of the constraints in a decomposition .",
    "the upper bounds we give hold _ regardless _ of the order in which constraints are processed .",
    "a _ global constraint _ is one in which the arity of the constraint @xmath9 is a parameter .",
    "a _ decomposition _ of a global constraint is a csp involving the @xmath9 variables of the global constraint ( and possibly others ) , involving only constraints with fixed arity ( no global constraint ) or constraints that are themselves decomposable , such that the size of the csp is polynomial in the sum of the sizes of the domains of the @xmath9 original variables , and such that the projection of its solutions on those @xmath9 variables corresponds to the solutions of the global constraint .",
    "a useful notion is algorithmic globality @xcite .",
    "informally , given a local consistency property , a global constraint is algorithmically global if there is no decomposition on which this local consistency is achieved in the same time and space complexity .",
    "we suggest here two refinements of this notion of algorithmic globality .",
    "first , we will separate the space and time complexity .",
    "that is , given a local consistency property , a global constraint is algorithmically global with respect to time ( space ) if there is no decomposition on which this local consistency is achieved in the same time ( space ) complexity .",
    "second , unlike @xcite , we consider decompositions that may introduce new variables .",
    "our results will show that , when we introduce new variables , is not algorithmically global with respect to time but _ is _ global with respect to space .",
    "pachet and roy first proposed the constraint @xcite . formally @xmath10,n)$ ] ensures that @xmath11 .",
    "this generalizes several other global constraints including ( which ensures that the number of values taken by a set of variables equals the cardinality of the set ) and ( which ensures a set of variables take more than one value ) .",
    "enforcing domain consistency on the constraint is np - hard ( theorem 3 in @xcite ) even when @xmath12 is fixed ( theorem 2 in @xcite ) .",
    "in fact , just computing the lower bound on @xmath12 is np - hard ( theorem 3 in @xcite ) . in addition , enforcing domain consistency on the constraint is not fixed parameter tractable since it is @xmath13[2]-complete @xcite .",
    "however , several polynomial propagation algorithms have been proposed that achieve bound consistency and some closely related levels of local consistency @xcite .",
    "global constraints can often be decomposed into simpler , more primitive and small arity constraints .",
    "for example , the constraint can be decomposed into a quadratic number of binary inequalities .",
    "however , such decomposition often hinders propagation and can have a significant impact on the solver s ability to find solutions @xcite .",
    "we can decompose the constraint by introducing 0/1 variables to represent which values are used and posting a sum constraint on these introduced variables : @xmath14    note that constraint [ dec3 ] is not a fixed arity constraint , but can itself be decomposed to ternary sums without hindering bound propagation .",
    "unfortunately , this simple decomposition hinders propagation .",
    "it can be bc whereas bc on the corresponding constraint detects disentailment .",
    "bc on is stronger than bc on its decomposition into ( [ dec1 ] ) to ( [ dec3 ] ) .",
    "* proof :  * clearly bc on is at least as strong as bc on the decomposition . to show strictness , consider @xmath15 , @xmath16 , @xmath17 for @xmath18 , and @xmath19",
    ". constraints ( [ dec1 ] ) to ( [ dec3 ] ) are bc .",
    "however , the corresponding constraint has no bound support and thus enforcing bc on it detects disentailment .",
    "we observe that enforcing dc instead of bc on constraints ( [ dec1 ] ) to ( [ dec3 ] ) in the example of the proof above still does not prune any value . to decompose without hindering propagation",
    ", we must look to more complex decompositions .",
    "our first step in decomposing the constraint is to split it into two parts : an and an constraint .",
    "@xmath20,n)$ ] holds iff @xmath21 whilst @xmath22,n)$ ] holds iff @xmath23 .",
    "consider a constraint over the following variables and values : @xmath24 suppose we decompose this into an and an constraint .",
    "consider the constraint .",
    "the 5 variables can take at most 4 different values because @xmath25 , and @xmath26 can only take values @xmath27 and @xmath28 .",
    "hence , there is no bound support for @xmath29 .",
    "enforcing bc on the constraint therefore prunes @xmath29 .",
    "consider now the constraint .",
    "since @xmath30 and @xmath31 guarantee that we take at least 2 different values , there is no bound support for @xmath19 . hence enforcing bc on an constraint prunes @xmath19 .",
    "if @xmath32 , @xmath33 or @xmath34 , or @xmath35 then any complete assignment uses at least 3 different values . hence there is also no bound support for these assignments .",
    "pruning these values gives bound consistent domains for the original constraint : @xmath36    to show that decomposing the constraint into these two parts does not hinder propagation in general , we will use the following lemma . given an assignment @xmath37 of values , @xmath38 denotes the number of distinct values in @xmath37 .",
    "given a vector of variables @xmath39 , @xmath40 and @xmath41 .    [ nvalue : prop_1 ]",
    "consider @xmath42 , n)$ ] . if @xmath43 $ ] , then the bounds of @xmath12 have bound supports .    * proof :  * let @xmath44 be an assignment of @xmath45 in @xmath46 with @xmath47 and @xmath48 be an assignment of @xmath45 in @xmath46 with @xmath49 . consider the sequence @xmath50 where @xmath51 is the same as @xmath52 except that @xmath53 has been assigned its value in @xmath48 instead of its value in @xmath44 .",
    "@xmath54 because they only differ on @xmath53 . hence",
    ", for any @xmath55 $ ] , there exists @xmath56 with @xmath57 .",
    "thus , @xmath58 is a bound support for @xmath59 on @xmath42 , n)$ ] .",
    "therefore , @xmath60 and @xmath61 have a bound support .",
    "we now prove that decomposing the constraint into and constraints does not hinder pruning when enforcing bc .",
    "[ t : decom_nvalue ] bc on @xmath42 , n)$ ] is equivalent to bc on @xmath62 , n)$ ] and on @xmath63 , n)$ ] .",
    "* proof :  * suppose the and constraints are bc .",
    "the constraint guarantees that @xmath64 and the constraint guarantees that @xmath65 . therefore , @xmath66 $ ] . by lemma [ nvalue : prop_1 ]",
    ", the variable @xmath12 is bound consistent .",
    "consider a variable / bound value pair @xmath67 .",
    "let @xmath68 be a bound support of @xmath67 in the constraint and @xmath69 be a bound support of @xmath67 in the constraint .",
    "we have @xmath70 and @xmath71 by definition of and .",
    "consider the sequence @xmath72 where @xmath73 is the same as @xmath74 except that @xmath53 has been assigned its value in @xmath75 instead of its value in @xmath76 .",
    "@xmath77 because they only differ on @xmath53 .",
    "hence , there exists @xmath56 with @xmath78 .",
    "we know that @xmath79 and @xmath80 belong to @xmath81 because they belong to bound supports . thus , @xmath82 and @xmath83 is a bound support for @xmath84 on @xmath85 , n)$ ] .    when enforcing domain consistency , bessiere _",
    "_ @xcite noted that decomposing the constraint into and constraints does hinder propagation , but only when @xmath86 contains just @xmath87 and @xmath88 and there is a gap in the domain in - between ( see theorem 1 in @xcite and the discussion that follows ) . when enforcing bc , any such gap in the domain for @xmath12 is ignored .",
    "we now give a decomposition for the constraint which does not hinder bound consistency propagation .",
    "to decompose the constraint , we introduce 0/1 variables , @xmath89 to represent whether @xmath4 uses a value in the interval @xmath90 $ ] , and `` pyramid '' variables , @xmath91 with domains @xmath92 $ ] which count the number of values taken inside the interval @xmath90 $ ] . to constrain these introduced variables , we post the following constraints : @xmath93 & \\ \\ \\",
    "\\forall \\ ; 1 \\leq i \\leq n , 1 \\leq l \\leq u \\leq d \\label{eqn::firstatmostnvalue } \\\\ &   a_{ilu }   \\leq m_{lu } & \\ \\ \\ \\forall \\ ; 1 \\leq i \\leq n , 1 \\leq l \\leq u \\leq d \\label{eqn::lb_atmostnvalue } \\\\      & m_{1u }   = m_{1k } + m_{(k+1)u } & \\ \\",
    "\\ \\forall \\ ; 1 \\leq k < u",
    "\\leq d \\label{eqn::pyram_atmostnvalue}\\\\   & m_{1 d }   \\leq n & \\label{eqn::lastatmostnvalue}\\end{aligned}\\ ] ]    consider the decomposition of an constraint over the following variables and values : @xmath94 observe that we consider that value 5 for @xmath12 has already been pruned by , as will be shown in next sections .",
    "bound consistency reasoning on the decomposition will make the following inferences . as @xmath95 , from we get @xmath96 . hence by , @xmath97 .",
    "similarly , as @xmath98 , we get @xmath99 and @xmath100 . now",
    "@xmath101 . by and ,",
    "@xmath102 , @xmath103 , @xmath104 , @xmath105 , @xmath106 .",
    "since @xmath107 , we deduce that @xmath108 and hence @xmath109 .",
    "this gives @xmath110 . by ,",
    "@xmath111 . finally ,",
    "from , we get @xmath112 and @xmath35 .",
    "this gives us bound consistent domains for the constraint .",
    "we now prove that this decomposition does not hinder propagation in general .",
    "[ thm : atmost - bc ] bc on constraints ( [ eqn::firstatmostnvalue ] ) to ( [ eqn::lastatmostnvalue ] ) is equivalent to bc on @xmath113 , n)$ ] , and takes @xmath114 time to enforce down the branch of the search tree .",
    "* proof :  * first note that changing the domains of the @xmath45 variables can not affect the upper bound of @xmath12 by the constraint and , conversely , changing the lower bound of @xmath12 can not affect the domains of the @xmath45 variables .",
    "let @xmath115 be a maximum cardinality subset of variables of @xmath45 whose ranges are pairwise disjoint ( i.e. , @xmath116 ) .",
    "let @xmath117\\mid b_i = min(x_{p_i } ) , \\",
    "c_i = max(x_{p_i } ) , x_{p_i } \\in y\\}$ ] be the corresponding ordered set of disjoint ranges of the variables in @xmath118 .",
    "it has been shown in  @xcite that @xmath119 .",
    "consider the interval @xmath120",
    "\\in i_y$ ] . constraints ( [ eqn::lb_atmostnvalue ] ) ensure that the variables @xmath121 @xmath122 $ ] are greater than or equal to @xmath123 and constraints ( [ eqn::pyram_atmostnvalue ] ) ensure that the variable @xmath124 is greater than or equal to the sum of lower bounds of variables @xmath121 , @xmath122 $ ] , because intervals @xmath120 $ ] are disjoint . therefore , the variable @xmath12 is greater than or equal to @xmath87 and it is bound consistent .    we show that when @xmath12 is bc and @xmath125 , all @xmath45 variables are @xmath126 .",
    "take any assignment @xmath127 such that @xmath128 .",
    "let @xmath129 $ ] be the assignment @xmath37 where the value of @xmath4 in @xmath37 has been replaced by @xmath130 , one of the bounds of @xmath4 .",
    "we know that @xmath131)\\in [ card(s)-1 , card(s)+1 ] = [ card_\\downarrow(x)-1 , card_\\downarrow(x)+1]$ ] because only one variable has been flipped .",
    "hence , any assignment @xmath132 with @xmath133 is a bound support . @xmath86",
    "necessarily contains such a value @xmath59 by assumption .",
    "the only case when pruning might occur is if the variable @xmath12 is ground and @xmath134",
    ". constraints ( [ eqn::pyram_atmostnvalue ] ) imply that @xmath135 equals the sum of variables @xmath136 .",
    "the lower bound of the variable @xmath137 is greater than one and there are @xmath138 of these intervals .",
    "therefore , by constraint , the upper bound of variables @xmath139 that correspond to intervals outside the set @xmath140 are forced to zero .",
    "there are @xmath141 constraints ( [ eqn::firstatmostnvalue ] ) and constraints ( [ eqn::lb_atmostnvalue ] ) that can be woken @xmath142 times down the branch of the search tree .",
    "each requires @xmath143 time for a total of @xmath114 down the branch .",
    "there are @xmath144 constraints ( [ eqn::pyram_atmostnvalue ] ) which can be woken @xmath145 times down the branch and each invocation takes @xmath143 time .",
    "this gives a total of @xmath141 .",
    "the final complexity down the branch of the search tree is therefore @xmath114 .",
    "the proof of theorem [ thm : atmost - bc ] also provides the corollary that enforcing range on consistency on constraints  [ eqn::firstatmostnvalue ] enforces range consistency on .",
    "note that theorem  [ thm : atmost - bc ] shows that the bc propagator of  @xcite is not algorithmically global with respect to time , as bc can be achieved with a decomposition with comparable time complexity .",
    "on the other hand , the @xmath141 space complexity of this decomposition suggests that it is algorithmically global with respect to space .",
    "of course , we only provide upper bounds here , so it may be that is not algorithmically global with respect to either time or space .",
    "there is a similar decomposition for the constraint .",
    "we introduce 0/1 variables , @xmath89 to represent whether @xmath4 uses a value in the interval @xmath90 $ ] , and integer variables , @xmath186 with domains @xmath187 $ ] to count the number of times values in @xmath90 $ ] are _",
    "re_-used , that is , how much the number of variables taking values in @xmath90 $ ] exceeds the number @xmath188 of values in @xmath90 $ ] . to constrain these introduced variables , we post the following constraints : @xmath189 & \\ \\",
    "\\ \\forall \\ ; 1 \\leq i \\leq n , 1 \\leq l \\leq u \\leq d \\label{eqn::atleastnvalue-1 } \\\\   & e_{lu }   \\geq \\sum_{i=1}^n a_{ilu } - ( u - l+1 ) & \\ \\ \\ \\forall \\ ; 1\\leq l \\leq u \\leq d    \\label{eqn::atleastnvalue - e}\\\\ &   e_{1u } = e_{1k } + e_{(k+1)u } & \\ \\ \\ \\forall \\ ; 1 \\leq k <",
    "u \\leq d \\label{eqn::pyram_atleastnvalue } \\\\ &   n\\leq n - e_{1 d } \\label{eqn::atleastnvalue-2}\\end{aligned}\\ ] ]    consider the decomposition of an constraint over the following variables and values : @xmath24 bound consistency reasoning on the decomposition will make the following inferences . as @xmath190 $ ] for @xmath191 ,",
    "from we get @xmath192 for @xmath191 .",
    "hence , by , @xmath193 . by ,",
    "@xmath194 , @xmath195 .",
    "since @xmath193 we deduce that @xmath196 . finally , from and the fact that @xmath197 , we get @xmath198 .",
    "this gives us bound consistent domains for the constraint .",
    "we now prove that this decomposition does not hinder propagation in general .",
    "[ thm : atleastnvalue - bc ] bc on the constraints to is equivalent to bc on @xmath113 , n)$ ] , and takes @xmath114 time to enforce down the branch of the search tree .    *",
    "proof :  * first note that changing the domains of the @xmath45 variables can not affect the lower bound of @xmath12 by the constraint and , conversely , changing the upper bound of @xmath12 can not affect the domains of the @xmath45 variables",
    ".    it is known @xcite that @xmath199 is equal to the size of a maximum matching @xmath200 in the value graph of the constraint . since @xmath201 , we show that the lower bound of @xmath202 is equal to @xmath203 .",
    "is not pruned by other constraints .",
    "] we first show that we can construct a matching @xmath204 of size @xmath205 , then show that it is a maximum matching .",
    "the proof uses a partition of the interval @xmath206 $ ] into a set of maximal saturated intervals @xmath207\\}$ ] , @xmath208 such that @xmath209 and a set of unsaturated intervals @xmath210\\}$]such that @xmath211 .",
    "let @xmath212 \\mid j \\in [ 1\\ldots k ] \\}$ ] be the ordered set of maximal intervals such that @xmath209 .",
    "note that the intervals in @xmath213 are disjoint otherwise intervals are not maximal .",
    "an interval @xmath120 $ ] is smaller than @xmath214 $ ] iff @xmath215 .",
    "we denote the union of the first @xmath216 intervals @xmath217 $ ] , @xmath218 $ ] , @xmath219 and the variables whose domain is inside one of intervals @xmath213 @xmath220 .",
    "our construction of a matching uses two sets of variables , @xmath221 and @xmath222 .",
    "first , we identify the cardinality of these two sets .",
    "namely , we show that the size of the set @xmath221 is @xmath223 and the size of the set @xmath224 is @xmath225 .",
    "intervals @xmath213 are saturated therefore each value from these intervals are taken by a variable in @xmath221 . therefore , @xmath221 has size at least @xmath59 .",
    "moreover , there exist @xmath226 additional variables that take values from @xmath227 , because values from intervals between two consecutive intervals in @xmath213 do not contribute to the lower bound of the variable @xmath228 by construction of @xmath213 .",
    "therefore , the number of variables in @xmath227 is at least @xmath223 .",
    "note that constraints imply that @xmath202 equals the sum of variables @xmath229 . as intervals in @xmath213",
    "are disjoint then @xmath230 . if @xmath231 then @xmath232 and the lower bound of the variable @xmath202 will be increased .",
    "hence , @xmath233 .",
    "since all these intervals are saturated , we can construct a matching @xmath234 of size @xmath59 using the variables in @xmath221 .",
    "the size of @xmath222 is @xmath235 .",
    "we show by contradiction that we can construct a matching @xmath236 of size @xmath235 using the variables in @xmath222 and the values @xmath237 .",
    "suppose such a matching does not exist .",
    "then , there exists an interval @xmath238 $ ] such that @xmath239| < \\sum_{i      \\in x \\setminus x_i } min(a_{ibc})$ ] , i.e. , after consuming the values in @xmath213 with variables in @xmath221 , we are left with fewer values in @xmath240 $ ] than variables whose domain is contained in @xmath240 $ ] .",
    "we denote @xmath241 \\cap d^k_i|$ ] , so that @xmath242 is the number of values inside the interval @xmath240 $ ] that are taken by variables in @xmath221 . the total number of variables inside the interval @xmath240 $ ] is greater than or equal to @xmath243 . the total number of variables @xmath221 inside the interval @xmath240 $ ] equals to @xmath244 .",
    "therefore , @xmath245 . on the other hand ,",
    "the number of values that are not taken by the variables @xmath221 in the interval @xmath240 $ ] is @xmath246 .",
    "therefore , we obtain the inequality @xmath247 or @xmath248 . by construction of @xmath213 , @xmath249 , otherwise the intervals in @xmath213 that are subsets of @xmath240",
    "$ ] are not maximal .",
    "this leads to a contradiction , so we can construct a matching @xmath204 of size @xmath205 .",
    "now suppose that @xmath204 is not a maximum matching .",
    "this means that @xmath226 is overestimated by propagation on and .",
    "since @xmath204 is not a maximum matching , there exists an augmenting path of @xmath204 , that produces @xmath250 , such that @xmath251 .",
    "this new matching covers all the values that @xmath204 covers and one additional value @xmath252 .",
    "we show that @xmath252 can not belong to the interval @xmath206 $ ]",
    ".    the value @xmath252 can not be in any interval in @xmath213 , because all values in @xmath120 \\in i$ ] are used by variables whose domain is contained in @xmath120 $ ] .",
    "in addition , @xmath252 can not be in an interval @xmath240 $ ] between two consecutive intervals in @xmath213 , because those intervals do not contribute to the lower bound of @xmath202 .",
    "thus , @xmath250 can not cover more values than @xmath204 and they must have the same size , a contradiction .    we show that when @xmath12 is bc and @xmath253 , all @xmath45 variables are @xmath126 .",
    "take any assignment @xmath127 such that @xmath254 .",
    "let @xmath129 $ ] be the assignment @xmath37 where the value of @xmath4 in @xmath37 has been replaced by @xmath130 , one of the bounds of @xmath4 .",
    "we know that @xmath131)\\in [ card(s)-1 , card(s)+1 ] = [ card_\\uparrow(x)-1 , card_\\uparrow(x)+1]$ ] because only one variable has been flipped . hence , any assignment @xmath132 with @xmath255 is a bound support . @xmath86",
    "necessarily contains such a value @xmath59 by assumption .",
    "we now show that if @xmath256 , enforcing bc on the constraints  makes the variables @xmath45 bc with respect to the constraint .",
    "we first observe that in a bound support , variables @xmath45 must take the maximum number of different values because @xmath256 .",
    "hence , in a bound support , variables @xmath45 that are not included in a saturated interval will take values outside any saturated interval they overlap and they all take different values .",
    "we recall that @xmath257 .",
    "hence , by constraint , @xmath258 .",
    "we recall the the size of set @xmath221 equals @xmath259 .",
    "constraints imply that @xmath202 equals the sum of variables @xmath229 and @xmath260 .",
    "hence , by constraints  , the upper bounds of all variables @xmath261 that correspond to the saturated intervals are forced to @xmath262 .",
    "thus , by constraints and , all variables in @xmath224 have their bounds pruned if they belong to @xmath263 . by constraints   again , the upper bounds of all variables @xmath186 that correspond to the unsaturated intervals are forced to take value 0 , and all variables @xmath264 with @xmath265\\subseteq[l , u]$ ] are forced to 0 as well .",
    "thus , by constraints and , all variables in @xmath224 have their bounds pruned if they belong to a hall interval of other variables in @xmath224 .",
    "this is what bc on the constraint does @xcite .",
    "there are @xmath141 constraints that can be woken @xmath142 times down the branch of the search tree in @xmath143 , so a total of @xmath114 down the branch .",
    "there are @xmath144 constraints which can be propagated in time @xmath145 down the branch for a @xmath141 .",
    "there are @xmath144 constraints which can be woken @xmath145 times each down the branch for a total cost in @xmath145 time down the branch .",
    "thus a total of @xmath141 .",
    "the final complexity down the branch of the search tree is therefore @xmath114 .",
    "the complexity of enforcing bc on can be improved to @xmath141 in a way similar to that described in section [ sec : atmost : faster ] and in @xcite . as with",
    ", enforcing rc on constraints ( [ eqn::atleastnvalue-1 ] ) enforces rc on , but in this case we can not reduce the complexity below @xmath114 . similarly to , theorem  [ thm : atleastnvalue - bc ] shows that the bound consistency propagator of is not algorithmically global with respect to time and provides evidence that it is algorithmically global with respect to space .",
    "we can improve how the solver handles this decomposition of the constraint by adding implied constraints and by implementing specialized propagators .",
    "our first improvement is to add an implied constraint and enforce bc on it : @xmath146 this does not change the asymptotic complexity of reasoning with the decomposition , nor does it improve the level of propagation achieved . however , we have found that the fixed point of propagation is reached quicker in practice with such an implied constraint .",
    "our second improvement decreases the asymptotic complexity of enforcing bc on the decomposition of section [ sec : atmost ] .",
    "the complexity is dominated by reasoning with constraints which channel from @xmath4 to @xmath89 and thence onto @xmath91 ( through constraints ) .",
    "if constraints are not woken uselessly , enforcing bc costs @xmath143 per constraint down the branch . unfortunately ,",
    "existing solvers wake up such constraints as soon as a bound is modified , thus giving a cost in @xmath142 .",
    "we therefore implemented a specialized propagator to channel between @xmath4 and @xmath91 efficiently . to be more precise , we remove the @xmath141 variables @xmath89 and replace them with @xmath147 boolean variables @xmath148 .",
    "we then add the following constraints    @xmath149    these constraints are enough to channel changes in the bounds of the @xmath45 variables to @xmath91 .",
    "there are @xmath147 constraints , each of which can be propagated in time @xmath142 over a branch , for a total of @xmath141 .",
    "there are @xmath141 clausal constraints and each of them can be made bc in time @xmath143 down a branch of the search tree , for a total cost of @xmath141 . since channeling dominates the asymptotic complexity of the entire decomposition of section [ sec : atmost ] , this improves the complexity of this decomposition to @xmath141 .",
    "this is similar to the technique used in @xcite to improve the asymptotic complexity of the decomposition of the constraint .",
    "our third improvement is to enforce stronger pruning by observing that when @xmath150 , we can remove the interval @xmath90 $ ] from all variables , regardless of whether this modifies their bounds .",
    "this corresponds to enforcing rc on constraints .",
    "interestingly , this is sufficient to achieve rc on the constraint .",
    "unfortunately , constraints can not achieve this pruning and using constraints increases the complexity of the decomposition back to @xmath114 .",
    "instead we extend the decomposition with @xmath151 boolean variables @xmath152 , 1 \\leq i \\leq n ,   1 \\leq l \\leq d , 0 \\leq k \\leq \\lfloor \\log d \\rfloor$ ] .",
    "the following constraint ensures that @xmath153 .",
    "@xmath154 )    \\label{eq : domainbitmap}\\end{aligned}\\ ] ]    clearly we can enforce rc on this constraint in time @xmath142 over a branch , and @xmath147 for all variables @xmath4 .",
    "we can then use the following clausal constraints to channel from variables @xmath91 to these variables and on to the @xmath45 variables .",
    "these constraints are posted for every @xmath155 and integers @xmath156 such that @xmath157 : @xmath158    the variable @xmath159 , similarly to the variables @xmath160 , is true when @xmath161 $ ] , but instead of having one such variable for every interval , we only have them for intervals whose length is a power of two . when @xmath162 , with @xmath163 , the constraints ( [ eq : channel - range - first])([eq : channel - range - last ] ) set to 0 the @xmath164 variables that correspond to the two intervals of length @xmath165 that start at @xmath166 and finish at @xmath167 , respectively . in turn , the constraints ( [ eq : channel - b - first])([eq : channel - b - last ] ) set to 0 the @xmath164 variables that correspond to intervals of length @xmath168 , all the way down to intervals of size 1 .",
    "these trigger the constraints , so all values in the interval @xmath90 $ ] are removed from the domains of all variables .",
    "suppose @xmath169 $ ] .",
    "then , by , @xmath170 , @xmath171 and by , @xmath172 .",
    "conversely , suppose @xmath173 and @xmath174 $ ] .",
    "then , by ( [ eq : channel - range - first])([eq : channel - range - last ] ) , we get @xmath175 and @xmath176 . from @xmath175 and ( [ eq : channel - b - first])([eq : channel - b - last ] )",
    "we get @xmath177 , @xmath178 , @xmath179 , and by , the interval @xmath180 $ ] is pruned from @xmath181 .",
    "similarly , @xmath182 causes the interval @xmath183 $ ] to be removed from @xmath181 , so @xmath184 \\cup \\ { 10 \\}$ ] .",
    "note that rc can be enforced on each of these constraints in constant time over a branch .",
    "there exist @xmath185 of the constraints  and @xmath141 of the constraints   , so the total time to propagate them all down a branch is @xmath141 .",
    "as noted before , the main value of these decompositions is theoretical : demonstrating that the bound consistency propagator of  @xcite for the constraint can be simulated using a simple decomposition with comparable time complexity over a branch of the search tree but greater space complexity . to see when this space complexity hits , we performed some experiments .",
    "we used a benchmark problem , the dominating set of the queen s graph used in previous studies of @xcite and ran experiments with ilog solver 6.2 and ilog cplex 9.1 on an intel xeon 4 cpu , 2.0 ghz , 4 gb ram .",
    "the dominating set of the queen s graph problem is to put the minimum number of queens on a @xmath266 chessboard , so that each square either contains a queen or is attacked by one .",
    "this is equivalent to the dominating set problem of the queen s graph .",
    "each vertex in the queen s graph corresponds to a square of the chessboard and there exists an edge between two vertices iff a queen from one square can attack a queen from the other square . to model the problem , we use a variable @xmath4 for each square , and values from @xmath123 to @xmath267 and post a single @xmath268,n)$ ] constraint .",
    "the value @xmath216 belongs to @xmath3 iff there exists an edge @xmath269 in the queen s graph or @xmath270 . for @xmath271 , all minimum dominating sets for the queen s problem are either of size @xmath272 or @xmath273 @xcite .",
    "we therefore only solved instances for these two values of @xmath12 .",
    "we compare our decomposition with the simple decomposition of the @xmath274 constraint in ilog solver and ilog cplex solvers .",
    "the simple decomposition is the one described in section [ sec : nvalue : simple ] except that in constraint , we replace `` @xmath275 '' by `` @xmath276 '' .",
    "we denote this decomposition @xmath277 and @xmath278 in ilog solver and cplex , respectively . to encode this decomposition into an integer linear program , we introduce literals @xmath279 , @xmath280 $ ] and use a direct encoding with @xmath279 for the truth of @xmath281 and channeling inequalities @xmath282 , @xmath280 $ ] .",
    "we use the direct encoding of variables domains to avoid using logic constraints , like disjunction and implication constraints in cplex .",
    "the default transformation of logic constraints in cplex appears to generate large ilp models and this slows down the search .",
    "the bc decomposition is described in section [ sec : atmost ] , which we call @xmath283 and @xmath284 in ilog solver and cplex , respectively . in ilog solver , as explained in section [ sec : atmost : faster ] , we channel the variables @xmath4 directly to the pyramid variables @xmath91 to avoid introducing many auxiliary variables @xmath89 and we add the redundant constraint @xmath285 to the decomposition to speed up the propagation across the pyramid .",
    "we re - implemented the ternary sum constraint in ilog for a 30% speedup .",
    "to encode the bc decomposition into an integer linear program , we use the linear encoding of variables domains  @xcite .",
    "we introduce literals @xmath286 for the truth of @xmath287 , and the channeling inequalities of the form @xmath288 .",
    "we again add the redundant constraint @xmath285 . finally , we post constraints   as lazy constraints in clpex .",
    "lazy constraints are constraints that are not expected to be violated when they are omitted . these constraints are not taken into account in the relaxation of the problem and are only included when they violate an integral solution .    .[t",
    ": t1 ] backtracks and rumtime ( in seconds ) to solve the dominating set problem for the queen s graph . [ cols=\"^,^,>,>,>,>,>,>,>,>\",options=\"header \" , ]     results of our experiments are presented in table  [ t : t1 ] . our bc decomposition performs better than the @xmath277 decomposition , both in runtime and in number of backtracks needed by ilog solver or cplex .",
    "cplex is slower per node than ilog solver .",
    "however , cplex usually requires fewer backtracks compared to ilog solver .",
    "interestingly cplex performs well with the bc decomposition .",
    "the time to explore each node is large , reflecting the size of decomposition , but the number of search nodes explored is small .",
    "we conjecture that integer linear programming methods like cplex will perform in a similar way with other decompositions of global constraints which do not hinder propagation ( e.g. the decompositions we have proposed for and )",
    ". finally , the best results here are comparable with those for the @xmath274 bounds consistency propagator in  @xcite .",
    "bessiere _ et al . _ consider a number of different methods to compute a lower bound on the number of values used by a set of variables @xcite .",
    "one method is based on a simple linear relaxation of the minimum hitting set problem .",
    "this gives a propagation algorithm that achieves a level of consistency strictly stronger than bound consistency on the constraint .",
    "cheaper approximations are also proposed based on greedy heuristics and an approximation for the independence number of the interval graph due to turn .",
    "decompositions have been given for a number of other global constraints .",
    "for example , beldiceanu _ et al . _ identify conditions under which global constraints specified as automata can be decomposed into signature and transition constraints without hindering propagation @xcite . as a second example , many global constraints can be decomposed using and which can themselves be propagated effectively using simple decompositions @xcite . as a third example",
    ", the and constraints can be decomposed without hindering propagation @xcite . as a fourth example , decompositions of the constraint have been shown to be effective @xcite .",
    "most recently , we demonstrated that the and constraint can be decomposed into simple primitive constraints without hindering bound consistency propagation @xcite .",
    "these decompositions also introduced variables to count variables using values in an interval .",
    "for example , the decomposition of ensures that no interval has more variables taking values in the interval than the number of values in the interval . using a circuit complexity lower bound , we also proved that there is no polynomial sized sat decomposition of the constraint ( and therefore of its generalizations like ) on which unit propagation achieves domain consistency @xcite .",
    "our use of `` pyramid '' variables is similar to the use of the `` partial sums '' variables in the encoding of the constraint in  @xcite .",
    "this is related to the cumulative sums computed in  @xcite .",
    "we have studied a number of decompositions of the constraint .",
    "we have shown that a simple decomposition can simulate the bound consistency propagator for @xcite with comparable time complexity but with a much greater space complexity .",
    "this supports the conclusion that the benefit of a global propagator may often not be in saving time but in saving space .",
    "our other theoretical contribution is to show the first range consistency algorithm for , that runs in @xmath114 time and @xmath141 space .",
    "these results are largely interesting from a theoretical perspective .",
    "they help us understand the globality of global constraints .",
    "they highlight that saving space may be one of the important advantages provided by propagators for global constraints .",
    "we have seen that the space complexity of decompositions of many propagators equals the worst case time complexity ( e.g. for the , , , , , and constraints ) . for global constraints like",
    ", the space complexity of the decompositions does not appear to be that problematic .",
    "however , for global constraints like , the space complexity of the decompositions is onerous .",
    "this space complexity seems hard to avoid .",
    "for example , consider encodings into satisfiability and unit propagation as our inference method .",
    "as unit propagation is linear in time in the size of the encoding , it is somewhat inevitable that the size of any encoding is the same as the worst - case time complexity of any propagator that is being simulated .",
    "one other benefit of these decompositions is that they help us explore the interface between constraint and integer linear programming .",
    "for example , we saw that an integer programming solver performed relatively well with these decompositions",
    ". * acknowledgements .",
    "* nicta is funded by the department of broadband , communications and the digital economy , and the arc .",
    "christian bessiere is supported by anr project anr-06-blan-0383 - 02 , and george katsirelos by anr unloc project : anr 08-blan-0289 - 01 .",
    "we thank lanbo zheng for experimental help .",
    "bessiere , c. , hebrard , e. , hnich , b. , kiziltan , z. , walsh , t. : filtering algorithms for the nvalue constraint . in : proc .",
    "2nd int . conf . on integration of ai and or techniques in constraint programming for combinatorial optimization problems .",
    "( 2005 )        beldiceanu , n. : pruning for the minimum constraint family and for the number of distinct values constraint family . in : proc . of 7th int .",
    "conf . on principles and practice of constraint programming ( cp2001 ) , ( 2001 ) 211224          ohrimenko , o. , stuckey , p. , codish , m. : propagation = lazy clause generation . in : proc . of 13th int .",
    "conf . on principles and practice of constraint programming ( cp-2007 ) , ( 2007 ) beldiceanu , n. , carlsson , m. , debruyne , r. , petit , t. : .",
    "constraints * 10 * ( 2005 ) 339362          brand , s. , narodytska , n. , quimper , c.g . , stuckey , p. , walsh , t. : encodings of the sequence constraint . in : proc . of 13th int .",
    "conf . on principles and practice of constraint programming ( cp-2007 ) , ( 2007 )    van hoeve , w.j . ,",
    "pesant , g. , rousseau , l.m . , sabharwal , a. : revisiting the sequence constraint . in : proceedings of the 12th int .",
    "conf . on principles and practice of constraint programming ( cp-2006 ) , ( 2006 )"
  ],
  "abstract_text": [
    "<S> we study decompositions of the global constraint . </S>",
    "<S> our main contribution is theoretical : we show that there are propagators for global constraints like which decomposition can simulate with the same time complexity but with a much greater space complexity . </S>",
    "<S> this suggests that the benefit of a global propagator may often not be in saving time but in saving space . </S>",
    "<S> our other theoretical contribution is to show for the first time that range consistency can be enforced on with the same worst - case time complexity as bound consistency . finally , the decompositions we study are readily encoded as linear inequalities . </S>",
    "<S> we are therefore able to use them in integer linear programs .    </S>"
  ]
}