{
  "article_text": [
    "network routing based on content identifiers has recently become a topic of extensive discussion , due to the benefits that could be provided by a location - independent data distribution network @xcite , more commonly referred to as an information - centric network ( icn ) . for instance , the icn _ request - response _ mode of operation alleviates client mobility issues @xcite and natively supports interdomain multicast @xcite .",
    "furthermore , content security ( as opposed to channel security ) is inherently supported by transmitting signed copies of content @xcite .",
    "this in turn allows for in - network caching , which can transform the internet into a native content distribution network @xcite .",
    "finally , as shown recently @xcite , the icn paradigm can bring benefits also at the transport layer , where caches can be exploited to alleviate congestion .",
    "on the other hand , enormous effort has been spent to de - ossify the end - to - end internet transmission model to enable new functionalities .",
    "examples include ip multicast and anycast and supporting ip mobility at the network layer @xcite , @xcite , @xcite . however , the difficulties of deploying those solutions at large scale led to the design of application - layer solutions such as overlay caching instead of native , in - network caching , overlay indirection techniques @xcite , @xcite , @xcite , dnssec and ipsec to enhance security , just to name a few . even though these solutions have the potential to enable new services ( or applications ) , they appear inferior compared to an icn mode of operation , as they can not natively support security , mobility , in - network caching and multicast : in all cases the in - network forwarding entities are forced to operate on the five - tuple ` < sourceip , destinationip , sourceport , destinationport , protocol > ` being , therefore , completely content - agnostic .    arguably , the icn paradigm has the potential to deal with the internet s most daunting problems in a native manner . to reach this point ,",
    "however , a new architecture based on core icn principles will have to be deployed over the current ip internet architecture , clearly , a rather challenging task .    in this paper , we identify two main obstacles that hinder the deployment of icn on top of the current internet .",
    "these are : _",
    "i ) _ scalability of name resolution , a core networking problem @xcite and _ ii ) _ content provider - controlled access to content , a business model problem , which however , is deeply integrated into the core networking principles of today s internet and therefore , affects the design of any new architecture .",
    "content access control here is linked to content access logging and the transmission of content transparently to the content provider from in - network caches .",
    "we discuss each of these two challenges in more detail next .",
    "based on these considerations , in this paper , we propose a fully backward - compatible and incrementally - deployable icn - oriented architecture that meets scalability concerns , but at the same time takes into account the business requirements of the main internet market players .",
    "two main schools of thought have emerged in the icn - related literature regarding name resolution and name - to - location mapping .",
    "the first one , mainly adopted by the original ccn / ndn proposal @xcite , advocates the hop - by - hop resolution of _ requests _ or _ interests _ at the data plane .",
    "effectively , name resolution is coupled with name - based forwarding with each interest packet being locally resolved to the next ( router ) hop .",
    "this approach has the advantage of locally making forwarding decisions , but on the downside , huge volumes of state need to be maintained in ( manually - set ) fib tables @xcite .",
    "ccn / ndn routers effectively have to keep state _ per packet _ ,",
    "an issue traditionally considered as an implementation challenge  @xcite . to deal with",
    "the scalability problems @xcite of the original proposal and the huge state that needs to be kept at all routers , recent developments in the ndn space have proposed an ndn - based dns system , dubbed ndns @xcite , as well as the involvement of content providers to help in the name - resolution process @xcite .",
    "the second school of thought decouples name - resolution from name - based routing by using a separate name - resolution system , similar in nature to dns ( _ e.g. _ , @xcite , @xcite , @xcite , @xcite ) .",
    "although this approach avoids pushing excessive state to router forwarding tables , it requires the deployment of new infrastructure by operators .",
    "for instance , as shown in @xcite , the support of the dona  @xcite architecture at tier-1 autonomous systems ( ases ) requires the deployment of small - to - medium size data centres to support name resolution . such , extra infrastructure built in from scratch",
    "has the obvious downsides of huge investment requirements , as well as the shift challenge to this new mode of operation .",
    "moreover , focusing on the practical deployment of icn , the full cycle of the name resolution process still remains unclear .",
    "name resolution and data delivery mechanisms often build on the implicit assumption that content names or identifiers are already available to the end users , prior the aforementioned coupled or decoupled resolution steps . obviously , developing a mechanism for the retrieval and delivery of content names to the end users raises concerns regarding both scalability aspects related to the enormous size of the namespace , and compatibility issues with respect to both application and network layer interfaces .",
    "we also note that the requirements of today s dynamic and interactive applications would not be served adequately by fully transparent in - network caching driven solely from search engine content name results .",
    "we discuss and evaluate these concerns later .",
    "content providers ( cps ) and cdns require , for commercial and regulatory reasons , full control over the content requested and transferred .",
    "this has been largely overlooked by research efforts in the icn area , which have mainly focused on naming schemes and name resolution systems to address scalability issues .",
    "for instance , the consensus around opaque and permanent content names ignores the fact that content can be served from isp - operated in - network caches , transparently to the cp or cdn .",
    "_  pay per click \" _ business models , however , would face significant limitations from this design choice in an icn setting , that would practically prevent cps and cdns from billing their customers .",
    "alternative approaches based on isp - cdn collaborations to log content requests can not but be unrealistic : dnss can keep track of requested content and could possibly report back to the relevant cps / cdns .",
    "this , however , would mean that slas should be in place between _ all isps and all cps / cdns at a global scale _ , a rather unrealistic assumption .",
    "at the same time , transparent in - network caching mechanisms would typically allow only limited control over the content delivered to clients .",
    "that is , coarse grained ttl - based mechanisms would be the only means for cps / cdns to manipulate updated content , leading either to the delivery of stale content , or the unnecessary delivery from the cp .",
    "that said , active cache purging is another requirement that calls for control of content from cps and cdns .",
    "although content access control might sound as a trivial implementation or a business model issue , we argue that it might well hinder the engagement of cps and cdns from the adoption of icn .",
    "summarising , we argue that these concerns of : _",
    "i ) _ scalability and incremental deployment support of a name - oriented architecture , and _",
    "ii ) _ exclusive content access control at the cp side with simultaneous support for transparent in - network caching have been overlooked by the community so far . as a consequence",
    ", the full potential of an icn mode of operation has not been exploited in full yet , making the adoption and deployment of the icn paradigm an unrealistic target .",
    "although clean slate research has revealed many of the benefits that icn can bring , we argue that deployability has to be put at the forefront of any icn design , rather than being treated as an afterthought .",
    "we address the deployability concerns discussed above by introducing a novel information - focused network architecture , which overcomes scalability concerns and is fully backward compatible with the current ip architecture .",
    "our proposed architecture first introduces a name resolution process tailored to carefully manage information exposure _ e.g. , _ enabling content access logging ( section [ cc::cpbnm ] ) .",
    "this name resolution process is combined with a new naming scheme , which builds on the notion of _ ephemeral names _ ( section [ cc : en ] ) .",
    "_ name resolution is controlled by content providers _ based on a fully backward - compatible mechanism that supports in - network caching and the direct control of ephemeral names lifetime , thus facilitating content access logging and active purging of stale cached data .",
    "the proposed mechanism completes the full cycle of the name resolution process , delivering content names to clients , without imposing any requirement for additional mechanisms .    in - network caching , name - based routing and support for network - layer multicast are all integrated in the _ location - independent routing layer _",
    "( lira ) , an extra layer in the protocol stack placed at  level 3.5 \" of the protocol stack , above the ip and below the transport - layer ( section  [ cc : cl ] ) .",
    "lira  absorbs \" the location - independence nature of icn , leaving the network layer to operate based on ip addresses .",
    "resolution of content names does not rely on large volumes of fib table entries , and routing takes place based on a hybrid of ip addresses ( at the ip layer ) and location - independent transient content names ( at the lira layer ) ( section [ rsn - details ] ) .",
    "our design does not require blanket adoption in order to realise the benefits of icn . instead , isps",
    "can incrementally deploy lira nodes with little investment .",
    "furthermore , the fact that routing is ( in the worst case ) based on ip addresses guarantees full backward compatibility with the current internet architecture .",
    "our results show that even with a subset of nodes upgraded to support lira functionality , our design achieves considerable performance gains ( section [ eval ] ) .",
    "in order to deal with the scalability concerns raised above , we design a name resolution scheme which involves the content provider and does not require extra name - based resolution machinery ( _ e.g. , _",
    "@xcite , @xcite , @xcite , @xcite ) , or manually - set , bloated fib tables ( _ e.g. , _ @xcite , @xcite ) .",
    "in particular , any user will have to consult the cp ( or cdn ) and  ask \" for the name/`contentid ` before any content transfer can start ( see next section for details on the ` contentid ` ) .",
    "users reach the content provider based on the standard procedure of the current internet , that is , based on urls , dns resolution and ip addresses .",
    "this first part of the resolution ( _ i.e. , _ reaching the cp to get the ` contentid ` ) is based on ip addresses and is location - dependent .",
    "we note that users do not get the whole of the chunk from the cp ( but only the ` contentid ` ) , which can be served from any other cache in the network . in this way , we realise _ semi - transparent _ in - network content caching , which we argue is in the best interests of both cp / cdns and isps alike . as discussed later on in this section ,",
    "the second part of the name resolution , which also leads to the content transfer itself is location - independent , according to the philosophy of icn .",
    "summarising , the _  content provider - controlled name resolution procedure \" _ introduced here is fully backward compatible and does not require extra investment from isps , or cps / cdns .      to provide full content access control to cps ,",
    "we introduce the concept of _ ephemeral names _ , which are used for location - independent content delivery .",
    "our primary motivation behind the introduction of _ ephemeral names _ is to avoid dissemination of the name/`cid ` of a content to other users , as this could potentially lead to accessing the content from in - network caches , transparently to the cp / cdn .",
    "this section explains the structure , usage and design principles of these names .",
    "the lira architecture uses flat names composed of two parts ( see fig .",
    "[ ephemeral - names ] ) .",
    "the main part of the naming structure , the ` contentid ` , or ` cid ` reflects the name of the content itself and is based on the premise of _ ephemeral or transient names_. according to this concept , content providers choose arbitrary strings and assign them to the content they host .",
    "the names are flat , in the sense that they bear no structure related to routing ( _ e.g. , _ aggregation ) ; however , cps may impose structures related to the internal organisation of their content .",
    "ephemeral names should be unique to guarantee collision - free name resolution , which can be easily achieved with the use of arbitrary hashes .",
    "the names are self - certifying and  expire \" after some time interval .",
    "this transitioning interval should be coarser than the time needed to support in - network caching and multicast ( _ e.g. , _",
    "names should not change on a per - request basis ) - see section  [ transitioning - interval ] for details .",
    "@xmath0    the second part of the _ ephemeral name _",
    ", the ` serviceoptions ` , can be used to realise preferential treatment of content .",
    "although the use of this part of the name is not necessary in our architecture , and is not necessarily of ephemeral nature , we believe that it can help in the caching and scheduling process .",
    "for instance , the ` serviceoptions ` part can be used to flag content that should or should not be cached .",
    "we leave such investigations for future work .      in case of permanent names , search engines would operate based on names ( similarly to today s operation based on urls ) .",
    "this operation is clearly not in the best interests of cps / cdns given the _  pay per click \" _ models in use today and transparent in - network caches used in icn .",
    "transient names dis - incentivise search engines from disseminating ` cids ` , but at the same time allow for both access logging at the cp / cdn and transparent in - network caching .",
    "one might claim that search engines would prefer to provide the ` cid ` directly to users , as this would lead to faster content access ( _ i.e. , _ users would not need the extra rtt to travel to the cp / cdn to get the ` cid ` ) .",
    "however , given ( i ) the transient character of names , and ( ii ) the delivery of bundles of ` cid`s by cps ( see section  [ transitioning - interval ] ) , this would require search engines to devise mechanisms for retrieving and disseminating ` cid`s each time they change , only to save a single rtt in each bundle .",
    "this limits the incentives of search engines to provide ` cid`s without the consent of cps / cdns .",
    "moreover , and most importantly , ephemeral names allow cps / cdns to actively control the cached content served to their clients _",
    "e.g. , _ by changing the ` cid`s of content chunks existing cached copies get practically invalidated .",
    "this is an important feature of the proposed approach , which can not be supported in alternative proposals ( _ e.g. , _",
    "@xcite ) .",
    "the combination of the name resolution at the cp , together with the ephemeral nature of content names supports a number of desirable features .",
    "first and foremost , name resolution is under the control of the cp , enabling access logging .",
    "secondly , versioning of updated content and purging of old content from in - network caches is also under the control of the cp .",
    "although ttl - like techniques , such as the ccn staleness option , can support content updating , it is not easy to set such values given today s interactive applications . setting ttl values for individual content items ( _ e.g. , _",
    "@xcite ) would always face the tradeoff of short ttls resulting in unnecessary delivery from the content provider , while longer ttls would result in delivering outdated content .",
    "using ephemeral names , cached content can instead be actively invalidated when needed .    along the same lines ,",
    "the transitioning interval of ephemeral content names is an issue that requires further attention and is related , among others , to the popularity of the content as well as the size of content chunks .",
    "frequent change of the name can result in suboptimal performance , since each change purges the content in caches .",
    "we deal with this tradeoff by setting the transitioning interval of content names to a value inversely proportional to the popularity of the content itself .",
    "popularity is measured by the cp and can be based on the number of requests for the content in question , per some time interval . although more sophisticated settings can be found , with this simple setting for the transitioning interval we avoid changing the ` cid ` of rarely accessed content too frequently , and we also avoid leaving the ` cid ` of popular content the same for too long .",
    "finally , to alleviate the need to travel to the cp for every chunk request , we assume that upon each request for a content item , the cp sends back to the client the  up - to - date \" ephemeral names of the next few subsequent chunks , that is , not only the name of the immediately following one .",
    "the number of subsequent ` cid`s sent by the cp to the client is left for future investigation .",
    "adding extra functionality , or altering completely the operation of _ existing _ core network protocols can prove difficult to be done incrementally ( _ e.g. , _",
    "ipv6 ) and  flag - days \" are not an option for incorporating new components at a global scale . for these reasons ,",
    "we propose _ addition _ instead of _ replacement _ of an extra layer to the protocol stack , which we call _ location - independent routing layer _",
    "lira sits on top of the network ( ip ) layer and below the transport layer .",
    "it operates based on _ ephemeral names _ and integrates all the required functionality to realise _ location independence _ , taking advantage of _ information centricity _ and its well - known gains @xcite .",
    "although recent studies have proposed http as the layer that can integrate information or content centricity @xcite , here we argue that in order for in - network caching and multicast to be smoothly incorporated in the new ecosystem , any information - centric operation needs to be _ below the transport layer_. otherwise , the transport protocol can merely connect two specific endpoints cancelling any notion of location - independent content transfer . instead , breaking the end - to - end transmission model below the transport layer allows to leverage ( icn enabled ) in - network caching , both in terms of native multi - source routing and localised congestion control @xcite , going far beyond traditional ip multicast or anycast mechanisms .",
    "lira is implemented in just a small subset of nodes ( see section  [ lira - nodes ] ) , which can be transparently planted in the network , and it manages incoming and outgoing content based on their names .",
    "the main name management functionality is implemented in a routing table , which we call _ content forwarding information base _ ( c - fib ) ( section  [ rsn - table ] ) .",
    "a similar notion to the lira layer has been proposed in the past in @xcite , but in a totally different context , addressing the exhaustion of ipv4 addresses .",
    "the evolution of nat boxes ( together with the painfully slow incremental deployment of ipv6 ) has dealt with this problem and hence , the related efforts became obsolete .",
    "the content forwarding information base ( c - fib ) table keeps track of recently requested and served content ( in terms of ` cid`s ) and maintains forwarding information used for the delivery of those content items , providing also support for in - network caching and multicast . upon subsequent request(s ) for a content already in the c - fib table , lira is redirecting requests towards the direction where the content has been sent , or served from , similarly in principle to breadcrumbs routing @xcite .",
    "we note that _ the c - fib table essentially acts as a cache _ for ` cid`s served recently through this router ( somewhat similarly to @xcite and @xcite )",
    ". however , c - fib table entries are not permanent , as in ccn s fib , but rather are assisting in location - independent content delivery from neighbouring nodes ( see section  [ rsn - details ] for details on the c - fib structure ) .",
    "the typical structure of the c - fib table is illustrated in table  [ table : r1routing - table ] .",
    "the table maintains one entry per content chunk .",
    "the following information is maintained for each entry : _",
    "i ) _ ` cid ` , the content identifier of the chunk , _ ii ) _",
    "@xmath1 , the _ incoming interface _ _",
    "i.e. _ , the index of the interface from which the content is received , that is , the content source indicated by the dns , _ iii ) _",
    "@xmath2 , the _ outgoing interface _ _",
    "i.e. , _ the index(es ) of the interface(s ) towards which the content is currently being forwarded , _ iv ) _",
    "@xmath3 , the _ temporary interface _ , _",
    "i.e. , _ the index(es ) of the interface(s ) where the content has been forwarded , _",
    "@xmath4 , the _ multicast ip _ field that holds ip addresses of clients participating in a multicast session .",
    "note that interface entries in the c - fib table denote real interfaces ( _ i.e. , _ directions towards which requests / content should be forwarded ) and not ip addresses of sources / destinations ( apart from the multicast ip field ) . by doing",
    "so we realise the _ location independence _",
    "property of icn in lira .",
    "the lira node structure is the main component of the proposed architecture , which integrates information centricity .",
    "lira nodes implement the lira layer with its c - fib table discussed above in order to realise named content management and subsequently location independence .",
    "lira nodes also include caches that temporarily store named content chunks ( _ i.e. , _ in - network caching ) .",
    "although by default all lira nodes include both the c - fib table and content caches , we also evaluate ( in section  [ eval ] ) the case of  lighter \" lira nodes , where , based on node centrality metrics and to facilitate incremental deployment , some nodes implement the c - fib table and some others implement caches .",
    "our design does not require all nodes of a domain to become lira nodes and it is operational regardless of this .",
    "being always based on ip , nodes fall back to normal ip operation and route towards the direction indicated by location - based addresses .",
    "note that all routers maintain the default ip - based fib table . therefore , incompatibility issues or requirements for simultaneous shift to icn operation do not exist . as we show later on in the evaluation section , an average of 50% of nodes within a domain can provide considerable performance gain .",
    "careful network planning ( _ e.g. , _ depending on topological issues ) and incremental upgrade of normal routers to lira nodes gives a major advantage to the proposed architecture in terms of deployability compared to other icn architectures .",
    "we proceed with the description of the name resolution and content delivery process , illustrated in fig .  [",
    "fig : summary ] .",
    "we then give details of the entries of the _ content forwarding information base _ ( c - fib ) table during the content delivery process .",
    "for this purpose we use the network topology presented in fig .",
    "[ example ] .",
    "tables [ table : r1routing - table ] and [ table : r2routing - table ] are also used to present the entries of the c - fib table(s ) for a sequence of important events taking place in our example scenarios ( denoted with timestamp @xmath5 ) .",
    "the name resolution process is initiated through existing protocols ( _ i.e. , _ dns and http ) to guarantee backwards compatibility and facilitate adoption of icn .    as a first step ( fig .",
    "[ fig : summary ] ) and identically to what is happening today , users resolve urls through a request to the dns .",
    "the dns responds with the ip address of the content provider .",
    "the user generates an http head request @xcite at the application layer . at this stage , routing is location - dependent and is based on the ip address indicated by the dns . at the content layer , the request is asking for the ` cid ` .",
    "the cp sends back an http response packet containing the up - to - date name , _",
    "i.e. , _ ` cid ` , of the requested content in the etag field of the http response header @xcite .",
    "the destination ip address of that packet is that of the requesting client .",
    "this packet can be piggybacked with data to avoid an extra rtt between the client and the cp . in this case , however , given that requests are sent per chunk , we can not take advantage of in - network caching .",
    "this option can be considered in special cases ( _ e.g. , _ when a client is close to the cp and chances of finding the content cached are slim ) .",
    "the client issues a request for the first chunk of the content object ( _ e.g. , _ client a in the example of fig .",
    "[ example ] ) .",
    "the request includes the ip address of the cp at the ip layer and the ` cid ` of the chunk at the lira layer .    [ !",
    "t ]    [ ! t ]    l |*5c @xmath6 & @xmath7 & @xmath8 & @xmath9 & @xmath3 & @xmath4 + @xmath10 & @xmath11 & 1 & 3 & - & - + @xmath12 & @xmath11 & 1 & - & 3 & - + @xmath13 & @xmath11 & 1 & 2 & 3 & - + @xmath14 & @xmath11 & 1 & - & 2 , 3 & - + @xmath15 & @xmath16 & 1 & 3 & - & - + @xmath17 & @xmath16 & 1 & 2 , 3 & - & b s ip + @xmath18 & @xmath16 & 1 & - & 2 , 3 & - +    l |*5c @xmath19 & @xmath7 & @xmath8 & @xmath9 & @xmath3 & @xmath4 + @xmath20 & @xmath11 & 1 & 2 & - & - + @xmath21 & @xmath11 & 1 & - & 2 & - + @xmath22 & @xmath16 & 1 & 2 & - & - + @xmath18 & @xmath16 & 1 & - & 2 & - +    lira nodes along the path check the ` cid ` included in the request against the entries of their c - fib table .",
    "if an entry for the ` cid ` exists , then they forward according to this entry . if not , they forward according to the ip address .",
    "the ip address points to the cp , hence , content can always be resolved according to that in the worst case , _ e.g. , _ in case of lira - incompatible nodes or domains .    at this point , assuming the content is not locally cached ( see section  [ caching ] for details on in - network caching ) , the request is forwarded towards the cp .",
    "the index of the network interface used to forward the request is marked as the @xmath8 for this content chunk ( _ i.e. , _ interface 1 - see time @xmath10 in table  [ table : r1routing - table ] ) . at the same time , the index of network interface from which the request was received is marked as an output interface ( interface 3 in our example ) .",
    "the content chunk is then sent back from the cp ( or any other cache further down the path ) . during the data transfer",
    "no change is made in the c - fib table entries of intermediate lira nodes ( time @xmath10 ) .",
    "when the chunk transfer completes , which is denoted by an end of chunk ( eoc ) field , the intermediate lira nodes change their c - fib entries for this ` cid ` by marking the interfaces through which they forwarded the data ( _ i.e. , _",
    "@xmath2 ) as @xmath3 ( _ temporary interface _ ) - interface 3 is moved to @xmath3 at @xmath12 in table  [ table : r1routing - table ] .",
    "this is done since the content can possibly be delivered from there too ( _ i.e. , _ the content has possibly been cached towards this direction ) .",
    "when the client sees the eoc field / bit set , it forwards the next request towards the original cp ( similarly to the initial request - step above ) in order to obtain the ` cid ` of the next chunk .",
    "lira nodes by default support in - network caching . in the simplest case , on - path in - network",
    "caching is supported by simply performing a lookup of the ` cid ` of a request message , at the local cache index . in case",
    "the requested content chunk is cached locally , the corresponding data is returned through the network interface the request was received from ( @xmath9 ) . in our example scenario , client b issues a request for content @xmath11 . once the request for @xmath11 reaches @xmath19 , the c - fib table of @xmath19 is updated to include @xmath23 and @xmath24 ( @xmath20 in table [ table : r2routing - table ] ) . then , at time @xmath13 , the request for @xmath11 reaches @xmath6 .",
    "content chunk @xmath11 is found cached at @xmath6 whose interface 2 is marked as @xmath9 and the content is sent towards client b.    by introducing the @xmath3 field in the c - fib table we further realise off - path in - network caching @xcite , as well as user - assisted in - network caching @xcite , @xcite . when a content chuck is not found in the local cache",
    ", the lira node sends the received request towards both the ( permanent ) incoming interface @xmath8 ( as indicated by the name resolution process ) and the temporary interface(s ) @xmath3 . in our example , @xmath6 sends two requests for @xmath11 towards both the ( permanent ) @xmath8 1 and the @xmath3 3 ( @xmath13 in table  [ table : r1routing - table ] ) . whichever of the two interfaces ( 1 or 3 ) starts receiving the requested data first is marked as the incoming interface for this content and the remaining ( temporary ) interfaces are pruned down .",
    "pruning here can be realised through a negative ack ( nack ) packet which travels towards the source of the content .",
    "if @xmath8 answers first , the @xmath3 is removed from the corresponding c - fib table entry .",
    "alternative strategies can be applied here , by selectively forwarding a request to one or more of the available interfaces _",
    "e.g. , _ always forwarding only towards an off - path cache , since requests are always routable to the cp at the ip layer .    finally , at time @xmath14 when @xmath11 transfer completes ( from either the local , or a remote cache ) , interface 2 is added to the list of temporary incoming interfaces ( @xmath3 ) at @xmath6 , since @xmath11 can now be found this way too ( similarly to @xmath12 ) .",
    "the c - fib table of @xmath19 is also updated to include interface 2 as @xmath3 ( step @xmath21 ) .",
    "we note that in order to avoid routing loops in case no other device towards @xmath3 ( client a in our case ) has the content cached , we discard requests ( for items in the c - fib table ) that come in through its marked @xmath3 .",
    "this is done because any lira node towards the @xmath3 ( client a in this case ) will forward the request based on its ip address ( carried at the ip layer and always pointing towards the permanent content source , hence through @xmath25 in our example ) if it finds no entry in its c - fib table for the requested content . in turn ,",
    "upon receipt of the request , @xmath25 will send the request back towards the same direction ( towards client a here ) , since it still has got the related entry in its c - fib table .",
    "this will result in the request travelling back and forth creating an endless routing loop .",
    "multicast support is enabled through the use of the @xmath9 and @xmath4 fields of the c - fib table .",
    "as described above , during the chunk transfer , the network interface of the lira node where the incoming data is forwarded towards is marked in the @xmath9 field .",
    "this @xmath9 entry enables the lira node to suppress any subsequent request for the same content chunk by adding an extra outgoing interface to its c - fib .",
    "this is similar to the pit functionality in ccn @xcite .",
    "note that in all above steps the ip address ( at the ip layer ) of request packets has been pointing to the cp and of content chunks to the corresponding clients .",
    "however , in order to realise multicast transmission in this case ( _ i.e. , _ avoid sending a second request for the same chunk towards the same direction ) , the lira node that suppresses subsequent requests needs to keep the extra ip address of the clients that generated the requests .",
    "we deal with this situation through the  multicast ip \" ( @xmath4 ) field in the c - fib table .",
    "when data arrives at the branching lira node , it gets forwarded to all @xmath9 interfaces .",
    "the @xmath4 entries are used at the ip layer to allow for the delivery of the duplicated data to the requesting recipients .",
    "note however that multicast forks further down the path are handled locally . in our example , if an additional client c attaches to @xmath19 and requests for @xmath16 during the multicast session , its request will be suppressed by @xmath19 which will also store client c s ip address in the corresponding @xmath4 field .",
    "@xmath6 will not be aware of client c s existence and @xmath19 is responsible for duplicating data for this client .",
    "thus , the @xmath4 state load is distributed to the participating lira nodes avoiding the overloading of nodes closer to the root of the multicast tree .    in our example network ,",
    "client a issues a request for content @xmath16 . the c - fib table at @xmath6 marks @xmath26 and @xmath27 for ` cid ` @xmath16 ( step @xmath15 ) .",
    "before the transfer of @xmath16 towards a completes through @xmath6 client b issues a request for @xmath16 , which goes through @xmath19 and reaches @xmath6 .",
    "@xmath19 updates its c - fib table by putting @xmath26 and @xmath28 ( step @xmath22 ) .",
    "@xmath6 does not forward this request further ; instead it adds interface 2 to the @xmath9 field of @xmath16 and also stores the ip address of client b ( taken from the corresponding ip layer field ) in the @xmath4 field ( step @xmath17 ) .",
    "when @xmath16 arrives at @xmath6 ( step @xmath17 ) it is forwarded towards client a through @xmath27 , but it is also replicated and forwarded towards client b , through @xmath28 , using @xmath4 as the destination ip address .",
    "when the chunk @xmath16 transfer completes , router @xmath6 moves interfaces 2 and 3 and @xmath19 moves interface 2 to the @xmath3 field ( step @xmath18 - table  [ table : r1routing - table ] and  [ table : r2routing - table ] ) .",
    "+ note that the c - fib table introduced here , incorporates the functionality of both the pit and the fib tables of ccn .",
    "for as long as the chunk transfer goes on and hence , the @xmath9 field is filled ( and the @xmath3 field is empty - @xmath29 and @xmath17 in @xmath6 s c - fib , see table  [ table : r1routing - table ] ) , the c - fib table represents the pit table of ccn / ndn .",
    "that is , based on this state , lira nodes are able to collapse / suppress subsequent requests for content already requested ( or under transmission ) and realise multicast . when the chunk transfer completes and the entry in @xmath9 is moved to the @xmath3 field ( @xmath30 and @xmath18 in table  [ table : r1routing - table ] ) , then the c - fib table reflects the fib table of ccn / ndn . as mentioned above",
    ", however , the c - fib table acts as a cache for recently served content and hence , it does not need to keep huge amounts of state information in the fib part of the c - fib .",
    "we discuss and evaluate both parts of the c - fib table later in section  [ eval ] .",
    "it is generally not common to evaluate a network architecture merely in quantitative terms , given that the contribution of such studies comes mainly at a conceptual level . in our case ,",
    "the contribution of the lira architecture comes mainly in terms of incremental deployment with backward compatibility guarantees . at the same time , however , lira can achieve all the quantifiable benefits of an icn mode of operation .    to provide a thorough performance evaluation ,",
    "we analyse conceptual and qualitative gains in sec .",
    "[ qualitative - eval ] as well as quantitative gains in sec .",
    "[ quantitative - eval ] .",
    "the quantitative evaluation focuses on the deployment of the lira concept from the operators perspective .",
    "in particular , given a fixed monetary budget that the operator is prepared to spend in order to deploy lira , we assess the best strategies of investing the capital in terms of extra equipment , which in our case translates to cache memory and c - fib tables .",
    "we also demonstrate and quantify the benefits brought by lira to cps , with a particular focus on cache purging and the control over the freshness of the cached content .",
    "* name resolution : * by handing control of the name resolution process to cps , lira avoids the need for either the deployment of a costly name resolution infrastructure , or the investment on in - network resources for the support of line - speed name resolution .",
    "the operation of the c - fib as a cache for names/`cid`s is similar to @xcite .",
    "however , lira does not necessitate the use of an explicit off - path name resolution mechanism , as it rather falls back to ip , in a backward compatible manner .",
    "at the same time , by following a backwards compatible http - supported name resolution mechanism , lira presents a complete interface for the interaction of end - hosts with an information - centric network . to the best of our knowledge",
    ", no exact mechanism has been proposed for the discovery ( _ i.e. , _ not only resolution ) of content names in alternative icn architectural proposals .    * control of content access : * lira enables cps to directly monitor and control the access of end users to their content .",
    "route - by - name approaches such as @xcite fail to provide such support .",
    "cps would be reluctant to accept transparent access to their content , thus dis - incentivising the adoption of such an approach to icn by isps .",
    "lookup - by - name approaches , on the other hand , such as @xcite and @xcite , enable this type of control , by decoupling name resolution from forwarding .",
    "however , this comes at the cost of additional name resolution infrastructure and directly places the content access information in the hands of isps ; in turn , this introduces the burden of new ( business and technical ) interfaces between all cps and all isps at a global scale .",
    "* mobility : * although the issue of mobility in case of lira requires further investigation and at first sight it might seem that lira can not deal with mobility efficiently , due to its dependence on ip , we note the following : upon a content request , the cp or cdn is sending back to the client the ` cid`s of the next few chunks , _",
    "i.e. , _ not just the next one . that said , the clients operate based on ip - agnostic ` cid`s .",
    "therefore , client mobility can be natively supported , as clients request for content based on identifiers ( in combination to the ip address at the ip layer ) .",
    "source mobility , on the other hand , is an issue that requires further investigation as is the case with all icn architectural proposals .    *",
    "security : * by supporting self - certifying ` cids ` , lira secures the content itself rather than the communication channel , similarly to other icn architectures _",
    "e.g. , _ @xcite .",
    "* implementation : * the proposed lira functionalities can be deployed on nodes with only firmware updates without the need for hardware replacement or upgrade .",
    "in fact , by relying on ip forwarding as a fallback in case of c - fib misses , lira will never result in un - routable requests / content even if deployed on just a few nodes and with minimal memory .",
    "this is in stark contrast with previous icn proposals like ccn and ndn which require well - dimensioned fib and pit structures to operate correctly and at line speed .",
    "c - fib can be loaded in dram , which has been shown to be able to support line - speed per - packet lookups @xcite , @xcite , is inexpensive and abundant on modern routers based on either network processors or general purpose processors .",
    "it is in fact common to have at least a few gbs of spare dram on modern routers . since the binary code implementing lira functionalities is likely to require negligible space ,",
    "all available dram can be used for c - fib and caching space .",
    "c - fib entries in particular have very low memory requirements .",
    "in fact , even assuming that ( i ) the c - fib is implemented using a hash - table with a load factor of @xmath31 and with a circular queue for replacement and ( ii ) the unfavourable case that lira chunks are named using sha-512 hashes and next hops information are coded on 2b , it is still possible to store over 15 million c - fib entries per gb of dram .",
    "this makes c - fibs and more generally the lira node architecture easy to incrementally deploy on today s routers .      as mentioned earlier",
    ", the objective of this section is to evaluate the best possible way to invest in deploying the lira concept , from the operator s perspective .",
    "that said , we initially evaluate the main concepts of our proposal with regard to their projected gains in terms of cache hits .",
    "although lira is far from a caching - specific architecture , caching is : _",
    "i ) _ the only straightforward quantitatively measurable aspect of an icn architecture , and most importantly , _",
    "ii ) _ the main feature that requires investment from network operators . for these reasons and without by any means underestimating the gains from the above - mentioned qualitative benefits of the lira architecture , in this section , we focus on the evaluation of the main concepts included in lira as seen from an in - network caching perspective .",
    "we use icarus @xcite to evaluate the performance of various aspects of our proposed framework based on real isp topologies from the rocketfuel dataset @xcite and synthetic workloads @xcite . due to space limitations , we omit evaluation of the multicast functionality offered by lira , since the related performance benefit is straightforward",
    ". moreover , we only show results for the telstra and abovenet topologies , though we report that we obtain similar results with other topologies as well .",
    "we make the code , documentation and data required to reproduce our results publicly available .",
    "lira nodes can have a content cache or a c - fib table , or both . given a fixed total cache and c - fib capacity budget , in this section",
    ", we identify the best possible combination of cache and c - fib deployment along two dimensions : i ) deployment strategies and ii ) caching strategies .",
    "we attempt to capture the interaction dynamics between nodes that cache content and nodes that can route to this content , in a location - independent manner , _",
    "i.e. , _ through c - fib table entries .",
    "_ our first objective is to investigate the effectiveness of c - fib table entries in mapping the content cached in neighbour nodes .",
    "our second objective is to see how c - fib table entries eventually translate to cache hits . _",
    "modelling the performance of a network of caches is known to be complex @xcite , @xcite . as a result , it is extremely difficult to formulate optimal cache placement algorithms which are also robust to realistic traffic variations . arguably , the complexity of the optimal cache placement problem is another obstacle hindering icn deployments .",
    "therefore , motivated by practical reasons , we propose four simple content cache and c - fib placement algorithms and show that they are sufficient to provide tangible performance gains even with partial deployments . to deploy caches and c - fibs , we rank nodes according to their betweenness centrality ( _ i.e. , _ the amount of traffic traversing them following shortest path routing @xcite ) and deploy lira functionality using the following strategies : + _ ( i ) _ cache in top 50% high centrality nodes , c - fib table in all nodes : @xmath32 . + _",
    "( ii ) _ cache in top 50% high centrality nodes , c - fib table in top 50% high centrality nodes : @xmath33 . + _",
    "( iii ) _ cache in all nodes , c - fib table in all nodes : @xmath34 . + _",
    "( iv ) _ cache in all nodes , c - fib table in top 50% high centrality nodes : @xmath35 .",
    "we run simulations and measure the mean _ c - fib freshness _ , which we define as the ratio of entries stored in c - fib tables which can correctly route to a copy of a content stored in a nearby cache .",
    "this metric captures how well the entries of the c - fib tables deployed in the network reflect the current state of nearby caches .",
    "we further characterise the correct c - fib entries by the hop distance to the lira node that caches the corresponding content .",
    "note that in all cases , and regardless of the deployment strategy , the ratio of c - fib table to cache entries is fixed ( see next subsection for the evaluation of this ratio ) .",
    "as a result , c - fib tables in fewer nodes ( than those that deploy caches ) keep more entries to match the number of cache slots ( and vice versa ) .",
    "we also analyse the results under different caching strategies : _ leave copy everywhere _",
    "( lce ) , according to which a copy of a content is stored in every cache traversed and _ random choice _ , according to which a content is stored only in one randomly selected caching node along the delivery path .",
    "the rationale behind our choice is to evaluate deployment and caching performance under varying _ caching redundancy _ @xcite .",
    "our results are shown in figs .",
    "[ c - fib - freshness ] and [ deployment - strategies ] . +",
    "* c - fib efficiency .",
    "* first of all , it is important to highlight the fact that the c - fib table entries depict precisely the state of neighbour caches .",
    "this is proved by the fact that the _ freshness ratio _ in fig .",
    "[ c - fib - freshness ] directly translates to off - path cache gain in fig .",
    "[ deployment - strategies ] : for instance , the freshness result in case of @xmath32 in fig .",
    "[ freshness-1221 ] indicates that 5% of entries in the c - fib table can correctly route to the content in neighbour caches . in turn , in fig .",
    "[ cachehits-1221 ] , the gain from off - path caching ( red , top part of bar ) is 4.5% .",
    "this is an important result that highlights the effectiveness of the c - fib table in keeping an accurate record of the state of nearby caches ( _ i.e. , _ up to 3 hops away in our evaluation ) . +",
    "* deployment strategy . * in terms of c - fib freshness , deploying smaller caches over more / all nodes , _",
    "@xmath36 , seems to be more effective in capturing the state of caches from the c - fib tables ( _ i.e. , _ higher freshness in fig .",
    "[ c - fib - freshness ] ) .",
    "this is explained by the fact that the  monitoring and mapping \" mechanism provided by the c - fib table has got a wider view of the neighbourhood and can therefore , find more content items locally .",
    "this also translates to more off - path cache hits in fig .",
    "[ deployment - strategies ] for @xmath36 .    out of the four deployment strategies under consideration here ,",
    "@xmath33 and @xmath32 consistently perform best in terms of cache hits ( in fig .  [ deployment - strategies ] ) .",
    "this is irrespective of the freshness result , which shows that freshness improves when caches are deployed over all nodes ( _ i.e. , _",
    "@xmath36 ) . in other words , it is better to have fewer but bigger caches placed in high centrality nodes ( as also shown in @xcite ) , rather than having smaller caches deployed in all nodes of the network . + * caching strategy . * as expected , in terms of cache hits , _",
    "_ always performs best , for all topologies and for all deployment strategies , as a result of its reduced caching redundancy .",
    "similar results have been reported before in @xcite .",
    "lce on the other hand , performs roughly the same across all deployment strategies .",
    "note that the lce result in fig .",
    "[ deployment - strategies ] effectively reveals the performance of the ccn / ndn architecture . due to space limitations",
    ", we do not present a full - fledged comparison between the architectures , but fig .",
    "[ deployment - strategies ] reveals very well the cache - related performance of ccn / ndn .",
    "we next quantify the performance benefit of off - path , c - fib - routed , caching for various values of the c - fib - to - cache size ratio ( expressed in number of entries ) and for the @xmath32 strategy ( fig .",
    "[ hits - vs - c - fib ] ) .",
    "considering the overall cache hit ratio ( both on- and off - path ) , we see a considerable increase when moving from a ratio value of 0.25 to a ratio value of 16 , due to c - fib routing redirections .",
    "the results are similar for a ratio equal to 32 , but the gain in this case is marginal .",
    "therefore , given that larger memory is required in order to deploy c - fib tables 32 times bigger than the entries in the respective caches , we conclude that a value of 16 is optimal .",
    "although in absolute values , off - path , c - fib - based , caching contributes less than on - path caching , the gain is still far from negligible ( _ i.e. , _ it can reach up to 50% in fig .",
    "[ hits - vs - c - fib ] ) .",
    "we report that in our simulations , the gain from off - path caching can reach 100% , effectively doubling the gain from on - path caching .",
    "finally , it is interesting to note the slight decrease of on - path cache hit ratio as the c - fib - to - cache size ratio increases .",
    "this is attributed to cases where a content request encounters a c - fib table entry and gets diverted to an off - path cache , before it actually hits an existing on - path cache . in this case , and given that the c - fib table entry is found earlier in the path , we report that the delay to deliver the content back to the user is even shorter than finding the requested item in an on - path cache .",
    "this is especially so in case of lce caching , where due to increased caching redundancy , a copy of a content has good chances of being found along the shortest path .",
    "one of the departing points in the design of the lira architecture is the direct control of content by the cps / cdns , as discussed earlier .",
    "we identify two main features that give direct control of the content to the cp or cdn .",
    "the first one is the control of access logging . in lira",
    "this is accomplished by the content provider - controlled name resolution , where clients need to get the up - to - date ` cid ` from the content provider .",
    "this requires an extra rtt to get to the cp or cdn .",
    "we remind that according to our discussion in section  [ transitioning - interval ] , cps / cdns send more than one ` cid ` to the client , therefore , the journey to the cp / cdn happens rarely during the data transfer , or even only once in case of small files ( _ e.g. , _ web ) .",
    "we assume this extra rtt to incur only a tiny performance penalty compared to alternative proposals that do not necessarily require this extra roundtrip .",
    "the second feature that provides control of published content to cps is the ability to actively perform cache purging . as described in section  [ cc : en ] , when cps change the ` cid ` of a content item , previously cached items no longer get hits from new requests and eventually get evicted ( denoted as _",
    "lira w / o replacement _ ) .",
    "taking a step further , we consider an extended version of this mechanism , where data packets explicitly indicate the ` cid ` values of the content items that should be immediately evicted from encountered caches ( denoted as _",
    "lira w/ replacement _ ) .",
    "figure  [ fig : purging - cache - hit - ratio ] shows the cache hit ratio of the above mechanisms along with that of a simple ttl - based mechanism , where any cache hit returns the content to the client , even if this content is stale ( _ ttl - based ( all hits ) _ ) for various ttl values . in fig .",
    "[ fig : purging - cache - hit - ratio ] , we see that the cache hit ratio in the ( _ ttl - based ( all hits ) _ ) case increases with the value of ttl , since content remains longer in the cache .",
    "however , this also means that the corresponding cache hits result in the reception of stale content .",
    "[ fig : purging - cache - hit - ratio ] also shows the cache hit ratio for fresh only content ( _ ttl - based ( fresh only ) _ ) , which initially increases , but then steadily drops as a result of high ttl values that increase stale cached content .",
    "the _ lira w/ replacement _ mechanism performs considerably better than _ lira w / o replacement _ , as it immediately frees the caching space from unnecessary stale content , and better than its _ ttl - based ( fresh only ) _ counterpart .",
    "it must be noted that the _ ttl - based ( fresh only ) _ ratio is only provided as a benchmark , as ttl - based mechanisms can not avoid serving stale content . on the other hand",
    ", lira provides a precise mechanism to avoid serving stale cached content altogether .",
    "we proceed to evaluate the last of the design targets behind lira , that of incremental deployability . to assess the performance gain of incrementally deploying the lira architecture , we begin by progressively adding c - fib tables starting from the highest centrality nodes .",
    "we evaluate the performance in terms of cache hits in case of caches deployed in 25% , 50% , 75% and 100% of the nodes , starting from the highest centrality ones .",
    "we observe in fig .",
    "[ fig : incremental - deployment ] that performance stabilises with the c - fib table present in 20 - 30% of the nodes .",
    "c - fib in less than 20% results in suboptimal performance , but performance does not increase considerably if we continue adding c - fib to more nodes . in terms of caches , a 25% deployment rate results in poor performance , while the performance does not improve considerably when caches are deployed in more than 50% of nodes . the difference in performance between the 50% and 100% of nodes is in the area of 1% improvement in terms of cache hit ratio for the two topologies shown here ( telstra and abovenet ) .",
    "we conclude that adding c - fib to the top 20 - 30% highest centrality nodes and caches to 50%-75% of highest centrality nodes achieves the full performance gain of the lira architecture .",
    "although here we present results for telstra and abovenet topologies , our results are consistent along all six evaluated topologies of the rocketfuel dataset .",
    "there is a constant trend towards extra  flexibility \" in communication networks , which started with the shift from ( rigid ) circuit - switching to ( queuing - based ) packet - switching @xcite .",
    "we see location - independent , information - centric networking as the natural next step towards _  content switching\"_. to move towards this direction , however , the research community needs to take into account the interests of the main internet market players , as well as those of users .",
    "we argue that icn research so far has focused on designing conceptually sound and scalable name - based routing architectures , but largely ignored any incentives ( provided through those architectures ) to adopt the icn technology .",
    "the interests of content providers and cdns are largely different to those of isps and the shift to an icn environment environment makes this difference even more pronounced .",
    "that said , unless a shift to an icn environment takes into account the interests of both cps / cdns and isps , the incentives to adopt this technology will be limited .    in this paper",
    "we have taken these concerns into consideration and have designed an incrementally - deployable icn architecture .",
    "the proposed architecture is based on the location - independent routing layer ( lira ) and directly involves the content provider in the name resolution process .",
    "furthermore , ephemeral names give more power to the cps / cdns over the content they publish .",
    "our evaluation shows that even with a limited number of nodes implementing the lira architecture , isps achieve a clear performance gain , while at the same time cps / cdns have full control of their content .",
    "this work was supported by epsrc uk ( comit project ) grant no .",
    "ep / k019589/1 and eu fp7/nict ( greenicn project ) grant no . ( eu ) 608518/(nict)167 .",
    "the research leading to these results was funded by the eu - japan initiative under european commission fp7 grant agreement no .",
    "608518 and nict contract no .",
    "167 ( the greenicn project ) and by the uk engineering and physical sciences research council ( epsrc ) under grant no .",
    "ep / k019589/1 ( comit ) .",
    "m.  dehghan , a.  seetharam , b.  jiang , t.  he , t.  salonidis , j.  kurose , d.  towsley , and r.  sitaraman . on the complexity of optimal routing and content caching in heterogeneous networks . in _",
    "infocom , 2015 proceedings ieee _ , april 2015 ."
  ],
  "abstract_text": [
    "<S> we identify the obstacles hindering the deployment of information centric networking ( icn ) and the shift from the current ip architecture . </S>",
    "<S> in particular , we argue that scalability of name resolution and the lack of control of content access from content providers are two important barriers that keep icn away from deployment . </S>",
    "<S> we design solutions to incentivise icn deployment and present a new network architecture that incorporates an extra layer in the protocol stack ( the _ location independent routing layer _ , lira ) to integrate location - independent content delivery . according to our design </S>",
    "<S> , content names need not ( and should not ) be _ permanent _ , but rather should be _ ephemeral_. resolution of non - permanent names requires the involvement of content providers , enabling desirable features such as request logging and cache purging , while avoiding the need for the deployment of a new name resolution infrastructure . </S>",
    "<S> our results show that with half of the network s nodes operating under the lira framework , we can get the full gain of the icn mode of operation .    </S>",
    "<S> = 10000 = 10000    [ distributed networks ] </S>"
  ]
}