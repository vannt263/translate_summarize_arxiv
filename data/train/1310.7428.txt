{
  "article_text": [
    "the success of nearly all internet projects nowadays highly depends on how much value can they provide for the user requiring as less efforts as possible .",
    "recommender systems are one of the approaches used to increase `` value for effort '' rate . by analyzing user activity in the past a good recommender selects items which are most relevant to the current user s needs increasing user satisfaction , loyalty and the revenue of the project . due to the high demand for the recommender systems in the industry",
    ", there is a very large field of research works in this area .",
    "the most commonly used recommenders are _ collaborative _",
    "@xcite  they analyze users behavior in the past and mine correlations between items and users . however , there is also a growing interest in the _ content based _",
    "@xcite and _ social _  @xcite recommendation algorithms , in order to address limitation of the collaborative algorithms caused by the data sparsity and the `` cold - start problem '' .",
    "it is now clear that none of these approaches is perfect and the best would be to combine benefits from all three worlds .    this paper proposes a composite approach for the recommender systems inspired by the _ random walk with restart _ recommender from  @xcite .",
    "all data mined from the history of users activity , content metadata and social network are combined in a _ taste graph_. vertices of the graph represent different entities : users , tracks , artists , music genres , users interests , etc .",
    "edges of the graph represent relations between entities : a user likes a track , an artist is similar with another artist , an interest correlates with a track and so on .",
    "all edges are weighted according to the certainty of the relation and all weights are normalized in order to produce a _",
    "stochastic system_.    the taste graph can be used to solve different kind of recommendation related task . in  @xcite authors",
    "propose to apply random walk with restart model in order to predict ratings for a user .",
    "starting from the vertex representing the user process traverse the graph randomly preferring edges with higher weight and adding an additional _ restart probability _",
    "@xmath6 ( usually rather high ) of restarting process from the initial vertex .",
    "_ steady state probability _ distribution of this process shows the strength of relation between the user and an item , which in many cases correlates with the probability that the user would like this item .",
    "however , this graph representation can be used in many other ways : given a set of items estimate their relevance for a user , identify groups of highly coupled items , extend a set of items with similar items ( considering also user s preferences to them ) .",
    "taste graph based algorithms described in the paper are applied for the music service of `` ok '' ( ` www.ok.ru ` )  a general purpose social network started in 2006 with a goal to help people to find former classmates . nowadays",
    "ok is the second largest social network in the cis used mainly for fun and communication with rich media services ( video , music , video chats and mail , etc . ) .",
    "daily audience of the network is more than 40 millions users mainly from the russian federation , eastern europe and middle asia .",
    "the paper is structured as follows .",
    "we start with the formal definition and the structure of the taste graph in section  [ sec : graph ] .",
    "section  [ sec : algorithms ] describes basic algorithms on the graph and section  [ sec : improvements ] addresses additional improvements made to provide better user experience .",
    "the impact of the recommender features on the service is analyzed in section  [ sec : impact ] and final conclusions are made in section  [ sec : conclusion ] .",
    "in order to combine all the information mined from the system , including collaborative correlations , content information and social data a stochastic graph structure is used .",
    "then this graph is analyzed by different algorithms in order to construct recommendations and personalize output .",
    "formally , the taste graph is an oriented weighted labeled graph capturing all the information mined from the system .",
    "formally taste graph @xmath7 can be defined as a tuple @xmath8 where    * @xmath9 is a finite non - empty set of _ vertices _ , @xmath10 is a finite non - empty set of vertex types and @xmath11 is a mapping function matching each vertex to its type .",
    "* @xmath12 is a _",
    "zero balancing vertex _ used to compensate impact of vertexes with small amount of outgoing edges .",
    "* @xmath13 is a finite non - empty set of _ edges _ , @xmath14 is a finite non - empty set of edge types and @xmath15 is a mapping function matching each edge to its type .",
    "* @xmath16 is a function matching each edge to its start vertex and end vertex .",
    "edges leading to @xmath17 are _ zero balancing edges_. * @xmath18 $ ] is a weight function matching each edge to its weight .",
    "a set of outgoing edges of a type @xmath19 from a vertex @xmath20 is defined as @xmath21 .",
    "taste graph @xmath7 must satisfy following condition :    @xmath22    graph satisfying equation  [ eq : limited_stochastic ] is called _",
    "partly stochastic_. in order to get a fully stochastic graph balancing function @xmath23 $ ] is used .",
    "balancing function must satisfy following condition :    @xmath24    given balancing function @xmath25 it is possible to define a _ balanced weight function _",
    "@xmath26 $ ] as @xmath27 .",
    "it is clear that under weight function @xmath28 graph @xmath7 is a stochastic graph :    @xmath29    first of all the role of introduced non - standard constructs should be explained .",
    "split of vertices and edges to different types and partial stochastic allows different parts of the taste graph to be constructed independently and then combined .",
    "for example , artists similarity ( edges of type `` artist @xmath0 is similar to artist @xmath1 with certainty @xmath2 '' ) is constructed by a collaborative matching algorithm , while artists tracks list ( edges of type `` artist @xmath0 created track @xmath1 with weight @xmath2 '' ) is constructed by an aggregate function from the overall track ratings .",
    "furthermore , different parts of the graph can be updated at a different frequency , depending on the complexity of the update and the natural dynamics of the part .",
    "balancing function @xmath25 is used to manage impact of different factors on the overall result .",
    "for example , by increasing the weight of user  artist links we increase the impact of content - based recommendations , while increasing the user  track or user  user links would increase collaborative or social recommendations impact .",
    "zero balancing vertex @xmath17 plays an interesting role . in the taste",
    "graph the number of outgoing edges might vary from vertex to vertex .",
    "for example track @xmath0 might have @xmath30 similar tracks identified , while track @xmath1 only @xmath31 .",
    "smaller number of outgoing edges typically indicates the lack of statistics and low certainty of the list , but absolute weights on the edges from @xmath1 would be greater than on the edges from @xmath0 increasing its impact on the recommendations . in order to compensate this impact",
    "the zero balancing vertex is used .",
    "this vertex does not match any of the objects and has only a self - loop outgoing edge , but each time when the amount of outgoing edges of type @xmath32 for vertex @xmath33 is below limit , an edge from @xmath33 to @xmath17 added to `` drain '' weights from the existing edges .",
    "the weight of the zero balancing edge is defined in a way that it approximates the sum of weights of missing edges . for collaborative similarity",
    "this weight is typically approximated by a _ linear decay _ , while for overall popularity _ exponential decay _",
    "is used .    as of now the taste graph for musical recommendations",
    "consists of the following parts :    users preferences , : :    encoding the relations between users and the items they like ( tracks    and artists ) .",
    "artists similarity , : :    based on the collaborative correlations between artists in the music    catalog .",
    "tracks similarity , : :    capturing the collaborative and temporal correlations between tracks    in the music catalog .",
    "artists tracks , : :    representing a set of tracks produced by an artist weighted by overall    popularity .",
    "users preferences is the most dynamic component of the graph  it is updated each time preferences are requested .",
    "preferences , in turn , are composed from different parts . all the history of user playbacks is recorded into a data warehouse and aggregated at a daily basis .",
    "furthermore , there is a running window of the 1000 last played tracks with the time stamps in a real - time storage which is also considered .",
    "in addition to the playbacks history there is a real - time storage of the users custom play lists to consider .",
    "the artists similarity is created by an analysis of playbacks history .",
    "analysis is done in multiple steps : first of all from a set of all artist s tracks representative tracks are selected , then playbacks for these tracks are aggregated in order to get user  artist matrix . using a simple correlation measure artist ",
    "artist matrix is constructed and then more precise correlation measure is applied iteratively to artist  artist matrix to refine it .",
    "finally , outliers filtration algorithms are applied to the matrix and for each artist the top similars are selected .    for the tracks similarity matrix for each pair of tracks @xmath0 and @xmath1 an amount of playbacks from the same user in the scope of limited time window is counted . than the baselines",
    "are applied in order to address tracks popularity and results are normalized . in the end",
    "outliers filtration is applied and the top similars are selected .",
    "the artists works are selected from the music catalog meta data which keeps mapping from track to its main artist and overall rating of the tracks in the system is used as a weighting function .",
    "track ratings are analyzed in dynamics in order to put tracks with higher interest recently above others , even if they have lower overall rating .",
    "additional boost is applied for fast growing tracks introduced recently .",
    "based on the data of the taste graph algorithms for solving most of the standard recommender tasks can be constructed .",
    "this task can be formulated as follows : `` given a user @xmath34 select a set of items @xmath35 such that the user would most probably like '' . in  @xcite a random walk with restart model is proposed for this task .",
    "the main idea of the algorithm is to model a process of random graph traversing starting from the user s node with the probability @xmath6 to restart at each step .",
    "the state of the process is represented by a vector @xmath36^v$ ] capturing for each vertex @xmath20 the probability of being in this vertex .",
    "given the current state @xmath37 next state @xmath38 is calculated as follows :    @xmath39    where @xmath40 is the initial vertex corresponding to the user , @xmath41^v$ ] is a vector with a single @xmath42 for the vertex @xmath34 and @xmath43 for all other nodes , and @xmath44 is a vector calculated as follows : @xmath45    given initial vertex @xmath34 random walk recommender finds a fixed point @xmath46 of the operation @xmath47 also known as the _ steady - state probability distribution_. items with higher steady - state probability are most likely to be relevant for the user , thus selecting top @xmath48 items from the vector should be a good choice of recommendations .",
    "one of the problems with rwr approach is that the items from the initial user s preferences get higher probability comparing to non - rated items and it makes recommendation useless if not addressed ( the user would see only items he already knows well ) . in order to address this the computation",
    "is split in two stages : calculating next state without applying restart @xmath49 and then restarting @xmath50 . in the end of the process state vector _ before _",
    "restart is used as a result .",
    "additionally , extra suppression can be applied to the already known items ( up to their full exclusion ) .",
    "another common goal for a recommender is to select most relevant items for user @xmath34 from a set of items @xmath35 ( which could be , for example , a response of a search engine or the set of top tracks ) . with the taste graph",
    "this could be done by traversing the graph from user preferences vector in a limited number of steps counting all the visits of the vertices from target vector .",
    "the vertices with higher number of more probable visits are considered as more relevant for the user .",
    "formally , having the initial state vector @xmath51 , the target vector @xmath52 and the weight vector @xmath53 the relevance of the items in @xmath52 according to @xmath54 is calculated as follows :    @xmath55    where @xmath56 for @xmath57 and @xmath58 denotes projection of the vector @xmath59 on the non - zero components of the vector @xmath52 .",
    "weights @xmath60 and @xmath61 play a special role in this scheme : @xmath60 is used to weight the intersection of target and source is estimated and @xmath61 represents the impact of original weights in the target vector .      in order to help users to find music they like with less efforts it is worth introducing a feature `` extend list '' .",
    "the list could be a user s custom play list , any play list the user is browsing now , or even a single - item list with a song the user is listening now or an artist the user is looking at .    the same random walk technique described at  [ subsec : rwr ] can be used to identify items similar to the given initial list and personalization technique described at  [ subsec : personalization ] can be used to tune results using user s preferences . for a too small or a too unvaried list",
    "the input can be enriched by appending other items from the user s preferences which are highly coupled with the initial list .",
    "the same personalization technique or a more advanced tuning technique ( described at  [ subsec : tuning ] ) can be used to identify those items .",
    "section  [ sec : algorithms ] provides a good foundation for a recommender system , however several improvements are required in order to achieve good results in practice .",
    "the most important ones are described in this section .",
    "most works on the recommender algorithms are ended by ranking items for a user , however in the music radio case it is not enough .",
    "each time user opens the radio he would like to get a new sequence which is    relevant , : :    all items have high predicted rating .",
    "coherent , : :    items are well listened together ( have high similarity level ) .",
    "diverse , : :    songs from many different artists are included .",
    "novel , : :    includes tracks and artists user has not listened to and is unlikely    to find them by himself .    returning a head with the top rated items",
    "provides user with relevant sequence ( assuming recommender has a reasonable performance ) . introducing gaussian noise or picking random items from the weighted list looks like a solution , but actually none of these provides desirable quality .",
    "a better approach could be to use _ random pick with rejection_. items are picked randomly from the weighted list and each selected item is challenged by a probabilistic rejection algorithm , which depends on multiple factors .    given a vector of predicted preferences @xmath36^v$ ] constructed by the algorithm described at  [ subsec : rwr ] and a _ strict ordering _ of the graph nodes @xmath62 it is possible to construct vector @xmath63^v$ ] such that @xmath64 = x[v ] + \\sum_{v ' \\in v , v ' \\succ v}{x[v']}$ ] . using vector @xmath65 random",
    "pick can be implemented using a uniformly distributed over @xmath66 $ ] random variable @xmath67 and picking the closest upper bound from the @xmath65 with binary search .",
    "when item @xmath33 is picked , it is challenged by a family of _ rejection factors _",
    "@xmath68\\}_{1}^{n_{rf}}$ ] , where each factor @xmath69 given an item to check and a sequence of already selected items defines the probability of the item to be kept .",
    "the overall probability for the item @xmath33 of being added to the sequence @xmath70 is @xmath71 and the item is added to the sequence if the next value of @xmath67 is less than @xmath72 .    among the rejection factors",
    "the most important is the _ previous presence _ of the item and other items from the same artist .",
    "presence of item itself can be covered by a simple `` yes or no '' factor prohibiting repeated inclusion of the item either for the entire sequence or in the tail of last @xmath48 items in the sequence .",
    "presence of other works from the item s artist can be considered in two dimensions : the overall presence and the distance from the previous entry .",
    "the overall presence is modeled as an exponentially descending factor @xmath73 where @xmath74 $ ] is the descend speed and @xmath75 is a function returning amount of items created by the artist of @xmath33 in the sequence @xmath76 .",
    "the previous entry factor is modeled as inversed exponential descend @xmath77 where @xmath78 is the speed of descend and @xmath79 is the first position of the work from the artist of @xmath33 in the tail of @xmath76 .",
    "while previous presence rejection factors increase diversity and novelty of the recommended sequence , coupling with nearest predecessors factors increase coherence of the sequence .",
    "the main idea here is to estimate the weight of the paths between item @xmath33 and its nearest predecessors in the sequence using the taste graph which could be done by using the personalization technique described at  [ subsec : personalization ] .",
    "after the first experiments with music recommendations it was recognized that a single user might have preferences of very different kinds and these preferences , if considered as a whole , produce relevant , but useless recommendations . in order to provide value for the user , recommended music must address current context",
    "the user is in now ( working , having a dinner or playing with his kids ) .",
    "the problem of context awareness is explored in  @xcite and two techniques were adopted to generate contextual recommendations :    contextual pre - filtering : :    of the user preferences  only items matching current context are    selected for expansion .",
    "contextual post - filtering : :    of the generated recommendations  items having to weak linkage with    the context are removed from the result .",
    "the filtering is done by analyzing all paths of length @xmath48 starting from the _ context set _ and ending in the vertices of _ filtered set_. the analysis is done in the same way as described in  [ subsec : personalization ] .",
    "three measures are collected : count of the paths , sum of weights on the all paths and the weight of the best path .",
    "vertices reached high enough limit for at least one of the measures are selected as the input for recommendations generation ( when doing pre - filtering ) or randomization algorithm ( when doing post - filtering ) .",
    "the key factor for efficient contextualization is a selection of the proper context set .",
    "the selection is done by the user himself , but he is provided with a bundle of automatically generated context sets to select from .",
    "each set contains items from the user s preferences which are worth listening together , thus being used as a context set they produce coherent recommendations . _",
    "user preference clustering _ is done behind the scene to create user specific context sets .    using the taste",
    "graph a set of clustering algorithms based on the identification of _ connected components _ was implemented .",
    "the simplest approach is _ weight bound _ clustering . in this case",
    "given the weight limit @xmath80 and a vector of user s preferences @xmath81^v$ ] _ user preferences graph _",
    "@xmath82 is constructed such that @xmath83 > 0\\ } , \\\\",
    "e_u & = & \\{(v , v ' ) \\in v_u \\times v_u \\mid v ' \\in nbr_{\\tau}(v ) \\},\\ \\label{eq : weightboundclustering}\\end{aligned}\\ ] ] where @xmath84 \\geq \\tau \\}$ ] is the set of direct neighbors of @xmath33 . linked components @xmath85 of the graph @xmath86 are used as the preferences clusters .",
    "better results can be achieved by using _",
    "commons bound _ clustering . in this case",
    "two limits are defined : weight limit @xmath80 and common count limit @xmath87 , and the edges of graph @xmath86 are constructed as follows : @xmath88 where @xmath89 is the amount of common neighbors for @xmath33 and @xmath90",
    ". this approach decreases influence of bridges in the taste graph producing more coherent components .",
    "however , none of the approaches can handle the diversity of the users preferences with single settings  as long as user listens to more and more items , more and more bridges rise in his preferences causing them all to merge in a single component . in order to handle preferences of different size well",
    "hierarchical clustering were applied .",
    "clustering algorithm with relaxed limits produces initial separation and clusters above the size limits are passed to a more tightly configured algorithm .",
    "initially the system was lunched with a chain of 7 clustering algorithms based on common bounds clustering and the users feedback revealed two important problems :    low coverage : :    due to too many items being separated into a single - item clusters .",
    "high dynamics : :    caused by a fast growth of the clusters causing them to be passed to a    more tight clustering algorithm .    which is more important , user s favorite items tend to cut off into a small cluster more often since they usually have a more diverse neighborhood sets . and the same is true for user s favorite context sets which grow fast . in order to reduce the speed of the process a relative limit was imposed for the selection of items ( only items with the rating above @xmath91 of the average rating are considered when clustering ) and _ fallback clustering _ ( passing the set of rejected items to the same clustering algorithm ) was used .",
    "these techniques increased the coverage and stability , but results still were unsatisfactory .    in order to solve the problem a more high - order similarity measure based on _ common neighborhood subgraph density _",
    "@xcite and a new clustering algorithm based on _ affinity propagation _",
    "@xcite were applied .",
    "having a set of user s preferences @xmath92 we define the similarity function @xmath93 such that @xmath94 intuitively this similarity measure counts edges in the taste graph with both ends belonging to the @xmath33 and @xmath90 common neighborhood .",
    "the self - similarity of an item @xmath95 in this case is not less than similarity with any other item , which causes affinity propagation to create a lot of small clusters . to avoid that , the self - similarity is multiplied by a discount factor",
    "@xmath96 $ ] .    affinity propagation clustering  @xcite is a relatively new clustering technique based on the simulation of message passing between vertices . for each pair of nodes @xmath97",
    "_ responsibility _ @xmath98 and _ availability _ @xmath98 are defined .",
    "responsibility , @xmath99 , is a message from @xmath100 to @xmath101 that reflects the accumulated evidence for how well - suited @xmath101 is to serve as the _ exemplar _ for @xmath100 .",
    "availability @xmath102 is a message from @xmath101 to @xmath100 that reflects the accumulated evidence for how appropriate it would be for @xmath100 to choose @xmath101 as its exemplar .",
    "initially all availabilities and responsibilities are set to @xmath43 and then updated using the following schema :    @xmath103    where @xmath104 and @xmath6 are propagating responsibility and availability respectively and @xmath105 is the damping factor .",
    "having responsibilities and availabilities calculated exemplars for vertices are selected as : @xmath106 algorithm is repeated until convergence of @xmath107 and @xmath67 or , which is more often in practice , until stabilization of @xmath108 for several iterations ( _ convince limit _ ) .",
    "vertices selected as a candidates for themselves ( @xmath109 ) are considered as the centers of the clusters and a cluster @xmath110 for center @xmath100 is extracted as follows : @xmath111    comparing to the linked component extraction affinity propagation is more computationally intensive , but it produces more stable and relevant results .",
    "furthermore , similarity measure based on the common neighborhood density is more computationally intensive by itself then the common neighbors count and the direct link weight . in order to reduce computations and still support on - line context",
    "set generation similarity values are calculated once and cached in memory .",
    "further improvement can be achieved using pruning technique described at  @xcite to remove edges which do not influence the result from the search .",
    "affinity propagation technique handles well users with large history and genres with high coherence ( classical music , child songs , rock ) , however for users with small preferences belonging mainly to vague genre ( russian rap is the worse ) it tends to produce too small clusters . in order to compensate this effect user preferences are enriched ( see  [ subsec : coldstart ] for details ) and small clusters are relinked to keep the high coverage level .",
    "cold - start problem can be seen from two perspectives :    new user : :    joins the system without enough information to provide him with    reliable recommendations .",
    "new item : :    added without known reliable links with other items , while it might be    the most interesting item for the users due to its novelty .    in both cases there are not enough collaborative information related to the user and the item to make conclusion , however , there are content - based and system - wide information which can be used",
    ".    when a new user joins the system it is important to provide him with some recommendations  showing a message like `` find something yourself and get back later '' is not a good idea ( in most cases user wo nt get back ) . to support new users",
    "demographical information is used .",
    "all users are split into segments depending on their age , sex and region .",
    "behavior of the users in the scope of a demography group is analyzed in order to create a _",
    "demography profile_. when a user has no own preferences , best matching demography profile is used instead .",
    "even if user already has some preferences , but not that much , then his own preferences are mixed with demography profile .",
    "when new item is added to the system it becomes the most interesting candidate for being recommended .",
    "however , due to the lack of statistics it has only a few links with other items and low overall rating , thus it is unlikely to be recommended . handling of new items includes two stages :    identify : :    interesting new items ( not every new item is really interesting ) .",
    "boost : :    identified items in the recommendations and the top list for relevant    users .    even for a brand new item",
    "there is some activity in the system which can be used to estimate its relevance , but this activity could be way below activity around well known old hits . in order to make relevant new items more visible",
    ", only items recently added to the system are considered and activity around them are compared to the time they spent in the system . for item @xmath20 relevance @xmath112 can be estimated as follows : @xmath113 where @xmath114 is the amount of distinct users listened the item ( or added the item to a playlist ) , @xmath115 is the date when item had been added and @xmath116 is the _ time impact factor_. items with @xmath112 above novelty limit are considered novel and boosted in the recommendations .    when using random walk technique for recommendation generation , items with the highest sum of weight on the incoming edges has ( in general ) higher probability of being recommended .",
    "old items usually have many links between each other , but not with new items .",
    "the only reliable link in the graph leading to the new item is the artist ",
    "track link and in order to boost item in the recommendations the weight of this link is set to a very high level comparing to other links from this artist .",
    "furthermore , the overall system wide rating of the item is also boosted in order to consider it while creating a personalized content of the main page for the users ( see  [ subsec : personalization ] ) .",
    "this technique works well for boosting new tracks made by a well - known artists ( according to the author personal experience new tracks becomes visible in 24 hours after their introduction to the system ) , but it does not handle case when a new potentially interesting artist is added . in order to support this case more high level properties ( for example genre ) needs to be analyzed",
    ". however , introduction of more high level concepts in the graph can decrease relevance of the recommendations ( musical genres can be very vague ) .",
    "evaluating a recommender system is not a trivial process by itself ( see  @xcite for details ) .",
    "one of the most common approaches to evaluation is the offline analysis based on the historical data .",
    "information about user behavior is split into training and test set , recommender is configured using training set only and then its predictions compared with the observed ratings in the test set .",
    "this approach is simple and cheap , however it has an inherent drawback  recommender proposing items user probably knows always get higher score then the recommender proposing relevant items user not likely knows and ca nt find them himself .",
    "an alternative to offline analysis is an online experiment either on a selected subgroup of the users , or on all of them .",
    "online experiments can be very informative , but they require significant time , can lead to a negative impact on the real users and their results can be influences by many other factors not controlled ( and some times even not known ) by the experimenter . despite of the all difficulties related to the online experiments , they are considered as the best approach for impact analysis and there is a rich and flexible back - end for statistics collection and analysis implemented in order to support them .",
    "personalization of the main page ( the list of 100 songs user sees after entering the music area ) was the first significant feature based on the recommender launched at 2012 - 11 - 16 .",
    "figure  [ fig : graphs ] shows user activity trends during the 6 months passed after the launch .",
    "three main indicators are collected :    1 .",
    "amount of playbacks from the main page comparing to playbacks from `` my music '' .",
    "2 .   amount of `` likes '' from the main page comparing to playbacks from `` my music '' .",
    "3 .   amount of playback from the main page comparing to the amount of clicks at the main page .",
    "`` my music '' is the list of the user s favorite tracks , it is the most popular list in the system and is used as the measure of overall level of activity . in this perspective the first indicator shows how relevant is the content at the main page for the users , the second indicator shows how novel is it and the third shows how confident the users are ( how often they have to control playbacks manually ) .",
    "there are nine periods identified corresponding to the changes in the personalization algorithm :    1 .",
    "main page contains top tracks based on the all users activity in the system for last 30 days .",
    "personalization enabled selecting top 100 tracks for a user among 1000 top tracks in the system .",
    "size of the underlying list increased to 1500 .",
    "4 .   enabled suppression of the known items ( @xmath60 set to negative value ) .",
    "5 .   changed the underlying list preparation algorithm .",
    "track known by a user removed from the main page",
    "full removal disables , gaussian noise introduced into personalization .",
    "strength of the known tracks suppression decreased , underlying list size increased to 3000 .",
    "use of demography data enabled for the new users .",
    "according to the first two charts at the figure  [ fig : graphs ] personalized main page performs two - three times better then the non - personalized variant . during initial experiments ( stages 2 - 5 ) each time settings of the personalization were adjusted the user activity at the main page increased ( users seen new content there ) , but a downward trend emerged after few days ( users got used to what they see ) .",
    "stage 6 showed that the strong filtering of known content increases novelty ( amount of likes increased ) , but relevance and the users interest decreased ( playbacks dropped ) .",
    "replacement of the strong filtering with a lighter suppression ( known content still might appear , but with a decreased weight ) and introduction of the gaussian noise at the stage 7 changed trend for likes to upward and for playbacks to sideways . increasing the underlying list size and using demographical data we achieved upwards trends in both areas .",
    "the third chart at the figure  [ fig : graphs ] shows the evolution of the users confidence in the content of the main page . for lists users",
    "are confident in they tend to turn playback on with a click and listen , but for the lists with low confidence they tend to control playbacks thoroughly ( producing more clicks ) . with",
    "the personalization enabled the users confidence increased slowly and without downward trend .",
    "attempts to increase novelty ( at stages 6 and 7 ) increased the amount of clicks , but it is more an indication of the increased curiosity then of the decreased confidence .",
    "the confidence chart also reveals weekly trend  at weekends users tend to produce more clicks .",
    "recommender systems and personalization are a crucial tool for nearly all kind of web sites . for ` www.ok.ru ` introduction of personalization for the content of the main page in the music area has increased user activity there threefold .",
    "furthermore , it created a driver for the entire service .",
    "this is a good example of the fact that the common recommender s use case `` recommend a sequence '' is not the only interesting case .",
    "thus , modern industrial recommender must be flexible enough to address different tasks ( recommend a sequence , extend a list , personalize a list , etc . )",
    "based on the common foundation .    on the others hand",
    ", it is clear that in order to provide high quality recommendations there is a need to consider the information of the different kinds : collaborative correlations , content information , context , demography , etc .",
    "orchestrating multiple recommenders can address this challenge , but at the cost of increased computation complexity ( architectural and deployment complexity increases to ) .",
    "thus , again , there is a need for a common foundation capable of incorporating data of different kind .",
    "taste graph described in this paper has many of the desired properties : it can include data of different kind in a single model with online balancing , different kind of algorithms for many tasks can be implemented , computational complexity can be made reasonable for online computations and immediate reaction to the changes in the user behavior .",
    "the results achieved at ` www.ok.ru ` are very promising in terms of both increased user activity and the recommender s non - functional properties ( computational efficiency , scalability and flexibility ) .",
    "demographical adjustments .",
    ": :    some collaborative correlations included in the graph are enforced by    the data only from certain demography group and might be irrelevant    for others .",
    "user personal adjustment .",
    ": :    even if a correlation is system wide , it still might be irrelevant for    a certain user .",
    "integration of other collaborative data .",
    ": :    so far collaborative data in the graph are neighborhood based , but    introduction of svd factors , svm classes , etc .",
    "might increase    performance . cluster analysis .",
    ": :    clustering technique use for the context sets generation being applied    for the larger sets is also a promising approach for filtering and    enriching graph .",
    "y.  fujiwara , g.  irie , and t.  kitahara .",
    "fast algorithm for affinity propagation . in _ proceedings of the twenty - second international joint conference on artificial intelligence - volume volume three _ , ijcai11 , pages 22382243 .",
    "aaai press , 2011 .",
    "i.  konstas , v.  stathopoulos , and j.  m. jose .",
    "on social networks and collaborative recommendation . in _ proceedings of the 32nd international acm sigir conference on research and development in information retrieval _",
    ", sigir 09 , pages 195202 , new york , ny , usa , july 2009 ."
  ],
  "abstract_text": [
    "<S> this paper presents a set of algorithms used for music recommendations and personalization in a general purpose social network ` www.ok.ru ` , the second largest social network in the cis visited by more then 40 millions users per day . </S>",
    "<S> in addition to classical recommendation features like `` recommend a sequence '' and `` find similar items '' the paper describes novel algorithms for construction of context aware recommendations , personalization of the service , handling of the cold - start problem , and more . all algorithms described in the paper </S>",
    "<S> are working on - line and are able to detect and address changes in the user s behavior and needs in the real time .    </S>",
    "<S> the core component of the algorithms is a _ taste graph _ containing information about different entities ( users , tracks , artists , etc . ) and relations between them ( for example , user @xmath0 likes song @xmath1 with certainty @xmath2 , track @xmath1 created by artist @xmath3 , artist @xmath3 is similar to artist @xmath4 with certainty @xmath5 and so on ) . using the graph it is possible to select tracks a user would most probably like , to arrange them in a way that they match each other well , to estimate which items from a fixed list are most relevant for the user , and more .    </S>",
    "<S> in addition , the paper describes the approach used to estimate algorithms efficiency and analyze the impact of different recommendation related features on the users behavior and overall activity at the service . </S>"
  ]
}