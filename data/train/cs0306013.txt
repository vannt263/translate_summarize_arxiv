{
  "article_text": [
    "the java data object ( jdo )  @xcite,@xcite,@xcite,@xcite standard has been created to satisfy several requirements on the object persistence in java :    * * object model independence on persistency * : * * java types are automatically mapped to native storage types . * * 3rd party objects can be persistified ( even when their source is not available ) . * * the source of the persistent class is the same as the source of the transient class .",
    "no additional code is needed to make a class persistent . * * all classes can be made persistent ( if it has a sense ) . *",
    "* illusion of in - memory access to data * : * * dirty instances ( i.e. objects which have been changed after they have been read ) are implicitly updated in the database . * * catching , synchronization , retrieval and lazy loading are done automatically . * * all objects , referenced from a persistent object , are automatically persistent ( _ persistence by reachability _ ) . *",
    "* portability across technologies * : * * a wide range of storage technologies ( relational databases , object - oriented databases , files ,  ) can be transparently used . * * all jdo implementations are exchangeable . *",
    "* portability across platforms * is automatically available in java . * * no need for a different language * ( ddl , sql ,  ) to handle persistency ( incl .",
    "queries ) . *",
    "* interoperability with application servers * ( ejb  @xcite ,  ) .      the java data objects standard ( java community process open standard jsr-12 )  @xcite has been created to satisfy the requirements listed in the previous paragraph .",
    "the persistence capability is added to a class by the enhancer ( as shown in figure  [ enhancement ] ) :    * enhancer makes a transient class persistencecapable by adding it all data and methods needed to provide the persistence functionality . after enhancement , the class implements persistencecapable interface ( as shown in figure  [ persistencecapable ] ) .",
    "* enhancer is generally applied to a class - file , but it can be also part of a compiler or a loader . * enhancing effects",
    "can be modified via persistence descriptor ( xml file ) . *",
    "all enhancers are compatible .",
    "classes enhanced with one jdo implementation will work automatically with all other implementations .",
    "the main object , a user interacts with , is the persistencemanager .",
    "it mediates all interactions with the database , it manages instances lifecycle and it serves as a factory for transactions , queries and extents ( as described in figure  [ persistencemanager ] ) .",
    "after about a year since the jdo standardization , there are already many implementations available supporting all existing storage technologies .",
    "following commercial implementations of jdo standard exist :    enjin(versant ) , fastobjects(poet ) , frontiersuit(objectfrontier ) , intellibo ( signsoft ) , jdogenie(hemisphere ) , jrelay(object industries ) , kodo(solarmetric ) , lido(libelis ) , openfusion(prism ) , orient(orient ) , pe : j(hywy ) , ",
    "these implementation often have a free community license available .",
    "there are already several open jdo implementations available :    * * jdori *  @xcite ( sun ) is the reference and standard implementation .",
    "it currently only works with the fostore files .",
    "support for a relational database via jdbc implementation is under development .",
    "it is the most standard , but not the most performant implementation . * * tjdo *  @xcite ( sourceforge ) is a high quality implementation originally written by the treeactive company , later put on the gpl license .",
    "it supports all important relational databases .",
    "it supports an automatic creation of the database schema .",
    "it implements full jdo standard . *",
    "* xorm *  @xcite ( sourceforge ) does not yet support full jdo standard .",
    "it does not automatically generate a database schema , on the other hand , it allows a reuse of existing schemas . * * jorm *  @xcite ( jonas / objectweb ) has a fully functional object - relational mapping , the full jdo implementation is under development . *",
    "* ojb *  @xcite ( apache ) has a mature object - relational engine .",
    "full jdo interface is not yet provided .",
    "all widely used databases are already supported either by their provider or by a third party :    * * rdbs and odbs * : oracle , ms sql server , db2 , pointbase , cloudscape , ms access , jdbc / odbc bridge , sybase , interbase , instantdb , informix , sapdb , postgress , mysql , hypersonic sql , versant ,  * * files * : xml , fostore , flat , c - isam ,     the performance of jdo implementations is determined by the native performance of a database .",
    "jdo itself introduces a very small overhead .",
    "a simple application using jdo to write and read data is shown in listing  [ trivial ] .",
    "@xmath0 + @xmath1 + @xmath2 +   + @xmath3 + @xmath4 + @xmath5 + @xmath6 + @xmath7 + @xmath5 + @xmath8 +   + @xmath9 + @xmath10 + @xmath4 + @xmath11 + @xmath12 + @xmath13 + @xmath14 + @xmath5 + @xmath8 +      indicium  @xcite has been created to satisfy the lcg  @xcite pool  @xcite requirements on the metadata management : `` to define , accumulate , search , filter and manage attributes ( metadata ) external / additional to existing ( event ) data . ''",
    "those metadata are a generalization of the traditional paw ntuple concept .",
    "they are used in the first phase of the analysis process to make a pre - selection of event for further processing .",
    "they should be efficient .",
    "they are apparently closely related to collections ( of events ) .",
    "the indicium package provides an implementation of the attributeset ( event metadata , tags ) for the lcg / pool project in java and c++ ( with the same api ) .",
    "the core of indicium is implemented in java .",
    "all expressed requirements can only be well satisfied by the system which allows in principle any object to act as an attributeset .",
    "such system can be easily built when we realize that mentioned requirements are satisfied by jdo :    * * attributeset * is simply any object with a reference to another ( event ) object . * * explicit collection * is just any standard java collection . * * implicit collection * ( i.e. all objects of some type t within a database ) is directly the jdo extent .",
    "indicium works with any jdo / db implementation .",
    "as all the requirements are directly satisfied by the jdo itself , the indicium only implements a simple wrapper and a code for database management ( database creation , opening ,  ) . that is in fact the only database - specific code .",
    "it is easy to switch between various jdo / db implementations via a simple properties file .",
    "the default indicium implementation contains configuration for jdori with fostore file format and tjdo with cloudscape or mysql databases , others are simple to add .",
    "the data stored by indicium are accessible also via native database protocols ( like jdbc or sql ) and tools using them .",
    "as it has been already mentioned , indicium provides just a simple convenience layer on top of jdo trying to capture standard attributeset usage patterns .",
    "there are four ways how attributeset can be defined :    * * assembled * attributeset is fully constructed at run - time in a way similar to classical paw ntuples . *",
    "* generated * attributeset class is generated from a simple xml specification .",
    "* * implementing * attributeset can be written by hand to implement the standard attributeset interface . *",
    "* freestyle * attributeset can be just about any class .",
    "it can be managed by the indicium infrastructure , only some convenience functionality may be lost .    to satisfy also the requirements of c++ users ,",
    "the c++ interface of indicium has been created in the form of jace  @xcite proxies .",
    "this way , c++ users can directly use indicium java classes from a c++ program .",
    "cindicium architecture is shown in figure  [ attributeset ] , an example of its use is shown in listing  [ cindicium ] .",
    "@xmath15 + @xmath16 + @xmath17 + @xmath18 +   + @xmath19 + @xmath20 +   + @xmath21 + @xmath22 +   + @xmath23 + @xmath24 + @xmath25 + @xmath26 + @xmath27 + @xmath28 + @xmath29 + @xmath30 + @xmath31 +   + @xmath32 + @xmath33 + @xmath34 + @xmath35 + @xmath36.tostring ( )",
    "< < std::endl;$ ] +      jdo has been used to provide a basic persistency service for the freehep  @xcite reference implementation of aida  @xcite .",
    "three kinds of extension to the existing implementation have been required :    * implementation of the istore interface as aidajdostore . * creation of the xml description for each aida class ( for example see listing  [ aida ] ) . * several small changes to exiting classes , like creation of wrappers around arrays of primitive types , etc .    [ cols= \" < \" , ]     minerva has also simple but powerful modular graphical user interface which allows to plug in easily other components as the beanshell  @xcite command - line interface , the jas  @xcite histogramming , the objectbrowser  @xcite , etc .",
    "figure  [ gui ] and figure  [ objectbrowser ] show examples of running minerva with various interactive plugins loaded .",
    "it is often necessary to change object shape while keeping its content and identity .",
    "this functionality is especially needed in the persistency domain to satisfy _ schema evolution _ ( versioning ) or _ object mapping _",
    "( db projection ) , i.e. retrieving an object of type a dressed as an object of another type b. this functionality is not addressed by jdo . in practice",
    ", it is handled either on the lower lever ( in a database ) or on the higher level ( in the overall framework , for example ejb ) .",
    "it is , however , possible to implement an object evolution for jdo with the help of dynamic proxies and aspects .",
    "let s suppose that a user wants to read an object of a type a ( of an interface ia ) dressed as an object of another interface ib . to enable that , four components should co - operate ( as shown in fig  [ evolution ] ) :    * jdo enhancer enhances class a so it is persistencecapable and it is managed by jdo persistencemanager .",
    "* aspectj  @xcite adds read - callback with the mapping a @xmath37 ib .",
    "this is called automatically when jdo reads an object a. * a simple database of mappers provides a suitable mapping between a and ib .",
    "* dynamicproxy delivers the content of the object a with the interfaces ib : + @xmath38 .",
    "all those manipulations are of course hidden from the end user .",
    "hep data are often stored in sets of independent databases , each one managed independently .",
    "this architectures do not directly support references between objects from different databases ( while references inside one database are managed directly by the jdo support for persistence by reachability ) . as in the case of the object evolution ,",
    "foreign references are usually resolved either on the lower level ( i.e. all databases are managed by one storage manager and jdo operates on top ) or on the higher level ( for example by the ejb framework ) .",
    "another possibility is to use a similar architecture as in the case of object evolution with dynamic proxy delivering foreign objects .",
    "let s suppose , that a user reads an object a , which contains a reference to another object b , which is actually stored in a different database ( and thus managed by a different persistencemanager ) .",
    "the database with the object a does nt in fact in this case contain an object b , but a dynamicproxy object .",
    "the object b can be transparently retrieved using three co - operating components ( as shown on fig  [ references ] ) :    * when reference from an object a to an object b is requested , jdo delivers dynamicproxy instead .",
    "* the dynamicproxy asks persistencemanagerfactory for a persistencemanager which handles the object b. it then uses that persistencemanager to get the object b and casts itself into it .",
    "* persistencemanagerfactory gives this information by interrogating dbcatalog ( possibly a grid service ) .",
    "all those manipulations are of course hidden from the end user .",
    "it has been shown that jdo standard provides suitable foundation of the persistence service for hep applications ."
  ],
  "abstract_text": [
    "<S> flexible and performant persistency service is a necessary component of any hep software framework . </S>",
    "<S> the building of a modular , non - intrusive and performant persistency component have been shown to be very difficult task . in the past , it was very often necessary to sacrifice modularity to achieve acceptable performance . </S>",
    "<S> this resulted in the strong dependency of the overall frameworks on their persistency subsystems .    </S>",
    "<S> recent development in software technology has made possible to build a persistency service which can be transparently used from other frameworks . </S>",
    "<S> such service does nt force a strong architectural constraints on the overall framework architecture , while satisfying high performance requirements . </S>",
    "<S> java data object standard ( jdo ) has been already implemented for almost all major databases . </S>",
    "<S> it provides truly transparent persistency for any java object ( both internal and external ) . </S>",
    "<S> objects in other languages can be handled via transparent proxies . </S>",
    "<S> being only a thin layer on top of a used database , jdo does nt introduce any significant performance degradation . also aspect - oriented programming ( aop ) </S>",
    "<S> makes possible to treat persistency as an orthogonal aspect of the application framework , without polluting it with persistence - specific concepts .    </S>",
    "<S> all these techniques have been developed primarily ( or only ) for the java environment . </S>",
    "<S> it is , however , possible to interface them transparently to frameworks built in other languages , like for example c++ .    </S>",
    "<S> fully functional prototypes of flexible and non - intrusive persistency modules have been build for several other packages , as for example freehep aida and lcg pool attributeset ( package indicium ) . </S>"
  ]
}