{
  "article_text": [
    "rdf stream , as a new type of dataset , can model real - time and continuous information in a wide range of applications , e.g. environmental monitoring , smart city and so on .",
    "but data stream is unbounded sequences of time - varying data element and difficult to store .",
    "what is more , there is a few rsp@xcite ( rdf stream processing ) systems , such as c - sparql@xcite and ep - sparql@xcite implemented for supporting rdf stream due to its complicacy in processing . on the other hand , there are many popular and efficient srarql query engines supporting only static rdf graphs , such as the centralized engines , jena@xcite , rdf-3x and gstore , and distributed systems , triad , gstored@xcite and so on . how to employ those srarql query engines to evaluate continuous queries becomes an interesting problem .",
    "in this paper , we provide a plugin - based framework for rdf stream processing named prsp , which makes it possible to use the high - performance rdf engines that s valid only for rdf graphs , to process rdf streams .",
    "moreover , within this framework , we can employ any rdf query engine to process rdf streams in a convenient way and compare their performance under a unified framework namely prsp . and",
    "users can choose the favourable systems based on their all kinds of requirements .",
    "for example , they have the need to handle large - scale rdf graphs , thus distributed engines are the best choice .",
    "* rdf stream * an rdf stream is defined as ordered sequences of pairs , each pair being made of an rdf triple and a timestamp @xmath0 : @xmath1    * c - sparql query * the continuous query is divided into three parts : @xmath2 , @xmath3 , @xmath4 , and it is formally defined as follows : @xmath5 $ ]    @xmath2 indicates the registered query from users which is waiting to be addressed .",
    "@xmath3 is the rdf stream registered by the rsp systems , which defines the window size and step size .",
    "@xmath4 is a standard rdf query language , i.e. , sparql .",
    "[ prop : sound ] let @xmath6 be a c - sparql query . for any rdf stream @xmath7 and any present time @xmath8 ,",
    "the following holds : @xmath9    proposition [ prop : sound ] ensures that the evaluation problem of c - sparql queries over rdf streams can be equivalent to the evaluation problem of sparql queries over rdf graphs .",
    "moreover , proposition [ prop : sound ] can show that the evaluation problem of c - sparql has the same computational complexity as sparql @xcite .",
    "consider the following query , a simple example from c - sparql .",
    "line 1 matching the @xmath10 , tells the rsp system to register the continuous query of _",
    "testquery_. @xmath3 , that is the following list of line 3 , indicates that _ streams _ with a sliding window of 5 seconds that slides every 5 seconds , is the stream data waiting to be processed . and",
    "@xmath11 , displayed in both line 2 and line 4 , is the query language for rdf .",
    "prsp is an extension of sparql for querying both rdf graphs and rdf streams shown in figure[fig : architecture ] .",
    "both continuous query and rdf streams as the input of prsp are transformed by the plugin query rewriting and data transformer in prsp , respectively .",
    "after that , the output from the former plugins as the input of sparql api , the results are produced by one of sparql engines .     +    and the right box consists of any sparql query engine which is used as a black box for evaluating rdf graphs .",
    "its architecture contains three types of plugin : data transformer , query rewriting , and a sparql api connecting with the former two plugins .",
    "[ [ query - rewriting ] ] query rewriting + + + + + + + + + + + + + + +    continuous queries as the input of query rewriting mode , apply transformation methods in order to generate two types of queries , namely , sparql query and window operator , which can be addressed in one of sparql engine and data transformer module , respectively .",
    "after rewritting @xmath6 , we can obtain @xmath4 .",
    "[ [ data - transformer ] ] data transformer + + + + + + + + + + + + + + + +    the data transformer module manages rdf streams specified in the query via esper or another dsms . and it transforms rdf streams into rdf graphs based on the window size and step size set by window operator .",
    "after tranforming @xmath7 w.r.t .",
    "@xmath8 , we can obtain @xmath12 .    [ [ sparql - api ] ] sparql api + + + + + + + + + +    prsp defines a unified interface for rdf engines , which makes it possible and easy for sparql engines to process rdf streams . in the current version of prsp ,",
    "we have extended prsp by including a few centralized engines , such as jena , gstore , and rdf-3x , and two distributed engines , i.e. , gstored and triad .",
    "[ [ experiments ] ] experiments + + + + + + + + + + +    all centralized experiments were carried out on a machine running linux , which has 4 cpus with 6 cores and 64 gb memory , and 5 machines with the same performance for distributed experiments . for evaluation , we utilized yabench rsp benchmark@xcite , which uses a real world dataset about water temperature . in our experiments",
    ", we performed sliding windows with a window size and a step size of 5 seconds , respectively . considering that some engines can not support complex queries , the experiments used two bgp queries , @xmath13 and @xmath14 .",
    "@xmath13 is a bgp query with four forms(@xmath13 ) from yabench , and @xmath14 is the rewriting of @xmath13 with three triples . since rdf-3x did not work when the the amount of stream data to 42.000 triples ( i.e.,@xmath15 ) , we chose five load scenario ( i.e. , @xmath16 @xmath17 ) .    [",
    "[ evaluations ] ] evaluations + + + + + + + + + + +    the performance of each engine under the five different input loads for windows is shown in fig .",
    "[ fig : querytime ] .",
    "when the load ranges from @xmath18 to @xmath15 , the query response time is with varying degrees of increase except for gstored .",
    "[ fig : lt_rt_et ] shows the time of three processes , including data load time ( @xmath19 ) , query response time(@xmath20 ) , and engine execution time ( @xmath21 ) under @xmath22 obtained from query @xmath14 .",
    "@xmath19 from rdf3x , gstore , and gstored occupies a large part of @xmath21 , resulting in their lower efficiency for processing rdf streams .",
    "table [ tab : p / c ] illustrates the results of precision and recall from the experiments under three load scenarios ( i.e. , @xmath23 ) in prsp . along with more input load for windows , most of them enjoy lower recalls with high accuracy .",
    "& s=100 & 99% & 93% & 100% & 100% & 97% + & s=300 & 97% & 94% & 100% & 100% & 93% + & s=500 & 85% & 88% & 100% & 100% & 100% +    & s=100 & 95% & 89% & 75% & 72% & 95% + & s=300 & 94% & 91% & 88% & 76% & 92% + & s=500 & 92% & 79% & 77% & 63% & 91% +",
    "in this paper , we present prsp , as a plugin adaptable for sparql engines , to process rdf streams , which makes it feasible to employ various engines to process large - scale rdf streams . in the future",
    ", we will optimize prsp further to improve its performance and correctness .",
    "this work is supported by the national key research and development program of china ( 2016yfb1000603 ) and the national natural science foundation of china ( 61672377 ) ."
  ],
  "abstract_text": [
    "<S> in this paper , we propose a plugin - based framework for rdf stream processing named prsp . within this framework </S>",
    "<S> , we can employ sparql query engines to process c - sparql queries with maintaining the high performance of those engines in a simple way . </S>",
    "<S> taking advantage of prsp , we can process large - scale rdf streams in a distributed context via distributed sparql engines . besides , we can evaluate the performance and correctness of existing sparql query engines in handling rdf streams in a united way , which amends the evaluation of them ranging from static rdf ( i.e. , rdf graph ) to dynamic rdf ( i.e. , rdf stream ) . finally , within prsp , we experimently evaluate the correctness and the performance on yabench . </S>",
    "<S> the experiments show that prsp can still maintain the high performance of those engines in rdf stream processing although there are some slight differences among them .    </S>",
    "<S> < ccs2012 > < concept > < concept_id>10002951.10002952.10003190.10003192</concept_id > < concept_desc > information systems  database query processing</concept_desc > < concept_significance>500</concept_significance > </S>",
    "<S> < /concept > < concept > < concept_id>10002951.10002952.10003197.10010825</concept_id > < concept_desc > information systems  query languages for non - relational engines</concept_desc > < concept_significance>500</concept_significance > < /concept > </S>",
    "<S> < /ccs2012 > </S>"
  ]
}