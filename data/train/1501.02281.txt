{
  "article_text": [
    "this interdisciplinary work tailors and whets some state - of - the - art operations research methods to find solutions in a fundamental class of problems in design of experiments .",
    "our exact algorithms call the margot ( 2007 ) integer linear programming ( ilp ) solver for enumerating orthogonal arrays ( oas ) or finding optimum oas .",
    "we make comparisons to the efficient constraint programming ( cp ) with isomorphism rejection oa enumeration algorithm of schoen , eendebak and nguyen ( 2010 ) and exploit equivalence of orthogonal designs ( ods ) to speed up our exact algorithms .",
    "a factorial design @xmath4 with @xmath5 runs and @xmath6 factors each having @xmath7-levels is an orthogonal array of strength @xmath8 , @xmath9 , denoted by @xmath10 , if each of the @xmath11 level combinations appears exactly @xmath12 times when @xmath4 is projected onto any @xmath8 factors . clearly , an @xmath10 is also an oa@xmath13 for @xmath14 .",
    "the index @xmath15 of an @xmath10 is defined as @xmath12 .",
    "an @xmath10 is universally optimal for estimating the model containing all main effects and all interactions having @xmath16 factors or less ; see cheng ( 1980 ) and mukerjee ( 1982 ) .",
    "when @xmath7 is a prime power , regular fractional factorial designs ( also known as linear codes ) , constructed by solving a linear system of equations over the field gf(@xmath7 ) , are examples of oas .",
    "since a regular fractional factorial design is the solution set of a linear system of equations over gf@xmath17 , the number of runs it contains must be a power of @xmath7 .",
    "such a restriction does not apply to all oas .",
    "there is a vast literature on the construction and existence of regular fractional factorial designs ( see hedayat , sloane and stufken ( 1999 ) ) , but not as much is known about all oas .",
    "the design obtained by permuting factors or runs as well as levels in a subset of factors in an @xmath10 is also an @xmath10 .",
    "let such operations be called _",
    "isomorphism operations_. two @xmath10 are called _ isomorphic _ if one can be obtained from the other by applying a sequence of isomorphism operations . assuming the hierarchical ordering principle ( see section 3.5 of wu and hamada , 2000 ) , two @xmath10 are compared under model uncertainty using the _ generalized minimum aberration _ ( gma ) criterion developed in xu and wu ( 2001 ) .",
    "let @xmath18 $ ] be a @xmath19-level design with entries @xmath20 having @xmath5 runs and @xmath6 factors , and @xmath21 be a nonempty subset of @xmath22 factors .",
    "the gma criterion is based on the concept of the @xmath23-characteristics @xmath24 introduced by tang and deng ( 1999 ) .",
    "note that @xmath25 and larger values @xmath26 imply a stronger degree of aliasing among the factors in @xmath27 .",
    "an average aliasing among all subsets of @xmath22 factors is @xmath28 and the sequence @xmath29 is called the _ generalized word length pattern _ ( gwp ) of @xmath4 .",
    "the gma criterion selects designs that sequentially minimize the gwp .",
    "a design with the same first non - zero gwp entry as a gma design is called a _ weak _ gma design .    in general",
    "the gwp for @xmath7-level designs is computed as follows .",
    "let @xmath30 be the number of columns at which the @xmath31th and @xmath32th rows of @xmath4 differ , and define @xmath33 for @xmath34 .",
    "the _ distance distribution _ ( @xmath35 ) of @xmath4 determines the components of the gwp and vice versa ; the direct relationships provided in xu and wu ( 2001 ) are : @xmath36 for @xmath37 , where @xmath38 and @xmath39 are the _ krawtchouk polynomials_. when computing the krawtchouk polynomials , the recursion @xmath40 with initial values @xmath41 and @xmath42 is useful .",
    "it is well known that a factorial design @xmath4 with @xmath5 runs , @xmath6 factors , and @xmath7 levels is an @xmath10 if and only if @xmath43 .",
    "( for @xmath44 this is equivalent to @xmath45 for all @xmath46 and @xmath47 ) .",
    "hence , for a fixed @xmath48 combination the gma criterion seeks an @xmath10 with the largest possible @xmath8 .      in general , finding gma designs is a very difficult problem . butler ( 2003 , 2004 )",
    "theoretically constructed 2-level gma designs .",
    "proofs for establishing that the constructed designs are gma involved finding lower bounds for the gwp of 2-level designs for certain number of runs and factors .",
    "xu ( 2005 ) derived lower bounds for the gwp using linear programming in infinite precision and also found 2-level factorial designs based on the nordstorm - robinson code that achieve the bounds .",
    "bulutoglu and kaziska ( 2010 ) improved the lower bounds of xu ( 2005 ) using ilp in infinite precision developed by espinoza ( 2006 ) and applegate _",
    "et al . _  ( 2007 ) .",
    "another way of finding gma designs is by classifying all non - isomorphic oas .",
    "if two @xmath10 are isomorphic , they are indistinguishable under the gma criterion .",
    "on the other hand , there are non - isomorphic @xmath10 with the same gwp .",
    "classifying all non - isomorphic @xmath10 allows the best to be found with respect to the gma or any other ordering criterion that remains invariant between isomorphic designs .",
    "many have studied the problem of classifying all non - isomorphic @xmath10 ( e.g. , stufken and tang 2007 ; bulutoglu and margot 2008 ; and schoen , eendebak and nguyen ( 2010 ) .",
    "bulutoglu and margot ( 2008 ) showed that finding all @xmath10 is equivalent to finding all nonnegative integer solutions to a symmetric ilp with binary coefficients .",
    "two solutions are defined to be _ isomorphic _ if they correspond to isomorphic oas , so finding all non - isomorphic solutions is equivalent to finding all non - isomorphic @xmath10 .",
    "branch - and - cut algorithms ( see padberg and rinaldi , 1991 ) are a standard technique for solving ilps .",
    "however , a presence of symmetry in an ilp requires extending the basic branch - and - cut algorithm to avoid resolving isomorphic subproblems .",
    "such an extension developed by margot ( 2002 , 2003ab , 2007 ) was used by bulutoglu and margot ( 2008 ) to find all isomorphism classes of @xmath10 for many @xmath49 combinations .",
    "schoen , eendebak and nguyen ( 2010 ) provided a thorough review of theoretical and computational oa enumeration literature and developed the minimum complete set ( mcs ) algorithm for enumerating oas up to isomorphism .",
    "mcs is a cp algorithm with isomorphism rejection .",
    "schoen , eendebak and nguyen ( 2010 ) used the mcs algorithm to find all non - isomorphic @xmath10 for many @xmath49 combinations  including all those in bulutoglu and margot ( 2008)and mixed level oas where all factors do not have the same number of levels .",
    "the mcs algorithm is up to 3 orders of magnitude faster than the other algorithms in the literature .    in section [ sec : enum ] , we introduce four algorithms based on ilp and ilp with isomorphism pruning developed by margot ( 2007 ) .",
    "these algorithms sequentially enumerate non - isomorphic @xmath10 for @xmath50 , where @xmath51 is the largest @xmath6 for which an @xmath10 exists .",
    "our methods require finding all non - isomorphic solutions to sequences of symmetric ilps .",
    "the fastest of our algorithms is at least three orders of magnitude faster than the mcs algorithm for enumerating oa@xmath52 when @xmath53 .",
    "this enabled us to enumerate all non - isomorphic oa@xmath0 for @xmath1 and oa@xmath2 for @xmath3 for the first time .",
    "a catalog of the new gma oas based on our enumerations is documented in section [ sec : results ] .",
    "the new gma designs are available upon request .",
    "for @xmath54 , let @xmath55 be the number of non - isomorphic @xmath10 and @xmath56 be a set of non - isomorphic ( non - od - equivalent when @xmath44 ) @xmath10 .",
    "extension algorithms obtain @xmath57 from @xmath58 .",
    "[ alg : basic ] input : @xmath5 , @xmath6 , @xmath7 , @xmath8 , and @xmath58 . set @xmath59 .    1 .",
    "obtain a set @xmath60 of @xmath10 such that the first @xmath61 columns are the same as @xmath62 and exactly 1 representative from each isomorphism class ( od equivalence class when @xmath44 ) of such @xmath10 is included.[item : extend ] 2 .",
    "increment @xmath63 and then repeat step [ item : extend ] if @xmath64 .",
    "[ item : m ] set @xmath65 .",
    "form @xmath57 from @xmath66 by picking exactly one representative from each isomorphism class ( od equivalence class when @xmath44 ) of @xmath10 in @xmath66 .",
    "output : @xmath57.[item : nauty ]    the @xmath11 full factorial design replicated @xmath67 times is the singleton @xmath68 .",
    "given @xmath58 , @xmath69 is obtained after applying the basic algorithm @xmath70 times .",
    "alternatively , if @xmath71 , bulutoglu and margot ( 2008 ) ( with od - equivalence reduction when @xmath44 ) can be used to directly obtain input @xmath58 of the basic algorithm . for step [ item : extend ] and step [ item : nauty ] , we used a new extension of the graph based method based on od - equivalence if @xmath44 and the method itself otherwise with the program ` nauty ` ( see mckay ( 2013 ) , mckay and piperno ( 2013 ) ) as described in ryan and bulutoglu ( 2010 ) .",
    "the contributions here are the efficient versions of step [ item : extend ] and the new extension of the graph based method in step [ item : extend ] and step [ item : nauty ] .",
    "od - equivalence reduction , od - equivalence as well as the new extension of the graph based method are discussed in section [ sec : fold ] .",
    "let the factor levels of an @xmath10 be coded @xmath72 .",
    "lemma [ lem : y ] ( which follows directly from the definition of an @xmath10 ) and definition [ def : cor ] are used to formulate the ilp feasibility problem resulting from extending an @xmath73 to an @xmath10 .",
    "[ lem : y ] let @xmath4 be an @xmath5 run , @xmath6 factor , @xmath7-level factorial design with columns @xmath74 @xmath75",
    ". let @xmath76 be the @xmath77 matrix with columns @xmath78 where for @xmath79 and @xmath80 the @xmath31th entry of @xmath81 is @xmath82 if the @xmath31th entry of @xmath83 is @xmath84 and is @xmath85 otherwise .",
    "then @xmath4 is an @xmath10 if and only if for @xmath86 @xmath87 for any @xmath88 columns @xmath89 of @xmath76 such that @xmath90 for all @xmath91 .",
    "[ def : cor ] let @xmath76 as in lemma [ lem : y ] be a solution to the system of @xmath92 equations ( [ eqn : jy01 ] ) . also , let @xmath4 be the oa@xmath49 obtained from @xmath76 with columns @xmath93 where @xmath94 is the @xmath95 vector of @xmath82s",
    ". then @xmath4 is called _ the @xmath10 corresponding to @xmath76_.    [ alg : br3idd ] use algorithm [ alg : basic ] with the following ilp extension step .    1 .",
    "construct @xmath96 from @xmath97 using lemma [ lem : y ] , extend @xmath96 with @xmath98 columns of binary variables @xmath99 for @xmath100 , and obtain all solutions to the ilp : @xmath101 for each pair of replicated run indices @xmath102 in the input design and for any @xmath103 columns @xmath104 as in lemma [ lem : y ] with the last @xmath105 columns of @xmath76 deleted .",
    "each solution matrix @xmath106 $ ] to ilp ( [ ilp : oa ] ) has a corresponding @xmath10 .",
    "take @xmath60 to be the set of all such @xmath10 .",
    "the @xmath107 constraints in ilp ( [ ilp : oa ] ) with right hand sides @xmath108 for @xmath86 imply that any projection of @xmath8 columns which includes the new column will be a @xmath11 full factorial design replicated @xmath15 times . fixing the first run of the new factor at the low level by setting @xmath109 and ordering factor levels in the new column over",
    "replicates within the input design by requiring @xmath110 for @xmath100 boosts speed by reducing @xmath111 .",
    "the objective function @xmath85 was a convenience , so we could apply the ilp solvers provided by professor francois margot .",
    "also , using @xmath85 instead of other objective functions resulted in a faster algorithm .    for an @xmath112 ,",
    "let @xmath113 be the @xmath114 matrix obtained from @xmath76 in lemma [ lem : y ] by concatenating columns @xmath115 for @xmath116 .",
    "let @xmath117 , where @xmath118 is the group of all permutations of @xmath119 objects and @xmath120 is the resulting matrix when the rows and columns of @xmath113 are permuted according to @xmath121 and @xmath122 , respectively .",
    "let @xmath123 be the maximum subgroup of @xmath124 that does not have an element that sends a row s index of @xmath4 to the index of a replicate row .",
    "algorithm [ alg : br3idd ] can be run using the group @xmath125 with the isomorphism pruning of margot ( 2007 ) in a branch - and - cut algorithm to implement isomorphism rejection while solving the needed ilps ; see section [ sec : proofbr3idd ] for a proof .",
    "algorithm [ alg : br3idd ] is an example of basic extension algorithm [ alg : basic ] ; it solves an ilp in step [ item : extend ] with @xmath126 binary variables . unlike algorithm [ alg : br3idd ]",
    ", the bulutoglu and margot ( 2008 ) algorithm solves one ilp in @xmath127 nonnegative integer variables to directly find all @xmath10 .",
    "the bulutoglu and margot ( 2008 ) ilp formulation is defined by @xmath128 equality constraints and an unknown solution vector @xmath129 whose @xmath130th entry is the number of times the factor level combination @xmath131 appears in the sought after @xmath10 .",
    "next , we provide an improved version of the bulutoglu and margot ( 2008 ) formulation whose lp relaxation does not have redundant constraints .",
    "the improved formulation has @xmath132 equality constraints and yet it is equivalent to the bulutoglu and margot ( 2008 ) formulation .",
    "[ alg : bf ] input : @xmath5 , @xmath6 , @xmath7 , @xmath8 .",
    "find all solutions to ilp : @xmath133}}= \\frac{n}{s^q},\\label{ilp : bf}\\\\   & 1 \\leq x_1 , \\   \\",
    "{ \\boldsymbol{x}}\\in \\{0,\\cdots , p_{\\max}\\}^k \\nonumber\\end{aligned}\\ ] ] for @xmath134 and for each subset of @xmath88 indices @xmath135 using the group @xmath136 from bulutoglu and margot ( 2008 ) to prune the enumeration tree .",
    "compute @xmath137 by solving the ilp in lemma 5 in bulutoglu and margot ( 2008 ) .",
    "output : @xmath57 .",
    "the group @xmath136 in ilp ( [ ilp : bf ] ) maps a solution @xmath138 corresponding to an @xmath10 to that of an isomorphic oa ; this implies that the branch - and - cut algorithm with isomorphism pruning returns the unique @xmath10 that is lexicographically minimum in rows in the orbit of @xmath136 per isomorphism class .",
    "the constraint @xmath139 is valid for the sought after isomorphism class representatives , and its inclusion boosts speed .",
    "next , an extension version of algorithm [ alg : bf ] is defined .",
    "it reduces the number of variables from @xmath127 to @xmath140 , where @xmath141 is the number of distinct runs in the input @xmath73 being extended .",
    "let the rows of input design @xmath4 be ordered lexicographically so that repeated runs appear next to each other .",
    "let @xmath142 for @xmath143 be the number of times the @xmath31th row of @xmath144 appears in the input design , where @xmath144 is all the @xmath145 level combinations with @xmath61 factors ordered lexicographically .",
    "let @xmath146 be such that @xmath147 for @xmath148 .",
    "let @xmath149 be the maximal subgroup of @xmath136 that maps the input @xmath73 to itself .",
    "[ alg : hybrid4 ] use algorithm [ alg : basic ] with the following ilp extension step .    1 .",
    "construct @xmath96 from @xmath150 as in lemma [ lem : y ] .",
    "let @xmath151 be such that the @xmath152th row in the input design is the first row different from the @xmath153th row .",
    "let @xmath138 be the indicator vector of the sought after @xmath10 as in ilp ( [ alg : bf ] ) and @xmath154 be the resulting vector with @xmath155 entries after all the entries of @xmath138 that do not appear in the constraints of the ilp below are deleted .",
    "find all solutions or all non - isomorphic solutions using the group @xmath149 for isomorphism pruning to ilp : @xmath156 and for any @xmath103 columns @xmath157 as in lemma [ lem : y ] with the last @xmath105 columns of @xmath76 deleted .",
    "each solution @xmath154 to ilp ( [ ilp : oahybrid ] ) has a corresponding @xmath10 .",
    "take @xmath60 to be the set of all such @xmath10 .",
    "the validity of algorithm [ alg : hybrid4 ] is theoretically justified in section [ sec : proofhybrid4 ] .",
    "empirically , algorithm [ alg : hybrid4 ] was the most efficient out of those tested in section [ sec : results ] when extending oa@xmath158 to oa@xmath159 and oa@xmath160 to oa@xmath161 .    a major improvement in the speed of algorithm [ alg : hybrid4 ] is achieved if the larger group @xmath136 is used for isomorphism pruning .",
    "however , using @xmath136 would only be valid if all @xmath10 that were lexicographically minimum in rows in the orbit of @xmath136 were extensions of oa@xmath162 that were lexicographically minimum in rows in the orbit of @xmath136 , but this is not the case .",
    "theorem [ thmod ] is the basis for a data compression that makes more enumerations possible .",
    "its proof is in section [ sec : proofthmod ] .",
    "[ hadamardeq ] let @xmath164 and @xmath165 be @xmath19-level , @xmath6-factor factorial designs whose levels are @xmath20 .",
    "then , @xmath164 and @xmath165 are called _ hadamard equivalent _ if @xmath165 can be obtained from @xmath164 by applying signed permutations to the columns and/or rows of @xmath164 , see mckay ( 1979 ) .",
    "[ odeq ] let @xmath166 and @xmath167 be @xmath19-level , @xmath6-factor factorial designs whose levels are @xmath20 . then",
    ", @xmath166 and @xmath167 are called _ od - equivalent _ if @xmath168 $ ] is hadamard equivalent to @xmath169 $ ]",
    ".    clearly , isomorphic designs are od - equivalent . however , the converse is not true .",
    "[ thmod ] let @xmath8 be even , @xmath170 , and @xmath4 be an oa(@xmath171 ) that extends to an oa(@xmath172 ) . if @xmath173 is an oa(@xmath171",
    ") that is od - equivalent to @xmath4 , then @xmath174 also extends to an oa(@xmath172 ) .    for",
    "a 2-level , @xmath6-factor , @xmath5-run design @xmath164 , mckay ( 1979 ) defined a graph @xmath175 with @xmath176 vertices and showed that @xmath164 is hadamard equivalent to @xmath165 if and only if @xmath177 and @xmath178 are isomorphic graphs .",
    "for @xmath44 , step [ item : extend ] of algorithm [ alg : basic ] and optionally algorithm [ alg : bf ] finds a set of all non - od - equivalent oa(@xmath179 ) .",
    "this is done as follows .",
    "first , a column of 1s is added to each oa(@xmath179 ) in @xmath60 or @xmath57 .",
    "second , each resulting design is converted to the graph defined by mckay ( 1979 ) .",
    "third , the set of resulting graphs is reduced to a subset of non - isomorphic graphs by using the ` shortg ` utility in ` nauty ` , see mckay ( 2013 ) .",
    "( at this point algorithm [ alg : bf ] converts the resulting graphs to designs and quits ) . in step [ item : nauty ] ,",
    "isomorphism reduction is applied to the graphs in @xmath66 by using ` shortg ` again .",
    "finally the resulting non - isomorphic graphs are converted to a set of all non - od - equivalent oas . for @xmath44 ,",
    "the major improvement here is implementing od - equivalence reductions in step [ item : extend ] and step [ item : nauty ] instead of oa - isomorphism reductions .",
    "this greatly reduces the number of ilps that need to be solved at each extension step .",
    "also , a set of all non - isomorphic oa(@xmath179 ) can be extracted from a set @xmath66 of non - od - equivalent oa(@xmath179 ) as follows .    1 .   for each design @xmath180 ,",
    "compute @xmath181\\ ] ] for @xmath182 , where @xmath183 is the @xmath31th column of @xmath4 and @xmath184 .",
    "2 .   convert each resulting design to the graph defined in ryan and bulutoglu ( 2010 ) after deleting its column of all 1s .",
    "3 .   reduce the resulting set of graphs to a subset of non - isomorphic graphs by using the ` shortg ` utility of ` nauty ` mckay ( 2013 ) .",
    "4 .   convert each graph back to its corresponding design as defined in ryan and bulutoglu ( 2010 ) .",
    "we do not report the cpu time needed to extract all non - isomorphic @xmath163 from a set of non - od - equivalent @xmath163 as this is insignificant compared to the time needed to obtain a set of all non - od - equivalent @xmath163 .",
    "we used the algorithms in sections [ sec : enum ] and [ sec : fold ] to extend the known @xmath163 catalog ; summaries are in tables [ tab : enum ] and [ tab : bj ] .",
    "the ` isop1.1 ` version of the margot ( 2007 ) solver that calls the ` cplex12.5.1 ` libraries was used . in table",
    "[ tab : enum ] , we report the number of od - classes only in cases where we used od - equivalence reductions . in such cases steps 1 - 4 of section [ sec : fold ] were necessary to obtain all non - isomorphic @xmath163s from the enumerated ods .",
    "in all the algorithms isomorphism pruning was turned off if the size of the symmetry group was strictly less than 4 . whenever the isomorphism pruning was turned off ilps were solved by interactive ` cplex12.5.1 ` .",
    "( settings in ` cplex ` were optimized by @xmath185 and @xmath186 on a small subset of the corresponding ilps . ) in table [ tab : enum ] enumerations , isomorphism pruning in algorithm [ alg : br3idd ] was always turned off .",
    "jobs were run on ` intel(r ) xeon(r ) ` @xmath187ghz processors , except the cp - based times in table [ tab : schoen ] are those reported by schoen , eendebak and nguyen ( 2010 ) .",
    "an issue was determining the most efficient algorithm to produce a given row in table [ tab : enum ] and [ tab : schoen ] , or else the job might not finish . for small @xmath6 , algorithm [ alg : bf ] was fast .",
    "for the more time consuming problems with moderate and large @xmath6 , we typically tested each extension algorithm on the same small subset of @xmath73 and then used the fastest to finish the full job . with large @xmath6 ,",
    "algorithm [ alg : br3idd ] was the most efficient because many of the ilps had @xmath188 , so use of isomorphism pruning was an unnecessary computational overhead .",
    "this , however , was not true for small or moderate @xmath6 .",
    "as @xmath5 gets larger compared to @xmath6 , the cp - based algorithm suffers from the exponential growth of the search space and can not compete with the best ilp - based algorithm .",
    "however , when @xmath5 is small and the number of non - isomorphic oa@xmath162 is large , the cp - based algorithm is the most efficient algorithm ; see table [ tab : schoen ] .",
    "this happens for two reasons .",
    "1 ) as the number of variables increases solving lp relaxations can detect infeasibilities higher in the enumeration tree compared to the consistency checks of the cp algorithm .",
    "this makes the computational burden of solving lp relaxations worthwhile .",
    "in fact , this phenomenon becomes more pronounced as the number of variables increases .",
    "2 ) the cp - based algorithm does not find all non - isomorphic extensions of each non - isomorphic oa@xmath162 in @xmath60 to @xmath10 , but only those that are lexicographically minimum in columns .",
    "this eliminates many designs that are otherwise produced by the ilp - based algorithms . using the group @xmath136 in algorithm [ alg : hybrid4 ]",
    "would get rid of this inefficiency , but , as stated in section [ sec : enum ] , this does not result in a valid algorithm .",
    "table [ tab : schoen ] times for ilp formulations are based on an earlier version of the margot ( 2007 ) solver .",
    "this solver is built on ` bcp / stable/1.1 `  and uses the lp solver ` clp1.7 ` ; see ` http://www.coin-or.org/projects/bcp.xml ` .",
    "we observed this solver to be more than @xmath189 times slower than ` cplex12.5.1 ` when its isomorphism pruning utility is turned off , so the ilp - based times in table [ tab : schoen ] are conservatively high . in spite of this , the superiority of ilp over cp at large @xmath5 is the trend in table [ tab : schoen ] .",
    "we remind the reader that the caveat with table [ tab : schoen ] comparisons is that they are indirect to begin with because the cp times were taken from schoen , eendebak and nguyen ( 2010 ) , so we did not see the need to rerun these long ilp jobs on a faster solver .",
    "instead , we compiled a copy of the cp algorithm of schoen , eendebak and nguyen ( 2010 ) on our system and used the resulting executable to directly address some fundamental research questions .",
    "one question is whether oa@xmath0 enumerations could have been completed by using the cp - based mcs algorithm together with od - equivalence reductions . to answer this question we extended @xmath190 randomly chosen oa@xmath159 to oa@xmath191 using the mcs algorithm and algorithm [ alg : br3idd ] .",
    "algorithm [ alg : br3idd ] was more than @xmath192 orders of magnitude faster .",
    "so , algorithm [ alg : br3idd ] was essential in this enumeration .",
    "another question is whether isomorphism pruning was essential in our ilp - based enumerations . to answer this question we turned off isomorphism pruning in algorithm [ alg : hybrid4 ] .",
    "this resulted in a one order of magnitude slow down for the extensions to oa@xmath159 , and the ` nauty ` step of the extensions to oa@xmath161 failed because the @xmath193 gb of disk space mounted on the /tmp directory was filled .",
    "one last question is whether we could have enumerated the new cases if we had not had the isomorphism pruning solver of margot ( 2007 ) . to answer this question we tested the mcs algorithm for cases in which we had to use isomorphism pruning .",
    "the extension of all non - od - equivalent oa@xmath158 to all non - od - equivalent oa@xmath159 was @xmath194 times slower with the mcs algorithm .",
    "we estimated the extension from oa@xmath160 to oa@xmath161 to be about @xmath195 times slower .",
    "this estimate was based on @xmath196 randomly selected extensions .",
    "hence , our computational experiments suggest that the use of margot ( 2007 ) solver becomes more crucial in enumerating oa@xmath52 as @xmath5 increases .",
    "our results suggest algorithm [ alg : bf ] when @xmath197 , algorithm [ alg : hybrid4 ] when @xmath198 , and algorithm [ alg : br3idd ] when @xmath199 should be used with od - equivalence reductions to enumerate oa@xmath200 .",
    "ilp - based algorithms with isomorphism pruning enumerated oa@xmath52 with @xmath185 and @xmath186 and established gma designs with the properties in table [ tab : enum ] .",
    "a comparison of these algorithms to the cp algorithm with isomorphism rejection of schoen , eendebak and nguyen ( 2010 ) was made .",
    "we could not solve the oa@xmath200 cases as the number of oa@xmath201 solutions that had to be reduced based on od - equivalence was not manageable .",
    "future research will focus on decreasing the number of oa@xmath200 for @xmath202 that need to be enumerated for finding all gma oa@xmath200 .",
    "the authors are indebted to professor  francois  margot for providing the ilp solvers and answering questions .",
    "the authors thank professor brendan mckay for answering programming questions regarding ` nauty ` .",
    "this research was supported by the afosr grants f1ata06334j001 , f1ata03039j001 and by an allocation of computing time from the ohio supercomputer center .",
    "the views expressed in this article are those of the authors and do not reflect the official policy or position of the united states air force , department of defense , or the u.s .  government .",
    "each element of @xmath66 from algorithm [ alg : br3idd ] is an @xmath10 by lemma [ lem : y ] , and the set @xmath66 is reduced with ` nauty ` to contain no isomorphic designs",
    ". let algorithm [ alg : br3idd ] be implemented with an oa(@xmath203 ) , @xmath164 .",
    "first we show that the set @xmath204 contains at least one copy of each non - isomorphic extension of @xmath164 to an @xmath10 . for each @xmath205",
    ", @xmath206 corresponds to an @xmath10 which is isomorphic to @xmath164 .",
    "next , let @xmath207 denote this @xmath10 .",
    "then each solution @xmath138 of the ilp solved in step [ item : extend ] corresponds to an extension of @xmath164 that is an @xmath10 .",
    "let @xmath208 $ ] be this extension .",
    "then @xmath209 also solves this ilp and corresponds to @xmath210 $ ] , so @xmath208 $ ] and @xmath210 $ ] are isomorphic .",
    "the indicator variables for the ilp with @xmath127 variables for finding all @xmath10 are indexed with the @xmath127 full factorial design .",
    "the action of @xmath136 on the full factorial design defines the action of @xmath136 on the indicator variables .",
    "all elements in @xmath136 are viable to use in isomorphism pruning , except those that produce a different @xmath73 input design when @xmath136 s action is restricted to the first @xmath61 factors .",
    "this is true since the elements that are not viable send a feasible solution ( i.e. , a feasible extension of the input design ) to an infeasible solution ( i.e. , a design whose first @xmath61 factors are not fixed to the input design ) .",
    "the elements that are viable to use in isomorphism pruning send a run that appears @xmath211 times in the input design to a run that appears the same number of times .",
    "these elements form the group @xmath149 .",
    "let @xmath212 $ ] and @xmath213 $ ] .",
    "let @xmath214 $ ] be an oa@xmath215 extension of @xmath4 .",
    "first , by od - equivalence @xmath4 is either isomorphic to @xmath174 or to @xmath216\\ ] ] for some @xmath217 . if @xmath4 is isomorphic to @xmath174 there is nothing to prove .",
    "( isomorphic @xmath10 extend to the same maximum number of factors @xmath218 as oa@xmath219s . )",
    "hence , assume @xmath4 is isomorphic to @xmath220 .",
    "since @xmath220 and @xmath4 are isomorphic @xmath220 extends to an oa@xmath215 @xmath221.\\ ] ] let @xmath222.\\ ] ] then , each @xmath223 value of @xmath224 is equal to a @xmath223 or @xmath225 value of @xmath226 if @xmath22 is even and @xmath223 or @xmath227 value of @xmath226 if @xmath22 is odd .",
    "this implies that @xmath223 values of @xmath224 are zero if @xmath228 .",
    "hence , @xmath224 is the desired extension .",
    "+ @xmath10 & oa classes & od classes & time & algorithm & @xmath232 & @xmath233 & @xmath234 & @xmath235 & @xmath236 +    continued  from  previous page + @xmath10 & oa classes & od classes & time & algorithm & @xmath232 & @xmath233 & @xmath234 & @xmath235 & @xmath236 +   + oa(160,5,2,4 ) & 6 & & 0.033 & [ alg : bf ] & 0.00 + oa(160,6,2,4 ) & 29 & & 0.5 & [ alg : bf ] & 0.00 & 0.04 + oa(160,7,2,4 ) & 450 & 106 & 13.5 & [ alg : bf ] & 0.00 & 0.28 & 0.00 + oa(160,8,2,4 ) & 99,618 & 11,712 & 1,522 & [ alg : hybrid4 ] & 0.20 & 0.52 & 0.04 & 0.00 + oa(160,9,2,4 ) & 15,083 & 1,608&6,309.7 & [ alg : br3idd ] & 0.56 & 1.36 & 0.24 & 0.04 & 0.00 + oa(160,10,2,4 ) & 0 & 0 & 4.13 & [ alg : br3idd ] + oa(176,5,2,4 ) & 6 & & 0.01 & [ alg : bf ] & 0.01 + oa(176,6,2,4 ) & 14 & & 0.09 & [ alg : bf ] & 0.05 & 0.01 + oa(176,7,2,4 ) & 945 & 179 & 15.3 & [ alg : bf ] & 0.17 & 0.06 & 0.01 + oa(176,8,2,4 ) & 1,157,443 & 129,138 & 31,113.3 & [ alg : hybrid4 ] & 0.46 & 0.23 & 0.07 & 0.01 + oa(176,9,2,4 ) & 26 & 4 & 378,241.4 & [ alg : br3idd ] & 1.04 & 0.69 & 0.30 & 0.07 & 0.00 + oa(176,10,2,4 ) & 0 & 0 & 0.01 & [ alg : br3idd ] +       + @xmath10 & @xmath237 +    continued  from  previous page + @xmath10 & @xmath238",
    "+   + oa(160,5,2,4 ) & 5 , 25 , 50 , 50 , 25 , 5 + oa(160,6,2,4 ) & 2.600 , 14.400 , 39 , 48 , 39 , 14.400 , 2.600 + oa(160,7,2,4 ) & 1.600 , 7 , 29.400 , 42 , 42 , 29.400 , 7 , 1.600 + oa(160,8,2,4 ) & 1.100 , 3.300 , 18.900 , 36.700 , 40.500 , 35.900 , 18.700 , 4.100 , 0.800 + oa(160,9,2,4 ) & 1 , 0.900 , 11.400 , 30 , 37 , 37 , 28.600 , 11.600 , 2 , 0.500 + oa(176,5,2,4 ) & 5.545 , 27.273 , 55.455 , 54.545 , 27.727 , 5.455 + oa(176,6,2,4 ) & 2.909 , 15.818 , 42.273 , 54.545 , 40.909 , 16.909 , 2.636 + oa(176,7,2,4 ) & 1.705 , 8.432 , 30.068 , 48.523 , 46.932 , 29.114 , 10.023 , 1.205 + oa(176,8,2,4 ) & 1.216 , 3.909 , 20.045 , 40.091 , 46.932 , 37.545 , 20.045 , 5.727 , 0.489 + oa(176,9,2,4 ) & 1.068 , 1.330 , 12.272 , 31.500 , 42.955 , 41.523 , 28.636 , 13.500 , 3.068 , 0.148 +"
  ],
  "abstract_text": [
    "<S> statistical design of experiments is widely used in scientific and industrial investigations . </S>",
    "<S> an optimum orthogonal array can extract as much information as possible at a fixed cost . </S>",
    "<S> finding ( optimum ) orthogonal arrays is an open ( yet fundamental ) problem in design of experiments because constructing ( optimum ) orthogonal arrays or proving non - existence becomes intractable as the number of runs and factors increase . </S>",
    "<S> enumerating orthogonal arrays is equivalent to finding all feasible solutions to a class of inherently symmetric constraint satisfaction problems . </S>",
    "<S> the inherent symmetry implies that the solutions remain feasible under the action of a group permuting the variables . </S>",
    "<S> this causes the number of feasible solutions to be huge . </S>",
    "<S> we develop algorithms for enumerating orthogonal arrays that call the margot ( 2007 ) isomorphism pruning algorithm and bring the enumeration of oa@xmath0 for @xmath1 and oa@xmath2 for @xmath3 within computational reach . a catalog of the newly found optimum orthogonal arrays obtained using our algorithms is also presented .    </S>",
    "<S> constraint programming ; extension algorithm ; integer linear programming ; isomorphism rejection ; ` nauty ` ; orthogonal designs . </S>"
  ]
}