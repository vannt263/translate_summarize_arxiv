{
  "article_text": [
    "in this paper we study sublanguages of plotkin s functional programming language @xmath1 , which we here take to be the simply typed @xmath6-calculus over a single base type @xmath7 , with constants @xmath8 as usual , we will consider this language to be endowed with a certain ( call - by - name ) operational semantics , which in turn gives rise to a notion of _ observational equivalence _ for @xmath1 programs .",
    "we define the _ level _ @xmath9 of a type @xmath3 inductively by @xmath10 and define the _ pure type _ @xmath11 of level @xmath12 by @xmath13 modifying the definition of @xmath1 so that the constants @xmath2 are admitted only for types @xmath3 of level @xmath4 , we obtain a sublanguage @xmath0 for any @xmath12",
    ". our main result will be that for each @xmath14 , the expressive power of @xmath15 strictly exceeds that of @xmath0 : in particular , there is no closed term of @xmath0 that is observationally equivalent to @xmath16 .",
    "( note that ` observational equivalence ' has the same meaning for all the languages of interest here , as will be explained in section  [ sec - background ] . )",
    "this answers a question posed explicitly by berger in @xcite , but present in the folklore at least since the early 1990s .",
    "it is worth noting that the situation is quite different in several extensions of @xmath1 considered in the literature , in which one can restrict to recursions at level  1 types without loss of expressivity ( see the end of subsection  [ subsec - embed ] ) .",
    "our discussion will focus on two models of @xmath1 , both studied in detail in the recent book of longley and normann @xcite : the _ nested sequential procedure _",
    "model @xmath17 ( also known in the literature as the _ @xmath1 bhm tree _ model and by various other names ) , and its extensional quotient @xmath18 consisting of _ sequential functionals_. these have effective submodels @xmath19 and @xmath20 respectively .",
    "it is well - known that @xmath18 and @xmath20 are fully abstract for @xmath1 , and indeed that @xmath20 is isomorphic to the closed term model of @xmath1 modulo observational equivalence .",
    "our result can therefore be understood more denotationally as saying that more elements of @xmath20 are denotable in @xmath15 than in @xmath0 .",
    "( it follows easily that the same holds with @xmath20 replaced by any other adequate , compositional model of @xmath1 , such as the scott model . ) from this we may also infer that there is no finite ` basis ' @xmath21 relative to which all elements of @xmath20 are @xmath6-definable ( see corollary  [ no - finite - basis - cor ] below ) .",
    "in section  [ sec - background ] we recall the necessary technical background on @xmath1 and on the models @xmath17 and @xmath18 , fleshing out the ideas outlined informally above . in section  [ sec - denotations ]",
    "we obtain a convenient inductive characterization of the class of procedures definable in ( the ` oracle ' version of ) @xmath0 , framed in terms of constructions on the procedures themselves . in section",
    "[ sec - y - k+1 ] we introduce the concept of a _ spinal _ procedure term , and show using our inductive characterization that no @xmath0-denotable procedure can be spinal ( this is the most demanding part of the proof ) . since the standard interpretation of @xmath16 in @xmath17 is spinal , this already shows that the element @xmath22 is not definable in @xmath0 .",
    "however , this still leaves open the possibility that there might be other nsps , distinct from @xmath23 but extensionally equivalent to it , that are denotable in @xmath0",
    ". we will show in section  [ sec - extensional ] that this is not the case , at least if we consider @xmath24 in place of @xmath16 ; we therefore have an element of @xmath18-denotable in @xmath15 but not in @xmath0 , establishing berger s conjecture . in section  [ sec - pure - type ]",
    "we refine our methods slightly to show that even @xmath25 is not @xmath0-denotable , so that in fact _ none _ of the operators @xmath2 with @xmath26 are definable in @xmath0 .",
    "we conclude in section  [ sec - further - work ] with a discussion of related and future work .",
    "i am grateful to ulrich berger , martn escard , dag normann and alex simpson for valuable discussions and correspondence , and to colin stirling for drawing my attention to the related work of damm and statman ( as discussed in section  [ sec - further - work ] ) .",
    "many of the participants in the domains xii workshop in cork and the galop xi workshop in eindhoven also offered valuable comments .",
    "the present paper is a revised , corrected and expanded of a university of edinburgh technical report from july 2015 , the most significant changes being : the addition of the material on the pure type @xmath27 in section  [ sec - pure - type ] ; a simplified approach to characterizing a suitable substructure of @xmath17 in section  [ sec - denotations ] ; and some formal tightening of the material in section  [ sec - sp0 ] and the proof of lemma  [ g - lemma-2 ] .",
    "we here summarize the necessary definitions and technical background from @xcite , especially from chapters  6 and 7 .      in @xcite",
    ", scott introduced the language lcf for computable functionals of simple type . this language is traditionally called @xmath1 when equipped with a standalone operational semantics as in plotkin @xcite .",
    "we will work here with the same version of @xmath1 as in @xcite , with the natural numbers as the only base type .",
    "our types @xmath3 are thus generated by @xmath28 and our terms will be those of the simply typed @xmath6-calculus constructed from the constants @xmath29 we often abbreviate the type @xmath30 to @xmath31 or just @xmath32 . as usual , we write @xmath33 to mean that @xmath34 is a well - typed term in the environment @xmath35 ( where @xmath35 is a finite list of typed variables ) . throughout the paper",
    ", we shall regard the type of a variable @xmath36 as intrinsic to @xmath36 , and will often write @xmath37 to indicate that @xmath36 carries the type @xmath3 . for each @xmath12 , the sublanguage @xmath0 is obtained by admitting the constants @xmath2 only for types @xmath3 of level @xmath4 .",
    "this completes the definition of the languages @xmath1 and @xmath0 .",
    "whilst the language @xmath48 is too weak for programming purposes ( it can not even define addition ) , it is not hard to show that even @xmath49 is turing - complete : that is , any partial computable function @xmath50 is representable by a closed @xmath49 term of type @xmath51 .",
    "we will also refer to the non - effective language @xmath52 ( or _ oracle @xmath1 _ ) obtained by extending the definition of @xmath1 with a constant @xmath53 for every set - theoretic partial function @xmath54 , along with a reduction rule @xmath55 for every @xmath56 such that @xmath57 .",
    "( in @xmath52 , the evaluation of a closed term @xmath58 may fail to reach a value @xmath59 either because it generates an infinite computation , or because it encounters a subterm @xmath60 where @xmath61 is undefined . )",
    "the languages @xmath62 are defined analogously .",
    "if @xmath63 are closed @xmath52 terms of the same type @xmath3 , and @xmath64 is one of our languages @xmath0 , @xmath65 , @xmath1 , @xmath52 , we say that @xmath63 are _ observationally equivalent in @xmath64 _ , and write @xmath66 , if for all closed program contexts",
    "@xmath67 : \\nat$ ] of @xmath64 and all @xmath47 , we have @xmath68 \\reducesto^ * n \\mbox{~~iff~~ } c[m ' ] \\reducesto^ * n \\;.\\ ] ] fortunately , it is easy to see that all of the above languages give rise to exactly the same relation @xmath69 .",
    "first , it is immediate from the definition that if @xmath70 are two of our languages and @xmath71 , then @xmath72 .",
    "it therefore only remains to show that @xmath73 implies @xmath74 .",
    "for this , we use the fact that any of the constants @xmath2 or @xmath75 in @xmath52 can be ` approximated ' to any desired accuracy by terms of @xmath48 .",
    "indeed , for any @xmath76 , we may define @xmath48 terms @xmath77 writing @xmath78 for @xmath79 , and using some evident syntactic sugar in the definition of @xmath80 . for any @xmath52 term @xmath34 , let @xmath81 denote the ` approximation ' obtained from @xmath34 by replacing all occurrences of constants @xmath82 by @xmath83 respectively .",
    "it is then not hard to show that for closed @xmath58 , we have @xmath84 from this it follows easily that if @xmath85 $ ] is an observing context of @xmath52 that distinguishes @xmath63 , then some approximation @xmath86 $ ] ( a context of @xmath48 ) also suffices to distinguish them .",
    "this establishes that @xmath87 .",
    "we may therefore write @xmath88 for observational equivalence without ambiguity .",
    "in fact , an even more restricted class of observing contexts suffices for ascertaining observational equivalence of @xmath52 terms . the well - known _ context lemma _",
    ", due to milner @xcite , states that @xmath89 iff @xmath63 have the same behaviour in all _ applicative contexts _ of @xmath1that is , if for all closed @xmath1 terms @xmath90 , we have @xmath91 furthermore , using the above idea of approximation , it is easy to see that we obtain exactly the same equivalence relation if we allow the @xmath92 here to range only over closed @xmath48 terms  this gives us the notion of _ @xmath48 applicative equivalence _ , which we shall denote by @xmath93 .",
    "we have concentrated so far on giving a purely operational description of @xmath1 .",
    "we are now able to express the operational content of our main theorem as follows . as in section",
    "[ sec - intro ] , we define the type @xmath11 by @xmath94 , @xmath95 ; we shall write @xmath11 simply as @xmath14 where there is no risk of confusion .    [ operational - main - thm ] for any @xmath96 , there are functionals definable in @xmath15 but not in @xmath62 .",
    "more precisely , there is no closed term @xmath34 of @xmath62 such that @xmath97 ( or equivalently @xmath98 ) .",
    "in fact , we shall first obtain a version of theorem  [ operational - main - thm ] with @xmath99 in place of @xmath100 , then resort to a more indirect method obtain the result for @xmath100 itself in section  [ sec - pure - type ] .",
    "theorem  [ operational - main - thm ] can be construed as saying that in a suitably pure fragment of a functional language such as haskell , the computational strength of recursive function definitions increases strictly as the admissible type level for such recursions is increased .",
    "the point of the formulation in terms of @xmath93 is to present our result in a manifestly strong form : there is no @xmath101 that induces the same partial function as @xmath99 even on closed @xmath48 terms .    a slightly more denotational formulation of our theorem can be given in terms of the model @xmath18 of _ sequential functionals _ , which we may here define as the type structure of closed @xmath52 terms modulo observational equivalence .",
    "specifically , for each type @xmath3 , let @xmath102 denote the set of closed @xmath52 terms @xmath103 modulo @xmath88 . clearly ,",
    "application of @xmath52 terms induces a well - defined function @xmath104 for any @xmath105 ; the structure @xmath18 then consists of the sets @xmath102 along with these application operations . using the context lemma ,",
    "it is easy to see that @xmath106 ( @xmath107 ) and that @xmath108 is isomorphic to a set of _ functions _ @xmath109 : that is , if @xmath110 satisfy @xmath111 for all @xmath112 , then @xmath113 .",
    "any closed @xmath52 term @xmath103 naturally has a denotation @xmath114 in @xmath102 , namely its own equivalence class",
    ". we may therefore restate theorem  [ operational - main - thm ] as :    [ sf - main - thm ] for any @xmath96 , the element @xmath115 is not denotable in @xmath62 .",
    "it follows immediately that in any other adequate , compositional model of @xmath52 ( such as scott s continuous model or berry s stable model ) , the element @xmath116 is not @xmath62-definable , since the equivalence relation on @xmath52 terms induced by such a model must be contained within @xmath88 .    by taking closed terms of @xmath1 rather than @xmath52 modulo observational equivalence",
    ", we obtain the type structure @xmath20 of _ effective sequential functionals _ , which can clearly be seen as a substructure of @xmath18 .",
    "although the above constructions of @xmath18 and @xmath20 are syntactic , there are other more mathematical constructions ( for instance , involving game models @xcite ) that also give rise to these structures , and experience suggests that they are mathematically natural classes of higher - order functionals .",
    "we now see that theorem  [ sf - main - thm ] implies an interesting absolute property of @xmath20 , not dependent on any choice of presentation for this structure or any selection of language primitives :    [ no - finite - basis - cor ] there is no finite set @xmath117 of elements of @xmath20 such that all elements of @xmath20 are @xmath6-definable relative to @xmath117 . in other words ,",
    "the cartesian category of @xmath1-computable functionals is not finitely generated .",
    "suppose @xmath118 were such a set . for each @xmath119",
    ", take a closed @xmath1 term @xmath120 denoting @xmath121",
    ". then the terms @xmath122 between them contain only finitely many occurrences of constants @xmath2 , so these constants are all present in @xmath0 for large enough @xmath14 .",
    "but this means that @xmath123 , and hence all elements of @xmath20 , are @xmath0-definable , contradicting theorem  [ sf - main - thm ] .",
    "we turn next to an overview of the _ nested sequential procedure _ ( or nsp ) model , denoted by @xmath17 .",
    "further details and motivating examples are given in @xcite .",
    "in certain respects , however , our presentation here will be more formal than that of @xcite : in particular , our treatment of bound variables and issues of @xmath124-conversion will be more explicit , in order to provide a secure foundation for the detailed syntactic arguments that follow .",
    "the ideas behind this model have a complex history .",
    "the general idea of sequential computation via nested oracle calls was the driving force behind kleene s later papers ( e.g.  @xcite ) , although the concept did not receive a particularly transparent or definitive formulation there .",
    "many of the essential ideas of nsps can be found in early work of sazonov @xcite , in which a notion of _ turing machine with oracles _ was used to characterize the ` sequentially computable ' elements of the scott model .",
    "nsps as we study them here were first explicitly introduced in work on game semantics for @xmath1both by abramsky , jagadeesan and malacaria @xcite ( under the name of _ evaluation trees _ ) and by hyland and ong @xcite ( under the name of _ canonical forms _ ) . in these papers , nsps played only an ancillary role ; however , it was shown by amadio and curien @xcite how ( under the name of _ @xmath1 bhm trees _ ) they could be made into a model of @xmath1 in their own right .",
    "similar ideas were employed again by sazonov @xcite to give a standalone characterization of the class of sequentially computable functionals .",
    "more recently , normann and sazonov @xcite gave an explicit construction of the nsp model in a somewhat more semantic spirit than @xcite , using the name _",
    "sequential procedures_. as in @xcite , we here add the epithet ` nested ' to emphasize the contrast with other flavours of sequential computation .    as in @xcite ,",
    "our nsps are generated by means of the following infinitary grammar , interpreted coinductively : @xmath125    we will use vector notation to denote finite ( possibly empty ) lists of variables or procedures : @xmath126 , @xmath127 .",
    "our convention will be that a list @xmath126 must be non - repetitive , though a list @xmath127 need not be .",
    "we may use @xmath128 to range over _ nsp terms _ of any of the above three kinds . a procedure @xmath129 will often be abbreviated to @xmath78 .",
    "for the most part , we will be working with terms modulo ( infinitary ) @xmath124-equivalence , and most of the concepts we introduce will be stable under renamings of bound variables .",
    "thus , a statement @xmath130 , appearing without qualification , will mean that @xmath131 are @xmath124-equivalence ( although we will sometimes write @xmath132 as @xmath133 if we particularly wish to emphasize this ) .",
    "when we wish to work with terms on the nose rather than up to @xmath133 , we shall refer to them as _ concrete _ terms .",
    "if each variable is assigned a simple type over @xmath7 , then we may restrict our attention to _ well - typed _ terms . informally , a term will be well - typed unless a typing violation occurs at some specific point within its syntax tree .",
    "the typing discipline will mostly play only a background role in the present paper , but for the sake of completeness we note the rules here . specifically , a term @xmath128 is well - typed if :    * for every application @xmath134 appearing within @xmath128 , the type of @xmath36 has the form @xmath135 where @xmath136 and @xmath127 are of the same length ; and * for each @xmath119 , the procedure @xmath137 has the form @xmath138 , where the variables @xmath139 have types @xmath140 and @xmath141 .    if @xmath35 is any environment ( i.e.  a finite non - repetitive list of variables ) , we write @xmath142 and @xmath143 to mean that @xmath144 respectively are well - typed with free variables in @xmath35 .",
    "we also write @xmath145 when @xmath146 is well - typed in @xmath35 and of the form @xmath147 , where the variables @xmath126 have types @xmath136 and @xmath148 .",
    "we shall often refer to variable environments that arise from combining several lists of variables , which may be represented by different notations , e.g.  @xmath149 thing .",
    "since such environments are required to be non - repetitive , we take it to be part of the content a typing judgement such as @xmath150 that the entire list @xmath149 is non - repetitive .",
    "however , the _ order _ of variables within an environment will typically be of much less concern to us ( clearly our typing judgements @xmath151 are robust under permutations of @xmath35 ) , and we will sometimes abuse notation by identifying a finite _ set _",
    "@xmath152 of variables with the list obtained from some arbitrary ordering of it .",
    "it will also be convenient to place another condition on concrete well - typed terms ( not imposed in @xcite ) in order to exclude _",
    "variable hiding_. specifically , we shall insist that if @xmath153 then no variable of @xmath35 appears as a bound variable within @xmath128 , nor are there any _ nested _ bindings within @xmath128 of the same variable @xmath36 .",
    "( clearly any concrete term not satisfying this restriction is @xmath124-equivalent to one that does . )",
    "this will help to avoid confusion in the course of some delicate arguments in which the issue of identity of variables is paramount .    with these ideas in place",
    ", we may take @xmath154 to be the set of well - typed procedures of type @xmath3 modulo @xmath155 , and @xmath156 the subset constituted by the _ closed _ procedures ( i.e.  those that are well - typed in the empty environment ) .    as in @xcite",
    ", we shall need to work not only with nsps themselves , but with a more general calculus of nsp _ meta - terms _ designed to accommodate the intermediate forms that arise in the course of computations : @xmath157    here again , @xmath126 and @xmath158 denote finite lists",
    ". we shall use @xmath159 to range over meta - terms of any of the above three kinds .",
    "( unless otherwise stated , we use uppercase letters for general meta - terms and lowercase ones for terms . )",
    "once again , we will normally work with meta - terms up to ( infinitary ) @xmath124-equivalence , but may work with concrete meta - terms when required .",
    "there are also some evident typing rules for meta - terms , leading to typing judgements @xmath160 , @xmath161 , @xmath162 for meta - procedures , meta - expressions and ground meta - terms respectively .",
    "these typing rules are the obvious adaptation of those for terms ( see ( * ? ? ?",
    "* section  6.1.1 ) ) ; again , they will play only a background role in this paper .",
    "we furthermore require that well - typed concrete meta - terms are subject to the no - variable - hiding condition .",
    "we will sometimes write e.g.  @xmath163 to mean that @xmath164 is a well - typed meta - procedure in environment @xmath35 , if the type itself is of no particular concern to us .",
    "there is an evident notion of simultaneous capture - avoiding _ substitution _ @xmath165 $ ] for well - typed concrete terms . specifically ,",
    "if @xmath166 and @xmath167 for each @xmath119 , where @xmath168 , then we will have @xmath169 \\,(:\\tau)$ ] .",
    "note that this may entail renaming of bound variables both within @xmath159 ( in order to avoid capture of variables in @xmath170 ) and in the @xmath171 ( in order to maintain the no - hiding condition for variables in @xmath126 and those bound within @xmath159 ) .",
    "the details of how this renaming is performed will not matter , provided that for each @xmath172 as above we have a determinate choice of a suitable concrete term @xmath165 $ ] , so that multiple appearances of the same substitution will always yield the same result .",
    "we also note that substitution is clearly well - defined on @xmath124-equivalence classes .",
    "finally , we will say a substitution @xmath173 $ ] _ covers _ a set @xmath174 of variables if @xmath174 consists of precisely the variables @xmath126 .    as a mild extension of the concept of meta - term",
    ", we have an evident notion of a _ meta - term context _",
    "$ ] : essentially a meta - term containing a ` hole ' @xmath175 , which may be of meta - procedure , meta - expression or ground meta - term type ( and in the case of meta - procedures , will carry some type @xmath3 ) .",
    "our convention is that a context @xmath85 $ ] is permitted to contain only a single occurrence of the hole @xmath175 .",
    "multi - hole contexts @xmath176 $ ] will occasionally be used , but again , each hole @xmath177 may appear only once .    by the _",
    "local variable environment _ associated with a concrete meta - term context @xmath178 $ ] , we shall mean the set @xmath179 of variables @xmath36 bound within @xmath85 $ ] whose scope includes the hole , so that the environment in force at the hole is @xmath180 . ( the no - variable - hiding convention ensures that @xmath179 and indeed @xmath180 is non - repetitive . ) although in principle local variable environments pertain to particular choices of concrete contexts , most of the concepts that we define using such environments will be easily seen to be invariant under renamings of bound variables .    next , there is a concept of _ evaluation _ whereby any concrete meta - term @xmath181 evaluates to an ordinary concrete term @xmath182 . to define this ,",
    "the first step is to introduce a _ basic reduction _",
    "relation @xmath183 for concrete ground meta - terms , which we do by the following rules :      note that the @xmath185-rule applies even when @xmath126 is empty : e.g.  @xmath190 .    from this ,",
    "a _ head reduction _",
    "relation @xmath191 on concrete meta - terms is defined inductively :    ( h1 ) : :    if @xmath192 then    @xmath193 .",
    "( h2 ) : :    if @xmath193 and @xmath194 is not a    @xmath195 meta - term , then    @xmath196 ( h3 ) : :    if @xmath197 then    @xmath198 .    clearly , for any meta - term @xmath159 , there is at most one @xmath199 with @xmath200 .",
    "we call a meta - term a _",
    "head normal form _ if it can not be further reduced using @xmath191 .",
    "the possible shapes of head normal forms are @xmath78 , @xmath201 , @xmath202 and @xmath203 , the first three optionally prefixed by @xmath204 ( where @xmath126 may contain @xmath205 ) .",
    "we now define the _ general reduction _",
    "relation @xmath40 inductively as follows :    ( g1 ) : :    if @xmath200 then @xmath206 .",
    "( g2 ) : :    if @xmath207 then    @xmath208 .",
    "( g3 ) : :    if @xmath209 except at @xmath210 where    @xmath211 , then @xmath212 ( g4 ) : :    if @xmath213 except at @xmath214 where    @xmath215 , then    @xmath216    it is easy to check that this reduction system is sound with respect to the typing rules .",
    "we emphasize that the relation @xmath40 is defined on concrete meta - terms , although it is clear that it also gives rise to a deterministic reduction relation on their @xmath124-classes .",
    "an important point to note is that the terms @xmath128 are precisely the meta - terms in _ normal form _ ,",
    "i.e.  those that can not be reduced using @xmath40",
    ". we write @xmath44 for the reflexive - transitive closure of @xmath40 .",
    "the above reduction system captures the finitary aspects of evaluation . in general , however , since terms and meta - terms may be infinitely deep , evaluation must be seen as an infinite process . to account for this infinitary aspect",
    ", we use some familiar domain - theoretic ideas .",
    "we write @xmath217 for the evident syntactic orderings on concrete meta - procedures and on ground meta - terms : thus , @xmath218 iff @xmath159 may be obtained from @xmath219 by replacing zero or more subterms ( possibly infinitely many ) by @xmath78 .",
    "it is easy to see that for each @xmath3 , the set of all concrete procedure terms of type @xmath3 forms a directed - complete partial order under @xmath217 . by a _",
    "finite _ ( concrete ) term @xmath128 ,",
    "we shall mean one generated by the following grammar , this time construed inductively : @xmath220 we regard finite terms as ordinary nsp terms by identifying the conditional branching @xmath221 with @xmath222    we may now explain how a general meta - term @xmath159 _ evaluates _ to a term @xmath223 .",
    "this will in general be an infinite process , but we can capture the value of @xmath159 as the limit of the finite portions that become visible at finite stages in the reduction . to this end , for any concrete meta - term @xmath159 we define @xmath224 it is not hard to check that for any meta - term @xmath159 , the set @xmath225 is directed with respect to @xmath217 ( cf .",
    "* proposition  6.1.2 ) ) .",
    "we may therefore define @xmath223 , the _ value _ of @xmath159 , to be the ordinary concrete term @xmath226 note in passing that the value @xmath227 of a ground meta - term @xmath194 may be either an expression or an application . in either case , it is certainly a ground meta - term .",
    "it is also easy to see that @xmath228 , and that if @xmath229 then @xmath230 .",
    "whilst we have defined our evaluation operation @xmath231 for concrete meta - terms , it is clear that this induces a well - defined evaluation operation on their @xmath124-classes , and for the most part this is all that we shall need .",
    "we also note that the syntactic ordering @xmath217 on concrete terms induces a partial order @xmath217 on their @xmath124-classes , and that each @xmath154 and @xmath232 is directed - complete with respect to this ordering .    in the present paper , an important role",
    "will be played by the tracking of variable occurrences ( and sometimes other subterms ) through the course of evaluation . by inspection of the above rules for @xmath40 , it is easy to see that if @xmath206 , then for any occurrence of a ( free or bound ) variable @xmath36 within @xmath199 , we can identify a unique occurrence of @xmath36 within @xmath159 from which it originates ( we suppress the formal definition ) .",
    "the same therefore applies whenever @xmath229 . in this situation",
    ", we may say that the occurrence of @xmath36 within @xmath199 is a _ residual _ of the one within @xmath159 , or that the latter is the _ origin _ of the former .",
    "note , however , that these relations are relative to a particular reduction path @xmath229 : there may be other paths from @xmath159 to @xmath199 for which the origin - residual relation is different .",
    "likewise , for any occurrence of @xmath36 within @xmath223 , we may pick some finite @xmath233 containing this occurrence , and some @xmath234 with @xmath229 ; this allows us to identify a unique occurrence of @xmath36 within @xmath159 that originates the given occurrence in @xmath223 .",
    "it is routine to check that this occurrence in @xmath159 will be independent of the choice of @xmath128 and @xmath199 and of the chosen reduction path @xmath229 ; we therefore have a robust origin - residual relationship between variable occurrences in @xmath159 and those in @xmath223 .",
    "a fundamental result for nsps is the _ evaluation theorem _ , which says that the result of evaluating a meta - term is unaffected if we choose to evaluate certain subterms in advance :    [ eval - thm ] if @xmath176 $ ] is any meta - term context with countably many holes and @xmath235 $ ] is well - formed , then @xmath236 \\gg } ~=~      { \\ll c[{\\ll \\!t_0\\ ! \\gg},{\\ll \\!t_1\\ ! \\gg},\\ldots ] \\gg}.\\ ] ]    the proof of this is logically elementary but administratively complex : see ( * ? ? ?",
    "* section  6.1.2 ) .",
    "one further piece of machinery will be useful : the notion of _ hereditary @xmath237-expansion _ , which enables us to convert a variable @xmath36 into a procedure term ( written @xmath238 ) .",
    "the definition is by recursion on the type of @xmath36 : if @xmath239 , then @xmath240 in particular , if @xmath241 then @xmath242 .",
    "the following useful properties of @xmath237-expansion are proved in ( * ? ? ?",
    "* section  6.1.3 ) ( we assume the terms in question are well typed ) : @xmath243 the sets @xmath154 may now be made into a total applicative structure @xmath244 by defining @xmath245 \\gg } \\;.\\ ] ] clearly the sets @xmath232 are closed under this application operation , so we also obtain an applicative substructure @xmath17 of @xmath244 . it is easy to check that application in @xmath244 is monotone and continuous with respect to @xmath217 .",
    "it is also shown in ( * ? ? ?",
    "* section  6.1.3 ) that both @xmath244 and @xmath17 are typed _",
    "@xmath6-algebras _ : that is , they admit a compositional interpretation of typed @xmath6-terms that validates @xmath185-equality .",
    "( the relevant interpretation of pure @xmath6-terms is in fact given by three of the clauses from the interpretation of @xmath52 as defined below . )      a central role will be played by certain procedures @xmath246 which we use to interpret the @xmath1 constants @xmath2 ( the overloading of notation will do no harm in practice ) . if @xmath247 , we define @xmath248 $ ] , where @xmath249 $ ] is specified corecursively up to @xmath124-equivalence by : @xmath250 ~=_\\alpha~ \\lambda x_0^{\\sigma_0 } \\ldots x_{r-1}^{\\sigma_{r-1}}.\\ ;                                { \\ccase\\;g\\;(f_\\sigma[g])\\ ; x_0^\\eta \\cdots x_{r-1}^\\eta\\;\\oof\\;(i \\darrow i ) } \\;.\\ ] ] ( a concrete representative of @xmath2 satisfying the no - hiding condition will of course feature a different choice of bound variables @xmath251 at each level . )",
    "we may now give the standard interpretation of @xmath52 in @xmath17 . to each @xmath52 term",
    "@xmath33 we associate a procedure - in - environment @xmath252 inductively as follows : @xmath253 ( in the clause for @xmath75 , we interpret @xmath254 as @xmath78 whenever @xmath254 is undefined . )",
    "as is shown in @xcite , this interpretation is _ adequate _ , in the sense that @xmath255 iff @xmath256 , and _ universal _",
    ", in the sense that every element of @xmath232 is the denotation of some closed @xmath103 in @xmath52 .",
    "it follows from these facts that the structure @xmath18 is a quotient of @xmath17 , and indeed is its _ extensional collapse _ ; we shall write @xmath257 for the equivalence relation on @xmath17 induced by the quotient map .",
    "it is also routine to check that the canonical interpretation of @xmath52 in @xmath18 factors through the above interpretation in @xmath17 via this quotient map .",
    "our proof of theorem  [ sf - main - thm ] will proceed via a detailed analysis of the model @xmath17 . specifically , in sections  [ sec - denotations ] and [ sec - y - k+1 ] we will show the following :    [ sp0-main - thm ] for any @xmath96 , the elements @xmath258 and @xmath259 in @xmath17 are not @xmath62-definable .    in section  [ sec - extensional ] we will go on to show that no @xmath260 can be @xmath62-definable .",
    "this already shows that the languages @xmath0 form a strict hierarchy , but to complete the picture , we resort to a more refined version of our methods in section  [ sec - pure - type ] to show the same for @xmath100 .",
    "this establishes theorem  [ sf - main - thm ] .    finally , we note that each set @xmath102 naturally carries an _ observational ordering _ , namely the partial order @xmath261 given by @xmath262 clearly , the application operations @xmath263 are monotone with respect to @xmath261 .",
    "moreover , it follows from an inequational version of the context lemma that the observational ordering on @xmath264 coincides with the pointwise ordering induced by the usual partial order on @xmath265 .",
    "we shall also use the symbol @xmath261 for the preorder on each @xmath232 induced by @xmath261 on @xmath18 ; clearly this coincides with the _ observational preorder _ on @xmath232 defined by @xmath266 note too that @xmath267 iff @xmath268 .",
    "we shall also extend the use of the notations @xmath269 in a natural way open terms ( in the same environment ) and indeed to meta - terms : for example , we may write @xmath270 to mean @xmath271 .      the following result will play a crucial role in this paper :    [ no - retraction - thm ] in @xmath18 , no type @xmath27 can be a _",
    "pseudo - retract _ of any finite product @xmath272 where each @xmath273 is of level @xmath4 .",
    "more formally , if @xmath274 is a variable of type @xmath27 and each @xmath275 a variable of type @xmath273 , there can not exist procedures @xmath276 such that @xmath277 } \\,\\succeq z^\\eta$ ] .",
    "if in the above setting we had @xmath277 } \\,\\approx z^\\eta$ ] , we would call @xmath27 a _ retract _ of @xmath272 . in appendix",
    "a we will show that the notions of retract and pseudo - retract actually coincide , since @xmath278 implies @xmath279 .",
    "however , this fact will not be needed for the main results of this paper .",
    "in our statement of theorem  [ no - retraction - thm ] , we have referred informally to a product @xmath272 which we have not precisely defined ( although our formal statement gives everything that is officially necessary ) .",
    "one may readily make precise sense of this product notation within the _ karoubi envelope _ @xmath280 as studied in ( * ? ? ? * chapter  4 ) : for instance , it is not hard to show that any finite product of level @xmath4 types can be constructed as a retract of the pure type @xmath27 .",
    "the proof of theorem  [ no - retraction - thm ] appears in ( * ? ? ?",
    "* section  7.7 ) , but for self - containedness we reprise it here with some minor stylistic improvements .    by induction on @xmath14 . for the case @xmath281 , we note that @xmath282 can not be a pseudo - retract of any @xmath283 , since ( for example ) the set of maximal elements in @xmath284 is of larger cardinality than the set of all elements of @xmath285 .",
    "( alternatively , one may note that @xmath282 is not a _ retract _ of @xmath283 , since the former contains strictly ascending chains of length @xmath286 while the latter does not ; then use the method of appendix  a in the easy case @xmath287 to show that any pseudo - retraction of the relevant type would be a retraction . )    now assume the result for @xmath288 , and suppose for contradiction that @xmath289 and @xmath290 exhibit @xmath27 as a pseudo - retract of @xmath272 where each @xmath273 is of level @xmath4 .",
    "let @xmath291 \\gg}$ ] , so that @xmath292 \\gg}\\ , \\succeq u$ ] for any @xmath293 .",
    "we first check that any @xmath294 with this latter property must have the syntactic form @xmath295 for some @xmath146 of type @xmath11 .",
    "indeed , it is clear that @xmath294 does not have the form @xmath296 or @xmath297 , and the only other alternative form is @xmath298 . in that case , however , we would have @xmath299 \\gg } \\cdot\\ ; ( \\lambda y^{k-1}.\\bot ) ~=~ \\bot \\;,\\ ] ] contradicting @xmath300 \\gg } \\cdot\\ ; ( \\lambda y^{k-1}.\\bot ) \\,\\succeq\\ , ( \\lambda w.0)(\\lambda y.\\bot ) = 0 $ ] .",
    "we now focus on the subterm @xmath146 in @xmath301 .",
    "the general direction of our argument will be to show that @xmath302 represents a function of type @xmath303 that dominates the identity , and that moreover our construction of @xmath294 as @xmath304 \\gg}$ ] can be used to split this into morphisms @xmath305 and @xmath306 where the @xmath307 are of level @xmath308 , contradicting the induction hypothesis . an apparent obstacle to this plan",
    "is that @xmath274 as well as @xmath309 may appear free in @xmath146 ; however , it turns out that we still obtain all the properties we need if we specialize @xmath274 here ( somewhat arbitrarily ) to @xmath310 .",
    "specifically , we claim that @xmath311 \\gg } \\,\\succeq q$ ] for any @xmath312 . for suppose that @xmath313 whereas @xmath311 \\gg } \\cdot\\",
    "; s \\neq n$ ] for some @xmath314 .",
    "take @xmath315 , so that @xmath316 whenever @xmath317 .",
    "then @xmath318 pointwise , so we have @xmath319 \\gg } \\cdot\\ ; s \\neq n$ ] by the monotonicity of @xmath18 ( see the end of section  [ subsec - interp ] ) . by the definition of @xmath320",
    ", it follows that @xmath321 \\gg}\\ , = \\bot$ ] , whence @xmath292 \\gg } \\cdot\\ , q = \\bot$ ] , whereas @xmath322 , contradicting @xmath292 \\gg}\\ , \\succeq u$ ] . we have thus shown that @xmath323 \\gg } \\ ; \\succeq \\id_{k}$ ] .",
    "next , we show how to split the function represented by this procedure so as to go through some @xmath324 as above .",
    "since @xmath304 \\gg } \\,= \\lambda f.\\,{\\ccase\\;zp\\;\\oof\\;(\\cdots)}$ ] , we have that @xmath325 $ ] reduces in finitely many steps to a head normal form @xmath326 where @xmath327 . by working backward through this reduction sequence",
    ", we may locate the ancestor within @xmath325 $ ] of this head occurrence of @xmath274 .",
    "since @xmath274 does not appear free in @xmath328 , this occurs within some @xmath329 , and clearly it must appear as the head of some subterm @xmath330 where @xmath164 is a substitution instance of @xmath331.(i ) below . ] now since @xmath329 has type @xmath273 of level @xmath4 , and @xmath332 is its only free variable , it is easy to see that all _ bound _",
    "variables within @xmath329 have pure types of level @xmath333 .",
    "let @xmath334 denote the finitely many bound variables that are in scope at the relevant occurrence of @xmath335 , and suppose each @xmath336 has type @xmath307 of level @xmath333 .",
    "by considering the form of the head reduction sequence @xmath325 \\reducesto^*_h \\lambda f.\\,{\\ccase\\;zp\\;\\oof\\;(\\cdots)}$ ] , we now see that @xmath164 has the form @xmath337 $ ] where each @xmath338 contains at most @xmath309 and @xmath274 free .",
    "writing @xmath339 for the substitution @xmath340 $ ] , define procedures @xmath341 then @xmath342 \\gg}$ ] coincides with the term @xmath343 , which dominates the identity as shown above .",
    "thus @xmath11 is a pseudo - retract of @xmath324 , which contradicts the induction hypothesis .",
    "so @xmath27 is not a pseudo - retract of @xmath272 after all , and the proof is complete .    as an aside",
    ", we remark that for several extensions of @xmath1 studied in the literature , the situation is completely different , in that the corresponding fully abstract and universal models possess a _",
    "universal _ simple type @xmath344 of which all simple types are retracts .",
    "it follows easily in these cases that one can indeed bound the type levels of recursion operators without loss of expressivity .",
    "for example :    * in the language @xmath345 considered by plotkin @xcite , the type @xmath282 is universal , and the proof of this shows that every program in this language is observationally equivalent to one in @xmath346 .",
    "( this latter fact was already noted in @xcite . ) * in the @xmath347 ( a slight strengthening of cartwright and felleisen s language spcf @xcite ) , the type @xmath282 is again universal , and again the sublanguage @xmath348 has the same expressive power . * in the language @xmath349 of longley @xcite , the type @xmath350 is universal , but even here , all constants @xmath2 with @xmath351 are dispensable .",
    "further details of each the above scenarios may be found in @xcite .",
    "these facts may help to give some insight into why a cheap proof of our present results in the setting of pure @xmath1 should not be expected .",
    "our main results will in effect present a hierarchy of sublanguages of @xmath1 , with @xmath48 and @xmath49 as the first two rungs . however , there are also other sublanguages of interest that are either weaker than or incomparable with @xmath49 .",
    "we here offer a brief summary of some known results in order to situate our theorems within the broader picture .",
    "that @xmath49 surpasses @xmath48 in power is true but uninteresting , since the latter is an extremely weak language that can not even define addition .",
    "more representative is that @xmath49 is strictly stronger than the language @xmath352 , where @xmath353 ( a fragment of gdel s system  t ) is the @xmath6-calculus with constants @xmath354 here @xmath355 is the standard operator for primitive recursion , and @xmath356 is the classical minimization operator of type @xmath350 . on the one hand , it is an easy exercise to define both @xmath355 and @xmath356 in @xmath49 ; on the other hand , berger @xcite shows that the functional @xmath357 recursively defined by @xmath358 whilst readily expressible in @xmath49 , is not definable in @xmath359 .",
    "this functional and its higher - type analogues will play a crucial role in section  [ sec - extensional ] of the present paper .",
    "this situation is revisited in @xcite from the perspective of substructures of @xmath17 : it is shown that @xmath359 , and indeed the whole of @xmath360 , can be modelled within the substructure of _ left - well - founded _",
    "procedures , but that the above functional @xmath361 is not representable by any such procedure ; thus @xmath361 is not definable in @xmath360 . ( the reader may wish to study these results and proofs before proceeding further , as they provide a simpler instance of the basic method that we shall use in this paper . )",
    "we may make explicit a connection with programming language constructs here : for any types @xmath105 one may consider an _ iteration _",
    "operator @xmath362 which embodies the behaviour of a _ while _ construct for imperative - style loops with state @xmath3 and exit type @xmath363 .",
    "is not officially part of our system , but can ( for any given @xmath105 ) be represented as a retract of some existing simple type . ]",
    "it is an easy exercise to show that @xmath353 extended with all iterators @xmath364 is powerful enough to define both minimization and all the system  t recursors .",
    "nonetheless , the procedures for @xmath364 are easily seen to be left - well - founded , so that even this language can not define the above functional @xmath361 .",
    "we thus have a second - order functional that is definable by general recursion ( and indeed in @xmath49 ) but not by iteration , even in its higher - type manifestations . at third order , there are even ` hereditarily total ' functionals definable in @xmath49 but not by higher - type iterators , one example being the well - known _ bar recursion _ operator ( see @xcite ) .",
    "even weaker than @xmath359 is the language of _ ( strict )",
    "kleene primitive recursion plus minimization _ , denoted by @xmath365 in @xcite .",
    "this is in fact equivalent in power to a language with ( a strict version of ) @xmath366 .",
    "it is also shown in @xcite that its computational power corresponds precisely to that of computable _ left - bounded _",
    "procedures ; this is used to show that @xmath355 is not computable in @xmath365 and to obtain other non - definability results .",
    "it seems reasonable to regard left - bounded procedures as embodying the weakest higher - order computability notion of natural interest that is still turing complete .",
    "for the remainder of the paper , we take @xmath14 to be some fixed natural number greater than @xmath367 .    in this section",
    "we give an direct inductive characterization of the @xmath62-denotable elements of @xmath244 by making explicit how our interpretation works for terms of @xmath62 .",
    "the first point to observe is that we may restrict attention to @xmath62 terms in _ long @xmath368-normal form _ : that is , terms in @xmath185-normal form in which every variable or constant @xmath274 of type @xmath369 is fully applied ( i.e.  appears at the head of a subterm @xmath370 of type @xmath7 ) . moreover ,",
    "an inductive characterization of the class of such terms is easily given :    [ long - beta - eta - prop ] ( i ) a procedure @xmath371 is denotable by a @xmath62 term @xmath372 iff it is denotable by one in long @xmath368-normal form .",
    "\\(ii ) the class of long @xmath368-normal forms of @xmath62 is inductively generated by the following clauses :    1 .",
    "if @xmath373 is a normal form for each @xmath374 and @xmath375 , then @xmath376 is a normal form ( note that @xmath328 may be @xmath367 here ) .",
    "if @xmath377 is a normal form then so is @xmath378 .",
    "the numeric literals @xmath379 are normal forms .",
    "if @xmath380 is a normal form then so are @xmath381 , @xmath382 and @xmath383 for any @xmath384 .",
    "if @xmath380 , @xmath385 and @xmath386 are normal forms , then so is @xmath387",
    ". 6 .   if @xmath247 is of level @xmath4 and @xmath388 and @xmath373 are normal forms , then @xmath389 is a normal form .",
    "\\(i ) it is a well - known property of simply typed @xmath6-calculi that every term @xmath34 is @xmath368-equivalent to one in long @xmath368-normal form : indeed , we may first compute the @xmath185-normal form of @xmath34 and then repeatedly apply @xmath237-expansions to any subterms that are not already fully applied .",
    "moreover , it is shown in ( * ? ? ?",
    "* theorem  6.1.18 ) that @xmath244 is a @xmath390-algebra , so that if @xmath391 then @xmath392 in @xmath244 .",
    "this establishes the claim .",
    "\\(ii ) this is clear from the fact that no application may be headed by a @xmath6-abstraction and that all occurrences of variables and constants must be fully applied .",
    "it follows that the class of @xmath62-denotable procedures may be generated inductively by a set of clauses that mirror the above formation rules for long @xmath368-normal @xmath62 terms .",
    "we now consider each of these formation rules in turn in order to spell out the corresponding operation at the level of nsps . in section",
    "[ sec - y - k+1 ] we will show that these operations can not give rise to _ spinal _ procedures , from which it will follow that no @xmath62-denotable procedure can be spinal .",
    "for the first three formation rules , the effect on nsps is easily described :    [ nsp - nf - prop ] ( i ) if @xmath376 in @xmath52 , then @xmath393 .",
    "\\(ii ) if @xmath378 in @xmath52 , then @xmath394 . ( iii ) @xmath395 .",
    "\\(i ) immediate from the definition of @xmath396 and the fact that @xmath397 ( see the end of section  [ sec - sp0 ] ) .",
    "( ii ) , ( iii ) are part of the definition of @xmath396 .    as regards the formation rules for @xmath398 , @xmath399 , @xmath75 and @xmath400 , the situation is again fairly straightforward , although a little more machinery is needed :    [ rightward - leaf - def ] ( i ) the set of _ rightward _ ( occurrences of ) _ numeral leaves _ within a term @xmath128 is defined inductively by means of the following clauses :    1 .",
    "a meta - term @xmath201 is a rightward numeral leaf within itself .",
    "every rightward numeral leaf within @xmath401 is also one within @xmath147 .",
    "every rightward numeral leaf in each @xmath402 is also one in @xmath403 .",
    "\\(ii ) if @xmath128 is a term and @xmath402 an expression for each @xmath119 , let @xmath404 $ ] denote the result of replacing each rightward leaf occurrence @xmath119 in @xmath128 by the corresponding @xmath402 .",
    "[ rightward - leaf - prop ] @xmath405 $ ] for any expressions @xmath406 .",
    "define a ` truncation ' operation @xmath407 on normal - form expressions for each @xmath408 as follows : @xmath409 then clearly @xmath410 and @xmath411 = \\bigsqcup_c d^{(c)}[i \\mapsto e_i]$ ] . moreover",
    ", we may show by induction on @xmath412 that @xmath413 \\;.\\ ] ] the case @xmath414 is trivial since @xmath415 can only have the form @xmath201 or @xmath78 .",
    "for the induction step , the situation for @xmath416 is trivial , so let us suppose @xmath417 . then @xmath418 ) ) } \\mbox{~~by induction hypothesis } \\\\ & = & ( { \\ccase\\;g\\;\\oof\\;(j \\darrow f_j^{(c)})})[i \\mapsto e_i ] \\\\ & = & d^{(c+1)}[i \\mapsto e_i ] \\;.\\end{aligned}\\ ] ] since @xmath231 is continuous , the proposition follows by taking the supremum over @xmath412 .    from this lemma",
    "we may now read off the operations on nsps that correspond to clauses  4 and 5 of proposition  [ long - beta - eta - prop](ii ) :    [ nsp - arith - prop ] ( i ) if @xmath380 in @xmath52 , then @xmath419 $ ] ( understanding @xmath254 to be @xmath78 when @xmath420 ) ; similarly for @xmath398 and @xmath399 .",
    "\\(ii ) if @xmath380 , @xmath385 and @xmath386 , then @xmath421 $ ] where @xmath422 and @xmath423 .",
    "\\(i ) the definition of @xmath396 yields @xmath424 and by lemma  [ rightward - leaf - prop ] this evaluates to @xmath425 $ ] .",
    "likewise for @xmath398 and @xmath399 .",
    "\\(ii ) the definition of @xmath396 yields @xmath426 and by lemma  [ rightward - leaf - prop ] this evaluates to @xmath427 $ ] .    it remains to consider the formation rule involving @xmath2 .",
    "it will be convenient to regard the nsp for @xmath428 as a result of plugging simpler nsps together , in the sense indicated by the following definition . here and later",
    ", we shall follow the convention that greek capitals @xmath429 denote arbitrary environments , while roman capitals @xmath430 denote lists of variables of type level @xmath4 .",
    "[ plugging - def ] suppose given the following data :    * a variable environment @xmath35 , * a finite list @xmath152 of ` plugging variables ' @xmath274 of level @xmath4 , disjoint from @xmath35 , * a _ root expression _ @xmath431 , * a substitution @xmath432 assigning to each variable @xmath433 , a procedure @xmath434 .    in this situation , we define the _ ( @xmath14-)plugging _ @xmath435 ( often abbreviated to @xmath436 ) to be the meta - term obtained from @xmath401 by repeatedly expanding variables @xmath437 to @xmath438 . more formally , writing @xmath439 for the meta - term obtained from @xmath159 by replacing each subterm @xmath440 with @xmath437 by @xmath78",
    ", we may define , up to @xmath124-equivalence , @xmath441 \\ ; , \\\\",
    "\\pi(e,\\xi ) & = & \\bigsqcup_m \\pi^m(e,\\xi)^\\circ \\ ; , \\end{aligned}\\ ] ] where @xmath442 denotes supremum with respect to the syntactic order on meta - terms .",
    "it is easy to see that @xmath435 is well - typed in environment @xmath35 .",
    "note that some renaming of bound variables will typically be necessary in order to realize @xmath435 as a concrete term conforming to the no - variable - hiding condition ; we will not need to fix on any one particular way of doing this .",
    "the operation on nsps corresponding to clause  6 of proposition  [ long - beta - eta - prop](ii ) may now be described as follows :    [ nsp - y - prop ] suppose that @xmath247 is of level @xmath4 and that @xmath443 in @xmath62 , where @xmath444 .",
    "then @xmath445 where @xmath446 , @xmath447 , and @xmath448 for each @xmath119 .",
    "write @xmath449 $ ] where @xmath249 = \\lambda \\vec{x}.\\,{\\ccase\\;g\\,(f_\\sigma[g])\\,\\vec{x}^{\\,\\eta}\\;\\oof\\;(i \\darrow i)}$ ] as at the start of section  [ subsec - interp ]",
    ". then clearly @xmath450 ~=~ \\lambda \\vec{x}.\\ , { \\ll \\pi_{\\gamma,\\vec{x},\\{z\\}}(e,\\xi ' ) \\gg } \\mbox{~~where $ \\xi'(z ) = \\lambda \\vec{x}.e$,}\\ ] ] and the proposition follows easily .    note that in this instance of plugging , the repeated substitutions are needed only for the sake of the term @xmath438 which may contain @xmath274 free  only a single substitution step is needed for the plugging variables @xmath275 .",
    "combining propositions  [ nsp - nf - prop ] , [ nsp - arith - prop ] and [ nsp - y - prop ] with proposition  [ long - beta - eta - prop ] , the results of this section may be summarized as follows .",
    "[ denotable - inductive - thm ] the class of @xmath62-denotable procedures - in - environment @xmath451 is the class generated inductively by the following rules :    1 .   if @xmath452 is denotable for each @xmath374 and @xmath453 , then @xmath454 is denotable .",
    "if @xmath455 is denotable , then @xmath456 is denotable .",
    "each @xmath457 is denotable .",
    "4 .   if @xmath451 is denotable and @xmath54 , then @xmath458 $ ] is denotable .",
    "( the constructions for @xmath398 and @xmath399 are special cases of this ) .",
    "if @xmath451 , @xmath459 and @xmath460 are denotable , then @xmath461 $ ] is denotable .",
    "6 .   if @xmath462 is denotable where @xmath463 is of level @xmath4 , and @xmath464 is denotable for each @xmath374 , then @xmath465 is denotable , where @xmath466 , @xmath467 , and @xmath468 for each @xmath119",
    "in this section , we will introduce the crucial notion of a _ spinal term _ , and will show that the clauses of theorem  [ denotable - inductive - thm ] are unable to generate spinal terms from non - spinal ones .",
    "since the element @xmath469 is easily seen to be spinal , this will show that this procedure is not @xmath62-denotable .",
    "we will also explain how the notion of spinal term , with one slight modification , provides what we will need in order to show in section  [ sec - extensional ] that @xmath470 is not @xmath62-definable in @xmath18 .",
    "slightly more precisely , writing @xmath471 $ ] as before , we will show that the procedure @xmath472 $ ] can not be generated by the above constructions .",
    "this will suffice to show that @xmath100 itself can not be so generated , since the only means of generating non - nullary @xmath6-abstractions is via clause 2 of theorem  [ denotable - inductive - thm ] . to this end",
    ", we will actually introduce the notion of a _ @xmath473-spinal term _ , where @xmath474 is a free variable which we shall treat as fixed throughout the whole of the subsequent discussion .    to motivate the definition of @xmath473-spinal term ,",
    "let us try to explain informally the crucial difference between @xmath100 and @xmath475 ( say ) that we are trying to capture .",
    "the most obvious difference between these procedures is that @xmath100 involves an infinite sequence of nested calls to a variable @xmath473 of type level @xmath476 , whereas @xmath475 does not .",
    "one s first thought might therefore be to try and show that no procedure involving an infinite nesting of this kind can be constructed using the means at our disposal corresponding to @xmath62 terms .    as it stands , however , this is not the case .",
    "suppose , for example , that @xmath477 and @xmath478 are @xmath48 terms defining a standard retraction @xmath479 .",
    "specifically , let us inductively define @xmath480 now consider the @xmath0 program @xmath481 this is essentially just a representation of @xmath475 under our encoding of type @xmath14 in type @xmath5 .",
    "a simple calculation shows that the nsps for @xmath100 and @xmath482 are superficially very similar in form , both involving an infinite sequence of nested calls to @xmath474 .",
    "( these nsps are shown schematically in figure  [ y_z_nsps ] for the case @xmath483 . )",
    "we will therefore need to identify some more subtle property of nsps that differentiates between @xmath100 and @xmath482 .",
    "[ y_z_nsps ]     and @xmath484 . here",
    "@xmath485 abbreviates @xmath486 . ]",
    "the intuitive idea will be that in the nsp for @xmath482 , the full potency of @xmath473 as a variable of type @xmath487 is not exploited , since both the input and output to @xmath473 are ` funnelled ' through the simpler type @xmath488 .",
    "( indeed , the force of theorem  [ no - retraction - thm ] above is that the type @xmath488 can not fully represent the structure of the type @xmath489 . ) broadly speaking , then , we shall define a @xmath473-spinal term to be one containing an infinite sequence of nested calls to @xmath473 but with no essential ` flattening ' of the arguments .",
    "it will then be the case that @xmath100 is @xmath473-spinal , but @xmath482 is not .",
    "some preliminaries are necessary before we can give the definition of @xmath473-spinal terms .",
    "we begin by identifying some properties that will be shared by all the terms - in - environment that we shall ever need to consider .",
    "the following ad hoc notions will be useful :    [ regular - def ] ( i ) an environment @xmath35 is _ regular _ if @xmath35 contains @xmath473 but no other variables of type level @xmath490 .",
    "\\(ii ) a term - in - environment @xmath491 is _ regular _ if @xmath35 is regular and @xmath128 is not a procedure of type level @xmath492 .    [ regular - term - prop ] if @xmath491 is regular , then all variables bound by a @xmath6-abstraction within @xmath128 are of level @xmath4 .",
    "suppose not , and suppose @xmath147 is some outermost subterm of @xmath128 with @xmath493",
    ". then @xmath147 can not be the whole of @xmath128 , since @xmath128 would then be a procedure of level @xmath494 . since @xmath128 is a normal form ,",
    "the subterm @xmath147 ( of level @xmath494 ) must therefore occur as an argument to some variable @xmath495 of level @xmath496 .",
    "but this is impossible , since @xmath35 contains no such variables , nor can such a @xmath495 be bound within @xmath128 , since the relevant subterm @xmath497 would then properly contain @xmath147 , contradicting the choice of the latter .",
    "the above proposition suggests a generalization of definition  [ regular - def](ii ) to meta - terms , which will sometimes be useful in the sequel :    [ regular - meta - def ] a meta - term - in - environment @xmath498 is _ regular _ if @xmath35 is regular and all variables bound within @xmath159 are of level @xmath4 ( whence @xmath159 is not a meta - procedure of level @xmath492 ) .",
    "let us now consider how the inductive clauses of theorem  [ denotable - inductive - thm ] may be used to generate _",
    "regular _ procedures - in - environment @xmath491 is regular .",
    "an inspection of these clauses readily confirms that the procedures resulting from each of these clauses are regular only if the constituents from which they are constructed are regular .",
    "( there is a harmless exception for clause  6 in the case that not all the variables @xmath499 actually appear in @xmath401 . )",
    "it follows that if @xmath491 is regular and @xmath62-denotable , then there is an inductive generation of @xmath491 via the clauses of theorem  [ denotable - inductive - thm ] that consists entirely of regular procedures - in - enviroment ; hence all @xmath6-abstractions within these procedures will be of level @xmath4 . in particular , all of the above would apply to @xmath500 $ ] this procedure if it were @xmath62-denotable , since this is certainly regular .",
    "we shall adopt the convention that any environment denoted by @xmath35 will contain @xmath473 as its only variable of level @xmath501 ; recall that roman letters such as @xmath502 always denote lists of variables of level @xmath4 ( which may also contribute to the environments we consider ) .",
    "we are now ready to introduce the concept of a spinal term , generalizing the structure exhibited by the terms @xmath472 $ ] .",
    "in particular , we wish to allow the crucial applications of @xmath473 to occur at positions other than the head of the enclosing abstractions @xmath503 , and also to relax slightly the requirement that the second argument be a pure @xmath237-expanded variable .",
    "[ spinal - def ] ( i ) if @xmath36 is a variable of type @xmath14 and @xmath174 a set of variables , a substitution @xmath504 $ ] is called _ @xmath505-closed _ if the @xmath506 contain no free variables , except that if @xmath507 and @xmath508 then @xmath506 may contain @xmath36 free .",
    "\\(ii ) we coinductively declare a regular expression @xmath142 to be _",
    "( @xmath473)-head - spinal _ with respect to @xmath509 iff @xmath401 has the form @xmath510 ) o\\;\\oof\\;(\\cdots)}\\ ] ] where @xmath42 $ ] is any expression context , and    1 .   for some @xmath505-closed specialization @xmath511 covering the free variables of @xmath512 other than @xmath36",
    ", we have @xmath513 , 2 .",
    "@xmath514 is head - spinal with respect to @xmath515 , where @xmath516 is the local variable environment for @xmath42 $ ] .",
    "( that is , we take ` @xmath401 is head - spinal w.r.t .",
    "@xmath509 ' to be the largest relation that satisfies the above equivalence . ) in the above setting , we may also refer to the application @xmath517 ) o$ ] as a head - spinal term .",
    "\\(iii ) we say a regular term @xmath491 is _",
    "( @xmath473-)spinal _ if it contains a head - spinal subexpression w.r.t .",
    "some @xmath509 .",
    "whilst this definition makes use of local variable environments which in principle pertain to concrete terms , it is easily seen that the notion of spinal term is @xmath124-invariant .",
    "certain aspects of condition  1 in the definition deserve comment . for the purpose of showing the non - definability of @xmath100 as an element of @xmath17",
    ", one could make do with the following simpler condition : for some _ closed _ specialization @xmath511 of the free variables of @xmath512 other than @xmath36 , we have @xmath518 . the looser condition adopted above",
    "is designed with the proof of non - definability in @xmath18 in mind : we will see in section  [ sec - extensional ] that every ( simple ) procedure representing a certain functional @xmath519 is spinal in the above sense .",
    "one might naturally expect to see the condition @xmath520 here , but it turns that the argument goes through most smoothly with @xmath521 in place of @xmath257 .",
    "( in appendix  a we will see that @xmath513 is actually equivalent to @xmath520 , although this is not needed for our main proof . )",
    "the reason for requiring @xmath511 to be @xmath505-closed is quite technical , but will emerge from the proof of lemma  [ g - lemma-2 ] . that if @xmath513 where @xmath511 is @xmath505-closed , then at least one @xmath36 in @xmath522 must originate from @xmath512 rather than from @xmath511",
    "we have not actually settled the question of whether there are procedures @xmath512 such that @xmath513 for some @xmath505-closed @xmath511 but not for any closed @xmath511 ; fortunately this is not necessary for the purpose of our proof . ]    at this point , we digress briefly to explain the small modification of this machinery that we shall need for the results of section  [ sec - extensional ] . for reasons to be explained there , these results call for a setup in which the global variable @xmath473 has the slightly different type @xmath523",
    ". we may now vary the above definition by coinductively declaring @xmath401 to be head - spinal w.r.t .",
    "@xmath509 iff @xmath401 has the form @xmath524 ) o\\;\\oof\\;(\\cdots)}\\ ] ] where @xmath525 is a procedure term of type @xmath526 and conditions  1 and 2 above are also satisfied .",
    "subject to this adjustment , all the results and proofs of the present section go through in this modified setting , with the extra argument @xmath525 playing no active role . for the remainder of this section",
    ", we shall work with a global variable @xmath473 of the simpler type @xmath527 , on the understanding that the extra arguments @xmath525 can be inserted where needed to make formal sense of the material in the modified setting .",
    "we do not expect that any confusion will arise from this .",
    "clearly @xmath500 $ ] is spinal .",
    "the main result of this section will be that every @xmath62-denotable term @xmath528 is non - spinal ( theorem  [ no - gremlin - thm ] ) .",
    "we shall establish this by induction on the generation of denotable terms as in theorem  [ denotable - inductive - thm ] , the only challenging case being the one for rule  6 .",
    "here we require some technical machinery to show that if the result of a plugging operation is spinal , then a spinal structure must already have been present in one of the components of the plugging : there is no way to ` assemble ' a spinal structure from material in two or more non - spinal fragments .",
    "the bulk of the proof will consist of some lemmas developing the machinery necessary for tackling rule 6 .",
    "we start with some technical but essentially straightforward facts concerning evaluation and the tracking of subterms and variable substitutions .",
    "[ g - lemma-1 ] suppose that @xmath529 \\gg } ~=_\\alpha~ k'[c]\\ ] ] where @xmath530,k'[-]$ ] are concrete meta - term contexts with local environments @xmath531 respectively , and @xmath532 , @xmath533 are concrete expressions .",
    "suppose also that :    1 .",
    "@xmath534 $ ] is regular ; 2 .   in the evaluation above",
    ", the head @xmath473 of @xmath412 originates from that of @xmath535 .",
    "then :    \\(i ) there is a substitution @xmath536 $ ] of level @xmath4 , with @xmath537 regular , such that @xmath538 , whence @xmath539 has the form @xmath540 .",
    "\\(ii ) if furthermore @xmath412 is head - spinal w.r.t .",
    "some @xmath509 , then also @xmath541 is head - spinal w.r.t .",
    "@xmath509 .",
    "\\(iii ) if @xmath530 $ ] contains no redexes @xmath542 with @xmath164 of type level @xmath5 , then @xmath543 is _ trivial for level @xmath14 variables _ : that is , there is an injection @xmath544 mapping each level @xmath14 variable @xmath545 to a variable @xmath546 such that @xmath547 .",
    "note that the environments @xmath531 , and hence the injection @xmath544 , will in general depend on the concrete choice of @xmath548 $ ] and @xmath549 $ ] .",
    "however , for the purpose of proving the theorem , it is clearly harmless to assume that @xmath549 $ ] is , on the nose , the concrete term obtained by evaluating @xmath548 $ ] . in this case",
    ", we will see from the proof below that each @xmath550 will be either @xmath551 itself or a renaming of @xmath551 arising from the evaluation .",
    "\\(i ) we formulate a suitable property of terms that is preserved under all individual reduction steps .",
    "let @xmath530,p , q$ ] and @xmath552 be fixed as above , and suppose that @xmath553 ~\\reducesto~ k^1[{\\ccase\\;gp^1q^1\\;\\oof\\;(\\cdots)}]\\ ] ] via a single reduction step , where the @xmath473 on the right originates from the one on the left , and moreover @xmath554 enjoy the following properties ( we write @xmath555 for the local environment for @xmath556 $ ] ) :    1 .",
    "@xmath557 $ ] is regular .",
    "2 .   there exists a substitution @xmath558 $ ] ( with @xmath559 regular ) such that @xmath560 .",
    "we claim that @xmath561 enjoy these same properties w.r.t .",
    "the local environment @xmath562 for @xmath563 $ ] . for property  1 ,",
    "note that @xmath564 $ ] can not contain any bound variables of level @xmath501 because @xmath565 $ ] does not ( see proposition  [ regular - term - prop ] ) . for property  2",
    ", we define the required substitution @xmath566 $ ] by cases on the nature of the reduction step in question :    * if the subexpression @xmath567 is unaffected by the reduction ( so that @xmath568 and @xmath569 ) , or if the reduction is internal to @xmath570 or to the rightward portion @xmath571 , or if the reduction has the form @xmath572 then the conclusion is immediate , noting that @xmath573 and taking @xmath574 .",
    "* if the reduction is for a @xmath185-redex @xmath575 where the indicated subexpression @xmath567 lies within some @xmath576 , we may again take @xmath577 to be @xmath578 , with the obvious adjustments to compensate for any renaming of bound variables within @xmath576 . in this case @xmath562",
    "may contain more variables than @xmath555 , but we will still have that @xmath579 . * if the reduction is for a @xmath185-redex @xmath575 where @xmath567 lies within @xmath580 , then @xmath581 $ ] and similarly for @xmath582 . in this case , the local environment @xmath562 for @xmath563 $ ] will be @xmath583 ( perhaps modulo renamings of the @xmath584 ) , so that the conclusion follows if we take @xmath585 $ ] where @xmath586 \\gg}$ ] for each @xmath119 ( modulo the same renamings ) .",
    "now in the situation of the lemma we will have some finite reduction sequence @xmath587 ~\\reducesto^*~ k''[{\\ccase\\;gp'q'\\;\\oof\\;(\\cdots ) } ] \\;,\\ ] ] where @xmath588 , @xmath589 , and all subterms of @xmath590 $ ] containing the hole are in head normal form .",
    "thus @xmath591\\ !",
    "\\gg}\\,=k'[-]$ ] , and there is a finite normal - form context @xmath592 \\sqsubseteq k''[-]$ ] containing the hole in @xmath590 $ ] such that @xmath592 \\sqsubseteq k'[-]$ ] . since @xmath593 themselves trivially satisfy the above invariants ( taking @xmath594 $ ] ) , we may infer by iterating the argument above that @xmath595 also satisfy these invariants with respect to some @xmath596 $ ] with @xmath597 regular .",
    "( the environment @xmath598 is correct here , as @xmath599,k''[-]$ ] have the same local environment . )",
    "we now have @xmath600 ; note too that the @xmath552 are of level @xmath4 because @xmath548 $ ] is regular .",
    "it also follows immediately that @xmath539 has the stated form .",
    "\\(ii ) if @xmath412 is head - spinal w.r.t .",
    "@xmath509 , then we see from definition  [ spinal - def ] that @xmath601 and hence @xmath602 are head - spinal w.r.t .",
    "@xmath509 .",
    "\\(iii ) from the proof of ( i ) , we see that in the reduction of @xmath603 $ ] to @xmath604 $ ] , any @xmath545 can be tracked through the local environments for the intermediate contexts @xmath556,k^1[-],\\ldots$ ] until ( if ever ) it is an eigenvariable for a @xmath185-reduction . for those @xmath551 that never serve as an eigenvariable ,",
    "it is clear from the construction that @xmath551 gives rise to some variable @xmath546 ( either @xmath551 itself or a renaming thereof ) , and that @xmath605 .",
    "we wish to show that all @xmath545 of level @xmath14 are in this category .    by hypothesis ,",
    "the meta - procedure @xmath164 whose leading @xmath6 binds @xmath551 does not occur in operator position ; nor can it occur as an argument to another @xmath6-abstraction within @xmath530 $ ] , since this would require a bound variable of level @xmath606 .",
    "it must therefore occur as a level @xmath5 argument to @xmath473 , so that we have a subterm @xmath607)\\cdots$ ] .",
    "but this form of subterms is stable under reductions , since @xmath473 is a global variable ; it follows easily that this subterm has a residue @xmath608)\\cdots$ ] in each of the intermediate reducts ( where @xmath609 is either @xmath551 or a renaming thereof ) , and thus that @xmath551 and renamings thereof are never the eigenvariable of a @xmath185-reduction .",
    "thus , in the setting of the above lemma , the subterm @xmath535 can be specialized and evaluated to yield a head - spinal term via the substitution @xmath610 $ ] .",
    "however , we wish to show more , namely that in this setting , @xmath535 itself is already a spinal term , so that the @xmath611 make no essential contribution to the spinal structure .",
    "( this is what we will need in order to show that @xmath14-pluggings can not manufacture spinal terms out of non - spinal ones . )",
    "this is shown by the next lemma , whose proof forms the most complex and demanding part of our entire argument .",
    "the main challenge will be to show that all the head - spinal occurrences of @xmath473 in @xmath612 \\gg}$ ] originate from @xmath535 rather than from @xmath611 .",
    "the reader is advised that great care is needed regarding which variables can appear free where , and for this reason we shall make a habit of explicitly recording the variable environment for practically every term or meta - term that we mention .",
    "[ g - lemma-2 ] suppose we have regular terms @xmath613 where @xmath614 \\gg}$ ] is head - spinal with respect to some @xmath509 .",
    "then @xmath535 itself is spinal .",
    "we begin with some informal intuition .",
    "the term @xmath615 \\gg}$ ] , being head - spinal , will be of the form @xmath616)\\,o\\;\\oof\\;(\\cdots ) } \\;,\\ ] ] where @xmath617 for some @xmath511 ( and likewise for @xmath512 and @xmath36 ) . here",
    "the @xmath618 clearly originates from the leading @xmath6 of @xmath146 within @xmath535 rather than from @xmath611 .",
    "suppose , however , that the second spinal occurrence of @xmath473 in @xmath128 originated from some @xmath619 rather than from @xmath535 . in order to form the application of this @xmath473 to @xmath620 , the whole content of @xmath621",
    "would in effect need to be ` passed in ' to @xmath619 when @xmath535 and @xmath611 are combined .",
    "but this is impossible , since the arguments to @xmath619 are of level @xmath333 , so by theorem  [ no - retraction - thm ] we can not funnel the whole of @xmath621 through them : that is , the interface between @xmath535 and @xmath611 is too narrow for the necessary interaction to occur .",
    "( the situation is made slightly more complex by the fact that some components of @xmath511 might also involve @xmath622 , but the same idea applies . )",
    "it follows that the second spinal @xmath473 in @xmath128 originates from @xmath535 . by iterating this argument",
    ", we can deduce that all the spinal occurrences of @xmath473 , and indeed the entire spinal structure , comes from @xmath535 .",
    "we now proceed to the formal proof . by renaming variables if necessary",
    ", we may assume for clarity that the same variable is never bound in two places within the entire list of terms @xmath623 , and that all bound variables within @xmath623 are distinct from those of @xmath552 and @xmath624 .",
    "let @xmath536 $ ] , and consider the subterm @xmath625 within @xmath535 , where @xmath626 is regular .",
    "since @xmath539 is head - spinal , @xmath627 will be some spinal term @xmath628 $ ] , where @xmath629 is head - spinal with respect to @xmath622 and @xmath630 .",
    "( here @xmath630 denotes the local environment for @xmath42 $ ] , so that @xmath631 contains no repetitions . )",
    "we will first show that the head @xmath473 of @xmath412 comes from @xmath401 rather than from @xmath543 ; we will later show that the same argument can be repeated for lower spinal occurrences of @xmath473 .    _ claim 1 : in the evaluation @xmath632 $ ] , the head @xmath473 of @xmath412 originates from @xmath401 .",
    "_    _ proof of claim 1 : _",
    "suppose for contradiction that the head @xmath473 of @xmath412 originates from some substituted occurrence of an @xmath619 within @xmath633 , say as indicated by @xmath634 $ ] and @xmath635 $ ] , where @xmath636 $ ] , @xmath637 , and @xmath638 .",
    "( here @xmath639 is the local variable environment for @xmath640 $ ] ; note that @xmath639 is disjoint from @xmath641 , but may well overlap with @xmath630 . ) then @xmath642 \\gg } ~=~ e[c ] \\;,\\ ] ] where the head @xmath473 in @xmath643 is the origin of the head @xmath473 in @xmath412 .",
    "we will use this to show that a head - spinal term may be obtained from @xmath643 via a substitution of level @xmath644 ; this will provide the bottleneck through which @xmath621 is unable to pass .",
    "we first note that the above situation satisfies the conditions of lemma  [ g - lemma-1 ] , where we take the @xmath645 of the lemma to be respectively @xmath646 @xmath647,d',e , c$ ] .",
    "condition  1 of the lemma holds because @xmath626 and @xmath537 are clearly regular , so that @xmath401 and hence @xmath648 involve no bound variables of level @xmath501 ( see proposition  [ regular - term - prop ] ) ; conditions  2 and 3 are immediate in the present setup .",
    "we conclude that there is a substitution @xmath649 $ ] ( called @xmath650 $ ] in the statement of lemma  [ g - lemma-1 ] ) with @xmath170 the local environment for @xmath647 $ ] and @xmath651 ( recalling that @xmath630 are the local variables for @xmath42 $ ] ) , such that @xmath652 \\gg}$ ] is head - spinal and indeed of the form @xmath653 with @xmath654 as above .",
    "furthermore , the only @xmath185-redexes in @xmath648 are those arising from the substitution @xmath543 , with some @xmath655 of level @xmath14 as operator .",
    "there are therefore no @xmath185-redexes in @xmath648 with an eigenvariable of level @xmath14 , so by lemma  [ g - lemma-1](iii ) , the substitution @xmath656 $ ] is trivial for variables of level @xmath14 .",
    "note also that @xmath170 ( the environment for @xmath647 $ ] ) subsumes @xmath639 ( the environment for @xmath640 $ ] ) ; it is disjoint from @xmath657 but may well overlap with @xmath630 .",
    "let us now split the substitution @xmath656 $ ] as @xmath658 $ ] , where @xmath659 consists of the variables in @xmath170 of level @xmath14 , and @xmath660 consists of those of level @xmath333 .",
    "by lemma  [ g - lemma-1](iii ) , the substitution for @xmath659 is trivial : that is , there is a mapping associating with each @xmath661 a variable @xmath662 such that @xmath663 .",
    "( indeed , the proof of lemma  [ g - lemma-1](iii ) shows that these variables are never specialized by a @xmath185-reduction in the course of evaluating @xmath664 $ ] , though they may be renamed . )",
    "summarizing , we have that @xmath665 \\gg } ~=~ { \\ccase\\;gf'o'\\;\\oof\\;(\\cdots ) } \\ ; ,   \\\\",
    "\\gamma,\\vec{v}\\,',\\vec{z } & \\vdash & d ' = { \\ccase\\;gp'q'\\;\\oof\\;(\\cdots ) } \\ ; , \\\\",
    "\\gamma , x',\\vec{v}\\,',\\vec{y}\\ , ' & \\vdash & \\vec{t } \\;,\\end{aligned}\\ ] ] where @xmath649 $ ] is trivial for level @xmath14 variables , and @xmath666 is head - spinal w.r.t .",
    "@xmath667 . from this",
    "we may read off that @xmath668 \\gg } ~=~ o ' \\;.\\ ] ] we may henceforth regard @xmath669 as a term in environment @xmath670 , since our conventions ensure that the variables of @xmath671 come from @xmath535 rather than @xmath619 and so do not appear bound in @xmath669 . harmlessly",
    "write @xmath672 $ ] even though the variables of @xmath671 do not appear in @xmath669 .    since @xmath622 does not occur free in @xmath669 , each free occurrence of @xmath622 in @xmath620 above",
    "must originate from some @xmath673 , which must furthermore have some type @xmath307 of level @xmath333 , since if @xmath674 had level @xmath14 then we would have @xmath663 which does not contain @xmath622 free .",
    "in fact , we may decompose the substitution @xmath656 $ ] as @xmath675 $ ] followed by @xmath676 $ ] , since none of variables of @xmath660 appear free in the @xmath677 for @xmath661 . setting @xmath678 \\gg}$ ] ( so that @xmath679 is just @xmath669 with the variables in @xmath659 rewritten via @xmath544 ) , we therefore have @xmath680 \\gg}\\ , = o'$ ] .",
    "thus : @xmath681 \\gg } ~=~ o ' \\;.\\end{aligned}\\ ] ] we may exploit this to manifest @xmath11 as a pseudo - retract of a level @xmath333 product type , contradicting theorem  [ no - retraction - thm ] . specifically , recalling that @xmath666 is head - spinal w.r.t .",
    "@xmath667 , take @xmath682 $ ] an @xmath683-closed substitution such that @xmath617 as in definition  [ spinal - def ] ; we may assume that @xmath684 is exactly @xmath685 .",
    "reordering our variables , we may now write @xmath686 . next , let us split @xmath511 into two independent parts : a substitution @xmath687 $ ] covering the variables in @xmath685 of level @xmath688 ( where @xmath689 ) , and @xmath690 $ ] covering those of level @xmath333 ( where @xmath691 ) . set @xmath692 \\gg}$ ] , so that @xmath693 where @xmath694 consists of the variables of @xmath670 of level @xmath333 .",
    "the idea is that @xmath693 may now serve as one half of a suitable pseudo - retraction . for the other half ,",
    "let @xmath695 $ ] denote the effect of the substitution @xmath676 $ ] followed by @xmath696 $ ] ( the order is important here as @xmath660 and @xmath684 may overlap ) .",
    "since @xmath697 and @xmath686 and @xmath698 , this substitution does indeed cover at least the variables of @xmath694 and we have @xmath699 .",
    "we may now verify that @xmath693 and @xmath699 constitute a pseudo - retraction as follows :    @xmath700 \\gg } \\\\     & = & { \\ll q'^ * [ \\vec{w}\\,^+ \\mapsto \\vec{r}\\,^+ ] [ \\vec{y}\\,^- \\mapsto \\vec{t}\\,^- ] [ \\vec{w } \\",
    "\\mapsto \\vec{r}\\ , ] \\gg } \\\\     & = & { \\ll ( q'^ * [ \\vec{y}\\,^- \\mapsto \\vec{t}\\,^- ] ) [ \\vec{w } \\",
    "\\mapsto \\vec{r}\\ , ]   \\gg } \\\\     & = & { \\ll { o'}^\\circ \\gg } ~\\succeq~ { x'}^\\eta \\;.\\end{aligned}\\ ] ]    as regards the second equation , the first substitution @xmath701 $ ] may be safely omitted as @xmath702 and @xmath660 are disjoint and the terms @xmath703 do not contain any of the @xmath660 free . we therefore have @xmath11 as a pseudo - retract of a product of level @xmath333 types .",
    "this contradicts theorem  [ no - retraction - thm ] , so the proof of claim 1 is complete .    in order to continue this analysis to greater depth ,",
    "let us now suppose that the originating occurrence of the head @xmath473 in @xmath412 is as indicated by @xmath704 $ ] , where @xmath705 .",
    "( here @xmath706 is the local environment for @xmath85 $ ] .",
    "the symbols @xmath707 are available for recycling now that the proof of claim  1 is complete . )",
    "then we have @xmath708)\\vec{s } \\gg } ~=~ e[c ] \\;,\\ ] ] where @xmath412 is head - spinal w.r.t .",
    "@xmath683 , and the head @xmath473 of @xmath643 is the origin of the head @xmath473 of @xmath412 .",
    "( recall that @xmath630 is the local environment for @xmath42 $ ] and that @xmath709 $ ] is regular , whence @xmath710 . )",
    "we claim that once again we are in the situation of lemma  [ g - lemma-1 ] , taking @xmath645 of the lemma to be respectively @xmath711 , @xmath712)\\vec{s}$ ] , @xmath713 .",
    "conditions  2 and 3 of the lemma are immediate in the present setup ; for condition  1 , we again note that @xmath714 = e$ ] and @xmath537 are regular , so by proposition  [ regular - term - prop ] contain no bound variables of level @xmath501 ; hence the same is true for @xmath715)\\vec{s}$ ] . applying lemma  [ g - lemma-1 ] , we obtain a substitution @xmath716 $ ] of level @xmath4 ( with @xmath717 ) , where @xmath718 and @xmath719 are regular , such that @xmath720 \\gg}\\ ] ] is head - spinal w.r.t .",
    "@xmath683 , and indeed of the form @xmath653 with @xmath654 as above .",
    "( we may in fact write just @xmath721 , since by assumption the variables of @xmath624 do not overlap with the free or bound variables of @xmath535 so do not appear in @xmath535 . )",
    "we may also read off that @xmath722 and @xmath723 .",
    "as regards the substitution @xmath724 $ ] , it is clear that this extends @xmath725 $ ] since the evaluation of @xmath715)\\vec{s}$ ] starts by @xmath185-reducing this term .",
    "moreover , the argument of lemma  [ g - lemma-1](iii ) shows that @xmath726 is trivial for any level @xmath14 variables in @xmath706 , as @xmath85 $ ] is in normal form .",
    "we are now back precisely where we started , in the sense that @xmath727 themselves satisfy the hypotheses of lemma  [ g - lemma-2 ] , with @xmath728 now playing the role of @xmath35 and @xmath729 that of @xmath624 .",
    "explicitly , we have regular terms @xmath730 ( so that @xmath731 ) where @xmath732 \\gg}$ ] is head - spinal w.r.t .  @xmath733 .",
    "we can therefore iterate the above argument to obtain an infinite descending chain of subterms @xmath734 \\ ; , \\\\",
    "\\gamma,\\vec{v},x',\\vec{v}\\ , '' \\vdash & d ' = & { \\ccase\\;gp'q'\\;\\oof\\;(\\cdots ) } \\ ; , &   p ' = & \\lambda x''.\\,c'[d '' ] \\ ; , \\\\",
    "\\gamma,\\vec{v},x',\\vec{v}\\,'',x'',\\vec{v}\\ , '' '' \\vdash & d '' = & { \\ccase\\;gp''q''\\;\\oof\\;(\\cdots ) } \\ ; , & p '' = & \\lambda x'''.\\,c''[d ' '' ] \\ ; , \\\\ & \\cdots & & \\cdots & \\end{array}\\ ] ] along with associated substitutions @xmath543 , @xmath726 , @xmath735 applicable to @xmath736 respectively , such that the terms @xmath737 , @xmath738 , @xmath739 coincide with the successive procedure subterms @xmath740 from the spine of the original @xmath128 , and likewise @xmath741 ,",
    "@xmath742 , @xmath743 coincide with @xmath744 .",
    "we can not quite conclude that @xmath535 is head - spinal , because the critical @xmath36 in @xmath745 might originate not from @xmath746 but from a level @xmath14 term in @xmath611 ( for example ) .",
    "however , we can show that this problem does not arise for @xmath747 , essentially because @xmath748 are bound locally within @xmath146 .",
    "we will in fact show that @xmath643 is head - spinal w.r.t .",
    "@xmath749 , where @xmath706 is the local environment for @xmath85 $ ] ; this will imply that @xmath535 is spinal . in the light of definition  [ spinal - def ]",
    ", it will be sufficient to show that @xmath750 for some @xmath749-closed specialization @xmath751 covering the free variables of @xmath669 except @xmath622 ( namely those of @xmath752 ) ; the same argument will then obviously apply also to @xmath753 .",
    "recall that @xmath754 and @xmath755 . since @xmath666 is head - spinal w.r.t .",
    "@xmath667 , we may as before take @xmath682 $ ] @xmath683-closed such that @xmath617 , where @xmath756 and @xmath757 .",
    "now define @xmath758 \\;,\\ ] ] ( where we write @xmath759 as @xmath760 , and @xmath761 denotes the restriction of @xmath511 to @xmath35 ) .",
    "this covers the free variables of @xmath669 except @xmath622 , and we have @xmath762 because @xmath763 and @xmath698 .",
    "moreover , we have @xmath764)[\\vec{w}\\,^\\gamma \\mapsto \\vec{r}\\,^\\gamma ] ~=~ ( q'^{\\dag'})^\\circ ~\\approx~ o^\\circ ~\\succeq~ x'^\\eta\\ ] ] since @xmath765 contains no free variables except @xmath36 . to check that @xmath751 is @xmath749-closed ,",
    "it remains to show that that @xmath766 may contain @xmath622 free only when @xmath767 and @xmath320 is of level @xmath333 .",
    "( indeed , it is because of the possibility of @xmath622 occurring free in these terms that the machinery of @xmath509-closed substitutions is necessary at all . )",
    "the remaining cases are handled as follows :    * the terms @xmath611 exist in environment @xmath598 , so do not involve @xmath622 or any of the variables of @xmath630 .",
    "since @xmath511 is @xmath683-closed , it follows that the terms @xmath768 do not involve @xmath622 . * for any variables @xmath769 of level @xmath14 , we have @xmath770 which contains no free variables of level @xmath333 , so that @xmath771 can not involve @xmath622 . * the @xmath772 can not involve @xmath622 , since @xmath511 is @xmath683-closed and @xmath35 is disjoint from @xmath630 .",
    "this completes the verification that @xmath535 is spinal .    from the above lemma",
    "we may immediately conclude , for example , that in the setting of lemma  [ g - lemma-1 ] the term @xmath535 is spinal .",
    "we are now ready for the main result of this section :    [ no - gremlin - thm ] every @xmath62-denotable procedure @xmath451 is non - spinal .    in the light of section  [ sec - denotations ] , it will suffice to show that the clauses of theorem  [ denotable - inductive - thm ] can not generate spinal terms from non - spinal ones . for clauses",
    "15 this is very easily seen . for clause 6",
    ", it will be sufficient to show that non - spinal terms are closed under @xmath14-plugging , and it is here that the machinery of lemmas  [ g - lemma-1 ] and [ g - lemma-2 ] comes into play .",
    "suppose that @xmath773 where @xmath431 and @xmath774 for each @xmath437 .",
    "for later convenience , to each @xmath775 let us associate the procedure @xmath776 ; it is then clear from the definition of plugging and the evaluation theorem that @xmath777 \\gg}$ ] and that @xmath778 \\gg}$ ] for each @xmath119",
    ".    it will be natural to frame our argument contrapositively .",
    "so suppose that @xmath128 is spinal , i.e.  @xmath128 contains some head - spinal expression @xmath412 at position @xmath530 $ ] .",
    "we shall focus on the head occurrence of @xmath473 in @xmath412 .",
    "clearly this occurrence must originate from some normal - form term fragment @xmath779 involved in the above plugging ( which may be either @xmath401 or some @xmath438 ) .",
    "we will show that @xmath780 itself is spinal .      by lemma  [ g - lemma-1 ]",
    ", we may therefore conclude that for a suitable substitution @xmath610 $ ] with @xmath789 regular , @xmath790 \\gg}$ ] is head - spinal .",
    "( note that the local variables of @xmath85 $ ] do not appear in @xmath791 , because @xmath779 and @xmath792 . )",
    "equivalently , we may say that @xmath793 \\gg}$ ] is head - spinal , where @xmath794 ~=~      [ \\vec{z}\\mapsto\\vec{r } , ~\\vec{v}\\mapsto\\vec{s}\\ , ]      \\;,\\ ] ] so that @xmath795 and @xmath796 .",
    "( note that the @xmath639 do not appear free in @xmath611 , nor the @xmath552 in @xmath797 . )",
    "since @xmath798 and @xmath799 are regular , we are in the situation of lemma  [ g - lemma-2 ] , so may conclude that @xmath535 itself is spinal , and hence that @xmath780 is spinal .",
    "we have thus shown that @xmath14-plugging can not assemble spinal terms from non - spinal ones , and this completes the proof .",
    "in particular , since the procedure @xmath500 $ ] mentioned at the start of the section is spinal , we may conclude that this procedure is not @xmath62-denotable , and hence neither is the procedure @xmath100 .",
    "this establishes theorem  [ sp0-main - thm ] .    in the following section",
    ", we shall exploit the fact that theorem  [ no - gremlin - thm ] also holds relative to the modified notion of spinal term appropriate to a variable @xmath800 .",
    "finally , we shall use the fact that this theorem also holds for an innocuous extension of @xmath62 with a constant @xmath801 , whose denotation in @xmath17 we take to be @xmath802 to see this , it suffices to add an extra clause to the inductive proof of theorem  [ no - gremlin - thm ] noting that the procedure for @xmath803 is non - spinal .",
    "( the significance of the operator @xmath803 is discussed extensively in @xcite . )",
    "as a slightly more subtle example , consider the procedure @xmath808\\;\\oof\\;(i \\darrow { c[g , x ' ] } ) } ) x^\\eta\\;\\oof\\;(k \\darrow k ) } \\;.\\ ] ] here , within the @xmath618 subterm , we have smuggled in a repetition of the top - level computation @xmath809 $ ] before proceeding to evaluate what is really required .",
    "the effect is that @xmath810\\;\\oof\\;(i \\darrow c[g , x'])}$ ] may be extensionally below @xmath811 $ ] , and this may indeed affect the result when @xmath473 is applied .",
    "however , this can only happen when @xmath812 is undefined anyway , so it is easy to see that @xmath813 as a whole will have the same extension as @xmath100 .",
    "yet another way to construct procedures extensionally equivalent to @xmath100 is to vary the subterms of the form @xmath238 ( where @xmath36 has type @xmath14 ) .",
    "for instance , in the case @xmath287 , we could replace @xmath238 by an extensionally equivalent term such as @xmath814 this is different in character from the previous examples : rather than simply repeating the computation of @xmath815 , we are performing the specific computation @xmath816 which we can see to be harmless given that this point in the tree has been reached . clearly , such ` time - wasting ' tricks as the above may be combined and elaborated to yield more complex examples of procedures equivalent to @xmath23 .    however , all of the above are rather innocuous variations and do not really yield a fundamentally different method of computing fixed points .",
    "for example , the bodies of both @xmath817 are still head - spinal terms , and it is essentially the spines that are really computing the desired fixed point by the canonical method .",
    "this suggests that we should try to show that every procedure extensionally equivalent to @xmath100 or @xmath818 is spinal ; from this it would follow easily by theorem  [ no - gremlin - thm ] that the fixed point functional @xmath100 or @xmath818 in @xmath18 is not definable in @xmath62 .",
    "unfortunately , we are currently unable to show this in the case of @xmath100 : indeed , the syntactic analysis of procedures @xmath819 appears to present considerable technical difficulties .",
    "we shall establish the result for the case of @xmath818 , although even here , it is easiest to concentrate not on @xmath818 itself , but on a certain functional @xmath820 that is readily definable from it .",
    "specifically , within @xmath15 , let us define @xmath821 so that informally @xmath822",
    "( this generalizes the definition of the functional @xmath361 mentioned at the end of section  [ sec - background ] . ) for each @xmath47 , let @xmath823 = \\phi\\,g\\,{\\widehat{n } } : { k+1}$ ] , and let @xmath824 denote the canonical nsp for @xmath825 $ ] ( that is , the one arising from the above @xmath1 definition via the standard interpretation in @xmath17 ) .",
    "these procedures may be defined simultaneously by : @xmath826    by a syntactic analysis of the possible forms of ( simple ) procedures @xmath827 , we will show that any such @xmath746 is necessarily spinal .",
    "here we have in mind the modified notion of spinal term that is applicable to terms involving a global variable @xmath828 , where @xmath829 ( see the explanation following definition  [ spinal - def ] ) . using theorem  [ no - gremlin - thm ] ( understood relative to this modified setting )",
    ", it will then be easy to conclude that within @xmath18 , the element @xmath830 \\rsem}$ ] , and hence @xmath470 itself , is not @xmath62-definable in @xmath18 .    to show that any @xmath831 is head - spinal",
    ", our approach will be as follows .",
    "first , we show that any such @xmath746 must broadly resemble @xmath824 in at least its top - level structure , in that @xmath746 must have the form @xmath832 , where the arguments @xmath833 are closely related to the corresponding arguments @xmath834 occurring within @xmath824 .",
    "we do this by showing that if @xmath746 were to deviate in any way from this prescribed form , we would be able to cook up procedures @xmath835 and @xmath836 manifesting an extensional difference between @xmath746 and @xmath824 , i.e.  such that @xmath837x \\not\\approx p_n[g \\mapsto g]x$ ] .",
    "( contrary to our usual convention , we will here use the uppercase letters @xmath838 to range over normal - form closed procedures that may be substituted for @xmath839 respectively . ) in particular , we shall establish a sufficiently close relationship between @xmath328 and @xmath840 that the same analysis can then be iterated to arbitrary depth , showing that @xmath746 has a spinal structure as required .",
    "the main complication is that @xmath328 need not superficially resemble @xmath840 , since within @xmath328 , the crucial application of @xmath473 that effectively computes the value of @xmath840 may be preceded by other ` time - wasting ' applications of @xmath473 ( the idea is illustrated by the example @xmath813 above ) .",
    "however , it turns out that such time - wasting subterms @xmath841 must be of a certain kind if the extensional behaviour @xmath831 is not to be jeopardized : in particular , the first argument @xmath842 must evaluate to some @xmath843 .",
    "( as in the example of @xmath813 , the idea is that if the subterm @xmath841 merely repeats some ` outer ' evaluation , it will make no overall difference to the extension if the evaluation of this subterm does not terminate . ) in order to formulate the relationship between @xmath328 and @xmath840 , we therefore need a means of skipping past such time - wasting applications in order to reach the application of @xmath473 that does the real work .",
    "this is achieved with the help of a _ masking _ operator @xmath844 , which ( for any @xmath845 ) overrides the behaviour of @xmath473 on numerical arguments @xmath846 with a trivial behaviour returning the dummy value @xmath367 .",
    "we now proceed to our formal development . as a brief comment on notation",
    ", we recall from section  [ sec - background ] that the relations @xmath257 and @xmath261 of observational equivalence and inequality make sense not just for elements of @xmath17 but for arbitrary meta - terms ( including applications ) , closed or otherwise . throughout this section , for typographical convenience",
    ", we will tend to express the required relationships mostly at the level of meta - terms , writing for instance @xmath847 rather than the equivalent @xmath848 or @xmath849 .",
    "we shall also perpetrate other mild abuses of notation , such as writing a procedure @xmath850 simply as @xmath201 ( except for special emphasis ) , @xmath129 as @xmath78 , @xmath238 as @xmath36 , a meta - expression @xmath851 just as @xmath852 , and abbreviating a substitution @xmath853 $ ] to @xmath854 $ ] .",
    "we shall say that @xmath855 is _ strict _ if @xmath856 for any @xmath857 .",
    "clearly , @xmath194 is strict iff @xmath858 . in connection with meta - terms with free variable @xmath473",
    ", we shall write @xmath859 to mean that @xmath860 \\approx t'[g \\mapsto g]$ ] for all _ strict _ @xmath194 ; the notation @xmath861 is used similarly . we shall actually analyse the syntactic forms of procedures @xmath862 based on the assumption that @xmath863 .",
    "we shall say a procedure @xmath862 is _ simple _ if for every application @xmath864 appearing within @xmath746 , the first argument @xmath865 is a numeral @xmath850 .",
    "the following observation simplifies our analysis of terms somewhat ; it uses the operator @xmath803 introduced at the very end of section  [ sec - y - k+1 ] .",
    "[ simple - prop ] if there is a procedure @xmath866-denotable in @xmath62 , then there is a simple procedure @xmath867 denotable in @xmath868 .",
    "suppose @xmath862 is @xmath62-denotable where @xmath863 , and write @xmath869 ~=~ \\lambda izx.\\,{\\ccase\\;i\\;\\oof\\;(j \\darrow g(\\lambda.j)z^\\eta x^\\eta ) } \\;.\\ ] ] take @xmath870 \\gg}$ ] ; it is easy to check that @xmath669 is denotable in @xmath868 .",
    "then @xmath871 since @xmath872 \\approx g$ ] for all strict @xmath194 , so @xmath873 .",
    "finally , @xmath669 is clearly simple : every occurrence of @xmath473 within @xmath874 $ ] has a numeral as its first argument , so the same will be true of @xmath875 \\gg}$ ] .    for any @xmath845 ,",
    "let us define the _ masking _ @xmath876 of @xmath473 to be the following procedure term : @xmath877 we may also write @xmath878 for @xmath879 $ ] if @xmath164 is any meta - procedure of type @xmath880 .",
    "we write @xmath881 simply as @xmath882 ; note also that @xmath883 .",
    "clearly @xmath884 .",
    "we shall say that a meta - term @xmath885 is _ trivial at @xmath201 _ if @xmath886 . note that @xmath887 is trivial at each of @xmath888 for any @xmath194 ; indeed , @xmath194 is trivial at @xmath888 iff @xmath889 .",
    "the following lemma now implements our syntactic analysis of the top - level structure of simple procedures @xmath863 .",
    "[ qn - lemma ] suppose @xmath862 is simple and @xmath863",
    ". then @xmath746 has the form @xmath890 , where :    1 .",
    "@xmath891 , 2 .",
    "@xmath892 \\succeq x^\\eta$ ] whenever @xmath194 is trivial at @xmath201 , 3 .",
    "@xmath893 \\succeq^\\mydot p_{n+1}$ ] for any @xmath179 .",
    "suppose @xmath894 .",
    "clearly @xmath401 is not constant since @xmath895 ; and if @xmath401 had head variable @xmath36 , we would have @xmath896(\\lambda w.\\bot ) = \\bot$ ] , whereas @xmath897(\\lambda w.\\bot ) = 0 $ ] , contradicting @xmath863 .",
    "so @xmath401 has the form @xmath898 .    for claim  1 , we have @xmath899 for some @xmath900 because @xmath746 is simple .",
    "suppose that @xmath901 , and consider @xmath902 then for any @xmath179 , clearly @xmath903x \\approx \\bot$ ] , whereas @xmath904x \\approx g'(\\lambda.n)(\\cdots)x \\approx 0 $ ] , contradicting @xmath863 .",
    "thus @xmath891 .    for claim  2 ,",
    "suppose that @xmath905 but not @xmath906",
    "\\succeq x^\\eta$ ] ; then we may take @xmath907 and @xmath908 such that @xmath909 but @xmath910u \\not\\approx l$ ] .",
    "now define @xmath911 then @xmath912 , so @xmath913 where @xmath914 $ ] ; hence @xmath915 and so @xmath903x \\approx \\bot$ ] . on the other hand , we have @xmath916x & \\approx & { \\ccase\\;g'(\\lambda.n)p_{n+1}^*x\\;\\oof\\;(i \\darrow i ) } \\\\ & \\approx & { \\ccase\\;xu\\;\\oof\\;(l \\darrow g(\\lambda.n)p_{n+1}^*x ) } ~\\approx~ 0 \\;,\\end{aligned}\\ ] ] contradicting @xmath863 .",
    "thus @xmath906 \\succeq x^\\eta$ ] .",
    "for claim  3 , suppose that @xmath917x ' \\approx l$ ] for some strict @xmath835 and @xmath918 .",
    "we wish to show that @xmath919x ' \\approx l$ ] for any @xmath179 .",
    "suppose not , and consider @xmath920 then @xmath921 , so @xmath922x ' \\not\\approx l$ ] .",
    "moreover , since @xmath923 by claim  1 , we see that @xmath915 , where @xmath914 $ ] , so that @xmath903x \\approx \\bot$ ] . on the other hand , we have @xmath916x & \\approx & { \\ccase\\;g'(\\lambda.n)p_{n+1}^*x\\;\\oof\\;(i \\darrow i ) } \\\\ & \\approx & { \\ccase\\;p_{n+1}^*x'\\;\\oof\\;(l \\darrow 0 ) } \\;.\\end{aligned}\\ ] ] here , since @xmath840 does not contain @xmath36 free , we have @xmath924 $ ] . but it is easy to see that @xmath925 \\approx p_{n+1}[g]$ ] , since every occurrence of @xmath473 within @xmath840 is applied to @xmath926 for some @xmath927 , and for all such @xmath928 we have @xmath929 .",
    "( since @xmath840 contains infinitely many applications of @xmath473 , an appeal to continuity is formally required here . ) but @xmath917x ' \\approx l$ ] by assumption ; thus @xmath930 , allowing us to complete the proof that @xmath904x \\approx 0 $ ] .",
    "once again , this contradicts @xmath863 , so claim  3 is established .    in the light of appendix",
    "a , one may strengthen claim  2 of the above lemma by writing @xmath892 \\approx x^\\eta$ ] .",
    "this gives a fuller picture of the possible forms of terms @xmath831 , but is not needed for showing that such @xmath746 are spinal .    we have now completed a circle , in the sense that claim  3 tells us that @xmath931 \\gg}$ ] itself satisfies the hypothesis for @xmath746 ( with @xmath932 in place of @xmath201 ) , and so can be iteratively subjected to the same analysis . however , it still remains to see what this analysis tells us about the syntactic form of @xmath328 itself , as distinct from @xmath933 \\gg}$ ] .",
    "( in the light of claim  3 , the variable @xmath36 may be safely ignored here . )",
    "[ q - structure - lemma ] suppose @xmath862 is simple and @xmath934 \\succeq^\\mydot p_{n'}$ ]",
    ". then @xmath746 has the form @xmath935 $ ] , where :    1 .",
    "@xmath42 $ ] has empty local variable environment , 2 .",
    "@xmath936 , 3 .",
    "@xmath892 \\succeq x^\\eta$ ] whenever @xmath194 is trivial at @xmath937 , 4 .",
    "@xmath938 \\succeq^\\mydot p_{n'+1}$ ] for any @xmath179 .",
    "let @xmath939 \\gg}$ ] . under the above hypotheses , we have by lemma  [ qn - lemma ] that @xmath669 is of the form @xmath940 , where @xmath941 , @xmath942 \\succeq x^\\eta$ ] whenever @xmath194 is trivial at @xmath928 , and @xmath943 \\succeq^\\mydot p_{n'+1}$ ] .",
    "write @xmath746 as @xmath944 $ ] where the displayed occurrence of @xmath473 originates the head @xmath473 of @xmath669 via the substitution @xmath945 $ ] .",
    "suppose that the hole in @xmath42 $ ] appeared within an abstraction @xmath946 ; then the hole in @xmath947[-]$ ] would likewise appear within such an abstraction .",
    "moreover , the evaluation of @xmath934 $ ] consists simply of the contraction of certain expressions @xmath948 to either @xmath367 or @xmath949 , followed by some reductions @xmath950 ; thus , any residue in @xmath669 of the critical @xmath473 identified above will likewise appear underneath @xmath951 .",
    "but this is impossible , because the head @xmath473 of @xmath669 is a residue of this @xmath473 by assumption .",
    "this establishes condition  1 .    in the light of this , by lemma  [ g - lemma-1](i ) we have @xmath952 , @xmath953 and @xmath954 .",
    "but since @xmath746 is simple , @xmath865 is a numeral , so @xmath955 , giving condition  2 . for condition",
    "3 , suppose @xmath194 is trivial at @xmath956 .",
    "then @xmath957 , so that @xmath958 ~\\succeq~",
    "o[g \\mapsto \\mu_{n , n'}(\\mu_{n'}(g ) ) ]     ~\\approx~ o^\\dag[g \\mapsto \\mu_{n'}(g ) ] ~\\approx~ o'[g \\mapsto \\mu_{n'}(g ) ]     ~\\succeq~ x^\\eta   \\;,\\ ] ] since @xmath959 is trivial at @xmath928 .",
    "condition  4 also holds since @xmath943 \\approx r^\\dag[g \\mapsto \\mu_{n'}(g ) ] \\approx r[g \\mapsto \\mu_{n , n'+1}(g)]$ ] , where @xmath943 \\succeq^\\mydot p_{n'+1}$ ] .",
    "[ spinal - cor ] if @xmath862 is simple and @xmath863 , then @xmath746 is spinal ( in the modified sense ) .",
    "since condition  3 of the above lemma matches its hypotheses , starting from the assumption that @xmath960 \\succeq^\\mydot p_n$ ] , we may apply the lemma iteratively to obtain a spinal structure as prescribed by definition  [ spinal - def ] ( subject to the relevant adjustments for @xmath961 ) .",
    "thus , if there exists a @xmath62-denotable procedure @xmath962 , for instance , then by proposition  [",
    "simple - prop ] there is also a simple such procedure @xmath963 denotable in @xmath868 , and by corollary  [ spinal - cor ] , this @xmath963 will be spinal in the modified sense . but",
    "this contradicts theorem  [ no - gremlin - thm ] ( understood relative to the modified setting , and applied to @xmath868 as indicated at the end of section  [ sec - y - k+1 ] ) .",
    "we conclude that no @xmath962 can be @xmath62-denotable .",
    "since the interpretation of @xmath62 in @xmath18 factors through @xmath17 , this in turn means that within the model @xmath18 , the element @xmath830 \\rsem}$ ] is not definable in @xmath62 . on the other hand , this element is obviously definable relative to @xmath964 even in @xmath49 , so the proof of theorem  [ sf - main - thm ] is complete .",
    "we have so far shown that the element @xmath965 is not @xmath62-definable . to complete the picture",
    ", we shall now refine our methods slightly to show that even @xmath966 is not definable . since @xmath27 is clearly a retract of every level @xmath5 type",
    ", this will establish that no @xmath967 where @xmath26 is definable in @xmath62 .",
    "the idea is as follows . within each type level @xmath96 , we can stratify the types into _ sublevels _ @xmath968 where @xmath969 , essentially by taking account of the ` width ' of the type as well as its depth .",
    "we thus obtain a sublanguage @xmath970 of @xmath62 by admitting @xmath2 only for types @xmath3 of sublevel @xmath968 or lower . any putative @xmath62 term that defined @xmath966",
    "would then be a term of some @xmath970 .",
    "our previous argument showed that @xmath469 is not denotable in @xmath970 ( using the fact that @xmath11 is not a pseudo - retract of a finite product of level @xmath288 types ) , and hence that @xmath818 is not @xmath970-denotable .",
    "however , there is actually plenty of spare headroom between @xmath970 and the pure type @xmath5 which we can exploit : specifically , for a certain type @xmath971 of sublevel @xmath972 we may show that @xmath973 is not @xmath970-denotable , essentially because the relevant type @xmath974 is not a pseudo - retract of a finite product of sublevel @xmath975 types . ( a slightly different argument is needed for the case @xmath287 . ) for non - definability in @xmath18 , we again need to move up to @xmath976 , but this is still within level @xmath14 and so is easily seen to be a retract of @xmath27 .",
    "it follows that @xmath966 is not @xmath970-denotable ( where @xmath977 is arbitrary ) .",
    "the following definition sets out the more fine - grained stratification of types that we shall use .",
    "\\(i ) the _ width _ @xmath978 of a type @xmath3 is defined inductively as follows : @xmath979 for @xmath96 , we say @xmath3 has",
    "_ sublevel _",
    "@xmath968 if @xmath980 and @xmath981 .",
    "if @xmath982 , we simply say that @xmath3 has _",
    "sublevel _ @xmath367 .",
    "we order sublevels in the obvious way : @xmath367 is the lowest sublevel , and @xmath983 if either @xmath984 or @xmath985 and @xmath986 .",
    "\\(ii ) for each @xmath987 we define a type @xmath988 by : @xmath989 when @xmath96 , we may call @xmath988 the _ homogeneous _ type of sublevel @xmath968 .",
    "the following facts are easily established . here",
    "we shall say that @xmath3 is a _ simple retract _ of @xmath363 if there is a @xmath48-definable retraction @xmath990 within @xmath17 .",
    "[ sublevel - facts ] ( i ) for @xmath991 , every type of sublevel @xmath968 or lower is a simple retract of @xmath988 . hence ( for all @xmath992 ) for every finite list of types @xmath273 of level @xmath4 , there is some @xmath977 such that each @xmath273 is a simple retract of @xmath988 .",
    "\\(ii ) every finite product of level @xmath4 types is a simple retract of @xmath27 .",
    "\\(iii ) if @xmath3 is a simple retract of @xmath363 , then @xmath2 is @xmath48-definable from @xmath804 in @xmath993 .",
    "\\(i ) the first claim ( for @xmath991 ) is easy by induction on @xmath14 , and the second claim ( which is trivial when @xmath281 ) follows easily .",
    "\\(ii ) by induction on @xmath14 .",
    "the case @xmath281 is easy . for @xmath96 ,",
    "suppose @xmath994 are level @xmath4 types , where @xmath995 for each @xmath119 . here",
    "the @xmath996 are of level at most @xmath288 , so by ( i ) , we may choose @xmath977 such that each @xmath996 is a simple retract of @xmath997 .",
    "taking @xmath998 , we then have that each @xmath273 is a simple retract of @xmath999 ( with @xmath201 arguments ) .",
    "the product @xmath272 is therefore a simple retract of the type @xmath1000 .",
    "but by the induction hypothesis , the product of @xmath1001 is a simple retract of @xmath11 whence @xmath3 itself is a simple retract of @xmath27 .    we leave ( iii ) as an exercise .",
    "next , we adapt the proof of theorem  [ no - retraction - thm ] to establish the crucial gap between @xmath988 and @xmath971 .",
    "this gives an indication of how our methods may be used to map out the embeddability relation between types in finer detail , although we leave an exhaustive investigation of this to future work .",
    "[ kl - no - retraction - thm ] suppose @xmath96 . within @xmath18 ,",
    "the type @xmath971 is not a pseudo - retract of any finite product of types of sublevel @xmath1002 or lower .    in view of proposition  [ sublevel - facts](i )",
    ", it will suffice to show that @xmath971 is not a pseudo - retract of a finite power of @xmath988 .",
    "we argue by induction on @xmath14 .",
    "the arguments for both the base case @xmath287 and the step case @xmath1003 closely parallel the argument for the step case in theorem  [ no - retraction - thm ] , so we treat these two cases together as far as possible , omitting details that are easy adaptations of those in the earlier proof .",
    "suppose for contradiction that there were procedures @xmath1004 where @xmath1005 , @xmath1006 , such that @xmath1007 \\succeq z^\\eta$ ]",
    ". let @xmath291 \\gg}$ ] , so that @xmath1008 .",
    "as in the proof of theorem  [ no - retraction - thm ] , one may show that @xmath294 has the form @xmath1009 where @xmath1010 \\succeq f_i$ ] for each @xmath119 .",
    "next , we note that @xmath1011 $ ] reduces in finitely many steps to a head normal form @xmath1012 where @xmath1013 for each @xmath119 ; moreover , the ancestor of the leading @xmath274 here must lie within some @xmath329 , say at the head of some subterm @xmath1014 , where @xmath1015 is an instance of @xmath1016 via some substitution @xmath543 .    at this point , the arguments for the base case and step case part company . in the base case @xmath287 , we have that @xmath1017 where @xmath1018 ; thus there are no bound variables within @xmath329 except the top - level ones  say @xmath1019 , all of type @xmath7 .",
    "so in fact @xmath543 has the form @xmath1020 $ ] for certain meta - terms @xmath1021 .",
    "now consider the terms @xmath1022 and @xmath1023 , writing @xmath339 for the substitution @xmath340 $ ] .",
    "these compose to yield @xmath1024 , so we have expressed @xmath1025 as a pseudo - retract of @xmath1026 within @xmath18 .",
    "as already noted in the course of the proof of theorem  [ no - retraction - thm ] , this is impossible .    for the step case",
    "@xmath1003 , we proceed much as in the proof of theorem  [ no - retraction - thm ] , using the substitution @xmath543 to express @xmath974 as a retract of a finite product of types of sublevel @xmath975 or lower , contrary to the induction hypothesis .",
    "we leave the remaining details as an exercise .",
    "we now outline how the ideas of sections  [ sec - denotations ] , [ sec - y - k+1 ] and [ sec - extensional ] may be adapted to show that @xmath973 is not @xmath970-denotable .",
    "we assume that @xmath1027 for the time being ( the case @xmath287 will require special treatment ) .",
    "the adaptations are mostly quite systematic : the type @xmath971 now plays the role of @xmath27 ; types of sublevel @xmath1002 play the role of types of level @xmath4 ; @xmath974 plays the role of @xmath11 ; and types of sublevel @xmath1028 play the role of types of level @xmath333 .",
    "since the proof we are adapting is quite lengthy , we leave many routine details to be checked by the reader .",
    "first , the evident adaptation of definition  [ plugging - def ] yields a notion of _ @xmath987-plugging _ where the plugging variables are required to be of sublevel @xmath1002 , and we thus obtain an inductive characterization of the @xmath970-denotable procedures analogous to theorem  [ denotable - inductive - thm ] .",
    "we may now proceed to the ideas of section  [ sec - y - k+1 ] , taking @xmath473 to be a fixed global variable of type @xmath1029 .",
    "an environment @xmath35 is ( @xmath987-)regular if @xmath35 contains @xmath473 and all other variables in @xmath35 are of sublevel @xmath1002 .",
    "a meta - term - in - environment @xmath498 is regular if @xmath35 is regular and all variables bound within @xmath159 are of sublevel @xmath1002",
    ".    our convention here will be that @xmath35 ranges over regular environments , and roman capitals @xmath1030 range over sets of variables of sublevel @xmath1002 .",
    "the notion of spinal term carries over as follows :    [ kl - spinal - def ] ( i ) if @xmath126 is a list of variables of type @xmath974 and @xmath174 a set of variables of sublevel @xmath1002 , a substitution @xmath504 $ ] is called _ @xmath1031-closed _ if the @xmath506 contain no free variables , except that if @xmath507 and @xmath1032 is of sublevel @xmath1028 then @xmath506 may contain the @xmath126 free .",
    "\\(ii ) we coinductively declare a regular @xmath142 to be _",
    "( @xmath987-)head - spinal _ w.r.t .",
    "@xmath1031 iff @xmath401 has the form @xmath1033)\\vec{o}\\;\\oof\\;(\\cdots)}$ ] , where @xmath42 $ ] is an expression context , and    * for some @xmath1031-closed specialization @xmath511 covering the free variables of @xmath1034 other than those of @xmath126 , we have @xmath1035 , * @xmath514 is head - spinal w.r.t .",
    "@xmath1036 , where @xmath516 is the local variable environment for @xmath42 $ ] .",
    "\\(iii ) we say a regular term @xmath491 is _",
    "( @xmath987-)spinal _ if it contains a head - spinal subexpression w.r.t .",
    "some @xmath1031 .",
    "lemma  [ g - lemma-1 ] and its proof now go through with the above adaptations ; here the local environments @xmath1037 are now of sublevel @xmath1002 , and that part  ( iii ) of the lemma now states that if @xmath530 $ ] contains no redexes with operator of sublevel @xmath1038 , then the substitution @xmath543 is trivial for variables of sublevel @xmath1039 .",
    "the crucial lemma  [ g - lemma-2 ] , which forms the heart of our proof , now translates as follows :    [ kl - lemma-2 ] suppose we have @xmath987-regular terms @xmath1040 where @xmath531 are of sublevel @xmath1002 , and @xmath614 \\gg}$ ] is @xmath987-head - spinal with respect to some @xmath1031 . then @xmath535 itself is @xmath987-spinal .    the entire proof of this lemma translates systematically according to the correspondences we have indicated , invoking theorem  [ kl - no - retraction - thm ] for the fact that @xmath974 is not a pseudo - retract of a product of sublevel @xmath1028 types .",
    "the analogue of theorem  [ no - gremlin - thm ] now goes through readily , so we obtain :    if @xmath1027 , then every @xmath970-denotable procedure is non-@xmath987-spinal .    as in our original proof",
    ", we will actually use the version of this theorem for the modified notion of spinal term incorporating the extra argument @xmath525 , and for the extension of @xmath970 with the operator @xmath803 .    to adapt the material of section  [ sec - extensional ]",
    ", we take @xmath473 to be a variable of type @xmath1041 , and argue that the @xmath1042-definable element @xmath1043 within @xmath18 is not @xmath970-definable .",
    "the proof is a completely routine adaptation of that in section  [ sec - extensional ] . since @xmath1044 is readily definable from @xmath100 by proposition  [ sublevel - facts ] , this implies that @xmath966 is not @xmath970-definable . since @xmath977 was arbitrary , we have shown :    for @xmath1027 , the element @xmath966 is not definable in @xmath0 .",
    "a somewhat different approach is needed to cover the case @xmath287 .",
    "this is because at level @xmath367 our only type is @xmath7 , so we are unable to make a distinction between sublevels @xmath977 and @xmath1045 . to establish lemma  [ kl - lemma-2 ] in this case",
    ", we again wish to show that we can not pass in the content of the relevant @xmath1046 to the relevant @xmath619 , but now the idea is to appeal to the fact that @xmath1046 consists of @xmath1045 variables of type @xmath7 , whereas @xmath619 accepts at most @xmath977 arguments of type @xmath7 .",
    "( we have already seen that @xmath1025 can not be a retract of @xmath1026 . )",
    "however , we also need to exclude the possibility that the substitution @xmath511 is being used to import some components of @xmath1046",
    ". we can achieve this if we require @xmath511 to be actually closed rather than just @xmath1036-closed , and it turns out that this is permissible if we also tighten our notion of spinal term slightly , essentially to ensure that no intermediate applications of @xmath473 appear in between those declared to constitute the spine of the term :    [ strongly - spinal - def ] ( i ) a substitution @xmath504 $ ] is called _ closed _ if the @xmath506 contain no free variables .",
    "\\(ii ) we coinductively declare a regular @xmath142 to be _ strongly head - spinal _ w.r.t .",
    "@xmath1031 iff @xmath401 has the form @xmath1033)\\vec{o}\\;\\oof\\;(\\cdots)}$ ] , where @xmath42 $ ] is an expression context , and    * the hole within @xmath42 $ ] does not itself occur within an application @xmath1047 , * for some closed specialization @xmath511 covering the free variables of @xmath1034 other than those of @xmath126 , we have @xmath1035 , * @xmath514 is head - spinal w.r.t .",
    "@xmath1036 , where @xmath516 is the local variable environment for @xmath42 $ ] .",
    "the notion of strongly spinal term follows suit .",
    "the counterpart of lemma  [ g - lemma-1 ] goes through as expected , although without part  ( iii ) : the relevant sublevel distinction does not exist at type level @xmath367 , and we can not conclude that the substitution in question is trivial for all variables of type @xmath7 .",
    "we may now indicate the required changes to lemma  [ kl - lemma-2 ] and its proof :    suppose we have @xmath1048-regular terms @xmath1040 where @xmath531 are of sublevel @xmath1049 , and @xmath614 \\gg}$ ] is strongly @xmath1048-head - spinal with respect to some @xmath1031 .",
    "then @xmath535 itself is strongly @xmath1048-spinal .",
    "the proof of lemma  [ g - lemma-2 ] up to the end of the proof of claim  1 adapts straightforwardly , and is somewhat simplified by the fact that the substitution @xmath511 is closed . as sketched above , the crucial contradiction is provided by the fact that @xmath1025 is not a pseudo - retract of @xmath1026 in @xmath18 .    for the remainder of the proof ,",
    "the key point to note is that @xmath706 ( the local environment for @xmath85 $ ] ) is actually empty in this case .",
    "this is because @xmath85 $ ] is in normal form and contains no free variables of level @xmath1050 except @xmath473 , so any @xmath6-term containing the hole would need to appear as an argument to @xmath473 .",
    "it would then follow that the hole within @xmath42 $ ] lay within an argument to some occurrence of @xmath473 , as precluded by the definition of strongly spinal term .",
    "it follows trivially that the @xmath1051-closed substitution @xmath751 constructed at the very end of the proof is actually closed .",
    "moreover , the spinal structure of @xmath643 identified by the proof can not contain any intermediate applications of @xmath473 , since these would give rise under evaluation to intermediate applications of @xmath473 in the spine of @xmath615 \\gg}$ ] as precluded by definition  [ strongly - spinal - def ] .",
    "thus , the identified spinal structure in @xmath643 is actually a strongly spinal structure , and the argument is complete .",
    "a trivial adaptation of the proof of theorem  [ no - gremlin - thm ] now yields :    no @xmath1052-denotable procedure can be strongly @xmath1048-spinal .    from here on , we again follow the original proof closely .",
    "the only additional point to note is that in place of corollary  [ spinal - cor ] we now require that any simple @xmath862 with @xmath1053 must be strongly spinal , and this is in fact easily seen from the proof of lemma  [ q - structure - lemma ] .",
    "we therefore have everything we need for :    @xmath1054 is not definable in @xmath49 .",
    "previous results to the effect that @xmath23 combinators for level @xmath5 are in some way not definable from those for level @xmath14 have been obtained by damm @xcite and statman @xcite .",
    "it is convenient to discuss the latter of these first .",
    "statman works in the setting of the simply typed _ @xmath1055-calculus _ , essentially the pure @xmath6-calculus extended with constants @xmath1056 and reduction rules @xmath1057 .",
    "he gives a succinct proof that @xmath100 is not definable from @xmath475 up to computational equality , based on the following idea .",
    "if @xmath100 were definable from @xmath475 , it would follow that the recursion equation @xmath1058 could be derived using only finitely many uses of the equation @xmath1059 ( say @xmath1060 of them ) .",
    "it would then follow , roughly speaking , that @xmath1061 recursion unfoldings for @xmath475 would suffice to fuel @xmath201 recursion unfoldings for @xmath100 . on the other hand",
    ", it can be shown that the size of normal - form terms definable using @xmath201 unfoldings of @xmath100 ( as a function of the size of the starting term ) grows faster than can be accounted for with @xmath1061 unfoldings of @xmath475 .",
    "the language @xmath1055 is seemingly less powerful than @xmath1 , into @xmath1055 by representing natural numbers as church numerals ; however , it appears that predecessor is not @xmath1055-definable for this representation . ]",
    "although this is perhaps not the most essential difference between statman s work and ours .",
    "more fundamentally , statman s method establishes the non - definability only up to computational equality ( that is , the equivalence relation generated by the reduction rules ) , whereas we have been concerned with non - definability modulo observational ( or extensional ) equivalence . even for non - definability in @xmath17",
    ", it would seem an approach along statman s lines would be unlikely to yield much information , since there is no reason why the number of unfoldings of @xmath475 required to generate the nsp for @xmath100 to depth @xmath201 should not grow dramatically as a function of @xmath201 .",
    "nonetheless , it is striking that methods so markedly different from ours can be used to obtain closely related results .",
    "a result very similar to statman s was obtained earlier in damm @xcite , but by a much more indirect route as part of a far - reaching investigation of the theory of tree languages . in damm",
    "s setting , programs are _",
    "recursion schemes_ essentially , families of simultaneous ( and possibly mutually recursive ) defining equations in typed @xmath6-calculus  but in essence these can be considered as terms of @xmath1055 relative to some signature consisting of typed constants .",
    "any such program can be expanded to an infinite tree ( essentially a kind of bhm tree ) , and damm s result ( theorem  9.8 of @xcite ) is that up to tree equality , there are programs definable by level @xmath5 recursions but not level @xmath14 ones .",
    "the notion of tree equality here is more generous than computational equality ( making damm s result somewhat stronger than statman s ) , although still much more fine - grained ( in the case of a signature for @xmath1 ) than equality in @xmath17 , let alone in @xmath18 .",
    "it therefore seems unlikely , once again , that an approach to our theorems from this direction will be forthcoming .",
    "what is certainly of interest , however , is the connection that damm establishes between programming - style recursion schemes on the one hand , and hierarchies of language families on the other .",
    "specifically , damm establishes a close connection between tree grammars and @xmath6-calculus , showing that the languages inhabiting level @xmath14 of the _ _ oi - hierarchy _ _ are exactly those that can be generated by level @xmath14 recursion schemes .",
    "he also shows that the oi - hierarchy is strict , and it is from this that the superiority of level @xmath5 schemes over level @xmath14 ones is deduced .",
    "thus , whilst the statement of damm s theorem on the recursion scheme hierarchy has a syntactic flavour ( it is formulated in terms of tree equality ) , the theorem is reached via an essentially ` semantic ' investigation of the expressive power of such schemes within a particular domain , namely that of language definitions . of course , this is a long way from the setting of computable functionals over @xmath265 that we consider in the present paper ,-",
    "recursions than @xmath14-recursions in damm s setting , whereas for us , all base type objects are of course trivially definable in @xmath48 . ]",
    "and it is not clear whether there is any substantial connection to be made here , but the applications of higher - type recursions in language theory are certainly intriguing .",
    "next , we comment briefly how our work relates to the known _ game models _ of pcf @xcite .",
    "it is known that these models are in fact isomorphic to our @xmath17 , although the equivalence between the game - theoretic definition of application and our own is mathematically non - trivial ( the situation is discussed in ( * ? ? ?",
    "* section  7.4 ) ) .",
    "this raises the obvious question of whether our proofs could be conducted equally well , or better , in a game - semantical setting . whilst a direct translation is presumably possible",
    ", our present impression is that sequential procedures , and our calculus of meta - terms in particular , allows one to see the wood for the trees more clearly , and also to draw more easily on familiar intuitions from @xmath6-calculus .",
    "however , a closer look at game - semantical approaches would be needed in order to judge whether either approach really offers some genuine mathematical advantage over the other .",
    "we now turn our attention to some potential extensions and generalizations of our work .",
    "so far , we have worked mainly with a coarse stratification of types in terms of their levels , although we have illustrated in section  [ sec - pure - type ] how finer stratifications are also possible .",
    "naturally , there is scope for a still more fine - grained analysis of types and the relative strength of their @xmath23 combinators ; this is of course closely related to the task of mapping out the embeddability relation between types ( as in subsection  [ subsec - embed ] ) in finer detail .    even at level  1 ,",
    "there is some interest here .",
    "our analysis in section  [ sec - pure - type ] has shown that , for @xmath1062 ,    * the element @xmath1063 is not @xmath1064-definable from @xmath1065 , * the element @xmath1066 is not @xmath1064-definable from @xmath1065 .",
    "however , this leaves us with a small gap for @xmath18 : e.g.  we have not shown either that @xmath1067 is strictly weaker than @xmath1068 or that @xmath1068 is strictly weaker than @xmath1069 , although according to classical logic , at least one of these must be the case .",
    "( this is reminiscent of some well - known situations from complexity theory . )",
    "we expect that a more delicate analysis will allow us to fill this gap .",
    "one can also envisage even more fine - grained hierarchy obtained by admitting other base types such as the booleans or unit type .",
    "a closely related task is to obtain analogous results for the _ call - by - value _ interpretation of the simple types ( as embodied in standard  ml , for example ) . as is shown in (",
    "* section  4.3 ) , a call - by - value ( partial ) type structure @xmath1070 can be constructed by fairly general means from @xmath18 : here , for example , @xmath1071 consists of all partial functions @xmath50 rather than ( monotone ) total functions @xmath1072 , and @xmath1073 consists of partial functions @xmath1074 . from known results on the interencodability of call - by - name and",
    "call - by - value models ( see ( * ? ? ?",
    "* section  7.2 ) ) , it is easy to read off the analogue of corollary  [ no - finite - basis - cor ] for @xmath1075 ; however , more specific results on the relative strengths of various @xmath23 combinators within @xmath1070 would require more detailed reworking of our arguments .",
    "of course , one can also pose relative definability questions for other elements besides @xmath23 combinators .",
    "for instance , it is natural to consider the _ higher - order primitive recursors _ @xmath1076 of system  t , as well as the closely related _ iterators _ @xmath364 which we touched on in section  [ subsec - power - pcf1 ] : @xmath1077 we have already noted that if all iterators are available then it is easy to define all primitive recursors , but that @xmath1078 extended with iterators for all types does not suffice to define even @xmath1079 .",
    "we believe that by working with a suitably chosen substructure of @xmath17 , it should be possible to strengthen our results to show that @xmath65 extended with all iterators does not suffice to define @xmath100 . the dual question , roughly speaking , is whether any or all of the recursors @xmath1076 or iterators @xmath1080 for types",
    "@xmath3 of level @xmath5 are definable in @xmath0 .",
    "we conjecture that they are not , and that this can be shown by suitably choosing a substructure of @xmath17 so as to exclude such @xmath1080 .",
    "( this would incidentally answer question  2 of ( * ? ? ?",
    "* section  5 ) . )",
    "one could also look for substructures that more precisely determine the strength of various _ bar recursion _",
    "operators or the _",
    "fan functional_. all in all , our experience leads us to expect that many further substructures of @xmath17 should be forthcoming , leading to a harvest of non - definability results exhibiting a rich ` degree structure ' among @xmath1-computable functionals .",
    "another very natural kind of question is the following : given a particular sublanguage @xmath64 of @xmath1 , what is the _",
    "simplest _ possible type for an element of @xmath20 that is not definable in @xmath64 ? or to look at it another way : given a type @xmath3 , what is the smallest natural sublanguage of @xmath1 that suffices for defining all elements of @xmath1081 ? here",
    "the analysis of ( * ? ? ? *",
    "section  7.1 ) yields several positive definability results , whilst the analysis of the present paper provides ammunition on the negative side .",
    "the current state of our knowledge is broadly as follows . as in @xcite , we write @xmath1082 of the language of _",
    "kleene @xmath1083-recursion _ : this is equivalent ( in its power to define elements of @xmath18 ) to @xmath48 extended with a strict primitive recursor for ground type and a strict iterator for ground type , but with no form of general recursion .    * for first - order types @xmath3 , even the language @xmath1082 suffices for defining all elements of @xmath1081 ; likewise , the oracle version @xmath1084 suffices for @xmath102 .",
    "* for second - order types @xmath3 of the special form @xmath1085 , @xmath1084 still suffices for @xmath102 ; however , this result is non - constructive , and @xmath1082 does not suffice for @xmath1081 .",
    "( this follows from recent unpublished work of dag normann . ) * for general second - order types , @xmath1084 no longer suffices , but the languages @xmath49 , @xmath1086 suffice for @xmath20 , @xmath18 respectively indeed , even the single recursion operator @xmath1067 is enough here .",
    "* for third - order types , we do not know whether @xmath49 suffices ( for @xmath20 ) .",
    "we do know that @xmath1087 suffices , and that @xmath1067 alone is not enough . * for types of level @xmath1088",
    ", @xmath1089 does not suffice , but @xmath1090 does .",
    "again , there is scope for a more fine - grained view of the hierarchy of types .",
    "we have so far concentrated almost entirely on @xmath1-style sequential computation . to conclude ,",
    "we briefly consider which other notions of higher - order computation are likely to present us with an analogous situation .",
    "as already noted at the end of subsection  [ subsec - embed ] , several extensions of @xmath1 studied in the literature present a strikingly different picture : in these settings , universal types exist quite low down , and as a consequence , only @xmath23 combinators of low type ( along with the other constants of the language ) are required for full definability .",
    "there is , however , one important language which appears to be more analogous to pure @xmath1 in these respects , namely an extension with _ local state _",
    "( essentially reynolds s _ idealized algol _ ) .",
    "this language was studied in @xcite , where a fully abstract game model was provided ( consisting of well - bracketed but possibly non - innocent strategies ) .",
    "unpublished work by jim laird has shown that there is no universal type in this setting .",
    "we would conjecture also that the recursion hierarchy for this language is strict ; this would constitute a significant strengthening of our present results .",
    "related questions also arise in connection with _ total _ functionals .",
    "consider , for example , the type structure @xmath1091 of total continuous functionals , standardly constructed as the extensional collapse ( relative to @xmath1092 ) of the scott model @xmath1093 of partial continuous functionals .",
    "it is shown by normann @xcite that every effective element of @xmath1091 is represented by a _",
    "@xmath1-definable _ element of @xmath1093 , and the proof actually shows that @xmath49 suffices here .",
    "( the further generalization of these ideas by longley @xcite actually makes mild use of second - order recursions as in @xmath1087 ; we do not know whether these can be eliminated . )",
    "thus , in this setting , only recursions of low type are needed to obtain all computable functionals .",
    "similar remarks apply to the total type structure @xmath1094 , obtained as the extensional collapse of @xmath1095 .    on the other hand",
    ", one may consider the _",
    "kleene computable _ functionals over @xmath1091 , or over the full set - theoretic type structure @xmath1096 , as defined by the schemes s1s9 .",
    "as explained in ( * ? ? ?",
    "* chapter  6 ) , sequential procedures can be seen as abstracting out the algorithmic content common to both @xmath1-style and kleene - style computation ( note that kleene s s9 in some sense does duty for the @xmath23 combinators of @xmath1 ) .",
    "this naturally suggests that our strict hierarchy for @xmath1 may have an analogue for the kleene computable functionals ( say over @xmath1096 or @xmath1091 ) , where at level @xmath14 we consider the evident restriction of s9 to types of level @xmath4 .",
    "we conjecture that this is indeed the case , although the required counterexamples may be more difficult to find given that we are limited to working with total functionals .",
    "in the course of our proof , we have frequently encountered assertions of the form @xmath1097 for various procedures @xmath1098 .",
    "although not necessary for our main argument , it is natural to ask whether there are any such procedures other than those for which @xmath1099 .",
    "the following theorem shows that the answer is no : in other words , no procedure @xmath1100 can extensionally ` improve on ' the identity function .",
    "we present this as a result of some interest in its own right , whose proof is perhaps less trivial than one might expect .",
    "recall that @xmath261 denotes the extensional order on @xmath18 , as well as the associated preorder on @xmath17 . within @xmath18 ,",
    "we will write @xmath1101 to mean @xmath1102 but @xmath1103 ; we also write @xmath1104 to mean that @xmath1105 have no upper bound with respect to @xmath261 .",
    "we call an element of @xmath17 _ finite _ if it is a finite tree once branches of the form @xmath1106 have been deleted .",
    "we say an element of @xmath18 is _ finite _ if it is represented by some finite element of @xmath17 .",
    "we write @xmath1107 for the set of finite elements in @xmath1108 respectively .",
    "\\(i ) suppose @xmath1101 where @xmath309 is finite .",
    "then for some @xmath1118 we have @xmath1119 but @xmath1120 , say , and by continuity in @xmath17 we may take @xmath473 here to be finite .",
    "take @xmath1121 representing @xmath1122 respectively ; we may assume that @xmath1123 are ` pruned ' so that every subtree containing no leaves @xmath900 must itself be a leaf @xmath78 .",
    "_ case 1 : _",
    "@xmath1124 . in this case",
    ", we may suppose that @xmath1125 .",
    "consider the computation of @xmath1126 .",
    "since all calls to @xmath746 trivially evaluate to @xmath865 , this computation follows the rightward path through @xmath146 consisting of branches @xmath1127 .",
    "but since @xmath146 is finite and @xmath1128 ( because @xmath1119 ) , this path must end in a leaf occurrence of @xmath78 within @xmath146 .",
    "now extend @xmath146 to a procedure @xmath1129 by replacing this leaf occurrence by some @xmath1130 ; then clearly @xmath1131 .",
    "taking @xmath1132 to be the function represented by @xmath1129 , we then have @xmath1133 and @xmath1134 , so @xmath1110 ( whence also @xmath1135 ) .",
    "_ case 2 : _",
    "@xmath1136 . take @xmath1137 larger than @xmath201 and all numbers appearing in @xmath1123 .",
    "define @xmath1138 as follows : if @xmath1139 , take @xmath1140 , otherwise obtain @xmath1129 from @xmath146 by replacing each case branch @xmath1141 anywhere within @xmath146 by @xmath1142 whenever @xmath1143 .",
    "extend @xmath746 to @xmath669 in the same way .",
    "note in particular that every @xmath195 subterm within @xmath1144 will now be equipped with a branch @xmath1145 .",
    "now consider the computation of @xmath1126 .",
    "since @xmath1123 are finite and @xmath1119 , this evaluates to an occurrence of @xmath78 which originates from @xmath146 or @xmath746 .",
    "since no numbers @xmath1146 ever arise in the computation , this occurrence of @xmath78 can not be part of a branch @xmath1141 for @xmath1147 , so will have been replaced by @xmath1137 in @xmath1129 or @xmath669 .",
    "now suppose that we head - reduce @xmath1148 until @xmath78 first appears in head position , and let @xmath219 be the resulting meta - term .",
    "then it is easy to see that @xmath1149 correspondingly reduces to a meta - term @xmath1150 with @xmath1137 in head position .",
    "( formally , we reason here by induction on the length of head - reduction sequences not involving the rule for @xmath1151 . )",
    "we now claim that @xmath1152 .",
    "informally , this is because the head occurrence of @xmath1137 in @xmath1150 will be propagated to the top level by the case branches @xmath1145 within both @xmath1129 and @xmath669 .",
    "more formally , let us define the set of meta - expressions _ led by @xmath1137 _ inductively as follows :      we say that an nsp meta - term @xmath159 is _ saturated at @xmath1137 _ if every @xmath195 subterm within @xmath159 has a branch @xmath1154 where @xmath580 is led by @xmath1137 . clearly @xmath1149 is saturated at @xmath1137 , and it is easy to check that the terms saturated at @xmath1137 are closed under head reductions ; thus @xmath1150 is saturated at @xmath1137 .",
    "but we have also seen that @xmath1150 has @xmath1137 in head position , so is led by @xmath1137 .",
    "finally , an easy induction on term size shows that every finite meta - term that is led by @xmath1137 and saturated at @xmath1137 evaluates to @xmath1137 itself .",
    "this shows that @xmath1152 .    to conclude , let @xmath1155 be the functions represented by @xmath1144 respectively , so that @xmath1133 and @xmath1156",
    ". then @xmath1157 , but @xmath1158 so @xmath1159 , whence @xmath1110 ( and also @xmath1135 ) .",
    "\\(ii ) suppose @xmath1113 and @xmath1115 for some @xmath309 .",
    "again by continuity , we may take @xmath309 to be finite .",
    "then by ( i ) , we may take @xmath1160 such that @xmath1161 .",
    "but this is impossible because @xmath1162 and @xmath1163 .",
    "thus @xmath1164 .",
    "it is easy to see that the above theorem holds with any finite type over @xmath7 in place of @xmath11 .",
    "however , it may trivially fail if the unit type @xmath1165 is admitted as an additional base type : e.g.  the function @xmath1166 strictly dominates the identity .",
    "an interesting question is whether the theorem holds for all finite types over the type @xmath1167 of booleans : note that the above proof fails here since it requires the base type to be infinite . for comparison",
    ", we mention that in other models of computation , improvements on the identity are sometimes possible for such types .",
    "for example , if @xmath1168 , then a functional of type @xmath1169 strictly dominating the identity exists in the scott model .",
    "indeed , such a function @xmath1170 can be defined in @xmath1 augmented with the parallel conditional @xmath1171 , e.g.  as @xmath1172 here @xmath1173 is sazonov s voting function , definable by @xmath1174 the point is that @xmath1170 will ` improve ' the function @xmath1175 to @xmath1176 .",
    "we do not know whether phenomena of this kind can arise within the model @xmath18 .",
    "berger , u. : minimisation vs.  recursion on the partial continuous functionals . in : grdenfors ,",
    "p. , woleski , j. , kijania - placek , k. ( eds . ) in the scope of logic , methodology and philosophy of science : volume one of the 11th international congress of logic , methodology and philosophy of science , cracow , august 1999 , pp .",
    "kluwer , dordrecht ( 2002 )    cartwright , r. , felleisen , m. : observable sequentiality and full abstraction . in : proceedings of the 19th acm sigplan - sigact symposium on principles of programming languages , pp .",
    "328 - 342 .",
    "acm press , new york ( 1992 )          kleene , s.c . :",
    "unimonotone functions of finite types ( recursive functionals and quantifiers of finite types revisited iv ) . in : a.  nerode and r.a .",
    "shore ( eds . ) , proceedings of the ams - asl summer institute on recursion theory , pp .",
    "119 - 138 .",
    "american mathematical society , providence ( 1985 ) kristiansen , l. : higher types , finite domains and resource - bounded turing machines .",
    "journal of logic and computation * 22(2 ) * , 281304 ( 2012 )                    sazonov , v.yu .",
    ": expressibility in d. scott s lcf language .",
    "algebra and logic * 15(3 ) * , 192206 ( 1976 ) sazonov , v.yu . : an inductive definition and domain theoretic properties of fully abstract models of pcf and pcf+ . logical methods in computer science * 3(3 ) * , 50 pages ( 2007 )    scott , d.s .",
    ": a type - theoretical alternative to iswim , cuch , owhy . in : a collection of contributions in honor of corrado bhm on the occasion of his 70th birthday . ( edited version of an unpublished note first circulated in 1969 . ) theoretical computer science * 121(1 - 2 ) * , 411440 ( 1993 ) ."
  ],
  "abstract_text": [
    "<S> let @xmath0 denote the sublanguage of plotkin s @xmath1 in which fixed point operators @xmath2 are admitted only for types @xmath3 of level @xmath4 . we show that the languages @xmath0 form a strict hierarchy , in the sense that none of the @xmath2 for @xmath3 of level @xmath5 are definable in @xmath0 up to observational equivalence . </S>",
    "<S> this answers a question posed by berger in 1999 . </S>",
    "<S> our proof makes substantial use of the theory of _ nested sequential procedures _ ( also called _ @xmath1 bhm trees _ ) as expounded in the recent book of longley and normann . </S>"
  ]
}