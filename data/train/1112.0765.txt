{
  "article_text": [
    "a wide variety of complex networks composed of autonomous agents are able to display a remarkable level of self - organization despite the absence of a centralized coordinator @xcite . for example , the intricate structure of many biological , social and economic networks , emerges as the result of local interactions between agents aiming to optimize their local utilities @xcite . in most real cases ,",
    "these agents have only access to myopic information about the structure of the network around them . despite the limited information accessible to each agent ,",
    "most of these self - engineered  networks are able to efficiently satisfy their functional requirements .",
    "the behavior of many networked dynamical processes , such as information spreading , synchronization , or decentralized coordination , is directly related to the network eigenvalue spectra @xcite .",
    "in particular , the spectrum of the laplacian matrix of a network plays a key role in the analysis of synchronization in networks of nonlinear oscillators pc98,pv05 , as well as in the behavior of many distributed algorithms l97 , and decentralized control problems @xcite .",
    "motivated by the relationship between a network s eigenvalue spectrum and the behavior of dynamical processes evolving in it , we propose a distributed iterative algorithm in which a group of autonomous agents self - organize the structure of their communication network in order to control the network s eigenvalue spectrum . the evolution of the graph is ruled by a decentralized decision process in which agents share limited information about their myopic vision of the network to decide which network adjustment is most beneficial globally .",
    "optimization of network eigenvalues has been studied by several authors in both centralized @xcite and decentralized settings dj06 . in these papers ,",
    "the objective is usually to find the weights associated to the edges of a given network in order to optimize eigenvalues of particular relevance , such as the laplacian spectral gap or spectral radius ( i.e. , the second smallest and largest eigenvalues of the laplacian matrix , respectively ) .",
    "in contrast to existing techniques , we propose a distributed framework where we control the so - called spectral moments of the laplacian matrix by iteratively modifying the structure of the network .",
    "we show that the benefits of controlling the spectral moments , instead of individual eigenvalues , lies in lower computational cost and elegant distributed implementation .",
    "the performance of our algorithm is illustrated in nontrivial computer simulations .",
    "the rest of this paper is organized as follows . in section",
    "[ sec : problem ] , we review terminology and formulate the problem under consideration . in section  [ moments from metrics ] , we introduce a decentralized algorithm to compute the spectral moments of the laplacian matrix from myopic views of the network s structure .",
    "we also introduce a novel perturbation technique to efficiently compute the effect of adding or removing edges on the spectral moments . based on these results , in section  [ sec : controlmoments ] , we propose a distributed algorithm in which a group of autonomous agents modify their network of interconnections to control of the spectral moments of a network towards desired values . finally , in section  [",
    "sec : simulations ] , we illustrate our approach with several computer simulations .",
    "let @xmath1 be an undirected graph , where @xmath2 denotes a set of @xmath0 nodes and @xmath3 denotes a set of @xmath4 undirected edges . if @xmath5 , we call nodes @xmath6 and @xmath7 _ adjacent _ ( or first - neighbors ) , which we denote by @xmath8 .",
    "we define the set of first - neighbors of a node @xmath6 as @xmath9 the _ degree _ @xmath10 of a vertex @xmath6 is the number of nodes adjacent to it , i.e. , @xmath11 .",
    "the cardinality of the set @xmath12 . ] an undirected graph is called _ simple _ if its edges are unweighted and it has no self - loops . ] .",
    "a graph is _ weighted _ if there is a real number associated with every edge .",
    "more formally , a weighted graph @xmath13 can be defined as the triad @xmath14 , where @xmath15 and @xmath16 are the sets of nodes and edges in @xmath13 , and @xmath17 is the set of ( possibly negative ) weights .",
    "graphs can be algebraically represented via matrices .",
    "the _ adjacency matrix _ of a simple graph @xmath18 , denoted by @xmath19 $ ] , is an @xmath20 symmetric matrix defined entry - wise as @xmath21 if nodes @xmath6 and @xmath7 are adjacent , and @xmath22 otherwise .",
    "given a weighted , undirected graph @xmath13 , the weighted adjacency matrix is defined by @xmath23 $ ] , where @xmath24 is the weight associated to edge @xmath5 and @xmath25 if @xmath6 is not adjacent to @xmath7 .",
    "we define the _ degree matrix _ of a simple graph @xmath18 as the diagonal matrix @xmath26 .",
    "we define the _ laplacian matrix _ @xmath27 ( also known as combinatorial laplacian , or kirchhoff matrix ) of a simple graph as @xmath28 . for simple graphs ,",
    "@xmath27 is a symmetric , positive semidefinite matrix , which we denote by @xmath29 @xcite .",
    "thus , @xmath27 has a full set of @xmath0 real and orthogonal eigenvectors with real nonnegative eigenvalues @xmath30 .",
    "furthermore , the trivial eigenvalue @xmath31 of @xmath27 always admits a corresponding eigenvector @xmath32 .",
    "the algebraic multiplicity of the trivial eigenvalue is equal to the number of connected components in @xmath18 .",
    "the smallest and largest nontrivial eigenvalues of @xmath27 , @xmath33 and @xmath34 , are called the spectral gap and spectral radius of @xmath27 , respectively .    given an undirected ( possibly weighted ) graph @xmath18 , we denote its laplacian spectrum by @xmath35 , and define the @xmath36-th laplacian spectral moment of @xmath18 as , @xcite : @xmath37the following theorem states that an eigenvalue spectrum is uniquely characterized by a finite sequence of moments :    [ uniqueness from moments]consider two undirected ( possibly weighted ) graphs @xmath38 and @xmath39 with laplacian eigenvalue spectra @xmath40 and @xmath41 .",
    "then , @xmath42 for all @xmath43 if and only if @xmath44 for @xmath45 .    in the appendix .    in the rest of this paper",
    "we will focus on the spectrum of the graph laplacian matrix @xmath27 and its spectral moments , which we denote by @xmath46 . in this case ,",
    "theorem  uniqueness from moments , implies that the laplacian spectral moment of a graph on @xmath0 nodes is uniquely characterize by the sequence of @xmath47 spectral moments @xmath48 .",
    "it is worth remarking that two nonisomorphic and @xmath49 with adjacency matrices @xmath50 and @xmath51 are _ isomorphic _ if there exists a permutation matrix @xmath52 such that @xmath53 . ]",
    "graphs @xmath54 and @xmath49 can present the same eigenvalue spectrum @xcite , in which case we say that @xmath54 and @xmath49 are isospectral . in other words ,",
    "the eigenvalue spectrum of a graph is not enough to characterize its structure . on the other hand , as we shall show in section [ moments from metrics ] , there are many interesting connections between the structural features of a graph @xmath18 and the spectral moments of its laplacian matrix , @xmath46 .      in this section",
    "we define a collection of structural properties that are important in our derivations .",
    "a _ walk _ of length @xmath36 from node @xmath55 to node @xmath56 is an ordered sequence of nodes @xmath57 such that @xmath58 for @xmath59 .",
    "one says that the walk _ touches _ each of the nodes that comprises it .",
    "if @xmath60 , then the walk is closed . a closed walk with no repeated nodes ( with the exception of the first and last nodes )",
    "is called a _",
    "cycle_. given a walk @xmath61 in a weighted graph @xmath13 with weighted adjacency matrix @xmath23 $ ] , we define the weight of the walk as , @xmath62 .",
    "we now define the concept of local neighborhood around a node .",
    "let @xmath63 denote the _ distance _ between two nodes @xmath6 and @xmath7 ( i.e. , the minimum length of a walk from @xmath6 to @xmath7 ) . by convention",
    ", we assume that @xmath64 .",
    "we define the @xmath65-th order neighborhood @xmath66around a node @xmath6 as the subgraph @xmath67 with node - set @xmath68 , and edge - set @xmath69 s.t .",
    "@xmath70 . given a set of @xmath36 nodes @xmath71 , we define @xmath72 as the subgraph of @xmath18 with node - set @xmath73 and edge - set @xmath74 s.t .",
    "we define @xmath76 as the @xmath77 _ submatrix _ of @xmath27 formed by selecting the rows and columns of @xmath27 indexed by @xmath78 . in particular , we define the laplacian submatrix @xmath79 .",
    "we say that a structural measurement is local with a certain radius @xmath65 if it can be computed from the set of local neighborhoods @xmath80 , @xmath81 .",
    "for example , the degree sequence of @xmath18 is a local structural measurement ( with radius @xmath82 ) , since we can compute the degree of each node @xmath6 from the neighborhood @xmath83 .",
    "in contrast , the eigenvalue spectrum of the laplacian matrix is not a local property , since we can not compute the eigenvalues unless we know the complete graph structure .",
    "one of the main contributions of this paper is to propose a novel methodology to extract global information regarding the laplacian eigenvalue spectrum from the set of local neighborhoods .",
    "as discussed in section  [ sec : introduction ] , our goal is to propose a distributed algorithm to control the eigenvalue spectrum of a multi - agent network , via its spectral moments , by iteratively adding / removing edges in the network ; see section  [ sec_local_structural_properties ] . for this , we define the following spectral distance between two graphs @xmath84 and @xmath85 , with spectra @xmath86 and @xmath87 , as is a distance in the space of eigenvalue spectra , but not in the space of graphs , since we can find nonisomorphic graphs that are isospectral . ]",
    "@xmath88according to theorem [ uniqueness from moments ] , two graphs are isospectral if their first @xmath47 spectral moments coincide ; thus , @xmath89 in ( [ d_m ] ) is in fact a distance function in the space of graph spectra .",
    "we further define the _ _ spectral pseudometric__:@xmath90for @xmath91 .",
    "the benefit of using the spectral pseudodistance versus other spectral distances is due to the fact that , as we shall show in section moments from metrics , we can efficiently compute the first @xmath92 spectral moments of the laplacian matrix from the set of local laplacian submatrices with radius @xmath93 , i.e. , @xmath94 . in other words , assuming that each agent has access to the laplacian submatrix associated to its neighborhood with radius @xmath65 , we shall show how to distributedly compute the first @xmath95 laplacian moments of the complete graph @xmath27 . with the notation defined above",
    ", we can rigorously state the problem addressed in this paper as follows :    [ main problem]given a desired spectrum @xmath96 , find a simple graph @xmath97 such that its laplacian eigenvalue spectrum , denoted by @xmath98 , minimizes @xmath99 .    finding a simple graph with a given ( feasible ) eigenvalue spectrum is , in general , a hard combinatorial problem , even in a centralized setting . in this paper",
    ", we propose a distributed approximation algorithm to find a graph with a spectrum ` close to ' @xmath100 in the @xmath101 pseudometric . in our algorithm ,",
    "a group of agents located at the nodes of a network iteratively add / remove edges to drive the network s eigenvalue spectrum towards the desired spectrum . in each iteration ,",
    "the set of agents perform a decentralized decision process to find the most beneficial edge addition / deletion from the point of view of the global eigenvalue spectrum .",
    "to formulate our algorithm , we first need to define the _ edit distance _",
    "@xmath102  between two graphs @xmath103 and @xmath104 , which is the minimum number of edge additions plus edge deletions to transform @xmath103 into a graph that is isomorphic to @xmath104 .",
    "to approximately solve problem  main problem in a distributed way , we propose the following iteration to determine a sequence of graphs @xmath105 , starting from any graph @xmath106 : @xmath107 the resulting sequence of spectra @xmath108 converges to @xmath100 as @xmath109 grows .",
    "the constraint @xmath110 enforces only single edge additions or deletions at each iteration , while the requirement @xmath111 enforces graph connectivity at all times , which will be necessary for the distributed implementation in section [ sec : controlmoments ] .",
    "note that the iteration ( [ optimization step ] ) typically requires global knowledge of the network structure . in this paper",
    ", we propose a computationally efficient , distributed algorithm in which agents in the network solve ( optimization step ) using only their local , myopic views of the network structure .",
    "in particular , we shall show how the set of agents can compute , in a distributed fashion , the effect of an edge addition / deletion on the first @xmath95 laplacian moments .",
    "furthermore , we shall also propose a distributed algorithm to find the edge addition / deletion that minimizes the resulting value of the spectral pseudodistance to @xmath100 .",
    "before we describe the implementation details in section  [ sec : controlmoments ] , we first provide the theoretical foundation for our approach in section  moments from metrics .",
    "several remarks are in order .",
    "first , note that it is not always possible to find a simple graph that exactly match a given eigenvalue spectrum .",
    "second , the spectral pseudometric @xmath112 may present multiple minima for a given @xmath100 .",
    "these minima could correspond , for example , to several isospectral graphs matching the desired spectrum @xmath100 @xcite . therefore ,",
    "iteration ( optimization step ) may converge to different isospectral graphs depending on the initial condition @xmath106 .",
    "third , iteration ( optimization step ) finds the most beneficial edge addition / deletion in each time step , hence , this greedy approach may get trapped in a local minimum . in practice , we observe that in our numerical simulations the spectra of these local minima are remarkably close to those of the desired spectrum .",
    "in this section , we use tools from algebraic graph theory to compute the spectral moments of the laplacian matrix of @xmath18 when only the set of local laplacian submatrices @xmath113 is available . as a result of our analysis",
    ", we propose a decentralized algorithm to compute a truncated sequence of laplacian spectral moments via a single distributed averaging .",
    "furthermore , we also present an efficient approach to compute the effect of adding or deleting an edge in the laplacian spectral moments of the graph .",
    "particularly useful in our derivations will be the following result from algebraic graph theory @xcite :    [ diagonals as walks]let @xmath14 be a weighted graph with weighted adjacency matrix @xmath23 $ ] .",
    "then@xmath114 _ { ii}=\\sum_{p\\in p_{i , k}\\left ( \\mathcal{h}\\right ) } \\omega \\left ( p\\right ) ,",
    "\\]]where @xmath115 is the set of closed walks of length @xmath36 starting and finishing at node @xmath6 in the weighted graph @xmath13 .",
    "consider the symmetric laplacian matrix @xmath27 of a simple graph @xmath116 .",
    "we denote by @xmath117 the neighborhood of radius @xmath65 around node @xmath6 and define the _ local laplacian submatrix _",
    "@xmath118 , as the submatrix @xmath119 , formed by selecting the rows and columns of @xmath27 indexed by the set of nodes @xmath120 . by convention , we associate the first row and column of the submatrix @xmath118 with node @xmath121 , which can be done via a simple permutation of rows and columns . for a simple graph @xmath122 with laplacian matrix @xmath27",
    ", we define @xmath123 as the weighted graph whose adjacency matrix is equal to @xmath27 . in other words",
    ", @xmath124 has edges with weight @xmath125 for @xmath126 , @xmath127 for @xmath128 , and @xmath10 for all self - loops @xmath129 , @xmath130 .",
    "we also define @xmath131 as the weighted subgraph of @xmath124 with node set @xmath120 , containing all the edges of @xmath124 connecting pairs of nodes in @xmath120 ( including self - loops ) .",
    "notice that , according to this definition , the weighted adjacency matrix of @xmath131 is equal to @xmath118 .    in this paper , we assume that each agent in the network knows the structure of its local neighborhood @xmath132 , for a fixed @xmath65",
    ". therefore , agent @xmath6 has access to the local laplacian submatrix @xmath118 .",
    "the following results allows us aggregate information from the set of local laplacian submatrices , @xmath133 , to compute a sequence of spectral moments of the ( global ) laplacian matrix @xmath27 .",
    "[ moments from subgraphs]consider a simple graph @xmath18 with laplacian matrix @xmath27 .",
    "then , for a given radius @xmath65 , the laplacian spectral moments can be written as@xmath134 _ { 11 } ,   \\label{moments as sum of traces}\\]]for @xmath135 .",
    "since the trace of a matrix is the sum of its eigenvalues , we can expand the @xmath36-th spectral moment of the laplacian matrix as follows:@xmath136 _",
    "{ ii}\\end{aligned}\\]]therefore , since @xmath27 is the weighted adjacency matrix of the laplacian graph @xmath137 , we have ( from lemma [ diagonals as walks])@xmath138where the weights @xmath139 are summed over the set of closed walks of length @xmath36 starting at node @xmath6 in the weighted graph @xmath124 .    for a fixed value of @xmath36 ,",
    "closed walks of length @xmath36 in @xmath140 starting at node @xmath6 can only touch nodes within a certain distance @xmath141 of @xmath6 , where @xmath141 is a function of @xmath36 ( see fig .",
    "[ walks in gir ] ) .",
    "in particular , for @xmath36 even ( resp .",
    "odd ) , a closed walk of length @xmath36 starting at node @xmath6 can only touch nodes at most @xmath142 @xmath143(resp .",
    "@xmath144 ) hops away from @xmath6 .",
    "therefore , closed walks of length @xmath36 starting at @xmath6 are always contained within the neighborhood of radius @xmath144 . in other words ,",
    "the neighborhood @xmath132 of radius @xmath65 contains all closed walks of length up to @xmath95 starting at node @xmath6 .",
    "therefore , for @xmath145 , we have that @xmath146where @xmath147 is the weighted graph whose adjacency matrix is equal to the local laplacian submatrix @xmath118 ( notice that , by convention , we associate the first row and column of @xmath118  with node @xmath6 ) . therefore , according to lemma [ diagonals as walks ] , we have @xmath148 _ { 1,1}. \\label{walks as diagonal of sublaplacian}\\]]then , substituting ( [ walks as diagonal of sublaplacian ] ) into ( moments as walks in laplacian graph ) , we obtain the statement of our theorem .    since every node @xmath6 has access to its local neighborhood @xmath132 , it is possible to compute the first @xmath95 moments via a simple distributed averaging of the quantities @xmath149 _ { 1,1}\\}_{i\\in \\mathcal{v}}$ ] , @xcite .",
    "this averaging efficiently aggregates local pieces of local structural information ( described by the local laplacian submatrices ) to produce a truncated sequence of spectral moments of the ( global ) laplacian matrix .",
    "this is an useful result for the analysis of complex networks for which retrieving the complete structure of the network can be very challenging ( in many cases , not even possible ) .     and @xmath150 , of lengths @xmath151 and @xmath152 , in a neighborhood of radius @xmath153 around node @xmath154 .",
    "]    based on theorem [ moments from subgraphs ] , we propose a distributed algorithm to compute a sequence of @xmath95 spectral moments of @xmath27 from local submatrices @xmath118 , as described in algorithm alg : moment_comp .",
    "note that , computing the spectral moments via ( moments as sum of traces )  is much more efficient than computing these moments via an explicit eigenvalue decomposition for many real - world networks . in most real applications",
    ", the laplacian matrix representing the network structure is a sparse graph for which the number of nodes in the neighborhood @xmath120 is very small compared to @xmath0 , for moderate values of @xmath65 .",
    "local laplacian submatrices @xmath118 for all nodes @xmath155;each node @xmath155 computes a vector @xmath156 , where @xmath157_{1,1 } $ ] ; using distributed averaging , compute the following vector of averages:@xmath158      in this section , we use spectral graph theory to compute the effect of adding or deleting an edge on the spectral moments of the laplacian matrix .",
    "traditionally , the effect of a matrix perturbation on the eigenvalue spectrum is analyzed using eigenvalue perturbation techniques @xcite .",
    "in particular , the effect of adding a ` small ' perturbation matrix @xmath159 to an @xmath20 symmetric matrix @xmath160 with eigenvalue spectrum @xmath161 can be approximated , in the first - order , by @xcite @xmath162where @xmath163 is the eigenvector of @xmath160 associated with the eigenvalue @xmath164 , and @xmath165 is the eigenvalue spectrum of the perturbed matrix @xmath166 . in the case of the laplacian matrix , the perturbation matrix @xmath159 corresponding to the addition of an edge @xmath167",
    "can be written as , @xmath168 , where @xmath169 is the unit vector in the direction of the @xmath6-th coordinate .",
    "we denote by @xmath170 the graph resulting of adding edge @xmath171 to @xmath18 , and @xmath172 is the laplacian spectrum of @xmath170 .",
    "therefore , adding edge @xmath167 perturbs the eigenvalues of the laplacian matrix as follows:@xmath173where @xmath174 is the eigenvector of  @xmath27 associated to @xmath175 , and @xmath176 is its @xmath7-th component .",
    "hence , the resulting spectral radius can be approximated as@xmath177    therefore , computing the effect of an edge addition on the spectral radius using traditional perturbation techniques requires computation of the dominant eigenvalue and eigenvector of @xmath27 , which is computationally expensive for very large graphs . as an alternative to the traditional analysis",
    ", we propose a novel approach , based on algebraic graph theory , to compute the effect of structural perturbation on the spectral moments of the laplacian matrix @xmath27 _ without explicitly computing the eigenvalues or eigenvectors of _ @xmath27 .",
    "furthermore , our approach can be efficiently implemented in a fully decentralized manner .    in our derivations",
    ", we use the following result from algebraic graph theory :    [ moments as walks]let @xmath14 be a weighted graph with weighted adjacency matrix @xmath23 $ ] .",
    "then@xmath178where @xmath179 is the set of closed walks of length @xmath36 in the weighted graph @xmath13 .",
    "this lemma is a consequence of lemma [ diagonals as walks ] . specifically , we have that@xmath180 _ { i , i } \\\\",
    "& = & \\frac{1}{n}\\sum_{i\\in \\mathcal{v}}\\sum_{p\\in p_{i , k}\\left ( \\mathcal{h}\\right ) } \\omega \\left ( p\\right ) \\\\ & = & \\frac{1}{n}\\sum_{p\\in p_{k}\\left ( \\mathcal{h}\\right ) } \\omega \\left ( p\\right ) , \\end{aligned}\\]]where @xmath181 is the set of all closed walks of length @xmath36 in @xmath13 ( for any starting node @xmath182 ) .      consider a simple graph @xmath18 with laplacian matrix @xmath27 .",
    "we denote by @xmath170 ( resp .",
    "@xmath183 ) the graph resulting from adding ( resp",
    ". removing ) edge @xmath171 to ( resp . from ) @xmath18 .",
    "consider the sets of nodes @xmath120 and @xmath184 being within a radius @xmath65 from node @xmath6 and node @xmath7 , respectively .",
    "let us define the following submatrices indexed by the set of nodes in @xmath185:@xmath186 the following lemma allows us to efficiently compute the increment ( resp .",
    "decrement ) in the laplacian spectral moments of @xmath18 due to the addition ( resp .",
    "removal ) of edge @xmath167 :    [ moment perturbation for removal]given a simple graph @xmath18 with laplacian matrix @xmath27 , the increment ( decrement ) in the @xmath36-th laplacian spectral moment of a graph @xmath18 due to the addition or deletion of an edge @xmath167 can be written as@xmath187for @xmath188 .",
    "consider the weighted laplacian graphs of @xmath27 , @xmath189 , and @xmath190 , which we denote by @xmath191 , @xmath192 and @xmath193 , respectively .",
    "( by definition , the adjacency matrices of the laplacian graphs are the laplacian matrices of the graphs . ) then , according to lemma [ moments as walks ] , we have that the @xmath36-th spectral moments @xmath46 , @xmath194 and @xmath195 can be written as weighted sums over the sets of all closed walks of length @xmath36 in @xmath13 , @xmath196 , and @xmath197 , as follows,@xmath198    we define @xmath199 , @xmath200 , and @xmath201 as the sets of closed walks of length @xmath36 in , respectively , @xmath13 , @xmath196 , and @xmath197 visiting only nodes in the set @xmath185 .",
    "then , we can split the summation in ( [ eq moments as walks ] ) for the laplacian matrices , as follows:@xmath202    notice that , as we illustrated in fig .",
    "[ walks in gir ] , none of the closed walk of length @xmath188 touching node @xmath6 ( resp .",
    "node @xmath7 ) can leave the neighborhood @xmath120 ( resp .",
    "@xmath184 ) .",
    "therefore , all closed walks of length @xmath188 touching either node @xmath6 or @xmath7 ( or both ) are contained if it only touches nodes in @xmath203 . ] in @xmath185 . as a consequence ,",
    "none of the closed walks in @xmath204 or @xmath205 touches node @xmath6 or @xmath7 .",
    "since addition / removal of edge @xmath167 does not influence those walks not touching @xmath6 or @xmath7 , we have that@xmath206thus , from ( [ moment h ] )  and ( [ moment h+ ] ) we have@xmath207    since @xmath199 is the set of all closed walks of length @xmath36 in @xmath13 visiting nodes in the set @xmath185 , we can apply lemma [ moments as walks ] to obtain@xmath208similarly , for @xmath209 , we obtain@xmath210finally , substituting ( [ u from moments ] ) and ( [ u+ from moments ] ) in ( [ moments as long walks ] ) provides us with the statement of our theorem .    according to lemma  [ moment perturbation for removal ]",
    ", we can compute the increment or decrement in the laplacian spectral moments ( up to order @xmath95 ) by computing trace@xmath211 and trace@xmath212 .",
    "notice that the sizes of @xmath213 and @xmath214 are @xmath215 , which is usually small for large sparse graphs ( and moderate @xmath65 ) .",
    "in this section , we integrate the results developed in section  [ moments from metrics ] with a novel technique for distributed connectivity verification of edge additions or deletions in order to obtain a distributed solution to problem  [ main problem ] in the form of ( [ optimization step ] ) , as discussed in section  [ sec_problem_definition ] .",
    "this relies on the assumption that an agent at node @xmath6 is able to communicate at time slot @xmath109 with all the agents in its first - order neighborhood @xmath216 only .",
    "is time - dependent , so are the neighborhoods @xmath217 .",
    "] moreover , we also assume that every agent has only a myopic view of the network structure .",
    "this means that at time slot @xmath109 agent @xmath121 only knows the topology of the neighborhood @xmath218 , within a particular radius @xmath65 .",
    "this limits the set of possible actions that every agent @xmath6 can take in every step of the iteration ( optimization step ) , to be _ local _ edge additions of non - edges @xmath219 in @xmath218 or local edge deletions of edges @xmath220 in @xmath221 .    in what follows",
    ", it will be useful to predetermine the _ master node _ for each edge @xmath222 , which can be arbitrarily chosen from the set of nodes @xmath223 .",
    "the notion of master node is useful to coordinate actions in our decentralized algorithm .",
    "the agent located at the master node of @xmath167 is the only one with the authority to decide if edge @xmath167 is deleted .",
    "we denote by @xmath224 the set of edges having node @xmath6 as its master . in our simulations , we choose this set to be @xmath225 .",
    "similarly , it is useful to predefine a master node for each nonedge is a nonedge of @xmath18 if @xmath226 . ]",
    "@xmath227 . the agent located at the master node of",
    "the nonedge is the only one with the authority to decide if edge @xmath228 is added to the network .",
    "we denote by @xmath229 the set of nonedges having node @xmath6 as its master . in our case",
    ", we define this set as @xmath230 , where we limit node @xmath36 to be in @xmath231 , since we are only considering local edge additions .      in a centralized framework",
    ", network connectivity can be inferred from the number of trivial eigenvalues of the laplacian matrix . however , when only local network information is available , only sufficient conditions for connectivity can be verified .",
    "one such condition is the requirement that @xmath232 , which can be locally verified by agent @xmath6 with knowledge of only @xmath132 . since this condition is only sufficient but not necessary for connectivity preservation , we need a mechanism to check connectivity for those edges in the set @xmath233of critically connected edges , for which the sufficient condition does not hold .",
    "the proposed mechanism relies on a the concept of a maximum consensus .",
    "in particular , consider a graph @xmath234 at time @xmath235 and for any @xmath236 associate a scalar variable @xmath237 with every node @xmath238 .",
    "assume that the variables @xmath239 are randomly initialized and run the following maximum consensus update @xmath240on the graph @xmath241 obtained by virtually disabling the link @xmath242 via blocking communication through it .",
    "then , the network @xmath241 is almost surely connected if and only if the variables @xmath243 for all @xmath244 converge to the common value @xmath245 . note that convergence in this case takes place in finite time that is upper bounded by the diameter of the network @xcite",
    "this idea can be extended to simultaneous verification of multiple link deletions in @xmath246 .",
    "in fact , since every edge is assigned a unique master agent , we can partition the set @xmath247 in to @xmath248 disjoint subsets @xmath249 for all @xmath250 .",
    "this allows us to define the sets @xmath251 containing all variables of agent @xmath36 that have as a master agent @xmath6 .",
    "a simple schematic of the proposed construction is shown in the following table : @xmath252 note that the second subscript @xmath6 in the set @xmath253 denotes that master agent for the variables contained in @xmath253 .",
    "therefore , agent @xmath36 initializes only those variables in the set @xmath254 . finally , stack all variables in the set @xmath253 in a vector @xmath255 and denote by @xmath256 _ { \\left ( i , j\\right ) } $ ] the scalar state associated with edge @xmath257 . using the notation defined above ,",
    "we can simultaneously verify connectivity for all edges in @xmath258 by a high - dimensional consensus .",
    "for this , every agent @xmath36 initializes randomly all vectors @xmath259 for all masters @xmath250 and updates the vectors @xmath260 as follows :    _ case i _ :",
    "if @xmath36 is not a neighbor of the master agent @xmath6 , i.e. , if @xmath261 , then it updates the vectors @xmath262 as @xmath263where the maximum is applied elementwise on the vectors .",
    "_ case ii _ : if @xmath36 is a neighbor of the master agent @xmath6 , i.e. , if @xmath264 , then it virtually removes link @xmath265 and updates the entry @xmath266_{(k , i)}$ ] as @xmath267_{(k , i)}:=\\max_{l\\in \\mathcal{n}_{k}(t)\\backslash \\{i\\}}\\left\\ { [ \\mathbf{x}_{ki}(s)]_{(k , i)},[\\mathbf{x}_{li}(s)]_{(k , i)}\\right\\ } ,   \\label{eqn : deletion_2}\\]]while for all other links @xmath268 with @xmath269 it updates the entries @xmath266_{(j , i)}$ ] as @xmath267_{(j , i)}:=\\max_{l\\in \\mathcal{n}_{k}(t)}\\left\\ { [ \\mathbf{x}_{ki}(s)]_{(j , i)},[\\mathbf{x}_{li}(s)]_{(j , i)}\\right\\}. \\label{eqn : deletion_3}\\ ] ]    _ case iii _ :",
    "for the variables @xmath270 for which @xmath36 is the master , it virtually removes the links @xmath271 and updates the entries @xmath272_{(k , j)}$ ] as @xmath273_{(k , j)}:=\\max_{l\\in \\mathcal{n}_{k}(t)\\backslash \\{j\\}}\\left\\ { [ \\mathbf{x}_{kk}(s)]_{(k , j)},[\\mathbf{x}_{lk}(s)]_{(k , j)}\\right\\ } .",
    "\\label{eqn : deletion_4}\\ ] ]    the high - dimensional consensus defined by ( [ eqn : deletion_1])(eqn : deletion_4 ) converges in a finite time @xmath274 @xcite .",
    "when this happens , node @xmath36 requests the entries @xmath275_{(k , i ) } $ ] from all its neighbors @xmath276 for which @xmath277 and compares them with @xmath278_{(k , i)}$ ] . since , violation of connectivity due to deletion of @xmath279 would result in nodes @xmath36 and @xmath6 being in different connected components , if @xmath280_{(k , i)}=[\\mathbf{x}_{ik}(s)]_{(k , i)}$ ] then the network @xmath281 would still remain connected .",
    "hence , we can define the set @xmath282_{(k , i)}=[\\mathbf{x}_{ik}(\\tau)]_{(k , i)}\\right\\ } ,   \\label{eqn : safe_deletions}\\]]containing the edges in @xmath283 whose removal does not disconnect the network .    [",
    "sec : connect_verif ]    @xmath284 for all @xmath285 ; update @xmath286 by ( [ eqn : deletion_1])([eqn : deletion_4]);compute @xmath287 by ( [ eqn : safe_deletions ] ) ;      to solve problem  [ main problem ] via the iterative algorithm proposed in ( [ optimization step ] ) , we need to add or delete an edge @xmath171 that minimizes the spectral pseudometric @xmath288 at every time step @xmath109 . for this , let @xmath289 denote a local copy of the spectral distance of the graph @xmath290 that is available to agent @xmath6 , so that initially @xmath291 for all agents @xmath250 .",
    "the quantity @xmath292 can be computed in a distributed way by means of distributed averaging , according to theorem  moments from subgraphs .",
    "then , the key idea is that every master agent @xmath6 computes the spectral distance @xmath293 resulting from adding a link @xmath294 or deleting a link @xmath295 .",
    "computation of this distance relies on theorem [ moment perturbation for removal ] and requires that agent @xmath6 has knowledge of the structure of its neighborhoods @xmath132 only , for @xmath296 . for all possible local edge additions or deletions , master agent @xmath6 determines the most beneficial one @xmath297note that the minimization above may result in multiple edges having the same optimal value",
    "such ties can be broken via , e.g. , a coin toss .",
    "then , the largest decrease in the error associated with the most beneficial edge @xmath298 becomes : @xmath299 for a large constant @xmath300 .",
    "in other words , @xmath301 is nontrivially defined only if the exists a link adjacent to node @xmath6 that if added or deleted decreases the error function @xmath302 .",
    "otherwise , a large value @xmath300 is assigned to @xmath301 to indicate that this action is not beneficial to the final objective . finally , for each node @xmath6 , we initialize the state vector @xmath303 ^{t},\\]]containing the best local action @xmath298 , the associated spectral pseudodistance @xmath304 , and the vector of resulting moments @xmath305 _ { k=1}^{k}.\\]]in the following section , we discuss how to compare all local actions @xmath306 for all nodes @xmath121 to find the best global action that minimizes the spectral pseudometric .",
    "@xmath307^{t}$];@xmath308 , with @xmath309_3,[{\\bf b}_{k}(s)]_3\\}$];update @xmath310 , @xmath311 and @xmath312 according to ( [ eqn : update_neighbors_1])([eqn : update_cme]);no beneficial action .",
    "algorithm has converged ;    in order to obtain the overall most beneficial action , all local actions need to be propagated in the network and compared against each other . for this",
    ", every agent @xmath6 communicates with its neighbors and updates its desired action @xmath313 with the action @xmath314 corresponding to the node @xmath7 that contains the smallest distance to the target moments @xmath315_{3}\\triangleq sd_i(t)$ ] , i.e. , @xmath316_{3},[\\mathbf{b}_{k}(s)]_{3}\\}.\\end{aligned}\\]]in case of ties in the distances to the targets @xmath317_{3}$ ] , then the node with the largest index is selected ( line 2 , alg .  [ alg1 ] ) .",
    "note that line 2 of alg .",
    "[ alg1 ] is essentially a minimum consensus update on the entries @xmath318_{3}$ ] and will converge to a common outcome for all nodes in finite time @xmath319 , when they have all been compared to each other .",
    "when the consensus has converged , if there exists a node whose desired action decreases the distance to the target moments , i.e. , if @xmath320_{3}<d$ ] ( line 4 , alg .",
    "[ alg1 ] ) , then alg .  [ alg1 ] terminates with a greedy action and node @xmath6 updates its set of neighbors @xmath321 and vector of moments @xmath322 ( line 5 , alg .",
    "alg1 ) . if the optimal action is a link addition , i.e. , if @xmath323_{2}\\not\\in \\mathcal{n}_{i}(t)$ ] , then @xmath324_{2}\\right\\ } .",
    "\\label{eqn : update_neighbors_1}\\]]on the other hand , if the optimal action is a link deletion , i.e. , if @xmath325_{2}\\in \\mathcal{n}_i(t)$ ] , then @xmath326_{2}\\right\\ } .",
    "\\label{eqn : update_neighbors_2}\\]]in all cases , the moments and error function are updated by @xmath327_{4}\\dots [ \\mathbf{b}_{i}(\\tau)]_{4+k}\\right]^t   \\label{eqn : update_moments}\\]]and @xmath328_{3 } ,   \\label{eqn : update_cme}\\]]respectively .",
    "finally , if all local desired actions increase the distance to the target moments , i.e. , if @xmath325_{3}=d$ ] ( line 6 , alg .",
    "[ alg1 ] ) , then no action is taken and the algorithm terminates with a network topology with almost the desired spectral properties .",
    "this is because no action exists that can further decrease the distance to the target moments .",
    "communication time delays , packet losses , and the asymmetric network structure , may result in runs of the algorithm starting asynchronously , outdated information being used for future decisions , and consequently , nodes reaching different decisions for the same run . in the absence of a common global clock ,",
    "the desired synchronization is ideally _ event triggered _ , where by a triggering event we understand the time instant that messages are transmitted and received by the nodes . for an implementation of such a scheme see @xcite .",
    "in the following numerical examples , we illustrate the performance and limitations of our iterative graph process .",
    "the objective of our simulations is to find a graph whose laplacian spectral moments match those of a desired spectrum . in each example , we analyze the performance of our algorithm and study the spectral and structural properties of the resulting graph .",
    "[ exmp : stars]in our first two simulations , we try to find graphs that match the spectral moments of ( i ) a star graph and ( ii ) a two - star graph ( fig .",
    "[ fig:2_star_network ] ) .",
    "the laplacian spectral moments of a star network with @xmath329 nodes are : @xmath330 . starting with a random graph on @xmath329 nodes ,",
    "we run our distributed algorithm to iteratively add and delete edges that minimize the spectral pseudodistance .",
    "we observe , in fig .",
    "fig : star_network , that the spectral pseudodistance evolves towards zero in 45 steps .",
    "we also verify that , although we are only controlling the first five spectral moments of the laplacian matrix , the resulting network structure is exactly the desired star topology .",
    "this indicates that a star graph is an extreme case in which the graph topology is uniquely defined by their first five laplacian spectral moments .    in our second simulation",
    ", we consider the two - star network with 20 nodes in fig .",
    "[ fig:2_star_network ] ( a ) .",
    "the laplacian spectral moments of this graph are @xmath331 .",
    "we observe in fig .",
    "[ fig : star_network ] how , after running our iterative algorithm for 94 iterations , our graph process stops in a graph topology with a spectral pseudodistance very close to zero ( in particular , @xmath332 ) .",
    "the resulting topology , represented in fig .",
    "[ fig:2_star_network ] ( b ) , is very close to the desired two - star network .",
    "this topology is a local minima of our evolution process because we could transform it into our optimal two - star graph by two simple operations : ( 1 ) adding an edge connecting nodes @xmath333 and @xmath334 ( fig .",
    "fig:2_star_network ( b ) ) , and ( 2 ) removing edge @xmath335 . on the other hand , one can verify that step ( 1 ) would increase the spectral pseudodistance ; therefore , our greedy evolution process does not follow this two - steps path . despite this limitation ,",
    "our final topology is remarkably close to the two - star network and their eigenvalue spectra are very similar , as shown in fig .",
    "[ fig : cdfs ] .     for the star graph ( blue plot ) and the two - stars graph ( red plot ) , where @xmath100 is the spectrum of the desired graph and @xmath336 is the spectrum of @xmath337 . ]            [ exmp : chains_rings]in the next two simulations",
    ", we try to find graphs that match the spectral moments of ( i ) a ring graph and ( ii ) a chain graph .",
    "starting from a random graph , we run our iterative algorithm to match the spectral moments of a chain graph with 20 nodes , @xmath338 . in this case , the spectral pseudodistance converges to zero in finite time and the final topology is exactly the desired chain graph . on the other hand ,",
    "if we try to match the spectral moments of the ring graph in fig .",
    "[ fig : ring_networks ] ( a ) , with @xmath339 , an exact reconstruction is very difficult to achieve . in fig .",
    "fig : ring_networks ( b ) , we depict the graph returned by our algorithm , after 83 iterations . note that since we are only allowing local structural modifications in our graph process , it is hard for our algorithm to replicate long cycles in the graph . on the other hand , although the structure of the resulting network is not the desired ring graph , its eigenvalue spectrum is remarkably close to that of a ring , as we can see in fig .",
    "[ fig : cdf_ring ] .",
    "( b ) ( red plot ) . ]",
    "the above examples illustrate two limitations of our algorithm , namely , the existence of local minima in the graph evolution process and the inability of our algorithm to recover long cycles . despite these limitations ,",
    "our algorithm is able to find graph topologies with eigenvalue spectra remarkably close to the desired ones by matching five spectral moments only .",
    "furthermore , the resulting topologies are structurally very similar to the desired ones , indicating that the spectral moments of the laplacian matrix contains rich information about the structure of a network . in the next two examples ,",
    "we show how our algorithm is also able to efficiently generate graphs matching the spectral properties of two popular synthetic network models : the small - world @xcite and the scale - free @xcite networks .",
    "[ exmp : small_world]the small - world model was proposed by watts and strogatz @xcite to generate networks with high clustering coefficients and small average distance .",
    "we can generate a small - world network by following these steps : ( 1 ) take a ring graph with @xmath0 nodes , ( 2 ) connect each node in the ring to all its neighborhoods within a distance @xmath36 , and ( 3 ) add random edges with a probability @xmath340 . in this example , we generate a small - world network with @xmath341 , @xmath342 , and @xmath343 .",
    "the first three spectral moments of a random realization of this network are @xmath344 .",
    "then , we run our algorithm to generate a graph whose first three spectral moments are close to those of the small - world network . after running our algorithm for @xmath345 iterations , we obtain a graph topology with a spectral pseudodistance very close to zero ( in particular , @xmath346 ) and an eigenvalue spectrum remarkably similar to that of the small - world network , as shown in fig .",
    "[ fig : cdf_small_world ] .",
    "[ exmp : power_law]another popular model in the ` network science ' literature is the scale - free network .",
    "this model was proposed by barabsi and albert in @xcite to explain the presence of heavy - tailed degree distributions in many real - world networks . in this example",
    ", we generate a random power - law network with @xmath347 nodes and @xmath348 , where @xmath349 is a parameter that characterizes the average degree of the resulting network ( see @xcite for more details about this model ) .",
    "a random realization of this network presents the following sequence of moments : @xmath350 .",
    "then , after running our algorithm for @xmath351 iterations , we obtain a graph topology with a spectral pseudodistance very close to zero ( in particular , @xmath352 ) .",
    "the eigenvalue spectrum of the resulting topology is remarkably similar to that of the small - world network , as shown in fig .",
    "[ fig : cdf_power_law ] .",
    "furthermore , we can compare the degree sequences of the power - law network and the topology generated by our algorithm .",
    "we compare these sequences , sorted in descending order , in fig.[fig : degree_powerlaw ] .",
    "we observe how the degree sequence of the topology obtained in our algorithm is remarkably close to that of the power - law network .",
    "this indicates that the spectral properties of a network contains rich information about the network structure , in particular , the first five spectral moments seems to highly constrain many relevant structural properties of the graph , such as the degree distribution .",
    "( blue ) and the topology resulting from our algorithm ( red ) . ]     ( blue ) and the topology resulting from our algorithm ( red ) . ]     ( blue ) and the topology resulting from our algorithm ( red ) . ]",
    "in this paper , we have described a fully decentralized algorithm that iteratively modifies the structure of a network of agents with the objective of controlling the spectral moments of the laplacian matrix of the network .",
    "although we assume that each agent has access to local information regarding the graph structure , we show that the group is able to collectively aggregate their local information to take a global optimal decision .",
    "this decision corresponds to the most beneficial link addition / deletion in order to minimize a distance function that involves the laplacian spectral moments of the network .",
    "the aggregation of the local information is achieved via gossip algorithms , which are also used to ensure network connectivity throughout the evolution of the network .",
    "future work involves identifying sets of spectral moments that are reachable by our control algorithm .",
    "( we say that a sequence of spectral moments is reachable if there exists a graph whose moments match the sequence of moments . )",
    "furthermore , we observed that fitting a set of low - order moments does not guarantee a good fit of the complete distribution of eigenvalues .",
    "in fact , there are important spectral parameters , such as the algebraic connectivity , that are not captured by a small set of spectral moments",
    ". nevertheless , we observed in numerical simulations that fitting the first four moments of the eigenvalue spectrum often achieves a good reconstruction of the complete spectrum .",
    "hence , a natural question is to describe the set of graphs most of whose spectral information is contained in a relatively small set of low - order moments .",
    "[ uniqueness from moments copy(1)]consider two undirected ( possibly weighted ) graphs @xmath38 and @xmath39 with ( real ) eigenvalue spectra @xmath40 and @xmath41 .",
    "then , @xmath42 for all @xmath43 if and only if @xmath44 for @xmath45 .",
    "the theorem states that the spectrum @xmath353 of any @xmath20 symmetric matrix @xmath354 is uniquely characterized by its first @xmath47 spectral moments .",
    "first , we use cayley - hamilton theorem to prove that the first @xmath47 spectral moments of the spectrum @xmath355 characterize the whole infinite sequence of moments @xmath356 , as follows .",
    "let @xmath357 , be the characteristic equation of @xmath354 .",
    "then , from cayley - hamilton , we have @xmath358 . multiplying @xmath359 by @xmath360 , and applying the trace operator , we have that,@xmath361 & = & \\frac{1}{n}\\text{trace}\\left ( a^{t+n}\\right ) + \\alpha _ { n-1}\\frac{1}{n}\\text{trace}\\left ( a^{t+n-1}\\right ) + ... + \\alpha _ { 0}\\frac{1}{n}\\text{trace}\\left ( a^{t}\\right ) \\\\ & = & m_{t+n}\\left ( a\\right ) + \\alpha _ { n-1}m_{t+n-1}\\left ( a\\right ) + ... + \\alpha _ { 0}m_{t}\\left ( a\\right ) = 0,\\end{aligned}\\]]for all @xmath362 .",
    "therefore , given the sequence of moments @xmath363 , we can use the recursion@xmath364to uniquely characterize the infinite sequence of moments @xmath365 .",
    "second , we prove that the infinite sequence of moments @xmath366 uniquely characterizes the eigenvalue spectrum .",
    "let us define the _ spectral measure _ of the matrix @xmath354 with real eigenvalues @xmath367 , as@xmath368where @xmath369 is the dirac delta function .",
    "in what follows , we prove that the spectral measure of @xmath354 is uniquely characterized by its infinite sequence of spectral moments using carleman s condition akh65 . since there is a trivial bijection between the eigenvalue spectrum of @xmath354 and its spectral measure , uniqueness of the spectral measure imply uniqueness of the eigenvalue spectrum .",
    "carleman s condition states that a measure @xmath370 on @xmath371 is uniquely characterized by its infinite sequence of moments @xmath372 if ( _ i _ ) @xmath373 for all @xmath374 , and ( _ ii _ ) @xmath375 in our case , the moments of the spectral measure @xmath376 are@xmath377these moments satisfy : ( _ i _ )",
    "@xmath378 , for any finite matrix @xmath354 , and ( _ ii_)@xmath379for any @xmath380 . as a consequence , the spectral measure of any finite matrix @xmath380 with real eigenvalues",
    "is uniquely characterized by @xmath381 . since",
    ", @xmath382 , we have that the sequence of moments @xmath383 uniquely characterizes @xmath384 .",
    "therefore , the sequence of moments @xmath385 uniquely characterize the spectral measure @xmath376 and the real eigenvalue spectrum @xmath386 .",
    "preciado and g.c .",
    "verghese , low - order spectral analysis of the kirchhoff matrices for a probabilistic graph with prescribed expected degree sequence ,  _ ieee transactions on circuits and systems i _ , vol .",
    "56 , pp , 1231 - 1240 , 2009 ."
  ],
  "abstract_text": [
    "<S> motivated by the relationship between the eigenvalue spectrum of a network and the behavior of dynamical processes evolving in it , we propose a distributed iterative algorithm in which a group of @xmath0 autonomous agents self - organize the structure of their communication network in order to control the network s eigenvalue spectrum . in our algorithm , we assume that each agent has only access to a local ( ` myopic ' ) view of the network around it and that there is no centralized coordinator . in each iteration , agents of the network perform a decentralized decision process in which agents share limited information about their myopic vision of the network to find the most beneficial edge addition / deletion from a spectral point of view . </S>",
    "<S> we base our approach on a novel distance function defined in the space of eigenvalue spectra that is written in terms of the spectral moments of the laplacian matrix . in each iteration , </S>",
    "<S> agents in the network run a greedy algorithm to find the edge addition / deletion that minimized the spectral distance to the desired spectrum . </S>",
    "<S> the spectral distance presents interesting theoretical properties that allow an elegant and efficient distributed implementation of the greedy algorithm using distributed consensus . </S>",
    "<S> our distributed algorithm is stable by construction , i.e. , locally optimizes the network s eigenvalue spectrum , and is shown to perform very well in practice . </S>"
  ]
}