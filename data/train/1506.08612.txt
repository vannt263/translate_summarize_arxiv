{
  "article_text": [
    "there is a growing interest in molecular biology community to understand the information that is encoded within the deoxyribonucleic acid ( dna ) sequences of each organism @xcite .",
    "a dna sequence contains specific genetic instructions that make the living organisms function in a proper way .",
    "the four basic building blocks ( also known as _ nucleotide bases _ ) of a dna sequence are : _ adenine _ ( a ) , _ cytosine _ ( c ) , _ guanine _ ( g ) and _ thymine _ ( t ) .",
    "discovery of differences and similarities of organisms and exploration of the evolutionary relationship between them , often require comparisons of the corresponding dna sequences .",
    "examples include : checking whether one sequence is a sub - sequence of another , or finding a sub - sequence that appears in the same order in both dna sequences @xcite .",
    "the process of searching for certain sub - sequences of length _ k _ , so called _ k - mers _ ,",
    "is performed with pattern matching algorithms .    according to benson",
    "@xcite the number of dna sequences and nucleotide bases in these sequences is doubling every 18 months .",
    "real - world dna sequences comprise several gigabytes and the process of extracting the important information demands the adequate use of parallel computing resources to be completed within a reasonable time .",
    "a quick dna analysis may have a decisive role in many applications including : preventing the evolution of different viruses and bacterias during an early phase @xcite ; early diagnosis of genetic predispositions to certain diseases ( such as , cancer , cardiovascular diseases , .. ) @xcite ; and dna forensics ( such as , parentage testing , or criminal investigation ) @xcite .",
    "related research has addressed extensively pattern matching algorithms for gpus .",
    "lin et al .",
    "@xcite proposed the parallel failure - less aho - corasick algorithm for pattern matching on gpus .",
    "kouzinopoulos and margaritis @xcite show speedup of up to 24@xmath1 for small input text and pattern sizes for different algorithms on gpu .",
    "bellekens et al .",
    "@xcite presented a parallel implementation of the knuth - morris - pratt algorithm using the nvidia gpu hardware .",
    "tumeo and villa @xcite proposed an implementation of the aho - corasick algorithm for dna analysis applications on clusters with gpus . in comparison to gpus , besides the ability to provide high performance , the xeon phi deserves our attention because of programmability @xcite and portability @xcite .",
    "however , so far not much research was focused on dna analysis using pattern matching algorithms designed specifically for the xeon phi .    in this paper , we present a parallel algorithm for dna analysis that is designed to exploit the thread - level and the simd parallelism available in the intel xeon phi coprocessor .",
    "our pattern matching algorithm is based on finite automata . for thread - level parallelism we use a domain decomposition approach that splits the dna sequence into chunks evenly among the available threads .",
    "to process the patterns occurring in the cross border of sequence chunks , our algorithm uses @xmath2 overlapping characters , where _ m _ is the pattern length .",
    "with respect to the simd - parallelism our algorithm implementation uses the potential of the 512-bit vector registers of the intel xeon phi architecture for transition function of finite automata . we evaluate our approach experimentally with real - world dna sequences of different living species . for the human dna sequence a speedup of up to @xmath0",
    "is achieved compared to the sequential version running on intel xeon processor e5 .",
    "major contributions of this paper include ,    * an algorithm for large - scale dna analysis that is designed for intel xeon phi ; * an experimental evaluation of our dna analysis algorithm for real - world dna sequences of mouse ( 2.7 gb ) , cat ( 2.4 gb ) , dog ( 2.4 gb ) , chicken ( 1 gb ) , human ( 3.2 gb ) and turkey ( 0.2 gb ) ; * a discussion of the state - of - the - art in pattern matching and dna analysis using many - core architectures ( gpus , intel xeon phi ) .    the rest of the paper is organized as follows",
    ". section [ background ] provides background information with respect to pattern matching and introduces the intel xeon phi architecture .",
    "our parallel algorithm for dna analysis using the intel xeon phi coprocessor is described in section [ our - algorithm ] .",
    "section [ exp_evaluation ] presents the experimental setup and discusses the experimental results . the work described in this paper",
    "is compared and contrasted to the state - of - the - art related work in section [ related_work ] .",
    "section [ summary_future_work ] provides a summary of this paper .",
    "in this section we first provide background information with respect to the pattern matching with finite automata .",
    "thereafter , we present the major features and the architecture of the intel xeon phi coprocessor .      finding occurrences of a pattern in a text is a frequent need of many text - editing programs ( e.g. find - replace functions ) , internet search engines ( e.g. finding web - pages that are relevant to the provided query ) , or lexical analyzers ( e.g. determining the locations of a pattern within a sequence of tokens ) . in the context of computational biology , pattern matching algorithms",
    "are used for analyzing and processing genetic information by searching for particular patterns in dna sequences .",
    "formally , in dna analysis the string matching problem can be expressed as follows : the input text ( dna sequence ) is an array @xmath3 $ ] where @xmath4 is the length of the dna sequence , and pattern @xmath5 $ ] where the length of the pattern @xmath6 .",
    "the finite alphabet @xmath7 defines the possible characters of @xmath8 and @xmath9 , in this case @xmath10 , where each letter corresponds to one of the four nucleotide bases @xcite .",
    "a finite automata ( fa ) is a simple machine for processing information , which scans the input text @xmath8 in order to find the occurrences of the pattern @xmath9 .",
    "fa is an efficient technique for pattern matching , because it examines each character from @xmath8 exactly once .",
    "formally , fa is a quintuple of @xmath11 , where @xmath12 is a finite set of states , @xmath7 is a finite input alphabet , @xmath13 ( _ transition function _ ) is the function @xmath14 , @xmath15 is the start state and @xmath16 is a distinguished set of accepting states @xcite .",
    "a well known algorithm for detecting any exact occurrences ( including the overlapping ones ) of multiple patterns is the aho - corasick ( ac ) algorithm @xcite . because of the capability to deliver input - independent performance",
    ", we use the ac algorithm as a basis of our algorithm for counting and extracting patterns from a dna sequence .",
    "the ac algorithm builds an automaton by creating states and transitions corresponding to the states .",
    "the automaton is able to match multiple and overlapping occurrences , by adding a failure transition when there is no regular transition leaving from the current state .",
    "the failure transitions , known as @xmath17-transitions , do not consume any input , which make the automaton non - deterministic .",
    "the intel xeon phi ( codenamed knights corner ) is a many - core shared - memory coprocessor , which runs a lightweight linux operating system . in this paper",
    "we use the intel xeon phi coprocessor 7120p .",
    "figure [ fig : xphi - platform ] depicts the architecture of our platform , where in the left - hand side is the host comprising one or more intel x86 cpus , whereas the right - hand side depicts the intel xeon phi architecture .",
    "the xeon phi comprises 61 x86 cores , each running at 1.2 ghz base frequency with the max turbo frequency 1.3 ghz @xcite .",
    "each core has four hardware threads , in total there are 244 hardware threads per coprocessor , capable of delivering performance up to two teraflop / s at single precision or one teraflop / s at double precision .",
    "each core has a private l2 cache of 512 kb that is kept fully coherent by a global - distributed tag directory ( td ) .",
    "the l2 caches are connected through a bidirectional ring bus interconnect , which forms a unified shared l2 cache of 30,5 mb .",
    "in addition to the cores , there are 16 memory channels , which theoretically deliver up to 352 gb / s memory bandwidth .",
    "the memory controllers ( gddr mc ) and the pcie client logic provide a direct interface to the gddr5 memory and the pcie bus , respectively .",
    "the host communicates with the coprocessor through the pcie bus which is limited to 8gb / s transfer bandwidth .",
    "the pcie bus is a bottleneck for the offload programming model , where data has to be transferred from the host to the coprocessor and vice versa . in order to achieve high offload computational performance ,",
    "it is recommended that the data is transfered to the coprocessor and kept there ( reused ) to avoid memory bandwidth bottlenecks while moving the data back and forth .",
    "an important aspect of the coprocessor is its vector processing unit , which feature intel advanced vector extensions ( avx ) 512-bit simd instruction set .",
    "thus it can execute 16 single - precision ( 16 wide @xmath1 32 bit ) or 8 double - precision ( 8 wide @xmath1 64 bit ) operations per cycle .",
    "exploiting the vector units in an efficient way is one of the key aspects in achieving high performance on intel xeon phi coprocessor @xcite .",
    "the key features of our algorithm ( section  [ sec : alg1 ] ) and implementation for parallel dna analysis on intel xeon phi are : ( 1 ) decomposition of the input dna sequence across the available threads , ( 2 ) exploiting the simd parallelism , and ( 3 ) reducing the memory references using a suitable representation for the state transition table ( section  [ sec : impl ] ) .",
    "count of pattern matches and their location [ alg : pac : split ] [ alg : pac : init_v ] [ alg : pac : simd_loop ] [ alg : pac : load_next_node ] [ alg : pac : check_final ]    [ fig : paradna ]    fig .",
    "[ fig : split ] illustrates our parallelization strategy that is based on domain decomposition , which means the input dna sequence is evenly split into chunks among the available threads ( alg .",
    "[ alg : pac ] , lines 5  18 ) . while splitting the input , there is a risk of not being able to match the occurrences of patterns that cross the chunks boundaries .",
    "other researchers have addressed this issue by using speculation based on most visited states @xcite , by using suffix - arrays @xcite or using an intersection of successor states and predecessor states of the fa @xcite . in this paper",
    "we find these occurrences by overlapping the input chunks by @xmath2 characters ( alg . [ alg : pac ] line [ alg : pac : split ] ) , where @xmath18 is the pattern length .",
    "this method is applicable to multiple patterns with equal length , otherwise it can happen that two threads match the same pattern with a length shorter than @xmath2 .",
    "our algorithm exploits vector units of intel xeon phi , by splitting the chunks further into @xmath19 parts where @xmath19 represents the vector length ( alg .",
    "[ alg : pac ] , lines 10  16 ) . the operations ( such as , determining the next state ( alg .",
    "[ alg : pac ] , line [ alg : pac : load_next_node ] ) , or checking if the next state is a final one ( alg .",
    "[ alg : pac ] , line [ alg : pac : check_final ] ) ) are performed on multiple data points simultaneously .",
    "[ fig : simd ] illustrates the simd operations assuming that the input is the same as in fig .",
    "[ fig : split ] and the vector length is 4 .",
    "first we create an array of @xmath19 elements ( alg . [ alg : pac ] , line [ alg : pac : init_v ] ) , where each element starts from state @xmath15 .",
    "the first simd @xmath13 operations are performed on the characters at positions 0 , 4 , 8 , and 12 , the second simd operations are performed on characters at position 1 , 5 , 9 , and 13 , and so on . the simd loop ( alg . [ alg : pac ] line [ alg : pac : simd_loop ] ) that performs the @xmath13 operations is going to be executed @xmath20 times . the estimated speedup according to the vectorization reports ( fig .",
    "[ fig : vec - report ] ) is 2.6@xmath1 compared to the scalar @xmath13 function .",
    "the aho corasick ( ac ) with failure links algorithm has a drawback due to its non - deterministic transitions for a single character .",
    "our solution to this issue is illustrated with an example in figure [ fig : ac - dfa ] .",
    "our improved ac automaton finds the right transition ( indicated by a dashed line ) for each state , thus eliminating the failure transitions . having a valid transition for each possible symbol to another state in the automaton , guarantees that for each character there is always the same number of operations to be performed .",
    "checking whether the _ next state _ is a final one requires to store the final states in a set , and then perform a find operation in this set .",
    "we have simplified this step by reordering the number of states , such that the regular states are numbered from 0 to @xmath21 , and the final states are numbered from @xmath22 to @xmath23 , where @xmath23 is the total number of states and @xmath24 is the total number of final states . determining whether a pattern has been found is done by comparing if the _ next state _ is greater or equal than @xmath22 .    a typical representation of the _ state transition table _ ( stt )",
    "would be a matrix of @xmath25 elements , where @xmath26 is the number of states , and @xmath27 is the size of alphabet @xmath7 .",
    "the drawback of this representation is that a mapping between the characters of the alphabet and the items on the header of the stt is required ( such as , @xmath28 ) .",
    "we avoid this issue by representing the automaton as a sparse stt , where the characters of the alphabet are represented by their ascii code .",
    "the size of the stt becomes @xmath29 , where @xmath30 is the number of items in the ascii table ( that is 256 including the extended ascii codes ) .",
    "only the cells that belong to the ascii codes that represent the characters on the alphabet contain the address to the _ next state _ , the other ones contain a transition to the start state ( @xmath15 ) .",
    "table [ table : stt ] depicts the sparse stt representation of the automaton shown in fig [ fig : ac - dfa ] .",
    "our representation of sparse stt is more expensive in terms of memory space , but it is a reasonable trade - off between memory space and access speed .    @l > l l > l l > l l > l l > l @ + & _ ... _ & _ a _ & _ ... _ & _ c _ & _ ... _ & _ g _ & _ ... _ & _ t _ & _ ... _ + ( l)2 - 10 & ... & 65 & ... & 67 & ... & 71 & ... & 84 & ...",
    "+ 0 & & @xmath31 & & @xmath32 & & @xmath15 & & @xmath33 & + 1 & & @xmath31 & & @xmath34 & & @xmath15 & & @xmath33 & + 2 & & @xmath31 & & @xmath32 & & @xmath35 & & @xmath36 & + 3 & & @xmath31 & & @xmath32 & & @xmath15 & & @xmath37 & + 4 & ... & @xmath31 & ... & @xmath32 & ... & @xmath37 & ... & @xmath33 & ... + 5 & & @xmath38 & & @xmath32 & & @xmath15 & & @xmath33 & + 6 & & @xmath31 & & @xmath32 & & @xmath15 & & @xmath33 & + 7 & & @xmath38 & & @xmath32 & & @xmath37 & & @xmath33 & + 8 & & @xmath31 & & @xmath34 & & @xmath15 & & @xmath33 & +      we focus on the most time - consuming parts of our algorithm ( alg . [ alg : pac ] ) .",
    "the analysis assumes the worst case ; for example , the _ if - statement _ at line [ alg : pac : check_final ] is assumed to be always true .",
    "the estimated time is expressed as follows :    @xmath39    where @xmath40 indicates execution time of line @xmath41 , @xmath42 is the number of processing units , @xmath43 is the chunk length , and @xmath19 is the vector length .",
    "if @xmath23 is @xmath44 , @xmath24 is @xmath45 , @xmath46 is @xmath47 , @xmath48 is @xmath49 , then we obtain the following ,    @xmath50    asymptotically we can express the time complexity of our algorithm as :    @xmath51    the total parallelization overhead of our algorithm can be summarized as : @xmath52 .",
    "in this section we describe the experimentation environment used for the evaluation of our proposed algorithm and we discuss the obtained performance results .      we have implemented our algorithm using c++11 programming language and openmp .",
    "the algorithm is compiled using the intel compiler icc 15.0.0 , with enabled o2 optimization option .",
    "we have addressed the variability in the performance measurements by repeating the experiment 20 times for each problem size and number of threads .",
    "we used the intel vtune amplifier 2015 for performance data collection .    to evaluate our algorithm",
    "the experiments were performed on an intel xeon phi 7120p coprocessor .",
    "the xeon phi device contains 61 cores , each core supports four hardware threads .",
    "the coprocessor software includes the @xmath53os version 2.6.38.8 and the intel manycore platform software stack ( mpss ) version 3.1.1 .",
    "one of the 61 cores is used to run the coprocessor software , and the remaining 60 cores are used for dna analysis in our experiments .    for the experimental evaluation",
    "we have selected the dna sequences of mouse , cat , dog , chicken , human and turkey from the genbank sequence database of the national center for biological information @xcite .",
    "information about the genome references and the length of the dna sequences are listed in table [ table : dna - sequences ] .",
    ".dna data - sets [ cols=\"<,<,<\",options=\"header \" , ]     fig .",
    "[ fig : speedup ] presents the achieved speedup .",
    "the maximal speedup of @xmath0 is achieved for the human dna sequence using 240 threads compared to a sequential version running on an intel xeon e5 - 2695v2 cpu .",
    "figure [ fig : core - allocation ] shows the cpu time for each core when the human dna sequence is processed with the _ balanced _ thread affinity mode .",
    "theoretically we may expect the cpu time of each core to be the same , because each core has the same amount of symbols to process .",
    "the cpu time of individual cores may depend not only on the chunk length but also on how many occurrences of the patterns are in the corresponding sequence chunk .",
    "in this section we discuss the state - of - the - art in pattern matching and dna analysis using many - core architectures ( such as , gpu and intel xeon phi ) .",
    "villa et al .",
    "@xcite implemented the aho - corasick string matching algorithm on a cray xmt system .",
    "tumeo and villa implemented the algorithm presented in @xcite for gpu clusters @xcite .",
    "their implementation is based on splitting the input into chunks , and then processing each chunk in a separate thread .",
    "in contrast to our approach , their algorithm for pattern matching relies on the features of the cray xmt or gpu architecture , whereas our algorithm is tailored for dna analysis on intel xeon phi architecture .",
    "an acceleration of exact string matching knuth - morris - pratt algorithm on gpu is conducted by bellekens et al .",
    "they achieve nearly a @xmath54 speedup compared to the sequential version of the kmp algorithm .",
    "similarly , kouzinopoulos and margaritis @xcite conducted an experiment on the naive , kmp , boyer - moore - horspool and quick - search string matching algorithms in the context of dna sequencing using the cuda toolkit .",
    "in contrast our work addresses large - scale dna analysis on intel xeon phi .",
    "lin et al .",
    "@xcite evaluated their parallel failure - less ac algorithm on gpu and showed improvement of @xmath55 .",
    "this algorithm allocates a new thread to each character of the input to identify any pattern starting from that character , which means that it creates @xmath4 number of threads , where @xmath4 is the input length . in their experiments",
    "the length of input string is up to 256 mb .",
    "while this approach is tailored for pattern matching on gpu , we focus on dna analysis on xeon phi .    li et al .",
    "@xcite implemented in cuda the wu - manber algorithm , which is used for approximate matching of nucleotides in dna sequences on gpu .",
    "in contrast our algorithm performs exact pattern matching on intel xeon phi .    to the best of our knowledge ,",
    "our approach for large - scale dna analysis is the first one that exploits the thread level and simd parallelism available on the intel xeon phi coprocessor . in our experiments",
    "we have evaluated our approach with real - world dna sequences of several gb .",
    "fast dna analysis is important in many applications , such as , preventing the evolution of different viruses during an early phase , early diagnosis of genetic predispositions to certain diseases , or dna forensics .    in this paper",
    "we have presented an approach for accelerating dna analysis using the intel xeon phi coprocessor .",
    "the proposed parallel algorithm is based on finite automata and is used for counting and extracting the location of k - mers in a dna sequence .",
    "our approach exploits the thread - level and simd parallelism of the intel xeon phi coprocessor , and therefore it is suitable for large - scale dna sequences .",
    "experiments with real - world data - sets of several gb demonstrate that the algorithm scales well with respect to various numbers of threads and problem sizes .",
    "the best scalability we observed for the human dna sequence , which was the largest dna sequence used in our experiments .",
    "s.  aluru , n.  m. amato , and d.  a. bader , `` editorial : special section on high - performance computational biology , '' _ ieee transactions on parallel and distributed systems _ ,",
    "17 , no .  8 , pp . 737739 , 2006 .",
    "mellmann _ et  al .",
    "_ , `` prospective genomic characterization of the german enterohemorrhagic escherichia coli o104 : h4 outbreak by rapid next generation sequencing technology , '' _ plos one _ , vol .  6 , p. e22751 , 2011 .",
    "lin , c .- h .",
    "liu , l .- s .",
    "chien , and s .- c .",
    "chang , `` accelerating pattern matching using a novel parallel algorithm on gpus , '' _ computers , ieee transactions on _ , vol .  62 , no .  10 , pp . 19061916 , oct 2013 .    c.  s. kouzinopoulos and k.  g. margaritis , `` string matching on a multicore gpu using cuda , '' in _ informatics , 2009 .",
    "13th panhellenic conference on_.1em plus 0.5em minus 0.4emieee , 2009 , pp .",
    "x.  bellekens , i.  andonovic , r.  atkinson , c.  renfrew , and t.  kirkham , `` investigation of gpu - based pattern matching , '' in _ the 14th annual post graduate symposium on the convergence of telecommunications , networking and broadcasting ( pgnet2013 ) _ , 2013 .",
    "j.  dokulil , e.  bajrovic , s.  benkner , s.  pllana , m.  sandrieser , and b.  bachmayer , `` high - level support for hybrid parallel execution of c++ applications targeting intel xeon phi coprocessors . '' in _ iccs _ , ser .",
    "procedia computer science , vol .",
    "18.1em plus 0.5em minus 0.4emelsevier , 2013 , pp . 25082511 .",
    "s.  pllana , s.  benkner , e.  mehofer , l.  natvig , and f.  xhafa , `` towards an intelligent environment for programming multi - core computing systems . '' in _ euro - par workshops _ ,",
    "lecture notes in computer science , vol .",
    "5415.1em plus 0.5em minus 0.4emspringer , 2008 , pp",
    ". 141151 .    c.  w. kessler , u.  dastgeer , s.  thibault , r.  namyst , a.  richards , u.  dolinsky , s.  benkner , j.  l. trff , and s.  pllana , `` programmability and performance portability aspects of heterogeneous multi-/manycore systems . '' in _",
    "date_.1em plus 0.5em minus 0.4emieee , 2012 , pp . 14031408 .",
    "x.  tian , h.  saito , s.  preis , e.  n. garcia , s.  kozhukhov , m.  masten , a.  g. cherkasov , and n.  panchenko , `` practical simd vectorization techniques for intel xeon phi coprocessors . '' in _ ipdps workshops _ , 2013 .",
    "a.  chacn , j.  c. moure , a.  espinosa , and p.  hernndez , `` n - step fm - index for faster pattern matching . '' in _ iccs _ , ser .",
    "procedia computer science , vol .",
    "18.1em plus 0.5em minus 0.4emelsevier , 2013 , pp . 7079 .",
    "s.  memeti and s.  pllana , `` parem : a novel approach for parallel regular expression matching , '' in _ computational science and engineering ( cse ) , 2014 ieee 17th international conference on _ , dec 2014 , pp . 690697 .",
    "h.  li , b.  ni , m.  h. wong , and k .- s .",
    "leung , `` a fast cuda implementation of agrep algorithm for approximate nucleotide sequence matching . '' in _",
    "sasp_.1em plus 0.5em minus 0.4emieee computer society , 2011 , pp . 7477 ."
  ],
  "abstract_text": [
    "<S> genetic information is increasing exponentially , doubling every 18 months . analyzing this information within a reasonable amount of time </S>",
    "<S> requires parallel computing resources . </S>",
    "<S> while considerable research has addressed dna analysis using gpus , so far not much attention has been paid to the intel xeon phi coprocessor . in this paper </S>",
    "<S> we present an algorithm for large - scale dna analysis that exploits thread - level and the simd parallelism of the intel xeon phi . </S>",
    "<S> we evaluate our approach for various numbers of cores and thread allocation affinities in the context of real - world dna sequences of mouse , cat , dog , chicken , human and turkey . </S>",
    "<S> the experimental results on intel xeon phi show speed - ups of up to @xmath0 compared to a sequential implementation running on an intel xeon processor e5 . </S>"
  ]
}