{
  "article_text": [
    "convolutional neural network ( cnn ) , as an emerging deep learning architecture , has received huge attentions in various applications , such as video surveillance , image searching , speech recognition , and robot vision .",
    "a cnn works with multiple convolution layers that extract features from input data , followed by classification layers making decisions .",
    "typical large - scale cnns @xcite usually consist of millions of neural units and millions of connections that require over billion operations to process only one input .",
    "general purpose cpus , being sequential systems with limited computational resources , are inefficient for implementing cnn - based compute - intensive applications .",
    "currently , gpus are widely adopted as hardware accelerators for training deep neuron networks .",
    "however , they are energy inefficient for embedded applications .",
    "fpgas , which provide massive processing elements , reconfigurable interconnections and lower power dissipation , are naturally suitable to implement neural network circuits .",
    "studies , such as @xcite , @xcite have reported efficient cnn accelerators on embedded fpga platforms . however ,",
    "traditional register - transfer - level ( rtl ) design flow adopted in these studies require great effort in writing complex rtl codes , practicing time - consuming simulations and compilations before one can actually run accelerators on hardware .",
    "high - level synthesis ( hsl ) tools , which enable automatic compilation from high - level program ( c / c++ ) to low - level rtl specifications , were recently adopted by many studies to implement deep neural networks on fpgas . in @xcite ,",
    "an accelerator design was implemented by using the vivado - hls tool on a xilinx vc707 fpga .",
    "computation throughput and memory bandwidth are quantitatively explored by using a roofline model to find the design with the best performance and lowest resource .",
    "however , only convolution layers are implemented . the work of @xcite proposed a fixed - point cnn design using the opencl framework .",
    "a systematic methodology is presented to minimize execution time with given resource constraints . due to a matrix multiplication - based kernel design for convolution layer and",
    "the gpu - like separated kernel organization adopted , fpga s special advantage of implementing deeply pipelined circuits ( kernels ) is not fully exploited to better improve computation throughput and minimize memory bandwidth .    main contribution of this work are : ( 1 ) an opencl - based fpga accelerator with an efficient structure of pipelined kernels is proposed for implementing large - scale cnns ; ( 2 ) the design space of the proposed architecture was fully explored on stratix - v a7 fpga and two real - word large - scale cnn models were implemented and tested .",
    "results show that the proposed scheme achieves improved performance and resource utilization than previous works ; ( 3 ) we have made our design openly accessible @xcite for other researchers to study and explore new accelerator architectures for deep neural networks .",
    "opencl is an open , cross - platform parallel programming language that can be used in both gpu and fpga developments .",
    "the opencl - based fpga accelerator development flow is summarized in fig .",
    "[ fig : flow ] . in the framework , an fpga board ( as opencl device ) is connected with a desktop cpu ( as opencl host ) through a high speed pcie slot forming a heterogenous computing system .",
    "an opencl code , which defines multiple parallel compute units ( cus ) in the form of kernel functions , is compiled and synthesized to run on the fpga accelerator . on the host side , a c / c++ code runs on the cpu , providing vendor specific application programming interface ( api ) to communicate with the kernels implemented on the fpga accelerator .",
    "this work uses the altera opencl sdk toolset for compiling , implementing and profiling the opencl codes on fpgas .          a standard cnn @xcite for image classification is comprised of one or more convolutional layers , pooling layers , followed by one or more fully connected ( fc ) layers . as analyzed in @xcite ,",
    "the core part of the convolution layer is a 3-dimensional multiply - accumulate operation that can be defined by    @xmath1    where @xmath2 and @xmath3 denote the neurons at position @xmath4 in the input feature map @xmath5 and output feature map @xmath6 , respectively .",
    "@xmath7 represents the corresponding weights in the @xmath8-th layer that gets convolved with @xmath5 . in pooling layers",
    ", 2-d subsampling operations are performed on neighboring neurons of the same feature map @xmath5 . as traversing deeper in the neural network ,",
    "feature dimensions are gradually reduced . in fc layers ,",
    "each output neuron is calculated by the weighted summation of all input neurons shown by    @xmath9    in some cnn models @xcite , local response normalization ( lrn ) layers that perform normalization operations on each input neuron value by a factor that depends on the neighboring neurons are also used following the pooling layer . as illustrated in fig .",
    "[ fig : top - arch ] , the proposed architecture consists of four kernels that are connected by using altera s opencl extension channel / pipes . the convolution kernel ( conv . )",
    "is designed to implement both the 3-d multiply - accumulate operation of ( [ func : conv ] ) and the inner product operation of ( [ func : fc ] ) .",
    "the pooling kernel performs the subsampling directly on the output data streams of the conv .",
    "two data mover kernels , namely memrd and memwr , transfer feature data and weights from / to the global memory . as analyzed in section  [ sec : intro ] , the cascaded kernels form a deep computation pipeline that can implement a serial of basic cnns operations without the need of storing interlayer data back to global memory .",
    "it significantly reduces the bandwidth requirement compared to the work of @xcite .",
    "the lrn function is implemented separately from the pipeline since it may function on data from adjacent feature maps or the same feature map , which requires multiple memory access patterns .",
    "detailed design of each kernel is as follow :        define shift - register @xmath10 $ ] as delayed buffer set required convolution counter bound @xmath11 _ # pragma unroll by factor of @xmath12 _ initializing all @xmath13 $ ] to zeros read vectorized @xmath14 from channel read vectorized @xmath15 from channel perform parallel multiply - add operation of @xmath16 $ ] perform register shifting @xmath13=reg[n-1]$ ] store result @xmath17 in @xmath18 $ ] perform parallel summation @xmath19 $ ]      a single - threaded kernel with parallel convolution data paths is designed to implement both the functions of the convolution and fc layers .",
    "two techniques are used to improve the computation throughput and pipeline utilization .",
    "first , a multi - mode convolution circuit with a structure of deeply pipelined multiply - add tree and delayed buffers is designed . in @xcite , eq .",
    "( [ func : conv ] ) was written as a 5-level nested loop , in which complicated loop tiling and memory partition techniques are used to improve computation throughput .",
    "however , manual memory partition capability is not yet available in altera s opencl and the channel read / write operations used in loops will also prevent tiling optimization .",
    "therefore , we transform ( [ func : conv ] ) into a structure similar to ( [ func : fc ] ) , and implement both functions as a 2-level nested loop structure .",
    "the pseudo - code is shown in fig .",
    "[ fig : code - conv ] .",
    "when the appropriate buffer depth _",
    "is set , an efficient pipeline with an initial interval of two can be synthesized by altera s opencl compiler .",
    "secondly , data vectorization and parallel cu structures are both exploited in the design .",
    "vectorized input features @xmath20 and",
    "weights @xmath21 are streamed by multiple channels . a design parameter _",
    "vec_size _ is introduced to control the input throughput .",
    "the outermost _ for _ loop is unrolled by a factor of _",
    "cu_num _ to generate multiple instances of the convolution pipeline .",
    "consequently , outputs @xmath22 in different output feature maps @xmath6 can be generated in parallel . when configured in 3d convolution mode ,",
    "@xmath11 is set to the value of @xmath23 , while in fc mode , @xmath11 is set to @xmath24 , where _",
    "c=c / vec_size_. when no pipeline stall are caused by channel access , a speedup by _",
    "cu_num _ can be achieved .",
    "two multi - mode 3d ndrange kernels are designed to fetch / store data from / to the global memory for the computation pipelines .",
    "data and work - item mapping schemes are illustrated in fig .",
    "[ fig : map ] . in convolution mode ,",
    "the memrd kernel launches with a global work size of @xmath26\\times k , [ ( w - k)/s+1]\\times k , c ' \\times m)$ ] , while the memwr kernel works in a ndrange of @xmath27 .",
    "work - items are arranged into multiple concurrent work - groups , each of which has a local work size of _",
    "( k , k , c)_. therefore , a strict data read - write ratio is assigned to the two kernels .",
    "the proposed data movers enable efficient data reuses which can significantly reduce the global memory bandwidth requirements : 1 ) for each work - item , the fetched data @xmath2 of the input feature map @xmath5 are replicated by registers inside the memrd kernel , and then passed to all the cus of the following conv .",
    "kernel for parallel computation of the _",
    "cu_num _ output features .",
    "2 ) the fetched weights @xmath21 are first loaded onto an on - chip cache generated by the compiler .",
    "different work - groups that share the same work - group index @xmath28 can reuse the same weights from the cache without issuing new global memory load instructions . in fc mode ,",
    "both the input feature and weight data are 1d vectors as defined in eq .",
    "( [ func : fc ] ) . directly launching memrd kernel with only one classification task",
    "will significantly reduce the opportunity of data reuse in weights .",
    "therefore , we introduce batched processing capability in memrd .",
    "for instance , a batch of @xmath29 classifications can be processed with a single kernel launch by mapping the input feature maps as a single 3d data set with the setting of @xmath30 .",
    "a line - buffer - based hardware structure is proposed for the pooling kernel as shown in fig .",
    "[ fig : pool ] . the kernel first reads data of the same feature maps in a line - by - line manner from the channel and then store them in a group of @xmath31 line buffers .",
    "after all buffers are fully filled up , a window of feature map data are read out and send to the next stage of pooling logic . in cnns , two pooling schemes , i.e. , max - pooling and average - pooling , are widely used .",
    "therefore , the pooling logic modules support selecting the maximum or computing the average value of the _ ( l+1 )",
    "the kernel can also be turned off by setting a control register .    )",
    ".,width=268 ]      we choose the piece - wise linear approximation scheme presented by @xcite to implement the core exponent function of the lrn kernel .",
    "we improve this scheme by introducing a new lookup table segmentation scheme to reduce the hardware costs as shown in fig .",
    "[ fig : code - lrn ] . in this new method",
    ", we divide the function evaluation range by using power of @xmath32 , where @xmath33 is a integer that controls the accuracy .",
    "the approach avoids complicated table addressing logic by directly operates on the exponent of the input .",
    "the hardware parameter @xmath34 is determined by the used segmentation parameter @xmath33 . in alexnet implementation , a maximum approximation error of @xmath35",
    "is achieved by setting @xmath36 .",
    "load the feature values into a local memory @xmath37 $ ] place barrier on local memory @xmath37 $ ] perform parallel access on @xmath37 $ ] to fetch all neighboring features @xmath38 $ ] compute @xmath39}$ ] copy the exponent @xmath40 from @xmath41 set @xmath42 access look - up table by @xmath43 compute the approximated function value @xmath44 compute result @xmath45=fin[i , j]*pwlf$ ] place barrier on local memory @xmath37 $ ] store",
    "@xmath45 $ ] back to global memory",
    "in this section , we present the implementation results of the proposed opencl design on altera stratix - v fpga based de5-net board .",
    "the stratix - v a7 fpga consists of 622k logic elements ( les ) , 256 dsp blocks and 2560 m20k rams .",
    "there are also two 2 gb ddr3 drams connected to the fpga that function as the global memory .",
    "the opencl kernel codes are compiled by using altera opencl sdk v15.1 .",
    "two large - scale cnn models : alexnet ( 8 layers ) and vgg ( 16 layers ) models are tested with different hardware parameter settings to explore the design space .    fig .",
    "[ fig : timeline ] presents the measured performance ( a ) and detailed resource utilization ( b - d ) of the fpga for implementing alexnet model .",
    "it can be observed that all three categories of hardware resources scale linearly as the number of computing units increases .",
    "the corresponding improvements on performance are also significant from using 2 cus to 8 cus . as system throughput continue to increase , memory bandwidth gradually reaches the onboard dram s limit ( around 12.8gb / s ) , which introduces more frequent pipeline stalls resulting in a degraded performance gain",
    ". one can estimate from the reported data that the optimal parameters are _",
    "vec_size=8 _ and _ cu_num=16 _ for the de5-net board .",
    "therefore , the shortest image classification time achieved are 43 ms for alexnet and 718 ms for vgg-16 models , respectively . fig .",
    "[ fig : timeline ] shows the profiled timeline for each kernels running these two cnns models .",
    "note that the final runtime without kernel profiling will be lower than that is shown in the figure . to measure the power consumption",
    ", we blocked the power pins of the pcie slot and powered the board through external port .",
    "the average power consumed by the board while running these two models are 27.3w and 29.8w , respectively .",
    "we further compare the proposed design with other hsl - based designs in table  [ table : result ] .",
    "since cnns are multiplication - intensive , we adopt the number of dsps consumed as the main factor to evaluate hardware resource utilizations .",
    "our approach achieves a @xmath46 reduction on dsp resources while maintaining comparable performance with @xcite .",
    "one could also estimate that the proposed architecture can obtain further improvements on performance over @xcite when fixed - point data types were adopted .",
    "moreover , the proposed design implements the full precision ( 32bit float format ) cnn forward computation , which makes it also favorable to implement the backward propagation flow of model training . to make more straightforward comparison , we provide normalized performance as `` performance density '' in the table .",
    "it is clear that our method outperforms previous works .    [",
    "cols=\"^,^,^,^\",options=\"header \" , ]     all operations for image classification .",
    "convolution operation only .",
    "this work presents an open - source opencl - based fpga accelerator for convolutional neural networks .",
    "a performance - cost scalable hardware architecture with efficiently pipelined kernels was proposed .",
    "design spaces were explored by implementing two large - scale cnns , alexnet and vgg , on the de5-net fpga board .",
    "results show that our scheme achieved significant improvements on performance density and resource utilizations compared to previous studies ."
  ],
  "abstract_text": [
    "<S> convolutional neural networks ( cnns ) have been widely employed in many applications such as image classification , video analysis and speech recognition . </S>",
    "<S> being compute - intensive , cnn computations are mainly accelerated by gpus with high power dissipations . </S>",
    "<S> recently , studies were carried out exploiting fpga as cnn accelerator because of its reconfigurability and energy efficiency advantage over gpu , especially when opencl - based high - level synthesis tools are now available providing fast verification and implementation flows . </S>",
    "<S> previous opencl - based design only focused on creating a generic framework to identify performance - related hardware parameters , without utilizing fpga s special capability of pipelining kernel functions to minimize memory bandwidth requirement . in this work </S>",
    "<S> , we propose an fpga accelerator with a new architecture of deeply pipelined opencl kernels . </S>",
    "<S> data reuse and task mapping techniques are also presented to improve design efficiency . </S>",
    "<S> the proposed schemes are verified by implementing two representative large - scale cnns , alexnet and vgg on altera stratix - v a7 fpga . </S>",
    "<S> we have achieved a similar peak performance of 33.9 gops with a 34@xmath0 resource reduction on dsp blocks compared to previous work . </S>",
    "<S> our design is openly accessible and thus can be reused to explore new architectures for neural network accelerators . </S>"
  ]
}