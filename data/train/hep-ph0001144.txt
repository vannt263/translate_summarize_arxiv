{
  "article_text": [
    "among the most cpu - consuming tasks in high energy physics experiments are the detailed simulations of how detectors respond to high energy particles . even today",
    ", many physics results are given with contributions to the error due to the finite amount of monte carlo data available , and in many cases this error is comparable to and even larger than other errors . even in such large and well - funded experiments as those at lep ,",
    "monte carlo statistics is a large component of the error in precision electroweak measurements .",
    "in addition to its importance in the analysis of data , monte carlo simulation is needed at all stages of the design of experiments in order to understand and optimize the detector design , as well as to develop a good grasp of the basic physics issues . in this paper",
    "we present the first results of an ongoing program to use commodity computing to provide parallel computing for extremely fast monte carlo simulations .",
    "the aim is to go beyond the simple event - level parallelism which is commonly used today and actually run individual events through geant4 faster than would be possible on any single workstation or pc .",
    "the work has important applications not only for large scale production , but for the rapid turnaround of ideas and designs for the working physicist  the difference between waiting a few minutes and a few seconds for an event to be simulated and viewed , for example , makes a world of difference for an interactive user .",
    "geant4 @xcite is the latest stage in the development of the geant software , superseding the earlier fortran versions with a new object - oriented approach in c++ . for a variety of reasons , in no small part driven by the wish to work with software which is likely to see use in the near future , we decided to try to parallelize geant4 .",
    "the aim was to achieve a granularity finer than would be achieved by simply farming out separate events to separate cpu s and collecting the results .",
    "the approach taken was to perturb the existing software as little as possible and to modify a section of the code which handles particle tracking and interaction ( a frequent operation ) to allow it to run on multiple cpu s using top - c .",
    "top - c ( task oriented parallel  c ) @xcite was initially designed with the twin goals of easily writing parallel applications and with the ability to tolerate the high latency typically found on beowulf clusters .",
    "it is freely available at ftp://ftp.ccs.neu.edu / pub / people / gene / topc/. the same application source code has been run under shared and distributed memory ( smp , ibm sp-2 , now , beowulf cluster ) . a sequential top - c library is also provided to ease debugging .",
    "the largest example to date was a computer construction of janko s group over three months using approximately 100 nodes of an ibm sp-2 parallel computer at cornell university  @xcite .",
    "the top - c programmer s model  @xcite is a master - slave architecture based on three key concepts :    1 .",
    "_ tasks _ in the context of a master / slave architecture ; 2 .",
    "global _ shared data _ with lazy updates ; and 3 .   _ actions _ to be taken after each task .",
    "task descriptions ( task inputs ) are generated on the master , and assigned to a slave .",
    "the slave executes the task and returns the result to the master .",
    "the master may update shared data on all processes .",
    "such global updates take place on each slave after the slave completes its current task .",
    "the programmer s model for top - c is graphically described below .",
    "[ topc - fig ]    [ diagram ]    ( 100,95 ) ( 25,90)(0,0)[b]*master * ( 75,90)(0,0)[b]*slave * ( 50,00)(0,1)4 ( 50,15)(0,5)16(0,1)4 ( 5,88)(1,0)95 ( 20,75)(33,10 ) ( 20,75)(0,0)generatetaskinput ( ) ( 75,55)(25,10 ) ( 75,55)(0,0)dotask(input ) ( 25,32)(45,10 ) ( 25,32)(0,0 ) ( 50,10)(75,10 ) ( 50,10)(0,0)updateshareddata(input , output ) ( 34,69)(3,-1)27 ( 36,69)(0,0)[bl]input ( 62,51)(-3,-2)18 ( 60,51)(0,0)[br]output ( 48,37)(3,2)15 ( 48,37)(0,0)[tl](if action = = redo ) ( 25,25)(3,-1)25 ( 36,22)(0,0)[bl](if action = = update )    the task - oriented approach of top - c is ideally suited to parallelizing legacy applications .",
    "we chose the top - c task to be computation of a particle track in geant4 .",
    "the largest difficulty was in _ marshalling _ and _ unmarshalling _ the c++ g4track objects that had to be passed to the slave processes .",
    "marshalling is the process by which one produces a representation of an object in a contiguous buffer suitable for transfer over a network , and unmarshalling is the inverse process .",
    "we developed a 6-step software methodology to allow ourselves to incrementally parallelize geant4 , allowing us to isolate individual issues .",
    "the six steps were :    1 .",
    "the use of .icc ( include ) files to isolate our code from the original geant4 code ; 2 .",
    "collecting the code of the inner loop in a separate routine , dotask ( ) , whose input was a primary particle track , and whose output was the primary and its secondary particles ; 3 .   marshalling and unmarshalling the c++ objects for particle tracks ( _ gdb _ , a symbolic debugger , and _ etags _ an emacs facility for a source code browser , were invaluable here for inspecting the internals of the objects ) ; 4 .   integrating the marshalled versions of the particle tracks with the calls to dotask ( ) ; 5 .",
    "adding topc_init ( ) , topc_submit_task_input , and other routines and then testing as the marshalled particle tracks were sent across the network ; 6 .   and finally adding checktaskresult ( ) , which inspected the task output , and added the secondary tracks to the stack , for later processing by other slave processes .",
    "prior to the fifth step , all debugging was in a sequential setting .",
    "the maturity of the top - c library then allowed us to create fully functioning parallel code in less than a day .",
    "we describe here a simple test of the parallelized geant4 code described above .",
    "so far we have confined work to electromagnetic calorimetry , one of the most time - consuming , yet physically understandable tasks to simulate .    with the observation of ultrahigh energy cosmic - ray induced air showers initiated by primaries carrying over @xmath0 ev @xcite ,",
    "there is a growing interest in better - modelling particle interactions @xcite .",
    "the currently most popular programs @xcite use dedicated particle transport and interaction codes to perform the simulation .",
    "invariably they contain approximations in order to make the code run in a reasonable time , but these approximations must at some point be tested against our best models of physics .",
    "in addition , these programs can lack the flexibility of a general - purpose program like geant4 . to this end , we consider the modelling of ultrahigh energy air showers induced by gamma rays , for now taking into account only electromagnetic interactions",
    ". inclusion of hadronic interactions is underway , pending a better understanding of how to handle them at ultrahigh energies using geant4 .    in the case",
    "we consider here , the description of the calorimeter is moderately complicated .",
    "the atmosphere is defined by a stack of 230 layers of increasing thickness and decreasing density with the height above sea level .",
    "the layer thicknesses start at 50 m ( sea level ) and at higher altitudes are as thick as 1 km .",
    "the variable density was modeled using linsley s parametrization of the u.s .",
    "standard atmosphere @xcite .",
    "preliminary comparisons with the serial version of the code show excellent agreement , and comparisons with other shower simulation codes are underway .",
    "geant4 ( approximately 100,000 lines of c++ code ) was successfully parallelized using top - c .",
    "this was done despite the fact that none of our group had prior experience with geant4 .",
    "it remains to obtain timing tests on a long run with many processors .",
    "initial results for the example described indicate that a single task in our example requires approximately 1  ms of cpu time . hence , it will be essential to submit approximately 100 particles for a single slave process to compute , in order to overcome network overhead .",
    "optimization of the parallel implementaion is underway and we are also interested in collaboration with other groups who may have needs for the speedups that our methodology offers .",
    "task oriented parallel  c seems to be well - suited to the problem of parallelizing geant4 , and would likely be well - suited to other high energy physics applications as well .",
    "its flexibility and simplicity makes it possible to envision enormous speedups for geant4 within a single event , something not often considered in high energy experiments , but offering many advantages over the usual , trivial parallelism , especially during interactive data analysis and code or hardware design .",
    "9 g.  cooperman , `` top - c : a task - oriented parallel  c interface '' , _",
    "@xmath1 international symposium on high performance distributed computing _ ( hpdc-5 ) , ieee press , 1996 , pp .",
    ". g.  cooperman , w.  lempken , g.  michler and m.  weller , `` a new existence proof of janko s simple group @xmath2 '' , _ progress in mathematics _  * 173 * , birkhauser , 1999 , pp .",
    "161175 . s. yoshida and h. dai , `` the extremely high energy cosmic rays '' , j. phys .",
    "g * 24 * , 905 ( 1998 ) . the pierre auger observatory ( a surface array plus an optical air fluorescence detector ) is currently under construction .",
    "http://www.auger.org/ [ http://www.auger.org/ ]",
    "r. s. fletcher , t. k. gaisser , p. lipari and t. stanev , phys .",
    "d * 50 * , 5710 ( 1994 ) ; n.n .",
    "kalmykov , s.s .",
    "ostapchenko , a.i .",
    "pavlov , bull .",
    "phys . * 58 * , 1966 ( 1994 ) ; j. ranft , astro - ph/9911232 at http://xxx.lanl.gov .",
    "improvements in the interaction models are also underway .",
    "a preliminary nexus skeleton has been already reported in , h. j. drescher , m. hladik , s. ostapchenko , and k. werner , hep - ph/9806407  hep - ph/9806410 at http://xxx.lanl.gov .",
    "s. sciutto , _ air shower simulations with the aires system _ , in _ proc .",
    "xxvi international cosmic ray conference _ , ( eds .",
    "d. kieda , m. salamon , and b. dingus , salt lake city , utah , 1999 ) vol.1 , p.411 , astro - ph/9905185 at http://xxx.lanl.gov .",
    "d. heck _ et al .",
    "_ , _ corsika ( cosmic ray simulation for kascade ) _ , fzka6019 ( forschungszentrum karlsruhe ) 1998",
    "; updated by d. heck and j. knapp , fzka6097 ( forschungszentrum karlsruhe ) 1998 .",
    "1962 , updated 1976 , u.s . government printing office ."
  ],
  "abstract_text": [
    "<S> we describe a scalable parallelization of geant4 using commodity hardware in a collaborative effort between the college of computer science and the department of physics at northeastern university . </S>",
    "<S> the system consists of a beowulf cluster of 32 pentium ii processors with 128 mbytes of memory each , connected via atm and fast ethernet . </S>",
    "<S> the bulk of the parallelization is done using top - c ( task oriented parallel c ) , software widely used in the computational algebra community . </S>",
    "<S> top - c provides a flexible and powerful framework for parallel algorithm development , is easy to learn , and is available at no cost . </S>",
    "<S> its task oriented nature allows one to parallelize legacy code while hiding the details of interprocess communications . </S>",
    "<S> applications include fast interactive simulation of computationally intensive processes such as electromagnetic showers . </S>",
    "<S> general results motivate wider applications of top - c to other simulation problems as well as to pattern recognition in high energy physics . </S>"
  ]
}