{
  "article_text": [
    "modern high - performance scientific computing  such as numerical simulations , model fitting and data analysis , and computational optimization  often involves fairly complex algorithms written in c++ .",
    "this complexity comes , roughly speaking , from the difference between two aspects : the high - level ( abstract ) design on one hand , and the details of the specific code implementation on the other .",
    "moreover , the high - level design is not always easily understood from the implementation .",
    "the intricate mixture of the two aspects creates an understanding gap between different ( groups of ) developers with different expertise , hampering their collaboration on a given code .",
    "code developers would thus like to disentangle the two .",
    "software documentation for developers does not however offer a human - understandable , high - level overview of what the code actually _ does_. it also fails to keep this overview up to date with the code .",
    "good coding standards and strategies such as code modularity or incremental development surely aid collaborative work , but can not substitute for a higher - level view . providing",
    "such a view in visual form is the challenge we seek to meet .",
    "comments provide the building blocks for a successful resolution of this challenge .",
    "a requirement for proper comments is a part of any coding standard nowadays .",
    "in particular , most code includes ( some ) comments on the actions carried out in the succeeding lines .",
    "we propose using these comments , extending them with annotations that allow us to render them along with the code in a graphical manner .",
    "the tool we construct uses the annotations , along with information derived from c++ control structures , to produce a so - called unified modeling language ( uml )  @xcite activity diagram or _",
    "flowchart _ in non - specialized language ( see fig .  [",
    "fig : sample_activity_diagram ] ) .",
    "the tool then produces a graphical representation of this activity diagram .",
    "this approach can be applied to the full set of functions in a code package , or to a subset of them , as well as to class methods ( member functions ) .",
    "our focus is on producing a _ `` high - level '' _ activity diagram , one related closely to the algorithm as designed and written by its architects and developers , rather than a `` low - level '' one more closely tied to source code .",
    "existing tools , described below , generate diagrams of the latter type .",
    "we call the tool .",
    "it generates a set of interconnected high - level uml activity diagrams , one for each annotated function or method in the c++ sources .",
    "s approach is independent of any particular programming paradigm @xcite .",
    "its approach is modeled on that of @xcite , the de facto standard tool for generating documentation from annotated c++ sources .",
    "it binds source code and activity diagrams together , so that it is easier to maintain consistency between the two .",
    "it provides _ behavioral _ diagrams , which complement s _ structural _ information .",
    "we are currently applying to the vincia code ( http://vincia.hepforge.org ) , a plug - in to the high - energy physics event generator pythia  8 , used to simulate proton - proton collisions at cern s large hadron collider .",
    "we believe it will be useful in a broad range of scientific computing codes",
    ".    seeks to provide an easy - to - read , shared standard of communication ( the activity diagrams ) in a project , and thereby to promote the goals of :    * facilitating code development in international collaborations , among developers with different levels of expertise and coding skills , possibly located in distant locations .",
    "this involves , * * speeding up the training of new developers ; * * allowing the participation of  pure specialists \" in the subject at hand , scientists with limited programming skills but an understanding of the high - level algorithm(s ) ; * * simplifying the work of `` pure '' programmers , allowing them to concentrate on questions of performance ; * providing better _ backwards traceability _ : a way to check that the final code package meets the scientific requirements ; * enabling iterative and incremental development of complex algorithms , a form of _ agile software development _  @xcite ;    in this article , we present a proof - of - concept for these goals and address an additional one ,    * increasing readability and transparency , displaying the _ flow of actions at a single glance .",
    "_    has emerged as a _ de facto _ standard for c++ _ structural _ documentation .",
    "it can generate either on - line documentation in html format or an off - line reference manual in @xmath0 ( or both ) from a set of source files . in combination with the visualization tool graphviz  @xcite",
    ", it can generate class inheritance and call graphs ( basically _ uml class diagrams _ ) .",
    "they contain structural information on how classes relate to each other , what class members there are , and ( optionally ) comments on what each class member s role is .",
    "annotations in the source code allow the programmer to enrich the documentation it produces .",
    "makes it easy to keep the documentation consistent with the source code .",
    "uml was developed by the object management group  @xcite , and has become an industry standard .",
    "it is intended to help specify , visualize , and document models of software systems using various types of diagrams .",
    "we provide an overview of uml in  [ sec : uml ] . for our purposes , there are two main categories of diagrams : _ behavioral _ and _ structural_. the class diagrams that generates are structural .",
    "the activity diagrams  @xcite we seek to generate are behavioral .",
    "they are the object - oriented equivalent of flowcharts and data - flow diagrams .",
    "uml is used within the _ modeling _ approach to documentation , widely used in industry ( though rarely in the scientific domain ) . in this",
    "approach , software applications are designed before coding , allowing designers to work at a higher level of abstraction .",
    "details can be hidden or masked , and one can focus on different levels or aspects of a prototype .",
    "we adopt s philosophy of working with source files ; produces behavioral , high - level uml activity diagrams as a complement to s structural ones .",
    "they are intended to describe the semantics of what a code does , abstracted from c++ language - specific implementation details .",
    "they can cover these semantics at different levels of detail , at broad strokes corresponding to functions at the core of a call graph , or at a finer level corresponding to leaves of a call graph .",
    "they can also cover different levels of detail : a coarse level corresponding to long sequences of actions accomplishing a major task , as well as zooming in to a single action accomplishing an elementary task .",
    "s complementarity to s makes possible a future integration of the two tools .    a number of existing tools ( both open - source and proprietary ) allow programmers to generate activity diagrams from c++ source code .",
    "these include : ( an extension to ) , , , , , , .",
    "these tools generate diagrams based on the code , rather than on developers comments .",
    "the diagrams they produce are closely tied to the code and are thus low - level activity diagrams in our language .    in following sections , we discuss different aspects of in more detail . in sect .",
    "[ sec : a_simple_example ] , we present a simple example of annotations and the resulting output . in sect .",
    "[ sec : annotations_language ] , we describe the code annotations used by ; in sect .  [",
    "sec : implementation ] , we describe how is implemented ; and in sect .",
    "[ sec : tests ] , we discuss tests and lessons . we give some concluding remarks and an outlook in sect .  [ sec : conclusions ] . because we have relied in general principles for its design",
    ", we believe that can be used for general scientific computing packages .",
    "as an example of using , consider a simple set of annotated c++ source files : main.cpp , aux.h , and aux.cpp .",
    "they are shown in the following listings ,    .... # include \" aux.h \" # include < iostream >    int main ( ) {             int control_flag=0 ;      //$ ask user whether to proceed      std::cin > > control_flag ;           if ( control_flag==1 ) {          //$ call shower",
    "// pointer to the object vincia          vincia * vinciaobj = new vincia ( ) ;          vinciaobj->shower ( ) ;   //$         }      return 0 ; } ....    .... class vincia { public :      void shower ( ) ; } ; ....    .... # include \" aux.h \" # include < iostream >    void vincia::shower ( ) { //$ do vincia parton shower std::cout < < \" the parton shower code would go here \" ; //$1 1 ) prepare system of partons    //$1 2 ) do phase 1 of shower    //$1 3 ) ...    return ; } ; ....    the comments marked with ` //$ ` are annotations , which we shall describe in the next section .",
    "the tool uses them , along with extracted knowledge of the program s control flow  decision points ( if statements ) , loops , calls  to generate a single flowchart for each function or method . in our example",
    ", the tool is invoked via the following command lines :    ....",
    "> python3 build_db.py main.cpp > python3 build_db.py src / aux.cpp > python3 makeflows.py main.cpp > python3 makeflows.py src / aux.cpp   > java -jar plantuml.jar   flowdoc / aux_files/ * .txt > python3 makehtml.py main.cpp > python3 makehtml.py src / aux.cpp ....    reads the source files of the project one by one and produces a set of interrelated .html files , connected via hyperlinks , which are stored in the folder ` flowdoc/ ` . for this simple example , the output consists of the diagrams in fig .",
    "[ fig : simple_example_diagrams ] , which are included in the .html files . for code built using the utility  @xcite , it is easy to adapt the makefile to run .",
    "[lst : aux_cpp ] . above : diagram for ` main ( ) ` in ` main.html ` .",
    "below : diagrams for ` vincia::shower ( ) ` in ` aux.html ` , corresponding to zoom levels 0 ( left ) and 1 ( right).,title=\"fig:\",scaledwidth=60.0% ] +    ' '' ''     + [lst : aux_cpp ] . above : diagram for ` main ( ) ` in ` main.html ` .",
    "below : diagrams for ` vincia::shower ( ) ` in ` aux.html ` , corresponding to zoom levels 0 ( left ) and 1 ( right).,title=\"fig:\",scaledwidth=25.0% ] [lst : aux_cpp ] . above : diagram for ` main ( ) ` in ` main.html ` .",
    "below : diagrams for ` vincia::shower ( ) ` in ` aux.html ` , corresponding to zoom levels 0 ( left ) and 1 ( right).,title=\"fig:\",scaledwidth=25.0% ]    from the ` main.cpp ` source file , generates ` main.html ` , containing a single diagram for the function ` main ( ) ` , shown in the top diagram in fig .",
    "[ fig : simple_example_diagrams ] .",
    "_ actions _ are the building blocks of the diagrams .",
    "they correspond to sets of statements in the code preceded by annotated lines , indicated by a leading ` //$ ` .",
    "the ` if ` statement control structure , with condition ` control_flag==1 ` , is picked up automatically and the flow paths are displayed in the diagram .",
    "an annotation using the ` //$ ` prefix at the end of a line of code serves to _ highlight _ the call to the function or method present on that line . in the example , the call to the method ` vincia::shower ( ) ` , for which a separate diagram exists , is shown within the action begun two lines earlier .",
    "in addition , places a hyperlink that allows the user to navigate to that highlighted method s diagram present in the ` aux.html ` file .",
    "generates the ` aux.html ` file from ` aux.cpp ` .",
    "there is again a single diagram for the ` vincia::shower ( ) ` method ; but here , with two different _ zoom _ levels ( 0 and 1 ) , shown in the pair of diagrams at the bottom of fig .",
    "[ fig : simple_example_diagrams ] .",
    "these zoom levels correspond to the numerical qualifiers following the ` //$ ` annotations in listing  [ lst : aux_cpp ] ( no qualifier corresponds to ` @xmath1 ' ) .",
    ", to be contrasted with s high - level output in figure [ fig : simple_example_diagrams].,title=\"fig:\",scaledwidth=60.0% ] +    in fig .",
    "[ fig : lowlevel_examplediagram ] , we give an example of a low - level activity diagram , for the ` main ( ) ` function , that a tool might generate from code lacking annotations .",
    "this is roughly the kind of output generated by the tools mentioned in the introduction .",
    "produces high - level uml activity diagrams , which we ll call simply activity diagrams , from annotated c++ code .",
    "it outputs these to a set of html files , one for each source code file .",
    "the basic building blocks of an activity diagram are _ actions _ , each a statement or sequence of statements in the code .",
    "each action conceptually accomplishes a discrete task .",
    "a sequence of actions builds up an _",
    "an activity may include different flow paths .",
    "an activity has a beginning and an end . in the diagrams produced by ,",
    "these are indicated by special round symbols ( see the lower - left example in fig .  [",
    "fig : simple_example_diagrams ] ) .",
    "conditional branches are indicated by diamond - shaped elements .",
    "the diagrams generated by are interactive . in particular , they allow _ zooming _ and _ browsing_. by zooming we mean the possibility of inspecting the graphical description at different levels of detail , as previously annotated by the programmer . by browsing we mean the possibility of navigating through the network of interconnected activity diagrams associated with different functions or methods in a package",
    ". navigation is implemented using standard html hyperlinks .    0.4    .... using namespace std ;    int main ( ) {   //$ print \" hello world \" cout<<hello world ; return 0 ; } ....       0.4     in the code , activities are annotated functions or methods , for example the c++ ` main ( ) ` function ( see also fig .  [",
    "fig : activity ] ) .",
    "( s annotation grammar recognizes doxygen annotations of functions or methods .",
    "this feature will eventually allow their use as additional comments in activity diagrams . )",
    "the actions , along with the level of detail to which they correspond ( zoom level ) , are specified in the source code by the programmer .",
    "the basic syntax is as follows , + ` //$ ` _ action description _ + the beginning and end of the full activity to which the action belongs are determined by the code itself , as are the different flow paths within the activity .",
    "an up - to - date specification for the annotation can be found on the project s website , http://jlopezvi.github.io/flowgen .",
    "these include the formal specifications ( extended backus  naur form ) .",
    "here we summarize the essentials :    0.4    .... int class::activity_method ( ) {    int a ;   //$ do something //",
    "we print using std::cout std::cout <",
    "< \" do 1 \" < < endl ;    //$ do other thing std::cout < < \" do 2 \" < < endl ;    return 0 ; } ....       0.4   +    * annotations describing actions , using the syntax given above , are the key added elements that allow to generate a rich description .",
    "( see the example in fig .",
    "[ fig : action ] . )",
    "an annotation specifies what succeeding lines of code ( up to the next annotation or an annotated flow - control structure ) are doing .",
    "the added ` $ ' distinguishes an annotation from a regular c++ comment , allowing the programmer to choose explicitly what appears in the activity diagrams .",
    "0.35    .... using namespace std ;    void activity_function(int a ) { int c=2 ; if(a>0 ) {     //$ action 1     cout<<\"do 1 \" < < endl ;     //$ [ subcondition for true ]     if ( a > c )      { //$ action 4       cout<<\"do 4 \" < < endl ;      } } //$ [ subcondition for false ] else if(a==-1 ) { //$ action 3      cout<<\"do 3 \" < < endl ; } else { cout<<\"do nothing \" < < endl ; } return ;   } ....       0.7     * in ` if - elseif - else ` statements ( see fig .  [",
    "fig : if ] ) ) , annotation allows the controlling condition to be described in a human - readable way .",
    "the annotation is + ` //$ ` _ _ condition description _ _ + which should be placed on the line immediately preceding the ` if ` , ` elseif ` or ` else ` statement that it describes . loop control structures ( ` while , do - while , for ` ) allow similar annotations .    0.4    .... ... //$ last action           code           //$ [ return value ]   return xvar ; ...   ....    0.4     * annotations preceding ` return ` statements ( see fig .",
    "[ fig : return ] ) allow the return value to be specified in a human - readable way .",
    "( this feature has not yet been implemented . )    0.4    .... ... //$ < parallel > action 1 code //$ < parallel > action 2 code //$",
    "< parallel > action 3 code ... ....       0.4     * parallel actions ( see fig .",
    "[ fig : parallelactions ] ) : the tag `` < parallel > ` ' allows the programmer to indicate whether a sequence of actions could ( in principle ) be executed in parallel .",
    "( this tag has not yet been implemented . ) * a postfix annotation , + ` code_line_with_a_function_call //$ ` + allows the programmer to _ highlight _ calls to functions or methods ( see fig .",
    "[ fig : simple_example_diagrams ] and the call to the method ` vincia::shower ( ) ` in the example in the previous section ) .",
    "the call will appear explicitly in the diagram .",
    "this annotation also inserts a hyperlink to the diagrams for the functions or methods .",
    "this allows a developer to browse from the caller s diagram to the called function s diagram . *",
    "_ zoom _ levels : the programmer can indicate at which level of detail a description of an action should appear by adding an integer immediately after the opening `` //$ ` ' of an annotation ( see fig .",
    "[ fig : simple_example_diagrams ] and the associated listing [ lst : aux_cpp ] ) .",
    "higher numbers indicate a finer level of detail ; the zoom level is 0 by default , corresponding to the coarsest level of detail .",
    "this makes different zoom levels possible in visualizing the html output .",
    "in this section we discuss the implementation of the tool . in the first of two subsections , we discuss the requirements arising from the specifications presented in the previous section , as well as the choice of technologies ; in the second , the design concept and the specific implementation .",
    "we can classify the annotations discussed in the previous section into three groups from a ` technical ' point of view .",
    "this classification is useful to understand the requirements of our tool .",
    "* actions ( ` //$ ` _ action description _ ) : these will be given sequentially within _ compound statements _ , that is sequences of code lines inside braces .",
    "action annotations can appear anywhere inside a compound statement .",
    "* contextual annotations adding descriptions to control - flow structures + ( ): the precise position of these annotations is important , and they must be associated to the corresponding control structure ( ` if ` , ` for ` , etc . ) * call highlighters ( ` code_line //$ ` ) : the preceding code line must be analyzed to identify function calls ; and the calls should be matched with the corresponding diagrams for the called functions , if they exist .    the need to link actions to the c++ code , and in particular with detailed knowledge of the syntax of the c++ code , makes it necessary to use a c++ parser .",
    "we have used the ` libclang ` library of the project ( http://clang.llvm.org/ ) .",
    "we use it to perform the syntax analysis phase of c++ parsing , which yields an abstract syntax tree ( ast ) .",
    "this tree is then used by to extract information it needs .",
    "is a c language family front - end for the llvm compiler .",
    "clang s development is completely open - source , with several major software development companies involved , including google and apple .",
    "features static analysis utilities and bindings to python via a standardized library called ` libclang ` . also includes full support for annotations with the format ( called `` full comments '' ) but , at present it leaves remaining comments out of the generated ast .",
    "the documentation is at present mostly at the developer level .    for most of our purposes , however , regular - expression and scripting techniques are well - suited and convenient . for these , our language of choice is python ( more specifically , python 3 ) .",
    "@xcite is a standard open - source graph - drawing package . beyond it",
    ", there are at least two free solutions that automate the generation of graphs :  umlet  @xcite    ( http://www.umlet.com/ ) and plantuml ( http://plantuml.sourceforge.net/ ) .",
    "the programs draw diagrams from a description given in textual form in a simple and intuitive language .",
    "we have chosen to use plantuml ; we hope that its continued development will also enhance the capabilities of our documentation tool . as an interface to a visualization system , uses standard html , just as does .",
    "this choice allows the use of any web browser as the visualization system and will facilitate the integration of with .",
    "we end this subsection by listing the software prerequisites for :    * llvm - clang 3.4 ( or later ) + python3 bindings + http://clang.llvm.org/get_started.html + https://github.com/kennytm/clang-cindex-python3 * python3 + http://www.python.org/getit/ * plantuml ( included in the flowgen distribution ) + http://plantuml.sourceforge.net/      in order to produce activity diagrams , must execute the following steps :    1 .    produce a combined parsed output , e.g. , in xml format ; 2 ) run a script on the parsed output to construct an ` abstract ' diagram.]read sources ( annotated c++ code ) , parse them , and link the parse tree to the annotations , using and .",
    "2 .   produce an abstract representation of the diagram , using .",
    "render the abstract representation of the diagram into graphical form , making concrete display choices for widths , lengths , fonts , colors , etc . this step uses .",
    "embed the generated set of diagrams into html files , to allow zooming and browsing , as explained in sect .",
    "[ sec : annotations_language ] . this step uses .",
    "we present a more detailed account of how operates in fig .  [",
    "fig : flowgen_flowchart ] .",
    "we distinguish three phases , which however do not precisely correspond to the list above .    in the initial ` ' phase , for each source file ( headers excluded ) , a database is generated which contains a list of the annotated functions or methods .",
    "generated database files are text files and carry the extension `` .flowdb ` ' .",
    "this phase is necessary for multi - file projects , because can not simultaneously process multiple translation units .",
    "a script controls the main phase , ` ' .",
    "it first reads the sources and calls to get information on the annotated functions or methods : namely , their starting and ending locations in the source files .",
    "the script then processes the corresponding ranges line - by - line .",
    "some annotations ( actions ) are identified by simple regular - expression parsing .",
    "more complicated structures are captured by using the library . for each source file ,",
    "the script writes a corresponding text file ( with suffix ` .txt ` ) containing a description , giving the commands to draw the diagrams for all the annotated functions or methods .",
    "is then run ( externally ) in order to obtain the diagrams in png format , as well as image maps in cmapx format .",
    "the latter are used in the html pages to attach hyperlinks to certain rectangular regions of the png images ( for example , to attach hyperlinks to calls to functions or methods ) .    finally , in the ` '",
    "phase , another script generates an html file for each source file .",
    "the html files include the png images and use the information in the cmapx files .",
    "the three phases can be automated in a makefile .",
    "we have tested our initial implementation of on a variety of source files , which include code with nested ` if ` statements , calls to functions and class methods , annotation with different zoom levels , and links to be followed in browsing . a full , realistic example for a single method in the vincia code mentioned in the introduction can be found on the project s website ( http://jlopezvi.github.io/flowgen/ ) and as accompanying files on ` arxiv ` .",
    "the example is a long procedural method where separation into several smaller methods is possible and may be desirable .",
    "the code was taken from another vincia developer .",
    "we selected amongst those comments already present the ones that reflected a description of the actions performed by the code , and annotated them , including a zoom level where appropriate .",
    "we also indicated where parallel processing was possible .",
    "in addition , we annotated some conditions for ` if ` statements and loops .",
    "we believe that the resulting diagram makes understanding the algorithm much easier , and that this understanding compensates for the additional effort in annotation .",
    "we believe that even the elementary example depicted in fig .",
    "[ fig : simple_example_diagrams ] shows the benefits of the tool we are proposing .",
    "the diagrams combine two different views of the code , a high - level semantic view on the one hand , with code - level implementation details such as branching , or variable and method names important to annotated activities .",
    "it offers a common ground for specialists of different backgrounds to collaborate more efficiently .",
    "we regard the present implementation as a proof of concept .",
    "we note in passing that the activity diagrams generated from the code by can be modified by hand , as the input files are text files .",
    "this could in principle be used to modify or evolve the design of the code ; the code and accompanying annotations could then be updated to match .",
    "the tool can thus be used to facilitate iterative and incremental ( ` agile ' ) development at a higher level than direct coding .",
    "we intend to apply more widely within the vincia collaboration , and to refine it as we gain experience .",
    "the present version of the tool is in any case available from the project website .",
    "we have described an initial version of , a documentation tool that generates high - level uml activity diagrams from annotated c++ sources .",
    "these diagrams give a description of the dynamic behavior of the code .",
    "the tool is complementary to the documentation tool , which provides the user with structural information about static aspects of the code .",
    "employs annotations similar in spirit to those of , designed so as not to interfere with the annotations used by the latter . as matures ,",
    "this preserves the possibility of combining the two tools .",
    "a behavioral description of a software package , using activity diagrams , allows us to see at a glance its procedural flow of actions . gives a graphical representation of this procedural flow , and adds two other capabilities : the possibility of zooming to different levels of detail ; and the possibility of browsing to diagrams for other called functions within the package .",
    "requires annotating the code to indicate the discrete actions and select calls to hyperlink , and optionally to add descriptions to control structures , indicate parallelizable code , and different levels of detail for later visualization . the additional effort to produce",
    "a basic visualization is modest ; a complete high - level description would obviously require additional effort in rethinking the textual parts of comments .",
    "we have designed the tool primarily for codes written in a procedural ( or `` imperative '' ) programming paradigm @xcite , one of the paradigms possible in c++ , and the one which encompasses the bulk of scientific codes .",
    "it is primarily designed for developers and designers , rather than users , but is explicitly intended to address a broad spectrum of programming abilities , from skilled programmers to designers with an understanding of the underlying science and algorithms but limited programming abilities .",
    "we thank serguei roubtsov of the technical university of eindhoven for giving us feedback from a computer scientist s point of view , and for a critical reading of the manuscript .",
    "we also thank peter skands for the original idea for , offered during a lunchtime discussion at cern .",
    "this research is supported by the european research council under advanced investigator grant erc-adg-228301 .",
    "the unified modeling language @xcite is an industry standard originally developed by the object management group  @xcite .",
    "it is intended to help specify , visualize , and document models of software systems .",
    "it relies on object - oriented ideas such as classes and operations .",
    "it fits most naturally with object - oriented languages and systems , but can be used to model other types of languages as well .",
    "the most recent version of the uml specification is 2.4.1 of august 2011 ( http://www.omg.org/spec/uml/2.4.1/ ) .",
    "[ fig : umldiagrams ] shows the types of diagrams included , organized into three main subtypes .",
    "seven diagram types represent static application _ structure _ ; three represent general types of _ behavior _ ; and four represent different aspects of _",
    "interactions_. interaction diagrams can be considered a subtype of behavioral ones .",
    "m. auer , j. poelz , s. biffl , proceedings of 11th international conference on enterprise information systems ( iceis 2009 ) , milan , may , 2009 ; + m. auer , t. tschurtschenthaler , s. biffl , proceedings of euromicro 2003 , antalya , september , 2003 .",
    "omg , figure a.5 - the taxonomy of structure and behavior diagram , in : uml specification version 2.4.1 . , omg unified modeling language ( omg uml ) , superstructure , http://www.omg.org/spec/uml/2.4.1/ , 2011 ."
  ],
  "abstract_text": [
    "<S> we present the tool , which generates flowcharts from annotated c++ source code . </S>",
    "<S> the tool generates a set of interconnected high - level uml activity diagrams , one for each function or method in the c++ sources . </S>",
    "<S> it provides a simple and visual overview of complex implementations of numerical algorithms . is complementary to the widely - used documentation tool . </S>",
    "<S> the ultimate aim is to render complex c++ computer codes accessible , and to enhance collaboration between programmers and algorithm or science specialists . </S>",
    "<S> we describe the tool and a proof - of - concept application to the vincia plug - in for simulating collisions at cern s large hadron collider .    </S>",
    "<S> flowgen , c++ , visual documentation , uml activity diagram , flowchart , high - level design , annotated sources , doxygen    * program summary *    _ authors : _ </S>",
    "<S> + _ program title : _ + _ journal reference : _ </S>",
    "<S> + _ catalogue identifier : _ </S>",
    "<S> + _ licensing provisions : _ gplv2 + _ programming language : _ python 3 + _ operating system : _ linux , macos , </S>",
    "<S> windows + _ ram : _ varying + _ keywords : _ c++ , visual documentation , uml activity diagram , flowchart , annotated sources + _ classification : _ </S>",
    "<S> + _ external routines / libraries : _ , + _ nature of problem : _ to document visually the dynamic behavior of complex scientific algorithms coded in c++ + _ solution method : _ generation of a set of interconnected uml activity diagrams from annotated c++ sources +   +   +   +   +   +   +   + </S>"
  ]
}