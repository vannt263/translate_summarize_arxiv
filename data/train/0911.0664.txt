{
  "article_text": [
    "@xmath2 versus @xmath3 , the problem of whether non - determinism helps in logarithmic space bounded computation , is a longstanding open question in computational complexity . at present , only a few results are known .",
    "it is known that the problem is equivalent to the question of whether there is a log - space algorithm for the _ directed connectivity _ problem , namely given an @xmath0 vertex directed graph @xmath4 and pair of vertices @xmath5 , find out if there is a directed path from @xmath6 to @xmath7 in @xmath4 . in 1970 , savitch @xcite gave an @xmath8-space deterministic algorithm for directed connectivity , thus proving that @xmath9 for every space constructable function @xmath10 . in 1987 and 1988 , immerman @xcite and szelepcsenyi @xcite independently gave an @xmath11-space non - deterministic algorithm for directed _ non - connectivity _ , thus proving that @xmath12-@xmath3 .",
    "for the problem of _ undirected connectivity _",
    "( i.e. where the input graph @xmath4 is undirected ) , a probabalistic algorithm was shown in 1979 using random walks by aleliunas , karp , lipton , @xmath13 , and rackoff @xcite , and in 2005 , reingold @xcite gave a deterministic @xmath11-space algorithm for the same problem , showing that undirected connectivity is in @xmath2 .",
    "trifonov @xcite independently gave an @xmath14 algorithm for undirected connectiivty .",
    "+   + in terms of monotone computation , in 1988 karchmer and wigderson @xcite showed that any monotone circuit solving directed connectivity must have superlogarithmic depth , showing that monotone-@xmath15 monotone-@xmath2 . in 1997 raz and mckenzie @xcite proved that monotone-@xmath16 monotone-@xmath17 and for any @xmath18 , monotone-@xmath19 monotone-@xmath20 .",
    "+   + so far , most of the work trying to show that @xmath21 has been done using branching programs or the jag model , introduced in @xcite and @xcite respectively .",
    "instead , we explore trying to prove @xmath21 using the switching network model , described in @xcite .",
    "this model can be applied to any problem , and a general definition is given in section 2 . in this paper , we focus on switching networks solving directed connectivity .",
    "+   + the best way to describe what such a switching network is through an example , see figure [ examplenetwork ] and the accompanying explanation .",
    "a formal specialized definition is given below :    [ switchingdefinition ] a switching network solving directed connectivity on a set @xmath22 of vertices with distinguished vertices @xmath5 is a tuple @xmath23 where @xmath24 is an undirected multi - graph with distinguished vertices @xmath25,@xmath26 and @xmath27 is a labeling function such that : + 1 .",
    "each edge @xmath28 has a label of the form @xmath29 or @xmath30 for some vertices @xmath31 .",
    "+ 2 . given a directed graph @xmath4 with vertex set @xmath22 ,",
    "there is a path in @xmath24 from @xmath25 to @xmath26 such that all of the labels are consistent with @xmath4 , i.e. of the form @xmath32 for some edge @xmath33 or @xmath34 for some @xmath35 , if and only if there is a path from @xmath6 to @xmath7 in @xmath4 .",
    "+ we say that such a switching network solves directed connectivity on @xmath0 vertices , where @xmath36 , and we take its size to be @xmath37 .",
    "a switching network solving directed connectivity is monotone if it has no labels of the form @xmath30 .",
    "+    [ examplenetwork ] = 1.2 in    notation : in this paper , we use lower case letters ( i.e. @xmath38 ) to denote vertices , edges , and functions , and we use upper case letters ( i.e. @xmath39 ) to denote graphs and sets of vertices and edges .",
    "we use unprimed symbols to denote vertices , edges , etc . in the directed graph @xmath4 , and we use primed symbols to denote vertices , edges , etc . in the switching network @xmath24 .      in section [ switch ]",
    ", we give a proof that if there is no polynomial - sized switching network solving directed connectivity , then @xmath21 .",
    "thus , our goal is to prove a superpolynomial lower size bound on switching networks solving directed connectivity . in this paper , we focus on showing lower size bounds for monotone switching networks solving directed connectivity . +   + we can view the vertices of a switching network solving directed connectivity as encoding how much we know about the directed graph @xmath4 , where at @xmath25 we know nothing about @xmath4 and at @xmath26 we know there is a path from @xmath6 to @xmath7 in @xmath4 .",
    "when we move from one vertex in the switching network to another , it represents a change in our knowledge , which is allowed because the fact that we can make this move gives us information about @xmath4 .",
    "+ the key property of moving in switching networks is that everything is reversible .",
    "thus , it is natural to start by restricting ourselves to simple states of knowledge and some basic reversible operations for getting from one state of knowledge to another .",
    "+ in section [ specialcase ] , we implement these ideas by defining a subclass of monotone switching networks solving directed connectivity , which we call certain - knowledge switching networks .",
    "we first show that certain - knowledge switching networks can capture a variant of savitch s algorithm , which implies that there is a certain - knowledge switching network of size @xmath40 solving directed connectivity .",
    "we then show that this is tight with the following theorem :    [ specialbound ] any certain - knowledge switching network solving directed connectivity on @xmath0 vertices has size at least @xmath41 .    in section [ monotonecase ]",
    ", we analyze general monotone switching networks solving directed connectivity .",
    "we give a useful simplification of monotone switching networks that can be accomplished by increasing the size of the switching network by a factor of at most @xmath0 , and we show a theorem that in a weak sense reduces monotone switching networks to certain - knowledge switching networks . + in section [ introducefouriertransform ] , we introduce a fourier transformation technique .",
    "we then use this technique to prove an @xmath42 lower size bound on monotone switching networks solving directed connectivity , and we give a condition that is sufficient to prove a superpolynomial bound .",
    "+ in section [ fourieranalogues ] , we give fourier analogues of results in sections [ specialcase ] and [ monotonecase ] and use these to prove the above condition , thus proving a superpolynomial bound on monotone switching networks solving directed connectivity .",
    "+ finally , in section [ finalsection ] , we modify and expand our techniques slightly to prove the main result :    [ bigresult ] any monotone swtiching network solving directed connectivity on @xmath0 vertices has size at least @xmath41      we now give a high level informal overview of the proof , ignoring details and subtleties .",
    "+ the main idea involved in proving lower size bounds for monotone switching networks solving directed connectivity is as follows .",
    "since @xmath24 solves directed connectivity , for every path @xmath17 in @xmath4 from @xmath6 to @xmath7 , there is a path @xmath43 in @xmath24 from @xmath25 to @xmath26 that uses only the edges of @xmath17 .",
    "we show that this @xmath43 must include a vertex @xmath44 that gives significant information about @xmath17 , i.e. there can not be too many paths @xmath45 in @xmath4 such that each pair of paths @xmath46 has very few vertices in common and all of these share the same vertex @xmath47 in @xmath24 .",
    "then if we can find a large collection of paths such that each pair of paths has very few vertices in common , this will give a good lower bound on the number of vertices in @xmath24 .",
    "+ in section [ specialcase ] , we apply this approach to prove theorem [ specialbound ] , that any certain - knowledge switching network solving directed connectivity on @xmath0 vertices has size at least @xmath41 .",
    "lemma [ specialboundlemma ] shows if we have a path @xmath43 from @xmath25 to @xmath26 in @xmath24 that uses only the edges of some path @xmath17 from @xmath6 to @xmath7 in @xmath4 , then we can pick a vertex @xmath44 in @xmath43 which tells us at least @xmath48 of the vertices in @xmath17 , where @xmath49 is the length of @xmath17 .",
    "thus , if two paths @xmath50 and @xmath51 of length @xmath49 in @xmath4 have less than @xmath48 vertices in common , then @xmath52 can not be the same as @xmath53 , so each such path gives a distinct vertex in @xmath24 .",
    "it is not hard to find a large collection of paths from @xmath6 to @xmath7 in @xmath4 of length @xmath49 such that each pair of paths has less than @xmath48 vertices in common , and this completes the proof .",
    "+ however , the way that @xmath44 gives information about @xmath17 in certain - knowledge switching networks is somewhat artificial and can not be extended to general monotone switching networks solving directed connectivity . in section [ introducefouriertransform ] , we introduce a fourier transformation technique and assign each vertex @xmath47 in @xmath24 a function @xmath54 , where @xmath55 is the set of all possible cuts of @xmath4 . + in section [ fourieranalogues ] , we prove theorem [ keytheorem ] , showing that for each directed path @xmath17 in @xmath4 we can find a function @xmath56 such that if @xmath43 is a path from @xmath25 to @xmath26 using only the edges of @xmath17 , then @xmath57 is relatively large .",
    "moreover , if @xmath50 and @xmath51 have very few vertices in common , then @xmath58 and @xmath59 are orthogonal . in this way",
    ", the vertices of @xmath43 give significant information about @xmath17 .",
    "as shown in theorem [ weaksuperpolynomial ] , this is sufficient to show a superpolynomial lower size bound .",
    "+ finally , in section [ finalsection ] , we refine the above arguments to prove theorem [ bigresult ] , that any monotone switching networks solving directed connectivity on @xmath0 vertices has size at least @xmath41 .",
    "in this section , we give a proof that if there is no polynomial - sized switching network solving directed connectivity , then @xmath21 .",
    "although the results in this section are not new , we include them for the sake of completeness .",
    "+   + to see how switching networks capture logspace computation , it is useful to first look at how a related model , switching - and - rectifier networks , captures non - deterministic logspace computation . accordingly , we give the following definition from @xcite :    a switching - and - rectifier network is a tuple @xmath60 where @xmath4 is a directed graph with distinguished vertices @xmath6 , @xmath7 and @xmath61 is a labeling function that associates with some edges @xmath33 a label @xmath62 of the form @xmath63 or @xmath64 for some @xmath18 between @xmath65 and @xmath66 .",
    "we say that this network computes the function @xmath67 , where @xmath68 if and only if there is a path from @xmath6 to @xmath7 such that each edge of this path either has no label or has a label that is consistent with @xmath69 .",
    "+ we take the size of a switching - and - rectifier network to be @xmath70 , and for a function @xmath67 , we define @xmath71 to be size of the smallest switching - and - rectifier network computing @xmath72 .",
    "[ srnetworks ] if @xmath73 where @xmath74 is at least logarithmic in @xmath66 , then @xmath71 is at most @xmath75    let @xmath76 be a non - deterministic turing machine with a read / write tape and an input tape computing @xmath72 using @xmath74 space . to create the corresponding switching - and - rectifier network ,",
    "first create a vertex @xmath77 for each possible configuration @xmath78 of @xmath76 , where a configuration includes the state of the turing machine and all of the bits on the read / write tape .",
    "now add edges in the obvious way , adding an edge from @xmath79 to @xmath80 if the turing machine could go from @xmath81 to @xmath82 .",
    "if there is a dependence on the input , put the appropriate label on this edge .",
    "finally , merge all accepting configuarations into one vertex @xmath7 .",
    "it is easily verified that the resulting switching - and - rectifier network computes @xmath72 and has size at most @xmath75 , as needed .",
    "we give the general definition of switching networks below .",
    "a switching network is a tuple @xmath83 where @xmath24 is an undirected graph with distinguished vertices @xmath25 , @xmath26 and @xmath84 is a labeling function that associates with each edge @xmath28 a label @xmath85 of the form @xmath63 or @xmath64 for some @xmath18 between @xmath65 and @xmath66 .",
    "we say that this network computes the function @xmath67 , where @xmath68 if and only if there is a path from @xmath25 to @xmath26 such that each edge of this path has a label that is consistent with @xmath69 .",
    "+ we take the size of a switching network to be @xmath37 , and for a function @xmath67 , we define @xmath86 to be size of the smallest switching network computing @xmath72 .",
    "note that switching networks are the same as switching - and - rectifier networks except that all edges are now undirected and we can not have edges with no label .",
    "however , allowing edges with no label does not increase the power of switching networks , as we can immediately contract all such edges to obtain an equivalent switching network where each edge is labeled .",
    "also , note that switching networks solving directed connectivity are just switching networks where the input is taken to be the adjacency matrix of a directed graph @xmath4 .",
    "[ switchingnetworksimulation ] if @xmath87 where @xmath74 is at least logarithmic in @xmath66 , then @xmath86 is at most @xmath75",
    ".    we can start by treating the turing machine as non - deterministic and taking the switching - and - rectifier network as in proposition [ srnetworks ] .",
    "now note that for a given input @xmath69 , since the turing machine is deterministic , each vertex has at most one edge going out from it .",
    "this means that @xmath4 has the structure of a forest where the root of each tree is either @xmath7 , a vertex corresponding to a rejecting configuration , or a directed cycle .",
    "but then whether or not there is a path from @xmath6 to @xmath7 is unaffected by making all of the edges undirected .",
    "thus , we can obtain a switching network that computes @xmath72 simply by making all of the edges of this switching - and - rectifier network undirected .",
    "the result follows immediately .    if there is no switching network of polynomial size solving directed connectivity , then @xmath21 .",
    "in this section , we consider a subclass of monotone switching networks solving directed connectivity , which we call certain - knowledge switching networks , where we can assign each vertex @xmath88 a simple state of knowledge and there are simple reversible rules for moving from one state of knowledge to another .",
    "we show that certain - knowledge switching networks can capture a variant of savitch s algorithm , so there is a certain - knowledge switching network of size at most @xmath89 solving directed connectivity on @xmath0 vertices . we then prove theorem [ specialbound ] , showing that any certain - knowledge switching network solving directed connectivity on @xmath0 vertices has size at least @xmath1 , and this bound is tight .",
    "+   + we make the following definitions :    a knowledge set @xmath90 is a directed graph with @xmath91 , and we represent @xmath90 by the set of its edges .",
    "+   + given a knowledge set @xmath90 , we can form a knowledge set @xmath92 as follows : + if there is no path from @xmath6 to @xmath7 in @xmath90 , then @xmath93 there is a path from @xmath94 to @xmath95 in @xmath96 .",
    "+ if there is a path from @xmath6 to @xmath7 in @xmath90 , then @xmath92 is the complete directed graph on @xmath22 .",
    "+ call @xmath92 the transitive closure of @xmath90 .",
    "+   + each transitive closure represents an equivalence class of knowledge sets .",
    "we say @xmath97 if @xmath98 and we say @xmath99 if @xmath100 .    we will try to label each vertex @xmath47 in the switching network with a knowledge set @xmath101 so that if @xmath102 and there is a path from @xmath25 to @xmath47 in @xmath24 using only edges in @xmath4 , then we know that either there is a path from @xmath94 to @xmath95 in @xmath4 or there is a path from @xmath6 to @xmath7 in @xmath4 , in which case we do not care which other paths are in @xmath4 . in this way",
    ", @xmath101 represents our knowledge about @xmath4 when we are at the vertex @xmath47 .",
    "+   + if there is no path from @xmath6 to @xmath7 in @xmath90 , then @xmath90 and @xmath92 represent exactly the same knowledge about @xmath4 , so they are equivalent . if @xmath101 contains a path from @xmath6 to @xmath7 , then if there is a path from @xmath25 to @xmath47 in @xmath24 using only edges in @xmath4 , we know there is a path from @xmath6 to @xmath7 in @xmath4 .",
    "thus , we may as well merge @xmath47 and @xmath26 . to do this",
    ", we make all knowledge sets with a path from @xmath6 to @xmath7 equivalent by giving them the same transitive closure , the complete directed graph on @xmath22 .",
    "the statement @xmath99 does not imply that every edge in @xmath103 is in @xmath104 .",
    "for example , if @xmath105 and @xmath106 , then @xmath107 and @xmath108 , so @xmath100 and thus @xmath99 .",
    "it is best to think of the statement @xmath99 as saying that the knowledge @xmath103 respresents is included in the knowledge @xmath104 respresents .",
    "we would like to label each vertex in the switching network with a knowledge set . in order for these labels to be meaningful",
    ", we must know that for any @xmath109 and @xmath110 , if we are at @xmath47 and use an edge with label @xmath29 to reach vertex @xmath111 , then knowing there is a path from @xmath29 in @xmath4 and having the knowledge represented by @xmath101 are sufficient to give the knowledge represented by @xmath112 .",
    "this leads naturally to the following definition :    [ certainknowledgedef ] we say a monotone switching network solving directed connectivity is a certain - knowledge switching network if we can assign a @xmath101 to each vertex @xmath88 such that the following conditions hold : + 1 .",
    "@xmath113 and @xmath114 .",
    "+ 2 . if there is an edge with label @xmath29 between vertices",
    "@xmath47 and @xmath111 , then + @xmath115 and @xmath116    [ certainknowledgerules ] the condition that @xmath115 and @xmath116 is equivalent to the condition that we can obtain @xmath112 from @xmath101 using only the following reversible operations : + operation 1 : add or remove @xmath29 .",
    "+ operation 2 : if @xmath117 are both in @xmath90 , add or remove @xmath118 from @xmath90 .",
    "+ operation 3 : if @xmath119 is in @xmath90 , add or remove any edge except @xmath119 from @xmath90 + if this condition is satisfied , we say we can get from @xmath101 to @xmath112 with the edge @xmath29 .",
    "the operations in proposition [ certainknowledgerules ] are not a good starting point for definitions , but they are very effective for analyzing certain knowledge switching networks solving directed connectivity .",
    "the reader would do very well to understand these operations thoroughly .",
    "in particular , note that each of these operations is reversible .",
    "this reflects the undirected nature of the switching network ; we can undo any move that we make .",
    "= 2.4 in      while this model is restricted , it is not trivial . in particular",
    ", it is capable of capturing the following variant of savitch s algorithm : +   + savitch s algorithm works as follows . to check if there is a path of length at most @xmath49 between vertices @xmath6 and @xmath7",
    ", we go through all of the possible midpoints @xmath120 and recursively check whether there is a path of length at most @xmath121 from @xmath6 to @xmath120 and whether there is a path of length at most @xmath122 from @xmath120 to @xmath7 .",
    "if @xmath123 , then we check the adjacency matrix of the graph directly .",
    "there is a path from @xmath6 to @xmath7 in @xmath4 if and only if both subpaths are in @xmath4 for some @xmath120 .",
    "+   + this algorithm reaches depth at most @xmath124 and stores one vertex at each level , so it requires @xmath125 space .",
    "+   + savitch s algorithm implicitly keeps track of a knowledge set @xmath90 of which paths are in @xmath4 .",
    "each time the algorithm checks for and finds a path , it adds it to @xmath90 . if we check for and find a path of length @xmath65 between @xmath94 and @xmath95 in the adjacency matrix , we can add @xmath29 to @xmath90 using operation @xmath65 of [ certainknowledgerules ] .",
    "if we check for and find a longer path , we have found the subpaths from @xmath94 to @xmath120 and from @xmath120 to @xmath95 for some @xmath120 , so we can add @xmath29 to @xmath90 using operation @xmath126 of proposition [ certainknowledgerules ] .",
    "+   + the problem is that in checking for a longer path from @xmath94 to @xmath95 , after finding the paths from @xmath94 to @xmath120 and @xmath120 to @xmath95 , the original algorithm only keeps the path from @xmath94 to @xmath95 in @xmath90 and discards the paths from @xmath94 to @xmath120 and from @xmath120 to @xmath95 from @xmath90 .",
    "similarly , if a path from @xmath94 to @xmath120 is found but no path from @xmath120 to @xmath95 is found , the algorithm immediately discards @xmath127 from @xmath90 .",
    "this is not allowed under the rules of proposition [ certainknowledgerules ] , as discarding information is not reversible .",
    "+   + we fix this by modifying the algorithm so that whenever the algorithm wants to remove a path @xmath29 of length greater than @xmath65 from @xmath90 , it must first check for and find this path again .",
    "this gives us the subpaths @xmath127 and @xmath128 so that we can remove the path @xmath29 using the operations in proposition [ certainknowledgerules ] .",
    "+   + with this modification , whenever we go from one @xmath90 to another , we are using only the operations in proposition [ certainknowledgerules ] .",
    "moreover , at each level , we add at most 3 paths , @xmath127 , @xmath128 , and @xmath29 , so there are at most @xmath129 possible @xmath90 that we could reach . +   +",
    "we can create a certain - knowledge switching network from this by creating one vertex @xmath130 for each possible @xmath90 we could reach and adding all possible labeled edges that satisfy condition @xmath126 of definition [ certainknowledgedef ] . when we run the modified savitch s algorithm , we can follow its progress in the switching network , and if the algorithm finds a path from @xmath6 to @xmath7 , we will be at @xmath26 . since the algorithm finds all possible paths ,",
    "this certain - knowledge switching network successfully solves directed connectivity on @xmath0 vertices .",
    "this immediately gives the following thoerem :    there is a certain - knowledge switching network of size @xmath40 that solves directed connectivity on @xmath0 vertices .",
    "we now prove theorem [ specialbound ] , showing that this bound is tight .",
    ".1 in * theorem [ specialbound ] .",
    "* _ any certain - knowledge switching network that solves directed graph connectivity on @xmath0 vertices has size at least @xmath41 .",
    "+ _ we will first show that the result follows from the following lemma .",
    "we will then prove the lemma .",
    "[ specialboundlemma ] if the input consists of a path @xmath17 in the directed graph @xmath131 and no other edges , then any path @xmath43 in @xmath24 from @xmath25 to @xmath26 must pass through at least one vertex @xmath47 such that @xmath132 and the union of the endpoints of the edges in @xmath101 is a subset of @xmath133 that contains at least @xmath134 of @xmath135 .",
    "for any prime @xmath136 , if @xmath137 , if we take all of the polynomials in @xmath138 $ ] of degree at most @xmath49 , then any two distinct polynomials will have at most @xmath49 values in common .",
    "thus , if @xmath139 , given a polynomial @xmath140 of degree at most @xmath49 , if we take @xmath141 to be vertex @xmath142 of @xmath4 for @xmath143 to @xmath144 , then the corresponding paths will share at most @xmath49 vertices in common . +   + however , by lemma [ specialboundlemma ] , we can associate a vertex in @xmath24 to each such path , and no two such paths can share the same vertex . hence , there are at least @xmath145 vertices in @xmath24 , and we can do this as long as @xmath146 and @xmath147 .",
    "the result follows immediately .",
    "call the vertices @xmath148 the left half of @xmath17 and the vertices @xmath149 the right half of @xmath17 .",
    "@xmath90 satisfies the lemma for the left half if the union of the endpoints of the edges in @xmath90 contains at least @xmath49 of the vertices in @xmath2 .",
    "+ we define satisfying the lemma for the right half in a similar way .",
    "we begin by giving an informal version of the proof .",
    "we prove this lemma by induction .",
    "if there is a path @xmath150 in @xmath24 using only the edges in @xmath17 , consider the sequence @xmath151 .",
    "we get from each @xmath90 to the next @xmath90 using only the operations given by proposition [ certainknowledgerules ] .",
    "thus , we are trying to use these operations to obtain an edge from @xmath6 to @xmath7 ( which represents a path from @xmath6 to @xmath7 in @xmath4 ) .",
    "+   + to obtain an edge from @xmath6 to @xmath7 using only these operations , it is necessary ( but not sufficient ) to first obtain an edge from @xmath6 to a vertex @xmath152 and an edge from a vertex @xmath153 to @xmath7 . by the inductive hypothesis ,",
    "to obtain an edge from @xmath6 to a vertex @xmath152 , we must first reach a @xmath154 that satisfies the lemma for the left half .",
    "if the union of the endpoints of the edges in @xmath154 contains even one vertex in @xmath155 , @xmath154 will satisfy the lemma .",
    "if not , then either @xmath154 already has an edge from a vertex @xmath153 to @xmath7 or there is neither an edge from @xmath153 to a vertex @xmath152 nor an edge from a vertex @xmath156 to @xmath7 , so there is no progress towards obtaining an edge from a vertex @xmath153 to @xmath7 .",
    "a similar argument holds if we try to obtain an edge from a vertex @xmath153 to @xmath7 . +   +",
    "if in trying to obtain an edge from @xmath6 to a vertex @xmath152 or an edge from a vertex @xmath153 to @xmath7 , when we reach such a @xmath154 , we always have no progress towards obtaining the other required edge , then we will never obtain an edge from @xmath119 .",
    "thus , we can only obtain an edge from @xmath6 to @xmath7 if we reach such a @xmath154 and the other required edge has already been obtained .",
    "but this means that we have reached a @xmath157 such that either @xmath157 contains an edge from @xmath6 to a vertex @xmath156 and the union of the endpoints of the edges in @xmath157 does not contain any vertex in @xmath2 or @xmath157 contains an edge from a vertex @xmath158 to @xmath7 and the union of the endpoints of the edges in @xmath157 does not contain any vertex in @xmath155 . +   + if we could reach such a @xmath157 , we would indeed be close to obtaining the path @xmath119 . however , reaching such a @xmath157 without going through a @xmath154 satisfying the lemma is impossible for the following reason : + when we first obtain an edge from @xmath6 to a vertex @xmath156 , we must have the edges @xmath159 and @xmath160 for some @xmath158 .",
    "removing these edges is just as difficult as obtaining them , which means that to remove them , we must pass through a @xmath154 such that @xmath154 satisfies the lemma for the left half .",
    "but if we also hold on to the edge @xmath161 , then @xmath154 also contains a vertex in @xmath155 , so @xmath154 satisfies the lemma .",
    "a similar argument holds if we try to obtain an edge from a vertex @xmath158 to @xmath7 .",
    "+   + we now make this argument rigorous : +    = 1.2 in     + first add all labeled edges allowed by condition @xmath126 of definition [ certainknowledgedef ] to g. now note that the only way to introduce vertices besides @xmath6 , @xmath7 , and @xmath162 is through operation 3 of proposition [ certainknowledgerules ] .",
    "but if we are at a point where we could use operation 3 , then we could instead immediately go to @xmath26 .",
    "thus , we may assume p does not use operation 3 , and we do not need to worry about any vertices in @xmath4 except @xmath6 , @xmath7 , and @xmath162 .",
    "+   + we now introduce several useful definitions :    define reducing to the left half as follows : + 1 .",
    "make all vertices in the right half of @xmath4 equal to @xmath7 .",
    "this applies to the @xmath90 of all vertices in @xmath24 .",
    "+ we define reducing to the right half in a similar way .",
    "if we reduce to either half , @xmath24 still satisfies both conditions of definition [ certainknowledgedef ] .",
    "define projecting on the left half as follows : + 1 . remove @xmath26 and all vertices with @xmath163 from @xmath24 .",
    "+ 2 . for all vertices",
    "@xmath164 , if we can get from @xmath165 to @xmath166 with the edge @xmath29 , then remove all edges with label @xmath29 that are incident with @xmath167 .",
    "+ 3 . make all vertices in the right half of @xmath17 equal to @xmath7 .",
    "this applies to the @xmath90 of all vertices in @xmath24 .",
    "+ 4 . for each @xmath90 , remove the edge @xmath168 if it is there .",
    "+ we define projecting on the right half in a similar way .",
    "if we project on either half , @xmath24 still satisfies condition 2 of definition [ certainknowledgedef ] .",
    "reducing to the left half or the right half allows us to focus on the process of obtaining an edge across that half . +   + if we have an edge from @xmath6 to a vertex in the right half , this can not help us add or remove edges with an endpoint in the left half unless operation 3 of proposition [ certainknowledgerules ] is used",
    ". the first two steps of projecting on the left half eliminate this possibility .",
    "thus , projecting on the left half allows us to focus on the process of adding or removing edges with an endpoint in the left half regardless of whether or not we have an edge that crosses the left half .",
    "projecting on the right half has a similar effect .",
    "we prove lemma [ specialboundlemma ] by induction .",
    "the base case @xmath169 is trivial .",
    "assume the lemma is true for @xmath170 .",
    "we will show that it is impossible to have a path @xmath43 in @xmath24 from @xmath25 to a vertex @xmath171 such that @xmath172 satisfies any of the following three conditions unless @xmath43 passes through a vertex @xmath47 such that @xmath101 satisfies the lemma : +   + 1 .",
    "@xmath172 has an edge from @xmath6 to a vertex in the right half , and it has no edges with an endpoint in the left half . @xmath174 .",
    "@xmath172 has an edge from a vertex in the left half to @xmath7 , and it has no edges with an endpoint in the right half . @xmath174 .",
    "+   + assume there is a path @xmath43 in @xmath24 from @xmath25 to a vertex @xmath171 such that @xmath172 is of type 1 and @xmath43 does not pass through a vertex that satisfies the lemma or has a @xmath90 of type @xmath65 , @xmath126 , or @xmath175 .",
    "+   + let @xmath111 be the last vertex on @xmath43 before @xmath171 is reached such that for one of the left half or the right half , if we reduce to that half , then @xmath112 satisfies the lemma for that half .",
    "+   + we may assume without loss of generality that it is the right half .",
    "if @xmath112 does not satisfy the lemma , then there are no edges in @xmath112 with an endpoint in the left half .",
    "now reduce to the left half .",
    "@xmath176 or @xmath177 . if @xmath176 , then @xmath112 was originally of type 1 or 2 .",
    "but @xmath114 . by the inductive hypothesis",
    ", there must be a vertex @xmath47 on the path from @xmath111 to @xmath171 such that @xmath101 satisfies the lemma for the left half .",
    "but this contradicts the definition of @xmath111 . contradiction .",
    "+   + the only case remaining is if @xmath111 does not exist .",
    "however , reducing to either half it is clear that this is impossible . +   + thus , it is impossible to reach a vertex whose @xmath90 is of type @xmath65 without first going through a vertex that satisfies the lemma or has a @xmath90 of type @xmath65 , @xmath126 , or @xmath175 .",
    "+   + assume there is a path @xmath43 from @xmath25 to a vertex @xmath171 in @xmath24 with a @xmath90 of type 2 that does not pass through a vertex that satisfies the lemma or has a @xmath90 of type @xmath65 , @xmath126 , or @xmath175 .",
    "+   + if we project on the left half and a vertex in @xmath43 is removed , this vertex had a @xmath90 of type one . contradiction .",
    "if an edge from @xmath178 to @xmath179 in this path is deleted , then we could have instead gone directly from @xmath178 to @xmath26 , which would give us a path from @xmath25 to @xmath26 that does not pass through a vertex that satisfies the lemma or has a @xmath90 of type @xmath65 , @xmath126 , or @xmath175 . from the above , this is impossible . thus , the entire path is preserved when projecting on the left half .",
    "this also implies that we are only using operations @xmath65 and @xmath126 of proposition [ certainknowledgerules ] .",
    "+   + call an edge from @xmath6 to a vertex in the right half ( this vertex can not be @xmath7 ) a left - jumping edge .",
    "+   + let @xmath180 .",
    "we can start with @xmath181 and then go from each @xmath154 to @xmath182 using only operations @xmath65 and @xmath126 in proposition [ certainknowledgerules ] .",
    "choose one possible sequence of such operations and look at the last time in that we add or remove a left - jumping edge from @xmath90 without having a shorter left - jumping edge .",
    "we know that we do this at least once because @xmath172 has a left - jumping edge .",
    "note that the only way to add or remove a left - jumping edge is to use operation 2 , so at this point we must have edges @xmath183 and @xmath184 , where @xmath185 .",
    "if @xmath183 is a left - jumping edge , then we have a shorter left - jumping edge .",
    "thus , we may assume @xmath186 .",
    "at this point , if we project on the left half , we have a @xmath90 that includes @xmath119 .",
    "this occurs in the middle of a transition between some vertices @xmath178 and @xmath179 using some edge @xmath187 , which implies that if we project on the left half , we can go from @xmath188 or @xmath189 to @xmath166 using the edge @xmath187 .",
    "let @xmath190 .",
    "@xmath191 . +   + projecting on the left half , @xmath192 and",
    "we can get from @xmath112 to @xmath166 with the edge @xmath187 . by the inductive hypothesis , there must be a vertex @xmath47 ( which may be equal to @xmath111 but can not equal @xmath171 ) on @xmath43 from @xmath171 to @xmath111 such that @xmath101 satisfies the lemma for the left half . +   + since once we reach @xmath111 we never remove the shortest left - jumping edge that we have and @xmath172 has a left - jumping edge , all vertices from @xmath111 onwards also have at least one left - jumping edge .",
    "thus , @xmath47 satisfies the lemma .",
    "+   + thus , it is impossible to reach a vertex whose @xmath90 is of type 2 without first reaching a vertex that satisfies the lemma or has a @xmath90 of type @xmath65 , @xmath126 , or @xmath175 .",
    "similar logic applies if we want to get to a @xmath90 of type 3 , and this completes the proof .",
    "in this section , we begin our analysis of general monotone switching networks solving directed connectivity .",
    "we give a definition for monotone switching networks solving directed connectivity that generalizes the definition of certain - knowledge switching networks .",
    "we then give a useful simplification of monotone switching networks solving directed connectivity that can be accomplished by increasing the size of the switching network by a factor of at most @xmath0 . finally , we prove theorem [ reductiontosimple ] , showing that in some sense , monotone switching networks solving directed connectivity can be reduced to certain - knowledge switching networks .",
    "+   + not every monotone switching network solving directed connectivity is a certain - knowledge switching network .",
    "the monotone switching networks shown in figures [ examplenetwork ] and [ monotonenetwork ] are not certain - knowledge switching networks .",
    "the reason why they are not certain - knowledge switching networks is because at the vertices in these switching networks , a depth-1 monotone formula ( only ands ) is insufficient to describe our knowledge about @xmath4 .",
    "instead , we need a depth-2 monotone formula ( ors of ands ) .",
    "+    a state of knowledge @xmath193 is a set @xmath194 of knowledge sets .",
    "+ let @xmath195 and let @xmath196 .",
    "we say @xmath197 if for every @xmath198 there exists a @xmath18 such that @xmath199 .",
    "+ we say @xmath200 if @xmath197 and @xmath201 .",
    "+ let @xmath202 .",
    "define @xmath203 to be @xmath204 .",
    "+ we say that we can get from @xmath205 to @xmath206 with the edge @xmath29 if + @xmath207 and @xmath208    the state of knowledge @xmath202 represents knowing that the paths in @xmath103 are in @xmath4 or the paths in @xmath104 are in @xmath4 or @xmath209 or the paths in @xmath210 are in @xmath4 or there is a path from @xmath6 to @xmath7 in @xmath4 .",
    "thus , @xmath193 is characterized by its least informative @xmath90 .",
    "the condition for @xmath197 ensures that @xmath206 represents at least as much information about @xmath4 as @xmath205 .",
    "we can get from @xmath205 to @xmath206 with the edge @xmath29 if and only if for every @xmath18 there exists a @xmath198 such that @xmath211 and for every @xmath198 there exists a @xmath18 such that @xmath212 .",
    "+ to do this , the following 4 reversible operations are sufficient : + operation 1 : add or remove @xmath29 from any @xmath213 .",
    "+ operation 2 : if @xmath117 are both in @xmath213 , add or remove @xmath118 from @xmath213 . + operation 3 : if @xmath119 is in @xmath213 , add or remove any path except @xmath119 from @xmath213 + operation 4a : if @xmath214 for some @xmath215 , remove @xmath216 from @xmath193 .",
    "+ operation 4b : if for some knowledge set @xmath90 and some @xmath18 , @xmath217 , add @xmath90 to @xmath193 .",
    "[ monotonedef ] for any monotone switching network solving directed connectivity , we can assign a @xmath218 to each @xmath88 so that the following properties hold : + 1 .",
    "@xmath219 and @xmath220 .",
    "if there is an edge with label @xmath29 between @xmath47 and @xmath111 , then it is possible to get from @xmath218 to @xmath221 with the edge @xmath29 .    for each vertex @xmath88 , take @xmath218 to be the set of all @xmath90 such that using the edges of @xmath90 , it is possible to reach @xmath47 from @xmath25 in @xmath24 .",
    "it is easy to check that both of the above properties are satisfied .",
    "[ monotonenetwork ] = 2.4 in    we will now describe a useful simplification for monotone switching networks that can be accomplished with an increase of at most a factor of @xmath0 in the size of the network .",
    "[ simplification ] if there is a monotone switching network @xmath222 solving directed connectivity on @xmath0 vertices , then there is a monotone switching network @xmath223 with @xmath224 such that for any vertex @xmath225 of @xmath226 , for any @xmath90 in @xmath227 , @xmath90 consists only of edges of the form @xmath228 for some @xmath229 .",
    "we construct @xmath226 by taking @xmath0 copies of @xmath24 and making the @xmath25 of each copy equal to the @xmath26 of the previous copy .",
    "we take @xmath230 to be the @xmath25 of the first copy and @xmath231 to be the @xmath26 of the last copy .",
    "+   + now for a vertex @xmath225 we construct @xmath227 as follows . for a given path from @xmath230 to @xmath225 in @xmath226 , create a @xmath90 for that path as follows : +   + 1 .",
    "let @xmath232 be the @xmath18th edge in @xmath4 that this path uses .",
    "edges can be repeated .",
    "start with a set @xmath233 of vertices in @xmath4 .",
    "if @xmath232 is the edge from @xmath234 to @xmath235 , let @xmath236 if @xmath237 and let @xmath238 if @xmath239 .",
    "let @xmath240 be the set obtained after taking the final edge in the path .",
    "set @xmath241 .",
    "+   + now take @xmath227 to be the set of all such @xmath90 .",
    "+   + it is easy to check that @xmath226 satisfies property 2 of proposition [ monotonedef ] . to see that @xmath226 satisfies property 1 , note that for each time a path goes through a copy of @xmath24",
    ", at least one new vertex must be added to @xmath240 .",
    "thus , for any path from @xmath230 go @xmath231 , we must have that @xmath240 contains every vertex including @xmath7 .",
    "thus , @xmath242 , as needed .    finally , we prove a theorem that shows that in some sense , monotone switching networks can be reduced to certain - knowledge switching networks .",
    "although this theorem is not strong enough to prove any lower size bounds , the reduction used in this theorem is very deep and will play a crucial role in section [ fourieranalogues ] .",
    "[ reductiontosimple ] for any monotone switching network , if there is a path in @xmath24 from @xmath25 to @xmath26 using only edges that have a label in a subset @xmath243 of @xmath244 , then there is a sequence of @xmath213 , @xmath245 with the following properties : + 1 .",
    "+ 2 . for all i",
    ", there exists an edge @xmath248 such that it is possible to go from @xmath213 to @xmath249 using the edge @xmath232 and the three given operations .",
    "+ 3 . for all i",
    ", there exists a vertex @xmath250 on this path such that @xmath213 is the union of some subset of @xmath251 .",
    "[ imagereductiontocertainknowledge ] = 2.0 in    for each edge @xmath252 in this path , do the following : +   + let @xmath32 be the label of @xmath252 , and let @xmath47 and @xmath111 be the endpoints of @xmath252 . for each @xmath253",
    ", there is a @xmath254 such that @xmath255 .",
    "draw an orange arrow from each @xmath256 to one such @xmath257 . similarly , for each @xmath254 , there is a @xmath253 such that @xmath258 .",
    "draw an orange arrow from each @xmath259 to one such @xmath256 .",
    "we now have a set of directed cycles with tails .",
    "take one representative @xmath256 and one representative @xmath259 from each directed cycle .",
    "+   + now draw a black arrow from each @xmath256 to the unique @xmath259 such that there is a path of orange arrows from @xmath256 to @xmath259 and @xmath259 is a representative of a cycle .",
    "similarly , draw a black arrow from each @xmath259 to the unique @xmath256 such that there is a path of orange arrows from @xmath259 to @xmath256 and @xmath256 is a representative of a cycle . +   + looking only at the black arrows , the following properties hold : + 1 . if there is an arrow going from @xmath260 to @xmath257 , then @xmath255 .",
    "if there is an arrow going from @xmath261 to @xmath262 , then @xmath263 .",
    "if we there are arrows going both ways between @xmath260 and @xmath257 , we can get from @xmath256 to @xmath259 with @xmath32 . +   + finally , for each vertex @xmath47 , order the @xmath101 .",
    "+   + now we will try to travel from @xmath25 to @xmath26 on this path while always keeping a subset of the @xmath90 of the vertex we are on .",
    "when attempting to go from a vertex @xmath47 to a vertex @xmath111 , we will allow only the following operation : +   + if every @xmath260 we have is the representative of a cycle as described above , then travel to @xmath111 and replace each @xmath260 with the corresponding @xmath257 . if not , then do the following : + 1 . for each @xmath260 we have that is the representative of a cycle ,",
    "replace it by the corresponding @xmath257 .",
    "take the earliest @xmath260 we have that is not the representative of a cycle .",
    "take the @xmath257 that the arrow going from this @xmath260 is pointing to .",
    "remove this @xmath257 if it is in our set and add it if it is not .",
    "+ 3 . for each @xmath257",
    "we have , replace it by the corresponding @xmath260 . +   + note that for each of these steps , we can get from the union of the @xmath90 before that step to the union of the @xmath90 afterwards with some edge @xmath264 .",
    "thus , if we use only this operation , the resulting sequence of @xmath213 will obey the given rules .",
    "+   + also note that each such operation is reversible and if we are at a vertex in the middle of the path , we have exactly two choices for where to go next regardless of which subset we have . however , if we are at @xmath25 or @xmath26 , our subset is fixed and we only have one choice for where to go next .",
    "thus , we must be able to get from @xmath25 to @xmath26 using only the given operation , and this completes the proof .",
    "unfortunately , the above results are insufficient to prove a superpolynomial lower size bound on monotone switching networks solving directed connectivity . to prove a good lower size bound ,",
    "more sophisticated techniques are needed . in this section ,",
    "we introduce a fourier transformation technique for monotone switching networks solving directed connectivity .",
    "we then use this technique to prove an @xmath42 lower size bound .",
    "finally , we give a condition which is sufficient to prove a superpolynomial lower size bound .",
    "+   + an alternate way of solving directed connectivity is to look at cuts of @xmath4 .",
    "there is a path from @xmath6 to @xmath7 if and only if there is no cut @xmath265 such that @xmath266 , @xmath267 , and there is no edge from a vertex in @xmath268 to a vertex in @xmath269 .",
    "thus , instead of describing each state of knowledge @xmath193 in terms of paths in @xmath4 , we can describe each @xmath193 as a function of the cuts of @xmath4 .",
    "we do this below .",
    "we define an s - t cut ( below we use cut for short ) of @xmath4 to be a subset @xmath270 of @xmath22 such that @xmath271 and @xmath272 .",
    "we denote the complement of @xmath270 by @xmath273 , and we say an edge @xmath29 crosses @xmath270 if @xmath274 and @xmath275 .",
    "+ let @xmath55 denote the set of all cuts @xmath270 . @xmath276",
    ".    given a state of knowledge @xmath193 , we want @xmath277 to be @xmath65 if given the information @xmath193 represents we know that @xmath4 contains an edge crossing @xmath270 and @xmath278 otherwise .",
    "this leads to the following definitions :    given a cut @xmath270 and a set of edges @xmath90 , define @xmath279 to be @xmath65 if there is an edge in @xmath90 that crosses @xmath270 and @xmath278 otherwise .    given a cut @xmath270 and a state of knowledge @xmath202 ,",
    "define @xmath277 to be @xmath65 if for all @xmath18 , @xmath280 and @xmath278 otherwise .",
    "it is easy to verify that for every knowledge set @xmath90 and state of knowledge @xmath193 , @xmath279 and @xmath277 are well - defined , i.e. if @xmath281 , @xmath282 and if @xmath283 , @xmath284 .",
    "+ note that for all @xmath270 , @xmath285 and @xmath286 .",
    "+ we define basis functions as follows :    given a set of vertices @xmath287 that does not include @xmath6 or @xmath7 , define @xmath288 .",
    "we define the dot product as follows :    given two functions @xmath289 , @xmath290    note that @xmath291 for every cut @xmath270 , where @xmath292 denotes the symmetric difference of two sets , and hence the functions @xmath293 form an orthonormal basis for the vector space @xmath294 with the standard dot product @xmath290 . + we define fourier coefficients as follows : +    @xmath295    for any function @xmath72 , @xmath296 and @xmath297 , where we are summing over all subsets @xmath298 of @xmath22 such that @xmath299 .",
    "+    [ eliminator ] given a monotone switching network @xmath24 , if there an edge with label @xmath29 between vertices @xmath47 and @xmath111 , then for any cut @xmath270 , if @xmath300 or @xmath301 , then @xmath302 .",
    "[ fourierpicture ] = 0.8 in      we will now use the fourier transformation technique to show an @xmath42 lower size bound on monotone switching networks solving directed connectivity .",
    "+   + to do this , we will consider linear combinations of the @xmath303 functions .",
    "+    [ linearcombinationbound ] if @xmath304 has rank at least @xmath120 , then @xmath24 has at least @xmath305 vertices .    the vector space of linear combinations of @xmath306 and @xmath307 has rank @xmath65 .",
    "each new vertex can add at most @xmath65 to the rank of the vector space , and this completes the proof .    given a directed walk @xmath43 from @xmath178 to @xmath179 in @xmath24 and a label @xmath32 ,",
    "define @xmath308 to be @xmath309 , where @xmath310 is the set of vertices in @xmath24 with an edge in @xmath43 with label @xmath32 going into it and @xmath311 is the set of vertices in @xmath24 with an edge in @xmath43 with label @xmath32 going out from it , counted with multiplicity .",
    "together , all of the edges in @xmath43 allow us to go from @xmath178 to @xmath179 , and the change in our knowledge is @xmath312 .",
    "@xmath313 measures the contribution to this change made by edges with label @xmath32 .    clearly , for any @xmath43 and @xmath32 , @xmath313 is in @xmath304 .",
    "[ theoremone ] if @xmath24 is a monotone switching network solving directed connectivity on @xmath0 vertices , then @xmath24 has at least @xmath0 vertices .",
    "we obtain this lower size bound by combining several simple statements .",
    "[ propone ] if @xmath43 is a directed path in @xmath24 from @xmath25 to @xmath26 using only edges with labels @xmath314 and @xmath315 , then for a cut @xmath270 , @xmath316 is @xmath65 if @xmath317 and @xmath318 otherwise .    for a cut @xmath270 , if @xmath319 then using proposition [ eliminator ] , @xmath320 . if @xmath317 , then using proposition [ eliminator ] , @xmath321 . since + @xmath322 , @xmath323 .",
    "+    [ proptwo ] if @xmath43 is a directed path in @xmath24 from @xmath25 to @xmath26 using only edges with labels @xmath314 and @xmath315 , then for a cut @xmath270 , @xmath324 is @xmath65 if @xmath319 and @xmath318 otherwise .",
    "for a cut @xmath270 , if @xmath317 then using proposition [ eliminator ] , @xmath321 . if @xmath319 , then using proposition [ eliminator ] , @xmath325 . since + @xmath322 , @xmath326 .",
    "+    [ corone ] let @xmath327 .",
    "then @xmath328 , and all other fourier coefficients are zero .    for each of the @xmath329 vertices @xmath234 that are not equal to @xmath6 or @xmath7 , we can create a linear combination of @xmath303 such that the resulting function @xmath72 has all fourier coefficients @xmath318 except for @xmath330 , which is nonzero .",
    "also , if @xmath331 , @xmath332 and all other fourier coefficients are zero .",
    "thus , these @xmath333 functions are linearly independent , and the result follows from proposition [ linearcombinationbound ] .",
    "[ theoremtwo ] if @xmath24 is a monotone switching network solving directed connectivity on @xmath0 vertices , then @xmath24 has at least @xmath334 vertices .",
    "again , we obtain this lower size bound by combining several simple statements .",
    "[ propthree ] if @xmath43 is a directed path in @xmath24 from @xmath25 to @xmath26 using only edges with labels @xmath314 , @xmath335 , and @xmath336 , then for a cut @xmath270 , @xmath337 is @xmath65 if @xmath319 and @xmath338 and @xmath318 otherwise .    for a cut @xmath270 , if @xmath339 or @xmath340 then using proposition [ eliminator ] , @xmath341 . if @xmath319 and @xmath338 , then using proposition [ eliminator ] , @xmath342 . since + @xmath343 , @xmath344 .",
    "+    [ propfour ] if @xmath43 is a directed path in @xmath24 from @xmath25 to @xmath26 using only edges with labels labels @xmath314 , @xmath335 , and @xmath336 , then for a cut @xmath270 , @xmath345 is @xmath318 if @xmath319 and @xmath338 and @xmath65 otherwise .    for a cut @xmath270 , if @xmath319 and @xmath338 then using proposition [ eliminator ] , @xmath346 . if not , then using proposition [ eliminator ] , @xmath347 . since @xmath343 , @xmath348 .",
    "+    [ cortwo ] let @xmath349 .",
    "then @xmath350 , @xmath351 , @xmath352 , @xmath353 , and all other fourier coefficients are zero .    for each pair of vertices @xmath354 not equal to @xmath6 or @xmath7 , as shown above , we can create a function where @xmath355 . as long as each pair of vertices",
    "is used only once , this will be the only function for which this is true . in this way",
    ", we can obtain @xmath356 linearly independent functions .",
    "after this , we can still use the same @xmath333 functions from before , so this gives us a total of @xmath357 linearly independent functions .",
    "again , the result follows from proposition [ linearcombinationbound ] .",
    "+      in this subsection , we show how more general lower size bounds can be obtained .",
    "given a directed walk @xmath43 from @xmath178 to @xmath179 in @xmath24 using only the edges of some directed path @xmath17 in @xmath4 from @xmath6 to @xmath7 and a partition of the edges of @xmath17 into two sets , @xmath358 and @xmath359 , let @xmath360 .",
    "we say a cut @xmath270 is @xmath361-invariant if all edges @xmath32 in @xmath17 that cross @xmath270 are in @xmath358 or all edges @xmath32 in @xmath17 that cross @xmath270 are in @xmath359 .",
    "we say a function @xmath362 is @xmath361-invariant if @xmath363 is the same for all switching networks @xmath24 solving directed connectivity on @xmath22 and paths @xmath43 in @xmath24 from @xmath25 to @xmath26 using only the edges of @xmath17 . if @xmath10 is @xmath361-invariant , define @xmath364 to be this constant .",
    "a function @xmath362 is @xmath361-invariant if and only if @xmath365 for every @xmath270 that is not @xmath361-invariant .    for any cut @xmath270 that is not @xmath361-invariant ,",
    "we can change the value of @xmath366 without changing @xmath367 for any other cut @xmath368 . to see this , given a @xmath24 , create a new @xmath24 by creating a new @xmath25 .",
    "let @xmath47 be the old @xmath25 and for each edge @xmath32 such that @xmath32 crosses @xmath270 , create an edge with label @xmath32 between @xmath25 and @xmath47 .",
    "this is still a valid monotone switching network solving directed connectivity on @xmath22 and for all vertices @xmath167 except @xmath25 , @xmath369 .",
    "also , @xmath370 if @xmath371 and @xmath278 otherwise .",
    "thus , we can change @xmath366 without changing @xmath367 for any other @xmath368 by choosing whether to use an edge with label in @xmath358 or @xmath359 to go from @xmath25 to @xmath47 .",
    "thus , if @xmath372 , then @xmath10 can not be @xmath361-invariant .",
    "+ let @xmath43 be a path in @xmath24 from @xmath25 to @xmath26 using only the edges of @xmath17 .",
    "if @xmath270 can not be crossed by any edge in @xmath358 , then @xmath373 .",
    "again , @xmath374 , so @xmath375 , and @xmath376 . similarly , if @xmath270 can not be crossed by any edge in @xmath359 , then @xmath377 .",
    "thus , if @xmath365 for every @xmath270 that is not @xmath361-invariant , then @xmath363 is the same for all @xmath24 and all paths @xmath43 in @xmath24 from @xmath25 to @xmath26 using only the edges of @xmath17 , as needed .    for paths @xmath17 of length @xmath126 and @xmath175",
    ", we were able to choose @xmath358 and @xmath359 so that for all cuts @xmath270 , @xmath366 is the same for all @xmath24 and all paths @xmath43 in @xmath24 from @xmath25 to @xmath26 using only the edges of @xmath17 .",
    "unfortunately , for longer paths , this is no longer possible .",
    "this makes proving linear independence much harder .",
    "+ to end this section , we show that a lower size bound can be obtained from these techniques even without using linear independence .",
    "[ weaksuperpolynomial ] if when @xmath378 and @xmath17 is the path @xmath379 , we have a partition of the edges of @xmath17 into two groups @xmath358 and @xmath359 and a function @xmath380 such that @xmath380 is @xmath361-invariant , @xmath381 is nonzero , and @xmath382 for any set of vertices @xmath298 such that @xmath383 , then any monotone switching network solving directed connectivity on @xmath0 vertices has size at least @xmath384 .    without loss of generality",
    ", we may assume @xmath385 .",
    "given such a @xmath380 , note that if we add vertices to @xmath22 so that @xmath386 , we can keep the same @xmath380 ( expressed in fourier coefficients ) and it will still be @xmath361-invariant and have the same @xmath381 .",
    "let @xmath387 .",
    "+ if we have another path @xmath51 from @xmath6 to @xmath7 of length @xmath388 , by symmetry , we have a function @xmath59 and a partion @xmath389 of the edges of @xmath51 so that @xmath390 , @xmath59 is @xmath391-invariant , and @xmath392 . moreover , if @xmath17 and @xmath51 have less than @xmath393 vertices in common ( excluding @xmath6 and @xmath7 ) , then @xmath394 . if we have @xmath90 paths @xmath395 of length @xmath388 from @xmath6 to @xmath7 in @xmath4 such that any pair of them have less than @xmath393 vertices in common ( excluding @xmath6 and @xmath7 ) , then we have @xmath90 orthonormal functions @xmath396 .",
    "+ now assume @xmath24 solves directed connectivity on @xmath0 vertices , and let @xmath397 be the number of vertices in @xmath24 .",
    "we wish to bound @xmath397 from below .",
    "note that given any set of orthonormal functions @xmath398 , + @xmath399 using cauchy - schwarz ( specifically @xmath400 for any @xmath401 ) , + @xmath402 @xmath403 @xmath404 if @xmath43 is a path in @xmath24 from @xmath25 to @xmath26 using only the edges of @xmath17 , by the definition of @xmath405 , + @xmath406 also , we clearly have that @xmath407 combining [ weaksuperpolynomialeqtwo ] and [ weaksuperpolynomialeqthree ] , we get that @xmath408 @xmath409 by symmetry , [ weaksuperpolynomialeqfour ] holds for each @xmath410 . plugging [ weaksuperpolynomialeqfour ] into [ weaksuperpolynomialeq ] , @xmath411 following similar logic as in the proof of theorem [ specialbound ] ,",
    "we can easily obtain make @xmath90 at least @xmath412 , so @xmath397 is at least @xmath384 , as needed .",
    "[ weaksuperpolynomialcorollary ] if for all @xmath49 , when @xmath413 and @xmath17 is the path @xmath414 , there exists a partition of the edges of @xmath17 into two groups @xmath358 and @xmath359 and a function @xmath380 such that @xmath380 is @xmath361-invariant , @xmath381 is nonzero , and @xmath382 for any set of vertices @xmath298 such that @xmath415 , then any monotone switching network solving directed connectivity must have superpolynomial size .    applying theorem [ weaksuperpolynomial ] for a fixed @xmath49",
    "gives that any monotone switching network solving directed connectivity must have size at least @xmath416 , where @xmath417 is a constant depending on @xmath49 .",
    "thus , the size of a monotone switching network solving directed connectivity grows faster than any polynomial , as needed .    without a bound on @xmath417",
    ", we can not give an explicit lower bound on the size of a switching network solving directed connectivity , we can only say that it is superpolynomial .",
    "these bounds will be given in section [ finalsection ] .",
    "in this section , we use fourier analogues of results in sections [ specialcase ] and [ monotonecase ] to prove the following theorem :    [ keytheorem ] for all @xmath49 , if @xmath413 and @xmath17 is the path @xmath414 , there exists a partition of the edges of @xmath17 into two groups @xmath358 and @xmath359 and a function @xmath380 such that @xmath380 is @xmath361-invariant , @xmath381 is nonzero , and @xmath382 for any set of vertices @xmath298 such that @xmath415 .    by corollary [ weaksuperpolynomialcorollary ] , this is sufficient to prove a superpolynomial lower size bound on monotone switching networks solving directed connectivity .",
    "we now give an informal overview of the proof of theorem [ keytheorem ] . +   + it is instructive to first note how this function @xmath380 relates to certain - knowledge switching networks and lemma [ specialboundlemma ] .",
    "if we let @xmath418 be the set of all @xmath47 such that the union of the endpoints of @xmath101 contains at least @xmath134 vertices , then lemma [ specialboundlemma ] says that any path @xmath43 in @xmath24 from @xmath6 to @xmath7 using only the edges of @xmath17 must pass through at least one vertex @xmath419 .",
    "we can think of @xmath418 as a barrier preventing us from easily going from @xmath25 to @xmath26 .",
    "the function @xmath380 describes this barrier more precisely , as if we let @xmath420 be the set of all vertices @xmath47 such that @xmath421 and the union of the endpoints of @xmath101 contains no vertices not in @xmath17 , then @xmath43 must pass through at least one vertex @xmath422 .",
    "also , @xmath423 .",
    "+ thus , the existence of such a @xmath380 implies lemma [ specialboundlemma ] . roughly speaking",
    ", we want to show the converse , that the existence of such a barrier for certain - knowledge switching networks implies the existence of such a @xmath380 . + to show that a function @xmath362 is @xmath361-invariant , we either need to show that @xmath365 for all cuts @xmath270 that are not @xmath361-invariant , or we need to show that @xmath363 is the same for all @xmath24 and all paths @xmath43 from @xmath25 to @xmath26 .",
    "if we had an explicit formula for @xmath424 , it would be easiest to use the first approach .",
    "however , since we do not have such a general formula , we use the second approach .",
    "+ lemma [ firstanalogue ] , the fourier analogue of theorem [ simplification ] , shows that it is sufficient to consider only @xmath24 where each @xmath218 contains only knowledge sets such that all edges in the knowledge set are of the form @xmath228 .",
    "theorem [ secondanalogue ] , the fourier analogue of theorem [ reductiontosimple ] , shows that if we add the condition that @xmath425 for all directed cycles @xmath426 of @xmath24 using only the edges of @xmath17 , then it is sufficient to consider only certain - knowledge switching networks . combining these results",
    ", we have theorem [ secondanaloguecorollary ] , which says that with the added condition , we only need to consider certain - knowledge switching networks such that all knowledge sets contain only edges of the form @xmath228 .",
    "+ since there are now at most @xmath427 knowledge sets and we must have @xmath428 , as noted in lemma [ certainknowledgefourierco ] , we can arbitrarily choose the values @xmath429 for all @xmath88 except @xmath26 .",
    "lemma [ groupstog ] shows that if we can split the vertices of @xmath24 into 4 groups with a mapping @xmath430 that has ceratin properties , then using this freedom , we can create a @xmath10 that satisfies the conditions given by theorem [ secondanaloguecorollary ] and is thus @xmath361-invariant .",
    "moreover , @xmath381 is nonzero and @xmath382 for any set of vertices @xmath298 such that @xmath415 .",
    "lemma [ barrier ] shows that if we have a barrier @xmath418 similar to the one provided by lemma [ specialboundlemma ] with one additional property , then we can create a mapping @xmath430 as required by lemma [ groupstog ] .",
    "finally , lemma [ modspecialboundlemma ] modifies lemma [ specialboundlemma ] so that it provides the barrier @xmath418 with the needed additional property . putting everything together",
    ", we can create a function @xmath380 satisfying theorem [ keytheorem ] .",
    "+      in this subsection , we prove theorem [ secondanaloguecorollary ] , showing that to prove a function @xmath362 is @xmath361-invariant , it is sufficient to look at the behavior of @xmath10 on certain - knowledge switching networks @xmath24 where all knowledge sets contain only edges of the form @xmath228 .    throughout this subsection",
    ", we will always assume that we have a directed path @xmath17 in @xmath4 from @xmath6 to @xmath7 and a partition @xmath431 of the edges of @xmath17 , and we will not consider any directed paths or cycles in @xmath24 that use an edge not in @xmath17 .",
    "[ secondanaloguecorollary ] if for a function @xmath362 , for any certain - knowledge @xmath24 such that all knowledge sets contain only edges of the form @xmath228 , @xmath363 is the same for all paths @xmath43 in @xmath24 from @xmath25 to @xmath26 and @xmath432 for all directed cycles @xmath426 in @xmath24 , then @xmath10 is @xmath361-invariant .",
    "we begin with the following analogue of theorem [ simplification ] :    [ firstanalogue ] if for a function @xmath362 , for all @xmath24 such that each @xmath218 contains only knowledge sets such that each edge in the knowledge set is of the form @xmath228 , @xmath363 is the same for all paths @xmath43 in @xmath24 from @xmath25 to @xmath26 , then @xmath10 is @xmath361-invariant .",
    "assume @xmath10 is not @xmath361-invariant .",
    "then there is a cut @xmath270 such that @xmath270 is not @xmath361-invariant and @xmath372 .",
    "+ let @xmath433 be the vertices in @xmath270 and let @xmath434 be the vertices in @xmath273 .",
    "let @xmath435 .",
    "for each possible state of knowledge @xmath193 that contains only knowledge sets such that each edge in the knowledge set is of the form @xmath228 , create a vertex @xmath167 with state of knowledge @xmath436 .",
    "add all labeled edges allowed by property @xmath126 of proposition [ monotonedef ] .",
    "+ let @xmath47 be the vertex with state of knowledge @xmath437 . let @xmath111 be the vertex with state of knowledge @xmath438 .",
    "+ now note that @xmath439 , @xmath440 and if @xmath441 , then @xmath442 .",
    "we can easily find a path @xmath43 in @xmath24 from @xmath25 to @xmath26 using only edges in @xmath17 that has an edge @xmath252 from @xmath47 to @xmath111 .",
    "we can choose whether @xmath252 has a label in @xmath358 or @xmath359 , and this will change the value of @xmath363 .",
    "this completes the proof .",
    "we now give the following analogue of theorem [ reductiontosimple ] :    [ secondanalogue ] if for a function @xmath362 , for any certain - knowledge @xmath24 , @xmath363 is the same for all paths @xmath43 from @xmath25 to @xmath26 and @xmath432 for all directed cycles @xmath426 in @xmath24 , then @xmath10 is @xmath361-invariant .",
    "[ andstoors ] if @xmath443 where @xmath444 , then + @xmath445 where @xmath446 ranges over all of the possible subsets of @xmath447 .",
    "@xmath448 if @xmath449 for every @xmath18 and @xmath318 otherwise . +   + if @xmath450 for some @xmath18 , then we can add or remove @xmath18 from @xmath446 without affecting @xmath451 .",
    "but then the sum on the right is automatically @xmath318 .",
    "+ if @xmath449 for all @xmath18 , then unless @xmath446 is empty , @xmath452 . from this",
    ", it is easy to see that the right hand side is @xmath126 , as needed .",
    "this completes the proof .",
    "[ justworks ] @xmath453 , where both @xmath454 and @xmath455 are unions of subsets of @xmath456 or unions of subsets of @xmath457 and the moves are as described in theorem [ reductiontosimple ] .",
    "we give each move a direction by requiring that @xmath454 is either the union of an odd number of @xmath260 or the union of an even number of @xmath257 and @xmath455 is either the union of an even number of @xmath260 or the union of an odd number of @xmath257 .",
    "recall that the moves in theorem [ reductiontosimple ] are as follows : if we are at a vertex @xmath47 with a subset of the @xmath456 and we want to move to the vertex @xmath111 , do the following : +   + if every @xmath260 we have is the representative of a cycle , then travel to @xmath111 and replace each @xmath260 with the corresponding @xmath257 . if not , then do the following : + 1 . for each @xmath260 we have that is the representative of a cycle ,",
    "replace it by the corresponding @xmath257 .",
    "take the earliest @xmath260 that is not the representative of a cylce .",
    "take the @xmath257 that the arrow going from this @xmath260 is pointing to . remove this @xmath257 if it is in our set and add it if it is not .",
    "+ 3 . for each @xmath257",
    "we have , replace it by the corresponding @xmath260 .",
    "+   + note that every move either changes where we are or changes the number of knowledge sets by 1 .",
    "thus , if we look at the pairs of @xmath90 that are connected by a move , then one of them will be in @xmath454 and the other will be in @xmath455 .",
    "thus , we can give each move a direction as described .",
    "also , note that for each possible @xmath454 , there is exactly one move from it and for each possible @xmath455 , there is exactly one possible move to it .",
    "thus , each possible @xmath454 or @xmath455 is counted exactly once .",
    "the result now follows immediately from proposition [ andstoors ] .",
    "now for each vertex @xmath47 in @xmath43 not equal to @xmath25 or @xmath26 , for each possible nonempty subset of the @xmath456 , create a vertex .",
    "this corresponds to being at @xmath47 and having that subset .",
    "create a vertex @xmath230 corresponding to being at @xmath25 and having @xmath458 and create one vertex @xmath231 corresponding to being at @xmath26 and having @xmath459 . for each move , create an edge between the corresponding vertices .",
    "call the resulting graph @xmath460 .",
    "+ after we are done , every vertex excluding @xmath230 and @xmath231 has degree @xmath126 .",
    "thus , this graph consists of a path between @xmath230 and @xmath231 and cycles .",
    "note that for each move , we are starting at one vertex in @xmath43 and attempting to move to an adjacent vertex in @xmath43 .",
    "thus , we can give each move a direction according to lemma [ justworks ] .",
    "for a given vertex @xmath47 in @xmath43 not equal to @xmath25 or @xmath26 and subset of the knowledge sets in @xmath218 , one move from it attempts to go to the next vertex in @xmath43 and the other move attempts to go to the previous vertex in @xmath43 .",
    "thus , after we make the edges directed , each vertex in @xmath460 except @xmath230 and @xmath231 has indegree @xmath65 and outdegree @xmath65 .",
    "@xmath460 consists of a directed path @xmath461 from @xmath230 to @xmath231 and directed cycles .",
    "given an edge @xmath252 in @xmath24 and a direction for this edge , define @xmath462 to be @xmath463 , where @xmath464 is the vertex in @xmath24 that @xmath252 goes to and @xmath465 is the vertex in @xmath24 that @xmath252 comes from .",
    "[ secondanaloguekeycorollary ] for any edge @xmath252 in @xmath43 , + @xmath466 , where @xmath467 is the set of all edges in @xmath460 that correspond to @xmath252 .",
    "this follows immediately from lemma [ justworks ] and the definition of @xmath460 .",
    "[ secondanaloguekeycorollarytwo ] @xmath468    this follows immediately from corollary [ secondanaloguekeycorollary ] and the definitions .",
    "theorem [ secondanalogue ] follows directly from corollary [ secondanaloguekeycorollarytwo ] , and this completes the proof .    to prove theorem [ secondanaloguecorollary ] , first use lemma [ firstanalogue ] and then use the exact same argument as in theorem [ secondanalogue ] .",
    "since we now start with a @xmath24 such that all edges in the knowledge sets have the form @xmath228 , when we create @xmath460 , all of the knowledge sets in @xmath460 will only contain paths of the form @xmath228 , and this completes the proof .",
    "[ pathandloop ] = 2.0 in      in this subsection , we complete the proof of theorem [ keytheorem ] by constructing a function @xmath56 with the given properties . +   + looking at certain - knowledge @xmath24 where each knowledge set only has paths of the form @xmath228 , there are only @xmath469 possible knowledge sets : @xmath119 and anything of the form @xmath470 for some set of vertices @xmath298 .",
    "denote each such @xmath90 by @xmath471 .    for all subsets @xmath472 of @xmath22",
    "not containing @xmath6 or @xmath7 , @xmath473 and if @xmath474 , then @xmath475 .",
    "[ certainknowledgefourierco ] for any set of values @xmath476 , there is a function @xmath362 such that for all subsets @xmath298 of @xmath22 not containing @xmath6 or @xmath7 , @xmath477 .",
    "furthermore , if there is a @xmath49 such that if @xmath415 , then @xmath478 , then writing @xmath479 , if @xmath480 then @xmath481 = 0 .    to see the first part of the lemma , pick an ordering of the @xmath298 such that no @xmath298 is a subset of an earlier @xmath298 . now pick each @xmath482 in that order .",
    "since if @xmath474 , then @xmath475 and @xmath473 , this means that when we pick each @xmath482 , we can change the value of @xmath483 without affecting any earlier @xmath483 .",
    "thus , we can freely choose each @xmath483 .",
    "+ to see the second part of the lemma , let @xmath298 be a set such that @xmath484 and for all proper subsets @xmath485 of @xmath298 , @xmath486 . then by the above proposition , @xmath487 , as needed .",
    "this completes the proof .",
    "[ groupstog ] if we have a directed path @xmath17 in @xmath4 , a partition of the edges of @xmath17 into two sets @xmath358 and @xmath359 , and a mapping @xmath430 such that if we write @xmath488 , then : + 1 .",
    "+ 3 . if @xmath491 , @xmath492 , then there is no edge with label in @xmath493 between @xmath178 and @xmath179 .",
    "+ then if we also have a @xmath362 such that @xmath494 for all @xmath164 , then for any directed cycle @xmath426 in @xmath24 using only the edges of @xmath17 , @xmath432 and for any path @xmath43 in @xmath24 from @xmath25 to @xmath26 using only the edges of @xmath17 , @xmath495 .",
    "this follows immediately from the following proposition :    [ groupstogproposition ] with the above conditions , if @xmath496 is a path in @xmath24 from @xmath25 to @xmath47 , then + @xmath497    we prove this by induction .",
    "it is clearly true for paths of length @xmath318 .",
    "assume we have a path @xmath496 from @xmath25 to some vertex @xmath498 for which the proposition is true and an additional edge @xmath252 from @xmath178 to some vertex @xmath499 .",
    "let @xmath500 be @xmath496 with the edge @xmath252 added .",
    "+ if @xmath252 has a label in @xmath358 , then @xmath501 , so + @xmath502 , as needed . + similarly , if @xmath252 has a label in @xmath359 , then @xmath503 , so + @xmath504 , as needed .",
    "+   + this completes the proof .",
    "[ barrierpicture ] = 4.0 in    [ barrier ] if there is a set of vertices @xmath418 in @xmath24 such that any path @xmath43 from @xmath25 to @xmath26 using only edges with labels in @xmath17 contains a vertex @xmath419 incident with both an edge in @xmath43 with label in @xmath358 and an edge in @xmath43 with label in @xmath359 , then it is possible to find a mapping @xmath430 as described in lemma [ groupstog ] so that all vertices @xmath167 such that @xmath505 are in @xmath418 .",
    "delete all edges in @xmath24 whose labels are not in @xmath17 .",
    "treat all edges in @xmath358 as equivalent and treat all edges in @xmath359 as equivalent .",
    "+ let @xmath420 be a subset of @xmath418 for which the same condition holds and if we remove any vertex from @xmath420 , this condition no longer holds .",
    "+ if for some @xmath47 , @xmath111 , @xmath506 , and @xmath492 there is an edge between vertex @xmath47 and @xmath111 with label in @xmath493 and an edge between vertex @xmath111 and @xmath506 with label in @xmath493 , then add an edge with label in @xmath493 between @xmath47 and @xmath506 . keep on doing this until doing so does not add any new edges .    such a step can not affect the given condition . to see this ,",
    "assume this creates a new path @xmath43 violating the condition .",
    "@xmath43 must contain this new edge .",
    "but then we can replace this new edge by the two old edges to obtain a path we already had that still violates the condition    if @xmath47 and @xmath111 are two adjacent vertices in @xmath507 that are not in @xmath420 , then we require that @xmath508 .",
    "this partitions the vertices of @xmath24 that are not in @xmath420 into connected components . since any path from @xmath25 to @xmath26 contains a vertex in @xmath420 , @xmath25 and @xmath26 are in different componenets . set @xmath509 and @xmath510 .",
    "call the component with @xmath25 the starting component and call the component with @xmath26 the ending component . for all vertices @xmath167 in the starting component , @xmath511 . for all vertices @xmath167 in the ending component , @xmath512 .",
    "+   + for each vertex @xmath422 , there is a path @xmath513 in @xmath24 from @xmath25 to @xmath26 containing @xmath514 where @xmath514 is incident with both an edge in @xmath515 with label in @xmath358 and an edge in @xmath515 with label in @xmath359 and this is true for no other vertex in @xmath420 .",
    "otherwise , we could have removed @xmath514 from @xmath420 and the condition would still hold . now note that if @xmath515 contains any other vertices in @xmath420 , they can be bypassed using the added edges .",
    "thus , we can obtain a @xmath515 containing @xmath514 and no other vertices in @xmath420 .",
    "thus , each @xmath422 is adjacent to at least one vertex in the starting component and one vertex in the ending component .",
    "+   + given a vertex @xmath178 in the starting component that is adjacent to @xmath514 and a vertex @xmath179 in the ending component that is adjacent to @xmath514 , we can create a path @xmath515 by taking the path from @xmath25 to @xmath178 , taking the edge @xmath516 from @xmath178 to @xmath514 , taking the edge @xmath517 from @xmath514 to @xmath179 , and taking the path from @xmath179 to @xmath26 .",
    "@xmath516 and @xmath517 must have different labels , or else we could bypass @xmath514 entirely . +   + note that the label of @xmath516 can not depend on the choice of @xmath178 , or else we could choose it to have the same label as @xmath517 .",
    "similarly , the label of @xmath517 can not depend on the choice of @xmath179 . if @xmath516 has label in @xmath358 and @xmath517 has label in @xmath359 , then set @xmath518 . if @xmath516 has label in @xmath359 and @xmath517 has label in @xmath358 , then set @xmath519 .",
    "we have now chosen @xmath520 for all @xmath422 .",
    "+   + if two vertices @xmath521 and @xmath522 in @xmath420 are adjacent , then with the added edges , there must be a vertex @xmath167 of @xmath24 that is in the starting or ending component and is adjacent to both @xmath521 and @xmath522 . from the above",
    ", we must have that @xmath523 .",
    "+   + it is now easy to verify that at this point , all conditions of lemma [ groupstog ] are satisfied : + 1 .",
    "if @xmath167 and @xmath514 are adjacent , @xmath511 , and @xmath518 , then because of the way @xmath520 was chosen , the edge between them must have label in @xmath358 .",
    "if @xmath167 and @xmath514 are adjacent , @xmath511 , and @xmath519 , then because of the way @xmath520 was chosen , the edge between them must have label in @xmath359 .",
    "if @xmath167 and @xmath514 are adjacent , @xmath512 , and @xmath518 , then because of the way @xmath520 was chosen , the edge between them must have label in @xmath359 .",
    "if @xmath167 and @xmath514 are adjacent , @xmath512 , and @xmath519 , then because of the way @xmath520 was chosen , the edge between them must have label in @xmath358 .",
    "no vertex in the starting component is adjacent to a vertex in the ending component .",
    "if @xmath524 are adjacent , then @xmath523 .",
    "+   + if there is a vertex @xmath167 such that @xmath525 has not yet been determined , then @xmath167 can not be adjacent to any vertices in the starting component or the ending component .",
    "also , @xmath167 can not be adjacent to any vertices in @xmath420 , as otherwise with the added edges @xmath167 would be adjacent to a vertex in the starting component or a vertex in the ending component .",
    "we can set @xmath511 for all such @xmath167 , and all of the conditions of lemma [ groupstog ] will still be satisifed .",
    "this completes the proof .",
    "the final lemma we need is a slight modification of lemma [ specialboundlemma ] :    [ modspecialboundlemma ] if @xmath17 is the path @xmath131 , then setting @xmath526 , @xmath527 , taking @xmath358 to be all edges of the form @xmath528 where @xmath18 is even and taking @xmath359 to be the remaining edges , then if @xmath24 is a certain - knowledge switching network , any path @xmath43 in @xmath24 from @xmath25 to @xmath26 using only the edges in @xmath17 must pass through at least one vertex @xmath47 such that @xmath132 and the union of the endpoints of the edges in @xmath101 contains at least @xmath134 of @xmath135 and contains no other vertices except @xmath6 and @xmath7 .",
    "furthermore , @xmath47 is incident with both an edge in @xmath43 with label in @xmath358 and an edge in @xmath43 with label in @xmath359 .",
    "the proof is identical to the proof of lemma [ specialboundlemma ] , except that in the inductive hypothesis we also require that @xmath47 is incident with both an edge in @xmath43 with label in @xmath358 and an edge in @xmath43 with label in @xmath359 .",
    "we put everything together as follows .",
    "let @xmath413 and let @xmath17 be the path @xmath131 . using lemma [ modspecialboundlemma ] , we obtain a @xmath418 which we can use in lemma [ barrier ] .",
    "this gives us a mapping @xmath430 which we can use in lemma [ groupstog ] . by lemma [ certainknowledgefourierco ]",
    ", we can obtain a function @xmath56 that satisfies all of the conditions of lemma [ groupstog ] , so for any directed cycle @xmath426 in @xmath24 using only the edges of @xmath17 , @xmath425 and for any path @xmath43 in @xmath24 from @xmath25 to @xmath26 using only the edges of @xmath17 , @xmath529 .",
    "also , by lemma [ certainknowledgefourierco ] , if @xmath415 , @xmath382 . using theorem [ secondanaloguecorollary ] , @xmath380 is @xmath361-invariant and @xmath530 , as needed .",
    "we will now modify the above ideas slightly to prove theorem [ bigresult ] .",
    "+   + throughout this section , we will take partitions @xmath531 of the vertices of @xmath4 , where @xmath532 and @xmath533 .",
    "also , in this section , unless we state that @xmath24 solves directed connectivity on @xmath22 , we do not require that there is a path from @xmath25 to @xmath26 in @xmath24 if and only if there is a path from @xmath6 to @xmath7 in @xmath4 .",
    "instead , we only require that if there is a path from @xmath25 to @xmath26 in @xmath24 , then there must be a path from @xmath6 to @xmath7 in @xmath4 .",
    "it is easily verified that this is true if and only if we can assign states of knowledge to the vertices of @xmath24 so that @xmath24 satisfies the properties of proposition [ monotonedef ] +   +    given a switching network @xmath24 solving directed connectivity on @xmath22 , we can create a switching network @xmath226 such that : + 1 . @xmath224 .",
    "all of the edges except @xmath119 in the knowledge sets of @xmath226 have the form @xmath228 for some @xmath534 or @xmath535 for some @xmath536 .",
    "if @xmath17 is a path in @xmath4 from @xmath6 to @xmath7 that does not have any edges of the form @xmath335 where @xmath537 and @xmath538 , then there is a path from @xmath230 to @xmath231 in @xmath226 using only the edges of @xmath17 .",
    "the proof is similar to the proof of theorem [ simplification ] .",
    "first , for each edge @xmath252 with label of the form @xmath335 where @xmath537 and @xmath538 in @xmath24 , replace it with two edges , one with label @xmath539 and the other with label @xmath315 .",
    "after these replacements , we still have that if there is a path from @xmath25 to @xmath26 in @xmath24 , then there must be a path from @xmath6 to @xmath7 in @xmath4 .",
    "+   + again , construct @xmath226 by taking @xmath0 copies of @xmath24 and making the @xmath25 for each copy equal to the @xmath26 of the previous copy .",
    "take @xmath230 to be the @xmath25 of the first copy and take @xmath26 to be the @xmath26 of the last copy .",
    "now for each path in @xmath226 , we keep track of a state of knowledge @xmath193 as follows : +   + 1 .",
    "if we use an edge of the form @xmath335 where @xmath540 , then for each knowledge set @xmath90 in @xmath193 that includes the edge @xmath314 , add the edge @xmath539 .",
    "if we use an edge of the form @xmath335 where @xmath541 and @xmath542 , then for each knowledge set @xmath90 in @xmath193 that includes the edges @xmath314 and @xmath336 , add the edge @xmath119 .",
    "if we use an edge of the form @xmath335 where @xmath543 , then for each knowledge set @xmath90 in @xmath193 that includes the edge @xmath336 , add the edge @xmath315 . + take the @xmath193 for each vertex to be the union of all @xmath193 that could be obtained in this way .",
    "it is easily verified that property @xmath126 of proposition [ monotonedef ] is satisfied .",
    "+   + for each time a path goes through a copy of @xmath24 , each @xmath90 in @xmath193 must obtain the edge @xmath119 or at least one new edge of the form @xmath228 for some @xmath534 or @xmath535 for some @xmath536 .",
    "thus , @xmath242 , as needed .",
    "this completes the proof .",
    "[ modifiedfirstanalogue ] if for a function @xmath362 , a directed path @xmath17 in @xmath4 from @xmath6 to @xmath7 that does not use any edges of the form @xmath544 where @xmath536 and @xmath545 , and a partition @xmath431 of the edges of @xmath17 , @xmath363 is the same for all @xmath24 such that for all of its states of knowledge , each of the knowledge sets contains only edges of the form @xmath228 for some @xmath534 or @xmath535 for some @xmath536 and all paths @xmath43 from @xmath25 to @xmath26 in @xmath24 , then @xmath10 is @xmath361-invariant .",
    "if for a function @xmath362 , a directed path @xmath17 in @xmath4 that does not use any edges of the form @xmath544 where @xmath536 and @xmath545 , and a partition @xmath431 of the edges of @xmath17 , for any certain - knowledge @xmath24 such that all of the edges in the knowledge sets have the form @xmath228 for some @xmath534 or @xmath546 for some @xmath536 , @xmath363 is the same for all @xmath43 and @xmath432for all directed cycles @xmath426 in @xmath24 using only the edges of @xmath17 , then for any @xmath24 , @xmath547 is the same for all @xmath43 .      for a set of vertices @xmath446",
    "that does not contain @xmath6 or @xmath7 , define @xmath548 to be the knowledge set @xmath549 , where @xmath550 are the vertices in @xmath551 and @xmath552 are the vertices in @xmath553 .",
    "if @xmath446 is nonempty , define @xmath554 to be : + @xmath318 if there exists a vertex @xmath234 such that @xmath555 and @xmath556 or @xmath557 + @xmath558 otherwise + define @xmath559 to be : + @xmath560 if @xmath270 is @xmath561 or @xmath562 + @xmath318 otherwise      if @xmath446 is nonempty , + @xmath566 , where @xmath567 is the set of all cuts @xmath270 such that @xmath568 .",
    "@xmath569 , so + @xmath570 .",
    "+   + @xmath568 if and only if for all vertices @xmath571 , @xmath556 or @xmath557 .",
    "thus , @xmath567 is the set of all cuts such that for all vertices @xmath571 , @xmath556 or @xmath557 .",
    "+   + let @xmath572 be the set of all cuts such that there no vertex @xmath234 such that @xmath555 and @xmath556 or @xmath557 .",
    "if @xmath573 , then @xmath574 .",
    "+   + @xmath575 .",
    "if @xmath576 contains a vertex not in @xmath446 , then @xmath577 is empty .",
    "if @xmath576 is a subset of @xmath446 and @xmath446 contains a vertex @xmath234 not in @xmath576 , then @xmath234 can either be in @xmath270 or @xmath273 , and these cuts cancel out , so @xmath578 . finally , if @xmath565 , then @xmath564 , as needed .",
    "+   + for any nonempty @xmath576 , @xmath568 if @xmath579 and @xmath568 if @xmath580 .",
    "thus , we clearly have that @xmath581 , and it is easily checked that @xmath582 .",
    "+   + assume these functions are not unique .",
    "then there is a @xmath10 such that @xmath583 and @xmath584 for all @xmath446 .",
    "but the given @xmath563 must be linearly independent , so they form a basis for @xmath294 , so if @xmath584 for all @xmath446 , then @xmath585 . contradiction .",
    "this completes the proof .",
    "take @xmath586 .",
    "let @xmath587 .",
    "regardless of what @xmath561 and @xmath562 are , we can find a path @xmath17 in @xmath4 from @xmath6 to @xmath7 of length @xmath588 that does not have any edge of the form @xmath335 where @xmath537 and @xmath538 . by lemma [ modspecialboundlemma ] , taking the usual @xmath358 and @xmath359 , if @xmath418 is the set all @xmath548 such that @xmath589 , then any path @xmath43 from @xmath25 to @xmath26 in @xmath24 must go through a vertex in @xmath418 incident with both an edge with label in @xmath358 and an edge with label in @xmath359 .",
    "+   + now note that we can remove all @xmath548 such that @xmath590 from @xmath418 and it will still be valid . to see this , note that it is impossible to go from a @xmath548 where @xmath591 to a @xmath548 with @xmath592 without either going through @xmath26 or using an edge from both @xmath358 and @xmath359 .",
    "+   + combining lemma [ barrier ] and lemma [ groupstog ] , using lemma [ explicitg ] to find the corresponding @xmath10 , we have that @xmath593 for large enough @xmath120 . if @xmath270 differs by more than @xmath594 from the @xmath270 where @xmath580 , then @xmath365 .",
    "also , @xmath595 .",
    "+   + let @xmath596 , and let @xmath597 .",
    "now @xmath598 .",
    "+   + since we can freely choose @xmath561 and @xmath562 , from basic coding theory , we can create at least @xmath599 mutually orthonormal @xmath600 , where each @xmath601 .",
    "+   + now if we add more vertices to @xmath4 , we can still use these same paths using these @xmath120 vertices and the corresponding @xmath600 .",
    "if @xmath602 , then we can pick at least @xmath603 distinct subsets of size @xmath120 of @xmath604 such that any two subsets have at most @xmath49 vertices in common .",
    "+   + thus , in total , we have @xmath605 orthonormal @xmath600 . if @xmath24 solves directed connectivity on @xmath0 vertices , following the same reasoning as in the proof of theorem [ weaksuperpolynomial ] , @xmath606 . +   + taking @xmath120 to be about @xmath607 , we have that + @xmath608 for large enough @xmath0 .",
    "this completes the proof .",
    "r. aleliunas , r. m. karp , r. j.lipton , l. @xmath13 , and c. rackoff .",
    "random walks , universal traversal sequences , and the complexity of maze problems .",
    "proceedings of the 20th annual symposium on foundations of computer science , p.218 - 223 , 1979          w. masek . a fast algorithm for the string editing problem and decision graph complexity .",
    "master s thesis , department of electrical engineering and computer science , massachusetts institute of technology , 1976 ."
  ],
  "abstract_text": [
    "<S> we prove that any monotone switching network solving directed connectivity on @xmath0 vertices must have size @xmath1 </S>"
  ]
}