{
  "article_text": [
    "in many application areas it is of practical interest to be able to simulate the possible continuation of a given time series .",
    "for example in finance the simulation of future stock prices is a well - known standard method used for risk assessment and for option pricing . in inventory management the simulation of future demands",
    "could be used to compare the performance of different inventory policies .",
    "clearly many other examples of applications in different areas are possible . when we wanted to quantify the risk of a company due to the uncertainty of the demand in the next months we tried to find code that simulates random future observations of the demand subject to the sarima ( seasonal autoregressive integrated moving average ) model we had fitted to the data .",
    "we were astonished when we realized that we were not able to find a single paper in the literature that tackles this problem .",
    "it is clear that such a simulation conditional on given data requires a modeling and a parameter estimation step .",
    "these two steps are also required for forecasting .",
    "seasonal ( and non - seasonal ) arima models have been considered as standard procedures for many years ( @xcite ) and are described in many text books ( see eg .",
    "@xcite ) . after selecting an arima model and the estimation of its parameters only the conditional simulation of future realizations given the observations is required . many software packages ( including r ( @xcite ) ) contain functions to simulate realizations of arima processes .",
    "but we were not able to find any description or implementation of a  simulation conditional on the observed values \" for arima models in the literature .",
    "we therefore present our simple idea of conditional simulating an sarima process in section  [ sec : idea ] .",
    "section  [ sec : implementation ] contains our r - implementation whereas section  [ sec : numtest ] demonstrates the application of our code for a practical example .",
    "in r , the notation used for arma(@xmath0 ) processes is @xmath1 where @xmath2 denotes the parameters of the autoregressive process , @xmath3 the parameters of the moving average process and @xmath4 the white noise error terms with standard deviation @xmath5 following the normal distribution . using the well known backshift operator notation we can rewrite the above definition by @xmath6 where @xmath7 denotes a backshift polynomial of order @xmath8 and",
    "@xmath9 a backshift polynomial of order @xmath10 .",
    "an arima(@xmath11 ) process @xmath12 is a process whose @xmath13-th difference @xmath14 is an arma(@xmath0 ) process .",
    "an arima(@xmath11 ) process is thus defined by the equation : @xmath15 for seasonal arima ( sarima ) processes with period @xmath16 , a seasonal ar polynomial @xmath17 of order @xmath18 , a seasonal ma polynomial @xmath19 of order @xmath20 and the seasonal difference operator of order @xmath21 @xmath22 are required .",
    "the sarima(@xmath11)(@xmath23 is then defined by the equation :    @xmath24    for given observations the selection of the model orders @xmath25 for a sarima model is the topic of many books on time series analysis and without the scope of this note .",
    "the estimation of the parameters is easy using the arima ( ) function of the r - base stats package .",
    "we now assume that the observed time series @xmath26 is a realization of the stochastic process defined by all model assumptions of the sarima model and its estimated parameters .",
    "we now consider the next @xmath27 observations of the time series @xmath28 that are not known yet .",
    "the distribution of that random vector conditional on the observed values @xmath26 is multi - normal and can be called conditional distribution of the future observation .",
    "the forecasts of the sarima model for the given time series are the expectations of the one- dimensional marginals of that conditional distribution and we write for example @xmath29 the conditional standard deviations of the one - dimensional marginals are used to calculate the prediction error .",
    "exactly these conditional expectations and variances are calculated by the predict ( ) function .",
    "the new idea of this note is now the suggestion to provide code that generates random realizations of the future observation vector conditional on the observed observations .",
    "we can write @xmath30 for that future observation vector and we hope that the presentation above made clear , why we can call a realization of that random vector a random continuation of the time series data we have observed . as the distribution of the vector is multi - normal it would be possible to generate from that distribution calculating its mean vector and variance - covariance matrix .",
    "but it is much easier to use directly the recursion of the model equation of the arma model : to generate a random realization of @xmath31 conditional on the past we need the past observations , the estimated parameters and the residuals ( ie .",
    "the estimates of the random shocks @xmath32 ) .",
    "it is then no problem to simulate @xmath31 using the recursion given in formula ( [ model ] ) .",
    "the new random shock @xmath33 is generated as a normal random variate with mean zero and standard deviation @xmath5 .",
    "the simulation of @xmath34 is done conditional on the past observations and on the generated values @xmath33 and @xmath31 .",
    "for the case of sarima processes the model equation is again a linear combination of past observations and past random shocks together with the new random shock @xmath35 . due to the seasonal model",
    "some of the ar - parameters ( @xmath36 ) and ma - parameters ( @xmath37 ) are equal to zero .",
    "so again we can use the recursive approach explained above .    in this code snippet",
    "we present the r routine we coded according to the above explanations .",
    "it generates future observations from seasonal and non - seasonal arima processes conditional on an observed time series .",
    "algorithm  [ alg : sim ] summarizes how @xmath27 future values are simulated from seasonal and non - seasonal arima process .",
    "when we fit the arima model using the arima ( ) function of the r - base stats package , all the model parameters including the estimated variance of error terms ( @xmath38 are returned as demonstrated in section  [ sec : numtest ] .",
    "r codes for algorithm  [ alg : sim ] are given in section  [ secsourcecode ] .",
    "if necessary do the differencing ( seasonal and/or non - seasonal ) of the data given in the fitted model ( otherwise @xmath39 simply refers to the original series ) compute intercept @xmath40 where @xmath41 denotes for the average of @xmath39 construct a vector @xmath42 of size @xmath43 construct a vector @xmath4 of size @xmath44 equate first @xmath8 terms of @xmath42 to @xmath39 at newest @xmath8 time steps equate ( @xmath45}, ... ,\\varepsilon_{[q]}$ ] ) to the residuals of data at newest @xmath10 time steps generate @xmath46}$ ] from @xmath47 apply moving average and auto - regressive filtering on @xmath48}$ ] as in ( equation  [ model ] ) remove first @xmath8 elements of @xmath42 to get only differences of future time steps undifference x return x",
    "in this section we first fit a seasonal model to monthly totals of international airline passengers between @xmath49 and @xmath50 using the arima ( ) .",
    "( the data are available in the r package fma @xcite . )    .... r > library(\"fma \" ) r > set.seed(4321 ) r > data < - airpass r > par < - c(1 , 1 , 1 , 0 , 1 , 0 ) r > fit < - arima(data , order = c(par[1 ] , par[2 ] , par[3 ] ) , +            seasonal = list(order = c(par[4 ] , par[5 ] , par[6 ] ) ) ) r > fit series : data   arima(1 , 1 , 1)(0 , 1 , 0)[12 ]                      coefficients :            ar1       ma1        -0.3009   -0.0073 s.e .",
    "0.3835    0.4133 sigma^2 estimated as 137 :   log likelihood = -508.2 aic = 1022.39    aicc = 1022.58    bic = 1031.02 ....    for demonstration purposes we generate five different independent continuations of the time series and show them , their average and the forecasted values in figure  [ fivesims ] .    ....",
    "r > sims < - arima.condsim(fit , data , n.ahead = 12 , n = 5 ) r > ts1 < - ts(sims [ , 1 ] , f = frequency(data ) , s = tsp(data)[2 ] +   +          1/tsp(data)[3 ] ) r > ts2 < - ts(sims [ , 2 ] , f = frequency(data ) , s = tsp(data)[2 ] +   +          1/tsp(data)[3 ] ) r > ts3 < - ts(sims [ , 3 ] , f = frequency(data ) , s = tsp(data)[2 ] +   +          1/tsp(data)[3 ] ) r > ts4 < - ts(sims [ , 4 ] , f = frequency(data ) , s = tsp(data)[2 ] +   +          1/tsp(data)[3 ] ) r > ts5 < - ts(sims [ , 5 ] , f = frequency(data ) , s = tsp(data)[2 ] +   +          1/tsp(data)[3 ] ) r >",
    "tsa < - ts(sapply(seq_len(12 ) , function(i ) mean(sims[i , ] ) ) ,   +          f = frequency(data ) , s = tsp(data)[2]+1/tsp(data)[3 ] ) r > ts.plot(ts1 , ts2 , ts3 ,",
    "ts4 , ts5 , gpars = list(xlab = \" 1961 \" ,   +           ylab = \" monthly international airline passengers \" , xaxt = \" n \" ) ) r > lines(tsa , col=\"blue \" ) r > lines(predict(fit , n.ahead=12)$pred , col=\"red \" ) r > axis(1 , time(ts1 ) , rep(substr(month.abb , 1 , 1 ) , length = length(ts1 ) ) ) ....    in the following experiment we simulate @xmath51 independent continuations and show that , as expected , the mean of the simulated values is very close to the forecasted values .",
    "it is also possible to use innovations equal to zero in our function arima.condsim ( ) to produce the exact forecasts .    ....",
    "r > sims < - arima.condsim(fit , data , n.ahead = 12 , n = 10000 ) r > sims_mean < - sapply(seq_len(12 ) , function(i ) mean(sims[i , ] ) ) r > ts < - ts(sims_mean , f = frequency(data ) , s = tsp(data)[2 ] +   +          1/tsp(data)[3 ] ) r > ts           jan       feb       mar        apr        may     jun      1961 444.2828 418.1049 446.0237 487.9601",
    "498.8899 562.0800           jul       aug       sep        oct        nov     dec 1961 648.9706 633.0297 535.0563 487.9923",
    "417.1746 459.2555 r > predict(fit , n.ahead = 12 )    $ pred         jan     feb       mar        apr        may      jun      1961 444.3670 418.2566 446.2898 488.2798",
    "499.2828 562.2819         jul     aug       sep        oct        nov      dec 1961 649.2822 633.2821 535.2821 488.2821 417.2821 459.2821 ....    finally , we fit a non - seasonal model to the same data to show that our function works both for seasonal and non - seasonal models .    ....",
    "r > par < - c(1 , 0 , 1 , 0 , 0 , 0 ) r > fit < - arima(data , order = c(par[1 ] , par[2 ] , par[3 ] ) , +            seasonal = list(order = c(par[4 ] , par[5 ] , par[6 ] ) ) ) r > fit series : data   arima(1 , 0 , 1 ) with non - zero mean coefficients :            ar1      ma1      intercept          0.9373   0.4264     281.5426 s.e .",
    "0.0302   0.0911      53.6135 sigma^2 estimated as 968.5 :   log likelihood = -700.87 aic = 1409.75    aicc = 1410.04    bic = 1421.63 r > sims < - arima.condsim(fit , data , n.ahead = 12 , n = 10000 ) r > sims_mean",
    "< - sapply(seq_len(12 ) , function(i ) mean(sims[i , ] ) ) r > ts < - ts(sims_mean , f = frequency(data ) , s = tsp(data)[2 ] +   +          1/tsp(data)[3 ] ) r > ts           jan       feb       mar        apr        may     jun      1961 453.9091 443.5161 432.8683 422.7560",
    "414.1958 406.3113           jul       aug       sep        oct        nov     dec 1961 398.7037 391.8506 384.9362 378.4532 372.7470 367.1855 r >",
    "predict(fit , n.ahead = 12 )    $ pred         jan     feb       mar        apr        may      jun      1961 453.9038 443.0989 432.9713 423.4785 414.5809",
    "406.2410         jul     aug       sep        oct        nov      dec 1961 398.4239 391.0969 384.2292 377.7920 371.7583 366.1029 ....",
    "arima.condsim < - function(object , x , n.ahead = 1 , n = 1 ) {      l < - length(x ) ; coef < - object$coef ;       arma < - object$arma ; model < - object$model ;       p < - length(model$phi ) ; q < - length(model$theta )          d < - arma[6 ] ; s.period < - arma[5 ] ;       s.diff < - arma[7 ]               if(s.diff > 0 & & d > 0 ) {          diff.xi < - 0 ;           dx < - diff(data , lag = s.period , differences = s.diff )          diff.xi[1 ] < - dx[length(dx ) - d + 1 ] ;           dx < - diff(dx , differences = d )          diff.xi < - c(diff.xi[1 ] , data[(l - s.diff * s.period + 1):l ] )      } else if(s.diff > 0 ) {          dx < - diff(data , lag = s.period , differences = s.diff )            diff.xi < - data[(l - s.diff * s.period + 1):l ]        } else if(d > 0 ) {          dx < - diff(data , differences = d ) ;           diff.xi < - data[(l - d + 1):l ]                    } else{dx < - data }",
    "res < - array(0 , c(n.ahead , n ) )        for(r in 1:n ) {      innov = rnorm(n.ahead , sd = sqrt(object$sigma2 ) )       if(q > 0 ) {           e < - c(start.innov , innov )      } else{e < - innov }        xc < - array(0 , dim = p + n.ahead )      if(p ! = 0 ) for(i in 1:p ) xc[i ] < - dx[[p.startindex + i ] ]        k < - 1       for(i in ( p + 1):(p + n.ahead ) ) {         xc[i ] < - e[q + k ]                     if(q",
    "! = 0 )             xc[i ] < - xc[i ] + sum(model$theta * e[(q + k - 1):k ] )                      if(p",
    "! = 0 )             xc[i ] < - xc[i ] + sum(model$phi * xc[(i - 1):(i - p ) ] )         if(use.constant )             xc[i ] < - xc[i ] + mu          k < - k + 1      }         xc < - as.vector(unlist(xc[(p + 1):(p + n.ahead ) ] ) )        if((d > 0 ) & & ( s.diff > 0 ) ) {          xc < - diffinv(xc , differences = d , xi = diff.xi[1])[-c(1:d ) ]          xc < - diffinv(xc , lag = s.period , differences = s.diff ,                       xi = diff.xi[2:(s.diff * s.period + 1 ) ] )          xc < - xc[-(1:(s.diff * s.period ) ) ]            } else if(s.diff > 0 ) {          xc < - diffinv(xc , lag = s.period , differences = s.diff ,                          xi = diff.xi[1:(s.diff * s.period ) ] )          xc < - xc[-(1:(s.diff * s.period ) ) ]                    } else if(d > 0 ) {          xc < - diffinv(xc , differences = d , xi = diff.xi)[-c(1:d ) ]      }          res [ , r ] < - xc      }      res } ....",
    "we have demonstrated that , using a sarima model , it is not difficult to simulate from the conditional distribution of future observations .",
    "our code can thus be used to randomly generate possible future continuations of a time series .",
    "the identification of a suitable sarima model is an important step in the procedure we suggest ; due to the nature of this short note we have to refer the reader to the vast literature on time series analysis for this task ; an important point in the modeling procedure are also checks for the model assumption .",
    "especially the normal assumption for the error term has an important impact on the simulated future observations .    despite these important limitations , that are present in all parametric statistical models ,",
    "we hope that our simple algorithm will be useful for many applications .",
    "this seems likely as we were not able to find any suggestions for a similar algorithm in the literature ."
  ],
  "abstract_text": [
    "<S> the simulation of the continuation of a given time series is useful for many practical applications . but </S>",
    "<S> no standard procedure for this task is suggested in the literature . </S>",
    "<S> it is therefore demonstrated how to use the seasonal arima process to simulate the continuation of an observed time series . </S>",
    "<S> the r - code presented uses well - known modeling procedures for arima models and conditional simulation of a sarima model with known parameters . </S>",
    "<S> a small example demonstrates the correctness and practical relevance of the new idea .    </S>",
    "<S> halis sak + department of industrial and systems engineering , yeditepe university , kayidai , 34755 istanbul , turkey + wolfgang hrmann + department of industrial engineering , boazii university , 34342 bebek - istanbul , turkey +    _ seasonal arima , simulation , r _ </S>"
  ]
}