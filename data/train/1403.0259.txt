{
  "article_text": [
    "a recent report @xcite shows that @xmath0 of the internet traffic in north america comes from real - time streaming applications such as netflix ( @xmath1 ) and youtube ( @xmath2 ) .",
    "streaming traffic consumes such a large fraction of internet bandwidth because video files inherently have a larger size than other forms of data .",
    "thus , there is a need to develop transmission schemes which can ensure a high quality of experience to the user , with efficient use of available bandwidth .    unlike traditional file transfer where only total delay matters , streaming imposes delay constraints on each individual packet .",
    "further , many applications require in - order playback of packets at the receiver .",
    "packets received out of order are buffered until the missing packets in the sequence are successfully decoded . in audio and video applications some packets can be dropped without affecting the streaming quality .",
    "however , other applications such as remote desktop , and collaborative tools such as dropbox and google docs have strict order constraints on packets , where packets represent instructions that need to be executed in order at the receiver .    to ensure that packets are decoded in order , the transmission scheme must give higher priority to older packets that were delayed , or received in error due to channel noise .",
    "however , repeating old packets instead of transmitting new packets results in a loss in the overall rate at which packets are delivered to the user , that is , the throughput .",
    "thus there is a fundamental trade - off between throughput and in - order decoding delay .",
    "the throughput loss incurred to achieve low in - order decoding delay can be significantly reduced if the source receives feedback about packet losses , and thus can adapt its future transmission strategy to strike the right balance between old and new packets .",
    "we study this interplay between feedback and the throughput - delay trade - off .",
    "only a few papers in literature have analyzed streaming codes .",
    "fountain codes @xcite are capacity - achieving erasure codes , but they are not suitable for streaming because the decoding delay is proportional to the size of the data .",
    "streaming codes without feedback for constrained channels such as adversarial and cyclic burst erasure channels were first proposed in @xcite , and also extensive explored in @xcite .",
    "the thesis @xcite also proposed codes for more general erasure models and analyzed their decoding delay .",
    "decoding delay has also been analyzed studied in @xcite in a multicast scenario with immediate feedback to the source .",
    "however , decoding delay does not capture _ in order _ packet delivery which is required for streaming applications .",
    "this aspect is captured in the delay metrics in @xcite and @xcite , which consider that packets are played in - order at the receiver .",
    "the authors in @xcite analyze the throughput - delay trade - off for uncoded packet transmission over a channel with long feedback delay .",
    "in @xcite we propose coding schemes that minimize playback delay in point - to - point streaming for the no feedback and immediate feedback cases .",
    "however , the case of block - wise feedback to the source remains to be explored .      in this paper",
    "we consider this unexplored problem of how to effectively utilize block - wise feedback to the source to ensure in - order packet delivery to the user .",
    "in contrast to playback delay considered in @xcite and @xcite , we propose a more versatile delay metric called the in - order decoding exponent .",
    "this metric captures the burstiness in the in - order decoding of packet for applications which require packets in - order , but do not necessarily play them at a constant rate .",
    "when there is immediate feedback , we can achieve the best throughput - delay trade - off .",
    "but when the feedback comes in blocks , we have to compromise on the throughput to ensure fast in - order decoding .",
    "we present a spectrum of coding schemes that span different points on the throughput - delay trade - off . depending upon the delay - sensitivity , and bandwidth limitations of the application",
    ", one can choose an appropriate operating point on this trade - off .",
    "the proposed codes can be shown to be optimal over a broad class of schemes for the no feedback , and small feedback delay cases .",
    "we consider a point - to - point packet streaming scenario where the source has a large stream of packets @xmath3 .",
    "the encoder creates a coded packet @xmath4 in each slot @xmath5 and transmits it over the channel . the encoding function @xmath6 is known to the receiver . for example ,",
    "if @xmath7 is a linear combination of the source packets , the coefficients are included in the transmitted packet so that the receiver can use them to decode the source packets from the coded combination . without loss of generality , we can assume that @xmath8 is a linear combination of the source packets .",
    "we consider an i.i.d .",
    "packet erasure channel where every transmitted packet is correctly received with probability @xmath9 , and otherwise received in error and discarded .",
    "an erasure channel is a good model when encoded packets have a set of checksum bits that can be used to verify with high probability whether the received packet is error - free .",
    "the receiver application requires the stream of packets to be _ in order_. packets received out of order are buffered until the missing packets in the sequence are decoded . due to this in - order property",
    ", the transmitter can stop including @xmath10 in coded packets when it knows that the receiver can decode @xmath10 once all @xmath11 for @xmath12 are decoded .",
    "we refer such packets as  seen \" packets . the notion of  seen \"",
    "is defined formally as follows .",
    "[ defn : seen_pkts ] a packet @xmath10 is said to be  seen \" by the transmitter when it knows that a coded combination that only includes @xmath10 and packets @xmath11 for @xmath13 is received successfully .",
    "we consider that the source receives block - wise feedback about channel erasures after every @xmath14 slots .",
    "thus , before transmitting in slot @xmath15 , for all integers @xmath16 , the source knows about the erasures in slots @xmath17 to @xmath18 .",
    "it can use this information to adapt its transmission strategy in slot @xmath19 .",
    "block - wise feedback can be used to model a half - duplex communication channel where after every @xmath14 slots of packet transmission , the channel is reserved for the receiver to send feedback about the status of decoding .",
    "note that the feedback can be used to estimate @xmath9 , the probability of success of the erasure channel , when it is unknown to the source .",
    "we consider two metrics to measure the quality of streaming , the throughput @xmath20 and in - order decoding exponent @xmath21 .",
    "the throughput is the rate at which  innovative \" coded packets are received .",
    "a coded packet is said to be  innovative \" if it is linear independent with respect to the coded packets received until then .",
    "the bandwidth required is proportional to @xmath22 .",
    "the throughput captures the overall rate at which packets go through the channel , irrespective of the order .",
    "the _ in - order _ decoding aspect is captured by a metric called the in - order decoding exponent @xmath21 which is defined as follows .",
    "[ defn : lambda_def ] let @xmath23 be the time between two successive instants of decoding one or more packets in - order . then the in - order decoding exponent @xmath21 is @xmath24    the relation can also be stated as @xmath25 where @xmath26 stands for asymptotic equality defined in ( * ? ? ?",
    "* page 63 ) .",
    "the in - order decoding exponent captures the burstiness in packet decoding .",
    "for example , if the streaming application plays one in - order packet in every slot , and if there are @xmath27 packets in the receiver buffer , then the probability of an interruption in playback is proportional to @xmath28 .    in this paper",
    "we analyze how the trade - off between @xmath20 and @xmath21 is affected by the block - wise feedback delay @xmath14 .",
    "we first consider the extreme cases of immediate feedback @xmath29 and no feedback @xmath30 in section  [ sec : immediate_feedback ] and section  [ sec : no_feedback ] respectively .",
    "this gives us insights into the analysis of the @xmath31 trade - off for general @xmath14 in section  [ sec : block_wise_fb ] .",
    "in the immediate feedback @xmath29 case , the source has complete knowledge of past erasures before transmitting each packet .",
    "we can show that a simple automatic - repeat - request ( arq ) scheme is optimal in both @xmath20 and @xmath21 . in this scheme ,",
    "the source transmits the lowest index unseen packet , and repeats it until the packet successfully goes through the channel .    since a new packet is received in every successful slot , the throughput @xmath32 , the success probability of the erasure channel .",
    "the arq scheme is throughput - optimal because the throughput @xmath33 is equal to the information - theoretic capacity of the erasure channel @xcite .",
    "moreover , it also gives the optimal the in - order decoding exponent @xmath21 because one in - order packet is decoded in every successful slot .",
    "to find @xmath21 , first observe that the tail distribution of the time @xmath23 , the interval between successive in - order decoding instants is , @xmath34 substituting this in definition  [ defn : lambda_def ] we get the exponent @xmath35 .",
    "based on this analysis of the immediate feedback case , we can find limits on the range of achievable @xmath31 for any feedback delay @xmath14 as follows .",
    "[ lem : range_of_tau_lambda ] the throughput and delay metrics @xmath31 achievable for any feedback delay @xmath14 lie in the region @xmath36 , and @xmath37 .",
    "when feedback is received after blocks of @xmath38 slots , the source has less knowledge about past erasures than in the immediate feedback ( @xmath39 ) case .",
    "thus , the @xmath40 trade - off when @xmath38 is always worse than @xmath41 the optimal trade - off for the immediate feedback ( @xmath39 ) case .",
    "now we consider the other extreme case @xmath42 , where there is no feedback to the source about channel erasures .",
    "we propose a coding scheme and prove that it gives the best @xmath40 trade - off among a class of codes called full - rank codes which are defined as follows .",
    "[ defn : full_rank_codes ] in slot @xmath5 we transmit a linear combination of all packets @xmath43 to @xmath44}$ ] , where the coefficients are chosen from a large enough field such that the coded combinations are independent with high probability .",
    "we refer to @xmath45 $ ] as the transmit index in slot @xmath5 .",
    "[ conj : full_rank ] since the packets are required in - order at the receiver , we believe that given transmit index @xmath45 $ ] , there is no loss of generality in including all packets @xmath43 to @xmath44}$ ] .    hence we believe that there is no loss of generality in restricting our attention to full - rank codes .",
    "[ thm : opt_no_feedback ] the optimal throughput - delay trade - off among full - rank codes is @xmath46 for all @xmath47 .",
    "it is achieved by the coding scheme with @xmath45 = \\lceil rn \\rceil$ ] for all @xmath5 .",
    "the term @xmath48 is the binary information divergence function which is defined for @xmath49 as @xmath50 note that as @xmath51 , @xmath48 converges to @xmath52 , which is the optimal @xmath21 , as given by lemma  [ lem : range_of_tau_lambda ] .    to prove theorem  [ thm : opt_no_feedback ] , we first show that the scheme with transmit index @xmath45 = \\lceil rn \\rceil$ ] in time slot @xmath5 achieves the trade - off @xmath53",
    ". then we prove the converse by showing that no other full - rank scheme gives a better trade - off .",
    "consider the scheme with transmit index @xmath45 = \\lceil r n\\rceil$ ] , where @xmath54 represents the rate of adding new packets to the transmitted stream .",
    "the rate of adding packets is below the capacity of the erasure channel .",
    "thus it is easy to see that the throughput @xmath55 .",
    "let @xmath56 $ ] be the number of combinations , or equations received until time @xmath5 .",
    "it follows the binomial distribution with parameter @xmath9 .",
    "all packets @xmath57}$ ] are decoded when @xmath56 \\geq v[n]$ ] .",
    "define the event",
    "@xmath58 < v[n ] \\text { for all } 1 \\leq j \\leq n\\}$ ] , that there is no packet decoding until slot @xmath5 .",
    "the tail distribution of time @xmath23 between successive in - order decoding instants is , @xmath59=k ) \\pr(g_n | e[n ]",
    "= k),\\nonumber\\\\ & = \\sum_{k=0}^{\\lceil n r \\rceil - 1 }   \\binom{n}{k } p^{k } ( 1-p)^{n - k } \\pr(g_n | e[n ] = k ) , \\nonumber \\\\ & \\doteq \\sum_{k=0}^{\\lceil n r \\rceil - 1 }   \\binom{n}{k } p^{k } ( 1-p)^{n - k } ,   \\label{eqn : asym_t_no_fb_1}\\\\ & \\doteq \\binom{n}{\\lceil n r \\rceil - 1 } p^{\\lceil n r \\rceil - 1 } ( 1-p)^{n-\\lceil n r \\rceil + 1 } ,   \\label{eqn : asym_t_no_fb_2}\\\\ & \\doteq",
    "e^{-n d(r||p ) } , \\label{eqn : asym_t_no_fb_3}\\end{aligned}\\ ] ] where in , we remove the @xmath60 = k)$ ] when we take the asymptotic equality @xmath26 because , by the generalized ballot theorem from @xcite , we can show that @xmath60 = k)$ ] is @xmath61 .",
    "hence it is sub - exponential and does not affect the exponent of @xmath62 . in",
    ", we only retain the @xmath63 term from the summation because for @xmath64 , that term asymptotically dominates other terms .",
    "finally , we use the stirlings approximation of the binomial coefficient @xmath65 to obtain .",
    "hence we have proved that the scheme with @xmath45 = \\lceil rn \\rceil$ ] achieves the throughput - delay trade - off @xmath53 .",
    "first let us show that the transmit index @xmath45 $ ] of the optimal full - rank scheme should be non - decreasing in @xmath5 . given a scheme which does not satisfy the non - decreasing property",
    ", we can permute the order of transmitting the coded packets such that @xmath45 $ ] is non - decreasing in @xmath5 . changing",
    "the order of the transmitted packets will not affect the throughput @xmath20 . and it can in fact improve the in - order decoding exponent @xmath21 because decoding can occur sooner when the initial coded packets include fewer source packets .    in the proposed scheme with @xmath45 = \\lceil rn \\rceil$ ] , we add new packets to the transmitted stream at a constant rate @xmath54 .",
    "but in general a full - rank scheme can vary the rate of adding packets .",
    "suppose it uses rate @xmath66 for @xmath67 slots for all @xmath68 , such that @xmath69 and @xmath70 .",
    "then , the tail distribution of time @xmath23 between successive in - order decoding instants is , @xmath71=k ) \\pr(g_n | e[n ] = k),\\label{eqn : asym_t_no_fb_4}\\\\ & \\doteq \\sum_{k=0}^{\\lceil n r \\rceil - 1 }   \\binom{n}{k } p^{k } ( 1-p)^{n - k } , \\label{eqn : asym_t_no_fb_5 } \\\\",
    "& \\doteq e^{-n d(r||p)}. \\label{eqn : asym_t_no_fb_6}\\end{aligned}\\ ] ] varying the rate of adding packets affects the term @xmath60 = k)$ ] in , but it is still @xmath61 and we can eliminate it when we take the asymptotic equality in . as a result ,",
    "the in - order delay exponent is same as that if we had a constant rate @xmath54 of adding new packets to the transmitted stream .",
    "hence we have proved that no other full - rank scheme can achieve a better @xmath40 trade - off than @xmath45 = \\lceil nr \\rceil$ ] for all @xmath5 .",
    "[ fig : inst_fb_no_fb_tradeoff ] shows the @xmath40 trade - off for the immediate feedback and no feedback cases , with success probability @xmath72 .",
    "the optimal trade - off with any feedback delay @xmath14 lies in between these two extreme cases .     and throughput @xmath20 with success probability @xmath72 for the immediate feedback @xmath73 and no feedback @xmath42 cases.,width=336 ]",
    "in section  [ sec : immediate_feedback ] and section  [ sec : no_feedback ] we considered the extreme cases of immediate feedback @xmath29 and no feedback @xmath42 respectively .",
    "we now analyze the @xmath40 trade - off with general block - wise feedback delay of @xmath14 slots .",
    "we restrict our attention to a class of coding schemes called time - invariant schemes , which are defined as follows .",
    "[ defn : time_invariant ] a time - invariant scheme is represented by a vector @xmath74 $ ] where @xmath75 , for @xmath76 , are non - negative integers such that @xmath77 . in each block",
    "we transmit @xmath75 linear combinations of the @xmath78 lowest - index unseen packets in the stream .",
    "the above class of schemes is referred to as time - invariant because the vector @xmath79 is fixed across all blocks .",
    "observe that as @xmath80 , the class of time - invariant schemes are equivalent to full - rank codes defined in definition  [ defn : full_rank_codes ] .",
    "[ conj : time_invar ] for any coding scheme , there exists a corresponding time - sharing policy between time - invariant schemes that gives the same or strictly better @xmath40 trade - off .",
    "we believe this conjecture is true because , it can be shown that any full - rank code can be expressed a time - sharing time - invariant scheme . by conjecture  [ conj : full_rank ]",
    "it follows that there is no loss of generality in focusing on time - invariant schemes .",
    "there is also no loss of generality in restricting the length of the vector @xmath79 to @xmath14 .",
    "this is because we are still transmitting @xmath14 independent coded packets . and adding fewer source packets to the coded combinations ,",
    "can only increase the exponent @xmath21 .",
    "given a vector @xmath79 , define @xmath81 , as the probability of decoding the first unseen packet during the block , and @xmath82 as the number of innovative coded packets that are received during that block .",
    "we can express @xmath83 and @xmath84 in terms of @xmath81 and @xmath82 as , @xmath85}{d } , -\\frac{1}{d}\\log(1-p_d ) \\right),\\label{eqn : lambda_d}\\end{aligned}\\ ] ] where we get throughput @xmath83 by normalizing the @xmath86 $ ] by the number of slots in the slots .",
    "we can show that the probability @xmath87 of no in - order packet being decoded in @xmath88 blocks is equal @xmath89 . substituting this in we get @xmath84 .",
    "consider the time - invariant scheme @xmath90 $ ] where block size @xmath91 .",
    "that is , we transmit @xmath92 combination of the first unseen packet , and @xmath93 combinations of the first @xmath93 unseen packets .",
    "[ fig : block_wise_exmp ] illustrates this scheme for one channel realization . the probability @xmath81 and @xmath86 $ ] are , @xmath94 & = \\sum_{i=1}^{3 } i \\cdot \\binom{4}{i } p^i ( 1-p)^{4-i } + 3p^4 = 4p - p^4 , \\label{eqn : exmp_e_s_d}\\end{aligned}\\ ] ] where in , we get @xmath78 innovative packets if there are @xmath78 successful slots for @xmath95 .",
    "but if all @xmath96 slots are successful we get only @xmath93 innovative packets . we can substitute and in to get the @xmath40 trade - off .",
    "$ ] with block size @xmath91 .",
    "each bubble represents a coded combination , and the numbers inside it are the indices of the source packets included in that combination .",
    "the check and cross marks denote successful and erased slots respectively .",
    "the packets that are  seen \" in each block are not included in the coded packets in future blocks . ]",
    "[ fig : block_wise_exmp ]    [ rem : uniqueness_of_schemes ] time - invariant schemes with different @xmath79 can be equivalent in terms of the @xmath40 . in general , given @xmath97 , if any @xmath98 , and @xmath99 , then the scheme is equivalent to setting @xmath100 and @xmath101 , keeping all other elements of @xmath79 the same . for example",
    ", @xmath102 $ ] gives the same @xmath40 as @xmath103 $ ] .      in section",
    "[ sec : immediate_feedback ] we saw that for the immediate feedback case , we can achieve @xmath104 .",
    "however , when the feedback is delayed we can achieve optimal @xmath20 ( or @xmath21 ) only at the cost of sacrificing the optimality of the other metric .",
    "we now find the best achievable @xmath105 ( or @xmath21 ) with optimal @xmath21 ( or @xmath20 ) .",
    "[ lem : cost_of_opt_lambda ] for a feedback delay of @xmath14 slots , the best achievable throughput is @xmath106 , when the in - order decoding exponent @xmath35 .",
    "if we want to achieve @xmath35 , we require @xmath81 in to be equal to @xmath107 .",
    "the only scheme that can achieve this is @xmath108 $ ] , where we transmit @xmath14 copies of the first unseen packet .",
    "the number of innovative packets @xmath82 received in every block is @xmath92 with probability @xmath107 , and zero otherwise .",
    "hence , the best achievable throughput is @xmath106 with optimal @xmath35 .",
    "this result gives us insight on how much bandwidth ( which is proportional to @xmath109 ) is needed for a highly delay - sensitive application which needs @xmath21 to be as large as possible .",
    "[ lem : cost_of_opt_tau ] for a feedback delay of @xmath14 slots , the best achievable in - order decoding exponent is @xmath110 , when the throughput @xmath33 .    if we want to achieve @xmath33 , we need to guarantee an innovation packet in every successful slot . the only time invariant scheme that achieve this is @xmath111 $ ] , and the vectors @xmath79 that are equivalent to it as given by remark  [ rem : uniqueness_of_schemes ] . with @xmath111 $ ] , the probability of decoding the first unseen packet is @xmath112 . substituting this in we get @xmath113 , the best achievable @xmath21 when @xmath33 .    fig .",
    "[ fig : cost_of_opt_tau_lambda ] shows the best achievable @xmath20 and @xmath21 versus @xmath14 , when the other metric is at its optimal value .",
    "the plots in fig .  [ fig : cost_of_opt_tau_lambda ] correspond to moving leftwards and downwards respectively from the optimal trade - off @xmath114 in fig .",
    "[ fig : inst_fb_no_fb_tradeoff ] .",
    "( or @xmath115 versus @xmath14 , while maintaining the optimal value of the other metric @xmath21 ( or @xmath20 ) , for channel success probability @xmath116 . , width=336 ]      for any given throughput @xmath20 , our aim is to find the transmission scheme that achieves the maximum @xmath21 .",
    "we first prove that any convex combination of achievable points @xmath40 can be achieved .",
    "[ thm : interpolate_bw_schemes ] given time - invariant schemes @xmath117 for @xmath118 , we can achieve the throughput - delay trade - off given by any convex combination of the points @xmath119 by time - sharing between the schemes .",
    "here we prove the result for @xmath120 , that is time - sharing between two schemes .",
    "it can be extended to general @xmath121 using induction . given two time - invariant schemes @xmath122 and",
    "@xmath123 which achieve the throughput - delay trade - offs @xmath124 and @xmath125 respectively , consider a time - sharing strategy where , in each block we use the scheme @xmath122 with probability @xmath126 and scheme @xmath123 otherwise . then",
    ", it is easy to see that the throughput on the new scheme is @xmath127",
    ".    now we prove the in - order decoding exponent @xmath21 is also a convex combinations of @xmath128 and @xmath129 .",
    "let @xmath130 and @xmath131 be the probabilities of decoding the first unseen packet in a block using scheme @xmath122 and @xmath123 respectively .",
    "suppose in an interval with @xmath88 blocks , we use scheme @xmath122 for @xmath132 blocks , and scheme @xmath123 in the remaining blocks , we have @xmath133 using this we can evaluate @xmath21 as , @xmath134 where we get using .",
    "as @xmath135 , by the weak law of large numbers , the fraction @xmath136 converges to @xmath126 .",
    "hence , we have shown that we can interpolate between the @xmath40 trade - off of two policies by time - sharing between them .",
    "the main implication of theorem  [ thm : interpolate_bw_schemes ] is that , to find the optimal @xmath31 trade - off , we only have to find the points @xmath137 that lie on the convex envelope of the achievable region spanned by all possible @xmath79 .",
    "we determine this optimal trade - off for @xmath138 in lemma  [ lem : d_2_tradeoff ] and lemma  [ lem : d_3_tradeoff ] below .",
    "[ lem : d_2_tradeoff ] the optimal @xmath40 trade - off is the line joining points @xmath139 and @xmath140 .    when @xmath141 there are only two possible time - invariant schemes @xmath142 $ ] and @xmath143 $ ] that give unique @xmath40 .",
    "by remark  [ rem : uniqueness_of_schemes ] , all other valid vectors @xmath79 are equivalent to one of these schemes . from lemma  [ lem : cost_of_opt_lambda ] and",
    "lemma  [ lem : cost_of_opt_tau ] we know that the @xmath31 for these schemes are @xmath144 and @xmath145 respectively . by theorem  [ thm : interpolate_bw_schemes ]",
    "we can achieve all @xmath40 on the line joining these two points by time - sharing between the two policies .",
    "[ lem : d_3_tradeoff ] the optimal @xmath40 trade - off when @xmath146 is the piecewise linear curve joining points @xmath147    when @xmath146 there are four time - invariant schemes @xmath148 , \\mathbf{x}^{(2 ) } = [ 2,1,0],\\mathbf{x}^{(3 ) } = [ 1,2,0]$ ] and @xmath149 $ ] that give unique @xmath40 , as given by definition  [ defn : time_invariant ] and remark  [ rem : uniqueness_of_schemes ] . from lemma  [ lem : cost_of_opt_lambda ] and lemma  [ lem : cost_of_opt_tau ] we know that @xmath150 and @xmath151 .",
    "for the other two schemes , we first evaluate @xmath81 and @xmath86 $ ] and substitute them in to get , @xmath152 and @xmath153    we can show that @xmath123 gives a better trade - off than @xmath154 by showing that for all @xmath9 , the slopes of the lines joining @xmath155 for @xmath156 satisfy , @xmath157    the trade - off for @xmath141 and @xmath146 with @xmath158 is shown in fig .",
    "[ fig : block_wise_tradeoff ] .",
    "the point below the piece - wise linear curve for @xmath146 , corresponding to the sub - optimal scheme @xmath159 $ ] .",
    "we observe that the optimal trade - off becomes significantly worse are @xmath14 increases . from this",
    "we can imply that frequent feedback to the source is important in delay - sensitive applications to ensure fast in - order decoding of packets .",
    "for @xmath160 which can be shown to be optimal over all convex combinations of time - invariant schemes .",
    "the point just below the piece - wise linear curve for @xmath146 , corresponding to the sub - optimal scheme @xmath161$].,width=336 ]    for general @xmath14 , it is hard to search for the @xmath162 that lie on the optimal trade - off .",
    "we suggest a set of time - invariant schemes which are easy to analyze and they give a good @xmath40 trade - off .",
    "[ defn : suggested_schemes ] for general @xmath14 we suggest schemes with @xmath163 and @xmath164 , for @xmath165 .",
    "they give the throughput - delay trade - off @xmath166    fig .",
    "[ fig : close_to_optimal_tradeoff ] shows the trade - off given by for different values of @xmath14 .",
    "observe that for @xmath141 and @xmath146 the suggested schemes coincide with the optimal trade - off we derived in lemma  [ lem : d_2_tradeoff ] and lemma  [ lem : d_3_tradeoff ] and shown in fig .",
    "[ fig : block_wise_tradeoff ] . as @xmath80 , and @xmath167",
    ", the trade - off converges to @xmath168 for @xmath169 , which is the line joining @xmath170 and @xmath171 .",
    "numerical results suggest that for small @xmath14 this class of schemes gives the best trade - off among all possible time - invariant schemes @xmath79 , and close to optimal in general .     with @xmath116 and different values of feedback delay @xmath14 .",
    "numerical results suggest that this trade - off is optimal all convex combinations of time - invariant schemes for small @xmath14 . ]",
    "in this paper we analyze how block - wise feedback affects the trade - off between throughput @xmath20 and in - order decoding exponent @xmath21 , which measures the burstiness in - order packet decoding in streaming communication .",
    "when there is immediate feedback , we can simultaneously achieve the optimal @xmath20 and @xmath21 .",
    "but as the block size increases , and the frequency of feedback reduces , we have to compromise on at least one of these metrics .",
    "our analysis gives us the insight that frequent feedback is crucial to ensure in - order packet delivery in delay - sensitive applications .",
    "given that feedback comes in blocks of @xmath14 slots , we present a spectrum of coding schemes that span different points on the @xmath40 trade - off as shown in fig .",
    "[ fig : close_to_optimal_tradeoff ] . depending upon the delay - sensitivity and bandwidth limitations of the applications ,",
    "these codes provide the flexibility to choose a suitable operating point on trade - off .",
    "the proposed codes can be shown to be optimal over the broad class of full - rank codes for small feedback delay @xmath14 , and when there is no feedback .",
    ", `` on playback delay in streaming communication , '' _ international symp . on information theory _",
    ", july 2012 . t.  cover and j.  thomas , _ elements of information theory_. new york , ny , usa : wiley - interscience , 2nd  ed . , 1991"
  ],
  "abstract_text": [
    "<S> unlike traditional file transfer where only total delay matters , streaming applications impose delay constraints on each packet and require them to be _ in order_. to achieve fast in - order packet decoding , we have to compromise on the throughput . </S>",
    "<S> we study this trade - off between throughput and in - order decoding delay , and in particular how it is affected by the frequency of block - wise feedback to the source . </S>",
    "<S> when there is immediate feedback , we can achieve the optimal throughput and delay simultaneously . </S>",
    "<S> but as the feedback delay increases , we have to compromise on at least one of these metrics . </S>",
    "<S> we present a spectrum of coding schemes that span different points on the throughput - delay trade - off . depending upon the delay - sensitivity and bandwidth limitations of the application </S>",
    "<S> , one can choose an appropriate operating point on this trade - off . </S>"
  ]
}