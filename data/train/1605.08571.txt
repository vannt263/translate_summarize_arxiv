{
  "article_text": [
    "trajectory optimization and optimal control approaches have recently been very successful to control the locomotion of legged robots .",
    "simplified linear models of the dynamics , usually variations of the linear inverted pendulum model @xcite,@xcite,@xcite,@xcite have been widely used to compute the center of mass motion of legged robots , in particular biped robots .",
    "the linearity can be exploited to formulate optimal control problems that can be solved with quadratic programs , therefore allowing for fast computations of solutions in a model predictive control manner .    while these simplified models are useful , generalization to more complex situations where multiple non co - planar contact points might be desirable is limited .",
    "moreover , they do not take into account how the generation of angular momentum affects the behavior of the robot , nor how individual contact points should be controlled to create a desired motion .",
    "on the other hand , several contributions have shown that using the full dynamics model of the robot could be beneficial to generate even more complex behaviors @xcite,@xcite .",
    "they have the advantage of explicitly taking into account the contact interactions with the environment and the dynamics of the robot .",
    "the problem with such approaches is that they usually require to solve non convex optimization problems which are computationally demanding .",
    "several approaches have addressed the problem using variations of differential dynamic programming to compute optimal trajectories .",
    "the drawback of such algorithms is that they do not allow to easily add constraints on the state and controls .",
    "other approaches formulate the problem as non - convex optimization problems , however in these cases the solvers used are generally off the shelf nonlinear solvers that do not exploit the structure of problem .",
    "this paper addresses the problem of planning robot motion and interaction forces of a legged robot given a set of predefined contact points . in @xcite",
    ", the authors showed that such an approach could be taken to compute with a mild computational complexity trajectories that could be then directly included in whole - body control approaches and executed on a simulated humanoid . with a similar approach @xcite ,",
    "interesting behaviors were demonstrated on a robot , confirming the interest in resolving such mathematical problems more efficiently .    in this paper , we analyze the structure of the problem induced by the physical model inherent of legged robots modeled through rigid body dynamics . in particular , we decompose the planning problem into two alternating optimization phases : first the contact forces and overall robot momentum are computed to satisfy dynamic constraints and in a second step the kinematic plan is resolved to satisfy the dynamic plan . alternating these two phases lead to a locally optimal solution for the full kinodynamic plan .",
    "we concentrate our efforts on the momentum optimal control problem .",
    "first , we show that by choosing the right representation of contact forces and momentum we can rewrite the problem as a quadratically constrained quadratic program for which a convex approximation of the constraints can be explicitly ( and trivially ) constructed .",
    "we then present two formulations , using either a simultaneous or sequential optimal control formulation .",
    "we show how the sequential formulation of the problem can reduce the size of the problem while preserving its sparse structure for more efficient computation .",
    "finally , preliminary numerical experiments demonstrate that exploiting this structure in a dedicated solver can significantly improve computational efficiency and quality of the solutions when compared to the same problem solved with a state of the art general purpose nonlinear solver .",
    "the remainder of this paper is structured as follows . in sec .",
    "[ sec : motion_generation ] we propose a motion generation algorithm that is based on optimization of the momentum equations .",
    "we write out different representations of contact forces in sec . [",
    "sec : force_rep ] and discuss their algebraic properties .",
    "these properties are then exploited in sec .",
    "[ sec : opt_ctrl_formulations ] to construct different variations of optimal control problems on the momentum equations of a floating - base robot .",
    "then , in sec .",
    "[ sec : experiments ] we show experiments with the proposed motion generation algorithm and conclude the paper .",
    "we are interested in the problem of motion generation for a robot in the presence of contact forces . in this section",
    ", we are going to write out an algorithm based on an optimal control formulation that is suited for motion generation in floating - base robots .",
    "our underlying dynamics model is    @xmath0    where @xmath1 is the joint configuration , @xmath2 the inertia matrix and nonlinear terms , @xmath3 are the actuation torques , @xmath4 the selection matrix , @xmath5 the end effector jacobian and @xmath6^t$ ] is the vector of forces @xmath7 and torques @xmath8 acting at end effector @xmath9 . the equations of motion of a floating - base robot consist of two parts , the manipulator dynamics describing the torque at each joint , and the 6 rows of newton - euler equations that describe the change of the overall momentum in the system .",
    "the dynamics can be separated into the 6 rows of newton - euler equations and the actuated part as follows    @xmath10    with the contact location @xmath11 and center of mass ( com ) @xmath12 computed through forward kinematics .",
    "@xmath13 is the centroidal momentum matrix that maps @xmath14 onto the overall linear and angular momentum of the system @xcite . @xmath15",
    "represent quantities from eq .",
    "corresponding to the actuated joints .",
    "+ from eqs .",
    "( [ eq : eom_decomposed_1]-[eq : eom_decomposed_2 ] ) , we observe that the planning process can be decomposed in two steps .",
    "first , a vector of joint trajectories @xmath16 is found together with contact force profiles @xmath17 that satisfy equation  .",
    "then , suitable torques can be computed readily from equation   assuming that sufficient joint torques can be provided by the actuators . in the following",
    ", we will discuss an optimal control approach that finds joint trajectories @xmath16 together with force profiles @xmath17 that satisfy eqs .",
    "( [ eq : eom_decomposed_1]-[eq : eom_decomposed_2 ] ) . our motion generation algorithm will be phrased as an optimal control problem of the form    @xmath18    where we express objective functions on kinematic quantities @xmath19 as well as on momentum and contact locations @xmath20 .",
    "for instance could @xmath19 enforce an end effector motion from one contact location to another .",
    "although contact locations @xmath21 and momentum @xmath22 can be written as functions of @xmath1 explicitly , we introduce redundant variables in order to simplify the optimization process as will become clear shortly .",
    "( [ eq : kino_dyn_opt_2]-[eq : kino_dyn_opt_3 ] ) state explicitly how contact locations and momentum relate through forward kinematics .",
    "the momentum equations of our robot model are then expressed as constraint in eq . with discretization parameter @xmath23 .",
    "@xmath24 is the set of feasible contact forces as will be discussed in more details later .",
    "the use of redundant variables allows us to decompose the overall problem into two better structured mathematical programs that allow the application of better informed solvers .",
    "the two sub - problems will be solved iteratively until convergence resulting in a solution for the original optimization problem .",
    "the first sub - problem is defined as @xmath25    this problem is optimized over the momentum and contact forces only . the resulting force and momentum profiles",
    "are dynamically consistent ( i.e. they satisfy dynamics constraints  ) and are as close as possible to reference profiles @xmath26 . however , the joint state @xmath1 is ignored in problem  .",
    "objectives on kinematic quantities are considered in the kinematic sub - problem @xmath27    where additionally to optimizing @xmath28 , we put constraints on momentum and contact location ( cf .",
    "( [ eq : kino_dyn_opt_2]-[eq : kino_dyn_opt_3 ] ) ) from the original problem into the cost of our kinematic sub - problem in form of soft constraints",
    ". we will solve the original problem   by iteratively solving problems  ,   and use the reference trajectories to enforce consistency between the two independent sub - problems .",
    "+    each of the sub - problems minimizes parts of the original objective function and satisfies a subset of the original constraints . additionally , the resulting momentum profiles from one sub - problem are optimized for consistency inside of the other up until convergence . with the proposed decomposition we have to solve two easier problems , where problem   is an unconstrained optimization that has no notion of contact forces .",
    "similar formulations , usually without costs on momentum , are often addressed in trajectory optimization for manipulators @xcite .",
    "problem   is a non - convex , but a well structured optimal control problem as we will discuss in the remainder of this paper .",
    "it is well known that the ( linear and angular ) momentum of a system can only be changed by external forces . in this section",
    ", we will discuss forces acting at contact points on a robot structure and we will show how the choice of representation of contact forces results in different mathematical programs with beneficial properties to be exploited by optimization algorithms .",
    "+      a force @xmath29 and torque @xmath8 acting at contact point @xmath30 can be represented equivalently as a force and torque acting at the com @xmath31 where the torque acting at @xmath31 transforms to @xmath32 and @xmath7 remains the same .",
    "the change of momentum can then be expressed equivalently using either of the two representations as @xmath33 where @xmath34 are the linear and angular momentum . from eq .",
    "we can see that depending on how we chose the point of action the dynamics are either linear or not .",
    "one might be tempted to say that the linear dynamics lead to easier mathematical programs , which however is not the case when contact constraints have to be considered .",
    "unilateral contacts , e.g. a hand pushing against a wall require that @xmath7 remains in a friction cone . on the other hand , point contacts can not generate torques , i.e. @xmath35 . in both cases ,",
    "the center of pressure @xmath30 at which @xmath7 is acting ( effectively ) needs to reside inside of a support polygon or at the point of contact @xmath36 .",
    "we will now derive constraints on contact forces that generalize across various types of contacts , such as contact between surfaces ( for instance a flat foot on the ground ) or point contacts ( for instance an elbow pushing on the table ) .",
    "for the following derivation , we define a contact surface for each contact @xmath9 as shown in fig .",
    "[ fig : contact_forces ] .",
    "each contact is located on a surface described by a rotation matrix @xmath37 and translation @xmath38 .",
    "we can then represent forces , torques and locations in local coordinates as follows where we drop the index @xmath9 for better readability @xmath39 where the hat identifies local representations .",
    "we can now write contact constraints as @xmath40 where @xmath41 is a friction parameter of the surface and @xmath42 is a vector of support limits and @xmath43 is a bound on torques that are normal to the contact surface . if we want to describe a point foot , we set @xmath44 .",
    "a contact between surfaces , e.g. floor and foot sole , allow for a wider range of @xmath45 . in eq .",
    "we restrict the force to remain in a pyramid which is used as an approximation for a friction cone .",
    "note that in eq .",
    "we consider the support polygon to be rectangular for a clear notation , however , our derivation holds for more general polyhedra as well .",
    "our contact model can be refined further @xcite without loss of the structure as derived in the remainder of the paper .",
    "as expressed in eqs .",
    "( [ eq : contact_constraints_1]-[eq : contact_constraints_3 ] ) contact constraints are linear if we express them as functions of @xmath46 acting at @xmath30 . on the other hand ,",
    "if we chose to represent forces and torques as @xmath47 acting at the com @xmath31 , we will end up with non - linear contact constraints . in both cases , either the constraints become nonlinear or the momentum equations do . in the following , we will investigate the type of non - linearity that we introduce in eqs .  , and",
    "how we can exploit it for development of optimization algorithms . +      depending on the choice of representation of the momentum dynamics",
    "( force acting at @xmath48 or at @xmath31 ) the resulting optimization problem will be constructed from different sets of linear or non - linear functions .",
    "we are interested in tracking the algebraic properties of these functions as we construct mathematical programs using the dynamics and constraints from eqs .  , .",
    "resulting objective functions and constraints will be classified as elements from the following sets of functions .",
    "we define the set of affine functions @xmath49    we define the set of positive semi definite quadratic functions @xmath50    we define the set of differences of positive semi definite functions @xmath51 throughout this paper we consider functions to be elements of @xmath52 , only if the quadratic parameter matrices @xmath53 can be accessed separately ( instead of only having access to the indefinite matrix @xmath54 ) .",
    "it is worth noting that @xmath55 is closed under addition , scalar multiplication and composition with functions from @xmath56 , i.e.    @xmath57    specifically , if we have quadratic parameter matrices @xmath58 constructed separately then the operations in eq .",
    "preserve this separation . + as can be noticed from eqs .",
    ", the nonlinearity introduced in the equations stems from cross products which can be classified as follows    [ theo : cross_product_is_dc ] the function @xmath59 is an element of @xmath52 and we can write out the corresponding matrices @xmath58 explicitly .",
    "it is straightforward to write a general cross product in a quadratic form with @xmath60_i = \\begin{bmatrix}{\\mathbf{a}}^t & { \\mathbf{b}}^t\\end{bmatrix}{\\mathbf{h}}_i\\begin{bmatrix}{\\mathbf{a}}^t & { \\mathbf{b}}^t\\end{bmatrix}^t , i=1,2,3 $ ] . using an eigenvalue decomposition ( for symmetric real matrices ) , we can then obtain @xmath61 , with @xmath62 diagonal matrices with _ only non - negative _ values .",
    "clearly , then @xmath63 with @xmath64 .    note that constructing the quadratic parameter matrices @xmath58 for a general cross product can be carried out offline as it does not require any problem data . through out the construction in the remainder of this paper , we will not have to perform any eigenvalue decomposition as this is typically costly .",
    "instead , we exploit eq .   in order to construct functions from @xmath52 . + it is straightforward to show that eqs .",
    "( [ eq : contact_constraints_1]-[eq : contact_constraints_3 ] ) can be expressed as @xmath65 , with @xmath66 , i.e. if we choose to represent contact forces at @xmath48 then the contact constraints are affine . on the other hand , the angular momentum   will result in a non - linear function .",
    "in fact , we will show that @xmath67 and we can construct the parameters @xmath68 separately inexpensively . on the other hand ,",
    "if we chose to represent the force torque at the com , we have the reverse effect , i.e. the angular momentum becomes an affine function of the force - torques and as we will show the contact constraints will be expressed as @xmath69 .",
    "+      in this section , we will categorize the nonlinear functions in eqs .  ,  ( [ eq : contact_constraints_1]-[eq : contact_constraints_3 ] ) into one of the categories defined in sec .  [ sec : algebraic_categorization ] . categorizing the com torque @xmath70 ( cf .",
    "eq .  ) requires consequent usage of eq .   and theorem  .",
    "as a result one can show that @xmath71 and thus @xmath72 .",
    "further , we will show that choosing to express external forces at the com will result in contact constraints that are expressed as inequalities on functions from @xmath52 . assuming a unilateral contact , we can write the torque acting at the center of pressure as @xmath73 from the definition of the cop we know that @xmath74 vanishes when projected on the contact surface , i.e.    @xmath75_\\times { \\mathbf{s}}\\hat{{\\mathbf{p } } } \\ ] ]    in order to resolve for @xmath48 , we first invert the premultiplied projector @xmath76_\\times { \\mathbf{s } } = { \\mathbf{r}}_z^t { \\mathbf{f } }      \\begin{bmatrix}0 & -1\\\\1 & 0\\end{bmatrix}\\\\          \\label{eq : p_projector_inv }      ( { \\mathbf{s}}^t [ { \\mathbf{r}}^t{\\mathbf{f}}]_\\times { \\mathbf{s}})^{-1 } = \\frac{1}{{\\mathbf{r}}_z^t { \\mathbf{f } } }      \\begin{bmatrix}0 & 1\\\\-1 & 0\\end{bmatrix}\\end{aligned}\\ ] ] we note that from the friction constraint ( cf .",
    "we have @xmath77 .",
    "next , we resolve eq .   for @xmath48 and substitute it into the cop constraints ( cf .",
    "eq .  ) . for better readability we will only show the result for the right - hand side of eq .   @xmath78_\\times { \\mathbf{s}})^{-1 }                     [ { \\mathbf{r}}_{x , y}^t { \\boldsymbol{\\kappa } } + \\nonumber \\\\                                                            & ~ { \\mathbf{r}}_{x , y}^t(({\\mathbf{r } } -                     { \\mathbf{t } } ) \\times { \\mathbf{f } } ) ] - { \\mathbf{c } }",
    "\\\\              \\leftrightarrow&~ ( { \\mathbf{p}}_{max } - { \\mathbf{c } } ) { \\mathbf{r}}_z^t { \\mathbf{f } } \\geq -\\begin{bmatrix}0&1\\\\-1&0\\end{bmatrix } ( { \\mathbf{r}}_{x , y}^t { \\boldsymbol{\\kappa } } + \\nonumber \\\\&~ { \\mathbf{r}}_{x , y}^t(({\\mathbf{r } } - { \\mathbf{t } } ) \\times { \\mathbf{f } } ) ) , \\label{eq : nonlin_cop_constraint}\\end{aligned}\\ ] ] where we used eq . .",
    "applying eq .   and theorem  , one can transform eq .   into a function inequality @xmath79 and again the quadratic parameter matrices can be constructed inexpensively .",
    "through out the following discussion , we will restrict ourselves to a predefined contact activation pattern ( cf .",
    "@xmath80 in eq .  ) .",
    "that means we predefine which end effector is in contact with the environment at which time .",
    "this could for instance be computed with an acyclic contact planner @xcite .",
    "the location of the contact and the force - torque are expressed as decision variables and will be computed by the optimizer .",
    "the goal of this section is to define an optimal control problem that finds sequences of states and controls under the dynamics constraint in eq .   and contact constraints eq .",
    "( [ eq : contact_constraints_1]-[eq : contact_constraints_3 ] ) thus solving problem .",
    "we start out with a simultaneous formulation , i.e. we optimize over both states and controls and express the dynamics constraint explicitly in the mathematical program . here",
    "we represent contact forces at the center of pressure .",
    "we summarize the optimization variables into @xmath81^t , t=0\\dots t$ ] and @xmath82 with @xmath83 indexing all @xmath84 contacts , and we write our optimal control problem as    @xmath85    this formulation is a quadratically constrained quadratic program ( qcqp ) , with a positive definite objective , linear inequality constraints and nonlinear equality constraints on functions from @xmath55 . as one can note from ( [ eq : qcqp_sim_1]-[eq : qcqp_sim_3 ] ) , summands of the objective as well as constraints all depend only on time - local variables @xmath86 and on @xmath82 .",
    "this property has the advantage that optimization algorithms can be applied that exploit the sparsity inside of objective hessian and constraint jacobian .",
    "the constraint jacobian has block form , where we have a block tridiagonal matrix on the left and a dense matrix on the right .",
    "the number of columns in the dense part scale with @xmath87 , i.e. they do not grow as @xmath88 increases .",
    "the lagrangian @xmath89 @xcite of the optimization program in eq .   has a hessian that can be decomposed into 4 blocks as follows    @xmath90\\\\ \\ ] ]    we note that again the dense blocks on the left and bottom do not depend on the time discretization @xmath88 .",
    "the top - left block on the other hand is block - diagonal .",
    "this sparsity is favorable in optimization algorithms , because typically an essential step in these solvers is to solve a linear system that inherits the sparsity properties from the constraint jacobian and lagrange hessian .",
    "especially , interior - point methods are known to preserve the band - diagonal sparsity structure @xcite .      in the following",
    "we will show that the sequential optimal control formulations for our problem can be transformed to an equivalent problem with a sparse structure similar to the simultaneous formulation .",
    "we will assume that a contact - phase @xmath9 is defined as the time interval @xmath91 at which an end effector is touching the environment .",
    "thus the contact activation from eq .   can be refined to @xmath92    where contact - phase @xmath9 starts at @xmath93 and ends at @xmath94 .",
    "for instance , a contact - phase could describe a foot step @xmath9 where the heel hits the ground at @xmath93 and the last time step at which the toe is touching the ground is @xmath95 .",
    "two heel strikes with the same foot would correspond to two different contact phases @xmath96 .",
    "further , we define forces and com torques as linear functions of a new set of variables @xmath97 as @xmath98    the variables @xmath97 correspond to the twice integrated contact forces and torques .",
    "general optimal control problems that are expressed in sequential form , usually lose their sparsity structure because the state variables need to be integrated out . in the following",
    ", we will use the change of variables in eqs .",
    "( [ eq : force_intg_vars_1]-[eq : force_intg_vars_3 ] ) to show that this is not the case for our momentum optimization problem .",
    "we will derive expressions for the state variables @xmath99 as functions of @xmath97 .",
    "the goal here is to show that the state variables at time step @xmath100 do _ not _ depend on all previous time steps @xmath101 , but only on a few ones .",
    "this has the advantage that a sequential formulation expressed with @xmath97 will maintain its sparse structure and at the same time reduce the number of variables and constraints compared to the formulation in sec .",
    "[ sec : simultaneous_formulations ] .",
    "+ we compose the linear momentum rate as @xmath102 in order to construct expressions for the linear momentum and center of mass , we first define the sums of forces during a contact - phase over time",
    "@xmath103{.35\\linewidth}{$ { \\boldsymbol{\\varphi}}_{e,\\varepsilon_e-2 } + ( t-\\varepsilon_e ) \\times \\\\({\\boldsymbol{\\varphi}}_{e,\\varepsilon_e-1 } - { \\boldsymbol{\\varphi}}_{e,\\varepsilon_e-2})$ } , & \\text{else }      \\end{cases}\\end{aligned}\\ ] ] with the derived expressions we can now construct the linear state terms as follows @xmath104    where @xmath23 is a discretization time .",
    "it is interesting to see , that the state variables at time @xmath100 only depend on control variables at @xmath105 .",
    "this has the advantage that derivatives of the objective function and constraints remain sparse and as such result in more efficient optimization algorithms similar to the simultaneous formulation . in the previous derivation we obtained expressions for the linear momentum , but expressions for the angular momentum",
    "can be readily derived with the same sparsity properties .",
    "we will now express a sequential optimal control problem with respect to integrals of forces as they were defined in sec .",
    "[ sec : force_integral_representation ] .",
    "we concatenate decision variables into vectors @xmath106^t , { \\mathbf{y}}_{1:e } = [ { \\mathbf{c}}^t_{1:e}~ { \\boldsymbol{\\varphi}}^t_{\\varepsilon_e-2:\\varepsilon_e,1:e}~ { \\boldsymbol{\\psi}}^t_{\\varepsilon_e-2:\\varepsilon_e,1:e}]^t$ ]    @xmath107    we can see that similar to the simultaneous formulation , summands of the objective and constraint functions only depend on @xmath108 rather than on all time steps . the quadratic constraints in eq .",
    "can be decomposed efficiently as discussed in sec .",
    "[ sec : centroidal_dynamics_decomp ] .",
    "we will now write out the sparse constraint jacobian    @xmath109 \\nonumber\\ ] ]    we will now write out the hessian of the lagrangian    @xmath110 \\nonumber   \\ ] ]    @xmath111      as we analyzed in the previous sections , both the simultaneous as well as sequential formulation of the mathematical program   have sparse constraint jacobians and lagrangian hessians . a common approach to solve optimal control formulations of that kind is to use interior point methods @xcite as computation time benefits from these sparsity properties . usually , the computation time is dominated by a decomposition of an _ augmented system _",
    "matrix @xmath112 , where @xmath113 is the constraint jacobian and @xmath114 is a ( preferably convex ) approximation to the lagrangian hessian . comparing the sparsity patterns of the two formulations from sec .",
    "[ sec : opt_ctrl_formulations ] , we see that both problems result in augmented systems that have a block structure with a band - diagonal matrix on the top left . the computational complexity for decomposing",
    "the augmented system is in both formulations linear w.r.t .",
    "the discretization parameter @xmath88 . finding an approximation @xmath114 that both makes progress towards a solution and",
    "can be robustly decomposed is usually not trivial . in our problem",
    "however , a convex approximation can be constructed exploiting the fact that @xmath115 can be decomposed into a difference of p.s.d matrices ( cf .",
    "we can obtain @xmath114 by simply dropping the negative part of @xmath115 from eq . .",
    "note that we do not require expensive operations such as eigenvalue decompositions to be carried out online , but obtain the convex part of @xmath115 through consequently applying eq .   and theorem   as we construct the problem .",
    "this can be done for both , the simultaneous as well as the sequential formulation .",
    "+ the number of variables is very different for the sequential and simultaneous formulations and has an impact on the computational complexity of resulting optimization algorithms . in the simultaneous case",
    ", we have to consider 6 force variables for each end effector and 9 state variables .",
    "for instance a biped that remains in double support at all time requires @xmath116 variables . on the other hand ,",
    "the sequential method does not require variables for states and thus contains only @xmath117 variables for the aforementioned example .",
    "further , we drop the @xmath118 dynamics constraints . as a consequence computational complexity",
    "is reduced with a sequential formulation as we solve for longer and finer grained time horizons @xmath88 . + it is also worth mentioning that since the momentum dynamics generalize the commonly used lipm , the sparse structure in our sequential formulation will be similar using lipm dynamics .",
    "this nicely complements the discussion in @xcite .",
    "we demonstrate the proposed motion optimization algorithm  [ algo : motion_generation ] on a stepping task for a humanoid robot .",
    "further , we convince ourselves that the sparse structure in our momentum problem results in linear computational complexity w.r.t .",
    "time discretization @xmath88 .",
    "all experiments were performed on a notebook with a 2.7 ghz intel i7 processor with 16 gb ram .      in this section",
    "we would like to discuss our choice of optimization algorithms for solving the two subproblems in , . in both algorithms ,",
    "we exploit the sparse structure resulting from the optimal control formulation .",
    "further , we condense the number of variables in the momentum optimal control problem as we discussed in sec .  [",
    "sec : sparse_seq_formulation ] .",
    "we solve the optimization problem with a gauss - newton method , where the hessian is a block tridiagonal positive definite matrix that can be factorized with a dedicated cholesky decomposition @xcite .",
    "the bottleneck in our implementation is a numerical differentiation of the momentum jacobian @xmath119 , which should be constructed directly from the dynamics model .",
    "nevertheless , with our naive implementation we were able to generate whole - body motion and force plans in 30 s of computation time .",
    "+ for the momentum optimization we implement a primal - dual interior point method ( * ? ? ?",
    "19.2 ) , which allows us to preserve the band - diagonal structure in our problem .",
    "the algorithm is modified as discussed in sec [ sec : comparison_sparsity ] to exploit the convex approximation of the lagrangian hessian .",
    "we run the momentum optimization for increasing values of @xmath88 and plot convergence of the lagrangian gradient in fig .",
    "[ fig : computation_time ] .",
    "it becomes evident from the plot that computation time increases linearly as we increase @xmath88 .",
    "note that sequential methods in general scale cubic with @xmath88 , however , our sparse formulation allows to preserve linear complexity potentially leading to more efficient algorithms .",
    "+ in a side experiment we investigated the effect of our approximation @xmath114 on convergence to a solution .",
    "we implemented a very basic sequential quadratic program ( * ? ? ?",
    "18.1 ) that was using dense operations , meaning it was not exploiting the sparsity structure .",
    "instead we focused on the benefits of the approximation @xmath114 .",
    "although much slower than the sparse interior - point method , our algorithm still converged by an order of magnitude faster than an off - the - shelf sqp method , snopt , @xcite motivating the need for dedicated solvers in robotics .",
    "the kinematic pass optimizes for an unfeasible com lateral motion , which is corrected after the first momentum optimization . in the second iteration of the algorithm ,",
    "the kinematic plan is adapted to realize the com sway .",
    "horizontal angular momentum ( bottom two plots ) is also found to be consistent across kinematic as well as momentum optimization . ]",
    "we construct a stepping scenario for a simulation of our sarcos humanoid robot ( cf .",
    "[ fig : gait_motion ] ) .",
    "the humanoid is to step on stepping stones that increase in height and are angled as illustrated in the figure .",
    "note that here the lipm assumption does not hold , but instead non - coplanar contacts have to be considered together with angular momentum that is required for leg swing motions . in our experiments",
    ", we fix the footstep locations @xmath120 to predefined values for a simpler implementation and compute coherent joint trajectories and force profiles using algorithm [ algo : motion_generation ] .",
    "every @xmath121s contact is broken or created switching from single to double support or vice versa .",
    "our initial guess for the com and momentum @xmath122 is to simply have zero momentum and keep the com centered above the feet .",
    "we introduce weights into the cost function in eq .   giving more importance to footstep locations . in our example , algorithm [ algo : motion_generation ] converges already after 30s for @xmath123 , despite the inefficient implementation and requires only 2 passes to acquire consistent force and joint trajectories .",
    "the first kinematic plan realizes our naive com motion moderately well , which however can not be accomplished given the contact constraints .",
    "thus , the momentum optimization introduce a com sway in lateral direction , which is then realized by the kinematic optimizer in the consecutive iteration as can be seen in fig .  [",
    "fig : plan ] .",
    "additionally , the kinematic plan introduces an arm sway motion after the first pass to compensate for angular momentum introduced by the swing legs .",
    "after the motion generator converges it yields a kinematic plan that is coherent with bounded force and cop profiles ( cf .",
    "[ fig : footprints ] ) . in this example",
    ", we keep the ankle joints fixed and do not account for object collision",
    ". however , collision avoidance can be added inside the kinematic optimization using trajectory optimization techniques @xcite . +",
    "our experiments demonstrate that constrained force profiles and consistent whole - body motion plans can be generated efficiently with the proposed algorithm .",
    "the structure identified in the momentum optimization led to more efficient optimization algorithms .    ]",
    "we presented a contact - centric motion generation algorithm for floating - base robots .",
    "it consists of two sub - problems optimizing for kinematic trajectories and momentum profiles iteratively .",
    "an analysis of the momentum optimization is presented and the relevance for optimal control formulations is discussed . in our experiments ,",
    "we demonstrate the momentum - centric motion generator on a stepping task for a humanoid robot simulation .",
    "indeed , consistent momentum and whole - body motion plans can be acquired efficiently .",
    "further , our experiments show favorable scaling properties of our sparse optimal control formulation ."
  ],
  "abstract_text": [
    "<S> optimal control approaches in combination with trajectory optimization have recently proven to be a promising control strategy for legged robots . </S>",
    "<S> computationally efficient and robust algorithms were derived using simplified models of the contact interaction between robot and environment such as the linear inverted pendulum model ( lipm ) . however , as humanoid robots enter more complex environments , less restrictive models become increasingly important . </S>",
    "<S> as we leave the regime of linear models , we need to build dedicated solvers that can compute interaction forces together with consistent kinematic plans for the whole - body . in this paper </S>",
    "<S> , we address the problem of planning robot motion and interaction forces for legged robots given predefined contact surfaces . </S>",
    "<S> the motion generation process is decomposed into two alternating parts computing force and motion plans in coherence . </S>",
    "<S> we focus on the properties of the momentum computation leading to sparse optimal control formulations to be exploited by a dedicated solver . in our experiments , we demonstrate that our motion generation algorithm computes consistent contact forces and joint trajectories for our humanoid robot . </S>",
    "<S> we also demonstrate the favorable time complexity due to our formulation and composition of the momentum equations . </S>"
  ]
}