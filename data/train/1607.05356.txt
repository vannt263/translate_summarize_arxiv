{
  "article_text": [
    "conventional load testing tools , e.g. , http://jmeter.apache.org[apache jmeter ] and http://www8.hp.com/us/en/software-solutions/loadrunner-load-testing/[hp loadrunner ] , are simulators .",
    "more particularly , they are workload simulators that generate real - life application loads on a representative computing platform .",
    "these simulations are based on the paradigm that a fixed , finite , set of load - generator threads mimic the actions of a finite population of human users who submit requests to the test platform : the system under test ( sut ) . with the advent of web applications , however , this paradigm has shifted because the number of active users on the internet is no longer fixed . at any point in time that number is dynamic and the workload mix is changing .",
    "this stands in stark contrast to the fifty - year old monolithic , time - share , computer paradigm inherent in standard load - testing tools .",
    "many performance engineers are polarized over how best to represent web - users with existing load - test tools .",
    "some believe there is no significant issue , as long the number of load - generators is relatively large with the often set to zero ( see sect .",
    "[ sec : princopsa ] ) , while others who recognize the problem are confused about how to correctly represent web requests  @xcite .",
    "it should be emphasized that this subject is fraught with confusion due to a lack of clear terminology and rigorous methods .",
    "see , e.g. ,  @xcite .",
    "we attempt to correct that in this paper by developing two new web testing principles . as far as we are aware , this is the first time a consistent framework for simulating web - users has been presented in the context of performance engineering .",
    "our starting point is to recognize that typical test workloads and web workloads are very different and therefore need to be formalized very differently .",
    "next , we establish the formal criteria needed to generate web requests .",
    "we then show how to verify the load generators actually produce web - like requests during a test . finally , we present a detailed case study based on our methodology .",
    "the approach is similar to that implemented by at&t bell laboratories to size telephone network components .",
    "there , fundamental queue - theoretic principles  @xcite formed the foundation and measurements were used to confirm it  @xcite .",
    "our approach can be viewed as the historical descendent of the methods first devised one hundred years ago by https://en.wikipedia.org/wiki/agner_krarup_erlang[agner erlang ] to do capacity planning for the telephone network belonging to the copenhagen telephone company : the internet of his day  @xcite .",
    "this paper is organized as follows .",
    "section  [ sec : workloads ] establishes the difference between real web - based users and so - called _ virtual users _ in conventional load - test tools .",
    "section  [ sec : methodology ] presents the first of the principles that define our methodology , viz .",
    ", web testing .",
    "section  [ sec : application ] presents the second of the principles that define our methodology , viz .",
    ", web testing , and demonstrates the application of those two principles to load testing a large - scale website .",
    "section  [ sec : summary ] summarizes our conclusions .",
    "the reader is encouraged to click on technical terms in the text that are linked to definitions in a glossary ( appendix  [ sec : glossary ] ) , particularly because various authors employ many of the same terms differently from us  another potential source of confusion .",
    "to commence from a very broad perspective , the key difference between the workload generated using conventional load - test tools and the workload generated by actual web - based users can be characterized as the difference in the pattern of requests arriving at the sut .",
    "virtual users in a conventional load - testing environments generate a _ synchronous _ arrival pattern , whereas web - based users generate an _ asynchronous _ arrival pattern .",
    "similarly , the queue - theoretic terms , system and system  @xcite , have also been used respectively in this connection  @xcite .",
    "we show how all these terms are related in section  [ sec : methodology ] .",
    "figure  [ fig : lambdas ] is a graphical representation of the difference between synchronous arrivals in a system and asynchronous arrivals in a system . figure  [ fig : lambda - closed ] shows how the average into a typical ( closed ) test system _ decreases _ linearly with the level of because the rate of requests arriving from the load generators depends _ synchronously _ on the queueing state in the sut .",
    "0.4    0.4    figure  [ fig : lambda - closed ] represents the case of a load test system with up to @xmath0 virtual users , each with a mean think time setting of @xmath1 seconds .",
    "the maximum of 100 http gets / second occurs at near - zero concurrency in the sut , i.e. , when there are few active virtual users .",
    "conversely , at maximal load with all @xmath0 virtual users active , the at the sut falls to zero .",
    "the level of in the sut can not be greater than the number of active load generators .",
    "the slope of the load line corresponds to @xmath2 : the mean request rate of each virtual user .",
    "this retrograde effect  higher causes a lower request rate",
    " seems counterintuitive but is easily explained .",
    "the logic in a typical load generation script only allows one outstanding request at a time , i.e. , each virtual user can not issue its next request until the current request has completed and returned a result . in other words , the more outstanding requests",
    "there are in the sut , the fewer new requests can be initiated by the load generators . in this way , the driver - side of the test environment is synchronously coupled to the state of the sut and produces the self - throttling characteristic seen in fig .",
    "[ fig : lambda - closed ] .",
    "we shall revisit this effect in more detail in section  [ sec : methodology ] .",
    "no such self - throttling is possible in a purely asynchronous or system . to understand this difference",
    "consider the standard load test system in fig .",
    "[ fig : lambda - closed ] where the number of active virtual users becomes extremely large ( @xmath3 ) .",
    "this situation is depicted in fig .",
    "[ fig : lambda - open ] with the load progressively increased as @xmath4 virtual users .",
    "notice that the slope of the corresponding load line also decreases ( due to the decreasing value of @xmath2 ) until it would ideally become constant at infinite load : the horizontal dashed line with zero slope in fig .",
    "[ fig : lambda - open ] . in the infinite load limit",
    "there is no dependency between the arrival rate and the level of concurrency in the sut .",
    "the becomes completely asynchronous or decoupled from the state of the sut .",
    "a more detailed explanation is provided in section  [ sec : princopsa ] .",
    "this is most like the situation in real web sites .",
    "requests , such as an http get , arrive into the web server from what appears to be an infinite or indeterminate number of users on the internet .",
    "the only quantities that can be measured directly are the time at which requests arrive into the tcp listen - queue and the number of the requests in each measurement interval .",
    "the arithmetic mean of those samples can then be used to calculate summary statistics , such as the average of requests .",
    "the number of requests residing in the web server is a measure of the level of in the system and is largely independent of the . sect .",
    "[ sec : closed ] contains a more detailed discussion about .",
    "the goal of our methodology is to find a way to reduce synchronization effects in the sut so that requests appear to be generated asynchronously , or nearly so .",
    "put more visually , we want to `` rotate '' the load line in fig .",
    "[ fig : lambda - closed ] counterclockwise until its slope approaches the horizontal line in fig .",
    "[ fig : lambda - open ] .",
    "moreover , we want to achieve that result without necessitating any exotic modifications to the conventional load - test environment .",
    "to give some perspective for our later discussion , we provide a brief overview of other tools that claim to simulate web traffic .",
    "commercial load testing products come with their own inherent constraints for web - scale workloads due to licensing fees being scaled to the number of cloned load generators .",
    "for example , a relatively modest 500 client loadrunner license can cost around $ 100,000  @xcite .",
    "open source jmeter , however , can be extended to more than @xmath5 users by resorting to a jmeter cluster to provide enough driver capacity .",
    "but that approach also comes with its own limitations  @xcite .",
    "jmeter can also be configured to do http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf[distributed testing ] , including on http://stackoverflow.com/questions/16618915/setting-up-jmeter-for-distributed-testing-in-aws-with-connectivity-issues[_amazon web services _ ] .",
    "commercial web - based simulation tools are provided by https://www.soasta.com/solutions/performance-testing/[soasta ] , https://bmp.lightbody.net[browsermob ] , https://www.neustar.biz/services/web-performance/load-testing[neustar ] , and https://loadimpact.com[load impact ] .",
    "some cautionary remarks about these tools are in order",
    ". it can be confusing to understand whether tests are being run in their entirety on a cloud - based platform , like aws ec2 instances or , whether the ec2 instances are being used merely as load generators to drive the web site sut across the internet .",
    "in other words , the performance engineer needs to understand whether the load generators are _ local _ or _ remote _ , relative to the sut .",
    "those questions notwithstanding , none to these approaches would make any difference if the scripts still produce synchronous arrivals as defined in sect .",
    "[ sec : async ] .      in the conventional language of load testing , the load generators represent virtualized human users or _ virtual users _ , for short .",
    "it is these virtual users that provide the test workload .",
    "in fact , virtual users are just a fixed set of process threads that run on separate computational resources that are distinct from the sut . as well as emitting http get  and http post  requests into the sut , virtual - user threads typically incur a parameterized delay between receiving the response to the previous request and issuing the next request . since this delay is intended to represent the time a human user spends `` thinking '' about what to do next , and therefore what kind of request is issued next , it is commonly known as the and is often denoted by @xmath6 in queue - theoretic parlance  @xcite .",
    "the conventional load testing methodology has all the virtual - user threads that belong to a given group perform the same sequence of requests repeatedly for the entire period of each load test .",
    "0.4    0.4    figure  [ fig : frowns ] depicts this fixed virtual - user simulation schematically with each virtual - user thread , represented by a straight face , repeatedly cycling through five phases :    * make a web request into the target sut * wait for and measure the time of the ( with mean time @xmath7 ) * sleep for a ( with mean time @xmath6 ) * wake up and in the os run - queue ( with mean time @xmath8 ) * compute the requested results and return them ( with mean @xmath9 )    the activity of real web users , however , differ significantly from this scenario . figure  [ fig : smiles ] depicts these web users as smiley faces   although figs .  [",
    "fig : frowns ] and  [ fig : smiles ] look similar , the following differences are important to understand .    : :    the dotted box in fig .",
    "[ fig : frowns ] represents a single operating    system instance . in a standard load - test environment",
    ", all the virtual    users share that same operating system .",
    "conversely , the real web - users    in fig .  [ fig : smiles ] have a   face because    each of them runs in their own private operating system . in other    words , the activity of a real user can not be limited by an exhausted    thread pool .",
    "failure to recognize this potential driver - side    constraint is a classic gottcha in load testing scenarios .",
    "see ,    e.g. ,  @xcite and  ( * ? ? ?",
    ": :    each   virtual user generally issues only    one http get  or http post  request at a time .",
    "each     web user , on the other hand , can issue    more than one type of http request to retrieve multiple web objects    that may comprise a complete web page . : :    real web users are not restricted by the closed - loop structure of the    standard test environment in fig .  [ fig : frowns ] . rather ,     web - users can come and go from a much    larger but inactive population of users .",
    "this difference provides a    pivotal insight for our approach .",
    "overall , these distinctions tell us that real web users act like a variable sized set of threads that move in and out of the active thread pool to initiate http requests .",
    "accordingly , we want to find a way to have the fixed virtual users in fig .",
    "[ fig : frowns ] emulate the real web users in fig .",
    "[ fig : smiles ] .",
    "the key insight into producing an asynchronous request pattern with otherwise synchronous load - test tools comes from a comparison of the load - test simulation models with the appropriate queue - theoretic models  @xcite .",
    "queueing metrics best capture the nonlinear relationship between well - known performance metrics .",
    "for our purposes , we only need to undertand two basic types of queues :    open queue : : :    an queueing system involves asynchronous requests where the number of    users generating those requests is unknown .",
    "closed queue : : :    a queueing system involves synchronized requests where the number of    users generating requests is finite and fixed .    the dynamics of these queues differ dramatically and therefore they need to be characterized in completely different ways .",
    "we consider asynchronous request patterns first because they are associated with a simpler queueing structure than synchronous request patterns , which we deal with in sect .",
    "[ sec : closed ] .",
    "the asynchronous workload referred to in section  [ sec : workloads ] is called an system in queueing theory parlance  @xcite .",
    "the term `` open '' is meant to indicate that requests arrive from an unknown number of users existing _ outside _ the queueing facility  indicated by the cloud in fig .  [",
    "fig : mm1 ] , which should be compared with fig .",
    "[ fig : smiles ] .",
    "an queueing center , shown schematically in fig .",
    "[ fig : mm1 ] , is the simplest to characterize with queueing metrics that represent averages or statistical means .",
    "requests arrive from the left at a measurable rate @xmath10 , wait in line for some time , @xmath8 , incur a time , @xmath9 , to get serviced and finally depart the facility . the total time spent in the queueing facility",
    "is given by @xmath11 and is called the .",
    "it is the time spent in the queueing facility from arrival to departure .",
    "@xmath7 can also be regarded as the for a single queue .",
    "this queue can be thought of as a very simple representation of a web site where the arrivals are http get  requests generated by an unknown , and possibly large , number of internet - based users .",
    "some proportion of those users will be actively sending requests to the web site while others are perusing the content resulting from previous web server responses . in queueing theory parlance",
    ", these latter users are said to be in a `` think state . ''",
    "although the actual number of users submitting requests is indeterminate , the _ number of requests resident in the web server _ , @xmath12 , is simply the sum of those requests that are waiting for service ( @xmath13 ) plus those that are already in service ( @xmath14 ) . from eqn .  :",
    "@xmath15 this is one version of little s law  @xcite .",
    "the steady - state can be measured directly with a probe or calculated using the definition  @xcite @xmath16 where @xmath17 is the counted number of arrivals and @xmath18 is measurement period .",
    "the corresponding departure rate is @xmath19 , where @xmath20 a count of the number of completed requests . during any suitably long measurement period , the queue will be in _ steady state _ such that arrivals count will closely match the number of completed requests , i.e. , @xmath21 .",
    "it follows from this that @xmath22 in steady state .",
    "the departure rate is more commonly known as the _ throughput _ and is a system metric that is measured by all load test tools .    in many practical situations , the periods between arriving requests",
    "are found to be exponentially distributed  @xcite .",
    "see also , _",
    "are your data poissonian ? _ in  ( * ? ? ?",
    "3 ) . when the service periods are also exponentially distributed with mean time , @xmath9 , the queue in fig .",
    "[ fig : mm1 ] is denoted m / m/1 , where ` m ' denotes `` memoryless '' ( or markovian , more formally ) .",
    "this memoryless feature is a property of the which , in turn , is associated with a . essentially , it means that history is no guide to the future when the time periods are exponentially distributed .",
    "we will make use of this feature in sect .",
    "[ sec : application ] .",
    "our use of the term _ asynchronous _ also seems particularly appropriate in light of erlang s original development of the m / m / m queue to predict the waiting times at telephone switches . the `",
    "a ' in atm stands for ` asynchronous ' and _ asynchronous transfer mode _ switches form the backbone of the modern internet .",
    "the important point for our discussion is that the explicit relationship between the asynchronous , @xmath10 , and the number of active internet users is unknown .",
    "consequently , there can be an unbounded ( but not infinite ) number of requests in the system , independent of @xmath10 .",
    "( see fig .",
    "[ fig : lambda - open ] )      as noted earlier , virtual users in a standard load - test system through the sut in the sense that no new request can be issued by a virtual user until the currently outstanding request in the sut has been serviced .",
    "this loop structure depicted in fig .",
    "[ fig : frowns ] will now be reflected in a corresponding queueing model .",
    "in contrast to an queue , a queue is actually comprised of two queues connected by the flow of requests and responses circulating between them . for historical reasons in the development of queueing theory , this system is sometimes referred to as the _ central server _ or the _ repairman _ model  @xcite .",
    "the two queues are :    1 .",
    "@xmath23 sources of requests ( _ top queue _ in fig .",
    "[ fig : mm1n ] ) .",
    "these sources correspond to the load - test generators representing virtual users . since each source effectively has its own service center ( shown as   faces corresponding to those in fig .",
    "[ fig : frowns ] ) , no waiting line forms at this queue .",
    "2 .   the system under test ( _ bottom queue _ in fig .",
    "[ fig : mm1n ] ) .",
    "although there are potentially many queueing facilities associated with actual computing resources in the sut , for simplicity and without loss of generality , we show the sut here as a single queue .    since there are no requests arriving from outside this system ( the meaning of `` closed '' ) , the flow in fig .",
    "[ fig : mm1n ] appears as a loop .    for a given load test ,",
    "each of @xmath23 generators executes a script that issues a request into the sut . unlike the queue of sect .",
    "[ sec : open ] , with a potentially unbounded number of requests in the system , there can never be more than @xmath23 requests in the system .",
    "the corresponding queue - theoretic notation is m / m/1/n / n  @xcite . in actual test environments ,",
    "the number of active generators may be restricted by the cost of licensing fees for commercial test tools , and the number of available threads .",
    "( see sections  [ sec : gov ] and  [ sec : pool ] )    the response of the sut is measured in terms of the overall throughput , @xmath24 and , @xmath7 .",
    "when the response is received by the associated generator , it will generally incur a predetermined delay , @xmath6 , before issuing the next request .",
    "this behavior is identical to the perusal time associated with the human users in the queue and is called the .",
    "the average , @xmath6 , is a programmable parameter in the generator script . during test execution",
    ", each script draws a random think - time variate from a known statistical distribution , e.g. , a uniform or exponential distribution having a mean equal to @xmath6 .",
    "a key distinction between an queue and a queue is that there can not be more than one request outstanding from each generator .",
    "this constraint has the consequence that if all @xmath23 generators have issued requests into the sut , there can not be any more arrivals until at least one of those requests has completed service , and also possibly incurred a think delay , @xmath6 .",
    "the effective has fallen to zero !    in this sense , a queue is _ self - throttling _ due to the negative feedback loop in fig .",
    "[ fig : mm1n ] . the more requests in the sut ,",
    "the lower the instantaneous at the sut , and vice versa .",
    "moreover , the mean is no longer constant but must therefore depend functionally on the @xmath23 users .",
    "we present function , @xmath25 in eqn .   of sect .",
    "[ sec : princopsa ] .    the total , @xmath26 , for a request in fig .",
    "[ fig : mm1n ] is the sum of the time spent in the sut and the time spent `` thinking '' in the generator script : @xmath27 when a serviced request returns to its corresponding generator script , the , @xmath6 , can be regarded as a special kind of the service time on the driver side of the test platform ( top queue in fig .",
    "[ fig : mm1n ] ) .",
    "then , @xmath28 represents the total number of generators that are in a think state .",
    "similarly , the total number of requests in the system is given by little s law  @xcite @xmath29 which is the counterpart of eqn .  .",
    "expanding eqn .   produces @xmath30 in steady state , the total number of requests active in the system is the sum of those in the sut , i.e. , @xmath31 , together with those in a think state , @xmath28 , on the generator side of the testing environment .",
    "we will make use of eqn .   to determine the number of real web - users in sect .",
    "[ sec : ausers ] . substituting the expression for @xmath12 from eqn .   into eqn .   shows how the total number of requests in the test system is related to the queue length ( i.e. , requests that are waiting together with requests that are already in service ) on the sut .",
    "@xmath32    equation   provides an opportunity to disambiguate the term `` concurrency '' in the context of a load - test environment ( see e.g. ,  @xcite ) . broadly speaking",
    ", the level of https://en.wikipedia.org/wiki/concurrency_(computer_science)[concurrency ] refers to the number of processes or threads that are _ acting _ simultaneously .",
    "but , like the term _ latency _ , is often too generic to be really helpful for accurate performance analysis .",
    "for example , it could refer to :    1 .",
    "the size of the generator thread - pool 2 .",
    "the number of active threads 3 .   the number of virtual users 4 .",
    "the number of active processes on the sut    this is where our notation is helpful .",
    "we can immediately reduce the options to choosing between @xmath23 and @xmath12 .",
    "the difference between these quantities is the number of processes or threads that are in a think state , viz .",
    ", @xmath28 .",
    "we know that @xmath23 represents the maximal number of users that can possibly generate requests into the sut . in a queueing system , this number is split between the number of outstanding requests , @xmath12 , that are actively residing on the sut and the number of users that are thinking , @xmath28 .",
    "we note that @xcite calls these thinking processes , `` idle '' with respect to the sut in that they will eventually issue requests but have not done so , yet .",
    "clearly , if all the generators were in such an idle state then , @xmath33 and no load would be impressed on the sut .",
    "if we take `` acting '' to mean executing on the computational resources of the sut then , the level of is @xmath12 in eqn .",
    "indeed , @xmath12 is the metric represented on the x - axis in fig .",
    "[ fig : lambdas ] .      rearranging eqn .   and dividing both sides by @xmath6 yields @xmath34 which tells us how the varies as a function of both choice for the user load @xmath23 and the think time @xmath6 setting in a system . for any chosen value of @xmath6 , eqn .   remains a nonlinear function of @xmath23 because the concurrency , @xmath12 , in the sut is a nonlinear function of @xmath23 .",
    "( see fig .",
    "[ fig : nzlimit ] )    the , @xmath35 in eqn .",
    ", forms the basis of the methodology to be presented in the subsequent sections and to illustrate how it contains the performance characteristics of both virtual user and web user workloads , we developed a theoretical model in pdq  @xcite the results of which are shown in table  [ tab : znpdq ] .",
    ".5    .scaled @xmath6 web users [ cols= \" > , > , > , > , > , > \" , ]     rows 17 in table  [ tab : jimfig11 ] correspond to the same seven tests shown in table  [ tab : jimfig8 ] .",
    "some web objects are requested as an aggregate by the browser when a real user performs a web - page query .",
    "see _ heterogeneous requests _ of sect .",
    "[ sec : users ] .",
    "table  [ tab : map ] lists the mapping of web pages to web objects for the web.gov  web site and shows that the home web page and the department web page each contain two web objects . because @xmath36 , as measured by jmeter , is actually the of web objects ( see column 2 of table  [ tab : jimfig11 ] ) , and not web pages , the web - page per web - object ratio needs to be determined . the jmeter script in fig .",
    "[ fig : jimfig7 ] contains 15 web objects .",
    "when these objects are consolidated , the result is @xmath37 web pages .",
    "the measured @xmath38 is multiplied by this 9:15 ratio to convert it into the necessary web - page , @xmath39 .",
    "this pro - rated is used to calculate the average of number of internet web users , @xmath40 , in table  [ tab : jimfig11 ] .",
    "consider the load test data in row 7 of table  [ tab : jimfig11 ] .",
    "the web - objects per second in column 2 comes from row 7 of table  [ tab : jimfig8 ] . applying the 9:15 conversion ratio yields @xmath41 web - pages per second as the request rate in the 5th column .",
    "the measured is 253.38 milliseconds ( column 3 ) . substituting an internet user of @xmath42 milliseconds ( from column 9 ) into eqn .  , we find @xmath43 mean internet web users .    in sect .",
    "[ sec : princopsa ] it was pointed out that @xmath44 is a condition for eqn .   to be a valid approximation to web traffic .",
    "we see that condition reflected as @xmath45 in table  [ tab : jimfig11 ] .",
    "similarly , by virtue of little s law , @xmath46 in eqn .  .",
    "we can also verify that our estimates of @xmath40 and @xmath47 scale in conformance with .",
    "consider test run 1930 ( row 4 of table  [ tab : jimfig11 ] ) for internet user s @xmath48 seconds ( top of columns 711 ) .",
    "applying eqn .",
    ", the expected into web.gov  is @xmath49 all of which are the same constant mean rate and in agreement with the value shown in column 5 .    under different circumstances and test requirements , load tools like those identified in sect .",
    "[ sec : tools ] could be used to validate these estimates . in the meantime",
    ", our methodology provides a low - cost alternative .",
    "figure  [ fig : jimfig12 ] indicates that the web.gov  virtual environment is load balanced and capable of handling 159.16 web http get  or http post  requests per second with all cpus running around 70% busy . viewing the 200 jmeter threads as asynchronous transaction generators , instead of canonical virtual users , shifts the focus of sut load balance and scalability analysis from users to the traffic they produce .",
    "hence , the x - axes of the plots are labelled by transactions per second ( tps ) , not users .",
    "this relabeling is also consistent with the typical units of rate that are used in the context of queueing systems  @xcite .",
    "the plot in the upper - left quadrant of fig .",
    "[ fig : jimfig12 ] contains the mean and 95th percentile of ( as measured by jmeter ) plotted as a function of tps for the seven test runs performed in sect .",
    "[ sec : pool ] .",
    "both response - time curves are relatively flat until test run 2100 , when the hockey - stick handle corresponding to fig .",
    "[ fig : rt - asymptote ] , begins to appear at a mean @xmath7 of 253 milliseconds and an @xmath50 of 1440 milliseconds .",
    "although these levels are larger than baseline , they were considered to be acceptable for this particular application .",
    "the plot in the lower - left quadrant of fig .",
    "[ fig : jimfig12 ] shows network packets received in kb / s , as measured by jmeter .",
    "these values are higher than send - traffic volumes because the data size of the web server responses are almost always larger than http get  or http post  requests .",
    "the plot shows that the approximately 10,000 kb / s network link ( i.e. , 100 mbps packet bandwidth ) is nearly saturated as test run 2100 reaches a throughput of 9,552 kb / s .    the plot in the upper - right quadrant of fig .",
    "[ fig : jimfig12 ] shows cpu utilization as a function of tps for each of the two virtual servers .",
    "the two plots essentially lie on top of each other for all seven tests , indicating a load balanced environment",
    ". moreover , both plots are linear through the 71% cpu busy , achieved at test run 2100 , thus indicating excellent scalability up to that utilization level .    the plot in the lower - right quadrant of fig .",
    "[ fig : jimfig12 ] represents combined sut network packets sent in kb / s . the virtualized servers , gov1 and gov2 ( see fig .",
    "[ fig : jimfig7 ] ) , sent network packets at an aggregate rate of 9,538 kb / sec in test run 2100 on two 10,000 kb / s ( or 100 mbps ) network links .",
    "these data provide a statistical cross - check that packet traffic leaving the sut is the same as the 9552 kb / s received by jmeter .",
    "interactive computing has evolved over the past fifty years from a relatively small number of centralized users issuing commands into a monolithic application via their fixed terminals , to a much larger number of remote users issuing requests into web services via a plethora of personal computing devices .",
    "conventional load - test tools are designed to mimic the former rather than the latter and that creates a problem for performance engineering when it comes to accurately load - testing web applications . in sections  [ sec :",
    "methodology ] and  [ sec : application ] , we presented a methodology to address that problem .",
    "our methodology is based on two fundamental principles .",
    ", in sect .",
    "[ sec : princopsa ] , tells us how to scale the parameters @xmath23 and @xmath6 so that the test environment is optimized for producing requests that mimic the poisson process associated with web - user workloads .",
    ", in sect .",
    "[ sec : princopsb ] , tells us how to confirm that the test parameter settings did actually mimic a poisson process during the course of each test by analyzing the @xmath51 of the measured inter - arrival times . in practice",
    ", the request rate @xmath10 into the sut can be increased in any of three ways :    increase @xmath23 while holding @xmath6 fixed ( see table  [ tab : zconst ] ) ,    decrease @xmath6 while holding @xmath23 fixed ( see table  [ tab : jimfig8 ] ) ,    hold the ratio @xmath52 fixed while increasing @xmath23 ( see table  [ tab : zscaled ] ) .    of these , the third option offers the royal road to emulating web - user traffic .",
    "the development of also extends the work of  @xcite , who analyzed a @xmath53/m/1 queue using an event - based simulator with up to 1024 aggregated iid arrival processes .",
    "the aggregated non - poisson arrivals potentially represent a more realistic queueing model of a web server than the m / m/1 queue discussed in sect .",
    "[ sec : open ] or the m / m/1/n / n queue discussed in sect .",
    "[ sec : closed ] .",
    "however , the simulation suite did not include uniformly distributed inter - arrival times .",
    "consistent with the palm - kintchine theorem in sect .",
    "[ sec : poissonprops ] , @xmath53/m/1 diverges from m / m/1 for server utilizations greater than 50% but , as we have shown using jmeter as a more realistic workload simulator in sect .",
    "[ sec : pool ] , the slowest divergence occurs for aggregated non - poisson arrivals that are uniformly distributed with a low @xmath2 rate .",
    "our results offer a different perspective on the choice of queueing system for modeling asynchronous arrivals . to model",
    "m / m/1 exactly , in a load - test environment , would require significant modification to the generator scripts so that they issue requests randomly in time and are independent of any outstanding requests in the sut . however , as we showed in sect .",
    "[ sec : gov ] , real internet - based web users do actually submit synchronous requests into the website , but the synchronization is relatively weak : precisely as prescribes .",
    "somewhat surprisingly then , m / m/1/n / n with low @xmath2 rate is a better queue - theoretic approximation to real web users than an explicit m / m/1 model , and @xmath54 is consistent with http being a stateless protocol . on the other hand , one might choose to use the less realistic m / m/1 approximation simply because the actual values of @xmath23 and @xmath6 are not known , as in sect .",
    "[ sec : ausers ] .",
    "we applied our methodology to load testing a major web site in section  [ sec : application ] . in practice , as discussed in sect .",
    "[ sec : ausers ] , an estimation of actual @xmath40 internet users  rather than the number of test generators , @xmath23may need to be reported as the performance metric of interest . in sections",
    "[ sec : users ] ,  [ sec : closed ] , and  [ sec : ausers ] , we attempted to clarify the meaning of user- in this context . as a further aid to performance engineers ,",
    "the statistical analysis tools we developed are available https://github.com/drqz/web-generator-toolkit[online ] .",
    "we thank g. beretta , s. keydana , s. parvu and cmg referees for their comments on earlier drafts . all brands and products referenced in this document",
    "are acknowledged to be the trademarks or registered trademarks of their respective holders .",
    "foobarfoo    s. l. albin , `` on poisson approximations for superposition arrival processes in queues , '' _ management sciences _ , vol .",
    "2 , february 1982 .",
    "j. f. brady , `` the rosetta stone of traffic concepts and its load testing implications , '' cmg measureit ,",
    "september 2009 .",
    "j. f. brady , `` when load testing large user population web applications : the devil is in the ( virtual ) user details , '' cmg conference , 2012 .",
    "j. f. brady , `` it s time to retire our 1970 s user demand model for transaction computing and adopt one that reflects modern web user traffic flow , '' cmg conference , 2014 .",
    "d. k. buch , and v. m. pentkovski , `` experience in characterization of typical multi - tier e - business systems using operational analysis , '' proc .",
    "cmg conference , 2001 .",
    "r. b. cooper , _ introduction to queueing theory _",
    ", elsevier science publishing co. , inc . , new york , n.y . ,",
    "( 1984 ) .",
    "yixin diao , j. l. hellerstein and sujay parekh , `` stochastic modeling of lotus notes with a queueing model , '' proc .",
    "cmg conference , 2001 .    a. k. erlang , `` the theory of probabilities and telephone conversations , '' nyt tidsskrift for matematik b , vol 20 , 1909 .",
    "a. k. erlang , `` solution of some problems in the theory of probabilities of significance in automatic telephone exchanges , '' elektrotkeknikeren , vol 13 , 1917 .",
    "m. folaron , http://www.artofsoftwaredevelopment.com/performance/performance-testing-in-the-cloud-with-jmeter-aws[performance testing in the cloud with jmeter & aws ] , 15 august 2015    github repo for coefficient of variation analysis of load - test generator requests , https://github.com/drqz/web-generator-toolkit[web generator toolkit ] , 2016    https://groups.google.com/d/msg/guerrilla-capacity-planning/muhf8eqofvy/odqgxofzvzuj[average session length and workload modelling ] , guerrilla capacity planning ",
    "google group online discussion , june / july , 2014    n. j. gunther , http://perfdynamics.blogspot.com/2010/05/emulating-internet-traffic-in-load.html[emulating web traffic in load tests ] , may 15 , 2010    n. j. gunther , http://perfdynamics.blogspot.com/2010/05/load-testing-think-time-distributions.html[load testing think time distributions ] , may 20 , 2010    n. j. gunther , _ analyzing computer system performance with perl::pdq _ , 2nd edition , springer 2011    n. j. gunther , http://perfdynamics.blogspot.com/2014/07/how-to-remember-poisson-distribution.html[how to remember the poisson distribution ] , july 3 , 2014    n. j. gunther , http://perfdynamics.blogspot.com/2014/07/a-little-triplet.html[a little triplet ] , ( on three versions of little s law ) july 20 , 2014    n. j. gunther , et al . , http://www.perfdynamics.com/tools/pdqcode.html[pdq : pretty damn quick queueing analyzer ] , software package distribution version 6.2.0 , august 2015    r. hashemian , d. krishnamurthy , m. arlitt , `` web workload generation challenges  an empirical investigation , '' _ software : practice and experience _ , vol .",
    "5 , may 2012    w. s. hayward and p. moreland , `` total network data system : theoretical and engineering foundations , '' _ the bell system technical journal _ , volume 62 , number 7 , july 1982 .",
    "s. karlin , h.m .",
    "taylor , _ a first course in stochastic processes _ , academic press inc . , new york , n.y . , 1975 .",
    "l. kleinrock , _ queueing systems , vol . 1 : theory _ , wiley , new york , n.y .",
    ", 1975    ningfang mi , g. casale , l. cherkasova , e. smirni , `` injecting realistic burstiness to a traditional client - server benchmark , '' icac09 , june 1519 , 2009 , barcelona , spain .",
    "quora , https://www.quora.com/what-are-the-best-loadtesting-tools-for-simulating-traffic-load-to-a-web-site[what are the best load testing tools for simulating traffic load to a web site ? ] , jan 16 , 2010    b. schroeder , a. wierman , and m. harchol - balter , `` open versus closed : a cautionary tale , '' http://repository.cmu.edu/cgi/viewcontent.cgi?article=1872&context=compsci[proceedings of the usenix nsdi ( pdf ) ] , networked systems design and implementation , san jose , california , may 810 , 2006    t. warren , http://www1.practicalperformanceanalyst.com/2013/12/23/defining-user-concurrency-a-battle-worth-fighting-for/[defining user concurrency  a battle worth fighting for ? ] and comments , december 23 , 2013 .",
    "figure  [ fig : jimfigappdx ] is a one meter ruler spreadsheet illustration of random arrivals where 200 samples are drawn using the excel rand ( ) function and mapped to millimeter values shown as marks on the ruler .",
    "the spreadsheet lists the first 30 out of the 200 samples drawn as well as contains graphs and statistics for `` marks per interval ( cm ) '' and `` distance between marks ( mm ) . ''",
    "both the `` marks per interval '' and `` distance between marks '' bar charts are accompanied by their theoretical distributions , viz .",
    ", the and .    the spreadsheet columns ( left to right ) contain random numbers along with corresponding ruler mark values , mark per centimeter frequency statistics and associated histogram ordinates .",
    "this information is followed by histogram statistics and ordinate values .",
    "the distance between mark ordinates , histogram , histogram statistics , and ordinates are developed by first sorting the mark values in ascending order and recording the difference between adjacent marks .",
    "an inspection of the one meter ruler reveals 13 one centimeter intervals with 0 marks , @xmath55 , and an analysis of the distance between marks section of the full spreadsheet yields 26 places with 0 millimeters between marks , @xmath56 .",
    "the ` marks per interval ' bar chart on the left below the one meter ruler contains frequency data in yellow and theoretical distribution values in blue yielding a mean = 2.00 cm and var = 2.00 cm . the _ distance between marks",
    "_ bar chart on the right shows a mean = 4.98 mm and an sd = 4.76 mm .",
    "these graphs indicate the mean and variance are equal for `` marks per interval '' and the mean and standard deviation are statistically the same for `` distance between marks '' .",
    "both are properties of a or a random arrivals environment .",
    "the rate @xmath57 where @xmath17 is the * count * of arrivals and @xmath18 is the measurement period .",
    "the same rate is used to parameterize a .    a random sequence of events where the outcome is either a `` success '' or a `` failure '' , e.g. , a head or a tail in the toss of a fair coin .",
    "each coin toss  often called a _ bernoulli trial_is assumed to be a _ statistically _ event in that the resultant head or tail of one toss has no influence or bearing on the outcome of the next toss .",
    "the probability of getting a run of @xmath58 heads , for example , is given by the binomial distribution .",
    "real coins are not fair and real coin tosses are not entirely statistically independent .",
    "a bernoulli process can also be characterized as a sequence of iid inter - arrival intervals .",
    "( see fig .",
    "[ fig : stochprocs ] ) other important stochastic processes are shown in fig .  [",
    "fig : stochprocs ] .        a queueing system with a finite number of requesters .",
    "no additional requests are allowed to enter from outside the system .",
    "queues ) provides an elementary performance model of a load - test system .",
    "since no more than a single request can be outstanding , the limited number of requests come from the finite number of load generators .",
    "this means a closed system is actually comprised of two queues : generators ( with no waiting line ) and a queueing facility ( the system under test ) .",
    "see figs .",
    "[ fig : frowns ] and  [ fig : mm1n ] .",
    "denoted by @xmath51 , it is the ratio of the standard deviation and the mean . for an analytic distribution @xmath70 , where @xmath71 is the standard deviation and @xmath72 is the mean of the distribution . for measurements , of the type performed in this paper , @xmath73 , where @xmath74 is the sample standard deviation and @xmath75 the sample mean",
    ".            1 .",
    "discrete random variable @xmath62 with probability of success @xmath83 $ ] 2 .",
    "pmf @xmath84 where @xmath64 3 .",
    "cdf @xmath85 4 .",
    "mean @xmath86 5 .   variance @xmath87 6 .",
    "standard deviation @xmath88 7 .",
    "coefficient of variation @xmath89    the innocent looking word `` independent '' appears in different guises throughout the literature on probability and statistics ( including this paper ) and has several special meanings . broadly speaking",
    ", it refers to the assumption that there are no correlations between values of the random variable of interest , e.g. , arrival events of a .",
    "the more technical phrase is : random variables are _ iid _ or independently and identically distributed .",
    "for example , the number of arrival events contained in each uniformly spaced bin of fig .",
    "[ fig : poisson - bins ] is assumed to be _ iid _ according to a .",
    "note , it does not mean they are identically distributed , otherwise the numbers in each bin would all be the same .",
    "rather , it means they are distributed with the same ( identical ) probability .",
    "the term _ independent _ is often used as a proxy for the word _ random _ ( which is a much deeper subject ) . another way to think of statistical independence for a",
    "is to imagine that the width of the uniform bins in fig .",
    "[ fig : poisson - bins ] is made smaller and smaller until any bin can contain just a single arrival , at most .",
    "many of these small bins will be empty .",
    "if a bin contains an arrival , that is like a success .",
    "the sequence of randomly occupied time - bins is like the random heads in a sequence of coin tosses , each of which is assumed to be independent .    a queueing system where an unlimited number of requests are allowed to enter from outside the system .",
    "provides an elementary performance model of a web - based http server where `` outside '' refers to the internet .",
    "see figs .",
    "[ fig : smiles ] and  [ fig : mm1 ] .",
    "example open queueing models discussed in this paper include m / m/1 , m / g/1  @xcite and @xmath53/m/1  @xcite .",
    "a stochastic process is a dynamical map in either space or time that is generated by the values of a random variable .",
    "some important stochastic processes are shown in fig .",
    "[ fig : stochprocs ] .",
    "as employed in this paper , a poisson process refers to the generation of random events that are counted in continuous time , @xmath96 .",
    "the counts are commonly referred to as _ arrivals _ and since they accumulate , @xmath96 is an increasing stochastic function of time .",
    "more formally the following three conditions need to be met :        the relationship to the can be seen as follows .",
    "a poisson process creates arrivals at random time - intervals @xmath98 seen as the vertical lines in the top part of fig .",
    "[ fig : poisson - bins ] .",
    "we want to know the distribution of these times @xmath99 .",
    "if there are no arrivals during the interval @xmath100 $ ] , then the first arrival must occurs * after * time @xmath101 , i.e. , @xmath102 otherwise , it would not be the first arrival . from the with @xmath103 and @xmath104 ( i.e. , no event )",
    ", this probability is given by the poisson cdf : @xmath105 the complementary probability , @xmath106 , that an arrival _ did _ occur in @xmath100 $ ] , is then given by @xmath107 which is just the cdf with @xmath76 replaced by @xmath101 .",
    "other key features of a poisson process are discussed in section  [ sec : poissonprops ] .",
    "denoted by @xmath111 , it is the average time spent in the sut together with the average time a virtual user spends thinking before issuing the next request .",
    "it can also be regarded as a special case of .",
    "denoted by @xmath9 , it is the average time spent in service , e.g. , executing on a cpu or core .",
    "when there are repeated visits to the same resource for service , the cumulative time is called the service demand . in the teletraffic context",
    ", @xmath9 is called the _ holding time_. the first queue solved by erlang was m / d/1 because he assumed a constant holding time  @xcite .        denoted by @xmath8 ,",
    "it is the mean time spent in waiting , e.g. , in the scheduler run - queue , prior to receiving service .",
    "the terminology for waiting and queueing if often ambiguous across different but related disciplines , e.g. , queueing theory vs. operating system architectures . in conventional queue - theoretic parlance",
    "@xcite , a queue is comprised of two parts : a service facility , which may contain multiple service resources , e.g. , multiple cores , and a separate waiting line or buffer . in this sense ,",
    "the `` run - queue '' in a scheduler is actually the waiting - line or run - buffer for that are ready to be executed , but not yet executing .",
    "the uniform distribution ( sometimes referred to as a rectangular distribution ) can be defined for either a discrete or a continuous random variable .",
    "the continuous uniform distribution is the most applicable for load generation .    1 .   continuous random variable defined on the real - valued interval @xmath112 $ ] 2 .   pmf @xmath113 for @xmath112 $ ] and zero elsewhere 3 .",
    "cdf @xmath114 for @xmath115 , but zero for @xmath116 and 1 for @xmath117 4 .",
    "mean @xmath118 5 .   variance @xmath119 6 .",
    "standard deviation @xmath120 7 .",
    "coefficient of variation @xmath121"
  ],
  "abstract_text": [
    "<S> conventional load - testing tools are based on a fifty - year old time - share computer paradigm where a finite number of users submit requests and respond in a synchronized fashion . </S>",
    "<S> conversely , modern web traffic is essentially asynchronous and driven by an unknown number of users . </S>",
    "<S> this difference presents a conundrum for testing the performance of modern web applications . </S>",
    "<S> even when the difference is recognized , performance engineers often introduce modifications to their test scripts based on folklore or hearsay published in various internet fora , much of which can lead to wrong results . </S>",
    "<S> we present a coherent methodology , based on two fundamental principles , for emulating web traffic using a standard load - test environment .    </S>",
    "<S> = 1 </S>"
  ]
}