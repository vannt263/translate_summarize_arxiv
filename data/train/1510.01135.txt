{
  "article_text": [
    "computing systems may be composed of reliable and efficient _ components _ , but reliability of the overall _ system _ comes at the cost of large inefficiencies due to over - engineering . in embedded computing applications , such as avionics , engineers are constantly seeking to reduce the size , weight and power of the systems , which results in significant savings in energy , cost , maintenance and improved safety . in traditional data centres , for example ,",
    "a server can draw 7090% of its maximum power when it is not doing any work .",
    "information and communication technologies ( ict ) were responsible for producing at least 7% of worldwide electricity consumption in 2008 and this figure is expected to rise to more than 14% by 2020  @xcite . though the gesi smarter  2020 report  @xcite claims that ict - enabled solutions has the potential to reduce greenhouse gas emissions by 16.5% in 2020 , there is clearly a need for computing systems to reduce their own contribution to these emissions .    what is lacking , however , is a complete theory that allows engineers to understand how various components interact with each other and what effect this has on the overall system behaviour . by building on recent results from control theory and mathematical optimization , disciplines where _ feedback",
    "_ enables engineers to design robust and efficient systems , it is possible to design computing systems that can be one or more orders of magnitude more energy efficient , cheaper , faster , smaller and reliable than today .",
    "every computing system today employs _ feedback _ in some form or other to guarantee a certain level of performance and reliability in the presence of _ uncertainty _ , such as unpredictable work - loads , computational and communication delays , data losses and component failures .",
    "problems that require feedback algorithms arise in a variety of contexts in computing systems  @xcite :    * data , tasks and resources ( such as processors , storage and communication networks ) need to be managed to achieve a certain quality of service , guarantee that computations are correct and ensure that tasks are completed before deadlines .",
    "* minimization of power consumption and overheating protection by dynamic voltage and frequency scaling and smart scheduling of jobs .",
    "* estimating the workload and available resources , as well as the status and completion rate of jobs . * guaranteeing resilience of the system in the presence of faults and cyber attacks .",
    "figure  [ fig : feedback ] shows the key components of a typical feedback - based computing system .",
    "unknowns , such as future workloads and data losses , act on the system .",
    "it is often possible to measure key variables , such as power consumption , duration of a computation or resource utilisation .",
    "the feedback algorithm might use these measurements to update a model of the computing system to correct for errors in the estimates of the measurements .",
    "if the actual behaviour of the system is different from the desired behaviour , the feedback algorithm updates the values of certain manipulated variables , such as the processor clock frequency or memory allocation , until the behaviour is as desired or the estimates are sufficiently accurate .",
    "computing systems present a number of significant challenges that stretch the theory and practice of modeling , control and optimization well beyond what is possible with the state of the art :    * time - scales at which the dynamics evolve range from pico - seconds to hours and even days . in some applications",
    "the speed of a feedback algorithm is not important and in others absolutely critical .",
    "* power consumption can range from tens of mw to less than a pw .",
    "the power consumed by the feedback algorithm itself may therefore have to be minimized . * the cost of a system can range from a few cents to billions of euros",
    ". the silicon area and cost of implementing a feedback algorithm may therefore be absolutely critical to the application .",
    "* the same system may have to execute a variety of tasks with mixed criticalities .",
    "some tasks or units are not allowed to miss their deadline or fail , whereas delays and data losses are acceptable in others .",
    "* demands by an application on the speed or resources can vary by orders of magnitude in a single run .",
    "uncertainty models based only on the worst - case or average - case may therefore not be practical . * the number of computing units that may interact with each other and the number of tasks may vary from one to billions or more .",
    "feedback algorithms therefore need to be scalable .",
    "* processing units can all be located on one chip or spread across the world .",
    "feedback algorithms therefore might have to be implemented in a decentralized manner , while guaranteeing correct overall system behavior .",
    "* computing systems have hybrid dynamics .",
    "methodologies are needed that can cope with the interaction between discrete dynamics on the computation side , e.g.  logic and discrete states or events , and continuous dynamics on the physical side , e.g.  heat dissipation or energy usage .",
    "* first - principles modeling of computing systems is still very much in its infancy .",
    "a mixture of new first - principles and data - driven modeling methodologies needs to be developed .",
    "it is often the case that embedded computing systems are mobile and/or part of a sensor network .",
    "typical examples include : ( i )  automotive electronics or avionics systems , ( ii )  mapping of traffic or pollution in a city , ( iii )  automated manufacturing , farming or warehousing , or ( iv )  uavs flying in formation to reduce air drag , fighting forest fires or performing remote earth sensing tasks .    in these applications there is often a need for individual nodes to cooperate towards satisfying high level tasks , which require a significant amount of computation power . consider the fire fighting scenario , for example .",
    "the system has to use a numerical model of the fire dynamics to predict how the fire will develop , solve an optimization problem to determine where and when to send each uav and fire fighting unit , as well as perform local control of each uav . because of the unpredictable environmental conditions , the system should be fault tolerant and be able to do the simulation , data processing , coordination and planning by itself in real - time , by combining the processing power of each node in the network , rather than sending all the data to a central high performance computing facility .",
    "mobile computing systems and sensor networks present many of the challenges to modeling and control mentioned above , with the addition that the quality and structure of the communication network varies with time , hence the topology of the computation network has to change .",
    "if the nodes are mobile , then the position and propulsion energy also have to be integrated when determining how best to control the computation , communication and data storage .",
    "the main point to note here is that the computing system often interacts with the physical world and/or vice versa in real - time .",
    "traditional methods for the control of computing systems do not always explicitly acknowledge or take advantage of this fact .",
    "it therefore makes sense to consider the modeling and control of the combined cyber - physical system , rather than treating the computing system as separate from the physical system .",
    "one of the reasons why computing systems are over - engineered is because feedback algorithms in computing systems are usually designed in an ad hoc manner without systematic use of methods from the rich body of control theory , the science of feedback in dynamical systems .",
    "this is often also not helped by there being some slight , but important , differences in terminology between the computing and control communities . in computing ,",
    "the terms ` dynamic ' or ` static ' are used where a control engineer would have insisted on using ` feedback / closed - loop ' or ` open - loop ' , respectively . in control",
    "theory , feedback algorithms can be dynamic or static . sometimes ` dynamic ' or ` static ' are used in the computing literature when , respectively , ` open - loop time - varying ' or ` open - loop constant ' would have been consistent with the control theory literature . a control engineer would usually agree that a computer engineer s ` feedback scheduler ' is a feedback algorithm .",
    "a number of academic and industrial research groups have reported significant improvements in the response times , quality of service , reliability , energy and resource usage of computing systems by systematically implementing control - theoretic feedback algorithms in the design of their computing and software systems  @xcite .",
    "research in this area is still very much at an early stage .",
    "many existing techniques for the control of computing systems are mostly based on control theory that was state of the art in the 1980s .",
    "controller design techniques that have been implemented range from classical pid control to robust control using @xmath0 and lqg design .    over the last two decades , however , there have been major developments in modeling for control  @xcite and optimization - based control , often also called model predictive control  @xcite .",
    "it should be possible to introduce a step change in the design of computing systems by building on recent advances in control and optimization in order to develop :    1 .   _ modeling techniques that capture dynamics critical to feedback algorithm design . _ within the computing community , _ open - loop _",
    "models are used to assess the quality of a model before designing feedback algorithms , followed with extensive closed - loop simulations and many design iterations before implementation  @xcite .",
    "it might be productive to take a different , more sophisticated approach developed in the control community , and use ideas similar to the _ gap metric _",
    "@xcite for determining whether two systems are similar in _ closed - loop_. 2 .",
    "_ real - time optimization - based scheduling algorithms . _",
    "scheduling problems are most naturally posed as constraint satisfaction or mathematical optimization problems  @xcite , but they have traditionally not been solved using numerical optimization methods  @xcite .",
    "optimization methods could instead be used to solve scheduling problems in real - time by building on recent , computationally efficient real - time model predictive control methods  @xcite .",
    "it should also be possible to use recent results from cooperative model predictive control  @xcite to develop scheduling algorithms that enable distributed , multi - processor computing systems to cooperate in meeting overall system specifications .",
    "this paper discusses the above two topics in detail . whereas the main focus of this paper is on computing systems , many of the points raised below are equally valid for control design in other application areas , such as transport , buildings , manufacturing , energy and healthcare .",
    "the implementation of control - theoretic methods to computing system design has largely been hindered by the difficulty in obtaining sufficiently accurate dynamical models  @xcite .",
    "this gap can be bridged by bringing state of the art modelling techniques from the control theory literature to the computing community .",
    "likewise , computing systems present unique challenges that will require new modeling techniques and associated numerical methods to be developed by the control and optimization communities .",
    "when designing a feedback algorithm , it is important to remember that a good open - loop model is not necessarily a good model for feedback algorithm design .",
    "likewise , a good model for feedback design is not necessarily a good open - loop model .",
    "the two plots on the left of figure  [ fig : closedandopen ]        show that a good open - loop model is not sufficient for feedback design .",
    "the systems have similar open - loop responses , but different closed - loop responses .",
    "this is because the controller amplifies the effect of differences in open - loop dynamics , resulting in an unstable closed - loop for one system .",
    "equally surprising , the two plots on the right of figure  [ fig : closedandopen ] show that systems can have very different open - loop responses ( one system is open - loop stable and the other is open - loop unstable ) , but virtually indistinguishable closed - loop responses .",
    "feedback therefore allows one to tolerate large uncertainties in certain cases ( the right in figure  [ fig : closedandopen ] ) , without any significant difference in closed - loop performance .",
    "however , in other cases it is critical to capture the dynamics where a poorly designed feedback algorithm could make matters worse ( the left in figure  [ fig : closedandopen ] ) .",
    "a good understanding of control theory , coupled with appropriate model development , is therefore necessary to avoid designing computing systems that are over - engineered , as is the case today .",
    "the above example partly explains why it has been difficult to use existing models from the computing systems literature when designing feedback algorithms .",
    "queuing theory has been very successful in modeling the steady - state behavior of computing systems and networks , but has not yet been so successful in modeling the transient behavior  @xcite .",
    "nonlinear fluid models have been widely used in modeling for network congestion control , but have not been so successful in the modeling of computing systems , because workloads have complicated characteristics , architectures are multi - tiered and the nature of the limiting resource changes with time  @xcite . uncertainties in computing systems and networks are usually modeled as additive process noise , but this structure does not allow a stable and an unstable model to be compared .",
    "likewise , parametric uncertainties can not be used to model differences in the model order or time delays , especially if the delays change with time or are state - dependent .",
    "it should be possible to extend a very sophisticated concept , developed in the control community , to the modeling of computing systems . instead of using open - loop metrics , one could use the _ gap metric _ for determining whether two systems are similar in _ closed - loop _",
    "loosely speaking , the gap from one system to another is the size of the smallest dynamical system that needs to be connected ( defined in an appropriate sense ) to the first system in order for the input - output responses of both systems to be the same . if two systems have a small gap between them and the same feedback algorithm is used , then it is possible to guarantee that the robustness and performance of the two closed - loop systems will be similar , as in the right half of figure  [ fig : closedandopen ] .",
    "if the gap between two systems are large , but the open - loop responses are similar , then it is possible that the closed - loop systems will behave very differently , as in the left half of figure  [ fig : closedandopen ] .",
    "the gap metric allows one to account for dynamic and parametric uncertainty , additive disturbances as well as unstructured uncertainty , which greatly reduces the difficulty of modelling the uncertainty and hence the design of a feedback algorithm .",
    "it is also possible to account for uncertainty in the number of unstable modes or system zeros , which impose fundamental performance limitations on the design of feedback algorithms .",
    "it will therefore be of interest to investigate whether the gap metric can be used to develop and validate first - principles and data - driven models for computing systems .",
    "this research could therefore bring about a fundamental change in the way that computing systems are modeled and feedback algorithms are designed .      as a first step",
    ", it will be useful to revisit first - principles methods currently used in modeling computing systems , such as queuing theory and linearized fluid flow models , but armed with the gap metric and associated control design tools .",
    "these methods could be used to analyze the robustness of existing modeling approaches and the fundamental limitations for controller design .",
    "however , it might be necessary to extend both the state of the art in modeling computing systems as well as develop techniques that are new to the control community .    recent research on the control of infinite - dimensional systems  @xcite has shown that , compared to using open - loop metrics , careful use of the gap metric allows one to : ( i ) shorten the design phase , ( ii ) synthesize feedback algorithms that are computationally less demanding and ( iii ) have stronger guarantees on the robustness and performance of the closed - loop system .",
    "one way in which the ideas in  @xcite could potentially be applied in the control of computing systems is to approximate time delays , which are infinite - dimensional systems , with finite - dimensional input - output models and use the gap metric to provide guarantees on the closed - loop behavior .",
    "the use of pad approximations to model time delays is a standard technique in control engineering , but does not yet seem to have found widespread use in the computing community .",
    "the gap metric can also allow one to provide robustness guarantees on the closed - loop behavior if the delay is uncertain  @xcite .",
    "an important aspect to consider in the modeling of computing systems , where research is in its early stages , is how the _ physics _ of computing systems should be incorporated into models .",
    "it is often important to consider the power consumption , heat dissipation and dynamics of the cooling system . as discussed in section  [ sec : mobile_sensors ] , in many cases the nodes in a distributed computing system are mobile and the physical environment could affect the performance of the network . due to the interaction between sub - systems with discrete states , events , logic and sub - systems with continuous states and dynamics ,",
    "computing systems are therefore best modeled as cyber - physical systems using techniques from _ hybrid dynamical systems theory _",
    "@xcite .",
    "a major open question that has to be addressed is whether nonlinear gap metric ideas  @xcite can be extended to certain types of hybrid systems , while allowing one to compute bounds on the gap between two systems .",
    "furthermore , even if the model is linear , the optimal control policy is nonlinear , in general . as a consequence ,",
    "there is considerable scope for extending nonlinear gap metric results for the analysis and design of model predictive controllers .",
    "because of the lack of first principles models , researchers in computing systems often apply well - established , open - loop stochastic system identification methods  @xcite to develop models from input - output data , with some success  @xcite . as a starting point for future research , it would be of interest to compare the methods currently used in the computing systems literature against recently developed methods for model validation , identification and parameter estimation of linear , nonlinear and hybrid systems  @xcite .    however , as discussed above , it is critical to bear in mind that closed - loop measures should be used when validating or identifying models for feedback algorithm design .",
    "gap metric ideas can also be used if input - output data is available to validate a given model  @xcite or to compute a model directly from data using system identification methods  @xcite .",
    "given some data , a model can be interpreted as sufficiently accurate if the data is consistent with what one would have measured if a small dynamical system is connected ( defined in an appropriate sense ) to the model .",
    "there are no published results on how closed - loop metrics can be used for model validation and identification of computing systems .",
    "research in this area could therefore enable the development of more appropriate models and feedback algorithms , with better performance and robustness guarantees than methods based on open - loop measures .",
    "due to the complicated nature of the dynamics , large size and high speed of computing systems , state of the art optimization methods will be inadequate for solving many of the new model validation , identification and parameter estimation problems that will arise .",
    "hence , novel and more efficient numerical methods will have to be developed that allow one to ( in)validate , ( un)falsify or identify a feedback - oriented model , ideally in real - time .",
    "because time does not stop , an approximate answer today can be better than an accurate answer tomorrow .",
    "computing systems employ feedback algorithms to cope with uncertainty , but the system is in open - loop while the computation is being carried out .",
    "hence , it might be better to implement a simple , computationally efficient algorithm at a fast rate than a sophisticated algorithm at a slow rate .",
    "consider a simple example , illustrated in figure  [ fig : suboptimal ] .",
    "suppose you have a large number of jobs that need to be completed , a large number of heterogeneous processors to do the computations and two scheduling algorithms .",
    "algorithm  o is the ` optimal ' algorithm , which is guaranteed to find the global minimum , and algorithm  s is the ` sub - optimal ' one , which is not guaranteed to find the global minimum or even a local minimum .",
    "algorithm  o takes 3 seconds to compute a schedule , but algorithm  s only takes 1 second .",
    "suppose there is no mismatch between the speeds of the processors and those assumed by the algorithms .",
    "at the first scheduling event , at time @xmath1s , both algorithms start to compute a schedule and algorithm  s terminates after 1s with a schedule that will take 4s from start to finish , i.e.  all jobs will be completed by @xmath2s . however , algorithm  o terminates after 3s with a schedule that will take 3s from start to finish , i.e.  all jobs will be completed by @xmath3s . in this case , ` sub - optimal ' algorithm  s is better than ` optimal ' algorithm  o , because algorithm  s gets all the jobs done before algorithm  o ! algorithm  o needs to take less than 2s to compute a solution in order to be better than algorithm  s.    the difference can be even greater if there are mismatches between the speeds of some of the processors and those assumed by the algorithms , as is also shown in figure  [ fig : suboptimal ] .",
    "suppose that the processors are faster than assumed and that it takes 50% less time for jobs to complete than those predicted according to the original schedules , i.e.   the schedule computed by algorithm  s completes all jobs by @xmath4s , which is when algorithm  o has just completed its computation ( the difference between completion times is also larger ) .",
    "consider the opposite case in which processors are much slower than assumed so that the original schedules take 50% longer than predicted . however , suppose now that the job completion rate of each processor is fed back every  1s .",
    "algorithm  s can detect this information at @xmath5s and implement a new schedule at , say , @xmath6s ( there are fewer uncompleted jobs , hence it takes less time to compute a schedule ) .",
    "it is therefore possible that algorithm  s can use the updated completion rates to find a new schedule that will get all remaining jobs completed by @xmath3s .",
    "however , algorithm  o would detect the actual job completion rates at @xmath7s and might only be able to implement a new schedule for the remaining jobs from , say , @xmath8s , which is after the schedule computed by algorithm  s would have completed .",
    "this example demonsrtated that a scheduling algorithm should ideally take into account the time it takes to compute a schedule _ and _ that feedback helps reduce the effect of incorrect assumptions .",
    "most algorithms and abstractions in computing do not explicitly take the passage of time into account .",
    "real - time operating systems are arguably not as real - time as they should be .",
    "computing not only takes time , but needs time  @xcite .",
    "data , tasks , processors , networking and storage need to be scheduled to meet deadlines and achieve a certain quality of service , while minimising energy usage .",
    "scheduling problems are most naturally posed as constraint satisfaction or mathematical optimization problems . furthermore , many well - known scheduling algorithms are feedback algorithms .",
    "scheduling problems are perfect candidates for combining solutions from control and optimization theory .",
    "because the resulting optimization problems can be computationally intractable , scheduling problems have historically not been solved using numerical optimization methods . instead , computing researchers have developed a range of computationally efficient or heuristic strategies , which are usually expressed as simple sets of rules . in the hard real - time scheduling literature ,",
    "an algorithm is often defined to be optimal if the algorithm can schedule all task - sets that can be scheduled by any other algorithm . under very specific and often conservative assumptions on the task - sets and computer architecture ,",
    "it can be shown that certain well - known classical scheduling algorithms , such as earliest deadline first or rate monotonic , are optimal in this sense .",
    "there also exists a vast array of sub - optimal scheduling algorithms and in some cases one can compute limits on the level of sub - optimality .",
    "in many applications it makes sense to relax some hard timing constraints and replace them with soft timing constraints , where the aim is to minimize the violations .",
    "for example , in video conferencing the difference between worst - case and average bandwidth requirements can be more than one order of magnitude  ( * ? ? ?",
    ". a user might be willing to tolerate an occasional delay or data loss , or the processor frequency could be reduced to save on power requirements .",
    "hence , if one were to use existing hard real - time scheduling algorithms , then the computing system might be over - engineered by most measures , such as cost , energy or speed .",
    "there is therefore significant scope for improving system performance measured according to criteria other than hard time deadlines .",
    "research could therefore be devoted to developing new methodologies to solve practical scheduling problems for which the very restrictive conditions on the task - sets and architectures , currently assumed in the classical real - time scheduling literature , can be relaxed .",
    "there have been dramatic improvements in numerical optimization methods over the last few decades .",
    "the last few years have therefore seen a sharp increase in the use of numerical optimization methods for solving scheduling problems , mainly driven by the need to minimize energy usage in data centers and energy - limited computing devices  @xcite .",
    "however , much of the literature either ( i )  focuses on steady - state optimization , hence ignoring transients , ( ii )  uses open - loop dynamic models , ( iii )  do not explicitly account for the time taken to solve the scheduling problem , ( iv )  do not consider the effect of terminating the optimization solver before a solution has been found , or ( v )  only consider hard time constraints .",
    "there is a clear need to develop new scheduling algorithms and abstractions that explicitly address the passage of time .",
    "this can be done by incorporating into the algorithm a time - based dynamical model of the system and uncertainties , regularly updating the algorithm with the current state of the resources and completion rates , and implementing the best available solution when further computations are not guaranteed to improve the closed - loop system performance or robustness .",
    "it is therefore possible to take a different approach to most scheduling methods and build on recent research in efficient real - time algorithms  @xcite and computer architectures  @xcite for optimization - based control . a dynamical model of the system",
    "can be used to formulate an optimization problem , which is updated at each sample instant with the latest measurements and solved using numerical optimization methods before implementing the first part of the solution .",
    "this process is then repeated at all sample instances .",
    "however , the key idea in real - time model predictive control algorithms is that one does _ not _ iterate till the algorithm has converged , but that the algorithm is allowed to terminate at _ any time _ with a potentially sub - optimal solution .    at each scheduling event",
    ", the optimization solver can be initialized with a version of the policy obtained at the previous event that is time - shifted , as in receding horizon control , or truncated , as in decreasing horizon control .",
    "using similar arguments as in the real - time predictive control literature one should be able to construct optimization - based schedulers that will converge to a locally optimal solution after a few scheduling events , provided feedback occurs at a sufficiently fast rate . in order to take advantage of any existing and future results in the real - time scheduling literature",
    ", one can also choose to initialize the optimization solver with the policy that one would get from implementing any other rule - based or heuristic scheduling algorithm .",
    "an anytime approach requires significantly less computational resources than iterating till an optimal solution has been found .",
    "real - time model predictive control can allow one to implement sub - optimal solutions at a fast rate with similar or better closed - loop performance , coupled with a significant reduction in computational requirements , compared to implementing optimal solutions at a slow rate .",
    "provided the right algorithms and computer architectures are used , optimization - based controllers can be implemented for very fast systems with sample rates in the mhz  @xcite range , and has is sufficiently efficient for controlling the speed and power dissipation of microprocessors  @xcite .",
    "it is clearly time for real - time model predictive control of computing systems .      in many computing systems today",
    "each processing unit functions in a non - cooperative , decentralised manner .",
    "though this has allowed for the massive expansion of the internet , this approach is not always ideal or necessary .",
    "many high performance and embedded computing systems have custom - designed architectures and operating systems that allow the processing units to share information and resources in an effective and reliable manner . on the other hand , it is also not always sensible to have a purely centralised approach either , since expansion is difficult and the system can be more vulnerable to faults and attacks . a compromise between a fully centralised and fully decentralised",
    "approach is a cooperative distributed design , where computing units share information and resources with a common goal .",
    "most well - known scheduling algorithms are applicable to uni - processor systems only and research on multi - processor and distributed architectures is still very much in its infancy  @xcite .",
    "there is therefore a need for research on scalable , hard and soft real - time scheduling algorithms for distributed computing systems .    over the last decade",
    "there has been an explosion of activity in the control community in the area of distributed control of networks of dynamical systems .",
    "this activity has resulted in the development of scalable , real - time optimization - based control methods tailored to cooperative distributed systems  @xcite .",
    "these methods could , in principle , be applied to develop scalable scheduling algorithms that enable distributed , multi - processor computing systems to cooperate in meeting overall system performance and reliability specifications .",
    "an open problem is how best one could develop tractable methods for obtaining low - order models of physically distributed computing systems .",
    "the problem with most model reduction methods  @xcite is that they require a high - order model .",
    "the gap - metric based approach in @xcite is fundamentally different and does not require a high - order model , hence is computationally more efficient , while still providing guarantees on the robustness and performance of the closed - loop system .",
    "by gradually increasing the model complexity , convergence of the model sequence happens faster with closed - loop metrics than with open - loop metrics .",
    "another advantage is that the resulting model retains the structure and sparsity of the original .",
    "this structure can be exploited by numerical algorithms for design and implementation , whereas most model reduction methods destroy structure and sparsity .",
    "it might therefore be possible to use gap metric ideas to produce scalable , distributed models and account for the effect of communication faults and delays , changes in the structure of the communication and computation networks , as well as variability in resources .",
    "as illustrated in figure  [ fig : suboptimal ] , the computational resources used by an algorithm has to be sufficiently small .",
    "most off - the - shelf optimization solvers are not able to exploit the special structure that is present in scheduling problems .",
    "therefore , tailor - made methods have to be developed that are better than the state of the art by exploiting any structure that is present in the scheduling problem .",
    "the structure can be exploited by formulating the scheduling problem as a multistage optimization problem , as is done in optimization - based control  @xcite , and solving this efficiently with the aid of sparse linear algebra .",
    "efficient mixed - integer optimization algorithms for optimal control of systems with integer decision variables  @xcite could be explored in this context .",
    "it might also be possible to derive conditions under which the scheduling problem can be formulated as a convex and tractable optimization problem , e.g.  in  @xcite conditions are derived under which the optimal control of max - plus - linear discrete event systems can be formulated as a computationally tractable linear program .    in many scheduling problems , it is natural to introduce integer variables and solve a mixed - integer program . in some cases it might be better to model the problem as a continuous optimization problem without integer variables .",
    "for example , suppose there is a large number of jobs that can be grouped into a relatively small number of subsets . and that there is a relatively small number of identical processors .",
    "the decision variables in the optimization solver can include the fraction of jobs from each subset that are allocated to a percentage of a processor s time , as in deadline partitioning techniques  @xcite .",
    "this results in smaller and ` nicer ' optimization problems than using binary variables to assign jobs to processors .",
    "another question is how best to incorporate deterministic and stochastic uncertainties into the formulation of the optimization problem .",
    "robust optimization methods  @xcite might then be used to efficiently solve scheduling problems subject to uncertainties .",
    "one of the main ideas that can be explored is how to formulate the scheduling problem as an optimal control problem where the optimization is over feedback policies  @xcite , rather than open - loop input sequences . in some cases it might be best to use parametric programming  @xcite techniques to compute an explicit solution to the optimization problem .",
    "the scheduling algorithm can then be implemented as a lookup table , similar to the way classical scheduling algorithms are implemented as a set of rules , but with guarantees of optimality and with more flexibility in the nature of the assumptions on the task - sets and architectures .",
    "the disadvantage is that often the size of the look - up table blows up for large problem sizes .",
    "parametric programming might therefore be best suited to small - scale computing systems , such as multi - core processors  @xcite .",
    "many optimization methods can not be terminated at any time with a guarantee that sub - optimal iterates will reduce the cost , satisfy all constraints or guarantee closed - loop stability or robustness .",
    "possible solutions that one could investigate including adding constraints or modifying the cost function to enforce cost reduction , constraint satisfaction and closed - loop stability  @xcite .",
    "the modified algorithm might take longer to converge , but can be terminated at any time with an improved strategy , with better closed - loop performance and robustness .",
    "finally , one should consider what effect the architecture of the computing system has on the computational requirements .",
    "field programmable gate arrays ( fpgas ) and graphical processing units ( gpus ) can also be used to explore the use of parallelism and custom number representations to reduce the computational requirements .",
    "can the architecture be designed to allow for the development of better scheduling algorithms ?",
    "there is tremendous opportunity for control and optimization to make a big impact in the area of computing systems . by combining gap metric ideas with real - time model predictive control methods to design new scheduling algorithms",
    ", one might be able to design computing systems that are at least one order of magnitude faster , cheaper , more energy efficient and more reliable , compared to using state of the art open - loop models and classical real - time scheduling algorithms .",
    "because of the range in complexity , size and speed of computing systems , there is also a vast array of problems that will challenge control and optimization theory . by solving some of these problems , new methods will result that can also be applied outside the computing domain , e.g.  in power , manufacturing , transport and healthcare , where similar control and optimization problems arise ."
  ],
  "abstract_text": [
    "<S> the performance , reliability , cost , size and energy usage of computing systems can be improved by one or more orders of magnitude by the systematic use of modern control and optimization methods . </S>",
    "<S> computing systems rely on the use of feedback algorithms to schedule tasks , data and resources , but the models that are used to design these algorithms are validated using open - loop metrics . by using closed - loop metrics instead , such as the gap metric developed in the control community , it should be possible to develop improved scheduling algorithms and computing systems that have not been over - engineered . </S>",
    "<S> furthermore , scheduling problems are most naturally formulated as constraint satisfaction or mathematical optimization problems , but these are seldom implemented using state of the art numerical methods , nor do they explicitly take into account the fact that the scheduling problem itself takes time to solve . </S>",
    "<S> this paper makes the case that recent results in real - time model predictive control , where optimization problems are solved in order to control a process that evolves in time , are likely to form the basis of scheduling algorithms of the future . </S>",
    "<S> we therefore outline some of the research problems and opportunities that could arise by explicitly considering feedback and time when designing optimal scheduling algorithms for computing systems .    </S>",
    "<S> optimal control , scheduling , real - time systems , computing systems , sensor networks , network programming , communication networks , distributed computing </S>"
  ]
}