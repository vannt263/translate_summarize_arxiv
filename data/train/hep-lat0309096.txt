{
  "article_text": [
    "continued advances in commodity processing and networking hardware make pc ( or workstation ) clusters a very attractive alternative for lattice qcd calculations @xcite . indeed , there are quite a few important problems that can be addressed on pc clusters , and many lattice physicists are taking advantage of this opportunity .",
    "however , for the most demanding problems in lattice qcd , e.g.  dynamical fermion simulations with realistic quark masses , one would like to distribute the global volume over as many nodes as possible , resulting in a very small local volume per node .",
    "pc clusters are inadequate to deal with this case because the communications latency inherent in their networking hardware implies that the local volume must not be chosen too small if a reasonable sustained performance is to be achieved . in other words , for typical lattice qcd problems",
    "pc clusters do not scale well beyond a few hundred nodes .    in custom - designed supercomputers such as qcdoc @xcite and apenext @xcite",
    ", the communications hardware is designed to reduce the latencies and to assist critical operations ( such as global sums ) in hardware . as a result , these machines are significantly more scalable and allow for much smaller local volumes .",
    "in addition , they provide low power consumption , a small footprint , and a very low price / performance ratio per sustained mflops . on the downside ,",
    "the development effort is considerably higher than for pc clusters , but this effort is amortized by the unique strengths of these machines .",
    "the qcdoc hardware has been described in detail in several previous publications , see refs .",
    "@xcite , therefore we only summarize its most important features here .    the qcdoc asic , shown schematically in fig .",
    "[ fig : asic ] , was developed in collaboration with ibm research and manufactured by ibm .",
    "it contains a standard powerpc 440 core running at 500 mhz , a 64-bit , 1 gflops fpu , 4 mbytes of embedded memory ( edram ) , and a serial communications interface ( scu ) which has been tailored to the particular requirements of lattice qcd .",
    "the scu provides direct memory access , single - bit error detection with automatic resend , and a low - latency pass - through mode for global sums . also on the chip",
    "are several bus systems , controllers for embedded and external ( ddr ) memory , an ethernet controller , a bootable ethernet - jtag interface , and several auxiliary devices ( interrupt controller , i@xmath0c interface , etc . ) . a picture of one of the first asics , delivered in june of 2003 , is shown in fig .",
    "[ fig : asic_closeup ] .",
    "the physical design of a large machine is as follows .",
    "two asics are mounted on a daughterboard , together with two standard ddr memory modules ( one per asic ) with a capacity of up to 2 gbytes each .",
    "the only other nontrivial components on the daughterboard , apart from a few leds , are four physical layer chips for the mii interfaces ( two per asic ) and a 4:1 ethernet repeater which provides a single 100 mbit / s ethernet connection off the daughterboard . a picture of the very first two - node daughterboard is shown in fig .",
    "[ fig : db ] .",
    "[ fig : db ]        a motherboards holds 32 such daughterboards , eight motherboards are mounted in a crate , and a large machine is built from the desired number of crates . a picture of a qcdoc motherboard is shown in fig .",
    "[ fig : mb ] .",
    "the physics communications network of qcdoc is a 6-dimensional torus with nearest - neighbor connections .",
    "the two extra dimensions allow for machine partitioning in software so that recabling is not required .",
    "a 64-node motherboard has a @xmath1 topology , with three open dimensions and three dimensions closed on the motherboard ( one of which is closed on the daughterboard ) .",
    "the scu links run at 500 mbit / s and provide separate send and receive interfaces to the forward and backward neighbors in each dimension , resulting in a total bandwidth of 12 gbit / s per asic ( of which 8 gbit / s will be utilized in a 4-dimensional physics calculation ) .",
    "in addition to the physics network , there is an ethernet based network for booting , i / o , and debugging , as well as a global tree network for three independent interrupts . the ethernet traffic from / to each motherboard proceeds at 800 mbit / s to a commercial gbit - ethernet switch tree , a parallel disk system , and the host machine .",
    "the latter will be a standard unix smp machine with multiple gbit - ethernet cards .",
    "see fig .",
    "[ fig : network ] .",
    "as of the writing of this article ( september 2003 ) , all major subsystems of the qcdoc asic have been tested in single - daughterboard configurations ( 2 asics per daughterboard ) using a temporary test - jig .",
    "this configuration allows non - trivial communications between the two asics in one of the six dimensions ; for the remaining dimensions the asic communicates with itself in a loop - back mode . extensive memory tests with different sized commodity external ddr sdram modules have been done , tests of the 4 mbyte on - chip edram have been performed , and all the dma units have been used .",
    "high - performance dirac kernels have been run for wilson and asqtad fermion formulations , confirming the performance figures given in table  [ tab : performance ] and ref .",
    "no problems with the asic have been found to date .    with qcdoc motherboards now in hand for use ( fig .",
    "[ fig : mb ] ) , tests of 64 and 128 node machines are imminent . in our test - jig tests ,",
    "the asics appear to be working well close to the target frequency of 500 mhz . with a fully populated motherboard , and the more stable electrical environment provided by the motherboard as compared to our simple test - jigs",
    ", we will soon be able to test a large number of asics at the 500 mhz design frequency . from preliminary measurements ,",
    "the power consumption per node is about 5 w.",
    "one of the major goals of the development team was to make qcdoc accessible and deployable to a large scientific community , so every attempt has been made to allow users to use standard software tools and techniques . in order to reliably boot ,",
    "monitor and diagnose the 10,000 + nodes in a large qcdoc machine , and to allow user code maximum access to the high - performance capabilities of the hardware , we are writing a custom operating system for qcdoc .",
    "this is modeled on the qcdsp operating system , which has successfully allowed the use of a machine with a similar number of processing nodes .",
    "the qcdoc operating system ( qos ) has been improved in myriad ways , continuing to focus on ease - of - use for the end - user .",
    "we now give a more detailed list of the requirements of the operating system and discuss how these features have been implemented .",
    "in addition to booting the machine , the qos must diagnose hardware errors and monitor the hardware during user program execution .",
    "monitoring is accomplished by regular inspection of on - chip registers which monitor memory and communication link status , along with interrupt handlers which are invoked by changes in hardware state deemed crucial . after booting ,",
    "partitions of the machine may be requested for interactive use by a user or the queuing system .",
    "each partition will only run a single user program at a time ; all multitasking will be handled by the host front - end . during program execution ,",
    "the operating system provides host - qcdoc input / output access using commodity ethernet connections , access to special qcdoc features such as the mesh communication network and on - chip memory and access from qcdoc processing nodes to a parallel disk array .",
    "the qos is designed to coordinate the interactions between the host and qcdoc , insulating the user from many qcdoc - specific details while still providing detailed control over their execution environment .",
    "our solution is qos , written largely from scratch in c++ , c and some assembler .",
    "the software runs on the host computer and the qcdoc nodes and consists of several parts , namely :    * the qdaemon on the host , which manages and monitors the entire qcdoc machine .",
    "all interactions go through the qdaemon .",
    "* the qclient layer on the host , which provides access to the qdaemon for a variety of planned user interfaces , such as the batch system and web applications , as well as the existing command line interface , the qcsh . * the qcsh on the host , a modified version of tcsh , which is currently in use and allows complete control and use of qcdoc .",
    "* the boot / run kernels on each node .",
    "the qdaemon is the heart of the operating system , and it is designed and implemented using modern c++ techniques , e.g.  it is heavily templated , it employs posix threads to allow efficient use of a multi - processor front end , its queue calls and object lists are thread - safe , and it can drive multiple physical network interfaces .",
    "the single qdaemon on the host uses reliable udp to transport packets between qcdoc and the host , starting with basic udp packets in the boot procedure and adding an rpc protocol to this when the run kernels are loaded .",
    "the qdaemon controls the ip addressing scheme to the nodes , does the partitioning that users request , monitors machine status , directs i / o to the host and evokes hardware testing when needed .",
    "the qdaemon can be accessed by a ",
    "root \" user for system management and monitoring , but most users will only have access to a limited set of qdaemon s capabilities , those appropriate for the partition where they are running a job .",
    "the qdaemon also provides flexible software partitioning of qcdoc .",
    "the qclient is a library of interfaces which communicates with the qdaemon and can accept input from a variety of planned user tools . to access the qclient , and hence the qdaemon , access to the host computer must be gained by conventional authentication tools such as ssh or a secure web connection .",
    "currently , a command - line interface , the qcsh , communicates with the qdaemon via the qclient library .    following the successful qcdsp model ,",
    "qcsh is a command - line interface . starting from a standard unix shell , tcsh ,",
    "extra built - in commands to control qcdoc have been added .",
    "users can use normal shell redirection to control i / o from qcdoc , programs can be executed on qcdoc and backgrounded in qcsh allowing further interaction between the qcsh and qdaemon ( but not qcdoc directly since it is executing a program ) , and standard shell scripts can be used .",
    "the special qcdoc commands in the qcsh all begin with the letter q. some examples are : qinit - establish a connection between the qcsh and the qdaemon ; qpartition_create - create a partition of qcdoc ; qboot - boot a qcdoc partition ; qrun - run a user program ; qhelp - display available qcommands .",
    "the qdaemon will only permit connections from the local host , which allows a unix socket to be passed to the qdaemon from a user interface like the qcsh .",
    "the qdaemon then does user i / o from / to this unix socket and can determine unix user and group identities directly from the host os kernel .",
    "this is a major simplification .",
    "while the qdaemon will be handling many users access to qcdoc , it does not have to open / close files and concern itself with protections .",
    "this is handled by the initial user interface , thereby ensuring correct ownership and permissions .",
    "the first software loaded to a qcdoc node is the boot kernel , which is loaded directly to the data and instruction caches of the 440 core via the ethernet - jtag hardware .",
    "only the 440 core must be functional for the boot kernel to execute .",
    "when execution begins , tests of the on - chip and ddr memory can be done .",
    "once the memory is known to be working , the boot kernel enables the standard 100 mbit ethernet port on the qcdoc asic and the run kernel is loaded down .",
    "the run kernel handles the activation of machine - global features such as the nearest - neighbor communications network .",
    "when these steps complete , which should be on the scale of ten minutes even for a large machine , it is available for general use . all of the steps outlined above are implemented and have been extensively used on our first asics .",
    "the run kernel provides support for users , including access to qcdoc features via system calls .",
    "part of the strategy for using rpc for the host  run - kernel communication is to avoid having a separate communications protocol for disk access .",
    "we have written an nfs client for the run kernel that uses the standard rpc - based nfs protocol .",
    "the client supports two mount points and open / read / write / close functionality .",
    "this nfs support has already been tested on qcdoc .",
    "while providing a standard user environment for high - performance computing , the run - kernel will not support multi - tasking .",
    "we have chosen to keep the run - kernel lean and compact to ensure reliability and to keep the software task bounded .      a major issue for a massively parallel computer is the effectiveness of its message passing .",
    "in hardware , qcdoc is a nearest - neighbor mesh , the majority of qcd based communications are also nearest - neighbor and consequently qos natively supports nearest - neighbor communications calls .",
    "the qos calls are implemented so as not to interfere with the low latency of the qcdoc communications hardware .",
    "the qcdoc hardware supports efficient global sums ( done via our pass - through hardware ) , which are also accessible via qos calls .",
    "we have also implemented the scidac lattice qcd software committee s qcd message passing ( qmp ) protocol on qcdoc .",
    "this protocol supports nearest - neighbor communications , which we efficiently map to the native qos communications calls , as well as arbitrary communications . for the latter , we will implement a manhattan - style routing .",
    "a simple ( but not trivial ) consequence of qcdoc using a standard processor from ibm s powerpc line is the availability of a whole arsenal of open source and commercial software tools , most notably the gnu tools and ibm s tools .",
    "on qcdoc , users will be able to use the gnu toolset , the closest thing to a standard across computer platforms .",
    "additionally , we have access to the high - performance commercial tools from ibm , such as the xlc / xlc compilers which we have seen outperform the gnu compilers on powerpc platforms by as much as a factor of two .",
    "we expect that users may do initial code development with the gnu toolset and only compile with the more restrictively - licensed ibm compilers when final performance is an issue .",
    "an issue for the larger potential user group for qcdoc is performance of existing physics codes , not written for a qcdoc or qcdsp type of computer architecture .",
    "the milc code was an obvious choice to test , since it is one of the major lattice simulation codes and is written in c. the milc code has been run on qcdoc , both the simulator and now the actual asic , concentrating on the asqtad action .",
    "unmodified milc code gives performance in the few percent range for small lattice volumes , which was easily improved by a few standard c - code modifications as described in @xcite .",
    "a summary of the performance for single precision milc code and our double precision assembly code is given in table [ tab : performance ] .",
    "l|c|c|c action & vol . & assem . &",
    "milc + wilson & @xmath2 & 47% + & @xmath3 & 54% + clover & @xmath2 & 56% + & @xmath3 & 59% + staggered & @xmath2 & 36% & 17% + & @xmath3 & & 21% + asqtad & @xmath4 & 43% & 15% + af & @xmath2 & & 14% + & @xmath3 & & 20% +    [ tab : performance ]",
    "a 128-node prototype machine is currently being assembled at columbia . assuming that no major problems are found , two machines of 10 tflops ( peak ) each will be available to ukqcd and the riken - bnl research center by the summer of 2004 .",
    "the operating system and user software needed to utilize these machines is progressing in hand with the hardware developments .",
    "approval is pending for a 3 tflops ( peak ) machine at columbia and a @xmath5 20 tflops ( peak ) installation at bnl for the u.s .",
    "lattice community .",
    "* acknowledgments .",
    "* this work was supported in part by the u.s .",
    "department of energy , the institute of physical and chemical research ( riken ) of japan , and the u.k .",
    "particle physics and astronomy research council ."
  ],
  "abstract_text": [
    "<S> qcdoc is a massively parallel supercomputer whose processing nodes are based on an application - specific integrated circuit ( asic ) . </S>",
    "<S> this asic was custom - designed so that crucial lattice qcd kernels achieve an overall sustained performance of 50% on machines with several 10,000 nodes . </S>",
    "<S> this strong scalability , together with low power consumption and a price / performance ratio of $ 1 per sustained mflops , enable qcdoc to attack the most demanding lattice qcd problems . </S>",
    "<S> the first asics became available in june of 2003 , and the testing performed so far has shown all systems functioning according to specification . </S>",
    "<S> we review the hardware and software status of qcdoc and present performance figures obtained in real hardware as well as in simulation . </S>"
  ]
}