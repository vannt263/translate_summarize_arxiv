{
  "article_text": [
    "consider the following 2-player cooperative game : two players toss a coin with each player seeing the outcome of the coin toss of the other player ( but not their own ) .",
    "then , they simultaneously guess the outcome of their own coin toss .",
    "the players win the game if they both guess correctly .",
    "of course , if they both guess at random , then the probability of winning is @xmath0 .",
    "it turns out that the players can use the extra information they have in order to improve the probability of success .",
    "for example , if they agree beforehand to follow the strategy ` guess what you see ' then the probability of success increases to @xmath1 .",
    "we can generalise this game ( see section [ sec : definitions ] ) to guessing games with multiple players in which each player sees the outcome of the coin tosses ( or more generally of many - sided dice throws ) of other players , according to an underlying digraph .",
    "these guessing games @xcite emerged from studying network coding problems @xcite where the network is multiple unicast , i.e.  where each sender has precisely one corresponding receiver who wishes to obtain the sender s message , and a constrain that only one message can be sent through each channel at a time .",
    "a multiple unicast can be represented by a directed acyclic graph with @xmath2 inputs / outputs and @xmath3 intermediate nodes . by merging the vertices which represent the senders with their corresponding receiver vertices we can create an auxiliary directed graph which has the nice property that there is no longer any distinction between router , sender , or receiver vertices .",
    "due to the way guessing games are defined , coding functions on the original network can be translated into strategies for the guessing game on the auxiliary graph and vice versa .",
    "the performance of the optimal strategy for a guessing game is measured by the guessing number which we will define precisely in section [ sec : definitions ] .",
    "one of the first applications of guessing games was the disproval in @xcite of two conjectures raised by valiant @xcite in circuit complexity in which he asked about the optimal boolean circuit for a boolean function . in this paper",
    "we provide a counterexample to a conjecture of christofides and markstrm given in which states that the optimal strategy for the guessing game of an undirected graph is based on the fractional clique cover number of the graph .",
    "( see section [ sec : definitions ] for more details . ) additionally , we will show that the guessing number for undirected graphs can not be determined by considering only the shannon information inequalities as explained in section [ sec : entropy ] .",
    "we will also make and investigate the superman conjecture which suggests that the ( asymptotic ) guessing number of an undirected graph does not increase when a directed edge is added .",
    "finally we will provide a possible example of a directed graph whose guessing number changes when its edges are reversed .",
    "the outline of our paper is as follows . in section [ sec : definitions ] we introduce the formal language of guessing games . section [ sec : asymptotic ] is concerned with the asymptotic behaviour of guessing numbers . in section",
    "[ sec : fractionalcliquecover ] we formally define the fractional clique cover strategy from which provides a feasible computational method for calculating lower bounds of guessing numbers for undirected graphs . in section [ sec : entropy ] we introduce a method for calculating upper bounds of guessing numbers by making use of entropic arguments .",
    "our main results appear in section [ sec : main ] .",
    "we then discuss some of the technical details of the computer searches we carried out in section [ sec : speed ] .",
    "we conclude with some open problems in section [ sec : problems ] .",
    "a _ directed graph _ , or _",
    "digraph _ for short , is a pair @xmath4 , where @xmath5 is the set of _ vertices _ of @xmath6 and @xmath7 is a set of ordered pairs of vertices of @xmath6 called the _ directed edges _ of @xmath6 . given a directed edge @xmath8 , which we also denote by @xmath9 , we call @xmath10 the _ tail _ and @xmath11 the _ head _ of @xmath12 and say that @xmath12 goes from @xmath10 to @xmath11 .    for the purposes of guessing games we will assume throughout that our digraphs are loopless , i.e.  they contain no edges of the form @xmath13 for @xmath14 . once we define the guessing game it will be easily seen that the probability of winning on a digraph @xmath6 is equal to the probability of winning on the subgraph of @xmath6 obtained by removing all vertices with loops .    given a digraph @xmath6 and a vertex @xmath15 , the _ in - neighbourhood _ of @xmath11 is @xmath16 and the _ out - neighbourhood _ of @xmath11 is @xmath17 .    in this paper",
    "our main results will primarily be on _ undirected graphs _ which are naturally treated as a special type of digraph @xmath6 where @xmath18 if and only if @xmath19 .",
    "we call the pair of directed edges @xmath9 and @xmath20 , the _ undirected edge _ @xmath9",
    ". a major role in our guessing strategies will be played by _ cliques _",
    "i.e.  subgraphs in which every pair of vertices are joined by an undirected edge .    given a digraph @xmath6 and an integer @xmath21 , the _ @xmath22-uniform blowup of @xmath6 _ which we will write as @xmath23 is a digraph formed by replacing each vertex @xmath11 in @xmath6 with a class of @xmath22 vertices @xmath24 with @xmath25 if and only if @xmath26 .    a _ guessing game _",
    "@xmath27 is a game played on a digraph @xmath6 and the alphabet @xmath28 .",
    "there are @xmath29 players working as a team .",
    "each player corresponds to one of the vertices of the digraph . throughout the article",
    "we will be freely speaking about the player @xmath11 instead of the player corresponding to the vertex @xmath30 .",
    "the players know the digraph @xmath6 , the natural number @xmath31 , and are told to which of the vertices they correspond to",
    ". they may discuss and agree upon a strategy using this information before the game begins , but no communication between players is allowed after the game starts .",
    "once the game begins , each player @xmath15 is assigned a value @xmath32 from @xmath33 uniformly and independently at random .",
    "the players do not have access to their own values but can see some of the values assigned to the other players according to the digraph @xmath6 . to be more precise , once the values have been assigned each player is given a list of the players in its in - neighbourhood with their corresponding values",
    ". using just this information each player must guess their own value .",
    "if all players guess correctly they will all win , but if just one player guesses incorrectly they will all lose .",
    "the objective of the players is to maximise their probability of winning .    as an example we consider the guessing game @xmath34 , where @xmath35 is the _ complete ( undirected ) graph _ of order @xmath2 , i.e.  @xmath36 and @xmath37 .",
    "naively we may think that since each player receives no information about their own value that each player may as well guess randomly , meaning that the probability they win is @xmath38 .",
    "this however is not optimal .",
    "certainly the probability that any given player guesses correctly is @xmath39 , but riis @xcite noticed that by discussing their strategies beforehand the players can in fact coordinate the moments where they guess correctly , and therefore increase their chance of winning .",
    "for example before the game begins they can agree that they will all play under the assumption that @xmath40 player @xmath10 can see all the values except its own , and assuming ( [ eq : kn_constraint ] ) is true it knows that @xmath41 consequently player @xmath10 will guess that its value is @xmath42 . hence if ( [ eq : kn_constraint ] ) is true every player will guess correctly and if ( [ eq : kn_constraint ] ) is false every player will guess incorrectly .",
    "so the probability they all guess correctly is simply the probability that ( [ eq : kn_constraint ] ) is true which is @xmath39 .",
    "this is clearly optimal as , irrespective of the strategy , the probability that a single player guesses correctly is @xmath39 and so we can not hope to do better .",
    "we note that the optimal strategy given in the example was a _ pure strategy _",
    "i.e.  there is no randomness involved in the guess each player makes given the values it sees .",
    "the alternative is a _ mixed strategy _ in which the players randomly choose a strategy to play from a set of pure strategies .",
    "the winning probability of the mixed strategy is the average of the winning probabilities of the pure strategies weighted according to the probabilities that they are chosen .",
    "this however is at most the maximum of the winning probabilities of the pure strategies , and so we gain no advantage by playing a mixed strategy . as such throughout this paper we will only ever consider pure strategies .    given a guessing game @xmath27 , for @xmath15 a _",
    "strategy for player @xmath11 _ is formally a function @xmath43 which maps the values of the in - neighbours of @xmath11 to an elements of @xmath33 , which will be the guess of @xmath11 .",
    "a _ strategy _",
    "@xmath44 for a guessing game is a sequence of such functions @xmath45 where @xmath46 is a strategy for player @xmath11 .",
    "we denote by @xmath47 the event that all the players guess correctly when playing @xmath27 with strategy @xmath44 .",
    "the players objective is to find a strategy @xmath44 that maximises @xmath48 $ ] .    rather than trying to find @xmath49 $ ] we will instead work with the _ guessing number _ @xmath50 which we define as @xmath51\\right).\\ ] ] although this looks like a cumbersome property to work with we can think of it as a measure of how much better the optimal strategy is over the strategy of just making random guesses , as @xmath52 = \\frac{s^{\\operatorname{gn}(g , s)}}{s^{|v(g)|}}.\\ ] ] later we will look at information entropy inequalities as a way of analyzing the guessing game and in this context the definition of the guessing number will appear more natural .",
    "note that the guessing number of the example @xmath34 we discussed earlier is represented by @xmath53 which does not depend on @xmath31 .",
    "in general @xmath50 will depend on @xmath31 and it is often extremely difficult to determine the guessing number exactly . consequently we will instead concentrate our efforts on evaluating the _ asymptotic guessing number _ @xmath54 which we define to be the limit of @xmath50 as @xmath31 tends to infinity . to prove the limit exists we first need to consider the guessing number on the blowup of @xmath6 .",
    "[ lem : blowupineq ] given a digraph @xmath6 , and integers @xmath55 , @xmath56 \\geq \\left(\\max_{\\mc{f}}\\mb{p}[\\operatorname{win}(g , s,\\mc{f})]\\right)^t\\ ] ] or equivalently @xmath57 .",
    "the digraph @xmath23 can be split into @xmath22 vertex disjoint copies of @xmath6 .",
    "we can construct a strategy for @xmath58 by playing the optimal strategy of @xmath27 on each of the @xmath22 copies of @xmath6 in @xmath23 .",
    "the result follows immediately .",
    "[ lem : blowupequal ] given a digraph @xmath6 , and integers @xmath55 , @xmath56 = \\max_{\\mc{f}}\\mb{p}[\\operatorname{win}(g , s^t,\\mc{f})]\\ ] ] or equivalently @xmath59 .",
    "first we will show that the optimal probability of winning on @xmath60 is at least that of @xmath58 .",
    "this follows simply from the fact that the members of the alphabet of size @xmath61 , can be represented as @xmath22 digit numbers in base @xmath31 .",
    "hence given a strategy on @xmath58 , a corresponding strategy can be played on @xmath60 by each player pretending to be @xmath22 players : more precisely , if player @xmath11 gets assigned value @xmath62 , he writes it as @xmath63 in base @xmath31 and pretends to be @xmath22 players , say @xmath64 , where player @xmath65 , for @xmath66 , gets assigned value @xmath67 . furthermore ,",
    "if player @xmath11 sees the outcome of player @xmath10 , then he can construct the values assigned to the new players @xmath68 .",
    "so these new fictitious players can play the @xmath58 game using an optimal strategy .",
    "but if the fictitious players can win the @xmath58 game then the original players can win the @xmath60 game as we can reconstruct the value of @xmath69 from the values of @xmath70 .    a similar argument",
    "can be used to show that the optimal probability of winning on @xmath60 is at most that of @xmath58 .",
    "we will show that for every strategy on @xmath60 there is a corresponding strategy on @xmath58 .",
    "every vertex class of @xmath22 players can simulate playing as one fictitious player by its members agreeing to use the same strategy .",
    "the @xmath22 values assigned to the players in the vertex class can be combined to give an overall value for the vertex class . the strategy on @xmath60",
    "can then be played allowing the members of the vertex class to make a guess for the overall value assigned to the vertex class .",
    "this guess will be the same for each member as they all agreed to use the same strategy and have access to precisely the same information .",
    "once the guess for the vertex class is made its value can be decomposed into @xmath22 values from @xmath33 which can be used as the individual guesses for each of its members .    using these results about blowups of digraphs",
    "we can show that in some sense the guessing number is almost monotonically increasing with respect to the size of the alphabet .",
    "[ lem : monotonic ] given any digraph @xmath6 , positive integer @xmath31 , and real number @xmath71 , there exists @xmath72 such that for all integers @xmath73 @xmath74    we will prove the result by showing that @xmath75 holds for all @xmath76",
    ". this will be sufficient since as @xmath22 increases the right hand side of ( [ eq : almostinclog ] ) tends to @xmath50",
    ".    we will prove ( [ eq : almostinclog ] ) by constructing a strategy for @xmath77 .",
    "let @xmath78 and note that @xmath79 is at most @xmath22 . by considering only strategies",
    "in which every player is restricted to guess a value in @xmath80 we get @xmath81 \\geq \\mb{p}[a_v < s^k \\mbox { for all } v\\in v(g)]\\max_{\\mc{f}}\\mb{p}[\\operatorname{win}(g , s^k,\\mc{f})].\\ ] ] hence @xmath82 which rearranges to @xmath83 from lemmas [ lem : blowupineq ] and [ lem : blowupequal ] we can show @xmath84 which together with ( [ eq : almostincreasing ] ) completes the proof of ( [ eq : almostinclog ] ) .    for any digraph @xmath6 , @xmath85 exists .    by definition @xmath86 for all @xmath31 , and @xmath87 is an increasing sequence with respect to @xmath2 , therefore its limit exists which we will call @xmath88 . since @xmath89 for all",
    "@xmath31 it will be enough to show that @xmath50 converges to @xmath88 from below .    by the definition of @xmath88 , given @xmath71 there exists @xmath90 such that @xmath91 .",
    "from lemma [ lem : monotonic ] we know that there exists @xmath92 such that for all @xmath93 , @xmath94 which implies @xmath95 proving we have convergence .",
    "before we move on to the next section it is worth mentioning that for any @xmath31 the guessing number @xmath50 is a lower bound for @xmath54 .",
    "this follows immediately from lemma [ lem : monotonic ] .",
    "furthermore for any strategy @xmath44 on @xmath27 we have @xmath96.\\ ] ] consequently we can lower bound the asymptotic guessing number by considering any strategy on any alphabet size .",
    "in this section we will describe a strategy specifically for undirected graphs .",
    "as shown in the previous section this can be used to provide a lower bound for the asymptotic guessing number .",
    "christofides and markstrm conjectured that this bound always equals the asymptotic guessing number .    in section [ sec : definitions ] we saw that when an undirected graph is complete an optimal strategy is for each player to play assuming the sum of all the values is congruent to @xmath97 ( where @xmath31 is the alphabet size ) .",
    "we call this the _ complete graph strategy_. we can generalise this strategy to undirected graphs which are not complete .",
    "we simply decompose the undirected graph into vertex disjoint cliques and then let the players play the complete graph strategy on each of the cliques .",
    "if we are playing on an alphabet of size @xmath31 and we decompose the graph into @xmath22 cliques , then on each clique the probability of winning is @xmath98 and so the probability of winning the guessing game , which is equal to the probability of winning in each of the cliques , is @xmath99 .",
    "clearly the probability of winning is higher if we choose to decompose the graph into as few cliques as possible .",
    "the smallest number of cliques that we can decompose a graph into is called the _ minimum clique cover number _ of @xmath6 and we will represent it by @xmath100 . in this notation",
    "we have @xmath101 it is worth mentioning that finding the minimum clique cover number of a graph is equivalent to finding the chromatic number of the graph s complement . as such it is difficult to determine this number in the sense that the computation of the chromatic number of a graph is an np - complete problem @xcite .",
    "we can improve this bound further by considering blowups of @xmath6 . from lemma [",
    "lem : blowupequal ] we know that @xmath102 , hence by the clique cover strategy on @xmath23 we get a lower bound of @xmath103 .",
    "the question is now to determine @xmath104 .",
    "we do this by looking at the fractional clique cover of @xmath6 .",
    "let @xmath105 be the set of all cliques in @xmath6 , and let @xmath106 be the set of all cliques containing vertex @xmath11 .",
    "a _ fractional clique cover _ of @xmath6 is a weighting @xmath107 $ ] such that for all @xmath15 @xmath108 the minimum value of @xmath109 over all choices of fractional clique covers @xmath110 is known as _",
    "the fractional clique cover number _ which we will denote by @xmath111 .",
    "( although we do not define it here , we point out that the fractional clique cover number of a graph is equal to the fractional chromatic number of its complement . )    for the purposes of guessing game strategies it will be more convenient to instead consider a special type of fractional clique cover called the regular fractional clique cover .",
    "regular fractional clique cover _ of @xmath6 is a weighting @xmath107 $ ] such that for all @xmath15 @xmath112 the minimum value of @xmath109 over all choices of regular fractional clique covers @xmath110 can be shown to be equal to the fractional clique cover number @xmath111 . to see this ,",
    "observe firstly that since all regular fractional clique covers are fractional clique covers the minimum value of @xmath109 over all choices of regular fractional clique covers @xmath110 is at least @xmath111 . finally , to show it is at most @xmath111 we simply observe that the optimal fractional clique cover can be made into a regular fractional cover by moving weights from larger cliques to smaller cliques . in particular , given a vertex @xmath11 for which @xmath113 we pick a clique @xmath114 with @xmath115 and proceed as follows : we change the weight of @xmath116 from @xmath117 to @xmath118 we also change the weight of the clique @xmath119 from @xmath120 to @xmath121 .",
    "we leave the weight of all other vertices the same . in this way",
    ", the total sum of weights over all cliques remains the same , the total sum of weights over all cliques containing a given vertex @xmath122 also remains the same , but the total sum of weights over all cliques containing @xmath11 is reduced .",
    "this process has to terminate because whenever we change the weight of @xmath116 it will either become equal to @xmath123 or the total sum of weight of all cliques containing @xmath11 will become equal to @xmath124 .",
    "clearly @xmath111 and an optimal regular fractional clique cover @xmath110 can be determined by linear programming . since all the coefficients of the constraints and objective function",
    "are integers , @xmath125 will be rational for all @xmath126 as will @xmath111 .",
    "if we let @xmath127 be the common denominator of all the weights , then @xmath128 for @xmath126 describes a clique cover of @xmath129 .",
    "in particular it decomposes @xmath129 into @xmath130 cliques , proving a lower bound of @xmath131 we claim that @xmath132 and therefore we can not hope to use regular fractional clique cover strategies to improve . to prove our claim we begin by observing that for all @xmath22 we have @xmath133 .",
    "this is immediate as a minimal clique cover is a special type of fractional clique cover , namely one where all weights are @xmath123 or @xmath124 .",
    "hence it is enough to show that @xmath134 this can be proved simply from observing that an optimal weighting of @xmath135 can always be transformed into another optimal weighting which is symmetric with respect to vertices in the same vertex class .",
    "this can be done just by moving the weights between cliques .",
    "therefore determining @xmath136 is equivalent to determining @xmath111 but with the constraints @xmath137 rather than @xmath124 .",
    "the result @xmath138 is a simple consequence of this .    a useful bound on @xmath111 which we will make use of later is given by the following lemma .",
    "[ lem : boundonfractionalclique ] for any undirected graph @xmath6 @xmath139 where @xmath140 is the number of vertices in a maximum clique in @xmath6 .",
    "let @xmath110 be an optimal regular fractional clique cover .",
    "since @xmath141 holds for all @xmath15 , summing both sides over @xmath11 gives us , @xmath142 where @xmath143 is the number of vertices in clique @xmath144 .",
    "the result trivially follows from observing @xmath145    the result of christofides and markstrm states the following :    [ thm : lowerboundineq ] if @xmath6 is an undirected graph then @xmath146    in it was proved that the above lower bound is actually an equality for various families of undirected graphs including perfect graphs , odd cycles and complements of odd cycles .",
    "this led christofides and markstrm to conjecture that we always have equality .",
    "[ conj : lowerboundsharp ] if @xmath6 is an undirected graph then @xmath147    to prove or disprove such a claim we require a way of upper bounding @xmath54 .",
    "this is the purpose of the next section .",
    "recall that it is sufficient to only consider pure strategies on guessing games . hence given a strategy @xmath44 on a guessing game",
    "@xmath27 we can explicitly determine @xmath148 the set of all assignment tuples @xmath149 that result in the players winning given they are playing strategy @xmath44 . in this context",
    "the players objective is to choose a strategy that maximizes @xmath150 .",
    "we have @xmath151\\right)\\\\ & = |v(g)| + \\max_{\\mc{f}}\\log_s \\frac{|\\mc{s}(\\mc{f})|}{s^{|v(g)| } } \\\\ & = \\max_{\\mc{f}}\\log_s|\\mc{s}(\\mc{f})|.\\end{aligned}\\ ] ]    consider the probability space on the set of all assignment tuples @xmath152 with the members in @xmath148 occurring with uniform probability and all other assignments occurring with @xmath123 probability .",
    "for each @xmath15 we define the discrete random variable @xmath153 on this probability space to be the value assigned to vertex @xmath11 .",
    "the _ s - entropy _ of a discrete random variable @xmath154 with outcomes @xmath155 is defined as @xmath156\\log_s\\mb{p}[x = x_i],\\ ] ] where we take @xmath157 to be @xmath123 for consistency .",
    "note that traditionally entropy is defined using base @xmath158 logarithms , however it will be more convenient for us to work with base @xmath31 logarithms .",
    "we will usually write @xmath159 instead of @xmath160 .",
    "we will mention here all basic results concerning entropy that we are going to use . for more information ,",
    "we refer the reader to .    given a set of random variables @xmath161 with sets of outcomes @xmath162 respectively , the _ joint entropy _ @xmath163 is defined as @xmath164\\log_s\\mb{p}[y_1=y_1,\\ldots , y_n = y_n].\\ ] ] given a set of random variables @xmath165 we will also use the notation @xmath166 to represent the joint entropy @xmath163 .",
    "furthermore for sets of random variables @xmath167 and @xmath168 we will use the notation @xmath169 as shorthand for @xmath170 . for completeness",
    "we also define @xmath171 .",
    "observe that under these definitions , the joint entropy of the set of variables @xmath172 is @xmath173 therefore by upper bounding @xmath174 for all choices of @xmath44 we can upper bound @xmath50 .",
    "we begin by stating some inequalities that most hold regardless of @xmath44 .",
    "[ thm : shannonentropy ] given @xmath175 ,    1 .",
    "[ item : varlowerbound ] @xmath176 .",
    "[ item : varupperbound ] @xmath177 .",
    "[ item : varshannon ] shannon s information inequality : @xmath178 4 .",
    "[ item : vargraphconstraint ] suppose @xmath179 with @xmath180 for all @xmath181 .",
    "let @xmath182 and @xmath183",
    ". then @xmath184    @xmath185    1 .",
    "property [ item : varlowerbound ] follows immediately from the definition of entropy .",
    "2 .   property [ item : varupperbound ] follows from first observing that @xmath186)]$ ] .",
    "since the function @xmath187 is concave , by jensen s inequality we get that @xmath188 = \\log_s |\\operatorname{im}(x)|\\ ] ] where @xmath189 is the set of outcomes for @xmath154 . since @xmath190 we have the desired inequality @xmath177 .",
    "3 .   property [ item : varshannon ] again follows from jensen s inequality .",
    "first we observe that @xmath191\\mb{p}[y , z]}{\\mb{p}[x , y , z]\\mb{p}[z]}\\right)\\right].\\end{aligned}\\ ] ] by an application of jensen s inequality this is at least @xmath192\\mb{p}[y , z]}{\\mb{p}[x , y , z]\\mb{p}[z]}\\right]\\right ) & = -\\log_s\\left(\\sum_{x , y , z}\\frac{\\mb{p}[x , z]\\mb{p}[y , z]}{\\mb{p}[z]}\\right)= 0.\\end{aligned}\\ ] ] 4 .",
    "property [ item : vargraphconstraint ] is a simple consequence of the fact that the values assigned to the vertices in @xmath193 are completely determined by the values assigned to the vertices in @xmath194 . since @xmath195 $ ] is either @xmath123 or @xmath196 $ ] , the result is trivially attained by considering the definition of @xmath197 and summing over the variables in @xmath154 .    from theorem [ thm : shannonentropy ]",
    "we can form a linear program to upper bound @xmath174 .",
    "in particular the linear program consists of @xmath198 variables corresponding to the values of @xmath159 for each @xmath199 .",
    "the variables are constrained by the linear inequalities given in theorem [ thm : shannonentropy ] and the objective is to maximize the value of the variable corresponding to @xmath174 .",
    "we call the result of the optimization _ the shannon bound _ of @xmath6 and denote it by @xmath200 .    note that @xmath200 can be calculated without making any explicit use of @xmath44 or @xmath31 .",
    "hence it is not only an upper bound on @xmath50 but also on @xmath54",
    ".    more recently information entropy inequalities that can not be derived from linear combinations of shannon s inequality ( property [ item : varshannon ] in theorem [ thm : shannonentropy ] ) have been discovered .",
    "the first such inequality was found by zhang and yeung .",
    "zhang - yeung inequality _ states that @xmath201 for sets of random variables @xmath202 . by setting @xmath203 , @xmath204 , @xmath205 , @xmath206 ,",
    "the zhang - yeung inequality reduces to shannon s inequality . by replacing the shannon inequality constraints with those given by the zhang - yeung inequality",
    "we can potentially get a better upper bound from the linear program . however , we pay for this potentially better bound by a significant increase in the running time of the linear program .",
    "we will call the bound on @xmath54 obtained by use of the zhang - yeung inequality _ the zhang - yeung bound _ and denote it by @xmath207 .",
    "in fact there are known to be infinite families of non - shannon inequalities even on @xmath208 variables .",
    "we can not hope to add infinite constraints to the linear program so instead we will consider the @xmath209 inequalities given by dougherty , freiling , and zeger ( * ? ? ?",
    "* section viii ) .",
    "we will refer to the resulting bound as _ the dougherty - freiling - zeger bound _ and denote it by @xmath210 .",
    "it is perhaps worth mentioning for those interested that the @xmath209 dougherty - freiling - zeger inequalities imply the zhang - yeung inequality ( simply sum inequalities @xmath211 and @xmath212 ) and therefore they also imply shannon s inequality .    the final bound we will consider is _ the ingleton bound _ which we will denote by @xmath213 .",
    "this is obtained when we replace the shannon inequality constraints with the _ ingleton inequality _ @xmath214",
    "the ingleton inequality provides the outer - bound of the inner - cone of linearly representable entropy vectors @xcite . by setting @xmath215 and @xmath216 , the ingleton inequality reduces to shannon s inequality .",
    "if each player s strategy can be expressed as a linear combination of the values it sees , then the ingleton inequality will hold .",
    "therefore the inequality holds for a strategy on @xmath60 that can be represented as a linear strategy on @xmath58 ( as described in the proof of lemma [ lem : blowupequal ] ) . as such",
    ", the ingleton bound gives us an upper bound when we restrict ourselves to strategies which are linear on the digits of the values .",
    "an important such strategy is the fractional clique cover strategy which leads to the proof of theorem [ thm : lowerboundineq ] .    in searching for a counterexample to conjecture [ conj : lowerboundsharp ] we carried out an exhaustive search on all undirected graphs with at most @xmath217 vertices .",
    "we compared the lower bound given by the fractional clique cover with the upper bound given by the shannon bound and in all cases the two bounds matched .",
    "the bounds were calculated using floating point arithmetic and so we do not claim this search to be rigorous , however it suggested the following conjecture .",
    "[ conj : upperboundsharp ] if @xmath6 is an undirected graph then @xmath218 .",
    "in this section we present our new results , most notably that both conjectures [ conj : lowerboundsharp ] and [ conj : upperboundsharp ] are false .",
    "counterexamples were found by searching through all undirected graphs on @xmath219 vertices or less . for speed purposes ,",
    "the search was done using floating point arithmetic and as such there may be counterexamples that were missed due to rounding errors .",
    "( although this is highly unlikely , we do not claim that it is impossible . ) despite this , we feel that it is still remarkable that of the roughly @xmath220 million graphs that were checked we only found @xmath158 graphs whose lower and upper bounds ( given by the fractional clique cover , and shannon bound respectively ) did not match : the graph @xmath221 given in figure [ fig : rgraph ] , and the graph @xmath222 which is identical to @xmath221 but with the undirected edge between vertices @xmath217 and @xmath219 removed .",
    ".,width=302 ]    the graph @xmath221 is particularly extraordinary as we will see that with a few simple modifications we can create graphs which answer a few other open problems .",
    "we begin our analysis of @xmath221 and @xmath222 by determining their fractional clique cover number .",
    "[ lem : rr - lower ] we have @xmath223 .    by lemma [ lem : boundonfractionalclique ] we know that @xmath224 and @xmath225 are bounded below by @xmath226 . to show they can actually attain @xmath226 we need to construct explicit regular fractional clique covers whose weights add up to @xmath226 .    for @xmath222",
    "we give a weight of @xmath227 to the cliques @xmath228 , @xmath229 , @xmath230 , @xmath231 , @xmath232 , @xmath233 , @xmath234 , @xmath235 , @xmath236 , @xmath237 , and a weight of @xmath123 to all other cliques .",
    "note that this is also an optimal regular fractional clique cover for @xmath221 .",
    "[ thm : r - upper ] we have    1 .",
    "@xmath238 2 .",
    "@xmath239 3 .",
    "@xmath240 4 .",
    "@xmath241    from lemma [ lem : rr - lower ] and theorem [ thm : r - upper ] we know that @xmath242 and although we could not determine the asymptotic guessing number exactly it does show that it does not equal the shannon bound , disproving conjecture [ conj : upperboundsharp ] . given that the shannon bound is not sharp we might be tempted to conjecture that the asymptotic guessing number is the same as the zhang - yeung bound , but theorem [ thm : r - upper ] also shows this to be false . interestingly the ingleton bound does match the lower bound , showing that if we restrict ourselves to only considering linear strategies on blowups we can do no better than the fractional clique cover strategy .",
    "it remains an open question as to whether a non - linear strategy on @xmath222 can do better than @xmath243 or whether by considering the right set of entropy inequalities we can push the upper bound down to @xmath243 .",
    "calculating the upper bounds involves solving rather large linear programs .",
    "hence the proofs are too long to reproduce here and it is unfeasible for them to be checked by humans .",
    "data files verifying our claims can be provided upon request .",
    "we stress that although the results were verified using a computer that no floating point data types were used during the verification .",
    "consequently no rounding errors could occur in the calculations making the results completely rigorous .",
    "although @xmath221 is a counterexample to conjecture [ conj : lowerboundsharp ] its optimal strategy is somewhat complicated .",
    "so instead we will disprove the conjecture by showing a related graph which we will call @xmath244 is a counterexample .",
    "the undirected graph @xmath245 is constructed from @xmath221 by _ cloning _",
    "@xmath246 of its vertices .",
    "( cloning @xmath246 vertices is equivalent to creating a blowup of @xmath221 with @xmath158 vertices in @xmath246 of the vertex classes and just @xmath124 vertex in the other classes . )",
    "the vertices we clone are @xmath247 , and we label the resulting new vertices @xmath248 , and @xmath249 respectively .    [ thm : rc ]",
    "we have @xmath250 while the fractional clique cover bound of @xmath245 is @xmath251 .",
    "in particular , @xmath245 provides a counterexample to conjecture [ conj : lowerboundsharp ] .    to prove that the fractional clique cover bound is @xmath252 it is enough to show that @xmath253 .",
    "lemma [ lem : boundonfractionalclique ] tells us @xmath254 .",
    "it is also easy to show @xmath255 as it trivially follows from extending the regular fractional clique cover given in the proof of lemma [ lem : rr - lower ] by giving a weight of @xmath124 to the clique @xmath256 .",
    "the shannon bound of @xmath245 is @xmath217 proving @xmath257 .",
    "we do not provide the details of the shannon bound proof as it is too long to present here , however data files containing the proof are available upon request .",
    "all that remains is to prove @xmath258 .",
    "even though this proof was discovered partly using a computer it can be easily verified by humans . in particular",
    ", the main conclusion of this theorem , that @xmath245 is a counterexample to conjecture [ conj : lowerboundsharp ] , can be verified without the need of any computing power .",
    "recall that in section [ sec : asymptotic ] we showed that the asymptotic guessing number can be lower bounded by considering any strategy on any alphabet size .",
    "we will take our alphabet size @xmath31 to be @xmath246 .",
    "our strategy involves all players agreeing to play assuming the following four conditions hold on the assigned values @xmath259 note that the terms in ( [ eq : rc1 ] ) consist of @xmath260 , and values which player @xmath124 can see .",
    "hence ( [ eq : rc1 ] ) naturally gives us a strategy for player @xmath124 , i.e.  that player @xmath124 should guess @xmath261 .",
    "similarly strategies for players @xmath262 , and @xmath249 can be achieved by rearranging conditions ( [ eq : rc3 ] ) , ( [ eq : rc4 ] ) , ( [ eq : rc2 ] ) , ( [ eq : rc3 ] ) , ( [ eq : rc4 ] ) and ( [ eq : rc2 ] ) respectively . a strategy for player @xmath158",
    "can be obtained by taking a linear combination of the conditions . in particular if we sum ( [ eq : rc3 ] ) , ( [ eq : rc4 ] ) , twice ( [ eq : rc1 ] ) , and twice ( [ eq : rc2 ] ) we get @xmath263 which consists of @xmath264 and values which player @xmath158 can see , allowing us to construct a strategy for player @xmath158 .",
    "we leave it to the reader to verify that by taking the following linear combinations we obtain strategies for players @xmath265 , and @xmath266 :    * for player 3 , we sum ( [ eq : rc1]),([eq : rc2]),([eq : rc4 ] ) and twice ( [ eq : rc3 ] ) . * for player 4 ,",
    "we sum ( [ eq : rc2]),([eq : rc3 ] ) , twice ( [ eq : rc1 ] ) and twice ( [ eq : rc4 ] ) . * for player 5 , we sum ( [ eq : rc1]),([eq : rc3]),([eq : rc4 ] ) and twice ( [ eq : rc2 ] ) . * for player 6 , we sum ( [ eq : rc2]),([eq : rc4 ] ) , twice ( [ eq : rc1 ] ) and twice ( [ eq : rc3 ] ) . * for player 7 , we sum ( [ eq : rc1]),([eq : rc2]),([eq : rc3 ] ) and twice ( [ eq : rc4 ] ) .",
    "the probability that all players guess correctly under this strategy is @xmath267 , i.e.  the probability that ( [ eq : rc1 ] ) , ( [ eq : rc2 ] ) , ( [ eq : rc3 ] ) , ( [ eq : rc4 ] ) all hold .",
    "( it is not difficult to check that the conditions are linearly independent . ) consequently @xmath268 = 9\\ ] ] as desired .    for completeness",
    "we give the asymptotic guessing number of @xmath221 and note that it does not match the fractional clique cover bound of @xmath243 as claimed .",
    "we have @xmath269 .",
    "the shannon bound of @xmath221 is @xmath270 ( data files can be provided upon request ) .    to show @xmath271 we will show @xmath272 . by lemma [ lem : blowupequal ]",
    "this can be achieved if we can construct a strategy on the guessing game @xmath273 which has a probability of winning @xmath274 ( which implies @xmath275 ) . to describe such a strategy",
    "let us label the vertices of @xmath276 such that the four vertices that are constructed from blowing up @xmath277 are labelled @xmath278 , @xmath279 , @xmath280 , and @xmath281 . under this labelling",
    "our strategy for @xmath276 is to have the cliques @xmath282 , @xmath283 , @xmath284 , @xmath285 , @xmath286 , @xmath287 , @xmath288 , @xmath289 and @xmath290 play the complete graph strategy , and the remaining @xmath291 vertices , which form a copy of @xmath245 , to play the strategy for @xmath245 as described in the proof of theorem .",
    "[ thm : rc ] .    now that we have shown that conjectures [ conj : lowerboundsharp ] and [ conj : upperboundsharp ] are not true , we turn our attention to other open questions . due to the limited tools and methods currently available , there are many seemingly trivial problems on guessing games which still remain unsolved .",
    "one such problem is the following .",
    "[ prob : singleedge ] does there exist an undirected graph whose asymptotic guessing number increases when a single directed edge is added ?    adding a directed edge",
    "gives one of the players more information , which can not lower the probability that the players win .",
    "however , surprisingly it seems extremely difficult to make use of the extra directed edge to increase the asymptotic guessing number .",
    "an exhaustive ( but not completely rigorous ) search on undirected graphs with @xmath217 vertices or less did not yield any examples .",
    "as such , we significantly weaken the requirements in problem [ prob : singleedge ] by introducing the concept of a superman vertex .",
    "we define a superman vertex to be one that all other vertices can see .",
    "i.e. , given a digraph @xmath6 , we call vertex @xmath292 a _ superman vertex _ if @xmath18 for all @xmath293",
    ". we can similarly define a luthor vertex as one which sees all other vertices . to be precise @xmath10",
    "luthor vertex _",
    "if @xmath19 for all @xmath293 .",
    "[ prob : superman ] does there exist an undirected graph whose asymptotic guessing number increases when directed edges are added to change one of the vertices into a superman vertex ( or a luthor vertex )",
    "?    to change one of the vertices into a superman or luthor vertex will often involve adding multiple directed edges , meaning the players will have a lot more information at their disposal when making their guesses .",
    "we again searched all undirected graphs on @xmath217 vertices or less and remarkably still could not find any examples .    with the discovery of the graph @xmath221 and in particular the graph @xmath245",
    "we can show the answer is yes to problem [ prob : singleedge ] and consequently problem [ prob : superman ] .",
    "we define the undirected graph @xmath294 to be the same as the graph @xmath245 but with the undirected edge between vertices @xmath246 and @xmath295 removed .",
    "we also define the directed graph @xmath296 to be the same as @xmath294 but with the addition of a single directed edge going from vertex @xmath246 to vertex @xmath295 .",
    "we have @xmath297 and @xmath298 .",
    "the shannon bounds for @xmath294 and @xmath296 are @xmath299 and @xmath217 respectively ( data files can be provided upon request ) .",
    "we will prove @xmath300 by observing that the strategy for @xmath301 ( see the proof of theorem [ thm : rc ] ) is a valid strategy for @xmath302 . with the exception of player @xmath246 all players in @xmath302 have access to the same information they did in @xmath301 .",
    "player @xmath246 however , now no longer has access to @xmath303 . by studying the strategy player",
    "@xmath246 uses in @xmath301 we will see that this is of no consequence",
    ". summing conditions ( [ eq : rc1 ] ) , ( [ eq : rc2 ] ) , ( [ eq : rc4 ] ) , and twice ( [ eq : rc3 ] ) , gives @xmath304 hence player @xmath246 guesses @xmath305 in @xmath301 . since player @xmath246 makes no use of @xmath303 this validates our claims .",
    "we complete our proof by showing @xmath306 .",
    "we know @xmath307 so it is enough to show @xmath308 . since @xmath309 had @xmath310 vertices we can do this by finding a strategy on @xmath311 that wins with a probability of @xmath312 . to this end , let us label the vertices of @xmath309 such that the six vertices that are constructed from blowing up @xmath313 are labelled @xmath278 , @xmath279 , @xmath280 , @xmath281 , @xmath314 , and @xmath315 . under this labelling , our strategy for @xmath309 is to play the complete graph strategy on the cliques @xmath316 and to play the @xmath245 strategy on the vertices @xmath317 the probability of winning in each of these 13 cliques is @xmath318 while the probability of winning in each of the three copies of @xmath245 is @xmath267 .",
    "so the overall probability of winning is indeed @xmath312 , therefore completing the proof .",
    "we finish this section by considering a problem motivated by the reversibility of networks in network coding . given a digraph @xmath6 , let @xmath319 be the digraph formed from @xmath6 by reversing all the edges , i.e.  @xmath18 if and only if @xmath320 .",
    "[ prob : reverse ] does there exist a digraph @xmath6 , such that @xmath321 .",
    "we were not able to solve this problem .",
    "we did however find a graph @xmath322 for which the shannon bound of @xmath322 and the shannon bound of @xmath323 did not match .",
    "@xmath322 is simply the digraph formed by making vertex @xmath124 in @xmath221 a superman vertex . in other words , we add three directed edges to @xmath221 : the edge going from @xmath124 to @xmath295 , from @xmath124 to @xmath217 , and from @xmath124 to @xmath219 .",
    "consequently @xmath323 is the graph formed by making vertex @xmath124 in @xmath221 a luthor vertex . as such",
    ", we will refer to it as @xmath324 .",
    "[ thm : rsandrl ] we have @xmath325 . for @xmath324",
    "we have the following bounds :    1 .",
    "2 .   @xmath327 3 .",
    "@xmath328 4 .",
    "@xmath329    the proofs are given in data files which can be made available upon request .",
    "from the strategy on @xmath221 we know that @xmath330 and @xmath331 .",
    "hence we have @xmath332 .",
    "we do not however know the precise value of @xmath333 so it is possible that the asymptotic guessing numbers of @xmath322 and @xmath324 do not match .",
    "in this section we mention a few of the simple tricks we used in order to speed up the computer search which allowed us to search through all the @xmath219 vertex graphs and find the graph @xmath221 .",
    "we hope that this may be of use to others continuing this research .",
    "the majority of time spent during the searches was spent determining the shannon bound by solving a large linear program . by reducing the number of constraints that we add to the linear program we can speed up the optimisation . given a graph on @xmath2 vertices a naive formation of",
    "the linear program would result in considering all @xmath334 shannon inequalities of the form @xmath335 however most of these do not need to be added to the linear program .",
    "in fact it is sufficient to just include the inequalities given by the following lemma .",
    "[ lem : fewerinequalities ] given a set of discrete random variables @xmath336 , the set of shannon inequalities @xmath337 is equivalent to the set of inequalities given by    a.   [ item : ineqposet ] @xmath338 for @xmath339 with @xmath340 .",
    "b.   [ item : ineqsubmodular ] @xmath341 for @xmath342 with @xmath343 .",
    "observe that for a graph on @xmath2 vertices there are @xmath2 inequalities of type ( [ item : ineqposet ] ) and @xmath344 inequalities of type ( [ item : ineqsubmodular ] ) .",
    "( counting the inequalities of type ( [ item : ineqsubmodular ] ) is equivalent to counting the number of squares in the hypercube poset formed from looking at the subsets of @xmath336 . )",
    "overall , this is about the cube root of the initial number of inequalities .",
    "setting @xmath345 , @xmath346 , and @xmath347 , shows that the shannon inequalities imply the set of inequalities described by ( [ item : ineqposet ] ) . setting @xmath348 , @xmath204 , and @xmath349 , shows that the shannon inequalities imply ( [ item : ineqsubmodular ] ) .    to show ( [ item : ineqposet ] ) and ( [ item : ineqsubmodular ] ) imply the shannon inequalities we will first generalise ( [ item : ineqposet ] ) and ( [ item : ineqsubmodular ] ) .",
    "we will begin by showing that ( [ item : ineqsubmodular ] ) implies @xmath350 for any @xmath342 .",
    "let @xmath351 and @xmath352 , where @xmath353 and @xmath354 are single discrete random variables .",
    "define @xmath355 to be @xmath356 for @xmath357 and @xmath358 .",
    "we define @xmath359 similarly .",
    "finally let @xmath360 , and note that @xmath361 , @xmath362 , @xmath363 , and @xmath364 . by ( [ item : ineqsubmodular ] ) we have @xmath365.\\ ] ] here , the right hand side is telescopic and simplifies to the desired expression @xmath366    next we will generalise ( [ item : ineqposet ] ) to show that for any @xmath367 with @xmath368 we have @xmath369 .",
    "let us define @xmath370 to be @xmath371 .",
    "then , by the generalised version of ( [ item : ineqsubmodular ] ) we know that @xmath372 which simplifies to @xmath373 observe that @xmath374 , so ( [ item : ineqposet ] ) tells us that @xmath375 which when added to ( [ eqn : generalisedi ] ) gives the inequality @xmath376 as required",
    ".    we can now further generalise ( [ item : ineqposet ] ) to show that for any @xmath377 we have that @xmath378 . to do this ,",
    "let @xmath379 , where @xmath380 are single discrete random variables .",
    "then , by repeated applications of our generalisation of ( [ item : ineqposet ] ) we have @xmath381    it is now a trivial matter to show that ( [ item : ineqposet ] ) and ( [ item : ineqsubmodular ] ) imply shannon s inequality .",
    "simply set @xmath382 and @xmath383 in the generalised version of ( [ item : ineqsubmodular ] ) to get @xmath384 and since @xmath385 by the improved version of ( [ item : ineqposet ] ) , the result follows .",
    "it is also worth mentioning that @xmath171 together with the shannon inequalities imply @xmath386 for disjoint @xmath387 .",
    "hence , the constraints @xmath177 for all @xmath154 in the shannon bound linear program are not all necessary and can be reduced to @xmath177 for @xmath388 , or @xmath124 .",
    "when determining each graph s asymptotic guessing number , the natural approach is to calculate the lower bound using the fractional clique cover number , then calculate the shannon bound and check if they match .",
    "however the linear program that gives us the fractional clique cover number also gives us a regular fractional clique cover from which an explicit strategy can be constructed .",
    "it is easy to convert this strategy into a feasible point of the shannon bound linear program .",
    "hence we can save a significant amount of time by simply checking if this feasible point is optimal , rather than by calculating the shannon bound from scratch .",
    "note that we check for optimality by solving the same shannon bound linear program with the modification that we remove those constraints for which equality is not achieved by the feasible point .",
    "the modified shannon bound linear program is still the most time consuming process in the search , so ideally we would like to avoid it when possible .",
    "christofides and markstrm show that for an undirected graph @xmath6 @xmath389 where @xmath390 is the number of vertices in the maximum independent set . this can be interpreted as a simple consequence of the fact that removing players increases the probability the remaining players will win .",
    "( if the probability of winning decreased , the players could just create fictitious replacement players before the game started . ) as such we present a simple generalization of this result .    [",
    "lem : removevertices ] given a digraph @xmath6 and an induced subgraph @xmath391 , @xmath52\\leq \\max_{\\mc{f}}\\mb{p}[\\operatorname{win}(g',s,\\mc{f})]\\ ] ] or equivalently @xmath392 . hence @xmath393    we do not provide a proof as it is trivial .",
    "note that the result @xmath394 is a simple corollary of this result as an independent set has a guessing number of @xmath123 .    given a graph @xmath6 ,",
    "if we can find a subgraph such that the upper bound given in lemma [ lem : removevertices ] matches the fractional clique cover bound , then we have determined the asymptotic guessing number , and can avoid an expensive shannon bound calculation .",
    "this approach is particularly fast when doing an exhaustive search as all the smaller graphs will have had their asymptotic guessing numbers already determined .",
    "one issue with this method is that if we are looking for a counterexample to the shannon bound being sharp , there is a possibility that we may miss them because we avoided calculating the shannon bound for every graph .",
    "consequently to alleviate our fear we need the following result .",
    "[ lem : subgraphshannonbound ] given a digraph @xmath6 and an induced subgraph @xmath391 , we have @xmath395    it is sufficient to prove the result only for induced subgraphs @xmath391 for which @xmath396 , as the result then follows by induction on @xmath397 .",
    "let @xmath292 be the vertex that is removed from @xmath6 to produce @xmath391 .",
    "the shannon bound for @xmath391 comes from solving a linear program , and as such the solution to the dual program naturally gives us a proof that @xmath398 .",
    "in particular , this proof consists of summing appropriate linear combinations of the constraints .",
    "suppose that in each such contraint we replace @xmath159 with @xmath399 for every @xmath400 .",
    "this effectively would replace constraints from the linear program for @xmath391 with inequalities which are implied from the linear program for @xmath6 .",
    "for example , @xmath176 for @xmath391 , would become @xmath401 for @xmath6 ( which is true by shannon s inequality ) .",
    "as another example , @xmath177 becomes @xmath402 ( which is true as @xmath403 ) .",
    "this shows that all constraints in theorem [ thm : shannonentropy ] of types ( 1 ) and ( 2 ) can be replaces as claimed .",
    "the same happens for constraints of types ( 3 ) and ( 4 ) .",
    "consequently , under this transformation , the proof that @xmath398 becomes a proof that @xmath404 . since @xmath405 the result immediately follows .",
    "we have seen that by removing vertices from a graph @xmath6 we make the game easier allowing us to upper bound @xmath54 .",
    "another way we can make the game easier is by adding extra edges to @xmath6 .",
    "consequently we can avoid the shannon bound calculation by also using the asymptotic guessing number of supergraphs of @xmath6 which have the same number of vertices as @xmath6 .",
    "we end this section by considering the problem of how to calculate the non - shannon bounds , i.e.  the zhang - yeung bound , the dougherty - freiling - zeger bound , and the ingleton bound .",
    "they all involve inequalities on @xmath208 variables and consequently a naive approach is to add at least @xmath406 inequalities to the linear program , where @xmath2 is the order of the graph .",
    "unfortunately such a linear program is far too large to be computationally feasible .",
    "our approach is given by the following algorithm :    1 .",
    "let @xmath407 be the set of shannon bound constraints .",
    "[ item : prog4var ] solve the linear program which consists only of constraints @xmath407 .",
    "[ item : check4var ] check if the solution satisfies all required @xmath208 variable information inequalities ( e.g.  the zhang - yeung inequalities if we are calculating the zhang - yeung bound ) .",
    "if all the inequalities are satisfied then terminate , returning the objective value .",
    "2 .   if one of the inequalities is not satisfied add this constraint to @xmath407 and go back to [ item : prog4var ] .",
    "we note that due to the large number of inequalities , step [ item : check4var ] can take a while .",
    "so it is advisable to add some extra constraints to the linear program to limit the search to a solution which is symmetric under the automorphisms of the graph ( there always exists such a solution due to the linearity of the problem ) .",
    "this extra symmetry can be used to avoid checking a significant proportion of the inequalities in step [ item : check4var ] .",
    "problem [ prob : reverse ] asks whether there exists an irreversible guessing game , i.e.  a guessing game @xmath6 such that @xmath408 .",
    "this can be answered in the affirmative if @xmath333 can be shown to be strictly larger than @xmath409 .",
    "unfortunately , this might be hard to prove as it would establish the existence of a non - linear guessing strategy that improves the lower bound we derived",
    ".    it would also be interesting to determine the exact value of @xmath410 as @xmath222 according to our calculations is the only undirected graph on at most @xmath219 vertices whose guessing number remains undetermined .",
    "any lower bound that implies @xmath411 would show that there exists a non - linear guessing strategy that outperforms the fractional clique cover strategy for @xmath222 .",
    "we would like to thank peter cameron and peter keevash .",
    "an extended abstract of this paper appeared in @xcite and we would like to thank the three anonymous referees for their useful comments .",
    "this work was partly supported by epsrc ref : ep / h016015/1 .",
    "r. baber , d. christofides , a. n. dang , s. riis  and  e. r. vaughan , multiple unicasts , graph guessing games , and non - shannon inequalities , in _ 2013 international symposium on network coding ( netcod ) _ , calgart , june 2013 .",
    "r. m. karp , reducibility among combinatorial problems , in _ complexity of computer computations ( proc .",
    ", ibm thomas j. watson res .",
    "center , yorktown heights , n.y . , 1972 ) _ , 85103 , plenum , new york ."
  ],
  "abstract_text": [
    "<S> guessing games for directed graphs were introduced by riis @xcite for studying multiple unicast network coding problems . in a guessing game , the players toss generalised dice and can see some of the other outcomes depending on the structure of an underlying digraph . </S>",
    "<S> they later guess simultaneously the outcome of their own die . </S>",
    "<S> their objective is to find a strategy which maximises the probability that they all guess correctly . </S>",
    "<S> the performance of the optimal strategy for a graph is measured by the guessing number of the digraph .    in , christofides and markstrm studied guessing numbers of undirected graphs and defined a strategy which they conjectured to be optimal . </S>",
    "<S> one of the main results of this paper is a disproof of this conjecture .    </S>",
    "<S> the main tool so far for computing guessing numbers of graphs is information theoretic inequalities . </S>",
    "<S> the other main result of the paper is that shannon s information inequalities , which work particularly well for a wide range of graph classes , are not sufficient for computing the guessing number .    </S>",
    "<S> finally we pose a few more interesting questions some of which we can answer and some which we leave as open problems . </S>"
  ]
}