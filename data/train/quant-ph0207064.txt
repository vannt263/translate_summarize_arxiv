{
  "article_text": [
    "the demand for bandwidth is rapidly increasing due to the explosive growth of network traffic .",
    "networking technologies play an important role in bridging the gap between limited resources and the constantly increasing demand . in order to avoid a full mesh architecture ,",
    "a switching device is required to build a realistic network . over the past few years , a lot of enabling technologies have emerged as candidates for achieving high performance switching .",
    "basically , switches act like automated patch - panels , switching all the electrical or optical signals from one port to another .",
    "traditionally , digital switching can be done in many ways .",
    "for example , by allocating physical separated paths , switching can be done in the space domain .",
    "a 2-d mems optical switch with precisely controlled micromirrors is essentially a space domain switch .",
    "similarly , by associating the data from each port with a unique resource , switching can be performed in many other ways , such as in the time domain , the wavelength domain , and even a combination of these mechanisms .",
    "on the other hand , quantum information science is a relatively new field of study .",
    "quantum computers were first discussed in the early 1980 s @xcite,@xcite,@xcite . since then , a great deal of research has been focused on this topic .",
    "remarkable progress has been made due to the discovery of secure key distribution @xcite , polynomial time prime factorization @xcite , and fast database search algorithm @xcite .",
    "these results have recently made quantum information science the most rapidly expanding research field .",
    "other applications , such as clock synchronization @xcite,@xcite , and quantum boolean circuit implementation @xcite have driven this field further into the phase of real - world applications .    in this paper , we present a architecture and implementation algorithm such that digital data can be switched in the quantum domain . first we define the connection digraph which can be used to describe the behavior of a switch at a given time , then we show how a connection digraph can be implemented using elementary quantum gates .",
    "the proposed mechanism supports unicasting as well as multicasting and is strict - sense non - blocking @xcite .",
    "it can be applied to perform either circuit switching or packet switching . compared with a traditional space or time switch ,",
    "the proposed switching mechanism is more scalable .",
    "assuming an @xmath0 quantum switch , the space consumption grows linearly , _",
    "i.e. _ @xmath1 , while the time complexity is @xmath2 for unicasting and @xmath3 for multicasting . based on these advantages ,",
    "a high throughput switching device can be built simply by increasing the number of i / o ports .",
    "in a two - state quantum system , each bit can be represented using a basis consisting of two eigenstates , denoted by @xmath4 and @xmath5 respectively .",
    "these states can be either spin states of a particle ( @xmath4 for spin - up and @xmath5 for spin - down ) or energy levels in an atom ( @xmath4 for ground state and @xmath5 for excited state ) .",
    "these two states can be used to simulate the classical binary logic .",
    "a classical binary logic value must be either * on * ( 1 ) or * off * ( 0 ) , but not both at the same time .",
    "however , a bit in a quantum system can be any linear combination of these two states , so we have the state @xmath6 of a bit as @xmath7 where @xmath8 , @xmath9 are complex numbers and @xmath10 . in column matrices , this is written as @xmath11    the state shown above exhibits an unique phenomenon in quantum mechanics called _",
    "superposition_. when a particle is in such a superposed state , it has a part corresponding to @xmath4 and a part corresponding to @xmath5 , at the same time .",
    "when you measure the particle , the system is projected to one of its basis ( _ i.e. _ either @xmath4 or @xmath12 ) .",
    "the overall probability for each state is given by the absolute square of its amplitude .",
    "taking the state @xmath6 in eq.([superposition ] ) as an example , the coefficient @xmath13 and @xmath14 represents the probability of obtaining @xmath4 and @xmath12 respectively .",
    "obviously , the sum of @xmath13 and @xmath14 will be @xmath15 to satisfy the probability rule . to distinguish the above system from the classical binary logic , a bit in a quantum system",
    "is referred to as a quantum bit , or _",
    "qubit_.    two or more qubits can also form a quantum system jointly .",
    "a two - qubit system is spanned by the basis of the tensor product of their own spaces .",
    "hence , the joint state of qubit a and qubit b is spanned by @xmath16 , @xmath17 , @xmath18 , and @xmath19 , _",
    "i.e. _ @xmath20 where @xmath8 , @xmath9 , @xmath21 , @xmath22 are all complex numbers and @xmath23 . in matrix form , this is equivalent to @xmath24    the notations described above can be generalized to multiple - qubit systems .",
    "for example , in a three - qubit system , the space is spanned by a basis consisting of eight elements ( @xmath25 , @xmath26 ,  , @xmath27 ) .",
    "a quantum system can be manipulated in many different ways , called _",
    "quantum gates_. a quantum gate can be represented in the form of a matrix operation .",
    "for example , a quantum _ not _ ( * n * ) gate applied on a single qubit can be represented by multiplying a @xmath28 matrix @xmath29 which changes the state from @xmath5 to @xmath30 and from @xmath4 to @xmath5 , as @xmath31 the symbol of an * n * gate is shown in fig.[figure1](a ) .",
    "note that the horizontal line connecting the input and the output is not a physical wire as in classical circuits , it represents a qubit under time evolution .",
    "similarly , a two - bit gate can be represented by a @xmath32 matrix .",
    "for example , a _ control - not _ ( * cn * ) gate is represented by @xmath33 the symbol of a * cn * gate is shown in fig.[figure1](b ) .",
    "a * cn * gate consists of one _ control _",
    "bit @xmath34 , which does not change its value , and a _ target _",
    "bit @xmath35 , which changes its value only if @xmath36 . assuming the first bit is the control bit , the gate can be written as @xmath37 , where @xmath38 denotes exclusive - or . in matrix form , a * cn * gate changes the probability amplitudes of a quantum system as follows : @xmath39    further generalization of the quantum gates described above involves _ rotation _ and _ phase shift_. they control the phase difference and relative contributions of the eigenstates to the whole state .",
    "for example , a general single bit operation can be represented using a matrix @xmath40 this matrix can also be used to control the change between any two probability amplitude components in a quantum system . note that , to satisfy the probability rule , all quantum gates @xmath41 in their matrix form are unitary , _",
    "i.e. _ @xmath42 where @xmath43 is the conjugate transpose of @xmath41 .",
    "just like * and * and * not * form a universal set for classical boolean circuits , one- and two - bit gates are sufficient to implement any unitary operation @xcite , @xcite .",
    "a set of quantum gates which can be used to implement any unitary operation is called a universal set .",
    "there are many universal sets of one- and two - bit gates .",
    "a practical approach is to use general one - bit rotation gates as in eq.([onebit ] ) and the * cn * gate as a universal set .",
    "an important property regarding a quantum boolean operation is that any quantum boolean logic can be represented using a _",
    "permutation_. a permutation is a one - to - one and onto mapping from a finite order set onto itself .",
    "a typical permutation @xmath44 is represented using the symbol @xmath45 this permutation changes @xmath46@xmath47@xmath48 , @xmath48@xmath47@xmath46 , @xmath49@xmath47@xmath50 , @xmath50@xmath47@xmath51 , and @xmath51@xmath47@xmath49 , with state @xmath52 remaining unchanged .",
    "a permutation can also be expressed as disjoint _ cycles_. a cycle is basically an ordered list , which is represented as : @xmath53 the order of the elements describes the operation .",
    "for example , in eq.([cycle - rep ] ) , the cycle takes @xmath54@xmath47@xmath55 , @xmath55@xmath47@xmath56 ,  , @xmath57@xmath47@xmath58 , and finally @xmath58@xmath47@xmath54 .",
    "the number of elements in a cycle is called _",
    "length_. a cycle of length @xmath15",
    "is called a _ trivial _ cycle , which can be ignored as it does not change anything . a cycle of length @xmath59",
    "is called a _",
    "transposition_. using this notation , the same permutation @xmath44 shown in eq.([permutation ] ) can be written as @xmath60    as we can see , a simple quantum boolean gate like * cn * can be regarded as a permutation , because the probability amplitudes in the quantum state are manipulated in the same way . in other words ,",
    "a quantum boolean logic gate can be expressed as a permutation , or cycles .",
    "for example , a * cn * gate is indicated by @xmath61 , changing @xmath62@xmath47@xmath63 and @xmath63@xmath47@xmath62 , leaving all other states unchanged .",
    "in addition to permute the probability amplitude of each eigenstate , a qubit can be permuted as a whole .",
    "this is equivalent to reshuffling the quantum states for each of the qubits .",
    "since a permutation can be decomposed into disjoint cycles , the implementation actually consists of executing cycles of various lengths in parallel .",
    "because a cycle of length @xmath15 does not permute anything , no circuit is required for a trivial cycle . for a cycle of length @xmath59",
    ", the transposition can be done by three * cn * gates , as shown in fig.[figure2](a ) .",
    "+    the circuit is described as follows .",
    "for a two - qubit system @xmath64 the circuit transforms @xmath65 , @xmath66 , @xmath67 , and @xmath68 .",
    "this is equivalent to the permutation @xmath69 assuming the state of these two unentangled qubits are @xmath70 and @xmath71 , where @xmath72 and @xmath73 , the joint state @xmath74 is transformed to @xmath75 which does the transposition .",
    "note that once we have this basic function , we can build a switching network in the same way as a classical space switch .",
    "however , a more efficient implementation exists , as will be presented later in this paper .    for a general @xmath76-qubit ( @xmath77 ) cycle @xmath78",
    ", it can be done by @xmath79 layers of * cn * gates without ancillary qubits @xcite .",
    "the quantum operations required to implement @xmath80 are shown below .",
    "for an even @xmath76 ( @xmath81 , @xmath82 ) , we define the following non - overlapping qubit transpositions as : @xmath83 the cycle can be implemented using @xmath84    on the other hand , for an odd @xmath76 ( @xmath85 , @xmath86 ) , we define the following non - overlapping qubit transpositions as : @xmath87 note that if the subscript @xmath88 then @xmath89 is used to avoid ambiguity . in the same way , the cycle can be implemented using @xmath84 two examples of @xmath90 and @xmath91 are shown in fig.[figure2](b ) .",
    "note that both @xmath92 and @xmath93 consist of disjoint transpositions and can be executed in parallel using @xmath94 layers of * cn * gates , as shown in fig.[figure2](a ) . as a result",
    ", each cycle and the whole permutation can be performed using @xmath79 layers of * cn * gates .",
    "this achieves the constant time complexity of a qubit permutation .",
    "if auxiliary qubits are used , a cycle can be implemented using only @xmath95 layers of * cn * gates @xcite .",
    "in addition to permutation , qubit replication ( * fanout * ) is also an important and non - trivial operation .",
    "qubit replication takes one bit as input and gives two copies of the same bit value as output . in the classical world",
    ", we can do this simply with a metallic contact , but it is well - known that quantum mechanics does not allow us to make an exact copy of an unknown qubit .",
    "this is called the quantum _ non - cloning _ theorem @xcite . however , if the source qubit is in either @xmath30 or @xmath5 , the quantum state can be replicated exactly using a * cn * gate .",
    "for example , if @xmath6 is in either @xmath4 or @xmath5 , replicating @xmath96 to the qubit @xmath97 can be done simply by applying a * cn * gate with @xmath96 as the control and @xmath98 as the target , _",
    "i.e. _ @xmath99 . moreover , since both @xmath96 and @xmath100 can be used as the source qubits for further replication processes , the number of copies will increase exponentially , which allows @xmath80 copies of the same quantum state being replicated using only @xmath101 layers of * cn * gates , as shown in fig.[figure3 ] .",
    "note that the * cn * gates which have non - overlapping control and target qubits can be executed in parallel and are grouped into one layer .",
    "in classical digital communication , switching is needed in order not to build a fully - meshed transmission network .",
    "generally , digital switching technologies fall under two broad categories : _ circuit switching _ or _",
    "packet switching_. in this section , we briefly introduce these two switching paradigms and describe various implementations that can be employed to implement the switching function .",
    "we also define the connection digraph which can be used to illustrate the switching operation at a given time .      in circuit switching ,",
    "a dedicated path or time slot is reserved for an end - to - end bandwidth demand .",
    "the connection is established at the time of call set - up and released when the call is torn down .",
    "the function of the switching module is to transfer a particular time slot in the input port to a time slot in the output port . assuming a ( time slot @xmath102 of port @xmath103 ) and b ( time slot @xmath104 of port @xmath105 ) are making two - way communication via a @xmath106 digital switch , as shown in fig.[figure4](a ) . for the connection from a to b , the switching module transfers the data @xmath34 from @xmath102 of @xmath103 to @xmath104 of @xmath105 .",
    "similarly , for the connection from b to a , it transfers the data @xmath35 from @xmath104 of @xmath105 to @xmath102 of @xmath103 .",
    "these operations complete the data exchange between a and b.    packet switching is more sophisticated than circuit switching .",
    "modern packet switching networks take packets that share the same transmission line as input .",
    "a packet can have either a fixed or variable length with a limited maximum size .",
    "when a packet arrives at a node , it is stored first and then forwarded to the desired node according to its header as shown in fig.[figure4](b ) .",
    "for example , assume each of the packets in fig.[figure4](b ) has the destination port number as indicated in the header of the packet .",
    "the switching module at time @xmath107 needs to switch the data from input port @xmath108 , @xmath103 , @xmath105 , and @xmath109 to output port @xmath105 , @xmath109 , @xmath103 , and @xmath108 respectively .",
    "although significant differences such as _ data dependency _ and _ output contention _ exist between circuit switching and packet switching , they still have similarities . in both circuit switching and packet switching",
    ", the control block needs to specify the switching configuration for each individual time slot , so the data in that particular time slot can be switched correctly .",
    "the configuration describes how the i / o ports should be switched at a given time .",
    "the actual switching operation depends on which switching technique is used .",
    "there are many switching techniques used today .",
    "some of the basic switching techniques are described in the following section .    in the field of classical digital switching ,",
    "various techniques have been used to switch the input data to the corresponding output port .",
    "for example , data can be switched in the space domain , the time domain , or the wavelength domain , etc . if the data is switched in the space domain , _",
    "i.e. _ space division switching , usually a physical path or a dedicated time slot is reserved to establish the connection .",
    "for example , in the crossbar architecture , a rectangular array of cross - points serve as a simple space switching architecture .",
    "every output port can be reached by every input port in a non - blocking way by closing a single cross - point .",
    "a more sophisticated space division switch utilizes multiple stages of rectangular arrays is shown in fig.[figure5](a ) .",
    "a connection is established by closing proper cross - points to select a path from the inlet to the outlet @xcite .    a device that switches the data in the time domain is called a time division switch .",
    "time division technology is widely used in modern digital communication . in a time division switch",
    ", connections are established in a time - sharing manner , so a connection occupies the resources for only a short duration of time . for example , in fig.[figure5](b ) , the connection from the inlet @xmath103 to the outlet @xmath109 is established by closing switch @xmath110 and @xmath111 .",
    "this process is executed for each of the connections in a cyclic way to achieve switching functionality . primarily owing to the low cost of semiconductor devices , the implementation of a time division switch is usually done by using digital memory .",
    "data received over an incoming port is written into the memory , the switching is accomplished by reading out the individual bits in the desired time slot , which is equivalent to connecting the inlet to the outlet for data transfer .      before we describe how digital switching can be done in the quantum domain , we define a _ connection digraph _ as follows : + * definition 1 : * given an @xmath112 switch , the connection digraph at time @xmath113 , @xmath114 , is a digraph such that    1 .",
    "each @xmath115 represents an i / o port .",
    "2 .   @xmath116 if and only if a connection exists from the input port @xmath117 to the output port @xmath118 at time @xmath113 .    in a connection digraph",
    ", each node represents an",
    "i / o port , a directed edge @xmath119 is used to describe a connection when the connection from input port @xmath117 to output port @xmath118 is active .",
    "the digraph describes the connection status of the switch at a given time , and is called the connection digraph at time @xmath113 .",
    "note that the directed edge @xmath119 denotes only a one - way data path . for a point - to - point two - way communication between @xmath117 and @xmath118",
    ", both @xmath119 and @xmath120 have to be used . obviously , due to the connection set - up and torn - down processes , the connection digraph is a function of time .",
    "depending on the status of the switch , the topology of a connection digraph varies . in a general digraph",
    ", it is possible that a node has multiple predecessors and multiple successors .",
    "however , when there is no output contention or the problem is solved elsewhere , each node will have at most one predecessor . as to the number of successors , it depends on the type of the connection . in a multicast connection ,",
    "the source node has multiple successors , while in a unicast connection , only a single successor is possible . in the following sections",
    ", we will discuss the connection digraph based on this model and show that any connection digraph actually consists of a set of basic topologies as disjoint sub - digraphs .",
    "these basic topologies are defined as follows : + * definition 2 : * given a digraph @xmath121 with only one node , _",
    "i.e. _ @xmath122 .",
    "@xmath123 is called a _ null node _ if @xmath124 .",
    "otherwise @xmath123 is called a _ loopback _ when @xmath125 .",
    "+ in a connection digraph , a null node without predecessor and successor means there is neither input traffic coming from that port nor output traffic going to that port . for a port without incoming traffic , we assume the stuff bits are all @xmath126 s",
    ". however , a single node with a directed edge to itself means the input traffic goes back to the same port .",
    "this trivial cycle effectively denotes a loopback .",
    "a loopback @xmath127 can be made from a null node @xmath128 simply by linking the null node to itself .",
    "@xmath127 is called the extension loopback of @xmath128 , denoted by @xmath129 .",
    "an example consists of null nodes and loopbacks is shown in fig.[figure6](a ) .",
    "the numbers in the boxes represents the destination port numbers .",
    "an x represents no input traffic .",
    "its corresponding connection digraph is depicted in fig.[figure6](b )",
    ". +    * definition 3 : * given a connected digraph @xmath121 with @xmath76 ( @xmath130 ) nodes .",
    "@xmath123 is called a _ queue _ if    1 .",
    "there exists one and only one _ head _ @xmath131 , such that for each @xmath132 , @xmath133 .",
    "there exists one and only one _ tail _",
    "@xmath134 , such that for each @xmath132 , @xmath135 .",
    "3 .   for each @xmath136",
    ", there exists one and only one @xmath137 , such that @xmath138 .",
    "+    a queue can be represented as a linear array from the head @xmath139 to the tail @xmath140 , and is denoted as @xmath141 $ ] .",
    "this notation means the connection at a given time includes @xmath142 , @xmath143 ,  , and @xmath144 .",
    "note that there is no input traffic coming from @xmath140 and no output traffic going to @xmath139 .",
    "an example of a queue connection is shown in fig.[figure7](a ) , with its connection digraph @xmath145 $ ] depicted in fig.[figure7](b ) .",
    "each connection in a queue is apparently a unicast connection , because there is at most one outgoing arrow from each node .",
    "connecting the tail to the head of a queue forms a _ cycle _ , which is defined as follows : + * definition 4 : * given a connected digraph @xmath121 with @xmath76 ( @xmath130 ) nodes , @xmath123 is called a cycle if    1 .   for each @xmath132 , there exists one and only one @xmath137 , such that @xmath146 .",
    "2 .   for each @xmath132",
    ", there exists one and only one @xmath147 , such that @xmath148 . +    using the same notation ,",
    "a cycle connection is represented as @xmath149 .",
    "this means the connection at a given time includes @xmath150 , @xmath143 , ",
    ", @xmath151 , and @xmath152 . in the case of a cycle ,",
    "each port has its input as well as output .",
    "as described earlier , the tail and head of a queue @xmath153 can be connected to form a cycle @xmath154 .",
    "@xmath154 is called the extension cycle of @xmath153 , denoted by @xmath155 .",
    "an example of a cycle connection is shown in fig.[figure8](a ) , with its connection digraph @xmath156 depicted in fig.[figure8](b ) .    in order to describe a multicast connection ,",
    "we define the following connection digraphs : + * definition 5 : * given a connected digraph @xmath121 with @xmath76 ( @xmath130 ) nodes , @xmath123 is called a _ tree _ if    1 .",
    "there exists one and only one _ root _ @xmath157 , such that for each @xmath132 , @xmath158 .",
    "2 .   there exists a collection of nodes @xmath159 called leaves , such that for each @xmath160 and @xmath132 , @xmath161 .",
    "3 .   for each @xmath162",
    ", there exists at least one @xmath137 , such that @xmath138 .",
    "+    the nodes in a tree can be divided into three categories : root , internal nodes , and leaves . for the root",
    ", the output data is directed to possibly multiple output ports , but no data goes to the root .",
    "however , all leaves receive data without generating traffic .",
    "all internal nodes have exactly one predecessor and at least one successor .",
    "a tree can be represented as a concatenation of queues like @xmath163[v^1_h , \\ldots v^1_t]\\ldots[v^n_h , \\ldots v^n_t]$ ] , with @xmath164 be the root and each of the @xmath165 ( @xmath166 ) be the tail of one of the previous queues .",
    "an example of a tree connection is shown in fig.[figure9](a ) .",
    "if there are multiple numbers in a box , they represent a multicast connection .",
    "its corresponding connection digraph @xmath167[p1,p3][p1,p6,p4][p3,p5][p3,p7][p4,p0][p4,p2]$ ] is depicted in fig.[figure9](b ) .",
    "note that a queue is a special case of trees , with each node having only one successor .",
    "connecting any leaf to the root of a tree forms a _ forest _ , which is defined as follows : + * definition 6 : * given a connected digraph @xmath121 with @xmath76 nodes @xmath168 , @xmath123 is called a forest if    1 .",
    "there is one and only one cycle @xmath169 exists as a sub - digraph of @xmath123 .",
    "2 .   let @xmath170}. @xmath171 contains the cycle @xmath154 and a collection of disjointed null nodes , queues , and/or trees .",
    "each @xmath137 is either one of the null nodes , the head of a queue , or the root of a tree in @xmath171 .",
    "+    a forest basically contains one and only one cycle @xmath169 as a sub - digraph , with some of its nodes linked to either a null node , the head of a queue , or the root of a tree . following this structure ,",
    "a forest can be represented by @xmath172 , where @xmath173 , @xmath174 , @xmath175 ,  be either a null node , a queue , or a tree .",
    "a forest can be extended from a tree by connecting any leaf to the root .",
    "a forest @xmath176 formed by connecting the leaf @xmath177 with the root of @xmath178 is called the extension forest of @xmath178 , denoted by @xmath179 .",
    "an example of a forest connection is shown in fig.[figure10](a ) , with its connection digraph @xmath180[p3,p5][p3,p7],[p4][p4,p2][p4,p6]\\}$ ] depicted in fig.[figure10](b ) .",
    "since each node in a unicast connection has at most one successor , a unicast connection digraph only consists of disjoint null nodes , loopbacks , queues , and/or cycles as sub - digraphs .",
    "however , a multicast connection switches the data from one node to multiple successors , so a multicast connection digraph consists of disjoint null nodes , loopbacks , queues , cycles , trees , and/or forests as sub - digraphs . based on these results ,",
    "we describe the architecture of quantum switching and show how it can be used to implement a connection digraph in the next section .",
    "the proposed architecture for building a digital _ quantum switch _ is depicted in fig.[figure11 ] . to switch classical digital data in the quantum domain",
    ", first we have to convert the classical data into qubits .",
    "for example , in a quantum switch with optical i / o ports , an optical to quantum converter ( o / q ) is used to convert optical input into qubits . in an o / q , @xmath126 is converted into @xmath4 and @xmath15 is converted into @xmath5 .",
    "this can be done by exciting an electron using a light pulse of a certain frequency .",
    "all qubits are then permuted ( _ i.e. _ switched ) by the unitary operations under the supervision of the control subsystem .",
    "after the permutation , all qubits are converted back into their optical form by a quantum to optical converter ( q / o ) .",
    "this can be done by measuring the qubits to recover the original classical information .      in this section ,",
    "we show how a connection digraph can be implemented using * cn * gates .",
    "first we describe the connection digraph transformation guideline , then we demonstrate how this guideline can be used to implement a connection digraph .",
    "both unicasting and multicasting will be covered in detail .",
    "as described earlier , due to the nature of the connection , unicasting and multicasting have different connection digraphs .",
    "the digraph of a unicast connection has a collection of disjointed null nodes , loopbacks , queues , and/or cycles as sub - digraphs .",
    "however , in the digraph of a multicast connection , sub - digraphs like trees and forests are possible . as a matter of fact , these topologies are inter - related .",
    "this is shown in fig.[figure12 ] and summarized as follows :    1 .",
    "a null node can be regarded as a special case of a queue , denoted by the arrow s1 .",
    "a queue can be regarded as a special case of a tree , denoted by the arrow s2 .",
    "a loopback can be regarded as a special case of a cycle , denoted by the arrow s3 .",
    "a cycle can be regarded as a special case of a forest , denoted by the arrow s4 .",
    "of course , the binary relation `` _ is a special case of _ '' is transitive , so a null node and a loopback are special cases of tree and forest respectively .",
    "fig.[figure12 ] also shows the binary relation `` _ can be extended to _ '' as follows :    1 .",
    "a null node @xmath128 can be extended to a loopback @xmath181 , denoted by the process e1 .",
    "a queue @xmath153 can be extended to a cycle @xmath182 , denoted by the process e2 .",
    "a tree @xmath178 can be extended to a forest @xmath183 , denoted by the process e3 .",
    "note that the process of extension only transfers the incoming data from an idle inlet ( all @xmath126 s ) to an outlet which has no outgoing traffic , this does not change the switching function .",
    "the first step of our guideline for implementing a connection digraph is to transform each disjointed sub - digraph into loopbacks and/or cycles .",
    "since no circuit is needed to implement a loopback and only @xmath79 layers of * cn * gates are sufficient to implement a cycle , the switching can be done efficiently . some of these transformations are straightforward .",
    "for example , following e1 , a null node @xmath128 can be extended to a loopback @xmath181 . also ,",
    "following e2 , a queue @xmath153 can be extended to a cycle @xmath182 . however , for a tree or a forest , `` _ cycle extraction _ '' and `` _ link recovery _ '' have to be used . the process of cycle extraction and link recovery are described as follows .",
    "* cycle extraction * : a forest basically contains one and only one cycle @xmath169 as a sub - digraph with a subset of @xmath184 linked to either a null node , the head of a queue , or the root of a tree",
    ". the process of cycle extraction detaches all the null nodes , queues , and trees from the cycle by cutting all the edges in @xmath185 , as shown in fig.[figure13](a ) .",
    "this will transform a forest into one cycle ( arrow t1 in fig.[figure12 ] ) and a collection of null nodes , queues , and/or trees ( arrow t2 , t3 , and t4 respectively ) .",
    "each of the null nodes and queues can further be transformed into loopbacks and cycles via process e1 and e2 .",
    "if there are still any trees in the remaining digraph , extensions can be made again to transform the trees into forests ( process e3 ) and the procedure of cycle extraction can be applied recursively ( arrow t1 , t2 , t3 , and t4 ) until no trees are left .",
    "this procedure eventually transforms a forest into loopbacks and/or cycles , so that the permutation can be implemented using @xmath79 layers of * cn * gates in parallel .    * link recovery * :",
    "after each cycle has been implemented , the links that had been cut must be recovered .",
    "that is , for each @xmath186 , if @xmath187 but @xmath188 , @xmath137 must be replicated to @xmath147 , as shown in fig.[figure13](b ) .",
    "since there will be at most @xmath189 such @xmath190 s in a multicast connection digraph , in the worst case the replication can be done by @xmath191 layers of * cn * gate .",
    "this completes the implementation of a forest . for a tree",
    ", it can be extended to a forest via process e3 and then follow the algorithm to do further reduction in the same way .      following the guideline described above , in this section",
    "we show how a unicast connection digraph can be implemented with a time complexity of @xmath2 and a space complexity of @xmath1 .",
    "a typical unicast connection status at a given time is shown by the solid arrows in fig.[figure14](a ) .",
    "the switching module needs to perform two connection sub - digraphs : @xmath192.\\end{aligned}\\ ] ] these can be done by first extending @xmath153 to @xmath193 , as shown by the dash link in fig.[figure14](a ) , and then implement @xmath154 and @xmath194 using @xmath79 layers of * cn * gates .",
    "as described previously , the sub - digraph @xmath195 can be done by first applying @xmath196 and then @xmath197 the transposition @xmath198 is done by @xmath199 as shown by block b in fig.[figure14](b ) . in the same way ,",
    "@xmath200 , @xmath201 , @xmath202 are done by blocks c , e , f respectively .",
    "similarly , the implementation of @xmath193 can be done by first applying @xmath203 and then @xmath204 . these are implemented as blocks a and d in fig.[figure14](b ) .",
    "note that , independent of the switch size @xmath76 , the whole circuit can be completed in @xmath79 layers of * cn * gates over @xmath76 qubits .",
    "this achieves a time complexity of @xmath2 and a space complexity of @xmath1 .      in classical packet switching ,",
    "the input packets are usually buffered in the memory , multicasting can be easily achieved by reading the packet once and writing the same packet to multiple destinations . if the switching is done in the quantum domain , multicasting can be done by replicating the input qubit to multiple destination qubits .",
    "a typical multicasting configuration is shown in fig.[figure15](a ) . in this example",
    ", the switching module needs to perform the following connection digraph : @xmath205[q_1,q_4][q_1,q_3][q_3,q_5,q_2][q_3,q_6,q_7].\\ ] ]    following the guideline , each of the steps is shown below :    1 .",
    "the tree @xmath178 can be extended to a forest by linking any leaf , say @xmath206 , to @xmath207 .",
    "the cycle extraction procedure is then performed to cut @xmath208 and @xmath209 down .",
    "the result is shown in fig.[figure15](b ) .",
    "the extension and cycle extraction processes are recursively applied to @xmath210 $ ] until no tree is left , as shown in fig.[figure15](c ) .",
    "3 .   each of the disjointed sub - digraphs can be implemented in parallel .",
    "the sub - digraph @xmath211 can be done by first applying @xmath212 and then @xmath213 , while @xmath214 can be implemented directly , as shown by blocks a , b , d , e , and c in fig.[figure16 ] .",
    "4 .   each of the disconnected edges has to be recovered , so @xmath215 needs to be replicated to @xmath216 , and @xmath217 needs to be replicated to @xmath218 , as shown in fig.[figure15](d ) .",
    "these can be done by blocks f and g in fig.[figure16 ] .",
    "in general , the total number of layers for implementing a multicast connection digraph is @xmath219 , where @xmath220 is the maximum number of @xmath221 ( @xmath222 ) that are to be recovered . in the worst case , when one inlet is broadcast to all other @xmath223 outlets , the whole connection digraph can be done in @xmath3 layers of * cn * gates over @xmath76 qubits",
    "this results in a time complexity of @xmath3 and a space complexity of @xmath1 .",
    "the advantages of performing digital switching in the quantum domain are summarized as follows .",
    "first , switching in the quantum domain is _ strict - sense non - blocking_. a switch is called strict - sense non - blocking if the network can always connect each idle inlet to an arbitrary idle outlet independent of the current network permutation @xcite .",
    "note that switching in the space domain is not always non - blocking .",
    "sometimes , the required data path can not be established even if the output port is available .",
    "it has been shown that for an @xmath112 network in fig.[figure5](a ) ) to be non - blocking , there must be at least @xmath224 modules in the middle stage @xcite .",
    "however , switching in the quantum domain is actually a unitary transformation , which is always possible .",
    "this results in the fact that a quantum switch is non - blocking in the strict sense .",
    "second , it takes only @xmath76 qubits to build a quantum switch , the space complexity is @xmath1 in terms of the number of qubits .",
    "the problem of space complexity is an important issue in the classical space switching . to make a classical space switch non - blocking , a certain number of modules in the middle stage have to be used to allocate a physical path for each connection , so the number of cross - points increases with the size of the switch .",
    "for example , with optimal grouping , the minimum number of cross - points for the switch shown in fig.[figure5](a ) is @xmath225 , where @xmath76 is the total number of inlets / outlets @xcite .",
    "however , an @xmath112 quantum switch uses only @xmath76 qubits as the basis to perform the switching , which is a reasonable resource consumption .",
    "third , quantum switching is scalable in terms of time complexity . in a classical time switch ,",
    "usually the bottleneck is the speed of the switching device . because when the throughput increases , the time duration for switching a particular bit of data decreases .",
    "for example , in a memory switch with throughput @xmath226 , the memory speed must be at least @xmath227 to allow one read and one write operation to be performed .",
    "however , in the quantum switching , the time complexity is not sensitive to the throughput .",
    "a high throughput quantum switch can be achieved simply by increasing the number of i / o ports , which only induces a reasonable amount ( @xmath1 ) of space consumption . however , even in the worst case scenario , the throughput gain still outweights the time penalty in a classical time domain switch ( @xmath1 v.s .",
    "@xmath3 ) .",
    "networks are rapidly growing due to increased number of users and rising demands for bandwidth - intensive services . to support such a huge traffic volume , a wide range of different technologies",
    "are being proposed as the core of a high performance switch . in this paper , an architecture of digital quantum switching",
    "is presented .",
    "the proposed mechanism allows digital data to be switched using a series of quantum operations .",
    "the procedures of how to implement unicast and multicast connections are discussed in detail . in terms of the blocking rate , this architecture is strict - sense non - blocking . from a complexity point of view , the space complexity grows only linearly with the number of i / o ports , and the time complexity is constant for unicasting and logarithmic for multicasting .",
    "this architecture is suitable for deploying high throughput switching devices so that high bandwidth demand can be met .",
    "99 p. benioff , `` the computer as a physical system : a microscopic quantum mechanical hamiltonian model of computers as represented by turing machines , '' _ j. stat .",
    "22(5 ) , pp . 563 - 591 , 1980 .            c. bennett and g. brassard , ``",
    "quantum cryptography : public key distribution and coin tossing , '' in _ proc . of ieee international conference on computers systems and",
    "signal processing _",
    ", 1984 , pp .",
    "175 - 179 .",
    "a. barenco , `` a universal two - bit gate for quantum computation , '' _ proc .",
    "a _ , vol .",
    "679 - 683 , 1995 . c. moore and m. nilsson .",
    "( 1998 , aug . ) .",
    "parallel quantum computation and quantum codes .",
    "[ online ] .",
    "available : http://www.arxive.org / quant - ph/9808027/."
  ],
  "abstract_text": [
    "<S> in this paper , we present an architecture and implementation algorithm such that digital data can be switched in the quantum domain . first we define the connection digraph which can be used to describe the behavior of a switch at a given time , then we show how a connection digraph can be implemented using elementary quantum gates . </S>",
    "<S> the proposed mechanism supports unicasting as well as multicasting , and is strict - sense non - blocking . </S>",
    "<S> it can be applied to perform either circuit switching or packet switching . </S>",
    "<S> compared with a traditional space or time domain switch , the proposed switching mechanism is more scalable . assuming an @xmath0 quantum switch </S>",
    "<S> , the space consumption grows linearly , _ </S>",
    "<S> i.e. _ @xmath1 , while the time complexity is @xmath2 for unicasting , and @xmath3 for multicasting . based on these advantages , </S>",
    "<S> a high throughput switching device can be built simply by increasing the number of i / o ports . </S>"
  ]
}