{
  "article_text": [
    "turbo codes are a new class of coding systems that offer near optimal coding performance while requiring only moderate decoding complexity [ 1 ] .",
    "it is known that the widely - used iterative decoding algorithm for turbo codes is in fact a special case of a quite general local message - passing algorithm for efficiently computing posterior probabilities in acyclic directed graphical ( adg ) models ( also known as  belief networks \" ) [ 2 , 3 ] .",
    "thus , it is appropriate to analyze the properties of iterative - decoding by analyzing the properties of the associated adg model .    in this paper",
    "we derive analytic approximations for the probability that a randomly chosen node in the graph for a turbo code participates in a simple cycle of length less than or equal to @xmath0 .",
    "the resulting expressions provide insight into the distribution of cycle lengths in turbo decoding .",
    "for example , for block lengths of @xmath6 , a randomly chosen node in the graph participates in cycles of length less than or equal to @xmath7 with probability 0.002 , but participates in cycles of length less than or equal to 20 with probability 0.9998 .    in section [ sec : notation ] we review briefly the idea of adg models , define the notion of a _ turbo graph _ ( and the related concept of a _ picture _ ) , and discuss how the cycle - counting problem can be addressed by analyzing how pictures can be embedded in a turbo graph . with these basic tools",
    "we proceed in section [ sec : count ] to obtain closed - form expressions for the number of pictures of different lengths . in section [ sec : prob ] we derive upper and lower bounds on the probability of embedding a picture in a turbo graph at a randomly chosen node . using these results , in section [ sec : nocycles ] we derive approximate expressions for the probability of no simple cycles of length @xmath0 or less .",
    "section [ sec : simulation ] shows that the derived analytical expressions are in close agreement with simulation . in section [ sec : srandom ] we investigate the effect of the s - random permuter construction .",
    "section [ sec : ldpc ] extends the analysis to ldpc codes and compares both analytic and simulation results on cycle lengths .",
    "section [ sec : discussion ] contains a discussion of what these results may imply for iterative decoding in a general context and section [ sec : conclusion ] contains the final conclusions .",
    ", rate @xmath8 turbocode . ]",
    "an adg model ( also known as a belief network ) consists of a both a directed graph and an associated probability distribution over a set of random variables of interest .",
    "there is a 1 - 1 mapping between the nodes in the graph and the random variables . loosely speaking",
    ", the presence of a directed edge from node @xmath9 to @xmath10 in the graph means that @xmath10 is assumed to have a direct dependence on @xmath9 (  @xmath9 causes @xmath10 \" ) .",
    "more generally , if we identify @xmath11 as the set of all _ parents _ of @xmath9 in the graph ( namely , nodes which point to @xmath9 ) , then @xmath9 is conditionally independent of all other variables ( nodes ) in the graph ( except for @xmath9 s descendants ) given the values of the variables ( nodes ) in the set @xmath11 .",
    "for example , a markov chain is a special case of such a graph , where each variable has a single parent .",
    "the general adg model framework is quite powerful in that it allows us to systematically model and analyze independence relations among relatively large and complex sets of random variables [ 4 ] .",
    "as shown in [ 2 , 3 , 5 ] , turbo codes can be usefully cast in an adg framework .",
    "figure [ turbo1 ] shows the adg model for a rate @xmath8 turbo code .",
    "the @xmath12 nodes are the original information bits to be coded , the @xmath13 nodes are the linear feedback shift register outputs , the @xmath14 nodes are the codeword vector which is the input to the communication channel , and the @xmath15 nodes are the channel outputs .",
    "the adg model captures precisely the conditional independence relations which are implicitly assumed in the turbo coding framework , i.e. , the input bits @xmath12 are marginally independent , the state nodes @xmath13 only depend on the previous state and the current input bit , and so forth .",
    "the second component of an adg model ( in addition to the graph structure ) is the specification of a joint probability distribution on the random variables .",
    "a fundamental aspect of adg models is the fact that this joint probability distribution decomposes into a simple factored form .",
    "letting @xmath16 be the variables of interest , we have @xmath17 i.e. , the overall joint distribution is the product of the conditional distributions of each variable @xmath18 given its parents @xmath19 .",
    "( we implicitly assume discrete - valued variables here and refer to distributions ; however , we can do the same factorization with density functions for real - valued variables , or with combinations of densities and distributions ) .    to specify the full joint distribution , it is sufficient to specify the individual conditional distributions . thus , if the graph is sparse ( few parents ) there can be considerable savings in parameterization of the model . from a decoding viewpoint",
    ", however , the fundamental advantage of this factorization is that it permits the efficient calculation of posterior probabilities ( or optimal bit decisions ) of interest .",
    "specifically , if the values for a subset of variables are known ( e.g. , the received codeword vector @xmath15 ) we can efficiently compute the posterior probability for the information bits @xmath20 , @xmath21 .",
    "the power of the adg framework is that there exist exact local message - passing algorithms which calculate such posterior probabilities .",
    "these algorithms typically have time complexity which is linear in the diameter of the underlying graph times a factor which is exponential in the cardinality of the variables at the nodes in the graph .",
    "the algorithm is provably convergent to the true posterior probabilities provided the graph structure does not contain any loops ( a loop is defined as a cycle in the undirected version of the adg , i.e. , the graph where directionality of the edges is dropped ) .",
    "the message - passing algorithm of pearl [ 6 ] was the earliest general algorithm ( and is perhaps the best - known ) in this general class of  probability propagation \" algorithms .",
    "for regular convolutional codes , pearl s message passing algorithm applied to the convolutional code graph structure ( e.g. , the lower half of figure 1 ) directly yields the bcjr decoding algorithm [ 7 ] .    if the graph has loops then pearl s algorithm no longer provably converges , with the exception of certain special cases ( e.g. , see [ 8 ] ) .",
    "a  loop \" is any cycle in the graph , ignoring directionality of the edges .",
    "the turbocode adg of figure 1 is an example of a graph with loops .",
    "in essence , the messages being passed can arrive at the same node via multiple paths , leading to multiple  over - counting \" of the same information .",
    "a widely used strategy in statistics and artificial intelligence is to reduce the original graph with loops to an equivalent graph without loops ( this can be achieved by clustering variables in a judicious manner ) and then applying pearl s algorithm to the new graph . however ,",
    "if one applies this method to adgs for realistic turbo codes the resulting graph ( without loops ) will contain at least one node with a large number of variables .",
    "this node will have cardinality exponential in this number of variables , leading to exponential complexity in the probability calculations referred to above . in the worst - case",
    "all variables are combined into a single node and there is in effect no factorization .",
    "thus , for turbo codes , there is no known efficient exact algorithm for computing posterior probabilities ( i.e. , for decoding ) .",
    "curiously , as shown in [ 2 , 3 , 4 ] , the iterative decoding algorithm of [ 1 ] can be shown to be equivalent to applying the local - message passing algorithm of pearl directly to the adg structure for turbo codes ( e.g. , figure 1 ) , i.e. , applying the iterative message - passing algorithm to a graph with loops .",
    "it is well - known that in practice this decoding strategy performs very well in terms of producing lower bit error rates than any virtually other current coding system of comparable complexity .",
    "conversely , it is also well - known that message - passing in graphs with loops can converge to incorrect posterior probabilities ( e.g. , [ 9 ] ) .",
    "thus , we have the  mystery \" of turbo decoding : why does a provably incorrect algorithm produce an extremely useful and practical decoding algorithm ?",
    "in the remainder of this paper we take a step in understanding message - passing in graphs with loops by characterizing the distribution of cycle - lengths as a function of cycle length .",
    "the motivation is as follows : if it turns out that cycle - lengths are  long enough \" then there may be a well - founded basis for believing that message - passing in graphs with cycles of the appropriate length are not susceptible to the  over - counting \" problem mentioned earlier ( i.e. , that the effect of long loops in practice may be negligible ) .",
    "this is somewhat speculative and we will return to this point in section [ sec : discussion ] .",
    "an additional motivating factor is that the characterization of cycle - length distributions in turbo codes is of fundamental interest by itself .      ]    . ]    in figure [ turbo1 ] the underlying cycle structure is not affected by the @xmath14 and @xmath15 nodes , i.e. , they do not play any role in the counting of cycles in the graph . for simplicity",
    "they can be removed from consideration , resulting in the simpler graph structure of figure [ turbo2 ] .",
    "furthermore , we will drop the directionality of the edges in figure [ turbo2 ] and in the rest of the paper , since the definition of a cycle in an adg is not a function of the directionality of the edges on the cycle .    to simplify our analysis",
    "further , we initially ignore the nodes @xmath22 , @xmath23 , @xmath24 , to arrive at a _ turbo graph _ in figure [ turbo3 ] ( we will later reintroduce the @xmath12 nodes ) .",
    "formally , a turbo graph is defined as follows :    1 .",
    "there are two parallel chains , each having @xmath1 nodes .",
    "( for real turbo codes , @xmath1 can be very large , e.g. @xmath25 . ) 2 .",
    "each node is connected to one ( and only one ) node on the other chain and these one - to - one connections are chosen randomly , e.g. , by a random permutation of the sequence @xmath26 .",
    "( in section [ sec : srandom ] we will look at another kind of permutation , the  s - random permutation . \" ) 3 .   a turbo graph as defined above is an _ undirected _ graph . but to differentiate between edges on the chains and edges connecting nodes on different chains , we label the former as being _ directed _ ( from left to right ) , and the latter _",
    "undirected_. ( note : this has nothing to do with directed edges in the original adg model , it is just a notational convenience . ) so an internal node has exactly three edges connected to it : one directed edge going out of it , one directed edge going into it , and one undirected edge connecting it to a node on the other chain .",
    "a boundary node also has one undirected edge , but only one directed edge .    given a turbo graph , and a randomly chosen node in the graph",
    ", we are interested in :    1 .   counting the number of simple cycles of length @xmath0 which pass through this node ( where a simple cycle is defined as a cycle without repeated nodes ) , and 2 .",
    "finding the probability that this node is not on a simple cycle of length @xmath0 or less , for @xmath27 ( clearly the shortest possible cycle in a turbo graph is 4 ) .      to assist our counting of cycles ,",
    "we introduce the notion of a  picture .",
    "\" first let us look at figure [ turbo4 ] , which is a single simple cycle taken from figure [ turbo3 ] .",
    "when we untangle figure [ turbo4 ] , we get figure [ turbo5 ] .",
    "if we omit the node labels , we have figure [ turbo6 ] which we call a _ picture_.    formally , a picture is defined as follows :    1 .",
    "it is a simple cycle with a single distinguished vertex ( the circled one in the figure ) .",
    "it consists of both directed edges and undirected edges .",
    "the number of undirected edges @xmath28 is even and @xmath29 .",
    "4 .   no two undirected edges are adjacent .",
    "adjacent directed edges have the same direction .",
    "we will use pictures as a convenient notation for counting simple cycles in turbo graphs .",
    "for example , using figure [ turbo6 ] as a template , we start from node @xmath30 in figure [ turbo3 ] .",
    "the first edge in the picture is a directed forward edge , so we go from @xmath30 along the forward edge which leads us to @xmath31 .",
    "the second edge in the picture is also a directed forward edge , which leads us from @xmath31 to @xmath32 .",
    "the next edge is an undirected edge , so we go from @xmath32 to @xmath33 on the other chain . in the same way , we go from @xmath33 to @xmath34 , then to @xmath30 , which is our starting point . as the path we just traversed starts from @xmath30 and ends at @xmath30 , and there are no repeated nodes in the path",
    ", we conclude that we have found a simple cycle ( of length 5 ) which is exactly what we have in figure [ turbo4 ] .",
    "we can easily enumerate all the different pictures of length @xmath35 , and use them as templates to find all the simple cycles at a node in a turbo graph .",
    "this approach is complete because any simple cycle in a graph has a corresponding picture .",
    "( to be exact , it has two pictures because we can traverse it in both directions . )",
    "the process of finding a simple cycle using a picture as a template can also be thought of as _ embedding _ a picture at a node in a turbo graph .",
    "this embedding may succeed , as in our example above , or it may fail , e.g. , we come to a previously - visited node other than the starting node , or we are told to go forward at the end of a chain , etc . using pictures , the problem of counting the number of simple cycles of length @xmath0 can be formulated this way :    * count the number of different pictures of length @xmath0 , * for each distinct picture , calculate the probability of embedding it in a turbo graph at a randomly chosen node .",
    "we wish to determine the number of different pictures of length @xmath0 with @xmath28 undirected edges .",
    "first , let us define two functions :     @xmath36 : :    = the number of ways of picking @xmath37 disjoint edges ( i.e. ,    no two edges are adjacent to each other ) from a cycle of length    @xmath38 , with a distinguished vertex and a distinguished    clockwise direction .",
    "@xmath39 : :    = the number of ways of picking @xmath37 independent edges from    a path of length @xmath38 , with a distinguished endpoint .",
    "these two functions can be evaluated by the following recursive equations : @xmath40 and the solutions are @xmath41    thus , the number of different pictures of length @xmath0 and with @xmath28 undirected edges , @xmath42 ( and @xmath28 is even ) , is given by @xmath43    where @xmath44 is the number of different ways to give directions to the directed edges .",
    "the division by two occurs because the direction of the picture is irrelevant . because of the @xmath28 undirected edges , there are @xmath28 segments of directed edges , with one or more edges in a segment ; the edges within a segment must have a common direction ( property 4 of a picture ) .",
    "in this section we derive the probability @xmath45 of embedding a picture of length @xmath0 and with @xmath28 undirected edges at a node in a turbo graph with chain length @xmath1 .",
    "let us first consider a simple picture where the directed edges and undirected edges alternate ( so @xmath46 ) and all the directed edges point in the same ( forward ) direction .",
    "let us label the nodes of the picture as @xmath47,@xmath48,@xmath49,@xmath50 , @xmath51,@xmath52,@xmath53,@xmath54,@xmath24 , + @xmath55,@xmath56,@xmath57,@xmath58 .",
    "we want to see if this picture can be successfully embedded , i.e. if the above nodes are a simple cycle .",
    "let us call the chain on which @xmath47 resides _ side 1 _ , and the opposite chain _",
    "side 2_. the probability of successfully embedding the picture at @xmath47 is the product of the probabilities of successfully following each edge of the picture , namely ,    * @xmath59 .",
    "this will fail if @xmath47 is the right - most node on side 1 .",
    "so @xmath60 .",
    "* @xmath61 . here",
    "* @xmath63 .",
    "this will fail if @xmath49 is the right - most node on side 2 .",
    "so @xmath60 .",
    "* @xmath64 .",
    "@xmath51 is the  cross - chain \" neighbor of @xmath50 . as there is already a connection between @xmath48 and @xmath49 , @xmath51 can not possibly coincide with @xmath48",
    "; but it may coincide with @xmath47 and make the embedding fail .",
    "this gives us @xmath65 .",
    "+ more generally , if there are @xmath66 visited nodes on side 1 , then @xmath67 of them already have their connections to side 2 .",
    "so from a node on side 2 , there are only @xmath68 nodes on side 1 to go to , @xmath67 of which are visited nodes .",
    "so @xmath69 .",
    "* @xmath70 .",
    "here we have two previously visited nodes ( @xmath47,@xmath48 ) . when there are @xmath66 previously - visited nodes , the unvisited nodes are partitioned into up to @xmath67 segments , and after we come from side 2 to side 1 , if we fall on the right - most node of one of the segments , the embedding will fail : either we go off the chain , or we go to a previously - visited node . in this way , we have @xmath71 . * @xmath72 * @xmath73 . *",
    "@xmath75 . this final step ( @xmath74 ) completes the cycle .",
    "multiplying these terms , we arrive at @xmath76 ^ 2 \\nonumber \\\\ & \\leq &   p_n(k , m ) \\\\ & \\leq & \\frac{1}{n-\\frac{m}{2 } }    \\prod_{s=0}^{s=\\frac{m}{2 } }      \\left [   \\left(1-\\frac{s}{n - s}\\right )        \\left(1-\\frac{1}{n-2s}\\right )      \\right]^2 \\nonumber\\end{aligned}\\ ] ]    for large @xmath1 and small @xmath28 , the ratio between the upper bound and the lower bound is close to 1 .",
    "for example , when @xmath25 and @xmath77 the ratio is @xmath78 .",
    "the above analysis can be extended easily to the general case where :    * the directed edges in the picture are not constrained to be unidirectional .",
    "* @xmath79 .",
    "( because the @xmath28 undirected edges can not be adjacent to each other , the total number of edges @xmath0 must be @xmath80 . )    when @xmath46 , no two directed edges are adjacent .",
    "equivalently , there are @xmath28 segments of directed edges , and in each segment , there is only one edge . when @xmath81 , we still have @xmath28 segments of directed edges , but there is more than one edge in a segment .",
    "suppose for @xmath82 , the @xmath83th segment of side 1 has @xmath84 edges , and the @xmath83th segment of side 2 has @xmath85 edges .",
    "@xmath86 is given by :    @xmath87 \\nonumber \\\\",
    "& \\leq & p_n(k , m ) \\label{bound1 } \\\\ & \\leq & \\frac{1}{n-\\frac{m}{2 } }    \\prod_{s=0}^{s=\\frac{m}{2 } }      \\left [   \\left(1-\\frac{\\sum_{i=1}^{s}a_i } { n - s}\\right )        \\left(1-\\frac{1}{n-\\sum_{i=1}^{s}(a_i+1)}\\right )              \\left(1-\\frac{\\sum_{i=1}^{s}b_i } { n - s}\\right )        \\left(1-\\frac{1}{n-\\sum_{i=1}^{s}(b_i+1)}\\right )      \\right ] \\nonumber\\end{aligned}\\ ] ]    from @xmath88    @xmath89    @xmath90 and @xmath91 we can simplify the bounds in equation [ bound1 ] to @xmath92 ^ 2 \\nonumber \\\\ & \\leq   & p_n(k , m ) \\label{bounds } \\\\   & \\leq & \\frac{1}{n-\\frac{m}{2 } }    \\prod_{s=0}^{s=\\frac{m}{2 } }      \\left [   \\left(1-\\frac{s}{n - s}\\right )        \\left(1-\\frac{1}{n-2s)}\\right )      \\right]^2 \\nonumber\\end{aligned}\\ ] ] the ratio between the upper bound and the lower bound is still close to 1 .",
    "for example , when @xmath93 , the ratio is @xmath94 .",
    "given that the bounds are so close in the range of @xmath95 , and @xmath28 of interest , in the remainder of the paper we will simply approximate @xmath45 by the arithmetic average of the upper and lower bound .",
    "in section [ sec : count ] we derived @xmath96 , the number of different pictures of length @xmath0 with @xmath28 undirected cycles ( equation ( [ npic ] ) ) . in section",
    "[ sec : prob ] we estimated @xmath45 , the probability of embedding a picture ( with length @xmath0 and @xmath28 undirected edges ) at a node in a turbo graph with chain length @xmath1 ( equation ( [ bounds ] ) ) . with these two results , we can now determine the probability of no cycle of length @xmath0 or less at a randomly chosen node in a turbo graph of length @xmath1 .",
    "let @xmath97 be the probability that there are no cycles of length @xmath0 at a randomly chosen node in a turbo graph .",
    "thus , @xmath98 in this independence approximation we are assuming that at any particular node the event  there are no cycles of length @xmath0 \" is independent of the event  there are no cycles of length @xmath99 or lower . \"",
    "this is not strictly true since ( for example ) the non - existence of a cycle of length @xmath99 can make certain cycles of length @xmath0 impossible ( e.g. , consider the case @xmath100 ) .",
    "however , these cases appear to be relatively rare , leading us to believe that the independence assumption is relatively accurate to first - order",
    ".    now we estimate @xmath101 , the probability of no cycle of length @xmath0 at a randomly chosen node .",
    "denote the individual pictures of length @xmath0 as @xmath102,@xmath103,@xmath24 , and let @xmath104 mean that the @xmath83th picture fails to be embedded .",
    "@xmath105    here we make a second independence assumption which again may be violated in practice .",
    "the non - existence of embedding of certain pictures ( the event being conditioned on ) will influence the probability of existence of embedding of other pictures .",
    "however , we conjecture that this dependence is rather weak and that the independence assumption is again a good first - order approximation .",
    "we ran a series of simulations where 200 different turbo graphs ( i.e. , each graph has a different random permuter ) of length @xmath106 are randomly generated . for each graph",
    ", we counted the simple cycles of length @xmath107 , at 100 randomly chosen nodes . in total , the cycle counts at @xmath108 nodes are collected to generate an empirical estimate of the true @xmath109 .",
    "the theoretical estimates are derived by using the independence assumptions of equations ( [ independence1 ] ) and ( [ maineqn ] ) .",
    "@xmath45 is calculated as the arithmetic average of the two bounds in equation ( [ bounds ] ) .",
    "the simulation results , together with the theoretical estimates are shown in figure [ appxtable ] .",
    "the difference in error is never greater than about 0.005 in probability .",
    "note that neither the sample - based estimates nor the theoretical estimates are exact .",
    "thus , differences between the two could be due to either sampling variation or error introduced by the independence assumptions in the estimation .",
    "the fact that the difference in errors is non - systematic ( i.e. , contains both positive and negative errors ) suggests that both methods of estimation are fairly accurate . for comparison ,",
    "in the last column of the table we provide the estimated standard deviation @xmath110 , where @xmath111 is the simulation estimate .",
    "we can see that the differences between @xmath112 and @xmath113 are within @xmath114 of @xmath113 except for the last three rows where @xmath113 is quite small . for large @xmath0",
    "we can expect that the simulation estimate of @xmath111 will be less accurate since we are estimating relatively rare events .",
    "thus , since our estimate of @xmath115 is a function of @xmath111 , for larger @xmath0 values any differences between theory and simulation could be due entirely to sampling error .     or less , as a function of @xmath0.,width=432 ]    figure [ numericresult ] shows a plot of the estimated probability that there are no cycles of length @xmath0 or less at a randomly chosen node .",
    "there appears to be a  soft threshold effect \" in the sense that beyond a certain value of @xmath0 , it rapidly becomes much more likely that there are cycles of length @xmath0 or less at a randomly chosen node .",
    "the location of this threshold increases as @xmath1 increases ( i.e. , as the length of the chain gets longer ) .     or less , including the @xmath12 nodes ( figures [ turbo2 ] ) in the adg for turbo decoding , as a function of @xmath0.,width=432 ]",
    "when @xmath1 is sufficiently large , ( i.e. , @xmath116 ) , the probability of embedding a picture ( equation ( [ bounds ] ) ) can simply written as @xmath117 in this case , we do not differentiate between pictures with different numbers of undirected edges the total number of pictures of length @xmath0 is @xmath118    the log probability of no cycle of length @xmath0 is then @xmath119 from which one has @xmath120    thus , the probability of no cycle of length @xmath0 or less is approximately @xmath2 .",
    "this probability equals 0.5 at @xmath121 , which provides an indication of how the curve will shift to the right as @xmath1 increases . roughly speaking , to double @xmath122",
    ", one would have to square the block - length of the code from @xmath1 to @xmath123 .",
    "up to this point we have been counting cycles in the turbo graph ( figure [ turbo3 ] ) where we ignore the information nodes , @xmath124 .",
    "the results can readily be extended to include these @xmath12 nodes by counting each undirected edge ( that connects nodes from different chains ) as two edges .",
    "let @xmath125 be the number of undirected edges and the cycle length , respectively , when we ignore the @xmath12 nodes . from @xmath126 , we have @xmath127 .    substituting these into equation [ maineqn ] , we have @xmath128    using equation [ includeu ] , we plot in figure [ numericu ] the estimated probability of no cycles of length @xmath0 or less in the graph for turbo decoding which includes the @xmath12 nodes ( figure [ turbo2 ] ) .",
    "not surprisingly , the effect is to  shift \" the graph to the right , i.e. , adding @xmath12 nodes has the effect of lengthening the typical cycle .    for the purposes of investigating the properties of the message - passing algorithm , the relevant nodes on a cycle may well be those which are directly connected to a @xmath15 node ( for example , the @xmath12 nodes in a systematic code and any @xmath13 nodes which are producing a transmitted codeword ) .",
    "the rationale for including these particular nodes ( and not including nodes which are not connected to a @xmath15 node ) is that these are the only  information nodes \" in the graph that in effect can transmit messages that potentially lead to multiple - counting .",
    "it is possible that it is only the number of these nodes on a cycle which is relevant to message - passing algorithms .",
    "thus , for a particular code structure , the relevant nodes to count in a cycle could be redefined to be only those which have an associated @xmath15 .",
    "the general framework we have presented here can easily be modified to allow for such counting .",
    "note also that various extensions of turbo codes are also amenable to this form of analysis .",
    "for example , for the case of a turbo code with more than two constituent encoders , one can generalize the notion of a picture and count accordingly .",
    "in our construction of the turbo graph ( figure [ turbo3 ] ) we use a random permutation , i.e. the one - to - one connections of nodes from the two chains are chosen randomly by a random permutation . in this section",
    "we look at the  s - random \" permutation [ 10 ] , a particular semi - random construction .        formally , the s - random permutation is a random permutation function @xmath129 on the sequence @xmath130 such that @xmath131 the s - random permutation stipulates that if two nodes on a chain are within a distance @xmath132 of each other , their counterparts on the other chain can not be within a distance @xmath132 of each other .",
    "this restriction will eliminate some of the cycles occurring in a turbo graph with a purely random permutation .",
    "for example , there can not be any cycles in the graph of length @xmath1334 , 5 , 6 or 7 .",
    "thus , the s - random construction disallows cycles of length @xmath0 for @xmath5 .",
    "however , from section [ sec : simulation ] we know that these short cycles ( @xmath5 ) occur relatively rarely in realistic turbo codes . in figure [ srand8 ]",
    ", we show a cycle of length @xmath134 . as long as the distances of @xmath135 and @xmath136 are large enough ( @xmath137 ) , cycles of lengths @xmath138 are possible for any @xmath132 .",
    "+ & random & + k & permutation & @xmath139 & @xmath140 & @xmath141 & @xmath142 + 4 & 1.0000 & 1.0000 & 1.0000 & 1.0000 & 1.0000 + 5 & 0.9998 & 1.0000 & 1.0000 & 1.0000 & 1.0000 + 6 & 0.9995 & 1.0000 & 1.0000 & 1.0000 & 1.0000 + 7 & 0.9991 & 1.0000 & 1.0000 & 1.0000 & 1.0000 + 8 & 0.9984 & 0.9996 & 0.9998 & 0.9998 & 0.9998 + 9 & 0.9967 & 0.9983 & 0.9987 & 0.9987 & 0.9984 + 10 & 0.9924 & 0.9949 & 0.9945 & 0.9956 & 0.9950 + 11 & 0.9838 & 0.9890 & 0.9891 & 0.9877 & 0.9887 + 12 & 0.9684 & 0.9739 & 0.9765 & 0.9736 & 0.9748 + 13 & 0.9389 & 0.9460 & 0.9503 & 0.9449 & 0.9478 + 14 & 0.8818 & 0.8877 & 0.8920 & 0.8904 & 0.8913 + 15 & 0.7754 & 0.7804 & 0.7847 & 0.7858 & 0.7833 + 16 & 0.6006 & 0.6114 & 0.6014 & 0.6121 & 0.6006 + 17 & 0.3589 & 0.3671 & 0.3629 & 0.3731 & 0.3647 + 18 & 0.1259 & 0.1315 & 0.1289 & 0.1360 & 0.1330 + 19 & 0.0155 & 0.0146 & 0.0164 & 0.0184 & 0.0183 + 20 & 0.0002 & 0.0004 & 0.0003 & 0.0004 &",
    "0.0008 +    we simulated s - random graphs and counted cycles in the same manner as described in section [ sec : simulation ] , except that the random permutation was now carried out in the s - random fashion as described in [ 10 ] .",
    "the results in table [ tab : srandom ] show that changing the value of @xmath132 does not appear to significantly change the nature of the cycle - distribution .",
    "the s - random distributions of course have zero probability for @xmath143 , but for @xmath144 the results from both types of permutation appear qualitatively similar , with a small systematic increase in the probability of a node not having a cycle of length @xmath0 for the s - random case ( relative to the purely random permutation ) . as the cycle - length @xmath0 increases , the difference between the s - random and random distributions narrow . for relatively short cycles with values of @xmath0 between 8 and 12 ( say )",
    "the difference is relatively substantial if one considers the the probability of _ having _ a cycle of length less than or equal to @xmath0 .",
    "for example , for @xmath145 and @xmath142 , the s - random probability is 0.0050 while the probability for the random permuter is 0.0076 ( see table [ tab : srandom ] ) .",
    "in [ 11 , 12 ] it was shown ( empirically ) that the s - random construction does not have an  error floor \" of the form associated with a random graph , i.e. , the probability of bit error steadily decreases with increasing snr for the s - random construction .",
    "the improvement in bit error rate is attributed to the improved weight distribution properties of the code resulting from the s - random construction . from a cycle - length viewpoint",
    "the s - random construction essentially only differs slightly from the random construction ( e.g. , by eliminating the relatively rare cycles of length @xmath146 and @xmath147 ) .",
    "note , however , that because two graphs have very similar cycle length distributions does not necessarily imply that they will have similar coding performance .",
    "it is possible that the elimination of the very short cycles combined with the small systematic increase in the probability of not having a cycle of length @xmath0 or less ( @xmath144 ) , may be a contributing factor in the observed improvement in bit error rate , i.e. , that even a small systematic reduction in the number of short cycles in the graph may translate into the empirically - observed improvement in coding performance .",
    "ldpc codes are another class of codes exhibiting characteristics and performance similar to turbo codes [ 13 , 14 ] . like turbo codes ,",
    "the underlying adg has loops , rendering exact decoding intractable . once again , however , iterative decoding ( aka message - passing ) works well in practice .",
    "recent analyses of iterative decoding for ldpc codes have assumed that there are no short cycles in the ldpc graph structure [ 15 , 16 ] .",
    "thus , as with turbo codes , it is again of interest to investigate the distribution of cycle lengths for realistic ldpc codes .",
    "the graph structure of regular ldpc codes is shown in figure [ ldpc ] ( an _ ldpc graph _ ) . in this bipartite graph , at the bottom are @xmath1 variable nodes @xmath148 , and at the top are the @xmath149 check nodes @xmath150 . for the regular random ldpc construction",
    "each variable node has degree @xmath151 , each check node has degree @xmath152 ( obviously @xmath153 ) , and the connectivity is generated in a random fashion .    .",
    "]    using our notion of a _ picture _ , we can also analyze the distribution of cycle lengths in ldpc graphs as we have done in turbo graphs .",
    "obviously , here the cycle length must be even .",
    "we define a picture for an ldpc graph as follows .",
    "recall that in a turbo graph , the edges in a picture are labeled as _ undirected , forward _ , or _",
    "backward_. for an ldpc graph , we label an edge in a picture by a number @xmath83 between 1 and @xmath151 ( or between 1 and @xmath152 ) to denote that this edge is the @xmath83-th edge coming from a node .",
    "first consider the probability of successfully embedding a picture of length @xmath46 at a randomly chosen node in an ldpc graph .",
    "@xmath154 \\nonumber \\\\ & &   \\cdot \\left [ ( 1-\\frac{1}{d_v})(1-\\frac{1}{c-1 } ) \\right ] \\nonumber \\\\ & &   \\cdot \\left [ ( 1-\\frac{1}{d_c})(1-\\frac{2}{n-1 } ) \\right ] \\nonumber \\\\ & &   \\cdot \\left [ ( 1-\\frac{1}{d_v})(1-\\frac{2}{c-1 } ) \\right ] \\nonumber \\\\ & & \\cdots \\nonumber \\\\ & &   \\cdot \\left [ ( 1-\\frac{1}{d_c})(1-\\frac{m-2}{n-1 } ) \\right ] \\nonumber \\\\ & &   \\cdot \\left [ ( 1-\\frac{1}{d_v})(1-\\frac{m-2}{c-1 } ) \\right ] \\nonumber \\\\ & &   \\cdot \\left [ ( 1-\\frac{1}{d_c})\\frac{1}{n-1 } \\right ] \\nonumber \\\\ & = & \\frac{1}{n-1 } \\left ( 1-\\frac{1}{d_c } \\right ) ^{m } \\left ( 1-\\frac{1}{d_v } \\right ) ^{m-1 } \\prod_{i=0}^{m-2 } \\left [      \\left ( 1-\\frac{i}{n-1 } \\right )      \\left ( 1-\\frac{i}{c-1 } \\right ) \\right ] \\nonumber\\end{aligned}\\ ] ]    the number of different pictures of length @xmath46 is @xmath155    finally , the probability of no cycle of length @xmath46 at a randomly chosen node in a ldpc graph is : @xmath156 where we make the same two independence assumptions as we did for the turbo code case .     or less in an ldpc graph with @xmath157 , as a function of @xmath0.,width=432 ]     or less in an ldpc graph with @xmath158 , as a function of @xmath0.,width=432 ]    we ran a number of simulations in which we randomly generated 200 different randomly generated ldpc graphs and counted the cycles at 100 randomly chosen nodes in each .",
    "we plot in figures [ ldpc15k ] and [ ldpc63k ] the results of the simulation and the theoretical estimates from equation [ ldpceqn ] for @xmath157 and 63000 .    from the simulation results we see that the ldpc curve is qualitatively similar in shape to the turbo graph curves earlier but has been shifted to the left , i.e.",
    ", there is a higher probability of short cycles in an ldpc graph than in a turbo graph , for the specific parameters we have looked at here .",
    "this is not surprising since the branching factor in a turbo graph is 3 ( each node is connected to 3 neighbors ) while the average branching factor in an ldpc graph ( as analyzed with @xmath159 ) is 4 .",
    "existing theoretical analyses of the message - passing algorithms for ldpc codes rely on the assumption that none of the cycles in the underlying graph are short [ e.g. , 15 , 16 ] .",
    "in contrast , here we explicitly estimate the distribution on cycle lengths , and find ( e.g. , figure 10 and 11 ) that there is a  soft threshold \" effect ( as with turbo graphs ) .",
    "for example , for @xmath160 , the simulation results in figure 10 illustrate that the probability is about 50% that a randomly chosen node participates in a simple cycle of length 9 or less .",
    "the independence assumptions clearly are not as accurate in the ldpc case as they were for the turbo graphs .",
    "recall that we make two separate independence assumptions in our analysis , namely that    1 .",
    "the event that there is no cycle of length @xmath0 is independent of the event that there are no cycles of length @xmath99 or lower , and 2 .",
    "the event that a particular picture can not be embedded at a randomly chosen node is independent of the event that other pictures can not be embedded .",
    "we can check the accuracy of the first independence assumption readily by simulation .",
    "we ran a number of simulations to count cycles in randomly generated turbo and ldpc graphs . from the simulation data",
    ", we estimate the marginal probabilities @xmath161 , and the joint probabilities @xmath162 . to test the accuracy of our independence assumption",
    ", we compare the product of the estimated marginal probabilities with the estimated joint probability .    .",
    "testing the independence between @xmath163 and @xmath164 in turbo graphs with chain length @xmath106 .",
    "[ cols=\">,>,>,>\",options=\"header \" , ]     table [ tab : turbo ] provides the comparison for turbo graphs for @xmath106 .",
    "the products of the marginal probabilities are quite close to the joint probabilities , indicating that the independence assumption leads to a good approximation for turbo graphs .",
    "table [ tab : ldpc ] gives a similar results for ldpc , i.e. , the independence assumption appears quite accurate here also .",
    "thus , we conclude that the first independence assumption ( that the non - occurrence of cycles of length @xmath0 is independent of the non - occurrence of cycles of length @xmath99 of less ) appears to be quite accurate for both turbo graphs and ldpc graphs .",
    "since assumption 2 is the only other approximation being made in the analysis of the ldpc graphs , we can conclude that it is this approximation which is less accurate ( given that the approximation and simulation do not agree so closely overall for ldpc graphs ) . recall that the second approximation is of the form : @xmath165 this assumption can fail for example when two pictures have the first few edges in common .",
    "if one fails to be embedded on one of these common edges , then the other will fail too .",
    "so the best we can hope from this approximation is that because there are so many pictures , these dependence effects will cancel out . in other words ,",
    "we know that @xmath166 but we hope that @xmath167 one possible reason for the difference between the ldpc case and the turbo case is as follows . for turbo graphs , in the expression for the probability of embedding a picture ,",
    "@xmath168 ^ 2\\ ] ] the term @xmath169 is the most important , i.e. , all other terms are nearly 1 .",
    "so even if two pictures share many common edges and become dependent , as long as they do not share that most important edge , they can be regarded as effectively independent .",
    "in contrast , for ldpc graphs , the contribution from the individual edges to the total probability tends to be more  evenly distributed . \"",
    "each edge contributes a @xmath170 term or a @xmath171 term .",
    "no single edge dominates the right hand side of @xmath172,\\ ] ] and , thus , the  effective independence \" may not hold as in the case of turbo graphs .",
    "for turbo graphs we have shown that randomly chosen nodes are relatively rarely on a cycle of length 10 or less , but are highly likely to be on a cycle of length 20 or less ( for a block length of 64000 ) .",
    "it is interesting to conjecture about what this may tell us about the accuracy of the iterative message - passing algorithm in this context .",
    "it is possible to show that there is a well - defined  distance effect \" in message propagation for typical adg models [ 17 ] . consider a simple model where there is a hidden markov chain consisting of binary - valued @xmath173 state nodes , @xmath21 .",
    "in addition there is are observed @xmath174 , one for each state @xmath175 and which only depend directly on each state @xmath175 .",
    "@xmath176 is a conditional gaussian with mean @xmath175 and standard deviation @xmath177 .",
    "one can calculate the effect of any observed @xmath174 on any hidden node @xmath178 , @xmath179 , in terms of the expected difference between @xmath180 and @xmath181 , averaged across many observations of the @xmath182 s .",
    "this average change in probability , from knowing @xmath174 , can be shown to be proportional to @xmath183 , i.e. , the effect of one variable on another dies off exponentially as a function of distance along the chain .",
    "furthermore , one can show that as the channel becomes more reliable ( @xmath177 decreases ) , the dominance of local information over information further away becomes stronger , i.e. , @xmath174 has less effect on the posterior probability of @xmath178 on average .",
    "the exponential decay of information during message propagation suggests that there may exist graphs with cycles where the information being propagated by a message - passing algorithm ( using the completely parallel , or concurrent , version of the algorithm ) can effectively  die out \" before causing the algorithm to double count .",
    "of course , as we have seen in this paper , there is a non - zero probability of cycles of length @xmath184 for realistic turbo graphs , so that this line of argument is insufficient on its own to explain the apparent accuracy of iterative decoding algorithms .",
    "it is also of interest to note that that iterative decoding has been empirically observed to converge to stable bit decisions within 10 or so .",
    "as shown experimentally in [ 5 ] , even beyond 10 iterations of message - passing there are still a small fraction of nodes which typically change bit decisions . combined with the results on cycle length distributions in this paper",
    ", this would suggest that it is certainly possible that double - counting is occurring at such nodes",
    ". it may be possible to show , however , that any such double - counting has relatively minimal effect on the overall quality of the posterior bit decisions .",
    "the distributions of cycle lengths in turbo code graphs and ldpc graphs were analyzed and simulated .",
    "short cycles ( e.g. , of length @xmath185 ) occur with relatively low probability at any randomly chosen node .",
    "as the cycle length increases , there is a threshold effect and the probability of a cycle of length @xmath0 or less approaches 1 ( e.g. , for @xmath186 . for turbo codes , as the block length @xmath1 becomes large , the probability that a cycle of length @xmath0 or less exists at any randomly chosen node behaves approximately as @xmath2 .",
    "the s - random construction is shown to eliminate very short cycles and for larger cycles results in only a small systematic decrease in the probability of such cycles .",
    "for ldpc codes the analytic approximations are less accurate than for the turbo case ( when compared to simulation results ) .",
    "nonetheless the distribution as a function of @xmath0 shows qualitatively similar behavior to the distribution for turbo codes , as a function of cycle length @xmath0 . in summary ,",
    "the results in this paper demonstrate that the cycle lengths in turbo graphs and ldpc graphs have a specific distributional character .",
    "we hope that this information can be used to further understand the workings of iterative decoding .",
    "the authors are grateful to r. j. mceliece and the coding group at caltech for many useful discussions and feedback .",
    "1 .   c. berrou , a. glavieux , and p. thitimajshima ( 1993 ) . near shannon limit error - correcting coding and decoding : turbo codes .",
    "_ proceedings of the ieee international conference on communications_. pp .",
    "1064 - 1070 . 2 .",
    "mceliece , d.j.c .",
    "mackay , and j .- f .",
    "cheng ( 1998 ) .",
    "turbo decoding as an instance of pearl s ` belief propagation ' algorithm .",
    "_ ieee journal on selected areas in communications , _",
    "sac-16(2):140 - 152 .",
    "f. r. kschischang , b. j. frey ( 1998 ) .",
    "iterative decoding of compound codes by probability propagation in graphical models .",
    "_ ieee journal on selected areas in communications , _",
    "sac-16(2):219 - 230 . 4 .",
    "p. smyth , d. heckerman , and m. i. jordan ( 1997 ) . `",
    "probabilistic independence networks for hidden markov probability models , ' _ neural computation _ , 9(2 ) , 227269 .",
    "b. j. frey ( 1998 ) .",
    "_ graphical models for machine learning and digital communication .",
    "_ mit press : cambridge , ma .",
    "j. pearl ( 1988 ) , _ probabilistic reasoning in intelligent systems : networks of plausible inference . _ morgan kaufmann publishers , inc . , san mateo , ca",
    "l. r. bahl , j. cocke , f. jelinek , and j. raviv ( 1974 ) . `",
    "optimal decoding of linear codes for minimizing symbol error rate , ' _ ieee transactions on information theory _",
    ", 20:284287 .",
    "y. weiss ( 1998 ) . `",
    "correctness of local probability propagation in graphical models with loops , ' submitted to _ neural computation_. 9 .",
    "r. j. mceliece , e. rodemich , and j. f. cheng , ` the turbo - decision algorithm , ' in _ proc .",
    "allerton conf . on comm . , control , comp .",
    "s. dolinar and d. divsalar ( 1995 ) , _ weight distributions for turbo codes using random and nonrandom permutations .",
    "_ tda progress report 42 - 121 ( august 1995 ) , jet propulsion laboratory , pasadena , california . 11 .",
    "r. g. gallager ( 1963 ) , _ low - density parity - check codes . _",
    "cambridge , massachusetts : mit press . 12 .",
    "mackay , r.m .",
    "neal ( 1996 ) , _ near shannon limit performance of low density parity check codes _",
    ", published in _ electronics letters _ , also available from http://wol.ra.phy.cam.ac.uk/. 13 .",
    "k. s. andrews , c. heegard , and d. kozen , ( 1998 ) . `",
    "interleaver design methods for turbo codes , ' _ proceedings of the 1998 international symposium on information theory _ , pg.420 .",
    "c. heegard and s. b. wicker ( 1998 ) , _ turbo coding _ ,",
    "boston , ma : kluwer academic publishers . 15 .",
    "t. richardson , r. urbanke ( 1998 ) , _ the capacity of low - density parity check codes under message - passing decoding _ , preprint , available at + _ http://cm.bell - labs.com / who / tjr / pub.html_. 16 . m. g. luby , m. mitzenmacher , m. a. shokrollahi , d. a. spielman ( 1998 ) , ` analysis of low density codes and improved designs using irregular graphs , ' in _ proceedings of the 30th acm stoc_. also available online at + _ http://www.icsi.berkeley.edu/  luby / index.html_. 17 .",
    "x. ge and p. smyth , ` _ distance effects in message propagation _ ' , in preparation ."
  ],
  "abstract_text": [
    "<S> this paper analyzes the distribution of cycle lengths in turbo decoding and low - density parity check ( ldpc ) graphs . </S>",
    "<S> the properties of such cycles are of significant interest in the context of iterative decoding algorithms which are based on belief propagation or message passing . </S>",
    "<S> we estimate the probability that there exist no simple cycles of length less than or equal to @xmath0 at a randomly chosen node in a turbo decoding graph using a combination of counting arguments and independence assumptions . for large block lengths </S>",
    "<S> @xmath1 , this probability is approximately @xmath2 . </S>",
    "<S> simulation results validate the accuracy of the various approximations . for example </S>",
    "<S> , for turbo codes with a block length of 64000 , a randomly chosen node has a less than @xmath3 chance of being on a cycle of length less than or equal to 10 , but has a greater than @xmath4 chance of being on a cycle of length less than or equal to 20 . </S>",
    "<S> the effect of the  s - random \" permutation is also analyzed and it is shown that while it eliminates short cycles of length @xmath5 , it does not significantly affect the overall distribution of cycle lengths . </S>",
    "<S> similar analyses and simulations are also presented for graphs for ldpc codes . </S>",
    "<S> the paper concludes by commenting briefly on how these results may provide insight into the practical success of iterative decoding methods . </S>"
  ]
}