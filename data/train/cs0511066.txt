{
  "article_text": [
    "one has many alternatives to compute the determinant of an integer matrix . over a field ,",
    "the computation of the determinant is tied to that of matrix multiplication via block recursive matrix factorizations @xcite . on the one hand , over the integers , a nave approach would induce a coefficient growth that would render the algorithm not even polynomial . on the other hand , over finite fields , one can nowadays reach the speed of numerical routines @xcite .",
    "therefore , the classical approach over the integers is to reduce the computation modulo some primes of constant size and to recover the integer determinant from the modular computations . for this , at least two variants are possible : chinese remaindering and @xmath4-adic lifting .",
    "the first variant requires either a good _ a priori _ bound on the size of the determinant or an early termination probabilistic argument @xcite .",
    "it thus achieves an _ output dependant _ bit complexity of @xmath5 where @xmath6 is the exponent of matrix multiplication .",
    "is @xmath7 for the classical algorithm , and @xmath8 for the coppersmith - winograd method , see @xcite ] of course , with the coefficient growth , the determinant size can be as large as @xmath9 ( hadamard s bound ) thus giving a large worst case complexity .",
    "the algorithm is monte carlo type , its deterministic ( always correct ) version exists and has the complexity of @xmath10 bit operations .",
    "the second variant uses system solving and @xmath4-adic lifting @xcite to get a potentially large factor of the determinant with a @xmath11 bit complexity .",
    "indeed , every integer matrix is unimodularly equivalent to a diagonal matrix @xmath12 equal to @xmath13 , where @xmath14 divides @xmath15 .",
    "this means that there exist integer matrices @xmath16 with @xmath17 , such that @xmath18 .",
    "the @xmath14 are called the invariant factors of a. in the presence of several matrices we will also use the notation @xmath19 . solving a linear system with a random right hand side reveals @xmath20 as the common denominator of the solution vector entries with high probability , see @xcite .",
    "the idea of @xcite is thus to combine both approaches , i.e. to approximate the determinant by system solving and recover only the remaining part ( @xmath21 ) via chinese remaindering . the monte carlo version of chinese remaindering leads to an algorithm with the * expected * output - dependant bit complexity of @xmath22 .",
    "we use the notion of the * expected * complexity to emphasize that it requires @xmath23 to be @xmath24 , where @xmath25 is the computed factor of @xmath20 and @xmath26 denotes the expected value computed over all algorithm instances for a given matrix @xmath0 .",
    "then g. villard remarked that at most @xmath27 invariant factors can be distinct and that in some propitious cases we can expect that only the last @xmath28 of those are nontrivial @xcite .",
    "this remark , together with a preconditioned @xmath4-adic solving to compute the @xmath29-th invariant factor lead to a @xmath30 worst case monte carlo algorithm .",
    "without fast matrix multiplication , the complexity of the algorithm becomes @xmath31 .",
    "the expected number of invariant factors for a set of matrices with entries chosen randomly and uniformly from the set of consecutive integers @xmath32 can be proven to be @xmath33 .",
    "thus , we can say that the * expected * complexity of the algorithm is @xmath34 . here",
    ", the term * expected * is used in a slightly different context than in algorithm @xcite and describes the complexity in the case where the matrix has a propitious property i.e. , the small number of invariant factors .    in this paper",
    "we will prefer to use the notion of the expected rather than average complexity .",
    "formally , to compute the average complexity we have to average the running time of the algorithm over all input and argorithm instances .",
    "the common approach is thus to compute the expected outputs of the subroutines and use them in the complexity analysis .",
    "this allows us to deal easily with complex algorithms with many calls to subroutines which depend on randomization .",
    "the two approaches are equivalent when the dependency on the expected value is linear , which is often the case .",
    "however , we can imagine more complex cases of adaptive algorithms where the relation between average and expected complexity is not obvious . nevertheless , we believe that the evaluation of the expected complexity gives a meaningful description of the algorithm .",
    "we emphasize the fact , that the propitious input for which the analysis is valid can often be quickly detected at runtime .",
    "note that the actual best worst case complexity algorithm for dense matrices is @xmath35 , which is @xmath36 without fast matrix multiplication , by @xcite .",
    "we use the notion @xmath37 , which is equivalent to @xmath38 with some @xmath39 .",
    "unfortunately , these last two worst case complexity algorithms , though asymptotically better than @xcite , are not the fastest for the generic case or for the actually attainable matrix sizes .",
    "the best expected complexity algorithm is the las vegas algorithm of storjohann @xcite which uses an expected number of @xmath40 bit operations . in section [ sec : experiments ] we compare the performance of this algorithm ( for both certified and not certified variants ) to ours , based on the experimental results of @xcite .    in this paper",
    ", we propose a new way to extend the idea of @xcite to get the last consecutive invariant factors with high probability in section [ sec : extended ] .",
    "then we combine this with the scheme of @xcite .",
    "this combination is made in an adaptive way .",
    "this means that the algorithm will choose the adequate variant at run - time , depending on discovered properties of its input .",
    "more precisely , in section [ sec : algorithm ] , we propose an algorithm which uses timings of its first part to choose the best termination . this particular kind of adaptation was introduced in @xcite as introspective ; here we use the more specific definition of @xcite .    in section [ sec : complexity ] we prove that the expected complexity of our algorithm is @xmath41 bit operations in the case of dense matrices , gaining a @xmath42 factor compared to @xcite .    moreover , we are able to detect the worst cases during the course of the algorithm and switch to the asymptotically fastest method . in general",
    "this last switch is not required and we show in section [ sec : experiments ] that when used with the very fast modular routines of @xcite and the linbox library @xcite , our algorithm can be an order of magnitude faster than other existing implementations .",
    "a preliminary version of this paper was presented in the transgressive computing 2006 conference @xcite . here",
    "we give better asymptotic results for the dense case , adapt our algorithm to the sparse case and give more experimental evidences .",
    "in this section we present the procedures in more detail and describe their probabilistic behavior .",
    "we start by a brief description of the properties of the chinese remaindering loop ( cra ) with early termination ( et ) ( see @xcite ) , then proceed with the _ largestinvariantfactor _ algorithm to compute @xmath20 ( see @xcite ) .",
    "we end the section with a summary of ideas of abbott _",
    "@xcite , eberly _",
    "et al . _ and saunders _",
    "_ @xcite .",
    "cra is a procedure based on the chinese remainder theorem .",
    "determinants are computed modulo several primes @xmath43 . then the determinant is reconstructed modulo @xmath44 in the symmetric range via the chinese reconstruction .",
    "the integer value of the determinant is thus computed as soon as the product of @xmath43 exceeds @xmath45 .",
    "we know that the product is sufficiently big if it exceeds some upper bound on this value or , probabilistically , if the reconstructed value remains identical for several successive additions of modular determinants .",
    "the principle of this early termination ( et ) is thus to stop the reconstruction before reaching the upper bound , as soon as the determinant remains the same for several steps @xcite .",
    "algorithm [ alg : cra ] is an outline of a procedure to compute the determinant using cra loops with early termination , correctly with probability @xmath46 .",
    "we start with a lemma .",
    "[ lem : cra ] let @xmath47 be an upper bound for the determinant ( e.g. @xmath47 can be the hadamard s bound : @xmath48 ) .",
    "suppose that distinct primes @xmath43 greater than @xmath49 are randomly sampled from a set @xmath50 with @xmath51 .",
    "let @xmath52 be the value of the determinant modulo @xmath53 computed in the symmetric range .",
    "we have :    a.   [ cra : certification ] @xmath54 , if @xmath55 ; b.   [ cra : no_primes ] if @xmath56 , then there are at most @xmath57 primes @xmath58 such that @xmath59 mod @xmath60 ; c.   [ cra : on - the - fly ] if @xmath61 and @xmath62 , where @xmath63 , then @xmath64 .",
    "d.   [ cra : probability ] if @xmath61 and @xmath65 , where @xmath66 , then @xmath64 .    for ( [ cra : certification ] ) , notice that @xmath67 .",
    "then @xmath54 as soon as @xmath68 . with @xmath69 being the lower bound for @xmath43",
    "this reduces to @xmath70 when @xmath71 .",
    "+ for ( [ cra : no_primes ] ) , we observe that @xmath72 and it suffices to estimate the number of primes greater than @xmath69 dividing @xmath73 .",
    "+ for ( [ cra : on - the - fly ] ) we notice that @xmath74 primes dividing @xmath73 are to be chosen with the probability @xmath75 .",
    "applying the bound @xmath76 for @xmath77 leads to the result .",
    "+ for ( [ cra : probability ] ) we notice that the latter is bounded by @xmath78 since @xmath79 .",
    "solving for @xmath74 the inequality @xmath80 gives the result .",
    "the two last points of the theorem give the stopping condition for early termination . the condition ( [ cra : on - the - fly ] ) can be computed on - the - fly ( as in algorithm [ alg : cra ] ) . as a default value and for simplicity ( [ cra : probability ] ) can also be used .",
    "@xmath81 integer matrix @xmath0 .",
    "@xmath47 - hadamard s bound ( @xmath83 ) @xmath84 , a set p of random primes greater than @xmath69 , @xmath85 .",
    "the integer determinant of @xmath0 , correct with probability at least @xmath46 .",
    "@xmath86 ; choose uniformly and randomly a prime @xmath87 from the set @xmath50 ; @xmath88 [ cra : ii ] compute @xmath89 mod @xmath43 ; reconstruct @xmath90 , the determinant modulo @xmath91 ; // by chinese remaindering @xmath92 ; @xmath93 ; increment i ;    to compute the modular determinant in algorithm [ cra : ii ] we use the lu factorization modulo @xmath43 .",
    "its complexity is @xmath94 .",
    "early termination is particularly useful in the case when the computed determinant is much smaller than the _ a priori _ bound .",
    "the running time of this procedure is output dependant .      a method to compute @xmath20 for integer matrices",
    "was first stated by v. pan @xcite and later in the form of the _ largestinvariantfactor _ procedure ( lif ) in @xcite .",
    "the idea is to obtain a  divisor of @xmath20 by computing a rational solution of the linear systems @xmath95 .",
    "if @xmath96 is chosen uniformly and randomly from a sufficiently large set of contiguous integers , then the computed divisor can be as close as possible to @xmath20 with high probability . indeed , with @xmath18",
    ", we can equivalently solve @xmath97 for @xmath98 , and then solve for @xmath99 . as",
    "@xmath100 and @xmath101 are unimodular , the least common multiple of the denominators of @xmath99 and @xmath102 , @xmath103 and @xmath104 satisfies @xmath105 .",
    "thus , solving @xmath95 enables us to get @xmath20 with high probability .",
    "the cost of solving using dixon @xmath4-adic lifting @xcite is @xmath106 as stated by @xcite .",
    "the algorithm takes as input parameters @xmath107 and @xmath108 which are used to control the probability of correctness ; @xmath108 is the number of successive solvings and @xmath107 is the size of the set from which the values of a random vector @xmath96 are chosen , i.e. a bound for @xmath109 . with each system solving ,",
    "the output @xmath25 of the algorithm is updated as the @xmath110 of the current solution denominator @xmath103 and the result obtained so far .",
    "the following theorem characterizes the probabilistic behavior of the lif procedure .",
    "[ thm : lif ] let @xmath0 be a @xmath81 matrix , @xmath47 its hadamard s bound , @xmath108 and @xmath107 be defined as above .",
    "then the output @xmath25 of algorithm _ largestinvariantfactor _ of @xcite is characterized by the following properties .",
    "a.   [ i ] if @xmath111 , @xmath4 is a prime , @xmath112 , then @xmath113 b.   [ ii ] if @xmath114 , @xmath115 then @xmath116 c.   [ iii ] if @xmath114 , @xmath117 then @xmath118 with probability at least 1/3 ; d.   [ iv ] if @xmath119 , @xmath120 then @xmath116 e.   [ v ] if @xmath121 , @xmath122 and @xmath120 then @xmath118 with probability at least @xmath46 ;    the proofs of ( @xmath123 ) and ( [ iv ] ) are in @xcite[thm .",
    "2 , lem . 2 ] .",
    "the proof of ( [ iii ] ) is in @xcite[thm .",
    "2.1 ] . to prove ( [ ii ] )",
    "we adapt the proof of ( [ iii ] ) .",
    "the expected value of the under - approximation of @xmath20 is bounded by the formula @xmath124 where the sum is taken over all primes dividing @xmath20 . as @xmath125 is bounded by @xmath126",
    "this can be further expressed as @xmath127 to prove ( [ v ] ) we slightly modify the proof of ( [ iv ] ) in the following manner . from ( [ i ] )",
    "we notice that for every prime @xmath4 dividing @xmath20 , the probability that it divides the missed part of @xmath20 satisfies : @xmath128 as there are at most @xmath129 such primes , we get @xmath130    [ rmk : lif ] theorem [ thm : lif ] enables us to produce a lif procedure , which gives an output @xmath131 close to @xmath20 with the time complexity @xmath132 ( see ) .",
    "now , the idea of @xcite is to combine both the chinese remainder and the lif approach .",
    "indeed , one can first compute @xmath20 and then reconstruct only the remaining factors of the determinant by reconstructing @xmath133 .",
    "the expected complexity of this algorithm is @xmath134 which is unfortunately @xmath135 in the worst case .",
    "now saunders and wan @xcite proposed a way to compute not only @xmath20 but also @xmath136 ( which they call a bonus ) in order to reduce the size of the remaining factors @xmath137 .",
    "the complexity does nt change .",
    "then , eberly , giesbrecht and villard have shown that for the dense case the expected number of non trivial invariant factors is small , namely less than @xmath138 if the entries of the matrix are chosen uniformly and randomly in a set of @xmath139 consecutive integers @xcite .",
    "as they also give a way to compute any @xmath14 , this leads to an algorithm with the expected complexity @xmath140 .",
    "our analysis yields that the bound on the expected number of invariant factors for    a random dense matrix can be refined as @xmath141 .",
    "then our idea is to extend the method of saunders and wan to get the last invariant factors of @xmath0 slightly faster than by @xcite .",
    "moreover , we will show in the following sections that we are able to build an adaptive algorithm solving a minimal number of systems .",
    "the analysis also yields that it should be possible to change a @xmath142 factor in the expected complexity of @xcite to a @xmath143 .",
    "this would require a small modification in the algorithm and a careful analysis .",
    "assuming that the number of invariant factors is the expected i.e. it equals @xmath144 , we can verify the hypothesis by computing the @xmath145th factor .",
    "if it is trivial , the binary search is done among @xmath146 elements and there are only @xmath146 factors to compute , which allows to lessen the probability of correctness of each oif procedure .",
    "thus , in the propitious case , the expected complexity of the algorithm would be @xmath147 .",
    "however , this can not ce considered as the average complexity in the ordinary sense since we do not average over all possible inputs in the analysis .",
    "the result in @xcite says that a @xmath81 matrix with entries chosen randomly and uniformly from a set of size @xmath139 has the expected number of invariant factors bounded by @xmath148 . in search for some sharpening of this result",
    "we prove the following theorems .",
    "[ modular ] let @xmath0 be an @xmath81 matrix with entries chosen randomly and uniformly from the set of contiguous integers @xmath149 .",
    "let @xmath4 be a prime .",
    "the expected number of non - trivial invariant factors of @xmath0 divisible by @xmath4 is at most 4 .",
    "[ expected ] let @xmath0 be an @xmath81 matrix with entries chosen randomly and uniformly from the set @xmath149 .",
    "the expected number of non trivial invariant factors of @xmath0 is at most @xmath150 .    in order to prove the theorems stated above , we start with the following lemmas .    [",
    "app : lemma ] if @xmath1511 the sum @xmath152 over primes @xmath4 can be upper bounded by @xmath153 .",
    "we will consider separately the primes from the interval @xmath154 , @xmath155 .",
    "the value of @xmath156 is computed from the condition @xmath157 and is equal to @xmath158 . for the @xmath74th interval @xmath159",
    "is less than or equal to @xmath160 . in each interval",
    "there are at most @xmath161 odd numbers and at most @xmath162 primes : if in the interval there are more than 3 odd numbers , at least one of them is divisible by @xmath7 and is therefore composite . for this to happen",
    "it is enough that @xmath163 , which is the case .",
    "we may therefore calculate : @xmath164    for @xmath165 , @xmath74 can be allowed from @xmath166 up to @xmath167 , instead of @xmath158 and we can include more primes in the sum . as a result",
    "we obtain an inequality @xmath168 .",
    "[ lem : rankp ] let @xmath0 be a @xmath169 , @xmath170 integer matrix with entries chosen uniformly and randomly from the set @xmath149 .",
    "the probability that @xmath171 , the rank modulo @xmath4 of @xmath0 , is @xmath172 , @xmath173 is less than or equal to @xmath174 where @xmath175 and @xmath176 .",
    "the proof of the lemma is given in the appendix [ app : rankp ] .",
    "( theorem [ modular ] ) + the idea of the proof is similar to that of @xcite[thm .",
    ".    for @xmath177 let @xmath178 denote the event that the first @xmath74 columns of @xmath0 mod @xmath4 have rank at most @xmath179 over @xmath180 .",
    "by @xmath181 we denote the event , that at least @xmath172 invariant factors of @xmath0 are divisible by @xmath4 .",
    "this implies that the first columns of @xmath0 have rank at most @xmath182 mod @xmath4 , or that @xmath183 has occurred for all @xmath184 .",
    "this proves in particular that @xmath185 .    in order to compute the probability @xmath186 , @xmath187",
    "we notice that it is less than or equal to @xmath188    surely , @xmath189 means that the first @xmath172 columns of @xmath0 are 0 mod @xmath4 , and consequently the probability is less than or equal to @xmath190 , where the value @xmath191 is a bound on the probability that an entry of the matrix is determined modulo @xmath4 and is set to @xmath192 if @xmath193 or less than or equal @xmath194 in the case @xmath195 .",
    "we are now going to find @xmath196 for @xmath197 .",
    "since the event @xmath198 did not occur , @xmath199 has rank modulo @xmath4 at least @xmath200 and of course at most @xmath201 . for @xmath202 to occur it must be exactly @xmath200 .",
    "this means that we can rewrite @xmath203 as @xmath204 where @xmath205 denotes the rank modulo @xmath4 of submatrix @xmath199 of @xmath0 , which consists of its first @xmath201 columns .",
    "since the rank modulo @xmath4 of @xmath199 is equal to @xmath179 , there exists a set of @xmath179 rows @xmath206 which has full rank mod p. this means that we can choose @xmath179 entries of the @xmath74th column randomly but the remaining @xmath207 entries will be determined modulo @xmath4 .",
    "this leads to an inequality @xmath208    by lemma [ lem : rankp ] we have @xmath209 .",
    "finally , we get @xmath210 and @xmath211    the expected number of invariant factor divisible by @xmath212 verifies : @xmath213 the latter is decreasing in @xmath4 and therefore less than its value at @xmath214 , which is lower than 3.46 .    for @xmath215",
    "the result is even sharper : @xmath216 the latter being lower than 1.18 for @xmath217 .",
    "( theorem [ expected ] ) in addition to @xmath178 introduced earlier , let @xmath218 denote an event that the first @xmath74 columns of @xmath0 are linearly dependent ( over rationals ) and @xmath219 , an event that either of @xmath178 occurred .",
    "recall from @xcite that @xmath220 this gives @xmath221 which is less than @xmath222 .    as in the previous proof ,",
    "the probability that the number of non trivial invariant factors is at least @xmath172 ( event @xmath223 ) is lower than @xmath224 for all @xmath184 .",
    "the latter can be transformed to @xmath225 , and both @xmath226 and @xmath227 can be treated separately .    to compute @xmath226 we will sum @xmath228 over all possible primes .",
    "since @xmath229 does not hold , there exists a @xmath230 non - zero minor , and we have to sum over the primes which divide it .",
    "we will treat separately primes @xmath231 and @xmath215 .",
    "once again we set @xmath232 for @xmath195 and @xmath233 for @xmath234 .",
    "by we have @xmath235 this transforms to @xmath236 thanks to lemma [ app : lemma ] , the sum @xmath237 can be bounded by @xmath238 .    for primes @xmath239 we should estimate the number of primes dividing the @xmath240th minor . by the hadamard s bound ( notice that @xmath229 does not hold ) , the minors are bounded in absolute value by @xmath241 . therefore the number of primes @xmath242 dividing the minor is at most @xmath243 . summarizing , @xmath244    we can now compute the expected number of non trivial invariant factors .",
    "let us fix @xmath245 .",
    "we have that in particular , @xmath246 is less than @xmath247 .",
    "we can check that @xmath248 .",
    "this gives also @xmath249 and @xmath250 the expected number of non trivial invariant factors is bounded by : @xmath251 which in turn is bounded by @xmath252    where @xmath253 as soon as @xmath254 . on the other hand @xmath255 which leads to the final result .      in his thesis @xcite",
    ", z. wan introduces the idea of computing the penultimate invariant factor ( i.e. @xmath136 ) of @xmath0 while computing @xmath256 using two system solvings .",
    "the additional cost is comparatively small , therefore @xmath136 is referred to as a bonus .",
    "here , we extend this idea to the computation of the @xmath257th factor with @xmath74 solvings in the following manner :    1 .   the ( matrix ) solution of @xmath258 , where @xmath259 is a @xmath260 multiple right hand side can be written as @xmath261 where @xmath25 approximates @xmath262 and the factors of @xmath263 give some divisors of the last @xmath74 invariant factors of @xmath0 : see lemma [ lem : sf ] .",
    "2 .   we are actually only interested in getting the product of these invariant factors which we compute as the @xmath264 of the determinants of two perturbed @xmath265 matrix @xmath266 and @xmath267 .",
    "then we show that repeating this solving twice with two distinct right - hand sides @xmath268 and @xmath269 is in general sufficient to remove those extra factors and to get a very fine approximation of the actual product of the last @xmath74 invariants : see lemma [ lem : pi ] .",
    "let @xmath270 be a ( matrix ) rational solution of the equation @xmath258 , where @xmath271 , i=1,\\dots , k$ ] , is a random @xmath260 matrix .",
    "then the coordinates of @xmath270 have a common denominator @xmath272 and we let @xmath273 , i=1,\\dots , k$ ] , denote the matrix of numerators of @xmath270 .",
    "thus , @xmath274 and @xmath275 .    following wan",
    ", we notice that @xmath276 is an integer matrix , the smith form of which is equal to @xmath277 therefore , we may compute @xmath278 when knowing @xmath279 .",
    "the trick is that the computation of @xmath280 is not required : we can perturb @xmath280 by right multiplying it by @xmath259 .",
    "then , @xmath281 is a multiple of @xmath279 . instead of @xmath282",
    "we would prefer to use @xmath283 which is already computed and equal to @xmath263 .",
    "the relation between @xmath0 and @xmath263 is as follows .",
    "[ lem : sf ] let @xmath284 , @xmath285 be a solution to the equation @xmath258 , where @xmath259 is @xmath286 matrix .",
    "let @xmath77 be a random @xmath169 matrix .",
    "then @xmath287    the smith forms of @xmath282 and @xmath263 are connected by the relation @xmath288 @xmath289 , @xmath290 .",
    "moreover , @xmath291 is a factor of @xmath292 .",
    "we notice that @xmath293 equals @xmath294 , and thus @xmath295 is an ( integer ) factor of @xmath296 . moreover , the under - approximation is solely due to the choice of @xmath259 and @xmath77 .",
    "[ rmk : small_primes ] taking @xmath297 is necessary as @xmath298 may be a rational number .",
    "in fact we are interested in computing the product @xmath299 of the @xmath74 biggest invariant factors of @xmath0 .",
    "then , following the idea of @xcite , we would like to reduce the computation of the determinant to the computation of @xmath300 , where @xmath301 is a factor of @xmath302 that we have obtained .",
    "we can compute @xmath301 as @xmath303 , where @xmath304 is the product of the @xmath74 smallest invariant factors .",
    "we will need a following technical lemma .",
    "its proof is given in the appendix , see [ app : determinant ] .",
    "[ lem : determinant ] let @xmath101 be an @xmath169 matrix , such that the smith form of @xmath101 is trival .",
    "let @xmath305 be an @xmath286 matrix with entries chosen randomly and uniformly from the set @xmath306 , the probability that @xmath307 divides the determinant @xmath308 is at most @xmath309 .    in the following lemmas",
    "we show that by repeating the choice of matrix @xmath259 and @xmath77 twice , we will omit only a finite number of bits in @xmath302 .",
    "we start with a remark , which is a modification of ( * ? ? ?",
    "we ramaind that the order modulo @xmath4 ( @xmath310 ) of a value is the expotent of the highest power of @xmath4 dividing it .",
    "[ rmk : ord_p ] for every @xmath81 matrix @xmath305 there exist a @xmath169 , @xmath311 , matrix @xmath101 with trivial smith form , such that for any @xmath260 matrix @xmath259 : if the order modulo @xmath4 @xmath312 is greater than @xmath69 then also @xmath313 is greater than @xmath69 .",
    "[ lem : pi ] let @xmath0 be an @xmath314 integer matrix and @xmath315 , @xmath316 be @xmath286 @xmath317 , matrices with the entries uniformly and randomly chosen from the set @xmath318 of @xmath12 contiguous integers , @xmath319",
    ". denote by @xmath320 the product @xmath321 of the @xmath74 smallest invariant factors and by @xmath302 the product of the @xmath74 biggest factors of @xmath0 .",
    "then for @xmath322 @xmath323 where @xmath47 is the hadamard bound for @xmath0 .    first ,",
    "notice that @xmath324",
    ". therefore    the expected value is less than or equal @xmath325 thanks to remark [ rmk : ord_p ] we can link this probability to the probability that @xmath326 divides the determinant of @xmath327 or @xmath328 , for matrices @xmath329 which have a trivial smith form .",
    "we only consider @xmath330",
    ".    for @xmath331 lemma [ lem : determinant ] gives @xmath332    now the expected size of the under - estimation is less than or equal to @xmath333 which is @xmath334 .",
    "for @xmath335 the probability @xmath336 and consequently can be bounded by @xmath337 which is less than @xmath338 .",
    "the expected size of the underestimation is @xmath339 this is @xmath340 , which gives the result .",
    "another method to compute the product @xmath320 of some first invariant factors of a rectangular matrix @xmath263 would be to compute several minors of the matrix and to take the @xmath264 of them . in our scheme",
    "we can therefore get rid of matrix @xmath77 which would enable us to use a smaller bound on @xmath341 and still preserve a small error of estimation due to the choice of @xmath259 .",
    "however , it is difficult to judge the impact of choosing only a few minors ( instead of all ) . an experimental evaluation whether for random @xmath0 and random @xmath259 the minors of @xmath263 are sufficiently  randomly  distributed remains to be done .",
    "now we should incorporate algorithm [ alg : cra ] and the ideas presented in sections [ sec : lif ] and [ sec : extended ] in the form of an introspective algorithm .",
    "indeed , we give a recipe for an auto - adaptive program that implements several algorithms of diverse space and time complexities for solving a particular problem .",
    "the best path is chosen at run time , from a self - evaluation of the dynamic behavior ( here we use timings ) while processing a given instance of the problem .",
    "this kind of auto - adaptation is called introspective in @xcite . in the following",
    ", cra loop refers to algorithm [ alg : cra ] , slightly modified to compute @xmath342 .",
    "if we re - run the cra loop , we use the already computed modular determinants first whenever possible .",
    "informally , the general idea of the introspective scheme is :    1 .",
    "initialize the already computed factor @xmath73 of the determinant to @xmath343 ; 2 .",
    "[ fflas ] run fast fflas lu routines in the background to get several modular determinants @xmath344 .",
    "3 .   from time to time try to early terminate the chinese remainder reconstruction of @xmath342 .",
    "4 .   in parallel or in sequential ,",
    "solve random systems to get the last invariant factors one after the other .",
    "update @xmath73 with these factors and loop back to step until an early termination occurs or until the overall timing shows that the expected complexity is exceeded",
    ". 6 .   in the latter exceptional case ,",
    "switch to a better worst case complexity algorithm .",
    "more precisely , the full algorithm in shown on page .    an integer @xmath345 matrix @xmath0 .",
    "h - bound for @xmath346 ( can be the hadamard s bound)@xmath82 , an error tolerance , @xmath347 . a stream @xmath318 of numbers randomly chosen from the set of @xmath12 contiguous integers . a set p of random primes greater than @xmath69 , @xmath348 , @xmath349 the integer determinant of @xmath0 , correct with probability at least @xmath46 .    [ eb : k ] @xmath350;see lem . [",
    "lem : cra ] [ eb : et ] run the cra loop for @xmath89 ; //see alg .",
    "[ alg : cra ] @xmath351 ; //see  [ rem : imax ] @xmath352 @xmath353",
    "@xmath354 [ eb : loop ] generate @xmath355 a random vector of dimension @xmath2 from the stream @xmath12 ; [ eb : lif]compute @xmath25 by solving @xmath356 ; //see section [ sec : lif ] @xmath357 , where @xmath358_{l=1,\\dots i}$];//see section [ sec : extended ] ; generate a random @xmath359 matrix @xmath77 .",
    "@xmath360 //determinant computation @xmath361 ; @xmath362 ; [ eb : underapp]resume cra looping on @xmath363 for at most the time of one system solving ; @xmath364 break ; resume cra looping on @xmath363 for at most the time of @xmath365 system solvings ; i = i+1 ; [ eb : last]run an asymptotically better integer determinant algorithm ;      the introspective behavior of algorithm [ alg : introsp ] depends paramountly on the number of system solvings and on the size of the random entries .    the parameter @xmath366 controls the maximal total number of system solvings authorized before switching to a best worst - case complexity algorithm .",
    "the choice of @xmath366 has to be discussed in terms of the expected number of invariant factors of @xmath0 .",
    "first , depending on the size of the set from which we are sampling the random right - hand sides , a minimum number of solvings is required to get a good probability of correctness .",
    "we thus define this to be @xmath367 .    in the dense case ,",
    "the ( [ ii ] ) part of theorem [ thm : lif ] states that @xmath368 is sufficient .",
    "part ( [ iv ] ) part of theorem [ thm : lif ] prompts us to take @xmath369 if we want to use a smaller @xmath107 .",
    "then this number @xmath367 has also to be augmented if the expected number of non trivial invariant factors is higher .",
    "we thus set @xmath370 in the dense case @xmath371 is less than @xmath372 as shown in theorem [ expected ] .",
    "now , random vectors are randomly sampled a set of size @xmath12 . for a dense matrix @xmath0",
    "we need @xmath373 to get a good probability of success as shown in theorem [ thm : lif]([ii ] ) and lemma [ lem : pi ] .",
    "additionally , ( see lemma [ lem : pi ] ) we should ensure that @xmath374 is computed twice using different matrices @xmath259 .",
    "we therefore introduce the variables @xmath375 and @xmath376",
    "which store respectively the number of factors computed at least twice ( up to @xmath24 ) or once ( thus only approximated ) .",
    "algorithm [ alg : introsp ] correctly computes the determinant with probability @xmath46 .",
    "termination is possible only by the early terminated cra loop or by the determinant algorithm used in the last step .",
    "the choice of @xmath74 from theorem [ lem : cra ] and the choice of the determinant algorithm from @xcite ensures that @xmath46 probability is obtained .",
    "the following theorem gives the complexity of the algorithm .",
    "the expected complexity of algorithm [ alg : introsp ] in the case of a dense matrix is @xmath377    the worst case complexity depends on the algorithm used in the last step .    to analyze the complexity of the algorithm we will consider the complexity of each step . for a dense matrix @xmath0 , with @xmath74 defined as in the line 1 ,",
    "the complexity of initial cra iterations is @xmath378 .",
    "the while loop is constructed in this way that we perform at most @xmath379 ( see subsection [ rem : imax ] for the bound on @xmath366 ) iterations , where @xmath380 .",
    "therefore the cost is @xmath381 . considering the time limit ,",
    "this is also the time of all cra loop iterations . to compute @xmath382 we    need @xmath383 bit operations",
    "then , the computation of the @xmath384 determinant of @xmath385 by a deterministic algorithm ( i.e , deterministic cra ) costs @xmath386 bit operations , which for @xmath387 with @xmath366 being @xmath146 is @xmath388 and thus negligible .    with the expected number of invariant factors bounded by @xmath366 ( see thm.[expected ] )",
    ", it is expected that the algorithm will return the result before the end of the _ while _ loop , provided that the under - estimation of @xmath389 is not too big . but",
    "by updating @xmath25 @xmath141 times and updating the product @xmath389 twice , it is expected that the overall under - estimation will be @xmath24 ( see theorem [ thm : lif ] and lemma [ lem : pi ] ) , thus it is possible to recover it by several cra loop iterations .    for the last step for a dense matrix",
    "we propose the @xmath390 algorithm of kaltofen @xcite or @xmath391 algorithm of storjohann @xcite .",
    "we refer to @xcite for a survey on complexity of determinant algorithms .",
    "the described algorithm is implemented in the linbox exact linear algebra library @xcite . in a preliminary version @xmath366",
    "is set to 2 or 1 and the switch in the last step is not implemented .",
    "this is however enough to evaluate the performance of the algorithm and to introduce further adaptive innovations .",
    "all experiments were performed on 1.3 ghz intel itanium2 processor with 128 gb ( 196 gb since september 2006 ) of memory disponsible .    for a generic case of random dense matrices",
    "our observation is that the bound for the number of invariant factors is quite crude .",
    "therefore the algorithm [ alg : introsp ] is constructed in the way that minimizes the number of system solving to at most twice the actual number of invariant factors for a given matrix . under the assumption that the approximations @xmath25 and @xmath392 are sufficient",
    ", this leads to a quick solution .    indeed for random dense matrices , the algorithm nearly always stopped with early termination after one system solving .",
    "this together with fast underlying arithmetics of fflas @xcite accounted for the superiority of our algorithm as seen in figure [ picture ] and [ hybrid ] where comparison of timings for different algorithms is presented .",
    "notice , that our algorithm beats the uncertified ( i.e. monte carlo type ) version of the algorithm of @xcite which claims currently the best theoretical complexity .",
    "this proves that adaptive approach is a powerful tool which allow us to construct the algorithms very fast in practice            thank to the introspective approach our algorithm can detect the cases when the number of invariant factors is small and equal to @xmath393 .",
    "one can therefore argue the complexity of our algorithm is in fact @xmath394 , where @xmath74 is the number of invariant factors . to test the performance of our algorithm to detect propitious cases",
    "we have run it on various sets of structured and engineered matrices .",
    "the adaptive approach allowed us to obtain very good timings which motivates us to encourage the use of this algorithms in the situations which go further beyond the dense case .",
    "figure [ sparse ] we present the results of the determinant computation for sparse matrices of n. trefethen .",
    "the results encouraged us to construct a sparse variant of our algorithm , which we shortly describe in section [ sec : sparse ] .",
    "figure [ sparse ] gives a comparison of the performance of sparse and dense variants .",
    "we used the sparse solver of @xcite .",
    "using the algorithm with the dense solver outperforms using the sparse solver by a factor of @xmath395 to @xmath396 , and decreasing with the matrix size @xmath2 .",
    "thanks to the space - efficiency of the sparse algorithm we are able to compute the determinant for @xmath397 matrix for which the dense solver requires to much memory .        in figure [ randomsparse ]",
    "we compare the performance of dense and sparse variants of the algorithm with the cra algorithm ( sparse variant ) for random sparse matrices .",
    "the matrices are very sparse ( 20 non - zero entries per row ) . to ensure that the determinant is non - zero we put 1 on the diagonal .",
    "both dense and sparse variants of the algorithm have better running times than the cra , which proves that we can detect propitious cases for sparse matrices .",
    "furthermore , sparse variant is best for bigger matrices and again lets us solve the problem when the dense variant fails due to unsufficient memory .    in table",
    "[ table ] we give the timings for the algorithm with @xmath398 and @xmath399 .",
    "the algorithms was run on a set of specially engineered matrices which have the same smith form as @xmath400 and the number of invariant factors of about @xmath401 . we notice that the algorithm with @xmath398 ( which is in fact a slightly modified version of abbott s algorithm @xcite ) runs better for small @xmath2 .",
    "this motivated us to develop an even more adaptive approach , which we describe in section [ sec : adaptive ] .",
    ".comparison of the performance of algorithm [ alg : introsp ] with @xmath402 set to 1 and 2 on engineered matrices . [ cols=\"<,^,^,<,^,^\",options=\"header \" , ]      when trying to adapt our determinant algorithm to the sparse case , the immediate problem is the bound for the expected number of invariant factors . on",
    "can easily notice , that for a matrix with @xmath74 non - zero entries per row , chosen uniformly and randomly from the set of @xmath12 contiguous integers , the expected number of invariant factors divisible by @xmath326 can be bounded from below by @xmath403 and thus is linear with @xmath2 .",
    "thus , we can not use the same argument to estimate the expected number of system solvings as in the dense case .",
    "one solution would be to consider the number of  big ",
    "invariant factors , i.e. the number of invariant factors which are bigger than a certain parameter @xmath404 .",
    "the parameter has to be chosen in a way , that the product of all smaller factors can be computed by modular cra loop quicker than another rational solution of a system of equation .",
    "we could exploit here the difference in complexity between system solving and one modular routine which is @xmath405 to @xmath406 ( or @xmath407 to @xmath408 in the case of sparse procedures ) .",
    "this could enable us to recover @xmath409 ( @xmath410 ) bits of the determinant by running modular routines without exceeding the cost of one linear system solving .",
    "this adaptive solution is already implemented in the dense version of the algorithm , which motivated us to run it on potentially unsuitable matrices .",
    "when comparing the times for the cra algorithm and our algorithm applied to sparse matrices ( however , without exploiting their sparsity ) we decided that there is a need for a ",
    "sparse  version of our algorithm , which will take into account the sparse structure of the matrices in the subroutines .    in what follows we will shortly present the sparse counterparts of the subroutines used , give their complexities and discuss some modification of the parameters if needed .",
    "we assume that the cost of one matrix - vector product is @xmath411 .    instead of the dense lu",
    ", sparse elimination can be used in practice e.g. for extremely sparse matrices @xcite . in general ,",
    "black box method are preferred .",
    "the idea is to precondition the matrix so that its characteristic polynomial equals its minimal polynomial @xcite ; and then to compute the minimal polynomial via wiedemann s algorithm @xcite .",
    "the complexity of the sparse modular determinant computation is then @xmath412 ( * ? ? ?",
    "* table 4 ) .",
    "adaptive solutions exist @xcite . for solving a sparse system of linear equations",
    "the solver of @xcite can be used . by similar reasoning as in @xcite , the cost of solving @xmath95 for a sparse matrix @xmath0 is that of @xmath413 matrix - vector products and @xmath414 additional arithmetic operations . if @xmath109 is @xmath415 in size and @xmath416 , this means that the complexity of computing @xmath20 is @xmath417 bit operations",
    ".    currently known sparse determinant algorithms that can be used in the worst - case step include the cra loop ( with the complexity @xmath418 ) and the algorithm of @xcite . by moving to the sparse solver in @xcite we can obtain an algorithm with the worst time complexity of @xmath419 .",
    "all in all , by moving to the sparse procedures , we obtain the algorithm with the complexity @xmath420 where @xmath74 is the number of invariant factors . in the propitious case where @xmath74 is smaller than @xmath421",
    "we obtain an algorithm with the running time better than the currently known algorithms .",
    "we start with a simple remark . for every matrix , with each step , the size of @xmath422 decreases whilst the cost of its computation increases . in table",
    "[ table ] , this accounts for better performance of abbott s algorithm , which computes only @xmath20 , in the case of small @xmath2 . for bigger @xmath2 calculating @xmath136 starts to pay out .",
    "the same pattern repeats in further iterations .",
    "the switch between winners in table [ table ] can be explained by the fact that , in some situations , obtaining @xmath422 by @xmath423-factorization ( which costs @xmath424 the time of lu ) outperforms system solving .",
    "then , this also holds for all consecutive factors and the algorithm based on cra wins .",
    "the condition can be checked _ a posteriori _ by approximating the time of lus needed to compute the actual factor .",
    "we can therefore construct a condition that would allow us to turn to the cra loop in the appropriate moment .",
    "this can be done by changing the condition in line 27 ( @xmath425 ) to @xmath426 if the primes used in the cra loop are greater than @xmath69 .",
    "this would result with a performance close to the best and yet flexible .",
    "if , to some extend , @xmath422 could be approximated _ a priori _ , this condition could be checked before its calculation .",
    "this would require a partial factorization of @xmath427 and probability considerations as in section [ number ] and @xcite .",
    "in this paper we have presented an algorithm computing the determinant of an integer matrix . in the dense case we proved that the expected complexity of our algorithm is @xmath428 and depends mainly on the cost of the system solving procedure used and the expected number of invariant factors .",
    "our algorithm uses an introspective approach so that its actual expected complexity is only @xmath429 if the number @xmath74 of invariant factors is smaller than _ a priori _ expected but greater than @xmath367 ; the actual running time can be even smaller , assuming that any under - estimation resulting from probabilistically correct procedures can be compensated sooner than expected .",
    "moreover , the adaptive approach allows us to switch to the algorithm with best worst case complexity if it happens that the number of nontrivial invariant factors is unexpectedly large .",
    "this adaptivity , together with very fast modular routines , allows us to produce an algorithm , to our knowledge , faster by at least an order of magnitude than other implementations",
    ".    ways to further improve the running time are to reduce the number of iterations in the solvings or to group them in order to get some block iterations as is done e.g. in @xcite .",
    "a modification to be tested , is to try to reconstruct @xmath20 with only some entries of the solution vector @xmath430 .",
    "parallelization can also be considered to further modify the algorithm .",
    "of course , all the lu iterations in one cra step can be done in parallel .",
    "an equivalently efficient way is to perform several @xmath4-adic liftings in parallel , but with less iterations @xcite .",
    "there the issue is to perform an optimally distributed early termination .",
    "25    j. abbott , m. bronstein , t. mulders .",
    "fast deterministic computation of determinants of dense matrices . in _ proc . of acm international symposium on symbolic and algebraic computation ( isaac1999 ) _ , 197 - 204 , acm press , 1999 .",
    "l. chen , w. eberly , e. kaltofen , b.d .",
    "saunders , w.j .",
    "turner , g. villard .",
    "efficient matrix preconditioners for black box linear algebra . in _ linear algebra and applications _ , pp . 343344 .",
    "z. chen and a. storjohann .",
    "a blas based c library for exact linear algebra on integer matrices . in _ proc . of acm international symposium on symbolic and algebraic computation ( isaac2005 )",
    "_ , 9299 , acm press , 2005 .",
    "d. coppersmith , s. winogard .",
    "matrix multiplication via arithmetic progression . in _ proc .",
    "19th annual acm symposium of theory of computing _ , 1 - 6 , 1987 .",
    "cung , v.  danjean , j .-",
    "dumas , t.  gautier , g.  huard , b.  raffin , c.  rapine , j .- l .",
    "roch , d.  trystram , adaptive and hybrid algorithms : classification and illustration on triangular system solving , in : _ proceedings of transgressive computing 2006 , granada , espaa_. 2006 .    j. dixon . exact solution of linear equations using @xmath50-adic expansions . in",
    "_ numer.math . _ 40(1 ) , 137 - 141 , 1982 .",
    "dumas , d. saunders , g. villard . on efficient sparse integer matrix",
    "smith normal form computations . in _ journal of symbolic computations .",
    "_ 32 ( 1/2 ) , 71 - 99 , 2001 .    j.g .",
    "dumas , w. turner , z. wan .",
    "exact solution to large sparse integer linear systems .",
    "_ eccad2002 : the 9th annual east coast computer algebra day _",
    ", 2002 .",
    "dumas , t. gautier , c. pernet .",
    "fflas : finite field linear algebra subroutines . _ issac2002_. 2002 .",
    "dumas , t. gautier , m. giesbrecht , p. giorgi , b. hovinen , e. kaltofen , d. saunders , w. turner , g. villard .",
    "linbox : a generic library for exact linear algebra .",
    "_ icms2002 : international congress of mathematical software_. 2002 .",
    "dumas , g. villard . computing the rank of large sparse matrices over finite fields .",
    "_ casc2002 computer algebra in scientific computing_. 2002 .",
    "dumas , p. giorgi , c. pernet .",
    "ffpack : finite field linear algebra package .",
    "_ issac2004_. 2004 .",
    "dumas , c. pernet , zhendong wan .",
    "efficient computation of the characteristic polynomial . _ issac2005 _ , p 181 - 188 .",
    "dumas , a. urbaska .",
    "an introspective algorithm for the integer determinant . in : _",
    "proceedings of transgressive computing 2006 , granada , espaa_. 2006 .",
    "a. duran , d. saunders , z.wan .",
    "hybrid algorithms for rank of sparse matrices . in : _",
    "proceedings of the siam international conference on applied linear algebra_. 2003 .",
    "w. eberly , e. kaltofen . on randomized lanczos algorithms .",
    "issac1997_. 1997    w. eberly , m. giesbrecht , g. villard .",
    "on computing the determinant and smith form of an integer matrix . in _ proc .",
    "41st focs _ , 675 - 687 , 2000 .",
    "w. eberly , m.giesbrecht , p. giorgi , a. storjohann , g. villard . solving sparse integer linear systems .",
    "_ issac2006_. 2006 .",
    "ibarra , s. moran , r.hui .",
    "a generalization of the fast lup matrix decomposition algorithm and applications .",
    "_ journal of algorithms _ , 3(1):45201356 , mar.1982 .",
    "e. kaltofen , g. villard .",
    "computing the sign or the value of the determinant of an integer matrix , a complexity survey . in _ journal of computational and applied mathematics _ 164(2004 ) , 133 - 146 2004 .",
    "e. kaltofen , g. villard .",
    "on the complexity of computing determinants .",
    "_ computational complexity _ , 31(3 - 4 ) , pp 91130 , 2005 .",
    "t. mulders , a. storjohann .",
    "diophantine linear system solving .",
    "_ isaac1999 _ , 181 - 188 . 1999 .",
    "d. musser .",
    "introspective sorting and selection algorithms . _ software  practice and experience _",
    ", 8(27 ) , pp 983993 , 1997 .    v. pan .",
    "computing the determinant and the characteristic polynomial of a matrix via solving linear systems of equations . _",
    "inform . process .",
    "_ 28(1988 ) 71 - 75",
    ". 1988 .",
    "d. saunders , z. wan .",
    "smith normal form of dense integer matrices , fast algorithms into practice .",
    "_ issac 2004 _ 2004 .",
    "a.storjohann . the shifted number system for fast linear algebra on integer matrices .",
    "_ journal of complexity _ , 21(4 ) , pp 609650 , 2005 .",
    "a. storjohann , p. giorgi , z. olesh .",
    "implementation of a las vegas integer matrix determinant algorithm .",
    "_ eccad05 : east coast computer algebra day _ , 2005 .",
    "computing the smith forms of integer matrices and solving related problems .",
    "thesis , u. of delaware , usa , 2005 .",
    "d. wiedemann . solving sparse linear equations over finite fields . in _",
    "ieee trans .",
    "inf . theory _ ,",
    "54 - 62 . 1986",
    "in this appendix we present some probabilistic properties of matrices with entries almost uniformly distributed modulo @xmath326 , @xmath431 .",
    "we consider the case , when the entries are randomly and uniformly chosen from a set of @xmath12 contiguous integers @xmath432 , for any @xmath433 . as the result ,",
    "the probability that an entry is equal to a given @xmath434 modulo @xmath326 is bounded as follows @xmath435 we set @xmath436 this special case of non - uniformly distributed random variables was widely considered in the thesis of z. wan ( see @xcite ) for @xmath437 . in the following",
    "we will first consider the rank modulo @xmath4 of a matrix under certain conditions ( lemma [ app : rankp ] ) .",
    "then we give the analogues of the theorems 5.9 - 5.15 of @xcite in the case @xmath438 ( lemmas [ app : non - uni],[app : lxr ] , [ app : ax ] ) .",
    "this allows us to prove theorem [ expected ] on the expected number of invariant factors and theorem [ lem : pi ] , which gives the expected size of over - approximation of @xmath439 in the case of perturbed matrices .",
    "[ app : rankp ] let @xmath0 be a @xmath169 , @xmath170 integer matrix with entries chosen uniformly and randomly form @xmath318 . the probability that @xmath171 , the rank modulo @xmath4 of @xmath0 , is @xmath172 , @xmath173 is less than or equal to @xmath440 where @xmath441 and @xmath442 .",
    "the proof is inductive on @xmath179 and @xmath172 . for @xmath443 and @xmath444",
    "the fact that @xmath445 means that all the entries of @xmath0 are zero modulo @xmath4 , that is @xmath446 the latter being less than @xmath447 .    now , denote by @xmath448 the submatrix of @xmath0 consisting of @xmath29 first columns .",
    "for @xmath449 we have @xmath450 to compute @xmath451 we notice the fact that @xmath452 means that we can choose an @xmath453 non - zero minor of @xmath454 .",
    "this means that we can leave the choice of the corresponding @xmath455 entries of the @xmath29th column free and only have to ensure that the remaining subvector of size @xmath456 is not equal to some given vector .",
    "this gives @xmath457 and in consequence @xmath458    now , assume that for all @xmath459 such that @xmath460 the bound holds .",
    "we consider @xmath461 , where @xmath462 .",
    "we can rewrite : @xmath463 to estimate @xmath464 , as in previous reasoning , we only have to ensure that @xmath465 entries of the last column are not equal to a certain vector . on the contrary ,",
    "for @xmath466 we notice that we can leave the choice of @xmath467 entries corresponding to a non - zero minor free , but the remaining @xmath468 entries have to be determined modulo @xmath4 . by induction , we have @xmath469 which finishes the proof .",
    "let us consider the example of @xmath470 @xmath471 matrices .",
    "we will consider @xmath472 .",
    "we can construct @xmath473 different matrices , @xmath474 of which fulfill the condition that the rank is equal to @xmath343 .",
    "the probability of choosing at random a matrix of rank @xmath343 is thus @xmath475 .",
    "the bound given by eq .",
    "is @xmath476 which gives exactly the same value .",
    "the following lemma gives analogues to lemmas 5.10 , 5.11 in @xcite in the case of the ring @xmath477 .",
    "it proves that the vectors of elements from @xmath318 can also be treated as almost - uniformly distributed .",
    "a.   [ 2]let @xmath478 be a non - zero mod @xmath4 vector of size @xmath2 , @xmath479 .",
    "then the probability that a random vector @xmath480 is chosen such that @xmath481 is @xmath482 b.   [ 3]let @xmath483 , a matrix of rank @xmath108 such that the local smith form of @xmath0 at @xmath4 is trivial , @xmath484 be given .",
    "then the probability that a random vector @xmath485 is chosen such that @xmath486 is @xmath487    for the proof of 5.10 from @xcite carry on .",
    "for we slightly modify the proof of 5.11 from @xcite .",
    "since @xmath0 has a trival smith form modulo @xmath4 there exist two matrices @xmath488 , @xmath489 , such that @xmath490\\left[\\begin{array}{c}r'\\\\r''\\end{array}\\right]$ ] , where @xmath491 $ ] mod @xmath4 is a @xmath492 matrix .",
    "we may therefore transform @xmath493_{1 .. r } ) \\ ] ] since the determinant of @xmath77 is non - zero modulo @xmath4 there exist a @xmath494 minor @xmath495 which is non - zero modulo @xmath4 .",
    "this means that we can find elements @xmath496 of @xmath495 , where @xmath497 are pairwise distinct , such that @xmath498 are non - zero modulo @xmath4 .",
    "let @xmath499 .",
    "the probability can be further rewritten : @xmath500_{1 .. r})=\\sum_{j_1\\in{\\ensuremath{\\mathbb{z}}}_{p^l}}\\dots \\sum_{j_r\\in{\\ensuremath{\\mathbb{z}}}_{p^l}}\\\\ & { \\ensuremath{\\mathcal{p}}}\\hspace{-2pt}\\left(\\begin{array}{c }                  r_{11}x_1+\\dots + \\hat{r_{1i_1}x_{i_1}}+ \\dots r_{1n}x_n = j_1\\\\                  r_{21}x_1+\\dots + \\hat{r_{2i_2}x_{i_2}}+ \\dots r_{2n}x_n = j_2\\\\                  \\dots \\\\",
    "r_{r1}x_1+\\dots + \\hat{r_{ri_r}x_{i_r}}+ \\dots r_{rn}x_n = j_r\\end{array}\\right )                    { \\ensuremath{\\mathcal{p}}}\\hspace{-2pt}\\left(\\begin{array}{c }                  x_{i_1}=(d_1-j_1)r_{1i_1}^{-1}\\\\                  x_{i_2}=(d_2-j_2)r_{2i_2}^{-1}\\\\                  \\dots \\\\                  x_{i_r}=(d_r - j_r)r_{ri_r}^{-1}\\end{array}\\right)\\leq \\left ( \\frac{1}{s}\\lceil\\frac{s}{p^l}\\rceil\\right)^r\\end{aligned}\\ ] ] we use @xmath501 to denote that the element with index @xmath74 is omitted in the sum .",
    "[ app : lxr ] let @xmath502 be matrices such that @xmath503 .",
    "let @xmath504 , @xmath505 be any disjoint subsets of @xmath506 ( sets of index pairs ) .",
    "let @xmath507 ( resp .",
    "@xmath508 ) be any values ( resp .",
    "subsets ) from @xmath509 .",
    "we consider the probability of choosing a random matrix @xmath270 such that @xmath510 for @xmath511 under the condition that @xmath512 for @xmath513 .",
    "we have @xmath514      let @xmath516 denote a set of all possible matrices @xmath517 $ ] such that @xmath518",
    "if @xmath519 and @xmath520 otherwise . let @xmath521 denote a set of matrices from @xmath516 for which additionally @xmath522 if @xmath523 . then eq .",
    "can be transformed to @xmath524 notice , that sets @xmath521 and @xmath525 ( resp . @xmath516 and @xmath526 ) have the same number of elements . to compute the probability it suffices to count the number of elements in @xmath521 and @xmath516 .",
    "the proportion is determined by the choice of elements from @xmath504 and is therefore less than or equal to @xmath527 .",
    "[ app : ax ] let @xmath483 be a matrix such that the smith form of @xmath0 is trivial and @xmath528 .",
    "let @xmath504 , @xmath318 be any disjoint subsets of @xmath529 ( sets of index pairs ) .",
    "let @xmath530 ( @xmath531 ) be any values ( resp .",
    "subsets ) from @xmath509 .",
    "we consider the probability of choosing a random matrix @xmath270 such that such that @xmath532 for @xmath511 under the condition that @xmath533 for @xmath534 .",
    "we have @xmath535    let matrices @xmath536 be as in the proof of [ app : non - uni ] . as in the proof of [ app : lxr ]",
    ", we construct the sets of matrices @xmath521 , @xmath516 .",
    "we have @xmath537 where @xmath538 denote the @xmath29th column of @xmath270 and @xmath539 , the set of all possible @xmath29th columns for matrices from @xmath540 .",
    "since holds for every vector @xmath541 of @xmath542 , again , we can link the the probability to the number of elements in @xmath504 and conclude that holds .",
    "[ app : determinant ] let @xmath101 be an @xmath169 matrix , @xmath543 , such that the smith form of @xmath101 is trival and @xmath101 has a full rank .",
    "let @xmath305 be an @xmath286 matrix with entries chosen randomly and uniformly from set @xmath318 , the probability that @xmath307 divides the determinant @xmath308 is at most @xmath309 .    to check whether @xmath544 we will consider a process of diagonalization for @xmath545 mod @xmath546 as described in algorithm _ lre _ of @xcite .",
    "it consists of diagonalization and reduction steps . at the @xmath108-th diagonalization step ,",
    "if an invertible entry is found , it is placed in the @xmath547 pivot position and the @xmath108th column is zeroed .",
    "if no invertible entry is found , we proceed with a reduction step i.e. we consider the remaining @xmath548 submatrix divided by @xmath4 .",
    "the problem now reduces to determining whether @xmath549 of an @xmath548 matrix is greater than @xmath550 .",
    "we can consider matrix @xmath551 , where matrix @xmath552 , @xmath553 and @xmath554 .",
    "the probability that an entry of @xmath555 is equal to a certain @xmath434 modulo @xmath4 is less that or equal @xmath556 , where @xmath557 is equal to @xmath558 by lemma [ app : ax ] .    in the process of diagonalization",
    "we can find matrices @xmath559 , @xmath560 , @xmath561 such that @xmath562 and @xmath563 .",
    "then after the reduction step we set @xmath564_{i = r+1\\dots n , j = r+1\\dots n}$ ] and @xmath565 equal to @xmath566_{i = r+1\\dots n , j = r+1\\dots n}$ ] , @xmath567 and we repeat the diagonalization phase . by construction , the choice of @xmath568 means that certain entries of @xmath305 are fixed and places us in the situation of lemmas [ app : lxr],[app : ax ] .",
    "thanks to that we can consider the distribution of entries of @xmath569 as non - uniform i.e. @xmath570 .    another way to see",
    "this is to think of the diagonalization as the modification to @xmath571 in the form of @xmath572 with @xmath573 and @xmath574 fixed by the previous step .",
    "then one has one degree of freedom , say for @xmath575 and then @xmath571 has to be fixed .",
    "we need only to consider @xmath576 reductions steps as each reduction is performed on a matrix of order at least 2 and divides the determinant by at least @xmath577 . since @xmath74 is less than @xmath578 and @xmath579 , we have @xmath580 and since we only consider @xmath581 we have @xmath582 throughout the process .",
    "we therefore now set @xmath583 and use it as a bound for @xmath584 , @xmath585 in our calculations .",
    "the proof is inductive on @xmath2 , the dimension of the matrix @xmath586 and @xmath69 , the current exponent .",
    "we fix the diagonalization / reduction matrices @xmath587 and consider the conditional probability @xmath588 .",
    "for @xmath593 we will sum over all possible choices of @xmath594 and @xmath595 .",
    "we will divide the sum on the cases when applying @xmath594 and @xmath595 leads to the diagonalization of at least @xmath108 entries .",
    "we call such an event @xmath596 .",
    "now we suppose inductively that @xmath599 for all @xmath600",
    ". then for @xmath601 the induction gives @xmath602 the latter is less than @xmath603 when @xmath604 with @xmath605 this means that @xmath606 which is fulfilled for @xmath607 . for primes",
    "@xmath608 we have to use a sharper bound for @xmath609 . since @xmath610 and @xmath611 we have @xmath612 this allows us to prove the inequality for @xmath613 since @xmath614 . for @xmath214 and @xmath615 also @xmath616 . for the remaining case @xmath214 , @xmath617 we can bound @xmath618 by @xmath343 instead of @xmath619 and",
    "then one can prove that @xmath620 .",
    "now we will consider @xmath621 .",
    "again we can sum over all possible diagonalization and reduction steps combinations and the resulting bound for the probability is @xmath622 for @xmath623 and similarly for @xmath624 @xmath625 again , we can use the induction to get the bound @xmath626 .",
    "then , we can then bound both sums by @xmath627 to prove the inequality @xmath628 , we have to consider several cases .",
    "for @xmath629 we use the bound @xmath630 and @xmath631 for @xmath632 and @xmath609 respectively",
    ". then we have @xmath633 for @xmath613 it can be explicitly checked that @xmath634 using the bound @xmath635 for @xmath632 ( notice that @xmath636 ) . in this case",
    "we get @xmath637 .",
    "* @xmath641 : @xmath642 as @xmath643 we have @xmath644 . *",
    "@xmath617 : @xmath645 as @xmath646 we have @xmath647 .",
    "* @xmath648 : @xmath649 as @xmath650 we have @xmath651 . *",
    "@xmath640 : + we use inequality with @xmath652 bounded by @xmath653 .",
    "we get @xmath654 is less than @xmath655 ."
  ],
  "abstract_text": [
    "<S> we present an algorithm for computing the determinant of an integer matrix @xmath0 . </S>",
    "<S> the algorithm is _ introspective _ in the sense that it uses several distinct algorithms that run in a concurrent manner . during the course of the algorithm partial results coming from distinct methods </S>",
    "<S> can be combined . </S>",
    "<S> then , depending on the current running time of each method , the algorithm can emphasize a particular variant . </S>",
    "<S> with the use of very fast modular routines for linear algebra , our implementation is an order of magnitude faster than other existing implementations . </S>",
    "<S> moreover , we prove that the expected complexity of our algorithm is only @xmath1 _ bit operations _ in the case of random dense matrices , where @xmath2 is the dimension and @xmath3 is the largest entry in the absolute value of the matrix .    </S>",
    "<S> laboratoire jean kuntzmann , umr cnrs 5224 + universit joseph fourier , grenoble i + bp 53x , 38041 grenoble , france . + \\{jean - guillaume.dumas;anna.urbanska}@imag.fr + link : ljk.imag.fr / membres/{jean - guillaume.dumas;anna.urbanska}[ljk.imag.fr / membres/\\{jean - guillaume.dumas;anna.urbanska } ] + </S>"
  ]
}