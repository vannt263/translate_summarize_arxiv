{
  "article_text": [
    "recently we proposed a new algorithm for computation of cohomology of a wide class of lie superalgebras .",
    "this algorithm reduces the computation for the whole cochain complex to a number of smaller tasks within smaller subcomplexes .",
    "one can demonstrate that if @xmath7 is the computation time for the whole complex , then partition of the complex into @xmath8 subcomplexes reduces the computation time roughly to the value @xmath9 .",
    "thus , the approach appeared to be efficient enough to cope with several difficult tasks in computing cohomology for particular lie ( super)algebras @xcite .",
    "more detailed experiments with the _ * c * _ implementation of the algorithm , including profiling , reveal that arithmetic operations over @xmath2 take the main part of computation time ( usually more than 90% for large tasks ) . the same is true if @xmath2 is replaced by @xmath10 ( though computation becomes somewhat faster ) .",
    "a standard way to reduce negative influence of this bottleneck is to compute several modular images of the problem with subsequent restoring the result over @xmath10 or @xmath2 by the chinese remaindering or an algorithm for recovering a rational number from its modular residue @xcite .",
    "though , as is clear , the sum of sizes of modules used for constructing images can not be less than the size of maximum integer in the final result , the modular approach allows the intermediate swelling of coefficients to be avoided .",
    "moreover the use of modular images is much more advantageous in the case of ( co)homology computation than in the traditional problems of linear algebra .",
    "as we demonstrate further , the overwhelming part of computation can be accomplished using only one modular image .",
    "recall that the gauss elimination , the basic constituent of algorithms for computing ( co)homology , over @xmath11 has only _ cubic _ computational complexity in contrast to the _ exponential _ one over @xmath2 or @xmath12    note that the approach presented here can be applied not only for the lie superalgebras , but in more general case of computation of homology or cohomology , especially when there is a practical method of splitting ( co)chain complex into smaller subcomplexes .    to demonstrate the power of the new algorithm and program",
    ", we present the results of computation of cohomology in the trivial module for the algebra @xmath13 this is an example ( for @xmath14 ) of the lie superalgebra of special ( divergence free ) vector fields on the @xmath15-dimensional supermanifold preserving the odd version of symplectic ( periplectic , as a.  weil called it ) structure @xcite .",
    "these superalgebras , being super counterparts of the lie algebras of hamiltonian vector fields , are vital in the batalin  vilkovisky formalism , see @xcite .",
    "the @xmath16th cohomology is defined as the quotient group @xmath17 for the _ cochain complex _",
    "@xmath18 here , the @xmath19 are abelian groups of cochains , graded by the integer @xmath16 ( called _ dimension _ or _ degree _ ) ; the @xmath20 are differentials ( @xmath21 ) ; the @xmath22 and @xmath23 are the subgroups of cocycles and coboundaries , respectively ( see @xcite for details ) . in order to apply without restrictions the linear algebra algorithms , we assume that the groups of cochains are additive groups of certain linear spaces or modules and we shall use the corresponding terms in the subsequent text .      to compute the @xmath16th cohomology , it suffices to consider the following part of ( [ whole ] ) : @xmath24    first of all we split ( [ part ] ) using the @xmath10-grading in the cochain spaces induced by the gradings in the lie ( super)algebra ( and the module over this algebra ) involved in the construction of the cochain spaces : @xmath25 here , @xmath26 is a grading subset .",
    "it appears that , as a rule , any subcomplex in a given degree @xmath27 can be split , in turn , into smaller subcomplexes : @xmath28 here @xmath29 is a finite or infinite set of subcomplexes .",
    "equation ( [ spart ] ) means that the spaces @xmath30 split into the direct sum of subspaces @xmath31 and the matrices of the linear mappings @xmath32 can be represented in the block - diagonal form @xmath33    the construction of these subcomplexes is the _ central part _ of the splitting algorithm .",
    "thus , the whole task reduces to a collection of easier tasks of computing @xmath34 as a basis of the cochain space @xmath35 we choose the set of super skew - symmetric monomials of the form @xmath36 here , @xmath37 and @xmath38 are basis elements of the algebra and module , respectively , and @xmath39 is the dual element to @xmath40 that is , @xmath41 the degrees of factors in ( [ monom ] ) satisfy the relation @xmath42 notice that @xmath43 and this is a serious obstacle to extraction of finite - dimensional subcomplexes for infinite - dimensional lie ( super)algebras when computing cohomology in the adjoint module ( important in the deformation theory ) .",
    "we also assume that @xmath44    to construct a subcomplex @xmath45 from the sum in right hand side of ( [ spart ] ) , we begin with choosing somehow an arbitrary _ starting _ monomial @xmath46 of the form ( [ monom ] ) .",
    "there are various choices of the starting monomial and the time and space efficiency of computation depends on the choice . having no better idea , we use at present the following three strategies : choice of a lexicographically minimal , or lexicographically maximal , or random monomial .",
    "we call these strategies _ bottom _ , _ top _ and _ random _ , respectively . among these",
    ", the top strategy seems to be most efficient ( see experimental data in tables [ timesh ] and [ timessle ] ) and it is used by default .",
    "nevertheless , other strategies help sometimes to push through difficult tasks when the top strategy fails .",
    "then we construct the three sets @xmath47 @xmath48 and @xmath49 of basis monomials for @xmath50 @xmath51 and @xmath52 respectively , by the procedure _ * constructsubcomplex * _ presented on page .",
    "constructsubcomplex[constructsubcomplex ] *  input :  * @xmath46 , starting @xmath53-monomial + *  output : * @xmath54 , @xmath55 , @xmath49 , monomial bases of cochain spaces in the current +   subcomplex @xmath56 : @xmath57 such that @xmath58 + *  local :  * @xmath59 @xmath60 , @xmath61 , working subsets +  of currently `` new '' ( not yet processed ) monomials ; +  @xmath62 , @xmath63 , @xmath64 , working sets of monomials ; +  @xmath65 , @xmath66 , @xmath67 , working monomials + *  initial setting : * +  1 : @xmath68 +  2 : @xmath69 +  3 : @xmath70 + *  loop over @xmath16-monomials : * +  4 : _ * while * _ @xmath71 _ * do * _ +  5 :   @xmath72 +   * supplement the set @xmath54 * : +  6 :   @xmath73 +  7 :   @xmath74 +  8 :   @xmath75 +   * supplement the set @xmath49 * : +  9 :   @xmath76 +  10 :   @xmath77 +  11 :   @xmath78 +   * exclude processed monomial @xmath66 * : +  12 :   @xmath79 +   * loop over @xmath80-monomials : * +  13 :   _ * while * _ @xmath81 _ * do * _ +  14 :   @xmath82 +   * supplement the set @xmath83 * +  15 :   @xmath84 +  16 :   @xmath85 +  17 :   @xmath86 +   * exclude processed monomial @xmath87 * +  18 :   @xmath88 +  19 :   _ * od * _ +   * loop over @xmath89-monomials : * +  20 :   _ * while * _ @xmath90 _ * do * _ +  21 :   @xmath91 +   * supplement the set @xmath55 : * +  22 :   @xmath92 +  23 :   @xmath85 +  24 :   @xmath93 +   * exclude processed monomial @xmath65 : * +  25 :   @xmath94 +  26 :   _ * od * _ +  27 : _ * od * _ +  28 : _ * return * _ @xmath54 , @xmath55 , @xmath49 +    the function _ * takemonomialfromset * _ called within _ * constructsubcomplex * _ takes the current monomial from a set of monomials .    the function _ * inverseimagemonomials * _ generates the set of @xmath95-monomials whose images with respect to the mapping @xmath96 contain a given @xmath97-monomial .",
    "the function _ * imagemonomials * _ generates the set of @xmath98-monomials whose inverse images with respect to the @xmath99 contain a given @xmath97-monomial .    in the finite - dimensional case ,",
    "the loops in the procedure _ * constructsubcomplex * _ are finite and we obtain in the end a minimal subcomplex of the form ( [ subcomplex ] ) .",
    "this is the unique minimal subcomplex involving the starting monomial @xmath46 .",
    "let us consider in more detail the procedure of computation of cohomology within the subcomplex in accordance with formula ( [ insubcomplex ] ) .",
    "from now on we assume that @xmath100 and @xmath101 in ( [ subcomplex ] ) are finite - dimensional spaces over @xmath2 or @xmath11 or modules over @xmath12    since important in mathematics and physics fields @xmath102 and @xmath103 are , in principle , non - algorithmic objects , our main interest will be focused on the cohomology over the field @xmath2 ( or its algebraic extentions ) . in accordance with a general theorem in the homological algebra , called the _",
    "universal coefficient theorem _",
    "@xcite , ( co)homology with coefficients from an arbitrary abelian group @xmath104 can be expressed in terms of ( co)homology with coefficients in @xmath10 .",
    "thus , we can carry out the computation over @xmath10 and then go to the coefficient group we are interested in .",
    "let us consider now the connection between @xmath105 and @xmath106 in the finite - dimensional case , the group @xmath107 is a finitely generated abelian group having the following canonical representation @xmath108 here , @xmath109 , the number of copies of the integer group @xmath10 , is called the _",
    "rank _ of the abelian group @xmath107 or the _",
    "betti number_. the cyclic groups @xmath110 are called the _ torsion subgroups _ and their orders @xmath111 , having the property @xmath112 @xmath113 @xmath114 and so on , are called the _ torsion coefficients_.    in the case of cohomology , the universal coefficient theorem is expressed by the following split short exact sequence @xmath115 where the operation @xmath116 is the _ periodic product _ of abelian groups . in our context",
    "@xmath117 the term `` split '' , in application to sequence ( [ exact ] ) , means the possibility to construct the isomorphism @xmath118 replacing @xmath104 by @xmath2 in ( [ isomorphism ] ) and taking into account that @xmath119 for any abelian group @xmath120 , we have @xmath121 . since @xmath122 for arbitrary @xmath123 and @xmath124",
    "the dimension of @xmath125 interpreted as vector space over @xmath2 , coincides with the rank ( betti number ) @xmath109 of the group @xmath106    our modular approach is based on the following    [ theorem ] @xmath126    * remarks : *    1 .",
    "inequality ( [ inequality ] ) means that non - trivial cohomology classes computed over the field of rational numbers @xmath2 can exist only in the subcomplexes with non - trivial cohomology classes computed over the finite field @xmath11 with arbitrary prime @xmath127 2 .",
    "h. khudaverdian turned author s attention to the fact that inequality ( [ inequality ] ) can be deduced immediately from the universal coefficient theorem : considering the product @xmath128 and taking into account representation ( [ abelgroup ] ) and isomorphism @xmath129 , we see that the dimension of @xmath130 , as a vector space over @xmath11 , can not be less than @xmath109 ( only additional dimensions may appear , if the torsions in @xmath107 or @xmath131 contain cyclic groups of the form @xmath132 ) . + nevertheless , we give here a direct constructive proof in order to demonstrate in parallel the main ideas of ( co)homology computation .    _ proof . _",
    "to prove inequality ( [ inequality ] ) , we have to compute ( [ insubcomplex ] ) in such a way as to avoid cancellations of integers and apply the modular homomorphism @xmath133 at the end of computation .",
    "thus , it is convenient to consider ( [ insubcomplex ] ) over @xmath10 instead of @xmath134    we assume that @xmath135 is odd and use a symmetric representation of @xmath11 , i. e. , @xmath136 we will also apply @xmath137 component - wise to multicomponent objects over @xmath138 like vectors and matrices .",
    "+ we begin with the following setup :    * @xmath139 and @xmath140 are represented as finite - dimensional modules @xmath141 respectively , i. e. , @xmath142 + * the differentials @xmath143 and @xmath144 are represented ( in the monomial bases of the form ( [ monom ] ) , in our case ) as integer @xmath145 and @xmath146 matrices @xmath147 d =   d = , @xmath147 respectively .",
    "we write @xmath148 \\end{tabular } } \\hspace*{-7pt}\\stackrel{\\mbox{\\scriptsize{$j$}}}{a } } $ ] to indicate that matrix @xmath120 has @xmath149 rows and @xmath150 columns . * the matrices @xmath151 and @xmath152 satisfy the relation @xmath153    the computation of cohomology , i.e. , construction of quotient module , can be reduced to the construction of so - called _ ( co)homology decomposition _",
    "@xcite based on the computation of the smith normal forms @xcite of the matrices representing differentials .",
    "now we should consider the coboundary submodule @xmath168 combining the relation @xmath169 with the structure of the matrix @xmath29 ( see formula ( [ s0 ] ) ) , we can reduce the matrix @xmath152 determining coboundaries to the matrix @xmath170 acting in the submodule of cocycles : @xmath147 v^-1d = .",
    "@xmath147 computing the smith normal form @xmath171 for the reduced coboundary matrix we get @xmath147 s = = , @xmath147 where @xmath172 and @xmath173 \\end{tabular } } \\hspace*{-8pt}\\stackrel{\\mbox{\\scriptsize{$~r'$}}}{\\widetilde{s ' } } }   = \\mathrm{diag}\\left(s'_1,\\ \\ldots\\ , \\ s'_{r'}\\right).$ ]    we can extend the transformation matrix @xmath174 \\end{tabular } } \\hspace*{-10pt}\\stackrel{\\mbox{\\scriptsize{$m\\!-\\!r$}}}{\\widetilde{u ' } } } $ ] acting in the submodule of cocycles to the transformation matrix acting in the whole module @xmath175 @xmath147 u = = .",
    "@xmath147 here , @xmath159 \\end{tabular } } \\hspace*{-8pt}\\stackrel{\\mbox{\\scriptsize{$\\,r$}}}{i } } $ ] is the @xmath176 identity matrix . using the transformation matrices @xmath177 and",
    "@xmath178 we can transform the initial ( monomial in our case ) basis @xmath179 in the module @xmath180 into the basis @xmath181 making the cohomology decomposition explicit @xmath182 in this decomposition we have @xmath183 and @xmath184 the formula for the dimension of cohomology ( betti number ) follows from decomposition ( [ decomposition ] ) @xmath185    now let us consider how ( [ dimension ] ) changes under @xmath186 the image of ( [ dimension ] ) takes the form @xmath187 since @xmath137 is a ring homomorphism , we have for arbitrary unimodular matrix @xmath120 with integer entries @xmath188 that is @xmath137 maps the above transformation matrices into invertible matrices .",
    "hence the number of elements in the decomposition basis @xmath189 remains unchanged , @xmath190 on the other hand , the invariant factors @xmath191 and @xmath192 of the matrices @xmath193 and @xmath29 divisible by @xmath135 vanish , hence @xmath194 and inequality ( [ inequality ] ) is proved by comparing ( [ dimension ] ) and ( [ dimensionp ] ) .",
    "@xmath195      an algorithm based on the above ideas was implemented in the _ * c * _ language .",
    "the program called _ * liecohomologymodular * _ has the following structure :    1 .",
    "input lie ( super)algebra @xmath120 , module @xmath196 over @xmath120 , cohomology degree ( dimension ) @xmath16 and grade @xmath27 . @xmath120 and @xmath196 should be defined over ( some algebraic extension of ) @xmath10 or @xmath134 2 .",
    "construct the full set @xmath197 of @xmath16-cochain monomials in grade @xmath27 .",
    "3 .   choose a prime @xmath135 for searching subcomplexes with non - trivial cocycles by computing over @xmath11 .",
    "[ choosemonom ] choose an element @xmath198 ( the starting monomial ) .",
    "5 .   construct a minimal subcomplex @xmath199 such that @xmath200 6 .",
    "compute @xmath201 .",
    "[ computeh ] if @xmath202 then compute @xmath203 over @xmath10 or @xmath2 ( or their extensions ) .",
    "we can use here the chinese remaindering or the rational recovery algorithm as more efficient procedures than direct computation over @xmath10 or @xmath2 .",
    "delete all basis monomials of @xmath51 from @xmath204 9 .",
    "if @xmath197 is empty , then stop computation , otherwise go to step [ choosemonom ] .",
    "in the current implementation we obtain the relations determining cocycles and coboundaries ( in fact , the rows of matrices of differentials ) within the procedure _ * constructsubcomplex*_. these relations are generated one by one as by - product of the functions _ * inverseimagemonomials * _ and _ * imagemonomials*_. to prevent unnecessary memory consumption , every newly arising relation is reduced modulo the system of relations existing to the moment and , if the result is not zero , the new relation is added to the system .",
    "thus , we automatically have the matrices of differentials in the normal form just after completion of the procedure",
    "_ * constructsubcomplex*_. this process is obviously equivalent to the gauss elimination method , the most standard method for the computation of the smith normal form of a matrix .    in recent years , a number of new fast algorithms for the determination of smith normal form",
    "have been elaborated @xcite .",
    "these algorithms appear to be well suited to the ( co)homology computation .",
    "it is worth to study the possibility to incorporate these algorithms in our implementation .",
    "we could , for example , remove the generation of relations from the functions _ * inverseimagemonomials * _ and _ * imagemonomials * _ making them as fast as possible . then , after construction of subcomplex with the help of these modified functions , we should generate the matrices of differentials separately and apply the fast algorithms to these matrices .",
    "of course , this modification should be done if the total computation time decreases without substantial increase in the memory consumption .",
    "the works @xcite contain a detailed analysis of the properties of the sets of primes most appropriate for application of modular algorithms to a given matrix .",
    "here we give only a few comments concerning the choice of prime @xmath135 in our algorithm .",
    "these comments are based mainly on experiments with the program .    from the practical point of view",
    ", we should use only primes @xmath135 for which all operations in @xmath11 can be done within one machine word .",
    "thus , for 32bit architecture we should choose @xmath135 from the set of 8951 primes @xmath205 a good choice should not produce excessive cocycles . of course , such cocycles will be removed at step [ computeh ] anyway , but at the expense of additional work . in our context ,",
    "an `` unlucky '' prime is the one which divides the invariant factors of matrices of differentials ( or , in other words , the torsion coefficients of cohomology over @xmath10 ) and , as is clear , the probability for a given prime to be unlucky diminishes as the prime grows . on the other hand",
    ", there is an increase of time ( in the examples we have computed , up to factor 2 or 3 ) and space expenditures with increase of @xmath135 within the set @xmath206 so it makes sense not to use too large primes for searching subcomplexes with potentially non - trivial cohomology . in our practice ,",
    "we use , as a rule , a compromise : a prime near the half of 32bit word , namely , @xmath207 i. e. , the 4th fermat number .",
    "however , quite satisfactory results can be obtained even with much smaller primes , as is illustrated in table [ tab : dimh ] .",
    "the symbols @xmath208 in the boxes of this table mean that ( non - zero ) @xmath209 , whereas @xmath210 means the cohomology with coefficients in the trivial module for the lie algebra @xmath211 of hamiltonian vector fields on the @xmath212-dimensional symplectic manifold .",
    "we performed computation over all modular fields @xmath213 through @xmath214 as is seen in table [ tab : dimh ] , the results for @xmath215 fully coincide with those for @xmath2 for all computed grades @xmath216 $ ] ( and for all cohomology degrees @xmath16 ) .",
    "the table also illustrates theorem [ theorem ] , i.e. , all boxes containing non - zero dimensions for the field @xmath2 contain also non - zero ( @xmath217 same for @xmath2 ) dimensions for all fields @xmath11 considered .    in tables [ timesh ] and [ timessle ] we present ( considering both algebra and superalgebra cases ) the running times for computation over @xmath215 of cohomology @xmath218 ( for @xmath219 ) and @xmath220 ( for @xmath221 ) .",
    "the columns presented in these tables are : the dimensions of cochain spaces , i. e. , the sizes of matrices of differentials ; the running times in seconds for the _ top _ strategy of the choice of the starting monomial and comparison of the _ bottom _ and _ top _ strategies .",
    "the times in both tables were obtained on a 1133mhz pentium iii pc with 512 mb .",
    "note that the maximum memory consumption is near 46 mb and near 14 mb for the tasks in table [ timesh ] and in table [ timessle ] , respectively .",
    ".timing for @xmath222 , @xmath223 [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     &    @xmath224 +",
    "when computing cohomology we start with the construction of the full set of @xmath53-monomials . at the moment",
    "we do not see how to avoid this in deterministic algorithms . to represent the set of monomials ,",
    "we need to allocate @xmath225 elements of memory representing basis elements of algebra and module ( @xmath226 for the trivial and @xmath227 for any non - trivial module ) . in our implementation",
    "we represent basis elements by two - byte integers . for the last box in column 9 ( @xmath228 ) of table [ tab : h1 ] we have @xmath229 and the set of monomials occupies near 12 mb .",
    "the dimensions grow very rapidly , so , in fact , we are working on the brink of abilities of 32bit architecture and , even theoretically , we can add only a few rows to table [ tab : h1 ] .",
    "but , as to arithmetical difficulties , we have some progress .",
    "i would like to thank h. khudaverdian , d. leites and i. shchepochkina for helpful comments on drafts of this text .",
    "99 kornyak , v.v . : a new algorithm for computing cohomologies of lie superalgebras . in : _",
    "computer algebra in scientific computing / casc01 _ , v.g.ganzha , e.w.mayr and e.v.vorozhtsov ( eds . ) , springer - verlag berlin heidelberg ( 2001 ) 391398 kornyak , v.v . : a method of splitting cochain complexes to compute cohomologies of lie ( super)algebras .",
    "_ russian journal for computer science ( `` programmirovanie '' ) .",
    "_ * 2 * ( 2002 ) 7680 ( in russian ) kornyak , v.v . :",
    "extraction of `` minimal '' cochain subcomplexes for computing cohomologies of lie algebras and superalgebras . in : _",
    "computer algebra and its application to physics / caap-2001 _ , v.p .",
    "gerdt ( ed . ) , jinr dubna ( 2002 ) 186195 kornyak , v.v . : computation of cohomology of lie algebra of hamiltonian vector fields by splitting cochain complex into minimal subcomplexes . in : _",
    "computer algebra in scientific computing / casc02 _ , v.g.ganzha , e.w.mayr and e.v.vorozhtsov ( eds . ) , springer - verlag berlin heidelberg ( 2002 ) 201206 kornyak , v.v . : a method of splitting cochain complexes for computing cohomology : lie algebra of hamiltonian vector fields @xmath230 _ russian journal for computer science ( `` programmirovanie '' ) . _",
    "* 2 * ( 2003 ) 9499 ( in russian ) wang , p.s . ,",
    "guy , m.j.t . ,",
    "davenport , j.h . : @xmath135-adic reconstruction of rational numbers .",
    "_ sigsam bulletin , _ * 16 * ( 1982 ) 23 collins , g.e . ,",
    "encarnacin , m.j . :",
    "efficient rational number reconstruction .",
    "_ j. symb . comp .",
    ", _ * 20 * ( 1995 ) 287297 leites , d. : lie superalgebras . in : _",
    "modern problems of mathematics .",
    "recent developments _ , * 25 * , viniti , moscow ( 1984 ) p. 3",
    "( in russian ; english translation in josmar * 30(6 ) * ( 1985 ) p. 2481 ) leites , d. , shchepochkina , i. : _ classification of simple lie superalgebras of vector fields _ , preprint mpim-2003 - 28 ( www.mpim-bonn.mpg.de ) gomis j. , pars j. , samuel s. : antibracket , antifields and gauge - theory quantization .",
    "* 259 * ( 1995 ) , no . 12 , 145 pp fuks , d.b . : _ cohomology of infinite dimensional lie algebras .",
    "_ consultants bureau , new york ( 1987 ) fomenko , a.t . ,",
    "fuks , d.b . : _ a course in homotopic topology .",
    "nauka ( 1989 ) .",
    "( in russian ; an english translation of an earlier version was published by akadmiai kiad , budapest ( 1986 ) ) hilton , p. j. , wylie , s. : _ homology theory : an introduction to algebraic topology .",
    "_ cambridge university press , new york ( 1960 ) mac lane , s. , birkhoff , g. _ algebra .",
    "_ chelsea publishing co. , new york , third edition ( 1988 ) dumas , j - g . ,",
    "saunders , b.d . ,",
    "villard , g. : on efficient sparse integer matrix smith normal form computations .",
    "_ j. symb .",
    "comp . _ * 32*(12 ) ( 2001 ) 7199 dumas , j - g . ,",
    "heckenbach , f. , saunders , b.d . , welker , v. : computing simplicial homology based on efficient smith normal form algorithms . in _ algebra , geometry and software systems , _",
    "m. joswig , n. takayama ( eds . ) springer ( 2003 ) 177206 batalin , i.a . ,",
    "vilkovisky , g.a . :",
    "gauge algebra and quantization .",
    "lett . _ * 102b * ( 1981 ) 2731 batalin , i.a . ,",
    "vilkovisky , g.a . : closure of the gauge algebra , generalized lie equations and feynman rules .",
    "phys . _ * b234 * ( 1984 ) 106124 shander , v.n . :",
    "analogues of the frobenius and darboux theorems for supermanifolds .",
    "_ comptes rendus de l academie bulgare des sciences , _ * 36 * , no . 3 ( 1983 ) 309311 khudaverdian , h. m. : laplacians in odd symplectic geometry .",
    "in _ quantization , poisson brackets and beyond _ , th . voronov , ( ed . ) , contemp .",
    ", v.15 , amer . math .",
    "soc . , providence , ri ( 2002 ) 199212"
  ],
  "abstract_text": [
    "<S> we describe an essential improvement of our recent algorithm for computing cohomology of lie ( super)algebra based on partition of the whole cochain complex into minimal subcomplexes . </S>",
    "<S> we replace the arithmetic of rational numbers or integers by a much cheaper arithmetic of a modular field and use the inequality between the dimensions of cohomology @xmath0 over any modular field @xmath1 and over @xmath2 : @xmath3 . with this inequality we can , by computing over arbitrary @xmath4 quickly find the ( usually , rare ) subcomplexes for which @xmath5 and then carry out the full computation over @xmath2 within these subcomplexes .    </S>",
    "<S> we also present the results of application of the corresponding _ * c * _ program to the lie superalgebra of special vector fields preserving an `` odd - symplectic '' structure on the @xmath6-dimensional supermanifold . </S>",
    "<S> for this algebra , we found some new basis elements of the cohomology in the trivial module . </S>"
  ]
}