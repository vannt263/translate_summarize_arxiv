{
  "article_text": [
    "the tradition of using diagrammatic representations of formal structure in logical reasoning stretches back to times when sand or papyrus were the media for visualizations .",
    "the tradition of using interactive software tools in logical reasoning is a recent refinement of an ancient interest .",
    "this stretches back to the age of compact disk distributed software alongside paper printed books , with  @xcite as a paradigmatic example , and plenty others , many of which have been presented at this venue  @xcite . using didactic software online for logic education and e - learning is an equally respectable tradition going back to the age when java applets roamed on the web , with  @xcite as a representative example , and plenty others , many of which have been also presented at this venue  @xcite .",
    "latest trends in this evolution are dissemination of logic courseware freely available online , with  @xcite as a pertinent example , alongside didactic software tools built on a technology stack up to date with current web standards , with  @xcite as a relevant illustration .",
    "this is the general trend for many other fields across the curriculum  @xcite .",
    "when compared to what exists in other fields , many reasoning and modeling techniques emerging in current branches of logic remain in many ways still underrepresented , e.g. modal logics , interrogative logics , epistemic logics , etc",
    ". however , consult  @xcite as a short list of notable exceptions containing robust software tools for reasoning and modeling techniques emerging in nonclassical logics that have been recently integrated into this tradition , frequently accompanied by web workers or didactically tailored online demos . inside this general landscape",
    ", the paper will revisit classical challenges for teaching logic and reasoning skills and implement possibly new software tools for interactive reasoning tasks driven by automated visualization of logical structure emerging in logics that are often underrepresented in or overlooked by existing approaches .",
    "* overview * the paper is structured as follows : in the first section we introduce the topic and describe the main architecture of the program and some design options .",
    "section  [ sec : managing - repositories ] describes the use of the repositories of formal knowledge underlying the program .",
    "section  [ sec : interactive - visualizations ] describes the reasoning tasks and interactive visualization tools provided by the software .",
    "sections  [ sec : dydactic - touch ] and  [ sec : classroom ] explore teaching use case scenarios and provide evidence for didactic relevance .",
    "section  [ sec : conclusion ] draws conclusions and hints towards possible directions for further work .    * the overall architecture * the rest of this section contains information about implementation and development aspects .",
    "readers only interested in using the program will probably want to skip to section [ sec : managing - repositories ] where the program s features are described .    _",
    "the backend repositories of formal knowledge _ the program consists of two layers : remote repositories of formal knowledge are stored and managed on the server side and the client side consists of the user interface to interact with and visualize the repositories formal content .",
    "the backend application layer is a rest - like api built using nodejs and express to provide the usual crud operations on repository items .",
    "the storage layer consists of several document structured databases built using mongodb and mongoose to define repository items  @xcite .",
    "the databases contain items from the standard domains in a logic curriculum : propositional logic , modal logic , predicate logic as well as quantified modal logic .",
    "database entries are json documents with each item containing a basic ascii representation of its content , as received from an input device  @xcite , together with a set of additional representation formats ( mathjax - latex , d3-svg , unicode , etc . ) used in visualizations , interactive reasoning tasks and natural language information .",
    "the left and middle panels in figure  [ figure : main+editor ] illustrate intuitively the list representation and the item features for the formulae library database . section  [ sec : managing - repositories ] contains further information about how this data is managed via crud operations on the rest - like api . in total , the databases contain over five hundred items from four logic domains .",
    "moreover , besides the predefined , ready to be used items , and perhaps more importantly , the backend application layer also serves as a tool for students or instructors to add items of their own interest to the database and use the reasoning and visualization tools in an approach to learning or teaching that fits their needs .",
    "the right panel in figure  [ figure : main+editor ] shows the formula editor gui , details on how the gui maps to crud actions are in section  [ sec : managing - repositories ] .",
    "the server contains mainly databases of formulae libraries and models corpora in the four logic domains mentioned and a repository of interactive reasoning tasks ( dialogic / semantic games , etc . ) using both formulae and models .    _ the frontend user interface _ the client side layer of the program uses html5 and css3 for structure respectively presentation and javascript for handling application logic as well as for implementing logic specific functionality .",
    "the framework used to build the frontend application layer is backbone enhanced with marionette modules , together with their standard dependencies jquery and underscore  @xcite . for the graphical user interface we use bootstrap and for rendering formulae in a browser mathjax . for displaying logical structure we use svg and for interacting with reasoning tasks visualizations we use d3  @xcite , particularly tree and force graph layouts .",
    "figure  [ figure : main+editor ] presents the main user interface components and section  [ sec : managing - repositories ] describes standard use scenarios for the gui .",
    "figure  [ figure : syntax+tableau+models ] illustrates some visualizations of logical structure and section  [ sec : interactive - visualizations ] describes how these can be interactively generated , transformed and explored .",
    "the logic specific application component consists of several modules containing functionality handling formal aspects concerning the syntax and semantics of the logics and dealing with their associated reasoning tasks .",
    "these include a term unification package and an expression parser  @xcite , a module for translating syntax into d3 tree layout , a tableau based theorem prover  @xcite with a corresponding module to translate the analytic tableau proof trace into a d3 force graph layout with a hierarchical tree structure , and a ( counter)model generator  @xcite with a corresponding module for translating the ( closed ) tableau branches into ( counter)example relational structures and further into a d3 force graph layout .",
    "further information about implementation details and the technology stack used are included in the electronic version of this paper and in the documentation available on  @xcite .",
    "the program was developed and tested using primarily chromium in an ubuntu desktop environment and will run optimally in webkit - based browsers and using a desktop format factor .",
    "a live demo of the program is openly available online at  @xcite .",
    "a first feature of the program consists in providing an interface for accessing and working with the following logic - specific repositories of formal knowledge :    1 .   _ formulae libraries",
    "_ provide an interface for accessing databases containing syntactic items from various logical languages .",
    "currently , these include : propositional logic , modal logic , predicate logic , quantified modal logic .",
    "models corpora _ provide an interface for accessing databases containing semantic items associated with various logics .",
    "these are , depending on domain : truth assignments , relational structures , first - order models , qml models .",
    "_ games repositories _ provide an interface for accessing databases containing interactive reasoning tasks .",
    "these are not entries for separate entities but merely documents associating , formulae and/or models with logic modules .    to facilitate access to repository items and reasoning tasks , the main interface layout has three component regions containing distinct information panels .",
    "the first panel , in the left in figure  [ figure : main+editor ] , is a collection view , its role is to visualize the repository content in an items list format . these can be either a formulae library or a corpus of models from those enumerated above .",
    "the second panel , shown in the middle of figure  [ figure : main+editor ] , is an item view , its role is to display item features .",
    "these features are specific to each repository type and logic domain and link to various reasoning tasks , additional natural language information or further symbolic representations for a particular repository item selected from the items list panel .",
    "the third panel , in the right of figure  [ figure : main+editor ] , is also an item view .",
    "it will display , depending on the chosen feature , the specific visualization content and/or an interface for interaction .",
    "this can be , fore example , a svg canvas , a editor form , a table , etc .",
    "the specific details of each interactive reasoning task are described in section  [ sec : interactive - visualizations ] .",
    "the subviews are interlinked and in a usual workflow will be navigated from left to right by first choosing an item of interest from a collection then a specific feature and finally working with its interactive visualization content in the working details panel .",
    "the main navigation menu also provides links to instances of the three layout regions .",
    "more detailed descriptions of possible workflows applied to concrete examples are presented in section  [ sec : dydactic - touch ] .    * working with the formula and model editors * the first level of feedback guided interaction with logical structure takes place starting from syntactic aspects and is mediated by the formula and model editors .",
    "the right side panel in figure  [ figure : main+editor ] illustrates the editors user interface .",
    "this includes examples of well formed entities for each logic domain and detailed information about the formation rules .",
    "feedback is provided as the user types and parser errors are displayed whenever an incorrect string is entered .",
    "a modular parsing expression grammar is used for input validation .",
    "this extends naturally from logical fragments to more expressive logics , from object language to the specification metalanguage , and from formulae to model syntaxes .",
    "section  [ sec : code ] contains an illustration of the the grammar modules .",
    "a concrete editor use case example is given below in section  [ sec : dydactic - touch ] .",
    "further details are included in the electronic version of this paper and in the program documentation available on  @xcite .",
    ", width=397,height=190 ]    * working with repository item features * a second level of feedback guided interaction with logical structure is mediated by reasoning tasks visualizations , accessed through specific item features .",
    "the main feature categories are :    1 .",
    "_ reasoning tasks _ is the main category , it contains various entries such as : visualizing syntactic construction trees , building semantic tableaus , generating countermodels and models , etc .",
    "each task is described in detail in section  [ sec : interactive - visualizations ] .",
    "2 .   _ item information _ contains various categories of information about the chosen items in natural language , such as name , description , sources , domain , etc .",
    "3 .   _ symbolic representation formats _ used for reference , linking , translation , etc .    clicking on a formula feature will display its corresponding working details in the right hand side panel of the main layout presented in  figure  [ figure : main+editor ] .",
    "while the first two panels are used for organization and navigation of formal repositories , the working details panel is used to host and manage most of the interactive aspects by coupling interface actions with a feedback loop allowing the user to generate and/or explore the formal structure underlying and propelling various logical reasoning tasks .",
    "the main interactive feature of the program is visualization of logical structure .",
    "this takes place for several kinds of analysis and reasoning tasks specific to each logic domain . in this section",
    "we describe how to use the main reasoning tasks .    ,",
    "width=397,height=135 ]    * syntax construction trees * a first analysis task is the interactive generation of syntactic construction trees .",
    "this uses the syntactic formation rules of each logic domain to generate a tree layout of the formula and all its subformulae , all the way down to its atomic components .",
    "the left side of figure  [ figure : syntax+tableau+models ] illustrates a syntactic tree layout generated in this fashion for a first order logic formula .",
    "the interface distinguishes between nodes containing fully extended components and the nodes containing further analyzable components .",
    "the fully extended tree branches and the nodes containing atomic syntactic elements are marked with a blue color while the not yet fully analyzed nodes are colored in red , the user can further extend these nodes by clicking on their content . in the illustration",
    "the second branch is not yet fully decomposed , this is marked in red and can be interactively extended further by clicking on the terminal subformula .",
    "concrete teaching context are included in sections  [ sec : dydactic - touch ] ,  [ sec : classroom ] .",
    "* semantic tableaus * a second analysis task is the interactive generation of semantic tableau proofs .",
    "this uses the semantic decomposition rules specific to each logic domain to generate a force tree layout by analyzing the head formula in a branch and so on in all resulting tableau branches , all the way down to exhausted branches .",
    "the middle region of figure  [ figure : syntax+tableau+models ] illustrates a semantic tableau generated in this way for an example formula from the modal logic domain .",
    "the interface distinguishes between nodes representing fully expanded branches and the nodes standing for branches that can be further expanded i.e. contain formulae that can be further analyzed .",
    "the layout also distinguishes between closed , i.e. containing contradictory formulae , and open branches , i.e. fully expanded but not containing a formula and its negation .",
    "nodes are labeled by the head position formula in the branch , this is the formula logically analyzed and decomposed in that expansion step . the user can interactively display the full content of a tableau branch by hovering over any node of the tableau .",
    "branches which are not fully expanded yet can be extended by clicking on a terminal node .",
    "this triggers the process of logical decomposition on the head formula in the branch and adds the resulting branch(es ) to the tableau . clicking on an expanded node reverts the tableau expansion step and removes the outgoing branch(es ) . for modal logics in addition to decomposition rules for formulas in the logical object language",
    "the tableau construction process also uses a specification metalanguage and corresponding decomposition rules for hybrid logic with nominals .",
    "these decomposition rules are based on applying metanominals to possible worlds as skolem terms constructed from formulae containing modal operators and using relational properties of accessible successors during tableau expansion .",
    "the theoretical background behind this technique has been described in full detail in  @xcite , and the logical grammar used for parsing hybrid logic formulae in the specification metalanguage is also included for reference in section  [ sec : code ] .",
    "concrete teaching context are included in sections  [ sec : dydactic - touch ] ,  [ sec : classroom ] . * countermodel generator * a third reasoning task consists in generating countermodels for a given formula .",
    "this starts from the proof trace generated by a semantic tableau and from each open branch in the terminal nodes of the tree layout extracts a corresponding model .",
    "hybrid logic formulae with nominals are used for expressing relational components of a model inside the specification metalanguage .",
    "these are then translated in a force graph layout representing a relational structure which is displayed for visualization and can be further interactively inspected .",
    "the right hand side of figure  [ figure : syntax+tableau+models ] presents two graphs generated in this fashion .",
    "the interface distinguishes counterexamples falsifying the formula , which are colored in red , from models satisfying the formula , which are colored in green .",
    "the satisfying models are obtained in a similar way starting from a complementary formula .",
    "each node of the graph is labeled with a relevant extensional component , for modal logic this is the world s propositional valuation .",
    "the user ca obtain further information about the graph by hovering over the nodes .",
    "this will reveal the metanominal corresponding to each possible world .",
    "this nominal is a skolem term generated during tableau construction and contains further data about the stage in the proof trace it was introduced and the formula and other metaterms it was generated from .",
    "concrete teaching contexts are included in sections  [ sec : dydactic - touch ] ,  [ sec : classroom ] .",
    "several additional reasoning tasks are described and/or exemplified in sections  [ sec : dydactic - touch ] and  [ sec : classroom ] , in the extended version of this paper and the documentation available on  @xcite .",
    "these reasoning tasks are either specific to a particular logic domain , such as truth tables for propositional logic , or only relevant for corpora of models , such as model inspection etc .",
    "in this section we will present a series of concrete use case scenarios : in order to illustrate the way in which the program can be useful for didactic purposes .",
    "* use case scenario 1 : exploring formal knowledge repositories * this use case will step through a typical repository navigation .",
    "step  ( 1 ) : from the main navigation menu select formulae libraries @xmath0 modal logic , alternatively , you can click on the modal link from the go to a formula library green div in the items list panel in the left of the main layout .",
    "the left side panel will display the content of the modal logic library .",
    "step  ( 2 ) : search in the list the formula named distribution axiom ( k ) , alternatively , you can hit ctrl+f and type the formula s ascii content ( # ( p > q)>(#p>#q ) ) or its name , as a shortcut to finding the formula faster ( using native browser search ) .",
    "when you click on the formula , the middle panel will display the formula s features .",
    "step  ( 3 ) : inspect the list of available features for the formula listed in the middle panel and find either the name or the domain item .",
    "when you click on the chosen feature the right hand side panel will display additional information about the item of interest . in this case",
    "this will be additional information in natural language about the formula .",
    "item features related with reasoning tasks are explored in the next use case .",
    "* use case scenario 2 : interactively visualizing reasoning tasks * this use case will present step by step a possible scenario of exploring reasoning tasks . repeat steps ( 1 ) to ( 3 ) from the previous use case , but this time use ( # ( p|q)>(#p|#q ) ) to find formula named distribution axiom ( f ) , note the ( f ) at the end which distinguishes it from the previous example .",
    "step  ( 4 ) : click on the syntactic tree feature and explore the construction tree by clicking on the nodes of the tree .",
    "note that the syntactic construction of the formula is the same with the one displayed in the previous example ( both formulae generate the same tree structure ) .",
    "step  ( 5 ) : click on the semantic tableau feature and fully expand all the tableau branches by clicking on the nodes of the tree layout . by hovering over the nodes in the tableau",
    "you can see the entire structure of the branch containing all the extended formulae up to that point .",
    "continue until all the formulae are logically decomposed and every branch of the tableau is exhausted .",
    "note that the semantic tableau constructed in this case is different from the one for the previous formula .",
    "find the green colored open branch that makes the difference and inspect its content , try to imagine a counterexample starting from it .",
    "step  ( 6 ) : click on the model generator feature and scroll the panel of models generated in the working details panel until you find one that is colored in red .",
    "the nodes in the graph represent possible worlds and are labeled by their propositional valuation . hovering over possible worlds in the models",
    "will reveal their construction nominal , compare it with the open branch found in step  ( 5 ) .",
    "* use case scenario 3 : update formal knowledge repositories * in the  previous use case scenario you have found a counterexample to a formula labeled as an axiom , now you are going to fix this .",
    "if needed , go through steps  ( 1 - 6 ) in the previous use case to obtain the open tableau and the countermodel illustrated in figure  [ figure : syntax+tableau+models ] ( middle , respectively , right ) .",
    "step  ( 7 ) : click on the copy to sandbox library feature .",
    "the sandbox library repository will be displayed in the items list panel .",
    "find the formula and click the edit formula information feature .",
    "the rightmost panel will display a form with editable entries .",
    "step  ( 8) : change formula s name from distribution axiom ( f ) to distribution formula ( fails for disjunction ) .",
    "optionally , add a description and sources , then click the submit changes button .",
    "step  ( 9 ) : find the modified formula in the sandbox library , click the edit ascii content feature .",
    "the formula editor will open with the formula s ascii content available for editing .",
    "step  ( 10 ) : change all disjunctions in the formula to conjunctions , as indicated in the available instructions panels this is done by replacing all occurrences of  |  with  & .",
    "feedback will be provided as you type , when the new formula is parsed correctly , click on the submit formula button .",
    "eventually , repeat step  ( 8) : renaming the formula distribution over conjunction and adding the description `` this fails for disjunction '' .",
    "* use case scenario 4 : semantic tableaus expansion heuristics * step  ( 1 ) : use the semantic tableau feature to find a counterexample model falsifying the modal formula @xmath1 , theorem ( s5 ) 3 in the modal library , using no more than seven expansion steps .",
    "step  ( 2 ) : can you do this with less than seven clicks ?",
    "if yes , how many ? if no , what syntactic property of the formula can be used to prove this for the general case .",
    "several other use cases are possible including features such as : interactive visualization and inspection of models , linking formulae with structures through model checking tasks , playing dialogic or semantic games , etc .",
    "more use cases are described and explored in the electronic version of this paper and in the program documentation available on  @xcite .",
    "in this section we describe several possible scenarios of using the program in a classroom setting and the didactic experience that has been accumulated .",
    "the program can be used both during live classroom activities and also remotely by students .",
    "the live teaching classroom settings can integrate the tool alongside traditional teaching methods also during theory exposition but mostly for solving exercises .",
    "the following list describes typical exercise templates ( concrete examples can be randomly selected from repositories ) :    exercise model one : :    given : a list of several formulae in symbolic notation ( mathjax - latex )    and a matching list of formulae represented as syntax construction    trees ( d3-svg ) . required : establish the correct correspondence between    the items in the two given lists .",
    "exercise model two : :    given : a list of structures in extensional notation ( mathjax - latex )    and a matching list of models represented as labeled graphs ( d3-svg    force layout ) . required : establish the correct correspondence between    the items in the two given lists .",
    "exercise model three : :    given : syntax construction trees of several formulae with matching    structure graphs ( pointed in the case of modal logics , i.e. with    designated actual worlds ) .",
    "required : decide for each pair if the    ( pointed ) model satisfies or not the given formula .",
    "exercise model four : :    given : a list of formulae in symbolic notation ( mathjax ) and a    matching list of ( pointed ) models in extensional representation ( not    as d3-svg graphs ) . required : for each formula in the list select the    ( points)/structures that satisfy / falsify it .",
    "exercise model five : :    given : a list of ( pointed ) models represented in graphical format    ( d3 ) . required : for each structure in the list upload into the    formulae library m formulae that are true / false in the model ( at the    actual world ) and having ( modal ) depth at least n. exercise model six : :    given : a list of ( pointed ) models represented in extensional format .",
    "required : for each structure in the list upload into the formulae    library n formulae that are false / true in the model ( at the actual    world ) and having ( modal ) depth at least m. exercise model seven : :    given : a list of formulae represented as syntactic trees ( d3-svg ) .    required : for each formula either upload into the corresponding model    corpus a counterexample structure with at least n possible    worlds(/objects ) or claim validity otherwise .",
    "exercise model eight : :    given : a list of formulae represented symbolically ( mathjax - latex ) .    required : for each formula either find and write down in extensional    form a counterexample structure with at least m possible    worlds(/objects ) or claim validity otherwise .",
    "the previous exercise models can be used in classroom activities , progress evaluations and final exams . to asses the didactic relevance of the program a nonequivalent groups design can be used to measure the average grades in student groups that used the program or not .",
    "another measure can be the response time for accurate answers .",
    "early adopters have ( only recently ) started to use the program in teaching activities and relevant data can be obtained by logging user interaction based on the previous list of exercise templates . as the design of the exercises suggests , the main testing parameter is the usefulness of interactively visualizing logical structure in reasoning tasks .",
    "preliminary results @xcite have been used so far only for internal feedback loop .",
    "these show that the test group significantly outperforms the control group for exercise model one , which is as expected . for exercise model three the grades average is also better in the test group , which is also not surprising .",
    "the really interesting result is that the test group outperforms the control group also for exercise model four ( no visualizations ) .",
    "moreover , when comparing averages for exercise model three with those for exercise models four , inside the same group , the former significantly outperform the later .",
    "this is even more relevant as this outcome holds not only for the test group , but also for the control group .",
    "all these suggest that interactive visualizations of logical structure in reasoning tasks can be didactically relevant . at the moment ,",
    "not enough data is available for the remaining exercise models in order to warrant conclusion validity as a rigorous statistical experiment ( more results will become available online as more data is collected ) .",
    "a final didactic experience that deserves to be mentioned is that the tool facilitates types of exercise that might be impractical ( if not impossible ) to stage using traditional teaching media ( like pen and paper or even chalk and a wide blackboard ) .",
    "consider an example :    example 1 : :    given : rule of consensus , exception1 from the propositional logic    formulae library . required :",
    "find a counterexample structure using the    semantic tableau method .",
    "the paper presented a software tool for analysis and interactive engagement in various logical reasoning tasks .",
    "the main feature of the program is to provide the means to intuitively visualize and interactively generate the logical structure that propels customary logical reasoning tasks .",
    "a second feature consists in providing an interface for working with logic - specific repositories of formal knowledge .",
    "starting from this we showed how both aspects have didactic potential and can be integrated in teaching activities to provide an engaging learning experience .",
    "overall , this creates an ecosystem of interactive software tools modeling reasoning tasks driven by automated visualization of logical structure emerging in logics that are often underrepresented in or overlooked by existing approaches .",
    "we also illustrated how this approach can be useful for didactic purposes .",
    "besides presenting a possibly new logical reasoning software suite , the paper also revisited classical challenges for teaching logic and reasoning skills using a completely open source software stack for development , testing , deployment and hosting .",
    "the resulting program is openly available online @xcite , it is implemented completely platform independent and can be run in any modern browser .",
    "topics of further work include adding relational theories to the modal metatheory and customizing the modal tableau prover .",
    "extending the modeled reasoning tasks to currently uncovered logic domains . adding additional layers of interactivity to the interface and a customizable strategy for tableau expansion . adding dynamic logic elements , etc .",
    ".... propsym \" proposition \" = chars:([p - s0 - 9_\\-]+ ) { return chars.join ( \" \" ) } nominal \" nominal \" = chars:([i - k0 - 9_\\-]+ ) { return chars.join ( \" \" ) } metanominal \" metanominal \" = chars:([lt - w0 - 9_\\-]+ ) { return chars.join ( \" \" ) } predicate \" predicate \" = chars:([p - sa - emn0 - 9_\\-]+ ) { return chars.join ( \" \" ) } function \" function \" = chars:([f - h0 - 9_\\-]+ ) { return chars.join ( \" \" ) } variable \" variable \" = chars:([x - zx - z0 - 9_\\-]+ ) { return chars.join ( \" \" ) } constant \" constant \" = chars:([a - emn0 - 9_\\-]+ ) { return chars.join ( \" \" ) }   ....    .... start = metaformula / formula formula \" formula \" = atomic / unary / binary / quanty / metaterm2form metaformula \" metaformula \" = formula \" @ \" metaterm    quanty \" quantified \" = \" ( \" quantifier variable formula \") \" quantifier \" quantifier \" = \" $ \" / \" ! \"   binary \" binary \" = \" ( \" formula \" & \" formula \") \" / \" ( \" formula \" | \" formula \") \"                      / \" ( \" formula \" > \" formula",
    "\") \" / \" ( \" formula \" ^ \" formula \") \" unary \" unary \" = \" ~ \" formula / \" # \" formula / \" * \" formula    atomic \" atomic \" = nominal / propsym / equality / predicate \" ( \" term \") \"                   / predicate \" ( \" term \" , \" term \") \" equality \" equality \" = \" ( \" term \" = \" term \") \" term \" term \" = constant / variable / function \" ( \" term \") \"               / function \" ( \" term \" , \" term \") \" metaterm \" metaterm \" = metanominal / metafunction \" ( \" metaterm \" , \" formula \") \" metaterm2form \" metaterm2form \" = \" { \" metaterm // reductionaxiom = \" < \" atomic metafunction \" metafunction \" = \" f * \" / \" f~ # \"            ....    .... start = model model \" model \" = left : world \" ; \" right : model / world world \" world \" = metanominal \" : \" extensionnotationslist extensionnotationslist \" extensionnotationslist \"    = left : extensionnotation right : extensionnotationslist / extensionnotation / \" \" extensionnotation \" extensionnotation \" = valsymb valuation / relsymb relations    / domainsymb domain / monadicsymb monadicext / diadicsymb diadicext extsymb \" extsymb \" =   valsymb / domainsymb / monadicsymb / diadicsymb valsymb \" valsymb \" = \" vl \" valuation \" valuation \" = left : literal \" , \" right : valuation / literal / \" \" relsymb \" relsymb \" = \" rl \" relations \" relations \" = left : metanominal \" , \" right : relations / metanominal / \" \" literal \" literal \" = atomic / \" ~ \" atomic : atomic { return \" ~ \" + atomic ; } atomic \" atomic \" = nominal / propsym / equality / predicate \" ( \" groundterm \") \"     / predicate \" ( \" groundterm \" , \" groundterm \") \" domainsymb \" domainsymb \" = \" do \" domain \" domain \" = left : groundterm \" , \" right : domain / groundterm / \" \" monadicsymb \" monadicsymb \" = \" mp \" monadicext \" monadicext \" = predicate \" { \" objectslist \" } \" monadicextslist \" monadicextslist \" = left : monadicext \" , \" right : monadicextslist / monadicext / \" \" objectslist \" objectslist \" = left : groundterm \" , \" right : objectslist / groundterm / \" \"                                    diadicsymb \" diadicsymb \" = \" dp \" diadicext \" diadicext \" = predicate \" { \" pairslist \" } \" diadicextslist \" diadicextslist \" = left : diadicext \" , \" right : diadicextslist / diadicext / \" \" pairslist \" pairslist \" = left : tuple2 \" , \" right : pairslist / tuple2 / \" \" tuple2 \" tuple2 \" = \" ( \" groundterm \" , \" groundterm \") \"   groundterm \" groundterm \" = constant / function \" ( \" groundterm \") \"                          / function \" ( \" groundterm \" , \" groundterm \") \" ....    50 barwise , jon and etchemendy , john and allwein , gerard and barker - plummer , dave and liu , albert : language , proof and logic , csli publications , stanford , usa , 2000 .",
    "sieg , wilfried : the apros project : strategic thinking and computational logic , logic journal of igpl , vol . 5 , no .",
    "4 , pages : 359 - 368 , 2007 .",
    "van ditmarsch , hans and manzano , mara : proceedings of sicttl06 , tools for teaching logic , salamanca , spain , logic journal of igpl , vol . 5 , no . 4 , 2007 .",
    "blackburn , patrick and van ditmarsch , hans and soler - toscano , fernando and manzano , mara : proceedings of ticttl11 , tools for teaching logic , springer - verlag , 2011 van benthem , johan and van ditmarsch , hans and van eijck , jan and jaspars , jan : logic in action , open logic courseware project , 2009 - 2014 .",
    "minic , tefan and khodadadi , mohammad and schmidt , renate a. and tishkovsky , dmitry : synthesizing and implementing tableau calculi for interrogative epistemic logics , in fontaine , p. , schmidt , r.a . , schulz , s.  ( eds . ) , paar , the third workshop on practical aspects of automated reasoning , pp .  109 - 123 , manchester , united kingdom , 2012 .",
    "minic , tefan : dynamic - epistemic logic of questions in inquiry , ph.d .",
    "thesis , institute of logic , language and computation , university of amsterdam , the netherlands , 2011 .",
    "jquery , available online from : http://jquery.com/ , underscore , available online from : http://underscorejs.org/ , backbone , available online from : http://backbonejs.org/ , marionette , available online from : http://marionettejs.com/. mathjax , from : http://www.mathjax.org/ , bootstrap , at : http://getbootstrap.com/ , scalable vector graphics , available online from : http://www.w3.org/graphics/svg/ , data driven documents , available online from : http://d3js.org/ nodejs , available online from : http://nodejs.org/ , expressjs , available online from : http://expressjs.com/ , mongodb , available online from : http://www.mongodb.org/ , benm , available online from : https://github.com/jkat98/benm .",
    "json : javascript object notation : http://www.json.org/ , ascii : american standard code for information interchange : http://www.ascii-code.com/ , crud : persistent storage functions : http://en.wikipedia.org/wiki/create,_read,_update_and_delete .",
    "peg.js , parser generator for javascript , available online from : http://pegjs.org/ , unify.js , package available online from npm : https://www.npmjs.com/package/unify khan academy , available online from : https://www.khanacademy.org/a/0z1s modal logic playground , available online at : http://rkirsling.github.io/modallogic/ mettel2 , metric tesselation logic , a generic tableau prover , demo available online from : http://www.mettel-prover.org./demo.php demo , a demo of epistemic modelling , code and examples available online from : http://homepages.cwi.nl/~jve/demo/ lotrec , logical tableaux research engine companion , demo available online from : http://www.irit.fr/activites/lilac/lotrec/webstart twb , the tableau workbench , a generic tableau framework for building tableau / sequent - based theorem provers for non - classical propositional logics , demo available online from : http://twb.rsise.anu.edu.au/demolist intohylo : inference tools for hybrid logics , source code and demos available online from : http://www.glyc.dc.uba.ar/intohylo/index.php mleantap : a modal theorem prover , at : http://www.leancop.de/mleantap/ , a software tool for interactively visualizing logical structure in reasoning tasks , available online from : http://raeson.mybluemix.net"
  ],
  "abstract_text": [
    "<S> the paper presents a software tool for analysis and interactive engagement in various logical reasoning tasks . a first feature of the program consists in providing an interface for working with logic - specific repositories of formal knowledge . </S>",
    "<S> a second feature provides the means to intuitively visualize and interactively generate the underlying logical structure that propels customary logical reasoning tasks . </S>",
    "<S> starting from this we argue that both aspects have didactic potential and can be integrated in teaching activities to provide an engaging learning experience . </S>"
  ]
}