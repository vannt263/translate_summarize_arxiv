{
  "article_text": [
    "a computable function over strings of a finite alphabet is a function that can be computed by a turing machine .",
    "a turing machine takes a string as input , performs a sequence of elementary changes on the string and if it halts , it provides another string as output of the function . in recursion theory",
    "all turing computable function can be obtained via some _ initial functions _ : zero , successor , and projections through applying some _ basic operations _ such as composition , primitive recursion and least search . in this paper ,",
    "our goal is to develop a similar methodology for a class of epistemic functions .",
    "following the same terminology , an epistemic function is a function that takes the epistemic state of a multi - agent system as input and yields a new epistemic state as output .",
    "the notion of epistemic function is the focus of dynamic epistemic logic , baltag et al .",
    "@xcite , and is formalized in action models .",
    "these functions act on kripke models via an update operator and produce an update kripke model . in this paper , we concentrate on those epistemic functions which can be coded as @xmath1 action models .",
    "@xmath1 models are those models which accessibly relations transitive and euclidian .",
    "we claim that there are possible information changes which are not possible to encode them by @xmath2 or @xmath3 action models .",
    "consequently @xmath1 action models are more powerful to describe epistemic functions than @xmath2 and @xmath3 action models .",
    "it is why we consider @xmath1 action models instead of @xmath3 or @xmath2 models .",
    "so far no one has looked at it from a computational aspect to answer the following question    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ what are the _ initial functions _ and the _ basic operations _ by which all @xmath1 epistemic functions can be obtained ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the basic source of information change in a multi - agent system is _ learning _ an announcement by some agents _ together _ , _ privately _ , _ concurrently _ or even _",
    "wrongly_. so the _ basic operators _ should be different kinds of learning .",
    "van ditmarsch et al . introduced a learning constructor in  @xcite .",
    "we define our own learning operator which is different from van ditmarsch s .    as our _ initial functions _ , we take the _ test _ of any facts @xmath4 , that is @xmath5 .",
    "for the _ basic operations _ , we take the following different kinds of learning : 1- _ alternative learning _ , 2- _ concurrent learning _ , 3- _ wrong learning _ , and finally , 4- _ recursive learning_. following the footsteps of recursion theory , we prove that all epistemic functions can be obtained through the test of facts by applying the above four _ basic operations_.    epistemic logic , started with hintikka s groundwork  @xcite , models and reasons about the knowledge of agents in a group  @xcite . in epistemic logic ,",
    "the notions of knowledge and belief are modeled in terms of the possible worlds ( states ) .",
    "an agent knows or believes a fact if it is true in all the worlds that the agent considers possible as alternatives for the actual world .",
    "as information is transmitted , knowledge and belief of agents in a multi - agent system may change .",
    "the simplest cause for an information change is to announce some truth in public .",
    "plaza in 1989  @xcite , introduced a logic to formalize these changes and called it the public announcement logic . in public announcement logic , a fact is publicly announced in a multi - agent system and all agents together update their knowledge and belief .",
    "however , more complex actions than such as private or dishonest announcements may occur , this is whereby different agents may have different views on some action  @xcite , or the announcement may not be truthful .",
    "our work may be considered as a bridge between two paradigms in dynamic epistemic logic , namely baltag et al . style action model and van ditmarsch et al .",
    "epistemic actions .",
    "the paper is organized as follows . in section  [ bak ] , we recall the definition of action models from  @xcite , and we explain what it means that a group of agents learns an action model .",
    "we discuss @xmath1 kripke models which only have transitive and euclidian properties .",
    "we also introduce a new notion called the",
    "_ applicable formulas _ , and restrict the definition of satisfaction relation only to applicable formulas .    in section  [ sdel ]",
    ", we introduce the initial functions and basic operations as the building blocks of the finite epistemic functions .    in section  [ lbr ] , we add the new operator of recursion in constructing the finite epistemic functions .",
    "finally , in section  [ crfw ] , we compare our work with other related works , and further works may be done .",
    "in this section , we introduce two significant notion : 1- learning an action model , 2- @xmath1 kripke models and applicable formulas .      we start by recalling the definition of an action model from baltag  @xcite .",
    "a pointed action model @xmath6 is a tuple @xmath7 , where @xmath8 is a set of events , @xmath9 is a set of agents , @xmath10 is an accessibility relation for agent @xmath11 on events in @xmath8 , and @xmath12 is a function that assigns to each event , a formula of an appropriate epistemic language , as a precondition for that event .",
    "@xmath13 is called the _ actual event .",
    "_    announcements of facts in multi - agent systems give rises to information changes , where different agents have different access to the resource of the announcement , and also different views about the access of other agents to the resource .",
    "for instance , consider the pointed action model @xmath14 in figure  1 , where @xmath15 , @xmath16 , @xmath17 , @xmath18 .",
    "figure  1    here @xmath14 encodes the following information change    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  @xmath4 is announced whereas agent @xmath11 ( wrongly ) learns @xmath19 . \" _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    one may assume that @xmath20 and @xmath21 , are two different colors",
    ". then the action model @xmath14 says that a green ball is shown to @xmath11 , whereas agent @xmath11 thinks that she sees a blue ball .",
    "consider the pointed model @xmath22 in figure  2 , where @xmath15 , @xmath23 , @xmath16 , @xmath17 , @xmath24 and @xmath25 .",
    "figure  2    this action model encodes the following information change :  a green ball is shown to agents @xmath11 and @xmath26 , agent @xmath26 sees a green ball and is aware that agent @xmath11 has a color - blindness and sees a blue ball .",
    "agent @xmath11 just sees a blue ball and has no _ idea _ about what @xmath26 sees \" .    _",
    "the word  _ having no idea _ \" used above is vague , and needs to be clarified . in the action model @xmath27 ,",
    "agent @xmath26 is not present in the state @xmath28 .",
    "so agent @xmath11 has no idea about the information of agent @xmath26 .",
    "there could be lots of possibilities about the color - blindness of @xmath26 at state @xmath28 , but the action model says nothing about it .",
    "we will later introduce the notion of _ applicable formulas _",
    "( see definition  [ applic ] ) to formally model this case .",
    "_    for another example , consider the pointed model @xmath29 in figure  3 , where @xmath15 , @xmath23 , @xmath30 @xmath16 , @xmath17 , @xmath24 and @xmath25 .",
    "figure  3    the action model @xmath29 encodes the information change that  a green ball is shown to agents @xmath11 and @xmath26 , agent @xmath26 sees a green ball and is aware that agent @xmath11 has a color - blindness and sees a blue ball .",
    "agent @xmath11 sees a blue ball and wrongly thinks that agent @xmath26 has a color - blindness and sees a green ball .",
    "moreover , both agents are aware about each other s thoughts \" .    according to the above discussion , a pointed action model @xmath31 , where @xmath7 , encodes the information change that    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ the fact @xmath32 is announced whereas each agent ( relevant to its accessibility relation in the action model ) acquires information of what may have been announced and what other agents may have heard .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _      we should also clarify what it means that a group of agents learns an _",
    "action model_. suppose @xmath31 is a pointed action model , and @xmath33 is a group of agents .",
    "the case that    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  group @xmath33 learns @xmath31 \" , _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    is a new action model which encodes the following information change    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  the fact @xmath32 is announced and group @xmath33 learns the fact @xmath32 and the information that other agents ( excluding @xmath33 ) acquires due to learning @xmath31 \" .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    for example",
    ", recall the pointed action model @xmath14 in figure  1 , where it encodes the following information change    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  @xmath4 is announced whereas agent @xmath11 ( wrongly ) learns @xmath19 \" .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    an agent @xmath26 learns @xmath14 meansxmath4 is announced and agent @xmath26 learns that @xmath4 is announced and the fact that agent @xmath11 ( wrongly ) learns @xmath19 .",
    "agent @xmath11 still wrongly learns @xmath19 and has no idea about what @xmath26 learns \" . _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the case that agent @xmath26 learns @xmath14 , denoted by @xmath34 , is encoded by the pointed action model @xmath22 in figure  2 .    four different kinds of learning , in a multi - agent system , may be distinguished :    * alternative learning : a group of agents , @xmath33 , together learns that among a set of actions @xmath35 , one of them is the actual action . +",
    "_ let @xmath36 be the pointed action model @xmath37 in figure  1 , and @xmath38 be another action model , in which @xmath39 .",
    "then the pointed action model of @xmath40 is _ + figure  4 + see definition  [ defsem ] for details . *",
    "concurrent learning : two disjoint groups of agents @xmath41 and @xmath42 learn concurrently but not together ; group @xmath41 learns @xmath43 and group @xmath42 learns @xmath44 concurrently but not together . + _ let @xmath36 be the pointed action model @xmath37 in figure  1 , and @xmath38 be another pointed action model , in which @xmath45 .",
    "then the pointed action model of @xmath46 would be _ + figure  5 + see definition  [ defsem ] for details . *",
    "wrong learning : whereas a fact @xmath19 is announced , a group of agents , @xmath33 , wrongly learns something else . + _",
    "@xmath4 is announced and agent @xmath11 learns @xmath19 .",
    "see the pointed action model @xmath43 in figure  1 .",
    "_ * recursive learning : a group of agents , @xmath41 , learns what another group of agents , @xmath42 , learns , and group @xmath42 learns what group @xmath41 learns .",
    "+ [ rexm ] + _ consider the pointed action model @xmath29 in figure  3 . _ + figure  3 + the action model @xmath29 means + @xmath4 is announced and agent @xmath26 learns + _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ -- @xmath47 @xmath4 and the case that agent @xmath11 ( wrongly ) learns    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath48 and about what @xmath26 ( wrongly ) learns@xmath49 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    @xmath49 .    -- _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _      in this section we briefly go through the syntax and semantics of epistemic logic .",
    "the syntax of epistemic logic is as usual , but the semantics is a little bit different from the standard one .",
    "let @xmath50 be a non - empty set of propositional variables , and @xmath9 be a set of agents .",
    "the language @xmath51 is the smallest superset of @xmath50 such that    if @xmath52 then @xmath53 ,    for @xmath54 .    for @xmath54",
    ", @xmath55 has to be read as  agent @xmath56 believes ( knows ) @xmath4 \" . for a group of agents @xmath57 ,",
    "@xmath58 means that @xmath55 , for all @xmath59 .",
    "epistemic logic models the notions of knowledge and belief in terms of the notion of possible worlds in kripke semantics .",
    "[ applic ] a kripke model @xmath60 is a tuple @xmath61 , where @xmath8 is a non - empty set of worlds _",
    "( states ) _",
    "@xmath62 , @xmath63 is a function from @xmath50 to @xmath64 , and each @xmath65 is a binary accessibility relation between worlds .",
    "we define the group _ present _ at the state @xmath66 as follows :    @xmath67 .    for an epistemic state @xmath66 , the set of _ applicable _ formulas at the state @xmath66 , denoted by @xmath68 , is the smallest subset satisfying the following conditions    * @xmath69 , * if @xmath70 then @xmath71 and @xmath72 , * @xmath73 if and only if @xmath74 and for all @xmath28 such that @xmath75 , @xmath76 .    intuitively , the _ applicable _ formulas of an epistemic state , are those formulas that can sensibly be assigned a truth value . for example , consider the kripke model in figure  6 .",
    "figure  6    as agent @xmath26 is not present in the world @xmath28 , formulas like @xmath77 are not applicable in the world @xmath28 ( it is not possible to talk about the truth of @xmath78 in world @xmath28 , where agent @xmath26 is not present in this world ) .",
    "also the formula @xmath79 is not applicable at the world @xmath80 . in the next definition ,",
    "we restrict the definition of truth to applicable formulas .    in order to determine whether an applicable formula @xmath81 is true in the epistemic state @xmath66 , denoted by @xmath82 , we look at the structure of @xmath4 : @xmath83    note that the satisfaction relation is just defined for _ applicable _ formulas .",
    "the standard epistemic logic @xmath3 consists of axioms @xmath84 and the derivation rules @xmath85 and @xmath86 given below @xmath87 @xmath88 if instead of @xmath89 , we assume the weaker axiom @xmath90 ( given below ) , the logic of belief @xmath2 will be specified.@xmath91    [ kddef ] let @xmath92 be a kripke model . for each @xmath93 , we say that the relation @xmath10 is    * _ reflexive _ if and only if for all @xmath62 , @xmath94 ; * _ serial _ if and only if for all @xmath62 , there exists @xmath95 such that @xmath96 ; * _ transitive _ if and only if for all @xmath97 , if @xmath96 and @xmath98 then @xmath99 ; * _ euclidean _ if and only if for all three states @xmath97 if @xmath96 and @xmath99 then @xmath98 .",
    "we say a relation @xmath10 is    * @xmath3 whenever it is reflexive , transitive and euclidean , * @xmath2 whenever",
    "it is _ serial _ , transitive and euclidean , and * @xmath1 whenever it is transitive and euclidean .",
    "a kripke model @xmath60 is called an @xmath3 model if and only if for each agent @xmath11 , @xmath10 is @xmath3 .",
    "it is obvious that every @xmath3 model is a model of the _ standard _ epistemic logic .",
    "a kripke model @xmath60 is called an @xmath2 model if and only if for each agent @xmath11 , @xmath10 is @xmath2 .",
    "we also say a kripke model @xmath60 to be a @xmath1 model if and only if for each agent @xmath11 , @xmath10 is @xmath1 .    an action model @xmath100 is called a @xmath1 model if and only if for each agent @xmath11 , @xmath10 is @xmath1 , and it is an @xmath3 model if and only if for each agent @xmath11 , @xmath10 is @xmath3 .",
    "for example , the action model in figure  2 is @xmath1 .",
    "let @xmath50 be a set of atomic formulas , @xmath9 be a set of agents , and @xmath101 be a set of epistemic formulas over atomic formulas @xmath50 and agents in @xmath9 .",
    "* we use @xmath102 ( or simply @xmath103 ) to refer to the set of all pointed _ epistemic action _ models @xmath104 such that @xmath105 is a _ finite _",
    "@xmath1 model , and the image of @xmath12 is @xmath101 .",
    "* we use @xmath106 ( or simply @xmath107 ) to refer to the set of all _ epistemic states _",
    "@xmath66 such that @xmath60 is @xmath1 .",
    "we recall definition of bisimulation of actions from  @xcite .",
    "consider two action models @xmath108 and @xmath109 .",
    "the pointed action model @xmath110 is bisimilar to @xmath111 , denoted by @xmath112 , whenever there is a relation @xmath113 satisfying the following conditions , for each agent @xmath93 :    * initial . @xmath114 . * forth .",
    "if @xmath115 and @xmath116 , then there is a @xmath117 such that @xmath118 and @xmath119 . * back .",
    "if @xmath115 and @xmath119 , then there is a @xmath120 such that @xmath118 and @xmath116 .",
    "if @xmath115 , then @xmath121 is equivalent to @xmath122 in @xmath2 belief logic .",
    "we define another notion of equivalence on action models and call it _ agent - bisimulation .",
    "_    let @xmath93 be an arbitrary agent .",
    "two pointed action models @xmath110 and @xmath111 are @xmath11-bisimilar whenever    * forth .",
    "if @xmath123 , then there is a @xmath124 such that @xmath125 and @xmath126 . * back .",
    "if @xmath125 , then there is a @xmath95 such that @xmath123 and @xmath126 .",
    "the execution of a pointed action model @xmath127 on an epistemic state @xmath128 is a new epistemic state @xmath129 , where @xmath130 and    * @xmath131 , * @xmath132 iff @xmath133 and @xmath134 , * @xmath135 iff @xmath136 .",
    "suppose @xmath137 and @xmath138 .",
    "then @xmath139 , i.e. , it is a @xmath1 model .",
    "it is straightforward .",
    "@xmath1 kripke models are more general than @xmath2 models , as they necessarily do not have the serial property .",
    "the reason that we consider serial property for @xmath2 model is that , we want the agent s belief to be consistent . for @xmath1 kripke models",
    ", we consider the definition of satisfaction relation just for _ applicable _ formulas . in this way ,",
    "the agent s beliefs are consistent at each state .",
    "moreover ,    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ regarding _ applicable _ formulas , the class of @xmath1 models is a ( sound and complete ) semantics for logic of belief @xmath2 . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    assume that a formula @xmath4 is derivable from the logic of belief , i.e. , @xmath140 .",
    "then for every @xmath1 pointed model @xmath66 , if @xmath4 is applicable at this state , then @xmath82 . also , note that every @xmath2 model is also a @xmath1 model .",
    "so for any formula @xmath4 , if for all @xmath1 pointed model @xmath66 which @xmath4 is applicable at the state , we have @xmath82 then @xmath140 .",
    "since @xmath1 models are more general than @xmath2 models , we can encode more epistemic functions in @xmath1 models , as we do not have to determine the cases where an agent does not have any idea about the belief of another agent .",
    "for example , consider the following information changea green ball is shown to agents @xmath11 and @xmath26 , agent @xmath26 sees a green ball and is aware that agent @xmath11 has a color - blindness and sees a blue ball .",
    "agent @xmath11 just sees a blue ball and has no idea about what @xmath26 sees .",
in the above information change , agent @xmath11 has no idea about what @xmath26 sees .",
    "agent @xmath11 says i do not have any idea , there could be lots of possibilities and i do not know even how many possibilities exist , may be an infinite number of them .",
    "it would be possible that agent @xmath26 sees a cube instead of a ball , or even an elephant , and etc .",
    "it would be possible that agent @xmath26 sees the ball in a color which is unknown for me .    in @xmath2 models ,",
    "we are forced to encode all possibilities , but if it happens that some possibilities are unknown , then we do nt know what to do .",
    "however such information change can be encoded by the @xmath1 action model in figure  2 .",
    "therefore , considering applicable formulas , the class of @xmath1 models is still a semantics for logic of belief ( similar to the class of @xmath2 models ) and moreover , they are enough general than @xmath2 models for describing information changes formally .",
    "as mentioned in the introduction , our goal is to introduce some initial functions and basic operators as the building blocks of all finite epistemic functions ( @xmath103 ) . in this section ,",
    "we introduce the first class of epistemic learning programs , called _ basic learning programs_. the reason these are called _ basic _ is that they do not include any recursion in their structure .",
    "let @xmath101 be a set of epistemic formulas over a set of atomic formulas @xmath50 and a set of agents @xmath9 .",
    "the set of _ basic learning programs _",
    "@xmath141 is defined as follows :    * ` test ` . for all @xmath142",
    ", @xmath5 is a basic learning program , and we define @xmath143 , and @xmath144 , * ` alternative learning ` . for all @xmath145 , and @xmath57 , if @xmath146 are basic learning programs , then @xmath147 is a basic learning program , and we define @xmath148 and @xmath149 , * ` concurrent learning ` .",
    "if @xmath150 are basic learning programs such that @xmath151 and @xmath152 , then @xmath153 is a basic learning program .",
    "we define @xmath154 , and @xmath155 , * ` wrong learning ` .",
    "if @xmath156 is a basic learning program and @xmath19 is an epistemic formula , then @xmath157 is a basic learning program whenever @xmath158 .",
    "we define @xmath159 and @xmath160 .    to each basic learning program , we associate a pointed action model as follows .",
    "[ defsem]*_semantics of blp_*.    * for all @xmath142 , the pointed action model of the program @xmath5 , is @xmath161 , where + @xmath162 , + in which for all @xmath93 , @xmath163 and @xmath164 .",
    "* suppose @xmath165 are basic learning programs and their associated action models are @xmath166 , where @xmath167 , for @xmath168 , and @xmath169 . then the associated action model to the basic learning program @xmath147 is @xmath31 , where @xmath170 and * * @xmath171 , * * for all @xmath172 , for all @xmath173 , if @xmath174 is @xmath26-bisimilar to @xmath175 then @xmath176 , * * for all @xmath177 , for all @xmath178 , for all @xmath179 , if @xmath180 then @xmath181 , * * for all @xmath93 , for all @xmath182 , for all @xmath183 , if @xmath184 then @xmath185 , * * @xmath186 , * * @xmath187 for all @xmath188 . + the associated action model of @xmath147 means : @xmath189 is announced whereas agents in @xmath33 learn that either @xmath156 or @xmath190 or ... or @xmath191 has been executed , and what other agents learn in each alternative case .",
    "* suppose @xmath150 are basic learning programs and their associated action models are @xmath43 and @xmath44 respectively , where @xmath192 for @xmath193 or @xmath194 , @xmath195 and @xmath196",
    ". then the pointed action model of the basic learning program @xmath153 is @xmath31 with @xmath197 , where * * @xmath198 , for some @xmath199 , * * for all @xmath200 , for all @xmath201 , if @xmath184 then @xmath185 , * * for all @xmath202 , for all @xmath203 , if @xmath180 then @xmath123 , * * @xmath204 .",
    "+ the associated action model of @xmath153 means : @xmath189 is announced whereas agents in @xmath205 learn according to execution of @xmath156 , agents in @xmath206 learn according to execution of @xmath190 .",
    "* suppose @xmath207 is a basic learning program and its associated action model is @xmath43 , where @xmath208 .",
    "then the associated action model of @xmath209 is @xmath31 with @xmath197 , where * * @xmath210 , for some @xmath211 , * * for all @xmath93 , if @xmath212 then @xmath185 , * * for all @xmath172 , if @xmath213 then @xmath214 , * * @xmath215 .",
    "+ the associated action model of @xmath157 means : @xmath19 is announced whereas agents in group @xmath33 wrongly learn according to execution of @xmath156 .    the action model of a program @xmath207 is denoted by @xmath216 .",
    "an _ epistemic action _",
    "@xmath217 is called _ basic learning action _ whenever there is a basic learning programs @xmath218 such that @xmath216 is bisimilar to @xmath104 .",
    "_ the action model associated with the basic learning program _    @xmath219 .    is bisimilar to the action model illustrated in figure  2 .",
    "the action model illustrated in figure  4 is a basic learning action .",
    "it is bisimilar to the action model associated with the basic learning program    @xmath220 .    also , the action model associated with the basic learning program    @xmath221 .    is bisimilar with the action model illustrated in figure  5 .",
    "[ closef ] let @xmath197 be an @xmath1 action model .",
    "* an @xmath3 submodel of @xmath105 is an @xmath3 action model @xmath222 , where @xmath223 , @xmath224 , @xmath57 and for all @xmath225 , @xmath226 .",
    "an @xmath3 submodel is called _ connected _ whenever all two different states of the model are _ reachable _ from each other .",
    "it is called _ closed _ whenever for all @xmath227 , if @xmath228 and for some @xmath225 , @xmath123 , then @xmath229 .",
    "* let @xmath230 and @xmath231 be two closed connected @xmath3 action submodels of @xmath105 .",
    "we write @xmath232 whenever @xmath233 and @xmath234 .",
    "one may easily verify that @xmath235 is a partial order relation .",
    "* assume @xmath236 , @xmath182 are all different maximal closed connected @xmath3 submodel of @xmath105 with respect to the partial order relation @xmath235 .",
    "we construct the action model @xmath237 as follows : * * @xmath238 * * @xmath239 if and only if either @xmath240 and @xmath241 , or @xmath242 , @xmath243 , @xmath244 , and @xmath123 ( in the action model @xmath105 ) .",
    "* * @xmath245 .",
    "* the _ projection _ of a state @xmath246 in the action model @xmath247 , denoted by @xmath248 , is defined to be the state @xmath80 in the action model @xmath105 .",
    "* for the action model @xmath105 , we define the _ directed graph _ of @xmath105 , denoted by @xmath249 as follows : * * each node @xmath249 is a maximal closed connected @xmath3 submodel @xmath250 of @xmath105 . * * between two different nodes @xmath251 , there exists a directed edge @xmath252 if and only if there exists an accessibility relation in the action model @xmath247 , @xmath239 , for some @xmath253 , @xmath93 , and @xmath179 .",
    "it is obvious that an @xmath3 submodel of a @xmath1 action model may be connected but not closed and vice versa .",
    "[ ddd ] let @xmath197 be a @xmath1 action model .",
    "then @xmath6 is bisimilar to @xmath254 for all @xmath255 and @xmath256 for which the state @xmath255 is the projection of @xmath256 .",
    "see the appendix .",
    "[ prtree1 ] if a pointed @xmath1 action model @xmath31 is a basic learning action , then its graph @xmath249 is a tree .",
    "see the appendix .",
    "_ consider the action model @xmath29 shown in figure  3 .",
    "there is no basic learning program @xmath207 such that its action model is @xmath29 .",
    "that is because @xmath257 is not a tree .",
    "_    we showed that the graph of the basic learning actions are trees . the converse is also true , that is , for each @xmath1 pointed action model @xmath31 , if its graph is a tree then it is associated to a basic learning program up to bisimilarity .",
    "[ s5prop ] all @xmath3 pointed action models are basic learning actions .",
    "see the appendix .",
    "[ prtree2 ] if the graph of a finite @xmath1 pointed model @xmath31 is a _",
    "finite _ tree , then @xmath31 is a basic learning action .",
    "see the appendix .",
    "in this part , we aim to compare our proposed learning operator with the learning operator introduced in  @xcite .",
    "we begin with the same example  lecture or amsterdam \" discussed in  @xciteanne and bert are in a bar , sitting at a table .",
    "a messenger comes in and delivers a letter addressed to anne .",
    "the letter contains either an invitation for a night out in amsterdam or an obligation to give a lecture instead .",
    "anne and bert commonly know that these are the only alternatives .",
consider the following information change scenario :    * ( * spy - seeing * ) .",
    "bert says good bye to anne and leaves the bar . during his leaving ,",
    "secretly _ spies from the window of the bar that whether anne reads the letter , anne does not get aware that bert spies on her , and wrongly thinks that she is alone ( bert is not present ) while she reads the letter .",
    "suppose that @xmath258 stands for  anna is invited for a night out in amsterdam \" , and also assume that in fact @xmath258 is true .",
    "it is not possible to model the above information change scenario in concurrent dynamic epistemic logic  @xcite .",
    "but we can model above scenario by the following basic learning programs .    @xmath259 .",
    "the pointed action model associated to the above learning program is @xmath31 , where @xmath260 , @xmath261 , @xmath262 , @xmath263 , @xmath264 , and @xmath23 , @xmath214 , @xmath30 , @xmath265 , and @xmath266 , @xmath267 .    a candidate to describe the action ",
    "spy - seeing \" in formalization presented in  @xcite could be @xmath268 .",
    "but the term @xmath269 is not a well - formed action in concurrent dynamic epistemic logic since it does not satisfy definition  6 of  @xcite . in this definition if @xmath270 is a well - formed action then @xmath271 .",
    "whereas , @xmath272 , and @xmath273 .",
    "for another example , we discuss the following information change scenario :    * ( * spy - reading * ) .",
    "bert says good bye to anne and leaves the bar .",
    "using a hidden camera , bert spies on anne when she reads the letter , and bert gets aware of the contents of the letter using the camera .",
    "anne wrongly thinks that she is alone , and there is no spy on her .",
    "again , it is not possible to model the above information change scenario in concurrent dynamic epistemic logic  @xcite .",
    "but we can model above scenario by the following basic learning programs @xmath274 .",
    "the pointed action model associated to the above learning program is @xmath31 , where @xmath15 , @xmath23 , @xmath123 , @xmath17 , and @xmath275 .",
    "again note that the term @xmath274 is not a well - formed action in concurrent dynamic epistemic logic as @xmath276 .",
    "we can also model scenarios introduced in  @xcite via basic learning programs as follows :    * ( * tell * ) .",
    "anne read the letter aloud : @xmath277 . *",
    "( * read * ) .",
    "both bert and anne are present in the bar , sitting on a table , and bert is seeing that anne reads the letter : @xmath278 . *",
    "( * mayread * ) bert orders a drink at the bar so that anne may have read the letter ( and actually anne reads the letter ) + @xmath279 , + where * * @xmath280 ( anne reads the letter , and in fact @xmath258 is true ) , * * @xmath281 ( anne reads the letter , and in fact @xmath282 is true ) , * * @xmath283 ( anne does not read the letter ) * * the pointed action model associated to @xmath207 , denoted by @xmath43 , is @xmath284 , @xmath285 , @xmath286 , @xmath287 , @xmath288 , and @xmath289 , @xmath290 . *",
    "* the pointed action model associated to @xmath291 , denoted by @xmath44 , is @xmath292 , @xmath293 , @xmath294 , @xmath295 , @xmath296 , and @xmath297 , @xmath298 .",
    "* * the pointed action model associated to @xmath291 , denoted by @xmath299 , is @xmath300 , @xmath301 , @xmath302 , @xmath303 , @xmath304 , and @xmath305 .",
    "+ one may easily check that for every @xmath306 , @xmath307 is @xmath26-bisimilar to @xmath308 . also , for every @xmath306 , @xmath307 is @xmath11-bisimilar to @xmath308 if and only if @xmath240 .",
    "+ therefore , the action model associated to @xmath279 is @xmath309 , where @xmath310 , @xmath311 , @xmath312 , @xmath313 , and @xmath314 , @xmath315 , @xmath316 , and @xmath317 , @xmath318 , @xmath319 , and @xmath320 , @xmath321 , and @xmath322 . * ( * bothmayread * ) .",
    "bert orders a drink at the bar while anne goes to the bathroom .",
    "both may have read the letter ( and actually both of them have read ) .",
    "+ @xmath323 .",
    "four above information change scenarios are also modelled in concurrent dynamic epistemic logic in example  7 , of  @xcite .",
    "also , in figure  1 of  @xcite , page  4 , epistemic states resulted from the execution of actions ( for these scenarios ) described in concurrent dynamic epistemic logic ( example  7 , of  @xcite ) is shown .",
    "it easy to verify thatepistemic states resulted from the execution of pointed action models associated to basic learning programs for these scenarios ( introduced above ) are exactly the same epistemic states resulted from the execution actions described in concurrent dynamic epistemic logic  @xcite ( and shown in figure  1 of the same reference , in page  4 ) .",

    "by _ learning by recursion _ , we mean the cases where agents learn about each other s learning , i.e. , an agent @xmath11 learns something about learning of another agent @xmath26 and agent @xmath26 also learns about learning of agent @xmath11 . in this way , a recursive learning occurs . in this section ,",
    "we introduce recursive learning actions to model this type of learning .    in the following definition ,",
    "@xmath324 , indicates that the _ term _ is undefined .",
    "[ opterm ] let @xmath101 be a set of epistemic formulas over a set of atomic formulas @xmath50 and a set of agents @xmath9 , and @xmath325 be a set of variables .",
    "the set of _ open terms _",
    "@xmath326 is defined as follows :    * for all @xmath327 , @xmath328 is an open term , we let @xmath329 and @xmath330 , * for all @xmath142 , @xmath5 is an open term , @xmath143 , and @xmath144 , * for all @xmath145 , and @xmath57 , if @xmath146 are open terms , then @xmath147 is an open term , and we let + @xmath148 , and + @xmath149 + note that the left sides are defined if @xmath205 and @xmath189 are defined .",
    "* @xmath153 is an open term whenever @xmath156 and @xmath190 are open terms . if both @xmath205 , @xmath206 are defined and @xmath152 , and if both @xmath331 are defined and @xmath151",
    ". then we let @xmath154 and @xmath155 , * @xmath157 is an open term whenever @xmath156 is an open term . if @xmath205 is defined and @xmath158 .",
    "we then define @xmath332 and @xmath160 .",
    "assume @xmath333 is an open term with @xmath334 variables , the tuple    @xmath335    is a suitable substitution for @xmath333 , whenever @xmath336 .",
    "now we define _ open action models _ , in order to be associated to open terms . for each variable @xmath328 ,",
    "let @xmath337 be a variable pointed action model , where @xmath338 and the set @xmath339 , the relations @xmath340 , and the function @xmath341 are _ variables_. the _ open action model _ of an open term @xmath333 is simply constructed using variable pointed action models @xmath342 , @xmath343 , ... , and @xmath344 and definition  [ defsem ] .",
    "substituting an action model @xmath31 in an open term @xmath345 is obtained by considering @xmath80 instead of @xmath346 .    _",
    "suppose @xmath347 , and consider the open term @xmath348 .",
    "the open action model @xmath349 is constructed as follows .",
    "we consider three states @xmath350 and @xmath346 , where @xmath351 .",
    "the actual state is @xmath255 , and the accessibility relations are @xmath352 , @xmath353 , @xmath354 , and , @xmath355 for all @xmath356 $ ] , where @xmath357 $ ] is the set of all states in the hypothetical model @xmath358 in which @xmath346 has @xmath26-accessibility to them .",
    "the open action model of the term @xmath348 is illustrated in figure  8 .",
    "_    figure  8    let @xmath359 be the action model of the term @xmath360 , and @xmath361 , @xmath362 , @xmath363 and @xmath364 .",
    "figure  9    substitution of @xmath359 for @xmath337 means to substitute @xmath365 for @xmath346 .",
    "therefore , @xmath366 and @xmath357=b[t_0]=\\{t_0\\}$ ] . substituting @xmath359 in @xmath349 yields to the following action model    figure  10    which is the action model of @xmath367 .",
    "[ opfx ]    _ suppose @xmath347 , and consider the open term @xmath368 .",
    "the open action model @xmath369 is shown in figure  11 .",
    "_    figure  11    @xmath370 is obtained by adding the new state @xmath371 as the actual state and adding new accessibility relations @xmath372 , and @xmath373 , for all @xmath374 $ ] .",
    "we have @xmath375 , and @xmath376 .",
    "@xmath377 is obtained by adding the new state @xmath378 to @xmath379 , and adding new accessibility relations @xmath380 , for all @xmath381 $ ] .",
    "moreover , @xmath382 .    continuing the above scenario and using definition  [ defsem ] , the open action model in figure  11 is constructed .    to obtain the open action model of @xmath383 ,",
    "one may simply consider _ two _ copies of the open action model @xmath384 and replace the actual state @xmath385 of one of them for @xmath346 in another one , and obtain the model shown in figure  12 . by substituting @xmath385 for @xmath346 ,",
    "the set @xmath386 $ ] is @xmath387 .",
    "figure  12    * fixed point of * @xmath368 . to construct an action model as a _",
    "fixed point _ of the term @xmath368 , we consider the open action model @xmath384 and replace its actual state @xmath385 for @xmath346 ( see figure  13 , the symbol @xmath388 will be defined in the next section ) .",
    "figure  13    it is easy to verify that the pointed action model in figure  13 is bisimilar to the pointed action model @xmath29 explained in example  [ rexm ] as a recursive learning action .      one may check that the graph of the action model shown in figure  3 is not a tree and thus by theroem  [ prtree1 ] , it is not a basic learning action .",
    "so we can not describe it in terms of alternative learning , @xmath389 , concurrent learning @xmath390 , and wrong learning , @xmath391 , operators .",
    "we add a new operator @xmath392 to the language for recursive learning and show that the action model shown in figure  3 is a recursive learning action . to do this , we need to slightly modify the definition of open terms  [ opterm ] as follows .",
    "let @xmath101 be a set of epistemic formulas over a set of atomic formulas @xmath50 and a set of agents @xmath9 , and @xmath325 be a set of variables .",
    "the set of _ open terms _ , @xmath393 is defined as follows :    * for all @xmath327 , @xmath328 is an open term , we let @xmath329 and @xmath330 , * for all @xmath394 , @xmath5 is an open term , @xmath143 , and @xmath144 , * for all @xmath145 , and @xmath57 , if @xmath146 are open terms then @xmath147 is an open term , and we let + @xmath148 and , + @xmath149 + note that the left sides are defined if @xmath205 and @xmath189 are defined . *",
    "@xmath153 is an open term whenever @xmath156 and @xmath190 are open terms . if both @xmath205 , @xmath206 are defined and @xmath152 , and if both @xmath331 are defined and @xmath151 .",
    "then we let @xmath154 , and @xmath155 , * @xmath157 is an open term whenever @xmath156 is an open term .",
    "if @xmath205 is defined and @xmath158 , we define @xmath395 and @xmath160 . *",
    "if @xmath333 is an open term , and both + @xmath396 and + @xmath397 + are defined , then @xmath398 is an open term with @xmath399 free variables ; the variable @xmath400 is bound under @xmath401 .",
    "we define + @xmath402 and + @xmath403 .",
    "a term @xmath404 is _ closed _ if it has no unbounded variable .",
    "let @xmath101 be a set of epistemic formulas .",
    "the set of _ recursive learning programs _ ,",
    "@xmath405 , is the set of all closed terms in @xmath393 .",
    "[ fxp](*semantics of @xmath406 * ) . the associated pointed action model to @xmath407",
    "is obtained by replacing the actual state @xmath408 of the action model @xmath409 for the state @xmath346 .",
    "the associated action model of @xmath410 is actually a _",
    "fixed point _ of the open action model of @xmath345 , see example  [ opfx ] .",
    "_ the semantics of the recursive learning program _    @xmath411    is constructed in the following way .",
    "the model of the open term    @xmath412    is shown in figure  14 .",
    "figure  14    the model of the open term    @xmath413    is shown in figure  15 .",
    "figure  15    the action model of    @xmath414    is illustrated in figure  16 .",
    "figure  16    finally the action model of the recursive learning program @xmath207 is shown in figure  17 .",
    "figure  17    as two other examples , one may check that the action model associated to the recursive learning program    @xmath415    is the pointed action model illustrated in figure  18 ,    figure  18    and the action model associated to the recursive learning program    @xmath416    is bisimilar to the pointed action model @xmath31 illustrated in figure  19 .    figure  19      in this subsection , we present two main theorems of the paper . in the first one ,",
    "theorem [ main ] , we show that every finite @xmath1 action model is associated to some recursive learning program and conversely , for every learning program , there is a finite @xmath1 action model associated with it .",
    "then we introduce a hierarchy over learning programs with respect to the number of recursive learning operators . in our second main theorem [ main2 ] , it is shown that the hierarchy of the learning programs is strict , i.e. , it is not possible to describe all @xmath1 action models by a determined finite number of recursion in learning .",
    "that means that the hierarchy does not collapse .",
    "[ closeds ] let @xmath197 be a @xmath1 action model .",
    "for each agent @xmath93 , an @xmath11-component of @xmath105 is @xmath417 , where @xmath418 is an @xmath3 closed connected submodel of @xmath105 .    *",
    "assume for all @xmath93 , @xmath419 , @xmath420 are all different @xmath11-component of @xmath105 .",
    "we construct the action model @xmath421 as follows : * * @xmath422 , * * @xmath423 if and only if either @xmath240 , @xmath424 and @xmath241 , or @xmath242 , @xmath425 , and @xmath214 ( in the action model @xmath105 ) , * * @xmath426 . * the _ projection _ of an state @xmath427 in the action model @xmath428 , denoted by @xmath429 , is defined to be the state @xmath80 in the action model @xmath105 .",
    "_ consider the action models @xmath27 and @xmath430 in figure  20 .",
    "their action models @xmath431 and @xmath432 are illustrated in figure  20 as well . _",
    "figure  20    let @xmath197 be an @xmath1 action model",
    ". then @xmath6 is bisimilar to @xmath433 for all @xmath255 and @xmath256 , in which the state @xmath255 is the projection of @xmath256 .",
    "the proof is similar to the proof of proposition  [ ddd ] .",
    "[ main ] all finite epistemic actions are recursive learning programs , i.e. ,    @xmath434 .",
    "see the appendix .",
    "_ it is shown in figure  21 , how to construct a program for the pointed action model @xmath14 through the instruction argued in proof of the theorem  [ main ] . _",
    "figure  21      for each @xmath435 , we define the class @xmath436 , of all finite @xmath1 pointed action models which can be described by a recursive learning program with at most @xmath334 times of _ dependent _ use of the recursive operator @xmath392 .    the term ` _ _ dependent _ _ ' in the above definition is crucial . in a program , two operators @xmath437 and @xmath438 are called to be dependent if it is not possible to use one variable for both operators and achieve the same action model .    for example , in the program ,    @xmath439 ,    the operators @xmath437 and @xmath438 are independent .",
    "note that the program    @xmath440 ,    describes the same action model .",
    "in contrast with the above example , in the following program ,    @xmath441 ,    the operators @xmath437 and @xmath438 are dependent .",
    "it is easy to observe that the class @xmath442 is the class of all basic learning programs , @xmath443 . we also wish to name @xmath444 as the class of primitive recursive learning programs and denote it also by @xmath445 .    to prove the next theorem",
    ", we need to clarify some notions in graph theory .",
    "let @xmath446 be a directed graph .",
    "a _ simple loop _ @xmath447 in the graph @xmath448 is a sequence of nodes @xmath449 , such that for all @xmath450 , @xmath451 , @xmath452 , and for all @xmath453 , if @xmath242 then @xmath454 . we call @xmath255 the _ start - point _ of the simple loop @xmath447",
    ". let @xmath455 and @xmath456 be two simple loops .",
    "we say @xmath457 is _ connected _ to @xmath447 by its start - point , if there exists @xmath458 , @xmath459 and @xmath460 , and for all @xmath461 and @xmath462 if @xmath463 and @xmath464 , then @xmath454 . a @xmath334-_nested loop _ is a sequence @xmath465 of simple loops , such that for each @xmath466 , @xmath467 is connected to @xmath468 by its start - point .    [ main2 ] we have the following hierarchy of recursive learning programs    @xmath469 .",
    "moreover , it does not collapse to @xmath470 , i.e , for all @xmath334 ,    @xmath471 ,    see the appendix .",
    "we may compare _ epistemic learning programs _ with other approaches , like _ concurrent dynamic epistemic logic _",
    "@xcite and _ epistemic programs _  @xcite .    in _ concurrent dynamic epistemic logic _",
    "@xcite , an epistemic action is interpreted as a _ relation _ between @xmath3 epistemic states and sets of @xmath3 epistemic states .",
    "there are two main differences between the interpretation of epistemic action in concurrent dynamic epistemic logic and epistemic learning programs .    *",
    "an epistemic action in concurrent dynamic epistemic logic is a _ relation _ between epistemic states whereas in _ epistemic learning programs _ , it is a _ function _ from epistemic states to epistemic states . *",
    "concurrent dynamic epistemic logic is just about @xmath3 models whereas epistemic learning programs also considers @xmath1 models .",
    "another difference is in the interpretation of the notion of learning .",
    "our learning operator is an operator on action models , and @xmath472 is a new action model , expressing the condition that agents in @xmath33 learn that an action among @xmath165 has occurred , whereas the action @xmath156 has _ actually _ occurred .",
    "for example , @xmath473 is an action model which says :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath4 is announced and agent @xmath26 is suspicious whether he learns @xmath4 or learns @xmath19 . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    one may compare the above learning program with the action @xmath474 in dynamic epistemic logic , and observe that for all @xmath3 epistemic state @xmath66 , we have that @xmath475 is bisimilar to @xmath476 $ ] .",
    "however , note that the learning program @xmath477 is equal to the learning program @xmath478 , whereas , in dynamic epistemic logic , the action @xmath479 is equal to @xmath474 .",
    "thus there is a difference between the notion of learning we consider for learning programs and the notion of learning considered in dynamic epistemic logic .    despite of the above arguments",
    ", it seems possible to translate a class of action terms , say @xmath207 , in concurrent dynamic epistemic logic to a recursive learning program @xmath480 , such that for all @xmath3 epistemic state @xmath66 , we have that @xmath481 is bisimilar to @xmath482 $ ] .",
    "another way to represent information change is via the notion of epistemic program introduced in  @xcite .",
    "whereby the notion of _ action signature _ is introduced and by adding this notion to the propositional dynamic logic @xmath483  @xcite , a logical language is obtained to represent information change .",
    "however in this setting , no learning operator is considered , and the information change is represented through _ action signature _ , _ alternative _ , _ sequential _ , and _ iteration _ compositions . we focus on different kinds of learning ; as the primitive notion of information change is learning something by agents .    another work related to ours is  @xcite where the epistemic programs are discussed by adding a parallel composition operator to non - deterministic sum and sequential composition .",
    "we showed that all finite @xmath1 action models can be described by recursive learning programs .",
    "it is also announced in  @xcite that every @xmath3 action model can be described as a concurrent epistemic action .",
    "we showed that @xmath1 models are models of the belief @xmath2 logic for applicable formulas . in this way , to preserve the belief consistency of an agent , the agent is absent in the states that conflicts his beliefs .",
    "a similar work has been done in  @xcite , which assumes that a rational agent rejects those incoming information which dispute his beliefs .    by introducing @xmath1 models and actions",
    ", we may think of a theory of multi - agent belief revision .",
    "a related work is  @xcite , which generalize agm  @xcite , to a multi - agent belief revision theory .",
    "our work presents a method to construct @xmath1 action models through some basic constructors .",
    "also in  @xcite , it is introduced operators to compose epistemic models in order to construct large models by small components representing agents partial observational information .        as a semantics of epistemic learning programs",
    ", we associated a pointed action model to every basic learning program .",
    "we may propose a _",
    "functional semantics _ for the basic learning programs , in the manner that each program is associated to a _ partial _ function from epistemic states @xmath484 to @xmath484 . in this",
    "semantics , the meaning of learning operator is _ different _ form the meaning we discussed in the introduction . here , learning in epistemic states @xmath66 deals with two things , a set @xmath485 of states of @xmath60 . which includes the actual state @xmath80 , _ and _ a set of agents @xmath57 ( where @xmath9 refers to the set of all agents ) .",
    "learning with @xmath57 and @xmath486 in the epistemic states @xmath66 means that :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ agents in @xmath33 become aware that the actual state is among the states in @xmath485 , and other agents in @xmath487 believe that nothing has occurred . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    let @xmath101 be a set of epistemic formulas over a set of atomic formulas @xmath50 and a set of agents @xmath9 .",
    "to each @xmath488 , we associate a pair @xmath489 , where @xmath490 is a partial function , and for each epistemic state @xmath66 , @xmath491 is a subset of @xmath492 , where @xmath493 with @xmath494 .    for a recursive learning program @xmath410 , the associated partial function should satisfy the fixed point equation , i.e. , @xmath495 . as our forthcoming work",
    ", we aim to study this functional semantics .",
    "it seems to us that functional semantics and recursive learning take us beyond the action models , that is , by functional semantics , epistemic learning programs can encodes information changes which can not be encode by action models .",
    "we need to provide a proof system for @xmath470 as it is done for other approaches , like concurrent dynamic epistemic logic  @xcite , and action models  @xcite .      in introduction",
    ", we put forward two meanings for 1 .",
    "_ pointed action models _",
    "( see  [ mean1 ] ) and 2 .",
    "_ learning of an action model _",
    "( see  [ mean2 ] ) .",
    "we supposed that an action model describes what is announced and what agents perceive based on their accesses to the resource of announcement .",
    "we also assumed that the learning of an action by a set of agents is to learn about the way information change .",
    "so our meanings of _ action models _ and _ learning _ refer to the _ occurrence _ of information change .",
    "we may propose two other meanings for pointed action models and learning of an action model , which refer to _ disability _ in information change . in this way ,",
    "an action model describes the disability of agents in hearing or accessing the resource of announcement .",
    "for example , the new meaning of the pointed action model @xmath14 in figure  1 ,    figure  1    is    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  in the case of announcement of @xmath4 agent @xmath11 hears @xmath19 . \" _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    note that the above meaning does not speak about what occurs in information change , but it just describes a disability of agent @xmath11 .",
    "suppose @xmath20 and @xmath21 .",
    "the new meaning of the pointed action model @xmath14 is that agent @xmath11 has a color - blindness and if a green ball is shown to her then she thinks that she sees a blue ball . similarly , the meaning of learning an action changes .",
    "the new meaning is learning about _ disability _ not about _",
    "occurrence_. the learning of an action by a set of agents is to learn about the disabilities that the agents have .",
    "figure  22 shows two pointed action models where both refer to @xmath496 ( agent @xmath11 learns the pointed action model @xmath14 ) , but one considers the _ occurrence meaning _ and the other considers the _",
    "disability meaning_.    figure  22    in the _ occurrence meaning _",
    ", agent @xmath11 learns that @xmath4 is announced . in the _",
    "disability meaning _",
    ", agent @xmath11 becomes aware of her color - blindness , and after this learning , if she sees a blue ball , she is suspicious whether it is green or blue .    *",
    "acknowledgement*. the authors would like to thank hans van ditmarsch for his careful reading of our manuscript , and his very helpful comments and suggestions .",
    "we also would like to thank mehrnoosh sadrzadeh for her very helpful comments and suggestions to improve the readability of the manuscript .",
    "10 c. e. alchourron , p. gardenfors , and d. makinson _ on the logic of theory change : partial meet contraction and revision functions _ , j. symb .",
    ", 50(2):510 - 530 , 1985 .",
    "g. aucher , _ internal models and private multi - agent belief revision _ , proceedings of 7th int . conf . on autonomous agents and multi - agent systems ( aamas ) , 2008 .",
    "p. balbiani , d. vakarelov , _ iteration - free pdl with intersection of programs : a complete axiomatization _",
    ", fundamenta informaticae , vol 45 , issue 3 , 2001 .",
    "a. baltag , l. moss , and s. solecki , _ the logic of public announcements , common knowledge and private suspicions _ ,",
    "proceeding tark 1998 , 43 - 56 , morgan kaufmann publishers , los altos , many update versions .",
    "a. baltag and l. moss , _",
    "logics for epistemic programs _ ,",
    "synthese , 139 : 165 - 224 , 2004 , knowledge , rationality @xmath497 action 1 - 60 .",
    "a. baltag and h. van ditmarsch , _ relation between two dynamic epistemic logic _ , ( abstract ) , proceedings of aal , 2006 .",
    "h. van ditmarsch , * knowledge games * , phd thesis , 2000 , illc dissertation series ds-2000 - 06 .",
    "h. van ditmarsch , w. van der hoek , and b. kooi , _ concurrent dynamic epistemic logic _ , in v. hendricks , k. jogensen , and s. pedersen , editors , knowledge contributors , page 45 - 82 , dordercht , 2003 , kluwer academic publishers , synthese library volume 322 .",
    "h. van ditmarsch , w. van der hoek , and b. kooi , * dynamic epistemic logic * , springer , 2008 .",
    "p. economou , _ sharing beliefs about actions : a parallel composition operator for epistemic programs _ , summer school on logic , language and inforamtion , 2005 .",
    "j. van eijck , f. sietsma , y. wang , _ composing models _ , journal of applied non - classical logics , 21(3 - 4 ) , 2011 .",
    "r. fagin , j. halpern , y. moses , and m. vardi , * reasoning about knowledge * , mit press , cambridge ma , 1995 .",
    "d. harel , _ dynamic logic _",
    ", d. gabbay , f. guenthner , eds . , handbook of philosophical logic , vol.ii , 1984",
    ".    j. hintikka , * knowledge and belief , an introduction to the logic of the two notions . * cornell university press , ithaca , new york , 1962 .",
    "republished in 2005 by kings college , london .",
    "j. plaza , _",
    "logics for public communications _ , in m. emrich , m. pfeifer , m. hadzikadic , and z. ras , editors , proceedings of the 4th international symposium on methodologies for intelligent systems , pages 201216 , 1989 .",
    "d. steiner , _ a system for consistency preserving belief change _ , in proceedings of rationality and knowledge , ed . by s. artemov and r. parikh , pp .",
    "133 - 144 , 2006 .",
    "[ lem23 ] let @xmath92 be a kripke model such that for each @xmath93 , @xmath10 is _",
    "euclidean_. then for all @xmath62 , if there is a state @xmath120 such that @xmath498 then there exists @xmath95 such that @xmath123 .",
    "we show that @xmath506 is a bisimulation relation .",
    "suppose all different the maximal closed connected @xmath3 submodels of @xmath105 are @xmath507 and @xmath508 .",
    ". then @xmath509 , for some @xmath182 .    *",
    "let @xmath123 .",
    "either @xmath510 or @xmath243 .",
    "in the first case , since @xmath250 is closed , we have @xmath511 and thus @xmath512 , and since @xmath513 , we are done . in the second case ,",
    "since @xmath105 is a @xmath1 model , and @xmath123 , we have @xmath17 , by lemma  [ lem23 ]",
    ". therefore there exists a maximal closed connected @xmath3 submodel of @xmath105 , say @xmath514 , such that @xmath515 and @xmath516 . by definition  [ closef ] , @xmath517 , and since @xmath518 we are done . * back .",
    ". then by definition  [ closef ] , @xmath123 , and we are done . *",
    "it is straightforward .",
    "let @xmath207 be a basic learning program and its graph @xmath520 be a tree .",
    "we show that the graph @xmath521 is a tree , for any arbitrary formula @xmath19 and @xmath522 .",
    "the maximal closed connected @xmath3 submodels of the action model @xmath523 are all the maximal closed connected @xmath3 submodels of @xmath524 , say @xmath525 , and the maximal closed connected @xmath3 submodel containing the state @xmath526 , which is @xmath527 .",
    "one may check that    * for all @xmath528 , the edges between two nodes @xmath529 in the graph @xmath521 are the same edges in the graph @xmath520 , * for all @xmath530 , there is no directed edge from @xmath250 to @xmath531 , as group of @xmath531 is empty , * for all @xmath530 , @xmath532 if and only if there exists @xmath511 , @xmath533 , such that @xmath534 in the model @xmath535 .",
    "let @xmath156 and @xmath190 be two basic learning programs such that @xmath152 , and @xmath151 and @xmath536 and @xmath537 are trees . then the graph @xmath538 is a tree for the following reasons .",
    "the maximal closed connected @xmath3 submodels of @xmath539 consist of all the maximal closed connected @xmath3 submodels of @xmath540 , and all the maximal closed connected @xmath3 submodels of @xmath540 , and the maximal closed connected @xmath3 submodel containing the state @xmath541 , which is @xmath542 .",
    "one may check that , since @xmath543 , there is no edge between the nodes of the subtrees @xmath536 and @xmath537 .",
    "so if the graphs @xmath536 and @xmath537 have no loop , the graph of @xmath538 would have no loop as well .",
    "* the @xmath3 model @xmath546 consists of @xmath547 states @xmath548 , with accessibility relations produced by agent - bisimilarity of group @xmath33  ( see definition  [ defsem ] ) . *",
    "all the maximal closed connected @xmath3 submodels of @xmath540 , @xmath549 , ... , @xmath550 .",
    "the node @xmath546 is the root of the graph @xmath551 , and all the graphs @xmath536 , @xmath537 , ... , @xmath552 are disjoint subgraphs of @xmath551 , such that the root may be connected to them . hence if @xmath536 , @xmath537 , ... , @xmath552 are trees , then @xmath551 is a tree .    * [ s5prop ] .",
    "* suppose @xmath6 is an @xmath3 pointed action model .",
    "let @xmath170 , where @xmath553 , and @xmath554 .",
    "as the model is @xmath3 , all accessibility relations are equivalence relations . for each agent @xmath555 ,",
    "let @xmath556 be the equivalence classes of the relation @xmath557 , which partitions the set @xmath8 .",
    "consider @xmath558 epistemic formulas @xmath559 , where none of them are @xmath2 equivalent to each other .",
    "for each @xmath175 , @xmath560 , consider the basic learning program @xmath561            the action model associated to the basic learning program @xmath566 is @xmath6 .",
    "since for each agent @xmath11 , the action models of two programs @xmath561 and @xmath567 are @xmath11-bisimilar if and only if @xmath175 and @xmath174 are in the same equivalence classes induced by the relation @xmath10 .    * [ prtree2 ] .",
    "* by induction on the height of the tree .",
    "let @xmath568 be the height of the tree @xmath249 .",
    "if @xmath569 , the action model @xmath105 is an @xmath3 model and by the proposition  [ s5prop ] , @xmath31 is a basic learning action .",
    "suppose that for all @xmath570 , if the graph of a @xmath1 pointed model @xmath571 is a tree with height @xmath572 , then @xmath571 is a basic learning action .",
    "assume @xmath573 .",
    "let @xmath574 are all maximal connected closed submodels of @xmath105 , and @xmath80 is an state of @xmath531 .",
    "we consider @xmath531 as the root of the tree , and delete all nodes which are not reachable from @xmath531 .",
    "that is because we want to state a program for the _ pointed _ action model @xmath31 , and by deleting those maximal connected closed submodels which are not reachable from @xmath80 , we do not loose anything up to bisimilarity .",
    "let @xmath575 , where @xmath576 , @xmath577 and @xmath578 . as @xmath531 is an @xmath3 action model , by using proposition  [ s5prop ]",
    ", there is a basic learning program @xmath579 , such that its action model is @xmath580 , and each @xmath567 corresponds to a state @xmath581  ( see the proof of proposition  [ s5prop ] ) . for each @xmath581 ,",
    "let @xmath582 , where @xmath583 is the group of agents of the state @xmath581 in the model @xmath247 .",
    "for each @xmath584 , if @xmath585 , for some state @xmath586 of the model @xmath247 , then as @xmath546 is the root and is not accessible from @xmath587 , the graph of the pointed action model @xmath588 is a tree with height less than @xmath334 , and by the induction hypothesis , there is a basic leaning program @xmath589 such that its action model is @xmath590 . for each @xmath581 ,",
    "let        * [ main ] .",
    "* let @xmath6 be a @xmath1 pointed action model .",
    "consider the action model @xmath428 .",
    "one may check that the followings hold true .",
    "suppose @xmath593 and @xmath594 are two _ different _ components in @xmath428 , then    * if @xmath424 , as both components are closed @xmath3 models , there is no accessibility relation for agent @xmath11 between the two components , * if for some state @xmath595 and @xmath596 , we have @xmath214 , then for all @xmath597 , we have @xmath598 , by transitivity and connectedness of @xmath594 .",
    "let @xmath599 be all different components of the model @xmath105 .",
    "also suppose @xmath600 is a component in which the actual state @xmath255 appears .",
    "the model @xmath428 is a directed labeled graph in which the nodes are @xmath599 , and the edges are agents in @xmath9 . to each node @xmath601",
    ", we correspond a variable @xmath602 .        in the unwound infinite tree",
    ", there could be infinite nodes with the same name , say @xmath601 .",
    "for all nodes @xmath604 of the unwound tree , if @xmath605 is a node with name @xmath601 ( for some @xmath56 ) and exactly one of its parents has the same name @xmath601 , then we cut the subtree rooted from @xmath605 and change the name of @xmath604 from @xmath601 to variable @xmath602 . in this way ,",
    "a _ finite tree _",
    "@xmath606 is obtained .      * first note that each leaf of the tree is either a variable or an @xmath11-component .",
    "if it is an @xmath11-component , then we associate to that leaf , the program + @xmath607 , + where @xmath608 are all the states of the component .",
    "we note that as the @xmath11-component is a connected @xmath3 action model , it is associated to the program + @xmath609 . *",
    "suppose that @xmath610 is the name of a node @xmath604 in @xmath606 , which either all of its children are corresponded to a variable or a program .",
    "two cases are possible : * * case 1 . among the children of @xmath604",
    "there is no node corresponding to the variable with the same index @xmath611 , that is @xmath612 .",
    "+ for this case , suppose @xmath610 refers to a @xmath26-component with the states @xmath608 . for each state @xmath613 , and each agent @xmath93 ,",
    "if there is a directed edge with label @xmath11 starting from the state @xmath613 to a children of @xmath604 , say @xmath614 , in the tree @xmath606 , consider + @xmath615 + where @xmath616 is a program or variable corresponding to the node @xmath614 .",
    "then we associate to the node @xmath604 , the program + @xmath617 * * case 2 . among the children of @xmath610",
    "there are some nodes corresponding to the variable with the same index @xmath611 , that is @xmath612 .",
    "for this case , we do exactly the same as we did in the first case , thus obtaining the program + @xmath617 .",
    "+ then we associate the following program to the node + @xmath618      * [ main2 ] .",
    "* in theorem  [ prtree1 ] , it is proved that the graph of the action model of a basic learning program is a tree .",
    "so none of the operations : alternative learning , concurrent learning , wrong learning , produces any loops in the graph of a learning program .",
    "it is easily seen by definition  [ fxp ] that , the only operation that makes loops in the semantics of a learning program is the recursive learning operator .",
    "therefore , if in a learning program , there exist @xmath334 times of dependent use of the recursive operator @xmath392 , then there exists at most a @xmath334-nested loop in its graph .",
    "that is , for each @xmath619 , the graph of an action model associated to a program in @xmath436 has at most @xmath334-nested loops .",
    "* @xmath623 .",
    "let @xmath624 , where @xmath4 is not logically equivalent to @xmath19 . the associated action model of the learning program @xmath625 is the action model @xmath29 in figure  3 . since @xmath4 and @xmath19 are not logically equivalent , the two states @xmath29 and @xmath626 ( see figure  3 ) are not bisimilar .",
    "if there exists a program @xmath291 without any recursive operator that its associated action model is bisimlar to @xmath29 , then the action model @xmath627 would be bisimilar to a finite action model @xmath628 , such that its graph is a tree .",
    "suppose @xmath629 is a bisimilarity relation between @xmath627 and @xmath630 , and @xmath631 .",
    "because of bisimilarity , since @xmath123 , there exists an state @xmath632 in model @xmath630 , such that @xmath633 and @xmath125 .",
    "again , since @xmath30 , there exists an state @xmath634 in @xmath630 , such that @xmath635 and @xmath636 .",
    "the model @xmath630 is a tree , so we have @xmath637 , and as @xmath80 and @xmath28 are not bisimilar , we have @xmath638 . again , by bisimilarity , there exists an state @xmath639 in @xmath630 , such that @xmath640 and @xmath641 .",
    "the new state @xmath639 is different from other states of @xmath630 , since @xmath630 has no loop . in this way",
    ", @xmath630 is an infinite model , and we derive a contradiction . *",
    "the above argument can be done for @xmath642 , by considering the associated action model of the program @xmath643 ( see figure  17 ) , where none of the formulas @xmath4 , @xmath19 and @xmath644 are logically equivalent .",
    "if there is a program @xmath291 with at most one use of recursive operation , then the action model in figure  17 ( which has a 2-nested loop ) would be bisimilar to an action model @xmath60 , that its graph has just one loop .",
    "this can easily be shown , since none of the states of the action model in figure  18 are bisimilar to each other , so the action model @xmath630 can not be finite .",
    "so for any arbitrary @xmath334 , we can construct an action model having one @xmath334-nested loop , where none of its nodes are bisimilar to each other .",
    "then this action model is in @xmath436 but not @xmath622 ."
  ],
  "abstract_text": [
    "<S> dynamic epistemic logic makes it possible to model and reason about information change in multi - agent systems . _ </S>",
    "<S> information change _ is mathematically modeled through epistemic action kripke models introduced by baltag et al . </S>",
    "<S> also , van ditmarsch interprets the information change as a _ relation _ between epistemic states and sets of epistemic states and to describe it formally , he considers a special constructor @xmath0 called learning operator . </S>",
    "<S> inspired by this , it seems natural to us that the basic source of information change in a multi - agent system should be _ learning _ an announcement by some agents _ together _ , _ privately _ , _ concurrently _ or even _ </S>",
    "<S> wrongly_. hence moving along this path , we introduce the notion of a _ learning program _ and prove that all finite @xmath1 action models can be described by our learning programs .    </S>",
    "<S> * epistemic learning programs * + a calculus for describing epistemic action models +   + department of mathematical sciences , + sharif university of technology , + p. o. box 11365 - 9415 , tehran , iran + mardeshir@sharif.edu , ramezanian@sharif.edu </S>"
  ]
}