{
  "article_text": [
    "the concept of virtual monte carlo ( vmc ) has been gradually developed by the alice software project @xcite . from the beginning ,",
    "the alice collaboration has adopted a strategy for the development of the simulation framework that would allow a smooth transition from the currently used transport code , geant3 @xcite , to new ones geant4 @xcite and fluka @xcite . instead of maintaining the geant3 based code written in fortran and developing in parallel a new framework , based on a new simulation program ,",
    "the user code was gradually migrated from fortran to c++ and a general c++ interface to a transport monte carlo ( mc ) was developed .",
    "the vmc development went through the following phases :    \\1 .",
    "the c++ class , tgeant3 , providing access to geant3 data structures ( common blocks ) and functions was introduced .",
    "this provided a starting point for a full migration of the user code from fortran to c++ .",
    "the abstract c++ class , alimc , was defined as a generalization of tgeant3 .",
    "this gave the initial step for the development of the geant4 interface and the explicit geant3 dependencies in the user code were also taken away .",
    "however , the implementations of the alimc interface for both geant3 and geant4 were dependent on the alice software .",
    "the interfaces to the user monte carlo application were introduced .",
    "the dependence of the implementations of the alimc interface on the alice software could then be removed and the vmc was also made available to non - alice users .",
    "with the vmc concept the user monte carlo application can be defined independently of a specific transport code ( see fig .  [ vmc - concept - now ] ) .",
    "it can then be run with all supported monte carlos , without changing the user code , ie . , the geometry definition , the detector response simulation and input or output formats .",
    "the selection of a concrete monte carlo ( geant3 , geant4 or fluka ) is made dynamically at run time .",
    "the vmc is based on the root system @xcite , which is used mainly for scripting and dynamical loading of libraries .",
    "once the vmc application has been defined , simulations can be run interactively from the root ui or using root macros .      in order to completely decouple the user code from the concrete monte carlo , the interfaces to both",
    "the monte carlo itself and to the user application code have been introduced as shown in fig .",
    "[ design ] . in the following subsections ,",
    "all interfaces will be discussed in detail .",
    "the virtual mc interface ( class tvirtualmc ) was the first interface written and it is the most robust one .",
    "it has been defined as a generalization of geant3 functions for the definition of simulation tasks and it provides :    * methods for building and accessing geometry * methods for building and accessing materials * methods for setting physics * methods for accessing transported particle properties during stepping * methods for run control    the implementations of the virtual mc for concrete transport programs are part of the vmc distribution and are provided for the user . at the present time , the geant3 vmc and the geant4 vmc are in distribution , the fluka vmc will be available soon .",
    "the virtual mc application interface ( class tvirtualmcapplication ) is the interface to a user application code .",
    "it defines user actions at each stage of a simulation run :    armadillo : = construct geometry + init geometry + generate primaries + begin event + begin primary + pre track + stepping + post track + finish primary + finish event    the implementation of the virtual mc application completely defines the user application and has to be provided by the user .",
    "the virtual mc stack interface ( class tvirtualmcstack ) defines the interface to a user defined particles stack .",
    "users can choose one of the concrete stack classes provided in the vmc examples or can implement their own stack class .",
    "the last interface in the vmc , the virtual mc decayer ( class tvirtualmcdecayer ) , defines the interface to the external decayer .",
    "the implementation of this interface by a user is optional .",
    "the user vmc application code is written by implementing the mc application class . in the case of very simple applications",
    "the user can write everything in the one class . in more complex cases it can be convenient to define the user application class as a composition of more action classes , as is shown in the vmc examples described in section 5.1 .    in this section ,",
    "three examples of a user code based on the vmc will be given .",
    "in example  [ table - geom - construction ] , an example of a geometry definition is given .",
    "the geometry is defined by calls to the virtual mc interface . in the first block ,",
    "a volume named `` trtu '' of the shape tube of an inner radius of 0  cm and outer radius of 60  cm , is created and associated with a material defined by the tracking medium identifier `` idal '' . in the second block",
    ", this volume is placed at the position ( -100  cm , 0  cm , 0  cm ) in the mother volume named `` exph '' .",
    "void mymcapplication::constructgeometry ( ) + \\ { + _ // create tracker tube volume + double_t trackertube[3 ] ; + trackertube[0 ] = 0 . ;",
    "+ trackertube[1 ] = 60 . ; + trackertube[2 ] = 50 . ; + gmc@xmath0gsvolu(``trtu '' , `` tube '' , idal , trackertube , 3 ) ; +   + _ //",
    "place tracker tube volume + double_t posx = -100 . ;",
    "+ double_t posy = 0 . ; + double_t posz = 0 . ; + gmc@xmath0gspos(``trtu '' , 1 , `` exph '' , posx , posy , posz , 0 , `` only '' ) ; + } +   + _ _    [ table - geom - construction ]    the functions for geometry building are compatible with geant3 ( both by name and in the list of parameters ) .",
    "the vmc also uses the geant3 system of default physical units . in future , using the root geometrical modeller directly will be possible as an alternative to this geant3 style .",
    "( for more details , see section 6 . )      in example  [ table - primary - particles ] , an example of how to define primary particles is given .",
    "this is done by calls to the virtual mc stack interface .",
    "the particle type ( proton , electron , ... ) is defined using the pdg encoding and particle static properties ( mass , charge , ... ) are taken from the particle database in root ( represented by the tdatabasepdg class ) .",
    "void mymcapplication::generateprimaries ( ) + \\ { + _ //",
    "define particle properties :   + _ //",
    "pdg encoding : pdg   + _ // position : vx , vy , vz , t   + _ // momentum : px , py , pz , e   + _ // ...   +   + _ //",
    "add particle to mc stack   + gmc@xmath0getstack ( ) + @xmath0settrack(tobedone , -1 , pdg , px , py , pz , e , vx , vy , vz , t , ... ) ; + } +   + _ _ _ _ _ _    [ table - primary - particles ]      in example  [ table - detector - response ] , an example of a user stepping function is shown .",
    "this function is called by mc at each step . in this example",
    "the properties of the particle transported are obtained via calls to the virtual mc interface and then saved in the user own hits objects . for large detectors",
    "it is recommended to delegate this function to stepping functions defined in subdetector classes .",
    "void mymcapplication::stepping ( ) + \\ { + _ // get current volume i d + int_t copyno ; + int_t i d = gmc@xmath0currentvolid(copyno ) ; +   + _ // check if step is performed in the sensitive volume   + if ( i d ! = fsensitivevolumeid ) return false ; +   + _",
    "// get track position + double_t x , y , z ; + gmc@xmath0trackposition(x , y , z ) ; +   + _ // get energy deposit + double_t edep = gmc@xmath0edep ( ) ; +   + _ // create user hit + mysd@xmath0addhit(x , y , z , edep ) ; + } +   + _ _ _ _ _    [ table - detector - response ]",
    "in this section we will outline the present status and give a short description of the implementations of the virtual mc for the three transport mcs : geant3 , geant4 and fluka .",
    "the geant3 program @xcite was written to describe the passage of elementary particles through matter .",
    "originally designed for high energy physics experiments , it has also found applications outside this domain in the areas of medical and biological sciencies , radioprotection and astronautics .",
    "the first version was released in 1974 and the system was developed with some continuity over 20 years till the last release 3.21 in 1994 .",
    "it has become a popular and widely used tool in the hep community .",
    "the geant3 vmc , which implements the virtual mc interface to the geant3 program , is provided within a single package `` geant3 '' together with geant321 itself .",
    "this `` geant3 '' package is available from the root web site @xcite .    as the virtual mc was largely inspired by geant3 , its implementation for geant3 was straightforward and has no limitations .",
    "besides the implementation of the virtual mc , the geant3 vmc also includes the geant3 geometry browser @xcite , a gui which provides a variety of functions , namely :    * visualization of the geometry volumes tree * drawing of volumes and interactive setting of drawing options * browsing material and tracking medias parameters * browsing applied cuts and activated physics processes * plotting of de / dx and cross - sections for a selected physical process    the implementation is based on the root gui classes .",
    "the geant4 project @xcite was started in 1994 , the first production version was released in 1998 and the system is continuously under developement by the geant4 collaboration .",
    "its areas of application include particle and nuclear physics experiments , medical , accelerator and space physics studies .",
    "the geant4 vmc , which implements the virtual mc interface for the geant4 program , is provided within the `` geant4_vmc '' package and requires a prior geant4 installation .",
    "this `` geant4_vmc '' package is available from the root web site @xcite .",
    "the implementation of the interface to mc for geant4 was presented at the chep 2001 conference @xcite .",
    "the design , the implementation and also the problems arising from the g3tog4 approach and their foreseen solutions were discussed . despite improvements and design changes , the structure and the components of the package presented there can be found in the current geant4 vmc package .",
    "the major change applied since then was that the dependencies on the alice classes in aligeant4 have been replaced by the dependencies on the interfaces to a user application .",
    "this meant that all classes from aligeant4 could be moved to the experiment independent part , tgeant4 , that has been then renamed geant4 vmc .",
    "the main improvement from that time was in minimizing the limitations of the g3tog4 tool in the geant4 4.0 release .",
    "new classes to support the reflection symmetry and also a limited support for the `` many '' volumes positions have been introduced .",
    "the g3tog4 tool does not resolve positions with `` many '' automatically , however a user can specify the overlapping volumes using the g4gsbool ( ) function and then the overlaps for these volumes and their daughters are automatically resolved using boolean solids .",
    "the volume with a `` many '' position can only have this position .",
    "the corresponding function gsbool ( ) has been added to the virtual mc interface .",
    "the vmc interface provides a common denominator for all implemented mcs and can not cover all commands available in a geant4 user session through the geant4 ui .",
    "switching between the root ui and the geant4 ui gives the vmc user the possibility of working with the native geant4 ui when needed or desired .",
    "it is also possible to process a foreign command or a foreign macro in both uis , for example the root commands and macros can be processed in the geant4 ui and vice versa .    in a similar way as the geant3 vmc , the geant4 vmc also includes the geant4 geometry browser .",
    "it was implemented in an analogous way .",
    "it provides the same functionality for browsing geometry .",
    "it does not include the panels that allow to browse the activated physical processes and their characteristics .",
    "in addition , the geant4 vmc also includes an xml convertor . with this convertor",
    "the geant4 geometry can be exported to xml in the agdd format @xcite and then browsed and visualized using the graxml tool @xcite .",
    "the xml convertor classes are independent of the geant4 vmc , they can be compiled in a separate library and also used with a native geant4 application .",
    "the history of fluka @xcite goes back to 1962 - 1967 . over the years it went through three different generations , which can be roughly identified as the fluka of the 70s , the fluka of the 80s and today s fluka as a fully integrated particle physics monte carlo simulation package .",
    "it has many applications in high energy experimental physics , engineering , shielding , detector and telescope design , cosmic ray studies , dosimetry , medical physics and radio - biology .",
    "the fluka vmc is now under development within the alice collaboration and the fluka team .",
    "the development version of the vmc implementation is in the tfluka package of aliroot .",
    "most of the functionality required by the vmc is already fully operational :    * functions for building and accessing geometry ( through flugg ) * functions for accessing transported particle properties during stepping * recording particles in the vmc stack * functions for run management    under development are :    * functions for selecting activated physics processes * interface to the external decayer    the geometry part of the fluka vmc is implemented with the use of the geant4 vmc and the flugg tool @xcite .",
    "flugg was developed a few years ago so that the geant4 geometry could be used directly in the fluka particle transport . in the near future",
    "this part will be replaced by the root geometrical modeller .",
    "( for more details , see section 6 . )",
    "to demonstrate the use of the vmc , geant4 novice examples n01 , n02 and n03 were rewritten in the vmc framework .",
    "the geant4 novice examples were chosen in order to show the similarities and differences between the two frameworks .",
    "having in parallel , both the geant4 vmc and the geant4 native application , allows to verify the consistence of the results and to compare performancies .",
    "the vmc examples demonstrate the implementation of the user mc application and mc stack classes .",
    "while in the first example all functions of the mc application are implemented directly in the ex01mcapplication class , in the other examples the mc application class is defined as being a composition of more action classes ( e.g the detector construction class ) and it delegates most of its functions to its components .",
    "+   +   +   + // load geant3 libraries & // load geant4 libraries + groot@xmath0loadmacro(``g3libs.c '' ) ; & groot@xmath0loadmacro(``g4libs.c '' ) ; + g3libs ( ) ; & g4libs ( ) ; +   +   +   +   +   +   +   +   + appl@xmath0initmc(``g3config.c '' ) ; & appl@xmath0initmc(``g4config.c '' ) ; +   +   +   +   +    [ table - run - macros ]    all examples are executed by processing the provided root macros .",
    "the macros for running the example e01 with geant3 and geant4 ( run_g3.c and run_g4.c ) are shown in example  [ table - run - macros ] . in both macros , all necessary libraries are first dynamically loaded ,",
    "then the user mc application is created and initialized with a mc specific configuration macro ( g3config.c or g4config.c ) shown in example  [ table - config - macro ] .",
    "after initialization , a simulation run with the chosen concrete mc is executed for the specified number of events .      + void config ( ) + \\ { + _ // geant3 vmc + new tgeant3(``c++ interface to geant3 '' ) ; + } +   + * g4config.c : * +   + void config ( ) + \\ { + _ // run configuration for geant4 + tg4runconfiguration * runconfiguration = new tg4runconfiguration ( ) ; +   + _ //",
    "geant4 vmc + new tgeant4(``tgeant4 '' , `` the geant4 monte carlo '' , runconfiguration ) ; + } +   + _ _ _    [ table - config - macro ]      aliroot is the alice off - line framework for simulation , reconstruction and analysis .",
    "the simulation in aliroot is fully based on the vmc .",
    "hence the aliroot framework can be given as a complex example of a vmc application .",
    "the aliroot framework will not be discussed in more detail in this paper , but the reader is directed to the other chep03 conference papers related to this subject : `` the aliroot framework , status and perspectives '' @xcite , `` simulation in alice '' @xcite , `` alice experience with geant4 '' @xcite .    in the following , a few figures demonstrating the use of aliroot with two mcs , geant3 and geant4 , will be given . in fig .",
    "[ aliroot - its - geometry ] and fig .",
    "[ aliroot - muon - geometry ] the geometries for two alice detector subsystems ( the its and the dimuon arm ) are shown - the first drawn with geant3 , the second drawn with geant4 and graxml . in fig .",
    "[ aliroot - hits ] , the x and z distributions of hits in the tpc subsystem are shown for two transport mcs : geant3 and geant4 , giving qualitatively similar results .",
    "over the past two years the alice offline project , in close collaboration with the root team , has developed a new multi - purpose geometrical modeller for hep .",
    "it is called tgeo and has been included in root @xcite .",
    "this new geometrical modeller is currently being integrated into the vmc .",
    "the vmc user will then have also the possibility to define geometry directly using the new geometrical modeller .",
    "the current interface will be kept for backward compatibility . apart from making a geometry construction via the vmc more user - friendly",
    ", this integration will also improve the performance of the mc simulation .",
    "the new modeller has been optimised for performance and runs faster than geant3 for most geometries tested .    for geant3 and fluka ,",
    "the integration of tgeo is being made by replacing the native geometry with the tgeo one .",
    "the new version of geant3 with the new root geometry package is close to completion and the work on the integration of tgeo into fluka is already well advanced .    for geant4 ,",
    "the object - oriented methodology can be exploited and tgeo can be integrated with geant4 through an abstract interface to the geant4 geometry . at present ,",
    "the geant4 geometry navigator class is not based on an abstract interface , its generalization will be required to allow an alternative implementation using tgeo .",
    "discussions with the geant4 team have started and the design and prototype implementation for the abstract navigator and transportation are now part of the geant4 developments planned for the 6.0 release @xcite .    in the meantime , a convertor from root geometry to geant4 native geometry , roottog4 , has been developed .",
    "it is already operational and close to completion",
    ". it will allow the migration from the current vmc geometry definitions to tgeo , before the solution via the abstract navigator is available .",
    "the new concept of the vmc including the root geometrical modeller is shown in fig .  [ vmc - concept - future ] .",
    "the vmc is distributed with the root system @xcite .",
    "it consists of the following packages :    * mc : the core package ( interfaces ) * geant3 : geant321 + geant3 vmc * geant4_vmc : geant4 vmc * examples    the `` mc '' package is directly included in root , `` geant3 '' and `` geant4_vmc '' are available from the root cvs server @xcite as independent modules and the package with the examples is provided within `` geant4_vmc '' .",
    "the tarballs with sources are also available from the vmc web page @xcite .",
    "the virtual monte carlo provides a simulation framework which is independent of any concrete mc and is based on the root system .",
    "geant3 and geant4 have already been integrated and the same work with fluka is in progress .",
    "the main advantage with vmc is that the user can run the same simulation program with three different transport mcs .",
    "the obvious consequence is that the different models can be compared and better understood .",
    "vmc also facilitates the use of less user - friendly tools such as geant3 and fluka and - being inspired from geant3 - it is also suitable for users starting with existing geant3 applications .",
    "s. agostinelli et al . , `` geant4 - a simulation toolkit '' , cern - it-20020003 , kek preprint 2002 - 85 , slac - pub-9350 , submitted to nuclear instruments and methods nim a. + http://wwwinfo.cern.ch/asd/geant4/geant4.html"
  ],
  "abstract_text": [
    "<S> the concept of virtual monte carlo ( vmc ) has been developed by the alice software project to allow different monte carlo simulation programs to run without changing the user code , such as the geometry definition , the detector response simulation or input and output formats . </S>",
    "<S> recently , the vmc classes have been integrated into the root framework , and the other relevant packages have been separated from the aliroot framework and can be used individually by any other hep project . </S>",
    "<S> the general concept of the vmc and its set of base classes provided in root will be presented . </S>",
    "<S> existing implementations for geant3 , geant4 and fluka and simple examples of usage will be described . </S>"
  ]
}