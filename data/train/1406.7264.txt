{
  "article_text": [
    "increasing demand for storing and analyzing _ big - data _ as well as several applications of cloud computing systems require efficient cloud computing infrastructures",
    ". one inevitable nature of the storage systems is node failures . in order to provide resilience against failures ,",
    "redundancy is introduced in the storage .",
    "classical redundancy schemes range from _ replication _ to _ erasure coding_. erasure coding allows for better performance in terms of reliability and redundancy compared to replication , however repair bandwidth in reconstructing a failed node is higher .",
    "regenerating codes are proposed to overcome this problem in the seminal work of dimakis et al .",
    "in such a model of distributed storage systems ( dss ) , the file @xmath0 is encoded to @xmath1 nodes such that any @xmath2 nodes ( each with @xmath3 symbols ) allow for reconstructing the file and any @xmath4 nodes ( with @xmath5 symbols from each ) reconstruct a failed node with a repair bandwidth @xmath6 . the trade - off between per node storage ( @xmath3 ) and repair bandwidth ( @xmath7 ) is characterized and two ends of the trade - off are named as minimum storage regenerating ( msr ) and minimum bandwidth regenerating ( mbr ) points @xcite .",
    "several explicit codes have been proposed to achieve these points recently @xcite .",
    "another metric for an efficient repair is repair degree @xmath8 , and regenerating codes necessarily have @xmath4 .",
    "codes with locality and locally repairable codes with regeneration properties  @xcite allow for a small repair degree , wherein failed nodes are reconstructed via local connections .",
    "instances of such codes are recently considered in dss  @xcite .    in large - scale distributed storage systems ( such as gfs @xcite ) , _ correlated failures _",
    "are unavoidable .",
    "as analyzed in  @xcite , these simultaneous failures of multiple nodes affect the performance of computing systems severely .",
    "the analysis in  @xcite further shows that these correlated failures arise due to _ failure domains_. for example , nodes connected to the same power source or nodes belonging to the same rack exhibit these failure bursts .",
    "the unavailability periods are transient , and largest failure bursts almost always have significant rack - correlation . in order to overcome from failures having such patterns ,",
    "a different approach is needed .    in this paper",
    ", we develop a framework to analyze resilience against block failures in dss with node repair efficiencies .",
    "we consider a dss with a single failure domain , where nodes belonging to the same failure group constitute a block of the codeword .",
    "we introduce block failure resilient ( bfr ) codes , which allow for data collection from any @xmath9 blocks , where @xmath10 is the number of blocks , and @xmath11 is the resilience parameter of the code . considering a load - balancing among blocks , a same number of nodes",
    "are contacted within these @xmath12 blocks .",
    "( a total of @xmath13 nodes and downloading @xmath3 - i.e. , all - symbols from each . )",
    "this constitutes data collection property of bfr codes .",
    "( @xmath14 case can be considered as a special case of batch codes introduced in  @xcite . )",
    "then , we introduce repairability in bfr codes , where any node of a failed block can be reconstructed from any @xmath15 of any remaining @xmath16 blocks .",
    "( a total of @xmath17 nodes and downloading @xmath18 symbols from each . ) as introduced in  @xcite , we utilize graph expansion of dss employing these repairable codes , and derive file size bounds and characterize bfr - mbr and bfr - msr points .",
    "( we note that the blocks in our model can be used to model racks in dss .",
    "such a model is related to the work @xcite which differentiates between within - rack communication and cross - rack communication .",
    "our focus here would correspond to the case where within rack communication is much higher than the cross - rack communication , as no nodes from the failed rack can be contacted to regenerate a node . )",
    "we construct explicit codes achieving these points for a wide set of parameters . for a system with @xmath19 blocks case ,",
    "we show that achieving both msr and mbr properties simultaneously is asymptotically possible .",
    "( this is somewhat similar to the property of twin codes @xcite , but here the data collection property is different . ) then , for a system with @xmath20 blocks case , we consider utilizing multiple codewords , which are placed into dss via a combinatorial design based codeword placement algorithm .",
    "we show this technique establishes optimal codes for a wide set of parameter ranges .",
    "the paper is organized as follows .",
    "section ii introduces model and preliminaries .",
    "section iii is devoted to the analysis of file size bounds .",
    "code constructions are provided in section iv .",
    "section v includes extensions and concluding remarks .",
    "consider a code @xmath21 which maps @xmath0 symbols ( over @xmath22 ) in @xmath23 ( file ) to length @xmath1 codewords ( nodes ) @xmath24 with @xmath25 for @xmath26 .",
    "these codewords are distributed into @xmath10 blocks each with block capacity @xmath27 nodes per block .",
    "we have the following definition .    an @xmath28 block failure resilient ( bfr ) code encodes @xmath0 elements in @xmath22 ( @xmath23 ) to @xmath1 codeword symbols ( each in @xmath29 ) that are grouped into @xmath10 blocks such that @xmath23 can be decoded by accessing to any @xmath30 nodes of from each of the @xmath31 blocks .",
    "we remark that , in the above , @xmath11 represents the resilience parameter of the bfr code , i.e. , the code can tolerate @xmath11 block erasures . due to this data collection ( file decoding ) property of the code",
    ", we denote the number of blocks accessed as @xmath32 and number of nodes accessed per block as @xmath33 . noting that @xmath34 should be satisfied",
    ", we differentiate between _ partial _ block access , @xmath35 , and _ full _ block access @xmath36 . throughout the paper , we assume @xmath37 .",
    "i.e. , @xmath38 is integer , and @xmath39 , i.e. , @xmath40 is integer .    remarkably , any mds array code @xcite can be utilized as bfr codes for the full access case .",
    "in fact , such an approach will be optimal in terms of minimum distance , and therefore for resilience @xmath11 .",
    "however , for @xmath35 , mds array codes may not result in an optimal code . constructing optimal bfr codes in terms of the trade - off between resilience @xmath11 and code rate @xmath41 will be studied elsewhere . in this work ,",
    "we focus on repairable bfr codes , as defined in the following .",
    "an @xmath42 block failure resilient regenerating code ( bfr - rc ) is an @xmath28 bfr code ( data collection property ) with the following repair property : any node of a failed block can be reconstructed by accessing to any @xmath43 nodes of any @xmath44 blocks and downloading @xmath18 symbols from each of these @xmath45 nodes .",
    "we assume @xmath46 , i.e. , @xmath15 is integer .",
    "( note that @xmath15 should necessarily satisfy @xmath47 in our model . )",
    "we consider the trade - off between the _ repair bandwidth _ @xmath6 and _ per node storage _",
    "@xmath3 similar to the seminal work  @xcite . in particular , we define @xmath48 as the minimum per node storage and @xmath49 as the minimum repair bandwidth for an @xmath42 bfr - rc . when deriving this trade - off , we focus on systems having @xmath50 , i.e. , data collection process contacts to less number of nodes per block as compared to symbol regeneration .",
    "( we note that , similar to regenerating codes , without loss of generality , one should only consider systems that satisfy @xmath4 , i.e. , @xmath51 .",
    "therefore , our @xmath52 assumption can be made without loss of generality for systems having @xmath53 . )",
    "the operation of a dss employing such codes can be modeled by a multicasting scenario over an information flow graph @xcite , which has three types of nodes : 1 ) source node ( @xmath54 ) : contains original file @xmath23 .",
    "2 ) storage nodes , each represented as @xmath55 with two sub - nodes(@xmath56 ) , where @xmath57 is the sub - node having the connections from the live nodes , and @xmath58 is the storage sub - node , which stores the data and is contacted for node repair or data collection ( edges between each @xmath59 and @xmath60 has @xmath3-link capacity ) .",
    "3 ) data collector ( @xmath61 ) which contacts @xmath62 sub - nodes of @xmath63 live nodes ( with edges each having @xmath64-link capacity ) .",
    "( as described above , for bfr codes these @xmath63 nodes can be any @xmath30 nodes from each of the @xmath31 blocks . ) then , for a given graph @xmath65 and dcs @xmath66 , the file size can be bounded using the max flow - min cut theorem for multicasting utilized in network coding  @xcite .",
    "[ lma : mfmcformulticast ] @xmath67 where @xmath68 represents the flow from the source node @xmath54 to @xmath66 over the graph @xmath65 .",
    "therefore , @xmath69 symbol long file can be delivered to a dc , only if the min cut is at least @xmath69 . in the next section ,",
    "similar to dimakis et al .",
    ", @xcite , we consider @xmath63 successive node failures and evaluate the min - cut over possible graphs , and obtain a file size bound for a dss operating with bfr - rc .",
    "we first provide the definition of balanced incomplete block designs ( bibds ) @xcite .",
    "a @xmath70-bibd has @xmath71 points distributed into blocks of size @xmath72 such that any pair of points are contained in @xmath73 blocks .",
    "[ thm : bibdcorollary ] for a @xmath70-bibd ,    * every point occurs in @xmath74 blocks .",
    "* the design has exactly @xmath75 blocks .    in the achievable schemes of this work",
    ", we utilize a special class of block designs that are called projective planes .",
    "a @xmath76-bibd with @xmath77 is called a projective plane of order @xmath78 .",
    "projective planes have the property that every pair of blocks intersect at a unique point ( as @xmath79 ) .",
    "in addition , due to corollary  [ thm : bibdcorollary ] , in projective planes , every point occurs in @xmath80 blocks , and there are @xmath81 blocks .",
    "information flow graph analysis , similar to that of considered in @xcite , can be performed to obtain file size bounds for repairable bfr codes . in this paper , we focus on the case @xmath82 , i.e. , regeneration of a node in a failed block is performed by contacting to all remaining live blocks . in the following ,",
    "we first analyze @xmath14 case , i.e. , data collector connects all the blocks to reconstruct the data .",
    "( two blocks ) case . ]",
    "consider @xmath19-block case as in fig .",
    "[ fig : two - block ] and assume @xmath83 . from lemma  [ lma :",
    "mfmcformulticast ] , the file size @xmath0 can be upper bounded with the repair procedure shown in fig .",
    "[ fig : two - block ] , which displays one of the `` minimum - cut '' scenarios , wherein any two consecutive node failures belong to different blocks .",
    "assuming @xmath63 is even and @xmath84 , @xmath85 achieving this upper bound with equality would yield maximum possible file size .",
    "one particular instance is shown in fig .",
    "[ fig : two - block ] , and we note that the order of failed nodes does not matter as the sum of the cut would be the same with different order of failures as long as we consider connection from data collector to @xmath86 repaired nodes from each block .    for msr point , @xmath87 . in the bound",
    ", we then have @xmath88 . achieving equality would give the minimum repair bandwidth for the msr case .",
    "hence , bfr - msr point is given by @xmath89    bfr - mbr codes , on the other hand , have the property that @xmath90 with minimum possible @xmath91 while achieving the equality in . inserting @xmath90 in",
    ", we obtain that @xmath92 same analysis can be done for odd values of @xmath63 as well , @xmath93 @xmath94 here , we compare @xmath95 and @xmath96 .",
    "we have @xmath97 , and , if we have @xmath98 , then @xmath99 .",
    "this implies that bfr - msr codes with @xmath19 achieves repair bandwidth of mbr and per - node storage of msr codes simultaneously for systems with @xmath100 .",
    "we provide the generalization of these bounds to @xmath101 case in the following .",
    "the same steps described above can be used to derive the file size bound for @xmath10-blocks .",
    "the optimal file size is given by @xmath103    bfr - msr and bfr - mbr points are as follows , @xmath104    @xmath105    we observe that @xmath106 for @xmath107 , which is the case here as @xmath108 .",
    "also , we have @xmath109 when @xmath110 which is always true .",
    "hence , @xmath95 is between @xmath111 and @xmath96 .      if we restrict data collector to connect @xmath113 blocks ( i.e. , @xmath112 ) , but keep the repair process same as before , the above analysis follows and corresponding msr and mbr points are given by replacing @xmath10 in and with @xmath114 - for systems satisfying @xmath52 .",
    "( this follows as the repair from these @xmath11 blocks will not contribute to the cut between the source @xmath54 and dc . )",
    "one instance of bfr codes is given in the fig .",
    "[ fig : transpose ] .",
    "we set @xmath115 , and store the transpose of the first block s symbols in the second block .",
    "the repair of a failed node @xmath116 in the first block can be performed by connecting all the nodes in the second block and downloading only @xmath117 symbol from each node .",
    "that is , @xmath90 .",
    "further , we set @xmath118 , and use an @xmath119 $ ] mds code to encode file @xmath23 into symbols denoted with @xmath120 , @xmath121 .",
    "bfr data collection property allows for reconstructing the file , as connecting any @xmath86 nodes from each block assures at least @xmath122 distinct symbols .",
    "this code is a bfr - mbr code for @xmath123 ( scalar code ) , as the optimal file size in , i.e. , @xmath118 , is achieved with @xmath90 .",
    "a similar code to this construction is twin codes introduced in @xcite , where the nodes are split into two types and a failed node of a a given type is regenerated by connecting to nodes only in the other type .",
    "however , twin codes , as opposed to our model , do not have balanced node connection for data collection .",
    "in particular , dc connects to only ( a subset of @xmath63 nodes from ) a single type . on the other hand , bfr codes , for @xmath19 case , connects to @xmath86 nodes from each block .",
    "consider that the file @xmath124 of size @xmath0 contains 3 sub - files @xmath125 , @xmath126 and @xmath127 each of size @xmath128 .",
    "we encode these sub - files with @xmath129 $ ] regenerating code @xmath130 , represent the resulting symbols with @xmath131 for @xmath132 , @xmath133 for @xmath134 , and @xmath135 for @xmath136 .",
    "these symbols are grouped in a specific way placed into nodes within blocks as represented in fig .",
    "[ fig:3-block bfr - rc ] , where each node contains two symbols each coming from two of the different sets @xmath137 .",
    "we set the sub - code @xmath130 parameters as @xmath138 $ ] .",
    "assume block 1 is unavailable and its first node , which contains codeword @xmath139 , has to be reconstructed .",
    "due to underlying regenerating code , contacting @xmath140 nodes of block 2 and accessing to @xmath141 repairs @xmath142 .",
    "similarly , @xmath143 can be reconstructed from block 3 .",
    "any node failures can be handled similarly , by connecting to remaining 2 blocks and repairing each symbol of lost node by connecting @xmath144 nodes in a block . as we have @xmath145 , dc , connecting to 2 nodes from each block ,",
    "obtains @xmath146 symbols which has 4 different symbols from each of @xmath147 , @xmath148 and @xmath149 . as the embedded regenerating code",
    "has @xmath150 , all @xmath151 sub - files can be recovered .",
    "we generalize the bfr - rc construction above utilizing projective planes .",
    "first , the file @xmath23 of size @xmath0 is partitioned into @xmath71 parts , @xmath152 , @xmath153, ... ,@xmath154 .",
    "each part , of size @xmath128 , then encoded using @xmath155 $ ] regenerating code @xmath130 .",
    "we represent the resulting symbols with @xmath156 for @xmath157 .",
    "we then consider index of each part as a point in a @xmath76 projective plane .",
    "( indices of symbol sets @xmath158 and points @xmath159 of projective plane are used interchangeably in the following . )",
    "we perform the placement of each point in the system using this projective plane mapping .",
    "( the setup in fig .",
    "[ fig:3-block bfr - rc ] can be considered as a toy model .",
    "although the combinatorial design with blocks given by @xmath160 has projective plane properties , it is not considered as an instance of a projective plane . ) in this placement , total of @xmath161 nodes from each partition @xmath162 are distributed to @xmath163 blocks evenly , each block contains @xmath164 nodes where each node stores @xmath165 symbols .",
    "note that blocks of projective plane give the indices of parts @xmath166 stored in the nodes of the corresponding block in dss .",
    "that is , all nodes in a block stores symbols from unique subset of @xmath167 of size @xmath72 .",
    "overall , the system can store a file of size @xmath168 with @xmath169 blocks .",
    "we set the sub - code @xmath130 parameters as @xmath170 where we choose parameters to satisfy @xmath171 , @xmath172 and @xmath173 .",
    "_ node repair : _ consider that one of the nodes in a block is to be repaired .",
    "note that the failed node contains @xmath72 symbols , each coming from a distinct subfile s regenerating codeword .",
    "using projective planes property that any @xmath174 blocks has only @xmath117 point in common , any remaining block can help for in the regeneration of @xmath117 symbol of the failed node .",
    "furthermore , as any point has a repetition degree of @xmath163 , one can connect to @xmath175 blocks , @xmath176 nodes per block , to repair one symbol of a failed node .",
    "combining these two , node regeneration is performed by connecting @xmath177 blocks . substituting @xmath178 and @xmath80",
    ", connecting to @xmath179 blocks allows for reconstructing any node of a failed block .",
    "_ data collection : _ dc , connects @xmath180 nodes per block from all @xmath181 blocks , i.e. , a total of @xmath182 nodes each having encoded symbols of @xmath72 subfiles .",
    "these total of @xmath183 symbols include @xmath184 symbols from each subfile , from which all subfiles , hence the file @xmath23 , can be decoded .          to construct a bfr - msr code , we set each subcode @xmath130 as an msr code , which has @xmath185    this , together with , results in the following parameters of our bfr - msr construction @xmath186    we remark that if we utilize zigzag codes@xcite as the sub - code @xmath130 above , we have @xmath187 $ ] , and having @xmath188 requires connecting to @xmath117 node per block for repairs in our block model .",
    "on the other hand , product matrix msr codes @xcite can be used as the sub - code @xmath130 for any @xmath189 , for which we do not necessarily have @xmath190 .",
    "we observe from and that msr point is achieved for @xmath191 , meaning @xmath192 .      to construct a bfr - mbr code , we set each subcode @xmath130 as a product matrix mbr code @xcite , which has @xmath193    this , together with",
    ", results in the following parameters of our bfr - msr construction @xmath194    from and , mbr point is achieved for @xmath191 .",
    "in the above , we considered the cases where dc connects all @xmath10 blocks in file reconstruction . in order to support @xmath195",
    ", we consider employing gabidulin codes @xcite as an outer code similar to the constructions provided in @xcite .",
    "we briefly discuss our approach here .",
    "detailed results will be provided elsewhere .",
    "@xmath196_{q^{m}}$ ] gabidulin code @xmath197 , @xmath198 , has a codeword @xmath199 , where @xmath200 is a linearized polynomial over @xmath201 of @xmath202-degree @xmath203 with @xmath122 message symbols as its coefficients and @xmath204 are linearly independent over @xmath205 @xcite .      here , before partitioning the message into @xmath71 parts",
    ", we encode the file with a gabidulin code first , then partition the resulting codeword into @xmath71 parts and follow remaining steps as before . with this approach ,",
    "decoding the message at dc follows by obtaining at least @xmath122 independent evaluations from @xmath63 nodes , @xmath208 nodes per block from a total of @xmath114 blocks .",
    "as considered in @xcite , the number of such evaluations can be derived from the rank accumulation profile of the inherent msr / mbr codes @xmath130 as in the following @xmath209 note that because of projective plane property , connecting @xmath210 blocks would result in getting @xmath211 evaluations for @xmath212 points and @xmath213 evaluations for @xmath72 points .",
    "hence dc can decode the message by using an outer gabidulin code if @xmath214 similarly , for @xmath215 , decoding at dc is possible if @xmath216 with such an approach , for @xmath217 there are multiple collection possibilities for dc . for example , by connecting @xmath218 blocks dc can observe either a ) @xmath211 evaluations for @xmath219 , @xmath220 evaluations for @xmath221 points and @xmath222 evaluations for 1 point , or b ) @xmath211 evaluations for @xmath223 , @xmath220 evaluations for @xmath224 points and @xmath225 evaluations for 3 points .",
    "therefore , we need to ensure that minimum rank accumulations of all cases is at least @xmath122 .",
    "we introduced the framework of block failure resilient ( bfr ) codes that can recover data stored in the system from a subset of available blocks with a load balancing property .",
    "repairability is studied , file size bounds are derived , bfr - msr and bfr - mbr points are characterized , explicit code constructions for a wide set of parameters are provided .",
    "k.  v.  rashmi , n.  b.  shah , and p.  v.  kumar , `` optimal exact - regenerating codes for distributed storage at the msr and mbr points via a product - matrix construction , '' _ ieee trans .",
    "inf . theory _ ,",
    "57 , no .  8 , pp . 52275239 , aug .",
    "2011 .",
    "a.  s.  rawat , o.  o.  koyluoglu , n.  silberstein , and s.  vishwanath , `` optimal locally repairable and secure codes for distributed storage systems , '' _ ieee trans .",
    "inf . theory _",
    "60 , no .  1 ,",
    "212236 , jan . 2014 .",
    "g.  m.  kamath , n.  silberstein , n.  prakash , a.  s.  rawat , v.  lalitha , o.  o.  koyluoglu , p.  v.  kumar , and s.  vishwanath , `` explicit mbr all - symbol locality codes , '' in _ proc .",
    "2013 ieee international symposium on information theory ( isit 2013 ) _ , istanbul , turkey , jul .",
    "m.  sathiamoorthy , m.  asteris , d.  papailiopoulos , a.  g. dimakis , r.  vadali , s.  chen , and d.  borthakur , `` xoring elephants : novel erasure codes for big data , '' _ proc .",
    "vldb endow .",
    "_ , vol .  6 , no .  5 , pp . 325336 , mar",
    ". 2013 .",
    "d.  ford , f.  labelle , f.  i. popovici , m.  stokely , v .- a .",
    "truong , l.  barroso , c.  grimes , and s.  quinlan , `` availability in globally distributed storage systems , '' in _ proc .",
    "9th usenix symposium on operating systems design and implementation _ , vancouver , bc , oct .",
    "2010 .        k.  v.  rashmi , n.  b.  shah , and p.  v.  kumar , `` enabling node repair in any erasure code for distributed storage , '' in _ proc .",
    "2011 ieee international symposium on information theory ( isit 2011 ) _ , saint petersburg , russia , jul .",
    "2011 .",
    "t.  ho , m.  medard , r.  koetter , d.  r.  karger , m.  effros , j.  shi , and b.  leong , `` a random linear network coding approach to multicast , '' _ ieee trans .",
    "inf . theory _",
    "52 , no .",
    "10 , pp . 44134430 , oct ."
  ],
  "abstract_text": [
    "<S> in large scale distributed storage systems ( dss ) deployed in cloud computing , correlated failures resulting in simultaneous failure ( or , unavailability ) of blocks of nodes are common . in such scenarios , the stored data or a content of a failed node </S>",
    "<S> can only be reconstructed from the available live nodes belonging to available blocks . to analyze the resilience of the system against such block failures </S>",
    "<S> , this work introduces the framework of block failure resilient ( bfr ) codes , wherein the data ( e.g. , file in dss ) can be decoded by reading out from a same number of codeword symbols ( nodes ) from each available blocks of the underlying codeword . </S>",
    "<S> further , repairable bfr codes are introduced , wherein any codeword symbol in a failed block can be repaired by contacting to remaining blocks in the system . </S>",
    "<S> motivated from regenerating codes , file size bounds for repairable bfr codes are derived , trade - off between per node storage and repair bandwidth is analyzed , and bfr - msr and bfr - mbr points are derived . </S>",
    "<S> explicit codes achieving these two operating points for a wide set of parameters are constructed by utilizing combinatorial designs , wherein the codewords of the underlying outer codes are distributed to bfr codeword symbols according to projective planes . </S>"
  ]
}