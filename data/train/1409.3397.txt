{
  "article_text": [
    "linear protein structures are modeled as chains of atoms that are connected by bonds and mathematically as self - avoiding walks ( saw ) in dimension two or dimension three .",
    "their ( two or three ) dimensional shape is also often referred to as a conformation of the given protein structure . for a general background information on the vast topic of protein folding",
    "we refer to @xcite .",
    "we consider the following set of problems : given two different three dimensional conformations of a given linear protein structure .",
    "is it possible to fold , by well - defined folding moves , the one into the other while ensuring that intermediate conformations maintain the self avoidance property ? in games such as foldit ,",
    "see @xcite , it is usually a priori given to the player that such a set of folding moves is possible , since the game would otherwise be unfair , and it is left up to to the player to determine a set of moves .",
    "it is well known that this game becomes increasingly more difficult with increasing length of the protein chain . in a computer simulation of protein folding ,",
    "for instance for drug discovery , it may similarly be the case that one starts with a conformation that is easy to implement and contains the atoms in the right order , consistent with laboratory data , which then needs to be folded into a physically sensible shape , usually one of much reduced free energy .",
    "it is also then the case that with increasing length of the protein chain , to find the minimum energy conformation , or one that is close to a minimum energy conformation becomes rapidly more complicated and appears to be np - complete in a strict sense , see for instance @xcite .",
    "this paper concentrates on the three dimensional case , with simplified , but rather standard , computational chemistry assumptions on bond - lengths and angles .",
    "the set of allowable bond angles is retricted to be multiples of @xmath0 , and we assume for simplicity that all bonds have equal length .",
    "this allows us to model saw conformations as three dimensional self avoiding walks along the lattice @xmath1 . in this paper",
    "we exhibit a conformation that is woven so tightly together , as a ball of yarn , that it is completely rigid : every allowed folding move , defined in section 2.2 , results in self - intersections . presented with another conformation of this structure , and these folding rules , the foldit game",
    "would be then be clearly unfair !",
    "it will impossible to fold the shape given here into any other shape . as in @xcite",
    "we call such conformations also * unfoldable * since these can not be folded from a straight conformation .",
    "rigid conformations are special : they can not be folded into any other conformations .",
    "the set of unfoldable conformations is presumably much richer and is expected to consist of clusters of conformations that can be folded into one another but not into a straight conformation , see @xcite for the analogous discussion in dimension two , and discussed in more detail below .    *",
    "while our folding moves are perhaps overly restrictive the existence of rigid conformations illustrates why folding problems are intrinsically difficult with increasing length .",
    "* we conjecture that such rigid conformations can be found also when one adopts less restrictive but still physically realistic ranges of bond angles . in that case",
    "then the shape space , the space of conformations , is also disconnected and it would be of interest to find perhaps knot - based methods to describe the connected components of conformation space .",
    "our work is inspired by the two dimensional study presented in @xcite , see also @xcite .",
    "these papers @xcite reveal cluster of conformations that can be folded into one another but not folded from straight conformations .",
    "the key ingredient was supplied much earlier in @xcite which showed the existence of rigid two dimensional conformations , as shown in figure ( [ 2d figure ] ) .",
    "the first rigid two dimensional conformation found had 223 bonds , the shortest found so far still has over a 100 bonds ( 107 ) and the shortest one has not yet been found in dimension two .        the problem to * decide *",
    "if a given conformation is rigid tends to be comparatively easy , once the set of allowed moves is clearly described . to find such rigid conformations required a geometrical idea , although it may be possible to find them by brute force. the three dimensional conformation , consists of 461 bonds , presented in this paper is computer constructed and based on the ball of yarn idea , as we will describe in chapter 2 .",
    "the verification that this structure is rigid is similarly computer assisted .",
    "the required matlab code for its construction is contained in the appendix .",
    "we point out that a conformation that consists of 461 bonds is still very short on a biological scale : many protein chains consist of thousands of atoms .",
    "the authors gratefully acknowledge an inspring conversation with prof .",
    "ken a. dill , laufer center for physical and quantitative biology , stony brook university .",
    "we consider conformations that consist of chains of atoms with bonds , the connections between atoms , of equal and unit length .",
    "we also assume that the bonds are aligned with the primary x , y , and z , coordinate axes .",
    "by convention a conformation has a beginning atom at the origin @xmath2 , and the subsequent atoms at lattice locations in @xmath3 .",
    "viewed from the beginning atom every bond is oriented with a beginning atom and an end atom and can be in one of six possible orientations .",
    "we adopt the following convention + 1 ( -1 ) if the bond oriented in the positive ( negative ) x direction , + 2 ( -2 ) if the bond oriented in the positive ( negative ) y direction , and + 3 ( -3 ) if the bond oriented in the positive ( negative ) x direction .    with this convention a lattice conformation @xmath4 of length @xmath5",
    "is then given as a sequence of @xmath6 with each @xmath7 for @xmath8 .",
    "such a conformation then consists of @xmath9 atoms , with lattice locations that can then be produced from the sequence @xmath4 , by starting at the beginning atom and traversing the bond sequence , using vector addition .",
    "a lattice conformation @xmath4 is a self avoiding walk ( saw ) if it is properly embedded in @xmath10 , i.e. without self intersections .    for lattice conformations to decide if a conformation @xmath4 is a saw is straight forward :",
    "intersections can only occur at lattice points or at midpoints of bonds where various bonds could intersect .",
    "we use the following algorithm to determine if a @xmath4 is a saw : generate list of atoms locations by traversing the bonds in @xmath4 , verify if there are any duplicates in this list , by a sort on the integer coordinates of atoms . do the same for midpoints of bonds .",
    "if there are no duplicates in either of these two lists then @xmath4 is a saw .",
    "the critical definition used in this paper is that of an elementary folding move .    consider a conformation @xmath11 . consider the i - th bond @xmath12 and decompose @xmath13 as @xmath14 , where @xmath15 consists of the sequence @xmath16 and @xmath17 .",
    "replace @xmath12 by another bond @xmath18 and let @xmath19 . the * folding motion",
    "* we consider is to leave the atoms in @xmath15 fixed , to rotate the bond @xmath12 about its beginning atom to @xmath18 while translating the atoms in @xmath20 along while maintaining the orientation of the bonds in @xmath20 .",
    "we denote by @xmath21 @xmath22 the intermediary * non - lattice * conformation thus formed , a curve in @xmath10 .",
    "the justification for considering such a folding move to be elementary is that only a single bond changes orientation and we believe this to be a folding move of minimal internal energy change in the conformation .",
    "elementary folding moves can be composed over time to produce many more complicated folding moves : pivots , rotations , and complicated wiggly patterns .",
    "an important characteristic of these moves is that we assume that during any short time interval at most one such elementary folding move can occur which we believe to be a physically reasonable assumption .",
    "the crux of our rigidity algorithm is the following elementary observation .",
    "assume that @xmath23 is obtained from @xmath13 by an elementary folding move .",
    "let @xmath21 @xmath24 be the intermediary ( non - lattice ) configuration obtained by the elementary folding move .",
    "assume that @xmath13 is as saw .",
    "then : @xmath23 is a saw if and only if for each @xmath22 ea@xmath21 is self avoiding walk in @xmath10 .    in other words : @xmath23 is not a saw if and only if for some @xmath25 , @xmath22 , @xmath21 self intersects .",
    "a saw lattice conformation @xmath4 is * rigid * if and only if * every * @xmath26 obtained from @xmath4 by an elementary folding move is not a saw .",
    "the algorithm we implemented to verify if a given self avoiding conformation @xmath4 is rigid , and thus unfoldable , is simply to consider all conformations @xmath26 obtained from @xmath4 by an elementary folding move and to verify that @xmath26 is * not * self avoiding .",
    "this algorithm was implemented in the matlab code in the appendix .",
    "the conformation created by the authors consists of 461 bonds and is listed below using the orientation conventions described earlier .",
    "since we are constructing lattice conformation we need to describe the basic segment that we use , and is what we call * a spiral of length @xmath5*. such a spiral essentially consists of curve of length @xmath5 of each side in say the @xmath27 and @xmath28 direction which also winds itself in a screw like motion in the @xmath29 direction for @xmath5 steps .",
    "so , a spiral of length @xmath30 is rather small , while one of length @xmath31 is rather large in size .",
    "it is these spirals that are the analogs of a layer in lattice approximation of tightly woven ball of yarn .",
    "the various spirals are then connected by connection pieces whose only purpose is to connect subsequent spirals .",
    "the detailed conformation and its organization is shown in the listing below , and in figure ( [ 3d figure ] ) .",
    "the best way to view this structure is run the matlab code in the appendix which also visualizes the structure .",
    "the beginning atom of the conformation is in the center and the conformation wraps about the center location first in a spiral of length 4 , which is then connected to a spiral of length 8 .",
    "after that , the conformation works its way back to the center via a a spiral of length 6 to guarantee the endpoint is also be buried deep inside , and all open space in the interior is filled up so that both the beginning and the end point of the conformation are fully trapped .",
    "the precise bond sequence is the following , where we provide commentary of the left elucidating the overall structure :    .... b=[2 1 3 3 3 1 2 2 3 -1 -1 -2 -2 1 1 2 1 -3 -3 -3     4 spiral= -1 -2 -2 -2 -2 3 3 3 3 2 2 2 2 -1 -3 -3 -3 -3 -1 -2 -2             -2 -2 3 3 3 3     connection= 3 3 -1 -1 -1     8 spiral= -3 -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3             2 -1 -1 -1 -1 -1 -1 -1 -1 -3 -3 -3 -3 -3 -3 -3 -3 1 1             1 1 1 1 1 1 2 3 3 3 3 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1            -3 -3 -3 -3 -3 -3 -3 -3 2 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3              3 -1 -1 -1 -1 -1 -1 -1 -1 2 -3 -3 -3 -3 -3 -3 -3 -3 1 1             1 1 1 1 1 1 3 3 3 3 3 3 3 3 2 -1 -1 -1 -1 -1 -1 -1 -1 -3             -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 2 3 3 3 3 3 3 3 3            -1 -1 -1 -1 -1 -1 -1 -1 -3 -3 -3 -3 -3 -3 -3 -3 2 1 1             1 1 1 1 1 1 3 3 3 3 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1 2             -3 -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3    connection= -1 -1 -1 -1 -1 -1 -1 -3     6 spiral= -2 -2 -2 -2 -2 -2 1 -3 -3 -3 -3 -3 -3 2 2 2 2 2 2 3 3 3             3 3 3 1 -2 -2 -2 -2 -2 -2 -3 -3 -3 -3 2 2 2 2 2 2 1 3 3             3 3 -2 -2 -2 -2",
    "-2 -2 -3 -3 -3 -3 -3 -3 1 2 2 2 2 2 2 3             3 3 3 3 3 -2 -2 -2 -2 -2 -2 1 -3 -3 -3 -3 -3 -3 2 2 2 2              2 2 3 3 3 3 3 3 1 -2 -2 -2 -2 -2 -2 -3 -3 -3 -3 -3 -3    end=        2 2 2 2 2 2 3 3 3 3 3 -2 -2 -2 -2 -2 -3 -3 -3 -3 2 2 2 2              3 3 3 -2 -2 -2 -3 -3 2 3 -1 2 2 3 3 3 -2 -2 -2 -2 -3 -3             -3 -3 -1 2 2 1 -3 2 2 3 -1 -1 -3 -1 -2 1 -3 -2 -1 3 -1 ] ; ....",
    "in this paper we have shown the existence of three dimensional rigid , and hence unfoldable , linear lattice conformations .",
    "the conformation demonstrated here has 461 bonds and has the general structure of a tightly woven ball of yarn : its primary weaves are spiral shaped , and both ends of the conformation are tucked in near the center of the conformation .",
    "outstanding questions are :    * what is the length and shape of the shortest rigid lattice conformation ?",
    "* what does the shape space of lattice conformation look like ?",
    "* say that two conformations are connected if we can fold the one into the other using elementary moves . what is a typical size of connected components ? * how to estimate the algorithmic complexity of the question if a given conformation is unfoldable ? * do rigid examples exist that also exhibit some kind of mechanical rigidity ?",
    "we note that the example exhibited here does not seem to be particularly mechanically advantageous .",
    "we can of course ask similar questions when considering other sets of three dimensional bond - angles and bond - lengths .",
    "note that if we consider the continuous limit with arbitrarily small bond angles then simple rigidity disappears and every conformation is unfoldable .",
    "the questions then is what are physically realistic constraints on the folding process .",
    "a final open question is what kind of near term applications rigid of near rigid structures have if they are found in nature or produced in the lab .",
    "we can imagine for instance memory devices which use such properties .",
    ".... function pfinal1 ( )    % the unfoldable / rigid conformation : b=[2 1 3 3 3 1 2 2 3 -1 -1 -2 -2 1 1 2 1 -3 -3 -3 -1 -2 -2 -2 -2 ...      3 3 3 3 2 2 2 2 -1 -3 -3 -3 -3 -1 -2 -2 -2 -2 3 3 3 3 3 3 ...",
    "-1 -1 -1 -3 -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 2 ...      -1 -1 -1 -1 -1 -1 -1 -1 -3 -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 2 ...      3 3 3 3 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1 -3 -3 -3 -3 -3 -3 -3 -3 2 ...      1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1 2 ...      -3 -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 2 ...      -1 -1 -1 -1 -1 -1 -1 -1 -3 -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 ...      2 3 3 3 3 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1 -3 -3 -3 -3 -3 -3 -3 -3 ...      2 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1 2 ...      -3 -3 -3 -3 -3 -3 -3 -3 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 ...      -1 -1 -1 -1 -1 -1 -1 -3 -2 -2 -2 -2 -2 -2 1 -3 -3 -3 -3 -3 -3 ...      2 2 2 2 2 2 3 3 3 3 3 3 1 -2 -2 -2 -2 -2 -2 -3 -3 -3 -3 ...      2 2 2 2 2 2 1 3 3 3 3 -2 -2 -2 -2 -2 -2 -3 -3 -3 -3 -3 -3 1 ...      2 2 2 2 2 2 3 3 3 3 3 3 -2 -2 -2 -2 -2 -2 1 -3 -3 -3 -3 -3 -3 ...      2 2 2 2 2 2 3 3 3 3 3 3 1 -2 -2 -2 -2 -2 -2 -3 -3 -3 -3 -3 -3 ...      2 2 2 2 2 2 3 3 3 3 3 -2 -2 -2 -2 -2 -3 -3 -3 -3 2 2 2 2 3 3 3 ...",
    "-2 -2 -2 -3 -3 2 3 -1 2 2 3 3 3 -2 -2 -2 -2 -3 -3 -3 -3 -1 2 2 1 ...      -3 2 2 3 -1 -1 -3 -1 -2 1 -3 -2 -1 3 -1 ] ;                ac1=atoms(c1 ) ; all_atoms=1 ; ac2=atoms(c2,all_atoms ) ; ac12=intersect(ac1,ac2,'rows ' ) ; if ~isempty(ac12 )      n_atoms = size(ac12,1 ) ;      for k=1:n_atoms          atom = ac12(k , : ) ;          if to_plot              plot3(atom(1),atom(2),atom(3),'pc','linewidth',4 ) ;          end      end end    mbc1=midpoint_of_bond(c1 ) ; mbc2=midpoint_of_bond(c2 ) ; mbc12=intersect(mbc1,mbc2,'rows ' ) ; if ~isempty(mbc12 )      n_bonds = size(mbc12,1 ) ;      for k=1:n_bonds          mbond = mbc12(k , : ) ;          if to_plot              plot3(mbond(1),mbond(2),mbond(3),'or','linewidth',4 ) ;          end      end end                for k=1:n_atoms_to_do      direction = b(k ) ;      if abs(direction)==1 % x direction          endp = beginp+sign(direction)*[1 0 0 ] ;      elseif abs(direction)==2 % y direction          endp = beginp+sign(direction)*[0 1 0 ] ;      elseif abs(direction)==3 % z direction          endp = beginp+sign(direction)*[0 0 1 ] ;      else           error('unknown direction ' )      end      ac(k+1,:)=endp ;       beginp = endp ;        mbc= [ ] ; beginp = c.beginp ; b = c.b ; % says   where random walk begins for k=1:length(b )      direction = b(k ) ;      if abs(direction)==1 % x direction          endp = beginp+sign(direction)*[1 0 0 ] ;      elseif abs(direction)==2 % y direction          endp = beginp+sign(direction)*[0 1 0 ] ;      elseif abs(direction)==3 % z direction          endp = beginp+sign(direction)*[0 0 1 ] ;      else           error('unknown direction ' )      end      mbc(k,:)=(beginp+endp)/2 ;       beginp = endp ;          beginp = c.beginp ; b = c.b ; xmin=0;xmax=0 ; ymin=0;ymax=0 ; zmin=0;zmax=0 ; % says   where random walk begins for k=1:length(b )      direction = b(k ) ;      if abs(direction)==1 % x direction          endp = beginp+sign(direction)*[1 0 0 ] ;      elseif abs(direction)==2 % y direction          endp = beginp+sign(direction)*[0 1 0 ] ;      elseif abs(direction)==3 % z direction          endp = beginp+sign(direction)*[0 0 1 ] ;      else           error('unknown direction ' )      end           if nargin < 3         if abs(direction)==1             color='b- ' ;         elseif abs(direction)==2             color='r- ' ;         else             color='k- ' ;         end               end      plot3([beginp(1 ) endp(1)],[beginp(2 ) endp(2)],[beginp(3 ) endp(3 ) ] , ...",
    "color,'linewidth',3 ) ;               if print_bonds          text_str=[num2str(direction ) ] ;          if ( k>1 )              text(beginp(1),beginp(2),beginp(3),text_str ) ;          end          text_str=[num2str(k ) ] ;          if ( k>450 ) & & ( k<470 )              text(beginp(1),beginp(2),beginp(3),text_str ) ;          end          if k==1              text(beginp(1),beginp(2),beginp(3),'begin ' ) ;          end          if k==length(b )              text(endp(1),endp(2),endp(3),'end ' ) ;          end      end      beginp = endp ;      % defines what + -1,+-2,and + -3 means , makes labels for each segment ,      % describing segment number and direction   end grid on xlabel('x ' ) ylabel('y ' ) zlabel('z ' ) set(gcf,'renderer','zbuffer ' ) ; return    % % isrigid : checks if a conformation is rigid function [ is_isolated , k , bond_new , cnew]=isrigid(c ) % input : %      conformation c % output : %      is_isolated = 1 if the conformation is isolated %                   0 otherwise .",
    "% this function checks if the conformation c is isolated , the % simplest case to prove that a conformation is unfoldable .",
    "% isolated means that there is no bond that can be rotated by 90 degrees % and maintain the self avoidance property .",
    "% such rotations are the smallest motions possible .",
    "wiggles for instance % are compositions of such rotations .",
    "%   % precisely this is what the algorithm does : % for every bond check if this bond can be rotated % by 90 degrees .",
    "% let c_before be the conformation before the bond . during such a rotation %      c_before does not move .",
    "% let c_after be the conformation after the bond . during such a rotation %      c_after",
    "is assumed to moves only by a sequence of translations .",
    "%      by the displacement between the endpoint of the initial bond and the %      end point of the bond_new .",
    "the algorithm then consists in checking that : %      1 . the rotated bond ( bond_new )",
    "does not intersect c_before .",
    "the translation of c_after does not intersect the conformation %         [ c_before bond_new ] .",
    "% details to show in actuality the intermediate translations of c_after do   % not intersect [ c_before bond_new ] and that we therefore do not need to   % check separately :     % step 1 : let bond_before be the bond in the conformation just before   % the bond .",
    "let bond_after be the bond in the conformation just after the bond .",
    "% give the bond any of the possible orientations bond_new , so that % bond_new is not in the opposite orientation of bond_before .",
    "% bond_new is not in the opposite orientation of bond_after .",
    "% verify that the bond can be rotated to bond_new without intersecting % c_before .",
    "this amounts to checking that its end - atom does not % coincide with an atom on c_before .",
    "% step 2 : assume that the bond can be rotated to bond_new ( from step 1 ) % consider the new conformation c_new=[c_before bond_new ] .",
    "% translate c_after by the translation that translates its beginning % point to the end - atom of the new conformation c_new .",
    "% verify that during this translation no intersections with c_new occur .",
    "% the goal of the remainder is to understand what , if any , intersections with % c_new can occur during the motion .",
    "since the movement from bond to bond_new % is small , we expect that the only intersections that occur are % those that occur at the end of the motion , and not in the ' middle ' % of the motion .",
    "% % suppose that bond = 1 , then bond_new can be any of 2 , -2 , 3 and -3 .",
    "% assume that bond_new is equal to 2 .",
    "% % we need to have a formula for how c_after moves .",
    "% assume that beginning atom of the bond is at the origin [ 0 0 0 ] , % the end atom is then at the point [ 1 0 0 ] . after a rotation by angle % t",
    "( t between 0 and 90 degrees ) this end atom moves to % [ cos(t ) sin(t ) 0 ] .",
    "its displacement vector is equal to [ cos(t)-1 sin(t ) 0 ] .",
    "% all the atoms in c_after are displaced by the same amount .",
    "% since all the atoms are initially on % the lattice z^3=zxzxz the motion of an atom at location ( x , y , z ) during % the translation is equal to [ x+cos(t)-1,y+sin(t),z )   with t between % 0 and 90 .",
    "% the atoms in c_before are at lattice locations .",
    "the point   %             [ x+cos(t)-1,y+sin(t),z ]   % is at lattice locations only when y+sin(t ) is an integer . which % since y is an integer , sin(t )",
    "must then be an integer , % so t=0 or 90 degrees .",
    "so there are no intermediate collisions % ( t strictly between 0 and 90 degrees ) of an atom on c_after with % atoms on c_before .",
    "% we next need to see if such a moving atom can intersect a bond in % c_before .",
    "% bonds are line segments parallel to the coordinate axes of the form % [ a b c]+s v , v=+/-[1 0 0 ] , or + /-[0 1 0 ] or + /-[0 0 1 ] , 0<=s<=1 % with [ a b c ] on the lattice zxzxz . therefore",
    ": on a bond at least % two of the coordinates are integer .",
    "the point [ x+cos(t)-1,y+sin(t),z ]   % has two of its coordinates integer only if t=0 or 90 .",
    "% therefore the motion of atoms on c_after does not intersect bonds on   % c_before , except possibly at t=90 degrees .",
    "% we next need to see when bonds in c_after could possibly intersect % with c_before .",
    "%         is_isolated=1 ; b = c.b ; n_bonds = length(b ) ; bond_labels=[-3 -2 -1 1 2 3 ] ; to_plot=0 ; for k=1:n_bonds      bond = b(k ) ;      % step 1 : create the list of possible 90 degree rotations      new_bonds = setdiff(bond_labels,[bond -bond ] ) ;      % the new bonds are not allowed to be opposite to bond_before      if k>1                   new_bonds = setdiff(new_bonds ,- b(k-1 ) ) ;      end      % and are not allowed to be opposite to the bond_after      if k < n_bonds          new_bonds = setdiff(new_bonds ,- b(k+1 ) ) ;      end      for m=1:length(new_bonds ) % now we test all rotations          bond_new = new_bonds(m ) ;          if ( k>1 ) & & ( k < n_bonds )              c_before= [ ] ;              c_before.beginp = c.beginp ;              c_before.b = c.b(1:k-1 ) ;              c_atoms = atoms(c ) ;              c_mid= [ ] ;              c_mid.beginp = c_atoms(k , : ) ;              c_mid.b = bond_new ;              aw_before_and_mid= aw(c_before , c_mid , to_plot ) ;              if aw_before_and_mid==0 %                 % disp('found intersection c_before and bond_new ' ) ;                 % disp(['bond number = ' num2str(k ) ] ) ;              else % there was no intersection   between c_before and bond_new                  cnew= [ ] ;                  cnew.beginp=c_before.beginp ;                  cnew.b=[c_before.b bond_new ] ;                  cnew_atoms = atoms(cnew ) ;                  c_after= [ ] ;                  c_after.b = c.b(k+1:end ) ;                  c_after.beginp = cnew_atoms(end , : ) ;                  direction = cnew.b(end ) ;                  if abs(direction)==1 % fixed x - direction                      c_after.beginp = c_after.beginp+sign(direction)*[1 0 0 ] ;                  elseif abs(direction)==2 % fixed y - direction                      c_after.beginp = c_after.beginp+sign(direction)*[0 1 0 ] ;                  elseif abs(direction)==3 % fixed z - direction                      c_after.beginp = c_after.beginp+sign(direction)*[0 0 1 ] ;                  end                  aw_mid_and_after = aw(cnew , c_after , to_plot ) ;                  if aw_mid_and_after==0 %                     % disp('found intersection [ c_before bond_new ] c_after ' ) ;                      % disp(['bond number = ' num2str(k ) ] ) ;                  else % in this case aw_before_and_mid and aw_mid_and_after both equal 1                      disp('the new conformation is not isolated ' )                      disp(['bond number = ' num2str(k ) ] ) ;                      disp(['original bond orientation = ' num2str(bond ) ] ) ;                      disp(['rotated bond orientation = ' num2str(bond_new ) ] ) ;                      disp ( ' ' ) ;                      cnew.b=[cnew.b c_after.b ] ;                      is_isolated=0 ;                      % return ;                  end                               end          end          if ( k==1 ) % the bond is the first bond                          c_atoms = atoms(c ) ;              c_mid= [ ] ;              c_mid.beginp = c_atoms(k , : ) ;              c_mid.b = bond_new ;                           cnew= [ ] ;              cnew.beginp=c.beginp ;              cnew.b=[bond_new ] ;              cnew_atoms = atoms(cnew ) ;              c_after= [ ] ;              c_after.b = c.b(k+1:end ) ;              c_after.beginp = cnew_atoms(end , : ) ;              direction = cnew.b(end ) ;              if abs(direction)==1 % fixed x - direction                  c_after.beginp = c_after.beginp+sign(direction)*[1 0 0 ] ;              elseif abs(direction)==2 % fixed y - direction                  c_after.beginp = c_after.beginp+sign(direction)*[0 1 0 ] ;              elseif abs(direction)==3 % fixed z - direction                  c_after.beginp = c_after.beginp+sign(direction)*[0 0 1 ] ;              end              aw_mid_and_after = aw(cnew , c_after , to_plot ) ;              if aw_mid_and_after==0 %                 % disp('found intersection [ bond_new ] c_after ' ) ;                 % disp(['bond number = 1 ' ] ) ;              else                  % aw_mid_and_after is equal to 1                      disp('the new conformation is not isolated ' )                      disp(['bond number = ' num2str(k ) ] ) ;                      disp(['original bond orientation = ' num2str(bond ) ] ) ;                      disp(['rotated bond orientation = ' num2str(bond_new ) ] ) ;                      disp ( ' ' ) ;                      cnew.b=[cnew.b c_after.b ] ;                      is_isolated=0 ;                      % return ;              end          end          if ( k==n_bonds ) % the last one              c_before= [ ] ;              c_before.beginp = c.beginp ;              c_before.b = c.b(1:k-1 ) ;              c_atoms = atoms(c ) ;              c_mid= [ ] ;              c_mid.beginp = c_atoms(k , : ) ;              c_mid.b = bond_new ;              aw_before_and_mid= aw(c_before , c_mid , to_plot ) ;              if aw_before_and_mid==0 %                  % disp('found intersection c_before and bond_new ' ) ;                  % disp(['bond number = ' num2str(k ) ] ) ;              else                  disp('the new conformation is not isolated ' )                  disp(['bond number = ' num2str(k ) ] ) ;                  disp(['original bond orientation = ' num2str(bond ) ] ) ;                  disp(['rotated bond orientation = ' num2str(bond_new ) ] ) ;                  disp ( ' ' ) ;                  cnew= [ ] ;                  cnew.beginp=c_before.beginp ;                  cnew.b=[c_before.b bond_new ] ;                  is_isolated=0 ;                  % return ;              end          end      end end cnew= [ ] ;            return ;    % %   function val = fast_saw(c ) % input ; % c ; a conformation % output ; % val=1 if c is self avoiding %     0 if c is self intersecting .",
    "% usage : val = fast_saw(c ) % the function fast_saw only checks if atoms intersect .    val=1 ; all_atoms=1 ; ac = atoms(c , all_atoms ) ; % sortrows this arranges the atoms in lexicographical order % those that are in the same geometric position will be below   % each other in the sorted list . ac = sortrows(ac,[1 2 3 ] ) ; n_atoms = size(ac,1 ) ; for k=1:n_atoms-1      atom = ac(k , : ) ;      atom_next = ac(k+1 , : ) ;      if atom==atom_next          plot3(atom(1),atom(2),atom(3),'pc','linewidth',4 ) ;          val=0 ;      end       end return ....        j. m. bahi , c. guyeux , j - m nicod , l. philippe , _ protein structure prediction software generate two different sets of conformations . or the study of unfolded self - avoiding walks _ , 2013 , http://arxiv.org/abs/1306.1439      c. guyeux , n. m .- l .",
    "ct , w. biena , and j. bahi , _ is protein folding problem really a np - complete one ?",
    "first investigations .",
    "_ journal of bioinformatics and computational biology , 12(1):1350017 ( 14 pages ) , february 2014 .",
    "j. bahi , c. guyeux , k. mazouzi , and l. philippe .",
    "_ computational investigations of folded self - avoiding walks related to protein folding",
    ". _ journal of bioinformatics and computational biology , 47(*):246256 , december 2013 .",
    "thomasson , _ unraveling the mystery of protein folding _ , breakthroughs in bioscience , http://iop.vast.ac.vn/theor/conferences/smp/1st/kaminuma/ ... unravelingthemysteryofproteinfolding / protein.html , 2011 ."
  ],
  "abstract_text": [
    "<S> in this paper we show the existence of three dimensional rigid , and thus unfoldable , lattice conformations . </S>",
    "<S> the structure described here has 461 bonds . </S>",
    "<S> we provide a computer assisted proof of its rigidity . </S>",
    "<S> the existence of rigid two dimensional structures was shown earlier , see @xcite . </S>",
    "<S> this work answers question 8 in @xcite in the affirmative : rigid ( and hence unfoldable from a straight conformation ) self avoiding lattice walks exist also in dimension three . </S>",
    "<S> the existence of such rigid structures illustrates why protein folding problems are hard in dimension three : it may not possible to fold one conformation into another using a specific set of folding rules . </S>"
  ]
}