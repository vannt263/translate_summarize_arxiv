{
  "article_text": [
    "constraint satisfaction problems ( csps ) and constraint optimisation problems ( cops ) are defined on a set of variables representing problem entities .",
    "variables range on finite domains and are subject to a set of constraints that define the feasible configurations of variable - value assignments .",
    "a cop in addition has an objective function to be optimised . a solution to a csp or",
    "a cop is a variable - value assignment respecting all constraints , and optimising the objective function if present .",
    "when being solved with constraint programming , the solution process interleaves constraint propagation and search . a general way of building a search tree for solving csps and cops is called _ labelling_. labelling consists in selecting a variable and assigning it a single value from its domain . the variable and value selection",
    "are guided by heuristics .",
    "in particular , a value - selection heuristic ranks values in such a way that the most promising value is selected first .",
    "concerning value - selection heuristics , we consider the following situations .",
    "if the heuristic regards two or more values equally promising we say the heuristic produces a tie , consisting of equally ranked domain values . the definition of ties can be extended to the concept of _ heuristic equivalence _",
    "@xcite that considers equivalent all values that receive a rank within a given percentage from a value taken as reference .",
    "a similar situation occurs when different domain value heuristics are applied simultaneously . often a problem is composed of different aspects , for instance optimisation of profit , resource balance , or feasibility of some problem constraints . for each of those aspects",
    "a heuristic may be available .",
    "however , applying only one such heuristic often does not lead to a globally satisfactory solution .",
    "the goal is to combine these heuristics into one global domain value heuristic .",
    "many combinations are used in practise : ( @xmath0 ) to follow the heuristic that is regarded most important , and apply a different heuristic on values belonging to the tie , ( @xmath1 ) to define a new heuristic ( that might still contain ties ) as the ( weighted ) sum of the ranks that each heuristic assigns to a domain value or ( @xmath2 ) rank the domain values through a _",
    "multi - criteria _ heuristic . in this third case",
    ", a domain value has a higher rank than another domain value if it has a higher rank with respect to all heuristics .",
    "with respect to the multi - criteria heuristic , some values may be incomparable .",
    "these incomparable values together form a tie .",
    "the two cases considered above describe the same situation : the used heuristic(s ) define(s ) a _ partial order _ on the values ranks . in these cases , labelling chooses one of these values and branches on it . in traditional tree search values",
    "are chosen according to a deterministic rule , for instance lexicographic order .",
    "more recently , randomisation has been applied to these choices , see @xcite .",
    "we propose a simple , yet effective method that improves the efficiency of tree search in these situations : avoid making this choice and postpone the branching decision .",
    "postponing branching decisions is practically used upon backtracking in scheduling applications @xcite when the _ chronological heuristic _ is chosen .",
    "we select the activity @xmath3 with the smallest earliest start time @xmath4 and assign it to this value . upon backtracking ,",
    "we postpone the decision for @xmath3 and go on assigning a different activity .",
    "the motivation underlying this postponement is that after a schedule that assigns activity @xmath3 to @xmath4 is found ( or the search has failed ) , it is unlikely that assigning activity @xmath3 to @xmath5 would produce much better results .",
    "indeed , values @xmath4 and @xmath5 are equivalent ( i.e. , form a tie ) for the scheduling application .",
    "we propose here to apply decision postponement systematically in case of ties .",
    "therefore , equivalent values are grouped together in a sub - domain and a branching is performed on the whole sub - domain , while those that are clearly ranked by the heuristic are still assigned singularly to a variable .",
    "we call this method _ partitioning_. even this simple change can dramatically improve the efficiency of the tree search , as we will see later .",
    "in addition , partitioning has another important advantage : it enhances the bound computation ( in particular when used in conjunction with lds ) , as shown in @xcite where a strategy using partitioning is presented .",
    "moreover , partitioning generates sub - problems , to which any appealing search method may be applied , speeding up the solution process .",
    "however , partitioning has also some drawbacks .",
    "in particular , when constraint propagation heavily relies on variable instantiation , partitioning may result in less propagation",
    ". nevertheless , when we apply a fast solution method to the generated sub - problems , partitioning can still be favourable instead of labelling .",
    "although domain partitioning and labelling have been already used for solving csps and cops , to our knowledge there is no theoretical and practical study that indicates to practitioners when they should be applied . in this paper",
    "we discuss the effect of domain partitioning to search strategies that include depth - first search , limited discrepancy search and variants .",
    "the outline of this paper is as follows . in section  [ sc : background ]",
    "we define the concepts and the background of our work . in section  [ sc : theoretical ] a theoretical comparison of partitioning and labelling is given .",
    "this is followed by an experimental comparison in section  [ sc : experimental ] .",
    "we conclude with a discussion in section  [ sc : discussion ] .",
    "a constraint satisfaction problem ( csp ) consists of a set of variables @xmath6 with respective finite domains @xmath7 , and a set of constraints @xmath8 on these variables .",
    "a constraint optimisation problem ( cop ) is a csp together with an objective function to be optimised .",
    "we recall the concepts of labelling and partitioning , which are standard and widely used in search strategies for solving csps and cops . during the search for a solution , a search tree is built by subsequently taking branching decisions .",
    "a branching decision implies first a variable selection .",
    "then , _ labelling _ chooses a single value and assigns the variable to that value . upon backtracking another value",
    "is assigned until no more values can be found in the domain .",
    "formally , for variable @xmath9 , labelling generates the assignments @xmath10 where @xmath11 .    on the other hand _ partitioning _ is a technique that partitions the domain of a variable and branches on the resulting sub - domains , which may consist of only a single value . a very simple example , widely used in csps , is to split a numerical domain in two sets : the first containing values smaller or equal than a given threshold @xmath12 , the second containing values greater than @xmath12 .",
    "for example , if a variable @xmath13 ranges on a domain @xmath14 the partitioning can be @xmath15 .",
    "this domain can also be partitioned in different ways like @xmath16 .",
    "formally , for variable @xmath9 , partitioning generates the branching @xmath17 where @xmath18 is a partition of @xmath19 . in this work",
    ", the partition will be defined by the ties of the value - selection heuristic , i.e. each @xmath20 consists of all values belonging to the same tie .    constructing a search tree via labelling leads to the appearance of leaves only at depth @xmath21 .",
    "constructing a search tree via partitioning leads to a sub - problem at depth @xmath21 .",
    "if all assigned sub - domains are single - valued , this sub - problem is a leaf . otherwise , the sub - problem must be searched again , through labelling or partitioning . in this paper",
    ", we will always search the sub - problem via labelling .",
    "this means that the leaves of the search tree appear at depth between @xmath21 and @xmath22 .",
    "a search _ strategy _ defines the order in which the nodes of a search tree are being traversed .",
    "we consider in this paper only depth - first based search strategies .",
    "a depth - first based search strategy traverses the search tree by going from a node to one of its successors , until it reaches a leaf .",
    "examples of depth - first based search strategies are depth - first search ( dfs ) , limited discrepancy search ( lds ) @xcite and depth - bounded discrepancy search ( dds ) @xcite .    a discrepancy ( of a certain value )",
    "is a branching decision that is not selected first by the domain value ordering heuristic . for lds and dds , the cumulative discrepancy of a path from the root to a node may not exceed a given limit .",
    "lds gradually allows this limit to increase during search .",
    "dds follows lds until a certain depth , but allows only heuristic choices ( discrepancy 0 ) below this depth .",
    "the value of discrepancy of a branching decision is equal to the number of preceding branching decisions at the current tree node . in case of labelling ,",
    "the discrepancy increases with value 1 for each domain value . for partitioning ,",
    "the discrepancy value increases with the number of domain values in each sub - domain .",
    "below depth @xmath21 , i.e. inside a sub - problem , we say that no branching decision increases the discrepancy .",
    "this section shows , on a probabilistic basis , that partitioning is more beneficial than labelling in case the ( combined ) heuristic produces ties . in this section",
    "we do not consider constraint propagation .",
    "similar to the analysis of lds by harvey and ginsberg @xcite , we introduce a probability that the heuristic makes a correct choice .",
    "let the search tree consist of good and bad nodes .",
    "a node is called good if one of its successors is a ( optimal ) solution to the csp .",
    "otherwise , the node is called bad .",
    "the heuristic probability is the probability that at a good node , the heuristic selects a good node first .",
    "every following node selection has a similar probability of being a good node . for simplicity ,",
    "harvey and ginsberg assume that this probability remains constant throughout the search tree . to analyse dds",
    ", walsh @xcite introduces a similar probability , but explicitly assumes that it increases with the depth . in both cases ,",
    "binary search trees are considered , while our analysis is not restricted to binary trees .",
    "the analysis of partitioning with respect to labelling should be based on the sole fact that the heuristic produces ties .",
    "hence , we may assume that the heuristic probability remains constant throughout the search tree .",
    "the heuristic probability is denoted by @xmath23 , corresponding to assigning value @xmath24 to variable @xmath9 .",
    "note that @xmath25 , and we explicitly assume @xmath26 if the heuristic prefers @xmath27 over @xmath28 . if the heuristic produces a tie for @xmath9 , including values @xmath27 and @xmath28 , then @xmath29 .    let a search tree be defined by a certain variable ordering and domain value heuristic .",
    "a leaf @xmath30 of the search tree consists of the instantiation of all @xmath21 variables : @xmath31 thus , a leaf can either be a ( optimal ) solution or not .",
    "the probability of a leaf @xmath30 being successful is @xmath32        a.  labelling b.  partitioning    when we apply a certain search strategy to a tree defined by labelling or by partitioning , leaves are visited in a different order .",
    "an example of the probability distribution along the leaves of the different search trees is given in figure  [ fig : probs ] .",
    "the trees correspond to 2 variables , both having 3 domain values .",
    "the branches are ordered from left to right following the heuristic s choice .",
    "the heuristic probability of success for is shown for each branch .",
    "note that the heuristic produces a tie , consisting of two values , for the first variable .",
    "labelling follows the heuristic on single values , while partitioning groups together values in the tie . for dfs and lds , the order in which the leaves are visited",
    "is given , together with the cumulative probability of success .",
    "note that for every leaf , partitioning always has a higher ( or equal ) cumulative probability of success than labelling .",
    "this will be formalised in theorem  [ th : compare ] .",
    "note also that in a sub - problem generated by partitioning all leaves have the same probability of success .",
    "this property follows immediately from the construction of the sub - problems . as a consequence ,",
    "any search strategy applied to this sub - problem will be equally likely to be successful . in practise ,",
    "we will therefore use dfs to solve the sub - problems .",
    "[ th : compare ] for a fixed variable ordering and a domain value ordering heuristic , let @xmath33 be the search tree defined by labelling , and let @xmath34 be the search tree defined by partitioning , grouping together ties .",
    "let the set of the first @xmath35 leaf nodes visited by labelling and partitioning be denoted by @xmath36 and @xmath37 respectively .",
    "if @xmath33 and @xmath34 are traversed using the same depth - first based search strategy then @xmath38    for @xmath39 , ( [ eq : part_label ] ) obviously holds .",
    "let @xmath35 increase until labelling and partitioning visit a leaf with a different probability of success , say @xmath40 and @xmath41 respectively .",
    "if such leaves do not exist , ( [ eq : part_label ] ) holds with equality for all @xmath35 .",
    "assume next that such leaves do exist , and let @xmath40 and @xmath41 be the first leaves with a different probability of success . as the leafs are different , there is at least one different branching decision between the two . the only possibility for",
    "this different branching decision is that we have encountered a tie , because partitioning and labelling both follow the same depth - first based search strategy .",
    "this tie made partitioning create a sub - problem @xmath42 , with @xmath43 , and @xmath44 .",
    "if labelling made a branching decision different from partitioning , with a higher probability of being successful , then partitioning would have made the same decision .",
    "namely , partitioning and labelling follow the same strategy , and the heuristic prefers values with a higher probability .",
    "so it must be that a different branching decision made by labelling has a smaller or equal probability of being successful with respect to the corresponding decision made by partitioning .",
    "however , as we have assumed that @xmath45 , there must be at least one different branching decision made by labelling , that has a strictly smaller probability of being successful .",
    "thus for the current @xmath35 , ( [ eq : part_label ] ) holds , and the inequality is strict .    as we let @xmath35 increase further , partitioning will visit first all leaves inside @xmath42 , and then continue with @xmath40 . on the other hand , labelling will visit leaves @xmath30 that are either in @xmath42 or not , all with @xmath46 .",
    "however , as partitioning follows the same search strategy as labelling , partitioning will either visit a leaf of a sub - problem , or a leaf that labelling has already visited ( possibly simultaneously ) . in both cases , @xmath47 .",
    "next we measure the effect that the number of ties has on the performance of partitioning with respect to labelling . for this reason ,",
    "we vary the number of ties in a fixed search tree of depth 30 . a branch - width of 3",
    "will be used in all cases , as this allows ties , and a larger branch - width would make it impractical to measure effectively the performance of labelling . depending on the occurrence of a tie , the heuristic probability @xmath48 of branch @xmath0 will be chosen either    * @xmath49 , @xmath50 , @xmath51 ( no tie ) , or * @xmath52 , @xmath53 , @xmath51 ( tie ) .",
    "our method assumes a fixed variable ordering in the search tree , and uniformly distributes the ties among them .",
    "this is reasonable , since in practise ties can appear unexpectedly .",
    "we have investigated the appearance of 10% , 33% and 50% ties out of the @xmath21 branching decisions that lead to a leaf . in figure",
    "[ fig : versus].a and b. , we report the cumulative probability of success for labelling and partitioning using dfs and lds until 50000 leaves . note that in figure  [ fig : versus].a the graphs for labelling with 33% and 50% ties almost coincide along the x - axis .",
    "the figures show that in the presence of ties partitioning may be much more beneficial than labelling , i.e. the strict gap in ( [ eq : part_label ] ) can be very large .        a.  using dfs b.  using lds",
    "this section presents computational results of two applications for which we have compared partitioning and labelling .",
    "the first is the travelling salesman problem ( tsp ) , the second the partial latin square completion problem ( plscp ) .",
    "we first explain the reason why we chose these two problems among a set of problems considered to test the methods .",
    "the tsp is an optimisation problem where the propagation is quite poor and the heuristic used is very informative but produces ( not very large indeed ) ties . instead , plscp is a constraint satisfaction problem whose model contains many _ alldifferent _ constraints whose filtering algorithm is particularly effective .",
    "the heuristic used is quite good and sometimes produces ties .",
    "therefore , the two problems have opposite structure and characteristics .",
    "for the tsp partitioning is very suitable since the only drawback of the method , i.e. , the decreased effect of propagation , does not play any role . on the contrary ,",
    "the plscp is a problem whose characteristics are not suitable for the partitioning .",
    "therefore , we will point out also the weakness of the method . for each application we state the problem , define the applied heuristic and report the computational results . for both problems",
    "we apply lds as search strategy .",
    "the applications are implemented on a pentium 1ghz with 256 mb ram , using ilog solver  5.1 @xcite and cplex  7.1 @xcite .",
    "the travelling salesman problem ( tsp ) is a traditional np - hard combinatorial optimisation problem .",
    "given a set of cities with distances ( costs ) between them , the problem is to find a closed tour of minimal length visiting each city exactly once .    for the tsp",
    ", we have used a constraint programming model and a heuristic similar to  @xcite based on reduced costs .",
    "sub - problems are being solved using dfs , since all leaves can be considered to have equal probability of being successful .    to compare labelling and partitioning fairly",
    ", we stop the search as soon as an optimal solution has been found .",
    "for the considered instances , the optimal values are known in advance .",
    "the proof of optimality should not be taken into account , because it is not directly related to the probability of a branch being successful .",
    "the results of our comparison are presented in table  [ tb : tsp ] .",
    "the instances are taken from tsplib @xcite and represent symmetric tsps . for labelling and partitioning ,",
    "the table shows the time and the number of fails ( backtracks ) needed to find an optimum . for labelling , the discrepancy of the leaf node that represents the optimum is given . for partitioning ,",
    "the discrepancy of the sub - problem that contains the optimum is reported .",
    "for all instances but one , partitioning performs much better than labelling .",
    "both the number of fails and the computation time are substantially less for partitioning .",
    "observe that for the instance ` dantzig42 ' labelling needs less fails than partitioning , but uses more time .",
    "this is because partitioning solves the sub - problems using dfs .",
    "partitioning can visit almost three times more nodes in less time , because it lacks the lds overhead inside the sub - problems .",
    ".results for finding optima of tsp instances ( not proving optimality ) . [ cols=\"<,>,>,^,>,>,^ \" , ]     the constraint programming model is straightforward , using _",
    "constraints on the rows and the columns , with maximal propagation .",
    "the maximal _ alldifferent _ propagation ( achieving hyper - arc consistency @xcite ) is of great importance for solving the plscp . with less powerful propagation , the considered instances are practically unsolvable .    as heuristic",
    "we have used a simple first - fail principle for the values , i.e. values that are most constrained are to be considered first .",
    "therefore the rank of a value is taken equal to the number of the value s occurrences in the partial latin square , and a higher rank is regarded better . hence",
    ", labelling selects the value with the highest rank , and uses lexicographic ordering in case of ties .",
    "partitioning selects the sub - domain consisting of all values having the highest rank .",
    "the sub - problems are again being solved using dfs . for both labelling and partitioning ,",
    "constraint propagation is applied throughout the whole search tree .    in table",
    "[ tb : latin ] we report the performance of labelling and partitioning on a set of partial latin square completion problems .",
    "it follows the same format as table  [ tb : tsp ] .",
    "the instances are generated with the pls - generator @xcite .",
    "following remarks made in @xcite , our generated instances are such that they are difficult to solve , i.e. they appear in the transition phase of the problem .",
    "the instances ` b.o25.h@xmath54 ' are balanced @xmath55 partial latin squares , with @xmath54 unfilled entries ( around 38% ) .",
    "instances ` u.o30.h@xmath54 ' are unbalanced @xmath56 partial latin squares , with @xmath54 unfilled entries ( around 38% ) .",
    "although partitioning performs much better than labelling on average , the results are not homogeneous .",
    "for some instances labelling has better performances w.r.t . partitioning .",
    "this can be explained by the pruning power of the _ alldifferent _ constraint . since partitioning branches on sub - domains of cardinality larger than one , the _ alldifferent _ constraint will remove less inconsistent values compared to branching on single values , as is the case with labelling . using partitioning",
    ", such values will only be removed inside the sub - problems . however , even in instances where partitioning is less effective , the difference between the two strategies is not so high , while on many instances partitioning is much more effective .    as was already mentioned in section  [ ssc : tsp ] ,",
    "partitioning effectively applies dfs inside the sub - problems . for a number of instances",
    ", partitioning finds a solution earlier than labelling , although making use of a higher number of fails .",
    "we have seen both theoretically and experimentally that partitioning is to be preferred over labelling , when some domain values are incomparable with respect to one or more heuristics .",
    "there are several additional benefits to partitioning , of which we would like to mention two .",
    "thereafter we discuss various drawbacks of partitioning .",
    "the sub - problems that are created by partitioning may be subject to any applicable search method .",
    "in particular , when the sub - problems are large , one could apply a local search method .",
    "another possibility is to apply a ( mixed - integer ) ( non)linear programming solver .",
    "this allows the user to effectively combine several solution methods to solve the problem .    for cops ,",
    "proving optimality is often more difficult than finding a good solution .",
    "partitioning can sometimes be useful to prove optimality earlier . in @xcite , partitioning is applied to a domain value ordering heuristic based on reduced costs , together with lds . for that particular case ,",
    "the partitioning scheme allows a very effective bound computation .    on the other hand , branching on sub - domains instead of single values decreases the effect of constraint propagation .",
    "this is a serious drawback of partitioning , as we have seen in section  [ ssc : pls ] .",
    "it also affects the bound computation of cops . as was suggested in @xcite , ` additive bounding ' procedures may be helpful in this case .",
    "finally , we have only considered partitioning on depth - first based search strategies .",
    "we are currently investigating the possibility to effectively apply partitioning to breadth - first based search strategies as well .        c.p .",
    "gomes , b.  selman , and h.  kautz , ` boosting combinatorial search through randomization ' , in _ proceedings of the fifteenth national conference on artificial intelligence ( aaai98 ) _ , pp .",
    "431437 , ( 1998 ) .",
    "gomes and d.  shmoys , ` completing quasigroups or latin squares : a structured graph coloring problem ' , in _ proceedings of the computational symposium on graph coloring and its generalizations _ , ( 2002 ) .",
    "a.  lodi , m.  milano , and l.m .",
    "rousseau , ` discrepancy based additive bounding ' , in _ ninth international conference on the principles and practice of constraint programming ( cp03 ) _ , volume 2833 of _ lncs _ , pp .",
    "springer verlag , ( 2003 ) .",
    "m.  milano and w.j .",
    "van hoeve , ` reduced cost - based ranking for generating promising subproblems ' , in _ eighth international conference on the principles and practice of constraint programming ( cp02 ) _ , volume 2470 of _ lncs _ , pp . 116 .",
    "springer verlag , ( 2002 ) ."
  ],
  "abstract_text": [
    "<S> solution techniques for constraint satisfaction and optimisation problems often make use of backtrack search methods , exploiting variable and value ordering heuristics . in this paper , we propose and analyse a very simple method to apply in case the value ordering heuristic produces ties : * postponing the branching decision*. to this end , we group together values in a tie , branch on this sub - domain , and defer the decision among them to lower levels of the search tree . </S>",
    "<S> we show theoretically and experimentally that this simple modification can dramatically improve the efficiency of the search strategy . </S>",
    "<S> although in practise similar methods may have been applied already , to our knowledge , no empirical or theoretical study has been proposed in the literature to identify when and to what extent this strategy should be used . </S>"
  ]
}