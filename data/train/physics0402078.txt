{
  "article_text": [
    "in a large number of internet traffic measurements many authors detected self - similarity@xcite . self - similarity is usually attributed with heavy - tailed distributions of objects at the traffic sources , e.g. sizes of transfered files@xcite or time delays in user interactions@xcite .",
    "recently the dynamical origins of self - similarity also attract increasing attention .",
    "chaotic maps are known to generate fractal properties@xcite , and it has been shown , that the exponential backoff algorithm of the tcp protocol can produce long range dependent traffic under some special circumstances .",
    "veres@xcite emphasized the chaotic nature of the transport , and fekete@xcite gave an analytical explanation that this chaoticity is in close relation with the loss rate at highly utilized buffers due to packet drops .",
    "guo@xcite gave a markovian analysis of the backoff mechanism , and showed , that the self - similarity can be observed only at very high loss rates .",
    "in this paper we study a lossless network , where the traffic sources are _ not _ heavy - tailed distributed . even though we observe self - similar traffic , which is generated by the communicating tcps themselves .",
    "we show , that the random switching between the destinations of the flows together with the complex dynamics of interacting tcps can lead to long range dependency .",
    "the interaction between tcps at the buffers leads to backoff phases in the individual tcps causing fractal traffic in an environment where the loss rate is much below the lower bound of self - similarity .",
    "the outline of the paper is the following : first we introduce the concept of real and effective loss .",
    "then we present a simple lossless model network , where self - similar traffic is observed , however the necessary conditions discusssed in the literature cited above , are not satisfied .",
    "next we show that similar scenario can be found in real networks as well .",
    "finally we conclude our results .",
    "in the internet traffic many individuals use a common , finite resource to transmit information . if the resources are exhausted ( e.g. routers are congested )",
    ", data throughput is not possible .",
    "therefore data transmitters should avoid congestion on shared information routes .",
    "most of today s computer programs use similar algorithm to avoid congestion : they apply basicly the same tcp protocol with slight differences . the common concept in every",
    "tcp is , that the data sending rate must be adapted to the actually available resources@xcite .",
    "every tcp starts with a blind measuring phase ( slow start ) , which exponentially reaches the maximum throughput rate .",
    "if the route , where tcp sends its data is stationary utilized , the algorithm works in a high throughput ",
    "slow adaption phase ( congestion avoidance ) .",
    "the sending rate is varied around a high value by slowly increasing and rapidly decreasing it .",
    "since every sent packet and its received acknowledgement continuously measure the transmission possibilities , this phase is very stable and can adapt to slowly varying situations@xcite .    if the route gets highly loaded , the tcp tries to clear the congestion by decreasing the sending rate .",
    "if the congestion is so high , that the tcp can not guess the proper sending rate ( acknowledgements do not arrive in the timeout period ) , the algorithm enters a very slow sending phase ( exponential backoff ) . in this phase due to the lack of information an exponentially slowing algorithm",
    "is applied to try to find a new possible sending rate : the last package is resent after exponential increasing time intervals until an acknowledgement received or a maximum time interval is reached .    in this paper",
    "we concentrate on the backoff phase of the tcp .",
    "we will show , that due to its blind nature , in this phase the tcp can feel higher loss rates as it really is .    by the blindness of the tcp we mean the consequence of karn s algorithm@xcite , which governs the backoff phase . under normal transmission conditions tcp operates in slow start or in congestion avoidance mode . in these modes",
    "the tcp estimates the optimal sending rate from the arrival time of the acknowledgements ( ack ) by calculating the average round trip time ( srtt ) and its average deviation from the mean ( mdev ) .",
    "after each received ack the tcp estimates the retransmission timeout ( rto ) .",
    "if this timeout is exceeded between sending a packet and receiving an acknowledgement for it , the tcp retransmits the packet assumed to be lost ( by real loss or timeout ) .",
    "in this situation tcp applies the so called karn s algorithm .",
    "the karn s algorithm specifies that the acknowledgments for retransmitted data packets can not be used to approximate the sending rate . since for a received ack packet",
    "one can not decide if it is the ack of the original or of the retransmitted packet , the round trip time ( rtt ) and so the sending rate can not be estimated .",
    "the rtt can be calculated only for those packets , which are not retransmitted .",
    "so the tcp retransmits the packet and doubles the rto calculated from the previous flow - informations ( backoff phase ) .",
    "if the retransmitted packet timeouts again , the rto is doubled and the packet is retransmitted again . the rto is increased up to a maximal value defined in the protocol .",
    "the tcp leaves the backoff phase only if the rtt can be estimated without ambiguity : the tcp must receive the acknowledgements of two consecutive sent packets .",
    "we will show a situation where this method reports reasonably higher loss rate for the tcp as it really is .",
    "we distinguish the loss into real or virtual .",
    "_ real _ loss is referred to dropped packets which either are not arrived to the destination or the acknowledgment for it do not arrive to the sending tcp .",
    "we call a loss to be virtual if the acknowledgment arrives after the retransmission timeout ( rto ) period , so the packet is retransmitted due to a spurious timeout",
    ". the _ effictive _ loss is assembled from the real and virtual losses .",
    "this distinction is important , since real loss emerges at highly congested buffers or at low quality lines ( e.g. radio connections ) .",
    "these situations can be solved by improving the hardware conditions .",
    "in contrast , high virtual loss can evolve also under very good hardware conditions from heavily fluctuating background traffic . on a route with several routers , where the packets can stay in a long queue",
    ", round trip times can change in a wide range depending on the queuing time .",
    "the queuing time depends on the saturation of the buffers on the route .",
    "if the background traffic fills the buffers at a varying rate , the queueing time , and so the round trip time varies also .",
    "bursty background traffic can fill the buffers rapidly to a high value , and after that can leave it to be cleared out .",
    "if the round trip time increases to such a high value due to a rapid filling up , that it becomes larger than the retransmission timeout value , a virtual loss occurs . after a burst which caused the virtual loss",
    "the clearing out of the buffer will lead to a shorter round trip time , which decreases the rto value also .",
    "so for the next burst event the rto is not large enough that the tcp can receive the ack packet .",
    "so another virtual loss occurs without really loosing the sent packets .",
    "we will show in a model network and in a real measurement , that long range dependent traffic can emerge from the virtual losses due to the bursty background , however , real packet loss rate is so low , that one would expect a scalable simple traffic rate .",
    "in this section we present a simple model network , which shows self - similar traffic . our model differs in several aspects from previous studies in the literature excluding the known reasons of self - similarity .    in our model",
    "three hosts transfer fixed sized files to each other through a router .",
    "all hosts transfer files with the same size .",
    "the topology of the model is shown in fig .",
    "[ fig - topol ] . from each numbered sites of the network",
    "a tcp flow is initiated to one of the other numbered sites .",
    "each tcp flow passes through the router @xmath0",
    "using full duplex connections , so the flow of the acknowledgements do not interfere with the corresponding tcp data flow .",
    "however data from other tcps must share the same buffers and lines with acknowledgements .",
    "we have chosen the network to be practically lossless : the buffer length in the router was set so large , that it is very improbable that tcp flows fill them .",
    "all the six buffers for the three full duplex lines are large enough to store all the files transfered between the hosts at a moment .",
    "there is no external packet loss on the lines as well .",
    "we will study the traffic properties on a _ line _ connecting a chosen host with the router .",
    "so the packet flows we want to analyze are initiated from a fixed chosen host and they are built up from several successive tcp flows .    in this topology",
    "the traffic is not always self - similar .",
    "the throughput of packets on a line can be regular if the destination of the individual tcp flows is chosen on a regular way .",
    "an example is shown in fig .",
    "[ fig - throughput]a , where the tcp flows has been generated with the following simple rule : from the host numbered by @xmath1 ( @xmath2 ) the tcp sends packets to host @xmath3 . after a file has been transmitted , the host starts a new tcp flow _ immediately _ , there is no external random delay between the flows as it would be if we took the user behavior into account@xcite .",
    "under such regular sending rules the tcps can utilize the available bandwidth and the traffic has a scalable periodic pattern . in fig .",
    "[ fig - throughput]a we show the congestion window for a host .",
    "we have implemented this simple network in the ns-2 simulator ( version number : 2 .",
    "the link parameters are : link rate 1mbps , delay 1ms .",
    "file size of a tcp flow was 1000 packet .",
    "the receiver window was much larger than the file sizes .",
    "we have used the reno version of tcp .    if we introduce stochasticity in the sending rules we arrive at a non - scalable , long range dependent traffic .",
    "we applied the following rules to generate self - similar packet transport .",
    "all hosts send fixed size files to each other .",
    "each host uses the same file size .",
    "if a host starts a new tcp , it randomly chooses to which host to send the file .",
    "after a transmission is completed , the host chooses the next destination immediately .",
    "the next destination is chosen randomly again without silent period between consecutive tcp flows . in fig .",
    "[ fig - throughput]b we show , that the stochasticity inhibits the tcps to synchronize and the packet transport becomes irregular .",
    "the size of the transfered files was chosen not too large to hinder the tcps to adapt to each other .",
    "we investigate now the irregular packet traffic if it shows self - similarity or not .",
    "self - similarity can be tested by investigating the second order statistics of the traffic@xcite .",
    "consider a weakly stationary process @xmath4 , with constant mean and autocorrelation function @xmath5 .",
    "let @xmath6 denote the @xmath7 aggregated series of @xmath4 .",
    "the process @xmath4 is self - similar if @xmath8 , and @xmath4 is second order self - similar if @xmath9 has the same variance and autocorrelation as @xmath4 .",
    "the sign @xmath10 expresses the fact that the equality can be satisfied only in a stochastic sense , exact equation can only be used for abstract mathematical objects .",
    "we have performed self - similarity test by using the variance time method . in fig .",
    "[ fig - aggtimemod ] we plot the variance of the aggregated time series of the packets which scales as @xmath11 the fitted line in the figure indicates hurst exponent @xmath12 showing that the time series is self - similar since @xmath13 .",
    "we emphasize again , that the time series under consideration is built up from several consecutive tcp flows .",
    "if a traffic is self - similar it shows properties which differs from ones of memory - less ( markovian ) processes : the dynamics of the system shows a strong history dependence .",
    "this long range dependence in the time evolution manifests itself typically in heavy - tailed distributions .",
    "a distribution is heavy - tailed if asymptotic decay of the distribution is slow : a power - law with exponent less than two . due to the always existing upper bounds of the measured data it is enough if the decay holds in the last decades below the maximum value : @xmath14,\\ { \\rm and }   \\ n>2.5\\ .\\ ] ] such distributions are called heavy - tailed , since occurrence of values much larger than the mean value of the observable @xmath15 is not negligible in contrast to commonly used distributions as gaussian or exponential .",
    "however in measured time series it can happen , that from the tail we can not detect so many events as it is needed to plot a smooth distribution function . in these cases",
    "it is favorably to work with the _ cumulative _ distribution @xmath16 , which has an asymptotic behavior as @xmath17 .",
    "therefore one should use the inverse cumulative function @xmath18 to fit the parameter @xmath19 on the logarithmic plot .",
    "now we want to investigate if the long range dependency shows up in the traffic .",
    "we consider only the case when a destinations of the tcps were chosen randomly . in fig .",
    "[ fig - decaymod ] we plot the inverse cumulative distribution of the packet inter arrival time on a down link .",
    "the distribution shows a slow decay with @xmath20 which indicates that the fluctuating traffic has long silent periods .",
    "a power law decaying fluctuation can be characterized by the hurst exponent if the traffic is viewed as an on - off process .",
    "the silent periods are the off intervals of the process .",
    "the hurst parameter is known for this type of process@xcite : @xmath21 , which gives similar result as calculated from the variance time plot in fig .",
    "[ fig - aggtimemod ] .    in the following",
    "we look for the origin of the long range dependence found above . in our model",
    "the topology and the tcp flow generating rules are chosen such a way , that the link / source conditions for self - similarity@xcite are excluded . in network - side models the adaptive nature of tcp , namely the tcp backoff state mechanism is pointed out as a main origin of such behavior@xcite .",
    "we investigate now if there is a close relation between the self - similarity of the traffic , and backing off of the tcp .    in the backoff",
    "phase tcp retransmits the lost packet and doubles the rto .",
    "tcp keeps track of the doubling times by a backoff variable @xmath22 . in the non - backoff phases",
    "@xmath23 , and in backoff @xmath22 shows how many times the rto counter has been doubled .",
    "due to karn s algorithm the rto is doubled until two consecutive packet receives its acknowledgement .",
    "first we recall shortly , that a tcp flow in the backoff phase produces heavy - tailed statistics in the packet inter arrival time@xcite .",
    "a tcp in a given backoff state waits for a period @xmath24 between two packet sending attempts .",
    "the @xmath22-th backoff state occurs only after @xmath22 successive packet losses .",
    "let s denote the packet retransmission probability ( effective loss ) with @xmath25 .",
    "the probability of @xmath22 consecutive packet retransmission is @xmath26 .",
    "hence the probability of a silent period @xmath27 due to backoffs , decays as @xmath28 , where @xmath29 .",
    "next we repeat the main idea of a markovian chain model for backoff states@xcite and show , that the statistics of backoff states delivers the average effective loss probability @xmath25 .",
    "let denote the probability @xmath30 that the tcp is in a @xmath22 deep backoff . in a simplified markovian framework one can estimate the @xmath30 by the transition probabilities between backoff states as follows ( for a detailed matrix representation see @xcite .",
    "the rto value is doubled if one of two successive packets do not receive ack and is retransmitted .",
    "if the retransmission probability is @xmath25 the transition probability to a deeper backoff is @xmath31 .",
    "this yields a backoff probability decay to be @xmath32 and one can read off the average loss probability from the gradient of the semilogarithmic plot of @xmath30 versus @xmath22 .",
    "we emphasize here , that the loss probability measured by the probability of backoff states is the effective loss felt by the tcp .",
    "this probability can be much larger as the real loss .",
    "this is the case in our model , since the real loss is below @xmath33 , however , the effective loss is about @xmath34 . a typical backoff distribution for our stochastic model is shown in fig .",
    "[ fig - backstatmod ] .",
    "this gives us the possibility to demonstrate the connection between long range dependency and the backoff distribution .",
    "one compares the probability @xmath25 calculated from the backoff statistics and the inter packet arrival time decay factor @xmath19 calculated from the packet traffic time series .",
    "the two value agrees as @xmath35 , hence the long range dependency is caused mainly by the backoff mode of the tcp ( and not by other external reasons as e.g. long range distributed user interaction ) .",
    "we have demonstrated the connection between the long range dependency , self - similarity and backoff mechanism .",
    "finally we search for the origins of backing off the tcp .",
    "our model by construction excludes the known origins of self - similarity : the tcp flows follow each other immediately and transfer data at a given rate without external silent periods as e.g. would be the case with user - generated interactive flow .",
    "the transfered file sizes are constant .",
    "the buffer lengths are much above the critical chaotic threshold value@xcite .",
    "the only stochasticity is in the switching between the destinations of the tcp flows .",
    "this irregularity introduces some unpredictability in the data flow .",
    "if this unpredictability is high , the tcp estimation for the available sending rate is false .",
    "the consequences of unpredictability has been studied from many aspects@xcite , however all the previous studies require a case when the high real loss probability ( due to small buffers or external loss ) hinders the tcp to make sufficient predictions .    here",
    "we presented a model , where the stochastic choosing of destination itself pushes tcp into the backoff phase and generates self - similar traffic .",
    "how can this happen ?",
    "tcp operates in backoff , if the ack packet arrive after the limit set by rto .",
    "the rto value is calculated from the traffic continuously , using an average over some time - window .",
    "if the traffic is bursty , with silent periods comparable with size of the averaging window , the tcp can not adapt to the rapid changes in the traffic . in our model",
    "we detect heavy bursts in the queue lengths in the router .",
    "since tcps changes the destination randomly , it can happen , that after a silent period a buffer will be fed by one or two tcp",
    ". if these tcps are in slow start , the feeding of a buffer can be exponential fast .",
    "the queue lengths can hence grow very rapidly .",
    "if a queue gets longer , packets arriving in this queue must wait longer .",
    "a rapid change in the queue length can cause a so rapid change in the round trip time of a packet , that the ack for this packet arrives after the rto expires .",
    "so large fluctuations in the queue length ( background traffic ) can cause a series of virtual losses and backing off the tcp .    in fig .",
    "[ fig - queuetime ] we show a typical queue length ",
    "time plot , where the large fluctuations cause backoff phase in a tcp .",
    "there is a clear relation between the increasing queue length and the evolution of backoff states .    since in our model",
    "only the heavily fluctuating background traffic can back off a tcp , we can conclude to identify the fluctuating background as a source of self - similarity .",
    "this self - similarity is a self - generated one , originating from the improper synchronization of hosts , which continuously send data to each other by using many successive tcp flows .",
    "in this section we present active measurement results which show similar results in a real network environment as found in the previous section in a small model scenario .",
    "the time evolution of a long tcp flow on a transcontinental connection was followed on the ip level by tcpdump@xcite and on the kernel level by a slightly modified linux kernel from the 2.2.x series .",
    "the modified kernel gave us the possibility to follow directly the internal tcp variables _ in situ _ for a real network environment .",
    "on the transcontinental line chosen for the measurement typically many tcp connections share the same route giving a highly fluctuating background traffic . additionally on the long line with many routers",
    "it is possible that the packets of our tcp flow stacks in filled queues .",
    "so the round trip time can fluctuate in a very wide range resulting many backoff states .",
    "figure  [ fig - backtimemea ] shows a very congested time interval , where many backoff states were observed .",
    "here we mention , that in contrast to the tcp implementations of ns-2 , the backoff variable @xmath22 of the linux kernel can have larger values than 6 .",
    "as described in the previous section the self - similarity is characterized by the hurst parameter , if the stochastic process under consideration is weakly stationary . to satisfy this condition",
    "we restrict our analysis only for some parts ( time intervals ) of the whole measurement . in the time range under study",
    "the highly congested traffic showed self - similar nature .",
    "the variance time plot for the aggregated time series of packet arrivals is plotted in figure  [ fig - vartimmea ] , from which we can read off the hurst parameter @xmath36 . in fig .",
    "[ fig - statintmea ] we show the statistical distribution of packet inter arrival times , which show an @xmath37 decay giving a similar value for the hurst parameter as calculated from the variance time plot .    since we do not have total control over the whole internet",
    ", we can not prove rigorously that the observed self - similarity is the consequence exclusively of the fluctuations in the background traffic as it is in the simulation scenario presented in the previous section .",
    "however it is possible to show , that  as in the simulation  there is a close relation between the inter packet time statistics and the backoff statistics under such conditions where the real packet loss is low , indicating self - generated self - similarity .",
    "here we investigate first , what was the loss rate at the line . in end - to - end measurements packet loss",
    "can be easily detected by analyzing tcpdump data .",
    "but to gain this direct information about the traffic , one needs special rights on the origin of the tcp flow and on the destination as well .",
    "this ideal condition is given usually only for a very restricted number of routes .",
    "in most cases one can monitor the network traffic only on one side as it was the case in our measurement .",
    "we applied the algorithm of benko et.al.@xcite with some improvement to detect packet losses from tcpdump data , and to decide if the packet is lost really or timeout occurred .",
    "the algorithm is the following .",
    "an effective loss occurs , if a packet is resent .",
    "a resent packet begins with the same serial number as the original packet , so we have to count the number of packets , whose sequence number occurred more than once in the tcp flow .",
    "we used timestamps to avoid the wrapped sequence number problem .",
    "detecting real loss events is a bit more tricky .",
    "a sent packet is probably lost if the tcp receives duplicate acknowledgement .",
    "duplicate acks are sent by the receiving tcp if a packet with higher sequence number has arrived .",
    "however this can happen due to changes in the packet order also , therefore the tcp waits a little and retransmits the packet only if packet order switching is very improbable .",
    "hence for detecting real loss events we have to count the number of resent packets , which are sent due to receiving of duplicate acks .",
    "previously we mentioned that the background traffic during the whole measurement can not be approximated by weakly stationary stochastic processes and for analysis one has to consider only parts of the data . in this",
    "parts the flow can be characterized by static parameters e.g. the loss ratio is constant in time .",
    "these intervals can not be too short to have enough data for statistical considerations . in fig .",
    "[ fig - lossmea ] we plot the loss probability versus time for the whole measurement .",
    "one can see long plateaus however there are non - stationary regimes as well .",
    "in the following we restrict ourself only for the longest stationary range .",
    "we investigated the statistics of the backoff states for this time regime from the data logged by the modified linux kernel .",
    "we found , that the distribution shows an exponential decay as it follows from the markovian description presented in the previous section .",
    "the fig .",
    "[ fig - backstatmea ] shows the decay of the probability of the backoff states .",
    "the slope of the fitted line indicates a loss probability @xmath38 felt by the tcp .",
    "this loss rate is consistent with the asymptotic decay of the packet inter - arrival times ( fig .",
    "[ fig - statintmea ] ) and with the hurst parameter of the aggregated traffic ( fig .",
    "[ fig - vartimmea ] ) .",
    "so the close relation between the backoff states and the self - similarity of the traffic holds . the next question is , if the tcp is backed off due to real packet losses or the packets where only delayed and timed out . in fig .",
    "[ fig - lossbackmea ] we compare the loss ratio from the backoff statistics ( @xmath39 ) with the loss probability calculated from the tcpdump output .",
    "we find , that the average loss probability felt by the tcp equals with the _ real plus virtual _",
    "( effective ) loss and not with the _ real _ loss alone . here",
    "the difference between the two type of losses is crucial , since the real loss is smaller than @xmath40 , the lower bound of loss probability , which gives self - similar traffic , but the effective loss is higher .",
    "we have demonstrated in a model network and in a real measurement how tcp can generate self - similar traffic itself .",
    "we showed that at very low packet loss rate the congestion control mechanism detects false packet losses if the background traffic is bursty . on this fluctuating background traffic tcp",
    "responds with backoff states .",
    "the switching between backoff and congestion avoidance phases introduces further fluctuations into the overall traffic , which results additional backoffs .",
    "this self - generated burstiness evolves to self - similarity however the network properties indicate simple , easily predictable traffic .    in the future we focus on the self - generation of the burstiness , what are the exact conditions for emergence of self - similarity in perfect network",
    "g. v. thanks the support of the hungarian science fund otka t037903 and t 032437 .",
    "p. thanks the support of the hungarian science fund otka d37788 , t34832 , t42981 .",
    "k.park , g.kim and m.crovella , `` on the relationship between file sizes , transport protocols , and self - similar network traffic '' , in proceedings of the international conference on network protocols , pp .",
    "171 - 180 , oktober 1996"
  ],
  "abstract_text": [
    "<S> self - similarity in the network traffic has been studied from several aspects : both at the user side and at the network side there are many sources of the long range dependence . </S>",
    "<S> recently some dynamical origins are also identified : the tcp adaptive congestion avoidance algorithm itself can produce chaotic and long range dependent throughput behavior , if the loss rate is very high . in this paper </S>",
    "<S> we show that there is a close connection between the static and dynamic origins of self - similarity : parallel tcps can generate the self - similarity themselves , they can introduce heavily fluctuations into the background traffic and produce high effective loss rate causing a long range dependent tcp flow , however , the dropped packet ratio is low . </S>"
  ]
}