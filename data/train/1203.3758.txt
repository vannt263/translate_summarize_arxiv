{
  "article_text": [
    "the title of this paper is a bit of a pun . on the one hand , we are concerned with certain natural questions about _ automatic sequences _ : sequences over a finite alphabet where the @xmath0th term is expressible as a finite - state function of the base-@xmath1 representation of @xmath0 . on the other hand , we are interested in answering these questions purely mechanically , in an _ automated _ fashion .",
    "let @xmath2 be an infinite sequence over a finite alphabet @xmath3 .",
    "then @xmath4 is said to be _",
    "@xmath1-automatic _ if there is a deterministic finite automaton @xmath5 taking as input the base-@xmath1 representation of @xmath0 , and having @xmath6 as the output associated with the last state encountered . in this case",
    ", we say that @xmath5 _ generates _ the sequence @xmath4 .",
    "for example , in figure  [ fig1 ] , we give an automaton generating the well - known thue - morse sequence @xmath7 .",
    "the input is @xmath0 , expressed in base @xmath8 , and the output is the number contained in the state last reached .",
    "thus @xmath9 is the sum , modulo @xmath8 , of the binary digits of @xmath0 .    #",
    "1#21.0#1    [ fig1 ]    for at least 25 years , researchers have been interested in the algorithmic decidability of assertions about automatic sequences .",
    "for example , in one of the earliest results , honkala @xcite showed that , given an automaton , it is decidable if the sequence it generates is ultimately periodic .",
    "recently , allouche et al .   found a different proof of honkala s result using a more general technique . using this technique",
    ", they were able to give algorithmic solutions to many classical problems from combinatorics on words such as    given an automaton , is the generated sequence squarefree ? or overlapfree ?",
    "we write @xmath10 = a(i)$ ] , and we let @xmath11 $ ] denote the _ factor _ of length @xmath0 beginning at position @xmath12 in @xmath4 .",
    "a sequence is said to be _ squarefree _ if it contains no factor of the form @xmath13 , where @xmath14 is a nonempty word , and is said to _ overlapfree _ if it contains no factor of the form @xmath15 , where @xmath16 is a single letter and @xmath17 is a possibly empty word .",
    "the technique of allouche et al .",
    "is at its core , very similar to work of bchi , bruyre , michaux , villemaire , and others , involving formal logic ; see , e.g. , .",
    "the basic idea is as follows : given the automaton @xmath5 , and some predicate @xmath18 we want to check , we alter @xmath5 by a series of transformations to a new automaton @xmath19 that accepts the base-@xmath1 representations of those integers @xmath0 for which @xmath18 is true .",
    "then we can check the assertion `` @xmath20 '' simply by checking if @xmath19 accepts anything ( which can be done by a standard depth - first search on the underlying directed graph of the automaton ) .",
    "we can check the assertion `` @xmath21 '' by checking if @xmath19 accepts everything .",
    "and we can check assertions like `` @xmath18 holds for infinitely many @xmath0 '' by checking if @xmath19 has a reachable cycle from which a final state is reachable .",
    "using this idea , allouche et al .",
    "were able to show to reprove , purely mechanically using a computer program , the classic theorem of thue @xcite that the thue - morse sequence @xmath22 is overlapfree .",
    "more recently , the technique has been applied to give decision procedures for other properties of automatic sequences .",
    "for example , charlier et al .   showed that it can be used to decide if a given @xmath1-automatic sequence    * contains powers of arbitrarily large exponent ; * is recurrent ; * is uniformly recurrent .",
    "a sequence is said to be _ recurrent _ if every factor that occurs , occurs infinitely often .",
    "a sequence @xmath4 is said to be _ uniformly recurrent _ if it is recurrent and furthermore for each finite factor @xmath23 occurring in @xmath4 , there is a constant @xmath24 such that two consecutive occurrences of @xmath23 are separated by at most @xmath24 positions .",
    "more recently , variations of the technique have been used to    * compute the critical exponent ; * compute the initial critical exponent ; * decide if a sequence is linearly recurrent ; * compute the diophantine exponent .",
    "( for definitions of these terms see @xcite . )",
    "in we have the following theorem :    if we can express a property of a @xmath1-automatic sequence @xmath4 using quantifiers , logical operations , integer variables , the operations of addition , subtraction , indexing into @xmath4 , and comparison of integers or elements of @xmath4 , then this property is algorithmically decidable .",
    "[ logic ]    let us outline how the decision procedure works .",
    "first , the input to the decision procedure : an automaton @xmath25 generating the @xmath1-automatic sequence @xmath4 . here",
    "* @xmath26 is a nonempty set of states ; * @xmath27 ; * @xmath3 is the output alphabet ; * @xmath28 is the transition function ; * @xmath29 is the initial state ; and * @xmath30 is the output mapping .    in this paper",
    ", we assume that the automaton takes as input the representation of @xmath0 in base @xmath1 , _ starting with the least significant digit _ ; we call this the _ reversed representation _ of @xmath0 and write it as @xmath31 .",
    "we allow leading zeroes in the representation ( which , because of our convention , are actually trailing zeroes ) .",
    "thus , for example , @xmath32 and @xmath33 are both acceptable representations for @xmath34 in base @xmath8 .",
    "we might also need to encode pairs , triples , or @xmath35-tuples of integers .",
    "we handle these by first padding the reversed representation of the smaller integer with trailing zeroes , and then coding the @xmath35-tuple as a word over @xmath36 .",
    "for example , the pair @xmath37 could be represented in base-@xmath8 as @xmath38[0,0][1,1][0,1][1,0 ] , \\ ] ] where the first components spell out @xmath39 and the second components spell out @xmath40 .",
    "of course , there are other possible representations , such as @xmath38[0,0][1,1][0,1][1,0][0,0],\\ ] ] which correspond to non - canonical representations having trailing zeroes ; these are also permitted .    rather than present a detailed proof",
    ", we illustrate the idea of the decision procedure in the proof of the following new result :    the following problem is algorithmically decidable : given two @xmath1-automatic sequences @xmath4 and @xmath41 , generated by automata @xmath42 and @xmath43 , respectively , decide if @xmath4 is a shift of @xmath41 ( that is , decide if there exists a constant @xmath44 such that @xmath45 = { \\bf y}[n+c]$ ] for all @xmath46 .",
    "we first create an nfa @xmath5 that accepts the language @xmath47 \\not= { \\bf y}[n+c ] \\rbrace .\\ ] ] to do so , on input @xmath48 , @xmath5    * guesses @xmath49 nondeterministically ( perhaps with trailing zeroes appended ) , * simulates @xmath42 on @xmath50 , * adds @xmath0 to @xmath44 and computes the base-@xmath1 representation of @xmath51 digit - by - digit `` on the fly '' , keeping track of carries , as necessary , and simulates @xmath43 on @xmath52 , and * accepts if the outputs of both machine differ .",
    "we now convert @xmath5 to a dfa @xmath19 , and change final states to non - final ( and vice versa ) .",
    "then @xmath19 accepts the language @xmath53 = { \\bf y}[n+c ] \\text { for all } n \\geq 0 \\rbrace.\\ ] ] thus , @xmath4 is a shift of @xmath41 if and only if @xmath19 accepts any word , which is easily checked through depth - first search .",
    "as we can see , the size of the automata involved depends , in an unpleasant way , on the number of quantifiers needed to state the logical expression characterizing the property being checked , because existential quantifiers are implemented through nondeterminism , and universal quantifiers are implemented through nondeterminism and complementation ( which is implemented in a dfa by exchange of the role final and non - final states ) .",
    "thus each new quantifier could increase the current number of states , say @xmath0 , to @xmath54 using the subset construction .",
    "if the original automata have at most @xmath55 states , it follows that the running time is bounded by an expression of the form @xmath56 where @xmath57 is a polynomial and the number of exponents in the tower is one less than the number of quantifiers in the logical formula characterizing the property being checked .",
    "this extraordinary computational complexity raises the natural question of whether the decision procedure could actually be implemented for anything but toy examples .",
    "luckily the answer seems to be yes  at least in some cases  as we will see below .",
    "a word @xmath23 is _ bordered _ if it begins and ends with the same word @xmath14 with @xmath58 ; otherwise it is _",
    "unbordered_. an example in english of a bordered word is entanglement . a bordered word is also called _ bifix _ in the literature , and unbordered words are also called _ bifix - free _ or _",
    "primary_.    bordered and unbordered words have been actively studied in the literature , particularly with regard to the ehrenfeucht - silberger problem ; see , for example , , just to name a few .    currie and saari studied the unbordered factors of the thue - morse sequence @xmath22 .",
    "they proved that if @xmath59 , then @xmath22 has an unbordered factor of length @xmath0 .",
    "( also see ( * ? ? ? * lemma 4.10 and problem 4.1 ) . )",
    "however , this is not a necessary condition , as @xmath60 =   { \\tt 0011010010110100110010110100101},\\ ] ] which is an unbordered factor of length @xmath61 .",
    "currie and saari left it as an open problem to give a complete characterization of the integers @xmath0 for which @xmath22 has an unbordered factor of length @xmath0 .",
    "the following theorem and proof , quoted practically verbatim from , shows that , more generally , the characteristic sequence of @xmath0 for which a given @xmath1-automatic sequence has an unbordered factor of length @xmath0 , is itself @xmath1-automatic :    let @xmath62 be a @xmath1-automatic sequence .",
    "then the associated infinite sequence @xmath63 defined by @xmath64 is @xmath1-automatic .",
    "the sequence @xmath4 has an unbordered factor of length @xmath0    iff    @xmath65 such that the factor of length @xmath0 beginning at position @xmath66 of @xmath4 is unbordered    iff    there exists an integer @xmath67 such that for all possible lengths @xmath68 with @xmath69 , there is an integer @xmath12 with @xmath70 such that the supposed border of length @xmath68 beginning and ending the factor of length @xmath0 beginning at position @xmath66 of @xmath4 actually differs in the @xmath12th position    iff    there exists an integer @xmath67 such that for all integers @xmath68 with @xmath69 there exists an integer @xmath12 with @xmath70 such that @xmath71 \\not= { \\bf x}[j+n - l+i]$ ] .",
    "now assume @xmath4 is a @xmath1-automatic sequence , generated by some finite automaton .",
    "we show how to implement the characterization given above with an automaton .",
    "we first create an nfa that given the @xmath72 guesses the base-@xmath1 representation of @xmath12 , digit - by - digit , checks that @xmath73 , computes @xmath74 and @xmath75 on the fly , and checks that @xmath71 \\not= { \\bf x}[j+n - l+i]$ ] . if such an @xmath12 is found , it accepts .",
    "we then convert this to a dfa , and interchange accepting and nonaccepting states .",
    "this dfa @xmath42 accepts @xmath72 such that there is no @xmath12 , @xmath70 such that @xmath71 = { \\bf x}[j+n - l+i]$ ] .",
    "we then use @xmath42 as a subroutine to build an nfa @xmath43 that on input @xmath76 guesses @xmath68 , checks that @xmath69 , and calls @xmath42 on the result .",
    "we convert this to a dfa and interchange accepting and nonaccepting states to get @xmath77 .",
    "finally , this @xmath77 is used as a subroutine to build an nfa @xmath78 that on input @xmath0 guesses @xmath66 and calls @xmath77 .",
    "the characteristic sequence of these integers @xmath0 is therefore @xmath1-automatic .",
    "since the proof is constructive , one can , in principle , carry out the construction to get an explicit description of the lengths for which the thue - morse sequence has an unbordered factor .",
    "doing so results in the following theorem :    there is an unbordered factor of length @xmath0 in @xmath22 if and only if the base-@xmath8 representation of @xmath0 ( starting with the most significant digit ) is not of the form @xmath79 .",
    "the proof of this theorem is purely mechanical , and it involves performing a sequence of operations on finite automata .",
    "the second author wrote a program in c++ , using his own automata package , to perform these operations .",
    "there are four stages to the computation , which are described in detail below .",
    "* stage 1 * + let @xmath80 be the automaton of figure  [ fig1 ] generating the thue - morse sequence @xmath22 .",
    "stage 1 takes @xmath80 as input and outputs an automaton @xmath42 , where @xmath42 accepts @xmath81 if and only if @xmath23 is the base-@xmath8 representation of some @xmath82 , where @xmath83 \\ne \\textbf{t}[n+j - l+i ]   \\}.\\ ] ]    the size of @xmath42 was only 102 states . however , since the input alphabet for @xmath42 is of size @xmath84 , a considerable amount of complexity is being stored in the transition matrix .",
    "stage 1 passed all 1.3 million tests meant to ensure that @xmath42 corresponds to @xmath85 . +",
    "* stage 2 * + the purpose of stage 2 is to remove the variable @xmath12 by simulating it . the resulting machine , after being negated , accepts @xmath86 iff the length @xmath0 factor of @xmath87 starting at index @xmath66 has a border of length @xmath68 .",
    "so stage 2 produces the automaton @xmath43 , which is the negation of the result of simulating @xmath12 .",
    "more formally , @xmath43 accepts a word @xmath88 if and only if @xmath23 is the base-@xmath8 representation of some @xmath89 , where @xmath90    the size of @xmath43 after subset construction was 8689 states , and it minimized down to 127 states .",
    "the output of stage 2 passed all 1.6 million tests meant to ensure that @xmath43 corresponds to @xmath91 . +",
    "* stage 3 * + the purpose of stage 3 is to remove @xmath68 by simulating it . by the end of stage 3 , most of the work has already been done .",
    "the output of stage 3 , @xmath77 , accepts an input word @xmath92 if and only if @xmath23 is the base-@xmath8 representation of some @xmath93 , where @xmath94 or , in other words @xmath95    the size of @xmath77 after subset construction was 1987 states , and it minimized down to 263 states .",
    "the output of stage 3 passed all 1.9 million tests meant to ensure that @xmath77 corresponds to @xmath96 . +",
    "* stage 4 * + finally , stage 4 simulates @xmath66 on @xmath77 and negates the result .",
    "so the output of stage 3 is an automaton that accepts the binary representation of a positive integer @xmath97 if and only if the thue - morse word has no unbordered factor of length @xmath0 .",
    "formally put , the automaton @xmath78 produced by stage 4 accepts a word @xmath98 if and only if @xmath23 is the base-@xmath8 representation of some @xmath99 , where @xmath100    the size of @xmath78 after subset construction is 2734 states , and it minimized to 7 states .",
    "@xmath78 accepts the reverse of @xmath101",
    ". therefore the thue - morse word has an unbordered factor of length @xmath0 if and only if the base-2 representation of @xmath0 ( starting with the most significant digit ) is not of the form @xmath101 .",
    "the total computation took 9 seconds of cpu time on a 2.9ghz dell xps laptop .    here",
    "are some additional implementation details .    in order to implement the needed operations on automata , we must decide on an encoding of elements of @xmath102 .",
    "we could do this by performing a perfect shuffle of each individual word over @xmath103 , or by letting the alphabet itself be represented by @xmath1-tuples .",
    "the decision represents a tradeoff between state size and alphabet size .",
    "we used the latter representation , since ( a ) it makes the algorithms considerably easier to implement and understand and ( b ) decreases the number of states needed .",
    "it was mentioned earlier how many tests were passed in each stage . in order to make sure that the final automaton is what we expect , a number of tests are run after each stage on the output of that stage .",
    "for example , let @xmath104 be an automatic sequence .",
    "the testing framework requires a c++ function which given @xmath0 computes @xmath105 $ ] .",
    "before any operations are done , the automaton given for @xmath104 is tested against the c++ function to make sure that they match for the first 10,000 elements .",
    "then , at each stage before stage 4 the resulting automaton is tested to give confidence that the operations on the automata are giving the desired results .    for example , after stage 2 of computing the set of lengths for which there exists an unbordered factor of an automatic sequence @xmath104 , we expect the machine @xmath43 to accept the language @xmath91 , where @xmath106=\\textbf{x}[n+j - l+i]\\}\\ ] ] this is then tested by making sure @xmath43 accepts @xmath107 if and only if @xmath108 for all @xmath109 .",
    "these tests were invaluable to debugging , and provide confidence in the final result of the computation .",
    "finally , we have to address the issue of multiple representations .",
    "it is easy to forget that automata accept words in @xmath110 , and not integers . for some operations , such as complement and intersection ,",
    "it is crucial that if one binary representation is accepted by the automaton , then all binary representations must be accepted .",
    "we also applied our decision procedure above to two other famous sequences : the rudin - shapiro sequence @xcite and the paperfolding sequence .    for a word @xmath111",
    ", we define @xmath112 to be the number of ( possibly overlapping ) occurrences of @xmath23 in the ( ordinary , unreversed ) base-@xmath8 representation of @xmath0 .",
    "thus , for example , @xmath113 .",
    "the _ rudin - shapiro _ sequence @xmath114 is then defined to be @xmath115 .",
    "it is a @xmath8-automatic sequence generated by an automaton of four states .",
    "the _ paperfolding sequence _",
    "@xmath116 is defined as follows : writing @xmath117 as @xmath118 for some @xmath119 some @xmath120 , and some @xmath121 , we have @xmath122 .",
    "it is a @xmath8-automatic sequence generated by an automaton of four states .",
    "the rudin - shapiro sequence has an unbordered factor of every length .",
    "we applied the same technique discussed previously for the thue - morse sequence .    here is a summary of the computation :",
    "stage 1 : 269 states + stage 2 : 85313 states minimized to 1974 + stage 3 : 48488 states minimized to 6465 + stage 4 : 6234 states .",
    "+ the stage 4 nfa has 6234 states .",
    "we were unable to determinize this automaton directly ( using two different programs ) due to an explosion in the number of states created . instead , we reversed the nfa ( creating an nfa for @xmath123 ) and determinized this instead .",
    "the resulting dfa has 30 states , and upon minimization , gives a @xmath124-state automaton accepting all strings .",
    "the paperfolding sequence has an unbordered factor of length @xmath0 if and only if the reversed representation @xmath125 is rejected by the automaton given in figure  [ fig2 ] .    #",
    "1#20.5#1    [ fig2 ]    we applied the same technique discussed previously for the thue - morse sequence .",
    "here is a summary of the computation : 6 seconds cpu time on a 2.9ghz dell xps laptop .",
    "stage 1 , 159 states + stage 2 , 1751 minimized down to 89 states + stage 3 , 178 minimized down to 75 states + stage 4 , 132 minimize down to 17 states .",
    "in the future , we plan to extend this work to explicitly compute the number of distinct unbordered factors of length @xmath0 in the thue - morse sequence .",
    "( a conjecture about this number was given in . )",
    "which of the problems mentioned in   [ intro ] are algorithmically decidable for the more general class of morphic sequences ?",
    "allouche and j.  o. shallit . the ubiquitous prouhet - thue - morse sequence . in c.",
    "ding , t.  helleseth , and h.  niederreiter , editors , _ sequences and their applications , proceedings of seta 98 _ , pp . 116 .",
    "springer - verlag , 1999 .",
    "e.  charlier , n.  rampersad , and j.  shallit .",
    "enumeration and decidable properties of automatic sequences . in g.",
    "mauri and a.  leporati , editors , _ developments in language theory , 15th international conference , dlt 2011 _ , vol .",
    "6795 of _ lecture notes in computer science _ , pp . 165179 .",
    "springer , 2011 .",
    "j.  shallit .",
    "the critical exponent is computable for automatic sequences . in p.",
    "ambroz , s.  holub , and z.  maskov , editors , _ words 2011 , 8th international conference _ , pp .",
    "231239 . elect .",
    "available at http://arxiv.org/abs/1104.2303v2 .",
    "a.  thue .",
    "die gegenseitige lage gleicher teile gewisser zeichenreihen .",
    "( 1912 ) , 167",
    ". reprinted in _ selected mathematical papers of axel thue _ , t. nagell , editor , universitetsforlaget , oslo , 1977 , pp ."
  ],
  "abstract_text": [
    "<S> we describe a technique for mechanically proving certain kinds of theorems in combinatorics on words , using automata and a package for manipulating them . </S>",
    "<S> we illustrate our technique by solving , purely mechanically , an open problem of currie and saari on the lengths of unbordered factors in the thue - morse sequence .    _ dedicated to the memory of sheng yu ( 19502012 ) : friend and colleague _ </S>"
  ]
}