{
  "article_text": [
    "one of the most important aspects of a graph drawing is that it should be readable : it should convey the structure of the graph in a clear and concise way .",
    "ease of understanding is difficult to quantify , so various proxies for readability have been proposed ; one of the most prominent is the number of edge crossings .",
    "that is , we should minimize the number of edge crossings in our drawing ( a planar drawing , if possible , is ideal ) , since crossings make drawings harder to read .",
    "another measure of readability is the total amount of ink required by the drawing  @xcite .",
    "this measure can be formulated in terms of tufte s `` data - ink ratio ''   @xcite , according to which a large proportion of the ink on any infographic should be devoted to information .",
    "proxies for it have been proposed , including the number of crossings and the total amount of ink required by the drawing  @xcite .",
    "thus given two different ways to present information , we should choose the more succinct and crossing - free presentation .",
    "r0.42 -4.5ex   -1ex    confluent drawing@xcite is a style of graph drawing in which multiple edges are combined into shared tracks , and two vertices are considered to be adjacent if a smooth path connects them in these tracks ( figure [ fig : k55 ] ) .",
    "this style was introduced to reduce crossings , and in many cases it will also improve the ink requirement by representing dense subgraphs concisely .",
    "however , it has had a limited impact to date , as there are only a few specialized graph classes for which we can either guarantee the existence of a confluent drawing or test for confluence efficiently .",
    "a closely related graph drawing technique , edge bundling  @xcite , differs from confluence in emphasizing the visualization of high level graph structure , but does not necessarily seek to reduce the number of edge crossings .    _",
    "hasse diagrams _ are a type of upward drawing of transitively reduced directed acyclic graphs ( dags ) that have been used since the late 19th century to visualize partially ordered sets . to maximize the readability of hasse diagrams , as with other types of graph drawing",
    ", we would like to draw them without crossings .",
    "thus upward planar graphs ( dags that can be drawn so that all edges go upwards and no edges cross ) have been an important thread of research in graph drawing .",
    "a dag is upward planar if and only if it is a subgraph of a planar st - graph , i.e. a planar dag with one source and one sink , both on the outer face  @xcite .",
    "testing upward planarity is np - complete  @xcite but for dags with a single source or a single sink it may be tested efficiently  @xcite .",
    "however , many dags ( even planar dags such as the one in figure [ fig : simple ] ) are not upward planar .     a simple dag @xmath4 ( left ) that is not upward planar , although its underlying graph is planar .",
    "its dedekind  macneille completion ( middle ) is upward planar , with an added element ( shaded ) .",
    "replacing that element with a junction creates an upward confluent drawing of @xmath4 ( right ) . ]",
    "-25ex    in this paper , we bring these threads together by finding efficient algorithms for upward confluent drawing of transitively reduced dags . we show that a graph has an upward confluent drawing if and only if it represents a partial order @xmath4 with order dimension at most two , and that these drawings correspond to two - dimensional lattices containing @xmath4 .",
    "we construct the smallest lattice containing  @xmath4 ( its dedekind  macneille completion ) in worst - case - optimal time , and draw it confluently in area @xmath0 , using as few confluent junctions as possible . for series - parallel partial orders , the time and number of junctions can be reduced to linear .    summarizing ,",
    "we have the following new results :    * we characterize the transitively reduced digraphs with confluent upward drawings : they are the digraphs whose reachability relation has order dimension at most two . *",
    "we construct a confluent upward drawing for any transitively reduced digraph that has one , by constructing the dedekind ",
    "macneille completion of the reachability poset and creating confluent junctions corresponding to the added elements in the completion .",
    "our drawings have @xmath0 junctions and track segments and can be embedded into an @xmath1 grid in @xmath0 time .",
    "the number of junctions is the minimum possible for any confluent upward drawing of the given digraph . * for series - parallel partial orders and the corresponding transitively reduced graphs ,",
    "we show how to construct a confluent drawing with @xmath2 elements , in an @xmath1 grid , in @xmath2 time given a series - parallel decomposition of the partial order .",
    "a partially ordered set ( partial order , or poset ) @xmath5 is a set @xmath6 with a reflexive , antisymmetric , and transitive binary relation @xmath7 .",
    "we adopt the convention that @xmath8 unless otherwise stated .",
    "we also use @xmath9 to denote that @xmath10 and @xmath11 .",
    "we say that @xmath12 _ covers _ @xmath13 in @xmath4 if @xmath14 and @xmath15 .",
    "elements @xmath16 are _ comparable _ if @xmath17 or @xmath18 ; otherwise , we write @xmath19 to indicate that they are _ incomparable_. a _ total order _ or _ linear order _ is a partial order in which every pair of elements in @xmath4 is comparable . if @xmath20 is a set of linear orders @xmath21 , we can define a poset @xmath4 as the intersection of @xmath20 : that is , @xmath17 in @xmath4 if and only if @xmath17 in every linear order @xmath21 .",
    "if @xmath4 can be defined from @xmath20 in this way , then @xmath20 is called a _ realizer _ of @xmath4 .",
    "every partial order @xmath4 has a realizer ; the _ dimension _",
    "@xmath22 is the smallest number of linear orders in a realizer of  @xmath4 .",
    "if @xmath23 is any subset of @xmath4 , then an element @xmath24 is called a _ lower bound _ of @xmath25 if it is less than or equal to every element of @xmath25 .",
    "similarly , an element @xmath13 is called an _",
    "upper bound _ of @xmath25 if it is greater than or equal to every element of @xmath25 .",
    "if @xmath25 has a lower bound  @xmath12 that belongs to @xmath25 itself , then @xmath12 is the ( unique ) _ least element _ in @xmath25 , and similarly if @xmath25 has an upper bound  @xmath13 that belongs to  @xmath25 then @xmath13 is the ( unique ) _ greatest element _ in  @xmath25 . if the set @xmath26 of lower bounds of @xmath25 has a greatest element  @xmath12 , then @xmath12 is the _ greatest lower bound _ or _ infimum _ of @xmath25 , and similarly if the set @xmath27 of upper bounds of  @xmath25 has a lowest element @xmath13 then @xmath13 is the _",
    "least upper bound _ or _ supremum _ of  @xmath25 .",
    "if @xmath4 itself has an infimum or a supremum , these elements are typically denoted by @xmath28  and  @xmath29 respectively . if @xmath4 contains both an infimum and a supremum , it is said to be _",
    "bounded_.    a poset @xmath30 is a _ lattice _ if for every pair of elements @xmath31 and @xmath32 in @xmath30 the set @xmath33 has both an infimum and a supremum . in this context , the supremum of @xmath33 is called the _ meet _ of @xmath31 and @xmath32 and denoted @xmath34 , and similarly the infimum is called the _ join _ and denoted @xmath35 .",
    "a lattice @xmath30 is _ complete _ if every subset of @xmath30 has an infimum and supremum in @xmath30 .",
    "every finite lattice is complete and bounded .",
    "every poset @xmath5 can be represented by a directed acyclic graph @xmath36 which has a vertex for each element in @xmath4 and an edge @xmath37 for each pair @xmath38 with @xmath39 in @xmath4 .",
    "however , when we draw a poset it is more common to draw a different dag , the _ transitive reduction _",
    "@xmath40 of @xmath36 , in which there is an edge from @xmath41 to @xmath42 in @xmath40 if and only if @xmath42 covers @xmath41 in @xmath4 .",
    "a _ hasse diagram _ of @xmath4 is an upward drawing of @xmath40 , meaning that the @xmath32 coordinate of the head of each edge is greater than the @xmath32 coordinate of the tail of each edge , so that the drawing `` flows '' upward from smaller elements to larger elements . in a hasse diagram , we do not need to explicitly draw the edges as directed edges : the direction of an edge is represented implicitly by the relative position of its endpoints .",
    "there is an upward path from @xmath12 to @xmath13 in a hasse diagram of @xmath4 if and only if @xmath17 . a poset is _ planar _ if it has a hasse diagram that is upward planar , i.e. its transitive reduction has an upward drawing in which none of the edges intersect except at a shared vertex .",
    "a finite lattice is planar if and only if its transitive reduction is a planar st - graph , a dag which contains exactly one source @xmath43 and one sink @xmath44 both of which belong to the outer face of an upward planar drawing  @xcite . more generally , any dag is upward planar if and only if it is a subgraph of a planar st - graph  @xcite . in the other direction ,",
    "every planar finite bounded poset must be a lattice  @xcite .",
    "this implies that a two - dimensional bounded poset that is not a lattice ( such as the one on the left of figure [ fig : simple ] ) can not have an upward planar drawing , and that planarity ( a crossing - free drawing ) and two - dimensionality ( realization by a pair of linear orders ) are distinct for non - lattice posets .",
    "the dedekind  macneille completion of a poset @xmath4 ( also called the normal completion or the completion ) @xmath4 is the smallest complete lattice containing  @xmath4  @xcite .",
    "its construction is based on dedekind s construction of the real numbers as dedekind cuts of rational numbers . for any subset @xmath25 of @xmath4 , let @xmath45 and @xmath46 denote the set of lower bounds and upper bounds of @xmath25 respectively .",
    "a _ cut _ of @xmath4 is a pair @xmath47 such that @xmath48 and @xmath49 ; the completion of @xmath4 has these cuts as its elements .",
    "the completion is partially ordered by set containment : if @xmath50 and @xmath51 are cuts , then @xmath52 if and only if @xmath53 and @xmath54 .",
    "the element of the completion corresponding to an element @xmath31 of @xmath4 is the cut @xmath55 , and the new elements added to @xmath4 to make it into a lattice come from cuts @xmath50 for which @xmath56 .",
    "the completion automatically has the same dimension as the partial order from which it was constructed  @xcite .",
    "ganter and kuznetsov  @xcite give a stepwise algorithm for constructing the completion of @xmath4 .",
    "given a poset @xmath4 and its completion @xmath30 they show how to complete a one - element extension of @xmath4 in time @xmath57 , where @xmath58 denotes the width of @xmath4 .",
    "to compute the completion of a large poset , they begin with a single - element poset ( whose completion is trivial ) and use this subroutine to add elements one at a time ; therefore , the total time is @xmath59 .",
    "nourine and raynaud  @xcite give an algorithm with running time @xmath60 where @xmath27 is a _ basis _ of @xmath4 ( a set of subsets of @xmath4 which generate @xmath30 ) .",
    "as part of our drawing algorithm , we improve these results in the case of two - dimensional posets : we show for such sets how to construct the completion in time @xmath61 , optimal in the worst case since ( as we also show ) there exist two - dimensional posets whose completion has a quadratic number of elements .",
    "confluent drawing is a technique for drawing non - planar diagrams without crossings  @xcite by merging together groups of edges and drawing them as _ tracks _ that , like train tracks , meet smoothly at junction points but do not cross",
    ". a _ confluent drawing _",
    "consists of a set of labeled points ( _ vertices _ and _ junctions _ ) and curves ( _ track segments _ ) in the euclidean plane , such that the two endpoints of each track segment are vertices or junctions , such that no two track segments intersect except at a shared endpoint , and such that all track segments that meet at a junction share a common tangent line at that point .",
    "the graph represented by a confluent drawing has as its vertices the vertices of the drawing ; two vertices @xmath41 and @xmath42 are adjacent if and only if there is a smooth curve in the plane from @xmath41 to @xmath42 that is a union of track segments and that does not pass through any other vertex .",
    "( some papers on confluence require that this curve also be non - self - intersecting but that requirement is irrelevant for upward drawings since monotone curves can not self - intersect . )",
    "an undirected graph @xmath36 is _ confluent _ if and only if there exists a confluent drawing that represents it .",
    "we define a _ confluent diagram _ of a poset to be a drawing of its transitive reduction in a way that is both confluent and upwards .",
    "in other words , if @xmath36 is a directed acyclic graph representing a poset @xmath4 , then we define a confluent diagram of @xmath4 to be an upward confluent drawing of the transitive reduction of @xmath36 in which all tracks are oriented upwards ( monotonic in the @xmath32 direction ) , and therefore all smooth curves passing through the tracks are similarly oriented .",
    "for each pair of elements @xmath16 , the drawing should have a smooth track from @xmath12 upwards to @xmath13 if and only if @xmath12 is covered by @xmath13 .",
    "for technical reasons we also require that for each source there exists an unbounded @xmath32-monotone curve downwards that does not cross the diagram  that is , that each source can be seen from below  and symmetrically that each sink can be seen from above . in the application to visualization of partial orders ,",
    "this is a natural restriction as it makes the minimal and maximal elements easy to find in the drawing .",
    "let @xmath36 be a poset with dimension at most two .",
    "we now describe an @xmath0 algorithm to embed a confluent diagram of @xmath4 in an @xmath1 grid .",
    "that is , we will generate an upward confluent drawing of the transitive reduction of a dag representing @xmath4 such that each vertex in the drawing has integer coordinates .    .",
    "_ middle _ : grid embedding with added points and dominance pairs .",
    "_ right _ : completion points replaced by confluent junctions and rotated @xmath62 . ]",
    "-37.5ex    our algorithm has three phases . in the first phase ,",
    "we embed the elements of @xmath4 in a @xmath63 grid . recall that since @xmath4 has dimension two , it is realized by two linear orders , which correspond to two different total orderings of the same @xmath64 elements in @xmath4",
    "thus , the first steps of our algorithm are :    1 .   1 .",
    "find two linear orders @xmath65 and @xmath66 that realize @xmath4 .",
    "this can be done in @xmath0 time from any graph whose transitive closure is @xmath4 by algorithm 1 of @xcite .",
    "2 .   for each element @xmath67 of @xmath4 , having position @xmath68 in @xmath65 and @xmath69 in @xmath66 with @xmath70 , place",
    "a vertex representing @xmath67 in the grid with coordinates @xmath71 .    after this step ,",
    "the even rows and columns in the grid each contain exactly one element of @xmath4 , and the dominance relationship of these points corresponds to the order of the elements in @xmath4 .",
    "recall that for two elements @xmath67 and @xmath72 in the plane , @xmath67 _ dominates _",
    "@xmath72 if and only if @xmath73 for each coordinate @xmath74 and @xmath75 .    in the second phase , we insert additional points representing elements of the completion of @xmath4 ; these completion nodes correspond to confluent junctions in the confluent diagram of @xmath4 .",
    "we defer to a later section the proof that the dominance order on the points generated in the first two phases gives the completion of  @xmath4 .    1 .   for each odd pair of indices @xmath76 , in",
    "@xmath77 $ ] insert a junction in the grid with coordinates @xmath78 if all of the following four conditions hold : * the poset point with @xmath31-coordinate @xmath79 has @xmath32-coordinate less than @xmath80 .",
    "* the point with @xmath31-coordinate @xmath81 has @xmath32-coordinate greater than @xmath82 . * the point with @xmath32-coordinate @xmath80 has @xmath31-coordinate less than @xmath79 .",
    "* the point with @xmath32-coordinate @xmath82 has @xmath31-coordinate greater than @xmath81 .",
    "+ in addition if @xmath4 does not already have a least or a greatest element , then insert invisible points at @xmath83 and @xmath84 respectively .    in the third phase , we generate the segments of the confluent diagram .",
    "these segments correspond to direct dominance pairs of points from the first two phases .",
    "it is possible to find all dominance pairs in a set of @xmath85 points in time @xmath86",
    "@xcite where @xmath87 is the number of dominance pairs , but in our case @xmath85 may be too large , so this would only lead to an @xmath88 time bound .",
    "instead , we leverage the fact that the vertices are embedded in an @xmath3 grid , and use the following @xmath89 time method to generate dominance pairs using a stack - based algorithm related to graham scan within each row .",
    "we prove later that the diagram is planar and therefore that the number of dominance pairs @xmath90 .",
    "1 .   initialize for each column @xmath91 a value @xmath92 , the topmost element seen so far in column  @xmath91 .",
    "+ then , for each row @xmath93 from @xmath29 to @xmath94 : 1 .",
    "initialize an empty stack @xmath95 .",
    "2 .   for each column",
    "@xmath91 from @xmath29 to @xmath94 : 1 .",
    "if there is a vertex or junction @xmath67 at @xmath96 , add an edge from every element of @xmath95 to @xmath67 , add an edge from @xmath92 to @xmath67 ( if @xmath92 is non - empty ) , and set @xmath92  to  @xmath67 .",
    "2 .   if @xmath92 is non - empty , pop all items from @xmath95 whose row number is less than or equal to the row number of @xmath92 , and push @xmath92 onto @xmath95 .",
    "thus we have computed the coordinates of all elements , confluent junctions , and edges in the confluent diagram .",
    "when we render the drawing , we rotate it @xmath62 counterclockwise to make it upward confluent ( figure [ fig : algex ] )",
    ".        examples of non - confluent and confluent drawings of the same 100-element set are shown in figure  [ fig : implementation ] .",
    "our python implementation renders the confluent track segments as cubic bzier curves with control points at a small fixed distance directly above and below each confluent junction .",
    "two such curves can not cross each other : for pairs of edges that do not share an endpoint , this follows from the fact that the convex hulls of the control points are disjoint and that the curves lie within the convex hulls , while for pairs of curves that share an endpoint it follows from the fact that the two curves are images of each other under an affine transformation of the plane and that ( for pairs of edges sharing an endpoint ) the direction that any point on the curve is translated by this affine transformation is transverse to the tangent direction of the curve at that point .",
    "if the input is provided as a realizer rather than as a graph , and its completion has few elements , then it is possible to construct the diagram more efficiently .",
    "to do so , construct for each odd - indexed row or column of the integer grid an axis - parallel line segment that passes through a grid point if and only if that point meets two of the four conditions for adding a junction in phase  two of our algorithm .",
    "the junctions can be recovered as the intersections of these line segments , and we may compute the edges of the diagram using an output - sensitive algorithm for dominance pairs . by using integer searching data structures the total time for this algorithm",
    "may be reduced to @xmath97 , where @xmath87 is the number of confluent junctions ; we omit the details .",
    "in this section we prove that the algorithm of section [ sec : alg ] is correct and has optimal running time .",
    "our analysis also shows that a poset @xmath4 has a confluent diagram if and only if it has dimension at most two .",
    "[ lem : planardim2 ] let @xmath4 be a bounded finite planar poset . then @xmath4 is a lattice and has dimension at most 2 .",
    "[ lem : junctiontolattice ] let @xmath4 be a finite poset with a confluent hasse diagram @xmath98 .",
    "then @xmath99 , and there exists a two - dimensional lattice @xmath100 containing @xmath4 such that the elements of @xmath101 ( other than the top and bottom element , if they do not belong to @xmath4 ) correspond one - for - one with the confluent junctions of @xmath98 .    replace the confluent junctions of @xmath98 with vertices , and re - interpret the confluent segments as edges between these vertices .",
    "if there is more than one minimal vertex of @xmath4 , add a vertex below all minimal vertices , connected to the minimal vertices by upward edges , and similarly if there is more than one maximal vertex of @xmath4 , add a vertex above all maximal vertices connected to them by edges .",
    "the modified drawing is st - planar and hence by lemma  [ lem : planardim2 ] represents a lattice , which clearly contains @xmath4 .",
    "[ lem : completion ] let @xmath4 be a finite poset with order dimension at most two , let @xmath100 be the completion of @xmath4 , and let @xmath95 be the set of elements of @xmath101 ( other than the top and bottom element , if @xmath4 itself is not bounded ) .",
    "then the elements of @xmath95 coincide with the junction points added in phase 2 of our algorithm , and the dominance ordering on these points coincides with the lattice ordering in @xmath100 .    in one direction ,",
    "let @xmath67 be a junction point added in phase 2 of our algorithm , and @xmath102 and @xmath103 be the sets of points from phase 1 that are dominated by @xmath67 and that dominate @xmath67 respectively .",
    "then it follows from the four conditions according to which phase 2 adds a point that @xmath104 forms a cut in @xmath4 .",
    "the equivalence of the dominance and lattice orderings on pairs consisting of a junction point and a point from @xmath4 follows immediately , and the same equivalence for pairs of junction points is also easy to verify .    in the other direction",
    ", we must show that we add a junction point for every element of @xmath95 , that is , every cut @xmath105 where @xmath30 has more than one maximal element and @xmath106 has more than one minimal element .",
    "let @xmath74 be one less than the minimum @xmath31-coordinate of a point in @xmath106 , and let @xmath107 be one less than the minimum @xmath32-coordinate ; then ( because the coordinates of points in @xmath4 are their positions in the two orderings of a realizer ) the set @xmath30 of points dominated by every point in @xmath106 equals the set of points below and to the left of @xmath76 .",
    "two of the four conditions of phase 2 are automatically met at  @xmath76 : the points with @xmath31-coordinate @xmath81 and with @xmath32-coordinate @xmath82 are both in @xmath106 and are distinct because @xmath106 has more than one minimal point .",
    "the other two conditions must also be met , for if they were not then the point violating the condition would dominate @xmath30 , contradicting the fact that all points that dominate @xmath30 belong to @xmath106 .",
    "a given partial order @xmath4 has a confluent diagram if and only if @xmath108 .",
    "if @xmath4 has a confluent diagram , the algorithm of section [ sec : alg ] computes a valid confluent diagram of @xmath4 , and embeds that diagram in a @xmath1 grid in worst case optimal @xmath0 time .",
    "the number of confluent junctions in the drawing is the minimum possible for any confluent diagram of @xmath4 .",
    "if a poset @xmath4 has dimension three or more , then so does any lattice containing it , and by lemma  [ lem : planardim2 ] and lemma  [ lem : junctiontolattice ] there can be no confluent diagram of @xmath4 .",
    "otherwise , we may assume that @xmath4 has dimension at most two .     with @xmath2 elements and dimension 2",
    "whose completion has size @xmath109 .",
    "on the left is the normal hasse diagram , and on the right is the confluent version as drawn by our algorithm .",
    "the two permutations @xmath65 and @xmath66 generating @xmath4 are the identity and the permutation @xmath110.,title=\"fig:\",width=216 ] with @xmath2 elements and dimension 2 whose completion has size @xmath109 . on",
    "the left is the normal hasse diagram , and on the right is the confluent version as drawn by our algorithm .",
    "the two permutations @xmath65 and @xmath66 generating @xmath4 are the identity and the permutation @xmath110.,title=\"fig:\",width=216 ]    by lemma  [ lem : completion ] , the dominance ordering on the points computed by our algorithm coincides ( except possibly for the removal of the top and bottom elements ) with the completion of @xmath4 . in this set of points , there can be no crossing pairs of dominance relations , for if the edges @xmath111@xmath112 and @xmath113@xmath114 crossed ( where @xmath115 is a cut either added in the completion or corresponding to an original point of @xmath4 ) then @xmath116 would also be a cut whose point would lie between the other four points , contradicting the assumption that these edges represent minimal dominance pairs .",
    "therefore , the diagram constructed by our algorithm is planar , and by lemma  [ lem : planardim2 ] it must represent a lattice superset of @xmath4 .",
    "the added elements belong to the completion , so the diagram must represent a subset of the completion , and since the completion has no proper lattice subsets it must represent the completion itself .",
    "the completion gives the minimum number of added elements ( and therefore , by lemma  [ lem : junctiontolattice ] , the minimum number of junctions ) of any diagram for @xmath4 .",
    "our algorithm spends @xmath0 time in its first two phases as it iterates over @xmath0 grid cells spending constant time per cell . in the third phase ,",
    "it uses constant time per edge and by planarity there are @xmath0 edges , so the time is again @xmath0 .",
    "this time bound is optimal since ( as shown in figure  [ fig : lowerboundposet ] ) there exist two - dimensional posets whose completion has @xmath109 elements .",
    "although our method produces drawings in a grid of linear dimensions , it may be possible in some cases to compact our drawings into a smaller grid .",
    "an algorithm of de la higuera and nourine  @xcite may be used to find the smallest grid into which a drawing produced by our algorithm can be compacted .",
    "r0.43 -5ex     a _ series - parallel partial order _ is a poset that can be built up from single elements by two simple composition operations :    * the _ series composition _",
    "@xmath117 of posets @xmath4 and @xmath118 is the order on the set @xmath119 in which @xmath120 for every @xmath121 and @xmath122 . *",
    "the _ parallel composition _",
    "@xmath123 is the order on @xmath119 in which every pair of an element from @xmath4 and an element from @xmath118 are incomparable .",
    "pairs of elements that are both from @xmath4 or both from @xmath118 retain their ordering in the larger set .",
    "series - parallel partial orders are attractive because many important computational problems can be solved more easily in them than in more general posets , and because they have applications to a wide variety of problems including scheduling @xcite , concurrency @xcite , data mining @xcite , networking @xcite , and more ( see @xcite ) .",
    "series - parallel partial orders can be represented naturally by a binary tree , known as a decomposition tree of the order .",
    "the leaves of the tree correspond to single element sets and the internal nodes of the tree correspond to series or parallel composition operations . as the following theorem shows ,",
    "given a decomposition tree @xmath124 for a series - parallel partial order @xmath4 , we can draw the confluent diagram of @xmath4 in linear time by traversing @xmath124 , performing the corresponding composition operations , and inserting confluent junctions when necessary .     and @xmath27 .",
    "[ fig : comps],width=336 ]    let @xmath4 be a series - parallel partial order , given as its decomposition tree .",
    "then a confluent diagram of @xmath4 with a linear number of junctions can be drawn in an @xmath1 grid in linear time .",
    "r0.33 -7ex     we traverse the decomposition tree in post - order , recursively finding embeddings for each subtree . for each tree node",
    ", we do the following :    1 .",
    "if the node is a leaf , then we embed the corresponding element in a single grid cell 2 .",
    "otherwise , if the node is a series or parallel node , then we translate the grid embeddings of its two children so that their bounding boxes meet corner to corner ( figure [ fig : comps ] ) .",
    "3 .   for a series composition",
    "@xmath125 we also insert a confluent junction at the shared corner of @xmath26 and @xmath27 if and only if @xmath26 has more than one maximal element and @xmath27 has more than one minimal element ( figure [ fig : addconfluent ] ) .    by using a linked list of the maximal and minimal nodes for the current subtrees , we can perform these operations in time proportional to the number of leaves in the decomposition tree .",
    "therefore the total time is linear .",
    "the size of the grid will be proportional to the size of the decomposition tree , i.e. , @xmath1",
    "we have designed , analyzed , and implemented an algorithm for drawing confluent hasse diagrams using a minimum number of confluent junctions .",
    "it would be of interest to test experimentally how many crossings it eliminates , and how much ink it saves .",
    "also , upward planarity may be tested even for non - st - planar graphs that have only one source or one sink ; can similar conditions be extended to the case of upward confluent drawings ? can we efficiently find upward planar drawings of graphs that are not transitively reduced ?",
    "if a partially ordered set must be drawn with crossings , can we use confluence in a principled way to keep the number of crossings small ?",
    "we leave these questions to future research ."
  ],
  "abstract_text": [
    "<S> we show that a transitively reduced digraph has a confluent upward drawing if and only if its reachability relation has order dimension at most two . in this case </S>",
    "<S> , we construct a confluent upward drawing with @xmath0 features , in an @xmath1 grid in @xmath0 time . for the digraphs representing series - parallel partial orders </S>",
    "<S> we show how to construct a drawing with @xmath2 features in an @xmath3 grid in @xmath2 time from a series - parallel decomposition of the partial order . </S>",
    "<S> our drawings are optimal in the number of confluent junctions they use .    </S>",
    "<S> = 1 </S>"
  ]
}