{
  "article_text": [
    "a mashup is a web page aggregating multiple sources of information . in a javascript - based mashup",
    ", such a source of information often requires including an external script in the hosting web page for data retrieval or ui building . including a javascriptscript from an external source into a web page raises security concerns , as well as unresolved questions about secure communication between the script and the hosting web page .",
    "javascriptsemantics is permissive with respects to security @xcite .",
    "several attempts to isolate javascriptprograms have been made : caja @xcite , fbjs , adsafe @xcite .",
    "these solutions either use a subset of javascriptor rely on code rewriting .    our approach is based on separate thread - based local sandboxes and controlled policies to access the main environment . on this aspect ,",
    "the idea is close to the one of software isolation processes ( sip ) of singularity os @xcite .",
    "safejsis available for download under a free open - source license .",
    "the contributions of this technical report are :    * strong isolation of javascriptbased on web workers ; * fully working implementation used in an industrial setting .",
    "this section presents some web standards ( domand web workers ) that are key to safejsdesign and implementation .",
    "the domis the document tree of any xml and html document .",
    "the dom is virtually used by all web applications .",
    "the web worker is an infrastructure to run isolated processes in a web page . the web worker draft specification is already implemented by modern web browsers .    [",
    "[ dom . ] ] dom .",
    "+ + + +    the w3c defines the _ dom _ ( document object model ) as `` _ _ an application programming interface ( api ) for html and xml documents__''@xcite .",
    "the domspecification consists of 3 stacked levels , each level building on the level below .",
    "the domlevel 1 , provides an api to let developers add , modify and delete elements from an html ( in fact any xml ) document .",
    "the domrepresents any html document like a tree of node objects , each object representing a particular tag of the document . in its level 2 ,",
    "the domadditionally specifies how developers can manipulate other parts of html documents such as css and mouse events",
    ". the domlevel 3 adds other apis such as a keyboard event handling api and an xml serialization api .",
    "javascriptapplications manipulate the dom ( _ e.g.,_adding and removing nodes ) to impact the visual representation of the web page .",
    "[ [ web - workers . ] ] web workers .",
    "+ + + + + + + + + + + +    the w3c is in the process of specifying a _ worker _ api that `` _ _ allows web application authors to spawn background workers running scripts in parallel to their main page _ _ '' .",
    "this draft specification enforces that the code executing within a worker is completely isolated from the main thread and other workers : a worker can only communicate through string - based messages , _",
    "i.e.,_a worker has no access to the domapi and thus can not modify the web document . in the following , we will talk about the `` worker specification '' even though this document is still in a draft stage and subject to change .",
    "still , this document is sufficiently advanced to have compatible implementations in all modern web browsers .",
    "the idea behind safejsis to run each unsafe script inside its own worker and give this worker a virtual domfor the script to play with .",
    "this virtual domis compatible with the standard dombut restricts which changes impact the document .",
    "figure [ fig : global - architecture ] summarizes the high - level architecture of safejs .",
    "a standard web browser provides a view of the web document , a main javascriptthread , and a dom(accessible from the main javascriptthread ) .",
    "the web developer must include the safejslibrary inside the document and pass each unsafe script he wants to embed in the document to safejs .",
    "as soon as an unsafe script is passed to safejs , safejscreates a dedicated javascriptworker ( step ) .",
    "this worker first creates a safejsvirtual dom(known as the safejsvdom ) mimicking the main javascriptthread s dom(step ) .",
    "the worker then loads and starts the unsafe script ( step ) .",
    "the unsafe script can freely read from the safejsvdom .",
    "the unsafe script can also update the safejsvdom(step ) .",
    "when this happens , the safejsvdomwrites a message to the message queue ( step ) .",
    "the safejslibrary then reads the message at the other end of the queue ( step ) . when safejsdetects a forbidden update , safejswill either ignore the request or kill the worker and its malicious script ; this choice depends on the safejsconfiguration .",
    "if the update is authorized , safejsperforms the equivalent update on the real dom(step ) .",
    "the web browser finally updates the web page ( step ) .",
    "we now detail each step .",
    "the web developer must first load the safejslibrary through requirejs :    < script type=text / javascript data - main=``safe '' src=js / require.js / >    the declaration instructs requirejsto load safejs .",
    "the next step for the web developer is to pass each unsafe script to safejs :    < script type=text / safe - javascript src=js / spy.js node=#unsafediv policy=read - write / >    this declaration instructs safejsto load the unsafe script .",
    "this script can be any javascriptcode compatible with client - side usage .",
    "the parameter value must be set to : this prevents the web browser from loading the script in the main thread and this indicates to safejsthat the script must be sandboxed .",
    "the parameter indicates the html target node which will be made accessible from the unsafe script : in this case , the html node with the i d .",
    "this target node will become the only node visible from the unsafe script .",
    "the parameter indicates the kind of operations the unsafe script can apply on the target node .",
    "a policy only grants reading capabilities of the target node to the unsafe script whereas a policy grants full privileges to this node .",
    "finally , the web developer must include the html target node that the unsafe script will read and update :",
    "< div id=``unsafediv''></div >      when safejsis loaded , it navigates the domto find any script declaration with the type and creates a dedicated worker for each .",
    "each worker is initialized with a safejs script that waits for its configuration by reading its message queue .",
    "no other form of communication is allowed by the worker draft specification between the main thread and the worker .",
    "the message queue only accepts strings .",
    "safejsmust then serialize each message going through the queue : we use json as the serialization format .",
    "the first message safejssends to the worker is a copy of the html target node , in our example . with this message",
    ", the worker creates a safejsvdomthat mimics a real dombut that can not directly impact the web document .",
    "after the safejsvdomis created , safejssends the url of the unsafe script to load ( in our example ) to the worker through the message queue .",
    "when the worker receives this message , it loads the unsafe script .",
    "the unsafe script can use the safejsvdomas if it was a real dom .",
    "because of this , our approach allows any script to be embedded in a web page with no modification . for the unsafe script , reading and updating the safejsvdomis done using the standard javascriptapi .",
    "because the safejsvdomcontains a ( partial ) copy of the web page , reading is done without any communication with the main thread .",
    "when the unsafe script updates the safejsvdom , the worker sends a serialization of the change to the message queue .",
    "this change information contains the state of the safejsvdomas the unsafe script would like it to be .",
    "then , safejsdeserializes the change and checks the policy to verify whether the change is allowed .",
    "if the change is not allowed , safejscan either kill the worker or ignore the update request depending on its configuration .",
    "if the change is allowed , safejsupdates the real dom .",
    "safejsthen sends a ( partial ) copy of the domto the worker which then updates its safejsvdom .      when safejsupdates the real dom , the web browser takes care of updating the web document .",
    "the safejsvdomis a full - javascriptimplementation of the dom@xcite level 3 .",
    "safejsvdomis actually a fork of the well - known jsdomdomimplementation that is used with node.js by server - side javascriptapplications .",
    "our safejsvdomimplementation is available under a free open - source license .    in this section ,",
    "we present some of the key differences between safejsvdomand jsdomand explain why they are critical for safejs .",
    "the jsdomlibrary depends on multiple other javascriptlibraries such as and .",
    "these dependent libraries are resolved and loaded with a specific instruction that blocks the execution until the library is ready to be used :    defaultparser = require(htmlparser2 ) ... code that uses defaultparser ...    if this blocking code is perfectly valid for a server - side javascriptapplication , a web browser only allows non - blocking code and there is no way to force the browser to wait for anything : the web browser would kill any script with an active waiting loop for example .",
    "we thus had to rewrite all similar code to use an equivalent and non - blocking function using requirejsto resolve and load external libraries :    define([``htmlparser2 '' ] , function(defaultparser ) ... code that uses defaultparser ... )    [ [ remove - accesses - to - the - file - system ] ] remove accesses to the file - system + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    jsdomfeatures the ability to read and write files on the hosting file system , thanks to a dedicated api provided by node.js .",
    "such unrestricted access to a file system is not possible in a web browser so we removed this ability in safejsvdom .    [",
    "[ remove - references - to - the - global - object ] ] remove references to the global object + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    jsdomuses contextify , a c++ library , to bind the pseudo variable to its object . in safejsvdom , we can not depend on a c++ library and we thus had to create a global object that mimics the behavior of . because is , for example , responsible for providing a logger object ( known as the console )",
    ", the safejsvdomglobal object also provides a virtual logger object .",
    "[ [ recursively - apply - these - changes - to - jsdomdependencies ] ] recursively apply these changes to jsdomdependencies + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    finally , we applied the above - mentioned changes to the jsdomdependencies we had to integrate in safejsvdom(_e.g.,_cssom , cssstyle and htmlparser ) .",
    "for this , we leveraged the browserify tool to",
    "in this document we reported on the design and implementation of safejs , an hermetic sandboxing mechanism for javascript . safejsallows mashup javascriptdevelopers to include external ( potentially unsafe ) scripts into a web page without risking data leaks from the web page to the external scripts .",
    "our approach is based on web workers , a draft specification to run isolated processes in a web page .    the idea behind safejsis to run each unsafe script inside its own worker and give this worker a virtual domfor the script to play with .",
    "this virtual domis compatible with the standard dombut restricts which changes impact the document .",
    "arjun guha , claudiu saftoiu , and shriram krishnamurthi .",
    "the essence of javascript . in _ proceedings of the 24th european conference on object - oriented programming _",
    ", ecoop10 , pages 126150 , berlin , heidelberg , 2010 .",
    "springer - verlag .",
    "joe  gibbs politz , spiridon  aristides eliopoulos , arjun guha , and shriram krishnamurthi .",
    "adsafety : type - based verification of javascript sandboxing . in _ proceedings of the 20th usenix conference on security _ , sec11 , pages 1212 , berkeley , ca , usa , 2011 .",
    "usenix association ."
  ],
  "abstract_text": [
    "<S> isolating programs is an important mechanism to support more secure applications . isolating program in dynamic languages such as javascriptis even more challenging since reflective operations can circumvent simple mechanisms that could protect program parts . in this article we present safejs , </S>",
    "<S> an approach and implementation that offers isolation based on separate sandboxes and control of information exchanged between them .    in safejs , </S>",
    "<S> sandboxes based on web workers do not share any data . </S>",
    "<S> data exchanged between sandboxes is solely based on strings . using different policies </S>",
    "<S> , this infrastructure supports the isolation of the different scripts that usually populate web pages . </S>",
    "<S> a foreign component can not modify the main domtree in unexpected manner .    </S>",
    "<S> our safejsimplementation is currently being used in an industrial setting in the context of the resilience fui 12 project . </S>"
  ]
}