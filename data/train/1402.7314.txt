{
  "article_text": [
    "today we are witnessing an unprecedented worldwide growth of mobile data traffic that is expected to surpass 10 exabytes per month in 2017 @xcite . in order to manage this load ,",
    "operators deploy small cell base stations ( scbss ) that work in conjunction with the conventional macrocellular base stations ( mbs ) .",
    "the scbss increase the area spectral efficiency and serve the users with short range energy - prudent transmission links .",
    "the main drawback of this approach however is the high cost incurred by the deployment of the backhaul links that connect the scbss to the core network @xcite .",
    "local caching of popular files at the scbss has been recently proposed @xcite-@xcite , so as to reduce the necessary capacity , and hence the cost , of these backhaul links .",
    "based on this novel architecture , user requests are served by the scbss , if the latter have cached the respective file , otherwise the mbs is triggered to serve them .",
    "the main challenge here is to design the optimal caching policy , i.e. , to determine the files that should be cached in each scbs so as to minimize the cost for serving the requests .",
    "however , one aspect of the cellular networks that has not been considered in these previous works , is that operators can employ multicast transmissions to concurrently serve multiple requests of different users .",
    "multicast constitutes a promising solution for efficient delivery of multimedia content over cellular networks ( e.g. , see @xcite and references therein ) , and has been incorporated in 3gpp specifications @xcite .",
    "it can be used to deliver content to users that have subscribed to a multicast service , or to users that submit file requests at nearby times and hence can be served via a single multicast transmission .",
    "clearly , multicast impacts the caching policies .",
    "for example , when mbs multicast is used to deliver a file , there is no need to cache it in any scbs . on the other hand , in order to avoid such mbs transmissions , all the scbss that receive user requests for this file should have it cached .    in this paper , we design caching policies for small cell networks when the operators employ multicast .",
    "similarly to previous works , our goal is to reduce the servicing cost of the operator by minimizing the volume of the incurred traffic .",
    "however , our approach differs substantially from other studies that designed caching policies based solely on content popularity @xcite , @xcite .",
    "namely , multicast transmissions couple caching decisions with the spatiotemporal characteristics of user requests , and renders the problem np - hard even for the simple case of non - overlapping scbs coverage areas .",
    "first , we demonstrate through simple examples how multicast affects the optimality of caching policies .",
    "accordingly , we introduce a general optimization problem ( which we name macp ) for devising the optimal caching policy under different user requirements .",
    "we assume that different users ask for different files in different time instances .",
    "the location and the time arrival of these requests determines whether mbs or scbss multicast transmissions are possible which , in turn , affects the design of the caching policies .",
    "we prove the complexity of the caching problem and provide a heuristic algorithm that yields remarkable results compared to conventional caching schemes .",
    "our main technical contributions are as follows :    * _ multicast aware caching problem ( macp)_. we introduce the macp problem that derives caching policies which take into account the possibility of multicast transmission from mbs and scbs .",
    "this is very important as content delivery via multicast is part of 3gpp standards and gains increasing interest . *",
    "_ complexity analysis of macp_. we prove the intractability of the macp problem by reducing it to the set packing problem @xcite . that is , we show that macp is np - hard even to approximate within a factor of @xmath0 , where @xmath1 is the number of scbss . *",
    "_ heuristic solution algorithm_. we present a heuristic algorithm that provides significant performance gains compared to the existing caching schemes . the problem formulation and the algorithm",
    "are generic in the sense that apply for general network parameters such as different servicing cost , coverage areas and user demands . *",
    "_ performance evaluation_. we evaluate the proposed scheme in representative scenarios .",
    "we show that our algorithm reduces the servicing cost even down to @xmath2 compared to conventional ( multicast - agnostic ) caching schemes and study the impact of several system parameters such as the cache sizes and the user request patterns .",
    "the rest of the paper is organized as follows : section [ section:2 ] reviews our contribution compared to the related works , whereas section [ section:3 ] describes the system model and defines the problem formally . in section [ section:4 ] , we show the intractability of the problem and present a heuristic caching algorithm with concerns on multicast transmissions .",
    "section [ section:5 ] presents our numerical results , while in section [ section:6 ] we conclude the paper .",
    "the idea of leveraging in - network storage for improving network performance is gaining increasing interest @xcite and has been recently proposed also for small cell networks @xcite-@xcite .",
    "authors in @xcite performed the file placement in storage capable base stations based solely on file popularity . the subsequent work in @xcite extended their results for the special case that users request video files encoded into multiple quality levels . in our previous work @xcite",
    ", we studied the impact of scbss wireless capacity constraints on the caching decisions .",
    "in contrast to all these studies , our caching policy is carefully designed with concerns on the multicast which is often used by operators to reduce the servicing cost .",
    "it is worth emphasizing that this twist increases significantly the complexity of the caching policy design problem .",
    "namely , while for the simple scenario of non - overlapping coverage areas of the scbs the conventional file placement is a trivial problem @xcite , we prove that incorporating multicast transmissions into the system makes it np - hard .    the caching problem has also been studied in information delivery through broadcasting in conventional cellular networks ( i.e. , without scbss ) @xcite . in these systems , users are endowed with caches in order to store in advance broadcasted content and retrieve later when they need it .",
    "the closest work to ours is that presented by maddah - ali et al . @xcite .",
    "the authors focus on the joint caching and content delivery problem for the case that there exists a set of users , each one requesting a single file .",
    "the goal is to serve them with a single multicast transmission in a way that reduces the peak traffic rates .",
    "in contrast to that work , we consider a small cell network setting and aim at deriving the caching policy that minimizes the average cost incurred when serving the user requests .",
    "in this section we introduce the system model , we provide a motivating example that explains the problem under consideration and highlights the impact of multicast on caching and , finally , we formally define the multicast - aware caching optimization problem .",
    "* system model*. we study the downlink operation of a small cell network like the one depicted in figure [ fig : model ] .",
    "a set @xmath3 of @xmath4 small cell base stations ( scbss ) are deployed within the macrocell , serving the requests of the nearby users .",
    "each scbs @xmath5 is equipped with a cache of size @xmath6 bytes .",
    "the mbs is connected to the core network via a backhaul link .",
    "we denote with @xmath7 the average incurred cost per byte ( in monetary units / byte ) when transferring data from the core network to the mbs via it s backahul link .",
    "parameter @xmath8 refers to the average cost of the required backhaul capacity in case the link is owned by the operator . when the backhaul link is leased ( e.g. , by a tier-1 isp ) , @xmath8 denotes the average cost per byte paid to the link provider , which depends both on peak traffic and on the volume of the traffic , based on the employed pricing scheme . besides",
    ", we denote with @xmath9 the cost per byte incurred when transmitting data directly from mbs to the users in the cell .",
    "parameter @xmath10 refers to the average mbs energy consumption when transmitting files to the users .",
    "finally , let @xmath11 denote the unit cost incurred when transmitting data from the scbs @xmath12 to it s nearby users . clearly , @xmath13 , @xmath14 , since the scbss are in closer proximity to the users than the mbs .",
    "in general , the above cost parameters can be interpreted as the average opex , and average projected capex costs of the operator .",
    "we study the system for a certain time interval ( several hours or few days ) , during which the users demand for a set of popular files is assumed to be known in advance , as in @xcite , @xcite , @xcite .",
    "let @xmath15 indicate that collection of @xmath16 content files . for notational convenience ,",
    "we assume that all files have the same size normalized to @xmath17 .",
    "this assumption can be easily removed as , in real systems , files can be divided into blocks of the same length @xcite , @xcite , @xcite .",
    "users are heterogeneous since they may have different content demands .",
    "to facilitate the analysis , we consider the case that the coverage areas of the scbss are non - overlapping , hence each user is in the coverage area of at most one scbs .",
    "we want to emphasize at this point that , as it will be explained in the sequel , all the presented results for the complexity of the problem as well as the proposed algorithm hold also for the case of overlapping scbs coverage areas .",
    "we denote with @xmath18 the average demand of users for file @xmath19 covered by scbs @xmath12 within the considered time interval .",
    "also , @xmath20 denotes the average demand of the users for file @xmath19 that are not in the coverage area of any of the scbss .",
    "we assume that file requests must be satisfied within a given time deadline of @xmath21 seconds in order to be acceptable by the users , as in @xcite .",
    "the multicast service happens every @xmath21 seconds , which ensures that all the requests will be satisfied within the time deadline .",
    "we denote with @xmath22 the probability that at least one request for file @xmath19 is generated by users in the coverage area of scbs @xmath12 ( area @xmath12 ) within the time period @xmath21 .",
    "similarly , @xmath23 denotes the respective probability for the users that are not in the coverage area of any of the scbss ( area @xmath24 ) .",
    "we denote with @xmath25 the probability that at least one request for the file @xmath26 is generated within each one of the areas @xmath27 , within the period @xmath21 .",
    "the operator can employ multicast to simultaneously serve many different requests for the _ same file _ that happen within the _ same time interval _ of duration @xmath21 , and thus reduce its servicing cost .",
    "we assume that both scbss and mbs can use multicast .",
    "namely , each scbs @xmath5 multicast transmissions satisfy the requests of users within its coverage area , while mbs transmissions satisfy requests generated within the coverage areas of different scbss ( and requests from area @xmath24 ) that have not cached the requested file .",
    "this latter option induces higher cost since the mbs has higher transmission cost and also needs to fetch the file via its backhaul link .",
    "this exactly is the main idea of this work : _ `` to carefully design the caching policy with concerns on the multicast transmissions so as to minimize the servicing cost''_.    before we introduce formally the problem , let us provide a simple example that highlights how the consideration of multicast transmissions impacts the caching policy .    *",
    "motivating example*. consider the scenario depicted in figure [ fig : example ] with two scbss ( @xmath28 and @xmath29 ) .",
    "there are three equal sized files ( @xmath30 , @xmath31 and @xmath32 ) .",
    "each scbs can cache at most one file because of it s limited cache size .",
    "we also set @xmath33 , @xmath34 and @xmath35 .",
    "we assume that requests are generated independently among different areas .",
    "thus , for each subset of areas @xmath36 it holds that : @xmath37 besides , we assume that the number of requests for each file @xmath19 within the coverage of scbs @xmath12 follows a poisson probability distribution with rate parameter @xmath38 , @xmath39 . thus , the probability that at least one request for file @xmath19 is generated within scbs @xmath12 in the time period @xmath21 is : @xmath40 let @xmath41 , @xmath42 , @xmath43 , @xmath44 , @xmath45 , and @xmath46 .",
    "then , @xmath47 , @xmath48 , @xmath49 , @xmath50 , @xmath51 and @xmath52 .",
    "the optimal caching policy places @xmath31 to @xmath28 and @xmath32 to @xmath29 .",
    "then , all the requests for @xmath30 will be served by transferring it via the backhaul link that connects the core network to the mbs and then transmitting it by the mbs ( via a single multicast ) .",
    "the requests for the rest files will be satisfied by the accessed scbss ( at zero cost ) .",
    "hence , the total servicing cost is : @xmath53 .",
    "however , if we ignore the multicast transmissions for aggregated requests when designing the caching policy , ( and thus assume that each request will be served via a separate unicast transmission ) , then _ the optimal caching policy changes _ ; it places file @xmath30 to both scbss ( because @xmath30 is the most popular file according to @xmath54 and @xmath55 ) .",
    "then , the requests within @xmath28 for @xmath31 and the requests within @xmath29 for @xmath32 will be served by the mbs .",
    "the total servicing cost is : @xmath56 , where the last term in the summation is multiplied by @xmath57 because _ two different files are requested for download _ and thus can not be served with a single multicast transmission ( i.e. , _ two unicast transmissions are required _ ) .",
    "this example demonstrates that ignoring the multicast transmissions in cache management decisions fails to fully exploit the multicast opportunities , and hence yields increased network servicing cost .     and @xmath29 ) . ]    * problem statement*. let us introduce the integer decision variable @xmath58 , which indicates whether file @xmath26 is placed at the cache of scbs @xmath59 or not .",
    "we also define the respective caching policy matrix @xmath60 . to facilitate notation",
    "we introduce variable @xmath61 which indicates whether a multicast transmission by the mbs will happen , for a given caching policy @xmath62 , and a subset of areas @xmath63 requesting file @xmath19 : @xmath64 where @xmath65 is the indicator function , i.e. , @xmath66 is equal to one iff condition @xmath67 is true ; otherwise it is equal to zero .",
    "for example , if a request is generated in a point that is not in the coverage area of any scbss , i.e. @xmath68 , then a multicast transmission will happen as the requester can not find the file at a scbs cache .",
    "thus , @xmath69 and the external max term is equal to 1 .",
    "similarly , @xmath70 for the case that a request is generated within the coverage area of _ at least one _ scbs @xmath71 , but the latter has not stored in it s cache the requested file .    the problem of determining the caching policy that minimizes the total servicing cost can be written as follows : @xmath72 the above expression in the objective function indicates that for each subset of areas @xmath63 that generate at least one request for file @xmath19 , within the same time period of duration @xmath21 , a single multicast transmission by the mbs happens , if there is at least one requester that is not in range with a scbs having cached the file @xmath19 . in other case ,",
    "i.e. , when @xmath73 , all the requests are satisfied by the accessed scbss . constraints ( [ eq : storeconstraint ] ) denote the cache capacity constraints of the scbss , whereas inequalities ( [ eq : constraint ] ) indicate the discrete nature of the optimization variables .",
    "we call the above the _ multicast - aware caching problem _ ( macp )",
    ".    observe that the description of the objective function in ( [ eq : objective ] ) is exponentially long in the number of scbss @xmath1 due to the number of subsets @xmath36 . in practice",
    "though , its description is affordable as the number of scbss @xmath1 in a single cell is typically small ( e.g. , a few decades ) .",
    "even so , as we prove in the next section , macp is an np - hard problem .",
    "in this section we prove the high complexity of the macp problem and present a heuristic algorithm for it s solution .",
    "namely , we show that the macp problem is np - hard by proving that the well known set packing problem ( spp ) is polynomial - time reducible to macp . in other words",
    ", we prove that spp is a special case of macp .",
    "since spp is np - hard it directly follows that macp is also np - hard .",
    "therefore , the following theorem holds :    _ macp is an np - hard problem .",
    "moreover , it is np - hard even to approximate it within a factor of @xmath74_.    in order to prove theorem @xmath17 we will consider the corresponding ( and equivalent ) decision problem , called multicast aware caching decision problem ( macdp ) . specifically :    _ macdp _ : given a set @xmath3 of scbss , a set @xmath15 of unit - sized files , the vector @xmath75 , the costs @xmath76 and @xmath77 , the time deadline @xmath21 , the request probability matrix @xmath78 , and a real number @xmath79 , _ we ask the following question _ : does there exist a caching policy @xmath62 , such that the value of the objective function in ( [ eq : objective ] ) is less or equal to @xmath80 and constraints ( [ eq : storeconstraint])-([eq : constraint ] ) are satisfied ?",
    "we denote this problem instance with @xmath81 .",
    "the set packing decision problem is defined as follows :    _ spp _ : consider a finite set of elements @xmath82 and a list @xmath83 containing subsets of @xmath82 .",
    "we ask : do there exist @xmath84 subsets in @xmath83 that are pairwise disjoint ?",
    "let us denote this problem instance by @xmath85 .",
    "the set packing problem is polynomial - time reducible to the macdp .",
    "consider the @xmath85 decision problem and a specific instance of macdp with @xmath86 scbcs , i.e. , @xmath87 , a file set of @xmath88 unit - sized files , i.e. , @xmath89 , unit - sized caches : @xmath90 , @xmath91 , @xmath92 , and @xmath93 .",
    "parameter @xmath21 is any positive number , and the question is if we can satisfy the users requests with cost @xmath94 , where @xmath84 is the parameter from the spp .",
    "the important point is that we define the elements of matrix @xmath95 as follows : @xmath96 observe that for given spp instances , we can construct the respective specific macdp in polynomial time .",
    "notice that with the previous definitions , @xmath97 is the @xmath98 component of the list @xmath83 and containts a certain subset of elements of @xmath82 . for the macdp , under the above mapping",
    ", this correspond to a subset of scbss asking with a non - zero probability file @xmath99 .",
    "moreover , with ( [ eq : probs ] ) we assume that these probabilities are equal and have value @xmath100 .",
    "if the mbs has to serve all the requests , then the macdp problem has a value ( cost ) of @xmath17 ( the worst case scenario ) . for each file",
    "@xmath19 that the operator manages to serve completely through local caching at the scbss , the operator reduces its cost by @xmath101 .",
    "this reduction is ensured only if the file is cashed in all the scbss @xmath102 for which @xmath103 .",
    "therefore , in order to achieve the desirable value @xmath94 , we need to serve locally the requests for @xmath84 files .",
    "that is , to find subsets of scbss @xmath63 where each file @xmath19 should be cached so as to avoid mbs multicasts .",
    "notice now that the caches are unit - sized .",
    "hence , the caching decisions should be disjoint with respect to the scbss .",
    "for example , in figure [ fig : np ] , you can not store in scbs 1 both files 1 and 2 , because @xmath104 .",
    "this ensures that you will not pick both the subsets @xmath105 and @xmath106 in the spp problem . in other words , the value of the objective function in ( [ eq : objective ] ) can be less or equal to @xmath107 , if there exist @xmath84 subsets in @xmath83 that are pairwise disjoint .    .",
    "in the macdp instance there are n=3 scbss and i=3 files .",
    "there is a solution to macdp of cost @xmath108 that places file @xmath17 to scbs 1 and file @xmath109 to scbss 2 and 3 .",
    "accordingly , the solution to spp picks the subsets @xmath110 and @xmath111 . ]",
    "conversely , if a set packing for some @xmath84 exists , then for each subset @xmath97 that is picked in it , one can place the file @xmath19 to the cache of each one of the scbss @xmath112 corresponding to this subset . at most one file is placed in each cache , since the picked subsets in the list are pairwise disjoint",
    ". the cost will be equal to @xmath107 .",
    "spp is np - hard and moreover it is inapproximable within @xmath113 @xcite .",
    "according to the reduction , we create a scbs for each one of the elements in @xmath82 , and hence it holds @xmath114 , which concludes the proof of theorem @xmath17 .    at this point , we need to emphasize that theorem @xmath17 holds also for the more general case that the scbss coverage areas are overlapping , which can be directly proved as this is a harder problem than the non - overlapping scbss that we considered in our analysis .",
    "this indicates that the multicast - aware problem is very hard even for the more simple non - overlapping coverage areas scenario .    * heuristic algorithm*. because of the above hardness results",
    ", we propose a light - weight heuristic algorithm for the solution of the macp problem .",
    "the proposed iterative algorithm starts with all the caches empty . at each iteration",
    ", it places the file to a non - full cache that yields the lowest value of the objective function in ( [ eq : objective ] ) .",
    "the algorithm terminates when all the caches become full .",
    "this is a greedy ascending procedure that can be summarized in algorithm @xmath17 .",
    "input : @xmath3 , @xmath15 , @xmath21 , @xmath115 , @xmath14 , @xmath38 , @xmath116 output : the caching policy @xmath62 + @xmath117 $ ] @xmath118 , @xmath14 @xmath119 @xmath120 @xmath121 @xmath122 @xmath123    specifically , @xmath124 is the number of files already placed at the cache of scbs @xmath12 at every iteration of the algorithm , and @xmath125 denotes the cartesian product of two sets .",
    "the set @xmath126 includes all the pairs @xmath127 for which the placement of file @xmath19 at the cache of scbs @xmath12 has not been performed yet , and the cache of @xmath12 has not been filled up yet .",
    "@xmath128 is the value of the objective function of the macp for the file placement @xmath62 , where we additionally set @xmath129 to evaluate the contribution of the @xmath127 pair . at every iteration ,",
    "algorithm 1 picks the pair @xmath130 with the lowest cost value @xmath131 .",
    "this corresponds to the placement of the file @xmath132 at the cache of the scbs @xmath133 .",
    "if the cache of scbs @xmath133 becomes full , then the algorithm excludes all the pairs @xmath134 , @xmath135 , from the set @xmath126 .",
    "that way , no more files will be placed at this cache .",
    "the algorithm terminates when all the caches become full .",
    "algorithm 1 requires @xmath136 iterations until all the caches become full . at each iteration",
    "it evaluates the value of the objective function after the placement of each one of at most @xmath137 files .",
    "to avoid confusion , we note here that algorithm 1 is known to achieve an approximation ratio equal to 2 for the caching problem without multicast @xcite . however , macp problem is hard even to approximate below @xmath0 , as we proved in theorem 1 .",
    "even so , as we show numerically in the next section , algorithm 1 provides significant performance gains compared to the existing caching schemes .     +   + ( a ) cache size ( b ) zipf - parameter ( c ) time deadline     fig .",
    "performance comparison of pac - ut , pac - mt , mac - mt for various values of ( a ) the cache size of each scbs , ( b ) the zipf parameter of the popularity distribution of the files and ( c ) the time deadline .",
    "in this section , we present the conducted experiments to evaluate the performance of the proposed algorithm .    we consider a single cell in which @xmath138 scbss are uniformly deployed around the mbs .",
    "we set @xmath139 and @xmath140 , @xmath14 .",
    "this indicates that the servicing cost comes to the operation of the mbs .",
    "besides , recent measurement - based studies indicated that a small number of content files often accounts for a large portion of traffic @xcite .",
    "we consider such a scenario and assume a limited number of @xmath141 unit - sized files .",
    "unless otherwise specified , @xmath142 units @xmath14 ( i.e. , can store up to @xmath143 files each ) , @xmath144 seconds , and the popularity distribution of the files follows the zipf law , with shape parameter _ _",
    "the number of file requests generated within the coverage area of each scbs follows the poisson distribution with rate parameter that is uniformly and independently picked between the values 1 and 10 requests per second .",
    "finally , we set @xmath146 , @xmath147 .    we compare the performance of three schemes :    1 .",
    "_ popularity aware caching @xmath148 unicast transmissions ( pac - ut ) _ : the standard mode of operation currently in use in most caching systems .",
    "each scbs stores in it s cache the most popular files independently from the others .",
    "each request is served by a separate unicast transmission .",
    "popularity aware caching @xmath148 multicast transmissions ( pac - mt ) _ : each scbs stores in it s cache the most popular files independently from the others .",
    "requests for the same file within the same time period are served by a single multicast transmission .",
    "_ multicast aware caching @xmath148 multicast transmissions ( mac - mt ) _ : we apply algorithm 1 to decide the cache placement .",
    "requests for the same file within the same time period are served by a single multicast transmission .",
    "below , we compare the performance of the above schemes as a function of the cache sizes , the file request pattern and the duration of the time deadline of the users .",
    "* impact of the cache sizes : * figures in 4(a ) compare the performance of the discussed schemes when the cache size per scbs is varied from @xmath149 to @xmath150 of the entire file set size . as expected , increasing the cache sizes reduces the servicing cost of the operator as more requests are satisfied locally ( without the participation of the mbs ) .",
    "pac - ut results largest servicing cost compared to the other two schemes , since the latter two schemes serve many aggregated requests via a single multicast instead of many unicast transmissions . the proposed scheme ( mac - mt )",
    "consistently outperforms the others , obtaining cost reduction up to @xmath2 and @xmath151 when compared to the pac - mt and the pac - ut scheme respectively .",
    "* impact of the file request pattern : * figures in 4(b ) illustrate the impact of the steepness of the file popularity distribution on the performance of the above schemes .",
    "we observe that as the zipf - parameter _ a _ increases , the servicing cost decreases for all the schemes , reflecting the well known fact that caching effectiveness improves as the popularity distribution gets steeper .",
    "mac - mt outperforms the other schemes , especially for low values of _ a_. the cost reduction when compared to the pac - ut scheme is almost @xmath152 for the case that _ _ a__=0.2 . however , when the popularity distribution becomes steep enough , the performance of the mac - mt scheme is very close to the other schemes .",
    "this is because , a small number of ( popular ) files receive a big fraction of the users request demand , and thus the placement of these files to the caches satisfies most of the demand locally .",
    "interestingly , in the area of _ _",
    "a__@xmath153 $ ] , our scheme achieves significant gains compared to the others .",
    "this is of major importance considering that the traffic generation in reality follows a zipf distribution with a parameter _ a _ around @xmath154 @xcite , @xcite .",
    "* impact of the time deadline @xmath21 : * finally , figures 4(c ) shows how the performance of the discussed schemes depends on the time parameter @xmath21 .",
    "this is the maximum time duration that a request must be satisfied in order to be acceptable by the users ( and/or the service ) .",
    "particularly , as the time deadline @xmath21 ( and hence the duration of the time period of service ) becomes larger , more requests are aggregated for the same file within @xmath21 , and thus more requests are served via multicast transmissions .",
    "therefore , the performance gap between each one of the schemes that enable mulitcast transmissions ( pac - mt and mac - mt ) and the pac - ut becomes larger . besides , increasing the time deadline @xmath21 increases the gap between pac - mt and mac - mt .",
    "this is because , more multicast transmissions happen and mac - mt is the only scheme out of the three that is designed with concerns on them .",
    "in this paper , we considered storage capable small cell base stations and proposed a novel caching scheme to minimize the cost incurred for serving the file requests of mobile users .",
    "this is a topic of major importance nowadays , as the mobile data demand growth challenges the cellular operators .",
    "in contrast to the traditional caching schemes that simply bring popular content close to the users , our caching strategy is carefully designed so as to additionally exploit the multicast opportunities .",
    "interestingly , we find that a simple ascending greedy algorithm achieves cost reduction up to @xmath152 when compared to the existing schemes that perform only unicast transmissions .",
    "even when multicast transmissions are employed by other schemes , our caching policy outperforms them , achieving cost reduction up to @xmath155 ."
  ],
  "abstract_text": [
    "<S> the deployment of small cells is expected to gain huge momentum in the near future , as a solution for managing the skyrocketing mobile data demand growth . </S>",
    "<S> local caching of popular files at the small cell base stations has been recently proposed , aiming at reducing the traffic incurred when transferring the requested content from the core network to the users . in this paper , we propose and analyze a novel caching approach that can achieve significantly lower traffic compared to the traditional caching schemes . </S>",
    "<S> our cache design policy carefully takes into account the fact that an operator can serve the requests for the same file that happen at nearby times via a single multicast transmission . </S>",
    "<S> the latter incurs less traffic as the requested file is transmitted to the users only once , rather than with many unicast transmissions . </S>",
    "<S> systematic experiments demonstrate the effectiveness of our approach , as compared to the existing caching schemes . </S>"
  ]
}