{
  "article_text": [
    "in this paper we continue the task introduced in  @xcite .",
    "let us briefly remember the basic features",
    ".    given a parametric polynomial ideal @xmath0[{\\overline{x}}]$ ] in the variables @xmath1 and the parameters @xmath2 , and monomial order @xmath3 , our interest is to find the different types of solutions for the different values of the parameters .",
    "let @xmath4 be a computable field and @xmath5 an algebraically closed extension .",
    "a specialization is the homomorphism @xmath6[{\\overline{x}}]\\rightarrow { { \\overline{k}}}[{\\overline{x}}]$ ] , that corresponds to the substitution of the parameters by concrete values @xmath7 .",
    "a comprehensive grbner system ( cgs ) is a set of pairs : @xmath8,\\\\ & & \\",
    "\\sigma_{{\\overline{\\alpha}}}(b_i ) = { \\operatorname{gb } } ( \\sigma_{{\\overline{\\alpha}}}(i ) , \\succ_{{\\overline{x } } } ) \\ \\forall { \\overline{\\alpha}}\\in s_i\\ , \\text{and } \\bigcup_i s_i=\\overline{k}^m \\ } , \\end{array}\\ ] ] where the @xmath9 are called  segments \" and the @xmath10  bases \" .",
    "frequently the word  segment \" is also used for the pair @xmath11 whenever the sense is clear from the context .",
    "there are different known algorithms that provide comprehensive grbner bases and systems for a given ideal :    * cgb  @xcite , * acgb  @xcite , * sacgb  @xcite , * hsgb  @xcite , * buildtree  @xcite .",
    "there are available implementations  @xcite of weispfenning s cgb algorithm in reduce , of suzuki - sato s sacgb in risa / asir and in maple  @xcite and of montes s buildtree in maplemontes , and is actualized with the mccgs algorithm . ] .",
    "all these algorithms allow to build both comprehensive grbner bases and systems , but they are differently oriented .",
    "a comparison of the most interesting among them is given in section  [ compare ] .",
    "in fact , comprehensive grbner systems are in general more effective to handle for their use in the applications than comprehensive grbner bases .",
    "but it is also convenient to require some more additional features to these grbner systems when looking for applications .",
    "the first requirement is to have _ disjoint _ and _ reduced _ cgs . by disjoint",
    "we mean that the @xmath9 form a partition of @xmath12 , and by reduced that the bases @xmath10 specialize to the reduced grbner basis of @xmath13 preserving the leading power products ( @xmath14 ) , for every value @xmath15 of the parameters inside @xmath9 .",
    "the algorithm buildtree ( introduced in  @xcite as dispgb and improved in  @xcite ) already builds a disjoint , reduced cgs .    in  @xcite the interest",
    "is focused in the improvement of buildtree to obtain a simpler and canonical cgs .",
    "the method consists of grouping together all the segments with the same @xmath14 that allow a same basis specializing well on all the grouped segments .",
    "a natural conjecture establishes the existence of an equivalence relation between the segments having the same @xmath14 , and an algorithm is given to compute the basis corresponding to the grouped segments .    in order to obtain a truly canonical cgs we need to describe the segments in a canonical way",
    "this is the objective of the present paper . in",
    "@xcite a canonical description of a segment determined by a diff - specification was already given , but it remained to obtain a canonical representation of the addition of such segments .",
    "the objective is thus to obtain the mccgs ( minimal canonical cgs ) .",
    "[ defmccgs ] we call minimal canonical cgs ( mccgs ) a cgs with the following properties :    1 .   disjoint cgs , i.e. @xmath16 for @xmath17 ; 2 .   reduced cgs , i.e. the polynomials in @xmath10 have content @xmath18 w.r.t .",
    "@xmath19 , @xmath10 specializes to the reduced grbner basis of @xmath13 for every @xmath20 , their leading coefficients are non - null on @xmath9 and their @xmath14 remain stable ; 3 .",
    "the sets @xmath21 are intrinsic for the given @xmath22 and @xmath3 and are described in a canonical form .",
    "the number of segments of the cgs with the above properties is minimal .",
    "the currently existing algorithms that can build comprehensive grbner systems , say buildtree , cgb , ccgb , acgb and sacgb , do not hold all these properties .",
    "buildtree builds a comprehensive grbner system satisfying properties i ) and ii ) . but",
    "cgb , acgb and sacgb do not hold property i ) , at least . finally , although the grbner system obtained within ccgb is canonically determined , does not hold properties i ) nor ii ) as for the obtention of a comprehensive grbner basis the algorithm needs the grbner systems to be faithful .",
    "it must be emphasized that the existence of the mccgs depends on the conjecture formulated in  @xcite about the existence of an equivalence relation between segments allowing a common basis .",
    "if the conjecture is true , then the computation using mccgs algorithm proposed in  @xcite and in this paper , already depends on the semi - algorithm genimage given there for computing pre - images , that uses arbitrary bounds .    with these restrictions ,",
    "mccgs algorithm builds a comprehensive grbner system satisfying all the properties in definition  [ defmccgs ] .",
    "these properties will make the algorithm more suitable for the applications .",
    "in particular , they are very appropriate for automatic theorem proving and discovery ( see @xcite ) as well as to compute geometric loci as shown in example  [ conicex ] .",
    "furthermore , mccgs also allows to restrict the parameter space to a constructible set and impose a - priori null and non - null conditions .",
    "this is also an interesting tool for applications when we want some degenerate cases to be avoided ( see section  [ applicationsection ] ) or restrictions on the parameters to be given .",
    "for example , when the parameters involve angles , and the equations are given using the sine and cosine of the angles as parameters , it is important to restrict the solutions to @xmath23 .",
    "the whole algorithm mccgs is achieved by three steps :    1 .",
    "buildtree ( described in  @xcite ) , 2 .   grouping segments with common basis ( described in  @xcite ) , 3 .",
    "representing the subsets in canonical form .",
    "this part will be described in sections  [ addingsection ] and  [ algorithmsection ] .",
    "although the algorithm requires two term orders ( one for the variables @xmath3 and another for the parameters @xmath24 ) , the result will not depend on @xmath24 , as the segments @xmath11 are intrinsic for the given ideal @xmath22 and the term order @xmath3 . even though , @xmath24 will be used to determine the reduced grbner bases of the ideals involved in the description of @xmath9 .",
    "the paper is structured as follows : section [ secpreliminaries ] is devoted to recalling some properties and results from @xcite which are used in the subsequent sections .",
    "the generalization of the canonical specification and its properties are given in section [ addingsection ] . in section [ algorithmsection ]",
    "we give the algorithm which collects the corresponding segments into a generalized canonical specification and builds up the minimal canonical comprehensive grbner system ( mccgs ) . in section [ applicationsection ] a practical application to automatic theorem proving",
    "is given . finally , in section",
    "[ compare ] we compare the main available cgs algorithms .",
    "we describe now briefly steps i ) and ii ) of the mccgs before tackling the last step iii ) that will be studied in this paper .",
    "the algorithm starts with a parametric ideal @xmath22 and a term - order @xmath3 on the variables .",
    "an auxiliary term - order @xmath24 over the parameters is needed to describe the subsets in @xmath12 using grbner bases .",
    "it does not affect the segments themselves but only their description .",
    "step i ) is performed by buildtree algorithm , and was described for the first time in  @xcite and improved in  @xcite .",
    "the output is a disjoint reduced cgs , where the subsets @xmath9 are determined by _ red - specifications_. a red - specification of a segment @xmath25 is described by the pair @xmath26 , where @xmath27 is the radical null - conditions ideal , and @xmath28 is a set of irreducible ( prime ) polynomials on @xmath29 $ ] representing non - null conditions such that no prime component @xmath30 of the prime decomposition of @xmath27 does contain any of the polynomials in @xmath28 .",
    "we have @xmath31 with @xmath32 . a red - specification determined by @xmath26",
    "is easily transformed into a _",
    "diff - specification _",
    "@xmath33 with @xmath34 where @xmath35 , by considering the polynomial @xmath36 and taking @xmath37 .",
    "let us denote @xmath38 the output of buildtree that consists of a list of segments each represented by the three objects @xmath39 .",
    "remember that each of these segments have characteristic set of @xmath14 of their bases @xmath10 that are preserved by specialization on @xmath9 .",
    "we say that a basis @xmath40 _ specializes well _ to @xmath41 , with @xmath42 , if the polynomials of @xmath43 are proportional to the polynomials of @xmath44 , i.e. for each @xmath45 there exist @xmath46 and @xmath47 such that @xmath48 , where @xmath49 .",
    "step ii ) , described in  @xcite , selects the segments of @xmath50 with the same @xmath14 that admit a common reduced basis specializing well to the reduced grbner basis for every specialization in the grouped segments .",
    "if conjecture 7 in  @xcite is true , the grouped segments form an intrinsic partition of the parameter space . to perform that task the algorithms decide and genimage are used .",
    "the first one tests whether one from two segments with the same @xmath14 has already a generic basis specializing to the other ( this is the most frequent case ) or a sheaf exists and is necessary or whether possibly a more generic basis must be found ( by genimage ) . whenever no pre - image nor sheaf is found",
    "then both segments are not equivalent and can not be summarized .",
    "it can happen that instead of simple polynomials the basis @xmath10 contains also sheaves of polynomials .",
    "a sheaf @xmath51 is accepted in a basis of a segment instead of a simple polynomial , whenever all the polynomials in the sheaf specialize to the corresponding polynomial of the reduced grbner basis of the specialized ideal or to @xmath52 , and some of the polynomials in the sheaf specialize to non - zero for every @xmath20 . as was shown in  @xcite",
    ", it is necessary to use sheaves for some over - determined systems if we want to group all the segments admitting a common basis with the same @xmath14 .",
    "we must notice that decide algorithm also depends on the semi - algorithm genimage to determine a polynomial @xmath53 that specializes well to @xmath54 over @xmath55 and to @xmath56 over @xmath57 .",
    "thus the canonicity of the results of the computation of a mccgs relies on genimage and the truthfulness of the mentioned conjecture .",
    "let us denote the output of the second step @xmath58 .",
    "it will be described by segments with a common basis @xmath10 and a set of red - specifications : @xmath59 @xmath9 will now be the union of the segments determined by the red - specifications @xmath60 for @xmath61 from 1 to @xmath62 .",
    "step iii ) will be described in next sections .",
    "its objective is to give a canonical description of the union of the grouped segments of step ii ) . in",
    "@xcite it was shown how a diff - specification can be transformed into a _ can - specification_. here we will prove that the union of red - specifications or their corresponding diff - specifications can be transformed into a generalized can - specification using what we call a @xmath63-tree .",
    "the idea is based on theorem 12 in  @xcite .",
    "let us give here a slightly different formulation of it , more appropriate for the current purposes .",
    "[ thm10 ]    1 .    2 .",
    "every diff - specification @xmath64 admits a unique can - specification @xmath65 where @xmath66 and @xmath67 are the irredundant prime decompositions over @xmath68 of the radical ideals @xmath69 and @xmath70 respectively , where @xmath71 .",
    "3 .   the zariski closure over @xmath72 verifies @xmath73 4 .",
    "the can - specification verifies @xmath74 5 .   given a diff - specification of @xmath25 the algorithm difftocanspec  @xcite builds its can - specification .",
    "the need of having a canonical description of the intrinsic segments comes from the need of comparing different outputs for the same problem , and also to have a final simple description of the segments .",
    "we tackle now the third step of mccgs , i.e. the description of the union of the segments in a canonical form . we start with segments of the form  ( [ grouping ] ) .",
    "the red - specifications @xmath26 can be transformed into diff - specifications @xmath33 , as explained in section  [ secpreliminaries ] , so we are attained with the obtention of a canonical representation for the addition of diff - specifications .",
    "we can not assume that the simple form given by formula  ( [ canspecform ] ) will be sufficient .",
    "a more complex constructible set will be formed grouping all the segments @xmath75 for @xmath76 .",
    "thus we generalize the concept of canonical specification given in @xcite :    [ defptree ] a p - tree is a rooted directed tree such that    1 .",
    "the nodes are prime ideals over @xmath68 except the root , denoted @xmath77 , 2 .   when @xmath78 is an arc then @xmath79 , 3 .",
    "the children of a node are a set of irredundant prime ideals over a , ( whose intersection form a radical ideal ) .    by definition",
    "the root level is @xmath52 .",
    "[ defctree ] to any p - tree we associate an isomorphic c - tree by changing every node @xmath63 to a subset of @xmath72 denoted @xmath80 by the following recursive procedure :    1 .",
    "if @xmath63 is a leaf ( terminal vertex ) then @xmath81 , 2 .   if @xmath63 is an inner node different from the root and @xmath82 are its children , then @xmath83 3 .",
    "if @xmath82 are the children of the root vertex @xmath77 then @xmath84    note that for @xmath85 the parity of the vertex - level acts additively for odd level vertices and as a subtraction for even level vertices .",
    "( see example  [ exampletree ] below ) .    [ defgcs ]",
    "a generalized canonical specification ( gcs ) of a set @xmath25 is a p - tree such that @xmath86 satisfying , for every node @xmath63 at level @xmath87 , the following condition : @xmath88 where @xmath89 for @xmath87 odd and @xmath90 for @xmath87 even .",
    "[ exampletree ] to clarify the definition suppose that we want to describe the set @xmath91 of the @xmath92-space with coordinates @xmath93 consisting of the planes @xmath94 and @xmath95 except the lines @xmath96 and @xmath97 plus the point @xmath98 .",
    "we can express @xmath91 as @xmath99 but there exist many other possible determinations of this set .",
    "if we want to obtain the gcs of @xmath91 we must write @xmath91 in the form @xmath100     trees representing the sets @xmath91 and @xmath101 in generalized can - specification.,width=491 ]    this formula can be represented by the tree associated to @xmath91 shown in figure  [ examplegcstree ] .",
    "notice that we must include the point @xmath102 under the branch of @xmath103 , as this point belongs to @xmath91 and condition ( [ gencanspecprop ] ) requires it to belong also to @xmath104 .",
    "the interest of that representation lies in the fact that it is unique as we prove in theorem [ gencanspecthm ] below .",
    "consider now the set @xmath105 . in order to preserve property ( [ gencanspecprop ] ) of the gcs definition ,",
    "the p - tree associated to @xmath101 will be modified from the p - tree associated to @xmath91 by eliminating the point under the variety @xmath103 and setting it under the variety @xmath106 .",
    "the new tree is also shown in figure [ examplegcstree ] .",
    "these examples should clarify the definition of gcs to obtain canonicity of the description by preserving condition ( [ gencanspecprop ] ) .",
    "[ gencanspecthm ] a subset @xmath107 defined by a gcs has the following properties :    1 .    2 .   for every vertex @xmath63 , except for the root , @xmath108 where , as usual , the zariski closure is taken over @xmath72",
    "3 .   for the root vertex",
    "@xmath77 @xmath109 where the @xmath110 s are the children vertices of @xmath77 .",
    "4 .   @xmath25 has a unique gcs decomposition .    1 .",
    "the inclusion @xmath111 is obvious as @xmath112 . to prove the equality",
    "we have @xmath113 consider the closure of the above formula and apply theorem  [ thm10 ]  ( ii ) .",
    "the result follows .",
    "2 .   is an immediate consequence of i ) .",
    "3 .   to prove the uniqueness we proceed by induction on @xmath114 .",
    "for @xmath115 , the tree is formed by the root @xmath77 and a set of children nodes forming an irredundant prime decomposition of the radical ideal defining @xmath25 , by definition  [ defptree ]  iii ) .",
    "thus , in this segment the p - tree is unique .",
    "+ assume now by induction hypothesis the uniqueness of the gcs for every p - tree of maximum depth less than @xmath114 and let us prove , as a consequence , the uniqueness also for depth @xmath114 .",
    "let @xmath25 be defined by a p - tree of maximal depth @xmath114 representing a gcs . by part ( ii ) of the theorem we have @xmath116 where the @xmath117 s form the unique irredundant prime decomposition over @xmath68 of the radical ideal @xmath118 defining @xmath119 by definition  [ defptree ]  ( iii ) .",
    "thus they are uniquely determined . denoting @xmath120 the children of @xmath110 , by ( [ gencanspecprop ] ) , we have @xmath121 showing that @xmath122 is also uniquely determined",
    ". set @xmath9 for the subtracting set @xmath123 as @xmath124 , @xmath9 is also uniquely defined by ( [ gcspi ] ) . by definition [ defgcs ] , formula ( [ gencanspecprop ] ) , we have @xmath125 thus @xmath126 and so @xmath127 by the ascending chain condition for the ideals in the branches and condition ( [ gencanspecprop ] ) for the p - tree of @xmath25 , equation ( [ propcij ] ) ensures that condition ( [ gencanspecprop ] ) is also respected for the subtree of @xmath9 , whose root vertex is given by ( [ defci ] ) .",
    "thus the subtree of @xmath9 also forms a gcs of @xmath9 with depth less than @xmath114 . by the induction hypothesis",
    "it is uniquely determined and so does the complete p - tree of @xmath25 .",
    "given an ideal @xmath22 and the monomial orders @xmath3 for the variables and @xmath24 for the parameters , the following sequence of algorithms build up the @xmath63-tree @xmath128 corresponding to the minimal canonical comprehensive grbner system associated to @xmath22 and @xmath3 .",
    "we describe them in descendent design .    tree @xmath128 @xmath129 * mccgs*@xmath130 + _ input : _ @xmath44 a basis of the parametric polynomial ideal @xmath22 and monomial orders @xmath131",
    ". + _ output : _",
    "@xmath128 a tree containing the minimal canonical comprehensive grbner system associated to @xmath22 .",
    "+    set of pairs @xmath25 @xmath129 * selectcases*@xmath132 + _ input : _ @xmath133 a buildtree discussion tree",
    "whose terminal vertices shape a cgs with red - specifications .",
    "+ _ output : _ @xmath25 a finite set of pairs of the form @xmath134 taken from the cgs associated to @xmath133 .",
    "+    @xmath135    mccgs uses buildtree ( see @xcite ) to build up the discussion tree @xmath133 containing a cgs whose segments are expressed as red - specifications . then selectcases takes @xmath133 as input and classifies the segments from the cgs associated to @xmath133 into pairs of the form @xmath136 , where @xmath137 is a set of red - specifications @xmath138 whose corresponding bases have been generalized by the same basis @xmath10 .",
    "afterwards , mccgs calls the new algorithm gencantree to finally obtain the mccgs associated to the initial ideal and term order .",
    "tree @xmath128 @xmath129 * gencantree*@xmath139 + _ input : _ @xmath25 a finite set of pairs of the form @xmath134 .",
    "+ _ output : _ the canonical tree @xmath128 associated to @xmath25 .",
    "+    @xmath140    tree @xmath141 @xmath129 * gcs*@xmath142 + _ input : _",
    "@xmath143 a finite set of red - specifications + _ output : _ a tree containing the generalized can - specification associated to the addition of segments in @xmath143 .",
    "+    gencantree uses gcs algorithm to build the @xmath63-tree corresponding to the generalized canonical specification of the addition of segments .",
    "gcs algorithm begins by setting the ideal @xmath144 at the root of new tree @xmath141 and calls iteratively the recursive algorithm addcase .",
    "it must be noted that there are two kinds of nodes , namely odd level vertices and even level vertices , that are treated differently by addcase .",
    "addcase uses two auxiliary algorithms : difftocantree ( a minor transformation of difftocanspec ) converts a diff - specification into a @xmath63-tree containing the associated can - specification , and simplifysons just makes the suitable simplifications .    at the first iteration addcase stores under root the @xmath63-tree of the unique canonical specification associated to @xmath145 .",
    "then , to add each further red - specification @xmath60 , addcase executes itself recurrently in post - order at the even level vertices @xmath146 and adds the can - specification associated to @xmath60 contained in @xmath147 .",
    "for example , in figure  [ addsegmentgraf ] it would act successively on the vertices @xmath148     the action of addcase . ]",
    "( bool , tree @xmath141 ) @xmath129 * addcase*@xmath149 + _ input : _ @xmath26 a red - specification , @xmath150 the current vertex in @xmath63-tree @xmath141",
    ". + _ output : _",
    "@xmath151 if @xmath26 is not to be added to parent vertices , @xmath152 otherwise . it also returns current tree @xmath141 .",
    "+    @xmath153    tree @xmath141 @xmath129 * simplifysons*@xmath154 + _ input : _",
    "@xmath155 a vertex at odd level of tree @xmath141 where to start the simplifications .",
    "+ _ input : _ the tree after simplifications + _ description _ : + simplifysons just simplifies the subtree under @xmath155 on the global @xmath141 in order to not having cancellations nor inclusions between the children of @xmath155 .",
    "let @xmath63 be the prime stored in vertex @xmath155 .",
    "the simplification is performed as follows : + check that there is no @xmath110 child of @xmath63 such that @xmath156 . and if any , hang to @xmath63 all subtrees descendant from @xmath120 and drop both @xmath110 and @xmath120 from @xmath141 .",
    "then check whether there is any pair of children of @xmath63 , @xmath157 , @xmath158 , such that @xmath159 .",
    "if so , drop subtree hanging from @xmath160 and also vertex @xmath161 .    tree @xmath162 @xmath129 * difftocantree*@xmath163 + _ input : _ @xmath164 a diff - specification .",
    "+ _ output : _ a tree structure containing the can - specification of @xmath165 .",
    "+    thus , before acting on an even vertex @xmath146 , the algorithm must have acted on all its even descendants .",
    "therefore , if an even level descendant @xmath155 verifies that @xmath166 , then the can - specification associated to @xmath60 must have been completely hung under @xmath155 . in this case",
    "the _ test _ variable will contain _ false _ and thus difftocantree for current @xmath60 will not act on @xmath167 nor on any of its ascendant vertices .",
    "we must also remind that the ideals associated to the paths in @xmath141 starting from root form ascending chains of prime ideals .",
    "thus , whenever _ test _ is _ false _ , the condition cited above will also hold for all vertices placed between @xmath150 and @xmath155 , even the odd level ones , i.e. for all @xmath168 descendent of @xmath150 and ascendant of @xmath155 , @xmath169 .",
    "this way , addcase completes current p - tree @xmath141 to a new tree such that for every odd level vertex @xmath150 with prime ideal @xmath167 , all points in @xmath170 ( where @xmath171 ) are in @xmath172 , as required .",
    "nevertheless in the new tree completed by addcase it could happen that @xmath173 for some even level vertex @xmath150 , which would cause that @xmath167 and its unique child @xmath174 coincide .",
    "if so , simplifysons takes the subtree under child@xmath175 , slips it upwards hanging it from parent@xmath175 and eliminates both vertices @xmath150 and child@xmath175 from the tree .",
    "when this action is performed , it could also happen that some set of current even level siblings do not preserve the prime decomposition irredundancy property , as some lifted primes can contain some of their sibling vertices , i.e. @xmath176 such that @xmath177 for @xmath150 an even level vertex in @xmath141 .",
    "simplifysons algorithm also detects these cases and eliminates the subtrees hanging from @xmath178 as well as @xmath178 .",
    "though , the action of simplifysons will restore the gcs - condition property of the tree .",
    "note : for algorithmic reasons , all paths starting from root vertex in a @xmath63-tree will be of even length .",
    "thus for odd length branches , the algorithm will add a new vertex @xmath179 $ ] at the end .",
    "the above described algorithms build the complete mccgs of the initial ideal .",
    "the following theorem states that gcs algorithm builds the generalized can - specification ( gcs ) associated to the set of the corresponding diff - specifications :    given a finite list of pairs @xmath180 of red - specifications , gcs@xmath142 computes the @xmath63-tree associated to the generalized can - specification determining the constructible set @xmath181    let @xmath182 .",
    "the proof is done by induction on @xmath183 , the number of red - specifications to be added .    for @xmath184 ,",
    "gcs uses difftocantree just once and , by theorem 1 ( iv ) , it builds up the unique can - specification in tree @xmath141 . thus @xmath141 is a @xmath63-tree such that @xmath185 .    by induction hypothesis ,",
    "assume now that after the @xmath186 iteration of addcase the gcs tree of the @xmath186 red - specifications has been built and let @xmath187 be this tree , which is a @xmath63-tree such that @xmath188 and such that every vertex @xmath189 holds that @xmath190 .",
    "we shall prove that the @xmath183-th iteration will build the gcs tree of @xmath25 .",
    "let us describe how the recursive addcase algorithm acts on @xmath187 adding @xmath191 .",
    "denote by @xmath192 the operation on an even level vertex @xmath150 that hangs to it the tree associated to the can - specification of @xmath193 contained in @xmath147 ( i.e. @xmath194 whenever it can be hung and returns @xmath151 or @xmath152 depending on whether parent@xmath195 or not , respectively .",
    "so it hangs the points @xmath196 , and thus @xmath197 .",
    "@xmath192 is applied recursively in post - order .",
    "if @xmath192 returns @xmath151 at some even level vertex @xmath150 , the whole set @xmath198 has been hung under @xmath150 and thus , as @xmath150 is even , @xmath199 .",
    "then @xmath200 will not be applied to any of its ascendant vertices because @xmath201 .",
    "if @xmath192 returns @xmath152 for all @xmath202 , which means that @xmath203 has not completely been hung under root , then the @xmath63-tree corresponding to the red - specification @xmath193 computed by difftocantree will be hung from root .",
    "thus , we finally have that @xmath201 .    this way , gcs algorithm obtains , as simplifysons ensures , a @xmath63-tree @xmath141 such that for every node @xmath204 holds that @xmath205 and @xmath206 .",
    "furthermore , gencantree algorithm performs a gcs computation for each list of segments whose associated reduced grbner bases specialize properly , obtaining a tree for which the subtrees hanging from the root correspond to the generalized can - specifications of the lists configuring a partition of the parameter space .",
    "thus , mccgs algorithm performs the discussion and obtains the minimal canonical comprehensive grbner system stored in the output tree @xmath128 .",
    "[ conicex][singular points of a conic ] the general equation of a conic can be reduced by a suitable change of variables to the form @xmath207 to study its singular points consider the system of equations     mccgs for the singular points of a conic system . ]",
    "@xmath208,\\ ] ] and apply mccgs algorithm to @xmath25 using @xmath209 and @xmath210 for variables and parameters respectively .",
    "the result is shown in figure  [ conicsingpointtree ] .",
    "the interpretation of the output tree is the following .",
    "there are three different segments : the generic case with @xmath14 set @xmath179 $ ] where the conic has no singular points , the segment with @xmath14 set @xmath211 $ ] corresponding to a single singular point in the conic , and the segment with @xmath14 set @xmath212 $ ] corresponding to a solution with one degree of freedom , where the conic is a double line .",
    "the conditions over the parameters given by the trees are to be interpreted in the following way :    [ cols=\"^,<,<\",options=\"header \" , ]     the first segment is described by the whole @xmath213 space minus the three curves @xmath214 and the lines @xmath215 and @xmath216 . the second one is described by the curve @xmath217 except the origin .",
    "the third one is the line @xmath215 minus the origin and the forth segment is described by the line @xmath216 minus the origin .",
    "these four segments have empty intersection and are associated to bases with lpp set @xmath218 $ ] .",
    "their union corresponds to the unique generic segment in mccgs , namely the whole @xmath213 space minus the two curves @xmath219 and @xmath220 .",
    "the segment in sacgb with lpp set @xmath221 $ ] is described by the curve @xmath220 except the origin , which corresponds exactly to the segment associated to the same lpp set in mccgs .    the segment with lpp set @xmath222 $ ] and described by the curve @xmath223 minus the origin also coincides with the one in mccgs associated to this lpp set .    and",
    "finally , the segment having basis with lpp set @xmath224 $ ] is described on the origin @xmath225 , which agrees with the segment associated to the same lpp set in mccgs .",
    "all seven segments have no common intersection and thus they form a partition of the @xmath213 space , even though sacgb does not ensure it .    [ exninepoints ]",
    "we also have tried to test sacgb with the systems of the nine points circle theorem explained in section [ applicationsection ] above .",
    "sacgb after 3 hours of computation went out of memory and had not yet reached an end , while mccgs takes only 11.45 sec . for testing the compatibility of the hypotheses and 2.21 sec . for discussing the theorem thesis .",
    "[ exromin ] the last test is the system of the romin robot@xcite : @xmath226\\ ] ] wrt @xmath227 and @xmath228 .",
    "mccgs takes 43.23 sec in discussing the system and provides 9 segments .",
    "sacgb also went out of memory .    * conclusions the interest of mccgs relies , essentially , in the simplicity of the output for applications , and in the canonical character of it , conceding an easier interpretation of the results .",
    "we have also observed that the obtention of the mccgs from the buildtree cgs only increases the computation time in about 20 - 30% .",
    "the existence of the mccgs depends on the conjecture formulated in  @xcite .",
    "the use of the algorithm will provide evidence of it or a counterexample . in almost all the high number of tests that we have done the algorithm has always obtained a unique segment for each different @xmath14 set , confirming the conjecture .",
    "the only ideal for which the algorithm obtains two different segments with the same @xmath14 is @xmath229 proposed by  @xcite , and there both segments are clearly intrinsically different and can not be merged nor summarized into a single one .",
    "thus this example also provides evidence of the conjecture . to give a counterexample proving the falsehood of the conjecture",
    ", we must find an ideal for which the algorithm mccgs obtains two or more segments with the same @xmath14 which could be merged or summarized in a different way .",
    "although we have only made some very simple tests with cgb , we have observed that it seems faster than sacgb and mccgs in those specific problems .",
    "it stands out for computing a cgs with faithful bases which are not always useful for applications .",
    "experimentally , it seems to obtain a partition of the parameter space , even if there is no theoretic evidence .",
    "nevertheless , the number of segments is much higher than mccgs and are difficult to understand",
    ".    sacgb stands out for being in general very reliable to compute a cgs .",
    "its efficiency depends on the type of system to be dealt with .",
    "it seems to behave faster than mccgs in problems for which a low number of cases is expected .",
    "furthermore , we must remind that the output of sacgb is very complex and also needs extra simplifications to be interpreted .",
    "one can also adapt the mccgs algorithm to the cgs obtained by other algorithms instead of buildtree . to do",
    "this one needs to transform the output of the involved algorithm into a disjoint reduced cgs , and then apply step ii ) and iii ) , i.e. selectcases and mccgs .",
    "mccgs takes , generally , more cpu time for simple problems .",
    "nevertheless the simplifications inside mccgs often allow to discuss systems of higher complexity , as seen in examples [ exninepoints ] and [ exromin ] above .",
    "finally , we have seen that mccgs algorithm stands out for having the best features to be used for automatic theorem proving and discovering as well as for other applications .",
    "we are very grateful to josep m. brunat for his suggestions on the recursive handling of trees .",
    "we would also like to thank professor pelegr viader for his many helpful comments and his insightful perusal of our first draft .",
    "finally , we also want to thank our referees for their very helpful comments .",
    "nabeshima , k. , 2005 . a computation method for acgb - v .",
    "proceedings of a3l 2005 ( conference in honour of the 60th bithday of v. weispfenning ) , eds .",
    "a. dolzmann , a seidl , t. sturm .",
    "p 171 - 180 .",
    "bod norderstedt .",
    "sato , y. , 2005 .",
    "stability of grbner basis and acgb .",
    "proceedings of a3l 2005 ( conference in honour of the 60th birthday of v. weispfenning ) , eds .",
    "a. dolzmann , a seidl , t. sturm .",
    "p 223 - 228 .",
    "bod norderstedt .",
    "suzuki , a. , sato , y. , 2006 . a simple algorithm to compute comprehensive grbner bases .",
    "proceedings of issac 2006 , acm .",
    "p 326 - 331 .",
    "implementation in risa / asir and maple ( http://kurt.scitec.kobe-u.ac.jp/@xmath230sakira/ ) ."
  ],
  "abstract_text": [
    "<S> this is the continuation of montes paper  on the canonical discussion of polynomial systems with parameters \" . in this paper </S>",
    "<S> we define the minimal canonical comprehensive grbner system ( mccgs ) of a parametric ideal and fix under which hypothesis it exists and is computable . an algorithm to obtain a canonical description of the segments of the mccgs </S>",
    "<S> is given , completing so the whole mccgs algorithm ( implemented in maple ) . </S>",
    "<S> we show its high utility for applications , like automatic theorem proving and discovering , and compare it with other existing methods . a way to detect a counterexample is outlined , </S>",
    "<S> although the high number of tests done give evidence of the existence of the mccgs .    </S>",
    "<S> _ keywords : _ comprehensive grbner system , canonical , minimal , reduced specification , generalized canonical specification , constructible sets .    </S>",
    "<S> _ msc : _ </S>",
    "<S> 68w30 , 13p10 , 13f10 . </S>"
  ]
}