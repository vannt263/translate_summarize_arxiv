{
  "article_text": [
    "polynomials are fundamental objects in mathematics and reducing the cost of evaluating polynomials is a classic problem in computer science .",
    "applications abound , ranging from fast calculation on embedded devices and real - time calculations to high - energy physics ( hep ) , where one needs to perform monte carlo integrations of extremely large polynomials in many variables  @xcite . numerous methods to optimize polynomial evaluation",
    "have been proposed , such as horner s method  @xcite , common subexpression elimination  @xcite , breuer s growth algorithm  @xcite and , recently , partial syntactic factorization  @xcite .    for a polynomial in one variable ,",
    "horner s method provides a computationally efficient form for evaluating it : @xmath0 with this representation a dense polynomial of degree @xmath1 can be evaluated with @xmath1 multiplications and @xmath1 additions , giving an evaluation cost of @xmath2 .",
    "here it is assumed that the cost of addition and multiplication are equal .    for multivariate polynomials",
    "horner s method can be generalized .",
    "to do so one chooses a variable and applies eqn .",
    "( [ eqn::horner ] ) , thereby treating the other variables as constants .",
    "afterwards another variable is chosen and the same process is applied to the terms within the parentheses .",
    "this is repeated until all variables are processed .",
    "as an example , for the polynomial @xmath3 and the order @xmath4 this results in the following expression @xmath5 regarding the evaluation cost , the original expression uses 5 additions and 18 multiplications , while the horner form uses 5 additions but only 8 multiplications . in general , applying a horner scheme keeps the number of additions constant , but reduces the number of multiplications .    after transforming a polynomial with horner s method ,",
    "the code can be further improved by performing a common subexpression elimination ( cse )  @xcite . in eqn .",
    "( [ eqn::hornerexample ] ) , the subexpression @xmath6 appears twice . eliminating the common subexpression results in the code @xmath7 which uses only 4 additions and 7 multiplications .",
    "the code optimization package haggies  @xcite implements this method of horner schemes followed by cse .    finding",
    "the optimal order of variables for the horner scheme is still an open problem for all but the smallest polynomials , which are studied in ref .",
    "different orders may impact the cost of the resulting code , although no thorough study of this has been made to the authors knowledge .",
    "simple algorithms have been proposed in the literature , such as most - occurring variable first , which results in the highest decrease of the cost at that particular step .",
    "this is also the order that is used in haggies .",
    "we studied the results of choosing different orders of variables for the horner scheme and discovered that this order greatly affects the results , sometimes improving the cost by factors up to two .",
    "unfortunately , most often it is impossible to perform an exhaustive search through all horner schemes , since their number increases as the factorial of the number of variables .",
    "therefore we have devised a method to find efficient orders by using monte carlo tree search ( mcts )  @xcite , a recently proposed search method from the field of artificial intelligence .",
    "mcts is a best - first search method that uses random sampling to guide the traversal of the search tree .",
    "it has recently drawn much attention due to its application in the field of computer go  @xcite , a classic board game in which computers have traditionally played weakly . in the past decade",
    "the application of mcts has improved the playing strength of computers from the level of advanced beginners to the level of strong amateur players .",
    "mcts has also been applied successfully in numerous other games and optimization problems  @xcite .        in mcts",
    "the search tree is built in an incremental and asymmetric way , see fig .",
    "[ fig::mctstree ] . during the search",
    "the traversed part of the search tree is completely in memory . for each node",
    "mcts keeps track of the number of times it has been visited and the estimated result of that node . at each step",
    "one node is added to the search tree according to a criterion that tells where most likely better results can be found . from that node",
    "an outcome is sampled and the results of the node and its parents are updated .",
    "this process is illustrated in fig .",
    "[ fig::mctsalgo ] . in more detail",
    "the four steps of the mcts cycle are the following .",
    "* selection * during the selection step the node which most urgently needs expansion is selected .",
    "several criteria are proposed , but the easiest and most - used is the uct ( upper confidence level for trees ) criterion  @xcite : @xmath8 here @xmath9 is the average score of child @xmath10 , @xmath11 is the number of times child @xmath10 has been visited and @xmath1 is the number of times the node itself has been visited .",
    "@xmath12 is a problem - dependent constant that should be determined empirically .",
    "starting at the root of the search tree , the most - promising child according to this criterion is selected and this selection process is repeated recursively until a node is reached with unvisited children . the first term of eqn .",
    "( [ eqn::uct ] ) biases in favor of nodes with previous high rewards ( exploitation ) , while the second term selects nodes that have not been visited much ( exploration ) .",
    "balancing exploitation versus exploration is essential for the good performance of mcts .",
    "* expansion * the selection step finishes with a node with unvisited children . in the expansion step one of these children",
    "is added to the tree .",
    "* simulation * in the simulation step a single possible outcome is simulated starting from the node that has just been added to the tree .",
    "this simulation can consist of generating a complete random outcome starting from this node or can be some known heuristic for the search problem .",
    "the latter typically works better if specific knowledge of the problem is available .",
    "* backpropagation * in the backpropagation step the results of the simulation are added to the tree , specifically to the path of nodes from the newly - added node to the root .",
    "their average results and visit count are updated .",
    "this mcts cycle is repeated a fixed number of times or until the computational resources are exhausted .",
    "after that the best found result is returned .",
    "in the existing code optimization packages that use horner schemes combined with cse , a simple algorithm for the order of the variables is chosen .",
    "widely used is the _ occurrence order _",
    ", where the variables are sorted with respect to the number of occurrences in the polynomial  @xcite .",
    "the variable that has the largest number of occurrences comes first in the order and is the first one used in horner s method .    to test whether this algorithm gives efficient horner schemes we took a large polynomial with 15 variables , a result from hep calculations , and generated a million random orders which were used for horner s method followed by cse .",
    "the occurrence order performed quite well , about a standard deviation above average , but far better orders were also found .",
    "an interesting feature of the orders that led to efficient schemes also showed up : these orders all shared the same variables in the trailing part of the order .",
    "these are the variables that eventually show up most often in the common subexpressions .",
    "these common subexpressions abound in the hep polynomials due to much structure , such as combinations of coupling constants or dot products and masses .",
    "motivated by this observation we use mcts to determine an order of the variables that gives efficient horner schemes .",
    "the root of the search tree represents that no variables are chosen yet .",
    "this root node has @xmath1 children , with @xmath1 the number of variables .",
    "the other nodes represent choices for a number of variables in the trailing part of the order .",
    "this number equals the depth of the node in the search tree .",
    "a node at depth @xmath13 has @xmath14 children : the remaining unchosen variables .    in the simulation step the incomplete order",
    "is completed with the remaining variables added randomly .",
    "this complete order is then used for horner s method followed by cse .",
    "the number of operations in this optimized expression is counted .",
    "the selection step uses the uct criterion with as score the number of operations in the original expression divided by the number of operations in the optimized one . this number increases with better orders and is typically of @xmath15 .",
    "the constant @xmath12 in eqn .",
    "( [ eqn::uct ] ) must therefore be chosen of that size as well .",
    "pseudocode of mcts generated horner schemes can be found in algorithm  [ alg::mctshorner ] .",
    "to test the performance of this method an implementation is added to the computer algebra package form  @xcite , which is widely used for hep calculations .",
    "the results of this method are compared to a few existing algorithms . for comparison we added to form optimization routines that use occurrence order horner schemes followed by cse .",
    "furthermore , we compare to the open - source code optimization package haggies  @xcite and the results from the paper on the hypergraph method based on partial syntactic factorization  @xcite .",
    "we also tried the code optimization routines of mathematica and maple , but their results were not of particular interest .",
    "finally , we present the results of the new code optimization routines of form , which consist of mcts generated horner schemes followed by greedy optimizations .",
    "a detailed description of this algorithm will be presented in ref .",
    "since this algorithm is an extension of mcts horner with cse , it should perform better .    [",
    "cols=\"<,^,^,^,^,^,^\",options=\"header \" , ]     the different algorithms vary a lot regarding the consumed computational resources , see tab .",
    "[ tbl::runtimes ] .",
    "mcts horner with cse needs considerably more run time than a greedy horner scheme with cse .",
    "this makes sense , because mcts basically does such an operation per tree expansion . with only few computational resources available",
    "it is better to use a greedy horner scheme than to use mcts .",
    "if used it searches through the tree for good schemes for too short a time and does not find one , therefore resulting in a bad scheme . compared to haggies and the hypergraph method , mcts with 300 expansions gives slightly longer run times for slightly better results .",
    "when the quality of the polynomial evaluation scheme is of great importance , it makes sense to spend more time to find a better evaluation scheme . with more time available , so that large parts of the search tree can be traversed , mcts horner with cse or greedy optimizations outperforms all other methods considerably .",
    "polynomials are fundamental mathematical objects , naturally occurring at many places in mathematics and science . efficient evaluation of polynomials is of great importance to many application areas .",
    "horner s method is a simple approach straight out of undergraduate algorithms textbooks . for something so basic ,",
    "it is remarkable that over the years so little improvement has been made in finding more efficient evaluation schemes .",
    "we improve on the traditional multivariate horner schemes , where the variable order is fixed by a simple procedure , by employing mcts . by statistically sampling the different variable orders it is designed to balance exploitation of known good schemes while not forgetting to explore unknown schemes as well .",
    "the basic multivariate horner schemes generated with most - occurring variables ordered first will quickly yield schemes that may be efficient enough for many applications .",
    "more demanding domains , where the expressions are large and/or evaluated many times , need better evaluation schemes . for these applications it pays to invest the time to generate them .",
    "mcts is suitable for these types of applications .",
    "evaluating large expressions for feynman diagrams in hep is one such domain , where large expressions have to be evaluated many times doing monte carlo integration  @xcite .    for all examined polynomials",
    "mcts horner , followed by cse , generated evaluation schemes that were better than any other algorithm that we tried .",
    "a further analysis of the performance is ongoing research .",
    "this includes sensitivity analysis to different parameters ( exploitation / exploration constant , number of tree expansions ) , dependence on the polynomial ( size , number of variables , use of heading or trailing part of the variable order ) , automatic tuning of the parameters to the polynomial , better criteria for the selection step , possible heuristics for the simulation step ( such as using the occurrence order instead of random completion ) , and the parallelization of the algorithm ."
  ],
  "abstract_text": [
    "<S> optimizing the cost of evaluating a polynomial is a classic problem in computer science . for polynomials in one variable , horner s method provides a scheme for producing a computationally efficient form . for multivariate polynomials it is possible to generalize horner s method , but this leaves freedom in the order of the variables . </S>",
    "<S> traditionally , greedy schemes like most - occurring variable first are used . </S>",
    "<S> this simple textbook algorithm has given remarkably efficient results . </S>",
    "<S> finding better algorithms has proved difficult . in trying to improve upon the greedy scheme we have implemented monte carlo tree search , a recent search method from the field of artificial intelligence . </S>",
    "<S> this results in better horner schemes and reduces the cost of evaluating polynomials , sometimes by factors up to two . </S>"
  ]
}