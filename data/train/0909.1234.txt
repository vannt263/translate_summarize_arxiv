{
  "article_text": [
    "we describe here the r package graphd which is designed to work with graphical models involving a large number of variables . these may be useful for modelling high dimensional networks in an wide range of biological applications ( _ e.g. _ ecology @xcite ; gene expression @xcite ; proteomics @xcite ) .",
    "other applications are in computer sciences ( _ e.g. _ internet @xcite ) , engineering ( _ e.g. _ complex electronic circuits ) , physics @xcite , sociology @xcite .    the graphical models used here are classes of multivariate distributions whose conditional independence properties are encoded by a graph in the following way .",
    "the random variables are represented as vertices ( nodes ) , and two vertices are connected by an edge ( line ) when the corresponding variables are not conditionally independent given the other variables represented in the graph .",
    "thus the absence of an edge connecting two vertices indicates conditional independence of the two corresponding variables given the other variables .",
    "this type of model has been used in high dimensional contingency tables ( _ e.g. _ log - linear models @xcite ) , continuous variables ( _ e.g. _ the covariance selection model described by @xcite ) , and models containing both continuous and discrete variables @xcite .",
    "modern accounts of graphical models can be found in @xcite , @xcite , and @xcite .",
    "the use of graphical models for large numbers of variables can be very challenging , both because of computational limitations , and because of intrinsic statistical difficulties ( particularly when the sample sizes are small ) .",
    "consequently the use of such models has often been restricted to small problems .",
    "the package graphd presented here is intended for high - dimensional graphical modelling .",
    "the central functions , ` minforest ` and ` stepw ` , search respectively for the optimal forest and the optimal decomposable model , where optimality is typically defined in termed of an information criterion ( aic or bic ) .",
    "the the graphd package is here presented using three distinct examples , which are described in section [ sec : examples ] .",
    "the basic definitions and notations used throughout the paper are found in section [ sec : basic ] , and the structure of the ` graphd ` object class defined by the package is described in section [ sec : object ] .",
    "sections [ sec : search ] to [ sec : plot ] present the functions in the package , using the examples previously introduced .",
    "the features of the graphd package will be presented using three different examples covering continuous , discrete , or both types of variables ( examples 1 , 2 , and 3 , respectively ) .",
    "we here describe the data and show the graphical model selected .",
    "the data arise from a functional genomics study in gingival tissue @xcite .",
    "the study investigates the differences in the gene expression profiles of interproximal papillae tissues of diseased ( periodontitis ) and health sites .",
    "ninety healthy non - smoker patients with moderate to advanced periodontitis were used in this study .",
    "each patient contributed with at least two diseased samples and a healthy papilla , if available .",
    "a total of 247 samples were collected ( 64 from healthy sites and 183 from diseased sites ) .",
    "the transcription profiles of the samples were evaluated using affymetrix human genome arrays with 54,675 probe sets .",
    "only 64 arrays from independent diseased sites were considered .",
    "the data were pre - processed using ` justrma ` from the affy package @xcite . to reduce the amount of data , probes with variance @xmath2",
    "were omitted from the analysis .",
    "thus our dataset is composed of 1,545 probes , from 64 different patients .",
    "the objective is to characterize the gene co - expression network in patients with periodontitis .",
    "the model selected by the ` stepw ` function can be seen in figure  [ fig : final ] ( a ) .",
    "the goal of the international hapmap project is to characterize human genetic variation @xcite .",
    "the project recorded differences in the sequence of bases that composes the dna , the _ snps _ ( _ s_ingle _ n_ucleotide _ p_olymorphisms ) .",
    "there are four different bases ( a , t , g , and c ) that can occur at each position in the dna ( _ locus _ ) , and if different individuals have different bases at a locus , the locus can be considered polymorphic ( provided that none of the alleles are too rare ) .",
    "each different base occurring in one locus is considered as an allele .",
    "we use here only the polymorphic snps from the yoruba population ( ibadan , nigeria - west africa ) with complete data . from this population",
    ", we selected the chromosome 17 , representing 606 snps in 176 individuals , for synonymous coding snps ( snps which even with different structure code the same amino acid ) with minor allele frequency greater than 0.25 ( download on the @xmath3 june 2009 from the hapmart website - www.hapmap.org ) . after eliminating 9 individuals with very high missing values percentage we obtained 334 loci without missing values . using the information of the stated reference allele we codified the genotypes of the individuals as :  0 \" for homozygous wild type ( individual with the reference allele in both dna strands ) ;  1 \" for heterozygous ( individual with only one copy of the reference allele ) ; and  2 \" for homozygous mutant ( individual with no copy of the reference allele ) .",
    "the objective is to determine the relationship between different loci through the network structure .",
    "the optimal decomposable representation of the network ( minimum bic ) is displayed in figure  [ fig : final ] ( b ) .",
    "the iris flower data were introduced by anderson in 1935 , but is also known as the fisher s iris data ( 1936 ) . a sample of 150 plants , 50 from each of three species ( _ iris setosa _ , _ iris versicolor _ , and _ iris virginica _ ) , had the sepal and petal lengths and widths recorded .",
    "the objective is to describe the structure of correlation between the different measurements considering the 3 different species .",
    "the final model can be seen in figure  [ fig : final ] ( c ) .",
    "we here give a brief sketch of the theory of graphical models . for a more complete account",
    "see for example @xcite .",
    "graphical models combine graph theory and probability theory .",
    "each vertex represents a random variable , and two vertices are connected when they are not conditionally independent given the remaining variables .",
    "for example , from the graph presented in figure  [ fig : example ]  ( a ) , we see that the variables 1 and 2 are not conditionally independent given variables 3 , 4 and 5 , but that variables 1 and 4 are conditionally independent given the variables 2 , 3 and 5",
    ".        define a graphical model as an undirected graph @xmath4 , where @xmath5 is the set of @xmath6 vertices ( @xmath6 finite ) , and @xmath7 is the set of edges , a subset of @xmath8 ( unordered pairs ) , where multiple edges and self - loops are not allowed .",
    "furthermore , an edge @xmath9 indicates that the variables associated to @xmath10 and @xmath11 are not conditionally independent given all the other variables .",
    "if we are only interested in a subset of such relations , we can define a subgraph of @xmath12 as @xmath13 , where @xmath14 and @xmath15 @xcite .",
    "for example , in figure  [ fig : example ]  ( a ) , @xmath16 and @xmath17 , and @xmath18 renders the subgraph to the graph @xmath19 .",
    "a graph is complete if every pair of vertices is connected by an edge .",
    "if a subgraph is maximally complete , it is called a _ clique _ :",
    "in this case the addition of any other vertex would renders the subgraph incomplete . in figure",
    "[ fig : example ]  ( a ) , @xmath20 and @xmath21 are cliques .    in a graph @xmath12 , two vertices , @xmath10 and @xmath11 ,",
    "are said to be connected if there is a sequence @xmath22 of distinct vertices such that @xmath23 .",
    "the sequence @xmath22 is called _ path_. in the figure  [ fig : example ]  ( a ) , the vertices 1 and 5 are connected since there exists a path between them , for example @xmath24 .",
    "a _ cycle _ is a path which the end vertices are the same ( @xmath25 ) , as @xmath26 in figure  [ fig : example ]  ( a ) .",
    "a cycle @xmath27 is _ chordless _ if @xmath28 and @xmath29 are only connected by an edge when @xmath30 .",
    "a graph is called _ triangulated _ if it has no chordless cycles of length greater than three . for example",
    ", the graph in figure  [ fig : example ]  ( a ) is triangulated , but the graph in figure  [ fig : example ]  ( b ) is not , since the cycle @xmath31 of length four is chordless .",
    "a subset @xmath32 separates two disjoint subsets of @xmath33 , @xmath34 , and @xmath35 , if all paths from @xmath36 to @xmath37 pass through @xmath38 .",
    "in addition , a triple @xmath39 of disjoint subsets of @xmath33 decomposes the graph @xmath4 if : ( 1 ) @xmath40 , ( 2 ) @xmath38 separates @xmath34 from @xmath35 , and ( 3 ) @xmath38 is complete .",
    "this definition implies that a graph is _ decomposable _ if it is complete , or exists a decomposition @xmath39 , with @xmath41 and @xmath42 , into decomposable subgraphs @xmath43 and @xmath44 .",
    "a graph @xmath4 is decomposable if and only if it is triangulated @xcite .",
    "the example shown in figure  [ fig : example ]  ( a ) is decomposable , with @xmath45 , @xmath46 , and @xmath47 .    the cliques @xmath48 in a triangulated graph can be numbered in such a way that for all @xmath49 , @xmath50 , @xmath51 , and @xmath52 gives that ( 1 ) for all @xmath53 there is a @xmath54 such that @xmath55 , and ( 2 ) the sets @xmath56 are complete for all @xmath57 @xcite .",
    "this sequence of cliques is called a _",
    "perfect sequence_. the sets @xmath58 , @xmath59 , and @xmath60 are named histories , residuals , and separators , respectively .",
    "a perfect sequence of the graph in figure  [ fig : example ]  ( a ) is @xmath61 , with cliques @xmath62 and @xmath63 , respective separators @xmath64 and @xmath65 , histories @xmath66 and @xmath67 , and residuals @xmath68 and @xmath69 .",
    "a key property of decomposable graphs is that the probability densities of such models can be factorized as : @xmath70 where @xmath71 is the class of cliques in a perfect sequence , and @xmath72 is the number of times that @xmath73 occurs as a separator in this perfect sequence ( possibly including the empty set ) @xcite .",
    "furthermore , these models have an explicit formula for the maximum likelihood estimators .",
    "a _ forest _ is a graph containing no cycles",
    ". it may be composed of several connected components called trees , i.e. a tree is a connected acyclic graph @xcite . given a set of edge weights , a _ minimum spanning forest _",
    "@xmath74 of a graph @xmath4 is a forest with @xmath75 and @xmath76 that has minimum sum of edge weights , among all possible such forests .",
    "examples of edge weights are the contribution of each edge to the bic or the contribution to minus the log - likelihood .",
    "figure  [ fig : forest ]  ( a ) shows a graph with four connected components , and figure  [ fig : forest ]  ( b ) shows a spanning forest of this graph .         the variables in the model can be discrete , continuous , or both ( mixed ) . in the first case , in which each variable assumes a value in a set of levels , the models are based on the multinomial distribution . in the second case ,",
    "the models are based on the multivariate gaussian distribution . in the mixed case the cg ( conditional gaussian ) distribution is assumed ; the variances can be homogeneous or heterogeneous across different levels of the discrete variables .",
    "furthermore , a mixed model is strongly decomposable when its graph is triangulated and no forbidden paths occur .",
    "a _ forbidden path _ is a path between two non - adjacent discrete vertices passing through only continuous vertices , as showed in figure  [ fig : forbidden ] . for more details",
    "see @xcite pages 7 - 12 .        in this paper",
    "we describe the main features of the new r package graphd , and how it can be used for graphical model search .",
    "most of the core functions are programmed in ansi c , due to its computational efficiency .",
    "the package as well as the code are available from http://cran.r - project.org/.",
    "the graphd package groups a number of functions designed for efficient selection of high - dimensional undirected graphical models .",
    "the set of variables can contain only discrete , continuous , or both types .",
    "all the information about the model is stored in a ` graphd ` object which contains the following elements :    * ` edges ` : matrix with 2 columns , each row representing one edge , and each column one of the vertices in the edge . *",
    "` p ` : number of variables ( vertices ) in the model .",
    "* ` stat.minforest ` : measure used ( lr , aic , bic , or a user defined function ) by the ` minforest ` function . * ` stat.stepw ` : measure used ( lr , aic , bic , or a user defined function ) by the ` stepw ` function . * ` statseq ` : numeric vector with the value of the ` stat.minforest ` for each edge found by ` minforest ` , or the change in the ` stat.stepw ` for each edge found by ` stepw ` . *",
    "` vertnames ` : vector with the original vertices names .",
    "if no names are attributed , then the vertices will be named according to their original order in the data . *",
    "` numcat ` : vector with number of levels for each variable ( 0 if continuous ) . *",
    "` homog ` : ` true ` if the covariance is homogeneous ( only used in the mixed case ) . * ` nump ` : vector with the number of estimated parameters for each edge . * ` minforest ` : vector of length 2 , with the row indexes of the first and last edges found by the ` minforest ` function . * ` stepw ` : vector of length 2 , with the row indexes of the first and last edges found by the ` stepw ` function .    the ` graphd ` object , besides being the result of a model search , functions as an input parameter in most other functions in the package .",
    "a null model can be created using the function ` as.graphd ` , as in    .... r > m < - as.graphd(null ) list of 9   $ edges     : int[0 , 1:2 ]   $ p         : int 0   $ stat.user : chr \" lr \"   $ statseq   : num(0 )   $ numcat    : int(0 )   $ homog     : logi true   $ nump      : num(0 )   $ vertnames : logi na   $ userdef   : num [ 1:2 ] 0 0   - attr ( * , \" class\")= chr \" graphd \" ....",
    "the core functions in the package are ` minforest ` and ` stepw ` .",
    "the ` minforest ` function finds a minimal aic or bic forest , or the maximum likelihood tree for the data .",
    "the ` stepw ` function performs forward search for the triangulated graph that minimises a given measure .",
    "the minimized measure used can be either -lr ( likelihood - ratio ) , bic ( bayesian information criteria ) , aic ( akaike information criteria ) , or a function specified by the user .",
    "all calculations use the data set specified by the ` dataset ` parameter , which holds the raw data , in ` dataframe ` format , with the column storage mode defining its type ( discrete or continuous ) .",
    "the discrete variables are defined as factors , and the continuous as numerical . in the first case",
    ", there should be more than one level ( otherwise there is no gain in using such variable ) , and all levels must be represented in the sample .",
    "if all variables are continuous , the dataset can be given as a numeric matrix .",
    "missing values ( ` na ` ) are not allowed .",
    "the variables are referred by their indexes in the ` vertnames ` attribute . in this way",
    ", the edge representation in the ` graphd ` object is in the format @xmath77 , where @xmath78 and @xmath79 are the indexes in ` vertnames ` , and @xmath80 .",
    "for example , the iris data is presented as    ....",
    "r > str(iris ) ' data.frame ' :    150 obs . of   5 variables :   $ sepal.length : num   5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...   $ sepal.width : num   3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...",
    "$ petal.length : num   1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...",
    "$ petal.width : num   0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...   $ species      : factor w/ 3 levels \" setosa\",\"versicolor \" , .. : 1 1 1 ... ....    the discrete variable ( ` species ` ) is identified as a factor with three levels .",
    "all other variables are continuous ( as indicated by the numerical type `` num ` ' ) .",
    "the columns names ( ` sepal.length ` , ` sepal.width ` , ` petal.length ` , ` petal.width ` , and ` species ` ) are stored in the ` vertnames ` attribute of the ` graphd ` object .",
    "the variables are always referred to as the original column number in the ` dataset ` , _ e.g. _",
    "the variable ` sepal.width ` is variable 2 , while ` species ` is variable 5 .",
    "the edge connecting ` sepal.width ` and ` species ` is represented by a row in the ` edges ` attribute consisting of the vector ` c(2,5 ) ` .",
    "the function ` minforest ` searches for an optimal tree or forest using the algorithm of @xcite .",
    "if the ml measure is used , the function returns a tree , but if the aic or bic is used , the function may return a forest or a tree . per default the bic measure is used . starting from an empty edge set , the algorithm repeatedly adds the edge that optimizes the selected measure .",
    "only edges that preserve the tree / forest structure can be added , i.e. , no cycles can be generated .",
    "the procedure continues until no more edges can be added .",
    "for example , if the selected measure is the bic , at first the pairwise values are computed and in each step the edge that reduces the most the total bic is added , if it exists .",
    "the algorithm is    step 1 : : :    calculate the bic for all possible edges .",
    "step 2 : : :    select the edge that improves the most the model s bic .",
    "step 3 : : :    if there is no such edge , stop . step 4 : : :    test if the addition of this edge creates a cycle or a forbidden path .",
    "step 5 : : :    if it does , select the next edge with best improvement and return to    * step 3*. step 6 : : :    add the edge to @xmath7 , remove it from the list    of possible edges , and return to * step 2*.    for mixed models , the algorithm finds the strongly decomposable forest that minimizes the selected measure @xcite .",
    "for the periodontitis data , the summary of the minimum spanning forest is presented below .",
    "the graph found is actually a tree and not a forest , since all vertices are connected ( @xmath81 edges ) .",
    "all variables are continuous , and the measure minimised was the bic ( default ) .    ....",
    "r > library(\"graphd \" ) r > periodontitisforest < - minforest(periodontitisdata ) graphd object number of edges        = 1544 number of vertices     = 1545 model                  = continuous statistic ( minforest ) = bic edges from minforest   = 1 ... 1544 ....      the function ` stepw ` searches for decomposable models minimising a given measure by adding edges to a initial model , also decomposable .",
    "the algorithm is also iterative , determining at each step the add - eligible edges , i.e. , the edges that if added preserve the triangularity . among these edges , the one that reduces the most the selected measure",
    "is added to the graph .",
    "the algorithm , showed below , stops when no more add - eligible edges are found .",
    "the structure of components in the starting model is preserved as default , which means that if the function starts from a forest with @xmath82 isolated components , the final model will also have @xmath82 isolated components .",
    "this can be changed setting the option ` join ` to ` true ` .",
    "step 1 : : :    calculate the bic for all add - eligible edges .",
    "step 2 : : :    select the edge that improves the most the model s bic .",
    "step 3 : : :    if there is no such edge , stop .",
    "step 4 : : :    add the edge to @xmath7 , and return to * step 1*.    for example , if the function is applied on the tree found in the previous section , 999 iterations are necessary ( 998 edges are added to the tree ) .    ....",
    "r > periodontitisforward < - stepw(periodontitisforest , periodontitisdata ) graphd object number of edges        = 2542 number of vertices     = 1545 model                  = continuous statistic ( minforest ) = bic statistic ( stepw )      = bic edges from minforest   = 1 ... 1544 edges from stepw       = 1545 ... 2542 ....    the default measure is the bic .",
    "we can see that in the final model , the first 1,544 edges were found by ` minforest ` ( edges 1 to 1,544 ) , and the last 998 by ` stepw ` ( edges 1,545 to 2,542 ) . the final graph can be seem in figure  [ fig : final ] ( a ) .    the algorithm can start from an empty model ( which is always decomposable ) . if we use the iris data , the final model ( figure  [ fig : final ] c ) found is the same as if it had started from the forest / tree graph .",
    "the code for it is showed below . initially a `",
    "graphd ` object is generated , from an empty model with 5 variables , being the first 4 continuous and the last discrete with 3 levels .",
    "the model is considered heterogeneous .",
    "as we are starting from 5 isolated components , they are allowed to be joined .    ....",
    "r > irisempty < - as.graphd(matrix(integer(0),,2),p=5,numcat=c(0,0,0,0,3 ) , +                          homog = false ) r >",
    "irisforward < - stepw(irisempty , iris , join = true ) ....      the performance of graphd was evaluated using a intel(r ) xeon(r ) cpu e5450 3.00ghz with 31 gb of ram , running linux 64 bits . the memory use and cpu time of the three examples",
    "are presented in table  [ tab : perf ] .    [ cols=\"<,^,^,^,^,^,^,^ \" , ]     we see that the ` minforest ` function is highly efficient in terms of cpu time but may require substantial memory .",
    "additionally , we performed a simulation study where the functions ` minforest ` and ` stepw ` were evaluated .",
    "data sets from multivariate normal distributions were generated with 10 to 5,000 variables ( at intervals of 20 ) .",
    "each of these data sets were used to infer the minimum spanning forest and a more complex decomposable graph starting from this forest .",
    "the computational performance is showed in figure  [ fig : perf ] .",
    "as the ` stepw ` function depends on the final complexity of the model ( number of edges added to the model ) , the cpu time shown is for one ( average ) iteration only .",
    "the memory demand for the ` minforest ` function grows quadratically in the number of vertices , while the memory demand for the ` stepw ` function grows linearly in the number of vertices .",
    "the cpu time also grows quadratically in both functions .        in conclusion ,",
    "the ` minforest ` function runs much faster than the ` stepw ` , allowing the selection of a skeleton of the model in a forest - like structure ( sparse ) in a very short time .",
    "we remark that it appears to be much more efficient to start the ` stepw ` function from the forest found by ` minforest ` , rather than from the null model .",
    "when high - dimensional models are studied , plotting the model found is probably not the best way to visualise the result , as can be seen in figure  [ fig : final ] .",
    "the plotting algorithm used here is time consuming , and may need a large number of iterations to generate a graph with no edges crossing each other . therefore different ways to analyse the resulting model have to be used .",
    "the package contains a number of functions which could be useful for this task :    * ` adjmat ` : returns the adjacency matrix based on a list of edges . * ` fit ` : calculate a model s -2@xmath83log - likelihood , aic , and bic . * ` degree ` : returns the degree of a set of vertices . * ` dfs ` : finds all vertices reachable from one specific vertex ( assuming that there are no cycles ) . * ` finded ` : finds all add - eligible edges to a given triangulated graph , preserving triangularity . in the case of a mixed graph , forbidden edges are not returned . *",
    "` neighbours ` : returns all vertices with a direct connection with a vertex ` v ` . * ` mcs ` : returns a perfect numbering of the edges . *",
    "` modeldim ` : calculates the number of free parameters corresponding to each edge . * ` modelformula ` : finds the model s formula @xcite . * ` neighbourhood ` : finds the set of vertices with up to a given distance from a given vertex . *",
    "` perfsets ` : finds a perfect sequence , returning the cliques , histories , residuals , and separators of a given triangulated graph . * ` shortpath ` : calculates the shortest path between a vertex ` v ` and all other vertices . * ` subgraph ` : based on a list of vertices , generates a subgraph . * ` summary ` : gives details about the model s structure . * ` jtree ` : finds a junction tree of a graph . * ` ci.test ` : calculates the deviance and adjusted degrees of freedom for the conditional independence test .",
    "the degree of the periodontitis model shows two vertices with high number of direct neighbours ( degree 20 )",
    ". these vertices could be  hubs \" , with important action in the network .",
    "we can also see that there is a high number of  leafs \" in the graph , as 382 ( 24.72% ) vertices present only one edge .    ....",
    "r > table(degree(periodontitisforward ) )    1    2    3    4    5   6   7   8   9 10 11 12 13 14 15 16 17 20 382 379 249 185 116 83 53 28 18 17 13   6   5   6   1   1   1   2 ....    we can zoom in the neighbourhood ( up to the second neighbour , for example ) of these two  hubs \" .    ....",
    "r > vertices < - which(degree(periodontitisforward)==20 ) r > neigh670 < - neighbourhood(periodontitisforward , orig = vertices[1],rad=2 ) r > pos < - plot(periodontitisforward , numiter=4000,vert.labels = false , +               vert.radii=.006,vert.hl=vertices,col.hl=c(\"red\",\"blue \" ) ) r > plot(periodontitisforward , vert = neigh670$v[,1],numiter=1000 , +        vert.hl=vertices[1],vert.radii=.013,col.hl=\"red\",cex.vert.label=.4 ) r > plot(periodontitisforward , vert = neigh1123$v[,1],numiter=1000 , +        vert.hl=vertices[2],vert.radii=.013,col.hl=\"blue\",cex.vert.label=.4 ) ....    from figure  [ fig : neigh ] we see that restricting the plot to a smaller neighbourhood allows details to become more visible .",
    "the same plot could also be produced using the functions ` neighbours ` and ` subgraph ` .",
    "for the hapmap data , the degree shows that we actually have a high number of isolated vertices ( 104 , 31.14% ) .",
    "the general structure of the model is very close to a forest , as only 5 edges are added by the ` stepw ` function .",
    "the vertices with highest degree have 5 edges .    ....",
    "r > table(degree(hapmapforward ) )    0    1    2    3    4    5 104 133   58   22   12    5 ....    the log - likelihood , bic , and aic of a model can be obtained using the function ` fit ` .",
    "for example , if we are interested in test in a mixed model if the structure of covariance is homogeneous or heterogeneous , we could use the this information .    ....",
    "r > fit(edges = irisforward , dataset = iris , homog = false ) number of parameters    -2*log - likelihood         aic         bic               39.0000             410.1435    488.1435    605.5582 r",
    "> fit(edges = irisforward , dataset = iris , homog = true ) number of parameters    -2*log - likelihood         aic         bic               22.0000             551.3188    595.3188    661.5528 ....",
    "the ` perfsets ` function finds the cliques structure of the graph , also returning the lists of separators , histories , and residuals , as described in @xcite ( pages 14 - 15 ) . if the graph is not ( strongly ) decomposable , the function returns the value zero . for the periodontitis data we have    .... r > sets < - perfsets(periodontitisforward ) # only the first two elements of each are shown here list of 4      $ cliques : list of 1395       .. $ : int [ 1:2 ] 1 335       .. $ : int [ 1:3 ] 394 335 474      $ histories : list of 1395       .. $ : int [ 1:2 ] 1 335       .. $ : int [ 1:4 ] 1 335 394 474      $ separators : list of 1395       .. $ : null       .. $ : int 335      $ residuals : list of 1395       .. $ : int [ 1:2 ] 1 335       .. $ : int [ 1:2 ] 394 474 ....    the ` shortpath ` function returns the shortest path length between vertices in the graph ( considering that each edge has length one ) . if two vertices are not connected , i.e. , there is no path between them , it is returned ` inf ` . in the periodontitis data",
    ", the vertex 670 has a direct connection with 20 other vertices , and the most far vertex has a distance of 26 from it , while the graph s diameter ( longest shortest path ) is 46 . note that vertex 670 has a distance of 0 to itself .    ....",
    "r > table(shortpath(periodontitisforward , v=670 ) )   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   1   20   50   58   72   78   84   77   80   97 134 130 126 116   98   91   80   70 18   19   20   21   22   23   24   25   26 48   15    4    4    4    3    3    1    1 ....",
    "some examples of plots generated by the ` plot.graphd ` function have been given above .",
    "the function uses s3 method for the class ` graphd ` , so the regular ` plot ` function can be used . as default ,",
    "when a ` graphd ` object is plotted , all discrete variables are pictured as black circles , and the continuous variables as grey circles .",
    "but the function is flexible , and the user can define different colours , shapes , and sizes for each vertex . the @xcite algorithm is used to place the vertices in the plotting area @xcite .",
    "the algorithm is iterative and uses attractive and repulsive forces for placing the vertices .",
    "this technique is time consuming and can not guarantee a clear plot , as the one in figure  [ fig : final ] ( a ) , which used 4,000 iterations , a number not sufficient to untangle it .",
    "the more complex a graph is , the more difficult is its visualisation . for this reason , the ` plot.graphd",
    "` function has a number of optional parameters that allow the user to manipulate the appearance of the plot .",
    "it is possible to plot only the edges , or not to label the vertices ; to highlight some vertices with different colours , shapes , and/or sizes .",
    "for example we could show in the graph where the neighbourhood of the vertices 670 and 1,123 are , for the periodontitis data , as shown in figure  [ fig : whole_neigh ] .        ....",
    "r > hlv < - c(670,1123,neigh670$v[-1,1],neigh1123$v[-1,1 ] ) r > hlc < - rep(c(\"black\",\"red\",\"blue\"),c(2,length(neigh670$v[-1,1 ] ) , +              length(neigh1123$v[-1,1 ] ) ) ) r > vs < - rep(0.005,periodontitisforward$p ) r > vs[c(neigh670$v[,1],neigh1123$v[,1 ] ) ] < - .008 r >",
    "vs[c(670,1123 ) ] < - .01 r > sb < - rep(1,periodontitisforward$p )",
    "r > sb[c(670,1123 ) ] < - 3 r > vs[901]<-0 r > plot(periodontitisforward , coord = pos , numiter=0,vert.hl = hlv , col.hl = hlc , +        vert.labels=false,vert.radii=vs,symbol.vert=sb ) ....    the code below can be used to identify isolated components in a graph .",
    "the largest components in the hapmap data are displayed in figure  [ fig : comp_hapmap ] .    ....",
    "r > sp < - shortpath(hapmapforward ) r > comp < - rep(0,hapmapforward$p ) r > i < - 0 r > while(length(which(comp==0))>0 ) { r >    i < - i + 1 r >    if ( comp[i ] = = 0 ) { r >      ind < - which(sp[i,]<hapmapforward$p ) # finite r >      comp[ind ] < - max(comp ) + 1 r >    } r > } r > v < - c(which(comp==18),which(comp==21),which(comp==15 ) ,            which(comp==1),which(comp==9 ) ) r > col < - rep(colours()[c(133,124,258,150)],c(14,13,39,79 ) ) r > plot(hapmapforward , vert = v , lwd.ed=3,vert.hl = v , symbol.vert = rep(0,length(v ) ) , +    vert.radii=rep(.012,length(v)),col.hl=col,numiter=3000,cex.vert.label=.7 ) ....",
    "we have described an r package for efficient selection of high - dimensional undirected graphical models , with functions not available in other packages . the objective of the package is to provide an efficient way to search for models in the classes of forests and decomposable graphs ( discrete , continuous , and mixed ) .",
    "the computational performance depends on the model complexity , where sparse models demand much less resources .",
    "it is easy to convert ` graphd ` objects into graph or model objects supported by other packages ; it is also easy to extract information directly from them .",
    "there is a technical limitation of 65,000 variables , due to numerical representation .",
    "gabriel c. g. abreu is financed by sabretrain project , funded by the marie curie host fellowships for early stage research training , as part of the @xmath84 framework programme of the european commission .",
    "was partially supported by the project `` metabolic programming in foetal life '' , danish research agency , ministry of science technology and innovation .",
    "ryan  t. demmer , jan  h. behle , dana  l. wolf , martin handfield , moritz kebschull , romanita celenti , paul pavlidis , and panos  n. papapanou .",
    "transcriptomes in healthy and diseased gingival tissues . , 79(79):21122124 , 2008 .",
    "jeremiah  j faith , boris hayete , joshua  t thaden , ilaria mogno , jamey wierzbowski , guillaume cottarel , simon kasif , james  j collins , and timothy  s gardner .",
    "large - scale mapping and validation of escherichia coli transcriptional regulation from a compendium of expression profiles .",
    ", 5(1):e8 , 01 2007 ."
  ],
  "abstract_text": [
    "<S> this paper presents the r package graphd for efficient selection of high - dimensional undirected graphical models . </S>",
    "<S> the package provides tools for selecting trees , forests , and decomposable models minimizing information criteria such as aic or bic , and for displaying the independence graphs of the models . </S>",
    "<S> it has also some useful tools for analysing graphical structures . </S>",
    "<S> it supports the use of discrete , continuous , or both types of variables .     </S>",
    "<S> +    gabriel c. g. de abreu@xmath0 david edwards@xmath1 rodrigo labouriau@xmath1 + </S>"
  ]
}