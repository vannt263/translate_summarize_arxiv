{
  "article_text": [
    "we consider the scheduling of lu - kumar networks @xcite , @xcite .",
    "these are queueing networks with disjoint groups of queues that can not be scheduled simultaneously .",
    "maxweight scheduling , proposed in @xcite , is known to be throughput optimal for these networks .",
    "however , maxweight scheduling suffers from high complexity and also dependency on the knowledge of all of the service rates , queue lengths , and routing probabilities .",
    "a natural low complexity scheduling algorithm is longest - queue ( lq ) scheduling , studied in @xcite , @xcite and @xcite , which we discuss in this paper in details .    in general , we know that the utilization being less than one for each server is necessary but not sufficient for the stability of a queueing network .",
    "this condition specifies that work arrives at each server at rate less than one . in @xcite , lu and kumar",
    "provided an example of a network ( figure [ fig0 ] ) with priority scheduling that is unstable despite satisfying the utilization condition . to see this ,",
    "assume that @xmath0 and @xmath1 and that queue 3 is initially empty while queue 2 is not .",
    "group 1 serves queue 2 , so that queue 1 is not served and queue 3 remains empty .",
    "eventually , queue 2 becomes empty and queues 1 and 3 get served until queue 3 becomes empty ( because @xmath0 ) . at that time , queues 4 and 2 get served , until queue 2 becomes empty ( because @xmath1 ) .",
    "thus , queues 2 and 3 are never served together .",
    "consequently , they form a virtual group and the system can not be stable unless the utilization of that virtual group is less than one , which is an additional condition not implied by the original utilization condition .    if priority is given to the last buffer in each station ( queues @xmath2 and @xmath3 ) , the network is stable .",
    "it is shown in @xcite that , for a re - entrant line , the last - buffer - first - serve discipline with pre - emption is throughput optimal .",
    "we analyze the stability of the queueing networks under robust policies using their fluid model .",
    "the fluid model converts a stochastic system into a deterministic system , based on the functional strong law of large numbers , @xcite . under weak assumptions ,",
    "the stability of the fluid model implies the stability of the queueing network .",
    "the common method for showing stability of the fluid model is to find a lyapunov function for the differential equations of the system .",
    "a novel feature of this paper is that to prove the stability of the fluid system under lq scheduling , we investigate the possible trajectories of the state and show that they can only go to zero , instead of using a direct lyapunov function .",
    "there has been relatively little work on the stability of lq scheduling in the literature .",
    "we can mainly mention the following papers . in @xcite , kumar",
    "consider sufficient conditions for stability of stable marriage scheduling algorithms in input - queued switches . in @xcite , dimakis and walrand",
    "identify new sufficient conditions for longest - queue - first ( lqf ) scheduling to be throughput optimal .",
    "they combine properties of diffusion - scaled path functionals and local fluid limits into a sharper characterization of stability .",
    "see also @xcite for a variation on the first order sufficient condition of that paper ( resource pooling ) .",
    "recently , in @xcite , baharian and tezcan consider lqf scheduling for parallel server systems .",
    "it is shown that the nominal traffic condition is sufficient to prove stability if the underlying graph of the parallel server system is a tree .",
    "furthermore , additional drift conditions are provided for the stability of a special parallel server system known as x - model . the network model that we consider is different from all the previous work on lq scheduling .",
    "in addition to lq scheduling , we propose a new scheduling policy called longest - dominating - queue ( ldq ) .",
    "this policy is closely related to lq scheduling . according to this policy , none of the queues that feed a larger maximum - length queue of another group is served . among those queues that are not dominated by a maximum - length queue of another group ,",
    "the longest one is scheduled .",
    "we use the fluid model and show that the maximum of the queue lengths is a lyapunov function to prove the stability of ldq scheduling in a general network which is an acyclic graph .",
    "we use boldface lower case letters @xmath4 to denote vectors and boldface capital letters @xmath5 to denote matrices .",
    "@xmath6^t$ ] denotes matrix transposition operation and @xmath6^{-t}$ ] the matrix inversion and transposition .",
    "let @xmath7 and @xmath8 be matrices of size @xmath9 , then @xmath10 means @xmath11 for @xmath12 and @xmath13 . also , @xmath14 and @xmath15 stand for column vectors of @xmath16 s and @xmath17 s with length @xmath18 , respectively and @xmath19 stands for the @xmath9 matrix of all @xmath17 entries .",
    "the indicator function of set @xmath20 is shown as @xmath21 .",
    "the rest of the paper is organized as follows . in section [ sec : prob ] , we provide the precise network model and problem formulation , and state the main results of the paper . in section [ sec : lqf ] , we focus on the lq scheduling and prove that it is throughput optimal for lu - kumar networks with two groups of two queues .",
    "we also provide sufficient conditions for the stability of lq scheduling for lu - kumar networks . in section",
    "[ sec : ldq ] , we propose the ldq scheduling and prove that this new policy is stable if the network topology is acyclic .",
    "we provide simulation results and examples which show that when there is a cycle in the network , ldq may not be stable .",
    "we consider a network with @xmath22 queues and a routing matrix @xmath23 .",
    "the entry @xmath24 is the probability that a job goes to queue @xmath25 upon leaving queue @xmath26 .",
    "therefore , a job leaves the network upon leaving queue @xmath26 with probability @xmath27 . in each queue , jobs are served in their order of arrival .",
    "the random length of queue @xmath26 at time @xmath28 is @xmath29 , the vector of service rates of the queues is @xmath30^t$ ] , and the vector of arrival rates to the queues is @xmath31^t$ ] .",
    "the arrival processes to the queues are independent stationary ergodic processes . in this network , not all the queues can be served at the same time .",
    "the queues are partitioned into @xmath32 disjoint groups @xmath33 and only one queue can be served in each group at a time .",
    "let @xmath34 , so that @xmath35 .",
    "we call such networks _ lu - kumar networks _ because they were analyzed by lu and kumar in @xcite",
    ". figure [ fig1 ] illustrates such a network with @xmath2 groups of two queues : @xmath36 and @xmath37 .",
    "we assume the network is open , i.e. , all the jobs eventually leave the network . since the network is open",
    ", @xmath38 is a finite positive matrix .",
    "so , the matrix @xmath39 is invertible .",
    "the service disciplines that we consider are nonpreemptive and independent of @xmath40 , @xmath41 and @xmath42 . the goal is to analyze the stability of this network when the traffic conditions stated in section [ sec : st ] hold .",
    "we use the fluid model to analyze the stability of the network",
    ". the fluid model is described by a set of ordinary differential equations .",
    "let @xmath29 be the length of queue @xmath26 at time @xmath43 and @xmath44 be the random total amount of time that queue @xmath26 has been scheduled up to time @xmath43 .",
    "let also @xmath45 and @xmath46 .",
    "then the fluid model equations are @xmath47    the fluid model is _ stable _ if there exits some @xmath48 such that , for each fluid solution with @xmath49 , one has @xmath50 for @xmath51 . under weak conditions , the stability of the fluid model implies the stability of the queueing network ( e.g. , the harris recurrence of a markov model in the case of renewal arrival processes , i.i.d .",
    "service times and markov routing ) .",
    "see @xcite for a discussion of such results .    to investigate the possible trajectories of the differential equations , we define the _ state _ @xmath52 of the network at time @xmath28 to be the set of queues with maximum queue length in each group at that time .",
    "more precisely , if @xmath53 is the set of maxima in group @xmath25 , for @xmath54 , the state of the network is @xmath55 .",
    "since @xmath53 is a subset of @xmath56 , there are @xmath57 possible states of the network .",
    "note that the state of a group is the empty set if all the queues in that group are empty .",
    "a state @xmath58 is said to be _ feasible _ if @xmath52 can spend a positive amount of time in that state .",
    "later we see that following the trajectory of the state @xmath52 is the key idea to prove the stability of lq scheduling in lu - kumar networks .",
    "the main contributions of this paper are the following theorems .",
    "[ thm:1 ] the lu - kumar network in figure [ fig1 ] , with two groups of two queues , is stable under lq scheduling if the utilization conditions hold .",
    "[ thm:2 ] a lu - kumar networks is stable under ldq scheduling if the utilization conditions hold and there is no cycle in the topology of the network .",
    "the stability of lu - kumar networks with more than two groups of two queues under lq scheduling is still an open question .",
    "examples show that a lu - kumar network may not be stable under ldq scheduling if its topology is not acyclic .",
    "define the drift matrix @xmath59 of the network by @xmath60 where @xmath61 .",
    "since @xmath62 is a positive matrix , one has @xmath63 furthermore , let the vector of nominal traffic of the queues be @xmath64^t$ ] .",
    "we have @xmath65 in matrix form , @xmath66    by proposition @xmath67 in @xcite , the necessary stability conditions of the network are @xmath68 these are the utilization conditions .",
    "they express that work for each group arrives at the network at rate less than one .",
    "using equations and , we find an equivalent stability conditions which is that @xmath69 for all @xmath70 , where @xmath71 is a column vector of length @xmath22 corresponding to group @xmath25 such that component @xmath26 of @xmath71 is @xmath72 .",
    "in this section , we prove a lemma that will be useful in the proofs for the stability of lq and ldq scheduling . we also provide sufficient conditions for the stability of general networks under lq scheduling . under this discipline , the longest queue in each group is served . to break ties",
    ", we can use a static priority scheduling among the maximum queues , or serve any of the maximum - length queues randomly .",
    "we use the fluid model to prove the stability of lq scheduling as stated in equation .",
    "further conditions for lq scheduling are that the server in each group spends all its time serving the longest queues .",
    "that is , if @xmath53 is the set of non - empty queues with maximum length in group @xmath73 , then @xmath74    a regular point is a value of @xmath75 at which the function @xmath76^t\\ ] ] is differentiable in all of its components .",
    "therefore , in a regular point @xmath77 remains constant in @xmath78 $ ] for some @xmath79 . by @xmath77",
    "we indicate the value of @xmath80 at time @xmath28 .",
    "let @xmath53 be the set of queues with maximum length in group @xmath25 and @xmath81 .",
    "define @xmath82 and @xmath83 .",
    "the corresponding drift matrix and arrival vectors to set @xmath80 are @xmath84_{i , k \\in s}$ ] and @xmath85_{i \\in s}$ ] .",
    "also , let @xmath86^t$ ] be the drifts of maximum length queues in the @xmath32 groups .    a sketch of the proof for stability of lq scheduling in lu - kumar networks with two groups of two queues is the following .",
    "the drifts of queues with maximum length in one group are equal at a regular point by lemma [ lem : dai ] . in lemma",
    "[ lem : alpha ] , we show that @xmath87 is strictly negative in at least one of its components , at a regular point . more precisely ,",
    "if @xmath43 is a regular point , @xmath87 has a component @xmath26 determined by @xmath77 such that @xmath88 for some @xmath89 if @xmath90 .",
    "so @xmath77 can not remain constant as @xmath91 unless @xmath92 , but this is not enough to prove stability , as @xmath77 can in principle travel around different states forever .",
    "we will show that there is no loop in the trajectory of @xmath77 , and this will establish the result .    note that @xmath77 goes from one state to another when a new queue appears in the set of maxima in one group .",
    "indeed , state @xmath80 is feasible if time - sharing can keep the queue - lengths of set of maxima equal in that state , so that a queue can not disappear from the set of maxima .",
    "later we see that @xmath80 is feasible if its corresponding vector of time - sharing @xmath93 obtained from equation below is a non - negative vector .",
    "we define two possible moves for @xmath77 in the state diagram of the network .    1 .",
    "_ increase _ : a new maximum appears in one of the groups and @xmath77 reaches a feasible state .",
    "2 .   _ jump _ : a new maximum appears in one of the groups and @xmath77 visits an infeasible state but immediately goes to another feasible state .    to clarify the two possible moves ,",
    "we consider an example of the network in figure [ fig0 ] .",
    "suppose that @xmath77 is initially in state @xmath94 and that , after some time , @xmath95 becomes equal to @xmath96 .",
    "at this time , queues @xmath16 and @xmath2 remain equal by time - sharing if the following identity holds : @xmath97 or , equivalently , if @xmath98 this identity can hold if the expression for @xmath99 is in @xmath100 $ ] , i.e. , if @xmath101 and @xmath102 .",
    "the latter inequality certainly holds because of the utilization conditions .",
    "thus , if @xmath101 , there is an increase move in which @xmath77 goes from state @xmath94 to the feasible state @xmath103 . on the other hand , if @xmath104 , state @xmath77 jumps from state @xmath94 to state @xmath105 , since @xmath103 is infeasible .",
    "below , we will show these two transitions as @xmath106 respectively , where @xmath107 indicates that @xmath108 is not feasible .",
    "if @xmath77 reaches the state in which all the queues are empty , @xmath77 remains in the absorbing  _ zero _ \" state .",
    "note that the zero state is always feasible by the utilization conditions . in this state , @xmath109 is acceptable by equation and leads to @xmath110 .",
    "since the zero state is feasible , @xmath77 remains in this state for a positive amount of time .",
    "now since no new maximum will appear in the network in the zero state , the fluid limit equations will not change , and @xmath77 remains in this absorbing state forever .",
    "[ lem : dai ] at a regular point @xmath43 , @xmath111 if @xmath26 and @xmath25 are in the set of maxima of same group .    since @xmath26 and @xmath25 are in the same group and both in the set of maxima , @xmath112 .",
    "thus , if @xmath43 is a regular point , @xmath113 and @xmath114 are differentiable and @xmath111 .",
    "[ lem : rate ] consider one arbitrary queue @xmath26 and assume that @xmath43 is a regular point such that @xmath115 .",
    "let @xmath116 be the total arrival rate and @xmath117 be the departure rate of queue @xmath26 at time @xmath43",
    ". then @xmath118 .",
    "since @xmath43 is regular and @xmath119 , @xmath113 is differentiable at @xmath43 and @xmath120 .",
    "this proves that @xmath118 .",
    "[ lem : alpha ] at a regular point , @xmath121 can not be a non - negative vector .",
    "define matrix @xmath122 as the following .",
    "@xmath123\\end{aligned}\\ ] ] where @xmath124 is the column vector of length @xmath18 defined as follows : @xmath125^t.\\end{aligned}\\ ] ]    by the fluid model equations and lemma [ lem : dai ] , we have the following matrix equation :    @xmath126   \\left [ \\begin{array}{c } \\dot{{\\ensuremath{\\mathbf{t } } } } \\\\",
    "\\balpha   \\end{array } \\right ] =   \\left [ \\begin{array}{c } \\blambda_l \\\\ \\mathbf{1}_j   \\end{array } \\right].\\ ] ]    solving equation using the block inverse formula , we have",
    "@xmath127    a careful observation shows that @xmath128 is a positive vector , by the stability condition of these subset of queues which is a weaker condition than the stability condition of the whole network .",
    "in section [ sec : st ] , we showed that @xmath129 is a negative matrix .",
    "@xmath130 has the same properties as @xmath59 so , @xmath131 is also a negative matrix .",
    "now since @xmath132 is a positive vector , @xmath121 can not be a non - negative vector .",
    "lemma [ lem : alpha ] shows that some non - zero maxima must decrease , so that @xmath77 can not remain in any state but the zero state which is the only absorbing state .",
    "a sufficient condition for reaching the zero state is that all the possible states of the network are feasible .",
    "indeed , the drifts of the maximum queues in a group are equal in a feasible state , so that a queue can not disappear from the set of maxima before its group becomes empty .",
    "therefore , @xmath77 visits a new state each time a new maximum appears , and it can not make a loop .",
    "consequently , after some finite time @xmath77 reaches the zero state and stability is proved .    in some networks , some states are not feasible . in such networks , proving that @xmath77 does not loop requires a different argument .",
    "we show it for networks with two groups of two queues .      in this section ,",
    "we prove theorem [ thm:1 ] .",
    "the method of proof is to investigate the possible paths of @xmath77 in the state diagram to show that @xmath77 can not make a loop and necessarily reaches the zero state .",
    "the proof uses a few properties of the trajectory of @xmath77 .",
    "we begin with the following result that says that if a queue is removed from the set of maxima , the remaining maxima in its group have a positive drift .",
    "[ lem : branching ] suppose that @xmath77 switches from state @xmath133 to @xmath134 .",
    "let @xmath135 . then ,",
    "if @xmath136 , the maxima of the group that @xmath26 belongs to have positive drift in state @xmath134 .",
    "if @xmath136 , queue @xmath26 is removed from the set of maxima after jumping to state @xmath134 .",
    "this requires that , in state @xmath134 , queue @xmath26 has a smaller drift than the other maxima in its group , say @xmath137 .",
    "that is , @xmath138 .",
    "but , since queue @xmath26 is not served , one has @xmath139 .",
    "consequently , the drift of the maxima in group @xmath25 is positive",
    ".    also recall that a queue can not disappear from the set of a maxima by a transition out of a feasible state .",
    "we are now ready to prove the following result .",
    "[ lem : loop ] under the stability conditions , there is no loop in the trajectories of the state diagram of the lu - kumar network with two groups of two queues .",
    "we prove the lemma by contradiction . to have a loop in the state diagram , there are three possible scenarios .",
    "* scenario i : * there is an empty group in one of the states in the loop .    without loss of generality , we can consider this state to be @xmath140 or @xmath141 .    to show that this is not possible ,",
    "we first show that @xmath142 can not be feasible .",
    "to see this , assume that @xmath142 is feasible . since a queue can not disappear from the set of maxima by leaving a feasible state , the only possible transitions starting from @xmath140 or @xmath142 are @xmath143 these transitions lead to the absorbing zero - state , which contradicts the existence of a loop",
    "hence , @xmath142 is not feasible and @xmath140 must be the feasible state with an empty group in the loop .",
    "second , we claim that @xmath144 can not be feasible .",
    "assume that it is .",
    "one then has the following transitions starting from @xmath140 : @xmath145    in @xmath144 , the drift of group @xmath2 is positive since it was previously empty so queues @xmath146 and @xmath3 are necessarily increasing . thus , group @xmath16 has negative drift and next becomes empty .",
    "we claim that the next feasible state is then @xmath147 . indeed , if that state is not feasible , the next feasible state would then be @xmath148 ( without loss of generality ) .",
    "but , in that state , the maximum @xmath146 must decrease ( since group 1 has a zero drift and one of the groups must have a negative drift , by lemma [ lem : alpha ] ) and the other queue @xmath3 does not , which is not possible .",
    "thus , the next transitions must be @xmath149 which contradicts the existence of a loop .",
    "third , we show that @xmath77 must go to the zero state .",
    "indeed , we have the following transitions : @xmath150    the next state is either @xmath151 or @xmath103 . to see this",
    ", first note that if one of queues @xmath16 or @xmath2 are removed from the set of maxima , by lemma [ lem : branching ] , group @xmath16 has positive drift in the next state . on the other hand ,",
    "since group @xmath2 was previously empty , it necessarily has a positive drift in the next state .",
    "since both of the groups can not have a positive drift , this is a contradiction and it follows that @xmath16 and @xmath2 remain in the set of maxima , and group @xmath16 has negative drift .",
    "therefore , without loss of generality we can consider the next transition to be to @xmath152 , i.e. , we have the following transitions :    @xmath153    next , group @xmath16 becomes empty and @xmath77 visits @xmath154 . after some time , queues @xmath146 and @xmath3 become equal , as @xmath146 has negative drift , so @xmath77 visits @xmath155 , so that group 2 has positive drift by lemma [ lem : branching ] .",
    "we claim that @xmath147 must be feasible .",
    "indeed , group 2 has a positive drift , so group 1 can not have a positive drift and queues 1 and 2 can not appear in a new set of maxima by lemma [ lem : branching ] . since @xmath147 is feasible , the next state is the zero state , which contradicts the existence of a loop .",
    "* scenario ii : * none of the states in the loop has an empty group and there is a state of cardinality @xmath146 in the loop .",
    "note that state @xmath156 can not be in the loop since from that state one of the groups becomes empty . in order to have a loop containing a state with cardinality @xmath146",
    ", we necessarily have a jump happening from a state with @xmath146 maxima , since state @xmath156 can not be in the loop . without loss of generality",
    "suppose that this state is @xmath157 and queue @xmath3 is the new maximum that appears .",
    "* case 1 : * the drift of queue @xmath146 at @xmath133 is positive , so necessarily drifts of @xmath16 and @xmath2 are equal and negative by lemma [ lem : alpha ]",
    ". therefore , we can only jump to @xmath158 with drift of @xmath3 positive and drifts of @xmath16 and @xmath2 negative by lemma [ lem : branching ] . from this point ,",
    "no new maximum can appear until group @xmath16 goes empty since @xmath159 and we are back to scenario i.    * case 2 : * the drift of queue @xmath146 at @xmath133 is negative . to have a jump from this state",
    ", @xmath77 can either go to @xmath103 with @xmath160 in which we are in the same situation as case @xmath16 .",
    "the other possibility is that @xmath161 , and one of the queues @xmath16 or @xmath2 ( for example queue @xmath2 ) is removed from the set of maxima .",
    "note that by lemma [ lem : branching ] , queues @xmath146 and @xmath3 remain equal while having negative drift . from this point ,",
    "no new maximum can appear until group @xmath2 goes empty since @xmath162 and we are back to scenario i.    * scenario iii : * all of the states in the loop are of cardinality @xmath2 .",
    "obviously , not all the maxima of a state can change in a jump .",
    "so for example from @xmath163 , there is no jump to @xmath164 .",
    "now we consider @xmath146 cases :    * case 1 : * there is a loop of length @xmath2 . without loss of generality we can consider the loop to be @xmath165 .",
    "but at state @xmath94 , it is not possible that queue @xmath146 appears again as the new maximum since @xmath166 .",
    "so there is no loop of length @xmath2 in the state diagram .",
    "* case 2 : * there is a loop of length @xmath146 . without loss of generality",
    "we can consider the loop to be @xmath167 .",
    "but clearly the last jump in the loop is not valid .",
    "so there is no loop of length @xmath146 .",
    "* case 3 : * there is a loop of length @xmath3 . without loss of generality we can consider the loop to be @xmath168 .",
    "we can not rule out this case just by inspection like the previous cases .",
    "note that in each of these states the drift of one group is positive and the other one negative since there can not be a jump to a state where both of the drifts are negative by lemma [ lem : branching ] .",
    "a careful observation shows that the sign of the drifts of each group should change in every jump .",
    "if not , as we can see in figure [ fig2 ] , the last jump @xmath169 is not valid by lemma [ lem : branching ] .",
    "the last possible case that we have to investigate is the loop with the drifts shown in figure [ fig3 ] .",
    "the possibility of this loop happening can not be rejected just by inspection .",
    "we write the exact conditions leading to each jump which is an inequality , then sum them up and reach a contradiction .",
    "the jump @xmath170 implies that state @xmath171 is not feasible . indeed solving equation @xmath172 , where @xmath173 leads to @xmath174 which is not acceptable .",
    "so for @xmath175 , @xmath176 and the following condition is obtained .",
    "@xmath177    similarly , for the other @xmath146 jumps we obtain @xmath146 inequalities which are the following .",
    "@xmath178    adding inequalities to , we have    @xmath179    which is clearly not true so we reach a contradiction and the proof of the lemma is complete .",
    "the immediate result of lemma [ lem : loop ] is that @xmath77 will reach the zero state after a finite time since @xmath77 can not travel around a finite state diagram without making a loop and reaching the zero state .",
    "we show the simulation results for the lu - kumar network of figure [ fig0 ] in the fluid limit . in the simulation ,",
    "service rates are @xmath180^t$ ] , and arrival rate is @xmath181 .",
    "initial queue - lengths is @xmath182^t$ ] .",
    "figure [ fig : sim1 ] shows the trajectories of the fluid in different queues versus time . as we can see , first the queue - lengths in different groups become equal . then group @xmath16 goes empty , and from that point drift of group @xmath2 is negative until it is empty .",
    "in each group , we define a queue to be  dominating \" if it can not feed a longest queue in a different group that is larger than itself .",
    "recall that @xmath80 is the set of maxima in the network . for each group @xmath25 ,",
    "the dominating set @xmath183 is defined to be @xmath184    the scheduling policy is to serve the longest queue in @xmath183 .",
    "if @xmath185 , do not serve any queues from group @xmath25 . as an example , see figure [ fig5 ] , where queue @xmath146 is the maximum with length @xmath186 . since jobs leaving both queues @xmath16 and @xmath2 can be destined to queue @xmath146 , @xmath187 so no queues in station @xmath16 is served . as we can see , the policy is not work - conserving .",
    "the policy is robust to the knowledge of service rates and exact values of routing probabilities .",
    "the draw - back in comparison with lq scheduling is that it needs global knowledge of queue lengths and the topology of the network .",
    "we prove the stability using the lyapunov function @xmath189 . by the policy ,",
    "no jobs will be scheduled destined to the queue with maximum length in the whole network .",
    "( not necessarily the maximum in one group ) so , if the maximum is unique @xmath190 is clearly negative .",
    "we prove that if the maximum is not unique , in a regular point the drift of the set of maxima are equal and negative .",
    "let @xmath191 be the set of maximum - length queues in the network , and @xmath192 .",
    "a regular point is a value of @xmath75 at which the function @xmath193 is differentiable .",
    "suppose that @xmath194 . in a regular point , by lemma",
    "[ lem : dai ] , the drifts of all the queues in @xmath191 are equal . since there is no flow to the sub - network of queues in @xmath191 coming from other queues , we can only consider this sub - network to analyse the drift of the lyapunov function .",
    "let the corresponding drift matrix and arrival vectors to set @xmath191 be @xmath195 and @xmath196 .",
    "suppose that @xmath197 groups ( @xmath198 ) have queues in @xmath191 so @xmath199 .",
    "let @xmath200 . in a regular point , the drift of the queues in this sub - network @xmath191 are all equal to @xmath201 .",
    "@xmath207   \\left [ \\begin{array}{c } \\dot{{\\ensuremath{\\mathbf{t}}}}_{l ' } \\\\ \\alpha \\mathbf{1}_{j ' }   \\end{array } \\right ] =   \\left [ \\begin{array}{c } \\blambda_{l ' } \\\\ { \\ensuremath{\\mathbf{t}}}_{j ' } ,   \\end{array } \\right]\\ ] ]    where vector @xmath208 , ~ t_j = \\sum_{i \\in s'_j } \\dot{t}_i \\leq 1 $ ] .",
    "note that for a work - conserving policy @xmath209 .",
    "a careful observation shows that at least one of the elements of @xmath210 is equal to @xmath16 , if the network topology is acyclic .",
    "the reason is that the sub - network certainly has a flow that is leaving the sub - network via an `` output '' queue .",
    "note that if there is a cycle in the network , such a queue may not exist .",
    "( see figure [ fig6 ] ) the group which contains the  output \" queue is work - conserving .",
    "the vector @xmath212 is positive in at least one element corresponding to the work - conserving group by the stability condition of this sub - network .",
    "( which is a weaker condition than the stability condition of the whole network ) we have already proved that @xmath213 is a negative matrix .",
    "now since @xmath214 is not a negative vector , @xmath201 can not be non - negative .",
    "the simulation results show that the network shown in figure [ fig6 ] is indeed unstable under ldq scheduling . in this simulation",
    "all the service rates are @xmath16 , and the arrival rate is @xmath216 .",
    "the result is shown in figure [ fig7 ] .",
    "as one can see , first all the queues become equal but then do not go to @xmath17 and remain constant in this example .    the basic intuition behind this fact is the following .",
    "consider the simple case of figure [ fig8 ] .",
    "we have one queue in each station so no scheduling is needed .",
    "however , ldq serves only one of the queues at a time , and they are virtually in the same group .",
    "consequently , ldq is not throughput optimal if we have a cycle in the network .    in the end",
    ", we see some simulation results for the basic lu - kumar network under ldq scheduling .",
    "the network topology is acyclic so we expect ldq to be stable .",
    "simulation results shown in figure [ fig9 ] verifies this . in this simulation , all the service rate are @xmath16 , and the arrival rate is @xmath217 . as one can see , first all the queues become equal and then go to @xmath17 together .",
    "rate stability of stable marriage scheduling algorithms in input - queued switches .",
    "40th annual allerton conference on computers , communications , and control .",
    "_ university of illinois , urbana - champaign , il ."
  ],
  "abstract_text": [
    "<S> we consider the stability of robust scheduling policies for lu - kumar networks . </S>",
    "<S> these are open networks with arbitrary routing matrix and several disjoint groups of queues in which at most one queue can be served at a time in each group . </S>",
    "<S> the arrival and potential service processes and routing decisions at the queues are independent , stationary and ergodic . </S>",
    "<S> a scheduling policy is called _ robust _ if it does not depend on the arrival and service rates nor on the routing probabilities . </S>",
    "<S> a policy is called _ throughput - optimal _ if it makes the system stable whenever the parameters are such that the system can be stable . </S>",
    "<S> we propose two robust polices : longest - queue scheduling and a new policy called longest - dominating - queue scheduling . </S>",
    "<S> we show that longest - queue scheduling is throughput - optimal for two groups of two queues . </S>",
    "<S> we also prove the throughput optimality of longest - dominating - queue scheduling when the network topology is acyclic , for an arbitrary number of groups and queues . </S>"
  ]
}