{
  "article_text": [
    "elections have played an important role in human societies for thousands of years .",
    "for example , elections were of central importance in the democracy of ancient athens . there citizens typically could only agree ( vote _ yes _ ) or disagree ( vote _ no _ ) with the speaker , and simple majority - rule was in effect",
    ". the mathematical study of elections , give or take a few discussions by the ancient greeks and romans , was until recently thought to have been initiated only a few hundred years ago , namely in the breakthrough work of borda and condorcet  later in part reinvented by dodgson ( see , e.g. ,  @xcite for reprints of these classic papers ) .",
    "one of the most interesting results of this early work is condorcet s observation  @xcite that if one conducts elections with more than two alternatives then even if all voters have rational ( i.e. , transitive ) preferences , the society in aggregate can be irrational ( indeed , can have cycles of strict preference ) .",
    "nonetheless , condorcet believed that if there exists a candidate @xmath11 such that @xmath11 defeats each other candidate in head - to - head contests then @xmath11 should win the election ( see , e.g. ,  @xcite ) . such a candidate is called a condorcet winner .",
    "clearly , there can be at most one condorcet winner in any election , and there might be none .",
    "this understanding of history has been reconsidered during the past few decades , as it has been discovered that the study of elections was considered deeply as early as the thirteenth century ( see hgele and pukelsheim  @xcite and the citations therein regarding ramon llull and the fifteenth - century figure cusanus , especially the citations that in  @xcite are numbered 3 , 5 , and 2427 ) .",
    "ramon llull ( b.  1232 , d.  1315 ) , a catalan mystic , missionary , and philosopher developed an election system that ( a ) has an efficient winner - determination procedure and ( b ) elects a condorcet winner whenever one exists and otherwise elects candidates that are , in a certain sense , closest to being condorcet winners .",
    "llull s motivation for developing an election system was to obtain a method of choosing abbesses , abbots , bishops , and perhaps even the pope .",
    "his election ideas never gained public acceptance in medieval europe and were long forgotten .",
    "it is interesting to note that llull allowed voters to have so - called _ irrational _ preferences . given three candidates , @xmath11 , @xmath12 , and @xmath13 , it was perfectly acceptable for a voter to prefer @xmath11 to @xmath12 , @xmath12 to  @xmath13 , and @xmath13 to  @xmath11 .",
    "on the other hand , in modern studies of voting and election systems each voter s preferences are most typically modeled as a linear order over all candidates .",
    "( in this paper , as is common when discussing elections , `` linear order '' implies strictness , i.e. , no tie in the ordering ; that is , by `` linear order '' we mean a strict , complete order , i.e. , an irreflexive , antisymmetric , complete , transitive relation . )",
    "yet allowing irrationality is very tempting and natural .",
    "consider bob , who likes to eat out but is often in a hurry .",
    "bob prefers diners to fast food because he is willing to wait a little longer to get better food .",
    "also , given a choice between a fancy restaurant and a diner he prefers the fancy restaurant , again because he is willing to wait somewhat longer to get better quality .",
    "however , given the choice between a fast - food place and a fancy restaurant bob might reason that he is not willing to wait so much longer to be served at the fancy restaurant and so will choose fast food instead . thus regarding catering options , bob s preferences are irrational in our sense , i.e. , intransitive .",
    "when voters make their choices based on multiple criteria  a very common and natural occurrence both among humans and software agents  such irrationalities can occur .",
    "llull s election system is remarkably similar to what is now known as `` copeland elections ''  @xcite , a more than half - century old voting procedure that is based on pairwise comparisons of candidates : the winner ( by a majority of votes  in this paper `` majority '' always , as is standard , means strict majority ) of each such head - to - head contest is awarded one point and the loser is awarded zero points ; in ties , both parties are ( in the most common interpretation of copeland s meaning ) awarded half a point ; whoever collects the most points over all these contests ( including tie - related points ) is the election s winner . in fact , the point value awarded for ties in such head - to - head majority - rule contests is treated in two ways in the literature when speaking of copeland elections : half a point ( most common ) and zero points ( less common ) . to provide a framework that can capture both those notions , as well as capturing llull s system and the whole family of systems created by choices of how we value ties , we propose and introduce a parameterized version of copeland elections , denoted by @xmath1 , where the parameter @xmath2 is a rational number , @xmath5 , and in the case of a tie both candidates receive @xmath2 points .",
    "so the system widely referred to in the literature as `` copeland elections '' is copeland@xmath6 , where tied candidates receive half a point each ( see , e.g. , merlin and saari  @xcite ; the definition used by conitzer et al .",
    "@xcite can be scaled to be equivalent to copeland@xmath6 ) .",
    "copeland@xmath8 , where tied candidates come away empty - handed , has sometimes also been referred to as `` copeland elections '' ( see , e.g. , procaccia , rosenschein , and kaminka  @xcite and an early version of this paper  @xcite ) .",
    "the above - mentioned election system proposed by ramon llull in the thirteenth century is in this notation copeland@xmath9 , where tied candidates are awarded one point each , just like winners of head - to - head contests.[multiblock footnote omitted ] the group stage of the fifa world cup finals is in essence a collection of copeland@xmath14 tournaments . at first glance",
    ", one might be tempted to think that the definitional perturbation due to the parameter @xmath2 in @xmath1 elections is negligible .",
    "however , it in fact can make the dynamics of llull s system quite different from those of , for instance , copeland@xmath6 or copeland@xmath8 .",
    "specific examples witnessing this claim , both regarding complexity results and regarding their proofs , are given at the end of section  [ sec : introduction : results ] .    finally , we mention that a probabilistic variant of copeland voting ( known as the jech method ) was defined already in 1929 by zermelo  @xcite and later on was reintroduced by several other researches ( see , e.g. , the paper of levin and nalebuff  @xcite for further references and a description of the jech method ) .",
    "we note in passing that the jech method is applicable even when it is fed incomplete information . in the present paper",
    ", however , we do not consider incomplete - information or probabilistic scenarios , although we commend such settings as interesting for future work .      in general",
    "it is impossible to design a perfect election system . in the 1950s arrow  @xcite",
    "famously showed that there is no social choice system that satisfies a certain small set of arguably reasonable requirements , and later gibbard  @xcite , satterthwaite  @xcite , and duggan and schwartz  @xcite showed that any natural election system can sometimes be manipulated by strategic voting , i.e. , by a voter revealing different preferences than his or her true ones in order to affect an election s result in his or her favor .",
    "also , no natural election system with a polynomial - time winner - determination procedure has yet been shown to be resistant to all types of control via procedural changes .",
    "control refers to attempts by an external agent ( called `` the chair '' ) to , via such actions as addition / deletion / partition of candidates or voters , make a given candidate win the election ( in the case of constructive control  @xcite ) or preclude a given candidate s victory ( in the case of destructive control  @xcite ) .",
    "these obstacles are very discouraging , but the field of computational social choice theory grew in part from the realization that computational complexity provides a potential shield against manipulation / control / etc .",
    "in particular , around 1990 , bartholdi , tovey , and trick  @xcite and bartholdi and orlin  @xcite brilliantly observed that while we perhaps might not be able to make manipulation ( i.e. , strategic voting ) and control of elections impossible , we could at least try to make such manipulation and control so computationally difficult that neither voters nor election organizers will attempt it . for example , if there is a way for a committee s chair to set up an election within the committee in such a way that his or her favorite option is guaranteed to win , but the chair s computational task would take a million years , then for all practical purposes we may feel that the chair is prevented from finding such a set - up .    since the seminal work of bartholdi , orlin , tovey , and trick , a large body of research has been dedicated to the study of computational properties of election systems .",
    "some topics that have received much attention are the complexity of manipulating elections @xcite and of controlling elections via procedural changes  @xcite .",
    "recently , faliszewski , hemaspaandra , and hemaspaandra introduced the study of the complexity of bribery in elections ( @xcite , see also  @xcite ) .",
    "bribery shares some features of manipulation and some features of control .",
    "in particular , the briber picks the voters he or she wants to affect ( as in voter control problems ) and asks them to vote as he or she wishes ( as in manipulation ) .",
    "( for additional citations and pointers , see the recent survey  @xcite . )    in this paper we study @xmath1 elections with respect to the computational complexity of bribery and procedural control ; see  @xcite for a study of manipulation within @xmath1 .",
    "the study of election systems and their computational properties , such as the complexity of their manipulation , control , and bribery problems , is an important topic in multiagent systems .",
    "agents / voters may have different , often conflicting , individual preferences over the given alternatives ( or candidates ) and voting rules ( or , synonymously , election systems ) provide a useful method for agents to come to a `` reasonable '' decision on which alternative to choose .",
    "thus elections can be employed in multiagent settings and also in other contexts to solve many practical problems . as just a few examples we mention the work of ephrati and rosenschein  @xcite where elections are used for planning , the work of ghosh et al .",
    "@xcite who developed a recommender system for movies that is based on voting , and the work of dwork et al .",
    "@xcite where elections are used to aggregate results from multiple web - search engines . in a multiagent setting we may have hundreds of elections happening every minute and we can not hope to carefully check in each case whether the party that organized the election attempted some procedural change to skew the results .",
    "however , if it is computationally hard to find such procedural changes then we can hope it is practically infeasible for the organizers to undertake them .    a standard technique for showing that a particular election - related problem ( for example , the problem of deciding whether the chair can make his or her favorite candidate a winner by influencing at most @xmath15 voters not to cast their votes ) is computationally intractable is to show that it is @xmath0-hard",
    "this approach is taken in almost all the papers on computational social choice cited above , and it is the approach that we take in this paper .",
    "one of the justifications for using @xmath0-hardness as a barrier against manipulation and control of elections is that in multiagent settings any attempts to influence the election s outcome are made by computationally bounded software agents that have neither human intuition nor the computational ability to solve @xmath0-hard problems .",
    "recently , such papers as @xcite have studied the frequency ( or sometimes , probability weight ) of correctness of heuristics for voting problems .",
    "although this is a fascinating and important direction , it does not at this point remove the need to study worst - case hardness .",
    "indeed , we view worst - case study as a natural prerequisite to a frequency - of - hardness attack : after all , there is no point in seeking frequency - of - hardness results if the problem at hand is in  @xmath16 to begin with . and",
    "if one can not even prove worst - case hardness for a problem , then proving `` average - case '' hardness is even more beyond reach .",
    "also , current frequency results have debilitating limitations ( for example , being locked into specific distributions ; depending on unproven assumptions ; and adopting `` tractability '' notions that declare undecidable problems tractable and that are not robust under even linear - time reductions )",
    ". these models are arguably not ready for prime time and , contrary to some people s impression , fail to imply average - case polynomial runtime claims .",
    "@xcite provide discussions of some of these issues .",
    "the goal of this paper is to study @xmath1 elections from the point of view of computational social choice theory , in the setting where voters are rational and in the setting where voters are allowed to have irrational preferences .",
    "( note : when we henceforward say `` irrational voters , '' we mean that the voters may have irrational preferences , not that they each must . )",
    "we study the issues of bribery and control and we point the reader to the work of faliszewski , hemaspaandra , and schnoor  @xcite for work on manipulation .",
    "( very briefly summarized , the work of faliszewski , hemaspaandra , and schnoor  @xcite on manipulation of @xmath1 elections shows that for all rational @xmath2 , @xmath17 , @xmath18 , the coalitional manipulation problem in unweighted @xmath1 elections , even for coalitions of just two manipulators , is @xmath0-complete .",
    "some of the constructions of the present paper have been adopted or adapted in that paper in order to prove results about manipulation . )",
    "bribery and control problems have some very natural real - life interpretations . for example , during presidential elections a candidate might want to encourage as many of his or her supporters as possible to vote ( `` get - out - the - vote '' efforts ) : control via addition of voters ; elections can be held at an inconvenient date for a group of voters ( e.g. , a holiday ) or at a hard - to - reach location ( e.g. , requiring one to own a car , or such that getting to the location involves passing dangerous areas ) : control via deleting voters ; one can choose voting districts in a way favorable to a particular candidate or party ( gerrymandering ) : control via partitioning voters ; one can introduce a new candidate to the election in the hope that he or she will steal votes away from the opponents of one s favorite candidate without affecting the favorite candidate s performance : control via adding candidates .",
    "all the other control scenarios that we study also have natural interpretations .",
    "similarly , bribery is a natural and important issue in the context of elections .",
    "we stress , however , that bribery problems do not necessarily need to correspond to cheating or any sort of illegal action .",
    "one could view bribery problems as , for example , problems of finding the minimum number of voters who can switch the result of the election and , thus , as problems of finding coalitions , especially if one assigns prices to voters to measure the difficulty of convincing a particular voter to join the coalition ( see , e.g. , the paper of faliszewski  @xcite for an example of a bribery problem where such an interpretation is very natural ) .",
    "it is quite natural to study control and bribery both in constructive settings ( where we want to make our favorite candidate a winner ) and in destructive settings ( where we try to prevent a candidate from winning ) . in the context of real - life elections ,",
    "one often hears voters speaking of which candidate they hope will win , but one also often hears voters expressing the sentiment `` anyone but _",
    "him_. '' the constructive and destructive settings correspond to actions that agents belonging to these groups might be interested in .",
    "one of the main achievements of this paper is to classify which of resistance or vulnerability holds for @xmath1 in every previously studied control scenario for each rational value of  @xmath2 , @xmath5 . in doing so , we provide an example of a control problem where the complexity of copeland@xmath6 ( which is the system commonly referred to as `` copeland '' ) differs from that of both copeland@xmath8 and copeland@xmath9 : while the latter two problems are vulnerable to constructive control by adding ( an unlimited number of ) candidates , copeland@xmath6 is resistant to this control type ( see section  [ sec : prelims ] for definitions and theorem  [ thm : ccacu ] for this result ) .    in fact , copeland ( i.e. , copeland@xmath6 ) is the first natural election system ( with a polynomial - time winner problem ) proven to be resistant to every type of constructive control that has been proposed in the literature to date .",
    "this result closes a 15-year quest for a natural election system fully resistant to constructive control .",
    "we also show that @xmath1 is resistant to both constructive and destructive bribery , for both the case of rational voters and the case of irrational voters .",
    "our hardness proofs work for the case of unweighted voters without price tags ( see  @xcite ) and thus , naturally , apply as well to the more involved scenarios of weighted unpriced voters , unweighted priced voters , and weighted priced voters .    to prove our bribery results , we introduce a method of controlling the relative performances of certain voters in such a way that ,",
    "if one sets up other restrictions appropriately , the legal possibilities for bribery actions are sharply constrained .",
    "we call our approach `` the uv technique , '' since it is based on dummy candidates @xmath19 and @xmath20 . the proofs of theorems  [ thm : bribery : dest - copelandalpha ] and  [ thm : bribery : cons - copelandalpha ] are particular applications of this method .",
    "we feel that the uv technique will be useful , even beyond the scope of this paper , for the analysis of bribery in other election systems based on head - to - head contests .",
    "we also study @xmath1 elections under more flexible models such as `` microbribery '' ( see section  [ sec : microbribery : vulnerability ] ) and `` extended control '' ( see section  [ sec : control - fpt ] ) .",
    "we show that @xmath1 ( with irrational voters allowed ) is vulnerable to destructive microbribery and to destructive candidate control via providing fairly simple greedy algorithms .",
    "in contrast , our polynomial - time algorithms for constructive microbribery are proven via a technique involving min - cost network flows . to the best of our knowledge ,",
    "this is the first application of min - cost flows to election problems .",
    "we believe that the range of applicability of flow networks to election problems extends well beyond microbribery for @xmath1 elections and we point the reader to a recent , independent paper by procaccia , rosenschein , and zohar  @xcite and to a paper by faliszewski  @xcite for examples of such applications .",
    "we also mention that during our study of copeland control we noticed that the proof of an important result of bartholdi , tovey , and trick  ( * ? ? ?",
    "* theorem  12 ) ( namely , that condorcet voting is resistant to constructive control by deleting voters ) is invalid .",
    "the invalidity is due to the proof centrally using nonstrict voters , in violation of bartholdi , tovey , and trick s @xcite ( and our ) model , and the invalidity seems potentially daunting or impossible to fix with the proof approach taken there .",
    "we note also that theorem  14 of the same paper has a similar flaw . in section  [ sec : control - condorcet ]",
    "we validly reprove their claimed results using our techniques .    as mentioned in section  [ sec : introduction : llull - copeland ] , @xmath1 elections may behave quite differently depending on the value of the tie - rewarding parameter  @xmath2 .",
    "we now give concrete examples to make this case .",
    "specifically , proofs of results for @xmath1 occasionally differ considerably for distinct values of  @xmath2 , and in some cases even the computational complexity of various control and manipulation problems ( for the manipulation case see  @xcite ) may jump between @xmath16 membership and @xmath0-completeness depending on  @xmath2 . regarding control , we have already noted that theorem  [ thm : ccacu ] shows that some control problem ( namely , control by adding an unlimited number of candidates ) for @xmath1 is @xmath0-complete for each rational @xmath2 with @xmath7 , yet theorem  [ thm : unlimited - adding - constructive ] shows that same control problem to be in @xmath16 for @xmath21 . to give another example involving a different control problem , namely control by partition of candidates with the ties - eliminate tie - handling rule ( see section  [ sec : prelims ] ) , we note that the proofs of theorem  [ thm : ccpc - te-1 ] ( which applies to @xmath22 for this control problem within @xmath1 ) and of theorem  [ thm : ccpc - te - smaller - than-1 ] ( which applies to all rational @xmath2 with @xmath23 for the same problem ) differ substantially . regarding constructive microbribery , the vulnerability constructions for @xmath24 ( see lemma  [ lem : bribery - prime - even - copeland - ties ] ) and @xmath22 ( see lemma  [ lem : bribery - prime - even - llull - ties ] ) significantly differ from each other , and neither of them works for tie - rewarding values other than @xmath3 and @xmath4 .",
    "the above remarks notwithstanding , for most of our results we show that it is possible to obtain a unified  though due to this uniformity sometimes rather involved  construction that works for @xmath1 for every rational  @xmath2 , @xmath25 .",
    "this paper is organized as follows . in section  [ sec :",
    "prelims ] , we formalize the notion of elections and in particular of @xmath1 elections , we introduce some useful notation , and we formally define the control and bribery problems we are interested in . in section  [ sec : bribery ] , we show that for each rational @xmath2 , @xmath5 , @xmath1 elections are fully resistant to bribery , both in the case of rational voters and in the case of irrational voters . on the other hand , if one changes the bribery model to allow `` microbribes '' of voters ( a fine - grained approach to bribery , in which the more one changes a voter s vote , the more one has to pay the voter ) , we prove vulnerability for each rational @xmath2 , @xmath5 , in the irrational - voters destructive case and for some specific values of @xmath2 in the irrational - voters constructive case . in sections  [ sec : control - candidate ] and",
    "[ sec : control - voter ] , we present our results on procedural control for @xmath1 elections for each rational @xmath2 with @xmath5",
    ". we will see that very broad resistance holds for the constructive - control cases .",
    "section  [ sec : control - fpt ] presents our results on fixed - parameter tractability of bounded - case control for @xmath1 .",
    "section  [ sec : control - condorcet ] provides valid proofs for several control problems for condorcet elections ( studied by bartholdi , tovey , and trick  @xcite ) whose original proofs were invalid due to being at odds with the model of elections used in  @xcite .",
    "we conclude the paper with a brief summary in section  [ sec : conclusions ] and by stating some open problems .",
    "an _ election _ @xmath26 consists of a finite candidate set @xmath27 and a finite collection @xmath28 of voters , where each voter is represented ( individually , except later when we discuss succinct inputs ) via his or her preferences over the candidates .",
    "an _ election system _ ( or an _ election rule _ ) is a rule that determines the winner(s ) of each given election , i.e. , a mapping from pairs @xmath29 to subsets of  @xmath30 .",
    "we consider two ways in which voters can express their preferences . in the _ rational _ case ( our default case ) , each voter s preferences are represented as a linear order over the set @xmath30 , i.e. , each voter @xmath31 has a _ preference list _ @xmath32 , with @xmath33 . in the _ irrational _ case , each voter s preferences are represented as a _ preference table _ that for every unordered pair of distinct candidates @xmath34 and",
    "@xmath35 in  @xmath30 indicates whether the voter prefers @xmath34 to @xmath35 ( i.e. , @xmath36 ) or prefers @xmath35 to @xmath34 ( i.e. , @xmath37 ) .    some well - known election rules for the case of rational voters are plurality , borda count , and condorcet . _",
    "plurality _ elects the candidate(s ) that are ranked first by the largest number of voters . _",
    "borda count _ elects the candidate(s ) that receive the most points , where each voter @xmath31 gives each candidate @xmath35 as many points as the number of candidates @xmath35 is preferred to with respect to @xmath31 s preferences . a candidate @xmath34 is a _ condorcet winner",
    "_ if for every other candidate @xmath35 it holds that @xmath34 is preferred to @xmath35 by a majority of voters .",
    "note that each election instance will have at most one condorcet winner . in this paper",
    ", we introduce a parameterized version of copeland s election system  @xcite , which we denote by @xmath1 , where the parameter @xmath2 is a rational number between @xmath3 and @xmath4 that specifies how ties are rewarded in the head - to - head majority - rule contests between any two distinct candidates .",
    "[ def : copeland ] let @xmath2 , @xmath5 , be a rational number . in a @xmath1 election",
    ", for each head - to - head contest between two distinct candidates , if some candidate is preferred by a majority of voters then he or she obtains one point and the other candidate obtains zero points , and if a tie occurs then both candidates obtain @xmath2 points .",
    "let @xmath26 be an election . for each @xmath38 ,",
    "@xmath39 is ( by definition ) the sum of @xmath11 s @xmath1 points in  @xmath40 .",
    "every candidate @xmath11 with maximum @xmath39 ( i.e. , every candidate @xmath11 satisfying @xmath41 $ ] ) wins .",
    "let @xmath42 denote the same election system but with voters allowed to be irrational .",
    "as mentioned earlier , in the literature the term `` copeland elections '' is most often used for the system copeland@xmath6 ( e.g. , @xcite and a rescaled version of  @xcite ) , but has occasionally been used for copeland@xmath8 ( e.g. ,  @xcite and an early version of this paper  @xcite ) .",
    "as mentioned earlier , the system copeland@xmath9 was proposed by llull in the thirteenth century ( see the literature pointers given in the introduction ) and so is called llull voting .",
    "we now define some notation to help in the discussion of @xmath1 elections . informally put , if @xmath26 is an election and if @xmath34 and @xmath35 are any two candidates in @xmath30 then by @xmath43 we mean the surplus of votes that candidate @xmath34 has over @xmath35 .",
    "formally , we define this notion as follows .",
    "let @xmath26 be an election and let @xmath34 and @xmath35 be two arbitrary candidates from  @xmath30 .",
    "define the _ relative vote - score of @xmath34 with respect to @xmath35 _ by @xmath44",
    "so , if @xmath34 defeats @xmath35 in a head - to - head contest in @xmath40 then @xmath45 , if they are tied then @xmath46 , and if @xmath35 defeats @xmath34 then @xmath47 .",
    "( throughout this paper , `` defeats '' excludes the possibility of a tie , i.e. , `` defeats '' means `` ( strictly ) defeats . ''",
    "we will say `` ties - or - defeats '' when we wish to allow a tie to suffice . ) clearly , @xmath48 .",
    "we often speak , in the plural , of relative vote - scores when we mean a group of results of head - to - head contests between particular candidates .",
    "let @xmath2 , @xmath5 , be a rational number .",
    "definition  [ def : copeland ] introduced @xmath49 , the @xmath1 score of candidate @xmath11 in election  @xmath40 .",
    "note that for each candidate @xmath50 , @xmath51 in particular , we have @xmath52 , and @xmath53 .",
    "note further that the highest possible @xmath1 score in any election @xmath26 is @xmath54 .",
    "recall that a candidate @xmath50 is a @xmath1 winner of @xmath26 if for all @xmath55 it holds that @xmath56 .",
    "( clearly , some elections can have more than one @xmath1 winner . ) a candidate @xmath34 is a condorcet winner of @xmath40 if @xmath57 , that is , if @xmath34 defeats all other candidates in head - to - head contests .    in many of our constructions to be presented in the upcoming proofs ,",
    "we use the following notation for rational voters .    within every election we fix some arbitrary order over the candidates .",
    "any occurrence of a subset @xmath58 of candidates in a preference list means the candidates from @xmath58 are listed with respect to that fixed order .",
    "occurrences of @xmath59 mean the same except that the candidates from @xmath58 are listed in the reverse order .",
    "for example , if @xmath60 , with the alphabetical order being used , and @xmath61 then @xmath62 means @xmath63 , and @xmath64 means @xmath65 .",
    "we now describe the computational problems that we study in this paper .",
    "our problems come in two flavors : constructive and destructive . in the constructive version",
    "the goal is to determine whether , via the bribery or control action type under study , it is possible to make a given candidate a winner of the election . in the destructive case",
    "the goal is to determine whether it is possible to prevent a given candidate from being a winner of the election .",
    "let @xmath66 be an election system .",
    "in our case , @xmath66 will be either @xmath1 or @xmath42 , where @xmath2 , @xmath5 , is a rational number .",
    "the bribery problem for @xmath66 with rational voters is defined as follows  @xcite .",
    "name : : :    @xmath67    and    @xmath68 . given : : :    a set @xmath30 of candidates , a collection @xmath28 of    voters specified via their preference lists over @xmath30 , a    distinguished candidate @xmath69 , and a nonnegative    integer @xmath15 .",
    "question ( constructive ) : : :    is it possible to make @xmath70 a winner of the    @xmath66 election resulting from    @xmath29 by modifying the preference lists of at most    @xmath15 voters ?",
    "question ( destructive ) : : :    is it possible to ensure that @xmath70 is not a winner of the    @xmath66 election resulting from    @xmath29 by modifying the preference lists of at most    @xmath15 voters ?",
    "the version of this problem for elections with irrational voters allowed is defined exactly like the rational one , with the only difference being that voters are represented via preference tables rather than preference lists , and the briber may completely change a voter s preference table at unit cost . at the end of the present section , section  [ ss : problems ] , we will describe the variants based on seeking to make @xmath70 be ( or to preclude @xmath70 from being ) a _ unique _ winner . later in the paper",
    "we will study another variant of bribery problems  a variant in which one is allowed to perform microbribes : bribes for which the cost depends on each preference - table entry change , and the briber pays separately for each such change .",
    "bribery problems seek to change the outcome of elections via modifying the reported preferences of some of the voters .",
    "in contrast , control problems seek to change the outcome of an election by modifying the election s structure via adding / deleting / partitioning either candidates or voters . when formally defining these control types , we use the following naming conventions for the corresponding control problems .",
    "the name of a control problem starts with the election system used ( when clear from context , it may be omitted ) , followed by cc for `` constructive control '' or by dc for `` destructive control , '' followed by the acronym of the type of control : ac for `` adding ( a limited number of ) candidates , '' ac@xmath71 for `` adding ( an unlimited number of ) candidates , '' dc for `` deleting candidates , '' pc for `` partition of candidates , '' rpc for `` run - off partition of candidates , '' av for `` adding voters , '' dv for `` deleting voters , '' and pv for `` partition of voters . ''",
    "all the partitioning cases ( pc , rpc , and pv ) are two - stage elections , and we here use both tie - handling rules of hemaspaandra , hemaspaandra , and rothe  @xcite for first - stage subelections in these two - stage elections . in particular , for all the partitioning cases ,",
    "the acronym pc , rpc , and pv , respectively , is followed by the acronym of the tie - handling rule used in first - stage subelections , namely tp for `` ties promote '' ( i.e. , all winners of first - stage subelections are promoted to the final round of the election ) and te for `` ties eliminate '' ( i.e. , only unique winners of first - stage subelections are promoted to the final round of the election , so if there is more than one winner in a given first - stage subelection or there is no winner in a given first - stage subelection then that subelection does not move any of its candidates forward ) .",
    "we now formally define our control problems .",
    "these definitions are due to bartholdi , tovey , and trick  @xcite for constructive control and to hemaspaandra , hemaspaandra , and rothe  @xcite for destructive control .",
    "let @xmath66 be an election system .",
    "again , @xmath66 will here be either @xmath1 or @xmath42 , where @xmath2 , @xmath5 , is a rational number .",
    "we describe our control problems as if they were for the case of rational preferences , but the irrational cases are perfectly analogous , except for replacing preference lists with preference tables .",
    "we start with two versions of control via adding candidates . in the unlimited version",
    "the goal of the election chair is to introduce candidates from a pool of spoiler candidates so as to make his or her favorite candidate a winner of the election ( in the constructive case ) or prevent his or her despised candidate from being a winner ( in the destructive case ) . as suggested by the name of the problem , in the unlimited version the chair can introduce any subset of the spoiler candidates ( none , some , or all are all legal options ) into the election .",
    "name : : :    @xmath72    and    @xmath73    ( control via adding an unlimited number of candidates ) . given : : :    disjoint sets @xmath30 and @xmath58 of candidates , a    collection @xmath28 of voters specified via their preference    lists over the candidates in the set @xmath74 , and a    distinguished candidate @xmath69 .",
    "question ( @xmath72 ) : : :    is there a subset @xmath40 of @xmath58 such that    @xmath70 is a winner of the @xmath66    election with voters @xmath28 and candidates @xmath75 ?",
    "question ( @xmath73 ) : : :    is there a subset @xmath40 of @xmath58 such that    @xmath70 is not a winner of the    @xmath66 election with voters    @xmath28 and candidates @xmath75 ?",
    "the definition of @xmath72 was ( using different notation ) introduced by bartholdi , tovey , and trick  @xcite .",
    "in contrast with the other control problems involving adding or deleting candidates or voters , in the adding candidates problem bartholdi , tovey , and trick did not introduce a nonnegative integer @xmath15 that bounds the number of candidates ( from the set @xmath58 ) the chair is allowed to add .",
    "we feel this asymmetry in their definitions is not well justified , we could equally well have formalized [ the problem of control via adding candidates ] to be whether there are @xmath76 or fewer candidates to be added [  ] it does not much matter for the problems we discuss , since both versions are of the same complexity . '' in contrast , the complexity of the problems studied here crucially hinges on which formalization is used , and we thus define both versions formally . ]",
    "and thus we define a with - change - parameter version of the control - by - adding - candidates problems , which we denote by @xmath77 ( where the `` l '' stands for the fact that part of the problem instance is a _ _",
    "l__imit on the number of candidates that can be added , in contrast with the model of bartholdi , tovey , and trick  @xcite , which we denote by @xmath78 with the `` u '' standing for the fact that the number of added candidates is _",
    "_ u__nlimited , at least in the sense of not being limited via a separately input integer ) .",
    "the with - parameter version is the long - studied case for av , dv , and dc , and we in this paper will use ac as being synonymous with @xmath77 , and will thus use the notation ac for the rest of this paper when speaking of @xmath77 .",
    "we suggest this as a natural regularization of the definitions and we hope this version will become the `` normal '' version of the adding - candidates problem for further study .",
    "however , we caution the reader that in earlier papers ac is used to mean @xmath78 .    in the present paper",
    ", we will obtain results not just for @xmath79 but also for the @xmath78 case , in order to allow comparisons between the results of this paper and those of earlier works .",
    "turning now to what we mean by ac ( equivalently , @xmath79 ) , as per the above definition in @xmath80 ( i.e. , @xmath81 ) we ask whether it is possible to make the distinguished candidate @xmath70 a winner of some @xmath66 election obtained by adding at most @xmath15 candidates from the spoiler candidate set @xmath58 .",
    "( note that @xmath15 is part of the input . )",
    "we define the destructive version , @xmath82 ( i.e. , @xmath83 ) , analogously .    name : : :    @xmath84    and    @xmath85    ( control via adding a limited number of candidates ) . given : : :    disjoint sets @xmath30 and @xmath58 of candidates , a    collection @xmath28 of voters specified via their preference    lists over the candidates in the set @xmath74 , a    distinguished candidate @xmath69 , and a nonnegative    integer @xmath15 .",
    "question ( @xmath84 ) : : :    is there a subset @xmath40 of @xmath58 such that    @xmath86 and @xmath70 is a winner of the    @xmath66 election with voters    @xmath28 and candidates @xmath87 ?",
    "question ( @xmath85 ) : : :    is there a subset @xmath40 of @xmath58 such that    @xmath86 and @xmath70 is not a winner of the    @xmath66 election with voters    @xmath28 and candidates @xmath87 ?      in constructive control via deleting candidates , the chair seeks to ensure that his or her favorite candidate @xmath70 is a winner of the election by suppressing at most @xmath15 candidates . in the destructive variant of this problem , the chair s goal is to block @xmath70 from winning by suppressing at most @xmath15 candidates other than  @xmath70 .",
    "name : : :    @xmath88    and    @xmath89    ( control via deleting candidates ) . given : : :    a set @xmath30 of candidates , a collection @xmath28 of    voters represented via preference lists over @xmath30 , a    distinguished candidate @xmath69 , and a nonnegative    integer @xmath15 .",
    "question ( @xmath88 ) : : :    is it possible to by deleting at most @xmath15 candidates    ensure that @xmath70 is a winner of the resulting    @xmath66 election ?",
    "question ( @xmath89 ) : : :    is it possible to by deleting at most @xmath15 candidates other    than @xmath70 ensure that @xmath70 is not a winner of    the resulting @xmath66 election ?",
    "bartholdi , tovey , and trick  @xcite gave two types of control of elections via partition of candidates .",
    "in both cases the candidate set @xmath30 is partitioned into two groups , @xmath90 and @xmath91 ( i.e. , @xmath92 and @xmath93 ) , and the election is conducted in two stages . for control via run - off partition of candidates , the election s first stage is conducted separately on each group of candidates , @xmath90 and @xmath91 , and the group winners that survive the tie - handling rule compete against each other in the second stage . in control via partition of candidates , the first - stage election is performed on the candidate set @xmath90 and those of that election s winners that survive the tie - handling rule compete against all candidates from @xmath91 in the second stage .    in the ties - promote ( tp ) model , all first - stage winners within a group are promoted to the final round . in the ties - eliminate ( te ) model , a first - stage winner within a group is promoted to the final round if and only if he or she is the unique winner within that group .",
    "name : : :    @xmath94    and    @xmath95    ( control via run - off partition of candidates ) . given : : :    a set @xmath30 of candidates , a collection @xmath28 of    voters represented via preference lists over @xmath30 , and a    distinguished candidate @xmath69 .",
    "question ( @xmath94 ) : : :    is there a partition of @xmath30 into @xmath90 and    @xmath91 such that @xmath70 is a winner of the    two - stage election where the winners of subelection    @xmath96 that survive the tie - handling rule compete    against the winners of subelection @xmath97 that survive    the tie - handling rule ?",
    "each subelection ( in both stages ) is conducted    using election system  @xmath66 .",
    "question ( @xmath95 ) : : :    is there a partition of @xmath30 into @xmath90 and    @xmath91 such that @xmath70 is not a winner of the    two - stage election where the winners of subelection    @xmath96 that survive the tie - handling rule compete    against the winners of subelection @xmath97 that survive    the tie - handling rule ?",
    "each subelection ( in both stages ) is conducted    using election system  @xmath66 .",
    "the above description defines four computational problems for a given election system  @xmath66 : @xmath98 , @xmath99 , @xmath100 , and @xmath101 .",
    "name : : :    @xmath102    and    @xmath103    ( control via partition of candidates ) . given : : :    a set @xmath30 of candidates , a collection @xmath28 of    voters represented via preference lists over @xmath30 , and a    distinguished candidate @xmath69 .",
    "question ( @xmath102 ) : : :    is there a partition of @xmath30 into @xmath90 and    @xmath91 such that @xmath70 is a winner of the    two - stage election where the winners of subelection    @xmath96 that survive the tie - handling rule compete    against all candidates in @xmath91 ?",
    "each subelection ( in both    stages ) is conducted using election    system  @xmath66 .",
    "question ( @xmath103 ) : : :    is there a partition of @xmath30 into @xmath90 and    @xmath91 such that @xmath70 is not a winner of the    two - stage election where the winners of subelection    @xmath96 that survive the tie - handling rule compete    against all candidates in @xmath91 ?",
    "each subelection ( in both    stages ) is conducted using election    system  @xmath66 .",
    "this description defines four computational problems for a given election system  @xmath66 : @xmath104 , @xmath105 , @xmath106 , and @xmath107 .      in the scenario of control via adding voters , the chair s goal is to either ensure that @xmath70 is a winner ( in the constructive case ) or ensure that @xmath70 is not a winner ( in the destructive case ) via causing up to @xmath15 additional voters to participate in the election .",
    "the chair can draw the voters to add to the election from a prespecified collection of voters ( with given preferences ) .",
    "name : : :    @xmath108    and    @xmath109    ( control via adding voters ) . given : : :    a set @xmath30 of candidates , two disjoint collections of    voters , @xmath28 and @xmath110 , represented via    preference lists over @xmath30 , a distinguished candidate    @xmath70 , and a nonnegative integer  @xmath15 .",
    "question ( @xmath108 ) : : :    is there a subset @xmath111 , @xmath112 , of    voters in @xmath110 such that the voters in    @xmath113 jointly elect @xmath69 as a winner    according to system  @xmath66 ?",
    "question ( @xmath109 ) : : :    is there a subset @xmath111 , @xmath112 , of    voters in @xmath110 such that the voters in    @xmath113 do not elect @xmath70 as a winner    according to system  @xmath66 ?      in the control via deleting voters case the chair seeks to either ensure that @xmath70 is a winner ( in the constructive case ) or prevent @xmath70 from being a winner ( in the destructive case ) via blocking up to @xmath15 voters from participating in the election .",
    "( this loosely models vote suppression or disenfranchisement . )",
    "name : : :    @xmath114    and    @xmath115    ( control via deleting voters ) . given : : :    a set @xmath30 of candidates , a collection @xmath28 of    voters represented via preference lists over @xmath30 , a    distinguished candidate @xmath69 , and a nonnegative    integer @xmath15 .",
    "question ( @xmath114 ) : : :    is it possible to by deleting at most @xmath15 voters ensure    that @xmath70 is a winner of the resulting    @xmath66 election ?",
    "question ( @xmath115 ) : : :    is it possible to by deleting at most @xmath15 voters ensure    that @xmath70 is not a winner of the resulting    @xmath66 election ?      in the case of control via partition of voters , the following two - stage election is performed .",
    "first , the voter set @xmath28 is partitioned into two subcommittees , @xmath116 and  @xmath117 .",
    "the winners of election @xmath118 that survive the tie - handling rule compete against the winners of @xmath119 that survive the tie - handling rule . again",
    ", our tie - handling rules are te and tp ( ties - eliminate and ties - promote ) .",
    "name : : :    @xmath120    and    @xmath121    ( control via partition of voters ) . given : : :    a set @xmath30 of candidates , a collection @xmath28 of    voters represented via preference lists over @xmath30 , and a    distinguished candidate @xmath69 .",
    "question ( @xmath120 ) : : :    is there a partition of @xmath28 into @xmath116 and    @xmath117 such that @xmath70 is a winner of the    two - stage election where the winners of election @xmath118    that survive the tie - handling rule compete against the winners of    @xmath119 that survive the tie - handling rule ?",
    "each    subelection ( in both stages ) is conducted using election    system  @xmath66 .",
    "question ( @xmath121 ) : : :    is there a partition of @xmath28 into @xmath116 and    @xmath117 such that @xmath70 is not a winner of the    two - stage election where the winners of election @xmath118    that survive the tie - handling rule compete against the winners of    @xmath119 that survive the tie - handling rule ?",
    "each    subelection ( in both stages ) is conducted using election    system  @xmath66 .",
    "our bribery and control problems were each defined above only for rational voters and in the _ nonunique - winner _ model , i.e. , asking whether a given candidate can be made , or prevented from being , _ a _ winner .",
    "nonetheless , we have proven all our control results both for the case of nonunique winners and ( to be able to fairly compare them with existing control results , which except for the interesting `` multi - winner '' model of procaccia , rosenschein , and zohar  @xcite are in the unique - winner model ) _ unique winners _ ( a candidate is a unique winner",
    "if he or she is a winner and is the only winner ) .",
    "similarly , all our bribery results are proven both in the unique - winner model and ( to be able to fairly compare them with existing bribery results in the literature ) in the nonunique - winner model .",
    "in addition to the rational - voters case , we also study these problems for the case of voters who are allowed to be irrational .",
    "as mentioned earlier , in the case of irrational voters , voters are represented via preference tables rather than preference lists .      an _ undirected graph _",
    "@xmath122 is a pair @xmath123 , where @xmath124 is the set of vertices and @xmath125 is the set of edges and each edge is an unordered pair of distinct vertices . and @xmath28 are generally reserved for elections and voters , except the just introduced `` overloading '' of them to mean sets of edges and vertices in a given graph .",
    "the intended meaning of @xmath40 and @xmath28 will be clear from the context , even when our proofs involve multiple elections and graphs . ] a _ directed graph _ is defined analogously , except that the edges are represented as ordered pairs .",
    "for example , if @xmath19 and @xmath20 are distinct vertices in an undirected graph @xmath122 then @xmath122 either has an edge @xmath126 that connects @xmath19 and @xmath20 or it does nt . on the other hand ,",
    "if @xmath122 is a directed graph then @xmath122 either has an edge @xmath127 from @xmath19 to  @xmath20 , or an edge @xmath128 from @xmath20 to  @xmath19 , or both @xmath129 and  @xmath130 , or neither @xmath129 nor  @xmath130 .    for a directed graph @xmath122 , the _ indegree _ of a vertex @xmath131 is the number of @xmath122 s edges that enter  @xmath19 ( i.e. , the number of edges of the form @xmath132 in @xmath125 ) .",
    "similarly , the _ outdegree _ of @xmath133 is the number of edges that leave  @xmath19 ( i.e. , the number of edges of the form @xmath134 in @xmath125 ) .      without loss of generality , we assume that all problems that we consider are encoded in a natural , efficient way over the alphabet @xmath135 .",
    "we use the standard notion of @xmath0-completeness , defined via polynomial - time many - one reductions .",
    "we say that a computational problem @xmath136 _ polynomial - time many - one reduces _ to a problem @xmath137 if there exists a polynomial - time computable function @xmath138 such that @xmath139.\\ ] ] a problem is _ np - hard _ if all members of @xmath0 polynomial - time many - one reduce to it . thus , if an @xmath0-hard problem @xmath136 polynomial - time many - one reduces to a problem @xmath137 , then @xmath137 is @xmath0-hard as well .",
    "a problem is _ np - complete _ if it is @xmath0-hard and is a member of @xmath0 .",
    "when clear from context we will use `` reduce '' and `` reduction '' as shorthands for `` polynomial - time many - one reduce '' and `` polynomial - time many - one reduction . ''",
    "our @xmath0-hardness results typically follow via a reduction from either the exact - cover - by-3-sets problem or from the vertex cover problem ( see , e.g. ,  @xcite ) .",
    "these are well - known @xmath0-complete problems , but we define them here for the sake of completeness .",
    "name : : :    x3c ( exact cover by 3-sets ) . given : : :    a set @xmath140 ,    @xmath141 , and a family of sets    @xmath142 such that",
    "for each    @xmath143 , @xmath144 , it holds that @xmath145 and    @xmath146 .",
    "question : : :    is there a set @xmath147 ,    @xmath148 , such that    @xmath149 ?",
    "the set @xmath136 about which we ask in the above problem is called an _ exact cover of  @xmath137_. it is a `` cover '' because every member of @xmath137 belongs to some @xmath150 such that @xmath151 , and it is `` exact '' because each member of @xmath137 belongs to exactly one @xmath150 such that @xmath152 .    whenever we consider instances of the x3c problem",
    ", we assume that they are well - formed , that is , we assume that they follow the syntactic requirements stated in the above `` given '' field ( e.g. , the cardinality of the set @xmath137 is indeed a multiple of three ) .",
    "we apply this convention of considering only syntactically correct inputs to all other problems as well .",
    "let @xmath136 be some computational problem and let @xmath153 be an instance of @xmath136 .",
    "when we consider an algorithm for @xmath136 , and input @xmath153 is malformed , then we can immediately reject .",
    "when we are building a reduction from @xmath136 to some problem @xmath137 , then whenever we hit a malformed input @xmath153 we can output a fixed @xmath154 not in @xmath137 .",
    "( in our reductions @xmath137 is never @xmath155 , so this is always possible . )",
    "@xmath1 elections can often be considered in terms of appropriate graphs .",
    "this representation is particularly useful when we face control problems that modify the structure of the candidate set , since in this case operations on an election directly translate into suitable operations on the corresponding graph . for candidate control problems , we  instead of using reductions from x3c  construct reductions from the vertex cover problem .",
    "a vertex cover of an undirected graph @xmath122 is a subset of @xmath122 s vertices such that each edge of @xmath122 is adjacent to at least one vertex from that subset .",
    "name : : :    vertexcover . given : : :    an undirected graph @xmath122 and a nonnegative integer    @xmath15 .",
    "question : : :    is there a set @xmath110 such that    @xmath156 , @xmath157 , and for    every edge @xmath158 it holds that    @xmath159 ?      not all election systems can be affected by each control type ; if not , the system is said to be _ immune _ to this type of control .",
    "for example , if a candidate @xmath11 is not a condorcet winner then it is impossible to make him or her a condorcet winner by adding candidates ( see  @xcite and  @xcite for more such immunity results ) .",
    "however , for @xmath1 elections it is easy to see that for each type of control defined in section  [ ss : problems ] there is a scenario in which the outcome of the election can indeed be changed via conducting the corresponding control action .",
    "if an election system is not immune to some type of control ( as witnessed by such a scenario ) , the election system is said to be _ susceptible _ to that control type .",
    "[ prop : susceptibility ] for each rational number  @xmath2 , @xmath5 , @xmath1 is susceptible to each type of control defined in section  [ ss : problems ] .",
    "we say that an election system ( @xmath1 or @xmath42 , in our case ) is _ resistant _ to a particular attack ( be it a type of control or of bribery ) if the appropriate computational problem is @xmath0-hard and susceptibility holds .- type systems are all susceptible to all the bribery types we look at in this paper , so we wo nt further explicitly discuss or state susceptibility for the bribery cases . ] on the other hand , if the computational problem is in @xmath16 and susceptibility holds , then we say the system is _ vulnerable _ to this attack .",
    "because of how our bribery and control problems are defined , the vulnerability definition merely requires that there exist a polynomial - time algorithm that determines whether a successful bribe or control action _ exists _ on a given input .",
    "however , in every single one of our vulnerability proofs we will provide something far stronger .",
    "we will provide a polynomial - time algorithm that actually _ finds _ a successful bribe or control action on each input for which a successful bribe or control action exists , and on each input where no successful bribe or control action exists will announce that fact .",
    "the notions of resistance and vulnerability ( and of immunity and susceptibility ) for control problems in election systems were introduced by bartholdi , tovey , and trick  @xcite , and we here follow the definition alteration of  @xcite of resistance from `` @xmath0-complete '' to `` @xmath0-hard , '' as that change is compelling ( because under the old definition , @xmath0-completeness , things could actually become nonresistant by being too hard , which is not natural ) . however , for all resistance claims in this paper @xmath0-membership is clear , and so @xmath0-completeness in fact does hold .",
    "in this section we present our results on the complexity of bribery for the @xmath1 election systems , where @xmath2 is a rational number with @xmath5 .",
    "our main result , which will be presented in section  [ sec : bribery : resistance ] , is that each such system is resistant to bribery , regardless of voters rationality and of our mode of operation ( constructive versus destructive ) . in section  [ sec :",
    "microbribery : vulnerability ] , we will provide vulnerability results for llull and @xmath160 with respect to `` microbribery . ''",
    "[ thm : bribery ] for each rational  @xmath2 , @xmath5 , @xmath1 and @xmath42 are resistant to both constructive and destructive bribery , in both the nonunique - winner model and the unique - winner model .",
    "we prove theorem  [ thm : bribery ] via theorems  [ thm : bribery : dest - copelandalpha ] and  [ thm : bribery : cons - copelandalpha ] and corollary  [ cor : bribery : irrational ] below .",
    "our proofs employ an approach that we call the uv technique . for the constructive cases",
    ", this technique proceeds by constructing bribery instances where the only briberies that could possibly ensure that our favorite candidate @xmath70 is a winner involve only voters who rank a group of special candidates ( often the group will contain exactly two candidates , @xmath19 and @xmath20 ) above  @xmath70 .",
    "the remaining voters , the bystanders so to speak , can be used to create appropriate padding and structure within the election .",
    "the destructive cases follow via a cute observation regarding the dynamics of our constructive cases .",
    "the remainder of this section is devoted to proving theorem  [ thm : bribery ] .",
    "we start with the case of rational voters in theorems  [ thm : bribery : dest - copelandalpha ] and  [ thm : bribery : cons - copelandalpha ] below and then argue that the analogous results for the case of irrational voters follow via , essentially , the same proof .",
    "[ thm : bribery : dest - copelandalpha ] for each rational number  @xmath2 , @xmath5 , @xmath1 is resistant to constructive bribery in the unique - winner model and to destructive bribery in the nonunique - winner model .",
    "fix an arbitrary rational number @xmath2 with @xmath161 .",
    "our proof provides reductions from the x3c problem to , respectively , the unique - winner variant of constructive bribery and to the nonunique - winner variant of destructive bribery .",
    "our reductions will differ regarding only the specification of the goal ( i.e. , regarding which candidate we attempt to make a unique winner or which candidate we prevent from being a winner ) and thus we describe them jointly as , essentially , a single reduction .",
    "our reduction will produce an instance of an appropriate bribery problem with an odd number of voters , and so we will never have ties in head - to - head contests .",
    "thus our proof works regardless of which rational number  @xmath2 with @xmath5 is chosen .",
    "let @xmath162 be an instance of x3c , where @xmath163 , @xmath164 is a collection @xmath165 of three - element subsets of @xmath137 with @xmath166 , and @xmath141 . if our input does not meet these conditions then we output a fixed instance of our bribery problem having a negative answer . construct a @xmath1 election @xmath26 as follows .",
    "the candidate set @xmath30 is @xmath167 , where none of  @xmath19 , @xmath20 , and @xmath70 is in  @xmath137 .",
    "the voter set @xmath28 contains @xmath168 voters of the following types .    1 .   for each @xmath150",
    ", we introduce one voter of type  ( i ) and one voter of type  ( ii ) : @xmath169 2 .",
    "we introduce @xmath15 voters for each of the types  ( iii)-1 , ( iii)-2 , ( iv)-1 , and ( iv)-2 : @xmath170 3 .",
    "we introduce a single type ( v ) voter : @xmath171    we have the following relative vote - scores :    1 .",
    "@xmath172 , where the inequality follows from our assumption @xmath166 ( which implies @xmath173 ) , 2 .",
    "@xmath174 , 3 .   for each @xmath175 , @xmath176 , 4 .   for each @xmath175 , @xmath177 , and 5",
    ".   for each @xmath178 with @xmath179 , @xmath180 .    for example , to see that @xmath181 for each @xmath182 , note that each @xmath183 is in at least one @xmath184 because of @xmath166 , so the voters of types ( i ) and ( ii ) give @xmath19 an advantage of at least two votes over  @xmath183 .",
    "furthermore , the voters of types  ( iii)-1 , ( iii)-2 , ( iv)-1 , and ( iv)-2 give @xmath19 an advantage of @xmath185 additional votes over each  @xmath183 , and the single type  ( v ) voter gives each  @xmath183 a one - vote advantage over  @xmath19 . summing up , we obtain @xmath186 .",
    "the other relative vote - scores are similarly easy to verify .",
    "these relative vote - scores yield the following @xmath1 scores or upper bounds on such scores :    1 .",
    "@xmath187 , 2 .",
    "@xmath188 , 3 .   for each @xmath189 , @xmath190 , and 4 .",
    "@xmath191 .    to prove our theorem",
    ", we need the following claim .",
    "[ cla : bribery : copelandalpha ] the following three statements are equivalent :    1 .",
    "[ cla : bribery : copelandalpha-1 ] @xmath192 .",
    "[ cla : bribery : copelandalpha-2 ] candidate @xmath19 can be prevented from winning via bribing at most @xmath15 voters of  @xmath40 .",
    "[ cla : bribery : copelandalpha-3 ] candidate @xmath70 can be made a unique winner via bribing at most @xmath15 voters of  @xmath40 .",
    "* proof of claim  [ cla : bribery : copelandalpha ] . *",
    "( [ cla : bribery : copelandalpha-1 ] ) implies ( [ cla : bribery : copelandalpha-2 ] ) : it is easy to see that if @xmath192 then there is a bribe involving @xmath15 or fewer voters that prevents @xmath19 from being a winner : it is enough to bribe those type  ( i ) voters that correspond to a cover of size @xmath15 to report @xmath70 as their top choice ( while not changing anything else in their preference lists ) : @xmath193 . call the resulting election  @xmath194 . in @xmath194 the following relative vote - scores change : @xmath195 and @xmath196 for each @xmath175 , while all other relative vote - scores remain unchanged .",
    "thus @xmath197 , @xmath198 , @xmath199 , and @xmath200 for each @xmath175 , so @xmath70 defeats all other candidates and is the unique winner .",
    "in particular , this bribe ( of at most @xmath15 voters in @xmath40 ) ensures that @xmath19 is not a winner .",
    "( [ cla : bribery : copelandalpha-2 ] ) implies ( [ cla : bribery : copelandalpha-3 ] ) : suppose that there is a bribe involving @xmath15 or fewer voters that prevents @xmath19 from being a winner .",
    "note that @xmath19 defeats everyone except @xmath70 by more than @xmath185 votes in  @xmath40 .",
    "this means that via bribery of at most @xmath15 voters @xmath19 s score can decrease by at most one .",
    "thus , to prevent @xmath19 from being a winner via such a bribery , we need to ensure that @xmath19 receives a @xmath1 score of @xmath201 and some candidate other than @xmath19 gets a @xmath1 score of @xmath202 , that is , that candidate defeats everyone .",
    "neither @xmath20 nor any of the @xmath183 s can possibly obtain a @xmath1 score of @xmath202 via such a bribery , since bribery of at most @xmath15 voters can affect only head - to - head contests where the relative vote - scores of the participants are at most  @xmath185 .",
    "thus , via such a bribery , @xmath19 can be prevented from winning only if @xmath70 can be made a ( in fact , the unique ) winner of our election .",
    "( [ cla : bribery : copelandalpha-3 ] ) implies ( [ cla : bribery : copelandalpha-1 ] ) : let @xmath110 be a set of at most @xmath15 voters whose bribery ensures that @xmath70 is a unique winner of our election .",
    "thus we know that @xmath203 and that @xmath110 contains only voters who rank both @xmath19 and @xmath20 above @xmath70 ( as otherwise @xmath70 would not defeat both @xmath19 and  @xmath20 ) , which is the case only for voters of types  ( i ) , ( iii)-1 , and  ( iii)-2 .",
    "furthermore , a bribery that makes @xmath70 the unique winner has to ensure that @xmath70 defeats all members of  @xmath137 ; note that the type ( iii)-1 and  ( iii)-2 voters in @xmath40 already rank @xmath70 above all of  @xmath137 .",
    "thus , via a simple counting argument , @xmath110 must contain exactly @xmath15 type",
    "( i ) voters that correspond to a size-@xmath15 cover of  @xmath137 .",
    "since our reduction is computable in polynomial time , claim  [ cla : bribery : copelandalpha ] completes the proof of theorem  [ thm : bribery : dest - copelandalpha ] .",
    "[ thm : bribery : cons - copelandalpha ] for each rational  @xmath2 , @xmath5 , @xmath1 is resistant to constructive bribery in the nonunique - winner model and to destructive bribery in the unique - winner model .",
    "fix an arbitrary rational number @xmath2 with @xmath161 .",
    "as in the proof of theorem  [ thm : bribery : dest - copelandalpha ] , we handle the appropriate constructive and destructive cases jointly using essentially the same reduction for each of them , differing only in the specification of the goal of the briber .",
    "thus we describe our reductions from x3c to the appropriate constructive and destructive bribery problems as a single reduction , separately specifying only the goals for each of the cases .",
    "our reduction works as follows .",
    "we are given an x3c instance @xmath162 , where @xmath204 is a set , @xmath164 is a collection @xmath205 of three - element subsets of @xmath137 with @xmath166 , and @xmath15 is a positive integer .",
    "we form an election @xmath26 , where @xmath206 and where @xmath28 is as specified below . in the nonunique - winner constructive case",
    "we want to ensure that @xmath70 is a winner and in the unique - winner destructive case we want to prevent @xmath207 from being the unique winner . in each case",
    "we want to achieve our goal via bribing at most @xmath15 voters from @xmath28 .",
    "@xmath28 contains @xmath208 voters of the following types :    1 .   for each @xmath150",
    ", we introduce one voter of type  ( i ) and one voter of type  ( ii ) : @xmath209 2 .",
    "we introduce @xmath15 voters for each of the types  ( iii)-1 , ( iii)-2 , ( iv)-1 , and ( iv)-2 : @xmath210 3 .",
    "we introduce @xmath211 normalizing voters : @xmath212 4 .   finally , we introduce a single type ( vi ) voter : @xmath213    in the nonunique - winner constructive case we want to ensure that @xmath70 is a winner and in the unique - winner destructive case we want to prevent @xmath207 from being the unique winner . in each case",
    "we want to achieve our goal via bribing at most @xmath15 voters .",
    "thus within our bribery we can affect the results of head - to - head contests between only those candidates whose relative vote - scores are , in absolute value , at most @xmath185 . in  @xmath40",
    ", we have the following relative vote - scores :    1 .",
    "@xmath214 , @xmath215 , @xmath216 , @xmath217 , @xmath218 , @xmath219 , and @xmath220 , 2 .",
    "@xmath221 , 3 .   for each @xmath175 , @xmath222 , @xmath223 , @xmath224 , @xmath225 , and @xmath226 , and 4 .   for each @xmath178 with @xmath179",
    ", we have @xmath227 .    to analyze  @xmath40 , let @xmath194 denote an arbitrary election resulting from @xmath40 via bribing at most @xmath15 voters .",
    "the relative vote - scores among any two candidates in @xmath40 yield the following @xmath1 scores :    1 .",
    "@xmath228 , and since we have @xmath229 for each candidate @xmath38 with @xmath230 , it follows that @xmath231 .",
    "2 .   for each @xmath232 , @xmath233 , and",
    "since we have @xmath234 , @xmath218 , @xmath220 , and @xmath219 , it follows that @xmath235 .",
    "@xmath191 , and since we have @xmath217 , it follows that @xmath236 .",
    "4 .   for each @xmath175 , @xmath190 , and",
    "since we have @xmath237 for each candidate @xmath238 , it follows that @xmath239 .",
    "thus @xmath207 is the unique winner of  @xmath40 , and the only candidate who is able to prevent @xmath207 from being the unique winner via at most @xmath15 voters being bribed is  @xmath70 .",
    "we claim that @xmath192 if and only if there is a bribe involving at most @xmath15 voters that prevents @xmath207 from being the unique winner .",
    "( equivalently , @xmath192 if and only if there is a bribe of at most @xmath15 voters that ensures that @xmath70 is a winner . )    from left to right , if @xmath164 has an exact cover for  @xmath137 , then , via bribing the @xmath15 type ( i ) voters that correspond to this cover , @xmath207 can be prevented from being the unique winner .",
    "in more detail , if the @xmath15 bribed voters rank @xmath70 on top while leaving their preferences otherwise unchanged ( i.e. , their votes are now @xmath240 ) , then the only relative vote - scores that have changed in this new election , call it  @xmath194 , are : @xmath241 , @xmath242 , and @xmath243 for each @xmath182 .",
    "it follows that @xmath70 and @xmath207 tie for winner in @xmath194 with @xmath244 .    from right to left , suppose there is a bribe of at most @xmath15 voters that prevents @xmath207 from being the unique winner . by construction , for each election @xmath194 that results from @xmath40 via bribing at most @xmath15 voters ,",
    "this is possible only if @xmath244 .",
    "let @xmath110 be a set of at most @xmath15 voters whose bribery ensures that @xmath207 is not the unique winner in the resulting election . since @xmath217 , it is not possible for @xmath70 to win the head - to - head contest with @xmath245 via such a bribery .",
    "thus , for @xmath70 to obtain a score of @xmath246 , @xmath70 must win the head - to - head contests with each candidate in @xmath247 .",
    "however , since @xmath248 , we have @xmath203 and every voter in @xmath110 must rank each of @xmath207 , @xmath19 , and @xmath20 ahead of  @xmath70 .",
    "thus @xmath110 can contain only voters of types  ( i ) , ( iii)-1 , ( iii)-2 , ( v)-2 , ( v)-3 , and ( v)-4 .",
    "however , since @xmath70 also needs to defeat each member of @xmath137 and since all voters of types ( iii)-1 , ( iii)-2 , ( v)-2 , ( v)-3 , and ( v)-4 rank @xmath70 ahead of each member of  @xmath137 , @xmath110 must contain exactly @xmath15 type",
    "( i ) voters that correspond to an exact cover for  @xmath137 .",
    "since our reduction is computable in polynomial time , this completes the proof of theorem  [ thm : bribery : cons - copelandalpha ] .",
    "the proofs of the above theorems have an interesting feature .",
    "when we discuss bribery , we never rely on the fact that the voters are rational .",
    "thus we can allow the voters to be irrational and form @xmath249 and @xmath250 instances simply by deriving the voters preference tables from the voters preference lists given in the above proofs .",
    "it is easy to see that the proofs remain valid after this change ; in the proofs we assume that each bribed voter , after the bribery , prefers @xmath70 to all other candidates , but we do not make any further assumptions ( and , in particular , we do not use linearity of the preferences ) .",
    "thus we have the following corollary to the proofs of theorems  [ thm : bribery : dest - copelandalpha ] and  [ thm : bribery : cons - copelandalpha ] .",
    "[ cor : bribery : irrational ] for each rational number  @xmath2 , @xmath5 , @xmath42 is resistant to both constructive bribery and destructive bribery , in both the nonunique - winner model and the unique - winner model .",
    "theorems  [ thm : bribery : dest - copelandalpha ] and  [ thm : bribery : cons - copelandalpha ] and corollary  [ cor : bribery : irrational ] together constitute a proof of theorem  [ thm : bribery ] and establish that for each rational @xmath2 , @xmath5 , @xmath1 and @xmath42 possess broad  essentially perfect  resistance to bribery regardless of whether we are interested in constructive or destructive results .",
    "however , the next section shows that this perfect picture is , in fact , only near - perfect when we consider microbribes , which do nt allow changing the complete preferences of voters at once but rather change the results of head - to - head contests between candidates in the voters preferences .",
    "we will show that there is an efficient way of finding optimal microbriberies for the case of irrational voters in @xmath1 elections .      in this section",
    "we explore the problems related to microbribery of irrational voters . in standard bribery problems , which were considered in section  [ sec :",
    "bribery : resistance ] , we ask whether it is possible to ensure that a designated candidate @xmath70 is a winner ( or , in the destructive case , to ensure that @xmath70 is not a winner ) via modifying the preference tables of at most @xmath15 voters . that is , we can at unit cost completely redefine the preference table of each voter bribed .",
    "so in this model , we pay for a service ( namely , the modification of the reported preference table ) and we pay for it in bulk ( when we buy a voter , we have secured his or her total obedience ) . however , sometimes it may be far more reasonable to adopt a more local approach in which we have to pay separately for each preference - table entry flip  to pay more the more we alter a vote .    throughout the remainder of this section",
    "we will use the term _ microbribe _ to refer to flipping an entry in a preference table , and we will use the term _ microbribery _ to refer to bribing possibly irrational voters via microbribes . recall that by `` irrational voters '' we simply mean that they are allowed to have , but not that they must have , irrational preferences .    for each rational  @xmath2 , @xmath5 , we define the following two problems .",
    "name : : :    @xmath251    and    @xmath252 . given : : :    a set @xmath30 of candidates , a collection @xmath28 of    voters specified via their preference tables over @xmath30 , a    distinguished candidate @xmath69 , and a nonnegative    integer @xmath15 .",
    "question ( constructive ) : : :    is it possible , by flipping at most @xmath15 entries in the    preference tables of voters in @xmath28 , to ensure that    @xmath70 is a winner of the resulting election ?",
    "question ( destructive ) : : :    is it possible , by flipping at most @xmath15 entries in the    preference tables of voters in @xmath28 , to guarantee that    @xmath70 is not a winner of the resulting election ?",
    "we can flip multiple entries in the preference table of the same voter , but we have to pay separately for each flip .",
    "the microbribery problems for @xmath42 are very similar in flavor to the so - called bribery@xmath253 problems for approval voting that were studied by faliszewski , hemaspaandra , and hemaspaandra  @xcite , where unit cost for flipping approvals or disapprovals of voters are paid .",
    "however , the proofs for @xmath42 seem to be much more involved than their counterparts for approval voting .",
    "the reason is that @xmath42 elections allow for very subtle and complicated interactions between the candidates scores .    before we proceed with our results ,",
    "let us define some notation that will be useful throughout this section .",
    "let @xmath40 be an election with candidate set @xmath254 and voter collection @xmath255 .",
    "we define two functions , @xmath256 and @xmath257 , that describe the costs of ensuring a victory or a tie of a given candidate in a particular head - to - head contest .",
    "let @xmath26 be an election and let @xmath34 and @xmath35 be two distinct candidates in  @xmath30 .    1 .   by @xmath258 we mean the minimum number of microbribes that ensure that @xmath34 defeats @xmath35 in their head - to - head contest .",
    "if @xmath34 already wins this contest then @xmath259 .",
    "by @xmath260 we mean the minimum number of microbribes that ensure that @xmath34 ties with @xmath35 in their head - to - head contest , or @xmath261 if @xmath40 has an odd number of voters and thus ties are impossible .",
    "our first result regarding microbribery is that destructive microbribery is easy for @xmath42 . since this is the paper s first vulnerability proof , we take this opportunity to remind the reader ( recall section  [ sec : resistance - vulnerability ] ) that although the definition of vulnerability requires only that there be a polynomial - time algorithm to determine whether a successful action ( in the present case , a destructive microbribery ) _ exists _ , we will in each vulnerability proof provide something far stronger , namely a polynomial - time algorithm that both determines whether a successful action exists and that , when so , finds a successful action ( e.g. , for our flow algorithms later on , the successful action will be implicit in the flow computed ) .    [",
    "thm : bribery - prime - destructive ] for each rational  @xmath2 , @xmath5 , @xmath42 is vulnerable to destructive microbribery in both the nonunique - winner model and the unique - winner model .",
    "fix an arbitrary rational number @xmath2 with @xmath5 .",
    "we give an algorithm for @xmath42 , for destructive microbribery in the nonunique - winner model .",
    "( we omit the analogous algorithm for the unique - winner case . )",
    "let @xmath26 be the input election where @xmath262 and @xmath255 , and let @xmath15 be the number of microbribes that we are allowed to make .",
    "we define the predicate @xmath263 to be true if and only if there is a microbribery of cost at most @xmath15 that ensures that @xmath34 s score is higher than that of @xmath70 .",
    "our algorithm computes @xmath263 for each @xmath264 and accepts if and only if it is true for at least one of them .",
    "we now describe how to compute @xmath263 .",
    "we set @xmath265 , @xmath266 , and @xmath267 to be elections identical to @xmath40 except that    1 .   in @xmath265 ,",
    "@xmath70 defeats @xmath34 in their head - to - head contest , 2 .   in @xmath266",
    ", @xmath70 loses to @xmath34 in their head - to - head contest , and 3 .   in @xmath267 , @xmath70 ties @xmath34 in their head - to - head contest ( we disregard @xmath267 if the number of voters is odd and thus ties are impossible ) .",
    "let @xmath268 , @xmath269 , and @xmath270 be the minimum costs of microbriberies that transform @xmath40 to @xmath265 , @xmath40 to @xmath266 , and @xmath40 to @xmath267 , respectively .",
    "such microbriberies involve only the head - to - head contest between @xmath70 and @xmath34 .",
    "we define the predicate @xmath271 , where @xmath272 and where @xmath273 is an integer , to be true if and only if there is a microbribery of cost at most @xmath273 that does not involve the head - to - head contest between @xmath70 and @xmath34 but that ensures that @xmath34 s @xmath42 score is higher than @xmath70 s .",
    "it is easy to see that @xmath274 thus it is enough to focus on the problem of computing @xmath271 .",
    "let @xmath275 be one of @xmath276 , @xmath277 , and @xmath278 .",
    "define @xmath279 , where @xmath50 is a candidate and @xmath280 , @xmath281 , and @xmath245 are nonnegative integers , to be the minimum cost of a microbribery that , when applied to @xmath194 , increases @xmath34 s @xmath42 score by @xmath282 via ensuring that    1 .",
    "@xmath34 wins an additional @xmath280 head - to - head contests against candidates in @xmath283 that used to defeat @xmath34 originally , 2 .",
    "@xmath34 wins an additional @xmath281 head - to - head contests against candidates in @xmath283 with whom @xmath34 used to tie originally , and 3 .",
    "@xmath34 ties an additional @xmath245 head - to - head contests with candidates in @xmath284 that used to defeat @xmath34 originally .",
    "if such a microbribery does not exist then we set @xmath279 to be @xmath261 .",
    "it is an easy exercise to see that @xmath285 is computable in polynomial time by a simple greedy algorithm .",
    "we define @xmath286 to be the minimum cost of a microbribery that , when applied to election @xmath194 , decreases @xmath70 s score by @xmath287 via ensuring that    1 .",
    "@xmath70 loses an additional @xmath288 head - to - head contests to candidates in @xmath289 whom @xmath70 used to defeat originally , 2 .",
    "@xmath70 loses an additional @xmath290 head - to - head contests to candidates in @xmath289 with whom @xmath70 used to tie originally , and 3 .",
    "@xmath70 ties an additional @xmath245 head - to - head contests with candidates in @xmath289 whom @xmath70 used to defeat originally .",
    "if such a microbribery does not exist then we set @xmath286 to be @xmath261 .",
    "note that @xmath291 can be computed in polynomial time using an algorithm similar to that for @xmath285 .",
    "naturally , the microbriberies used implicitly within @xmath292 , within @xmath293 , and within transforming @xmath40 to @xmath194 are `` disjoint , '' i.e. , they never involve the same pair of candidates .",
    "thus @xmath271 is true if and only if there exist integers @xmath294 such that @xmath295 and @xmath296 there are only polynomially many combinations of such @xmath297 , and @xmath298 , and we can try them all .",
    "thus we have given a polynomial - time algorithm for @xmath271 . via the observations given at the beginning of our proof",
    "this implies that @xmath263 is computable in polynomial time and the proof is complete .",
    "the above destructive - case algorithm and approach is fairly straightforward ; in the destructive case we do not need to worry about any side effects of promoting @xmath11 and demoting  @xmath70 .",
    "the constructive case is more complicated , but we still are able to obtain polynomial - time algorithms via a fairly involved use of flow networks to model how particular points shift between candidates . in the remainder of this section",
    "we restrict ourselves to the values @xmath21 or settings where the number of voters is odd and so ties never happen .",
    "we remind the reader that @xmath10 and @xmath299 , respectively , refer to llull voting .",
    "a flow network is a network of nodes with directed edges through which we want to transport some amount of flow from the source to the sink ( these are two designated nodes ) .",
    "each edge @xmath13 can carry up to @xmath300 units of flow , and transporting each unit of flow through @xmath13 costs @xmath301 .",
    "in the min - cost - flow problem we have a target flow value  @xmath302 , and the goal is to find a way of transporting @xmath302 units of flow from the source to the sink , while minimizing the cost .",
    "( if there is no way of achieving target flow @xmath302 , the cost in effect is infinite . )",
    "we now define the notions related to flow networks more formally .",
    "let @xmath303 and @xmath304 .",
    "[ def : flows ]    1 .",
    "a _ flow network _ is a quintuple @xmath305 , where @xmath76 is a set of nodes that includes the _ source _ @xmath207 and the _ sink _ @xmath245 , @xmath306 is the _ capacity function _ , and @xmath307 is the _ cost function_. we assume that @xmath308 for each node @xmath309 , and that at most one of @xmath310 and @xmath311 is nonzero for each pair of distinct nodes @xmath312 .",
    "we also assume that if @xmath313 then @xmath314 as well .",
    "2 .   given a flow network @xmath305 , a _ flow _ is a function @xmath315 that satisfies the following conditions : 1 .   for each @xmath316",
    ", we have @xmath317 , i.e. , capacities limit the flow .",
    "2 .   for each @xmath316",
    ", we have @xmath318 .",
    "3 .   for each @xmath319",
    ", we have @xmath320 , i.e. , the flow is conserved in all nodes except the source and the sink .",
    "the _ value of flow @xmath138 _ is : @xmath321 the particular flow network we have in mind will always be clear from the context and so we will not indicate it explicitly ( we will not write it explicitly as a subscript to the function  @xmath322 ) .",
    "the _ cost of flow @xmath138 _ is defined as : @xmath323 that is , we pay the price @xmath324 for each unit of flow that passes from node @xmath19 to node  @xmath20 .",
    "given a flow network @xmath305 we will often use the term _ edges _ to refer to pairs of distinct nodes @xmath325 for which @xmath326 .",
    "below we define the min - cost - flow problem , which is well known from the literature .",
    "the definition we employ here is not the most general one but will suffice for our needs .",
    "( readers seeking a broader discussion of the problem may wish to see , for example , the monograph by ahuja , magnanti , and orlin  @xcite . )",
    "we define the _ min - cost - flow problem _ as follows : given a flow network @xmath305 and a target flow value  @xmath302 , find a flow @xmath138 that has value @xmath302 ( if one exists ) and has minimum cost among all such flows , or otherwise indicate that no such flow @xmath138 exists .",
    "the min - cost - flow problem has a polynomial - time algorithm .",
    "there is a large body of work devoted to flow problems and we will not even attempt to provide a complete list of references here . instead , we again point the reader to the excellent monograph by ahuja , magnanti , and orlin  @xcite , which provides descriptions of polynomial - time algorithms , theoretical analysis , and numerous references to previous work on flow - related problems .",
    "we also mention that the issue of flows is so prevalent in the study of algorithms that the textbook of cormen et al .",
    "@xcite contains an exposition of the min - cost - flow problem .    coming back to the study of constructive microbribery for llull and copeland@xmath8 , with irrational voters allowed , we now present the following result .",
    "[ thm : bribery - prime ] for @xmath21 , @xmath42 is vulnerable to constructive microbribery , in both the nonunique - winner model and the unique - winner model .",
    "we prove theorem  [ thm : bribery - prime ] via lemmas  [ lem : bribery - prime - odd ] through  [ lem : bribery - prime - llull - even ] below , which cover three cases : ( a )  an odd number of voters , where all @xmath42 elections with @xmath5 are identical due to the lack of ties , ( b )  @xmath299 with an even number of voters , and ( c )  @xmath327 with an even number of voters .",
    "these lemmas only discuss the nonunique - winner model but in each case it is easy to see how to change the algorithms and proofs to make them work for the unique - winner model .    [",
    "lem : bribery - prime - odd ] for each rational @xmath2 with @xmath5 , there is a polynomial - time algorithm that solves the constructive microbribery problem for @xmath42 elections with an odd number of voters ( in the nonunique - winner model ) .",
    "our input is a nonnegative integer @xmath15 ( the budget ) and an election @xmath26 , where the candidate set @xmath30 is @xmath328 , the number of voters is odd , and @xmath329 is the candidate whose victory we want to ensure via at most @xmath15 microbribes . note that we interchangeably use @xmath70 and @xmath330 to refer to the same candidate , since it is sometimes convenient to be able to speak of @xmath70 and all other candidates uniformly . as the number of voters is odd , ties never occur .",
    "thus any candidate @xmath34 has the same @xmath42 score for each rational value of  @xmath2 , @xmath5 . fix an arbitrary such  @xmath2 .",
    "we give a polynomial - time algorithm for the constructive microbribery problem .",
    "a high - level overview is that we try to find a threshold value @xmath331 such that there is a microbribery of cost at most @xmath15 that transforms @xmath40 into @xmath194 such that ( a ) @xmath70 has @xmath332 exactly @xmath331 , and ( b ) every other candidate has @xmath332 at most  @xmath331 .",
    "let @xmath137 be a number that is greater than the cost of any possible microbribery within @xmath40 ( e.g. , @xmath333 ) .",
    "for each possible threshold @xmath331 , we consider a min - cost - flow instance @xmath334 with node set @xmath335 , where @xmath207 is the source and @xmath245 is the sink , the edge capacities and costs are specified in figure  [ fig : min - cost - odd ] , and the target flow value is @xmath336        [ cols= \" < \" , ]     [ thm : av ] let @xmath2 be a rational number such that @xmath161 .",
    "@xmath1 is resistant to both constructive and destructive control via adding voters ( ccav and dcav ) , in both the nonunique - winner model and the unique - winner model , for both the rational and the irrational voter model .",
    "our result follows via reductions from the x3c problem .",
    "we will first show how to handle the nonunique - winner constructive case and later we will argue that the construction can be easily modified for each of the remaining cases .",
    "let @xmath337 be an x3c instance where @xmath338 and @xmath339 is a finite collection of three - element subsets of @xmath137 .",
    "without loss of generality , we assume that @xmath15 is odd ( if it is even , we simply add @xmath340 to @xmath137 and @xmath341 to @xmath342 , and add @xmath4 to @xmath15 ) . the question is whether one can pick @xmath15 sets @xmath343 such that @xmath344 .",
    "we build a @xmath1 election @xmath26 as follows .",
    "the candidate set @xmath30 contains candidates @xmath70 ( the preferred candidate ) , @xmath345 ( @xmath70 s rival ) , @xmath207 , all members of @xmath137 , and some number of padding candidates .",
    "we select the voter collection @xmath28 such that in their head - to - head contests , @xmath207 defeats @xmath70 , @xmath345 defeats each @xmath183 , and such that we have the following @xmath1 scores for these candidates , where @xmath346 is some sufficiently large ( but polynomially bounded in @xmath347 ) nonnegative integer :    1 .",
    "@xmath348 , 2 .",
    "@xmath349 , and 3 .",
    "all other candidates have @xmath1 scores below @xmath350 .",
    "it is easy to see that @xmath40 can be constructed in polynomial time by lemma  [ thm : construction - lemma ] .",
    "in addition , we ensure that we have the following results of head - to - head contests between the candidates in @xmath30 :    1 .",
    "@xmath351 , 2 .   for each @xmath352 , @xmath353 , and 3 .   for all other pairs of candidates",
    "@xmath11 , @xmath12 , we have @xmath354 .",
    "this can be done since we can add @xmath355 to @xmath356 and leave all other relative vote scores the same by adding two voters , @xmath357 and @xmath358 ( see lemma  [ thm : election - graph ] ) .",
    "since @xmath15 is odd and the number of voters is even ( see lemma  [ thm : construction - lemma ] ) , it is easy to see that we can fulfill these requirements .",
    "we also specify the set @xmath110 of voters that the chair can potentially add . for each set",
    "@xmath359 we have a single voter @xmath360 with preference list @xmath361 ( all unmentioned candidates follow in any fixed arbitrary order ) .",
    "we claim that @xmath342 contains a @xmath15-element cover of @xmath137 if and only if @xmath70 can become a winner of the above election via adding at most @xmath15 voters selected from @xmath110 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath362 , then we can make @xmath70 a winner via adding the voters from @xmath363 . adding these @xmath15 voters increases @xmath70 s score by one , since @xmath70 now defeats @xmath207 in their head - to - head contest . since voters in @xmath364 correspond to a cover ,",
    "the score of @xmath345 goes down by @xmath365 points .",
    "for each @xmath366 , adding the @xmath367 voters in @xmath364 that correspond to the sets in the cover not containing @xmath183 increases the relative performance of @xmath183 versus @xmath345 by @xmath367 votes , thus giving @xmath183 two votes of advantage over @xmath345 .",
    "adding the remaining voter from @xmath364 decreases this advantage to @xmath4 , but still @xmath183 wins the head - to - head contest with @xmath345 .",
    "we now show that if we can make @xmath70 a winner by adding at most @xmath15 voters then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "note that @xmath70 is the only candidate that can possibly become a winner by adding at most @xmath15 voters , that @xmath70 can at best obtain @xmath1 score @xmath346 , that @xmath70 will obtain this score only if we add exactly @xmath15 voters , and that @xmath345 can lose at most @xmath365 points via losing his or her head - to - head contests with each of the @xmath183 s .",
    "thus the only way for @xmath70 to become a winner by adding at most @xmath15 voters from @xmath110 is that we add exactly @xmath15 voters such that @xmath345 loses his or her head - to - head contest with each  @xmath183 .",
    "assume that @xmath368 is such a set of voters that does not correspond to a cover of @xmath137 .",
    "this means that there is some candidate @xmath183 such that at least two voters in @xmath364 prefer @xmath345 to @xmath183 .",
    "however , if this is the case then @xmath183 can not defeat @xmath345 in their head - to - head contest and @xmath70 is not a winner .",
    "@xmath364 corresponds to a cover .",
    "this completes the proof of the nonunique - winner constructive case of the theorem .    for the constructive unique - winner case , we modify election @xmath40 so that @xmath369 .",
    "all other listed properties of the relative vote scores and absolute @xmath1 scores are unchanged . as in the previous case",
    ", it is easy to see that @xmath70 can become the unique winner via adding @xmath15 voters that correspond to a cover of @xmath137 . for the converse",
    ", we will show that we still need to add exactly @xmath15 voters if @xmath70 is to become the unique winner .",
    "if we added fewer than @xmath367 voters then @xmath70 would not get any extra points and so it would be impossible for @xmath70 to become the unique winner .",
    "let us now show that adding exactly @xmath367 voters can not make @xmath70 the unique winner .",
    "if we added exactly @xmath367 voters then @xmath70 would get @xmath2 points extra from the tie with @xmath207 .",
    "now consider some candidate @xmath370 , where @xmath184 corresponds to one of the added voters , @xmath371 .",
    "since @xmath371 prefers @xmath345 to @xmath183 , adding @xmath371 to the election increases the relative performance of @xmath345 versus @xmath183 to @xmath372 . thus adding the remaining @xmath372 voters can result in @xmath183 either tieing or losing his or her head - to - head contest with  @xmath345 . in either case",
    "@xmath70 would not have a high enough score to become the unique winner .",
    "thus we know that exactly @xmath15 candidates must be added if we want @xmath70 to become the unique winner and , via the same argument as in the previous case , we know that they have to correspond to a cover .    for the destructive cases it suffices to note that the proof for the constructive nonunique - winner case works also as a proof for the destructive unique - winner case ( where we are preventing @xmath345 from being the unique winner ) and the constructive unique - winner case works also as a proof for the destructive nonunique - winner case ( where we are preventing @xmath345 from being a winner ) .",
    "let us now turn to the case of control via deleting voters .",
    "unfortunately , the proofs here are not as uniform as before and we need in some cases to handle @xmath22 separately from the case where @xmath373 . also , we can not use the construction lemma ( lemma  [ thm : construction - lemma ] ) anymore to so conveniently build our elections . in the case of deleting voters ( or partitioning voters )",
    "we need to have a very clear understanding of how each voter affects the election and the whole point of introducing the construction lemma was to abstract away from such low - level details .",
    "analogously to the case of candidate control , we will later reuse the resistance proofs for deleting voters within the resistance proofs for partitioning voters .",
    "[ thm : llull - cdv ] @xmath10 is resistant to constructive control via deleting voters ( ccdv ) in the nonunique - winner model and to destructive control via deleting voters ( dcdv ) in the unique - winner model , for both the rational and the irrational voter model .",
    "let @xmath337 be an instance of x3c , where @xmath374 and @xmath339 is a finite family of three - element subsets of @xmath137 .",
    "without loss of generality , we assume that @xmath375 and that @xmath376 ( if @xmath377 then @xmath342 does not contain a cover of @xmath137 , and if @xmath378 then we can solve the problem by brute force ) .",
    "we build an election @xmath26 such that the preferred candidate @xmath70 can become a @xmath10 winner of @xmath40 by deleting at most @xmath15 voters if and only if @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "we let the candidate set @xmath30 be @xmath379 and we let @xmath28 be the following collection of @xmath380 voters :    1 .",
    "we have @xmath381 voters with preference @xmath382 , 2 .",
    "we have @xmath383 voters with preference @xmath384 , and 3 .   for each @xmath359 , we have two voters , @xmath31 and @xmath385 , such that 1 .   @xmath31 has preference @xmath386 , and 2 .",
    "@xmath385 has preference @xmath387 .",
    "it is easy to see that for all @xmath366 , @xmath388 , @xmath389 , and @xmath390 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath391 , then we delete voters @xmath392 . in the resulting election ,",
    "@xmath70 ties every other candidate in their head - to - head contests , and thus @xmath70 is a winner .    for the converse , suppose that there is a subset @xmath110 of at most @xmath15 voters such that @xmath70 is a winner of @xmath393 .",
    "it is easy to see that @xmath394 . since @xmath70 is a winner of @xmath395 , @xmath70 must tie - or - defeat every other candidate in their head - to - head contests . by deleting at most @xmath15 voters , @xmath70 can at best tie @xmath345 in their head - to - head contest . and @xmath70 will tie @xmath345 only if @xmath203 and every voter in @xmath110 prefers @xmath345 to @xmath70 .",
    "it follows that @xmath110 is a size @xmath15 subset of @xmath396 .",
    "let @xmath366 . recall that @xmath389 and that @xmath70 needs to at least tie @xmath183 in their head - to - head contest in @xmath395 . since @xmath203",
    ", it follows that @xmath110 can contain at most one voter that prefers @xmath70 to @xmath183 . since @xmath376",
    ", it follows that @xmath110 contains only voters from the set @xmath397 and that the voters in @xmath110 correspond to a @xmath15-element cover of @xmath137 .",
    "this completes the proof for the nonunique - winner constructive case .",
    "this proof also handles the unique - winner destructive case , since @xmath345 is always a winner after deleting at most @xmath15 voters from @xmath40 and @xmath183 is never a winner after deleting at most @xmath15 voters from @xmath40 . and so @xmath345 can be made to not uniquely win by deleting at most @xmath15 voters if and only if @xmath70 can be made a winner by deleting at most @xmath15 voters .",
    "[ thm : ucdv ] let @xmath2 be a rational number such that @xmath161 .",
    "@xmath1 is resistant to constructive control via deleting voters ( ccdv ) in the unique - winner model and to destructive control via deleting voters ( dcdv ) in the nonunique - winner model , for both the rational and the irrational voter model .    as in the proof of the previous theorem ,",
    "let @xmath337 be an instance of x3c , where @xmath374 and @xmath339 is a finite family of three - element subsets of @xmath137 .",
    "without loss of generality , we assume that @xmath375 and that @xmath376 ( if @xmath377 then @xmath342 does not contain a cover of @xmath137 , and if @xmath378 then we can solve the problem by brute force ) .",
    "we build an election @xmath26 such that :    1 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , then the preferred candidate @xmath70 can become the unique @xmath1 winner of @xmath40 by deleting at most @xmath15 voters , and 2 .",
    "if @xmath345 can become a nonwinner by deleting at most @xmath15 voters , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "we use the election from the proof of theorem  [ thm : llull - cdv ] with one extra voter with preference @xmath398 .",
    "that is , we let the candidate set @xmath30 be @xmath379 and we let @xmath28 be the following collection of @xmath399 voters :    1 .",
    "we have @xmath381 voters with preference @xmath382 , 2 .",
    "we have @xmath400 voters with preference @xmath384 , and 3 .   for each @xmath359",
    "we have two voters , @xmath31 and @xmath385 , such that 1 .   @xmath31 has preference @xmath386 , and 2 .",
    "@xmath385 has preference @xmath387 .",
    "it is easy to see that for all @xmath366 , @xmath401 , @xmath402 , and @xmath403 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath391 , then we delete voters @xmath392 . in the resulting election , @xmath70 defeats every other candidate in their head - to - head contests , and thus @xmath70 is the unique winner .    to prove the second statement ,",
    "suppose that there is a subset @xmath110 of at most @xmath15 voters such that @xmath345 is not a winner of @xmath393 .",
    "since @xmath401 and @xmath375 , it is immediate that @xmath345 defeats every @xmath366 in their head - to - head contests in @xmath395 . in order for @xmath345 not to be a winner of @xmath395 , @xmath70 must certainly defeat @xmath345 and tie - or - defeat every @xmath366 in their head - to - head contests .",
    "but @xmath70 can defeat @xmath345 in their head - to - head contest only if @xmath203 and every voter in @xmath110 prefers @xmath345 to @xmath70 .",
    "it follows that @xmath110 is a size-@xmath15 subset of @xmath396 .",
    "let @xmath366 . recall that @xmath402 and that @xmath70 needs to at least tie @xmath183 in their head - to - head contest in @xmath395 . since @xmath203",
    ", it follows that @xmath110 can contain at most one voter that prefers @xmath70 to @xmath183 . since @xmath376",
    ", it follows that @xmath110 contains only voters from the set @xmath397 and that the voters in @xmath110 correspond to a @xmath15-element cover of @xmath137 .",
    "[ thm : copeland - cdv ] let @xmath2 be a rational number such that @xmath23 .",
    "@xmath1 is resistant to constructive control via deleting voters ( ccdv ) in the nonunique - winner model and to destructive control via deleting voters ( dcdv ) in the unique - winner model , for both the rational and the irrational voter model .",
    "let @xmath337 be an instance of x3c , where @xmath374 and @xmath339 is a finite family of three - element subsets of @xmath137 .",
    "without loss of generality , we assume that @xmath375 and that @xmath376 ( if @xmath377 then @xmath342 does not contain a cover of @xmath137 , and if @xmath378 then we can solve the problem by brute force ) .",
    "we build an election @xmath26 such that :    1 .   if @xmath342 contains a @xmath15-element cover of @xmath137 , then the preferred candidate @xmath70 can become a @xmath1 winner of @xmath40 by deleting at most @xmath15 voters , and 2 .",
    "if @xmath345 can be made to not uniquely win the election by deleting at most @xmath15 voters , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "our election is similar to the elections from the proofs of theorems  [ thm : llull - cdv ] and  [ thm : ucdv ] . to avoid problems when",
    "@xmath24 , we introduce a new candidate @xmath404 to ensure that @xmath70 and @xmath345 are the only possible winners after deleting at most @xmath15 candidates .",
    "we let the candidate set @xmath30 be @xmath405 and we let @xmath28 be the following collection of @xmath406 voters :    1 .",
    "we have @xmath407 voters with preference @xmath408 , 2 .",
    "we have @xmath400 voters with preference @xmath409 , 3 .   for each @xmath359 , we have two voters , @xmath31 and @xmath385 , such that 1 .   @xmath31 has preference @xmath410 , and 2 .",
    "@xmath385 has preference @xmath411 , 4 .",
    "we have one voter with preference @xmath412 , and 5 .",
    "we have one voter with preference @xmath413 .",
    "it is easy to see that for all @xmath366 , @xmath414 , @xmath415 , @xmath416 , @xmath390 , and @xmath417 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath391 , then we delete voters @xmath392 . in the resulting election ,",
    "@xmath70 ties @xmath345 in their head - to - head contest and @xmath70 defeats every other candidate in their head - to - head contests .",
    "it follows that @xmath70 is a winner .    to prove the second statement ,",
    "suppose that there is a subset @xmath110 of at most @xmath15 voters such that @xmath345 is not a unique winner of @xmath393 .",
    "it is easy to see that @xmath345 defeats every candidate in @xmath418 in their head - to - head contests in @xmath395 .",
    "so it certainly can not be the case that @xmath345 defeats @xmath70 in their head - to - head contest in @xmath395 .",
    "it follows that @xmath203 and that every voter in @xmath110 prefers @xmath345 to @xmath70 .",
    "note that both @xmath345 and @xmath70 defeat @xmath404 in their head - to - head contest in @xmath395 and that both @xmath345 and @xmath404 defeat every @xmath366 in their head - to - head contests in @xmath395 .",
    "it follows that the only possible winners in @xmath395 are @xmath345 and @xmath70 .",
    "( note that without @xmath404 , it would be possible that after deleting @xmath15 voters , some @xmath183 defeats all candidates other than @xmath345 in their head - to - head contests . if @xmath24 , this could prevent @xmath345 from being the unique winner without necessarily making @xmath70 a winner . )",
    "let @xmath366 . recall that @xmath416 and that @xmath70 needs to defeat @xmath183 in their head - to - head contest in @xmath395 . since @xmath203",
    ", it follows that @xmath110 can contain at most one voter that prefers @xmath70 to @xmath183 .",
    "since @xmath376 and every voter in @xmath110 prefers @xmath345 to @xmath70 , it follows that @xmath110 contains only voters from the set @xmath397 and that the voters in @xmath110 correspond to a @xmath15-element cover of @xmath137 .",
    "[ thm : cpv - tp ] let @xmath2 be a rational number such that @xmath5 .",
    "@xmath1 is resistant to both constructive and destructive control via partitioning voters in the tp model ( ccpv - tp and dcpv - tp ) , in both the nonunique - winner model and the unique - winner model , for both the rational and the irrational voter model .",
    "let @xmath337 be an instance of x3c , where @xmath374 and @xmath339 is a finite family of three - element subsets of @xmath137 .",
    "without loss of generality , we assume that @xmath375 and that @xmath376 ( if @xmath377 then @xmath419 does not contain a cover of @xmath137 , and if @xmath378 then we can solve the problem by brute force ) .",
    "we build an election @xmath26 such that :    1 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , then the preferred candidate @xmath70 can become the unique @xmath1 winner of @xmath40 via partitioning voters in the tp model , and 2 .",
    "if @xmath345 can be made to not uniquely win @xmath40 via partitioning voters in the tp model , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "note that this implies that @xmath1 is resistant to both constructive and destructive control via partitioning voters in the tp model , in both the nonunique - winner model and the unique - winner model .",
    "our construction is an extension of the construction from theorem  [ thm : ucdv ] .",
    "we let the candidate set @xmath30 be @xmath420 and we let @xmath28 be the following collection of voters :    1 .",
    "we have @xmath421 voters with preference @xmath422 , 2 .",
    "we have @xmath381 voters with preference @xmath423 , 3 .",
    "we have @xmath400 voters with preference @xmath424 , and 4 .   for each @xmath359",
    "we have two voters , @xmath31 and @xmath385 , such that 1 .",
    "@xmath31 has preference @xmath425 , and 2 .",
    "@xmath385 has preference @xmath426 .",
    "let @xmath427 be the collection of all the voters in @xmath28 except for the @xmath428 voters with preference @xmath422 .",
    "note that @xmath429 is exactly the voter collection used in the proof of theorem  [ thm : ucdv ] with candidate @xmath207 added as the least desirable candidate . since @xmath207 does not influence the differences between the scores of the other candidates , the following claim follows immediately from the proof of theorem  [ thm : ucdv ] .",
    "[ cl : llull - dv ] if @xmath345 can become a nonwinner of @xmath430 by deleting at most @xmath15 voters , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "recall that we need to prove that if @xmath342 contains a @xmath15-element cover of @xmath137 , then @xmath70 can be made the unique @xmath1 winner of @xmath40 via partitioning voters in the tp model , and that if @xmath345 can be made to not uniquely win @xmath40 via partitioning voters in the tp model , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath391 , then we let the second subelection consist of the @xmath428 voters with preference @xmath422 and voters @xmath392 .",
    "then @xmath70 is the unique winner of the first subelection , @xmath207 is the unique winner of the second subelection , and @xmath70 uniquely wins the final run - off between @xmath70 and @xmath207 .    to prove the second statement , suppose there is a partition of voters such that @xmath345 is not a unique winner of the resulting election in model tp .",
    "note that in at least one of the subelections , without loss of generality say the second subelection , a majority of the voters prefers @xmath345 to all candidates in @xmath431 . since @xmath345 is the unique winner of every run - off he or she participates in",
    ", @xmath345 can not be a winner of either subelection .",
    "since @xmath345 defeats every candidate in @xmath431 in their head - to - head contests in the second subelection , in order for @xmath345 not to be a winner of the second subelection , it must certainly be the case that @xmath207 defeats @xmath345 in their head - to - head contest in the second subelection .",
    "this implies that at most @xmath15 voters from @xmath429 can be part of the second subelection .",
    "now consider the first subelection .",
    "note that @xmath345 can not be a winner of the first subelection .",
    "then , clearly , @xmath345 can not be a winner of the first subelection restricted to voters in @xmath429 . by claim  [ cl : llull - dv ]",
    "it follows that @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "[ thm : cpv - te ] let @xmath2 be a rational number such that @xmath23 .",
    "@xmath1 is resistant to constructive control via partitioning voters in the te model ( ccpv - te ) , in both the nonunique - winner model and the unique - winner model , for both the rational and the irrational voter model .",
    "we use the exact same construction as in the proof of theorem  [ thm : cpv - tp ] .",
    "we will show that if @xmath342 contains a @xmath15-element cover of @xmath137 then @xmath70 can be made the unique @xmath1 winner of @xmath40 via partitioning voters in the te model , and that if @xmath70 can be made a winner by partitioning voters in the te model then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath391 , then we let the second subelection consist of the @xmath428 voters with preference @xmath422 and voters @xmath392 .",
    "then @xmath70 is the unique winner of the first subelection , @xmath207 is the unique winner of the second subelection , and @xmath70 uniquely wins the final run - off between @xmath70 and @xmath207 .    to prove the second statement , suppose there is a partition of voters such that @xmath70 is a @xmath1 winner of the resulting election in model te .",
    "note that in at least one of the subelections , without loss of generality say the second subelection , a majority of the voters prefers @xmath345 to all candidates in @xmath431 .",
    "since @xmath345 is the unique winner of every run - off he or she participates in , @xmath345 can certainly not be the unique winner of the second subelection .",
    "since @xmath345 defeats every candidate in @xmath431 in their head - to - head contests in the second subelection , and since @xmath207 does not influence the relative vote scores of the candidates in @xmath432 , no candidate in @xmath431 is a winner of the second subelection .",
    "it follows that @xmath207 is a winner of the second subelection .",
    "if @xmath207 were to tie @xmath345 in their head - to - head contest in the second subelection , then @xmath207 would tie all candidates in their head - to - head contests in the second subelection , and @xmath345 would be the unique winner of the second subelection ( since @xmath433 ) .",
    "it follows that @xmath207 defeats @xmath345 in their head - to - head contest in the second subelection .",
    "this implies that at most @xmath15 voters from @xmath429 can be part of the second subelection .",
    "now consider the first subelection .",
    "note that @xmath70 must be the unique winner of the first subelection .",
    "so , certainly , @xmath345 can not be a winner of the first subelection .",
    "then , clearly , @xmath345 can not be a winner of the first subelection restricted to voters in @xmath429 . by claim  [ cl : llull - dv ]",
    "it follows that @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "[ thm : cpv - one - con ] @xmath10 is resistant to constructive control via partitioning voters in the te model ( ccpv - te ) , in both the nonunique - winner model and the unique - winner model , for both the rational and the irrational voter model .",
    "we use the same construction as in the proof of theorem  [ thm : cpv - tp ] , except that we have one fewer voter with preference @xmath422 .",
    "we will show that if @xmath342 contains a @xmath15-element cover of @xmath137 then @xmath70 can be made the unique @xmath10 winner of @xmath40 via partitioning voters in the te model , and that if @xmath70 can be made a winner by partitioning voters in the te model then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath391 , then we let the second subelection consist of the @xmath15 voters with preference @xmath422 and voters @xmath392 .",
    "then @xmath70 is the unique winner of the first subelection and proceeds to the run - off , and @xmath345 and @xmath207 are winners of the second subelection , and so no candidate from the second election proceeds to the run - off .",
    "it follows that @xmath70 is the only candidate participating in the final run - off , and so @xmath70 is the unique winner of the election .    to prove the second statement ,",
    "suppose there is a partition of voters such that @xmath70 is a @xmath10 winner of the resulting election in model te .",
    "note that in at least one of the subelections , without loss of generality say the second subelection , a majority of the voters prefers @xmath345 to all candidates in @xmath431 .",
    "since @xmath345 is the unique winner of every run - off he or she participates in , @xmath345 should not participate in the final run - off .",
    "in particular , @xmath345 can not be the unique winner of the second subelection . the only way to avoid this is if @xmath345 does not defeat @xmath207 in their head - to - head contest in the second subelection .",
    "this implies that at most @xmath15 voters from @xmath429 can be part of the second subelection .",
    "now consider the first subelection .",
    "note that @xmath70 must be the unique winner of the first subelection .",
    "so , certainly , @xmath345 can not be a winner of this subelection .",
    "then , clearly , @xmath345 can not be a winner of this subelection restricted to voters in @xmath429 . by claim  [ cl : llull - dv ]",
    "it follows that @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "[ thm : cpv - one - dest ] @xmath10 is resistant to destructive control via partitioning voters in the te model ( dcpv - te ) , in both the nonunique - winner model and the unique winner model , for both the rational and the irrational voter model .",
    "we use the same construction as in the proof of theorem  [ thm : cpv - one - con ] , except that we have one fewer voter with preference @xmath434 .",
    "we will show that if @xmath342 contains a @xmath15-element cover of @xmath137 then @xmath345 can become a nonwinner of @xmath40 via partitioning of voters in the te model , and that if @xmath345 can be made to not uniquely win @xmath40 via partitioning of voters in the te model then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "let @xmath435 be the collection of all voters except for the @xmath15 voters with preference @xmath422 .",
    "note that @xmath429 is exactly the voter collection used in the proof of theorem  [ thm : llull - cdv ] with candidate @xmath207 added as the least desirable candidate . since @xmath207 does not influence the differences between the scores of the other candidates , the following claim follows immediately from the proof of theorem  [ thm : llull - cdv ] .",
    "[ thm : cpv - one - dest - claim ] if @xmath345 can be made to not uniquely win @xmath430 by deleting at most @xmath15 voters , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath436 , then we let the second subelection consist of the @xmath15 voters with preference @xmath422 and voters @xmath437 .",
    "then @xmath70 is a winner of the first subelection , @xmath207 is a winner of the second subelection , and it follows that @xmath345 does not participate in the run - off .",
    "for the second statement , suppose there is a partition of voters such that @xmath345 is not a unique winner of the resulting election in model te .",
    "since @xmath345 uniquely wins any run - off he or she participates in , it follows that @xmath345 does not uniquely win either subelection .",
    "note that in at least one of the subelections , without loss of generality say the second subelection , a majority of the voters prefers @xmath345 to all candidates in @xmath431 .",
    "it follows that @xmath345 can not defeat @xmath207 in their head - to - head contest in the second subelection .",
    "this implies that at most @xmath15 voters from @xmath429 can be part of the second subelection .",
    "now consider the first subelection .",
    "note that @xmath345 can not be a unique winner of the first subelection .",
    "then , clearly , @xmath345 can not be a unique winner of the first subelection restricted to voters in @xmath429 . by claim  [ thm : cpv - one - dest - claim ]",
    ", it follows that @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "[ thm : cpv - lessone ] let @xmath2 be a rational number such that @xmath23 .",
    "@xmath1 is resistant to destructive control via partitioning voters in the te model ( dcpv - te ) , in both the nonunique - winner model and the unique - winner model , for both the rational and the irrational voter model .",
    "let @xmath337 be an instance of x3c , where @xmath374 and @xmath339 is a finite family of three - element subsets of @xmath137 .",
    "without loss of generality , we assume that @xmath375 and that @xmath376 ( if @xmath377 then @xmath419 does not contain a cover of @xmath137 , and if @xmath378 then we can solve the problem by brute force ) .",
    "we build an election @xmath26 such that :    1 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , then @xmath345 can become a nonwinner of @xmath40 via partitioning voters in the te model , and 2 .",
    "if @xmath345 can be made to not uniquely win @xmath40 via partitioning voters in the te model , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "note that this implies that @xmath1 is resistant to destructive control via partitioning voters in the te model , in both the nonunique - winner model and the unique - winner model .    in the proof of theorem  [ thm : cpv - tp",
    "] , we extended the construction from the proof of theorem  [ thm : ucdv ] . in the proof of the present theorem ,",
    "we extend the construction from theorem  [ thm : copeland - cdv ] in the same way .",
    "we let the candidate set @xmath30 be @xmath438 and we let @xmath28 be the following collection of voters :    1 .",
    "we have @xmath421 voters with preference @xmath439 , 2 .",
    "we have @xmath407 voters with preference @xmath440 , 3 .",
    "we have @xmath400 voters with preference @xmath441 , 4 .   for each @xmath359 , we have two voters , @xmath31 and @xmath385 , such that 1 .   @xmath31 has preference @xmath442 , and 2 .",
    "@xmath385 has preference @xmath443 , 5 .",
    "we have one voter with preference @xmath444 , and 6 .",
    "we have one voter with preference @xmath445 .",
    "let @xmath427 be the collection of all the voters in @xmath28 except for the @xmath428 voters with preference @xmath439 .",
    "note that @xmath429 is exactly the voter collection used in the proof of theorem  [ thm : copeland - cdv ] with candidate @xmath207 added as the least desirable candidate . since @xmath207 does not influence the differences between the scores of the other candidates , the following claim follows immediately from the proof of theorem  [ thm : copeland - cdv ] .",
    "[ cl : copeland - dv ] if @xmath345 can be made to not uniquely win @xmath430 by deleting at most @xmath15 voters , then @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "if @xmath342 contains a @xmath15-element cover of @xmath137 , say @xmath391 , then we let the second subelection consist of the @xmath428 voters with preference @xmath446 and voters @xmath392 .",
    "then @xmath70 is a winner of the first subelection , @xmath207 is the unique winner of the second subelection , and it follows that @xmath345 does not participate in the run - off .",
    "for the second statement , suppose there is a partition of voters such that @xmath345 is not a unique winner of the resulting election in model te .",
    "since @xmath345 uniquely wins any run - off he or she participates in , it follows that @xmath345 does not uniquely win either subelection .",
    "note that in at least one of the subelections , without loss of generality say the second subelection , a majority of the voters prefers @xmath345 to @xmath404 and both @xmath345 and @xmath404 to all candidates in @xmath431 .",
    "if @xmath207 were to tie @xmath345 in their head - to - head contest in the second subelection , then @xmath207 would tie all candidates in the second subelection in their head - to - head contests , and @xmath345 would be the unique winner of the second subelection .",
    "it follows that @xmath207 defeats @xmath345 in their head - to - head contest in the second subelection .",
    "this implies that at most @xmath15 voters from @xmath429 can be part of the second subelection .",
    "now consider the first subelection .",
    "note that @xmath345 can not be the unique winner of the first subelection .",
    "then , clearly , @xmath345 can not be the unique winner of the first subelection restricted to voters in @xmath429 . by claim  [ cl : copeland - dv ]",
    "it follows that @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "resistance to control is generally viewed as a desirable property in system design .",
    "however , suppose one is trying to solve resistant control problems .",
    "is there any hope ?    in their seminal paper on np - hard winner - determination problems , bartholdi , tovey , and",
    "trick  @xcite suggested considering hard election problems for the cases of a bounded number of candidates or a bounded number of voters , and they obtained efficient - algorithm results for such cases . within the study of elections , this same approach ",
    "seeking efficient fixed - parameter algorithms  has , for example , also been used ( although somewhat tacitly  see the coming discussion in the second paragraph of footnote  [ f : not - family ] ) within the study of bribery  @xcite .",
    "to the best of our knowledge , this bounded - case approach to finding the limits of resistance results has not been previously used to study control problems . in this section",
    "we do precisely that .    in particular",
    ", we obtain for resistant - in - general control problems a broad range of efficient algorithms for the case when the number of candidates or voters is bounded .",
    "our algorithms are not merely polynomial time .",
    "rather , we give algorithms that prove membership in fpt ( fixed - parameter tractability , i.e. , the problem is not merely individually in p for each fixed value of the parameter of interest ( voters or candidates ) , but indeed has a single p algorithm having degree that is bounded independently of the value of the fixed number of voters or candidates ) when the number of candidates is bounded , and also when the number of voters is bounded .",
    "and we prove that our fpt claims hold even under the succinct input model  in which the voters are input via `` ( preference - list , binary - integer - giving - frequency - of - that - preference - list ) '' pairs  and even in the case of irrational voters .",
    "we obtain such algorithms for all the voter - control cases , both for bounded candidates and for bounded voters , and for all the candidate - control cases with bounded candidates . on the other hand , we show that for the resistant - in - general irrational - voter , candidate - control cases , resistance still holds even if the number of voters is limited to being at most two .",
    "we structure this section as follows .",
    "we first start by briefly stating our notions and notations .",
    "we next state , and then prove , our fixed - parameter tractability results . regarding those ,",
    "we first address fpt results for the ( standard ) constructive and destructive cases .",
    "we then show that in many cases we can assert fpt results that are more general still  in particular , we will look at `` extended control '' : completely pinpointing whether under a given type of control we can ensure that at least one of a specified collection of `` copeland outcome tables '' ( to be defined later ) can be obtained .",
    "finally , we give our resistance results .",
    "the study of fixed - parameter complexity ( see , e.g. ,  @xcite ) has been expanding explosively since it was parented as a field by downey , fellows , and others in the late 1980s and the 1990s .",
    "although the area has built a rich variety of complexity classes regarding parameterized problems , for the purpose of the current paper we need focus only on one very important class , namely , the class @xmath447 .",
    "briefly put , a problem parameterized by some value @xmath448 is said to be _ fixed - parameter tractable _ ( equivalently , to belong to the class @xmath447 ) if there is an algorithm for the problem whose running time is @xmath449 . (",
    "note in particular that there is some particular constant for the `` big - oh '' that holds for all inputs , regardless of what @xmath448 value the particular input has . )    in our context , we will consider two parameterizations : bounding the number of candidates and bounding the number of voters .",
    "we will use the same notations used throughout this paper to describe problems , except we will postpend a `` -bv@xmath450 '' to a problem name to state that the number of voters may be at most @xmath448 , and we will postpend a `` -bc@xmath450 '' to a problem name to state that the number of candidates may be at most @xmath448 . in each case , the bound applies to the full number of such items involved in the problem .",
    "for example , in the case of control by adding voters , the @xmath448 must bound the total of the number of voters in the election added together with the number of voters in the pool of voters available for adding .",
    "typically , we have been viewing input votes as coming in each on a ballot .",
    "however , one can also consider the case of succinct inputs , in which our algorithm is given the votes as `` ( preference - list , binary - integer - giving - frequency - of - that - preference - list ) '' pairs .",
    "( we mention in passing that for the `` adding voter '' cases , when we speak of succinctness we require that not just the always - voting voters be specified succinctly but also that the pool of voters - available - to - be - added be specified succinctly . )",
    "succinct inputs have been studied extensively in the case of bribery  @xcite , and speaking more broadly , succinctness - of - input issues are often very germane to complexity classification ( see , e.g. ,  @xcite ) .",
    "note that proving an fpt result for the succinct case of a problem immediately implies an fpt result for the same problem ( without the requirement of succinct inputs being in place ) , and indeed is a stronger result , since succinctness can potentially exponentially compress the input .",
    "finally , we would like to be able to concisely express many results in a single statement . to do so",
    ", we borrow a notational approach from transformational grammar , and use square brackets as an `` independent choice '' notation .",
    "so , for example , the claim is a shorthand for six assertions : it runs ; she runs ; he runs ; it walks ; she walks ; and he walks .",
    "a special case is the symbol `` @xmath451 '' which , when it appears in such a bracket , means that when unwound it should be viewed as no text at all .",
    "for example , `` @xmath452 $ ] copeland is fun '' asserts both `` succinct copeland is fun '' and `` copeland is fun . ''",
    "we immediately state our main results , which show that for all the voter - control cases fpt schemes hold for both the bounded - voter and bounded - candidate cases , and for all the candidate - control cases fpt schemes hold for the bounded - candidate cases .    [",
    "t : v ] for each rational @xmath2 , @xmath453 , and each choice from the independent choice brackets below , the specified parameterized ( as @xmath448 varies over @xmath454 ) problem is in @xmath447 :    @xmath455 .",
    "[ t : c - bc ] for each rational @xmath2 , @xmath453 , and each choice from the independent choice brackets below , the specified parameterized ( as @xmath448 varies over @xmath454 ) problem is in @xmath447 :    @xmath456 .",
    "readers not interested in a discussion of those results and their proofs can at this point safely skip to the next labeled section header . before proving the above theorems ,",
    "let us first make a few observations about them .",
    "first , for cases where under a particular set of choices that same case is known ( e.g. , due to the results of sections  [ sec : control - candidate ] and  [ sec : control - voter ] ) to be in p even for the unbounded case , the above results are uninteresting as they follow from the earlier results ( such cases do not include any of the `` succinct '' cases , since those were not treated earlier ) .",
    "however , that is a small minority of the cases .",
    "also , for clarity as to what cases are covered , we have included some items that are not formally needed .",
    "for example , since fpt for the succinct case implies fpt for the no - succinctness - restriction case , and since fpt for the irrationality - allowed case implies fpt for the rational - only case , the first two choice brackets in each of the theorems could , without decreasing the results strength , be removed by eliminating their `` @xmath451 '' and `` @xmath1 '' choices .",
    "we now turn to the proofs .",
    "since proving every case would be uninterestingly repetitive , we will at times ( after carefully warning the reader ) prove the cases of one or two control types when that is enough to make clear how the omitted cases proofs go .",
    "let us start with those cases that can be done simply by appropriately applied brute force .    we first prove theorem  [ t : c - bc ] .",
    "* proof of theorem  [ t : c - bc ] . * if we are limited to having at most @xmath448 candidates , then for each of the cases mentioned , the total number of ways of adding / deleting / partitioning candidates is simply a ( large ) constant .",
    "for example , there will be at most ( `` at most '' rather than `` exactly '' since @xmath448 is merely an upper bound on the number of candidates ) @xmath457 possible run - off partitions and there will be at most @xmath458 relevant ways of deleting candidates ( since we ca nt ( destructive case ) or would never ( constructive case ) delete the distinguished candidate ) .",
    "so we can brute - force try all ways of adding / deleting / partitioning candidates , and for each such way can see whether we get the desired outcome .",
    "this works in polynomial time ( with a fixed degree independent of @xmath448 and @xmath2 ) even in the succinct case , and even with irrationality allowed .",
    "a brute - force approach similarly works for the case of voter control when the number of voters is fixed .",
    "in particular , we prove the following subcase of theorem  [ t : v ] .    [",
    "l : short ] for each rational @xmath2 , @xmath453 , and each choice from the independent choice brackets below , the specified parameterized ( as @xmath448 varies over @xmath454 ) problem is in @xmath447 :    @xmath459 .    when considering `` @xmath460 '' cases  namely in this proof and in the resistance section starting on page  we will not even discuss succinctness .",
    "the reason is that if the number of voters is bounded , say by @xmath448 , then succinctness does nt asymptotically change the input sizes interestingly , since succinctness at very best would compress the vote description by a factor of about @xmath448which in this case is a fixed constant ( relative to the value of the parameterization , which itself is @xmath448 ) .",
    "* proof of lemma  [ l : short ] . * if we are limited to having at most @xmath448 voters , note that we can , for each of these four types of control , brute - force check all possible approaches to that type of control .",
    "for example , for the case of control by deleting voters , we clearly have no more than @xmath457 possible vote deletion choices , and for the case of control by partitioning of voters , we again have at most @xmath457 partitions ( into @xmath116 and @xmath461 ) to consider .",
    "and @xmath457 is just a ( large ) constant .",
    "so a direct brute - force check yields a polynomial - time algorithm , and by inspection one can see that its run - time s degree is bounded above independently of @xmath448 .",
    "we now come to the interesting cluster of @xmath447 cases : the voter - control cases when the number of candidates is bounded .",
    "now , at first , one might think that we can handle this , just as the above cases , via a brute - force approach . and",
    "that is almost correct : one can get polynomial - time algorithms for these cases via a brute - force approach .",
    "however , for the succinct cases , the degrees of these algorithms will be huge , and _ will not be independent of the bound , @xmath448 , on the number of candidates_. for example , even in the rational case , one would from this approach obtain run - times with terms such as @xmath462 .",
    "that is , one would obtain a family of p - time algorithms , but one would not have an fpt algorithm . to overcome this obstacle , we will employ lenstra s  @xcite algorithm for bounded - variable - cardinality integer programming .",
    "although lenstra s algorithm is truly amazing in its power , even it will not be enough to accomplish our goal .",
    "rather , we will use a scheme that involves a fixed ( though very large ) number of lenstra - type programs each being focused on a different resolution path regarding the given problem .    what we need to prove , to complete the proof of theorem  [ t : v",
    "] , is the following lemma .",
    "[ t : leftover ] for each rational @xmath2 , @xmath453 , and each choice from the independent choice brackets below , the specified parameterized ( as @xmath448 varies over @xmath454 ) problem is in @xmath447 :    @xmath463 .",
    "let us start by recalling that , regarding the first choice bracket , the `` succinct '' case implies the `` @xmath451 '' case , so we need only address the succinct case .",
    "recall also that , regarding the second choice bracket , for each rational @xmath2 , @xmath5 , the `` '' case implies the `` '' case , so we need only address the @xmath42 case .",
    "so all that remains is to handle each pair of choices from the third and forth choice brackets . to prove every case",
    "would be very repetitive .",
    "so we will simply prove in detail a difficult , relatively representative case , and then will for the other cases either mention the type of adjustment needed to obtain their proofs , or will simply leave it as a simple but tedious exercise that will be clear , as to how to do , to anyone who reads this section .",
    "so , in particular , let us prove the following result .",
    "[ t : first - example - case ] for each rational @xmath2 , @xmath453 , the following parameterized ( as @xmath448 varies over @xmath454 ) problem is in @xmath447 : @xmath464 .",
    "let @xmath2 , @xmath453 , be some arbitrary , fixed rational number .",
    "in particular , suppose that @xmath2 can be expressed as @xmath465 , where @xmath466 , @xmath467 , @xmath468 and @xmath12 share no common integer divisor greater than 1 , and if @xmath469 then @xmath470 . we wo nt explicitly invoke @xmath468 and @xmath12 in our algorithm , but each time we speak of evaluating a certain set of pairwise outcomes `` with respect to @xmath2 , '' one can think of it as evaluating that with respect to a strict pairwise win giving @xmath12 points , a pairwise tie giving @xmath468 points , and a strict pairwise loss giving @xmath3 points .",
    "we need a method of specifying the pairwise outcomes among a set of candidates . to do this",
    ", we will use the notion of a _ copeland outcome table _ over a set of candidates .",
    "this will not actually be a table , but rather will be a function ( a symmetric one  it will not be affected by the order of its two arguments ) that , when given a pair of distinct candidates as inputs , will say which of the three possible outcomes allegedly happened : either there is a tie , or one candidate won , or the other candidate won .",
    "note that a cot is simply a representation of an election graph ( see section  [ sect : constructing ] ) .",
    "so , in a @xmath448-candidate election , there are exactly @xmath471 such functions .",
    "( we will not care about the names of the candidates , and so will assume that the tables simply use the names @xmath4 through @xmath448 , and that we match the names of the actual candidates with those integers by linking them lexicographically , i.e. , the lexicographically first candidate will be associated with the integer 1 and so on . )",
    "let us call a @xmath448-candidates copeland outcome table a @xmath448-cot .",
    "we need to build our algorithm that shows that the problem @xmath464 , @xmath472 , is in @xmath447 .",
    "so , let @xmath448 be some fixed integer bound on the number of candidates.[multiblock footnote omitted ]    for each @xmath473-cot , @xmath474 , + for each @xmath473-cot , @xmath475 , + doifwhen we have a @xmath42 election ( involving all the input voters ) , with respect to @xmath2 , between all the candidates who win under @xmath474 with respect to @xmath2 , and all the candidates who win under @xmath475 with respect to @xmath2 , the preferred candidate of the input problem is a winner
    "thencreate and run the integer linear program constraint feasibility problem that checks whether there exists a partition of the voters such that the first subelection has @xmath473-cot @xmath474 and the second subelection has @xmath473-cot @xmath475 , and if so , then accept .",
let us suppose we are given an input instance .",
    "let @xmath476 be the number of candidates in this instance ( recall that @xmath448 is not the number of candidates , but rather is an upper bound on the number of candidates ) .",
    "the top level of our algorithm is specified by the pseudocode in figure  [ f : top - level - code ] .",
    "( although this algorithm seemingly is just trying to tell whether the given control is possible for the given case , rather than telling how to partition to achieve that control , note that which iteration through the double loop accepts and the precise values of the variables inside the integer linear program constraint feasibility problem that made that iteration be satisfied will in fact tell us precisely what the partition is that makes the preferred candidate win . )    now , note that the total number of @xmath473-cots that exist ( we do not need to care whether all can be realized via actual votes ) is @xmath477 .",
    "so the code inside the two loops executes at most @xmath478 times , which is constant - bounded since @xmath479 , and we have fixed @xmath448 .",
    "so all that remains is to give the integer linear program constraint feasibility problem mentioned inside the inner loop .",
    "the setting here can sometimes be confusing , e.g. , when we speak of constants that can grow without limit .",
    "it is important to keep in mind that in this integer linear program constraint feasibility problem , the number of variables and constraints is constant ( over all inputs ) , and the integer linear program constraint feasibility problem s `` constants '' are the only things that change with respect to the input .",
    "this is the framework that allows us to invoke lenstra s powerful algorithm .",
    "we first specify the set of constants of the integer linear program constraint feasibility problem . in particular , for each @xmath143 , @xmath480 , we will have a constant , @xmath481 , that is the number of input voters whose vote is of the @xmath143th type ( among the @xmath482 possible vote possibilities ; keep in mind that voters are allowed to be irrational , thus the value @xmath482 is correct ) .",
    "note that the number of these constants that we have is itself constant - bounded ( for fixed @xmath448 ) , though of course the values that these constants ( of the integer linear program constraint feasibility problem ) take on can grow without limit .",
    "in addition , let us define some constants that will not vary with the input but rather are simply a notational shorthand that we will use to describe how the integer linear program constraint feasibility problem is defined ( what constraints occur in it ) .",
    "in particular , for each @xmath143 and @xmath346 such that @xmath483 , @xmath484 , and @xmath485 , let @xmath486 be @xmath4 if @xmath474 asserts that ( in their head - to - head contest ) @xmath143 ties or defeats @xmath346 , and let it be @xmath3 if @xmath474 asserts that ( in their head - to - head contest ) @xmath143 loses to @xmath346 .",
    "let @xmath487 be identically defined , except with respect to @xmath475 .",
    "informally put , these values will be used to let our integer linear program constraint feasibility problem seek to enforce such a win / loss / tie pattern with respect to the given input vote numbers and the given type of allowed control action . the integer linear program constraint feasibility problem s variables , which of course are all _ integer _ variables , are the following @xmath482 variables . for each @xmath143 , @xmath480",
    ", we will have a variable , @xmath488 , that represents how many of the @xmath481 voters having the @xmath143th among the @xmath482 possible vote types go into the first subelection .",
    "finally , we must specify the constraints of our integer linear program constraint feasibility problem .",
    "we will have three groups of constraints .",
    "the first constraint group is enforcing that plausible numbers are put in the first partition . in particular , for each @xmath143 , @xmath480 , we have the constraints @xmath489 and @xmath490 .",
    "the third constraint group has the same function as the second constraint group , except it regards the second subelection rather than the first subelection .",
    "in particular , for each @xmath143 and @xmath346 such that @xmath483 , @xmath484 , and @xmath492 , we do the following .",
    "consider again equation   from above , except with each of the two occurrences of @xmath500 replaced by @xmath501 .",
    "if @xmath502 we will have a constraint of that form with op set to `` @xmath496 '' .",
    "if @xmath503 we will have a constraint of that form with op set to `` @xmath498 '' .",
    "as above , this means that if @xmath504 , we will add two constraints .",
    "this completes the specification of the integer linear programming constraint feasibility problem .",
    "note that our top - level code , from figure  [ f : top - level - code ] , clearly runs within polynomial time relative to even the succinct - case input to the original @xmath505 problem , and that that polynomial s degree is bounded above independently of @xmath448 .",
    "note in particular that our algorithm constructs at most a large constant ( for @xmath448 fixed ) number of integer linear programming constraint feasibility problems , and each of those is itself polynomial - sized relative to even the succinct - case input to the original @xmath505 problem , and that polynomial size s degree is bounded above independently of @xmath448 .",
    "further , note that the integer linear programming constraint feasibility problems clearly do test what they are supposed to test  most importantly , they test that the subelections match the pairwise outcomes specified by @xmath473-cots @xmath474 and @xmath475 .",
    "finally and crucially , by lenstra s algorithm  ( @xcite , see also  @xcite which are very clear regarding the `` linear ' 's later in this sentence ) , since this integer linear programming constraint feasibility problem has a fixed number of constraints ( and in our case in fact also has a fixed number of variables ) , it can be solved  relative to its size ( which includes the filled - in constants , such as our @xmath481 for example , which are in effect inputs to the integer program s specification)via a linear number of arithmetic operations on linear - sized integers .",
    "so , overall , we are in polynomial time even relative to succinctly specified input , and the polynomial s degree is bounded above independently of @xmath448 .",
    "thus we have established membership in the class @xmath447 .",
    "we now describe very briefly how the above proof of lemma  [ t : first - example - case ] can be adjusted to handle all the partition cases from lemma  [ t : leftover ] , namely , the cases @xmath506 . as noted before",
    ", the first two brackets can be ignored , as we have chosen the more demanding choice for each .",
    "let us discuss the other variations .",
    "regarding changing from constructive to destructive , in figure  [ f : top - level - code ] change `` is a winner '' to `` is not a winner . ''",
    "regarding changing from pv - tp to pv - te , in the `` if '' block in figure  [ f : top - level - code ] change each `` all the candidates who win '' to `` the candidate who wins ( if there is a unique candidate who wins ) . ''",
    "the only remaining cases are the cases @xmath507 .",
    "however , these cases are even more straightforward than the partition cases we just covered , so for space reasons we will not write them out , but rather will briefly comment on these cases . basically , one s top - level code for these cases loops over all @xmath473-cots , and for each ( there are @xmath477 ) checks whether the right outcome happens under that @xmath473-cot ( i.e. , the distinguished candidate either is ( constructive case ) or is not ( destructive case ) a winner ) , and if so , it runs lenstra s algorithm on an integer linear programming constraint feasibility problem to see whether we can by the allowed action ( adding / deleting ) get to a state where that particular @xmath473-cot matches our ( after addition or deletion of voters ) election . in the integer program",
    ", the variables will be the obvious ones , namely , for each @xmath143 , @xmath480 , we will have a variable , @xmath488 , that describes how many voters of type @xmath143 to add / delete . as our key constants ( of the integer linear program constraint feasibility problem ) , we will have , for each @xmath143 , @xmath480 , a value , @xmath481 , for the number of type @xmath143 voters in the input . also , if this is a problem about addition of voters , we will have additional constants , @xmath508 , @xmath480 , representing the number of type @xmath143 voters among the pool , @xmath110 , of voters available for addition . and",
    "if our problem has an internal `` @xmath15 '' ( a limit on the number of additions or deletions ) , we enforce that with the natural constraints , as do we also with the natural constraints enforce the obvious relationships between the @xmath488 , @xmath481 , @xmath508 , and so on .",
    "most critically , we have constraints ensuring that after the additions / deletions specified by the @xmath488 , each pairwise outcome specified by the @xmath473-cot is realized .    finally , although everything in section  [ sec : control - fpt ] ( both the part so far and the part to come ) is written for the case of the nonunique - winner model , all the results hold analogously in the unique - winner model , with the natural , minor proof modifications .",
    "( also , we mention in passing that due to the connection , found in footnote  5 of  @xcite , between unique - winner destructive control and nonunique - winner constructive control , one could use some of our nonunique - winner constructive - case results to indirectly prove some of the unique - winner destructive - case results . )      in this section , we look at extended control . by",
    "that we do not mean changing the ten standard control notions of adding / deleting / partitioning candidates / voters .",
    "rather , we mean generalizing past merely looking at the constructive ( make a distinguished candidate a winner ) and the destructive ( prevent a distinguished candidate from being a winner ) cases . in particular , we are interested in control where the goal can be far more flexibly specified , for example ( though in the partition cases we will be even more flexible than this ) , we will allow as our goal region any ( reasonable  there are some time - related conditions ) subcollection of `` copeland outcome tables '' ( specifications of who won / lost / tied each head - to - head contest ) .",
    "since from a copeland outcome table , in concert with the current @xmath2 , one can read off the @xmath42 scores of the candidates , this allows us a tremendous range of descriptive flexibility in specifying our control goals , e.g. , we can specify a linear order desired for the candidates with respect to their @xmath42 scores , we can specify a linear - order - with - ties desired for the candidates with respect to their @xmath42 scores , we can specify the exact desired @xmath42 scores for one or more candidates , we can specify that we want to ensure that no candidate from a certain subgroup has a @xmath42 score that ties or defeats the @xmath42 score of any candidate from a certain other subgroup , etc.we mention up front that that initial example list applies with some additional minor technical caveats .",
    "those examples were speaking as if in the final election we have all the candidates receiving @xmath42 scores in the final election .",
    "but in fact in the partition cases this is not ( necessarily ) so , and so in those cases we will focus on the copeland outcome tables most natural to the given case .",
    "for example , in control by partition of voters , we will focus on subcollections of pairs of copeland outcome tables for the two subelections .",
    "also , though our copeland outcome tables as defined below are not explicitly labeled with candidate names , but rather use a lexicographical correspondence with the involved candidates , in some cases we would  though we do nt repeat this in the discussion below  need to allow the inclusion in the goal specification of the names of the candidates who are in play in a given table or tables , most particularly , in the cases of addition and deletion of candidates , and in some partition cases . ]",
    "later in this section we will give a list repeating some of these examples and adding some new examples .    all the fpt algorithms given in the previous section regard , on their surface , the standard control problem , which tests whether a given candidate can be made a winner ( constructive case ) or can be precluded from being a winner ( destructive case ) .",
    "we now note that the general approaches used in that section in fact yield fpt schemes even for the far more flexible notions of control mentioned above . in fact , one gets , for all the fpt cases covered in the previous section , fpt algorithms for the extended - control problem for those cases  very loosely put , fpt algorithms that test , for virtually any natural collection of outcome tables ( as long as that collection itself can be recognized in a way that does nt take too much running time , i.e. , the checking time is polynomial and of a degree that is bounded independently of @xmath448 ) , whether by the given type of control one can reach one of those outcome tables .",
    "let us discuss this in a bit more detail .",
    "a key concept used inside the proof of lemma  [ t : first - example - case ] was that of a copeland outcome table  a function that for each distinct pair of candidates specifies either a tie or specifies who is the ( not tied ) winner in their pairwise contest .",
    "let us consider the control algorithm given in the proof of that lemma , and in particular let us consider the top - level code specified in figure  [ f : top - level - code ] .",
    "that code double - loops over size @xmath473 copeland outcome tables ( a.k.a .  @xmath473-cots ) , regarding the subpartitions , and for each case when the outcome tables subelection cases , followed by the final election that they imply , correspond to the desired type of constructive ( the distinguished person wins ) or destructive ( the distinguished person does not win ) outcome , we check whether those two @xmath473-cots can be made to hold via the current type of control ( for the case being discussed , pv - tp ) .",
    "however , note that simply by easily varying that top - level code we can obtain a natural fpt algorithm ( a single algorithm , see footnote  [ f : not - family ] the analogue of which applies here ) for any question of whether via the allowed type of control one can reach any run - time - quick - to - recognize collection of pairs of @xmath473-cots ( in the subelection ) , or even whether a given candidate collection and one of a given ( run - time - quick - to - recognize ) @xmath509-cot collection over that candidate collection ( @xmath509 being the size of that final - round candidate collection ) can be reached in the final election .",
    "this is true not just for the partition cases ( where , informally put , we would do this by , in figure  [ f : top - level - code ] , changing the condition inside the `` if '' to instead look for membership in that collection of @xmath473-cots[multiblock footnote omitted ] ) but also for all the cases we attacked via lenstra s method ( though for the nonpartition cases we will typically single - loop over copeland outcome tables that may represent the outcome after control is exerted ; also , for some of these cases , the caveat at the end of footnote  [ f : tricky - caveat ] will apply ) . and",
    "it is even easier to notice that for those cases we attacked by direct brute force this also holds .",
    "so , as just a few examples ( some echoing the start of this section , and some new ) , all the following have ( with the caveats mentioned above about needed names attached , e.g. , in cases of candidate addition / deletion / partition , and regarding the partition cases focusing not necessarily directly on the final table ) fpt extended control algorithms for all the types of control and boundedness cases for which the fpt results of the previous section are stated .    1 .   asking whether under the stated action one can obtain in the final election ( simply in the election in the case when there is no partitioning ) the outcome that all the @xmath42-system scores of the candidates precisely match the relations of the lexicographic names of the candidates",
    ". 2 .   more generally than that , asking whether under the stated action one can obtain in the final election ( simply in the election in the case when there is no partitioning ) a certain linear - order - without - ties regarding the @xmath42-system scores of the candidates .",
    "3 .   more generally still , asking",
    "whether under the stated action one can obtain in the final election ( simply in the election in the case when there is no partitioning ) a certain linear - order - with - ties regarding the @xmath42-system scores of the candidates .",
    "4 .   asking",
    "whether under the stated action one can obtain in the final election ( simply in the election in the case when there is no partitioning ) the situation that exactly 1492 candidates tie as winner regarding their @xmath42-system scores .",
    "5 .   asking",
    "whether under the stated action one can obtain in the final election ( simply in the election in the case when there is no partitioning ) the situation that no two candidates have the same @xmath42-system scores as each other .",
    "again , these are just a very few examples .",
    "our point is that the previous section is flexible enough to address not just constructive / destructive control , but also to address far more general control issues .",
    "theorems  [ t : v ] and  [ t : c - bc ] give @xmath447 schemes for all voter - control cases with bounded voters , for all voter - control cases with bounded candidates , and for all candidate - control cases with bounded candidates .",
    "this might lead one to hope that all the cases admit @xmath447 schemes .",
    "however , the remaining type of case , the candidate - control cases with bounded voters , does not follow this pattern . in fact , we note that for @xmath42 all the candidate - control cases that we showed earlier in this paper ( i.e. , without bounds on the number of voters ) to be resistant remain resistant even for the case of bounded voters .",
    "this resistance holds even when the input is not in succinct format , and so it certainly also holds when the input is in succinct format .",
    "the reason for this is that , for the case of irrational voters , with just _ two _ voters ( with preferences over @xmath448 candidates ) any given @xmath448-cot can be achieved . to do this , for each distinct pair of candidates @xmath143 and @xmath346 , to have @xmath143 preferred in their pairwise contest have both voters prefer @xmath143 to @xmath346 , to have @xmath346 preferred in their pairwise contest have both voters prefer @xmath346 to @xmath143 , and to have a tie in the pairwise contest have one voter prefer @xmath346 to @xmath143 and one voter prefer @xmath143 to @xmath346 . since in the proofs of resistance for candidate control ,",
    "we identified elections with their election graphs , i.e. , with their cots , it is not hard to see that all these resistance proofs carry over even to the case of two irrational voters .    the only open cases remaining regard the rational - voter , candidate - control , bounded - voter cases .",
    "we note that betzler and uhlmann  @xcite have recently resolved some of these open issues .",
    "in this section we show that condorcet elections are resistant to constructive control via deleting voters ( ccdv ) and via partition of voters ( ccpv ) .",
    "these results were originally claimed in the seminal paper of bartholdi , tovey , and trick  @xcite , but the proofs there were based on the assumption that a voter can be indifferent between several candidates . their model of elections",
    "did not allow that ( and neither does ours ) . here",
    "we show how one can obtain these results in the case when the voters preference lists are linear orders  which is both their model and ours .",
    "recall that a candidate @xmath11 of election @xmath26 is a condorcet winner of @xmath40 if he or she defeats all other candidates in their head - to - head contests .",
    "alternatively , one could say that a candidate @xmath11 is a condorcet winner of election @xmath40 if and only if he or she has copeland@xmath8 score of @xmath54 .",
    "since each election can have at most one condorcet winner , it does nt make sense here to differentiate between the unique - winner and the nonunique - winner models .",
    "[ thm : ccdv - condorcet ] condorcet elections are resistant to constructive control via deleting voters .",
    "this follows immediately from the proof of theorem  [ thm : ucdv ] .",
    "note that a condorcet winner is always a unique @xmath1 winner , for each rational @xmath2 with @xmath5 , and note that in the proof of theorem  [ thm : ucdv ] , if @xmath342 contains a @xmath15-element cover of @xmath137 , then we can delete @xmath15 voters such that in the resulting election @xmath70 defeats every other candidate in their head - to - head , contest , i.e. , @xmath70 is a condorcet winner in the resulting election .     before we proceed with our proof of resistance for the case of constructive control via partition of voters ( ccpv ) , we have to mention a slight quirk of bartholdi , tovey , and trick s model of voter partition .",
    "if one reads their paper carefully , it becomes apparent that they have a quiet assumption that each given set of voters can only be partitioned into subelections that each elect exactly one winner , thus severely restricting the chair s partitioning possibilities .",
    "that was why hemaspaandra , hemaspaandra , and rothe  @xcite replaced bartholdi , tovey , and trick s convention with the more natural ties - promote and ties - eliminate rules ( see the discussion in  @xcite ) , but for this current section of our paper we go back to bartholdi , tovey , and trick s model , since our goal here is to reprove their results without breaking _ their _ model .",
    "[ thm : ccpv - condorcet ] condorcet elections are resistant to constructive control via partitioning voters ( ccpv ) in bartholdi , tovey , and trick s model ( see the paragraph above ) .",
    "the proof follows via a reduction from the x3c problem .",
    "in fact , we use exactly the construction from the proof of theorem  [ thm : cpv - tp ] .",
    "let @xmath26 be the election constructed in that proof . since @xmath207 is the only candidate that @xmath70 defeats in a head - to - head contest , the only way for @xmath70 to become a winner via partitioning voters is to guarantee that @xmath70 wins within his or her subelection and that @xmath207 wins within the other one .",
    "( note that since @xmath70 is not a condorcet winner , @xmath70 can not win in both subelections . )",
    "if @xmath342 contains a @xmath15-element cover , say , @xmath510 , then letting @xmath511 and @xmath512 will make @xmath70 the condorcet winner in this ccpv scenario .    for the converse , let @xmath513 be a partition of the collection of voters such that @xmath70 is the global condorcet winner in the ccpv scenario where we use two subelections , one with voters @xmath514 and one with voters @xmath515 . via the above paragraph we can assume , without loss of generality , that @xmath70 is the condorcet winner in @xmath516 and that @xmath207 is the condorcet winner in @xmath517 .",
    "we can assume that @xmath515 contains the @xmath428 voters in @xmath518 ( i.e. , the voters with preference @xmath422 ) .",
    "also , @xmath515 contains at most @xmath15 voters from @xmath429 , as otherwise @xmath207 would certainly not be a condorcet winner in @xmath517 .    as a result",
    ", @xmath70 can be made the condorcet winner of @xmath430 by deleting at most @xmath15 voters .",
    "it follows from claim  [ cl : llull - dv ] that @xmath342 contains a @xmath15-element cover of @xmath137 .",
    "we have shown that from the computational point of view the election systems of llull and copeland ( i.e. , copeland@xmath6 ) are broadly resistant to bribery and procedural control , regardless of whether the voters are required to have rational preferences .",
    "it is rather charming that llull s 700-year - old system shows perfect resistance to bribery and more resistances to ( constructive ) control than any other natural system ( even far more modern ones ) with an easy winner - determination procedure ",
    "other than , @xmath7is known to possess , and this is even more remarkable when one considers that llull s system was defined long before control of elections was even explicitly studied .",
    "copeland@xmath6 voting matches llull s perfect resistance to bribery and in addition has perfect resistance to ( constructive ) control",
    ". a natural open direction would be to study the complexity of control for additional election systems .",
    "particularly interesting would be to find existing , natural voting systems that have polynomial - time winner determination procedures but that are resistant to all standard types of both constructive _ and destructive _ control .",
    "also extremely interesting would be to find single results that classify , for broad families of election systems , precisely what it is that makes control easy or hard , i.e. , to obtain dichotomy meta - results for control ( see hemaspaandra and hemaspaandra  @xcite for some discussion regarding work of that flavor for manipulation ) .",
    "we thank felix brandt , frieder stolzenburg , and the anonymous aaai-07 , aaim-08 , and comsoc-08 referees for helpful comments .",
    "a.  altman and m.  tennenholtz",
    ". an axiomatic approach to personalized ranking systems . in _ proceedings of the 20th international joint conference on artificial intelligence _ , pages 11871192 .",
    "aaai press , january 2007 .",
    "n.  betzler , j.  guo , and r.  niedermeier .",
    "parameterized computational complexity of dodgson and young elections . in",
    "_ proceedings of the 11th scandinavian workshop on algorithm theory _ , pages 402413 .",
    "springer - verlag _ lecture notes in computer science # 5124 _ , 2008 .",
    "n.  betzler and j.  uhlmann .",
    "parameterized complexity of candidate control in elections and related digraph problems . in _ proceedings of the 2nd annual international conference on combinatorial optimization and applications _ , pages 4353 .",
    "springer - verlag _ lecture notes in computer science # 5156 _ , july 2008 .",
    "v.  conitzer and t.  sandholm .",
    "universal voting protocol tweaks to make manipulation hard . in _ proceedings of the 18th international joint conference on artificial intelligence _ , pages 781788 .",
    "morgan kaufmann , august 2003 .",
    "v.  conitzer and t.  sandholm .",
    "nonexistence of voting rules that are usually hard to manipulate . in _ proceedings of the 21st national conference on artificial intelligence _ , pages 627634 .",
    "aaai press , july 2006 .",
    "g.  erdlyi , l.  hemaspaandra , j.  rothe , and h.  spakowski . on approximating optimal weighted lobbying , and frequency of correctness versus average - case polynomial time .",
    "in _ proceedings of the 16th international symposium on fundamentals of computation theory _ , pages 300311 .",
    "springer - verlag _ lecture notes in computer science # 4639 _ , august 2007 .",
    "e.  elkind and h.  lipmaa .",
    "small coalitions can not manipulate voting . in _ proceedings of the 9th international conference on financial cryptography and data security _ ,",
    "pages 285297 .",
    "springer - verlag _ lecture notes in computer science # 3570 _ , february / march 2005 .",
    "g.  erdlyi , m.  nowak , and j.  rothe .",
    "sincere - strategy preference - based approval voting broadly resists control . in _ proceedings of the 33rd international symposium on mathematical foundations of computer science _ , pages 311322 .",
    "springer - verlag _ lecture notes in computer science # 5162 _ , august 2008 .",
    "g.  erdlyi , m.  nowak , and j.  rothe .",
    "sincere - strategy preference - based approval voting fully resists constructive control and broadly resists destructive control .",
    "technical report cs.gt/0806.0535 , acm computing research repository ( corr ) , june 2008 .",
    "a precursor appears as @xcite .",
    "p.  faliszewski , e.  hemaspaandra , and l.  hemaspaandra . the complexity of bribery in elections . in _ proceedings of the 21st national conference on artificial intelligence",
    "pages 641646 .",
    "aaai press , july 2006 .",
    "p.  faliszewski , e.  hemaspaandra , and l.  hemaspaandra .",
    "how hard is bribery in elections ?",
    "technical report tr-895 , department of computer science , university of rochester , rochester , ny , april 2006 .",
    "revised , september 2006 .",
    "p.  faliszewski , e.  hemaspaandra , l.  hemaspaandra , and j.  rothe . a richer understanding of the complexity of election systems . in s.",
    "ravi and s.  shukla , editors , _ fundamental problems in computing : essays in honor of professor daniel j. rosenkrantz_. springer . to appear .",
    "preliminary version available as  @xcite .",
    "p.  faliszewski , e.  hemaspaandra , l.  hemaspaandra , and j.  rothe . a richer understanding of the complexity of election systems",
    ". technical report tr-903 , department of computer science , university of rochester , rochester , ny , september 2006 .",
    "faliszewski , e.  hemaspaandra , l.  hemaspaandra , and j.  rothe .",
    "llull and copeland voting broadly resist bribery and control . in",
    "_ proceedings of the 22nd aaai conference on artificial intelligence _ , pages 724730 .",
    "aaai press , july 2007 .",
    "p.  faliszewski , e.  hemaspaandra , l.  hemaspaandra , and j.  rothe .",
    "copeland voting fully resists constructive control . in _ proceedings of the 4th international conference on algorithmic aspects in information and management _ ,",
    "pages 165176 .",
    "springer - verlag _ lecture notes in computer science # 5034 _ , june 2008 .",
    "p.  faliszewski , e.  hemaspaandra , and h.  schnoor .",
    "copeland voting : ties matter . in _ proceedings of the 7th international conference on autonomous agents and multiagent systems _ ,",
    "pages 983990 , may 2008 .",
    "s.  ghosh , m.  mundhe , k.  hernandez , and s.  sen . voting for movies : the anatomy of recommender systems . in _ proceedings of the 3rd annual conference on autonomous agents _ ,",
    "pages 434435 .",
    "acm press , 1999 .      c.  homan and l.  hemaspaandra .",
    "guarantees for the success frequency of an algorithm for finding dodgson - election winners .",
    "technical report tr-881 , department of computer science , university of rochester , rochester , ny , september 2005 .",
    "revised , june 2007 .",
    "e.  hemaspaandra , l.  hemaspaandra , and j.  rothe .",
    "hybrid elections broaden complexity - theoretic resistance to control . in _ proceedings of the 20th international joint conference on artificial intelligence _ , pages 13081314 .",
    "aaai press , january 2007 .",
    "a.  procaccia , j.  rosenschein , and g.  kaminka . on the robustness of preference aggregation in noisy environments . in _ proceedings of the 6th international joint conference on autonomous agents and multiagent systems _ ,",
    "pages 416422 .",
    "acm press , may 2007 .",
    "a.  procaccia , j.  rosenschein , and a.  zohar .",
    "multi - winner elections : complexity of manipulation , control , and winner - determination . in _ proceedings of the 20th international joint conference on artificial intelligence _ , pages 14761481 .",
    "aaai press , january 2007 ."
  ],
  "abstract_text": [
    "<S> control and bribery are settings in which an external agent seeks to influence the outcome of an election . </S>",
    "<S> constructive control of elections refers to attempts by an agent to , via such actions as addition / deletion / partition of candidates or voters , ensure that a given candidate wins  @xcite . </S>",
    "<S> destructive control refers to attempts by an agent to , via the same actions , preclude a given candidate s </S>",
    "<S> victory  @xcite . </S>",
    "<S> an election system in which an agent can sometimes affect the result and it can be determined in polynomial time on which inputs the agent can succeed is said to be vulnerable to the given type of control . </S>",
    "<S> an election system in which an agent can sometimes affect the result , yet in which it is np - hard to recognize the inputs on which the agent can succeed , is said to be resistant to the given type of control . aside from election systems with an @xmath0-hard winner problem , </S>",
    "<S> the only systems previously known to be resistant to all the standard control types were highly artificial election systems created by hybridization  @xcite . </S>",
    "<S> this paper studies a parameterized version of copeland voting , denoted by @xmath1 , where the parameter @xmath2 is a rational number between @xmath3 and @xmath4 that specifies how ties are valued in the pairwise comparisons of candidates . in every previously studied constructive or destructive control scenario , we determine which of resistance or vulnerability holds for @xmath1 for each rational  @xmath2 , @xmath5 . in particular , we prove that copeland@xmath6 , the system commonly referred to as `` copeland voting , '' provides full resistance to constructive control , and we prove the same for @xmath1 , for all rational @xmath2 , @xmath7 . among systems with a polynomial - time winner problem , copeland voting is the first natural election system proven to have full resistance to constructive control . </S>",
    "<S> in addition , we prove that both copeland@xmath8 and copeland@xmath9 ( interestingly , @xmath10 is an election system developed by the thirteenth - century mystic ramon llull ) are resistant to all standard types of constructive control other than one variant of addition of candidates . </S>",
    "<S> moreover , we show that for each rational  @xmath2 , @xmath5 , @xmath1 voting is fully resistant to bribery attacks , and we establish fixed - parameter tractability of bounded - case control for @xmath1 .    </S>",
    "<S> we also study @xmath1 elections under more flexible models such as microbribery and extended control , we integrate the potential irrationality of voter preferences into many of our results , and we prove our results in both the unique - winner model and the nonunique - winner model . </S>",
    "<S> our vulnerability results for microbribery are proven via a novel technique involving min - cost network flow . </S>"
  ]
}