{
  "article_text": [
    "in this paper we study the multivariate feynman - kac path integration problem .",
    "multivariate feynman - kac path integrals are path integrals over the space of continuous functions from @xmath3 to  @xmath4 , equipped with a wiener measure .",
    "the multivariate feynman - kac path integral is the solution of the initial value problem for the multivariate heat equation , see section [ sec : mvfk ] .",
    "this type of path integral plays a significant role in many fields , e.g. , quantum physics and chemistry , differential equations , and financial mathematics . a brief survey of research concerning path integrals is contained in the introduction of @xcite .",
    "in this paper we continue the research initiated in @xcite , where a new algorithm for computing feynman - kac path integrals was proposed . that paper dealt with the univariate case ( i.e. , with one space variable ) and the algorithm presented there was based on @xmath5-approximation .",
    "an extension of the approach of @xcite to the multivariate case ( with many space variables ) was presented in @xcite .",
    "it turns out that algorithms based on @xmath5-approximation are no longer applicable in the multivariate case .",
    "the multivariate case can be solved by using uniform approximation as a basic building block . in both papers @xcite",
    "the problem was studied in the worst case setting for input functions belonging to a class @xmath6 .",
    "assuming that the uniform approximation problem for the class @xmath6 has worst case complexity of order @xmath7 for some positive @xmath8 it was proved in @xcite that the number of function evaluations required to compute an @xmath1-approximation is roughly of the same order @xmath7 .",
    "we stress that typically @xmath8 depends on the number @xmath0 of space variables and tends to infinity with @xmath0 , in which case we have the curse of dimensionality .    in this paper",
    ", we consider the multivariate feynman - kac path integration problem in the randomized and quantum settings .",
    "we present algorithms that compute an @xmath1-approximation and analyze their cost .",
    "these algorithms are also based on uniform approximation . however , the power of randomization and quantum computation permits the improvement of the worst case complexity bound @xmath9 .",
    "namely , the number of function evaluations required by the randomized algorithm is roughly of order @xmath10 , whereas the number of function evaluations and queries required by the quantum algorithm is roughly of order @xmath11 , see section [ sec : error_analys ] .",
    "we stress that the exponent of @xmath2 in the randomized setting is at most 2 , and in the quantum setting is at most 1 .",
    "in addition to providing the algorithms in the randomized and quantum settings we also study the complexity of multivariate feynman - kac path integration in the randomized and quantum settings . as in @xcite ,",
    "the complexity is bounded from below by the complexity of multivariate weighted integration .",
    "the upper bounds are provided by the costs of the algorithms presented in this paper .    for the class @xmath6 of @xmath12 times continuously differentiable functions we have @xmath13 , and",
    "so the worst case setting suffers form the curse of dimensionality . in the randomized",
    "setting , the complexity is roughly of order @xmath14 , whereas in the quantum setting it is roughly of order @xmath15 . in both cases",
    "the curse of dimensionality is vanquished .",
    "we thus have exponential speedup over the worst case setting . for @xmath16",
    ", we have quadratic speedup of quantum complexity over randomized complexity .",
    "the multivariate feynman - kac formula is the solution of the initial value problem for the heat ( diffusion ) equation @xmath17 here @xmath18 are the initial value function and the potential function , respectively . as usual",
    ", @xmath19 denotes the laplacian .    the solution @xmath20 of ( [ eq : heat1 ] ) and ( [ eq : heat2 ] ) is given by the feynman - kac formula @xmath21 here , @xmath22 is the set of continuous functions @xmath23 such that @xmath24 .",
    "the path integral  ( [ eq : fk - for ] ) is with respect to the @xmath0-dimensional wiener measure  @xmath25 , see @xcite . obviously , ( [ eq : fk - for ] ) holds for functions @xmath26 and @xmath27 for which the path integral exists . in",
    "what follows , we assume that the functions @xmath26 and @xmath27 belong to a class  @xmath6 for which ( [ eq : fk - for ] ) exists .",
    "this class is defined in section [ sec : assum ] .",
    "for a given fixed point @xmath28 and arbitrary functions @xmath29 from the class @xmath30 , we want to compute an @xmath1-approximation of the exact solution @xmath31 of  ( [ eq : fk - for ] ) .",
    "the @xmath1-approximation @xmath32 is computed by an algorithm @xmath33 that uses  @xmath34 function values of @xmath26 and @xmath27 , i.e. , @xmath35      in the worst case setting the error of the algorithm @xmath33 is defined as @xmath36 of function values that are needed to compute an @xmath1-approximation in the worst case setting .",
    "this setting was analyzed in @xcite .      in this",
    "setting we use randomized algorithms and replace the worst case error assurance by an expected assurance . a randomized algorithm",
    "@xmath33 depends on a random element @xmath37 chosen from some probability space @xmath38 .",
    "more precisely , we compute @xmath39 with @xmath40 .",
    "this means that we allow a random choice of a mapping  @xmath41 and sample points @xmath42 , as well as the number @xmath43 of sample points , whose expected value is fixed and equal to @xmath34 .",
    "we measure the randomized error of the algorithm @xmath33 with respect to the @xmath5 norm , i.e. , @xmath44 as before , we want to determine the minimal expected number of function values @xmath45 needed to compute an @xmath1-approximation in the randomized setting .      in the quantum setting we use quantum algorithms with ( deterministic or randomized ) quantum queries and assume that we can also perform function evaluations and arithmetic operations on a classical computer .",
    "these classical operations are used to prepare an input for a quantum algorithm and to transform the outcome of a quantum algorithm to an approximation of the exact solution .",
    "we will be interested in minimizing the total number of quantum queries and function evaluations needed to compute an @xmath1-approximation .    in this section ,",
    "we give a brief overview of a simplified quantum model of computation for continuous problems and describe deterministic and randomized quantum queries .",
    "we refer the reader to @xcite for more detailed information .",
    "we first outline a general framework of the quantum setting .",
    "assume that for a given class @xmath46 of input functions @xmath47 we want to approximate the solution operator @xmath48 with @xmath49 being a normed space whose norm is denoted by @xmath50 .",
    "we will approximate @xmath51 by a quantum algorithm defined below .",
    "first , we transform a given input function @xmath52 by using a classical algorithm  @xmath53 with @xmath54 classical function evaluations and obtain @xmath55 then we use the transformed function @xmath56 as an input to a quantum algorithm .",
    "quantum algorithms are defined as follows .",
    "let @xmath57 be the two dimensional complex vector space .",
    "let @xmath58 be the @xmath59-fold tensor product of @xmath57 , having dimension @xmath60 .",
    "let @xmath61 be a unitary operator of the form @xmath62 with unitary operators @xmath63 and a quantum query @xmath64 , for some @xmath65 .",
    "the deterministic quantum query @xmath64 is defined as in @xcite .",
    "let @xmath66 for some @xmath67 .",
    "then @xmath68 is a unitary operator of the form @xmath69 with @xmath70 and @xmath71 denoting the addition modulo @xmath72 , see again @xcite for a more detailed discussion .",
    "the randomized quantum query is defined in @xcite . in this case , @xmath73 depends on a random element @xmath37 and @xmath74 has the form ( [ eq : det - qquery ] ) with @xmath75 depending on @xmath37 .",
    "this permits the computation of approximate values of @xmath56 at randomized points .",
    "hence in this case the unitary operator @xmath76 depends on a random element @xmath37 and has the form @xmath77 as usual we assume that the initial state is @xmath78 and we compute @xmath79 for deterministic quantum queries and @xmath80 for randomized quantum queries .",
    "then we measure the final state and obtain an outcome @xmath81 with probability @xmath82 knowing the outcome @xmath83 we compute the final result on a classical computer , and the quantum algorithm @xmath33 yields @xmath84 for some @xmath85 or @xmath86 .",
    "in this paper we will be using quantum algorithms with randomized quantum queries .",
    "the error of such an algorithm @xmath33 is defined as @xmath87 where @xmath88 is the expectation over the probability space @xmath38 , and @xmath89 is the expectation with respect to distribution of the quantum algorithm outcomes .",
    "similarly to the other settings , we want to determine the minimal number of random quantum queries and classical function evaluations @xmath90 needed to guarantee that the error does not exceed @xmath1 .",
    "we now briefly comment on the quantum error setting defined by ( [ eq : wor - avg - avg - error ] ) .",
    "let us concentrate for a moment on the randomness introduced by a quantum algorithm , leaving aside randomized queries .",
    "so far , the literature dealing with continuous problems in the quantum setting has mainly considered probabilistic error .",
    "that is , instead of taking an expectation with respect to all possible outcomes of a quantum algorithm ( as @xmath89 in ( [ eq : wor - avg - avg - error ] ) ) , we want an error estimate such that @xmath91 holds with a certain ( high ) probability , for any @xmath92",
    ". obviously these two ways of measuring the error of a quantum algorithm are related .",
    "we choose to study the average error for simplicity .",
    "moreover , the average error is probably more natural when we consider randomized queries .",
    "the multivariate feynman - kac path integration problem in the quantum setting is defined by taking @xmath93 with @xmath94 and @xmath95 .",
    "to assure the existence of the path integral ( [ eq : fk - for ] ) , we need to choose a proper class of input functions @xmath30 , see @xcite .",
    "we assume that @xmath96 is a ball of a linear space @xmath97 for some positive @xmath98 .",
    "we make the following assumptions about the linear space @xmath6 .    1 .",
    "we assume that for every @xmath99 , the functional @xmath100 defined by @xmath101 is continuous , and for arbitrary @xmath102 we have @xmath103 by the fernique theorem , see e.g. ,  @xcite , condition  ( [ eq : cond ] ) holds if there exists @xmath104 such that @xmath105 for @xmath106 approaching infinity , see @xcite for details . here and elsewhere , @xmath107 is the euclidean norm in  @xmath4 .",
    "we assume that @xmath6 is continuously embedded into @xmath108 .",
    "that is , @xmath109 and there exists a positive @xmath110 such that @xmath111 this assumption permits us to relate the multivariate feynman - kac path integration problem to uniform approximation in the worst case setting , see again @xcite .",
    "+ by uniform approximation we mean the approximation of the embedding operator @xmath112 , @xmath113 in the norm of @xmath108 .",
    "let @xmath114 denote the minimal number of function values needed to compute an @xmath1-approximation in the worst case setting . as we shall see in section [ sec : var ] , uniform approximation also plays a significant role in the randomized and quantum settings .",
    "we assume that @xmath115 for some positive number @xmath8 .    the linear space @xmath6 is characterized by the exponent @xmath8 .",
    "usually @xmath8 depends on the smoothness and the number of variables of functions in @xmath6 , see section [ sec : examples ] .",
    "in this section we briefly recall some results from @xcite which are needed for our analysis .    without loss of generality",
    "we can assume @xmath116 in ( [ eq : fk - for ] ) .",
    "then we can express the path integral as a series of multivariate integrals @xmath117 where @xmath118 with @xmath119 and @xmath120 note that the integral ( [ eq : sk+1 ] ) depends on the input functions @xmath26 and @xmath27 only through the product @xmath121 and the weight functions @xmath122 can be computed in advance , albeit with difficulty .",
    "let us recall also that @xmath123",
    "in this section we present algorithms approximating one term of the series ( [ eq : series ] ) . to make the notation more clear we define a weighted integration operator @xmath124 where @xmath125 is an integrable function .",
    "we can then rewrite one term of the series  ( [ eq : series ] ) as @xmath126    in both the randomized and quantum settings , we shall use deterministic uniform approximation of the function @xmath127 . to utilize the power of randomization and/or quantum computation , we will apply the known technique of variance reduction .",
    "smolyak s algorithm is a powerful tool for computing an @xmath1-approximation of tensor product problems . for @xmath128 ,",
    "smolyak s algorithm is of the form @xmath129 for some @xmath130 and @xmath131 .",
    "it is proven in ( * ? ? ?",
    "* lemma  2 ) that @xmath132 where @xmath133 for some @xmath134 . here",
    "@xmath135 denotes @xmath136 , the right hand side of ( [ eq : tempcost ] ) is defined to be @xmath137 when @xmath138 .",
    "the idea underlying variance reduction idea is as follows .",
    "first we compute @xmath139 using @xmath140 function values",
    ". then we compute @xmath141 observe that the functions @xmath142 do not depend on the input functions @xmath26 and",
    "@xmath27 so the integrals @xmath143 can be precomputed .",
    "we stress that @xmath144 and @xmath145 are deterministic .",
    "we will use randomized or quantum algorithm to approximate the multivariate integrals @xmath146 since the error depends on the norm @xmath147 , which is small , we can do this efficiently .",
    "we present the details in the following two sections .      to make formulas simpler we define @xmath148 we use the randomized algorithm of the form @xmath149 here @xmath150 denotes the classical monte carlo algorithm with @xmath151 randomized sample points .",
    "randomized sample points are chosen with respect to the density @xmath152 which is indicated by the random parameter @xmath153 .",
    "using the well known error formula for the classical monte carlo algorithm , we conclude that @xmath154 with @xmath155    clearly , from ( [ eq : smolyak_error ] ) and then from ( [ eq : fb ] ) , ( [ eq : g_norm ] ) we get @xmath156 this yields the error estimate @xmath157 and the total number of function evaluations is @xmath158      the structure of our quantum algorithm is similar to randomized one , having the form @xmath159 with , as before , @xmath160 . here",
    ", we use a quantum algorithm @xmath161 , with @xmath162 randomized quantum queries , that approximates the classical monte carlo algorithm ( [ eq : mc ] ) . in @xcite the problem of approximating @xmath163 was analyzed for boolean functions @xmath164 . using the technique of reducing the summation problem for bounded real functions to the summation problem for boolean functions as in @xcite , we see that a result similar to that of @xcite holds . from @xcite and ( [ eq : smolyak_error ] ) we conclude that @xmath165 by integrating over @xmath38 , we obtain @xmath166 the total number of queries and function evaluations is @xmath167 we stress that this number does not depend on @xmath151 , which is only used for the definition of the monte carlo algorithm .",
    "we now estimate the total error as @xmath168 this , by ( [ eq : rand - total - err ] ) and ( [ eq : quant - rand - err ] ) , yields @xmath169 letting @xmath170 we get the error bound @xmath171 using @xmath172 function values and quantum queries . for the sake of convenience",
    "we denote @xmath173",
    "based on the previous two sections we are ready to present algorithms computing an @xmath1-approximation of multivariate feynman - kac path integral .",
    "we approximate consecutive terms of the series @xmath174 by the algorithms @xmath175 with the accuracies @xmath176 and @xmath177 in the corresponding settings being @xmath178 and the number of randomized sample points @xmath179 and quantum queries @xmath180 being @xmath181    the final forms of randomized and quantum algorithms approximating @xmath182 are @xmath183 where the finite integers @xmath184 and @xmath185 will be determined in the next section .      from ( [ eq : rand - total - err ] ) , ( [ eq : quant - total - err ] ) and ( [ eq : epsil ] ) , ( [ eq : kappa&delta ] ) , it is easy to check that the error bounds @xmath186 and @xmath187 hold .",
    "it is also easy to see that we need to approximate only a few terms .",
    "indeed , for  @xmath59 approaching infinity , we have @xmath176 and @xmath177 also tending to infinity .",
    "note that by ( [ eq : embed ] ) , ( [ eq : rand - total - err ] ) and ( [ eq : quant - total - err ] ) we see that for @xmath188 with @xmath110 being the embedding constant in ( [ eq : embed ] ) , the deterministic zero algorithms provide sufficient accuracy .",
    "thus , we need to use the algorithms @xmath189 and @xmath190 only for @xmath191 . hence , we get @xmath192 and @xmath193 .    the bounds ( [ eq : rand - sub - err ] ) and ( [ eq : quant - sub - err ] ) yield @xmath194 this means that the algorithms @xmath195 and @xmath196 compute @xmath1-approximations of the multivariate feynman - kac path integral in the randomized and quantum settings respectively .",
    "in this section we derive estimates on the numbers of function values and quantum queries @xmath197 and @xmath198 of the algorithms @xmath195 and @xmath196 . by the bounds ( [ eq : tempcost ] ) , ( [ eq : rand - cost - bound ] ) and ( [ eq : quant - cost - bound ] ) we get the obvious estimates @xmath199 and @xmath200 we can now use an argument similar to that in the proof of ( * ? ? ? * theorem 1 ) to show that @xmath201 for all @xmath202 .",
    "thus we finally get @xmath203 for all @xmath202 .",
    "an analysis of the complexity of the multivariate feynman - kac path integration in randomized and quantum settings is quite similar to the one presented in @xcite and @xcite .",
    "we only point out essential differences .",
    "lower bounds for our problem complexities are provided by the complexities of multivariate weighted integration problem . by this problem",
    "we mean an approximation of the integration operator @xmath204 define by @xmath205    consider a randomized algorithm @xmath206 that uses @xmath34 function values and approximates the integration operator @xmath207 .",
    "we say that this algorithm computes an @xmath1-approximation of the weighted integral if @xmath208 we denote by @xmath209 the minimal number of function values needed to compute an @xmath1-approximation in the randomized setting .",
    "consider a quantum algorithm @xmath210 that uses @xmath34 randomized quantum queries and approximates the operator @xmath207 .",
    "we say that @xmath210 computes an @xmath1-approximation of the weighted integral if @xmath211 we define @xmath212 as the minimal number of quantum queries needed to compute an @xmath1-approximation .    as in @xcite",
    ", we can reduce multivariate feynman - kac path integration to multivariate integration with a gaussian weight by taking @xmath213 , since @xmath214 .",
    "moreover , ( [ eq : fb ] ) and ( [ eq : embed ] ) imply that @xmath215      obvious estimates on the complexity of the multivariate feynman - kac path integration are provided by the cost of the algorithms derived in section [ sec : final_algo ] .",
    "thus , by ( [ eq : cost - phi - rand ] ) and ( [ eq : cost - phi - quant ] ) we get @xmath216 for all @xmath202 , where @xmath8 is the exponent of the uniform approximation problem complexity for the space @xmath6 containing the class @xmath30 , i.e. , @xmath217 see also section [ sec : assum ] .    from the previous two sections we can see when the randomized and quantum algorithms proposed in this paper are almost optimal .",
    "this is the case for the classes of input functions for which randomized and quantum complexities of the integration problem defined in section [ sec : lower ] are of orders @xmath218 and @xmath219 respectively .",
    "in this section we present two examples of function classes @xmath30 satisfying the assumptions from section [ sec : assum ] and compute lower and upper bounds of of the complexities of the multivariate feynman - kac path integration .",
    "we use one of the results from @xcite , which relates the complexity of the approximation of functions defined over a finite domain to the complexity of the weighted approximation of functions over the whole space @xmath4 .",
    "let @xmath220 for simplicity , we consider a weight function @xmath221 , given by @xmath222 which decays exponentially .",
    "by @xcite there exists an algorithm @xmath223 that computes a weighted @xmath1-approximation of the function @xmath224 , i.e. , @xmath225 with @xmath226 let @xmath227    we can use the algorithm @xmath228 to construct an algorithm @xmath229 approximating functions from @xmath6 .",
    "indeed , define @xmath230 then for @xmath231 , we have @xmath232 as claimed .",
    "we have to check the three remaining conditions which are to be satisfied by @xmath6 , namely , the continuity of function evaluation as well as conditions .",
    "it is easy to see that for @xmath233 and @xmath234 we have @xmath235 and so function evaluation is continuous",
    ". conditions ( [ eq : cond ] ) and ( [ eq : embed ] ) follow immediately from this continuity .    the algorithms @xmath195 and @xmath196 compute an @xmath1-approximation of the multivariate feynman - kac path integration problem for the class @xmath30 with the number of function evaluations and/or quantum queries roughly @xmath14 and @xmath15 , respectively . however , the factors appearing in the big @xmath236 notation depend on @xmath0 and this dependence is exponential , see sections [ sec : error_analys ] and [ sec : cost ] . for @xmath16 the exponents @xmath237 for the randomized algorithm and @xmath238 for the quantum algorithm are close to @xmath239 and @xmath240 .",
    "in fact , the orders @xmath239 and @xmath240 can be obtained by the use of the classical monte carlo algorithm ( without variance reduction ) .",
    "then , the factors multiplying @xmath241 and @xmath2 are independent of @xmath0 for the class @xmath30 so the curse of dimensionality present in the worst case setting ( see @xcite ) is indeed broken when we switch to the randomized or quantum settings .    to obtain lower bounds on the multivariate feynman - kac path integration problem in the class @xmath30 we may switch to the integration problem as in section  [ sec : lower ] .",
    "we observe that this integration problem is not easier than the uniform integration over the unit cube @xmath242^d } f(\\mathbf{z})\\ , d\\mathbf{z}\\ ] ] by taking functions with support @xmath243^d$ ] .",
    "it is known that the uniform integration problem has the randomized complexity @xmath244 , see @xcite , and quantum complexity @xmath245 , see @xcite .",
    "this shows that the algorithms @xmath195 and @xmath196 are roughly optimal for the class @xmath30 .",
    "this example was considered in @xcite .",
    "we repeat all details for the reader s convenience . following",
    "@xcite we consider the class @xmath246 of @xmath247-periodic functions @xmath248^d\\rightarrow { \\mathbb{r}}^d$ ] satisfying the condition @xmath249^d ) \\\\ f(\\mathbf{x})=\\frac{1}{2 \\pi }    \\int_0^{2 \\pi } { \\varphi}_j(x_1,\\ldots , x_j - t,\\ldots , x_d)\\,f_r(t)\\,dt,\\end{gathered}\\ ] ] where @xmath250 and @xmath251 the norm in the class @xmath246 is defined as @xmath252^d)},\\ ] ] where the @xmath253 are functions from the representation ( [ eq : con ] ) of the function @xmath164 . in @xcite , there is a linear algorithm @xmath229 that computes a uniform @xmath1-approximation of functions from the class  @xmath246 , i.e. , that @xmath254^d ) } \\le { \\varepsilon}\\ , \\|f\\|_{{\\mathbb{\\overline{f } } } }    \\qquad \\forall f \\in { \\mathbb{\\overline{f}}},\\ ] ] with the cost of order @xmath255 .",
    "denote by @xmath6 the class of functions @xmath256 that are periodic extensions of functions from @xmath246 .",
    "let @xmath257^d}\\|_{{\\mathbb{\\overline{f}}}}$ ] .",
    "obviously , problem of the _ uniform _ approximation for the class  @xmath6 can be obviously solved using the algorithm mentioned above with the same cost as for the class  @xmath246 .",
    "similarly to the previous example , we have to check the three conditions of section [ sec : assum ] .",
    "it is easy to see that for @xmath233 , @xmath258 , and arbitrary @xmath259 we have @xmath260^d}\\|_{l^\\infty([0,2\\pi]^d)}\\le c \\ ,     \\|{\\varphi}_j\\|_{l^\\infty([-2\\pi,2\\pi]^d)},\\ ] ] with @xmath261 .",
    "hence @xmath262 and so function evaluation is continuous .",
    "the remaining conditions follow immediately .",
    "thus the algorithms @xmath195 and @xmath196 , based on the algorithm @xmath229 described above , compute an @xmath1-approximation of the multivariate feynman - kac path integral with a number of function evaluations and/or quantum queries roughly @xmath14 and @xmath15 , respectively . using an argument similar to that of the previous example ,",
    "we conclude that the algorithms @xmath195 and @xmath196 are roughly optimal for the class @xmath30 .",
    "g. brassard , p. hyer , m. mosca , a. tapp , quantum amplitude estimation and amplification , _ quantum computation and information _ , s. j. lomonaco and h. e. brandt , eds . , american math . society , 2002 , http://arxiv.org/quant-ph/0005055 , 2000 .",
    "s. heinrich , m. kwas , h. woniakowski , quantum boolean summation with repetitions in the worst - average setting , to appear in the proceedings of the 5th international conference on monte carlo and quasi - monte carlo methods , singapore 2002 .",
    "a. nayak and f. wu , the quantum query complexity of approximating the median and related statistics , proceedings of the 31th annual acm symposium on the theory of computing ( stoc ) , 384 - 393 , 1999 , http://arxiv.org/quant-ph/9804066 , 1998 ."
  ],
  "abstract_text": [
    "<S> the feynman - kac path integration problem was studied in the worst case setting by plaskota et al . </S>",
    "<S> ( j. comp . </S>",
    "<S> phys . </S>",
    "<S> 164 ( 2000 ) 335 ) for the univariate case and by kwas and li ( j. comp . 19 </S>",
    "<S> ( 2003 ) 730 ) for the multivariate case with @xmath0 space variables . in this paper </S>",
    "<S> we consider the multivariate feynman - kac path integration problem in the randomized and quantum settings . for smooth multivariate functions , </S>",
    "<S> it was proven in kwas and li ( 2003 ) that the classical worst case complexity suffers from the curse of dimensionality in @xmath0 . </S>",
    "<S> we show that in both the randomized and quantum settings the curse of dimensionality is vanquished , i.e. , the number of function evaluations and/or quantum queries required to compute an @xmath1-approximation has a bound independent of @xmath0 and depending polynomially on @xmath2 . </S>",
    "<S> the exponents of these polynomials are at most 2 in the randomized setting and at most 1 in the quantum setting . </S>",
    "<S> hence we have exponential speedup over the classical worst case setting and quadratic speedup of the quantum setting over the randomized setting . </S>",
    "<S> however , both the randomized and quantum algorithms presented here still require extensive precomputing , similar to the algorithms of plaskota et al . </S>",
    "<S> ( 2000 ) and kwas and li ( 2003 ) . </S>"
  ]
}