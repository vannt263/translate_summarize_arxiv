{
  "article_text": [
    "graphic lambda calculus consists of a class of graphs endowed with moves between them .",
    "it might be considered a visual language in the sense of erwig @xcite .",
    "the name `` graphic lambda calculus '' comes from the fact that it can be used for representing terms and reductions from untyped lambda calculus .",
    "it s main move is called `` graphic beta move '' for it s relation to the beta reduction in lambda calculus .",
    "however , the graphic beta move can be applied outside the `` sector '' of untyped lambda calculus , and the graphic lambda calculus can be used for other purposes than the one of visual representing lambda calculus .    for other visual , diagrammatic representation of lambda calculus see the vex language @xcite , or david keenan s @xcite .",
    "the motivation for introducing graphic lambda calculus comes from the study of emergent algebras .",
    "in fact , my goal is to build eventually a logic system which can be used for the formalization of certain `` computations '' in emergent algebras , which can be applied then for a discrete differential calculus which exists for metric spaces with dilations , comprising riemannian manifolds and sub - riemannian spaces with very low regularity .",
    "emergent algebras are a generalization of quandles , namely an emergent algebra is a family of idempotent right quasigroups indexed by the elements of an abelian group , while quandles are self - distributive idempotent right quasigroups . tangle diagrams decorated by quandles or racks are a well known tool in knot theory @xcite @xcite .",
    "it is notable to mention the work of kauffman @xcite , where the author uses knot diagrams for representing combinatory logic , thus untyped lambda calculus .",
    "also meredith and snyder@xcite associate to any knot diagram a process in pi - calculus ,    is there any common ground between these three apparently separated field , namely differential calculus , logic and tangle diagrams ? as a first attempt for understanding this , i proposed @xmath0-scale calculus @xcite , which is a formalism which contains both untyped lambda calculus and emergent algebras .",
    "also , in the paper @xcite i proposed a formalism of decorated tangle diagrams for emergent algebras and i called `` computing with space '' the various manipulations of these diagrams with geometric content .",
    "nevertheless , in that paper i was not able to give a precise sense of the use of the word `` computing '' .",
    "i speculated , by using analogies from studies of the visual system , especially the `` brain a geometry engine '' paradigm of koenderink @xcite , that , in order for the visual front end of the brain to reconstruct the visual space in the brain , there should be a kind of `` geometrical computation '' in the neural network of the brain akin to the manipulation of decorated tangle diagrams described in our paper .",
    "i hope to convince the reader that graphic lambda calculus gives a rigorous answer to this question , being a formalism which contains , in a sense , lambda calculus , emergent algebras and tangle diagrams formalisms .",
    "[ [ acknowledgement . ] ] acknowledgement .",
    "+ + + + + + + + + + + + + + + +    this work was supported by a grant of the romanian national authority for scientific research , cncs ",
    "uefiscdi , project number pn - ii - id - pce-2011 - 3 - 0383 .",
    "an oriented graph is a pair @xmath1 , with @xmath2 the set of nodes and @xmath3 the set of edges .",
    "let us denote by @xmath4 the map which associates to any node @xmath5 the set of adjacent edges @xmath6 .",
    "in this paper we work with locally planar graphs with decorated nodes , i.e. we shall attach to a graph @xmath1 supplementary information :    1 .   a function @xmath7 which associates to any node @xmath5 an element of the `` graphical alphabet '' @xmath8 ( see definition [ defalp ] ) , 2 .",
    "a cyclic order of @xmath6 for any @xmath5 , which is equivalent to giving a local embedding of the node @xmath9 and edges adjacent to it into the plane .",
    "we shall construct a set of locally planar graphs with decorated nodes , starting from a graphical alphabet of elementary graphs . on the set of graphs we shall define local transformations , or moves .",
    "global moves or conditions will be then introduced .",
    "the graphical alphabet contains the elementary graphs , or gates , denoted by @xmath0 , @xmath10 , @xmath11 , @xmath12 , and for any element @xmath13 of the commutative group @xmath14 , a graph denoted by @xmath15 . here",
    "are the elements of the graphical alphabet :    1 .",
    "@xmath0 graph , @xmath10 graph , 2 .",
    "@xmath11 graph , @xmath15 graph , 3 .",
    "@xmath12 graph .    with the exception of the @xmath12 , all other elementary graphs have three edges .",
    "the graph @xmath12 has only one edge .",
    "[ defalp ]    there are two types of `` fork '' graphs , the @xmath0 graph and the @xmath10 graph , and two types of `` join '' graphs , the @xmath11 graph and the @xmath15 graph .",
    "further i briefly explain what are they supposed to represent and why they are needed in this graphic formalism .",
    "the @xmath0 gate corresponds to the lambda abstraction operation from untyped lambda calculus .",
    "this gate has one input ( the entry arrow ) and two outputs ( the exit arrows ) , therefore , at first view , it can not be a graphical representation of an operation . in untyped lambda calculus",
    "the @xmath0 abstraction operation has two inputs , namely a variable name @xmath16 and a term @xmath8 , and one output , the term @xmath17 .",
    "there is an algorithm , presented in section [ constru ] , which transforms a lambda calculus term into a graph made by elementary gates , such that to any lambda abstraction which appears in the term corresponds a @xmath0 gate .",
    "the @xmath10 gate corresponds to a fan - out gate .",
    "it is needed because the graphic lambda calculus described in this article does not have variable names .",
    "@xmath10 gates appear in the process of elimination of variable names from lambda terms , in the algorithm previously mentioned .",
    "another justification for the existence of two fork graphs is that they are subjected to different moves : the @xmath0 gate appears in the graphic beta move , together with the @xmath11 gate , while the @xmath10 gate appears in the fan - out moves .",
    "thus , the @xmath0 and @xmath10 gates , even if they have the same topology , they are subjected to different moves , which in fact characterize their `` lambda abstraction''-ness and the `` fan - out''-ness of the respective gates . the alternative , which consists into using only one , generic , fork gate , leads to the identification , in a sense , of lambda abstraction with fan - out , which would be confusing .",
    "the @xmath11 gate corresponds to the application operation from lambda calculus .",
    "the algorithm from section [ constru ] associates a @xmath11 gate to any application operation used in a lambda calculus term .",
    "the @xmath15 gate corresponds to an idempotent right quasigroup operation , which appears in emergent algebras , as an abstractization of the geometrical operation of taking a dilation ( of coefficient @xmath13 ) , based at a point and applied to another point .",
    "as previously , the existence of two join gates , with the same topology , is justified by the fact that they appear in different moves .",
    "[ [ the - set - graph . ] ] 1 . the set graph .",
    "+ + + + + + + + + + + + + + + + +    we construct the set of graphs @xmath18 over the graphical alphabet by grafting edges of a finite number of copies of the elements of the graphical alphabet .",
    "@xmath18 is the set of graphs obtained by grafting edges of a finite number of copies of the elements of the graphical alphabet . during the grafting procedure ,",
    "we start from a set of gates and we add , one by one , a finite number of gates , such that , at any step , any edge of any elementary graph is grafted on any other free edge ( i.e. not already grafted to other edge ) of the graph , with the condition that they have the same orientation .    for any node of the graph , the local embedding into the plane is given by the element of the graphical alphabet which decorates it .",
    "the set of free edges of a graph @xmath19 is named the set of leaves @xmath20 .",
    "technically , one may imagine that we complete the graph @xmath19 by adding to the free extremity of any free edge a decorated node , called `` leaf '' , with decoration `` in '' or `` out '' , depending on the orientation of the respective free edge .",
    "the set of leaves @xmath20 thus decomposes into a disjoint union @xmath21 of in or out leaves .",
    "moreover , we admit into @xmath22 arrows without nodes ,   , called wires or lines , and loops ( without nodes from the elementary graphs , nor leaves )        graphs in @xmath18 can be disconnected .",
    "any graph which is a finite reunion of lines , loops and assemblies of the elementary graphs is in @xmath22 .",
    "[ [ local - moves . ] ] 2 . local moves .",
    "+ + + + + + + + + + + + + + +    these are transformations of graphs in @xmath18 which are local , in the sense that any of the moves apply to a limited part of a graph , keeping the rest of the graph unchanged .",
    "we may define a local move as a rule of transformation of a graph into another of the following form .",
    "first , a subgraph of a graph @xmath23 in @xmath18 is any collection of nodes and/or edges of @xmath23 .",
    "it is not supposed that the mentioned subgraph must be in @xmath18 .",
    "also , a collection of some edges of @xmath23 , without any node , count as a subgraph of @xmath23 .",
    "thus , a subgraph of @xmath23 might be imagined as a subset of the reunion of nodes and edges of @xmath23 .    for any natural number @xmath9 and any graph @xmath23 in @xmath18 , let @xmath24 be the collection of subgraphs @xmath25 of the graph @xmath23 which have the sum of the number of edges and nodes less than or equal to @xmath9 .",
    "a local move has the following form : there is a number @xmath9 and a condition @xmath26 which is formulated in terms of graphs which have the sum of the number of edges and nodes less than or equal to @xmath9 , such that for any graph @xmath23 in @xmath18 and for any @xmath27 , if @xmath26 is true for @xmath25 then transform @xmath25 into @xmath28 , where @xmath28 is also a graph which have the sum of the number of edges and nodes less than or equal to @xmath9 .",
    "graphically we may group the elements of the subgraph , subjected to the application of the local rule , into a region encircled with a dashed closed , simple curve .",
    "the edges which cross the curve ( thus connecting the subgraph @xmath25 with the rest of the graph ) will be numbered clockwise .",
    "the transformation will affect only the part of the graph which is inside the dashed curve ( inside meaning the bounded connected part of the plane which is bounded by the dashed curve ) and , after the transformation is performed , the edges of the transformed graph will connect to the graph outside the dashed curve by respecting the numbering of the edges which cross the dashed line .",
    "however , the grouping of the elements of the subgraph has no intrinsic meaning in graphic lambda calculus .",
    "it is just a visual help and it is not a part of the formalism . as a visual help ,",
    "i shall use sometimes colors in the figures .",
    "the colors , as well , do nt have any intrinsic meaning in the graphic lambda calculus .",
    "[ [ graphic - beta - move . ] ] 2.1 .",
    "graphic @xmath29 move .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    this is the most important move , inspired by the @xmath29-reduction from lambda calculus , see theorem [ lambdathm ] , part ( d ) .",
    "the labels `` 1 , 2 , 3 , 4 '' are used only as guides for gluing correctly the new pattern , after removing the old one . as with the encircling dashed curve , they have no intrinsic meaning in graphic lambda calculus .",
    "this `` sewing braids '' move will be used also in contexts outside of lambda calculus !",
    "it is the most powerful move in this graphic calculus .",
    "a primitive form of this move appears as the re - wiring move ( w1 ) ( section 3.3 , p. 20 and the last paragraph and figure from section 3.4 , p. 21 in @xcite ) .",
    "an alternative notation for this move is the following :        a move which looks very much alike the graphic beta move is the unzip operation from the formalism of knotted trivalent graphs , see for example the paper @xcite section 3 . in order to see this ,",
    "let s draw again the graphic beta move , this time without labeling the arrows :        the unzip operation acts only from left to right in the following figure .",
    "remarkably , it acts on trivalent graphs ( but not oriented ) .",
    "let us go back to the graphic beta move and remark that it does not depend on the particular embedding in the plane .",
    "for example , the intersection of the `` 1,3 '' arrow with the `` 4,2 '' arrow is an artifact of the embedding , there is no node there .",
    "intersections of arrows have no meaning , remember that we work with graphs which are locally planar , not globally planar .",
    "the graphic beta move goes into both directions . in order to apply the move",
    ", we may pick a pair of arrows and label them with `` 1,2,3,4 '' , such that , according to the orientation of the arrows , `` 1 '' points to `` 3 '' and `` 4 '' points to `` 2 '' , without any node or label between `` 1 '' and `` 3 '' and between `` 4 '' and `` 2 '' respectively . then , by a graphic beta move , we may replace the portions of the two arrows which are between `` 1 '' and `` 3 '' , respectively between `` 4 '' and `` 2 '' , by the pattern from the lhs of the figure .",
    "the graphic beta move may be applied even to a single arrow , or to a loop . in the next figure",
    "we see three applications of the graphic beta move .",
    "they illustrate the need for considering loops and wires as members of @xmath22 .",
    "also , we can apply in different ways a graphic beta move , to the same graph and in the same place , simply by using different labels `` 1 '' , ... `` 4 '' ( here @xmath8 , @xmath30 , @xmath26 , @xmath31 are graphs in @xmath18 ) :        a particular case of the previous figure is yet another justification for having loops as elements in @xmath22 .",
    "these two applications of the graphic beta move may be represented alternatively like this :        [ [ co - assoc - move . ] ] 2.2 .",
    "( co - assoc ) move .",
    "+ + + + + + + + + + + + + + + + + + + + +    this is the `` co - associativity '' move involving the @xmath10 graphs .",
    "we think about the @xmath10 graph as corresponding to a fan - out gate .        by using co - assoc moves",
    ", we can move between any two binary trees formed only with @xmath32 gates , with the same number of output leaves .",
    "[ [ co - comm - move . ] ] 2.3 .",
    "( co - comm ) move .",
    "+ + + + + + + + + + + + + + + + + + + +    this is the `` co - commutativity '' move involving the @xmath10 gate .",
    "it will be not used until the section [ secbraid ] concerning knot diagrams .",
    "[ [ a - r1a - move . ] ] 2.3.a ( r1a ) move .",
    "+ + + + + + + + + + + + + + + + +    this move is imported from emergent algebras .",
    "explanations are given in section [ semer ] .",
    "it involves an @xmath10 graph and a @xmath15 graph , with @xmath33 .",
    "[ [ b - r1b - move . ] ] 2.3.b ( r1b ) move .",
    "+ + + + + + + + + + + + + + + + +    the move r1b ( also related to emergent algebras ) is this :        [ [ r2-move . ] ] 2.4 .",
    "( r2 ) move .",
    "+ + + + + + + + + + + + + + +    this corresponds to the reidemeister ii move for emergent algebras .",
    "it involves an @xmath10 graph and two other : a @xmath15 and a @xmath34 graph , with @xmath35 .",
    "this move appears in section 3.4 , p. 21 @xcite , with the supplementary name `` triangle move '' .",
    "[ [ ext2-move . ] ] 2.5 .",
    "( ext2 ) move .",
    "+ + + + + + + + + + + + + + + + +    this corresponds to the rule ( ext2 ) from @xmath0-scale calculus , it expresses the fact that in emergent algebras the operation indexed with the neutral element @xmath36 of the group @xmath14 has the property @xmath37 .",
    "[ [ local - pruning . ] ] 2.6 .",
    "local pruning .",
    "+ + + + + + + + + + + + + + + + + + +    local pruning moves are local moves which eliminate `` dead '' edges .",
    "notice that , unlike the previous moves , these are one - way ( you can eliminate dead edges , but not add them to graphs ) .",
    "[ [ global - moves - or - conditions . ] ] global moves or conditions .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    global moves are those which are not local , either because the condition @xmath26 applies to parts of the graph which may have an arbitrary large sum or edges plus nodes , or because after the move the graph @xmath28 which replaces the graph @xmath25 has an arbitrary large sum or edges plus nodes .",
    "[ [ ext1-move . ] ] 2.7 .",
    "( ext1 ) move .",
    "+ + + + + + + + + + + + + + + + +    this corresponds to the rule ( ext1 ) from @xmath0-scale calculus , or to @xmath38-reduction in lambda calculus ( see theorem [ lambdathm ] , part ( e ) for details ) .",
    "it involves a @xmath0 graph ( think about the @xmath0 abstraction operation in lambda calculus ) and a @xmath11 graph ( think about the application operation in lambda calculus ) .",
    "the rule is : if there is no oriented path from `` 2 '' to `` 1 '' , then the following move can be performed .",
    "[ [ global - fan - out - move . ] ] 2.8 .",
    "( global fan - out ) move .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    this is a global move , because it consists in replacing ( under certain circumstances ) a graph by two copies of that graph .    the rule is : if a graph in @xmath19 has a @xmath10 bottleneck , that is if we can find a sub - graph @xmath39 connected to the rest of the graph @xmath23 only through a @xmath10 gate , then we can perform the move explained in the next figure , from the left to the right .",
    "conversely , if in the graph @xmath23 we can find two identical subgraphs ( denoted by @xmath8 ) , which are in @xmath18 , which have no edge connecting one with another and which are connected to the rest of @xmath23 only through one edge , as in the rhs of the figure , then we can perform the move from the right to the left .",
    "remark that ( global fan - out ) trivially implies ( co - comm ) .",
    "( as an local rule alternative to the global fan - out , we might consider the following .",
    "fix a number @xmath40 and consider only graphs @xmath41 which have at most @xmath40 ( nodes + arrows ) .",
    "the @xmath40 local fan - out move is the same as the global fan - out move , only it applies only to such graphs @xmath41 .",
    "this local fan - out move does not imply co - comm . )    [ [ global - pruning . ] ] 2.9 . global pruning .",
    "+ + + + + + + + + + + + + + + + + + + +    this a global move which eliminates `` dead '' edges .",
    "the rule is : if a graph in @xmath19 has a @xmath12 ending , that is if we can find a sub - graph @xmath39 connected only to a @xmath12 gate , with no edges connecting to the rest of @xmath23 , then we can erase this graph and the respective @xmath12 gate .",
    "the global pruning may be needed because of the @xmath0 gates , which can not be removed only by local pruning .",
    "[ [ elimination - of - loops . ] ] 2.10 .",
    "elimination of loops .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    it is possible that , after using a local or global move , we obtain a graph with an arrow which closes itself , without being connected to any node .",
    "here is an example , concerning the application of the graphic @xmath29 move .",
    "we may erase any such loop , or add one .",
    "[ [ lambdagraphs . ] ] @xmath0graphs .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + +    the edges of an elementary graph @xmath0 can be numbered unambiguously , clockwise , by 1 , 2 , 3 , such that 1 is the number of the entrant edge .",
    "a graph @xmath19 is a @xmath0-graph , notation @xmath42 , if :    1 .   it does not have @xmath15 gates , 2 .   for any node @xmath0 any oriented path in @xmath23 starting at the edge 2 of this node can be completed to a path which either terminates in a graph @xmath12 , or else terminates at the edge 1 of this node .",
    "the condition @xmath42 is global , in the sense that in order to decide if @xmath42 we have to examine parts of the graph which may have an arbitrary large sum or edges plus nodes .",
    "here i show how to associate to a lambda term a graph in @xmath18 , then i use this to show that @xmath29-reduction in lambda calculus transforms into the @xmath29 rule for @xmath18 .",
    "( thanks to morita yasuaki for some corrections . )    indeed , to any term @xmath43 ( where @xmath44 is the set of lambda terms over the variable set @xmath45 ) we associate its syntactic tree .",
    "the syntactic tree of any lambda term is constructed by using two gates , one corresponding to the @xmath0 abstraction and the other corresponding to the application .",
    "we draw syntactic trees with the leaves ( elements of @xmath45 ) at the bottom and the root at the top .",
    "we shall use the following notation for the two gates : at the left is the gate for the @xmath0 abstraction and at the right is the gate for the application .",
    "remark that these two gates are from the graphical alphabet of @xmath18 , but the syntactic tree is decorated : at the bottom we have leaves from @xmath45 . also , remark the peculiar orientation of the edge from the left ( in tree notation convention ) of the @xmath0 gate . for the moment",
    ", this orientation is in contradiction with the implicit orientation ( from down - up ) of edges of the syntactic tree , but soon this matter will become clear .    we shall remove all leaves decorations , with the price of introducing new gates , namely @xmath10 and @xmath12 gates .",
    "this will be done in a sequence of steps , detailed further .",
    "take the syntactic tree of @xmath43 , drawn with the mentioned conventions ( concerning gates and the positioning of leaves and root respectively ) .",
    "we take as examples the following five lambda terms : @xmath46 , @xmath47 , @xmath48 , @xmath49 and @xmath50 .    [",
    "[ step-1 . ] ] step 1 .",
    "+ + + + + + +    elimination of bound variables , part i. any leaf of the tree is connected to the root by an unique path .",
    "start from the leftmost leaf , perform the algorithm explained further , then go to the right and repeat until all leaves are exhausted .",
    "we initialize also a list @xmath51 of bound variables .",
    "take a leaf , say decorated with @xmath52 . to this leaf",
    "is associated a word ( a list ) which is formed by the symbols of gates which are on the path which connects ( from the bottom - up ) the leaf with the root , together with information about which way , left ( l ) or right ( r ) , the path passes through the gates .",
    "such a word is formed by the letters @xmath53 , @xmath54 , @xmath55 , @xmath56 .",
    "if the first letter is @xmath53 then add to the list @xmath30 the pair @xmath57 formed by the variable name @xmath16 , and the associated word ( describing the path to follow from the respective leaf to the root ) . then pass to a new leaf .",
    "else continue along the path to the roof .",
    "if we arrive at a @xmath0 gate , this can happen only coming from the right leg of the @xmath0 gate , thus we can find only the letter @xmath54",
    ". in such a case look at the variable @xmath58 which decorates the left leg of the same @xmath0 gate .",
    "if @xmath59 then add to the syntactic tree a new edge , from @xmath58 to @xmath16 and proceed further along the path , else proceed further .",
    "if the root is attained then pass to next leaf .",
    "examples : the graphs associated to the mentioned lambda terms , together with the list of bound variables , are the following .    1 .",
    "@xmath46 has @xmath60 , @xmath47 has @xmath61 , @xmath62 has @xmath63 .",
    "+    2 .   @xmath49 has @xmath64 , @xmath50 has @xmath64",
    ". +     [ [ step-2 . ] ] step 2 .",
    "+ + + + + + +    elimination of bound variables , part ii .",
    "we have now a list @xmath30 of bound variables .",
    "if the list is empty then go to the next step .",
    "else , do the following , starting from the first element of the list , until the list is finished .",
    "an element , say @xmath57 , of the list , is either connected to other leaves by one or more edges added at step 1 , or not .",
    "if is not connected then erase the variable name with the associated path @xmath65 and replace it by a @xmath12 gate .",
    "if it is connected then erase it , replace it by a tree formed by @xmath10 gates , which starts at the place where the element of the list were before the erasure and stops at the leaves which were connected to @xmath16 .",
    "erase all decorations which were joined to @xmath16 and also erase all edges which were added at step 1 to the leave @xmath16 from the list .",
    "examples : after the step 2 , the graphs associated to the mentioned lambda terms are the following .    1 .",
    "the graphs of @xmath46 , @xmath47 , @xmath62 are +    2 .",
    "the graphs of @xmath49 , @xmath50 are +     remark that at this step the necessity of having the peculiar orientation of the left leg of the @xmath0 gate becomes clear .",
    "remark also that there may be more than one possible tree of gates @xmath10 , at each elimination of a bound variable ( in case a bound variable has at least tree occurrences ) .",
    "one may use any tree of @xmath10 which is fit .",
    "the problem of multiple possibilities is the reason of introducing the ( co - assoc ) move .",
    "[ [ step-3 . ] ] step 3 .",
    "+ + + + + + +    we may still have leaves decorated by free variables .",
    "starting from the left to the right , group them together in case some of them occur in multiple places , then replace the multiple occurrences of a free variable by a tree of @xmath10 gates with a free root , which ends exactly where the occurrences of the respective variable are .",
    "again , there are multiple ways of doing this , but we may pass from one to another by a sequence of ( co - assoc ) moves .",
    "examples : after the step 3 , all the graphs associated to the mentioned lambda terms , excepting the last one , are left unchanged .",
    "the graph of the last term , changes .    1 .",
    "as an illustration , i figure the graphs of @xmath49 , left unchanged by step 3 , and the graph of @xmath50 : +     let @xmath66 $ ] be a transformation of a lambda term @xmath8 into a graph @xmath67 $ ] as described previously ( multiple transformations are possible because of the choice of @xmath10 trees ) .",
    "then :    1 .   for any term @xmath8",
    "the graph @xmath67 $ ] is in @xmath68 , 2 .",
    "if @xmath67'$ ] and @xmath67\"$ ] are transformations of the term @xmath8 then we may pass from @xmath67'$ ] to @xmath67\"$ ] by using a finite number ( exponential in the number of leaves of the syntactic tree of @xmath8 ) of ( co - assoc ) moves , 3 .",
    "if @xmath30 is obtained from @xmath8 by @xmath69-conversion then we may pass from @xmath67 $ ] to @xmath70 $ ] by a finite sequence of ( co - assoc ) moves , 4 .",
    "let @xmath71 be two terms and @xmath52 be a variable .",
    "consider the terms @xmath17 and @xmath72 $ ] , where @xmath72 $ ] is the term obtained by substituting in @xmath8 the free occurrences of @xmath16 by @xmath30 .",
    "we know that @xmath29 reduction in lambda calculus consists in passing from @xmath73 to @xmath72 $ ]",
    ". then , by one @xmath29 move in @xmath18 applied to @xmath74 $ ] we pass to a graph which can be further transformed into one of @xmath72 $ ] , via ( global fan - out ) moves , ( co - assoc ) moves and pruning moves , 5 .   with the notations from ( d ) , consider the terms @xmath8 and @xmath75 with @xmath76 ; then the @xmath38 reduction , consisting in passing from @xmath77 to @xmath8 , corresponds to the ext1 move applied to the graphs @xmath78 $ ] and @xmath67 $ ] .",
    "[ lambdathm ]    [ [ proof . ] ] proof .",
    "+ + + + + +    \\(a ) we have to prove that for any node @xmath0 any oriented path in @xmath67 $ ] starting at the left exiting edge of this node can be completed to a path which either terminates in a graph @xmath12 , or else terminates at the entry peg of this node , but this is clear . indeed , either the bound variable ( of this @xmath0 node in the syntactic tree of @xmath8 ) is fresh , then the bound variable is replaced by a @xmath12 gate , or else , the bound variable is replaced by a tree of @xmath10 gates .",
    "no matter which path we choose , we may complete it to a cycle passing by the said @xmath0 node .",
    "\\(b ) clear also , because the ( co - assoc ) move is designed for passing from a tree of @xmath10 gates to another tree with the same number of leaves .",
    "\\(c ) indeed , the names of bound variables of @xmath8 do not affect the construction of @xmath67 $ ] , therefore if @xmath30 is obtained by @xmath69-conversion of @xmath8 , then @xmath70 $ ] differs from @xmath67 $ ] only by the particular choice of trees of @xmath10 gates . but",
    "this is solved by ( co - assoc ) moves .",
    "\\(d ) this is the surprising , maybe , part of the theorem .",
    "there are two cases : @xmath16 is fresh for @xmath8 or not .",
    "if @xmath16 is fresh for @xmath8 then in the graph @xmath79 $ ] the name variable @xmath16 is replaced by a @xmath12 gate . if not , then all the occurrences of @xmath16 in @xmath8 are connected by a @xmath10 tree with root at the left peg of the @xmath0 gate where @xmath16 appears as a bound variable .    in the case",
    "when @xmath16 is not fresh for @xmath8 , we see in the lhs of the figure the graph @xmath74 $ ] ( with a remanent decoration of `` x '' ) .",
    "we perform a graphic ( @xmath29 ) move and we obtain the graph from the right .",
    "this graph can be transformed into a graph of @xmath72 $ ] via ( global fan - out ) and ( co - assoc ) moves .",
    "the case when @xmath16 is fresh for @xmath8 is figured next .",
    "we see that the graph obtained by performing the graphic ( @xmath29 ) move is the union of the graph of @xmath8 and the graph of @xmath30 with a @xmath12 gate added at the root . by pruning we are left with the graph of @xmath8 , which is consistent to the fact that when @xmath16 is fresh for @xmath8 then @xmath73 transforms by @xmath29 reduction into @xmath8 .",
    "\\(e ) in the next figure we see at the lhs the graph @xmath80 $ ] and at the rhs the graph @xmath67 $ ] .",
    "the red asterisk marks the arrow which appears in the construction @xmath80 $ ] from the variable @xmath16 , taking into account the hypothesis @xmath76 .",
    "we have a pattern where we can apply the ext1 move and we obtain @xmath67 $ ] , as claimed .",
    "@xmath81    as an example , let us manipulate the graph of @xmath49 :        we can pass from the lhs figure to the rhs figure by using a graphic ( @xmath29 ) move .",
    "conversely , we can pass from the rhs figure to the lhs figure by using a ( global fan - out ) move .",
    "these manipulations correspond to the well known fact that @xmath82 is left unchanged after @xmath29 reduction : let @xmath83 , then @xmath84 .",
    "[ [ s - k - and - i - combinators - in - graph . ] ] @xmath85 , @xmath86 and @xmath87 combinators in @xmath18 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the combinators @xmath46 , @xmath88 and @xmath62 have the following correspondents in @xmath18 , denoted by the same letters :        \\(a ) by one graphic ( @xmath29 ) move @xmath89 transforms into @xmath8 , for any @xmath39 with one output .",
    "\\(b ) by two graphic ( @xmath29 ) moves , followed by a global pruning , for any @xmath90 with one output , the graph @xmath91 transforms into @xmath8 .",
    "\\(c ) by five graphic ( @xmath29 ) moves , followed by one local pruning move , the graph @xmath92 transforms into @xmath87 .",
    "\\(d ) by three graphic ( @xmath29 ) moves followed by a ( global fan - out ) move , for any @xmath93 with one output , the graph @xmath94 transforms into the graph @xmath95 .",
    "[ pcombi ]    [ [ proof.-1 ] ] proof .",
    "+ + + + + +    the proof of ( b ) is given in the next figure .",
    "the proof of ( c ) is given in the following figure .",
    "\\(a ) and ( d ) are left to the interested reader .",
    "the manipulations of graphs presented in this section can be applied for graphs which represent lambda terms .",
    "however , they can also be applied for graphs which do not represent lambda terms .",
    "[ [ fixed - points . ] ] fixed points .",
    "+ + + + + + + + + + + + +    let s start with a graph @xmath39 , which has one distinguished input and one distinguished output.i represent this as follows .        for any graph @xmath96 with one output ,",
    "we denote by @xmath97 the graph obtained by grafting the output of @xmath96 to the input of @xmath98 .",
    "i want to find @xmath96 such that @xmath99 , where @xmath100 means any finite sequence of moves in graphic lambda calculus .",
    "i call such a graph @xmath30 a fixed point of @xmath8",
    ".    the solution of this problem is the same as in usual lambda calculus .",
    "we start from the following succession of moves :        this is very close to the solution , we only need a small modification :        [ [ grafting - application - or - abstraction ] ] grafting , application or abstraction ?",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    if the @xmath8 , @xmath30 from the previous paragraph were representing lambda terms , then the natural operation between them is not grafting , but the application . or , in graphic lambda calculus the application it s represented by an elementary graph , therefore @xmath101 ( seen as the term in lambda calculus which is obtained as the application of @xmath8 to @xmath30 ) is not represented as a grafting of the output of @xmath30 to the input of @xmath8 .",
    "we can easily transform grafting into the application operation .",
    "suppose that @xmath8 and @xmath30 are graphs representing lambda terms , more precisely suppose that @xmath8 is representing a term ( denoted by @xmath8 too ) and it s input represents a free variable @xmath16 of the term @xmath8 .",
    "then the grafting of @xmath30 to @xmath8 is the term @xmath72 $ ] and the graph from the right is representing @xmath102 , therefore both graphs are representing terms from lambda calculus .",
    "we can transform grafting into something else :        this has no meaning in lambda calculus , but excepting the orientation of one of the arrows of the graph from the right , it looks like if the abstraction gate ( the @xmath0 gate ) plays the role of an application operation .    [",
    "[ zippers - and - combinators - as - half - zippers . ] ] zippers and combinators as half - zippers .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let s take @xmath103 a natural number and let s consider the following graph in @xmath104 , called the n - zipper :        at the left is the n - zipper graph ; at the right is a notation for it , or a `` macro '' .",
    "the zipper graph is interesting because it allows to perform ( nontrivial ) graphic beta moves in a fixed order . in the following picture",
    "is figured in red the place where the first graphic beta move is applied .        in terms of zipper notation",
    "this graphic beta move has the following appearance :        we see that a n - zipper transforms into a ( n-1)-zipper plus an arrow .",
    "we may repeat this move , as long as we can .",
    "this procedure defines a `` zipper move '' :        we may see the 1-zipper move as the graphic beta move , which transforms the 1-zipper into two arrows .",
    "the combinator @xmath105 satisfies the relation @xmath106 . in the next figure",
    "it is shown that @xmath107 ( figured in green ) , when applied to @xmath8 , is just a half of the 1-zipper , with an arrow added ( figured in blue ) .        by opening the zipper",
    "we obtain @xmath108 , as it should .",
    "the combinator @xmath109 satisfies @xmath110 . in the next figure",
    "the combinator @xmath111 ( in green ) appears as half of the 2-zipper , with one arrow and one termination gate added ( in blue ) .",
    "after opening the zipper we obtain a pair made by @xmath108 and @xmath112 which gets the termination gate on top of it .",
    "a global pruning move sends @xmath30 to the trash bin .",
    "finally , the combinator @xmath113 satisfies @xmath114 .",
    "the combinator @xmath115 ( in green ) appears to be made by half of the 3-zipper , with some arrows and also with a `` diamond '' added ( all in blue ) .",
    "interestingly , the diamond looks alike the ones from the emergent algebra sector , definition [ defemers ]",
    ".        expressed with the help of zippers , the relation @xmath116 appears like this .",
    "[ [ lists - and - currying . ] ] lists and currying .",
    "+ + + + + + + + + + + + + + + + + + +    with the help of zippers , we may enhance the procedure of turning grafting into the application operation .",
    "we have a graph @xmath117 which has one output and several inputs .",
    "we use an n - zipper in order to clip the inputs with the output .",
    "this graph is , in fact , the following one .",
    "we may interpret the graph inside the green dotted rectangle as the currying of @xmath108 , let s call him @xmath118 .",
    "this graph has only one output and no inputs .",
    "the graph inside the red dotted rectangle is almost a list .",
    "we shall transform it into a list by using again a zipper and one graphic beta move .        [ [ packing - arrows . ] ] packing arrows .",
    "+ + + + + + + + + + + + + + +    we may pack several arrows into one .",
    "i describe first the case of two arrows .",
    "we start from the following sequence of three graphic beta moves .        with words ,",
    "this figure means : we pack the 1 , 2 , entries into a list , we pass it trough one arrow then we unpack the list into the outputs 3 , 4 .",
    "this packing - unpacking trick may be used of course for more than a pair of arrows , in obvious ways , therefore it is not a restriction of generality to write only about two arrows .",
    "we may apply the trick to a pair of graphs @xmath108 and @xmath112 , which are connected by a pair of arrows , like in the following figure .        with the added packing and unpacking triples of gates , the graphs @xmath108 , @xmath112 are interacting only by the intermediary of one arrow .",
    "in particular , we may use this trick for the elementary gates of abstraction and application , transforming them into graphs with one input and one output , like this :        if we use the elementary gates transformed into graphs with one input and one output , the graphic beta move becomes this almost algebraic , 1d rule :        with such procedures , we may transform any graph in @xmath18 into a 1d string of graphs , consisting of transformed elementary graphs and packers and un - packers of arrows , which could be used , in principle , for transforming graphic lambda calculus into a text programming language .",
    "emergent algebras @xcite @xcite are a distillation of differential calculus in metric spaces with dilations @xcite .",
    "this class of metric spaces contain the `` classical '' riemannian manifolds , as well as fractal like spaces as carnot groups or , more general , sub - riemannian or carnot - carathodory spaces , bellache @xcite , gromov @xcite , endowed with an intrinsic differential calculus based on some variant of the pansu derivative @xcite .    in @xcite section 4",
    "`` binary decorated trees and dilatations '' , i propose a formalism for making easy various calculations with dilation structures .",
    "this formalism works with moves acting on binary decorated trees , with the leaves decorated with elements of a metric space .",
    "here is an example of the formalism .",
    "the moves are ( with same names as those used in graphic lambda calculus , see the explanation further ) :        define the following graph ( and think about it as being the graphical representation of an operation @xmath119 with respect to the basepoint @xmath16 ) :        then , in the binary trees formalism i can prove , by using the moves r1a , r2a , the following `` approximate '' associativity relation ( it is approximate because there appear a basepoint which is different from @xmath16 , but which , in the geometric context of spaces with dilations , is close to @xmath16 ) :        it was puzzling that in fact the formalism worked without needing to know which metric space is used .",
    "moreover , reasoning with moves acting on binary trees gave proofs of generalizations of results from sub - riemannian geometry , while classical proofs involve elaborate calculations with pseudo - differential operators . at a close inspection",
    "it looked like somewhere in the background there is an abstract nonsense machine which is just applied to the particular case of sub - riemannian spaces .    in this paper",
    "i shall take the following pure algebraic definition of an emergent algebra ( compare with definition 5.1 @xcite ) , which is a stronger version of the definition 4.2 @xcite of a @xmath14 idempotent right quasigroup , in the sense that here i define a @xmath14 idempotent quasigroup .",
    "let @xmath14 be a commutative group with neutral element denoted by @xmath36 and operation denoted multiplicatively .",
    "a @xmath14 idempotent quasigroup is a set @xmath45 endowed with a family of operations @xmath120 , indexed by @xmath33 , such that :    1 .   for any @xmath121",
    "the pair @xmath122 is an idempotent quasigroup , i.e. for any @xmath123 the equations @xmath124 and @xmath125 have unique solutions and moreover @xmath126 for any @xmath52 , 2 .",
    "the operation @xmath127 is trivial : for any @xmath128 we have @xmath129 , 3 .   for any @xmath130 and",
    "any @xmath35 we have : @xmath131 .",
    "[ defirq ]    here are some examples of @xmath14 idempotent quasigroups .",
    "[ [ example-1 . ] ] example 1 .",
    "+ + + + + + + + + +    real ( or complex ) vector spaces : let @xmath45 be a real ( complex ) vector space , @xmath132 ( or @xmath133 ) , with multiplication as operation .",
    "we define , for any @xmath33 the following quasigroup operation : @xmath134 .",
    "these operations give to @xmath45 the structure of a @xmath14 idempotent quasigroup .",
    "notice that @xmath135 is the dilation based at @xmath16 , of coefficient @xmath13 , applied to @xmath58 .",
    "[ [ example-2 . ] ] example 2 .",
    "+ + + + + + + + + +    contractible groups : let @xmath23 be a group endowed with a group morphism @xmath136 . let @xmath137 with the operation of addition of integers ( thus we may adapt definition [ defirq ] to this example by using `` @xmath138 '' instead of `` @xmath139 '' and `` @xmath140 '' instead of `` @xmath36 '' as the name of the neutral element of @xmath14 ) . for any @xmath141 let @xmath142 .",
    "this a @xmath143 idempotent quasigroup .",
    "the most interesting case is the one when @xmath144 is an uniformly contractive automorphism of a topological group @xmath23 .",
    "the structure of these groups is an active exploration area , see for example @xcite and the bibliography therein .",
    "a fundamental result here is siebert @xcite , which gives a characterization of topological connected contractive locally compact groups as being nilpotent lie groups endowed with a one parameter family of dilations , i.e. almost carnot groups .",
    "[ [ example-3 . ] ] example 3 .",
    "+ + + + + + + + + +    a group with an invertible self - mapping @xmath136 such that @xmath145 , where @xmath146 is the identity of the group @xmath23 .",
    "it looks like example 2 but it shows that there is no need for @xmath144 to be a group morphism .    [ [ local - versions . ] ] local versions .",
    "+ + + + + + + + + + + + + + +    we may accept that there is a way ( definitely needing care to well formulate , but intuitively clear ) to define a local version of the notion of a @xmath14 idempotent quasigroup .",
    "with such a definition , for example , a convex subset of a real vector space gives a local @xmath147 idempotent quasigroup ( as in example 1 ) and a neighbourhood of the identity of a topological group @xmath23 , with an identity preserving , locally defined invertible self map ( as in example 3 ) gives a @xmath143 local idempotent quasigroup .",
    "[ [ example-4 . ] ] example 4 .",
    "+ + + + + + + + + +    a particular case of example 3 is a lie group @xmath23 with the operations defined for any @xmath148 by @xmath149 .",
    "[ [ example-5 . ] ] example 5 .",
    "+ + + + + + + + + +    a less symmetric example is the one of @xmath45 being a riemannian manifold , with associated operations defined for any @xmath148 by @xmath150 , where @xmath151 is the metric exponential .",
    "[ [ example-6 . ] ] example 6 .",
    "+ + + + + + + + + +    more generally , any metric space with dilations is a local idempotent ( right ) quasigroup .",
    "[ [ example-7 . ] ] example 7 .",
    "+ + + + + + + + + +    one parameter deformations of quandles .",
    "a quandle is a self - distributive quasigroup .",
    "take now a one - parameter family of quandles ( indexed by @xmath33 ) which satisfies moreover points 2 . and 3 .",
    "from definition [ defirq ] .",
    "what is interesting about this example is that quandles appear as decorations of knot diagrams @xcite @xcite , which are preserved by the reidemeister moves ( more on this in the section [ secbraid ] ) . at closer examination , examples 1 , 2 are particular cases of one parameter quandle deformations !",
    "i define now the operations of approximate sum and approximate difference associated to a @xmath14 idempotent quasigroup .    for any @xmath152 we give the following names to several combinations of operations of emergent algebras :    1 .",
    "the approximate sum operation is @xmath153 @xmath154 , 2 .",
    "the approximate difference operation is @xmath155 , 3 .",
    "the approximate inverse operation is @xmath156 .",
    "let s see what the approximate sum operation is , for example 1 .",
    "@xmath157 it is clear that , as @xmath13 converges to @xmath140 , this becomes the operation of addition in the vector space with @xmath16 as neutral element , so it might be said that is the operation of addition of vectors in the tangent space at @xmath16 , where @xmath16 is seen as an element of the affine space constructed over the vector space from example 1 .",
    "this is a general phenomenon , which becomes really interesting in non - commutative situations , i.e. when applied to examples from the end of the provided list .",
    "these approximate operations have many algebraic properties which can be found by the abstract nonsense of manipulating binary trees .",
    "another construction which can be done in emergent algebras is the one of taking finite differences ( at a high level of generality , not bonded to vector spaces ) .",
    "let @xmath158 be a function ( from @xmath45 to itself , for simplicity ) .",
    "the finite difference function associated to @xmath8 , with respect to the emergent algebra over @xmath45 , at a point @xmath52 is the following . @xmath159",
    "[ defpan ]    for example 1 , the finite difference has the expression : @xmath160 which is a finite difference indeed . in more generality , for example 2",
    "this definition leads to the pansu derivative @xcite .",
    "finite differences as defined here behave like discrete versions of derivatives . again , the proofs consist in manipulating well chosen binary trees .",
    "all this can be formalized in graphic lambda calculus , thus transforming the proofs into computations inside graphic lambda calculus .",
    "i shall not insist more on this , with the exception of describing the emergent algebra sector of graphic lambda calculus .    for any @xmath161 ,",
    "the following graphs in @xmath104 are introduced :    1 .   the approximate sum graph @xmath162        1 .",
    "the approximate difference graph @xmath163        1 .   the approximate inverse graph @xmath164        [ defemers ]    let @xmath108 be a set of symbols @xmath165 .",
    "( these symbols will play the role of scale parameters going to @xmath166 . ) with @xmath108 and with the abelian group @xmath167 we construct a larger abelian group , call it @xmath168 , which is generated by @xmath108 and by @xmath167 .",
    "now we introduce the emergent algebra sector ( over the set @xmath108 ) .",
    "@xmath169 is the subset of @xmath104 ( over the group @xmath168 ) which is generated by the following list of gates :",
    "1 .   arrows and loops , 2 .",
    "@xmath170 gate and the gates @xmath171 for any @xmath161 , 3 .",
    "the approximate sum gate @xmath172 and the approximate difference gate @xmath173 , for any @xmath174 ,    with the operations of linking output to input arrows and with the following list of moves :    1 .",
    "fan - out moves 2 .",
    "emergent algebra moves for the group @xmath168 , 3 .",
    "< pruning moves .",
    "the set @xmath169 with the given list of moves is called the emergent algebra sector over the set @xmath108 .",
    "[ defemerse ]    the approximate inverse is not included into the list of generating gates .",
    "that is because we can prove easily that for any @xmath174 we have @xmath175 .",
    "( if @xmath161 then we trivially have @xmath176 because it is constructed from emergent algebra gates decorated by elements in @xmath167 , which are on the list of generating gates . ) here is the proof : we start with the approximate difference @xmath173 and with an @xmath170 gate and we arrive to the approximate inverse @xmath177 by a sequence of moves , as follows .",
    "we proved the following relation for emergent algebras : @xmath178 .",
    "this relation appears as a computation in graphic lambda calculus .    as for the finite differences",
    ", we may proceed as this .",
    "a graph @xmath39 , with one input and one output distinguished , is computable with respect to the group @xmath179 if the following graph        can be transformed by the moves from graphic lambda calculus into a graph which is made by assembling :    1 .",
    "graphs from @xmath180 , 2 .",
    "gates @xmath0 , @xmath11 and @xmath12 .",
    "[ defemercomp ]    it would be interesting to mix the emergent algebra sector with the lambda calculus sector ( in a sense this is already suggested in definition [ defemercomp ] ) . at first view",
    ", it seems that the emergent algebra gates @xmath181 are operations which are added to the lambda calculus operations , the latter being more basic than the former .",
    "i think this is not the case . in @xcite theorem 3.4 , in the formalism of lambda - scale calculus ( graphic lambda calculus is a visual variant of this ) , i show on the contrary that the emergent algebra gates could be applied to lambda terms and the result is a collection , or hierarchy of lambda calculi , organized into an emergent algebra structure .",
    "this is surprising , at least for the author , because the initial goal of introducing lambda - scale calculus was to mimic lambda calculus with emergent algebra operations .",
    "in this section we discuss about tangle diagrams and graphic lambda calculus .    an oriented tangle is a collection of wired in 3d space , more precisely it is an embedding of a oriented one dimensional manifold in 3d space .",
    "two tangles are the same up to topological deformation of the 3d space .",
    "an oriented tangle diagram is , visually , a projection of a tangle , in general position , on a plane .",
    "more specifically , an oriented tangle diagram is a globally planar oriented graph with 4-valent nodes which represent crossings of wires ( as seen in the projection ) , along with supplementary information about which wire passes over the respective crossing .",
    "a locally planar tangle diagram is an oriented graph which satisfies the previous description , with the exception that it is only locally planar .",
    "visually , a locally planar tangle diagram looks like an ordinary one , excepting that there may be crossings of edges of the graph which are not tangle crossings ( i.e. nodes of the graph ) .    the purpose of this section is to show that we can `` simulate '' tangle diagrams with graphic lambda calculus .",
    "this can be expressed more precisely in two ways .",
    "the first way is that we can define `` crossing macros '' in graphic lambda calculus , which are certain graphs which play the role of crossings in a tangle diagram ( i.e. we can express the reidemeister moves , described further , as compositions of moves from graphic lambda calculus between such graphs ) . the second way is to say that to any tangle diagram we can associate a graph in @xmath18 such that to any reidemeister move is associated a certain composition of moves from graphic lambda calculus .",
    "meredith ad snyder @xcite achieve this goal with the pi - calculus instead of graphic lambda calculus .",
    "kauffman , in the second part of @xcite , associates tangle diagrams to combinators and writes about `` knotlogic '' .",
    "two tangles are the same , up to topological equivalence , if and only if any tangle diagram of one tangle can be transformed by a finite sequence of reidemeister moves into a tangle diagram of the second tangle .",
    "the oriented reidemeister moves are the following ( i shall use the same names as polyak @xcite , but with the letter @xmath182 replaced by the letter @xmath183 ) :            in section [ semer ] , example 7 , it is mentioned that there is a connection between tangle diagrams and emergent algebras , via the notion of a quandle .",
    "quandles are self - distributive idempotent quasigroups , which were invented as decorations of the arrows of a tangle diagram , which are invariant with respect to the reidemeister moves .",
    "let us define the emergent algebra crossing macros .",
    "( we can choose to neglect the @xmath13 decorations of the crossings , or , on the contrary , we can choose to do like in definition [ defemerse ] of the emergent algebra sector , namely to add a set @xmath8 to the group @xmath14 and use even more nuanced decorations for the crossings . )        in @xcite , sections 3 - 6 are dedicated to the use of these crossings for exploring emergent algebras and spaces with dilations .",
    "all constructions and reasonings from there can be put into the graphic lambda calculus formalism . here",
    "i shall explain only some introductory facts .",
    "let us associate to any locally planar tangle diagram @xmath184 a graph in @xmath185 \\in graph$ ] , called the translation of @xmath184 , which is obtained by replacing the crossings with the emergent crossing macros ( for a fixed @xmath13 ) . also , to any reidemeister move we associate it s translation in graphic lambda calculus , consisting in a local move between the translations of the lhs and rhs tangles which appear in the respective move .",
    "( note : these translations are not added to the moves which define graphic lambda calculus . )    the translations of all oriented reidemeister moves of type 1 and 2 can be realized as sequences of the following moves from graphic lambda calculus : emergent algebra moves ( r1a , r1b , r2 , ext2 ) , fan - out moves ( i.e. co - comm , co - assoc , global fan - out ) and pruning moves .",
    "more precisely the translations of the reidemeister moves r1a , r1b are , respectively , the graphic lambda calculus moves r1a , r1b , modulo fan - out moves .",
    "moreover , all translations of reidemeister moves of type 2 can be expressed in graphic lambda calculus with the move r2 , fan - out and pruning moves .",
    "[ temercross ]      the fact that the reidemeister moves of type 3 are not true for ( the algebraic version of ) the emergent algebras , i.e. that the translations of those can not be expressed as a sequence of moves from graphic lambda calculus , is a feature of the formalism and not a weakness .",
    "this is explained in detail in sections 5 , 6 @xcite , but unfortunately at the moment of the writing that article the graphic lambda calculus was not available .",
    "it is an interesting goal the one of expressing the constructions from the mentioned sections as statements about the computability in the sense of definition [ defemercomp ] of the translations of certain tangle diagrams .    as a justification for this point of view ,",
    "let us remark that all tangle diagrams which appear in the reidemeister moves of type 3 have translations which are related to the approximate difference or approximate sum graphs from definition [ defemers ] .",
    "for example , let s take the translation of the graph from the rhs of the move r3d and call it @xmath31 .",
    "this graph has three inputs and three outputs .",
    "let s then consider a graph formed by grafting three graphs @xmath8 , @xmath30 , @xmath26 at the inputs of @xmath31 , such that @xmath8 , @xmath30 , @xmath26 are not otherwise connected",
    ". then we can perform the following sequence of moves .",
    "the graph from the left lower side is formed by an approximate difference , a @xmath15 gate and several @xmath10 gates .",
    "therefore , if @xmath8 , @xmath30 , @xmath26 are computable in the sense of definition [ defemers ] then the initial graph ( the translation of the lhs of r3d with @xmath8 , @xmath30 , @xmath26 grafted at the inputs ) is computable too .",
    "as previously , we define translations of ( locally planar ) tangle diagrams into graphs in @xmath18 .",
    "the class of locally planar tangle diagrams is out in a one - to one correspondence with a class of graphs in @xmath18 , let us call this class @xmath186 .",
    "we could proceed in the inverse direction , namely consider the class of graphs @xmath186 , along with the moves : graphic beta move and elimination of loops .",
    "then we make the ( inverse ) translation of graphs in @xmath186 into locally planar tangle diagrams and the ( inverse ) translation of the graphic beta move and the elimination of loops .",
    "the following proposition explains what we obtain .",
    "the class of graphs @xmath186 is closed with respect to the application of the graphic beta move and of the elimination of loops .",
    "the translations of the graphic beta and elimination of loops moves are the following splice 1 , 2 ( translation of the graphic beta move ) and loop 1 , 2 ( translation of the elimination of loops ) moves .",
    "[ ptrans ]          the proposition becomes obvious if we find the translation of the graphic beta move .",
    "there is one translation for each crossing .",
    "( likewise , there are two translations for elimination of loops , depending on the orientation of the loop which is added / erased . ) @xmath81        the following theorem clarifies which are the oriented reidemeister moves which can be expressed as sequences of graphic lambda calculus moves applied to graphs in @xmath186 . among these moves ,",
    "some are more powerful than others , as witnessed by the following    all the translations of the oriented reidemeister move into moves between graphs in @xmath186 , excepting r2c , r2d , r3a , r3h , can be realized as sequences of graphic beta moves and elimination of loops .",
    "moreover , the translations of moves r2c , r2d , r3a , r3h are equivalent up to graphic beta moves and elimination of loops ( i.e. any of these moves , together with the graphic beta move and elimination of loops , generates the other moves from this list ) .",
    "[ threidgen ]      it is easy , but tedious , to verify that all the mentioned moves can be realized as sequences of splice and loop moves .",
    "it is as well easy to verify that the moves r2c , r2d , r3a , r3h are equivalent up to splice and loop moves .",
    "it is not obvious that the moves r2c , r2d , r3a , r3h ca nt be realized as a sequence of splice and loop moves . in order to do this , we prove that r2d ca nt be generated by splice and loop .",
    "thanks are due to peter kravchuk for the idea of the proof , given in an answer to a question i asked on mathoverflow @xcite , where i described the moves splice and loop .    to any locally planar tangle diagram a associate it s reduced diagram r(a ) , which is obtained by the following procedure : first use splice 1,2 from left to right for all crossings , then use loop 1,2 from right to left in order to eliminate all loops which are present at this stage .",
    "notice that :    1 .",
    "the order of application of the splice moves does not matter , because they are applied only once per crossing .",
    "there is a finite number of splices , equal to the number of crossings .",
    "define the bag of splices splice(a ) to be the set of splice moves applied .",
    "the same is true for the order of eliminations of loops by loop 1 , 2 .",
    "there is a finite number of loop eliminations , because the number of loops ( at this stage ) can not be bigger than the number of edges of the initial diagram .",
    "define the bag of loops loop(a ) to be the set of all loops which are present after all splices are done .",
    "apply a splice 1,2 move to the initial diagram a , from left to right , and get b. then splice(b ) is what is left in the bag splice(a ) after taking out the respective splice . also loop(b )",
    "= loop(a ) because of the definition of bags of loops . therefore r(a ) = r(b ) .",
    "apply a loop1 , 2 from left to right to a and get b. the new loop introduced in the diagram does not participate to any crossing ( therefore splice(a ) = splice(b ) ) , so we find it in the bag of loops of b , which is made by all the elements of loop(a ) and this new loop . therefore r(a )",
    "same goes for loop1 , 2 applied from right to left .",
    "finally , remark that the reduced diagram of the lhs of the move r2d is different than the reduced diagram of the rhs of the move r2d , therefore the move r2d can not be achieved with a sequence of splices and loops addition / elimination . @xmath81            m. buliga , braided spaces with dilations and sub - riemannian symmetric spaces , in : geometry .",
    "exploratory workshop on differential geometry and its applications , eds .",
    "d. andrica , s. moroianu , cluj - napoca 2011 , 21 - 35 , http://arxiv.org/abs/1005.5031[arxiv:1005.5031 ]"
  ],
  "abstract_text": [
    "<S> we introduce and study graphic lambda calculus , a visual language which can be used for representing untyped lambda calculus , but it can also be used for computations in emergent algebras or for representing reidemeister moves of locally planar tangle diagrams .    </S>",
    "<S> [ section ]    [ theorem]proposition    [ theorem]lemma    [ theorem]corollary    [ theorem]definition    [ theorem]remark    [ section ] </S>"
  ]
}