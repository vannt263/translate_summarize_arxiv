{
  "article_text": [
    "the understanding of structure of superstring scattering amplitudes has gained great progresses since discovery of the pure spinor formalism @xcite , which has manifest spacetime supersymmetry and can be quantized covariantly . besides of the usual superspace variables ,",
    "a new bosonic spacetime spinor @xmath0 is introduced as the worldsheet ghosts and satisfies the pure spinor constraint @xmath1 the origins of pure spinor are explained in @xcite .",
    "the equivalence of four - point tree - level , one - loop and two - loop amplitudes with the rns results are proved in @xcite .",
    "the five- and six - point tree amplitudes have been explicitly computed in @xcite .",
    "for color - ordered n - point tree - level amplitudes , the recursive method is presented by the pure spinor superspace cohomology formula @xcite .",
    "here we note that a first closed formula for the open superstring five - point amplitude using the rns formalism is done in @xcite and the n - point closed formula for tree level scattering of open superstrings using the rns formalism is done in @xcite .",
    "the massless unintegrated vertex operator @xmath2 and integrated vertex operator @xmath3 in pure spinor formalism are described by the single - particle superfields @xmath4 , @xmath5 , @xmath6 , @xmath7 .",
    "the cft correlator in eq.([cftc ] ) can always be expressed in terms of brst building blocks @xmath8 @xcite . in order to get the recursion relations for scattering amplitudes at tree - level , the brst building blocks @xmath8 are grouped into the berends - giele currents @xmath9 @xcite . the @xmath10-point sym tree - level amplitude in pure spinor formalism",
    "is given by @xmath11 where the superfields @xmath12 is the sum of berends - giele currents @xmath9 and defined in eq.([en ] ) .",
    "in the computations of eq.([amp ] ) , the computation involving keeping the terms proportional to @xmath13 and the contractions between terms with vector indices or weyl spinor indices is tedious and impossible to be done by hand for higher - point or multiloop amplitudes .",
    "the complicated computations in superstring amplitudes can be carried out easily with the help of the computers .",
    "there are many packages aimed on algebraic manipulations with tensorial expressions , such as xact@xcite , redberry@xcite , maple physics@xcite , etc . in this paper",
    ", we will use a standalone package called cadabra to deal with the calculations of superstring amplitudes .",
    "cadabra is a computer algebra system aimed at , mainly but not restricted to , theoretical high energy physicists to deal with tensorial mathematical expressions encountered in field theory @xcite .",
    "the input format and the output format are a subset of tex which makes it user - friendly and the results readable .",
    "cadabra knows about the concept of dummy indices therefor no special wildcard notation is needed .",
    "it features a substitution command which handles the anti - commuting objects and dummy indices .",
    "one can have precise control over the results by adding any arbitrary simplification step to a list of commands which is executed at every step .    in this paper , we will give an introduction on how the symbolic computer algebra system cadabra is used in the calculations of superstring amplitudes with pure spinor formalism with explicit examples .",
    "in general , terms handled in the article include the definitions of the superfields @xmath14 , @xmath15 , @xmath16 , @xmath17 , the brst building blocks @xmath18 , the methods of selecting terms proportional to @xmath13 , the realization of the contractions between terms with vector indices or weyl spinor indices , the description of the pure spinor correlations in terms of kronecker deltas and epsilon tensors , and so on .",
    "we also display the complete source code for the calculations of the tree - level massless 5-gluon amplitude with detailed interpretations at every step .",
    "the article is organized as follows . in section [ sec:2 ] ,",
    "we give a simple review on how the tree - level n - point superstring amplitude is computed in pure spinor formalism . in section [ sec:3 ] , we will give an introduction on most useful algorithms modules in cadabra , and illustrate these modules with many basic calculations encountered in the amplitude computation .",
    "the complete source code for the tree - level massless 5-gluon amplitude is presented in section [ sec:4 ] .",
    "the conclusion is drawn in section [ sec:5 ] .",
    "in this section , we will give a brief review of the pure spinor formalism for the superstring , focusing on the n - point tree - level scattering amplitudes calculation .",
    "the computation of n - point tree - level scattering amplitudes is the evaluation of the correlation function with three unintegrated vertices @xmath19 and @xmath20 integrated vertices @xmath21 @xcite @xmath22 where @xmath19 and @xmath21 have conformal weight zero and one , respectively . @xmath19 and @xmath21 are conformal fields on the worldsheet parametrized by a complex coordinate @xmath23 , and described by the superfields @xmath24 , @xmath5 , @xmath6 , @xmath7 , @xmath25 where the vector indices are taken from latin alphabet @xmath26 , and the weyl spinor indices are taken from greek alphabet @xmath27 .",
    "@xmath28 is the right handed majorana weyl spinor , @xmath29 is the supersymmetric momentum , @xmath30 is the conjugate momentum to @xmath28 and @xmath31 is the lorentz current .",
    "the unintegrated vertex @xmath19 is brst closed , i.e. , @xmath32 = 0 , where @xmath33 is the brst operator and satisfies @xmath34 = 0 , if the superfield @xmath14 is on shell .",
    "the integrated vertex @xmath21 satifies @xmath35 = @xmath36 .",
    "the supersymmetric derivative @xmath37 is given by @xmath38    in the gauge @xmath39 , the @xmath40 expansions of @xmath41 sym superfields @xmath14 , @xmath15 , @xmath16 , @xmath17 are given by @xcite @xmath42}f_{pq}+\\frac{1}{6}\\partial_{[m}(\\theta\\gamma_{n]}^{\\;\\ ; pq}\\theta)(\\xi\\gamma_{q}\\theta)\\partial_{p}+ ... ,\\label{fmn}\\end{aligned}\\ ] ] where @xmath43 = @xmath44 and @xmath45 = @xmath46 are the gluon polarization vector and gluino wave function , @xmath47 = 2@xmath48}$ ] is the linearized field strength .",
    "one can see that , for the superfields @xmath14 and @xmath16 , the gluon polarization vector @xmath43 couples with odd powers of @xmath40 and the gluino wave function @xmath45 with even powers of @xmath40 . while the superfield @xmath15 and @xmath17 have the opposite feature .",
    "although the @xmath40 expansions terminate at the finite order @xmath49 , @xmath50 is sufficient for extracting superfield components @xmath43 and @xmath45 from amplitudes .",
    "the superfields @xmath14 , @xmath15 , @xmath16 , @xmath17 satisfy the equations of motion @xcite @xmath51}w)_{\\alpha}\\;\\;,\\;\\;\\;d_{\\alpha } w^{\\beta}=\\frac{1}{4 } ( \\gamma^{mn})_{\\alpha}^{\\beta } { \\cal f}_{mn},\\nonumber\\end{aligned}\\ ] ] which are on shell constraints for the construction of vertex operators in the brst cohomology .",
    "the operators in eq.([vi ] ) and eq.([ui ] ) satisfy the following opes @xmath52}_{q]}-\\frac{6}{z_{ij}^{2}}\\delta^{n}_{[p}\\delta^{m}_{q]},&\\nonumber\\end{aligned}\\ ] ] where @xmath53 equal @xmath54 - @xmath55 and @xmath56 denotes the superfields @xmath14 , @xmath15 , @xmath16 , @xmath17 .",
    "when computing tree - level n - point amplitudes , the opes can be used to define composite superfields @xmath57 @xcite @xmath58 at @xmath59 and @xmath60 , the ope residues @xmath61 are given by @xmath62,\\end{aligned}\\ ] ] where the brst exact terms have been discarded cause they make the ope residues @xmath61 lack of symmetry under exchange of labels @xmath63 .",
    "the brst exact terms decouple and are canceled out in the final superspace expressions for the 5- and 6-point computations@xcite , and it is strongly suggest that this pattern has to persist at higher points .",
    "the removal of the brst exact terms leads to the so - called brst building blocks @xmath8 @xcite , @xmath64 which transform covariantly under the action of the brst charge @xmath65 . at @xmath66 and @xmath67 , the building blocks @xmath8 are given by @xmath68},\\label{t12}\\\\ t_{123 } & = & \\frac{1}{3}(\\tilde{t}_{123}-\\tilde{t}_{213})- \\frac{1}{6}(\\tilde{t}_{321}-\\tilde{t}_{312}+\\tilde{t}_{132}-\\tilde{t}_{231}),\\end{aligned}\\ ] ] with @xmath69+\\frac{s_{13}+s_{23}}{2}(a^{1}\\cdot a^{2})v^{3},\\nonumber\\end{aligned}\\ ] ] where @xmath70=@xmath71 denote the standard mandelstam variables . the diagram interpretation for @xmath18 in terms of tree subdiagrams with cubic vertices",
    "is shown in fig.[fig1 ] .    .",
    "]    the cubic diagrams with branches is associated with a sum of several brst building blocks @xmath18 in which the labels @xmath63 have been exchanged . at each rank",
    "the brst building blocks @xmath8 obey one new symmetry in its labels while still inheriting all the lower - rank symmetries @xcite .",
    "for example , @xmath72    the brst building blocks @xmath8 are combined to get the so - called berends - giele currents @xmath73 @xcite , which can be thought of as color - ordered sym tree amplitudes with one leg off - shell .",
    "for the convenience of notation , @xmath74 is identified by @xmath75 , @xmath76 . at @xmath66 and @xmath67 ,",
    "the berends - giele currents @xmath73 are given by @xmath77 which correspond to the three- and four - point amplitudes with one leg off - shell and the corresponding diagram interpretation is drawn in fig.[fig2 ] .     and",
    "@xmath78 . ]",
    "the berends - giele currents take several symmetry properties : the reflection identity , the cycle symmetry and the kleiss - kuijf relation @xcite @xmath79 where @xmath80 denotes the set of all the permutations of @xmath81 that maintain the order of the individual elements of both sets @xmath82 and @xmath83 , @xmath84 denotes the cardinality of set @xmath85 , and @xmath83 denotes the set @xmath85 with reversed order of elements . under the action of brst charge @xmath65 ,",
    "the berends - giele currents @xmath73 are translated into the bosonic superfield @xmath86 which is given by @xmath87 the berends - giele currents give a compact description of the ten - dimensional sym tree - level scattering amplitudes by @xcite @xmath88        for which the diagram interpretation is shown in fig.[fig3 ] .    after using the ope s to eliminate the conformal weight - one variables ,",
    "the integration of the zero - modes of @xmath0 and @xmath28 is carried out by taking only the terms which contain three @xmath89 s and five @xmath40 s in the correlator which are proportional to the zero - mode integration prescription @xcite @xmath90 the choice of normalization factor 2880 is convenient in view of the factorization properties of pure spinor superspace kinematic factors and has been observed in @xcite to imply tree - level normalizations compatible with rns computations .",
    "several pure spinor correlations proportional to eq.([2880 ] ) , which will be used in examples in following sections , are given by in terms of kronecker deltas and epsilon tensors @xcite @xmath91[f}\\delta^{t}_{g}\\delta^{u]}_{h]}\\label{ps2},\\\\ \\langle(\\lambda\\gamma_{m}\\theta)(\\lambda\\gamma^{nrs}\\theta ) ( \\lambda\\gamma^{ptu}\\theta ) ( \\theta\\gamma_{fgh}\\theta )   \\rangle&=&\\frac{12}{35}\\epsilon^{fghmnprstu}+\\frac{144}{7}\\big[\\delta^{[n}_{m}\\delta^{r}_{[f}\\delta^{s][p}\\delta^{t}_{g}\\delta^{u]}_{h ] } \\nonumber\\\\ & & \\hspace{-14em}-\\delta^{[p}_{m}\\delta^{t}_{[f}\\delta^{u][n}\\delta^{r}_{g}\\delta^{s]}_{h]}\\big]-\\frac{72}{7}\\big[\\delta_{m[f}\\delta^{v[p}\\delta^{t}_{g}\\delta^{u][n}\\delta^{r}_{h]}\\delta^{s]}_{v}-\\delta_{m[f}\\delta^{v[n}\\delta^{r}_{g}\\delta^{s][p}\\delta^{t}_{h]}\\delta^{u]}_{v}\\big ] \\label{ps3},\\end{aligned}\\ ] ] where @xmath92 is the antisymmetrized combination of kronecker deltas beginning with @xmath93 .",
    "to illustrate how cadabra is used in the sym scattering amplitudes in pure spinor formalism , we will take the calculation of tree - level 5-gluon amplitude as an example in section [ sec:4 ] . at @xmath94 , the amplitude deduced from eq.([amp ] ) is @xmath95 and a manifestly cyclic - invariant form reads @xmath96 the final result is a product of mandelstam invariants @xmath70 , momenta @xmath97 as well as the polarization vectors @xmath98 and/or the fermionic spinor wavefunctions @xmath99 .",
    "using momentum conservation all 5-point kinematic invariants can be expressed in terms of \\{@xmath100 , @xmath101 , @xmath102 , @xmath103 , @xmath104 } as @xmath105",
    "the algorithms modules of cadabra is built with three categories : _ properties _ , _ algorithms _ and _ reserved node names_. _ properties _ assign properties to symbols .",
    "symbols in cadabra have no priori meaning",
    ". if you write @xmath106 , the program will not know that it is supposed to be a generator of a clifford algebra .",
    "you will have to declare the properties of symbols by using the `` : : ` gammamatrix ` '' as    : : gammamatrix(metric= ) .",
    "the ` gammamatrix ` property has turned the gamma symbols into noncommuting objects , which will not change order when sorting symbols in a product . _ algorithms _ can be made to act on existing expressions .",
    "this is done by :    @command(expression number or label)arg1arg2 ... argm    all of these commands act on the top of the argument subtree .",
    "you can make them act subsequently on all nodes to which they apply by postfixing the name with an exclamation mark , as in    @command!(expression number or label)arg1arg2 ... argm    this will search the tree in pre - order style , applying the algorithm on every node to which the algorithm applies . if you want an algorithm to act until the expression no longer changes , use a double exclamation mark `` ` ! ! ` '' .",
    "to understand the difference between one  ` ! `  and two  ` ! ! `",
    ", there are some examples .",
    "this code will exchang position of two indices    a_a b ; @substitute ! (    the output is    & a_a b ; & + & a_b a ; &    and the following code will make cadabra stuck in dead cycle ,    a_a b ; @substitute ! !",
    "(    therefore a restart of cadabra is needed .",
    "a list of all properties , algorithms and node names is available in the graphical interface through the help menu .    in cadabra",
    ", the input lines always have to be terminated with either a semi - colon `` ` ; ` '' , a colon `` ` : ` '' or a dot `` ` . ` '' .",
    "the inputs and outputs are in exact one - to - one correspondence .",
    "those statements that finish with a semi - colon will display the outputs , and those statements that finish with a colon will not display the outputs .",
    "it is also possible to save the output to a file , by appending a file name after the semi - colon , as    a_a b ; `` file name ''    a dot is always used at the end of statements while defining properties to symbols .",
    "the line starting with a `` ` # ` '' sign is considered to be a comment and will be ignored completely .",
    "the expressions in cadabra can be given a label so you can refer to them again later , this is done by writing the label before the expression and a `` ` : = ` '' in between , e.g. ,    vertex:= _ a _ ; @(vertex ) ;    the output is    & _ a _ ; & + & _ a _ ; &      a small number of node names are reserved and always mean the same thing .",
    "the names of these reserved nodes can not be changed . in this subsection",
    "we will introduce two node names appeared in superstring amplitude computation .    _",
    "@xmath107indexbracket _",
    "the node name denotes a group of objects with indices which are collectively written .",
    "the default properties are ` distributable ` and ` indexinherit ` , i.e. , the object can be distributed over the terms with ` @distribute ` and should inherit the indices of its child objects .",
    "the node name would be used to describe the objects with weyl spinor indices in @xmath40 expansions of the superfields @xmath14 , @xmath5 , @xmath6 , @xmath17 in eqs.([aa]-[fmn ] ) .",
    "the object with one weyl spinor index can be expressed as , e.g. ,    _ ;    or equivalent , using one parenthesis ,    ( ^m ) _ ;    the output is    & ( ^m ) _ ; &    the object with suppressed weyl spinor indices can be expressed as , e.g. ,    ;    the output is    & ( ( ^m ) ) ; &    this is used in the description of pure spinor correlations in eqs.([ps1]-[ps3 ] ) .",
    "it is noted worthwhile that the input format with double parentheses is not standard and the output is same as using one parenthesis , e.g. ,    m , n::indices(vector ) .",
    "( ^m)+((^m ) ) ; @collect_terms ! (    the output is    & ( ^m)+((^m ) ) ; & + & 2(^m ) ; &    _ @xmath107cdot _    the node name denotes a dot product of vectors in which the contracted indices are suppressed .",
    "it displays as an infix dot . in amplitude computation",
    ", we will use this to describe the contraction between the polarization vectors @xmath108 and the momenta @xmath109 in final expression , e.g. ,    ;    the output is    & e^1k^2 ; &      properties of objects are declared when the objects first appear in the input .",
    "the property information is stored separately , and further appearances of the objects will automatically share these properties .",
    "the objects can have more than one property attached to them . in this subsection",
    "we will introduce some properties appeared in superstring amplitude computation .    _ : : indices _    the property declares index names to be usable for dummy index purposes .",
    "it would be used to describe the vector indices and weyl spinor indices in @xmath40 expansions of the superfields @xmath14 , @xmath5 , @xmath6 , @xmath17 in eqs.([aa]-[fmn ] ) .",
    "typical usage are of the form    a , b , c , d , e , a#::indices(vector ) .",
    ", , , , # : : indices(spinor ) .",
    "this declares \\{a , b , c , d , e , a # } and \\{@xmath110,@xmath111,@xmath112,@xmath113,@xmath114 } are indices in the dummy index set `` vector '' and `` spinor '' respectively , where a # and @xmath114 mean the entire infinite set of objects a1 , a2 , a3 , @xmath115 and @xmath116 , @xmath117 , @xmath118 , @xmath115 .",
    "_ : : integer _",
    "the property indicates that the object takes values in the integers . for the vector indices and",
    "weyl spinor indices appeared in superfield @xmath14 , @xmath5 , @xmath6 , @xmath17 , the optional range would be specified by    a , b , c , d , e , a#::integer(0 .. 9 ) .",
    ", , , , # : : integer(1 .. 16 ) .",
    "this declares \\{a , b , c , d , e , a # } and \\{@xmath110,@xmath111,@xmath112,@xmath113,@xmath114 } take the integer value from 0 to 9 and 1 to 16 respectively . note that the range can also be any length , e.g. ,    a , b , c , d , e , a#::integer(0 .. d-1 ) .",
    "this declares the range is 0 to d-1 .",
    "_ : : gammamatrix _    the property indicates the object is a generalised generator of a clifford algebra .",
    "typical usage are of the form    : : gammamatrix(metric= ) .",
    "the statement declares the objects @xmath119 and @xmath120 are gamma matrices and the metric is @xmath113 .",
    "the notation \\ { # } stands for the subscripts and superscripts with an arbitrary number of indices . with one vector index ,",
    "the object satisfies @xmath121 the objects with two or more vector indices are defined as @xmath122},\\nonumber\\end{aligned}\\ ] ] where the anti - symmetrisation includes a division by n!.    _ : : anticommuting _    in general , all objects are commutative if not specified .",
    "the property declares the objects anticommuting .",
    "it works for objects with and without indices .",
    "e.g. ,    _ , _ : : anticommuting . _ _ ; @prodsort ! (    the output is    & ( ^bcd)_(^a ) _ ; & + & -(^a)_(^bcd ) _ ; &    _ : : kroneckerdelta _    the property denotes a generalised kronecker delta symbol .",
    "when the object carries two indices , it is the usual kronecker delta .",
    "when the object carries more than two indices , the object means @xmath123}.\\nonumber\\end{aligned}\\ ] ] to convert the kronecker deltas with more than two indices to usual kronecker delta , one would use ` @breakgendelta ` .",
    "e.g. , for the right hand side in eq.([ps1 ] ) ,    : : kroneckerdelta . _ d^a_e^b_f^c ; @breakgendelta (    the output is    & _ def^abc ; & + & _ d^a_e^b_f^c-_d^a_f^b_e^c-_e^a_d^b_f^c+_e^a_f^b_d^c+_f^a_d^b_e^c-_f^a_e^b_d^c ; &    _",
    ": : weight _    the property attachs a labelled weight to an object , which can subsequently be used in the algorithms ` @keep_weight ` . in amplitude computation ,",
    "we use the following statement to label weights to objects , e.g. ,    : : weight(label = ps1,value=1 ) . : : weight(label = ps2,value=1 ) .",
    ", : : weight(label = fermion ) . z^#,f^#::weight(label = boson ) .",
    "the first and second statements attach the pure spinor @xmath124 , @xmath125 with weight label `` ps1 '' and value one , and the worldsheet variable @xmath126 , @xmath127 weight label `` ps2 '' and value one .",
    "the third and forth statements attach the fermionic polarizations @xmath128 , @xmath129 , @xmath130 with weight label `` fermion '' , and the bosonic polarizations @xmath131 , @xmath132 , the field strength @xmath133 , @xmath134 with weight label `` boson '' , where the value is not shown ( the default set is one ) .",
    "see the example after the algorithm ` @keep_weight ` in section [ sec:3:3 ] .",
    ": : sortorder .",
    "_    the property determines the preferred order of objects when a ` @prodsort ` command is used .",
    "one application is to keep the order of the pure spinor @xmath89 , the @xmath112 matrices and the worldsheet variable @xmath40 in an indexbracket .",
    "e.g. , with associating the property to symbols list \\{@xmath89 , @xmath112 , @xmath40 } ,    , , : : sortorder . ; @prodsort ! (    the output is    & ( ( ^m ) ) ; & + & @prodsort : notapplicable . & + & ( ( ^m ) ) ; &    while , without the first property statement , the output is    & ( ( ^m ) ) ; & + & ( ( ^m ) ) ; &      the built - in algorithms can be made on tensorial expression for the manipulation of symmetrization , anti - symmetrization , contraction , renaming dummy indices , collecting identical terms , doing gamma matrix algebra in any dimension and so on . in this subsection we will introduce some algorithms appeared in superstring amplitude computation .    _ @asym _    the algorithm anti - symmetrises a product or tensor in the indicated objects .",
    "this works both with normal objects as well as with indices .",
    "it is used in the description of pure spinor correlation in eq.([ps2 ] ) and eq.([ps3 ] ) .",
    "e.g. ,    _",
    "d^a_e^b_f^c ; @asym ! (    and the output is    & ^a_d^b_e^c_f ; & + & _ d^a_e^b_f^c-_d^a_f^b_e^c-_e^a_d^b_f^c+_e^a_f^b_d^c+_f^a_d^b_e^c-_f^a_e^b_d^c ; &    there is also a algorithm `` ` @sym ` '' to handle the symmetrisation which is available through the help menu .    _",
    "@distribute _",
    "the algorithm translates a product of sums to a sum of products , and works on the objects which carry the `` ` : : distributable ` '' property .",
    "the algorithm is widely used to deal with normal objects as well as with indices , and we do not give examples in the paper .    _",
    "@combine _",
    "the algorithm combines two objects with consecutive contracted indices into one object with an indexbracket .",
    "the algorithm is used to contract the pure spinor @xmath89 , gamma matrices @xmath112 and worldsheet variable @xmath40 into pure spinor correlations .",
    "e.g. ,    _ ( ^m ) _ ( ^n ) _ ( ^r s ) _ _ ( ^p t u ) _ ; @combine ! (    the output is    & _ ( ^m)_(^n)_(^rs)__(^ptu ) _ ; & + & ( ( ^m))((^n^rs))((^ptu ) ) ; &    _ @eliminate_kr _    the algorithm eliminates kronecker delta symbols by performing index contractions and replaces contracted kronecker delta symbols with the declared range over which the index runs .",
    "e.g. ,    : : kroneckerdelta .",
    "n r_m s ; @eliminate_kr ! (    the output is    & k^3_me^1_re^2_se^3_n _",
    "n r_m s ; & + & k^3_se^1_ne^2_se^3_n ; &    note that the algorithm ` @eliminate_kr ` can eliminate usual kronecker deltas , i.e. , with two indices , for kronecker deltas with more than two indices , one should use algorithm ` @breakgendelta ` .    _",
    "@breakgendelta _",
    "the algorithm converts generalised deltas to products of usual kronecker deltas .",
    "see the examples after the property `` kroneckerdelta '' in section [ sec:3:2 ] .    _",
    "@keep_weight _",
    "the algorithm keeps only those terms for which a product has the indicated weight .",
    "weights are declared by making use of the `` ` : : weight ` '' property of symbols .",
    "e.g. , considering the case in which we want to keep all terms with @xmath13 , this is done by    : : weight(label = ps1 ) .",
    ": : weight(label = ps2 ) .",
    ": : weightinherit(label = all , type = multiplicative ) .",
    "+ + f_i je_k ; @keep_weight!(@keep_weight ! (    the output is    & ( ( ^a))((^b))((^cde))((^fgh))+((^a))((^b))((^cde))((^fgh ) ) & + & + f_ije_k((^a))((^b))((^def))((^fgh))((^ijk ) ) ; & + & ( ( ^a))((^b))((^cde))((^fgh))+f_ije_k((^a))((^b))((^def))((^fgh ) ) & + & ( ( ^ijk ) ) ; & + & ( ( ^a))((^b))((^cde))((^fgh ) ) ; &    the statement in third row declares that the object inherits all weights of its child nodes .    _ @reduce_gendelta _",
    "the algorithm converts generalised delta symbols which take contracted indices to deltas with fewer indices , according to the formula @xmath135(n - m)!\\delta^{a_{m+1}\\ldots a_{n}}_{b_{m+1}\\ldots b_{n}}.\\end{aligned}\\ ] ] e.g. ,    a , b , c , d , e::integer(0 .. 9 ) .",
    ": : kroneckerdelta .",
    "_ c^a_d^b_e^c ; @reduce_gendelta (    the output is    & _ cde^abc ; & + & _ de^ab ; &    _ @substitute _    the algorithm replaces objects with something else .",
    "the algorithm can do very complicated things .",
    "the first example is to deal with the contractions between momenta @xmath97 and the polarization vectors @xmath136 ,    e^1_ae^2_be^3_bk^4_ak^5_ck^6_c ; @substitute!!(e^?_ae^??_a- > ,",
    "k^?_ak^??_a- > ) ;    the output is    & e^1_ae^2_be^3_bk^4_ak^5_ck^6_c ; & + & e^1k^4 e^2e^3 k^5k^6 ; &    the single question mark and double question mark mean the two objects at the right - hand of the arrow may have the same superscript or not .",
    "if replacing the single question mark with the double question mark ( or replacing the double question mark with the single question mark ) , the algorithm only works with two objects that share the same superscript .",
    "the second example is to deal with long substitution rule .",
    "the substitution rule can be written into a labelled expression and called when necessary .",
    "taking the unintegrated massless vertex operators @xmath19 for example ,    , , : : indices .",
    "_ : v^1 v^2 v^3 ; @substitute !",
    "(    the output is    & v^1 v^2 v^3 ; & + & _ a^1__a^2 _ _ a^3 _ ; &",
    "in this section , we will illustrate the application of cadabra in computation of tree - level 5-gluon superstring amplitude .",
    "the source code of the program is freely available and successfully compiled on multiple platforms including linux and macosx .",
    "the codes in this paper are written with cadabra version 1.42 on ubuntu system , and one can install this version by enabling the ppa . to get the output one need to copy the code into cadabra and press the shift+enter key .",
    ": : postdefaultrules ( @@collect_terms ! (    the statement in 1st row has set the default rules that the algorithm ` @collect_terms ` should be applied after every new input has been processed and active nodes have been executed .    , , , ,",
    "# , # , # : : indices(spinor ) .",
    ", , , , # , # , # : : integer(1 .. 16 ) .",
    "a , b , c , d , e , f , g , h , l , m , n , p , q , r , s , t , u , v , a#::indices(vector ) . a , b , c , d , e , f , g , h , l , m , n , p , q , r , s , t , u , v , a#::integer(0 .. 9 ) .",
    ": : gammamatrix(metric= ) .",
    ": : kroneckerdelta .",
    ": : partialderivative .",
    ": : epsilontensor(delta= ) .",
    ": : implicitindex .",
    ": : weight(label = ps1 ) .",
    ": : weight(label = ps2 ) .",
    "z^#,f^#::weight(label = boson ) .",
    ": : weightinherit(label = all , type = multiplicative ) .",
    ": : weightinherit(label = all , type = multiplicative ) . , ,",
    ": : sortorder .",
    "_ , ( ^a)_::sortorder .",
    "o_1^a , o_1^a b c , o_2^a b c::sortorder .",
    "o_1^a , o_1^a b c::anticommuting .",
    "( ^a)_,(^a b ) _ , ( ^a b c ) _ , , , : : anticommuting .",
    "the 2nd row to the 5th row declare latin alphabet and greek alphabet are integers and take the properties of vector indices and weyl spinor indices .",
    "the 6th row defines the symbols @xmath137 with indices are @xmath138 pauli matrices in @xmath139 .",
    "the 7th row defines the symbols @xmath113 with indices are generalised kronecker deltas .",
    "the 8th row defines the symbols @xmath140 with indices are partial derivatives .",
    "the 9th defines the symbols @xmath141 with indices are fully anti - symmetric tensors .",
    "the 10th row states @xmath142 , @xmath143 , @xmath144 , are symbols .",
    "the 11th row states the symbols @xmath40 carries implicit indices , although we know the indices are weyl spinor indices , this is used to contract with symbols like @xmath145 by the algorithm ` @combine ` .",
    "the 12th row to 14th row associate the symbols @xmath89 , @xmath40 , @xmath146 , @xmath147 with labelled weights .",
    "the 15th and 16th row declare that the indexbrackets and the symbols @xmath140 have the same weights of its child nodes . the 17th row and 18th row set the order of the symbols @xmath89 , @xmath112 and @xmath40 in indexbrackets . for convenience , the following shorthands are used @xmath148 which are anticommuting with each other and declared in 19th row and 20th row .",
    "other anticommuting symbols are declared in the 21st row to the 24th row .",
    "aalpha:=a^?_= z^?_m ( ^m ) _ - f^?_m n ( ^p ) _ + ( ^m ) _ _ rf^?_p q ; am:=a^?_m = z^?_m- f^?_p q+ _ rf^?_p q ; walpha:=w^_?=- ( ^m n ) _ f^?_m n + ( ^m n ) _ _ mf^?_p q ;    the 25th row to 35th row give the input of the @xmath40 expansions of @xmath14 , @xmath15 , @xmath16 in eqs.([aa]-[wa ] ) , where the purely fermionic part is not used in 5-gluon superstring amplitude calculation and omitted in the input .",
    ": vi:=v^?=_a^ ?",
    "_ : l21:=l _ ? ?",
    "? ->-a^?_a ( ^a )",
    "-vk^?_aa^??_a : t12:=t _ ? ? ?",
    "l _ ? ? ? :    the code has used the notation @xmath149 and @xmath150 which is shown in the 36th row and the 37th row . the 38th row and the 39th row give the input of the superfield @xmath151 in eq.([l12 ] ) and the brst building block @xmath152 in eq.([t12 ] ) .",
    "v1t:=24 _ a d_b e_c f ) : @breakgendelta!(v1 t ) : v1:=v1^a b c d e f=@(v1 t ) : v2t:= _ c a_d g_e h _ b f : @asym!(v2t)_c,_d,_e : @asym!(v2t)_f,_g,_h : @asym!(v2t)_a,_b : v2:=v2^a b c d e f g h=@(v2 t ) : v3t1:= _ f g h m n p r s t u : v3t2:= ( _ n m_r f_t g_s p",
    "_ u h-_p m_t f_r g_u n_s",
    "h ) : @asym!(v3t2)_p,_t,_u : @asym!(v3t2)_f,_g,_h : @asym!(v3t2)_n,_r,_s : v3t3:= ( _ m f_v p _ t g_u",
    "n_r h_s v-_m f_v n _",
    "p_t h_u v ) : @asym!(v3t3)_p,_t,_u : @asym!(v3t3)_f,_g,_h : @asym!(v3t3)_n,_r,_s : v3t:=@(v3t1)+@(v3t2)-@(v3t3 ) : @eliminate_kr!(v3 t ) : v3:=v3^m n",
    "r s p t u f g h=@(v3 t ) :    the 41st row to the 55th row define the symbols @xmath153 , @xmath154 and @xmath155 which correspond to the pure spinor correlations in eqs.([ps1]-[ps3 ] ) respectively .",
    "com:=(s_1 1->0,s_2 2->0,s_3 3->0,s_4",
    "4->0,s_5 5->0 , ->0,->0,->0 , ->0,->0,->- -- , ->--- , ->-- -,->- -- , ->--- ):",
    "stu:=(s_3 5->s_1 2-s_4 5-s_3 4,s_1 3->s_4 5-s_1 2-s_2 3 , s_2 5->s_3 4-s_1 2-s_1 5,s_1 4->s_2 3-s_1 5-s_4 5,s_2 4- > s_1",
    "5-s_2 3-s_3 4 ) :    the 56th row to the 65th row give the input of replacement rule of on - shell identities @xmath156 , @xmath157 .",
    "considering momentum conservation @xmath158 , the scalar products @xmath159 , @xmath160 , @xmath161 , @xmath162 and @xmath163 are expressed by other scalar products and not shown in the final result .",
    "the 66th row to the 68th row declare the replacement rule in eq.([ss ] ) .",
    "lamthe:=s_1 2**(-1)s_4 5**(-1 ) t_1 2 v^3 t_4 5 : @substitute!!(lamthe)(@(t12),@(l21),@(vk ) ) : @distribute!(lamthe ) : @substitute!!(lamthe)(@(vi),@(aalpha),@(am),@(walpha ) ) : @distribute!(lamthe ) : @keep_weight!(lamthe)ps13 : @keep_weight!(lamthe)ps25 :    the 69th row give the input of the first term in eq.([tree5 ] ) , the result from other terms will be generated by cyclic permutations of the numbers @xmath164 , which can decrease the execution time .",
    "the 70th row replaces the brst building block @xmath152 and superfield @xmath151 with explicit expressions that consist of the superfields @xmath14 , @xmath15 and @xmath16 .",
    "the 71st row replaces the superfields @xmath14 , @xmath15 and @xmath16 with their @xmath40 expansions . the 72nd row and the 73rd row",
    "select the terms which have three @xmath89 s and five @xmath40 s .",
    "@combine!(lamthe ) : @substitute!!(lamthe)(- > + _ a b -_a c ) : @distribute!(lamthe ) : @prodsort!(lamthe ) : @substitute!!(lamthe)(->o_1^a , ->o_1^a b c , ->o_2^a b c ) : @substitute!!(lamthe ) ( o_1^ao_1^bo_1^co_2^d e f->v1^a b c d e f , o_1^ao_1^bo_1^c d eo_2^f g h->v2^a b c d e f g h , o_1^mo_1^n r so_1^p t uo_2^f",
    "g h->v3^m n r s p t",
    "u f g h ) :    the 74th row contracts the symbols with weyl spinor indices . at this step ,",
    "the result has one non - standard term @xmath165 , and the 75th to the 78th row do the following replacement @xmath166 the 79th row to 82nd row rewrite the amplitude with the notations in eqs.([o1]-[o3 ] ) . the 83rd row to the 86th row",
    "assemble the symbols @xmath167 , @xmath168 and @xmath169 into the symbols @xmath153 , @xmath154 and @xmath155 .",
    "@substitute!!(lamthe)(_af^?_b c ->k^?_a ( k^?_be^?_c - k^?_ce^?_b ) ) : @substitute!!(lamthe)(@(v1),@(v2),@(v3 ) ) : @canonicalise!(lamthe ) : @distribute!(lamthe ) : @substitute!!(lamthe)(z^?_a->e^?_a , f^?_a b->(k^?_ae^?_b- k^?_be^?_a ) ) : @distribute!(lamthe ) : @eliminate_kr!(lamthe ) : @prodsort!(lamthe ) : @substitute!!(lamthe)(e^?_ak^??_a- > , e^?_ae^??_a->,k^?_ak^??_a->s _ ? ? ?",
    ") : @substitute!!(lamthe)(@(com ) ) : @substitute!!(lamthe)(@(stu ) ) : @distribute!(lamthe ) : @prodsort!(lamthe ) : @collect_factors!(lamthe ) : lamtheini:=@(lamthe ) : @substitute!!(lamtheini)(e^1->e^r1,e^2->e^r2,e^3->e^r3 , e^4->e^r4,e^5->e^r5,k^1->k^r1,k^2->k^r2,k^3->k^r3 , k^4->k^r4,k^5->k^r5,s_1 2->s_r1 r2,s_2 3->s_r2 r3 , s_3 4->s_r3 r4,s_4 5->s_r4 r5,s_1 5->s_r1 r5 ) :    the 87th row and the 88th row replace the @xmath170 with explict expression @xmath171 .",
    "the 89th row and the 90th row replace the symbols @xmath153 , @xmath154 and @xmath155 with the products of several kronecker deltas in the right - hand of eqs.([ps1]-[ps3 ] ) . the 91st row and the 92nd row",
    "replace @xmath172 and @xmath173 with explicit expressions @xmath174 and @xmath175 .",
    "the replacement of @xmath170 and @xmath173 are divided into two steps and this could decrease the execution time .",
    "the 93rd row contracts the kronecker deltas with momenta @xmath97 and polarization vectors @xmath98 such that the kronecker deltas are removed from the following result . the 94th row and the 95th row contracts the momenta @xmath97 and polarization vectors @xmath98 .",
    "the 96th row applys the on - shell identities and momentum conservation to the result . in the 97th row ,",
    "the mandelstam variables with arbitrary powers are collected . at this step , the computation of first term in eq.([tree5 ] )",
    "is completed .",
    "the next step is to calculate other terms in eq.([tree5 ] ) by cyclic permutations of the labels @xmath164 .",
    "the 98th row to 102nd row replace the labels @xmath164 with the symbols @xmath176 .",
    "lamthe2:=@(lamtheini ) : @substitute!!(lamthe2)(^r1->^2,^r2->^3,^r3->^4,^r4->^5 , ^r5->^1,_r1->_2,_r2->_3,_r3->_4,_r4->_5,_r5->_1 ) : lamthe3:=@(lamtheini ) : @substitute!!(lamthe3)(^r1->^3,^r2->^4,^r3->^5,^r4->^1 , ^r5->^2,_r1->_3,_r2->_4,_r3->_5,_r4->_1,_r5->_2 ) : lamthe4:=@(lamtheini ) : @substitute!!(lamthe4)(^r1->^4,^r2->^5,^r3->^1,^r4->^2 , ^r5->^3,_r1->_4,_r2->_5,_r3->_1,_r4->_2,_r5->_3 ) : lamthe5:=@(lamtheini ) : @substitute!!(lamthe5)(^r1->^5,^r2->^1,^r3->^2,^r4->^3 , ^r5->^4,_r1->_5,_r2->_1,_r3->_2,_r4->_3,_r5->_4 ) : lamthe15:=@(lamthe)+@(lamthe2)+@(lamthe3)+@(lamthe4)+@(lamthe5 ) : @substitute!!(lamthe15)(s_5 1->s_1 5,s_2 1->s_1 2,s_3 2->s_2 3 , s_4 3->s_3 4,s_5",
    "4->s_4 5,- > , ->,- > , - > , ->,- > , - > , ->,- > , - > ) : @substitute!!(lamthe15)(@(com ) ) : @distribute!(lamthe15 ) : @prodsort!(lamthe15 ) ;    the 103rd row to the 114th row replace the symbols @xmath176 with @xmath177 , @xmath178 , @xmath179 and @xmath180 , and the results correspond to the other four terms in eq.([tree5 ] ) respectively . in the 115th row , the result from the five terms in eq.([tree5 ] ) are summed up .",
    "the 116th row to the 123rd row reorder the numbers in mandelstam variables and scalar products of momenta and polarization vectors .",
    "the 124th row applys the on - shell identities to the result .",
    "finally , the 125th row generates the final result for 5-gluon superstring amplitude . using the algorithm ` @timing `",
    ", one can check the execution time spent in the routine , and for our laptop the execution time is about 29 seconds .",
    "the final output is    & e^1e^3e^2k^1e^4k^3e^5k^2s_12 ^ -1s_45 ^ -1-e^1e^3e^2e^5e^4k^1s_45 ^",
    "-1-e^1e^3e^2e^5e^4k^2s_45 ^ -1 & + & -e^1e^3e^2e^5e^4k^3s_45 ^ -1-e^1e^5e^2k^1e^3k^2e^4k^1s_12 ^ -1s_45 ^ -1-e^1e^5e^2k^1 e^3k^2 & + &",
    "e^4k^2s_12 ^ -1s_45 ^ -1-e^1e^5e^2k^1e^3k^2e^4k^3s_12 ^ -1s_45 ^ -1+e^1e^5e^2e^3e^4k^1s_45 ^ -1 +  , &    which is consistent with the result in @xcite .",
    "in this article , we have displayed the complicated computations of the superstring scattering amplitudes in pure spinor formalism can be dealed with the algorithms in package cadabra .",
    "cadabra was designed as making problem solving resemble as close as possible the steps one would follow with pencil and paper .",
    "the input and output using tex format make it easier for beginners .",
    "the performances , such as , the selecting of terms with @xmath13 , the calculations of pure spinor correlations in terms of kronecker deltas and so on , are well done in cadabra . however , there are also several inconveniences , such as , the complicated substitutions , the definition of tensor functions and the programming language .",
    "all of these are expected to be improved in the new version of cadabra .",
    "recently , motivated by the computations in pure spinor formalism @xcite , kinematic factors of the @xmath10-point string amplitude at tree - level can always be written in terms of multiparticle vertex operators which are described by multiparticle superfields @xmath181 , @xmath182 , @xmath183 , @xmath184 , where @xmath185 @xcite . the @xmath10-point sym tree - level amplitude with multiparticle berends - giele currents",
    "is expressed in terms of the components @xmath186 and @xmath187 which depend on the single - particle gluon polarizations @xmath188 and the single - particle gluino polarizations @xmath189 .",
    "all tree - level computations can be reduced to the @xmath190 correlators from the 3-point function .",
    "these developments greatly simplify the extraction of components from pure spinor superspace expressions and lead to significant performance improvements for computer methods .",
    "we are indebted to ricardo medina and c. r. mafra for valuable comments on a draft of this article .",
    "the work has been supported by the natural science foundation of hebei province with grant no .",
    "a2016201069 , the science research foundation of china three gorges university with grant no.kj2015a007 .",
    "n. berkovits , super poincar@xmath191 covariant quantization of the superstring , jhep 04 ( 2000 ) 018 .",
    "n. berkovits , explaining the pure spinor formalism for the superstring , jhep 01 ( 2008)065 .",
    "n. berkovits and d.z .",
    "marchioro , relating the green - schwarz and pure spinor formalisms for the superstring , jhep 01 ( 2005 ) 018 .",
    "y. aisaka and y. kazama , origin of pure spinor superstring , jhep 05 ( 2005 ) 046 .",
    "n. berkovits , origin of the pure spinor and green - schwarz formalisms , jhep 1507 ( 2015 ) 091 .",
    "n. berkovits and b. c. vallilo , consistency of super - poincar@xmath191 covariant superstring tree amplitudes , jhep07(2000)015 . c. r. mafra , four - point one - loop amplitude computation in the pure spinor formalism , jhep 0601 ( 2006 ) 075",
    ". n. berkovits , c.r .",
    "mafra , equivalence of two - loop superstring amplitudes in the pure spinor and rns formalisms , phys .",
    "96 ( 2006 ) 011602 .",
    "mafra , simplifying the tree - level superstring massless five - point amplitude , jhep 1001 ( 2010 ) 007 .",
    "r. medina and l.a .",
    "barreiro , higher n - point amplitudes in open superstring theory , posic2006 ( 2006 ) 038 .",
    "mafra , o. schlotterer , s. stieberger , d. tsimpis , six open string disk amplitude in pure spinor superspace , nucl .",
    "b 846 ( 2011 ) 359 . c.r .",
    "mafra , o. schlotterer , s. stieberger and d. tsimpis , a recursive method for sym n - point tree amplitudes , phys .",
    "d 83 ( 2011 ) 126012 .",
    "ricardo medina , fernando t. brandt , fabiano r. machado , the open superstring five point amplitude revisited , jhep 0207 ( 2002 ) 071 .",
    "luiz antonio barreiro , ricardo medina , 5-field terms in the open superstring effective action , jhep 0503(2005)055 .",
    "luiz antonio barreiro , ricardo medina , rns derivation of n - point disk amplitudes from the revisited s - matrix approach , nucl.phys .",
    "b886 ( 2014 ) 870 - 951 .",
    "mafra , o. schlotterer and s. stieberger , complete n - point superstring disk amplitude i. pure spinor computation , nucl .",
    "b 873 ( 2013 ) 419 . f.a .",
    "berends and w.t .",
    "giele , recursive calculations for processes with n - gluons , nucl .",
    "b 306 ( 1988 ) 759 .",
    "j. martin - garcia , xact : efficient tensor computer algebra for the wolfram language , http://www.xact.es/. d.a .",
    "bolotin , s.v .",
    "poslavsky , introduction to redberry : a computer algebra system designed for tensor manipulation , arxiv:1302.1219 .",
    "maple inc .",
    ", maple physics package , http://www.maplesoft.com . k. peeters , a field - theory motivated approach to symbolic computer algebra , comput .",
    "176 ( 2007 ) 550 - 558 .",
    "k. peeters , introducing cadabra : a symbolic computer algebra system for field theory problems , arxiv : hep - th/0701238 .",
    "p. a. grassi and l. tamassia ,",
    "vertex operators for closed superstrings , jhep 0407 ( 2004 ) 071 . g. policastro and d. tsimpis , @xmath192 , purified , class . quant .",
    "23 ( 2006 ) 4753 .",
    "harnad and s. shnider , constraints and field equations for ten - dimensional super yang - mills theory , commun .",
    "106 ( 1986 ) 183 .",
    "e. witten , twistor - like transform in ten - dimensions , nucl .",
    "b 266 ( 1986 ) 245 .",
    "n. berkovits , ictp lectures on covariant quantization of the superstring , arxiv : hep - th/0209059 .",
    "r. kleiss and h. kuijf , multi - gluon cross - sections and five jet production at hadron colliders , nucl .",
    "b 312 ( 1989 ) 616 .",
    "n. berkovits and c. r. mafra , some superstring amplitude computations with the non - minimal pure spinor formalism , jhep 0611 ( 2006 ) 079 .",
    "mafra , pss : a form program to evaluate pure spinor superspace expressions , arxiv:1007.4999 .",
    "mafra and o. schlotterer , http://www.damtp.cam.ac.uk/user/crm66/sym/pss.html carlos r. mafra , oliver schlotterer , the structure of n - point one - loop open superstring amplitudes , jhep 1408 ( 2014 ) 099 .",
    "mafra , pure spinor superspace identities for massless four - point kinematic factors , jhep 04 ( 2008 ) 093 .",
    "mafra and o. schlotterer , multiparticle sym equations of motion and pure spinor brst blocks , jhep 07 ( 2014 ) 153 .",
    "mafra and o. schlotterer , solution to the nonlinear field equations of ten dimensional supersymmetric yang - mills theory , phys .",
    "d 92 ( 2015 ) 066001 .",
    "seungjin lee , carlos r. mafra , oliver schlotterer , non - linear gauge transformations in d=10 sym theory and the bcj duality , jhep 1603 ( 2016 ) 090 ."
  ],
  "abstract_text": [
    "<S> in this paper , we will illustrate how computer algebra system cadabra is used in computing the supersymmetric amplitude in pure spinor formalism and provide the source code that computes the tree - level massless 5-gluon amplitude .    ' '' ''    ' '' '' </S>"
  ]
}