{
  "article_text": [
    "in this paper , we look at a variant of the standard vertex coloring problem that we name graph _ multicoloring_. given an @xmath22-node graph @xmath1 , the goal is to assign a set @xmath9 of colors to each node @xmath23 such that the color sets @xmath8 and @xmath9 of two adjacent nodes @xmath24 and @xmath23 are disjoint while at the same time , the fraction of colors assigned to each node is as large as possible and the total number of colors used is as small as possible . in particular ,",
    "we look at the following _ distributed _ variant of this multicoloring problem .",
    "each node has a unique identifier ( i d ) between @xmath2 and @xmath3 for an integer parameter @xmath25 .",
    "the nodes are _ autonomous agents _ and we assume that every agent has only very limited , _ local _ information about @xmath5 . specifically , we assume that every node @xmath23 merely knows its own i d as well as the ids of all its neighbors .",
    "based on this local information , every node @xmath6 needs to compute a color set @xmath9 such that the color sets computed by adjacent nodes are disjoint . since our locality condition implies that every node is allowed to communicate with each neighbor only once , we call such a a distributed algorithm a _",
    "one - shot algorithm_.    we prove nearly tight upper and lower bounds for deterministic and randomized algorithms solving the above distributed multicoloring problem .",
    "let @xmath14 be the largest degree of @xmath5 .",
    "we show that for every @xmath26 , there is a deterministic multicoloring algorithm that uses @xmath27 colors and assigns a @xmath17-fraction of all colors to each node of degree @xmath18 .",
    "note that because a node @xmath6 of degree @xmath18 does not know anything about the topology of @xmath5 ( except that itself has @xmath18 neighbors ) , no one - shot multicoloring algorithm can assign more than a @xmath28-fraction of the colors to all nodes of degree @xmath18 ( the nodes could be in a clique of size @xmath29 ) .",
    "the upper bound proof is based on the probabilistic method and thus only establishes the existence of an algorithm .",
    "we describe an algebraic construction yielding an explicit algorithm that achieves the same bounds up to polylogarithmic factors . using @xmath30 colors , for a value @xmath31 ,",
    "the algorithm assigns a @xmath32-fraction of all colors to nodes of degree @xmath18 .",
    "at the cost of using @xmath33 colors , it is even possible to improve the fraction of colors assigned to each node by a factor of @xmath34 .",
    "the deterministic upper bound results are complemented by a lower bound showing that if @xmath15 , even for the standard vertex coloring problem , every deterministic one - shot algorithm needs to use at least @xmath16 colors .",
    "if we allow the nodes to use randomization ( and only require that the claimed bounds are obtained with high probability ) , we can do significantly better . in a randomized one - shot algorithm , we assume that every node can compute a sequence of random bits at the beginning of an algorithm and that nodes also know their own random bits as well as the random bits of the neighbors when computing the color set .",
    "we show that for @xmath35 , with high probability , @xmath36 colors suffice to assign a @xmath17-fraction of all colors to every node of degree @xmath18 .",
    "if @xmath37 for a constant @xmath31 , we show that every randomized one - shot algorithm needs at least @xmath38 colors . again , the lower bound even holds for standard vertex coloring algorithms where every node only needs to choose a single color .    synchronizing the access to a common resource is a typical application of coloring in networks .",
    "if we have a @xmath39-coloring of the network graph , we can partition the resource ( and/or time ) into @xmath39 parts and assign a part to each node @xmath6 depending on @xmath6 s color . in such a setting , it seems natural to use a multicoloring instead of a standard vertex coloring and assign more than one part of the resource to every node .",
    "this allows to use the resource more often and thus more efficiently .",
    "the most prominent specific example of this basic approach occurs in the context of media access control ( mac ) protocols for wireless ad hoc and sensor networks .",
    "these networks consist of autonomous wireless devices that communicate with each other by the use of radio signals .",
    "if two or more close - by nodes transmit radio signals at the same time , a receiving node only hears the superposition of all transmitted signals .",
    "hence , simultaneous transmissions of close - by nodes interfere with each other and we thus have to control the access to the wireless channel . a standard way to avoid interference between close - by transmissions is to use a time ( tdma ) , frequency ( fdma ) , or code division multiple access ( cdma ) scheme to divide the channel among the nodes . a tdma protocol divides the time into time slots and assigns different time slots to conflicting nodes . when using fdma , nodes that can interfere with each other are assigned different frequencies , whereas a cdma scheme uses different ( orthogonal ) codes for interfering nodes .",
    "classically , tdma , fdma , and cdma protocols are implemented by a standard vertex coloring of the graph induced by the interference relations . in all three cases , it would be natural to use the more general multicoloring problem in order to achieve a more effective use of the wireless medium .",
    "efficient tdma schedules , fdma frequency assignments , or cdma code assignments are all directly obtained from a multicoloring of the interference graph where the fraction of colors assigned to each nodes is as large as possible .",
    "it is also natural to require that the total number of colors is small .",
    "this keeps the length of a tdma schedule or the total number of frequencies or codes small and thus helps to improve the efficiency and reduce unnecessary overhead of the resulting mac protocols .",
    "in contrast to many wired networks , wireless ad hoc and sensor networks typically consist of small devices that have limited computing and storage capabilities .",
    "because these devices operate on batteries , wireless nodes also have to keep the amount of computation and especially communication to a minimum in order to save energy and thus increase their lifetime . as the nodes of an ad hoc or sensor network need to operate without central control , everything that is computed , has to be computed by a distributed algorithm by the nodes themselves .",
    "coordination between the nodes is achieved by exchanging messages .",
    "because of the resource constraints , these distributed algorithms need to be as simple and efficient as possible .",
    "the messages transmitted and received by each node should be as few and as short as possible .",
    "note that because of interference , the bandwidth of each local region is extremely limited .",
    "typically , for a node @xmath6 , the time needed to even receive a single message from all neighbors is proportional to the degree of @xmath6 ( see e.g.  @xcite ) .",
    "as long as the information provided to each node is symmetric , it is clear that every node needs to know the ids of all adjacent nodes in @xmath5 in order to compute a reasonably good multicoloring of @xmath5 .",
    "hence , the one - shot multicoloring algorithms considered in this paper base their computations on the minimum information needed to compute a non - trivial solution to the problem . based on the above observations , even learning the ids of all neighbors requires quite a bit of time and resources .",
    "hence , acquiring significantly more information might already render an algorithm inapplicable in practice .- neighborhood , the best deterministic coloring algorithm that we are aware of needs @xmath40 colors . ]    as a result of the scarcity of resources , the size and simplicity of the wireless devices used in sensor networks , and the dependency of the characteristic of radio transmissions on environmental conditions , ad hoc and sensor networks are much less stable than usual wired networks . as a consequence , the topology of these networks ( and of their interference graph )",
    "can be highly dynamic .",
    "this is especially true for ad hoc networks , where it is often even assumed that the nodes are mobile and thus can move in space . in order to adapt to such dynamic conditions",
    ", a multicoloring needs to be recomputed periodically .",
    "this makes the resource and time efficiency of the used algorithms even more important .",
    "this is particularly true for the locality of the algorithms .",
    "if the computation of every node only depends on the topology of a close - by neighborhood , dynamic changes also only affect near - by nodes .",
    "the remainder of the paper is organized as follows . in section [ sec : relwork ] , we discuss related work .",
    "the problem is formally defined in section [ sec : problem ] .",
    "we present the deterministic and randomized upper bounds in section [ sec : upperbounds ] and the lower bounds in section [ sec : lowerbounds ] .",
    "there is a rich literature on distributed algorithms to compute classical vertex colorings ( see e.g. @xcite ) .",
    "the paper most related to the present one is @xcite . in @xcite ,",
    "deterministic algorithms for the standard coloring problem in the same distributed setting are studied ( i.e. , every node has to compute its color based on its i d and the ids of its neighbors ) .",
    "the main result is a @xmath41 lower bound on the number of colors .",
    "the first paper to study distributed coloring is a seminal paper by linial @xcite .",
    "the main result of @xcite is an @xmath42-time lower bound for coloring a ring with a constant number of colors . as a corollary of this lower bound , one obtains an @xmath43 lower bound on the number of colors for deterministic one - shot coloring algorithms as studied in this paper .",
    "linial also looks at distributed coloring algorithms for general graph and shows that one can compute an @xmath44-coloring in time @xmath45 . in order to color a general graph with less colors ,",
    "the best known distributed algorithms are significantly slower .",
    "coloring can be computed in time @xmath46 .",
    "however , the argumentation in @xcite has a fundamental flaw that can not be fixed @xcite . ] using randomization , an @xmath47-coloring can be obtained in time @xmath48 @xcite .",
    "further , the fastest algorithm to obtain a @xmath49-coloring is based on an algorithm to compute a maximal independent set by luby @xcite and on a reduction described in @xcite and has time complexity @xmath50 .",
    "the best known deterministic algorithms to compute a @xmath49-coloring have time complexities @xmath51 and @xmath52 and are described in @xcite and @xcite , respectively . for special graph classes , there are more efficient deterministic algorithms .",
    "it has long been known that in rings @xcite and bounded degree graphs @xcite , a @xmath49-coloring can be computed in time @xmath45 .",
    "very recently , it has been shown that this also holds for the much larger class of graphs with bounded local independent sets @xcite .",
    "in particular , this graph class contains all graph classes that are typically used to model wireless ad hoc and sensor networks .",
    "another recent result shows that graphs of bounded arboricity can be colored with a constant number of colors in time @xmath50 @xcite .",
    "closely related to vertex coloring algorithms are distributed algorithms to compute edge colorings @xcite . in a seminal paper , naor and stockmeyer were the first to look at distributed algorithms where all nodes have to base their decisions on constant neighborhoods @xcite .",
    "it is shown that a weak coloring with @xmath53 colors ( every node needs to have a neighbor with a different color ) can be computed in time @xmath54 if every vertex has an odd degree .",
    "another interesting approach is taken in @xcite where the complexity of distributed coloring is studied in case there is an oracle that gives some nodes a few bits of extra information .",
    "there are many papers that propose to use some graph coloring variant in order to compute tdma schedules and fdma frequency or cdma code assignments ( see e.g.@xcite ) .",
    "many of these papers compute a vertex coloring of the network graph such that nodes at distance at most @xmath54 have different colors .",
    "this guarantees that no two neighbors of a node use the same time slot , frequency , or code . some of the papers also propose to construct a tdma schedule by computing an edge coloring and using different time slots for different edges . clearly , it is straight - forward to use our algorithms for edge colorings , i.e. , to compute a multicoloring of the line graph . with the exception of @xcite",
    "all these papers compute a coloring and assign only one time slot , frequency , or code to every node or edge . in @xcite , first , a standard coloring is computed .",
    "based on this coloring , an improved slot assignment is constructed such that in the end , the number of slots assigned to a node is inversely proportional to the number of colors in its neighborhood .",
    "throughout the paper , we use @xmath55 to denote logarithms to base @xmath54 and @xmath56 to denote natural logarithms , respectively . by @xmath57 and by @xmath58 , we denote the @xmath59-fold applications of the logarithm functions @xmath60 and @xmath61 to @xmath62 , respectively , @xmath63 , and @xmath64 . note that we also use @xmath65 and @xmath66 .",
    "the log star function is defined as @xmath67 .",
    "we also use the following standard notations . for an integer @xmath68 , @xmath69=\\{1,\\ldots , n\\}$ ] . for a finite set @xmath70 and an integer @xmath71 , @xmath72 . the term with high probability ( w.h.p . )",
    "means with probability at least @xmath73 for a constant @xmath74 .",
    "the multicoloring problem that was introduced in section [ sec : intro ] can be formally defined as follows .",
    "an @xmath75-multicoloring @xmath76 of a graph @xmath1 is a mapping @xmath77}$ ] that assigns a set @xmath78 $ ] of colors to each node @xmath6 of @xmath5 such that @xmath79 and such that for every node @xmath23 of degree @xmath18 , @xmath80 .",
    "we call @xmath81 the _ approximation ratio _ of a @xmath75-multicoloring . because in a one - shot algorithm ( cf .",
    "the next section for a formal definition ) , a node of degree @xmath18 can not distinguish @xmath5 from @xmath82 , the approximation ratio of every one - shot algorithm needs to be at most @xmath2 .",
    "the multicoloring problem is related to the fractional coloring problem in the following way .",
    "assume that every node is assigned the same number @xmath39 of colors and that the total number of colors is @xmath83 .",
    "taking every color with fraction @xmath84 then leads to a fractional @xmath85-coloring of @xmath5 .",
    "hence , in this case , @xmath86 is lower bounded by the fractional chromatic number @xmath87 of @xmath5 .",
    "as outlined in the introduction , we are interested in local algorithms to compute multicolorings of an @xmath22-node graph @xmath1 . for a parameter @xmath25",
    ", we assume that every node @xmath6 has a unique i d @xmath88 $ ] . in deterministic algorithms ,",
    "every node has to compute a color set based on its own i d as well as the ids of its neighbors . for randomized algorithms ,",
    "we assume that nodes also know the random bits of their neighbors .",
    "formally , a one - shot algorithm can be defined as follows .",
    "we call a distributed algorithm a one - shot algorithm if every node @xmath6 performs ( a subset of ) the following three steps : + 1 .",
    "generate sequence @xmath89 of random bits ( deterministic algorithms : @xmath90 ) + 2 .",
    "send @xmath91 to all neighbors + 3 .",
    "compute solution based on @xmath92 , @xmath89 , and the received information    assume that @xmath5 is a network graph such that two nodes @xmath10 and @xmath6 can directly communicate with each other iff they are connected by an edge in @xmath5 .",
    "in the standard _ synchronous message passing _ model , time is divided into rounds and in every round , every node of @xmath5 can send a message to each of its neighbors .",
    "one - shot algorithms then exactly correspond to computations that can be carried out in a single communication round .    for deterministic one - shot algorithms ,",
    "the output of every node @xmath6 is a function of @xmath6 s i d @xmath92 and the ids of @xmath6 s neighbors .",
    "we call this information on which @xmath6 bases its decisions , the _ one - hop view _ of @xmath6 .    consider a node @xmath6 with i d @xmath92 and let @xmath93 be the set of ids of the neighbors of @xmath6 .",
    "we call the pair @xmath94 the one - hop view of @xmath6 .",
    "let @xmath95 and @xmath94 be the one - hop views of two adjacent nodes . because @xmath10 and @xmath6 are neighbors , we have @xmath96 and that @xmath97 .",
    "it is also not hard to see that @xmath98\\text { and }    \\forall \\gamma_u,\\gamma_v\\in2^{[n]}\\text { such that }    x_u\\not = x_v , x_u\\in\\gamma_v\\setminus\\gamma_u ,     x_v\\in\\gamma_u\\setminus\\gamma_v,\\ ] ] there is a labeled graph that has two adjacent nodes @xmath10 and @xmath6 with one - hop views @xmath95 and @xmath94 , respectively . assume that we are given a graph with maximum degree @xmath14 ( i.e. , for all one - hop views @xmath94 , we have @xmath99 ) .",
    "a one - shot vertex coloring algorithm maps every possible one - hop view to a color .",
    "a correct coloring algorithm must assign different colors to two one - hop views @xmath95 and @xmath94 iff they satisfy condition .",
    "this leads to the definition of the _ neighborhood graph _",
    "@xcite ( the general notion of neighborhood graphs has been introduced in @xcite ) .",
    "the nodes of @xmath100 are all one - hop views @xmath94 with @xmath99 .",
    "there is an edge between @xmath95 and @xmath94 iff the one - hop views satisfy condition .",
    "hence , a one - shot coloring algorithm must assign different colors to two one - hop views iff they are neighbors in @xmath100 .",
    "the number of colors that are needed to properly color graphs with maximum degree @xmath14 by a one - shot algorithm therefore exactly equals the chromatic number @xmath101 of the neighborhood graph ( see @xcite for more details ) .",
    "similarly , a one - shot @xmath75-multicoloring algorithm corresponds to a @xmath75-multicoloring of the neighborhood graph .",
    "in this section , we prove all the upper bounds claimed in section [ sec : intro ] .",
    "we first prove that an efficient deterministic one - shot multicoloring algorithm exists in section [ sec : existence ] .",
    "based on similar ideas , we derive an almost optimal randomized algorithm in section [ sec : randalg ] .",
    "finally , in section [ sec : constructive ] , we introduce constructive methods to obtain one - shot multicoloring algorithms .",
    "for all algorithms , we assume that the nodes know the size of the i d space @xmath3 as well as @xmath14 , an upper bound on the largest degree in the network .",
    "it certainly makes sense that nodes are aware of the used i d space .",
    "note that it is straight - forward to see that there can not be a non - trivial solution to the one - shot multicoloring problem if the nodes do not have an upper bound on the maximum degree in the network .      the existence of an efficient , deterministic one - shot multicoloring algorithm is established by the following theorem .",
    "[ thm : probabilistic ] assume that we are given a graph with maximum degree @xmath14 and node ids in @xmath102 $ ] .",
    "then , for all @xmath103 , there is a deterministic , one - shot @xmath104-multicoloring algorithm .",
    "we use permutations to construct colors as described in @xcite . for @xmath105 , let @xmath106 be a global order on the i d set @xmath102 $ ] . a node @xmath6 with @xmath2-hop view @xmath94 includes color @xmath59 in its color set iff @xmath107 .",
    "it is clear that with this approach the color sets of adjacent nodes are disjoint . in order to show that nodes of degree @xmath18 obtain a @xmath108-fraction of all colors , we need to show that for all @xmath109 $ ] , all @xmath110 $ ] , and all @xmath111\\setminus\\{x\\}\\choose\\delta}$ ] , for all @xmath112 , @xmath113 for at least @xmath114 global orders @xmath106 .",
    "we use the probabilistic method to show that a set of size @xmath115 of global orders @xmath106 exists such that every node of degree @xmath109 $ ] gets at least an @xmath17-fraction of the @xmath83 colors .",
    "such a set implies that there exists an algorithm that satisfies the claimed bounds for all graphs with maximum degree @xmath14 and ids in @xmath102 $ ] .",
    "let @xmath116 be @xmath83 global orders chosen independently and uniformly at random .",
    "the probability that a node @xmath6 with degree @xmath18 and @xmath2-hop view @xmath94 gets color @xmath59 is @xmath28 ( note that @xmath117 ) .",
    "let @xmath118 be the number of colors that @xmath6 gets .",
    "we have @xmath119=k/(\\delta+1)\\ge k/(\\delta+1)$ ] . using a chernoff bound ,",
    "we then obtain @xmath120 =    { \\ensuremath{\\mathbb{p}}}\\left[x_v<(1-{\\ensuremath{\\varepsilon}})\\cdot{\\ensuremath{\\mathbb{e}}}[x_v]\\right ] <    e^{-{\\ensuremath{\\varepsilon}}^2{\\ensuremath{\\mathbb{e}}}[x_v]/2}\\le     \\frac{1}{n^{\\delta+1}}.\\ ] ] the total number of different possible one - hop views can be bounded as @xmath121 by a union bound argument , we therefore get that with positive probability , for all @xmath109 $ ] , all possible one - hop views @xmath94 with @xmath117 get at least @xmath122 colors .",
    "hence , there exists a set of @xmath83 global orders on the i d set @xmath102 $ ] such that all one - hop views obtain at least the required number of colors .",
    "* remark : * note that if we increase the number of permutations ( i.e. , the number of colors ) by a constant factor , all possible one - hop views @xmath123 with @xmath124 get a @xmath17-fraction of all colors w.h.p .",
    "we will now show that with the use of randomization , the upper bound of section [ sec : existence ] can be significantly improved if the algorithm only needs to be correct w.h.p .",
    "we will again use random permutations .",
    "the problem of the deterministic algorithm is that the algorithm needs to assign a large set of colors to all roughly @xmath125 possible one - hop views . with the use of randomization",
    ", we essentially only have to assign colors to @xmath22 randomly chosen one - hop views .    for simplicity , we assume that every node knows the number of nodes @xmath22 ( knowing an upper bound on @xmath22 is sufficient ) . for an integer parameter @xmath126 , every @xmath23 chooses @xmath83 independent random numbers @xmath127 $ ] and sends these random numbers to all neighbors .",
    "we use these random numbers to induce @xmath83 random permutations on the nodes .",
    "let @xmath128 be the set of neighbors of a node @xmath6 .",
    "a node @xmath6 selects all colors @xmath59 for which @xmath129 for all @xmath130 .",
    "[ thm : randalg ] choosing @xmath131 leads to a randomized one - shot algorithm that computes a @xmath132-multicoloring w.h.p .",
    "* remark : * in the above algorithm , every node has to generate @xmath133 random bits and send these bits to the neighbors . using a ( non - trivial ) probabilistic argument",
    ", it is possible to show that the same result can be achieved using only @xmath50 random bits per node .",
    "we have shown in section [ sec : existence ] that there is a deterministic one - shot algorithm that almost matches the lower bound ( cf .",
    "theorem [ thm : detlb ] ) .",
    "unfortunately , the techniques of section [ sec : existence ] do not yield an explicit algorithm . in this section",
    ", we will present constructive methods to obtain a one - shot multicoloring algorithm .",
    "one - hop view @xmath123 , parameter @xmath134    set @xmath135 of colors , initially @xmath136 @xmath137 ; @xmath138 @xmath139 ; @xmath140",
    "@xmath141    we develop the algorithm in two steps .",
    "first , we construct a multicoloring where in the worst case , every node @xmath6 obtains the same fraction of colors independent of @xmath6 s degree .",
    "we then show how to increase the fraction of colors assigned to low - degree nodes .",
    "for an integer parameter @xmath134 , let @xmath142 be prime powers and let @xmath143 be positive integers such that @xmath144 and @xmath145 for @xmath146 .",
    "for a prime power @xmath147 and a positive integer @xmath148 , let @xmath149 be the set of all @xmath150 polynomials of degree at most @xmath148 in @xmath151 $ ] , where @xmath152 is the finite field of order @xmath147 .",
    "we assume that that we are given an injection @xmath153 from the i d set @xmath102 $ ] to the polynomials in @xmath154 and injections @xmath155 from @xmath156 to @xmath157 for @xmath146 . for a value @xmath62 in the respective domain ,",
    "let @xmath158 be the polynomial assigned to @xmath62 by injection @xmath155 .",
    "the first part of the algorithm is an adaptation of a technique used in a coloring algorithm described in @xcite that is based on an algebraic construction of @xcite .",
    "there , a node @xmath6 with one - hop view @xmath123 selects a color @xmath159 , where @xmath160 is a value for which @xmath161 for all @xmath112 ( we have to set @xmath162 and @xmath163 such that this is always possible ) .",
    "we make two modifications to this basic algorithm . instead of only selecting one value @xmath160 such that @xmath164 , we select all values @xmath165 for which this is true .",
    "we then use these values recursively ( as if @xmath166 was the i d of @xmath6 ) @xmath167 times to reduce the dependence of the approximation ratio of the coloring on @xmath3 .",
    "the details of the first step of the algorithm are given by algorithm [ alg : constructivebasic ] .",
    "[ lemma : basicalganalysis ] assume that for @xmath168 , @xmath169 where @xmath170 .",
    "then , algorithm [ alg : constructivebasic ] constructs a multicoloring with @xmath171 colors where every node at least receives a @xmath172-fraction of all colors where @xmath173 .",
    "all colors that are added to the color set in line 6 are from @xmath174 .",
    "it is therefore clear that the number of different colors is @xmath171 as claimed . from the condition in line 5",
    ", it also follows that the color sets of adjacent nodes are disjoint .    to determine the approximation ratio , we count the number of colors , a node @xmath6 with one - hop view @xmath123 gets .",
    "first note that the condition in line 5 of the algorithm implies that ( and is therefore equivalent to demand that ) @xmath175 for all @xmath112 and for all @xmath176 because @xmath177 implies @xmath178 for all @xmath179 .",
    "we therefore need to count the number of @xmath180 for which @xmath175 for all @xmath176 and all @xmath112 .",
    "we prove by induction on @xmath59 that for @xmath181 , there are at least @xmath182 tuples @xmath183 with @xmath184 for all @xmath185 .",
    "let us first prove the statement for @xmath186 . because the ids of adjacent nodes are different , we know that @xmath187 for all @xmath112 .",
    "two different degree @xmath163 polynomials can be equal at at most @xmath163 values .",
    "hence , for every @xmath112 , @xmath188 for at most @xmath163 values @xmath165 .",
    "thus , since @xmath189 , there are at least @xmath190 values @xmath165 for which @xmath187 for all @xmath112 .",
    "this establishes the statement for @xmath186 . for @xmath191 ,",
    "the argument is analogous .",
    "let @xmath192 be such that @xmath184 for all @xmath112 and all @xmath193 .",
    "because @xmath194 , we have @xmath195 . thus , with the same argument as for @xmath186 , there are at least @xmath196 values @xmath197 such that @xmath175 for all @xmath112 .",
    "therefore , the number of colors in the color set of every node is at least @xmath198 .",
    "this is a @xmath199-fraction of all colors .",
    "the next lemma specifies how the values of @xmath200 , @xmath201 , and @xmath202 can be chosen to obtain an efficient algorithm .",
    "[ lemma : basicalgparams ] let @xmath167 be such that @xmath203 . for @xmath204 , we can then choose @xmath200 , @xmath201 , and @xmath202 such that algorithm [ alg : constructivebasic ] computes a multicoloring with @xmath205 colors and such that every node gets at least a @xmath206-fraction of all colors .",
    "the number of colors that algorithm [ alg : constructivebasic ] assigns to nodes with degree almost @xmath14 is close to optimal even for small values of @xmath167 .",
    "if we choose @xmath207 , nodes of degree @xmath208 even receive at least a @xmath209-fraction of all colors for some constant @xmath148 . because the number of colors assigned to a node @xmath6 is independent of @xmath6 s degree , however , the coloring of algorithm [ alg : constructivebasic ] is far from optimal for low - degree nodes . in the following ,",
    "we show how to improve the algorithm in this respect .",
    "one - hop view @xmath123 , instances @xmath210 for @xmath211 $ ] of algorithm [ alg : constructivebasic ] , parameter @xmath212 $ ]    set @xmath135 of colors , initially @xmath136 @xmath213 * for all * @xmath214 $ ] * do * @xmath215    let @xmath216 be an instance of algorithm [ alg : constructivebasic ] for nodes with degree at most @xmath14 and let @xmath217 be the color set of @xmath216 .",
    "further , for a one - hop view @xmath123 , let @xmath218 $ ] be the colors assigned to @xmath123 by algorithm @xmath216 .",
    "we run instances @xmath210 for all @xmath211 $ ] .",
    "a node @xmath6 with degree @xmath18 chooses the colors of all instances for which @xmath219 . in order to achieve the desired trade - offs ,",
    "we introduce an integer weight @xmath220 for each color @xmath39 , i.e. , instead of adding color @xmath39 , we add colors @xmath221 .",
    "the details are given by algorithm [ alg : constructive1 ] .",
    "the properties of algorithm [ alg : constructive1 ] are summarized by the next theorem .",
    "the straight - forward proof is omitted .",
    "[ thm : explicitalg ] assume that in the instances of algorithm [ alg : constructivebasic ] , the parameter @xmath167 is chosen such that for all @xmath14 , @xmath216 assigns at least a @xmath222-fraction of the colors to every node . then , for a parameter @xmath212 $ ] , algorithm [ alg : constructive1 ] computes a @xmath223-multicoloring .    let @xmath212 $ ] and @xmath224 be a fixed constant in all used instances of algorithm [ alg : constructivebasic ] .",
    "then , algorithm [ alg : constructive1 ] computes an @xmath225-multicoloring .",
    "in particular , choosing @xmath226 leads to an @xmath227-multicoloring .",
    "taking the maximum possible value for @xmath167 in all used instances of algorithm [ alg : constructivebasic ] yields an @xmath228-multicoloring .",
    "in this section , we give lower bounds on the number of colors required for one - shot multicoloring algorithms .",
    "in fact , we even derive the lower bounds for algorithms that need to assign only one color to every node , i.e. , the results even hold for standard coloring algorithms .    it has been shown in @xcite that every deterministic one - shot @xmath39-coloring algorithm @xmath229 can be interpreted as a set of @xmath39 antisymmetric relations on the i d set @xmath102 $ ] .",
    "assume that @xmath229 assigns a color from a set @xmath230 with @xmath231 to every one - hop view @xmath123 .",
    "for every color @xmath232 , there is a relation @xmath233 such that for all @xmath234 $ ] @xmath235 .",
    "algorithm @xmath229 can assign color @xmath232 to a one - hop view @xmath123 iff @xmath236 .    for @xmath232 ,",
    "let @xmath237:x\\not{\\ensuremath{\\vartriangleleft_{\\alpha}}}y\\}$ ] be the set of ids that must not be adjacent to an @xmath165-colored node with i d @xmath62 . to show that there is no deterministic , one - shot @xmath39-coloring algorithm , we need to show that for every @xmath39 antisymmetric relations @xmath238 on @xmath102 $ ] , there is a one - hop view @xmath123 such that @xmath239 : \\gamma\\cap{\\ensuremath{\\mathrm{bad}_{\\alpha_i}(x)}}\\not=\\emptyset$ ] .",
    "the following lemma is a generalization of lemma 4.5 in @xcite and key for the deterministic and the randomized lower bounds .",
    "as the proof is along the same lines as the proof of lemma 4.5 in @xcite , it is omitted here .",
    "[ lemma : badcol ] let @xmath240 $ ] be a set of ids and let @xmath241 and @xmath242 be positive integers such that @xmath243.\\ ] ] then there exists an i d set @xmath244 with @xmath245 such that for all @xmath246 $ ] , @xmath247    based on several applications of lemma [ lemma : badcol ] ( and based on an @xmath43 lower bound in @xcite ) , it is possible to derive an almost tight lower bound for deterministic one - shot coloring algorithms . due to lack of space",
    ", we only state the result here .        to obtain a lower bound for randomized multicoloring algorithms",
    ", we can again use the tools derived for the deterministic lower bound by applying yao s principle . on a worst - case input",
    ", the best randomized algorithm can not perform better than the best deterministic algorithm for a given random input distribution .",
    "choosing the node labeling at random allows to again only consider deterministic algorithms .",
    "we assume that the @xmath22 nodes are assigned a random permutation of the labels @xmath248 ( i.e. , every label occurs exactly once ) .",
    "note that because we want to prove a lower bound , assuming the most restricted possible i d space makes the bound stronger .",
    "for an i d @xmath249 $ ] , we sort all colors @xmath232 by increasing values of @xmath250 and let @xmath251 be the @xmath252 color in this sorted order .",
    "further , for @xmath249 $ ] , we define @xmath253 . in the following ,",
    "we assume that @xmath254 for a constant @xmath255 that will be determined later . by applying lemma [ lemma : badcol ] in different ways ,",
    "the next lemma gives lower bounds on the values of @xmath256 for @xmath257 ids @xmath249 $ ] .",
    "[ lemma : badcolrand ] assume that @xmath39 and @xmath22 are as given by equation and let @xmath258 be a positive constant .",
    "further , let @xmath259 and @xmath260 for @xmath261 where @xmath262 . then , for at least @xmath257 of all ids @xmath249 $ ] , we have @xmath263    in order to prove the lower bound , we want to show that for a randomly chosen one - hop view @xmath123 with @xmath264 , the probability that there is a color @xmath232 for which @xmath265 is sufficiently small . instead of directly looking at random one - hop views @xmath123 with @xmath264 , we first look at one - hop views with @xmath266 that are constructed as follows .",
    "let @xmath267 $ ] be the set of ids @xmath62 of size @xmath268 for which the bounds of lemma [ lemma : badcolrand ] hold .",
    "we choose @xmath269 uniformly at random from @xmath270 .",
    "the remaining @xmath271 ids are independently added to a set @xmath272 with probability @xmath273 . for a color @xmath232 ,",
    "let @xmath274 be the event that @xmath275 , i.e. , @xmath274 is the event that color @xmath165 can not be assigend to the randomly chosen one - hop view @xmath276 .",
    "[ lemma : fkg ] the probability that the randomly chosen one - hop view can not be assigned one of the @xmath39 colors in @xmath230 is bounded by @xmath277\\ \\ge\\    \\prod_{\\alpha\\in c}{\\ensuremath{\\mathbb{p}}}\\big[\\mathcal{e}_\\alpha\\big]\\ \\ge\\    \\prod_{\\alpha\\in c}\\left (      1-e^{-\\frac{\\delta}{en}\\cdot|{\\ensuremath{\\mathrm{bad}_{\\alpha}(x_r)}}| }    \\right)\\ = \\     \\prod_{i=1}^c\\left (      1-e^{-\\frac{\\delta\\cdot b_{x_r , i}}{en } }    \\right).\\ ] ]    note first that for @xmath232 , we have @xmath278\\ = \\",
    "{ \\ensuremath{\\mathbb{p}}}\\big[\\gamma_r\\cap{\\ensuremath{\\mathrm{bad}_{\\alpha}(x_r)}}=\\emptyset\\big]\\ = \\    ( 1-p)^{|{\\ensuremath{\\mathrm{bad}_{\\alpha}(x_r)}}|}\\ \\le\\     e^{-p|{\\ensuremath{\\mathrm{bad}_{\\alpha}(x_r)}}|}\\ = \\    e^{-\\frac{\\delta}{en}\\cdot|{\\ensuremath{\\mathrm{bad}_{\\alpha}(x_r)}}|}.\\ ] ] it therefore remains to prove that the probability that all events @xmath274 occur can be lower bounded by the probability that would result for independent events .",
    "let us denote the colors in @xmath230 by @xmath279 .",
    "we then have @xmath280    \\ = \\",
    "\\prod_{i=1}^c    { \\ensuremath{\\mathbb{p}}}\\left[\\mathcal{e}_{\\alpha_i}\\bigg|\\bigcap_{j=1}^{i-1 }      \\mathcal{e}_{\\alpha_j}\\right ]    \\ \\ge\\     \\prod_{i=1}^c{\\ensuremath{\\mathbb{p}}}\\big[\\mathcal{e}_{\\alpha_i}\\big].\\ ] ] the inequality holds because the events @xmath281 are positively correlated . knowing that an element from a set @xmath282 is in @xmath272 can not decrease the probability that an element from a set @xmath283 is in @xmath272 .",
    "note that this is only true because the ids are independently added to @xmath272 .",
    "more formally , inequality can also directly be followed from the fkg inequality @xcite .",
    "[ lemma : probbound ] assume that @xmath39 and @xmath22 are given as in where the constant @xmath284 is chosen sufficiently small and let @xmath285 be a constant as in lemma [ lemma : badcolrand ] .",
    "there is a constant @xmath286 such that for @xmath287 , @xmath288    \\ > \\ \\frac{1}{2n^{3\\rho}}.    $ ]    [ lemma : randomview ] let @xmath123 be a one - hop view chosen uniformly at random from all one - hop views with @xmath264 .",
    "if @xmath289 and @xmath22 , @xmath39 , and @xmath290 are as before , the probability that none of the @xmath39 colors can be assigned to @xmath123 is at least @xmath291 .",
    "[ thm : randlb ] let @xmath5 be a graph with @xmath22 nodes and @xmath293 disjoint @xmath14-stars for a constant @xmath31 . on @xmath5 ,",
    "every randomized one - shot coloring algorithm needs at least @xmath294 colors in expectation and with high probability .",
    ", we can certainly assume that @xmath287 for a sufficiently large constant @xmath295 .",
    "we choose @xmath296 and consider @xmath297 of the @xmath293 disjoint @xmath14-stars .",
    "let us call these @xmath297 @xmath14-stars @xmath298 .",
    "assume that the i d assignment of the @xmath22 nodes of @xmath5 is chosen uniformly at random from all i d assignments with ids @xmath299 .",
    "the ids of the star @xmath300 are perfectly random .",
    "we can therefore directly apply lemma [ lemma : randomview ] and obtain that the probability that the center node of @xmath300 gets no color is at least @xmath291 .",
    "consider star @xmath301 .",
    "the ids of the nodes of @xmath301 are chosen at random among the @xmath302 ids that are not assigned to the nodes of @xmath300 .",
    "applying lemma [ lemma : randomview ] we get that the probability that @xmath301 does not get a color is at least @xmath303 independently of whether @xmath300 does get a color . the probability that the starts @xmath298 all get a color therefore is at most @xmath304 hence",
    ", there is a constant @xmath305 such that @xmath306 colors do not suffice with probability at least @xmath307 for a positive constant @xmath290 .",
    "the lemma thus follows .",
    "b.  awerbuch , a.  v. goldberg , m.  luby , and s.  a. plotkin .",
    "network decomposition and locality in distributed computation . in _ proc . of 30th symposium on foundations of computer science ( focs ) _ ,",
    "pages 364369 , 1989 .",
    "b.  balasundaram and s.  butenko .",
    "graph domination , coloring and cliques in telecommunications . in m.  resende and p.",
    "pardalos , editors , _ handbook of optimization in telecommunications _ , pages 865890 .",
    "springer , 2006 .    l.  barenboim and m.  elkin .",
    "sublogarithmic distributed mis algorithm for sparse graphs using nash - williams decomposition . in _ proc . of 27th acm symposium on principles of distributed computing ( podc ) _ , 2008 .",
    "a.  czygrinow , m.  hakowiak , and m.  karoski .",
    "distributed @xmath308-edge - coloring algorithm . in _ proc . of 9th annual european symposium on algorithms ( esa ) _ , volume 2161 of _ lncs _ , pages 345355 , 2001 .",
    "p.  fraigniaud , c.  gavoille , d.  ilcinkas , and a.  pelc .",
    "distributed computing with advice : information sensitivity of graph coloring . in _ proc . of 34th int .",
    "on automata , languages and programming _ , 2007 .",
    "s.  gandham , m.  dawande , and r.  prakash .",
    "link scheduling in sensor networks : distributed edge coloring revisited . in _ proc .",
    "of 24th ieee conference on computer communications ( infocom ) _ , pages 24922501 , 2005 .",
    "t.  herman and s.  tixeuil . a distributed tdma slot assignment algorithm for wireless sensor networks . in _ proc . of 1st int .",
    "workshop on algorithmic aspects of wireless sensor networks _ ,",
    "pages 4558 , 2004 .",
    "i.  rhee , a.  warrier , j.  min , and l.  xu . : distributed randomized tdma scheduling for wireless ad - hoc networks . in _",
    "7th acm symp . on mobile ad hoc networking and computing ( mobihoc ) _ , pages 190201 , 2006 .",
    "j.  schneider and r.  wattenhofer . a log - star distributed maximal independent set algorithm for growth - bounded graphs . in _ proc . of 27th acm symposium on principles of distributed computing ( podc ) _ , 2008 ."
  ],
  "abstract_text": [
    "<S> we are given a set @xmath0 of autonomous agents ( e.g.  the computers of a distributed system ) that are connected to each other by a graph @xmath1 ( e.g.  by a communication network connecting the agents ) . </S>",
    "<S> assume that all agents have a unique i d between @xmath2 and @xmath3 for a parameter @xmath4 and that each agent knows its i d as well as the ids of its neighbors in @xmath5 . </S>",
    "<S> based on this limited information , every agent @xmath6 must autonomously compute a set of colors @xmath7 such that the color sets @xmath8 and @xmath9 of adjacent agents @xmath10 and @xmath6 are disjoint . </S>",
    "<S> we prove that there is a deterministic algorithm that uses a total of @xmath11 colors such that for every node @xmath6 of @xmath5 ( i.e. , for every agent ) , we have @xmath12 , where @xmath13 is the degree of @xmath6 and where @xmath14 is the maximum degree of @xmath5 . for @xmath15 , @xmath16 colors are necessary even to assign at least one color to every node ( i.e. , to compute a standard vertex coloring ) . using randomization , </S>",
    "<S> it is possible to assign an @xmath17-fraction of all colors to every node of degree @xmath18 using only @xmath19 colors w.h.p . </S>",
    "<S> we show that this is asymptotically almost optimal . for graphs with maximum degree @xmath20 , </S>",
    "<S> @xmath21 colors are needed in expectation , even to compute a valid coloring .    </S>",
    "<S> the described multicoloring problem has direct applications in the context of wireless ad hoc and sensor networks . in order to coordinate the access to the shared wireless medium </S>",
    "<S> , the nodes of such a network need to employ some medium access control ( mac ) protocol . </S>",
    "<S> typical mac protocols control the access to the shared channel by time ( tdma ) , frequency ( fdma ) , or code division multiple access ( cdma ) schemes . </S>",
    "<S> many channel access schemes assign a fixed set of time slots , frequencies , or ( orthogonal ) codes to the nodes of a network such that nodes that interfere with each other receive disjoint sets of time slots , frequencies , or code sets . finding a valid assignment of time slots , frequencies , or codes </S>",
    "<S> hence directly corresponds to computing a multicoloring of a graph @xmath5 . </S>",
    "<S> the scarcity of bandwidth , energy , and computing resources in ad hoc and sensor networks , as well as the often highly dynamic nature of these networks require that the multicoloring can be computed based on as little and as local information as possible .    </S>",
    "<S> fabian kuhn </S>"
  ]
}