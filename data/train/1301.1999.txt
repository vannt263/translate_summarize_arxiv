{
  "article_text": [
    "let @xmath27 be an undirected unweighted graph .",
    "a subgraph @xmath7 of @xmath5 is a _ spanner _ with stretch function @xmath2 if , given any two nodes @xmath28 at distance @xmath29 in @xmath5 , the distance @xmath30 between the same two nodes in @xmath7 is at most @xmath31 .",
    "an @xmath32 spanner is a spanner with stretch functions @xmath33 .",
    "( @xmath34 and @xmath35 are the _ multiplicative stretch _ and _ additive stretch _ of the spanner , respectively ) .",
    "if @xmath36 the spanner is called _ multiplicative _ , and if @xmath37 the spanner is called _ purely - additive_. spanners are very well studied in the literature ( see section [ sec : related ] ) .",
    "the typical goal is to achieve the sparsest possible spanner for a given stretch function @xmath2 @xcite .    in this paper",
    "we address the natural problem of finding ( even sparser ) spanners in the case that we want to approximately preserve distances only among a given subset @xmath11 of pairs . more formally a _ pairwise spanner _ on pairs @xmath12 , or @xmath12-spanner for short , with stretch function @xmath2 is a subgraph @xmath3 such that , for any @xmath38 , @xmath39 . in particular , a classical ( all - pairs ) spanner is a @xmath40-spanner .",
    "pairwise spanners capture scenarios where we only ( or mostly ) care about some distances in the graph .    to the best of our knowledge ,",
    "pairwise spanners were studied before only in the special case that @xmath2 is the identity function , i.e. distances between relevant pairs have to be preserved exactly .",
    "coppersmith and elkin @xcite call such spanners _ pairwise ( distance ) preservers _ , and show that one can compute pairwise preservers of size ( i.e. , number of edges ) @xmath41 .",
    "the authors left it as an open problem to study the _ approximate _ variants of these preservers , i.e. what we call pairwise spanners here .",
    "this paper takes the first step in answering this question .",
    "we show that ( for suitable @xmath12 ) it is possible to achieve @xmath12-spanners which are at the same time sparser than the preservers in @xcite ( on the same set @xmath12 ) and than the sparsest known classical spanners ( with the same stretch function ) .      in this paper",
    "we present some polynomial - time algorithms to construct @xmath32 @xmath12-spanners for unweighted graphs .",
    "our spanners are either purely - additive ( i.e. @xmath37 ) or _ near - additive _",
    "( i.e. @xmath42 for an arbitrarily small @xmath16 ) . for arbitrary @xmath12",
    ", we achieve the following main results ( see section [ section - pairwise ] ) .",
    "[ thm : pairwise ] * ( near - additive pairwise ) * for any @xmath16 and any @xmath11 , there is a polynomial time algorithm to compute a @xmath43 @xmath12-spanner of size @xmath44 .",
    "[ thm : pairwise2 ] * ( purely - additive pairwise ) * for any integer @xmath45 and any @xmath11 , there is a polynomial time algorithm to compute a @xmath46 @xmath12-spanner of size@xmath47 .",
    "we also consider the relevant special case that all the pairs involve at least one node from a critical set @xmath19 .",
    "more precisely , we distinguish two types of such pairwise spanners : in _ subsetwise spanners _ ( see section [ section - s - spanners ] ) we wish to approximate distances _ between _ nodes in @xmath20 , i.e. @xmath48 ; in _ sourcewise spanners _ ( see section [ section - sourcewise ] ) we wish to approximate distances _ from _ nodes in @xmath20 , i.e. @xmath49 .",
    "we obtain the following improved results for the mentioned cases .",
    "[ thm : s - spanners ] * ( subsetwise ) * for any @xmath19 , there is a polynomial time algorithm to compute a @xmath50 @xmath21-spanner of size @xmath22 .",
    "[ thm : sourcewise ] * ( sourcewise ) * for any @xmath51 and any integer @xmath52 , there is a polynomial time algorithm to compute a @xmath53 @xmath24-spanner of size @xmath54 .    in particular , by choosing @xmath55",
    ", we obtain a @xmath56 sourcewise spanner of size @xmath25 , and a @xmath57 pairwise spanner of size @xmath14 .",
    "all our spanners rely on a path - buying strategy which was first exploited in the @xmath58 spanner by baswana et al . @xcite .",
    "the high - level idea is as follows .",
    "there is an initial clustering phase , where we compute a suitable clustering of the nodes , and an associated subset of edges which are added to the spanner . then there is a path - buying phase , where we consider an appropriate sequence of paths , and decide whether to add or not each path in the spanner under construction there is also a final step where we add a multiplicative @xmath59-spanner . ] . in particular",
    ", each path has a _ cost _ which is given by the number of edges of the path not already contained in the spanner , and a _ value _ which measures _ how much _ the path helps to satisfy the considered set of constraints on pairwise distances . if the value is sufficiently larger than the cost , we add the considered path to the spanner , otherwise we do not .    in more detail ,",
    "all our pairwise spanners exploit the same clustering phase .",
    "we compute a partition @xmath60 of a subset of the nodes , and call _ unclustered _ the remaining nodes @xmath61 .",
    "the initial value of the spanner is @xmath62 , where @xmath63 contains all the edges of @xmath5 but possibly a subset of the _ inter - cluster _ edges ( with endpoints in two different clusters ) .",
    "the common clustering phase is described in section [ section - clustering ] .    during the path - buying phase we add to the spanner some extra _ inter - cluster _ edges . here",
    "we need to finely tune the sequence of paths that we consider , and also the definition of value of a path . in our subsetwise and sourcewise",
    "spanners the value of a path @xmath64 reflects the number of pairs @xmath65 , where @xmath9 is the endpoint of some pair and @xmath66 is a cluster , such that adding @xmath64 to the current spanner decreases the distance between @xmath9 and ( the closest node in ) @xmath66 . in the remaining pairwise spanners , we use a similar notion of value , but considering the distance between pairs of clusters @xmath67 .    the sequence of paths used in our subsetwise spanner and near - additive pairwise spanner is simply given by the shortest paths among the relevant pairs .",
    "this naturally generalizes the set of paths considered in @xcite .",
    "however , for the sourcewise spanner and the purely - additive pairwise spanner we need to consider a carefully constructed sequence of paths , which includes slightly suboptimal paths . in more detail , we start with the set of shortest paths between the relevant pairs .",
    "then , for each such path @xmath64 , if the cost of @xmath64 is sufficiently smaller than its value , we include @xmath64 in the spanner .",
    "otherwise , we replace @xmath64 with a _ slightly longer _",
    "path @xmath68 between the same endpoints which is _ much cheaper _ , and iterate the process on @xmath68 . after a small number of iterations , the considered path becomes cheap enough and hence we include it in the spanner .",
    "this ( non - trivial ) iterative construction of candidate paths during the path - buying phase is probably the main algorithmic contribution of this paper .",
    "graph spanners were introduced by peleg and schaffer  @xcite in 1989 .",
    "spanners have been extensively studied since then , and there are numerous applications involving spanners , such as algorithms for approximate shortest paths  @xcite , labeling schemes  @xcite , approximate distance oracles  @xcite , routing  @xcite , and network design  @xcite .",
    "there are several algorithms for computing multiplicative and additive spanners in weighted and unweighted graphs . in unweighted graphs , for any integer @xmath52 , halperin and zwick  @xcite gave a linear time algorithm to compute a multiplicative @xmath69-spanner of size @xmath70 , where @xmath0 is the number of vertices .",
    "note that for @xmath71 one obtains a spanner with multiplicative stretch @xmath72 and with size @xmath73 : we will use this type of spanner in theorem [ thm : pairwise ] .",
    "analogous results are also known for weighted graphs  @xcite .",
    "the first purely - additive spanner ( for unweighted graphs ) is due to dor et al .",
    "they describe a @xmath50 spanner of size @xmath74 .",
    "this was subsequently improved to @xmath75  @xcite .",
    "note that our subsetwise spanner from theorem [ thm : s - spanners ] generalizes this result : in particular , it has the same stretch function and is sparser whenever @xmath76 .",
    "baswana et al .",
    "@xcite describe a @xmath58-spanner of size @xmath77 . whenever @xmath78 for some constant @xmath79 , we achieve an asymptotically sparser pairwise spanner with constant additive stretch ( depending on @xmath80 ) .",
    "the same holds for our sourcewise spanner if @xmath81 .    the result in @xcite shows an elegant trade - off between the size of the spanner and its multiplicative stretch .",
    "no such trade - off is known for purely - additive spanners . in particular , the spanner in @xcite is the sparsest known purely - additive spanner .",
    "theorems [ thm : pairwise2 ] and [ thm : sourcewise ] show a non - trivial trade - off between the size and additive stretch of pairwise spanners .",
    "there have also been several results on near - additive spanners  @xcite .",
    "for example , there is a @xmath82-spanner of size @xmath83 for any @xmath84  @xcite .",
    "our pairwise spanner from theorem [ thm : pairwise ] has the same stretch function , and is sparser for @xmath85 .",
    "compared to the preservers in @xcite , we achieve sparser pairwise spanners with additive stretch @xmath72 for @xmath86 , and a sparser subsetwise spanners for @xmath87 .",
    "interestingly , our sourcewise spanners are always sparser than the pairwise preservers from @xcite .",
    "a _ clustering _ of a graph @xmath88 is a collection @xmath60 of pairwise disjoint subsets of nodes @xmath89 .",
    "note that we do not require @xmath90 to span all the nodes @xmath91 : we call _ unclustered _ the nodes @xmath61 .",
    "we will crucially exploit the following construction of a clustering @xmath90 and of an associated _ cluster subgraph _ @xmath92 .",
    "[ lem : clustering ] there is a polynomial time algorithm which , given @xmath93 $ ] and a graph @xmath88 , computes a clustering @xmath90 with at most @xmath94 clusters and a subgraph @xmath92 of size @xmath95 such that :    1 .",
    "[ prop : clustering : prop2 ] * ( missing - edge property ) * if an edge @xmath96 is absent in @xmath92 , then @xmath8 and @xmath9 belong to two different clusters",
    "[ prop : clustering : prop3 ] * ( cluster - diameter property ) * the distance in @xmath92 between any two vertices of the same cluster is at most @xmath97 .",
    "let @xmath98 be the set of nodes which are not yet clustered ( initially we set @xmath99 . as long as there exists a vertex @xmath100 with at least @xmath101 neighbors in @xmath98 , let @xmath66 contain exactly @xmath102 arbitrary neighbors of @xmath9 in @xmath98 .",
    "add @xmath66 to @xmath90 , set @xmath103 and add to @xmath92 all the edges of @xmath5 with both endpoints in @xmath104 .",
    "when no node @xmath9 satisfies the mentioned property , we stop creating new clusters and add to @xmath92 all the edges incident to the final set of unclustered nodes @xmath98 .    by construction , clusters are pairwise disjoint .",
    "each time we create a new cluster , the size of @xmath98 decreases by at least @xmath105 , hence there can not be more than @xmath94 clusters .",
    "any two nodes in the same cluster @xmath66 have some common neighbor @xmath9 in @xmath92 , hence property [ prop : clustering : prop3 ] is satisfied . by construction ,",
    "all the edges incident to unclustered nodes plus the intra - cluster edges ( with both endpoints in the same cluster ) belong to @xmath106 , which implies property [ prop : clustering : prop2 ] .",
    "it remains to bound the number of edges of @xmath106 .",
    "each time we create a new cluster , the number of edges of @xmath106 grows by at most @xmath107 : this gives @xmath108 edges altogether .",
    "when we stop creating clusters , each ( clustered or unclustered ) node @xmath9 has at most @xmath109 neighbors in @xmath98 : consequently the number of edges incident to unclustered nodes that we add at the end of the procedure is at most @xmath95 .",
    "the following technical lemma turns out to be useful in the remaining sections .",
    "[ lem : num - clusters ] let @xmath90 and @xmath92 be constructed with the procedure from lemma [ lem : clustering ] w.r.t .",
    "a given graph @xmath88 .",
    "if the shortest path @xmath64 in @xmath5 between any two nodes @xmath110 contains @xmath111 edges that are absent in @xmath92 , then there are at least @xmath112 clusters of @xmath90 having at least one vertex on @xmath64 .",
    "we prove the lemma by counting pairs @xmath113 , where @xmath114 is an edge of @xmath64 absent in @xmath92 and @xmath8 is one of the endpoints of @xmath114 : let @xmath115 be the set of such pairs . since @xmath64 contains @xmath111 edges that are absent in @xmath92 there are exactly @xmath116 pairs in @xmath115 ( each edge @xmath117 belongs to two pairs : @xmath113 and @xmath118 ) .",
    "we say that a cluster @xmath119 _ owns _ a pair @xmath113",
    "if @xmath120 . by the missing - edge property , each edge @xmath114 of @xmath64 absent in @xmath92 has both endpoints clustered , hence each pair of @xmath115 is owned by some cluster .",
    "let us assume that there are @xmath121 clusters of @xmath90 having at least one vertex on @xmath64 . by the cluster - diameter property any cluster @xmath119 contains at most @xmath122 vertices on @xmath64 , since otherwise @xmath64 would not be a shortest path between @xmath8 and @xmath9 .",
    "however , if a cluster @xmath119 contains exactly @xmath122 vertices on @xmath64 , those have to be consecutive vertices @xmath123 of @xmath64 , since @xmath64 is a shortest path and we know by the cluster - diameter property that there is a path of length at most 2 between every pair in @xmath124 . by the missing - edge property",
    "both edges @xmath125 and @xmath126 are present in @xmath92 , and consequently @xmath66 owns at most two pairs of @xmath115 .",
    "clearly if a cluster @xmath119 contains at most @xmath97 vertices on @xmath64 , then it owns at most @xmath127 pairs of @xmath115 .",
    "therefore each cluster owns at most @xmath127 pairs of @xmath115 : since @xmath115 has @xmath116 pairs we have @xmath128 .",
    "in this section we present our algorithm to compute a subsetwise spanner , and prove theorem  [ thm : s - spanners ] .",
    "our algorithm consists of two main phases : a clustering phase and a path - buying phase . in the clustering phase we invoke lemma  [ lem : clustering ] and obtain a cluster subgraph @xmath92 of @xmath5 of size @xmath95 , together with a set @xmath90 of at most @xmath94 clusters .",
    "the value of @xmath35 will be defined later .    in the path - buying phase we proceed as follows . initially set @xmath129 and let @xmath130 , denote the set of @xmath131 shortest paths between all pairs of vertices in @xmath20 .",
    "we let @xmath132 denote the endpoints of @xmath133 .",
    "next , we iterate over the paths @xmath133 for @xmath134 . to determine which paths are affordable , we define the functions @xmath135 and @xmath136 :    * let @xmath137 be the number of edges of @xmath133 that are absent in @xmath138 * let @xmath139 be the number of pairs @xmath140 , where @xmath141 and @xmath119 is a cluster , such that @xmath133 contains at least one vertex of @xmath66 and the distance between @xmath121 and @xmath66 in the graph @xmath138 is strictly greater than the distance between @xmath8 and @xmath66 in @xmath133 , i.e. , @xmath142 .",
    "our path - buying strategy is as follows .",
    "if @xmath143 then we buy the path @xmath133 , that is we set @xmath144 ( in words , @xmath145 is given by @xmath138 plus the edges of @xmath133 not in @xmath138 ) . otherwise ( i.e. , @xmath146 ) , we do not buy @xmath133 and set @xmath147 .",
    "the subsetwise spanner is given by @xmath148 .",
    "the next two lemmas bound the stretch and the size of the constructed spanner @xmath149 , respectively    [ lem : s-1 ] for any @xmath150 , @xmath151 .",
    "clearly the claim holds if our algorithm bought the path @xmath133 , hence we assume @xmath146 .",
    "let @xmath152 , that is there are exactly @xmath111 edges of @xmath133 which are not present in the graph @xmath138 . by lemma  [ lem : num - clusters ]",
    "there are at least @xmath112 clusters having at least one vertex on @xmath133 .",
    "if there is no cluster @xmath66 among them such that @xmath153 and @xmath154 , then all these clusters would contribute to @xmath139 ( either with @xmath155 or with @xmath156 or both ) which leads to a contradiction , because @xmath157 .",
    "thus there is a cluster @xmath66 having a vertex of @xmath133 such that @xmath158 and @xmath159 .",
    "this implies : @xmath160 where the first inequality is because @xmath138 is a subgraph of @xmath149 , the second inequality holds since any two vertices of @xmath66 are at distance at most two in @xmath161 ( by the cluster - diameter property ) and the last inequality follows from the assumption that @xmath66 contains a vertex of @xmath133 .",
    "[ lem : s-2 ] for @xmath35 such that @xmath162 the graph @xmath149 contains @xmath22 edges .",
    "the clustering phase produces a graph with @xmath163 edges .",
    "let @xmath164 be the set of paths bought in the path - buying phase .",
    "the total number of edges that appear in @xmath164 and do not appear in @xmath92 is equal to @xmath165 , which is upper bounded by @xmath166 .",
    "observe that after the first contribution of a pair @xmath140 to the above sum , the distance between @xmath121 and @xmath66 is at most @xmath167 , hence each pair @xmath140 can contribute to the sum at most @xmath122 times .",
    "therefore the total number of edges added in the second phase of our algorithm is upper bounded by @xmath168 .",
    "the proof of theorem  [ thm : s - spanners ] follows from lemmas  [ lem : s-1 ] and [ lem : s-2 ] .",
    "in this section we present our algorithm to compute a sourcewise spanner from sources @xmath20 , and prove theorem [ thm : sourcewise ] .",
    "our algorithm again consists of two phases , where the first is a clustering phase and the second is a path - buying phase .",
    "the clustering phase is as in the algorithm from previous section , for a proper value of @xmath35 to be defined later .",
    "let @xmath90 and @xmath92 be the resulting clustering and cluster subgraph . at the start of the second phase we set @xmath129 and define @xmath169 as the set of shortest paths between any two vertices of @xmath91 such that at least one of them belongs to @xmath20 .",
    "let us assume that the path @xmath133 is a shortest path between @xmath170 and @xmath171 .",
    "next , we iterate over paths @xmath133 for @xmath134 . for a given @xmath172 we are going to define paths @xmath173 , where @xmath174 , maintaining the following invariants :    * @xmath173 is a path between @xmath155 and @xmath156 in @xmath5 of length at most @xmath175 , * any cluster @xmath119 contains at most three vertices of @xmath173 , * @xmath176 , where @xmath177 is the number of edges of @xmath173 absent in @xmath138 , and @xmath178 .",
    "our algorithm will buy exactly one path @xmath173 for @xmath174 , which will ensure ( by invariant ( i ) ) that in @xmath179 , the distance between @xmath155 and @xmath156 is at most @xmath180 .",
    "we set @xmath181 .",
    "observe that for @xmath182 , invariant ( i ) is trivially satisfied , invariant ( ii ) is satisfied by the cluster - diameter property ( otherwise @xmath133 would not be a shortest path ) , and invariant ( iii ) is satisfied because there are at most @xmath94 clusters in @xmath90 and consequently by lemma  [ lem : num - clusters ] @xmath183 .",
    "say we have constructed @xmath173 , where @xmath184 .",
    "let us define the function @xmath185 as the number of clusters @xmath119 such that @xmath66 contains a vertex of @xmath173 and the distance between @xmath155 and @xmath66 in @xmath138 is strictly greater than the distance between @xmath155 and @xmath66 in @xmath173 , i.e. , @xmath186 .",
    "now we check the condition @xmath187    if that is the case , then we buy the path @xmath173 .",
    "that is , @xmath145 is set to @xmath188 .",
    "we ignore the remaining values of @xmath189 and proceed with the next value of @xmath172 .",
    "else we construct @xmath190 as follows :    let @xmath191 be the longest suffix of @xmath173 containing exactly @xmath192 edges that are absent in @xmath138 . observe that the first node of @xmath191 is clustered : by the maximality of @xmath191 , the edge @xmath114 of @xmath173 preceding @xmath191 is absent in @xmath138 , and hence both the endpoints of @xmath114 ( one of which is the first node of @xmath191 ) are clustered by the missing - edge property of @xmath92 .",
    "consequently at least @xmath193 vertices of @xmath191 are clustered , as @xmath191 contains @xmath192 edges absent in @xmath138 and the endpoints of these edges are clustered .    by invariant ( ii )",
    "there are at least @xmath194 clusters in @xmath90 having at least one vertex of @xmath191 .",
    "since we did not buy @xmath173 , there exists a cluster @xmath119 containing a vertex @xmath195 of @xmath191 such that the distance between @xmath155 and @xmath66 in @xmath138 is at most the distance between @xmath155 and @xmath121 in @xmath173 .",
    "we construct the path @xmath190 by taking a shortest path in @xmath138 from @xmath155 to the closest node @xmath196 , then we add a path of length at most two between @xmath197 and @xmath121 ( which exists in @xmath92 hence in @xmath138 by the cluster - diameter property ) , and finally add the suffix of @xmath191 starting at @xmath121 ( see fig .",
    "[ fig1 ] ) .",
    "let us show that @xmath198 maintains the invariants .",
    "note that by construction , invariant ( i ) is satisfied , since the length of @xmath190 is at most the length of @xmath173 plus @xmath97 . then , as long as there is a cluster @xmath119 containing at least four vertices on @xmath190 , we let @xmath199 , @xmath200 be the vertices of @xmath190 closest to @xmath155 and @xmath156 respectively .",
    "note that there are at least three edges on @xmath190 between @xmath199 and @xmath200 , hence we can replace the subpath of @xmath190 by adding the at most two edges of @xmath92 guaranteed by the cluster - diameter property .",
    "consequently , invariant ( ii ) is satisfied .",
    "moreover , by the choice of @xmath191 , invariant ( iii ) is also satisfied .",
    "this finishes the construction of @xmath190 .",
    ", while the dashed edges denote the new prefix of the path @xmath190 . ]",
    "observe that by invariant ( iii ) we have @xmath201 : since @xmath136 has only integral values , it has to be that @xmath202 , which ensures that we buy a path @xmath173 for some @xmath203 .    finally , as our spanner @xmath149 we take @xmath204 .",
    "[ lem : stretchsourcewise ] for any pair @xmath150 , @xmath205 .    from the above discussion , we buy at least one path @xmath206 for some @xmath207 . by invariant ( i ) , the length of the latter path is at most the length of the shortest path @xmath133 between @xmath155 and @xmath156 plus @xmath208 .",
    "[ lem : sizesourcewise ] for @xmath35 such that @xmath209 , the subgraph @xmath149 contains @xmath54 edges .    to bound the size of @xmath149 we recall that in the first phase we have inserted @xmath95 edges .",
    "let @xmath210 be the index of a path @xmath211 bought for a given @xmath172 .",
    "we claim , that any cluster @xmath66 contributes to @xmath212 of at most @xmath213 bought paths .",
    "this holds because when for @xmath170 a supported path is bought the distance between @xmath155 and @xmath66 is at most @xmath214 greater than the distance between @xmath155 and @xmath66 in @xmath5 : otherwise one could shorten @xmath211 by more than @xmath208 , obtaining a contradiction with invariant ( i ) .",
    "therefore the total number of edges added during the second phase is upper bounded by @xmath215 , since each cluster @xmath119 supports at most @xmath213 bought paths .",
    "the claim follows .",
    "the proof of theorem [ thm : sourcewise ] follows from lemmas [ lem : stretchsourcewise ] and [ lem : sizesourcewise ] .",
    "in this section we present our pairwise spanners for arbitrary @xmath12 .",
    "we start with a near - additive spanner ( see section [ section - pairwise - near ] ) and then present a purely - additive spanner ( see section [ section - pairwise - pure ] ) . in both cases",
    "we let @xmath216 denote the set of pairs , @xmath217 .",
    "our algorithm to construct the near - additive @xmath13-spanner from theorem [ thm : pairwise ] consists of three phases .",
    "first , we use lemma  [ lem : clustering ] with the value of @xmath35 to be determined later , obtaining a cluster subgraph @xmath92 of @xmath5 of size @xmath95 together with a set @xmath90 of at most @xmath94 clusters .    at the start of the second phase we set @xmath218 and consider the set of paths @xmath219 , where @xmath133 is a shortest path between @xmath220 and @xmath221 in @xmath5 .",
    "next we iterate over the paths @xmath133 for @xmath222 . by @xmath137",
    "we denote the number of edges of @xmath133 absent in @xmath138 , and by @xmath139 we denote the number of pairs of clusters @xmath223 , such that both @xmath224 and @xmath225 contain at least one vertex of @xmath133 and @xmath226 . for a given @xmath172",
    "if @xmath227 then we buy @xmath133 , that is we set @xmath228 .",
    "otherwise we set @xmath229 .    in the third phase we add to @xmath230 the multiplicative @xmath59 spanner of size @xmath73 given in @xcite : this way we obtain the desired spanner @xmath149 .    in the following two lemmas we bound the stretch and size of @xmath149 , respectively .",
    "[ lem : stretchpairwise1 ] for each @xmath231 , @xmath232 .",
    "clearly we can assume that the path @xmath133 was not bought in the second phase , since otherwise the claim trivially holds .",
    "therefore @xmath233    let @xmath234 and let @xmath235 be the set of all indices @xmath189 such that @xmath236 is clustered .",
    "observe that if @xmath237 , then by the missing - edge property the whole path @xmath133 is present in @xmath92 , and hence the claim holds .",
    "therefore denote @xmath238 , where @xmath239 and @xmath240 .",
    "let @xmath241 be two indices , such that @xmath242 , @xmath243 ( for some @xmath244 ) , @xmath245 and the value of @xmath246 is maximized .",
    "note that such a pair of indices @xmath247 always exists , since we can take @xmath248 .",
    "let @xmath249 .",
    "observe that any cluster @xmath119 contains at most @xmath122 vertices of @xmath250 , since otherwise by the cluster - diameter property @xmath133 would not be a shortest @xmath220-@xmath221 path .",
    "therefore there are at least @xmath251 clusters @xmath252 having at least one vertex in the set @xmath253 , and at least @xmath251 clusters @xmath254 having at least one vertex in the set @xmath255 .",
    "however , each of the at least @xmath256 pairs of clusters in @xmath257 contributes to @xmath139 since the difference between indices in the corresponding set is at least @xmath258 .",
    "therefore @xmath259 and hence @xmath260 .",
    "the latter bound on @xmath121 is sufficient to prove the claim .",
    "in fact , consider the path between @xmath220 and @xmath221 in @xmath149 obtained by concatenating the following paths ( as illustrated in fig .",
    "[ fig2 ] ) :    * a shortest path in @xmath149 from @xmath220 to @xmath261 .",
    "note that in the prefix of @xmath133 between @xmath220 and @xmath261 there are @xmath262 clustered nodes and hence at most @xmath199 edges absent in @xmath138 ( by the missing - edge property ) . since @xmath149 contains the @xmath59-spanner added in the third phase , each missing edge can be replaced by at path of length @xmath263 .",
    "consequently , there is a path from @xmath220 to @xmath261 of length at most @xmath264 in @xmath149 .",
    "* a shortest path in @xmath149 from @xmath261 to @xmath265 .",
    "let @xmath244 be the clusters containing @xmath261 and @xmath265 respectively .",
    "we know that in @xmath138 there is a path from @xmath224 to @xmath225 of length at most @xmath266 , which can be extended to a path between @xmath261 and @xmath265 in @xmath138 by adding at most @xmath127 edges ( by the cluster - diameter property ) .",
    "* a shortest path in @xmath149 from @xmath265 to @xmath221 .",
    "observe that in the suffix of @xmath133 between @xmath265 and @xmath221 there are at most @xmath267 edges absent in @xmath138 by the same argument as above .",
    "hence , thanks to the @xmath59-spanner added in the third phase , there is a path from @xmath265 to @xmath221 of length at most @xmath268 in @xmath149 .",
    "the resulting path is of length at most @xmath269 where the last inequality follows from @xmath270 together with @xmath271 .    .",
    "]    [ lem : sizepairwise1 ] for @xmath35 such that @xmath272 the size of @xmath149 is @xmath273 .",
    "the clustering phase gives @xmath95 edges , which matches the desired bound on @xmath149 .",
    "let @xmath164 be the set of paths @xmath133 bought in the path - buying phase .",
    "observe , that if a pair of clusters @xmath274 contributes to @xmath139 of a bought path @xmath275 , then when @xmath133 is bought we have @xmath276 , since otherwise the subpath of @xmath133 between @xmath224 and @xmath225 might be shortened ( by the cluster - diameter property ) .",
    "it follows that each pair of clusters contributes at most @xmath277 times to @xmath139 , and hence @xmath278 the total number of edges added in the second phase is therefore upper bounded by @xmath279 finally , in the last phase we insert only @xmath73 edges when adding the @xmath59-spanner .",
    "having lemmas  [ lem : stretchpairwise1 ] and [ lem : sizepairwise1 ] , the proof of theorem  [ thm : pairwise ] follows .      in this section",
    "we describe an algorithm to compute the purely - additive @xmath12-spanner from theorem [ thm : pairwise2 ] . to that aim",
    "we will combine ideas from the proofs of theorems [ thm : pairwise ] and [ thm : sourcewise ] .",
    "our algorithm consists of the usual clustering phase ( for an appropriate parameter @xmath35 ) followed by a path - buying phase that we next describe .",
    "let @xmath90 and @xmath92 be the clustering and the associated cluster graph . at the beginning of the path - buying phase , we set @xmath218 and consider the set @xmath219 , where @xmath133 is a shortest path between @xmath220 and @xmath221 in @xmath5 .",
    "next we iterate over the paths @xmath133 for @xmath222 . for a given @xmath172 we are going to define paths @xmath173 , where @xmath174 , maintaining the following invariants :    * @xmath173 is a path between @xmath220 and @xmath221 in @xmath5 of length at most @xmath280 , * any cluster @xmath119 contains at most three vertices of @xmath173 , * @xmath176 , where @xmath177 is the number of edges of @xmath173 absent in @xmath138 , and @xmath178 .",
    "our algorithm will buy exactly one path @xmath173 , which will ensure by invariant ( i ) that in @xmath179 the distance between @xmath220 and @xmath221 is at most @xmath281 .",
    "by @xmath185 let us denote the number of pairs of clusters @xmath282 , such that both @xmath224 and @xmath225 contain at least one vertex of @xmath173 and @xmath283 .",
    "we set @xmath181 .",
    "observe that for @xmath182 invariant ( i ) is trivially satisfied , invariant ( ii ) is satisfied by the cluster - diameter property ( otherwise @xmath133 would not be a shortest path ) , and invariant ( iii ) is satisfied because there are at most @xmath94 clusters in @xmath90 and consequently by lemma  [ lem : num - clusters ] , @xmath183 .",
    "say we have constructed @xmath173 , where @xmath284 .",
    "if @xmath285 then we buy the path @xmath173 , i.e. as @xmath145 we take the union of @xmath138 and @xmath173 , ignore remaining values of @xmath189 and proceed with the next value of @xmath172 .",
    "otherwise ( i.e. , @xmath286 ) , we construct a path @xmath190 as follows :    let @xmath287 and let @xmath235 be the set of all indices @xmath189 such that @xmath236 is clustered . observe that if @xmath237 , then by the missing - edge property the whole path @xmath173 is present in @xmath92 , and hence it is of zero cost , which contradicts the assumption @xmath286 .",
    "therefore denote @xmath238 , where @xmath239 and @xmath240 .",
    "let @xmath241 be two indices , such that @xmath242 , @xmath243 ( for some @xmath244 ) , @xmath288 and the value of @xmath246 is maximized .",
    "note that such a pair of indices @xmath247 always exists , since we can take @xmath248 .",
    "let @xmath249 .",
    "by invariant ( ii ) there are at least @xmath251 clusters @xmath252 having at least one vertex in the set @xmath253 , and at least @xmath251 clusters @xmath254 having at least one vertex in the set @xmath255 .",
    "however , each of the at least @xmath256 pairs of clusters in @xmath257 contributes to @xmath289 since the difference between indices in the corresponding set is at least @xmath258 .",
    "therefore @xmath290 we construct the path @xmath190 by appending the following three paths @xmath291 , @xmath292 , and @xmath66 :    * as @xmath291 we take the prefix of @xmath173 from @xmath220 to @xmath261 .",
    "note that this prefix contains @xmath262 clustered nodes and hence at most @xmath199 edges absent in @xmath138 ( by the missing - edge property of @xmath106 ) .",
    "* let @xmath244 be the clusters containing @xmath261 and @xmath265 respectively .",
    "we know that in @xmath138 there is a path from @xmath224 to @xmath225 of length at most @xmath293 , which can be extended to a path @xmath292 between @xmath261 and @xmath265 in @xmath138 by adding at most @xmath127 edges ( by the cluster - diameter property ) . * as @xmath66 we take the suffix of @xmath173 from @xmath265 to @xmath221 , which contains at most @xmath267 edges absent in @xmath138 by the same argument as above .",
    "observe that @xmath190 contains at most @xmath294 edges absent in @xmath138 , hence by we ensure invariant ( iii ) .",
    "moreover the length of @xmath190 is at most the length of @xmath173 plus @xmath127 , which ensures invariant ( i ) . in order to ensure invariant ( ii ) ,",
    "as long as there exists a cluster @xmath119 containing at least @xmath127 vertices of @xmath190 we let @xmath8 and @xmath9 be two such vertices closest to @xmath220 and @xmath221 on @xmath190 respectively and replace the subpath of @xmath190 between @xmath8 and @xmath9 ( which is of length at least three ) by a path of length at most two in @xmath138 ( which exists by the cluster - diameter property ) .",
    "observe that by invariant ( iii ) we have @xmath201 , hence @xmath202 which ensures that we buy a path @xmath173 for some @xmath203 . finally , as our spanner @xmath149 we take @xmath295 .",
    "[ lem : stretchpairwise2 ] for each @xmath231 , @xmath296 .    from the above discussion",
    ", @xmath149 contains at least one path @xmath206 between @xmath220 and @xmath221 for some @xmath207 .",
    "the claim follows by invariant ( i ) .",
    "[ lem : sizepairwise2 ] for @xmath35 such that @xmath297 the size of @xmath149 is@xmath298 .",
    "the clustering phase gives @xmath95 edges , which matches the desired bound on @xmath149 .",
    "let @xmath210 be the index of a path @xmath211 bought for a given @xmath172 .",
    "we claim , that any pair of clusters contributes to @xmath212 of at most @xmath299 bought paths .",
    "observe , that if a pair of clusters @xmath274 contributes to @xmath212 , then when @xmath211 is bought we have @xmath300 , since otherwise the subpath of @xmath211 between @xmath224 and @xmath225 might be shortened by more than @xmath301 , contradicting invariant ( i ) .",
    "the total number of edges added in the second phase is upper bounded by @xmath302 by substituting @xmath303 and @xmath35 the claim follows .",
    "theorem  [ thm : pairwise2 ] follows from lemmas [ lem : stretchpairwise2 ] and [ lem : sizepairwise2 ]",
    "we considered a natural extension to the problem of computing a sparse spanner in an undirected unweighted graph . along with the input graph @xmath27 , a subset @xmath11 of relevant pairs of vertices",
    "is also given here and we seek a sparse subgraph @xmath7 of @xmath5 such that for every pair @xmath10 in @xmath12 , the @xmath8-@xmath9 distance @xmath304 in the subgraph is close to the @xmath8-@xmath9 distance @xmath305 in @xmath5 .",
    "we showed sparse subgraphs @xmath7 where @xmath306 is a small additive or near - additive stretch away from @xmath307 .",
    "the pairwise preservers in @xcite are at the same time more accurate and sparser than our spanners for small enough values of @xmath308 . in particular ,",
    "in that range of values of @xmath308 the authors exploit a construction which does not seem to benefit from allowing a larger stretch .",
    "the authors also present lower bounds on the size of any preserver , however it is unclear whether those lower bounds extend to the case of pairwise spanners ( where distances have to be approximated rather than preserved ) . obtaining sparser pairwise spanners for very small @xmath308 , if possible ,",
    "is an interesting open problem .",
    "s. baswana and s. sen .",
    "a simple linear time algorithm for computing a @xmath309-spanner of @xmath70 size in weighted graphs . in _ proc .",
    "30th int . colloq . on automata , languages , and programming ( icalp ) _",
    ", pages 384 - 396 , 2003 .",
    "l. roditty , m. thorup , and u. zwick .",
    "deterministic constructions of approximate distance oracles and spanners . in _ proc .",
    "32nd int . colloq . on automata , languages , and programming ( icalp ) _",
    ", pages 261 - 272 , 2005 ."
  ],
  "abstract_text": [
    "<S> given an undirected @xmath0-node unweighted graph @xmath1 , a spanner with _ stretch function _ </S>",
    "<S> @xmath2 is a subgraph @xmath3 such that , if two nodes are at distance @xmath4 in @xmath5 , then they are at distance at most @xmath6 in @xmath7 . </S>",
    "<S> spanners are very well studied in the literature . </S>",
    "<S> the typical goal is to construct the sparsest possible spanner for a given stretch function .    in this paper </S>",
    "<S> we study _ pairwise spanners _ , where we require to approximate the @xmath8-@xmath9 distance only for pairs @xmath10 in a given set @xmath11 . </S>",
    "<S> such @xmath12-spanners were studied before [ coppersmith , elkin05 ] only in the special case that @xmath2 is the identity function , i.e. distances between relevant pairs must be preserved exactly ( a.k.a . </S>",
    "<S> _ pairwise preservers _ ) .    </S>",
    "<S> here we present pairwise spanners which are at the same time sparser than the best known preservers ( on the same @xmath12 ) and of the best known spanners ( with the same @xmath2 ) . in more detail , for arbitrary @xmath12 , we show that there exists a @xmath13-spanner of size @xmath14 with @xmath15 . alternatively , for any @xmath16 </S>",
    "<S> , there exists a @xmath12-spanner of size @xmath17 with @xmath18 . </S>",
    "<S> we also consider the relevant special case that there is a critical set of nodes @xmath19 , and we wish to approximate either the distances within nodes in @xmath20 or from nodes in @xmath20 to any other node . </S>",
    "<S> we show that there exists an @xmath21-spanner of size @xmath22 with @xmath23 , and an @xmath24-spanner of size @xmath25 with @xmath26 . </S>",
    "<S> all the mentioned pairwise spanners can be constructed in polynomial time . </S>"
  ]
}