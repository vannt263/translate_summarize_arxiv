{
  "article_text": [
    "for discrete logarithm problem ( dlp ) based cryptography , it is desirable to find efficiently implementable groups for which sub - exponential algorithms for the dlp are not available . thus far , the only candidates for such groups seem to be ( carefully chosen ) groups of points on elliptic curves @xcite .",
    "groups of invertible matrices over a finite field , proposed in @xcite , where proved by menezes and wu @xcite inadequate for this purpose . in their paper @xcite , kahrobaei , koupparis and shpilrain propose to use _ semigroups _ and , in particular , the semigroup of all matrices over a certain finite group - ring as a platform for the diffie  hellman protocol .",
    "let @xmath0 be a semigroup .",
    "the _ order _ of an element @xmath1 is the cardinality of the set @xmath2 .",
    "a semigroup @xmath0 is _ periodic _",
    "( a.k.a .",
    "_ torsion _ ) if each element of @xmath0 has finite order .",
    "the dlp in a periodic semigroup @xmath0 is the problem of finding , given an element @xmath1 and a power @xmath3 of @xmath4 , a natural number @xmath5 such that @xmath6 .",
    "_ _ is the general problem of solving the dlp in periodic semigroups . below . ]",
    "we will demonstrate that the is not harder than the classic dlp in groups .",
    "moreover , the dlp in a semigroup @xmath0 reduces , in polynomial time , to the dlp in a subgroup @xmath7 of @xmath0 .",
    "thus , if there is a subexponential time algorithm for the dlp in subgroups of @xmath0 ( which is the case , for example , when @xmath0 is a semigroup of matrices over a finite field , by the menezes  wu result @xcite ) , then there is one for the dlp in @xmath0 .",
    "in particular , as the dlp in groups is efficiently solvable by quantum computers , it follows that the is efficiently solvable by quantum computers .",
    "the is quite old .",
    "it already appears in mccurley s 1990 survey @xcite . in @xcite , myasnikov and ushakov",
    "reduce the dlp in the semigroup proposed in @xcite to the dlp in a group of invertible matrices over a finite field , and deduce that the dlp in that semigroup can be solved by quantum computers .",
    "they achieve this goal by embedding the semigroup in the semigroup of all matrices over a finite field , and then applying jordan canonical form theory to reduce the problem to the dlp in the group of invertible matrices over the same field .",
    "our solution shows , in particular , that specialized methods are not necessary to solve this problem . we have reported our solution , without details , to myasnikov and ushakov , and suggested to ask experts whether this was known . following that , myasnikov and ushakov consulted steinwandt , who mentioned the problem to some , including childs and ivanyos .",
    "unaware of our solution , childs and ivanyos came up with an independent proof that the can be solved by quantum computers ( * ? ? ?",
    "* sections 13 ) .",
    "their method is different , and uses quantum computers directly .",
    "our solution is slightly more general , since our reduction uses only classic computational assumptions .",
    "this is useful when quantum computers are not available , but subexponential algorithms are available for the dlp in the relevant groups , e.g. , in matrix semigroups over finite fields .",
    "let @xmath7 be a finite group . by _ dlp oracle for @xmath7 _ we mean an oracle that , whenever provided with a generator @xmath4 of @xmath7 and a power @xmath3 of @xmath4 , returns a natural number @xmath5 , of size polynomial in the relevant parameters ( including the length of @xmath4 and the order of @xmath7 ) , such that @xmath8 .",
    "note that the oracle is not provided with @xmath7 directly , but via its generator and the definition of multiplication in the group .",
    "we assume that each element in the considered semigroup has a unique representation , or , equivalently for our purposes , a canonical representative that can be computed in polynomial time .",
    "we also assume that multiplication in the semigroup can be carried out in polynomial time .",
    "the following lemma should be well known . for completeness",
    ", we include a proof .",
    "[ lem1 ] let @xmath0 be a periodic semigroup , and @xmath4 be a member of @xmath0 .",
    "let @xmath9 be minimal and then @xmath10 , or vice versa . ] with @xmath11 , and let @xmath12 be minimal with @xmath13 . then the set @xmath14 is a cyclic group of order @xmath10 , with neutral element @xmath15 and generator @xmath16 .",
    "moreover , @xmath17 for all @xmath18 . as @xmath11 , the set @xmath7 is closed under products .",
    "the element @xmath15 is neutral : as @xmath19 we have that @xmath20 for each element @xmath21 .",
    ". then @xmath22 .",
    "inversion : given @xmath23 , let @xmath24 be such that @xmath25 . then @xmath26    generator : as @xmath15 is neutral , for each element @xmath27 in @xmath7 we have that @xmath28    let @xmath0 be a semigroup and let @xmath4 be an element of @xmath0 .",
    "let @xmath29 , @xmath10 , and @xmath12 be the numbers defined in lemma [ lem1 ] .",
    "[ red : gporder ] finding @xmath10 , using a dlp oracle for @xmath7 .",
    "fix a number @xmath30 with @xmath31 .",
    "this can be done by beginning with a fixed number @xmath30 , and doubling it until the following procedure works .",
    "choose random @xmath32 , and compute @xmath33 .",
    "the distribution of @xmath3 is statistically indistinguishable from the uniform distribution on @xmath7 . as @xmath34 is greater than @xmath35 for @xmath36 (",
    "* theorem 8.8.7 ) ( and is at least @xmath37 for @xmath38 or @xmath39 ) , we assume , for a while , that @xmath3 is a generator of @xmath7 .    it is known that the order of a group @xmath7 can be computed given a generator @xmath3 and a dlp oracle for that group .",
    "briefly , this can be done , using our notation , as follows .",
    "choose a random @xmath40 , and compute @xmath41 .",
    "it may be that calling the oracle twice with the same input , we obtain different values of @xmath42 .",
    "however , the distribution of @xmath42 depends only on @xmath43 and not on @xmath5 itself .",
    "thus , taking the greatest common divisor of @xmath44 differences @xmath45 of this kind , we will obtain @xmath10 .",
    "now , in any case , @xmath3 generates a subgroup of @xmath7 , whose order is found by the above - mentioned algorithm .",
    "this order divides the order of @xmath7 .",
    "repeating this procedure for @xmath46 elements @xmath3 , the maximum ( or least common multiple ) of the obtained orders will be the order of @xmath7 .",
    "we now find @xmath12 , using our knowledge of @xmath10 .",
    "the neutral element of a group is its unique element @xmath47 satisfying @xmath48 , an idempotent element . by lemma [ lem1 ]",
    ", we need to find the minimal @xmath12 such that @xmath15 is an idempotent .",
    "given that @xmath49 for all @xmath18 and @xmath50 for @xmath51 , this can be done by binary search , as in the following algorithm .    finding the minimal @xmath12 such that @xmath15 is the neutral element of @xmath7 @xmath52 + @xmath53 + @xmath54 + @xmath55 ( this is the neutral element of @xmath7 ) + @xmath56 +   + @xmath57 + @xmath58 +   + @xmath59 +   + @xmath60@xmath61 + @xmath62    one can use a variation of the above algorithm , that precomputes a logarithmic number of powers @xmath63 , and replaces each power computation by one multiplication .",
    "this applies to all algorithms in this paper .",
    "let @xmath64 be given .",
    "there are two cases to consider .",
    "first , assume that @xmath65 .",
    "find @xmath12 and @xmath10 as above .",
    "compute @xmath66 .",
    "let @xmath67 , a generator of @xmath7 . using the oracle ,",
    "we obtain a number @xmath68 such that @xmath69 . then @xmath70 .",
    ". then @xmath72 , and we are done .",
    "the following immediate fact shows that membership in @xmath7 can be tested efficiently .    for each @xmath73",
    ", we have that @xmath65 if and only if @xmath74 .",
    "if @xmath75 , we use binary search to find the minimal @xmath62 such that @xmath76 , as follows .",
    "finding the minimal @xmath62 such that @xmath76 @xmath52 + @xmath77 + @xmath78 + @xmath56 +   + @xmath57 + @xmath79 +   + @xmath59 +   + @xmath60@xmath61 + @xmath62    similarly , if @xmath80 and @xmath5 is known , we can use binary search to find the maximal @xmath81 such that @xmath82 and @xmath83 .    computing a discrete logarithm of @xmath64 , using a dlp oracle for @xmath7 .",
    "it remains to consider the case where @xmath75 .",
    "let @xmath67 be the generator of @xmath7 . use the above algorithm to find the minimal @xmath62 such that @xmath76 .",
    "as @xmath10 is the order of @xmath7 , for each @xmath84 with @xmath85 , we have that @xmath86 .    using the oracle ,",
    "compute @xmath87 .",
    "then @xmath88 , and thus @xmath89 .",
    "note that the number @xmath90 is known . using binary search , find the maximal @xmath81 such that @xmath91 .",
    "then @xmath92 , and thus @xmath93 is found .",
    "our assumption on the given semigroups are natural , but it may be still interesting to consider the case where the element @xmath4 of @xmath0 has _ infinite _ order . indeed , this case was proposed , by vladimir shpilrain , at the conference _ algebraic methods in cryptography _ , ruhr universitt bochum , germany , 2005 .",
    "in this case , the semigroup @xmath94 generated by @xmath4 is isomorphic to the additive semigroup @xmath95 , but the isomorphism may be infeasible to compute .",
    "however , as the second named author commented in that conference , there is likely to be a strong correlation between the bitlength of @xmath96 and the power @xmath5 ( for each fixed coding of the semigroup elements ) .",
    "the following algorithm should be able to recover @xmath5 from @xmath96 in many cases of interest . in this algorithm",
    ", the function @xmath97 may be the bitlength of the presentation of @xmath4 as a bitstring , or any other reasonable length function that tends to get larger for larger powers of @xmath4 .",
    "line 6 of the following algorithm should be implemented by binary search .",
    "find @xmath5 given @xmath33 , for @xmath4 of infinite order .",
    "choose large @xmath98 and @xmath99 , polynomial in the relevant parameters .",
    "+ @xmath100 from @xmath101 to @xmath99 + choose a random element @xmath102 .",
    "+ @xmath103 + @xmath104 + @xmath105 + @xmath106 , + @xmath5    the rational of this proposal is that a small number of bits can only code a limited number of semigroup elements , and thus a limited number of powers of @xmath4 .",
    "thus , on average , the higher the power of @xmath4 is , the more bits are needed to code this power .",
    "we have tested this algorithm in the case where @xmath7 is the braid group , @xmath99 ( the number of tries ) is @xmath101 ( ! ) , @xmath98 is @xmath107 , and @xmath97 is the number of generators in the canonical form of @xmath4 . for several parameter settings tested ,",
    "the algorithm never failed .",
    "the algorithm did fail , occasionally , when we took @xmath98 to be very small , so the contribution of the random power seems important .    it may be possible to fool this algorithm if the coding is chosen in a malicious way .",
    "the question whether there is , for each prescribed ( black - box ) infinite cyclic semigroup , an efficient solution to the the dlp remains , at present , open .",
    "v. miller , _ use of elliptic curves in cryptography _ , advances in cryptology  crypto85 proceedings , springer ",
    "berlin  heidelberg , 1986 .",
    " a. myasnikov , a. ushakov , _ quantum algorithm for discrete logarithm problem for matrices over finite group rings _ , journal of symbolic computation , to appear ."
  ],
  "abstract_text": [
    "<S> we present a polynomial - time reduction of the discrete logarithm problem in any periodic ( a.k.a .  </S>",
    "<S> torsion ) semigroup ( ) to the classic dlp in a sub__group _ _ of the same semigroup . </S>",
    "<S> it follows that can be solved in polynomial time by quantum computers , and that has subexponential algorithms whenever the classic dlp in the corresponding groups has subexponential algorithms . </S>"
  ]
}