{
  "article_text": [
    "algorithmic information theory tries to define the notion of _ complexity _ of a finite object and the related notion of its _ a priori probability_. both notions have different versions , and many of these versions can be used to define algorithmic randomness . to explain why the result of this paper could be interesting ,",
    "let us start with a short survey of these notions and related results ; for the detailed exposition of the related definitions and results see , e.g. ,  @xcite .",
    "a notion of prefix complexity was introduced by levin ( see @xcite and later by chaitin  @xcite ( in different forms ) . let @xmath5 be a computable function whose arguments and values are binary strings .",
    "this function is called _ prefix - free _ if its domain is prefix - free , i.e. , does not contain both a string and its non - trivial prefix .",
    "define @xmath6 the minimal length of @xmath7 such that @xmath8 . among all functions",
    "@xmath9 for all computable prefix - free @xmath5 there exists a mininal one ( up to @xmath10 additive term ) ; one of them is fixed and called @xmath1 , the prefix - free complexity of @xmath2 .",
    "( another version , which gives the same function @xmath11 with @xmath10-precision , uses _ prefix - stable _ functions",
    "@xmath5 : this means that if @xmath12 is defined , then @xmath13 is defined and equals @xmath12 for all @xmath14 ) .",
    "the prefix complexity is closely related with the _ discrete a priori probability _  @xcite . consider a non - negative total real function @xmath15 defined on binary strings .",
    "we call @xmath15 a _ discrete semimeasure _ if @xmath16 .",
    "we say also that @xmath15 is _ lower semicomputable _ if @xmath17 can be represented as a limit of a non - decreasing sequence @xmath18 where @xmath19 is a non - negative total function of two arguments with rational values .",
    "levin introduced this notion and showed that there exist a maximal ( up to @xmath10-factor ) lower semicomputable semimeasure , and this semimeasure is equal to @xmath20 .",
    "we fix some maximal lower semicomputable semimeasure , call it the _ discrete a priori probability _ ( see below about the continuous a priori probability ) , and denote it in the sequel by  @xmath21 .",
    "discrete lower semicomputable semimeasures are exactly the output distributions of probabilistic machines without input that produce their output at once ( say , write a binary string and then terminate ) .",
    "we can also consider probabilistic machines without input that produce their output bit by bit ( and never terminate explicitly , though it may happen that they produce only finitely many output bits ) .",
    "the output distributions of such machines are described by lower semicomputable _ continuous semimeasures _ ( = semimeasures on a binary tree ) , introduced in  @xcite . by a continuous semimeasure",
    "we mean a non - negative total function @xmath22 that is defined on binary strings and has the following two properties :    * @xmath23 , where @xmath24 is an empty string ; * @xmath25 for every string @xmath2 .",
    "there exists a maximal ( up to @xmath10-factor ) lower semicomputable continuous semimeasure ; it is called the _ continuous a priori probability _ and is denoted by @xmath26 in the sequel .",
    "the quantity @xmath27 is ofter called _ a priori complexity _ and sometimes denoted @xmath0 .",
    "now we have defined all the quantities involved in our main result , but to explain its informal meaning we should say more about algorithmic randomness .",
    "( these explanations are not needed to understand the statement and the proof of the main result , so the reader may jump to the next section . )",
    "the notion of a random sequence was introduced by martin - lf in 1966 ( see  @xcite ) .",
    "let @xmath28 be a computable measure on the cantor space @xmath29 of infinite binary sequences ; this means that the values @xmath30 of the cylinders ( here @xmath31 is the set of all infinite extensions of a binary string @xmath2 ) can be effectively computed with arbitrary precision",
    ". an _ effectively open _ subset of @xmath32 is a union of a ( computably ) enumerable set of cylinders .",
    "a _ martin - lf test _",
    "( with respect to @xmath28 ) is an uniformly enumerable decreasing sequence of effectively open sets @xmath33 such that @xmath34 .",
    "a sequence @xmath35 _ passes _ this test if it does not belong to @xmath36 .",
    "_ martin - lf random sequences _",
    "are sequences that pass all tests ( with respect to @xmath28 ) .    in 1970s",
    "levin and gacs found an useful reformulation of this definition in terms of _ randomness deficiency _ function .",
    "consider a lower semicomputable function @xmath37 on the cantor space with non - negative real values ( possible infinite ) .",
    "lower semicomputability means that this the set @xmath38 is effectively open for all positive rational @xmath39 uniformly in @xmath39 .",
    "a _ levin  gacs test _ with respect to @xmath28 is such a function with finite integral @xmath40 . for a given @xmath28",
    "there is a maximal ( up to @xmath10-factor ) levin  gacs test ; martin - lf random sequnces are exactly the sequences for which this test is finite .",
    "there is a formula that expresses a maximal test in terms of a priori probability : @xmath41 here @xmath42 means that binary string @xmath2 is a prefix of an infinite binary sequence @xmath3 ; note that @xmath43 in the left - hand side depends on @xmath28 ( though this is not reflected in the notation ) .",
    "moreover , the sum in this formula can be replaced by the supremum .    for the uniform lebesgue measure on the cantor space",
    "this result can be rewritten as follows : @xmath44 this equation implies both schnorr ",
    "levin criterion of randomness ( see  @xcite ; its version with prefix complexity saying @xmath3 is martin - lf random with respect to the uniform measure iff @xmath45 is bounded , is mentioned in  @xcite ) and the miller ",
    "yu _ ample excess _ lemma ( @xcite , section  2 ) saying that the sum in the right hand side is finite for random @xmath3 .",
    "there were many attempts to generalize a notion of randomness to a broader class of distributions , not only computable measures .",
    "the notion of uniform test ( a function of two arguments : a sequence and a measure ) was introduced by levin ( see  @xcite ) ; it was used to define _ uniform randomness _ with respect to arbitrary ( not necessarily computable ) measure @xmath28 .",
    "levin proved that there exists a _ neutral measure _",
    "@xmath46 such that every sequence is uniformly random with respect to @xmath46 ( and even has uniform randomness deficiency at most @xmath47 ) , see  @xcite for the exposition of these results .",
    "one could also try to extend the definition to continuous lower semicomputable",
    "_ _ semi__measures ( a broader class than computable measures where @xmath48 ) . such a semimeasure is an output distribution of a probabilistic machine and one may ask which sequences are `` plausible outcomes '' for such a machine . in this case",
    "there is no universally accepted definition ; one of the desirable properties of such a definition is that every sequence should be random with respect to continuous a priori probability @xmath49 ( that corresponds to a probabilistic machine for which we do not have any a priori information ) .",
    "one of the possibilities would be to use gacs formula as a definition and say that a sequence @xmath3 is random with respect to a continuous semimeasure @xmath50 if the sum @xmath51 is finite , or if the supremum @xmath52 is finite .",
    "if @xmath50 is the continuous a priori probability , the supremum is always finite ( and uniformly bounded : it is easy to see that @xmath53 for all @xmath2 ) .",
    "in 2010 lempp , miller , ng and turetsky ( unpublished ; we thank j.  miller who kindly provided a copy of this note ) have shown that for every @xmath3 the ratio @xmath54 tends to zero for prefixes @xmath42 ( though it is @xmath55 , say , for strings of the form @xmath56 ) .    in this paper",
    "we show ( theorem  [ th : main ] in section  [ sec : main ] ) that this result can not be strengthened to show that the sum of @xmath54 along every sequence is bounded .",
    "so the first of the suggested definitions of randomness with respect to semimeasure ( with the sum instead of supremum ) differs from the second one : not all sequences are random with respect to @xmath57 , according to this definition .    it would be interesting to understand better for which sequences the sum @xmath58 is finite .",
    "are they related somehow to k - trivial sequences ( where @xmath59 is equal to @xmath60 up to @xmath10-factor ) ?",
    "we do not know the answer ; we can show only ( see section  [ sec : enumerable ] ) that one can find a computably enumerable set whose characteristic sequence has this property .",
    "our result about the sum of @xmath54 is of computational nature : if we allow more computational power for @xmath26 , the sum becomes finite , as the following simple proposition shows .",
    "[ prop : offline ] let @xmath61 be the relativized continuous a priori probability using @xmath62 as an oracle . then the sum @xmath63 is bounded for all @xmath3 by a constant ( not depending on @xmath3 ) .",
    "it is enough to construct a @xmath62-computable _ measure _ @xmath64 such that @xmath65 for all @xmath3 .",
    "( then we can note that @xmath66 is an upper bound for @xmath64 . )",
    "one can describe such a measure explicitly .",
    "let us add all the a priori probabilities of all strings @xmath2 that start with @xmath67 and with @xmath47 : @xmath68 ( note that @xmath69 , where @xmath24 denotes the empty string , the root of the tree . )",
    "now let us split @xmath47 into @xmath70 in the same proportion , i.e. , let @xmath71 then we continue in the same way , splitting @xmath72 into @xmath73 and @xmath74 in the proportion @xmath75 , and so on .",
    "here @xmath76 , defined for every string @xmath14 , denotes the sum @xmath77 .",
    "the numbers @xmath76 are lower semicomputable , so they are @xmath62-computable ( and positive ) , and the measure @xmath64 is well defined and @xmath62-computable .",
    "it remains to check that it is large enough , so the sum in question is bounded by @xmath47 .",
    "it is enough to prove this bound for finite sums ( when only vertices below some level @xmath46 are considered ) , so we can argue by induction and assume that the similar statement is true for the left and right subtrees of the root , with appropriate scaling .",
    ", so the tree height is less by @xmath47 and we can apply the induction assumption .",
    "the base of induction is trivial : in the root the ratio @xmath78 is at most @xmath47 for evident reasons . ]",
    "the sum of @xmath17 in the left subtree is bounded by ( actually , is equal to ) @xmath79 , instead of @xmath47 in the entire tree ; the sum in the right subtree in bounded by @xmath80 . on the other hand ,",
    "the values of @xmath64 at the roots of these trees , i.e. , @xmath72 and @xmath81 , are also smaller .",
    "so the induction assumption says that for each path in the left subtree the sum of @xmath82 is bounded by @xmath83 , and for each path in the right subtree the sum is bounded by @xmath84 .",
    "therefore , it remains to show that @xmath85    recall that we defined @xmath72 and @xmath81 in such a way that they are proportional to @xmath79 and @xmath80 respectively , and the sum @xmath86 .",
    "so the both fractions in the last formula are equal to @xmath87 , and it remains to note that @xmath88 is the sum of @xmath59 over all strings @xmath2 and is bounded by @xmath47 .",
    "* remark*. laurent bienvenu noted that this ( simple ) computation can be replaced by references to some known facts and techniques .",
    "namely , we know that there exists a neutral measure @xmath46 such that every binary sequence @xmath3 has uniform deficiency at most @xmath47 with respect to @xmath46 . this deficiency can be rewritten as @xmath89 ( see  @xcite for details ) . using low - basis argument",
    ", we can choose a @xmath62-computable neutral measure @xmath46 ; then @xmath90 is greater that this @xmath46 . and ( in any case ) @xmath91 is greater than @xmath59 , so we get a desired result .",
    "[ th : main ] there exists an infinite binary sequence @xmath3 such that @xmath92    this is the main result of the paper . the proof uses ( now quite standard ) game technique . in this section",
    "we describe some infinite game and show how the main result follows from the existence of a computable winning strategy for one of the players ( called mathematician , or * m * ) in this game .",
    "then , in section  [ sec : finite - use ] we reduce this game to a finite game ( more precisely , to a class of finite games ) , and show that if all these games uniformly have a computable winning strategy for * m * , then the infinite game has a computable winning strategy .",
    "finally , in section  [ sec : finite - win ] we construct ( inductively ) winning strategies for finite games .",
    "( this will be the most technical part of the proof : we even need to compute some integral ! )    let us describe an infinite game with full information between two players , the mathematician ( * m * ) and the adversary ( * a * ) .",
    "this game is played on an infinite binary tree .",
    "mathematician assigns some non - negative rational weights to the tree vertices ( = binary strings ) .",
    "initially all the weights are zeros ; at each move * m * can increase finitely many weights but can not decrease any of them . the total weight used by * m * ( the sum of her weights )",
    "should never exceed @xmath47 .",
    "( we may assume that * m * loses the game immediately if her weights become too big . )",
    "the current * m * s weight of some vertex @xmath2 will be denoted by @xmath17 , so the requirement says that @xmath16 at any moment of the game ( otherwise * m * loses immediately )",
    ".    adversary also assigns increasing non - negative rational weights to the tree vertices . initially all they are zeros , except for the root weight which is @xmath47 .",
    "but the condition is different : for every vertex @xmath2 the inequality @xmath93 should be true .",
    "informally , one can interpret @xmath94 as a ( pre)flow that comes to vertex @xmath2 .",
    "the flow @xmath47 arrives to the root . from the root",
    "some parts @xmath95 and @xmath96 are shipped to the left and right sons of the root ( while the remaining part @xmath97 is reserved for future use . at the next level , e.g. , in the vertex @xmath67 , the incoming flow @xmath95 is split into @xmath98 , @xmath99 and the ( non - negative ) reserve @xmath100 , and so on . as the time goes , the incoming flow ( from the father ) increases , and it can be used to increase the outgoing flow ( to the sons ) or kept as a reserve .",
    "again , if * a * violates the restriction ( the inequality @xmath93 ) , she loses immediately .",
    "one may assume that the players alternate , though it is not really important : the outcome of the ( infinite ) game is determined by the limit situation , and postponing some move never hurts ( and even can simplify the player s task , since more information about the opponent s moves is then available ) .",
    "we say that * m * wins if there exist a branch in the tree , an infinite binary sequence @xmath3 , such that @xmath101 where @xmath17 and @xmath94 are limit values of the * m * s and * a * s weights respectively .",
    "one should agree also what happens if some values are zeros .",
    "it is not really important since each of the players can easily make her weights positive .",
    "however , it is convenient to assume that @xmath102 for @xmath103 and @xmath104 .    now the game is fully defined .",
    "since all the moves are finite objects , one can speak about computable strategies .",
    "the following lemma is the main step in the proof of theorem  [ th : main ] .",
    "[ lem : infinite ] * m * has a computable winning strategy in this game .    the proof of this lemma will be given in the next two sections . in the rest of this section",
    "we explain how the statement of the lemma implies theorem  [ th : main ] .",
    "this is a standard argument useg in all the game proofs .",
    "consider an ignorant adversary who does not even look on our ( mathematician s ) moves , and just enumerates from below ( lower semicomputes ) the values of the continuous a priori probability @xmath26 .",
    "( they are lower semicomputable ; some additional care is needed to ensure that @xmath25 is true not only for the limit values , but for approximations at every step , but this is done in a standard way , we can increase @xmath94 going from the leaves to the root . )    the actions of * a * are computable .",
    "let * m * uses her computable winning strategy against such an adversary .",
    "then * m * s behavior is computable , too .",
    "so the limit values of @xmath17 form a lower semicomputable function , and the winning condition guarantees that @xmath105 is infinite for some sequence @xmath3 .",
    "it remains to note that the discrete a priori probability @xmath59 is an upper bound ( up to @xmath10-factor ) for every lower semicomputable function @xmath17 .",
    "to construct the winning strategy for * m * in the infinite game described in the previous section , we combine winning strategies for finite games of similar nature .",
    "a finite game is determined by two parameters @xmath46 and @xmath106 ; the value of @xmath46 is the height of the finite full binary tree on which the game is played , and @xmath106 is the value of the sum that * m * should achieve to win the game . here",
    "@xmath46 is a positive integer , and @xmath107 is a rational number .",
    "initially all vertices ( = all strings of length at most @xmath46 ) have zero @xmath22- and @xmath15-weights , except for the root that has unit @xmath22-weight : @xmath23 .",
    "the players alternate ; at every move each player may increase her weights ( rational numbers ) , but both players should obey the restrictions : the sum of @xmath15-weights should not exceed @xmath47 ; for every @xmath2 that is not a leaf the inequality @xmath25 should be true ; the value of @xmath108 remains equal to @xmath47 .",
    "the position of a game is _ winning _ for * m * if there exists a leaf @xmath109 such that the sum @xmath110 is at least @xmath106 . otherwise the position is winning for * a*. each player , making a move , should create a winning position ( for her ) , otherwise she loses the game .",
    "( she may also lose the game by violating the restrictions for her moves . )    [ lem : finite ] for every positive rational @xmath106 there exists some @xmath46 and a winning strategy for * m * that guarantees that * m * wins after a bounded number of steps .",
    "( the bound depends on @xmath106 , but not on * a * s moves . )",
    "the value of @xmath46 and the strategy are computable given  @xmath106 .",
    "r0pt     the proof of this lemma will be given in the next section . in the rest of this section",
    "we show how we can use winning strategies for finite games to win the infinite game of the previous section ( and therefore to finish the proof of our main result , theorem  [ th : main ] ) .",
    "let us make first several simple remarks .",
    "first , note that if * m * has a winning strategy for some @xmath46 , she has also a winning strategy for all larger @xmath46 ( just ignore the vertices that have height greater than @xmath46 ) .",
    "so the words `` there exists some @xmath46 '' can be replaced by `` for every sufficiently large @xmath46 '' .",
    "second , one can scale the game , bounding the total * m*-weights by some quota @xmath19 ( instead of @xmath47 ) and letting @xmath108 be some @xmath50 ( also instead of @xmath47 ) . then",
    ", if * m * was able to achieve the sum @xmath106 in the original game , she can use essentially the same strategy in the new game to achieve @xmath111 .",
    "for that she should imagine that the actual moves of * a * are divided by @xmath50 , and multiply by @xmath19 the moves recommended by the strategy .",
    "since @xmath106 in lemma  [ lem : finite ] is arbitrary , * m * can achieve arbitrary large sum even if her weights are limited by arbitrary small constant @xmath112 ( known in advance ) ; the size @xmath46 of the tree then depends both on the sum we want to achieve , and on the allowed quota @xmath113 .",
    "this simple remark allows * m * to run in parallel several strategies on some subtrees , allocating quotas @xmath114 to them , where @xmath115 is some converging series , e.g. , @xmath116 .",
    "these strategies achieve sum @xmath47 in each subtree .",
    "it is indeed possible : the flow generated by the adversary can be considered separately on each subtree : if the total flow starting from the root is at most @xmath47 , the flow in every vertex , including the root of a subtree , is also at most @xmath47 .",
    "( note the using @xmath117 in the root instead of @xmath47 makes the task of adversary harder , so * m * can win in every subtree . )",
    "these subtrees are chosen as shown on fig .",
    "[ subtrees ] .",
    "knowing @xmath118 , we choose the height of the first subtree ; knowing the number of leaves in the first subtree and the corresponding @xmath119 , we choose the appropriate heights for the second layer subtrees ( one can choose the same height for all of them to make the picture nicer ) ; then , knowing the number of leaves in all of then , we look at the corresponding @xmath119 and select the height for the third layer , etc . the games are played ( and won ) independently in each subtree . in each subtree",
    "there is a path with @xmath120 , and we can combine these paths into an infinite path starting from the root .",
    "in this section we provide the proof of lemma  [ lem : finite ] , therefore finishing the proof of our main result , theorem  [ th : main ] . as we have seen , the winning strategy for mathematician should rely on the on - line nature of the game : if * m * makes only one move and then stops , adversary could win by splitting the flow proportional to the weights of the subtrees ( see the proof of proposition  [ prop : offline ] ) .        to construct the winning strategy for * m * in the finite game , first let us start with a toy example and show how she can make the sum @xmath110 greater than @xmath47 .",
    "for this , tree of height @xmath121 is enough ( in fact only some part of it is needed ) .",
    "* m * starts by putting weights @xmath122 to vertices @xmath67 and @xmath123 ( figure  [ game5 ] ) .",
    "then * a * has to decide how much flow she wants to send to @xmath67 and @xmath123 .",
    "there are several possibilities :    * the flow to @xmath67 is small : @xmath124 . in this case",
    "@xmath98 is obviously also less than @xmath125 , so @xmath126 and this move does not create a winning position for * a*. +    * the flow to @xmath67 is big : @xmath127 . in this case * a * may get a winning position ( for now ) .",
    "however , * m * still can win .",
    "indeed , @xmath128 is less than @xmath125 and remains less than @xmath129 forever",
    ". then * m * puts weight @xmath125 to vertex @xmath47 ( figure  [ game6 ] ) , making the sum there greater than @xmath47 , and * a * can not do anything . +    * the intermediate case : @xmath130 . in this case",
    "@xmath98 should be also @xmath125 , otherwise the sum in @xmath123 will still exceed @xmath47 and * a * does not get a winning position .",
    "but if @xmath131 , * m * can put weight @xmath125 to vertex @xmath132 , and * a * can not send more than @xmath129 to @xmath132 ( since @xmath129 is already directed to @xmath123 ) .",
    "then , @xmath133    more careful analysis shows that using this idea * m * can get a winning strategy for @xmath134 .",
    "but we need an arbitrary large @xmath106 anyway , so we do not go into details , and provide another construction .    the winning strategy for arbitrary @xmath106 will be recursive : we assume that * m * has winning strategy for some @xmath106 and then use this strategy to construct * m * s winning strategy for some @xmath135 , where @xmath136 .",
    "the increase @xmath137 depends on @xmath106 and is rather small , but has a lower bound @xmath138 which is a positive continuous function of @xmath106 .",
    "iterating this construction , we get @xmath139-winning strategies where @xmath140 ( for @xmath141 the winning strategy is trivial ) and @xmath142 we see now that @xmath143 and @xmath144 ; indeed , if @xmath145 for some finite @xmath146 , then @xmath147 , a contradiction .",
    "r0 cm     to explain the idea of this construction , let us first comment on the toy example explained above ( how to get sum greater than @xmath47 ) .",
    "making her first move , * m * keeps some reserve that can be later put into the vertex @xmath47 .",
    "this possibility creates a constant threat for * a * that prevents her from directing too much flow to @xmath67 .",
    "the same kind of threat will be used in the final construction ; again vertex @xmath47 will be used as `` threat vertex '' . if * a * directs to much flow to the left ( vertex @xmath67 ) , * m * sees this and uses all the reserve to win in the right subtree .    however , now the strategy is more complicated .",
    "there are two main improvements .",
    "first , instead of placing some weight in a vertex as before , * m * uses scaled @xmath106-strategy in the subtree rooted at that vertex , so the weight is used more efficiently ( with factor @xmath106 ) .",
    "this is done both in the left subtree and in the threat vertex @xmath47 .",
    "( the subtrees where @xmath106-strategy is played , are shown in grey in figure  [ game8 ] . )",
    "second , in the left subtree ( of sufficient height ) * m * uses sequentially @xmath148 vertices @xmath149 ( and @xmath148 corresponding subtrees ) for large enough @xmath148 .",
    "( we will discuss later how @xmath148 is chosen . )",
    "let us describe the @xmath150-strategy in more details .",
    "first of all , * m * puts weight @xmath137 into vertex @xmath67 ( after that * m * will never add weight there , so vertex @xmath67 always has weight  @xmath137 ) . in the strategy",
    "is equal to the desired increase in @xmath106 ; there are no deep reasons for this choice , but it simplifies the computations . ]    after that * m * still has weight @xmath151 available .",
    "it is divided into @xmath148 equal parts , @xmath152 each .",
    "these parts are used sequentially in subtrees with roots @xmath149 ( figure  [ game8 ] ) . in these subtrees",
    "* m * uses scaled @xmath106-strategy ; the coefficient is @xmath152 . in this way * m * forces * a * to direct a lot of flow to these @xmath148 subtrees or lose the @xmath106-game in one of this subtrees ( and therefore lose @xmath150-game in the entire tree , if the parameters are chosen correctly ) .",
    "the threat vertex @xmath47 is used as follows : if at some point ( after @xmath153 games for some @xmath153 ) the flow directed by * a * to @xmath67 is too large , * m * changes her strategy and use all the remaining weight , which is @xmath154 , for @xmath106-strategy in the @xmath47-subtree ( and wins , if the parameters are chosen correctly ) .",
    "now we have to quantify the words `` a lot of flow '' and `` too large flow '' by choosing some thresholds .",
    "assume that after @xmath153 games * a * directed some weight @xmath155 to @xmath67 .",
    "then she can use only @xmath156 for the game in the threat vertex . using @xmath106-strategy with reserve @xmath154 , * m * can achieve sum ( along some path in the right subtree ) @xmath157 so the threshold @xmath158 is obtained from the equation @xmath159 if the flow to the left vertex @xmath67 is at least @xmath158 , * m * stops playing games in the left subtree and wins the entire game by switching to @xmath106-strategy in the right subtree and using all remaining weight there .    what happens if * a * does not exceed the thresholds @xmath158",
    "? then the vertex @xmath67 adds @xmath160 to the sum in the @xmath153-th game , and to win the entire game * m * needs to get the sum @xmath161 in the @xmath153-th game .",
    "this can be achieved using ( scaled ) @xmath106-strategy with weight @xmath152 unless * a * directs @xmath162 to @xmath163-subtree , where @xmath162 is determined by the equation @xmath164 we need to prove , therefore , that for some @xmath137 ( depending on @xmath106 ) and for large enough @xmath148 the values @xmath162 determined by @xmath165 , where @xmath158 is determined by @xmath166 , satify the inequality @xmath167 then * a * is unable to direct @xmath162 in @xmath163-subtree for all @xmath153 and loses the game .",
    "this sum can be rewritten as follows : @xmath168 note that @xmath158 depends only on @xmath106 , @xmath137 and @xmath169 , so this sum is the riemann sum for the integral @xmath170 where @xmath171 note that we integrate a rational function of the form @xmath172 , so it is not a problem , and we get @xmath173 note that for @xmath174 this expression can be rewritten as @xmath175 so for sufficiently small @xmath136 this integral will be greater than @xmath176 , and we can choose @xmath148 large enough to make the riemann sum greater than @xmath47 .",
    "it is easy to get a positive lower bound for @xmath137 ( depending on @xmath106 ) and find the corresponding @xmath148 effectively .",
    "this finishes the proof of lemma  [ lem : finite ] and therefore the proof of our main result , theorem  [ th : main ] .",
    "* remark*. let us repeat the crucial point of this argument : during the initial phase of the strategy , when * m * s reserve is large , * a * can not direct a lot of flow into @xmath67 , so the weight @xmath137 placed into this vertex is taken with a large coefficient . without this threat * a * could place all the flow in the left subtree , and then the weight @xmath137 would not help : on the contrary , the same weight could have been used @xmath106 times more efficiently in the subtrees , and we get no increase in @xmath106 .",
    "the construction can be adjusted to guarantee some additional properties of the sequence @xmath3 with @xmath177 .",
    "[ th : enumerable ] there exists a computably enumerable set @xmath178 such that for its characterstic sequence @xmath179 ( where @xmath180 for @xmath181 and @xmath182 for @xmath183 ) the sum @xmath184 is infinite .",
    "we start by modification of the finite game of lemma  [ lem : finite ] .",
    "let us agree that * m * should ( for each her move ) not only achieve a winning position , but also explicitly mark one of the nodes of the tree where the sum is at least @xmath47 ( according to the definition of the winning position ) .",
    "if there are several nodes where the ( current ) sum reaches @xmath47 , * m * can choose any of them .",
    "during the game , * m * can change the marked node , but monotonicity is required : the marked nodes should form an increasing sequence in a coordinate - wise ordering ( for each node of a binary tree we consider a sequence of zeros and ones that leads to this node , and add infinitely many trailing zeros ; in this way we get an infinite sequence , and when the node changes , the new sequence should be obtained from the previous one by some @xmath185 replacements )",
    ".    this requirement could be satisfied by minor changes in construction of winning strategy for @xmath150 game .",
    "note that the winning strategy for @xmath150 game calls the winning @xmath106-strategy for vertices @xmath149 , and maybe for the threat vertex .",
    "using induction , we may assume that @xmath106-strategy satisfies the monotonicity requirement .",
    "this is not enough : * m * needs also to guarantee monotonicity while switching from the @xmath106-strategy in @xmath163-subtree to the @xmath106-strategy in @xmath186-subtree ( or in the threat vertex ) . to achieve this ,",
    "some precautions are needed .",
    "first of all , we choose @xmath149 in such a way that @xmath187 coordinate - wise . moreover",
    ", while playing the game above @xmath188 , * m * makes some bits equal to @xmath47 ( according to the winning @xmath106-strategy in the subtree ) .",
    "these bits can not be reversed back , but this is not a problem : for example , one can add several @xmath47s at the end of @xmath189 ( to cover all the bits changed while playing above @xmath188 ) , and use a subtree rooted there , then do the similar trick for @xmath190 , etc .",
    "( see figure  [ monotone2 ] ) .",
    "finally , the same can be done for the threat vertex .",
    "infinite game of lemma  [ lem : infinite ] can also be adjusted . here * m * should after each move maintain a _ current branch _",
    ", an infinite path in the binary tree that contains only finitely many ones ( so it is essentially a finite object and can be specified by * m * explicitly ) .",
    "the current branch may change during the game but in a monotone way : it should increase _ coordinate - wise_. in other words , if the previous branch went right at some level , the next one should do it too ( at the same level ) .",
    "this monotonicity requirement guarantees that there exists a limit branch , and * m * wins the ( infinite ) game if the sum is infinite along this branch .",
    "we claim that * m * has a computable winning strategy in this game . knowing this",
    ", we can easily construct an enumerable set required by theorem  [ th : enumerable ] .",
    "again we use the computable winning strategy against a `` blind '' adversary that enumerates from below the values of the continuous a priori semimeasure .",
    "then the behavior of the adversary is computable , the behavior of the computable winning strategy is also computable , and the limit branch will be a characteristic sequence of a ( computably ) enumerable set .",
    "it remains to explain how one can combine winning strategies for finite games ( modified ) to get a winning strategy for the infinite game .",
    "we can not run the strategies on subtrees in parallel as we did before , because the candidate branches provided by the strategies at the same level will not be related , and switching from one game to another will violate the ordering condition .",
    "instead , we start first the game in the root subtree .",
    "the strategy makes some move , in particular , marks some leaf of this subtree ( `` current candidate '' ) .",
    "then we start the strategy on a subtree that is above this marked leaf .",
    "this strategy marks some leaf in this subtree , and we start a third game above it , etc .",
    "( see figure  [ mon_subtrees ] . )    at some point one of these strategies may change its marked leaf .",
    "then all the games started above this ( now discarded ) leaf are useless , and we start a new game above the new marked leaf . to satisfy the monotonicity condition , we should start the new game high enough and put @xmath47s in all positions below the starting point of the new game . this will guarantee that all @xmath47s that were already in the current branch will remain there .",
    "( we assume that at every moment only finitely many games are started , and the current branch has only finitely many ones . )",
    "one can see that in the limit we still have a branch with infinite sum .",
    "indeed , in the root game the current marked leaf can only increase in the coordinate - wise ordering , and only finitely many changes of marked leaf are possible .",
    "therefore , some leaf will remain marked forever .",
    "the game started above this leaf will never be discarded , but the leaves marked in this game may change ( monotonically ) .",
    "this happens finitely many times , and after that the marked leaf remains the same , the game above it is never discarded , etc .",
    "the monotonicity is guaranteed both for the elements inside the tree where the marked leaf changed ( according to the monotonicity for finite games ) and for outside elements ( since we replace the bits in the discarded parts by @xmath47s only ) .",
    "l.  bienvenu , p.  gcs , m.  hoyrup , c.  rojas , a.  shen , algorithmic tests and randomness with respect to a class of measures , _ proc . of the steklov institute of mathematics _ , v.  274 ( 2011 ) , p.  41102 .",
    "see also : ` arxiv:1103.1529v2 ` .",
    "zvonkin and l.a .",
    "levin , the complexity of finite objects and the developments of the concepts of information and randomness by means of the theory of algorithms .",
    "_ russian mathematical surveys _ , 1970 , vol .  25 , issue 6(156 ) , p.  83124 .        c.  p.  schnorr , process complexity and effective random tests , _ journal of computer and system sciences _ , v.  7 ( 1973 ) , p.  376388",
    "preliminary version : _ proc .",
    "4th acm symp . on theory of computing _",
    "( stoc ) , 1972 , p.  168176 ."
  ],
  "abstract_text": [
    "<S> we consider two quantities that measure complexity of binary strings : @xmath0 is defined as the minus logarithm of continuous a priori probability on the binary tree , and @xmath1 denotes prefix complexity of a binary string @xmath2 . in this paper </S>",
    "<S> we answer a question posed by joseph miller and prove that there exists an infinite binary sequence @xmath3 such that the sum of @xmath4 over all prefixes @xmath2 of @xmath3 is infinite . </S>",
    "<S> such a sequence can be chosen among characteristic sequences of computably enumerable sets . </S>"
  ]
}