{
  "article_text": [
    "together with sorting , selection is one of the most widely used procedure in computer algorithms .",
    "indeed , it is easy to find hundreds if not thousands of algorithms ( documented in at least as many research articles ) that use selection as a subroutine .",
    "a classical example is  @xcite .    given a sequence @xmath6 of @xmath1 numbers ( usually stored in an array ) , and an integer ( target ) parameter @xmath7 , the selection problem asks to find the @xmath0th smallest element in @xmath6 .",
    "trivially sorting solves the selection problem , but if one aims at a linear time algorithm , a higher level of sophistication is needed .",
    "a now classical approach for selection  @xcite from the 1970s is to use an element in @xmath6 as a pivot to partition @xmath6 into two smaller subsequences and recurse on one of them with a ( possibly different ) selection parameter @xmath0 .",
    "the time complexity of this kind of algorithms is sensitive to the pivots used .",
    "for example , if a good pivot is used , many elements in @xmath6 can be discarded ; while if a bad pivot is used , in the worst case , the size of the problem may be only reduced by a constant , leading to a quadratic worst - case running time . but choosing a good pivot can be time consuming .    randomly choosing the pivots",
    "yields a well - known randomized algorithm with expected linear running time ( see e.g. ,  ( * ? ? ?",
    "9.2 ) ,  ( * ? ? ?",
    "13.5 ) , or  ( * ? ? ?",
    "* ch .  3.4 ) ) , however its worst case running time is quadratic in @xmath1 .",
    "the first deterministic linear time selection algorithm select ( called pick by the authors ) , in fact a theoretical breakthrough at the time , was introduced by blum  et  al .",
    "@xcite . by using the median of medians of small ( constant size ) disjoint groups of @xmath6 , good pivots that guarantee reducing the size of the problem by a constant fraction can be chosen with low costs .",
    "the authors  ( * ? ? ?",
    "* , proof of theorem  1 ) required the group size to be at least @xmath2 for the select algorithm to run in linear time .",
    "it has been largely perpetuated in the literature the idea that select with groups of @xmath3 or @xmath4 does not run in linear time .",
    "even an exercise of the book by cormen  et  al .",
    "* , exercise  9.3 - 1 ) asks the readers to argue that `` select does not run in linear time if groups of @xmath3 are used '' .",
    "we first point out that the argument used in the solution to this exercise  @xcite is invalid failing to provide an input sequence with one third of the elements being discarded in each recursive call in both the current sequence and its sequence of medians ; the difficulty ( and the flaw in the argument ) lies in the fact that these two sequences are not disjoint thus can not be constructed or controlled independently .",
    "the question whether the original select algorithm runs in linear time with groups of @xmath3 remains open at the time of this writing .",
    "further , we show that this restriction on the group size is unnecessary , namely that group sizes 3 or 4 can be used to obtain a deterministic linear time algorithm for the selection problem . since selecting",
    "the median in smaller groups is easier to implement and requires fewer comparisons ( e.g. , @xmath3 comparisons for group size @xmath3 versus @xmath8 comparisons for group size @xmath2 ) , it is attractive to have linear time selection algorithms that use smaller groups .",
    "our main result concerning selection with small group size is summarized in the following theorem .",
    "[ thm : thm1 ] there exist suitable variants of select with groups of @xmath3 and @xmath4 running in @xmath9 time .",
    "[ [ historical - background . ] ] historical background .",
    "+ + + + + + + + + + + + + + + + + + + + + +    the interest in selection algorithms has remained high over the years with many exciting developments ( e.g. , lower bounds , parallel algorithms , etc ) taking place ; we only cite a few here  @xcite .",
    "we also refer the reader to the dedicated book chapters on selection in  @xcite and the recent article  @xcite .",
    "[ [ outline . ] ] outline .",
    "+ + + + + + + +    in section  [ sec : prelim ] , the classical select algorithm is introduced ( rephrased ) under standard simplifying assumptions . in section",
    "[ sec : repeat ] , we introduce a variant of select , the _ repeated step _",
    "algorithm , which runs in linear time with both group size @xmath3 and @xmath4 . with groups of @xmath3",
    ", the algorithm executes a certain step , `` group by @xmath3 and find the medians of the groups '' , twice in a row . in section  [ sec : shift ] , we introduce another variant of select , the _ shifting target _ algorithm , a linear time selection algorithm with group size  @xmath4 . in each iteration ,",
    "upper or lower medians are used based on the current rank of the target , and the shift in the target parameter @xmath0 is controlled over three consecutive iterations . in section  [ sec : remark ] , we conclude with some remarks and a conjecture on the running time of the original select algorithm from  @xcite with groups of @xmath3 and  @xmath4 .",
    "without affecting the results , the following two standard simplifying assumptions are convenient : ( i )  the input sequence @xmath6 contains @xmath1 distinct numbers ; and ( ii )  the floor and ceiling functions are omitted in the descriptions of the algorithms and their analyses . under these assumptions , select with groups of @xmath2 ( from  @xcite ) can be described as follows ( using this group size has become increasingly popular , see e.g. ,  ( * ? ? ?",
    "* ch .  9.2 ) ) :    1 .",
    "[ alg5:step1 ] if @xmath10 , sort @xmath6 and return the @xmath0th smallest number .",
    "2 .   arrange @xmath6 into groups of size 5 .",
    "let @xmath11 be the sequence of medians of these @xmath12 groups .",
    "select the median of @xmath11 recursively , let it be @xmath13 .",
    "partition @xmath6 into two subsequences @xmath14 and @xmath15 ( order of other elements is preserved ) .",
    "if @xmath16 , return @xmath13 . otherwise if @xmath17 , go to step  [ alg5:step1 ] with @xmath18 and @xmath19",
    "otherwise go to step  [ alg5:step1 ] with @xmath20 , @xmath21 and @xmath22 .    denote the worst case running time of the recursive selection algorithm on an @xmath1-element input by @xmath23 .",
    "as shown in figure  [ fig : group5 ] , at least @xmath24 elements are discarded at each iteration , which yields the recurrence @xmath25 since the coefficients sum to @xmath26 , the recursion solves to @xmath27 ( as it is well - known ) .",
    "elements can be discarded . ]",
    "using group size @xmath3 directly in the select algorithm in @xcite yields @xmath28 which solves to @xmath29 . here a large portion ( at least one third ) of @xmath6 is discarded in each iteration but the cost of finding such a good pivot is too high , namely @xmath30 .",
    "the idea of our _ repeated step _ algorithm , inspired by the algorithm in  @xcite , is to find a weaker pivot in a faster manner by performing the operation `` group by @xmath3 and find the medians '' twice in a row ( as illustrated in figure  [ fig : group3 ] ) .",
    "[ [ algorithm ] ] algorithm + + + + + + + + +    1 .",
    "[ alg3:step1 ] if @xmath31 , sort @xmath6 and return the @xmath0 t smallest number .",
    "[ alg3:step2 ] arrange @xmath6 into groups of size @xmath3 .",
    "let @xmath11 be the sequence of medians of these @xmath32 groups .",
    "arrange @xmath11 into groups of size @xmath3 .",
    "let @xmath33 be the sequence of medians of these @xmath34 groups .",
    "[ alg3:step3 ] select the median of @xmath33 recursively , let it be @xmath13",
    "partition @xmath6 into two subsequences @xmath14 and @xmath15 .",
    "if @xmath16 , return @xmath13 . otherwise if @xmath17 , go to step  [ alg3:step1 ] with @xmath35 and @xmath19",
    "otherwise go to step  [ alg3:step1 ] with @xmath36 , @xmath21 and @xmath22 .    .",
    "empty disks represent elements that are guaranteed to be smaller or equal to @xmath13 . ]",
    "[ [ analysis . ] ] analysis .",
    "+ + + + + + + + +    since elements are discarded if and only if they are too large or too small to be the @xmath0th smallest element , the correctness of the algorithm follows . regarding the time complexity of this algorithm",
    ", we have the following lemma :    [ lem:1 ] the repeated step algorithm with groups of @xmath3 runs in @xmath37 time on an @xmath1-element input .    by finding the median of medians of medians instead of the median of medians , the cost of selecting the pivot @xmath13 reduces from @xmath38 to @xmath39 .",
    "we need to determine how well @xmath13 partitions @xmath6 in the worst case . in step  [ alg3:step3 ] , @xmath13 is guaranteed to be greater or equal to @xmath40 elements in @xmath11 .",
    "each element in @xmath11 is a median of a group of size @xmath3 in @xmath6 , so it is greater or equal to 2 elements in its group .",
    "all the groups of @xmath6 are disjoint , thus @xmath13 is at least greater or equal to @xmath41 elements in @xmath6 .",
    "similarly , @xmath13 is at least smaller or equal to @xmath41 elements in @xmath6 .",
    "thus , in the last step , at least @xmath41 elements can be discarded .",
    "the recursive call in step  [ alg3:step3 ] takes @xmath42 time .",
    "so the resulting recurrence is @xmath43 and since the coefficients on the right side sum to @xmath44 , we have @xmath27 , as required .",
    "in the select algorithm introduced in @xcite , the group size is restricted to odd numbers in order to avoid the calculation of the average of the upper and lower median . for group size of @xmath4 , depending on the choice of upper , lower or average median",
    ", there are three possible partial orders to be considered ( see figure  [ fig : partial ] ) .",
    "elements based on the upper ( left ) , lower ( middle ) and average ( right ) medians .",
    "the empty square represents the average of the upper and lower median which is not necessarily part of the @xmath4-element sequence . ]",
    "if the upper ( or lower ) median is always used , only @xmath45 elements are guaranteed to be discarded in each iteration ( see figure  [ fig : group4_lower ] ) which gives the recurrence @xmath46 the term @xmath47 is for the recursive call to find the median of all @xmath48 medians .",
    "this recursion solves to @xmath29 .",
    "even if we use the average of the two medians , the recursion remains the same since only @xmath49 elements from each of the @xmath50 groups are guaranteed to be discarded .",
    "observe that if the target parameter satisfies @xmath51 ( resp . , @xmath52 ) , using the lower ( resp . , upper )",
    "median gives a better chance to discard more elements and thus obtain a better recurrence ; detailed calculations are given in the proof of lemma  [ lem:2 ] .",
    "inspired by this idea , we propose the _ shifting target _ algorithm as follows :    [ [ algorithm-1 ] ] algorithm + + + + + + + + +    1 .",
    "[ alg4:step1 ] if @xmath53 , sort @xmath6 and return the @xmath0th smallest number .",
    "2 .   arrange @xmath6 into groups of size @xmath4 .",
    "let @xmath11 be the sequence of medians of these @xmath48 groups .",
    "if @xmath54 , the lower medians are used ; otherwise the upper medians are used . select the median of @xmath11 recursively ,",
    "let it be @xmath13 .",
    "partition @xmath6 into two subsequences @xmath14 and @xmath15 .",
    "if @xmath16 , return @xmath13 . otherwise if @xmath17 , go to step  [ alg4:step1 ] with @xmath35 and @xmath19",
    "otherwise go to step  [ alg4:step1 ] with @xmath36 , @xmath21 and @xmath22 .     with lower medians used . ]",
    "[ [ analysis.-1 ] ] analysis .",
    "+ + + + + + + + +    regarding the time complexity , we have the following lemma :    [ lem:2 ] the shifting target algorithm with group size @xmath4 runs in @xmath37 time on an @xmath1-element input .",
    "assume first that @xmath55 in some iteration so the lower medians are used . recall that @xmath13 is guaranteed to be greater or equal to @xmath45 numbers in @xmath6 .",
    "so either @xmath13 is the @xmath0th smallest element in @xmath6 or at least @xmath56 largest numbers are discarded ( see figure  [ fig : group4_lower ] ) , hence the worst - case running time recurrence is @xmath57 observe that in this case the coefficients on the right side sum to @xmath58 , yielding a linear solution , as required .",
    "now consider the case @xmath59 , so the lower medians are used .",
    "if @xmath60 , i.e. , the rank of @xmath13 is higher than @xmath0 , again at least @xmath56 largest numbers are discarded and   applies .",
    "otherwise , suppose that only @xmath61 smallest numbers are discarded .",
    "then in the next iteration , @xmath62 , @xmath63 .",
    "if @xmath64 , at least @xmath65 numbers are discarded . the first iteration satisfies recurrence   and we can use recurrence   to bound the term @xmath66 from above . we deduce that in two iterations the worst case running time satisfies the recurrence : @xmath67 observe that the coefficients on the right side sum to @xmath68 , yielding a linear solution , as required",
    "subsequently , we can therefore assume that @xmath69 .",
    "we have @xmath70 since @xmath71 , the lower medians will be used .",
    "as described above , if at least @xmath65 largest numbers are discarded , in two iterations , the worst case running time satisfies the same recurrence  .",
    "so suppose that only @xmath72 smallest numbers are discarded .",
    "let @xmath73 , @xmath74 .",
    "we have @xmath75 since @xmath76 , in the next iteration , at least @xmath77 numbers will be discarded .",
    "the first two iterations satisfy recurrence   and we can use recurrence   to bound the term @xmath78 from above . we deduce that in three iterations the worst case running time satisfies the recurrence : @xmath79 the sum of the coefficients on the right side is @xmath80 , so again the solution is @xmath27 .    by symmetry",
    ", the analysis also holds for the case @xmath52 , and the proof of lemma  [ lem:2 ] is complete .",
    "a similar idea of repeating the group step also applies to the case of groups of @xmath4 and yields @xmath81 which gives another linear time selection algorithm with group size @xmath4 .",
    "another variant of select with group size @xmath4 can be obtained by using the ideas of both algorithms together , i.e. , repeat the grouping by @xmath4 step twice in a row while @xmath11 contains the lower medians and @xmath33 contains the upper medians ( or vice versa ) .",
    "recursively selecting the median @xmath13 of @xmath33 takes time @xmath82 . notice that @xmath13 is greater or equal to at least @xmath83 elements in @xmath11 of which",
    "each is greater or equal to 2 elements in its group in @xmath6 .",
    "so @xmath13 is greater or equal to at least @xmath84 elements of @xmath6 . also , @xmath13 is smaller or equal to at least @xmath85 elements in @xmath11 of which each is smaller or equal to @xmath3 elements in its group of @xmath6 .",
    "so @xmath13 is smaller or equal to at least @xmath84 elements of @xmath6 , thus the resulting recurrence is @xmath86 again with a linear solution , as desired .",
    "the question whether the original selection algorithm introduced in  @xcite ( outlined in section  [ sec : prelim ] ) runs in linear time with group size 3 and @xmath4 remains open .",
    "although the recurrences @xmath87 ( see   and  ) for its worst - case running time with these group sizes both solve to @xmath29 , we believe that they only give non - tight upper bounds on the worst case scenarios . in any case , and against popular belief we think that @xmath88 is _ not _ the answer :              s.  battiato , d.  cantone , d.  catalano , g.  cincotti , and m.  hofri , an efficient algorithm for the approximate median selection problem , _ proceedings of the 4th italian conference on algorithms and complexity _",
    "( ciac 2000 ) , lncs vol .  1767 , springer , 2000 , pp .",
    "226238 .",
    "d.  g.  kirkpatrick , closing a long - standing complexity gap for selection : @xmath93 , in _ space - efficient data structures , streams , and algorithms  papers in honor of j. ian munro on the occasion of his 66th birthday _",
    "( a. brodnik , a. lpez - ortiz , v. raman , and a. viola , editors ) , lncs vol .  8066 , springer , 2013 , pp ."
  ],
  "abstract_text": [
    "<S> we revisit the selection problem , namely that of computing the @xmath0th order statistic of @xmath1 given elements , in particular the classical deterministic algorithm by grouping and partition due to blum , floyd , pratt , rivest , and tarjan  ( 1973 ) . </S>",
    "<S> while the original algorithm uses groups of odd size at least @xmath2 and runs in linear time , it has been perpetuated in the literature that using groups of @xmath3 or @xmath4 will force the worst - case running time to become superlinear , namely @xmath5 . </S>",
    "<S> we first point out that the arguments existent in the literature justifying the superlinear worst - case running time fall short of proving the claim . </S>",
    "<S> we further prove that it is possible to use group size @xmath3 or @xmath4 while maintaining the worst case linear running time . to this end </S>",
    "<S> we introduce two simple variants of the classical algorithm , the repeated step algorithm and the shifting target algorithm , both running in linear time .    </S>",
    "<S> * keywords * : median selection , @xmath0th order statistic , comparison algorithm . </S>"
  ]
}