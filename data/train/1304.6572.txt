{
  "article_text": [
    "it is rare that the beginning of a whole new area of science can be traced back to one particular paper .",
    "this is the case with public key cryptography ; it started with the seminal paper @xcite .",
    "the simplest , and original , implementation of the protocol uses the multiplicative group of integers modulo @xmath0 , where @xmath0 is prime and @xmath1 is primitive @xmath2 . a more general description of the protocol uses an arbitrary finite cyclic group .    1",
    ".   alice and bob agree on a finite cyclic group @xmath3 and a generating element @xmath1 in @xmath3 .",
    "we will write the group @xmath3 multiplicatively .",
    "2 .   alice picks a random natural number @xmath4 and sends @xmath5 to bob .",
    "3 .   bob picks a random natural number @xmath6 and sends @xmath7 to alice .",
    "alice computes @xmath8 .",
    "bob computes @xmath9 .    since @xmath10 ,",
    "both alice and bob are now in possession of the same group element @xmath11 which can serve as the shared secret key .    the protocol is considered secure against eavesdroppers if @xmath3 and @xmath1 are chosen properly .",
    "the eavesdropper must solve the _ diffie - hellman problem _ ( recover @xmath12 from @xmath1 , @xmath5 and @xmath7 ) to obtain the shared secret key .",
    "this is currently considered difficult for a  good \" choice of parameters ( see e.g. @xcite for details ) .",
    "there is an ongoing search for other platforms where the diffie - hellman or similar key exchange could be carried out more efficiently , in particular with public / private keys of smaller size .",
    "this search already gave rise to several interesting directions , including a whole area of elliptic curve cryptography .",
    "we also refer the reader to @xcite for a survey of proposed cryptographic primitives based on non - abelian (= non - commutative ) groups .",
    "a survey of these efforts is outside of the scope of the present paper ; our goal here is to suggest a new key exchange protocol based on extension of a ( semi)group by automorphisms .",
    "our protocol can be based on any group , in particular on any non - commutative group .",
    "it has some superficial resemblance to the classical diffie - hellman protocol , but there are several distinctive features that , we believe , give our protocol important advantages . in particular , even though the parties do compute a large power of a public element ( as in the classical diffie - hellman protocol ) , they do not transmit the whole result , but rather just part of it .",
    "we also describe in this paper some particular instances of our general protocol .",
    "in particular , we suggest a non - commutative semigroup ( of matrices ) as the platform and show that security of the relevant protocol is based on a quite different assumption compared to that of the standard diffie - hellman protocol .",
    "we mention another , rather different , proposal @xcite of a cryptosystem based on the semidirect product of two groups and yet another , more complex , proposal of a key agreement based on the semidirect product of two monoids @xcite .",
    "both these proposals are very different from ours .",
    "also , the extended abstract @xcite , despite the similarity of the title , has very little overlap with the present paper .",
    "in particular , the key exchange protocol in section [ protocol_holomorph ] of the present paper is brand new .",
    "finally , we note that the basic construction ( semidirect product ) we use in this paper can be adopted , with some simple modifications , in other algebraic systems , e.g. associative rings or lie rings , and key exchange protocols similar to ours can be built on those .",
    "we include this section to make the exposition more comprehensive .",
    "the reader who is uncomfortable with group - theoretic constructions can skip to subsection [ holomorph ] .",
    "we now recall the definition of a semidirect product :    let @xmath13 be two groups , let @xmath14 be the group of automorphisms of @xmath3 , and let @xmath15 be a homomorphism .",
    "then the semidirect product of @xmath3 and @xmath16 is the set @xmath17 with the group operation given by +    @xmath18 .",
    "+ here @xmath19 denotes the image of @xmath1 under the automorphism @xmath20 , and when we write a product @xmath21 of two morphisms , this means that @xmath22 is applied first .    in this paper , we focus on a special case of this construction , where the group @xmath16 is just a subgroup of the group @xmath14 .",
    "if @xmath23 , then the corresponding semidirect product is called the _",
    "holomorph _ of the group @xmath3 .",
    "we give some more details about the holomorph in our section [ holomorph ] , and in section [ protocol_holomorph ] we describe a key exchange protocol that uses ( as the platform ) an extension of a group @xmath3 by a _ cyclic _",
    "group of automorphisms .",
    "a particularly simple special case of the semidirect product construction is where the group @xmath16 is just a subgroup of the group @xmath14 .",
    "if @xmath23 , then the corresponding semidirect product is called the _",
    "holomorph _ of the group @xmath3 .",
    "thus , the holomorph of @xmath3 , usually denoted by @xmath24 , is the set of all pairs @xmath25 , where @xmath26 , with the group operation given by  @xmath27 .",
    "it is often more practical to use a subgroup of @xmath14 in this construction , and this is exactly what we do in section [ protocol_holomorph ] , where we describe a key exchange protocol that uses ( as the platform ) an extension of a group @xmath3 by a cyclic group of automorphisms .",
    "one can also use this construction if @xmath3 is not necessarily a group , but just a semigroup , and/or consider endomorphisms of @xmath3 , not necessarily automorphisms .",
    "then the result will be a semigroup ; this is what we use in our section [ matrices ] .",
    "in the simplest implementation of the construction described in our section [ holomorph ] , one can use just a cyclic subgroup ( or a cyclic subsemigroup ) of the group @xmath14 ( respectively , of the semigroup @xmath28 of endomorphisms ) instead of the whole group of automorphisms of @xmath3 .",
    "thus , let @xmath3 be a ( semi)group . an element @xmath29 is chosen and made public as well as an arbitrary automorphism @xmath30 ( or an arbitrary endomorphism @xmath31 ) .",
    "bob chooses a private @xmath32 , while alice chooses a private @xmath33 .",
    "both alice and bob are going to work with elements of the form @xmath34 , where @xmath35 .",
    "note that two elements of this form are multiplied as follows :  @xmath36 .    1",
    ".   alice computes @xmath37 and sends * only the first component * of this pair to bob .",
    "thus , she sends to bob * only * the element @xmath38 of the ( semi)group @xmath3 .",
    "2 .   bob computes @xmath39 and sends * only the first component * of this pair to alice .",
    "thus , he sends to alice * only * the element @xmath40 of the ( semi)group @xmath3 .",
    "alice computes @xmath41 .",
    "her key is now @xmath42 .",
    "note that she does not actually  compute \" @xmath43 because she does not know the automorphism @xmath44 ; recall that it was not transmitted to her .",
    "but she does not need it to compute @xmath45 .",
    "4 .   bob computes @xmath46 .",
    "his key is now @xmath47 .",
    "again , bob does not actually  compute \" @xmath48 because he does not know the automorphism @xmath49 .",
    "5 .   since @xmath50",
    ", we should have @xmath51 , the shared secret key .",
    "note that , in contrast with the  standard \" diffie - hellman key exchange , correctness here is based on the equality @xmath52 rather than on the equality @xmath53 . in the  standard \" diffie - hellman set up , our trick would not work because , if the shared key @xmath54 was just the product of two openly transmitted elements , then anybody , including the eavesdropper , could compute @xmath54 .",
    "from the look of transmitted elements in our protocol in section [ protocol_holomorph ] , it may seem that the parties have to compute a product of @xmath55 ( respectively , @xmath56 ) elements of the ( semi)group @xmath3 .",
    "however , since the parties actually compute powers of an element of @xmath3 , they can use the  square - and - multiply \" method , as in the standard diffie - hellman protocol .",
    "then there is a cost of applying an automorphism @xmath57 to an element of @xmath3 , and also of computing powers of @xmath57 .",
    "these costs depend , of course , on a specific platform ( semi)group that is used with our protocol . in our first ,  toy \" example ( section [ toy ] below ) , both applying an automorphism @xmath57 and computing its powers amount to exponentiation of elements of @xmath3 , which can be done again by the ",
    "square - and - multiply \" method . in our main example , in section [ matrices ] , @xmath57 is a conjugation , so applying @xmath57 amounts to just two multiplications of elements in @xmath3 , while computing powers of @xmath57 amounts to exponentiation of two elements of @xmath3 ( namely , of the conjugating element and of its inverse ) .",
    "thus , in either instantiation of our protocol considered in this paper , the cost of computing @xmath58 is @xmath59 , just as in the standard diffie - hellman protocol .",
    "as one of the simplest instantiations of our protocol , we use here the multiplicative group @xmath60 as the platform group @xmath3 to illustrate what is going on . in selecting a prime @xmath0 , as well as private exponents",
    "@xmath61 , one can follow the same guidelines as in the  standard \" diffie - hellman .    selecting the ( public ) endomorphism @xmath57 of the group @xmath60 amounts to selecting yet another integer @xmath62 , so that for every @xmath63 , one has @xmath64 .",
    "if @xmath62 is relatively prime to @xmath65 , then @xmath57 is actually an automorphism .",
    "below we assume that @xmath66 .",
    "then , for an element @xmath67 , we have : @xmath68    we focus on the first component of the element on the right ; easy computation shows that it is equal to @xmath69 .",
    "thus , if the adversary chooses a  direct \" attack , by trying to recover the private exponent @xmath55 , he will have to solve the discrete log problem twice : first to recover @xmath70 from @xmath71 , and then to recover @xmath55 from @xmath72 .",
    "( note that @xmath62 is public since @xmath57 is public . )    on the other hand , the analog of what is called  the diffie - hellman problem \" would be to recover the shared key @xmath73 from the triple @xmath74 .",
    "since @xmath1 and @xmath62 are public , this is equivalent to recovering @xmath75 from the triple @xmath76 , i.e. , this is exactly the standard diffie - hellman problem .",
    "thus , the bottom line of this example is that the instantiation of our protocol where the group @xmath3 is @xmath60 , is not really different from the standard diffie - hellman protocol . in the next section",
    ", we describe a more interesting instantiation , where the ( semi)group @xmath3 is non - commutative .",
    "to begin with , we note that our general protocol in section [ protocol_holomorph ] can be used with _ any _ non - commutative group @xmath3 if @xmath57 is selected to be a non - trivial inner automorphism , i.e. , conjugation by an element which is not in the center of @xmath3 .",
    "furthermore , it can be used with any non - commutative _ semigroup _ @xmath3 as well , as long as @xmath3 has some invertible elements ; these can be used to produce inner automorphisms .",
    "a typical example of such a semigroup would be a semigroup of matrices over some ring .",
    "in the paper @xcite , the authors have employed matrices over group rings of a ( small ) symmetric group as platforms for the ( standard ) diffie - hellman - like key exchange . in this section",
    ", we use these matrix semigroups again and consider an extension of such a semigroup by an inner automorphism to get a platform semigroup for our protocol .",
    "recall that a ( semi)group ring @xmath77 $ ] of a ( semi)group @xmath78 over a commutative ring @xmath79 is the set of all formal sums    @xmath80 where @xmath81 , and all but a finite number of @xmath82 are zero .",
    "the sum of two elements in @xmath83 $ ] is defined by    @xmath84    the multiplication of two elements in @xmath83 $ ] is defined by using distributivity .    as we have already pointed out ,",
    "if a ( semi)group @xmath3 is non - commutative and has non - central invertible elements , then it always has a non - identical inner automorphism , i.e. , conjugation by an element @xmath85 such that @xmath86 for at least some @xmath87 .",
    "now let @xmath3 be the semigroup of @xmath88 matrices over the group ring @xmath89 $ ] , where @xmath90 is the alternating group on 5 elements .",
    "here we use an extension of the semigroup @xmath3 by an inner automorphism @xmath91 , which is conjugation by a matrix @xmath92)$ ] .",
    "thus , for any matrix @xmath93 and for any integer @xmath94 , we have    @xmath95    now our general protocol from section [ protocol_holomorph ] is specialized in this case as follows .    1",
    ".   alice and bob agree on public matrices @xmath93 and @xmath92)$ ] .",
    "alice selects a private positive integer @xmath55 , and bob selects a private positive integer @xmath56 .",
    "2 .   alice computes @xmath96 and sends * only the first component * of this pair to bob .",
    "thus , she sends to bob * only * the matrix + @xmath97 3 .",
    "bob computes @xmath98 and sends * only the first component * of this pair to alice .",
    "thus , he sends to alice * only * the matrix + @xmath99 4 .",
    "alice computes @xmath100 .",
    "her key is now @xmath101 .",
    "note that she does not actually  compute \" @xmath102 because she does not know the automorphism @xmath103 ; recall that it was not transmitted to her .",
    "but she does not need it to compute @xmath104 .",
    "5 .   bob computes @xmath105 .",
    "his key is now @xmath106 .",
    "again , bob does not actually  compute \" @xmath107 because he does not know the automorphism @xmath108 .",
    "6 .   since @xmath109",
    ", we should have @xmath110 , the shared secret key .",
    "in this section , we address the question of security of the particular instantiation of our protocol described in section [ matrices ] .",
    "recall that the shared secret key in the protocol of section [ matrices ] is    @xmath111    therefore , our security assumption here is that it is computationally hard to retrieve the key @xmath112 from the quadruple + @xmath113 .",
    "in particular , we have to take care that the matrices @xmath16 and @xmath114 do not commute because otherwise , @xmath54 is just a product of @xmath115 and @xmath116 .",
    "a weaker security assumption arises if an eavesdropper tries to recover a private exponent from a transmission , i.e. , to recover , say , @xmath55 from @xmath117 a special case of this problem , where @xmath118 , is the ",
    "discrete log \" problem for matrices over @xmath89 $ ] , namely : recover @xmath55 from @xmath119 and @xmath120 .",
    "even this problem appears to be hard ; it was addressed in @xcite in more detail . in particular ,",
    "statistical experiments show that for a random matrix @xmath119 , matrices @xmath120 are indistinguishable from random .    in order to verify the robustness and security of our protocol ,",
    "we have experimentally addressed two questions .",
    "the first question is whether or not any information about the private exponent @xmath56 is leaked from transmission .",
    "that is , for a random exponent @xmath56 , how different is the matrix @xmath121 from @xmath122 , where n is random ?",
    "the second point that needs verification is to determine how different the final shared key is from a random matrix .",
    "more specifically , if alice and bob choose secret integers @xmath55 and @xmath56 respectively , how different is the matrix @xmath123 from @xmath124 , where @xmath125 is of the same bit size are @xmath126 .    to perform the first experimental validation we worked over @xmath127)$ ] and used random choices of @xmath128 $ ] .",
    "we then looked at the two distributions generated by the first component of @xmath129 and @xmath122 , where @xmath119 and @xmath122 are random matrices .",
    "we need to verify that the two generated distributions are in fact indistinguishable . to this end",
    "we looked at the components of each matrix and counted the frequency of occurrence of each element of @xmath90 .",
    "we repeated this process @xmath130 times and generated a frequency distribution table for the two distributions .    from the table , we produced @xmath131 ( quantile ) plots of the entries of the two matrices : the first component of @xmath129 and a random matrix @xmath122 .",
    "quantile plots are a quick graphical tool for comparing two distributions .",
    "these plots essentially compare the cumulative distribution functions of two distributions .",
    "if the distributions are identical , the resulting graph will be a straight line .     vs. @xmath122,scaledwidth=95.0% ]",
    "figure [ semidirect_1 ] shows the resulting plots for this experiment .",
    "these graphs show that the two distributions are in fact identical , therefore suggesting that no information about a private exponent @xmath56 is revealed by transmissions between alice and bob .",
    "the second experiment we carried out was similar to the first one , except in this case we were comparing the first components of @xmath132 and @xmath133 , where @xmath134 and @xmath6 are random and all of roughly the same bit size , i.e. all are integers from @xmath135 $ ] .",
    "this experiment helps address the ddh ( decisional diffie - hellman ) assumption by comparing the shared secret key to a random key and ensuring that no information about the former is leaked .",
    "see figure [ semidirect_2 ] for the resulting @xmath131 plots .",
    "these 9 graphs suggest that the two distributions generated by these keys are in fact indistinguishable .     vs. @xmath136,scaledwidth=95.0% ]",
    "private exponents @xmath55 and @xmath56 should be of the magnitude of @xmath137 , where @xmath138 is the security parameter , to make brute force search infeasible .",
    "thus , @xmath55 and @xmath56 are roughly @xmath138 bits long .",
    "public matrix @xmath119 is selected as a random @xmath88 matrix over the group ring @xmath89 $ ] , which means that each entry of @xmath119 is a random element of @xmath89 $ ] .",
    "the latter means that each entry is a sum @xmath139 of elements of the group @xmath90 with coefficients @xmath140 selected uniformly randomly from @xmath141 .",
    "thus , although the bit complexity of the matrix @xmath119 is fairly high ( @xmath142 bits ) , the procedure for sampling @xmath119 is quite efficient .",
    "we want to impose one restriction on the matrix @xmath119 though .",
    "there is a trivialization ( sometimes called _ augmentation _ ) homomorphism of the group ring that sends every group element to 1 .",
    "this homomorphism naturally extends to a homomorphism of the whole semigroup of matrices . to avoid leaking any information upon applying this homomorphism",
    ", we want the image of every entry of @xmath119 to be 0 .",
    "group ring elements like that are easy to sample : after sampling a random element @xmath139 of @xmath89 $ ] , we select a random coefficient @xmath140 and change it , if necessary , to have @xmath143    note that with this choice of @xmath119 , applying the trivialization homomorphism to any of the transmitted matrices in our protocol will produce the zero matrix , thus not leaking any information .",
    "we also note that there are no other homomorphisms of the group @xmath90 ( which is a finite simple group ) , except for inner automorphisms .",
    "this will prevent an eavesdropper from learning partial information about secret keys by applying homomorphisms to transmitted matrices .",
    "finally , we need to sample an _ invertible _",
    "@xmath88 matrix @xmath16 over the group ring @xmath89 $ ] .",
    "there are several techniques for doing this ; here we give a brief exposition of one possible procedure .",
    "we start with an already  somewhat random \" matrix , for which it is easy to compute the inverse .",
    "an example of such a matrix is a lower / upper triangular matrix , with invertible elements on the diagonal : @xmath144    here @xmath145 are random elements of the group @xmath90 , and @xmath146 are random elements of the group ring @xmath89 $ ] .",
    "we then take a random product , with 20 factors , of such random invertible upper and lower triangular matrices , to get our invertible matrix @xmath16 .",
    "we note that there is always a concern ( also in the standard diffie - hellman protocol ) about the order of a public element : if the order is too small , then a brute force attack may be feasible .",
    "in our situation , this concern is significantly alleviated by the fact that our transmissions are products of powers of two different matrices rather than powers of a single matrix .",
    "therefore , even if the order of one of the matrices happens to be small by accident , this does not mean that the product @xmath147 will go into loop of a small size .",
    "furthermore , since our matrix @xmath119 is non - invertible , it does not have an  order \" , but rather a loop : @xmath148 for some positive @xmath149 .",
    "the matrices @xmath114 and @xmath147 are non - invertible , too , so they do not have an order either , but rather a loop . detecting a loop is , in general , computationally much harder than computing the order of an invertible element .",
    "we have presented a brand new key exchange protocol based on extension of a ( semi)group by automorphisms and described some practical instances of this general idea .",
    "our protocol can be based on any group , in particular on any non - commutative group .",
    "it has some superficial resemblance to the classical diffie - hellman protocol , but there are several distinctive features that , we believe , give our protocol important advantages :        @xmath150 if the platform ( semi)group is not commutative , then we get a new security assumption . in the simplest case , where the automorphism used for extension",
    "is inner , attacking a private exponent amounts to recovering an integer @xmath56 from a product @xmath151 , where @xmath152 are public elements of the platform ( semi)group . in the special case where @xmath153 this boils down to recovering @xmath56 from @xmath154 , with public @xmath22 (  discrete log \" problem ) .    on the other hand , in the particular instantiation of our protocol , which is based on a non - commutative semigroup extended by an inner automorphism , recovering the shared secret key from public information",
    "is based on a different security assumption than the classical diffie - hellman protocol is .",
    "namely , the assumption is that it is computationally hard to retrieve the shared secret key @xmath155 from the triple of elements @xmath156 , assuming that @xmath1 and @xmath22 do not commute .",
    "i. anshel , m. anshel , d. goldfeld , and s. lemieux , _ key agreement , the algebraic eraser , and lightweight cryptography _ , algebraic methods in cryptography , contemp .",
    "* 418 * ( 2006 ) , 134 .",
    "m. habeeb , d. kahrobaei and v. shpilrain , _ a public key exchange using semidirect products of groups _ ( extended abstract ) , proceedings of the international conference in symbolic computations and cryptography , scc 2010 , royal holloway , university of london , egham , united kingdom , june 2010 ."
  ],
  "abstract_text": [
    "<S> in this paper , we describe a brand new key exchange protocol based on a semidirect product of ( semi)groups ( more specifically , on extension of a ( semi)group by automorphisms ) , and then focus on practical instances of this general idea . </S>",
    "<S> our protocol can be based on any group , in particular on any non - commutative group . </S>",
    "<S> one of its special cases is the standard diffie - hellman protocol , which is based on a cyclic group . </S>",
    "<S> however , when our protocol is used with a non - commutative ( semi)group , it acquires several useful features that make it compare favorably to the diffie - hellman protocol . </S>",
    "<S> here we also suggest a particular non - commutative semigroup ( of matrices ) as the platform and show that security of the relevant protocol is based on a quite different assumption compared to that of the standard diffie - hellman protocol . </S>"
  ]
}