{
  "article_text": [
    "* background and motivation .",
    "*   let @xmath14 be a graph and @xmath15 be a set of pairs of vertices , which represents requests about reachability between two vertices . for given @xmath3 and @xmath5",
    ", we consider an assignment of a set of edges to each vertex in @xmath3 .",
    "the assignment satisfies a request @xmath4 if the union of the edge sets assigned to @xmath6 and @xmath7 contains a path from @xmath6 to @xmath7 .",
    "the _ minimum certificate dispersal problem ( mcd ) _ is the one to find the assignment satisfying all requests in @xmath5 that minimizes the sum of the cardinality of the edge set assigned to each vertex .",
    "this problem is motivated by a requirement in public - key based security systems , which are known as a major technique for supporting secure communication in a distributed system @xcite .",
    "the main problem of the systems is to make each user s public key available to others in such a way that its authenticity is verifiable .",
    "one of well - known approaches to solve this problem is based on public - key certificates .",
    "a public - key certificate contains the public key of a user @xmath7 encrypted by using the private key of another user @xmath6 .",
    "if a user @xmath6 knows the public key of another user @xmath7 , user @xmath6 can issue a certificate from @xmath6 to @xmath7 .",
    "any user who knows the public key of @xmath6 can use it to decrypt the certificate from @xmath6 to @xmath7 for obtaining the public key of @xmath7 .",
    "all certificates issued by users in a network can be represented by a certificate graph : each vertex corresponds to a user and each directed edge corresponds to a certificate .",
    "when a user @xmath16 has communication request to send messages to a user @xmath7 securely , @xmath16 needs to know the public key of @xmath7 to encrypt the messages with it . for satisfying a communication request from a vertex @xmath16 to @xmath7 , vertex @xmath16 needs to get vertex @xmath7 s public - key . to compute @xmath7 s public - key",
    ", @xmath16 uses a set of certificates stored in @xmath16 and @xmath7 in advance .",
    "therefore , in a certificate graph , if a set of certificates stored in @xmath16 and @xmath7 contains a path from @xmath16 to @xmath7 , then the communication request from @xmath16 to @xmath7 is satisfied . in terms of cost to maintain certificates ,",
    "the total number of certificates stored in all vertices must be minimized for satisfying all communication requests .",
    "the previous work mainly focuses on directed variants of mcd , in which graph @xmath3 is directed .",
    "jung et al .",
    "discussed mcd with a restriction of available paths in @xcite and proved that the problem is np - hard . in their work , to assign edges to each vertex , only the restricted paths that are given for each request is allowed to be used .",
    "mcd with no restriction about available paths was first formulated in @xcite .",
    "this variant is also proved to be np - hard even if the input graph is a strongly connected directed graph . on the other hand , mcd for directed graphs with @xmath5 forming a clique",
    "is polynomially solvable for bidirectional trees and rings , and cartesian products of graphs such as meshes and hypercubes  @xcite .",
    "based on these work , the ( in)approximability of mcd for directed graphs has been studied from the viewpoint of the topological structure of @xmath5 ( not @xmath3 )  @xcite .",
    "since mcd is doubly structured ( one is the graph @xmath3 itself and the other is the request structure @xmath5 ) , the hardness of mcd depends not only on the topology of @xmath3 but also on the one of @xmath5 . in view of these observation ,",
    "the ( in)approximability of mcd for directed graphs is investigated for general case and @xmath5 forming a clique , as a typical community structure .",
    "it was shown that the former case is @xmath17-approximable in polynomial time but has no polynomial time algorithm whose approximation factor is better than @xmath18 unless p@xmath13np .",
    "the latter case is @xmath8-approximable but has no polynomial time algorithm whose approximation factor is better than @xmath19 , unless p@xmath13np . in @xcite , the undirected variant of mcd is also considered , and @xmath20-approximation algorithm for the case when @xmath5 forming a clique is presented .",
    "these results naturally raise a new question : for the hardness of approximation or constant - factor approximability , is such a dense structure ( i.e. , clique ) essential ?",
    "for example , how is the case when @xmath5 is sparse , e.g. , a tree ?",
    "this paper further investigates the ( in)approximability of mcd when @xmath5 forms a tree , as another typical topology .    * our contribution .",
    "*   we investigate the complexity of mcd with tree structure . here , we say `` with tree structure '' in two senses .",
    "one is the case when @xmath5 forms a tree , and the other is the case when @xmath3 itself is a tree .",
    "one reason of this focus has already been mentioned above .",
    "another reason is that a tree is a minimal connected structure ; even if @xmath3 ( resp . , @xmath5 )",
    "is not a tree , by solving mcd for @xmath21 , a spanning tree of @xmath3 ( resp .",
    ", for a spanning tree @xmath22 of @xmath5 ) , we can obtain an upper bound on the optimal solution ( resp .",
    ", a lower bound on the optimal solution ) of the original mcd problem .    for mcd with tree @xmath5 , we show that the hardness and approximability depend on the _ maximum degree",
    "_ @xmath9 of tree @xmath5 : mcd for tree @xmath5 with constant degree is solvable in polynomial time while that with @xmath23 degree is apx - hard . as for mcd for tree @xmath3",
    ", we present a polynomial optimal algorithm .",
    "the followings are summary of our contributions :    * _ @xmath5 is an arbitrary tree _ : first we consider mcd for the case when @xmath5 is a _ star_. even in this simplest setting , mcd is shown to be apx - hard : mcd for undirected graph @xmath3 with sparse @xmath5 is still apx - hard .",
    "moreover , the reduction _ to _ the steiner tree problem for unweighted graphs(stree ) leads to an upper bound 1.28 on approximation ratio for mcd with star request sets . for arbitrary tree @xmath5",
    ", it is shown that there is a 2.56-approximate algorithm for mcd by utilizing the approximation algorithm for star @xmath5 . *",
    "_ @xmath5 is a tree with @xmath24 _ : by using a similar analysis to arbitrary tree @xmath5 , the upper bound of approximation ratio for mcd can be reduced to 2 . in particular",
    ", if @xmath5 is a star with @xmath25 mcd is polynomially solvable . *",
    "_ @xmath5 is a tree with constant degree _ : this case is polynomially solvable .",
    "these imply that the hardness of mcd for tree @xmath5 heavily depends on its maximum degree .",
    "a key idea is to define normal solutions .",
    "our dynamic programming based algorithm searches not the whole solution space but ( much smaller ) normal solution space . *",
    "_ @xmath3 is an arbitrary tree _ : in this case also , a positive result is shown . for any request set @xmath5 ( not restricted to a tree )",
    ", our algorithm outputs an optimal solution in polynomial time .",
    "the algorithm exploits the polynomial time solvability of vertex - cover for bipartite graphs .",
    "the remainder of the paper is organized as follows . in section [ sec :",
    "model ] , we formally define the minimum certificate dispersal problem ( mcd ) . section [ sec : star ] shows the hardness and approximability of mcd with star request sets , and section [ sec : tree ] extends it to the approximability of mcd with tree request sets . in section [ sec : consttree ] , we present a polynomial time algorithm that optimally solves mcd for tree request with constant degree .",
    "section [ sec : graph ] shows an optimal algorithm for mcd with undirected tree graphs .",
    "section [ sec : conclusion ] concludes the paper .",
    "while the minimum certificate dispersal ( mcd ) problem is originally defined for directed graphs , we deal with its undirected variant , where the given graph is undirected .",
    "the difference between them is the meaning of assignment an edge to a vertex : in the standard mcd , an edge @xmath26 means a certificate from @xmath6 to @xmath7 . in the undirected variant of mcd",
    ", edge means a bidirectional certificate from @xmath6 to @xmath7 and @xmath7 to @xmath6 which is not separable .",
    "since we treat the undirected variants of mcd throughout this paper , we simply refer those problems as mcd . in the following ,",
    "we give the formal definition of mcd problem .",
    "let @xmath27 be an undirected graph , where @xmath28 and @xmath29 are the sets of vertices and edges in @xmath3 , respectively .",
    "an edge in @xmath29 connects two distinct vertices in @xmath28 . the edge between vertex @xmath6 and @xmath7",
    "is denoted by @xmath4 .",
    "the numbers of vertices and edges in @xmath3 are denoted by @xmath0 and @xmath30 , respectively ( i.e. , @xmath31 ) .",
    "a sequence of edges @xmath32 is called a _ path _ from @xmath33 to @xmath34 of length @xmath35 .",
    "a path @xmath36 can be represented by a sequence of vertices @xmath37 . for a path @xmath36 , @xmath33 and @xmath34",
    "are called the endpoints of the path .",
    "a shortest path from @xmath6 to @xmath7 is the one whose length is the minimum of all paths from @xmath6 to @xmath7 , and the distance from @xmath6 to @xmath7 is the length of a shortest path from @xmath6 to @xmath7 , denoted by @xmath38 .    a _ dispersal _",
    "@xmath39 of an undirected graph @xmath27 is a family of sets of edges indexed by @xmath28 , that is , @xmath40 .",
    "we call @xmath41 a local dispersal of @xmath7 . a local dispersal @xmath41 indicates the set of edges assigned to @xmath7 .",
    "the _ cost _ of a dispersal @xmath39 , denoted by @xmath42 , is the sum of the cardinalities of all local dispersals in @xmath39 ( i.e. , @xmath43 ) .",
    "a request is a reachable unordered pair of vertices in @xmath3 . for a request @xmath4 , @xmath6 and @xmath7",
    "are called the endpoints of the request .",
    "we say a dispersal @xmath39 of @xmath3 _ satisfies _ a set @xmath5 of requests if a path between @xmath6 and @xmath7 is included in @xmath44 for any request @xmath45 . given two dispersals @xmath39 and @xmath46 of @xmath3 , the union of two dispersals @xmath47 is denoted by @xmath48 .",
    "the _ minimum certificate dispersal problem ( mcd ) _ is defined as follows :     + input : an undirected graph @xmath27 and a set @xmath5 of requests .",
    "+ output : a dispersal @xmath39 of @xmath3 satisfying @xmath5 with minimum cost .",
    "the minimum among costs of dispersals of @xmath3 that satisfy @xmath5 is denoted by @xmath49 .",
    "let @xmath50 be an optimal dispersal of @xmath3 which satisfies @xmath5 ( i.e. , @xmath50 is one such that @xmath51 ) .",
    "since @xmath5 is a set of unordered pairs of @xmath28 , it naturally defines an undirected graph @xmath52 where @xmath53 and @xmath54 .",
    "the request set @xmath5 is called _ tree _ if @xmath55 is a tree , and is also called _ star _ if it is a tree with exactly one internal vertex .",
    "the maximum degree of @xmath55 is denoted by @xmath56 .",
    "the problem of mcd restricting @xmath55 to tree or star with degree @xmath56 is called mcd - tree(@xmath56 ) and mcd - star(@xmath56 ) .",
    "we also denote the problem of mcd restricting @xmath55 to tree ( or star ) with degree @xmath57 for some function @xmath58 as mcd - tree(@xmath59 ) ( or mcd - star(@xmath59 ) .",
    "when we do not consider any constraint to the maximum degree , the argument @xmath56 is omitted .",
    "the np - hardness and inapproximability of directed mcd for strongly - connected graphs are shown in the previous work@xcite . in this section , we prove that mcd is apx - hard even if we assume that @xmath55 is a star .",
    "the proof is by the reduction from / to the steiner - tree problem .     + input : an undirected connected graph @xmath27 and a set @xmath60 of terminals .",
    "+ output : a minimum - cardinality subset of edges @xmath61 that connects all terminals in @xmath62 .",
    "we often use the notation stree(@xmath63 ) and stree(@xmath59 ) , which are the steiner - tree problems for a terminal set with cardinality at most @xmath63 and @xmath64 respectively .    [ theorem : star - dispersal ] there exists a polynomial time @xmath65-approximation algorithm for mcd - star(@xmath9 ) if and only if there exists a polynomial time @xmath65-approximation algorithm for stree(@xmath66 ) .",
    "we prove the only - if part and if part can be proved in almost the same way as the proof of the only - if part .",
    "given an instance @xmath67 of stree(@xmath68 ) , we construct an instance @xmath69 of mcd - star(@xmath63 ) as @xmath70 and @xmath71 , where @xmath72 and @xmath73 is an arbitrary vertex in @xmath62 . to prove the theorem , it suffices to show that any feasible solution of mcd @xmath74 ( resp .",
    "@xmath75 ) can be transformed to a feasible solution of @xmath75 ( resp .",
    "@xmath74 ) with no gain of solution cost . then because @xmath74 and @xmath75 have the same optimal cost and thus any @xmath65-approximated solution of @xmath74 induces an @xmath65-approximated solution of @xmath75 .    * from mcd - star(@xmath9 ) to stree(@xmath66 ) * : given a feasible solution @xmath76 of @xmath74 , we can construct a feasible solution @xmath77 of stree .",
    "since @xmath78 necessarily includes a path between any pair in @xmath5 , its induced graph is connected and contains all vertices in @xmath79 .",
    "thus , @xmath78 is a feasible solution for stree and its cost is at most @xmath80 .    * from stree(@xmath66 ) to mcd - star(@xmath9 ) * : given a feasible solution @xmath78 of @xmath75 , we obtain the solution of mcd - star by assigning all edges in @xmath81 to the internal vertex @xmath73 of @xmath55 . since @xmath82 connects all vertices in @xmath83 , any request in @xmath5 is satisfied .",
    "thus @xmath84 is a feasible solution of @xmath85 and its cost is equal to @xmath86 .",
    "then since mcd - star(@xmath9 ) and stree(@xmath66 ) have the same optimal cost , the theorem is proved .    since stree is apx - hard @xcite and its known upper and lower bounds for the approximation factor are 1.28 and 1.01 , respectively @xcite",
    ", we can obtain the following corollary .",
    "[ corol : mcd - star ] mcd - star is apx - hard , has a polynomial time @xmath87-approximation algorithm , and has no polynomial time algorithm with an approximation factor less than @xmath12 unless @xmath88 .",
    "the general approximability of mcd - tree can be shown by the following theorem :    [ theorem : tree ] provided any @xmath65-approximation algorithm for mcd - star , there is a polynomial time @xmath89-approximation algorithm for mcd - tree .",
    "we first introduce the construction of the algorithm : given an instance ( @xmath90 ) of mcd - tree , we regard @xmath55 as a rooted tree by picking up an arbitrary vertex as its root . letting @xmath91 ( @xmath92 )",
    "be the distance from the root to @xmath7 on @xmath55 , we partition the request set @xmath5 into two disjoint subsets @xmath93 ( @xmath94 ) as @xmath95 .",
    "note that both @xmath96 and @xmath97 respectively form two forests where each connected component is a star .",
    "thus , using any algorithm for mcd - star ( denoted by @xmath98 ) , we can obtain two solutions of @xmath99 and @xmath100 by independently solving the problems associated with each connected component .",
    "letting @xmath101 be the solution of instance @xmath102 , the union @xmath103 is the final solution of our algorithm .",
    "it is obvious that the returned solution is feasible .",
    "since both of @xmath104 and @xmath105 are the lower bound of the optimal cost for @xmath85 , the algorithm achieves approximation ratio @xmath89 . for lack of the space",
    ", we give the proof details in the appendix .",
    "the above theorem and corollary [ corol : mcd - star ] leads the following corollary :    mcd - tree has a polynomial time @xmath11-approximation algorithm .",
    "there is an optimal algorithm to solve mcd - star(@xmath106 ) in polynomial time and there is an approximation factor 2 polynomial time algorithm for mcd - tree(@xmath106 ) .",
    "in this section , we provide an algorithm that returns the optimal dispersal for any instance of mcd - tree(@xmath107 ) . throughout this section ,",
    "we regard @xmath55 as a rooted tree by picking up an arbitrary vertex @xmath108 in @xmath83 as its root . given a vertex @xmath109 ,",
    "let @xmath110 be the parent of @xmath6 , and let @xmath111 be the set of @xmath6 s children .",
    "a request @xmath4 is _ well - satisfied _ by a feasible @xmath39 if there exists a vertex @xmath112 such that @xmath113 contains a path from @xmath6 to @xmath114 and @xmath41 contains a path from @xmath114 to @xmath7 .",
    "then , vertex @xmath112 is called the _ connecting point _ of request @xmath4 in @xmath39 .",
    "we begin with the following fundamental property :    [ lemma : connectivity ] for any instance @xmath85 of mcd - tree , there is an optimal solution that well - satisfies all requests in @xmath5 .    by the above lemma , we can reduce the search space to one where each feasible solution well - satisfies all requests . in the following argument",
    ", we assume that every request has a connecting point in the optimal dispersal .",
    "the principle of our algorithm is to determine the connecting points recursively from the leaf side of @xmath55 via dynamic programming .",
    "let @xmath115 be the subtree of @xmath55 rooted by @xmath6 , @xmath116 be a dispersal for instance @xmath117 with the smallest cost such that @xmath113 contains a path to from @xmath6 to @xmath118 .",
    "note that @xmath119 is an optimal solution of @xmath85 .",
    "we define @xmath120 for short .",
    "the key recurrence of the dynamic programming can be stated by the following lemma :    [ lemma : reccursion ] let @xmath6 and @xmath118 be vertices in @xmath28 and let @xmath121 .",
    "then the following equality holds : @xmath122 where @xmath123 .",
    "this recurrence naturally induces a polynomial time algorithm for mcd - tree(@xmath107 ) .",
    "the pseudo - code of the algorithm is shown in algorithm [ algo : consttree ] .",
    "the algorithm maintains a table @xmath124 , where each entry @xmath125[\\alpha]$ ] stores the solution @xmath116 .",
    "the core of the algorithm is to fill the table following the recurrence of lemma [ lemma : reccursion ] : assume an arbitrary ordering @xmath126 of vertices in @xmath83 where any vertex appears after all of its descendants have appeared . to compute the solution to be stored in @xmath127[\\alpha]$ ] , the algorithm considers all possible choices of connecting points to @xmath128 s children .",
    "let @xmath129 be the children of @xmath128 . fixing a choice @xmath130 of connecting points ( in the pseudo - code",
    ", @xmath131 corresponds to @xmath132 ) , the algorithm determines the local dispersal to @xmath6 by computing the optimal solution for @xmath133 .",
    "note that this can be computed in polynomial time because the request set forms a constant - degree star . by theorem [ theorem : star - dispersal ] ,",
    "it is equivalent to stree(@xmath107 ) .",
    "letting @xmath46 be the computed solution for @xmath133 .",
    "we obtain @xmath134[\\alpha_{u_i , q_1 } ] \\cup   d^{\\ast}[q_2][\\alpha_{u_i , q_2 } ] \\cup   \\cdots \\cup d^{\\ast}[q_{\\gamma(u)}][\\alpha_{u_i , q_{\\gamma(u)}}]$ ] .",
    "importantly , we can assume that only @xmath135 is nonempty in @xmath46 ( recall the construction of mcd - star solutions from stree solutions ) , which implies that @xmath136 has a path to any connecting point @xmath137 in @xmath138 .",
    "since it @xmath139 has a path from @xmath140 to @xmath137 from the definition of @xmath141[\\alpha_{u_i , q_j}]$ ] , @xmath142 necessarily has the path between @xmath128 and @xmath140 , that is the feasibility of @xmath39 is guaranteed .",
    "if @xmath39 is better than the solution already computed ( for other choice of @xmath138 ) , @xmath127[\\alpha]$ ] is updated by @xmath39 .",
    "after the computation for all possible choices of @xmath138 , @xmath127[\\alpha]$ ] stores the optimal solution",
    ". finally , after filling all entries of the table , the algorithm returns @xmath143[u_{|v_r|}]$ ] , which is the optimal solution for instance @xmath85 .",
    "lemma [ lemma : reccursion ] obviously derives the correctness of algorithm [ algo : consttree ] .",
    "since we assume that the maximum degree of tree @xmath55 is a constant , the number of tuples of @xmath138 is also a constant .",
    "thus the number of possible choices about @xmath138 is bounded by a polynomial of @xmath0 .",
    "it follows that the running time of algorithm [ algo : consttree ] is bounded by a polynomial of @xmath0 .",
    "we can have the following theorem :    there is a polynomial time algorithm solving mcd - tree(@xmath107 ) .",
    "111 = 11 = 11 = 11 = 11 = 11 = 11 =    :    @xmath144[v]$ ] : the array storing the computed solutions   +    :    ( all entries are initialized by a dummy solution with cost @xmath145 )   +    :    @xmath126 : an ordering of @xmath83   +    :    containing parent - child relationship on @xmath55 ( children come earlier ) .",
    "+    +    :    @xmath146 in order of @xmath147 * do *   +    :    let @xmath148 be an arbitrary ordering of @xmath149   +    :    @xmath150 * do *   +    :    @xmath151 the optimal solution of @xmath152 s.t .",
    "only @xmath153 is nonempty .",
    "+    :    @xmath154 @xmath155 @xmath156   +    :    @xmath157 }   d^{\\ast}[q_j][\\alpha_j ] \\right)$ ]   +    :    @xmath158[\\alpha ] ) > c(d)$ ] * then * @xmath127[\\alpha ] { \\ensuremath{\\leftarrow}}d$ ]   +    :     +    :     +    :    return @xmath143[u_{|v_r|}]$ ]",
    "while the previous sections focus on the structure of @xmath55 , in this section , we look at the structure of graph @xmath3 : we show that mcd is solvable in polynomial time if @xmath3 is a tree . in the algorithm",
    ", we compute for each edge @xmath159 which @xmath113 should contain @xmath160 ; for each @xmath159 , we decide @xmath161 . for this decision about @xmath159 , we utilize a bipartite graph that represents whether a request @xmath162 should use @xmath160 in its path . let @xmath163 be a tree and @xmath5 be a request set .",
    "now we consider to decide @xmath161 for an edge @xmath164 . by deleting @xmath165 from @xmath62 , we obtain two subtrees @xmath166 and @xmath167 of @xmath62 , where @xmath168 and @xmath169 contain @xmath6 and @xmath7 , respectively .",
    "note that @xmath170 and @xmath171 .",
    "from these two subtrees @xmath168 and @xmath169 , we construct a bipartite graph @xmath172 , where @xmath173 .",
    "it should be noted that @xmath174 is an @xmath175-@xmath176 cut for every @xmath177 , since @xmath62 is a tree .",
    "thus , this bipartite graph represents that if an edge @xmath178 , at least one of @xmath179 or @xmath180 should have @xmath165 in its local dispersal , i.e. , @xmath181 , otherwise @xmath39 does not satisfy request @xmath182 due to cut @xmath174 .",
    "this condition is interpreted as a vertex cover of @xmath183 .",
    "vertex cover _ @xmath184 of a graph is a set of vertices such that each edge in its edge set is incident to at least one vertex in @xmath184 .",
    "namely , a necessary condition of @xmath39 satisfying @xmath5 is that for each @xmath165 , @xmath185 is a vertex cover of @xmath183 .",
    "we call this _ vertex cover condition_. it can be shown that the vertex cover condition is also sufficient for @xmath39 to satisfy @xmath5",
    ". suppose that a dispersal @xmath39 satisfies the vertex cover condition .",
    "for a request @xmath186 and its unique path @xmath187 on @xmath62 , by the definition of @xmath183 , every @xmath188 contains edge @xmath189 . by the vertex cover condition",
    ", @xmath190 holds for @xmath191 , which implies @xmath192 contains path @xmath193 ; @xmath39 satisfies request @xmath186 .    by these arguments ,",
    "the vertex cover condition is equivalent to the feasibility of @xmath39 .",
    "also it can be seen that choices of vertex cover of @xmath183 and another @xmath194 are independent to each other in terms of the feasibility of @xmath39 .",
    "these imply that the union of the minimum size of vertex cover for @xmath183 s is an optimal solution of mcd for tree @xmath3 .    from these ,",
    "we obtain the following algorithm : for every edge @xmath195 in @xmath62 , we first compute a minimum vertex cover @xmath196 of bipartite graph @xmath183 . then , let @xmath197 and output . since vertex - cover problem for bipartite graphs can be solved via the _ maximum matching problem _  @xcite , whose time complexity is @xmath198 time , where @xmath0 and @xmath30 are the numbers of vertices and edges , respectively  @xcite .",
    "thus , mcd for undirected tree @xmath3 can be solved in @xmath199 time .    for an undirected tree graph @xmath3 and any request @xmath5 , mcd is solvable in @xmath199 time .",
    "we have considered undirected variants of the mcd problem with tree structures and shown that for mcd with tree @xmath5 , the hardness and approximability depend on the maximum degree of tree @xmath5 and mcd for any @xmath5 can be solved in polynomial time if @xmath3 is a tree .",
    "there are interesting open problems as follows ;    * the hardness of mcd - tree(@xmath106 ) : even np - hardness of that class is not proved yet .",
    "precisely , no hardness result is found for mcd - tree(@xmath56 ) where @xmath200 and @xmath201 . * the graph class of @xmath3 allowing any request set @xmath5 to be tractable : the case of trees ( shown in this paper ) is only the known class making the problem solvable in polynomial time .",
    "we would like to know what sparse graph classes ( e.g. , rings , series - parallel graphs , and planar graphs ) can be solved for any request @xmath5 in polynomial time . in particular , for mcd of rings with any request @xmath5 we would like to decide whether it is np - hard or p. * related to the question right above , we would like to extend the dp technique for mcd - tree(@xmath107 ) presented in section [ sec : consttree ] to other wider classes of @xmath55 .",
    "some sparse and degree - bounded graphs might be its candidates .",
    "in fact , the key of polynomial time running time of algorithm [ algo : consttree ] is based only on the following two conditions : ( 1 ) there exists an optimal solution that well - satisfies @xmath5 , ( 2 ) there exists an ordering @xmath147 on @xmath83 such that every cut @xmath202 on @xmath55 has a constant size . * the complexity gap between undirected mcd and directed mcd : in general , directed mcd is not easier than undirected mcd in the sense that the latter is a special case of the former .",
    "but it is unknown whether it is proper or not .",
    "it is not quite trivial to transform any known complexity result for mcd into directed mcd , and vice versa .",
    "10    m.  bern and p.  plassmann .",
    "the steiner problem with edge lengths 1 and 2 . ,",
    "32(4):171176 , september 1989 .",
    "s.  capkun , l.  buttyan , and j .-",
    "self - organized public - key management for mobile ad hoc networks .",
    ", 2(1):5264 , march 2003 .",
    "m.  chlebk and j.  chlebkov .",
    "the steiner tree problem on graphs : inapproximability results .",
    ", 406(3):207214 , october 2008 .",
    "s.  e. dreyfus and r.  a. wagner .",
    "the steiner problem in graphs .",
    ", 1:195207 , 1972 .",
    "m.  g. gouda and e.  jung .",
    "certificate dispersal in ad - hoc networks . in _ in proceeding of the 24th international conference on distributed computing systems ( icdcs04 ) _ , pages 616623 , march 2004 .",
    "m.  g. gouda and e.  jung . stabilizing certificate dispersal . in _ in proceeding of the 7th international symposium on self - stabilizing systems ( sss05 ) _ , pages 140152 , october 2005 .",
    "j.  e. hopcroft and r.  m. karp . an @xmath203 algorithm for maximum matchings in bipartite graphs . , 2(4):225231 , 1973 .",
    "j.  hubaux , l.  buttyan , and s.  capkun .",
    "the quest for security in mobile ad hoc networks .",
    "in _ in proceeding of the 2nd acm international symposium on mobile ad hoc networking and computing ( mobihoc01 ) _ , pages 146155 , october 2001 .",
    "t.  izumi , t.  izumi , h.  ono , and k.  wada .",
    "approximability and inapproximability of the minimum certificate dispersal problem . , 411(31 - 33):27732783 , june 2010 .",
    "e.  jung , e.  s. elmallah , and m.  g. gouda . optimal dispersal of certificate chains . in _ in proceeding of the 18th international symposium on distributed computing ( disc04 ) _ , pages 435449 , october 2004 .",
    "d.  knig .",
    "graphs and matrices . , 38:116119 , 1931 .",
    "in hungarian .    g.  robin and a.  zelikovsky . improved steiner tree approximation in graphs .",
    "in _ in proceedings of the 11th annual acm - siam symposium on discrete algorithms ( soda00 ) _ , pages 770779 , 2000 .",
    "h.  zheng , s.  omura , j.  uchida , and k.  wada .",
    "an optimal certificate dispersal algorithm for mobile ad hoc networks . ,",
    "e88-a(5):12581266 , may 2005 .",
    "h.  zheng , s.  omura , and k.  wada .",
    "an approximation algorithm for minimum certificate dispersal problems . ,",
    "e89-a(2):551558 , february 2006 .",
    "let @xmath204 be an optimal solution of @xmath85 , and @xmath205 be the solution of @xmath85 returned by algorithm @xmath98 .",
    "installing @xmath65-approximation algorithm of mcd - star into @xmath98 , we can obtain @xmath65-approximated solutions of @xmath99 and @xmath100 because each connected component of @xmath206 and @xmath207 is a star ( trivially , the set of @xmath65-approximated solutions corresponding to each connected components induces an @xmath65-approximated solution of the whole instance ) .",
    "thus , we have @xmath208 ( @xmath209 . furthermore ,",
    "since @xmath210 holds for any @xmath211 , we also have @xmath212 .",
    "letting @xmath78 be the solution of @xmath85 finally returned and @xmath213 , we finally obtain @xmath214 . the theorem is proved .",
    "the proof is done in a constructive way .",
    "that is , we show that it is possible to transform any optimal solution to one well - satisfying all requests with no extra cost .",
    "let @xmath39 be an optimal solution , @xmath215 be the set of vertices having at least one request not well - satisfied , and @xmath6 be the vertex farthest from @xmath108 in @xmath215 . since @xmath6 is the farthest , only the request between @xmath6 and its parent is not well - satisfied in all requests related to @xmath6 .",
    "let @xmath216 for short . to prove the lemma",
    ", it suffices to show that we can obtain a solution @xmath46 where @xmath217 holds , any request well - satisfied in @xmath39 is also done in @xmath46 , and @xmath4 is well - satisfied .",
    "let @xmath218 be the sequence of edges in @xmath3 organizing a path from @xmath6 to @xmath7 .",
    "from the fact that @xmath4 is not well - satisfied , there exists an edge @xmath219 such that @xmath220 for some @xmath221 and @xmath222 for any @xmath223 . since request",
    "@xmath224 is well - satisfied for any @xmath225 , there is a path @xmath226 in @xmath113 from @xmath6 to @xmath227 in @xmath113 .",
    "then , for any @xmath225 , each @xmath226 does not contain @xmath228 because @xmath4 becomes well - satisfied if @xmath229 holds for some @xmath230 ( see figure [ fig : connectivity ] ) .",
    "thus , we can construct a dispersal @xmath46 as @xmath231 for any @xmath232 , @xmath233 and @xmath234 , which is feasible and has the same cost as @xmath39 . repeating the construction",
    ", we can make request @xmath4 well - satisfied . since this procedure does not break the well - satisfied property of any other request",
    ", we can eventually obtain a feasible solution well - satisfying all requests without extra cost .",
    "the lemma is proved .    :",
    "if @xmath235 is used to satisfy request @xmath224 , @xmath113 contains a path terminating with @xmath228 because @xmath224 is well - satisfied .",
    "it follows that request @xmath4 becomes well - satisfied , which is a contradiction.,width=321 ]      let @xmath236 be the connecting point of @xmath237 in @xmath238 , and @xmath239 be @xmath6 s local dispersal in @xmath116 . to prove the lemma",
    ", it suffices to show that the right - hand expression is equal to the left for @xmath240 .",
    "since @xmath239 has a path to any vertex @xmath241 , the edge - induced subgraph by @xmath239 is one connecting all vertices in @xmath242 .",
    "that is , it is a feasible solution for instance @xmath152 , and thus we have @xmath243 . combining the optimality of @xmath244 for any @xmath245 , we can conclude that the right - hand is equal to the optimal cost @xmath246 ."
  ],
  "abstract_text": [
    "<S> given an @xmath0-vertex graph @xmath1 and a set @xmath2 of requests , we consider to assign a set of edges to each vertex in @xmath3 so that for every request @xmath4 in @xmath5 the union of the edge sets assigned to @xmath6 and @xmath7 contains a path from @xmath6 to @xmath7 . _ </S>",
    "<S> the minimum certificate dispersal problem _ ( mcd ) is defined as one to find an assignment that minimizes the sum of the cardinality of the edge set assigned to each vertex . </S>",
    "<S> this problem has been shown to be logapx - complete for the most general setting , and apx - hard and @xmath8-approximable in polynomial time for dense request sets , where @xmath5 forms a clique . in this paper </S>",
    "<S> , we investigate the complexity of mcd with sparse ( tree ) structures . </S>",
    "<S> we first show that mcd is apx - hard when @xmath5 is a tree , even a star . </S>",
    "<S> we then explore the problem from the viewpoint of the _ maximum degree _ </S>",
    "<S> @xmath9 of the tree : mcd for tree request set with constant @xmath9 is solvable in polynomial time , while that with @xmath10 is @xmath11-approximable in polynomial time but hard to approximate within @xmath12 unless p@xmath13np . as for the structure of @xmath3 itself </S>",
    "<S> , we show that the problem can be solved in polynomial time if @xmath3 is a tree . </S>"
  ]
}