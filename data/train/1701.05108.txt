{
  "article_text": [
    "since the seminal paper by @xcite on controlling an election by adding or deleting the fewest number of voters or candidates with the goal of making a specific candidate to win ( _ constructive control _ ) , a lot of research has been devoted to the study of control for different voting rules  @xcite , on different control modes  @xcite , or even on other controlling goals  ( e.g. aiming at several candidates victory or a specific candidate s defeat ) @xcite .",
    "recently , @xcite introduced combinatorial structures to constructive control by adding voters : when a voter is added , a bundle of other voters is added as well .",
    "a combinatorial structure of the voter set allows us to model situations where an external agent hires speakers to convince whole groups of people to participate in ( or abstain from ) an election .",
    "in such a scenario , convincing a whole group of voters comes at the fixed cost of paying a speaker .",
    "@xcite model this by defining a bundle of associated voters for each voter which will be convinced to vote `` for free '' when this voter is added or deleted .",
    "moreover , the bundles of different voters could overlap .",
    "for instance , convincing two bundles of two voters each to participate in the election could result in adding a total of four , three or even just two voters .",
    "we extend the work of @xcite and investigate the cases where the agent wants to make a specific candidate win or lose by adding ( resp .  deleting ) the fewest number of bundles .",
    "we study one of the simplest voting rules , the plurality rule , where each voter gives one point to his favorite candidate , and the candidate with most points becomes a winner .",
    "accordingly , an election consists of a set  @xmath7 of candidates and a set  @xmath8 of voters who each have a favorite candidate . since",
    "real world elections typically contain only a small number of candidates , and a bundle of voters may correspond to a family with just a few members , we are especially interested in situations where the election has only few candidates and the bundle of each voter is small . our goal is to ensure that a specific candidate @xmath9 becomes a winner ( or a loser ) of a given election , by convincing as few voters from an unregistered voter set  @xmath10 as possible ( or as few voters from @xmath11 as possible ) , together with the voters in their bundles , to participate ( or not to participate ) in the election .",
    "we study the combinatorial voter control problems from both the classical and the parameterized complexity point of view .",
    "we confirm @xcite s conjecture  @xcite that for the plurality rule , the three problem variants : combinatorial constructive control by deleting voters and combinatorial destructive control by adding ( resp .",
    "deleting ) voters , behave similarly in complexity to the results of combinatorial constructive control by adding voters : they are @xmath4-hard and intractable even for very restricted cases",
    ". we can also identify several special cases , where the complexity of the four problems behave differently .",
    "for instance , we find that constructive control tends to be computationally harder than destructive control .",
    "we summarize our results in [ tab : results ]",
    ".    * related work .",
    "* @xcite introduced the complexity study of election control problems and showed that for the plurality rule , the non - combinatorial variant of the voter control problems can be solved in linear time by a using simple greedy strategy .",
    "we refer the readers to the work by @xcite for general expositions on election control problems .    in the original election control setting , a unit modification of the election concerns usually a single voter or candidate .",
    "the idea of adding combinatorial structure to election voter control was initiated by @xcite : instead of adding a voter at each time , one adds a `` bundle '' of voters to the election , and the bundles added to the election could intersect with each other .",
    "they showed that combinatorial constructive control by adding the fewest number of bundles becomes notorious hard , even for the plurality rule and for only two candidates .",
    "@xcite mentioned that even if each bundle has only two voters and the underlying bundling graph is acyclic , the problem still remains @xmath4-hard . @xcite and @xcite conjectured that    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ `` the combinatorial addition of voters for destructive control , and combinatorial deletion of voters for either constructive or destructive control behave similarly to combinatorial addition of voters for constructive control . ''",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the combinatorial structure notion for voter control has also been extended to candidate control  @xcite and electoral shift bribery  @xcite .",
    "* paper outline . * in [ sec : preliminaries ] , we introduce the notation used throughout the paper . in [ sec : central_problem ] we formally define the four problem variants , summarize our contributions , present results in which the four problem variants ( constructive or destructive , adding voters or deleting voters ) behave similarly , and provide reductions between the problem variants .",
    "[ sec : des_vs_cons , sec : disjoint , sec : inapproximability ] present our main results on three special cases ( 1 ) when the bundles and the number of candidates are small , ( 2 ) when the bundles are disjoint , and ( 3 ) when the solution size could be unlimited .",
    "we conclude in [ sec : conclusion ] with several future research directions .",
    "the notation we use in this paper is based on @xcite .",
    "we assume familiarity with standard notions regarding algorithms and complexity theory . for each @xmath12",
    "we denote by @xmath13 $ ] the set  @xmath14 .    * elections . *",
    "an _ election _ @xmath15 consists of a set @xmath16 of @xmath17 _ candidates _ and a set @xmath11 of _ voters_. each voter @xmath18 has a favorite candidate  @xmath19 and we call voter  @xmath0 a @xmath19-voter .",
    "note that since we focus on the plurality rule , we simplify the notion of the preferences of voters in an election to the favorite candidate of each voter .",
    "for each candidate  @xmath20 and each subset @xmath21 of voters , her _ ( plurality ) score  @xmath22 _ is defined as the number of voters from @xmath23 that have her as favorite candidate .",
    "we say that a candidate  @xmath19 is a _ winner _ of election  @xmath24 if @xmath19 has the highest score  @xmath25 . for the sake of convenience , for each @xmath26 , a @xmath27-voter denotes a voter whose favorite candidate belongs to @xmath28",
    ".    * combinatorial bundling functions . * given a voter set @xmath29 , a _",
    "combinatorial bundling function _",
    "@xmath30 ( abbreviated as _",
    "bundling function _ ) is a function that assigns a set of voters to each voter ; we require that @xmath31 .",
    "for the sake of convenience , for each subset @xmath32 , we define @xmath33 . for a voter @xmath34 , @xmath35",
    "@xmath36 s bundle _ ; @xmath36 is called the _ leader _ of the bundle .",
    "we let @xmath37 denote the _ maximum bundle size _ of a given @xmath38 .",
    "formally , @xmath39 .",
    "one can think of the bundling function as subsets of voters that can be added at a unit cost ( e.g. @xmath35 is a group of voters influenced by @xmath36 ) .",
    "* bundling graphs . *",
    "the _ bundling graph _ of an election is a model of how the voter s bundle functions interact with each other .",
    "let @xmath30 be a bundling function .",
    "the _ bundling graph _",
    "@xmath40 is a simple , directed graph : for each voter @xmath34 there is a vertex @xmath41 .",
    "for each two distinct voters @xmath42 with @xmath43 , there is an arc @xmath44 .",
    "we consider three special cases of bundling functions / graphs which we think are natural in real world .",
    "we say that a bundling function  @xmath45 is _ symmetric _ if for each two distinct voters @xmath46 , it holds that @xmath47 if and only if @xmath48 .",
    "the bundling graph for a symmetric bundling function always has two directed arcs connecting each two vertices .",
    "thus , we can assume the graph to be undirected .",
    "we say that @xmath38 is _ disjoint _ if for each two distinct voters  @xmath49 , it holds that either @xmath50 or @xmath51 .",
    "it is an easy exercise to verify that disjoint bundling functions are symmetric and the corresponding undirected bundling graphs consist only of disjoint complete subgraphs .",
    "we say that @xmath38 is _ anonymous _ if for each two distinct voters @xmath36 and @xmath52 with the same favorite candidate , it holds that @xmath53 , and that for all other voters  @xmath54 we have @xmath55 if and only if @xmath56 .",
    "* parameterized complexity .",
    "* an instance @xmath57 of a _ parameterized problem _ consists of the actual instance @xmath58 and of an integer @xmath59 referred to as the _ parameter _ @xcite .",
    "a parameterized problem is called _ fixed - parameter tractable _ ( in ) if there is an algorithm that solves each instance @xmath57 in @xmath60 time , where @xmath61 is a computable function depending only on the parameter @xmath59 .",
    "there is also a hierarchy of hardness classes for parameterized problems , of which the most important ones are and .",
    "one can show that a parameterized problem @xmath62 is ( presumably ) not in by devising a _ parameterized reduction _ from a -hard or a -hard problem to @xmath62 .",
    "a parameterized reduction from a parameterized problem @xmath62 to another parameterized problem @xmath63 is a function that acts as follows : for two computable functions @xmath61 and @xmath64 , given an instance @xmath57 of problem  @xmath65 , it computes in @xmath60 time an instance @xmath66 of problem @xmath63 so that @xmath67 and that @xmath68 if and only if @xmath69 . for a survey of research on parameterized complexity in computational social choice , we refer to @xcite and @xcite .",
    "we consider the problem of _ combinatorial voter control _ in four variants .",
    "the variants differ in whether they are _ constructive _ or _ destructive _ , meaning that the goal is to make one selected candidate win or lose the election",
    ". this goal can be achieved by either _ adding _ voters to or _ deleting _ voters from the given election .",
    "due to space constraints , we only provide the definition of constructive control .",
    "destructive control is defined analogously .",
    "* combinatorial constructive control by adding * + ( resp .  *",
    "deleting * )  * voters * [ * c - cons - add * ( resp .",
    "* c - cons - del * ) ]    [ cols= \" < , < \" , ]     throughout this work , when speaking of the _ `` adding '' _ or _ `` deleting '' _ variants , we mean those variants in which voters are added or , respectively , deleted . in similar fashion , we speak of the _ constructive _ and _ destructive _ ( abbr .  by `` cons '' and by `` des '' ,",
    "respectively ) problem variants .",
    "further , we refer to the set @xmath70 of voters as the solution for the `` adding '' variants ( the set @xmath71 of voters for the `` deleting '' variants , respectively ) and denote @xmath72 as the solution size .    * our contributions . *",
    "we study both the classical and the parameterized complexity of the four voter control variants .",
    "we are particularly interested in the real - world setting where the given election has a small number of candidates and where only a few voters are associated to a voter . on the one hand",
    ", we were able to confirm the conjecture given by @xcite and @xcite that when parameterized by the solution size , c - cons - del , c - des - add , and c - des - del are all intractable even for just two candidates or for bundle sizes of at most three , and that when parameterized by the number of candidates , they are fixed - parameter tractable for anonymous bundling functions .",
    "on the other hand , we identify interesting special cases where the four problems differ in their computational complexity .",
    "we conclude that in general , destructive control tends to be easier than constructive control : for symmetric bundles with at most three voters , c - cons - add is known to be @xmath4-hard , while both destructive problem variants are polynomial - time solvable . for disjoint bundles",
    ", constructive control is parameterized intractable ( for the parameter `` solution size  @xmath73 '' ) , while destructive control is polynomial - time solvable . unlike for c - cons - del , a polynomial - time approximation algorithm for c - cons - add does not exist , unless @xmath74 .",
    "our results are gathered in [ tab : results ] .",
    "the following theorem summarizes the conjecture given by @xcite and @xcite .",
    "the proofs are deferred to [ app : w2,app : w1,app : ilp ] .",
    "[ thm : similar_summary ] all four combinatorial voter control variants are    -hard with respect to the solution size  @xmath73 , even for only two candidates and for symmetric bundling functions  @xmath45    -hard with respect to the solution size  @xmath73 , even for only two candidates and for bundle sizes of at most three .",
    "fixed - parameter tractable with respect to the number  @xmath75 of candidates if the bundling function @xmath38 is anonymous .",
    "* relations between the four problem variants . *",
    "we provide some reductions between the problem variants .",
    "they are used in several sections of this paper . the key idea for the reduction from destructive control to constructive control",
    "is to guess the candidate that will defeat the distinguished candidate and ask whether one can make this candidate win the election . the key idea for the reduction from the `` deleting '' to the `` adding '' problem variants is to build the `` complement '' of the registered voter set .",
    "[ thm : tur ] for each @xmath76 \\{add , del } , c - des-@xmath77 with @xmath75 candidates is turing reducible to c - cons-@xmath77 with two candidates .",
    "for each @xmath78 \\{cons , des } , c-@xmath79-del with two candidates is many - one reducible to c-@xmath79-add with two candidates .",
    "all these reductions preserve the property of symmetry of the bundling functions .",
    "in this section , we study combinatorial voter control when the voter bundles are symmetric and small",
    ". this could be the case when a voter s bundle models his close friends ( including himself ) , close relatives , or office mates .",
    "typically , this kind of relations is symmetric , and the number of friends , relatives , or office mates is small . we show that for symmetric bundles and for bundles size at most three , both destructive problem variants become polynomial - time solvable , while both constructive variants remain @xmath4-hard .",
    "however , if there are only two candidates , then we can use dynamic programming to also solve the constructive control variants in polynomial time .",
    "if we restrict the bundle size to be at most two , then all four problem variants can be solved in polynomial time via simple greedy algorithms .    as already observed in [ sec : preliminaries ] , we only need to consider the undirected version of the bundling graph for symmetric bundles . moreover , if the bundle size is at most two , then the resulting bundling graph consists of only cycles and trees .",
    "however , @xcite already observed that c - cons - add is @xmath4-hard even if the resulting bundling graph solely consists of cycles , and @xcite observed that c - cons - add remains @xmath4-hard even if the resulting bundling graph consists of only directed trees of depth at most three .",
    "[ thm : cons_hard ] c - cons - add is @xmath4-hard even for symmetric bundling functions with maximum bundle size @xmath80 .",
    "it turns out that the reduction used by @xcite to show [ thm : cons_hard ] can be adapted to show @xmath4-hardness for the deleting case .",
    "[ prop : des_hard ] c - cons - del is @xmath4-hard even for symmetric bundling functions with maximum bundle size @xmath80 .",
    "if , in addition to the bundles being symmetric and of size at most three , we have only two candidates , then we can solve c - cons - addin polynomial time .",
    "first of all , due to these constraints , we can assume that the bundling graph  @xmath81 is undirected and consists of only cycles and paths .",
    "then , it is easy to verify that we can consider each cycle and each path separately .",
    "finally , we devise a dynamic program for the case when the bundling graph is a path or a cycle , maximizing the score difference between our preferred candidate  @xmath82 and the other candidate . the crucial idea behind",
    "the dynamic program is that the bundles of a minimum - size solution induce a subgraph where each connected component is small .",
    "[ lemma : path ] let @xmath83 be a c - cons - add instance such that @xmath84 , and @xmath45 is symmetric with @xmath85 being a path .",
    "then , finding a size - at - most-@xmath73 subset  @xmath86 of voters such that the score difference between @xmath82 and @xmath87 in @xmath88 is maximum can be solved in @xmath89 time , where @xmath90 is the size of the unregistered voter set  @xmath10 .",
    "since @xmath85 is a path , each bundle has at most three voters .",
    "we denote the path in @xmath85 by @xmath91 and introduce some definitions for this proof .",
    "the set @xmath92 contains all voters on a sequence from @xmath93 to @xmath94 . for every subset  @xmath95",
    "we define @xmath96 as the score difference between @xmath82 and @xmath97 .",
    "one can observe that if @xmath98 is a solution for @xmath99 then @xmath100 ; note that we only have two candidates .",
    "@xmath101-proper - subset _",
    "@xmath98 is a subset of @xmath102 such that @xmath103 .",
    "a _ maximum @xmath101-proper - subset _",
    "@xmath98 additionally requires that each @xmath101-proper - subset @xmath104 with @xmath105 has @xmath106 .",
    "we provide a dynamic program in which a table entry @xmath107 $ ] contains a maximum @xmath101-proper - subset @xmath98 of size @xmath108 .",
    "we first initialize the table entries for the case where @xmath109 and @xmath110 in linear time . for @xmath111 ,",
    "we compute the table entry  @xmath107 $ ] by considering every possible partition of @xmath102 into two disjoint parts .",
    "@xmath112 \\coloneqq t[r - i , s , s+j ] \\cup t[i , s+j+1,t],\\\\          \\text{where } i , j = \\operatorname*{arg\\,max}_{\\substack{0 \\leq i \\leq r \\\\ 0 \\leq j \\leq t - s - 2 } } { \\textsf{gap}\\xspace}(t[r - i , s , s+j ] ) + { \\textsf{gap}\\xspace}(t[i , s+j+1,t ] ) .      \\end{gathered}\\ ] ] note that a maximum @xmath113-proper - subset @xmath98 of size @xmath114 _ could _ have a higher than a maximum @xmath113-proper - subset @xmath115 of size @xmath108 .",
    "to show the correctness of our program , we define the maximization and minimization function on a set of voters @xmath98 , which return the largest and smallest index of all voters on the path induced by @xmath98 , respectively : @xmath116 first , we use the following claim to show that each maximum @xmath101-proper - subset @xmath98 can be partitioned into two @xmath101-proper - subsets @xmath117 such that the two sets  @xmath118 and @xmath119 are disjoint .",
    "( the formal proof of the following claim can be found in the appendix . )",
    "[ claim : split ] let @xmath98 be a maximum @xmath101-proper - subset and @xmath120 .",
    "then , there is a @xmath121 with @xmath122 such that there is an @xmath123-proper - subset @xmath124 and a @xmath125-proper - subset @xmath126 with @xmath127 and @xmath128 .",
    "now , we show that the two subsets  @xmath124 and @xmath126 from [ claim : split ] are indeed _ optimal _ : there is a @xmath121 such that @xmath124 is a maximum @xmath123-proper - subset and @xmath126 is a maximum @xmath125-proper - subset .",
    "assume towards a contradiction that @xmath126 is a @xmath125-proper - subset but not a maximum @xmath125-proper - subset .",
    "therefore , there exists a maximum @xmath125-proper - subset @xmath129 where @xmath130 .",
    "this implies that @xmath131 .",
    "this is a contradiction to @xmath132 being a maximum @xmath101-proper - subset .",
    "the case in which @xmath124 is not a maximum @xmath123-proper - subset is analogous .",
    "altogether , we have shown that we can compute @xmath133 $ ] in constant time if @xmath134 , and that otherwise there exist an @xmath135 and a @xmath121 such that @xmath133 = t[k - i , s , t - j ] \\cup t[i , t - j+1,t]$ ] .",
    "the dynamic program considers all possible @xmath135 and @xmath121 . the table entry @xmath136 $ ] contains a subset @xmath95 of size @xmath135 with maximum such that @xmath137 , which is identical to @xmath138 .",
    "this completes the correctness proof of our dynamic program .",
    "the table has @xmath139 entries . to compute one entry the dynamic program accesses @xmath140 other table entries .",
    "note that the value @xmath141)$ ] can be computed and stored after the entry @xmath142 $ ] is computed .",
    "this takes at most @xmath143 steps .",
    "thus , the dynamic program runs in @xmath89  time .",
    "the dynamic program can be used to solve the same problem on cycles .",
    "altogether , we obtain the following .",
    "[ thm : m2symm ] c - cons - add with a symmetric bundling function , maximum bundle size of three , and for two candidates can be solved in @xmath89 time , where @xmath90 is the size of the unregistered voter set .",
    "[ thm : algo1 ]    let @xmath99 be a c - cons - add instance , where the maximum bundle size @xmath37 is three , @xmath45 is symmetric , and @xmath144 .",
    "this means that all connected components @xmath145 of @xmath85 are path or cycles .",
    "furthermore , all bundles only contain voters from one connected component .",
    "we define a dynamic program in which each table entry @xmath146 $ ] contains a solution  @xmath95 of size @xmath135 , where @xmath147 and @xmath148 :    if @xmath149 , then @xmath146 = t[i,1,|v(c_j)|]$ ] , where @xmath150 is the dynamic program of @xmath151 , depending on whether @xmath151 is a path or cycle .",
    "otherwise , we build the table as follows :    @xmath152 = a[d - i , s , s+j ] \\cup a[i , s+j+1 , t ] , $ ] where    @xmath153 ) + { \\textsf{gap}\\xspace}(a[i , s+j+1,t])$ ] .",
    "each of the table entries  @xmath154 $ ] can be computed in @xmath155 time ( see [ lemma : path , lemma : cycle ] ) and each of the table entries  @xmath146 $ ] for @xmath156 can be computed in @xmath157 time .",
    "since we have @xmath158 entries , the total running time is    @xmath159    from the polynomial - time solvability of [ thm : m2symm ] and by [ thm : tur ] , we obtain the following results :    [ thm : cons_des_poly ] c - cons - del with a symmetric bundling function , a maximum bundle size of three and two candidates can be solved in @xmath160 time , where @xmath161 is the size of the voters .",
    "[ thm : des_poly ] c - des - add and c - des - del with a symmetric bundling function and maximum bundle size three can be solved in time  @xmath162 and @xmath163 , respectively , where @xmath17 is the number of candidates , and @xmath90 and @xmath161 are the sizes of the unregistered and registered voter set , respectively .",
    "we have seen in [ sec : des_vs_cons ] that the interaction between the bundles influences the computational complexity of our combinatorial voter control problems . for instance , adding a voter  @xmath0 to the election may lead to adding another voter  @xmath164 with @xmath165 .",
    "this is crucial for the reductions used to prove [ thm : similar_summary ] and [ thm : cons_hard ] .",
    "thus , it would be interesting to know whether the problem becomes tractable if it is not necessary to add two bundles that share some voter(s ) . more specifically , we are interested in the case where the bundles are disjoint , meaning that we do not need to consider every single voter , but only the bundles as a whole , as it does not matter which voters of a bundle we select .    first",
    ", we consider disjoint bundles of size at most two .",
    "this is the case for voters who have a partner .",
    "if a voter is convinced to participate in or leaves the election , then the partner is convinced to do the same . note that this is equivalent to having symmetric bundles of size at most two .",
    "* theorem 6 ) constructed a linear - time algorithm for c - cons - add if the maximum bundle size is two and @xmath38 is a full-@xmath166 bundling function ( which implies symmetry ) .",
    "we can verify that their algorithm actually works for disjoint bundles of size at most two .",
    "thus , we obtain the following .    [ thm : b2symm ] c - cons - add with a symmetric bundling function and with bundles of size at most two can be solved in @xmath167 time , where @xmath168 is the input size .",
    "if we want to delete instead of add voter bundles , the problem reduces to finding a special variant of the @xmath169-factor problem , which is a generalization of the well - known matching problem and can still be solved in polynomial time  @xcite .",
    "[ thm : b2symm - del ] c - cons - del with a symmetric bundling function and with bundles of size at most two can be solved in polynomial time .",
    "if we drop the restriction on the bundle sizes but still require the bundles to be disjoint , then c - cons - add and c - cons - del become parameterized intractable with respect to the solution size .",
    "[ thm : disjoint_hard ] parameterized by the solution size  @xmath73 , c - cons - add and c - cons - del are -hard and -hard respectively , even for disjoint bundles .",
    "we provide a parameterized reduction from the -complete problem independent set ( parameterized by the `` solution size '' ) which , given an undirected graph @xmath170 and a natural number @xmath171 , asks whether @xmath172 admits a size-@xmath173 _ independent set _",
    "@xmath174 , that is , all vertices in @xmath175 are pairwise non - adjacent .",
    "let @xmath176 be an independent set instance with @xmath177 @xmath178 and @xmath179 . without loss of generality , we assume that @xmath180 is connected and @xmath181 .",
    "we construct an election @xmath15 with candidate set  @xmath182 . for each edge  @xmath183",
    ", we construct @xmath184 registered voters that all have @xmath185 as their favorite candidate . in total , @xmath8 consists of @xmath186 voters .    the unregistered voter set @xmath187 is constructed as follows : for each vertex  @xmath188 , add a @xmath9-voter @xmath189 , and for each edge  @xmath190 incident with @xmath191 , add a @xmath192-voter @xmath193 .",
    "the voters constructed for each vertex @xmath191 are bundled by the bundling function  @xmath45 .",
    "more formally , for each  @xmath188 and each @xmath194 with @xmath195 , it holds that    @xmath196    to finalize the construction , we set @xmath197 .",
    "the construction is both a polynomial - time and a parameterized reduction , and all bundles are disjoint . to show the correctness",
    ", we note that @xmath82 can only win if only if her score can be increased to at least @xmath198 without giving any other candidate more than one more point .",
    "the solution corresponds to exactly to a subset of @xmath198 vertices that are pairwise non - adjacent .",
    "the detailed correctness proof and the remaining proof for the -hardness result can be found in the appendix .    for destructive control , it is sufficient to guess a potential defeater  @xmath199 out of @xmath200 possible candidates that will have a higher score than @xmath82 in the final election and use a greedy strategy similar to the one used for [ thm : b2symm ] to obtain the following result .",
    "[ thm : symmdes ] c - des - add and c - des - del with a symmetric bundling function and disjoint bundles can be solved in @xmath201 time , where @xmath168 is the input size and @xmath75 the number of candidates .",
    "to analyze election control , it is interesting to know whether a solution exist at all , without bounding its size .",
    "indeed , @xcite already considered the case of unlimited solution size for the constructive candidate control problem .",
    "they showed that the problem is already @xmath4-hard , even if the solution size is not bounded .",
    "( the non - combinatorial destructive control by adding unlimited amount of candidates is shown to be also @xmath4-hard by @xcite . ) in contrast , the non - combinatorial voter control variants are linear - time solvable via simple greedy algorithms  @xcite .",
    "this leads to the question whether the combinatorial structure increases the complexity . to this end , we relax the four problem variants so that the solution can be of arbitrary size and call these problems c - cons - add - unlim , c - des - add - unlim , c - cons - del - unlim and c - des - del - unlim .",
    "first of all , we observe that c - cons - del - unlim becomes trivial if no unique winner is required .",
    "[ lem : consdeleasy ] let @xmath202 be a c - cons - del - unlim instance . then @xmath203 is a yes - instance .    if we consider a voting rule @xmath204 that only returns unique winners , then c - des - del - unlim also becomes tractable since we only need to delete all voters .    for the constructive adding voters case",
    ", we obtain @xmath4-hardness . the idea for the reduction derives from the -hardness proof of c - cons - add shown by @xcite .",
    "[ lem : limitedhard ] c - cons - add - unlim is @xmath4-hard .",
    "[ lem : limitedhard ] immediately implies the following inapproximability result for the optimization variant of c - cons - add(denoted as min - c - cons - add ) , aiming at minimizing the solution size .",
    "[ thm : inapproximability ] there is no polynomial - time approximation algorithm for min - c - cons - add , unless @xmath205 .",
    "we extend the study of combinatorial voter control problems introduced by @xcite and obtain that the destructive control variants tend to be computationally easier than their constructive cousins .",
    "our research leads to several open questions and further research opportunities .",
    "first , we have shown hardness results for the adding candidate case : if the bundling function consists of disjoint cliques , then parameterized by the solution size , c - cons - add is -hard and c - des - add is -hard .",
    "if one could also determine the complexity upper bound , that is , under the given restrictions , if c - cons - add would be contained in , then this would yield another difference in complexity between the destructive and the constructive variants .",
    "this also leads to the question whether the problem variants in their general setting are not only -hard , but -complete .",
    "second , we have only shown that min - c - cons - add is inapproximable and min - c - des - del is trivially polynomial - time solvable .",
    "for the other two problem variants , we do not know whether they can be approximated efficiently or not .",
    "another open question is whether there are -results for any natural combined parameters . as a starting point",
    ", we conjecture that all problem variants can be formulated as a monadic second - order logic formula with length of at most @xmath206 ( where @xmath72 is the solution size , @xmath37 is the maximum bundle size , @xmath17 is the number of candidates , and @xmath169 is a computable function )",
    ". showed that every graph problem expressible as a monadic second - order logic formula @xmath207 can be solved in @xmath208 time , where @xmath209 is the treewidth of the input graph and @xmath168 is the input size .",
    "our conjecture would provide us with a fixed - parameter tractability result with respect to the solution size , the maximum bundle size , the number of candidates , and the treewidth of our bundling graph  @xmath85 .",
    "we have studied the plurality rule exclusively .",
    "thus it is still open which of our results also hold for other voting rules , especially for the condorcet rule . since with two candidates , the condorcet rule is equivalent to the strict majority rule",
    ", we can easily adapt some of our results to work for the condorcet rule as well .",
    "other results ( i.e. , the turing reductions ) can not be easily adapted to work for the condorcet rule .",
    "27 [ 1]#1 [ 1]`#1 ` urlstyle [ 1]doi : # 1    r.  p. anstee . an algorithmic proof of tutte s @xmath169-factor theorem .",
    "_ journal of algorithms _ , 60 ( 1):0 112131 , 1985 .",
    "r.  p. anstee",
    ". minimum vertex weighted deficiency of @xmath210-factors : a greedy algorithm . _ discrete applied mathematics _ , 440 ( 13):0 247260 , 1993 .",
    "j.  j. bartholdi  iii , c.  a. tovey , and m.  a. trick .",
    "how hard is it to control an election ?",
    "_ mathematical and computer modelling _ , 160 ( 8 - 9):0 2740 , 1992 .",
    "n.  betzler and j.  uhlmann .",
    "parameterized complexity of candidate control in elections and related digraph problems .",
    "_ theoretical computer science _ ,",
    "4100 ( 52):0 4353 , 2009 .",
    "n.  betzler , r.  bredereck , j.  chen , and r.  niedermeier .",
    "studies in computational aspects of voting . in _ the multivariate algorithmic revolution and beyond _ , pages 318363 .",
    "springer , 2012 .",
    "r.  bredereck , j.  chen , p.  faliszewski , j.  guo , r.  niedermeier , and g.  j. woeginger .",
    "parameterized algorithmics for computational social choice : nine research challenges .",
    "_ tsinghua science and technology _ , 190 ( 4):0 358373 , 2014 .",
    "r.  bredereck , p.  faliszewski , r.  niedermeier , and n.  talmon .",
    "large - scale election campaigns : combinatorial shift bribery .",
    "_ journal of artificial intelligence research _ , 55:0 603652 , 2016 .",
    "l.  bulteau , j.  chen , p.  faliszewski , r.  niedermeier , and n.  talmon .",
    "combinatorial voter control in elections .",
    "_ theoretical computer science _ , 589:0 99120 , 2015 .",
    "j.  chen .",
    "_ exploiting structure in computationally hard voting problems_. phd thesis , technische universitt berlin , 2015 .",
    "j.  chen , p.  faliszewski , r.  niedermeier , and n.  talmon .",
    "elections with few voters : candidate control can be easy . in _",
    "aaai  15 _ , pages 20452051 , 2015 .",
    "b.  courcelle and j.  engelfriet . _ graph structure and monadic second - order logic : a language - theoretic approach _ ,",
    "volume 138 .",
    "cambridge university press , 2012 .",
    "m.  j. a. n.  c. de  condorcet .",
    "essai sur lapplication de lanalyse a la probilite des decisions rendues a la pluralite dex voix , 1785 .",
    "r.  g. downey and m.  r. fellows . _ fundamentals of parameterized complexity_. springer , 2013 .",
    "g.  erdlyi , m.  r. fellows , j.  rothe , and l.  schend . control complexity in bucklin and fallback voting : a theoretical analysis . _ journal of computer and system sciences _ , 810 ( 4):0 632660 , 2015 .    p.  faliszewski and j.  rothe .",
    "control and bribery in voting . in f.",
    "brandt , v.  conitzer , u.  endriss , j.  lang , and a.  d. procaccia , editors , _ handbook of computational social choice _",
    ", chapter  7 .",
    "cambridge university press , 2016 .",
    "faliszewski , e.  hemaspaandra , l.  hemaspaandra , and j.  rothe .",
    "llull and copeland voting computationally resist bribery and constructive control . _",
    "journal of artificial intelligence research _ , 35:0 275341 , 2009 .",
    "p.  faliszewski , e.  hemaspaandra , and l.  hemaspaandra .",
    "multimode control attacks on elections . _",
    "journal of artificial intelligence research _ , 40:0 305351 , 2011 .",
    "faliszewski , e.  hemaspaandra , and l.  a. hemaspaandra . weighted electoral control .",
    "_ journal of artificial intelligence research _ , 52:0 507542 , 2015 .",
    "j.  flum and m.  grohe .",
    "_ parameterized complexity theory_. springer , 2006 .",
    "e.  hemaspaandra , l.  a. hemaspaandra , and j.  rothe . anyone but him : the complexity of precluding an alternative .",
    "_ artificial intelligence _ ,",
    "1710 ( 5):0 255285 , 2007 .",
    "l.  a. hemaspaandra , r.  lavaee , and c.  menton . schulze and ranked - pairs voting are fixed - parameter tractable to bribe , manipulate , and control . _",
    "annals of mathematics and artificial intelligence _ , 770 ( 3 - 4):0 191223 , 2016 .    h.  w. lenstra  jr .",
    "integer programming with a fixed number of variables .",
    "_ mathematics of operations research _ , 80 ( 4):0 538548 , 1983 .",
    "h.  liu and d.  zhu .",
    "parameterized complexity of control problems in maximin election .",
    "_ information processing letters _ , 1100 ( 10):0 383388 , 2010 .",
    "h.  liu , h.  feng , d.  zhu , and j.  luan . parameterized computational complexity of control problems in voting systems . _",
    "theoretical computer science _",
    ", 4100 ( 2729):0 27462753 , 2009 .",
    "r.  niedermeier .",
    "_ invitation to fixed - parameter algorithms_. oxford university press , 2006 .",
    "a.  d. procaccia , j.  s. rosenschein , and a.  zohar .",
    "multi - winner elections : complexity of manipulation , control and winner - determination . in _ ijcai  07 _ , pages 14761481 , 2007 .    j.  rothe and l.  schend .",
    "challenges to complexity shields that are supposed to protect elections against manipulation and control : a survey . _",
    "annals of mathematics and artificial intelligence _ , 680 ( 13):0 161193 , 2013 .",
    "* appendix *",
    "in this section we provide the theorems and proofs for results in which the four problem variants behave similarly in complexity which are summarized in the main text as [ thm : similar_summary ] .",
    "first , we provide hardness results with different constraints on the parameters of the problem variants .",
    "then , we show that the problem variants are fixed - parameter tractable with respect to the number of candidates .    for this appendix",
    ", we introduce the condorcet voting rule .",
    "a candidate @xmath211 is a _",
    "condorcet winner _ if it wins against every other candidate in a head - to - head contest @xcite .",
    "formally , @xmath211 is a condorcet winner if @xmath212 need to be modified as the preferred winner ( loser ) @xmath9 needs to win ( lose ) the election evaluated by the condorcet rule .",
    "@xcite originally stated that c - cons - add is -hard with respect to the solution size for the plurality and for the condorcet voting rule .",
    "[ thm : w2 ] uses their proof concept and extends their result for the other three variants of the combinatorial voter control problem .",
    "[ thm : w2 ] for both plurality and condorcet , c - cons - del , c - des - add and c - des - del are all _",
    "_ -hard with respect to the solution size @xmath72 , even if there are only two candidates and even if the bundling function @xmath38 is symmetric .",
    "we first consider the plurality rule and provide a parameterized reduction from the -complete problem dominating set parameterized by the solution size @xmath173 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ dominating set + * input : * an undirected graph @xmath213 and a natural number @xmath214 . + * question : * is there a _ dominating set _ of size at most @xmath173 , that is , a vertex subset @xmath215 with @xmath216 such that each vertex from @xmath217 is adjacent to at least one vertex from @xmath218 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    let @xmath219 be a dominating set instance .",
    "we construct an election @xmath220 with @xmath221 , where @xmath82 is our preferred candidate .",
    "we define the voter set for our three problem variants differently .",
    "for c - des - add :    the registered voter set @xmath8 consists of @xmath222 @xmath82-voters ( and no @xmath97-voters ) .",
    "the unregistered voter set @xmath10 consists of one @xmath97-voter @xmath223 for each vertex @xmath188 .    for c - cons - del",
    ", we define the voter set @xmath11 such that    @xmath8 consists of one @xmath97-voter @xmath223 for each vertex @xmath188 and    no @xmath82-voters .- voter @xmath224 and one @xmath97-voter @xmath225 with @xmath226 and @xmath227 .",
    "this makes the argumentation in the proof slightly more complicated . ]    for c - des - del , we define the voter set @xmath8 such that    @xmath8 consist of one @xmath82-voter @xmath223 for each vertex @xmath188 and    one g - voter @xmath228 with bundle @xmath229 .",
    "we define the bundle @xmath230 as the closed neighborhood of @xmath231 , formally @xmath232 .",
    "finalizing our construction , we set @xmath197 .",
    "it is clear that our construction is both a polynomial reduction and a parameterized reduction with respect to @xmath73 . also , it is obvious that the bundling function used in the construction is symmetric .",
    "we exemplary show for c - cons - del that there is a dominating set of size @xmath198 if and only if there is a subset @xmath23 of size at most @xmath73 .",
    "the other two variants can be proven analogously .",
    "for the `` only if '' part , given a dominating set @xmath175 of size at most @xmath198 , we define @xmath23 to be the corresponding voter set , that is , @xmath233 . it is clear that @xmath234 and @xmath82 as well as @xmath97 becomes winner , because @xmath97 loses @xmath235 points and has the same score as @xmath82 .    for the",
    "`` if '' part , given a subset of the voters @xmath236 of size at most @xmath73 such that p is a winner of @xmath237 , we define @xmath175 to be the set of vertices corresponding to the voters from @xmath23 , that is , @xmath238 .",
    "it follows that @xmath239 and for each vertex @xmath240 there must be a vertex @xmath241 which is a neighbor of @xmath231 , since otherwise we will still have some @xmath97-voters and @xmath82 will not become a winner .    finally , we need to consider the condorcet rule . for two candidates ,",
    "the condorcet rule is equivalent to the strict majority rule and , hence , the proof is analogous to the proof for the plurality rule .",
    "we only need to adapt the c - des - add such that the candidate @xmath9 is the only winner .",
    "we can accomplish that by adding to the @xmath11 one @xmath82-voter @xmath228 with bundle @xmath242 .",
    "from @xcite we know that c - cons - add is -hard with respect to the solution size for the plurality voting rule , even when the maximum bundle size is three .",
    "we show this for three other variants of the combinatorial voter control and additional for condorcet s voting rule .",
    "[ thm : w1 ] for both plurality and condorcet , c - cons - add , c - cons - del , c - des - add and c - des - del are all _ _ -hard with respect to the solution size @xmath72 , even if the maximum bundle size b is three and there are only two candidates .",
    "we first consider the plurality rule and provide a parameterized reduction from the -complete problem clique parameterized by the solution size @xmath173 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ clique + * input : * an undirected graph @xmath213 and a natural number @xmath214 . + * question : * is there a _ clique _ of size at least @xmath173 , that is , a complete subgraph with @xmath243 vertices ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    let @xmath219 be a clique instance .",
    "without loss of generality , we assume @xmath244 .",
    "( if not , it can be solved in polynomial time . )",
    "we construct an election @xmath220 with @xmath221 , where @xmath82 is our preferred candidate . for each vertex @xmath245 we define one _ vertex voter _",
    "@xmath246 with the bundle @xmath247 . for each edge",
    "@xmath248 we define one _ edge voter _",
    "@xmath249 with the bundle @xmath250 .",
    "now , we finalize the voter set definition which slightly differs for our three problem variants .    for c - cons - del , we define the voter set @xmath8 such that :    vertex voters are @xmath82-voters .",
    "edge voters are @xmath97-voters .",
    "we add a set @xmath251  of dummy @xmath82-voters and a set @xmath252  of dummy @xmath97-voters with @xmath253 for each @xmath254 .",
    "we set set the cardinalities of  @xmath251 and  @xmath252 such that @xmath255 .    for c - des - del",
    ", we define the voter set @xmath8 such that    vertex voters are @xmath97-voters .",
    "edge voters are @xmath82-voters .",
    "we add a set @xmath251  of dummy @xmath82-voters and a set @xmath252  of dummy @xmath97-voters with @xmath253 for each @xmath254 .",
    "we set set the cardinalities of  @xmath251 and  @xmath252 such that @xmath256 .    for c - des - add :",
    "vertex voters are unregistered @xmath97-voters .",
    "edge voters are unregistered @xmath82-voters .",
    "there are no other voters in the unregistered voter set @xmath10 .",
    "the registered voter set @xmath8 consist of @xmath257 @xmath82-voters .    finally , we set @xmath258 .",
    "it is clear that our construction is both a polynomial reduction and a parameterized reduction with respect to @xmath73 .",
    "we exemplary show for c - cons - del that there is a clique @xmath175 of size at least @xmath198 if and only if there is a subset @xmath23 of size at most @xmath73 such that p becomes a winner of @xmath259 .",
    "the other two variants can be proven analogously .",
    "for the `` only if '' part , given a clique  @xmath175 of size  @xmath198 , we construct @xmath23 by adding to it any edge voter @xmath249 with @xmath260)$ ] . it is clear that @xmath261 .",
    "observe that candidate  @xmath82 as well as candidate  @xmath97 become winners .",
    "candidate  @xmath97 loses @xmath262  points and candidate  @xmath82 loses @xmath198  points .",
    "thus , @xmath97 and @xmath82 have the same score .    for the `` if '' part ,",
    "given a subset of the voters @xmath236 of size at most @xmath73 such that p is a winner of @xmath237 , we define @xmath175 to be the set of vertices corresponding to the voters from @xmath23 , that is , @xmath263 and @xmath264 .",
    "we observe that deletion of vertex voters does nt reduce the score of @xmath97 and removing a vertex voter from  @xmath23 would lead to a smaller solution .",
    "hence , we can assume that  @xmath23 does not contain any vertex voters . in order to reduce the score of @xmath97 ,",
    "enough edge voters must be removed , but a certain amount of vertex voters will be removed as well since they are in the bundles of the edge voters .",
    "we denote the number of indirectly removed vertex voters be  @xmath265 .",
    "clearly @xmath266 , because otherwise @xmath82 loses more than @xmath198  points , @xmath97  loses at most @xmath262  points , and @xmath97  remains the only winner .",
    "assume towards a contradiction that @xmath267 .",
    "the score of  @xmath97 decreases by at least @xmath268 in @xmath269 ( compared to  @xmath259 ) so that @xmath23 contains at least @xmath268 edge voters .",
    "however , @xmath270 for any @xmath271 . hence , @xmath272 implying that there are at least @xmath273 edge voters .",
    "now , assume towards a contradiction that @xmath274 .",
    "then , @xmath275 for any @xmath271 .",
    "thus , @xmath276 implying that there are exactly @xmath277 edge voters in @xmath23 with altogether @xmath198  different vertex voters in their bundles . in this case",
    ", @xmath175 is a clique of size @xmath198 , since otherwise we can not have @xmath262 edges incident to @xmath198  vertices .    finally , we need to consider the condorcet rule . for two candidates ,",
    "the condorcet rule is equivalent to the strict majority rule and , hence , the proof is analogous to the proof for the plurality rule .",
    "we only need to adapt the c - des - add such that candidate @xmath9 is the only winner .",
    "we can accomplish that by adding to the @xmath11 one @xmath82-voter @xmath199 with bundle @xmath278 .",
    "condorcet - c - cons - add can be proved analogously .",
    "@xcite provide an integer linear program ( ilp ) that solves plurality- and condorcet - c - cons - add for the case when the bundling function is anonymous ( see [ sec : preliminaries ] for the corresponding definition ) and exploit lenstra s theorem to show fixed - parameter tractability with respect to the number of candidates .",
    "their idea is to utilize the fact that for anonymous bundling functions , voters with the same preference order `` lead '' the same bundle of voters and `` follow '' the same voter as well .",
    "thus , with @xmath75  candidates , we will have at most @xmath279 different bundles . by this observation",
    ", they introduce @xmath280 variables , one variable for a bundle , to encode whether to select a bundle to the solution . indeed",
    ", as long as the bundling function is anonymous , the same idea applies to the remaining three combinatorial voter control variants .",
    "although the technique is analogous , we provide the corresponding ilps for [ thm : ilp , thm : ilp2,thm : ilp3 ] and show the correctness for the sake of completeness .",
    "[ thm : ilp ] for both plurality and condorcet , c - cons - del is fixed - parameter tractable with respect to the number @xmath17 of candidates , if the bundling function @xmath38 is anonymous .",
    "given a c - cons - del instance  @xmath281 with @xmath75 candidates and anonymous bundling function  @xmath45 , we construct an integer linear program ( ilp ) with at most @xmath282 variables and at most @xmath283 constraints for c - cons - del similar to @xcite for c - cons - add .",
    "fixed - parameter tractability follows because every ilp with @xmath207 variables and @xmath65 input bits is solvable in @xmath284 time @xcite .",
    "since @xmath75 candidates are given , there are at most @xmath279 voters with pairwise different preference orders .",
    "we denote these as @xmath285 and note that there are at most @xmath279 different bundles , because @xmath45 is leader - anonymous .",
    "we will use the following notation for the construction of the ilp :    define @xmath286 as the set of preference orders of the voters included in the bundle of the voters with preference order @xmath287 ; note that by the anonymity , if @xmath288 contains a preference order  @xmath289 , then every voter with preference order  @xmath289 is in the bundle of the voter that has preference order  @xmath287 .",
    "define @xmath290 as the set of preference orders that include @xmath291 in their bundles .",
    "define @xmath292 as the number of voters with preference order @xmath293 in @xmath11 .    for each candidate",
    "@xmath294 , define @xmath295 as the set of preference orders in which @xmath296 is ranked first and    let @xmath297 be the initial score in election  @xmath298 .    to encode a solution  @xmath98 , for each preference order @xmath299 $ ] , we introduce two boolean variables , @xmath300 and @xmath301 .",
    "the intended meaning of @xmath302 is that the sought solution contains a voter with preference order @xmath293 .",
    "the intended meaning of @xmath303 is that @xmath304 contains a voter with preference order @xmath293 .",
    "now , we are ready to state the integer linear problem .",
    "note that it suffices to find a feasible solution .",
    "thus , we do not need to specify any objective function .",
    "[ ilp : solutionbound ] _",
    "ix_i & k , & + [ ilp : voterbound ] x_i & n_i , & i + [ ilp : y - one ] _",
    "^-1()x_i & m !",
    "y_j , & j + [ ilp : y - two ] _ ^-1()x_i & y_j , & j + [ ilp : winning ] s(p ) - _ _ j f(p ) n_jy_j & s(a ) - _ _ j f(a ) n_jy_j , & a c\\{p } + [ ilp : binary_vars ] x_i , y_i & \\{0,1 } , & i    constraint   ensures that at most @xmath73 voters are added to the solution .",
    "constraint   ensures that the voters added to the solution are indeed present in @xmath11 .",
    "constraints and ensure that variables @xmath305 , have correct values . indeed ,",
    "if for some preference order @xmath293 we have @xmath306 and @xmath307 , then constraint   ensures that @xmath308 . on the other hand , if for some preference order @xmath291 we have that for each preference order @xmath287 with @xmath307 it holds that @xmath309 , then constraint   ensures that @xmath310 .",
    "constraint   ensures that @xmath9 has a ( plurality ) score which is at least as high as the score of every candidate ( which makes @xmath9 a winner ) .",
    "clearly , there is a solution for this integer linear program if and only if there is a solution for c - cons - del with the plurality rule .    for the case of the condorcet rule",
    ", we need to define the following additional parameters : let @xmath311 denote the number of voters that prefer candidate @xmath312 over candidate @xmath37 and @xmath313 denote the set of preference orders in which @xmath312 is preferred to @xmath37 .",
    "we modify only constraint as follows : @xmath314 this ensures that @xmath82 can beat every other given candidate @xmath312 in a head - to - head contest if and only if there is a solution to the ilp .    as for the running time",
    ", it is clear that both ilps have @xmath315 variables and @xmath316 constraints . by the famous result of @xcite , fixed - parameter tractability follows .",
    "[ thm : ilp2 ] for both plurality and condorcet , c - des - add is fixed - parameter tractable with respect to the number @xmath17 of candidates , if the bundling function @xmath38 is anonymous .    as in the proof for [ thm : ilp ] , we construct an integer linear program ( ilp ) with at most @xmath317 variables and constraints , and use the same notation , except the following two :    * @xmath292 denotes the number of voters with preference order @xmath293 in @xmath187 . * the intended meaning of @xmath303 is that @xmath318 contains a voter with preference order @xmath293 .",
    "the constraints for the ilp are as follows :    _ i x_i & k , & + x_i & n_i , & i + _ _ i ^-1(_j ) x_i & m !",
    "y_i , & j + _ _ i ^-1(_j ) x_i & y_j , & j + _ a ( s(p ) + _ n_j y_j + 1 ) & _ a ( s(a ) + _",
    "n_j y_j ) , & a c \\{p } [ ineq : ilp8 ] + _ a c \\{p } _ a & 1 , [ ineq : ilp9 ] + x_i , y_i , _ a & \\{0,1 } , & i [ ineq : ilp51 ]    if @xmath319 , constraint   is valid . if @xmath320 , constraint   ensures that @xmath9 loses against candidate @xmath321 .",
    "constraint   ensures that at least one of the boolean variables @xmath322 has value @xmath323 and , therefore , there exists at least one candidate @xmath296 such that @xmath312 wins against @xmath9 .    for the condorcet rule , alter constraint   as follows :    @xmath324    here @xmath325 is the number of unregistered voters that prefer candidate @xmath312 over candidate @xmath37 .",
    "constraint   ensures that at least one of the boolean variables @xmath322 has value @xmath323 while constraint   ensures that @xmath9 loses against at least one of the candidates @xmath312 in a head - to - head contest .",
    "we omit the reasoning for the running time as it is the same as the one shown for [ thm : ilp ] .",
    "[ thm : ilp3 ] for both plurality and condorcet , c - des - del is fixed - parameter - tractable with respect to the number @xmath17 of candidates , if the bundling function @xmath38 is anonymous .",
    "this ilp is almost the same as the one for c - des - add .",
    "the only difference is that we use `` @xmath326 '' instead of `` + '' in constraint  :    @xmath327    note that , in this problem variant , we do not try to find a subset of unregistered voters @xmath328 to add to the election , but a subset of the registered voters @xmath329 to remove from the election .",
    "the definitions for @xmath292 and @xmath330 change accordingly .",
    "for the condorcet rule , alter constraint   as follows : @xmath331 here @xmath332 is the number of unregistered voters that prefer candidate @xmath312 over candidate  @xmath333 .",
    "we omit the reasoning for the running time as it is the same as the one shown for [ thm : ilp ] .",
    "[ app : inapproximability ]"
  ],
  "abstract_text": [
    "<S> voter control problems model situations in which an external agent tries to affect the result of an election by adding or deleting the fewest number of voters . </S>",
    "<S> the goal of the agent is to make a specific candidate either win ( _ constructive _ control ) or lose ( _ destructive _ control ) the election . </S>",
    "<S> we study the constructive and destructive voter control problems when adding and deleting voters have a _ combinatorial flavor _ : if we add ( resp .  </S>",
    "<S> delete ) a voter  @xmath0 , we also add ( resp .  </S>",
    "<S> delete ) a bundle  @xmath1 of voters that are associated with  @xmath0 . while the bundle  @xmath2 may have more than one voter , a voter </S>",
    "<S> may also be associated with more than one voter . </S>",
    "<S> we analyze the computational complexity of the four voter control problems for the plurality rule .    </S>",
    "<S> we obtain that , in general , making a candidate lose is computationally easier than making her win . </S>",
    "<S> in particular , if the bundling relation is symmetric ( i.e.  @xmath3 ) , and if each voter has at most two voters associated with him , then destructive control is polynomial - time solvable while the constructive variant remains @xmath4-hard . </S>",
    "<S> even if the bundles are disjoint ( i.e.  @xmath5 ) , the constructive problem variants remain intractable . finally , the minimization variant of constructive control by adding voters does not admit an efficient approximation algorithm , unless @xmath6 . </S>"
  ]
}