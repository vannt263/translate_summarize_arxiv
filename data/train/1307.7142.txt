{
  "article_text": [
    "several results show the influence of friends and contacts to spread obesity @xcite , loneliness @xcite , alcohol consumption @xcite , religious belief @xcite and many similar properties in social networks .",
    "others question the methodology of these experiments @xcite by proposing that the measured effects may be due to homophily @xcite , the fact that people tend to associate with others like themselves , and a shared environment also called confounding or contextual influence .",
    "part of the appeal of web 2.0 is to find other people who share similar interests .",
    "last.fm organizes its social network around music recommendation : users may automatically share their listening habits and at the same time grow their friendship .",
    "based on the profiles shared , users may see what artists friends really listen to the most .",
    "companies such as last.fm use this data to organize and recommend music to people .    in this paper",
    "we exploit the timely information gathered by the last.fm service on users with public profile to investigate how members of the social network may influence their friends taste .",
    "last.fms service is unique in that we may obtain a detailed timeline and catch immediate effects by comparing the history of friends in time and comparing to pairs of random users instead of friends .",
    "our contribution to the dispute on whether social contacts influence one another or whether the observed similarity in taste and behavior is only due to homophily , we show a carefully designed experiment to subtract external effects that may result in friends listening to similar music . homophily is handled by collaborative filtering , a method that is capable of learning patterns of similarity in taste without using friendship information .",
    "another possible source for users listening to the same music may come from traditional media : news , album releases , concerts and ads . while the sources are hard to identify , common in them",
    "is that they cause temporal increase in popularity for the targeted artist .",
    "these effects are filtered by another method that measures popularity at the given time and recommends based on the momentary popularity .",
    "we blend collaborative filtering and temporal popularity recommenders with a method for influence prediction that we describe in this paper .",
    "we consider events where a user listens to an artist for the first time closely after a friend listened to the same artist .",
    "we obtain a 4% of increase in recommendation quality , a strong result in view of the three - year netflix prize competition @xcite to improve recommender quality by 10% .",
    "note that we only give a single method that results in a stable strong improvement over the baselines .",
    "our new method is a lightweight recommender based on friends past items that can be very efficiently computed even in real time .",
    "part of the efficiency comes from the fact that potential items from influencing friends are relative rare . for this reason ,",
    "the method in itself performs worse than the baselines , however it combines very well with them .",
    "indeed , influence based predictions improve the accuracy of a traditional factor model recommender by nearly as much as measuring popularity at the given time , a prediction that is strong in itself .",
    "the fact that influences blend well prove that close events in the network bring in new information that can be exploited in a recommender system and also prove the existence of influence from friends beyond homophily .",
    "the netflix prize competition @xcite has recently generated increased interest in recommender algorithms in the research community and put recommender algorithms under a systematic thorough evaluation on standard data @xcite .",
    "the final best results blended a very large number of methods whose reproduction is out of the scope of this paper .",
    "as one of our baselines we selected a successful matrix factorization recommender described by simon funk in @xcite that is based on an approach reminiscent of gradient boosting @xcite .",
    "closest to our results are the applications of network influence in collaborative filtering @xcite .",
    "however in their data only ratings and no social contacts are given . in another result",
    "@xcite over flickr , both friendship and view information was present , but the main goal was to measure the strength of the influence and no measurements were designed to separate influence from other effects .",
    "bonchi @xcite summarizes the data mining aspects of research on social influence .",
    "he concludes that `` another extremely important factor is the temporal dimension : nevertheless the role of time in viral marketing is still largely ( and surprisingly ) unexplored '' , an aspect that is key in our result .",
    "since our goal is to recommend different artists at different times , our evaluation must be based on the quality of the top list produced by the recommender .",
    "this so - called top-@xmath0 recommender task is known to be hard @xcite .",
    "for a recent result on evaluating top-@xmath0 recommenders is found in @xcite .",
    "music recommendation is considered in several results orthogonal to our methods that will likely combine well .",
    "mood data set is created in @xcite .",
    "similarity search based on audio is given in @xcite .",
    "tag based music recommenders ( * ? ? ?",
    "* ; * ? ? ?",
    "* and many more ) , a few of them based on last.fm tags , use annotation and fall into the class of content based methods as opposed to collaborative filtering considered in our paper .",
    "best starting point for tag recommendation in general are the papers @xcite .",
    "note that the netflix prize competition put a strong vote towards the second class of methods @xcite .    as a social media service , twitter",
    "is widely investigated for influence and spread of information .",
    "twitter influence as followers has properties very different from usual social networks @xcite .",
    "deep analysis of influence in terms of retweets and mentions is given in @xcite .",
    "notion of influence similar to ours is derived in @xcite for fickr and twitter cascades , respectively .",
    "note that by our measurement the last.fm data contains only a negligible amount of cascades as opposed to twitter or flickr .",
    "last.fm became a relevant online service in music based social networking .",
    "the idea of last.fm is to create a recommendation system based on plugins nearly for all kind of music listening platforms . for registered users",
    "it collects , `` scrobbles '' what they have listened .",
    "each user has its own statistics on listened music that is shown in her profile .",
    "most user profiles are public , and each user of last.fm may have friends inside the last.fm social network .",
    "therefore one relevant information for the users is that they see their own and their friends listening statistics .",
    "we focus on two types of user information ,    * the timeline information of users : user @xmath1 `` scrobbled '' artist @xmath2 at time @xmath3 ( @xmath4 ) , * and the social network of users .    our data set hence consists of the contacts and the musical taste of the users .",
    "our goal is to justify the existence of the influence of social contacts , i.e.  certain correlation the taste of friends in the user network . for privacy considerations , throughout our research ,",
    "we selected an anonymous sample of users . anonymity is provided by selecting random users while maintaining a connected friendship network .",
    "we set the following constraints for random selection :    * user location is stated in uk ; * age between 14 and 50 , inclusive ; * profile displays scrobbles publicly ( privacy constraint ) ; * daily average activity between 5 and 500 . *",
    "at least 10 friends that meet the first four conditions .",
    "the above selection criteria were set to select a representative part of last.fm users and as much as possible avoid users who artificially generate inflated scrobble figures . in this anonymized data",
    "set of two years of artist scrobble timeline , edges of the social network are undirected and timestamped by creation date ( fig .",
    "[ fig : networkgrowth ] ) . note that no edges are ever deleted from the network .",
    "the number of users both in the time series and in the network is 71,000 with 285,241 edges .",
    "the average degree is therefore 8 , while the degree distribution follows shifted power - law as seen in fig .",
    "[ fig : degdist ] @xmath5 with exponent 3.8",
    ".    the time series contain 979,391,001 scrobbles from 2,073,395 artists and were collected between 01 january 2010 and 31 december 2011 .",
    "note that one user can scrobble an artist at different times .",
    "the number of unique user - artist scrobbles is 57,274,158 .",
    "[ fig : scrobble - periodicity ] shows the daily fluctuations in the users scrobbling activity .",
    "the key concept in this paper is a user @xmath6 _ influencing _ another @xmath1 to scrobble @xmath2 .",
    "this happens if @xmath1 scrobbles artist @xmath2 the _ first time _ at time @xmath3 , after @xmath6 _ last scrobbling _ the same artist at some time @xmath7 before .",
    "the time difference @xmath8 is the _ delay _ of the influence , as seen in fig .",
    "[ fig : influence_figure ] .",
    "our key assumption is that , in the above definition , we observe influences between non - friends only by coincidence while some of the observed influence between friends is the result of certain interaction between them .",
    "our goal is to prove that friends indeed influence each other and this effect can be exploited for recommendations .",
    "similar influence definitions are given in @xcite .",
    "as detailed in @xcite , one main difference between these definitions is that in some papers @xmath9 is defined as the first and not the last time when user @xmath6 scrobbles @xmath2 .     by some other user to scrobble @xmath10.,width=5 ]    for smaller influence delay @xmath11 , we are more certain that @xmath1 is affected by the previous scrobble of @xmath6",
    ". the distribution of delay with respect to friends and non - friends will help us in determining the frequency and strength of influence over the last.fm social network .",
    "each time user @xmath1 first scrobbles @xmath2 , we compute the delay @xmath11 for all users @xmath6 who scrobbled @xmath2 before @xmath1 , if such users exist ( see fig .  [ fig : influence_figure ] ) .    out of the 57,274,158 first - time scrobbles of certain artist @xmath2 by some user , we find a friend who scrobbled @xmath2 before 10,993,042 times ( 19% ) .",
    "note that one user can be influenced by more friends therefore the total number of influences is 24,204,977 .",
    "there is no influencing user for the very first scrobbler of @xmath2 in the data set . for other scrobbles",
    "there is always an earlier scrobble by some other user , however that user may not be a friend of @xmath1 .",
    "some of the observed influences may result by pure coincidence , especially when a new album is released or the popularity of the artist increases for some other reason . in order to identify real influence , we compare the frequency of influence from friends and from non - friends along delay @xmath11 as parameter . we compute the cumulative distribution function of all influences as a function of the delay , @xmath12 similarly , @xmath13 stands for the same function among influences between friends only .",
    "[ fig : tempinf ] shows the functions for all users and friends .",
    "the function of friends is above that of all users , i.e.  we observe shorter delay more frequently among friends .     as the function of @xmath3 as in , in case of friends ( @xmath14 ) and non - friends ( @xmath15 ) over the entire timeline ( * top * ) and the first 24 hours ( * bottom*).,width=283 ]     as the function of @xmath3 as in , in case of friends ( @xmath14 ) and non - friends ( @xmath15 ) over the entire timeline ( * top * ) and the first 24 hours ( * bottom*).,width=283 ]    next we quantify the importance of friendship in influencing others as the _ effectivity _ function .",
    "the effectivity at @xmath11 is defined as the increase of influenced scrobbles among friends relative to all users that happen with delay at most @xmath3 : @xmath16 fig .",
    "[ fig : effcurve ] shows the measured effectivity curve in the community .",
    "as expected , @xmath17 is a monotonically decreasing function of @xmath3 .",
    "however , the decrease is slow unlike in some recent influence models that propose exponential decay in time  @xcite .",
    "therefore , we approximate @xmath17 with a slowly decreasing logarithmic function instead of an exponential decay",
    ".    .,width=283 ]",
    "next we use our notion of influence in the task of artist recommendation .",
    "influence depends on time and no matter how relative slow but the effectivity of a friend scrobbling an artist decays . for this reason",
    "the influence based recommendation must be updated more frequently than traditional collaborative filtering methods .",
    "also note that for a given user , our recommendation can be computed very efficiently by a pass over the recent history of friends .",
    "based on the measurements in the previous section , we give a temporal network influence based recommender algorithm . for a user @xmath1 at time @xmath3 , we recommend based on friends scrobbles before @xmath3 .",
    "the predicted score @xmath18 of an artist @xmath2 is based on a function @xmath19 of the time elapsed since the friend @xmath6 scrobbling @xmath2 ( the delay @xmath11 ) and a function @xmath20 of the observed frequency of @xmath6 influencing @xmath1 in the past , as summarized in fig .",
    "[ fig : algorithm ] .",
    "formally the predicted rating becomes @xmath21 where @xmath22 denotes the friends of @xmath1 , @xmath23 is the strength of the influence between users @xmath1 and @xmath6 , and @xmath24 is the weight between user @xmath6 and artist @xmath2 based on the delay .",
    "our implementation depends on the two functions @xmath20 and @xmath19 defined in the next two subsections . in an efficient algorithm , the value of @xmath20 can be stored in memory for all pairs of friends .",
    "alternately , @xmath20 can only be batch updated as the strength between two users are less time sensitive .",
    "the values of @xmath19 , however , depend on the actual time when the recommendation is requested . as @xmath19 quickly decays with @xmath11 , we only need to retrieve the past srobbles of all @xmath6 , the friends of @xmath1 .",
    "this step can be efficiently implemented unless @xmath1 has too many friends . in this latter case",
    "we could select only a few influencing friends based on the values of @xmath20 , otherwise the recommendation is noisy anyway .",
    "our algorithm can hence be implemented even in real time .",
    "the potential of influence decays as time elapses since the influencer @xmath6 scrobbled the given artist @xmath2 .",
    "based on the effectivity curve ( see fig .",
    "[ fig : effcurve ] ) we approximate the strength of the influence with a monotonically decreasing logarithmic function @xmath25 where c is a global constant .",
    "we recommend a recent scrobble by a friend by taking both the recency of the scrobble and the observed relation between the two users .",
    "for each pair of users @xmath1 , the influenced and @xmath6 , the influencer , we define the strength @xmath23 as a step function in time as follows :    * we initialize @xmath26 for all pairs . *",
    "assume that @xmath1 and @xmath6 become friends at time @xmath27 .",
    "we take a step and set @xmath28 . *",
    "if we observe an influence from @xmath6 to @xmath1 at time @xmath29 with time difference @xmath11 , we take another step and increase @xmath23 by @xmath30 where @xmath31 is a global constant . for simplicity",
    "we use the same logarithmic function of the delay as in .    to speed up computations ,",
    "we only consider influence with delay not more than a predefined time frame @xmath32 .",
    "we apply @xmath32 for defining both @xmath20 in and @xmath19 in and hence in both cases we set @xmath33",
    "recommender systems in practice need to rank the best @xmath0 items for the user in real time . in the so - called top-@xmath0 recommendation task @xcite",
    ", potentially we have to compute a new top list for every single scrobble in the test period .",
    "the top-@xmath0 task is different from the standard recommender evaluation settings and needs carefully selected metrics that we describe next . out of the two year",
    "scrobbling data , we use the full first year as training period .",
    "the second year becomes the testing period where we consider scrobbles one by one .",
    "we allow a recommender algorithm to use part or full of the data before the scrobble in question for training and require a ranked top list of artists as output .",
    "we evaluate the given single actual scrobble @xmath2 in question against the recommended top list by computing the discounted cumulative gain with threshold @xmath34 @xmath35 note that in this unusual setting there is a single relevant item and hence for example no normalization is needed as in case of the ndcg measure .",
    "also note that the dcg values will be small since the ndcg of a relative short sequence of actual scrobbles will roughly be equal to the sum of the individual dcg values .",
    "the dcg measured over 100 subsequent scrobbles of different artists can not be more than the ideal dcg , which is @xmath36 in this case ( the ideal value is 6.58 for @xmath37 ) .",
    "hence the dcg of an individual scrobble will on average be less than 0.21 for @xmath38 and 0.33 for @xmath37 .",
    ", as the function of @xmath39.,width=283 ]        in our evaluation we discard infrequent artists from the data set both for efficiency considerations and due to the fact that our item based recommenders will have too little information on them . as seen in fig .",
    "[ fig : artistpop ] , the number of artists with a given scrobble count follow a power law distribution with near 60% of the artists appearing only once . while 90% of the artists gathered less than 20 scrobbles in two years , as seen in fig .",
    "[ fig : artistpop4 ] , they attribute to only less than 10% of the data set . in other words by discarding a large number of artists , we only loose a small fraction of the scrobbles . for efficiency",
    "we only consider artists of frequency more than 14 .    as time elapses , we observe near linear increase in the number of artists that appear in the data set in fig .  [",
    "fig : artistgrowth ] .",
    "this figure shows artists with at least 14 scrobbles separately .",
    "their count grows slower but still we observe a large number of new artist that appear in time and exceed the minimum count of 14 .",
    "very fast growth for infrequent artists may be a result of noise and unidentified artists from e.g.  youtube videos and similar web sources .",
    "we measure two values , 20 and 100 , except for network influence where we also show @xmath40 as the entire ranked list can be efficiently computed in this case.,width=283 ]     for the three basic algorithms , for a time window @xmath32 equal to one week.,width=283 ]     as in section  [ sect : influencefunction].,width=283 ]",
    "we describe one baseline method based on dynamic popularity in section  [ sect : temporal ] and one based on factorization in section  [ sect : svd ] .      given a predefined time frame @xmath32 as in section  [ sect : infrec ] , at time @xmath3 we recommend an artist based on the popularity in time not earlier than @xmath41 but before @xmath3 . in our algorithm",
    "we update the counts and store artists sorted by the current popularity . in one time step",
    "we may either add a new scrobble event or remove the earliest one , corresponding to a count increment or decrement . for globally popular items the sorted order can be maintained by a few changes in the order only . to speed up the procedure",
    ", we may completely ignore part of the long tail and for others update the position only after a sufficiently large change in count .",
    "as future work we could also consider bursts and predict the popularity increase or decrease .      for our factor model based recommender we selected the implementation of funk @xcite .",
    "in the testing period we trained weekly models based on all data before the given week . for each user",
    ", we constructed three times as many negative training instances as positive by selecting random artists with probability proportional to their popularity in the training period .",
    "each testing period lasted one week . for each user , we compute a top list of predictions once for the entire week and evaluate against the sequence of scrobbles in that week .",
    "first we give the daily average dcg@k defined by equation in the second year testing period for the influence based and the two baseline recommenders .",
    "parameter @xmath34 in equation controls the length of the top list considered for evaluation .",
    "in other words , @xmath34 can be interpreted as the size of the list presented to the user .",
    "practically @xmath34 must be small in order not to flood the user with information .",
    "the performance of the three basic methods is shown in fig .  [ fig : dcg - time ] for @xmath37 and 100 and a time window @xmath32 in section  [ sect : influencefunction ] equal to one week .",
    "the dependence on the top list size @xmath34 is measured in fig .",
    "[ fig : dcg - k ] for @xmath42 .",
    "we observe that our influence based method saturates the fastest .",
    "this is due to the fact that the number of items recommended to a given user is usually small unless the user has a large number of very active friends .",
    "for this reason we give blending results not just for the value @xmath37 that we consider practically feasible but also for 100 for comparison .",
    "next we investigate the parameters of the individual algorithms . for a matrix factorization based method we use funk s algorithm @xcite with the following parameters that turned out to perform best in our experiments : learning rate@xmath43 , feature number@xmath44 , and initial feature value@xmath45 .",
    "we re - train the algorithm each week based on all past data .",
    "for this reason we see weekly periodicity in the 10-week timeline of fig .",
    "[ fig : dcg - time ] : the factor model performs best immediately after the training period and slowly degrades in the testing period .",
    "the popularity and influence based methods depend on the time frame : the longer we look back in time , the more artists we can recommend . if we carefully set the rank as a function of time , wider time frames are advantageous for quality but put extra computational load . for the influence recommender @xmath32",
    "is the maximum delay @xmath11 that we consider as influence while for the popularity one @xmath32 is the time interval that we use for frequency computation .",
    "we ran measurements in the second year test period with different time frames @xmath32 and computed the average dcg performance of the recommender systems .",
    "figure  [ fig : timeframes ] shows the average dcg scores with different time frames .",
    "the performance only slowly increases for time frames longer than a day .",
    "in what follows we set @xmath32 to be one week .",
    "the final conclusion of the experiments is drawn by blending the three recommenders as shown in figs .",
    "[ fig : combine - fraction][fig : combine - timeline ] . in our experiments we obtained the best results by linearly combining 1/rank instead of the predicted score . as an advantage of 1/rank , we need no score normalization .",
    "figure  [ fig : combine - fraction ] shows the relative improvement of the recommenders as the function of the blending weights . after blending the recommenders pairwise",
    ", we selected the strongest popularity - factor combinations ( 3:7 and 2:8 ) and blended it with the network recommender .",
    "one can see that the influence recommender not only improves the results of the factor and popularity recommenders , but combines well with their best blended result : the combination of the three methods outperforms the best blend of the factor and popularity models both for dcg@20 and dcg@100 .",
    "the improvement is roughly 4% .",
    "figure  [ fig : combine - timeline ] shows the monthly average dcg@20 and dcg@100 curves in the testing period in case of the different blended recommenders .",
    "each curve shows the result of the best combination of the corresponding recommenders . in each case",
    "we observe stable improvement over the entire testing period .",
    "based on a 70,000 sample of last.fm users , we were able to measure the effect of certain user recommending an artist to her friends .",
    "our results confirm the existence of influence through the social network as opposed to the pure similarity of taste between friends .",
    "we disproved the opinion that homophily could be the reason for friends listening to the same music or behave similarly by constructing a baseline that takes homophily and temporal effects into account . over the baseline recommender",
    ", we achieved a 4% improvement in recommendation accuracy when presenting artists from friends past scrobbles that the given user had never seen before .",
    "our system has very strong time awareness : when we recommend , we look back in the near past and combine friends scrobbles with the baseline methods . the influence from a friend at a given time is certain function of the observed influence in the past and the time elapsed since the friend scrobbled the given artist . in addition , our method can efficiently be computed even in real time .    for future work",
    "we plan to investigate whether the temporal social influence is specific to last.fm dataset or can match to other kind of social network , e.g.  twitter .",
    "we also plan to break down the analysis of influence spread by type of music , by age range , or by artist .",
    "to the last.fm team for preparing us this volume of the anonymized data set that can not be efficiently fetched through the public last.fm api .",
    "j.  cacioppo , j.  fowler , and n.  christakis , `` alone in the crowd : the structure and spread of loneliness in a large social network .",
    ", '' _ journal of personality and social psychology _ , vol .  97 , no .  6 , p.  977",
    ", 2009 .",
    "r.  lyons , `` the spread of evidence - poor medicine via flawed social - network analysis , '' _ statistics , politics , and policy _ , 2(1 ) , p.  2",
    "m.  mcpherson , l.  smith - lovin , and j.  m. cook , `` birds of a feather : homophily in social networks , '' in _ annual review of sociology _ , 27:415444 , 2001 ."
  ],
  "abstract_text": [
    "<S> several recent results show the influence of social contacts to spread certain properties over the network , but others question the methodology of these experiments by proposing that the measured effects may be due to homophily or a shared environment . in this paper </S>",
    "<S> we justify the existence of the social influence by considering the temporal behavior of last.fm users . in order to clearly distinguish between friends sharing the same interest , </S>",
    "<S> especially since last.fm recommends friends based on similarity of taste , we separated the timeless effect of similar taste from the temporal impulses of immediately listening to the same artist after a friend . </S>",
    "<S> we measured strong increase of listening to a completely new artist in a few hours period after a friend compared to non - friends representing a simple trend or external influence . in our experiment to eliminate network independent elements of taste , we improved collaborative filtering and trend based methods by blending with simple time aware recommendations based on the influence of friends . </S>",
    "<S> our experiments are carried over the two - year `` scrobble '' history of 70,000 last.fm users . </S>"
  ]
}