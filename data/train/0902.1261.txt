{
  "article_text": [
    "* 1.1 . seriation problem . *",
    "many applied algorithmic problems involve ordering of a set of objects so that closely coupled objects are placed near each other .",
    "these problems occur in such diverse applications as data analysis , archeological dating , numerical ecology , matrix visualization methods , dna sequencing , overlapping clustering , graph linear arrangement , and sparse matrix envelope reduction .",
    "for example , a major issue in classification and data analysis is to visualize simple geometrical and relational structures between objects .",
    "necessary for such an analysis is a dissimilarity on a set of objects , which is measured directly or computed from a data matrix .",
    "the classical _ seriation problem _ @xcite consists in finding of a simultaneous permutation of the rows and the columns of the dissimilarity matrix with the objective of revealing an underlying one - dimensional structure .",
    "the basic idea is that small values should be concentrated around the main diagonal as closely as possible , whereas large values should fall as far from it as possible .",
    "this goal is best achieved by considering the so - called _ robinson property _",
    "@xcite : a dissimilarity matrix has this property if its values do not decrease when moving away from the main diagonal along any row or column . experimental data usually contain errors , whence the dissimilarity can be measured only approximatively . as a consequence ,",
    "any simultaneous permutation of the rows and the columns of the dissimilarity matrix gives a matrix which fails to satisfy the robinson property , and we are led to the problem of finding a matrix reordering which is as close as possible to a robinson matrix . as an error measure one can use the @xmath5-distance between two matrices .",
    "several heuristics for seriation using robinson matrices have been considered in the literature ( the package seriation @xcite contains their implementation ) . however , these methods either have exponential complexity or do not provide any optimality guarantee of the obtained solutions . in this paper",
    ", we provide a factor 16 algorithm for the np - hard problem of optimally fitting a dissimilarity matrix by a robinson matrix under the @xmath3-error .    * 1.2 .",
    "definitions and the problem .",
    "* let @xmath0 be a set of @xmath6 elements to sequence , endowed with a _ dissimilarity function _",
    "( i.e. , @xmath8 and @xmath9 ) . a dissimilarity @xmath1 and a total order @xmath10 on @xmath0 are _ compatible _ if @xmath11 for any four elements such that @xmath12 then @xmath1 is _ robinsonian _ if it admits a compatible order .",
    "basic examples of robinson dissimilarities are the _ ultrametrics _ and the standard _ line - distance _ between @xmath6 points on the line .",
    "denote by @xmath13 and @xmath14 the sets of all dissimilarities and of all robinson dissimilarities on @xmath15 for @xmath16 define the @xmath3-error by @xmath17 to formulate the corresponding fitting problem , we relax the notions of compatible order and robinson dissimilarity . given @xmath18 a total order @xmath10 on @xmath0 is called @xmath19-_compatible _ if @xmath20 implies @xmath21 an @xmath19-_robinsonian dissimilarity _ is a dissimilarity admitting an @xmath19-compatible order , i.e. , for each pair @xmath22 one can pick a value @xmath23 $ ] so that the resulting dissimilarity @xmath2 is robinsonian . in this paper , we study the following np - hard @xcite optimization problem :    * problem @xmath3-fitting - by - robinson : * _ given @xmath24 find a robinson dissimilarity @xmath25 minimizing the @xmath3-error @xmath26 i.e. , find a least @xmath19 such that @xmath1 is @xmath19-robinsonian . _",
    "related work . * fitting general distances by simpler distances ( alias low - distortion embeddings ) is a classical problem in mathematics , data analysis , phylogeny , and , more recently , in computer science .",
    "we review here only the results about @xmath3-fitting of distances ( this error measure is also known as the _ maximum additive distortion _ or the _ maximum additive two - sided error _",
    "farach et al .",
    "@xcite showed that @xmath3-fitting of a distance @xmath1 by an ultrametric is polynomial .",
    "this result has been used by agarwala et al .",
    "@xcite to design a factor 3 approximation algorithm for @xmath3-fitting of distances by tree - distances , a problem which has been shown to be strongly np - hard @xcite .",
    "a unified and simplified treatment of these results of @xcite using sub - dominants was given in @xcite .",
    "a factor 2 approximation algorithm for the np - hard problem of @xmath3-fitting of a dissimilarity by a line - distance was given by hstad et al .",
    "bdoiu @xcite proposed a constant - factor algorithm for @xmath3-fitting of distances by @xmath27-distances in the plane .",
    "seriation is important in archeological dating , clustering hypertext orderings , numerical ecology , sparse matrix ordering , matrix visualization methods , and dna sequencing @xcite .",
    "a package seriation implementing various seriation methods is described in @xcite .",
    "the most common methods for clustering provide a visual display of data in the form of dendrograms .",
    "dissimilarities in perfect agreement with dendrograms ( i.e. , ultrametrics ) are robinsonian .",
    "generalizing this correspondence , @xcite establish that the robinson dissimilarities can be visualized by hierarchical structures called pyramids .    *",
    "our result and techniques . * the main result of the paper is a factor 16 approximation algorithm for the problem @xmath3-fitting - by - robinson .",
    "the basic setting of our algorithm goes as follows .",
    "first we show that the optimal error @xmath28 belongs to a well - defined list @xmath29 of size @xmath30 as in some other minmax problems , our approximation algorithm tests the entries of @xmath29 , using a parameter @xmath19 , which is the  guess \" for @xmath31 for current @xmath32 the algorithm either finds that no @xmath19-compatible order exist , in which case the input dissimilarity @xmath1 is not @xmath19-robinsonian , or it returns a @xmath33-compatible order .",
    "now , if @xmath19 is the least value for which the algorithm does not return the negative answer , then @xmath34 , and the returned @xmath33-robinsonian dissimilarity has @xmath3-error at most @xmath35 establishing that we have a factor @xmath36 approximation algorithm .    for @xmath32 a canonical binary relation @xmath37 is computed so that any @xmath19-compatible total order refines @xmath37 or its dual .",
    "if @xmath37 is not a partial order , then the algorithm halts and returns the negative answer .",
    "if @xmath37 is a total order , then we are done .",
    "otherwise , we select a maximal chain @xmath38 of the partial order @xmath37 and search to fit each element of @xmath39 between two consecutive elements of @xmath40 we say that @xmath41 form a _",
    "hole _ @xmath42 and that all elements @xmath43 assigned between @xmath44 and @xmath45 are _ located _ in @xmath46 this distribution of the elements to holes is performed so that ( a ) all elements @xmath47 of @xmath48 located in the same hole @xmath42 must  fit \" in this hole , i.e. , for all @xmath49 one of the orders @xmath50 or @xmath51 must be @xmath52-compatible for some @xmath53 partitioning @xmath48 into sets @xmath54 @xmath55 is not obvious .",
    "even if such a partition is available , we can not directly apply a recursive call to each @xmath47 , because ( b ) the elements located outside the hole @xmath42 will impose a certain order on the elements of @xmath47 and , since we tolerate some errors , ( c ) we can not ensure that @xmath47 is exactly the set of elements which must be located in @xmath42 in some @xmath19-compatible total order . to deal with ( a )",
    ", we give a classification of admissible and pairwise admissible holes for elements of @xmath56 this allows to show that , if we tolerate a @xmath57-error , then each element @xmath43 can be located in the leftmost or rightmost admissible hole for @xmath58 ( we call them _ bounding holes _ of @xmath58 ) .",
    "both locations are feasible unless several elements have the same pair of bounding holes .",
    "for @xmath59 let @xmath60 be the set of all elements of @xmath48 having @xmath42 and @xmath61 as bounding holes . to deal with ( b ) and ( c ) , on each set @xmath60 we define a directed graph @xmath62 the strongly connected components ( which we call _ cells _ ) of @xmath63 have the property that in any @xmath19-compatible order all elements of the same component must be located in the same hole .",
    "in fact the cells ( and not the sets @xmath47 ) are the units to which we apply the recursive calls in the algorithm .",
    "to decide in which hole @xmath42 or @xmath61 to locate each cell of @xmath63 and to define the relative order between the cells assigned to the same hole , we define another directed graph @xmath64 whose vertices are the cells of @xmath63 in such a way that ( i ) if some @xmath64 does not admit a partition into two acyclic subgraphs then no @xmath19-compatible order exist and ( ii ) if @xmath64 has a partition into two acyclic subgraphs @xmath65 and @xmath66 then all cells of @xmath65 will be located in @xmath67 all cells of @xmath68 will be located in @xmath69 and the topological ordering of each of these graphs defines the relative order between the cells . to partition @xmath64 into two acyclic subgraphs ( this problem in general is np - complete @xcite ) , we investigate the specific properties of graphs in question , allowing us to define a 2-sat formula @xmath70 which is satisfiable if and only if the required bipartition of @xmath71 exists .",
    "finally , to locate in each hole @xmath42 the cells coming from different subgraphs @xmath72 and @xmath73 with @xmath74 we use the following separation rule : the cells of @xmath75 are located to the left of the cells of @xmath65 and the cells of @xmath65 are located to the right of the cells of @xmath76 due to space constraints , all missing proofs are given in the full version @xcite .",
    "the @xmath10-restricted problem is obtained from @xmath3-fitting - by - robinson by fixing the total order @xmath10 on @xmath15 let @xmath77 be a dissimilarity defined by setting @xmath78 for all @xmath22 with @xmath79 ( we suppose here that @xmath80 for any @xmath81 ) .",
    "let @xmath82 and let @xmath83 be the ( robinsonian ) dissimilarity obtained from @xmath77 by setting @xmath84 for all @xmath85 then , the following holds :    [ superdom ] for a total order @xmath10 on @xmath0 and @xmath86 , @xmath83 minimizes @xmath87    proposition [ superdom ] establishes that an optimal solution of the problem @xmath3-fitting - by - robinson can be selected among @xmath88 robinsonian dissimilarities of the form @xmath89 in the full version , we show that the natural heuristic similar to the factor 3 approximation algorithms of hstad et al .",
    "@xcite and agarwala et al .",
    "@xcite ( which instead of @xmath88 total orders considers only @xmath6 orders ) does not provide a constant - factor approximation algorithm for our problem . proposition [ superdom ] also implies that the optimal error @xmath28 in @xmath3-fitting - by - robinson belongs to a well - defined list @xmath90 of size @xmath30    given @xmath86 and @xmath32 we define a partial order @xmath37 such that every @xmath19-compatible total order @xmath10 refines either @xmath37 or its dual . for this , we set @xmath91 for two arbitrary elements @xmath92 and close @xmath37 using the properties of partial orders and the following observation : _ if @xmath93 then in all @xmath19-compatible with @xmath1 orders @xmath94 must be located between @xmath58 and @xmath95 _ in this case , if we know that two of the elements @xmath96 are in relation @xmath37 then we can extend this relation to the whole triplet .",
    "for example , if we know that @xmath97 then we conclude that also @xmath98 and @xmath99 .",
    "if the resulting @xmath37 is not a partial order , then @xmath1 does not admit an @xmath19-compatible total order .",
    "so , further let @xmath37 be a partial order",
    ". for two disjoint subsets @xmath100 of @xmath101 set @xmath102 if @xmath103 for any @xmath104 and @xmath105 we write @xmath106 if neither @xmath107 nor @xmath108 hold . for two numbers @xmath109 and @xmath110 we will use the following notations ( i ) @xmath111 if @xmath112 , ( ii ) @xmath113 if @xmath114 , and ( iii ) @xmath115 if @xmath116 .",
    "we continue with basic properties of the canonical partial order @xmath37 : _ if @xmath117 @xmath118 @xmath119 @xmath120 and @xmath121 then : @xmath122 @xmath123 ; @xmath124 @xmath125 . _",
    "* 3.1 . admissible holes . *",
    "let @xmath126 be a maximal chain of the partial order @xmath37 . for notational convenience ,",
    "we assume that all elements of @xmath48 must be located between @xmath127 and @xmath128 ( @xmath127 and @xmath128 can be artificially added ) ; this way , every element of @xmath48 must be located in a hole .",
    "let @xmath129 be the union of all holes comprised between @xmath130 for @xmath131 denote by @xmath132 the union of all holes @xmath42 such that @xmath133 or @xmath134 if @xmath135 the holes @xmath42 and @xmath61 are called _ bounding holes _ ; see fig .",
    "1 ( note that @xmath136 and @xmath137 for @xmath138 all other holes of @xmath132 are called _ inner holes_. since @xmath139 @xmath132 contains at least two holes .",
    "the hole @xmath140 of @xmath132 is @xmath58-_admissible , _ if the total order on @xmath141 obtained from @xmath37 by adding the relation @xmath142 is @xmath19-compatible with @xmath1 .",
    "it can be easily shown that the bounding holes of @xmath132 must be @xmath58-admissible .",
    "denote by @xmath143 the mean value of @xmath144 and @xmath145 we call @xmath146 the _ size _ of the hole @xmath147 then the following holds :    [ sizehole ] if an inner hole @xmath140 of @xmath132 is @xmath58-admissible , then @xmath148 @xmath149 in particular , @xmath150 more generally , for all @xmath151i , j[,$ ] we have @xmath152    * 3.2 .",
    "pairwise admissible holes .",
    "* a pair @xmath153 of holes is called @xmath154-_admissible _ if @xmath140 is @xmath58-admissible , @xmath155 is @xmath156-admissible , and the total order on @xmath157 obtained by adding to @xmath37 the relations @xmath158 and @xmath159 is @xmath52-compatible .",
    "denote by @xmath160 the set of all @xmath58-admissible holes @xmath140 so that for each @xmath161 @xmath162 , there exists an @xmath156-admissible hole @xmath155 such that @xmath163 is a @xmath164-admissible pair .",
    "further we can assume that for any @xmath43 the bounding holes of @xmath165 belong to @xmath166 otherwise , if say @xmath167 then @xmath168 in any @xmath19-compatible total order @xmath10 extending @xmath169 thus we can augment the canonical partial order @xmath37 by setting @xmath170 and by reducing the segments @xmath132 accordingly .",
    "next we investigate the pairwise admissible locations of @xmath58 and @xmath156 in function of the mutual geometric location of the segments @xmath132 and @xmath171 and of the values @xmath172 and @xmath173 we distinguish the following cases : * ( h1 ) * @xmath174 * ( h2 ) * @xmath132 and @xmath171 are disjoint ; * ( h3 ) * @xmath132 and @xmath171 overlap in at least 2 holes ( @xmath175 ) ; * ( h4 ) * @xmath132 and @xmath171 overlap in a single hole ( @xmath176 ) ; * ( h5 ) * @xmath171 is a proper subinterval of @xmath132 ( @xmath177 ) .",
    "this classification of pairs @xmath178 of @xmath48 is used in the design of our approximation algorithm .",
    "also the proofs of several results employ a case analysis based on ( h1)-(h5 ) .",
    "we continue with the following result .",
    "it specifies the constraints on pairs of elements , each element of @xmath48 can be located in one of its bounding holes .",
    "[ pairwise_admissible ] for two elements @xmath179 , any location of @xmath58 in a bounding hole of @xmath165 and any location of @xmath156 in a bounding hole of @xmath180 is @xmath181-admissible , unless @xmath182 and @xmath183 or @xmath184 subject to the following three constraints : if @xmath185 @xmath58 and @xmath156 are located in a common bounding hole , then @xmath58 is between @xmath156 and @xmath186 if @xmath187 then @xmath188 implies @xmath189 if @xmath182 , @xmath58 and @xmath156 are located in the same bounding hole , and @xmath190 then @xmath156 is between @xmath58 and @xmath45 . if @xmath182 and @xmath191 then the only @xmath164-admissible locations are the two locations of @xmath58 and @xmath156 in different bounding holes . if @xmath182 and @xmath192 then any @xmath164-admissible location is in common @xmath58- and @xmath156-admissible holes",
    "in this section , we describe how , for each hole @xmath42 , to compute the set @xmath47 of elements of @xmath48 which will be located in @xmath46 this set consists of some @xmath58 such that @xmath42 is a bounding hole of @xmath193 additionally , each @xmath47 will be partitioned into an ordered list of cells , to which we perform recursive calls .",
    "let @xmath60 consist of all @xmath43 such that @xmath194 the sets @xmath60 form a partition of @xmath56 in the next subsections , we will show how to partition each @xmath60 into two subsets @xmath195 and @xmath196 so that @xmath195 will be located in @xmath42 and @xmath197 in @xmath198 see fig",
    "blocks , cells , and clusters . *",
    "two elements @xmath199 are called _ linked _ ( _ separated _ ) if in all @xmath164-admissible locations @xmath58 and @xmath156 must be placed in the same hole ( in distinct bounding holes ) .",
    "two subsets @xmath200 and @xmath201 of @xmath60 must be _ separated _ if all @xmath202 and @xmath203 are separated .",
    "let @xmath204 and @xmath205 be the sets of all pairs @xmath199 such that @xmath206 resp .",
    ", @xmath207 by proposition [ pairwise_admissible ] , all pairs of @xmath204 are separated and all pairs of @xmath205 are linked . since  be linked \" is an equivalence relation , all vertices of the same connected component ( called _ block _ ) of the graph @xmath208 are linked .",
    "we continue by investigating in which cases two blocks of @xmath209 are separated or linked",
    ". for @xmath210 set @xmath211 iff * ( a1 ) * @xmath212 or * ( a2 ) * @xmath213 and there exists @xmath214 such that @xmath215 and @xmath216 if @xmath217 satisfy * ( a2 ) * , then it can be shown that @xmath156 and @xmath94 are _ strongly separated _",
    ", i.e. , @xmath218 additionally , we show that if @xmath219 , then @xmath220 in all @xmath19-compatible orders @xmath10 such that @xmath221 and @xmath222 in all @xmath19-compatible orders @xmath10 such that @xmath223 .    on @xmath60",
    "we define a directed graph @xmath224 we draw an arc @xmath225 iff * ( l1 ) * @xmath219 and @xmath226 belong to a common block of @xmath209 or * ( l2 ) * @xmath227 if * ( l2 ) * is satisfied , then @xmath228 and @xmath229 hold .",
    "the strongly connected components of @xmath63 are called _",
    "every block is a disjoint union of cells . indeed ,",
    "if @xmath226 belong to a common cell , let @xmath230 be a directed path of @xmath231 from @xmath58 to @xmath95 pick any arc @xmath232 of @xmath230 . if it has type * ( l2 ) * , then @xmath233 otherwise , if @xmath234 has type * ( l1 ) * , then @xmath235 and @xmath236 belong to a common block .",
    "thus the ends of all arcs of any path between @xmath226 belong to a common block .",
    "[ separate - between ] let @xmath237 if @xmath238 belong to a common cell , but @xmath239 and @xmath156 belong to distinct blocks , then there does not exist an @xmath19-compatible order such that @xmath240    [ r4 ] for cells @xmath241 if @xmath242 @xmath243 and @xmath244 @xmath245 then @xmath246 and @xmath247 must be separated .    let @xmath248 be the blocks containing @xmath249 if @xmath250 as @xmath219 and @xmath245 they are ( l1)-arcs , hence @xmath225 and @xmath251 this is impossible since @xmath239 and @xmath252 belong to distinct cells",
    ". thus @xmath253 by lemma [ separate - between ] , if we locate @xmath254 in the same bounding hole @xmath255 , either @xmath256 or @xmath257 holds . on the other hand , @xmath244 @xmath258",
    "imply that @xmath79 and @xmath259 thus @xmath246 and @xmath247 must be separated .",
    "now , let @xmath260 be a graph having cells as vertices and an edge between two cells @xmath261 iff * ( s1 ) * there exist @xmath210 @xmath58 in the same block as @xmath246 and @xmath156 in the same block as @xmath247 such that @xmath262 or * ( s2 ) * there exist @xmath238 in the same block as @xmath246 and @xmath263 in the same block as @xmath247 such that each pair @xmath264 and @xmath265 belong to a common cell , and @xmath266 by proposition [ pairwise_admissible ] and lemma [ r4 ] , in cases * ( s1 ) * and * ( s2 ) * the sets @xmath246 and @xmath247 must be separated .",
    "the graph @xmath260 must be bipartite , otherwise no @xmath19-compatible order exist .",
    "now , for each connected component of @xmath260 consider its canonical bipartition @xmath267 , and draw an edge between any two cells , one from @xmath268 and another from @xmath269 denote the obtained graph also by @xmath270 call the union of cells from @xmath268 ( or from @xmath271 ) a _ cluster_. the clusters @xmath272 and @xmath273 of @xmath268 and @xmath271 are called _",
    "twins_. from the construction , we immediately obtain that all elements of a cluster are linked and two twin clusters are separated . a connected bipartite component @xmath274 of @xmath260",
    "is called a _ principal component _ if there exists @xmath275 and @xmath276 such that @xmath58 and @xmath156 are strongly separated .",
    "* 4.2 . partitioning @xmath60 into @xmath277 and @xmath278 *",
    "we describe how to partition @xmath60 into the subsets @xmath277 and @xmath278 for this , we define a directed graph @xmath64 having cells as vertices , and an arc @xmath279 with tail @xmath246 and head @xmath280 exists iff one of the following conditions is satisfied : * ( g1 ) * @xmath246 and @xmath280 belong to twin clusters of @xmath281 * ( g2 ) * @xmath246 and @xmath280 are not connected by ( g1)-arcs and there exist @xmath282 and @xmath283 such that @xmath284 * ( g3 ) * @xmath246 and @xmath280 are not connected by ( g1)- or ( g2)-arcs and there exist @xmath285 and @xmath214 such that @xmath286 and @xmath287 a head of a ( g3)-arc is called a ( g3)-_cell_. a ( g@xmath288)-_cycle _ is a directed cycle of @xmath64 with arcs of type * ( g@xmath288 ) * , @xmath289 the ( g1)-cycles are exactly the cycles of length 2 .",
    "a _ mixed cycle _ is a directed cycle containing arcs of types * ( g2 ) * and * ( g3)*. finally , an _ induced cycle _ is a directed cycle @xmath290 such that for two cells @xmath291 we have @xmath279 if and only if @xmath280 is the successor of @xmath246 in @xmath292 our next goal is to establish that either the set of cells can be partitioned into two subsets such that the subgraphs of @xmath71 induced by these subsets do not contain directed cycles or no @xmath19-compatible order exist .",
    "deciding if a directed graph can be partitioned into two acyclic subgraphs is np - complete @xcite . in our case",
    ", this can be done in polynomial time by exploiting the structure of @xmath71 .",
    "[ cycle ] if @xmath293 is a directed cycle of @xmath64 , then for any @xmath19-compatible order , @xmath290 has a cell located in the hole @xmath42 and a cell located in the hole @xmath294    the assertion is obvious if @xmath290 is a ( g1)-cycle .",
    "so , suppose that all arcs of @xmath290 have type * ( g2 ) * or * ( g3)*. the definition of cells implies that @xmath290 contains two consecutive cells , say @xmath295 and @xmath296 , which belong to different blocks .",
    "suppose that there exists an @xmath19-compatible order @xmath10 such that no element of @xmath297 is located in the hole @xmath298 $ ] , i.e. , @xmath299",
    ". in each @xmath300 pick two elements @xmath301 such that @xmath302 then @xmath303 for all @xmath304 we divide the cells of @xmath290 into groups : a group consists of all consecutive cells of @xmath290 belonging to one and the same block .",
    "the first group starts with @xmath305 while the last group ends with @xmath306 we assert that if @xmath307 and @xmath308 are two consecutive groups of @xmath309 , then @xmath310 ( all indices here are modulo @xmath311 ) .",
    "indeed , pick @xmath312 and @xmath313 since @xmath314 and @xmath315 belong to different blocks while each of these pairs belong to a common cell , applying lemma [ separate - between ] to each of the triplets of the quadruplet @xmath316 we infer that in the total order @xmath10 none of @xmath317 is located between @xmath318 and @xmath235 and none of @xmath319 is located between @xmath320 and @xmath321 since @xmath322 we conclude that @xmath323 yielding @xmath324 now , consider the cell @xmath325 the element @xmath326 must be located to the right of @xmath327 therefore to the right of @xmath328 since @xmath329 and @xmath330 belong to different blocks , we can show that @xmath331 by using exactly the same reasoning as for the cells @xmath300 and @xmath332 continuing this way , we obtain the required relationship @xmath333 this establishes the assertion .",
    "suppose that @xmath334,[i_1 + 1,i_2],\\ldots,[i_r+1,k]$ ] are the indices of cells defining the beginning and the end of each group . from our assertion we infer that @xmath335 contrary that @xmath10 is a total order .",
    "[ g3_path ] if @xmath336 is a ( g3)-arc and @xmath280 belongs to a principal component , then @xmath280 and @xmath246 belong to the same cluster",
    ". in particular , @xmath64 does not contain ( g3)-cycles or no @xmath19-compatible order exist .",
    "moreover , @xmath64 does not contain ( g2)-cycles .",
    "let @xmath337 be a strongly separated pair with @xmath338 since @xmath336 is a ( g3)-arc , there exist @xmath339 and @xmath283 such that @xmath258 is an ( a2)-arc . then there exists @xmath340 such that @xmath341 is strongly separated .",
    "if @xmath342 and @xmath343 belong to different principal components , then there exists a ( g2)-arc from @xmath246 to @xmath280 or from @xmath280 to @xmath246 . in the first case ,",
    "@xmath280 and @xmath246 obey * ( s2 ) * , thus we can not have a ( g3)-arc from @xmath280 to @xmath344 analogously , in the second case , we deduce that we have at the same time a ( g3)-arc and a ( g2)-arc from @xmath280 to @xmath344 this is impossible , so @xmath280 and @xmath246 belong to a common principal component .",
    "now , if @xmath64 contains a ( g3)-cycle , then the first assertion implies that all its cells belong to the same cluster , and lemma [ cycle ] yields that no @xmath19-compatible order exist .",
    "finally , let @xmath293 be a ( g2)-cycle . in each @xmath345",
    "pick @xmath346 so that @xmath347 since there is no * ( g2 ) * or * ( g3 ) * arc from @xmath348 to @xmath345 we get @xmath349 yielding @xmath350 thus @xmath351 for @xmath352 then @xmath353 for even @xmath311 and @xmath354 for odd @xmath355 a contradiction .    to complete the bipartition of cells into two acyclic subgraphs of @xmath64 , it remains to deal with induced mixed cycles .",
    "the following results precise their structure .",
    "[ g2 ] any induced mixed cycle @xmath290 of @xmath64 contains one or two ( g2)-arcs , and if @xmath309 contains two such arcs , then they are consecutive .",
    "[ g3g2 ] let @xmath356 be a ( g3)-arc , @xmath357 be a ( g2)-arc , and suppose that there is no ( g2)-arc from @xmath246 to @xmath358 if @xmath359 do not belong to distinct twin clusters and @xmath360 do not belong to the same cluster , then @xmath280 and @xmath246 must be separated .",
    "thus a mixed cycle @xmath290 contains either one ( g2)-arc ( @xmath290 is a 1-_cycle _ ) or two consecutive ( g2)-arcs ( @xmath290 is a 2-_cycle _ ) , all other arcs of @xmath290 being ( g3)-arcs . by lemma [ g3_path ] ,",
    "the heads of all ( g3)-arcs of @xmath290 are ( g3)-cells of the same cluster @xmath361 .",
    "then we say that the cycle @xmath290 _ intersects _ the cluster @xmath362 for a ( g2)-arc @xmath363 and a cluster @xmath361 , we show how to detect if there exists a 1- or 2-cycle @xmath290 passing via @xmath363 and intersecting @xmath361 .",
    "we consider the case of 1-cycles",
    ". then @xmath364 must be a ( g3)-cell of @xmath362 note that an induced 1-cycle can not contain cells @xmath246 such that @xmath365 is a * ( g2 ) * or * ( g3)*-arc . hence , we can remove all such cells of @xmath361 .",
    "analogously , we remove all cells @xmath246 so that @xmath356 is an arc . in the subgraph induced by the remaining cells of @xmath366 we search for a shortest directed path @xmath367 so that the first arc @xmath368 and the last arc @xmath369 of this path are ( g3)-arcs . this can be done in polynomial time by testing all possible choices for @xmath295 and @xmath296 and applying for each pair a shortest path finding algorithm in an acyclic graph .",
    "if such a path @xmath370 does not exist , then no required induced cycle @xmath290 exist",
    ". otherwise , the path @xmath370 together with the arc @xmath363 define an induced cycle @xmath290 having exactly one ( g2)-arc .",
    "indeed , if @xmath371 is a * ( g2 ) * or * ( g3)*-arc and @xmath372 , since the subgraph induced by @xmath361 is acyclic , we must have @xmath373 this contradicts the minimality of the path @xmath374 so , the resulting cycle is indeed induced .",
    "it remains to note that @xmath290 does not contain other ( g2)-arcs , because by lemma [ g2 ] in an induced cycle the ( g2)-arcs are consecutive .",
    "analogously , we can decide if there exists a 2-cycle passing via @xmath363 and intersecting @xmath361 , and having a second ( g2)-arc of the form @xmath375 or @xmath376 therefore , we have the following result :    [ induced - mixed ] for a ( g2)-arc @xmath363 and a cluster @xmath366 , one can decide in polynomial time if there exists an induced 1- or 2-cycle @xmath290 passing via @xmath356 and intersecting @xmath362    for a cell @xmath280 , let @xmath377 be the set of ( g2)-arcs @xmath363 belonging to a 1-cycle intersecting a cluster @xmath361 not containing @xmath280 .",
    "let @xmath378 be the set of ( g2)-arcs @xmath363 belonging to a 2-cycle @xmath290 intersecting a cluster @xmath361 not containing @xmath280 and passing via @xmath363 so that the arc of @xmath309 entering @xmath364 is a ( g3)-arc . in both cases @xmath364 belongs to @xmath361 : @xmath364 is a head of a ( g3)-arc of @xmath309 , and all such heads belong to @xmath361 .",
    "finally , let @xmath379 be the set of ( g2)-arcs @xmath380 belonging to a 2-cycle @xmath290 intersecting a cluster @xmath381 , so that @xmath280 belongs to @xmath361 and the arc of @xmath290 entering @xmath280 has type * ( g2)*. fig .",
    "2 illustrates this classification .",
    "for each cell @xmath280 of @xmath71 we introduce a binary variable @xmath382 satisfying the following constraints : * ( f1 ) * @xmath383 if @xmath261 belongs to the same cluster ; * ( f2 ) * @xmath384 if @xmath261 belong to twin clusters ; * ( f3 ) * @xmath385 if the arc @xmath363 belongs to @xmath386 * ( f4 ) * @xmath385 if the arc @xmath387 belongs to @xmath379 .",
    "define a 2-sat formula @xmath70 by replacing every constraint @xmath388 by two clauses @xmath389 and @xmath390 and every constraint @xmath391 by two clauses @xmath392 and @xmath393 .",
    "[ acyclic ] if the 2-sat formula @xmath70 admits a satisfying assignment @xmath200 , then the sets @xmath394 and @xmath395 define a partition of @xmath64 into two acyclic subgraphs .",
    "conversely , given an @xmath19-compatible order on @xmath101 the assignment @xmath200 defined by setting @xmath396 if @xmath280 is located in @xmath67 @xmath397 if @xmath280 is located in @xmath69 and @xmath398 if @xmath246 and @xmath247 are located in a common inner hole , is a true assignment for @xmath399 in particular , if @xmath70 is not satisfiable , then no @xmath19-compatible order exist .",
    "let @xmath200 be a true assignment of @xmath70 and the partition @xmath400 of @xmath60 be defined as above .",
    "denote by @xmath65 and @xmath68 the subgraphs induced by @xmath277 and @xmath278 * ( f1 ) * forces every cluster to be included in one set . *",
    "( f2 ) * implies that the twin clusters are separated .",
    "hence @xmath401 and @xmath68 do not contain ( g1)-cycles : if @xmath280 and @xmath246 are the two cells of a ( g1)-cycle , then @xmath402 yields @xmath403 by lemma [ g3_path ] , @xmath64 does not contain ( g2)-cycles . since the cells of a ( g3)-cycle are contained in the same cluster and each cluster induces an acyclic subgraph , @xmath65 and @xmath404 do not contain ( g3)-cycles as well .",
    "now , let @xmath404 contain a mixed cycle",
    ". then it also contains an induced mixed cycle @xmath292 from lemma [ g2 ] we infer that @xmath290 has either one ( g2)-arc @xmath363 or exactly two consecutive ( g2)-arcs @xmath405 . in the first case , we conclude that @xmath363 belongs to @xmath406 thus * ( f3 ) * yields @xmath407 , contrary to the fact that @xmath408 analogously , in the second case , we deduce that either @xmath407 and the arc @xmath363 belongs to @xmath378 or @xmath409 and the arc @xmath357 belongs to @xmath410 whence @xmath411 then we obtain a contradiction with the assumption that @xmath412 this shows that the subgraphs @xmath65 and @xmath68 obtained from the true assignment @xmath200 of @xmath70 are acyclic .",
    "conversely , let @xmath200 be an assignment obtained from an @xmath19-compatible order as defined in the proposition .",
    "we assert that @xmath200 is a true assignment for @xmath413 i.e. , it satisfies the constraints * ( f1)-(f4)*. this is obvious for constraints * ( f1 ) * and * ( f2 ) * , because if two cells @xmath261 belong to the same cluster , then they will be located in the same hole and we must have @xmath414 if @xmath246 and @xmath247 belong to distinct twin clusters , then they must be separated , therefore the unique @xmath19-admissible location of @xmath246 and @xmath247 will be in different bounding holes , thus @xmath415 now , pick an arc @xmath363 which belongs to @xmath416 if @xmath363 belongs to @xmath406 then there exists a 1-cycle @xmath290 passing via @xmath363 and intersecting a cluster @xmath361 .",
    "since all cells of @xmath290 , except @xmath280 , are heads of ( g3)-arcs , they all belong to @xmath361 , i.e. , they have the same value in the assignment . by lemma",
    "[ cycle ] , @xmath280 must be separated from @xmath364 ( namely @xmath280 and @xmath246 must be located in different bounding holes ) , showing that @xmath417 . if @xmath418 belongs to @xmath419 then let @xmath290 be a 2-cycle passing via @xmath363 and intersecting the cluster @xmath361 not containing @xmath420 additionally , we know that the arc @xmath421 of @xmath290 entering @xmath364 is a ( g3)-arc , thus @xmath364 belongs to @xmath422 since @xmath246 can not belong to the twin cluster of @xmath366 ( this will contradicts that @xmath421 is a ( g3)-arc ) and since @xmath280 does not belong to @xmath423 from lemma [ g3g2 ] we infer that @xmath364 and @xmath280 are separated , thus @xmath417",
    ". finally , let @xmath380 belong to @xmath424 then there exists a 2-cycle @xmath290 passing via @xmath380 and intersecting the cluster @xmath361 , such that @xmath280 belongs to @xmath361 and the arc of @xmath290 entering @xmath280 has type * ( g2)*. since all cells of @xmath290 except @xmath280 and @xmath364 are heads of ( g3)-arcs , they all belong to @xmath361 . since @xmath280 also belongs to this cluster , by lemma [ cycle ] , @xmath364 must be separated from the remaining cells of @xmath290 , yielding @xmath425 hence @xmath200 satisfies the constraints * ( f1)-(f4)*. this shows , in particular , that if @xmath70 is not satisfiable , then no @xmath19-compatible order exist .    *",
    "4.3 . sorting the cells of @xmath277 and @xmath278",
    "* let @xmath65 and @xmath68 be the subgraphs of @xmath64 induced by the sets @xmath277 and @xmath426 obtained from the true assignment of the 2-sat formula @xmath399 we will locate all cells of @xmath277 in the hole @xmath42 and all cells of @xmath426 in the hole @xmath61 of @xmath427 the elements from two cells @xmath261 located in the same hole will not be mixed , i.e. , @xmath246 will be placed to the right of @xmath428 or vice versa .",
    "to specify the total order among cells , we use that @xmath401 and @xmath68 are acyclic , therefore each of them admit a topological order .",
    "we compute a topological order @xmath429 on the cells of @xmath426 and a dual topological order @xmath430 on the cells of @xmath277 .",
    "we locate the cells of @xmath426 in @xmath61 and the cells of @xmath277 in @xmath431 according to these orders .",
    "the following two results relay the topological orders on the cells with the order on the distances between elements from such cells .",
    "[ ordre - c_i ] let @xmath261 be two cells of @xmath278 if @xmath432 in the topological order , then for any @xmath433 , @xmath434 and @xmath435 , we have @xmath436 and @xmath437    since @xmath261 belong to @xmath438 they are not connected by ( g1)-arcs .",
    "since @xmath432 in the topological order , there is no arc from @xmath247 to @xmath246 .",
    "as @xmath439 is not a ( g2)-arc , we must have @xmath440 as @xmath439 is not a ( g3)-arc , we obtain @xmath437    [ ordre - c_ii ] let @xmath441 be three distinct cells of the graph @xmath442 if the algorithm returns the total order @xmath10 and @xmath443 then for any @xmath444 or @xmath445 and @xmath446 we have @xmath447    after fixing the relative position of each cell @xmath280 of @xmath448 we make a recursive call to @xmath420 for this , we update the canonical order @xmath37 in the following way : if @xmath280 is located in @xmath438 we set @xmath449 if @xmath244 otherwise , if @xmath280 is located in @xmath450 we set @xmath451 if @xmath452 since @xmath453 and @xmath454 are dual , if we apply to them the  closing \" rules , we will obtain two dual partial orders , denoted also by @xmath453 and @xmath455 the restriction on @xmath280 of every @xmath19-compatible order @xmath10 on @xmath0 is an extension of @xmath453 or @xmath456 since all elements of @xmath280 will be placed in the same hole , either @xmath457 or @xmath458 if @xmath459 , then @xmath460 for all @xmath461 such that @xmath462 hence @xmath10 is a linear extension of @xmath453 . therefore ,",
    "if the recursive call to a cell @xmath280 returns the answer  not \" , then no @xmath19-compatible total order on @xmath0 exist .",
    "else , it returns a total order on @xmath280 , which is @xmath33-compatible by induction hypothesis .",
    "then , the total order between the cells of @xmath64 and the total orders on cells are concatenated to give a single total order @xmath10 on @xmath463    * 4.4 . defining the total order on @xmath47 . * recall that @xmath47 is the set of all elements of @xmath48 located in the hole @xmath46 according to our algorithm , @xmath47 is the disjoint union of all sets @xmath277 @xmath464 and @xmath465 @xmath466 .",
    "we just defined a total order between the cells of each of the sets @xmath467 and applying recursion we defined a total order on the elements of each cell . to obtain a total order on the whole set @xmath47 it remains to define a total order between the sets @xmath277 @xmath464 and @xmath465 @xmath468 for this",
    ", we locate each @xmath465 @xmath466 to the left of each @xmath277 @xmath469 given two sets @xmath470 @xmath471 , we locate @xmath465 to the left of @xmath472 if and only if @xmath473 i.e. , iff @xmath474 analogously , given @xmath475 @xmath476 , we locate @xmath477 to the right of @xmath277 if and only if @xmath478 i.e. , iff @xmath479 this location is justified by the proposition [ pairwise_admissible ] and is illustrated in fig .",
    "we have collected all necessary tools to describe the algorithm .",
    "it consists of three procedures @xmath3-fitting_by_robinson , refine , and partition_and_sort .",
    "the main procedure @xmath3-fitting_by_robinson constructs the sorted list @xmath29 of feasible values for the optimal error @xmath28 .",
    "its entries are considered in a binary search fashion and the algorithm returns the smallest value @xmath480 occurring in this search for which the answer `` not '' is not returned ( i.e. , the least @xmath19 for which a @xmath33-compatible total order on @xmath0 exists ) . to decide , if , for a given @xmath19 , such an order exists , the procedure refine@xmath481 constructs ( and/or updates ) the canonical partial order @xmath37 and computes a maximal chain @xmath482 of @xmath483 for each element @xmath484 refine computes the set @xmath160 of all @xmath58-holes which participate in @xmath164-admissible locations for all @xmath485 and defines the segment @xmath132 . for",
    "each pair @xmath486 refine constructs the set @xmath60 and makes a call of the procedure partition_and_sort@xmath487 which returns the bipartition @xmath488 of @xmath60 and a total order on the cells of @xmath277 and @xmath278 then refine concatenates in a single total order on cells the total orders on cells coming from different sets assigned to the same hole .",
    "after this , refine is recursively applied to each cell occurring in some graph @xmath442 the returned total orders on cells are concatenated into a single total order @xmath10 on @xmath0 according to the total orders between cells and between holes ; then @xmath10 is returned by the algorithm @xmath3-fitting_by_robinson .",
    "the procedure partition_and_sort constructs the graphs @xmath209 and @xmath489 using these graphs , @xmath60 is partitioned into blocks and cells , then graph @xmath260 and its clusters are constructed . using the cells ,",
    "the directed graph @xmath490 is constructed .",
    "if @xmath260 is not bipartite or @xmath490 contains ( g3)-cycles , then partition_and_sort returns the answer `` not '' . otherwise , for each cell @xmath280 and each cluster @xmath361 , it tests if there exists a 1-cycle and/or a 2-cycle passing via @xmath280 and intersecting @xmath361 . consequently , for each cell @xmath280 , the lists @xmath491 and @xmath379 of ( g2)-arcs are computed .",
    "these lists are used to construct the 2-sat formula @xmath413 which is solved by the algorithm of @xcite .",
    "if @xmath70 admits a true assignment @xmath492 then @xmath493 and @xmath395 define a bipartition of @xmath60 into two acyclic subgraphs @xmath494 of @xmath442 then partition_and_sort locates the cells from @xmath426 in the hole @xmath61 according to the topological order of the acyclic graph @xmath68 and it locates the cells from @xmath277 in the hole @xmath42 according to the dual topological order of @xmath495 note that if at some stage refine or partition_and_sort returns the answer  not \" , then there does not exists any @xmath19-compatible total order on @xmath0 and the current value of @xmath19 is too small .",
    "the total complexity of the algorithm is @xmath496 we formulate now the main result of our paper :    [ theorem ] for @xmath480 , if the algorithm returns the answer  not \" , then the dissimilarity @xmath1 is not @xmath19-robinson , else , it returns a @xmath33-compatible total order @xmath10 on @xmath15 in particular , the algorithm is a factor 16 approximation algorithm for @xmath3-fitting - by - robinson .    first , note that no @xmath19-compatible order exist in all cases when the algorithm returns the answer  not \" .",
    "indeed , lemma [ g3_path ] , propositions 3.2 and 4.10 cover all such cases except the case when this answer is returned by a recursive call . in this case , the induction assumption implies that no @xmath19-compatible total order on @xmath280 extending @xmath453 ( and therefore its dual @xmath454 ) exist .",
    "then we infer that no @xmath19-compatible order on @xmath0 exist as well .",
    "now , let the algorithm return a total order @xmath497 suppose by induction assumption that @xmath10 is @xmath33-compatible on each cell to which a recursive call is applied . on the chain @xmath498 the total order @xmath10 coincides with @xmath37 , therefore @xmath10 is @xmath19-compatible on @xmath40 moreover , @xmath10 is @xmath19-compatible on @xmath141 for any @xmath499 because every element @xmath58 is located in a bounding hole of @xmath132 which is @xmath58-admissible . finally notice that @xmath10 is @xmath57-compatible on @xmath500 for any @xmath501 because by proposition",
    "[ pairwise_admissible ] the bounding hole of @xmath132 and the bounding hole of @xmath171 into which @xmath58 and @xmath156 are located define a @xmath181-admissible pair . to prove that @xmath10 is @xmath33-compatible on the whole set @xmath101 it suffices to show that @xmath502 for any three elements @xmath503 such that @xmath504 from previous discussion , we can suppose that @xmath505 . for this , we distinguish the cases * ( h1)-(h5 ) * in function of the mutual location of segments @xmath132 and @xmath506 and in each case we show the required inequality . the respective case analysis is given in @xcite ."
  ],
  "abstract_text": [
    "<S> in this paper , we present a factor 16 approximation algorithm for the following np - hard distance fitting problem : given a finite set @xmath0 and a distance @xmath1 on @xmath0 , find a robinsonian distance @xmath2 on @xmath0 minimizing the @xmath3-error @xmath4 a distance @xmath2 on a finite set @xmath0 is robinsonian if its matrix can be symmetrically permuted so that its elements do not decrease when moving away from the main diagonal along any row or column . </S>",
    "<S> robinsonian distances generalize ultrametrics , line distances and occur in the seriation problems and in classification .    v. chepoi        m. seston </S>"
  ]
}