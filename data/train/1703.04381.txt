{
  "article_text": [
    "_ programmable matter _ refers to any type of matter that can _ algorithmically _ change its physical properties . ``",
    "algorithmically '' means that the change ( or _ transformation _ ) is the result of executing an _ underlying program_. depending on the implementation , the program could either be a _ centralized algorithm _ capable of controlling the whole programmable matter system ( _ external _ control ) or a _ decentralized protocol _ stored in the material itself and executed by various sub - components of the system ( _ internal _ control ) . for a concrete example , imagine a material formed by a collection of spherical nanomodules kept together by magnetic forces .",
    "each module is capable of storing ( in some internal representation ) and executing a simple program that handles communication with nearby modules and that controls the module s electromagnets , in a way that allows the module to _ rotate _ or _ slide _ over neighboring modules .",
    "such a material would be able to adjust its _ shape _ in a programmable way .",
    "other examples of physical properties of interest for real applications would be connectivity , color @xcite , and strength of the material",
    ".    computer scientists , nanoscientists , and engineers are more and more joining their forces towards the development of such programmable materials and have already produced some first impressive outcomes ( even though it is evident that there is much more work to be done in the direction of real systems ) , such as programmed dna molecules that self - assemble into desired structures @xcite and large collectives of tiny identical robots that orchestrate resembling a single multi - robot organism ( kilobot system ) @xcite .",
    "other systems for programmable matter include the robot pebbles @xcite , consisting of 1 cm cubic programmable matter modules able to form 2-dimensional ( usually abbreviated `` 2d '' ) shapes through self - disassembly , and the millimotein @xcite , a chain of programmable matter which can fold itself into digitized approximations of arbitrary 3-dimensional ( usually abbreviated `` 3d '' ) shapes .",
    "ambitious long - term applications of programmable materials include molecular computers , collectives of nanorobots injected into the human circulatory system for monitoring and treating diseases , or even self - reproducing and self - healing machines .",
    "apart from the fact that systems work is still in its infancy , there is also an apparent lack of unifying formalism and theoretical treatment .",
    "the following are some of the very few exceptions aiming at understanding the fundamental possibilities and limitations of this prospective .",
    "the area of _ algorithmic self - assembly _ tries to understand how to program molecules ( mainly dna strands ) to manipulate themselves , grow into machines and at the same time control their own growth @xcite .",
    "the theoretical model guiding the study in algorithmic self - assembly is the abstract tile assembly model ( atam ) @xcite and variations .",
    "recently , a model , called the _ nubot _ model , was proposed for studying the complexity of self - assembled structures with active molecular components @xcite .",
    "this model `` is inspired by biology s fantastic ability to assemble biomolecules that form systems with complicated structure and dynamics , from molecular motors that walk on rigid tracks and proteins that dynamically alter the structure of the cell during mitosis , to embryonic development where large - scale complicated organisms efficiently grow from a single cell '' @xcite .",
    "another very recent model , called the _ network constructors _ model , studied what stable networks can be constructed by a population of finite - automata that interact randomly like molecules in a well - mixed solution and can establish bonds with each other according to the rules of a common small protocol @xcite .",
    "the development of network constructors was based on the _ population protocol _",
    "model of angluin _ et al . _",
    "@xcite , that does not include the capability of creating bonds and focuses more on the computation of functions on inputs .",
    "a very interesting fact about population protocols is that they are formally equivalent to _ chemical reaction networks _ ( crns ) , `` which model chemistry in a _ well - mixed solution _ and are widely used to describe information processing occurring in natural cellular regulatory networks '' @xcite . also the recently proposed _ amoebot",
    "_ model , `` offers a versatile framework to model self - organizing particles and facilitates rigorous algorithmic research in the area of programmable matter '' @xcite .",
    "an indication of the potential that the research community sees in this effort , is the 1st dagstuhl seminar on `` algorithmic foundations of programmable matter '' , which took place in june 2016 and attracted leading scientist ( both theoreticians and practitioners ) from algorithms , distributed computing , robotics , and dna self - assembly , with the aim at joining their forces to push forward this emerging subject .    each theoretical approach , and to be more precise , each individual model , has its own beauty and has lead to different insights and developments regarding potential programmable matter systems of the future and in some cases to very intriguing technical problems and open questions .",
    "still , it seems that the right way for theory to boost the development of more refined real systems is to reveal the _ transformation capabilities of mechanisms and technologies that are available now _",
    ", rather than by exploring the unlimited variety of theoretical models that are not expected to correspond to a real implementation in the near future .    in this paper",
    ", we follow such an approach , by studying the transformation capabilities of models for programmable matter , which are based on minimal mechanical capabilities , easily implementable by existing technology .",
    "we study a minimal programmable matter system consisting of @xmath0 cycle - shaped modules , with each module ( or _ node _ ) occupying at any given time a cell of the 2d grid ( no two nodes can occupy the same cell at the same time ) .",
    "therefore , the composition of the programmable matter systems under consideration is discrete .",
    "our main question throughout is whether an initial arrangement of the material can transform ( either in principle , e.g. , by an external authority , or by itself ) to some other target arrangement . in more technical terms , we are provided with an _ initial shape _ @xmath1 and a _ target shape _ @xmath2 and we are asked whether @xmath1 _ can be transformed to _",
    "@xmath2 via a sequence of _ valid _ transformation steps .",
    "usually , a step consists either of a _ valid movement _ of a single node ( in the _ sequential case _ ) or of more than one nodes at the same time ( in the _ parallel case _ ) .",
    "we consider two quite primitive types of movement .",
    "the first one , called _ rotation _ , allows a node to rotate 90  around one of its neighbors either clockwise or counterclockwise ( see , e.g. , figure [ fig : line - folding ] in section [ sec : rotation ] ) and the second one , called _ sliding _ , allows a node to slide by one position `` over '' two neighboring nodes ( see , e.g. , figure [ fig : sliding - definition ] in section [ sec : rotation - sliding ] ) .",
    "both movements succeed only if the whole direction of movement is free of obstacles ( i.e. , other nodes blocking the way ) .",
    "more formal definitions are provided in section [ sec : prel ] .",
    "one part of the paper focuses on the case in which only rotation is available to the nodes and the other part studies the case in which both rotation and sliding are available .",
    "the latter case has been studied to some extent in the past in the , so called , _ metamorphic systems _",
    "@xcite , which makes those studies the closest to our approach .    for rotation only ,",
    "we introduce the notion of _ color - consistence _ and prove that if two shapes are not color - consistent then they can not be transformed to each other . on the other hand color - consistence does not guarantee transformability as there is an infinite set of pairs @xmath8 such that @xmath1 and @xmath2 are color consistent but still they can not be transformed to each other . at this point , observe that if @xmath1 can be transformed to @xmath2 then the inverse is also true , as all movements considered in this paper are _",
    "reversible_. we distinguish two main types of transformations : those that are allowed to break the connectivity of the shape during the transformation and those that are not and call the corresponding problems rot - transformability and rotc - transformability .",
    "we prove that rotc - transformability is a proper subset of rot - transformability by showing that a line - folding problem is in rot - transformability@xmath9rotc - transformability .",
    "our main result regarding rot - transformability is that rot - transformability @xmath10 .",
    "to prove polynomial - time decidability , we prove that two shapes @xmath1 and @xmath2 are transformable to each other iff both @xmath1 and @xmath2 have at least one movement available ( without any movement available , a shape is _ blocked _ and can only trivially transform to itself ) .",
    "therefore , transformability reduces to checking the availability of a movement in the initial and target shapes .",
    "the idea is that if a movement is available in a shape @xmath1 , then there is always a way to extract from @xmath1 a _",
    "( i.e. , two neighboring nodes ) .",
    "such a 2-line can move freely in any direction and can also extract further nodes to form a _ 4-line_.",
    "a 4-line in turn can also move freely to any direction and is also capable of extracting nodes from the shape and transferring them , one at a time , to any desired target position . in this manner ,",
    "the 4-line can transform @xmath1 to a line with leaves around it that is color - consistent to @xmath1 ( based on a proposition that we prove , stating that any shape has a corresponding color - consistent line - with - leaves ) .",
    "similarly , @xmath2 , given that it is color - consistent with @xmath1 , can be transformed by the same approach to exactly the same line - with - leaves , and then , by reversibility , it follows that @xmath1 and @xmath2 can be transformed to each other by using the line - with - leaves as an intermediate .",
    "this set of transformations do not guarantee the preservation of connectivity during the transformation .",
    "that is , even though the initial and target shapes considered are connected shapes , the shapes formed at intermediate steps of the transformation may very well be disconnected shapes .",
    "we next study rotc - transformability , in which again the only available movement is rotation , but now connectivity of the material has to be preserved throughout the transformation .",
    "the property of preserving the connectivity is expected to be a crucial property for programmable matter systems , as it allows the material to maintain coherence and strength , to eliminate the need for wireless communication , and , finally , enables the development of more effective power supply schemes , in which the modules can share resources or in which the modules have no batteries but are instead constantly supplied with energy by a centralized source ( or by a supernode that is part of the material itself ) .",
    "such benefits can lead to simplified designs and potentially to reduced size of individual modules .",
    "we first prove that rotc - transformability @xmath11 .",
    "the rest of our results here are strongly based on the notion of a _",
    "seed_. this stems from the observation that a large set of infeasible transformations become feasible by introducing to the initial shape an additional , and usually quite small , seed ; i.e. , a small shape that is being attached to some point of the initial shape .",
    "in particular , we prove that a _ 3-line seed _",
    ", if placed appropriately , is sufficient to achieve folding of a line ( otherwise impossible ) .",
    "we then investigate seeds that could serve as components capable of traveling the perimeter of an arbitrary connected shape @xmath1 .",
    "such shapes are very convenient as they are capable of `` simulating '' the _ universal transformation _ techniques that are possible if we have both rotation and sliding movements available ( discussed in the sequel ) . to this end , we prove that all seeds of size @xmath12 can not serve for this purpose , by proving that they can not even walk the perimeter of a simple line shape",
    ". then we focus on a _",
    "6-seed _ and prove that such a seed is capable of walking the perimeter of a large family of shapes , called _ discrete - convex _ shapes .",
    "this is a first indication , that there might be a large family of shapes that can be transformed to each other with rotation only and without breaking connectivity , by extracting a 6-seed and then exploiting to transfer nodes to the desired positions . to further support this , we prove that the 6-seed is capable of performing such transfers , by detaching pairs of nodes from the shape , attaching them to itself , thus forming an _ 8-seed _ and then being still capable to walk the perimeter of the shape .",
    "next , we consider the case in which both rotation and sliding are available and insist on connectivity preservation .",
    "we first provide a proof that this combination of simple movements is universal w.r.t .",
    "transformations , as any pair of connected shapes @xmath1 and @xmath2 of the same order , can be transformed to each other without ever breaking the connectivity throughout the transformation ( a first proof of this fact had already appeared in @xcite ) .",
    "this generic transformation requires @xmath13 sequential movements in the worst case . by a potential - function argument",
    "we show that no transformation can improve on this worst - case complexity for some specific pairs of shapes and this lower bound is independent of connectivity preservation ; it only depends on the inherent _ transformation - distance _ between the shapes . to improve on this , either some sort of parallelism must be employed or more powerful movement mechanisms , e.g. , movements of whole sub - shapes in one step .",
    "we investigate the former approach , and prove that there is a _ pipelining _ general transformation strategy that improves the time to @xmath7 ( parallel time ) .",
    "we also give a matching @xmath14 lower bound . on the way",
    ", we also show that this parallel complexity is feasible even if the nodes are labeled , meaning that individual nodes must end up in specific positions of the target - shape .",
    "afterwards , we propose a distributed algorithm that transforms any compact shapes into a line using the rotation - sliding movement without breaking the connectivity of the shape .",
    "we note that a unique leader is required , each node has 4 ports and we aim to minimise the memory as much as possible .",
    "the communication is synchronous with each node broadcasting messages to its neighbours each turn . following this",
    ", we propose an algorithm that transforms any shape into a line .",
    "we have the same requirements and communication and our goal again to minimize the amount of memory required in the system .    in section [ subsec :",
    "further - related ] we discuss further related literature .",
    "section [ sec : prel ] brings together all definitions and basic facts that are used throughout the paper . in section [ sec : rotation ] , we study programmable matter systems equipped only with rotation movement . in section [ sec : rotation - connectivity ] , we insist on rotation only , but additionally require from the material to maintain connectivity throughout the transformation . in section [ sec : rotation - sliding ] , we investigate the combined effect of rotation and sliding movements .",
    "connectivity can always be preserved in this case .",
    "section [ sec : distributed ] focuses on distributed transformations having access to both rotation and sliding .",
    "finally , in section [ sec : conclusions ] we conclude and give further research directions that are opened by our work .",
    "* mobile and reconfigurable robotics .",
    "* there is a very rich literature on mobile and reconfigurable robotics . in mobile",
    "( swarm ) robotics systems and models , as are , for example , the models for robot gathering @xcite and deployment @xcite ( cf . ,",
    "also @xcite ) , geometric pattern formation @xcite , and connectivity preservation @xcite , the modules are usually robots equipped with some mobility mechanism making them free to move in any direction of the plane ( and in some cases even continuously ) . in contrast , we only allow discrete movements relative to neighboring nodes .",
    "modular self - reconfigurable robotic systems form an area on their own , focusing on aspects like the design , motion planning , and control of autonomous robotic modules @xcite .",
    "the model considered in this paper bears similarities to some of the models that have appeared in this area .",
    "the main difference is that we follow a more computation - theoretic approach , while the studies in this area usually follow a more applied perspective . +",
    "* puzzles . *",
    "puzzles are combinatorial one - player games , usually played on some sort of board . typical questions of interest are whether a given puzzle is solvable and finding the solution with the fewest number of moves .",
    "answers to these questions range from being in @xmath3 up to @xmath4-hard or even undecidable when some puzzles are generalized to the entire plane with unboundedly many pieces @xcite .",
    "famous examples of puzzles are the fifteen puzzle , sliding blocks , rush hour , pushing blocks , and solitaire . even though none of these is equivalent to the model considered here , the techniques that have been developed for solving and characterizing puzzles may turn very useful in the context of programmable matter systems .",
    "actually , in some cases , such puzzles show up as special cases of the transformation problems considered here ( e.g. , the fifteen puzzle may be obtained if we restrict a transformation of node - labelled shapes to take place in a 4x4 square region ) . +",
    "* passive systems . *",
    "most of the models discussed so far including the model under consideration in this paper , are _ active _ models , meaning that the movements are in the complete control of the algorithm .",
    "in contrast , in _ passive _ models the underlying algorithm can not control the movements but in most cases it can decide in some way which movements to accept and which not .",
    "the typical assumption is that the movements are controlled by a _ scheduler _ ( possibly adversarial ) , which represents some dynamicity of the system or the environment . population protocols @xcite and variants are a typical such example .",
    "for example , in network constructors @xcite nodes move around randomly due to the dynamicity of the environment and when two of them interact the protocol can decide whether to establish a connection between them ; that is , the protocol has some _ implicit _ control of the system s dynamics .",
    "another passive model , inspired from biological multicellular processes , was recently proposed by emek and uitto @xcite .",
    "most models from the theory of algorithmic self - assembly , like the abstract tile assembly model ( atam ) @xcite , fall also in this category . in this paper , we are only concerned with active systems .",
    "hybrid models combining active capabilities and passive dynamics , remain an interesting open research direction .",
    "the programmable matter systems considered in this paper operate on a 2-dimensional square grid . as usual ,",
    "each position ( or _ cell _ ) of the grid is uniquely referred to by its @xmath15 and @xmath16 coordinates , where @xmath17 corresponds to the row and @xmath18 to the column .",
    "such a system consists of a set @xmath19 of @xmath0 _ modules _ , called _ nodes _ throughout .",
    "each node may be viewed as a spherical module fitting inside a cell of the grid . at any given time",
    ", each node @xmath20 occupies a cell @xmath21 ( omitting the time index for simplicity here and also whenever clear from context ) and no two nodes may occupy the same cell . in some cases , when a cell is occupied by a node we may refer to that cell by a color , e.g. , _ black _ , and when a cell is not occupied ( i.e. , it is empty ) we usually refer to it as _ white_. at any given time @xmath22 , the positioning of nodes on the grid defines an undirected _ neighboring relation _",
    "@xmath23 , where @xmath24 iff @xmath25 and @xmath26 or @xmath27 and @xmath28 , that is , if @xmath29 and @xmath30 are either _ horizontal _ or _ vertical _ neighbors on the grid , respectively .",
    "it is immediate to observe that every node can have at most 4 neighbors at any given time .",
    "a more informative way to define the system at a given time @xmath22 , and thus often more convenient , is as a mapping @xmath31 where @xmath32 iff cell @xmath33 is occupied by a node .    at any given time @xmath22",
    ", @xmath34 defines a _",
    "shape_. such a shape is called _ connected _ if @xmath35 defines a connected graph .",
    "a connected shape is called _ convex _ if for any two occupied cells , the line that connects their centers does not pass through an empty cell .",
    "we call a shape _ discrete - convex _ if for any two occupied cells , belonging either to the same row or the same column , the line that connects their centers does not pass through an empty cell ; i.e. , in the latter we exclude diagonal lines .    in general , shapes can _ transform _ to other shapes via a sequence of one or more _ movements _ of individual nodes .",
    "time consists of discrete _ steps _ ( or _ rounds _ ) and in every step , zero or more movements may occur , possibly following a computation sub - step either centralized or distributed , depending on the application . in the _ sequential _ case , at most one movement may occur per step , and in the _ parallel _ case any number of `` valid '' movements may occur in parallel .",
    "we consider two types of movements : ( i ) _ rotation _ and ( ii ) _ sliding_. in both movements , a single node moves relative to one or more neighboring nodes as we explain now .",
    "a single _ rotation _ movement of a node @xmath29 is a 90  _ rotation _ of @xmath29 around one of its neighbors .",
    "let @xmath33 be the current position of @xmath29 and let its neighbor be @xmath30 occupying the cell @xmath36 ( i.e. , lying below @xmath29 ) . then @xmath29 can _ rotate _ 90  clockwise ( counterclockwise ) around @xmath30 iff the cells @xmath37 and @xmath38 ( @xmath39 and @xmath40 , respectively ) are both empty . by rotating the whole system 90 , 180 , and 270 ,",
    "all possible rotation movements are defined analogously .",
    "see figure [ fig : rotation - definition ] .",
    "a single _ sliding _ movement of a node @xmath29 is a one - step horizontal or vertical movement `` over '' a horizontal or vertical line of ( neighboring ) nodes of length 2 . in particular ,",
    "if @xmath33 is the current position of @xmath29 , then @xmath29 can _ slide _ rightwards to position @xmath37 iff @xmath37 is not occupied and there exist nodes at positions @xmath36 and @xmath38 or at positions @xmath41 and @xmath42 , or both .",
    "precisely the same definition holds for up , left , and down sliding movements by rotating the whole system 90 , 180 , and 270  counterclockwise , respectively .",
    "intuitively , a node can slide one step in one direction , if there are two consecutive nodes either immediately `` below '' or immediately `` above '' that direction that can assist the node slide ( see figure [ fig : sliding - definition ] ) . and @xmath42 or even with a single node at @xmath36 or at @xmath41 .",
    "in this paper , though , we only focus on our original definition . ]",
    "let @xmath1 and @xmath2 be two shapes .",
    "we say that _",
    "@xmath1 transforms to @xmath2 via a movement @xmath43 _ ( which can be either a rotation or a sliding ) , denoted @xmath44 , if there is a node @xmath29 in @xmath1 such that if @xmath29 applies @xmath43 , then the shape resulting after the movement is @xmath2 ( possibly after rotations and translations of the resulting shape , depending on the application ) .",
    "we say that @xmath1 _ transforms in one step to @xmath2 _ ( or that _ @xmath2 is reachable in one step from @xmath1 _ ) , denoted @xmath45 , if @xmath44 for some movement @xmath43 .",
    "we say that @xmath1 _ transforms _ to @xmath2 ( or that @xmath2 is _ reachable _ from @xmath1 ) and write @xmath46 , if there is a sequence of shapes @xmath47 , such that @xmath48 for all @xmath49 , @xmath50 .",
    "we should mention that we do not always allow @xmath43 to be any of the two possible movements .",
    "in particular , in sections [ sec : rotation ] and [ sec : rotation - connectivity ] we only allow @xmath43 to be a rotation , as we there restrict attention to systems in which only rotation is available .",
    "we shall clearly explain what movements are permitted in each part of the paper .",
    "[ pro : par - equiv ] the relation `` transforms to '' ( i.e. , ` @xmath51 ' ) is a partial equivalence relation .",
    "the relation ` @xmath51 ' is a binary relation on shapes . to show that it is a partial equivalence relation , we have to show that it is symmetric and transitive .    for symmetricity , we have to show that for all shapes",
    "@xmath1 and @xmath2 , if @xmath46 then @xmath52 .",
    "it suffices to show that for all @xmath5 , if @xmath53 then @xmath54 , meaning that every one - step transformation ( which can be either a single rotation or a single sliding ) can be _ reversed_. for the rotation case , this follows by observing that a rotation of a node @xmath29 can be performed iff there are two consecutive empty positions in its trajectory .",
    "when @xmath29 rotates , it leaves its previous position empty , thus , leaving in this way two consecutive positions empty for the reverse rotation to become enabled .",
    "the argument for sliding is similar .    for transivity",
    ", we have to show that for all shapes @xmath1 , @xmath2 , and @xmath55 , if @xmath46 and @xmath56 then @xmath57 . by definition ,",
    "@xmath46 if there is a sequence of shapes @xmath47 , such that @xmath48 for all @xmath49 , @xmath50 and @xmath56 if there is a sequence of shapes @xmath58 , such that @xmath48 for all @xmath49 , @xmath59 .",
    "so , for the sequence @xmath60 it holds that @xmath48 for all @xmath49 , @xmath61 , that is , @xmath57 .    when the only available movement is rotation , there are shapes in which no rotation can be performed ( we will see such examples in section [ sec : rotation ] ) .",
    "if we introduce a _ null _ rotation , then every shape may transform to itself by applying the _ null _ rotation .",
    "that is , reflexivity is also satisfied , and , together with symmetricity and transivity from proposition [ pro : par - equiv ] , `` transforms to '' ( by rotations only ) becomes an equivalence relation .",
    "[ def : perimeter1 ] let @xmath1 be a connected shape . color black each cell of the grid that is occupied by a node of @xmath1 .",
    "a cell @xmath33 is part of a _ hole _ of @xmath1 if every infinite length single path starting from @xmath33 ( moving only horizontally and vertically ) necessarily goes through a black cell .",
    "color black also every cell that is part of a hole of @xmath1 , to obtain a _",
    "compact _ black shape @xmath62 ( i.e. , one with no holes in it ) .",
    "consider now polygons defined by unit - length line segments of the grid .",
    "define the _ perimeter _ of @xmath1 as the minimum - area such polygon that completely encloses @xmath62 in its interior .",
    "the fact that the polygon must have an _ interior _ and an _ exterior _ follows directly from the jordan curve theorem @xcite .",
    "[ def : perimeter2 ] now , color red any cell of the grid that has contributed at least one of its line - segments to the perimeter and is not black ( i.e. , is not occupied by a node of @xmath1 ) .",
    "call this the _ cell - perimeter _ of shape @xmath1 .",
    "see figure [ fig : perimeter - definition ] for an example .",
    "[ def : perimeter3 ] the _ external surface _ of a connected shape @xmath1 , is a shape @xmath2 , not necessarily connected , consisting of all nodes @xmath63 such that @xmath29 occupies a cell defining at least one of the line - segments of @xmath1 s perimeter .",
    "[ def : perimeter4 ] the _ extended external surface _ of a connected shape @xmath1 , is defined by adding to @xmath1 s external surface all nodes of @xmath1 whose cell shares a corner with @xmath1 s perimeter ( for example , the black node just below the hole , in figure [ fig : perimeter - definition ] ) .",
    "[ pro : extended - external - connected ] the extended external surface of a connected shape @xmath1 , is itself a connected shape .",
    "the perimeter of @xmath1 is connected , actually , it is a cycle .",
    "this connectivity is preserved by the extended external surface , as whenever the perimeter moves straight , we have two horizontally or vertically neighboring nodes on the extended external surface and whenever it makes a turn , we either stay put or preserve connectivity via an intermediate diagonal node ( from those nodes used to extend the external surface ) .",
    "observe , though , that the extended external surface is not necessarily a cycle .",
    "for example , the extended external surface of a line - shape is equal to the shape itself ( and , therefore , a line ) .",
    "we here provide formal definitions of all the transformation problems that are considered in this work . +",
    "* rot - transformability . * given an initial shape @xmath1 and a target shape @xmath2 ( usually both connected ) , decide whether @xmath1 can be transformed to @xmath2 ( usually , under translations and rotations of the shapes ) by a sequence of rotation only movements .",
    "+ * rotc - transformability . * the special case of rot - transformability in which @xmath1 and @xmath2 are connected shapes and , additionally , connectivity must be preserved throughout the transformation . +",
    "* rs - transformability . *",
    "given an initial shape @xmath1 and a target shape @xmath2 ( usually both connected ) , decide whether @xmath1 can be transformed to @xmath2 ( usually , under translations and rotations of the shapes ) by a sequence of rotation and sliding movements .",
    "+ * minimum - seed - determination . * given an initial shape @xmath1 and a target shape @xmath2 ( usually only with rotation available and a proof that @xmath1 and @xmath2 are not transformable to each other without additional assumptions ) determine a minimum - size seed and an initial positioning of that seed relative to @xmath1 that makes the transformation from @xmath1 to @xmath2 feasible .",
    "there are several meaningful variations of this problem .",
    "for example , the seed may or may not form part of the target shape or the seed may be used as an intermediated step to show feasibility with `` external '' help and then be able to show that , instead of externally providing it , it is possible to _ extract _ it from the initial shape @xmath1 via a sequence of moves .",
    "we will clearly indicate which version is considered in each case .",
    "+ in the above problems , the goal is to show feasibility of a set of transformation instances and , if possible , to provide an algorithm that decides feasibility .    in the last part of the paper , we consider _ distributed transformation tasks_. there , the nodes are _ distributed processes _ able to perform _ communicate - compute - move rounds _ and the goal is to program them so that they ( algorithmically ) self - transform their initial arrangement to a target arrangement .",
    "+ * distributed - transformability .",
    "* given an initial shape @xmath1 and a target shape @xmath2 ( usually by having access to both rotation and sliding ) , the nodes ( which are now distributed processes ) , starting from @xmath1 , must transform themselves to @xmath2 by a sequence of communication - computation - movement rounds . in the distributed transformations ,",
    "we mostly consider the case in which @xmath1 can be _ any connected shape _ and @xmath2 is a _ spanning line _ , i.e. , a linear arrangement of all the nodes .",
    "in this section , the only permitted movement is 90  _ rotation _ around a neighbor .    consider a black and red checkered coloring of the 2d grid , similar to the coloring of a chessboard .",
    "then any shape @xmath64 may be viewed as a colored shape consisting of @xmath65 blacks and @xmath66 reds .",
    "call two shapes @xmath1 and @xmath2 _ color - consistent _ if @xmath67 and @xmath68 and call them _ color - inconsistent _ otherwise .",
    "call a transformation from a shape @xmath1 to a shape @xmath55 _ color - preserving _ if @xmath1 and @xmath55 are color consistent .",
    "observe now , that if @xmath53 , then @xmath1 and @xmath2 are color - consistent , because a rotation can never move a node to a position of different color than its starting position .",
    "this implies that if @xmath57 , then @xmath1 and @xmath55 are color - consistent , because any two consecutive shapes in the sequence are color - consistent .",
    "we conclude that :    the rotation movement is color - preserving .",
    "formally , @xmath57 ( restricted to rotation only ) implies that @xmath1 and @xmath55 are color - consistent",
    ". in particular , every node beginning from a black ( red ) position of the grid , will always be on black ( red , respectively ) positions throughout a transformation consisting only of rotations .",
    "based on this property of the rotation movement , we may call each node _ black _ or _ red _ throughout a transformation , based only on its initial coloring .",
    "the above observation gives a partial way to determine that two shapes @xmath1 and @xmath2 can not be transformed to each other by rotations .",
    "[ impossibility - color - inc ] if two shapes @xmath1 and @xmath2 are color - inconsistent , then it is impossible to transform one to the other by rotations only .",
    "we now show that the inverse is not true , that is , it does not hold that any two color - consistent shapes can be transformed to each other by rotations .",
    "this is trivial for disconnected shapes , as any collection of isolated nodes can not move at all , and either we consider only the cardinalities of the colors , in which case any two such shapes of equal cardinalities correspond to the same shape , or we also consider the precise positions of the nodes on the grid ( e.g. by their relative distances ) , in which case no two such shapes can be transformed to each other .",
    "thus , we show a counterexample for the case of connected shapes . we begin with a proposition relating the number of black and red nodes in a connected shape .",
    "[ pro : color - num - bounds ] a connected shape with @xmath69 blacks has at least @xmath70 and at most @xmath71 reds .    for the upper bound , observe that a black can hold up to 4 distinct reds in its neighborhood , which implies that @xmath69 blacks can hold up to @xmath72 reds in total , even if the blacks were not required to be connected to each other . to satisfy connectivity , every black must share a red with some other black ( if a black does not satisfy this , then it can not be connected to any other black ) .",
    "any such sharing reduces the number of reds by at least 1 .",
    "as at least @xmath73 such sharings are required for each black to participate in a sharing , it follows that we can not avoid a reduction of at least @xmath73 in the number of reds , which leaves us with at most @xmath74 reds .",
    "for the lower bound , if we invert the roles of blacks and reds , we have that @xmath75 reds can hold at most @xmath76 blacks .",
    "so , if @xmath69 is the number of blacks , it holds that @xmath77 and due to the fact that the number of reds must be an integer , we conclude that for @xmath69 blacks the number of reds must be at least @xmath70 .",
    "[ pro : line - with - leaves ] there is a generic connected shape , called _ line - with - leaves _ , that has a color - consistent version for any connected shape . in other words , for @xmath69 blacks it covers the whole range of reds from @xmath70 to @xmath71 reds .    consider a bi - color line starting with a black node and ending to a black node , such that all @xmath69 blacks are exhausted , as shown in figure [ fig : saturated - line ] . to do this , @xmath73 reds are needed in order to alternate blacks and reds on the line .",
    "next , `` saturate ''",
    "every black ( i.e. maximize its degree ) by adding as many red nodes as it can fit around it ( recall that the maximum degree of every node is 4 ) .",
    "the resulting saturated shape has @xmath69 blacks and @xmath71 reds .",
    "this shape covers the @xmath71 upper bound on the possible number of reds . by removing red leaf - nodes ( i.e. , of degree 1 ) one after the other",
    ", we can achieve the whole range of numbers of reds , from @xmath73 to @xmath71 reds .",
    "it suffices to restrict attention to the range from @xmath69 to @xmath71 reds .",
    "take now any connected shape @xmath1 and color it in such a way that red is the majority color , that is @xmath78 , where @xmath75 is the number of reds and @xmath69 is the number of blacks ( there is always a way to do that ) . from the upper bound of proposition [ pro : color - num - bounds ]",
    ", @xmath75 can be at most @xmath71 , so we have @xmath79 for any connected shape @xmath1 , which falls within the range that the line - with - leaves can represent .",
    "therefore , we conclude that any connected shape @xmath1 has a color - consistent shape @xmath2 from the line - with - leaves family .",
    "[ pro : counterexample - transformability ] there is an infinite set of pairs @xmath8 of connected shapes , such that @xmath1 and @xmath2 are color - consistent but can not be transformed to each other by rotations only .    for shape @xmath1 ,",
    "take a rhombus as shown in figure [ fig : rhombus ] , consisting of @xmath80 blacks and @xmath81 reds , for any @xmath82 . in this shape ,",
    "every black node is `` saturated '' , meaning that it has 4 neighbors , all of them necessarily red .",
    "this immediately excludes the blacks from being able to move , as all their neighboring positions are occupied by reds .",
    "but the same holds for the reds , as all potential target - positions for a rotation are occupied by reds .",
    "thus , no rotation movement can be applied to any such shape @xmath1 and @xmath1 can only be transformed to itself ( by _ null _ rotations ) . by proposition",
    "[ pro : line - with - leaves ] , any such @xmath1 has a color - consistent shape @xmath2 from the family of line - with - leaves shapes , such that @xmath2 is not equal to @xmath1 ( actually in @xmath2 several blacks may have degree 3 in contrast to @xmath1 where all blacks have degree 4 ) .",
    "we conclude that @xmath1 and @xmath2 are distinct color - consistent shapes which can not be transformed to each other , and there is an infinite number of such pairs , as the number @xmath80 of black nodes of @xmath1 can be made arbitrarily large .",
    "propositions [ impossibility - color - inc ] and [ pro : counterexample - transformability ] give a partial characterization of pairs of shapes that can not be transformed to each other .",
    "observe that the impossibilities proved so far , hold for all possible transformations based on rotation only , i.e. , they do not restrict the transformation in any way as would be , for example , to not allow the transformation to break the connectivity of the shape at any time .",
    "a small shape of particular interest is a bi - color pair or _",
    "2-line_. such pairs can move easily in any direction , which makes them very useful components of transformations .",
    "one way to simplify some transformations would be to identify as many such pairs as possible in a shape and treat them in a different way than the rest of the nodes .",
    "a question in this respect is whether all the minority - color nodes of a connected shape can be completely to ( distinct ) nodes of the majority color .",
    "we show that this is not true .",
    "[ pro : matching - counterexample ] there is an infinite family of connected shapes , such that , if @xmath1 is a shape in the family of size @xmath0 , then any matching of @xmath1 leaves at least @xmath83 nodes of each color unmatched .",
    "see figure [ fig : matching - counterexample ] .",
    "recall that rot - transformability is the language of all transformation problems between connected shapes that can be solved by rotation only and rotc - transformability is its subset obtained by the restriction that the transformation should not break the connectivity of the shape at any point during the transformation .",
    "we begin by showing that the inclusion between the two languages is strict , that is , there are strictly more feasible transformations if we allow connectivity to break .",
    "we prove that by showing that there is a feasible transformation in rot - transformability@xmath9rotc - transformability .",
    "[ the : rotc - rot ] rotc - transformability @xmath84 rot - transformability .",
    "rotc - transformability @xmath85 rot - transformability is immediate , as any transformation that does not break the shape s connectivity is also a valid transformation for rot - transformability .",
    "so , it suffices to prove that there is a transformation problem in rot - transformability@xmath9rotc - transformability .",
    "consider a ( connected ) horizontal line of any even length @xmath0 , and let @xmath86 be its nodes .",
    "the transformation asks to fold the line onto itself , forming a double - line of length @xmath87 and width 2 , i.e. , a @xmath88 rectangle .",
    "it is easy to observe that this problem is not in rotc - transformability for any @xmath89 : the only nodes that can rotate without breaking connectivity are @xmath90 and @xmath91 , but any of their two possible rotations only enables a rotation that will bring the nodes back to their original positions .",
    "this means that , if the transformation is not allowed to break connectivity , then such a shape is trapped in a loop in which only the endpoints can rotate between three possible positions , therefore it is impossible to fold a line of length greater than 4 .    on the other hand ,",
    "if connectivity can be broken , we can perform the transformation by the following simple procedure , consisting of @xmath92 phases : in the beginning of every phase @xmath93 , pick the nodes @xmath94 , which shall at that point be the two leftmost nodes of the original line .",
    "rotate @xmath95 once clockwise , to move above @xmath96 , then @xmath96 three times clockwise to move to the right of @xmath95 ( the first of these three rotations breaks connectivity and the third restores it ) , and then rotate @xmath95 twice clockwise to move to the right of @xmath96 , then @xmath96 twice clockwise to move to the right of @xmath95 and repeat this alternation until the pair that moves to the right meets the previous pair , which will be when @xmath95 becomes the left neighbor of @xmath97 on the upper line of the rectangle under formation , or , in case @xmath98 , when @xmath95 goes above @xmath91 ( see figure [ fig : line - folding ] ) .",
    "if @xmath92 is not an integer , then perform a final phase , in which the leftmost node of the original line is rotated once clockwise to move above its right neighbor , and this completes folding .",
    "this means that allowing the connectivity to break enables more transformations , and this motivates us to start from this simpler case .",
    "but we already know from proposition [ pro : counterexample - transformability ] , that even in this case an infinite number of pairs of shapes can not be transformed to each other . aiming at a general transformation , we ask whether there is some minimal addition to a shape that would allow it to transform .",
    "the solution turns out to be as small as a _",
    "2-line seed _ lying initially somewhere `` outside '' the boundaries of the shape ( e.g. , just below the lowest row occupied by the shape ) .",
    "based on the above assumptions , we shall now prove that any pair of color - consistent connected shapes @xmath1 and @xmath2 can be transformed to each other .",
    "recall from the discussion before proposition [ pro : matching - counterexample ] , that 2-line shapes can move freely in any direction .",
    "the idea is to use this 2-line in order to extract from the shape another 2-line , and use the two 2-lines together as a 4-line seed .",
    "the 4-line can also move freely in all directions .",
    "then we shall use the 4-line as a transportation medium for those nodes that can not move alone .",
    "in particular , we partition the nodes of the shape into those that can leave the shape as part of a 2-line and those that can not .",
    "the latter nodes require the help of the 4-line to move them by carrying them , one at a time , in the form of a shape of order 5 , which can only move diagonally ( due to color - preservation of proposition [ impossibility - color - inc ] ) .",
    "we exploit these mobility mechanisms to transform @xmath1 into a uniquely defined shape from the line - with - leaves family of proposition [ pro : line - with - leaves ] ( meaning that any two color - consistent shapes are matched to the same shape from the family ) .",
    "but if any connected shape @xmath1 with an extra 2-line can be transformed to its color - consistent line - with - leaves version with an extra 2-line , then this also holds inversely due to reversibility of rotations ( discussed in the proof of proposition [ pro : par - equiv ] ) , and it follows that any @xmath1 can be transformed to any @xmath2 by transforming @xmath1 to its line - with - leaves version @xmath99 and then inverting the transformation from @xmath2 to @xmath100 .",
    "[ the : rotation - generic ] if connectivity can break and there is a 2-line seed provided `` outside '' the initial shape , then any pair of color - consistent connected shapes @xmath1 and @xmath2 can be transformed to each other by rotations only .    without loss of generality ( due to symmetry and the 2-line s unrestricted mobility )",
    ", it suffices to assume that the seed is provided somewhere below the lowest row @xmath75 occupied by the shape @xmath1 .",
    "we show how @xmath1 can be transformed to @xmath99 with the help of the seed .",
    "we define @xmath99 as follows : let @xmath69 be the cardinality of the minority color , let it be the black color .",
    "as there are at least @xmath69 reds , we can create a horizontal line of length @xmath101 , i.e. , @xmath102 , starting with a black , i.e. , @xmath90 is black , and alternating blacks and reds . in this way , the blacks are exhausted .",
    "the remaining @xmath103 reds are then added as leaves of the black nodes , starting from the position to the left of @xmath90 and continuing counterclockwise , i.e. , below @xmath90 , below @xmath104 , ... , below @xmath105 , above @xmath105 , above @xmath106 , and so on .",
    "this gives the same shape from the line - with - leaves family , for all color - consistent shapes ( observe that the leaf to the right of the line is always placed ) .",
    "@xmath99 shall be constructed on rows @xmath107 to @xmath108 ( not necessarily inclusive ) , with @xmath90 on row @xmath109 and a column @xmath110 preferably between those that contain @xmath1 .",
    "first , extract a 2-line from @xmath1 , from row @xmath75 , so that the 2-line seed becomes a 4-line seed . to see that this is possible for every shape @xmath1 of order at least 2 , distinguish the following two cases : ( i )",
    "if the lowest row has a horizontal 2-line , then the 2-line can leave the shape without any help and approach the 2-seed .",
    "( ii ) if not , then take any node @xmath29 of row @xmath75 . as @xmath1 is connected and has at least two nodes , @xmath29 must have a neighbor @xmath30 above it .",
    "the only possibility that the 2-line @xmath29,@xmath30 is not free to leave @xmath1 is when @xmath30 has both a left and a right neighbor .",
    "figure [ fig : extracting-2-line ] shows how this can be resolved with the help of the 2-line seed ( now the 2-line seed approaches and extracts the 2-line ) .    to transform @xmath1 to @xmath99 ,",
    "given the 4-line seed , do the following :    * while the minority color ( color chosen for @xmath90 ) is still present in @xmath1 : * * if on the current lowest row occupied by @xmath1 , there is a 2-line that can be extracted alone and move towards @xmath99 , then perform the shortest such movement that attaches the 2-line to the right endpoint of @xmath99 s line @xmath111 .",
    "* * if not , then use the 4-line to extract a single node from the lowest row of @xmath1 .",
    "if that node fits to the right endpoint of @xmath99 s line , place it there , otherwise , transfer it to an unoccupied position below row @xmath112 to be used later .",
    "* once the minority color has been exhausted from @xmath1 , alternate the two colors until @xmath106 has been placed ( @xmath105 and @xmath113 will only be placed in the end as they are part of the 4-line ) . to do this , use the 4-line to transfer nodes from @xmath1 and from the `` repository '' maintained below @xmath99 .",
    "when this occurs , if there are no more nodes left , run the termination phase , otherwise transfer the remaining nodes with the 4-line , one after the other , and attach them around the line of @xmath99 , beginning from the position to the left of @xmath90 counterclockwise , as decribed above ( skipping the position @xmath113 ) . *",
    "termination phase : the line - with - leaves is ready , apart from positions @xmath105 , @xmath113 which require a 2-line from the 4-line .",
    "if the position above @xmath105 is empty , then extract a 2-line from the 4-line and transfer it to the positions @xmath105 , @xmath113 .",
    "this completes the transformation .",
    "if the position above @xmath105 is occupied by a node @xmath114 , then place the whole 4-line vertically with its lowest endpoint on @xmath113 ( as in figure [ fig : termination-4-line ] ) . then rotate the top endpoint counterclockwise , to move above @xmath114 , then rotate @xmath114 clockwise around it to move to its left , then rotate the node above @xmath113 counterclockwise to move to @xmath105 , and finally restore @xmath114 to its original position .",
    "this completes the construction ( the 2-line that always remains can be transferred in the end to a predefined position ) .",
    "the natural next question is to what extent can the 2-line seed assumption be dropped .",
    "clearly , by proposition [ pro : counterexample - transformability ] , this can not be always possible .",
    "the following corollary gives a sufficient condition to drop the 2-line seed assumption , without looking deep into the structure of the shapes that satisfy it .",
    "assume rotations only and that connectivity can break .",
    "let @xmath1 and @xmath2 be two color - consistent connected shapes such that each one of them can self - extract a 2-line .",
    "then @xmath1 and @xmath2 can be transformed to each other .",
    "we remind that a rotation move in a grid can occur towards @xmath115 directions : @xmath116 , @xmath117 , @xmath118 , @xmath119 . in order for the first move to occur",
    "a node has to be present north or east but not both .",
    "the same requirements apply for moves @xmath120 , @xmath121 and @xmath115 respectively .",
    "if the connectivity of the shape can be broken and two nodes , a and b , are next to each other and a can perform a rotation using b , then b can perform a rotation using a if the connectivity of the shape can be broken .",
    "[ pro : move-2seed ] a 2-seed can be extracted from a shape iff a single rotation move is available on the shape .",
    "if a move is available on a shape but not on the perimeter , that move can be transferred to the perimeter through transformations .",
    "+   + let us consider a shape that has only two holes which are next to each other .",
    "we will call them cell @xmath1 and @xmath122 respectively . without loss of generality",
    "let us consider that cell @xmath1 is west of @xmath122 .",
    "we name @xmath64 the cell south of @xmath1 and @xmath123 the cell south of @xmath122 .",
    "now we propose the following method .",
    "the node residing in cell @xmath64 rotates to the cell @xmath122 and then the node in cell @xmath123 rotates to the cell @xmath1 .",
    "after these two moves , cell @xmath64 is renamed to @xmath1 and @xmath123 is renamed to @xmath122 .",
    "the cell south of the new @xmath1 and @xmath122 are named @xmath64 and @xmath123 respectively .",
    "this method can be repeated indefinitely until the two white cells reach the end of the grid .",
    "we have shown how two white cells can``travel '' south . by reversing the method",
    "the two white cells can travel north .",
    "the two white cells can travel east and west with a simple transformation before the method . after naming the four cells above",
    ", the node in cell @xmath64 rotates to @xmath122 . after this step",
    "we have two white cells , @xmath1 and @xmath64 .",
    "now rename @xmath64 into @xmath122 and @xmath122 into @xmath64 .",
    "now repeat the method and the two white positions will start travelling east . for the opposite direction , rotate the node in position @xmath123 to cell @xmath1 , and rename @xmath1 into @xmath123 and @xmath123 into @xmath1 . now repeat the method and the white cells can travel east . by using a combination of the above steps , the two white cells can move freely through the grid and reach any place .    now consider a shape where there are more than @xmath120 holes but at least two are next to each other .",
    "we will show that the two white cells that are side by side can travel to the perimeter of the shape using the above method even if they reach other white cells . without loss of generality",
    "suppose that the two white cells are the southernmost pair travelling south .",
    "if the travelling nodes ever meet a white cell south of them , we just need to show that we can turn this cell @xmath124 from a white one to a black one .",
    "thus we perform the following act : check if there is a node west of @xmath1 .",
    "if there is , move him south of @xmath1 .",
    "note that the cell west of @xmath64 is always a black node because we can not have two white cells next to each other south of @xmath1 . if not check if there is a node north of @xmath1 .",
    "note that there is always a node north of @xmath1 , else a move would never be available which is prohibited .",
    "now move the node north of @xmath1 to the west of @xmath1 then south of @xmath1 .",
    "this move is available if there is a node northwest of @xmath1 .",
    "if there is not , move the node north of @xmath1 , east of @xmath1 then south of @xmath1 .",
    "this move is available only if there is a node northeast of @xmath1 .",
    "if there is not , move the node east to the northeastern cell of @xmath1 then east of @xmath1 then south of @xmath1 .",
    "if there is not one , we reach the following shape.see figure [ fig : polynomial ]    the first node available northeast of @xmath1 or northwest of @xmath1 can be moved with rotations to the cell south of @xmath1 .",
    "if a node is not available on either of those lines then either the connectivity of the shape is breached because we know that there are nodes north of @xmath1 which have to be connected with the rest of the shape , or the @xmath1 cell is not part of the shape .",
    "both of those are not allowed so there is always a node northeast or northwest of @xmath1 .",
    "thus there is always a way to fill the cell south of @xmath1 . in a similar fashion",
    "if the cell south of @xmath122 was white , we could always fill it .",
    "+   + a 2-seed can be extracted from a shape if a single rotation move is available on the perimeter of the shape .",
    "+   + without the loss of generality suppose that nodes @xmath1 and @xmath2 are east - west to each other respectively , they are the southernmost nodes with a move available and none of them have any nodes in the two cells directly south of them .",
    "this means that the other can move as well .",
    "if node @xmath1 can perform a rotation to move south of @xmath2 then afterwards @xmath2 can perform a rotation to move west of @xmath1 .",
    "then @xmath2 can rotate south of @xmath1 and @xmath1 west of @xmath2 .",
    "this four step method can be repeated forever until either one of them finds a node south .",
    "if one of them finds a node south , called @xmath55 i.e. @xmath1 find a node south of him then @xmath2 moves north of @xmath1 and @xmath1 moves east of @xmath55 .",
    "then @xmath1 and @xmath55 perform the four step method .",
    "if the two nodes keep repeating this eventually they will disconnect from the shape as a 2-seed .",
    "+   + if a move is not available a 2-seed can not be extracted .",
    "+   + if a move is not available then no node can perform a rotation move .",
    "this means that no node can begin the process to extract himself as part of a 2-seed .",
    "rotation - transformability belongs to @xmath3 .    in lemma",
    "[ pro : move-2seed ] , we proved that we can extract a 2-seed from a shape iff a move is initially available . by theorem [ the : rotation - generic ] , if both shapes @xmath1 and @xmath2 have a 2-seed available then they can be transformed to each other .",
    "it follows that two shapes @xmath1 and @xmath2 can be transformed to each other iff both have a move available .",
    "now we define a @xmath125 grid where any shape with @xmath0 nodes can fit in .",
    "the time it takes for an algorithm to check if one of the shapes has a move available is @xmath7 .",
    "if for example the algorithm checks each individual node , that takes @xmath126 time and , therefore , @xmath7 time for @xmath0 nodes .",
    "so for two shapes it takes @xmath7 time to check if a move is available in each of the shapes .",
    "thus , the problem belongs to @xmath3 .",
    "if the two shapes , @xmath1 and @xmath2 , are the same , then they can trivially transform to each other without any moves .",
    "an algorithm can check this by simply mapping the grid of the first shape , which takes @xmath7 time , and then check the second shape to see if the black cells match . if it ever finds a black cell that does not exist on the first shape , or it finds a white cell when it expected a black cell",
    ", then it decides that the two shapes are not the same .",
    "this process takes @xmath7 time because it is equals to the time it takes to visit every @xmath0 node .",
    "thus , it takes @xmath7 time to check if @xmath127 .",
    "in this section , we restrict our attention to transformations that transform a connected shape @xmath1 to one of its color - consistent shapes @xmath2 , without ever breaking the connectivity of the shape on the way . as already mentioned in the introduction , connectivity preservation is a very desirable property for programmable matter , as , among other positive implications , it guarantees that communication between all nodes is maintained , it minimizes transformation failures , requires less sophisticated actuation mechanisms , and increases the external forces required to break the system apart .",
    "we begin by proving that rotc - transformability can be decided in deterministic polynomial space .",
    "rotc - transformability is in @xmath4 .",
    "we first present a _ nondeterministic _",
    "turing machine ( ntm ) @xmath128 that decides transformability in polynomial space .",
    "@xmath128 takes as input two shapes @xmath1 and @xmath2 , both consisting of @xmath0 nodes and at most @xmath129 edges .",
    "a reasonable representation is in the form of a binary @xmath125 matrix ( representing a large enough sub - area of the grid ) where an entry is 1 iff the corresponding position is occupied by a node .",
    "given the present configuration @xmath55 , where @xmath130 initially , @xmath128 nondeterministically picks a valid rotation movement of a single node .",
    "this gives a new configuration @xmath131 .",
    "then @xmath128 replaces the previous configuration with @xmath131 in its memory , by setting @xmath132 .",
    "moreover , @xmath128 maintains a counter @xmath133 ( counting the number of moves performed so far ) , with maximum value equal to the total number of possible shape configurations , which is at most @xmath134 in the binary matrix encoding of configurations .",
    "to set up such a counter , @xmath128 just have to reserve for it @xmath135 ( binary ) tape - cells , all initialized to 0 .",
    "every time @xmath128 makes a move , as above , after setting a value to @xmath131 it also increases @xmath133 by 1 , i.e. , sets @xmath136 .",
    "then @xmath128 takes another move and repeats . if it ever holds that @xmath137 ( may require @xmath128 to perform a polynomial - space pattern matching on the @xmath125 matrix to find out ) , then @xmath128 accepts .",
    "if it ever holds that the counter is exhausted , that is , all its bits are set to 1 , @xmath128 rejects . if @xmath1 can be transformed to @xmath2 , then there must be a transformation beginning from @xmath1 and producing @xmath2 , by a sequence of valid rotations , without ever repeating a shape .",
    "thus , some branch of @xmath128 s computation will follow such a sequence and accept , while all non - accepting branches will reject after at most @xmath134 moves ( when @xmath133 reaches its maximum value ) .",
    "if @xmath1 can not be transformed to @xmath2 , then all branches will reject after at most @xmath134 moves .",
    "thus , @xmath128 correctly decides transformability .",
    "every branch of @xmath128 , at any time , stores at most to shapes ( the previous and the current ) , which requires @xmath138 space in the matrix representation , and a @xmath134-counter which requires @xmath138 bits .",
    "it follows that every branch uses space polynomial in the size of the input .",
    "so , far we have proved that transformability is decidable in nondeterministic polynomial ( actually , linear ) space . by applying savitch s theorem @xcite",
    ", space can be converted to a deterministic tm that uses only @xmath139 space .",
    "formally , it establishes that for any function @xmath140 , where @xmath141 , @xmath142 .",
    "] we conclude that transformability is also decidable in deterministic polynomial space ( actually , quadratic ) , i.e. , it is in @xmath4 .",
    "recall that in the line folding problem , the initial shape is a ( connected ) horizontal line of any even length @xmath0 , with nodes @xmath86 , and the transformation asks to fold the line onto itself , forming a double - line of length @xmath87 and width 2 . as part of the proof of theorem [ the : rotc - rot ] , it was shown that if @xmath89 , then it is impossible to solve the problem by rotation only ( if @xmath143 , it is trivially solved , just by rotating each endpoint above its unique neighbor ) . in the next proposition",
    ", we employ again the idea of a seed to show that with a little external help the transformation becomes feasible .",
    "if there is a 3-line seed @xmath144 , horizontally aligned over nodes @xmath145 of the line , then the line can be folded .",
    "we distinguish two cases , depending on whether we want the seed to be part of the final folded line or not .",
    "if yes , then we can either use a 4-line seed directly , over nodes @xmath146 , or a 3-line seed but require @xmath0 to be odd ( so that @xmath147 is even ) . if not , then @xmath0 must be even .",
    "we show the transformation for the first case , with @xmath0 odd and a 3-line seed ( the other cases can be then treated with minor modifications ) .",
    "we first show a simple reduction from an odd line with a 3-line seed starting over its third node to an even line with a 4-line seed starting over its third node . by rotating @xmath90 clockwise over @xmath148",
    ", we obtain the 4-line seed @xmath149 .",
    "it only remains to move the whole seed two positions to the right ( by rotating each of its 2-lines clockwise around themselves ) . in this manner",
    ", we obtain an even - length line @xmath150 and a 4-line seed starting over its third node , without breaking connectivity .",
    "therefore , in what follows we may assume that the initial shape is an even - length line @xmath86 with a 4-line seed @xmath151 horizontally aligned over nodes @xmath146 .",
    "see figure [ fig : line - folding - cp ] .",
    "we believe that in order to transform one shape to another we first need to find a seed that can both move on the perimeter of a shape and being able to reach every possible cell of the perimeter .",
    "we call this for simplicity : traverse the perimeter . after this",
    "is guaranteed we want the seed to be able to extract nodes and move them gradually to specific cells of the perimeter in order to create the desired shape .",
    "thus the seed could actually simulate the rotation - sliding movement .",
    "we begin with the smallest seed possible and try to tackle the problem of moving on the perimeter of a line .",
    "note that we do not allow the nodes of the shape to move in order to simplify and strengthen the model .",
    "a 2-seed can not traverse the perimeter a line without breaking the connectivity .",
    "observe figure [ fig:2-seed - black ] , shape number @xmath152 . the 2-seed has reached the end of the line and now it tries to move east of the line and then south of it .",
    "note that the black node has @xmath120 possible moves .",
    "it can either perform a single move and stop above the red node , or perform two subsequent moves and stop east of the red node . no matter the choice , the red node",
    "then is not able to move because any possible move would break the connectivity of the shape .",
    "see figure [ fig:2-seed - black ] , shapes number @xmath153 .",
    "thus the black node has to stay in place and only the red node can move now .",
    "observe now that the red node is trapped in a loop of @xmath120 possible moves ( excluding the act of moving above the black node which would not allow us to try and move under the line ) : become the new endpoint or move under the end of the line .",
    "the first case leads necessarily to the second case because it is the only legal move available ( excluding the move of looping back )",
    ". see figure [ fig:2-seed - red ] .",
    "but when we each the second case , once more we are limited into looping back to the initial positions .",
    "thus a 2-seed can not traverse the perimeter of a line without breaking the connectivity    a 4-seed can not traverse the perimeter of a line without breaking the connectivity .    consider the last time ,",
    "_ tlast _ , that the black and red nodes in rows@xmath154i increases from @xmath120 to @xmath121 .",
    "this means that either a black or a red moved at _ tlast _ from @xmath155 to @xmath49 . from now on ,",
    "none of those @xmath121 nodes can go back to rows@xmath156i and there is one node remaining in rows@xmath156i . actually that node u must necessarily be in row @xmath155 ,",
    "otherwise the connectivity would have broken .",
    "so no node from rows@xmath154i can return to rows@xmath156i anymore and there is a single node _ u _",
    "remaining in row @xmath157 .",
    "we begin by finding the possible shapes that meet the above requirements .",
    "the rotation of the node at _ tlast _ was necessarily clockwise , as the closest counterclockwise move to the line is from @xmath42 to @xmath33 , but it requires @xmath33 to be empty before rotating , but then @xmath120 nodes in rows@xmath154i and only one additional ( u ) in rows@xmath156i can not support connectivity .",
    "we will now distinguish the _ tlast _ into cases .",
    "if u is a black node : if u is at position @xmath158 then it is stuck forever ( blue node can not move and the other black and red can not go up any more to carry u. it also can not be at @xmath159 as this does not permit a clockwise move of a red from @xmath42 , so it has to be at @xmath41",
    ". see figure [ fig:4seed - tlast ] shape number @xmath120 .",
    "node u is connected to a only via the red below it , which therefore can not move unless u moves first(because no node can return to row@xmath156i any more to support u via another path .",
    "but the only way for u to move is for the black southeast node to move first , which in turn can not move unless the rightmost red moves up which is impossible as no node may return to row@xmath156i ( that red node can move down but then the only available movement is to return to its previous position .",
    "if u is a red node : it can not be at @xmath160 as before and it can not be at @xmath42 as the rotation at _ tlast _ was then necessarily from @xmath41 which is blocked by u. observe that the clockwise rotation could not have been from @xmath159 .",
    "the only way to support connectivity in this case with @xmath120 nodes in rows@xmath154i and @xmath120 in rows@xmath156i , is by having the following shape but then a clockwise rotation of the upper black is impossible .",
    "therefore , if u is a red node it has to be at @xmath161 . see figure [ fig:4seed - tlast ] shape number @xmath152 .",
    "either nodes in rows@xmath154i can not move at all , or if the bottom black is far away , the rightmost black is trapped in a loop going down and then up to its original positions as before .",
    "therefore the 4-seed can not traverse the perimeter of a line without breaking the connectivity .",
    "a 6-seed can traverse the perimeter of a _ discrete - convex _ shape without breaking the connectivity .",
    "consider a folded 6-seed occupying cells @xmath33",
    ", @xmath37 , @xmath162 and @xmath36 , @xmath38 , @xmath163 .",
    "since the shape is discrete - convex , iff there is any node present in cells @xmath164 or @xmath165 , there can be no node present in cells @xmath39 or @xmath40 .",
    "for the same reason if there is a node in cells @xmath166 or @xmath167 or @xmath168 there can be no node in cells @xmath41 or @xmath42 or @xmath159.in order to place this seed at those cells , one of the neighbouring cells has to be occupied by a node .",
    "without loss of generality , suppose that the 6-seed tries to move east .",
    "there are @xmath115 distinct cases for this move .",
    "note that in the following @xmath115 cases we assume the absolute minimum amount of neighbouring nodes .",
    "if at any case there were more present at the shape , the rotations would be the exact same without any modification or problem .",
    "a node occupies cell @xmath164 . in order for this shape to be discrete - convex",
    ", a node has to be present in cell @xmath165 . in this case",
    "the 6-seed has to move north and performs the rotations described in figure [ fig : orientation ] , [ fig : orientation1 ] , [ fig : orientation2 ] , [ fig : orientation3 ] if a node is present in cell @xmath169 and the orientations described in figures [ fig : orientation - climb ] if a node is not present in cell @xmath169 in order to keep moving .",
    "a node occupies cell @xmath165 and no node occupies cell @xmath164 . in this case",
    "the 6-seed performs the rotations described in figure [ fig : step ] in order to _ climb _ the step . note that since the 6-seed begins and ends the move while preserving its shape , it is guaranteed that any number of steps can be climbed this way .",
    "a node occupies cell @xmath170 and no node occupies cell @xmath165 or @xmath164 . in this case",
    "the 6-seed performs the rotations described in figure [ fig : slide ] rotations in order to _ slide _ east .",
    "no nodes occupy cells @xmath170 , @xmath165 and @xmath164 . in this case",
    "the 6-seed performs the rotations described in figure [ fig : dstep ] in order to reach a shape that matches the conditions of the step case .",
    "therefore the 6-seed can now perform a _",
    "climb _ move in order to continue .",
    "we can replicate the results for south , west , north directions by simply rotating the whole shape by @xmath171 , @xmath172 , @xmath173 degrees respectively .",
    "an 8-seed can traverse the perimeter of a _ discrete - convex _ shape without breaking the connectivity .",
    "consider a folded 8-seed occupying cells @xmath33",
    "@xmath37 @xmath162 @xmath164 and @xmath36 , @xmath38 , @xmath163 , @xmath165 .",
    "since the shape is discrete - convex , iff there is any node present in cells @xmath174 or @xmath175 , there can be no node present in cells @xmath39 or @xmath40 .",
    "for the same reason if there is a node in cells @xmath166 or @xmath167 or @xmath168 or @xmath170 there can be no node in cells @xmath41 or @xmath42 or @xmath159 or @xmath169.in order to place this seed at those cells , one of the neighbouring cells has to be occupied by a node .",
    "without loss of generality , suppose that the 8seed tries to move east .",
    "there are @xmath115 distinct cases for this move .",
    "note that in the following @xmath115 cases , if not mentioned , we assume the absolute minimum amount of neighbouring nodes .",
    "if at any case there were more present at the shape , the rotations would be the exact same without any modification or problem .",
    "a node occupies cell @xmath174 . in order for this shape to be discrete - convex",
    ", a node has to present in cell @xmath175 . in this case",
    "the 8seed has to move north and performs the rotations described in figure [ fig:8orientation ] if a node is present in cell @xmath176 ; and the orientations described in figure [ fig:8orientation - climb ] if a node is not present in cell @xmath176 in order to keep moving .",
    "a node occupies cell @xmath175 and no node occupies cell @xmath174 . in this case",
    "the 8-seed performs the rotations described in figure [ fig:8step ] and in figure [ fig:8step1 ] order to _ climb _ the step .",
    "note that since the 8-seed begins and ends the move while preserving its shape , it is guaranteed that any number of steps can be climbed this way .",
    "a node occupies cell @xmath177 and no node occupies cell @xmath175 or @xmath174 . in this case",
    "the 8-seed performs the rotations described in figure [ fig:8slide ] rotations in order to _ slide _ east .",
    "no nodes occupy cells @xmath177 , @xmath175 and @xmath174 . in this case",
    "the 8-seed performs the rotations described in figure [ fig:8dstep ] in order to reach a shape that matches the conditions of the first case .",
    "therefore the 8-seed can now perform a _",
    "climb _ move in order to continue .",
    "we can replicate the results for south , west , north directions by simply rotating the whole shape by @xmath171 , @xmath172 , @xmath173 degrees respectively .",
    "our goal here was to show that since both a 6-seed and an 8-seed can traverse the perimeter of any discrete - convex shape , then a 6-seed may be able to start extracting @xmath120 nodes at a time from the shape a , move them as an 8-seed at a designated cell , leave them there , and continue this loop while creating i.e. a line with leaves .",
    "afterwards we could perform the same method for shape b. if we succeeded in both shapes , then we could transform one to another .",
    "in this section , we study the combined effect of rotation and sliding movements .",
    "we shall prove that rotation and sliding together , are _ transformation - universal _ , meaning that they can transform any given shape to any other shape of the same size without ever breaking the connectivity during the transformation .",
    "it would be useful for the reader to recall definitions [ def : perimeter1 ] , [ def : perimeter2 ] , [ def : perimeter3 ] , and [ def : perimeter4 ] and proposition [ pro : extended - external - connected ] , from section [ sec : prel ] , as the results that follow make extensive use of them .",
    "as the perimeter is a ( connected ) polygon , it can be traversed by a particle walking on its edges ( the unit - length segments ) .",
    "we now show how to `` simulate '' the particle s movement and traverse the cell - perimeter by a node , using rotation and sliding only .",
    "[ lem : walk - cell - perimeter-1 ] if we place a node @xmath29 on any position of the cell - perimeter of a connected shape @xmath1 , then @xmath29 can walk the whole cell - perimeter and return to its original position by using only rotations and slidings .",
    "we show how to `` simulate '' the walk of a particle moving on the edges of the perimeter",
    ". the simulation implements the following simple rules :    1 .   if the current line - segment traversed by the particle concerns the same red cell as the one of the immediately previous line - segment traversed",
    ", then stay put .",
    "2 .   if not",
    "if the two consecutive line - segments traversed form a line - segment of length 2 , then move by sliding one position in the same direction as the particle .",
    "if the two consecutive line - segments traversed are perpendicular to each other , then move by a single rotation in the same direction as the particle .",
    "it remains to prove that @xmath29 can indeed always perform the claimed movements .",
    "( 1 ) is trivial . for ( 2.a ) , a line - segment of length 2 on the perimeter is always defined by two consecutive blacks to the interior and two consecutive empty cells to the exterior ( belonging to the cell - perimeter ) , therefore , @xmath29 can slide on the empty cells . for ( 2.b ) , there must be a black in the internal angle defined by the line - segments and an empty cell diagonally to it , in the exterior ( for an example , see the right black node on the highest row containing nodes of @xmath1 , in figure [ fig : perimeter - definition ] , section [ sec : prel ] ) .",
    "therefore , rotation can be performed .",
    "next , we shall prove that @xmath29 need not be an additional node , but actually a node belonging to the shape , and in particular one of those lying on the shape s boundary .",
    "[ lem : r - external - surface ] let @xmath1 be a connected shape of order at least 2 .",
    "then there is a subset @xmath178 of the nodes on @xmath1 s external surface , such that @xmath179 and for all @xmath180 , if we completely remove @xmath29 from @xmath1 , then the resulting shape @xmath181 is also connected .",
    "if the extended external surface of @xmath1 contains a cycle , then such a cycle must necessarily have length at least @xmath115 ( due to geometry ) . in this case ,",
    "any node of the intersection of the external surface ( non - extended ) and the cycle can be removed without breaking @xmath1 s connectivity .",
    "if the extended external surface of @xmath1 does not contain a cycle , then it corresponds to a tree graph which by definition has at least 2 leaves , i.e. , nodes of degree exactly 1 .",
    "any such leaf can be removed without breaking @xmath1 s connectivity . in both cases , @xmath179 .",
    "[ lem : walk - cell - perimeter-2 ] pick any @xmath180 ( @xmath178 defined on a connected shape @xmath1 as above ) .",
    "then @xmath29 can walk the whole cell - perimeter of @xmath181 by rotations and slidings .",
    "it suffices to observe that @xmath29 already lies on the cell - perimeter of @xmath62 .",
    "then , by lemma [ lem : walk - cell - perimeter-1 ] , it follows that such a walk is possible .",
    "we are now ready to state and prove the universality theorem of rotations and slidings .",
    "[ the : universality - rot - sl ] let @xmath1 and @xmath2 be any connected shapes , such that @xmath182 . then @xmath1 and @xmath2 can be transformed to each other by rotations and slidings , without breaking the connectivity during the transformation .",
    "it suffices to show that any connected shape @xmath1 can be transformed to a spanning line @xmath183 by rotations and slidings only and without breaking connectivity during the transformation .",
    "if we show this , then @xmath1 can be transformed to @xmath183 and @xmath2 can be transformed to @xmath183 ( as @xmath1 and @xmath2 have the same order , therefore correspond to the same spanning line @xmath183 ) , and by reversibility of these movements , @xmath1 and @xmath2 can be transformed to each other via @xmath183 .",
    "pick the rightmost column of the grid containing at least one node of @xmath1 , and consider the lowest node of @xmath1 in that column .",
    "call that node @xmath29 .",
    "observe that all cells to the right of @xmath29 are empty .",
    "let the cell of @xmath29 be @xmath33 .",
    "the final constructed line will start at @xmath33 and end at @xmath184 .",
    "the transformation is partitioned into @xmath185 phases . in each phase @xmath69 , we pick a node from the original shape and move it to position @xmath186 , that is , to the right of the right endpoint of the line formed so far . in phase 1 , position",
    "@xmath37 is a cell of the cell - perimeter of @xmath1 .",
    "so , even if it happens that @xmath29 is a node of degree 1 , by lemma [ lem : r - external - surface ] , there must be another such node @xmath187 that can walk the whole cell - perimeter of @xmath188 ( the latter , due to lemma [ lem : walk - cell - perimeter-2 ] ) .",
    "as @xmath189 , @xmath37 is also part of the cell - perimeter of @xmath62 , therefore , @xmath30 can move to @xmath37 by rotations and slidings .",
    "as @xmath62 is connected ( by lemma [ lem : r - external - surface ] ) , @xmath190 is also connected and also all intermediate shapes were connected , because @xmath30 moved on the cell - perimeter and , therefore , it never disconnected from the rest of the shape during its movement .    in general",
    ", the transformation preserves the following invariant . at the beginning of phase @xmath69 , @xmath191",
    ", there is a connected shape @xmath192 ( where @xmath193 ) to the left of of column @xmath110 ( @xmath110 inclusive ) and a line of length @xmath73 starting from position @xmath37 and growing to the right . restricting attention to @xmath192",
    ", there is always a @xmath194 that could move to position @xmath37 if it were not occupied .",
    "this implies that before the final movement that places it on @xmath37 , @xmath30 must have been in one of @xmath41 and @xmath42 , if we assume that @xmath30 always walks in the clockwise direction .",
    "observe now that from each of these positions @xmath30 can perform zero or more right slidings above the line in order to reach the position above the right endpoint of the line .",
    "when this occurs , a final clockwise rotation makes @xmath30 the new right endpoint of the line .",
    "the only exception is when @xmath30 is on @xmath42 and there is no line to the right of @xmath33 ( this implies the existence of a node on @xmath41 , otherwise connectivity of @xmath192 would have been violated ) . in this case",
    ", @xmath30 just performs a single downward sliding to become the right endpoint of the line .",
    "[ the : ladder - time ] the transformation of theorem [ the : universality - rot - sl ] requires @xmath13 movements in the worst case .    consider a ladder shape of order @xmath0 , as depicted in figure [ fig : ladder ] .",
    "the strategy of theorem [ the : universality - rot - sl ] will choose to construct the line to the right of node @xmath29 .",
    "the only node that can be selected to move in each phase without breaking the shape s connectivity is the top - left node .",
    "initially , this is @xmath30 , which must perform @xmath195 movements to reach its position to the right of @xmath29 . in general , the total number of movements @xmath196 , performed by the transformation of theorem [ the : universality - rot - sl ] on the ladder , is given by @xmath197    theorem [ the : ladder - time ] shows that the above generic strategy is slow in some cases , as is the case of transforming a ladder shape into a spanning line .",
    "we shall now show that there are pairs of shapes for which any strategy and not only this particular one , may require a quadratic number of steps to transform one shape to the other .",
    "[ def : potential - distance ] define the _ potential of a shape _ @xmath1 as its minimum `` distance '' from the line @xmath183 , where @xmath198 .",
    "the _ distance _ is defined as follows : consider any placement of @xmath183 relative to @xmath1 and any pairing of the nodes of @xmath1 to the nodes of the line . then sum up the manhattan distances and @xmath199 is given by @xmath200 . ] between the nodes of each pair .",
    "the minimum sum between all possible relative placements and all possible pairings is the distance between @xmath1 and @xmath183 and also @xmath1 s potential . in case",
    "the two shapes do not have an equal number of nodes , then any matching is not perfect and the distance can be defined as infinite .",
    "observe that the potential of the line is 0 as it can be totally aligned on itself and the sum of the distances is 0 .    the potential of the ladder is @xmath13 .",
    "we prove it for horizontal placement of the line , as the vertical case is symmetric .",
    "any such placement leaves either above or below it at least half of the nodes of the ladder ( maybe minus 1 ) .",
    "w.l.o.g . let it be above it .",
    "every two nodes , the height increases by 1 , therefore there are 2 nodes at distance 1 , 2 at distance 2,@xmath201 , 2 at distance n/4 .",
    "any matching between these nodes and the nodes of the line gives for every pair a distance at least as large as the vertical distance between the ladder s node and the line , thus , the total distance is at least @xmath202 .",
    "we conclude that the potential of the initial ladder is @xmath13 .",
    "any transformation strategy based on rotations and slidings and performing a single movement per step , requires @xmath13 steps to transform a ladder into a line .    to show that @xmath6 movements are needed to convert the ladder to a line",
    ", it suffices to observe that the difference in their potentials is that much and that one rotation or one sliding can decrease the potential by at most 1 .",
    "the above lower bound is independent of connectivity preservation .",
    "it is just a matter of the total distance based on single distance - one movements .    finally , it is interesting to observe that such lower bounds can be computed in polynomial time , because there is a polynomial - time algorithm for computing the distance between two shapes .",
    "let @xmath1 and @xmath2 be connected shapes .",
    "then their distance @xmath203 can be computed in polynomial time .",
    "the algorithm picks a node @xmath204 , a cell @xmath205 of the grid occupied by a node @xmath187 , and an orientation @xmath206 and draws a copy of the shape @xmath2 , starting with @xmath29 on @xmath205 and respecting the orientation @xmath207 .",
    "then , it constructs ( in its memory ) a complete weighted bipartite graph @xmath208 , where @xmath209 and @xmath210 are equal to the node - sets of @xmath1 and @xmath2 , respectively .",
    "the weight @xmath211 for @xmath212 and @xmath213 is defined as the distance from @xmath15 to @xmath16 ( given the drawing of shape @xmath2 relative to shape @xmath1 ) . to compute the minimum total distance pairing of the nodes of @xmath1 and @xmath2 for this particular placement of @xmath1 and @xmath2",
    ", the algorithm computes a minimum cost perfect matching of @xmath208 , e.g. , by the kuhn - munkres algorithm ( a.k.a .",
    "the hungarian algorithm ) @xcite , and the sum of the weights of its edges @xmath69 , and sets @xmath214 .",
    "then the algorithm repeats for the next selection of @xmath204 , cell @xmath205 occupied by a node @xmath187 , and orientation @xmath207 . in the end , the algorithm gives @xmath215 as output . to see that @xmath216 , observe that the algorithm just implements the procedure for computing the distance , of definition [ def : potential - distance ] , with the only differences being that it does not check all pairings of the nodes , instead directly computes the minimum - cost pairing , and that it does not try all relative placements of @xmath1 and @xmath2 but only those in which @xmath1 and @xmath2 share at least one cell of the grid . to see that this selection is w.l.o.g .",
    ", assume that a placement of @xmath1 and @xmath2 in which no cell is shared achieves the minimum distance and observe that , in this case , @xmath1 could be shifted one step `` closer '' to @xmath2 , strictly decreasing their distance and , thus , contradicting the optimality of such a placement .",
    "as the relative placements of @xmath1 and @xmath2 are @xmath217 and the kuhn - munkres algorithm is a polynomial - time algorithm ( in the size of the bipartite graph ) , we conclude that the algorithm computes the distance in polynomial time .    to give a faster transformation either pipelining must be used ( allowing for more than one movement in parallel ) or more complex mechanisms that move sub - shapes consisting of many nodes , in a single step .",
    "we now maintain the connectivity preservation requirement but allow an unbounded number of rotation and/or sliding movements to occur simultaneously in a single step .",
    "[ pro : ladder - pipelining ] there is a pipelining strategy that transforms a ladder into a line in @xmath7 parallel time .",
    "number the nodes of the ladder 1 through @xmath0 starting from the top and following the ladder s connectivity until the bottom - right node is reached .",
    "these gives an even - numbered upper diagonal and an odd - numbered lower diagonal .",
    "node 1 moves as in theorem [ the : ladder - time ] .",
    "any even node @xmath218 starts moving as long as its upper odd neighbor has reached the same level as @xmath219 ( e.g. , node 2 first moves after node 1 has arrived to the right of node 3 ) .",
    "any odd node @xmath220 starts moving as long as its even left neighbor has moved one level down ( e.g. , node 3 first moves after node 2 has arrived to the right of 5 ) .",
    "after a node starts moving , it moves in every step as in theorem [ the : ladder - time ] ( but now many nodes can move in parallel , implementing a pipelining strategy ) .",
    "it can be immediately observed that any node @xmath49 starts after at most 3 movements of node @xmath221 ( actually , only 2 movements for even @xmath49 ) , so after roughly at most @xmath222 steps , node @xmath223 starts .",
    "moreover , a node that starts , arrives at the right endpoint of the line after at most @xmath0 steps , which means that after at most @xmath224 steps all nodes have taken their final position in the line .",
    "proposition [ pro : ladder - pipelining ] gives a hint that pipelining could be a general strategy to speed - up transformations .",
    "we next show how to generalize this technique to any possible pair of shapes .",
    "[ the : general - pipelining ] let @xmath1 and @xmath2 be any connected shapes , such that @xmath182 .",
    "then there is a pipelining strategy that can transform @xmath1 to @xmath2 ( and inversely ) by rotations and slidings , without breaking the connectivity during the transformation , in @xmath7 parallel time .",
    "the transformation is a pipelined version of the sequential transformation of theorem [ the : universality - rot - sl ] .",
    "now , instead of picking an arbitrary next candidate node of @xmath192 to walk the cell - perimeter of @xmath192 clockwise , we always pick the rightmost clockwise node @xmath225 , that is , the node that has to walk the shortest clockwise distance to arrive at the line under formation .",
    "this implies that the subsequent candidate node @xmath226 to walk , is always `` behind '' @xmath227 in the clockwise direction and is either already free to move or is enabled after @xmath227 s departure .",
    "observe that after at most 3 clockwise movements , @xmath227 can not block any more the way of @xmath226 on the ( possibly updated ) cell - perimeter .",
    "moreover , the clockwise move of @xmath226 , only introduces a gap in its original position , therefore it only affects the structure of the cell - perimeter `` behind '' it .",
    "the strategy is to start the walk of node @xmath226 as soon as @xmath227 is no longer blocking its way . as in proposition",
    "[ pro : ladder - pipelining ] , once a node starts , it moves in every step , and again any node arrives after at most @xmath0 movements .",
    "it follows , that if the pipelined movement of nodes can not be blocked in any way , after @xmath224 steps all nodes must have arrived at their final positions .",
    "observe now that the only case in which pipelining could be blocked is when a node is sliding through a ( necessarily dead - end ) `` tunnel '' of height 1 ( such an example is the red tunnel on the third row from the bottom , in figure [ fig : perimeter - definition ] ) . to avoid this",
    ", the nodes shortcut the tunnel by visiting only its first position @xmath33 and then simply skipping the whole walk inside it ( that walk would just return them to position @xmath33 after a number of steps ) .",
    "we next show that even if @xmath1 and @xmath2 are labeled shapes , that is , their nodes are assigned the indices @xmath228 ( uniquely , i.e. , without repetitions ) , we can still transform the labeled @xmath1 to the labeled @xmath2 with only a linear increase in parallel time .",
    "we only consider transformations in which the nodes never change indices in any way ( e.g. , can not transfer them , or swap them ) , so that each particular node of @xmath1 must eventually occupy ( physically ) a particular position of @xmath2 ( the one corresponding to its index ) .    the labeled version of the transformation of theorem [ the : general - pipelining ] can be performed in @xmath7 parallel time .",
    "recall from theorem [ the : universality - rot - sl ] that the line were constructed to the right of some node @xmath29 . that node was the lowest node in that column , therefore , there is no node below @xmath29 in that column .",
    "the procedure of theorem [ the : general - pipelining ] , if applied on the labeled versions of @xmath1 and @xmath2 will result in two ( possibly differently ) labeled lines , corresponding to two permutations of @xmath229 , call them @xmath230 and @xmath231 .",
    "it suffices to show a way to transform @xmath230 to @xmath231 in linear parallel time , as then labelled @xmath1 is transformed to @xmath230 , then @xmath230 to @xmath231 , and then @xmath231 to @xmath2 ( by reversing the transformation from @xmath2 to @xmath231 ) , all in linear parallel time .    to do this",
    ", we actually slightly modify the procedure of theorem [ the : general - pipelining ] , so that it does not construct @xmath230 in the form of a line , but in a different form that will allow us to transform it fast to @xmath231 without breaking connectivity .",
    "what we will construct is a double line , with the upper part growing to the right of node @xmath29 as before and the lower part starting from the position just below @xmath29 and also growing to the right .",
    "the upper line is an unordered version of the left half of @xmath231 and the lower line is an unordered version of the right half of @xmath231 . to implement the modification ,",
    "when a node arrives above @xmath29 , as before , if it belongs to the upper line , it goes to the right endpoint of the line as before , while if it belongs to the lower line , it continues its walk in order to teach the right endpoint of the lower line .",
    "when the transformation of labeled @xmath1 to the folded line is over , the procedure has to order the nodes of the folded line and then unfold in order to produce @xmath231 .",
    "we first order the upper line in ascending order . while we do this",
    ", the lower line stays still in order to preserve the connectivity .",
    "when we are done , we order the lower line in descending order , now keeping the upper line still .",
    "finally , we perform a parallel right sliding of the lower line ( requiring linear parallel time ) , so that its inverse permutation ends up to the right of the upper line , thus forming @xmath232 .",
    "it remains to show how the ordering of the upper line can be done in linear parallel time without breaking connectivity . to do this",
    ", we simulate a version of the odd - even sort algorithm ( a.k.a . parallel bubble sort ) which sorts a list of @xmath0 numbers with @xmath7 processors in @xmath7 parallel time .",
    "the algorithm progresses in odd and even phases . in the odd phases , the odd positions are compared to their right neighbor and in the even phases to their left neighbor and if two neighbors are ever found not to respect the ordering a swap of their values is performed . in our simulation ,",
    "we break each phase into two subphases as follows . instead of performing all comparisons at once , as we can not do this and preserve connectivity , in the first subphase we do every second of them and in the second subphase the rest so that between any pair of nodes being compared there are 2 nodes that are not being compared at the same time . now",
    "if the comparison between the @xmath233 and the @xmath155 node indicates a swap , then @xmath155 rotates over @xmath234 , @xmath49 slides right to occupy the previous position of @xmath155 , and finally @xmath155 slides left over @xmath49 and then rotates left around @xmath49 to occupy @xmath49 s previous position .",
    "this swapping need 4 steps and does not break connectivity .",
    "the upper part has @xmath87 nodes , each subphase takes 4 steps to swap everyone ( in parallel ) , each phase has 2 sub - phases , and @xmath7 phases are required for the ordering to complete , therefore , the total parallel time is @xmath7 for the upper part and similarly @xmath7 for the lower part .",
    "this completes the proof .",
    "an immediate observation is that a linear - time transformation does not seem satisfactory for all pairs of shapes . to this end , take a square @xmath64 and rotate its top - left corner @xmath29 , one position clockwise , to obtain an almost - square @xmath235 . even though , a single counter - clockwise rotation of @xmath29 suffices to transform @xmath235 to @xmath64 ,",
    "the transformation of theorem [ the : general - pipelining ] may go all the way around and first transform @xmath235 to a line and then transform the line to @xmath64 . in this particular example , the distance between @xmath64 and @xmath235 , according to definition [ def : potential - distance ] , is @xmath120 , while the generic transformation requires @xmath236 parallel time .",
    "so , it is plausible to ask if any transformation between two shapes @xmath1 and @xmath2 can be performed in time that grows as a function of their distance @xmath203 .",
    "we show that this can not always be the case , by presenting two shapes @xmath1 and @xmath2 with @xmath237 , such that @xmath1 and @xmath2 require @xmath14 parallel time to be transformed to each other .",
    "there are two shapes @xmath1 and @xmath2 with @xmath237 , such that @xmath1 and @xmath2 require @xmath14 parallel time to be transformed to each other .",
    "the two shapes , a black and a red one , are depicted in figure [ fig : distance - counterexample ] .",
    "both shapes form a square which is empty inside and also open close to the middle of its bottom side .",
    "the difference between the two shapes is the positioning of the bottom `` door '' of length 2 .",
    "the red shape has it exactly in the middle of the side , while the black shape has it shifted one position to the left .",
    "equivalently , the bottom side of the red shape is `` balanced '' , meaning that it has an equal number of nodes in each side of the vertical dashed axis that passes through the middle of the bottom , while the black shape is `` unbalanced '' having one more node to the right of the vertical axis than to its left .    to transform the black shape into the red one ,",
    "a node must necessary cross either the vertical or the horizontal axis . because , if nothing of the two happens , then , no matter the transformation , we wo nt be able to place the axes so that the running shape has two pairs of balanced quadrants , while , on the other hand , the red shape satisfies this , by pairing together the two bottom quadrants and the two upper quadrants . clearly , no move can be performed in the upper quadrants initially , as this would break the shape s connectivity .",
    "the only nodes that can move initially are @xmath29 and @xmath219 and no other node can ever move unless first approached by some other node that could already move . observe also that @xmath29 and @xmath219 can not cross the vertical boundary of their quadrants , unless with help of other nodes .",
    "but the only way for a second node to move in any of these quadrants ( without breaking connectivity ) is for either @xmath29 or @xmath219 to reach the corner of their quadrant which takes at least @xmath238 steps and then another @xmath83 steps for any ( or both ) of these nodes to reach the boundary , that is , at least @xmath239 steps , which already proves the required @xmath14 parallel - time lower bound ( even a parallel algorithm has to pay the initial sequential movement of either @xmath29 or @xmath219 ) .",
    "@xmath240 : transform any connected shape into a shape where all nodes are either in the @xmath15 axis or the @xmath16 axis .    a node on a black cell of the grid",
    "is called a potential hole node if removing him would create a non - compact shape .",
    "we define a _ local - info based _ movement ( lib movement ) , a movement that a leader decides to perform without consulting the whole network .",
    "no algorithm based on lib movements can solve the line transformation problem without breaking the connectivity .",
    "observe the following shapes .",
    "see figure [ fig : lib - movement - counterexample ] if an algorithm performed a lib movement at the first shape , the same algorithm would have to perform the same movement at the second shape because it can not distinguish the two shapes .",
    "that movement would break the connectivity on the second shape therefore no algorithm based on lib movements could solve the line formation problem on both shapes .    a shape is called compact when it has no holes .    if all nodes in a connected shape have two or more neighbours , then there it at least one cycle present .",
    "assume a connected graph where every node has at least @xmath120 neighbours and there is no cycle present .",
    "every node has @xmath120 edges and we have @xmath0 nodes .",
    "the sum of all edges is @xmath241 because we have double counted every edge .",
    "now a connected graph without a cycle is called a tree and a tree has @xmath185 edges . if and edge is added ( n edges ) the tree creates a cycle .    in compact shapes",
    ", there is always a lib movement that does not break the connectivity .",
    "observe that there is no shape where all nodes have @xmath121 or @xmath115 neighbours and when a node has only one neighbour it can always perform a lib movement .",
    "suppose that a shape exists where no lib movements are available .",
    "each node in this shape has at least @xmath120 neighbours so there is at least one cycle .",
    "if this cycle is compact , then a node can consult his neighbours to see if it is a bridge in order to move .",
    "( heit can do this by asking whether the two neighbours it has , have a different node as a common neighbor ) .",
    "this is a lib movement because the information required is local based .",
    "therefore a lib movement is always available .",
    "@xmath242 , @xmath243 , @xmath244 , @xmath245 , @xmath246 , @xmath247 , @xmath248 @xmath249 , @xmath250 , @xmath251 , @xmath252 , @xmath253 @xmath254 @xmath255 , @xmath256 , @xmath257 , @xmath258 to @xmath259 , @xmath260 , @xmath261 , @xmath262 respectively@xmath263 @xmath254 @xmath264 ; @xmath254 @xmath265 to @xmath259 , @xmath260 , @xmath261 , @xmath262 respectively@xmath263 @xmath266 @xmath267 @xmath268 for every @xmath269 received@xmath263 @xmath270 @xmath271 @xmath272 @xmath273 @xmath274 the path described on the line@xmath263 @xmath275 @xmath276 @xmath277 @xmath278 @xmath279 @xmath280 @xmath277 @xmath281 @xmath279 @xmath280 @xmath280 @xmath282 @xmath283 to @xmath284 @xmath280 @xmath282 @xmath283 to @xmath260 ; @xmath280    @xmath282 @xmath283 to @xmath285 @xmath280 @xmath282 @xmath283 to @xmath286 @xmath280 @xmath287 @xmath288 @xmath289 @xmath287 @xmath290 @xmath291 @xmath292 @xmath293 @xmath287    @xmath294 , @xmath295 , @xmath296 @xmath297 @xmath298 @xmath299 @xmath298 @xmath300 @xmath298 @xmath301 @xmath298 @xmath302 to @xmath303 respectively@xmath263 @xmath304 @xmath254 @xmath305conc@xmath306 , @xmath305conc@xmath307 , @xmath305conc@xmath308 , @xmath305conc@xmath309 to @xmath310 respectively@xmath263 @xmath254 @xmath311 , @xmath312 , @xmath311 , @xmath313 to @xmath303 respectively@xmath263 @xmath254 @xmath314 to the node who sent you @xmath315 ; @xmath316 @xmath317 where m is the number of the port that received the @xmath318 message@xmath263    @xmath319 @xmath320 to @xmath321 @xmath320 to @xmath321 @xmath322 @xmath323 @xmath322 @xmath323 @xmath322 @xmath323 @xmath322 @xmath323 @xmath324 to @xmath325    the compact line algorithm solves the line formation problem for any compact starting shape without breaking the connectivity .    _ algorithm description _ : the operation of the algorithm is split into @xmath121 stages .",
    "the orientation stage@xmath326 , the line marking stage@xmath327 and the movement stage@xmath328 .",
    "the first stage consists of the leader starting from a random node .",
    "it sets the orientation for the current node by marking ports @xmath329,@xmath152,@xmath120,@xmath121 as `` north '' , `` east '' , `` south '' , `` west '' respectively .",
    "it then sends the orientation to all neighbours .",
    "all nodes receiving the orientation change their ports to coincide with the one the leader defined , and then propagate the message to their neighbours .",
    "once a node sets its orientation once , it ignores all messages that concern it .    in the second stage",
    "the leader searches for the rightmost node .",
    "it begins by broadcasting two messages to all neighbours : _ tick _ and _ num_. the tick message consists of the direction the message was sent to .",
    "message is a number which starts as @xmath329 and each time it is propagated through nodes , we add the following number : @xmath329 for _ north _ , @xmath330 for _ east _ , @xmath329 for _ south _ and @xmath331 for _ west_. when a non leader node receives these messages , it propagates them to its neighbours after appending _ up _ , _ right _ , _ down _ , _ left _ , for neighbours @xmath329,@xmath152,@xmath120,@xmath121 respectively , to the _ tick _ message and after adding the number to the _ num _ message following the method mentioned above .",
    "the node also sends a message called _ ack _ to the node who sent the _ tick _ and _ num_. it then stores the node ( _ path node _ ) who sent the _ tick _ and _ marks _ himself . when a marked node receives a _ tick - num _ message it sends them to the _ path node",
    "_ along with an _ ack _ message . when the leader receives a",
    "num - tick _ message , it compares the _ num _ it received with the _ num@xmath332 _ it has in store .",
    "if the one it received is bigger , it replaces the _ num@xmath332 _ with _ num _ and keeps the _ tick@xmath332 _ message it received . now ,",
    "if the leader does not receive an _ ack _ for two consecutive rounds it starts following the path it has stored in the variable named _",
    "line_. once it reaches the destination it marks the current node and starts moving _ west _ , marking all nodes in its path .",
    "it then returns to the node it marked first .",
    "the leader has now marked a designated line where it will move all other nodes to .",
    "this ends phase @xmath120 .",
    "the third stage consists of a loop being performed until all nodes form a line .",
    "loop description : the leader moves randomly to nodes checking if they are on the correct line ( @xmath333 ) .",
    "if it finds one and receives a message ( flag@xmath332=1 ) , the leader marks it .",
    "if it finds one does not receive a message ( flag=1 ) , it checks two things .",
    "first it checks if the node has only one neighbour .",
    "secondly it checks if the node has two neighbours not opposite to each other .",
    "if it does complete the second requirement , it sends a _",
    "qu _ message to one of them asking it if the @xmath120 nodes who are neighbours to it ( the leader ) , have another common neighbour .",
    "the node then answers _ approve _ or _",
    "reject_. if any of those two checks are true ( one neighbour , approve ) the leader moves in a random fashion . once it receives a message _ flag@xmath332=1 _ , it marks the node . that finishes the loop description .",
    "the goal is to show that any compact shape will always end up in a line .",
    "we need to show that the connectivity will be preserved throughout the transformation and the shape will not get stuck in a shape which is not a line .",
    "the first two phases can not break the connectivity because no movement takes place .",
    "the leader is moving between nodes .",
    "the third phase consists of the loop .",
    "the loop has three phases .",
    "the lib movement , the search for the line , and the placement on the line .",
    "observe that if a node performs a lib movement and iy does not break the connectivity , all its subsequent moves will not break it as long as no other node has moved .",
    "this guarantees that if the lib movement preserves the connectivity , the second and third phase will preserve it as well .",
    "now in both checks performed by the algorithm , it is ensured that the node has no bridges so any movement it performs will not break the connectivity .",
    "the first two phases will not turn the shape into an undesired one , because no movement takes place .",
    "all we have to show is that the loop wo nt do it as well .",
    "the first case is whether a lib movement will always be available .",
    "observe that there is no shape where all nodes have @xmath121 or @xmath115 neighbours . in this protocol",
    "we have a lib movement available when a node has only @xmath152 neighbour or when a cluster of @xmath115 nodes creates a square .",
    "suppose that there is a shape that has no lib movements available .",
    "every node has at least @xmath120 neighbours .",
    "such a shape can only be a cycle consisting of all nodes .",
    "this cycle is either a non compact shape or it consists of only @xmath115 nodes . but both of those circumstances are prohibited because we have established that we are talking about compact shapes where there are no lib movements .",
    "thus a lib movement is always available .",
    "the second case is whether the moving node will always find the right point of rightmost node of the line . since the moving node is moving in random it will not get stuck in a loop .",
    "the rightmost node of the line is always accessible from any node on the shape .",
    "the third problem is whether the move on the rightmost part of the line creates a non compact shape .",
    "since the line begins from the rightmost part of the shape , each time a node moves east of it , it has only one neighbour which is the rest of the line . so it can not create a non - compact shape .",
    "the line transform algorithm solves the line formation problem for any starting shape without breaking the connectivity .",
    "@xmath242 , @xmath243 , @xmath244 , @xmath245 , @xmath246 , @xmath247 , @xmath248 @xmath249 , @xmath250 , @xmath251 , @xmath252 , @xmath253 @xmath254 @xmath255 , @xmath256 , @xmath257 , @xmath258 to @xmath259 , @xmath260 , @xmath261 , @xmath262 respectively@xmath263 @xmath254 @xmath264 @xmath334 @xmath265 to @xmath259 , @xmath260 , @xmath261 , @xmath262 respectively@xmath263 @xmath266 @xmath267 @xmath268 for every @xmath269 received@xmath263 @xmath270 @xmath271 @xmath272 @xmath273 @xmath274 the path described on the line@xmath263 @xmath275 @xmath276 @xmath277 @xmath278 @xmath279 @xmath280 @xmath277 @xmath281 @xmath335 @xmath280 ( @xmath336 and @xmath337 ) @xmath280 @xmath282 @xmath283 to @xmath284 @xmath280    @xmath282 @xmath283 to @xmath260 ; @xmath280 @xmath282 @xmath283 to @xmath285 @xmath280 @xmath282 @xmath283 to @xmath286 @xmath280 @xmath338 to @xmath259 ; @xmath339 ; @xmath340 to @xmath260 ; @xmath339 ; @xmath287 @xmath341 @xmath342 @xmath289 @xmath287 @xmath288 @xmath343 to all ports@xmath263 @xmath290 @xmath291 @xmath292 @xmath293 @xmath290    @xmath294 , @xmath295 , @xmath296 @xmath297 @xmath298 @xmath299 @xmath298 @xmath300 @xmath298 @xmath301 @xmath298 @xmath302 to @xmath303 respectively@xmath263 @xmath344 @xmath305conc@xmath306 , @xmath305conc@xmath307 , @xmath305conc@xmath308 , @xmath305conc@xmath309 to @xmath310 respectively@xmath263 @xmath254 @xmath311 , @xmath312 , @xmath311 , @xmath313 to @xmath303 respectively@xmath263 @xmath254 @xmath314 to the node who sent you @xmath315 @xmath316 @xmath317 where m is the number of the port that received the @xmath318 message@xmath263 @xmath319 @xmath320 to @xmath321 @xmath320 to @xmath321 @xmath317 where m is the number of the port that received the @xmath345 message@xmath263 @xmath346 to all ports@xmath263 @xmath347 to @xmath348 @xmath349 @xmath254 @xmath350 to @xmath325    @xmath351 @xmath254 @xmath314 to @xmath352 @xmath343 to all ports@xmath263 @xmath353 @xmath316",
    "there are many open problems related to the findings of the present work .",
    "we here restricted attention to the two extremes , in which the transformation either preserves connectivity or is free to break it arbitrarily .",
    "a compromise could be to allow some restricted degree of connectivity breaking , like necessarily restoring it in at most @xmath354 steps ( a special case of this had been already proposed as an open question in @xcite ) .",
    "there are other meaningful `` good '' properties that we would like to maintain throughout a transformation .",
    "an interesting example , is the _ strength _ of the shape .",
    "one of the various plausible definitions is as the minimum strength sub - shape of the shape ( i.e. , its weakest part ; could possibly be captured by some sort of minimum geometric cuts ) .",
    "then , a strength - preserving transformation would be one that reaches the target shape while trying to maximize this minimum .    in the transformations considered in this paper , there was no _ a priori _ constraint on the maximum area that a transformation is allowed to cover or on the maximum dimensions that its intermediate shapes are allowed to have .",
    "it seems in general harder to achieve a particular transformation if any of these restrictions is imposed .",
    "for example , the generic transformation of theorem [ the : rotation - generic ] requires some additional space below the shape and the transformations of theorems [ the : universality - rot - sl ] and [ the : general - pipelining ] convert any shape first to a spanning line , whose maximum dimension is @xmath0 , even though the original shape could have a maximum dimension as small as @xmath355 .",
    "another interesting fact about restricting the boundaries is that in this way we get models equivalent to several interesting puzzles .",
    "for example , if the nodes are labeled , the initial shape is a square with a single empty cell , and the boundaries are restricted to the dimensions of the square , we get a generalization of the famous 15-puzzle ( see , e.g. , @xcite for a very nice exposition of this and many more puzzles and 2-player games ) .",
    "techniques developed in the context of puzzles could prove valuable for analyzing and characterizing discrete programmable matter systems .",
    "we intentionally restricted attention to very minimal actuation mechanisms , namely rotation and sliding .",
    "more sophisticated mechanical operations would enable a larger set of transformations and possibly also reduce the time complexity .",
    "such examples , could be the ability of a node to become inserted between two neghboring nodes ( while pushing them towards opposite directions ) .",
    "this could enable parallel mergings of two lines of length @xmath87 into a line of length @xmath0 in a single step ( an , thus , for example , transforming a square to a line in polylogarithmic time ) .",
    "another , is the capability of rotating whole lines of nodes ( like rotating arms , see , e.g. , @xcite ) .",
    "there are also some promising specific technical questions .",
    "we do not yet know what is the complexity of rotc - transformability .",
    "the fact that a 6-seed is capable of transfering pairs of nodes to desired positions , suggests that shapes having such a seed in their exterior or being capable of self - extracting such a seed , will possibly be able to transform to each other . even if this turns out to be true , it is totally unclear whether transformations involving at least one of the rest of the shapes are feasible",
    ".    moreover , we did nt study the problem of computing or approximating the optimum transformation .",
    "it seems that the problem is computationally hard . a possible approach to prove @xmath356-hardness would be by proving @xmath356-hardness of rectilinear graphic tsp ( could be via a reduction from rectilinear steiner tree or rectilinear tsp , which are both known to be @xmath356-complete @xcite ) and then giving a reduction from that problem to the problem of a 2-seed exploring a set of locations on the grid .",
    "finally , regarding the distributed transformations , there are various interesting variations of the model considered here , that would make sense .",
    "one of them is to assume nodes that are oblivious w.r.t . their orientation .",
    "xuli chen , li  li , xuemei sun , yanping liu , bin luo , changchun wang , yuping bao , hong xu , and huisheng peng",
    ". magnetochromatic polydiacetylene by incorporation of fe3o4 nanoparticles . , 50(24):54865489 , 2011 .",
    "mark cieliebak , paola flocchini , giuseppe prencipe , and nicola santoro . solving the robots gathering problem . in _",
    "international colloquium on automata , languages , and programming _ , pages 11811196 .",
    "springer , 2003 .",
    "alejandro cornejo , fabian kuhn , ruy ley - wild , and nancy lynch .",
    "keeping mobile robot swarms connected . in _ proceedings of the 23rd international conference on distributed computing _",
    ", disc09 , pages 496511 , berlin , heidelberg , 2009 .",
    "springer - verlag .",
    "zahra derakhshandeh , shlomi dolev , robert gmyr , andra  w richa , christian scheideler , and thim strothmann .",
    "brief announcement : amoebot  a new model for programmable matter . in _ proceedings of the 26th acm symposium on parallelism in algorithms and architectures ( spaa ) _ , pages 220222 , 2014 .",
    "zahra derakhshandeh , robert gmyr , alexandra porter , andra  w richa , christian scheideler , and thim strothmann . on the runtime of universal coating for programmable matter . in _ international conference on dna - based computers _ ,",
    "pages 148164 .",
    "springer , 2016 .",
    "zahra derakhshandeh , robert gmyr , andra  w richa , christian scheideler , and thim strothmann .",
    "an algorithmic framework for shape formation problems in self - organizing particle systems . in _ proceedings of the second annual international conference on nanoscale computing and communication _",
    ", page  21 .",
    "acm , 2015 .",
    "kyle gilpin , ara knaian , and daniela rus .",
    "robot pebbles : one centimeter modules for programmable matter through self - disassembly . in _",
    "robotics and automation ( icra ) , 2010 ieee international conference on _ , pages 24852492 .",
    "ieee , 2010 .",
    "ara  n knaian , kenneth  c cheung , maxim  b lobovsky , asa  j oines , peter schmidt - neilsen , and neil  a gershenfeld .",
    "the milli - motein : a self - folding chain of programmable matter with a one centimeter module pitch . in _ 2012",
    "ieee / rsj international conference on intelligent robots and systems _ , pages 14471453 .",
    "ieee , 2012 .",
    "yunfeng lu , yi  yang , alan sellinger , mengcheng lu , jinman huang , hongyou fan , raid haddad , gabriel lopez , alan  r burns , darryl  y sasaki , et  al .",
    "self - assembly of mesoscopically ordered chromatic polydiacetylene / silica nanocomposites .",
    ", 410(6831):913917 , 2001 .",
    "masahiro shibata , toshiya mega , fukuhito ooshita , hirotsugu kakugawa , and toshimitsu masuzawa .",
    "uniform deployment of mobile agents in asynchronous rings . in _ proceedings of the 2016 acm symposium on principles of distributed computing _ , pages 415424 .",
    "acm , 2016 .",
    "damien woods , ho - lin chen , scott goodfriend , nadine dabby , erik winfree , and peng yin .",
    "active self - assembly of algorithmic shapes and patterns in polylogarithmic time . in _ proceedings of the 4th conference on innovations in theoretical computer science _ , pages 353354 .",
    "acm , 2013 .",
    "yukiko yamauchi , taichi uehara , and masafumi yamashita .",
    "brief announcement : pattern formation problem for synchronous mobile robots in the three dimensional euclidean space . in",
    "_ proceedings of the 2016 acm symposium on principles of distributed computing _ , pages 447449 .",
    "acm , 2016 .",
    "mark yim , wei - min shen , behnam salemi , daniela rus , mark moll , hod lipson , eric klavins , and gregory  s chirikjian .",
    "modular self - reconfigurable robot systems [ grand challenges of robotics ] .",
    ", 14(1):4352 , 2007 ."
  ],
  "abstract_text": [
    "<S> in this work , we study theoretical models of _ programmable matter _ systems . </S>",
    "<S> the systems under consideration consist of spherical modules , kept together by magnetic forces and able to perform two minimal mechanical operations ( or movements ) : _ rotate _ around a neighbor and _ slide _ over a line . in terms of modeling , there are @xmath0 nodes arranged in a 2-dimensional grid and forming some initial _ shape_. the goal is for the initial shape @xmath1 to _ transform _ to some target shape @xmath2 by a sequence of movements . </S>",
    "<S> most of the paper focuses on _ transformability _ questions , meaning whether it is in principle feasible to transform a given shape to another . </S>",
    "<S> we first consider the case in which only rotation is available to the nodes . </S>",
    "<S> our main result is that deciding whether two given shapes @xmath1 and @xmath2 can be transformed to each other , is in @xmath3 . </S>",
    "<S> we then insist on rotation only and impose the restriction that the nodes must maintain global connectivity throughout the transformation . </S>",
    "<S> we prove that the corresponding transformability question is in @xmath4 and study the problem of determining the minimum _ seeds _ that can make feasible , otherwise infeasible transformations . </S>",
    "<S> next we allow both rotations and slidings and prove universality : any two connected shapes @xmath5 of the same order , can be transformed to each other without breaking connectivity . </S>",
    "<S> the worst - case number of movements of the generic strategy is @xmath6 . </S>",
    "<S> we improve this to @xmath7 parallel time , by a pipelining strategy , and prove optimality of both by matching lower bounds . in the last part of the paper , we turn our attention to distributed transformations . </S>",
    "<S> the nodes are now distributed processes able to perform communicate - compute - move rounds . </S>",
    "<S> we provide distributed algorithms for a general type of transformations . </S>"
  ]
}