{
  "article_text": [
    "main problem is shown in figure ( [ schema1 ] ) .",
    "there is viscous flow between two parallel plates .",
    "upper plate is moving in x direction with constans velocity @xmath0 .",
    "lower one is not moving @xmath1 .",
    "we are looking for a solution to describe velocity vector field in the model ( between two plates ) .",
    "most of incompressible fluid mechanics ( dynamics ) problems are described by simple navier - stokes equation for incompressible fluid velocity , which can be written with a form :    @xmath2    where @xmath3 is defined is defined as the relation of pressure to density :    @xmath4    and @xmath5 is a kinematics viscosity of the fluid .",
    "we will also use a continuity equation , which can be written as follows :    @xmath6    of course , in a case of couette incompressible flow we will use several simplifications of ( [ n - s equation ] ) .",
    "incompressible couette problem is not needed to solve full navier - stokes equations .",
    "there is no external force , so first simplification of ( [ n - s equation ] ) will be :    @xmath7    in @xcite there can be found easy proof that in couette problem there are no pressure gradients , which means that :    @xmath8    we will ignore a convection effects so , equation ( [ n - s equation1 ] ) can be written with a form :    @xmath9    now we have simple differential equation for velocity vector field .",
    "that equation is a vector type and can be simplified even more .",
    "let us write continuity equation ( [ continuity equation ] ) in differential form .",
    "let @xmath10 , then continuity equation can be expanded as follows :    @xmath11    we know that there is no @xmath12 velocity component gradient along x axis ( symmetry of the problem ) , so :    @xmath13    evaluation of taylor series at points @xmath14 and @xmath15 gives us a proof that only one possible and physically correct value for y component of velocity @xmath16 is :    @xmath17    because of ( [ yvelocity ] ) equation ( [ n - s equation2 ] ) can be written as follows :    @xmath18    our problem is now simplified to mathematical problem of solving equations like ( [ lastequation ] ) .",
    "that is now a governing problem of incompressible couette flow analysis .",
    "analytical solution for velocity profile of steady flow , without time - changes ( steady state ) can be found very easily in an equation :    @xmath19    and without any changes of viscosity @xmath5 it can be written in form :    @xmath20    after simple two times integration of equation ( [ lastequation - steady state2 ] ) we have analytical solution function of ( [ lastequation - steady state2 ] ) :    @xmath21    where @xmath22 and @xmath23 are integration constans .",
    "simple boundary conditions are provided in that problem .",
    "we know that :    @xmath24    simple applying it to our solution ( [ analitsolut ] ) gives a more specified one , where @xmath25 and @xmath26 :    @xmath27    it means , that a relationship between @xmath12 and @xmath28 is linear . a better idea to write that with mathematical expression is :    @xmath29    where @xmath30 is a constans for the problem ( initial @xmath12 velocity vs size of the model ) .",
    "let us define some new non - dimensional variables :    @xmath31    now let us place these variables into equation ( [ lastequation ] ) and we have now a non - dimensional equation written as follows :    @xmath32    now we replace all the variables to nondimensional , like defined in ( [ dimensionless ] ) :    @xmath33    now we will remove all @xmath34 chars from that equation ( only for simplification of notation ) , and the equation becomes to :    @xmath35    in that equation reynold s number @xmath36 appears , and is defined as :    @xmath37    where @xmath36 is reynold s number that depends on @xmath38 height of couette model .",
    "finally , the last form of the equation for the couette problem can be written as follows :    @xmath39    we will try to formulate numerical solution of the equation ( [ lastnumeq ] ) .",
    "in our solution of equation ( [ lastnumeq ] ) we will use crank - nicolson technique , so discrete representation of that equation can be written as :    @xmath40    simple grouping of all terms which are placed in time step ( n+1 ) on the left side and rest of them - on right side , gives us an equation which can be written as :    @xmath41    where @xmath42 is known and depends only on values @xmath12 at @xmath43 time step :    @xmath44    constans @xmath45 and @xmath46 are defined as follows ) . ] :    @xmath47    @xmath48",
    "for numerical solution we will use one - dimensional grid points @xmath49 where we will keep calculated @xmath12 velocities .",
    "that means @xmath12 has values from the range @xmath50 .",
    "we know ( from fixed boundary conditions ) , that : @xmath51 and @xmath52 . simple analysis of the equation ( [ systemofequation1 ] ) gives us a system of equations , which can be described by matrix equation :    @xmath53    where @xmath54 is tridiagonal @xmath55\\cdot [ n-1]$ ] matrix of constant @xmath45 and @xmath46 values :    @xmath56\\ ] ]    @xmath57 vector is a vector of @xmath12 values :    @xmath58\\ ] ]    @xmath59 vector is a vector of constans @xmath42 values :    @xmath60\\ ] ]",
    "now the problem comes to solving the matrix - vector equation ( [ govequation ] ) .",
    "there are a lot of numerical methods for that ] , and we will try to choose two of them : thomas and gauss method .",
    "both are very similar , and i will start with a description of my implementation with the simple gauss method .",
    "choice of the gauss method for solving system of linear equations is the easiest way .",
    "this simple algorithm is well known , and we can do it very easily by hand on the paper .",
    "however , for big matrices ( big @xmath61 value ) a computer program will provide us with a fast and precise solution .",
    "a very important thing is that time spent on writing ( or implementing , if gauss procedure was written before ) is very short , because of its simplicity .",
    "i used a gauss procedure with partial choice of a / the general element .",
    "that is a well known technique for taking the first element from a column of a matrix for better numerical accuracy .",
    "the whole gauss procedure of solving a system of equations contains three steps .",
    "first , we are look- ing for the general element .",
    "after that , when a general element is in the first row ( we make an exchange of rows matrix , and for @xmath62 too . ] ) we make some simple calculations ( for every value in every row and column of the matrix ) for the simplified matrix to be diagonal ( instead of a tridiagonal one which we have at the beginning ) .",
    "that is all , because after diagonalization i implement a simple procedure ( from the end row to the start row of the matrix ) which calculates the whole vector @xmath57 .",
    "there are my values of @xmath63 velocity in all the model .",
    "thomas method , described in @xcite is simplified version of gauss method , created especially for tridiagonal matrices .",
    "there is one disadvantage of gauss method which disappears when thomas method is implemented .",
    "gauss method is rather slow , and lot of computational time is lost , because of special type of matrix .",
    "tridiagonal matrices contain a lot of free ( zero ) values . in the gauss method",
    "these values joins the calculation , what is useless .",
    "thomas simplification for tridiagonal matrices is to get only values from non - zero tridiagonal part of matrix .",
    "simply applying a thomas equations for our governing matrix equation ( [ govequation ] ) gives us :    @xmath64    @xmath65    we know that exact value of @xmath66 is defined as follows :    @xmath67    now solution of the system of equations will be rather easy .",
    "we will use recursion like that :    @xmath68    that easy recursion provides us a solution for the linear system of equations .",
    "main results are provided as plots of the function :    @xmath69    in figure ( [ plot1anal ] ) there is drawn an analytical solution to the problem of couette flow . that is linear function , and we expect that after a several time steps of numerical procedure we will have the same configuration of velocity field .          in figure ( [ plot1 ] )",
    "there are results of velocity @xmath12 calculation for several different time steps .",
    "analytical solution is also drawn there .        as we can see in the figure ( [ plot1 ] )",
    "- the solution is going to be same as analytical one . beginning state ( known from boundary conditions ) is changing and relaxing .      in the figure ( [ plotreynolds ] )",
    "there is plot of numerical calculations for different reynold s numbers .",
    "for example reynold s number depends on i.e. viscosity of the fluid , size of couette model . as it is shown on the plot",
    "there is strong relationship between the speed of the velocity field changes and reynold s number . in a couple of words : when reynolds number increases - frequency of changes also increases .    ) and different reynold s numbers . ]      in figure ( [ plotgrid ] ) there is an example of calculations of velocity field for different grid density ( @xmath61 number ) .",
    "we see that there is also strong correlation between grid density , and speed of changes on the grid .",
    "also , very interesting case @xmath70 shows , that for low density of the grid changes are very fast , and not accurate .    ) , same reynold s numbers ( re=5000 ) and different grid density ( @xmath61 number ) . ]",
    "solving of incompressible couette problem can be good way to check numerical method , because of existing analytical solution . in that report",
    "there were presented two methods of solving system of equations : gauss and thomas method .",
    "system of equations was taken from crank - nicolson implicit scheme .",
    "well known linear relationships were observed .",
    "....    # include < stdlib.h > # include < stdio.h > # include < math.h >    # define n ( 40 ) # define nn ( n+1 )    void zamien(double * a , double * b ) {      double c ;      c=*a ;    * a=*b ;   * b = c ; }    void wypiszmacierz(double a[nn][nn ] , int n ) {      int i , j ;        for(j=1;j < n;j++ )      {          for(i=1;i < n;i++ )             // show matrix          {              printf(\"%2.4f    \" , a[i][j ] ) ;          }          printf(\"\\n \" ) ;      } }    void gauss(double a[nn][nn ] , double * b , double * x , int n ) {      int i , j , k ;      double m ;    //",
    "gauss elimination        for(i=0;i <",
    "n;i++ )      {          // step # 1 : change governing element            m = fabs(a[i][i ] ) ;          k = i ;            for(j = i+1;j <",
    "n;j++ )          if(fabs(a[i][j])>m )          {              m = fabs(a[i][j ] ) ;              k = j ;          }          if(k!=i )          for(j=0;j <",
    "n;j++ )          {              zamien(&a[j][i],&a[j][k ] ) ;              zamien(&b[i+1],&b[k+1 ] ) ;          }            // step # 2 : make it triangle          for(j = i+1;j <",
    "n;j++ )          {              m = a[i][j]/a[i][i ] ;                for(k = i;k < n;k++ )                  a[k][j ] = a[k][j ] - m*a[k][i ] ;                b[j+1 ] = b[j+1 ] - m*b[i+1 ] ;          }      } // step#3 : solve now      for(i = n-1;i>=1;i-- )      {          for(j = i+1;j <",
    "n;j++ )              b[i+1 ] = b[i+1]-a[j][i]*x[j+1 ] ;          x[i+1 ] = b[i+1]/a[i][i ] ;      } }    int main(void ) {      double u[n*2 + 2]={0},a[n*2 + 2]={0},b[n*2 + 2]={0},c[n*2 + 2]={0},d[n*2 + 2]={0},y[n*2 + 2]={0 } ; //",
    "initialization      double oneovern = 1.0/(double)n ;      double re=5000 ;                      //",
    "reynolds number      double ee=1.0 ;                       // dt parameter      double t=0 ;      double dt = ee*re*oneovern*2 ;          // delta time      double aa=-0.5*ee ;      double bb=1.0+ee ;      int kkend=1122 ;      int kkmod=1 ;      int kk ;                              // for a loop      int i , j , k ;                           // for loops too      int m ;                               //",
    "temporary needed variable      double gmatrix[nn][nn]={0 } ;              // for gauss elimination      double test ;      y[1]=0 ; //",
    "init    // apply boundary conditions for couette problem        u[1]=0.0 ;      u[nn]=1.0 ;    //",
    "initial conditions ( zero as values of vertical velocity inside of the couette model )        for(j=2;j<=n;j++ )          u[j]=0.0 ;        a[1]=b[1]=c[1]=d[1]=1.0 ;        for(kk=1;kk<=kkend;kk++ )      {          for(j=2;j<=n;j++ )          {              y[j]=y[j-1]+oneovern ;              a[j]=aa ;              if(j==n )                  a[j]=0.0 ;              d[j]=bb ;              b[j]=aa ;              if(j==2 )                  b[j]=0.0 ;              c[j]=(1.0-ee)*u[j]+0.5*ee*(u[j+1]+u[j-1 ] ) ;              if(j==n )                  c[j]=c[j]-aa*u[nn ] ;          }    // gauss",
    "// c [ ]        -    free //",
    "a[]b[]d [ ] -    for matrix calculation // u [ ]        -    x    //",
    "calculate matrix for gauss elimination            gmatrix[0][0]=d[1 ] ;          gmatrix[1][0]=a[1 ] ;            for(i=1;i < n-1;i++ )          {              gmatrix[i-1][i]=b[i+1 ] ;      //",
    "gmatrix[1][2]=b[2 ]              gmatrix[i][i]=d[i+1 ] ;        //",
    "gmatrix[2][2]=d[2 ]              gmatrix[i+1][i]=a[i+1 ] ;      //",
    "gmatrix[3][2]=a[2 ]          }            gmatrix[n-2][n-1]=b[n ] ;          gmatrix[n-1][n-1]=d[n ] ;            gauss(gmatrix , c , u , n ) ;            // gauss solving function            y[1]=0.0 ;          y[nn]=y[n]+oneovern ;            t = t+dt ;                          // time increment          test = kk % kkmod ;           if(test < 0.01 )                   // print the results          {              printf(\"kk , time\\n \" ) ;         //",
    "info 1              printf(\"%d,%f\\n\",kk , t ) ;                printf(\",j , y[j],u[j]\\n \" ) ;    //",
    "info 2              for(j=1;j<=nn;j++ )                  printf(\"%d , % f , % f\\n\",j , u[j],y[j ] ) ;                  printf(\"\\n \\n \\n \\n \" ) ;       // for nice view of several datas          }       }        return ( 1 ) ; } ....",
    "....              double oneovern = 1.0/(double)n ;      double re=7000 ;                      // reynolds number      double ee=1.0 ;                       //",
    "dt parameter      double t=0 ;      double dt = ee*re*oneovern*2 ;          // delta time      double aa=-0.5*ee ;      double bb=1.0+ee ;      int kkend=122 ;      int kkmod=1 ;      int kk ;                              // for a loop      int j , k ;                             // for loops too      int m ;                               // temporary needed variable                                        printf(\",j , y[j],u[j]\\n \" ) ;        //",
    "info 2              for(j=1;j<=nn;j++ )                  printf(\"%d , % f , % f\\n\",j , u[j],y[j ] ) ;                  printf(\"\\n \\n \\n \\n \" ) ;       // for nice view of several datas          }      }      return ( 1 ) ; } ....    aa john d. andertson , jr . _",
    "computational fluid dynamics : the basics with applications _ , mcgraw - hill inc , 1995 .",
    "david potter _",
    "metody obliczeniowe fizyki _ , pwn 1982 .",
    "ryszard grybos , _",
    "podstawy mechaniki plynow _ ( tom 1 i 2 ) , pwn 1998 ."
  ],
  "abstract_text": [
    "<S> this project work report provides a full solution of simplified navier stokes equations for the incompressible couette problem . </S>",
    "<S> the well known analytical solution to the problem of incompressible couette is compared with a numerical solution . in that paper </S>",
    "<S> , i will provide a full solution with simple c code instead of matlab or fortran codes , which are known . for discrete problem formulation , </S>",
    "<S> implicit crank - nicolson method was used . </S>",
    "<S> finally , the system of equation ( tridiagonal ) is solved with both thomas and simple gauss method . </S>",
    "<S> results of both methods are compared . </S>"
  ]
}