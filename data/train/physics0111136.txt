{
  "article_text": [
    "within the last few years _ relational database management systems _ ( rdbms or db in short ) have become essential for control system configuration . with availability of generic applications and hardware standards the interplay of components as well as",
    "the adaptation to site specific needs has become crucial .",
    "proper networking has been the central problem of the past .",
    "today s challenge is a central repository of reference and configuration data as well as an appropriate standard suite of db applications .",
    "target is a management system providing consistency in a programmable , comprehensible and automatic way for development , test and production phases of the control system . instead of careful bookkeeping of innumerable hand - edited files",
    "the ever needed modifications of the facility require ` only ' change of atomic and unique configuration data in the db and eventually adaptation of structures in the db ( applications ) .",
    "the update of tool configurations is then consistently accomplished by direct db connection , renewal of snapshot files generated by extraction scripts etc .",
    "very early a device oriented approach has been chosen for the description of the 3rd generation light source bessy  ii .",
    "a naming convention was developed for easy identification and parsing of classifying properties like installation location , device family , type and instance . around the ` bootstrap ' information contained in the device",
    "names a first reference database has been set up @xcite , describing wiring , calibrations , geometries etc .",
    "utilisation of the epics control system toolkit implicates the network protocol called _ channel access _ for the i / o of process variables . at bessy the device model results in a scheme : < channel>.    generation of the epics _ real time databases _ ( rtdb ) for device classes with high multiplicity and simple i / o ( power supplies , vacuum system , timings ) is based on two components : device class specific data are stored in the db .",
    "functionality and logic of is modelled with a graphical editor and stored in a template file .",
    "generating scripts merge both into the actual rtdb .        for unique and complex systems ( rf , insertion devices ) [ rf ] structuring takes place in where no common naming convention has been defined so far .",
    "contrary to the previous approach of complex template / atomic substitution here all channels involved are assigned to sub - units and hierarchies .",
    "the structure is fully implemented in the db and for rtdb generation only connected with simple atomic templates .",
    "intermediate systems ( scraper , gp - ib devices ) are either adapted to one of these approaches or simply set up by ad - hoc created files .",
    "documentation of and transitions between different facility operation conditions are handled by a save / restore / compare tool that is working on a set of snapshot files .",
    "coarse configuration is provided by sql retrievals of name lists .",
    "hierarchies and partitioning are derived from device - name patterns and mapped into directories and files .",
    "this is feasible only because the relevant channels are restricted to setpoint , readback and status .",
    "deviations of this scheme are few and easily maintainable by hand .",
    "information required by modelling tools for conversion between engineering units of device i / o and the physics views ( magnet function , length , position , conversion factor etc . )",
    "are fully available in the db @xcite",
    ". therefore the linear optics correction tools ( orbit , tune ) are instantaneously consistently configured provided the installed hardware matches the entries in the db .",
    "as long as the alarm handler has to monitor only hardware trips db retrieval of device name collections and script based interpretation of device name patterns are helpful at least for the simple devices with high multiplicity : typical channels are on / off status .",
    "again grouping and hierarchies can be derived from the class description embedded in the device name .",
    "for the complex devices ( rf ) control functionality and logic has already been mapped into db structures ( see [ rf ] ) . here",
    "genuine db calls produce alarm handler configuration files with sophisticated error reporting capabilities .    in a similar fashion creation of configuration files for the data collector engine(s ) of the archiving system",
    "is simplified by db calls : for each device class a limited number of signals and associated frequencies are of interest for long term monitoring .",
    "the db basically serves as source for device name collections .",
    "high level software using the cdev api ( configured with a _ device description language _ file ) and ` foreign ' networks ( connected by the _ channel access gateway _ ) benefit also from the db : for cdev access definition and permission to selected i / o channels for each device class is defined by appropriate prototype descriptions ( in analogy to the rtdb templates ) .",
    "the associated lists of devices are compiled with db calls .",
    "_ ca _ gateway takes advantage of the naming convention by regular expression evaluation .",
    "facility modifications typically change the device inventory .",
    "the db supports consistent propagation of innovations @xcite : during an installation campaign devices are added or deleted in the db .",
    "in addition , new device classes are modelled within script logics and template ( prototype ) descriptions . running the configuration scripts on all control system levels",
    "updates the configurations within development environment , test system and production area .",
    "a number of restrictions imposed by the present device oriented db model are solvable by minor structural modifications and consequent introduction of channels necessary for the adequate description of essential device properties .",
    "dependent on the specific point of view , definition of device classes and assignment of equipment comprises ambiguities .",
    "e.g. the device class _ magnet _ ( m ) is tightly bound to the model aspect of the storage ring , whereas the the class _ power supply _ ( p ) covers the engineering aspects of the current converters .",
    "pulsed elements ( kicker , septa ) are very similar devices , but do not fit into this scheme - neither into the model nor the i / o aspects .",
    "the decision to assign a single dedicated device - class ( k ) introduces a new pattern ( fig .",
    "[ devnew ] ) and breaks the naming structure .",
    ": :     +    horizontal corrector ( windings ) in sext 4 of    : :     +     @xmath0 power supply   : :     +    i d ue56 as a complex device with lots of _ internal _ hardware units   : :     +     @xmath0 power supply of +    @xmath0 horizontal ue56bending magnet _ external    access !",
    "_    difficulties get worse for complex pieces of equipment : insertion devices have to be treated as ` units ' .",
    "they can be completely replaced by different entities with similar complexity .",
    "typically they consist of a number of devices partly belonging to already described device classes ( like bipolar power supplies ) .",
    "the straightforward solution here is the extension of the device naming convention : substructures and naming rules have to be introduced also for the ( up to now monolithic ) device property describing name element ( ` genome chart ' ) .",
    "corresponding db structures have to be implemented .    similarly naming rules have to be developed where structuring takes place in ( fig . [ rfnew ] ) . in summary ,",
    "the distinction and boundary between device and are dictated by specifics of the i / o connectivity and arbitrary with respect to the required db structure .",
    "it does not necessarily coincide with the most adequate classification aspects .",
    "several global states are well defined for the whole facility ( e.g. ` shutdown ' , ` machine development ' , ` user service ' etc . ) or for sub - sections or device collections : ` injection running ' , ` wave length shifter on ' etc .",
    "the role of devices depend on these states : in the context of ` shutdown ' insufficient liquid helium level at super - conducting devices has to generate a high severity alarm . for power supplies",
    "even off states are then no failure . but during ` user service ' alarms should notify the operator already when power supply readbacks are out of meaningful bounds .",
    "similar case distinctions have to be made for all conditioning applications ( reload constraints for save / restore , active / inactive elements for modelling ) , for data archiving ( active periods , frequency / monitor mode ) , for sequencing programs etc .",
    "today only the most general conditions are statically configured and available from the database / configuration scripts .",
    "exceptions are partly coded within the applications or have to be handled by the operators  an error - prone situation .",
    "a clearly laid out man - machine interface provides an effective protection against accidental maloperation .",
    "presentation details and accessibility of devices should be tailored to the user groups addressed : operators , device experts , accelerator physicists .",
    "the required attributes attached to the device channels should be easily retrievable from the db .",
    "starting from the device model a very specific view of the control system structure has been mapped into db structure : device classes correspond to tailored set of tables .",
    "deviating aspects that do not fit into the scheme are modelled by relations , constraints , triggers and presented to the applications by pre - built views .",
    "the result is not very flexible , hard to extend and complicated to maintain in a consistent state free from redundancies .",
    "numerous device attributes are scattered over template / prototype files and configuration creating scripts in an implicit format without clear and explicit relation to the data within the db .",
    "configurations of archiver retrieval tools are much more demanding than those of data collector processes . in search of correlations",
    "arbitrary channel names have to be detected by their physical dimension : for a drift analysis the data sources for temperatures [ c ] , rf frequency [ mhz ] , bpm deviations [ mm ] and corrector kicks [ mrad ] have to be discovered . any non - static , not pre - configured retrieval interface to the most important performance analysis tool of the facility archived data requires clues to signal names , meaning , functionality , dimensions , attributes .    with the rtdb template approach",
    "the channel attributes are hidden within these files and not available to the db .",
    "consequently , no db based data relations are available for correlations ( comparable dimensions ) , projections ( user , expert , device responsible ) or dependencies ( triggered by ) .",
    "there is no browsable common data source that allows to coordinate consistency of configurations requiring channel attributes ( that go beyond simple and clear assignments to well defined device classes ) .",
    "the device model is tailored for modelling applications . for the archiver retrieval",
    "it is useless continuously causing errors and inconsistencies .",
    "in a kind of clean - up effort the existing fragments used for rtdb generation will be put into a new scheme .",
    "sacrificing the feasibility to generate complex rtdb templates with a graphical editor , now device class tables , templates and i / o software modules ( _ records _ ) will be put together as a new db core . in view of the extendibility for high level applications",
    "a purely db based approach has been taken  even though for rtdb generation the framework of xml seems to be an attractive and well suited alternative .    a new entity _",
    "gadget _ is introduced connecting the data spaces _ device _ , _ channel _ and _ iostruct_. these db sections have to be set up consequently in 3rd normal form , i.e. all device class properties , channel attributes and i / o specifics have to be modelled in data and relations , not in table structures . in blue - print",
    "the resulting data model looks abstract and ( intimidating ) complex , but promising with respect to db flexibility , extendibility and cleanness .",
    "expectation that today s complicated configuration scripts collapse to simple sequences of db queries seem to be justified .",
    "the most difficult problem of a comprehensive configuration management system is the determination of ` natural ' data structures and breaking them down into localised data areas , dependencies and relations . for a relatively small installation like bessy ii the expected reward in stability and configuration consistency does not clearly justify effort and risk of the envisaged re - engineering task .",
    "one could argue that the present mixture of db based and hand edited configuration is an efficient compromise . on the other hand",
    "the persistent and boring work - load due to manual configuration update requirements is a constant source of motivation to persue this reengineering project ."
  ],
  "abstract_text": [
    "<S> the reference rdbms for bessy ii has been set up with a device oriented data model . </S>",
    "<S> this has proven adequate for e.g. template based rtdb generation , modelling etc . </S>",
    "<S> but since assigned i / o channels have been stored outside the database ( a ) numerous specific conditions had to be maintained within the scripts generating configuration files and ( b ) several generic applications could not be set up automatically by scripts . in a larger re - design effort </S>",
    "<S> the i / o channels are introduced into the rdbms . that modification allows to generate a larger set of rtdbs , map specific conditions into database relations and maintain application configurations by relatively simple extraction scripts . </S>"
  ]
}