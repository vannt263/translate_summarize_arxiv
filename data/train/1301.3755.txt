{
  "article_text": [
    "multi - stage visual pipelines for learning feature representations of images have recently proven valuable for classifying small objects from a variety of lighting conditions , scales , and poses",
    ". an effective variant of these was explored in experiments by @xcite that compared features learned and encoded by stages that originate in encoder - decoder networks , deep learning @xcite , and bags of features models @xcite .",
    "this architecture partitions images into patches to perform local learning of an over - complete codebook and uses this codebook to form global representations of the images for classification .",
    "intermediate or mid - level representations are of high - dimensionality and retain the spatial structure of the image .",
    "pooling is an integral late stage that performs the same role as the sub - sampling layer of a convolutional neural network ( cnn ) : reduction in the final number of features ( passed to the classifier or next layer ) by an aggregation operation meant to improve invariance to small changes @xcite .",
    "unfortunately , each additional stage of the architecture often adds hyper - parameters for model selection that must be explored . for the pooling layer the number of pools , their structure or spatial layout , weights within this region , and operator ( often max , average , or @xmath0-norm ) are hyper - parameters that are frequently chosen by rules of thumb .",
    "recently , @xcite explored pool selection by optimization over a full training set with an over - complete number of pools and achieved excellent improvements over standard pyramid models , although their method uses a feature selection stage with retraining to tractably create a classifier . in this paper",
    "we present a method for learning pooling maps with weight parameters that may optimize or tune the feature space representation for better discrimination through stochastic gradient descent .",
    "this converts two of the model choices above to parameters which may be learned from a limited stream of labeled training data .",
    "back - propogation through the architecture in @xcite is used to obtain the appropriate weight updates .",
    "this technique stems back at least to the inception of convolutional neural networks and graph transformer networks @xcite , where each module or layer of the network may be utilized in a forward pass output calculation and backward pass parameter update .",
    "the multi - stage image recognition architecture considered from @xcite consists of patch extraction , normalization and whitening , codebook learning , feature encoding , spatial pooling , and classification .",
    "as guided by @xcite we use hyper - parameters such as the number of codewords , @xmath1 , patch size @xmath2 pixels , stride@xmath3 for dense extraction , triangle encoding , and use of patch whitening and pre - processing with a focus on the cifar-10 dataset .",
    "quadrant based average pooling was used to sub - sample the intermediate feature space representation down to @xmath4 .",
    "this choice stemmed from spatial pyramids and was not a heavy focus for @xcite , although motivating work in @xcite has shown there are both a large number of options for pooling regions and much performance to be gained .",
    "although building pools for invariance can be partially based on intuition when patch extraction is performed spatially relevant to the original image ( as a single layer in the architecture considered ) , pooling region choice for layers of features that build upon those generated in the lowest layer is not as straightforward ( as noted by @xcite ) .",
    "special care must be taken to reorder features and assemble pools that maintain the structure inherent in the image .",
    "it would be beneficial if the region could change relative to problem demands as well as layer context , and we propose the use of pooling weight maps that may be adjusted as learning proceeds with gradient descent .",
    "to obtain continuous updates as well as a gradient signal we replace the support vector machine originally used for classification in @xcite with a feed - forward neural network with single hidden layer and mean - square error cost function .",
    "the outputs are one - hot binary vectors for the @xmath5 target classes and the inputs are pooled features @xmath6 . if we have a @xmath7 pixel square image and let @xmath8 , with dense patch extraction we obtain a @xmath9 mid - level representation ( this may be modified for non - square images ) .",
    "pooling reduces this representation to @xmath10 that can be flattened to form @xmath6 .",
    "we then extend the network back to include an additional input layer that holds our @xmath0 weight maps with size @xmath11 that we denote as @xmath12 .",
    "the inputs to this new layer are encoded features @xmath13 computed from the @xmath9 patches .",
    "this method shares many similarities with the sub - sampling layer in a cnn . in the sub - sampling layer",
    "each neuron receives the average of the features from the prior layer in its receptive field or pool ( receptive fields of units do not overlap ) .",
    "each unit has a coefficient and bias that are trained with gradient information and feed into a sigmoid activation function that controls the response of the sub - sampling unit @xcite . aside from its application in an alternate context ,",
    "our approach differs in that the features which are averaged are no longer restrained to being equally weighted and multiple pools may utilize the same encoded patches . learned",
    "weights combine encoded features @xmath13 from the mid - level representation and pass these through a linear activation with unity weight to a neural network classifier , i.e. pooled inputs @xmath6 over encoded patches @xmath14 in pool @xmath15 are computed and @xmath13 have a @xmath16-size dimension which @xmath17 is shared over . ] by @xmath18    we currently have not explored using non - linear activation units with adjustable biases and coefficients and although we have no restriction that pools must be non - overlapping as in cnns , we are currently examining modification to the loss function to maximize diversity among the pools . the weight sharing scheme employed by @xcite for learning feature maps",
    "is similarly used here to reduce the parameter search space by sharing weights in codeword dimension @xmath16 of the mid - level representation .",
    "figure [ fig : arch ] illustrates the positioning of the learned parameters within the architecture . to replicate the quadrant based pooling",
    "we employ four maps that connect to every patch and are initially set to @xmath19 inside the hot zone of the corresponding quadrant map and zero elsewhere . after learning the codebook we train the original network with 128 hidden neurons and stochastic average mini - batch gradient descent ( random batches of 10 images ) while the pool weights are fixed .",
    "network inputs are normalized to @xmath20 post pooling with a mean and variance that is not modified . after a learning period we fix the classifier weights and learn the pooling weights .",
    "we have found this alternate training to perform better than simultaneous learning where the neural network can compensate for pooling weight changes .      to update each pool @xmath15 s weights with loss function @xmath21 note",
    "we want @xmath22 . from the original backpropagation",
    "pass we may create a new set of sensitivities @xmath23 ( @xmath24 representing the original input to hidden weights ) for the prepended network layer .",
    "noting @xmath25 and @xmath26 we obtain the update rule @xmath27 the pool weight gradient updates for the images in each mini - batch are averaged ; in each , every codeword dimension @xmath16 contributes to the update as a sum . in preliminary tests we freeze network learning after presenting 250k examples from 80% of the cifar-10 training set .",
    "the last validation accuracy before pool learning on the remaining 20% averaged over five trials was 67.56% .",
    "after training with an additional 15k training images and checking the validation set every 500 images , the average best post pool learning accuracy was 68.03% for an improvement of @xmath28 .",
    "figure [ fig : maps ] contains an example of the weights learned that highlights the infinite number of possible pools gradient descent searches over .",
    "this method may also be used to tune the choice of @xmath0 within the weighted @xmath0-norm .",
    "open issues remain , particularly in the learning rate choice ( for which we have traded the pooling structure for hyper - parameter @xmath29 ) and the number of maps needed to cover separate areas of invariance .",
    "it would be preferred to select more than enough maps than necessary and later trim down redundant features , although we need to be careful to avoid overfitting the training set here ( and in general for this approach ) .",
    "unfortunately , each additional map adds @xmath16 inputs to the classifier .",
    "this problem relates closely to feature map count or hidden neuron count hyper - parameters in cnns ."
  ],
  "abstract_text": [
    "<S> hyper - parameter selection remains a daunting task when building a pattern recognition architecture which performs well , particularly in recently constructed visual pipeline models for feature extraction . </S>",
    "<S> we re - formulate pooling in an existing pipeline as a function of adjustable pooling map weight parameters and propose the use of supervised error signals from gradient descent to tune the established maps within the model . </S>",
    "<S> this technique allows us to learn what would otherwise be a design choice within the model and specialize the maps to aggregate areas of invariance for the task presented . </S>",
    "<S> preliminary results show moderate potential gains in classification accuracy and highlight areas of importance within the intermediate feature representation space . </S>"
  ]
}