{
  "article_text": [
    "we focus on the following interpolation problem from  @xcite . for a field @xmath7 and some positive integer @xmath8 ,",
    "we have as input @xmath0 vectors @xmath9 in @xmath10 , seen as the rows of a matrix @xmath11 $ ] .",
    "we also have a _ multiplication matrix _ @xmath12 which specifies the multiplication of vectors @xmath13 $ ] by polynomials @xmath14}$ ] as @xmath15 .",
    "then , we want to find @xmath16}$]-linear relations between these vectors , that is , some @xmath17}^{m}$ ] such that @xmath18 .",
    "such a @xmath19 is called an _",
    "interpolant for @xmath20_.    hereafter , the matrix @xmath21 is in jordan canonical form : this assumption is satisfied in many interesting applications , as explained below .",
    "the notion of interpolant we consider is directly related to the one introduced in  @xcite .",
    "suppose that @xmath21 has @xmath22 jordan blocks of dimensions @xmath23 and with respective eigenvalues @xmath24 ; in particular , @xmath25 . then , one may identify @xmath26 with @xmath27}/(x^{{{\\sigma}}_1 } ) \\times \\cdots \\times { { \\mathbb{k}}[{x}]}/(x^{{{\\sigma}}_{n}}),\\vspace{-0.05cm}\\ ] ] by mapping any @xmath28 in @xmath29 to the vector @xmath30 made from the concatenation of the coefficient vectors of @xmath31 . over @xmath29 ,",
    "the @xmath16}$]-module structure on @xmath26 given by @xmath32 becomes @xmath33 now , if @xmath34 is associated to @xmath35 , with @xmath36 and @xmath37 in @xmath16}/(x^{{{\\sigma}}_j})$ ] for all @xmath38 , the relation @xmath39 means that for all @xmath40 in @xmath41 , we have @xmath42 applying a translation by @xmath43 , this is equivalent to @xmath44 thus , in terms of vector m - pad approximation as in  @xcite , @xmath45 is an interpolant for @xmath46 , @xmath24 , and @xmath47 .",
    "the set of all interpolants for @xmath20 is a free @xmath16}$]-module of rank @xmath0 .",
    "we are interested in computing a basis of this module , represented as a matrix in @xmath48}^{{}\\times { } } } } [ { m}]}$ ] and called an _ interpolation basis for @xmath20_. its rows are interpolants for @xmath20 , and any interpolant for @xmath20 can be written as a unique @xmath16}$]-linear combination of its rows .",
    "besides , we look for interpolants that have some type of minimal degree . following  @xcite , for a nonzero @xmath49 \\in { \\renewcommand{}{1}{{{\\mathbb{k}}[{x}]}^{{}\\times { } } } } [ { m}]$ ] and a _ shift _ @xmath50 , we define the _ @xmath51-degree _ of @xmath19 as @xmath52 .",
    "up to a change of sign , this notion of @xmath51-degree is equivalent to the one in  @xcite and to the notion of _ defect _ from  ( * ? ? ?",
    "* definition  3.1 ) .",
    "then , the _ @xmath51-row degree _ of a matrix @xmath53}^{{}\\times { } } } } [ { m}]$ ] of rank  @xmath54 is the tuple @xmath55 with @xmath56 the @xmath51-degree of the @xmath57-th row of @xmath58 .",
    "the _ @xmath51-leading matrix _ of @xmath59_{i , j}$ ] is the matrix in @xmath60 $ ] whose entry @xmath61 is the coefficient of degree @xmath62 of @xmath63 .",
    "then , @xmath58 is _",
    "@xmath51-reduced _ if its @xmath51-leading matrix has rank  @xmath54 ; see  @xcite .",
    "our aim is to compute an _",
    "@xmath51-minimal _ interpolation basis for @xmath20 , that is , one which is @xmath51-reduced : equivalently , it is an interpolation basis whose @xmath51-row degree , once written in nondecreasing order , is lexicographically minimal .",
    "this corresponds to problem  [ pbm : mib ] below .",
    "in particular , an interpolant of minimal degree can be read off from an @xmath51-minimal interpolation basis for the _ uniform _ shift @xmath64 .",
    "a well - known particular case of this problem is hermite - pad approximation , that is , the computation of _ order bases _ ( or @xmath1-bases , or minimal approximant bases ) , where @xmath21 has only eigenvalue @xmath65 .",
    "previous work on this case includes  @xcite with algorithms focusing on @xmath21 with @xmath22 blocks of identical size @xmath66 . for a shift @xmath67 with nonnegative entries",
    ", we write @xmath68 for the sum of its entries . then , in this context , the cost bound @xmath69 has been obtained under each of the following assumptions :    1 .",
    "@xmath70 in ( * ? ? ?",
    "* theorem  5.3 ) and more generally @xmath71 in ( * ? ? ?",
    "* section  4.1 ) ; 2 .",
    "@xmath72 in ( * ? ? ?",
    "* theorem  6.14 ) .",
    "these assumptions imply in particular that any @xmath51-minimal basis has size in @xmath6 , where by _ size _ we mean the number of field elements used to represent the matrix .",
    "an interesting example of a shift not covered by ( @xmath73 ) or ( @xmath74 ) is @xmath75 which is related to the hermite form ( * ? ? ?",
    "* lemma  2.6 ) . in general , as detailed in appendix  [ app : shift ] , one may assume without loss of generality that @xmath76 , @xmath77 , and @xmath78 .",
    "there are also applications of problem  [ pbm : mib ] to multivariate interpolation , where @xmath21 is not nilpotent anymore , and for which we have neither @xmath79 nor @xmath80 , as we will see in subsection  [ subsec : applications ] .",
    "it was left as an open problem in  ( * ? ? ?",
    "* section  7 ) to obtain algorithms with cost bound @xmath2 for such matrices @xmath21 and for arbitrary shifts . in this paper , we solve this open problem .",
    "an immediate challenge is that for an arbitrary shift @xmath51 , the size of an @xmath51-minimal interpolation basis may be beyond our target cost : we show this in appendix  [ app : large_size_mib ] with an example of hermite - pad approximation .",
    "our answer is to compute a basis in _ @xmath51-popov form _ : among its many interesting features , it can be represented using at most @xmath81 elements from @xmath7 , and it is canonical : for every nonsingular @xmath82}^{{}\\times { } } } } $ ] and @xmath83 , there is a unique matrix @xmath58 in @xmath51-popov form which is left - unimodularly equivalent to @xmath84 .",
    "we use the definition from  ( * ? ? ?",
    "* section  7 ) , phrased using the notion of pivot  ( * ? ? ?",
    "* section  6.7.2 ) .",
    "[ dfn : pivot ] let @xmath85_j \\in { \\renewcommand{}{1}{{{\\mathbb{k}}[{x}]}^{{}\\times { } } } } [ { m}]$ ] be a nonzero row vector and let @xmath83 .",
    "@xmath51-pivot index _ of @xmath86 is the largest index @xmath87 such that @xmath88 ; then , @xmath89 and @xmath90 are called the _",
    "@xmath51-pivot entry _ and the _ @xmath51-pivot degree _ of @xmath86 .",
    "[ dfn : popov ] let @xmath91}^{{}\\times { } } } } $ ] be nonsingular and let @xmath92 .",
    "then , @xmath58 is said to be in _",
    "@xmath51-popov form _ if its @xmath51-pivot entries are monic and on its diagonal , and if in each column of @xmath58 the nonpivot entries have degree less than the pivot entry .",
    "we call _ @xmath51-popov interpolation basis for @xmath20 _ the unique interpolation basis for @xmath20 which is in @xmath51-popov form ; in particular , it is an @xmath51-minimal one . for small values of @xmath1 , namely @xmath93",
    ", we gave in  ( * ? ? ?",
    "* section  7 ) an algorithm which computes the @xmath51-popov interpolation basis in @xmath94 operations for an arbitrary  @xmath51 ( * ? ? ?",
    "* theorem  1.4 ) .",
    "hence , in what follows , we focus on the case @xmath95 .",
    "we use the convenient assumption that @xmath21 is given to us as a list of eigenvalues and block sizes : @xmath96 for some pairwise distinct eigenvalues @xmath97 , with @xmath98 and @xmath99 for all @xmath57 ; we say that this representation is _",
    "standard_.    [ thm : pib ] assuming that @xmath100 is a jordan matrix given by a standard representation , there is a deterministic algorithm which solves problem  [ pbm : mib ] using @xmath101 operations in @xmath7 and returns the @xmath51-popov interpolation basis for @xmath20 .    in this result , @xmath102 is such that polynomials of degree at most @xmath103 in @xmath16}$ ] can be multiplied using @xmath104 operations in @xmath7 , and @xmath102 satisfies the super - linearity properties of  ( * ? ? ?",
    "* chapter  8) .",
    "it follows from  @xcite that @xmath104 can be taken in @xmath105 .",
    "the exponent @xmath3 is so that we can multiply @xmath106 matrices in @xmath107 ring operations on any ring , the best known bound being @xmath108  @xcite .    compared to our work in  @xcite ,",
    "our algorithm here has two key new features :    * it supports arbitrary shifts with a cost @xmath109 ; * it computes the basis in @xmath51-popov form .    to the best of our knowledge , no algorithm for problem  [ pbm : mib ] with cost @xmath2 was known previously for _ arbitrary _ shifts , even for the specific case of order basis computation .",
    "if @xmath21 is given as an arbitrary list @xmath110 , we can reorder it ( and permute the columns of @xmath111 accordingly ) to obtain an equivalent standard representation in time @xmath112  ( * ? ? ?",
    "* proposition  12 ) ; if @xmath7 is equipped with an order , and if we assume that comparisons take unit time , this can of course be done in time @xmath113 .",
    "several previous algorithms for order basis computation , such as those in  @xcite , follow a divide - and - conquer scheme inspired by the knuth - schnhage - moenck algorithm  @xcite this paper builds on our previous work in  @xcite , where we extended this recursive approach to more general interpolation problems .",
    "however , the main algorithm in  @xcite does not handle an arbitrary shift @xmath51 with a satisfactory complexity ; here , we use it as a black box , after showing how to reduce the problem to a new one with suitable shift .",
    "let @xmath111 , @xmath21 , and @xmath51 be our input , and write @xmath114 and @xmath115 for the @xmath116 leading and trailing principal submatrices of  @xmath21 .",
    "first , compute an @xmath51-minimal interpolation basis @xmath117 for @xmath114 and the first @xmath118 columns of @xmath111 ; then , compute the last @xmath118 columns @xmath119 of the _ residual _ @xmath120 ; then , compute a @xmath121-minimal interpolation basis @xmath122 for @xmath123 with @xmath124 ; finally , return the matrix product @xmath125 .",
    "this approach allows to solve problem  [ pbm : mib ] using @xmath126 operations in @xmath7 . in the case of hermite - pad approximation , this is the divide - and - conquer algorithm in  @xcite .",
    "besides , an @xmath51-minimal basis computed by this method has degree at most @xmath1 and thus size in @xmath127 , and there are indeed instances of problem  [ pbm : mib ] for which this size reaches @xmath128 . in appendix",
    "[ app : large_size_mib ] , we show such an instance for the algorithm in  @xcite , in the case of hermite - pad approximation .    it is known that the average degree of the rows of any @xmath51-minimal interpolation basis is at most @xmath129 , where",
    "@xmath130  ( * ? ? ?",
    "* theorem  4.1 ) . in  @xcite , focusing on the case where @xmath131 is small compared to @xmath1 , and preserving such a property in recursive calls via changes of shifts , we obtained the cost bound @xmath132 to solve problem  [ pbm : mib ] ; this cost is for @xmath133 , and a similar one holds for @xmath134 , both being in @xmath135 .",
    "the fundamental reason for this kind of improvement over @xmath126 , already seen with  @xcite , is that one controls the average row degree of the bases @xmath122 and @xmath117 , _ and _ of their product @xmath136 .",
    "this result is @xmath2 for @xmath131 in @xmath137 .",
    "the main difficulty to extend it to any shift @xmath51 is to control the size of the computed bases : the hermite - pad example pointed out above corresponds to @xmath138 and leads to an output of size @xmath128 for the algorithm of  @xcite as well .",
    "the key ingredient to control this size is to work with bases in @xmath51-popov form : for any @xmath51 , the @xmath51-popov interpolation basis @xmath139 for @xmath20 has average _ column _ degree at most @xmath140 and size at most @xmath81 , as detailed in section  [ sec : algo ] .",
    "now , suppose that we have computed recursively the bases @xmath122 and @xmath117 in @xmath51- and @xmath121-popov form ; we want to output the @xmath51-popov form @xmath139 of @xmath125 .",
    "in general , this product is not normalized and may have size @xmath5 : its computation is beyond our target cost .",
    "thus , one main idea is that we will _ not _",
    "rely on polynomial matrix multiplication to combine the bases obtained recursively ; instead , we use a minimal interpolation basis computation for a shift that has good properties as explained below .",
    "an important remark is that if we know _ a priori _ the column degree @xmath141 of @xmath139 , then the problem becomes easier .",
    "this idea was already used in algorithms for the hermite form  @xmath142 of a polynomial matrix  @xcite , which first compute the column degree @xmath141 of @xmath142 , and then obtain @xmath142 as a submatrix of some minimal nullspace basis for a shift involving @xmath143 .    in section  [ sec : known_degrees ] , we study the problem of computing the @xmath51-popov interpolation basis @xmath139 for @xmath20 having its column degree @xmath141 as an additional input . we show that this reduces to the computation of a @xmath144-minimal interpolation basis @xmath145 with the specific shift @xmath146 .",
    "the properties of this shift  @xmath144 allow us first to compute @xmath145 in @xmath147 operations using the partial linearization framework from  ( * ? ? ?",
    "* section  3 ) and the minimal interpolation basis algorithm in  ( * ? ? ?",
    "* section  3 ) , and second to easily retrieve @xmath139 from @xmath145 .",
    "still , in general we do not know @xmath141 .",
    "we will thus compute it , relying on a variation of the divide - and - conquer strategy at the beginning of this subsection .",
    "we stop the recursion as soon as @xmath148 , in which case we do not need  @xmath141 to achieve efficiency : the algorithm from  ( * ? ? ?",
    "* section  7 ) computes the @xmath51-popov interpolation basis in @xmath94 operations for any  @xmath51  ( * ? ? ?",
    "* theorem  1.4 ) .",
    "then , we show in section  [ sec : mindeg_invariant ] that from @xmath117 and @xmath122 computed recursively _ in shifted popov form _ , we can obtain @xmath141 for free .",
    "finally , instead of considering @xmath136 , we use the knowledge of @xmath141 to compute the basis @xmath139 from scratch as explained in the previous paragraph .",
    "this summarizes our main algorithm , which is presented in section  [ sec : algo ] .      as a particular case of problem  [ pbm : mib ] , when all the eigenvalues of @xmath21 are zero , we obtain the following complexity result about _ order basis _ computation  ( * ? ? ? * definition  2.2 ) .",
    "[ thm : order_basis ] let @xmath149 , let @xmath150 , let @xmath83 , and let @xmath151}^{{}\\times { } } } } [ { n}]$ ] with its @xmath40-th column @xmath152 of degree less than @xmath153 .",
    "the unique basis @xmath154}^{{}\\times { } } } } [ { m}]}$ ] in @xmath51-popov form of the @xmath16}$]-module of approximants @xmath155}^{{}\\times { } } } } [ { m } ] \\;\\mid\\ ;      { \\mathbf{\\makelowercase{p } } } { { { \\mathbf{\\makeuppercase{f}}}}_{*,j } } = 0 \\bmod x^{{\\sigma}_j } \\text { for each } j \\}\\ ] ] can be computed deterministically using @xmath101 operations in @xmath7 , where @xmath156 .",
    "previous work on this problem includes  @xcite , mostly with identical orders @xmath157 ; an interesting particular case is hermite - pad approximation with @xmath158 . to simplify matters , for all our comparisons , we consider @xmath133 . for order basis computation with @xmath157 and @xmath159 ,",
    "the cost bound @xmath160 was achieved in  @xcite under either of the assumptions @xmath79 and @xmath80 on the shift .",
    "still , the corresponding algorithm returns a basis @xmath139 which is only @xmath51-reduced , and because both the shift @xmath51 and the degrees in @xmath139 may be unbalanced , one can not directly rely on the fastest known normalization algorithm  @xcite to compute the @xmath51-popov form of @xmath139 within the target cost .",
    "another application of problem  [ pbm : mib ] is a multivariate interpolation problem that arises for example in the first step of algorithms for the list - decoding of parvaresh - vardy codes  @xcite and of folded reed - solomon codes  @xcite , as well as in robust private information retrieval  @xcite .",
    "the bivariate case corresponds to the interpolation steps of ktter and vardy s soft - decoding  @xcite and guruswami and sudan s list - decoding  @xcite algorithms for reed - solomon codes .",
    "given a set of points in @xmath161 and associated multiplicities , this problem asks to find a multivariate polynomial @xmath162 such that : @xmath163 @xmath164 has prescribed exponents for the @xmath165 variables , so that the problem can be linearized with respect to @xmath165 , leaving us with a linear algebra problem over @xmath16}$ ] ; @xmath166 @xmath164 vanishes at all the given points with their multiplicities , inducing a structure of @xmath16}$]-module on the set of solutions ; @xmath167 @xmath164 has some type of minimal weighted degree , which can be seen as the minimality of the shifted degree of the vector over @xmath16}$ ] that represents @xmath164 .",
    "following the coding theory context  @xcite , given a point @xmath168 and a set of exponents @xmath169 , we say that the polynomial @xmath170 $ ] _ vanishes at @xmath171 with multiplicity support @xmath172 _ if the shifted polynomial @xmath173 has no monomial with exponent in @xmath172",
    ". we will only consider supports that are _ stable under division _",
    ", meaning that if @xmath174 is in @xmath172 , then any @xmath175 with @xmath176 for all @xmath40 is also in @xmath172 .",
    "now , given a set of exponents @xmath177 , we represent @xmath178 as the row @xmath179_{\\gamma \\in { \\gamma } } \\in { \\renewcommand{}{1}{{{\\mathbb{k}}[{x}]}^{{}\\times { } } } } [ { m}]$ ] where @xmath0 is the cardinality of @xmath180 .",
    "again , we assume that the exponent set @xmath180 is stable under division ; then , the set of solutions is a free @xmath16}$]-module of rank @xmath0 . in the mentioned applications",
    ", we typically have @xmath181 for an integer @xmath182 called the _ list - size parameter_.    besides , we are given some weights @xmath183 on the variables @xmath184 , and we are looking for @xmath185 which has minimal @xmath186-weighted degree , which is the degree in @xmath187 of the polynomial @xmath188 this is exactly requiring that the @xmath51-degree of @xmath179_\\gamma$ ] be minimal , for @xmath189_\\gamma$ ] .",
    "we note that it is sometimes important , for example in  @xcite , to return a whole @xmath51-minimal interpolation basis and not only one interpolant of small @xmath51-degree .    for more details about the reduction from problem  [ pbm : multi_int ] to problem  [ pbm : mib ] , explaining how to build the input matrices",
    "@xmath20 with @xmath21 a jordan matrix in standard representation , we refer the reader to  ( * ? ? ?",
    "* subsection  2.4 ) .",
    "in particular , the dimension @xmath1 is the sum of the cardinalities of the multiplicity supports . in the mentioned applications to coding theory , we have @xmath190 where @xmath182 is the list - size parameter ; and @xmath1 is the",
    "so - called _ cost _ in the soft - decoding context  ( * ? ? ?",
    "* section  iii ) , that is , the number of linear equations when linearizing the problem over @xmath7 . as a consequence of theorem  [ thm : pib ] , we obtain the following complexity result .    [ thm : multi_int ] let @xmath191 .",
    "there is a deterministic algorithm which solves problem  [ pbm : multi_int ] using @xmath101 operations in @xmath7 , and returns the unique basis of solutions which is in @xmath51-popov form .    under the assumption that the @xmath192 are pairwise distinct ,",
    "the cost bound @xmath193 was achieved for an arbitrary shift using fast structured linear algebra  ( * ? ? ?",
    "* theorems  1  and  2 ) , following work by  @xcite . however , the corresponding algorithm is randomized and returns only one interpolant of small @xmath51-degree . for a broader overview of previous work on this problem",
    ", we refer the reader to the introductive sections of  @xcite and to ( * ? ? ?",
    "* section  2 ) .",
    "the term @xmath194 reported in   for the cost of the algorithm of  @xcite can be neglected if @xmath195 ; this is for instance satisfied in the context of bivariate interpolation for soft- or list - decoding of reed - solomon codes ( * ? ? ?",
    "* sections  2.5 and  2.6 ) . however , we do not have this bound on @xmath131 in the list - decoding of parvaresh - vardy codes and folded reed - solomon codes and in private information retrieval .",
    "thus , in these cases our algorithm achieves the best known cost bound , improving upon  @xcite .",
    "in this section , we present our main result , algorithm  [ algo : pib ] .",
    "it relies on three subroutines ; two of them are from  @xcite , while the third is a key new ingredient , detailed in section  [ sec : known_degrees ] .",
    "* linearizationmib  ( * ? ? ?",
    "* algorithm  9 ) solves the base case @xmath148 using linear algebra over @xmath7 .",
    "the inputs are @xmath111 , @xmath21 , @xmath51 , as well as an integer for which we can take the first power of two greater than or equal to @xmath1",
    ". * computeresiduals  ( * ? ? ?",
    "* algorithm  5 ) ( with an additional pre - processing detailed at the end of section  [ sec : known_degrees ] ) computes the residual @xmath196 from the first basis @xmath117 obtained recursively . *",
    "knownmindegmib , detailed in section  [ sec : known_degrees ] , computes the @xmath51-popov interpolation basis when one knows _ a priori _ the @xmath51-minimal degree of @xmath20 ( see below ) .    in what follows , by _",
    "@xmath51-minimal degree of @xmath20 _ we mean the tuple of degrees of the diagonal entries of the @xmath51-popov interpolation basis @xmath139 for @xmath20 .",
    "because @xmath139 is in @xmath51-popov form , this is also the column degree of @xmath139 , and the sum of these degrees is @xmath197 . as a consequence , using theorem  4.1 in  @xcite ( or following the lines of @xcite and @xcite ) we obtain the following lemma , which implies in particular that the size of @xmath139 is at most @xmath81 .    [ lem : mindeg ] let @xmath198}$ ] , @xmath12 , @xmath83 , and let @xmath199 be the @xmath51-minimal degree of @xmath20 .",
    "then , we have @xmath200 .    taking for granted the results in the next sections ,",
    "we now prove our main theorem .    for the case",
    "@xmath148 , the correctness and the cost bound of algorithm  [ algo : pib ] both follow from  ( * ? ? ?",
    "* theorem  1.4 ) : it uses @xmath201 operations ( with an extra @xmath202 factor if @xmath134 ) .",
    "now , we consider the case @xmath203 .",
    "using the notation in the algorithm , assume that @xmath117 is the @xmath51-popov interpolation basis for @xmath204 , and @xmath122 is the @xmath121-popov interpolation basis for @xmath123 , where @xmath205 , and @xmath206 and @xmath207 are the @xmath51- and @xmath208-minimal degrees of @xmath204 and @xmath123 , respectively .",
    "we claim that @xmath125 is @xmath51-reduced : this will be proved in lemma  [ lem : pivdegs ] .",
    "let us then prove that @xmath125 is an interpolation basis for @xmath20 .",
    "let @xmath209}^{{}\\times { } } } } [ { m}]$ ] be an interpolant for @xmath20 .",
    "since @xmath21 is upper triangular , @xmath86 is in particular an interpolant for @xmath204 , so there exists @xmath210}^{{}\\times { } } } } [ { m}]$ ] such that @xmath211 . besides",
    ", we have @xmath212 $ ] , so that @xmath213 $ ] , and thus @xmath214",
    ". then , there exists @xmath215}^{{}\\times { } } } } [ { m}]$ ] such that @xmath216 , which gives @xmath217 .    in particular ,",
    "the @xmath51-popov interpolation basis for @xmath20 is the @xmath51-popov form of @xmath125 .",
    "thus , lemma  [ lem : pivdegs ] combined with lemma  [ lem : invariant ] will show that the @xmath51-minimal degree of @xmath20 is @xmath218 . as a result ,",
    "proposition  [ prop : known_mindeg_pib ] states that step  * 2.e * correctly computes the @xmath51-popov interpolation basis for @xmath20 .",
    "concerning the cost bound , the recursion stops when @xmath148 , and thus the algorithm uses @xmath219 operations ( with an extra @xmath220 factor if @xmath134 ) .",
    "the depth of the recursion is @xmath221 ; we have two recursive calls in dimensions @xmath222 , and two calls to subroutines with cost bounds given in corollary  [ cor : residual ] and proposition  [ prop : known_mindeg_pib ] , respectively .",
    "the conclusion follows from the super - linearity properties of @xmath102 .",
    "in this section , we show that the @xmath51-minimal degree of @xmath20 can be deduced for free from two bases computed recursively as in algorithm  [ algo : pib ] . to do this",
    ", we actually prove a slightly more general result about the degrees of the @xmath51-pivot entries of so - called weak popov matrix forms  @xcite .",
    "[ dfn : weak_popov ] let @xmath91}^{{}\\times { } } } } $ ] be nonsingular and let @xmath92 .",
    "then , @xmath58 is said to be in _",
    "@xmath51-weak popov form _ if the @xmath51-pivot indices of its rows are pairwise distinct ; @xmath58 is said to be in _",
    "@xmath51-diagonal weak popov form _ if its @xmath51-pivot entries are on its diagonal .",
    "if @xmath58 is in @xmath51-weak popov form , the _",
    "@xmath51-pivot degree _ of @xmath58 is the tuple @xmath199 where for @xmath223 , @xmath224 is the @xmath51-pivot degree of the row of @xmath58 which has @xmath51-pivot index @xmath40 .",
    "we recall from section  [ sec : intro ] that for @xmath53}^{{}\\times { } } } } [ { m}]$ ] , its @xmath51-leading matrix @xmath225 $ ] is formed by the coefficients of degree @xmath65 of @xmath226 , where @xmath227 and @xmath228 stands for the diagonal matrix with entries @xmath229 .",
    "then , a nonsingular @xmath230}^{{}\\times { } } } } [ { m}]}$ ] is in @xmath51-diagonal weak popov form with @xmath51-pivot degree @xmath141 if and only if @xmath231 is lower triangular and invertible and @xmath232 .",
    "for example , at all stages of the algorithms in  @xcite for problem  [ pbm : mib ] ( as well as  @xcite if avoiding row permutations at the base case of the recursion ) , the computed bases are in shifted diagonal weak popov form .",
    "this is due to the compatibility of this form with matrix multiplication , as stated in the next lemma .",
    "[ lem : pivdegs ] let @xmath83 , @xmath233}^{{}\\times { } } } } $ ] in @xmath51-diagonal weak popov form with @xmath51-pivot degree @xmath206 , @xmath205 , and @xmath234}^{{}\\times { } } } } $ ] in @xmath121-diagonal weak popov form with @xmath121-pivot degree @xmath207 .",
    "then , @xmath125 is in @xmath51-diagonal weak popov form with @xmath51-pivot degree @xmath235 .    by the predictable - degree property  ( * ?",
    "* theorem  6.3 - 13 ) we have @xmath236 .",
    "the result follows since @xmath237 is lower triangular and invertible .    for matrices in @xmath51-popov form",
    ", the @xmath51-pivot degree coincides with the column degree : in particular , the @xmath51-minimal degree of @xmath20 is the @xmath51-pivot degree of the @xmath51-popov interpolation basis for @xmath20 . with the notation of algorithm  [ algo : pib ]",
    ", the previous lemma proves that the @xmath51-pivot degree of @xmath125 is @xmath218 . in the rest of this section , we prove that the @xmath51-popov form of @xmath125 has the same @xmath51-pivot degree as @xmath125 .",
    "consequently , the @xmath51-minimal degree of @xmath20 is @xmath235 and thus can be found from @xmath122 and @xmath117 without computing their product",
    ".    it is known that left - unimodularly equivalent @xmath51-reduced matrices have the same @xmath51-row degree up to permutation  ( * ? ? ?",
    "* lemma  6.3 - 14 ) . here , we prove that the @xmath51-pivot degree is invariant among left - unimodularly equivalent matrices in @xmath51-weak popov form .",
    "[ lem : invariant ] let @xmath83 and let @xmath58 and @xmath238 in @xmath48}^{{}\\times { } } } } [ { m}]}$ ] be two left - unimodularly equivalent nonsingular polynomial matrices in @xmath51-weak popov form . then @xmath58 and @xmath238 have the same @xmath51-pivot degree .",
    "since row permutations preserve both the @xmath51-pivot degrees and left - unimodular equivalence , we can assume that @xmath58 and @xmath238 are in @xmath51-diagonal weak popov form .",
    "the @xmath51-pivot degrees of @xmath58 and @xmath238 are then @xmath239 and @xmath240 , and it remains to check that @xmath241 .",
    "for any nonsingular @xmath242}^{{}\\times { } } } } $ ] in @xmath51-weak popov form we have @xmath243  ( * ? ? ?",
    "* section  6.3.2 ) .",
    "thus , if @xmath244 is furthermore comprised entirely of rows in the @xmath16}$]-row space of @xmath58 ( that is , @xmath244 is a left multiple of @xmath58 ) then we must have @xmath245 .    to arrive at a contradiction , suppose there exists a row index @xmath57",
    "such that the @xmath51-degree of @xmath246 differs from that of @xmath247 and without loss of generality assume that the s - degree of @xmath247 is strictly less than that of @xmath246",
    ". then the matrix @xmath244 obtained from @xmath58 by replacing the @xmath57-th row of @xmath58 with @xmath247 is in @xmath51-diagonal weak popov form .",
    "this is a contradiction , since @xmath248 and @xmath247 is in the @xmath16}$]-row space of @xmath58 for @xmath238 is left - unimodularly equivalent to @xmath58 .",
    "in particular , any nonsingular matrix in @xmath51-weak popov form has the same @xmath51-pivot degree as its @xmath51-popov form , which proves our point about the @xmath51-popov form of @xmath125 .",
    "in this section , we propose an efficient algorithm for computing the @xmath51-popov interpolation basis @xmath139 for @xmath20 when the @xmath51-minimal degree @xmath141 of @xmath20 is known _ a priori_.    first , we show that the shift @xmath146 leads to the same @xmath144-popov interpolation basis @xmath139 as the initial shift @xmath51 .",
    "then , we prove that @xmath139 can be easily recovered from any interpolation basis which is simply @xmath144-reduced .",
    "the following lemma extends  ( * ? ? ?",
    "* lemmas  15 and  17 ) to the case of any shift  @xmath51 .",
    "[ lem : mindeg_shift ] let @xmath249 , and let @xmath250}^{{}\\times { } } } } $ ] be in @xmath51-popov form with column degree @xmath251 .",
    "then @xmath58 is also in @xmath144-popov form for @xmath252 , and we have @xmath253 . in particular , for any matrix @xmath254}^{{}\\times { } } } } $ ] which is unimodularly equivalent to @xmath58 and @xmath144-reduced , @xmath145 has column degree @xmath141 , and @xmath255 .",
    "let us denote @xmath256_{i , j}$ ] , and let @xmath257 .",
    "since @xmath58 is in @xmath51-popov form , it is enough to prove that the @xmath144-pivot entries of the rows of @xmath58 are on its diagonal .",
    "we have @xmath258 for all @xmath259 , and @xmath260 .",
    "then , the @xmath57-th row of @xmath58 has @xmath144-pivot index @xmath57 and @xmath144-degree @xmath65 .",
    "thus @xmath58 is in @xmath144-popov form with @xmath144-row degree @xmath261 .",
    "now , let @xmath145 be a @xmath144-reduced matrix left - unimodularly equivalent to @xmath58 . then , @xmath262 , so that we can write @xmath263 with the @xmath40-th column of @xmath238 of degree less than @xmath224 . in particular , since @xmath264 is invertible , the column degree of @xmath145 is @xmath141 .",
    "besides , we obtain @xmath265 , and the @xmath40-th column of @xmath266 has degree less than @xmath224 .",
    "thus @xmath267 is in @xmath144-popov form and unimodularly equivalent to @xmath58 , hence equal to @xmath58 .",
    "in particular , if @xmath141 is the @xmath51-minimal degree of @xmath20 and @xmath146 , any @xmath144-minimal interpolation basis @xmath145 for @xmath20 has size at most @xmath268 , which for @xmath269 is in @xmath6 .",
    "still , the algorithm in  @xcite can not directly be used to compute such an @xmath145 efficiently , because @xmath270 can be as large as @xmath271 , for example when @xmath272 ; in this case , this algorithm uses @xmath126 operations .    by lemma  [ lem : mindeg ]",
    ", however , @xmath146 satisfies @xmath273 . for this type of unbalanced shift ,",
    "a solution in @xmath2 already exists in the particular case of order basis computation  ( * ? ? ?",
    "* section  6 ) , building upon the partial linearization technique in  ( * ? ? ?",
    "* section  3 ) . here , we adopt a similar approach , taking advantage of the _ a priori _ knowledge of the column degree of the output matrix .",
    "[ lem : known_mindeg_pib ] let @xmath274 $ ] , @xmath12 , and @xmath83 , and let @xmath251 denote the @xmath51-minimal degree of @xmath20 .",
    "then , let @xmath275 , and for @xmath276 write @xmath277 with @xmath278 and @xmath279 , and let @xmath280 .",
    "then , define @xmath281 as @xmath282 and the expansion - compression matrix @xmath283}^{{}\\times { } } } } [ { m}]$ ] as @xmath284 let further @xmath285 and @xmath286}^{{}\\times { } } } } $ ] be a @xmath144-minimal interpolation basis for @xmath287 .",
    "then , the @xmath51-popov interpolation basis for @xmath20 is the submatrix of @xmath288 formed by its rows at indices @xmath289 for @xmath290 .",
    "let @xmath139 denote the @xmath51-popov interpolation basis for @xmath20 ; @xmath139 has column degree @xmath141 .",
    "first , we partially linearize the columns of @xmath139 in degree @xmath291 to obtain @xmath292}^{{}\\times { } } } } [ { \\overline{{m}}}]$ ] ; more precisely , @xmath293 is the unique matrix of degree less than @xmath291 such that @xmath294 .",
    "then , we define @xmath295}^{{}\\times { } } } } $ ] as follows :    * for @xmath296 , the row @xmath297 of @xmath298 is the row @xmath57 of @xmath293 ; * for @xmath299 and @xmath300 , the row @xmath301 of @xmath302 is the row @xmath303 \\in        { \\renewcommand{}{1}{{{\\mathbb{k}}[{x}]}^{{}\\times { } } } } [ { \\overline{{m}}}]$ ] with the entry @xmath304 at column index @xmath301 .",
    "since @xmath139 is in @xmath51-popov form with column degree @xmath141 , it is in @xmath143-popov form by lemma  [ lem : mindeg_shift ] . then , one can check that @xmath302 is in @xmath144-popov form and has @xmath144-row degree @xmath261 .    by construction ,",
    "every row of @xmath302 is an interpolant for @xmath305 . in particular , since @xmath145 is an interpolation basis for @xmath305 , there is a matrix @xmath306}^{{}\\times { } } } } $ ] such that @xmath307 .",
    "besides , there exists no interpolant @xmath308}^{{}\\times { } } } } [ { \\overline{{m}}}]$ ] for @xmath305 which has @xmath144-degree less than @xmath65 : otherwise , @xmath309 would be an interpolant for @xmath20 , and it is easily checked that it would have @xmath143-degree less than @xmath65 , which is impossible .    thus every row of @xmath145 has @xmath144-degree at least @xmath65 , and the predictable degree property  ( * ? ? ?",
    "* theorem  6.3.13 ) shows that @xmath310 is a constant matrix , and therefore unimodular .",
    "then , @xmath302 is an interpolation basis for @xmath305 , and since it is in @xmath144-popov form , by lemma  [ lem : mindeg_shift ] we obtain that @xmath311 .",
    "the conclusion follows .",
    "then , it remains to prove that such a basis @xmath145 can be computed efficiently using the algorithm minimalinterpolationbasis in  @xcite ; this leads to algorithm  [ algo : known_mindeg_pib ] .",
    "[ prop : known_mindeg_pib ] assuming that @xmath100 is a jordan matrix given by a standard representation , and assuming we have the @xmath51-minimal degree of @xmath20 as an additional input , there is a deterministic algorithm knownmindegmib which solves problem  [ pbm : mib ] using @xmath312 operations in @xmath7 .",
    "we focus on the case @xmath269 ; otherwise , a better cost bound can be achieved even without knowing @xmath141  ( * ? ? ?",
    "* theorem  1.4 ) .",
    "the correctness of algorithm  [ algo : known_mindeg_pib ] follows from lemma  [ lem : known_mindeg_pib ] .",
    "we remark that it uses @xmath313 rather than @xmath144 because the minimal interpolation basis algorithm in  @xcite requires the input shift to have non - negative entries .",
    "since adding a constant to every entry of @xmath144 does not change the notion of @xmath144-reducedness , the basis @xmath145 obtained at step  * 4 * is a @xmath144-minimal interpolation basis for @xmath20 .",
    "concerning the cost bound , we will show that it is dominated by the time spent in step  * 4*. first , we prove that @xmath314 , so that the cost of step  * 4 * follows from  ( * ? ? ?",
    "* theorem  1.5 ) .",
    "we have @xmath315 for all @xmath57 .",
    "thus , @xmath316 thanks to lemma  [ lem : mindeg ] . then , since all entries of @xmath144 are in @xmath317 , we obtain @xmath318 .",
    "step  * 3 * can be done in  @xmath319 operations according to lemma  [ lem : residual_expand ] below .",
    "lemma  [ lem : mindeg_shift ] proves that the sum of the column degrees of @xmath145 is @xmath320 .",
    "then , the product in step  * 5 * can be done in @xmath321 operations , by first linearizing the columns of @xmath145 into a @xmath322 matrix over @xmath7 , then left - multiplying this matrix by @xmath323 ( itself computed using @xmath107 operations ) , and finally performing the inverse linearization .    because of the degrees in @xmath302 and the definition of @xmath324 , the output in step  * 6 * can be formed without using any arithmetic operation .    the efficient computation of @xmath325 can be done with the algorithm for computing residuals in  ( * ? ? ?",
    "* section  6 ) .",
    "[ lem : residual_expand ] the product @xmath325 at step  * 3 * of algorithm  [ algo : known_mindeg_pib ] can be computed using @xmath326 operations in @xmath7 .",
    "the product @xmath325 has @xmath327 rows , with @xmath328 as above .",
    "besides , by definition of @xmath324 , each row of @xmath325 is a product of the form @xmath329 , where @xmath330 , @xmath331 , and @xmath332 denotes the row @xmath40 of @xmath111 . in particular , @xmath333 : then , according to  ( * ? ? ?",
    "* proposition  6.1 ) , each of these @xmath327 products can be performed using @xmath334 operations in @xmath7 .",
    "this lemma and the partial linearization technique can also be used to compute the residual at step  * 2.c * of algorithm  [ algo : pib ] , that is , a product of the form @xmath335 with the sum of the column degrees of @xmath58 bounded by @xmath1 .",
    "first , we expand the high - degree columns of @xmath58 to obtain @xmath336}^{{}\\times { } } } } [ { \\overline{{m}}}]$ ] of degree less than @xmath337 such that @xmath338 ; then , we compute @xmath339 ; and finally we rely on the algorithm in  ( * ? ? ?",
    "* proposition  6.1 ) to compute @xmath340 efficiently .",
    "[ cor : residual ] let @xmath274 $ ] with @xmath269 , and let @xmath12 be a jordan matrix given by a standard representation .",
    "let @xmath91}^{{}\\times { } } } } $ ] with column degree @xmath199 such that @xmath341 .",
    "then , the product @xmath335 can be computed using @xmath342 operations in @xmath7 .",
    "* acknowledgments . *",
    "we thank b. beckermann and g. labahn for their valuable comments , as well as an anonymous referee for suggesting a shorter proof of lemma  [ lem : invariant ] .",
    "jeannerod and g. villard were partly supported by the anr project hpac ( anr 11 bs02 013 ) .",
    "v. neiger was supported by the international mobility grants explora doc from _ rgion rhne - alpes _ , _ palse _ , and _ mitacs globalink - inria_.  .",
    "schost was supported by nserc .",
    "10    b.  beckermann and g.  labahn . a uniform approach for the fast computation of matrix - type pad approximants .",
    ", 15(3):804823 , 1994 .",
    "b.  beckermann and g.  labahn .",
    "fraction - free computation of matrix rational interpolants and matrix gcds .",
    ", 22(1):114144 , 2000 .",
    "b.  beckermann , g.  labahn , and g.  villard . normal forms for general polynomial matrices .",
    ", 41(6):708737 , 2006 .",
    "p.  beelen and k.  brander .",
    "key equations for list decoding of reed - solomon codes and how to solve them . , 45(7):773786 , 2010 .",
    "a.  bostan , c .- p . jeannerod , and  .",
    "schost . solving structured linear systems with large displacement rank . , 407(1 - 3):155181 , 2008 .",
    "k.  brander . .",
    "phd thesis , technical university of denmark , 2010 .",
    "p.  busse . .",
    "phd thesis , university of kentucky , 2008 .",
    "d.  g. cantor and e.  kaltofen . on fast multiplication of polynomials over arbitrary algebras . ,",
    "28(7):693701 , 1991 .",
    "m.  chowdhury , c .- p .",
    "jeannerod , v.  neiger ,  .",
    "schost , and g.  villard .",
    "faster algorithms for multivariate interpolation with multiplicities and simultaneous polynomial approximations . , 61(5):23702387 , 2015 .",
    "h.  cohn and n.  heninger .",
    "approximate common divisors via lattices . in _",
    "tenth algorithmic number theory symposium _ , pages 271293 .",
    "mathematical sciences publishers ( msp ) , 2012 - 2013 .",
    "d.  coppersmith and s.  winograd .",
    "matrix multiplication via arithmetic progressions .",
    ", 9(3):251280 , 1990 .    c.  devet , i.  goldberg , and n.  heninger",
    ". optimally robust private information retrieval . in _",
    "usenix security 12 _ , pages 269283 .",
    "usenix , 2012 .",
    "gathen and j.  gerhard . .",
    "cambridge university press , 2013 .",
    "p.  giorgi , c .- p .",
    "jeannerod , and g.  villard . on the complexity of polynomial matrix computations . in _ issac03 _ , pages 135142 .",
    "acm , 2003 .",
    "s.  gupta and a.  storjohann .",
    "computing hermite forms of polynomial matrices . in _ issac11 _ , pages 155162 .",
    "acm , 2011 .",
    "v.  guruswami and a.  rudra .",
    "explicit codes achieving list decoding capacity : error - correction with optimal redundancy . , 54(1):135150 , 2008 .",
    "v.  guruswami and m.  sudan . improved decoding of reed - solomon and algebraic - geometry codes .",
    ", 45(6):17571767 , 1999 .",
    "jeannerod , v.  neiger ,  .",
    "schost , and g.  villard .",
    "computing minimal interpolation bases .",
    "hal open archive - https://hal.inria.fr/hal-01241781 , 2015 .",
    "t.  kailath . .",
    "prentice - hall , 1980 .",
    "d.  e. knuth .",
    "the analysis of algorithms . in _",
    "congrs int .",
    "nice , france _ , volume  3 , pages 269274 , 1970 .",
    "r.  koetter and a.  vardy .",
    "algebraic soft - decision decoding of reed - solomon codes .",
    ", 49(11):28092825 , 2003 .    f.  le  gall .",
    "powers of tensors and fast matrix multiplication . in _ issac14 _ , pages 296303 .",
    "acm , 2014 .",
    "r.  t. moenck",
    ". fast computation of gcds . in _ proc .",
    "5th acm symp .",
    "theory comp .",
    "_ , pages 142151 , 1973 .",
    "t.  mulders and a.  storjohann . on lattice reduction for polynomial matrices .",
    ", 35:377401 , 2003 .    v.  olshevsky and m.  a. shokrollahi .",
    "a displacement approach to efficient decoding of algebraic - geometric codes . in _",
    "stoc99 _ ,",
    "pages 235244 .",
    "acm , 1999 .",
    "f.  parvaresh and a.  vardy .",
    "correcting errors beyond the guruswami - sudan radius in polynomial time . in _",
    "focs05 _ , pages 285294 .",
    "ieee , 2005 .",
    "r.  m. roth and g.  ruckenstein .",
    "efficient decoding of reed - solomon codes beyond half the minimum distance .",
    ", 46(1):246257 , 2000 .",
    "s.  sarkar and a.  storjohann .",
    "normalization of row reduced matrices . in _ issac11 _ , pages 297304 .",
    "acm , 2011 .",
    "a.  schnhage .",
    "schnelle berechnung von kettenbruchentwicklungen .",
    ", 1:139144 , 1971 .",
    "a.  storjohann .",
    "notes on computing minimal approximant bases . in _",
    "dagstuhl seminar proceedings _ , 2006 .",
    "m.  van  barel and a.  bultheel .",
    "a general module theoretic framework for vector m - pad and matrix rational interpolation .",
    ", 3:451462 , 1992 .",
    "a.  zeh , c.  gentner , and d.  augot .",
    "an interpolation procedure for list decoding reed - solomon codes based on generalized key equations .",
    ", 57(9):59465959 , 2011 .",
    "w.  zhou . .",
    "phd thesis , university of waterloo , 2012 .",
    "w.  zhou and g.  labahn .",
    "efficient algorithms for order basis computation .",
    ", 47(7):793819 , 2012 .",
    "let @xmath82}^{{}\\times { } } } } $ ] be nonsingular , let @xmath92 , and consider @xmath343 such that @xmath344 . here , we show how to construct a shift @xmath345 such that    * the @xmath51-popov form @xmath58 of @xmath84 is also in @xmath121-popov form ; * @xmath346 , @xmath347 , and @xmath348 .",
    "we write @xmath349 where @xmath350 is a permutation of @xmath351 such that @xmath352 is non - decreasing .",
    "then , we define @xmath353 by @xmath354 and , for @xmath355 , @xmath356 let @xmath357 .",
    "since the diagonal entries of @xmath58 have degree at most @xmath358 , we obtain that @xmath58 is in @xmath121-diagonal weak popov form and thus in @xmath121-popov form .",
    "we focus on a hermite - pad approximation problem with input @xmath359 of dimensions @xmath360 as below , order @xmath1 with @xmath269 , and shift @xmath361 with @xmath0 entries @xmath65 and @xmath0 entries @xmath1 .",
    "let @xmath362 be a polynomial in @xmath187 with nonzero constant coefficient , and let @xmath363 be generic polynomials in @xmath187 of degree less than @xmath1 .",
    "then , we consider the following input with all entries truncated modulo @xmath364 : @xmath365^\\mathsf{t}}.\\ ] ]    after @xmath0 steps , the iterative algorithm in  @xcite has computed an @xmath51-minimal basis @xmath366 of approximants for @xmath359 and order  @xmath0 , which is such that @xmath367 and @xmath368^\\mathsf{t } } \\bmod x^{\\sigma}$ ] , for some polynomials @xmath369 .",
    "now we finish the process up to order @xmath1 . since the coefficient of degree @xmath0 of @xmath370 is nonzero and because of the specific shift @xmath121 , the obtained @xmath51-minimal basis @xmath139 of approximants for @xmath359 has degree profile @xmath371 & [ 0 ]                                                  \\\\      \\vdots & \\ddots & \\ddots                          \\\\      [ 1 ] & \\cdots & [ 1 ] & [ 0 ]                             \\\\      [ d+1 ] & \\cdots & [ d+1 ] & [ d+1 ] \\\\      [ d ] & \\cdots & [ d ] & [ d ] & [ 0 ]                       \\\\      \\vdots & \\cdots & \\vdots & \\vdots & & & \\ddots    \\\\      [ d ] & \\cdots & [ d ] & [ d ] & &    &      &      & [ 0 ]    \\end{bmatrix},\\ ] ] where @xmath372 , @xmath373 $ ] denotes an entry of degree @xmath57 , the entries left blank correspond to the zero polynomial , and the entries @xmath374 $ ] are on the @xmath0-th row . in particular , @xmath139 has size @xmath5 ."
  ],
  "abstract_text": [
    "<S> we compute minimal bases of solutions for a general interpolation problem , which encompasses hermite - pad approximation and constrained multivariate interpolation , and has applications in coding theory and security .    </S>",
    "<S> this problem asks to find univariate polynomial relations between @xmath0 vectors of size @xmath1 ; these relations should have small degree with respect to an input degree shift . for an arbitrary shift , </S>",
    "<S> we propose an algorithm for the computation of an interpolation basis in shifted popov normal form with a cost of @xmath2 field operations , where @xmath3 is the exponent of matrix multiplication and the notation @xmath4 indicates that logarithmic terms are omitted .    </S>",
    "<S> earlier works , in the case of hermite - pad approximation  @xcite and in the general interpolation case  @xcite , compute non - normalized bases . </S>",
    "<S> since for arbitrary shifts such bases may have size @xmath5 , the cost bound @xmath2 was feasible only with restrictive assumptions on the shift that ensure small output sizes . </S>",
    "<S> the question of handling arbitrary shifts with the same complexity bound was left open .    to obtain the target cost for any shift , </S>",
    "<S> we strengthen the properties of the output bases , and of those obtained during the course of the algorithm : all the bases are computed in shifted popov form , whose size is always @xmath6 . </S>",
    "<S> then , we design a divide - and - conquer scheme . we recursively reduce the initial interpolation problem to sub - problems with more convenient shifts by first computing information on the degrees of the intermediate bases .    </S>",
    "<S> [ section ] [ dfn]theorem [ dfn]corollary [ dfn]proposition [ dfn]lemma </S>"
  ]
}