{
  "article_text": [
    "let @xmath0 $ ] be the polynomial ring in the parameters @xmath1 over the field @xmath2 , and @xmath3 $ ] the polynomial ring over @xmath4 in the set of variables @xmath5 .",
    "let @xmath6 denote a monomial order wrt the variables @xmath7 , @xmath8 a monomial order wrt the parameters @xmath9 and @xmath10 the product order .",
    "the problem we deal with consist of solving and discussing parametric polynomial systems in @xmath11 .    since grbner bases were introduced various approaches have been developed for this problem .",
    "the most relevant ones are :    * comprehensive grbner bases ( cgb )  @xcite . * specific linear algebra tools for parametric linear systems  @xcite .",
    "* dynamic evaluation  @xcite . * newton algorithm with branch and prune approach  @xcite .",
    "* triangular sets @xcite . *",
    "specialization through hilbert functions  @xcite .",
    "* dispgb algorithm  @xcite",
    ". * alternative comprehensive grbner bases ( acgb )  @xcite .",
    "* canonical comprehensive grbner bases ( ccgb )  @xcite .",
    "this paper describes some improvements made on dispgb . trying to solve",
    "some of the examples given in the references cited above using the improved dispgb has been an interesting challenge ( see section [ examples ] )",
    ".    in @xcite , professor volker weispfenning proved the existence of a comprehensive grbner basis cgb wrt @xmath6 for any ideal @xmath12 such that for every specialization of the parameters @xmath13 extended to @xmath14\\rightarrow k'[{\\overline{x}}]$ ] , @xmath15 is a grbner basis of the specialized ideal @xmath16 .",
    "he also provided an algorithm to compute it .",
    "there are two known implementations of this algorithm @xcite .    in @xcite and @xcite ,",
    "a. montes used classical grbner bases theory to study the load - flow problem in electrical networks .",
    "v. weispfenning recommended him to use the comprehensive grbner basis algorithm  @xcite for this problem .",
    "the use of cgb in the load - flow problem provided interesting information over the parameters , but was rather complicated and not very efficient .",
    "moreover , it was not canonical , i.e. it was algorithm depending .    in montes",
    "@xcite provided a more efficient algorithm ( dispgb ) to discuss parametric grbner bases , but it was still non - canonical .",
    "dispgb produces a set of non - faithful , canonically reduced grbner bases ( grbner system ) in a dichotomic discussion tree whose branches depend on the cancellation of some polynomials in @xmath4 . the ideas in dispgb however , inspired v. weispfenning in @xcite to prove the existence of a canonical comprehensive grbner basis ( ccgb ) as well as to give a method to obtain one .",
    "the main idea for building up the canonical tree is the obtention of an ideal @xmath17 , structurally associated to the ideal @xmath12 and the order @xmath6 , which clearly separates the essential specializations not included in the generic case .",
    "let us denote @xmath18 as the _ weispfenning s discriminant ideal _ of @xmath19 . in the new weispfenning s algorithm ,",
    "@xmath18 must be computed at the beginning of the discussion using a relatively time - consuming method .",
    "the discriminant ideal was one of the lacks of the old dispgb and an insufficient alternative algorithm gencase was provided .    in this paper",
    "we obtain , following weispfenning , a _",
    "discriminant ideal _ denoted as @xmath20 , which can be determined from the data obtained after building the dispgb tree using a less time consuming algorithm and , moreover , we prove that @xmath21 .",
    "we conjecture that @xmath22 .",
    "we have verified it in more than twenty different examples , and no counter - example has been found .",
    "the ideal @xmath20 allows to rewrite the tree getting a strictly better discussion .",
    "we also prove that for a large set of parametric polynomial ideals ( at least for all prime ideals @xmath23 ) the discriminant ideal is principal and in this case we have a unique _ discriminant polynomial _ to distinguish the generic case from the essential specializations .",
    "all the theoretical results commented above are detailed in section [ discrimideal ] .    in section [ improveddispgb ]",
    ", we describe the improvements introduced in the algorithms .",
    "we have made a complete revision to the old release simplifying the algorithm and highly increasing its speed .",
    "new routines canspec and pnormalform which perform semi - canonical specifications of specializations and reductions of polynomials are given .",
    "the algorithm has been completely rewritten and the flow control has been simplified .",
    "further reductions of the tree , eliminating similar brother terminal vertices , have been performed using algorithm compactvert .    following p. gianni  @xcite , we are interested in guessing whether some basis of @xmath23 is a comprehensive grbner basis or not , in particular for the reduced grbner basis of @xmath23 wrt the product order @xmath10 .",
    "we give , in section [ cgbalg ] , a simple algorithm iscgb which uses the dispgb output tree to answer that question .",
    "we also give an algorithm preimage to compute a faithful pre - image of the non - faithful specialized polynomials from the reduced bases .",
    "this allows to construct a cgb",
    ". it will be interesting to compare our cgb with weispfenning s ccgb when implemented .",
    "finally , in section [ examples ] , we give two illustrative examples and a table of benchmarks for dispgb applied to several parametric systems from which the power of the algorithm is clearly shown .",
    "it is stated in the same section that the new dispgbmontes/ ] algorithm is efficient and provides a compact discussion of parametric systems of polynomial equations .",
    "an incipient version of it was presented in @xcite .",
    "let @xmath24 be the quotient field of @xmath4 and @xmath25 the ideal @xmath23 extended to the coefficient field @xmath26 .",
    "consider @xmath27 , the reduced grbner basis of @xmath28 wrt @xmath6 .",
    "as @xmath26 is a field , @xmath29 can be computed through the ordinary buchberger algorithm .",
    "the polynomials in @xmath29 have leading coefficient 1 . with this normalization @xmath30 can have denominators in @xmath4 .",
    "let @xmath31 be the least common multiple of the denominators of @xmath30 . to obtain a polynomial in @xmath11 corresponding to @xmath30 it suffices to multiply @xmath30 by @xmath32 .",
    "following weispfenning  @xcite , for each @xmath33 we can obtain a _ minimal lifting _ of @xmath30 , @xmath34 , such that @xmath35 and @xmath36 is minimal wrt @xmath8 . doing this for all @xmath37 we obtain @xmath38 , a minimal lifting of @xmath29 which weispfenning calls the _ generic grbner basis _ of @xmath19 .",
    "of course , @xmath39 . we will use a sub - lifting of @xmath29 , @xmath40 , and this will be our _ generic case basis _ because it is simpler to compute and corresponds to our standard form of reducing polynomials , as it will be seen in section [ improveddispgb ] .",
    "we call _ singular specialization _ a specialization @xmath41 for which the set of @xmath42 ( leading power products ) of the reduced grbner basis of @xmath43 is not equal to the set of @xmath44 .",
    "dispgb builds up a binary dichotomic tree @xmath45 branching at the vertices whenever a decision about the cancellation of some @xmath46 has been taken .",
    "each vertex @xmath47 contains the pair @xmath48 .",
    "@xmath49 is the semi - canonical specification of the specializations in @xmath50 , where @xmath51 is the radical ideal of the current assumed null conditions ( from which all factors of polynomials in @xmath52 have been dropped ) , and @xmath52 is the set of irreducible polynomials ( conveniently normalized and reduced by @xmath51 ) of the current assumed non - null conditions . considering @xmath53 the multiplicatively closed set generated by @xmath52 , then @xmath54/n_v \\right)$ ] is the reduced form of the basis of @xmath43 for the specification of the specializations @xmath55 . at a terminal",
    "vertex , the basis @xmath56 is the reduced grbner basis of @xmath43 , up to normalization , for all specializations @xmath55 .",
    "weispfenning @xcite introduces the following ideal associated to each @xmath33 : @xmath57 the second formula being computable via ordinary grbner bases techniques .",
    "then the radical of their intersection @xmath58 is used to distinguish the generic case in the algorithm .",
    "we call @xmath18 the _ weispfenning s discriminant ideal_. a specialization @xmath41 is said to be _ essential _ ( for @xmath59 ) if @xmath60 for some @xmath33 .",
    "v. weispfenning proves the following two theorems :    * @xmath61 * let @xmath41 be an inessential specialization .",
    "then * * @xmath62 is defined for every @xmath33 and @xmath63 . *",
    "* @xmath62 is the reduced grbner basis of the ideal @xmath43 .    in the dispgb tree",
    "@xmath45 specializations are grouped into disjoint final cases @xmath64 by the specification @xmath65 , and for all specializations in @xmath65 the reduced grbner bases have the same set of @xmath42 wrt @xmath6 .",
    "let @xmath66 number the terminal vertices .",
    "we call _ singular cases _ the final cases for which @xmath67 .",
    "let @xmath68 be the set of indexes of the singular cases : @xmath69 we denote @xmath70 the variety of @xmath23 and @xmath71 the ideal of the variety @xmath72 .",
    "the tree , being dichotomic , provides a partition of @xmath73 into disjoint sets of specifications , and thus @xmath74 where @xmath75 is the set of points @xmath76 corresponding to singular specifications , i.e. @xmath77    [ ninterni ] let us call @xmath78 the _ discriminant ideal_. then @xmath79    this theorem allows to compute @xmath20 from the output of buildtree , i.e. the first tree construction in dispgb .",
    "( see section [ improveddispgb ] ) .",
    "we prove both inclusions :    * @xmath80 for all @xmath81 and @xmath82 .",
    "thus @xmath83 for all @xmath82 .",
    "taking now @xmath9 such that @xmath84 this implies that @xmath85 .",
    "as this can be done for all @xmath86 , it follows that @xmath87 .",
    "* for all @xmath88 and all @xmath82 there exists @xmath89 such that @xmath90 and , of course , @xmath91 .",
    "thus @xmath83 , i.e. @xmath80 for all @xmath82 .",
    "thus @xmath92 .    before proving the next theorem",
    "we need the following    [ singisessen ] any singular specialization is essential .",
    "let @xmath93 be a singular specialization .",
    "if it were not essential , by weispfenning theorem ( w2 ) , then the reduced grbner basis of @xmath43 would be the generic basis @xmath29 , and this contradicts the definition of singular specialization .",
    "thus @xmath93 must be essential .",
    "@xmath94 .    by weispfenning s theorem ( w1 ) , if @xmath95 then @xmath96 for all essential @xmath93 , and thus @xmath80",
    "so , by lemma [ singisessen ] , @xmath80 for all singular @xmath93 .",
    "this implies that @xmath80 for all @xmath89 and @xmath84 and thus @xmath97 . finally , by proposition [ ninterni ] , @xmath98 .",
    "[ conject ] we formulate two forms    * ( strong conjecture ) .",
    "all essential specializations are singular . *",
    "( weak conjecture ) .",
    "@xmath99 .",
    "the strong formulation of conjecture [ conject ] implies the weak formulation .    if @xmath98 then , for all @xmath89 , @xmath91 .",
    "thus , @xmath80 for all singular specialization @xmath93 and , if the strong form of the conjecture is true , then @xmath80 also for all @xmath93 essential and thus @xmath96 .",
    "so , by weispfenning s theorem ( w1 ) , @xmath95 .    in any case , by definition @xmath20",
    "is discriminant , i.e. for any @xmath100 the grbner basis of @xmath101 is generic , and every singular specification is in @xmath102 .",
    "thus , what we called minimal singular variety in @xcite is described by @xmath102 .",
    "if the strong formulation of the conjecture is true then every specialization @xmath41 , for which @xmath103 , is not only essential but also singular and thus the corresponding set of @xmath42 of its reduced grbner basis can not be generic .",
    "we have tested our conjecture in more than twenty examples and we have not found any counter - example of any of the two formulations .",
    "nevertheless the weak formulation is the most interesting one and a failure of the strong formulation would not necessarily invalidate the weak formulation .    in most cases weispfenning s",
    "discriminant ideal @xmath18 is principal , as states the following    [ principalsg ] if @xmath12 is a prime ideal and the generic grbner basis @xmath29 wrt @xmath6 is not @xmath104 $ ] , then the discriminant ideal @xmath105 is principal and is generated by the radical of the @xmath106 of all the denominators of the polynomials in @xmath29 .",
    "take @xmath33 .",
    "we have @xmath107 . if @xmath108 then @xmath109 , as @xmath110 has no common factor with @xmath32 .",
    "thus @xmath111 . by hypothesis ,",
    "@xmath112 and @xmath23 is prime .",
    "so , as @xmath113 , we have @xmath114 .",
    "thus , necessarily @xmath115 and @xmath116 . as @xmath109 for all @xmath117",
    ", it follows that @xmath118 is principal .",
    "as @xmath119 is the intersection of principal ideals , the proposition follows .",
    "not only prime ideals have principal discriminant ideals as the next example shows : take @xmath120 computing the grbner basis of @xmath23 wrt @xmath121 one can see that @xmath122 and @xmath23 is not prime .",
    "the generic grbner basis wrt @xmath123 is , in this case , @xmath124 $ ] .",
    "thus @xmath125 for each @xmath37 .",
    "for this example it is easy to compute @xmath126 which is still principal even if @xmath23 is not prime and has a prime component with generic grbner basis @xmath104 $ ]",
    ".    it would be interesting to characterize which ideals @xmath12 have principal discriminant and which do not .",
    "but it is now clear that in the most interesting cases we have principal discriminants .",
    "this gives a new insight into our concept of singular variety used in the algorithm  @xcite in order to understand the parallelism and differences between the new weispfenning s algorithm @xcite and dispgb , and allows us to improve the old algorithm .    under that perspective ,",
    "we have completely revised  @xcite and obtained a much more efficient and compact discussion .",
    "an intermediate version was presented in  @xcite .",
    "we shall describe now the improvements introduced in the new dpgb library and refer to @xcite , where the old dpgb is described , for all unexplained details .     of the new algorithm & improvements & obsolete routines",
    "+ branch & dispgb & buildtree replaces old branch .",
    "current dispgb includes also rebuilding of the tree ( rebuildtree ) and compactvert . & gencase + newvertex & buildtree & better flow control , no incompatible branching . &",
    "branch + & condtobranch & more robust , ensures no incompatible branches . & newcond + & canspec & uses radical ideal .",
    "more robust . & + - & pnormalform & standard polynomial reduction wrt @xmath127 . &",
    "+ & condpgb & uses condtobranch and weispfenning s standard pair selection . & + - & discriminantideal & determines the discriminant ideal @xmath20 .",
    "& + - & rebuildtree & rebuilds the tree starting the discussion with @xmath20 . &",
    "gencase ( external ) + - & compactvert & drops brother terminal vertices with same @xmath42 sets .",
    "in this section we describe the improvements introduced in dispgb algorithm . table [ impdispgb ] summarizes the basic differences between old @xcite and the new algorithms used in it .",
    "first , we have improved the construction of the discussion tree @xmath45 in order to have a simpler flow control and to make it faster by avoiding unnecessary and useless time - consuming computations . in the old algorithm",
    "this was done by the recursive routine branch which was the unique action of dispgb , but now it is done by buildtree . as we explain later , it has been strongly reformed .    then , discriminantideal computes the discriminant ideal @xmath128 which , as shown in section [ discrimideal ] , can be determined from buildtree output .",
    "after that , dispgb calls rebuildtree .",
    "this algorithm builds a new tree setting the discriminant ideal @xmath20 at the top vertex and the generic case at the first non - null vertex labelled as @xmath104 $ ] ( see figure [ robotarm ] in section [ robot ] ) .",
    "the old tree is rebuilt under the first null vertex recomputing the specifications and eliminating incompatible branches .",
    "the result is a drastic reduction of branches in the new tree . in the old dpgb library , this work was partially done by the external algorithm gencase which has become useless .    to further compact the tree ,",
    "a new algorithm compactvert is used .",
    "it summarizes brother terminal vertices with the same set of @xmath42 into their father vertex .",
    "compactvert is called before and after rebuildtree .",
    "dispgb algorithm is sketched in table [ dispgbalg ] .",
    "we have simplified the flow control from the ancient dispgb and dropped useless operations",
    ". now all the hard work of the discussion is done by the recursive algorithm buildtree which replaces the old branch routine and makes newvertex useless .",
    "the obtained discussion is equivalent to the one given by the old dispgb , but now is more compact .",
    "it computes the discussion tree faster than the old one because now it assembles the discussion over the coefficients of the current basis in one single algorithm , avoiding unnecessary branching and useless computations .",
    "given @xmath129 , a set of polynomials generating the current ideal , buildtree takes the current basis @xmath130 at vertex @xmath50 , specialized wrt the current reduced specification @xmath131 , builds a binary tree @xmath132 containing the discussion under vertex @xmath50 , and stores all the data at the vertices of @xmath132 .",
    "it is a recursive algorithm and substitutes the old branch and newvertex .",
    "see table [ buildtreealg ] .",
    "theorem 16 in @xcite still applies to the reformed buildtree , thus we can assert the correctness and finiteness of the algorithm .",
    "the most important algorithms used by buildtree are commented below .",
    "the algorithm condtobranch substitutes the old newcond .",
    "it is used each time that buildtree is recursively called and also inside condpgb , applying it to each new not - reducing - to - zero @xmath11-polynomial .",
    "this prevents buchberger algorithm from stopping and saves incompatible branches .",
    "each time we need to know whether a given polynomial @xmath133 for example the @xmath134 ( leading coefficient ) of a new @xmath11-polynomial is zero or not for a given specification , we will reduce it by @xmath135 using pnormalform and then test whether the remainder is compatible or not with taking it null and non - null for each of the specifications using canspec .",
    "the whole task is done by condtobranch .",
    "see table [ condtobranchalg ] .",
    "buildtree uses a buchberger - like algorithm condpgb ( conditional parametric grbner basis) taking the specification into account and intending to determine a specializing grbner basis .",
    "the basic improvements on condpgb in the new version are : the call to condtobranch instead of old newcond and improving buchberger algorithm by considering weispfenning s normal strategy of pair selection @xcite .",
    "we do not detail these improvements .",
    "canspec has also been modified .    at each vertex @xmath50 of the tree a pair ( @xmath136 ) is stored , where @xmath49 is a specification of specializations .",
    "this means that for all @xmath55 one has @xmath137 and @xmath138 . from the geometric point of view , a given @xmath135 describes the set of points @xmath139 . by proposition 5 in @xcite ,",
    "one can see that @xmath135 and @xmath140 describe equivalent specialization sets . and , by proposition 7 , the same happens with @xmath141 , where @xmath142 has no factor laying in @xmath143 and is radical , and @xmath144 is the set of the irreducible factors of @xmath143 with multiplicity one reduced modulus @xmath142 .",
    "so we choose the following representative for the specifications describing equivalent specialization sets :    [ canspecific ] we call @xmath135 a _ reduced specification of specializations _ if it is a specification such that    * @xmath145 is a radical ideal , and @xmath146 , * there is no factor of any polynomials in @xmath145 laying within @xmath143 , * @xmath143 is a set of distinct irreducible polynomials not laying within @xmath145 , * @xmath147 .",
    "we must note that the set @xmath143 is not uniquely determined , as there exist infinitely many polynomials which can not be null for a given specification .",
    "for example , suppose that the current reduced specification is @xmath148 $ ] .",
    "the condition @xmath149 is compatible with @xmath20 but is redundant in this case .",
    "we can also add to @xmath143 other polynomials like @xmath150 .",
    "thus there is no unique reduced specification , but our choice is convenient enough .",
    "the task of obtaining reduced specifications and testing compatibility of the current null and non - null conditions is done by the reformed canspec .",
    "see table [ canspecalg ] .",
    "given any specification of specializations @xmath135 , if canspec(@xmath127 ) returns @xmath151 with @xmath152 , then @xmath153 is a reduced specification of @xmath127 computed in finitely many steps .",
    "otherwise it returns @xmath154 and @xmath155 are not compatible conditions .    at the end of each step",
    "@xmath156 is a radical ideal , @xmath157 is a set of irreducible polynomials with multiplicity one reduced wrt @xmath156 , so @xmath158 .",
    "so , @xmath159 is still radical when the algorithm stops , as @xmath159 is built by dropping from @xmath156 all those factors laying in @xmath157 .",
    "if the algorithm returns true , as at each completed step @xmath160 satisfies the conditions of definition [ canspecific ] , then the conditions are compatible and @xmath153 is a reduced specification of specializations .",
    "otherwise the conditions are not compatible .",
    "let us now see that this is done in finitely many steps .",
    "the algorithm starts with @xmath161 . at the next step it computes @xmath162 , and then @xmath163 , etc ... these satisfy @xmath164 . by the acc ,",
    "the process stabilizes .",
    "so , only a finite number of factors can exist , thus dropping factors is also a finite process .",
    "the second necessary task is to reduce a given polynomial in @xmath11 wrt @xmath127 .",
    "this is done in a standard form by pnormalform . to eliminate the coefficients reducing to zero for the given specification it suffices to compute the remainder of the division by @xmath20 , because @xmath20 is radical . and",
    "then , in order to further simplify the polynomials , all those factors lying in @xmath143 are also dropped from @xmath20 .",
    "see table [ pnormalformalg ] .    nevertheless , the reduction using pnormalform does not guarantee that all the coefficients of the reduced polynomial do not cancel out for any specialization @xmath165 . to test whether adding a new coefficient to the null conditions is compatible with @xmath127",
    "we need to apply condtobranch .    given @xmath166 and @xmath127",
    "we say that their reduced forms @xmath167 and @xmath168 computed by pnormalform are equivalent wrt @xmath127 when @xmath169 and @xmath170 are proportional polynomials for every particular specialization @xmath171 such that @xmath172 and @xmath173 .",
    "consider for example , @xmath174,w=\\phi)$ ] , @xmath175 , @xmath176 and @xmath177 .",
    "@xmath167 and @xmath168 are not identical , but note that they are equivalent . as can be seen in this example pnormalform",
    "is not always able to reduce them to the same polynomial .",
    "nevertheless , we have the following    given two polynomials @xmath178 then @xmath179 wrt @xmath127 iff    * @xmath180 and * pnormalform applied to @xmath181 returns 0 .    obviously",
    "if one of both hypothesis fail , the reduced expressions are not equivalent wrt @xmath127 .    on the other side ,",
    "suppose that ( i ) and ( ii ) hold .",
    "then , using order @xmath10 we have @xmath182 by hypothesis ( ii ) .",
    "thus , @xmath183 , for all specializations in @xmath127 .",
    "in particular it also holds for those specializations which do not cancel the leading coefficients of @xmath167 and @xmath168 . and",
    "so , it follows that @xmath167 and @xmath168 are equivalent wrt @xmath127 .",
    "thus , pnormalform does not obtain a canonical reduction of @xmath184 wrt @xmath127 , but it can canonically recognize two equivalent reduced expressions .      in many practical computations and after applying these algorithms to a number of cases , we have observed that some discussion trees have pairs of terminal vertices hung from the same father vertex with the same @xmath42 set of their bases .",
    "as we are only interested in those bases having different @xmath42 sets , then each of these brother pairs , @xmath185 , can be merged in one single terminal vertex compacting them into their father @xmath50 and eliminating the distinction of the latter condition taken in @xmath50 .    regarding this construction",
    ", we can define a partial order relation between two trees if , in this way , one can be transformed into the other .",
    "let @xmath11 and @xmath132 be two binary trees .",
    "we will say that @xmath186 if    * @xmath132 is a subtree of @xmath11 with same root and same intermediate vertices , and * for each terminal vertex @xmath47 there is in @xmath11 either the same vertex @xmath187 such that @xmath188 , or a subtree @xmath189 pending from vertex @xmath187 with all its terminal vertices @xmath190 with @xmath191 .",
    "so now , given a discussion binary tree @xmath132 , we may find the minimal tree @xmath192 within the set of all trees which can be compared with @xmath132 regarding this relation .",
    "this is done by a recursive algorithm called compactvert .",
    "let us just note that the minimal tree will not have any brother terminal vertices with the same @xmath42 sets of their bases .",
    "the tree @xmath132 built by buildtree can be rebuilt using the discriminant ideal @xmath20 ( see section [ discrimideal ] ) . by theorem w2 , if we are given @xmath93 such that there exists some @xmath193 for which @xmath194 , then @xmath101 corresponds to the generic case .",
    "thus , placing @xmath20 into the top vertex labelled as @xmath195 $ ] in the new tree @xmath196 , for its non - null son vertex we will have @xmath197}=(g_{[1]},\\sigma_{[1]})$ ] , where @xmath198}$ ] is the generic basis and @xmath199}$ ] is a union of specifications from @xmath132 corresponding to @xmath200}=\\ { \\sigma \\ : \\",
    "\\exists\\ , \\delta\\in n \\hbox { such that } \\sigma(\\delta ) \\ne 0 \\ } .\\ ] ] no other intermediate vertices hang from this side of the top vertex .",
    "if the strong formulation of conjecture [ conject ] holds , then no generic cases will hang from the first null vertex .",
    "the subtree under the top vertex hanging from the first null son , for which the choice is @xmath201 , will be slightly modified from the original @xmath132 .",
    "the terminal vertices corresponding to singular cases hanging from it will not be modified as , by construction , for all of them the condition is verified by the corresponding specifications .",
    "thus we can rebuild the tree using the recursive algorithm rebuildtree which goes through the old tree @xmath132 and rewrites the new one @xmath196 . at each vertex",
    "@xmath50 it tests whether the condition @xmath20 is already included in @xmath51 .",
    "if it is the case , then it copies the whole subtree under it .",
    "otherwise it adds @xmath20 to the null ideal @xmath51 and calls canspec to check whether the new condition is compatible or not .",
    "if the condition is compatible then the basis will be reduced using pnormalform and the algorithm continues . if it is not , then the recursion stops .",
    "this algorithm produces a better new tree with possibly less terminal cases ( only generic type cases can be dropped ) .",
    "this reconstruction of the tree is very little time - consuming .",
    "we add here a short description of the improvements on the generalized gaussian elimination algorithm gge .",
    "we realized , by analyzing the procedure of the old gge @xcite , that there were some special cases for which we could guess the result of the divisions at each step and thus could be skipped .",
    "these improvements halve the computing time .",
    "even though it is more efficient and faster , gge has become not so useful now because the new improvements in dispgb , detailed above , make , in general , dispgb work faster without using gge .",
    "so now , the use of gge within the execution of dispgb is just optional ( not used by default ) .",
    "however , it can be very useful for other applications , like in the tensegrity problem shown in section [ examples ] , to eliminate some variables and simplify a given basis .",
    "in @xcite the main goal is to obtain a comprehensive grbner basis . with this aim",
    ", we have built an algorithm , called iscgb , to test whether a given basis @xmath29 is a comprehensive grbner basis for @xmath23 or not .",
    "it uses pnormalform algorithm to specialize @xmath29 for every terminal case in the discussion tree .",
    "then it checks if @xmath202 includes the set of @xmath42 of the reduced grbner basis wrt @xmath127 for every terminal case .",
    "if this is true for every final case then iscgb returns true otherwise returning false .",
    "the algorithm also informs for which cases a given basis is not a cgb .",
    "thus we can compute pre - images of the polynomials for which @xmath129 does not specialize to a grbner basis and add them to the given basis in order to obtain a comprehensive grbner basis .",
    "consider a terminal case @xmath48 and @xmath203 . to simplify notations",
    "we do not consider the subindex @xmath50 .",
    "let @xmath204 be a basis of the ideal @xmath205 whose polynomials are of the form @xmath206 , with @xmath207 and @xmath208 .",
    "@xmath209 contains all the polynomials in @xmath23 which can specialize to @xmath30 ( for those with @xmath210 a non - null element of @xmath4 wrt @xmath127 ) .",
    "set @xmath211 .",
    "obviously , @xmath212 is a basis of @xmath213 . using grbner bases techniques we can express @xmath214 in the form @xmath215 where the @xmath216 s are reduced wrt @xmath20 , as we are in @xmath217 .",
    "then @xmath218 specializes to @xmath30 and is a pre - image of @xmath30 in @xmath23 .",
    "this is used to build algorithm preimage which computes a pre - image of @xmath30 .    combining iscgb and preimage we compute a cgb using the algorithm sketched in table [ cgbalg ] .",
    "let @xmath219 , which is a tentative cgb @xcite , and @xmath220 the set of final cases of the discussion tree built up by dispgb .",
    "iscgb informs about the polynomials in @xmath221 which do not have a pre - image in the current tentative cgb .",
    "cgb algorithm adds pre - images of them until a cgb is obtained .",
    "nevertheless , this construction is not canonical and is much more time - consuming than building up the tree , because it uses the product order @xmath10 instead of working separately wrt @xmath6 and @xmath8 .",
    "we have selected two significative detailed examples .",
    "the first one is the classical robot arm , which has a very nice geometrical interpretation , and the second one is the study of a tensegrity problem described by a linear system with the trivial null solution in the generic case which has a non principal discriminant ideal .",
    "after that , we outline a table containing some relevant information for several other examples .",
    "the following system represents a simple robot arm ( compare with @xcite ) : @xmath222\\\\ \\end{array}\\ ] ] using the orders @xmath223 and @xmath224 , respectively for variables and parameters , dispgb produces the following outputs : the discriminant ideal is principal : @xmath225.$ ] the set of final cases expressed in the form @xmath226 is : @xmath227 } & = & ( [ 2\\,l\\,c_2+l^2 + 1-z^2-r^2 , 4\\,l^2\\,s_2 ^ 2+(l^2 - 1)^2\\\\ & & -2\\,(l^2 + 1)\\,(r^2+z^2)+(z^2+r^2)^2,\\\\ & & 2\\,(r^2+z^2)\\,c_1 - 2\\,z\\,l\\,s_2-r\\,(r^2+z^2-l^2 + 1 ) , \\\\ & & 2\\,(r^2+z^2)\\,s_1 + 2\\,l\\,r\\,s_2+z\\,(l^2-r^2-z^2)],\\ \\ ( [ \\ ] , \\{l\\,(r^2+z^2 ) \\ } ) ) .",
    "\\\\   t_{[0 , 1 , 1 , 1 ] } & = & ( [ 2\\,l\\,c_2+l^2 + 1 , 4\\,(l^2 - 1)\\,r\\,c_1 + 2\\,z\\,l\\,s_2-(l^2 - 1)\\,r , \\\\ & & ( l^2 - 1)^2 - 4\\,z^2 , 4\\,(l^2 - 1)\\,z\\,s_1+(l^2 - 1)^2 + 4\\,z^2],\\\\ & & ( [ z^2+r^2 ] , \\{z , l+1 , r , l , l-1\\ } ) ) , \\\\",
    "t_{[0 , 1 , 1 , 0 ] } & = & ( [ 1],\\ \\ ( [ z , r ] , \\{l+1 , l , l-1 \\ } ) ) , \\\\",
    "t_{[0 , 1 , 0 , 1 ] } & = & ( [ 1],\\ \\ ( [ l^2 - 1,r^2 + z^2 ] , \\{z , l\\ } ) ) , \\\\",
    "t_{[0 , 1 , 0 , 0 ] } & = & ( [ l\\,c_2 + 1 , s_2 , s_1 ^ 2+c_1 ^ 2 - 1],\\ \\ ( [ l^2 - 1 , z , r ] , \\{l\\ } ) ) , \\\\",
    "t_{[0 , 0 , 1 ] } & = & ( [ 1],\\ ( [ l],\\{r^2+z^2 - 1\\ } ) ) , \\\\",
    "t_{[0 , 0 , 0 ] } & = & ( [ s_2 ^ 2+c_2 ^ 2 - 1,c_1-r , s_1-z],\\ \\ ( [ l , r^2+z^2 - 1 ] , \\{\\ \\ } ) ) , \\\\ \\end{array}\\ ] ]     dispgb s graphic output for the robot arm . ]    the generic case @xmath228}$ ] gives the usual formula for the robot .",
    "it is characterized by the discriminant ideal @xmath20 .",
    "the singular cases have simple geometrical interpretation and give information about the degenerated cases .    a graphic plot of the tree is also provided in the library",
    ". there , the deciding conditions can be visualized at the intermediate vertices and the @xmath42 sets of the reduced grbner bases are shown at the terminal vertices ( see figure [ robotarm ] ) .",
    "now we apply iscgb to @xmath229 wrt the output tree .",
    "the result is false , and the list of specializations for all the final cases is provided :    [ cols= \" < \" , ]",
    "we want to thank professor volker weispfenning for his useful suggestions and ideas and for encouraging us in undertaking the research on comprehensive grbner bases , as well as for his hospitality and kindness on the occasions in which we met .",
    "m.  rychlik .",
    "complexity and applications of parametric algorithms of computational algebraic geometry . in : dynamics of algorithms .",
    "r. del la llave , l. petzold , and j. lorenz .",
    "i m a volumes in mathematics and its applications , springer - verlag , * 118 * ( 2000 ) 129 ."
  ],
  "abstract_text": [
    "<S> in 1992 , v. weispfenning proved the existence of comprehensive grbner bases ( cgb ) and gave an algorithm to compute one . </S>",
    "<S> that algorithm was not very efficient and not canonical . using his suggestions , a. montes obtained in 2002 a more efficient algorithm ( dispgb ) for discussing parametric grbner bases . inspired in its philosophy , v. weispfenning defined , in 2002 , how to obtain a canonical comprehensive grbner basis ( ccgb ) for parametric polynomial ideals , and provided a constructive method .    </S>",
    "<S> in this paper we use weispfenning s ccgb ideas to make substantial improvements on montes dispgb algorithm . </S>",
    "<S> it now includes rewriting of the discussion tree using the discriminant ideal and provides a compact and effective discussion . </S>",
    "<S> we also describe the new algorithms in the dpgb library containing the improved dispgb as well as new routines to check whether a given basis is a cgb or not , and to obtain a cgb . </S>",
    "<S> examples and tests are also provided .    _ </S>",
    "<S> key words : _ discriminant ideal , comprehensive grbner bases , parametric polynomial system .    </S>",
    "<S> _ msc : _ </S>",
    "<S> 68w30 , 13p10 , 13f10 . </S>"
  ]
}