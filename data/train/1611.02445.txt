{
  "article_text": [
    "the lattice boltzmann method ( lbm ) is a new versatile and highly parallel approach where the discrete boltzmann transport equation is solved in the velocity or moment @xmath0 space to obtain the time - dependent fluid velocity distributions . due to a trivial lbm parallelization",
    "many researchers have explored the area of its implementations on graphics processors ( graphic processing units , gpu ) .",
    "a thorough review is presented in @xcite .",
    "a few typical optimisation techniques may be mentioned : combining all computations into the single kernel to minimise memory bandwidth usage , use of structure of arrays ( soa ) instead of array of structures ( aos ) data types to avoid uncoalesced memory transactions , an adaptation of all computations to the single precision floating point format to minimise a register pressure and maximise occupancy , use of two copies of data to avoid race conditions , and many others .    however , the above optimisations concern dense geometries . the number of gpu implementations for sparse geometries ( with many solid nodes ) is much lower and they offer significantly worse performance .",
    "this can hinder the usage of gpu lbm implementations in many areas where dense geometries are not applicable .",
    "typical examples may be biomedical or porous media simulations @xcite .",
    "sparse geometries handling requires some form of storing information about the placement of non - solid nodes .",
    "this information can not only increase memory usage , but also generate irregular memory access patterns that can significantly decrease performance .",
    "in general , two indirect addressing solutions are used in gpu implementations of lbm for sparse geometries : the connectivity matrix ( cm ) , shown in @xcite with highly optimised version in @xcite , and the fluid index array ( fia ) , presented in @xcite .",
    "the connectivity matrix contains pointers to the neighbour node for each propagated @xmath1 function . the fluid index array is a kind of `` bitmap '' that contains @xmath2 for every solid node in geometry or the pointer to non - solid node data .",
    "both solutions bring an overhead in memory usage , additionally the fia implementation results in a low utilisation of memory bandwidth due to the irregular data access pattern .    in this work we present the gpu implementation of lbm for sparse geometries where the information about geometry sparsity is stored using the uniform grid of three - dimensional cubic tiles .",
    "due to the fixed tile size , we were able to arrange data inside a tile to minimise memory traffic .",
    "for the proposed data layout , we show both a detailed theoretical analysis and results of performance measurements for dense and sparse geometries . additionally , we analyse how the fixed tile size affects the overall performance .",
    "provided that the tiles contain a low number of solid nodes , the performance of our implementation remains high regardless of the geometry sparsity .",
    "the structure of the paper is as follows . in section [ sec_background ]",
    ", we briefly introduce the lbm method and define basic concepts in gpu programming .",
    "section [ sec_impl ] contains the description of our implementation with the detailed analysis of introduced overheads .",
    "the performance comparison with existing implementations and a verification procedure are presented in section [ sec_results ] .",
    "section [ sec_conclusions ] contains conclusions .",
    "today s gpus are in fact mass - produced , easily programmable versatile variant of vector coprocessors . compared with universal central processing unit ( cpu ) , they offer more computational power ( due to numerous units ) and a higher memory bandwidth at the cost of a diminished cache memory and a low performance of a single computational unit .",
    "two of the most popular frameworks for gpu programming are opencl and cuda ( in this work we use the latter ) . selected parameters of cuda capable gpu generations",
    "are shown in table [ tab_gpu ] .",
    "it can be seen that the successive generations offer not only a higher memory bandwidth , but also their computational power for double precision increases faster than the memory bandwidth .    .",
    "approximate parameters of cuda capable gpus .",
    "we consider only models with maximum double precision performance dedicated to the high performance computing .",
    "the last row contains parameters of a high - end general purpose cpu . [ cols=\"^,^,^,^ \" , ]",
    "in this paper , the gpu based lbm implementation for fluid flows in sparse geometries is presented . in contrary to the previous solutions for sparse geometries , which use the indirect node addressing , our implementation covers the geometry with the uniform mesh of cubic tiles .",
    "due to the fixed tile size , we have been able to carefully arrange data inside a tile what allowed to significantly decrease the gpu memory traffic .",
    "the proposed data layout allowed us to achieve up to 684 mlups ( @xmath3% utilisation of maximum theoretical memory bandwidth ) on gtx titan for d3q19 lattice , bgk incompressible model and double precision data .",
    "we have also examined the performance of our implementation for both bgk and mrt collision models in incompressible and quasi - compressible versions .",
    "the performance comparison with existing implementations shows that in most real cases our solution allows to achieve a higher performance .",
    "especially promising results were obtained for the large geometry with good spatial locality ( cerebral aneurysm model with @xmath4 non - solid nodes ) , where we observed up to @xmath5 higher memory bandwidth utilisation than the highly optimised implementation based on indirect node addressing . only for the very sparse geometries with weak spatial locality ( array of random arranged spheres with porosity @xmath6 )",
    "our implementation is slightly slower ( 48% vs @xmath7% of peak memory bandwidth ) due to a low tile utilisation .",
    "future work includes the extension to a multi - gpu version to increase the size of supported geometries and the search for a method to increase the tile utilisation ( e.g. by a non - uniform tile placement and/or a decrease of the tile size ) .",
    "this work was supported by wrocaw university of technology , faculty of electronics , chair of computer engineering [ the statutory grant no . 50228 ] .",
    "10        m.  bernaschi , m.  fatica , s.  melchionna , s.  succi , e.  kaxiras , a flexible high - performance lattice boltzmann gpu code for the simulations of fluid flows in complex geometries , concurr .",
    "22  ( 1 ) ( 2010 ) 114 ."
  ],
  "abstract_text": [
    "<S> we describe a high - performance implementation of the lattice boltzmann method ( lbm ) for sparse 3d geometries on graphic processors ( gpu ) . </S>",
    "<S> the main contribution of this work is a data layout that allows to minimise the number of redundant memory transactions during the propagation step of lbm . </S>",
    "<S> we show that by using a uniform mesh of small three - dimensional tiles and a careful data placement it is possible to utilise more than 70% of maximum theoretical gpu memory bandwidth for d3q19 lattice and double precision numbers . </S>",
    "<S> the performance of our implementation is thoroughly examined and compared with other gpu implementations of lbm . </S>",
    "<S> the proposed method performs the best for sparse geometries with good spatial locality .    </S>",
    "<S> lattice boltzmann method , lbm , gpu , cuda </S>"
  ]
}