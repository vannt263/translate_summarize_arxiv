{
  "article_text": [
    "visibly pushdown languages were introduced by alur and madhusudan in  @xcite as a subclass of context - free languages suitable for formal program analysis , yet tractable and with nice closure properties like the class of regular languages .",
    "visibly pushdown languages are recognized by visibly pushdown automata whose stack behaviour is determined by the input symbol . if the symbol belongs to the category of _ call actions _ then the automaton must push , if it belongs to _ return actions _ then the automaton must pop , otherwise ( for the _ internal actions _ ) it may not change the stack height . in",
    "@xcite it is shown that the class of visibly pushdown languages is closed under intersection , union , complementation , renaming , concatenation and kleene star .",
    "a number of decision problems like universality , language equivalence and language inclusion , which are undecidable for context - free languages , become exptime - complete for visibly pushdown languages .    recently , visibly pushdown languages have been intensively studied and applied to e.g. program analysis  @xcite , xml processing  @xcite and the language theory of this class has been further investigated in  @xcite .",
    "researches also studied visibly pushdown games  @xcite .",
    "some recent results show , for example , the application of a variant of visibly pushdown automata for proving decidability of contextual equivalence ( and other problems ) for the third - order fragment of idealized algol  @xcite .",
    "several strict extensions of visibly pushdown automata , which still preserve some of their pleasing language properties , have been introduced in  @xcite .",
    "note that the extension introduced in  @xcite does not use the terminology of visibly pushdown automata , while it still employs similar ideas .    in this article",
    "we study visibly pushdown automata from a different perspective . rather than as language acceptors ,",
    "we consider visibly pushdown automata as devices that generate infinite state labelled graphs and we study the questions of decidability of behavioral equivalences and preorders on this class .",
    "such questions were previously intensively studied on different classes of infinite state systems , motivated by the _ equivalence checking _ approach where a given implementation and specification of a system are compared with respect to a suitable notion of behavioural equivalence or preorder . for example , in the class of transition systems generated by ordinary pushdown automata , strong bisimilarity is known to be decidable  @xcite ( see also  @xcite ) , but no reasonable complexity upper bound is presently known and e.g. the simulation preorder / equivalence on the same class is already undecidable  @xcite .",
    "our main motivation was to investigate whether the picture changes if we restrict the studied class of systems to visibly pushdown automata , which are still interesting from the modelling point of view but might provide more satisfactory decidability / complexity results .",
    "indeed , our findings confirm the decidability and more reasonable complexity bounds for a number of verification problems on visibly pushdown automata and their natural subclasses .",
    "we prove exptime - containment of equivalence checking on visibly pushdown automata ( vpda ) for practically all preorders and equivalences between simulation preorder and bisimulation equivalence that have been studied in the literature ( our focus includes simulation , completed simulation , ready simulation , 2-nested simulation and bisimulation ) .",
    "we then study two natural ( and incomparable ) subclasses of visibly pushdown automata : visibly basic process algebra ( vbpa ) and visibly one - counter automata ( v1ca ) . in case of v1ca",
    "we demonstrate pspace - containment of the preorder / equivalence checking problems and in case of vbpa even p - containment . for vbpa",
    "we provide also a direct reduction of the studied problems to equivalence checking on finite state systems , hence the fast algorithms already developed for systems with finitely many reachable states can be directly reused .",
    "all the mentioned upper bounds are matched by the corresponding lower bounds .",
    "the pspace - hardness proof for v1ca moreover improves the currently known dp lower bounds  @xcite for equivalence checking problems on ordinary one - counter automata and one - counter nets and some other problems ( see remark  [ rem:1c ] )",
    ". finally , we consider the regularity checking problem for visibly pushdown automata and show its p - completeness for vpda and vbpa , and nl - completeness for v1ca w.r.t .",
    "all equivalences between trace equivalence and bisimilarity . _ related work . _",
    "the main reason why many problems for visibly pushdown languages become tractable is , as observed in  @xcite , that a pair of visibly pushdown automata can be synchronized in a similar fashion as finite state automata .",
    "we use this idea to construct , for a given pair of vpda processes , a single pushdown automaton where we in a particular way encode the behaviour of both input processes so that they can alternate in performing their moves .",
    "this is done in such a way that the question of equality of the input processes w.r.t .",
    "a given equivalence / preorder can be tested by asking about the validity of particular modal @xmath0-calculus formulae on the single pushdown process .",
    "a similar result of reducing weak simulation between a pushdown process and a finite state process ( and vice versa ) to the model checking problem appeared in  @xcite .",
    "we generalize these ideas to cover equivalences / preorders between two visibly pushdown processes and provide a generic proof for all the equivalence checking problems .",
    "the technical details of our construction are different from  @xcite and , in particular , our construction works immediately also for vbpa ( as the necessary bookkeeping is stored in the stack alphabet ) . as a result",
    "we thus show how to handle essentially any so far studied equivalence / preorder between simulation and bisimulation in a uniform way for vpda , vbpa as well as for v1ca .",
    "regularity problems for deterministic pushdown automata were studied in  @xcite and @xcite where a double - exponential algorithm for deciding regularity w.r.t .",
    "language equivalence is given .",
    "this decidability result holds also for our class of visibly pushdown automata ( because it is determinizable ) but in our particular case we improve the result in two ways : ( i ) we provide a general algorithm for regularity checking w.r.t _ any _ equivalence between trace equivalence and bisimilarity , and ( ii ) our algorithm is running in polynomial time ( and does not require determinization , which is an expensive operation ) .",
    "in  @xcite the authors consider language regularity problems for visibly pushdown automata .",
    "in particular , they study the question whether a visibly pushdown automaton is language equivalent to a visibly counter automaton with a given threshold . in our work",
    "we study the regularity problems in the context of the standard definitions from the concurrency theory , i.e. , whether for a given vpda process there is a behaviorally equivalent finite state system , and we consider a wide range of behavioural equivalences , not only the language equivalence .",
    "the plan of the article is as follows .",
    "we introduce the class of visibly pushdown automata , a range of behavioral equivalences , and equivalence checking problems in section  [ sec : definitions ] . the decidability and complexity of equivalence checking of visibly pushdown automata and their subclasses",
    "is studied in section  [ sec : equivalences ] .",
    "regularity checking problems for the considered classes are introduced and proved decidable in polynomial time in section  [ sec : regularity ] .",
    "a summary of the results and a further discussion is presented in section  [ sec : conclusion ] .",
    "a _ labelled transition system _ ( lts ) is a triple @xmath1 where @xmath2 is the set of _ states _ ( or _ processes _ ) , @xmath3 is the set of _ labels _ ( or _ actions _ ) , and @xmath4  is the _ transition relation _ ; for each @xmath5 , we view @xmath6 as a binary relation on @xmath2 where @xmath7 iff @xmath8 .",
    "the notation can be naturally extended to @xmath9 for finite sequences of actions @xmath10 . for a process @xmath11",
    "we define the set of its _ initial actions _ by @xmath12 .",
    "we shall now define the studied equivalences / preorders which are between simulation and bisimilarity .",
    "a complete picture of glabbeek s linear / branching time hierarchy ( spectrum ) of behavioral equivalences is available in  @xcite .",
    "given @xmath1 , a binary relation @xmath13 is a    1 .",
    "_ simulation _ iff for each @xmath14 , @xmath15 , and @xmath16 such that @xmath7 there is @xmath17 such that @xmath18 and @xmath19 , 2 .",
    "_ completed simulation _",
    "iff @xmath20 is a simulation and moreover for each @xmath14 it holds that @xmath21 if and only if @xmath22 , 3 .   _ ready simulation _",
    "iff @xmath20 is a simulation and moreover for each @xmath14 it holds that @xmath23 , 4 .   _",
    "2-nested simulation _",
    "iff @xmath20 is a simulation and there is some simulation relation @xmath24 such that @xmath25 , and 5 .",
    "_ bisimulation _ iff @xmath20 is a simulation and moreover @xmath26 .",
    "we write @xmath27 if there is a simulation @xmath20 such that @xmath14 , @xmath28 if there is a completed simulation @xmath20 such that @xmath14 , @xmath29 if there is a ready simulation @xmath20 such that @xmath14 , @xmath30 if there is a 2-nested simulation @xmath20 such that @xmath14 , @xmath31 if there is a bisimulation @xmath20 such that @xmath14 .",
    "the relations are called the corresponding _ preorders _ ( except for bisimilarity , which is already an equivalence ) . for a preorder @xmath32 @xmath33 @xmath34",
    "we define the corresponding equivalence by @xmath35 iff @xmath36 and @xmath37 .",
    "we remind the reader of the fact that @xmath38 and @xmath39 and all inclusions are strict .",
    "the hierarchy is depicted in figure  [ figure - spectrum ] .",
    "we shall use a standard game - theoretic characterization of ( bi)similarity  @xcite .",
    "a _ bisimulation game _ on a pair of processes @xmath40 is a two - player game between _ attacker _ and _ defender_. the game is played in _",
    "rounds _ on pairs of states from @xmath41 . in each round",
    "the players change the _",
    "current pair of states _ @xmath42 ( initially @xmath43 and @xmath44 ) according to the following rule :    1 .",
    "attacker chooses either @xmath45 or @xmath46 , @xmath15 and performs a move @xmath7 or @xmath18 .",
    "defender responds by choosing the opposite process ( either @xmath46 or @xmath45 ) and performs a move @xmath18 or @xmath7 under the same action @xmath47 .",
    "3 .   the pair @xmath48 becomes the ( new ) current pair of states .    a _ play _ ( of the bisimulation game ) is a sequence of pairs of processes formed by the players according to the rules mentioned above .",
    "a play is finite iff one of the players gets stuck ( can not make a move ) ; the player who got stuck lost the play and the other player is the winner . if the play is infinite then defender is the winner .",
    "we use the following standard fact .",
    "it holds that @xmath31 iff defender has a winning strategy in the bisimulation game starting with the pair @xmath42 , and @xmath49 iff attacker has a winning strategy in the corresponding game .",
    "the rules of the bisimulation game can be easily modified in order to capture the other equivalences / preorders",
    ".    1 .   in the _ simulation preorder game _ , attacker is restricted to attack only from the ( left - hand side ) process @xmath45 . in the _ simulation equivalence game _ , attacker can first choose a side ( either @xmath45 or @xmath46 ) but after that he is not allowed to change the side any more .",
    "2 .   _ completed / ready simulation game _ has the same rules as the simulation game but defender is moreover losing in any configuration which breaks the extra condition imposed by the definition ( i.e. @xmath45 and @xmath46 should have the same set of initial actions in case of ready simulation , and their sets of initial actions should be both empty at the same time in case of completed simulation ) .",
    "3 .   in the _ 2-nested simulation preorder game _ , attacker starts playing from the left - hand side process @xmath45 and at most once during the play he is allowed to switch sides ( the soundness follows from the characterization provided in  @xcite ) . in the _",
    "2-nested simulation equivalence game _",
    ", attacker can initially choose any side but he is still restricted that he can change sides at most once during the play .",
    "we shall now define the model of pushdown automata .",
    "let @xmath3 be a finite set of actions , let @xmath50 be a finite set of stack symbols and let @xmath51 be a finite set of control states .",
    "we assume that the sets @xmath3 , @xmath50 and @xmath51 are pairwise disjoint .",
    "a _ pushdown automaton _",
    "( pda ) over the set of actions @xmath3 , stack alphabet @xmath50 and control states @xmath51 is a finite set @xmath52 of rules of the form @xmath53 where @xmath54 , @xmath15 , @xmath55 and @xmath56 .",
    "a pda @xmath52 determines a labelled transition system @xmath57 where the states are configurations of the form state@xmath58stack ( i.e. @xmath59 and configurations like @xmath60 are usually written as @xmath61 where the top of the stack @xmath62 is by agreement on the left ) and the transition relation is determined by the following prefix rewriting rule .",
    "@xmath63    in what follows we shall often call the configurations @xmath64 as ( pushdown ) _ processes _ and omit the reference to the corresponding pushdown automaton and its underlying labelled transition system whenever it is clear from the context .    a pushdown automaton is called _ single - state _ if the set of its control states is a singleton set ( @xmath65 ) . in this case we usually omit the control state from the rules and configurations and we call such automata as bpa for _ basic process algebra _ , which is another standard terminology .",
    "a pushdown automaton is called 1ca for _ one - counter automaton _",
    "if the stack alphabet consists of two symbols only , @xmath66 , and every rule is of the form @xmath67 or @xmath68 , where @xmath69 .",
    "this means that every configuration reachable from @xmath70 is of the form @xmath71 where @xmath72 stands for a sequence of @xmath73 symbols @xmath74 and @xmath75 corresponds to the bottom of the stack ( the value zero ) .",
    "we shall simply denote such a configuration by @xmath76 and say that it represents the counter value @xmath73 .",
    "assume that @xmath77 is partitioned into a disjoint union of finite sets of call , return and internal actions , respectively .",
    "a _ visibly pushdown automaton _ ( vpda ) is a pda which satisfies additional three requirements for any rule @xmath53 ( where @xmath78 stands for the length of @xmath62 ) :    1 .   if @xmath79 then @xmath80 ( call ) , 2 .",
    "if @xmath81 then @xmath82 ( return ) , and 3 .   if @xmath83 then @xmath84 ( internal ) .",
    "hence in vpda the type of the input action determines the change in the height of the stack ( call by @xmath85 , return by @xmath86 , internal by @xmath87 ) .",
    "visibly basic process algebra ( vbpa ) and visibly one - counter automata ( v1ca ) are defined analogously .    for internal actions we allow to modify also the top of the stack .",
    "this model ( for vpda ) can be easily seen to be equivalent to the standard one ( as introduced in  @xcite ) where the top of the stack does not change under internal actions .",
    "however , when we consider the subclass vbpa , the possibility of changing the top of the stack under internal actions increases the descriptive power of the formalism . unlike in  @xcite",
    ", we do not allow to perform return actions on the empty stack .",
    "this mild restriction is essential for our results on regularity checking in section  [ sec : regularity ] but the results about equivalence checking in section  [ sec : equivalences ] are valid even without this restriction .",
    "consider the vpda rules @xmath88 , @xmath89 , @xmath90 where @xmath79 and @xmath91 .",
    "the transition system generated by the root @xmath64 looks as follows .",
    "+    the vpda process @xmath64 ( which is in fact also a vbpa process ) generates an infinite state transition system , which is not trace equivalent ( and hence also not bisimilar ) to any finite state system .",
    "hence the class of visibly pushdown processes and visibly bpa processes strictly contains all finite state processes .",
    "the question we are interested in is : given a vpda and two of its initial processes @xmath64 and @xmath92 , can we algorithmically decide whether @xmath64 and @xmath92 are related with respect to a given preorder / equivalence and if yes , what is the complexity ?",
    "similar questions can be asked for vbpa and v1ca .",
    "note that the problem of equivalence checking of two processes belonging to different visibly pushdown automata ( under the same partitioning of actions ) is also covered by the definition of the problem above .",
    "we can always consider only a single vpda by making a disjoint union of the respective pushdown automata .",
    "we shall now study preorder / equivalence checking problems on visibly pushdown automata .",
    "we prove their decidability by reducing the problems to model checking of an ordinary pushdown system against a @xmath0-calculus formula .",
    "let @xmath52 be a vpda over the set of actions @xmath77 , stack alphabet @xmath50 and control states @xmath51 .",
    "we shall construct a pda @xmath93 over the actions @xmath94 where @xmath95 , stack alphabet @xmath96 where @xmath97 , and control states @xmath98 .",
    "for notational convenience , elements @xmath99 will be written simply as @xmath100 .",
    "the idea is that for a given pair of vpda processes we shall construct a single pda process which simulates the behaviour of both vpda processes by repeatedly performing a move in one of the processes , immediately followed by a move under the same action in the other process .",
    "the actions @xmath101 and @xmath102 make it visible , whether the move is performed on the left - hand side or right - hand side .",
    "the assumption that the given processes are vpda ensures that their stacks are kept synchronized .",
    "we shall define a partial mapping @xmath103 : \\gamma^*\\times\\gamma^ * \\rightarrow ( \\gamma\\times\\gamma)^*$ ] inductively as follows ( @xmath104 and @xmath105 such that @xmath106 ) :    [ cols=\"<,^ , < \" , ]     these rules are more complex and they correspond to a particular implementation of the so - called _",
    "defender s forcing technique _",
    "( for further examples see e.g.  @xcite ) .",
    "we shall explain the idea by using figure  [ figure - choice ] .",
    "assume that @xmath107 and @xmath108 .",
    "in the first round of the bisimulation game starting from @xmath109 and @xmath110 where @xmath111 , attacker is forced to take the move @xmath112 . on any other move defender answers by immediately reaching a pair of syntactically equal processes ( and",
    "thus wins the game ) .",
    "defender s answer on attacker s move @xmath112 is to perform @xmath113 for some @xmath114 .",
    "the second round thus starts from the pair @xmath115 and @xmath116 .",
    "should attacker choose to play the action @xmath117 for some state @xmath102 such that @xmath118 ( on either side ) , defender can again reach a syntactic equality and win .",
    "hence attacker is forced to play the action @xmath119 on which defender answers by the same action in the opposite process and the players reach the pair @xmath120 and @xmath121 .",
    "note that it was defender who selected the new control state @xmath122 .",
    "finally , for every @xmath123 we add the rule @xmath124    it is easy to see that @xmath52 is a visibly one - counter automaton and we shall now argue for the correctness of the reduction .",
    "assume that @xmath125 .",
    "we shall argue that defender has a winning strategy in the bisimulation game starting from @xmath70 and @xmath126 . in the first phase attacker",
    "can generate an arbitrary number of the symbols @xmath74 on the stacks . at some point he has to perform",
    "the action @xmath47 and switch to @xmath127 and @xmath128 for some @xmath73 .",
    "the players now remove the symbols @xmath74 one by one and change the control states according to the function @xmath129 . as @xmath125 , we know that no computation tree can be accepting .",
    "this means that whatever choices attacker makes in existential states , defender can still select suitable successors of universal states such that when the players empty the whole counter and arrive to the pair @xmath130 and @xmath131 , defender guarantees that @xmath132 .",
    "therefore @xmath130 and @xmath131 are stuck and thus defender has a winning strategy in the bisimulation game .    on the other hand , if @xmath133 , we will demonstrate attacker s winning strategy in the simulation preorder game starting from @xmath70 and @xmath126 .",
    "attacker first forces ( by repeatedly performing the action @xmath134 followed by one action @xmath47 ) to reach a pair of states @xmath127 and @xmath135 such that @xmath136 . in the checking phase , there is an accepting computation tree for the word @xmath72 and hence attacker can make existential choices such that whatever universal choices defender makes , the players arrive to the situation @xmath130 and @xmath131 for some @xmath123",
    ". now attacker wins by playing @xmath137 to which defender has no answer .",
    "notice that during the whole game ( and particularly during the part where defender chooses a successor of a universal state ) attacker can make his moves only on the left - hand side .",
    "therefore @xmath138 as required .    [ rem:1c ]",
    "the reduction above works also for a strict subclass of one - counter automata called one - counter nets ( where it is not allowed to test for zero , see e.g.  @xcite ) .",
    "it is enough to replace the final rule @xmath137 with two new rules @xmath139 and @xmath140 for every @xmath123 .",
    "moreover , a slight modification of the system allows to show pspace - hardness of simulation preorder checking between one - counter automata and finite state systems and vice versa .",
    "hence the previously known dp lower bounds  @xcite for all relations between simulation preorder and bisimulation equivalence on one - counter nets ( and one - counter automata ) as well as of simulation preorder / equivalence between one - counter automata and finite state systems , and between finite state systems and one - counter automata are raised to pspace - hardness .",
    "we are now ready to state the precise complexity of ( bi)simulation - like preorders / equivalences on visibly one - counter automata .",
    "simulation , completed simulation , ready simulation and 2-nested simulation preorders and equivalences , as well as bisimulation equivalence are pspace - complete on v1ca .",
    "pspace - hardness follows from lemma  [ lem : pspace ] .",
    "containment in pspace is due to lemma  [ lem : mu ] and due to  @xcite where it was very recently showed that model checking modal @xmath0-calculus on one - counter automata is decidable in pspace .",
    "the only slight complication is that the system used in lemma  [ lem : mu ] is not necessarily a one - counter automaton .",
    "all stack symbols are of the form @xmath141 or @xmath142 which is fine , except for the very top of the stack where more different stack symbols are used . nevertheless , by standard techniques",
    ", the top of the stack can be remembered in the control states in order to apply the result from  @xcite .",
    "in this section we ask the question whether a given vpda process is equivalent to some finite state system",
    ". should this be the case , we call the process _ regular _",
    "( w.r.t . the considered equivalence ) .",
    "a vpda process @xmath64 is _ regular w.r.t . a given equivalence @xmath143 _ iff there is a finite state process @xmath144 such that @xmath145 .",
    "note that we do not fix any particular equivalence @xmath143 in the definition above .",
    "this is on purpose as the results in this section are generic and hold for regularity w.r.t",
    ". many different equivalence notions",
    ".    we shall now give a semantical characterization of regular vpda processes via the property of unbounded popping and a polynomial time decision algorithm to test whether a given process satisfies this property .",
    "let @xmath77 be the set of actions of a given vpda .",
    "we define a function @xmath146 by @xmath147 for all @xmath79 , @xmath148 for all @xmath81 , and @xmath149 for all @xmath83 .",
    "the function @xmath150 can be naturally extended to sequences of actions by @xmath151 .",
    "observe now that for any computation @xmath152 we have @xmath153 .",
    "let @xmath64 be a vpda process .",
    "we say that @xmath64 provides _",
    "unbounded popping _ if for every natural number @xmath154 there is a process @xmath155 and a word @xmath10 such that @xmath156 and @xmath157  .",
    "[ lem : reg1 ] let @xmath64 be a vpda process which provides unbounded popping . then @xmath64 is not regular w.r.t .",
    "trace equivalence .    by contradiction .",
    "let @xmath64 be trace equivalent to some finite state system @xmath144 with @xmath73 states .",
    "let us consider a trace @xmath158 such that @xmath159 for some @xmath155 and @xmath160 .",
    "such a trace must exist because @xmath64 provides unbounded popping .",
    "the trace @xmath158 must be executable also in @xmath144 .",
    "however , because @xmath144 has @xmath73 states , during the computation on @xmath161 , it must necessarily enter twice some state @xmath162 . because @xmath155 decreases the stack height by more than @xmath73 symbols during the computation on @xmath161",
    ", we can moreover assume that the second occurrence of @xmath162 in @xmath144 happened when the corresponding pushdown configuration had the stack height strictly smaller than in the first occurrence of @xmath162 .",
    "this means that such a computation on @xmath161 forms a loop on a substring @xmath163 of @xmath161 which was observed between the first and the second occurrence of @xmath162 and @xmath164 .    by repeating the loop under @xmath163 ( where @xmath165 ) in @xmath144 sufficiently many times ( @xmath166 times is surely enough )",
    ", @xmath144 can achieve a trace @xmath167 with @xmath168 .",
    "however , this trace is not possible from @xmath64 ( any word @xmath169 such that @xmath170 satisfies that @xmath171 ) .",
    "this is a contradiction .",
    "[ lem : reg2 ] let @xmath64 be a vpda process which does not provide unbounded popping . then @xmath64 is regular w.r.t .",
    "bisimilarity .",
    "assume that @xmath64 does not provide unbounded popping .",
    "in other words , there is a constant @xmath172 such that for every process @xmath155 reachable from @xmath64 it is the case that for any computation starting from @xmath155 , the stack height @xmath173 can not be decreased by more than @xmath172 symbols .",
    "this means that in any reachable configuration it is sufficient to remember only @xmath172 top - most stack symbols and hence the system can be up to bisimilarity described as a finite state system ( in general of exponential size ) .",
    "[ thm : popping ] let @xmath64 be a vpda process .",
    "then , for any equivalence relation between trace equivalence and bisimilarity , @xmath64 provides unbounded popping if and only if @xmath64 is not regular .    directly from lemma  [ lem : reg1 ] and lemma  [ lem : reg2 ] .",
    "we shall now show that unbounded popping property is decidable in polynomial time and we also take a closer look at the exact complexity of regularity checking problems on vpda , vbpa and v1ca .",
    "the results are presented in the following three lemmas .",
    "[ lem : inp ] regularity checking of vpda w.r.t .",
    "any equivalence between trace equivalence and bisimilarity is decidable in deterministic polynomial time .",
    "we can check , for every @xmath174 and @xmath175 , whether the regular set @xmath176 is infinite . a nondeterministic finite automaton recognizing this language can be constructed in polynomial time because @xmath177 and @xmath178 preserve regularity and are polynomial time computable ( see e.g.  @xcite ) , and the check whether the resulting automaton has an infinite language amounts to searching ( in polynomial time ) for a reachable cycle from which there is a path to some accept state .",
    "observe now that if the above mentioned regular language is infinite , then @xmath92 has infinitely many different successors with higher and higher stacks such that all of them can be completely emptied . to see whether a given vpda process @xmath64 provides unbounded popping ( and hence it is nonregular due to theorem  [ thm : popping ] )",
    ", it is now enough to test whether @xmath179 for some @xmath92 satisfying the condition above .",
    "the test can be again done in polynomial time  @xcite .",
    "[ lem : phard ] regularity checking of vbpa w.r.t .",
    "any equivalence between trace equivalence and bisimilarity is p - hard .    in order to argue that regularity for vbpa is p - hard we first consider the following problem .",
    "let @xmath52 be a bpa system over the set of actions @xmath3 and a stack alphabet @xmath50 .",
    "let @xmath55 .",
    "the language of @xmath180 recognized by the empty stack is defined as @xmath181 .",
    "it is known that the problem whether @xmath182 ( which we shall call bpa - empty ) is p - hard , even under the assumption that there are only finitely many configurations reachable from the process @xmath180 , and that every rule @xmath183 in @xmath52 satisfies that @xmath184 .",
    "p - hardness of bpa - empty follows from a simple logarithmic space reduction from the monotone circuit value problem ( see  @xcite for details ) .",
    "we shall reduce bpa - empty to regularity checking on vbpa .",
    "let @xmath52 together with a stack symbol @xmath55 , which has finitely many reachable states , be a given instance of bpa - empty .",
    "we construct ( in logarithmic space ) a vbpa system @xmath93 over the partitioned action alphabet @xmath185 , @xmath186 , @xmath187 and the stack alphabet @xmath188 , where @xmath189 , @xmath190 , @xmath191 and @xmath192 are fresh stack symbols , such that    1 .   if @xmath182 in @xmath52 then @xmath189 is a regular process in @xmath93 w.r.t .",
    "bisimilarity , and 2 .   if @xmath193 in @xmath52 then @xmath189 is not a regular process in @xmath93 w.r.t .",
    "trace equivalence .",
    "we build @xmath93 from @xmath52 as follows :    1 .   for every @xmath194 where @xmath80 we add to @xmath93 the rule @xmath195 , 2 .   for every @xmath194 where @xmath82 we add to @xmath93 the rule @xmath196 , and 3",
    ".   for every @xmath194 where @xmath84 we add to @xmath93 the rule @xmath197",
    ".    this does not change the answer to the emptiness problem and the system @xmath93 becomes visibly bpa . if we now add the following rules to @xmath93 @xmath198 then it is easy to see that @xmath189 is regular if and only if @xmath199 .",
    "obviously , @xmath93 is still visibly bpa .",
    "hence regularity checking on vbpa is p - hard for any equivalence between trace equivalence and bisimilarity .",
    "[ lem : nlcompl ] regularity checking of v1ca w.r.t .",
    "any equivalence between trace equivalence and bisimilarity is nl - complete .",
    "nl - hardness follows immediately from the fact that the regularity checking problem naturally contains the reachability problem on finite state systems ( by a similar construction as in lemma  [ lem : phard ] ) .",
    "the containment in nondeterministic logarithmic space is by the observation that a given visibly one - counter process @xmath200 in @xmath52 , where @xmath52 has @xmath73 control states , provides unbounded popping if and only if there exist two control states @xmath201 and @xmath202 such that    1 .   @xmath203 for some @xmath204 and @xmath205 such that @xmath206 and @xmath207 for every prefix @xmath163 of @xmath204 , 2 .",
    "@xmath208 for some @xmath161 and @xmath209 such that @xmath210 and @xmath211 , 3 .",
    "@xmath212 for some @xmath213 and @xmath214 such that @xmath215 , and 4 .",
    "@xmath216 for some @xmath217 and @xmath218 such that @xmath219 and @xmath220 .",
    "note that due to the restrictions on the lengths of the action sequences in points 2 .",
    ", 3 . and 4 . , no transition is performed from any configuration where the counter value is zero .",
    "hence the same computations are possible also for any higher initial counter value .",
    "the idea is that the process @xmath200 provides unbounded popping iff there is a possibility to arbitrarily increase the counter value ( by means of the cycle from the control state @xmath201 in condition 2 . ) and then reach a control state @xmath202 ( condition 3 . ) in which the counter value can be arbitrarily decreased ( condition 4 . ) . initially ,",
    "condition 1 .",
    "guarantees that the state @xmath201 can be reached with a sufficiently large counter value .",
    "the extra requirement @xmath221 for any prefix @xmath163 of @xmath204 in condition 1 . is harmless because if the state @xmath222 is reachable then it is not necessary that the counter value during the computation grows to more than @xmath223 . to show that ,",
    "we first observe that we can require that the counter value @xmath205 satisfies @xmath224 . for the sake of contradiction ,",
    "let the control state @xmath201 be reachable from the initial configuration such that the minimal counter value @xmath205 is greater than @xmath225 .",
    "we will show that we can then reach @xmath201 with a counter value strictly smaller ( while still at least @xmath73 ) .",
    "let us consider the suffix of this computation where all configurations have the counter values greater or equal to @xmath73 .",
    "now , in the region of configurations with the counter values between @xmath73 and @xmath225 , there are necessarily two configurations @xmath226 and @xmath227 for some control state @xmath102 such that @xmath228 and @xmath226 precedes @xmath227 . by removing the part of the computation between @xmath226 and @xmath227 we achieve a computation that reaches the control state @xmath201 with a strictly smaller counter value .",
    "we can hence assume that @xmath222 is reachable such that @xmath224 .",
    "should the counter grow to more than @xmath223 during this computation then there would necessarily appear two configurations with the same counter value ( greater than @xmath225 ) and the same control state and hence we could find a shorter sequence of actions to reach @xmath222 .",
    "we shall now argue that the extra restrictions in conditions 2 .",
    ", 3 . and 4 . are harmless too . in condition 2 .",
    ", for the sake of contradiction , assume that from the control state @xmath201 we can reach @xmath201 with a higher counter value ( and never test for zero during the computation ) such that the shortest sequence of actions to achieve this is strictly longer than @xmath73 .",
    "on such a sequence , there are necessarily two configurations @xmath226 and @xmath227 with the same control state @xmath102 such that @xmath226 precedes @xmath227 .",
    "if @xmath229 than we can simply remove the part of the computation between these two configurations and reach the control state @xmath201 with a possibly even higher counter value than before .",
    "if @xmath230 then we could have initially selected the control state @xmath102 instead of @xmath201 , because there is a loop on the control state @xmath102 which increases the counter value .",
    "similarly , we can show that the restrictions in points 3 . and 4 .",
    "are harmless too .",
    "finally , we note that the control states @xmath201 and @xmath202 above can be nondeterministically guessed and the conditions 1.4 .",
    "verified in nondeterministic logarithmic space .",
    "hence the regularity checking problem for visibly one - counter automata is in nl .",
    "we finish by a theorem summarizing the complexity results proved in lemma  [ lem : inp ] , lemma  [ lem : phard ] and lemma  [ lem : nlcompl ] .    the regularity checking problem w.r.t .",
    "any equivalence between trace equivalence and bisimilarity ( in particular also w.r.t .",
    "any equivalence considered in this article ) is p - complete for vpda and vbpa and nl - complete for v1ca .",
    "in the following table we provide a comparison of bisimulation , simulation and regularity ( w.r.t .",
    "bisimilarity ) checking on pda , 1ca , bpa and their subclasses vpda , v1ca , vbpa .",
    "results achieved in this article are in bold .",
    "+     @xmath231 and @xmath232 & @xmath233-regularity + pda &    c +    &    c +    &    c +     + vpda &    c +    &    c +    & * p - complete * + 1ca &    c +    &    c +    &    c +     + v1ca & * pspace - complete * & * pspace - complete * & * nl - complete * + bpa &    c +    &    c +    &    c +     + vbpa &    c +    &    c +    & * p - complete * +     + in fact , our results about exptime - completeness for vpda , pspace - completeness for v1ca and p - completeness for vbpa hold for all preorders and equivalences between simulation preorder and bisimulation equivalence studied in the literature ( like completed simulation , ready simulation and 2-nested simulation ) .",
    "the results confirm a general trend seen in the classical language theory of pushdown automata : a relatively minor restriction ( from the practical point of view ) of being able to distinguish call , return and internal actions often significantly improves the complexity of the studied problems and sometimes even changes undecidable problems into decidable ones , moreover with reasonable complexity bounds .",
    "all the upper bounds proved in this article are matched by the corresponding lower bounds . here",
    "the most interesting result is pspace - hardness of preorder / equivalence checking on v1ca for all relations between simulation preorder and bisimulation equivalence .",
    "as noted in remark  [ rem:1c ] , this proof improves also a number of other complexity lower bounds for problems on standard one - counter nets and one - counter automata , which were previously known to be only dp - hard ( dp - hardness is , likely , only a slightly stronger result than np and co - np hardness ) .",
    "finally , we have proved that for all the studied equivalences , the regularity problem is decidable in polynomial time , more precisely , p - complete for vpda and vbpa and nl - complete for v1ca .",
    "checking whether an infinite state process is equivalent to some regular one is a relevant question because many problems about such a process can be answered by verifying the equivalent finite state system and for finite state systems many efficient algorithms have been developed .",
    "a rather interesting observation is that preorder / equivalence checking on vbpa for preorders / equivalences between simulation and bisimilarity can be polynomially translated to verification problems on finite state systems . on the other hand ,",
    "the class of vbpa processes is more expressive than the class of finite state processes and hence the question whether for a given vpda ( or v1ca ) process there is some equivalent vbpa process is of a particular interest .",
    "another open problem is whether the unbounded popping property for visibly pushdown automata can be generalized so that it characterizes regularity also on vpda that can perform return actions even on the empty stack .    in the present article",
    "we did not consider any weak preorder / equivalences as non - observable pushing and popping actions will immediately break the synchronization of the stacks of the processes and the visibility constraint would not be usable any more .",
    "i would like to thank markus lohrey for a discussion at etaps06 and for a reference to pspace - completeness of the emptiness problem for alternating automata over a one - letter alphabet .",
    "my thanks go also to the anonymous referees of csl06 and lmcs for their useful comments and for suggesting the p - hardness proof of regularity checking for vbpa .",
    "r.  alur , k.  etessami , and p.  madhusudan . a temporal logic of nested calls and returns . in _ proceedings of the 10th international conference on tools and algorithms for the construction and analysis of systems ( tacas04 )",
    "_ , volume 2988 of _ lncs _ , pages 467481 .",
    "springer - verlag , 2004 .",
    "l.  aceto , w.  fokkink , and a.  inglfsdttir .",
    "2-nested simulation is not finitely equationally axiomatizable . in _ proceedings of the 18th annual symposium on theoretical aspects of computer science ( stacs01 ) _ , volume 2010 of _ lncs _ , pages 3950 .",
    "springer - verlag , 2001 .",
    "r.  alur , v.  kumar , p.  madhusudan , and m.  viswanathan .",
    "congruences for visibly pushdown languages . in _ proceedings of the 32nd international colloquium on automata , languages and programming ( icalp05 ) _ ,",
    "volume 3580 of _ lncs _ , pages 11021114 .",
    "springer - verlag , 2005 .",
    "o.  burkart , d.  caucal , and b.  steffen .",
    "an elementary decision procedure for arbitrary context - free processes . in _ proceedings of the 20th international symposium on mathematical foundations of computer science ( mfcs95 ) _ , volume 969 of _ lncs _ , pages 423433 .",
    "springer - verlag , 1995 .",
    "o.  burkart , d.  caucal , and b.  steffen .",
    "bisimulation collapse and the process taxonomy . in _ proceedings of the 7th international conference on concurrency theory ( concur96 )",
    "_ , volume 1119 of _ lncs _ , pages 247262 .",
    "springer - verlag , 1996 .",
    "a.  bouajjani , j.  esparza , and o.  maler .",
    "reachability analysis of pushdown automata : application to model - checking . in _ proceedings of the 8th international conference on concurrency theory ( concur97 ) _ , volume 1243 of _ lncs _ , pages 135150 .",
    "springer - verlag , 1997 .",
    "v.  brny , ch .",
    "lding , and o.  serre .",
    "regularity problems for visibly pushdown languages . in _ proceedings of the 23rd annual symposioum on theoretical aspects of computer science ( stacs06 ) _ , volume 3884 of _ lncs _ , pages 420431 .",
    "springer - verlag , 2006 .",
    "d.  caucal .",
    "synchronization of pushdown automata . in _ proceedings of 10th international conference on developments in laguage theory ( dlt06 ) _ , volume 4036 of _ lncs _ , pages 120132 .",
    "springer - verlag , 2006 .",
    "j.  esparza , d.  hansel , p.  rossmanith , and s.  schwoon .",
    "efficient algorithms for model checking pushdown systems . in _ proceedings of the 12th international conference on computer",
    "aided verification ( cav00 ) _ , volume 1855 of _ lncs _ , pages 232247 .",
    "springer - verlag , 2000 .",
    "d.  fisman and a.  pnueli . beyond regular model checking . in _",
    "foundations of software technology and theoretical computer science ( fst&tcs01 ) _ , volume 2245 of _ lncs _ , pages 156170 .",
    "springer - verlag , 2001 .",
    "m.  holzer . on emptiness and counting for alternating finite automata . in _ proceedings of the 2nd international conference on developments in language theory ( dlt95 ) _ , pages 8897 .",
    "world scientific , 1996 .",
    "p.  janar , f.  moller , and z.  sawa .",
    "simulation problems for one - counter machines . in _ proceedings of the 26th annual conference on current trends in theory and practice of informatics ( sofsem99 )",
    "_ , volume 1725 of _ lncs _ , pages 404413 .",
    "springer - verlag , 1999 .",
    "a.  kuera and r.  mayr . on the complexity of semantic equivalences for pushdown automata and bpa . in _ proceedings of the 27th international symposium on mathematical foundations of computer science ( mfcs02 )",
    "_ , volume 2420 of _ lncs _ , pages 433445 .",
    "springer - verlag , 2002 .",
    "lding , p.  madhusudan , and o.  serre .",
    "visibly pushdown games . in _ proceedings of the 24th international conference on foundations of software technology and theoretical computer science ( fsttcs04 )",
    "_ , volume 3328 of _ lncs _ , pages 408420 .",
    "springer - verlag , 2004 .",
    "a.  murawski and i.  walukiewicz .",
    "third - order idealized algol with iteration is decidable . in _ proceedings of the 8th international conference on foundations of software science and computation structures ( fossacs05 ) _ , volume 3441 of _ lncs _ , pages 202218 , 2005 .",
    "d.  nowotka and j.  srba .",
    "height - deterministic pushdown automata . in _ proceedings of 32nd international symposium on mathematical foundations of computer science ( mfcs07 ) _ , volume 4708 of _ lncs _ , pages 125134 .",
    "springer - verlag , 2007 .",
    "g.  snizergues .",
    "decidability of bisimulation equivalence for equational graphs of finite out - degree . in _ proceedings of the 39th annual symposium on foundations of computer science(focs98 )",
    "_ , pages 120129 .",
    "ieee computer society , 1998 .",
    "o.  serre .",
    "parity games played on transition graphs of one - counter processes . in _ proceedings of the 9th international conference on foundations of software science and computation structures ( fossacs06 ) _ , volume 3921 of _ lncs",
    "_ , pages 337351 .",
    "springer - verlag , 2006 .",
    "j.  srba . on the power of labels in transition systems . in _ proceedings of the 12th international conference on concurrency theory ( concur01 )",
    "_ , volume 2154 of _ lncs _ , pages 277291 .",
    "springer - verlag , 2001 .",
    "j.  srba .",
    "strong bisimilarity and regularity of basic process algebra is pspace - hard . in _ proceedings of the 29th international colloquium on automata , languages and programming ( icalp02 ) _ , volume 2380 of _ lncs _ , pages 716727 .",
    "springer - verlag , 2002 .",
    "w.  thomas . on the ehrenfeucht - frass game in theoretical computer science ( extended abstract ) . in _ proceedings of the 4th international joint conference caap / fase , theory and practice of software development ( tapsoft93 ) _ , volume 668 of _ lncs _ , pages 559568 .",
    "springer - verlag , 1993 .",
    "van glabbeek . the linear time  branching time spectrum . in _ proceedings of the 1st internatinal conference on theories of concurrency : unification and extension ( concur90 ) _ , volume 458 of _ lncs _ , pages 278297 .",
    "springer - verlag , 1990 ."
  ],
  "abstract_text": [
    "<S> we study ( bi)simulation - like preorder / equivalence checking on visibly pushdown automata , visibly bpa ( basic process algebra ) and visibly one - counter automata . </S>",
    "<S> we describe generic methods for proving complexity upper and lower bounds for a number of studied preorders and equivalences like simulation , completed simulation , ready simulation , 2-nested simulation preorders / equivalences and bisimulation equivalence . </S>",
    "<S> our main results are that all the mentioned equivalences and preorders are exptime - complete on visibly pushdown automata , pspace - complete on visibly one - counter automata and p - complete on visibly bpa . </S>",
    "<S> our pspace lower bound for visibly one - counter automata improves also the previously known dp - hardness results for ordinary one - counter automata and one - counter nets . </S>",
    "<S> finally , we study regularity checking problems for visibly pushdown automata and show that they can be decided in polynomial time . </S>"
  ]
}